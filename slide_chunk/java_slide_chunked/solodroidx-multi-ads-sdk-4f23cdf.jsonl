{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/application/MyApplication.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.application;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;", "\nimport android.app.Activity;\nimport android.app.Application;\nimport android.content.Context;\nimport android.os.Bundle;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.lifecycle.DefaultLifecycleObserver;\nimport androidx.lifecycle.LifecycleObserver;", "import androidx.lifecycle.DefaultLifecycleObserver;\nimport androidx.lifecycle.LifecycleObserver;\nimport androidx.lifecycle.LifecycleOwner;\nimport androidx.lifecycle.ProcessLifecycleOwner;\nimport androidx.multidex.MultiDex;\n\nimport com.solodroid.ads.sdk.format.AppOpenAdAppLovin;\nimport com.solodroid.ads.sdk.format.AppOpenAdManager;\nimport com.solodroid.ads.sdk.format.AppOpenAdMob;\nimport com.solodroid.ads.sdk.format.AppOpenAdWortise;", "import com.solodroid.ads.sdk.format.AppOpenAdMob;\nimport com.solodroid.ads.sdk.format.AppOpenAdWortise;\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\nimport com.solodroid.ads.sdkdemo.data.Constant;\n\n@SuppressWarnings(\"ConstantConditions\")\npublic class MyApplication extends Application {\n\n    private AppOpenAdMob appOpenAdMob;\n    private AppOpenAdManager appOpenAdManager;\n    private AppOpenAdAppLovin appOpenAdAppLovin;\n    private AppOpenAdWortise appOpenAdWortise;\n    Activity currentActivity;\n\n    @Override", "    public void onCreate() {\n        super.onCreate();\n        if (!Constant.FORCE_TO_SHOW_APP_OPEN_AD_ON_START) {\n            registerActivityLifecycleCallbacks(activityLifecycleCallbacks);\n            ProcessLifecycleOwner.get().getLifecycle().addObserver(lifecycleObserver);\n            appOpenAdMob = new AppOpenAdMob();\n            appOpenAdManager = new AppOpenAdManager();\n            appOpenAdAppLovin = new AppOpenAdAppLovin();\n            appOpenAdWortise = new AppOpenAdWortise();\n        }\n    }\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        MultiDex.install(this);\n    }\n\n    LifecycleObserver lifecycleObserver = new DefaultLifecycleObserver() {\n        @Override", "        public void onStart(@NonNull LifecycleOwner owner) {\n            DefaultLifecycleObserver.super.onStart(owner);\n            if (Constant.isAppOpen) {\n                if (Constant.OPEN_ADS_ON_RESUME) {\n                    if (Constant.AD_STATUS.equals(AD_STATUS_ON)) {\n                        switch (Constant.AD_NETWORK) {\n                            case ADMOB:\n                                if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdMob.showAdIfAvailable(currentActivity, Constant.ADMOB_APP_OPEN_AD_ID);\n                                    }\n                                }\n                                break;\n                            case GOOGLE_AD_MANAGER:", "                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdMob.showAdIfAvailable(currentActivity, Constant.ADMOB_APP_OPEN_AD_ID);\n                                    }\n                                }\n                                break;\n                            case GOOGLE_AD_MANAGER:\n                                if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID.equals(\"0\")) {\n                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdManager.showAdIfAvailable(currentActivity, Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID);\n                                    }\n                                }\n                                break;\n                            case APPLOVIN:\n                            case APPLOVIN_MAX:", "                                if (!Constant.APPLOVIN_APP_OPEN_AP_ID.equals(\"0\")) {\n                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdAppLovin.showAdIfAvailable(currentActivity, Constant.APPLOVIN_APP_OPEN_AP_ID);\n                                    }\n                                }\n                                break;\n\n                            case WORTISE:\n                                if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdWortise.showAdIfAvailable(currentActivity, Constant.WORTISE_APP_OPEN_AD_ID);\n                                    }\n                                }\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    ActivityLifecycleCallbacks activityLifecycleCallbacks = new ActivityLifecycleCallbacks() {\n        @Override", "                                if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                                    if (!currentActivity.getIntent().hasExtra(\"unique_id\")) {\n                                        appOpenAdWortise.showAdIfAvailable(currentActivity, Constant.WORTISE_APP_OPEN_AD_ID);\n                                    }\n                                }\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    ActivityLifecycleCallbacks activityLifecycleCallbacks = new ActivityLifecycleCallbacks() {\n        @Override", "        public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState) {\n        }\n\n        @Override\n        public void onActivityStarted(@NonNull Activity activity) {\n            if (Constant.OPEN_ADS_ON_START) {\n                if (Constant.AD_STATUS.equals(AD_STATUS_ON)) {\n                    switch (Constant.AD_NETWORK) {\n                        case ADMOB:\n                            if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                                if (!appOpenAdMob.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case GOOGLE_AD_MANAGER:", "                            if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                                if (!appOpenAdMob.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case GOOGLE_AD_MANAGER:\n                            if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID.equals(\"0\")) {\n                                if (!appOpenAdManager.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case APPLOVIN:\n                        case APPLOVIN_MAX:", "                                if (!appOpenAdManager.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case APPLOVIN:\n                        case APPLOVIN_MAX:\n                            if (!Constant.APPLOVIN_APP_OPEN_AP_ID.equals(\"0\")) {\n                                if (!appOpenAdAppLovin.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case WORTISE:", "                                if (!appOpenAdAppLovin.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                        case WORTISE:\n                            if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                                if (!appOpenAdWortise.isShowingAd) {\n                                    currentActivity = activity;\n                                }\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n\n        @Override", "        public void onActivityResumed(@NonNull Activity activity) {\n        }\n\n        @Override\n        public void onActivityPaused(@NonNull Activity activity) {\n        }\n\n        @Override\n        public void onActivityStopped(@NonNull Activity activity) {\n        }\n\n        @Override", "        public void onActivityStopped(@NonNull Activity activity) {\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState) {\n        }\n\n        @Override\n        public void onActivityDestroyed(@NonNull Activity activity) {\n        }\n    };\n", "        public void onActivityDestroyed(@NonNull Activity activity) {\n        }\n    };\n\n    public void showAdIfAvailable(@NonNull Activity activity, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (Constant.OPEN_ADS_ON_START) {\n            if (Constant.AD_STATUS.equals(AD_STATUS_ON)) {\n                switch (Constant.AD_NETWORK) {\n                    case ADMOB:\n                        if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                            appOpenAdMob.showAdIfAvailable(activity, Constant.ADMOB_APP_OPEN_AD_ID, onShowAdCompleteListener);\n                            Constant.isAppOpen = true;\n                        }\n                        break;\n                    case GOOGLE_AD_MANAGER:", "                        if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                            appOpenAdMob.showAdIfAvailable(activity, Constant.ADMOB_APP_OPEN_AD_ID, onShowAdCompleteListener);\n                            Constant.isAppOpen = true;\n                        }\n                        break;\n                    case GOOGLE_AD_MANAGER:\n                        if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID.equals(\"0\")) {\n                            appOpenAdManager.showAdIfAvailable(activity, Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID, onShowAdCompleteListener);\n                            Constant.isAppOpen = true;\n                        }\n                        break;\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:", "                        if (!Constant.APPLOVIN_APP_OPEN_AP_ID.equals(\"0\")) {\n                            appOpenAdAppLovin.showAdIfAvailable(activity, Constant.APPLOVIN_APP_OPEN_AP_ID, onShowAdCompleteListener);\n                            Constant.isAppOpen = true;\n                        }\n                        break;\n                    case WORTISE:\n                        if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                            appOpenAdWortise.showAdIfAvailable(activity, Constant.WORTISE_APP_OPEN_AD_ID, onShowAdCompleteListener);\n                            Constant.isAppOpen = true;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/activity/MainActivity.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.activity;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;", "import static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\nimport static com.solodroid.ads.sdkdemo.data.Constant.STYLE_DEFAULT;\nimport static com.solodroid.ads.sdkdemo.data.Constant.STYLE_NEWS;\nimport static com.solodroid.ads.sdkdemo.data.Constant.STYLE_RADIO;\nimport static com.solodroid.ads.sdkdemo.data.Constant.STYLE_VIDEO_LARGE;\nimport static com.solodroid.ads.sdkdemo.data.Constant.STYLE_VIDEO_SMALL;\n\nimport android.content.Intent;", "\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;", "import android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.lifecycle.DefaultLifecycleObserver;\nimport androidx.lifecycle.LifecycleObserver;", "import androidx.lifecycle.DefaultLifecycleObserver;\nimport androidx.lifecycle.LifecycleObserver;\nimport androidx.lifecycle.LifecycleOwner;\nimport androidx.lifecycle.ProcessLifecycleOwner;\n\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\nimport com.google.android.material.switchmaterial.SwitchMaterial;\nimport com.solodroid.ads.sdk.format.AdNetwork;\nimport com.solodroid.ads.sdk.format.AppOpenAd;\nimport com.solodroid.ads.sdk.format.BannerAd;", "import com.solodroid.ads.sdk.format.AppOpenAd;\nimport com.solodroid.ads.sdk.format.BannerAd;\nimport com.solodroid.ads.sdk.format.InterstitialAd;\nimport com.solodroid.ads.sdk.format.MediumRectangleAd;\nimport com.solodroid.ads.sdk.format.NativeAd;\nimport com.solodroid.ads.sdk.format.NativeAdView;\nimport com.solodroid.ads.sdk.format.RewardedAd;\nimport com.solodroid.ads.sdk.format.RewardedVideoAd;\nimport com.solodroid.ads.sdk.util.OnRewardedAdCompleteListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdDismissedListener;", "import com.solodroid.ads.sdk.util.OnRewardedAdCompleteListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdDismissedListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdErrorListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdLoadedListener;\nimport com.solodroid.ads.sdkdemo.BuildConfig;\nimport com.solodroid.ads.sdkdemo.R;\nimport com.solodroid.ads.sdkdemo.data.Constant;\nimport com.solodroid.ads.sdkdemo.database.SharedPref;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = \"MainActivity\";\n    Toolbar toolbar;\n    AdNetwork.Initialize adNetwork;\n    BannerAd.Builder bannerAd;\n    MediumRectangleAd.Builder mediumRectangleAd;\n    InterstitialAd.Builder interstitialAd;\n    RewardedAd.Builder rewardedAd;\n    NativeAd.Builder nativeAd;\n    NativeAdView.Builder nativeAdView;\n    SwitchMaterial switchMaterial;\n    SharedPref sharedPref;\n    Button btnInterstitial;\n    Button btnRewarded;\n    Button btnSelectAds;\n    Button btnNativeAdStyle;\n    LinearLayout nativeAdViewContainer;\n    LinearLayout bannerAdView;\n    AppOpenAd.Builder appOpenAdBuilder;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        sharedPref = new SharedPref(this);\n        getAppTheme();\n        setContentView(R.layout.activity_main);\n", "\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = \"MainActivity\";\n    Toolbar toolbar;\n    AdNetwork.Initialize adNetwork;\n    BannerAd.Builder bannerAd;\n    MediumRectangleAd.Builder mediumRectangleAd;\n    InterstitialAd.Builder interstitialAd;\n    RewardedAd.Builder rewardedAd;\n    NativeAd.Builder nativeAd;\n    NativeAdView.Builder nativeAdView;\n    SwitchMaterial switchMaterial;\n    SharedPref sharedPref;\n    Button btnInterstitial;\n    Button btnRewarded;\n    Button btnSelectAds;\n    Button btnNativeAdStyle;\n    LinearLayout nativeAdViewContainer;\n    LinearLayout bannerAdView;\n    AppOpenAd.Builder appOpenAdBuilder;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        sharedPref = new SharedPref(this);\n        getAppTheme();\n        setContentView(R.layout.activity_main);\n", "        if (Constant.FORCE_TO_SHOW_APP_OPEN_AD_ON_START) {\n            ProcessLifecycleOwner.get().getLifecycle().addObserver(lifecycleObserver);\n        }\n\n        toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        bannerAdView = findViewById(R.id.banner_ad_view);\n        bannerAdView.addView(View.inflate(this, R.layout.view_banner_ad, null));\n\n        initAds();\n        loadOpenAds();\n        loadBannerAd();\n        loadInterstitialAd();\n        loadRewardedAd();\n\n        nativeAdViewContainer = findViewById(R.id.native_ad);\n        setNativeAdStyle(nativeAdViewContainer);\n        loadNativeAd();\n\n        btnInterstitial = findViewById(R.id.btn_interstitial);\n        btnInterstitial.setOnClickListener(v -> {\n            startActivity(new Intent(getApplicationContext(), SecondActivity.class));\n            showInterstitialAd();\n            destroyBannerAd();\n        });\n\n        btnRewarded = findViewById(R.id.btn_rewarded);\n        btnRewarded.setOnClickListener(view -> showRewardedAd());\n\n        btnSelectAds = findViewById(R.id.btn_select_ads);\n        btnSelectAds.setOnClickListener(v -> showAdChooser());\n\n        btnNativeAdStyle = findViewById(R.id.btn_native_ad_style);\n        btnNativeAdStyle.setOnClickListener(v -> changeNativeAdStyle());\n\n        switchAppTheme();\n\n    }\n\n    private void initAds() {\n        adNetwork = new AdNetwork.Initialize(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobAppId(null)\n                .setStartappAppId(Constant.STARTAPP_APP_ID)\n                .setUnityGameId(Constant.UNITY_GAME_ID)\n                .setAppLovinSdkKey(getResources().getString(R.string.applovin_sdk_key))\n                .setIronSourceAppKey(Constant.IRONSOURCE_APP_KEY)\n                .setWortiseAppId(Constant.WORTISE_APP_ID)\n                .setDebug(BuildConfig.DEBUG)\n                .build();\n    }\n\n    private void loadOpenAds() {", "        if (Constant.OPEN_ADS_ON_RESUME) {\n            appOpenAdBuilder = new AppOpenAd.Builder(this)\n                    .setAdStatus(Constant.AD_STATUS)\n                    .setAdNetwork(Constant.AD_NETWORK)\n                    .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                    .setAdMobAppOpenId(Constant.ADMOB_APP_OPEN_AD_ID)\n                    .setAdManagerAppOpenId(Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID)\n                    .setApplovinAppOpenId(Constant.APPLOVIN_APP_OPEN_AP_ID)\n                    .setWortiseAppOpenId(Constant.WORTISE_APP_OPEN_AD_ID)\n                    .build();\n        }\n    }\n\n    LifecycleObserver lifecycleObserver = new DefaultLifecycleObserver() {\n        @Override", "        public void onStart(@NonNull LifecycleOwner owner) {\n            DefaultLifecycleObserver.super.onStart(owner);\n            new Handler(Looper.getMainLooper()).postDelayed(() -> {\n                if (Constant.OPEN_ADS_ON_RESUME) {\n                    if (AppOpenAd.isAppOpenAdLoaded) {\n                        appOpenAdBuilder.show();\n                    }\n                }\n            }, 100);\n        }\n    };\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobBannerId(Constant.ADMOB_BANNER_ID)\n                .setGoogleAdManagerBannerId(Constant.GOOGLE_AD_MANAGER_BANNER_ID)\n                .setFanBannerId(Constant.FAN_BANNER_ID)\n                .setUnityBannerId(Constant.UNITY_BANNER_ID)\n                .setAppLovinBannerId(Constant.APPLOVIN_BANNER_ID)\n                .setAppLovinBannerZoneId(Constant.APPLOVIN_BANNER_ZONE_ID)\n                .setIronSourceBannerId(Constant.IRONSOURCE_BANNER_ID)\n                .setWortiseBannerId(Constant.WORTISE_BANNER_ID)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .build();\n    }\n\n    private void loadMediumRectangleAd() {\n        mediumRectangleAd = new MediumRectangleAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobBannerId(Constant.ADMOB_BANNER_ID)\n                .setGoogleAdManagerBannerId(Constant.GOOGLE_AD_MANAGER_BANNER_ID)\n                .setFanBannerId(Constant.FAN_BANNER_ID)\n                .setUnityBannerId(Constant.UNITY_BANNER_ID)\n                .setAppLovinBannerId(Constant.APPLOVIN_BANNER_ID)\n                .setAppLovinBannerZoneId(Constant.APPLOVIN_BANNER_ZONE_ID)\n                .setIronSourceBannerId(Constant.IRONSOURCE_BANNER_ID)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .build();\n    }\n\n    private void loadInterstitialAd() {\n        interstitialAd = new InterstitialAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobInterstitialId(Constant.ADMOB_INTERSTITIAL_ID)\n                .setGoogleAdManagerInterstitialId(Constant.GOOGLE_AD_MANAGER_INTERSTITIAL_ID)\n                .setFanInterstitialId(Constant.FAN_INTERSTITIAL_ID)\n                .setUnityInterstitialId(Constant.UNITY_INTERSTITIAL_ID)\n                .setAppLovinInterstitialId(Constant.APPLOVIN_INTERSTITIAL_ID)\n                .setAppLovinInterstitialZoneId(Constant.APPLOVIN_INTERSTITIAL_ZONE_ID)\n                .setIronSourceInterstitialId(Constant.IRONSOURCE_INTERSTITIAL_ID)\n                .setWortiseInterstitialId(Constant.WORTISE_INTERSTITIAL_ID)\n                .setInterval(Constant.INTERSTITIAL_AD_INTERVAL)\n                .build(() -> {\n                    Log.d(TAG, \"onAdDismissed\");\n                });\n    }\n\n    private void loadRewardedAd() {\n        rewardedAd = new RewardedAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setMainAds(Constant.AD_NETWORK)\n                .setBackupAds(Constant.BACKUP_AD_NETWORK)\n                .setAdMobRewardedId(Constant.ADMOB_REWARDED_ID)\n                .setAdManagerRewardedId(Constant.GOOGLE_AD_MANAGER_REWARDED_ID)\n                .setFanRewardedId(Constant.FAN_REWARDED_ID)\n                .setUnityRewardedId(Constant.UNITY_REWARDED_ID)\n                .setApplovinMaxRewardedId(Constant.APPLOVIN_MAX_REWARDED_ID)\n                .setApplovinDiscRewardedZoneId(Constant.APPLOVIN_DISC_REWARDED_ZONE_ID)\n                .setIronSourceRewardedId(Constant.IRONSOURCE_REWARDED_ID)\n                .setWortiseRewardedId(Constant.WORTISE_REWARDED_ID)\n                .build(new OnRewardedAdCompleteListener() {\n                    @Override", "                    public void onRewardedAdComplete() {\n                        Toast.makeText(getApplicationContext(), \"Rewarded complete\", Toast.LENGTH_SHORT).show();\n                    }\n                }, new OnRewardedAdDismissedListener() {\n                    @Override\n                    public void onRewardedAdDismissed() {\n\n                    }\n                });\n    }\n\n    private void showRewardedAd() {\n        rewardedAd.show(new OnRewardedAdCompleteListener() {\n            @Override", "            public void onRewardedAdComplete() {\n                Toast.makeText(getApplicationContext(), \"Rewarded complete\", Toast.LENGTH_SHORT).show();\n            }\n        }, new OnRewardedAdDismissedListener() {\n            @Override\n            public void onRewardedAdDismissed() {\n\n            }\n        }, new OnRewardedAdErrorListener() {\n            @Override\n            public void onRewardedAdError() {\n                Toast.makeText(getApplicationContext(), \"Rewarded error\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    private void showInterstitialAd() {\n        interstitialAd.show(() -> {\n            Log.d(TAG, \"onAdShowed\");\n        }, () -> {\n            Log.d(TAG, \"onAdDismissed\");\n        });\n\n    }\n\n    private void loadNativeAd() {\n        nativeAd = new NativeAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobNativeId(Constant.ADMOB_NATIVE_ID)\n                .setAdManagerNativeId(Constant.GOOGLE_AD_MANAGER_NATIVE_ID)\n                .setFanNativeId(Constant.FAN_NATIVE_ID)\n                .setAppLovinNativeId(Constant.APPLOVIN_NATIVE_MANUAL_ID)\n                .setAppLovinDiscoveryMrecZoneId(Constant.APPLOVIN_BANNER_MREC_ZONE_ID)\n                .setWortiseNativeId(Constant.WORTISE_NATIVE_ID)\n                .setNativeAdStyle(Constant.NATIVE_STYLE)\n                .setNativeAdBackgroundColor(R.color.colorNativeBackgroundLight, R.color.colorNativeBackgroundDark)\n                .setPadding(0, 0, 0, 0)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .build();\n    }\n\n    private void loadNativeAdView(View view) {\n        nativeAdView = new NativeAdView.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobNativeId(Constant.ADMOB_NATIVE_ID)\n                .setAdManagerNativeId(Constant.GOOGLE_AD_MANAGER_NATIVE_ID)\n                .setFanNativeId(Constant.FAN_NATIVE_ID)\n                .setAppLovinNativeId(Constant.APPLOVIN_NATIVE_MANUAL_ID)\n                .setAppLovinDiscoveryMrecZoneId(Constant.APPLOVIN_BANNER_MREC_ZONE_ID)\n                .setWortiseNativeId(Constant.WORTISE_NATIVE_ID)\n                .setNativeAdStyle(Constant.NATIVE_STYLE)\n                .setNativeAdBackgroundColor(R.color.colorNativeBackgroundLight, R.color.colorNativeBackgroundDark)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .setView(view)\n                .build();\n\n        nativeAdView.setPadding(0, 0, 0, 0);\n    }\n\n    @Override", "            public void onRewardedAdError() {\n                Toast.makeText(getApplicationContext(), \"Rewarded error\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    private void showInterstitialAd() {\n        interstitialAd.show(() -> {\n            Log.d(TAG, \"onAdShowed\");\n        }, () -> {\n            Log.d(TAG, \"onAdDismissed\");\n        });\n\n    }\n\n    private void loadNativeAd() {\n        nativeAd = new NativeAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobNativeId(Constant.ADMOB_NATIVE_ID)\n                .setAdManagerNativeId(Constant.GOOGLE_AD_MANAGER_NATIVE_ID)\n                .setFanNativeId(Constant.FAN_NATIVE_ID)\n                .setAppLovinNativeId(Constant.APPLOVIN_NATIVE_MANUAL_ID)\n                .setAppLovinDiscoveryMrecZoneId(Constant.APPLOVIN_BANNER_MREC_ZONE_ID)\n                .setWortiseNativeId(Constant.WORTISE_NATIVE_ID)\n                .setNativeAdStyle(Constant.NATIVE_STYLE)\n                .setNativeAdBackgroundColor(R.color.colorNativeBackgroundLight, R.color.colorNativeBackgroundDark)\n                .setPadding(0, 0, 0, 0)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .build();\n    }\n\n    private void loadNativeAdView(View view) {\n        nativeAdView = new NativeAdView.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobNativeId(Constant.ADMOB_NATIVE_ID)\n                .setAdManagerNativeId(Constant.GOOGLE_AD_MANAGER_NATIVE_ID)\n                .setFanNativeId(Constant.FAN_NATIVE_ID)\n                .setAppLovinNativeId(Constant.APPLOVIN_NATIVE_MANUAL_ID)\n                .setAppLovinDiscoveryMrecZoneId(Constant.APPLOVIN_BANNER_MREC_ZONE_ID)\n                .setWortiseNativeId(Constant.WORTISE_NATIVE_ID)\n                .setNativeAdStyle(Constant.NATIVE_STYLE)\n                .setNativeAdBackgroundColor(R.color.colorNativeBackgroundLight, R.color.colorNativeBackgroundDark)\n                .setDarkTheme(sharedPref.getIsDarkTheme())\n                .setView(view)\n                .build();\n\n        nativeAdView.setPadding(0, 0, 0, 0);\n    }\n\n    @Override", "    public void onBackPressed() {\n        showExitDialog();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        destroyBannerAd();\n        destroyAppOpenAd();\n        Constant.isAppOpen = false;\n    }\n\n    @Override", "    public void onResume() {\n        super.onResume();\n        bannerAd.loadBannerAd();\n    }\n\n    public void getAppTheme() {\n        if (sharedPref.getIsDarkTheme()) {\n            setTheme(R.style.AppDarkTheme);\n        } else {\n            setTheme(R.style.AppTheme);\n        }\n    }\n\n    private void switchAppTheme() {\n        switchMaterial = findViewById(R.id.switch_theme);\n        switchMaterial.setChecked(sharedPref.getIsDarkTheme());\n        switchMaterial.setOnCheckedChangeListener((buttonView, isChecked) -> {\n            sharedPref.setIsDarkTheme(isChecked);\n            recreate();\n        });\n    }\n\n    private void showAdChooser() {\n        final String[] ads = {\"AdMob\", \"Google Ad Manager\", \"Start.io\", \"AppLovin MAX\", \"AppLovin Discovery\", \"Unity Ads\", \"ironSource\", \"FAN (Waterfall)\", \"Wortise\"};\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(\"Select Ad\");\n        builder.setItems(ads, (dialog, which) -> {\n            String selectedItem = ads[which];\n            switch (selectedItem) {\n                case \"AdMob\":\n                    Constant.AD_NETWORK = ADMOB;\n                    break;\n                case \"Google Ad Manager\":\n                    Constant.AD_NETWORK = GOOGLE_AD_MANAGER;\n                    break;\n                case \"Start.io\":\n                    Constant.AD_NETWORK = STARTAPP;\n                    break;\n                case \"AppLovin MAX\":\n                    Constant.AD_NETWORK = APPLOVIN_MAX;\n                    break;\n                case \"AppLovin Discovery\":\n                    Constant.AD_NETWORK = APPLOVIN_DISCOVERY;\n                    break;\n                case \"Unity Ads\":\n                    Constant.AD_NETWORK = UNITY;\n                    break;\n                case \"ironSource\":\n                    Constant.AD_NETWORK = IRONSOURCE;\n                    break;\n                case \"FAN (Waterfall)\":\n                    Constant.AD_NETWORK = FAN;\n                    break;\n                case \"Wortise\":\n                    Constant.AD_NETWORK = WORTISE;\n                    break;\n                default:\n                    Constant.AD_NETWORK = ADMOB;\n                    break;\n            }\n            recreate();\n        });\n        builder.show();\n    }\n\n    private void setNativeAdStyle(LinearLayout nativeAdView) {\n        switch (Constant.NATIVE_STYLE) {\n            case \"news\":\n                nativeAdView.addView(View.inflate(this, R.layout.view_native_ad_news, null));\n                break;\n            case \"radio\":\n                nativeAdView.addView(View.inflate(this, R.layout.view_native_ad_radio, null));\n                break;\n            case \"video_small\":\n                nativeAdView.addView(View.inflate(this, R.layout.view_native_ad_video_small, null));\n                break;\n            case \"video_large\":\n                nativeAdView.addView(View.inflate(this, R.layout.view_native_ad_video_large, null));\n                break;\n            default:\n                nativeAdView.addView(View.inflate(this, R.layout.view_native_ad_medium, null));\n                break;\n        }\n    }\n\n    private void changeNativeAdStyle() {\n        final String[] styles = {\"Default\", \"News\", \"Radio\", \"Video Small\", \"Video Large\"};\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(\"Select Native Style\");\n        builder.setItems(styles, (dialog, which) -> {\n            String selectedItem = styles[which];\n            switch (selectedItem) {\n                case \"Default\":\n                    Constant.NATIVE_STYLE = STYLE_DEFAULT;\n                    break;\n                case \"News\":\n                    Constant.NATIVE_STYLE = STYLE_NEWS;\n                    break;\n                case \"Radio\":\n                    Constant.NATIVE_STYLE = STYLE_RADIO;\n                    break;\n                case \"Video Small\":\n                    Constant.NATIVE_STYLE = STYLE_VIDEO_SMALL;\n                    break;\n                case \"Video Large\":\n                    Constant.NATIVE_STYLE = STYLE_VIDEO_LARGE;\n                    break;\n                default:\n                    Constant.NATIVE_STYLE = STYLE_DEFAULT;\n                    break;\n            }\n            recreate();\n        });\n        builder.show();\n    }\n\n    private void showExitDialog() {\n        LayoutInflater inflater = LayoutInflater.from(this);\n        View view = inflater.inflate(R.layout.dialog_exit, null);\n\n        LinearLayout nativeAdViewContainer = view.findViewById(R.id.native_ad_view);\n        setNativeAdStyle(nativeAdViewContainer);\n        loadNativeAdView(view);\n\n        AlertDialog.Builder dialog = new MaterialAlertDialogBuilder(this);\n        dialog.setView(view);\n        dialog.setCancelable(false);\n        dialog.setPositiveButton(\"Exit\", (dialogInterface, i) -> {\n            super.onBackPressed();\n            destroyBannerAd();\n            destroyAppOpenAd();\n            Constant.isAppOpen = false;\n        });\n        dialog.setNegativeButton(\"Cancel\", null);\n        dialog.show();\n    }\n\n    private void destroyBannerAd() {\n        bannerAd.destroyAndDetachBanner();\n    }\n\n    private void destroyAppOpenAd() {", "        if (Constant.FORCE_TO_SHOW_APP_OPEN_AD_ON_START) {\n            appOpenAdBuilder.destroyOpenAd();\n            ProcessLifecycleOwner.get().getLifecycle().removeObserver(lifecycleObserver);\n        }\n    }\n\n}"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/activity/SecondActivity.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.activity;\n\nimport android.os.Bundle;\nimport android.view.MenuItem;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.recyclerview.widget.DividerItemDecoration;", "import androidx.appcompat.widget.Toolbar;\nimport androidx.recyclerview.widget.DividerItemDecoration;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\n\nimport com.solodroid.ads.sdk.format.BannerAd;\nimport com.solodroid.ads.sdkdemo.R;\nimport com.solodroid.ads.sdkdemo.adapter.AdapterPost;\nimport com.solodroid.ads.sdkdemo.data.Constant;\nimport com.solodroid.ads.sdkdemo.database.SharedPref;", "import com.solodroid.ads.sdkdemo.data.Constant;\nimport com.solodroid.ads.sdkdemo.database.SharedPref;\nimport com.solodroid.ads.sdkdemo.model.Post;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SecondActivity extends AppCompatActivity {\n\n    SharedPref sharedPref;\n    RecyclerView recyclerView;\n    AdapterPost adapterPost;\n    BannerAd.Builder bannerAd;\n    Toolbar toolbar;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        sharedPref = new SharedPref(this);\n        getAppTheme();\n        setContentView(R.layout.activity_second);\n        initView();\n        loadBannerAd();\n        initToolbar();\n    }\n\n    private void initView() {\n        recyclerView = findViewById(R.id.recyclerView);\n        recyclerView.setLayoutManager(new StaggeredGridLayoutManager(1, StaggeredGridLayoutManager.VERTICAL));\n        recyclerView.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL));\n        adapterPost = new AdapterPost(this, new ArrayList<>());\n        recyclerView.setAdapter(adapterPost);\n        displayData(sharedPref.getPostList());\n    }\n\n    private void initToolbar() {\n        toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        final ActionBar actionBar = getSupportActionBar();", "        if (actionBar != null) {\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n            getSupportActionBar().setHomeButtonEnabled(true);\n            getSupportActionBar().setTitle(\"Second Activity\");\n        }\n    }\n\n    private void displayData(List<Post> posts) {\n        if (posts != null && posts.size() > 0) {\n            adapterPost.setListData(posts, posts.size());\n            adapterPost.setOnItemClickListener((view, obj, position) -> {\n                Toast.makeText(getApplicationContext(), \"\" + obj.name, Toast.LENGTH_SHORT).show();\n            });\n        }\n    }\n\n    @Override", "        if (posts != null && posts.size() > 0) {\n            adapterPost.setListData(posts, posts.size());\n            adapterPost.setOnItemClickListener((view, obj, position) -> {\n                Toast.makeText(getApplicationContext(), \"\" + obj.name, Toast.LENGTH_SHORT).show();\n            });\n        }\n    }\n\n    @Override\n    public void onBackPressed() {\n        super.onBackPressed();\n        bannerAd.destroyAndDetachBanner();\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobBannerId(Constant.ADMOB_BANNER_ID)\n                .setGoogleAdManagerBannerId(Constant.GOOGLE_AD_MANAGER_BANNER_ID)\n                .setUnityBannerId(Constant.UNITY_BANNER_ID)\n                .setAppLovinBannerId(Constant.APPLOVIN_BANNER_ID)\n                .setAppLovinBannerZoneId(Constant.APPLOVIN_BANNER_ZONE_ID)\n                .setIronSourceBannerId(Constant.IRONSOURCE_BANNER_ID)\n                .setWortiseBannerId(Constant.WORTISE_BANNER_ID)\n                .setDarkTheme(false)\n                .build();\n    }\n\n    @Override", "    public void onBackPressed() {\n        super.onBackPressed();\n        bannerAd.destroyAndDetachBanner();\n    }\n\n    private void loadBannerAd() {\n        bannerAd = new BannerAd.Builder(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobBannerId(Constant.ADMOB_BANNER_ID)\n                .setGoogleAdManagerBannerId(Constant.GOOGLE_AD_MANAGER_BANNER_ID)\n                .setUnityBannerId(Constant.UNITY_BANNER_ID)\n                .setAppLovinBannerId(Constant.APPLOVIN_BANNER_ID)\n                .setAppLovinBannerZoneId(Constant.APPLOVIN_BANNER_ZONE_ID)\n                .setIronSourceBannerId(Constant.IRONSOURCE_BANNER_ID)\n                .setWortiseBannerId(Constant.WORTISE_BANNER_ID)\n                .setDarkTheme(false)\n                .build();\n    }\n\n    @Override", "    public boolean onOptionsItemSelected(MenuItem menuItem) {\n        if (menuItem.getItemId() == android.R.id.home) {\n            onBackPressed();\n            return true;\n        }\n        return super.onOptionsItemSelected(menuItem);\n    }\n\n    public void getAppTheme() {\n        if (sharedPref.getIsDarkTheme()) {\n            setTheme(R.style.AppDarkTheme);\n        } else {\n            setTheme(R.style.AppTheme);\n        }\n    }\n\n}\n", "    public void getAppTheme() {\n        if (sharedPref.getIsDarkTheme()) {\n            setTheme(R.style.AppDarkTheme);\n        } else {\n            setTheme(R.style.AppTheme);\n        }\n    }\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/activity/ActivitySplash.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.activity;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Application;", "\nimport android.app.Application;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;", "import androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.solodroid.ads.sdk.format.AdNetwork;\nimport com.solodroid.ads.sdk.format.AppOpenAd;\nimport com.solodroid.ads.sdkdemo.BuildConfig;\nimport com.solodroid.ads.sdkdemo.R;\nimport com.solodroid.ads.sdkdemo.application.MyApplication;\nimport com.solodroid.ads.sdkdemo.callback.CallbackConfig;\nimport com.solodroid.ads.sdkdemo.data.Constant;", "import com.solodroid.ads.sdkdemo.callback.CallbackConfig;\nimport com.solodroid.ads.sdkdemo.data.Constant;\nimport com.solodroid.ads.sdkdemo.database.SharedPref;\nimport com.solodroid.ads.sdkdemo.rest.RestAdapter;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport retrofit2.Call;\nimport retrofit2.Callback;", "import retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\n@SuppressWarnings(\"ConstantConditions\")\npublic class ActivitySplash extends AppCompatActivity {\n\n    private static final String TAG = \"ActivitySplash\";\n    Call<CallbackConfig> callbackConfigCall = null;\n    public static int DELAY_PROGRESS = 1500;\n    AdNetwork.Initialize adNetwork;\n    AppOpenAd.Builder appOpenAdBuilder;\n    SharedPref sharedPref;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_splash);\n        sharedPref = new SharedPref(this);\n        initAds();\n", "    public static int DELAY_PROGRESS = 1500;\n    AdNetwork.Initialize adNetwork;\n    AppOpenAd.Builder appOpenAdBuilder;\n    SharedPref sharedPref;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_splash);\n        sharedPref = new SharedPref(this);\n        initAds();\n", "        if (Constant.AD_STATUS.equals(AD_STATUS_ON) && Constant.OPEN_ADS_ON_START) {\n            if (!Constant.FORCE_TO_SHOW_APP_OPEN_AD_ON_START) {\n                new Handler(Looper.getMainLooper()).postDelayed(() -> {\n                    switch (Constant.AD_NETWORK) {\n                        case ADMOB:\n                            if (!Constant.ADMOB_APP_OPEN_AD_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        case GOOGLE_AD_MANAGER:", "                            if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        case APPLOVIN:\n                        case APPLOVIN_MAX:\n                            if (!Constant.APPLOVIN_APP_OPEN_AP_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        case WORTISE:", "                            if (!Constant.APPLOVIN_APP_OPEN_AP_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        case WORTISE:\n                            if (!Constant.WORTISE_APP_OPEN_AD_ID.equals(\"0\")) {\n                                ((MyApplication) getApplication()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        default:\n                            requestConfig();\n                            break;\n                    }\n                }, DELAY_PROGRESS);\n            } else {\n                requestConfig();\n            }\n        } else {\n            requestConfig();\n        }\n\n    }\n\n    private void requestConfig() {\n        requestAPI(\"https://raw.githubusercontent.com/solodroidev/content/uploads/json/android.json\");\n    }\n\n    private void requestAPI(@SuppressWarnings(\"SameParameterValue\") String url) {", "        if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n            if (url.contains(\"https://drive.google.com\")) {\n                String driveUrl = url.replace(\"https://\", \"\").replace(\"http://\", \"\");\n                List<String> data = Arrays.asList(driveUrl.split(\"/\"));\n                String googleDriveFileId = data.get(3);\n                callbackConfigCall = RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);\n            } else {\n                callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);\n            }\n        } else {\n            callbackConfigCall = RestAdapter.createApi().getDriveJsonFileId(url);\n        }\n        callbackConfigCall.enqueue(new Callback<CallbackConfig>() {", "            public void onResponse(@NonNull Call<CallbackConfig> call, @NonNull Response<CallbackConfig> response) {\n                CallbackConfig resp = response.body();\n                if (resp != null) {\n                    sharedPref.savePostList(resp.android);\n                    loadOpenAds();\n                    Log.d(TAG, \"responses success\");\n                } else {\n                    loadOpenAds();\n                    Log.d(TAG, \"responses null\");\n                }\n            }\n", "            public void onFailure(@NonNull Call<CallbackConfig> call, @NonNull Throwable th) {\n                Log.d(TAG, \"responses failed: \" + th.getMessage());\n                loadOpenAds();\n            }\n        });\n    }\n\n    private void initAds() {\n        adNetwork = new AdNetwork.Initialize(this)\n                .setAdStatus(Constant.AD_STATUS)\n                .setAdNetwork(Constant.AD_NETWORK)\n                .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                .setAdMobAppId(null)\n                .setStartappAppId(Constant.STARTAPP_APP_ID)\n                .setUnityGameId(Constant.UNITY_GAME_ID)\n                .setAppLovinSdkKey(getResources().getString(R.string.applovin_sdk_key))\n                .setIronSourceAppKey(Constant.IRONSOURCE_APP_KEY)\n                .setWortiseAppId(Constant.WORTISE_APP_ID)\n                .setDebug(BuildConfig.DEBUG)\n                .build();\n    }\n\n    private void loadOpenAds() {", "        if (Constant.FORCE_TO_SHOW_APP_OPEN_AD_ON_START && Constant.OPEN_ADS_ON_START) {\n            appOpenAdBuilder = new AppOpenAd.Builder(this)\n                    .setAdStatus(Constant.AD_STATUS)\n                    .setAdNetwork(Constant.AD_NETWORK)\n                    .setBackupAdNetwork(Constant.BACKUP_AD_NETWORK)\n                    .setAdMobAppOpenId(Constant.ADMOB_APP_OPEN_AD_ID)\n                    .setAdManagerAppOpenId(Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID)\n                    .setApplovinAppOpenId(Constant.APPLOVIN_APP_OPEN_AP_ID)\n                    .setWortiseAppOpenId(Constant.WORTISE_APP_OPEN_AD_ID)\n                    .build(this::startMainActivity);\n        } else {\n            startMainActivity();\n        }\n    }\n", "    public void startMainActivity() {\n        new Handler().postDelayed(() -> {\n            Intent intent = new Intent(this, MainActivity.class);\n            startActivity(intent);\n            finish();\n        }, DELAY_PROGRESS);\n    }\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/data/Constant.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.data;\n\npublic class Constant {\n\n    public static final String AD_STATUS = \"1\";\n\n    public static String AD_NETWORK = \"admob\";\n    public static final String BACKUP_AD_NETWORK = \"none\";\n\n    public static final String ADMOB_BANNER_ID = \"ca-app-pub-3940256099942544/6300978111\";\n    public static final String ADMOB_INTERSTITIAL_ID = \"ca-app-pub-3940256099942544/1033173712\";", "    public static final String ADMOB_BANNER_ID = \"ca-app-pub-3940256099942544/6300978111\";\n    public static final String ADMOB_INTERSTITIAL_ID = \"ca-app-pub-3940256099942544/1033173712\";\n    public static final String ADMOB_REWARDED_ID = \"ca-app-pub-3940256099942544/5224354917\";\n    public static final String ADMOB_NATIVE_ID = \"ca-app-pub-3940256099942544/2247696110\";\n    public static final String ADMOB_APP_OPEN_AD_ID = \"ca-app-pub-3940256099942544/3419835294\";\n\n    public static final String GOOGLE_AD_MANAGER_BANNER_ID = \"/6499/example/banner\";\n    public static final String GOOGLE_AD_MANAGER_INTERSTITIAL_ID = \"/6499/example/interstitial\";\n    public static final String GOOGLE_AD_MANAGER_REWARDED_ID = \"/6499/example/rewarded\";\n    public static final String GOOGLE_AD_MANAGER_NATIVE_ID = \"/6499/example/native\";\n    public static final String GOOGLE_AD_MANAGER_APP_OPEN_AD_ID = \"/6499/example/app-open\";\n", "    public static final String GOOGLE_AD_MANAGER_REWARDED_ID = \"/6499/example/rewarded\";\n    public static final String GOOGLE_AD_MANAGER_NATIVE_ID = \"/6499/example/native\";\n    public static final String GOOGLE_AD_MANAGER_APP_OPEN_AD_ID = \"/6499/example/app-open\";\n\n    public static final String FAN_BANNER_ID = \"YOUR_PLACEMENT_ID\";\n    public static final String FAN_INTERSTITIAL_ID = \"YOUR_PLACEMENT_ID\";\n    public static final String FAN_REWARDED_ID = \"YOUR_PLACEMENT_ID\";\n    public static final String FAN_NATIVE_ID = \"YOUR_PLACEMENT_ID\";\n\n    public static final String STARTAPP_APP_ID = \"0\";\n", "    public static final String STARTAPP_APP_ID = \"0\";\n\n    public static final String UNITY_GAME_ID = \"4089993\";\n    public static final String UNITY_BANNER_ID = \"banner\";\n    public static final String UNITY_INTERSTITIAL_ID = \"video\";\n    public static final String UNITY_REWARDED_ID = \"rewardedVideo\";\n\n    public static final String APPLOVIN_BANNER_ID = \"da17eff31ae69f15\";\n    public static final String APPLOVIN_INTERSTITIAL_ID = \"98f6a586ed642919\";\n    public static final String APPLOVIN_MAX_REWARDED_ID = \"98f6a586ed642919\";\n    public static final String APPLOVIN_NATIVE_MANUAL_ID = \"87343269587e8998\";", "    public static final String APPLOVIN_INTERSTITIAL_ID = \"98f6a586ed642919\";\n    public static final String APPLOVIN_MAX_REWARDED_ID = \"98f6a586ed642919\";\n    public static final String APPLOVIN_NATIVE_MANUAL_ID = \"87343269587e8998\";\n    public static final String APPLOVIN_APP_OPEN_AP_ID = \"de9f381d132b859a\";\n\n    public static final String APPLOVIN_BANNER_ZONE_ID = \"afb7122672e86340\";\n    public static final String APPLOVIN_BANNER_MREC_ZONE_ID = \"81287b697d935c32\";\n    public static final String APPLOVIN_INTERSTITIAL_ZONE_ID = \"b6eba8b976279ea5\";\n    public static final String APPLOVIN_DISC_REWARDED_ZONE_ID = \"b6eba8b976279ea5\";\n\n    public static final String IRONSOURCE_APP_KEY = \"85460dcd\";", "    public static final String APPLOVIN_DISC_REWARDED_ZONE_ID = \"b6eba8b976279ea5\";\n\n    public static final String IRONSOURCE_APP_KEY = \"85460dcd\";\n    public static final String IRONSOURCE_BANNER_ID = \"DefaultBanner\";\n    public static final String IRONSOURCE_INTERSTITIAL_ID = \"DefaultInterstitial\";\n    public static final String IRONSOURCE_REWARDED_ID = \"DefaultRewardedVideo\";\n\n    public static final String WORTISE_APP_ID = \"test-app-id\";\n    public static final String WORTISE_BANNER_ID = \"test-banner\";\n    public static final String WORTISE_INTERSTITIAL_ID = \"test-interstitial\";\n    public static final String WORTISE_REWARDED_ID = \"test-rewarded\";", "    public static final String WORTISE_BANNER_ID = \"test-banner\";\n    public static final String WORTISE_INTERSTITIAL_ID = \"test-interstitial\";\n    public static final String WORTISE_REWARDED_ID = \"test-rewarded\";\n    public static final String WORTISE_NATIVE_ID = \"test-native\";\n    public static final String WORTISE_APP_OPEN_AD_ID = \"test-app-open\";\n\n    public static String NATIVE_STYLE = \"default\";\n    public static final String STYLE_NEWS = \"news\";\n    public static final String STYLE_RADIO = \"radio\";\n    public static final String STYLE_VIDEO_SMALL = \"video_small\";\n    public static final String STYLE_VIDEO_LARGE = \"video_large\";", "    public static final String STYLE_RADIO = \"radio\";\n    public static final String STYLE_VIDEO_SMALL = \"video_small\";\n    public static final String STYLE_VIDEO_LARGE = \"video_large\";\n    public static final String STYLE_STREAM = \"stream\";\n    public static final String STYLE_DEFAULT = \"default\";\n\n    public static boolean isAppOpen = false;\n\n    public static final boolean FORCE_TO_SHOW_APP_OPEN_AD_ON_START = true;\n    public static final boolean OPEN_ADS_ON_START = true;\n    public static final boolean OPEN_ADS_ON_RESUME = true;\n", "    public static final boolean FORCE_TO_SHOW_APP_OPEN_AD_ON_START = true;\n    public static final boolean OPEN_ADS_ON_START = true;\n    public static final boolean OPEN_ADS_ON_RESUME = true;\n\n    public static final int INTERSTITIAL_AD_INTERVAL = 1;\n    public static final int NATIVE_AD_INDEX = 2;\n    public static final int NATIVE_AD_INTERVAL = 8;\n\n}"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/rest/ApiInterface.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.rest;\n\nimport com.solodroid.ads.sdkdemo.callback.CallbackConfig;\n\nimport retrofit2.Call;\nimport retrofit2.http.GET;\nimport retrofit2.http.Headers;\nimport retrofit2.http.Query;\nimport retrofit2.http.Url;\n\npublic interface ApiInterface {\n\n    String CACHE = \"Cache-Control: max-age=0\";\n    String AGENT = \"Data-Agent: Solodroid\";\n\n    @Headers({CACHE, AGENT})\n    @GET\n    Call<CallbackConfig> getJsonUrl(\n            @Url String url\n    );\n\n    @Headers({CACHE, AGENT})\n    @GET(\"uc?export=download\")\n    Call<CallbackConfig> getDriveJsonFileId(\n            @Query(\"id\") String id\n    );\n\n}", "import retrofit2.http.Url;\n\npublic interface ApiInterface {\n\n    String CACHE = \"Cache-Control: max-age=0\";\n    String AGENT = \"Data-Agent: Solodroid\";\n\n    @Headers({CACHE, AGENT})\n    @GET\n    Call<CallbackConfig> getJsonUrl(\n            @Url String url\n    );\n\n    @Headers({CACHE, AGENT})\n    @GET(\"uc?export=download\")\n    Call<CallbackConfig> getDriveJsonFileId(\n            @Query(\"id\") String id\n    );\n\n}"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/rest/RestAdapter.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.rest;\n\nimport java.util.concurrent.TimeUnit;\n\nimport okhttp3.OkHttpClient;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class RestAdapter {\n", "\npublic class RestAdapter {\n\n    public static ApiInterface createApi() {\n\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n\n        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .writeTimeout(10, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .cache(null)\n                .build();\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(\"https://drive.google.com/\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .client(okHttpClient)\n                .build();\n\n        return retrofit.create(ApiInterface.class);\n\n    }\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/model/Post.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.model;\n\nimport java.io.Serializable;\n\npublic class Post implements Serializable {\n\n    public String name;\n    public String image;\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/callback/CallbackConfig.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.callback;\n\nimport com.solodroid.ads.sdkdemo.model.Post;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CallbackConfig {\n\n    public List<Post> android = new ArrayList<>();\n\n}"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/database/SharedPref.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.database;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.solodroid.ads.sdkdemo.model.Post;\n\nimport java.lang.reflect.Type;", "\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SharedPref {\n\n    Context context;\n    SharedPreferences sharedPreferences;\n    SharedPreferences.Editor editor;\n    private String KEY_POSTS = \"posts\";\n\n    public SharedPref(Context context) {\n        this.context = context;\n        sharedPreferences = context.getSharedPreferences(\"settings\", Context.MODE_PRIVATE);\n        editor = sharedPreferences.edit();\n    }\n", "    public void savePostList(List<Post> posts) {\n        Gson gson = new Gson();\n        String json = gson.toJson(posts);\n        editor.putString(KEY_POSTS, json);\n        editor.apply();\n    }\n\n    public List<Post> getPostList() {\n        Gson gson = new Gson();\n        String json = sharedPreferences.getString(KEY_POSTS, null);\n        Type type = new TypeToken<ArrayList<Post>>() {\n        }.getType();\n        return gson.fromJson(json, type);\n    }\n", "    public Boolean getIsDarkTheme() {\n        return sharedPreferences.getBoolean(\"theme\", false);\n    }\n\n    public void setIsDarkTheme(Boolean isDarkTheme) {\n        editor.putBoolean(\"theme\", isDarkTheme);\n        editor.apply();\n    }\n\n}\n"]}
{"filename": "demo/src/main/java/com/solodroid/ads/sdkdemo/adapter/AdapterPost.java", "chunked_list": ["package com.solodroid.ads.sdkdemo.adapter;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;", "import static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;", "import android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;", "import com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\nimport com.solodroid.ads.sdk.format.NativeAdViewHolder;\nimport com.solodroid.ads.sdkdemo.R;\nimport com.solodroid.ads.sdkdemo.data.Constant;\nimport com.solodroid.ads.sdkdemo.database.SharedPref;\nimport com.solodroid.ads.sdkdemo.model.Post;\n\nimport java.util.List;\n", "import java.util.List;\n\n@SuppressLint(\"NotifyDataSetChanged\")\npublic class AdapterPost extends RecyclerView.Adapter<RecyclerView.ViewHolder> {\n\n    Context context;\n    private List<Post> posts;\n    private OnItemClickListener onItemClickListener;\n    private final int VIEW_ITEM = 1;\n    private final int VIEW_AD = 2;\n    SharedPref sharedPref;\n", "    public interface OnItemClickListener {\n        void onItemClick(View view, Post obj, int position);\n    }\n\n    public void setOnItemClickListener(final OnItemClickListener mItemClickListener) {\n        this.onItemClickListener = mItemClickListener;\n    }\n\n    public AdapterPost(Context context, List<Post> posts) {\n        this.posts = posts;\n        this.context = context;\n        this.sharedPref = new SharedPref(context);\n    }\n", "    public static class OriginalViewHolder extends RecyclerView.ViewHolder {\n\n        public TextView name;\n        public ImageView image;\n        public LinearLayout lytParent;\n\n        public OriginalViewHolder(View v) {\n            super(v);\n            name = v.findViewById(R.id.name);\n            image = v.findViewById(R.id.image);\n            lytParent = v.findViewById(R.id.lyt_parent);\n        }\n    }\n\n    @NonNull\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        RecyclerView.ViewHolder vh;", "        if (viewType == VIEW_ITEM) {\n            View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_view, parent, false);\n            vh = new OriginalViewHolder(v);\n        } else if (viewType == VIEW_AD) {\n            View v;\n            switch (Constant.NATIVE_STYLE) {\n                case \"news\":\n                    v = LayoutInflater.from(parent.getContext()).inflate(com.solodroid.ads.sdk.R.layout.view_native_ad_news, parent, false);\n                    break;\n                case \"radio\":\n                    v = LayoutInflater.from(parent.getContext()).inflate(com.solodroid.ads.sdk.R.layout.view_native_ad_radio, parent, false);\n                    break;\n                case \"video_small\":\n                    v = LayoutInflater.from(parent.getContext()).inflate(com.solodroid.ads.sdk.R.layout.view_native_ad_video_small, parent, false);\n                    break;\n                case \"video_large\":\n                    v = LayoutInflater.from(parent.getContext()).inflate(com.solodroid.ads.sdk.R.layout.view_native_ad_video_large, parent, false);\n                    break;\n                default:\n                    v = LayoutInflater.from(parent.getContext()).inflate(com.solodroid.ads.sdk.R.layout.view_native_ad_medium, parent, false);\n                    break;\n            }\n            vh = new NativeAdViewHolder(v);\n        } else {\n            View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_view, parent, false);\n            vh = new OriginalViewHolder(v);\n        }\n        return vh;\n    }\n\n    @Override", "    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, final int position) {\n        if (holder instanceof OriginalViewHolder) {\n            final Post p = posts.get(position);\n            OriginalViewHolder vItem = (OriginalViewHolder) holder;\n\n            vItem.name.setText(p.name);\n\n            Glide.with(context)\n                    .load(p.image.replace(\" \", \"%20\"))\n                    .thumbnail(0.1f)\n                    .diskCacheStrategy(DiskCacheStrategy.ALL)\n                    .centerCrop()\n                    .into(vItem.image);\n\n            vItem.lytParent.setOnClickListener(view -> {", "                if (onItemClickListener != null) {\n                    onItemClickListener.onItemClick(view, p, position);\n                }\n            });\n\n        } else if (holder instanceof NativeAdViewHolder) {\n\n            final NativeAdViewHolder vItem = (NativeAdViewHolder) holder;\n\n            vItem.loadNativeAd(context,\n                    Constant.AD_STATUS,\n                    1,\n                    Constant.AD_NETWORK,\n                    Constant.BACKUP_AD_NETWORK,\n                    Constant.ADMOB_NATIVE_ID,\n                    Constant.GOOGLE_AD_MANAGER_NATIVE_ID,\n                    Constant.FAN_NATIVE_ID,\n                    Constant.APPLOVIN_NATIVE_MANUAL_ID,\n                    Constant.APPLOVIN_BANNER_MREC_ZONE_ID,\n                    Constant.WORTISE_NATIVE_ID,\n                    sharedPref.getIsDarkTheme(),\n                    false,\n                    Constant.NATIVE_STYLE,\n                    R.color.colorNativeBackgroundLight,\n                    R.color.colorNativeBackgroundDark\n            );\n\n        }\n    }\n\n    @Override", "    public int getItemViewType(int position) {\n        Post post = posts.get(position);\n        if (post != null) {\n            if (post.name == null || post.name.equals(\"\")) {\n                return VIEW_AD;\n            } else {\n                return VIEW_ITEM;\n            }\n        } else {\n            return VIEW_ITEM;\n        }\n    }\n", "    public void setListData(List<Post> posts, int totalPosts) {\n        this.posts = posts;\n        insertNativeAd(posts, totalPosts);\n        notifyDataSetChanged();\n    }\n\n    private void insertNativeAd(List<Post> posts, int totalPosts) {\n        switch (Constant.AD_NETWORK) {\n            case ADMOB:\n            case GOOGLE_AD_MANAGER:\n            case FAN:\n            case FACEBOOK:\n            case APPLOVIN:\n            case APPLOVIN_MAX:\n            case APPLOVIN_DISCOVERY:\n            case STARTAPP:\n            case WORTISE:\n                int maxNumberNativeAd;", "                if (totalPosts >= Constant.NATIVE_AD_INTERVAL) {\n                    maxNumberNativeAd = (totalPosts / Constant.NATIVE_AD_INTERVAL);\n                } else {\n                    maxNumberNativeAd = 1;\n                }\n                int limitNativeAd = (maxNumberNativeAd * Constant.NATIVE_AD_INTERVAL) + Constant.NATIVE_AD_INDEX;\n                if (posts.size() >= Constant.NATIVE_AD_INDEX) {\n                    for (int i = Constant.NATIVE_AD_INDEX; i < limitNativeAd; i += Constant.NATIVE_AD_INTERVAL) {\n                        posts.add(i, new Post());\n                    }\n                }\n                break;\n            default:\n                //none\n                break;\n        }\n    }\n", "    public void resetListData() {\n        this.posts.clear();\n        notifyDataSetChanged();\n    }\n\n    @Override\n    public int getItemCount() {\n        return posts.size();\n    }\n\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/MediumRectangleAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.MOPUB;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;", "import static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY_ADS_BANNER_HEIGHT_MEDIUM;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY_ADS_BANNER_WIDTH_MEDIUM;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;", "import android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.FrameLayout;\nimport android.widget.RelativeLayout;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;", "import com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdViewAdListener;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.ads.MaxAdView;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinSdkUtils;\nimport com.facebook.ads.Ad;", "import com.applovin.sdk.AppLovinSdkUtils;\nimport com.facebook.ads.Ad;\nimport com.facebook.ads.AdSize;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.AdView;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerAdView;\nimport com.ironsource.mediationsdk.ISBannerSize;\nimport com.ironsource.mediationsdk.IronSource;", "import com.ironsource.mediationsdk.ISBannerSize;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.IronSourceBannerLayout;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;\nimport com.ironsource.mediationsdk.logger.IronSourceError;\nimport com.ironsource.mediationsdk.sdk.LevelPlayBannerListener;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.banner.Banner;", "import com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.banner.Banner;\nimport com.startapp.sdk.ads.banner.BannerListener;\nimport com.unity3d.services.banners.BannerErrorInfo;\nimport com.unity3d.services.banners.BannerView;\nimport com.unity3d.services.banners.UnityBannerSize;\n\npublic class MediumRectangleAd {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        private AdView adView;\n        private AdManagerAdView adManagerAdView;\n        private com.facebook.ads.AdView fanAdView;\n        private AppLovinAdView appLovinAdView;\n        FrameLayout ironSourceBannerView;\n        private IronSourceBannerLayout ironSourceBannerLayout;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobBannerId = \"\";\n        private String googleAdManagerBannerId = \"\";\n        private String fanBannerId = \"\";\n        private String unityBannerId = \"\";\n        private String appLovinBannerId = \"\";\n        private String appLovinBannerZoneId = \"\";\n        private String mopubBannerId = \"\";\n        private String ironSourceBannerId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        private AdView adView;\n        private AdManagerAdView adManagerAdView;\n        private com.facebook.ads.AdView fanAdView;\n        private AppLovinAdView appLovinAdView;\n        FrameLayout ironSourceBannerView;\n        private IronSourceBannerLayout ironSourceBannerLayout;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobBannerId = \"\";\n        private String googleAdManagerBannerId = \"\";\n        private String fanBannerId = \"\";\n        private String unityBannerId = \"\";\n        private String appLovinBannerId = \"\";\n        private String appLovinBannerZoneId = \"\";\n        private String mopubBannerId = \"\";\n        private String ironSourceBannerId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadBannerAd();\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n", "        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobBannerId(String adMobBannerId) {\n            this.adMobBannerId = adMobBannerId;\n            return this;\n        }\n", "        public Builder setAdMobBannerId(String adMobBannerId) {\n            this.adMobBannerId = adMobBannerId;\n            return this;\n        }\n\n        public Builder setGoogleAdManagerBannerId(String googleAdManagerBannerId) {\n            this.googleAdManagerBannerId = googleAdManagerBannerId;\n            return this;\n        }\n\n        public Builder setFanBannerId(String fanBannerId) {\n            this.fanBannerId = fanBannerId;\n            return this;\n        }\n", "        public Builder setFanBannerId(String fanBannerId) {\n            this.fanBannerId = fanBannerId;\n            return this;\n        }\n\n        public Builder setUnityBannerId(String unityBannerId) {\n            this.unityBannerId = unityBannerId;\n            return this;\n        }\n\n        public Builder setAppLovinBannerId(String appLovinBannerId) {\n            this.appLovinBannerId = appLovinBannerId;\n            return this;\n        }\n", "        public Builder setAppLovinBannerId(String appLovinBannerId) {\n            this.appLovinBannerId = appLovinBannerId;\n            return this;\n        }\n\n        public Builder setAppLovinBannerZoneId(String appLovinBannerZoneId) {\n            this.appLovinBannerZoneId = appLovinBannerZoneId;\n            return this;\n        }\n\n        public Builder setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n", "        public Builder setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n\n        public Builder setIronSourceBannerId(String ironSourceBannerId) {\n            this.ironSourceBannerId = ironSourceBannerId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n", "        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public void loadBannerAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        FrameLayout adContainerView = activity.findViewById(R.id.admob_banner_view_container);\n                        adContainerView.post(() -> {\n                            adView = new AdView(activity);\n                            adView.setAdUnitId(adMobBannerId);\n                            adContainerView.removeAllViews();\n                            adContainerView.addView(adView);\n                            adView.setAdSize(Tools.getAdSizeMREC());\n                            adView.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                            adView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdLoaded() {\n                                    // Code to be executed when an ad finishes loading.\n                                    adContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                    // Code to be executed when an ad request fails.\n                                    adContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdOpened() {\n                                    // Code to be executed when an ad opens an overlay that\n                                    // covers the screen.\n                                }\n\n                                @Override\n                                public void onAdClicked() {\n                                    // Code to be executed when the user clicks on an ad.\n                                }\n\n                                @Override", "                                public void onAdClosed() {\n                                    // Code to be executed when the user is about to return\n                                    // to the app after tapping on an ad.\n                                }\n                            });\n                        });\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + adMobBannerId);\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        FrameLayout googleAdContainerView = activity.findViewById(R.id.google_ad_banner_view_container);\n                        googleAdContainerView.post(() -> {\n                            adManagerAdView = new AdManagerAdView(activity);\n                            adManagerAdView.setAdUnitId(googleAdManagerBannerId);\n                            googleAdContainerView.removeAllViews();\n                            googleAdContainerView.addView(adManagerAdView);\n                            adManagerAdView.setAdSize(Tools.getAdSizeMREC());\n                            adManagerAdView.loadAd(Tools.getGoogleAdManagerRequest());\n                            adManagerAdView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdClicked() {\n                                    super.onAdClicked();\n                                }\n\n                                @Override\n                                public void onAdClosed() {\n                                    super.onAdClosed();\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override\n                                public void onAdImpression() {\n                                    super.onAdImpression();\n                                }\n\n                                @Override", "                                public void onAdLoaded() {\n                                    super.onAdLoaded();\n                                    googleAdContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdOpened() {\n                                    super.onAdOpened();\n                                }\n                            });\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanAdView = new com.facebook.ads.AdView(activity, fanBannerId, AdSize.RECTANGLE_HEIGHT_250);\n                        RelativeLayout fanAdViewContainer = activity.findViewById(R.id.fan_banner_view_container);\n                        fanAdViewContainer.addView(fanAdView);\n                        com.facebook.ads.AdListener adListener = new com.facebook.ads.AdListener() {\n                            @Override", "                            public void onError(Ad ad, com.facebook.ads.AdError adError) {\n                                fanAdViewContainer.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                                Log.d(TAG, \"Error load FAN : \" + adError.getErrorMessage());\n                            }\n\n                            @Override\n                            public void onAdLoaded(Ad ad) {\n                                fanAdViewContainer.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdClicked(Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(Ad ad) {\n\n                            }\n                        };\n                        com.facebook.ads.AdView.AdViewLoadConfig loadAdConfig = fanAdView.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanAdView.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        RelativeLayout startAppAdView = activity.findViewById(R.id.startapp_banner_view_container);\n                        Banner banner = new Banner(activity, new BannerListener() {\n                            @Override", "                            public void onReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                                Log.d(TAG, adNetwork + \" failed load startapp banner ad : \");\n                            }\n\n                            @Override", "                            public void onImpression(View view) {\n\n                            }\n\n                            @Override\n                            public void onClick(View banner) {\n                            }\n                        });\n                        startAppAdView.addView(banner);\n                        break;\n\n                    case UNITY:\n                        RelativeLayout unityAdView = activity.findViewById(R.id.unity_banner_view_container);\n                        BannerView bottomBanner = new BannerView(activity, unityBannerId, new UnityBannerSize(UNITY_ADS_BANNER_WIDTH_MEDIUM, UNITY_ADS_BANNER_HEIGHT_MEDIUM));\n                        bottomBanner.setListener(new BannerView.IListener() {\n                            @Override", "                            public void onBannerLoaded(BannerView bannerView) {\n                                unityAdView.setVisibility(View.VISIBLE);\n                                Log.d(\"Unity_banner\", \"ready\");\n                            }\n\n                            @Override\n                            public void onBannerShown(BannerView bannerAdView) {\n\n                            }\n\n                            @Override", "                            public void onBannerClick(BannerView bannerView) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailedToLoad(BannerView bannerView, BannerErrorInfo bannerErrorInfo) {\n                                Log.d(\"SupportTest\", \"Banner Error\" + bannerErrorInfo);\n                                unityAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override", "                            public void onBannerLeftApplication(BannerView bannerView) {\n\n                            }\n                        });\n                        unityAdView.addView(bottomBanner);\n                        bottomBanner.load();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + unityBannerId);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        RelativeLayout appLovinAdView = activity.findViewById(R.id.applovin_banner_view_container);\n                        MaxAdView maxAdView = new MaxAdView(appLovinBannerId, activity);\n                        maxAdView.setListener(new MaxAdViewAdListener() {\n                            @Override", "                            public void onAdExpanded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdCollapsed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n\n                            }\n                        });\n\n                        int width = ViewGroup.LayoutParams.MATCH_PARENT;\n                        int heightPx = activity.getResources().getDimensionPixelSize(R.dimen.applovin_banner_height);\n                        maxAdView.setLayoutParams(new FrameLayout.LayoutParams(width, heightPx));", "                        if (darkTheme) {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_dark));\n                        } else {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_light));\n                        }\n                        appLovinAdView.addView(maxAdView);\n                        maxAdView.loadAd();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + appLovinBannerId);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        RelativeLayout appLovinDiscoveryAdView = activity.findViewById(R.id.applovin_discovery_banner_view_container);\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle bannerExtras = new Bundle();\n                        bannerExtras.putString(\"zone_id\", appLovinBannerZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                        boolean isTablet2 = AppLovinSdkUtils.isTablet(activity);\n                        AppLovinAdSize adSize = isTablet2 ? AppLovinAdSize.LEADER : AppLovinAdSize.BANNER;\n                        this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                        this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinDiscoveryAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                appLovinDiscoveryAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n                        });\n                        appLovinDiscoveryAdView.addView(this.appLovinAdView);\n                        this.appLovinAdView.loadNextAd();\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        ironSourceBannerView = activity.findViewById(R.id.ironsource_banner_view_container);\n                        ISBannerSize size = ISBannerSize.RECTANGLE;\n                        ironSourceBannerLayout = IronSource.createBanner(activity, size);\n                        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n                        ironSourceBannerView.addView(ironSourceBannerLayout, 0, layoutParams);", "                        if (ironSourceBannerLayout != null) {\n                            ironSourceBannerLayout.setLevelPlayBannerListener(new LevelPlayBannerListener() {\n                                @Override\n                                public void onAdLoaded(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLoaded\");\n                                    ironSourceBannerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override\n                                public void onAdClicked(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdClicked\");\n                                }\n\n                                @Override", "                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override\n                                public void onAdScreenPresented(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenPresented\");\n                                }\n\n                                @Override\n                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "        public void loadBackupBannerAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        FrameLayout adContainerView = activity.findViewById(R.id.admob_banner_view_container);\n                        adContainerView.post(() -> {\n                            adView = new AdView(activity);\n                            adView.setAdUnitId(adMobBannerId);\n                            adContainerView.removeAllViews();\n                            adContainerView.addView(adView);\n                            adView.setAdSize(Tools.getAdSizeMREC());\n                            adView.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                            adView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdLoaded() {\n                                    // Code to be executed when an ad finishes loading.\n                                    adContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                    // Code to be executed when an ad request fails.\n                                    adContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override", "                                public void onAdOpened() {\n                                    // Code to be executed when an ad opens an overlay that\n                                    // covers the screen.\n                                }\n\n                                @Override\n                                public void onAdClicked() {\n                                    // Code to be executed when the user clicks on an ad.\n                                }\n\n                                @Override", "                                public void onAdClosed() {\n                                    // Code to be executed when the user is about to return\n                                    // to the app after tapping on an ad.\n                                }\n                            });\n                        });\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + adMobBannerId);\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        FrameLayout googleAdContainerView = activity.findViewById(R.id.google_ad_banner_view_container);\n                        googleAdContainerView.post(() -> {\n                            adManagerAdView = new AdManagerAdView(activity);\n                            adManagerAdView.setAdUnitId(googleAdManagerBannerId);\n                            googleAdContainerView.removeAllViews();\n                            googleAdContainerView.addView(adManagerAdView);\n                            adManagerAdView.setAdSize(Tools.getAdSizeMREC());\n                            adManagerAdView.loadAd(Tools.getGoogleAdManagerRequest());\n                            adManagerAdView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdClicked() {\n                                    super.onAdClicked();\n                                }\n\n                                @Override\n                                public void onAdClosed() {\n                                    super.onAdClosed();\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override", "                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override\n                                public void onAdImpression() {\n                                    super.onAdImpression();\n                                }\n\n                                @Override", "                                public void onAdLoaded() {\n                                    super.onAdLoaded();\n                                    googleAdContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdOpened() {\n                                    super.onAdOpened();\n                                }\n                            });\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanAdView = new com.facebook.ads.AdView(activity, fanBannerId, AdSize.RECTANGLE_HEIGHT_250);\n                        RelativeLayout fanAdViewContainer = activity.findViewById(R.id.fan_banner_view_container);\n                        fanAdViewContainer.addView(fanAdView);\n                        com.facebook.ads.AdListener adListener = new com.facebook.ads.AdListener() {\n                            @Override", "                            public void onError(Ad ad, com.facebook.ads.AdError adError) {\n                                fanAdViewContainer.setVisibility(View.GONE);\n                                Log.d(TAG, \"Error load FAN : \" + adError.getErrorMessage());\n                            }\n\n                            @Override\n                            public void onAdLoaded(Ad ad) {\n                                fanAdViewContainer.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdClicked(Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(Ad ad) {\n\n                            }\n                        };\n                        com.facebook.ads.AdView.AdViewLoadConfig loadAdConfig = fanAdView.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanAdView.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        RelativeLayout startAppAdView = activity.findViewById(R.id.startapp_banner_view_container);\n                        Banner banner = new Banner(activity, new BannerListener() {\n                            @Override", "                            public void onReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.GONE);\n                                Log.d(TAG, adNetwork + \" failed load startapp banner ad : \");\n                            }\n\n                            @Override", "                            public void onImpression(View view) {\n\n                            }\n\n                            @Override\n                            public void onClick(View banner) {\n                            }\n                        });\n                        startAppAdView.addView(banner);\n                        break;\n\n                    case UNITY:\n                        RelativeLayout unityAdView = activity.findViewById(R.id.unity_banner_view_container);\n                        BannerView bottomBanner = new BannerView(activity, unityBannerId, new UnityBannerSize(UNITY_ADS_BANNER_WIDTH_MEDIUM, UNITY_ADS_BANNER_HEIGHT_MEDIUM));\n                        bottomBanner.setListener(new BannerView.IListener() {\n                            @Override", "                            public void onBannerLoaded(BannerView bannerView) {\n                                unityAdView.setVisibility(View.VISIBLE);\n                                Log.d(\"Unity_banner\", \"ready\");\n                            }\n\n                            @Override\n                            public void onBannerShown(BannerView bannerAdView) {\n\n                            }\n\n                            @Override", "                            public void onBannerClick(BannerView bannerView) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailedToLoad(BannerView bannerView, BannerErrorInfo bannerErrorInfo) {\n                                Log.d(\"SupportTest\", \"Banner Error\" + bannerErrorInfo);\n                                unityAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override", "                            public void onBannerLeftApplication(BannerView bannerView) {\n\n                            }\n                        });\n                        unityAdView.addView(bottomBanner);\n                        bottomBanner.load();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + unityBannerId);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        RelativeLayout appLovinAdView = activity.findViewById(R.id.applovin_banner_view_container);\n                        MaxAdView maxAdView = new MaxAdView(appLovinBannerId, activity);\n                        maxAdView.setListener(new MaxAdViewAdListener() {\n                            @Override", "                            public void onAdExpanded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdCollapsed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n\n                            }\n                        });\n\n                        int width = ViewGroup.LayoutParams.MATCH_PARENT;\n                        int heightPx = activity.getResources().getDimensionPixelSize(R.dimen.applovin_banner_height);\n                        maxAdView.setLayoutParams(new FrameLayout.LayoutParams(width, heightPx));", "                        if (darkTheme) {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_dark));\n                        } else {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_light));\n                        }\n                        appLovinAdView.addView(maxAdView);\n                        maxAdView.loadAd();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + appLovinBannerId);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        RelativeLayout appLovinDiscoveryAdView = activity.findViewById(R.id.applovin_discovery_banner_view_container);\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle bannerExtras = new Bundle();\n                        bannerExtras.putString(\"zone_id\", appLovinBannerZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                        boolean isTablet2 = AppLovinSdkUtils.isTablet(activity);\n                        AppLovinAdSize adSize = isTablet2 ? AppLovinAdSize.LEADER : AppLovinAdSize.BANNER;\n                        this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                        this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinDiscoveryAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                appLovinDiscoveryAdView.setVisibility(View.GONE);\n                            }\n                        });\n                        appLovinDiscoveryAdView.addView(this.appLovinAdView);\n                        this.appLovinAdView.loadNextAd();\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        ironSourceBannerView = activity.findViewById(R.id.ironsource_banner_view_container);\n                        ISBannerSize size = ISBannerSize.RECTANGLE;\n                        ironSourceBannerLayout = IronSource.createBanner(activity, size);\n                        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n                        ironSourceBannerView.addView(ironSourceBannerLayout, 0, layoutParams);", "                        if (ironSourceBannerLayout != null) {\n                            ironSourceBannerLayout.setLevelPlayBannerListener(new LevelPlayBannerListener() {\n                                @Override\n                                public void onAdLoaded(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLoaded\");\n                                    ironSourceBannerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                }\n\n                                @Override", "                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                }\n\n                                @Override\n                                public void onAdClicked(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdClicked\");\n                                }\n\n                                @Override\n                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override", "                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override\n                                public void onAdScreenPresented(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenPresented\");\n                                }\n\n                                @Override\n                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "        public void destroyAndDetachBanner() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                if (adNetwork.equals(IRONSOURCE) || backupAdNetwork.equals(IRONSOURCE)) {\n                    if (ironSourceBannerView != null) {\n                        Log.d(TAG, \"ironSource banner is not null, ready to destroy\");\n                        IronSource.destroyBanner(ironSourceBannerLayout);\n                        ironSourceBannerView.removeView(ironSourceBannerLayout);\n                    } else {\n                        Log.d(TAG, \"ironSource banner is null\");\n                    }\n                }\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/NativeAdViewHolder.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.annotation.SuppressLint;", "\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;", "import android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;", "import androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;\nimport com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;", "import com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.AdOptionsView;\nimport com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;", "import com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.google.android.gms.ads.nativead.NativeAdView;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;", "import com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;\nimport com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.nativead.NativeAdDetails;\nimport com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;", "import com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.Ad;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.wortise.ads.natives.GoogleNativeAd;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NativeAdViewHolder extends RecyclerView.ViewHolder {\n\n    private static final String TAG = \"AdNetwork\";\n    LinearLayout nativeAdViewContainer;\n\n    //AdMob\n    MediaView mediaView;\n    TemplateView admobNativeAd;\n    LinearLayout admobNativeBackground;\n\n    //Ad Manager\n    MediaView adManagerMediaView;\n    AdManagerTemplateView adManagerNativeAd;\n    LinearLayout adManagerNativeBackground;\n\n    //FAN\n    com.facebook.ads.NativeAd fanNativeAd;\n    NativeAdLayout fanNativeAdLayout;\n\n    //StartApp\n    View startappNativeAd;\n    ImageView startappNativeImage;\n    ImageView startappNativeIcon;\n    TextView startappNativeTitle;\n    TextView startappNativeDescription;\n    Button startappNativeButton;\n    LinearLayout startappNativeBackground;\n\n    //AppLovin\n    FrameLayout applovinNativeAd;\n    MaxNativeAdLoader nativeAdLoader;\n    MaxAd maxNativeAd;\n    LinearLayout appLovinDiscoveryMrecAd;\n    private AppLovinAdView appLovinAdView;\n\n    //Wortise\n    private GoogleNativeAd mGoogleNativeAd;\n    FrameLayout wortiseNativeAd;\n\n    public NativeAdViewHolder(View view) {\n        super(view);\n\n        nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n        //AdMob\n        admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n        mediaView = view.findViewById(R.id.media_view);\n        admobNativeBackground = view.findViewById(R.id.background);\n\n        //Ad Manager\n        adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n        adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n        adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n        //FAN\n        fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n        //StartApp\n        startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n        startappNativeImage = view.findViewById(R.id.startapp_native_image);\n        startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n        startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n        startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n        startappNativeButton = view.findViewById(R.id.startapp_native_button);\n        startappNativeButton.setOnClickListener(v1 -> itemView.performClick());\n        startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n        //AppLovin\n        applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n        appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n        wortiseNativeAd = view.findViewById(R.id.wortise_native_ad_container);\n\n    }\n", "\npublic class NativeAdViewHolder extends RecyclerView.ViewHolder {\n\n    private static final String TAG = \"AdNetwork\";\n    LinearLayout nativeAdViewContainer;\n\n    //AdMob\n    MediaView mediaView;\n    TemplateView admobNativeAd;\n    LinearLayout admobNativeBackground;\n\n    //Ad Manager\n    MediaView adManagerMediaView;\n    AdManagerTemplateView adManagerNativeAd;\n    LinearLayout adManagerNativeBackground;\n\n    //FAN\n    com.facebook.ads.NativeAd fanNativeAd;\n    NativeAdLayout fanNativeAdLayout;\n\n    //StartApp\n    View startappNativeAd;\n    ImageView startappNativeImage;\n    ImageView startappNativeIcon;\n    TextView startappNativeTitle;\n    TextView startappNativeDescription;\n    Button startappNativeButton;\n    LinearLayout startappNativeBackground;\n\n    //AppLovin\n    FrameLayout applovinNativeAd;\n    MaxNativeAdLoader nativeAdLoader;\n    MaxAd maxNativeAd;\n    LinearLayout appLovinDiscoveryMrecAd;\n    private AppLovinAdView appLovinAdView;\n\n    //Wortise\n    private GoogleNativeAd mGoogleNativeAd;\n    FrameLayout wortiseNativeAd;\n\n    public NativeAdViewHolder(View view) {\n        super(view);\n\n        nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n        //AdMob\n        admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n        mediaView = view.findViewById(R.id.media_view);\n        admobNativeBackground = view.findViewById(R.id.background);\n\n        //Ad Manager\n        adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n        adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n        adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n        //FAN\n        fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n        //StartApp\n        startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n        startappNativeImage = view.findViewById(R.id.startapp_native_image);\n        startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n        startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n        startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n        startappNativeButton = view.findViewById(R.id.startapp_native_button);\n        startappNativeButton.setOnClickListener(v1 -> itemView.performClick());\n        startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n        //AppLovin\n        applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n        appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n        wortiseNativeAd = view.findViewById(R.id.wortise_native_ad_container);\n\n    }\n", "    public void loadNativeAd(Context context, String adStatus, int placementStatus, String adNetwork, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, String appLovinDiscMrecZoneId, String wortiseNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    Log.d(TAG, \"Max Native Ad loaded successfully\");\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, context);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = context.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(context, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, wortiseNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(context, nativeAd, adView, darkTheme, nativeBackgroundDark, nativeBackgroundLight);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadBackupNativeAd(Context context, String adStatus, int placementStatus, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, String appLovinDiscMrecZoneId, String wortiseNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, context);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = context.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(context, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (NativeAdView) inflater.inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(context, nativeAd, adView, darkTheme, nativeBackgroundDark, nativeBackgroundLight);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"[Backup] Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadNativeAd(Context context, String adStatus, int placementStatus, String adNetwork, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, String appLovinDiscMrecZoneId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    Log.d(TAG, \"Max Native Ad loaded successfully\");\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, context);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, appLovinDiscMrecZoneId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = context.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadBackupNativeAd(Context context, String adStatus, int placementStatus, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, String appLovinDiscMrecZoneId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, context);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = context.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadNativeAd(Context context, String adStatus, int placementStatus, String adNetwork, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    Log.d(TAG, \"Max Native Ad loaded successfully\");\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle, nativeBackgroundLight, nativeBackgroundDark);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n                }\n            }\n        }\n    }\n", "    public void loadBackupNativeAd(Context context, String adStatus, int placementStatus, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadNativeAd(Context context, String adStatus, int placementStatus, String adNetwork, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    //startapp_native_ad.setVisibility(View.GONE);\n                                    //native_ad_view_container.setVisibility(View.GONE);\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    Log.d(TAG, \"Max Native Ad loaded successfully\");\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd(context, adStatus, placementStatus, backupAdNetwork, adMobNativeId, adManagerNativeId, fanNativeId, appLovinNativeId, darkTheme, legacyGDPR, nativeAdStyle);\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void loadBackupNativeAd(Context context, String adStatus, int placementStatus, String backupAdNetwork, String adMobNativeId, String adManagerNativeId, String fanNativeId, String appLovinNativeId, boolean darkTheme, boolean legacyGDPR, String nativeAdStyle) {\n        if (adStatus.equals(AD_STATUS_ON)) {\n            if (placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest((Activity) context, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob native ads has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(context, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_dark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(context, R.color.color_native_background_light));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(context, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(context);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView;\n\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                            break;\n                                        default:\n                                            nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                            break;\n                                    }\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(context, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(context, R.color.applovin_dark_secondary_text_color));\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(context);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull Ad arg0) {\n                                    Log.d(\"STARTAPP_ADS\", \"ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(\"STARTAPP_ADS\", ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(itemView);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(R.color.color_native_background_dark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(R.color.color_native_background_light);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"ad failed\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp native ads has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, context);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxNativeAd != null) {\n                                        nativeAdLoader.destroy(maxNativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxNativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(context, nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(context, nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native ads has been loaded\");\n                        }\n                        break;\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n            }\n        }\n    }\n", "    public void setNativeAdPadding(int left, int top, int right, int bottom) {\n        nativeAdViewContainer.setPadding(left, top, right, bottom);\n    }\n\n    public void setNativeAdMargin(int left, int top, int right, int bottom) {\n        setMargins(nativeAdViewContainer, left, top, right, bottom);\n    }\n\n    public void setMargins(View view, int left, int top, int right, int bottom) {\n        if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n            ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n            p.setMargins(left, top, right, bottom);\n            view.requestLayout();\n        }\n    }\n", "    public void setMargins(View view, int left, int top, int right, int bottom) {\n        if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n            ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n            p.setMargins(left, top, right, bottom);\n            view.requestLayout();\n        }\n    }\n\n    public void setNativeAdBackgroundResource(int drawableBackground) {\n        nativeAdViewContainer.setBackgroundResource(drawableBackground);\n    }\n", "    public void setNativeAdBackgroundResource(int drawableBackground) {\n        nativeAdViewContainer.setBackgroundResource(drawableBackground);\n    }\n\n    public void setNativeAdBackgroundColor(Context context, boolean darkTheme, int nativeBackgroundLight, int nativeBackgroundDark) {\n        if (darkTheme) {\n            nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(context, nativeBackgroundDark));\n        } else {\n            nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(context, nativeBackgroundLight));\n        }\n    }\n", "    public MaxNativeAdView createNativeAdView(Context context, String nativeStyles) {\n        MaxNativeAdViewBinder binder;\n        switch (nativeStyles) {\n            case Constant.STYLE_NEWS:\n            case Constant.STYLE_MEDIUM:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_news_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_RADIO:\n            case Constant.STYLE_SMALL:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_radio_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_VIDEO_LARGE:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_large_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_VIDEO_SMALL:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_small_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            default:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_medium_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n        }\n        return new MaxNativeAdView(binder, context);\n    }\n", "    public MaxNativeAdView createNativeAdViewDark(Context context, String nativeStyles) {\n        MaxNativeAdViewBinder binder;\n        switch (nativeStyles) {\n            case Constant.STYLE_NEWS:\n            case Constant.STYLE_MEDIUM:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_news_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_RADIO:\n            case Constant.STYLE_SMALL:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_radio_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_VIDEO_LARGE:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_large_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            case Constant.STYLE_VIDEO_SMALL:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_small_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n            default:\n                binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_medium_template_view)\n                        .setTitleTextViewId(R.id.title_text_view)\n                        .setBodyTextViewId(R.id.body_text_view)\n                        .setAdvertiserTextViewId(R.id.advertiser_textView)\n                        .setIconImageViewId(R.id.icon_image_view)\n                        .setMediaContentViewGroupId(R.id.media_view_container)\n                        .setOptionsContentViewGroupId(R.id.ad_options_view)\n                        .setCallToActionButtonId(R.id.cta_button)\n                        .build();\n                break;\n        }\n        return new MaxNativeAdView(binder, context);\n    }\n\n    @SuppressWarnings(\"ConstantConditions\")", "    public void populateNativeAdView(Context context, com.google.android.gms.ads.nativead.NativeAd nativeAd, NativeAdView nativeAdView, boolean darkTheme, int nativeBackgroundDark, int nativeBackgroundLight) {\n\n        if (darkTheme) {\n            nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(context, nativeBackgroundDark));\n            nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundDark);\n        } else {\n            nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(context, nativeBackgroundLight));\n            nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundLight);\n        }\n\n        nativeAdView.setMediaView(nativeAdView.findViewById(R.id.media_view));\n        nativeAdView.setHeadlineView(nativeAdView.findViewById(R.id.primary));\n        nativeAdView.setBodyView(nativeAdView.findViewById(R.id.body));\n        nativeAdView.setCallToActionView(nativeAdView.findViewById(R.id.cta));\n        nativeAdView.setIconView(nativeAdView.findViewById(R.id.icon));\n\n        ((TextView) nativeAdView.getHeadlineView()).setText(nativeAd.getHeadline());\n        nativeAdView.getMediaView().setMediaContent(nativeAd.getMediaContent());\n", "        if (nativeAd.getBody() == null) {\n            nativeAdView.getBodyView().setVisibility(View.INVISIBLE);\n        } else {\n            nativeAdView.getBodyView().setVisibility(View.VISIBLE);\n            ((TextView) nativeAdView.getBodyView()).setText(nativeAd.getBody());\n        }\n\n        if (nativeAd.getCallToAction() == null) {\n            nativeAdView.getCallToActionView().setVisibility(View.INVISIBLE);\n        } else {\n            nativeAdView.getCallToActionView().setVisibility(View.VISIBLE);\n            ((Button) nativeAdView.getCallToActionView()).setText(nativeAd.getCallToAction());\n        }\n", "        if (nativeAd.getIcon() == null) {\n            nativeAdView.getIconView().setVisibility(View.GONE);\n        } else {\n            ((ImageView) nativeAdView.getIconView()).setImageDrawable(nativeAd.getIcon().getDrawable());\n            nativeAdView.getIconView().setVisibility(View.VISIBLE);\n        }\n\n        nativeAdView.setNativeAd(nativeAd);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/NativeAdFragment.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\n\nimport android.app.Activity;", "\nimport android.app.Activity;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.FrameLayout;", "import android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\n\nimport com.applovin.adview.AppLovinAdView;", "\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;\nimport com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;", "import com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.AdOptionsView;\nimport com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.AdRequest;", "import com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;\nimport com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;", "import com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.nativead.NativeAdDetails;\nimport com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NativeAdFragment {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        View view;\n\n        LinearLayout nativeAdViewContainer;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n        MaxAd nativeAd;\n        LinearLayout appLovinDiscoveryMrecAd;\n        private AppLovinAdView appLovinAdView;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private String appLovinDiscMrecZoneId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private String nativeAdStyle = \"\";\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadNativeAd();\n            return this;\n        }\n\n        public Builder setPadding(int left, int top, int right, int bottom) {\n            setNativeAdPadding(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n", "        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setBackgroundResource(int drawableBackground) {\n            setNativeAdBackgroundResource(drawableBackground);\n            return this;\n        }\n\n        public Builder setView(View view) {\n            this.view = view;\n            return this;\n        }\n", "        public Builder setView(View view) {\n            this.view = view;\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n", "        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n", "        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinDiscoveryMrecZoneId(String appLovinDiscMrecZoneId) {\n            this.appLovinDiscMrecZoneId = appLovinDiscMrecZoneId;\n            return this;\n        }\n\n        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n", "        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n\n        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n", "        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n", "        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public Builder setNativeAdStyle(String nativeAdStyle) {\n            this.nativeAdStyle = nativeAdStyle;\n            return this;\n        }\n", "        public Builder setNativeAdStyle(String nativeAdStyle) {\n            this.nativeAdStyle = nativeAdStyle;\n            return this;\n        }\n\n        public Builder setNativeAdBackgroundColor(int colorLight, int colorDark) {\n            this.nativeBackgroundLight = colorLight;\n            this.nativeBackgroundDark = colorDark;\n            return this;\n        }\n", "        public void loadNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                loadBackupNativeAd();\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    loadBackupNativeAd();\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public void loadBackupNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public void setNativeAdPadding(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setPadding(left, top, right, bottom);\n            if (darkTheme) {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundDark));\n            } else {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundLight));\n            }\n        }\n\n        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n", "        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n\n        public void setMargins(View view, int left, int top, int right, int bottom) {\n            if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n                ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n                p.setMargins(left, top, right, bottom);\n                view.requestLayout();\n            }\n        }\n", "        public void setNativeAdBackgroundResource(int drawableBackground) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setBackgroundResource(drawableBackground);\n        }\n\n        public MaxNativeAdView createNativeAdView(String nativeAdStyle) {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n        }\n", "        public MaxNativeAdView createNativeAdViewDark(String nativeAdStyle) {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n        }\n\n    }\n\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/NativeAdViewPager.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;", "import static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\n\nimport android.app.Activity;\nimport android.graphics.drawable.ColorDrawable;", "import android.app.Activity;\nimport android.graphics.drawable.ColorDrawable;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;", "import android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\n\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;", "import com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;\nimport com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.AdOptionsView;\nimport com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;", "import com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;\nimport com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;", "import com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.nativead.NativeAdDetails;\nimport com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NativeAdViewPager {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n\n        View view;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n        MaxAd nativeAd;\n\n        ProgressBar progressBarAd;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity, View view) {\n            this.activity = activity;\n            this.view = view;\n        }\n", "        public Builder build() {\n            loadNativeAd();\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n", "        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n", "        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n\n        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n\n        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n", "        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n", "        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public Builder setNativeAdBackgroundColor(int colorLight, int colorDark) {\n            this.nativeBackgroundLight = colorLight;\n            this.nativeBackgroundDark = colorDark;\n            return this;\n        }\n", "        public void loadNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = activity.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v1 -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                progressBarAd = view.findViewById(R.id.progress_bar_ad);\n                progressBarAd.setVisibility(View.VISIBLE);\n\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        progressBarAd.setVisibility(View.GONE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        progressBarAd.setVisibility(View.GONE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(activity);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_large_template_view, fanNativeAdLayout, false);\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(activity);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_large_template_view, fanNativeAdLayout, false);\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    progressBarAd.setVisibility(View.GONE);\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case UNITY:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case UNITY:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public void loadBackupNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = activity.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v1 -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                progressBarAd = view.findViewById(R.id.progress_bar_ad);\n                progressBarAd.setVisibility(View.VISIBLE);\n\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        progressBarAd.setVisibility(View.GONE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            progressBarAd.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        progressBarAd.setVisibility(View.GONE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            progressBarAd.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanNativeAdLayout.getVisibility() != View.VISIBLE) {\n                            fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                            NativeAdListener nativeAdListener = new NativeAdListener() {\n                                @Override\n                                public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override", "                                public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                                }\n\n                                @Override\n                                public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                    // Race condition, load() called again before last ad was displayed\n                                    fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(activity);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_large_template_view, fanNativeAdLayout, false);\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (fanNativeAd != ad) {\n                                        return;\n                                    }\n                                    // Inflate Native Ad into Container\n                                    //inflateAd(nativeAd);\n                                    fanNativeAd.unregisterView();\n                                    // Add the Ad view into the ad container.\n                                    LayoutInflater inflater = LayoutInflater.from(activity);\n                                    // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                    LinearLayout nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_large_template_view, fanNativeAdLayout, false);\n                                    fanNativeAdLayout.addView(nativeAdView);\n\n                                    // Add the AdOptionsView\n                                    LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                    AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                    adChoicesContainer.removeAllViews();\n                                    adChoicesContainer.addView(adOptionsView, 0);\n\n                                    // Create native UI using the ad metadata.\n                                    TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                    com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                    com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                    TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                    TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                    TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                    Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                    LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                    if (darkTheme) {\n                                        nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                        nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                        sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                        nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    // Set the Text.\n                                    nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                    nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                    nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                    nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                    nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                    sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                    // Create a list of clickable views\n                                    List<View> clickableViews = new ArrayList<>();\n                                    clickableViews.add(nativeAdTitle);\n                                    clickableViews.add(sponsoredLabel);\n                                    clickableViews.add(nativeAdIcon);\n                                    clickableViews.add(nativeAdMedia);\n                                    clickableViews.add(nativeAdBody);\n                                    clickableViews.add(nativeAdSocialContext);\n                                    clickableViews.add(nativeAdCallToAction);\n\n                                    // Register the Title and CTA button to listen for clicks.\n                                    fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                                }\n\n                                @Override", "                                public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                                }\n\n                                @Override\n                                public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                                }\n                            };\n\n                            com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                            fanNativeAd.loadAd(loadAdConfig);\n                        } else {\n                            Log.d(TAG, \"FAN Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    progressBarAd.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    progressBarAd.setVisibility(View.GONE);\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case UNITY:\n\n                    case NONE:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                            progressBarAd.setVisibility(View.GONE);\n                        }\n                        break;\n\n                    case UNITY:\n\n                    case NONE:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public MaxNativeAdView createNativeAdView() {\n            MaxNativeAdViewBinder binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_large_template_view)\n                    .setTitleTextViewId(R.id.title_text_view)\n                    .setBodyTextViewId(R.id.body_text_view)\n                    .setAdvertiserTextViewId(R.id.advertiser_textView)\n                    .setIconImageViewId(R.id.icon_image_view)\n                    .setMediaContentViewGroupId(R.id.media_view_container)\n                    .setOptionsContentViewGroupId(R.id.ad_options_view)\n                    .setCallToActionButtonId(R.id.cta_button)\n                    .build();\n            return new MaxNativeAdView(binder, activity);\n        }\n", "        public MaxNativeAdView createNativeAdViewDark() {\n            MaxNativeAdViewBinder binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_large_template_view)\n                    .setTitleTextViewId(R.id.title_text_view)\n                    .setBodyTextViewId(R.id.body_text_view)\n                    .setAdvertiserTextViewId(R.id.advertiser_textView)\n                    .setIconImageViewId(R.id.icon_image_view)\n                    .setMediaContentViewGroupId(R.id.media_view_container)\n                    .setOptionsContentViewGroupId(R.id.ad_options_view)\n                    .setCallToActionButtonId(R.id.cta_button)\n                    .build();\n            return new MaxNativeAdView(binder, activity);\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/RewardedVideoAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;", "import static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.applovin.adview.AppLovinIncentivizedInterstitial;", "\nimport com.applovin.adview.AppLovinIncentivizedInterstitial;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.MaxReward;\nimport com.applovin.mediation.MaxRewardedAdListener;\nimport com.applovin.mediation.ads.MaxRewardedAd;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;", "import com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdRewardListener;\nimport com.applovin.sdk.AppLovinAdVideoPlaybackListener;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.facebook.ads.Ad;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.RewardedVideoAdListener;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;", "import com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.rewarded.RewardedAd;\nimport com.google.android.gms.ads.rewarded.RewardedAdLoadCallback;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;\nimport com.ironsource.mediationsdk.logger.IronSourceError;\nimport com.ironsource.mediationsdk.model.Placement;\nimport com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoListener;\nimport com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoManualListener;", "import com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoListener;\nimport com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoManualListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdCompleteListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdErrorListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdLoadedListener;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.adsbase.StartAppAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.unity3d.ads.IUnityAdsLoadListener;\nimport com.unity3d.ads.IUnityAdsShowListener;", "import com.unity3d.ads.IUnityAdsLoadListener;\nimport com.unity3d.ads.IUnityAdsShowListener;\nimport com.unity3d.ads.UnityAds;\nimport com.unity3d.ads.UnityAdsShowOptions;\nimport com.wortise.ads.rewarded.models.Reward;\n\nimport java.util.Map;\n\npublic class RewardedVideoAd {\n\n    public static class Builder {\n\n        private static final String TAG = \"SoloRewarded\";\n        private final Activity activity;\n        private RewardedAd adMobRewardedAd;\n        private RewardedAd adManagerRewardedAd;\n        private com.facebook.ads.RewardedVideoAd fanRewardedVideoAd;\n        private StartAppAd startAppAd;\n        private MaxRewardedAd applovinMaxRewardedAd;\n        private AppLovinIncentivizedInterstitial incentivizedInterstitial;\n        private com.wortise.ads.rewarded.RewardedAd wortiseRewardedAd;\n        private String adStatus = \"\";\n        private String mainAds = \"\";\n        private String backupAds = \"\";\n        private String adMobRewardedId = \"\";\n        private String adManagerRewardedId = \"\";\n        private String fanRewardedId = \"\";\n        private String unityRewardedId = \"\";\n        private String applovinMaxRewardedId = \"\";\n        private String applovinDiscRewardedZoneId = \"\";\n        private String ironSourceRewardedId = \"\";\n        private String wortiseRewardedId = \"\";\n        private int placementStatus = 1;\n        private boolean legacyGDPR = false;\n        private boolean showRewardedAdIfLoaded = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "public class RewardedVideoAd {\n\n    public static class Builder {\n\n        private static final String TAG = \"SoloRewarded\";\n        private final Activity activity;\n        private RewardedAd adMobRewardedAd;\n        private RewardedAd adManagerRewardedAd;\n        private com.facebook.ads.RewardedVideoAd fanRewardedVideoAd;\n        private StartAppAd startAppAd;\n        private MaxRewardedAd applovinMaxRewardedAd;\n        private AppLovinIncentivizedInterstitial incentivizedInterstitial;\n        private com.wortise.ads.rewarded.RewardedAd wortiseRewardedAd;\n        private String adStatus = \"\";\n        private String mainAds = \"\";\n        private String backupAds = \"\";\n        private String adMobRewardedId = \"\";\n        private String adManagerRewardedId = \"\";\n        private String fanRewardedId = \"\";\n        private String unityRewardedId = \"\";\n        private String applovinMaxRewardedId = \"\";\n        private String applovinDiscRewardedZoneId = \"\";\n        private String ironSourceRewardedId = \"\";\n        private String wortiseRewardedId = \"\";\n        private int placementStatus = 1;\n        private boolean legacyGDPR = false;\n        private boolean showRewardedAdIfLoaded = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build(OnRewardedAdLoadedListener onLoaded, OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {\n            loadRewardedAd(onLoaded, onComplete, onError);\n            return this;\n        }\n\n        public Builder show(OnRewardedAdCompleteListener onRewardedAdCompleteListener, OnRewardedAdErrorListener onRewardedAdErrorListener) {\n            showRewardedAd(onRewardedAdCompleteListener, onRewardedAdErrorListener);\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setMainAds(String mainAds) {\n            this.mainAds = mainAds;\n            return this;\n        }\n\n        public Builder setBackupAds(String backupAds) {\n            this.backupAds = backupAds;\n            return this;\n        }\n", "        public Builder setBackupAds(String backupAds) {\n            this.backupAds = backupAds;\n            return this;\n        }\n\n        public Builder setAdMobRewardedId(String adMobRewardedId) {\n            this.adMobRewardedId = adMobRewardedId;\n            return this;\n        }\n\n        public Builder setAdManagerRewardedId(String adManagerRewardedId) {\n            this.adManagerRewardedId = adManagerRewardedId;\n            return this;\n        }\n", "        public Builder setAdManagerRewardedId(String adManagerRewardedId) {\n            this.adManagerRewardedId = adManagerRewardedId;\n            return this;\n        }\n\n        public Builder setFanRewardedId(String fanRewardedId) {\n            this.fanRewardedId = fanRewardedId;\n            return this;\n        }\n\n        public Builder setUnityRewardedId(String unityRewardedId) {\n            this.unityRewardedId = unityRewardedId;\n            return this;\n        }\n", "        public Builder setUnityRewardedId(String unityRewardedId) {\n            this.unityRewardedId = unityRewardedId;\n            return this;\n        }\n\n        public Builder setApplovinMaxRewardedId(String applovinMaxRewardedId) {\n            this.applovinMaxRewardedId = applovinMaxRewardedId;\n            return this;\n        }\n\n        public Builder setApplovinDiscRewardedZoneId(String applovinDiscRewardedZoneId) {\n            this.applovinDiscRewardedZoneId = applovinDiscRewardedZoneId;\n            return this;\n        }\n", "        public Builder setApplovinDiscRewardedZoneId(String applovinDiscRewardedZoneId) {\n            this.applovinDiscRewardedZoneId = applovinDiscRewardedZoneId;\n            return this;\n        }\n\n        public Builder setIronSourceRewardedId(String ironSourceRewardedId) {\n            this.ironSourceRewardedId = ironSourceRewardedId;\n            return this;\n        }\n\n        public Builder setWortiseRewardedId(String wortiseRewardedId) {\n            this.wortiseRewardedId = wortiseRewardedId;\n            return this;\n        }\n", "        public Builder setWortiseRewardedId(String wortiseRewardedId) {\n            this.wortiseRewardedId = wortiseRewardedId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public Builder showRewardedAdIfLoaded(boolean showRewardedAdIfLoaded) {\n            this.showRewardedAdIfLoaded = showRewardedAdIfLoaded;\n            return this;\n        }\n\n        public void loadRewardedAd(OnRewardedAdLoadedListener onLoaded, OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {", "        public void loadRewardedAd(OnRewardedAdLoadedListener onLoaded, OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        RewardedAd.load(activity, adMobRewardedId, Tools.getAdRequest(activity, legacyGDPR), new RewardedAdLoadCallback() {\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull RewardedAd ad) {\n                                adMobRewardedAd = ad;\n                                adMobRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adMobRewardedAd = null;\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdLoaded(@NonNull RewardedAd ad) {\n                                adManagerRewardedAd = ad;\n                                adManagerRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                            public void onAdLoaded(@NonNull RewardedAd ad) {\n                                adManagerRewardedAd = ad;\n                                adManagerRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adManagerRewardedAd = null;\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adManagerRewardedAd = null;\n                                    }\n                                });", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adManagerRewardedAd = null;\n                                    }\n                                });\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                                    public void onRewardedVideoCompleted() {\n                                        onComplete.onRewardedAdComplete();\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                                    }\n\n                                    @Override\n                                    public void onRewardedVideoClosed() {\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad closed\");\n                                    }\n\n                                    @Override", "                                    public void onError(Ad ad, AdError adError) {\n                                        loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + fanRewardedId + \", try to load backup ad: \" + backupAds);\n                                    }\n\n                                    @Override\n                                    public void onAdLoaded(Ad ad) {\n                                        if (showRewardedAdIfLoaded) {\n                                            showRewardedAd(onComplete, onError);\n                                        } else {\n                                            onLoaded.onRewardedAdLoaded();\n                                        }\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                                    }\n\n                                    @Override", "                                    public void onAdClicked(Ad ad) {\n\n                                    }\n\n                                    @Override\n                                    public void onLoggingImpression(Ad ad) {\n\n                                    }\n                                })\n                                .build());\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.setVideoListener(() -> {\n                            onComplete.onRewardedAdComplete();\n                            Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                        });\n                        startAppAd.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad ad) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override", "                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override", "                            public void onUnityAdsAdLoaded(String placementId) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUserRewarded(MaxAd maxAd, MaxReward maxReward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onRewardedVideoStarted(MaxAd maxAd) {\n\n                            }\n\n                            @Override", "                            public void onRewardedVideoCompleted(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd maxAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String s, MaxError maxError) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        applovinMaxRewardedAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(applovinDiscRewardedZoneId, AppLovinSdk.getInstance(activity));\n                        incentivizedInterstitial.preload(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd appLovinAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override", "                            public void failedToReceiveAd(int errorCode) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override", "                            public void onAdAvailable(AdInfo adInfo) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad is ready\");\n                            }\n\n                            @Override\n                            public void onAdUnavailable() {\n\n                            }\n\n                            @Override", "                            public void onAdUnavailable() {\n\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + ironSourceError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + ironSourceError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdRewarded(Placement placement, AdInfo adInfo) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onAdClosed(AdInfo adInfo) {\n\n                            }\n                        });\n                        if (showRewardedAdIfLoaded) {", "                        if (showRewardedAdIfLoaded) {\n                            if (IronSource.isRewardedVideoAvailable()) {\n                                IronSource.showRewardedVideo(ironSourceRewardedId);\n                            }\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseRewardedAd = new com.wortise.ads.rewarded.RewardedAd(activity, wortiseRewardedId);\n                        wortiseRewardedAd.setListener(new com.wortise.ads.rewarded.RewardedAd.Listener() {\n                            @Override", "                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override\n                            public void onRewardedCompleted(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull Reward reward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onRewardedDismissed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad dismissed\");\n                            }\n\n                            @Override\n                            public void onRewardedFailed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull com.wortise.ads.AdError adError) {\n                                loadRewardedBackupAd(onLoaded, onComplete, onError);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + adError + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onRewardedLoaded(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n", "                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n\n        public void loadRewardedBackupAd(OnRewardedAdLoadedListener onLoaded, OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {", "        public void loadRewardedBackupAd(OnRewardedAdLoadedListener onLoaded, OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        RewardedAd.load(activity, adMobRewardedId, Tools.getAdRequest(activity, legacyGDPR), new RewardedAdLoadCallback() {\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull RewardedAd ad) {\n                                adMobRewardedAd = ad;\n                                adMobRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adMobRewardedAd = null;\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdLoaded(@NonNull RewardedAd ad) {\n                                adManagerRewardedAd = ad;\n                                adManagerRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adManagerRewardedAd = null;\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adManagerRewardedAd = null;\n                                    }\n                                });", "                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                                    public void onRewardedVideoCompleted() {\n                                        onComplete.onRewardedAdComplete();\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                                    }\n\n                                    @Override\n                                    public void onRewardedVideoClosed() {\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad closed\");\n                                    }\n\n                                    @Override", "                                    public void onError(Ad ad, AdError adError) {\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + adError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                                    }\n\n                                    @Override\n                                    public void onAdLoaded(Ad ad) {\n                                        if (showRewardedAdIfLoaded) {\n                                            showRewardedBackupAd(onComplete, onError);\n                                        } else {\n                                            onLoaded.onRewardedAdLoaded();\n                                        }\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                                    }\n\n                                    @Override", "                                    public void onAdClicked(Ad ad) {\n\n                                    }\n\n                                    @Override\n                                    public void onLoggingImpression(Ad ad) {\n\n                                    }\n                                })\n                                .build());\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.setVideoListener(() -> {\n                            onComplete.onRewardedAdComplete();\n                            Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                        });\n                        startAppAd.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad ad) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override", "                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override\n                            public void onUnityAdsAdLoaded(String placementId) {", "                            public void onUnityAdsAdLoaded(String placementId) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUserRewarded(MaxAd maxAd, MaxReward maxReward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onRewardedVideoStarted(MaxAd maxAd) {\n\n                            }\n\n                            @Override", "                            public void onRewardedVideoCompleted(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd maxAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String s, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        applovinMaxRewardedAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(applovinDiscRewardedZoneId, AppLovinSdk.getInstance(activity));\n                        incentivizedInterstitial.preload(new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        applovinMaxRewardedAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        incentivizedInterstitial = AppLovinIncentivizedInterstitial.create(applovinDiscRewardedZoneId, AppLovinSdk.getInstance(activity));\n                        incentivizedInterstitial.preload(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd appLovinAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedBackupAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override", "                            public void failedToReceiveAd(int errorCode) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override\n                            public void onAdAvailable(AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad is ready\");\n                            }\n\n                            @Override", "                            public void onAdAvailable(AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad is ready\");\n                            }\n\n                            @Override\n                            public void onAdUnavailable() {\n\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + ironSourceError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdRewarded(Placement placement, AdInfo adInfo) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n\n                            }\n                        });\n                        if (showRewardedAdIfLoaded) {\n                            if (IronSource.isRewardedVideoAvailable()) {\n                                IronSource.showRewardedVideo(ironSourceRewardedId);\n                            }\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseRewardedAd = new com.wortise.ads.rewarded.RewardedAd(activity, wortiseRewardedId);\n                        wortiseRewardedAd.setListener(new com.wortise.ads.rewarded.RewardedAd.Listener() {\n                            @Override", "                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override\n                            public void onRewardedCompleted(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull Reward reward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onRewardedDismissed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad dismissed\");\n                            }\n\n                            @Override\n                            public void onRewardedFailed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull com.wortise.ads.AdError adError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + adError + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onRewardedLoaded(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {", "                            public void onRewardedLoaded(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                if (showRewardedAdIfLoaded) {\n                                    showRewardedAd(onComplete, onError);\n                                } else {\n                                    onLoaded.onRewardedAdLoaded();\n                                }\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup]\" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n", "                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n\n        public void showRewardedAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {", "        public void showRewardedAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobRewardedAd != null) {\n                            adMobRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerRewardedAd != null) {\n                            adManagerRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null && fanRewardedVideoAd.isAdLoaded()) {\n                            fanRewardedVideoAd.show();\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case STARTAPP:\n                        if (startAppAd != null) {\n                            startAppAd.showAd();\n//                            startAppAd.showAd(new AdDisplayListener() {\n//                                @Override", "                        if (startAppAd != null) {\n                            startAppAd.showAd();\n//                            startAppAd.showAd(new AdDisplayListener() {\n//                                @Override\n//                                public void adHidden(com.startapp.sdk.adsbase.Ad ad) {\n//                                    Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad dismissed\");\n//                                }\n//\n//                                @Override\n//                                public void adDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override", "//                                public void adDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override\n//                                public void adClicked(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override\n//                                public void adNotDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//                                    loadRewardedBackupAd(onLoaded, onComplete, onError);\n//                                }\n//                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "//                                public void adNotDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//                                    loadRewardedBackupAd(onLoaded, onComplete, onError);\n//                                }\n//                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                showRewardedBackupAd(onComplete, onError);\n                            }\n\n                            @Override\n                            public void onUnityAdsShowStart(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override", "                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowComplete(String placementId, UnityAds.UnityAdsShowCompletionState state) {\n                                onComplete.onRewardedAdComplete();\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinMaxRewardedAd != null && applovinMaxRewardedAd.isReady()) {\n                            applovinMaxRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (incentivizedInterstitial != null) {\n                            incentivizedInterstitial.show(activity, new AppLovinAdRewardListener() {\n                                @Override", "                        if (incentivizedInterstitial != null) {\n                            incentivizedInterstitial.show(activity, new AppLovinAdRewardListener() {\n                                @Override\n                                public void userRewardVerified(AppLovinAd ad, Map<String, String> response) {\n                                    onComplete.onRewardedAdComplete();\n                                    Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                                }\n\n                                @Override\n                                public void userOverQuota(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override", "                                public void userOverQuota(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override\n                                public void userRewardRejected(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override\n                                public void validationRequestFailed(AppLovinAd ad, int errorCode) {\n\n                                }\n\n\n                            }, null, new AppLovinAdDisplayListener() {\n                                @Override", "                                public void validationRequestFailed(AppLovinAd ad, int errorCode) {\n\n                                }\n\n\n                            }, null, new AppLovinAdDisplayListener() {\n                                @Override\n                                public void adDisplayed(AppLovinAd appLovinAd) {\n                                    Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad displayed\");\n                                }\n\n                                @Override", "                                public void adHidden(AppLovinAd appLovinAd) {\n                                    Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad dismissed\");\n                                }\n                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onError);\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "        public void showRewardedBackupAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobRewardedAd != null) {\n                            adMobRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerRewardedAd != null) {\n                            adManagerRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null && fanRewardedVideoAd.isAdLoaded()) {\n                            fanRewardedVideoAd.show();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case STARTAPP:\n                        if (startAppAd != null) {\n                            startAppAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "                        if (startAppAd != null) {\n                            startAppAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override\n                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                onError.onRewardedAdError();\n                            }\n\n                            @Override", "                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                onError.onRewardedAdError();\n                            }\n\n                            @Override\n                            public void onUnityAdsShowStart(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override", "                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowComplete(String placementId, UnityAds.UnityAdsShowCompletionState state) {\n                                onComplete.onRewardedAdComplete();\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinMaxRewardedAd != null && applovinMaxRewardedAd.isReady()) {\n                            applovinMaxRewardedAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (incentivizedInterstitial != null) {\n                            incentivizedInterstitial.show(activity, new AppLovinAdRewardListener() {\n                                @Override", "                        if (incentivizedInterstitial != null) {\n                            incentivizedInterstitial.show(activity, new AppLovinAdRewardListener() {\n                                @Override\n                                public void userRewardVerified(AppLovinAd ad, Map<String, String> response) {\n                                    onComplete.onRewardedAdComplete();\n                                }\n\n                                @Override\n                                public void userOverQuota(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override", "                                public void userOverQuota(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override\n                                public void userRewardRejected(AppLovinAd ad, Map<String, String> response) {\n\n                                }\n\n                                @Override\n                                public void validationRequestFailed(AppLovinAd ad, int errorCode) {\n\n                                }\n\n\n                            }, new AppLovinAdVideoPlaybackListener() {\n                                @Override", "                                public void validationRequestFailed(AppLovinAd ad, int errorCode) {\n\n                                }\n\n\n                            }, new AppLovinAdVideoPlaybackListener() {\n                                @Override\n                                public void videoPlaybackBegan(AppLovinAd appLovinAd) {\n\n                                }\n\n                                @Override", "                                public void videoPlaybackEnded(AppLovinAd appLovinAd, double v, boolean b) {\n\n                                }\n                            }, new AppLovinAdDisplayListener() {\n                                @Override\n                                public void adDisplayed(AppLovinAd appLovinAd) {\n\n                                }\n\n                                @Override\n                                public void adHidden(AppLovinAd appLovinAd) {\n                                    Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad dismissed\");\n                                }\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                                public void adHidden(AppLovinAd appLovinAd) {\n                                    Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad dismissed\");\n                                }\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "        public void destroyRewardedAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case FAN:\n                    case FACEBOOK:\n                        if (fanRewardedVideoAd != null) {\n                            fanRewardedVideoAd.destroy();\n                            fanRewardedVideoAd = null;\n                        }\n                        break;\n                }\n\n                switch (backupAds) {\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null) {\n                            fanRewardedVideoAd.destroy();\n                            fanRewardedVideoAd = null;\n                        }\n                        break;\n                }\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/InterstitialAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.MOPUB;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;", "import static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.util.Log;\n", "import android.util.Log;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.applovin.adview.AppLovinInterstitialAd;\nimport com.applovin.adview.AppLovinInterstitialAdDialog;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdListener;\nimport com.applovin.mediation.MaxError;", "import com.applovin.mediation.MaxAdListener;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.ads.MaxInterstitialAd;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.facebook.ads.InterstitialAdListener;\nimport com.google.android.gms.ads.AdError;", "import com.facebook.ads.InterstitialAdListener;\nimport com.google.android.gms.ads.AdError;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerInterstitialAd;\nimport com.google.android.gms.ads.admanager.AdManagerInterstitialAdLoadCallback;\nimport com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;", "import com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;\nimport com.ironsource.mediationsdk.logger.IronSourceError;\nimport com.ironsource.mediationsdk.sdk.LevelPlayInterstitialListener;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventInterstitial;\nimport com.solodroid.ads.sdk.util.OnInterstitialAdDismissedListener;\nimport com.solodroid.ads.sdk.util.OnInterstitialAdShowedListener;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.adsbase.Ad;\nimport com.startapp.sdk.adsbase.StartAppAd;", "import com.startapp.sdk.adsbase.Ad;\nimport com.startapp.sdk.adsbase.StartAppAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdDisplayListener;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.unity3d.mediation.IInterstitialAdLoadListener;\nimport com.unity3d.mediation.IInterstitialAdShowListener;\nimport com.unity3d.mediation.errors.LoadError;\nimport com.unity3d.mediation.errors.ShowError;\n\nimport java.util.concurrent.TimeUnit;", "\nimport java.util.concurrent.TimeUnit;\n\npublic class InterstitialAd {\n\n    @SuppressWarnings(\"deprecation\")\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        private com.google.android.gms.ads.interstitial.InterstitialAd adMobInterstitialAd;\n        private AdManagerInterstitialAd adManagerInterstitialAd;\n        private com.facebook.ads.InterstitialAd fanInterstitialAd;\n        private StartAppAd startAppAd;\n        private com.unity3d.mediation.InterstitialAd unityInterstitialAd;\n        private MaxInterstitialAd maxInterstitialAd;", "        public AppLovinInterstitialAdDialog appLovinInterstitialAdDialog;\n        public AppLovinAd appLovinAd;\n        public com.wortise.ads.interstitial.InterstitialAd wortiseInterstitialAd;\n        private int retryAttempt;\n        private int counter = 1;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobInterstitialId = \"\";\n        private String googleAdManagerInterstitialId = \"\";\n        private String fanInterstitialId = \"\";\n        private String unityInterstitialId = \"\";\n        private String appLovinInterstitialId = \"\";\n        private String appLovinInterstitialZoneId = \"\";\n        private String mopubInterstitialId = \"\";\n        private String ironSourceInterstitialId = \"\";\n        private String wortiseInterstitialId = \"\";\n        private int placementStatus = 1;\n        private int interval = 3;\n        private boolean legacyGDPR = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadInterstitialAd();\n            return this;\n        }\n\n        public Builder build(OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            loadInterstitialAd(onInterstitialAdDismissedListener);\n            return this;\n        }\n\n        public void show() {\n            showInterstitialAd();\n        }\n", "        public void show() {\n            showInterstitialAd();\n        }\n\n        public void show(OnInterstitialAdShowedListener onInterstitialAdShowedListener, OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            showInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n", "        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobInterstitialId(String adMobInterstitialId) {\n            this.adMobInterstitialId = adMobInterstitialId;\n            return this;\n        }\n\n        public Builder setGoogleAdManagerInterstitialId(String googleAdManagerInterstitialId) {\n            this.googleAdManagerInterstitialId = googleAdManagerInterstitialId;\n            return this;\n        }\n", "        public Builder setGoogleAdManagerInterstitialId(String googleAdManagerInterstitialId) {\n            this.googleAdManagerInterstitialId = googleAdManagerInterstitialId;\n            return this;\n        }\n\n        public Builder setFanInterstitialId(String fanInterstitialId) {\n            this.fanInterstitialId = fanInterstitialId;\n            return this;\n        }\n\n        public Builder setUnityInterstitialId(String unityInterstitialId) {\n            this.unityInterstitialId = unityInterstitialId;\n            return this;\n        }\n", "        public Builder setUnityInterstitialId(String unityInterstitialId) {\n            this.unityInterstitialId = unityInterstitialId;\n            return this;\n        }\n\n        public Builder setAppLovinInterstitialId(String appLovinInterstitialId) {\n            this.appLovinInterstitialId = appLovinInterstitialId;\n            return this;\n        }\n\n        public Builder setAppLovinInterstitialZoneId(String appLovinInterstitialZoneId) {\n            this.appLovinInterstitialZoneId = appLovinInterstitialZoneId;\n            return this;\n        }\n", "        public Builder setAppLovinInterstitialZoneId(String appLovinInterstitialZoneId) {\n            this.appLovinInterstitialZoneId = appLovinInterstitialZoneId;\n            return this;\n        }\n\n        public Builder setMopubInterstitialId(String mopubInterstitialId) {\n            this.mopubInterstitialId = mopubInterstitialId;\n            return this;\n        }\n\n        public Builder setIronSourceInterstitialId(String ironSourceInterstitialId) {\n            this.ironSourceInterstitialId = ironSourceInterstitialId;\n            return this;\n        }\n", "        public Builder setIronSourceInterstitialId(String ironSourceInterstitialId) {\n            this.ironSourceInterstitialId = ironSourceInterstitialId;\n            return this;\n        }\n\n        public Builder setWortiseInterstitialId(String wortiseInterstitialId) {\n            this.wortiseInterstitialId = wortiseInterstitialId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n", "        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setInterval(int interval) {\n            this.interval = interval;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public void loadInterstitialAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, adMobInterstitialId, Tools.getAdRequest(activity, legacyGDPR), new InterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {\n                                adMobInterstitialAd = interstitialAd;\n                                adMobInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        Log.d(TAG, \"The ad failed to show.\");\n                                    }\n\n                                    @Override", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        Log.d(TAG, \"The ad failed to show.\");\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        adMobInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                                Log.i(TAG, \"onAdLoaded\");\n                            }\n\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                loadBackupInterstitialAd();\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull AdManagerInterstitialAd interstitialAd) {\n                                super.onAdLoaded(adManagerInterstitialAd);\n                                adManagerInterstitialAd = interstitialAd;\n                                adManagerInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdClicked() {\n                                        super.onAdClicked();\n                                    }\n\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                    }\n\n                                    @Override", "                                    public void onAdImpression() {\n                                        super.onAdImpression();\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        super.onAdShowedFullScreenContent();\n                                        adManagerInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                            }\n\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                super.onAdFailedToLoad(loadAdError);\n                                adManagerInterstitialAd = null;\n                                loadBackupInterstitialAd();\n                                Log.d(TAG, \"Failed load Ad Manager Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanInterstitialAd = new com.facebook.ads.InterstitialAd(activity, fanInterstitialId);\n                        com.facebook.ads.InterstitialAdListener adListener = new InterstitialAdListener() {\n                            @Override", "                            public void onInterstitialDisplayed(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(com.facebook.ads.Ad ad) {\n                                fanInterstitialAd.loadAd();\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n                                loadBackupInterstitialAd();\n                            }\n\n                            @Override", "                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n                                loadBackupInterstitialAd();\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                Log.d(TAG, \"FAN Interstitial is loaded\");\n                            }\n\n                            @Override\n                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.InterstitialAd.InterstitialLoadAdConfig loadAdConfig = fanInterstitialAd.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanInterstitialAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.loadAd(new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull Ad ad) {\n                                Log.d(TAG, \"Startapp Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable Ad ad) {\n                                Log.d(TAG, \"Failed to load Startapp Interstitial Ad\");\n                                loadBackupInterstitialAd();\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        unityInterstitialAd = new com.unity3d.mediation.InterstitialAd(activity, unityInterstitialId);\n                        final IInterstitialAdLoadListener unityAdLoadListener = new IInterstitialAdLoadListener() {\n                            @Override", "                            public void onInterstitialLoaded(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"unity interstitial ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialFailedLoad(com.unity3d.mediation.InterstitialAd interstitialAd, LoadError loadError, String s) {\n                                Log.e(TAG, \"Unity Ads failed to load ad : \" + unityInterstitialId + \" : error : \" + s);\n                                loadBackupInterstitialAd();\n                            }\n\n                        };\n                        unityInterstitialAd.load(unityAdLoadListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        maxInterstitialAd = new MaxInterstitialAd(appLovinInterstitialId, activity);\n                        maxInterstitialAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                retryAttempt = 0;\n                                Log.d(TAG, \"AppLovin Interstitial Ad loaded...\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                loadBackupInterstitialAd();\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                loadBackupInterstitialAd();\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                loadBackupInterstitialAd();\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayInterstitialListener(new LevelPlayInterstitialListener() {\n                            @Override", "                            public void onAdReady(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdReady\");\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                Log.d(TAG, \"onInterstitialAdLoadFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd();\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override\n                            public void onAdShowSucceeded(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowSucceeded\");\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd();\n                            }\n\n                            @Override", "                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd();\n                            }\n\n                            @Override\n                            public void onAdClicked(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClicked\");\n                            }\n\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onInterstitialClicked(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                loadInterstitialAd();\n                                Log.d(TAG, \"[Wortise] Interstitial Ad dismissed\");\n                            }\n\n                            @Override", "                            public void onInterstitialFailed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd, @NonNull com.wortise.ads.AdError adError) {\n                                loadBackupInterstitialAd();\n                                Log.d(TAG, \"[Wortise] Failed to load Interstitial Ad\");\n                            }\n\n                            @Override\n                            public void onInterstitialLoaded(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"[Wortise] Interstitial Ad loaded\");\n                            }\n\n                            @Override", "                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n                }\n            }\n        }\n\n        public void loadBackupInterstitialAd() {", "        public void loadBackupInterstitialAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, adMobInterstitialId, Tools.getAdRequest(activity, legacyGDPR), new InterstitialAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {\n                                adMobInterstitialAd = interstitialAd;\n                                adMobInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        Log.d(TAG, \"The ad failed to show.\");\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        adMobInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                                Log.i(TAG, \"onAdLoaded\");\n                            }\n\n                            @Override", "                                    public void onAdShowedFullScreenContent() {\n                                        adMobInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                                Log.i(TAG, \"onAdLoaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull AdManagerInterstitialAd interstitialAd) {\n                                super.onAdLoaded(adManagerInterstitialAd);\n                                adManagerInterstitialAd = interstitialAd;\n                                adManagerInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdClicked() {\n                                        super.onAdClicked();\n                                    }\n\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                    }\n\n                                    @Override", "                                    public void onAdImpression() {\n                                        super.onAdImpression();\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        super.onAdShowedFullScreenContent();\n                                        adManagerInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                            }\n\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                super.onAdFailedToLoad(loadAdError);\n                                adManagerInterstitialAd = null;\n                                Log.d(TAG, \"Failed load Ad Manager Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanInterstitialAd = new com.facebook.ads.InterstitialAd(activity, fanInterstitialId);\n                        com.facebook.ads.InterstitialAdListener adListener = new InterstitialAdListener() {\n                            @Override", "                            public void onInterstitialDisplayed(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(com.facebook.ads.Ad ad) {\n                                fanInterstitialAd.loadAd();\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n\n                            }\n\n                            @Override", "                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                Log.d(TAG, \"FAN Interstitial is loaded\");\n                            }\n\n                            @Override\n                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.InterstitialAd.InterstitialLoadAdConfig loadAdConfig = fanInterstitialAd.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanInterstitialAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.loadAd(new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull Ad ad) {\n                                Log.d(TAG, \"Startapp Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable Ad ad) {\n                                Log.d(TAG, \"Failed to load Startapp Interstitial Ad\");\n                            }\n                        });\n                        Log.d(TAG, \"load StartApp as backup Ad\");\n                        break;\n\n                    case UNITY:\n                        unityInterstitialAd = new com.unity3d.mediation.InterstitialAd(activity, unityInterstitialId);\n                        final IInterstitialAdLoadListener unityAdLoadListener = new IInterstitialAdLoadListener() {\n                            @Override", "                            public void onInterstitialLoaded(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"unity interstitial ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialFailedLoad(com.unity3d.mediation.InterstitialAd interstitialAd, LoadError loadError, String s) {\n                                Log.e(TAG, \"Unity Ads failed to load ad : \" + unityInterstitialId + \" : error : \" + s);\n                            }\n\n                        };\n                        unityInterstitialAd.load(unityAdLoadListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        maxInterstitialAd = new MaxInterstitialAd(appLovinInterstitialId, activity);\n                        maxInterstitialAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                retryAttempt = 0;\n                                Log.d(TAG, \"AppLovin Interstitial Ad loaded...\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayInterstitialListener(new LevelPlayInterstitialListener() {\n                            @Override", "                            public void onAdReady(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdReady\");\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                Log.d(TAG, \"onInterstitialAdLoadFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override\n                            public void onAdShowSucceeded(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowSucceeded\");\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override", "                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override\n                            public void onAdClicked(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClicked\");\n                            }\n\n                            @Override\n                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onInterstitialClicked(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                loadInterstitialAd();\n                                Log.d(TAG, \"[Wortise] [Backup] Interstitial Ad dismissed\");\n                            }\n\n                            @Override", "                            public void onInterstitialFailed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd, @NonNull com.wortise.ads.AdError adError) {\n                                Log.d(TAG, \"[Wortise] [Backup] Failed to load Interstitial Ad\");\n                            }\n\n                            @Override\n                            public void onInterstitialLoaded(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"[Wortise] [Backup] Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "        public void showInterstitialAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                if (counter == interval) {\n                    switch (adNetwork) {\n                        case ADMOB:\n                        case FAN_BIDDING_ADMOB:\n                            if (adMobInterstitialAd != null) {\n                                adMobInterstitialAd.show(activity);\n                                Log.d(TAG, \"admob interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd();\n                                Log.d(TAG, \"admob interstitial null\");\n                            }\n                            break;\n\n                        case GOOGLE_AD_MANAGER:\n                        case FAN_BIDDING_AD_MANAGER:", "                            if (adManagerInterstitialAd != null) {\n                                adManagerInterstitialAd.show(activity);\n                                Log.d(TAG, \"ad manager interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd();\n                                Log.d(TAG, \"ad manager interstitial null\");\n                            }\n                            break;\n\n                        case FAN:\n                        case FACEBOOK:", "                            if (fanInterstitialAd != null && fanInterstitialAd.isAdLoaded()) {\n                                fanInterstitialAd.show();\n                                Log.d(TAG, \"fan interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd();\n                                Log.d(TAG, \"fan interstitial null\");\n                            }\n                            break;\n\n                        case STARTAPP:\n                            if (startAppAd != null) {\n                                startAppAd.showAd();\n                                Log.d(TAG, \"startapp interstitial not null [counter] : \" + counter);\n                            } else {\n                                showBackupInterstitialAd();\n                                Log.d(TAG, \"startapp interstitial null\");\n                            }\n                            break;\n\n                        case UNITY:\n                            final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                                @Override", "                            if (startAppAd != null) {\n                                startAppAd.showAd();\n                                Log.d(TAG, \"startapp interstitial not null [counter] : \" + counter);\n                            } else {\n                                showBackupInterstitialAd();\n                                Log.d(TAG, \"startapp interstitial null\");\n                            }\n                            break;\n\n                        case UNITY:\n                            final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                                @Override", "                                public void onInterstitialShowed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                                }\n\n                                @Override\n                                public void onInterstitialClicked(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                                }\n\n                                @Override\n                                public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                                }\n\n                                @Override", "                                public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                                }\n\n                                @Override\n                                public void onInterstitialFailedShow(com.unity3d.mediation.InterstitialAd interstitialAd, ShowError showError, String s) {\n                                    Log.d(TAG, \"unity ads show failure\");\n                                    showBackupInterstitialAd();\n                                }\n                            };\n                            unityInterstitialAd.show(showListener);\n                            break;\n\n                        case APPLOVIN:\n                        case APPLOVIN_MAX:\n                        case FAN_BIDDING_APPLOVIN_MAX:", "                            if (maxInterstitialAd != null && maxInterstitialAd.isReady()) {\n                                Log.d(TAG, \"ready : \" + counter);\n                                maxInterstitialAd.showAd();\n                                Log.d(TAG, \"show ad\");\n                            } else {\n                                showBackupInterstitialAd();\n                            }\n                            break;\n\n                        case APPLOVIN_DISCOVERY:\n                            if (appLovinInterstitialAdDialog != null) {\n                                appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                            }\n                            break;\n\n                        case MOPUB:\n                            //Mopub has been acquired by AppLovin\n                            break;\n\n                        case IRONSOURCE:\n                        case FAN_BIDDING_IRONSOURCE:", "                            if (appLovinInterstitialAdDialog != null) {\n                                appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                            }\n                            break;\n\n                        case MOPUB:\n                            //Mopub has been acquired by AppLovin\n                            break;\n\n                        case IRONSOURCE:\n                        case FAN_BIDDING_IRONSOURCE:", "                            if (IronSource.isInterstitialReady()) {\n                                IronSource.showInterstitial(ironSourceInterstitialId);\n                            } else {\n                                showBackupInterstitialAd();\n                            }\n                            break;\n\n                        case WORTISE:\n                            if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                                wortiseInterstitialAd.showAd();\n                            } else {\n                                showBackupInterstitialAd();\n                            }\n                            break;\n                    }\n                    counter = 1;\n                } else {\n                    counter++;\n                }\n                Log.d(TAG, \"Current counter : \" + counter);\n            }\n        }\n", "                            if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                                wortiseInterstitialAd.showAd();\n                            } else {\n                                showBackupInterstitialAd();\n                            }\n                            break;\n                    }\n                    counter = 1;\n                } else {\n                    counter++;\n                }\n                Log.d(TAG, \"Current counter : \" + counter);\n            }\n        }\n", "        public void showBackupInterstitialAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                Log.d(TAG, \"Show Backup Interstitial Ad [\" + backupAdNetwork.toUpperCase() + \"]\");\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobInterstitialAd != null) {\n                            adMobInterstitialAd.show(activity);\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerInterstitialAd != null) {\n                            adManagerInterstitialAd.show(activity);\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        if (fanInterstitialAd != null && fanInterstitialAd.isAdLoaded()) {\n                            fanInterstitialAd.show();\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startAppAd != null) {\n                            startAppAd.showAd();\n                        }\n                        break;\n\n                    case UNITY:\n                        final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                            @Override\n                            public void onInterstitialShowed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override", "                            public void onInterstitialShowed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialClicked(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override", "                            public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialFailedShow(com.unity3d.mediation.InterstitialAd interstitialAd, ShowError showError, String s) {\n                                Log.d(TAG, \"unity ads show failure\");\n                            }\n                        };\n                        unityInterstitialAd.show(showListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (maxInterstitialAd != null && maxInterstitialAd.isReady()) {\n                            maxInterstitialAd.showAd();\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        }\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (IronSource.isInterstitialReady()) {\n                            IronSource.showInterstitial(ironSourceInterstitialId);\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                            wortiseInterstitialAd.showAd();\n                        }\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "        public void loadInterstitialAd(OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, adMobInterstitialId, Tools.getAdRequest(activity, legacyGDPR), new InterstitialAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {\n                                adMobInterstitialAd = interstitialAd;\n                                adMobInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        Log.d(TAG, \"The ad failed to show.\");\n                                    }\n\n                                    @Override", "                                    public void onAdShowedFullScreenContent() {\n                                        adMobInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                                Log.i(TAG, \"onAdLoaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull AdManagerInterstitialAd interstitialAd) {\n                                super.onAdLoaded(adManagerInterstitialAd);\n                                adManagerInterstitialAd = interstitialAd;\n                                adManagerInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdClicked() {\n                                        super.onAdClicked();\n                                    }\n\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                    }\n\n                                    @Override", "                                    public void onAdImpression() {\n                                        super.onAdImpression();\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        super.onAdShowedFullScreenContent();\n                                        adManagerInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                            }\n\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                super.onAdFailedToLoad(loadAdError);\n                                adManagerInterstitialAd = null;\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"Failed load Ad Manager Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanInterstitialAd = new com.facebook.ads.InterstitialAd(activity, fanInterstitialId);\n                        com.facebook.ads.InterstitialAdListener adListener = new InterstitialAdListener() {\n                            @Override", "                            public void onInterstitialDisplayed(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(com.facebook.ads.Ad ad) {\n                                fanInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override", "                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                Log.d(TAG, \"FAN Interstitial is loaded\");\n                            }\n\n                            @Override\n                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.InterstitialAd.InterstitialLoadAdConfig loadAdConfig = fanInterstitialAd.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanInterstitialAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.loadAd(new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull Ad ad) {\n                                Log.d(TAG, \"Startapp Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable Ad ad) {\n                                Log.d(TAG, \"Failed to load Startapp Interstitial Ad\");\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        unityInterstitialAd = new com.unity3d.mediation.InterstitialAd(activity, unityInterstitialId);\n                        final IInterstitialAdLoadListener unityAdLoadListener = new IInterstitialAdLoadListener() {\n                            @Override", "                            public void onInterstitialLoaded(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"unity interstitial ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialFailedLoad(com.unity3d.mediation.InterstitialAd interstitialAd, LoadError loadError, String s) {\n                                Log.e(TAG, \"Unity Ads failed to load ad : \" + unityInterstitialId + \" : error : \" + s);\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n\n                        };\n                        unityInterstitialAd.load(unityAdLoadListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        maxInterstitialAd = new MaxInterstitialAd(appLovinInterstitialId, activity);\n                        maxInterstitialAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                retryAttempt = 0;\n                                Log.d(TAG, \"AppLovin Interstitial Ad loaded...\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayInterstitialListener(new LevelPlayInterstitialListener() {\n                            @Override", "                            public void onAdReady(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdReady\");\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                Log.d(TAG, \"onInterstitialAdLoadFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override\n                            public void onAdShowSucceeded(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowSucceeded\");\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n\n                            @Override", "                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                            }\n\n                            @Override\n                            public void onAdClicked(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClicked\");\n                            }\n\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd(onInterstitialAdDismissedListener);\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onInterstitialClicked(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                loadInterstitialAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                Log.d(TAG, \"[Wortise] Interstitial Ad dismissed\");\n                            }\n\n                            @Override", "                            public void onInterstitialFailed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd, @NonNull com.wortise.ads.AdError adError) {\n                                loadBackupInterstitialAd(onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"[Wortise] Failed to load Interstitial Ad\");\n                            }\n\n                            @Override\n                            public void onInterstitialLoaded(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"[Wortise] Interstitial Ad loaded\");\n                            }\n\n                            @Override", "                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n                }\n            }\n        }\n\n        public void loadBackupInterstitialAd(OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {", "        public void loadBackupInterstitialAd(OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, adMobInterstitialId, Tools.getAdRequest(activity, legacyGDPR), new InterstitialAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {\n                                adMobInterstitialAd = interstitialAd;\n                                adMobInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        Log.d(TAG, \"The ad failed to show.\");\n                                    }\n\n                                    @Override", "                                    public void onAdShowedFullScreenContent() {\n                                        adMobInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                                Log.i(TAG, \"onAdLoaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.i(TAG, loadAdError.getMessage());\n                                adMobInterstitialAd = null;\n                                Log.d(TAG, \"Failed load AdMob Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        AdManagerInterstitialAd.load(activity, googleAdManagerInterstitialId, Tools.getGoogleAdManagerRequest(), new AdManagerInterstitialAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull AdManagerInterstitialAd interstitialAd) {\n                                super.onAdLoaded(adManagerInterstitialAd);\n                                adManagerInterstitialAd = interstitialAd;\n                                adManagerInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdClicked() {\n                                        super.onAdClicked();\n                                    }\n\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        loadInterstitialAd(onInterstitialAdDismissedListener);\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                    }\n\n                                    @Override", "                                    public void onAdImpression() {\n                                        super.onAdImpression();\n                                    }\n\n                                    @Override\n                                    public void onAdShowedFullScreenContent() {\n                                        super.onAdShowedFullScreenContent();\n                                        adManagerInterstitialAd = null;\n                                        Log.d(TAG, \"The ad was shown.\");\n                                    }\n                                });\n                            }\n\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                super.onAdFailedToLoad(loadAdError);\n                                adManagerInterstitialAd = null;\n                                Log.d(TAG, \"Failed load Ad Manager Interstitial Ad\");\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanInterstitialAd = new com.facebook.ads.InterstitialAd(activity, fanInterstitialId);\n                        com.facebook.ads.InterstitialAdListener adListener = new InterstitialAdListener() {\n                            @Override", "                            public void onInterstitialDisplayed(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(com.facebook.ads.Ad ad) {\n                                fanInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override", "                            public void onError(com.facebook.ads.Ad ad, com.facebook.ads.AdError adError) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                Log.d(TAG, \"FAN Interstitial is loaded\");\n                            }\n\n                            @Override\n                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.InterstitialAd.InterstitialLoadAdConfig loadAdConfig = fanInterstitialAd.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanInterstitialAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.loadAd(new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull Ad ad) {\n                                Log.d(TAG, \"Startapp Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable Ad ad) {\n                                Log.d(TAG, \"Failed to load Startapp Interstitial Ad\");\n                            }\n                        });\n                        Log.d(TAG, \"load StartApp as backup Ad\");\n                        break;\n\n                    case UNITY:\n                        unityInterstitialAd = new com.unity3d.mediation.InterstitialAd(activity, unityInterstitialId);\n                        final IInterstitialAdLoadListener unityAdLoadListener = new IInterstitialAdLoadListener() {\n                            @Override", "                            public void onInterstitialLoaded(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"unity interstitial ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialFailedLoad(com.unity3d.mediation.InterstitialAd interstitialAd, LoadError loadError, String s) {\n                                Log.e(TAG, \"Unity Ads failed to load ad : \" + unityInterstitialId + \" : error : \" + s);\n                            }\n\n                        };\n                        unityInterstitialAd.load(unityAdLoadListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        maxInterstitialAd = new MaxInterstitialAd(appLovinInterstitialId, activity);\n                        maxInterstitialAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                retryAttempt = 0;\n                                Log.d(TAG, \"AppLovin Interstitial Ad loaded...\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxInterstitialAd.loadAd();\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                retryAttempt++;\n                                long delayMillis = TimeUnit.SECONDS.toMillis((long) Math.pow(2, Math.min(6, retryAttempt)));\n                                new Handler().postDelayed(() -> maxInterstitialAd.loadAd(), delayMillis);\n                                Log.d(TAG, \"failed to load AppLovin Interstitial\");\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxInterstitialAd.loadAd();\n                            }\n                        });\n\n                        // Load the first ad\n                        maxInterstitialAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", appLovinInterstitialZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayInterstitialListener(new LevelPlayInterstitialListener() {\n                            @Override", "                            public void onAdReady(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdReady\");\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                Log.d(TAG, \"onInterstitialAdLoadFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdOpened\");\n                            }\n\n                            @Override\n                            public void onAdShowSucceeded(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowSucceeded\");\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override", "                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdShowFailed\" + \" \" + ironSourceError);\n                            }\n\n                            @Override\n                            public void onAdClicked(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClicked\");\n                            }\n\n                            @Override\n                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd(onInterstitialAdDismissedListener);\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                Log.d(TAG, \"onInterstitialAdClosed\");\n                                loadInterstitialAd(onInterstitialAdDismissedListener);\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n                        });\n                        IronSource.loadInterstitial();\n                        break;\n\n                    case WORTISE:\n                        wortiseInterstitialAd = new com.wortise.ads.interstitial.InterstitialAd(activity, wortiseInterstitialId);\n                        wortiseInterstitialAd.setListener(new com.wortise.ads.interstitial.InterstitialAd.Listener() {\n                            @Override", "                            public void onInterstitialClicked(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialDismissed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                loadInterstitialAd(onInterstitialAdDismissedListener);\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                Log.d(TAG, \"[Wortise] [Backup] Interstitial Ad dismissed\");\n                            }\n\n                            @Override", "                            public void onInterstitialFailed(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd, @NonNull com.wortise.ads.AdError adError) {\n                                Log.d(TAG, \"[Wortise] [Backup] Failed to load Interstitial Ad\");\n                            }\n\n                            @Override\n                            public void onInterstitialLoaded(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n                                Log.d(TAG, \"[Wortise] [Backup] Interstitial Ad loaded\");\n                            }\n\n                            @Override\n                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "                            public void onInterstitialShown(@NonNull com.wortise.ads.interstitial.InterstitialAd interstitialAd) {\n\n                            }\n                        });\n                        wortiseInterstitialAd.loadAd();\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "        public void showInterstitialAd(OnInterstitialAdShowedListener onInterstitialAdShowedListener, OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                if (counter == interval) {\n                    switch (adNetwork) {\n                        case ADMOB:\n                        case FAN_BIDDING_ADMOB:\n                            if (adMobInterstitialAd != null) {\n                                adMobInterstitialAd.show(activity);\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                Log.d(TAG, \"admob interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"admob interstitial null\");\n                            }\n                            break;\n\n                        case GOOGLE_AD_MANAGER:\n                        case FAN_BIDDING_AD_MANAGER:", "                            if (adManagerInterstitialAd != null) {\n                                adManagerInterstitialAd.show(activity);\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                Log.d(TAG, \"ad manager interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"ad manager interstitial null\");\n                            }\n                            break;\n\n                        case FAN:\n                        case FACEBOOK:", "                            if (fanInterstitialAd != null && fanInterstitialAd.isAdLoaded()) {\n                                fanInterstitialAd.show();\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                Log.d(TAG, \"fan interstitial not null\");\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"fan interstitial null\");\n                            }\n                            break;\n\n                        case STARTAPP:", "                            if (startAppAd != null) {\n                                startAppAd.showAd(new AdDisplayListener() {\n                                    @Override\n                                    public void adHidden(Ad ad) {\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void adDisplayed(Ad ad) {\n                                        onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                    }\n\n                                    @Override", "                                    public void adDisplayed(Ad ad) {\n                                        onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                    }\n\n                                    @Override\n                                    public void adClicked(Ad ad) {\n\n                                    }\n\n                                    @Override\n                                    public void adNotDisplayed(Ad ad) {\n\n                                    }\n                                });\n                                Log.d(TAG, \"startapp interstitial not null [counter] : \" + counter);\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"startapp interstitial null\");\n                            }\n                            break;\n\n                        case UNITY:\n                            final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                                @Override", "                                    public void adNotDisplayed(Ad ad) {\n\n                                    }\n                                });\n                                Log.d(TAG, \"startapp interstitial not null [counter] : \" + counter);\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                Log.d(TAG, \"startapp interstitial null\");\n                            }\n                            break;\n\n                        case UNITY:\n                            final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                                @Override", "                                public void onInterstitialShowed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                    onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                }\n\n                                @Override\n                                public void onInterstitialClicked(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                                }\n\n                                @Override\n                                public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                }\n\n                                @Override", "                                public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                }\n\n                                @Override\n                                public void onInterstitialFailedShow(com.unity3d.mediation.InterstitialAd interstitialAd, ShowError showError, String s) {\n                                    Log.d(TAG, \"unity ads show failure\");\n                                    showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                                }\n                            };\n                            unityInterstitialAd.show(showListener);\n                            break;\n\n                        case APPLOVIN:\n                        case APPLOVIN_MAX:\n                        case FAN_BIDDING_APPLOVIN_MAX:", "                            if (maxInterstitialAd != null && maxInterstitialAd.isReady()) {\n                                Log.d(TAG, \"ready : \" + counter);\n                                maxInterstitialAd.showAd();\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                Log.d(TAG, \"show ad\");\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                            }\n                            break;\n\n                        case APPLOVIN_DISCOVERY:", "                            if (appLovinInterstitialAdDialog != null) {\n                                appLovinInterstitialAdDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {\n                                    @Override\n                                    public void adDisplayed(AppLovinAd appLovinAd) {\n                                        onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                    }\n\n                                    @Override\n                                    public void adHidden(AppLovinAd appLovinAd) {\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n                                });\n                                appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                            }\n                            break;\n\n                        case MOPUB:\n                            //Mopub has been acquired by AppLovin\n                            break;\n\n                        case IRONSOURCE:\n                        case FAN_BIDDING_IRONSOURCE:", "                                    public void adHidden(AppLovinAd appLovinAd) {\n                                        onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                    }\n                                });\n                                appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                            }\n                            break;\n\n                        case MOPUB:\n                            //Mopub has been acquired by AppLovin\n                            break;\n\n                        case IRONSOURCE:\n                        case FAN_BIDDING_IRONSOURCE:", "                            if (IronSource.isInterstitialReady()) {\n                                IronSource.showInterstitial(ironSourceInterstitialId);\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                            }\n                            break;\n\n                        case WORTISE:\n                            if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                                wortiseInterstitialAd.showAd();\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                            }\n                            break;\n                    }\n                    counter = 1;\n                } else {\n                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                    counter++;\n                }\n                Log.d(TAG, \"Current counter : \" + counter);\n            } else {\n                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n            }\n        }\n", "                            if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                                wortiseInterstitialAd.showAd();\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                            } else {\n                                showBackupInterstitialAd(onInterstitialAdShowedListener, onInterstitialAdDismissedListener);\n                            }\n                            break;\n                    }\n                    counter = 1;\n                } else {\n                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                    counter++;\n                }\n                Log.d(TAG, \"Current counter : \" + counter);\n            } else {\n                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n            }\n        }\n", "        public void showBackupInterstitialAd(OnInterstitialAdShowedListener onInterstitialAdShowedListener, OnInterstitialAdDismissedListener onInterstitialAdDismissedListener) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                Log.d(TAG, \"Show Backup Interstitial Ad [\" + backupAdNetwork.toUpperCase() + \"]\");\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobInterstitialAd != null) {\n                            adMobInterstitialAd.show(activity);\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerInterstitialAd != null) {\n                            adManagerInterstitialAd.show(activity);\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        if (fanInterstitialAd != null && fanInterstitialAd.isAdLoaded()) {\n                            fanInterstitialAd.show();\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (fanInterstitialAd != null && fanInterstitialAd.isAdLoaded()) {\n                            fanInterstitialAd.show();\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case STARTAPP:\n                        if (startAppAd != null) {\n                            startAppAd.showAd(new AdDisplayListener() {\n                                @Override\n                                public void adHidden(Ad ad) {\n                                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                }\n\n                                @Override", "                                public void adHidden(Ad ad) {\n                                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                }\n\n                                @Override\n                                public void adDisplayed(Ad ad) {\n                                    onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                }\n\n                                @Override\n                                public void adClicked(Ad ad) {\n\n                                }\n\n                                @Override", "                                public void adClicked(Ad ad) {\n\n                                }\n\n                                @Override\n                                public void adNotDisplayed(Ad ad) {\n\n                                }\n                            });\n                        }\n                        break;\n\n                    case UNITY:\n                        final IInterstitialAdShowListener showListener = new IInterstitialAdShowListener() {\n                            @Override", "                            public void onInterstitialShowed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                onInterstitialAdShowedListener.onInterstitialAdShowed();\n                            }\n\n                            @Override\n                            public void onInterstitialClicked(com.unity3d.mediation.InterstitialAd interstitialAd) {\n\n                            }\n\n                            @Override\n                            public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override", "                            public void onInterstitialClosed(com.unity3d.mediation.InterstitialAd interstitialAd) {\n                                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                            }\n\n                            @Override\n                            public void onInterstitialFailedShow(com.unity3d.mediation.InterstitialAd interstitialAd, ShowError showError, String s) {\n                                Log.d(TAG, \"unity ads show failure\");\n                            }\n                        };\n                        unityInterstitialAd.show(showListener);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (maxInterstitialAd != null && maxInterstitialAd.isReady()) {\n                            maxInterstitialAd.showAd();\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {\n                                @Override\n                                public void adDisplayed(AppLovinAd appLovinAd) {\n                                    onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                }\n\n                                @Override", "                                public void adDisplayed(AppLovinAd appLovinAd) {\n                                    onInterstitialAdShowedListener.onInterstitialAdShowed();\n                                }\n\n                                @Override\n                                public void adHidden(AppLovinAd appLovinAd) {\n                                    onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n                                }\n                            });\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        }\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (IronSource.isInterstitialReady()) {\n                            IronSource.showInterstitial(ironSourceInterstitialId);\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseInterstitialAd != null && wortiseInterstitialAd.isAvailable()) {\n                            wortiseInterstitialAd.showAd();\n                            onInterstitialAdShowedListener.onInterstitialAdShowed();\n                        }\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n            } else {\n                onInterstitialAdDismissedListener.onInterstitialAdDismissed();\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/NativeAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n", "import static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;", "import android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;", "import androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\n\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;\nimport com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;", "import com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.AdOptionsView;\nimport com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;", "import com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.google.android.gms.ads.nativead.NativeAdView;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;", "import com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;\nimport com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.nativead.NativeAdDetails;\nimport com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;", "import com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.wortise.ads.natives.GoogleNativeAd;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NativeAd {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        LinearLayout nativeAdViewContainer;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        MaxAd maxAd;\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n\n        LinearLayout appLovinDiscoveryMrecAd;\n        private AppLovinAdView appLovinAdView;\n\n        private GoogleNativeAd mGoogleNativeAd;\n        FrameLayout wortiseNativeAd;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private String appLovinDiscMrecZoneId = \"\";\n        private String wortiseNativeId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private String nativeAdStyle = \"\";\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        LinearLayout nativeAdViewContainer;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        MaxAd maxAd;\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n\n        LinearLayout appLovinDiscoveryMrecAd;\n        private AppLovinAdView appLovinAdView;\n\n        private GoogleNativeAd mGoogleNativeAd;\n        FrameLayout wortiseNativeAd;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private String appLovinDiscMrecZoneId = \"\";\n        private String wortiseNativeId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private String nativeAdStyle = \"\";\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadNativeAd();\n            return this;\n        }\n\n        public Builder setPadding(int left, int top, int right, int bottom) {\n            setNativeAdPadding(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n", "        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setBackgroundResource(int drawableBackground) {\n            setNativeAdBackgroundResource(drawableBackground);\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n", "        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n\n        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n", "        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n\n        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n", "        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinDiscoveryMrecZoneId(String appLovinDiscMrecZoneId) {\n            this.appLovinDiscMrecZoneId = appLovinDiscMrecZoneId;\n            return this;\n        }\n\n        public Builder setWortiseNativeId(String wortiseNativeId) {\n            this.wortiseNativeId = wortiseNativeId;\n            return this;\n        }\n", "        public Builder setWortiseNativeId(String wortiseNativeId) {\n            this.wortiseNativeId = wortiseNativeId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n", "        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public Builder setNativeAdStyle(String nativeAdStyle) {\n            this.nativeAdStyle = nativeAdStyle;\n            return this;\n        }\n", "        public Builder setNativeAdStyle(String nativeAdStyle) {\n            this.nativeAdStyle = nativeAdStyle;\n            return this;\n        }\n\n        public Builder setNativeAdBackgroundColor(int colorLight, int colorDark) {\n            this.nativeBackgroundLight = colorLight;\n            this.nativeBackgroundDark = colorDark;\n            return this;\n        }\n", "        public void loadNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = activity.findViewById(R.id.admob_native_ad_container);\n                mediaView = activity.findViewById(R.id.media_view);\n                admobNativeBackground = activity.findViewById(R.id.background);\n\n                adManagerNativeAd = activity.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = activity.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = activity.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = activity.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = activity.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = activity.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = activity.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = activity.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = activity.findViewById(R.id.startapp_native_description);\n                startappNativeButton = activity.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = activity.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = activity.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = activity.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                wortiseNativeAd = activity.findViewById(R.id.wortise_native_ad_container);\n\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                loadBackupNativeAd();\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxAd != null) {\n                                        nativeAdLoader.destroy(maxAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                    Log.d(TAG, \"Max Native Ad loaded successfully\");\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"failed to load Max Native Ad with message : \" + error.getMessage() + \" and error code : \" + error.getCode());\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    loadBackupNativeAd();\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(activity, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(nativeAd, adView);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n                        //do nothing\n                        break;\n                }\n\n            }\n\n        }\n", "        public void loadBackupNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = activity.findViewById(R.id.admob_native_ad_container);\n                mediaView = activity.findViewById(R.id.media_view);\n                admobNativeBackground = activity.findViewById(R.id.background);\n\n                adManagerNativeAd = activity.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = activity.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = activity.findViewById(R.id.ad_manager_background);\n\n                startappNativeAd = activity.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = activity.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = activity.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = activity.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = activity.findViewById(R.id.startapp_native_description);\n                startappNativeButton = activity.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = activity.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = activity.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = activity.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                wortiseNativeAd = activity.findViewById(R.id.wortise_native_ad_container);\n\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                nativeAdViewContainer.setVisibility(View.GONE);\n                                fanNativeAdLayout.setVisibility(View.GONE);\n                            }\n\n                            @Override", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (maxAd != null) {\n                                        nativeAdLoader.destroy(maxAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    maxAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark());\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView());\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);", "                            if (darkTheme) {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundDark);\n                            } else {\n                                appLovinDiscoveryMrecAd.setBackgroundResource(nativeBackgroundLight);\n                            }\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(activity, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(nativeAd, adView);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"[Backup] Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n                }\n\n            }\n\n        }\n", "        public void setNativeAdPadding(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setPadding(left, top, right, bottom);\n            if (darkTheme) {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundDark));\n            } else {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundLight));\n            }\n        }\n\n        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n", "        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n\n        public void setMargins(View view, int left, int top, int right, int bottom) {\n            if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n                ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n                p.setMargins(left, top, right, bottom);\n                view.requestLayout();\n            }\n        }\n", "        public void setNativeAdBackgroundResource(int drawableBackground) {\n            nativeAdViewContainer = activity.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setBackgroundResource(drawableBackground);\n        }\n\n        public MaxNativeAdView createNativeAdView() {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n\n        }\n", "        public MaxNativeAdView createNativeAdViewDark() {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n        }\n\n        @SuppressWarnings(\"ConstantConditions\")", "        public void populateNativeAdView(com.google.android.gms.ads.nativead.NativeAd nativeAd, NativeAdView nativeAdView) {\n\n            if (darkTheme) {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundDark));\n                nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundDark);\n            } else {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundLight));\n                nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundLight);\n            }\n\n            nativeAdView.setMediaView(nativeAdView.findViewById(R.id.media_view));\n            nativeAdView.setHeadlineView(nativeAdView.findViewById(R.id.primary));\n            nativeAdView.setBodyView(nativeAdView.findViewById(R.id.body));\n            nativeAdView.setCallToActionView(nativeAdView.findViewById(R.id.cta));\n            nativeAdView.setIconView(nativeAdView.findViewById(R.id.icon));\n\n            ((TextView) nativeAdView.getHeadlineView()).setText(nativeAd.getHeadline());\n            nativeAdView.getMediaView().setMediaContent(nativeAd.getMediaContent());\n", "            if (nativeAd.getBody() == null) {\n                nativeAdView.getBodyView().setVisibility(View.INVISIBLE);\n            } else {\n                nativeAdView.getBodyView().setVisibility(View.VISIBLE);\n                ((TextView) nativeAdView.getBodyView()).setText(nativeAd.getBody());\n            }\n\n            if (nativeAd.getCallToAction() == null) {\n                nativeAdView.getCallToActionView().setVisibility(View.INVISIBLE);\n            } else {\n                nativeAdView.getCallToActionView().setVisibility(View.VISIBLE);\n                ((Button) nativeAdView.getCallToActionView()).setText(nativeAd.getCallToAction());\n            }\n", "            if (nativeAd.getIcon() == null) {\n                nativeAdView.getIconView().setVisibility(View.GONE);\n            } else {\n                ((ImageView) nativeAdView.getIconView()).setImageDrawable(nativeAd.getIcon().getDrawable());\n                nativeAdView.getIconView().setVisibility(View.VISIBLE);\n            }\n\n            nativeAdView.setNativeAd(nativeAd);\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/NativeAdView.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n", "import static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;", "import android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;", "import androidx.annotation.NonNull;\nimport androidx.core.content.ContextCompat;\n\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.nativeAds.MaxNativeAdListener;\nimport com.applovin.mediation.nativeAds.MaxNativeAdLoader;\nimport com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;", "import com.applovin.mediation.nativeAds.MaxNativeAdView;\nimport com.applovin.mediation.nativeAds.MaxNativeAdViewBinder;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.AdOptionsView;\nimport com.facebook.ads.NativeAdLayout;\nimport com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;", "import com.facebook.ads.NativeAdListener;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdLoader;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;", "import com.solodroid.ads.sdk.util.AdManagerTemplateView;\nimport com.solodroid.ads.sdk.util.Constant;\nimport com.solodroid.ads.sdk.util.NativeTemplateStyle;\nimport com.solodroid.ads.sdk.util.TemplateView;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.nativead.NativeAdDetails;\nimport com.startapp.sdk.ads.nativead.NativeAdPreferences;\nimport com.startapp.sdk.ads.nativead.StartAppNativeAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.wortise.ads.natives.GoogleNativeAd;", "import com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.wortise.ads.natives.GoogleNativeAd;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NativeAdView {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        View view;\n\n        LinearLayout nativeAdViewContainer;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n        MaxAd nativeAd;\n        LinearLayout appLovinDiscoveryMrecAd;\n        private AppLovinAdView appLovinAdView;\n\n        private GoogleNativeAd mGoogleNativeAd;\n        FrameLayout wortiseNativeAd;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private String appLovinDiscMrecZoneId = \"\";\n        private String wortiseNativeId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private String nativeAdStyle = \"\";\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        View view;\n\n        LinearLayout nativeAdViewContainer;\n\n        MediaView mediaView;\n        TemplateView admobNativeAd;\n        LinearLayout admobNativeBackground;\n\n        MediaView adManagerMediaView;\n        AdManagerTemplateView adManagerNativeAd;\n        LinearLayout adManagerNativeBackground;\n\n        com.facebook.ads.NativeAd fanNativeAd;\n        NativeAdLayout fanNativeAdLayout;\n\n        View startappNativeAd;\n        ImageView startappNativeImage;\n        ImageView startappNativeIcon;\n        TextView startappNativeTitle;\n        TextView startappNativeDescription;\n        Button startappNativeButton;\n        LinearLayout startappNativeBackground;\n\n        FrameLayout applovinNativeAd;\n        MaxNativeAdLoader nativeAdLoader;\n        MaxAd nativeAd;\n        LinearLayout appLovinDiscoveryMrecAd;\n        private AppLovinAdView appLovinAdView;\n\n        private GoogleNativeAd mGoogleNativeAd;\n        FrameLayout wortiseNativeAd;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobNativeId = \"\";\n        private String adManagerNativeId = \"\";\n        private String fanNativeId = \"\";\n        private String appLovinNativeId = \"\";\n        private String appLovinDiscMrecZoneId = \"\";\n        private String wortiseNativeId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        private String nativeAdStyle = \"\";\n        private int nativeBackgroundLight = R.color.color_native_background_light;\n        private int nativeBackgroundDark = R.color.color_native_background_dark;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadNativeAd();\n            return this;\n        }\n\n        public Builder setPadding(int left, int top, int right, int bottom) {\n            setNativeAdPadding(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n", "        public Builder setMargin(int left, int top, int right, int bottom) {\n            setNativeAdMargin(left, top, right, bottom);\n            return this;\n        }\n\n        public Builder setBackgroundResource(int drawableBackground) {\n            setNativeAdBackgroundResource(drawableBackground);\n            return this;\n        }\n\n        public Builder setView(View view) {\n            this.view = view;\n            return this;\n        }\n", "        public Builder setView(View view) {\n            this.view = view;\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n", "        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n", "        public Builder setAdMobNativeId(String adMobNativeId) {\n            this.adMobNativeId = adMobNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinDiscoveryMrecZoneId(String appLovinDiscMrecZoneId) {\n            this.appLovinDiscMrecZoneId = appLovinDiscMrecZoneId;\n            return this;\n        }\n\n        public Builder setWortiseNativeId(String wortiseNativeId) {\n            this.wortiseNativeId = wortiseNativeId;\n            return this;\n        }\n", "        public Builder setWortiseNativeId(String wortiseNativeId) {\n            this.wortiseNativeId = wortiseNativeId;\n            return this;\n        }\n\n        public Builder setAdManagerNativeId(String adManagerNativeId) {\n            this.adManagerNativeId = adManagerNativeId;\n            return this;\n        }\n\n        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n", "        public Builder setFanNativeId(String fanNativeId) {\n            this.fanNativeId = fanNativeId;\n            return this;\n        }\n\n        public Builder setAppLovinNativeId(String appLovinNativeId) {\n            this.appLovinNativeId = appLovinNativeId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n", "        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public Builder setNativeAdStyle(String nativeAdStyle) {\n            this.nativeAdStyle = nativeAdStyle;\n            return this;\n        }\n\n        public Builder setNativeAdBackgroundColor(int colorLight, int colorDark) {\n            this.nativeBackgroundLight = colorLight;\n            this.nativeBackgroundDark = colorDark;\n            return this;\n        }\n", "        public Builder setNativeAdBackgroundColor(int colorLight, int colorDark) {\n            this.nativeBackgroundLight = colorLight;\n            this.nativeBackgroundDark = colorDark;\n            return this;\n        }\n\n        public void loadNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                wortiseNativeAd = view.findViewById(R.id.wortise_native_ad_container);\n\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                wortiseNativeAd = view.findViewById(R.id.wortise_native_ad_container);\n\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            loadBackupNativeAd();\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n                                loadBackupNativeAd();\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeIcon.setImageBitmap(ad.getSecondaryImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                    loadBackupNativeAd();\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    loadBackupNativeAd();\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(activity, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    loadBackupNativeAd();\n                                    Log.d(TAG, \"Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    com.google.android.gms.ads.nativead.NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(nativeAd, adView);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n                        //do nothing\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public void loadBackupNativeAd() {\n\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n\n                nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n\n                admobNativeAd = view.findViewById(R.id.admob_native_ad_container);\n                mediaView = view.findViewById(R.id.media_view);\n                admobNativeBackground = view.findViewById(R.id.background);\n\n                adManagerNativeAd = view.findViewById(R.id.google_ad_manager_native_ad_container);\n                adManagerMediaView = view.findViewById(R.id.ad_manager_media_view);\n                adManagerNativeBackground = view.findViewById(R.id.ad_manager_background);\n\n                fanNativeAdLayout = view.findViewById(R.id.fan_native_ad_container);\n\n                startappNativeAd = view.findViewById(R.id.startapp_native_ad_container);\n                startappNativeImage = view.findViewById(R.id.startapp_native_image);\n                startappNativeIcon = view.findViewById(R.id.startapp_native_icon);\n                startappNativeTitle = view.findViewById(R.id.startapp_native_title);\n                startappNativeDescription = view.findViewById(R.id.startapp_native_description);\n                startappNativeButton = view.findViewById(R.id.startapp_native_button);\n                startappNativeButton.setOnClickListener(v -> startappNativeAd.performClick());\n                startappNativeBackground = view.findViewById(R.id.startapp_native_background);\n\n                applovinNativeAd = view.findViewById(R.id.applovin_native_ad_container);\n                appLovinDiscoveryMrecAd = view.findViewById(R.id.applovin_discovery_mrec_ad_container);\n\n                wortiseNativeAd = view.findViewById(R.id.wortise_native_ad_container);\n\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:", "                        if (admobNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adMobNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            admobNativeAd.setStyles(styles);\n                                            admobNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        admobNativeAd.setNativeAd(NativeAd);\n                                        admobNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            admobNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                        } else {\n                            Log.d(TAG, \"AdMob Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerNativeAd.getVisibility() != View.VISIBLE) {\n                            AdLoader adLoader = new AdLoader.Builder(activity, adManagerNativeId)\n                                    .forNativeAd(NativeAd -> {\n                                        if (darkTheme) {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundDark));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                        } else {\n                                            ColorDrawable colorDrawable = new ColorDrawable(ContextCompat.getColor(activity, nativeBackgroundLight));\n                                            NativeTemplateStyle styles = new NativeTemplateStyle.Builder().withMainBackgroundColor(colorDrawable).build();\n                                            adManagerNativeAd.setStyles(styles);\n                                            adManagerNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                        }\n                                        adManagerMediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n                                        adManagerNativeAd.setNativeAd(NativeAd);\n                                        adManagerNativeAd.setVisibility(View.VISIBLE);\n                                        nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    })\n                                    .withAdListener(new AdListener() {\n                                        @Override", "                                        public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                            adManagerNativeAd.setVisibility(View.GONE);\n                                            nativeAdViewContainer.setVisibility(View.GONE);\n                                        }\n                                    })\n                                    .build();\n                            adLoader.loadAd(Tools.getGoogleAdManagerRequest());\n                        } else {\n                            Log.d(TAG, \"Ad Manager Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case STARTAPP:", "                        if (startappNativeAd.getVisibility() != View.VISIBLE) {\n                            StartAppNativeAd startAppNativeAd = new StartAppNativeAd(activity);\n                            NativeAdPreferences nativePrefs = new NativeAdPreferences()\n                                    .setAdsNumber(3)\n                                    .setAutoBitmapDownload(true)\n                                    .setPrimaryImageSize(Constant.STARTAPP_IMAGE_MEDIUM);\n                            AdEventListener adListener = new AdEventListener() {\n                                @Override\n                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log", "                                public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad arg0) {\n                                    Log.d(TAG, \"StartApp Native Ad loaded\");\n                                    startappNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    //noinspection rawtypes\n                                    ArrayList ads = startAppNativeAd.getNativeAds(); // get NativeAds list\n\n                                    // Print all ads details to log\n                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);", "                                    for (Object ad : ads) {\n                                        Log.d(TAG, \"StartApp Native Ad \" + ad.toString());\n                                    }\n\n                                    NativeAdDetails ad = (NativeAdDetails) ads.get(0);\n                                    if (ad != null) {\n                                        startappNativeImage.setImageBitmap(ad.getImageBitmap());\n                                        startappNativeTitle.setText(ad.getTitle());\n                                        startappNativeDescription.setText(ad.getDescription());\n                                        startappNativeButton.setText(ad.isApp() ? \"Install\" : \"Open\");\n                                        ad.registerViewForInteraction(startappNativeAd);\n                                    }\n", "                                    if (darkTheme) {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        startappNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n\n                                }\n\n                                @Override\n                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                                public void onFailedToReceiveAd(com.startapp.sdk.adsbase.Ad arg0) {\n                                    startappNativeAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                    Log.d(TAG, \"StartApp Native Ad failed loaded\");\n                                }\n                            };\n                            //noinspection deprecation\n                            startAppNativeAd.loadAd(nativePrefs, adListener);\n                        } else {\n                            Log.d(TAG, \"StartApp Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanNativeAd = new com.facebook.ads.NativeAd(activity, fanNativeId);\n                        NativeAdListener nativeAdListener = new NativeAdListener() {\n                            @Override", "                            public void onMediaDownloaded(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onError(com.facebook.ads.Ad ad, AdError adError) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);", "                            public void onAdLoaded(com.facebook.ads.Ad ad) {\n                                // Race condition, load() called again before last ad was displayed\n                                fanNativeAdLayout.setVisibility(View.VISIBLE);\n                                nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                if (fanNativeAd != ad) {\n                                    return;\n                                }\n                                // Inflate Native Ad into Container\n                                //inflateAd(nativeAd);\n                                fanNativeAd.unregisterView();\n                                // Add the Ad view into the ad container.\n                                LayoutInflater inflater = LayoutInflater.from(activity);\n                                // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n                                LinearLayout nativeAdView;\n\n                                switch (nativeAdStyle) {\n                                    case Constant.STYLE_NEWS:\n                                    case Constant.STYLE_MEDIUM:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_news_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_small_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_VIDEO_LARGE:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_video_large_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    case Constant.STYLE_RADIO:\n                                    case Constant.STYLE_SMALL:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_radio_template_view, fanNativeAdLayout, false);\n                                        break;\n                                    default:\n                                        nativeAdView = (LinearLayout) inflater.inflate(R.layout.gnt_fan_medium_template_view, fanNativeAdLayout, false);\n                                        break;\n                                }\n                                fanNativeAdLayout.addView(nativeAdView);\n\n                                // Add the AdOptionsView\n                                LinearLayout adChoicesContainer = nativeAdView.findViewById(R.id.ad_choices_container);\n                                AdOptionsView adOptionsView = new AdOptionsView(activity, fanNativeAd, fanNativeAdLayout);\n                                adChoicesContainer.removeAllViews();\n                                adChoicesContainer.addView(adOptionsView, 0);\n\n                                // Create native UI using the ad metadata.\n                                TextView nativeAdTitle = nativeAdView.findViewById(R.id.native_ad_title);\n                                com.facebook.ads.MediaView nativeAdMedia = nativeAdView.findViewById(R.id.native_ad_media);\n                                com.facebook.ads.MediaView nativeAdIcon = nativeAdView.findViewById(R.id.native_ad_icon);\n                                TextView nativeAdSocialContext = nativeAdView.findViewById(R.id.native_ad_social_context);\n                                TextView nativeAdBody = nativeAdView.findViewById(R.id.native_ad_body);\n                                TextView sponsoredLabel = nativeAdView.findViewById(R.id.native_ad_sponsored_label);\n                                Button nativeAdCallToAction = nativeAdView.findViewById(R.id.native_ad_call_to_action);\n                                LinearLayout fanNativeBackground = nativeAdView.findViewById(R.id.ad_unit);\n", "                                if (darkTheme) {\n                                    nativeAdTitle.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    nativeAdSocialContext.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_primary_text_color));\n                                    sponsoredLabel.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    nativeAdBody.setTextColor(ContextCompat.getColor(activity, R.color.applovin_dark_secondary_text_color));\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                } else {\n                                    fanNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                }\n\n                                // Set the Text.\n                                nativeAdTitle.setText(fanNativeAd.getAdvertiserName());\n                                nativeAdBody.setText(fanNativeAd.getAdBodyText());\n                                nativeAdSocialContext.setText(fanNativeAd.getAdSocialContext());\n                                nativeAdCallToAction.setVisibility(fanNativeAd.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n                                nativeAdCallToAction.setText(fanNativeAd.getAdCallToAction());\n                                sponsoredLabel.setText(fanNativeAd.getSponsoredTranslation());\n\n                                // Create a list of clickable views\n                                List<View> clickableViews = new ArrayList<>();\n                                clickableViews.add(nativeAdTitle);\n                                clickableViews.add(sponsoredLabel);\n                                clickableViews.add(nativeAdIcon);\n                                clickableViews.add(nativeAdMedia);\n                                clickableViews.add(nativeAdBody);\n                                clickableViews.add(nativeAdSocialContext);\n                                clickableViews.add(nativeAdCallToAction);\n\n                                // Register the Title and CTA button to listen for clicks.\n                                fanNativeAd.registerViewForInteraction(nativeAdView, nativeAdIcon, nativeAdMedia, clickableViews);\n\n                            }\n\n                            @Override", "                            public void onAdClicked(com.facebook.ads.Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(com.facebook.ads.Ad ad) {\n\n                            }\n                        };\n\n                        com.facebook.ads.NativeAd.NativeLoadAdConfig loadAdConfig = fanNativeAd.buildLoadAdConfig().withAdListener(nativeAdListener).build();\n                        fanNativeAd.loadAd(loadAdConfig);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinNativeAd.getVisibility() != View.VISIBLE) {\n                            nativeAdLoader = new MaxNativeAdLoader(appLovinNativeId, activity);\n                            nativeAdLoader.setNativeAdListener(new MaxNativeAdListener() {\n                                @Override\n                                public void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad) {\n                                    // Clean up any pre-existing native ad to prevent memory leaks.\n                                    if (nativeAd != null) {\n                                        nativeAdLoader.destroy(nativeAd);\n                                    }\n\n                                    // Save ad for cleanup.\n                                    nativeAd = ad;\n\n                                    // Add ad view to view.\n                                    applovinNativeAd.removeAllViews();\n                                    applovinNativeAd.addView(nativeAdView);\n                                    applovinNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n\n                                    LinearLayout applovinNativeBackground = nativeAdView.findViewById(R.id.applovin_native_background);", "                                    if (darkTheme) {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundDark);\n                                    } else {\n                                        applovinNativeBackground.setBackgroundResource(nativeBackgroundLight);\n                                    }\n                                }\n\n                                @Override\n                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override", "                                public void onNativeAdLoadFailed(final String adUnitId, final MaxError error) {\n                                    // We recommend retrying with exponentially higher delays up to a maximum delay\n                                }\n\n                                @Override\n                                public void onNativeAdClicked(final MaxAd ad) {\n                                    // Optional click callback\n                                }\n                            });\n                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                            if (darkTheme) {\n                                nativeAdLoader.loadAd(createNativeAdViewDark(nativeAdStyle));\n                            } else {\n                                nativeAdLoader.loadAd(createNativeAdView(nativeAdStyle));\n                            }\n                        } else {\n                            Log.d(TAG, \"AppLovin Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:", "                        if (appLovinDiscoveryMrecAd.getVisibility() != View.VISIBLE) {\n                            AdRequest.Builder builder = new AdRequest.Builder();\n                            Bundle bannerExtras = new Bundle();\n                            bannerExtras.putString(\"zone_id\", appLovinDiscMrecZoneId);\n                            builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                            AppLovinAdSize adSize = AppLovinAdSize.MREC;\n                            this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                            this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                                @Override\n                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override", "                                public void adReceived(AppLovinAd ad) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void failedToReceiveAd(int errorCode) {\n                                    appLovinDiscoveryMrecAd.setVisibility(View.GONE);\n                                    nativeAdViewContainer.setVisibility(View.GONE);\n                                }\n                            });\n                            appLovinDiscoveryMrecAd.addView(this.appLovinAdView);\n                            int padding = activity.getResources().getDimensionPixelOffset(R.dimen.gnt_default_margin);\n                            appLovinDiscoveryMrecAd.setPadding(0, padding, 0, padding);\n                            this.appLovinAdView.loadNextAd();\n                        } else {\n                            Log.d(TAG, \"AppLovin Discovery Mrec Ad has been loaded\");\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseNativeAd.getVisibility() != View.VISIBLE) {\n                            mGoogleNativeAd = new GoogleNativeAd(activity, wortiseNativeId, new GoogleNativeAd.Listener() {\n                                @Override\n                                public void onNativeClicked(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @Override\n                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override", "                                public void onNativeFailed(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.wortise.ads.AdError adError) {\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad failed loaded\");\n                                }\n\n                                @Override\n                                public void onNativeImpression(@NonNull GoogleNativeAd googleNativeAd) {\n\n                                }\n\n                                @SuppressLint(\"InflateParams\")\n                                @Override", "                                public void onNativeLoaded(@NonNull GoogleNativeAd googleNativeAd, @NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {\n                                    com.google.android.gms.ads.nativead.NativeAdView adView;\n                                    switch (nativeAdStyle) {\n                                        case Constant.STYLE_NEWS:\n                                        case Constant.STYLE_MEDIUM:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_news_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_SMALL:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_small_template_view, null);\n                                            break;\n                                        case Constant.STYLE_VIDEO_LARGE:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_video_large_template_view, null);\n                                            break;\n                                        case Constant.STYLE_RADIO:\n                                        case Constant.STYLE_SMALL:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_radio_template_view, null);\n                                            break;\n                                        default:\n                                            adView = (com.google.android.gms.ads.nativead.NativeAdView) activity.getLayoutInflater().inflate(R.layout.gnt_wortise_medium_template_view, null);\n                                            break;\n                                    }\n                                    populateNativeAdView(nativeAd, adView);\n                                    wortiseNativeAd.removeAllViews();\n                                    wortiseNativeAd.addView(adView);\n                                    wortiseNativeAd.setVisibility(View.VISIBLE);\n                                    nativeAdViewContainer.setVisibility(View.VISIBLE);\n                                    Log.d(TAG, \"[Backup] Wortise Native Ad loaded\");\n                                }\n                            });\n                            mGoogleNativeAd.load();\n                        } else {\n                            Log.d(TAG, \"[Backup] Wortise Native Ad has been loaded\");\n                        }\n                        break;\n\n                    case UNITY:\n                    case NONE:\n                        nativeAdViewContainer.setVisibility(View.GONE);\n                        break;\n\n                }\n\n            }\n\n        }\n", "        public void setNativeAdPadding(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setPadding(left, top, right, bottom);\n            if (darkTheme) {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundDark));\n            } else {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundLight));\n            }\n        }\n\n        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n", "        public void setNativeAdMargin(int left, int top, int right, int bottom) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            setMargins(nativeAdViewContainer, left, top, right, bottom);\n        }\n\n        public void setMargins(View view, int left, int top, int right, int bottom) {\n            if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n                ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n                p.setMargins(left, top, right, bottom);\n                view.requestLayout();\n            }\n        }\n", "        public void setNativeAdBackgroundResource(int drawableBackground) {\n            nativeAdViewContainer = view.findViewById(R.id.native_ad_view_container);\n            nativeAdViewContainer.setBackgroundResource(drawableBackground);\n        }\n\n        public MaxNativeAdView createNativeAdView(String nativeAdStyle) {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n        }\n", "        public MaxNativeAdView createNativeAdViewDark(String nativeAdStyle) {\n            MaxNativeAdViewBinder binder;\n            switch (nativeAdStyle) {\n                case Constant.STYLE_NEWS:\n                case Constant.STYLE_MEDIUM:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_news_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_RADIO:\n                case Constant.STYLE_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_radio_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_LARGE:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_large_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                case Constant.STYLE_VIDEO_SMALL:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_video_small_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n                default:\n                    binder = new MaxNativeAdViewBinder.Builder(R.layout.gnt_applovin_dark_medium_template_view)\n                            .setTitleTextViewId(R.id.title_text_view)\n                            .setBodyTextViewId(R.id.body_text_view)\n                            .setAdvertiserTextViewId(R.id.advertiser_textView)\n                            .setIconImageViewId(R.id.icon_image_view)\n                            .setMediaContentViewGroupId(R.id.media_view_container)\n                            .setOptionsContentViewGroupId(R.id.ad_options_view)\n                            .setCallToActionButtonId(R.id.cta_button)\n                            .build();\n                    break;\n            }\n            return new MaxNativeAdView(binder, activity);\n        }\n\n        @SuppressWarnings(\"ConstantConditions\")", "        public void populateNativeAdView(com.google.android.gms.ads.nativead.NativeAd nativeAd, com.google.android.gms.ads.nativead.NativeAdView nativeAdView) {\n\n            if (darkTheme) {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundDark));\n                nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundDark);\n            } else {\n                nativeAdViewContainer.setBackgroundColor(ContextCompat.getColor(activity, nativeBackgroundLight));\n                nativeAdView.findViewById(R.id.background).setBackgroundResource(nativeBackgroundLight);\n            }\n\n            nativeAdView.setMediaView(nativeAdView.findViewById(R.id.media_view));\n            nativeAdView.setHeadlineView(nativeAdView.findViewById(R.id.primary));\n            nativeAdView.setBodyView(nativeAdView.findViewById(R.id.body));\n            nativeAdView.setCallToActionView(nativeAdView.findViewById(R.id.cta));\n            nativeAdView.setIconView(nativeAdView.findViewById(R.id.icon));\n\n            ((TextView) nativeAdView.getHeadlineView()).setText(nativeAd.getHeadline());\n            nativeAdView.getMediaView().setMediaContent(nativeAd.getMediaContent());\n", "            if (nativeAd.getBody() == null) {\n                nativeAdView.getBodyView().setVisibility(View.INVISIBLE);\n            } else {\n                nativeAdView.getBodyView().setVisibility(View.VISIBLE);\n                ((TextView) nativeAdView.getBodyView()).setText(nativeAd.getBody());\n            }\n\n            if (nativeAd.getCallToAction() == null) {\n                nativeAdView.getCallToActionView().setVisibility(View.INVISIBLE);\n            } else {\n                nativeAdView.getCallToActionView().setVisibility(View.VISIBLE);\n                ((Button) nativeAdView.getCallToActionView()).setText(nativeAd.getCallToAction());\n            }\n", "            if (nativeAd.getIcon() == null) {\n                nativeAdView.getIconView().setVisibility(View.GONE);\n            } else {\n                ((ImageView) nativeAdView.getIconView()).setImageDrawable(nativeAd.getIcon().getDrawable());\n                nativeAdView.getIconView().setVisibility(View.VISIBLE);\n            }\n\n            nativeAdView.setNativeAd(nativeAd);\n        }\n\n    }\n\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/RewardedAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;", "import static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n", "import androidx.annotation.Nullable;\n\nimport com.applovin.adview.AppLovinIncentivizedInterstitial;\nimport com.applovin.adview.AppLovinInterstitialAd;\nimport com.applovin.adview.AppLovinInterstitialAdDialog;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.MaxReward;\nimport com.applovin.mediation.MaxRewardedAdListener;\nimport com.applovin.mediation.ads.MaxRewardedAd;", "import com.applovin.mediation.MaxRewardedAdListener;\nimport com.applovin.mediation.ads.MaxRewardedAd;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdRewardListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinAdVideoPlaybackListener;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.facebook.ads.Ad;", "import com.applovin.sdk.AppLovinSdk;\nimport com.facebook.ads.Ad;\nimport com.facebook.ads.AdError;\nimport com.facebook.ads.RewardedVideoAdListener;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.rewarded.RewardedAdLoadCallback;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;", "import com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;\nimport com.ironsource.mediationsdk.logger.IronSourceError;\nimport com.ironsource.mediationsdk.model.Placement;\nimport com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoListener;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventInterstitial;\nimport com.solodroid.ads.sdk.util.OnRewardedAdCompleteListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdDismissedListener;\nimport com.solodroid.ads.sdk.util.OnRewardedAdErrorListener;\nimport com.solodroid.ads.sdk.util.Tools;", "import com.solodroid.ads.sdk.util.OnRewardedAdErrorListener;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.adsbase.StartAppAd;\nimport com.startapp.sdk.adsbase.adlisteners.AdEventListener;\nimport com.unity3d.ads.IUnityAdsLoadListener;\nimport com.unity3d.ads.IUnityAdsShowListener;\nimport com.unity3d.ads.UnityAds;\nimport com.unity3d.ads.UnityAdsShowOptions;\nimport com.wortise.ads.rewarded.models.Reward;\n", "import com.wortise.ads.rewarded.models.Reward;\n\nimport java.util.Map;\n\npublic class RewardedAd {\n\n    @SuppressWarnings(\"deprecation\")\n    public static class Builder {\n\n        private static final String TAG = \"SoloRewarded\";\n        private final Activity activity;\n        private com.google.android.gms.ads.rewarded.RewardedAd adMobRewardedAd;\n        private com.google.android.gms.ads.rewarded.RewardedAd adManagerRewardedAd;\n        private com.facebook.ads.RewardedVideoAd fanRewardedVideoAd;\n        private StartAppAd startAppAd;\n        private MaxRewardedAd applovinMaxRewardedAd;", "        public AppLovinInterstitialAdDialog appLovinInterstitialAdDialog;\n        public AppLovinAd appLovinAd;\n        private com.wortise.ads.rewarded.RewardedAd wortiseRewardedAd;\n        private String adStatus = \"\";\n        private String mainAds = \"\";\n        private String backupAds = \"\";\n        private String adMobRewardedId = \"\";\n        private String adManagerRewardedId = \"\";\n        private String fanRewardedId = \"\";\n        private String unityRewardedId = \"\";\n        private String applovinMaxRewardedId = \"\";\n        private String applovinDiscRewardedZoneId = \"\";\n        private String ironSourceRewardedId = \"\";\n        private String wortiseRewardedId = \"\";\n        private int placementStatus = 1;\n        private boolean legacyGDPR = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss) {\n            loadRewardedAd(onComplete, onDismiss);\n            return this;\n        }\n\n        public Builder show(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss, OnRewardedAdErrorListener onError) {\n            showRewardedAd(onComplete, onDismiss, onError);\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setMainAds(String mainAds) {\n            this.mainAds = mainAds;\n            return this;\n        }\n\n        public Builder setBackupAds(String backupAds) {\n            this.backupAds = backupAds;\n            return this;\n        }\n", "        public Builder setBackupAds(String backupAds) {\n            this.backupAds = backupAds;\n            return this;\n        }\n\n        public Builder setAdMobRewardedId(String adMobRewardedId) {\n            this.adMobRewardedId = adMobRewardedId;\n            return this;\n        }\n\n        public Builder setAdManagerRewardedId(String adManagerRewardedId) {\n            this.adManagerRewardedId = adManagerRewardedId;\n            return this;\n        }\n", "        public Builder setAdManagerRewardedId(String adManagerRewardedId) {\n            this.adManagerRewardedId = adManagerRewardedId;\n            return this;\n        }\n\n        public Builder setFanRewardedId(String fanRewardedId) {\n            this.fanRewardedId = fanRewardedId;\n            return this;\n        }\n\n        public Builder setUnityRewardedId(String unityRewardedId) {\n            this.unityRewardedId = unityRewardedId;\n            return this;\n        }\n", "        public Builder setUnityRewardedId(String unityRewardedId) {\n            this.unityRewardedId = unityRewardedId;\n            return this;\n        }\n\n        public Builder setApplovinMaxRewardedId(String applovinMaxRewardedId) {\n            this.applovinMaxRewardedId = applovinMaxRewardedId;\n            return this;\n        }\n\n        public Builder setApplovinDiscRewardedZoneId(String applovinDiscRewardedZoneId) {\n            this.applovinDiscRewardedZoneId = applovinDiscRewardedZoneId;\n            return this;\n        }\n", "        public Builder setApplovinDiscRewardedZoneId(String applovinDiscRewardedZoneId) {\n            this.applovinDiscRewardedZoneId = applovinDiscRewardedZoneId;\n            return this;\n        }\n\n        public Builder setIronSourceRewardedId(String ironSourceRewardedId) {\n            this.ironSourceRewardedId = ironSourceRewardedId;\n            return this;\n        }\n\n        public Builder setWortiseRewardedId(String wortiseRewardedId) {\n            this.wortiseRewardedId = wortiseRewardedId;\n            return this;\n        }\n", "        public Builder setWortiseRewardedId(String wortiseRewardedId) {\n            this.wortiseRewardedId = wortiseRewardedId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n", "        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public void loadRewardedAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adMobRewardedId, Tools.getAdRequest(activity, legacyGDPR), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.rewarded.RewardedAd ad) {\n                                adMobRewardedAd = ad;\n                                adMobRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adMobRewardedAd = null;\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                    }\n\n                                    @Override", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.rewarded.RewardedAd ad) {\n                                adManagerRewardedAd = ad;\n                                adManagerRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adManagerRewardedAd = null;\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                    }\n\n                                    @Override", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adManagerRewardedAd = null;\n                                    }\n                                });\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                                    public void onRewardedVideoCompleted() {\n                                        onComplete.onRewardedAdComplete();\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                                    }\n\n                                    @Override\n                                    public void onRewardedVideoClosed() {\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad closed\");\n                                    }\n\n                                    @Override", "                                    public void onError(Ad ad, AdError adError) {\n                                        loadRewardedBackupAd(onComplete, onDismiss);\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + fanRewardedId + \", try to load backup ad: \" + backupAds);\n                                    }\n\n                                    @Override\n                                    public void onAdLoaded(Ad ad) {\n                                        Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                                    }\n\n                                    @Override", "                                    public void onAdClicked(Ad ad) {\n\n                                    }\n\n                                    @Override\n                                    public void onLoggingImpression(Ad ad) {\n\n                                    }\n                                })\n                                .build());\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.setVideoListener(() -> {\n                            onComplete.onRewardedAdComplete();\n                            Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                        });\n                        startAppAd.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad ad) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override", "                            public void onUnityAdsAdLoaded(String placementId) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.loadAd();\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUserRewarded(MaxAd maxAd, MaxReward maxReward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onRewardedVideoStarted(MaxAd maxAd) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded video started\");\n                            }\n\n                            @Override", "                            public void onRewardedVideoCompleted(MaxAd maxAd) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded video complete\");\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd maxAd) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd maxAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad hidden\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String s, MaxError maxError) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", applovinDiscRewardedZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        appLovinInterstitialAdDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {\n                            @Override", "                            public void adDisplayed(AppLovinAd appLovinAd) {\n\n                            }\n\n                            @Override\n                            public void adHidden(AppLovinAd appLovinAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"ad hidden\");\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override", "                            public void onAdAvailable(AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad is ready\");\n                            }\n\n                            @Override\n                            public void onAdUnavailable() {\n\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + ironSourceError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdRewarded(Placement placement, AdInfo adInfo) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                loadRewardedAd(onComplete, onDismiss);\n                            }\n                        });\n                        break;\n\n                    case WORTISE:\n                        wortiseRewardedAd = new com.wortise.ads.rewarded.RewardedAd(activity, wortiseRewardedId);\n                        wortiseRewardedAd.setListener(new com.wortise.ads.rewarded.RewardedAd.Listener() {\n                            @Override\n                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override", "                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override\n                            public void onRewardedCompleted(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull Reward reward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onRewardedDismissed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad dismissed\");\n                            }\n\n                            @Override\n                            public void onRewardedFailed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull com.wortise.ads.AdError adError) {\n                                loadRewardedBackupAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + adError + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onRewardedLoaded(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n", "        public void loadRewardedBackupAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adMobRewardedId, Tools.getAdRequest(activity, legacyGDPR), new RewardedAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.rewarded.RewardedAd ad) {\n                                adMobRewardedAd = ad;\n                                adMobRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override", "                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adMobRewardedAd = null;\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                    }\n\n                                    @Override\n                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adMobRewardedAd = null;\n                                    }\n                                });\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adMobRewardedAd = null;\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        com.google.android.gms.ads.rewarded.RewardedAd.load(activity, adManagerRewardedId, Tools.getGoogleAdManagerRequest(), new RewardedAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.rewarded.RewardedAd ad) {\n                                adManagerRewardedAd = ad;\n                                adManagerRewardedAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                                    @Override\n                                    public void onAdDismissedFullScreenContent() {\n                                        super.onAdDismissedFullScreenContent();\n                                        adManagerRewardedAd = null;\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                    }\n\n                                    @Override", "                                    public void onAdFailedToShowFullScreenContent(@NonNull com.google.android.gms.ads.AdError adError) {\n                                        super.onAdFailedToShowFullScreenContent(adError);\n                                        adManagerRewardedAd = null;\n                                    }\n                                });\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                Log.d(TAG, loadAdError.toString());\n                                adManagerRewardedAd = null;\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"failed to load rewarded ad: \" + loadAdError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanRewardedVideoAd = new com.facebook.ads.RewardedVideoAd(activity, fanRewardedId);\n                        fanRewardedVideoAd.loadAd(fanRewardedVideoAd.buildLoadAdConfig()\n                                .withAdListener(new RewardedVideoAdListener() {\n                                    @Override", "                                    public void onRewardedVideoCompleted() {\n                                        onComplete.onRewardedAdComplete();\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                                    }\n\n                                    @Override\n                                    public void onRewardedVideoClosed() {\n                                        loadRewardedAd(onComplete, onDismiss);\n                                        onDismiss.onRewardedAdDismissed();\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad closed\");\n                                    }\n\n                                    @Override", "                                    public void onError(Ad ad, AdError adError) {\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + fanRewardedId + \", try to load backup ad: \" + backupAds);\n                                    }\n\n                                    @Override\n                                    public void onAdLoaded(Ad ad) {\n                                        Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                                    }\n\n                                    @Override\n                                    public void onAdClicked(Ad ad) {\n\n                                    }\n\n                                    @Override", "                                    public void onAdClicked(Ad ad) {\n\n                                    }\n\n                                    @Override\n                                    public void onLoggingImpression(Ad ad) {\n\n                                    }\n                                })\n                                .build());\n                        break;\n\n                    case STARTAPP:\n                        startAppAd = new StartAppAd(activity);\n                        startAppAd.setVideoListener(() -> {\n                            onComplete.onRewardedAdComplete();\n                            Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                        });\n                        startAppAd.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n                            @Override", "                            public void onReceiveAd(@NonNull com.startapp.sdk.adsbase.Ad ad) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(@Nullable com.startapp.sdk.adsbase.Ad ad) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad, try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        break;\n\n                    case UNITY:\n                        UnityAds.load(unityRewardedId, new IUnityAdsLoadListener() {\n                            @Override", "                            public void onUnityAdsAdLoaded(String placementId) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override\n                            public void onUnityAdsFailedToLoad(String placementId, UnityAds.UnityAdsLoadError error, String message) {\n                                Log.e(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad failed to load ad for \" + placementId + \" with error: [\" + error + \"] \" + message);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        applovinMaxRewardedAd = MaxRewardedAd.getInstance(applovinMaxRewardedId, activity);\n                        applovinMaxRewardedAd.setListener(new MaxRewardedAdListener() {\n                            @Override", "                            public void onUserRewarded(MaxAd maxAd, MaxReward maxReward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"user earn rewards\");\n                            }\n\n                            @Override\n                            public void onRewardedVideoStarted(MaxAd maxAd) {\n\n                            }\n\n                            @Override", "                            public void onRewardedVideoCompleted(MaxAd maxAd) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded video complete\");\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd maxAd) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd maxAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup]\" + \"rewarded ad hidden\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd maxAd) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String s, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        applovinMaxRewardedAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", applovinDiscRewardedZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + maxError.getMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        applovinMaxRewardedAd.loadAd();\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle interstitialExtras = new Bundle();\n                        interstitialExtras.putString(\"zone_id\", applovinDiscRewardedZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventInterstitial.class, interstitialExtras);\n                        AppLovinSdk.getInstance(activity).getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinAd = ad;\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + errorCode + \", try to load backup ad: \" + backupAds);\n                            }\n                        });\n                        appLovinInterstitialAdDialog = AppLovinInterstitialAd.create(AppLovinSdk.getInstance(activity), activity);\n                        appLovinInterstitialAdDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {\n                            @Override", "                            public void adDisplayed(AppLovinAd appLovinAd) {\n\n                            }\n\n                            @Override\n                            public void adHidden(AppLovinAd appLovinAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + mainAds + \"] \" + \"ad hidden\");\n                            }\n                        });\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        IronSource.setLevelPlayRewardedVideoListener(new LevelPlayRewardedVideoListener() {\n                            @Override", "                            public void onAdAvailable(AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad is ready\");\n                            }\n\n                            @Override\n                            public void onAdUnavailable() {\n\n                            }\n\n                            @Override\n                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdOpened(AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdShowFailed(IronSourceError ironSourceError, AdInfo adInfo) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + ironSourceError.getErrorMessage() + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override\n                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override", "                            public void onAdClicked(Placement placement, AdInfo adInfo) {\n\n                            }\n\n                            @Override\n                            public void onAdRewarded(Placement placement, AdInfo adInfo) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onAdClosed(AdInfo adInfo) {\n                                loadRewardedAd(onComplete, onDismiss);\n                            }\n                        });\n                        break;\n\n                    case WORTISE:\n                        wortiseRewardedAd = new com.wortise.ads.rewarded.RewardedAd(activity, wortiseRewardedId);\n                        wortiseRewardedAd.setListener(new com.wortise.ads.rewarded.RewardedAd.Listener() {\n                            @Override\n                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override", "                            public void onRewardedClicked(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n\n                            @Override\n                            public void onRewardedCompleted(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull Reward reward) {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad complete\");\n                            }\n\n                            @Override", "                            public void onRewardedDismissed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                loadRewardedAd(onComplete, onDismiss);\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad dismissed\");\n                            }\n\n                            @Override\n                            public void onRewardedFailed(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd, @NonNull com.wortise.ads.AdError adError) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"failed to load rewarded ad: \" + adError + \", try to load backup ad: \" + backupAds);\n                            }\n\n                            @Override", "                            public void onRewardedLoaded(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n                                Log.d(TAG, \"[\" + backupAds + \"] [backup] \" + \"rewarded ad loaded\");\n                            }\n\n                            @Override\n                            public void onRewardedShown(@NonNull com.wortise.ads.rewarded.RewardedAd rewardedAd) {\n\n                            }\n                        });\n                        wortiseRewardedAd.loadAd();\n                        break;\n                }\n            }\n        }\n", "        public void showRewardedAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobRewardedAd != null) {\n                            adMobRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerRewardedAd != null) {\n                            adManagerRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null && fanRewardedVideoAd.isAdLoaded()) {\n                            fanRewardedVideoAd.show();\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case STARTAPP:\n                        if (startAppAd != null) {\n                            startAppAd.showAd();\n//                            startAppAd.showAd(new AdDisplayListener() {\n//                                @Override", "                        if (startAppAd != null) {\n                            startAppAd.showAd();\n//                            startAppAd.showAd(new AdDisplayListener() {\n//                                @Override\n//                                public void adHidden(com.startapp.sdk.adsbase.Ad ad) {\n//                                    Log.d(TAG, \"[\" + mainAds + \"] \" + \"rewarded ad dismissed\");\n//                                    loadRewardedAd();\n//                                }\n//\n//                                @Override\n//                                public void adDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override", "//                                public void adDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override\n//                                public void adClicked(com.startapp.sdk.adsbase.Ad ad) {\n//\n//                                }\n//\n//                                @Override\n//                                public void adNotDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//                                    loadRewardedBackupAd();\n//                                }\n//                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "//                                public void adNotDisplayed(com.startapp.sdk.adsbase.Ad ad) {\n//                                    loadRewardedBackupAd();\n//                                }\n//                            });\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                showRewardedBackupAd(onComplete, onDismiss, onError);\n                            }\n\n                            @Override\n                            public void onUnityAdsShowStart(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override", "                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowComplete(String placementId, UnityAds.UnityAdsShowCompletionState state) {\n                                onComplete.onRewardedAdComplete();\n                                loadRewardedAd(onComplete, onDismiss);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinMaxRewardedAd != null && applovinMaxRewardedAd.isReady()) {\n                            applovinMaxRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            showRewardedBackupAd(onComplete, onDismiss, onError);\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "        public void showRewardedBackupAd(OnRewardedAdCompleteListener onComplete, OnRewardedAdDismissedListener onDismiss, OnRewardedAdErrorListener onError) {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAds) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        if (adMobRewardedAd != null) {\n                            adMobRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (adManagerRewardedAd != null) {\n                            adManagerRewardedAd.show(activity, rewardItem -> {\n                                onComplete.onRewardedAdComplete();\n                                Log.d(TAG, \"The user earned the reward.\");\n                            });\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null && fanRewardedVideoAd.isAdLoaded()) {\n                            fanRewardedVideoAd.show();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case STARTAPP:\n                        if (startAppAd != null) {\n                            startAppAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override", "                        if (startAppAd != null) {\n                            startAppAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case UNITY:\n                        UnityAds.show(activity, unityRewardedId, new UnityAdsShowOptions(), new IUnityAdsShowListener() {\n                            @Override\n                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                onError.onRewardedAdError();\n                            }\n\n                            @Override", "                            public void onUnityAdsShowFailure(String placementId, UnityAds.UnityAdsShowError error, String message) {\n                                onError.onRewardedAdError();\n                            }\n\n                            @Override\n                            public void onUnityAdsShowStart(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override", "                            public void onUnityAdsShowClick(String placementId) {\n\n                            }\n\n                            @Override\n                            public void onUnityAdsShowComplete(String placementId, UnityAds.UnityAdsShowCompletionState state) {\n                                onComplete.onRewardedAdComplete();\n                                loadRewardedAd(onComplete, onDismiss);\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:", "                        if (applovinMaxRewardedAd != null && applovinMaxRewardedAd.isReady()) {\n                            applovinMaxRewardedAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:", "                        if (appLovinInterstitialAdDialog != null) {\n                            appLovinInterstitialAdDialog.showAndRender(appLovinAd);\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (IronSource.isRewardedVideoAvailable()) {\n                            IronSource.showRewardedVideo(ironSourceRewardedId);\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    case WORTISE:\n                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "                        if (wortiseRewardedAd != null && wortiseRewardedAd.isAvailable()) {\n                            wortiseRewardedAd.showAd();\n                        } else {\n                            onError.onRewardedAdError();\n                        }\n                        break;\n\n                    default:\n                        onError.onRewardedAdError();\n                        break;\n                }\n            }\n\n        }\n", "        public void destroyRewardedAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (mainAds) {\n                    case FAN:\n                    case FACEBOOK:\n                        if (fanRewardedVideoAd != null) {\n                            fanRewardedVideoAd.destroy();\n                            fanRewardedVideoAd = null;\n                        }\n                        break;\n                }\n\n                switch (backupAds) {\n                    case FAN:\n                    case FACEBOOK:", "                        if (fanRewardedVideoAd != null) {\n                            fanRewardedVideoAd.destroy();\n                            fanRewardedVideoAd = null;\n                        }\n                        break;\n                }\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AppOpenAdAppLovin.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdListener;", "import com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdListener;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.ads.MaxAppOpenAd;\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n\nimport java.util.Date;\n\npublic class AppOpenAdAppLovin {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private MaxAppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;", "public class AppOpenAdAppLovin {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private MaxAppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;\n    public boolean isShowingAd = false;\n    private long loadTime = 0;\n\n    public AppOpenAdAppLovin() {\n    }\n", "    public void loadAd(Context context, String maxAppOpenAdUnitId) {\n        if (isLoadingAd || isAdAvailable()) {\n            return;\n        }\n        isLoadingAd = true;\n        appOpenAd = new MaxAppOpenAd(maxAppOpenAdUnitId, context);\n        appOpenAd.loadAd();\n        appOpenAd.setListener(maxAdListener);\n    }\n\n    public boolean wasLoadTimeLessThanNHoursAgo(long numHours) {\n        long dateDifference = (new Date()).getTime() - loadTime;\n        long numMilliSecondsPerHour = 3600000;\n        return (dateDifference < (numMilliSecondsPerHour * numHours));\n    }\n", "    public boolean wasLoadTimeLessThanNHoursAgo(long numHours) {\n        long dateDifference = (new Date()).getTime() - loadTime;\n        long numMilliSecondsPerHour = 3600000;\n        return (dateDifference < (numMilliSecondsPerHour * numHours));\n    }\n\n    public boolean isAdAvailable() {\n        return appOpenAd != null && wasLoadTimeLessThanNHoursAgo(4);\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n", "    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n", "        if (!isAdAvailable()) {\n            Log.d(LOG_TAG, \"The app open ad is not ready yet.\");\n            onShowAdCompleteListener.onShowAdComplete();\n            loadAd(activity, appOpenAdUnitId);\n            return;\n        }\n\n        Log.d(LOG_TAG, \"Will show ad.\");\n        appOpenAd.setListener(new MaxAdListener() {\n            @Override\n            public void onAdLoaded(MaxAd ad) {\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override", "            public void onAdLoaded(MaxAd ad) {\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override\n            public void onAdDisplayed(MaxAd ad) {\n            }\n\n            @Override", "            public void onAdHidden(MaxAd ad) {\n                appOpenAd = null;\n                isShowingAd = false;\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n                Log.d(LOG_TAG, \"onAdDismissedFullScreenContent.\");\n            }\n\n            @Override\n            public void onAdClicked(MaxAd ad) {\n            }\n\n            @Override", "            public void onAdClicked(MaxAd ad) {\n            }\n\n            @Override\n            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                isLoadingAd = false;\n                appOpenAd = null;\n                isShowingAd = false;\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n\n            @Override", "            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                isLoadingAd = false;\n                appOpenAd = null;\n                isShowingAd = false;\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n        });\n\n        isShowingAd = true;\n        appOpenAd.showAd();\n    }\n\n    MaxAdListener maxAdListener = new MaxAdListener() {\n        @Override", "        public void onAdLoaded(MaxAd ad) {\n            isLoadingAd = false;\n            loadTime = (new Date()).getTime();\n        }\n\n        @Override\n        public void onAdDisplayed(MaxAd ad) {\n        }\n\n        @Override\n        public void onAdHidden(MaxAd ad) {\n            appOpenAd.loadAd();\n        }\n\n        @Override", "        public void onAdHidden(MaxAd ad) {\n            appOpenAd.loadAd();\n        }\n\n        @Override\n        public void onAdClicked(MaxAd ad) {\n        }\n\n        @Override\n        public void onAdLoadFailed(String adUnitId, MaxError error) {\n            isLoadingAd = false;\n        }\n\n        @Override", "        public void onAdLoadFailed(String adUnitId, MaxError error) {\n            isLoadingAd = false;\n        }\n\n        @Override\n        public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n            isLoadingAd = false;\n            appOpenAd.loadAd();\n        }\n    };\n\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AppOpenAdMob.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.ads.AdError;\nimport com.google.android.gms.ads.AdRequest;", "import com.google.android.gms.ads.AdError;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.appopen.AppOpenAd;\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n\nimport java.util.Date;\n\npublic class AppOpenAdMob {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private AppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;", "\npublic class AppOpenAdMob {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private AppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;\n    public boolean isShowingAd = false;\n    private long loadTime = 0;\n\n    public AppOpenAdMob() {\n    }\n", "    public void loadAd(Context context, String adMobAppOpenAdUnitId) {\n        if (isLoadingAd || isAdAvailable()) {\n            return;\n        }\n\n        isLoadingAd = true;\n        AdRequest request = new AdRequest.Builder().build();\n        AppOpenAd.load(context, adMobAppOpenAdUnitId, request, new AppOpenAd.AppOpenAdLoadCallback() {\n                    @Override\n                    public void onAdLoaded(@NonNull AppOpenAd ad) {\n                        appOpenAd = ad;\n                        isLoadingAd = false;\n                        loadTime = (new Date()).getTime();\n\n                        Log.d(LOG_TAG, \"onAdLoaded.\");\n                    }\n\n                    @Override", "                    public void onAdLoaded(@NonNull AppOpenAd ad) {\n                        appOpenAd = ad;\n                        isLoadingAd = false;\n                        loadTime = (new Date()).getTime();\n\n                        Log.d(LOG_TAG, \"onAdLoaded.\");\n                    }\n\n                    @Override\n                    public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                        isLoadingAd = false;\n                        Log.d(LOG_TAG, \"onAdFailedToLoad: \" + loadAdError.getMessage());\n                    }\n                });\n    }\n", "                    public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                        isLoadingAd = false;\n                        Log.d(LOG_TAG, \"onAdFailedToLoad: \" + loadAdError.getMessage());\n                    }\n                });\n    }\n\n    public boolean wasLoadTimeLessThanNHoursAgo(long numHours) {\n        long dateDifference = (new Date()).getTime() - loadTime;\n        long numMilliSecondsPerHour = 3600000;\n        return (dateDifference < (numMilliSecondsPerHour * numHours));\n    }\n", "    public boolean isAdAvailable() {\n        return appOpenAd != null && wasLoadTimeLessThanNHoursAgo(4);\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n", "    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n\n        if (!isAdAvailable()) {\n            Log.d(LOG_TAG, \"The app open ad is not ready yet.\");\n            onShowAdCompleteListener.onShowAdComplete();\n            loadAd(activity, appOpenAdUnitId);\n            return;\n        }\n\n        Log.d(LOG_TAG, \"Will show ad.\");\n\n        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n            @Override", "            public void onAdDismissedFullScreenContent() {\n                appOpenAd = null;\n                isShowingAd = false;\n\n                Log.d(LOG_TAG, \"onAdDismissedFullScreenContent.\");\n\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n\n            @Override", "            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                appOpenAd = null;\n                isShowingAd = false;\n                Log.d(LOG_TAG, \"onAdFailedToShowFullScreenContent: \" + adError.getMessage());\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n\n            @Override\n            public void onAdShowedFullScreenContent() {\n                Log.d(LOG_TAG, \"onAdShowedFullScreenContent.\");\n            }\n        });\n\n        isShowingAd = true;\n        appOpenAd.show(activity);\n    }\n}", "            public void onAdShowedFullScreenContent() {\n                Log.d(LOG_TAG, \"onAdShowedFullScreenContent.\");\n            }\n        });\n\n        isShowingAd = true;\n        appOpenAd.show(activity);\n    }\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/BannerAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.MOPUB;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;", "import static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY_ADS_BANNER_HEIGHT_MEDIUM;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY_ADS_BANNER_WIDTH_MEDIUM;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;", "import android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.FrameLayout;\nimport android.widget.RelativeLayout;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.adview.AppLovinAdView;", "\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdViewAdListener;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.ads.MaxAdView;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinSdkUtils;", "import com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinSdkUtils;\nimport com.facebook.ads.Ad;\nimport com.facebook.ads.AdSize;\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.AdView;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerAdView;\nimport com.ironsource.mediationsdk.ISBannerSize;", "import com.google.android.gms.ads.admanager.AdManagerAdView;\nimport com.ironsource.mediationsdk.ISBannerSize;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.IronSourceBannerLayout;\nimport com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;\nimport com.ironsource.mediationsdk.logger.IronSourceError;\nimport com.ironsource.mediationsdk.sdk.LevelPlayBannerListener;\nimport com.solodroid.ads.sdk.R;\nimport com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.Tools;", "import com.solodroid.ads.sdk.helper.AppLovinCustomEventBanner;\nimport com.solodroid.ads.sdk.util.Tools;\nimport com.startapp.sdk.ads.banner.Banner;\nimport com.startapp.sdk.ads.banner.BannerListener;\nimport com.unity3d.services.banners.BannerErrorInfo;\nimport com.unity3d.services.banners.BannerView;\nimport com.unity3d.services.banners.UnityBannerSize;\nimport com.wortise.ads.AdError;\n\npublic class BannerAd {\n", "\npublic class BannerAd {\n\n    public static class Builder {\n\n        private static final String TAG = \"AdNetwork\";\n        private final Activity activity;\n        private AdView adView;\n        private AdManagerAdView adManagerAdView;\n        private com.facebook.ads.AdView fanAdView;\n        private AppLovinAdView appLovinAdView;\n        FrameLayout ironSourceBannerView;\n        private IronSourceBannerLayout ironSourceBannerLayout;\n        private com.wortise.ads.banner.BannerAd wortiseBannerAd;\n        FrameLayout wortiseBannerView;\n\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobBannerId = \"\";\n        private String googleAdManagerBannerId = \"\";\n        private String fanBannerId = \"\";\n        private String unityBannerId = \"\";\n        private String appLovinBannerId = \"\";\n        private String appLovinBannerZoneId = \"\";\n        private String mopubBannerId = \"\";\n        private String ironSourceBannerId = \"\";\n        private String wortiseBannerId = \"\";\n        private int placementStatus = 1;\n        private boolean darkTheme = false;\n        private boolean legacyGDPR = false;\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadBannerAd();\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n", "        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobBannerId(String adMobBannerId) {\n            this.adMobBannerId = adMobBannerId;\n            return this;\n        }\n", "        public Builder setAdMobBannerId(String adMobBannerId) {\n            this.adMobBannerId = adMobBannerId;\n            return this;\n        }\n\n        public Builder setGoogleAdManagerBannerId(String googleAdManagerBannerId) {\n            this.googleAdManagerBannerId = googleAdManagerBannerId;\n            return this;\n        }\n\n        public Builder setFanBannerId(String fanBannerId) {\n            this.fanBannerId = fanBannerId;\n            return this;\n        }\n", "        public Builder setFanBannerId(String fanBannerId) {\n            this.fanBannerId = fanBannerId;\n            return this;\n        }\n\n        public Builder setUnityBannerId(String unityBannerId) {\n            this.unityBannerId = unityBannerId;\n            return this;\n        }\n\n        public Builder setAppLovinBannerId(String appLovinBannerId) {\n            this.appLovinBannerId = appLovinBannerId;\n            return this;\n        }\n", "        public Builder setAppLovinBannerId(String appLovinBannerId) {\n            this.appLovinBannerId = appLovinBannerId;\n            return this;\n        }\n\n        public Builder setAppLovinBannerZoneId(String appLovinBannerZoneId) {\n            this.appLovinBannerZoneId = appLovinBannerZoneId;\n            return this;\n        }\n\n        public Builder setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n", "        public Builder setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n\n        public Builder setIronSourceBannerId(String ironSourceBannerId) {\n            this.ironSourceBannerId = ironSourceBannerId;\n            return this;\n        }\n\n        public Builder setWortiseBannerId(String wortiseBannerId) {\n            this.wortiseBannerId = wortiseBannerId;\n            return this;\n        }\n", "        public Builder setWortiseBannerId(String wortiseBannerId) {\n            this.wortiseBannerId = wortiseBannerId;\n            return this;\n        }\n\n        public Builder setPlacementStatus(int placementStatus) {\n            this.placementStatus = placementStatus;\n            return this;\n        }\n\n        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n", "        public Builder setDarkTheme(boolean darkTheme) {\n            this.darkTheme = darkTheme;\n            return this;\n        }\n\n        public Builder setLegacyGDPR(boolean legacyGDPR) {\n            this.legacyGDPR = legacyGDPR;\n            return this;\n        }\n\n        public void loadBannerAd() {", "        public void loadBannerAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        FrameLayout adContainerView = activity.findViewById(R.id.admob_banner_view_container);\n                        adContainerView.post(() -> {\n                            adView = new AdView(activity);\n                            adView.setAdUnitId(adMobBannerId);\n                            adContainerView.removeAllViews();\n                            adContainerView.addView(adView);\n                            adView.setAdSize(Tools.getAdSize(activity));\n                            adView.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                            adView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdLoaded() {\n                                    // Code to be executed when an ad finishes loading.\n                                    adContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                    // Code to be executed when an ad request fails.\n                                    adContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdOpened() {\n                                    // Code to be executed when an ad opens an overlay that\n                                    // covers the screen.\n                                }\n\n                                @Override\n                                public void onAdClicked() {\n                                    // Code to be executed when the user clicks on an ad.\n                                }\n\n                                @Override", "                                public void onAdClosed() {\n                                    // Code to be executed when the user is about to return\n                                    // to the app after tapping on an ad.\n                                }\n                            });\n                        });\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + adMobBannerId);\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        FrameLayout googleAdContainerView = activity.findViewById(R.id.google_ad_banner_view_container);\n                        googleAdContainerView.post(() -> {\n                            adManagerAdView = new AdManagerAdView(activity);\n                            adManagerAdView.setAdUnitId(googleAdManagerBannerId);\n                            googleAdContainerView.removeAllViews();\n                            googleAdContainerView.addView(adManagerAdView);\n                            adManagerAdView.setAdSize(Tools.getAdSize(activity));\n                            adManagerAdView.loadAd(Tools.getGoogleAdManagerRequest());\n                            adManagerAdView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdClicked() {\n                                    super.onAdClicked();\n                                }\n\n                                @Override\n                                public void onAdClosed() {\n                                    super.onAdClosed();\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override\n                                public void onAdImpression() {\n                                    super.onAdImpression();\n                                }\n\n                                @Override", "                                public void onAdLoaded() {\n                                    super.onAdLoaded();\n                                    googleAdContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdOpened() {\n                                    super.onAdOpened();\n                                }\n                            });\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanAdView = new com.facebook.ads.AdView(activity, fanBannerId, AdSize.BANNER_HEIGHT_50);\n                        RelativeLayout fanAdViewContainer = activity.findViewById(R.id.fan_banner_view_container);\n                        fanAdViewContainer.addView(fanAdView);\n                        com.facebook.ads.AdListener adListener = new com.facebook.ads.AdListener() {\n                            @Override", "                            public void onError(Ad ad, com.facebook.ads.AdError adError) {\n                                fanAdViewContainer.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                                Log.d(TAG, \"Error load FAN : \" + adError.getErrorMessage());\n                            }\n\n                            @Override\n                            public void onAdLoaded(Ad ad) {\n                                fanAdViewContainer.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdClicked(Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(Ad ad) {\n\n                            }\n                        };\n                        com.facebook.ads.AdView.AdViewLoadConfig loadAdConfig = fanAdView.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanAdView.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        RelativeLayout startAppAdView = activity.findViewById(R.id.startapp_banner_view_container);\n                        Banner banner = new Banner(activity, new BannerListener() {\n                            @Override", "                            public void onReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                                Log.d(TAG, adNetwork + \" failed load startapp banner ad : \");\n                            }\n\n                            @Override", "                            public void onImpression(View view) {\n\n                            }\n\n                            @Override\n                            public void onClick(View banner) {\n                            }\n                        });\n                        startAppAdView.addView(banner);\n                        break;\n\n                    case UNITY:\n                        RelativeLayout unityAdView = activity.findViewById(R.id.unity_banner_view_container);\n                        BannerView bottomBanner = new BannerView(activity, unityBannerId, new UnityBannerSize(UNITY_ADS_BANNER_WIDTH_MEDIUM, UNITY_ADS_BANNER_HEIGHT_MEDIUM));\n                        bottomBanner.setListener(new BannerView.IListener() {\n                            @Override", "                            public void onBannerLoaded(BannerView bannerView) {\n                                unityAdView.setVisibility(View.VISIBLE);\n                                Log.d(\"Unity_banner\", \"ready\");\n                            }\n\n                            @Override\n                            public void onBannerShown(BannerView bannerAdView) {\n\n                            }\n\n                            @Override", "                            public void onBannerClick(BannerView bannerView) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailedToLoad(BannerView bannerView, BannerErrorInfo bannerErrorInfo) {\n                                Log.d(\"SupportTest\", \"Banner Error\" + bannerErrorInfo);\n                                unityAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override", "                            public void onBannerLeftApplication(BannerView bannerView) {\n\n                            }\n                        });\n                        unityAdView.addView(bottomBanner);\n                        bottomBanner.load();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + unityBannerId);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        RelativeLayout appLovinAdView = activity.findViewById(R.id.applovin_banner_view_container);\n                        MaxAdView maxAdView = new MaxAdView(appLovinBannerId, activity);\n                        maxAdView.setListener(new MaxAdViewAdListener() {\n                            @Override", "                            public void onAdExpanded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdCollapsed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n\n                            }\n                        });\n\n                        int width = ViewGroup.LayoutParams.MATCH_PARENT;\n                        int heightPx = activity.getResources().getDimensionPixelSize(R.dimen.applovin_banner_height);\n                        maxAdView.setLayoutParams(new FrameLayout.LayoutParams(width, heightPx));", "                        if (darkTheme) {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_dark));\n                        } else {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_light));\n                        }\n                        appLovinAdView.addView(maxAdView);\n                        maxAdView.loadAd();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + appLovinBannerId);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        RelativeLayout appLovinDiscoveryAdView = activity.findViewById(R.id.applovin_discovery_banner_view_container);\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle bannerExtras = new Bundle();\n                        bannerExtras.putString(\"zone_id\", appLovinBannerZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                        boolean isTablet2 = AppLovinSdkUtils.isTablet(activity);\n                        AppLovinAdSize adSize = isTablet2 ? AppLovinAdSize.LEADER : AppLovinAdSize.BANNER;\n                        this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                        this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinDiscoveryAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                appLovinDiscoveryAdView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                            }\n                        });\n                        appLovinDiscoveryAdView.addView(this.appLovinAdView);\n                        this.appLovinAdView.loadNextAd();\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        ironSourceBannerView = activity.findViewById(R.id.ironsource_banner_view_container);\n                        ISBannerSize size = ISBannerSize.BANNER;\n                        ironSourceBannerLayout = IronSource.createBanner(activity, size);\n                        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n                        ironSourceBannerView.addView(ironSourceBannerLayout, 0, layoutParams);", "                        if (ironSourceBannerLayout != null) {\n                            ironSourceBannerLayout.setLevelPlayBannerListener(new LevelPlayBannerListener() {\n                                @Override\n                                public void onAdLoaded(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLoaded\");\n                                    ironSourceBannerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override", "                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                    loadBackupBannerAd();\n                                }\n\n                                @Override\n                                public void onAdClicked(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdClicked\");\n                                }\n\n                                @Override", "                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override\n                                public void onAdScreenPresented(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenPresented\");\n                                }\n\n                                @Override\n                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseBannerAd = new com.wortise.ads.banner.BannerAd(activity);\n                        wortiseBannerAd.setAdSize(Tools.getWortiseAdSize(activity));\n                        wortiseBannerAd.setAdUnitId(wortiseBannerId);\n                        wortiseBannerView = activity.findViewById(R.id.wortise_banner_view_container);\n                        wortiseBannerView.addView(wortiseBannerAd);\n                        wortiseBannerAd.loadAd();\n                        wortiseBannerAd.setListener(new com.wortise.ads.banner.BannerAd.Listener() {\n                            @Override", "                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseBannerAd = new com.wortise.ads.banner.BannerAd(activity);\n                        wortiseBannerAd.setAdSize(Tools.getWortiseAdSize(activity));\n                        wortiseBannerAd.setAdUnitId(wortiseBannerId);\n                        wortiseBannerView = activity.findViewById(R.id.wortise_banner_view_container);\n                        wortiseBannerView.addView(wortiseBannerAd);\n                        wortiseBannerAd.loadAd();\n                        wortiseBannerAd.setListener(new com.wortise.ads.banner.BannerAd.Listener() {\n                            @Override", "                            public void onBannerClicked(@NonNull com.wortise.ads.banner.BannerAd bannerAd) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailed(@NonNull com.wortise.ads.banner.BannerAd bannerAd, @NonNull AdError adError) {\n                                wortiseBannerView.setVisibility(View.GONE);\n                                loadBackupBannerAd();\n                                Log.d(TAG, \"failed to load Wortise banner: \" + adError);\n                            }\n\n                            @Override", "                            public void onBannerLoaded(@NonNull com.wortise.ads.banner.BannerAd bannerAd) {\n                                wortiseBannerView.setVisibility(View.VISIBLE);\n                                Log.d(TAG, \"Wortise banner loaded\");\n                            }\n                        });\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "        public void loadBackupBannerAd() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        FrameLayout adContainerView = activity.findViewById(R.id.admob_banner_view_container);\n                        adContainerView.post(() -> {\n                            adView = new AdView(activity);\n                            adView.setAdUnitId(adMobBannerId);\n                            adContainerView.removeAllViews();\n                            adContainerView.addView(adView);\n                            adView.setAdSize(Tools.getAdSize(activity));\n                            adView.loadAd(Tools.getAdRequest(activity, legacyGDPR));\n                            adView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdLoaded() {\n                                    // Code to be executed when an ad finishes loading.\n                                    adContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError adError) {\n                                    // Code to be executed when an ad request fails.\n                                    adContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override", "                                public void onAdOpened() {\n                                    // Code to be executed when an ad opens an overlay that\n                                    // covers the screen.\n                                }\n\n                                @Override\n                                public void onAdClicked() {\n                                    // Code to be executed when the user clicks on an ad.\n                                }\n\n                                @Override", "                                public void onAdClosed() {\n                                    // Code to be executed when the user is about to return\n                                    // to the app after tapping on an ad.\n                                }\n                            });\n                        });\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + adMobBannerId);\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        FrameLayout googleAdContainerView = activity.findViewById(R.id.google_ad_banner_view_container);\n                        googleAdContainerView.post(() -> {\n                            adManagerAdView = new AdManagerAdView(activity);\n                            adManagerAdView.setAdUnitId(googleAdManagerBannerId);\n                            googleAdContainerView.removeAllViews();\n                            googleAdContainerView.addView(adManagerAdView);\n                            adManagerAdView.setAdSize(Tools.getAdSize(activity));\n                            adManagerAdView.loadAd(Tools.getGoogleAdManagerRequest());\n                            adManagerAdView.setAdListener(new AdListener() {\n                                @Override", "                                public void onAdClicked() {\n                                    super.onAdClicked();\n                                }\n\n                                @Override\n                                public void onAdClosed() {\n                                    super.onAdClosed();\n                                }\n\n                                @Override\n                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override", "                                public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                    super.onAdFailedToLoad(loadAdError);\n                                    googleAdContainerView.setVisibility(View.GONE);\n                                }\n\n                                @Override\n                                public void onAdImpression() {\n                                    super.onAdImpression();\n                                }\n\n                                @Override", "                                public void onAdLoaded() {\n                                    super.onAdLoaded();\n                                    googleAdContainerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdOpened() {\n                                    super.onAdOpened();\n                                }\n                            });\n                        });\n                        break;\n\n                    case FAN:\n                    case FACEBOOK:\n                        fanAdView = new com.facebook.ads.AdView(activity, fanBannerId, AdSize.BANNER_HEIGHT_50);\n                        RelativeLayout fanAdViewContainer = activity.findViewById(R.id.fan_banner_view_container);\n                        fanAdViewContainer.addView(fanAdView);\n                        com.facebook.ads.AdListener adListener = new com.facebook.ads.AdListener() {\n                            @Override", "                            public void onError(Ad ad, com.facebook.ads.AdError adError) {\n                                fanAdViewContainer.setVisibility(View.GONE);\n                                Log.d(TAG, \"Error load FAN : \" + adError.getErrorMessage());\n                            }\n\n                            @Override\n                            public void onAdLoaded(Ad ad) {\n                                fanAdViewContainer.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdClicked(Ad ad) {\n\n                            }\n\n                            @Override\n                            public void onLoggingImpression(Ad ad) {\n\n                            }\n                        };\n                        com.facebook.ads.AdView.AdViewLoadConfig loadAdConfig = fanAdView.buildLoadAdConfig().withAdListener(adListener).build();\n                        fanAdView.loadAd(loadAdConfig);\n                        break;\n\n                    case STARTAPP:\n                        RelativeLayout startAppAdView = activity.findViewById(R.id.startapp_banner_view_container);\n                        Banner banner = new Banner(activity, new BannerListener() {\n                            @Override", "                            public void onReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onFailedToReceiveAd(View banner) {\n                                startAppAdView.setVisibility(View.GONE);\n                                Log.d(TAG, adNetwork + \" failed load startapp banner ad : \");\n                            }\n\n                            @Override", "                            public void onImpression(View view) {\n\n                            }\n\n                            @Override\n                            public void onClick(View banner) {\n                            }\n                        });\n                        startAppAdView.addView(banner);\n                        break;\n\n                    case UNITY:\n                        RelativeLayout unityAdView = activity.findViewById(R.id.unity_banner_view_container);\n                        BannerView bottomBanner = new BannerView(activity, unityBannerId, new UnityBannerSize(UNITY_ADS_BANNER_WIDTH_MEDIUM, UNITY_ADS_BANNER_HEIGHT_MEDIUM));\n                        bottomBanner.setListener(new BannerView.IListener() {\n                            @Override", "                            public void onBannerLoaded(BannerView bannerView) {\n                                unityAdView.setVisibility(View.VISIBLE);\n                                Log.d(\"Unity_banner\", \"ready\");\n                            }\n\n                            @Override\n                            public void onBannerShown(BannerView bannerAdView) {\n\n                            }\n\n                            @Override", "                            public void onBannerClick(BannerView bannerView) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailedToLoad(BannerView bannerView, BannerErrorInfo bannerErrorInfo) {\n                                Log.d(\"SupportTest\", \"Banner Error\" + bannerErrorInfo);\n                                unityAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override", "                            public void onBannerLeftApplication(BannerView bannerView) {\n\n                            }\n                        });\n                        unityAdView.addView(bottomBanner);\n                        bottomBanner.load();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + unityBannerId);\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        RelativeLayout appLovinAdView = activity.findViewById(R.id.applovin_banner_view_container);\n                        MaxAdView maxAdView = new MaxAdView(appLovinBannerId, activity);\n                        maxAdView.setListener(new MaxAdViewAdListener() {\n                            @Override", "                            public void onAdExpanded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdCollapsed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                appLovinAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                appLovinAdView.setVisibility(View.GONE);\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n\n                            }\n                        });\n\n                        int width = ViewGroup.LayoutParams.MATCH_PARENT;\n                        int heightPx = activity.getResources().getDimensionPixelSize(R.dimen.applovin_banner_height);\n                        maxAdView.setLayoutParams(new FrameLayout.LayoutParams(width, heightPx));", "                        if (darkTheme) {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_dark));\n                        } else {\n                            maxAdView.setBackgroundColor(activity.getResources().getColor(R.color.color_native_background_light));\n                        }\n                        appLovinAdView.addView(maxAdView);\n                        maxAdView.loadAd();\n                        Log.d(TAG, adNetwork + \" Banner Ad unit Id : \" + appLovinBannerId);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        RelativeLayout appLovinDiscoveryAdView = activity.findViewById(R.id.applovin_discovery_banner_view_container);\n                        AdRequest.Builder builder = new AdRequest.Builder();\n                        Bundle bannerExtras = new Bundle();\n                        bannerExtras.putString(\"zone_id\", appLovinBannerZoneId);\n                        builder.addCustomEventExtrasBundle(AppLovinCustomEventBanner.class, bannerExtras);\n\n                        boolean isTablet2 = AppLovinSdkUtils.isTablet(activity);\n                        AppLovinAdSize adSize = isTablet2 ? AppLovinAdSize.LEADER : AppLovinAdSize.BANNER;\n                        this.appLovinAdView = new AppLovinAdView(adSize, activity);\n                        this.appLovinAdView.setAdLoadListener(new AppLovinAdLoadListener() {\n                            @Override", "                            public void adReceived(AppLovinAd ad) {\n                                appLovinDiscoveryAdView.setVisibility(View.VISIBLE);\n                            }\n\n                            @Override\n                            public void failedToReceiveAd(int errorCode) {\n                                appLovinDiscoveryAdView.setVisibility(View.GONE);\n                            }\n                        });\n                        appLovinDiscoveryAdView.addView(this.appLovinAdView);\n                        this.appLovinAdView.loadNextAd();\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        ironSourceBannerView = activity.findViewById(R.id.ironsource_banner_view_container);\n                        ISBannerSize size = ISBannerSize.BANNER;\n                        ironSourceBannerLayout = IronSource.createBanner(activity, size);\n                        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n                        ironSourceBannerView.addView(ironSourceBannerLayout, 0, layoutParams);", "                        if (ironSourceBannerLayout != null) {\n                            ironSourceBannerLayout.setLevelPlayBannerListener(new LevelPlayBannerListener() {\n                                @Override\n                                public void onAdLoaded(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLoaded\");\n                                    ironSourceBannerView.setVisibility(View.VISIBLE);\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                }\n\n                                @Override", "                                public void onAdLoadFailed(IronSourceError ironSourceError) {\n                                    Log.d(TAG, \"onBannerAdLoadFailed\" + \" \" + ironSourceError.getErrorMessage());\n                                }\n\n                                @Override\n                                public void onAdClicked(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdClicked\");\n                                }\n\n                                @Override\n                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override", "                                public void onAdLeftApplication(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdLeftApplication\");\n                                }\n\n                                @Override\n                                public void onAdScreenPresented(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenPresented\");\n                                }\n\n                                @Override\n                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseBannerAd = new com.wortise.ads.banner.BannerAd(activity);\n                        wortiseBannerAd.setAdSize(Tools.getWortiseAdSize(activity));\n                        wortiseBannerAd.setAdUnitId(wortiseBannerId);\n                        wortiseBannerView = activity.findViewById(R.id.wortise_banner_view_container);\n                        wortiseBannerView.addView(wortiseBannerAd);\n                        wortiseBannerAd.loadAd();\n                        wortiseBannerAd.setListener(new com.wortise.ads.banner.BannerAd.Listener() {\n                            @Override", "                                public void onAdScreenDismissed(AdInfo adInfo) {\n                                    Log.d(TAG, \"onBannerAdScreenDismissed\");\n                                }\n                            });\n                            IronSource.loadBanner(ironSourceBannerLayout, ironSourceBannerId);\n                        } else {\n                            Log.d(TAG, \"IronSource.createBanner returned null\");\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseBannerAd = new com.wortise.ads.banner.BannerAd(activity);\n                        wortiseBannerAd.setAdSize(Tools.getWortiseAdSize(activity));\n                        wortiseBannerAd.setAdUnitId(wortiseBannerId);\n                        wortiseBannerView = activity.findViewById(R.id.wortise_banner_view_container);\n                        wortiseBannerView.addView(wortiseBannerAd);\n                        wortiseBannerAd.loadAd();\n                        wortiseBannerAd.setListener(new com.wortise.ads.banner.BannerAd.Listener() {\n                            @Override", "                            public void onBannerClicked(@NonNull com.wortise.ads.banner.BannerAd bannerAd) {\n\n                            }\n\n                            @Override\n                            public void onBannerFailed(@NonNull com.wortise.ads.banner.BannerAd bannerAd, @NonNull AdError adError) {\n                                wortiseBannerView.setVisibility(View.GONE);\n                                Log.d(TAG, \" [backup] failed to load Wortise banner: \" + adError);\n                            }\n\n                            @Override", "                            public void onBannerLoaded(@NonNull com.wortise.ads.banner.BannerAd bannerAd) {\n                                wortiseBannerView.setVisibility(View.VISIBLE);\n                                Log.d(TAG, \" [backup] Wortise banner loaded\");\n                            }\n                        });\n                        break;\n                }\n                Log.d(TAG, \"Banner Ad is enabled\");\n            } else {\n                Log.d(TAG, \"Banner Ad is disabled\");\n            }\n        }\n", "        public void destroyAndDetachBanner() {\n            if (adStatus.equals(AD_STATUS_ON) && placementStatus != 0) {\n                if (adNetwork.equals(IRONSOURCE) || backupAdNetwork.equals(IRONSOURCE)) {\n                    if (ironSourceBannerView != null) {\n                        Log.d(TAG, \"ironSource banner is not null, ready to destroy\");\n                        IronSource.destroyBanner(ironSourceBannerLayout);\n                        ironSourceBannerView.removeView(ironSourceBannerLayout);\n                    } else {\n                        Log.d(TAG, \"ironSource banner is null\");\n                    }\n                }\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AppOpenAdManager.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.ads.AdError;", "\nimport com.google.android.gms.ads.AdError;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerAdRequest;\nimport com.google.android.gms.ads.appopen.AppOpenAd;\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n\nimport java.util.Date;\n\npublic class AppOpenAdManager {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private AppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;", "import java.util.Date;\n\npublic class AppOpenAdManager {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private AppOpenAd appOpenAd = null;\n    private boolean isLoadingAd = false;\n    public boolean isShowingAd = false;\n    private long loadTime = 0;\n\n    public AppOpenAdManager() {\n    }\n", "    public void loadAd(Context context, String adManagerAppOpenAdUnitId) {\n        if (isLoadingAd || isAdAvailable()) {\n            return;\n        }\n\n        isLoadingAd = true;\n        @SuppressLint(\"VisibleForTests\") AdManagerAdRequest request = new AdManagerAdRequest.Builder().build();\n        AppOpenAd.load(context, adManagerAppOpenAdUnitId, request, new AppOpenAd.AppOpenAdLoadCallback() {\n            @Override\n            public void onAdLoaded(@NonNull AppOpenAd ad) {\n                appOpenAd = ad;\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override", "            public void onAdLoaded(@NonNull AppOpenAd ad) {\n                appOpenAd = ad;\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override\n            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                isLoadingAd = false;\n                Log.d(LOG_TAG, \"onAdFailedToLoad: \" + loadAdError.getMessage());\n            }\n        });\n    }\n", "            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                isLoadingAd = false;\n                Log.d(LOG_TAG, \"onAdFailedToLoad: \" + loadAdError.getMessage());\n            }\n        });\n    }\n\n    public boolean wasLoadTimeLessThanNHoursAgo(long numHours) {\n        long dateDifference = (new Date()).getTime() - loadTime;\n        long numMilliSecondsPerHour = 3600000;\n        return (dateDifference < (numMilliSecondsPerHour * numHours));\n    }\n", "    public boolean isAdAvailable() {\n        return appOpenAd != null && wasLoadTimeLessThanNHoursAgo(4);\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n", "    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n\n        if (!isAdAvailable()) {\n            Log.d(LOG_TAG, \"The app open ad is not ready yet.\");\n            onShowAdCompleteListener.onShowAdComplete();\n            loadAd(activity, appOpenAdUnitId);\n            return;\n        }\n\n        Log.d(LOG_TAG, \"Will show ad.\");\n\n        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n            @Override", "            public void onAdDismissedFullScreenContent() {\n                appOpenAd = null;\n                isShowingAd = false;\n\n                Log.d(LOG_TAG, \"onAdDismissedFullScreenContent.\");\n\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n\n            @Override", "            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                appOpenAd = null;\n                isShowingAd = false;\n                Log.d(LOG_TAG, \"onAdFailedToShowFullScreenContent: \" + adError.getMessage());\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, appOpenAdUnitId);\n            }\n\n            @Override\n            public void onAdShowedFullScreenContent() {\n                Log.d(LOG_TAG, \"onAdShowedFullScreenContent.\");\n            }\n        });\n\n        isShowingAd = true;\n        appOpenAd.show(activity);\n    }\n}", "            public void onAdShowedFullScreenContent() {\n                Log.d(LOG_TAG, \"onAdShowedFullScreenContent.\");\n            }\n        });\n\n        isShowingAd = true;\n        appOpenAd.show(activity);\n    }\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AdNetwork.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_DISCOVERY;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FACEBOOK;\nimport static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;", "import static com.solodroid.ads.sdk.util.Constant.FAN;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.IRONSOURCE;\nimport static com.solodroid.ads.sdk.util.Constant.MOPUB;\nimport static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;", "import static com.solodroid.ads.sdk.util.Constant.NONE;\nimport static com.solodroid.ads.sdk.util.Constant.STARTAPP;\nimport static com.solodroid.ads.sdk.util.Constant.UNITY;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.app.Activity;\nimport android.util.Log;\n\nimport com.applovin.sdk.AppLovinMediationProvider;\nimport com.applovin.sdk.AppLovinSdk;", "import com.applovin.sdk.AppLovinMediationProvider;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.google.android.gms.ads.MobileAds;\nimport com.google.android.gms.ads.initialization.AdapterStatus;\nimport com.ironsource.mediationsdk.IronSource;\nimport com.ironsource.mediationsdk.sdk.InitializationListener;\nimport com.solodroid.ads.sdk.helper.AudienceNetworkInitializeHelper;\nimport com.startapp.sdk.adsbase.StartAppAd;\nimport com.startapp.sdk.adsbase.StartAppSDK;\nimport com.unity3d.mediation.IInitializationListener;", "import com.startapp.sdk.adsbase.StartAppSDK;\nimport com.unity3d.mediation.IInitializationListener;\nimport com.unity3d.mediation.InitializationConfiguration;\nimport com.unity3d.mediation.UnityMediation;\nimport com.unity3d.mediation.errors.SdkInitializationError;\nimport com.wortise.ads.WortiseSdk;\n\nimport java.util.Map;\n\npublic class AdNetwork {\n", "\npublic class AdNetwork {\n\n    public static class Initialize {\n\n        private static final String TAG = \"AdNetwork\";\n        Activity activity;\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobAppId = \"\";\n        private String startappAppId = \"0\";\n        private String unityGameId = \"\";\n        private String appLovinSdkKey = \"\";\n        private String mopubBannerId = \"\";\n        private String ironSourceAppKey = \"\";\n        private String wortiseAppId = \"\";\n        private boolean debug = true;\n\n        public Initialize(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Initialize build() {\n            initAds();\n            initBackupAds();\n            return this;\n        }\n\n        public Initialize setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Initialize setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Initialize setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Initialize setAdMobAppId(String adMobAppId) {\n            this.adMobAppId = adMobAppId;\n            return this;\n        }\n", "        public Initialize setAdMobAppId(String adMobAppId) {\n            this.adMobAppId = adMobAppId;\n            return this;\n        }\n\n        public Initialize setStartappAppId(String startappAppId) {\n            this.startappAppId = startappAppId;\n            return this;\n        }\n\n        public Initialize setUnityGameId(String unityGameId) {\n            this.unityGameId = unityGameId;\n            return this;\n        }\n", "        public Initialize setUnityGameId(String unityGameId) {\n            this.unityGameId = unityGameId;\n            return this;\n        }\n\n        public Initialize setAppLovinSdkKey(String appLovinSdkKey) {\n            this.appLovinSdkKey = appLovinSdkKey;\n            return this;\n        }\n\n        public Initialize setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n", "        public Initialize setMopubBannerId(String mopubBannerId) {\n            this.mopubBannerId = mopubBannerId;\n            return this;\n        }\n\n        public Initialize setIronSourceAppKey(String ironSourceAppKey) {\n            this.ironSourceAppKey = ironSourceAppKey;\n            return this;\n        }\n\n        public Initialize setWortiseAppId(String wortiseAppId) {\n            this.wortiseAppId = wortiseAppId;\n            return this;\n        }\n", "        public Initialize setWortiseAppId(String wortiseAppId) {\n            this.wortiseAppId = wortiseAppId;\n            return this;\n        }\n\n        public Initialize setDebug(boolean debug) {\n            this.debug = debug;\n            return this;\n        }\n\n        public void initAds() {", "        public void initAds() {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_ADMOB:\n                    case FAN_BIDDING_AD_MANAGER:\n                        MobileAds.initialize(activity, initializationStatus -> {\n                            Map<String, AdapterStatus> statusMap = initializationStatus.getAdapterStatusMap();\n                            for (String adapterClass : statusMap.keySet()) {\n                                AdapterStatus adapterStatus = statusMap.get(adapterClass);\n                                assert adapterStatus != null;\n                                Log.d(TAG, String.format(\"Adapter name: %s, Description: %s, Latency: %d\", adapterClass, adapterStatus.getDescription(), adapterStatus.getLatency()));\n                            }\n                        });\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case FAN:\n                    case FACEBOOK:\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case STARTAPP:\n                        StartAppSDK.init(activity, startappAppId, false);\n                        StartAppSDK.setTestAdsEnabled(debug);\n                        StartAppAd.disableSplash();\n                        StartAppSDK.setUserConsent(activity, \"pas\", System.currentTimeMillis(), true);\n                        break;\n                    case UNITY:\n                        InitializationConfiguration configuration = InitializationConfiguration.builder()\n                                .setGameId(unityGameId)\n                                .setInitializationListener(new IInitializationListener() {\n                                    @Override", "                            for (String adapterClass : statusMap.keySet()) {\n                                AdapterStatus adapterStatus = statusMap.get(adapterClass);\n                                assert adapterStatus != null;\n                                Log.d(TAG, String.format(\"Adapter name: %s, Description: %s, Latency: %d\", adapterClass, adapterStatus.getDescription(), adapterStatus.getLatency()));\n                            }\n                        });\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case FAN:\n                    case FACEBOOK:\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case STARTAPP:\n                        StartAppSDK.init(activity, startappAppId, false);\n                        StartAppSDK.setTestAdsEnabled(debug);\n                        StartAppAd.disableSplash();\n                        StartAppSDK.setUserConsent(activity, \"pas\", System.currentTimeMillis(), true);\n                        break;\n                    case UNITY:\n                        InitializationConfiguration configuration = InitializationConfiguration.builder()\n                                .setGameId(unityGameId)\n                                .setInitializationListener(new IInitializationListener() {\n                                    @Override", "                                    public void onInitializationComplete() {\n                                        Log.d(TAG, \"Unity Mediation is successfully initialized. with ID : \" + unityGameId);\n                                    }\n\n                                    @Override\n                                    public void onInitializationFailed(SdkInitializationError errorCode, String msg) {\n                                        Log.d(TAG, \"Unity Mediation Failed to Initialize : \" + msg);\n                                    }\n                                }).build();\n                        UnityMediation.initialize(configuration);\n                        break;\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        AppLovinSdk.getInstance(activity).setMediationProvider(AppLovinMediationProvider.MAX);\n                        AppLovinSdk.getInstance(activity).initializeSdk(config -> {\n                        });\n                        AudienceNetworkInitializeHelper.initialize(activity);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AppLovinSdk.initializeSdk(activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        String advertisingId = IronSource.getAdvertiserId(activity);\n                        IronSource.setUserId(advertisingId);\n                        IronSource.init(activity, ironSourceAppKey, () -> {\n                            Log.d(TAG, \"[\" + adNetwork + \"] initialize complete\");\n                        });\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.REWARDED_VIDEO);\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.INTERSTITIAL);\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.BANNER);\n                        break;\n\n                    case WORTISE:\n                        WortiseSdk.initialize(activity, wortiseAppId);\n                        break;\n                }\n                Log.d(TAG, \"[\" + adNetwork + \"] is selected as Primary Ads\");\n            }\n        }\n", "        public void initBackupAds() {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_ADMOB:\n                    case FAN_BIDDING_AD_MANAGER:\n                        MobileAds.initialize(activity, initializationStatus -> {\n                            Map<String, AdapterStatus> statusMap = initializationStatus.getAdapterStatusMap();\n                            for (String adapterClass : statusMap.keySet()) {\n                                AdapterStatus adapterStatus = statusMap.get(adapterClass);\n                                assert adapterStatus != null;\n                                Log.d(TAG, String.format(\"Adapter name: %s, Description: %s, Latency: %d\", adapterClass, adapterStatus.getDescription(), adapterStatus.getLatency()));\n                            }\n                        });\n                        AudienceNetworkInitializeHelper.initialize(activity);\n                        break;\n                    case FAN:\n                    case FACEBOOK:\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case STARTAPP:\n                        StartAppSDK.init(activity, startappAppId, false);\n                        StartAppSDK.setTestAdsEnabled(debug);\n                        StartAppAd.disableSplash();\n                        StartAppSDK.setUserConsent(activity, \"pas\", System.currentTimeMillis(), true);\n                        break;\n                    case UNITY:\n                        InitializationConfiguration configuration = InitializationConfiguration.builder()\n                                .setGameId(unityGameId)\n                                .setInitializationListener(new IInitializationListener() {\n                                    @Override", "                            for (String adapterClass : statusMap.keySet()) {\n                                AdapterStatus adapterStatus = statusMap.get(adapterClass);\n                                assert adapterStatus != null;\n                                Log.d(TAG, String.format(\"Adapter name: %s, Description: %s, Latency: %d\", adapterClass, adapterStatus.getDescription(), adapterStatus.getLatency()));\n                            }\n                        });\n                        AudienceNetworkInitializeHelper.initialize(activity);\n                        break;\n                    case FAN:\n                    case FACEBOOK:\n                        AudienceNetworkInitializeHelper.initializeAd(activity, debug);\n                        break;\n                    case STARTAPP:\n                        StartAppSDK.init(activity, startappAppId, false);\n                        StartAppSDK.setTestAdsEnabled(debug);\n                        StartAppAd.disableSplash();\n                        StartAppSDK.setUserConsent(activity, \"pas\", System.currentTimeMillis(), true);\n                        break;\n                    case UNITY:\n                        InitializationConfiguration configuration = InitializationConfiguration.builder()\n                                .setGameId(unityGameId)\n                                .setInitializationListener(new IInitializationListener() {\n                                    @Override", "                                    public void onInitializationComplete() {\n                                        Log.d(TAG, \"Unity Mediation is successfully initialized. with ID : \" + unityGameId);\n                                    }\n\n                                    @Override\n                                    public void onInitializationFailed(SdkInitializationError errorCode, String msg) {\n                                        Log.d(TAG, \"Unity Mediation Failed to Initialize : \" + msg);\n                                    }\n                                }).build();\n                        UnityMediation.initialize(configuration);\n                        break;\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                    case FAN_BIDDING_APPLOVIN_MAX:\n                        AppLovinSdk.getInstance(activity).setMediationProvider(AppLovinMediationProvider.MAX);\n                        AppLovinSdk.getInstance(activity).initializeSdk(config -> {\n                        });\n                        AudienceNetworkInitializeHelper.initialize(activity);\n                        break;\n\n                    case APPLOVIN_DISCOVERY:\n                        AppLovinSdk.initializeSdk(activity);\n                        break;\n\n                    case MOPUB:\n                        //Mopub has been acquired by AppLovin\n                        break;\n\n                    case IRONSOURCE:\n                    case FAN_BIDDING_IRONSOURCE:\n                        String advertisingId = IronSource.getAdvertiserId(activity);\n                        IronSource.setUserId(advertisingId);\n                        IronSource.init(activity, ironSourceAppKey, () -> {\n                            Log.d(TAG, \"[\" + adNetwork + \"] initialize complete\");\n                        });\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.REWARDED_VIDEO);\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.INTERSTITIAL);\n//                        IronSource.init(activity, ironSourceAppKey, IronSource.AD_UNIT.BANNER);\n                        break;\n\n                    case WORTISE:\n                        WortiseSdk.initialize(activity, wortiseAppId);\n                        break;\n\n                    case NONE:\n                        //do nothing\n                        break;\n                }\n                Log.d(TAG, \"[\" + backupAdNetwork + \"] is selected as Backup Ads\");\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AppOpenAd.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport static com.solodroid.ads.sdk.util.Constant.ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.AD_STATUS_ON;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN;\nimport static com.solodroid.ads.sdk.util.Constant.APPLOVIN_MAX;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_ADMOB;\nimport static com.solodroid.ads.sdk.util.Constant.FAN_BIDDING_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;", "import static com.solodroid.ads.sdk.util.Constant.GOOGLE_AD_MANAGER;\nimport static com.solodroid.ads.sdk.util.Constant.WORTISE;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.mediation.MaxAd;", "\nimport com.applovin.mediation.MaxAd;\nimport com.applovin.mediation.MaxAdListener;\nimport com.applovin.mediation.MaxError;\nimport com.applovin.mediation.ads.MaxAppOpenAd;\nimport com.google.android.gms.ads.AdError;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.FullScreenContentCallback;\nimport com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerAdRequest;", "import com.google.android.gms.ads.LoadAdError;\nimport com.google.android.gms.ads.admanager.AdManagerAdRequest;\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n\n@SuppressLint(\"StaticFieldLeak\")\npublic class AppOpenAd {\n    public static com.google.android.gms.ads.appopen.AppOpenAd appOpenAd = null;\n    public static MaxAppOpenAd maxAppOpenAd = null;\n    public static com.wortise.ads.appopen.AppOpenAd wortiseAppOpenAd = null;\n    public static boolean isAppOpenAdLoaded = false;\n", "    public static com.wortise.ads.appopen.AppOpenAd wortiseAppOpenAd = null;\n    public static boolean isAppOpenAdLoaded = false;\n\n    public static class Builder {\n\n        private static final String TAG = \"AppOpenAd\";\n        private final Activity activity;\n        private String adStatus = \"\";\n        private String adNetwork = \"\";\n        private String backupAdNetwork = \"\";\n        private String adMobAppOpenId = \"\";\n        private String adManagerAppOpenId = \"\";\n        private String applovinAppOpenId = \"\";\n        private String wortiseAppOpenId = \"\";\n\n        public Builder(Activity activity) {\n            this.activity = activity;\n        }\n", "        public Builder build() {\n            loadAppOpenAd();\n            return this;\n        }\n\n        public Builder build(OnShowAdCompleteListener onShowAdCompleteListener) {\n            loadAppOpenAd(onShowAdCompleteListener);\n            return this;\n        }\n\n        public Builder show() {\n            showAppOpenAd();\n            return this;\n        }\n", "        public Builder show() {\n            showAppOpenAd();\n            return this;\n        }\n\n        public Builder show(OnShowAdCompleteListener onShowAdCompleteListener) {\n            showAppOpenAd(onShowAdCompleteListener);\n            return this;\n        }\n\n        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n", "        public Builder setAdStatus(String adStatus) {\n            this.adStatus = adStatus;\n            return this;\n        }\n\n        public Builder setAdNetwork(String adNetwork) {\n            this.adNetwork = adNetwork;\n            return this;\n        }\n\n        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n", "        public Builder setBackupAdNetwork(String backupAdNetwork) {\n            this.backupAdNetwork = backupAdNetwork;\n            return this;\n        }\n\n        public Builder setAdMobAppOpenId(String adMobAppOpenId) {\n            this.adMobAppOpenId = adMobAppOpenId;\n            return this;\n        }\n\n        public Builder setAdManagerAppOpenId(String adManagerAppOpenId) {\n            this.adManagerAppOpenId = adManagerAppOpenId;\n            return this;\n        }\n", "        public Builder setAdManagerAppOpenId(String adManagerAppOpenId) {\n            this.adManagerAppOpenId = adManagerAppOpenId;\n            return this;\n        }\n\n        public Builder setApplovinAppOpenId(String applovinAppOpenId) {\n            this.applovinAppOpenId = applovinAppOpenId;\n            return this;\n        }\n\n        public Builder setWortiseAppOpenId(String wortiseAppOpenId) {\n            this.wortiseAppOpenId = wortiseAppOpenId;\n            return this;\n        }\n", "        public Builder setWortiseAppOpenId(String wortiseAppOpenId) {\n            this.wortiseAppOpenId = wortiseAppOpenId;\n            return this;\n        }\n\n        public void destroyOpenAd() {\n            AppOpenAd.isAppOpenAdLoaded = false;\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:", "                        if (appOpenAd != null) {\n                            appOpenAd = null;\n                        }\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                        if (maxAppOpenAd != null) {\n                            maxAppOpenAd = null;\n                        }\n                        break;\n\n                    case WORTISE:", "                        if (wortiseAppOpenAd != null) {\n                            wortiseAppOpenAd = null;\n                        }\n                        break;\n\n                    default:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n\n        //main ads", "        public void loadAppOpenAd(OnShowAdCompleteListener onShowAdCompleteListener) {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        AdRequest adRequest = new AdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adMobAppOpenId, adRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                loadBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to load app open ad: \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        @SuppressLint(\"VisibleForTests\") AdManagerAdRequest adManagerAdRequest = new AdManagerAdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adManagerAppOpenId, adManagerAdRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                loadBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to load app open ad: \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:", "                        if (!applovinAppOpenId.equals(\"0\")) {\n                            maxAppOpenAd = new MaxAppOpenAd(applovinAppOpenId, activity);\n                            maxAppOpenAd.setListener(new MaxAdListener() {\n                                @Override\n                                public void onAdLoaded(MaxAd ad) {\n                                    showAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad loaded\");\n                                }\n\n                                @Override\n                                public void onAdDisplayed(MaxAd ad) {\n                                }\n\n                                @Override", "                                public void onAdDisplayed(MaxAd ad) {\n                                }\n\n                                @Override\n                                public void onAdHidden(MaxAd ad) {\n                                    maxAppOpenAd = null;\n                                    showAppOpenAd(onShowAdCompleteListener);\n                                }\n\n                                @Override\n                                public void onAdClicked(MaxAd ad) {\n                                }\n\n                                @Override", "                                public void onAdClicked(MaxAd ad) {\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                    maxAppOpenAd = null;\n                                    loadBackupAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to load app open ad: \" + error.getMessage());\n                                }\n\n                                @Override", "                                public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                    maxAppOpenAd = null;\n                                    loadBackupAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to display app open ad: \" + error.getMessage());\n                                }\n                            });\n                            maxAppOpenAd.loadAd();\n                        } else {\n                            loadBackupAppOpenAd(onShowAdCompleteListener);\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n\n                            @Override\n                            public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n\n                            @Override\n                            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                wortiseAppOpenAd = null;\n                                loadBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to load app open ad: \" + adError);\n                            }\n\n                            @Override", "                            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                wortiseAppOpenAd = null;\n                                loadBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to load app open ad: \" + adError);\n                            }\n\n                            @Override\n                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                showAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n                        });\n                        wortiseAppOpenAd.loadAd();\n                        break;\n\n                    default:\n                        onShowAdCompleteListener.onShowAdComplete();\n                        break;\n                }\n            } else {\n                onShowAdCompleteListener.onShowAdComplete();\n            }\n        }\n", "        public void showAppOpenAd(OnShowAdCompleteListener onShowAdCompleteListener) {\n            switch (adNetwork) {\n                case ADMOB:\n                case FAN_BIDDING_ADMOB:\n                case GOOGLE_AD_MANAGER:\n                case FAN_BIDDING_AD_MANAGER:\n                    if (appOpenAd != null) {\n                        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                            @Override\n                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] close app open ad\");\n                            }\n\n                            @Override\n                            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] failed to show app open ad: \" + adError.getMessage());\n                            }\n\n                            @Override", "                            public void onAdShowedFullScreenContent() {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] show app open ad\");\n                            }\n                        });\n                        appOpenAd.show(activity);\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                case APPLOVIN:\n                case APPLOVIN_MAX:", "                    if (maxAppOpenAd != null) {\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] show app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] show app open ad\");\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad load failed: \" + error.getMessage());\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad display failed: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.showAd();\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                case WORTISE:", "                    if (wortiseAppOpenAd != null) {\n                        if (wortiseAppOpenAd.isAvailable()) {\n                            wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                                @Override\n                                public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] close app open ad\");\n                                }\n\n                                @Override", "                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] close app open ad\");\n                                }\n\n                                @Override\n                                public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] app open ad load failed: \" + adError);\n                                }\n\n                                @Override", "                                public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on start] show app open ad\");\n                                }\n                            });\n                            wortiseAppOpenAd.showAd(activity);\n                        } else {\n                            onShowAdCompleteListener.onShowAdComplete();\n                        }\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                default:\n                    onShowAdCompleteListener.onShowAdComplete();\n                    break;\n            }\n        }\n", "        public void loadAppOpenAd() {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (adNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        AdRequest adRequest = new AdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adMobAppOpenId, adRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to load app open ad : \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        @SuppressLint(\"VisibleForTests\") AdManagerAdRequest adManagerAdRequest = new AdManagerAdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adManagerAppOpenId, adManagerAdRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to load app open ad : \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                        maxAppOpenAd = new MaxAppOpenAd(applovinAppOpenId, activity);\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to load app open ad: \" + error.getMessage());\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to display app open ad: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.loadAd();\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to display app open ad: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.loadAd();\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n\n                            @Override\n                            public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                wortiseAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                            }\n\n                            @Override", "                            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                wortiseAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to load app open ad: \" + adError);\n                            }\n\n                            @Override\n                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n                        });\n                        wortiseAppOpenAd.loadAd();\n                        break;\n\n                    default:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "        public void showAppOpenAd() {\n            switch (adNetwork) {\n                case ADMOB:\n                case FAN_BIDDING_ADMOB:\n                case GOOGLE_AD_MANAGER:\n                case FAN_BIDDING_AD_MANAGER:\n                    if (appOpenAd != null) {\n                        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                            @Override\n                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] close app open ad\");\n                            }\n\n                            @Override\n                            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                appOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] failed to show app open ad: \" + adError.getMessage());\n                            }\n\n                            @Override", "                            public void onAdShowedFullScreenContent() {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] show app open ad\");\n                            }\n                        });\n                        appOpenAd.show(activity);\n                    } else {\n                        showBackupAppOpenAd();\n                    }\n                    break;\n\n                case APPLOVIN:\n                case APPLOVIN_MAX:", "                    if (maxAppOpenAd != null) {\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] show app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] show app open ad\");\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxAppOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                maxAppOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad load failed: \" + error.getMessage());\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                loadAppOpenAd();\n                                Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad display failed: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.showAd();\n                    } else {\n                        showBackupAppOpenAd();\n                    }\n                    break;\n\n                case WORTISE:", "                    if (wortiseAppOpenAd != null) {\n                        if (wortiseAppOpenAd.isAvailable()) {\n                            wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                                @Override\n                                public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] close app open ad\");\n                                }\n\n                                @Override", "                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] close app open ad\");\n                                }\n\n                                @Override\n                                public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] app open ad load failed: \" + adError);\n                                }\n\n                                @Override", "                                public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    Log.d(TAG, \"[\" + adNetwork + \"] \" + \"[on resume] show app open ad\");\n                                }\n                            });\n                            wortiseAppOpenAd.showAd(activity);\n                        } else {\n                            showBackupAppOpenAd();\n                        }\n                    } else {\n                        showBackupAppOpenAd();\n                    }\n                    break;\n\n                default:\n                    //do nothing\n                    break;\n            }\n        }\n\n        //backup ads", "        public void loadBackupAppOpenAd(OnShowAdCompleteListener onShowAdCompleteListener) {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        AdRequest adRequest = new AdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adMobAppOpenId, adRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to load app open ad: \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        @SuppressLint(\"VisibleForTests\") AdManagerAdRequest adManagerAdRequest = new AdManagerAdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adManagerAppOpenId, adManagerAdRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to load app open ad: \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:", "                        if (!applovinAppOpenId.equals(\"0\")) {\n                            maxAppOpenAd = new MaxAppOpenAd(applovinAppOpenId, activity);\n                            maxAppOpenAd.setListener(new MaxAdListener() {\n                                @Override\n                                public void onAdLoaded(MaxAd ad) {\n                                    showBackupAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad loaded\");\n                                }\n\n                                @Override\n                                public void onAdDisplayed(MaxAd ad) {\n\n                                }\n\n                                @Override", "                                public void onAdDisplayed(MaxAd ad) {\n\n                                }\n\n                                @Override\n                                public void onAdHidden(MaxAd ad) {\n                                    maxAppOpenAd = null;\n                                    showBackupAppOpenAd(onShowAdCompleteListener);\n                                }\n\n                                @Override", "                                public void onAdClicked(MaxAd ad) {\n\n                                }\n\n                                @Override\n                                public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                    maxAppOpenAd = null;\n                                    showBackupAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to load app open ad: \" + error.getMessage());\n                                }\n\n                                @Override", "                                public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                    maxAppOpenAd = null;\n                                    showBackupAppOpenAd(onShowAdCompleteListener);\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to display app open ad: \" + error.getMessage());\n                                }\n                            });\n                            maxAppOpenAd.loadAd();\n                        } else {\n                            showBackupAppOpenAd(onShowAdCompleteListener);\n                        }\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n\n                            @Override\n                            public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                wortiseAppOpenAd = null;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                            }\n\n                            @Override", "                            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                wortiseAppOpenAd = null;\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to load app open ad: \" + adError);\n                            }\n\n                            @Override\n                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                showBackupAppOpenAd(onShowAdCompleteListener);\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n                        });\n                        wortiseAppOpenAd.loadAd();\n                        break;\n\n                    default:\n                        onShowAdCompleteListener.onShowAdComplete();\n                        break;\n                }\n            } else {\n                onShowAdCompleteListener.onShowAdComplete();\n            }\n        }\n", "        public void showBackupAppOpenAd(OnShowAdCompleteListener onShowAdCompleteListener) {\n            switch (backupAdNetwork) {\n                case ADMOB:\n                case FAN_BIDDING_ADMOB:\n                case GOOGLE_AD_MANAGER:\n                case FAN_BIDDING_AD_MANAGER:\n                    if (appOpenAd != null) {\n                        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                            @Override\n                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] close app open ad\");\n                            }\n\n                            @Override\n                            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                appOpenAd = null;\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] failed to show app open ad: \" + adError.getMessage());\n                            }\n\n                            @Override", "                            public void onAdShowedFullScreenContent() {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] show app open ad\");\n                            }\n                        });\n                        appOpenAd.show(activity);\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                case APPLOVIN:\n                case APPLOVIN_MAX:", "                    if (maxAppOpenAd != null) {\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] show app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] show app open ad\");\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad load failed: \" + error.getMessage());\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                onShowAdCompleteListener.onShowAdComplete();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad display failed: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.showAd();\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                case WORTISE:", "                    if (wortiseAppOpenAd != null) {\n                        if (wortiseAppOpenAd.isAvailable()) {\n                            wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                                @Override\n                                public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] close app open ad\");\n                                }\n\n                                @Override", "                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] close app open ad\");\n                                }\n\n                                @Override\n                                public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                    onShowAdCompleteListener.onShowAdComplete();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] app open ad load failed: \" + adError);\n                                }\n\n                                @Override", "                                public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on start] [backup] show app open ad\");\n                                }\n                            });\n                            wortiseAppOpenAd.showAd(activity);\n                        } else {\n                            onShowAdCompleteListener.onShowAdComplete();\n                        }\n                    } else {\n                        onShowAdCompleteListener.onShowAdComplete();\n                    }\n                    break;\n\n                default:\n                    onShowAdCompleteListener.onShowAdComplete();\n                    break;\n            }\n        }\n", "        public void loadBackupAppOpenAd() {\n            if (adStatus.equals(AD_STATUS_ON)) {\n                switch (backupAdNetwork) {\n                    case ADMOB:\n                    case FAN_BIDDING_ADMOB:\n                        AdRequest adRequest = new AdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adMobAppOpenId, adRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override\n                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to load app open ad : \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case GOOGLE_AD_MANAGER:\n                    case FAN_BIDDING_AD_MANAGER:\n                        @SuppressLint(\"VisibleForTests\") AdManagerAdRequest adManagerAdRequest = new AdManagerAdRequest.Builder().build();\n                        com.google.android.gms.ads.appopen.AppOpenAd.load(activity, adManagerAppOpenId, adManagerAdRequest, new com.google.android.gms.ads.appopen.AppOpenAd.AppOpenAdLoadCallback() {\n                            @Override", "                            public void onAdLoaded(@NonNull com.google.android.gms.ads.appopen.AppOpenAd ad) {\n                                appOpenAd = ad;\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\n                                appOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to load app open ad : \" + loadAdError.getMessage());\n                            }\n                        });\n                        break;\n\n                    case APPLOVIN:\n                    case APPLOVIN_MAX:\n                        maxAppOpenAd = new MaxAppOpenAd(applovinAppOpenId, activity);\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override", "                            public void onAdLoaded(MaxAd ad) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdHidden(MaxAd ad) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                            }\n\n                            @Override\n                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override", "                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to load app open ad: \" + error.getMessage());\n                            }\n\n                            @Override\n                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to display app open ad: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.loadAd();\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to display app open ad: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.loadAd();\n                        break;\n\n                    case WORTISE:\n                        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(activity, wortiseAppOpenId);\n                        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                            @Override", "                            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n\n                            @Override\n                            public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                wortiseAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                            }\n\n                            @Override", "                            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                wortiseAppOpenAd = null;\n                                isAppOpenAdLoaded = false;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to load app open ad: \" + adError);\n                            }\n\n                            @Override\n                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override", "                            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                isAppOpenAdLoaded = true;\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad loaded\");\n                            }\n\n                            @Override\n                            public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                            }\n                        });\n                        wortiseAppOpenAd.loadAd();\n                        break;\n\n                    default:\n                        //do nothing\n                        break;\n                }\n            }\n        }\n", "        public void showBackupAppOpenAd() {\n            switch (backupAdNetwork) {\n                case ADMOB:\n                case FAN_BIDDING_ADMOB:\n                case GOOGLE_AD_MANAGER:\n                case FAN_BIDDING_AD_MANAGER:\n                    if (appOpenAd != null) {\n                        appOpenAd.setFullScreenContentCallback(new FullScreenContentCallback() {\n                            @Override\n                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDismissedFullScreenContent() {\n                                appOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] close app open ad\");\n                            }\n\n                            @Override\n                            public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {\n                                appOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] failed to show app open ad: \" + adError.getMessage());\n                            }\n\n                            @Override", "                            public void onAdShowedFullScreenContent() {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] show app open ad\");\n                            }\n                        });\n                        appOpenAd.show(activity);\n                    }\n                    break;\n\n                case APPLOVIN:\n                case APPLOVIN_MAX:\n                    if (maxAppOpenAd != null) {\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override", "                    if (maxAppOpenAd != null) {\n                        maxAppOpenAd.setListener(new MaxAdListener() {\n                            @Override\n                            public void onAdLoaded(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] show app open ad\");\n                            }\n\n                            @Override", "                            public void onAdDisplayed(MaxAd ad) {\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] show app open ad\");\n                            }\n\n                            @Override\n                            public void onAdHidden(MaxAd ad) {\n                                maxAppOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] close app open ad\");\n                            }\n\n                            @Override", "                            public void onAdClicked(MaxAd ad) {\n\n                            }\n\n                            @Override\n                            public void onAdLoadFailed(String adUnitId, MaxError error) {\n                                maxAppOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad load failed: \" + error.getMessage());\n                            }\n\n                            @Override", "                            public void onAdDisplayFailed(MaxAd ad, MaxError error) {\n                                maxAppOpenAd = null;\n                                loadBackupAppOpenAd();\n                                Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad display failed: \" + error.getMessage());\n                            }\n                        });\n                        maxAppOpenAd.showAd();\n                    }\n                    break;\n\n                case WORTISE:", "                    if (wortiseAppOpenAd != null) {\n                        if (wortiseAppOpenAd.isAvailable()) {\n                            wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n                                @Override\n                                public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] close app open ad\");\n                                }\n\n                                @Override", "                                public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] close app open ad\");\n                                }\n\n                                @Override\n                                public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                                    wortiseAppOpenAd = null;\n                                    loadAppOpenAd();\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] app open ad load failed: \" + adError);\n                                }\n\n                                @Override", "                                public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n                                }\n\n                                @Override\n                                public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                                    Log.d(TAG, \"[\" + backupAdNetwork + \"] \" + \"[on resume] [backup] show app open ad\");\n                                }\n                            });\n                            wortiseAppOpenAd.showAd(activity);\n                        } else {\n                            showBackupAppOpenAd();\n                        }\n                    } else {\n                        showBackupAppOpenAd();\n                    }\n                    break;\n\n                default:\n                    //do nothing\n                    break;\n            }\n        }\n\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/format/AppOpenAdWortise.java", "chunked_list": ["package com.solodroid.ads.sdk.format;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n", "import com.solodroid.ads.sdk.util.OnShowAdCompleteListener;\n\nimport java.util.Date;\n\npublic class AppOpenAdWortise {\n\n    private static final String LOG_TAG = \"AppOpenAd\";\n    private com.wortise.ads.appopen.AppOpenAd wortiseAppOpenAd = null;\n    private boolean isLoadingAd = false;\n    public boolean isShowingAd = false;\n    private long loadTime = 0;\n\n    public AppOpenAdWortise() {\n    }\n", "    public boolean isShowingAd = false;\n    private long loadTime = 0;\n\n    public AppOpenAdWortise() {\n    }\n\n    public void loadAd(Context context, String wortiseAppOpenId) {\n        if (isLoadingAd || isAdAvailable()) {\n            return;\n        }\n        isLoadingAd = true;\n        wortiseAppOpenAd = new com.wortise.ads.appopen.AppOpenAd(context, wortiseAppOpenId);\n        wortiseAppOpenAd.setListener(wortiseAppOpenAdListener);\n        wortiseAppOpenAd.loadAd();\n    }\n", "    public boolean wasLoadTimeLessThanNHoursAgo(long numHours) {\n        long dateDifference = (new Date()).getTime() - loadTime;\n        long numMilliSecondsPerHour = 3600000;\n        return (dateDifference < (numMilliSecondsPerHour * numHours));\n    }\n\n    public boolean isAdAvailable() {\n        return wortiseAppOpenAd != null && wortiseAppOpenAd.isAvailable() && wasLoadTimeLessThanNHoursAgo(4);\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n", "    public void showAdIfAvailable(@NonNull final Activity activity, String appOpenAdUnitId) {\n        showAdIfAvailable(activity, appOpenAdUnitId, () -> {\n        });\n    }\n\n    public void showAdIfAvailable(@NonNull final Activity activity, String wortiseAppOpenAdUnitId, @NonNull OnShowAdCompleteListener onShowAdCompleteListener) {\n        if (isShowingAd) {\n            Log.d(LOG_TAG, \"The app open ad is already showing.\");\n            return;\n        }\n", "        if (!isAdAvailable()) {\n            Log.d(LOG_TAG, \"The app open ad is not ready yet.\");\n            onShowAdCompleteListener.onShowAdComplete();\n            loadAd(activity, wortiseAppOpenAdUnitId);\n            return;\n        }\n\n        Log.d(LOG_TAG, \"Will show ad.\");\n        wortiseAppOpenAd.setListener(new com.wortise.ads.appopen.AppOpenAd.Listener() {\n            @Override\n            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n            }\n\n            @Override", "            public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n            }\n\n            @Override\n            public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                wortiseAppOpenAd = null;\n                isShowingAd = false;\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, wortiseAppOpenAdUnitId);\n                Log.d(LOG_TAG, \"onAdDismissedFullScreenContent.\");\n            }\n\n            @Override", "            public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n                isLoadingAd = false;\n                wortiseAppOpenAd = null;\n                isShowingAd = false;\n                onShowAdCompleteListener.onShowAdComplete();\n                loadAd(activity, wortiseAppOpenAdUnitId);\n            }\n\n            @Override\n            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override", "            public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n                isLoadingAd = false;\n                loadTime = (new Date()).getTime();\n                Log.d(LOG_TAG, \"onAdLoaded.\");\n            }\n\n            @Override\n            public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n            }\n        });\n\n        isShowingAd = true;\n        wortiseAppOpenAd.showAd(activity);\n    }\n\n    com.wortise.ads.appopen.AppOpenAd.Listener wortiseAppOpenAdListener = new com.wortise.ads.appopen.AppOpenAd.Listener() {\n        @Override", "        public void onAppOpenClicked(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n        }\n\n        @Override\n        public void onAppOpenDismissed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n            wortiseAppOpenAd.loadAd();\n        }\n\n        @Override\n        public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n            isLoadingAd = false;\n            wortiseAppOpenAd.loadAd();\n        }\n\n        @Override", "        public void onAppOpenFailed(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd, @NonNull com.wortise.ads.AdError adError) {\n            isLoadingAd = false;\n            wortiseAppOpenAd.loadAd();\n        }\n\n        @Override\n        public void onAppOpenLoaded(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n            isLoadingAd = false;\n            loadTime = (new Date()).getTime();\n        }\n\n        @Override", "        public void onAppOpenShown(@NonNull com.wortise.ads.appopen.AppOpenAd appOpenAd) {\n\n        }\n    };\n\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/gdpr/GDPR.java", "chunked_list": ["package com.solodroid.ads.sdk.gdpr;\n\nimport android.app.Activity;\nimport android.util.Log;\n\nimport com.google.android.ump.ConsentForm;\nimport com.google.android.ump.ConsentInformation;\nimport com.google.android.ump.ConsentRequestParameters;\nimport com.google.android.ump.UserMessagingPlatform;\n\npublic class GDPR {\n\n    private ConsentInformation consentInformation;\n    ConsentForm consentForm;\n    Activity activity;\n\n    public GDPR(Activity activity) {\n        this.activity = activity;\n    }\n", "import com.google.android.ump.UserMessagingPlatform;\n\npublic class GDPR {\n\n    private ConsentInformation consentInformation;\n    ConsentForm consentForm;\n    Activity activity;\n\n    public GDPR(Activity activity) {\n        this.activity = activity;\n    }\n", "    public void updateGDPRConsentStatus() {\n        ConsentRequestParameters params = new ConsentRequestParameters.Builder().build();\n        consentInformation = UserMessagingPlatform.getConsentInformation(activity);\n        consentInformation.requestConsentInfoUpdate(activity, params, () -> {\n                    if (consentInformation.isConsentFormAvailable()) {\n                        loadForm(activity);\n                    }\n                },\n                formError -> {\n                });\n        Log.d(\"GDPR\", \"AdMob GDPR is selected\");\n    }\n", "    public void loadForm(Activity activity) {\n        UserMessagingPlatform.loadConsentForm(activity, consentForm -> {\n                    this.consentForm = consentForm;\n                    if (consentInformation.getConsentStatus() == ConsentInformation.ConsentStatus.REQUIRED) {\n                        consentForm.show(activity, formError -> {\n                            loadForm(activity);\n                        });\n                    }\n                },\n                formError -> {\n                }\n        );\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/gdpr/LegacyGDPR.java", "chunked_list": ["package com.solodroid.ads.sdk.gdpr;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\n\nimport com.google.ads.consent.ConsentForm;\nimport com.google.ads.consent.ConsentFormListener;\nimport com.google.ads.consent.ConsentInfoUpdateListener;\nimport com.google.ads.consent.ConsentInformation;", "import com.google.ads.consent.ConsentInfoUpdateListener;\nimport com.google.ads.consent.ConsentInformation;\nimport com.google.ads.consent.ConsentStatus;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class LegacyGDPR {\n\n    Activity activity;\n\n    public LegacyGDPR(Activity activity) {\n        this.activity = activity;\n    }\n", "    public static Bundle getBundleAd(Activity activity) {\n        Bundle extras = new Bundle();\n        ConsentInformation consentInformation = ConsentInformation.getInstance(activity);\n        if (consentInformation.getConsentStatus().equals(ConsentStatus.NON_PERSONALIZED)) {\n            extras.putString(\"npa\", \"1\");\n        }\n        return extras;\n    }\n\n    public void updateLegacyGDPRConsentStatus(String adMobPublisherId, String privacyPolicyUrl) {\n        ConsentInformation consentInformation = ConsentInformation.getInstance(activity);\n        // for debug needed\n        //consentInformation.addTestDevice(\"6E03755720167250AEBF7573B4E86B62\");\n        //consentInformation.setDebugGeography(DebugGeography.DEBUG_GEOGRAPHY_EEA);\n        consentInformation.requestConsentInfoUpdate(new String[]{adMobPublisherId}, new ConsentInfoUpdateListener() {\n            @Override", "    public void updateLegacyGDPRConsentStatus(String adMobPublisherId, String privacyPolicyUrl) {\n        ConsentInformation consentInformation = ConsentInformation.getInstance(activity);\n        // for debug needed\n        //consentInformation.addTestDevice(\"6E03755720167250AEBF7573B4E86B62\");\n        //consentInformation.setDebugGeography(DebugGeography.DEBUG_GEOGRAPHY_EEA);\n        consentInformation.requestConsentInfoUpdate(new String[]{adMobPublisherId}, new ConsentInfoUpdateListener() {\n            @Override\n            public void onConsentInfoUpdated(ConsentStatus consentStatus) {\n                // User's consent status successfully updated. Display the consent consentForm if Consent Status is UNKNOWN\n                if (consentStatus == ConsentStatus.UNKNOWN) {\n                    new GDPRForm(activity).displayConsentForm(privacyPolicyUrl);\n                }\n            }\n\n            @Override", "                if (consentStatus == ConsentStatus.UNKNOWN) {\n                    new GDPRForm(activity).displayConsentForm(privacyPolicyUrl);\n                }\n            }\n\n            @Override\n            public void onFailedToUpdateConsentInfo(String errorDescription) {\n                // Consent consentForm error.\n                Log.e(\"GDPR\", errorDescription);\n\n            }\n        });\n        Log.d(\"GDPR\", \"Legacy GDPR is selected\");\n    }\n\n    private static class GDPRForm {\n\n        private ConsentForm consentForm;\n        Activity activity;\n\n        private GDPRForm(Activity activity) {\n            this.activity = activity;\n        }\n\n        private void displayConsentForm(String privacyPolicyUrl) {\n            ConsentForm.Builder builder = new ConsentForm.Builder(activity, getUrlPrivacyPolicy(privacyPolicyUrl));\n            builder.withPersonalizedAdsOption();\n            builder.withNonPersonalizedAdsOption();\n            builder.withListener(new ConsentFormListener() {\n                @Override", "                public void onConsentFormLoaded() {\n                    // Consent consentForm loaded successfully.\n                    consentForm.show();\n                }\n\n                @Override\n                public void onConsentFormOpened() {\n                    // Consent consentForm was displayed.\n                }\n\n                @Override", "                public void onConsentFormClosed(ConsentStatus consentStatus, Boolean userPrefersAdFree) {\n                    // Consent consentForm was closed.\n                    Log.e(\"GDPR\", \"Status : \" + consentStatus);\n                }\n\n                @Override\n                public void onConsentFormError(String errorDescription) {\n                    // Consent consentForm error.\n                    Log.e(\"GDPR\", errorDescription);\n                }\n            });\n            consentForm = builder.build();\n            consentForm.load();\n        }\n\n        private URL getUrlPrivacyPolicy(String privacyPolicyUrl) {\n            URL mUrl = null;", "            try {\n                mUrl = new URL(privacyPolicyUrl);\n            } catch (MalformedURLException e) {\n                Log.e(\"GDPR\", e.getMessage());\n            }\n            return mUrl;\n        }\n    }\n\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnRewardedAdDismissedListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnRewardedAdDismissedListener {\n    void onRewardedAdDismissed();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/NativeTemplateStyle.java", "chunked_list": ["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,", "// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.solodroid.ads.sdk.util;\n\nimport android.graphics.Typeface;\nimport android.graphics.drawable.ColorDrawable;", "import android.graphics.Typeface;\nimport android.graphics.drawable.ColorDrawable;\n\n/**\n * A class containing the optional styling options for the Native Template. *\n */\npublic class NativeTemplateStyle {\n\n    // Call to action typeface.\n    private Typeface callToActionTextTypeface;\n\n    // Size of call to action text.\n    private float callToActionTextSize;\n\n    // Call to action typeface color in the form 0xAARRGGBB.\n    private int callToActionTypefaceColor;\n\n    // Call to action background color.\n    private ColorDrawable callToActionBackgroundColor;\n\n    // All templates have a primary text area which is populated by the native ad's headline.\n\n    // Primary text typeface.\n    private Typeface primaryTextTypeface;\n\n    // Size of primary text.\n    private float primaryTextSize;\n\n    // Primary text typeface color in the form 0xAARRGGBB.\n    private int primaryTextTypefaceColor;\n\n    // Primary text background color.\n    private ColorDrawable primaryTextBackgroundColor;\n\n    // The typeface, typeface color, and background color for the second row of text in the template.\n    // All templates have a secondary text area which is populated either by the body of the ad or\n    // by the rating of the app.\n\n    // Secondary text typeface.\n    private Typeface secondaryTextTypeface;\n\n    // Size of secondary text.\n    private float secondaryTextSize;\n\n    // Secondary text typeface color in the form 0xAARRGGBB.\n    private int secondaryTextTypefaceColor;\n\n    // Secondary text background color.\n    private ColorDrawable secondaryTextBackgroundColor;\n\n    // The typeface, typeface color, and background color for the third row of text in the template.\n    // The third row is used to display store name or the default tertiary text.\n\n    // Tertiary text typeface.\n    private Typeface tertiaryTextTypeface;\n\n    // Size of tertiary text.\n    private float tertiaryTextSize;\n\n    // Tertiary text typeface color in the form 0xAARRGGBB.\n    private int tertiaryTextTypefaceColor;\n\n    // Tertiary text background color.\n    private ColorDrawable tertiaryTextBackgroundColor;\n\n    // The background color for the bulk of the ad.\n    private ColorDrawable mainBackgroundColor;\n", "    public Typeface getCallToActionTextTypeface() {\n        return callToActionTextTypeface;\n    }\n\n    public float getCallToActionTextSize() {\n        return callToActionTextSize;\n    }\n\n    public int getCallToActionTypefaceColor() {\n        return callToActionTypefaceColor;\n    }\n", "    public int getCallToActionTypefaceColor() {\n        return callToActionTypefaceColor;\n    }\n\n    public ColorDrawable getCallToActionBackgroundColor() {\n        return callToActionBackgroundColor;\n    }\n\n    public Typeface getPrimaryTextTypeface() {\n        return primaryTextTypeface;\n    }\n", "    public Typeface getPrimaryTextTypeface() {\n        return primaryTextTypeface;\n    }\n\n    public float getPrimaryTextSize() {\n        return primaryTextSize;\n    }\n\n    public int getPrimaryTextTypefaceColor() {\n        return primaryTextTypefaceColor;\n    }\n", "    public int getPrimaryTextTypefaceColor() {\n        return primaryTextTypefaceColor;\n    }\n\n    public ColorDrawable getPrimaryTextBackgroundColor() {\n        return primaryTextBackgroundColor;\n    }\n\n    public Typeface getSecondaryTextTypeface() {\n        return secondaryTextTypeface;\n    }\n", "    public Typeface getSecondaryTextTypeface() {\n        return secondaryTextTypeface;\n    }\n\n    public float getSecondaryTextSize() {\n        return secondaryTextSize;\n    }\n\n    public int getSecondaryTextTypefaceColor() {\n        return secondaryTextTypefaceColor;\n    }\n", "    public int getSecondaryTextTypefaceColor() {\n        return secondaryTextTypefaceColor;\n    }\n\n    public ColorDrawable getSecondaryTextBackgroundColor() {\n        return secondaryTextBackgroundColor;\n    }\n\n    public Typeface getTertiaryTextTypeface() {\n        return tertiaryTextTypeface;\n    }\n", "    public Typeface getTertiaryTextTypeface() {\n        return tertiaryTextTypeface;\n    }\n\n    public float getTertiaryTextSize() {\n        return tertiaryTextSize;\n    }\n\n    public int getTertiaryTextTypefaceColor() {\n        return tertiaryTextTypefaceColor;\n    }\n", "    public int getTertiaryTextTypefaceColor() {\n        return tertiaryTextTypefaceColor;\n    }\n\n    public ColorDrawable getTertiaryTextBackgroundColor() {\n        return tertiaryTextBackgroundColor;\n    }\n\n    public ColorDrawable getMainBackgroundColor() {\n        return mainBackgroundColor;\n    }\n\n    /**\n     * A class that provides helper methods to build a style object. *\n     */", "    public ColorDrawable getMainBackgroundColor() {\n        return mainBackgroundColor;\n    }\n\n    /**\n     * A class that provides helper methods to build a style object. *\n     */\n    public static class Builder {\n\n        private NativeTemplateStyle styles;\n\n        public Builder() {\n            this.styles = new NativeTemplateStyle();\n        }\n", "        public Builder withCallToActionTextTypeface(Typeface callToActionTextTypeface) {\n            this.styles.callToActionTextTypeface = callToActionTextTypeface;\n            return this;\n        }\n\n        public Builder withCallToActionTextSize(float callToActionTextSize) {\n            this.styles.callToActionTextSize = callToActionTextSize;\n            return this;\n        }\n\n        public Builder withCallToActionTypefaceColor(int callToActionTypefaceColor) {\n            this.styles.callToActionTypefaceColor = callToActionTypefaceColor;\n            return this;\n        }\n", "        public Builder withCallToActionTypefaceColor(int callToActionTypefaceColor) {\n            this.styles.callToActionTypefaceColor = callToActionTypefaceColor;\n            return this;\n        }\n\n        public Builder withCallToActionBackgroundColor(ColorDrawable callToActionBackgroundColor) {\n            this.styles.callToActionBackgroundColor = callToActionBackgroundColor;\n            return this;\n        }\n\n        public Builder withPrimaryTextTypeface(Typeface primaryTextTypeface) {\n            this.styles.primaryTextTypeface = primaryTextTypeface;\n            return this;\n        }\n", "        public Builder withPrimaryTextTypeface(Typeface primaryTextTypeface) {\n            this.styles.primaryTextTypeface = primaryTextTypeface;\n            return this;\n        }\n\n        public Builder withPrimaryTextSize(float primaryTextSize) {\n            this.styles.primaryTextSize = primaryTextSize;\n            return this;\n        }\n\n        public Builder withPrimaryTextTypefaceColor(int primaryTextTypefaceColor) {\n            this.styles.primaryTextTypefaceColor = primaryTextTypefaceColor;\n            return this;\n        }\n", "        public Builder withPrimaryTextTypefaceColor(int primaryTextTypefaceColor) {\n            this.styles.primaryTextTypefaceColor = primaryTextTypefaceColor;\n            return this;\n        }\n\n        public Builder withPrimaryTextBackgroundColor(ColorDrawable primaryTextBackgroundColor) {\n            this.styles.primaryTextBackgroundColor = primaryTextBackgroundColor;\n            return this;\n        }\n\n        public Builder withSecondaryTextTypeface(Typeface secondaryTextTypeface) {\n            this.styles.secondaryTextTypeface = secondaryTextTypeface;\n            return this;\n        }\n", "        public Builder withSecondaryTextTypeface(Typeface secondaryTextTypeface) {\n            this.styles.secondaryTextTypeface = secondaryTextTypeface;\n            return this;\n        }\n\n        public Builder withSecondaryTextSize(float secondaryTextSize) {\n            this.styles.secondaryTextSize = secondaryTextSize;\n            return this;\n        }\n\n        public Builder withSecondaryTextTypefaceColor(int secondaryTextTypefaceColor) {\n            this.styles.secondaryTextTypefaceColor = secondaryTextTypefaceColor;\n            return this;\n        }\n", "        public Builder withSecondaryTextTypefaceColor(int secondaryTextTypefaceColor) {\n            this.styles.secondaryTextTypefaceColor = secondaryTextTypefaceColor;\n            return this;\n        }\n\n        public Builder withSecondaryTextBackgroundColor(ColorDrawable secondaryTextBackgroundColor) {\n            this.styles.secondaryTextBackgroundColor = secondaryTextBackgroundColor;\n            return this;\n        }\n\n        public Builder withTertiaryTextTypeface(Typeface tertiaryTextTypeface) {\n            this.styles.tertiaryTextTypeface = tertiaryTextTypeface;\n            return this;\n        }\n", "        public Builder withTertiaryTextTypeface(Typeface tertiaryTextTypeface) {\n            this.styles.tertiaryTextTypeface = tertiaryTextTypeface;\n            return this;\n        }\n\n        public Builder withTertiaryTextSize(float tertiaryTextSize) {\n            this.styles.tertiaryTextSize = tertiaryTextSize;\n            return this;\n        }\n\n        public Builder withTertiaryTextTypefaceColor(int tertiaryTextTypefaceColor) {\n            this.styles.tertiaryTextTypefaceColor = tertiaryTextTypefaceColor;\n            return this;\n        }\n", "        public Builder withTertiaryTextTypefaceColor(int tertiaryTextTypefaceColor) {\n            this.styles.tertiaryTextTypefaceColor = tertiaryTextTypefaceColor;\n            return this;\n        }\n\n        public Builder withTertiaryTextBackgroundColor(ColorDrawable tertiaryTextBackgroundColor) {\n            this.styles.tertiaryTextBackgroundColor = tertiaryTextBackgroundColor;\n            return this;\n        }\n\n        public Builder withMainBackgroundColor(ColorDrawable mainBackgroundColor) {\n            this.styles.mainBackgroundColor = mainBackgroundColor;\n            return this;\n        }\n", "        public Builder withMainBackgroundColor(ColorDrawable mainBackgroundColor) {\n            this.styles.mainBackgroundColor = mainBackgroundColor;\n            return this;\n        }\n\n        public NativeTemplateStyle build() {\n            return styles;\n        }\n    }\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnRewardedAdErrorListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnRewardedAdErrorListener {\n    void onRewardedAdError();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnInterstitialAdDismissedListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnInterstitialAdDismissedListener {\n    void onInterstitialAdDismissed();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/Tools.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\nimport static com.solodroid.ads.sdk.util.Constant.TOKEN;\nimport static com.solodroid.ads.sdk.util.Constant.VALUE;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.util.Base64;\nimport android.util.DisplayMetrics;\nimport android.view.Display;", "import android.util.DisplayMetrics;\nimport android.view.Display;\n\nimport com.google.ads.mediation.admob.AdMobAdapter;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.AdSize;\nimport com.google.android.gms.ads.admanager.AdManagerAdRequest;\nimport com.solodroid.ads.sdk.gdpr.LegacyGDPR;\n\nimport java.nio.charset.StandardCharsets;", "\nimport java.nio.charset.StandardCharsets;\n\npublic class Tools {\n\n    public static AdSize getAdSize(Activity activity) {\n        // Step 2 - Determine the screen width (less decorations) to use for the ad width.\n        Display display = activity.getWindowManager().getDefaultDisplay();\n        DisplayMetrics outMetrics = new DisplayMetrics();\n        display.getMetrics(outMetrics);\n        float widthPixels = outMetrics.widthPixels;\n        float density = outMetrics.density;\n        int adWidth = (int) (widthPixels / density);\n        // Step 3 - Get adaptive ad size and return for setting on the ad view.\n        return AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(activity, adWidth);\n    }\n", "    public static com.wortise.ads.AdSize getWortiseAdSize(Activity activity) {\n        Display display = activity.getWindowManager().getDefaultDisplay();\n        DisplayMetrics outMetrics = new DisplayMetrics();\n        display.getMetrics(outMetrics);\n        float widthPixels = outMetrics.widthPixels;\n        float density = outMetrics.density;\n        int adWidth = (int) (widthPixels / density);\n        return com.wortise.ads.AdSize.getAnchoredAdaptiveBannerAdSize(activity, adWidth);\n    }\n\n    public static AdSize getAdSizeMREC() {\n        return AdSize.MEDIUM_RECTANGLE;\n    }\n", "    public static AdSize getAdSizeMREC() {\n        return AdSize.MEDIUM_RECTANGLE;\n    }\n\n    public static AdRequest getAdRequest(Activity activity, Boolean legacyGDPR) {\n        //Bundle extras = new FacebookExtras().setNativeBanner(true).build();\n        if (legacyGDPR) {\n            return new AdRequest.Builder()\n                    .addNetworkExtrasBundle(AdMobAdapter.class, LegacyGDPR.getBundleAd(activity))\n                    //.addNetworkExtrasBundle(FacebookAdapter.class, extras)\n                    .build();\n        } else {\n            return new AdRequest.Builder()\n                    //.addNetworkExtrasBundle(FacebookAdapter.class, extras)\n                    .build();\n        }\n    }\n\n    @SuppressLint(\"VisibleForTests\")", "    public static AdManagerAdRequest getGoogleAdManagerRequest() {\n        return new AdManagerAdRequest.Builder()\n                .build();\n    }\n\n    public static String decode(String code) {\n        return decodeBase64(decodeBase64(decodeBase64(code)));\n    }\n\n    public static String decodeBase64(String code) {\n        byte[] valueDecoded = Base64.decode(code.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);\n        return new String(valueDecoded);\n    }\n", "    public static String decodeBase64(String code) {\n        byte[] valueDecoded = Base64.decode(code.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);\n        return new String(valueDecoded);\n    }\n\n    public static String jsonDecode(String code) {\n        String data = code.replace(TOKEN, VALUE);\n        byte[] valueDecoded = Base64.decode(data.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);\n        return new String(valueDecoded);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/TemplateView.java", "chunked_list": ["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,", "// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.solodroid.ads.sdk.util;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;", "import android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.Drawable;\nimport android.os.Build;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\nimport android.view.LayoutInflater;\nimport android.widget.Button;\nimport android.widget.FrameLayout;", "import android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RatingBar;\nimport android.widget.TextView;\n\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\n", "import androidx.annotation.RequiresApi;\n\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.google.android.gms.ads.nativead.NativeAd;\nimport com.google.android.gms.ads.nativead.NativeAd.Image;\nimport com.google.android.gms.ads.nativead.NativeAdView;\nimport com.solodroid.ads.sdk.R;\n\n/**\n * Base class for a template view. *", "/**\n * Base class for a template view. *\n */\npublic class TemplateView extends FrameLayout {\n\n    private int templateType;\n    private NativeTemplateStyle styles;\n    private NativeAd nativeAd;\n    private NativeAdView nativeAdView;\n\n    private TextView primaryView;\n    private TextView secondaryView;\n    private RatingBar ratingBar;\n    private TextView tertiaryView;\n    private ImageView iconView;\n    private MediaView mediaView;\n    private Button callToActionView;\n    private LinearLayout background;\n\n    private static final String MEDIUM_TEMPLATE = \"medium_template\";\n    private static final String SMALL_TEMPLATE = \"small_template\";\n\n    public TemplateView(Context context) {\n        super(context);\n    }\n\n    public TemplateView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        initView(context, attrs);\n    }\n\n    public TemplateView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n    public TemplateView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        initView(context, attrs);\n    }\n", "    public void setStyles(NativeTemplateStyle styles) {\n        this.styles = styles;\n        this.applyStyles();\n    }\n\n    public NativeAdView getNativeAdView() {\n        return nativeAdView;\n    }\n\n    private void applyStyles() {\n\n        Drawable mainBackground = styles.getMainBackgroundColor();", "        if (mainBackground != null) {\n            background.setBackground(mainBackground);\n            if (primaryView != null) {\n                primaryView.setBackground(mainBackground);\n            }\n            if (secondaryView != null) {\n                secondaryView.setBackground(mainBackground);\n            }\n            if (tertiaryView != null) {\n                tertiaryView.setBackground(mainBackground);\n            }\n        }\n\n        Typeface primary = styles.getPrimaryTextTypeface();", "            if (tertiaryView != null) {\n                tertiaryView.setBackground(mainBackground);\n            }\n        }\n\n        Typeface primary = styles.getPrimaryTextTypeface();\n        if (primary != null && primaryView != null) {\n            primaryView.setTypeface(primary);\n        }\n\n        Typeface secondary = styles.getSecondaryTextTypeface();", "        if (secondary != null && secondaryView != null) {\n            secondaryView.setTypeface(secondary);\n        }\n\n        Typeface tertiary = styles.getTertiaryTextTypeface();\n        if (tertiary != null && tertiaryView != null) {\n            tertiaryView.setTypeface(tertiary);\n        }\n\n        Typeface ctaTypeface = styles.getCallToActionTextTypeface();\n        if (ctaTypeface != null && callToActionView != null) {\n            callToActionView.setTypeface(ctaTypeface);\n        }\n\n        int primaryTypefaceColor = styles.getPrimaryTextTypefaceColor();", "        if (ctaTypeface != null && callToActionView != null) {\n            callToActionView.setTypeface(ctaTypeface);\n        }\n\n        int primaryTypefaceColor = styles.getPrimaryTextTypefaceColor();\n        if (primaryTypefaceColor > 0 && primaryView != null) {\n            primaryView.setTextColor(primaryTypefaceColor);\n        }\n\n        int secondaryTypefaceColor = styles.getSecondaryTextTypefaceColor();\n        if (secondaryTypefaceColor > 0 && secondaryView != null) {\n            secondaryView.setTextColor(secondaryTypefaceColor);\n        }\n\n        int tertiaryTypefaceColor = styles.getTertiaryTextTypefaceColor();", "        if (secondaryTypefaceColor > 0 && secondaryView != null) {\n            secondaryView.setTextColor(secondaryTypefaceColor);\n        }\n\n        int tertiaryTypefaceColor = styles.getTertiaryTextTypefaceColor();\n        if (tertiaryTypefaceColor > 0 && tertiaryView != null) {\n            tertiaryView.setTextColor(tertiaryTypefaceColor);\n        }\n\n        int ctaTypefaceColor = styles.getCallToActionTypefaceColor();\n        if (ctaTypefaceColor > 0 && callToActionView != null) {\n            callToActionView.setTextColor(ctaTypefaceColor);\n        }\n\n        float ctaTextSize = styles.getCallToActionTextSize();", "        if (ctaTypefaceColor > 0 && callToActionView != null) {\n            callToActionView.setTextColor(ctaTypefaceColor);\n        }\n\n        float ctaTextSize = styles.getCallToActionTextSize();\n        if (ctaTextSize > 0 && callToActionView != null) {\n            callToActionView.setTextSize(ctaTextSize);\n        }\n\n        float primaryTextSize = styles.getPrimaryTextSize();\n        if (primaryTextSize > 0 && primaryView != null) {\n            primaryView.setTextSize(primaryTextSize);\n        }\n\n        float secondaryTextSize = styles.getSecondaryTextSize();", "        if (primaryTextSize > 0 && primaryView != null) {\n            primaryView.setTextSize(primaryTextSize);\n        }\n\n        float secondaryTextSize = styles.getSecondaryTextSize();\n        if (secondaryTextSize > 0 && secondaryView != null) {\n            secondaryView.setTextSize(secondaryTextSize);\n        }\n\n        float tertiaryTextSize = styles.getTertiaryTextSize();\n        if (tertiaryTextSize > 0 && tertiaryView != null) {\n            tertiaryView.setTextSize(tertiaryTextSize);\n        }\n\n        Drawable ctaBackground = styles.getCallToActionBackgroundColor();", "        if (tertiaryTextSize > 0 && tertiaryView != null) {\n            tertiaryView.setTextSize(tertiaryTextSize);\n        }\n\n        Drawable ctaBackground = styles.getCallToActionBackgroundColor();\n        if (ctaBackground != null && callToActionView != null) {\n            callToActionView.setBackground(ctaBackground);\n        }\n\n        Drawable primaryBackground = styles.getPrimaryTextBackgroundColor();\n        if (primaryBackground != null && primaryView != null) {\n            primaryView.setBackground(primaryBackground);\n        }\n\n        Drawable secondaryBackground = styles.getSecondaryTextBackgroundColor();", "        if (primaryBackground != null && primaryView != null) {\n            primaryView.setBackground(primaryBackground);\n        }\n\n        Drawable secondaryBackground = styles.getSecondaryTextBackgroundColor();\n        if (secondaryBackground != null && secondaryView != null) {\n            secondaryView.setBackground(secondaryBackground);\n        }\n\n        Drawable tertiaryBackground = styles.getTertiaryTextBackgroundColor();\n        if (tertiaryBackground != null && tertiaryView != null) {\n            tertiaryView.setBackground(tertiaryBackground);\n        }\n\n        invalidate();\n        requestLayout();\n    }\n\n    private boolean adHasOnlyStore(NativeAd nativeAd) {\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        return !TextUtils.isEmpty(store) && TextUtils.isEmpty(advertiser);\n    }\n", "        if (tertiaryBackground != null && tertiaryView != null) {\n            tertiaryView.setBackground(tertiaryBackground);\n        }\n\n        invalidate();\n        requestLayout();\n    }\n\n    private boolean adHasOnlyStore(NativeAd nativeAd) {\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        return !TextUtils.isEmpty(store) && TextUtils.isEmpty(advertiser);\n    }\n", "    public void setNativeAd(NativeAd nativeAd) {\n        this.nativeAd = nativeAd;\n\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        String headline = nativeAd.getHeadline();\n        String body = nativeAd.getBody();\n        String cta = nativeAd.getCallToAction();\n        Double starRating = nativeAd.getStarRating();\n        Image icon = nativeAd.getIcon();\n\n        String secondaryText;\n\n        nativeAdView.setCallToActionView(callToActionView);\n        nativeAdView.setHeadlineView(primaryView);\n        nativeAdView.setMediaView(mediaView);\n        secondaryView.setVisibility(VISIBLE);", "        if (adHasOnlyStore(nativeAd)) {\n            nativeAdView.setStoreView(secondaryView);\n            secondaryText = store;\n        } else if (!TextUtils.isEmpty(advertiser)) {\n            nativeAdView.setAdvertiserView(secondaryView);\n            secondaryText = advertiser;\n        } else {\n            secondaryText = \"\";\n        }\n\n        primaryView.setText(headline);\n        callToActionView.setText(cta);\n\n        //  Set the secondary view to be the star rating if available.", "        if (starRating != null && starRating > 0) {\n            secondaryView.setVisibility(GONE);\n            ratingBar.setVisibility(VISIBLE);\n            ratingBar.setMax(5);\n            nativeAdView.setStarRatingView(ratingBar);\n        } else {\n            secondaryView.setText(secondaryText);\n            secondaryView.setVisibility(VISIBLE);\n            ratingBar.setVisibility(GONE);\n        }\n", "        if (icon != null) {\n            iconView.setVisibility(VISIBLE);\n            iconView.setImageDrawable(icon.getDrawable());\n        } else {\n            iconView.setVisibility(GONE);\n        }\n\n        if (tertiaryView != null) {\n            tertiaryView.setText(body);\n            nativeAdView.setBodyView(tertiaryView);\n        }\n\n        nativeAdView.setNativeAd(nativeAd);\n    }\n\n    /**\n     * To prevent memory leaks, make sure to destroy your ad when you don't need it anymore. This\n     * selectCategory does not destroy the template view.\n     * https://developers.google.com/admob/android/native-unified#destroy_ad\n     */", "    public void destroyNativeAd() {\n        nativeAd.destroy();\n    }\n\n    private void initView(Context context, AttributeSet attributeSet) {\n\n        TypedArray attributes = context.getTheme().obtainStyledAttributes(attributeSet, R.styleable.TemplateView, 0, 0);\n\n        try {\n            templateType = attributes.getResourceId(R.styleable.TemplateView_gnt_template_type, R.layout.gnt_admob_medium_template_view);\n        } finally {\n            attributes.recycle();\n        }\n        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(templateType, this);\n    }\n\n    @Override", "        try {\n            templateType = attributes.getResourceId(R.styleable.TemplateView_gnt_template_type, R.layout.gnt_admob_medium_template_view);\n        } finally {\n            attributes.recycle();\n        }\n        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(templateType, this);\n    }\n\n    @Override\n    public void onFinishInflate() {\n        super.onFinishInflate();\n        nativeAdView = findViewById(R.id.native_ad_view);\n        primaryView = findViewById(R.id.primary);\n        secondaryView = findViewById(R.id.secondary);\n        tertiaryView = findViewById(R.id.body);\n\n        ratingBar = findViewById(R.id.rating_bar);\n        ratingBar.setEnabled(false);\n\n        callToActionView = findViewById(R.id.cta);\n        iconView = findViewById(R.id.icon);\n\n        mediaView = findViewById(R.id.media_view);\n        //mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n\n        background = findViewById(R.id.background);\n    }\n}\n", "    public void onFinishInflate() {\n        super.onFinishInflate();\n        nativeAdView = findViewById(R.id.native_ad_view);\n        primaryView = findViewById(R.id.primary);\n        secondaryView = findViewById(R.id.secondary);\n        tertiaryView = findViewById(R.id.body);\n\n        ratingBar = findViewById(R.id.rating_bar);\n        ratingBar.setEnabled(false);\n\n        callToActionView = findViewById(R.id.cta);\n        iconView = findViewById(R.id.icon);\n\n        mediaView = findViewById(R.id.media_view);\n        //mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n\n        background = findViewById(R.id.background);\n    }\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/AdManagerTemplateView.java", "chunked_list": ["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,", "// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.solodroid.ads.sdk.util;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;", "import android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.Drawable;\nimport android.os.Build;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\nimport android.view.LayoutInflater;\nimport android.widget.Button;\nimport android.widget.FrameLayout;", "import android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RatingBar;\nimport android.widget.TextView;\n\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\n", "import androidx.annotation.RequiresApi;\n\nimport com.google.android.gms.ads.nativead.MediaView;\nimport com.google.android.gms.ads.nativead.NativeAd;\nimport com.google.android.gms.ads.nativead.NativeAd.Image;\nimport com.google.android.gms.ads.nativead.NativeAdView;\nimport com.solodroid.ads.sdk.R;\n\n/**\n * Base class for a template view. *", "/**\n * Base class for a template view. *\n */\npublic class AdManagerTemplateView extends FrameLayout {\n\n    private int templateType;\n    private NativeTemplateStyle styles;\n    private NativeAd nativeAd;\n    private NativeAdView nativeAdView;\n\n    private TextView primaryView;\n    private TextView secondaryView;\n    private RatingBar ratingBar;\n    private TextView tertiaryView;\n    private ImageView iconView;\n    private MediaView mediaView;\n    private Button callToActionView;\n    private LinearLayout background;\n\n    private static final String MEDIUM_TEMPLATE = \"medium_template\";\n    private static final String SMALL_TEMPLATE = \"small_template\";\n\n    public AdManagerTemplateView(Context context) {\n        super(context);\n    }\n\n    public AdManagerTemplateView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        initView(context, attrs);\n    }\n\n    public AdManagerTemplateView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n    public AdManagerTemplateView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        initView(context, attrs);\n    }\n", "    public void setStyles(NativeTemplateStyle styles) {\n        this.styles = styles;\n        this.applyStyles();\n    }\n\n    public NativeAdView getNativeAdView() {\n        return nativeAdView;\n    }\n\n    private void applyStyles() {\n\n        Drawable mainBackground = styles.getMainBackgroundColor();", "        if (mainBackground != null) {\n            background.setBackground(mainBackground);\n            if (primaryView != null) {\n                primaryView.setBackground(mainBackground);\n            }\n            if (secondaryView != null) {\n                secondaryView.setBackground(mainBackground);\n            }\n            if (tertiaryView != null) {\n                tertiaryView.setBackground(mainBackground);\n            }\n        }\n\n        Typeface primary = styles.getPrimaryTextTypeface();", "            if (tertiaryView != null) {\n                tertiaryView.setBackground(mainBackground);\n            }\n        }\n\n        Typeface primary = styles.getPrimaryTextTypeface();\n        if (primary != null && primaryView != null) {\n            primaryView.setTypeface(primary);\n        }\n\n        Typeface secondary = styles.getSecondaryTextTypeface();", "        if (secondary != null && secondaryView != null) {\n            secondaryView.setTypeface(secondary);\n        }\n\n        Typeface tertiary = styles.getTertiaryTextTypeface();\n        if (tertiary != null && tertiaryView != null) {\n            tertiaryView.setTypeface(tertiary);\n        }\n\n        Typeface ctaTypeface = styles.getCallToActionTextTypeface();\n        if (ctaTypeface != null && callToActionView != null) {\n            callToActionView.setTypeface(ctaTypeface);\n        }\n\n        int primaryTypefaceColor = styles.getPrimaryTextTypefaceColor();", "        if (ctaTypeface != null && callToActionView != null) {\n            callToActionView.setTypeface(ctaTypeface);\n        }\n\n        int primaryTypefaceColor = styles.getPrimaryTextTypefaceColor();\n        if (primaryTypefaceColor > 0 && primaryView != null) {\n            primaryView.setTextColor(primaryTypefaceColor);\n        }\n\n        int secondaryTypefaceColor = styles.getSecondaryTextTypefaceColor();\n        if (secondaryTypefaceColor > 0 && secondaryView != null) {\n            secondaryView.setTextColor(secondaryTypefaceColor);\n        }\n\n        int tertiaryTypefaceColor = styles.getTertiaryTextTypefaceColor();", "        if (secondaryTypefaceColor > 0 && secondaryView != null) {\n            secondaryView.setTextColor(secondaryTypefaceColor);\n        }\n\n        int tertiaryTypefaceColor = styles.getTertiaryTextTypefaceColor();\n        if (tertiaryTypefaceColor > 0 && tertiaryView != null) {\n            tertiaryView.setTextColor(tertiaryTypefaceColor);\n        }\n\n        int ctaTypefaceColor = styles.getCallToActionTypefaceColor();\n        if (ctaTypefaceColor > 0 && callToActionView != null) {\n            callToActionView.setTextColor(ctaTypefaceColor);\n        }\n\n        float ctaTextSize = styles.getCallToActionTextSize();", "        if (ctaTypefaceColor > 0 && callToActionView != null) {\n            callToActionView.setTextColor(ctaTypefaceColor);\n        }\n\n        float ctaTextSize = styles.getCallToActionTextSize();\n        if (ctaTextSize > 0 && callToActionView != null) {\n            callToActionView.setTextSize(ctaTextSize);\n        }\n\n        float primaryTextSize = styles.getPrimaryTextSize();\n        if (primaryTextSize > 0 && primaryView != null) {\n            primaryView.setTextSize(primaryTextSize);\n        }\n\n        float secondaryTextSize = styles.getSecondaryTextSize();", "        if (primaryTextSize > 0 && primaryView != null) {\n            primaryView.setTextSize(primaryTextSize);\n        }\n\n        float secondaryTextSize = styles.getSecondaryTextSize();\n        if (secondaryTextSize > 0 && secondaryView != null) {\n            secondaryView.setTextSize(secondaryTextSize);\n        }\n\n        float tertiaryTextSize = styles.getTertiaryTextSize();\n        if (tertiaryTextSize > 0 && tertiaryView != null) {\n            tertiaryView.setTextSize(tertiaryTextSize);\n        }\n\n        Drawable ctaBackground = styles.getCallToActionBackgroundColor();", "        if (tertiaryTextSize > 0 && tertiaryView != null) {\n            tertiaryView.setTextSize(tertiaryTextSize);\n        }\n\n        Drawable ctaBackground = styles.getCallToActionBackgroundColor();\n        if (ctaBackground != null && callToActionView != null) {\n            callToActionView.setBackground(ctaBackground);\n        }\n\n        Drawable primaryBackground = styles.getPrimaryTextBackgroundColor();\n        if (primaryBackground != null && primaryView != null) {\n            primaryView.setBackground(primaryBackground);\n        }\n\n        Drawable secondaryBackground = styles.getSecondaryTextBackgroundColor();", "        if (primaryBackground != null && primaryView != null) {\n            primaryView.setBackground(primaryBackground);\n        }\n\n        Drawable secondaryBackground = styles.getSecondaryTextBackgroundColor();\n        if (secondaryBackground != null && secondaryView != null) {\n            secondaryView.setBackground(secondaryBackground);\n        }\n\n        Drawable tertiaryBackground = styles.getTertiaryTextBackgroundColor();\n        if (tertiaryBackground != null && tertiaryView != null) {\n            tertiaryView.setBackground(tertiaryBackground);\n        }\n\n        invalidate();\n        requestLayout();\n    }\n\n    private boolean adHasOnlyStore(NativeAd nativeAd) {\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        return !TextUtils.isEmpty(store) && TextUtils.isEmpty(advertiser);\n    }\n", "        if (tertiaryBackground != null && tertiaryView != null) {\n            tertiaryView.setBackground(tertiaryBackground);\n        }\n\n        invalidate();\n        requestLayout();\n    }\n\n    private boolean adHasOnlyStore(NativeAd nativeAd) {\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        return !TextUtils.isEmpty(store) && TextUtils.isEmpty(advertiser);\n    }\n", "    public void setNativeAd(NativeAd nativeAd) {\n        this.nativeAd = nativeAd;\n\n        String store = nativeAd.getStore();\n        String advertiser = nativeAd.getAdvertiser();\n        String headline = nativeAd.getHeadline();\n        String body = nativeAd.getBody();\n        String cta = nativeAd.getCallToAction();\n        Double starRating = nativeAd.getStarRating();\n        Image icon = nativeAd.getIcon();\n\n        String secondaryText;\n\n        nativeAdView.setCallToActionView(callToActionView);\n        nativeAdView.setHeadlineView(primaryView);\n        nativeAdView.setMediaView(mediaView);\n        secondaryView.setVisibility(VISIBLE);", "        if (adHasOnlyStore(nativeAd)) {\n            nativeAdView.setStoreView(secondaryView);\n            secondaryText = store;\n        } else if (!TextUtils.isEmpty(advertiser)) {\n            nativeAdView.setAdvertiserView(secondaryView);\n            secondaryText = advertiser;\n        } else {\n            secondaryText = \"\";\n        }\n\n        primaryView.setText(headline);\n        callToActionView.setText(cta);\n\n        //  Set the secondary view to be the star rating if available.", "        if (starRating != null && starRating > 0) {\n            secondaryView.setVisibility(GONE);\n            ratingBar.setVisibility(VISIBLE);\n            ratingBar.setMax(5);\n            nativeAdView.setStarRatingView(ratingBar);\n        } else {\n            secondaryView.setText(secondaryText);\n            secondaryView.setVisibility(VISIBLE);\n            ratingBar.setVisibility(GONE);\n        }\n", "        if (icon != null) {\n            iconView.setVisibility(VISIBLE);\n            iconView.setImageDrawable(icon.getDrawable());\n        } else {\n            iconView.setVisibility(GONE);\n        }\n\n        if (tertiaryView != null) {\n            tertiaryView.setText(body);\n            nativeAdView.setBodyView(tertiaryView);\n        }\n\n        nativeAdView.setNativeAd(nativeAd);\n    }\n\n    /**\n     * To prevent memory leaks, make sure to destroy your ad when you don't need it anymore. This\n     * selectCategory does not destroy the template view.\n     * https://developers.google.com/admob/android/native-unified#destroy_ad\n     */", "    public void destroyNativeAd() {\n        nativeAd.destroy();\n    }\n\n    private void initView(Context context, AttributeSet attributeSet) {\n\n        TypedArray attributes = context.getTheme().obtainStyledAttributes(attributeSet, R.styleable.TemplateView, 0, 0);\n\n        try {\n            templateType = attributes.getResourceId(R.styleable.TemplateView_gnt_template_type, R.layout.gnt_ad_manager_medium_template_view);\n        } finally {\n            attributes.recycle();\n        }\n        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(templateType, this);\n    }\n\n    @Override", "        try {\n            templateType = attributes.getResourceId(R.styleable.TemplateView_gnt_template_type, R.layout.gnt_ad_manager_medium_template_view);\n        } finally {\n            attributes.recycle();\n        }\n        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(templateType, this);\n    }\n\n    @Override\n    public void onFinishInflate() {\n        super.onFinishInflate();\n        nativeAdView = findViewById(R.id.native_ad_view);\n        primaryView = findViewById(R.id.primary);\n        secondaryView = findViewById(R.id.secondary);\n        tertiaryView = findViewById(R.id.body);\n\n        ratingBar = findViewById(R.id.rating_bar);\n        ratingBar.setEnabled(false);\n\n        callToActionView = findViewById(R.id.cta);\n        iconView = findViewById(R.id.icon);\n\n        mediaView = findViewById(R.id.ad_manager_media_view);\n        //mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n\n        background = findViewById(R.id.ad_manager_background);\n    }\n}\n", "    public void onFinishInflate() {\n        super.onFinishInflate();\n        nativeAdView = findViewById(R.id.native_ad_view);\n        primaryView = findViewById(R.id.primary);\n        secondaryView = findViewById(R.id.secondary);\n        tertiaryView = findViewById(R.id.body);\n\n        ratingBar = findViewById(R.id.rating_bar);\n        ratingBar.setEnabled(false);\n\n        callToActionView = findViewById(R.id.cta);\n        iconView = findViewById(R.id.icon);\n\n        mediaView = findViewById(R.id.ad_manager_media_view);\n        //mediaView.setImageScaleType(ImageView.ScaleType.CENTER_CROP);\n\n        background = findViewById(R.id.ad_manager_background);\n    }\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnRewardedAdLoadedListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnRewardedAdLoadedListener {\n    void onRewardedAdLoaded();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnRewardedAdCompleteListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnRewardedAdCompleteListener {\n    void onRewardedAdComplete();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnShowAdCompleteListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnShowAdCompleteListener {\n    void onShowAdComplete();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/OnInterstitialAdShowedListener.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic interface OnInterstitialAdShowedListener {\n    void onInterstitialAdShowed();\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/util/Constant.java", "chunked_list": ["package com.solodroid.ads.sdk.util;\n\npublic class Constant {\n\n    //ad status\n    public static final String AD_STATUS_ON = \"1\";\n\n    //ad option\n    public static final String ADMOB = \"admob\";\n    public static final String GOOGLE_AD_MANAGER = \"google_ad_manager\";\n    public static final String FAN = \"fan\";", "    public static final String ADMOB = \"admob\";\n    public static final String GOOGLE_AD_MANAGER = \"google_ad_manager\";\n    public static final String FAN = \"fan\";\n    public static final String FACEBOOK = \"facebook\";\n    public static final String STARTAPP = \"startapp\";\n    public static final String UNITY = \"unity\";\n    public static final String APPLOVIN = \"applovin\";\n    public static final String APPLOVIN_MAX = \"applovin_max\";\n    public static final String APPLOVIN_DISCOVERY = \"applovin_discovery\";\n    public static final String IRONSOURCE = \"ironsource\";\n    public static final String WORTISE = \"wortise\";", "    public static final String APPLOVIN_DISCOVERY = \"applovin_discovery\";\n    public static final String IRONSOURCE = \"ironsource\";\n    public static final String WORTISE = \"wortise\";\n    public static final String NONE = \"none\";\n    //mopub ads is deprecated and has been acquired by applovin\n    public static final String MOPUB = \"mopub\";\n\n    //ad bidding\n    public static final String FAN_BIDDING_ADMOB = \"fan_bidding_admob\";\n    public static final String FAN_BIDDING_AD_MANAGER = \"fan_bidding_ad_manager\";\n    public static final String FAN_BIDDING_APPLOVIN_MAX = \"fan_bidding_applovin_max\";", "    public static final String FAN_BIDDING_ADMOB = \"fan_bidding_admob\";\n    public static final String FAN_BIDDING_AD_MANAGER = \"fan_bidding_ad_manager\";\n    public static final String FAN_BIDDING_APPLOVIN_MAX = \"fan_bidding_applovin_max\";\n    public static final String FAN_BIDDING_IRONSOURCE = \"fan_bidding_ironsource\";\n\n    //native ad styles\n    public static final String STYLE_SMALL = \"small\";\n    public static final String STYLE_MEDIUM = \"medium\";\n\n    public static final String STYLE_RADIO = \"radio\";\n    public static final String STYLE_NEWS = \"news\";", "    public static final String STYLE_RADIO = \"radio\";\n    public static final String STYLE_NEWS = \"news\";\n    public static final String STYLE_VIDEO_SMALL = \"video_small\";\n    public static final String STYLE_VIDEO_LARGE = \"video_large\";\n    public static final String STYLE_STREAM = \"stream\";\n\n    //startapp native ad image parameters\n    public static final int STARTAPP_IMAGE_XSMALL = 1; //for image size 100px X 100px\n    public static final int STARTAPP_IMAGE_SMALL = 2; //for image size 150px X 150px\n    public static final int STARTAPP_IMAGE_MEDIUM = 3; //for image size 340px X 340px\n    public static final int STARTAPP_IMAGE_LARGE = 4; //for image size 1200px X 628px\n\n    //unity banner ad size", "    public static final int STARTAPP_IMAGE_SMALL = 2; //for image size 150px X 150px\n    public static final int STARTAPP_IMAGE_MEDIUM = 3; //for image size 340px X 340px\n    public static final int STARTAPP_IMAGE_LARGE = 4; //for image size 1200px X 628px\n\n    //unity banner ad size\n    public static final int UNITY_ADS_BANNER_WIDTH_MEDIUM = 320;\n    public static final int UNITY_ADS_BANNER_HEIGHT_MEDIUM = 50;\n    public static final int UNITY_ADS_BANNER_WIDTH_LARGE = 728;\n    public static final int UNITY_ADS_BANNER_HEIGHT_LARGE = 90;\n    public static final String TOKEN = \"MkzVBvyZ2aU2ESAd2Q\";\n    public static final String VALUE = \"\";\n\n}\n", "    public static final int UNITY_ADS_BANNER_HEIGHT_LARGE = 90;\n    public static final String TOKEN = \"MkzVBvyZ2aU2ESAd2Q\";\n    public static final String VALUE = \"\";\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/ui/BannerAdView.java", "chunked_list": ["package com.solodroid.ads.sdk.ui;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.LinearLayout;\n\nimport androidx.annotation.Nullable;\n\nimport com.solodroid.ads.sdk.R;", "\nimport com.solodroid.ads.sdk.R;\n\npublic class BannerAdView extends LinearLayout {\n\n    private Context mContext;\n    private AttributeSet attrs;\n    private int styleAttr;\n    private View view;\n\n    public BannerAdView(Context context) {\n        super(context);\n        this.mContext = context;\n        initView();\n    }\n\n    public BannerAdView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        this.mContext = context;\n        this.attrs = attrs;\n        initView();\n    }\n\n    public BannerAdView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        this.mContext = context;\n        this.attrs = attrs;\n        this.styleAttr = defStyleAttr;\n        initView();\n    }\n\n    public BannerAdView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n    }\n\n    private void initView() {\n        this.view = this;\n        inflate(mContext, R.layout.view_banner_ad, this);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/ui/MediumNativeAdView.java", "chunked_list": ["package com.solodroid.ads.sdk.ui;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;", "import android.widget.Button;\nimport android.widget.LinearLayout;\n\nimport androidx.annotation.Nullable;\n\nimport com.solodroid.ads.sdk.R;\n\npublic class MediumNativeAdView extends LinearLayout {\n\n    private Context mContext;\n    private AttributeSet attrs;\n    private int styleAttr;\n    private View view;\n    private Drawable adMobDrawable;\n    private Drawable startAppDrawable;\n\n    private Button btnNativeAdMob;\n    private Button btnNativeStartApp;\n\n    public MediumNativeAdView(Context context) {\n        super(context);\n        this.mContext = context;\n        initView();\n    }\n\n    public MediumNativeAdView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        this.mContext = context;\n        this.attrs = attrs;\n        initView();\n    }\n\n    public MediumNativeAdView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        this.mContext = context;\n        this.attrs = attrs;\n        this.styleAttr = defStyleAttr;\n        initView();\n    }\n\n    public MediumNativeAdView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n    }\n\n    @SuppressLint(\"CustomViewStyleable\")\n    private void initView() {\n        this.view = this;\n        inflate(mContext, R.layout.view_native_ad_medium, this);\n        TypedArray arr = mContext.obtainStyledAttributes(attrs, R.styleable.NativeAdView, styleAttr, 0);\n\n        adMobDrawable = arr.getDrawable(R.styleable.NativeAdView_adMobNativeButton);\n        startAppDrawable = arr.getDrawable(R.styleable.NativeAdView_startappNativeButton);\n\n        btnNativeAdMob = findViewById(R.id.cta);\n        btnNativeStartApp = findViewById(R.id.startapp_native_button);\n", "        if (adMobDrawable != null) {\n            setAdMobNativeButtonColor(adMobDrawable);\n        }\n\n        if (startAppDrawable != null) {\n            setStartAppNativeButtonColor(startAppDrawable);\n        }\n\n        arr.recycle();\n\n    }\n", "    public void setAdMobNativeButtonColor(Drawable background) {\n        btnNativeAdMob.setBackground(background);\n    }\n\n    public void setStartAppNativeButtonColor(Drawable background) {\n        btnNativeStartApp.setBackground(background);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/ui/SmallNativeAdView.java", "chunked_list": ["package com.solodroid.ads.sdk.ui;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;", "import android.widget.Button;\nimport android.widget.LinearLayout;\n\nimport androidx.annotation.Nullable;\n\nimport com.solodroid.ads.sdk.R;\n\npublic class SmallNativeAdView extends LinearLayout {\n\n    private Context mContext;\n    private AttributeSet attrs;\n    private int styleAttr;\n    private View view;\n\n    private Drawable adMobDrawable;\n    private Drawable startAppDrawable;\n\n    private Button btnNativeAdMob;\n    private Button btnNativeStartApp;\n\n    public SmallNativeAdView(Context context) {\n        super(context);\n        this.mContext = context;\n        initView();\n    }\n\n    public SmallNativeAdView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        this.mContext = context;\n        this.attrs = attrs;\n        initView();\n    }\n\n    public SmallNativeAdView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        this.mContext = context;\n        this.attrs = attrs;\n        this.styleAttr = defStyleAttr;\n        initView();\n    }\n\n    public SmallNativeAdView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n    }\n\n    @SuppressLint(\"CustomViewStyleable\")\n    private void initView() {\n        this.view = this;\n        inflate(mContext, R.layout.view_native_ad_news, this);\n        TypedArray arr = mContext.obtainStyledAttributes(attrs, R.styleable.NativeAdView, styleAttr, 0);\n\n        adMobDrawable = arr.getDrawable(R.styleable.NativeAdView_adMobNativeButton);\n        startAppDrawable = arr.getDrawable(R.styleable.NativeAdView_startappNativeButton);\n\n        btnNativeAdMob = findViewById(R.id.cta);\n        btnNativeStartApp = findViewById(R.id.startapp_native_button);\n", "        if (adMobDrawable != null) {\n            setAdMobNativeButtonColor(adMobDrawable);\n        }\n\n        if (startAppDrawable != null) {\n            setStartAppNativeButtonColor(startAppDrawable);\n        }\n\n        arr.recycle();\n\n    }\n", "    public void setAdMobNativeButtonColor(Drawable background) {\n        btnNativeAdMob.setBackground(background);\n    }\n\n    public void setStartAppNativeButtonColor(Drawable background) {\n        btnNativeStartApp.setBackground(background);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/ui/LargeNativeAdView.java", "chunked_list": ["package com.solodroid.ads.sdk.ui;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;", "import android.widget.Button;\nimport android.widget.LinearLayout;\n\nimport androidx.annotation.Nullable;\n\nimport com.solodroid.ads.sdk.R;\n\npublic class LargeNativeAdView extends LinearLayout {\n\n    private Context mContext;\n    private AttributeSet attrs;\n    private int styleAttr;\n    private View view;\n\n    private Drawable adMobDrawable;\n    private Drawable startAppDrawable;\n\n    private Button btnNativeAdMob;\n    private Button btnNativeStartApp;\n\n    public LargeNativeAdView(Context context) {\n        super(context);\n        this.mContext = context;\n        initView();\n    }\n\n    public LargeNativeAdView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        this.mContext = context;\n        this.attrs = attrs;\n        initView();\n    }\n\n    public LargeNativeAdView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        this.mContext = context;\n        this.attrs = attrs;\n        this.styleAttr = defStyleAttr;\n        initView();\n    }\n\n    public LargeNativeAdView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n    }\n\n    @SuppressLint(\"CustomViewStyleable\")\n    private void initView() {\n        this.view = this;\n        inflate(mContext, R.layout.view_native_ad_large, this);\n        TypedArray arr = mContext.obtainStyledAttributes(attrs, R.styleable.NativeAdView, styleAttr, 0);\n\n        adMobDrawable = arr.getDrawable(R.styleable.NativeAdView_adMobNativeButton);\n        startAppDrawable = arr.getDrawable(R.styleable.NativeAdView_startappNativeButton);\n\n        btnNativeAdMob = findViewById(R.id.cta);\n        btnNativeStartApp = findViewById(R.id.startapp_native_button);\n", "        if (adMobDrawable != null) {\n            setAdMobNativeButtonColor(adMobDrawable);\n        }\n\n        if (startAppDrawable != null) {\n            setStartAppNativeButtonColor(startAppDrawable);\n        }\n\n        arr.recycle();\n\n    }\n", "    public void setAdMobNativeButtonColor(Drawable background) {\n        btnNativeAdMob.setBackground(background);\n    }\n\n    public void setStartAppNativeButtonColor(Drawable background) {\n        btnNativeStartApp.setBackground(background);\n    }\n\n}\n"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/helper/AudienceNetworkInitializeHelper.java", "chunked_list": ["package com.solodroid.ads.sdk.helper;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.facebook.ads.AdSettings;\nimport com.facebook.ads.AudienceNetworkAds;\nimport com.solodroid.ads.sdk.BuildConfig;\n\npublic class AudienceNetworkInitializeHelper implements AudienceNetworkAds.InitListener {\n\n    /**\n     * It's recommended to call this method from Application.onCreate().\n     * Otherwise you can call it from all Activity.onCreate()\n     * methods for Activities that contain ads.\n     *\n     * @param context Application or Activity.\n     */", "\npublic class AudienceNetworkInitializeHelper implements AudienceNetworkAds.InitListener {\n\n    /**\n     * It's recommended to call this method from Application.onCreate().\n     * Otherwise you can call it from all Activity.onCreate()\n     * methods for Activities that contain ads.\n     *\n     * @param context Application or Activity.\n     */\n    public static void initialize(Context context) {", "    public static void initialize(Context context) {\n        if (!AudienceNetworkAds.isInitialized(context)) {\n            if (BuildConfig.DEBUG) {\n                AdSettings.turnOnSDKDebugger(context);\n                AdSettings.setTestMode(true);\n                AdSettings.setIntegrationErrorMode(AdSettings.IntegrationErrorMode.INTEGRATION_ERROR_CRASH_DEBUG_MODE);\n            }\n\n            AudienceNetworkAds\n                    .buildInitSettings(context)\n                    .withInitListener(new AudienceNetworkInitializeHelper())\n                    .initialize();\n        }\n    }\n", "    public static void initializeAd(Context context, boolean debug) {\n        if (!AudienceNetworkAds.isInitialized(context)) {\n            if (debug) {\n                AdSettings.turnOnSDKDebugger(context);\n                AdSettings.setTestMode(true);\n                AdSettings.setIntegrationErrorMode(AdSettings.IntegrationErrorMode.INTEGRATION_ERROR_CRASH_DEBUG_MODE);\n            }\n\n            AudienceNetworkAds\n                    .buildInitSettings(context)\n                    .withInitListener(new AudienceNetworkInitializeHelper())\n                    .initialize();\n        }\n    }\n\n    @Override", "    public void onInitialized(AudienceNetworkAds.InitResult result) {\n        Log.d(AudienceNetworkAds.TAG, result.getMessage());\n    }\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/helper/AppLovinCustomEventBanner.java", "chunked_list": ["package com.solodroid.ads.sdk.helper;\n\nimport static android.util.Log.DEBUG;\nimport static android.util.Log.ERROR;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.util.Log;\n", "import android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.adview.AppLovinAdView;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinErrorCodes;", "import com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinErrorCodes;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.AdSize;\nimport com.google.android.gms.ads.mediation.MediationAdRequest;\nimport com.google.android.gms.ads.mediation.customevent.CustomEventBanner;\nimport com.google.android.gms.ads.mediation.customevent.CustomEventBannerListener;\n\n/**", "\n/**\n * AppLovin SDK banner adapter for AdMob.\n * <p>\n * Created by thomasso on 4/12/17.\n */\n\n@SuppressWarnings(\"deprecation\")\npublic class AppLovinCustomEventBanner implements CustomEventBanner {\n\n    private static final boolean LOGGING_ENABLED = true;\n    private static final String DEFAULT_ZONE = \"\";\n\n    private static final int BANNER_STANDARD_HEIGHT = 50;\n    private static final int BANNER_HEIGHT_OFFSET_TOLERANCE = 10;\n\n    private AppLovinAdView adView;\n\n    // AdMob Custom Event Methods\n    private static void log(final int priority, final String message) {", "public class AppLovinCustomEventBanner implements CustomEventBanner {\n\n    private static final boolean LOGGING_ENABLED = true;\n    private static final String DEFAULT_ZONE = \"\";\n\n    private static final int BANNER_STANDARD_HEIGHT = 50;\n    private static final int BANNER_HEIGHT_OFFSET_TOLERANCE = 10;\n\n    private AppLovinAdView adView;\n\n    // AdMob Custom Event Methods\n    private static void log(final int priority, final String message) {", "        if (LOGGING_ENABLED) {\n            Log.println(priority, \"AppLovinBanner\", message);\n        }\n    }\n\n    private static int toAdMobErrorCode(final int applovinErrorCode) {\n        if (applovinErrorCode == AppLovinErrorCodes.NO_FILL) {\n            return AdRequest.ERROR_CODE_NO_FILL;\n        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK || applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {\n            return AdRequest.ERROR_CODE_NETWORK_ERROR;\n        } else {\n            return AdRequest.ERROR_CODE_INTERNAL_ERROR;\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override", "        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK || applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {\n            return AdRequest.ERROR_CODE_NETWORK_ERROR;\n        } else {\n            return AdRequest.ERROR_CODE_INTERNAL_ERROR;\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void requestBannerAd(@NonNull final Context context, @NonNull final CustomEventBannerListener customEventBannerListener, final String serverParameter, final AdSize adSize, final MediationAdRequest mediationAdRequest, final Bundle customEventExtras) {\n        // SDK versions BELOW 7.1.0 require a instance of an Activity to be passed in as the context", "    public void requestBannerAd(@NonNull final Context context, @NonNull final CustomEventBannerListener customEventBannerListener, final String serverParameter, final AdSize adSize, final MediationAdRequest mediationAdRequest, final Bundle customEventExtras) {\n        // SDK versions BELOW 7.1.0 require a instance of an Activity to be passed in as the context\n        if (AppLovinSdk.VERSION_CODE < 710 && !(context instanceof Activity)) {\n            log(ERROR, \"Unable to request AppLovin banner. Invalid context provided.\");\n            customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);\n            return;\n        }\n\n        log(DEBUG, \"Requesting AppLovin banner of size: \" + adSize);\n\n        final AppLovinAdSize appLovinAdSize = appLovinAdSizeFromAdMobAdSize(adSize);", "        if (appLovinAdSize != null) {\n            final AppLovinSdk sdk = AppLovinSdk.getInstance(context);\n            sdk.setPluginVersion(\"AdMob-2.2.1\");\n\n            // Zones support is available on AppLovin SDK 7.5.0 and higher\n            final String zoneId;\n            if (AppLovinSdk.VERSION_CODE >= 750 && customEventExtras != null && customEventExtras.containsKey(\"zone_id\")) {\n                zoneId = customEventExtras.getString(\"zone_id\");\n            } else {\n                zoneId = DEFAULT_ZONE;\n            }\n\n            adView = new AppLovinAdView(appLovinAdSize, zoneId, context);\n            adView.setAdLoadListener(new AppLovinAdLoadListener() {\n                @Override", "                public void adReceived(final AppLovinAd ad) {\n                    log(DEBUG, \"Successfully loaded banner ad\");\n                    customEventBannerListener.onAdLoaded(adView);\n                }\n\n                @Override\n                public void failedToReceiveAd(final int errorCode) {\n                    log(ERROR, \"Failed to load banner ad with code: \" + errorCode);\n                    customEventBannerListener.onAdFailedToLoad(toAdMobErrorCode(errorCode));\n                }\n            });\n            adView.setAdDisplayListener(new AppLovinAdDisplayListener() {\n                @Override", "                public void adDisplayed(final AppLovinAd ad) {\n                    log(DEBUG, \"Banner displayed\");\n                }\n\n                @Override\n                public void adHidden(final AppLovinAd ad) {\n                    log(DEBUG, \"Banner dismissed\");\n                }\n            });\n            adView.setAdClickListener(ad -> {\n                log(DEBUG, \"Banner clicked\");\n\n                customEventBannerListener.onAdOpened();\n                customEventBannerListener.onAdLeftApplication();\n            });\n\n            adView.loadNextAd();\n        } else {\n            log(ERROR, \"Unable to request AppLovin banner\");\n            customEventBannerListener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);\n        }\n    }\n\n    @Override", "    public void onDestroy() {\n        if (adView != null) adView.destroy();\n    }\n\n    // Utility Methods\n    @Override\n    public void onPause() {\n        if (adView != null) adView.pause();\n    }\n\n    @Override", "    public void onResume() {\n        if (adView != null) adView.resume();\n    }\n\n    private AppLovinAdSize appLovinAdSizeFromAdMobAdSize(final AdSize adSize) {\n        final boolean isSmartBanner = (adSize.getWidth() == AdSize.FULL_WIDTH) && (adSize.getHeight() == AdSize.AUTO_HEIGHT);\n\n        if (AdSize.BANNER.equals(adSize) || AdSize.LARGE_BANNER.equals(adSize) || isSmartBanner) {\n            return AppLovinAdSize.BANNER;\n        } else if (AdSize.MEDIUM_RECTANGLE.equals(adSize)) {\n            return AppLovinAdSize.MREC;", "        } else if (AdSize.MEDIUM_RECTANGLE.equals(adSize)) {\n            return AppLovinAdSize.MREC;\n        } else if (AdSize.LEADERBOARD.equals(adSize)) {\n            return AppLovinAdSize.LEADER;\n        }\n        // This is not a one of AdMob's predefined size\n        else {\n            // Assume fluid width, and check for height with offset tolerance\n            final int offset = Math.abs(BANNER_STANDARD_HEIGHT - adSize.getHeight());\n            if (offset <= BANNER_HEIGHT_OFFSET_TOLERANCE) {\n                return AppLovinAdSize.BANNER;\n            }\n        }\n\n        return null;\n    }\n}", "            if (offset <= BANNER_HEIGHT_OFFSET_TOLERANCE) {\n                return AppLovinAdSize.BANNER;\n            }\n        }\n\n        return null;\n    }\n}"]}
{"filename": "library/src/main/java/com/solodroid/ads/sdk/helper/AppLovinCustomEventInterstitial.java", "chunked_list": ["package com.solodroid.ads.sdk.helper;\n\nimport static android.util.Log.DEBUG;\nimport static android.util.Log.ERROR;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;", "import android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.applovin.adview.AppLovinInterstitialAd;\nimport com.applovin.adview.AppLovinInterstitialAdDialog;\nimport com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdClickListener;", "import com.applovin.sdk.AppLovinAd;\nimport com.applovin.sdk.AppLovinAdClickListener;\nimport com.applovin.sdk.AppLovinAdDisplayListener;\nimport com.applovin.sdk.AppLovinAdLoadListener;\nimport com.applovin.sdk.AppLovinAdSize;\nimport com.applovin.sdk.AppLovinAdVideoPlaybackListener;\nimport com.applovin.sdk.AppLovinErrorCodes;\nimport com.applovin.sdk.AppLovinSdk;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.mediation.MediationAdRequest;", "import com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.mediation.MediationAdRequest;\nimport com.google.android.gms.ads.mediation.customevent.CustomEventInterstitial;\nimport com.google.android.gms.ads.mediation.customevent.CustomEventInterstitialListener;\n\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.Queue;\n", "import java.util.Queue;\n\n/**\n * AppLovin SDK interstitial adapter for AdMob.\n * <p>\n * Created by Thomas So on 5/28/17.\n */\n\n//\n// PLEASE NOTE: We have renamed this class from \"YOUR_PACKAGE_NAME.AdMobMediationInterEvent\" to \"YOUR_PACKAGE_NAME.AppLovinCustomEventInterstitial\", you can use either classname in your AdMob account.", "//\n// PLEASE NOTE: We have renamed this class from \"YOUR_PACKAGE_NAME.AdMobMediationInterEvent\" to \"YOUR_PACKAGE_NAME.AppLovinCustomEventInterstitial\", you can use either classname in your AdMob account.\n//\n@SuppressWarnings(\"deprecation\")\npublic class AppLovinCustomEventInterstitial implements CustomEventInterstitial, AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener {\n\n    private static final boolean LOGGING_ENABLED = true;\n    private static final Handler UI_HANDLER = new Handler(Looper.getMainLooper());\n    private static final String DEFAULT_ZONE = \"\";\n\n    // A map of Zone -> Queue of `AppLovinAd`s to be shared by instances of the custom event.\n    // This prevents skipping of ads as this adapter will be re-created and preloaded\n    // on every ad load regardless if ad was actually displayed or not.\n    private static final Map<String, Queue<AppLovinAd>> GLOBAL_INTERSTITIAL_ADS = new HashMap<>();\n    private static final Object GLOBAL_INTERSTITIAL_ADS_LOCK = new Object();\n\n    private Context context;\n    private CustomEventInterstitialListener listener;\n\n    private String zoneId; // The zone identifier this instance of the custom event is loading for\n\n    // AdMob Custom Event Methods\n    private static AppLovinAd dequeueAd(final String zoneId) {\n        synchronized (GLOBAL_INTERSTITIAL_ADS_LOCK) {\n            AppLovinAd preloadedAd = null;\n\n            final Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get(zoneId);", "            if (preloadedAds != null && !preloadedAds.isEmpty()) {\n                preloadedAd = preloadedAds.poll();\n            }\n\n            return preloadedAd;\n        }\n    }\n\n    private static void enqueueAd(final AppLovinAd ad, final String zoneId) {\n        synchronized (GLOBAL_INTERSTITIAL_ADS_LOCK) {\n            Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get(zoneId);", "            if (preloadedAds == null) {\n                preloadedAds = new LinkedList<>();\n                GLOBAL_INTERSTITIAL_ADS.put(zoneId, preloadedAds);\n            }\n            preloadedAds.offer(ad);\n        }\n    }\n\n    private static void log(final int priority, final String message) {\n        if (LOGGING_ENABLED) {\n            Log.println(priority, \"AppLovinInterstitial\", message);\n        }\n    }\n\n    private static int toAdMobErrorCode(final int applovinErrorCode) {", "        if (LOGGING_ENABLED) {\n            Log.println(priority, \"AppLovinInterstitial\", message);\n        }\n    }\n\n    private static int toAdMobErrorCode(final int applovinErrorCode) {\n        if (applovinErrorCode == AppLovinErrorCodes.NO_FILL) {\n            return AdRequest.ERROR_CODE_NO_FILL;\n        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK || applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {\n            return AdRequest.ERROR_CODE_NETWORK_ERROR;\n        } else {\n            return AdRequest.ERROR_CODE_INTERNAL_ERROR;\n        }\n    }\n\n    //Performs the given runnable on the main thread.", "        } else if (applovinErrorCode == AppLovinErrorCodes.NO_NETWORK || applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT) {\n            return AdRequest.ERROR_CODE_NETWORK_ERROR;\n        } else {\n            return AdRequest.ERROR_CODE_INTERNAL_ERROR;\n        }\n    }\n\n    //Performs the given runnable on the main thread.\n    public static void runOnUiThread(final Runnable runnable) {\n        if (Looper.myLooper() == Looper.getMainLooper()) {\n            runnable.run();\n        } else {\n            UI_HANDLER.post(runnable);\n        }\n    }\n\n    // Ad Load Listener\n    @Override", "    public static void runOnUiThread(final Runnable runnable) {\n        if (Looper.myLooper() == Looper.getMainLooper()) {\n            runnable.run();\n        } else {\n            UI_HANDLER.post(runnable);\n        }\n    }\n\n    // Ad Load Listener\n    @Override\n    public void requestInterstitialAd(@NonNull final Context context, @NonNull final CustomEventInterstitialListener listener, final String serverParameter, final MediationAdRequest mediationAdRequest, final Bundle customEventExtras) {\n        log(DEBUG, \"Requesting AppLovin interstitial...\");\n\n        // SDK versions BELOW 7.2.0 require a instance of an Activity to be passed in as the context", "    public void requestInterstitialAd(@NonNull final Context context, @NonNull final CustomEventInterstitialListener listener, final String serverParameter, final MediationAdRequest mediationAdRequest, final Bundle customEventExtras) {\n        log(DEBUG, \"Requesting AppLovin interstitial...\");\n\n        // SDK versions BELOW 7.2.0 require a instance of an Activity to be passed in as the context\n        if (AppLovinSdk.VERSION_CODE < 720 && !(context instanceof Activity)) {\n            log(ERROR, \"Unable to request AppLovin interstitial. Invalid context provided.\");\n            listener.onAdFailedToLoad(AdRequest.ERROR_CODE_INVALID_REQUEST);\n\n            return;\n        }\n\n        // Store parent objects\n        this.listener = listener;\n        this.context = context;\n\n        final AppLovinSdk sdk = AppLovinSdk.getInstance(context);\n        sdk.setPluginVersion(\"AdMob-2.2.1\");\n\n        // Zones support is available on AppLovin SDK 7.5.0 and higher", "        if (AppLovinSdk.VERSION_CODE >= 750 && customEventExtras != null && customEventExtras.containsKey(\"zone_id\")) {\n            zoneId = customEventExtras.getString(\"zone_id\");\n        } else {\n            zoneId = DEFAULT_ZONE;\n        }\n\n        // Check if we already have a preloaded ad for the given zone\n        final AppLovinAd preloadedAd = dequeueAd(zoneId);\n        if (preloadedAd != null) {\n            log(DEBUG, \"Found preloaded ad for zone: {\" + zoneId + \"}\");\n            adReceived(preloadedAd);\n        } else {\n            // If this is a default Zone, load the interstitial ad normally", "        if (preloadedAd != null) {\n            log(DEBUG, \"Found preloaded ad for zone: {\" + zoneId + \"}\");\n            adReceived(preloadedAd);\n        } else {\n            // If this is a default Zone, load the interstitial ad normally\n            if (DEFAULT_ZONE.equals(zoneId)) {\n                sdk.getAdService().loadNextAd(AppLovinAdSize.INTERSTITIAL, this);\n            }\n            // Otherwise, use the Zones API\n            else {\n                sdk.getAdService().loadNextAdForZoneId(zoneId, this);\n            }\n        }\n    }\n\n    @Override", "    public void showInterstitial() {\n        final AppLovinAd preloadedAd = dequeueAd(zoneId);\n        if (preloadedAd != null) {\n            final AppLovinSdk sdk = AppLovinSdk.getInstance(context);\n\n            final AppLovinInterstitialAdDialog interstitialAd = AppLovinInterstitialAd.create(sdk, context);\n            interstitialAd.setAdDisplayListener(this);\n            interstitialAd.setAdClickListener(this);\n            interstitialAd.setAdVideoPlaybackListener(this);\n            interstitialAd.showAndRender(preloadedAd);\n        } else {\n            log(ERROR, \"Failed to show an AppLovin interstitial before one was loaded\");\n            listener.onAdFailedToLoad(AdRequest.ERROR_CODE_INTERNAL_ERROR);\n        }\n    }\n\n    // Ad Display Listener\n    @Override", "    public void onPause() {\n    }\n\n    @Override\n    public void onResume() {\n    }\n\n    // Ad Click Listener\n    @Override\n    public void onDestroy() {\n    }\n\n    // Video Playback Listener\n    @Override", "    public void onDestroy() {\n    }\n\n    // Video Playback Listener\n    @Override\n    public void adReceived(final AppLovinAd ad) {\n        log(DEBUG, \"Interstitial did load ad: \" + ad.getAdIdNumber());\n\n        enqueueAd(ad, zoneId);\n\n        runOnUiThread(() -> listener.onAdLoaded());\n    }\n\n    @Override", "    public void failedToReceiveAd(final int errorCode) {\n        log(ERROR, \"Interstitial failed to load with error: \" + errorCode);\n        runOnUiThread(() -> listener.onAdFailedToLoad(toAdMobErrorCode(errorCode)));\n    }\n\n    // Utility Methods\n    @Override\n    public void adDisplayed(final AppLovinAd appLovinAd) {\n        log(DEBUG, \"Interstitial displayed\");\n        listener.onAdOpened();\n    }\n\n    @Override", "    public void adHidden(final AppLovinAd appLovinAd) {\n        log(DEBUG, \"Interstitial dismissed\");\n        listener.onAdClosed();\n    }\n\n    @Override\n    public void adClicked(final AppLovinAd appLovinAd) {\n        log(DEBUG, \"Interstitial clicked\");\n        listener.onAdLeftApplication();\n    }\n\n    @Override", "    public void videoPlaybackBegan(final AppLovinAd ad) {\n        log(DEBUG, \"Interstitial video playback began\");\n    }\n\n    @Override\n    public void videoPlaybackEnded(final AppLovinAd ad, final double percentViewed, final boolean fullyWatched) {\n        log(DEBUG, \"Interstitial video playback ended at playback percent: \" + percentViewed);\n    }\n}"]}
