{"filename": "src/test/java/ee/carlrobert/openai/OpenAIClientTest.java", "chunked_list": ["package ee.carlrobert.openai;\n\nimport static ee.carlrobert.openai.util.JSONUtil.e;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonArray;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonMap;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonMapResponse;\nimport static java.util.concurrent.TimeUnit.SECONDS;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.awaitility.Awaitility.await;\n", "import static org.awaitility.Awaitility.await;\n\nimport ee.carlrobert.openai.client.OpenAIClient;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionModel;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionMessage;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionModel;\nimport ee.carlrobert.openai.client.completion.text.request.TextCompletionRequest;", "import ee.carlrobert.openai.client.completion.text.TextCompletionModel;\nimport ee.carlrobert.openai.client.completion.text.request.TextCompletionRequest;\nimport ee.carlrobert.openai.http.ResponseEntity;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\nclass OpenAIClientTest extends BaseTest {\n\n  @Test", "\n  @Test\n  void shouldStreamChatCompletion() {\n    var prompt = \"TEST_PROMPT\";\n    var resultMessageBuilder = new StringBuilder();\n    expectStreamRequest(\"/v1/chat/completions\", request -> {\n      assertThat(request.getMethod()).isEqualTo(\"POST\");\n      assertThat(request.getHeaders().get(\"Authorization\").get(0)).isEqualTo(\"Bearer TEST_API_KEY\");\n      assertThat(request.getHeaders().get(\"Openai-organization\").get(0))\n          .isEqualTo(\"TEST_ORGANIZATION\");", "      assertThat(request.getHeaders().get(\"Openai-organization\").get(0))\n          .isEqualTo(\"TEST_ORGANIZATION\");\n      assertThat(request.getBody())\n          .extracting(\n              \"model\",\n              \"temperature\",\n              \"stream\",\n              \"max_tokens\",\n              \"frequency_penalty\",\n              \"presence_penalty\",", "              \"frequency_penalty\",\n              \"presence_penalty\",\n              \"messages\",\n              \"additionalParam1\",\n              \"additionalParam2\")\n          .containsExactly(\n              \"gpt-3.5-turbo\",\n              0.5,\n              true,\n              500,", "              true,\n              500,\n              0.1,\n              0.1,\n              List.of(Map.of(\"role\", \"user\", \"content\", prompt)),\n              10,\n              \"testValue\");\n      return List.of(\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"role\", \"assistant\")))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"content\", \"Hello\")))),", "          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"role\", \"assistant\")))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"content\", \"Hello\")))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"content\", \"!\")))));\n    });\n\n    new OpenAIClient.Builder(\"TEST_API_KEY\")\n        .setOrganization(\"TEST_ORGANIZATION\")\n        .buildChatCompletionClient()\n        .stream(\n            (ChatCompletionRequest) new ChatCompletionRequest.Builder(", "        .stream(\n            (ChatCompletionRequest) new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", prompt)))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .setMaxTokens(500)\n                .setTemperature(0.5)\n                .setPresencePenalty(0.1)\n                .setFrequencyPenalty(0.1)\n                .setAdditionalParams(Map.of(\n                    \"additionalParam1\", 10,", "                .setAdditionalParams(Map.of(\n                    \"additionalParam1\", 10,\n                    \"additionalParam2\", \"testValue\"))\n                .build(),\n            new CompletionEventListener() {\n              @Override\n              public void onMessage(String message) {\n                resultMessageBuilder.append(message);\n              }\n\n              @Override", "              public void onComplete(StringBuilder messageBuilder) {\n                assertThat(messageBuilder.toString()).isEqualTo(resultMessageBuilder.toString());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Hello!\".contentEquals(resultMessageBuilder));\n  }\n\n  @Test\n  void shouldStreamTextCompletion() {\n    var prompt = \"TEST_PROMPT\";\n    var resultMessageBuilder = new StringBuilder();\n    expectStreamRequest(\"/v1/completions\", request -> {\n      assertThat(request.getMethod()).isEqualTo(\"POST\");\n      assertThat(request.getHeaders().get(\"Authorization\").get(0)).isEqualTo(\"Bearer TEST_API_KEY\");\n      assertThat(request.getHeaders().get(\"Openai-organization\")).isNull();\n      assertThat(request.getBody())\n          .extracting(\n              \"model\",\n              \"prompt\",\n              \"stop\",\n              \"temperature\",\n              \"stream\",\n              \"max_tokens\",\n              \"frequency_penalty\",\n              \"presence_penalty\")\n          .containsExactly(\n              \"text-curie-001\",\n              prompt,\n              List.of(\" Human:\", \" AI:\"),\n              0.1,\n              true,\n              1000,\n              0.2,\n              0.2);\n      return List.of(\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"He\"))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"llo\"))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"!\"))));\n    });\n\n    new OpenAIClient.Builder(\"TEST_API_KEY\")\n        .buildTextCompletionClient()\n        .stream(\n            (TextCompletionRequest) new TextCompletionRequest.Builder(prompt)\n                .setModel(TextCompletionModel.CURIE)\n                .setStop(List.of(\" Human:\", \" AI:\"))\n                .setMaxTokens(1000)\n                .setTemperature(0.1)\n                .setPresencePenalty(0.2)\n                .setFrequencyPenalty(0.2)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onMessage(String message) {\n                resultMessageBuilder.append(message);\n              }\n\n              @Override\n              public void onComplete(StringBuilder messageBuilder) {\n                assertThat(messageBuilder.toString()).isEqualTo(resultMessageBuilder.toString());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Hello!\".contentEquals(resultMessageBuilder));\n  }\n\n  @Test\n  void shouldHandleInvalidApiKeyError() {\n    var errorMessageBuilder = new StringBuilder();\n    var errorResponse = jsonMapResponse(\"error\", jsonMap(\n        e(\"message\", \"Incorrect API key provided\"),\n        e(\"type\", \"invalid_request_error\"),\n        e(\"code\", \"invalid_api_key\")));\n    expectRequest(\"/v1/chat/completions\",\n        request -> new ResponseEntity(401, errorResponse));\n\n    new OpenAIClient.Builder(\"TEST_API_KEY\")\n        .buildChatCompletionClient()\n        .stream(\n            new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", \"TEST_PROMPT\")))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onError(ErrorDetails error, Throwable t) {\n                assertThat(error.getCode()).isEqualTo(\"invalid_api_key\");\n                assertThat(error.getType()).isEqualTo(\"invalid_request_error\");\n                errorMessageBuilder.append(error.getMessage());\n              }\n            });\n\n    await().atMost(5, SECONDS)\n        .until(() -> \"Incorrect API key provided\".contentEquals(errorMessageBuilder));\n  }\n\n  @Test\n  void shouldHandleUnknownApiError() {\n    var errorMessageBuilder = new StringBuilder();\n    var errorResponse = jsonMapResponse(\"error_details\", \"Server error\");\n    expectRequest(\"/v1/chat/completions\",\n        request -> new ResponseEntity(500, errorResponse));\n\n    new OpenAIClient.Builder(\"TEST_API_KEY\")\n        .buildChatCompletionClient()\n        .stream(\n            new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", \"TEST_PROMPT\")))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onError(ErrorDetails error, Throwable t) {\n                errorMessageBuilder.append(error.getMessage());\n              }\n            });\n\n    await().atMost(5, SECONDS)\n        .until(() -> (\"Unknown API response. \"\n            + \"Code: 500, \"\n            + \"Body: {\\\"error_details\\\":\\\"Server error\\\"}\").contentEquals(errorMessageBuilder));\n  }\n\n  @Test\n  void shouldGetEmbeddings() {\n    var embeddingResponse = new double[] {-0.00692, -0.0053, -4.5471, -0.0240};\n    expectRequest(\"/v1/embeddings\", request -> {\n      assertThat(request.getMethod()).isEqualTo(\"POST\");\n      assertThat(request.getHeaders().get(\"Authorization\").get(0)).isEqualTo(\"Bearer TEST_API_KEY\");\n      return new ResponseEntity(200, jsonMapResponse(\"data\", jsonArray(jsonMap(\"embedding\", embeddingResponse))));\n    });\n\n    var result = new OpenAIClient.Builder(\"TEST_API_KEY\").buildEmbeddingsClient().getEmbedding(\"TEST_PROMPT\");\n\n    assertThat(result).isEqualTo(embeddingResponse);\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/BaseTest.java", "chunked_list": ["package ee.carlrobert.openai;\n\nimport ee.carlrobert.openai.http.LocalCallbackServer;\nimport ee.carlrobert.openai.http.exchange.BasicHttpExchange;\nimport ee.carlrobert.openai.http.exchange.StreamHttpExchange;\nimport ee.carlrobert.openai.http.expectation.BasicExpectation;\nimport ee.carlrobert.openai.http.expectation.StreamExpectation;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\n", "import org.junit.jupiter.api.BeforeEach;\n\nabstract class BaseTest {\n\n  protected LocalCallbackServer server;\n\n  @BeforeEach\n  void init() {\n    server = new LocalCallbackServer();\n  }", "    server = new LocalCallbackServer();\n  }\n\n  @AfterEach\n  void tearDown() {\n    server.stop();\n  }\n\n  protected void expectRequest(String path, BasicHttpExchange exchange) {\n    server.addExpectation(new BasicExpectation(path, exchange));", "  protected void expectRequest(String path, BasicHttpExchange exchange) {\n    server.addExpectation(new BasicExpectation(path, exchange));\n  }\n\n  protected void expectStreamRequest(String path, StreamHttpExchange exchange) {\n    server.addExpectation(new StreamExpectation(path, exchange));\n  }\n}\n", ""]}
{"filename": "src/test/java/ee/carlrobert/openai/AzureClientTest.java", "chunked_list": ["package ee.carlrobert.openai;\n\nimport static ee.carlrobert.openai.util.JSONUtil.e;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonArray;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonMap;\nimport static ee.carlrobert.openai.util.JSONUtil.jsonMapResponse;\nimport static java.util.concurrent.TimeUnit.SECONDS;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.awaitility.Awaitility.await;\n", "import static org.awaitility.Awaitility.await;\n\nimport ee.carlrobert.openai.client.AzureClient;\nimport ee.carlrobert.openai.client.azure.AzureClientRequestParams;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionModel;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionMessage;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionModel;", "import ee.carlrobert.openai.client.completion.chat.request.ChatCompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionModel;\nimport ee.carlrobert.openai.client.completion.text.request.TextCompletionRequest;\nimport ee.carlrobert.openai.http.ResponseEntity;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\nclass AzureClientTest extends BaseTest {\n", "class AzureClientTest extends BaseTest {\n\n  @Test\n  void shouldStreamAzureChatCompletion() {\n    var prompt = \"TEST_PROMPT\";\n    var resultMessageBuilder = new StringBuilder();\n    expectStreamRequest(\"/openai/deployments/TEST_DEPLOYMENT_ID/chat/completions\", request -> {\n      assertThat(request.getMethod()).isEqualTo(\"POST\");\n      assertThat(request.getHeaders().get(\"Authorization\").get(0))\n          .isEqualTo(\"Bearer TEST_API_KEY\");", "      assertThat(request.getHeaders().get(\"Authorization\").get(0))\n          .isEqualTo(\"Bearer TEST_API_KEY\");\n      assertThat(request.getBody())\n          .extracting(\n              \"model\",\n              \"temperature\",\n              \"stream\",\n              \"max_tokens\",\n              \"frequency_penalty\",\n              \"presence_penalty\",", "              \"frequency_penalty\",\n              \"presence_penalty\",\n              \"messages\")\n          .containsExactly(\n              \"gpt-3.5-turbo\",\n              0.5,\n              true,\n              500,\n              0.1,\n              0.1,", "              0.1,\n              0.1,\n              List.of(Map.of(\"role\", \"user\", \"content\", prompt)));\n      return List.of(\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"role\", \"assistant\")))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"content\", \"Hello\")))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"delta\", jsonMap(\"content\", \"!\")))));\n    });\n\n    new AzureClient.Builder(\"TEST_API_KEY\",", "\n    new AzureClient.Builder(\"TEST_API_KEY\",\n        new AzureClientRequestParams(\"TEST_RESOURCE\", \"TEST_DEPLOYMENT_ID\", \"TEST_API_VERSION\"))\n        .setActiveDirectoryAuthentication(true)\n        .buildChatCompletionClient()\n        .stream(\n            (ChatCompletionRequest) new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", prompt)))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .setMaxTokens(500)", "                .setModel(ChatCompletionModel.GPT_3_5)\n                .setMaxTokens(500)\n                .setTemperature(0.5)\n                .setPresencePenalty(0.1)\n                .setFrequencyPenalty(0.1)\n                .build(),\n            new CompletionEventListener() {\n              @Override\n              public void onMessage(String message) {\n                resultMessageBuilder.append(message);\n              }\n\n              @Override", "              public void onMessage(String message) {\n                resultMessageBuilder.append(message);\n              }\n\n              @Override\n              public void onComplete(StringBuilder messageBuilder) {\n                assertThat(messageBuilder.toString()).isEqualTo(resultMessageBuilder.toString());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Hello!\".contentEquals(resultMessageBuilder));\n  }\n\n  @Test\n  void shouldStreamAzureTextCompletion() {\n    var prompt = \"TEST_PROMPT\";\n    var resultMessageBuilder = new StringBuilder();\n    expectStreamRequest(\"/openai/deployments/TEST_DEPLOYMENT_ID/completions\", request -> {\n      assertThat(request.getMethod()).isEqualTo(\"POST\");\n      assertThat(request.getHeaders().get(\"Api-key\").get(0)).isEqualTo(\"TEST_API_KEY\");\n      assertThat(request.getBody())\n          .extracting(\n              \"model\",\n              \"prompt\",\n              \"stop\",\n              \"temperature\",\n              \"stream\",\n              \"max_tokens\",\n              \"frequency_penalty\",\n              \"presence_penalty\")\n          .containsExactly(\n              \"text-davinci-003\",\n              prompt,\n              List.of(\" Human:\", \" AI:\"),\n              0.1,\n              true,\n              1000,\n              0.2,\n              0.2);\n      return List.of(\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"He\"))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"llo\"))),\n          jsonMapResponse(\"choices\", jsonArray(jsonMap(\"text\", \"!\"))));\n    });\n\n    new AzureClient.Builder(\"TEST_API_KEY\",\n        new AzureClientRequestParams(\"TEST_RESOURCE\", \"TEST_DEPLOYMENT_ID\", \"TEST_API_VERSION\"))\n        .buildTextCompletionClient()\n        .stream(\n            (TextCompletionRequest) new TextCompletionRequest.Builder(prompt)\n                .setModel(TextCompletionModel.DAVINCI)\n                .setStop(List.of(\" Human:\", \" AI:\"))\n                .setMaxTokens(1000)\n                .setTemperature(0.1)\n                .setPresencePenalty(0.2)\n                .setFrequencyPenalty(0.2)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onMessage(String message) {\n                resultMessageBuilder.append(message);\n              }\n\n              @Override\n              public void onComplete(StringBuilder messageBuilder) {\n                assertThat(messageBuilder.toString()).isEqualTo(resultMessageBuilder.toString());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Hello!\".contentEquals(resultMessageBuilder));\n  }\n\n  @Test\n  void shouldListenForInvalidTokenErrorResponse() {\n    var errorMessageBuilder = new StringBuilder();\n    var errorResponse = jsonMapResponse(\n        e(\"statusCode\", 401),\n        e(\"message\", \"Token is invalid\"));\n    expectRequest(\"/openai/deployments/TEST_DEPLOYMENT_ID/chat/completions\",\n        request -> new ResponseEntity(401, errorResponse));\n\n    new AzureClient.Builder(\"TEST_API_KEY\",\n        new AzureClientRequestParams(\"TEST_RESOURCE\", \"TEST_DEPLOYMENT_ID\", \"TEST_API_VERSION\"))\n        .buildChatCompletionClient()\n        .stream(\n            new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", \"TEST_PROMPT\")))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onError(ErrorDetails error, Throwable t) {\n                errorMessageBuilder.append(error.getMessage());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Token is invalid\".contentEquals(errorMessageBuilder));\n  }\n\n  @Test\n  void shouldListenForInvalidResourceErrorResponse() {\n    var errorMessageBuilder = new StringBuilder();\n    var errorResponse = jsonMapResponse(\"error\", jsonMap(\n        e(\"message\", \"Resource not found\"),\n        e(\"code\", \"404\")));\n    expectRequest(\"/openai/deployments/TEST_DEPLOYMENT_ID/chat/completions\",\n        request -> new ResponseEntity(404, errorResponse));\n\n    new AzureClient.Builder(\"TEST_API_KEY\",\n        new AzureClientRequestParams(\"TEST_RESOURCE\", \"TEST_DEPLOYMENT_ID\", \"TEST_API_VERSION\"))\n        .buildChatCompletionClient()\n        .stream(\n            new ChatCompletionRequest.Builder(\n                List.of(new ChatCompletionMessage(\"user\", \"TEST_PROMPT\")))\n                .setModel(ChatCompletionModel.GPT_3_5)\n                .build(),\n            new CompletionEventListener() {\n              @Override", "              public void onError(ErrorDetails error, Throwable t) {\n                errorMessageBuilder.append(error.getMessage());\n              }\n            });\n\n    await().atMost(5, SECONDS).until(() -> \"Resource not found\".contentEquals(errorMessageBuilder));\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/util/JSONUtil.java", "chunked_list": ["package ee.carlrobert.openai.util;\n\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JSONUtil {\n\n  @SafeVarargs", "public class JSONUtil {\n\n  @SafeVarargs\n  public static String jsonMapResponse(Map.Entry<String, ?>... entries) {\n    try {\n      return new ObjectMapper().writeValueAsString(Map.ofEntries(entries));\n    } catch (JsonProcessingException e) {\n      throw new RuntimeException(\"Unable to map to json string\", e);\n    }\n  }\n", "  public static String jsonMapResponse(String key, Object value) {\n    return jsonMapResponse(e(key, value));\n  }\n\n  @SafeVarargs\n  public static Map<String, ?> jsonMap(Map.Entry<String, ?>... entries) {\n    return Map.ofEntries(entries);\n  }\n\n  public static Map<String, ?> jsonMap(String key, Object value) {\n    return jsonMap(e(key, value));\n  }\n\n  @SafeVarargs", "  public static Map<String, ?> jsonMap(String key, Object value) {\n    return jsonMap(e(key, value));\n  }\n\n  @SafeVarargs\n  public static List<?> jsonArray(Map<String, ?>... objects) {\n    return List.of(objects);\n  }\n\n  public static Map.Entry<String, ?> e(String key, Object value) {\n    return Map.entry(key, value);\n  }\n}\n\n", "  public static Map.Entry<String, ?> e(String key, Object value) {\n    return Map.entry(key, value);\n  }\n}\n\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/LocalCallbackServer.java", "chunked_list": ["package ee.carlrobert.openai.http;\n\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpServer;\nimport ee.carlrobert.openai.http.expectation.BasicExpectation;\nimport ee.carlrobert.openai.http.expectation.Expectation;\nimport ee.carlrobert.openai.http.expectation.StreamExpectation;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.util.List;", "import java.net.InetSocketAddress;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LocalCallbackServer {\n\n  private static final Logger LOG = LoggerFactory.getLogger(LocalCallbackServer.class);\n\n  private final AtomicInteger currentExpectationIndex = new AtomicInteger();\n  private final List<Expectation> expectations = new CopyOnWriteArrayList<>();\n  private final HttpServer server;\n\n  public LocalCallbackServer() {\n    this(8000);\n  }\n\n  public LocalCallbackServer(int port) {", "    try {\n      server = HttpServer.create(new InetSocketAddress(port), 0);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Could not create HttpServer\", e);\n    }\n    server.setExecutor(null);\n    server.createContext(\"/\", exchange -> {\n      try {\n        var expectation = expectations.get(currentExpectationIndex.getAndIncrement());\n        if (!expectation.getPath().equals(exchange.getRequestURI().getPath())) {\n          try {\n            throw new AssertionError(\n                String.format(\"Expecting request path to be \\\"%s\\\", but received \\\"%s\\\"\",\n                    expectation.getPath(),\n                    exchange.getRequestURI().getPath()));\n          } catch (AssertionError e) {\n            e.printStackTrace();\n            throw e;\n          } finally {\n            exchange.sendResponseHeaders(500, -1);\n            exchange.getRequestBody().close();\n          }\n        }", "        if (!expectation.getPath().equals(exchange.getRequestURI().getPath())) {\n          try {\n            throw new AssertionError(\n                String.format(\"Expecting request path to be \\\"%s\\\", but received \\\"%s\\\"\",\n                    expectation.getPath(),\n                    exchange.getRequestURI().getPath()));\n          } catch (AssertionError e) {\n            e.printStackTrace();\n            throw e;\n          } finally {\n            exchange.sendResponseHeaders(500, -1);\n            exchange.getRequestBody().close();\n          }\n        }", "        if (expectation instanceof StreamExpectation) {\n          handleStreamExchange((StreamExpectation) expectation, exchange);\n        } else {\n          handleExchange((BasicExpectation) expectation, exchange);\n        }\n      } catch (Throwable e) {\n        LOG.error(\"Request failed\", e);\n        throw e;\n      } finally {\n        exchange.close();\n      }\n    });\n    server.start();\n  }\n", "  public void addExpectation(Expectation expectation) {\n    expectations.add(expectation);\n  }\n\n  public void stop() {\n    server.stop(0);\n  }\n\n  private void handleExchange(\n      BasicExpectation expectation, HttpExchange exchange) throws IOException {\n    exchange.getResponseHeaders().add(\"Content-Type\", \"application/json\");\n\n    var response = expectation.getExchange().getResponse(new RequestEntity(exchange));\n    exchange.sendResponseHeaders(response.getStatusCode(), response.getResponse().length());\n\n    var responseBody = exchange.getResponseBody();\n    responseBody.write(response.getResponse().getBytes());\n    responseBody.flush();\n    responseBody.close();\n  }\n\n  private void handleStreamExchange(\n      StreamExpectation expectation, HttpExchange exchange) throws IOException {\n    exchange.getResponseHeaders().add(\"Content-Type\", \"text/event-stream\");\n    exchange.getResponseHeaders().add(\"Cache-Control\", \"no-cache\");\n    exchange.getResponseHeaders().add(\"Connection\", \"keep-alive\");\n    exchange.sendResponseHeaders(200, 0);\n\n    var responseBody = exchange.getResponseBody();\n", "    for (var event : expectation.getExchange().getResponse(new RequestEntity(exchange))) {\n      responseBody.write((String.format(\"data: %s\\n\\n\", event)).getBytes());\n      sleep(250);\n    }\n\n    responseBody.write((\"data: [DONE]\\n\\n\").getBytes());\n    responseBody.flush();\n    responseBody.close();\n  }\n\n  private static void sleep(long ms) {", "    try {\n      Thread.sleep(ms);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/ResponseEntity.java", "chunked_list": ["package ee.carlrobert.openai.http;\n\npublic class ResponseEntity {\n\n  private final int statusCode;\n  private final String response;\n\n  public ResponseEntity(String response) {\n    this(200, response);\n  }\n\n  public ResponseEntity(int statusCode, String response) {\n    this.statusCode = statusCode;\n    this.response = response;\n  }\n", "  public int getStatusCode() {\n    return statusCode;\n  }\n\n  public String getResponse() {\n    return response;\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/RequestEntity.java", "chunked_list": ["package ee.carlrobert.openai.http;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.sun.net.httpserver.Headers;\nimport com.sun.net.httpserver.HttpExchange;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;", "import java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.Map;\nimport org.apache.commons.io.IOUtils;\n\npublic class RequestEntity {\n\n  private final URI uri;\n  private final Map<String, Object> body;\n  private final Headers headers;\n  private final String method;\n\n  public RequestEntity(HttpExchange exchange) throws IOException {\n    this.uri = exchange.getRequestURI();\n    this.body = toMap(IOUtils.toString(exchange.getRequestBody(), StandardCharsets.UTF_8));\n    this.headers = exchange.getRequestHeaders();\n    this.method = exchange.getRequestMethod();\n  }\n", "  public URI getUri() {\n    return uri;\n  }\n\n  public Map<String, Object> getBody() {\n    return body;\n  }\n\n  private Map<String, Object> toMap(String json) throws IOException {\n    if (json == null || json.isEmpty()) {\n      return Collections.emptyMap();\n    }\n\n    return new ObjectMapper().readValue(json, new TypeReference<>() {});\n  }\n", "    if (json == null || json.isEmpty()) {\n      return Collections.emptyMap();\n    }\n\n    return new ObjectMapper().readValue(json, new TypeReference<>() {});\n  }\n\n  public Headers getHeaders() {\n    return headers;\n  }\n", "  public String getMethod() {\n    return method;\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/expectation/BasicExpectation.java", "chunked_list": ["package ee.carlrobert.openai.http.expectation;\n\nimport ee.carlrobert.openai.http.exchange.BasicHttpExchange;\n\npublic class BasicExpectation extends Expectation {\n\n  private final BasicHttpExchange exchange;\n\n  public BasicExpectation(String path, BasicHttpExchange exchange) {\n    super(path);\n    this.exchange = exchange;\n  }\n", "  public BasicHttpExchange getExchange() {\n    return exchange;\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/expectation/StreamExpectation.java", "chunked_list": ["package ee.carlrobert.openai.http.expectation;\n\nimport ee.carlrobert.openai.http.exchange.StreamHttpExchange;\n\npublic class StreamExpectation extends Expectation {\n\n  private final StreamHttpExchange exchange;\n\n  public StreamExpectation(String path, StreamHttpExchange exchange) {\n    super(path);\n    this.exchange = exchange;\n  }\n", "  public StreamHttpExchange getExchange() {\n    return exchange;\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/expectation/Expectation.java", "chunked_list": ["package ee.carlrobert.openai.http.expectation;\n\npublic class Expectation {\n\n  private final String path;\n\n  public Expectation(String path) {\n    this.path = path;\n  }\n\n  public String getPath() {\n    return path;\n  }\n}\n", "  public String getPath() {\n    return path;\n  }\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/exchange/StreamHttpExchange.java", "chunked_list": ["package ee.carlrobert.openai.http.exchange;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport ee.carlrobert.openai.http.RequestEntity;\nimport java.util.List;\n\n@FunctionalInterface\npublic interface StreamHttpExchange {\n\n  List<String> getResponse(RequestEntity request) throws JsonProcessingException;\n}\n"]}
{"filename": "src/test/java/ee/carlrobert/openai/http/exchange/BasicHttpExchange.java", "chunked_list": ["package ee.carlrobert.openai.http.exchange;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport ee.carlrobert.openai.http.RequestEntity;\nimport ee.carlrobert.openai.http.ResponseEntity;\n\n@FunctionalInterface\npublic interface BasicHttpExchange {\n\n  ResponseEntity getResponse(RequestEntity request) throws JsonProcessingException;\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/PropertiesLoader.java", "chunked_list": ["package ee.carlrobert.openai;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class PropertiesLoader {\n\n  public static Properties loadProperties() {\n    try (InputStream inputStream = PropertiesLoader.class\n        .getClassLoader()\n        .getResourceAsStream(\"application.properties\")) {\n      Properties configuration = new Properties();\n      configuration.load(inputStream);\n      return configuration;\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to load application properties\", e);\n    }\n  }\n", "  public static Properties loadProperties() {\n    try (InputStream inputStream = PropertiesLoader.class\n        .getClassLoader()\n        .getResourceAsStream(\"application.properties\")) {\n      Properties configuration = new Properties();\n      configuration.load(inputStream);\n      return configuration;\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to load application properties\", e);\n    }\n  }\n", "  public static String getValue(String key) {\n    return (String) loadProperties().get(key);\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/OpenAIClient.java", "chunked_list": ["package ee.carlrobert.openai.client;\n\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionClient;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionClient;\nimport ee.carlrobert.openai.client.embeddings.EmbeddingsClient;\n\npublic class OpenAIClient extends Client {\n\n  private final String organization;\n\n  private OpenAIClient(Builder builder) {\n    super(builder);\n    this.organization = builder.organization;\n  }\n", "  public String getOrganization() {\n    return organization;\n  }\n\n  public static class Builder extends Client.Builder {\n\n    private String organization;\n\n    public Builder(String apiKey) {\n      super(apiKey);\n    }\n", "    public Builder setOrganization(String organization) {\n      this.organization = organization;\n      return this;\n    }\n\n    @Override\n    public ChatCompletionClient buildChatCompletionClient() {\n      return new ChatCompletionClient(new OpenAIClient(this));\n    }\n\n    @Override", "    public TextCompletionClient buildTextCompletionClient() {\n      return new TextCompletionClient(new OpenAIClient(this));\n    }\n\n    public EmbeddingsClient buildEmbeddingsClient() {\n      return new EmbeddingsClient(new OpenAIClient(this));\n    }\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/ClientCode.java", "chunked_list": ["package ee.carlrobert.openai.client;\n\npublic enum ClientCode {\n  EMBEDDINGS(\"embeddings\"),\n  CHAT_COMPLETION(\"chat.completion\"),\n  TEXT_COMPLETION(\"text.completion\"),\n  AZURE_CHAT_COMPLETION(\"azure.chat.completion\"),\n  AZURE_TEXT_COMPLETION(\"azure.text.completion\");\n\n  private final String code;\n\n  ClientCode(String code) {\n    this.code = code;\n  }\n", "  public String getCode() {\n    return code;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/ProxyAuthenticator.java", "chunked_list": ["package ee.carlrobert.openai.client;\n\npublic class ProxyAuthenticator {\n\n  private final String username;\n  private final String password;\n\n  public ProxyAuthenticator(String username, String password) {\n    this.username = username;\n    this.password = password;\n  }\n", "  public String getUsername() {\n    return username;\n  }\n\n  public String getPassword() {\n    return password;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/AzureClient.java", "chunked_list": ["package ee.carlrobert.openai.client;\n\nimport ee.carlrobert.openai.client.azure.AzureChatCompletionClient;\nimport ee.carlrobert.openai.client.azure.AzureClientRequestParams;\nimport ee.carlrobert.openai.client.azure.AzureTextCompletionClient;\n\npublic class AzureClient extends Client {\n\n  private final AzureClientRequestParams requestParams;\n  private final boolean activeDirectoryAuthentication;\n\n  private AzureClient(Builder builder) {\n    super(builder);\n    this.requestParams = builder.requestParams;\n    this.activeDirectoryAuthentication = builder.activeDirectoryAuthentication;\n  }\n", "  public boolean isActiveDirectoryAuthentication() {\n    return activeDirectoryAuthentication;\n  }\n\n  public AzureClientRequestParams getRequestParams() {\n    return requestParams;\n  }\n\n  public static class Builder extends Client.Builder {\n\n    private final AzureClientRequestParams requestParams;\n    private boolean activeDirectoryAuthentication;\n\n    public Builder(String apiKey, AzureClientRequestParams requestParams) {\n      super(apiKey);\n      this.requestParams = requestParams;\n    }\n", "  public static class Builder extends Client.Builder {\n\n    private final AzureClientRequestParams requestParams;\n    private boolean activeDirectoryAuthentication;\n\n    public Builder(String apiKey, AzureClientRequestParams requestParams) {\n      super(apiKey);\n      this.requestParams = requestParams;\n    }\n\n    public Builder setActiveDirectoryAuthentication(boolean activeDirectoryAuthentication) {\n      this.activeDirectoryAuthentication = activeDirectoryAuthentication;\n      return this;\n    }\n\n    @Override", "    public Builder setActiveDirectoryAuthentication(boolean activeDirectoryAuthentication) {\n      this.activeDirectoryAuthentication = activeDirectoryAuthentication;\n      return this;\n    }\n\n    @Override\n    public AzureChatCompletionClient buildChatCompletionClient() {\n      return new AzureChatCompletionClient(new AzureClient(this));\n    }\n\n    @Override", "    public AzureTextCompletionClient buildTextCompletionClient() {\n      return new AzureTextCompletionClient(new AzureClient(this));\n    }\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/Client.java", "chunked_list": ["package ee.carlrobert.openai.client;\n\nimport ee.carlrobert.openai.client.completion.CompletionClient;\nimport java.net.Proxy;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.X509Certificate;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLContext;", "import java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport okhttp3.Credentials;\nimport okhttp3.OkHttpClient;\n\npublic class Client {\n\n  final OkHttpClient httpClient;\n  final String apiKey;\n  final String host;\n  final Proxy proxy;\n  final ProxyAuthenticator proxyAuthenticator;\n  final Long connectTimeout;\n  final TimeUnit connectTimeoutUnit;\n  final Long readTimeout;\n  final TimeUnit readTimeoutUnit;\n  final boolean retryOnReadTimeout;\n", "  public OkHttpClient getHttpClient() {\n    return httpClient;\n  }\n\n  public String getApiKey() {\n    return apiKey;\n  }\n\n  public String getHost() {\n    return host;\n  }\n", "  public String getHost() {\n    return host;\n  }\n\n  public boolean isRetryOnReadTimeout() {\n    return retryOnReadTimeout;\n  }\n\n  protected Client(Builder builder) {\n    this.httpClient = builder.buildHttpClient();\n    this.apiKey = builder.apiKey;\n    this.host = builder.host;\n    this.proxy = builder.proxy;\n    this.proxyAuthenticator = builder.proxyAuthenticator;\n    this.connectTimeout = builder.connectTimeout;\n    this.connectTimeoutUnit = builder.connectTimeoutUnit;\n    this.readTimeout = builder.readTimeout;\n    this.readTimeoutUnit = builder.readTimeoutUnit;\n    this.retryOnReadTimeout = builder.retryOnReadTimeout;\n  }\n", "  public static class Builder {\n\n    private final String apiKey;\n    private String host;\n    private Proxy proxy;\n    private ProxyAuthenticator proxyAuthenticator;\n    private Long connectTimeout;\n    private TimeUnit connectTimeoutUnit;\n    private Long readTimeout;\n    private TimeUnit readTimeoutUnit;\n    private boolean retryOnReadTimeout;\n\n    public Builder(String apiKey) {\n      this.apiKey = apiKey;\n    }\n", "    public Builder setHost(String host) {\n      this.host = host;\n      return this;\n    }\n\n    public Builder setProxy(Proxy proxy) {\n      this.proxy = proxy;\n      return this;\n    }\n\n    public Builder setProxyAuthenticator(ProxyAuthenticator proxyAuthenticator) {\n      this.proxyAuthenticator = proxyAuthenticator;\n      return this;\n    }\n", "    public Builder setProxyAuthenticator(ProxyAuthenticator proxyAuthenticator) {\n      this.proxyAuthenticator = proxyAuthenticator;\n      return this;\n    }\n\n    public Builder setConnectTimeout(Long timeout, TimeUnit unit) {\n      this.connectTimeout = timeout;\n      this.connectTimeoutUnit = unit;\n      return this;\n    }\n", "    public Builder setReadTimeout(Long timeout, TimeUnit unit) {\n      this.readTimeout = timeout;\n      this.readTimeoutUnit = unit;\n      return this;\n    }\n\n    public Builder setRetryOnReadTimeout(boolean retryOnReadTimeout) {\n      this.retryOnReadTimeout = retryOnReadTimeout;\n      return this;\n    }\n", "    public CompletionClient buildChatCompletionClient() {\n      throw new RuntimeException(\"Chat completion client not implemented!\");\n    }\n\n    public CompletionClient buildTextCompletionClient() {\n      throw new RuntimeException(\"Text completion client not implemented!\");\n    }\n\n    public OkHttpClient buildHttpClient() {\n      OkHttpClient.Builder builder = new OkHttpClient.Builder();\n", "    public OkHttpClient buildHttpClient() {\n      OkHttpClient.Builder builder = new OkHttpClient.Builder();\n\n      if (connectTimeout != null && connectTimeoutUnit != null) {\n        builder.connectTimeout(connectTimeout, connectTimeoutUnit);\n      }\n      if (readTimeout != null && readTimeoutUnit != null) {\n        builder.readTimeout(readTimeout, readTimeoutUnit);\n      }\n\n      if (proxy != null) {\n        trustAllCertificates(builder);\n        builder.proxy(proxy);\n", "      if (proxy != null) {\n        trustAllCertificates(builder);\n        builder.proxy(proxy);\n\n        if (proxyAuthenticator != null) {\n          builder.proxyAuthenticator((route, response) ->\n              response.request()\n                  .newBuilder()\n                  .header(\"Proxy-Authorization\", Credentials.basic(\n                      proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());\n        }\n      }\n      return builder.build();\n    }\n\n    private void trustAllCertificates(OkHttpClient.Builder builder) {\n      var trustManager = new TrustManager[] {\n          new X509TrustManager() {\n            @Override", "            public void checkClientTrusted(X509Certificate[] chain, String authType) {\n            }\n\n            @Override\n            public void checkServerTrusted(X509Certificate[] chain, String authType) {\n            }\n\n            @Override\n            public X509Certificate[] getAcceptedIssuers() {\n              return new X509Certificate[] {};\n            }\n          }\n      };\n", "      try {\n        var sslContext = SSLContext.getInstance(\"SSL\");\n        sslContext.init(null, trustManager, new SecureRandom());\n        builder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManager[0]);\n        builder.hostnameVerifier((hostname, session) -> true);\n      } catch (NoSuchAlgorithmException | KeyManagementException e) {\n        throw new RuntimeException(\"Something went wrong while attempting to trust all certificates: \", e);\n      }\n    }\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/embeddings/EmbeddingResponse.java", "chunked_list": ["package ee.carlrobert.openai.client.embeddings;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class EmbeddingResponse {\n\n  private List<EmbeddingData> data;\n\n  public List<EmbeddingData> getData() {\n    return data;\n  }\n", "  public void setData(List<EmbeddingData> data) {\n    this.data = data;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/embeddings/EmbeddingsClient.java", "chunked_list": ["package ee.carlrobert.openai.client.embeddings;\n\nimport static java.util.stream.Collectors.toList;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.PropertiesLoader;\nimport ee.carlrobert.openai.client.Client;\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.OpenAIClient;", "import ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.OpenAIClient;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport okhttp3.Headers;\nimport okhttp3.MediaType;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\n\npublic class EmbeddingsClient {\n\n  private static final String BASE_URL = PropertiesLoader.getValue(\"openai.baseUrl\");\n  private final String baseUrl;\n  private final Client client;\n\n  public EmbeddingsClient(OpenAIClient client) {\n    this.client = client;\n    this.baseUrl = client.getHost() == null ? BASE_URL : client.getHost();\n  }\n", "import okhttp3.RequestBody;\n\npublic class EmbeddingsClient {\n\n  private static final String BASE_URL = PropertiesLoader.getValue(\"openai.baseUrl\");\n  private final String baseUrl;\n  private final Client client;\n\n  public EmbeddingsClient(OpenAIClient client) {\n    this.client = client;\n    this.baseUrl = client.getHost() == null ? BASE_URL : client.getHost();\n  }\n", "  public ClientCode getClientCode() {\n    return ClientCode.EMBEDDINGS;\n  }\n\n  public double[] getEmbedding(String input) {\n    return getEmbeddings(List.of(input)).get(0);\n  }\n\n  public List<double[]> getEmbeddings(List<String> texts) {\n    try (var response = client.getHttpClient()\n        .newCall(buildRequest(baseUrl + \"/v1/embeddings\", texts))\n        .execute()) {", "      if (response.body() != null) {\n        return new ObjectMapper()\n            .readValue(response.body().string(), EmbeddingResponse.class)\n            .getData()\n            .stream()\n            .map(EmbeddingData::getEmbedding)\n            .collect(toList());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to fetch embedding\", e);\n    }\n    return null;\n  }\n\n  private Request buildRequest(String url, List<String> texts) throws JsonProcessingException {\n    return new Request.Builder()\n        .url(url)\n        .headers(Headers.of(Map.of(\"Authorization\", \"Bearer \" + client.getApiKey())))\n        .post(RequestBody.create(\n            new ObjectMapper().writeValueAsString(Map.of(\n                \"input\", texts,\n                \"model\", \"text-embedding-ada-002\")),\n            MediaType.parse(\"application/json\")))\n        .build();\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/embeddings/EmbeddingData.java", "chunked_list": ["package ee.carlrobert.openai.client.embeddings;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class EmbeddingData {\n\n  private double[] embedding;\n\n  public double[] getEmbedding() {\n    return embedding;\n  }\n", "  public void setEmbedding(double[] embedding) {\n    this.embedding = embedding;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/embeddings/Embedding.java", "chunked_list": ["package ee.carlrobert.openai.client.embeddings;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Embedding {\n\n  private final double[] embedding;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public Embedding(@JsonProperty(\"error\") double[] embedding) {\n    this.embedding = embedding;\n  }\n\n  public double[] getEmbedding() {\n    return embedding;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/azure/AzureApiResponseError.java", "chunked_list": ["package ee.carlrobert.openai.client.azure;\n\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport ee.carlrobert.openai.client.completion.BaseApiResponseError;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AzureApiResponseError implements BaseApiResponseError {\n\n  private final int statusCode;\n  private final String message;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public AzureApiResponseError(\n      @JsonProperty(\"error\") ErrorDetails error,\n      @JsonProperty(\"statusCode\") int statusCode,\n      @JsonProperty(\"message\") String message) {", "\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AzureApiResponseError implements BaseApiResponseError {\n\n  private final int statusCode;\n  private final String message;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public AzureApiResponseError(\n      @JsonProperty(\"error\") ErrorDetails error,\n      @JsonProperty(\"statusCode\") int statusCode,\n      @JsonProperty(\"message\") String message) {", "    if (error != null) {\n      this.statusCode = Integer.getInteger(error.getCode(), 0);\n      this.message = error.getMessage();\n    } else {\n      this.statusCode = statusCode;\n      this.message = message;\n    }\n  }\n\n  public int getStatusCode() {\n    return statusCode;\n  }\n", "  public int getStatusCode() {\n    return statusCode;\n  }\n\n  public String getMessage() {\n    return message;\n  }\n\n  @Override\n  public ErrorDetails getError() {\n    return new ErrorDetails(message);\n  }\n}\n", "  public ErrorDetails getError() {\n    return new ErrorDetails(message);\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/azure/AzureChatCompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.azure;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.client.AzureClient;\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.CompletionEventSourceListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionEventSourceListener;", "import ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionEventSourceListener;\nimport java.util.function.Consumer;\n\npublic class AzureChatCompletionClient extends AzureCompletionClient {\n\n  public AzureChatCompletionClient(AzureClient client) {\n    super(client, \"/openai/deployments/%s/chat/completions?api-version=%s\");\n  }\n\n  @Override\n  protected CompletionEventSourceListener getEventListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n    return new ChatCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry) {\n      @Override\n      protected ErrorDetails getErrorDetails(String data) throws JsonProcessingException {\n        return new ObjectMapper().readValue(data, AzureApiResponseError.class).getError();\n      }\n    };\n  }\n\n  @Override", "  public ClientCode getClientCode() {\n    return ClientCode.AZURE_CHAT_COMPLETION;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/azure/AzureClientRequestParams.java", "chunked_list": ["package ee.carlrobert.openai.client.azure;\n\npublic class AzureClientRequestParams {\n\n  private final String resourceName;\n  private final String deploymentId;\n  private final String apiVersion;\n\n  public AzureClientRequestParams(String resourceName, String deploymentId, String apiVersion) {\n    this.resourceName = resourceName;\n    this.deploymentId = deploymentId;\n    this.apiVersion = apiVersion;\n  }\n", "  public String getResourceName() {\n    return resourceName;\n  }\n\n  public String getDeploymentId() {\n    return deploymentId;\n  }\n\n  public String getApiVersion() {\n    return apiVersion;\n  }\n}\n", "  public String getApiVersion() {\n    return apiVersion;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/azure/AzureTextCompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.azure;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.client.AzureClient;\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.CompletionEventSourceListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionEventSourceListener;", "import ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionEventSourceListener;\nimport java.util.function.Consumer;\n\npublic class AzureTextCompletionClient extends AzureCompletionClient {\n\n  public AzureTextCompletionClient(AzureClient client) {\n    super(client, \"/openai/deployments/%s/completions?api-version=%s\");\n  }\n\n  @Override\n  protected CompletionEventSourceListener getEventListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n\n    return new TextCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry) {\n      @Override\n      protected ErrorDetails getErrorDetails(String data) throws JsonProcessingException {\n        return new ObjectMapper().readValue(data, AzureApiResponseError.class).getError();\n      }\n    };\n  }\n\n  @Override", "  public ClientCode getClientCode() {\n    return ClientCode.AZURE_TEXT_COMPLETION;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/azure/AzureCompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.azure;\n\nimport static java.lang.String.format;\n\nimport ee.carlrobert.openai.PropertiesLoader;\nimport ee.carlrobert.openai.client.AzureClient;\nimport ee.carlrobert.openai.client.completion.CompletionClient;\nimport java.util.Map;\n\nabstract class AzureCompletionClient extends CompletionClient {", "\nabstract class AzureCompletionClient extends CompletionClient {\n\n  private final AzureClient client;\n\n  private static final String BASE_URL = PropertiesLoader.getValue(\"openai.azure.baseUrl\");\n\n  public AzureCompletionClient(AzureClient client, String path) {\n    super(client, getHost(client), formatPath(client, path));\n    this.client = client;", "    super(client, getHost(client), formatPath(client, path));\n    this.client = client;\n  }\n\n  private static String formatPath(AzureClient client, String path) {\n    var params = client.getRequestParams();\n    return format(path, params.getDeploymentId(), params.getApiVersion());\n  }\n\n  private static String getHost(AzureClient client) {", "\n  private static String getHost(AzureClient client) {\n    return format(\n        client.getHost() == null ? BASE_URL : client.getHost(),\n        client.getRequestParams().getResourceName());\n  }\n\n  @Override\n  protected Map<String, String> getRequiredHeaders() {\n    return client.isActiveDirectoryAuthentication() ?", "  protected Map<String, String> getRequiredHeaders() {\n    return client.isActiveDirectoryAuthentication() ?\n        Map.of(\"Authorization\", \"Bearer \" + client.getApiKey()) :\n        Map.of(\"api-key\", client.getApiKey());\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/CompletionEventListener.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\npublic interface CompletionEventListener {\n\n  default void onMessage(String message) {\n  }\n\n  default void onComplete(StringBuilder messageBuilder) {\n  }\n\n  default void onError(ErrorDetails error, Throwable ex) {\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/CompletionModel.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\npublic interface CompletionModel {\n  String getCode();\n\n  String getDescription();\n\n  int getMaxTokens();\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/OpenAICompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport ee.carlrobert.openai.PropertiesLoader;\nimport ee.carlrobert.openai.client.OpenAIClient;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic abstract class OpenAICompletionClient extends CompletionClient {\n\n  private static final String BASE_URL = PropertiesLoader.getValue(\"openai.baseUrl\");\n  private final OpenAIClient client;\n\n  public OpenAICompletionClient(OpenAIClient client, String path) {\n    super(client, client.getHost() == null ? BASE_URL : client.getHost(), path);\n    this.client = client;\n  }\n\n  @Override\n  protected Map<String, String> getRequiredHeaders() {\n    var headers = new HashMap<>(Map.of(\n        \"Authorization\", \"Bearer \" + client.getApiKey()\n    ));\n    var organization = client.getOrganization();", "    if (organization != null && !organization.isEmpty()) {\n      headers.put(\"OpenAI-Organization\", organization);\n    }\n    return headers;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/ErrorDetails.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ErrorDetails {\n\n  private static final String DEFAULT_ERROR_MSG = \"Something went wrong. Please try again later.\";\n\n  private final String message;\n  private final String type;\n  private final String param;\n  private final String code;\n\n  public ErrorDetails(String message) {\n    this(message, null, null, null);\n  }\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ErrorDetails(\n      @JsonProperty(\"message\") String message,\n      @JsonProperty(\"type\") String type,\n      @JsonProperty(\"param\") String param,\n      @JsonProperty(\"code\") String code) {\n    this.message = message;\n    this.type = type;\n    this.param = param;\n    this.code = code;\n  }\n", "  public static ErrorDetails DEFAULT_ERROR = new ErrorDetails(DEFAULT_ERROR_MSG);\n\n  public String getMessage() {\n    return message;\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public String getParam() {\n    return param;\n  }\n", "  public String getParam() {\n    return param;\n  }\n\n  public String getCode() {\n    return code;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/CompletionEventSourceListener.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport static java.lang.String.format;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.io.IOException;\nimport java.net.SocketTimeoutException;\nimport java.util.function.Consumer;\nimport okhttp3.Response;\nimport okhttp3.internal.http2.StreamResetException;", "import okhttp3.Response;\nimport okhttp3.internal.http2.StreamResetException;\nimport okhttp3.sse.EventSource;\nimport okhttp3.sse.EventSourceListener;\nimport org.jetbrains.annotations.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class CompletionEventSourceListener extends EventSourceListener {\n\n  private static final Logger LOG = LoggerFactory.getLogger(CompletionEventSourceListener.class);\n\n  private final CompletionEventListener listeners;\n  private final StringBuilder messageBuilder = new StringBuilder();\n  private final boolean retryOnReadTimeout;\n  private final Consumer<String> onRetry;\n\n  public CompletionEventSourceListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n    this.listeners = listeners;\n    this.retryOnReadTimeout = retryOnReadTimeout;\n    this.onRetry = onRetry;\n  }\n\n  protected abstract String getMessage(String data) throws JsonProcessingException;\n\n  protected abstract ErrorDetails getErrorDetails(String data) throws JsonProcessingException;\n", "public abstract class CompletionEventSourceListener extends EventSourceListener {\n\n  private static final Logger LOG = LoggerFactory.getLogger(CompletionEventSourceListener.class);\n\n  private final CompletionEventListener listeners;\n  private final StringBuilder messageBuilder = new StringBuilder();\n  private final boolean retryOnReadTimeout;\n  private final Consumer<String> onRetry;\n\n  public CompletionEventSourceListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n    this.listeners = listeners;\n    this.retryOnReadTimeout = retryOnReadTimeout;\n    this.onRetry = onRetry;\n  }\n\n  protected abstract String getMessage(String data) throws JsonProcessingException;\n\n  protected abstract ErrorDetails getErrorDetails(String data) throws JsonProcessingException;\n", "  public void onOpen(@NotNull EventSource eventSource, @NotNull Response response) {\n    LOG.info(\"Request opened.\");\n  }\n\n  public void onClosed(@NotNull EventSource eventSource) {\n    LOG.info(\"Request closed.\");\n    listeners.onComplete(messageBuilder);\n  }\n\n  public void onEvent(\n      @NotNull EventSource eventSource,\n      String id,\n      String type,\n      @NotNull String data) {", "  public void onEvent(\n      @NotNull EventSource eventSource,\n      String id,\n      String type,\n      @NotNull String data) {\n    try {\n      // Redundant end signal so just ignore\n      if (\"[DONE]\".equals(data)) {\n        return;\n      }\n\n      var message = getMessage(data);", "      if (message != null) {\n        messageBuilder.append(message);\n        listeners.onMessage(message);\n      }\n    } catch (JsonProcessingException e) {\n      throw new RuntimeException(\"Unable to deserialize payload.\", e);\n    }\n  }\n\n  public void onFailure(\n      @NotNull EventSource eventSource,\n      Throwable throwable,\n      Response response) {", "  public void onFailure(\n      @NotNull EventSource eventSource,\n      Throwable throwable,\n      Response response) {\n    if (throwable instanceof StreamResetException) {\n      LOG.info(\"Stream was cancelled\");\n      listeners.onComplete(messageBuilder);\n      return;\n    }\n\n    if (throwable instanceof SocketTimeoutException) {", "    if (throwable instanceof SocketTimeoutException) {\n      if (retryOnReadTimeout) {\n        LOG.info(\"Retrying request.\");\n        onRetry.accept(messageBuilder.toString());\n        return;\n      }\n\n      listeners.onError(new ErrorDetails(\"Request timed out. This may be due to the server being overloaded.\"), throwable);\n      return;\n    }\n", "    try {\n      if (response == null) {\n        listeners.onError(new ErrorDetails(throwable.getMessage()), throwable);\n        return;\n      }\n\n      var body = response.body();\n      if (body != null) {\n        var jsonBody = body.string();\n        try {\n          var errorDetails = getErrorDetails(jsonBody);", "        try {\n          var errorDetails = getErrorDetails(jsonBody);\n          if (errorDetails == null ||\n              errorDetails.getMessage() == null || errorDetails.getMessage().isEmpty()) {\n            listeners.onError(toUnknownErrorResponse(response, jsonBody), new RuntimeException());\n          } else {\n            listeners.onError(errorDetails, new RuntimeException());\n          }\n        } catch (JsonProcessingException e) {\n          LOG.error(\"Could not serialize error response\", throwable);\n          listeners.onError(toUnknownErrorResponse(response, jsonBody), e);\n        }\n      }\n    } catch (IOException ex) {\n      listeners.onError(new ErrorDetails(ex.getMessage()), ex);\n    }\n  }\n\n  private ErrorDetails toUnknownErrorResponse(Response response, String jsonBody) {\n    return new ErrorDetails(format(\"Unknown API response. Code: %s, Body: %s\", response.code(), jsonBody));\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/CompletionRequest.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic abstract class CompletionRequest {\n\n  @JsonProperty(\"max_tokens\")\n  private final int maxTokens;\n  private final double temperature;\n  @JsonProperty(\"frequency_penalty\")\n  private final double frequencyPenalty;\n  @JsonProperty(\"presence_penalty\")\n  private final double presencePenalty;\n  private final boolean stream;\n  @JsonIgnore\n  private final Map<String, ?> additionalParams;\n\n  protected CompletionRequest(Builder builder) {\n    this.maxTokens = builder.maxTokens;\n    this.temperature = builder.temperature;\n    this.frequencyPenalty = builder.frequencyPenalty;\n    this.presencePenalty = builder.presencePenalty;\n    this.additionalParams = builder.additionalParams;\n    this.stream = builder.stream;\n  }\n", "  public int getMaxTokens() {\n    return maxTokens;\n  }\n\n  public double getTemperature() {\n    return temperature;\n  }\n\n  public double getFrequencyPenalty() {\n    return frequencyPenalty;\n  }\n", "  public double getFrequencyPenalty() {\n    return frequencyPenalty;\n  }\n\n  public double getPresencePenalty() {\n    return presencePenalty;\n  }\n\n  public Map<String, ?> getAdditionalParams() {\n    return additionalParams;\n  }\n", "  public boolean isStream() {\n    return stream;\n  }\n\n  public abstract static class Builder {\n\n    private int maxTokens = 1000;\n    private double temperature = 0.9;\n    private double frequencyPenalty = 0;\n    private double presencePenalty = 0.6;\n    private boolean stream = true;\n    private Map<String, ?> additionalParams = new HashMap<>();\n", "    public Builder setMaxTokens(int maxTokens) {\n      this.maxTokens = maxTokens;\n      return this;\n    }\n\n    public Builder setTemperature(double temperature) {\n      this.temperature = temperature;\n      return this;\n    }\n\n    public Builder setFrequencyPenalty(double frequencyPenalty) {\n      this.frequencyPenalty = frequencyPenalty;\n      return this;\n    }\n", "    public Builder setFrequencyPenalty(double frequencyPenalty) {\n      this.frequencyPenalty = frequencyPenalty;\n      return this;\n    }\n\n    public Builder setPresencePenalty(double presencePenalty) {\n      this.presencePenalty = presencePenalty;\n      return this;\n    }\n\n    public Builder setStream(boolean stream) {\n      this.stream = stream;\n      return this;\n    }\n", "    public Builder setStream(boolean stream) {\n      this.stream = stream;\n      return this;\n    }\n\n    public Builder setAdditionalParams(Map<String, ?> additionalParams) {\n      this.additionalParams = additionalParams;\n      return this;\n    }\n\n    public abstract CompletionRequest build();\n  }\n}\n", "    public abstract CompletionRequest build();\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/CompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.client.Client;\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionMessage;\nimport ee.carlrobert.openai.client.completion.chat.request.ChatCompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.request.TextCompletionRequest;", "import ee.carlrobert.openai.client.completion.chat.request.ChatCompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.request.TextCompletionRequest;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.function.Consumer;\nimport okhttp3.Headers;\nimport okhttp3.MediaType;\nimport okhttp3.Request;", "import okhttp3.MediaType;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.sse.EventSource;\nimport okhttp3.sse.EventSources;\n\npublic abstract class CompletionClient {\n\n  private static final int MAX_RETRY_COUNT = 3;\n\n  private final Client client;\n  private final String url;\n  private int retryCounter = 0;\n\n  public CompletionClient(Client client, String host, String path) {\n    this.client = client;\n    this.url = host + path;\n  }\n\n  protected abstract Map<String, String> getRequiredHeaders();\n\n  protected abstract CompletionEventSourceListener getEventListener(\n      CompletionEventListener listeners,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry);\n", "  public abstract ClientCode getClientCode();\n\n  public <T extends CompletionRequest> EventSource stream(T requestBody, CompletionEventListener listeners) {\n    return createNewEventSource(requestBody, listeners);\n  }\n\n  public <T extends CompletionRequest> String call(T requestBody) {\n    try (var response = client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {\n      return Objects.requireNonNull(response.body()).string();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  protected <T extends CompletionRequest> okhttp3.Request buildRequest(T requestBody) throws JsonProcessingException {\n    var headers = new HashMap<>(getRequiredHeaders());", "    if (requestBody.isStream()) {\n      headers.put(\"Accept\", \"text/event-stream\");\n    }\n    var mapper = new ObjectMapper();\n    var map = mapper.readValue(mapper.writeValueAsString(requestBody), new TypeReference<Map<String, Object>>() {});\n    var additionalParams = requestBody.getAdditionalParams();\n    if (additionalParams != null && !additionalParams.isEmpty()) {\n      map.putAll(additionalParams);\n    }\n\n    return new Request.Builder()\n        .url(url)\n        .headers(Headers.of(headers))\n        .post(RequestBody.create(\n            mapper.writeValueAsString(map),\n            MediaType.parse(\"application/json\")))\n        .build();\n  }\n\n  protected <T extends CompletionRequest> EventSource createNewEventSource(T requestBody, CompletionEventListener listeners) {\n    Request request;", "    try {\n      request = buildRequest(requestBody);\n    } catch (JsonProcessingException e) {\n      var error = new RuntimeException(\"Unable to build request\", e);\n      listeners.onError(new ErrorDetails(e.getMessage()), error);\n      throw error;\n    }\n\n    return EventSources.createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {", "              if (retryCounter > MAX_RETRY_COUNT) {\n                listeners.onError(new ErrorDetails(\"The server may be overloaded as the request has timed out for 3 times.\"), new RuntimeException());\n                return;\n              }\n\n              if (requestBody instanceof ChatCompletionRequest) {\n                var body = ((ChatCompletionRequest) requestBody);\n\n                if (retryCounter == 0) {\n                  body.addMessage(new ChatCompletionMessage(\"assistant\", response));\n                } else {\n                  var messages = body.getMessages();\n                  var message = messages.get(messages.size() - 1);\n                  message.setContent(message.getContent() + response);\n                }\n\n                retryCounter = retryCounter + 1;\n                createNewEventSource(requestBody, listeners);\n              }", "                if (retryCounter == 0) {\n                  body.addMessage(new ChatCompletionMessage(\"assistant\", response));\n                } else {\n                  var messages = body.getMessages();\n                  var message = messages.get(messages.size() - 1);\n                  message.setContent(message.getContent() + response);\n                }\n\n                retryCounter = retryCounter + 1;\n                createNewEventSource(requestBody, listeners);\n              }", "              if (requestBody instanceof TextCompletionRequest) {\n                listeners.onComplete(new StringBuilder(response));\n              }\n            }));\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/ApiResponseError.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ApiResponseError implements BaseApiResponseError {\n\n  private final ErrorDetails error;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ApiResponseError(@JsonProperty(\"error\") ErrorDetails error) {\n    this.error = error;\n  }\n", "  public ErrorDetails getError() {\n    return error;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/BaseApiResponseError.java", "chunked_list": ["package ee.carlrobert.openai.client.completion;\n\npublic interface BaseApiResponseError {\n\n  ErrorDetails getError();\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/ChatCompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat;\n\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.OpenAIClient;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.OpenAICompletionClient;\nimport java.util.function.Consumer;\n\npublic class ChatCompletionClient extends OpenAICompletionClient {\n\n  public ChatCompletionClient(OpenAIClient client) {\n    super(client, \"/v1/chat/completions\");\n  }\n\n  @Override\n  protected ChatCompletionEventSourceListener getEventListener(\n      CompletionEventListener listeners,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry) {\n    return new ChatCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  @Override", "public class ChatCompletionClient extends OpenAICompletionClient {\n\n  public ChatCompletionClient(OpenAIClient client) {\n    super(client, \"/v1/chat/completions\");\n  }\n\n  @Override\n  protected ChatCompletionEventSourceListener getEventListener(\n      CompletionEventListener listeners,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry) {\n    return new ChatCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  @Override", "  public ClientCode getClientCode() {\n    return ClientCode.CHAT_COMPLETION;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/ChatCompletionEventSourceListener.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.client.completion.ApiResponseError;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.CompletionEventSourceListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.chat.response.ChatCompletionResponse;\nimport java.util.function.Consumer;", "import ee.carlrobert.openai.client.completion.chat.response.ChatCompletionResponse;\nimport java.util.function.Consumer;\n\npublic class ChatCompletionEventSourceListener extends CompletionEventSourceListener {\n\n  public ChatCompletionEventSourceListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n    super(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  protected String getMessage(String data) throws JsonProcessingException {\n    var choice = new ObjectMapper()\n        .readValue(data, ChatCompletionResponse.class)\n        .getChoices()\n        .get(0);", "    if (choice != null) {\n      var delta = choice.getDelta();\n      if (delta != null) {\n        return delta.getContent();\n      }\n    }\n    return \"\";\n  }\n\n  @Override\n  protected ErrorDetails getErrorDetails(String data) throws JsonProcessingException {\n    return new ObjectMapper().readValue(data, ApiResponseError.class).getError();\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/ChatCompletionModel.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat;\n\nimport ee.carlrobert.openai.client.completion.CompletionModel;\nimport java.util.Arrays;\n\npublic enum ChatCompletionModel implements CompletionModel {\n  GPT_3_5(\"gpt-3.5-turbo\", \"ChatGPT(3.5) - Most capable model (Default)\", 4096),\n  GPT_3_5_16k(\"gpt-3.5-turbo-16k\", \"ChatGPT(3.5) - 16k - Same capabilities as 3.5 but with 4x the context\", 16384),\n  GPT_4(\"gpt-4\", \"ChatGPT(4.0) - Most recent model\", 8192),\n  GPT_4_32k(\"gpt-4-32k\", \"ChatGPT(4.0) - 32k - Same capabilities as 4.0 but with 4x the context\", 32768);\n\n  private final String code;\n  private final String description;\n  private final int maxTokens;\n\n  ChatCompletionModel(String code, String description, int maxTokens) {\n    this.code = code;\n    this.description = description;\n    this.maxTokens = maxTokens;\n  }\n", "  public String getCode() {\n    return code;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public int getMaxTokens() {\n    return maxTokens;\n  }\n", "  public int getMaxTokens() {\n    return maxTokens;\n  }\n\n  static public ChatCompletionModel findByCode(String code) {\n    return Arrays.stream(ChatCompletionModel.values())\n        .filter(item -> item.getCode().equals(code))\n        .findFirst().orElseThrow();\n  }\n}\n\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/response/ChatCompletionResponse.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat.response;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ChatCompletionResponse {\n\n  private final String id;\n  private final List<ChatCompletionResponseChoice> choices;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ChatCompletionResponse(\n      @JsonProperty(\"id\") String id,\n      @JsonProperty(\"choices\") List<ChatCompletionResponseChoice> choices) {\n    this.id = id;\n    this.choices = choices;\n  }\n", "public class ChatCompletionResponse {\n\n  private final String id;\n  private final List<ChatCompletionResponseChoice> choices;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ChatCompletionResponse(\n      @JsonProperty(\"id\") String id,\n      @JsonProperty(\"choices\") List<ChatCompletionResponseChoice> choices) {\n    this.id = id;\n    this.choices = choices;\n  }\n", "  public String getId() {\n    return id;\n  }\n\n  public List<ChatCompletionResponseChoice> getChoices() {\n    return choices;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/response/ChatCompletionResponseChoice.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat.response;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ChatCompletionResponseChoice {\n\n  private final ChatCompletionResponseChoiceDelta delta;\n  private final ChatCompletionResponseChoiceDelta message;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ChatCompletionResponseChoice(\n      @JsonProperty(\"delta\") ChatCompletionResponseChoiceDelta delta,\n      @JsonProperty(\"message\") ChatCompletionResponseChoiceDelta message) {\n    this.delta = delta;\n    this.message = message;\n  }\n", "  public ChatCompletionResponseChoiceDelta getDelta() {\n    return delta;\n  }\n\n  public ChatCompletionResponseChoiceDelta getMessage() {\n    return message;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/response/ChatCompletionResponseChoiceDelta.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat.response;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ChatCompletionResponseChoiceDelta {\n\n  private final String role;\n  private final String content;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public ChatCompletionResponseChoiceDelta(\n      @JsonProperty(\"role\") String role,\n      @JsonProperty(\"content\") String content) {\n    this.role = role;\n    this.content = content;\n  }\n", "  public String getRole() {\n    return role;\n  }\n\n  public String getContent() {\n    return content;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/request/ChatCompletionRequest.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat.request;\n\nimport ee.carlrobert.openai.client.completion.CompletionRequest;\nimport ee.carlrobert.openai.client.completion.chat.ChatCompletionModel;\nimport java.util.List;\n\npublic class ChatCompletionRequest extends CompletionRequest {\n\n  private final String model;\n  private final List<ChatCompletionMessage> messages;\n\n  private ChatCompletionRequest(Builder builder) {\n    super(builder);\n    this.model = builder.model;\n    this.messages = builder.messages;\n  }\n", "  public void addMessage(ChatCompletionMessage message) {\n    messages.add(message);\n  }\n\n  public List<ChatCompletionMessage> getMessages() {\n    return messages;\n  }\n\n  public String getModel() {\n    return model;\n  }\n", "  public String getModel() {\n    return model;\n  }\n\n  public static class Builder extends CompletionRequest.Builder {\n\n    private final List<ChatCompletionMessage> messages;\n    private String model = ChatCompletionModel.GPT_3_5.getCode();\n\n    public Builder(List<ChatCompletionMessage> messages) {\n      this.messages = messages;\n    }\n", "    public Builder setModel(ChatCompletionModel model) {\n      this.model = model.getCode();\n      return this;\n    }\n\n    public Builder setModel(String model) {\n      this.model = model;\n      return this;\n    }\n\n    @Override", "    public ChatCompletionRequest build() {\n      return new ChatCompletionRequest(this);\n    }\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/chat/request/ChatCompletionMessage.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.chat.request;\n\npublic class ChatCompletionMessage {\n\n  private final String role;\n  private String content;\n\n  public ChatCompletionMessage(String role, String content) {\n    this.role = role;\n    this.content = content;\n  }\n", "  public String getRole() {\n    return role;\n  }\n\n  public String getContent() {\n    return content;\n  }\n\n  public void setContent(String content) {\n    this.content = content;\n  }\n}\n", "  public void setContent(String content) {\n    this.content = content;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/TextCompletionClient.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text;\n\nimport ee.carlrobert.openai.client.ClientCode;\nimport ee.carlrobert.openai.client.OpenAIClient;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.OpenAICompletionClient;\nimport java.util.function.Consumer;\n\npublic class TextCompletionClient extends OpenAICompletionClient {\n\n  public TextCompletionClient(OpenAIClient client) {\n    super(client, \"/v1/completions\");\n  }\n\n  @Override\n  protected TextCompletionEventSourceListener getEventListener(\n      CompletionEventListener listeners,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry) {\n    return new TextCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  @Override", "public class TextCompletionClient extends OpenAICompletionClient {\n\n  public TextCompletionClient(OpenAIClient client) {\n    super(client, \"/v1/completions\");\n  }\n\n  @Override\n  protected TextCompletionEventSourceListener getEventListener(\n      CompletionEventListener listeners,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry) {\n    return new TextCompletionEventSourceListener(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  @Override", "  public ClientCode getClientCode() {\n    return ClientCode.TEXT_COMPLETION;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/TextCompletionEventSourceListener.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport ee.carlrobert.openai.client.completion.ApiResponseError;\nimport ee.carlrobert.openai.client.completion.CompletionEventListener;\nimport ee.carlrobert.openai.client.completion.CompletionEventSourceListener;\nimport ee.carlrobert.openai.client.completion.ErrorDetails;\nimport ee.carlrobert.openai.client.completion.text.response.TextCompletionResponse;\nimport java.util.function.Consumer;", "import ee.carlrobert.openai.client.completion.text.response.TextCompletionResponse;\nimport java.util.function.Consumer;\n\npublic class TextCompletionEventSourceListener extends CompletionEventSourceListener {\n\n  public TextCompletionEventSourceListener(CompletionEventListener listeners, boolean retryOnReadTimeout, Consumer<String> onRetry) {\n    super(listeners, retryOnReadTimeout, onRetry);\n  }\n\n  protected String getMessage(String data) throws JsonProcessingException {\n    return new ObjectMapper()\n        .readValue(data, TextCompletionResponse.class)\n        .getChoices()\n        .get(0)\n        .getText();\n  }\n\n  @Override\n  protected ErrorDetails getErrorDetails(String data) throws JsonProcessingException {\n    return new ObjectMapper().readValue(data, ApiResponseError.class).getError();\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/TextCompletionModel.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text;\n\nimport ee.carlrobert.openai.client.completion.CompletionModel;\nimport java.util.Arrays;\n\npublic enum TextCompletionModel implements CompletionModel {\n  ADA(\"text-ada-001\", \"Ada - Fastest\", 2049),\n  BABBAGE(\"text-babbage-001\", \"Babbage - Powerful\", 2049),\n  CURIE(\"text-curie-001\", \"Curie - Fast and efficient\", 2049),\n  DAVINCI(\"text-davinci-003\", \"Davinci - Most powerful (Default)\", 4097);\n\n  private final String code;\n  private final String description;\n  private final int maxTokens;\n\n  TextCompletionModel(String code, String description, int maxTokens) {\n    this.code = code;\n    this.description = description;\n    this.maxTokens = maxTokens;\n  }\n", "  public String getCode() {\n    return code;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public int getMaxTokens() {\n    return maxTokens;\n  }\n", "  public int getMaxTokens() {\n    return maxTokens;\n  }\n\n  static public TextCompletionModel findByCode(String code) {\n    return Arrays.stream(TextCompletionModel.values())\n        .filter(item -> item.getCode().equals(code))\n        .findFirst().orElseThrow();\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/response/TextCompletionResponseChoice.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text.response;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class TextCompletionResponseChoice {\n\n  private final String text;\n  private final String finishReason;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public TextCompletionResponseChoice(\n      @JsonProperty(\"text\") String text,\n      @JsonProperty(\"finish_reason\") String finishReason) {\n    this.text = text;\n    this.finishReason = finishReason;\n  }\n", "  public String getText() {\n    return text;\n  }\n\n  public String getFinishReason() {\n    return finishReason;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/response/TextCompletionResponse.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text.response;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class TextCompletionResponse {\n\n  private final String id;\n  private final List<TextCompletionResponseChoice> choices;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public TextCompletionResponse(\n      @JsonProperty(\"id\") String id,\n      @JsonProperty(\"choices\") List<TextCompletionResponseChoice> choices) {\n    this.id = id;\n    this.choices = choices;\n  }\n", "public class TextCompletionResponse {\n\n  private final String id;\n  private final List<TextCompletionResponseChoice> choices;\n\n  @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n  public TextCompletionResponse(\n      @JsonProperty(\"id\") String id,\n      @JsonProperty(\"choices\") List<TextCompletionResponseChoice> choices) {\n    this.id = id;\n    this.choices = choices;\n  }\n", "  public String getId() {\n    return id;\n  }\n\n  public List<TextCompletionResponseChoice> getChoices() {\n    return choices;\n  }\n}\n"]}
{"filename": "src/main/java/ee/carlrobert/openai/client/completion/text/request/TextCompletionRequest.java", "chunked_list": ["package ee.carlrobert.openai.client.completion.text.request;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport ee.carlrobert.openai.client.completion.CompletionRequest;\nimport ee.carlrobert.openai.client.completion.text.TextCompletionModel;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class TextCompletionRequest extends CompletionRequest {\n\n  private final String prompt;\n  private final String model;\n  private final List<String> stop;\n  @JsonProperty(\"best_of\")\n  private final int bestOf;\n\n  private TextCompletionRequest(Builder builder) {\n    super(builder);\n    this.model = builder.model;\n    this.prompt = builder.prompt;\n    this.stop = builder.stop;\n    this.bestOf = builder.bestOf;\n  }\n", "public class TextCompletionRequest extends CompletionRequest {\n\n  private final String prompt;\n  private final String model;\n  private final List<String> stop;\n  @JsonProperty(\"best_of\")\n  private final int bestOf;\n\n  private TextCompletionRequest(Builder builder) {\n    super(builder);\n    this.model = builder.model;\n    this.prompt = builder.prompt;\n    this.stop = builder.stop;\n    this.bestOf = builder.bestOf;\n  }\n", "  public String getPrompt() {\n    return prompt;\n  }\n\n  public String getModel() {\n    return model;\n  }\n\n  public List<String> getStop() {\n    return stop;\n  }\n", "  public int getBestOf() {\n    return bestOf;\n  }\n\n  public static class Builder extends CompletionRequest.Builder {\n\n    private final String prompt;\n    private String model = TextCompletionModel.DAVINCI.getCode();\n    private List<String> stop;\n    private int bestOf = 1;\n\n    public Builder(String prompt) {\n      this.prompt = prompt;\n    }\n", "    public Builder setModel(TextCompletionModel model) {\n      this.model = model.getCode();\n      return this;\n    }\n\n    public Builder setModel(String model) {\n      this.model = model;\n      return this;\n    }\n\n    public Builder setStop(List<String> stop) {\n      this.stop = Collections.unmodifiableList(stop);\n      return this;\n    }\n", "    public Builder setStop(List<String> stop) {\n      this.stop = Collections.unmodifiableList(stop);\n      return this;\n    }\n\n    public Builder setBestOf(int bestOf) {\n      this.bestOf = bestOf;\n      return this;\n    }\n\n    @Override", "    public TextCompletionRequest build() {\n      return new TextCompletionRequest(this);\n    }\n  }\n}\n"]}
