{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/Chat.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI;\n\nimport io.github.heartalborada_del.newBingAPI.exceptions.ConversationException;\nimport io.github.heartalborada_del.newBingAPI.instances.ChatInstance;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Logger;\nimport io.github.heartalborada_del.newBingAPI.utils.DefaultClient;\nimport okhttp3.OkHttpClient;\n\nimport java.io.IOException;\nimport java.net.Proxy;", "import java.io.IOException;\nimport java.net.Proxy;\n\npublic class Chat {\n    private final OkHttpClient.Builder c;\n    private final Logger logger;\n    private final String locale;\n    private final String tone;\n    /**\n     * Initialize the instance.\n     *\n     * @param defaultCookie Your bing cookie\n     * @param tone Set NewBing Mode <code>Creative</code> <code>Balanced</code> <code>Precise</code>\n     * @author heartalborada-del\n     */\n    public Chat(String defaultCookie, String tone) {\n        this.tone = tone;\n        c = new DefaultClient(defaultCookie).getClient().newBuilder();\n        this.locale = \"zh-CN\";\n        this.logger = new Logger() {\n            @Override", "            public void Info(String log) {\n            }\n\n            @Override\n            public void Error(String log) {\n            }\n\n            @Override\n            public void Warn(String log) {\n            }\n\n            @Override", "            public void Warn(String log) {\n            }\n\n            @Override\n            public void Debug(String log) {\n            }\n        };\n    }\n\n    /**\n     * Initialize the instance.\n     *\n     * @param defaultCookie Your bing cookie\n     * @param logger        Your Logger implementation\n     * @param tone Set NewBing Mode <code>Creative</code> <code>Balanced</code> <code>Precise</code>\n     * @author heartalborada-del\n     * @see Logger\n     */\n    public Chat(String defaultCookie, Logger logger, String tone) {\n        c = new DefaultClient(defaultCookie).getClient().newBuilder();\n        this.tone = tone;\n        this.locale = \"zh-CN\";\n        this.logger = logger;\n    }\n\n    /**\n     * Initialize the instance.\n     *\n     * @param defaultCookie Your bing cookie\n     * @param locale        The locale of the conversation.<p>Please set the language code following the format of <code>(ISO-639 Language Code)-(ISO-3166 Country Codes)</code>.</p>\n     * @param tone Set NewBing Mode <code>Creative</code> <code>Balanced</code> <code>Precise</code>\n     * @author heartalborada-del\n     */\n    public Chat(String defaultCookie, String locale, String tone) {\n        c = new DefaultClient(defaultCookie).getClient().newBuilder();\n        this.locale = locale;\n        this.tone = tone;\n        this.logger = new Logger() {\n            @Override", "            public void Info(String log) {\n            }\n\n            @Override\n            public void Error(String log) {\n            }\n\n            @Override\n            public void Warn(String log) {\n            }\n\n            @Override", "            public void Warn(String log) {\n            }\n\n            @Override\n            public void Debug(String log) {\n            }\n        };\n    }\n\n    /**\n     * Initialize the instance.\n     *\n     * @param defaultCookie Your bing cookie\n     * @param logger        Your Logger implementation\n     * @param locale        The locale of the conversation.<p>Please set the language code following the format of <code>(ISO-639 Language Code)-(ISO-3166 Country Codes)</code>.</p>\n     * @param tone Set NewBing Mode <code>Creative</code> <code>Balanced</code> <code>Precise</code>\n     * @author heartalborada-del\n     * @see Logger\n     */\n    public Chat(String defaultCookie, Logger logger, String locale, String tone) {\n        c = new DefaultClient(defaultCookie).getClient().newBuilder();\n        this.locale = locale;\n        this.logger = logger;\n        this.tone = tone;\n    }\n", "    public Chat setProxy(Proxy proxy) {\n        c.proxy(proxy);\n        return this;\n    }\n\n    /**\n     * Get a new instance of ChatInstance.\n     *\n     * @return ChatInstance\n     * @throws IOException           Network error.\n     * @throws ConversationException Unable to create a new conversation.\n     * @author heartalborada-del\n     * @see ChatInstance\n     */", "    public ChatInstance newChat() throws IOException, ConversationException {\n        return new ChatInstance(c, logger, locale, tone);\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/instances/ChatInstance.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.instances;\n\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport io.github.heartalborada_del.newBingAPI.exceptions.ConversationException;\nimport io.github.heartalborada_del.newBingAPI.exceptions.ConversationExpiredException;\nimport io.github.heartalborada_del.newBingAPI.exceptions.ConversationLimitedException;\nimport io.github.heartalborada_del.newBingAPI.exceptions.ConversationUninitializedException;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Callback;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Logger;", "import io.github.heartalborada_del.newBingAPI.interfaces.Callback;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Logger;\nimport io.github.heartalborada_del.newBingAPI.utils.ConversationWebsocket;\nimport okhttp3.Dispatcher;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\n\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Objects;", "import java.util.Date;\nimport java.util.Objects;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ChatInstance {\n    public static ExecutorService threadPool = Executors.newFixedThreadPool(1);\n    private final OkHttpClient client;\n    private final String conversationId;\n    private final String clientId;\n    private final String conversationSignature;\n    private final Logger logger;\n    private final String locale;\n    private short chatCount;\n    private int maxNumConversation = 15;\n    private final long time;\n    private final String tone;\n\n    /**\n     * Constructor for a new ChatInstance.\n     *\n     * @param httpClientBuilder The OkHttpClient.Builder instance used for making API requests.\n     * @param logger            The logger instance used for logging.\n     * @param locale            The locale of the conversation.\n     * @param tone Set NewBing Mode <code>Creative</code> <code>Balanced</code> <code>Precise</code>\n     * @throws IOException           If there is an error making the API request.\n     * @throws ConversationException If there is an error creating the conversation instance.\n     */\n    public ChatInstance(OkHttpClient.Builder httpClientBuilder, Logger logger, String locale, String tone) throws IOException, ConversationException {\n        client = httpClientBuilder.dispatcher(new Dispatcher(threadPool)).build();\n        this.logger = logger;\n        this.locale = locale;\n        this.tone = tone;\n        logger.Debug(\"Creating Conversation ID\");\n        Request req = new Request.Builder().url(\"https://www.bing.com/turing/conversation/create\").get().build();\n        String s = Objects.requireNonNull(client.newCall(req).execute().body()).string();\n        JsonObject json = JsonParser.parseString(Objects.requireNonNull(s)).getAsJsonObject();", "        if (!json.getAsJsonObject(\"result\").getAsJsonPrimitive(\"value\").getAsString().equals(\"Success\"))\n            throw new ConversationException(json.getAsJsonObject(\"result\").getAsJsonPrimitive(\"message\").getAsString());\n        time = new Date().getTime();\n        chatCount = 0;\n        conversationId = json.getAsJsonPrimitive(\"conversationId\").getAsString();\n        logger.Debug(String.format(\"New Conversation ID [%s]\", conversationId));\n        clientId = json.getAsJsonPrimitive(\"clientId\").getAsString();\n        conversationSignature = json.getAsJsonPrimitive(\"conversationSignature\").getAsString();\n    }\n\n    /**\n     * Sends a new question to the conversation instance.\n     *\n     * @param question The question to send to the conversation instance.\n     * @param callback The callback function to call when the API responds.\n     * @return This ChatInstance.\n     * @throws ConversationUninitializedException If the conversation instance has not been initialized.\n     * @throws ConversationLimitedException       If the conversation instance has reached its message limit.\n     * @throws ConversationExpiredException       If the conversation instance has expired.\n     */", "    synchronized public ChatInstance newQuestion(String question, Callback callback) throws ConversationUninitializedException, ConversationLimitedException, ConversationExpiredException {\n        if (chatCount < 0) {\n            logger.Error(\"Conversation is uninitialized\");\n            throw new ConversationUninitializedException();\n        } else if (chatCount > maxNumConversation) {\n            logger.Error(\"Conversation is limited\");\n            throw new ConversationLimitedException();\n        } else if (new Date().getTime() - time > 360 * 1000) {\n            logger.Error(\"Conversation has expired\");\n            throw new ConversationExpiredException();\n        }\n        Callback cb = new Callback() {\n            @Override", "            public void onSuccess(JsonObject rawData) {\n                if (rawData.has(\"item\") && rawData.getAsJsonObject(\"item\").has(\"throttling\") && rawData.getAsJsonObject(\"item\").getAsJsonObject(\"throttling\").has(\"maxNumUserMessagesInConversation\")) {\n                    maxNumConversation = rawData.getAsJsonObject(\"item\")\n                            .getAsJsonObject(\"throttling\")\n                            .getAsJsonPrimitive(\"maxNumUserMessagesInConversation\").getAsInt();\n                }\n                callback.onSuccess(rawData);\n            }\n\n            @Override\n            public void onFailure(JsonObject rawData, String cause) {\n                callback.onFailure(rawData, cause);\n            }\n\n            @Override", "            public void onFailure(JsonObject rawData, String cause) {\n                callback.onFailure(rawData, cause);\n            }\n\n            @Override\n            public void onUpdate(JsonObject rawData) {\n                callback.onUpdate(rawData);\n            }\n        };\n\n        Request request = new Request.Builder().get().url(\"wss://sydney.bing.com/sydney/ChatHub\").build();\n        logger.Debug(String.format(\"Add a question [%s] to the queue,the current length of the queue is %d\", question, client.dispatcher().runningCallsCount()));\n        client.newWebSocket(\n                request,\n                new ConversationWebsocket(\n                        conversationId,\n                        clientId,\n                        conversationSignature,\n                        question,\n                        chatCount,\n                        cb,\n                        logger,\n                        locale,\n                        tone)\n        );\n        chatCount++;\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/utils/ConversationWebsocket.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.utils;\n\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Callback;\nimport io.github.heartalborada_del.newBingAPI.interfaces.Logger;\nimport io.github.heartalborada_del.newBingAPI.types.ChatWebsocketJson;\nimport io.github.heartalborada_del.newBingAPI.types.chat.Argument;\nimport io.github.heartalborada_del.newBingAPI.types.chat.Message;", "import io.github.heartalborada_del.newBingAPI.types.chat.Argument;\nimport io.github.heartalborada_del.newBingAPI.types.chat.Message;\nimport io.github.heartalborada_del.newBingAPI.types.chat.Participant;\nimport okhttp3.Response;\nimport okhttp3.WebSocket;\nimport okhttp3.WebSocketListener;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class ConversationWebsocket extends WebSocketListener {\n    private final char TerminalChar = '\\u001e';\n    private final String conversationId;\n    private final String clientId;\n    private final String conversationSignature;\n    private final String question;\n    private final String invocationID;\n    private final Callback callback;\n    private final Logger logger;\n    private final String locale;\n    private final String tone;\n\n    public ConversationWebsocket(String ConversationId, String ClientId, String ConversationSignature, String question, short invocationID, Callback callback, Logger logger, String locale, String tone) {\n        conversationId = ConversationId;\n        clientId = ClientId;\n        conversationSignature = ConversationSignature;\n        this.question = question;\n        this.invocationID = String.valueOf(invocationID);\n        this.callback = callback;\n        this.logger = logger;\n        this.locale = locale;\n        this.tone = tone;\n    }\n\n    @Override", "\npublic class ConversationWebsocket extends WebSocketListener {\n    private final char TerminalChar = '\\u001e';\n    private final String conversationId;\n    private final String clientId;\n    private final String conversationSignature;\n    private final String question;\n    private final String invocationID;\n    private final Callback callback;\n    private final Logger logger;\n    private final String locale;\n    private final String tone;\n\n    public ConversationWebsocket(String ConversationId, String ClientId, String ConversationSignature, String question, short invocationID, Callback callback, Logger logger, String locale, String tone) {\n        conversationId = ConversationId;\n        clientId = ClientId;\n        conversationSignature = ConversationSignature;\n        this.question = question;\n        this.invocationID = String.valueOf(invocationID);\n        this.callback = callback;\n        this.logger = logger;\n        this.locale = locale;\n        this.tone = tone;\n    }\n\n    @Override", "    public void onClosed(@NotNull WebSocket webSocket, int code, @NotNull String reason) {\n        logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));\n        super.onClosed(webSocket, code, reason);\n    }\n\n    @Override\n    public void onClosing(@NotNull WebSocket webSocket, int code, @NotNull String reason) {\n        logger.Info(String.format(\"[%s] [%s] websocket is closing\", conversationSignature, question));\n        super.onClosing(webSocket, code, reason);\n    }\n\n    @Override", "    public void onFailure(@NotNull WebSocket webSocket, @NotNull Throwable t, @Nullable Response response) {\n        //logger.Error(String.format(\"[%s] [%s] websocket is failed, reason: [%s]\",conversationSignature,question, t.getCause()));\n        webSocket.close(1000, String.valueOf(TerminalChar));\n        super.onFailure(webSocket, t, response);\n    }\n\n    @Override\n    public void onMessage(@NotNull WebSocket webSocket, @NotNull String text) {\n        for (String textSpited : text.split(String.valueOf(TerminalChar))) {\n            logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));\n            JsonObject json = JsonParser.parseString(textSpited).getAsJsonObject();", "        for (String textSpited : text.split(String.valueOf(TerminalChar))) {\n            logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));\n            JsonObject json = JsonParser.parseString(textSpited).getAsJsonObject();\n            if (json.isEmpty()) {\n                sendData(webSocket, \"{\\\"type\\\":6}\");\n                String s = new GsonBuilder().disableHtmlEscaping().create().toJson(\n                        new ChatWebsocketJson(new Argument[]{\n                                new Argument(\n                                        Utils.randomString(32).toLowerCase(),\n                                        invocationID.equals(\"0\"),\n                                        new Message(\n                                                locale,\n                                                locale,\n                                                null,\n                                                null,\n                                                null,\n                                                Utils.getNowTime(),\n                                                question\n                                        ),\n                                        conversationSignature,\n                                        new Participant(clientId),\n                                        conversationId,\n                                        null,\n                                        tone)\n                        }, invocationID)\n                );\n                sendData(webSocket, s);", "            } else if (json.has(\"type\")) {\n                int type = json.getAsJsonPrimitive(\"type\").getAsInt();\n                if (type == 3) {\n                    //end\n                    webSocket.close(1000, String.valueOf(TerminalChar));\n                } else if (type == 6) {\n                    //resend packet\n                    sendData(webSocket, \"{\\\"type\\\":6}\");\n                } else if (type == 2) {\n                    if (json.getAsJsonObject(\"item\").has(\"result\") && !json.getAsJsonObject(\"item\").getAsJsonObject(\"result\").getAsJsonPrimitive(\"value\").getAsString().equals(\"Success\")) {\n                        callback.onFailure(json, json.getAsJsonObject(\"item\").getAsJsonObject(\"result\").getAsJsonPrimitive(\"message\").getAsString());\n                    } else {\n                        callback.onSuccess(json);\n                    }", "                } else if (type == 2) {\n                    if (json.getAsJsonObject(\"item\").has(\"result\") && !json.getAsJsonObject(\"item\").getAsJsonObject(\"result\").getAsJsonPrimitive(\"value\").getAsString().equals(\"Success\")) {\n                        callback.onFailure(json, json.getAsJsonObject(\"item\").getAsJsonObject(\"result\").getAsJsonPrimitive(\"message\").getAsString());\n                    } else {\n                        callback.onSuccess(json);\n                    }\n                } else if (type == 1) {\n                    callback.onUpdate(json);\n                } else if (type == 7) {\n                    callback.onFailure(json, json.getAsJsonPrimitive(\"error\").getAsString());\n                    webSocket.close(1000, String.valueOf(TerminalChar));\n                }", "                } else if (type == 7) {\n                    callback.onFailure(json, json.getAsJsonPrimitive(\"error\").getAsString());\n                    webSocket.close(1000, String.valueOf(TerminalChar));\n                }\n            } else if (json.has(\"error\")) {\n                callback.onFailure(json, json.getAsJsonPrimitive(\"error\").getAsString());\n                webSocket.close(1000, String.valueOf(TerminalChar));\n            }\n        }\n        super.onMessage(webSocket, text);\n    }\n\n    @Override", "    public void onOpen(@NotNull WebSocket webSocket, @NotNull Response response) {\n        super.onOpen(webSocket, response);\n        sendData(webSocket, \"{\\\"protocol\\\":\\\"json\\\",\\\"version\\\":1}\");\n    }\n\n    private void sendData(@NotNull WebSocket ws, @NotNull String data) {\n        logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));\n        ws.send(data + TerminalChar);\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/utils/Utils.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.utils;\n\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.util.Random;\n\nimport static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;\nimport static java.time.temporal.ChronoField.*;\n\npublic class Utils {\n    private static final DateTimeFormatter OFFSET_DATE_FORMATTER = new DateTimeFormatterBuilder()\n            .parseCaseInsensitive()\n            .append(ISO_LOCAL_DATE)\n            .appendLiteral('T')\n            .appendValue(HOUR_OF_DAY, 2)\n            .appendLiteral(':')\n            .appendValue(MINUTE_OF_HOUR, 2)\n            .optionalStart()\n            .appendLiteral(':')\n            .appendValue(SECOND_OF_MINUTE, 2)\n            .optionalStart()\n            .appendOffsetId()\n            .toFormatter();\n\n    /**\n     * Returns the current date and time as a string formatted with an offset.\n     *\n     * @return the current date and time as a string formatted with an offset.\n     */", "import static java.time.temporal.ChronoField.*;\n\npublic class Utils {\n    private static final DateTimeFormatter OFFSET_DATE_FORMATTER = new DateTimeFormatterBuilder()\n            .parseCaseInsensitive()\n            .append(ISO_LOCAL_DATE)\n            .appendLiteral('T')\n            .appendValue(HOUR_OF_DAY, 2)\n            .appendLiteral(':')\n            .appendValue(MINUTE_OF_HOUR, 2)\n            .optionalStart()\n            .appendLiteral(':')\n            .appendValue(SECOND_OF_MINUTE, 2)\n            .optionalStart()\n            .appendOffsetId()\n            .toFormatter();\n\n    /**\n     * Returns the current date and time as a string formatted with an offset.\n     *\n     * @return the current date and time as a string formatted with an offset.\n     */", "    public static String getNowTime() {\n        ZonedDateTime date = ZonedDateTime.now();\n        return date.format(OFFSET_DATE_FORMATTER);\n    }\n\n    /**\n     * Generates a random string of the specified length.\n     *\n     * @param length the length of the random string.\n     * @return a random string of the specified length.\n     */", "    public static String randomString(int length) {\n        String str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        Random random = new Random();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            int number = random.nextInt(str.length() - 1);\n            sb.append(str.charAt(number));\n        }\n        return sb.toString();\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/utils/DefaultClient.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.utils;\n\nimport okhttp3.Interceptor;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.util.Random;", "import java.io.IOException;\nimport java.util.Random;\nimport java.util.UUID;\n\npublic class DefaultClient {\n    private final OkHttpClient.Builder builder;\n    private final String cookie;\n    /**\n     * Creates a new instance of the DefaultClient class.\n     *\n     * @param Cookie   a string value representing the cookie to be set in the request header.\n     */\n    public DefaultClient(String Cookie) {\n        cookie = Cookie;\n        builder = new OkHttpClient.Builder().addInterceptor(new headerInterceptor());\n    }\n\n    /**\n     * Returns the OkHttpClient instance associated with this DefaultClient.\n     *\n     * @return the OkHttpClient instance associated with this DefaultClient.\n     */", "    public OkHttpClient getClient() {\n        return builder.build();\n    }\n\n    private class headerInterceptor implements Interceptor {\n        /**\n         * Intercepts the outgoing request and sets the required headers.\n         *\n         * @param chain the interceptor chain.\n         * @return the response received after processing the request.\n         * @throws IOException if an error occurs while processing the request.\n         */\n        @NotNull\n        @Override", "        public Response intercept(@NotNull Chain chain) throws IOException {\n            Request.Builder b = chain.request().newBuilder();\n            b.addHeader(\"Cookie\", cookie);\n            b.addHeader(\"Origin\", \"https://www.bing.com\");\n            b.addHeader(\"user-agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 Edg/111.0.1661.24\");\n            b.addHeader(\"x-ms-client-request-id\", UUID.randomUUID().toString());\n            b.addHeader(\"x-ms-useragent\", \"azsdk-js-api-client-factory/1.0.0-beta.1 core-rest-pipeline/1.10.0 OS/Win32\");\n            return chain.proceed(b.build());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/exceptions/ConversationLimitedException.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.exceptions;\n\npublic class ConversationLimitedException extends ConversationException {\n    public ConversationLimitedException() {\n        super(\"Conversation is limited\");\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/exceptions/ConversationExpiredException.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.exceptions;\n\npublic class ConversationExpiredException extends ConversationException {\n    public ConversationExpiredException() {\n        super(\"Conversation has expired\");\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/exceptions/ConversationUninitializedException.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.exceptions;\n\npublic class ConversationUninitializedException extends ConversationException {\n    public ConversationUninitializedException() {\n        super(\"Conversation is uninitialized\");\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/exceptions/ConversationException.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.exceptions;\n\npublic class ConversationException extends Exception {\n    //private static final long serialVersionUID = -7041169491254546905L;\n    public ConversationException(String message) {\n        super(message);\n    }\n\n    public ConversationException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/interfaces/Logger.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.interfaces;\n\npublic interface Logger {\n\n    /**\n     * Logs an information message.\n     *\n     * @param log the message to log\n     */\n    void Info(String log);\n\n    /**\n     * Logs an error message.\n     *\n     * @param log the message to log\n     */\n    void Error(String log);\n\n    /**\n     * Logs a warning message.\n     *\n     * @param log the message to log\n     */\n    void Warn(String log);\n\n    /**\n     * Logs a debug message.\n     *\n     * @param log the message to log\n     */\n    void Debug(String log);\n\n}\n\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/interfaces/Callback.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.interfaces;\n\nimport com.google.gson.JsonObject;\n\npublic interface Callback {\n\n    /**\n     * Called when the asynchronous operation completes successfully.\n     *\n     * @param rawData the JSON data returned by the operation\n     */\n    void onSuccess(JsonObject rawData);\n\n    /**\n     * Called when the asynchronous operation fails.\n     *\n     * @param rawData the JSON data returned by the operation\n     * @param cause   the cause of the failure\n     */\n    void onFailure(JsonObject rawData, String cause);\n\n    /**\n     * Called periodically to update the progress of the asynchronous operation.\n     *\n     * @param rawData the JSON data returned by the operation\n     */\n    void onUpdate(JsonObject rawData);\n\n}\n\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/ChatWebsocketJson.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types;\n\nimport io.github.heartalborada_del.newBingAPI.types.chat.Argument;\n\npublic class ChatWebsocketJson {\n    private final Argument[] arguments;\n    private final String invocationId;\n    private final String target = \"chat\";\n    private final int type = 4;\n    public ChatWebsocketJson(Argument[] args, String invocationId) {\n        arguments = args;\n        this.invocationId = invocationId;\n    }\n\n    public Argument[] getArguments() {\n        return arguments;\n    }\n", "    public String getInvocationId() {\n        return invocationId;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/SuggestedResponses.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class SuggestedResponses {\n    private final String text;\n    private final String contentOrigin;\n    private final String messageType;\n    private final String messageId;\n    private final String offense;\n\n    public SuggestedResponses(String text, String contentOrigin, String messageType, String messageId, String offense) {\n        this.text = text;\n        this.contentOrigin = contentOrigin;\n        this.messageType = messageType;\n        this.messageId = messageId;\n        this.offense = offense;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/Location.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class Location {\n    private final double Latitude;\n    private final double Longitude;\n\n    public Location(double latitude, double longitude) {\n        Latitude = latitude;\n        Longitude = longitude;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/Argument.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class Argument {\n    private final String source = \"cib\";\n    private final String[] optionsSets = {\n            \"nlu_direct_response_filter\",\n            \"deepleo\",\n            \"disable_emoji_spoken_text\",\n            \"responsible_ai_policy_235\",\n            \"enablemm\",\n            \"galileo\",\n            \"wlthrottle\",\n            \"blocklistv2\",\n            \"disbing\",\n            \"dv3sugg\"\n    };\n    private final String[] allowedMessageTypes = {\n            \"Chat\",\n            \"InternalSearchQuery\",\n            \"InternalSearchResult\",\n            \"Disengaged\",\n            \"InternalLoaderMessage\",\n            \"RenderCardRequest\",\n            \"AdsQuery\",\n            \"SemanticSerp\",\n            \"GenerateContentQuery\",\n            \"SearchQuery\"\n    };\n    private final String[] sliceIds = {\n            \"revdv3cf\",\n            \"perfinstcf\",\n            \"0310wlthrot\",\n            \"302blocklist\",\n            \"308disbing\",\n            \"314glprompts0\"\n    };\n    private final String traceId;\n    private final boolean isStartOfSession;\n    private final Message message;\n    private final String conversationSignature;\n    private final Participant participant;\n    private final String conversationId;\n    private final PreviousMessages[] previousMessages;\n    private final String tone;\n\n    public Argument(String traceId, boolean isStartOfSession, Message message, String conversationSignature, Participant participant, String conversationId, PreviousMessages[] previousMessages, String tone) {\n        this.traceId = traceId;\n        this.isStartOfSession = isStartOfSession;\n        this.message = message;\n        this.conversationSignature = conversationSignature;\n        this.participant = participant;\n        this.conversationId = conversationId;\n        this.previousMessages = previousMessages;\n        this.tone = tone;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/PreviousMessages.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class PreviousMessages {\n    private final String text;\n    private final String author = \"bot\";\n    private final String[] adaptiveCards = {};\n    private final SuggestedResponses[] suggestedResponses;\n    private final String messageId;\n    private final String messageType;\n\n    public PreviousMessages(String text, String author, String[] adaptiveCards, SuggestedResponses[] suggestedResponses, String messageId, String messageType) {\n        this.text = text;\n        this.suggestedResponses = suggestedResponses;\n        this.messageId = messageId;\n        this.messageType = messageType;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/Message.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class Message {\n    private final String locale;\n    private final String market;\n    private final String region;\n    private final String location;\n    private final LocationHints locationHints;\n    private final String timestamp;\n    private final String author = \"user\";\n    private final String inputMethod = \"Keyboard\";\n    private final String text;\n    private final String messageType = \"Chat\";\n\n    public Message(String locale, String market, String region, String location, LocationHints locationHints, String timestamp, String text) {\n        this.locale = locale;\n        this.market = market;\n        this.region = region;\n        this.location = location;\n        this.locationHints = locationHints;\n        this.timestamp = timestamp;\n        this.text = text;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/Participant.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class Participant {\n    private final String id;\n\n    public Participant(String id) {\n        this.id = id;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/heartalborada_del/newBingAPI/types/chat/LocationHints.java", "chunked_list": ["package io.github.heartalborada_del.newBingAPI.types.chat;\n\npublic class LocationHints {\n    private final String country;\n    private final String state;\n    private final String city;\n    private final String zipcode;\n    private final int timezoneoffset;\n    private final int countryConfidence;\n    private final int cityConfidence;\n    private final Location Center;\n    private final int RegionType = 2;\n    private final int SourceType = 1;\n\n    public LocationHints(String country, String state, String city, String zipcode, int timezoneoffset, int countryConfidence, int cityConfidence, Location center) {\n        this.country = country;\n        this.state = state;\n        this.city = city;\n        this.zipcode = zipcode;\n        this.timezoneoffset = timezoneoffset;\n        this.countryConfidence = countryConfidence;\n        this.cityConfidence = cityConfidence;\n        Center = center;\n    }\n}\n"]}
