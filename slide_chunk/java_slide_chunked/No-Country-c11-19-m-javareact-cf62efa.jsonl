{"filename": "backend/src/test/java/com/upCycle/UpCycleApplicationTests.java", "chunked_list": ["package com.upCycle;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass UpCycleApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/UpCycleApplication.java", "chunked_list": ["package com.upCycle;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class UpCycleApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(UpCycleApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(UpCycleApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/entity/Producto.java", "chunked_list": ["package com.upCycle.entity;\n\nimport com.upCycle.enums.TipoMaterial;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;", "\nimport java.io.Serializable;\nimport java.util.Arrays;\n\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity", "@NoArgsConstructor\n@Entity\n@Table(name = \"product\")\npublic class Producto implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"description\")\n    private String descripcion;\n\n    @Column(name = \"type_material\")\n    @Enumerated(EnumType.STRING)\n    private TipoMaterial material;\n\n    @Column(name = \"kilograms\")\n    private Double peso;\n\n    @OneToOne\n    @JoinColumn(name = \"location_id\", referencedColumnName = \"ubicacionId\")\n    private Ubicacion ubicacion;\n\n    @Column(name = \"image\")\n    private String imagen;\n\n    @ManyToOne\n    @JoinColumn(name = \"id_ecoproveedor\", nullable = false, updatable = false)\n    private Ecoproveedor ecoproveedor;\n", "    public TipoMaterial materialMapper(String material) {\n        return Arrays.stream(TipoMaterial.values())\n                .filter(value -> value.name().equalsIgnoreCase(material))\n                .findFirst()\n                .orElse(null);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/entity/Ecocreador.java", "chunked_list": ["package com.upCycle.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.DiscriminatorValue;\nimport jakarta.persistence.Entity;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n", "import lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@DiscriminatorValue(\"ECOCREADOR\")\n@Entity\npublic class Ecocreador extends Usuario{\n\n    @Column(name = \"occupation\")\n    private String ocupacion;\n\n    @Column(name = \"photo_profile\")\n    private String foto;\n}\n", "public class Ecocreador extends Usuario{\n\n    @Column(name = \"occupation\")\n    private String ocupacion;\n\n    @Column(name = \"photo_profile\")\n    private String foto;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/entity/Ubicacion.java", "chunked_list": ["package com.upCycle.entity;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n", "import java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"location\")\npublic class Ubicacion implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    //@Column(name = \"location_id\")\n    private Long ubicacionId;\n\n    @Column(name = \"name\")\n    private String nombre;\n}\n", "public class Ubicacion implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    //@Column(name = \"location_id\")\n    private Long ubicacionId;\n\n    @Column(name = \"name\")\n    private String nombre;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/entity/Ecoproveedor.java", "chunked_list": ["package com.upCycle.entity;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\n", "import java.util.List;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@DiscriminatorValue(\"ECOPROVEEDOR\")\n@Entity\npublic class Ecoproveedor extends Usuario{\n\n    @Column(name = \"company_neme\")\n    private String razonSocial;\n\n    private String cuit;\n\n    @Column(name = \"logo_image\")\n    private String logo;\n\n    @Column(name = \"points\")\n    private int puntos;\n\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"ecoproveedor\")\n    private List<Producto> listaProductos;\n", "public class Ecoproveedor extends Usuario{\n\n    @Column(name = \"company_neme\")\n    private String razonSocial;\n\n    private String cuit;\n\n    @Column(name = \"logo_image\")\n    private String logo;\n\n    @Column(name = \"points\")\n    private int puntos;\n\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"ecoproveedor\")\n    private List<Producto> listaProductos;\n", "    public int calcularPuntosTotales() {\n        int puntosTotales = 0;\n        if (listaProductos != null) {\n            for (Producto producto : listaProductos) {\n                if (producto.getPeso() != null) {\n                    double pesoEnKg = producto.getPeso();\n                    int puntosPorProducto = (int) (pesoEnKg * 10);\n                    puntosTotales += puntosPorProducto;\n                }\n            }\n        }\n        return puntosTotales;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/entity/Usuario.java", "chunked_list": ["package com.upCycle.entity;\n\nimport com.upCycle.enums.Rol;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;", "\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@DiscriminatorColumn(name=\"role\", discriminatorType = DiscriminatorType.STRING)\n@Entity", "@DiscriminatorColumn(name=\"role\", discriminatorType = DiscriminatorType.STRING)\n@Entity\n@Table(name = \"user\")\npublic class Usuario implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"first_name\")\n    private String nombre;\n\n    @Column(name = \"last_name\")\n    private String apellido;\n\n    private String email;\n    private String password;\n\n    @Column(name = \"role\", insertable = false, updatable = false)\n    @Enumerated(EnumType.STRING)\n    private Rol rol;\n", "    public boolean isEcoproveedor(Rol role){\n        return role.equals(Rol.ECOPROVEEDOR);\n    }\n\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/repository/UbicacionRepository.java", "chunked_list": ["package com.upCycle.repository;\n\nimport com.upCycle.entity.Ubicacion;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface UbicacionRepository extends JpaRepository<Ubicacion, Long> {\n\n    Optional<Ubicacion> findByNombre(String nombre);\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/repository/ProductoRepository.java", "chunked_list": ["package com.upCycle.repository;\n\nimport com.upCycle.entity.Producto;\nimport com.upCycle.enums.TipoMaterial;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\npublic interface ProductoRepository extends JpaRepository<Producto, Long> {\n\n    List<Producto> findByMaterial(TipoMaterial material);\n\n    List<Producto> findByDescripcionContainingIgnoreCase(String cadena);\n}\n", "public interface ProductoRepository extends JpaRepository<Producto, Long> {\n\n    List<Producto> findByMaterial(TipoMaterial material);\n\n    List<Producto> findByDescripcionContainingIgnoreCase(String cadena);\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/repository/UsuarioRepository.java", "chunked_list": ["package com.upCycle.repository;\n\nimport com.upCycle.entity.Ecocreador;\nimport com.upCycle.entity.Ecoproveedor;\nimport com.upCycle.entity.Usuario;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport java.util.Optional;\n\npublic interface UsuarioRepository extends JpaRepository<Usuario, Long> {\n\n    Optional<Usuario> findByEmail(String email);\n\n    @Query(\"SELECT u FROM Usuario u WHERE u.id = :id\")\n    Optional<Ecoproveedor> buscarEcoproveedorPorId(Long id);\n\n    @Query(\"SELECT u FROM Usuario u WHERE u.id = :id\")\n    Optional<Ecocreador> buscarEcocreadorPorId(Long id);\n}\n", "import java.util.Optional;\n\npublic interface UsuarioRepository extends JpaRepository<Usuario, Long> {\n\n    Optional<Usuario> findByEmail(String email);\n\n    @Query(\"SELECT u FROM Usuario u WHERE u.id = :id\")\n    Optional<Ecoproveedor> buscarEcoproveedorPorId(Long id);\n\n    @Query(\"SELECT u FROM Usuario u WHERE u.id = :id\")\n    Optional<Ecocreador> buscarEcocreadorPorId(Long id);\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/swagger/swaggerConfig.java", "chunked_list": ["package com.upCycle.swagger;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@OpenAPIDefinition\npublic class swaggerConfig {\n\n    public OpenAPI api(){\n        return new OpenAPI();\n    }\n}\n", "public class swaggerConfig {\n\n    public OpenAPI api(){\n        return new OpenAPI();\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/controller/ProductoController.java", "chunked_list": ["package com.upCycle.controller;\n\nimport com.upCycle.dto.request.DtoProducto;\nimport com.upCycle.dto.response.DtoEcoproveedorResponse;\nimport com.upCycle.dto.response.DtoProductoResponse;\nimport com.upCycle.entity.Producto;\nimport com.upCycle.entity.Usuario;\nimport com.upCycle.exception.UserNotExistException;\nimport com.upCycle.exception.UserUnauthorizedException;\nimport com.upCycle.service.EcoproveedorService;", "import com.upCycle.exception.UserUnauthorizedException;\nimport com.upCycle.service.EcoproveedorService;\nimport com.upCycle.service.ProductoService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.server.ResponseStatusException;", "import org.springframework.web.bind.annotation.*;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Controller\n@RequestMapping(path = \"/api/product\")\n@CrossOrigin(origins = \"*\")\npublic class ProductoController {\n\n    private final ProductoService service;\n    private final EcoproveedorService ecoproveedorService;\n\n    @Autowired\n    public ProductoController(ProductoService service, EcoproveedorService ecoproveedorService) {\n        this.service = service;\n        this.ecoproveedorService = ecoproveedorService;\n    }\n\n    @PostMapping(path = \"/create\")\n    public ResponseEntity<DtoProductoResponse> crearProducto(@RequestBody DtoProducto dtoProducto, HttpSession session) throws UserNotExistException, UserUnauthorizedException {\n\n            Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");\n            DtoProductoResponse productoResponse = service.crearProducto(dtoProducto, session);\n            return ResponseEntity.status(HttpStatus.CREATED).body(productoResponse);\n\n    }\n\n    @GetMapping(path = \"/getAll\")\n    public ResponseEntity<List<DtoProductoResponse>> listarProductos() {\n\n        List<DtoProductoResponse> dtoProductoResponse = service.listarProductos();\n        return !dtoProductoResponse.isEmpty() ? ResponseEntity.ok(dtoProductoResponse) : ResponseEntity.ok(new ArrayList<>());\n\n    }\n\n    @GetMapping(path = \"/productInfo/{id}\")\n    public ResponseEntity<DtoEcoproveedorResponse> buscarEcoproveedorPorIdProducto(@PathVariable Long id){\n", "@CrossOrigin(origins = \"*\")\npublic class ProductoController {\n\n    private final ProductoService service;\n    private final EcoproveedorService ecoproveedorService;\n\n    @Autowired\n    public ProductoController(ProductoService service, EcoproveedorService ecoproveedorService) {\n        this.service = service;\n        this.ecoproveedorService = ecoproveedorService;\n    }\n\n    @PostMapping(path = \"/create\")\n    public ResponseEntity<DtoProductoResponse> crearProducto(@RequestBody DtoProducto dtoProducto, HttpSession session) throws UserNotExistException, UserUnauthorizedException {\n\n            Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");\n            DtoProductoResponse productoResponse = service.crearProducto(dtoProducto, session);\n            return ResponseEntity.status(HttpStatus.CREATED).body(productoResponse);\n\n    }\n\n    @GetMapping(path = \"/getAll\")\n    public ResponseEntity<List<DtoProductoResponse>> listarProductos() {\n\n        List<DtoProductoResponse> dtoProductoResponse = service.listarProductos();\n        return !dtoProductoResponse.isEmpty() ? ResponseEntity.ok(dtoProductoResponse) : ResponseEntity.ok(new ArrayList<>());\n\n    }\n\n    @GetMapping(path = \"/productInfo/{id}\")\n    public ResponseEntity<DtoEcoproveedorResponse> buscarEcoproveedorPorIdProducto(@PathVariable Long id){\n", "        try {\n            DtoEcoproveedorResponse dtoEcoproveedorResponse = service.buscarEcoproveedorPorIdProdcuto(id);\n            if(dtoEcoproveedorResponse != null){\n                return ResponseEntity.ok().body(dtoEcoproveedorResponse);\n            }else {\n                return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n            }\n\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n    }\n\n    @GetMapping(path = \"/filterTag/{material}\")\n    public ResponseEntity<List<DtoProductoResponse>> filtrarPorMaterial(@PathVariable String material){", "        try {\n            List<DtoProductoResponse> dtoProductoResponse = service.listarPorMaterial(material);\n            return !dtoProductoResponse.isEmpty() ? ResponseEntity.ok(dtoProductoResponse) : ResponseEntity.ok(new ArrayList<>());\n        }catch (Exception ex){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @GetMapping(path = \"/find/{cadena}\")\n    public ResponseEntity<List<DtoProductoResponse>> filtrarBarraDeBusqueda(@PathVariable String cadena){\n        try {\n            List<DtoProductoResponse> dtoProductoResponse = service.listarPorBarraBusqueda(cadena);\n            return !dtoProductoResponse.isEmpty() ? ResponseEntity.ok(dtoProductoResponse) : ResponseEntity.ok(new ArrayList<>());\n        }catch (Exception ex){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @GetMapping(path = \"/getPoints\")\n    public ResponseEntity<Integer> getEcopuntos(HttpSession session){", "        try {\n            List<DtoProductoResponse> dtoProductoResponse = service.listarPorBarraBusqueda(cadena);\n            return !dtoProductoResponse.isEmpty() ? ResponseEntity.ok(dtoProductoResponse) : ResponseEntity.ok(new ArrayList<>());\n        }catch (Exception ex){\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\n        }\n    }\n\n    @GetMapping(path = \"/getPoints\")\n    public ResponseEntity<Integer> getEcopuntos(HttpSession session){\n        try {\n            return ResponseEntity.ok(ecoproveedorService.getEcopuntos(session));\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(0);\n        }\n    }\n    @DeleteMapping(path = \"/{id}\")\n    public ResponseEntity<Void> eliminarProducto(@PathVariable Long id, HttpSession session) {\n", "        try {\n            return ResponseEntity.ok(ecoproveedorService.getEcopuntos(session));\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(0);\n        }\n    }\n    @DeleteMapping(path = \"/{id}\")\n    public ResponseEntity<Void> eliminarProducto(@PathVariable Long id, HttpSession session) {\n\n        try {\n            service.eliminarProducto(id, session);\n            return ResponseEntity.ok().build();\n\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n    }\n}\n", "        try {\n            service.eliminarProducto(id, session);\n            return ResponseEntity.ok().build();\n\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/controller/UsuarioController.java", "chunked_list": ["package com.upCycle.controller;\n\nimport com.upCycle.dto.request.DtoEcocreador;\nimport com.upCycle.dto.request.DtoEcoproveedor;\nimport com.upCycle.dto.request.DtoUsuario;\nimport com.upCycle.dto.response.DtoEcocreadorResponse;\nimport com.upCycle.dto.response.DtoEcoproveedorResponse;\nimport com.upCycle.dto.response.DtoUsuarioResponse;\nimport com.upCycle.exception.UserAlreadyExistException;\nimport com.upCycle.exception.UserNotExistException;", "import com.upCycle.exception.UserAlreadyExistException;\nimport com.upCycle.exception.UserNotExistException;\nimport com.upCycle.service.EcocreadorService;\nimport com.upCycle.service.EcoproveedorService;\nimport com.upCycle.service.UsuarioService;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;", "import org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Objects;\n\n@Controller\n@RequestMapping(path = \"/api/auth\")\n@CrossOrigin(origins = \"*\")\npublic class UsuarioController {\n\n    private final EcoproveedorService ecoproveedorService;\n    private final EcocreadorService ecocreadorService;\n    private final UsuarioService usuarioService;\n\n    @Autowired\n    public UsuarioController(EcoproveedorService ecoproveedorService, EcocreadorService ecocreadorService, UsuarioService usuarioService) {\n        this.ecoproveedorService = ecoproveedorService;\n        this.ecocreadorService = ecocreadorService;\n        this.usuarioService = usuarioService;\n    }\n\n    @PostMapping(path = \"/registerEcoproveedor\")\n    public ResponseEntity<DtoEcoproveedorResponse> registrarEcoproveedor(@RequestBody DtoEcoproveedor ecoproveedor, HttpSession session) throws UserAlreadyExistException {\n\n        DtoEcoproveedorResponse guardarEcoproveedor = ecoproveedorService.registrarEcoproveedor(ecoproveedor, session);\n        return ResponseEntity.status(HttpStatus.CREATED).body(guardarEcoproveedor);\n    }\n\n    @PostMapping(path = \"/registerEcocreador\")\n    public ResponseEntity<DtoEcocreadorResponse> registrarEcocreador(@RequestBody DtoEcocreador dtoEcocreador, HttpSession session) throws UserAlreadyExistException {\n\n        DtoEcocreadorResponse guardarEcocreador = ecocreadorService.registrarEcocreador(dtoEcocreador, session);\n        return ResponseEntity.status(HttpStatus.CREATED).body(guardarEcocreador);\n    }\n\n    @PostMapping(path = \"/login\")\n    public ResponseEntity<DtoUsuarioResponse> login(@RequestBody DtoUsuario usuarioRequest, HttpSession session) throws UserNotExistException {\n", "@RequestMapping(path = \"/api/auth\")\n@CrossOrigin(origins = \"*\")\npublic class UsuarioController {\n\n    private final EcoproveedorService ecoproveedorService;\n    private final EcocreadorService ecocreadorService;\n    private final UsuarioService usuarioService;\n\n    @Autowired\n    public UsuarioController(EcoproveedorService ecoproveedorService, EcocreadorService ecocreadorService, UsuarioService usuarioService) {\n        this.ecoproveedorService = ecoproveedorService;\n        this.ecocreadorService = ecocreadorService;\n        this.usuarioService = usuarioService;\n    }\n\n    @PostMapping(path = \"/registerEcoproveedor\")\n    public ResponseEntity<DtoEcoproveedorResponse> registrarEcoproveedor(@RequestBody DtoEcoproveedor ecoproveedor, HttpSession session) throws UserAlreadyExistException {\n\n        DtoEcoproveedorResponse guardarEcoproveedor = ecoproveedorService.registrarEcoproveedor(ecoproveedor, session);\n        return ResponseEntity.status(HttpStatus.CREATED).body(guardarEcoproveedor);\n    }\n\n    @PostMapping(path = \"/registerEcocreador\")\n    public ResponseEntity<DtoEcocreadorResponse> registrarEcocreador(@RequestBody DtoEcocreador dtoEcocreador, HttpSession session) throws UserAlreadyExistException {\n\n        DtoEcocreadorResponse guardarEcocreador = ecocreadorService.registrarEcocreador(dtoEcocreador, session);\n        return ResponseEntity.status(HttpStatus.CREATED).body(guardarEcocreador);\n    }\n\n    @PostMapping(path = \"/login\")\n    public ResponseEntity<DtoUsuarioResponse> login(@RequestBody DtoUsuario usuarioRequest, HttpSession session) throws UserNotExistException {\n", "        try {\n            var usuarioLogueado = usuarioService.iniciarSession(usuarioRequest, session);\n            return usuarioLogueado != null ? ResponseEntity.status(HttpStatus.ACCEPTED).body(usuarioLogueado) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n\n        }catch (Exception ex){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n\n    }\n\n    @GetMapping(path = \"/logout\")\n    public ResponseEntity<String> logout(HttpServletRequest request){\n\n        HttpSession session = request.getSession(false);\n        return usuarioService.cerrarSession(session) ? ResponseEntity.ok(\"Session cerrada correctamente\") :\n                ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Nunca se inicio session wey. Registrate para eso\");\n    }\n\n    @GetMapping(path = \"/getUserUpdate\")\n    public ResponseEntity<DtoUsuarioResponse> getUsuario(HttpSession session){", "        try {\n            var usuario = usuarioService.getUsuario(session);\n            return usuario != null ? ResponseEntity.ok().body(usuario) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }catch (Exception ex){\n            return ResponseEntity.internalServerError().build();\n        }\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/enums/Rol.java", "chunked_list": ["package com.upCycle.enums;\n\npublic enum Rol {\n    ECOCREADOR,\n    ECOPROVEEDOR\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/enums/TipoMaterial.java", "chunked_list": ["package com.upCycle.enums;\n\npublic enum TipoMaterial {\n    Telas,\n    Metales,\n    Plasticos,\n    Carton,\n    Otros\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/exception/UserUnauthorizedException.java", "chunked_list": ["package com.upCycle.exception;\n\nimport org.springframework.http.HttpStatus;\n\npublic class UserUnauthorizedException extends Exception {\n    public UserUnauthorizedException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/exception/UserAlreadyExistException.java", "chunked_list": ["package com.upCycle.exception;\n\npublic class UserAlreadyExistException extends Exception{\n    public UserAlreadyExistException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/exception/UserNotExistException.java", "chunked_list": ["package com.upCycle.exception;\n\npublic class UserNotExistException extends Exception {\n    public UserNotExistException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/service/EcocreadorService.java", "chunked_list": ["package com.upCycle.service;\n\nimport com.upCycle.dto.request.DtoEcocreador;\nimport com.upCycle.dto.response.DtoEcocreadorResponse;\nimport com.upCycle.entity.Ecocreador;\nimport com.upCycle.entity.Usuario;\nimport com.upCycle.exception.UserAlreadyExistException;\nimport com.upCycle.mapper.EcocreadorMapper;\nimport com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;", "import com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\n\n@Service\npublic class EcocreadorService {\n\n    private final UsuarioRepository repository;\n    private final EcocreadorMapper ecocreadorMapper;\n\n    @Autowired\n    public EcocreadorService(UsuarioRepository repository, EcocreadorMapper ecocreadorMapper) {\n        this.repository = repository;\n        this.ecocreadorMapper = ecocreadorMapper;\n    }\n", "public class EcocreadorService {\n\n    private final UsuarioRepository repository;\n    private final EcocreadorMapper ecocreadorMapper;\n\n    @Autowired\n    public EcocreadorService(UsuarioRepository repository, EcocreadorMapper ecocreadorMapper) {\n        this.repository = repository;\n        this.ecocreadorMapper = ecocreadorMapper;\n    }\n", "    public DtoEcocreadorResponse registrarEcocreador(DtoEcocreador dtoEcocreador, HttpSession session) throws UserAlreadyExistException {\n\n        Optional<Usuario> usuario = repository.findByEmail(dtoEcocreador.getEmail());\n\n        if(usuario.isPresent()){\n            throw new UserAlreadyExistException(\"El usuario ya existe\");\n        }\n\n        Ecocreador user = repository.save(ecocreadorMapper.dtoEcocreadorAEntidad(dtoEcocreador));\n        session.setAttribute(\"usuarioLogueado\", user);\n        return ecocreadorMapper.entidadADtoEcocreador(user);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/service/UsuarioService.java", "chunked_list": ["package com.upCycle.service;\n\nimport com.upCycle.dto.request.DtoUsuario;\nimport com.upCycle.dto.response.DtoUsuarioResponse;\nimport com.upCycle.entity.Ecocreador;\nimport com.upCycle.entity.Ecoproveedor;\nimport com.upCycle.entity.Usuario;\nimport com.upCycle.enums.Rol;\nimport com.upCycle.exception.UserNotExistException;\nimport com.upCycle.mapper.EcocreadorMapper;", "import com.upCycle.exception.UserNotExistException;\nimport com.upCycle.mapper.EcocreadorMapper;\nimport com.upCycle.mapper.EcoproveedorMapper;\nimport com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\n", "import java.util.Optional;\n\n@Service\npublic class UsuarioService {\n\n    private final UsuarioRepository repository;\n\n    private final EcoproveedorMapper ecoproveedorMapper;\n\n    private final EcocreadorMapper ecocreadorMapper;\n\n    @Autowired\n    public UsuarioService(UsuarioRepository repository, EcoproveedorMapper ecoproveedorMapper, EcocreadorMapper ecocreadorMapper) {\n        this.repository = repository;\n        this.ecoproveedorMapper = ecoproveedorMapper;\n        this.ecocreadorMapper = ecocreadorMapper;\n    }\n", "    public DtoUsuarioResponse iniciarSession(DtoUsuario dtoUsuario, HttpSession session){\n\n        Optional<Usuario> oUser = repository.findByEmail(dtoUsuario.getEmail());\n        if(oUser.isEmpty()){\n            return null;\n        }\n        //Usuario user = oUser.orElseThrow(() -> new UserNotExistException(\"Este usuario no existe, intente con otro correo\"));//Corregir. Capturar excepci\u00f3n\n        Usuario usuario = oUser.get();\n        if(usuario.getRol().equals(Rol.ECOPROVEEDOR)){\n            Optional<Ecoproveedor> oEcoproveedor = repository.buscarEcoproveedorPorId(usuario.getId());\n            if(oEcoproveedor.isPresent()){\n                Ecoproveedor ecoproveedor = oEcoproveedor.get();\n                session.setAttribute(\"usuarioLogueado\", ecoproveedor);\n                return ecoproveedorMapper.entidadADtoEcoproveedor(ecoproveedor);\n            }\n            //return oEcoproveedor.map(ecoproveedorMapper::entidadADtoEcoproveedor).orElseThrow(() -> new UserNotExistException(\"Usuario o contrase\u00f1a incorrectas\"));\n", "        if(usuario.getRol().equals(Rol.ECOPROVEEDOR)){\n            Optional<Ecoproveedor> oEcoproveedor = repository.buscarEcoproveedorPorId(usuario.getId());\n            if(oEcoproveedor.isPresent()){\n                Ecoproveedor ecoproveedor = oEcoproveedor.get();\n                session.setAttribute(\"usuarioLogueado\", ecoproveedor);\n                return ecoproveedorMapper.entidadADtoEcoproveedor(ecoproveedor);\n            }\n            //return oEcoproveedor.map(ecoproveedorMapper::entidadADtoEcoproveedor).orElseThrow(() -> new UserNotExistException(\"Usuario o contrase\u00f1a incorrectas\"));\n\n        }else if(usuario.getRol().equals(Rol.ECOCREADOR)){\n            Optional<Ecocreador> oEcocreador = repository.buscarEcocreadorPorId(usuario.getId());", "        }else if(usuario.getRol().equals(Rol.ECOCREADOR)){\n            Optional<Ecocreador> oEcocreador = repository.buscarEcocreadorPorId(usuario.getId());\n            if(oEcocreador.isPresent()){\n                Ecocreador ecocreador = oEcocreador.get();\n                session.setAttribute(\"usuarioLogueado\", ecocreador);\n                return ecocreadorMapper.entidadADtoEcocreador(ecocreador);\n            }\n            //return oEcocreador.map(ecocreadorMapper::entidadADtoEcocreador).orElseThrow(() -> new UserNotExistException(\"Usuario o contrase\u00f1a incorrectas\"));\n        }\n        return null;\n    }", "    public boolean cerrarSession(HttpSession session) {\n\n        if (session != null) {\n            // Invalidar la sesi\u00f3n\n            session.invalidate();\n            return true;\n        }\n        return false;\n    }\n\n    public DtoUsuarioResponse getUsuario(HttpSession session) {\n\n        Usuario usuario = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        //Usuario user = oUser.orElseThrow(() -> new UserNotExistException(\"Este usuario no existe, intente con otro correo\"));//Corregir. Capturar excepci\u00f3n\n        //Usuario usuario = oUser.get();", "    public DtoUsuarioResponse getUsuario(HttpSession session) {\n\n        Usuario usuario = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        //Usuario user = oUser.orElseThrow(() -> new UserNotExistException(\"Este usuario no existe, intente con otro correo\"));//Corregir. Capturar excepci\u00f3n\n        //Usuario usuario = oUser.get();\n        if(usuario.getRol().equals(Rol.ECOPROVEEDOR)){\n            Optional<Ecoproveedor> oEcoproveedor = repository.buscarEcoproveedorPorId(usuario.getId());\n            if(oEcoproveedor.isPresent()){\n                Ecoproveedor ecoproveedor = oEcoproveedor.get();\n                return ecoproveedorMapper.entidadADtoEcoproveedor(ecoproveedor);\n            }\n", "        }else if(usuario.getRol().equals(Rol.ECOCREADOR)){\n            Optional<Ecocreador> oEcocreador = repository.buscarEcocreadorPorId(usuario.getId());\n            if(oEcocreador.isPresent()){\n                Ecocreador ecocreador = oEcocreador.get();\n                return ecocreadorMapper.entidadADtoEcocreador(ecocreador);\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/service/EcoproveedorService.java", "chunked_list": ["package com.upCycle.service;\n\nimport com.upCycle.dto.request.DtoEcoproveedor;\nimport com.upCycle.dto.response.DtoEcoproveedorResponse;\nimport com.upCycle.entity.Ecoproveedor;\nimport com.upCycle.entity.Producto;\nimport com.upCycle.entity.Usuario;\nimport com.upCycle.exception.UserAlreadyExistException;\nimport com.upCycle.exception.UserNotExistException;\nimport com.upCycle.mapper.EcoproveedorMapper;", "import com.upCycle.exception.UserNotExistException;\nimport com.upCycle.mapper.EcoproveedorMapper;\nimport com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Optional;\n\n@Service\npublic class EcoproveedorService {\n\n    private final UsuarioRepository repository;\n    private final EcoproveedorMapper ecoproveedorMapper;\n\n    @Autowired\n    public EcoproveedorService(UsuarioRepository repository, EcoproveedorMapper ecoproveedorMapper) {\n        this.repository = repository;\n        this.ecoproveedorMapper = ecoproveedorMapper;\n    }\n", "\n@Service\npublic class EcoproveedorService {\n\n    private final UsuarioRepository repository;\n    private final EcoproveedorMapper ecoproveedorMapper;\n\n    @Autowired\n    public EcoproveedorService(UsuarioRepository repository, EcoproveedorMapper ecoproveedorMapper) {\n        this.repository = repository;\n        this.ecoproveedorMapper = ecoproveedorMapper;\n    }\n", "    public DtoEcoproveedorResponse registrarEcoproveedor(DtoEcoproveedor dtoEcoproveedor, HttpSession session) throws UserAlreadyExistException {\n\n        Optional<Usuario> usuario = repository.findByEmail(dtoEcoproveedor.getEmail());\n\n        if(usuario.isPresent()){\n            throw new UserAlreadyExistException(\"El usuario ya existe\");\n        }\n\n        Ecoproveedor user = repository.save(ecoproveedorMapper.dtoEcoproveedorAEntidad(dtoEcoproveedor));\n        session.setAttribute(\"usuarioLogueado\", user);\n        return ecoproveedorMapper.entidadADtoEcoproveedor(user);\n    }\n", "    public void guardarProducto(Ecoproveedor ecoproveedor, Producto producto){\n\n        ecoproveedor.getListaProductos().add(producto);\n        int puntos = ecoproveedor.calcularPuntosTotales();\n        ecoproveedor.setPuntos(puntos);\n        //repository.save(ecoproveedor);\n    }\n\n    public Integer getEcopuntos(HttpSession session) throws UserNotExistException {\n        Usuario usuario = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        Ecoproveedor ecoproveedor = repository.buscarEcoproveedorPorId(usuario.getId()).orElseThrow(() -> new UserNotExistException(\"El usuario no existe\"));\n        return ecoproveedor.getPuntos();\n    }\n}\n", "    public Integer getEcopuntos(HttpSession session) throws UserNotExistException {\n        Usuario usuario = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        Ecoproveedor ecoproveedor = repository.buscarEcoproveedorPorId(usuario.getId()).orElseThrow(() -> new UserNotExistException(\"El usuario no existe\"));\n        return ecoproveedor.getPuntos();\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/service/UbicacionService.java", "chunked_list": ["package com.upCycle.service;\n\nimport com.upCycle.entity.Ubicacion;\nimport com.upCycle.repository.UbicacionRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UbicacionService {\n\n    private final UbicacionRepository repository;\n\n    @Autowired\n    public UbicacionService(UbicacionRepository repository) {\n        this.repository = repository;\n    }\n", "public class UbicacionService {\n\n    private final UbicacionRepository repository;\n\n    @Autowired\n    public UbicacionService(UbicacionRepository repository) {\n        this.repository = repository;\n    }\n\n    public Ubicacion buscarPorNombre(String nombre){\n\n        return repository.findByNombre(nombre).orElseThrow(null);\n    }\n}\n", "    public Ubicacion buscarPorNombre(String nombre){\n\n        return repository.findByNombre(nombre).orElseThrow(null);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/service/ProductoService.java", "chunked_list": ["package com.upCycle.service;\n\nimport com.upCycle.dto.request.DtoProducto;\nimport com.upCycle.dto.response.DtoEcoproveedorResponse;\nimport com.upCycle.dto.response.DtoProductoResponse;\nimport com.upCycle.entity.Ecoproveedor;\nimport com.upCycle.entity.Producto;\nimport com.upCycle.entity.Ubicacion;\nimport com.upCycle.entity.Usuario;\nimport com.upCycle.enums.Rol;", "import com.upCycle.entity.Usuario;\nimport com.upCycle.enums.Rol;\nimport com.upCycle.enums.TipoMaterial;\nimport com.upCycle.exception.UserNotExistException;\nimport com.upCycle.exception.UserUnauthorizedException;\nimport com.upCycle.mapper.EcoproveedorMapper;\nimport com.upCycle.mapper.ProductoMapper;\nimport com.upCycle.repository.ProductoRepository;\nimport com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;", "import com.upCycle.repository.UsuarioRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\n@Service\npublic class ProductoService {\n\n    private final ProductoRepository repository;\n    private final ProductoMapper mapper;\n    private final EcoproveedorMapper EcoproveedorMapper;\n    private final UsuarioRepository usuarioRepository;\n    private final UbicacionService ubicacionService;\n    private final EcoproveedorService ecoproveedorService;\n\n    @Autowired\n    public ProductoService(ProductoRepository repository, ProductoMapper mapper, com.upCycle.mapper.EcoproveedorMapper ecoproveedorMapper,\n                           UsuarioRepository usuarioRepository, UbicacionService ubicacionService, EcoproveedorService ecoproveedorService) {\n        this.repository = repository;\n        this.mapper = mapper;\n        EcoproveedorMapper = ecoproveedorMapper;\n        this.usuarioRepository = usuarioRepository;\n        this.ubicacionService = ubicacionService;\n        this.ecoproveedorService = ecoproveedorService;\n    }\n", "    public DtoProductoResponse crearProducto(DtoProducto dtoProducto, HttpSession session) throws UserUnauthorizedException, UserNotExistException {\n\n        Optional<Usuario> oUser = usuarioRepository.findById(dtoProducto.getIdEcoproveedor());\n        if(oUser.isEmpty()){\n            return null;\n        }\n        Usuario user = oUser.get();\n        //Ecoproveedor ecoproveedor = usuarioRepository.buscarEcoproveedorPorId(dtoProducto.getIdEcoproveedor()).orElseThrow(() -> new UserNotExistException(\"El usuario no existe\"));\n\n        Optional<Ecoproveedor> oEcoproveedor = usuarioRepository.buscarEcoproveedorPorId(user.getId());\n        if(oEcoproveedor.isEmpty()){\n            return null;\n        }\n\n        Ecoproveedor ecoproveedor = oEcoproveedor.get();", "        if(oEcoproveedor.isEmpty()){\n            return null;\n        }\n\n        Ecoproveedor ecoproveedor = oEcoproveedor.get();\n        if(!ecoproveedor.getRol().equals(Rol.ECOPROVEEDOR)){\n            throw new UserUnauthorizedException(\"Usuario no autorizado\");\n        }\n\n        Producto producto = mapper.DtoAentidadProducto(dtoProducto);\n\n        Ubicacion ubicacion = ubicacionService.buscarPorNombre(dtoProducto.getLocation());\n        producto.setEcoproveedor(ecoproveedor);\n        producto.setUbicacion(ubicacion);\n        ecoproveedorService.guardarProducto(ecoproveedor, producto);\n        mapper.entidadADtoProducto(repository.save(producto));\n        return mapper.entidadADtoProducto(producto);\n    }\n", "    public void eliminarProducto(Long id, HttpSession session) throws UserUnauthorizedException, UserNotExistException {\n\n        Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        if(Objects.isNull(logueado)){\n            throw new UserNotExistException(\"Usuario inexistente\");\n        }\n\n        if(logueado.getRol().equals(Rol.ECOPROVEEDOR)){\n            Optional<Producto> oProducto = repository.findById(id);\n\n            if(oProducto.isPresent()){\n                Producto producto = oProducto.get();\n                repository.delete(producto);\n            }\n        }\n        throw new UserUnauthorizedException(\"Usuario no autorizado\");\n    }\n\n    public List<DtoProductoResponse> listarProductos() {\n\n        List<Producto> listEntidadProductos = repository.findAll();\n        return mapper.entidadProductoListADtoList(listEntidadProductos);\n\n    }\n", "            if(oProducto.isPresent()){\n                Producto producto = oProducto.get();\n                repository.delete(producto);\n            }\n        }\n        throw new UserUnauthorizedException(\"Usuario no autorizado\");\n    }\n\n    public List<DtoProductoResponse> listarProductos() {\n\n        List<Producto> listEntidadProductos = repository.findAll();\n        return mapper.entidadProductoListADtoList(listEntidadProductos);\n\n    }\n", "    public DtoEcoproveedorResponse buscarEcoproveedorPorIdProdcuto(Long id) throws UserNotExistException {\n\n        /*Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");\n        if(Objects.isNull(logueado)){\n            throw new UserNotExistException(\"Usuario inexistente\");\n        }\n         */\n\n        Optional<Producto> oProducto = repository.findById(id);\n        if(oProducto.isPresent()){\n            Producto producto = oProducto.get();\n            Optional<Ecoproveedor> oEcoproveedor = usuarioRepository.buscarEcoproveedorPorId(producto.getEcoproveedor().getId());\n\n            Ecoproveedor ecoproveedor = oEcoproveedor.orElse(null);\n            assert ecoproveedor != null;\n            return EcoproveedorMapper.entidadADtoEcoproveedor(ecoproveedor);\n        }\n        return null;\n    }\n\n    public List<DtoProductoResponse> listarPorMaterial(String material) throws UserNotExistException {\n\n        /*Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");", "        if(oProducto.isPresent()){\n            Producto producto = oProducto.get();\n            Optional<Ecoproveedor> oEcoproveedor = usuarioRepository.buscarEcoproveedorPorId(producto.getEcoproveedor().getId());\n\n            Ecoproveedor ecoproveedor = oEcoproveedor.orElse(null);\n            assert ecoproveedor != null;\n            return EcoproveedorMapper.entidadADtoEcoproveedor(ecoproveedor);\n        }\n        return null;\n    }\n\n    public List<DtoProductoResponse> listarPorMaterial(String material) throws UserNotExistException {\n\n        /*Usuario logueado = (Usuario) session.getAttribute(\"usuarioLogueado\");", "        if(Objects.isNull(logueado)){\n            throw new UserNotExistException(\"Usuario inexistente\");\n        }\n         */\n        List<Producto> listEntidadProductos = repository.findByMaterial(obtenerTipoMaterial(material));\n        return mapper.entidadProductoListADtoList(listEntidadProductos);\n    }\n\n    public TipoMaterial obtenerTipoMaterial(String material) {\n        for (TipoMaterial tipo : TipoMaterial.values()) {\n            if (tipo.name().equalsIgnoreCase(material)) {\n                return tipo; // Coincide con el enum, se devuelve el material\n            }\n        }\n        return null; // No coincide con el enum\n    }\n\n    public List<DtoProductoResponse> listarPorBarraBusqueda(String cadena) {\n\n        List<Producto> listEntidadProductos = repository.findByDescripcionContainingIgnoreCase(cadena);\n        return mapper.entidadProductoListADtoList(listEntidadProductos);\n    }\n}\n", "    public TipoMaterial obtenerTipoMaterial(String material) {\n        for (TipoMaterial tipo : TipoMaterial.values()) {\n            if (tipo.name().equalsIgnoreCase(material)) {\n                return tipo; // Coincide con el enum, se devuelve el material\n            }\n        }\n        return null; // No coincide con el enum\n    }\n\n    public List<DtoProductoResponse> listarPorBarraBusqueda(String cadena) {\n\n        List<Producto> listEntidadProductos = repository.findByDescripcionContainingIgnoreCase(cadena);\n        return mapper.entidadProductoListADtoList(listEntidadProductos);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/mapper/EcoproveedorMapper.java", "chunked_list": ["package com.upCycle.mapper;\n\nimport com.upCycle.dto.request.DtoEcoproveedor;\nimport com.upCycle.dto.response.DtoEcoproveedorResponse;\nimport com.upCycle.dto.response.DtoProductoResponse;\nimport com.upCycle.entity.Ecoproveedor;\nimport com.upCycle.entity.Producto;\nimport com.upCycle.enums.Rol;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class EcoproveedorMapper {\n\n    private final ProductoMapper publicacionMapper;\n\n    @Autowired\n    public EcoproveedorMapper(ProductoMapper publicacionMapper) {\n        this.publicacionMapper = publicacionMapper;\n    }\n", "    public Ecoproveedor dtoEcoproveedorAEntidad(DtoEcoproveedor dtoEcoproveedor){\n\n        Ecoproveedor ecoproveedor = new Ecoproveedor();\n        ecoproveedor.setNombre(dtoEcoproveedor.getFirstName());\n        ecoproveedor.setApellido(dtoEcoproveedor.getLastName());\n        ecoproveedor.setCuit(dtoEcoproveedor.getCuit());\n        ecoproveedor.setLogo(dtoEcoproveedor.getLogoImage());\n        ecoproveedor.setEmail(dtoEcoproveedor.getEmail());\n        ecoproveedor.setRol(Rol.ECOPROVEEDOR);\n        ecoproveedor.setRazonSocial(dtoEcoproveedor.getCompanyName());\n        ecoproveedor.setPassword(dtoEcoproveedor.getPassword());\n        List<Producto> productos = new ArrayList<>();\n        ecoproveedor.setListaProductos(productos);\n\n        return ecoproveedor;\n    }\n", "    public DtoEcoproveedorResponse entidadADtoEcoproveedor(Ecoproveedor ecoproveedor){\n\n        DtoEcoproveedorResponse dtoEcoproveedor = new DtoEcoproveedorResponse();\n        dtoEcoproveedor.setId(ecoproveedor.getId());\n        dtoEcoproveedor.setFirstName(ecoproveedor.getNombre());\n        dtoEcoproveedor.setLastName(ecoproveedor.getApellido());\n        dtoEcoproveedor.setLogoImage(ecoproveedor.getLogo());\n        dtoEcoproveedor.setCuit(ecoproveedor.getCuit());\n        dtoEcoproveedor.setPoints(ecoproveedor.getPuntos());\n        dtoEcoproveedor.setEmail(ecoproveedor.getEmail());\n        dtoEcoproveedor.setCompanyName(ecoproveedor.getRazonSocial());\n        dtoEcoproveedor.setRol(ecoproveedor.getRol().name());\n\n        List<DtoProductoResponse> productos = publicacionMapper.entidadProductoListADtoList(ecoproveedor.getListaProductos());\n\n        dtoEcoproveedor.setListaProductos(productos);\n        return dtoEcoproveedor;\n\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/mapper/EcocreadorMapper.java", "chunked_list": ["package com.upCycle.mapper;\n\nimport com.upCycle.dto.request.DtoEcocreador;\nimport com.upCycle.dto.response.DtoEcocreadorResponse;\nimport com.upCycle.entity.Ecocreador;\nimport com.upCycle.enums.Rol;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EcocreadorMapper {\n", "@Component\npublic class EcocreadorMapper {\n\n    public Ecocreador dtoEcocreadorAEntidad(DtoEcocreador dtoEcocreador) {\n\n        Ecocreador entidadEcocreador = new Ecocreador();\n        entidadEcocreador.setNombre(dtoEcocreador.getFirstName());\n        entidadEcocreador.setApellido(dtoEcocreador.getLastName());\n        entidadEcocreador.setEmail(dtoEcocreador.getEmail());\n        entidadEcocreador.setFoto(dtoEcocreador.getImage());\n        entidadEcocreador.setOcupacion(dtoEcocreador.getOccupation());\n        entidadEcocreador.setPassword(dtoEcocreador.getPassword());\n        entidadEcocreador.setRol(Rol.ECOCREADOR);\n        return entidadEcocreador;\n    }\n", "    public DtoEcocreadorResponse entidadADtoEcocreador(Ecocreador entidadEcocreador) {\n\n        DtoEcocreadorResponse dtoEcocreadorResponse = new DtoEcocreadorResponse();\n        dtoEcocreadorResponse.setId(entidadEcocreador.getId());\n        dtoEcocreadorResponse.setFirstName(entidadEcocreador.getNombre());\n        dtoEcocreadorResponse.setLastName(entidadEcocreador.getApellido());\n        dtoEcocreadorResponse.setImage(entidadEcocreador.getFoto());\n        dtoEcocreadorResponse.setOccupation(entidadEcocreador.getOcupacion());\n        dtoEcocreadorResponse.setEmail(entidadEcocreador.getEmail());\n        dtoEcocreadorResponse.setRol(entidadEcocreador.getRol().name());\n        return dtoEcocreadorResponse;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/mapper/ProductoMapper.java", "chunked_list": ["package com.upCycle.mapper;\n\nimport com.upCycle.dto.request.DtoProducto;\nimport com.upCycle.dto.response.DtoProductoResponse;\nimport com.upCycle.entity.Producto;\nimport com.upCycle.service.UbicacionService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.List;\n@Component\npublic class ProductoMapper {\n\n\n    public Producto DtoAentidadProducto(DtoProducto dtoProducto){\n\n        Producto entidadProducto = new Producto();\n        entidadProducto.setDescripcion(dtoProducto.getDescription());\n        entidadProducto.setPeso(dtoProducto.getKilograms());\n        entidadProducto.setImagen(dtoProducto.getImage());\n        entidadProducto.setEcoproveedor(null);\n        entidadProducto.setMaterial(entidadProducto.materialMapper(dtoProducto.getMaterial()));\n        entidadProducto.setUbicacion(null);\n        return entidadProducto;\n    }", "    public DtoProductoResponse entidadADtoProducto(Producto entidadProduto){\n\n        DtoProductoResponse dtoProducto = new DtoProductoResponse();\n        dtoProducto.setId(entidadProduto.getId());\n        dtoProducto.setDescription(entidadProduto.getDescripcion());\n        dtoProducto.setKilograms(entidadProduto.getPeso());\n        dtoProducto.setImage(entidadProduto.getImagen());\n        dtoProducto.setMaterial(entidadProduto.getMaterial().name());\n        dtoProducto.setLocation(entidadProduto.getUbicacion().getNombre());\n        return dtoProducto;\n    }\n\n    public List<DtoProductoResponse> entidadProductoListADtoList(List<Producto> entidadListProductos) {\n        List<DtoProductoResponse> listaDtoProductos = new ArrayList<>();\n", "        if(entidadListProductos.size() == 0){\n            return listaDtoProductos;\n        }\n        for (Producto entidad: entidadListProductos) {\n            listaDtoProductos.add(entidadADtoProducto(entidad));\n        }\n        return listaDtoProductos;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/filter/DtoEcoproveedorFilter.java", "chunked_list": ["package com.upCycle.dto.filter;\n\nimport com.upCycle.dto.response.DtoUsuarioResponse;\n\npublic class DtoEcoproveedorFilter extends DtoUsuarioResponse {\n\n    private String companyName;\n    private String cuit;\n    private String logoImage;\n    private int points;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/filter/DtoListProductoResponse.java", "chunked_list": ["package com.upCycle.dto.filter;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoListProductoResponse {\n\n    private Long id;\n\n    private String description;\n\n    private String material;\n\n    private Double kilograms;\n\n    private String location;\n\n    private String image;\n\n    private String companyName;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/response/DtoProductoResponse.java", "chunked_list": ["package com.upCycle.dto.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoProductoResponse {\n\n    private Long id;\n\n    private String description;\n\n    private String material;\n\n    private Double kilograms;\n\n    private String location;\n\n    private String image;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/response/DtoUsuarioResponse.java", "chunked_list": ["package com.upCycle.dto.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoUsuarioResponse {\n\n    private Long id;\n    private String firstName;\n    private String lastName;\n    private String email;\n    private String rol;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/response/DtoEcoproveedorResponse.java", "chunked_list": ["package com.upCycle.dto.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter", "\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoEcoproveedorResponse extends DtoUsuarioResponse {\n\n    private String companyName;\n    private String cuit;\n    private String logoImage;\n    private int points;\n    private String rol;\n    private List<DtoProductoResponse> listaProductos;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/response/DtoEcocreadorResponse.java", "chunked_list": ["package com.upCycle.dto.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoEcocreadorResponse extends DtoUsuarioResponse {\n\n    private String occupation;\n    private String image;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/request/DtoUsuario.java", "chunked_list": ["package com.upCycle.dto.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoUsuario {\n\n    private String email;\n    private String password;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/request/DtoEcocreador.java", "chunked_list": ["package com.upCycle.dto.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoEcocreador {\n\n    private String firstName;\n    private String lastName;\n    private String occupation;\n    private String image;\n    private String email;\n    private String password;\n    private String password2;\n    private String rol;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/request/DtoProducto.java", "chunked_list": ["package com.upCycle.dto.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor", "@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoProducto {\n\n    private String description;\n\n    private String material;\n\n    private Double kilograms;\n\n    private String location;\n\n    private String image;\n\n    private Long idEcoproveedor;\n}\n"]}
{"filename": "backend/src/main/java/com/upCycle/dto/request/DtoEcoproveedor.java", "chunked_list": ["package com.upCycle.dto.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter", "\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DtoEcoproveedor {\n\n    private String firstName;\n    private String lastName;\n    private String companyName;\n    private String cuit;\n    private String logoImage;\n    private String email;\n    private String password;\n    private String password2;\n    private String rol;\n    private List<DtoProducto> products;\n}\n"]}
