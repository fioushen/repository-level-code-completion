{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunPushMessageReceiver.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport com.alibaba.sdk.android.push.MessageReceiver;\nimport com.alibaba.sdk.android.push.notification.CPushMessage;\nimport com.alibaba.sdk.android.push.notification.NotificationConfigure;\nimport com.alibaba.sdk.android.push.notification.PushData;", "import com.alibaba.sdk.android.push.notification.NotificationConfigure;\nimport com.alibaba.sdk.android.push.notification.PushData;\n\nimport android.app.Notification;\nimport android.content.Context;\nimport androidx.core.app.NotificationCompat;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.WritableNativeMap;\nimport org.json.JSONException;\nimport org.json.JSONObject;", "import org.json.JSONException;\nimport org.json.JSONObject;\n\n/**\n * @author wangyun\n * @date 2023/1/12\n */\n\npublic class AliyunPushMessageReceiver extends MessageReceiver {\n\n\t// \u6d88\u606f\u63a5\u6536\u90e8\u5206\u7684LOG_TAG", "public class AliyunPushMessageReceiver extends MessageReceiver {\n\n\t// \u6d88\u606f\u63a5\u6536\u90e8\u5206\u7684LOG_TAG\n\tpublic static final String REC_TAG = \"MPS:receiver\";\n\n\t@Override\n\tpublic NotificationConfigure hookNotificationBuild() {\n\t\treturn new NotificationConfigure() {\n\t\t\t@Override\n\t\t\tpublic void configBuilder(Notification.Builder builder, PushData pushData) {\n\t\t\t\tAliyunPushLog.e(REC_TAG, \"configBuilder\");\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void configBuilder(Notification.Builder builder, PushData pushData) {\n\t\t\t\tAliyunPushLog.e(REC_TAG, \"configBuilder\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void configBuilder(NotificationCompat.Builder builder, PushData pushData) {\n\t\t\t\tAliyunPushLog.e(REC_TAG, \"configBuilder\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void configNotification(Notification notification, PushData pushData) {\n\t\t\t\tAliyunPushLog.e(REC_TAG, \"configNotification\");\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override", "\t\t\tpublic void configNotification(Notification notification, PushData pushData) {\n\t\t\t\tAliyunPushLog.e(REC_TAG, \"configNotification\");\n\t\t\t}\n\t\t};\n\t}\n\n\t@Override\n\tpublic boolean showNotificationNow(Context context, Map<String, String> map) {\n\t\tfor (Map.Entry<String, String> entry : map.entrySet()) {\n\t\t\tAliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());\n\t\t}\n\n\t\treturn super.showNotificationNow(context, map);\n\t}\n\n\t/**\n\t * \u63a8\u9001\u901a\u77e5\u7684\u56de\u8c03\u65b9\u6cd5\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t */\n\t@Override", "\t\tfor (Map.Entry<String, String> entry : map.entrySet()) {\n\t\t\tAliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());\n\t\t}\n\n\t\treturn super.showNotificationNow(context, map);\n\t}\n\n\t/**\n\t * \u63a8\u9001\u901a\u77e5\u7684\u56de\u8c03\u65b9\u6cd5\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t */\n\t@Override", "\tpublic void onNotification(Context context, String title, String summary,\n\t\t\t\t\t\t\t   Map<String, String> extraMap) {\n\n\t\tWritableMap writableMap = new WritableNativeMap();\n\t\twritableMap.putString(\"title\", title);\n\t\twritableMap.putString(\"summary\", summary);\n\t\ttry {\n\t\t\tif (extraMap != null && !extraMap.isEmpty()) {\n\t\t\t\tJSONObject extra = new JSONObject();\n\t\t\t\tfor (Entry<String, String> entry: extraMap.entrySet()) {\n\t\t\t\t\textra.put(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t\twritableMap.putString(\"extra\", extra.toString());\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tAliyunPushEventSender.sendEvent(\"onNotification\", writableMap);\n\t}\n\n\t/**\n\t * \u5e94\u7528\u5904\u4e8e\u524d\u53f0\u65f6\u901a\u77e5\u5230\u8fbe\u56de\u8c03\u3002\u6ce8\u610f:\u8be5\u65b9\u6cd5\u4ec5\u5bf9\u81ea\u5b9a\u4e49\u6837\u5f0f\u901a\u77e5\u6709\u6548,\u76f8\u5173\u8be6\u60c5\u8bf7\u53c2\u8003https://help.aliyun.com/document_detail/30066\n\t * .html?spm=5176.product30047.6.620.wjcC87#h3-3-4-basiccustompushnotification-api\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t * @param openType\n\t * @param openActivity\n\t * @param openUrl\n\t */\n\t@Override\n\tprotected void onNotificationReceivedInApp(Context context, String title, String summary,\n\t\t\t\t\t\t\t\t\t\t\t   Map<String, String> extraMap, int openType,\n\t\t\t\t\t\t\t\t\t\t\t   String openActivity, String openUrl) {\n\t\tWritableMap writableMap = new WritableNativeMap();", "\t\t\t\tfor (Entry<String, String> entry: extraMap.entrySet()) {\n\t\t\t\t\textra.put(entry.getKey(), entry.getValue());\n\t\t\t\t}\n\t\t\t\twritableMap.putString(\"extra\", extra.toString());\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tAliyunPushEventSender.sendEvent(\"onNotification\", writableMap);\n\t}\n\n\t/**\n\t * \u5e94\u7528\u5904\u4e8e\u524d\u53f0\u65f6\u901a\u77e5\u5230\u8fbe\u56de\u8c03\u3002\u6ce8\u610f:\u8be5\u65b9\u6cd5\u4ec5\u5bf9\u81ea\u5b9a\u4e49\u6837\u5f0f\u901a\u77e5\u6709\u6548,\u76f8\u5173\u8be6\u60c5\u8bf7\u53c2\u8003https://help.aliyun.com/document_detail/30066\n\t * .html?spm=5176.product30047.6.620.wjcC87#h3-3-4-basiccustompushnotification-api\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t * @param openType\n\t * @param openActivity\n\t * @param openUrl\n\t */\n\t@Override\n\tprotected void onNotificationReceivedInApp(Context context, String title, String summary,\n\t\t\t\t\t\t\t\t\t\t\t   Map<String, String> extraMap, int openType,\n\t\t\t\t\t\t\t\t\t\t\t   String openActivity, String openUrl) {\n\t\tWritableMap writableMap = new WritableNativeMap();", "\t\tif (extraMap != null && !extraMap.isEmpty()) {\n\t\t\tfor (Entry<String, String> entry: extraMap.entrySet()) {\n\t\t\t\twritableMap.putString(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t\twritableMap.putString(\"title\", title);\n\t\twritableMap.putString(\"summary\", summary);\n\t\twritableMap.putString(\"openType\", openType + \"\");\n\t\twritableMap.putString(\"openActivity\", openActivity);\n\t\twritableMap.putString(\"openUrl\", openUrl);\n\t\tAliyunPushEventSender.sendEvent(\"onNotificationReceivedInApp\", writableMap);\n\t}\n\n\t/**\n\t * \u63a8\u9001\u6d88\u606f\u7684\u56de\u8c03\u65b9\u6cd5\n\t *\n\t * @param context\n\t * @param cPushMessage\n\t */\n\t@Override", "\tpublic void onMessage(Context context, CPushMessage cPushMessage) {\n\t\tWritableMap writableMap = new WritableNativeMap();\n\t\twritableMap.putString(\"title\", cPushMessage.getTitle());\n\t\twritableMap.putString(\"content\", cPushMessage.getContent());\n\t\twritableMap.putString(\"msgId\", cPushMessage.getMessageId());\n\t\twritableMap.putString(\"appId\", cPushMessage.getAppId());\n\t\twritableMap.putString(\"traceInfo\", cPushMessage.getTraceInfo());\n\t\tAliyunPushEventSender.sendEvent(\"onMessage\", writableMap);\n\t}\n\n\t/**\n\t * \u4ece\u901a\u77e5\u680f\u6253\u5f00\u901a\u77e5\u7684\u6269\u5c55\u5904\u7406\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t */\n\t@Override", "\tpublic void onNotificationOpened(Context context, String title, String summary,\n\t\t\t\t\t\t\t\t\t String extraMap) {\n\t\tWritableMap writableMap = new WritableNativeMap();\n\t\twritableMap.putString(\"title\", title);\n\t\twritableMap.putString(\"summary\", summary);\n\t\twritableMap.putString(\"extra\", extraMap);\n\t\tAliyunPushEventSender.sendEvent(\"onNotificationOpened\", writableMap);\n\t}\n\n\t/**\n\t * \u901a\u77e5\u5220\u9664\u56de\u8c03\n\t *\n\t * @param context\n\t * @param messageId\n\t */\n\t@Override", "\tpublic void onNotificationRemoved(Context context, String messageId) {\n\t\tWritableMap writableMap = new WritableNativeMap();\n\t\twritableMap.putString(\"msgId\", messageId);\n\t\tAliyunPushEventSender.sendEvent(\"onNotificationRemoved\", writableMap);\n\t}\n\n\t/**\n\t * \u65e0\u52a8\u4f5c\u901a\u77e5\u70b9\u51fb\u56de\u8c03\u3002\u5f53\u5728\u540e\u53f0\u6216\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u6307\u5b9a\u7684\u901a\u77e5\u52a8\u4f5c\u4e3a\u65e0\u903b\u8f91\u8df3\u8f6c\u65f6,\n\t * \u901a\u77e5\u70b9\u51fb\u56de\u8c03\u4e3aonNotificationClickedWithNoAction\u800c\u4e0d\u662fonNotificationOpened\n\t *\n\t * @param context\n\t * @param title\n\t * @param summary\n\t * @param extraMap\n\t */\n\t@Override\n\tprotected void onNotificationClickedWithNoAction(Context context, String title, String summary\n\t\t, String extraMap) {\n\t\tWritableMap writableMap = new WritableNativeMap();\n\t\twritableMap.putString(\"title\", title);\n\t\twritableMap.putString(\"summary\", summary);\n\t\twritableMap.putString(\"extra\", extraMap);\n\t\tAliyunPushEventSender.sendEvent(\"onNotificationClickedWithNoAction\", writableMap);\n\t}\n}"]}
{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunPushLog.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport android.util.Log;\n\n/**\n * @author wangyun\n * @date 2023/1/18\n */\npublic class AliyunPushLog {\n   private static boolean sLogEnabled = false;\n", "public class AliyunPushLog {\n   private static boolean sLogEnabled = false;\n\n   public static boolean isLogEnabled() {\n      return sLogEnabled;\n   }\n\n   public static void setLogEnabled(boolean logEnabled) {\n      sLogEnabled = logEnabled;\n   }\n", "   public static void d(String tag, String msg) {\n      if (sLogEnabled) {\n         Log.d(tag, msg);\n      }\n   }\n\n   public static void e(String tag, String msg) {\n      if (sLogEnabled) {\n         Log.e(tag, msg);\n      }\n   }\n}\n"]}
{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunPushEventSender.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport android.util.Log;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\n\n/**\n * @author wangyun\n * @date 2023/3/3\n */\npublic class AliyunPushEventSender {", " * @date 2023/3/3\n */\npublic class AliyunPushEventSender {\n\tpublic static void sendEvent(String eventName, WritableMap params) {\n\t\ttry {\n\t\t\tif (AliyunPushModule.sReactContext != null) {\n\t\t\t\tAliyunPushModule.sReactContext.getJSModule(\n\t\t\t\t\tDeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(\"AliyunPush_\" + eventName, params);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tAliyunPushLog.e(\"AliyunPush\", Log.getStackTraceString(e));\n\t\t}\n\t}\n}\n"]}
{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunPushModule.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.alibaba.sdk.android.push.CloudPushService;\nimport com.alibaba.sdk.android.push.CommonCallback;\nimport com.alibaba.sdk.android.push.noonesdk.PushServiceFactory;\n", "import com.alibaba.sdk.android.push.noonesdk.PushServiceFactory;\n\nimport android.app.Activity;\nimport android.app.Application;\nimport android.app.NotificationChannel;\nimport android.app.NotificationChannelGroup;\nimport android.app.NotificationManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.media.AudioAttributes;", "import android.content.Intent;\nimport android.media.AudioAttributes;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Build.VERSION_CODES;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;", "import androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.NotificationManagerCompat;\nimport com.facebook.react.bridge.Promise;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;", "import com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.WritableNativeMap;\nimport com.facebook.react.module.annotations.ReactModule;\n\n@ReactModule(name = AliyunPushModule.NAME)\npublic class AliyunPushModule extends ReactContextBaseJavaModule {\n\tpublic static final String NAME = \"AliyunPush\";\n\n\tprivate static final String CODE_SUCCESS = \"10000\";\n\tprivate static final String CODE_PARAM_ILLEGAL = \"10001\";\n\tprivate static final String CODE_FAILED = \"10002\";\n\tprivate static final String CODE_NOT_SUPPORT = \"10005\";\n\n\tprivate static final String CODE_KEY = \"code\";\n\tprivate static final String ERROR_MSG_KEY = \"errorMsg\";\n\n\tprivate final Context mContext;\n", "\tpublic static final String NAME = \"AliyunPush\";\n\n\tprivate static final String CODE_SUCCESS = \"10000\";\n\tprivate static final String CODE_PARAM_ILLEGAL = \"10001\";\n\tprivate static final String CODE_FAILED = \"10002\";\n\tprivate static final String CODE_NOT_SUPPORT = \"10005\";\n\n\tprivate static final String CODE_KEY = \"code\";\n\tprivate static final String ERROR_MSG_KEY = \"errorMsg\";\n\n\tprivate final Context mContext;\n", "\tpublic static ReactContext sReactContext;\n\n\tpublic AliyunPushModule(ReactApplicationContext reactContext) {\n\t\tsuper(reactContext);\n\t\tmContext = reactContext.getApplicationContext();\n\t\tsReactContext = reactContext;\n\t}\n\n\t@Override\n\tpublic void invalidate() {\n\t\tsuper.invalidate();\n\t\tsReactContext = null;\n\t}\n\n\t@Override\n\t@NonNull", "\tpublic void invalidate() {\n\t\tsuper.invalidate();\n\t\tsReactContext = null;\n\t}\n\n\t@Override\n\t@NonNull\n\tpublic String getName() {\n\t\treturn NAME;\n\t}\n\n\t@ReactMethod", "\tpublic void initPush(Promise promise) {\n\t\tPushServiceFactory.init(mContext);\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.setLogLevel(CloudPushService.LOG_DEBUG);\n\t\tpushService.register(mContext, new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tWritableMap result = new WritableNativeMap();\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onFailed(String errorCode, String errorMessage) {\n\t\t\t\tWritableMap result = new WritableNativeMap();\n\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMessage);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\t\t});\n\t\tpushService.turnOnPushChannel(new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String s) {\n\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onSuccess(String s) {\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailed(String s, String s1) {\n\n\t\t\t}\n\t\t});\n\t}\n\n\t@ReactMethod", "\tpublic void initThirdPush(Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tContext context = mContext.getApplicationContext();\n\t\tif (context instanceof Application) {\n\t\t\tApplication application = (Application) context;\n\t\t\tAliyunThirdPushUtils.registerHuaweiPush(application);\n\t\t\tAliyunThirdPushUtils.registerXiaoMiPush(application);\n\t\t\tAliyunThirdPushUtils.registerVivoPush(application);\n\t\t\tAliyunThirdPushUtils.registerOppoPush(application);\n\t\t\tAliyunThirdPushUtils.registerMeizuPush(application);\n\t\t\tAliyunThirdPushUtils.registerGCM(application);\n\t\t\tAliyunThirdPushUtils.registerHonorPush(application);\n\n\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t} else {\n\t\t\tresult.putString(CODE_KEY, CODE_FAILED);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"context is not Application\");\n\t\t}\n\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void closePushLog(Promise promise) {\n\t\tCloudPushService service = PushServiceFactory.getCloudPushService();\n\t\tservice.setLogLevel(CloudPushService.LOG_OFF);\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod\n\tpublic void getDeviceId(Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpromise.resolve(pushService.getDeviceId());\n\t}\n\n\t@ReactMethod", "\tpublic void getDeviceId(Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpromise.resolve(pushService.getDeviceId());\n\t}\n\n\t@ReactMethod\n\tpublic void setLogLevel(int level, Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.setLogLevel(level);\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void bindAccount(String account, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (TextUtils.isEmpty(account)) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"account can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.bindAccount(account, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod", "\tpublic void unbindAccount(Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.unbindAccount(new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\t@ReactMethod\n\tpublic void addAlias(String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();", "\tpublic void addAlias(String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (TextUtils.isEmpty(alias)) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"alias can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.addAlias(alias, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod", "\tpublic void removeAlias(String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (TextUtils.isEmpty(alias)) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"alias can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.removeAlias(alias, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod", "\tpublic void listAlias(Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.listAliases(new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tresult.putString(\"aliasList\", response);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\t@ReactMethod\n\tpublic void bindTag(ReadableArray tagsArr, int target, String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();", "\tpublic void bindTag(ReadableArray tagsArr, int target, String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (tagsArr == null) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t\treturn;\n\t\t}\n\t\tArrayList<Object> tags = tagsArr.toArrayList();\n\t\tif (tags.isEmpty()) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {", "\t\tif (tags.isEmpty()) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tif (target != 1 && target != 2 && target != 3) {\n\t\t\t\t// \u9ed8\u8ba4\u672c\u8bbe\u5907\n\t\t\t\ttarget = 1;\n\t\t\t}\n\t\t\tString[] tagsArray = new String[tags.size()];\n\t\t\tfor (int i = 0; i < tags.size(); i++) {\n\t\t\t\tString tag = (String)tags.get(i);\n\t\t\t\ttagsArray[i] = tag;\n\t\t\t}\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.bindTag(target, tagsArray, alias, new CommonCallback() {\n\t\t\t\t@Override", "\t\t\tfor (int i = 0; i < tags.size(); i++) {\n\t\t\t\tString tag = (String)tags.get(i);\n\t\t\t\ttagsArray[i] = tag;\n\t\t\t}\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.bindTag(target, tagsArray, alias, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod\n\tpublic void unbindTag(ReadableArray tagsArr, int target, String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();", "\tpublic void unbindTag(ReadableArray tagsArr, int target, String alias, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (tagsArr == null) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t\treturn;\n\t\t}\n\t\tArrayList<Object> tags = tagsArr.toArrayList();\n\t\tif (tags.isEmpty()) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {", "\t\tif (tags.isEmpty()) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"tags can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tif (target != 1 && target != 2 && target != 3) {\n\t\t\t\t// \u9ed8\u8ba4\u672c\u8bbe\u5907\n\t\t\t\ttarget = 1;\n\t\t\t}\n\t\t\tString[] tagsArray = new String[tags.size()];\n\t\t\tfor (int i = 0; i < tags.size(); i++) {\n\t\t\t\tString tag = (String)tags.get(i);\n\t\t\t\ttagsArray[i] = tag;\n\t\t\t}\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.unbindTag(target, tagsArray, alias, new CommonCallback() {\n\t\t\t\t@Override", "\t\t\tfor (int i = 0; i < tags.size(); i++) {\n\t\t\t\tString tag = (String)tags.get(i);\n\t\t\t\ttagsArray[i] = tag;\n\t\t\t}\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.unbindTag(target, tagsArray, alias, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod\n\tpublic void listTags(int target, Promise promise) {", "\tpublic void listTags(int target, Promise promise) {\n\t\tif (target != 1 && target != 2 && target != 3) {\n\t\t\t// \u9ed8\u8ba4\u672c\u8bbe\u5907\n\t\t\ttarget = 1;\n\t\t}\n\t\tWritableMap result = new WritableNativeMap();\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.listTags(target, new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tresult.putString(\"tagsList\", response);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tresult.putString(\"tagsList\", response);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\t@ReactMethod", "\tpublic void bindPhoneNumber(String phone, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (TextUtils.isEmpty(phone)) {\n\t\t\tresult.putString(CODE_KEY, CODE_PARAM_ILLEGAL);\n\t\t\tresult.putString(ERROR_MSG_KEY, \"phone number can not be empty\");\n\t\t\tpromise.resolve(result);\n\t\t} else {\n\t\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\t\tpushService.bindPhoneNumber(phone, new CommonCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override", "\t\t\t\tpublic void onSuccess(String response) {\n\t\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\t\tpromise.resolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t@ReactMethod", "\tpublic void unbindPhoneNumber(Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.unbindPhoneNumber(new CommonCallback() {\n\t\t\t@Override\n\t\t\tpublic void onSuccess(String response) {\n\t\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onFailed(String errorCode, String errorMsg) {\n\t\t\t\tresult.putString(CODE_KEY, errorCode);\n\t\t\t\tresult.putString(ERROR_MSG_KEY, errorMsg);\n\t\t\t\tpromise.resolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\t@ReactMethod\n\tpublic void setNotificationInGroup(boolean inGroup, Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.setNotificationShowInGroup(inGroup);\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void setNotificationInGroup(boolean inGroup, Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.setNotificationShowInGroup(inGroup);\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod\n\tpublic void clearNotifications(Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.clearNotifications();\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void clearNotifications(Promise promise) {\n\t\tfinal CloudPushService pushService = PushServiceFactory.getCloudPushService();\n\t\tpushService.clearNotifications();\n\t\tWritableMap result = new WritableNativeMap();\n\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod\n\tpublic void createChannel(ReadableMap params, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();", "\tpublic void createChannel(ReadableMap params, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\n\t\t\tString id = params.getString(\"id\");\n\t\t\tString name = params.getString(\"name\");\n\t\t\tint importance = params.getInt(\"importance\");\n\t\t\tString desc = params.getString(\"desc\");\n\t\t\tString groupId = null;\n\t\t\tif (params.hasKey(\"groupId\")) {\n\t\t\t\tgroupId = params.getString(\"groupId\");\n\t\t\t}\n\t\t\tboolean allowBubbles = false;", "\t\t\tif (params.hasKey(\"groupId\")) {\n\t\t\t\tgroupId = params.getString(\"groupId\");\n\t\t\t}\n\t\t\tboolean allowBubbles = false;\n\t\t\tif (params.hasKey(\"allowBubbles\")) {\n\t\t\t\tallowBubbles = params.getBoolean(\"allowBubbles\");\n\t\t\t}\n\t\t\tboolean light = false;\n\t\t\tif (params.hasKey(\"light\")) {\n\t\t\t\tlight = params.getBoolean(\"light\");\n\t\t\t}\n\n\t\t\tint color = -1;", "\t\t\tif (params.hasKey(\"light\")) {\n\t\t\t\tlight = params.getBoolean(\"light\");\n\t\t\t}\n\n\t\t\tint color = -1;\n\t\t\tif (params.hasKey(\"lightColor\")) {\n\t\t\t\tcolor = params.getInt(\"lightColor\");\n\t\t\t}\n\t\t\tboolean showBadge = false;\n\t\t\tif (params.hasKey(\"showBadge\")) {\n\t\t\t\tshowBadge = params.getBoolean(\"showBadge\");\n\t\t\t}\n\t\t\tString soundPath = null;", "\t\t\tif (params.hasKey(\"showBadge\")) {\n\t\t\t\tshowBadge = params.getBoolean(\"showBadge\");\n\t\t\t}\n\t\t\tString soundPath = null;\n\t\t\tif (params.hasKey(\"soundPath\")) {\n\t\t\t\tsoundPath = params.getString(\"soundPath\");\n\t\t\t}\n\n\t\t\tint soundUsage = AudioAttributes.USAGE_UNKNOWN;\n\t\t\tif (params.hasKey(\"soundUsage\")) {\n\t\t\t\tsoundUsage = params.getInt(\"soundUsage\");\n\t\t\t}\n\t\t\tint soundContentType = AudioAttributes.CONTENT_TYPE_UNKNOWN;", "\t\t\tif (params.hasKey(\"soundUsage\")) {\n\t\t\t\tsoundUsage = params.getInt(\"soundUsage\");\n\t\t\t}\n\t\t\tint soundContentType = AudioAttributes.CONTENT_TYPE_UNKNOWN;\n\t\t\tif (params.hasKey(\"soundContentType\")) {\n\t\t\t\tsoundContentType = params.getInt(\"soundContentType\");\n\t\t\t}\n\t\t\tint soundFlag = AudioAttributes.FLAG_LOW_LATENCY;\n\t\t\tif (params.hasKey(\"soundFlag\")) {\n\t\t\t\tsoundFlag = params.getInt(\"soundFlag\");\n\t\t\t}\n\t\t\tboolean vibration = false;", "\t\t\tif (params.hasKey(\"soundFlag\")) {\n\t\t\t\tsoundFlag = params.getInt(\"soundFlag\");\n\t\t\t}\n\t\t\tboolean vibration = false;\n\t\t\tif (params.hasKey(\"vibration\")) {\n\t\t\t\tvibration = params.getBoolean(\"vibration\");\n\t\t\t}\n\t\t\tlong[] vibrationPatterns = null;\n\t\t\tif (params.hasKey(\"vibrationPattern\")) {\n\t\t\t\tReadableArray readableArray = params.getArray(\"vibrationPattern\");\n\t\t\t\tif (readableArray != null) {\n\t\t\t\t\tvibrationPatterns = new long[readableArray.size()];", "\t\t\tif (params.hasKey(\"vibrationPattern\")) {\n\t\t\t\tReadableArray readableArray = params.getArray(\"vibrationPattern\");\n\t\t\t\tif (readableArray != null) {\n\t\t\t\t\tvibrationPatterns = new long[readableArray.size()];\n\t\t\t\t\tif (readableArray.size() != 0) {\n\t\t\t\t\t\tfor (int i = 0; i < readableArray.size(); i++) {\n\t\t\t\t\t\t\tdouble pattern = readableArray.getDouble(i);\n\t\t\t\t\t\t\tvibrationPatterns[i] = Math.round(pattern);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tNotificationManager notificationManager = (NotificationManager) mContext\n\t\t\t\t\t.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tNotificationChannel channel = new NotificationChannel(id, name, importance);\n\t\t\tchannel.setDescription(desc);", "\t\t\tif (groupId != null) {\n\t\t\t\tchannel.setGroup(groupId);\n\t\t\t}\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n\t\t\t\tchannel.setAllowBubbles(allowBubbles);\n\t\t\t}\n\t\t\tchannel.enableLights(light);\n\t\t\tif (color != -1) {\n\t\t\t\tchannel.setLightColor(color);\n\t\t\t}\n\t\t\tchannel.setShowBadge(showBadge);", "\t\t\tif (!TextUtils.isEmpty(soundPath)) {\n\t\t\t\tFile file = new File(soundPath);\n\t\t\t\tif (file.exists() && file.canRead() && file.isFile()) {\n\t\t\t\t\tif (soundUsage < 0) {\n\t\t\t\t\t\tchannel.setSound(Uri.fromFile(file), null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAudioAttributes.Builder builder = new AudioAttributes.Builder()\n\t\t\t\t\t\t\t\t.setUsage(soundUsage);\n\t\t\t\t\t\tbuilder.setContentType(soundContentType);\n\t\t\t\t\t\tbuilder.setFlags(soundFlag);\n\t\t\t\t\t\tchannel.setSound(Uri.fromFile(file), builder.build());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchannel.enableVibration(vibration);", "\t\t\tif (vibrationPatterns != null && vibrationPatterns.length > 0) {\n\t\t\t\tchannel.setVibrationPattern(vibrationPatterns);\n\t\t\t}\n\t\t\tnotificationManager.createNotificationChannel(channel);\n\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\n\t\t} else {\n\t\t\tresult.putString(CODE_KEY, CODE_NOT_SUPPORT);\n\t\t\tresult.putString(ERROR_MSG_KEY,\n\t\t\t\t\t\"Android version is below Android O which is not support create channel\");\n\t\t}\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void createGroup(String id, String name, String desc, Promise promise) {\n\t\tWritableMap result = new WritableNativeMap();\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\n\t\t\tNotificationManager notificationManager = (NotificationManager) mContext\n\t\t\t\t\t.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tNotificationChannelGroup group = new NotificationChannelGroup(id, name);\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n\t\t\t\tgroup.setDescription(desc);\n\t\t\t}\n\t\t\tnotificationManager.createNotificationChannelGroup(group);\n\t\t\tresult.putString(CODE_KEY, CODE_SUCCESS);\n\t\t} else {\n\t\t\tresult.putString(CODE_KEY, CODE_NOT_SUPPORT);\n\t\t\tresult.putString(ERROR_MSG_KEY,\n\t\t\t\t\t\"Android version is below Android O which is not support create group\");\n\t\t}\n\t\tpromise.resolve(result);\n\t}\n\n\t@ReactMethod", "\tpublic void isNotificationEnabled(String id, Promise promise) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\t\tNotificationManager manager = (NotificationManager) mContext.getSystemService(\n\t\t\t\t\tContext.NOTIFICATION_SERVICE);\n\t\t\tif (!manager.areNotificationsEnabled()) {\n\t\t\t\tpromise.resolve(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (id == null) {\n\t\t\t\tpromise.resolve(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<NotificationChannel> channels = manager.getNotificationChannels();", "\t\t\tif (id == null) {\n\t\t\t\tpromise.resolve(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<NotificationChannel> channels = manager.getNotificationChannels();\n\t\t\tfor (NotificationChannel channel : channels) {\n\t\t\t\tif (channel.getId().equals(id)) {\n\t\t\t\t\tif (channel.getImportance() == NotificationManager.IMPORTANCE_NONE) {\n\t\t\t\t\t\tpromise.resolve(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {", "\t\t\t\t\t\tif (channel.getGroup() != null) {\n\t\t\t\t\t\t\tif (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.P) {\n\t\t\t\t\t\t\t\tNotificationChannelGroup group = manager\n\t\t\t\t\t\t\t\t\t\t.getNotificationChannelGroup(channel.getGroup());\n\t\t\t\t\t\t\t\tpromise.resolve(!group.isBlocked());\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromise.resolve(true);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// channel \u672a\u5b9a\u4e49\uff0c\u8fd4\u56defalse\n\t\t\tpromise.resolve(false);\n\t\t} else {\n\t\t\tpromise.resolve(NotificationManagerCompat.from(mContext).areNotificationsEnabled());\n\t\t}\n\t}\n\n\t@RequiresApi(api = VERSION_CODES.O)\n\t@ReactMethod", "\tpublic void jumpToNotificationSettings(String id) {\n\t\tIntent intent;\n\t\tif (id != null) {\n\t\t\tintent = new Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);\n\t\t\tintent.putExtra(Settings.EXTRA_APP_PACKAGE, mContext.getPackageName());\n\t\t\tintent.putExtra(Settings.EXTRA_CHANNEL_ID, id);\n\t\t} else {\n\t\t\t// \u8df3\u8f6c\u5230\u5e94\u7528\u7684\u901a\u77e5\u8bbe\u7f6e\u754c\u9762\n\t\t\tintent = new Intent(Settings.ACTION_APP_NOTIFICATION_SETTINGS);\n\t\t\tintent.putExtra(Settings.EXTRA_APP_PACKAGE, mContext.getPackageName());\n\t\t}", "\t\tif (!(mContext instanceof Activity)) {\n\t\t\tintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t}\n\t\tmContext.startActivity(intent);\n\t}\n\n\t@ReactMethod\n\tpublic void setPluginLogEnabled(boolean enabled) {\n\t\tAliyunPushLog.setLogEnabled(enabled);\n\t}\n}\n"]}
{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunPushPackage.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport androidx.annotation.NonNull;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;", "import com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\n\npublic class AliyunPushPackage implements ReactPackage {\n\n\t@NonNull\n\t@Override\n\tpublic List<NativeModule> createNativeModules(@NonNull ReactApplicationContext reactContext) {\n\t\tList<NativeModule> modules = new ArrayList<>();\n\t\tmodules.add(new AliyunPushModule(reactContext));\n\t\treturn modules;\n\t}\n\n\t@NonNull\n\t@Override\n\tpublic List<ViewManager> createViewManagers(@NonNull ReactApplicationContext reactContext) {\n\t\treturn Collections.emptyList();\n\t}\n}\n"]}
{"filename": "android/src/main/java/com/aliyun/ams/push/AliyunThirdPushUtils.java", "chunked_list": ["package com.aliyun.ams.push;\n\nimport com.alibaba.sdk.android.push.HonorRegister;\nimport com.alibaba.sdk.android.push.huawei.HuaWeiRegister;\nimport com.alibaba.sdk.android.push.register.GcmRegister;\nimport com.alibaba.sdk.android.push.register.MeizuRegister;\nimport com.alibaba.sdk.android.push.register.MiPushRegister;\nimport com.alibaba.sdk.android.push.register.OppoRegister;\nimport com.alibaba.sdk.android.push.register.VivoRegister;\n", "import com.alibaba.sdk.android.push.register.VivoRegister;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageManager;\n\n/**\n * @author wangyun\n * @date 2023/1/13", " * @author wangyun\n * @date 2023/1/13\n */\npublic class AliyunThirdPushUtils {\n\n\tprivate static String getAppMetaDataWithId(Context context, String key) {\n\t\tString value = getAppMetaData(context, key);\n\t\tif (value != null && value.startsWith(\"id=\")) {\n\t\t\treturn value.replace(\"id=\", \"\");\n\t\t}\n\t\treturn value;\n\t}\n", "\tpublic static String getAppMetaData(Context context, String key) {\n\t\ttry {\n\t\t\tfinal PackageManager packageManager = context.getPackageManager();\n\t\t\tfinal String packageName = context.getPackageName();\n\t\t\tApplicationInfo info = packageManager.getApplicationInfo(packageName,\n\t\t\t\tPackageManager.GET_META_DATA);\n\t\t\tif (info != null && info.metaData != null && info.metaData.containsKey(key)) {\n\t\t\t\treturn String.valueOf(info.metaData.get(key));\n\t\t\t}\n\t\t} catch (PackageManager.NameNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n", "\tpublic static void registerGCM(Application application) {\n\t\tString sendId = getGCMSendId(application);\n\t\tString applicationId = getGCMApplicationId(application);\n\t\tString projectId = getGCMProjectId(application);\n\t\tString apiKey = getGCMApiKey(application);\n\n\t\tif (sendId != null && applicationId != null && projectId != null && apiKey != null) {\n\t\t\tGcmRegister.register(application, sendId, applicationId, projectId, apiKey);\n\t\t}\n\t}\n\n\tprivate static String getGCMSendId(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.gcm.push.sendid\");\n\t}\n\n\tprivate static String getGCMApplicationId(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.gcm.push.applicationid\");\n\t}\n\n\tprivate static String getGCMProjectId(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.gcm.push.projectid\");\n\t}\n\n\tprivate static String getGCMApiKey(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.gcm.push.api.key\");\n\t}\n", "\tpublic static void registerMeizuPush(Application application) {\n\t\tString meizuId = getMeizuPushId(application);\n\t\tString meizuKey = getMeizuPushKey(application);\n\n\t\tif (meizuId != null && meizuKey != null) {\n\t\t\tMeizuRegister.register(application, meizuId, meizuKey);\n\t\t}\n\t}\n\n\tprivate static String getMeizuPushId(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.meizu.push.id\");\n\t}\n\n\tprivate static String getMeizuPushKey(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.meizu.push.key\");\n\t}\n", "\tpublic static void registerOppoPush(Application application) {\n\t\tString oppoKey = getOppoPushKey(application);\n\t\tString oppoSecret = getOppoPushSecret(application);\n\n\t\tif (oppoKey != null && oppoSecret != null) {\n\t\t\tOppoRegister.register(application, oppoKey, oppoSecret);\n\t\t}\n\t}\n\n\tprivate static String getOppoPushKey(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.oppo.push.key\");\n\t}\n\n\tprivate static String getOppoPushSecret(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.oppo.push.secret\");\n\t}\n", "\tpublic static void registerXiaoMiPush(Application application) {\n\t\tString xiaoMiId = getXiaoMiId(application);\n\t\tString xiaoMiKey = getXiaoMiKey(application);\n\n\t\tif (xiaoMiId != null && xiaoMiKey != null) {\n\t\t\tMiPushRegister.register(application, xiaoMiId, xiaoMiKey);\n\t\t}\n\t}\n\n\tprivate static String getXiaoMiId(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.xiaomi.push.id\");\n\t}\n\n\tprivate static String getXiaoMiKey(Context context) {\n\t\treturn getAppMetaDataWithId(context, \"com.xiaomi.push.key\");\n\t}\n", "\tpublic static  void registerVivoPush(Application application) {\n\t\tString vivoApiKey = getVivoApiKey(application);\n\t\tString vivoAppId = getVivoAppId(application);\n\t\tif (vivoApiKey != null && vivoAppId != null) {\n\t\t\tVivoRegister.register(application);\n\t\t}\n\t}\n\n\tprivate static String getVivoApiKey(Context context) {\n\t\treturn getAppMetaData(context, \"com.vivo.push.api_key\");\n\t}\n\n\tprivate static String getVivoAppId(Context context) {\n\t\treturn getAppMetaData(context, \"com.vivo.push.app_id\");\n\t}\n\n", "\tpublic static void registerHuaweiPush(Application application) {\n\t\tString huaweiAppId = getHuaWeiAppId(application);\n\t\tif (huaweiAppId != null) {\n\t\t\tHuaWeiRegister.register(application);\n\t\t}\n\t}\n\n\tprivate static String getHuaWeiAppId(Context context) {\n\t\tString value = getAppMetaData(context, \"com.huawei.hms.client.appid\");\n\t\tif (value != null && value.startsWith(\"appid=\")) {\n\t\t\treturn value.replace(\"appid=\", \"\");\n\t\t}\n\t\treturn null;\n\t}\n", "\t\tif (value != null && value.startsWith(\"appid=\")) {\n\t\t\treturn value.replace(\"appid=\", \"\");\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void registerHonorPush(Application application) {\n\t\tString honorAppId = getHonorAppId(application);\n\t\tif (honorAppId != null) {\n\t\t\tHonorRegister.register(application);\n\t\t}\n\t}\n\n\tprivate static String getHonorAppId(Context context) {\n\t\treturn getAppMetaData(context, \"com.hihonor.push.app_id\");\n\t}\n}\n", "\t\tif (honorAppId != null) {\n\t\t\tHonorRegister.register(application);\n\t\t}\n\t}\n\n\tprivate static String getHonorAppId(Context context) {\n\t\treturn getAppMetaData(context, \"com.hihonor.push.app_id\");\n\t}\n}\n"]}
{"filename": "example/android/app/src/debug/java/com/aliyunreactnativepushexample/ReactNativeFlipper.java", "chunked_list": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * <p>This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n */\npackage com.aliyunreactnativepushexample;\n\nimport android.content.Context;\nimport com.facebook.flipper.android.AndroidFlipperClient;", "import android.content.Context;\nimport com.facebook.flipper.android.AndroidFlipperClient;\nimport com.facebook.flipper.android.utils.FlipperUtils;\nimport com.facebook.flipper.core.FlipperClient;\nimport com.facebook.flipper.plugins.crashreporter.CrashReporterPlugin;\nimport com.facebook.flipper.plugins.databases.DatabasesFlipperPlugin;\nimport com.facebook.flipper.plugins.fresco.FrescoFlipperPlugin;\nimport com.facebook.flipper.plugins.inspector.DescriptorMapping;\nimport com.facebook.flipper.plugins.inspector.InspectorFlipperPlugin;\nimport com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;", "import com.facebook.flipper.plugins.inspector.InspectorFlipperPlugin;\nimport com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;\nimport com.facebook.flipper.plugins.network.NetworkFlipperPlugin;\nimport com.facebook.flipper.plugins.sharedpreferences.SharedPreferencesFlipperPlugin;\nimport com.facebook.react.ReactInstanceEventListener;\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.modules.network.NetworkingModule;\nimport okhttp3.OkHttpClient;\n", "import okhttp3.OkHttpClient;\n\n/**\n * Class responsible of loading Flipper inside your React Native application. This is the debug\n * flavor of it. Here you can add your own plugins and customize the Flipper setup.\n */\npublic class ReactNativeFlipper {\n  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    if (FlipperUtils.shouldEnableFlipper(context)) {\n      final FlipperClient client = AndroidFlipperClient.getInstance(context);\n\n      client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));\n      client.addPlugin(new DatabasesFlipperPlugin(context));\n      client.addPlugin(new SharedPreferencesFlipperPlugin(context));\n      client.addPlugin(CrashReporterPlugin.getInstance());\n\n      NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();\n      NetworkingModule.setCustomClientBuilder(\n          new NetworkingModule.CustomClientBuilder() {\n            @Override", "    if (FlipperUtils.shouldEnableFlipper(context)) {\n      final FlipperClient client = AndroidFlipperClient.getInstance(context);\n\n      client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));\n      client.addPlugin(new DatabasesFlipperPlugin(context));\n      client.addPlugin(new SharedPreferencesFlipperPlugin(context));\n      client.addPlugin(CrashReporterPlugin.getInstance());\n\n      NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();\n      NetworkingModule.setCustomClientBuilder(\n          new NetworkingModule.CustomClientBuilder() {\n            @Override", "            public void apply(OkHttpClient.Builder builder) {\n              builder.addNetworkInterceptor(new FlipperOkhttpInterceptor(networkFlipperPlugin));\n            }\n          });\n      client.addPlugin(networkFlipperPlugin);\n      client.start();\n\n      // Fresco Plugin needs to ensure that ImagePipelineFactory is initialized\n      // Hence we run if after all native modules have been initialized\n      ReactContext reactContext = reactInstanceManager.getCurrentReactContext();\n      if (reactContext == null) {\n        reactInstanceManager.addReactInstanceEventListener(\n            new ReactInstanceEventListener() {\n              @Override", "      if (reactContext == null) {\n        reactInstanceManager.addReactInstanceEventListener(\n            new ReactInstanceEventListener() {\n              @Override\n              public void onReactContextInitialized(ReactContext reactContext) {\n                reactInstanceManager.removeReactInstanceEventListener(this);\n                reactContext.runOnNativeModulesQueueThread(\n                    new Runnable() {\n                      @Override\n                      public void run() {\n                        client.addPlugin(new FrescoFlipperPlugin());\n                      }\n                    });\n              }\n            });\n      } else {\n        client.addPlugin(new FrescoFlipperPlugin());\n      }\n    }\n  }\n}\n", "                      public void run() {\n                        client.addPlugin(new FrescoFlipperPlugin());\n                      }\n                    });\n              }\n            });\n      } else {\n        client.addPlugin(new FrescoFlipperPlugin());\n      }\n    }\n  }\n}\n"]}
{"filename": "example/android/app/src/main/java/com/aliyun/ams/push/example/MainActivity.java", "chunked_list": ["package com.aliyun.ams.push.example;\n\nimport android.os.Bundle;\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;\nimport com.facebook.react.defaults.DefaultReactActivityDelegate;\n\npublic class MainActivity extends ReactActivity {\n\n\t/**\n\t * Returns the name of the main component registered from JavaScript. This is used to schedule\n\t * rendering of the component.\n\t */\n\t@Override\n\tprotected String getMainComponentName() {\n\t\treturn \"AliyunReactNativePushExample\";\n\t}\n\n\t/**\n\t * Returns the instance of the {@link ReactActivityDelegate}. Here we use a util class {@link\n\t * DefaultReactActivityDelegate} which allows you to easily enable Fabric and Concurrent React\n\t * (aka React 18) with two boolean flags.\n\t */\n\t@Override\n\tprotected ReactActivityDelegate createReactActivityDelegate() {\n\t\treturn new DefaultReactActivityDelegate(\n\t\t\tthis,\n\t\t\tgetMainComponentName(),\n\t\t\t// If you opted-in for the New Architecture, we enable the Fabric Renderer.\n\t\t\tDefaultNewArchitectureEntryPoint.getFabricEnabled(), // fabricEnabled\n\t\t\t// If you opted-in for the New Architecture, we enable Concurrent React (i.e. React\n            // 18).\n\t\t\tDefaultNewArchitectureEntryPoint.getConcurrentReactEnabled() // concurrentRootEnabled\n\t\t);\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(null);\n\t}\n}\n", "public class MainActivity extends ReactActivity {\n\n\t/**\n\t * Returns the name of the main component registered from JavaScript. This is used to schedule\n\t * rendering of the component.\n\t */\n\t@Override\n\tprotected String getMainComponentName() {\n\t\treturn \"AliyunReactNativePushExample\";\n\t}\n\n\t/**\n\t * Returns the instance of the {@link ReactActivityDelegate}. Here we use a util class {@link\n\t * DefaultReactActivityDelegate} which allows you to easily enable Fabric and Concurrent React\n\t * (aka React 18) with two boolean flags.\n\t */\n\t@Override\n\tprotected ReactActivityDelegate createReactActivityDelegate() {\n\t\treturn new DefaultReactActivityDelegate(\n\t\t\tthis,\n\t\t\tgetMainComponentName(),\n\t\t\t// If you opted-in for the New Architecture, we enable the Fabric Renderer.\n\t\t\tDefaultNewArchitectureEntryPoint.getFabricEnabled(), // fabricEnabled\n\t\t\t// If you opted-in for the New Architecture, we enable Concurrent React (i.e. React\n            // 18).\n\t\t\tDefaultNewArchitectureEntryPoint.getConcurrentReactEnabled() // concurrentRootEnabled\n\t\t);\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(null);\n\t}\n}\n"]}
{"filename": "example/android/app/src/main/java/com/aliyun/ams/push/example/MainApplication.java", "chunked_list": ["package com.aliyun.ams.push.example;\n\nimport java.util.List;\n\nimport android.app.Application;\nimport com.aliyun.ams.push.AliyunPushPackage;\nimport com.aliyun.emas.pocdemo.BuildConfig;\nimport com.aliyunreactnativepushexample.ReactNativeFlipper;\nimport com.facebook.react.PackageList;\nimport com.facebook.react.ReactApplication;", "import com.facebook.react.PackageList;\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;\nimport com.facebook.react.defaults.DefaultReactNativeHost;\nimport com.facebook.soloader.SoLoader;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n\tprivate final ReactNativeHost mReactNativeHost =\n\t\tnew DefaultReactNativeHost(this) {\n\t\t\t@Override", "public class MainApplication extends Application implements ReactApplication {\n\n\tprivate final ReactNativeHost mReactNativeHost =\n\t\tnew DefaultReactNativeHost(this) {\n\t\t\t@Override\n\t\t\tpublic boolean getUseDeveloperSupport() {\n\t\t\t\treturn BuildConfig.DEBUG;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected List<ReactPackage> getPackages() {\n\t\t\t\t@SuppressWarnings(\"UnnecessaryLocalVariable\")\n\t\t\t\tList<ReactPackage> packages = new PackageList(this).getPackages();\n\t\t\t\t// Packages that cannot be autolinked yet can be added manually here, for example:\n\t\t\t\treturn packages;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected String getJSMainModuleName() {\n\t\t\t\treturn \"index\";\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected boolean isNewArchEnabled() {\n\t\t\t\treturn BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected Boolean isHermesEnabled() {\n\t\t\t\treturn BuildConfig.IS_HERMES_ENABLED;\n\t\t\t}\n\t\t};\n\n\t@Override", "\tpublic ReactNativeHost getReactNativeHost() {\n\t\treturn mReactNativeHost;\n\t}\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tSoLoader.init(this, /* native exopackage */ false);\n\t\tif (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n\t\t\t// If you opted-in for the New Architecture, we load the native entry point for this\n            // app.\n\t\t\tDefaultNewArchitectureEntryPoint.load();\n\t\t}\n\t\tReactNativeFlipper.initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n\t}\n}\n", "\t\tif (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n\t\t\t// If you opted-in for the New Architecture, we load the native entry point for this\n            // app.\n\t\t\tDefaultNewArchitectureEntryPoint.load();\n\t\t}\n\t\tReactNativeFlipper.initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n\t}\n}\n"]}
{"filename": "example/android/app/src/release/java/com/aliyunreactnativepushexample/ReactNativeFlipper.java", "chunked_list": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * <p>This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n */\npackage com.aliyunreactnativepushexample;\n\nimport android.content.Context;\nimport com.facebook.react.ReactInstanceManager;", "import android.content.Context;\nimport com.facebook.react.ReactInstanceManager;\n\n/**\n * Class responsible of loading Flipper inside your React Native application. This is the release\n * flavor of it so it's empty as we don't want to load Flipper.\n */\npublic class ReactNativeFlipper {\n  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    // Do nothing as we don't want to initialize Flipper on Release.\n  }\n}\n", "  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    // Do nothing as we don't want to initialize Flipper on Release.\n  }\n}\n"]}
