{"filename": "src/main/java/net/chauvedev/woodencog/WoodenCogEvents.java", "chunked_list": ["package net.chauvedev.woodencog;\n\nimport com.simibubi.create.content.kinetics.base.KineticBlock;\nimport com.simibubi.create.content.kinetics.base.KineticBlockEntity;\nimport net.chauvedev.woodencog.capability.MachineCapacity;\nimport net.chauvedev.woodencog.capability.MachineCapacityProvider;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.item.BlockItem;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemNameBlockItem;", "import net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemNameBlockItem;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.block.entity.BlockEntity;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.common.MinecraftForge;\nimport net.minecraftforge.common.capabilities.RegisterCapabilitiesEvent;\nimport net.minecraftforge.event.AttachCapabilitiesEvent;", "import net.minecraftforge.common.capabilities.RegisterCapabilitiesEvent;\nimport net.minecraftforge.event.AttachCapabilitiesEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\n\npublic class WoodenCogEvents {\n\n\n\n    @Mod.EventBusSubscriber(modid = WoodenCog.MOD_ID)\n    public static class ForgeEvents {\n\n        @SubscribeEvent", "    public static class ForgeEvents {\n\n        @SubscribeEvent\n        public static void onAttachCapabilitiesBlockEntity(AttachCapabilitiesEvent<BlockEntity> event) {\n\n            if (! event.getCapabilities().containsKey(MachineCapacityProvider.MACHINE_CAPACITY_KEY)){\n                try {\n                    if(event.getObject() instanceof KineticBlockEntity) {\n                        event.addCapability(MachineCapacityProvider.MACHINE_CAPACITY_KEY, new MachineCapacityProvider());\n                    }\n                }catch (Error error){\n                    WoodenCog.LOGGER.debug(\"-------ERROR---\");\n                    WoodenCog.LOGGER.error(\"Error found\",error);\n                }\n            }\n\n        }\n\n        @SubscribeEvent", "        public static void onAttachCapabilitiesItemStack(AttachCapabilitiesEvent<ItemStack> event) {\n\n\n            if (! event.getCapabilities().containsKey(MachineCapacityProvider.MACHINE_CAPACITY_KEY)){\n                try {\n                    if(event.getObject().getItem() instanceof BlockItem) {\n                        Block block = ((BlockItem) event.getObject().getItem()).getBlock();\n                        if (block instanceof KineticBlock){\n                            event.addCapability(MachineCapacityProvider.MACHINE_CAPACITY_KEY, new MachineCapacityProvider());\n                        }\n                    }\n                }catch (Error error){\n                    WoodenCog.LOGGER.debug(\"-------ERROR---\");\n                    WoodenCog.LOGGER.error(\"Error found\",error);\n                }\n            }\n\n\n        }\n\n        @SubscribeEvent", "        public static void onRegisterCapabilities(RegisterCapabilitiesEvent event) {\n            WoodenCog.LOGGER.debug(\"Register MachineCapacity\");\n            event.register(MachineCapacity.class);\n        }\n\n    }\n}\n\n\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/WoodenCog.java", "chunked_list": ["package net.chauvedev.woodencog;\n\nimport com.mojang.brigadier.CommandDispatcher;\nimport com.mojang.logging.LogUtils;\nimport com.simibubi.create.foundation.ponder.PonderRegistrationHelper;\nimport com.tterrag.registrate.Registrate;\nimport com.tterrag.registrate.util.entry.ItemEntry;\nimport net.chauvedev.woodencog.commands.WoodenCogCommand;\nimport net.chauvedev.woodencog.config.CustomBlockConfig;\nimport net.chauvedev.woodencog.config.WoodenCogCommonConfigs;", "import net.chauvedev.woodencog.config.CustomBlockConfig;\nimport net.chauvedev.woodencog.config.WoodenCogCommonConfigs;\nimport net.chauvedev.woodencog.core.MachineCapacityStorage;\nimport net.chauvedev.woodencog.interaction.CustomArmInteractionPointTypes;\nimport net.chauvedev.woodencog.item.ModItem;\nimport net.chauvedev.woodencog.item.fluids.can.FireclayCrucibleItem;\nimport net.chauvedev.woodencog.item.fluids.can.FireclayCrucibleModel;\nimport net.chauvedev.woodencog.ponder.Heating;\nimport net.minecraft.commands.CommandSourceStack;\nimport net.minecraft.resources.ResourceLocation;", "import net.minecraft.commands.CommandSourceStack;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.item.CreativeModeTab;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.client.model.ModelLoaderRegistry;\nimport net.minecraftforge.common.MinecraftForge;\nimport net.minecraftforge.event.RegisterCommandsEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;", "import net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;\nimport net.minecraftforge.fml.config.ModConfig;\nimport net.minecraftforge.fml.event.lifecycle.*;\nimport net.minecraftforge.event.server.ServerStartingEvent;\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\nimport net.minecraftforge.fml.loading.FMLEnvironment;\nimport net.minecraftforge.fml.loading.FMLPaths;\nimport org.slf4j.Logger;\n", "import org.slf4j.Logger;\n\nimport java.io.File;\n\n@Mod(WoodenCog.MOD_ID)\npublic class WoodenCog\n{\n    public static final String MOD_ID = \"woodencog\";\n    public static final Registrate REGISTRATE = Registrate.create(MOD_ID);\n    public static final Logger LOGGER = LogUtils.getLogger();\n    static final PonderRegistrationHelper PONDER_HELPER = new PonderRegistrationHelper(WoodenCog.MOD_ID);\n    final MachineCapacityStorage machineCapacityStorage;\n\n    public WoodenCog()\n    {\n        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::setup);\n        CustomArmInteractionPointTypes.registerAll();\n        MinecraftForge.EVENT_BUS.register(this);\n\n        CustomBlockConfig.init(new File(FMLPaths.CONFIGDIR.get().toString(), \"woodencog-custom-block.json\"));\n\n\n        CustomArmInteractionPointTypes.registerAll();\n\n        ItemEntry<FireclayCrucibleItem> FIRECLAY_CRUCIBLE_ITEM = WoodenCog.REGISTRATE.item(\"fireclay_crucible\", FireclayCrucibleItem::new)\n                .properties(properties -> properties.stacksTo(1))\n                .tab(() -> CreativeModeTab.TAB_TOOLS)\n                .register();\n\n        WoodenCog.REGISTRATE.item(\"unfired_fireclay_crucible\", ModItem::new)\n                .properties(properties -> properties.stacksTo(1))\n                .tab(() -> CreativeModeTab.TAB_TOOLS)\n                .register();\n\n        machineCapacityStorage = new MachineCapacityStorage();\n", "    public static final Registrate REGISTRATE = Registrate.create(MOD_ID);\n    public static final Logger LOGGER = LogUtils.getLogger();\n    static final PonderRegistrationHelper PONDER_HELPER = new PonderRegistrationHelper(WoodenCog.MOD_ID);\n    final MachineCapacityStorage machineCapacityStorage;\n\n    public WoodenCog()\n    {\n        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::setup);\n        CustomArmInteractionPointTypes.registerAll();\n        MinecraftForge.EVENT_BUS.register(this);\n\n        CustomBlockConfig.init(new File(FMLPaths.CONFIGDIR.get().toString(), \"woodencog-custom-block.json\"));\n\n\n        CustomArmInteractionPointTypes.registerAll();\n\n        ItemEntry<FireclayCrucibleItem> FIRECLAY_CRUCIBLE_ITEM = WoodenCog.REGISTRATE.item(\"fireclay_crucible\", FireclayCrucibleItem::new)\n                .properties(properties -> properties.stacksTo(1))\n                .tab(() -> CreativeModeTab.TAB_TOOLS)\n                .register();\n\n        WoodenCog.REGISTRATE.item(\"unfired_fireclay_crucible\", ModItem::new)\n                .properties(properties -> properties.stacksTo(1))\n                .tab(() -> CreativeModeTab.TAB_TOOLS)\n                .register();\n\n        machineCapacityStorage = new MachineCapacityStorage();\n", "        if(FMLEnvironment.dist == Dist.CLIENT) {\n            ModelLoaderRegistry.registerLoader(new ResourceLocation(\"woodencog\", \"fireclay_crucible\"), FireclayCrucibleModel.LOADER);\n            PONDER_HELPER\n                    .forComponents(FIRECLAY_CRUCIBLE_ITEM)\n                    .addStoryBoard(\"heating/heat\", Heating::heating)\n                    .addStoryBoard(\"heating/cool\", Heating::cooling);\n        }\n\n        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, WoodenCogCommonConfigs.SPEC, \"woodencog-common.toml\");\n    }\n\n    private void setup(final FMLCommonSetupEvent event)\n    {\n    }\n\n    @SubscribeEvent", "    public void onRegisterCommandEvent(RegisterCommandsEvent event) {\n        CommandDispatcher<CommandSourceStack> commandDispatcher = event.getDispatcher();\n\n        WoodenCogCommand cogCommand = new WoodenCogCommand(this);\n        cogCommand.register(commandDispatcher);\n\n    }\n}\n\n\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/ponder/Heating.java", "chunked_list": ["package net.chauvedev.woodencog.ponder;\n\nimport com.simibubi.create.foundation.ponder.PonderPalette;\nimport com.simibubi.create.foundation.ponder.SceneBuilder;\nimport com.simibubi.create.foundation.ponder.SceneBuildingUtil;\nimport com.simibubi.create.foundation.ponder.Selection;\nimport com.simibubi.create.foundation.ponder.instruction.EmitParticlesInstruction.Emitter;\nimport net.dries007.tfc.common.items.TFCItems;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.core.Direction;", "import net.minecraft.core.BlockPos;\nimport net.minecraft.core.Direction;\nimport net.minecraft.core.particles.ParticleTypes;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.phys.Vec3;\nimport net.minecraftforge.registries.ForgeRegistries;\n\nimport java.util.Objects;\n\npublic class Heating {", "import java.util.Objects;\n\npublic class Heating {\n    public static void heating(SceneBuilder scene, SceneBuildingUtil util) {\n        scene.title(\"heat\", \"Heating items\");\n\n        ItemStack steak = Objects.requireNonNull(ForgeRegistries.ITEMS.getValue(\n                new ResourceLocation(\"tfc:food/venison\")\n        )).getDefaultInstance();\n        ItemStack cooked_steak = Objects.requireNonNull(ForgeRegistries.ITEMS.getValue(\n                new ResourceLocation(\"tfc:food/cooked_venison\")\n        )).getDefaultInstance();\n        ItemStack unfired_pot = TFCItems.UNFIRED_VESSEL.get().getDefaultInstance();\n        ItemStack pot = TFCItems.VESSEL.get().getDefaultInstance();\n\n        scene.configureBasePlate(0, 0, 5);\n\n\n        scene.world.showSection(util.select.fromTo(0, 0, 0, 4, 0, 4), Direction.UP);\n        scene.idle(5);\n        scene.world.showSection(util.select.fromTo(2, 1, 0, 4, 1, 4), Direction.DOWN);\n        scene.idle(10);\n        scene.world.showSection(util.select.fromTo(0, 1, 0, 1, 1, 4), Direction.DOWN);\n        scene.idle(10);\n\n        BlockPos lava_stand = util.grid.at(1, 1, 1);\n        Selection lava_stand_selection = util.select.position(lava_stand);\n        scene.world.createItemOnBeltLike(lava_stand, Direction.UP, unfired_pot);\n        scene.overlay.showSelectionWithText(lava_stand_selection, 70)\n                .attachKeyFrame()\n                .colored(PonderPalette.INPUT)\n                .text(\"An item capable of receiving heat will be heated by lava, the maximum temperature is 1700\u00b0.\");\n        scene.idle(35);\n        scene.world.removeItemsFromBelt(lava_stand);\n        scene.effects.indicateSuccess(lava_stand);\n        scene.world.createItemOnBeltLike(lava_stand, Direction.UP, pot);\n        scene.idle(35);\n        BlockPos fire_stand = util.grid.at(1, 1, 3);\n        Selection fire_stand_selection = util.select.position(fire_stand);\n        scene.world.createItemOnBeltLike(fire_stand, Direction.UP, steak);\n        scene.overlay.showSelectionWithText(fire_stand_selection, 70)\n                .attachKeyFrame()\n                .colored(PonderPalette.INPUT)\n                .text(\"It's the same with fire, but the temperature limit is 200\u00b0. Perfect for cooking !\");\n        scene.idle(35);\n        scene.world.removeItemsFromBelt(fire_stand);\n        scene.effects.indicateSuccess(fire_stand);\n        scene.world.createItemOnBeltLike(fire_stand, Direction.UP, cooked_steak);\n        scene.idle(35);\n    }\n", "    public static void cooling(SceneBuilder scene, SceneBuildingUtil util) {\n        scene.title(\"cool\", \"Cooling items\");\n\n        ItemStack ingot = Objects.requireNonNull(ForgeRegistries.ITEMS.getValue(\n                new ResourceLocation(\"tfc:metal/ingot/copper\")\n        )).getDefaultInstance();\n\n        scene.configureBasePlate(0, 0, 5);\n\n        scene.world.showSection(util.select.fromTo(0, 0, 0, 4, 0, 4), Direction.UP);\n        scene.idle(5);\n        scene.world.showSection(util.select.fromTo(2, 1, 0, 4, 1, 4), Direction.DOWN);\n        scene.idle(10);\n        scene.world.showSection(util.select.fromTo(0, 1, 0, 1, 1, 4), Direction.DOWN);\n        scene.idle(10);\n        BlockPos item_stand = util.grid.at(1, 1, 2);\n        Selection item_stand_selection = util.select.position(item_stand);\n        Vec3 itemVec = util.vector.blockSurface(item_stand, Direction.UP);\n        scene.world.createItemOnBeltLike(item_stand, Direction.UP, ingot);\n        scene.effects.emitParticles(\n                itemVec,\n                Emitter.simple(ParticleTypes.FLAME, new Vec3(0, 0.01, 0)),\n                1,\n                30\n        );\n        scene.idle(30);\n        scene.overlay.showSelectionWithText(item_stand_selection, 70)\n                .attachKeyFrame()\n                .colored(PonderPalette.BLUE)\n                .text(\"Heated item can be cooled down with water.\");\n        scene.effects.emitParticles(\n                itemVec,\n                Emitter.simple(ParticleTypes.SMOKE, new Vec3(0, 0.01, 0)),\n                1,\n                25\n        );\n        scene.idle(25);\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/commands/WoodenCogCommand.java", "chunked_list": ["package net.chauvedev.woodencog.commands;\n\nimport com.mojang.brigadier.CommandDispatcher;\nimport com.mojang.brigadier.builder.LiteralArgumentBuilder;\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.exceptions.CommandSyntaxException;\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.minecraft.commands.CommandSource;\nimport net.minecraft.commands.CommandSourceStack;\nimport net.minecraft.commands.Commands;", "import net.minecraft.commands.CommandSourceStack;\nimport net.minecraft.commands.Commands;\nimport net.minecraft.network.chat.TextComponent;\n\nimport java.awt.*;\n\npublic class WoodenCogCommand {\n\n    public WoodenCogCommand(WoodenCog cog){\n\n\n    }", "    public void register(CommandDispatcher<CommandSourceStack> dispatcher){\n        LiteralArgumentBuilder<CommandSourceStack> woodencogcommand\n                = Commands.literal(\"woodencog\")\n                .requires((commandSource) -> commandSource.hasPermission(1))\n                .then(Commands.literal(\"python\")\n                        .executes(commandContext -> sendMessage(commandContext, \"this python\"))\n                )\n                .executes(commandContext -> sendMessage(commandContext, \"Nothing to say!\"));  // blank: didn't match a literal or the custommessage argument\n        dispatcher.register(woodencogcommand);\n    }\n\n    private int sendMessage(CommandContext<CommandSourceStack> commandContext, String s) throws CommandSyntaxException {\n        commandContext.getSource().sendSuccess(new TextComponent(s),true);\n\n        return 1;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/capability/MachineCapacityProvider.java", "chunked_list": ["package net.chauvedev.woodencog.capability;\n\n\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.minecraft.core.Direction;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.resources.ResourceKey;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraftforge.common.capabilities.Capability;\nimport net.minecraftforge.common.capabilities.CapabilityManager;", "import net.minecraftforge.common.capabilities.Capability;\nimport net.minecraftforge.common.capabilities.CapabilityManager;\nimport net.minecraftforge.common.capabilities.CapabilityToken;\nimport net.minecraftforge.common.capabilities.ICapabilityProvider;\nimport net.minecraftforge.common.util.INBTSerializable;\nimport net.minecraftforge.common.util.LazyOptional;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class MachineCapacityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {\n", "\npublic class MachineCapacityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {\n\n    public static Capability<MachineCapacity> MACHINE_CAPACITY = CapabilityManager.get(new CapabilityToken<MachineCapacity>() { });\n    public static ResourceLocation MACHINE_CAPACITY_KEY = new ResourceLocation(WoodenCog.MOD_ID, \"machine_capacity\");\n\n\n    private MachineCapacity machineCapacity = null;\n    private final LazyOptional<MachineCapacity> optional = LazyOptional.of(this::createMachineCapacity);\n\n    private MachineCapacity createMachineCapacity() {", "        if(this.machineCapacity == null) {\n            this.machineCapacity = new MachineCapacity();\n        }\n        return this.machineCapacity;\n    }\n\n\n    public @NotNull <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable Direction side) {\n        if(cap == MACHINE_CAPACITY) {\n            return optional.cast();\n        }\n\n        return LazyOptional.empty();\n    }\n\n    @Override", "        if(cap == MACHINE_CAPACITY) {\n            return optional.cast();\n        }\n\n        return LazyOptional.empty();\n    }\n\n    @Override\n    public CompoundTag serializeNBT() {\n        CompoundTag nbt = new CompoundTag();\n        nbt.put(\"machine_capacity\",createMachineCapacity().toTag());\n        return nbt;\n    }\n\n    @Override", "    public CompoundTag serializeNBT() {\n        CompoundTag nbt = new CompoundTag();\n        nbt.put(\"machine_capacity\",createMachineCapacity().toTag());\n        return nbt;\n    }\n\n    @Override\n    public void deserializeNBT(CompoundTag nbt) {\n        this.machineCapacity = new MachineCapacity();\n        if (nbt.contains(\"machine_capacity\")){\n            this.machineCapacity.toTag(nbt.getCompound(\"machine_capacity\"));\n        }\n    }\n}\n\n", "        if (nbt.contains(\"machine_capacity\")){\n            this.machineCapacity.toTag(nbt.getCompound(\"machine_capacity\"));\n        }\n    }\n}\n\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/capability/MachineCapacity.java", "chunked_list": ["package net.chauvedev.woodencog.capability;\n\n\nimport net.minecraft.nbt.CompoundTag;\nimport org.checkerframework.checker.units.qual.C;\n\npublic class MachineCapacity {\n\n    private float machine_capacity = 0;\n    private boolean destroyed = false;\n", "    public float getDurability(){\n        return this.machine_capacity;\n    }\n\n    public void setDurability(float var1){\n        this.machine_capacity = var1;\n    }\n\n    public boolean isDestroyed(){\n        return this.destroyed;\n    }\n", "    public boolean isDestroyed(){\n        return this.destroyed;\n    }\n\n    public void setDestroyed(boolean var1){\n        this.destroyed = var1;\n    }\n\n    public CompoundTag toTag(){\n        CompoundTag tag = new CompoundTag();\n        tag.putFloat(\"machine_usage\",this.machine_capacity);\n        tag.putBoolean(\"machine_destroyed\",this.destroyed);\n        return tag;\n    }", "    public CompoundTag toTag(){\n        CompoundTag tag = new CompoundTag();\n        tag.putFloat(\"machine_usage\",this.machine_capacity);\n        tag.putBoolean(\"machine_destroyed\",this.destroyed);\n        return tag;\n    }\n    public void toTag(CompoundTag tag){\n        if (tag.contains(\"machine_usage\")){\n            this.machine_capacity = tag.getFloat(\"machine_usage\");\n        }\n        if (tag.contains(\"machine_destroyed\")){\n            this.destroyed = tag.getBoolean(\"machine_destroyed\");\n        }\n\n    }\n}\n", "        if (tag.contains(\"machine_destroyed\")){\n            this.destroyed = tag.getBoolean(\"machine_destroyed\");\n        }\n\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/item/ModItem.java", "chunked_list": ["package net.chauvedev.woodencog.item;\n\nimport net.minecraft.world.item.Item;\n\npublic class ModItem extends Item {\n    public ModItem(Properties pProperties) {\n        super(pProperties);\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/item/fluids/can/FireclayCrucibleModel.java", "chunked_list": ["package net.chauvedev.woodencog.item.fluids.can;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.gson.JsonDeserializationContext;\nimport com.google.gson.JsonObject;\nimport com.mojang.datafixers.util.Pair;\nimport com.mojang.math.Transformation;", "import com.mojang.datafixers.util.Pair;\nimport com.mojang.math.Transformation;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Function;\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport net.minecraft.client.multiplayer.ClientLevel;\nimport net.minecraft.client.renderer.block.model.BakedQuad;", "import net.minecraft.client.multiplayer.ClientLevel;\nimport net.minecraft.client.renderer.block.model.BakedQuad;\nimport net.minecraft.client.renderer.block.model.ItemOverrides;\nimport net.minecraft.client.renderer.block.model.ItemTransforms;\nimport net.minecraft.client.renderer.texture.MissingTextureAtlasSprite;\nimport net.minecraft.client.renderer.texture.TextureAtlasSprite;\nimport net.minecraft.client.resources.model.BakedModel;\nimport net.minecraft.client.resources.model.BlockModelRotation;\nimport net.minecraft.client.resources.model.Material;\nimport net.minecraft.client.resources.model.ModelBakery;", "import net.minecraft.client.resources.model.Material;\nimport net.minecraft.client.resources.model.ModelBakery;\nimport net.minecraft.client.resources.model.ModelState;\nimport net.minecraft.client.resources.model.UnbakedModel;\nimport net.minecraft.core.Direction;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.server.packs.resources.ResourceManager;\nimport net.minecraft.util.GsonHelper;\nimport net.minecraft.world.entity.LivingEntity;\nimport net.minecraft.world.item.ItemStack;", "import net.minecraft.world.entity.LivingEntity;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.material.Fluid;\nimport net.minecraft.world.level.material.Fluids;\nimport net.minecraftforge.client.ForgeHooksClient;\nimport net.minecraftforge.client.model.CompositeModelState;\nimport net.minecraftforge.client.model.ForgeModelBakery;\nimport net.minecraftforge.client.model.IModelConfiguration;\nimport net.minecraftforge.client.model.IModelLoader;\nimport net.minecraftforge.client.model.ItemLayerModel;", "import net.minecraftforge.client.model.IModelLoader;\nimport net.minecraftforge.client.model.ItemLayerModel;\nimport net.minecraftforge.client.model.ItemMultiLayerBakedModel;\nimport net.minecraftforge.client.model.ItemTextureQuadConverter;\nimport net.minecraftforge.client.model.ModelLoaderRegistry;\nimport net.minecraftforge.client.model.PerspectiveMapWrapper;\nimport net.minecraftforge.client.model.geometry.IModelGeometry;\nimport net.minecraftforge.fluids.FluidAttributes;\nimport net.minecraftforge.fluids.FluidStack;\n\npublic final class FireclayCrucibleModel implements IModelGeometry<FireclayCrucibleModel> {", "import net.minecraftforge.fluids.FluidStack;\n\npublic final class FireclayCrucibleModel implements IModelGeometry<FireclayCrucibleModel> {\n    public static final Loader LOADER = new Loader();\n    @Nonnull\n    private final FluidStack fluid;\n    private final boolean coverIsMask;\n    private final boolean applyFluidLuminosity;\n\n    public BakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, ModelState modelTransform, ItemOverrides overrides, ResourceLocation modelLocation) {\n        FluidAttributes attributes = this.fluid.getFluid().getAttributes();\n        TextureAtlasSprite fluidSprite = !this.fluid.isEmpty() ? spriteGetter.apply(ForgeHooksClient.getBlockMaterial(attributes.getStillTexture(this.fluid))) : null;\n        Material baseLocation = owner.isTexturePresent(\"base\") ? owner.resolveTexture(\"base\") : null;\n        TextureAtlasSprite coverSprite = (!this.coverIsMask || baseLocation != null) && owner.isTexturePresent(\"cover\") ? (TextureAtlasSprite)spriteGetter.apply(owner.resolveTexture(\"cover\")) : null;\n        TextureAtlasSprite particleSprite;", "    public BakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, ModelState modelTransform, ItemOverrides overrides, ResourceLocation modelLocation) {\n        FluidAttributes attributes = this.fluid.getFluid().getAttributes();\n        TextureAtlasSprite fluidSprite = !this.fluid.isEmpty() ? spriteGetter.apply(ForgeHooksClient.getBlockMaterial(attributes.getStillTexture(this.fluid))) : null;\n        Material baseLocation = owner.isTexturePresent(\"base\") ? owner.resolveTexture(\"base\") : null;\n        TextureAtlasSprite coverSprite = (!this.coverIsMask || baseLocation != null) && owner.isTexturePresent(\"cover\") ? (TextureAtlasSprite)spriteGetter.apply(owner.resolveTexture(\"cover\")) : null;\n        TextureAtlasSprite particleSprite;\n        if (owner.isTexturePresent(\"particle\")) {\n            particleSprite = spriteGetter.apply(owner.resolveTexture(\"particle\"));\n        } else if (fluidSprite != null) {\n            particleSprite = fluidSprite;\n        } else if (!this.coverIsMask && coverSprite != null) {\n            particleSprite = coverSprite;\n        } else {\n            particleSprite = spriteGetter.apply(ModelLoaderRegistry.blockMaterial(MissingTextureAtlasSprite.getLocation()));\n        }\n\n        ModelState transformsFromModel = owner.getCombinedTransform();\n        ImmutableMap<ItemTransforms.TransformType, Transformation> transformMap = PerspectiveMapWrapper.getTransforms(new CompositeModelState(transformsFromModel, modelTransform));\n        ItemMultiLayerBakedModel.Builder builder = ItemMultiLayerBakedModel.builder(owner, particleSprite, new ContainedFluidOverrideHandler(overrides, bakery, owner, this), transformMap);\n        Transformation transform = modelTransform.getRotation();", "        } else if (fluidSprite != null) {\n            particleSprite = fluidSprite;\n        } else if (!this.coverIsMask && coverSprite != null) {\n            particleSprite = coverSprite;\n        } else {\n            particleSprite = spriteGetter.apply(ModelLoaderRegistry.blockMaterial(MissingTextureAtlasSprite.getLocation()));\n        }\n\n        ModelState transformsFromModel = owner.getCombinedTransform();\n        ImmutableMap<ItemTransforms.TransformType, Transformation> transformMap = PerspectiveMapWrapper.getTransforms(new CompositeModelState(transformsFromModel, modelTransform));\n        ItemMultiLayerBakedModel.Builder builder = ItemMultiLayerBakedModel.builder(owner, particleSprite, new ContainedFluidOverrideHandler(overrides, bakery, owner, this), transformMap);\n        Transformation transform = modelTransform.getRotation();", "        if (baseLocation != null) {\n            builder.addQuads(ItemLayerModel.getLayerRenderType(false), ItemLayerModel.getQuadsForSprites(ImmutableList.of(baseLocation), transform, spriteGetter));\n        }\n\n        TextureAtlasSprite baseSprite;\n        if (fluidSprite != null && owner.isTexturePresent(\"fluid\")) {\n            baseSprite = spriteGetter.apply(owner.resolveTexture(\"fluid\"));\n            if (baseSprite != null) {\n                int luminosity = this.applyFluidLuminosity ? attributes.getLuminosity(this.fluid) : 0;\n                int color = attributes.getColor(this.fluid);\n                builder.addQuads(ItemLayerModel.getLayerRenderType(luminosity > 0), ItemTextureQuadConverter.convertTexture(transform, baseSprite, fluidSprite, 0.468625F, Direction.NORTH, color, -1, luminosity));\n                builder.addQuads(ItemLayerModel.getLayerRenderType(luminosity > 0), ItemTextureQuadConverter.convertTexture(transform, baseSprite, fluidSprite, 0.531375F, Direction.SOUTH, color, -1, luminosity));\n            }\n        }\n", "        if (this.coverIsMask) {\n            if (coverSprite != null) {\n                baseSprite = spriteGetter.apply(baseLocation);\n                builder.addQuads(ItemLayerModel.getLayerRenderType(false), ItemTextureQuadConverter.convertTexture(transform, coverSprite, baseSprite, 0.4685F, Direction.NORTH, -1, 2));\n                builder.addQuads(ItemLayerModel.getLayerRenderType(false), ItemTextureQuadConverter.convertTexture(transform, coverSprite, baseSprite, 0.5315F, Direction.SOUTH, -1, 2));\n            }\n        } else if (coverSprite != null) {\n            builder.addQuads(ItemLayerModel.getLayerRenderType(false), new BakedQuad[]{ItemTextureQuadConverter.genQuad(transform, 0.0F, 0.0F, 16.0F, 16.0F, 0.4685F, coverSprite, Direction.NORTH, -1, 2)});\n            builder.addQuads(ItemLayerModel.getLayerRenderType(false), new BakedQuad[]{ItemTextureQuadConverter.genQuad(transform, 0.0F, 0.0F, 16.0F, 16.0F, 0.5315F, coverSprite, Direction.SOUTH, -1, 2)});\n        }\n\n        builder.setParticle(particleSprite);\n        return builder.build();\n    }\n\n    public Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, UnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors) {\n        Set<Material> texs = Sets.newHashSet();", "        if (owner.isTexturePresent(\"particle\")) {\n            texs.add(owner.resolveTexture(\"particle\"));\n        }\n\n        if (owner.isTexturePresent(\"base\")) {\n            texs.add(owner.resolveTexture(\"base\"));\n        }\n\n        if (owner.isTexturePresent(\"fluid\")) {\n            texs.add(owner.resolveTexture(\"fluid\"));\n        }\n", "        if (owner.isTexturePresent(\"fluid\")) {\n            texs.add(owner.resolveTexture(\"fluid\"));\n        }\n\n        if (owner.isTexturePresent(\"cover\")) {\n            texs.add(owner.resolveTexture(\"cover\"));\n        }\n\n        return texs;\n    }\n\n    public FireclayCrucibleModel(@Nonnull FluidStack fluid, boolean coverIsMask, boolean applyFluidLuminosity) {", "        if (fluid == null) {\n            throw new NullPointerException(\"fluid is marked non-null but is null\");\n        } else {\n            this.fluid = fluid;\n            this.coverIsMask = coverIsMask;\n            this.applyFluidLuminosity = applyFluidLuminosity;\n        }\n    }\n\n    public FireclayCrucibleModel withFluid(@Nonnull FluidStack fluid) {\n        if (fluid == null) {\n            throw new NullPointerException(\"fluid is marked non-null but is null\");\n        } else {\n            return this.fluid == fluid ? this : new FireclayCrucibleModel(fluid, this.coverIsMask, this.applyFluidLuminosity);\n        }\n    }\n\n    private static final class ContainedFluidOverrideHandler extends ItemOverrides {\n        private static final ResourceLocation BAKE_LOCATION = new ResourceLocation(\"woodencog\", \"fireclay_crucible_dynamic\");;\n        private final Map<FluidStack, BakedModel> cache = Maps.newHashMap();\n        private final ItemOverrides nested;\n        private final ModelBakery bakery;\n        private final IModelConfiguration owner;\n        private final FireclayCrucibleModel parent;\n\n        private ContainedFluidOverrideHandler(ItemOverrides nested, ModelBakery bakery, IModelConfiguration owner, FireclayCrucibleModel parent) {\n            this.nested = nested;\n            this.bakery = bakery;\n            this.owner = owner;\n            this.parent = parent;\n        }\n\n        private BakedModel getUncahcedModel(FluidStack fluid) {\n            return this.parent.withFluid(fluid).bake(this.owner, this.bakery, ForgeModelBakery.defaultTextureGetter(), BlockModelRotation.X0_Y0, ItemOverrides.EMPTY, BAKE_LOCATION);\n        }\n", "    public FireclayCrucibleModel withFluid(@Nonnull FluidStack fluid) {\n        if (fluid == null) {\n            throw new NullPointerException(\"fluid is marked non-null but is null\");\n        } else {\n            return this.fluid == fluid ? this : new FireclayCrucibleModel(fluid, this.coverIsMask, this.applyFluidLuminosity);\n        }\n    }\n\n    private static final class ContainedFluidOverrideHandler extends ItemOverrides {\n        private static final ResourceLocation BAKE_LOCATION = new ResourceLocation(\"woodencog\", \"fireclay_crucible_dynamic\");;\n        private final Map<FluidStack, BakedModel> cache = Maps.newHashMap();\n        private final ItemOverrides nested;\n        private final ModelBakery bakery;\n        private final IModelConfiguration owner;\n        private final FireclayCrucibleModel parent;\n\n        private ContainedFluidOverrideHandler(ItemOverrides nested, ModelBakery bakery, IModelConfiguration owner, FireclayCrucibleModel parent) {\n            this.nested = nested;\n            this.bakery = bakery;\n            this.owner = owner;\n            this.parent = parent;\n        }\n\n        private BakedModel getUncahcedModel(FluidStack fluid) {\n            return this.parent.withFluid(fluid).bake(this.owner, this.bakery, ForgeModelBakery.defaultTextureGetter(), BlockModelRotation.X0_Y0, ItemOverrides.EMPTY, BAKE_LOCATION);\n        }\n", "        public BakedModel resolve(BakedModel originalModel, ItemStack stack, @Nullable ClientLevel world, @Nullable LivingEntity entity, int seed) {\n            BakedModel overriden = this.nested.resolve(originalModel, stack, world, entity, seed);\n            if (overriden != originalModel) {\n                return overriden;\n            } else {\n                Fluid fluid = FireclayCrucibleItem.getFluid(stack);\n                if (fluid != Fluids.EMPTY) {\n                    FluidStack fluidStack = new FluidStack(fluid, FireclayCrucibleItem.CAPACITY, FireclayCrucibleItem.getFluidTag(stack));\n                    return this.cache.computeIfAbsent(fluidStack, this::getUncahcedModel);\n                } else {\n                    return originalModel;\n                }\n            }\n        }\n    }\n\n    private static class Loader implements IModelLoader<FireclayCrucibleModel> {\n        private Loader() {\n        }\n", "        public void onResourceManagerReload(ResourceManager resourceManager) {\n        }\n\n        public FireclayCrucibleModel read(JsonDeserializationContext deserializationContext, JsonObject modelContents) {\n            boolean coverIsMask = GsonHelper.getAsBoolean(modelContents, \"coverIsMask\", true);\n            boolean applyFluidLuminosity = GsonHelper.getAsBoolean(modelContents, \"applyFluidLuminosity\", true);\n            return new FireclayCrucibleModel(FluidStack.EMPTY, coverIsMask, applyFluidLuminosity);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/item/fluids/can/FireclayCrucibleFluidHandler.java", "chunked_list": ["package net.chauvedev.woodencog.item.fluids.can;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport net.minecraft.core.Direction;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.material.Fluid;\nimport net.minecraft.world.level.material.Fluids;\nimport net.minecraftforge.common.capabilities.Capability;", "import net.minecraft.world.level.material.Fluids;\nimport net.minecraftforge.common.capabilities.Capability;\nimport net.minecraftforge.common.capabilities.ICapabilityProvider;\nimport net.minecraftforge.common.util.LazyOptional;\nimport net.minecraftforge.fluids.FluidStack;\nimport net.minecraftforge.fluids.capability.CapabilityFluidHandler;\nimport net.minecraftforge.fluids.capability.IFluidHandler;\nimport net.minecraftforge.fluids.capability.IFluidHandlerItem;\n\npublic class FireclayCrucibleFluidHandler implements IFluidHandlerItem, ICapabilityProvider {\n    private final LazyOptional<IFluidHandlerItem> holder = LazyOptional.of(() -> this);\n    private final ItemStack container;\n\n    @Nonnull\n    public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction side) {\n        return CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY.orEmpty(cap, this.holder);\n    }\n", "\npublic class FireclayCrucibleFluidHandler implements IFluidHandlerItem, ICapabilityProvider {\n    private final LazyOptional<IFluidHandlerItem> holder = LazyOptional.of(() -> this);\n    private final ItemStack container;\n\n    @Nonnull\n    public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction side) {\n        return CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY.orEmpty(cap, this.holder);\n    }\n\n    public int getTanks() {\n        return 1;\n    }\n", "    public int getTanks() {\n        return 1;\n    }\n\n    public boolean isFluidValid(int tank, FluidStack stack) {\n        return true;\n    }\n\n    public int getTankCapacity(int tank) {\n        return FireclayCrucibleItem.CAPACITY;\n    }\n\n    private Fluid getFluid() {\n        return FireclayCrucibleItem.getFluid(this.container);\n    }\n\n    @Nullable\n    private CompoundTag getFluidTag() {\n        return FireclayCrucibleItem.getFluidTag(this.container);\n    }\n\n    @Nonnull", "    public int getTankCapacity(int tank) {\n        return FireclayCrucibleItem.CAPACITY;\n    }\n\n    private Fluid getFluid() {\n        return FireclayCrucibleItem.getFluid(this.container);\n    }\n\n    @Nullable\n    private CompoundTag getFluidTag() {\n        return FireclayCrucibleItem.getFluidTag(this.container);\n    }\n\n    @Nonnull", "    public FluidStack getFluidInTank(int tank) {\n        return new FluidStack(this.getFluid(), FireclayCrucibleItem.CAPACITY, this.getFluidTag());\n    }\n\n    public int fill(FluidStack resource, IFluidHandler.FluidAction action) {\n        if (this.getFluid() == Fluids.EMPTY && resource.getAmount() >= FireclayCrucibleItem.CAPACITY) {\n            if (action.execute()) {\n                FireclayCrucibleItem.setFluid(this.container, resource);\n            }\n\n            return FireclayCrucibleItem.CAPACITY;\n        } else {\n            return 0;\n        }\n    }\n\n    @Nonnull", "    public FluidStack drain(FluidStack resource, IFluidHandler.FluidAction action) {\n        if (!resource.isEmpty() && resource.getAmount() >= FireclayCrucibleItem.CAPACITY) {\n            Fluid fluid = this.getFluid();\n            if (fluid != Fluids.EMPTY && fluid == resource.getFluid()) {\n                FluidStack output = new FluidStack(fluid, FireclayCrucibleItem.CAPACITY, this.getFluidTag());\n                if (action.execute()) {\n                    FireclayCrucibleItem.setFluid(this.container, FluidStack.EMPTY);\n                }\n\n                return output;\n            } else {\n                return FluidStack.EMPTY;\n            }\n        } else {\n            return FluidStack.EMPTY;\n        }\n    }\n\n    @Nonnull", "    public FluidStack drain(int maxDrain, IFluidHandler.FluidAction action) {\n        if (maxDrain < FireclayCrucibleItem.CAPACITY) {\n            return FluidStack.EMPTY;\n        } else {\n            Fluid fluid = this.getFluid();\n            if (fluid == Fluids.EMPTY) {\n                return FluidStack.EMPTY;\n            } else {\n                FluidStack output = new FluidStack(fluid, FireclayCrucibleItem.CAPACITY, this.getFluidTag());\n                if (action.execute()) {\n                    FireclayCrucibleItem.setFluid(this.container, FluidStack.EMPTY);\n                }\n\n                return output;\n            }\n        }\n    }\n\n    public FireclayCrucibleFluidHandler(ItemStack container) {\n        this.container = container;\n    }\n", "                if (action.execute()) {\n                    FireclayCrucibleItem.setFluid(this.container, FluidStack.EMPTY);\n                }\n\n                return output;\n            }\n        }\n    }\n\n    public FireclayCrucibleFluidHandler(ItemStack container) {\n        this.container = container;\n    }\n", "    public ItemStack getContainer() {\n        return this.container;\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/item/fluids/can/FireclayCrucibleItem.java", "chunked_list": ["package net.chauvedev.woodencog.item.fluids.can;\n\nimport java.util.List;\nimport java.util.Objects;\nimport javax.annotation.Nullable;\nimport net.minecraft.ChatFormatting;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.network.chat.TranslatableComponent;\nimport net.minecraft.resources.ResourceLocation;", "import net.minecraft.network.chat.TranslatableComponent;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.item.TooltipFlag;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.material.Fluid;\nimport net.minecraft.world.level.material.Fluids;\nimport net.minecraftforge.common.capabilities.ICapabilityProvider;\nimport net.minecraftforge.fluids.FluidStack;", "import net.minecraftforge.common.capabilities.ICapabilityProvider;\nimport net.minecraftforge.fluids.FluidStack;\nimport net.minecraftforge.registries.ForgeRegistries;\n\npublic class FireclayCrucibleItem extends Item {\n    protected static final int CAPACITY = 100;\n\n    public FireclayCrucibleItem(Item.Properties properties) {\n        super(properties);\n    }\n", "    public ICapabilityProvider initCapabilities(ItemStack stack, @Nullable CompoundTag nbt) {\n        return new FireclayCrucibleFluidHandler(stack);\n    }\n\n    public boolean hasContainerItem(ItemStack stack) {\n        return getFluid(stack) != Fluids.EMPTY;\n    }\n\n    public ItemStack getContainerItem(ItemStack stack) {\n        Fluid fluid = getFluid(stack);\n        return fluid != Fluids.EMPTY ? new ItemStack(this) : ItemStack.EMPTY;\n    }\n", "    public ItemStack getContainerItem(ItemStack stack) {\n        Fluid fluid = getFluid(stack);\n        return fluid != Fluids.EMPTY ? new ItemStack(this) : ItemStack.EMPTY;\n    }\n\n    public void appendHoverText(ItemStack stack, @Nullable Level worldIn, List<Component> tooltip, TooltipFlag flagIn) {\n        Fluid fluid = getFluid(stack);\n        if (fluid != Fluids.EMPTY) {\n            CompoundTag fluidTag = getFluidTag(stack);\n            Object text;\n            if (fluidTag != null) {\n                FluidStack displayFluid = new FluidStack(fluid, FireclayCrucibleItem.CAPACITY, fluidTag);\n                text = displayFluid.getDisplayName().plainCopy();\n            } else {\n                text = new TranslatableComponent(fluid.getAttributes().getTranslationKey());\n            }\n\n            tooltip.add((new TranslatableComponent(this.getDescriptionId() + \".contents\", new Object[]{text})).withStyle(ChatFormatting.GRAY));\n        } else {\n            tooltip.add((new TranslatableComponent(this.getDescriptionId() + \".tooltip\")).withStyle(ChatFormatting.GRAY));\n        }\n\n    }\n", "            if (fluidTag != null) {\n                FluidStack displayFluid = new FluidStack(fluid, FireclayCrucibleItem.CAPACITY, fluidTag);\n                text = displayFluid.getDisplayName().plainCopy();\n            } else {\n                text = new TranslatableComponent(fluid.getAttributes().getTranslationKey());\n            }\n\n            tooltip.add((new TranslatableComponent(this.getDescriptionId() + \".contents\", new Object[]{text})).withStyle(ChatFormatting.GRAY));\n        } else {\n            tooltip.add((new TranslatableComponent(this.getDescriptionId() + \".tooltip\")).withStyle(ChatFormatting.GRAY));\n        }\n\n    }\n", "    public static ItemStack setFluid(ItemStack stack, FluidStack fluid) {\n        CompoundTag nbt;\n        if (fluid.isEmpty()) {\n            nbt = stack.getTag();\n            if (nbt != null) {\n                nbt.remove(\"fluid\");\n                nbt.remove(\"fluid_tag\");\n                if (nbt.isEmpty()) {\n                    stack.setTag(null);\n                }\n            }\n        } else {\n            nbt = stack.getOrCreateTag();\n            nbt.putString(\"fluid\", Objects.requireNonNull(fluid.getFluid().getRegistryName()).toString());\n            CompoundTag fluidTag = fluid.getTag();", "            if (fluidTag != null) {\n                nbt.put(\"fluid_tag\", fluidTag.copy());\n            } else {\n                nbt.remove(\"fluid_tag\");\n            }\n        }\n\n        return stack;\n    }\n\n    public static Fluid getFluid(ItemStack stack) {\n        CompoundTag nbt = stack.getTag();", "    public static Fluid getFluid(ItemStack stack) {\n        CompoundTag nbt = stack.getTag();\n        if (nbt != null) {\n            ResourceLocation location = ResourceLocation.tryParse(nbt.getString(\"fluid\"));\n            if (location != null && ForgeRegistries.FLUIDS.containsKey(location)) {\n                Fluid fluid = ForgeRegistries.FLUIDS.getValue(location);\n                if (fluid != null) {\n                    return fluid;\n                }\n            }\n        }\n\n        return Fluids.EMPTY;\n    }\n\n    @Nullable", "    public static CompoundTag getFluidTag(ItemStack stack) {\n        CompoundTag nbt = stack.getTag();\n        return nbt != null && nbt.contains(\"fluid_tag\", 10) ? nbt.getCompound(\"fluid_tag\") : null;\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/interaction/CustomArmInteractionPointTypes.java", "chunked_list": ["package net.chauvedev.woodencog.interaction;\n\nimport com.simibubi.create.Create;\nimport com.simibubi.create.content.kinetics.mechanicalArm.ArmInteractionPoint;\nimport com.simibubi.create.content.kinetics.mechanicalArm.ArmInteractionPointType;\nimport net.dries007.tfc.common.blocks.devices.CharcoalForgeBlock;\nimport net.dries007.tfc.common.blocks.devices.CrucibleBlock;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.level.Level;", "import net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.block.state.BlockState;\n\nimport java.util.function.Function;\n\npublic class CustomArmInteractionPointTypes {\n    public static final CrucibleType CRUCIBLE = register(\"crucible\", CrucibleType::new);\n    public static final CharcoalForgeType CHARCOAL_FORGE = register(\"charcoal_forge\", CharcoalForgeType::new);\n\n    public CustomArmInteractionPointTypes() {\n    }\n\n    private static <T extends ArmInteractionPointType> T register(String id, Function<ResourceLocation, T> factory) {\n        T type = (T) factory.apply(Create.asResource(id));\n        ArmInteractionPointType.register(type);\n        return type;\n    }\n", "    public static final CharcoalForgeType CHARCOAL_FORGE = register(\"charcoal_forge\", CharcoalForgeType::new);\n\n    public CustomArmInteractionPointTypes() {\n    }\n\n    private static <T extends ArmInteractionPointType> T register(String id, Function<ResourceLocation, T> factory) {\n        T type = (T) factory.apply(Create.asResource(id));\n        ArmInteractionPointType.register(type);\n        return type;\n    }\n", "    public static void registerAll() {\n    }\n\n    public static class CrucibleType extends ArmInteractionPointType {\n        public CrucibleType(ResourceLocation id) {\n            super(id);\n        }\n\n        public boolean canCreatePoint(Level level, BlockPos pos, BlockState state) {\n            return state.getBlock() instanceof CrucibleBlock;\n        }\n", "        public boolean canCreatePoint(Level level, BlockPos pos, BlockState state) {\n            return state.getBlock() instanceof CrucibleBlock;\n        }\n\n        public ArmInteractionPoint createPoint(Level level, BlockPos pos, BlockState state) {\n            return new ArmInteractionPoint(this, level, pos, state);\n        }\n    }\n\n    public static class CharcoalForgeType extends ArmInteractionPointType {\n        public CharcoalForgeType(ResourceLocation id) {\n            super(id);\n        }\n", "    public static class CharcoalForgeType extends ArmInteractionPointType {\n        public CharcoalForgeType(ResourceLocation id) {\n            super(id);\n        }\n\n        public boolean canCreatePoint(Level level, BlockPos pos, BlockState state) {\n            return state.getBlock() instanceof CharcoalForgeBlock;\n        }\n\n        public ArmInteractionPoint createPoint(Level level, BlockPos pos, BlockState state) {\n            return new ArmInteractionPoint(this, level, pos, state);\n        }\n    }\n}\n", "        public ArmInteractionPoint createPoint(Level level, BlockPos pos, BlockState state) {\n            return new ArmInteractionPoint(this, level, pos, state);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/utils/ModTags.java", "chunked_list": ["package net.chauvedev.woodencog.utils;\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.tags.BlockTags;\nimport net.minecraft.tags.ItemTags;\nimport net.minecraft.tags.TagKey;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraftforge.common.Tags;\n\npublic class ModTags {", "import net.minecraftforge.common.Tags;\n\npublic class ModTags {\n    public static class Blocks {\n        private static TagKey<Block> tag(String name) {\n            return BlockTags.create(new ResourceLocation(WoodenCog.MOD_ID, name));\n        }\n\n        private static TagKey<Block> forgeTag(String name) {\n            return BlockTags.create(new ResourceLocation(\"forge\", name));\n        }\n    }\n", "    public static class Items {\n        public static final TagKey<Item> UNBURNABLE = tag(\"unburnable\");\n\n        private static TagKey<Item> tag(String name) {\n            return ItemTags.create(new ResourceLocation(WoodenCog.MOD_ID, name));\n        }\n\n        private static TagKey<Item> forgeTag(String name) {\n            return ItemTags.create(new ResourceLocation(\"forge\", name));\n        }\n    }\n}"]}
{"filename": "src/main/java/net/chauvedev/woodencog/config/WoodenCogCommonConfigs.java", "chunked_list": ["package net.chauvedev.woodencog.config;\n\nimport net.minecraftforge.common.ForgeConfigSpec;\n\nimport java.util.List;\n\npublic class WoodenCogCommonConfigs {\n    public static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();\n    public static final ForgeConfigSpec SPEC;\n\n    public static final ForgeConfigSpec.ConfigValue<Boolean> HANDLE_TEMPERATURE;", "    public static final ForgeConfigSpec SPEC;\n\n    public static final ForgeConfigSpec.ConfigValue<Boolean> HANDLE_TEMPERATURE;\n    public static ForgeConfigSpec.ConfigValue<List<? extends String>> WEAR_BLACKLIST;\n    public static ForgeConfigSpec.ConfigValue<Integer> DEFAULT_DURABILITY;\n    public static ForgeConfigSpec.ConfigValue<Integer> DEFAULT_DAMAGE_CHANCE;\n\n    static {\n        BUILDER.push(\"woodencog\");\n\n        BUILDER.push(\"temperature\");\n        HANDLE_TEMPERATURE = BUILDER\n                .comment(\"Should create handle temperature ?\")\n                .define(\"handle_temperature\", true);\n        BUILDER.pop();\n\n        BUILDER.push(\"wearing\");\n        DEFAULT_DURABILITY = BUILDER\n                .comment(\"default durability of each machine bloc (144000 allow a machine to run at 256rpm for ~1H at 10% chance\")\n                .define(\"durability\", 144000);\n        DEFAULT_DAMAGE_CHANCE = BUILDER\n                .comment(\"chance of machine getting damage (from 0 to 100 number over 100 are the same as 100)\")\n                .define(\"chance\", 10);\n        WEAR_BLACKLIST = BUILDER\n                .comment(\"This list contains block that should not damage over time\")\n                .defineList(\"blacklist\", List.of(\n                        \"create:shaft\",\n                        \"create:cogwheel\",\n                        \"create:large_cogwheel\",\n                        \"create:gearbox\",\n                        \"create:vertical_gearbox\",\n                        \"create:clutch\",\n                        \"create:gearshift\",\n                        \"create:encased_chain_drive\",\n                        \"create:adjustable_chain_gearshift\",\n                        \"create:speedometer\",\n                        \"create:stressometer\",\n                        \"create:wooden_bracket\",\n                        \"create:metal_bracket\",\n                        \"create:sequenced_gearshift\",\n                        \"create:rotation_speed_controller\",\n                        \"create:display_board\",\n                        \"create:schematicannon\",\n                        \"create:belt\",\n                        \"create:creative_motor\",\n                        \"create:mechanical_pump\"\n                ), entry -> true);\n\n        BUILDER.pop();\n        SPEC = BUILDER.build();\n    }\n\n}\n\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/config/CustomBlockConfig.java", "chunked_list": ["package net.chauvedev.woodencog.config;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.reflect.TypeToken;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;", "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CustomBlockConfig {\n    public static Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();\n    public static Map<String, BlockInformation> registeredBlocks = new HashMap<String, BlockInformation>();\n    public static void init(File jsonConfig) {\n        try {\n            // Create the config if it doesn't already exist.", "    public static void init(File jsonConfig) {\n        try {\n            // Create the config if it doesn't already exist.\n            if (!jsonConfig.exists() && jsonConfig.createNewFile()) {\n                // Get a default map of blocks. You could just use a blank map, however.\n                Map<String, BlockInformation> defaultMap = getDefaults();\n                // Convert the map to JSON format. There is a built in (de)serializer for it already.\n                String json = gson.toJson(defaultMap, new TypeToken<Map<String, BlockInformation>>(){}.getType());\n                FileWriter writer = new FileWriter(jsonConfig);\n                // Write to the file you passed\n                writer.write(json);\n                // Always close when done.\n                writer.close();\n            }\n\n            // If the file exists (or we just made one exist), convert it from JSON format to a populated Map object\n            registeredBlocks = gson.fromJson(new FileReader(jsonConfig), new TypeToken<Map<String, BlockInformation>>(){}.getType());\n        } catch (IOException e) {\n            // Print an error if something fails. Please use a real logger, not System.out.\n            System.out.println(\"Error creating default configuration.\");\n        }\n    }\n\n    private static Map<String, BlockInformation> getDefaults() {\n        Map<String, BlockInformation> ret = new HashMap<>();\n        ret.put(\"examplemod:exampleblock\", new BlockInformation(100, 5));\n        return ret;\n    }\n", "    public static class BlockInformation {\n        public int durability;\n        public int chance;\n\n        public BlockInformation(int durability, int chance) {\n            this.durability = durability;\n            this.chance = chance;\n        }\n    }\n}"]}
{"filename": "src/main/java/net/chauvedev/woodencog/core/MachineCapacityStorage.java", "chunked_list": ["package net.chauvedev.woodencog.core;\n\nimport com.simibubi.create.AllBlocks;\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.chauvedev.woodencog.capability.MachineCapacity;\nimport net.chauvedev.woodencog.config.CustomBlockConfig;\nimport net.chauvedev.woodencog.config.WoodenCogCommonConfigs;\nimport net.minecraft.network.chat.TextComponent;\nimport net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.level.block.Block;", "import net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.entity.BlockEntity;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.logging.Logger;\n\npublic class MachineCapacityStorage {\n\n    private static MachineCapacityStorage INSTANCE = null;\n", "\npublic class MachineCapacityStorage {\n\n    private static MachineCapacityStorage INSTANCE = null;\n\n    public static MachineCapacityStorage getInstance(){\n        return INSTANCE;\n    }\n\n    public HashMap<String,MachineCapacityEntry> machineCapacityEntryMap_cache;\n\n", "    public boolean active = true;\n\n    public MachineCapacityStorage(){\n        MachineCapacityStorage.INSTANCE = this;\n        this.machineCapacityEntryMap_cache = new HashMap<>();\n    }\n\n    public boolean isBlackListBlock(BlockEntity blockEntity){\n        Block block = blockEntity.getBlockState().getBlock();\n\n        String full = block.getRegistryName().getNamespace()+\":\"+block.getRegistryName().getPath();\n        return WoodenCogCommonConfigs.WEAR_BLACKLIST.get().contains(full);\n    }", "    public MachineCapacityEntry getCapacity(Block block){\n        String full = block.getRegistryName().getNamespace()+\":\"+block.getRegistryName().getPath();\n        try {\n            CustomBlockConfig.BlockInformation info = CustomBlockConfig.registeredBlocks.get(full);\n            return MachineCapacityEntry.createEntryBlock(false,\n                    info.durability,\n                    info.chance\n            );\n        } catch (NullPointerException e) {\n            return MachineCapacityEntry.createEntryBlock(false,\n                    WoodenCogCommonConfigs.DEFAULT_DURABILITY.get(),\n                    WoodenCogCommonConfigs.DEFAULT_DAMAGE_CHANCE.get()\n            );\n        }\n\n    }\n\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/core/MachineCapacityEntry.java", "chunked_list": ["package net.chauvedev.woodencog.core;\n\nimport net.chauvedev.woodencog.capability.MachineCapacity;\nimport net.minecraft.world.level.block.Block;\n\npublic class MachineCapacityEntry {\n\n\n    public boolean isBlackList = false;\n    public String registryName = \"\";\n    public float durabilityMax = 500;\n", "    public boolean isBlackList = false;\n    public String registryName = \"\";\n    public float durabilityMax = 500;\n\n    public int damageChance = 100;\n\n\n    public static MachineCapacityEntry createEntryBlock(boolean isBlackList,float durabilityMax,int damageChance){\n        MachineCapacityEntry entry = new MachineCapacityEntry();\n        entry.isBlackList = isBlackList;\n        entry.durabilityMax = durabilityMax;\n        entry.damageChance = damageChance;\n        return entry;\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinKineticBlockEntity.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.KineticNetwork;\nimport com.simibubi.create.content.kinetics.base.KineticBlockEntity;\nimport com.simibubi.create.content.kinetics.crusher.CrushingWheelBlockEntity;\nimport com.simibubi.create.content.kinetics.transmission.ClutchBlockEntity;\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.chauvedev.woodencog.capability.MachineCapacity;\nimport net.chauvedev.woodencog.capability.MachineCapacityProvider;\nimport net.chauvedev.woodencog.core.MachineCapacityEntry;", "import net.chauvedev.woodencog.capability.MachineCapacityProvider;\nimport net.chauvedev.woodencog.core.MachineCapacityEntry;\nimport net.chauvedev.woodencog.core.MachineCapacityStorage;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.core.particles.ParticleTypes;\nimport net.minecraft.nbt.CompoundTag;\nimport net.minecraft.sounds.SoundEvent;\nimport net.minecraft.sounds.SoundEvents;\nimport net.minecraft.sounds.SoundSource;\nimport net.minecraft.world.level.Level;", "import net.minecraft.sounds.SoundSource;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.Blocks;\nimport net.minecraft.world.level.block.entity.BlockEntity;\nimport net.minecraft.world.level.block.entity.BlockEntityType;\nimport net.minecraft.world.level.block.state.BlockState;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;", "import org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\nimport java.awt.*;\nimport java.util.Objects;\n\n@Mixin(value = KineticBlockEntity.class, remap = false)\npublic abstract class MixinKineticBlockEntity{\n\n\n    private boolean lifeBlockBlocked = false;\n    private float lifeBlock = 20*10;\n", "@Mixin(value = KineticBlockEntity.class, remap = false)\npublic abstract class MixinKineticBlockEntity{\n\n\n    private boolean lifeBlockBlocked = false;\n    private float lifeBlock = 20*10;\n\n    @Shadow public abstract KineticNetwork getOrCreateNetwork();\n\n    @Shadow protected float speed;\n\n    @Shadow protected float stress;\n\n    @Shadow protected boolean overStressed;\n", "    @Shadow public abstract void setSpeed(float speed);\n\n    @Shadow protected float capacity;\n\n    @Shadow public abstract float calculateAddedStressCapacity();\n\n    @Shadow public abstract float calculateStressApplied();\n\n    @Shadow protected float lastStressApplied;\n    @Shadow protected float lastCapacityProvided;\n", "    @Shadow public abstract void detachKinetics();\n\n    @Shadow public abstract float getSpeed();\n\n    boolean destroyed = false;\n\n    @Inject(\n            method = {\"tick\"},\n            at = {@At(\"HEAD\")},\n            remap = false)\n    public void tick(CallbackInfo ci){\n        KineticBlockEntity block = (KineticBlockEntity)((Object)this) ;", "    public void tick(CallbackInfo ci){\n        KineticBlockEntity block = (KineticBlockEntity)((Object)this) ;\n        try{\n            this.tickDamagedTick(block);\n        }catch (Error error){\n            WoodenCog.LOGGER.debug(\"Error pendant le system tick\");\n            error.printStackTrace();\n        }\n    }\n\n    public void tickDamagedTick(KineticBlockEntity block){", "    public void tickDamagedTick(KineticBlockEntity block){\n        if (!MachineCapacityStorage.getInstance().active){\n            return;\n        }\n        if (MachineCapacityStorage.getInstance().isBlackListBlock(block)){\n            return;\n        }\n        MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());\n        MachineCapacity capacity = block.getCapability(MachineCapacityProvider.MACHINE_CAPACITY).resolve().get();\n        int chance = block.getLevel().random.nextInt(0,101);\n\n        float left = config.durabilityMax - capacity.getDurability();\n", "        if (chance > (100-config.damageChance) && left > 0 && block.getSpeed() > 0){\n            int damage_for_speed = (int) getSpeed()/10;\n            capacity.setDurability(capacity.getDurability()+damage_for_speed);\n        }\n\n        left = config.durabilityMax - capacity.getDurability();\n\n        if(left >= 10 && left < config.durabilityMax/2) {\n            block.getLevel().addParticle(ParticleTypes.SMOKE,false,block.getBlockPos().getX()+0.5f,block.getBlockPos().getY()+0.5f,block.getBlockPos().getZ()+0.5f,0,0.01,0);\n        }\n", "        if (left<10){\n            if (getOrCreateNetwork()!=null){\n                if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){\n                    destroyed = true;\n                    getOrCreateNetwork().updateCapacityFor(block,0);\n                    getOrCreateNetwork().updateStressFor(block, Integer.MAX_VALUE);\n                    getOrCreateNetwork().updateNetwork();\n                    getOrCreateNetwork().sync();\n                    capacity.setDestroyed(true);\n                }\n            }\n            block.getLevel().addParticle(ParticleTypes.CAMPFIRE_SIGNAL_SMOKE,false,block.getBlockPos().getX()+0.5f,block.getBlockPos().getY()+0.5f,block.getBlockPos().getZ()+0.5f,0,0.01,0);\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinFanProcessing.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.belt.behaviour.TransportedItemStackHandlerBehaviour;\nimport com.simibubi.create.content.kinetics.belt.transport.TransportedItemStack;\nimport com.simibubi.create.content.kinetics.fan.FanProcessing;\nimport net.chauvedev.woodencog.config.CustomBlockConfig;\nimport net.chauvedev.woodencog.config.WoodenCogCommonConfigs;\nimport net.chauvedev.woodencog.utils.ModTags;\nimport net.dries007.tfc.common.capabilities.food.FoodCapability;\nimport net.dries007.tfc.common.capabilities.food.FoodTraits;", "import net.dries007.tfc.common.capabilities.food.FoodCapability;\nimport net.dries007.tfc.common.capabilities.food.FoodTraits;\nimport net.dries007.tfc.common.capabilities.heat.HeatCapability;\nimport net.dries007.tfc.common.capabilities.heat.IHeat;\nimport net.dries007.tfc.common.recipes.HeatingRecipe;\nimport net.dries007.tfc.common.recipes.inventory.ItemStackInventory;\nimport net.minecraft.core.Registry;\nimport net.minecraft.world.entity.item.ItemEntity;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;", "import net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;\nimport net.minecraftforge.fluids.FluidStack;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.util.Map;\n", "import java.util.Map;\n\n@Mixin(value = FanProcessing.class, remap = false)\npublic class MixinFanProcessing {\n\n\n\n    private static ItemStack applyProcessingTCF(ItemStack inputStack, FanProcessing.Type type) {\n        if (\n                !inputStack.getCapability(HeatCapability.CAPABILITY).isPresent()\n                || type.equals(FanProcessing.Type.HAUNTING)\n        ) {\n            return inputStack;\n        }\n\n        IHeat cap = inputStack.getCapability(HeatCapability.CAPABILITY).resolve().get();\n\n        float itemTemp = cap.getTemperature();", "        if (\n                !inputStack.getCapability(HeatCapability.CAPABILITY).isPresent()\n                || type.equals(FanProcessing.Type.HAUNTING)\n        ) {\n            return inputStack;\n        }\n\n        IHeat cap = inputStack.getCapability(HeatCapability.CAPABILITY).resolve().get();\n\n        float itemTemp = cap.getTemperature();\n        if(type.equals(FanProcessing.Type.BLASTING)) {\n            HeatCapability.addTemp(cap, 1700);", "        if(type.equals(FanProcessing.Type.BLASTING)) {\n            HeatCapability.addTemp(cap, 1700);\n        } else if (type.equals(FanProcessing.Type.SMOKING)) {\n            HeatCapability.addTemp(cap, 200);\n        } else if (type.equals(FanProcessing.Type.NONE)) {\n            cap.setTemperature(cap.getTemperature() - 2F);\n            if(cap.getTemperature() <= 0F) {\n                cap.setTemperature(0F);\n            }\n        } else if (type.equals(FanProcessing.Type.SPLASHING)) {\n            cap.setTemperature(cap.getTemperature() - 5F);", "        } else if (type.equals(FanProcessing.Type.SPLASHING)) {\n            cap.setTemperature(cap.getTemperature() - 5F);\n            if(cap.getTemperature() <= 0F) {\n                cap.setTemperature(0F);\n            }\n        }\n\n        HeatingRecipe recipe = HeatingRecipe.getRecipe(inputStack);\n\n        if (recipe!=null){\n            if ((double)itemTemp > 1.1 * (double)recipe.getTemperature()) {", "        if (recipe!=null){\n            if ((double)itemTemp > 1.1 * (double)recipe.getTemperature()) {\n                if (recipe.assemble(new ItemStackInventory(inputStack)).isEmpty()){\n                    return null;\n                }\n            }\n            if (recipe.isValidTemperature(cap.getTemperature()))\n            {\n                ItemStack output = recipe.assemble(new ItemStackInventory(inputStack));\n                FluidStack fluidStack = recipe.assembleFluid(new ItemStackInventory(inputStack));\n                if(!fluidStack.isEmpty()) {\n                    return ItemStack.EMPTY;\n                }\n                FoodCapability.applyTrait(output, FoodTraits.WOOD_GRILLED);", "                if(!fluidStack.isEmpty()) {\n                    return ItemStack.EMPTY;\n                }\n                FoodCapability.applyTrait(output, FoodTraits.WOOD_GRILLED);\n                if (!output.isEmpty()){\n                    output.setCount(inputStack.getCount());\n                    return output;\n                }else{\n                    return inputStack;\n                }\n            }\n        }\n        return inputStack;\n    }\n\n    @Inject(\n            method = {\"applyProcessing(Lcom/simibubi/create/content/kinetics/belt/transport/TransportedItemStack;Lnet/minecraft/world/level/Level;Lcom/simibubi/create/content/kinetics/fan/FanProcessing$Type;)Lcom/simibubi/create/content/kinetics/belt/behaviour/TransportedItemStackHandlerBehaviour$TransportedResult;\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )\n    private static void applyProcessing(TransportedItemStack transported, Level world, FanProcessing.Type type,CallbackInfoReturnable<TransportedItemStackHandlerBehaviour.TransportedResult> cir) {\n        CustomBlockConfig.registeredBlocks.forEach((s, blockInformation) -> {\n            System.out.println(s);\n        });\n\n        CustomBlockConfig.registeredBlocks.get(\"create:shaft\");\n\n        boolean hasHeat = transported.stack.getCapability(HeatCapability.CAPABILITY).isPresent();\n        boolean isUnburnable = transported.stack.is(ModTags.Items.UNBURNABLE);\n", "        if(isUnburnable) {\n            cir.setReturnValue(TransportedItemStackHandlerBehaviour.TransportedResult.doNothing());\n            return;\n        }\n\n        if (hasHeat && WoodenCogCommonConfigs.HANDLE_TEMPERATURE.get())\n        {\n            ItemStack oldStack = transported.stack;\n            ItemStack newStack = MixinFanProcessing.applyProcessingTCF(transported.stack, type);\n            if(newStack != null) {\n                if(newStack.isEmpty()) {\n                    cir.setReturnValue(TransportedItemStackHandlerBehaviour.TransportedResult.removeItem());\n                    return;\n                }", "            if(newStack != null) {\n                if(newStack.isEmpty()) {\n                    cir.setReturnValue(TransportedItemStackHandlerBehaviour.TransportedResult.removeItem());\n                    return;\n                }\n                if(oldStack.is(newStack.getItem())) {\n                    cir.setReturnValue(TransportedItemStackHandlerBehaviour.TransportedResult.doNothing());\n                    return;\n                } else {\n                    TransportedItemStack newTransportedStack = transported.getSimilar();\n                    newTransportedStack.stack = newStack;\n                    cir.setReturnValue(\n                            TransportedItemStackHandlerBehaviour.TransportedResult.convertTo(\n                                    newTransportedStack\n                            )\n                    );\n                    return;\n                }\n            }\n            cir.cancel();\n        }\n    }\n\n\n    @Inject(\n            method = {\"applyProcessing(Lnet/minecraft/world/entity/item/ItemEntity;Lcom/simibubi/create/content/kinetics/fan/FanProcessing$Type;)Z\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )\n    private static void applyProcessing(ItemEntity entity, FanProcessing.Type type, CallbackInfoReturnable<Boolean> cir) {\n\n        ItemStack inputStack = entity.getItem();\n\n\n        boolean hasHeat = inputStack.getCapability(HeatCapability.CAPABILITY).isPresent();\n        boolean isUnburnable = inputStack.is(ModTags.Items.UNBURNABLE);\n", "        if(isUnburnable) {\n            cir.cancel();\n        }\n\n        if (hasHeat && WoodenCogCommonConfigs.HANDLE_TEMPERATURE.get())\n        {\n            ItemStack result = MixinFanProcessing.applyProcessingTCF(inputStack,type);\n\n            if (result==null){\n                entity.kill();\n            }else{\n                entity.setItem(result);\n            }\n            cir.setReturnValue(false);\n            cir.cancel();\n        }\n    }\n}\n", "            if (result==null){\n                entity.kill();\n            }else{\n                entity.setItem(result);\n            }\n            cir.setReturnValue(false);\n            cir.cancel();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinCharcoalForgeBlock.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.mechanicalArm.ArmItem;\nimport net.dries007.tfc.common.blocks.devices.CharcoalForgeBlock;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.world.InteractionHand;\nimport net.minecraft.world.InteractionResult;\nimport net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;", "import net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.block.state.BlockState;\nimport net.minecraft.world.phys.BlockHitResult;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin({CharcoalForgeBlock.class})\npublic class MixinCharcoalForgeBlock {\n    public MixinCharcoalForgeBlock() {\n    }\n\n    @Inject(\n            method = {\"use\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )", "\n@Mixin({CharcoalForgeBlock.class})\npublic class MixinCharcoalForgeBlock {\n    public MixinCharcoalForgeBlock() {\n    }\n\n    @Inject(\n            method = {\"use\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )", "    public void use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit, CallbackInfoReturnable<InteractionResult> cir) {\n        ItemStack heldItem = player.getItemInHand(hand);\n        if (!heldItem.isEmpty() && heldItem.getItem() instanceof ArmItem) {\n            cir.setReturnValue(InteractionResult.FAIL);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinCrucibleBlock.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.mechanicalArm.ArmItem;\nimport net.dries007.tfc.common.blocks.devices.CrucibleBlock;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.world.InteractionHand;\nimport net.minecraft.world.InteractionResult;\nimport net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;", "import net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.block.state.BlockState;\nimport net.minecraft.world.phys.BlockHitResult;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin({CrucibleBlock.class})\npublic class MixinCrucibleBlock {\n    public MixinCrucibleBlock() {\n    }\n\n    @Inject(\n            method = {\"use\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )", "\n@Mixin({CrucibleBlock.class})\npublic class MixinCrucibleBlock {\n    public MixinCrucibleBlock() {\n    }\n\n    @Inject(\n            method = {\"use\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )", "    public void use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit, CallbackInfoReturnable<InteractionResult> cir) {\n        ItemStack heldItem = player.getItemInHand(hand);\n        if (!heldItem.isEmpty() && heldItem.getItem() instanceof ArmItem) {\n            cir.setReturnValue(InteractionResult.FAIL);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinBasinTileEntity.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.processing.basin.BasinBlockEntity;\nimport com.simibubi.create.content.processing.burner.BlazeBurnerBlock;\nimport com.simibubi.create.foundation.blockEntity.behaviour.BlockEntityBehaviour;\nimport com.simibubi.create.foundation.blockEntity.behaviour.fluid.SmartFluidTankBehaviour;\nimport net.dries007.tfc.common.blocks.devices.CharcoalForgeBlock;\nimport net.minecraft.world.level.block.state.BlockState;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;", "import org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.util.List;\n\n@Mixin(value = BasinBlockEntity.class, remap = false)\npublic abstract class MixinBasinTileEntity {\n", "\n@Mixin(value = BasinBlockEntity.class, remap = false)\npublic abstract class MixinBasinTileEntity {\n\n    @Shadow public SmartFluidTankBehaviour inputTank;\n    @Shadow private boolean contentsChanged;\n\n    public MixinBasinTileEntity() {\n    }\n\n\n    @Inject(method=\"addBehaviours\", at = @At(value = \"INVOKE\", target = \"Lcom/simibubi/create/foundation/blockEntity/behaviour/fluid/SmartFluidTankBehaviour;forbidInsertion()Lcom/simibubi/create/foundation/blockEntity/behaviour/fluid/SmartFluidTankBehaviour;\"))", "    public void addBehaviours(List<BlockEntityBehaviour> behaviours, CallbackInfo ci) {\n        this.inputTank = (new SmartFluidTankBehaviour(SmartFluidTankBehaviour.INPUT, (BasinBlockEntity)(Object)this, 4, 1000, true)).whenFluidUpdates(() -> {\n            this.contentsChanged = true;\n        });\n    }\n\n    @Inject(\n            method = {\"getHeatLevelOf\"},\n            at = {@At(\"HEAD\")},\n            cancellable = true\n    )\n    private static void getHeatLevelOf(BlockState state, CallbackInfoReturnable<BlazeBurnerBlock.HeatLevel> cir) {", "        if (state.getBlock() instanceof CharcoalForgeBlock) {\n            int heat = state.getValue(CharcoalForgeBlock.HEAT);\n            if (heat >= 7) {\n                cir.setReturnValue(BlazeBurnerBlock.HeatLevel.SEETHING);\n            } else if (heat >= 3) {\n                cir.setReturnValue(BlazeBurnerBlock.HeatLevel.KINDLED);\n            } else {\n                cir.setReturnValue(BlazeBurnerBlock.HeatLevel.NONE);\n            }\n        }\n\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinKineticBlock.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.base.IRotate;\nimport com.simibubi.create.content.kinetics.base.KineticBlock;\nimport com.simibubi.create.content.kinetics.base.KineticBlockEntity;\nimport net.chauvedev.woodencog.capability.MachineCapacity;\nimport net.chauvedev.woodencog.capability.MachineCapacityProvider;\nimport net.dries007.tfc.common.TFCTags;\nimport net.minecraft.client.resources.sounds.Sound;\nimport net.minecraft.core.BlockPos;", "import net.minecraft.client.resources.sounds.Sound;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.server.level.ServerPlayer;\nimport net.minecraft.sounds.SoundEvents;\nimport net.minecraft.sounds.SoundSource;\nimport net.minecraft.tags.TagKey;\nimport net.minecraft.world.InteractionHand;\nimport net.minecraft.world.InteractionResult;\nimport net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.item.ItemStack;", "import net.minecraft.world.entity.player.Player;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.entity.BlockEntity;\nimport net.minecraft.world.level.block.state.BlockState;\nimport net.minecraft.world.phys.BlockHitResult;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.fml.loading.FMLEnvironment;\nimport org.jetbrains.annotations.NotNull;", "import net.minecraftforge.fml.loading.FMLEnvironment;\nimport org.jetbrains.annotations.NotNull;\nimport org.spongepowered.asm.mixin.Mixin;\n\nimport java.util.Random;\n\n\n@Mixin(value= KineticBlock.class, remap = false)\npublic class MixinKineticBlock extends Block {\n\n    public MixinKineticBlock(Properties pProperties) {\n        super(pProperties);\n    }\n\n    @Override\n    public @NotNull InteractionResult use(BlockState pState, Level pLevel, BlockPos pPos, Player pPlayer, InteractionHand pHand, BlockHitResult pHit) {\n        BlockEntity blockEntity = pLevel.getBlockEntity(pPos);", "public class MixinKineticBlock extends Block {\n\n    public MixinKineticBlock(Properties pProperties) {\n        super(pProperties);\n    }\n\n    @Override\n    public @NotNull InteractionResult use(BlockState pState, Level pLevel, BlockPos pPos, Player pPlayer, InteractionHand pHand, BlockHitResult pHit) {\n        BlockEntity blockEntity = pLevel.getBlockEntity(pPos);\n        if (blockEntity instanceof KineticBlockEntity kineticBlockEntity) {\n            MachineCapacity capacity = kineticBlockEntity.getCapability(MachineCapacityProvider.MACHINE_CAPACITY).resolve().get();\n            ItemStack itemInHand = pPlayer.getMainHandItem();", "        if (blockEntity instanceof KineticBlockEntity kineticBlockEntity) {\n            MachineCapacity capacity = kineticBlockEntity.getCapability(MachineCapacityProvider.MACHINE_CAPACITY).resolve().get();\n            ItemStack itemInHand = pPlayer.getMainHandItem();\n            if(itemInHand.is(TFCTags.Items.HAMMERS)) {\n                if(capacity.isDestroyed()) {\n                    pLevel.playLocalSound(\n                            pPos.getX(),\n                            pPos.getY(),\n                            pPos.getZ(),\n                            SoundEvents.ITEM_BREAK,\n                            SoundSource.BLOCKS,\n                            1,\n                            1,\n                            false\n                    );\n                } else {\n                    capacity.setDurability(0);\n                    int durability_to_remove = (int)(capacity.getDurability() / 10) + 1;\n                    itemInHand.hurtAndBreak(durability_to_remove, pPlayer, (player -> player.broadcastBreakEvent(player.getUsedItemHand())));\n                    pLevel.playLocalSound(\n                            pPos.getX(),\n                            pPos.getY(),\n                            pPos.getZ(),\n                            SoundEvents.ANVIL_USE,\n                            SoundSource.BLOCKS,\n                            1,\n                            1,\n                            false\n                    );\n                }\n\n            }\n        }\n        return super.use(pState, pLevel, pPos, pPlayer, pHand, pHit);\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinBlockHelper.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.foundation.utility.BlockHelper;\nimport net.dries007.tfc.common.blockentities.BloomBlockEntity;\nimport net.dries007.tfc.common.blocks.BloomBlock;\nimport net.dries007.tfc.common.blocks.CharcoalPileBlock;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.server.level.ServerLevel;\nimport net.minecraft.world.entity.Entity;\nimport net.minecraft.world.item.ItemStack;", "import net.minecraft.world.entity.Entity;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.block.Block;\nimport net.minecraft.world.level.block.entity.BlockEntity;\nimport net.minecraft.world.level.block.state.BlockState;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Redirect;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n@Mixin({BlockHelper.class})\npublic class MixinBlockHelper {\n    public MixinBlockHelper() {\n    }\n\n    @Redirect(\n            method = {\"destroyBlockAs(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;FLjava/util/function/Consumer;)V\"},\n            at = @At(\n                    value = \"INVOKE\",\n                    target = \"Lnet/minecraft/world/level/block/Block;getDrops(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntity;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/item/ItemStack;)Ljava/util/List;\"\n            )\n    )\n    private static List<ItemStack> getDrops(BlockState pState, ServerLevel pLevel, BlockPos pPos, BlockEntity pBlockEntity, Entity pEntity, ItemStack pTool) {", "        if (pState.getBlock() instanceof CharcoalPileBlock) {\n            Iterator<ItemStack> drops = Block.getDrops(pState, pLevel, pPos, pBlockEntity, pEntity, pTool).iterator();\n            int layerCount = pState.getValue(CharcoalPileBlock.LAYERS);\n            List<ItemStack> tempList = new ArrayList();\n            ItemStack itemStack = drops.next();\n            itemStack.setCount(layerCount);\n            tempList.add(itemStack);\n            return tempList;\n        } else {\n            if (pState.getBlock() instanceof BloomBlock) {\n                int layerCount = pState.getValue(BloomBlock.LAYERS);\n                BloomBlockEntity bloomBlockEntity = (BloomBlockEntity)pLevel.getBlockEntity(pPos);", "            if (pState.getBlock() instanceof BloomBlock) {\n                int layerCount = pState.getValue(BloomBlock.LAYERS);\n                BloomBlockEntity bloomBlockEntity = (BloomBlockEntity)pLevel.getBlockEntity(pPos);\n                if (bloomBlockEntity != null) {\n                    for(int i = 0; i < layerCount; ++i) {\n                        bloomBlockEntity.dropBloom();\n                    }\n                }\n            }\n\n            return Block.getDrops(pState, pLevel, pPos, pBlockEntity, pEntity, pTool);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinNetheriteDivingHandler.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.equipment.armor.NetheriteDivingHandler;\nimport net.dries007.tfc.common.TFCArmorMaterials;\nimport net.minecraft.world.item.ArmorItem;\nimport net.minecraft.world.item.ArmorMaterials;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemStack;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;", "import org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;\n@Mixin(value = NetheriteDivingHandler.class, remap = false)\npublic class MixinNetheriteDivingHandler {\n\n    /**\n     * @author chauveDev\n     * @reason to handle redsteel as lavaImmune\n     */\n    @Overwrite()\n    public static boolean isNetheriteArmor(ItemStack stack) {\n        Item armor = stack.getItem();", "    public static boolean isNetheriteArmor(ItemStack stack) {\n        Item armor = stack.getItem();\n        if (armor instanceof ArmorItem armorItem) {\n            return armorItem.getMaterial() == TFCArmorMaterials.RED_STEEL || ((ArmorItem) armor).getMaterial() == ArmorMaterials.NETHERITE;\n        }\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinBasinRecipe.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.base.KineticBlockEntity;\nimport com.simibubi.create.content.processing.basin.BasinBlockEntity;\nimport com.simibubi.create.content.processing.basin.BasinOperatingBlockEntity;\nimport com.simibubi.create.content.processing.basin.BasinRecipe;\nimport com.simibubi.create.foundation.recipe.RecipeFinder;\nimport net.chauvedev.woodencog.WoodenCog;\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.world.item.crafting.Recipe;", "import net.minecraft.core.BlockPos;\nimport net.minecraft.world.item.crafting.Recipe;\nimport net.minecraft.world.level.block.entity.BlockEntityType;\nimport net.minecraft.world.level.block.state.BlockState;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;\nimport org.spongepowered.asm.mixin.Shadow;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Mixin(value = BasinOperatingBlockEntity.class, remap = false)\npublic abstract class MixinBasinRecipe extends KineticBlockEntity {\n    public MixinBasinRecipe(BlockEntityType<?> typeIn, BlockPos pos, BlockState state) {\n        super(typeIn, pos, state);\n    }\n\n    /**\n     * @author ChauveDev\n     * @reason This function didn't take in account the fluid ingredients which is pretty bad in a basin\n     */\n    @Overwrite\n    protected List<Recipe<?>> getMatchingRecipes() {", "        if (this.getBasin().map(BasinBlockEntity::isEmpty).orElse(true)) {\n            return new ArrayList();\n        } else {\n            List<Recipe<?>> list = RecipeFinder.get(this.getRecipeCacheKey(), this.level, this::matchStaticFilters);\n            return list.stream().filter(this::matchBasinRecipe).sorted((r1, r2) -> {\n                int r1Size = (r1.getIngredients().size() + ((BasinRecipe)r1).getFluidIngredients().size());\n                int r2Size = (r2.getIngredients().size() + ((BasinRecipe)r2).getFluidIngredients().size());\n                return r2Size - r1Size;\n            }).collect(Collectors.toList());\n        }\n    }\n\n    @Shadow() abstract boolean matchStaticFilters(Recipe<?> recipe);\n\n    @Shadow() abstract boolean matchBasinRecipe(Recipe<?> recipe);\n\n    @Shadow() abstract Object getRecipeCacheKey();\n\n    @Shadow() abstract Optional<BasinBlockEntity> getBasin();\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinKineticNetwork.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.kinetics.KineticNetwork;\nimport com.simibubi.create.content.kinetics.base.KineticBlockEntity;\nimport net.dries007.tfc.common.capabilities.heat.HeatCapability;\nimport net.dries007.tfc.common.capabilities.heat.IHeat;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;", "import org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(value = KineticNetwork.class, remap = false)\npublic abstract class MixinKineticNetwork {\n\n\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinBasinCategory.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.mojang.blaze3d.vertex.PoseStack;\nimport com.simibubi.create.compat.jei.category.BasinCategory;\nimport com.simibubi.create.content.processing.basin.BasinRecipe;\nimport com.simibubi.create.content.processing.recipe.HeatCondition;\nimport mezz.jei.api.gui.builder.IRecipeLayoutBuilder;\nimport mezz.jei.api.gui.ingredient.IRecipeSlotsView;\nimport mezz.jei.api.recipe.IFocusGroup;\nimport net.dries007.tfc.common.capabilities.heat.Heat;", "import mezz.jei.api.recipe.IFocusGroup;\nimport net.dries007.tfc.common.capabilities.heat.Heat;\nimport net.dries007.tfc.config.TFCConfig;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.Font;\nimport net.minecraft.network.chat.MutableComponent;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;", "import org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\n@Mixin({BasinCategory.class})\npublic abstract class MixinBasinCategory {\n    public MixinBasinCategory() {\n    }\n\n    @Inject(\n            method = {\"setRecipe(Lmezz/jei/api/gui/builder/IRecipeLayoutBuilder;Lcom/simibubi/create/content/processing/basin/BasinRecipe;Lmezz/jei/api/recipe/IFocusGroup;)V\"},\n            at = {@At(\n                    value = \"INVOKE\",\n                    target = \"Lcom/simibubi/create/content/processing/basin/BasinRecipe;getRequiredHeat()Lcom/simibubi/create/content/processing/recipe/HeatCondition;\"\n            )},\n            cancellable = true,\n            remap = false\n    )", "    public void addSlotBlazeBurner(IRecipeLayoutBuilder builder, BasinRecipe recipe, IFocusGroup focuses, CallbackInfo ci) {\n        ci.cancel();\n    }\n\n    @Inject(\n            method = {\"draw(Lcom/simibubi/create/content/processing/basin/BasinRecipe;Lmezz/jei/api/gui/ingredient/IRecipeSlotsView;Lcom/mojang/blaze3d/vertex/PoseStack;DD)V\"},\n            at = {@At(\n                    value = \"INVOKE\",\n                    target = \"Lnet/minecraft/client/gui/Font;draw(Lcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/network/chat/Component;FFI)I\"\n            )},\n            cancellable = true\n    )\n    private void draw(BasinRecipe recipe, IRecipeSlotsView recipeSlotsView, PoseStack matrixStack, double mouseX, double mouseY, CallbackInfo ci) {\n        HeatCondition requiredHeat = recipe.getRequiredHeat();", "        if (requiredHeat != HeatCondition.NONE) {\n            int heat = requiredHeat == HeatCondition.HEATED ? 7 : 10;\n            MutableComponent color = TFCConfig.CLIENT.heatTooltipStyle.get().formatColored(Heat.values()[heat].getMin());\n            if (color != null) {\n                Minecraft mc = Minecraft.getInstance();\n                Font font = mc.font;\n                font.draw(matrixStack, color, 9.0F, 86.0F, 16777215);\n            }\n\n            ci.cancel();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinBasin.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.processing.basin.BasinRecipe;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Overwrite;\n\n@Mixin(value = BasinRecipe.class, remap = false)\npublic abstract class MixinBasin {\n\n    /**\n     * @author\n     * @reason allow more fluids input for tfc\n     */\n    @Overwrite()\n    protected int getMaxFluidInputCount() {\n        return 4;\n    }\n}\n"]}
{"filename": "src/main/java/net/chauvedev/woodencog/mixin/MixinFilterItem.java", "chunked_list": ["package net.chauvedev.woodencog.mixin;\n\nimport com.simibubi.create.content.logistics.filter.FilterItem;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.Level;\nimport net.minecraftforge.fluids.FluidStack;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;", "import org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\n@Mixin(value = FilterItem.class, remap = false)\npublic class MixinFilterItem {\n\n    /**\n     * Trick to enable bucket filter for tfc\n     */\n    @Inject(\n            method = {\"test(Lnet/minecraft/world/level/Level;Lnet/minecraftforge/fluids/FluidStack;Lnet/minecraft/world/item/ItemStack;Z)Z\"},\n            at = {@At(\n                    value = \"INVOKE\",\n                    target = \"Lnet/minecraft/world/item/ItemStack;isEmpty()Z\"\n            )},\n            remap = false\n    )\n    private static void test(Level world, FluidStack stack, ItemStack filter, boolean matchNBT, CallbackInfoReturnable<Boolean> cir){", "        if(stack.getTag() != null) {\n            if(stack.getTag().isEmpty()) {\n                stack.setTag(null);\n            }\n        }\n    }\n}\n"]}
