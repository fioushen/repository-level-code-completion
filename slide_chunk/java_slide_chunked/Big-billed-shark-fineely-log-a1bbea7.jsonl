{"filename": "src/test/java/com/fineelyframework/log/FineelyLogApplicationTests.java", "chunked_list": ["package com.fineelyframework.log;\n\nclass FineelyLogApplicationTests {\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/resolver/FineelyHandlerMethodArgumentResolver.java", "chunked_list": ["package com.fineelyframework.log.resolver;\n\nimport com.fineelyframework.log.annotation.FineelyParam;\nimport com.fineelyframework.log.entity.ParamMap;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.web.bind.support.WebDataBinderFactory;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.method.support.ModelAndViewContainer;\n\npublic class FineelyHandlerMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    @Override", "import org.springframework.web.method.support.ModelAndViewContainer;\n\npublic class FineelyHandlerMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(FineelyParam.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        return new ParamMap();\n    }\n}\n", "    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        return new ParamMap();\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/entity/MethodLogEntity.java", "chunked_list": ["package com.fineelyframework.log.entity;\n\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport java.time.LocalDateTime;\n\npublic class MethodLogEntity {\n\n    private RequestMethod[] method;\n    private String methodName;\n    private String module;\n    private String url;\n    private String desc;\n    private LocalDateTime startTime;\n    private LocalDateTime endTime;\n    private double timeConsuming;\n    private String allParams;\n    private String result;\n    private String ipAddress;\n    private String exceptionInfo;\n    private String operator;\n    private LocalDateTime createTime;\n", "    public String getOperator() {\n        return operator;\n    }\n\n    public void setOperator(String operator) {\n        this.operator = operator;\n    }\n\n    public String getMethodName() {\n        return methodName;\n    }\n", "    public String getMethodName() {\n        return methodName;\n    }\n\n    public void setMethodName(String methodName) {\n        this.methodName = methodName;\n    }\n\n    public String getAllParams() {\n        return allParams;\n    }\n", "    public String getAllParams() {\n        return allParams;\n    }\n\n    public void setAllParams(String allParams) {\n        this.allParams = allParams;\n    }\n\n    public RequestMethod[] getMethod() {\n        return method;\n    }\n", "    public void setMethod(RequestMethod[] method) {\n        this.method = method;\n    }\n\n    public String getModule() {\n        return module;\n    }\n\n    public void setModule(String module) {\n        this.module = module;\n    }\n", "    public void setModule(String module) {\n        this.module = module;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n", "    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n", "    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n\n    public LocalDateTime getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(LocalDateTime startTime) {\n        this.startTime = startTime;\n    }\n", "    public void setStartTime(LocalDateTime startTime) {\n        this.startTime = startTime;\n    }\n\n    public LocalDateTime getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(LocalDateTime endTime) {\n        this.endTime = endTime;\n    }\n", "    public void setEndTime(LocalDateTime endTime) {\n        this.endTime = endTime;\n    }\n\n    public double getTimeConsuming() {\n        return timeConsuming;\n    }\n\n    public void setTimeConsuming(double timeConsuming) {\n        this.timeConsuming = timeConsuming;\n    }\n", "    public void setTimeConsuming(double timeConsuming) {\n        this.timeConsuming = timeConsuming;\n    }\n\n    public String getResult() {\n        return result;\n    }\n\n    public void setResult(String result) {\n        this.result = result;\n    }\n", "    public void setResult(String result) {\n        this.result = result;\n    }\n\n    public String getIpAddress() {\n        return ipAddress;\n    }\n\n    public void setIpAddress(String ipAddress) {\n        this.ipAddress = ipAddress;\n    }\n", "    public void setIpAddress(String ipAddress) {\n        this.ipAddress = ipAddress;\n    }\n\n    public String getExceptionInfo() {\n        return exceptionInfo;\n    }\n\n    public void setExceptionInfo(String exceptionInfo) {\n        this.exceptionInfo = exceptionInfo;\n    }\n", "    public void setExceptionInfo(String exceptionInfo) {\n        this.exceptionInfo = exceptionInfo;\n    }\n\n    public LocalDateTime getCreateTime() {\n        return createTime;\n    }\n\n    public void setCreateTime(LocalDateTime createTime) {\n        this.createTime = createTime;\n    }\n\n    @Override", "    public void setCreateTime(LocalDateTime createTime) {\n        this.createTime = createTime;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder value = new StringBuilder();\n        value.append(\"{\\\"allParams\\\":\\\"\").append(allParams)\n                .append(\"\\\",\\\"createTime\\\":\\\"\").append(localDateTimeToString(createTime))\n                .append(\"\\\",\\\"desc\\\":\\\"\").append(desc)\n                .append(\"\\\",\\\"endTime\\\":\\\"\").append(localDateTimeToString(endTime))\n                .append(\"\\\",\\\"ipAddress\\\":\\\"\").append(ipAddress)\n                .append(\"\\\",\\\"method\\\":\").append(arraysToString(method))\n                .append(\",\\\"methodName\\\":\\\"\").append(methodName)\n                .append(\"\\\",\\\"module\\\":\\\"\").append(module)\n                .append(\"\\\",\\\"operator\\\":\\\"\").append(operator)\n                .append(\"\\\",\\\"result\\\":\\\"\").append(result)\n                .append(\"\\\",\\\"startTime\\\":\\\"\").append(localDateTimeToString(startTime))\n                .append(\"\\\",\\\"timeConsuming\\\":\").append(timeConsuming)\n                .append(\",\\\"url\\\":\\\"\").append(url).append(\"\\\"}\");\n        return value.toString();\n    }\n\n    private String localDateTimeToString(LocalDateTime localDateTime) {\n        return localDateTime.toString().replace(\"T\", \" \");\n    }\n\n    private String arraysToString(Object[] a) {\n        // [\"GET\"]", "        if (a == null)\n            return \"\";\n\n        int iMax = a.length - 1;\n        if (iMax == -1)\n            return \"[]\";\n\n        StringBuilder b = new StringBuilder();\n        b.append('[');\n        for (int i = 0; ; i++) {\n            b.append(\"\\\"\").append(a[i]).append(\"\\\"\");", "        for (int i = 0; ; i++) {\n            b.append(\"\\\"\").append(a[i]).append(\"\\\"\");\n            if (i == iMax)\n                return b.append(']').toString();\n            b.append(\",\");\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/entity/ParamMap.java", "chunked_list": ["package com.fineelyframework.log.entity;\n\nimport java.util.HashMap;\n\npublic class ParamMap extends HashMap<String, Object> {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/strategy/ObjectAnalyzeStrategy.java", "chunked_list": ["package com.fineelyframework.log.strategy;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**", "\n/**\n * \u5bf9\u8c61\u89e3\u6790\u7b56\u7565\n * \u901a\u8fc7\u53c2\u6570map\u4e2d\u7684\u5bf9\u8c61\u4e2d\u6240\u6709\u7684\u5c5e\u6027 \u6784\u5efa\u6210 \u53ef\u66ff\u6362map\uff0c\u8fdb\u884c\u66ff\u6362\n * \u6d4b\u8bd5\u5728\u5c5e\u6027\u5c42\u7ea73\u5c42\u4e2d 6\u4e2a\u5c5e\u6027\u503c\u4e3a 8-9ms\n * \u5728\u5c5e\u6027\u5c11\u7684\u60c5\u51b5\u4e0b\u65f6\u95f4\u8d8a\u77ed\n * \u6682\u65f6\u4e0d\u652f\u6301\u6570\u7ec4\u4e0d\u63a8\u8350\u4f7f\u7528\n * @deprecated \u672a\u5b9e\u73b0list\u89e3\u6790\n */\n@Deprecated\npublic class ObjectAnalyzeStrategy extends ReplaceStrategy implements Termination {\n\n    @Override", " */\n@Deprecated\npublic class ObjectAnalyzeStrategy extends ReplaceStrategy implements Termination {\n\n    @Override\n    public Termination execute(String content) {\n        this.content = content;\n        return this;\n    }\n\n    @Override", "    public void appendParamMap(String key, Object obj) {\n        handleLevel(key, paramMap, new HashMap<>((JSONObject) obj));\n    }\n\n    @Override\n    public void appendParamMap(Map<String, Object> paramMap) {\n        handleLevel(\"\", this.paramMap, paramMap);\n    }\n\n    @Override\n    public String complete() {\n        return handleContent(paramMap, content);\n    }\n\n    /**\n     * \u9012\u5f52\u901a\u8fc7\u53c2\u6570map\u6784\u5efa\u53ef\u66ff\u6362\u7684map\n     */\n    private Map<String, Object> handleLevel(String placeholder, Map<String, Object> parameter, Map<String, Object> map) {", "    public String complete() {\n        return handleContent(paramMap, content);\n    }\n\n    /**\n     * \u9012\u5f52\u901a\u8fc7\u53c2\u6570map\u6784\u5efa\u53ef\u66ff\u6362\u7684map\n     */\n    private Map<String, Object> handleLevel(String placeholder, Map<String, Object> parameter, Map<String, Object> map) {\n        if (Objects.nonNull(map) && !map.isEmpty()) {\n            map.forEach((key, value) -> {\n                String pla = StringUtils.isBlank(placeholder) ? key : placeholder + \".\" + key;\n                parameter.put(pla, value);", "        if (Objects.nonNull(map) && !map.isEmpty()) {\n            map.forEach((key, value) -> {\n                String pla = StringUtils.isBlank(placeholder) ? key : placeholder + \".\" + key;\n                parameter.put(pla, value);\n                if (value instanceof JSONObject) {\n                    handleLevel(pla, parameter, new HashMap<>(((JSONObject) value)));\n                }\n            });\n        }\n        return parameter;\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/strategy/SimpleStrategy.java", "chunked_list": ["package com.fineelyframework.log.strategy;\n\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\n", "import java.util.regex.Matcher;\n\n/**\n * \u7b80\u5355\u7b56\u7565\n * \u6d4b\u8bd5 \u5e73\u57478\u30019ms\n * \u7efc\u5408\u5e73\u5747\u503c\n */\npublic class SimpleStrategy extends ReplaceStrategy implements Termination {\n\n    @Override\n    public Termination execute(String content) {\n        this.content = content;\n        return this;\n    }\n\n    @Override", "    public Termination execute(String content) {\n        this.content = content;\n        return this;\n    }\n\n    @Override\n    public void appendParamMap(String key, Object obj) {\n        paramMap.put(key, obj);\n    }\n\n    @Override", "    public void appendParamMap(Map<String, Object> paramMap) {\n        this.paramMap.putAll(paramMap);\n    }\n\n    @Override\n    public String complete() {\n        return resolveParamMap();\n    }\n\n    private String resolveParamMap() {\n        Map<String, Object> result = new HashMap<>();\n        Matcher matcher = pattern.matcher(content);\n        // \u5904\u7406\u5339\u914d\u5230\u7684\u503c", "        while (matcher.find()) {\n            String group = matcher.group();\n            // \u79fb\u9664\"${\"   \u548c   \"}\"\n            group = group.replace(\"${\", \"\").replace(\"}\", \"\");\n            if (result.containsKey(group)) {\n                break;\n            }\n            // \u4ee5.\u5207\u5272\n            String[] split = group.split(\"\\\\.\");\n            Object parent = null;\n            StringBuilder parentKey = null;", "            for (String s : split) {\n                int arrayIndex = getArrayIndex(s);\n                String key = arrayIndex != -1 ? s.replaceAll(\"\\\\[.*\", \"\") : s;\n                // \u6709\u5e8f\u6811\u7236\u8282\u70b9\u4e3a\u7a7a\u65f6\u521b\u5efa\u7236\u8282\u70b9\n                if (Objects.isNull(parent)) {\n                    // \u627e\u6811\u6839\u662f\u5426\u5b58\u5728\u8fc7\n                    parent = paramMap.get(key);\n                    if (arrayIndex != -1 && parent instanceof JSONArray) {\n                        parent = ((JSONArray) parent).get(arrayIndex);\n                    }\n                    parentKey = new StringBuilder(s);\n                    result.put(s, parent);\n                    // \u6700\u9876\u5c42\u6ca1\u6709\uff0c\u610f\u5473\u7740\u91cc\u9762\u540c\u6837\u6ca1\u6709", "                    if (Objects.isNull(parent))\n                        break;\n                } else {\n                    HashMap<String, Object> parentMap = new HashMap<>((JSONObject) parent);\n                    parent = parentMap.get(key);\n                    parentKey.append(\".\").append(s);\n                    if (arrayIndex != -1 && parent instanceof JSONArray) {\n                        parent = ((JSONArray) parent).get(arrayIndex);\n                    }\n                    result.put(parentKey.toString(), parent);\n                }\n            }\n        }\n        return handleContent(result, content);\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/strategy/Termination.java", "chunked_list": ["package com.fineelyframework.log.strategy;\n\n/**\n * \u7ec8\u6b62\n */\npublic interface Termination {\n\n    String complete();\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/strategy/ReplaceStrategy.java", "chunked_list": ["package com.fineelyframework.log.strategy;\n\n\nimport org.apache.commons.text.StringSubstitutor;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic abstract class ReplaceStrategy {\n\n    protected Pattern pattern = Pattern.compile(\"\\\\$\\\\{(.*?)}\");\n    protected Pattern arrayPattern = Pattern.compile(\".*?\\\\[\\\\d\\\\]\");\n\n    protected String content;\n\n    protected Map<String, Object> paramMap = new HashMap<>();\n", "import java.util.regex.Pattern;\n\npublic abstract class ReplaceStrategy {\n\n    protected Pattern pattern = Pattern.compile(\"\\\\$\\\\{(.*?)}\");\n    protected Pattern arrayPattern = Pattern.compile(\".*?\\\\[\\\\d\\\\]\");\n\n    protected String content;\n\n    protected Map<String, Object> paramMap = new HashMap<>();\n", "    public abstract Termination execute(String content);\n\n    public abstract void appendParamMap(String key, Object obj);\n\n    public abstract void appendParamMap(Map<String, Object> paramMap);\n\n    public Map<String, Object> getParamMap() {\n        return paramMap;\n    }\n\n    public Object getParamObject(String key) {\n        return paramMap.get(key);\n    }\n\n    protected String handleContent(Map<String, Object> result, String str) {\n        StringSubstitutor stringSubstitutor = new StringSubstitutor(result);\n        return stringSubstitutor.replace(str);\n    }\n\n    protected int getArrayIndex(String value) {\n        Matcher matcher = arrayPattern.matcher(value);", "    public Object getParamObject(String key) {\n        return paramMap.get(key);\n    }\n\n    protected String handleContent(Map<String, Object> result, String str) {\n        StringSubstitutor stringSubstitutor = new StringSubstitutor(result);\n        return stringSubstitutor.replace(str);\n    }\n\n    protected int getArrayIndex(String value) {\n        Matcher matcher = arrayPattern.matcher(value);", "        if (matcher.find()) {\n            String index = value.replaceAll(\".*?\\\\[\", \"\").replaceAll(\"]\", \"\");\n            return Integer.parseInt(index);\n        } else {\n            return -1;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/utils/MethodLogUtils.java", "chunked_list": ["package com.fineelyframework.log.utils;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.log.entity.ParamMap;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;", "import javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.Objects;\n\npublic class MethodLogUtils {\n\n    public static HttpServletRequest getRequest() {\n        try {\n            ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n            return attributes.getRequest();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n", "    public static String getIpAddress(HttpServletRequest request) {\n        try {\n            return IpUtil.getIpAddress(request);\n        } catch (Exception e) {\n            return \"Get failure\";\n        }\n    }\n\n    public static String getReturning(Object returning) {\n        try {\n            return JSONObject.toJSONString(returning);\n        } catch (Exception e) {\n            return \"Get failure\";\n        }\n    }\n", "    public static String getReturning(Object returning) {\n        try {\n            return JSONObject.toJSONString(returning);\n        } catch (Exception e) {\n            return \"Get failure\";\n        }\n    }\n\n    public static String getArgsContent(Object[] args) {\n        if (Objects.isNull(args) || args.length == 0) {\n            return null;\n        }", "    public static String getArgsContent(Object[] args) {\n        if (Objects.isNull(args) || args.length == 0) {\n            return null;\n        }\n        try {\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0; i < args.length; i++) {\n                Object arg = args[i];\n                if (arg == null || arg instanceof ParamMap || arg instanceof HttpServletRequest || arg instanceof HttpServletResponse) {\n                    continue;\n                }\n                builder.append(arg instanceof String ? arg : JSONObject.from(arg).toJSONString());", "                if (arg == null || arg instanceof ParamMap || arg instanceof HttpServletRequest || arg instanceof HttpServletResponse) {\n                    continue;\n                }\n                builder.append(arg instanceof String ? arg : JSONObject.from(arg).toJSONString());\n                if (i < args.length - 1) {\n                    builder.append(\",\");\n                }\n            }\n            String parameter = builder.toString();\n            if (StringUtils.isBlank(parameter)) {\n                return null;\n            }\n            return parameter;\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n}\n", "            if (StringUtils.isBlank(parameter)) {\n                return null;\n            }\n            return parameter;\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/utils/IpUtil.java", "chunked_list": ["package com.fineelyframework.log.utils;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Objects;\n\npublic abstract class IpUtil {\n\n    private static final String IPV4 = \"ipv4\";\n\n    private static final String IPV6 = \"ipv6\";\n\n    private IpUtil() {\n\n    }\n", "\npublic abstract class IpUtil {\n\n    private static final String IPV4 = \"ipv4\";\n\n    private static final String IPV6 = \"ipv6\";\n\n    private IpUtil() {\n\n    }\n", "    public static long ipToLong(String ipv4) {\n        String[] splits = ipv4.split(\"\\\\.\");\n        long l = 0;\n        l = l + (Long.valueOf(splits[0], 10)) << 24;\n        l = l + (Long.valueOf(splits[1], 10)) << 16;\n        l = l + (Long.valueOf(splits[2], 10)) << 8;\n        l = l + (Long.valueOf(splits[3], 10));\n        return l;\n    }\n\n    public static BigInteger ipv6ToInt(String ipv6) {\n        int compressIndex = ipv6.indexOf(\"::\");", "    public static BigInteger ipv6ToInt(String ipv6) {\n        int compressIndex = ipv6.indexOf(\"::\");\n        if (compressIndex != -1) {\n            String part1s = ipv6.substring(0, compressIndex);\n            String part2s = ipv6.substring(compressIndex + 1);\n            BigInteger part1 = ipv6ToInt(part1s);\n            BigInteger part2 = ipv6ToInt(part2s);\n            int part1hasDot = 0;\n            char ch[] = part1s.toCharArray();\n            for (char c : ch) {\n                if (c == ':') {\n                    part1hasDot++;\n                }\n            }\n            return part1.shiftLeft(16 * (7 - part1hasDot)).add(part2);\n        }\n        String[] str = ipv6.split(\":\");\n        BigInteger big = BigInteger.ZERO;", "            for (char c : ch) {\n                if (c == ':') {\n                    part1hasDot++;\n                }\n            }\n            return part1.shiftLeft(16 * (7 - part1hasDot)).add(part2);\n        }\n        String[] str = ipv6.split(\":\");\n        BigInteger big = BigInteger.ZERO;\n        for (int i = 0; i < str.length; i++) {\n            //::1", "        for (int i = 0; i < str.length; i++) {\n            //::1\n            if (str[i].isEmpty()) {\n                str[i] = \"0\";\n            }\n            big = big.add(BigInteger.valueOf(Long.valueOf(str[i], 16)).shiftLeft(16 * (str.length - i - 1)));\n        }\n        return big;\n    }\n\n    public static String getIpAddress(HttpServletRequest request) {", "    public static String getIpAddress(HttpServletRequest request) {\n        if (Objects.isNull(request)) {\n            return \"\";\n        }\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }", "        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"HTTP_CLIENT_IP\");\n        }\n        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\n        }\n        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }", "        if (StringUtils.isBlank(ip) || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        if (ip != null && ip.contains(\",\")) {\n            String[] split = ip.split(\",\");\n            ip = Arrays.stream(split).filter(s -> !\"unknown\".equalsIgnoreCase(s)).findFirst().orElse(ip);\n        }\n        if (StringUtils.isBlank(ip)) {\n            ip = \"127.0.0.1\";\n        }\n        return ip;\n    }\n", "    public static String checkIpv4OrIpv6(String ip) {\n        if (StringUtils.isBlank(ip)) {\n            return null;\n        }\n        if (ip.contains(\":\")) {\n            return IPV6;\n        }\n        return IPV4;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/KafkaMethodLogDaoImpl.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.log.config.FineelyKafkaConfig;\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport org.springframework.kafka.core.KafkaTemplate;\n\nimport javax.annotation.Resource;\n\npublic class KafkaMethodLogDaoImpl implements MethodLogDao {\n\n    @Resource\n    private KafkaTemplate<String, String> kafkaClient;\n\n    @Resource\n    private FineelyKafkaConfig fineelyKafkaConfig;\n\n    @Override", "\npublic class KafkaMethodLogDaoImpl implements MethodLogDao {\n\n    @Resource\n    private KafkaTemplate<String, String> kafkaClient;\n\n    @Resource\n    private FineelyKafkaConfig fineelyKafkaConfig;\n\n    @Override\n    public boolean saveLog(MethodLogEntity methodLogEntity) {\n        kafkaClient.send(fineelyKafkaConfig.getTopic(), JSONObject.toJSONString(methodLogEntity));\n        return true;\n    }\n\n}\n", "    public boolean saveLog(MethodLogEntity methodLogEntity) {\n        kafkaClient.send(fineelyKafkaConfig.getTopic(), JSONObject.toJSONString(methodLogEntity));\n        return true;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/QueueMethodLogDaoImpl.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport com.fineelyframework.log.queue.QueueOperator;\n\nimport java.util.concurrent.LinkedTransferQueue;\n\npublic class QueueMethodLogDaoImpl implements MethodLogDao {\n\n    @Override\n    public boolean saveLog(MethodLogEntity methodLogEntity) {\n        QueueOperator.INSTANCE.getOplogQueue().add(methodLogEntity);\n        return true;\n    }\n\n}\n", "    public boolean saveLog(MethodLogEntity methodLogEntity) {\n        QueueOperator.INSTANCE.getOplogQueue().add(methodLogEntity);\n        return true;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/FineelyLogFeignImpl.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n@Component", "\n@Component\n@ConditionalOnProperty(prefix = \"fineely.log\", name = \"storage-mode\", havingValue = \"feign\")\npublic class FineelyLogFeignImpl implements FineelyLogFeign {\n\n\n    @Override\n    public boolean saveAll(List<MethodLogEntity> methodLogEntities) {\n        return false;\n    }\n\n    @Override", "    public boolean save(MethodLogEntity methodLogEntity) {\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/MethodLogDao.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\n\npublic interface MethodLogDao {\n\n     boolean saveLog(MethodLogEntity methodLogEntity);\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/FeignMethodLogDaoImpl.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\n\nimport javax.annotation.Resource;\n\npublic class FeignMethodLogDaoImpl implements MethodLogDao {\n\n    @Resource\n    private FineelyLogFeign fineelyLogFeign;\n\n    @Override", "    public boolean saveLog(MethodLogEntity methodLogEntity) {\n        return fineelyLogFeign.save(methodLogEntity);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/dao/FineelyLogFeign.java", "chunked_list": ["package com.fineelyframework.log.dao;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\nimport java.util.List;\n", "import java.util.List;\n\n@ConditionalOnProperty(prefix = \"fineely.log\", name = \"storage-mode\", havingValue = \"feign\")\n@FeignClient(name = \"${fineely.log.feign.name}\", path = \"${fineely.log.feign.path}\", url = \"${fineely.log.feign.url:}\")\npublic interface FineelyLogFeign {\n\n    @PostMapping(value = \"/saveAll\")\n    boolean saveAll(@RequestBody List<MethodLogEntity> methodLogEntities);\n\n    @PostMapping(value = \"/save\")\n    boolean save(@RequestBody MethodLogEntity methodLogEntity);\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/config/FineelyKafkaConfig.java", "chunked_list": ["package com.fineelyframework.log.config;\n\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * fineely\u914d\u7f6e\u7c7b\n */", " * fineely\u914d\u7f6e\u7c7b\n */\n@Configuration\n@ConfigurationProperties(prefix = \"fineely.log.kafka\")\n@ConditionalOnProperty(prefix = \"fineely.log\", name = \"storage-mode\", havingValue = \"kafka\")\n@AutoConfigureBefore(FineelyConfig.class)\npublic class FineelyKafkaConfig {\n\n    private String kafkaBrokers;\n    private String topic = \"fineely-log\";\n\n    @Bean(name = \"kafkaClient\")\n    @ConditionalOnMissingBean(name = \"kafkaClient\")\n    public KafkaTemplate<String, String> kafkaTemplate() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, this.kafkaBrokers);\n        configs.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432);\n        configs.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 10);\n        configs.put(ProducerConfig.RETRIES_CONFIG, 0);\n        configs.put(ProducerConfig.BATCH_SIZE_CONFIG, 16384);\n        configs.put(ProducerConfig.LINGER_MS_CONFIG, 100);\n        configs.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        configs.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        DefaultKafkaProducerFactory<String, String> defaultKafkaProducerFactory = new DefaultKafkaProducerFactory<>(configs);\n        return new KafkaTemplate<>(defaultKafkaProducerFactory);\n    }\n", "    public String getKafkaBrokers() {\n        return kafkaBrokers;\n    }\n\n    public void setKafkaBrokers(String kafkaBrokers) {\n        this.kafkaBrokers = kafkaBrokers;\n    }\n\n    public String getTopic() {\n        return topic;\n    }\n", "    public String getTopic() {\n        return topic;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/config/FineelyConfig.java", "chunked_list": ["package com.fineelyframework.log.config;\n\nimport com.fineelyframework.log.aspect.DefaultMethodLogHandler;\nimport com.fineelyframework.log.aspect.MethodLogHandler;\nimport com.fineelyframework.log.dao.FeignMethodLogDaoImpl;\nimport com.fineelyframework.log.dao.KafkaMethodLogDaoImpl;\nimport com.fineelyframework.log.dao.MethodLogDao;\nimport com.fineelyframework.log.dao.QueueMethodLogDaoImpl;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;", "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * fineely\u914d\u7f6e\u7c7b\n */\n@Configuration\n@ConfigurationProperties(prefix = \"fineely.log\")\npublic class FineelyConfig {\n\n    private String storageMode = \"default\";\n\n    @Bean\n    @ConditionalOnMissingBean", "@Configuration\n@ConfigurationProperties(prefix = \"fineely.log\")\npublic class FineelyConfig {\n\n    private String storageMode = \"default\";\n\n    @Bean\n    @ConditionalOnMissingBean\n    public MethodLogHandler methodLogHandler() {\n        return new DefaultMethodLogHandler();\n    }\n\n    @Bean\n    @ConditionalOnMissingBean", "    public MethodLogHandler methodLogHandler() {\n        return new DefaultMethodLogHandler();\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public MethodLogDao methodLogDao() {\n        switch (storageMode) {\n            case \"feign\":\n                return new FeignMethodLogDaoImpl();\n            case \"kafka\":\n                return new KafkaMethodLogDaoImpl();\n            default:\n                return new QueueMethodLogDaoImpl();\n        }\n    }\n", "    public String getStorageMode() {\n        return storageMode;\n    }\n\n    public void setStorageMode(String storageMode) {\n        this.storageMode = storageMode;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/config/FineelyWebConfig.java", "chunked_list": ["package com.fineelyframework.log.config;\n\nimport com.fineelyframework.log.resolver.FineelyHandlerMethodArgumentResolver;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.List;\n\n@Configuration\npublic class FineelyWebConfig implements WebMvcConfigurer {\n\n    @Override", "\n@Configuration\npublic class FineelyWebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        argumentResolvers.add(new FineelyHandlerMethodArgumentResolver());\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/constants/CommonConstants.java", "chunked_list": ["package com.fineelyframework.log.constants;\n\n/**\n * \u5e38\u7528\u5e38\u91cf\n */\npublic class CommonConstants {\n\n    /**\n     * \u65e5\u5fd7\u5b58\u50a8\u64cd\u4f5c\u5458\n     */\n    public static final String FINEELY_LOG_OPERATOR = \"fineely_log_operator\";\n\n}\n", "    public static final String FINEELY_LOG_OPERATOR = \"fineely_log_operator\";\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/exception/FineelyLogException.java", "chunked_list": ["package com.fineelyframework.log.exception;\n\npublic class FineelyLogException extends RuntimeException {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/aspect/DefaultMethodLogHandler.java", "chunked_list": ["package com.fineelyframework.log.aspect;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.log.annotation.FineelyLog;\nimport com.fineelyframework.log.annotation.FineelyLogMapping;\nimport com.fineelyframework.log.constants.CommonConstants;\nimport com.fineelyframework.log.dao.MethodLogDao;\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport com.fineelyframework.log.entity.ParamMap;\nimport com.fineelyframework.log.exception.FineelyLogException;", "import com.fineelyframework.log.entity.ParamMap;\nimport com.fineelyframework.log.exception.FineelyLogException;\nimport com.fineelyframework.log.strategy.ReplaceStrategy;\nimport com.fineelyframework.log.strategy.SimpleStrategy;\nimport com.fineelyframework.log.utils.MethodLogUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.web.bind.annotation.RequestMethod;", "import org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport java.lang.reflect.Method;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.HashMap;", "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\npublic class DefaultMethodLogHandler implements MethodLogHandler {\n\n    @Resource\n    private MethodLogDao methodLogDao;\n\n    @Override", "    public Object interceptorHandler(ProceedingJoinPoint point) throws Throwable {\n        LocalDateTime startTime = LocalDateTime.now();\n        long start = System.currentTimeMillis();\n        Object result = point.proceed();\n        long end = System.currentTimeMillis();\n        LocalDateTime endTime = LocalDateTime.now();\n        handleOpenApiLog(point, result, startTime, endTime, end - start, null);\n        return result;\n    }\n\n    @Override", "    public void printExceptionHandler(JoinPoint point, FineelyLogException ex) {\n        LocalDateTime startTime = LocalDateTime.now();\n        String message = ex.getMessage();\n        StackTraceElement[] stackTrace = ex.getStackTrace();\n        String stackTraceMsg = Arrays.stream(stackTrace).map(StackTraceElement::toString).collect(Collectors.joining(\"  \"));\n        String errorResult = String.format(\"message: %s; stackTraceMsg: %s\", message, stackTraceMsg);\n        handleOpenApiLog(point, null, startTime, null, 0, errorResult);\n    }\n\n    @Override\n    public void handleOpenApiLog(JoinPoint point, Object result,\n                                 LocalDateTime startTime, LocalDateTime endTime, double timeConsuming, String exceptionInfo) {\n        MethodSignature methodSignature = (MethodSignature) point.getSignature();\n        String methodName = methodSignature.getName();\n        HttpServletRequest request = MethodLogUtils.getRequest();\n        String ipAddress = MethodLogUtils.getIpAddress(request);\n        String args = MethodLogUtils.getArgsContent(point.getArgs());\n        String returning = MethodLogUtils.getReturning(result);\n        Method method = methodSignature.getMethod();\n        String desc;\n        RequestMethod[] methods;\n        String module;\n        String url;\n        FineelyLog fineelyLog = method.getAnnotation(FineelyLog.class);", "    public void handleOpenApiLog(JoinPoint point, Object result,\n                                 LocalDateTime startTime, LocalDateTime endTime, double timeConsuming, String exceptionInfo) {\n        MethodSignature methodSignature = (MethodSignature) point.getSignature();\n        String methodName = methodSignature.getName();\n        HttpServletRequest request = MethodLogUtils.getRequest();\n        String ipAddress = MethodLogUtils.getIpAddress(request);\n        String args = MethodLogUtils.getArgsContent(point.getArgs());\n        String returning = MethodLogUtils.getReturning(result);\n        Method method = methodSignature.getMethod();\n        String desc;\n        RequestMethod[] methods;\n        String module;\n        String url;\n        FineelyLog fineelyLog = method.getAnnotation(FineelyLog.class);", "        if (Objects.nonNull(fineelyLog)) {\n            desc = fineelyLog.desc();\n            methods = fineelyLog.method();\n            module = fineelyLog.module();\n            url = fineelyLog.url();\n        } else {\n            FineelyLogMapping annotation = method.getAnnotation(FineelyLogMapping.class);\n            desc = annotation.desc();\n            methods = annotation.method();\n            module = annotation.module();\n            url = annotation.url();\n        }\n        Object[] originalArgs = point.getArgs();\n        ReplaceStrategy replaceStrategy = new SimpleStrategy();", "        for (Object originalArg : originalArgs) {\n            if (originalArg instanceof ParamMap) {\n                replaceStrategy.appendParamMap((ParamMap) originalArg);\n            }\n        }\n        replaceStrategy.appendParamMap(\"result\", JSONObject.toJSONString(result));\n        replaceStrategy.appendParamMap(\"methodName\", method.getName());\n        replaceStrategy.appendParamMap(\"startTime\", startTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        if (Objects.nonNull(endTime)) {\n            replaceStrategy.appendParamMap(\"endTime\", endTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        }\n        Map<String, String[]> requestParameterMap = request.getParameterMap();", "        if (Objects.nonNull(endTime)) {\n            replaceStrategy.appendParamMap(\"endTime\", endTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        }\n        Map<String, String[]> requestParameterMap = request.getParameterMap();\n        if (Objects.nonNull(requestParameterMap)) {\n            Map<String, String> map = new HashMap<>(requestParameterMap.size());\n            requestParameterMap.forEach((key, value) -> map.put(key, value[0]));\n            replaceStrategy.appendParamMap(\"request\", JSONObject.toJSONString(map));\n        }\n\n        String[] argNames = methodSignature.getParameterNames();", "        for (int i = 0; i < argNames.length; i++) {\n            Object arg = point.getArgs()[i];\n            Object json = JSONObject.toJSONString(arg);\n            replaceStrategy.appendParamMap(argNames[i], json);\n        }\n\n        String finishedDesc = replaceStrategy.execute(desc).complete();\n\n        MethodLogEntity methodLog = new MethodLogEntity();\n        methodLog.setDesc(finishedDesc);\n        methodLog.setStartTime(startTime);\n        methodLog.setEndTime(endTime);\n        methodLog.setTimeConsuming(timeConsuming);\n        methodLog.setMethodName(methodName);\n        methodLog.setAllParams(args);\n        methodLog.setResult(returning);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setCreateTime(startTime);\n        methodLog.setMethod(methods);\n        methodLog.setModule(module);", "        if (StringUtils.isNotEmpty(url)) {\n            methodLog.setUrl(url);\n        } else {\n            methodLog.setUrl(request.getRequestURI());\n        }\n        String logOperator = request.getParameter(CommonConstants.FINEELY_LOG_OPERATOR);\n        if (StringUtils.isNoneEmpty(logOperator)) {\n            methodLog.setOperator(logOperator);\n        } else {\n            methodLog.setOperator(\"system\");\n        }\n        methodLogDao.saveLog(methodLog);\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/aspect/MethodLogHandler.java", "chunked_list": ["package com.fineelyframework.log.aspect;\n\nimport com.fineelyframework.log.exception.FineelyLogException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\n\nimport java.time.LocalDateTime;\n\npublic interface MethodLogHandler {\n\n    Object interceptorHandler(ProceedingJoinPoint point) throws Throwable;\n\n    void printExceptionHandler(JoinPoint point, FineelyLogException ex);\n\n    void handleOpenApiLog(JoinPoint point, Object result,\n                                  LocalDateTime startTime, LocalDateTime endTime, double timeConsuming, String exceptionInfo);\n}\n", "public interface MethodLogHandler {\n\n    Object interceptorHandler(ProceedingJoinPoint point) throws Throwable;\n\n    void printExceptionHandler(JoinPoint point, FineelyLogException ex);\n\n    void handleOpenApiLog(JoinPoint point, Object result,\n                                  LocalDateTime startTime, LocalDateTime endTime, double timeConsuming, String exceptionInfo);\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/aspect/FineelyLogAspect.java", "chunked_list": ["package com.fineelyframework.log.aspect;\n\nimport com.fineelyframework.log.exception.FineelyLogException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Aspect\n@Component\npublic class FineelyLogAspect {\n\n    @Resource\n    MethodLogHandler methodLogHandler;\n\n    @Around(value = \"@annotation(com.fineelyframework.log.annotation.FineelyLog)\")", "    public Object aroundInterceptor(ProceedingJoinPoint point) throws Throwable {\n        return methodLogHandler.interceptorHandler(point);\n    }\n\n\n    @AfterThrowing(pointcut = \"@annotation(com.fineelyframework.log.annotation.FineelyLog)\", throwing = \"ex\")\n    public void printException(JoinPoint point, FineelyLogException ex) {\n        methodLogHandler.printExceptionHandler(point, ex);\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/aspect/FineelyLogMappingAspect.java", "chunked_list": ["package com.fineelyframework.log.aspect;\n\nimport com.fineelyframework.log.exception.FineelyLogException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Aspect\n@Component\npublic class FineelyLogMappingAspect {\n\n    @Resource\n    MethodLogHandler methodLogHandler;\n\n    @Around(value = \"@annotation(com.fineelyframework.log.annotation.FineelyLogMapping)\")", "    public Object aroundInterceptor(ProceedingJoinPoint point) throws Throwable {\n        return methodLogHandler.interceptorHandler(point);\n    }\n\n\n    @AfterThrowing(pointcut = \"@annotation(com.fineelyframework.log.annotation.FineelyLogMapping)\", throwing = \"ex\")\n    public void printException(JoinPoint point, FineelyLogException ex) {\n        methodLogHandler.printExceptionHandler(point, ex);\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/annotation/FineelyLog.java", "chunked_list": ["package com.fineelyframework.log.annotation;\n\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport java.lang.annotation.*;\n\n@Documented\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface FineelyLog {", "@Retention(RetentionPolicy.RUNTIME)\npublic @interface FineelyLog {\n\n    RequestMethod[] method() default {};\n\n    String module() default \"\";\n\n    /**\n     * Description\n     * Parameter Name ${name} or ${class.name}", "     * Description\n     * Parameter Name ${name} or ${class.name}\n     * Common parameters are as follows:\n     *\n     * Method returns a result: ${result.**}\n     * Method name: ${methodName}\n     * Method execution start time: ${startTime}\n     * Method execution end time: ${endTime}\n     * Courtship parameter: ${request.**}\n     * Array matching: ${result.data[0].name}", "     * Courtship parameter: ${request.**}\n     * Array matching: ${result.data[0].name}\n     * @return string\n     */\n    String desc() default \"\";\n\n    String url() default \"\";\n}\n", ""]}
{"filename": "src/main/java/com/fineelyframework/log/annotation/FineelyParam.java", "chunked_list": ["package com.fineelyframework.log.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface FineelyParam {", "@Retention(RetentionPolicy.RUNTIME)\npublic @interface FineelyParam {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/annotation/FineelyLogMapping.java", "chunked_list": ["package com.fineelyframework.log.annotation;\n\nimport org.springframework.core.annotation.AliasFor;\nimport org.springframework.web.bind.annotation.Mapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport java.lang.annotation.*;\n\n@Documented", "\n@Documented\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@RequestMapping\npublic @interface FineelyLogMapping {\n\n    @AliasFor(annotation = RequestMapping.class)\n    RequestMethod[] method() default {};\n", "    RequestMethod[] method() default {};\n\n    String module() default \"\";\n\n    String desc() default \"\";\n\n    String url() default \"\";\n\n    @AliasFor(annotation = RequestMapping.class)\n    String name() default \"\";", "    @AliasFor(annotation = RequestMapping.class)\n    String name() default \"\";\n\n    @AliasFor(annotation = RequestMapping.class)\n    String[] value() default {};\n\n    @AliasFor(annotation = RequestMapping.class)\n    String[] path() default {};\n\n    @AliasFor(annotation = RequestMapping.class)", "\n    @AliasFor(annotation = RequestMapping.class)\n    String[] params() default {};\n\n    @AliasFor(annotation = RequestMapping.class)\n    String[] headers() default {};\n\n    @AliasFor(annotation = RequestMapping.class)\n    String[] consumes() default {};\n", "    String[] consumes() default {};\n\n    @AliasFor(annotation = RequestMapping.class)\n    String[] produces() default {};\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/log/queue/QueueOperator.java", "chunked_list": ["package com.fineelyframework.log.queue;\n\nimport com.fineelyframework.log.entity.MethodLogEntity;\nimport org.springframework.stereotype.Component;\n\nimport java.util.concurrent.LinkedTransferQueue;\n\n/**\n * queue operator\n */\npublic enum QueueOperator {\n    INSTANCE;\n\n    private LinkedTransferQueue<MethodLogEntity> oplogQueue;\n\n    QueueOperator() {\n        oplogQueue = new LinkedTransferQueue<>();\n    }\n    public LinkedTransferQueue<MethodLogEntity> getOplogQueue() {\n        return oplogQueue;\n    }\n\n}\n", " * queue operator\n */\npublic enum QueueOperator {\n    INSTANCE;\n\n    private LinkedTransferQueue<MethodLogEntity> oplogQueue;\n\n    QueueOperator() {\n        oplogQueue = new LinkedTransferQueue<>();\n    }\n    public LinkedTransferQueue<MethodLogEntity> getOplogQueue() {\n        return oplogQueue;\n    }\n\n}\n"]}
