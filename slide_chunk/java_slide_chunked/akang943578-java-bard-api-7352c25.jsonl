{"filename": "src/test/java/com/api/bard/BardClientMain.java", "chunked_list": ["package com.api.bard;\n\npublic class BardClientMain {\n\n    public static void main(String[] args) {\n        String token = System.getenv(\"_BARD_API_KEY\");\n        IBardClient bardClient = BardClient.builder(token).build();\n\n        String answer = bardClient.getAnswer(\"Who are you?\").getAnswer();\n        System.out.println(answer);\n    }\n}\n"]}
{"filename": "src/test/java/com/api/bard/BardClientTest.java", "chunked_list": ["package com.api.bard;\n\nimport com.api.bard.model.Answer;\nimport com.api.bard.model.Question;\nimport com.api.bard.translator.GoogleTranslatorAdaptor;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.net.InetSocketAddress;", "\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\n\npublic class BardClientTest {\n    private String token;\n    private String authUser;\n    private String authPassword;\n\n    @BeforeEach\n    public void setup() {\n        token = System.getenv(\"_BARD_API_KEY\");\n        authUser = System.getenv(\"authUser\");\n        authPassword = System.getenv(\"authPassword\");\n        Assertions.assertNotNull(token);\n        Assertions.assertNotNull(authUser);\n        Assertions.assertNotNull(authPassword);\n    }\n\n    /**\n     * Simple usage\n     */\n    @Test", "    public void setup() {\n        token = System.getenv(\"_BARD_API_KEY\");\n        authUser = System.getenv(\"authUser\");\n        authPassword = System.getenv(\"authPassword\");\n        Assertions.assertNotNull(token);\n        Assertions.assertNotNull(authUser);\n        Assertions.assertNotNull(authPassword);\n    }\n\n    /**\n     * Simple usage\n     */\n    @Test", "    public void testGetAnswer_happyCase() {\n        IBardClient bardClient = BardClient.builder(token).build();\n\n        // Simplest way to get answer\n        Answer answer = bardClient.getAnswer(\"Who is current president of USA?\");\n        Assertions.assertNotNull(answer.getAnswer());\n\n        // Get answer with Question object\n        Answer answer2 = bardClient.getAnswer(\n            Question.builder()\n                .question(\"Who is his wife?\")\n                .build());\n        Assertions.assertNotNull(answer2.getAnswer());\n\n        // Reset session\n        bardClient.reset();\n\n        Answer answer3 = bardClient.getAnswer(\"Who is his wife?\");\n        Assertions.assertNotNull(answer3.getAnswer());\n    }\n\n    /**\n     * Advanced usage: customize connection properties,\n     * such as set custom http headers and timeout properties\n     */\n    @Test", "    public void testGetAnswer_customConnection() {\n        IBardClient bardClient = BardClient.builder(token)\n            // set configurator to customize connection properties,\n            // such as timeout, headers\n            .connectionConfigurator(connection -> {\n                // set timeout\n                connection.setConnectTimeout(30000);\n                connection.setReadTimeout(50000);\n\n                //set customs headers\n                connection.setRequestProperty(\"TestHeader\", \"TestValue\");\n                connection.setRequestProperty(\"TestHeader2\", \"TestValue2\");\n\n                // ... set others properties of connection\n            })\n            .build();\n\n        Answer answer = bardClient.getAnswer(\"\ub204\uad6c\uc138\uc694\");\n        Assertions.assertNotNull(answer.getAnswer());\n\n        Answer answer2 = bardClient.getAnswer(Question.builder().question(\"\u3042\u306a\u305f\u306e\u540d\u524d\u306f\u4f55\u3067\u3059\u304b\").build());\n        Assertions.assertNotNull(answer2.getAnswer());\n    }\n\n    /**\n     * Advanced usage: set translator to support languages other than English, Japanese or Korean\n     */\n    @Test", "    public void testGetAnswer_withTranslator() {\n        IBardClient bardClient = BardClient.builder(token)\n            // Default middleLanguage is 'en'\n            .translator(GoogleTranslatorAdaptor.builder().build())\n            .build();\n\n        Answer answer = bardClient.getAnswer(\"\ub204\uad6c\uc138\uc694\");\n        Assertions.assertNotNull(answer.getAnswer());\n        // Korean is supported by Bard, so it should not use translator even set\n        Assertions.assertFalse(answer.isUsedTranslator());\n\n        Answer answer2 = bardClient.getAnswer(Question.builder().question(\"\u3042\u306a\u305f\u306e\u540d\u524d\u306f\u4f55\u3067\u3059\u304b\").build());\n        Assertions.assertNotNull(answer2.getAnswer());\n        // Japanese is supported by Bard, so it should not use translator even set\n        Assertions.assertFalse(answer2.isUsedTranslator());\n\n        Answer answer3 = bardClient.getAnswer(Question.builder().question(\"\u4f60\u662f\u8c01\uff1f\").build());\n        Assertions.assertNotNull(answer3.getAnswer());\n        // Chinese is not supported by Bard, so it should use the translator set, which middleLanguage is English\n        // This means the question is translated to English before interact with Bard, thus the answer is also in English from Bard\n        // And it will also translate the answer to Chinese before return\n        Assertions.assertTrue(answer3.isUsedTranslator());\n\n        IBardClient bardClient2 = BardClient.builder(token)\n            // You can set other middleLanguage which supported by Bard, such as 'ja'\n            .translator(GoogleTranslatorAdaptor.builder().middleLanguage(\"ja\").build())\n            .build();\n\n        Answer answer4 = bardClient2.getAnswer(\"How are you?\");\n        Assertions.assertNotNull(answer4.getAnswer());\n        // English is supported by Bard, so it should not use translator even set\n        Assertions.assertFalse(answer4.isUsedTranslator());\n\n        Answer answer5 = bardClient2.getAnswer(Question.builder().question(\"\u4f60\u662f\u8c01\uff1f\").build());\n        Assertions.assertNotNull(answer5.getAnswer());\n        // Chinese is not supported by Bard, so it should use the translator set, which middleLanguage is Japanese\n        // This means the question is translated to Japanese before interact with Bard, thus the answer is also in Japanese from Bard\n        // And it will also translate the answer to Chinese before return\n        Assertions.assertTrue(answer5.isUsedTranslator());\n    }\n\n    /**\n     * Advanced usage: use advanced fields to get more information\n     * such as images, sources, relatedTopics, and raw response from google bard\n     */\n    @Test", "    public void testGetAnswer_withAdvancedFields() {\n        IBardClient bardClient = BardClient.builder(token).build();\n\n        Answer answer = bardClient.getAnswer(\"Give me a picture of White House\");\n        Assertions.assertNotNull(answer.getAnswer());\n        // Korean is supported by Bard, so it should not use translator even set\n        Assertions.assertFalse(answer.isUsedTranslator());\n\n        // verification of images/sources/relatedTopics in response\n        Assertions.assertEquals(answer.getImages().size(), 1);\n        Assertions.assertFalse(answer.getSources().isEmpty());\n        Assertions.assertFalse(answer.getRelatedTopics().isEmpty());\n\n        // raw response from google bard, you can parse it by yourself\n        Assertions.assertNotNull(answer.getRawResponse());\n\n        // If images are available, get the decorated answer with images in markdown format\n        String markdownAnswer = answer.getMarkdownAnswer();\n        Assertions.assertNotNull(markdownAnswer);\n    }\n\n    /**\n     * Advanced usage: set proxy if you can not access bard.google.com directly\n     * Tested in China, http/socks5 proxy is supported. Others are not tested.\n     */\n    @Test", "    public void test_withProxy() {\n        String hostname = \"192.168.31.1\";\n        int port = 7890;\n\n        // Set Http proxy\n        IBardClient bardClient = BardClient.builder(token)\n            .proxy(new Proxy(Proxy.Type.HTTP,\n                new InetSocketAddress(hostname, port)))\n            // Set authUser and authPassword if proxy needs authentication\n            .auth(authUser, authPassword)\n            .build();\n\n        Answer answer = bardClient.getAnswer(\"Give me a picture of White House\");\n        Assertions.assertNotNull(answer.getAnswer());\n        Assertions.assertFalse(answer.isUsedTranslator());\n\n        // Set Socks5 proxy\n        Proxy proxy = new Proxy(Proxy.Type.SOCKS,\n            new InetSocketAddress(hostname, port));\n        IBardClient bardClient2 = BardClient.builder(token)\n            // Set authUser and authPassword if proxy needs authentication\n            .proxy(proxy)\n            .auth(authUser, authPassword)\n            // Note that if you need to set translator, you should set proxy for translator as well\n            .translator(GoogleTranslatorAdaptor.builder()\n                .proxy(proxy)\n                .auth(authUser, authPassword)\n                .build())\n            .build();\n\n        Answer answer2 = bardClient2.getAnswer(\"\u4eca\u5929\u662f\u661f\u671f\u51e0?\");\n        Assertions.assertNotNull(answer2.getAnswer());\n        Assertions.assertTrue(answer2.isUsedTranslator());\n    }\n}\n"]}
{"filename": "src/main/java/com/api/bard/BardClient.java", "chunked_list": ["package com.api.bard;\n\nimport com.api.bard.exception.BardApiException;\nimport com.api.bard.model.Answer;\nimport com.api.bard.model.Question;\nimport com.api.bard.translator.IBardTranslator;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport lombok.Builder;", "import com.google.gson.JsonElement;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;", "import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Authenticator;\nimport java.net.HttpURLConnection;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;", "import java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Random;\nimport java.util.function.Consumer;\nimport java.util.regex.Matcher;", "import java.util.function.Consumer;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n@Slf4j\npublic class BardClient implements IBardClient {\n    private static final String HOST = \"bard.google.com\";\n    private static final String BARD_URL = \"https://bard.google.com\";\n    private static final String STREAM_GENERATE_URL =\n        BARD_URL + \"/_/BardChatUi/data/assistant.lamda.BardFrontendService/StreamGenerate\";\n    private static final String X_SAME_DOMAIN = \"1\";\n    private static final String USER_AGENT =\n        \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\";\n    private static final String CONTENT_TYPE = \"application/x-www-form-urlencoded;charset=UTF-8\";\n\n    /**\n     * Proxy to use when making requests\n     */\n    private Proxy proxy = Proxy.NO_PROXY;\n\n    private String token;\n    private String snim0e = \"\";\n    private String conversationId = \"\";\n    private String responseId = \"\";\n    private String choiceId = \"\";\n\n    private IBardTranslator translator;\n    private Consumer<HttpURLConnection> connectionConfigurator;\n\n    private int reqid = Integer.parseInt(String.format(\"%04d\", new Random().nextInt(10000)));\n    private Gson gson = new Gson();\n\n    private BardClient(String token) {\n        this.token = token;\n    }\n", "    public static BardClientBuilder builder(@NonNull String token) {\n        return new BardClientBuilder(token);\n    }\n\n    public static class BardClientBuilder {\n        private final BardClient bardClient;\n\n        private BardClientBuilder(String token) {\n            bardClient = new BardClient(token);\n        }\n\n        /**\n         * Builder of Proxy to use when making requests\n         *\n         * @param proxy proxy to use when making requests\n         */", "        public BardClientBuilder proxy(Proxy proxy) {\n            bardClient.proxy = proxy;\n            return this;\n        }\n\n        /**\n         * Builder of Authentication for the proxy\n         *\n         * @param authUser     authUser\n         * @param authPassword authPassword\n         */", "        public BardClientBuilder auth(String authUser, String authPassword) {\n            System.setProperty(\"jdk.http.auth.tunneling.disabledSchemes\", \"\");\n            Authenticator.setDefault(\n                new Authenticator() {\n                    @Override\n                    public PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(authUser, authPassword.toCharArray());\n                    }\n                }\n            );\n            return this;\n        }\n", "        public BardClientBuilder connectionConfigurator(Consumer<HttpURLConnection> connectionConfigurator) {\n            bardClient.connectionConfigurator = connectionConfigurator;\n            return this;\n        }\n\n        public BardClientBuilder translator(IBardTranslator translator) {\n            bardClient.translator = translator;\n            return this;\n        }\n\n        public BardClient build() {\n            return bardClient;\n        }\n    }\n\n    @Data\n    @Builder\n    private static class BardResponse {\n        private int code;\n        private String content;\n    }\n\n    @Override", "        public BardClient build() {\n            return bardClient;\n        }\n    }\n\n    @Data\n    @Builder\n    private static class BardResponse {\n        private int code;\n        private String content;\n    }\n\n    @Override", "    public Answer getAnswer(Question question) throws BardApiException {\n        if (question == null || question.getQuestion().isEmpty()) {\n            log.error(\"Question is null or empty\");\n            throw new IllegalArgumentException(\"Question is null or empty\");\n        }\n\n        try {\n            if (snim0e == null || snim0e.isEmpty()) {\n                this.snim0e = fetchSNlM0e();\n            }\n\n            String questionInput = question.getQuestion();\n\n            boolean needTranslate = false;\n            String sourceLang = null;", "            if (translator != null) {\n                sourceLang = translator.detectLanguage(questionInput);\n                if (!IBardTranslator.SUPPORTED_LANGUAGES.contains(sourceLang)) {\n                    needTranslate = true;\n                    questionInput = translator.translate(sourceLang, translator.middleLanguage(), questionInput);\n                }\n            }\n\n            Map<String, String> params = new LinkedHashMap<>();\n            params.put(\"bl\", \"boq_assistant-bard-web-server_20230419.00_p1\");\n            params.put(\"_reqid\", String.valueOf(reqid));\n            params.put(\"rt\", \"c\");\n\n            String fReq = String.format(\n                \"[null,\\\"[[\\\\\\\"%s\\\\\\\"],null,[\\\\\\\"%s\\\\\\\",\\\\\\\"%s\\\\\\\",\\\\\\\"%s\\\\\\\"]]\\\"]\",\n                questionInput, conversationId, responseId, choiceId);\n\n            Map<String, String> data = new LinkedHashMap<>();\n            data.put(\"f.req\", fReq);\n            data.put(\"at\", snim0e);\n\n            BardResponse bardResponse = sendPostRequest(STREAM_GENERATE_URL, params, data);\n", "            if (bardResponse == null) {\n                log.error(\"Response Error, bard response is null\");\n                throw new BardApiException(\"Response Error, bard response is null\");\n            }\n            if (bardResponse.getCode() / 100 != 2) {\n                throw new BardApiException(\"Response Error, bard response code: \" + bardResponse.getCode());\n            }\n\n            Answer answer = parseBardResult(bardResponse.getContent());\n            String answerOutput = answer.getAnswer();\n            if (needTranslate) {\n                answerOutput = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);\n                answer.setAnswer(answerOutput);\n                answer.setUsedTranslator(true);\n            }\n\n            this.conversationId = answer.getConversationId();\n            this.responseId = answer.getResponseId();\n            this.choiceId = answer.getChoices().get(0).getId();\n\n            return answer;\n        } catch (Exception e) {\n            log.error(\"Response Error, exception thrown. question: {}\", question, e);\n            throw new BardApiException(\"Response Error, exception thrown. question: \" + question, e);\n        }\n    }\n\n    @Override", "            if (needTranslate) {\n                answerOutput = translator.translate(translator.middleLanguage(), sourceLang, answerOutput);\n                answer.setAnswer(answerOutput);\n                answer.setUsedTranslator(true);\n            }\n\n            this.conversationId = answer.getConversationId();\n            this.responseId = answer.getResponseId();\n            this.choiceId = answer.getChoices().get(0).getId();\n\n            return answer;\n        } catch (Exception e) {\n            log.error(\"Response Error, exception thrown. question: {}\", question, e);\n            throw new BardApiException(\"Response Error, exception thrown. question: \" + question, e);\n        }\n    }\n\n    @Override", "    public void reset() throws BardApiException {\n        snim0e = \"\";\n        conversationId = \"\";\n        responseId = \"\";\n        choiceId = \"\";\n    }\n\n    private String fetchSNlM0e() {\n        if (token == null || !token.endsWith(\".\")) {\n            throw new IllegalArgumentException(\"token must end with a single dot. Enter correct __Secure-1PSID value.\");\n        }\n", "        if (token == null || !token.endsWith(\".\")) {\n            throw new IllegalArgumentException(\"token must end with a single dot. Enter correct __Secure-1PSID value.\");\n        }\n\n        try {\n            URL url = new URL(BARD_URL);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);\n            connection.setRequestMethod(\"GET\");\n            addHeaders(connection);\n            if (connectionConfigurator != null) {\n                connectionConfigurator.accept(connection);\n            }\n\n            int responseCode = connection.getResponseCode();", "            if (connectionConfigurator != null) {\n                connectionConfigurator.accept(connection);\n            }\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode != 200) {\n                throw new BardApiException(\"Response code not 200. Response Status is \" + responseCode);\n            }\n\n            InputStream inputStream = connection.getInputStream();\n            String responseBody = convertStreamToString(inputStream);\n\n            return extractSNlM0e(responseBody);\n        } catch (IOException e) {\n            log.error(\"fetchSNlM0e error\", e);\n            throw new BardApiException(\"fetchSNlM0e error\", e);\n        }\n    }\n\n    private void addHeaders(HttpURLConnection connection) {\n        // Set headers\n        connection.setRequestProperty(\"Host\", HOST);\n        connection.setRequestProperty(\"User-Agent\", USER_AGENT);\n        connection.setRequestProperty(\"Referer\", BARD_URL);\n        connection.setRequestProperty(\"X-Same-Domain\", X_SAME_DOMAIN);\n        connection.setRequestProperty(\"Content-Type\", CONTENT_TYPE);\n        connection.setRequestProperty(\"Origin\", BARD_URL);\n        connection.setRequestProperty(\"Cookie\", \"__Secure-1PSID=\" + token);\n    }\n\n    private String convertStreamToString(InputStream inputStream) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        StringBuilder stringBuilder = new StringBuilder();\n        String line;", "        while ((line = reader.readLine()) != null) {\n            stringBuilder.append(line).append(\"\\n\");\n        }\n        reader.close();\n        return stringBuilder.toString();\n    }\n\n    private String extractSNlM0e(String response) {\n        String pattern = \"SNlM0e\\\":\\\"(.*?)\\\"\";\n        Pattern regex = Pattern.compile(pattern);\n        Matcher matcher = regex.matcher(response);", "        if (matcher.find()) {\n            return matcher.group(1);\n        }\n        throw new BardApiException(\"SNlM0e value not found in response. Check __Secure-1PSID value.\");\n    }\n\n    private BardResponse sendPostRequest(String url, Map<String, String> params, Map<String, String> data)\n        throws IOException {\n        // Build query parameters\n        StringBuilder queryParameters = new StringBuilder();\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            queryParameters.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"))\n                .append(\"=\")\n                .append(URLEncoder.encode(entry.getValue(), \"UTF-8\"))\n                .append(\"&\");\n        }\n\n        // Create the URL\n        URL postUrl = new URL(url + \"?\" + queryParameters);\n\n        // Open a connection\n        HttpURLConnection connection = (HttpURLConnection) postUrl.openConnection(proxy);\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        addHeaders(connection);", "        for (Map.Entry<String, String> entry : params.entrySet()) {\n            queryParameters.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"))\n                .append(\"=\")\n                .append(URLEncoder.encode(entry.getValue(), \"UTF-8\"))\n                .append(\"&\");\n        }\n\n        // Create the URL\n        URL postUrl = new URL(url + \"?\" + queryParameters);\n\n        // Open a connection\n        HttpURLConnection connection = (HttpURLConnection) postUrl.openConnection(proxy);\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        addHeaders(connection);", "        if (connectionConfigurator != null) {\n            connectionConfigurator.accept(connection);\n        }\n\n        // Set request body\n        StringBuilder requestBody = new StringBuilder();\n        for (Map.Entry<String, String> entry : data.entrySet()) {\n            requestBody.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"))\n                .append(\"=\")\n                .append(URLEncoder.encode(entry.getValue(), \"UTF-8\"))\n                .append(\"&\");\n        }\n\n        // Send the request\n        try (OutputStream outputStream = connection.getOutputStream()) {\n            byte[] requestBodyBytes = requestBody.toString().getBytes(StandardCharsets.UTF_8);\n            outputStream.write(requestBodyBytes);\n        }\n\n        // Process the response\n        int responseCode = connection.getResponseCode();", "        if (responseCode == HttpURLConnection.HTTP_OK) {\n            InputStream inputStream = connection.getInputStream();\n            String responseBody = convertStreamToString(inputStream);\n\n            return BardResponse.builder()\n                .code(responseCode)\n                .content(responseBody)\n                .build();\n        }\n\n        throw new BardApiException(\"Response code: \" + responseCode);\n    }\n\n    private Answer parseBardResult(String rawResponse) {\n        String[] responseLines = rawResponse.split(\"\\n\");\n        String rawResult = responseLines[3];\n\n        String usefulResult =\n            gson.fromJson(rawResult, JsonArray.class).get(0).getAsJsonArray().get(2).getAsString();\n        JsonArray jsonElements = gson.fromJson(usefulResult, JsonArray.class);\n\n        String content = jsonElements.get(0).getAsJsonArray().get(0).getAsString();\n        String conversationId = jsonElements.get(1).getAsJsonArray().get(0).getAsString();\n        String responseId = jsonElements.get(1).getAsJsonArray().get(1).getAsString();\n\n        List<Answer.Choice> choices = parseChoices(jsonElements);\n        return Answer.builder()\n            .rawResponse(rawResponse)\n            .answer(content)\n            .conversationId(conversationId)\n            .responseId(responseId)\n            .factualityQueries(parseFactualityQueries(jsonElements))\n            .textQuery(parseTextQuery(jsonElements))\n            .choices(choices)\n            .choiceId(Optional.ofNullable(choices)\n                .map(x -> x.get(0))\n                .map(Answer.Choice::getId)\n                .orElse(\"\"))\n            .images(parseImages(jsonElements))\n            .sources(parseSources(jsonElements, content))\n            .relatedTopics(parseRelationTopics(jsonElements))\n            .build();\n    }\n\n    private List<String> parseFactualityQueries (JsonArray jsonElements) {\n        List<String> factualityQueries = null;", "        try {\n            factualityQueries = jsonElements.get(3)\n                .getAsJsonArray().asList().stream()\n                .map(JsonElement::getAsString)\n                .collect(Collectors.toList());\n        } catch (Exception e) {\n            // pass\n        }\n        return factualityQueries;\n    }\n\n    private String parseTextQuery(JsonArray jsonElements) {\n        String textQuery = null;", "        try {\n            textQuery = jsonElements.get(2).getAsJsonArray().get(0).getAsJsonArray().get(0).getAsString();\n        } catch (Exception e) {\n            // pass\n        }\n        return textQuery;\n    }\n\n    private List<Answer.Choice> parseChoices(JsonArray jsonElements) {\n        List<Answer.Choice> choices = null;\n        try {\n            choices = jsonElements.get(4).getAsJsonArray().asList().stream()\n                .map(x -> {\n                    JsonArray jsonArray = x.getAsJsonArray();\n                    return Answer.Choice.builder()\n                        .id(jsonArray.get(0).getAsString())\n                        .content(jsonArray.get(1).getAsString())\n                        .build();\n                })\n                .collect(Collectors.toList());\n        } catch (Exception e) {\n            // pass\n        }\n        return choices;\n    }\n\n    private List<Answer.Image> parseImages(JsonArray jsonElements) {\n        List<Answer.Image> images = null;", "        try {\n            choices = jsonElements.get(4).getAsJsonArray().asList().stream()\n                .map(x -> {\n                    JsonArray jsonArray = x.getAsJsonArray();\n                    return Answer.Choice.builder()\n                        .id(jsonArray.get(0).getAsString())\n                        .content(jsonArray.get(1).getAsString())\n                        .build();\n                })\n                .collect(Collectors.toList());\n        } catch (Exception e) {\n            // pass\n        }\n        return choices;\n    }\n\n    private List<Answer.Image> parseImages(JsonArray jsonElements) {\n        List<Answer.Image> images = null;", "        try {\n            images = new ArrayList<>();\n            JsonArray imagesJson = jsonElements.get(4).getAsJsonArray().get(0).getAsJsonArray().get(4).getAsJsonArray();\n\n            for (int i = 0; i < imagesJson.size(); i++) {\n                JsonArray imageJson = imagesJson.get(i).getAsJsonArray();\n                String url = imageJson.get(0).getAsJsonArray().get(0).getAsJsonArray().get(0).getAsString();\n                String markdownLabel = imageJson.get(2).getAsString();\n                String articleURL = imageJson.get(1).getAsJsonArray().get(0).getAsJsonArray().get(0).getAsString();\n\n                Answer.Image image = Answer.Image.builder()\n                    .imageUrl(url)\n                    .imageMarker(markdownLabel)\n                    .detailsLink(articleURL)\n                    .build();\n                images.add(image);\n            }\n        } catch (Exception e) {\n            //pass\n        }\n        return images;\n    }\n\n    private List<Answer.Source> parseSources(JsonArray jsonElements, String content) {\n        List<Answer.Source> sources = null;", "        try {\n            sources = new ArrayList<>();\n            JsonArray sourceArray = jsonElements.get(3).getAsJsonArray().get(0).getAsJsonArray();\n\n            for (int i = 0; i < sourceArray.size(); i++) {\n                JsonArray imageJson = sourceArray.get(i).getAsJsonArray();\n                int startIndexInAnswer = imageJson.get(0).getAsInt();\n                int endIndexInAnswer = imageJson.get(1).getAsInt();\n                String source = imageJson.get(2).getAsJsonArray().get(0).getAsString();\n\n                Answer.Source sourceObj = Answer.Source.builder()\n                    .startIndexInAnswer(startIndexInAnswer)\n                    .endIndexInAnswer(endIndexInAnswer)\n                    .rawContentInAnswer(content.substring(startIndexInAnswer, endIndexInAnswer))\n                    .sourceLink(source)\n                    .build();\n                sources.add(sourceObj);\n            }\n        } catch (Exception e) {\n            //pass\n        }\n        return sources;\n    }\n\n    private List<Answer.RelatedTopic> parseRelationTopics(JsonArray jsonElements) {\n        List<Answer.RelatedTopic> relatedTopics = null;", "        try {\n            relatedTopics = new ArrayList<>();\n            JsonArray imagesJson = jsonElements.get(2).getAsJsonArray();\n\n            for (int i = 0; i < imagesJson.size(); i++) {\n                JsonArray imageJson = imagesJson.get(i).getAsJsonArray();\n                String topic = imageJson.get(0).getAsString();\n                int num = imageJson.get(1).getAsInt();\n\n                Answer.RelatedTopic relatedTopic = Answer.RelatedTopic.builder()\n                    .topic(topic)\n                    .num(num)\n                    .build();\n\n                relatedTopics.add(relatedTopic);\n            }\n        } catch (Exception e) {\n            //pass\n        }\n        return relatedTopics;\n    }\n}\n"]}
{"filename": "src/main/java/com/api/bard/IBardClient.java", "chunked_list": ["package com.api.bard;\n\nimport com.api.bard.exception.BardApiException;\nimport com.api.bard.model.Answer;\nimport com.api.bard.model.Question;\n\npublic interface IBardClient {\n\n    default Answer getAnswer(String question) {\n        return getAnswer(Question.builder().question(question).build());\n    }\n\n    Answer getAnswer(Question question) throws BardApiException;\n\n    void reset() throws BardApiException;\n}\n"]}
{"filename": "src/main/java/com/api/bard/translator/IBardTranslator.java", "chunked_list": ["package com.api.bard.translator;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic interface IBardTranslator {\n    List<String> SUPPORTED_LANGUAGES = Arrays.asList(\"en\", \"ja\", \"ko\");\n\n    String middleLanguage();\n\n    String detectLanguage(String rawText);\n\n    String translate(String sourceLang, String targetLang, String rawText);\n}\n"]}
{"filename": "src/main/java/com/api/bard/translator/GoogleTranslatorAdaptor.java", "chunked_list": ["package com.api.bard.translator;\n\nimport com.api.bard.exception.BardTranslateException;\nimport com.dark.programs.speech.translator.GoogleTranslate;\nimport lombok.NonNull;\n\nimport java.io.IOException;\nimport java.net.Proxy;\n\npublic class GoogleTranslatorAdaptor implements IBardTranslator {\n    private static final String DEFAULT_MIDDLE_LANGUAGE = \"en\";\n\n    private String middleLanguage;\n\n    private GoogleTranslatorAdaptor() {\n        this.middleLanguage = DEFAULT_MIDDLE_LANGUAGE;\n    }\n", "\npublic class GoogleTranslatorAdaptor implements IBardTranslator {\n    private static final String DEFAULT_MIDDLE_LANGUAGE = \"en\";\n\n    private String middleLanguage;\n\n    private GoogleTranslatorAdaptor() {\n        this.middleLanguage = DEFAULT_MIDDLE_LANGUAGE;\n    }\n\n    public static Builder builder() {\n        return new GoogleTranslatorAdaptor.Builder();\n    }\n", "    public static Builder builder() {\n        return new GoogleTranslatorAdaptor.Builder();\n    }\n\n    public static class Builder {\n        private final GoogleTranslatorAdaptor googleTranslatorAdaptor;\n\n        private Builder() {\n            googleTranslatorAdaptor = new GoogleTranslatorAdaptor();\n        }\n", "        public Builder middleLanguage(String middleLanguage) {\n            googleTranslatorAdaptor.middleLanguage = middleLanguage;\n            return this;\n        }\n\n        public Builder proxy(@NonNull Proxy proxy) {\n            GoogleTranslate.setProxy(proxy);\n            return this;\n        }\n\n        public Builder auth(String authUser, String authPassword) {\n            GoogleTranslate.setAuth(authUser, authPassword);\n            return this;\n        }\n", "        public Builder auth(String authUser, String authPassword) {\n            GoogleTranslate.setAuth(authUser, authPassword);\n            return this;\n        }\n\n        public GoogleTranslatorAdaptor build() {\n            return googleTranslatorAdaptor;\n        }\n    }\n\n    @Override", "    public String middleLanguage() {\n        return middleLanguage;\n    }\n\n    @Override\n    public String detectLanguage(String rawText) {\n        try {\n            return GoogleTranslate.detectLanguage(rawText);\n        } catch (IOException e) {\n            throw new BardTranslateException(\"GoogleTranslate detectLanguage failed, \" +\n                \"rawText:{}\" + rawText, e);\n        }\n    }\n\n    @Override", "    public String translate(String sourceLang, String targetLang, String rawText) {\n        try {\n            return GoogleTranslate.translate(sourceLang, targetLang, rawText);\n        } catch (IOException e) {\n            throw new BardTranslateException(\"GoogleTranslate translate error, \" +\n                \"sourceLang: \" + sourceLang + \", targetLang: \" + targetLang + \", rawText:{}\" + rawText, e);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/api/bard/model/Answer.java", "chunked_list": ["package com.api.bard.model;\n\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\n@Builder\npublic class Answer {\n\n    // raw response from google bard, you can parse it by yourself\n    private String rawResponse;\n\n    // parsed answer in string\n    private String answer;\n    private String conversationId;\n    private String responseId;\n    private String choiceId;\n    // if question/answer was translated before/after interact with google bard or not\n    private boolean usedTranslator;\n    private List<String> factualityQueries;\n    private String textQuery;\n    // available choices for this question\n    private List<Choice> choices;\n    // potential images for this question\n    private List<Image> images;\n    // related sources\n    private List<Source> sources;\n    // related topics\n    private List<RelatedTopic> relatedTopics;\n\n    @Data\n    @Builder", "@Builder\npublic class Answer {\n\n    // raw response from google bard, you can parse it by yourself\n    private String rawResponse;\n\n    // parsed answer in string\n    private String answer;\n    private String conversationId;\n    private String responseId;\n    private String choiceId;\n    // if question/answer was translated before/after interact with google bard or not\n    private boolean usedTranslator;\n    private List<String> factualityQueries;\n    private String textQuery;\n    // available choices for this question\n    private List<Choice> choices;\n    // potential images for this question\n    private List<Image> images;\n    // related sources\n    private List<Source> sources;\n    // related topics\n    private List<RelatedTopic> relatedTopics;\n\n    @Data\n    @Builder", "    public static class Choice {\n        private String id;\n        private String content;\n    }\n\n    @Data\n    @Builder\n    public static class Image {\n        private final String imageUrl;\n        private final String imageMarker;\n        private final String detailsLink;\n", "        public String decorateMarkdown(String rawAnswer) {\n            return rawAnswer.replaceFirst(\n                String.format(\"\\\\[%s\\\\]\", imageMarker.substring(1, imageMarker.length() - 1)),\n                String.format(\"[!%s(%s)](%s)\", imageMarker, imageUrl, detailsLink));\n        }\n    }\n\n    @Data\n    @Builder\n    public static class Source {\n        private int startIndexInAnswer;\n        private int endIndexInAnswer;\n        private String rawContentInAnswer;\n        private String sourceLink;\n    }\n\n    @Data\n    @Builder", "    public static class Source {\n        private int startIndexInAnswer;\n        private int endIndexInAnswer;\n        private String rawContentInAnswer;\n        private String sourceLink;\n    }\n\n    @Data\n    @Builder\n    public static class RelatedTopic {\n        private String topic;\n        private int num;\n    }\n\n    // If images are available, get the decorated answer with images in markdown format", "    public static class RelatedTopic {\n        private String topic;\n        private int num;\n    }\n\n    // If images are available, get the decorated answer with images in markdown format\n    public String getMarkdownAnswer() {\n        String markdownAnswer = this.answer;\n        if (images != null && images.size() > 0) {\n            for (Image image : images) {\n                markdownAnswer = image.decorateMarkdown(markdownAnswer);\n            }\n        }\n        return markdownAnswer;\n    }\n}\n", "        if (images != null && images.size() > 0) {\n            for (Image image : images) {\n                markdownAnswer = image.decorateMarkdown(markdownAnswer);\n            }\n        }\n        return markdownAnswer;\n    }\n}\n"]}
{"filename": "src/main/java/com/api/bard/model/Question.java", "chunked_list": ["package com.api.bard.model;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\n\n@Data\n@Builder\npublic class Question {\n\n    @NonNull\n    private String question;\n}\n", "public class Question {\n\n    @NonNull\n    private String question;\n}\n"]}
{"filename": "src/main/java/com/api/bard/exception/BardTranslateException.java", "chunked_list": ["package com.api.bard.exception;\n\npublic class BardTranslateException extends RuntimeException {\n\n    public BardTranslateException(String message) {\n        super(message);\n    }\n\n    public BardTranslateException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n"]}
{"filename": "src/main/java/com/api/bard/exception/BardApiException.java", "chunked_list": ["package com.api.bard.exception;\n\npublic class BardApiException extends RuntimeException{\n\n    public BardApiException(String message) {\n        super(message);\n    }\n\n    public BardApiException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n"]}
