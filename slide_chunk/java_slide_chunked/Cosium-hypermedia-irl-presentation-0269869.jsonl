{"filename": "src/test/java/com/cos/devoxx/hypermediairl/HypermediaIrlApplicationTests.java", "chunked_list": ["package com.cos.devoxx.hypermediairl;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass HypermediaIrlApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/FixedResourceNameRelationProvider.java", "chunked_list": ["package com.cos.devoxx.hypermediairl;\n\nimport org.springframework.hateoas.LinkRelation;\nimport org.springframework.hateoas.server.core.DefaultLinkRelationProvider;\n\npublic class FixedResourceNameRelationProvider extends DefaultLinkRelationProvider {\n\n  @Override\n  public LinkRelation getCollectionResourceRelFor(Class<?> type) {\n    return LinkRelation.of(\"content\");\n  }\n\n  @Override", "  public LinkRelation getCollectionResourceRelFor(Class<?> type) {\n    return LinkRelation.of(\"content\");\n  }\n\n  @Override\n  public LinkRelation getItemResourceRelFor(Class<?> type) {\n    return LinkRelation.of(\"content\");\n  }\n\n  @Override\n  public int getOrder() {\n    return 0;\n  }\n}\n", "  public int getOrder() {\n    return 0;\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/HypermediaIrlApplication.java", "chunked_list": ["package com.cos.devoxx.hypermediairl;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.HypermediaMappingInformation;\nimport org.springframework.hateoas.server.LinkRelationProvider;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n", "import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@SpringBootApplication\n@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL_FORMS)\npublic class HypermediaIrlApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(HypermediaIrlApplication.class, args);\n  }\n\n  @Bean", "  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry\n            .addMapping(\"**\")\n            .exposedHeaders(HttpHeaders.LOCATION)\n            .allowedMethods(\n                Stream.of(HttpMethod.values()).map(HttpMethod::name).toArray(String[]::new));\n        registry\n            .addMapping(\"/items/**\")\n            .exposedHeaders(HttpHeaders.LOCATION)\n            .allowedMethods(\n                Stream.of(HttpMethod.values()).map(HttpMethod::name).toArray(String[]::new));\n        registry\n            .addMapping(\"/spectacles/**\")\n            .exposedHeaders(HttpHeaders.LOCATION)\n            .allowedMethods(\n                Stream.of(HttpMethod.values()).map(HttpMethod::name).toArray(String[]::new));\n        registry\n            .addMapping(\"/invoices/**\")\n            .exposedHeaders(HttpHeaders.LOCATION)\n            .allowedMethods(\n                Stream.of(HttpMethod.values()).map(HttpMethod::name).toArray(String[]::new));\n      }\n    };\n  }\n\n  @Bean", "  public LinkRelationProvider linkRelationProvider() {\n    return new FixedResourceNameRelationProvider();\n  }\n\n  @Configuration\n  class HateoasConfiguration implements HypermediaMappingInformation, WebMvcConfigurer {\n\n    /**\n     * As explained in <a\n     * href=\"https://github.com/spring-projects/spring-hateoas/issues/1541\">https://github.com/spring-projects/spring-hateoas/issues/1541</a>,\n     * a change removing application/json support for Spring HATEOAS was introduced between 1.1.0\n     * and 1.3.1.\n     *\n     * <p>As per <a\n     * href=\"https://github.com/spring-projects/spring-hateoas/issues/1541#issuecomment-857637821\">https://github.com/spring-projects/spring-hateoas/issues/1541#issuecomment-857637821</a>,\n     * this configuration allows maintaining Spring HATEOAS models (CollectionModel & cie) bare JSON\n     * serialization behaviour.\n     */\n    @Override\n    public List<MediaType> getMediaTypes() {\n      return Collections.singletonList(MediaType.APPLICATION_JSON);\n    }\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/item/ItemController.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.item;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.afford;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n\nimport com.cos.devoxx.hypermediairl.core.item.Item;\nimport com.cos.devoxx.hypermediairl.core.item.ItemRepository;\nimport com.cos.devoxx.hypermediairl.http.framework.VoidAffordance;\nimport com.cos.devoxx.hypermediairl.http.framework.rfc_7240.ReturnPreference;", "import com.cos.devoxx.hypermediairl.http.framework.VoidAffordance;\nimport com.cos.devoxx.hypermediairl.http.framework.rfc_7240.ReturnPreference;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.List;\nimport java.util.stream.StreamSupport;\nimport org.springframework.hateoas.CollectionModel;\nimport org.springframework.hateoas.EntityModel;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;", "import org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n", "import org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/items\")\npublic class ItemController {\n  private final ItemRepository itemRepository;\n  private final WebMvcLinkBuilderFactory linkBuilders;\n\n  public ItemController(ItemRepository itemRepository, WebMvcLinkBuilderFactory linkBuilders) {\n    this.itemRepository = requireNonNull(itemRepository);\n    this.linkBuilders = requireNonNull(linkBuilders);\n    this.initializeDemoItems();\n  }\n\n  private void initializeDemoItems() {\n    this.itemRepository.save(new Item(120.50, \"Monture Devoxx\"));\n    this.itemRepository.save(new Item(220.75, \"Verre droit Devoxx\"));\n    this.itemRepository.save(new Item(220.75, \"Verre gauche Devoxx\"));\n  }\n\n  @GetMapping\n  public ResponseEntity<?> list(ReturnPreference returnPreference) {\n    Link selfLink =\n        linkBuilders\n            .linkTo(methodOn(ItemController.class).list(null))\n            .withSelfRel()\n            .andAffordances(\n                List.of(\n                    VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));\n", "    if (returnPreference == ReturnPreference.MINIMAL) {\n      return ResponseEntity.ok(new RepresentationModel<>(selfLink));\n    }\n\n    List<EntityModel<Representation>> representations =\n        StreamSupport.stream(itemRepository.findAll().spliterator(), false)\n            .map(Representation::new)\n            .map(Representation::toEntityModel)\n            .toList();\n    return ResponseEntity.ok(CollectionModel.of(representations, selfLink));\n  }\n\n  @PostMapping\n  public ResponseEntity<?> create(@RequestBody EditCommand command) {\n    Item item = itemRepository.save(new Item(command.price(), command.label()));\n    return ResponseEntity.created(\n            linkBuilders.linkTo(methodOn(ItemController.class).findById(item.id())).toUri())\n        .build();\n  }\n\n  @GetMapping(\"/{id}\")\n  public ResponseEntity<?> findById(@PathVariable(\"id\") Long id) {\n    return ResponseEntity.of(\n        itemRepository.findById(id).map(Representation::new).map(Representation::toEntityModel));\n  }\n\n  private record EditCommand(\n      @JsonProperty(\"label\") String label, @JsonProperty(\"price\") Double price) {}\n\n  private class Representation {\n    private final long id;\n    private final Double price;\n    private final String label;\n\n    private Representation(Item item) {\n      this.id = item.id();\n      this.price = item.price();\n      this.label = item.label();\n    }\n\n    @JsonProperty", "    public Double price() {\n      return price;\n    }\n\n    @JsonProperty\n    public String label() {\n      return label;\n    }\n\n    private EntityModel<Representation> toEntityModel() {\n      return EntityModel.of(\n          this, linkBuilders.linkTo(methodOn(ItemController.class).findById(id)).withSelfRel());\n    }\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/spectacles/SpectaclesController.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.spectacles;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.afford;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n\nimport com.cos.devoxx.hypermediairl.core.invoice.Invoice;\nimport com.cos.devoxx.hypermediairl.core.invoice.InvoiceRepository;\nimport com.cos.devoxx.hypermediairl.core.item.Item;\nimport com.cos.devoxx.hypermediairl.core.item.ItemRepository;", "import com.cos.devoxx.hypermediairl.core.item.Item;\nimport com.cos.devoxx.hypermediairl.core.item.ItemRepository;\nimport com.cos.devoxx.hypermediairl.core.spectacles.Spectacles;\nimport com.cos.devoxx.hypermediairl.core.spectacles.SpectaclesRepository;\nimport com.cos.devoxx.hypermediairl.http.framework.VoidAffordance;\nimport com.cos.devoxx.hypermediairl.http.framework.rfc_7240.ReturnPreference;\nimport com.cos.devoxx.hypermediairl.http.invoice.InvoiceController;\nimport com.cos.devoxx.hypermediairl.http.item.ItemController;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;", "import com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport org.springframework.hateoas.Affordance;\nimport org.springframework.hateoas.CollectionModel;\nimport org.springframework.hateoas.EntityModel;", "import org.springframework.hateoas.CollectionModel;\nimport org.springframework.hateoas.EntityModel;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport rocks.spiffy.spring.hateoas.utils.uri.resolver.ControllerUriResolver;\n\n@RestController", "\n@RestController\n@RequestMapping(\"/spectacles\")\npublic class SpectaclesController {\n\n  private final WebMvcLinkBuilderFactory linkBuilders;\n  private final SpectaclesRepository repository;\n  private final ItemRepository itemRepository;\n  private final InvoiceRepository invoiceRepository;\n  private final SpectaclesACL spectaclesACL;\n\n  public SpectaclesController(\n      WebMvcLinkBuilderFactory linkBuilders,\n      SpectaclesRepository repository,\n      ItemRepository itemRepository,\n      InvoiceRepository invoiceRepository,\n      SpectaclesACL spectaclesACL) {\n    this.linkBuilders = requireNonNull(linkBuilders);\n    this.repository = requireNonNull(repository);\n    this.itemRepository = requireNonNull(itemRepository);\n    this.invoiceRepository = requireNonNull(invoiceRepository);\n    this.spectaclesACL = requireNonNull(spectaclesACL);\n  }\n\n  // SpectaclesController.java\n  @GetMapping\n  public ResponseEntity<?> list(ReturnPreference returnPreference) {\n    Link selfLink =\n        linkBuilders\n            .linkTo(methodOn(SpectaclesController.class).list(null))\n            .withSelfRel()\n            .andAffordances(\n              List.of(\n                VoidAffordance.create(),\n                afford(methodOn(SpectaclesController.class).create())));\n", "    if (returnPreference == ReturnPreference.MINIMAL) {\n      return ResponseEntity.ok(new RepresentationModel<>(selfLink));\n    }\n\n    List<EntityModel<Representation>> representations =\n        findAll().map(Representation::new).map(Representation::toEntityModel).toList();\n    return ResponseEntity.ok(CollectionModel.of(representations, selfLink));\n  }\n\n  @PostMapping\n  public ResponseEntity<?> create() {\n    Spectacles spectacles = repository.save(new Spectacles());\n    return ResponseEntity.created(\n            linkBuilders\n                .linkTo(methodOn(SpectaclesController.class).findById(spectacles.id()))\n                .toUri())\n        .build();\n  }\n\n  @GetMapping(\"/{id}\")\n  public ResponseEntity<?> findById(@PathVariable(\"id\") Long id) {\n    return ResponseEntity.of(\n        this.repository.findById(id).map(Representation::new).map(Representation::toEntityModel));\n  }\n\n  @PutMapping(\"/{id}/frame\")\n  public ResponseEntity<?> selectFrame(\n      @PathVariable(\"id\") Long id, @RequestBody EditItemCommand command) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    Item item = command.itemId().flatMap(itemRepository::findById).orElse(null);\n    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectFrame(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/frame\")\n  public ResponseEntity<?> deleteFrame(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectFrame(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/frame\")\n  public ResponseEntity<?> deleteFrame(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    this.repository.save(spectacles.deleteFrame());\n    return ResponseEntity.noContent().build();\n  }\n\n  @PutMapping(\"/{id}/right-lens\")\n  public ResponseEntity<?> selectRightLens(\n      @PathVariable(\"id\") Long id, @RequestBody EditItemCommand command) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    Item item = command.itemId().flatMap(itemRepository::findById).orElse(null);\n    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectRightLens(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/right-lens\")\n  public ResponseEntity<?> deleteRightLens(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectRightLens(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/right-lens\")\n  public ResponseEntity<?> deleteRightLens(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    this.repository.save(spectacles.deleteRightLens());\n    return ResponseEntity.noContent().build();\n  }\n\n  @PutMapping(\"/{id}/left-lens\")\n  public ResponseEntity<?> selectLeftLens(\n      @PathVariable(\"id\") Long id, @RequestBody EditItemCommand command) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    Item item = command.itemId().flatMap(itemRepository::findById).orElse(null);\n    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectLeftLens(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/left-lens\")\n  public ResponseEntity<?> deleteLeftLens(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (item == null) {\n      return ResponseEntity.badRequest().build();\n    }\n\n    repository.save(spectacles.selectLeftLens(item));\n    return ResponseEntity.noContent().build();\n  }\n\n  @DeleteMapping(\"/{id}/left-lens\")\n  public ResponseEntity<?> deleteLeftLens(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.notFound().build();\n    }\n\n    if (!spectaclesACL.canUpdate(spectacles)) {\n      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n    }\n\n    this.repository.save(spectacles.deleteLeftLens());\n    return ResponseEntity.noContent().build();\n  }\n\n  @PostMapping(\"{id}/invoiced\")\n  public ResponseEntity<?> doInvoice(@PathVariable(\"id\") Long id) {\n    Spectacles spectacles = this.repository.findById(id).orElse(null);", "    if (spectacles == null) {\n      return ResponseEntity.badRequest().build();\n    }\n    Invoice invoice = spectacles.invoice(invoiceRepository);\n    return ResponseEntity.created(\n            linkBuilders.linkTo(methodOn(InvoiceController.class).findById(invoice.id())).toUri())\n        .build();\n  }\n\n  private Stream<Spectacles> findAll() {\n    return StreamSupport.stream(repository.findAll().spliterator(), false);\n  }\n\n  private record EditItemCommand(@JsonProperty(\"itemUri\") String itemUri) {\n\n    @JsonCreator\n    private EditItemCommand {}\n\n    Optional<Long> itemId() {\n      return ControllerUriResolver.on(methodOn(ItemController.class).findById(null))\n          .resolve(itemUri, \"id\")\n          .map(Long::parseLong);\n    }\n  }\n\n  private class Representation {\n\n    // SpectaclesRepresentation.java\n    private final long id;\n    private final Spectacles spectacles;\n\n    public EntityModel<Representation> toEntityModel() {\n      List<Affordance> affordances = new ArrayList<>();\n      affordances.add(VoidAffordance.create());", "      if (spectaclesACL.canUpdate(spectacles)) {\n        affordances.add(afford(methodOn(SpectaclesController.class).selectFrame(id, null)));\n        affordances.add(afford(methodOn(SpectaclesController.class).selectRightLens(id, null)));\n        affordances.add(afford(methodOn(SpectaclesController.class).selectLeftLens(id, null)));\n        if (spectacles.frame().isPresent()) {\n          affordances.add(afford(methodOn(SpectaclesController.class).deleteFrame(id)));\n        }\n        if (spectacles.rightLens().isPresent()) {\n          affordances.add(afford(methodOn(SpectaclesController.class).deleteRightLens(id)));\n        }\n        if (spectacles.leftLens().isPresent()) {\n          affordances.add(afford(methodOn(SpectaclesController.class).deleteLeftLens(id)));\n        }\n      }\n", "        if (spectacles.leftLens().isPresent()) {\n          affordances.add(afford(methodOn(SpectaclesController.class).deleteLeftLens(id)));\n        }\n      }\n\n      if (spectacles.isEligibleForInvoicing()) {\n        affordances.add(afford(methodOn(SpectaclesController.class).doInvoice(id)));\n      }\n      return EntityModel.of(\n          this,\n          linkBuilders\n              .linkTo(methodOn(SpectaclesController.class).findById(id))\n              .addAffordances(affordances)\n              .withSelfRel());\n    }\n\n    private Representation(Spectacles spectacles) {\n      this.id = spectacles.id();\n      this.spectacles = spectacles;\n      this.frameLabel = spectacles.frame().map(Item::label).orElse(null);\n      this.framePrice = spectacles.frame().map(Item::price).orElse(null);\n      this.rightLensLabel = spectacles.rightLens().map(Item::label).orElse(null);\n      this.rightLensPrice = spectacles.rightLens().map(Item::price).orElse(null);\n      this.leftLensLabel = spectacles.leftLens().map(Item::label).orElse(null);\n      this.leftLensPrice = spectacles.leftLens().map(Item::price).orElse(null);\n    }\n\n    private String frameLabel;\n    private String rightLensLabel;\n    private String leftLensLabel;\n    private Double framePrice;\n    private Double rightLensPrice;\n    private Double leftLensPrice;\n\n    @JsonProperty", "    public String getFrameLabel() {\n      return frameLabel;\n    }\n\n    @JsonProperty\n    public Double getFramePrice() {\n      return framePrice;\n    }\n\n    @JsonProperty\n    public String getRightLensLabel() {\n      return rightLensLabel;\n    }\n\n    @JsonProperty", "    public String getRightLensLabel() {\n      return rightLensLabel;\n    }\n\n    @JsonProperty\n    public Double getRightLensPrice() {\n      return rightLensPrice;\n    }\n\n    @JsonProperty\n    public String getLeftLensLabel() {\n      return leftLensLabel;\n    }\n\n    @JsonProperty", "    public String getLeftLensLabel() {\n      return leftLensLabel;\n    }\n\n    @JsonProperty\n    public Double getLeftLensPrice() {\n      return leftLensPrice;\n    }\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/spectacles/SpectaclesACL.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.spectacles;\n\nimport com.cos.devoxx.hypermediairl.core.spectacles.Spectacles;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpectaclesACL {\n\n  public boolean canUpdate(Spectacles spectacles) {\n    return true;\n  }\n}\n", "  public boolean canUpdate(Spectacles spectacles) {\n    return true;\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/invoice/InvoiceController.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.invoice;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController", "\n@RestController\n@RequestMapping(\"/invoices\")\npublic class InvoiceController {\n\n  @GetMapping(\"/{id}\")\n  public ResponseEntity<?> findById(@PathVariable(\"id\") Long id) {\n    return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).build();\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/IndexController.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n\nimport com.cos.devoxx.hypermediairl.http.item.ItemController;\nimport com.cos.devoxx.hypermediairl.http.spectacles.SpectaclesController;\nimport java.util.List;\nimport org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;", "import org.springframework.hateoas.RepresentationModel;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/\")\npublic class IndexController {\n\n  private final WebMvcLinkBuilderFactory linkBuilders;\n\n  public IndexController(WebMvcLinkBuilderFactory linkBuilders) {\n    this.linkBuilders = requireNonNull(linkBuilders);\n  }\n\n  @GetMapping\n  public ResponseEntity<RepresentationModel<?>> get() {\n    return ResponseEntity.ok(\n        new RepresentationModel<>(\n            List.of(\n                linkBuilders.linkTo(methodOn(ItemController.class)\n                  .list(null)).withRel(\"items\"),\n                linkBuilders.linkTo(methodOn(SpectaclesController.class)\n                  .list(null))\n                    .withRel(\"spectacles\"))));\n  }\n}\n", "@RequestMapping(\"/\")\npublic class IndexController {\n\n  private final WebMvcLinkBuilderFactory linkBuilders;\n\n  public IndexController(WebMvcLinkBuilderFactory linkBuilders) {\n    this.linkBuilders = requireNonNull(linkBuilders);\n  }\n\n  @GetMapping\n  public ResponseEntity<RepresentationModel<?>> get() {\n    return ResponseEntity.ok(\n        new RepresentationModel<>(\n            List.of(\n                linkBuilders.linkTo(methodOn(ItemController.class)\n                  .list(null)).withRel(\"items\"),\n                linkBuilders.linkTo(methodOn(SpectaclesController.class)\n                  .list(null))\n                    .withRel(\"spectacles\"))));\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/VoidAffordance.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework;\n\nimport org.springframework.hateoas.Affordance;\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;", "\nimport static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n\n@RequestMapping(\"/void\")\npublic abstract class VoidAffordance {\n\n  public static Affordance create() {\n    return WebMvcLinkBuilder.afford(methodOn(VoidAffordance.class).post());\n  }\n\n  @PostMapping\n  public ResponseEntity<?> post() {\n    return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).build();\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/ReturnPreferenceMethodArgumentResolver.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.web.bind.support.WebDataBinderFactory;\nimport org.springframework.web.context.request.NativeWebRequest;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.method.support.ModelAndViewContainer;\n\n/**\n * @author R\u00e9da Housni Alaoui", "/**\n * @author R\u00e9da Housni Alaoui\n */\nclass ReturnPreferenceMethodArgumentResolver implements HandlerMethodArgumentResolver {\n\n  @Override\n  public boolean supportsParameter(MethodParameter parameter) {\n    return ReturnPreference.class.isAssignableFrom(parameter.getParameterType());\n  }\n\n  @Override", "  public Object resolveArgument(\n      MethodParameter parameter,\n      ModelAndViewContainer mavContainer,\n      NativeWebRequest webRequest,\n      WebDataBinderFactory binderFactory) {\n    return ReturnPreferences.parse(webRequest);\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/Rfc7240Configuration.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\nimport org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.List;", "\nimport java.util.List;\n\n/**\n * @author R\u00e9da Housni Alaoui\n */\n@Configuration\nclass Rfc7240Configuration implements WebMvcConfigurer {\n\n  @Bean", "\n  @Bean\n  public FilterRegistrationBean<VaryPreferFilter> rfc7240Filter(\n      DispatcherServletRegistrationBean dispatcherServletRegistration) {\n    FilterRegistrationBean<VaryPreferFilter> registration =\n        new FilterRegistrationBean<>(new VaryPreferFilter());\n    registration.addUrlPatterns(dispatcherServletRegistration.getServletUrlMapping());\n    return registration;\n  }\n", "  }\n\n  @Override\n  public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n    resolvers.add(new ReturnPreferenceMethodArgumentResolver());\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/ReturnPreferenceResponseBodyAdvice.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;", "import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport java.util.Collections;\nimport java.util.Objects;\n\nimport static java.util.Optional.ofNullable;\n\n/**\n * @author R\u00e9da Housni Alaoui", "/**\n * @author R\u00e9da Housni Alaoui\n */\n@ControllerAdvice\nclass ReturnPreferenceResponseBodyAdvice implements ResponseBodyAdvice<Object> {\n\n  private static final String PREFERENCE_APPLIED_PREFIX = \"return=\";\n\n  @Override\n  public boolean supports(\n      MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n    return true;\n  }\n\n  @Override", "  @Override\n  public boolean supports(\n      MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n    return true;\n  }\n\n  @Override\n  public Object beforeBodyWrite(\n      Object body,\n      MethodParameter returnType,\n      MediaType selectedContentType,\n      Class<? extends HttpMessageConverter<?>> selectedConverterType,\n      ServerHttpRequest request,\n      ServerHttpResponse response) {\n\n    ReturnPreference returnPreference = ReturnPreferences.parse(request);", "    if (returnPreference == ReturnPreference.UNDEFINED) {\n      return body;\n    }\n    HttpHeaders responseHeaders = response.getHeaders();\n\n    boolean headerAlreadyPresentInResponse =\n        ofNullable(responseHeaders.get(Rfc7240Headers.PREFERENCE_APPLIED))\n            .orElse(Collections.emptyList())\n            .stream()\n            .filter(Objects::nonNull)\n            .anyMatch(value -> value.startsWith(PREFERENCE_APPLIED_PREFIX));", "    if (headerAlreadyPresentInResponse) {\n      return body;\n    }\n\n    responseHeaders.add(\n        Rfc7240Headers.PREFERENCE_APPLIED,\n        PREFERENCE_APPLIED_PREFIX + returnPreference.name().toLowerCase());\n    return body;\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/ReturnPreference.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\n/**\n * https://datatracker.ietf.org/doc/html/rfc7240#section-4.2\n *\n * <p>The \"return=representation\" preference indicates that the client prefers that the server\n * include an entity representing the current state of the resource in the response to a successful\n * request.\n *\n * <p>The \"return=minimal\" preference, on the other hand, indicates that the client wishes the", " *\n * <p>The \"return=minimal\" preference, on the other hand, indicates that the client wishes the\n * server to return only a minimal response to a successful request. Typically, such responses would\n * utilize the 204 (No Content) status, but other codes MAY be used as appropriate, such as a 200\n * (OK) status with a zero-length response entity. The determination of what constitutes an\n * appropriate minimal response is solely at the discretion of the server.\n *\n * <p>ABNF:\n *\n * <p>return = \"return\" BWS \"=\" BWS (\"representation\" / \"minimal\")", " *\n * <p>return = \"return\" BWS \"=\" BWS (\"representation\" / \"minimal\")\n *\n * <p>When honoring the \"return=representation\" preference, the returned representation might not be\n * a representation of the effective request URI when the request is affecting another resource. In\n * such cases, the Content-Location header can be used to identify the URI of the returned\n * representation.\n *\n * <p>The \"return=representation\" preference is intended to provide a means of optimizing\n * communication between the client and server by eliminating the need for a subsequent GET request", " * <p>The \"return=representation\" preference is intended to provide a means of optimizing\n * communication between the client and server by eliminating the need for a subsequent GET request\n * to retrieve the current representation of the resource following a modification.\n *\n * <p>After successfully processing a modification request such as a POST or PUT, a server can\n * choose to return either an entity describing the status of the operation or a representation of\n * the modified resource itself. While the selection of which type of entity to return, if any at\n * all, is solely at the discretion of the server, the \"return=representation\" preference -- along\n * with the \"return=minimal\" preference defined below -- allow the server to take the client's\n * preferences into consideration while constructing the response.", " * with the \"return=minimal\" preference defined below -- allow the server to take the client's\n * preferences into consideration while constructing the response.\n *\n * <p>An example request specifying the \"return=representation\" preference:\n *\n * <p>PATCH /item/123 HTTP/1.1 Host: example.org Content-Type: application/example-patch Prefer:\n * return=representation\n *\n * <p>1c1 < ABCDEFGHIJKLMNOPQRSTUVWXYZ --- > BCDFGHJKLMNPQRSTVWXYZ\n *", " * <p>1c1 < ABCDEFGHIJKLMNOPQRSTUVWXYZ --- > BCDFGHJKLMNPQRSTVWXYZ\n *\n * <p>An example response containing the resource representation:\n *\n * <p>HTTP/1.1 200 OK Content-Location: http://example.org/item/123 Content-Type: text/plain ETag:\n * \"d3b07384d113edec49eaa6238ad5ff00\"\n *\n * <p>BCDFGHJKLMNPQRSTVWXYZ\n *\n * <p>In contrast, the \"return=minimal\" preference can reduce the amount of data the server is", " *\n * <p>In contrast, the \"return=minimal\" preference can reduce the amount of data the server is\n * required to return to the client following a request. This can be particularly useful, for\n * instance, when communicating with limited-bandwidth mobile devices or when the client simply does\n * not require any further information about the result of a request beyond knowing if it was\n * successfully processed.\n *\n * <p>An example request specifying the \"return=minimal\" preference:\n *\n * <p>POST /collection HTTP/1.1 Host: example.org Content-Type: text/plain Prefer: return=minimal", " *\n * <p>POST /collection HTTP/1.1 Host: example.org Content-Type: text/plain Prefer: return=minimal\n *\n * <p>{Data}\n *\n * <p>An example minimal response:\n *\n * <p>HTTP/1.1 201 Created Location: http://example.org/collection/123\n *\n * <p>The \"return=minimal\" and \"return=representation\" preferences are mutually exclusive", " *\n * <p>The \"return=minimal\" and \"return=representation\" preferences are mutually exclusive\n * directives. It is anticipated that there will never be a situation where it will make sense for a\n * single request to include both preferences. Any such requests will likely be the result of a\n * coding error within the client. As such, a request containing both preferences can be treated as\n * though neither were specified.\n *\n * @author R\u00e9da Housni Alaoui\n */\npublic enum ReturnPreference {\n  /**\n   * The \"return=representation\" preference indicates that the client prefers that the server\n   * include an entity representing the current state of the resource in the response to a\n   * successful request.\n   */\n  REPRESENTATION,\n  /**\n   * The \"return=minimal\" preference, on the other hand, indicates that the client wishes the server\n   * to return only a minimal response to a successful request. Typically, such responses would\n   * utilize the 204 (No Content) status, but other codes MAY be used as appropriate, such as a 200\n   * (OK) status with a zero-length response entity. The determination of what constitutes an\n   * appropriate minimal response is solely at the discretion of the server.\n   */\n  MINIMAL,\n  UNDEFINED\n}\n", " */\npublic enum ReturnPreference {\n  /**\n   * The \"return=representation\" preference indicates that the client prefers that the server\n   * include an entity representing the current state of the resource in the response to a\n   * successful request.\n   */\n  REPRESENTATION,\n  /**\n   * The \"return=minimal\" preference, on the other hand, indicates that the client wishes the server\n   * to return only a minimal response to a successful request. Typically, such responses would\n   * utilize the 204 (No Content) status, but other codes MAY be used as appropriate, such as a 200\n   * (OK) status with a zero-length response entity. The determination of what constitutes an\n   * appropriate minimal response is solely at the discretion of the server.\n   */\n  MINIMAL,\n  UNDEFINED\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/Rfc7240Headers.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\n/**\n * @author R\u00e9da Housni Alaoui\n */\npublic class Rfc7240Headers {\n\n  public static final String PREFER = \"Prefer\";\n  public static final String PREFERENCE_APPLIED = \"Preference-Applied\";\n}\n", "  public static final String PREFERENCE_APPLIED = \"Preference-Applied\";\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/VaryPreferFilter.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\n\n/**\n * @author R\u00e9da Housni Alaoui\n */\nclass VaryPreferFilter extends OncePerRequestFilter {\n\n  @Override\n  protected void doFilterInternal(", "  @Override\n  protected void doFilterInternal(\n      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws ServletException, IOException {\n\n    response.addHeader(HttpHeaders.VARY, Rfc7240Headers.PREFER);\n\n    filterChain.doFilter(request, response);\n  }\n}", "  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/http/framework/rfc_7240/ReturnPreferences.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.http.framework.rfc_7240;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.web.context.request.NativeWebRequest;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.regex.Matcher;", "import java.util.Collections;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static java.util.Optional.ofNullable;\n\n/**\n * @author R\u00e9da Housni Alaoui", "/**\n * @author R\u00e9da Housni Alaoui\n */\nclass ReturnPreferences {\n\n  private static final Logger LOG = LoggerFactory.getLogger(ReturnPreferences.class);\n\n  private static final Pattern PREFER_RETURN_REQUEST_HEADER_PATTERN =\n      Pattern.compile(\"return=(.*)\");\n\n  public static ReturnPreference parse(NativeWebRequest request) {\n    String[] preferHeaderValues =\n        ofNullable(request.getHeaderValues(Rfc7240Headers.PREFER)).orElse(new String[0]);\n    return parse(preferHeaderValues);\n  }\n", "      Pattern.compile(\"return=(.*)\");\n\n  public static ReturnPreference parse(NativeWebRequest request) {\n    String[] preferHeaderValues =\n        ofNullable(request.getHeaderValues(Rfc7240Headers.PREFER)).orElse(new String[0]);\n    return parse(preferHeaderValues);\n  }\n\n  public static ReturnPreference parse(ServerHttpRequest request) {\n    String[] preferHeaderValues =\n        ofNullable(request.getHeaders().get(Rfc7240Headers.PREFER))\n            .orElse(Collections.emptyList())\n            .toArray(new String[0]);\n    return parse(preferHeaderValues);\n  }\n\n  private static ReturnPreference parse(String[] preferHeaderValues) {\n\n    Collection<ReturnPreference> preferences =\n        Stream.of(preferHeaderValues)\n            .map(PREFER_RETURN_REQUEST_HEADER_PATTERN::matcher)\n            .filter(Matcher::matches)\n            .map(matcher -> matcher.group(1))\n            .map(ReturnPreferences::parseReturnPreference)\n            .collect(Collectors.toList());\n", "  public static ReturnPreference parse(ServerHttpRequest request) {\n    String[] preferHeaderValues =\n        ofNullable(request.getHeaders().get(Rfc7240Headers.PREFER))\n            .orElse(Collections.emptyList())\n            .toArray(new String[0]);\n    return parse(preferHeaderValues);\n  }\n\n  private static ReturnPreference parse(String[] preferHeaderValues) {\n\n    Collection<ReturnPreference> preferences =\n        Stream.of(preferHeaderValues)\n            .map(PREFER_RETURN_REQUEST_HEADER_PATTERN::matcher)\n            .filter(Matcher::matches)\n            .map(matcher -> matcher.group(1))\n            .map(ReturnPreferences::parseReturnPreference)\n            .collect(Collectors.toList());\n", "    if (preferences.size() > 1) {\n      LOG.warn(\"Found multiple return preferences\");\n      return ReturnPreference.UNDEFINED;\n    }\n\n    return preferences.stream().findFirst().orElse(ReturnPreference.UNDEFINED);\n  }\n\n  private static ReturnPreference parseReturnPreference(String returnValue) {\n    try {\n      return ReturnPreference.valueOf(returnValue.toUpperCase());\n    } catch (IllegalArgumentException e) {\n      return ReturnPreference.UNDEFINED;\n    }\n  }\n}\n", "    try {\n      return ReturnPreference.valueOf(returnValue.toUpperCase());\n    } catch (IllegalArgumentException e) {\n      return ReturnPreference.UNDEFINED;\n    }\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/item/ItemRepository.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.item;\n\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface ItemRepository extends CrudRepository<Item, Long> {\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/item/Item.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.item;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\n@Entity\npublic class Item {\n\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Id private long id;\n\n  @Column private Double price;\n\n  @Column private String label;\n\n  public Item(Double price, String label) {\n    this.price = price;\n    this.label = label;\n  }\n\n  @Deprecated(since = \"now\")\n  protected Item() {}\n", "@Entity\npublic class Item {\n\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Id private long id;\n\n  @Column private Double price;\n\n  @Column private String label;\n\n  public Item(Double price, String label) {\n    this.price = price;\n    this.label = label;\n  }\n\n  @Deprecated(since = \"now\")\n  protected Item() {}\n", "  public long id() {\n    return id;\n  }\n\n  public Double price() {\n    return price;\n  }\n\n  public String label() {\n    return label;\n  }\n}\n", "  public String label() {\n    return label;\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/spectacles/Spectacles.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.spectacles;\n\nimport com.cos.devoxx.hypermediairl.core.invoice.Invoice;\nimport com.cos.devoxx.hypermediairl.core.invoice.InvoiceRepository;\nimport com.cos.devoxx.hypermediairl.core.item.Item;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;", "import jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport java.util.Optional;\n\n@Entity\npublic class Spectacles {\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Id private long id;\n  @ManyToOne private Item frame;\n  @ManyToOne private Item rightLens;\n  @ManyToOne private Item leftLens;\n", "  public Spectacles selectFrame(Item frame) {\n    this.frame = frame;\n    return this;\n  }\n\n  public Spectacles deleteFrame() {\n    this.frame = null;\n    return this;\n  }\n\n  public Spectacles selectRightLens(Item rightLens) {\n    this.rightLens = rightLens;\n    return this;\n  }\n", "  public Spectacles selectRightLens(Item rightLens) {\n    this.rightLens = rightLens;\n    return this;\n  }\n\n  public Spectacles deleteRightLens() {\n    this.rightLens = null;\n    return this;\n  }\n\n  public Spectacles selectLeftLens(Item leftLens) {\n    this.leftLens = leftLens;\n    return this;\n  }\n", "  public Spectacles selectLeftLens(Item leftLens) {\n    this.leftLens = leftLens;\n    return this;\n  }\n\n  public Spectacles deleteLeftLens() {\n    this.leftLens = null;\n    return this;\n  }\n\n  public Double totalPrice() {\n    return frame().map(Item::price).orElse(0d)\n        + rightLens().map(Item::price).orElse(0d)\n        + leftLens().map(Item::price).orElse(0d);\n  }\n", "  public Double totalPrice() {\n    return frame().map(Item::price).orElse(0d)\n        + rightLens().map(Item::price).orElse(0d)\n        + leftLens().map(Item::price).orElse(0d);\n  }\n\n  public Invoice invoice(InvoiceRepository invoiceRepository) {\n    return invoiceRepository.save(new Invoice(this));\n  }\n\n  public boolean isEligibleForInvoicing() {\n    return frame != null && rightLens != null && leftLens != null;\n  }\n", "  public boolean isEligibleForInvoicing() {\n    return frame != null && rightLens != null && leftLens != null;\n  }\n\n  public long id() {\n    return id;\n  }\n\n  public Optional<Item> frame() {\n    return Optional.ofNullable(frame);\n  }\n\n  public Optional<Item> rightLens() {\n    return Optional.ofNullable(rightLens);\n  }\n\n  public Optional<Item> leftLens() {\n    return Optional.ofNullable(leftLens);\n  }\n}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/spectacles/SpectaclesRepository.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.spectacles;\n\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface SpectaclesRepository extends CrudRepository<Spectacles, Long> {}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/invoice/InvoiceRepository.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.invoice;\n\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface InvoiceRepository extends CrudRepository<Invoice, Long> {}\n"]}
{"filename": "src/main/java/com/cos/devoxx/hypermediairl/core/invoice/Invoice.java", "chunked_list": ["package com.cos.devoxx.hypermediairl.core.invoice;\n\nimport com.cos.devoxx.hypermediairl.core.spectacles.Spectacles;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\n", "import jakarta.persistence.ManyToOne;\n\n@Entity\npublic class Invoice {\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Id private long id;\n\n  @ManyToOne private Spectacles spectacles;\n\n  @Column Double total;\n\n  @Deprecated(since = \"now\")\n  protected Invoice() {}\n\n  public Invoice(Spectacles spectacles) {\n    this.spectacles = spectacles;\n    this.total = spectacles.totalPrice();\n  }\n", "  public long id() {\n    return id;\n  }\n\n  public Spectacles spectacles() {\n    return spectacles;\n  }\n\n  public Double total() {\n    return total;\n  }\n}\n", "  public Double total() {\n    return total;\n  }\n}\n"]}
