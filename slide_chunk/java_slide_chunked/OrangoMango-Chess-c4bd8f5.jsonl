{"filename": "src/main/java/module-info.java", "chunked_list": ["module com.orangomango.chess{\n\trequires javafx.controls;\n\trequires javafx.media;\n\n\texports com.orangomango.chess;\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/Piece.java", "chunked_list": ["package com.orangomango.chess;\n\nimport javafx.scene.paint.Color;\nimport javafx.scene.image.Image;\n\npublic class Piece{\n\tpublic static final int MOVE_DIAGONAL = 0;\n\tpublic static final int MOVE_HORIZONTAL = 1;\n\tpublic static final int MOVE_KNIGHT = 2;\n\t\n\tpublic static final String PIECE_PAWN = \"p\";", "\tpublic static final int MOVE_KNIGHT = 2;\n\t\n\tpublic static final String PIECE_PAWN = \"p\";\n\tpublic static final String PIECE_ROOK = \"r\";\n\tpublic static final String PIECE_KNIGHT = \"n\";\n\tpublic static final String PIECE_BISHOP = \"b\";\n\tpublic static final String PIECE_KING = \"k\";\n\tpublic static final String PIECE_QUEEN = \"q\";\n\n\tpublic static enum Pieces{\n\t\tPAWN(PIECE_PAWN, 1, 1, MOVE_HORIZONTAL),\n\t\tROOK(PIECE_ROOK, 8, 5, MOVE_HORIZONTAL),\n\t\tKNIGHT(PIECE_KNIGHT, 1, 3, MOVE_KNIGHT),\n\t\tBISHOP(PIECE_BISHOP, 8, 3, MOVE_DIAGONAL),\n\t\tKING(PIECE_KING, 1, 0, MOVE_HORIZONTAL, MOVE_DIAGONAL),\n\t\tQUEEN(PIECE_QUEEN, 8, 9, MOVE_HORIZONTAL, MOVE_DIAGONAL);\n\t\t\n\t\tprivate String name;\n\t\tprivate int[] directions;\n\t\tprivate int amount;\n\t\tprivate int value;\n\t\t\n\t\tprivate Pieces(String name, int amount, int value, int... directions){\n\t\t\tthis.name = name;\n\t\t\tthis.amount = amount;\n\t\t\tthis.directions = directions;\n\t\t\tthis.value = value;\n\t\t}\n\t\t", "\tpublic static enum Pieces{\n\t\tPAWN(PIECE_PAWN, 1, 1, MOVE_HORIZONTAL),\n\t\tROOK(PIECE_ROOK, 8, 5, MOVE_HORIZONTAL),\n\t\tKNIGHT(PIECE_KNIGHT, 1, 3, MOVE_KNIGHT),\n\t\tBISHOP(PIECE_BISHOP, 8, 3, MOVE_DIAGONAL),\n\t\tKING(PIECE_KING, 1, 0, MOVE_HORIZONTAL, MOVE_DIAGONAL),\n\t\tQUEEN(PIECE_QUEEN, 8, 9, MOVE_HORIZONTAL, MOVE_DIAGONAL);\n\t\t\n\t\tprivate String name;\n\t\tprivate int[] directions;\n\t\tprivate int amount;\n\t\tprivate int value;\n\t\t\n\t\tprivate Pieces(String name, int amount, int value, int... directions){\n\t\t\tthis.name = name;\n\t\t\tthis.amount = amount;\n\t\t\tthis.directions = directions;\n\t\t\tthis.value = value;\n\t\t}\n\t\t", "\t\tpublic String getName(){\n\t\t\treturn this.name;\n\t\t}\n\t\t\n\t\tpublic int getAmount(){\n\t\t\treturn this.amount;\n\t\t}\n\t\t\n\t\tpublic int getValue(){\n\t\t\treturn this.value;\n\t\t}\n\t\t\n\t\tpublic int[] getDirections(){\n\t\t\treturn this.directions;\n\t\t}\n\t}\n\t\n\tprivate Pieces type;\n\tprivate Color color;\n\tprivate int x, y;\n\tprivate Image image;\n\t\n\tpublic Piece(Pieces type, Color color, int x, int y){\n\t\tthis.type = type;\n\t\tthis.color = color;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.image = new Image(\"/\"+type.name().toLowerCase()+\"_\"+(color == Color.WHITE ? \"white\" : \"black\")+\".png\");\n\t}\n\t", "\t\tpublic int getValue(){\n\t\t\treturn this.value;\n\t\t}\n\t\t\n\t\tpublic int[] getDirections(){\n\t\t\treturn this.directions;\n\t\t}\n\t}\n\t\n\tprivate Pieces type;\n\tprivate Color color;\n\tprivate int x, y;\n\tprivate Image image;\n\t\n\tpublic Piece(Pieces type, Color color, int x, int y){\n\t\tthis.type = type;\n\t\tthis.color = color;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.image = new Image(\"/\"+type.name().toLowerCase()+\"_\"+(color == Color.WHITE ? \"white\" : \"black\")+\".png\");\n\t}\n\t", "\tpublic void setPos(int x, int y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\t\n\tpublic int getX(){\n\t\treturn this.x;\n\t}\n\t\n\tpublic int getY(){\n\t\treturn this.y;\n\t}\n\t", "\tpublic int getY(){\n\t\treturn this.y;\n\t}\n\t\n\tpublic Pieces getType(){\n\t\treturn this.type;\n\t}\n\t\n\tpublic Image getImage(){\n\t\treturn this.image;\n\t}\n\t", "\tpublic Image getImage(){\n\t\treturn this.image;\n\t}\n\t\n\tpublic Color getColor(){\n\t\treturn this.color;\n\t}\n\t\n\tpublic static Pieces getType(String t){\n\t\tswitch (t.toLowerCase()){\n\t\t\tcase \"p\":\n\t\t\t\treturn Pieces.PAWN;\n\t\t\tcase \"r\":\n\t\t\t\treturn Pieces.ROOK;\n\t\t\tcase \"n\":\n\t\t\t\treturn Pieces.KNIGHT;\n\t\t\tcase \"b\":\n\t\t\t\treturn Pieces.BISHOP;\n\t\t\tcase \"q\":\n\t\t\t\treturn Pieces.QUEEN;\n\t\t\tcase \"k\":\n\t\t\t\treturn Pieces.KING;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t@Override", "\tpublic static Pieces getType(String t){\n\t\tswitch (t.toLowerCase()){\n\t\t\tcase \"p\":\n\t\t\t\treturn Pieces.PAWN;\n\t\t\tcase \"r\":\n\t\t\t\treturn Pieces.ROOK;\n\t\t\tcase \"n\":\n\t\t\t\treturn Pieces.KNIGHT;\n\t\t\tcase \"b\":\n\t\t\t\treturn Pieces.BISHOP;\n\t\t\tcase \"q\":\n\t\t\t\treturn Pieces.QUEEN;\n\t\t\tcase \"k\":\n\t\t\t\treturn Pieces.KING;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t@Override", "\tpublic String toString(){\n\t\treturn String.format(\"%s(%d)\", this.type.getName(), this.color == Color.WHITE ? 0 : 1);\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/Engine.java", "chunked_list": ["package com.orangomango.chess;\n\nimport java.io.*;\n\nimport javafx.scene.paint.Color;\n\npublic class Engine{\n\tprivate static String COMMAND = \"stockfish\";\n\t\n\tprivate OutputStreamWriter writer;\n\tprivate BufferedReader reader;\n\tprivate boolean running = true;\n\n\tstatic {\n\t\tFile dir = new File(System.getProperty(\"user.home\"), \".omchess\");\n\t\tString found = null;", "\t\tif (dir.exists()){\n\t\t\tfor (File file : dir.listFiles()){\n\t\t\t\t// Custom stockfish file\n\t\t\t\tif (file.getName().startsWith(\"stockfish\")){\n\t\t\t\t\tfound = file.getAbsolutePath();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (found != null) COMMAND = found;\n\t}\n\t\n\tpublic Engine(){", "\t\tif (found != null) COMMAND = found;\n\t}\n\t\n\tpublic Engine(){\n\t\ttry {\n\t\t\tProcess process = Runtime.getRuntime().exec(COMMAND);\n\t\t\tthis.writer = new OutputStreamWriter(process.getOutputStream());\n\t\t\tthis.reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\tgetOutput(20);\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t\tLogger.writeError(ex.getMessage());\n\t\t\tthis.running = false;\n\t\t}\n\t}\n\t", "\tpublic boolean isRunning(){\n\t\treturn this.running;\n\t}\n\t\n\tpublic void writeCommand(String command){\n\t\ttry {\n\t\t\tthis.writer.write(command+\"\\n\");\n\t\t\tthis.writer.flush();\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\t", "\tpublic String getOutput(int time){\n\t\tStringBuilder builder = new StringBuilder();\n\t\ttry {\n\t\t\tThread.sleep(time);\n\t\t\twriteCommand(\"isready\");\n\t\t\twhile (true){\n\t\t\t\tString line = this.reader.readLine();\n\t\t\t\tif (line == null || line.equals(\"readyok\")){\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tbuilder.append(line+\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex){\n\t\t\tex.printStackTrace();\n\t\t\tSystem.exit(0);\n\t\t}\n\t\treturn builder.toString();\n\t}\n\t", "\tpublic String getBestMove(Board b){\n\t\twriteCommand(\"position fen \"+b.getFEN());\n\t\twriteCommand(String.format(\"go wtime %s btime %s winc %s binc %s\", b.getTime(Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));\n\t\tString output = \"\";\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tString line = this.reader.readLine();\n\t\t\t\tif (line != null && line.contains(\"bestmove\")){\n\t\t\t\t\toutput = line.split(\"bestmove \")[1].split(\" \")[0];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (IOException ex){\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}", "\t\tif (output.trim().equals(\"(none)\")) return null;\n\t\tchar[] c = output.toCharArray();\n\t\treturn String.valueOf(c[0])+String.valueOf(c[1])+\" \"+String.valueOf(c[2])+String.valueOf(c[3])+(c.length == 5 ? \" \"+String.valueOf(c[4]) : \"\");\n\t}\n\t\n\tpublic String getEval(String fen){\n\t\twriteCommand(\"position fen \"+fen);\n\t\twriteCommand(\"eval\");\n\t\tString output = getOutput(50).split(\"Final evaluation\")[1].split(\"\\\\(\")[0].trim();\n\t\tif (output.startsWith(\":\")) output = output.substring(1).trim();\n\t\treturn output;\n\t}\n}\n", "\t\tif (output.startsWith(\":\")) output = output.substring(1).trim();\n\t\treturn output;\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/Board.java", "chunked_list": ["package com.orangomango.chess;\n\nimport javafx.scene.paint.Color;\n\nimport java.util.*;\nimport java.text.SimpleDateFormat;\nimport java.util.stream.Collectors;\n\npublic class Board{\n\tprivate Piece[][] board;\n\tprivate boolean blackRightCastleAllowed = true, whiteRightCastleAllowed = true;\n\tprivate boolean blackLeftCastleAllowed = true, whiteLeftCastleAllowed = true;\n\tprivate List<Piece> blackCaptured = new ArrayList<>();\n\tprivate List<Piece> whiteCaptured = new ArrayList<>();\n\tprivate int whiteExtraMaterial, blackExtraMaterial;\n\tprivate List<Piece> whiteChecks = new ArrayList<>();\n\tprivate List<Piece> blackChecks = new ArrayList<>();\n\tprivate Piece whiteKing, blackKing;\n\tprivate Color player = Color.WHITE;\n\tprivate int fifty = 0, movesN = 1;\n\tprivate String enPassant = null;\n\tprivate boolean[] canCastle = new boolean[4];\n\tprivate Map<String, Integer> states = new HashMap<>();\n\tprivate List<String> moves = new ArrayList<>();", "public class Board{\n\tprivate Piece[][] board;\n\tprivate boolean blackRightCastleAllowed = true, whiteRightCastleAllowed = true;\n\tprivate boolean blackLeftCastleAllowed = true, whiteLeftCastleAllowed = true;\n\tprivate List<Piece> blackCaptured = new ArrayList<>();\n\tprivate List<Piece> whiteCaptured = new ArrayList<>();\n\tprivate int whiteExtraMaterial, blackExtraMaterial;\n\tprivate List<Piece> whiteChecks = new ArrayList<>();\n\tprivate List<Piece> blackChecks = new ArrayList<>();\n\tprivate Piece whiteKing, blackKing;\n\tprivate Color player = Color.WHITE;\n\tprivate int fifty = 0, movesN = 1;\n\tprivate String enPassant = null;\n\tprivate boolean[] canCastle = new boolean[4];\n\tprivate Map<String, Integer> states = new HashMap<>();\n\tprivate List<String> moves = new ArrayList<>();", "\tpublic String playerA = System.getProperty(\"user.name\"), playerB = \"BLACK\";\n\tprivate volatile long whiteTime, blackTime;\n\tprivate long lastTime, gameTime;\n\tprivate int increment;\n\t\n\tpublic Board(String fen, long time, int increment){\n\t\tthis.board = new Piece[8][8];\n\t\tsetupBoard(fen);\n\t\tthis.gameTime = time;\n\t\tthis.increment = increment;\n\t\tthis.whiteTime = time;\n\t\tthis.blackTime = time;\n\t\tthis.lastTime = System.currentTimeMillis();\n\t}\n\t", "\tpublic void tick(){\n\t\tif (this.movesN == 1){\n\t\t\tthis.lastTime = System.currentTimeMillis();\n\t\t\treturn;\n\t\t}\n\t\tlong time = System.currentTimeMillis()-this.lastTime;\n\t\tif (this.player == Color.WHITE){\n\t\t\tthis.whiteTime -= time;\n\t\t} else {\n\t\t\tthis.blackTime -= time;\n\t\t}\n\t\tthis.whiteTime = Math.max(this.whiteTime, 0);\n\t\tthis.blackTime = Math.max(this.blackTime, 0);\n\t\tthis.lastTime = System.currentTimeMillis();\n\t}\n\t", "\tpublic long getGameTime(){\n\t\treturn this.gameTime;\n\t}\n\t\n\tpublic int getIncrementTime(){\n\t\treturn this.increment;\n\t}\n\t\n\tprivate void setupBoard(String fen){\n\t\tString[] data = fen.split(\" \");\n\t\tthis.whiteKing = null;\n\t\tthis.blackKing = null;\n\t\tint r = 0;", "\t\tfor (String row : data[0].split(\"/\")){\n\t\t\tchar[] p = row.toCharArray();\n\t\t\tint pos = 0;\n\t\t\tfor (int i = 0; i < 8; i++){\n\t\t\t\ttry {\n\t\t\t\t\tint n = Integer.parseInt(Character.toString(p[pos]));\n\t\t\t\t\ti += n-1;\n\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\tPiece piece = new Piece(Piece.getType(String.valueOf(p[pos])), Character.isUpperCase(p[pos]) ? Color.WHITE : Color.BLACK, i, r);\n\t\t\t\t\tthis.board[i][r] = piece;\n\t\t\t\t\tif (piece.getType().getName() == Piece.PIECE_KING){", "\t\t\t\t\tif (piece.getType().getName() == Piece.PIECE_KING){\n\t\t\t\t\t\tif (piece.getColor() == Color.WHITE){\n\t\t\t\t\t\t\tthis.whiteKing = piece;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.blackKing = piece;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t\t\n\t\tthis.player = data[1].equals(\"w\") ? Color.WHITE : Color.BLACK;\n\t\tchar[] c = data[2].toCharArray();", "\t\tfor (int i = 0; i < c.length; i++){\n\t\t\tif (i == 0 && String.valueOf(c[i]).equals(\"-\")){\n\t\t\t\tthis.whiteLeftCastleAllowed = false;\n\t\t\t\tthis.whiteRightCastleAllowed = false;\n\t\t\t\tif (c.length == 1){\n\t\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t\t}\n\t\t\t} else if (String.valueOf(c[i]).equals(\"-\")){\n\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t} else {\n\t\t\t\tString d = String.valueOf(c[i]);", "\t\t\t} else if (String.valueOf(c[i]).equals(\"-\")){\n\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t} else {\n\t\t\t\tString d = String.valueOf(c[i]);\n\t\t\t\tif (d.equals(\"Q\")) this.whiteLeftCastleAllowed = true;\n\t\t\t\tif (d.equals(\"K\")) this.whiteRightCastleAllowed = true;\n\t\t\t\tif (d.equals(\"q\")) this.blackLeftCastleAllowed = true;\n\t\t\t\tif (d.equals(\"k\")) this.blackRightCastleAllowed = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.canCastle[0] = canCastleLeft(Color.WHITE);\n\t\tthis.canCastle[1] = canCastleRight(Color.WHITE);\n\t\tthis.canCastle[2] = canCastleLeft(Color.BLACK);\n\t\tthis.canCastle[3] = canCastleRight(Color.BLACK);\n\t\t\n\t\tString ep = String.valueOf(data[3]);", "\t\t\t\tif (d.equals(\"k\")) this.blackRightCastleAllowed = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.canCastle[0] = canCastleLeft(Color.WHITE);\n\t\tthis.canCastle[1] = canCastleRight(Color.WHITE);\n\t\tthis.canCastle[2] = canCastleLeft(Color.BLACK);\n\t\tthis.canCastle[3] = canCastleRight(Color.BLACK);\n\t\t\n\t\tString ep = String.valueOf(data[3]);\n\t\tif (!ep.equals(\"-\")) this.enPassant = ep;\n\t\t\n\t\tthis.fifty = Integer.parseInt(String.valueOf(data[4]));\n\t\tthis.movesN = Integer.parseInt(String.valueOf(data[5]));\n\t\t\n\t\tthis.states.clear();\n\t\tthis.states.put(getFEN().split(\" \")[0], 1);\n\t\t\n\t\tsetupCaptures(Color.WHITE);\n\t\tsetupCaptures(Color.BLACK);\n\n\t\tthis.blackChecks.clear();\n\t\tthis.whiteChecks.clear();", "\t\tif (!ep.equals(\"-\")) this.enPassant = ep;\n\t\t\n\t\tthis.fifty = Integer.parseInt(String.valueOf(data[4]));\n\t\tthis.movesN = Integer.parseInt(String.valueOf(data[5]));\n\t\t\n\t\tthis.states.clear();\n\t\tthis.states.put(getFEN().split(\" \")[0], 1);\n\t\t\n\t\tsetupCaptures(Color.WHITE);\n\t\tsetupCaptures(Color.BLACK);\n\n\t\tthis.blackChecks.clear();\n\t\tthis.whiteChecks.clear();", "\t\tfor (Piece boardPiece : getPiecesOnBoard()){\n\t\t\tList<String> newLegalMoves = getLegalMoves(boardPiece);\n\t\t\tif (boardPiece.getColor() == Color.WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){\n\t\t\t\tthis.blackChecks.add(boardPiece);\n\t\t\t} else if (boardPiece.getColor() == Color.BLACK && newLegalMoves.contains(convertPosition(this.whiteKing.getX(), this.whiteKing.getY()))){\n\t\t\t\tthis.whiteChecks.add(boardPiece);\n\t\t\t}\n\t\t}\n\n\t\tif (this.whiteKing == null || this.blackKing == null) throw new IllegalStateException(\"Missing king\");\n\t\tif (getAttackers(this.player == Color.WHITE ? this.blackKing : this.whiteKing) != null) throw new IllegalStateException(\"King is in check\");\n\t}\n\t\n\tprivate void setupCaptures(Color color){\n\t\tList<Piece> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();\n\t\tList<Piece> captures = color == Color.WHITE ? this.blackCaptured : this.whiteCaptured;\n\t\tint pawns = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();\n\t\tint rooks = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();\n\t\tint knights = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();\n\t\tint bishops = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_BISHOP).count();\n\t\tint queens = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_QUEEN).count();", "\t\tif (this.whiteKing == null || this.blackKing == null) throw new IllegalStateException(\"Missing king\");\n\t\tif (getAttackers(this.player == Color.WHITE ? this.blackKing : this.whiteKing) != null) throw new IllegalStateException(\"King is in check\");\n\t}\n\t\n\tprivate void setupCaptures(Color color){\n\t\tList<Piece> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();\n\t\tList<Piece> captures = color == Color.WHITE ? this.blackCaptured : this.whiteCaptured;\n\t\tint pawns = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();\n\t\tint rooks = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();\n\t\tint knights = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();\n\t\tint bishops = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_BISHOP).count();\n\t\tint queens = (int)pieces.stream().filter(piece -> piece.getType().getName() == Piece.PIECE_QUEEN).count();", "\t\tfor (int i = 0; i < 8-pawns; i++){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t}\n\t\tfor (int i = 0; i < 2-rooks; i++){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.ROOK, color, -1, -1));\n\t\t}\n\t\tfor (int i = 0; i < 2-knights; i++){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.KNIGHT, color, -1, -1));\n\t\t}\n\t\tfor (int i = 0; i < 2-bishops; i++){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.BISHOP, color, -1, -1));\n\t\t}", "\t\tfor (int i = 0; i < 2-bishops; i++){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.BISHOP, color, -1, -1));\n\t\t}\n\t\tif (queens == 0){\n\t\t\tcaptures.add(new Piece(Piece.Pieces.QUEEN, color, -1, -1));\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < -(2-rooks); i++){\n\t\t\tcapture(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t\tpromote(color, Piece.Pieces.ROOK);\n\t\t}", "\t\tfor (int i = 0; i < -(2-knights); i++){\n\t\t\tcapture(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t\tpromote(color, Piece.Pieces.KNIGHT);\n\t\t}\n\t\tfor (int i = 0; i < -(2-bishops); i++){\n\t\t\tcapture(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t\tpromote(color, Piece.Pieces.BISHOP);\n\t\t}\n\t\tfor (int i = 0; i < -(1-queens); i++){\n\t\t\tcapture(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t\tpromote(color, Piece.Pieces.QUEEN);\n\t\t}\n\t}\n\t", "\t\tfor (int i = 0; i < -(1-queens); i++){\n\t\t\tcapture(new Piece(Piece.Pieces.PAWN, color, -1, -1));\n\t\t\tpromote(color, Piece.Pieces.QUEEN);\n\t\t}\n\t}\n\t\n\tpublic int getMovesN(){\n\t\treturn this.movesN;\n\t}\n\t\n\tpublic List<String> getMoves(){\n\t\treturn this.moves;\n\t}\n\t", "\tpublic boolean move(String pos1, String pos, String prom){\n\t\tif (pos1 == null || pos == null) return false;\n\t\tint[] p1 = convertNotation(pos1);\n\t\t\n\t\tPiece piece = this.board[p1[0]][p1[1]];\n\t\tif (piece == null || piece.getColor() != this.player) return false;\n\t\t\n\t\tList<String> legalMoves = getLegalMoves(piece);\n\t\tif (legalMoves.contains(pos)){\n\t\t\tint[] p2 = convertNotation(pos);\n\t\t\t\n\t\t\tPiece[][] backup = createBackup();\n\t\t\tList<Piece> identical = new ArrayList<>();", "\t\tif (legalMoves.contains(pos)){\n\t\t\tint[] p2 = convertNotation(pos);\n\t\t\t\n\t\t\tPiece[][] backup = createBackup();\n\t\t\tList<Piece> identical = new ArrayList<>();\n\t\t\tfor (Piece p : getPiecesOnBoard()){\n\t\t\t\tif (p != piece && p.getType() == piece.getType() && p.getColor() == piece.getColor()){\n\t\t\t\t\tif (getValidMoves(p).contains(pos)) identical.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tPiece capture = this.board[p2[0]][p2[1]];", "\t\t\tif (this.enPassant != null && pos.equals(this.enPassant)){\n\t\t\t\tcapture = this.board[p2[0]][p1[1]];\n\t\t\t\tthis.board[capture.getX()][capture.getY()] = null;\n\t\t\t}\n\t\t\tthis.board[p1[0]][p1[1]] = null;\n\t\t\tsetPiece(piece, p2[0], p2[1]);\n\t\t\t\n\t\t\tif (getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){\n\t\t\t\trestoreBackup(backup);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t", "\t\t\tif (capture != null) capture(capture);\n\t\t\t\n\t\t\tboolean castle = false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_KING){\n\t\t\t\tif (Math.abs(p2[0]-p1[0]) == 2){\n\t\t\t\t\tif (p2[0] == 6){\n\t\t\t\t\t\tcastleRight(piece.getColor());\n\t\t\t\t\t\tcastle = true;\n\t\t\t\t\t} else if (p2[0] == 2){\n\t\t\t\t\t\tcastleLeft(piece.getColor());\n\t\t\t\t\t\tcastle = true;\n\t\t\t\t\t}\n\t\t\t\t}", "\t\t\t\t\t} else if (p2[0] == 2){\n\t\t\t\t\t\tcastleLeft(piece.getColor());\n\t\t\t\t\t\tcastle = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (piece.getColor() == Color.WHITE){\n\t\t\t\t\tthis.whiteRightCastleAllowed = false;\n\t\t\t\t\tthis.whiteLeftCastleAllowed = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\t}\n\t\t\t}\n", "\t\t\tif (piece.getType().getName() == Piece.PIECE_ROOK){\n\t\t\t\tif (piece.getColor() == Color.WHITE){\n\t\t\t\t\tif (this.whiteRightCastleAllowed && p1[0] == 7){\n\t\t\t\t\t\tthis.whiteRightCastleAllowed = false;\n\t\t\t\t\t} else if (this.whiteLeftCastleAllowed && p1[0] == 0){\n\t\t\t\t\t\tthis.whiteLeftCastleAllowed = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.blackRightCastleAllowed && p1[0] == 7){\n\t\t\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t\t\t} else if (this.blackLeftCastleAllowed && p1[0] == 0){\n\t\t\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "\t\t\t\t\tif (this.blackRightCastleAllowed && p1[0] == 7){\n\t\t\t\t\t\tthis.blackRightCastleAllowed = false;\n\t\t\t\t\t} else if (this.blackLeftCastleAllowed && p1[0] == 0){\n\t\t\t\t\t\tthis.blackLeftCastleAllowed = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\tthis.fifty = 0;\n\t\t\t\tif ((piece.getColor() == Color.WHITE && piece.getY() == 0) || (piece.getColor() == Color.BLACK && piece.getY() == 7)){\n\t\t\t\t\tPiece.Pieces promotion = Piece.getType(prom);\n\t\t\t\t\tthis.board[piece.getX()][piece.getY()] = new Piece(promotion, piece.getColor(), piece.getX(), piece.getY());\n\t\t\t\t\tcapture(piece);\n\t\t\t\t\tpromote(piece.getColor(), promotion);\n\t\t\t\t}", "\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\tthis.fifty = 0;\n\t\t\t\tif ((piece.getColor() == Color.WHITE && piece.getY() == 0) || (piece.getColor() == Color.BLACK && piece.getY() == 7)){\n\t\t\t\t\tPiece.Pieces promotion = Piece.getType(prom);\n\t\t\t\t\tthis.board[piece.getX()][piece.getY()] = new Piece(promotion, piece.getColor(), piece.getX(), piece.getY());\n\t\t\t\t\tcapture(piece);\n\t\t\t\t\tpromote(piece.getColor(), promotion);\n\t\t\t\t}\n\t\t\t\tif (Math.abs(p2[1]-p1[1]) == 2){\n\t\t\t\t\tthis.enPassant = convertPosition(piece.getX(), piece.getColor() == Color.WHITE ? piece.getY()+1 : piece.getY()-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.enPassant = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.fifty++;\n\t\t\t\tthis.enPassant = null;\n\t\t\t}\n\t\t\t\n\t\t\tthis.canCastle[0] = canCastleLeft(Color.WHITE);\n\t\t\tthis.canCastle[1] = canCastleRight(Color.WHITE);\n\t\t\tthis.canCastle[2] = canCastleLeft(Color.BLACK);\n\t\t\tthis.canCastle[3] = canCastleRight(Color.BLACK);\n\t\t\t\n\t\t\tthis.blackChecks.clear();\n\t\t\tthis.whiteChecks.clear();\n\t\t\tboolean check = false;", "\t\t\t\tif (Math.abs(p2[1]-p1[1]) == 2){\n\t\t\t\t\tthis.enPassant = convertPosition(piece.getX(), piece.getColor() == Color.WHITE ? piece.getY()+1 : piece.getY()-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.enPassant = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.fifty++;\n\t\t\t\tthis.enPassant = null;\n\t\t\t}\n\t\t\t\n\t\t\tthis.canCastle[0] = canCastleLeft(Color.WHITE);\n\t\t\tthis.canCastle[1] = canCastleRight(Color.WHITE);\n\t\t\tthis.canCastle[2] = canCastleLeft(Color.BLACK);\n\t\t\tthis.canCastle[3] = canCastleRight(Color.BLACK);\n\t\t\t\n\t\t\tthis.blackChecks.clear();\n\t\t\tthis.whiteChecks.clear();\n\t\t\tboolean check = false;", "\t\t\tfor (Piece boardPiece : getPiecesOnBoard()){\n\t\t\t\tList<String> newLegalMoves = getLegalMoves(boardPiece);\n\t\t\t\tif (boardPiece.getColor() == Color.WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){\n\t\t\t\t\tthis.blackChecks.add(boardPiece);\n\t\t\t\t\tcheck = true;\n\t\t\t\t} else if (boardPiece.getColor() == Color.BLACK && newLegalMoves.contains(convertPosition(this.whiteKing.getX(), this.whiteKing.getY()))){\n\t\t\t\t\tthis.whiteChecks.add(boardPiece);\n\t\t\t\t\tcheck = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "\t\t\tif (check){\n\t\t\t\tMainApplication.playSound(MainApplication.CHECK_SOUND);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.movesN > 1){\n\t\t\t\tif (this.player == Color.WHITE){\n\t\t\t\t\tthis.whiteTime += this.increment*1000;\n\t\t\t\t} else {\n\t\t\t\t\tthis.blackTime += this.increment*1000;\n\t\t\t\t}\n\t\t\t}\n", "\t\t\tif (this.player == Color.BLACK) this.movesN++;\n\t\t\tthis.player = this.player == Color.WHITE ? Color.BLACK : Color.WHITE;\n\t\t\t\n\t\t\tString fen = getFEN().split(\" \")[0];\n\t\t\tthis.states.put(fen, this.states.getOrDefault(fen, 0)+1);\n\t\t\t\n\t\t\tthis.moves.add(moveToString(piece, pos1, pos, check, capture != null, prom, castle, identical));\n\t\t\t\n\t\t\tif (capture != null){\n\t\t\t\tMainApplication.playSound(MainApplication.CAPTURE_SOUND);\n\t\t\t} else if (castle){\n\t\t\t\tMainApplication.playSound(MainApplication.CASTLE_SOUND);\n\t\t\t} else {\n\t\t\t\tMainApplication.playSound(MainApplication.MOVE_SOUND);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate String moveToString(Piece piece, String start, String pos, boolean check, boolean capture, String prom, boolean castle, List<Piece> identical){\n\t\tint[] coord = convertNotation(start);\n\t\tString output = \"\";", "\t\t\tif (capture != null){\n\t\t\t\tMainApplication.playSound(MainApplication.CAPTURE_SOUND);\n\t\t\t} else if (castle){\n\t\t\t\tMainApplication.playSound(MainApplication.CASTLE_SOUND);\n\t\t\t} else {\n\t\t\t\tMainApplication.playSound(MainApplication.MOVE_SOUND);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate String moveToString(Piece piece, String start, String pos, boolean check, boolean capture, String prom, boolean castle, List<Piece> identical){\n\t\tint[] coord = convertNotation(start);\n\t\tString output = \"\";", "\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\tif (capture){\n\t\t\t\toutput = String.valueOf(start.charAt(0))+\"x\"+pos;\n\t\t\t} else {\n\t\t\t\toutput = pos;\n\t\t\t}\n\t\t\tif (prom != null) output += \"=\"+prom.toUpperCase();\n\t\t} else if (castle){\n\t\t\toutput = piece.getX() == 2 ? \"O-O-O\" : \"O-O\";\n\t\t} else {\n\t\t\tString extra = \"\";", "\t\t\tif (identical.size() >= 2){\n\t\t\t\textra = start;\n\t\t\t} else if (identical.size() == 1){\n\t\t\t\tPiece other = identical.get(0);\n\t\t\t\tif (coord[0] != other.getX()){\n\t\t\t\t\textra = String.valueOf(start.charAt(0));\n\t\t\t\t} else if (coord[1] != other.getY()){\n\t\t\t\t\textra = String.valueOf(start.charAt(1));\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput = piece.getType().getName().toUpperCase()+extra+(capture ? \"x\" : \"\")+pos;\n\t\t}", "\t\tif (isCheckMate(piece.getColor() == Color.WHITE ? Color.BLACK : Color.WHITE)){\n\t\t\toutput += \"#\";\n\t\t} else if (check){\n\t\t\toutput += \"+\";\n\t\t}\n\t\treturn output;\n\t}\n\t\n\tpublic int getTime(Color color){\n\t\treturn color == Color.WHITE ? (int)this.whiteTime : (int)this.blackTime;\n\t}\n\t", "\tpublic int getTime(Color color){\n\t\treturn color == Color.WHITE ? (int)this.whiteTime : (int)this.blackTime;\n\t}\n\t\n\tpublic void castleRight(Color color){\n\t\tint ypos = color == Color.WHITE ? 7 : 0;\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;\n\t\tPiece rook = this.board[7][ypos];\n\t\tif (canCastleRight(color)){\n\t\t\tthis.board[rook.getX()][rook.getY()] = null;\n\t\t\tsetPiece(rook, king.getX()-1, king.getY());\n\t\t}\n\t}\n\t", "\t\tif (canCastleRight(color)){\n\t\t\tthis.board[rook.getX()][rook.getY()] = null;\n\t\t\tsetPiece(rook, king.getX()-1, king.getY());\n\t\t}\n\t}\n\t\n\tpublic void castleLeft(Color color){\n\t\tint ypos = color == Color.WHITE ? 7 : 0;\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;\n\t\tPiece rook = this.board[0][ypos];\n\t\tif (canCastleLeft(color)){\n\t\t\tthis.board[rook.getX()][rook.getY()] = null;\n\t\t\tsetPiece(rook, king.getX()+1, king.getY());\n\t\t}\n\t}\n\t\n\tprivate boolean canCastleRight(Color color){\n\t\tboolean moved = color == Color.WHITE ? this.whiteRightCastleAllowed : this.blackRightCastleAllowed;\n\t\treturn moved && getAttackers(color == Color.WHITE ? this.whiteKing : this.blackKing) == null && canCastle(new int[]{5, 6}, new int[]{5, 6}, color);\n\t}\n\t\n\tprivate boolean canCastleLeft(Color color){\n\t\tboolean moved = color == Color.WHITE ? this.whiteLeftCastleAllowed : this.blackLeftCastleAllowed;\n\t\treturn moved && getAttackers(color == Color.WHITE ? this.whiteKing : this.blackKing) == null && canCastle(new int[]{2, 3}, new int[]{1, 2, 3}, color);\n\t}\n\t\n\tprivate boolean canCastle(int[] xpos, int[] checkXpos, Color color){\n\t\tint ypos = color == Color.WHITE ? 7 : 0;\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;", "\t\tif (canCastleLeft(color)){\n\t\t\tthis.board[rook.getX()][rook.getY()] = null;\n\t\t\tsetPiece(rook, king.getX()+1, king.getY());\n\t\t}\n\t}\n\t\n\tprivate boolean canCastleRight(Color color){\n\t\tboolean moved = color == Color.WHITE ? this.whiteRightCastleAllowed : this.blackRightCastleAllowed;\n\t\treturn moved && getAttackers(color == Color.WHITE ? this.whiteKing : this.blackKing) == null && canCastle(new int[]{5, 6}, new int[]{5, 6}, color);\n\t}\n\t\n\tprivate boolean canCastleLeft(Color color){\n\t\tboolean moved = color == Color.WHITE ? this.whiteLeftCastleAllowed : this.blackLeftCastleAllowed;\n\t\treturn moved && getAttackers(color == Color.WHITE ? this.whiteKing : this.blackKing) == null && canCastle(new int[]{2, 3}, new int[]{1, 2, 3}, color);\n\t}\n\t\n\tprivate boolean canCastle(int[] xpos, int[] checkXpos, Color color){\n\t\tint ypos = color == Color.WHITE ? 7 : 0;\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;", "\t\tfor (int i = 0; i < xpos.length; i++){\n\t\t\tif (this.board[xpos[i]][ypos] != null && this.board[xpos[i]][ypos].getType().getName() != Piece.PIECE_KING) return false;\n\t\t}\n\t\t\n\t\tPiece[][] backup = createBackup();\n\t\tfor (int i = 0; i < checkXpos.length; i++){\n\t\t\tthis.board[king.getX()][king.getY()] = null;\n\t\t\tsetPiece(king, checkXpos[i], ypos);\n\t\t\tif (getAttackers(king) != null){\n\t\t\t\trestoreBackup(backup);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\trestoreBackup(backup);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic List<String> getValidMoves(Piece piece){\n\t\tList<String> legalMoves = getLegalMoves(piece);\n\t\tList<String> validMoves = new ArrayList<>();", "\t\t\tif (getAttackers(king) != null){\n\t\t\t\trestoreBackup(backup);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\trestoreBackup(backup);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic List<String> getValidMoves(Piece piece){\n\t\tList<String> legalMoves = getLegalMoves(piece);\n\t\tList<String> validMoves = new ArrayList<>();", "\t\tif (piece.getColor() != this.player) return validMoves;\n\t\tPiece[][] backup = createBackup();\n\t\tfor (String move : legalMoves){\n\t\t\tint[] pos = convertNotation(move);\n\t\t\tint oldY = piece.getY();\n\t\t\tthis.board[piece.getX()][oldY] = null;\n\t\t\tsetPiece(piece, pos[0], pos[1]);\n\t\t\tif (move.equals(this.enPassant)){\n\t\t\t\tint x = convertNotation(this.enPassant)[0];\n\t\t\t\tthis.board[x][oldY] = null;\n\n\t\t\t}", "\t\t\tif (getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) == null){\n\t\t\t\trestoreBackup(backup);\n\t\t\t\tvalidMoves.add(move);\n\t\t\t} else {\n\t\t\t\trestoreBackup(backup);\n\t\t\t}\n\t\t}\n\t\treturn validMoves;\n\t}\n\n\tprivate List<String> getLegalMoves(Piece piece){\n\t\tList<String> result = new ArrayList<>();\n\t\tint extraMove = 0;", "\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\tif ((piece.getColor() == Color.WHITE && piece.getY() == 6) || (piece.getColor() == Color.BLACK && piece.getY() == 1)){\n\t\t\t\textraMove = 1;\n\t\t\t}\n\t\t\tint factor = piece.getColor() == Color.WHITE ? -1 : 1;\n\t\t\tString not1 = convertPosition(piece.getX()-1, piece.getY()+factor);\n\t\t\tString not2 = convertPosition(piece.getX()+1, piece.getY()+factor);\n\t\t\tif (not1 != null && this.board[piece.getX()-1][piece.getY()+factor] != null && this.board[piece.getX()-1][piece.getY()+factor].getColor() != piece.getColor()) result.add(not1);\n\t\t\tif (not2 != null && this.board[piece.getX()+1][piece.getY()+factor] != null && this.board[piece.getX()+1][piece.getY()+factor].getColor() != piece.getColor()) result.add(not2);\n\t\t\t\n\t\t\t// En passant", "\t\t\tif (not2 != null && this.board[piece.getX()+1][piece.getY()+factor] != null && this.board[piece.getX()+1][piece.getY()+factor].getColor() != piece.getColor()) result.add(not2);\n\t\t\t\n\t\t\t// En passant\n\t\t\tif (this.enPassant != null && piece.getY() == convertNotation(this.enPassant)[1]+(piece.getColor() == Color.WHITE ? 1 : -1) && Math.abs(piece.getX()-convertNotation(this.enPassant)[0]) == 1){\n\t\t\t\tresult.add(this.enPassant);\n\t\t\t}\n\t\t}\n\t\tif (piece.getType().getName() == Piece.PIECE_KING){\n\t\t\tif ((piece.getColor() == Color.WHITE && this.canCastle[0]) || (piece.getColor() == Color.BLACK && this.canCastle[2])){\n\t\t\t\tresult.add(convertPosition(piece.getX()-2, piece.getY()));\n\t\t\t}", "\t\t\tif ((piece.getColor() == Color.WHITE && this.canCastle[0]) || (piece.getColor() == Color.BLACK && this.canCastle[2])){\n\t\t\t\tresult.add(convertPosition(piece.getX()-2, piece.getY()));\n\t\t\t}\n\t\t\tif ((piece.getColor() == Color.WHITE && this.canCastle[1]) || (piece.getColor() == Color.BLACK && this.canCastle[3])){\n\t\t\t\tresult.add(convertPosition(piece.getX()+2, piece.getY()));\n\t\t\t}\n\t\t}\n\t\tint[] dir = piece.getType().getDirections();\n\t\tfor (int i = 0; i < dir.length; i++){\t\t\t\n\t\t\tint[][] comb = null;\n\t\t\tif (dir[i] == Piece.MOVE_DIAGONAL){\n\t\t\t\tcomb = new int[][]{{1, -1}, {1, 1}, {-1, 1}, {-1, -1}};", "\t\tfor (int i = 0; i < dir.length; i++){\t\t\t\n\t\t\tint[][] comb = null;\n\t\t\tif (dir[i] == Piece.MOVE_DIAGONAL){\n\t\t\t\tcomb = new int[][]{{1, -1}, {1, 1}, {-1, 1}, {-1, -1}};\n\t\t\t} else if (dir[i] == Piece.MOVE_HORIZONTAL){\n\t\t\t\tcomb = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\t\t\t} else if (dir[i] == Piece.MOVE_KNIGHT){\n\t\t\t\tcomb = new int[][]{{-2, -1}, {-1, -2}, {2, -1}, {1, -2}, {1, 2}, {2, 1}, {-1, 2}, {-2, 1}};\n\t\t\t}\n\t\t\tif (comb != null){\n\t\t\t\tfor (int c = 0; c < comb.length; c++){", "\t\t\tif (comb != null){\n\t\t\t\tfor (int c = 0; c < comb.length; c++){\n\t\t\t\t\tfor (int j = 1; j <= piece.getType().getAmount()+extraMove; j++){\n\t\t\t\t\t\tint x = piece.getX()+comb[c][0]*j;\n\t\t\t\t\t\tint y = piece.getY()+comb[c][1]*j;\n\t\t\t\t\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\t\t\t\tif (x != piece.getX() || (piece.getColor() == Color.WHITE && y > piece.getY()) || (piece.getColor() == Color.BLACK && y < piece.getY())){\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tPiece captured = getPieceAt(x, y);\n\t\t\t\t\t\tString not = convertPosition(x, y);", "\t\t\t\t\t\tif (not != null && (captured == null || captured.getColor() != piece.getColor())){\n\t\t\t\t\t\t\tif (captured == null || piece.getType().getName() != Piece.PIECE_PAWN || captured.getX() != piece.getX()){\n\t\t\t\t\t\t\t\tresult.add(not);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (captured != null){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tprivate Piece getPieceAt(int x, int y){", "\t\tif (x >= 0 && y >= 0 && x < 8 && y < 8){\n\t\t\treturn this.board[x][y];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void capture(Piece piece){\n\t\tif (piece.getColor() == Color.WHITE){\n\t\t\tthis.blackCaptured.add(piece);\n\t\t} else {\n\t\t\tthis.whiteCaptured.add(piece);\n\t\t}\n\t\tthis.fifty = 0;\n\t}\n\t\n\tprivate void promote(Color color, Piece.Pieces type){\n\t\tList<Piece> list = color == Color.BLACK ? this.whiteCaptured : this.blackCaptured;\n\t\tIterator<Piece> iterator = list.iterator();\n\t\tboolean removed = false;", "\t\tif (piece.getColor() == Color.WHITE){\n\t\t\tthis.blackCaptured.add(piece);\n\t\t} else {\n\t\t\tthis.whiteCaptured.add(piece);\n\t\t}\n\t\tthis.fifty = 0;\n\t}\n\t\n\tprivate void promote(Color color, Piece.Pieces type){\n\t\tList<Piece> list = color == Color.BLACK ? this.whiteCaptured : this.blackCaptured;\n\t\tIterator<Piece> iterator = list.iterator();\n\t\tboolean removed = false;", "\t\twhile (iterator.hasNext()){\n\t\t\tPiece piece = iterator.next();\n\t\t\tif (piece.getType() == type){\n\t\t\t\titerator.remove();\n\t\t\t\tremoved = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!removed){\n\t\t\tif (color == Color.WHITE){\n\t\t\t\tthis.whiteExtraMaterial += type.getValue();\n\t\t\t} else {\n\t\t\t\tthis.blackExtraMaterial += type.getValue();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate List<Piece> getAttackers(Piece piece){\n\t\tList<Piece> pieces = getPiecesOnBoard();\n\t\tList<Piece> result = new ArrayList<>();\n\t\tString pos = convertPosition(piece.getX(), piece.getY());", "\t\tif (!removed){\n\t\t\tif (color == Color.WHITE){\n\t\t\t\tthis.whiteExtraMaterial += type.getValue();\n\t\t\t} else {\n\t\t\t\tthis.blackExtraMaterial += type.getValue();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate List<Piece> getAttackers(Piece piece){\n\t\tList<Piece> pieces = getPiecesOnBoard();\n\t\tList<Piece> result = new ArrayList<>();\n\t\tString pos = convertPosition(piece.getX(), piece.getY());", "\t\tfor (Piece boardPiece : pieces){\n\t\t\tif (boardPiece.getColor() != piece.getColor() && getLegalMoves(boardPiece).contains(pos)){\n\t\t\t\tresult.add(boardPiece);\n\t\t\t}\n\t\t}\n\t\treturn result.size() == 0 ? null : result;\n\t}\n\t\n\tprivate boolean canKingMove(Color color){\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;\n\t\tPiece[][] backup = createBackup();\n\t\t\n\t\t// Check if king has any legal moves", "\t\tfor (int x = king.getX()-1; x < king.getX()+2; x++){\n\t\t\tfor (int y = king.getY()-1; y < king.getY()+2; y++){\n\t\t\t\tif (x >= 0 && y >= 0 && x < 8 && y < 8){\n\t\t\t\t\tPiece piece = this.board[x][y];\n\t\t\t\t\tif (piece == null || piece.getColor() != king.getColor()){\n\t\t\t\t\t\tthis.board[king.getX()][king.getY()] = null;\n\t\t\t\t\t\tsetPiece(king, x, y);\n\t\t\t\t\t\tif (getAttackers(king) == null){\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If there is a single check, check if the piece can be captured or the ckeck can be blocked\n\t\tList<Piece> checks = king.getColor() == Color.WHITE ? this.whiteChecks : this.blackChecks;", "\t\tif (checks.size() == 1){\n\t\t\tList<Piece> canCapture = getAttackers(checks.get(0));\n\t\t\tif (canCapture != null){\n\t\t\t\tfor (Piece piece : canCapture){\n\t\t\t\t\tthis.board[piece.getX()][piece.getY()] = null;\n\t\t\t\t\tsetPiece(piece, checks.get(0).getX(), checks.get(0).getY());\n\t\t\t\t\tif (getAttackers(king) == null){\n\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tList<String> legalMoves = getLegalMoves(checks.get(0));\n\t\t\t\tList<Piece> pieces = getPiecesOnBoard();", "\t\t\t\tfor (Piece piece : pieces){\n\t\t\t\t\tif (piece.getColor() == checks.get(0).getColor()) continue;\n\t\t\t\t\tSet<String> intersection = getLegalMoves(piece).stream().distinct().filter(legalMoves::contains).collect(Collectors.toSet());\n\t\t\t\t\tList<String> allowed = new ArrayList<>();\n\t\t\t\t\tfor (String move : intersection){\n\t\t\t\t\t\tint[] pos = convertNotation(move);\n\t\t\t\t\t\tthis.board[piece.getX()][piece.getY()] = null;\n\t\t\t\t\t\tsetPiece(piece, pos[0], pos[1]);\n\t\t\t\t\t\tif (getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) == null){\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t\tallowed.add(move);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "\t\t\t\t\t\tif (getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) == null){\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t\tallowed.add(move);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trestoreBackup(backup);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (allowed.size() > 0){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tprivate Piece[][] createBackup(){\n\t\tPiece[][] backup = new Piece[8][8];", "\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tbackup[i][j] = this.board[i][j];\n\t\t\t}\n\t\t}\n\t\treturn backup;\n\t}\n\t\n\tprivate void restoreBackup(Piece[][] backup){\n\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tPiece piece = backup[i][j];", "\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tPiece piece = backup[i][j];\n\t\t\t\tif (piece == null){\n\t\t\t\t\tthis.board[i][j] = null;\n\t\t\t\t} else {\n\t\t\t\t\tsetPiece(piece, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate List<Piece> getPiecesOnBoard(){\n\t\tList<Piece> pieces = new ArrayList<>();", "\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tif (this.board[i][j] != null) pieces.add(this.board[i][j]);\n\t\t\t}\n\t\t}\n\t\treturn pieces;\n\t}\n\t\n\tprivate void setPiece(Piece piece, int x, int y){\n\t\tthis.board[x][y] = piece;\n\t\tpiece.setPos(x, y);\n\t}\n\t", "\tpublic static int[] convertNotation(String pos){\n\t\tchar[] c = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};\n\t\tchar[] data = pos.toCharArray();\n\t\tint x = -1;\n\t\tfor (int i = 0; i < 8; i++){\n\t\t\tif (c[i] == data[0]){\n\t\t\t\tx = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint y = 8-Integer.parseInt(String.valueOf(data[1]));", "\t\tif (x < 0 || y < 0 || y > 7){\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new int[]{x, y};\n\t\t}\n\t}\n\t\n\tpublic static String convertPosition(int x, int y){\n\t\tchar[] c = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};\n\t\tif (x < 0 || y < 0 || x > 7 || y > 7){\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn c[x]+Integer.toString(8-y);\n\t\t}\n\t}\n\t\n\tpublic List<Piece> getCheckingPieces(Color color){", "\t\tif (x < 0 || y < 0 || x > 7 || y > 7){\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn c[x]+Integer.toString(8-y);\n\t\t}\n\t}\n\t\n\tpublic List<Piece> getCheckingPieces(Color color){\n\t\tif (color == Color.WHITE){\n\t\t\treturn this.whiteChecks;\n\t\t} else {\n\t\t\treturn this.blackChecks;\n\t\t}\n\t}\n\t\n\tpublic Piece[][] getBoard(){\n\t\treturn this.board;\n\t}\n\t", "\t\tif (color == Color.WHITE){\n\t\t\treturn this.whiteChecks;\n\t\t} else {\n\t\t\treturn this.blackChecks;\n\t\t}\n\t}\n\t\n\tpublic Piece[][] getBoard(){\n\t\treturn this.board;\n\t}\n\t", "\tpublic String getPGN(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"YYYY/MM/dd\");\n\t\tDate date = new Date();\n\t\tbuilder.append(\"[Event \\\"\"+String.format(\"%s vs %s\", this.playerA, this.playerB)+\"\\\"]\\n\");\n\t\tbuilder.append(\"[Site \\\"com.orangomango.chess\\\"]\\n\");\n\t\tbuilder.append(\"[Date \\\"\"+format.format(date)+\"\\\"]\\n\");\n\t\tbuilder.append(\"[Round \\\"1\\\"]\\n\");\n\t\tbuilder.append(\"[White \\\"\"+this.playerA+\"\\\"]\\n\");\n\t\tbuilder.append(\"[Black \\\"\"+this.playerB+\"\\\"]\\n\");\n\t\tString result = \"*\";", "\t\tif (isDraw()){\n\t\t\tresult = \"\u00bd-\u00bd\";\n\t\t} else if (isCheckMate(Color.WHITE)){\n\t\t\tresult = \"0-1\";\n\t\t} else if (isCheckMate(Color.BLACK)){\n\t\t\tresult = \"1-0\";\n\t\t}\n\t\tbuilder.append(\"[Result \\\"\"+result+\"\\\"]\\n\\n\");\n\t\tfor (int i = 0; i < this.moves.size(); i++){\n\t\t\tif (i % 2 == 0) builder.append((i/2+1)+\". \");\n\t\t\tbuilder.append(this.moves.get(i)+\" \");\n\t\t}\n\t\tbuilder.append(result);\n\t\treturn builder.toString();\n\t}\n\t", "\t\tfor (int i = 0; i < this.moves.size(); i++){\n\t\t\tif (i % 2 == 0) builder.append((i/2+1)+\". \");\n\t\t\tbuilder.append(this.moves.get(i)+\" \");\n\t\t}\n\t\tbuilder.append(result);\n\t\treturn builder.toString();\n\t}\n\t\n\tpublic String getFEN(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (int i = 0; i < 8; i++){\n\t\t\tint empty = 0;", "\tpublic String getFEN(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (int i = 0; i < 8; i++){\n\t\t\tint empty = 0;\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tPiece piece = this.board[j][i];\n\t\t\t\tif (piece == null){\n\t\t\t\t\tempty++;\n\t\t\t\t} else {\n\t\t\t\t\tif (empty > 0){\n\t\t\t\t\t\tbuilder.append(empty);\n\t\t\t\t\t\tempty = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbuilder.append(piece.getColor() == Color.WHITE ? piece.getType().getName().toUpperCase() : piece.getType().getName().toLowerCase());\n\t\t\t\t}\n\t\t\t}", "\t\t\t\t\tif (empty > 0){\n\t\t\t\t\t\tbuilder.append(empty);\n\t\t\t\t\t\tempty = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbuilder.append(piece.getColor() == Color.WHITE ? piece.getType().getName().toUpperCase() : piece.getType().getName().toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (empty > 0) builder.append(empty);\n\t\t\tif (i < 7) builder.append(\"/\");\n\t\t}\n\t\t\n\t\tbuilder.append(this.player == Color.WHITE ? \" w \" : \" b \");\n\t\t\n\t\tboolean no = false;", "\t\t\tif (i < 7) builder.append(\"/\");\n\t\t}\n\t\t\n\t\tbuilder.append(this.player == Color.WHITE ? \" w \" : \" b \");\n\t\t\n\t\tboolean no = false;\n\t\tif (!this.whiteLeftCastleAllowed && !this.whiteRightCastleAllowed){\n\t\t\tbuilder.append(\"-\");\n\t\t\tno = true;\n\t\t} else {\n\t\t\tif (this.whiteRightCastleAllowed) builder.append(\"K\");", "\t\t\tif (this.whiteRightCastleAllowed) builder.append(\"K\");\n\t\t\tif (this.whiteLeftCastleAllowed) builder.append(\"Q\");\n\t\t}\n\t\tif (!this.blackLeftCastleAllowed && !this.blackRightCastleAllowed){\n\t\t\tif (!no) builder.append(\"-\");\n\t\t} else {\n\t\t\tif (this.blackRightCastleAllowed) builder.append(\"k\");\n\t\t\tif (this.blackLeftCastleAllowed) builder.append(\"q\");\n\t\t}\n\t\tbuilder.append(\" \");\n\t\t\n\t\tbuilder.append(String.format(\"%s %d %d\", this.enPassant == null ? \"-\" : this.enPassant, this.fifty, this.movesN));\n\t\t\n\t\treturn builder.toString();\n\t}\n\t\n\tprivate boolean isCheckMate(Color color){\n\t\tPiece king = color == Color.WHITE ? this.whiteKing : this.blackKing;\n\t\treturn getAttackers(king) != null && !canKingMove(color);\n\t}\n\t\n\tprivate boolean isDraw(){", "\t\tif (this.fifty >= 50) return true;\n\t\tList<Piece> pieces = getPiecesOnBoard();\n\t\tint whitePieces = pieces.stream().filter(piece -> piece.getColor() == Color.WHITE).mapToInt(p -> p.getType().getValue()).sum();\n\t\tint blackPieces = pieces.stream().filter(piece -> piece.getColor() == Color.BLACK).mapToInt(p -> p.getType().getValue()).sum();\n\t\tList<String> whiteLegalMoves = new ArrayList<>();\n\t\tList<String> blackLegalMoves = new ArrayList<>();\n\t\tfor (Piece piece : pieces){\n\t\t\tif (piece.getColor() == Color.WHITE){\n\t\t\t\twhiteLegalMoves.addAll(getValidMoves(piece));\n\t\t\t} else {\n\t\t\t\tblackLegalMoves.addAll(getValidMoves(piece));\n\t\t\t}\n\t\t}\n\t\tboolean whiteDraw = whitePieces == 0 || (whitePieces == 3 && pieces.stream().filter(piece -> piece.getColor() == Color.WHITE).count() == 2);\n\t\tboolean blackDraw = blackPieces == 0 || (blackPieces == 3 && pieces.stream().filter(piece -> piece.getColor() == Color.BLACK).count() == 2);", "\t\tif (whiteDraw && blackDraw) return true;\n\t\tif ((getAttackers(this.blackKing) == null && !canKingMove(Color.BLACK) && blackLegalMoves.size() == 0 && this.player == Color.BLACK) || (getAttackers(this.whiteKing) == null && !canKingMove(Color.WHITE)) && whiteLegalMoves.size() == 0 && this.player == Color.WHITE){\n\t\t\treturn true;\n\t\t}\n\t\tif (this.states.values().contains(3)) return true;\n\t\treturn false;\n\t}\n\t\n\tpublic String getBoardInfo(){\n\t\tint whiteSum = getMaterial(Color.WHITE);\n\t\tint blackSum = getMaterial(Color.BLACK);\n\t\treturn String.format(\"B:%d W:%d - BK:%s WK:%s - BCK:%s WCK:%s\\nChecks: %s %s\\n\",\n\t\t\tblackSum, whiteSum, getAttackers(this.blackKing) != null, getAttackers(this.whiteKing) != null,\n\t\t\tisCheckMate(Color.BLACK), isCheckMate(Color.WHITE),\n\t\t\tthis.blackChecks, this.whiteChecks);\n\t}\n\t\n\tpublic List<Piece> getMaterialList(Color color){\n\t\tList<Piece> list = new ArrayList<>(color == Color.WHITE ? this.whiteCaptured : this.blackCaptured);\n\t\tlist.sort((p1, p2) -> Integer.compare(p1.getType().getValue(), p2.getType().getValue()));\n\t\treturn list;\n\t}\n\t", "\tpublic String getBoardInfo(){\n\t\tint whiteSum = getMaterial(Color.WHITE);\n\t\tint blackSum = getMaterial(Color.BLACK);\n\t\treturn String.format(\"B:%d W:%d - BK:%s WK:%s - BCK:%s WCK:%s\\nChecks: %s %s\\n\",\n\t\t\tblackSum, whiteSum, getAttackers(this.blackKing) != null, getAttackers(this.whiteKing) != null,\n\t\t\tisCheckMate(Color.BLACK), isCheckMate(Color.WHITE),\n\t\t\tthis.blackChecks, this.whiteChecks);\n\t}\n\t\n\tpublic List<Piece> getMaterialList(Color color){\n\t\tList<Piece> list = new ArrayList<>(color == Color.WHITE ? this.whiteCaptured : this.blackCaptured);\n\t\tlist.sort((p1, p2) -> Integer.compare(p1.getType().getValue(), p2.getType().getValue()));\n\t\treturn list;\n\t}\n\t", "\tpublic int getMaterial(Color color){\n\t\treturn getMaterialList(color).stream().mapToInt(p -> p.getType().getValue()).sum()+(color == Color.WHITE ? this.whiteExtraMaterial : this.blackExtraMaterial);\n\t}\n\t\n\tpublic Color getPlayer(){\n\t\treturn this.player;\n\t}\n\t\n\tpublic boolean isGameFinished(){\n\t\treturn isCheckMate(Color.WHITE) || isCheckMate(Color.BLACK) || isDraw() || this.whiteTime <= 0 || this.blackTime <= 0;\n\t}\n\t\n\t@Override", "\tpublic boolean isGameFinished(){\n\t\treturn isCheckMate(Color.WHITE) || isCheckMate(Color.BLACK) || isDraw() || this.whiteTime <= 0 || this.blackTime <= 0;\n\t}\n\t\n\t@Override\n\tpublic String toString(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (int i = 0; i < 8; i++){ // y\n\t\t\tfor (int j = 0; j < 8; j++){ // x\n\t\t\t\tbuilder.append(this.board[j][i]+\" \");\n\t\t\t}\n\t\t\tbuilder.append(\"\\n\");\n\t\t}\n\t\tbuilder.append(getBoardInfo());\n\t\treturn builder.toString();\n\t}\n}\n", "\t\t\tfor (int j = 0; j < 8; j++){ // x\n\t\t\t\tbuilder.append(this.board[j][i]+\" \");\n\t\t\t}\n\t\t\tbuilder.append(\"\\n\");\n\t\t}\n\t\tbuilder.append(getBoardInfo());\n\t\treturn builder.toString();\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/MainApplication.java", "chunked_list": ["package com.orangomango.chess;\n\nimport javafx.application.Application;\nimport javafx.stage.Stage;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.canvas.*;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.input.ClipboardContent;", "import javafx.scene.input.MouseButton;\nimport javafx.scene.input.ClipboardContent;\nimport javafx.scene.input.Clipboard;\nimport javafx.scene.paint.Color;\nimport javafx.scene.image.Image;\nimport javafx.scene.layout.*;\nimport javafx.animation.*;\nimport javafx.geometry.Point2D;\nimport javafx.geometry.Insets;\nimport javafx.util.Duration;", "import javafx.geometry.Insets;\nimport javafx.util.Duration;\nimport javafx.scene.media.*;\nimport javafx.scene.control.*;\n\nimport java.io.*;\nimport java.util.*;\n\nimport com.orangomango.chess.multiplayer.Server;\nimport com.orangomango.chess.multiplayer.Client;", "import com.orangomango.chess.multiplayer.Server;\nimport com.orangomango.chess.multiplayer.Client;\n\npublic class MainApplication extends Application{\n\tpublic static final int SQUARE_SIZE = 55;\n\tprivate static final int SPACE = 130;\n\tprivate static final double WIDTH = SQUARE_SIZE*8;\n\tprivate static final double HEIGHT = SPACE*2+SQUARE_SIZE*8;\n\tprivate volatile int frames, fps;\n\tprivate static final int FPS = 40;\n\tprivate static final String STARTPOS = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\t\n\tprivate Board board;\n\tprivate Engine engine;\n\tprivate String currentSelection;\n\tprivate List<String> currentMoves;\n\tprivate volatile boolean gameFinished = false;\n\tprivate volatile String eval;\n\tprivate volatile PieceAnimation animation;\n\tprivate Color viewPoint;\n\tprivate boolean overTheBoard = true;\n\tprivate boolean engineMove = false;\n\t\n\tprivate Map<String, List<String>> hold = new HashMap<>();\n\tprivate String currentHold;\n\tprivate String moveStart, moveEnd;\n\tprivate List<Premove> premoves = new ArrayList<>();\n\tprivate Piece draggingPiece;\n\tprivate double dragX, dragY;\n\tprivate Piece promotionPiece;\n\t\n\tprivate Client client;\n\tprivate static Color startColor = Color.WHITE;\n\t", "\tpublic static Media MOVE_SOUND, CAPTURE_SOUND, CASTLE_SOUND, CHECK_SOUND;\n\t\n\tprivate static class Premove{\n\t\tpublic String startPos, endPos, prom;\n\t\t\n\t\tpublic Premove(String s, String e, String prom){\n\t\t\tthis.startPos = s;\n\t\t\tthis.endPos = e;\n\t\t\tthis.prom = prom;\n\t\t}\n\t}\n\t\n\t@Override", "\tpublic void start(Stage stage){\n\t\tThread counter = new Thread(() -> {\n\t\t\twhile (true){\n\t\t\t\ttry {\n\t\t\t\t\tthis.fps = this.frames;\n\t\t\t\t\tthis.frames = 0;\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException ex){\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcounter.setDaemon(true);\n\t\tcounter.start();\n\t\t\n\t\tthis.viewPoint = startColor;\n\t\tloadSounds();\n\n\t\tstage.setTitle(\"Chess\");\n\t\tStackPane pane = new StackPane();\n\t\tCanvas canvas = new Canvas(WIDTH, HEIGHT);\n\t\tGraphicsContext gc = canvas.getGraphicsContext2D();\n\t\tpane.getChildren().add(canvas);\n\t\tthis.board = new Board(STARTPOS, 180000, 0);\n\t\tthis.engine = new Engine();\n\t\t\n\t\tcanvas.setOnMousePressed(e -> {", "\t\t\tif (Server.clients.size() == 1) return;\n\t\t\tif (e.getButton() == MouseButton.PRIMARY){\n\t\t\t\tString not = getNotation(e);\n\t\t\t\tint x = (int)(e.getX()/SQUARE_SIZE);\n\t\t\t\tint y = (int)((e.getY()-SPACE)/SQUARE_SIZE);\n\t\t\t\tif (this.viewPoint == Color.BLACK){\n\t\t\t\t\tx = 7-x;\n\t\t\t\t\ty = 7-y;\n\t\t\t\t}\n\t\t\t\tif (not != null){\n\t\t\t\t\tif (this.gameFinished){\n\t\t\t\t\t\treturn;", "\t\t\t\tif (not != null){\n\t\t\t\t\tif (this.gameFinished){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (this.board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){\n\t\t\t\t\t\tif (this.currentSelection == null){\n\t\t\t\t\t\t\tif (this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){\n\t\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\t} else if (this.board.getBoard()[x][y].getColor() == this.viewPoint){\n\t\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tboolean isProm = isPromotion(this.currentSelection, not);\n\t\t\t\t\t\t\tString prom = isProm ? \"Q\" : null;\n\t\t\t\t\t\t\tthis.premoves.add(new Premove(this.currentSelection, not, prom));\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tboolean showMoves = false;", "\t\t\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\t\t\tshowMoves = makeUserMove(not, x, y, false, \"Q\");\n\t\t\t\t\t\t} else if (this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\tshowMoves = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (showMoves){\n\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\tthis.currentMoves = this.board.getValidMoves(this.board.getBoard()[x][y]);\n\t\t\t\t\t\t\tthis.draggingPiece = this.board.getBoard()[x][y];\n\t\t\t\t\t\t\tthis.dragX = e.getX();\n\t\t\t\t\t\t\tthis.dragY = e.getY();\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "\t\t\t\t} else if (e.getClickCount() == 2){\n\t\t\t\t\tSystem.out.println(this.board.getFEN());\n\t\t\t\t\tSystem.out.println(this.board.getPGN());\n\t\t\t\t\tAlert alert = new Alert(Alert.AlertType.INFORMATION);\n\t\t\t\t\talert.setTitle(\"Settings\");\n\t\t\t\t\talert.setHeaderText(\"Setup game\");\n\t\t\t\t\tGridPane layout = new GridPane();\n\t\t\t\t\tlayout.setPadding(new Insets(10, 10, 10, 10));\n\t\t\t\t\tlayout.setHgap(5);\n\t\t\t\t\tlayout.setVgap(5);\n\t\t\t\t\tTextField sip = new TextField();\n\t\t\t\t\tsip.setPromptText(\"192.168.1.247\");\n\t\t\t\t\tTextField sport = new TextField();\n\t\t\t\t\tsport.setPromptText(\"1234\");\n\t\t\t\t\tTextField cip = new TextField();\n\t\t\t\t\tcip.setPromptText(\"192.168.1.247\");\n\t\t\t\t\tTextField cport = new TextField();\n\t\t\t\t\tcport.setPromptText(\"1234\");\n\t\t\t\t\tsip.setMaxWidth(120);\n\t\t\t\t\tsport.setMaxWidth(80);\n\t\t\t\t\tcip.setMaxWidth(120);\n\t\t\t\t\tcport.setMaxWidth(80);\n\t\t\t\t\tTextField timeControl = new TextField();\n\t\t\t\t\ttimeControl.setPromptText(\"180+0\");\n\t\t\t\t\tToggleGroup grp = new ToggleGroup();\n\t\t\t\t\tRadioButton w = new RadioButton(\"White\");\n\t\t\t\t\tw.setOnAction(ev -> this.viewPoint = Color.WHITE);\n\t\t\t\t\tRadioButton b = new RadioButton(\"Black\");\n\t\t\t\t\tb.setOnAction(ev -> this.viewPoint = Color.BLACK);\n\t\t\t\t\tButton startServer = new Button(\"Start server\");\n\t\t\t\t\tstartServer.setOnAction(ev -> {", "\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString ip = sip.getText().equals(\"\") ? \"192.168.1.247\" : sip.getText();\n\t\t\t\t\t\t\tint port = sport.getText().equals(\"\") ? 1234 : Integer.parseInt(sport.getText());\n\t\t\t\t\t\t\tServer server = new Server(ip, port);\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tTextArea data = new TextArea(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());\n\t\t\t\t\tButton connect = new Button(\"Connect\");\n\t\t\t\t\tconnect.setOnAction(ev -> {", "\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString ip = cip.getText().equals(\"\") ? \"192.168.1.247\" : cip.getText();\n\t\t\t\t\t\t\tint port = cport.getText().equals(\"\") ? 1234 : Integer.parseInt(cport.getText());\n\t\t\t\t\t\t\tthis.client = new Client(ip, port, this.viewPoint);\n\t\t\t\t\t\t\tif (Server.clients.size() == 1){\n\t\t\t\t\t\t\t\treset(data.getText(), this.board.getGameTime(), this.board.getIncrementTime());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!this.client.isConnected()){\n\t\t\t\t\t\t\t\tthis.client = null;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.viewPoint = this.client.getColor();\n\t\t\t\t\t\t\tthis.overTheBoard = false;\n\t\t\t\t\t\t\tThread listener = new Thread(() -> {", "\t\t\t\t\t\t\t\twhile (!this.gameFinished){\n\t\t\t\t\t\t\t\t\tString message = this.client.getMessage();\n\t\t\t\t\t\t\t\t\tif (message == null){\n\t\t\t\t\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.animation = new PieceAnimation(message.split(\" \")[0], message.split(\" \")[1], () -> {\n\t\t\t\t\t\t\t\t\t\t\tString prom = message.split(\" \").length == 3 ? message.split(\" \")[2] : null;\n\t\t\t\t\t\t\t\t\t\t\tthis.board.move(message.split(\" \")[0], message.split(\" \")[1], prom);\n\t\t\t\t\t\t\t\t\t\t\tthis.hold.clear();\n\t\t\t\t\t\t\t\t\t\t\tthis.moveStart = message.split(\" \")[0];\n\t\t\t\t\t\t\t\t\t\t\tthis.moveEnd = message.split(\" \")[1];\n\t\t\t\t\t\t\t\t\t\t\tthis.animation = null;\n\t\t\t\t\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\t\t\t\t\tthis.gameFinished = this.board.isGameFinished();\n\t\t\t\t\t\t\t\t\t\t\tmakePremove();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tthis.animation.start();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlistener.setDaemon(true);\n\t\t\t\t\t\t\tlistener.start();\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (NumberFormatException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tCheckBox otb = new CheckBox(\"Over the board\");\n\t\t\t\t\tCheckBox eng = new CheckBox(\"Play against stockfish\");\n\t\t\t\t\teng.setSelected(this.engineMove);\n\t\t\t\t\teng.setOnAction(ev -> {\n\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\totb.setSelected(true);\n\t\t\t\t\t\tthis.engineMove = eng.isSelected();\n\t\t\t\t\t\totb.setDisable(this.engineMove);", "\t\t\t\t\t\tif (this.engineMove && this.board.getPlayer() != this.viewPoint){\n\t\t\t\t\t\t\tmakeEngineMove(false);\n\t\t\t\t\t\t\tthis.board.playerA = \"stockfish\";\n\t\t\t\t\t\t\tthis.board.playerB = System.getProperty(\"user.name\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.board.playerA = System.getProperty(\"user.name\");\n\t\t\t\t\t\t\tthis.board.playerB = \"stockfish\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\totb.setSelected(this.overTheBoard);\n\t\t\t\t\totb.setOnAction(ev -> {\n\t\t\t\t\t\tthis.overTheBoard = otb.isSelected();", "\t\t\t\t\t\tif (this.viewPoint == Color.WHITE){\n\t\t\t\t\t\t\tthis.board.playerA = System.getProperty(\"user.name\");\n\t\t\t\t\t\t\tthis.board.playerB = \"BLACK\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.board.playerA = \"WHITE\";\n\t\t\t\t\t\t\tthis.board.playerB = System.getProperty(\"user.name\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdata.setMaxWidth(WIDTH*0.7);\n\t\t\t\t\tw.setToggleGroup(grp);\n\t\t\t\t\tw.setSelected(this.viewPoint == Color.WHITE);\n\t\t\t\t\tb.setSelected(this.viewPoint == Color.BLACK);\n\t\t\t\t\tb.setToggleGroup(grp);\n\t\t\t\t\tButton reset = new Button(\"Reset board\");\n\t\t\t\t\tButton startEngine = new Button(\"Start engine thread\");\n\t\t\t\t\tButton copy = new Button(\"Copy\");\n\t\t\t\t\tcopy.setOnAction(ev -> {\n\t\t\t\t\t\tClipboardContent cc = new ClipboardContent();\n\t\t\t\t\t\tcc.putString(data.getText());\n\t\t\t\t\t\tClipboard cb = Clipboard.getSystemClipboard();\n\t\t\t\t\t\tcb.setContent(cc);\n\t\t\t\t\t});\n\t\t\t\t\tstartEngine.setDisable((this.board.getMovesN() > 1 && !this.gameFinished) || !this.engine.isRunning());\n\t\t\t\t\tstartEngine.setOnAction(ev -> {\n\t\t\t\t\t\tthis.overTheBoard = true;\n\t\t\t\t\t\tThread eg = new Thread(() -> {", "\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\t\t\t\tmakeEngineMove(true);\n\t\t\t\t\t\t\t} catch (InterruptedException ex){\n\t\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\teg.setDaemon(true);\n\t\t\t\t\t\teg.start();\n\t\t\t\t\t\talert.close();\n\t\t\t\t\t});\n\t\t\t\t\treset.setOnAction(ev -> {", "\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tString text = data.getText();\n\t\t\t\t\t\t\tlong time = timeControl.getText().equals(\"\") ? 180000l : Long.parseLong(timeControl.getText().split(\"\\\\+\")[0])*1000;\n\t\t\t\t\t\t\tint inc = timeControl.getText().equals(\"\") ? 0 : Integer.parseInt(timeControl.getText().split(\"\\\\+\")[1]);\n\t\t\t\t\t\t\treset(text, time, inc);\n\t\t\t\t\t\t\talert.close();\n\t\t\t\t\t\t} catch (Exception ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tHBox serverInfo = new HBox(5, sip, sport, startServer);\n\t\t\t\t\tHBox clientInfo = new HBox(5, cip, cport, connect);\n\t\t\t\t\tHBox whiteBlack = new HBox(5, w, b);\n\t\t\t\t\tHBox rs = new HBox(5, reset, startEngine);\n\t\t\t\t\tserverInfo.setDisable(this.board.getMovesN() > 1 && !this.gameFinished);\n\t\t\t\t\tclientInfo.setDisable(this.board.getMovesN() > 1 && !this.gameFinished);\n\t\t\t\t\twhiteBlack.setDisable(this.board.getMovesN() > 1 && !this.gameFinished);\n\t\t\t\t\ttimeControl.setDisable(this.board.getMovesN() > 1 && !this.gameFinished);\n\t\t\t\t\trs.setDisable(this.board.getMovesN() > 1 && !this.gameFinished);\n\t\t\t\t\teng.setDisable((this.board.getMovesN() > 1 && !this.gameFinished) || !this.engine.isRunning());\n\t\t\t\t\totb.setDisable((this.board.getMovesN() > 1 && !this.gameFinished) || this.client != null);\n\t\t\t\t\tlayout.add(serverInfo, 0, 0);\n\t\t\t\t\tlayout.add(clientInfo, 0, 1);\n\t\t\t\t\tlayout.add(timeControl, 0, 2);\n\t\t\t\t\tlayout.add(eng, 0, 3);\n\t\t\t\t\tlayout.add(otb, 0, 4);\n\t\t\t\t\tlayout.add(whiteBlack, 0, 5);\n\t\t\t\t\tlayout.add(rs, 0, 6);\n\t\t\t\t\tlayout.add(copy, 0, 7);\n\t\t\t\t\tlayout.add(data, 0, 8);\n\t\t\t\t\talert.getDialogPane().setContent(layout);\n\t\t\t\t\talert.showAndWait();\n\t\t\t\t}", "\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tString h = getNotation(e);\n\t\t\t\tif (h != null){\n\t\t\t\t\tthis.currentHold = h;\n\t\t\t\t\tif (!this.hold.keySet().contains(h)) this.hold.put(h, new ArrayList<String>());\n\t\t\t\t}\n\t\t\t} else if (e.getButton() == MouseButton.MIDDLE){\n\t\t\t\tif (this.gameFinished || (this.board.getPlayer() != this.viewPoint && !this.overTheBoard)) return;\n\t\t\t\tmakeEngineMove(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tcanvas.setOnMouseDragged(e -> {", "\t\t\tif (e.getButton() == MouseButton.PRIMARY){\n\t\t\t\tif (this.draggingPiece != null){\n\t\t\t\t\tthis.dragX = e.getX();\n\t\t\t\t\tdouble oldY = this.dragY;\n\t\t\t\t\tthis.dragY = e.getY();\n\t\t\t\t\tif (this.promotionPiece == null){\n\t\t\t\t\t\tif (this.draggingPiece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\t\t\t\t\tint y = (int) ((e.getY()-SPACE)/SQUARE_SIZE);\n\t\t\t\t\t\t\tif (this.viewPoint == Color.BLACK) y = 7-y;\n\t\t\t\t\t\t\tPiece prom = new Piece(Piece.Pieces.QUEEN, this.draggingPiece.getColor(), -1, -1);\n\t\t\t\t\t\t\tif (this.draggingPiece.getColor() == Color.WHITE && y == 0 && this.draggingPiece.getY() == 1){\n\t\t\t\t\t\t\t\tthis.promotionPiece = prom;", "\t\t\t\t\t\t\tif (this.viewPoint == Color.BLACK) y = 7-y;\n\t\t\t\t\t\t\tPiece prom = new Piece(Piece.Pieces.QUEEN, this.draggingPiece.getColor(), -1, -1);\n\t\t\t\t\t\t\tif (this.draggingPiece.getColor() == Color.WHITE && y == 0 && this.draggingPiece.getY() == 1){\n\t\t\t\t\t\t\t\tthis.promotionPiece = prom;\n\t\t\t\t\t\t\t} else if (this.draggingPiece.getColor() == Color.BLACK && y == 7 && this.draggingPiece.getY() == 6){\n\t\t\t\t\t\t\t\tthis.promotionPiece = prom;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ((e.getY() > oldY && this.draggingPiece.getColor() == Color.WHITE) || (e.getY() < oldY && this.draggingPiece.getColor() == Color.BLACK)){\n\t\t\t\t\t\tdouble y = this.draggingPiece.getColor() == Color.WHITE ? 0 : 8;\n\t\t\t\t\t\ty *= SQUARE_SIZE;\n\t\t\t\t\t\ty += SPACE;\n\t\t\t\t\t\tString[] proms = new String[]{\"Q\", \"R\", \"B\", \"N\"};\n\t\t\t\t\t\tint difference = (int)Math.round(e.getY()-y);\n\t\t\t\t\t\tdifference /= SQUARE_SIZE;", "\t\t\t\t\t} else if ((e.getY() > oldY && this.draggingPiece.getColor() == Color.WHITE) || (e.getY() < oldY && this.draggingPiece.getColor() == Color.BLACK)){\n\t\t\t\t\t\tdouble y = this.draggingPiece.getColor() == Color.WHITE ? 0 : 8;\n\t\t\t\t\t\ty *= SQUARE_SIZE;\n\t\t\t\t\t\ty += SPACE;\n\t\t\t\t\t\tString[] proms = new String[]{\"Q\", \"R\", \"B\", \"N\"};\n\t\t\t\t\t\tint difference = (int)Math.round(e.getY()-y);\n\t\t\t\t\t\tdifference /= SQUARE_SIZE;\n\t\t\t\t\t\tif ((difference < 0 && this.draggingPiece.getColor() == Color.WHITE) || (difference > 0 && this.draggingPiece.getColor() == Color.BLACK)){\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdifference = Math.abs(difference);\n\t\t\t\t\t\t\tthis.promotionPiece = new Piece(Piece.getType(proms[difference % 4]), this.draggingPiece.getColor(), -1, -1);;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tcanvas.setOnMouseReleased(e -> {\n\t\t\tString h = getNotation(e);", "\t\t\tif (e.getButton() == MouseButton.PRIMARY){\n\t\t\t\tint x = (int)(e.getX()/SQUARE_SIZE);\n\t\t\t\tint y = (int)((e.getY()-SPACE)/SQUARE_SIZE);\n\t\t\t\tif (this.viewPoint == Color.BLACK){\n\t\t\t\t\tx = 7-x;\n\t\t\t\t\ty = 7-y;\n\t\t\t\t}\n\t\t\t\tif (this.currentSelection != null && h != null && this.draggingPiece != null && !this.currentSelection.equals(h)){\n\t\t\t\t\tmakeUserMove(h, x, y, true, this.promotionPiece == null ? null : this.promotionPiece.getType().getName());\n\t\t\t\t} else {\n\t\t\t\t\tthis.draggingPiece = null;\n\t\t\t\t}", "\t\t\t} else if (e.getButton() == MouseButton.SECONDARY){\n\t\t\t\tif (h != null){\n\t\t\t\t\tString f = this.currentHold;\n\t\t\t\t\tthis.currentHold = null;\n\t\t\t\t\tif (f != null){\n\t\t\t\t\t\tif (f.equals(h)){\n\t\t\t\t\t\t\tthis.hold.clear();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.hold.get(f).add(h);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.promotionPiece = null;\n\t\t});\n\t\t\n\t\tTimeline loop = new Timeline(new KeyFrame(Duration.millis(1000.0/FPS), e -> update(gc)));\n\t\tloop.setCycleCount(Animation.INDEFINITE);\n\t\tloop.play();\n\t\t\n\t\tAnimationTimer timer = new AnimationTimer(){\n\t\t\t@Override", "\t\t\tpublic void handle(long time){\n\t\t\t\tMainApplication.this.frames++;\n\t\t\t}\n\t\t};\n\t\ttimer.start();\n\t\t\n\t\tThread evalCalculator = new Thread(() -> {\n\t\t\tEngine eng = new Engine();\n\t\t\ttry {\n\t\t\t\twhile (eng.isRunning()){\n\t\t\t\t\tif (this.gameFinished) continue;\n\t\t\t\t\tthis.eval = eng.getEval(this.board.getFEN());\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t}\n\t\t\t} catch (InterruptedException ex){\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t});\n\t\tevalCalculator.setDaemon(true);\n\t\tevalCalculator.start();\n\t\t\n\t\tstage.setResizable(false);\n\t\tstage.setScene(new Scene(pane, WIDTH, HEIGHT));\n\t\tstage.getIcons().add(new Image(MainApplication.class.getResourceAsStream(\"/icon.png\")));\n\t\tstage.show();\n\t}\n\t\n\tprivate boolean makeUserMove(String not, int x, int y, boolean skipAnimation, String promType){\n\t\tboolean isProm = isPromotion(this.currentSelection, not);\n\t\tString prom = isProm ? promType : null;\n\t\tthis.animation = new PieceAnimation(this.currentSelection, not, () -> {\n\t\t\tboolean ok = this.board.move(this.currentSelection, not, prom);", "\t\t\ttry {\n\t\t\t\twhile (eng.isRunning()){\n\t\t\t\t\tif (this.gameFinished) continue;\n\t\t\t\t\tthis.eval = eng.getEval(this.board.getFEN());\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t}\n\t\t\t} catch (InterruptedException ex){\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t});\n\t\tevalCalculator.setDaemon(true);\n\t\tevalCalculator.start();\n\t\t\n\t\tstage.setResizable(false);\n\t\tstage.setScene(new Scene(pane, WIDTH, HEIGHT));\n\t\tstage.getIcons().add(new Image(MainApplication.class.getResourceAsStream(\"/icon.png\")));\n\t\tstage.show();\n\t}\n\t\n\tprivate boolean makeUserMove(String not, int x, int y, boolean skipAnimation, String promType){\n\t\tboolean isProm = isPromotion(this.currentSelection, not);\n\t\tString prom = isProm ? promType : null;\n\t\tthis.animation = new PieceAnimation(this.currentSelection, not, () -> {\n\t\t\tboolean ok = this.board.move(this.currentSelection, not, prom);", "\t\t\tif (this.client != null) this.client.sendMessage(this.currentSelection+\" \"+not+(prom == null ? \"\" : \" \"+prom));\n\t\t\tthis.moveStart = this.currentSelection;\n\t\t\tthis.moveEnd = not;\n\t\t\tthis.currentSelection = null;\n\t\t\tthis.currentMoves = null;\n\t\t\tthis.hold.clear();\n\t\t\tthis.animation = null;\n\t\t\tthis.gameFinished = this.board.isGameFinished();\n\t\t\tif (ok && this.engineMove) makeEngineMove(false);\n\t\t});\n\t\tif (skipAnimation) this.animation.setAnimationTime(0);\n\t\tPiece piece = this.board.getBoard()[Board.convertNotation(this.currentSelection)[0]][Board.convertNotation(this.currentSelection)[1]];", "\t\t\tif (ok && this.engineMove) makeEngineMove(false);\n\t\t});\n\t\tif (skipAnimation) this.animation.setAnimationTime(0);\n\t\tPiece piece = this.board.getBoard()[Board.convertNotation(this.currentSelection)[0]][Board.convertNotation(this.currentSelection)[1]];\n\t\tif (this.board.getValidMoves(piece).contains(not)){\n\t\t\tthis.animation.start();\n\t\t\tthis.draggingPiece = null;\n\t\t} else {\n\t\t\tthis.currentSelection = null;\n\t\t\tthis.currentMoves = null;\n\t\t\tthis.animation = null;\n\t\t\tthis.draggingPiece = null;", "\t\t\tif (this.board.getBoard()[x][y] != null) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean isPromotion(String a, String b){\n\t\tPiece piece = this.board.getBoard()[Board.convertNotation(a)[0]][Board.convertNotation(a)[1]];\n\t\tif (piece.getType().getName() == Piece.PIECE_PAWN){\n\t\t\tif (piece.getColor() == Color.WHITE && Board.convertNotation(b)[1] == 0){\n\t\t\t\treturn true;\n\t\t\t} else if (piece.getColor() == Color.BLACK && Board.convertNotation(b)[1] == 7){\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate String getNotation(MouseEvent e){", "\t\t\tif (piece.getColor() == Color.WHITE && Board.convertNotation(b)[1] == 0){\n\t\t\t\treturn true;\n\t\t\t} else if (piece.getColor() == Color.BLACK && Board.convertNotation(b)[1] == 7){\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tprivate String getNotation(MouseEvent e){", "\t\tif (e.getY() < SPACE) return null;\n\t\tint x = (int)(e.getX()/SQUARE_SIZE);\n\t\tint y = (int)((e.getY()-SPACE)/SQUARE_SIZE);\n\t\tif (this.viewPoint == Color.BLACK){\n\t\t\tx = 7-x;\n\t\t\ty = 7-y;\n\t\t}\n\t\treturn Board.convertPosition(x, y);\n\t}\n\t\n\tprivate void reset(String text, long time, int inc){\n\t\tString fen = STARTPOS;", "\t\tif (text.startsWith(\"CUSTOM\\n\")){\n\t\t\tfen = text.split(\"\\n\")[1];\n\t\t}\n\t\tthis.board = new Board(fen, time, inc);\n\t\tthis.gameFinished = false;\n\t\tthis.moveStart = null;\n\t\tthis.moveEnd = null;\n\t\tthis.hold.clear();\n\t\tthis.premoves.clear();\n\t\tthis.currentHold = null;\n\t\tthis.currentMoves = null;\n\t}\n\t\n\tprivate void makeEngineMove(boolean game){", "\t\tif (this.gameFinished) return;\n\t\tnew Thread(() -> {\n\t\t\tString output = this.engine.getBestMove(this.board);\n\t\t\tif (output != null){\n\t\t\t\tthis.animation = new PieceAnimation(output.split(\" \")[0], output.split(\" \")[1], () -> {\n\t\t\t\t\tString prom = output.split(\" \").length == 3 ? output.split(\" \")[2] : null;\n\t\t\t\t\tthis.board.move(output.split(\" \")[0], output.split(\" \")[1], prom);\n\t\t\t\t\tif (this.client != null) this.client.sendMessage(output.split(\" \")[0]+\" \"+output.split(\" \")[1]);\n\t\t\t\t\tthis.hold.clear();\n\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\tthis.moveStart = output.split(\" \")[0];\n\t\t\t\t\tthis.moveEnd = output.split(\" \")[1];\n\t\t\t\t\tthis.animation = null;\n\t\t\t\t\tthis.gameFinished = this.board.isGameFinished();\n\t\t\t\t\tmakePremove();", "\t\t\t\t\tif (game) makeEngineMove(true);\n\t\t\t\t});\n\t\t\t\tthis.animation.start();\n\t\t\t}\n\t\t}).start();\n\t}\n\t\n\tprivate List<String> getPremoves(){\n\t\tList<String> pres = new ArrayList<>();\n\t\tfor (Premove p : this.premoves){\n\t\t\tpres.add(p.startPos);\n\t\t\tpres.add(p.endPos);\n\t\t}\n\t\treturn pres;\n\t}\n\t\n\tprivate void makePremove(){", "\t\tfor (Premove p : this.premoves){\n\t\t\tpres.add(p.startPos);\n\t\t\tpres.add(p.endPos);\n\t\t}\n\t\treturn pres;\n\t}\n\t\n\tprivate void makePremove(){\n\t\tif (this.gameFinished || this.premoves.size() == 0){\n\t\t\tthis.premoves.clear();\n\t\t\treturn;\n\t\t}\n\t\tPremove pre = this.premoves.remove(0);\n\t\tthis.animation = new PieceAnimation(pre.startPos, pre.endPos, () -> {\n\t\t\tboolean ok = this.board.move(pre.startPos, pre.endPos, pre.prom);", "\t\tif (this.gameFinished || this.premoves.size() == 0){\n\t\t\tthis.premoves.clear();\n\t\t\treturn;\n\t\t}\n\t\tPremove pre = this.premoves.remove(0);\n\t\tthis.animation = new PieceAnimation(pre.startPos, pre.endPos, () -> {\n\t\t\tboolean ok = this.board.move(pre.startPos, pre.endPos, pre.prom);\n\t\t\tif (ok){\n\t\t\t\tif (this.client != null) this.client.sendMessage(pre.startPos+\" \"+pre.endPos+(pre.prom == null ? \"\" : \" \"+pre.prom));\n\t\t\t\tthis.hold.clear();\n\t\t\t\tthis.moveStart = pre.startPos;\n\t\t\t\tthis.moveEnd = pre.endPos;\n\t\t\t\tthis.gameFinished = this.board.isGameFinished();", "\t\t\t\tif (this.client != null) this.client.sendMessage(pre.startPos+\" \"+pre.endPos+(pre.prom == null ? \"\" : \" \"+pre.prom));\n\t\t\t\tthis.hold.clear();\n\t\t\t\tthis.moveStart = pre.startPos;\n\t\t\t\tthis.moveEnd = pre.endPos;\n\t\t\t\tthis.gameFinished = this.board.isGameFinished();\n\t\t\t\tif (this.engineMove) makeEngineMove(false);\n\t\t\t} else {\n\t\t\t\tthis.premoves.clear();\n\t\t\t}\n\t\t\tthis.animation = null;\n\t\t});\n\t\tthis.animation.start();\n\t}\n\t\n\tprivate void update(GraphicsContext gc){\n\t\tgc.clearRect(0, 0, WIDTH, HEIGHT);\n\t\tgc.setFill(Color.CYAN);\n\t\tgc.fillRect(0, 0, WIDTH, HEIGHT);\n\t\tgc.save();\n\t\tgc.translate(0, SPACE);\n\t\tPiece[][] pieces = this.board.getBoard();\n\t\tList<String> pres = getPremoves();", "\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tgc.setFill((i+7*j) % 2 == 0 ? Color.WHITE : Color.GREEN);\n\t\t\t\tString not = Board.convertPosition(this.viewPoint == Color.BLACK ? 7-i : i, this.viewPoint == Color.BLACK ? 7-j : j);\n\t\t\t\tif (this.currentSelection != null){\n\t\t\t\t\tint[] pos = Board.convertNotation(this.currentSelection);\n\t\t\t\t\tif (i == (this.viewPoint == Color.BLACK ? 7-pos[0] : pos[0]) && j == (this.viewPoint == Color.BLACK ? 7-pos[1] : pos[1])){\n\t\t\t\t\t\tgc.setFill(Color.RED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pres.contains(not)){\n\t\t\t\t\tgc.setFill(Color.BLUE);\n\t\t\t\t}\n\t\t\t\tgc.fillRect(i*SQUARE_SIZE, j*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);", "\t\t\t\tif (pres.contains(not)){\n\t\t\t\t\tgc.setFill(Color.BLUE);\n\t\t\t\t}\n\t\t\t\tgc.fillRect(i*SQUARE_SIZE, j*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);\n\t\t\t\tif (not.equals(this.moveStart) || not.equals(this.moveEnd)){\n\t\t\t\t\tgc.setFill(Color.YELLOW);\n\t\t\t\t\tgc.setGlobalAlpha(0.6);\n\t\t\t\t\tgc.fillRect(i*SQUARE_SIZE, j*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);\n\t\t\t\t\tgc.setGlobalAlpha(1.0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t", "\t\tfor (int i = 0; i < 8; i++){\n\t\t\tfor (int j = 0; j < 8; j++){\n\t\t\t\tPiece piece = pieces[i][j];\n\t\t\t\tPoint2D pos = new Point2D(i, j);\n\t\t\t\tif (this.animation != null && this.animation.getStartNotation().equals(Board.convertPosition(i, j))){\n\t\t\t\t\tpos = this.animation.getPosition();\n\t\t\t\t}\n\t\t\t\tif (this.viewPoint == Color.BLACK){\n\t\t\t\t\tpos = new Point2D(7-pos.getX(), 7-pos.getY());\n\t\t\t\t}\n\t\t\t\tif (piece != null){", "\t\t\t\tif (piece != null){\n\t\t\t\t\tif (piece.getType().getName() == Piece.PIECE_KING){\n\t\t\t\t\t\tif ((piece.getColor() == Color.WHITE && this.board.getCheckingPieces(Color.WHITE).size() > 0) || (piece.getColor() == Color.BLACK && this.board.getCheckingPieces(Color.BLACK).size() > 0)){\n\t\t\t\t\t\t\tgc.setFill(Color.BLUE);\n\t\t\t\t\t\t\tgc.fillOval(pos.getX()*SQUARE_SIZE, pos.getY()*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (piece != this.draggingPiece) gc.drawImage(piece.getImage(), pos.getX()*SQUARE_SIZE, pos.getY()*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);\n\t\t\t\t}\n\t\t\t\tString text = \"\";\n\t\t\t\tif (j == 7){\n\t\t\t\t\ttext += String.valueOf(Board.convertPosition(this.viewPoint == Color.BLACK ? 7-i : i, this.viewPoint == Color.BLACK ? 7-j : j).toCharArray()[0]);\n\t\t\t\t}", "\t\t\t\tif (j == 7){\n\t\t\t\t\ttext += String.valueOf(Board.convertPosition(this.viewPoint == Color.BLACK ? 7-i : i, this.viewPoint == Color.BLACK ? 7-j : j).toCharArray()[0]);\n\t\t\t\t}\n\t\t\t\tif (i == 0){\n\t\t\t\t\ttext += String.valueOf(Board.convertPosition(this.viewPoint == Color.BLACK ? 7-i : i, this.viewPoint == Color.BLACK ? 7-j : j).toCharArray()[1]);\n\t\t\t\t}\n\t\t\t\tgc.setFill(Color.BLACK);\n\t\t\t\tgc.fillText(text, i*SQUARE_SIZE+SQUARE_SIZE*0.1, (j+1)*SQUARE_SIZE-SQUARE_SIZE*0.1);\n\t\t\t}\n\t\t}\n\t\t", "\t\tif (this.currentMoves != null){\n\t\t\tfor (String move : this.currentMoves){\n\t\t\t\tint[] pos = Board.convertNotation(move);\n\t\t\t\tgc.setFill(this.board.getBoard()[pos[0]][pos[1]] == null ? Color.YELLOW : Color.BLUE);\n\t\t\t\tgc.fillOval((this.viewPoint == Color.BLACK ? 7-pos[0] : pos[0])*SQUARE_SIZE+SQUARE_SIZE/3.0, (this.viewPoint == Color.BLACK ? 7-pos[1] : pos[1])*SQUARE_SIZE+SQUARE_SIZE/3.0, SQUARE_SIZE/3.0, SQUARE_SIZE/3.0);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.draggingPiece != null){\n\t\t\tgc.drawImage(this.promotionPiece == null ? this.draggingPiece.getImage() : this.promotionPiece.getImage(), this.dragX-SQUARE_SIZE/2.0, this.dragY-SPACE-SQUARE_SIZE/2.0, SQUARE_SIZE, SQUARE_SIZE);\n\t\t}\n\t\t\n\t\tgc.restore();\n\t\t\n\t\tdouble wd = SPACE*0.6;\n\t\tdouble bd = HEIGHT-SPACE*0.6;\n\t\t\n\t\tgc.setFill(Color.BLACK);\n\t\tint bm = this.board.getMaterial(Color.BLACK);\n\t\tint wm = this.board.getMaterial(Color.WHITE);\n\t\tint diff = wm-bm;", "\t\tif (this.draggingPiece != null){\n\t\t\tgc.drawImage(this.promotionPiece == null ? this.draggingPiece.getImage() : this.promotionPiece.getImage(), this.dragX-SQUARE_SIZE/2.0, this.dragY-SPACE-SQUARE_SIZE/2.0, SQUARE_SIZE, SQUARE_SIZE);\n\t\t}\n\t\t\n\t\tgc.restore();\n\t\t\n\t\tdouble wd = SPACE*0.6;\n\t\tdouble bd = HEIGHT-SPACE*0.6;\n\t\t\n\t\tgc.setFill(Color.BLACK);\n\t\tint bm = this.board.getMaterial(Color.BLACK);\n\t\tint wm = this.board.getMaterial(Color.WHITE);\n\t\tint diff = wm-bm;", "\t\tif (diff < 0) gc.fillText(Integer.toString(-diff), WIDTH*0.05, this.viewPoint == Color.WHITE ? wd : bd);\n\t\tif (diff > 0) gc.fillText(Integer.toString(diff), WIDTH*0.05, this.viewPoint == Color.WHITE ? bd : wd);\n\t\t\n\t\tList<Piece> black = this.board.getMaterialList(Color.BLACK);\n\t\tList<Piece> white = this.board.getMaterialList(Color.WHITE);\n\t\tgc.save();\n\t\tfor (int i = 0; i < black.size(); i++){\n\t\t\tPiece piece = black.get(i);\n\t\t\tPiece prev = i == 0 ? null : black.get(i-1);\n\t\t\tif (i > 0) gc.translate(prev != null && prev.getType().getValue() == piece.getType().getValue() ? SQUARE_SIZE/4.0 : SQUARE_SIZE/2.0+SQUARE_SIZE/10.0, 0);\n\t\t\tgc.drawImage(piece.getImage(), WIDTH*0.05, this.viewPoint == Color.WHITE ? wd : bd, SQUARE_SIZE/2.0, SQUARE_SIZE/2.0);\n\t\t}\n\t\tgc.restore();\n\t\tgc.save();", "\t\t\tif (i > 0) gc.translate(prev != null && prev.getType().getValue() == piece.getType().getValue() ? SQUARE_SIZE/4.0 : SQUARE_SIZE/2.0+SQUARE_SIZE/10.0, 0);\n\t\t\tgc.drawImage(piece.getImage(), WIDTH*0.05, this.viewPoint == Color.WHITE ? wd : bd, SQUARE_SIZE/2.0, SQUARE_SIZE/2.0);\n\t\t}\n\t\tgc.restore();\n\t\tgc.save();\n\t\tfor (int i = 0; i < white.size(); i++){\n\t\t\tPiece piece = white.get(i);\n\t\t\tPiece prev = i == 0 ? null : white.get(i-1);\n\t\t\tif (i > 0) gc.translate(prev != null && prev.getType().getValue() == piece.getType().getValue() ? SQUARE_SIZE/4.0 : SQUARE_SIZE/2.0+SQUARE_SIZE/10.0, 0);\n\t\t\tgc.drawImage(piece.getImage(), WIDTH*0.05, this.viewPoint == Color.WHITE ? bd : wd, SQUARE_SIZE/2.0, SQUARE_SIZE/2.0);\n\t\t}\n\t\tgc.restore();\n", "\t\t\tif (i > 0) gc.translate(prev != null && prev.getType().getValue() == piece.getType().getValue() ? SQUARE_SIZE/4.0 : SQUARE_SIZE/2.0+SQUARE_SIZE/10.0, 0);\n\t\t\tgc.drawImage(piece.getImage(), WIDTH*0.05, this.viewPoint == Color.WHITE ? bd : wd, SQUARE_SIZE/2.0, SQUARE_SIZE/2.0);\n\t\t}\n\t\tgc.restore();\n\n\t\tfor (Map.Entry<String, List<String>> entry : this.hold.entrySet()){\n\t\t\tif (entry.getKey() == null || entry.getValue() == null) continue;\n\t\t\tfor (String value : entry.getValue()){\n\t\t\t\tint[] h1 = Board.convertNotation(entry.getKey());\n\t\t\t\tint[] h2 = Board.convertNotation(value);\n\t\t\t\t\n\t\t\t\tgc.save();\n\t\t\t\tgc.setLineWidth(9);\n\t\t\t\tgc.setGlobalAlpha(0.6);\n\t\t\t\tgc.setStroke(Color.ORANGE);\n\t\t\t\tdouble rad;\n\t\t\t\t\n\t\t\t\t// Knight", "\t\t\t\tif (Math.abs(h2[0]-h1[0])*Math.abs(h2[1]-h1[1]) == 2){\n\t\t\t\t\tgc.strokeLine(h1[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h1[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0, h1[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h2[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0);\n\t\t\t\t\tgc.strokeLine(h1[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h2[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0, h2[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h2[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0);\n\t\t\t\t\trad = Math.atan2(0, h2[0]-h1[0]);\n\t\t\t\t} else {\n\t\t\t\t\tgc.strokeLine(h1[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h1[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0, h2[0]*SQUARE_SIZE+SQUARE_SIZE/2.0, h2[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE/2.0);\n\t\t\t\t\trad = Math.atan2(h2[1]-h1[1], h2[0]-h1[0]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tgc.setFill(Color.ORANGE);\n\t\t\t\tgc.translate(h2[0]*SQUARE_SIZE+SQUARE_SIZE*0.5, h2[1]*SQUARE_SIZE+SPACE+SQUARE_SIZE*0.5);\n\t\t\t\tgc.rotate(Math.toDegrees(rad));\n\t\t\t\tgc.fillPolygon(new double[]{-SQUARE_SIZE*0.3, -SQUARE_SIZE*0.3, SQUARE_SIZE*0.3}, new double[]{-SQUARE_SIZE*0.3, SQUARE_SIZE*0.3, 0}, 3);\n\t\t\t\t\n\t\t\t\tgc.restore();\n\t\t\t}\n\t\t}\n\t\t\n\t\tgc.fillText(\"Eval: \"+this.eval, WIDTH*0.7, HEIGHT-SPACE*0.7);\n\t\t\n\t\tint count = 0;", "\t\tfor (int i = Math.max(this.board.getMoves().size()-6, 0); i < this.board.getMoves().size(); i++){\n\t\t\tgc.setStroke(Color.BLACK);\n\t\t\tgc.setFill(i % 2 == 0 ? Color.web(\"#F58B23\") : Color.web(\"#7D4711\"));\n\t\t\tdouble w = WIDTH/6;\n\t\t\tdouble h = SPACE*0.2;\n\t\t\tdouble xp = 0+(count++)*w;\n\t\t\tdouble yp = SPACE*0.15;\n\t\t\tgc.fillRect(xp, yp, w, h);\n\t\t\tgc.strokeRect(xp, yp, w, h);\n\t\t\tgc.setFill(Color.BLACK);\n\t\t\tgc.fillText((i/2+1)+\".\"+this.board.getMoves().get(i), xp+w*0.1, yp+h*0.75);\n\t\t}\n\t\t\n\t\tgc.setStroke(Color.BLACK);\n\t\tdouble timeWidth = WIDTH*0.3;\n\t\tdouble timeHeight = SPACE*0.25;\n\t\tgc.strokeRect(WIDTH*0.65, wd, timeWidth, timeHeight);\n\t\tgc.strokeRect(WIDTH*0.65, bd, timeWidth, timeHeight);\n\t\tgc.setFill(Color.BLACK);\n\t\tString topText = this.viewPoint == Color.WHITE ? formatTime(this.board.getTime(Color.BLACK)) : formatTime(this.board.getTime(Color.WHITE));\n\t\tString bottomText = this.viewPoint == Color.WHITE ? formatTime(this.board.getTime(Color.WHITE)) : formatTime(this.board.getTime(Color.BLACK));\n\t\tgc.fillText(topText, WIDTH*0.65+timeWidth*0.1, wd+timeHeight*0.75);\n\t\tgc.fillText(bottomText, WIDTH*0.65+timeWidth*0.1, bd+timeHeight*0.75);\n\t\t", "\t\tif (this.gameFinished || Server.clients.size() == 1){\n\t\t\tgc.save();\n\t\t\tgc.setFill(Color.BLACK);\n\t\t\tgc.setGlobalAlpha(0.6);\n\t\t\tgc.fillRect(0, 0, WIDTH, HEIGHT);\n\t\t\tgc.restore();\n\t\t\tif (this.gameFinished) this.client = null;\n\t\t}\n\t\t\n\t\tif (!this.gameFinished) this.board.tick();\n\t}\n\t\n\tprivate static String formatTime(int time){\n\t\tint h = time / (60*60*1000);\n\t\tint m = time % (60*60*1000) / (60*1000);\n\t\tint s = ((time % (60*60*1000)) / 1000) % 60;\n\t\tint ms = time % (60*60*1000) % 1000;\n\t\tString text = \"\";", "\t\tif (!this.gameFinished) this.board.tick();\n\t}\n\t\n\tprivate static String formatTime(int time){\n\t\tint h = time / (60*60*1000);\n\t\tint m = time % (60*60*1000) / (60*1000);\n\t\tint s = ((time % (60*60*1000)) / 1000) % 60;\n\t\tint ms = time % (60*60*1000) % 1000;\n\t\tString text = \"\";\n\t\tif (h > 0){\n\t\t\treturn String.format(\"%d:%d:%d.%d\", h, m, s, ms);\n\t\t} else {\n\t\t\treturn String.format(\"%d:%d.%d\", m, s, ms);\n\t\t}\n\t}\n\n\tprivate static void loadSounds(){\n\t\tMOVE_SOUND = new Media(MainApplication.class.getResource(\"/move.mp3\").toExternalForm());\n\t\tCAPTURE_SOUND = new Media(MainApplication.class.getResource(\"/capture.mp3\").toExternalForm());\n\t\tCASTLE_SOUND = new Media(MainApplication.class.getResource(\"/castle.mp3\").toExternalForm());\n\t\tCHECK_SOUND = new Media(MainApplication.class.getResource(\"/notify.mp3\").toExternalForm());\n\t}\n\t", "\t\tif (h > 0){\n\t\t\treturn String.format(\"%d:%d:%d.%d\", h, m, s, ms);\n\t\t} else {\n\t\t\treturn String.format(\"%d:%d.%d\", m, s, ms);\n\t\t}\n\t}\n\n\tprivate static void loadSounds(){\n\t\tMOVE_SOUND = new Media(MainApplication.class.getResource(\"/move.mp3\").toExternalForm());\n\t\tCAPTURE_SOUND = new Media(MainApplication.class.getResource(\"/capture.mp3\").toExternalForm());\n\t\tCASTLE_SOUND = new Media(MainApplication.class.getResource(\"/castle.mp3\").toExternalForm());\n\t\tCHECK_SOUND = new Media(MainApplication.class.getResource(\"/notify.mp3\").toExternalForm());\n\t}\n\t", "\tpublic static void playSound(Media media){\n\t\tAudioClip player = new AudioClip(media.getSource());\n\t\tplayer.play();\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\tif (args.length >= 1){\n\t\t\tString col = args[0];\n\t\t\tif (col.equals(\"WHITE\")){\n\t\t\t\tstartColor = Color.WHITE;\n\t\t\t} else {\n\t\t\t\tstartColor = Color.BLACK;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlaunch(args);\n\t}\n}\n", "\t\t\tif (col.equals(\"WHITE\")){\n\t\t\t\tstartColor = Color.WHITE;\n\t\t\t} else {\n\t\t\t\tstartColor = Color.BLACK;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlaunch(args);\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/Launcher.java", "chunked_list": ["package com.orangomango.chess;\n\nimport java.io.IOException;\n\npublic class Launcher{\n\tpublic static void main(String[] args) throws IOException{\n\t\tMainApplication.main(args);\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/Logger.java", "chunked_list": ["package com.orangomango.chess;\n\nimport java.io.*;\nimport java.util.Date;\nimport java.text.SimpleDateFormat;\n\npublic class Logger{\n\tprivate static BufferedWriter writer;\n\t\n\tstatic {\n\t\ttry {\n\t\t\tFile dir = new File(System.getProperty(\"user.home\"), \".omchess\");", "\t\ttry {\n\t\t\tFile dir = new File(System.getProperty(\"user.home\"), \".omchess\");\n\t\t\tif (!dir.exists()) dir.mkdir();\n\t\t\tFile file = new File(dir, \"chess.log\");\n\t\t\twriter = new BufferedWriter(new FileWriter(file, true));\n\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(() -> {\n\t\t\t\ttry {\n\t\t\t\t\twriter.close();\n\t\t\t\t} catch (IOException ex){\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\t\n\tprivate static void write(String t, String msg){\n\t\tSimpleDateFormat f = new SimpleDateFormat(\"dd/MM/YYYY HH:mm:ss\");", "\t\ttry {\n\t\t\tfor (String line : msg.split(\"\\n\")){\n\t\t\t\twriter.write(t+String.format(\"[%s]: \", f.format(new Date()))+line);\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.flush();\n\t\t\t}\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\t", "\tpublic static void writeInfo(String msg){\n\t\twrite(\"INFO\", msg);\n\t}\n\t\n\tpublic static void writeError(String msg){\n\t\twrite(\"ERROR\", msg);\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/PieceAnimation.java", "chunked_list": ["package com.orangomango.chess;\n\nimport javafx.geometry.Point2D;\nimport javafx.animation.*;\nimport javafx.util.Duration;\n\npublic class PieceAnimation{\n\tprivate String start, end;\n\tprivate Runnable onFinish;\n\tprivate volatile Point2D pos;\n\tprivate int animationTime = 15;\n\t\n\tpublic PieceAnimation(String start, String end, Runnable r){\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.onFinish = r;\n\t\tthis.pos = new Point2D(Board.convertNotation(this.start)[0], Board.convertNotation(this.start)[1]);\n\t}\n\t", "\tpublic void setAnimationTime(int time){\n\t\tthis.animationTime = time;\n\t}\n\t\n\tpublic void start(){\n\t\tint[] startPoint = Board.convertNotation(this.start);\n\t\tint[] endPoint = Board.convertNotation(this.end);\n\t\tTimeline loop = new Timeline(new KeyFrame(Duration.millis(this.animationTime), e -> {\n\t\t\tthis.pos = new Point2D(this.pos.getX()+(endPoint[0]-startPoint[0])/10.0, this.pos.getY()+(endPoint[1]-startPoint[1])/10.0);\n\t\t}));\n\t\tloop.setCycleCount(10);\n\t\tloop.setOnFinished(e -> this.onFinish.run());\n\t\tloop.play();\n\t}\n\t", "\tpublic String getStartNotation(){\n\t\treturn this.start;\n\t}\n\t\n\tpublic String getEndNotation(){\n\t\treturn this.end;\n\t}\n\t\n\tpublic Point2D getPosition(){\n\t\treturn this.pos;\n\t}\n}\n", "\tpublic Point2D getPosition(){\n\t\treturn this.pos;\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/multiplayer/ClientManager.java", "chunked_list": ["package com.orangomango.chess.multiplayer;\n\nimport java.io.*;\nimport java.net.*;\n\nimport javafx.scene.paint.Color;\n\nimport com.orangomango.chess.Logger;\n\npublic class ClientManager{\n\tprivate Socket socket;\n\tprivate BufferedWriter writer;\n\tprivate BufferedReader reader;\n\tprivate Color color;\n\t\n\tpublic ClientManager(Socket socket){\n\t\tthis.socket = socket;", "\npublic class ClientManager{\n\tprivate Socket socket;\n\tprivate BufferedWriter writer;\n\tprivate BufferedReader reader;\n\tprivate Color color;\n\t\n\tpublic ClientManager(Socket socket){\n\t\tthis.socket = socket;\n\t\ttry {\n\t\t\tthis.writer = new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));\n\t\t\tthis.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n\t\t\tString message = this.reader.readLine();\n\t\t\tthis.color = message.equals(\"WHITE\") ? Color.WHITE : Color.BLACK;\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t\tLogger.writeInfo(\"Client connected\");\n\t\tlisten();\n\t}\n\t", "\t\ttry {\n\t\t\tthis.writer = new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));\n\t\t\tthis.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n\t\t\tString message = this.reader.readLine();\n\t\t\tthis.color = message.equals(\"WHITE\") ? Color.WHITE : Color.BLACK;\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t\tLogger.writeInfo(\"Client connected\");\n\t\tlisten();\n\t}\n\t", "\tpublic void reply(){\n\t\tString message = null;\n\t\tfor (ClientManager c : Server.clients){\n\t\t\tif (c != this && c.getColor() == this.color){\n\t\t\t\tthis.color = this.color == Color.WHITE ? Color.BLACK : Color.WHITE;\n\t\t\t}\n\t\t}\n\t\tif (Server.clients.size() > 2){\n\t\t\tmessage = \"FULL\";\n\t\t\tServer.clients.remove(this);\n\t\t} else {\n\t\t\tmessage = this.color == Color.WHITE ? \"WHITE\" : \"BLACK\";\n\t\t}", "\t\ttry {\n\t\t\tthis.writer.write(message);\n\t\t\tthis.writer.newLine();\n\t\t\tthis.writer.flush();\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t}\n\t\n\tpublic Color getColor(){\n\t\treturn this.color;\n\t}\n\t\n\tprivate void listen(){\n\t\tThread listener = new Thread(() -> {", "\tpublic Color getColor(){\n\t\treturn this.color;\n\t}\n\t\n\tprivate void listen(){\n\t\tThread listener = new Thread(() -> {\n\t\t\twhile (this.socket.isConnected()){\n\t\t\t\ttry {\n\t\t\t\t\tString message = this.reader.readLine();\n\t\t\t\t\tif (message != null){\n\t\t\t\t\t\tbroadcast(message);\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException ex){\n\t\t\t\t\tclose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlistener.setDaemon(true);\n\t\tlistener.start();\n\t}\n\t\n\tprivate void broadcast(String message){", "\t\t\t\t\tif (message != null){\n\t\t\t\t\t\tbroadcast(message);\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException ex){\n\t\t\t\t\tclose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlistener.setDaemon(true);\n\t\tlistener.start();\n\t}\n\t\n\tprivate void broadcast(String message){", "\t\tfor (ClientManager cm : Server.clients){\n\t\t\tif (cm == this) continue;\n\t\t\ttry {\n\t\t\t\tcm.writer.write(message);\n\t\t\t\tcm.writer.newLine();\n\t\t\t\tcm.writer.flush();\n\t\t\t} catch (IOException ex){\n\t\t\t\tclose();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void close(){", "\t\ttry {\n\t\t\tif (this.socket != null) this.socket.close();\n\t\t\tif (this.reader != null) this.reader.close();\n\t\t\tif (this.writer != null) this.writer.close();\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/multiplayer/Server.java", "chunked_list": ["package com.orangomango.chess.multiplayer;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\nimport com.orangomango.chess.Logger;\n\npublic class Server{\n\tprivate String ip;\n\tprivate int port;\n\tprivate ServerSocket server;", "public class Server{\n\tprivate String ip;\n\tprivate int port;\n\tprivate ServerSocket server;\n\tpublic static List<ClientManager> clients = new ArrayList<>();\n\t\n\tpublic Server(String ip, int port){\n\t\tthis.ip = ip;\n\t\tthis.port = port;\n\t\ttry {\n\t\t\tthis.server = new ServerSocket(port, 10, InetAddress.getByName(ip));\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t\tlisten();\n\t\tLogger.writeInfo(\"Server started\");\n\t}\n\t\n\tprivate void listen(){\n\t\tThread listener = new Thread(() -> {", "\t\ttry {\n\t\t\tthis.server = new ServerSocket(port, 10, InetAddress.getByName(ip));\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t\tlisten();\n\t\tLogger.writeInfo(\"Server started\");\n\t}\n\t\n\tprivate void listen(){\n\t\tThread listener = new Thread(() -> {", "\t\t\twhile (!this.server.isClosed()){\n\t\t\t\ttry {\n\t\t\t\t\tSocket socket = this.server.accept();\n\t\t\t\t\tClientManager cm = new ClientManager(socket);\n\t\t\t\t\tclients.add(cm);\n\t\t\t\t\tcm.reply();\n\t\t\t\t} catch (IOException ex){\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlistener.setDaemon(true);\n\t\tlistener.start();\n\t}\n\t\n\tprivate void close(){", "\t\ttry {\n\t\t\tif (this.server != null) this.server.close();\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/com/orangomango/chess/multiplayer/Client.java", "chunked_list": ["package com.orangomango.chess.multiplayer;\n\nimport java.io.*;\nimport java.net.*;\n\nimport javafx.scene.paint.Color;\n\nimport com.orangomango.chess.Logger;\n\npublic class Client{\n\tprivate String ip;\n\tprivate int port;\n\tprivate Socket socket;\n\tprivate BufferedWriter writer;\n\tprivate BufferedReader reader;\n\tprivate Color color;\n\t\n\tpublic Client(String ip, int port, Color color){\n\t\tthis.ip = ip;\n\t\tthis.port = port;", "\npublic class Client{\n\tprivate String ip;\n\tprivate int port;\n\tprivate Socket socket;\n\tprivate BufferedWriter writer;\n\tprivate BufferedReader reader;\n\tprivate Color color;\n\t\n\tpublic Client(String ip, int port, Color color){\n\t\tthis.ip = ip;\n\t\tthis.port = port;", "\t\ttry {\n\t\t\tthis.socket = new Socket(ip, port);\n\t\t\tthis.writer = new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));\n\t\t\tthis.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n\t\t\tsendMessage(color == Color.WHITE ? \"WHITE\" : \"BLACK\");\n\t\t\tString response = getMessage();\n\t\t\tif (response != null){\n\t\t\t\tif (response.equals(\"FULL\")){\n\t\t\t\t\tLogger.writeInfo(\"Server is full\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.color = response.equals(\"WHITE\") ? Color.WHITE : Color.BLACK;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.writeError(\"Invalid server response\");\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t}\n\t", "\tpublic Color getColor(){\n\t\treturn this.color;\n\t}\n\t\n\tpublic boolean isConnected(){\n\t\treturn this.socket != null && this.socket.isConnected();\n\t}\n\t\n\tpublic void sendMessage(String message){\n\t\ttry {\n\t\t\tthis.writer.write(message);\n\t\t\tthis.writer.newLine();\n\t\t\tthis.writer.flush();\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t}\n\t", "\tpublic void sendMessage(String message){\n\t\ttry {\n\t\t\tthis.writer.write(message);\n\t\t\tthis.writer.newLine();\n\t\t\tthis.writer.flush();\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t}\n\t}\n\t\n\tpublic String getMessage(){", "\tpublic String getMessage(){\n\t\ttry {\n\t\t\tString message = this.reader.readLine();\n\t\t\treturn message;\n\t\t} catch (IOException ex){\n\t\t\tclose();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void close(){", "\t\ttry {\n\t\t\tif (this.socket != null) this.socket.close();\n\t\t\tif (this.reader != null) this.reader.close();\n\t\t\tif (this.writer != null) this.writer.close();\n\t\t} catch (IOException ex){\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n}\n"]}
