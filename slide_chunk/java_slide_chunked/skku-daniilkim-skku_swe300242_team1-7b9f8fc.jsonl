{"filename": "backend/devtools/src/main/java/com/skkuse/team1/socialhub/routes/annotations/APIRouterProcessor.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes.annotations;\n\nimport com.google.auto.service.AutoService;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.Element;\nimport javax.lang.model.element.ExecutableElement;\nimport javax.lang.model.element.Modifier;\nimport javax.lang.model.element.TypeElement;", "import javax.lang.model.element.Modifier;\nimport javax.lang.model.element.TypeElement;\nimport javax.tools.Diagnostic;\nimport java.io.PrintWriter;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\n@SupportedAnnotationTypes(\"com.skkuse.team1.socialhub.routes.annotations.*\")\n@SupportedSourceVersion(SourceVersion.RELEASE_17)", "@SupportedAnnotationTypes(\"com.skkuse.team1.socialhub.routes.annotations.*\")\n@SupportedSourceVersion(SourceVersion.RELEASE_17)\n@AutoService(Processor.class)\n@SuppressWarnings(\"unused\")  /* HACK */\npublic class APIRouterProcessor extends AbstractProcessor {\n\n    private record APIRouterEntry(String className, String baseURL, List<APIRouteEntry> routes){\n        private APIRouterEntry(String className, String baseURL) {\n            this(className, baseURL, new LinkedList<>());\n        }\n    }\n\n    private record APIRouteEntry(APIRouteType type, int version, String methodName, boolean provideAuth){}\n\n    @Override", "    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        final Set<Modifier> modifiers = Set.of(Modifier.PUBLIC, Modifier.STATIC);\n\n        @SuppressWarnings(\"unchecked\")\n        final Set<TypeElement> classes = (Set<TypeElement>) roundEnv.getElementsAnnotatedWith(APIRouter.class);\n\n        List<APIRouterEntry> entries = new LinkedList<>();\n\n        for (final TypeElement clazz : classes) {\n            APIRouterEntry entry = new APIRouterEntry(clazz.getQualifiedName().toString(), clazz.getAnnotation(APIRouter.class).baseURL());\n            for (final Element el : clazz.getEnclosedElements()) {\n                APIRoute routeAnnotation = el.getAnnotation(APIRoute.class);", "        for (final TypeElement clazz : classes) {\n            APIRouterEntry entry = new APIRouterEntry(clazz.getQualifiedName().toString(), clazz.getAnnotation(APIRouter.class).baseURL());\n            for (final Element el : clazz.getEnclosedElements()) {\n                APIRoute routeAnnotation = el.getAnnotation(APIRoute.class);\n                if (routeAnnotation != null) {\n                    ExecutableElement method = (ExecutableElement) el;\n                    // Validate the signature:\n                    if (!method.getModifiers().containsAll(modifiers))\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" must be 'public static'\");\n\n                    if (!method.getReturnType().toString().equals(\"io.vertx.core.Future<io.vertx.ext.web.Router>\"))\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" must return 'io.vertx.core.Future<io.vertx.ext.web.Router>'\");\n", "                    if (!method.getReturnType().toString().equals(\"io.vertx.core.Future<io.vertx.ext.web.Router>\"))\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" must return 'io.vertx.core.Future<io.vertx.ext.web.Router>'\");\n\n                    if (method.getParameters().size() != 1 && method.getParameters().size() != 2) {\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" must have at most only 2 arguments: 'io.vertx.core.Vertx' and 'io.vertx.ext.auth.jwt.JWTAuth'\");\n                    }\n\n                    if (!method.getParameters().get(0).asType().toString().equals(\"io.vertx.core.Vertx\")){\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" 1st argument must be of type 'io.vertx.core.Vertx'\");\n                    }\n                    if (method.getParameters().size() == 2 && !method.getParameters().get(1).asType().toString().equals(\"io.vertx.ext.auth.jwt.JWTAuth\")){\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" 2nd argument must be of type 'io.vertx.ext.auth.jwt.JWTAuth'\");\n                    }\n\n                    entry.routes.add(new APIRouteEntry(routeAnnotation.type(), routeAnnotation.version(), method.getSimpleName().toString(), method.getParameters().size() == 2));\n                }\n            }\n            entries.add(entry);\n        }", "                    if (method.getParameters().size() == 2 && !method.getParameters().get(1).asType().toString().equals(\"io.vertx.ext.auth.jwt.JWTAuth\")){\n                        this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, \"Error! Method: \" + el.getSimpleName() + \" in Class: \" + clazz.getSimpleName() + \" 2nd argument must be of type 'io.vertx.ext.auth.jwt.JWTAuth'\");\n                    }\n\n                    entry.routes.add(new APIRouteEntry(routeAnnotation.type(), routeAnnotation.version(), method.getSimpleName().toString(), method.getParameters().size() == 2));\n                }\n            }\n            entries.add(entry);\n        }\n        if(!entries.isEmpty())\n            generate(entries);\n        return true;\n    }\n\n    private void generate(List<APIRouterEntry> entries){\n        final String packageName = \"com.skkuse.team1.socialhub.routes.processed\";\n        final String className = \"APIRoutesManager\";\n        final String fullName = packageName + \".\" + className;\n\n        try (PrintWriter writer = new PrintWriter(processingEnv.getFiler().createSourceFile(fullName).openWriter())) {\n            writer.println(\"\"\"\n                    package %s;\n                                        \n                    import io.vertx.core.Vertx;\n                    import io.vertx.core.Future;\n                    import io.vertx.core.CompositeFuture;\n                    import io.vertx.ext.web.Router;\n                    import io.vertx.ext.auth.jwt.JWTAuth;\n                                        \n                    import java.lang.Void;\n                    import java.util.Arrays;\n                         \n                    public class %s {\n                    \"\"\"\n                    .formatted(packageName, className)\n            );\n\n            writer.print(\"\"\"\n                        private static Future<Void> mountRouter(Router mainRouter, String url, Router subRouter){\n                            mainRouter.route(url).subRouter(subRouter);\n                            return Future.succeededFuture();\n                        }", "        if(!entries.isEmpty())\n            generate(entries);\n        return true;\n    }\n\n    private void generate(List<APIRouterEntry> entries){\n        final String packageName = \"com.skkuse.team1.socialhub.routes.processed\";\n        final String className = \"APIRoutesManager\";\n        final String fullName = packageName + \".\" + className;\n\n        try (PrintWriter writer = new PrintWriter(processingEnv.getFiler().createSourceFile(fullName).openWriter())) {\n            writer.println(\"\"\"\n                    package %s;\n                                        \n                    import io.vertx.core.Vertx;\n                    import io.vertx.core.Future;\n                    import io.vertx.core.CompositeFuture;\n                    import io.vertx.ext.web.Router;\n                    import io.vertx.ext.auth.jwt.JWTAuth;\n                                        \n                    import java.lang.Void;\n                    import java.util.Arrays;\n                         \n                    public class %s {\n                    \"\"\"\n                    .formatted(packageName, className)\n            );\n\n            writer.print(\"\"\"\n                        private static Future<Void> mountRouter(Router mainRouter, String url, Router subRouter){\n                            mainRouter.route(url).subRouter(subRouter);\n                            return Future.succeededFuture();\n                        }", "                        public static Future<Void> registerAllRoutes(Vertx vertx, Router mainRouter, JWTAuth authProvider) {\n                            return CompositeFuture.all( Arrays.asList(\n                    \"\"\"\n            );\n\n            StringBuilder composed = new StringBuilder();\n            for(APIRouterEntry entry : entries){\n                for(var route : entry.routes){\n//                    writer.print(\"\"\"\n//                                    router.route(\"/%s%s*\").subRouter(%s.%s(vertx));\n//                        \"\"\".formatted(route.getKey() == Route.RouteType.PUBLIC ? \"public\" : \"protected\", entry.baseURL, entry.className, route.getValue())\n//                    );\n                    composed.append(\"\"\"\n                                        %s.%s(vertx%s).compose(router -> mountRouter(mainRouter, \"%s%s/%s*\", router)),\n                            \"\"\".formatted(entry.className, route.methodName, route.provideAuth ? \", authProvider\" : \"\", route.type, \"v\"+route.version, entry.baseURL));\n                }\n            }\n            composed.deleteCharAt(composed.lastIndexOf(\",\"));\n            writer.print(composed);\n            writer.print(\"\"\"\n                            ) ).compose(temp -> Future.<Void>succeededFuture());\n                        }\n                    }\n                    \"\"\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n"]}
{"filename": "backend/devtools/src/main/java/com/skkuse/team1/socialhub/routes/annotations/APIRouteType.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes.annotations;\n\npublic enum APIRouteType {\n    PUBLIC(\"/public/\"), PROTECTED(\"/protected/\");\n\n    private final String baseURL;\n    APIRouteType(String baseURL) {\n        this.baseURL = baseURL;\n    }\n\n    @Override", "    public String toString(){\n        return baseURL;\n    }\n}\n"]}
{"filename": "backend/devtools/src/main/java/com/skkuse/team1/socialhub/routes/annotations/APIRoute.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.SOURCE)\n@Target(ElementType.METHOD)\npublic @interface APIRoute {", "@Target(ElementType.METHOD)\npublic @interface APIRoute {\n    APIRouteType type();\n\n    int version() default 1;\n\n}"]}
{"filename": "backend/devtools/src/main/java/com/skkuse/team1/socialhub/routes/annotations/APIRouter.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.SOURCE)\n@Target(ElementType.TYPE)\npublic @interface APIRouter {", "@Target(ElementType.TYPE)\npublic @interface APIRouter {\n\n    String baseURL();\n\n}\n"]}
{"filename": "backend/src/test/java/MainTest.java", "chunked_list": ["import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.skkuse.team1.socialhub.StarterVerticle;\nimport com.skkuse.team1.socialhub.jdbc.impl.UserJDBC;\nimport com.skkuse.team1.socialhub.model.Activity;\nimport com.skkuse.team1.socialhub.model.User;\nimport com.skkuse.team1.socialhub.requests.RequestActivityCommit;\nimport com.skkuse.team1.socialhub.requests.RequestChangePassword;\nimport com.skkuse.team1.socialhub.requests.RequestLogin;\nimport io.vertx.core.CompositeFuture;\nimport io.vertx.core.Future;", "import io.vertx.core.CompositeFuture;\nimport io.vertx.core.Future;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.http.HttpHeaders;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.web.client.WebClient;\nimport io.vertx.ext.web.client.WebClientOptions;\nimport io.vertx.ext.web.client.WebClientSession;\nimport io.vertx.junit5.VertxExtension;", "import io.vertx.ext.web.client.WebClientSession;\nimport io.vertx.junit5.VertxExtension;\nimport io.vertx.junit5.VertxTestContext;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.testcontainers.containers.PostgreSQLContainer;\nimport org.testcontainers.junit.jupiter.Testcontainers;\n", "import org.testcontainers.junit.jupiter.Testcontainers;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.BiFunction;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n", "import static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(VertxExtension.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@Testcontainers\npublic class MainTest {\n\n    record HelperLoggedIn(WebClientSession session, User user) {}\n    List<HelperLoggedIn> loggedInSessionList = new ArrayList<>();\n\n    @BeforeAll", "    public void init(Vertx vertx, VertxTestContext tc) throws Exception {\n        System.setProperty(\"DB_NAME\", \"test_db\");\n        System.setProperty(\"DB_USER\", \"sample\");\n        System.setProperty(\"DB_PASSWORD\", \"sample\");\n        // Start postgresql container. Ryuk Container will kill this container after test completion.\n        PostgreSQLContainer container = new PostgreSQLContainer(\"postgres:12\")\n                .withDatabaseName(System.getProperty(\"DB_NAME\"))\n                .withUsername(System.getProperty(\"DB_USER\"))\n                .withPassword(System.getProperty(\"DB_PASSWORD\"));\n        container.start();\n        // Set properties which are generated by the container.\n        System.setProperty(\"DB_PORT\", container.getMappedPort(5432).toString());\n        System.setProperty(\"DB_HOST\", container.getHost());\n        vertx.deployVerticle(StarterVerticle.class.getName()).onComplete(tc.succeedingThenComplete());\n    }\n\n    @JsonIgnoreProperties(value = { \"ok\" })\n    class TestRequestLogin extends RequestLogin {\n\n        private boolean isOk;\n\n        public TestRequestLogin(String login, String password, boolean isOk) {\n            super(login, password);\n            this.isOk = isOk;\n        }\n", "        public boolean isOk() {\n            return isOk;\n        }\n\n        @Override\n        public String toString() {\n            return \"As %s Valid: %s\".formatted(getLogin(), isOk);\n        }\n    }\n\n    public Stream<User> SOURCE_USERS() {\n        return Stream.of(\n                new User(\"user0\", \"sample0\", 0, \"Dog name\"),\n                new User(\"user1\", \"sample1\", 0, \"Dog name 1\"),\n                new User(\"user2\", \"sample2\", 0, \"Dog name 2\"),\n                new User(\"user3\", \"sample3\", 0, \"Dog name 3\")\n        );\n    }\n\n    public Stream<TestRequestLogin> SOURCE_LOGIN() {\n        return Stream.of(\n                new TestRequestLogin(\"user0\", \"sample0\", true),\n                new TestRequestLogin(\"user0\", \"sample1\", false),\n                new TestRequestLogin(\"user1\", \"sample1\", true),\n                new TestRequestLogin(\"user2\", \"sample2\", true),\n                new TestRequestLogin(\"user3\", \"sample3\", true)\n        );\n    }\n\n    @ParameterizedTest()\n    @MethodSource(\"SOURCE_USERS\")\n    @DisplayName(\"Create users\")\n    @Order(1)", "    public void createUser(User preUser, Vertx vertx, VertxTestContext tc) {\n        UserJDBC.instance().create(preUser).onComplete(tc.succeeding(user -> tc.verify(() -> {\n            assertEquals(preUser.getUsername(), user.getUsername());\n            assertNull(user.getPassword());\n            assertNull(user.getIdSecurityQuestion());\n            assertNull(user.getSecurityAnswer());\n            assertNotNull(user.getId());\n            tc.completeNow();\n        })));\n    }\n\n    @ParameterizedTest(name = \"{0}\")\n    @MethodSource(\"SOURCE_LOGIN\")\n    @Order(2)\n    @DisplayName(\"Login\")", "    public void loginTest(TestRequestLogin requestLogin, Vertx vertx, VertxTestContext tc) {\n        WebClientSession session = WebClientSession.create(WebClient.create(vertx, new WebClientOptions().setDefaultPort(8080).setDefaultHost(\"localhost\")));\n        session.addHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\");\n        session.post(\"/api/public/v1/users/login\")\n                .sendJsonObject(JsonObject.mapFrom(requestLogin))\n                .compose(response -> {\n                    try {\n                        if(!requestLogin.isOk) {\n                            assertNotEquals(200, response.statusCode());\n                            return Future.succeededFuture();\n                        }else{\n                            assertEquals(200, response.statusCode());\n                            JsonObject body = response.bodyAsJsonObject();\n                            assertNotNull(body.getString(\"access_token\"));\n                            session.addHeader(HttpHeaders.AUTHORIZATION.toString(), \"%s %s\".formatted(body.getString(\"token_type\"), body.getString(\"access_token\")));\n                            // Request information about current user\n                            return session.get(\"/api/protected/v1/users/me\").send().compose(responseCurrentInfo -> {", "                                try {\n                                    assertEquals(200, responseCurrentInfo.statusCode());\n                                    loggedInSessionList.add(new HelperLoggedIn(session, responseCurrentInfo.bodyAsJsonObject().mapTo(User.class)));\n                                    return Future.succeededFuture();\n                                }catch (Throwable ex){\n                                    return Future.failedFuture(ex);\n                                }\n                            });\n                        }\n                    }catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                })\n                .onComplete(tc.succeedingThenComplete());\n    }\n\n    @Test\n    @Order(3)\n    @DisplayName(\"Change password\")", "    public void changePasswordTest(Vertx vertx, VertxTestContext tc) {\n        // Login\n        @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n        RequestLogin requestLogin = SOURCE_LOGIN().filter(TestRequestLogin::isOk).findFirst().get();\n        RequestChangePassword requestChangePassword = new RequestChangePassword(\"new-password\", requestLogin.getPassword());\n        WebClientSession session = WebClientSession.create(WebClient.create(vertx, new WebClientOptions().setDefaultPort(8080).setDefaultHost(\"localhost\")));\n        session.addHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\");\n        session.post(\"/api/protected/v1/users/change-password\")\n                .sendBuffer(Buffer.buffer(JsonObject.mapFrom(requestChangePassword).encode()))\n                .compose(response -> {\n                    try {\n                        // Unauthorized\n                        assertNotEquals(200, response.statusCode());\n                        return session.post(\"/api/public/v1/users/login\")\n                                .sendJsonObject(JsonObject.mapFrom(requestLogin));\n                    } catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).compose(response -> {", "                    try {\n                        // Unauthorized\n                        assertNotEquals(200, response.statusCode());\n                        return session.post(\"/api/public/v1/users/login\")\n                                .sendJsonObject(JsonObject.mapFrom(requestLogin));\n                    } catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).compose(response -> {\n                    try {\n                        // Authorize\n                        assertEquals(200, response.statusCode());\n                        JsonObject authorizationObject = response.bodyAsJsonObject();\n                        // Set JWT token\n                        session.addHeader(HttpHeaders.AUTHORIZATION, \"%s %s\".formatted(authorizationObject.getString(\"token_type\"), authorizationObject.getString(\"access_token\")));\n                        return session.post(\"/api/protected/v1/users/change-password\")\n                                .sendJsonObject(JsonObject.mapFrom(requestChangePassword));\n                    } catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).compose(response -> {", "                    try {\n                        // Authorize\n                        assertEquals(200, response.statusCode());\n                        JsonObject authorizationObject = response.bodyAsJsonObject();\n                        // Set JWT token\n                        session.addHeader(HttpHeaders.AUTHORIZATION, \"%s %s\".formatted(authorizationObject.getString(\"token_type\"), authorizationObject.getString(\"access_token\")));\n                        return session.post(\"/api/protected/v1/users/change-password\")\n                                .sendJsonObject(JsonObject.mapFrom(requestChangePassword));\n                    } catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).compose(response -> {", "                    try {\n                        assertEquals(200, response.statusCode());\n                        // Login with new Password\n                        requestLogin.setPassword(requestChangePassword.getPassword());\n                        return session.post(\"/api/public/v1/users/login\")\n                                .sendJsonObject(JsonObject.mapFrom(requestLogin));\n                    }catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).onComplete(tc.succeeding(response -> tc.verify(() -> {\n                    assertEquals(200, response.statusCode());\n                    tc.completeNow();\n                })));\n    }\n\n    Activity activity;\n    HelperLoggedIn creatorSession, participantSession, notParticipantSession;\n    @Test\n    @Order(4)", "    public void createActivityTest(Vertx vertx, VertxTestContext tc) {\n        creatorSession = loggedInSessionList.get(0);\n        participantSession = loggedInSessionList.get(1);\n        notParticipantSession = loggedInSessionList.get(2);\n        RequestActivityCommit request = new RequestActivityCommit(\n                \"sample\",\n                \"sample activity\",\n                \"sample location\",\n                LocalDateTime.now(),\n                loggedInSessionList.get(1).user.getId()\n        );\n        BiFunction<HelperLoggedIn, Boolean, Future<Void>> checkerFunc = (helper, isOk) -> {\n            return helper.session.get(\"/api/protected/v1/activities/\")\n                    .send()\n                    .compose(response -> {", "                        try {\n                            assertEquals(200, response.statusCode());\n                            assertEquals(isOk ? 1 : 0, response.bodyAsJsonArray().size());\n                            return Future.succeededFuture();\n                        }catch (Throwable ex) {\n                            return Future.failedFuture(ex);\n                        }\n                    });\n        };\n        creatorSession.session.post(\"/api/protected/v1/activities/\")\n                .sendJsonObject(JsonObject.mapFrom(request))\n                .compose(response -> {", "                    try {\n                        assertEquals(200, response.statusCode());\n                        activity = response.bodyAsJsonArray().getJsonObject(0).mapTo(Activity.class);\n                        // Only participants and creator allowed to see activity\n                        return CompositeFuture.all(\n                                checkerFunc.apply(creatorSession, true),\n                                checkerFunc.apply(participantSession, true),\n                                checkerFunc.apply(notParticipantSession, false)\n                        );\n                    }catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).onComplete(tc.succeedingThenComplete());\n    }\n\n    @Test\n    @Order(5)", "    public void checkActivityAccessTest(Vertx vertx, VertxTestContext tc) {\n        // Participant not allowed to delete or edit activity\n        participantSession.session.delete(\"/api/protected/v1/activities/%s\".formatted(activity.getId()))\n                .send().compose(response -> {\n                    try{\n                        assertNotEquals(200, response.statusCode());\n                        return creatorSession.session.delete(\"/api/protected/v1/activities/%s\".formatted(activity.getId())).send();\n                    }catch (Throwable ex) {\n                        return Future.failedFuture(ex);\n                    }\n                }).onComplete(tc.succeeding(response -> tc.verify(() -> {\n                    assertEquals(200, response.statusCode());\n                    tc.completeNow();\n                })));\n    }\n}\n"]}
{"filename": "backend/src/test/java/TestRoutesTest.java", "chunked_list": ["import com.skkuse.team1.socialhub.Config;\nimport com.skkuse.team1.socialhub.StarterVerticle;\nimport io.vertx.config.ConfigRetriever;\nimport io.vertx.core.Vertx;\nimport io.vertx.ext.web.client.WebClient;\nimport io.vertx.junit5.VertxExtension;\nimport io.vertx.junit5.VertxTestContext;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\n", "import org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(VertxExtension.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class TestRoutesTest {\n\n    @BeforeAll\n    public static void init(Vertx vertx, VertxTestContext tctx){\n        // Deploy the server:\n        vertx.deployVerticle(StarterVerticle.class.getName()).onComplete(tctx.succeedingThenComplete());\n    }\n\n    @Test\n    @Order(0)", "    public static void init(Vertx vertx, VertxTestContext tctx){\n        // Deploy the server:\n        vertx.deployVerticle(StarterVerticle.class.getName()).onComplete(tctx.succeedingThenComplete());\n    }\n\n    @Test\n    @Order(0)\n    public void testUser1(Vertx vertx, VertxTestContext tctx){\n        // Create ConfigRetriever to extract ENV variables:\n        ConfigRetriever.create(vertx).getConfig().compose(\n                (configRetriever) -> WebClient.create(vertx)\n                .get(   // Connect WebClient to the correct \"IP:PORT\":\n                        configRetriever.getInteger(Config.KEY_PORT, Config.DEFAULT_PORT),\n                        configRetriever.getString(Config.KEY_HOST, Config.DEFAULT_HOST),\n                        // Set the API endpoint we are trying to access:\n                        \"/api/public/v1/test/user\")\n                .send()\n        ).onComplete(tctx.succeeding((response) -> tctx.verify(() -> {\n            // Check the result:\n            // In this case, simply check if the returned status code is 200 OK:\n            Assertions.assertEquals(200, response.statusCode());\n            // Complete the test:\n            tctx.completeNow();\n        })));\n\n    }\n\n    @AfterAll", "    public static void destroy(Vertx vertx, VertxTestContext tctx){\n        // Cleanup test:\n        tctx.completeNow();\n        vertx.close();\n    }\n\n}\n\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/Config.java", "chunked_list": ["package com.skkuse.team1.socialhub;\n\npublic final class Config {\n\n    // Prevent instantiation.\n    private Config(){}\n\n    public static final String KEY_PORT = \"PORT\";\n    public static final Integer DEFAULT_PORT = 8080;\n\n    public static final String KEY_HOST = \"HOST\";", "    public static final Integer DEFAULT_PORT = 8080;\n\n    public static final String KEY_HOST = \"HOST\";\n    public static final String DEFAULT_HOST = \"0.0.0.0\";\n\n\n\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/Launcher.java", "chunked_list": ["package com.skkuse.team1.socialhub;\n\nimport io.vertx.core.Vertx;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n        Vertx vertx = Vertx.vertx();\n        vertx.deployVerticle(StarterVerticle.class.getName()).onComplete(ar -> {\n            if(ar.failed()){\n                ar.cause().printStackTrace();\n                vertx.close();\n            }\n        });\n    }\n\n}\n", "            if(ar.failed()){\n                ar.cause().printStackTrace();\n                vertx.close();\n            }\n        });\n    }\n\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/StarterVerticle.java", "chunked_list": ["package com.skkuse.team1.socialhub;\n\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouteType;\nimport com.skkuse.team1.socialhub.routes.processed.APIRoutesManager;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.vertx.config.ConfigRetriever;\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Future;\nimport io.vertx.core.Promise;\nimport io.vertx.ext.auth.PubSecKeyOptions;", "import io.vertx.core.Promise;\nimport io.vertx.ext.auth.PubSecKeyOptions;\nimport io.vertx.ext.auth.jwt.JWTAuth;\nimport io.vertx.ext.auth.jwt.JWTAuthOptions;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.handler.BodyHandler;\nimport io.vertx.ext.web.handler.JWTAuthHandler;\n\npublic class StarterVerticle extends AbstractVerticle {\n\n    private static final String API_BASEURL = \"/api/\";\n\n    @Override", "public class StarterVerticle extends AbstractVerticle {\n\n    private static final String API_BASEURL = \"/api/\";\n\n    @Override\n    public void start(Promise<Void> startPromise) {\n        Router rootRouter = Router.router(vertx);\n\n        rootRouter.route().handler(BodyHandler.create());\n\n        Router router = Router.router(vertx);\n\n        router.route().handler((ctx) -> {\n            // HACK: Temporary Logger:\n            System.out.printf(\"'%s' Request on: %s%n\", ctx.request().method(), ctx.request().path());\n            ctx.next();\n        });\n\n        //TODO: Implement OpenAPI.\n\n        // TODO: Use proper crypto keys:\n        JWTAuth authProvider = JWTAuth.create(vertx, new JWTAuthOptions().addPubSecKey(new PubSecKeyOptions()\n                .setAlgorithm(\"HS256\")\n                .setBuffer(\"temporary secret\")));\n\n        router.route(APIRouteType.PROTECTED+\"*\").handler(JWTAuthHandler.create(authProvider));\n\n        APIRoutesManager.registerAllRoutes(vertx, router, authProvider)\n                .compose((v) -> {\n                    // HACK: Temporary 404 Handler:\n                    router.route().handler((ctx) -> {\n                        ctx.response().setStatusCode(HttpResponseStatus.NOT_FOUND.code()).end(\"404\");\n                    });\n\n                    rootRouter.route(API_BASEURL+\"*\").subRouter(router);\n                    return ConfigRetriever.create(vertx).getConfig();\n                })\n                .compose((configRetriever) ->\n                        vertx.createHttpServer()\n                                .requestHandler(rootRouter)\n                                .listen(\n                                        configRetriever.getInteger(Config.KEY_PORT, Config.DEFAULT_PORT),\n                                        configRetriever.getString(Config.KEY_HOST, Config.DEFAULT_HOST)\n                                )\n                )\n                .compose(\n                        (httpServer) -> Future.<Void>succeededFuture()\n                )\n                .onComplete(startPromise);\n\n    }\n\n    @Override", "    public void stop(Promise<Void> stopPromise) {\n        //TODO: Cleanup\n    }\n\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/ExceptionWithHttpCode.java", "chunked_list": ["package com.skkuse.team1.socialhub;\n\npublic class ExceptionWithHttpCode extends Exception {\n    private final int httpCode;\n    public ExceptionWithHttpCode(int httpCode, String message) {\n        super(message);\n        this.httpCode = httpCode;\n    }\n\n    public int getHttpCode() {\n        return httpCode;\n    }\n}\n", "    public int getHttpCode() {\n        return httpCode;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/custom_serializers/LocalDateTimeSerializer.java", "chunked_list": ["package com.skkuse.team1.socialhub.custom_serializers;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer;\n\nimport java.io.IOException;\nimport java.time.LocalDateTime;\n\npublic class LocalDateTimeSerializer extends StdSerializer<LocalDateTime> {\n    public LocalDateTimeSerializer() {\n        this(null);\n    }\n    public LocalDateTimeSerializer(Class<LocalDateTime> t) {\n        super(t);\n    }\n\n    @Override", "\npublic class LocalDateTimeSerializer extends StdSerializer<LocalDateTime> {\n    public LocalDateTimeSerializer() {\n        this(null);\n    }\n    public LocalDateTimeSerializer(Class<LocalDateTime> t) {\n        super(t);\n    }\n\n    @Override\n    public void serialize(LocalDateTime value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        gen.writeStartObject();\n        gen.writeNumberField(\"day\", value.getDayOfMonth());\n        gen.writeNumberField(\"month\", value.getMonthValue());\n        gen.writeNumberField(\"year\", value.getYear());\n        gen.writeNumberField(\"hour\", value.getHour());\n        gen.writeNumberField(\"minute\", value.getMinute());\n        gen.writeEndObject();\n    }\n}\n", "    public void serialize(LocalDateTime value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n        gen.writeStartObject();\n        gen.writeNumberField(\"day\", value.getDayOfMonth());\n        gen.writeNumberField(\"month\", value.getMonthValue());\n        gen.writeNumberField(\"year\", value.getYear());\n        gen.writeNumberField(\"hour\", value.getHour());\n        gen.writeNumberField(\"minute\", value.getMinute());\n        gen.writeEndObject();\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/custom_serializers/LocalDateTimeDeserializer.java", "chunked_list": ["package com.skkuse.team1.socialhub.custom_serializers;\n\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n\nimport java.io.IOException;\nimport java.time.LocalDateTime;", "import java.io.IOException;\nimport java.time.LocalDateTime;\n\npublic class LocalDateTimeDeserializer extends StdDeserializer<LocalDateTime> {\n    public LocalDateTimeDeserializer() {\n        this(null);\n    }\n    protected LocalDateTimeDeserializer(Class<?> vc) {\n        super(vc);\n    }\n\n    @Override", "    public LocalDateTime deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JacksonException {\n        JsonNode node = p.getCodec().readTree(p);\n        return LocalDateTime.of(node.get(\"year\").asInt(), node.get(\"month\").asInt(), node.get(\"day\").asInt(), node.get(\"hour\").asInt(), node.get(\"minute\").asInt());\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/jdbc/AbstractJDBC.java", "chunked_list": ["package com.skkuse.team1.socialhub.jdbc;\n\nimport io.vertx.config.ConfigRetriever;\nimport io.vertx.core.Future;\nimport io.vertx.core.Promise;\nimport io.vertx.core.Vertx;\nimport io.vertx.pgclient.PgConnectOptions;\nimport io.vertx.pgclient.PgPool;\nimport io.vertx.sqlclient.PoolOptions;\nimport io.vertx.sqlclient.Row;", "import io.vertx.sqlclient.PoolOptions;\nimport io.vertx.sqlclient.Row;\nimport io.vertx.sqlclient.RowSet;\nimport io.vertx.sqlclient.SqlConnection;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\nimport java.util.ArrayList;\nimport java.util.Iterator;", "import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Function;\n\npublic abstract class AbstractJDBC <T> {\n    private PgPool connectionPool;\n    protected AbstractJDBC(Vertx vertx, Promise<Void> initResult) {\n        ConfigRetriever.create(vertx).getConfig().compose(configRetrieved -> {\n            PgConnectOptions options = new PgConnectOptions()\n                    .setPort(configRetrieved.getInteger(\"DB_PORT\", 5432))\n                    .setHost(configRetrieved.getString(\"DB_HOST\", \"localhost\"))\n                    .setDatabase(configRetrieved.getString(\"DB_NAME\", \"sample\"))\n                    .setUser(configRetrieved.getString(\"DB_USER\", \"sample\"))\n                    .setPassword(configRetrieved.getString(\"DB_PASSWORD\", \"sample\"))\n                    .setReconnectAttempts(5)\n                    .setReconnectInterval(15000);\n            PoolOptions poolOptions = new PoolOptions().setName(\"pg-pool\")\n                    .setMaxSize(configRetrieved.getInteger(\"POOL_MAX_SIZE\", 5))\n                    .setShared(true); // Pool is shared.\n            connectionPool = PgPool.pool(vertx, options, poolOptions);\n            return connectionPool.withConnection(conn -> {\n                System.out.printf(\"Log %s\", DDL_QUERY());\n                return conn.preparedQuery(DDL_QUERY()).execute();\n            });\n        }).<Void>mapEmpty().onComplete(initResult);\n    }\n\n    protected <R> Future<R> getConnection(boolean withTransaction, Function<SqlConnection, Future<R>> process) {", "        if(withTransaction) return connectionPool.withTransaction(process);\n        else return connectionPool.withConnection(process);\n    }\n\n    protected abstract String tableName();\n\n    protected abstract T fromRow(Row row);\n\n    protected final T fromRowSet(RowSet<Row> rowSet) {\n        Iterator<Row> rowIterator = rowSet.iterator();\n        if(rowIterator.hasNext())\n            return fromRow(rowIterator.next());\n        else return null;\n    }\n\n    protected final List<T> fillObjectList(RowSet<Row> rowSet) {\n        List<T> list = new ArrayList<>();", "        if(rowIterator.hasNext())\n            return fromRow(rowIterator.next());\n        else return null;\n    }\n\n    protected final List<T> fillObjectList(RowSet<Row> rowSet) {\n        List<T> list = new ArrayList<>();\n        for(Row row: rowSet) list.add(fromRow(row));\n        return list;\n    }\n\n    /**\n     * Convert epochMillis to {@link LocalDateTime}.\n     * @param timestamp epochMillis\n     * @return dateTime\n     */\n    protected LocalDateTime localDateTime(long timestamp) {\n        return LocalDateTime.from(Instant.ofEpochSecond(timestamp).atZone(ZoneOffset.UTC));\n    }\n\n    /**\n     * Reversed operation for dateTime conversion.\n     * @see #localDateTime(long)\n     */\n    protected Long localDateTime(LocalDateTime dateTime) {\n        return dateTime.toEpochSecond(ZoneOffset.UTC);\n    }\n\n\n    /**\n     * Query to create table\n     * @return query\n     */\n    protected abstract String DDL_QUERY();\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/jdbc/impl/UserJDBC.java", "chunked_list": ["package com.skkuse.team1.socialhub.jdbc.impl;\n\nimport com.skkuse.team1.socialhub.ExceptionWithHttpCode;\nimport com.skkuse.team1.socialhub.jdbc.AbstractJDBC;\nimport com.skkuse.team1.socialhub.model.User;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.vertx.core.Future;\nimport io.vertx.core.Promise;\nimport io.vertx.core.Vertx;\nimport io.vertx.sqlclient.Row;", "import io.vertx.core.Vertx;\nimport io.vertx.sqlclient.Row;\nimport io.vertx.sqlclient.Tuple;\nimport org.apache.commons.codec.binary.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;", "import java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class UserJDBC extends AbstractJDBC<User> {\n    // region singleton\n    private static UserJDBC instance;\n    private static MessageDigest digest;\n\n    public static UserJDBC instance() {\n        return instance;\n    }\n\n    private static final ReentrantLock lock = new ReentrantLock();\n", "    public static UserJDBC instance() {\n        return instance;\n    }\n\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    public static Future<Void> init(Vertx vertx) {\n        try {\n            if (!lock.tryLock(30, TimeUnit.SECONDS)) throw new Exception(\"Cannot acquire lock!\");\n            if (instance != null) return Future.succeededFuture();\n            Promise<Void> initPromise = Promise.promise();\n            instance = new UserJDBC(vertx, initPromise);\n            digest = MessageDigest.getInstance(\"MD5\");\n            return initPromise.future().compose(aVoid -> {\n                lock.unlock();\n                return Future.succeededFuture();\n            });\n        } catch (Exception ex) {\n            // No need to worry about lock, because system will shut down on error.\n            return Future.failedFuture(ex);\n        }\n    }\n    // endregion\n\n    protected UserJDBC(Vertx vertx, Promise<Void> initResult) {\n        super(vertx, initResult);\n    }\n\n    @Override\n    protected String tableName() {\n        return \"users\";\n    }\n\n    public Future<User> getById(Long id) {\n        return getConnection(false, (conn) -> {\n            return conn.preparedQuery(\"SELECT * FROM %s WHERE id = $1\".formatted(tableName()))\n                    .execute(Tuple.of(id))\n                    .map(this::fromRowSet);\n        });\n    }\n\n    public Future<User> login(String login, String password) {\n        return getConnection(false, (conn) -> {\n            return conn.preparedQuery(\"SELECT salt FROM %s WHERE username = $1\".formatted(tableName())).execute(Tuple.of(login)).compose(rowSet -> {", "            if (!lock.tryLock(30, TimeUnit.SECONDS)) throw new Exception(\"Cannot acquire lock!\");\n            if (instance != null) return Future.succeededFuture();\n            Promise<Void> initPromise = Promise.promise();\n            instance = new UserJDBC(vertx, initPromise);\n            digest = MessageDigest.getInstance(\"MD5\");\n            return initPromise.future().compose(aVoid -> {\n                lock.unlock();\n                return Future.succeededFuture();\n            });\n        } catch (Exception ex) {\n            // No need to worry about lock, because system will shut down on error.\n            return Future.failedFuture(ex);\n        }\n    }\n    // endregion\n\n    protected UserJDBC(Vertx vertx, Promise<Void> initResult) {\n        super(vertx, initResult);\n    }\n\n    @Override\n    protected String tableName() {\n        return \"users\";\n    }\n\n    public Future<User> getById(Long id) {\n        return getConnection(false, (conn) -> {\n            return conn.preparedQuery(\"SELECT * FROM %s WHERE id = $1\".formatted(tableName()))\n                    .execute(Tuple.of(id))\n                    .map(this::fromRowSet);\n        });\n    }\n\n    public Future<User> login(String login, String password) {\n        return getConnection(false, (conn) -> {\n            return conn.preparedQuery(\"SELECT salt FROM %s WHERE username = $1\".formatted(tableName())).execute(Tuple.of(login)).compose(rowSet -> {", "                if(rowSet.rowCount() == 0) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.UNAUTHORIZED.code(), \"Wrong login or password\"));\n                String salt = rowSet.iterator().next().getString(\"salt\");\n                return conn.preparedQuery(\"SELECT * FROM %s WHERE username = $1 AND password = $2\".formatted(tableName()))\n                        .execute(Tuple.of(login, preprocessPassword(salt, password)));\n            }).compose(rowSet -> {\n                if(rowSet.size() == 0) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.UNAUTHORIZED.code(), \"Wrong login or password\"));\n                return Future.succeededFuture(fillObjectList(rowSet));\n            });\n        }).map(list -> list.get(0));\n    }\n\n    public Future<Void> changePassword(Long id, String password, String oldPassword) {\n        return getConnection(true, (conn) -> {\n            return conn.preparedQuery(\"SELECT salt FROM %s WHERE id = $1\".formatted(tableName())).execute(Tuple.of(id)).compose(rowSet -> {", "                if(rowSet.rowCount() == 0) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.UNAUTHORIZED.code(), \"Wrong login or password\"));\n                String salt = rowSet.iterator().next().getString(\"salt\");\n                String newSalt = UUID.randomUUID().toString();\n                return conn.preparedQuery(\"UPDATE %s SET password = $1, salt = $2 WHERE id = $3 AND password = $4\".formatted(tableName()))\n                        .execute(Tuple.of(preprocessPassword(newSalt, password), newSalt, id, preprocessPassword(salt, oldPassword)));\n            }).compose(rowSet -> {\n                if(rowSet.rowCount() == 0) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.BAD_REQUEST.code(), \"Wrong password!\"));\n                else return Future.succeededFuture();\n            });\n        });\n    }\n\n    public Future<User> create(User user) {\n        return getConnection(true, (conn) -> {\n            String salt = UUID.randomUUID().toString();\n            return conn.preparedQuery(\"INSERT INTO %s (username, password, salt, id_security_question, security_answer) VALUES($1, $2, $3, $4, $5) RETURNING *\".formatted(tableName()))\n                    .execute(Tuple.of(user.getUsername(), preprocessPassword(salt, user.getPassword()), salt, user.getIdSecurityQuestion(), user.getSecurityAnswer()))\n                    .map(this::fillObjectList);\n        }).map(list -> list.get(0));\n    }\n\n    private String preprocessPassword(String salt, String password) {\n        byte[] digested = digest.digest((password + salt).getBytes(StandardCharsets.UTF_8));\n        return Hex.encodeHexString(digested);\n    }\n\n    @Override\n    protected User fromRow(Row row) {\n        // Fill only username and id, because other fields are private.\n        return new User()\n                .setId(row.getLong(\"id\"))\n                .setUsername(row.getString(\"username\"));\n    }\n\n    @Override\n    protected String DDL_QUERY() {\n        return \"\"\"\n                CREATE TABLE IF NOT EXISTS %s (\n                    id BIGSERIAL PRIMARY KEY,\n                    username VARCHAR NOT NULL UNIQUE,\n                    password VARCHAR NOT NULL,\n                    salt VARCHAR NOT NULL,\n                    id_security_question integer NOT NULL,\n                    security_answer VARCHAR NOT NULL\n                );\n                \"\"\".formatted(tableName());\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/jdbc/impl/ActivityJDBC.java", "chunked_list": ["package com.skkuse.team1.socialhub.jdbc.impl;\n\nimport com.skkuse.team1.socialhub.jdbc.AbstractJDBC;\nimport com.skkuse.team1.socialhub.model.Activity;\nimport io.vertx.core.Future;\nimport io.vertx.core.Promise;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.sqlclient.Row;\nimport io.vertx.sqlclient.Tuple;", "import io.vertx.sqlclient.Row;\nimport io.vertx.sqlclient.Tuple;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\nimport static io.vertx.core.Promise.promise;\n\npublic class ActivityJDBC extends AbstractJDBC<Activity> {\n\n    // region singleton\n    private static ActivityJDBC instance;\n", "\npublic class ActivityJDBC extends AbstractJDBC<Activity> {\n\n    // region singleton\n    private static ActivityJDBC instance;\n\n    public static ActivityJDBC instance() {\n        return instance;\n    }\n\n    private static final ReentrantLock lock = new ReentrantLock();\n", "    public static Future<Void> init(Vertx vertx) {\n        try {\n            if (!lock.tryLock(30, TimeUnit.SECONDS)) throw new Exception(\"Cannot acquire lock!\");\n            if (instance != null) return Future.succeededFuture();\n            Promise<Void> initPromise = promise();\n            instance = new ActivityJDBC(vertx, initPromise);\n            return initPromise.future().compose(aVoid -> {\n                lock.unlock();\n                return Future.succeededFuture();\n            });\n        } catch (Exception ex) {\n            // No need to worry about lock, because system will shut down on error.\n            return Future.failedFuture(ex);\n        }\n    }\n    // endregion\n\n    protected ActivityJDBC(Vertx vertx, Promise<Void> initResult) {\n        super(vertx, initResult);\n    }\n\n    @Override\n    protected String tableName() {\n        return \"activities\";\n    }\n\n    public Future<List<Activity>> create(List<Activity> activityList) {\n        return getConnection(true, conn -> {\n            return conn.preparedQuery(\"INSERT INTO %s (id_user_create, participant_count, title, description, location, date_time, id_participant_list) VALUES ($1, $2, $3, $4, $5, $6, $7)  RETURNING *\".formatted(tableName()))\n                    .executeBatch(activityList.stream().map(activity -> {\n                        JsonArray idParticipantArray = activity.getIdParticipantList().stream().reduce(new JsonArray(), JsonArray::add, (a, b) -> new JsonArray());\n                        return Tuple.of(activity.getIdUserCreate(), activity.getParticipantCount(), activity.getTitle(), activity.getDescription(), activity.getLocation(), localDateTime(activity.getDateTime()), idParticipantArray);\n                    }).toList()).map(this::fillObjectList);\n        });\n    }\n\n    public Future<Void> update(Activity activity) {\n        return getConnection(true, conn -> {\n            return conn.preparedQuery(\"UPDATE %s SET participant_count = $1, title = $2, description = $3, location = $4, date_time = $5, id_participant_list = $6\".formatted(tableName()))\n                    .execute(Tuple.of(activity.getIdParticipantList().size(), activity.getTitle(), activity.getDescription(), activity.getLocation(), localDateTime(activity.getDateTime()), activity.getIdParticipantList().stream().reduce(new JsonArray(), JsonArray::add, (a, b) -> new JsonArray()).encode()))\n                    .mapEmpty();\n        });\n    }\n\n    public Future<Void> delete(Long id) {\n        return getConnection(true, conn -> {\n            return conn.preparedQuery(\"DELETE FROM %s WHERE id = $1\".formatted(tableName()))\n                    .execute(Tuple.of(id))\n                    .mapEmpty();\n        });\n    }\n\n    public Future<List<Activity>> get(Long idUser) {\n        return getConnection(false, conn -> {\n            return conn.preparedQuery(\"SELECT * FROM %s WHERE id_participant_list @> $1 OR id_user_create = $2\".formatted(tableName()))\n                    .execute(Tuple.of(idUser, idUser))\n                    .map(this::fillObjectList);\n        });\n    }\n\n    public Future<Activity> getById(Long id) {\n        return getConnection(false, conn -> {\n            return conn.preparedQuery(\"SELECT * FROM %s WHERE id = $1\".formatted(tableName()))\n                    .execute(Tuple.of(id))\n                    .map(this::fromRowSet);\n        });\n    }\n\n    @Override\n    protected Activity fromRow(Row row) {\n        Activity activity = new Activity(\n                row.getLong(\"id_user_create\"),\n                row.getInteger(\"participant_count\"),\n                row.getString(\"title\"),\n                row.getString(\"description\"),\n                localDateTime(row.getLong(\"date_time\")),\n                row.getString(\"location\")\n        ).setId(row.getLong(\"id\"));\n        activity.getIdParticipantList().addAll(row.getJsonArray(\"id_participant_list\").stream().map(o -> Long.valueOf(o.toString())).toList());\n        return activity;\n    }\n\n    @Override\n    protected String DDL_QUERY() {\n        return \"\"\"\n                CREATE TABLE IF NOT EXISTS %s (\n                    id BIGSERIAL PRIMARY KEY,\n                    id_user_create BIGINT NOT NULL REFERENCES users (id),\n                    participant_count INT,\n                    title VARCHAR NOT NULL,\n                    description VARCHAR NOT NULL,\n                    location VARCHAR NOT NULL,\n                    date_time BIGINT NOT NULL,\n                    id_participant_list jsonb NOT NULL DEFAULT '[]'\n                );\n                \"\"\".formatted(tableName());\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/model/User.java", "chunked_list": ["package com.skkuse.team1.socialhub.model;\n\npublic class User {\n    private Long id;\n    private String username;\n    private String password;\n    private Integer idSecurityQuestion;\n    private String securityAnswer;\n\n    public User() {}\n\n    public User(String username, String password, Integer idSecurityQuestion, String securityAnswer) {\n        this.username = username;\n        this.password = password;\n        this.idSecurityQuestion = idSecurityQuestion;\n        this.securityAnswer = securityAnswer;\n    }\n", "    public Long getId() {\n        return id;\n    }\n\n    public User setId(Long id) {\n        this.id = id;\n        return this;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n", "    public String getUsername() {\n        return username;\n    }\n\n    public User setUsername(String username) {\n        this.username = username;\n        return this;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public User setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public Integer getIdSecurityQuestion() {\n        return idSecurityQuestion;\n    }\n", "    public Integer getIdSecurityQuestion() {\n        return idSecurityQuestion;\n    }\n\n    public User setIdSecurityQuestion(Integer idSecurityQuestion) {\n        this.idSecurityQuestion = idSecurityQuestion;\n        return this;\n    }\n\n    public String getSecurityAnswer() {\n        return securityAnswer;\n    }\n", "    public String getSecurityAnswer() {\n        return securityAnswer;\n    }\n\n    public User setSecurityAnswer(String securityAnswer) {\n        this.securityAnswer = securityAnswer;\n        return this;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/model/Activity.java", "chunked_list": ["package com.skkuse.team1.socialhub.model;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Activity {\n    private Long id;\n    private Long idUserCreate;\n    private Integer participantCount;\n    private String title;\n    private String description;\n    private LocalDateTime dateTime;\n    private String location;\n    private List<Long> idParticipantList = new ArrayList<>();\n\n    // \u041f\u0443\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 json\n    private Activity() {}\n\n    public Activity(Long idUserCreate, Integer participantCount, String title, String description, LocalDateTime dateTime, String location) {\n        this.idUserCreate = idUserCreate;\n        this.participantCount = participantCount;\n        this.title = title;\n        this.description = description;\n        this.dateTime = dateTime;\n        this.location = location;\n    }\n", "    public Long getId() {\n        return id;\n    }\n\n    public Activity setId(Long id) {\n        this.id = id;\n        return this;\n    }\n\n    public Long getIdUserCreate() {\n        return idUserCreate;\n    }\n", "    public Long getIdUserCreate() {\n        return idUserCreate;\n    }\n\n    public Activity setIdUserCreate(Long idUserCreate) {\n        this.idUserCreate = idUserCreate;\n        return this;\n    }\n\n    public Integer getParticipantCount() {\n        return participantCount;\n    }\n", "    public Integer getParticipantCount() {\n        return participantCount;\n    }\n\n    public Activity setParticipantCount(Integer participantCount) {\n        this.participantCount = participantCount;\n        return this;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n", "    public String getTitle() {\n        return title;\n    }\n\n    public Activity setTitle(String title) {\n        this.title = title;\n        return this;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n", "    public String getDescription() {\n        return description;\n    }\n\n    public Activity setDescription(String description) {\n        this.description = description;\n        return this;\n    }\n\n    public LocalDateTime getDateTime() {\n        return dateTime;\n    }\n", "    public LocalDateTime getDateTime() {\n        return dateTime;\n    }\n\n    public Activity setDateTime(LocalDateTime dateTime) {\n        this.dateTime = dateTime;\n        return this;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n", "    public String getLocation() {\n        return location;\n    }\n\n    public Activity setLocation(String location) {\n        this.location = location;\n        return this;\n    }\n\n    public List<Long> getIdParticipantList() {\n        return idParticipantList;\n    }\n", "    public Activity setIdParticipantList(List<Long> idParticipantList) {\n        this.idParticipantList = idParticipantList;\n        return this;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/routes/UsersRoutes.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes;\n\nimport com.skkuse.team1.socialhub.jdbc.impl.UserJDBC;\nimport com.skkuse.team1.socialhub.requests.RequestChangePassword;\nimport com.skkuse.team1.socialhub.requests.RequestLogin;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRoute;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouteType;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouter;\nimport io.vertx.core.Future;\nimport io.vertx.core.Vertx;", "import io.vertx.core.Future;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.http.HttpHeaders;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.auth.PubSecKeyOptions;\nimport io.vertx.ext.auth.jwt.JWTAuth;\nimport io.vertx.ext.auth.jwt.JWTAuthOptions;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.openapi.RouterBuilder;", "import io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.openapi.RouterBuilder;\n\n@APIRouter(baseURL = \"users/\")\npublic class UsersRoutes {\n    static JWTAuth auth;\n    @APIRoute(type = APIRouteType.PUBLIC)\n    public static Future<Router> buildRoutes(Vertx vertx){\n        auth = JWTAuth.create(vertx, new JWTAuthOptions().addPubSecKey(new PubSecKeyOptions()\n                .setAlgorithm(\"HS256\")\n                .setBuffer(\"temporary secret\")));\n        return RouterBuilder.create(vertx, \"apis/users.yaml\").map(rb -> {\n            rb.operation(\"login\").handler(UsersRoutes::apiLogin);\n            return rb.createRouter();\n        });\n    }\n\n    @APIRoute(type = APIRouteType.PROTECTED)", "    public static Future<Router> buildProtected(Vertx vertx) {\n        return RouterBuilder.create(vertx, \"apis/users.yaml\").map(rb -> {\n            rb.operation(\"changePassword\").handler(UsersRoutes::apiChangePassword);\n            rb.operation(\"get\").handler(UsersRoutes::apiCurrentInfo);\n            return rb.createRouter();\n        });\n    }\n\n    private static void apiLogin(RoutingContext ctx) {\n        RequestLogin request = ctx.body().asPojo(RequestLogin.class);\n        UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {", "            if(ar.succeeded()) {\n                // https://www.rfc-editor.org/rfc/rfc6749#section-5.1\n                ctx.response()\n                        .putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\")\n                        .end(new JsonObject()\n                                .put(\"access_token\", auth.generateToken(new JsonObject().put(\"sub\", ar.result().getId())))\n                                .put(\"token_type\", \"Bearer\")\n                                .encode());\n            }else{\n                ctx.fail(ar.cause());\n            }\n        });\n    }\n\n    private static void apiChangePassword(RoutingContext ctx) {\n        RequestChangePassword request = ctx.body().asPojo(RequestChangePassword.class);\n        UserJDBC.instance().changePassword(ctx.user().principal().getLong(\"sub\"), request.getPassword(), request.getOldPassword())\n                .onFailure(ctx::fail)\n                .onSuccess(aVoid -> ctx.response().end());\n    }\n\n    private static void apiCurrentInfo(RoutingContext ctx) {\n        UserJDBC.instance().getById(ctx.user().principal().getLong(\"sub\")).onFailure(ctx::fail).onSuccess(user -> {\n            ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\").end(JsonObject.mapFrom(user).encode());\n        });\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/routes/ActivityRoutes.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes;\n\nimport com.skkuse.team1.socialhub.ExceptionWithHttpCode;\nimport com.skkuse.team1.socialhub.jdbc.impl.ActivityJDBC;\nimport com.skkuse.team1.socialhub.model.Activity;\nimport com.skkuse.team1.socialhub.requests.RequestActivityCommit;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRoute;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouteType;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouter;\nimport io.netty.handler.codec.http.HttpResponseStatus;", "import com.skkuse.team1.socialhub.routes.annotations.APIRouter;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.vertx.core.Future;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.http.HttpHeaders;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.openapi.RouterBuilder;", "import io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.openapi.RouterBuilder;\n\nimport java.util.List;\n\n@APIRouter(baseURL = \"activities/\")\npublic class ActivityRoutes {\n\n    @APIRoute(type = APIRouteType.PROTECTED)\n    public static Future<Router> buildProtected(Vertx vertx){\n        return RouterBuilder.create(vertx, \"apis/activities.yaml\").map(rb -> {\n            rb.operation(\"commit\").handler(ActivityRoutes::apiCommit);\n            rb.operation(\"get\").handler(ActivityRoutes::apiGet);\n            rb.operation(\"update\").handler(ActivityRoutes::apiUpdate);\n            rb.operation(\"delete\").handler(ActivityRoutes::apiDelete);\n            return rb.createRouter();\n        });\n    }\n\n    private static void apiCommit(RoutingContext ctx) {\n        RequestActivityCommit request = ctx.body().asJsonObject().mapTo(RequestActivityCommit.class);\n        ActivityJDBC.instance().create(List.of(request.formActivity(ctx.user()))).onComplete(ar -> {", "    public static Future<Router> buildProtected(Vertx vertx){\n        return RouterBuilder.create(vertx, \"apis/activities.yaml\").map(rb -> {\n            rb.operation(\"commit\").handler(ActivityRoutes::apiCommit);\n            rb.operation(\"get\").handler(ActivityRoutes::apiGet);\n            rb.operation(\"update\").handler(ActivityRoutes::apiUpdate);\n            rb.operation(\"delete\").handler(ActivityRoutes::apiDelete);\n            return rb.createRouter();\n        });\n    }\n\n    private static void apiCommit(RoutingContext ctx) {\n        RequestActivityCommit request = ctx.body().asJsonObject().mapTo(RequestActivityCommit.class);\n        ActivityJDBC.instance().create(List.of(request.formActivity(ctx.user()))).onComplete(ar -> {", "            if(ar.failed()) ctx.fail(ar.cause());\n            JsonArray array = new JsonArray();\n            ar.result().stream().map(JsonObject::mapFrom).forEach(array::add);\n            ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\").end(array.encode());\n        });\n    }\n\n    private static void apiGet(RoutingContext ctx) {\n        ActivityJDBC.instance().get(ctx.user().principal().getLong(\"sub\")).onComplete(ar -> {\n            if(ar.failed()) ctx.fail(ar.cause());\n            JsonArray array = new JsonArray();\n            ar.result().stream().map(JsonObject::mapFrom).forEach(array::add);\n            ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\").end(array.encode());\n        });\n    }\n\n    private static void apiUpdate(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().getById(id).compose(found -> {", "            if(ar.failed()) ctx.fail(ar.cause());\n            JsonArray array = new JsonArray();\n            ar.result().stream().map(JsonObject::mapFrom).forEach(array::add);\n            ctx.response().putHeader(HttpHeaders.CONTENT_TYPE.toString(), \"application/json;charset=utf-8\").end(array.encode());\n        });\n    }\n\n    private static void apiUpdate(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().getById(id).compose(found -> {\n            if(found == null || found.getIdUserCreate() != ctx.user().principal().getLong(\"sub\").longValue()) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.FORBIDDEN.code(), \"Only owner can update activity\"));\n            return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n    }\n\n    private static void apiDelete(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().getById(id).compose(found -> {", "            if(found == null || found.getIdUserCreate() != ctx.user().principal().getLong(\"sub\").longValue()) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.FORBIDDEN.code(), \"Only owner can update activity\"));\n            return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n    }\n\n    private static void apiDelete(RoutingContext ctx) {\n        Long id = Long.valueOf(ctx.request().getParam(\"id\"));\n        ActivityJDBC.instance().getById(id).compose(found -> {\n            if(found == null || found.getIdUserCreate() != ctx.user().principal().getLong(\"sub\").longValue()) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.FORBIDDEN.code(), \"Only owner can update activity\"));\n            return ActivityJDBC.instance().delete(id);\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n    }\n}\n", "            if(found == null || found.getIdUserCreate() != ctx.user().principal().getLong(\"sub\").longValue()) return Future.failedFuture(new ExceptionWithHttpCode(HttpResponseStatus.FORBIDDEN.code(), \"Only owner can update activity\"));\n            return ActivityJDBC.instance().delete(id);\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/routes/TestRoutes.java", "chunked_list": ["package com.skkuse.team1.socialhub.routes;\n\nimport com.skkuse.team1.socialhub.routes.annotations.APIRoute;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouteType;\nimport com.skkuse.team1.socialhub.routes.annotations.APIRouter;\nimport io.vertx.core.Future;\nimport io.vertx.core.Vertx;\nimport io.vertx.ext.web.Router;\n\n@APIRouter(baseURL = \"test/\")\npublic class TestRoutes {\n    @APIRoute(type = APIRouteType.PUBLIC)", "\n@APIRouter(baseURL = \"test/\")\npublic class TestRoutes {\n    @APIRoute(type = APIRouteType.PUBLIC)\n    public static Future<Router> buildTestRoutes(Vertx vertx){\n        Router router = Router.router(vertx);\n\n        // Setting up \"test/user\" GET handler:\n        router.get(\"/user\").handler((ctx) -> {\n            System.out.println(\"Test! USER: \" + ctx.request().absoluteURI());\n            // Respond with \"HTML END\" text.\n            ctx.response().end(\"HTML END\");\n        });\n\n        // Setting up \"test/post\" POST handler:\n        router.post(\"/post\").handler((ctx) -> {\n            // Print out the body of the request:\n            System.out.println(ctx.body().asString());\n            ctx.response().end();\n        });\n\n        // Return our router as Future:\n        return Future.succeededFuture(router);\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/requests/RequestChangePassword.java", "chunked_list": ["package com.skkuse.team1.socialhub.requests;\n\nimport java.io.Serializable;\n\npublic class RequestChangePassword implements Serializable {\n    private String password;\n    private String oldPassword;\n\n    public RequestChangePassword(){}\n\n    public RequestChangePassword(String password, String oldPassword) {\n        this.password = password;\n        this.oldPassword = oldPassword;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public RequestChangePassword setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n\n    public String getOldPassword() {\n        return oldPassword;\n    }\n", "    public String getOldPassword() {\n        return oldPassword;\n    }\n\n    public RequestChangePassword setOldPassword(String oldPassword) {\n        this.oldPassword = oldPassword;\n        return this;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/requests/RequestLogin.java", "chunked_list": ["package com.skkuse.team1.socialhub.requests;\n\nimport java.io.Serializable;\n\npublic class RequestLogin implements Serializable {\n    private String login;\n    private String password;\n\n    private RequestLogin() {}\n    public RequestLogin(String login, String password) {\n        this.login = login;\n        this.password = password;\n    }\n", "    public String getLogin() {\n        return login;\n    }\n\n    public RequestLogin setLogin(String login) {\n        this.login = login;\n        return this;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public RequestLogin setPassword(String password) {\n        this.password = password;\n        return this;\n    }\n}\n"]}
{"filename": "backend/src/main/java/com/skkuse/team1/socialhub/requests/RequestActivityCommit.java", "chunked_list": ["package com.skkuse.team1.socialhub.requests;\n\nimport com.skkuse.team1.socialhub.model.Activity;\nimport io.vertx.ext.auth.User;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\n\npublic class RequestActivityCommit implements Serializable {\n    private String title;\n    private String description;\n    private String location;\n    private LocalDateTime dateTime;\n    private List<Long> idParticipantList = new ArrayList<>();\n\n    public RequestActivityCommit() {}\n\n    public RequestActivityCommit(String title, String description, String location, LocalDateTime dateTime, Long... idParticipant) {\n        this(title, description, location, dateTime, Arrays.stream(idParticipant).toList());\n    }\n\n    public RequestActivityCommit(String title, String description, String location, LocalDateTime dateTime, List<Long> idParticipantList) {\n        this.title = title;\n        this.description = description;\n        this.location = location;\n        this.idParticipantList = idParticipantList;\n        this.dateTime = dateTime;\n    }\n", "    public String getTitle() {\n        return title;\n    }\n\n    public RequestActivityCommit setTitle(String title) {\n        this.title = title;\n        return this;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n", "    public String getDescription() {\n        return description;\n    }\n\n    public RequestActivityCommit setDescription(String description) {\n        this.description = description;\n        return this;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n", "    public String getLocation() {\n        return location;\n    }\n\n    public RequestActivityCommit setLocation(String location) {\n        this.location = location;\n        return this;\n    }\n\n    public List<Long> getIdParticipantList() {\n        return idParticipantList;\n    }\n", "    public RequestActivityCommit setIdParticipantList(List<Long> idParticipantList) {\n        this.idParticipantList = idParticipantList;\n        return this;\n    }\n\n    public LocalDateTime getDateTime() {\n        return dateTime;\n    }\n\n    public RequestActivityCommit setDateTime(LocalDateTime dateTime) {\n        this.dateTime = dateTime;\n        return this;\n    }\n", "    public RequestActivityCommit setDateTime(LocalDateTime dateTime) {\n        this.dateTime = dateTime;\n        return this;\n    }\n\n    public Activity formActivity(User user) {\n        return new Activity(\n                user.principal().getLong(\"sub\"),\n                idParticipantList.size(),\n                title,\n                description,\n                dateTime,\n                location\n        ).setIdParticipantList(this.idParticipantList);\n    }\n}\n"]}
