{"filename": "src/test/java/ru/jbimer/core/controllers/HomeControllerTest.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport ru.jbimer.core.models.Collision;", "import org.springframework.test.web.servlet.MockMvc;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.ProjectService;\n\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@RunWith(SpringRunner.class)\n@WebMvcTest(HomeController.class)\npublic class HomeControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private EngineersService engineersService;\n\n    @MockBean\n    private CollisionsService collisionsService;\n\n    @MockBean\n    private ProjectService projectService;\n}"]}
{"filename": "src/test/java/ru/jbimer/core/controllers/CollisionsControllerTest.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;", "import org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.web.multipart.MultipartFile;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;", "import ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.HtmlReportService;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.junit.jupiter.api.Assertions.*;", "import static org.hamcrest.Matchers.hasSize;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringRunner.class)\n@WebMvcTest(CollisionsController.class)\npublic class CollisionsControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private CollisionsService collisionsService;\n\n    @MockBean\n    private EngineersService engineersService;\n\n    @MockBean\n    private HtmlReportService htmlReportService;\n\n    @Test", "@WebMvcTest(CollisionsController.class)\npublic class CollisionsControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private CollisionsService collisionsService;\n\n    @MockBean\n    private EngineersService engineersService;\n\n    @MockBean\n    private HtmlReportService htmlReportService;\n\n    @Test", "    public void testIndex() throws Exception {\n        int projectId = 1;\n        List<Collision> collisions = new ArrayList<>();\n        collisions.add(new Collision());\n        Page<Collision> collisionPage = new PageImpl<>(collisions);\n        when(collisionsService.findAllWithPagination(projectId, PageRequest.of(0, 10, Sort.by(\"id\"))))\n                .thenReturn(collisionPage);\n        mockMvc.perform(get(\"/projects/\" + projectId + \"/collisions\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"collisions/index\"))\n                .andExpect(model().attribute(\"collisions\", hasSize(1)))\n                .andExpect(model().attribute(\"currentPage\", equalTo(1)))\n                .andExpect(model().attribute(\"totalItems\", equalTo(1L)))\n                .andExpect(model().attribute(\"totalPages\", equalTo(1)))\n                .andExpect(model().attribute(\"pageSize\", equalTo(10)))\n                .andExpect(model().attribute(\"project_id\", equalTo(projectId)));\n    }\n\n    @Test\n    void testShow() throws Exception {\n        Collision collision = new Collision();\n        when(collisionsService.findOneAndEngineer(1)).thenReturn(collision);\n\n        mockMvc.perform(get(\"/projects/1/collisions/1\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"collisions/show\"))\n                .andExpect(model().attribute(\"collision\", equalTo(collision)))\n                .andExpect(model().attribute(\"comments\", equalTo(collision.getComments())))\n                .andExpect(model().attributeExists(\"role\"));\n    }\n\n    @Test\n    void testUploadCollisionsReportPage() throws Exception {\n        mockMvc.perform(get(\"/projects/1/collisions/upload\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"collisions/upload\"));\n    }\n\n\n\n    @Test\n    void testDelete() throws Exception {\n        mockMvc.perform(delete(\"/projects/1/collisions/1\"))\n                .andExpect(status().is3xxRedirection())\n                .andExpect(redirectedUrl(\"/collisions\"));\n    }\n\n    @Test\n    void testRelease() throws Exception {\n        mockMvc.perform(patch(\"/projects/1/collisions/1/release\"))\n                .andExpect(status().is3xxRedirection())\n                .andExpect(redirectedUrl(\"/collisions/1\"));\n    }\n\n\n    @Test\n    void testMarkAsFake() throws Exception {\n        mockMvc.perform(get(\"/projects/1/collisions/1/fake\"))\n                .andExpect(status().is3xxRedirection())\n                .andExpect(redirectedUrl(\"/collisions/1\"));\n    }\n\n    @Test\n    void testMarkAsNotFake() throws Exception {\n        mockMvc.perform(get(\"/projects/1/collisions/1/not-fake\"))\n                .andExpect(status().is3xxRedirection())\n                .andExpect(redirectedUrl(\"/collisions/1\"));\n    }\n}"]}
{"filename": "src/test/java/ru/jbimer/core/controllers/ProjectControllerTest.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport ru.jbimer.core.models.Engineer;", "import org.springframework.validation.BindingResult;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.ProjectService;\n\nimport java.util.Arrays;\nimport java.util.List;\n", "import java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ProjectControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean", "\n    @MockBean\n    private EngineersService engineersService;\n\n    @MockBean\n    private CollisionsService collisionsService;\n\n    @MockBean\n    private ProjectService projectService;\n", "    private ProjectService projectService;\n\n    @MockBean\n    private ProjectController projectController;\n\n\n    @Test\n    public void testIndex() {\n        Model model = Mockito.mock(Model.class);\n        List<Project> projects = Arrays.asList(new Project(), new Project(), new Project());\n        Mockito.when(projectService.findAll()).thenReturn(projects);\n\n        String viewName = projectController.index(model);\n\n        assertEquals(\"projects/index\", viewName);\n        Mockito.verify(model).addAttribute(\"projects\", projects);\n    }\n\n    @Test", "    public void testShow() {\n        Model model = Mockito.mock(Model.class);\n        Project project = new Project();\n        List<Engineer> engineers = Arrays.asList(new Engineer(), new Engineer(), new Engineer());\n        project.setEngineersOnProject(engineers);\n        int projectId = 1;\n        Mockito.when(projectService.findOne(projectId)).thenReturn(project);\n\n        String viewName = projectController.show(projectId, model);\n\n        assertEquals(\"projects/show\", viewName);\n        Mockito.verify(model).addAttribute(\"project\", project);\n        Mockito.verify(model).addAttribute(\"engineers\", engineers);\n    }\n\n    @Test", "    public void testNewProject() {\n        Model model = Mockito.mock(Model.class);\n        Project project = new Project();\n        List<Engineer> engineers = Arrays.asList(new Engineer(), new Engineer(), new Engineer());\n        Mockito.when(engineersService.findAll()).thenReturn(engineers);\n\n        String viewName = projectController.newProject(model, project);\n\n        assertEquals(\"projects/new\", viewName);\n        Mockito.verify(model).addAttribute(\"project\", project);\n        Mockito.verify(model).addAttribute(\"engineers\", engineers);\n    }\n\n\n    @Test", "    public void testEdit() {\n        Model model = Mockito.mock(Model.class);\n        Project project = new Project();\n        List<Engineer> engineers = Arrays.asList(new Engineer(), new Engineer(), new Engineer());\n        int projectId = 1;\n        Mockito.when(projectService.findOne(projectId)).thenReturn(project);\n        Mockito.when(engineersService.findAll()).thenReturn(engineers);\n\n        String viewName = projectController.edit(model, projectId);\n\n        assertEquals(\"projects/edit\", viewName);\n        Mockito.verify(model).addAttribute(\"project\", project);\n        Mockito.verify(model).addAttribute(\"engineers\", engineers);\n    }\n\n    @Test", "    public void testUpdate() {\n        Project project = new Project();\n        BindingResult bindingResult = Mockito.mock(BindingResult.class);\n        int projectId = 1;\n        Mockito.when(bindingResult.hasErrors()).thenReturn(false);\n\n        String viewName = projectController.update(project, bindingResult, projectId);\n\n        assertEquals(\"redirect:/projects/\" + projectId, viewName);\n        Mockito.verify(projectService).save(project);\n    }\n}"]}
{"filename": "src/test/java/ru/jbimer/core/controllers/EngineersControllerTest.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.ui.ExtendedModelMap;\nimport org.springframework.ui.Model;", "import org.springframework.ui.ExtendedModelMap;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.HtmlReportService;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass EngineersControllerTest {", "\nclass EngineersControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private CollisionsService collisionsService;\n\n    @MockBean", "\n    @MockBean\n    private EngineersService engineersService;\n\n    @MockBean\n    private HtmlReportService htmlReportService;\n\n    @MockBean\n    private EngineersController engineersController;\n", "    private EngineersController engineersController;\n\n    @Test\n    public void testIndex() throws Exception {\n        List<Engineer> engineers = new ArrayList<>();\n        engineers.add(new Engineer());\n        when(engineersService.findAllSortedByCollisionsSize()).thenReturn(engineers);\n        Model model = new ExtendedModelMap();\n\n        String viewName = engineersController.index(model);\n\n        assertEquals(\"engineers/index\", viewName);\n        assertTrue(model.containsAttribute(\"engineers\"));\n        assertSame(engineers, model.getAttribute(\"engineers\"));\n        verify(engineersService).findAllSortedByCollisionsSize();\n    }\n\n    @Test", "    public void testShow() throws Exception {\n        int id = 1;\n        Engineer engineer = new Engineer();\n        Set<Collision> collisions = new HashSet<>();\n        engineer.setCollisions((List<Collision>) collisions);\n        when(engineersService.findByIdFetchCollisions(id)).thenReturn(engineer);\n        Model model = new ExtendedModelMap();\n\n        String viewName = engineersController.show(id, model);\n\n        assertEquals(\"engineers/show\", viewName);\n        assertTrue(model.containsAttribute(\"engineer\"));\n        assertSame(engineer, model.getAttribute(\"engineer\"));\n        assertTrue(model.containsAttribute(\"collisions\"));\n        assertSame(collisions, model.getAttribute(\"collisions\"));\n        verify(engineersService).findByIdFetchCollisions(id);\n    }\n\n    @Test", "    public void testEdit() throws Exception {\n        int id = 1;\n        Engineer engineer = new Engineer();\n        when(engineersService.findOne(id)).thenReturn(engineer);\n        Model model = new ExtendedModelMap();\n\n        String viewName = engineersController.edit(model, id);\n\n        assertEquals(\"engineers/edit\", viewName);\n        assertTrue(model.containsAttribute(\"engineer\"));\n        assertSame(engineer, model.getAttribute(\"engineer\"));\n        verify(engineersService).findOne(id);\n    }\n\n    @Test", "    public void testUpdate() throws Exception {\n        int id = 1;\n        Engineer updatedEngineer = new Engineer();\n        updatedEngineer.setId(id);\n        BindingResult bindingResult = mock(BindingResult.class);\n        when(bindingResult.hasErrors()).thenReturn(false);\n        Engineer originalEngineer = mock(Engineer.class);\n        when(engineersService.findOne(id)).thenReturn(originalEngineer);\n\n        String viewName = engineersController.update(updatedEngineer, bindingResult, id);\n\n        assertEquals(\"redirect:/engineers\", viewName);\n        verify(engineersService).update(id, updatedEngineer, originalEngineer);\n    }\n\n    @Test", "    public void testDelete() throws Exception {\n        int id = 1;\n        Authentication authentication = mock(Authentication.class);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        String viewName = engineersController.delete(id);\n\n        assertEquals(\"redirect:/logout\", viewName);\n        verify(engineersService).delete(id);\n        verify(authentication).isAuthenticated();\n        verify(authentication).setAuthenticated(false);\n    }\n\n}"]}
{"filename": "src/main/java/ru/jbimer/core/JBimerApplication.java", "chunked_list": ["package ru.jbimer.core;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class JBimerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(JBimerApplication.class, args);\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/dao/EngineerDAO.java", "chunked_list": ["package ru.jbimer.core.dao;\n\nimport jakarta.persistence.EntityManager;\nimport org.hibernate.Session;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.models.Engineer;\n\nimport java.util.HashSet;", "\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n@Component\npublic class EngineerDAO {\n\n    private final EntityManager entityManager;\n\n    @Autowired\n    public EngineerDAO(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    @Transactional(readOnly = true)\n    public Set<Engineer> index() {\n        Session session = entityManager.unwrap(Session.class);\n\n        return new HashSet<Engineer>(session.createQuery(\"select e from Engineer e \" +\n                        \"left join fetch e.collisions \")\n                .getResultList());\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/dao/CollisionDAO.java", "chunked_list": ["package ru.jbimer.core.dao;\n\nimport jakarta.persistence.EntityManager;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport ru.jbimer.core.models.Collision;\n\nimport java.util.Date;\nimport java.util.List;\n", "import java.util.List;\n\n\n@Component\npublic class CollisionDAO {\n\n    private final EntityManager entityManager;\n\n    @Autowired\n    public CollisionDAO(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n", "    public void saveAll(List<Collision> collisions) {\n        entityManager.getTransaction().begin();\n        System.out.println(\"here1\");\n        for (Collision collision :\n                collisions) {\n            System.out.println(\"here2\");\n            Collision existingCollision =\n                    (Collision) entityManager\n                            .createQuery(\"select c from Collision c \" +\n                                    \"where c.elementId1 = :elemId1 and c.elementId2 = :elemId2 or \" +\n                                    \"c.elementId1 = :elemId2 and c.elementId2 = :elemId1\")\n                            .setParameter(\"elemId1\", collision.getElementId1())\n                            .setParameter(\"elemId2\", collision.getElementId2())\n                            .getSingleResult();\n            System.out.println(\"collision is \" + existingCollision);\n", "            if (existingCollision != null) {\n                existingCollision.setCreatedAt(new Date());\n                entityManager.merge(existingCollision);\n            } else {\n                entityManager.persist(collision);\n            }\n        }\n        entityManager.getTransaction().commit();\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/security/EngineerDetails.java", "chunked_list": ["package ru.jbimer.core.security;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport ru.jbimer.core.models.Engineer;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\npublic class EngineerDetails implements UserDetails {\n\n    private final Engineer engineer;\n\n    public EngineerDetails(Engineer engineer) {\n        this.engineer = engineer;\n    }\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return Collections.singletonList(new SimpleGrantedAuthority(engineer.getRole()));\n    }\n\n    @Override", "import java.util.Collections;\n\npublic class EngineerDetails implements UserDetails {\n\n    private final Engineer engineer;\n\n    public EngineerDetails(Engineer engineer) {\n        this.engineer = engineer;\n    }\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return Collections.singletonList(new SimpleGrantedAuthority(engineer.getRole()));\n    }\n\n    @Override", "    public String getPassword() {\n        return this.engineer.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return this.engineer.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override", "    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override", "    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true ;\n    }\n\n    // to get data of authenticated user\n    public Engineer getEngineer() {\n        return this.engineer;\n    }\n}\n", "    public Engineer getEngineer() {\n        return this.engineer;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/config/SecurityConfig.java", "chunked_list": ["package ru.jbimer.core.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;", "import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.util.matcher.RegexRequestMatcher;\nimport ru.jbimer.core.services.EngineerDetailsService;\n", "import ru.jbimer.core.services.EngineerDetailsService;\n\n@Configuration\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    private final EngineerDetailsService engineerDetailsService;\n\n    @Autowired\n    public SecurityConfig(EngineerDetailsService engineerDetailsService) {\n        this.engineerDetailsService = engineerDetailsService;\n    }\n\n    @Bean", "    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests((requests) -> requests\n                        .requestMatchers(\"/admin\").hasRole(\"ADMIN\")\n                        .requestMatchers(\"/auth/registration\", \"/auth/login\").permitAll()\n                        .anyRequest().hasAnyRole(\"USER\", \"ADMIN\")\n                )\n                .formLogin((form) -> form\n                        .loginPage(\"/auth/login\")\n                        .loginProcessingUrl(\"/process_login\")\n                        .defaultSuccessUrl(\"/\", true)\n                        .failureUrl(\"/auth/login?error\")\n                        .permitAll()\n                )\n                .logout((logout) -> logout\n                        .logoutUrl(\"/logout\")\n                        .logoutSuccessUrl(\"/auth/login\")\n                        .permitAll());\n\n        return http.build();\n    }\n\n    @Bean", "    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\n                .userDetailsService(engineerDetailsService)\n                .passwordEncoder(getPasswordEncoder())\n                .and().build();\n    }\n\n    @Bean\n    public PasswordEncoder getPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n", "    public PasswordEncoder getPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/util/AdminUserInitializer.java", "chunked_list": ["package ru.jbimer.core.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.EngineerDetailsService;\nimport ru.jbimer.core.services.EngineersService;", "import ru.jbimer.core.services.EngineerDetailsService;\nimport ru.jbimer.core.services.EngineersService;\n\nimport java.util.Optional;\n\n@Component\npublic class AdminUserInitializer implements ApplicationRunner {\n\n    @Autowired\n    private EngineersService engineersService;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override", "    public void run(ApplicationArguments args) throws Exception {\n        Optional<Engineer> existingAdmin = engineersService.findByUsername(\"admin\");\n        if (existingAdmin.isPresent()) return;\n        Engineer admin = new Engineer();\n        admin.setUsername(\"admin\");\n        admin.setFirstName(\"Admin\");\n        admin.setLastName(\"Admin\");\n        admin.setDiscipline(\"GIP\");\n        admin.setEmail(\"admin@gmail.com\");\n        admin.setTelegramUsername(\"admin\");\n        admin.setPassword(passwordEncoder.encode(\"admin\"));\n        admin.setRole(\"ROLE_ADMIN\");\n        engineersService.save(admin);\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/util/EngineerValidator.java", "chunked_list": ["package ru.jbimer.core.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.Validator;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.EngineersService;\n\n@Component\npublic class EngineerValidator implements Validator {\n\n    private final EngineersService engineersService;\n\n    @Autowired\n    public EngineerValidator(EngineersService engineersService) {\n        this.engineersService = engineersService;\n    }\n\n    @Override", "\n@Component\npublic class EngineerValidator implements Validator {\n\n    private final EngineersService engineersService;\n\n    @Autowired\n    public EngineerValidator(EngineersService engineersService) {\n        this.engineersService = engineersService;\n    }\n\n    @Override", "    public boolean supports(Class<?> clazz) {\n        return Engineer.class.equals(clazz);\n    }\n\n    @Override\n    public void validate(Object target, Errors errors) {\n        Engineer engineer = (Engineer) target;\n\n//        if (engineer.getFirstName().isEmpty()) errors.rejectValue(\"firstName\", \"\", \"Field is empty\");\n//        if (engineer.getLastName().isEmpty()) errors.rejectValue(\"lastName\", \"\", \"Field is empty\");\n//        if (engineer.getDiscipline().isEmpty()) errors.rejectValue(\"discipline\", \"\", \"Field is empty\");", "//        if (engineer.getFirstName().isEmpty()) errors.rejectValue(\"firstName\", \"\", \"Field is empty\");\n//        if (engineer.getLastName().isEmpty()) errors.rejectValue(\"lastName\", \"\", \"Field is empty\");\n//        if (engineer.getDiscipline().isEmpty()) errors.rejectValue(\"discipline\", \"\", \"Field is empty\");\n//        if (engineer.getTelegramUsername().isEmpty()) errors.rejectValue(\"telegramUsername\", \"\", \"Field is empty\");\n//        if (engineer.getEmail().isEmpty()) errors.rejectValue(\"email\", \"\", \"Field is empty\");\n\n        if (engineersService.findByUsername(engineer.getUsername()).isPresent()) {\n            errors.rejectValue(\"username\", \"\", \"This username is already taken\");\n        }\n        if (engineersService.findByTelegramUsername(engineer.getTelegramUsername()).isPresent())\n            errors.rejectValue(\"telegramUsername\", \"\", \"Engineer with this telegram username is already exist\");", "        if (engineersService.findByTelegramUsername(engineer.getTelegramUsername()).isPresent())\n            errors.rejectValue(\"telegramUsername\", \"\", \"Engineer with this telegram username is already exist\");\n        if (engineersService.findByEmail(engineer.getEmail()).isPresent())\n            errors.rejectValue(\"email\", \"\", \"Engineer with this email is already exist\");\n\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/util/HtmlReportUtil.java", "chunked_list": ["package ru.jbimer.core.util;\n\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\nimport org.springframework.stereotype.Component;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Project;\n\nimport java.util.ArrayList;\nimport java.util.Date;", "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Component\npublic class HtmlReportUtil {\n\n    private static final String REGEX_DISCIPLINES = \"^(\\\\p{L}+)-(\\\\p{L}+)\\\\.html$\";\n", "public class HtmlReportUtil {\n\n    private static final String REGEX_DISCIPLINES = \"^(\\\\p{L}+)-(\\\\p{L}+)\\\\.html$\";\n\n    public boolean nameIsValid(String filename) {\n        Pattern pattern = Pattern.compile(REGEX_DISCIPLINES);\n        Matcher matcher = pattern.matcher(filename);\n        return matcher.matches();\n    }\n\n    public List<Collision> parse(Document doc, String filename, Project project) {\n        String regexDisciplines = \"^(\\\\p{L}+)-(\\\\p{L}+)\\\\.html$\";\n        Date currDate = new Date();\n\n        List<Collision> collisionList = new ArrayList<>();\n\n        Pattern pattern = Pattern.compile(regexDisciplines);\n        Matcher matcher = pattern.matcher(filename);\n        String id1 = null;\n        String id2 = null;\n        String discipline1 = null;\n        String discipline2 = null;\n        String elname1 = null;\n        String elname2 = null;", "        if (matcher.matches()) {\n            discipline1 = matcher.group(1);\n            discipline2 = matcher.group(2);\n        }\n        Elements elements = doc.getElementsByTag(\"tr\");\n        if (elements.size() < 2) System.out.println(\"Empty report\");\n        else {\n            for (int i = 1; i < elements.size(); i++) {\n                String col1 = elements.get(i).getElementsByTag(\"td\").get(1).ownText();\n                String col2 = elements.get(i).getElementsByTag(\"td\").get(2).ownText();\n\n                String[] strings = col1.split(\":\");", "                if (strings.length == 4) {\n                    elname1 = strings[0] + \" - \" + strings[1] + \" - \" + strings[2];\n                } else elname1 = strings[1] + \" - \" + strings[2] + \" - \" + strings[3];\n                id1 = strings[strings.length - 1].substring(5);\n\n                strings = col2.split(\":\");\n                if (strings.length == 4) {\n                    elname2 = strings[0] + \" - \" + strings[1] + \" - \" + strings[2];\n                } else elname2 = strings[1] + \" - \" + strings[2] + \" - \" + strings[3];\n                id2 = strings[strings.length - 1].substring(5);\n\n                Collision collision = Collision.builder()\n                        .discipline1(discipline1)\n                        .discipline2(discipline2)\n                        .elementName1(elname1)\n                        .elementName2(elname2)\n                        .elementId1(id1)\n                        .elementId2(id2)\n                        .status(\"Active\")\n                        .createdAt(currDate)\n                        .projectBase(project)\n                        .build();\n                collisionList.add(collision);\n            }\n        }\n        return collisionList;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/repositories/HtmlReportDataRepository.java", "chunked_list": ["package ru.jbimer.core.repositories;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport ru.jbimer.core.models.HtmlReportData;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.services.HtmlReportService;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface HtmlReportDataRepository extends JpaRepository<HtmlReportData, Integer> {\n\n    Optional<HtmlReportData> findByName(String fileName);\n\n    List<HtmlReportData> findAllByProject(Project project);\n}\n", "import java.util.Optional;\n\npublic interface HtmlReportDataRepository extends JpaRepository<HtmlReportData, Integer> {\n\n    Optional<HtmlReportData> findByName(String fileName);\n\n    List<HtmlReportData> findAllByProject(Project project);\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/repositories/CollisionsRepository.java", "chunked_list": ["package ru.jbimer.core.repositories;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;", "import org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.Project;\n\nimport javax.swing.text.html.Option;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface CollisionsRepository extends JpaRepository<Collision, Integer> {\n\n    @Query(\"SELECT c FROM Collision c LEFT JOIN c.projectBase p WHERE p = :project and (c.discipline1 = :discipline or c.discipline2 = :discipline)\")\n    Page<Collision> findByDisciplinesAndProject(@Param(\"discipline\") String discipline,\n                                                @Param(\"project\") Project project,\n                                                Pageable pageable);\n    \n    @Query(\"SELECT c FROM Collision c LEFT JOIN FETCH c.engineer WHERE c.id = :id\")\n    Optional<Collision> findByIdFetchEngineer(@Param(\"id\") int id);\n\n    @Query(\"SELECT c FROM Collision c LEFT JOIN FETCH c.engineer ORDER BY c.id\")\n    List<Collision> findAllFetchEngineers();\n\n    List<Collision> findByEngineer(Engineer engineer);\n\n    @Query(\"SELECT c FROM Collision c LEFT JOIN FETCH c.projectBase WHERE c.projectBase = :project and \" +\n            \"(c.elementId1 =: elemId1 and c.elementId2 = :elemId2\" +\n            \" or c.elementId1 = :elemId2 and c.elementId2 = :elemId1)\")\n    Optional<Collision> findByIdsForValidation(@Param(\"elemId1\") String elemId1,\n                                               @Param(\"elemId2\") String elemId2,\n                                               @Param(\"project\") Project project);\n\n\n    @Modifying\n    @Query(\"update Collision c set c.status = 'Done' where c.projectBase = :project \" +\n            \"and c.createdAt < :currDate and (c.discipline1 = :disc1 and c.discipline2 = :disc2 \" +\n            \"or c.discipline1 = :disc2 and c.discipline2 = :disc1)\")\n    void updateStatus(@Param(\"currDate\") Date date,\n                      @Param(\"disc1\") String disc1,\n                      @Param(\"disc2\") String disc2,\n                      @Param(\"project\") Project project);\n\n    Page<Collision> findByProjectBase(Project project, Pageable pageable);\n\n    List<Collision> findAllByProjectBase(Project project);\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/repositories/EngineersRepository.java", "chunked_list": ["package ru.jbimer.core.repositories;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport ru.jbimer.core.models.Engineer;\n\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface EngineersRepository extends JpaRepository<Engineer, Integer> {\n\n    Optional<Engineer> findByTelegramUsername(String telegramUsername);\n\n    Optional<Engineer> findByEmail(String email);\n\n    Optional<Engineer> findByUsername(String username);\n\n    @Query(\"SELECT e FROM Engineer e LEFT JOIN FETCH e.collisions WHERE e.id = :id\")\n    Optional<Engineer> findByIdFetchCollisions(@Param(\"id\") int id);\n\n    @Query(\"SELECT e FROM Engineer e LEFT JOIN FETCH e.projects p where p.id = :project_id\")\n    List<Engineer> findAllOnProject(@Param(\"project_id\") int id);\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/repositories/ProjectRepository.java", "chunked_list": ["package ru.jbimer.core.repositories;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\nimport ru.jbimer.core.models.Project;\n\n@Repository\npublic interface ProjectRepository extends JpaRepository<Project, Integer> {\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/models/Collision.java", "chunked_list": ["package ru.jbimer.core.models;\n\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n", "import java.util.Map;\n\n@Entity\n@Table(name = \"Collision\")\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Collision {\n\n    @Id\n    @Column(name = \"collision_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"project_id\", referencedColumnName = \"project_id\")\n    private Project projectBase;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"engineer_id\", referencedColumnName = \"engineer_id\")\n    private Engineer engineer;\n\n    @Column(name = \"discipline_1\")\n    private String discipline1;\n\n    @Column(name = \"discipline_2\")\n    private String discipline2;\n\n    @Column(name = \"element_name_1\")\n    private String elementName1;\n\n    @Column(name = \"element_name_2\")\n    private String elementName2;\n\n    @Column(name = \"element_id_1\")\n    private String elementId1;\n\n    @Column(name = \"element_id_2\")\n    private String elementId2;\n\n    @Column(name = \"status\")\n    private String status;\n\n    @Column(name = \"comment\")\n    private String comment;\n\n    @Column(name = \"created_at\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createdAt;\n\n    @Column(name = \"fake\")\n    private boolean fake;\n\n    public List<String> getComments() {", "@NoArgsConstructor\npublic class Collision {\n\n    @Id\n    @Column(name = \"collision_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"project_id\", referencedColumnName = \"project_id\")\n    private Project projectBase;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"engineer_id\", referencedColumnName = \"engineer_id\")\n    private Engineer engineer;\n\n    @Column(name = \"discipline_1\")\n    private String discipline1;\n\n    @Column(name = \"discipline_2\")\n    private String discipline2;\n\n    @Column(name = \"element_name_1\")\n    private String elementName1;\n\n    @Column(name = \"element_name_2\")\n    private String elementName2;\n\n    @Column(name = \"element_id_1\")\n    private String elementId1;\n\n    @Column(name = \"element_id_2\")\n    private String elementId2;\n\n    @Column(name = \"status\")\n    private String status;\n\n    @Column(name = \"comment\")\n    private String comment;\n\n    @Column(name = \"created_at\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createdAt;\n\n    @Column(name = \"fake\")\n    private boolean fake;\n\n    public List<String> getComments() {", "        if (comment == null) return null;\n        else return List.of(comment.split(\"#@\"));\n    }\n\n\n    public String getFullInfoString() {\n        return status + \"---\" + discipline1 + '-' + elementName1 + '-' + elementId1 + \"---\"\n                + discipline2 + '-' + elementName2 + '-' + elementId2;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/models/Engineer.java", "chunked_list": ["package ru.jbimer.core.models;\n\n\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.Pattern;\nimport jakarta.validation.constraints.Size;\nimport lombok.*;\n", "import lombok.*;\n\nimport java.util.List;\n\n@Entity\n@Table(name = \"Engineer\")\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor", "@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Engineer {\n\n    @Id\n    @Column(name = \"engineer_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Column(name = \"first_name\")\n    private String firstName;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Column(name = \"last_name\")\n    private String lastName;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Pattern(regexp = \"\\\\D+\",\n            message = \"Enter correct name of service, ex. OV\")\n    @Column(name = \"discipline\")\n    private String discipline;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Column(name = \"email\")\n    private String email;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Column(name = \"telegram_username\")\n    private String telegramUsername;\n\n    @Size(min = 1, max = 30, message = \"Field is empty\")\n    @Column(name = \"username\")\n    private String username;\n\n    @Size(min = 1, message = \"Field is empty\")\n    @Column(name = \"password\")\n    private String password;\n\n    @Column(name = \"role\")\n    private String role;\n\n    @ManyToMany(mappedBy = \"engineersOnProject\", fetch = FetchType.LAZY)\n    private List<Project> projects;\n\n    @OneToMany(mappedBy = \"engineer\", fetch = FetchType.LAZY)\n    private List<Collision> collisions;\n\n    @OneToMany(mappedBy = \"engineer\", fetch = FetchType.LAZY)\n    private List<HtmlReportData> reports;\n", "    public String getFullNameWithDiscipline() {\n        return firstName + ' ' + lastName + '-' + discipline;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/models/HtmlReportData.java", "chunked_list": ["package ru.jbimer.core.models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n@Entity\n@Table(name = \"html_report\")", "@Entity\n@Table(name = \"html_report\")\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class HtmlReportData {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"report_id\")\n    private int id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"uploaded_at\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date uploadedAt;\n\n    @Lob\n    @Column(name = \"data\")\n    private String data;\n\n    @ManyToOne\n    @JoinColumn(name = \"engineer_id\", referencedColumnName = \"engineer_id\")\n    private Engineer engineer;\n\n    @ManyToOne\n    @JoinColumn(name = \"project_id\", referencedColumnName = \"project_id\")\n    private Project project;\n", "    public String getDateForProjectShowPage() {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n        return dateFormat.format(this.uploadedAt);\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/models/ProjectEngineer.java", "chunked_list": ["package ru.jbimer.core.models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"project_engineer\")\npublic class ProjectEngineer {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"project_id\", referencedColumnName = \"project_id\")\n    private Project project;\n\n    @ManyToOne\n    @JoinColumn(name = \"engineer_id\", referencedColumnName = \"engineer_id\")\n    private Engineer engineer;\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/models/Project.java", "chunked_list": ["package ru.jbimer.core.models;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.*;\n\nimport java.util.List;\n\n@Entity", "\n@Entity\n@Table(name = \"Project\")\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Project {\n\n    @Id\n    @Column(name = \"project_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @NotEmpty(message = \"Field is empty\")\n    @Column(name = \"name\")\n    private String name;\n\n    @OneToMany(mappedBy = \"projectBase\", fetch = FetchType.LAZY)\n    private List<Collision> collisionsOnProject;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"Project_Engineer\",\n            joinColumns = @JoinColumn(name = \"project_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"engineer_id\")\n    )\n    @org.hibernate.validator.constraints.NotEmpty(message = \"Choose at least 1 engineer\")\n    private List<Engineer> engineersOnProject;\n\n", "public class Project {\n\n    @Id\n    @Column(name = \"project_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @NotEmpty(message = \"Field is empty\")\n    @Column(name = \"name\")\n    private String name;\n\n    @OneToMany(mappedBy = \"projectBase\", fetch = FetchType.LAZY)\n    private List<Collision> collisionsOnProject;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"Project_Engineer\",\n            joinColumns = @JoinColumn(name = \"project_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"engineer_id\")\n    )\n    @org.hibernate.validator.constraints.NotEmpty(message = \"Choose at least 1 engineer\")\n    private List<Engineer> engineersOnProject;\n\n", "    public int getDoneCollisionsRatio() {\n        if (collisionsOnProject != null && collisionsOnProject.size() > 0) {\n            int doneCollisions = (int) collisionsOnProject.stream()\n                    .filter(collision -> collision.getStatus().equals(\"Done\"))\n                    .count();\n\n            return  (doneCollisions * 100) / collisionsOnProject.size();\n        }\n        return 0;\n    }\n", "    public int getDoneCollisions() {\n        if (collisionsOnProject != null && collisionsOnProject.size() > 0) {\n            return (int) collisionsOnProject.stream()\n                    .filter(collision -> collision.getStatus().equals(\"Done\"))\n                    .count();\n        }\n        return 0;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/EmptyEngineersListException.java", "chunked_list": ["package ru.jbimer.core.exception;\n\npublic class EmptyEngineersListException extends RuntimeException{\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/CollisionNotFoundException.java", "chunked_list": ["package ru.jbimer.core.exception;\n\npublic class CollisionNotFoundException extends NotFoundException{\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/NotFoundExceptionHandler.java", "chunked_list": ["package ru.jbimer.core.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.servlet.ModelAndView;\n", "import org.springframework.web.servlet.ModelAndView;\n\n@ControllerAdvice\npublic class NotFoundExceptionHandler {\n    @ExceptionHandler(NotFoundException.class)\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    public ModelAndView handleNotFoundException(NotFoundException e, Model model) {\n        ModelAndView modelAndView = new ModelAndView();\n        if (e instanceof NotFoundException) {\n            modelAndView.setViewName(\"engineers/index\");\n        }\n        return modelAndView;\n    }\n}", "        if (e instanceof NotFoundException) {\n            modelAndView.setViewName(\"engineers/index\");\n        }\n        return modelAndView;\n    }\n}"]}
{"filename": "src/main/java/ru/jbimer/core/exception/HtmlReportExceptionHandler.java", "chunked_list": ["package ru.jbimer.core.exception;\n\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.servlet.ModelAndView;\n\n@ControllerAdvice\npublic class HtmlReportExceptionHandler {\n\n    @ExceptionHandler(InvalidFileNameException.class)", "public class HtmlReportExceptionHandler {\n\n    @ExceptionHandler(InvalidFileNameException.class)\n    public ModelAndView handleInvalidFileNameException(InvalidFileNameException ex, Model model) {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.setViewName(\"collisions/upload\");\n        modelAndView.addObject(\"errorMessage\", \"Invalid file name. Please, try again\");\n        modelAndView.addObject(\"project\", ex.getProject());\n        return modelAndView;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/ProjectExceptionHandler.java", "chunked_list": ["package ru.jbimer.core.exception;\n\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.servlet.ModelAndView;\n\n@ControllerAdvice\npublic class ProjectExceptionHandler {\n\n    @ExceptionHandler(EmptyEngineersListException.class)", "public class ProjectExceptionHandler {\n\n    @ExceptionHandler(EmptyEngineersListException.class)\n    public ModelAndView handleEmptyEngineersListException(EmptyEngineersListException e, Model model) {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.setViewName(\"projects/new\");\n        modelAndView.addObject(\"errorMessage\", \"Choose at least 1 engineer\");\n        return modelAndView;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/InvalidFileNameException.java", "chunked_list": ["package ru.jbimer.core.exception;\n\nimport ru.jbimer.core.models.Project;\n\npublic class InvalidFileNameException extends RuntimeException{\n    private static final long serialVersionUID = 1L;\n\n    private Project project;\n\n    public InvalidFileNameException(Project project) {\n        this.project = project;\n    }\n", "    public Project getProject() {\n        return project;\n    }\n\n    public void setProject(Project project) {\n        this.project = project;\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/EngineerNotFoundException.java", "chunked_list": ["package ru.jbimer.core.exception;\n\npublic class EngineerNotFoundException extends NotFoundException{\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/exception/NotFoundException.java", "chunked_list": ["package ru.jbimer.core.exception;\n\npublic class NotFoundException extends RuntimeException{\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/services/CollisionsService.java", "chunked_list": ["package ru.jbimer.core.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.dao.CollisionDAO;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.repositories.CollisionsRepository;", "import ru.jbimer.core.models.Project;\nimport ru.jbimer.core.repositories.CollisionsRepository;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional\npublic class CollisionsService {\n\n    private final CollisionsRepository collisionsRepository;\n    private final CollisionDAO collisionDAO;\n    private final ProjectService projectService;\n\n    @Autowired\n    public CollisionsService(CollisionsRepository collisionsRepository, CollisionDAO collisionDAO, ProjectService projectService) {\n        this.collisionsRepository = collisionsRepository;\n        this.collisionDAO = collisionDAO;\n        this.projectService = projectService;\n    }\n\n    public List<Collision> findByEngineer(Engineer engineer) {\n        return collisionsRepository.findByEngineer(engineer);\n    }\n\n    public List<Collision> findAllByProject(Project project) {\n        return collisionsRepository.findAllByProjectBase(project);\n    }\n\n", "    public Collision findOne(int id) {\n        Optional<Collision> foundCollision = collisionsRepository.findById(id);\n\n        return foundCollision.orElse(null);\n    }\n\n    public Collision findOneAndEngineer(int id) {\n        Optional<Collision> foundCollision = collisionsRepository.findByIdFetchEngineer(id);\n\n        return foundCollision.orElse(null);\n    }\n\n    @Transactional", "    public void save(Collision collision) {\n\n        collisionsRepository.save(collision);\n    }\n\n    @Transactional\n    public void saveAll(List<Collision> collisions, Project project) {\n        String disc1 = collisions.get(0).getDiscipline1();\n        String disc2 = collisions.get(0).getDiscipline2();\n        Date currDate = collisions.get(0).getCreatedAt();\n        for (Collision collision :\n                collisions) {\n            Optional<Collision> foundCollisionOptional = collisionsRepository\n                    .findByIdsForValidation(collision.getElementId1(), collision.getElementId2(), project);", "        for (Collision collision :\n                collisions) {\n            Optional<Collision> foundCollisionOptional = collisionsRepository\n                    .findByIdsForValidation(collision.getElementId1(), collision.getElementId2(), project);\n            if (foundCollisionOptional.isEmpty()) save(collision);\n            else {\n                Collision foundCollision = foundCollisionOptional.get();\n\n                foundCollision.setCreatedAt(new Date());\n            }\n        }\n        update(currDate, disc1, disc2, project);\n    }\n\n    @Transactional", "    public void update(Date date, String disc1, String disc2, Project project) {\n        collisionsRepository.updateStatus(date, disc1, disc2, project);\n    }\n\n    @Transactional\n    public void delete(int id) {\n        collisionsRepository.deleteById(id);\n    }\n\n    @Transactional\n    public void release(int id) {\n        collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {\n                    collision.setEngineer(null);\n                }\n        );\n    }\n\n    @Transactional", "    public void release(int id) {\n        collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {\n                    collision.setEngineer(null);\n                }\n        );\n    }\n\n    @Transactional\n    public void assign(int id, Engineer selectedEngineer) {\n        collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {\n                    collision.setEngineer(selectedEngineer);\n                }\n        );\n    }\n\n    @Transactional", "    public void assign(int id, Engineer selectedEngineer) {\n        collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {\n                    collision.setEngineer(selectedEngineer);\n                }\n        );\n    }\n\n    @Transactional\n    public void addComment(int id, Engineer selectedEngineer, String comment) {\n        Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);", "    public void addComment(int id, Engineer selectedEngineer, String comment) {\n        Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);\n        if (optionalCollision.isPresent()) {\n            Collision collision = optionalCollision.get();\n            String currComment = collision.getComment();\n            Date currentDate = new Date();\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy hh:mm a\");\n            String formattedDate = dateFormat.format(currentDate);\n            if (currComment == null) currComment = formattedDate + \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";\n            else currComment = currComment + formattedDate + \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";\n            collision.setComment(currComment);\n        }\n    }\n", "            if (currComment == null) currComment = formattedDate + \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";\n            else currComment = currComment + formattedDate + \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";\n            collision.setComment(currComment);\n        }\n    }\n\n    public Engineer getCollisionEngineer(int id) {\n        return collisionsRepository.findById(id).map(Collision::getEngineer).orElse(null);\n    }\n\n    public Page<Collision> findAllWithPagination(int project_id, Pageable paging) {\n        Project foundProject = projectService.findOne(project_id);\n        return collisionsRepository.findByProjectBase(foundProject, paging);\n    }\n\n    public Page<Collision> searchByDiscipline(String keyword, int project_id, Pageable pageable) {\n        Project foundProject = projectService.findOne(project_id);\n        return collisionsRepository.findByDisciplinesAndProject(keyword, foundProject, pageable);\n    }\n\n    @Transactional", "    public void markAsFake(int id) {\n        collisionsRepository.findById(id).ifPresent(\n                collision -> {\n                    collision.setFake(true);\n                    collision.setEngineer(null);\n                }\n        );\n    }\n\n    @Transactional\n    public void markAsNotFake(int id) {\n        collisionsRepository.findById(id).ifPresent(\n                collision -> {\n                    collision.setFake(false);\n                }\n        );\n    }\n}\n", "    public void markAsNotFake(int id) {\n        collisionsRepository.findById(id).ifPresent(\n                collision -> {\n                    collision.setFake(false);\n                }\n        );\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/services/EngineerDetailsService.java", "chunked_list": ["package ru.jbimer.core.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.repositories.EngineersRepository;", "import ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.repositories.EngineersRepository;\nimport ru.jbimer.core.security.EngineerDetails;\n\nimport java.util.Optional;\n\n@Service\npublic class EngineerDetailsService implements UserDetailsService {\n\n    private final EngineersRepository engineersRepository;\n\n    @Autowired\n    public EngineerDetailsService(EngineersRepository engineersRepository) {\n        this.engineersRepository = engineersRepository;\n    }\n\n    @Override", "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Optional<Engineer> engineer = engineersRepository.findByUsername(username);\n\n        if (engineer.isEmpty())\n            throw new UsernameNotFoundException(\"User not found\");\n        return new EngineerDetails(engineer.get());\n    }\n\n\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/services/ProjectService.java", "chunked_list": ["package ru.jbimer.core.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.repositories.CollisionsRepository;\nimport ru.jbimer.core.repositories.ProjectRepository;\nimport ru.jbimer.core.models.Project;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Transactional(readOnly = true)\npublic class ProjectService {\n\n    private final ProjectRepository projectRepository;\n    private final CollisionsRepository collisionsRepository;\n\n    @Autowired\n    public ProjectService(ProjectRepository projectRepository, CollisionsRepository collisionsRepository) {\n        this.projectRepository = projectRepository;\n        this.collisionsRepository = collisionsRepository;\n    }\n\n\n    public List<Project> findAll() {\n        return projectRepository.findAll();\n    }\n", "    public Project findOne(int id) {\n        Optional<Project> foundProject = projectRepository.findById(id);\n\n        return foundProject.orElse(null);\n    }\n\n    @Transactional\n    public void save(Project project) {\n        projectRepository.save(project);\n    }\n\n    @Transactional", "    public void update(int id, Project updatedProject) {\n        updatedProject.setId(id);\n        projectRepository.save(updatedProject);\n    }\n\n    @Transactional\n    public void delete(int id) {\n        projectRepository.deleteById(id);\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/services/EngineersService.java", "chunked_list": ["package ru.jbimer.core.services;\n\nimport org.hibernate.Hibernate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport ru.jbimer.core.dao.EngineerDAO;\nimport ru.jbimer.core.models.Collision;", "import ru.jbimer.core.dao.EngineerDAO;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.repositories.EngineersRepository;\nimport ru.jbimer.core.models.Engineer;\n\nimport java.util.*;\n\n@Service\n@Transactional(readOnly = true)\npublic class EngineersService{\n\n    private final EngineersRepository engineersRepository;\n    private final EngineerDAO engineerDAO;\n    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public EngineersService(EngineersRepository engineersRepository, EngineerDAO engineerDAO, PasswordEncoder passwordEncoder) {\n        this.engineersRepository = engineersRepository;\n        this.engineerDAO = engineerDAO;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public Optional<Engineer> findByUsername(String username) {\n        return engineersRepository.findByUsername(username);\n    }\n\n    public List<Engineer> findAll() {\n        return engineersRepository.findAll();\n    }\n\n    public List<Engineer> findAllOnProject(int project_id) {\n        return engineersRepository.findAllOnProject(project_id);\n    }\n\n    public List<Engineer> findAllSortedByCollisionsSize() {\n        List<Engineer> engineers = new ArrayList<>(engineerDAO.index());\n\n        engineers.sort((e1, e2) -> {\n            int collisionsComparison = Integer.compare(e2.getCollisions().size(), e1.getCollisions().size());", "@Transactional(readOnly = true)\npublic class EngineersService{\n\n    private final EngineersRepository engineersRepository;\n    private final EngineerDAO engineerDAO;\n    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public EngineersService(EngineersRepository engineersRepository, EngineerDAO engineerDAO, PasswordEncoder passwordEncoder) {\n        this.engineersRepository = engineersRepository;\n        this.engineerDAO = engineerDAO;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public Optional<Engineer> findByUsername(String username) {\n        return engineersRepository.findByUsername(username);\n    }\n\n    public List<Engineer> findAll() {\n        return engineersRepository.findAll();\n    }\n\n    public List<Engineer> findAllOnProject(int project_id) {\n        return engineersRepository.findAllOnProject(project_id);\n    }\n\n    public List<Engineer> findAllSortedByCollisionsSize() {\n        List<Engineer> engineers = new ArrayList<>(engineerDAO.index());\n\n        engineers.sort((e1, e2) -> {\n            int collisionsComparison = Integer.compare(e2.getCollisions().size(), e1.getCollisions().size());", "            if (collisionsComparison != 0) {\n                return collisionsComparison;\n            } else {\n                return Integer.compare(e1.getId(), e2.getId());\n            }\n        });\n        return engineers;\n    }\n\n\n    public Optional<Engineer> findByTelegramUsername(String telegramUsername) {\n        return engineersRepository.findByTelegramUsername(telegramUsername);\n    }\n\n    public Optional<Engineer> findByEmail(String email) {\n        return engineersRepository.findByEmail(email);\n    }\n", "    public Engineer findOne(int id) {\n        Optional<Engineer> foundEngineer = engineersRepository.findById(id);\n\n        return foundEngineer.orElse(null);\n    }\n\n    public Engineer findByIdFetchCollisions(int id) {\n        Optional<Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);\n\n        return foundEngineer.orElse(null);\n    }\n\n    @Transactional", "    public void register(Engineer engineer) {\n        engineer.setPassword(passwordEncoder.encode(engineer.getPassword()));\n        engineer.setRole(\"ROLE_USER\");\n\n        engineersRepository.save(engineer);\n    }\n\n    @Transactional\n    public void update(int id, Engineer updatedEngineer, Engineer originalEngineer) {\n        originalEngineer.setDiscipline(updatedEngineer.getDiscipline());\n        originalEngineer.setFirstName(updatedEngineer.getFirstName());\n        originalEngineer.setLastName(updatedEngineer.getLastName());\n\n        engineersRepository.save(originalEngineer);\n    }\n\n    @Transactional", "    public void update(int id, Engineer updatedEngineer, Engineer originalEngineer) {\n        originalEngineer.setDiscipline(updatedEngineer.getDiscipline());\n        originalEngineer.setFirstName(updatedEngineer.getFirstName());\n        originalEngineer.setLastName(updatedEngineer.getLastName());\n\n        engineersRepository.save(originalEngineer);\n    }\n\n    @Transactional\n    public void delete(int id) {\n        engineersRepository.deleteById(id);\n    }\n\n\n    public List<Collision> getCollisionsByEngineerId(int id) {\n        Optional<Engineer> engineer = engineersRepository.findById(id);\n", "    public void delete(int id) {\n        engineersRepository.deleteById(id);\n    }\n\n\n    public List<Collision> getCollisionsByEngineerId(int id) {\n        Optional<Engineer> engineer = engineersRepository.findById(id);\n\n        if (engineer.isPresent()) {\n            Hibernate.initialize(engineer.get().getCollisions());\n            return engineer.get().getCollisions();\n        }\n        else {\n            return Collections.emptyList();\n        }\n    }\n\n    @Transactional", "        if (engineer.isPresent()) {\n            Hibernate.initialize(engineer.get().getCollisions());\n            return engineer.get().getCollisions();\n        }\n        else {\n            return Collections.emptyList();\n        }\n    }\n\n    @Transactional\n    public void save(Engineer engineer) {\n        engineersRepository.save(engineer);\n    }\n\n}\n", "    public void save(Engineer engineer) {\n        engineersRepository.save(engineer);\n    }\n\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/services/HtmlReportService.java", "chunked_list": ["package ru.jbimer.core.services;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\nimport ru.jbimer.core.dao.CollisionDAO;\nimport ru.jbimer.core.exception.InvalidFileNameException;", "import ru.jbimer.core.dao.CollisionDAO;\nimport ru.jbimer.core.exception.InvalidFileNameException;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.HtmlReportData;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.repositories.CollisionsRepository;\nimport ru.jbimer.core.repositories.HtmlReportDataRepository;\nimport ru.jbimer.core.util.HtmlReportUtil;\n", "import ru.jbimer.core.util.HtmlReportUtil;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.List;\n\n@Service\n@Transactional\npublic class HtmlReportService {\n\n    private final HtmlReportDataRepository htmlReportDataRepository;\n    private final CollisionsRepository collisionsRepository;\n    private final CollisionsService collisionsService;\n    private final HtmlReportUtil htmlReportUtil;\n    private final CollisionDAO collisionDAO;\n\n    @Autowired\n    public HtmlReportService(HtmlReportDataRepository htmlReportDataRepository, CollisionsRepository collisionsRepository, CollisionsService collisionsService, HtmlReportUtil htmlReportUtil, CollisionDAO collisionDAO) {\n        this.htmlReportDataRepository = htmlReportDataRepository;\n        this.collisionsRepository = collisionsRepository;\n        this.collisionsService = collisionsService;\n        this.htmlReportUtil = htmlReportUtil;\n        this.collisionDAO = collisionDAO;\n    }\n\n", "@Transactional\npublic class HtmlReportService {\n\n    private final HtmlReportDataRepository htmlReportDataRepository;\n    private final CollisionsRepository collisionsRepository;\n    private final CollisionsService collisionsService;\n    private final HtmlReportUtil htmlReportUtil;\n    private final CollisionDAO collisionDAO;\n\n    @Autowired\n    public HtmlReportService(HtmlReportDataRepository htmlReportDataRepository, CollisionsRepository collisionsRepository, CollisionsService collisionsService, HtmlReportUtil htmlReportUtil, CollisionDAO collisionDAO) {\n        this.htmlReportDataRepository = htmlReportDataRepository;\n        this.collisionsRepository = collisionsRepository;\n        this.collisionsService = collisionsService;\n        this.htmlReportUtil = htmlReportUtil;\n        this.collisionDAO = collisionDAO;\n    }\n\n", "    public int uploadFile(MultipartFile file, Engineer engineer, Project project) throws IOException {\n        if (!htmlReportUtil.nameIsValid(file.getOriginalFilename())) throw new InvalidFileNameException(project);\n        File tempFile = File.createTempFile(\"temp\", null);\n        file.transferTo(tempFile);\n        Document doc = Jsoup.parse(tempFile, \"UTF-8\", \"\");\n        tempFile.delete();\n\n        HtmlReportData data = HtmlReportData.builder()\n                .name(file.getOriginalFilename())\n                .uploadedAt(new Date())\n                .engineer(engineer)\n                .project(project)\n                .data(doc.html()).build();\n\n\n        htmlReportDataRepository.save(data);\n\n        List<Collision> collisions = htmlReportUtil.parse(doc, file.getOriginalFilename(), project);\n\n        collisionsService.saveAll(collisions, project);\n\n        return collisions.size();\n    }\n\n    public List<HtmlReportData> findAllByProject(Project project) {\n        return htmlReportDataRepository.findAllByProject(project);\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/AuthController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport jakarta.validation.Valid;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport ru.jbimer.core.models.Engineer;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.util.EngineerValidator;\n\n@Controller\n@RequestMapping(\"/auth\")\npublic class AuthController {\n\n    private final EngineerValidator engineerValidator;\n    private final EngineersService engineersService;\n\n    public AuthController(EngineerValidator engineerValidator, EngineersService engineersService) {\n        this.engineerValidator = engineerValidator;\n        this.engineersService = engineersService;\n    }\n\n    @GetMapping(\"/login\")", "    public String loginPage() {\n        return \"auth/login\";\n    }\n\n    @GetMapping(\"/registration\")\n    public String registrationPage(@ModelAttribute(\"engineer\") Engineer engineer) {\n        return \"auth/registration\";\n    }\n\n    @PostMapping(\"/registration\")\n    public String performRegistration(@ModelAttribute(\"engineer\") @Valid Engineer engineer,\n                                      BindingResult bindingResult) {\n        engineerValidator.validate(engineer, bindingResult);\n", "    public String performRegistration(@ModelAttribute(\"engineer\") @Valid Engineer engineer,\n                                      BindingResult bindingResult) {\n        engineerValidator.validate(engineer, bindingResult);\n\n        if (bindingResult.hasErrors()) return \"auth/registration\";\n        engineersService.register(engineer);\n\n        return \"redirect:/auth/login\";\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/ProjectController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.HtmlReportService;\nimport ru.jbimer.core.services.ProjectService;\n\nimport java.util.List;", "\nimport java.util.List;\n\n@Controller\n@RequestMapping(\"/projects\")\npublic class ProjectController {\n\n    private final ProjectService projectService;\n    private final EngineersService engineersService;\n    private final HtmlReportService htmlReportService;\n    private final CollisionsService collisionsService;\n\n    @Autowired\n    public ProjectController(ProjectService projectService, EngineersService engineersService, HtmlReportService htmlReportService, CollisionsService collisionsService) {\n        this.projectService = projectService;\n        this.engineersService = engineersService;\n        this.htmlReportService = htmlReportService;\n        this.collisionsService = collisionsService;\n    }\n\n    @GetMapping()", "    public String index(Model model) {\n        List<Project> projects = projectService.findAll();\n        model.addAttribute(\"projects\", projects);\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        String authority = authentication.getAuthorities().stream().findFirst().orElse(null).getAuthority();\n\n        model.addAttribute(\"role\", authority);\n\n        return \"projects/index\";\n    }\n\n    @GetMapping(\"/{id}\")", "    public String show(@PathVariable(\"id\") int project_id, Model model) {\n        Project project = projectService.findOne(project_id);\n        List<Engineer> engineers = project.getEngineersOnProject();\n        model.addAttribute(\"project\", project);\n        model.addAttribute(\"engineers\", engineers);\n        model.addAttribute(\"reports\", htmlReportService.findAllByProject(project));\n\n        return \"projects/show\";\n    }\n\n    @GetMapping(\"/new\")", "    public String newProject(Model model,\n                             @ModelAttribute(\"project\") Project project) {\n        model.addAttribute(\"engineers\", engineersService.findAll());\n\n        return \"projects/new\";\n    }\n\n    @PostMapping\n    public String create(@ModelAttribute(\"project\") @Valid Project project,\n                         BindingResult bindingResult, Model model) {\n        model.addAttribute(\"engineers\", engineersService.findAll());", "    public String create(@ModelAttribute(\"project\") @Valid Project project,\n                         BindingResult bindingResult, Model model) {\n        model.addAttribute(\"engineers\", engineersService.findAll());\n        if (bindingResult.hasErrors()) return \"projects/new\";\n        projectService.save(project);\n        return \"redirect:/projects\";\n    }\n\n    @GetMapping(\"/{id}/edit\")\n    public String edit(Model model, @PathVariable(\"id\") int id) {\n        model.addAttribute(\"project\", projectService.findOne(id));\n        model.addAttribute(\"engineers\", engineersService.findAll());\n        return \"projects/edit\";\n    }\n\n    @PatchMapping(\"/{id}\")", "    public String edit(Model model, @PathVariable(\"id\") int id) {\n        model.addAttribute(\"project\", projectService.findOne(id));\n        model.addAttribute(\"engineers\", engineersService.findAll());\n        return \"projects/edit\";\n    }\n\n    @PatchMapping(\"/{id}\")\n    public String update(@ModelAttribute(\"project\") @Valid Project project,\n                         BindingResult bindingResult,\n                       @PathVariable(\"id\") int id) {\n        if (bindingResult.hasErrors()) return \"projects/edit\";\n        projectService.save(project);\n        return \"redirect:/projects/\" + id;\n    }\n\n    @DeleteMapping(\"/{id}\")", "        if (bindingResult.hasErrors()) return \"projects/edit\";\n        projectService.save(project);\n        return \"redirect:/projects/\" + id;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public String delete(@PathVariable(\"id\") int id){\n        projectService.delete(id);\n        return \"redirect:/projects\";\n    }\n\n\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/EngineersController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\nimport ru.jbimer.core.security.EngineerDetails;\nimport ru.jbimer.core.util.EngineerValidator;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.services.EngineersService;\n\nimport java.util.*;\n\n@Controller", "\n@Controller\n@RequestMapping(\"/engineers\")\npublic class EngineersController {\n\n    private final EngineerValidator engineerValidator;\n    private final EngineersService engineersService;\n\n    @Autowired\n    public EngineersController(EngineerValidator engineerValidator, EngineersService engineersService) {\n        this.engineerValidator = engineerValidator;\n        this.engineersService = engineersService;\n    }\n\n    @GetMapping()", "    public String index(Model model) {\n        List<Engineer> engineers = engineersService.findAllSortedByCollisionsSize();\n\n        model.addAttribute(\"engineers\", engineers);\n        return \"engineers/index\";\n    }\n\n    @GetMapping(\"/{id}\")\n    public String show(@PathVariable(\"id\") int id, Model model) {\n        Engineer engineer = engineersService.findByIdFetchCollisions(id);\n\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"collisions\", engineer.getCollisions());\n        return \"engineers/show\";\n    }\n\n\n    @GetMapping(\"/{id}/edit\")", "    public String show(@PathVariable(\"id\") int id, Model model) {\n        Engineer engineer = engineersService.findByIdFetchCollisions(id);\n\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"collisions\", engineer.getCollisions());\n        return \"engineers/show\";\n    }\n\n\n    @GetMapping(\"/{id}/edit\")\n    public String edit(Model model, @PathVariable(\"id\") int id) {\n\n        model.addAttribute(\"engineer\", engineersService.findOne(id));\n        return \"engineers/edit\";\n    }\n\n    @PatchMapping(\"/{id}\")", "    public String edit(Model model, @PathVariable(\"id\") int id) {\n\n        model.addAttribute(\"engineer\", engineersService.findOne(id));\n        return \"engineers/edit\";\n    }\n\n    @PatchMapping(\"/{id}\")\n    public String update(@ModelAttribute(\"engineer\") @Valid Engineer updatedEngineer,\n                         BindingResult bindingResult,\n                         @PathVariable(\"id\") int id) {\n", "        if (bindingResult.hasErrors()) return \"engineers/edit\";\n\n        Engineer originalEngineer = engineersService.findOne(id);\n\n        engineersService.update(id, updatedEngineer, originalEngineer);\n        return \"redirect:/engineers\";\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public String delete(@PathVariable(\"id\") int id) {\n\n        engineersService.delete(id);\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();", "    public String delete(@PathVariable(\"id\") int id) {\n\n        engineersService.delete(id);\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        if (authentication != null && authentication.isAuthenticated()) {\n            SecurityContextHolder.getContext().setAuthentication(null);\n        }\n        return \"redirect:/logout\";\n\n    }\n\n\n\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/ReportUploadController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.MultipartFile;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.security.EngineerDetails;\nimport ru.jbimer.core.services.HtmlReportService;\nimport ru.jbimer.core.services.ProjectService;\n\nimport java.io.IOException;\n", "import java.io.IOException;\n\n@Controller\n@RequestMapping(\"/reports\")\npublic class ReportUploadController {\n\n    private final HtmlReportService htmlReportService;\n    private final ProjectService projectService;\n\n    @Autowired\n    public ReportUploadController(HtmlReportService htmlReportService, ProjectService projectService) {\n        this.htmlReportService = htmlReportService;\n        this.projectService = projectService;\n    }\n\n    @PostMapping()", "    public String upload(@RequestParam(\"file\") MultipartFile file,\n                         Model model,\n                         @RequestParam(\"projectId\") int project_id) throws IOException {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        EngineerDetails engineerDetails = (EngineerDetails) authentication.getPrincipal();\n\n        Project project = projectService.findOne(project_id);\n\n        int collisions = htmlReportService.uploadFile(file, engineerDetails.getEngineer(), project);\n        model.addAttribute(\"collisionsUpdated\", collisions);\n        model.addAttribute(\"project\", project);\n\n        return \"collisions/upload\";\n    }\n\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/HomeController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.security.EngineerDetails;", "import ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.security.EngineerDetails;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.ProjectService;\n\n@Controller\n@RequestMapping(\"/\")\npublic class HomeController {\n\n    private final EngineersService engineersService;\n    private final CollisionsService collisionsService;\n    private final ProjectService projectService;\n\n    public HomeController(EngineersService engineersService, CollisionsService collisionsService, ProjectService projectService) {\n        this.engineersService = engineersService;\n        this.collisionsService = collisionsService;\n        this.projectService = projectService;\n    }\n\n    @GetMapping", "public class HomeController {\n\n    private final EngineersService engineersService;\n    private final CollisionsService collisionsService;\n    private final ProjectService projectService;\n\n    public HomeController(EngineersService engineersService, CollisionsService collisionsService, ProjectService projectService) {\n        this.engineersService = engineersService;\n        this.collisionsService = collisionsService;\n        this.projectService = projectService;\n    }\n\n    @GetMapping", "    public String index() {\n        return \"index_main\";\n    }\n\n    @GetMapping(\"/account\")\n    public String showUserAccount(Model model) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        EngineerDetails engineerDetails = (EngineerDetails) authentication.getPrincipal();\n\n        Engineer engineer = engineersService\n                .findByIdFetchCollisions(engineerDetails.getEngineer().getId());\n\n        model.addAttribute(\"engineer\", engineer);\n        model.addAttribute(\"collisions\", engineer.getCollisions());\n\n        return \"profile/profile_page\";\n    }\n\n    @GetMapping(\"/admin\")", "    public String adminPage() {\n        return \"admin\";\n    }\n}\n"]}
{"filename": "src/main/java/ru/jbimer/core/controllers/CollisionsController.java", "chunked_list": ["package ru.jbimer.core.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;", "import org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport ru.jbimer.core.models.Collision;\nimport ru.jbimer.core.models.Engineer;\nimport ru.jbimer.core.models.Project;\nimport ru.jbimer.core.security.EngineerDetails;\nimport ru.jbimer.core.services.CollisionsService;", "import ru.jbimer.core.security.EngineerDetails;\nimport ru.jbimer.core.services.CollisionsService;\nimport ru.jbimer.core.services.EngineersService;\nimport ru.jbimer.core.services.HtmlReportService;\nimport ru.jbimer.core.services.ProjectService;\n\nimport java.io.IOException;\nimport java.util.List;\n\n", "\n\n@Controller\n@RequestMapping(\"/projects/{project_id}/collisions\")\npublic class CollisionsController {\n\n    private final EngineersService engineersService;\n    private final CollisionsService collisionsService;\n    private final HtmlReportService service;\n    private final ProjectService projectService;\n\n    @Autowired\n    public CollisionsController(EngineersService engineersService, CollisionsService collisionsService, HtmlReportService service, ProjectService projectService) {\n        this.engineersService = engineersService;\n        this.collisionsService = collisionsService;\n        this.service = service;\n        this.projectService = projectService;\n    }\n\n    @GetMapping()", "    public String index(Model model,\n                        @PathVariable(\"project_id\") int project_id,\n                        @RequestParam(required = false) String keyword,\n                        @RequestParam(defaultValue = \"1\") Integer page,\n                        @RequestParam(defaultValue = \"10\") Integer size) {\n\n        try {\n            List<Collision> collisions;\n            Pageable paging = PageRequest.of(page - 1, size, Sort.by(\"id\"));\n\n            Page<Collision> collisionPage;", "            if (keyword == null) {\n                collisionPage = collisionsService.findAllWithPagination(project_id, paging);\n            } else {\n                collisionPage = collisionsService.searchByDiscipline(keyword, project_id, paging);\n                model.addAttribute(\"keyword\", keyword);\n            }\n\n            collisions = collisionPage.getContent();\n\n            Project project = projectService.findOne(project_id);\n\n            model.addAttribute(\"collisions\", collisions);\n            model.addAttribute(\"currentPage\", collisionPage.getNumber() + 1);\n            model.addAttribute(\"totalItems\", collisionPage.getTotalElements());\n            model.addAttribute(\"totalPages\", collisionPage.getTotalPages());\n            model.addAttribute(\"pageSize\", size);\n            model.addAttribute(\"project\", project);\n        } catch (Exception e) {\n            model.addAttribute(\"message\", e.getMessage());\n        }\n\n        return \"collisions/index\";\n    }\n\n    @GetMapping(\"/{id}\")", "    public String show(@PathVariable(\"id\") int id,\n                       @PathVariable(\"project_id\") int project_id,\n                       Model model,\n                       @ModelAttribute(\"engineer\") Engineer engineer) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        String authority = authentication.getAuthorities().stream().findFirst().orElse(null).getAuthority();\n\n\n        Collision collision = collisionsService.findOneAndEngineer(id);\n\n        Engineer collisionOwner = collision.getEngineer();\n\n        model.addAttribute(\"collision\", collision);\n        model.addAttribute(\"comments\", collision.getComments());\n        model.addAttribute(\"role\", authority);", "        if (collisionOwner != null){\n            model.addAttribute(\"owner\", collisionOwner);\n        }\n        else\n            model.addAttribute(\"engineers\", engineersService.findAllOnProject(project_id));\n\n        return \"collisions/show\";\n    }\n\n    @GetMapping(\"/upload\")\n    public String uploadCollisionsReportPage(Model model, @PathVariable(\"project_id\") int project_id) {\n        model.addAttribute(\"project\", projectService.findOne(project_id));\n        return \"collisions/upload\";\n    }\n\n    @DeleteMapping(\"/{id}\")", "    public String uploadCollisionsReportPage(Model model, @PathVariable(\"project_id\") int project_id) {\n        model.addAttribute(\"project\", projectService.findOne(project_id));\n        return \"collisions/upload\";\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public String delete(@PathVariable(\"id\") int id, @PathVariable(\"project_id\") int project_id) {\n\n        collisionsService.delete(id);\n        return \"redirect:/projects/\" + project_id + \"/collisions\";\n\n    }\n\n    @PatchMapping(\"/{id}/release\")", "    public String release(@PathVariable(\"id\") int id,\n                          @PathVariable(\"project_id\") int project_id) {\n        collisionsService.release(id);\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @PatchMapping(\"/{id}/assign\")\n    public String assign(@PathVariable(\"id\") int id, @ModelAttribute(\"engineer\")Engineer engineer,\n                         @PathVariable(\"project_id\") int project_id) {\n        collisionsService.assign(id, engineer);\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @GetMapping(\"/{id}/fake\")", "    public String markAsFake(@PathVariable(\"id\") int id, @PathVariable(\"project_id\") int project_id) {\n        collisionsService.markAsFake(id);\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @GetMapping(\"/{id}/not-fake\")\n    public String markAsNotFake(@PathVariable(\"id\") int id, @PathVariable(\"project_id\") int project_id) {\n        collisionsService.markAsNotFake(id);\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @PostMapping(\"/{id}/add-comment\")", "    public String addComment(@PathVariable(\"id\") int id,\n                             @RequestParam(\"comment\") String comment,\n                             @PathVariable(\"project_id\") int project_id) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        EngineerDetails engineerDetails = (EngineerDetails) authentication.getPrincipal();\n        collisionsService.addComment(id, engineerDetails.getEngineer(), comment);\n\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n}\n"]}
