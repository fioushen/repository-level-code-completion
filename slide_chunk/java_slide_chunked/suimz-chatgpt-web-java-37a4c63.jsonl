{"filename": "src/main/java/com/suimz/open/chatgptweb/java/Application.java", "chunked_list": ["package com.suimz.open.chatgptweb.java;\n\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;", "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.core.io.ClassPathResource;\n\nimport javax.annotation.Resource;\n\n@Slf4j\n@SpringBootApplication\npublic class Application implements CommandLineRunner {\n\n\t@Resource\n\tprivate AppProperties appProperties;\n", "public class Application implements CommandLineRunner {\n\n\t@Resource\n\tprivate AppProperties appProperties;\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tautoCreateConfigFile(args);\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n\t@Override", "\tpublic void run(String... args) {\n\t\tif (StrUtil.isAllBlank(appProperties.getOpenaiApiKey(), appProperties.getOpenaiAccessToken())) {\n\t\t\tthrow new RuntimeException(\"[ app.openai-api-key ] and [ app.openai-access-token ] configure at least one\");\n\t\t}\n\t}\n\n\t/**\n\t * Before the program starts, if the `--spring.config.additional-location` parameter is passed in,\n\t * will judge whether the file exists, and if file does not exist, will automatically create and fill the template content.\n\t *\n\t * -- This is a move to let docker map out the default configuration file.\n\t */\n\tprivate static void autoCreateConfigFile(String[] args) throws Exception {", "\t\tif (ObjectUtil.isEmpty(args)) return;\n\t\tString configFilePath = null;\n\t\tString additionalLocationPrefix = \"--spring.config.additional-location=\";\n\t\tfor (String arg : args) {\n\t\t\tif (StrUtil.startWith(arg, additionalLocationPrefix)) {\n\t\t\t\tconfigFilePath = arg.substring(additionalLocationPrefix.length());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (StrUtil.isBlank(configFilePath)) return;\n\t\tif (!FileUtil.exist(configFilePath)) {\n\t\t\tlog.info(\"Created config file: {}\", configFilePath);\n\t\t\tFileUtil.writeFromStream(new ClassPathResource(\"application-app.properties\").getInputStream(), configFilePath);\n\t\t}\n\t}\n}\n", "\t\tif (StrUtil.isBlank(configFilePath)) return;\n\t\tif (!FileUtil.exist(configFilePath)) {\n\t\t\tlog.info(\"Created config file: {}\", configFilePath);\n\t\t\tFileUtil.writeFromStream(new ClassPathResource(\"application-app.properties\").getInputStream(), configFilePath);\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/util/SpringUtil.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeansException;\nimport org.springframework.boot.system.ApplicationHome;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;", "import org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.File;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * Spring Tools", "/**\n * Spring Tools\n *\n * @author https://github.com/suimz\n */\n@Component\n@Slf4j\npublic class SpringUtil implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    @Override", "    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        if (SpringUtil.applicationContext == null) {\n            SpringUtil.applicationContext = applicationContext;\n        }\n    }\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    public static Object getBean(String name){\n        return getApplicationContext().getBean(name);\n    }\n\n    public static <T> T getBean(Class<T> clazz){\n        return getApplicationContext().getBean(clazz);\n    }\n\n    public static <T> T getBean(String name,Class<T> clazz){\n        return getApplicationContext().getBean(name, clazz);\n    }\n", "    public static Object getBean(String name){\n        return getApplicationContext().getBean(name);\n    }\n\n    public static <T> T getBean(Class<T> clazz){\n        return getApplicationContext().getBean(clazz);\n    }\n\n    public static <T> T getBean(String name,Class<T> clazz){\n        return getApplicationContext().getBean(name, clazz);\n    }\n", "    public static HttpServletRequest getHttpRequest() {\n        ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        return servletRequestAttributes.getRequest();\n    }\n\n    public static String getClientIp() {\n        HttpServletRequest httpRequest = getHttpRequest();\n        if (httpRequest == null) return null;\n        String ipAddress = null;\n        try {\n            ipAddress = httpRequest.getHeader(\"x-forwarded-for\");", "        try {\n            ipAddress = httpRequest.getHeader(\"x-forwarded-for\");\n            if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n                ipAddress = httpRequest.getHeader(\"Proxy-Client-IP\");\n            }\n            if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n                ipAddress = httpRequest.getHeader(\"WL-Proxy-Client-IP\");\n            }\n            if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n                ipAddress = httpRequest.getRemoteAddr();\n                if (ipAddress.equals(\"127.0.0.1\") || ipAddress.equals(\"0:0:0:0:0:0:0:1\")) {\n                    InetAddress inet = null;", "            if (ipAddress == null || ipAddress.length() == 0 || \"unknown\".equalsIgnoreCase(ipAddress)) {\n                ipAddress = httpRequest.getRemoteAddr();\n                if (ipAddress.equals(\"127.0.0.1\") || ipAddress.equals(\"0:0:0:0:0:0:0:1\")) {\n                    InetAddress inet = null;\n                    try {\n                        inet = InetAddress.getLocalHost();\n                    } catch (UnknownHostException e) {\n                        e.printStackTrace();\n                    }\n                    ipAddress = inet.getHostAddress();\n                }\n            }", "            if (ipAddress != null && ipAddress.length() > 15) {\n                if (ipAddress.indexOf(\",\") > 0) {\n                    ipAddress = ipAddress.substring(0, ipAddress.indexOf(\",\"));\n                }\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n        return ipAddress;\n    }\n", "    public static String getApplicationHomeAbsolutePath() {\n        ApplicationHome home = new ApplicationHome(SpringUtil.class);\n        File jarFile = home.getSource();\n        return jarFile.getParentFile().toString();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/util/ObjUtil.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n * Object Tools\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Slf4j\n@Component\npublic class ObjUtil  {\n\n    public static String getNotBlankValSequential(String defaultValue, String ...strings) {\n        for (String str : strings) {\n            if (str != null && str.length() > 0) {\n                return str;\n            }\n        }\n        return defaultValue;\n    }\n", "            if (str != null && str.length() > 0) {\n                return str;\n            }\n        }\n        return defaultValue;\n    }\n\n    public static int getNotNullValSequential(int defaultValue, Integer ...objects) {\n        for (Integer obj : objects) {\n            if (obj != null) {\n                return obj;\n            }\n        }\n        return defaultValue;\n    }\n", "        for (Integer obj : objects) {\n            if (obj != null) {\n                return obj;\n            }\n        }\n        return defaultValue;\n    }\n\n    public static String getNotNullValSequential(String defaultValue, Object ...objects) {\n        for (Object obj : objects) {\n            if (obj != null) {\n                return String.valueOf(obj);\n            }\n        }\n        return defaultValue;\n    }\n\n}\n", "    public static String getNotNullValSequential(String defaultValue, Object ...objects) {\n        for (Object obj : objects) {\n            if (obj != null) {\n                return String.valueOf(obj);\n            }\n        }\n        return defaultValue;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/controller/AppController.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.controller;\n\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.bean.constant.ApiRunMode;\nimport com.suimz.open.chatgptweb.java.bean.req.AuthVerifyReq;\nimport com.suimz.open.chatgptweb.java.bean.req.ChatProcessReq;\nimport com.suimz.open.chatgptweb.java.bean.resp.ConfigResp;\nimport com.suimz.open.chatgptweb.java.bean.resp.R;\nimport com.suimz.open.chatgptweb.java.bean.resp.SessionResp;", "import com.suimz.open.chatgptweb.java.bean.resp.R;\nimport com.suimz.open.chatgptweb.java.bean.resp.SessionResp;\nimport com.suimz.open.chatgptweb.java.core.component.ratelimiter.ApiRateLimiter;\nimport com.suimz.open.chatgptweb.java.core.exception.ApiRequestErrorBizException;\nimport com.suimz.open.chatgptweb.java.core.exception.BizException;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport com.suimz.open.chatgptweb.java.service.OpenAiApiService;\nimport com.suimz.open.chatgptweb.java.service.OpenAiReverseService;\nimport com.suimz.open.chatgptweb.java.util.ObjUtil;\nimport com.theokanning.openai.OpenAiHttpException;", "import com.suimz.open.chatgptweb.java.util.ObjUtil;\nimport com.theokanning.openai.OpenAiHttpException;\nimport javax.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.IOException;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\n\n/**\n * Server API Controller", "/**\n * Server API Controller\n *\n * @author https://github.com/suimz\n */\n@RestController\n@RequestMapping(\"/api\")\n@Slf4j\npublic class AppController {\n    @Resource\n    private AppProperties appProperties;\n    @Resource\n    private ThreadPoolTaskExecutor asyncTaskExecutor;\n    @Resource\n    private OpenAiApiService openAiApiService;\n    @Resource\n    private OpenAiReverseService openAiReverseService;\n\n    @PostMapping(\"/session\")\n    public R<SessionResp> session() {\n        return R.ok(\n                SessionResp.builder()\n                        .auth(StrUtil.isNotBlank(appProperties.getAuthSecretKey()))\n                        .model(ApiRunMode.get(appProperties).getName())\n                        .build()\n        );\n    }\n\n    @PostMapping(\"/config\")\n    public R<ConfigResp> config() {\n        String socksProxy;", "public class AppController {\n    @Resource\n    private AppProperties appProperties;\n    @Resource\n    private ThreadPoolTaskExecutor asyncTaskExecutor;\n    @Resource\n    private OpenAiApiService openAiApiService;\n    @Resource\n    private OpenAiReverseService openAiReverseService;\n\n    @PostMapping(\"/session\")\n    public R<SessionResp> session() {\n        return R.ok(\n                SessionResp.builder()\n                        .auth(StrUtil.isNotBlank(appProperties.getAuthSecretKey()))\n                        .model(ApiRunMode.get(appProperties).getName())\n                        .build()\n        );\n    }\n\n    @PostMapping(\"/config\")\n    public R<ConfigResp> config() {\n        String socksProxy;", "        if (appProperties.getSocksProxy() != null && ObjectUtil.isAllNotEmpty(appProperties.getSocksProxy().getHost(), appProperties.getSocksProxy().getPort())) {\n            socksProxy = StrUtil.format(\"{}:{}\", appProperties.getSocksProxy().getHost(), appProperties.getSocksProxy().getPort());\n        } else {\n            socksProxy = \"-\";\n        }\n\n        String httpProxy;\n        if (appProperties.getHttpProxy() != null && ObjectUtil.isAllNotEmpty(appProperties.getHttpProxy().getHost(), appProperties.getHttpProxy().getPort())) {\n            httpProxy = StrUtil.format(\"{}:{}\", appProperties.getHttpProxy().getHost(), appProperties.getHttpProxy().getPort());\n        } else {\n            httpProxy = \"-\";\n        }\n\n        Double balance = null;\n        ApiRunMode apiRunMode = ApiRunMode.get(appProperties);", "        if (apiRunMode == ApiRunMode.API) {\n            balance = openAiApiService.queryBalance();\n        }\n\n        return R.ok(\n                ConfigResp.builder()\n                        .apiModel(apiRunMode.getName())\n                        .timeoutMs(appProperties.getApiTimeoutMs())\n                        .httpsProxy(httpProxy)\n                        .socksProxy(socksProxy)\n                        .reverseProxy(ObjUtil.getNotBlankValSequential(\"-\", appProperties.getOpenaiReverseApiProxyUrl()))\n                        .balance(ObjUtil.getNotNullValSequential(\"-\", balance))\n                        .build()\n        );\n    }\n\n    @PostMapping(\"/verify\")\n    public R<SessionResp> authVerify(@RequestBody @Validated AuthVerifyReq req) {", "        if (!StrUtil.equals(appProperties.getAuthSecretKey(), req.getToken())) {\n            throw new BizException(\"Secret key is invalid\");\n        }\n        return R.ok(\"Verify successfully\");\n    }\n\n    @ApiRateLimiter\n    @PostMapping(\"/chat-process\")\n    public SseEmitter chatProcess(@RequestBody @Validated ChatProcessReq req) {\n        SseEmitter sseEmitter = new SseEmitter(appProperties.getApiTimeoutMs());\n        asyncTaskExecutor.execute(() -> {", "    public SseEmitter chatProcess(@RequestBody @Validated ChatProcessReq req) {\n        SseEmitter sseEmitter = new SseEmitter(appProperties.getApiTimeoutMs());\n        asyncTaskExecutor.execute(() -> {\n            try {\n                switch (ApiRunMode.get(appProperties)) {\n                    case API:\n                        openAiApiService.streamChat(sseEmitter, req);\n                        break;\n                    case REVERSE:\n                        openAiReverseService.streamChat(sseEmitter, req);\n                        break;\n                }\n            } catch (Throwable e) {\n                log.error(e.getMessage(), e);\n                BizException thrEx;", "                if (e instanceof BizException) {\n                    thrEx = (BizException) e;\n                } else if (e instanceof OpenAiHttpException) {\n                    OpenAiHttpException exception = (OpenAiHttpException) e;\n                    thrEx = new ApiRequestErrorBizException(exception.statusCode, exception.getMessage());\n                } else if (e.getCause() instanceof SocketTimeoutException) {\n                    thrEx = new ApiRequestErrorBizException(0);\n                } else if (e.getCause() instanceof SocketException || e.getCause() instanceof IOException) {\n                    thrEx = new ApiRequestErrorBizException(-1);\n                } else {\n                    thrEx = new ApiRequestErrorBizException();\n                }\n                sseEmitter.completeWithError(thrEx);\n            }\n        });\n        return sseEmitter;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/component/ratelimiter/ApiRateLimiter.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.component.ratelimiter;\n\nimport java.lang.annotation.*;\n\n/**\n * API request rate restriction - Annotation\n *\n * @author https://github.com/suimz\n */\n@Target(ElementType.METHOD)", " */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface ApiRateLimiter {\n\n}\n\n", ""]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/component/ratelimiter/ApiRateLimiterAspect.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.component.ratelimiter;\n\nimport com.suimz.open.chatgptweb.java.core.exception.ChatApiRequestTooManyBizException;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport com.suimz.open.chatgptweb.java.util.SpringUtil;\nimport io.github.resilience4j.ratelimiter.RateLimiter;\nimport io.github.resilience4j.ratelimiter.RateLimiterConfig;\nimport io.github.resilience4j.ratelimiter.RateLimiterRegistry;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;", "import org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Method;\nimport java.time.Duration;\n\n/**", "\n/**\n * API request rate restriction - Handle\n *\n * @author https://github.com/suimz\n */\n@Aspect\n@Component\npublic class ApiRateLimiterAspect {\n    private RateLimiterRegistry rateLimiterRegistry = null;\n\n    public ApiRateLimiterAspect(AppProperties appProperties) {\n        Integer period = appProperties.getMaxRequestPerHour();", "public class ApiRateLimiterAspect {\n    private RateLimiterRegistry rateLimiterRegistry = null;\n\n    public ApiRateLimiterAspect(AppProperties appProperties) {\n        Integer period = appProperties.getMaxRequestPerHour();\n        if (period != null && period > 0) {\n            this.rateLimiterRegistry = RateLimiterRegistry.of(\n                    RateLimiterConfig.custom()\n                            .limitForPeriod(period) // Maximum number of requests\n                            .limitRefreshPeriod(Duration.ofHours(1)) // 1 hour\n                            .timeoutDuration(Duration.ofMillis(1))\n                            .build()\n            );\n        }\n    }\n\n    @Before(\"@annotation(apiRateLimiter)\")", "    public void doBefore(JoinPoint point, ApiRateLimiter apiRateLimiter) {\n        if (this.rateLimiterRegistry == null) return;\n        RateLimiter rateLimiter = rateLimiterRegistry.rateLimiter(getCombineKey(point));\n        if (!rateLimiter.acquirePermission()) throw new ChatApiRequestTooManyBizException();\n    }\n\n    public String getCombineKey(JoinPoint point) {\n        StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");\n        MethodSignature signature = (MethodSignature) point.getSignature();\n        Method method = signature.getMethod();\n        Class<?> targetClass = method.getDeclaringClass();\n        sb.append(targetClass.getName()).append(\"-\").append(method.getName());\n        return sb.toString();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/properties/AppProperties.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.properties;\n\nimport cn.hutool.core.util.ObjectUtil;\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n/**\n * Server Configuration Properties\n *", " * Server Configuration Properties\n *\n * @author https://github.com/suimz\n */\n@Data\n@Component\n@ConfigurationProperties(prefix = \"app\")\npublic class AppProperties {\n\n    /**\n     * Front-End Authorization Key\n     */\n    private String authSecretKey;\n\n    /**\n     * OpenAI API KEY\n     */\n    private String openaiApiKey;\n\n    /**\n     * OpenAI API Model - https://platform.openai.com/docs/models\n     */\n    private String openaiApiMode=\"gpt-3.5-turbo\";\n\n    /**\n     * OpenAI API Base URL - https://api.openai.com\n     */\n    private String openaiApiBaseUrl=\"https://api.openai.com\";\n\n    /**\n     * Change this to an `accessToken` extracted from the ChatGPT site's `https://chat.openai.com/api/auth/session` response\n     */\n    private String openaiAccessToken;\n\n    /**\n     * Used to query balance, change this to an `sensitiveId` extracted from the ChatGPT site's `https://platform.openai.com/account/usage`\n     */\n    private String openaiSensitiveId;\n\n    /**\n     * Uses an unofficial proxy server to access ChatGPT's backend API\n     */\n    private String openaiReverseApiProxyUrl=\"https://bypass.churchless.tech/api/conversation\";\n\n    /**\n     * Print API request log\n     */\n    private Boolean apiDisableLog=false;\n\n    /**\n     * API request timeout, ms\n     */\n    private Long apiTimeoutMs = 2 * 60 * 1000L;\n\n    /**\n     * Chat API maximum number of requests per hour, 0 - unlimited\n     */\n    private Integer maxRequestPerHour=0;\n\n    /**\n     * Socks Proxy\n     */\n    private SocksProxy socksProxy;\n\n    /**\n     * HTTP Proxy\n     */\n    private HttpProxy httpProxy;\n\n    /**\n     * (optional) Cross domain lists.\n     * Examples:\n     *  https://*.domain1.com -- domains ending with domain1.com;\n     *  https://*.domain1.com:[8080,8081] -- domains ending with domain1.com on port 8080 or port 8081;\n     *  https://*.domain1.com:[*] -- domains ending with domain1.com on any port, including the default port;\n     *  comma-delimited list of patters, e.g. \"https://*.a1.com,https://*.a2.com\";\n     *  \"*\"  - will be fully open;\n     */\n    private String corsAllowedOrigin;\n\n    @Data", "    public static class SocksProxy {\n        private String host;\n        private Integer port;\n        private String username;\n        private String password;\n\n        public boolean isAvailable() {\n            return ObjectUtil.isAllNotEmpty(host, port);\n        }\n    }\n\n    @Data", "    public static class HttpProxy {\n        private String host;\n        private Integer port;\n\n        public boolean isAvailable() {\n            return ObjectUtil.isAllNotEmpty(host, port);\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/interceptor/AuthInterceptor.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.interceptor;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.core.exception.UnauthorizedBizException;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.suimz.open.chatgptweb.java.util.SpringUtil;\nimport org.springframework.web.servlet.HandlerInterceptor;", "import com.suimz.open.chatgptweb.java.util.SpringUtil;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\n/**\n * Interceptor - Client permission valid\n *\n * @author https://github.com/suimz\n */\npublic class AuthInterceptor implements HandlerInterceptor {\n\n    private final AppProperties appProperties;\n\n    public AuthInterceptor(AppProperties appProperties) {\n        this.appProperties = appProperties;\n    }\n\n    @Override", "public class AuthInterceptor implements HandlerInterceptor {\n\n    private final AppProperties appProperties;\n\n    public AuthInterceptor(AppProperties appProperties) {\n        this.appProperties = appProperties;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        if (StrUtil.isNotBlank(appProperties.getAuthSecretKey())) {\n            String token = getToken(request);", "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\n        if (StrUtil.isNotBlank(appProperties.getAuthSecretKey())) {\n            String token = getToken(request);\n            if (!StrUtil.equals(appProperties.getAuthSecretKey(), token)) {\n                throw new UnauthorizedBizException();\n            }\n        }\n        return true;\n    }\n\n    public String getToken(HttpServletRequest request) {\n        String bearer = request.getHeader(\"Authorization\");\n        return StrUtil.startWith(bearer, \"Bearer \") ? bearer.split(\" \")[1] : null;\n    }\n\n}\n", "    public String getToken(HttpServletRequest request) {\n        String bearer = request.getHeader(\"Authorization\");\n        return StrUtil.startWith(bearer, \"Bearer \") ? bearer.split(\" \")[1] : null;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/AdviceException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\nimport com.suimz.open.chatgptweb.java.bean.resp.R;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;", "import org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**", "\n/**\n * Handle Exceptions\n *\n * @author https://github.com/suimz\n */\n@RestControllerAdvice\npublic class AdviceException {\n\n    @ExceptionHandler(BizException.class)\n    public ResponseEntity<R> map(BizException e) {\n        return ResponseEntity.status(e.getHttpStatus()).body(R.error(e.getMessage()));\n    }\n\n    @ExceptionHandler(UnauthorizedBizException.class)", "    public R map(UnauthorizedBizException e) {\n        return R.builder()\n                .status(\"Unauthorized\")\n                .message(e.getMessage())\n                .build();\n    }\n\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    public R map(HttpMessageNotReadableException e) {\n        return R.error(\"bad request\");\n    }\n\n    @ExceptionHandler(BindException.class)", "    public R map(HttpMessageNotReadableException e) {\n        return R.error(\"bad request\");\n    }\n\n    @ExceptionHandler(BindException.class)\n    public R map(BindException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        Map<String, Object> error = this.getValidError(fieldErrors);\n        return R.error(error.get(\"errorMsg\").toString());\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)", "    public R map(MethodArgumentNotValidException e) {\n        List<FieldError> fieldErrors = e.getBindingResult().getFieldErrors();\n        Map<String, Object> error = this.getValidError(fieldErrors);\n        return R.error(error.get(\"errorMsg\").toString());\n    }\n\n    private Map<String, Object> getValidError(List<FieldError> fieldErrors) {\n        Map<String, Object> map = new HashMap<String, Object>(16);\n        List<String> errorList = new ArrayList<String>();\n        StringBuffer errorMsg = new StringBuffer();\n        for (FieldError error : fieldErrors) {\n            errorList.add(error.getDefaultMessage());\n            errorMsg.append(error.getDefaultMessage());\n            // first\n            break;\n        }\n        map.put(\"errorList\", errorList);\n        map.put(\"errorMsg\", errorMsg);\n        return map;\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)", "        for (FieldError error : fieldErrors) {\n            errorList.add(error.getDefaultMessage());\n            errorMsg.append(error.getDefaultMessage());\n            // first\n            break;\n        }\n        map.put(\"errorList\", errorList);\n        map.put(\"errorMsg\", errorMsg);\n        return map;\n    }\n\n    @ExceptionHandler(MethodArgumentTypeMismatchException.class)", "    public R map(MethodArgumentTypeMismatchException e) {\n        return R.error(e.getMessage());\n    }\n\n    @ExceptionHandler(Exception.class)\n    public R map(Exception e) {\n        return R.error();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/UnauthorizedBizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\nimport org.springframework.http.HttpStatus;\n\n/**\n * Unauthorized Exception\n *\n * @author https://github.com/suimz\n */\npublic class UnauthorizedBizException extends BizException {\n    public UnauthorizedBizException() {\n        super(HttpStatus.UNAUTHORIZED, \"Error: \u65e0\u8bbf\u95ee\u6743\u9650 | No access rights\");\n    }\n}\n", " */\npublic class UnauthorizedBizException extends BizException {\n    public UnauthorizedBizException() {\n        super(HttpStatus.UNAUTHORIZED, \"Error: \u65e0\u8bbf\u95ee\u6743\u9650 | No access rights\");\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/ReverseServiceNotInitializedBizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\npublic class ReverseServiceNotInitializedBizException extends BizException {\n    public ReverseServiceNotInitializedBizException() {\n        super(\"Reverse Service not initialized\");\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/ChatApiRequestTooManyBizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\npublic class ChatApiRequestTooManyBizException extends BizException {\n    public ChatApiRequestTooManyBizException() {\n        super(\"Too many request from this IP in 1 hour\");\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/ApiServiceNotInitializedBizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\npublic class ApiServiceNotInitializedBizException extends BizException {\n    public ApiServiceNotInitializedBizException() {\n        super(\"API Service not initialized\");\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/ApiRequestErrorBizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ApiRequestErrorBizException extends BizException {\n\n    public static final Map<Integer, String> OPENAI_HTTP_ERROR;\n    static {\n        OPENAI_HTTP_ERROR = new HashMap<>();\n        OPENAI_HTTP_ERROR.put(-1, \"[OpenAI] \u53d1\u9001\u8bf7\u6c42\u5931\u8d25 | Failed to send request\");\n        OPENAI_HTTP_ERROR.put(0, \"[OpenAI] \u8bf7\u6c42\u8d85\u65f6 | Request timeout\");\n        OPENAI_HTTP_ERROR.put(401, \"[OpenAI] \u63d0\u4f9b\u9519\u8bef\u7684API\u5bc6\u94a5 | Incorrect API key provided\");\n        OPENAI_HTTP_ERROR.put(403, \"[OpenAI] \u670d\u52a1\u5668\u62d2\u7edd\u8bbf\u95ee\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5 | Server refused to access, please try again later\");\n        OPENAI_HTTP_ERROR.put(429, \"[OpenAI] \u8bbf\u95ee\u901f\u7387\u53d7\u9650\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5 | Access rate is limited, please try again later\");\n        OPENAI_HTTP_ERROR.put(500, \"[OpenAI] \u670d\u52a1\u5668\u7e41\u5fd9\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5 | Internal Server Error\");\n        OPENAI_HTTP_ERROR.put(502, \"[OpenAI] \u9519\u8bef\u7684\u7f51\u5173 |  Bad Gateway\");\n        OPENAI_HTTP_ERROR.put(503, \"[OpenAI] \u670d\u52a1\u5668\u7e41\u5fd9\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5 | Server is busy, please try again later\");\n        OPENAI_HTTP_ERROR.put(504, \"[OpenAI] \u7f51\u5173\u8d85\u65f6 | Gateway Time-out\");\n    }\n\n    public ApiRequestErrorBizException() {\n        this(500);\n    }\n\n    public ApiRequestErrorBizException(int statusCode) {\n        this(statusCode, OPENAI_HTTP_ERROR.get(500));\n    }\n\n    public ApiRequestErrorBizException(int statusCode, String defaultMsg) {\n        super(OPENAI_HTTP_ERROR.getOrDefault(statusCode, defaultMsg));\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/exception/BizException.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.exception;\n\nimport lombok.Getter;\nimport org.springframework.http.HttpStatus;\n\n/**\n * Business Exception Class\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Getter\npublic class BizException extends RuntimeException {\n\n    private HttpStatus httpStatus = HttpStatus.OK;\n\n    public BizException(String msg) {\n        super(msg);\n    }\n\n    public BizException(HttpStatus status) {\n        this(status, status.getReasonPhrase());\n    }\n\n    public BizException(HttpStatus httpStatus, String msg) {\n        super(msg);\n        this.httpStatus = httpStatus;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/conf/MvcConfig.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.conf;\n\nimport com.suimz.open.chatgptweb.java.core.interceptor.AuthInterceptor;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport javax.annotation.Resource;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;", "import org.springframework.core.io.ResourceLoader;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * MVC Configuration\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Configuration\npublic class MvcConfig implements WebMvcConfigurer {\n\n    @Resource\n    private AppProperties appProperties;\n    @Resource\n    private ResourceLoader resourceLoader;\n\n    @Override", "    public void addViewControllers(@NotNull ViewControllerRegistry registry) {\n        org.springframework.core.io.Resource resource = resourceLoader.getResource(\"classpath:/static/index.html\");\n        if (resource.exists()) {\n            registry.addViewController(\"/\").setViewName(\"forward:/index.html\");\n        }\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // Client Authentication\n        registry.addInterceptor(new AuthInterceptor(appProperties)).addPathPatterns(\"/**\")\n        .excludePathPatterns(\"/\", \"/api/verify\", \"/api/session\"\n                ,\"/**/**.html\"\n                ,\"/**/**.js\"\n                ,\"/**/**.css\"\n                ,\"/**/**.ico\"\n                ,\"/**/**.png\"\n                ,\"/**/**.jpg\"\n                ,\"/**/**.svg\"\n                ,\"/**/**.gif\"\n                ,\"/**/**.webmanifest\"\n        );\n    }\n\n}\n", "    public void addInterceptors(InterceptorRegistry registry) {\n        // Client Authentication\n        registry.addInterceptor(new AuthInterceptor(appProperties)).addPathPatterns(\"/**\")\n        .excludePathPatterns(\"/\", \"/api/verify\", \"/api/session\"\n                ,\"/**/**.html\"\n                ,\"/**/**.js\"\n                ,\"/**/**.css\"\n                ,\"/**/**.ico\"\n                ,\"/**/**.png\"\n                ,\"/**/**.jpg\"\n                ,\"/**/**.svg\"\n                ,\"/**/**.gif\"\n                ,\"/**/**.webmanifest\"\n        );\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/conf/AsyncTaskPoolConfig.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.conf;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\n/**\n * Asynchronous task thread pool configuration", "/**\n * Asynchronous task thread pool configuration\n *\n * @author https://github.com/suimz\n */\n@Configuration\npublic class AsyncTaskPoolConfig {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncTaskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(Runtime.getRuntime().availableProcessors() * 2);\n        executor.setQueueCapacity(executor.getCorePoolSize() * 10);\n        executor.setMaxPoolSize(executor.getCorePoolSize() * 10);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"AsyncTask-\");\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        executor.initialize();\n        return executor;\n    }\n}\n", "    public ThreadPoolTaskExecutor asyncTaskExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(Runtime.getRuntime().availableProcessors() * 2);\n        executor.setQueueCapacity(executor.getCorePoolSize() * 10);\n        executor.setMaxPoolSize(executor.getCorePoolSize() * 10);\n        executor.setKeepAliveSeconds(60);\n        executor.setThreadNamePrefix(\"AsyncTask-\");\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        executor.initialize();\n        return executor;\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/conf/MsgStoreConfig.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.conf;\n\nimport com.suimz.open.chatgptweb.java.service.store.IMsgStoreService;\nimport com.suimz.open.chatgptweb.java.service.store.MemMsgStoreService;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Chat Message Store config", "/**\n * Chat Message Store config\n *\n * @author https://github.com/suimz\n */\n@Configuration\npublic class MsgStoreConfig {\n\n    @Bean\n    @ConditionalOnProperty(name = \"app.chat-message-store\", havingValue = \"memory\", matchIfMissing = true)\n    public IMsgStoreService memoryMsgStoreService() {\n        // memory-store\n        return new MemMsgStoreService();\n    }\n\n    @Bean\n    @ConditionalOnProperty(name = \"app.chat-message-store\", havingValue = \"mysql\")", "    public IMsgStoreService memoryMsgStoreService() {\n        // memory-store\n        return new MemMsgStoreService();\n    }\n\n    @Bean\n    @ConditionalOnProperty(name = \"app.chat-message-store\", havingValue = \"mysql\")\n    public IMsgStoreService mysqlMsgStoreService() {\n        // TODO mysql-store\n        return null;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/conf/OkHttpConfig.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.conf;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.*;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n", "import org.springframework.context.annotation.Configuration;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\n/**", "\n/**\n * OkHttp Client initialize\n *\n * @author https://github.com/suimz\n */\n@Slf4j\n@Configuration\npublic class OkHttpConfig {\n\n    @Bean", "public class OkHttpConfig {\n\n    @Bean\n    public OkHttpClient okHttpClient(AppProperties appProperties) {\n        ConnectionPool connectionPool = new ConnectionPool(5, 1, TimeUnit.SECONDS);\n        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder()\n                .connectionPool(connectionPool)\n                .readTimeout(appProperties.getApiTimeoutMs(), TimeUnit.MILLISECONDS);\n\n        String openaiApiKey = appProperties.getOpenaiApiKey();\n        if (StrUtil.isNotBlank(openaiApiKey)) {\n            clientBuilder.addInterceptor(new AuthenticationInterceptor(openaiApiKey));\n        }\n\n        // Print api request log", "        if (StrUtil.isNotBlank(openaiApiKey)) {\n            clientBuilder.addInterceptor(new AuthenticationInterceptor(openaiApiKey));\n        }\n\n        // Print api request log\n        if (appProperties.getApiDisableLog()) {\n            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\n            logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n            clientBuilder.addInterceptor(logging).build();\n        }\n\n        // proxy\n        this.setupProxy(clientBuilder, appProperties);\n\n        return clientBuilder.build();\n    }\n\n    /**\n     * Set okHttp Client Proxy\n     */\n    private void setupProxy(OkHttpClient.Builder clientBuilder, AppProperties appProperties) {\n        AppProperties.SocksProxy socksProxyConfig = appProperties.getSocksProxy();\n        AppProperties.HttpProxy httpProxyConfig = appProperties.getHttpProxy();\n\n        Proxy proxy = null;", "        if (socksProxyConfig != null && socksProxyConfig.isAvailable()) {\n            // Socks Proxy\n            proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(socksProxyConfig.getHost(), socksProxyConfig.getPort()));\n            // socks authentication\n            if (StrUtil.isAllNotBlank(socksProxyConfig.getUsername(), socksProxyConfig.getPassword())) {\n                java.net.Authenticator.setDefault(new ProxyAuthenticator(socksProxyConfig.getUsername(), socksProxyConfig.getPassword()));\n            }\n        } else if (httpProxyConfig != null && httpProxyConfig.isAvailable()) {\n            // HTTP proxy\n            proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(httpProxyConfig.getHost(), httpProxyConfig.getPort()));\n            clientBuilder.proxy(proxy);\n        }\n", "        if (proxy != null) {\n            clientBuilder.proxy(proxy);\n            log.info(\"OkHttp Proxy configured: {}\", proxy);\n        }\n    }\n\n    public static class AuthenticationInterceptor implements Interceptor {\n        private final String token;\n\n        public AuthenticationInterceptor(String token) {\n            Objects.requireNonNull(token, \"OpenAI token required\");\n            this.token = token;\n        }\n\n        @Override", "        public Response intercept(Chain chain) throws IOException {\n            Request request = chain.request();\n            if (chain.request().header(\"Authorization\") == null) {\n                request = chain.request()\n                        .newBuilder()\n                        .header(\"Authorization\", \"Bearer \" + token)\n                        .build();\n            }\n            return chain.proceed(request);\n        }\n    }\n", "    public class ProxyAuthenticator extends java.net.Authenticator {\n        private PasswordAuthentication auth;\n        public ProxyAuthenticator(String strUserName, String strPasswd) {\n            auth = new PasswordAuthentication(strUserName, strPasswd.toCharArray());\n        }\n        protected PasswordAuthentication getPasswordAuthentication() {\n            return auth;\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/core/conf/CorsConfig.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.core.conf;\n\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;", "import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * HTTP CORS Configuration\n *\n * @author https://github.com/suimz\n */\n@Configuration\npublic class CorsConfig {\n\t@Bean\n\t@ConditionalOnProperty(name = \"app.cors-allowed-origin\")", "@Configuration\npublic class CorsConfig {\n\t@Bean\n\t@ConditionalOnProperty(name = \"app.cors-allowed-origin\")\n\tpublic FilterRegistrationBean corsFilter(AppProperties properties) {\n\t\tCorsConfiguration config = new CorsConfiguration();\n\t\tconfig.setAllowCredentials(true);\n\t\tconfig.addAllowedMethod(\"*\");\n\t\tconfig.addAllowedHeader(\"*\");\n\t\tconfig.setMaxAge(3600L);\n\t\tconfig.addAllowedOriginPattern(properties.getCorsAllowedOrigin());\n\n\t\t// Apply all path\n\t\tUrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();\n\t\tconfigSource.registerCorsConfiguration(\"/**\", config);\n\n\t\tFilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(configSource));\n\t\tbean.setOrder(0);\n\t\treturn bean;\n\t}\n\t\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/req/ChatProcessReq.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.req;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotBlank;\n\n/**\n * Request Params - chat-process\n *", " * Request Params - chat-process\n *\n * @author https://github.com/suimz\n */\n@Data\npublic class ChatProcessReq {\n\n    @NotBlank(message = \"prompt is empty\")\n    private String prompt;\n\n    private String systemMessage;\n\n    private Options options;\n\n    private Double temperature;\n\n    @JsonProperty(value = \"top_p\")\n    private Double topP;\n\n    @Data", "    public static class Options {\n        private String parentMessageId;\n        private String conversationId;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/req/AuthVerifyReq.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.req;\n\nimport javax.validation.constraints.NotBlank;\nimport lombok.Data;\n\n/**\n * Request Params - verify\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Data\npublic class AuthVerifyReq {\n\n    @NotBlank(message = \"Secret key is empty\")\n    private String token;\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/po/SsePushEventBuilder.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.po;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.util.Collections;\nimport java.util.LinkedHashSet;", "import java.util.Collections;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport static org.springframework.http.MediaType.TEXT_PLAIN;\n\npublic class SsePushEventBuilder implements SseEmitter.SseEventBuilder {\n\n    private final Set<ResponseBodyEmitter.DataWithMediaType> dataToSend = new LinkedHashSet<>(1);\n\n    @Nullable\n    private StringBuilder sb;\n\n    @Override\n    public SseEmitter.SseEventBuilder id(String id) {\n        return this;\n    }\n\n    @Override\n    public SseEmitter.SseEventBuilder name(String name) {\n        return this;\n    }\n\n    @Override\n    public SseEmitter.SseEventBuilder reconnectTime(long reconnectTimeMillis) {\n        return this;\n    }\n\n    @Override\n    public SseEmitter.SseEventBuilder comment(String comment) {\n        return this;\n    }\n\n    @Override\n    public SseEmitter.SseEventBuilder data(Object object) {\n        return data(object, null);\n    }\n\n    @Override\n    public SseEmitter.SseEventBuilder data(Object object, @Nullable MediaType mediaType) {\n        saveAppendedText();\n        this.dataToSend.add(new ResponseBodyEmitter.DataWithMediaType(object, mediaType));\n        append('\\n');\n        return this;\n    }\n\n    SsePushEventBuilder append(char ch) {", "        if (this.sb == null) {\n            this.sb = new StringBuilder();\n        }\n        this.sb.append(ch);\n        return this;\n    }\n\n    @Override\n    public Set<ResponseBodyEmitter.DataWithMediaType> build() {\n        if (!StringUtils.hasLength(this.sb) && this.dataToSend.isEmpty()) {\n            return Collections.emptySet();\n        }\n        saveAppendedText();\n        return this.dataToSend;\n    }\n\n    private void saveAppendedText() {", "        if (!StringUtils.hasLength(this.sb) && this.dataToSend.isEmpty()) {\n            return Collections.emptySet();\n        }\n        saveAppendedText();\n        return this.dataToSend;\n    }\n\n    private void saveAppendedText() {\n        if (this.sb != null) {\n            this.dataToSend.add(new ResponseBodyEmitter.DataWithMediaType(this.sb.toString(), TEXT_PLAIN));\n            this.sb = null;\n        }\n    }\n}", "        if (this.sb != null) {\n            this.dataToSend.add(new ResponseBodyEmitter.DataWithMediaType(this.sb.toString(), TEXT_PLAIN));\n            this.sb = null;\n        }\n    }\n}"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/po/ReverseChatChunk.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.po;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\npublic class ReverseChatChunk {\n\n    private String error;\n\n    @JsonProperty(\"conversation_id\")\n    private String conversationId;\n\n    private Message message;\n\n    @Data", "public class ReverseChatChunk {\n\n    private String error;\n\n    @JsonProperty(\"conversation_id\")\n    private String conversationId;\n\n    private Message message;\n\n    @Data\n    public static class Message {\n        private String id;\n        private Author author;\n        @JsonProperty(\"create_time\")\n        private Double createTime;\n        @JsonProperty(\"update_time\")\n        private Double updateTime;\n        private Content content;\n        @JsonProperty(\"end_turn\")\n        private Boolean endTurn;\n        private Integer weight;\n        private Metadata metadata;\n        private String recipient;\n    }\n\n    @Data", "    public static class Message {\n        private String id;\n        private Author author;\n        @JsonProperty(\"create_time\")\n        private Double createTime;\n        @JsonProperty(\"update_time\")\n        private Double updateTime;\n        private Content content;\n        @JsonProperty(\"end_turn\")\n        private Boolean endTurn;\n        private Integer weight;\n        private Metadata metadata;\n        private String recipient;\n    }\n\n    @Data", "    public static class Content {\n        @JsonProperty(\"content_type\")\n        private String contentType;\n        private List<String> parts;\n    }\n\n    @Data\n    public static class Metadata {\n        @JsonProperty(\"message_type\")\n        private String messageType;\n        @JsonProperty(\"modelSlug\")\n        private String model_slug;\n        @JsonProperty(\"finish_details\")\n        private FinishDetails finishDetails;\n    }\n\n    @Data", "    public static class FinishDetails {\n        private String type;\n        private String stop;\n    }\n\n    @Data\n    public static class Author {\n        private String role;\n        private String name;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/po/ReverseSSE.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.po;\n\npublic class ReverseSSE {\n    private static final String DONE_DATA = \"[DONE]\";\n\n    private final String data;\n\n    public ReverseSSE(String data){\n        this.data = data;\n    }\n", "    public String getData(){\n        return this.data;\n    }\n\n    public byte[] toBytes(){\n        return String.format(\"data: %s\\n\\n\", this.data).getBytes();\n    }\n\n    public boolean isDone(){\n        return DONE_DATA.equalsIgnoreCase(this.data);\n    }\n}\n", "    public boolean isDone(){\n        return DONE_DATA.equalsIgnoreCase(this.data);\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/po/ReverseResponseBodyCallback.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.po;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.OpenAiError;\nimport com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.service.OpenAiService;\nimport com.theokanning.openai.service.SSEFormatException;\nimport io.reactivex.FlowableEmitter;\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;", "import okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.HttpException;\nimport retrofit2.Response;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;", "import java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class ReverseResponseBodyCallback implements Callback<ResponseBody> {\n    private static final ObjectMapper mapper = OpenAiService.defaultObjectMapper();\n\n    private FlowableEmitter<ReverseSSE> emitter;\n    private boolean emitDone;\n\n    public ReverseResponseBodyCallback(FlowableEmitter<ReverseSSE> emitter, boolean emitDone) {\n        this.emitter = emitter;\n        this.emitDone = emitDone;\n    }\n\n    @Override", "    public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n        BufferedReader reader = null;\n\n        try {\n            if (!response.isSuccessful()) {\n                HttpException e = new HttpException(response);\n                ResponseBody errorBody = response.errorBody();\n\n                if (errorBody == null) {\n                    throw e;\n                } else {\n                    OpenAiError error = mapper.readValue(\n                            errorBody.string(),\n                            OpenAiError.class\n                    );\n                    throw new OpenAiHttpException(error, e, e.code());\n                }\n            }\n\n            InputStream in = response.body().byteStream();\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            ReverseSSE sse = null;\n", "                if (errorBody == null) {\n                    throw e;\n                } else {\n                    OpenAiError error = mapper.readValue(\n                            errorBody.string(),\n                            OpenAiError.class\n                    );\n                    throw new OpenAiHttpException(error, e, e.code());\n                }\n            }\n\n            InputStream in = response.body().byteStream();\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            ReverseSSE sse = null;\n", "            while ((line = reader.readLine()) != null) {\n                if (line.startsWith(\"data:\")) {\n                    String data = line.substring(5).trim();\n                    sse = new ReverseSSE(data);\n                } else if (line.equals(\"\") && sse != null) {\n                    if (sse.isDone()) {\n                        if (emitDone) {\n                            emitter.onNext(sse);\n                        }\n                        break;\n                    }\n\n                    emitter.onNext(sse);\n                    sse = null;\n                } else {\n                    throw new SSEFormatException(\"Invalid sse format! \" + line);\n                }\n            }\n\n            emitter.onComplete();\n\n        } catch (Throwable t) {\n            onFailure(call, t);\n        } finally {", "            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    // do nothing\n                }\n            }\n        }\n    }\n\n    @Override", "    public void onFailure(Call<ResponseBody> call, Throwable t) {\n        emitter.onError(t);\n    }\n}"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/po/ChatMsgStoreItem.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.po;\n\nimport lombok.Builder;\nimport lombok.Getter;\n\nimport java.time.LocalDateTime;\n\n/**\n * Save chat history\n *", " * Save chat history\n *\n * @author https://github.com/suimz\n */\n@Builder\n@Getter\npublic class ChatMsgStoreItem {\n\n    /**\n     * required\n     */\n    private String messageId;\n\n    private String text;\n\n    /**\n     * required\n     */\n    private String role;\n\n    private String parentMessageId;\n\n    /**\n     * required\n     */\n    private LocalDateTime created;\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/resp/SessionResp.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.resp;\n\nimport com.suimz.open.chatgptweb.java.bean.constant.ApiRunMode;\nimport lombok.Builder;\nimport lombok.Getter;\n\n/**\n * Response Params - verify\n *\n * @author https://github.com/suimz", " *\n * @author https://github.com/suimz\n */\n@Builder\n@Getter\npublic class SessionResp {\n\n    private boolean auth;\n\n    /**\n     * @see ApiRunMode\n     */\n    private String model;\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/resp/ChatProcessResp.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.resp;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.ToString;\n\nimport java.util.List;\n\n/**\n * Response Params - chat-process", "/**\n * Response Params - chat-process\n *\n * @author https://github.com/suimz\n */\n@Builder\n@Getter\n@ToString\npublic class ChatProcessResp {\n\n    private String id;\n\n    private String text;\n\n    private String role;\n\n    private Detail detail;\n\n    private String delta;\n\n    private String parentMessageId;\n\n    private String conversationId;\n\n    @Builder\n    @Getter", "public class ChatProcessResp {\n\n    private String id;\n\n    private String text;\n\n    private String role;\n\n    private Detail detail;\n\n    private String delta;\n\n    private String parentMessageId;\n\n    private String conversationId;\n\n    @Builder\n    @Getter", "    public static class Detail {\n        private String id;\n        private String object;\n        private Long created;\n        private String model;\n        private List<Choice> choices;\n    }\n\n    @Builder\n    @Getter\n    public static class Choice {\n        private Integer index;\n        private String finish_reason;\n        private Delta delta;\n    }\n\n    @Builder\n    @Getter", "    public static class Choice {\n        private Integer index;\n        private String finish_reason;\n        private Delta delta;\n    }\n\n    @Builder\n    @Getter\n    public static class Delta {\n        private String content;\n    }\n\n}\n", "    public static class Delta {\n        private String content;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/resp/R.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.resp;\n\nimport lombok.Builder;\nimport lombok.Data;\n\n/**\n * API response payload structure\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Builder\n@Data\npublic class R<T> {\n\n    private String status;\n\n    private String message;\n\n    private T data;\n", "    public static R ok() {\n        return R.ok(null);\n    }\n\n    public static R ok(String message) {\n        return R.ok(null, null);\n    }\n\n    public static <T> R<T> ok(T data) {\n        return R.ok(null, data);\n    }\n\n    public static <T> R<T> ok(String message, T data) {\n        return (R<T>) R.builder().status(\"Success\").message(message).data(data).build();\n    }\n", "    public static R error() {\n        return R.error(\"\u670d\u52a1\u5f02\u5e38 | server exception\");\n    }\n\n    public static R error(String error) {\n        return R.builder()\n                .status(\"Fail\")\n                .message(error)\n                .build();\n    }\n\n}"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/resp/ConfigResp.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.resp;\n\nimport lombok.Builder;\nimport lombok.Getter;\n\n/**\n * Response Params - config\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Builder\n@Getter\npublic class ConfigResp {\n\n    private String apiModel;\n\n    private String reverseProxy;\n\n    private Long timeoutMs;\n\n    private String socksProxy;\n\n    private String httpsProxy;\n\n    private String balance;\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/bean/constant/ApiRunMode.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.bean.constant;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport lombok.Getter;\n\n/**\n * Server chat API running mode\n *\n * @author https://github.com/suimz", " *\n * @author https://github.com/suimz\n */\n@Getter\npublic enum ApiRunMode {\n    API(\"ChatGPTAPI\"),\n    REVERSE(\"ChatGPTUnofficialProxyAPI\"),\n    ;\n    ApiRunMode(String name) {\n        this.name = name;\n    }\n\n    private String name;\n", "    public static ApiRunMode get(AppProperties properties) {\n        return StrUtil.isNotBlank(properties.getOpenaiApiKey()) ? ApiRunMode.API : ApiRunMode.REVERSE;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/service/AbstractChatService.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.suimz.open.chatgptweb.java.bean.po.SsePushEventBuilder;\nimport com.suimz.open.chatgptweb.java.bean.req.ChatProcessReq;\nimport com.suimz.open.chatgptweb.java.bean.resp.ChatProcessResp;\nimport com.suimz.open.chatgptweb.java.core.properties.AppProperties;\nimport com.suimz.open.chatgptweb.java.bean.po.ChatMsgStoreItem;\nimport com.suimz.open.chatgptweb.java.service.store.IMsgStoreService;\nimport com.theokanning.openai.service.OpenAiService;", "import com.suimz.open.chatgptweb.java.service.store.IMsgStoreService;\nimport com.theokanning.openai.service.OpenAiService;\nimport javax.annotation.Resource;\nimport okhttp3.OkHttpClient;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**", "\n/**\n * @author https://github.com/suimz\n */\npublic abstract class AbstractChatService {\n    protected ObjectMapper okHttpObjectMapper = OpenAiService.defaultObjectMapper();\n\n    @Resource\n    protected AppProperties appProperties;\n    @Resource\n    protected OkHttpClient okHttpClient;\n    @Resource\n    protected IMsgStoreService msgStoreService;\n\n    /**\n     * stream chat(SSE)\n     *\n     * @param sseEmitter\n     * @param req\n     */", "    public abstract void streamChat(SseEmitter sseEmitter, ChatProcessReq req);\n\n    /**\n     * Push the chat result to the client\n     *\n     * @param sseEmitter\n     * @param resp\n     */\n    protected void pushClient(SseEmitter sseEmitter, ChatProcessResp resp) {\n        try {\n            sseEmitter.send(new SsePushEventBuilder().data(resp));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Save conversation message\n     *\n     * @param messages\n     */\n    protected void saveMessages(ChatMsgStoreItem...messages) {\n        msgStoreService.save(messages);\n    }\n\n    /**\n     * Save conversation message\n     *\n     * @param parentMessageId\n     * @return\n     */\n    protected List<ChatMsgStoreItem> getParentMessages(String parentMessageId) {\n        return msgStoreService.getParentMessages(parentMessageId);\n    }\n}\n", "        try {\n            sseEmitter.send(new SsePushEventBuilder().data(resp));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Save conversation message\n     *\n     * @param messages\n     */\n    protected void saveMessages(ChatMsgStoreItem...messages) {\n        msgStoreService.save(messages);\n    }\n\n    /**\n     * Save conversation message\n     *\n     * @param parentMessageId\n     * @return\n     */\n    protected List<ChatMsgStoreItem> getParentMessages(String parentMessageId) {\n        return msgStoreService.getParentMessages(parentMessageId);\n    }\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/service/OpenAiApiService.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.service;\n\nimport cn.hutool.core.util.IdUtil;\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.suimz.open.chatgptweb.java.bean.po.ChatMsgStoreItem;\nimport com.suimz.open.chatgptweb.java.bean.req.ChatProcessReq;\nimport com.suimz.open.chatgptweb.java.bean.resp.ChatProcessResp;\nimport com.suimz.open.chatgptweb.java.core.exception.ApiServiceNotInitializedBizException;", "import com.suimz.open.chatgptweb.java.bean.resp.ChatProcessResp;\nimport com.suimz.open.chatgptweb.java.core.exception.ApiServiceNotInitializedBizException;\nimport com.suimz.open.chatgptweb.java.util.ObjUtil;\nimport com.theokanning.openai.OpenAiApi;\nimport com.theokanning.openai.completion.chat.ChatCompletionChoice;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\nimport com.theokanning.openai.service.OpenAiService;\nimport io.reactivex.Single;", "import com.theokanning.openai.service.OpenAiService;\nimport io.reactivex.Single;\nimport lombok.Data;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\nimport retrofit2.Retrofit;\nimport retrofit2.http.GET;\nimport retrofit2.http.Header;", "import retrofit2.http.GET;\nimport retrofit2.http.Header;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * OpenAI API Service", "/**\n * OpenAI API Service\n *\n * @author https://github.com/suimz\n */\n@Slf4j\n@Service\npublic class OpenAiApiService extends AbstractChatService implements CommandLineRunner {\n    private OpenAiService openAiService;\n    private OpenAiExtApi openAiExtApi;\n\n    @Override", "    public void run(String... args) {\n        if (StrUtil.isBlank(appProperties.getOpenaiApiKey())) {\n            log.warn(\"The [ app.openai-api-key ] configuration option was not found, init of openAi api service has been skipped\");\n            return;\n        }\n\n        String baseUrl = ObjUtil.getNotBlankValSequential(\"https://api.openai.com\", appProperties.getOpenaiApiBaseUrl());\n        Retrofit retrofit = OpenAiService.defaultRetrofit(okHttpClient, okHttpObjectMapper).newBuilder().baseUrl(baseUrl).build();\n        openAiService = new OpenAiService(retrofit.create(OpenAiApi.class), okHttpClient.dispatcher().executorService());\n        openAiExtApi = retrofit.create(OpenAiExtApi.class);\n\n        log.info(\"Successfully created the openAi api service instance\");\n    }\n", "    public void checkService() {\n        if (StrUtil.isBlank(appProperties.getOpenaiApiKey())) {\n            throw new ApiServiceNotInitializedBizException();\n        }\n    }\n\n    @Override\n    public void streamChat(SseEmitter sseEmitter, ChatProcessReq req) {\n        this.checkService();\n        LocalDateTime startTime = LocalDateTime.now();\n        StringBuilder receiveMsgBuilder = new StringBuilder(\"\");\n\n        Double temperature = req.getTemperature() == null ? 0.8 : req.getTemperature();\n        Double topP = req.getTopP();\n        Integer maxTokens = 4096;\n        ChatCompletionRequest request = ChatCompletionRequest.builder()\n                .model(ObjUtil.getNotBlankValSequential(\"gpt-3.5-turbo\", appProperties.getOpenaiApiMode()))\n                .messages(buildSendMsgBody(req))\n                .temperature(temperature)\n                .topP(topP)\n                // .maxTokens(maxTokens)\n                .build();\n        openAiService.streamChatCompletion(request)\n                .blockingForEach(chunk -> {\n                    String backMsg = null;\n                    boolean stop = false;\n", "                    if (ObjectUtil.isNotEmpty(chunk.getChoices())) {\n                        ChatCompletionChoice choice = chunk.getChoices().get(0);\n                        String finishReason = choice.getFinishReason();\n                        if(finishReason == null && choice.getMessage().getContent() != null) {\n                            backMsg = choice.getMessage().getContent();\n                        } else if (finishReason != null){\n                            backMsg = choice.getMessage().getContent();\n                            stop = true;\n                        }\n                        if (backMsg != null) {\n                            receiveMsgBuilder.append(backMsg);\n\n                            ChatProcessResp.Choice choiceResp = ChatProcessResp.Choice.builder()\n                                    .index(choice.getIndex())\n                                    .finish_reason(choice.getFinishReason())\n                                    .delta(ChatProcessResp.Delta.builder().content(backMsg).build())\n                                    .build();\n                            ChatProcessResp.Detail detailResp = ChatProcessResp.Detail.builder()\n                                    .id(chunk.getId())\n                                    .created(chunk.getCreated())\n                                    .object(chunk.getObject())\n                                    .model(chunk.getModel())\n                                    .choices(Arrays.asList(choiceResp))\n                                    .build();\n                            ChatProcessResp resp = ChatProcessResp.builder()\n                                    .id(chunk.getId())\n                                    .role(choice.getMessage().getRole())\n                                    .text(receiveMsgBuilder.toString())\n                                    .delta(backMsg)\n                                    .detail(detailResp)\n                                    .build();\n                            super.pushClient(sseEmitter, resp);\n                            log.debug(\"push message to client\uff1a{}\", resp);\n                        }", "                        if (backMsg != null) {\n                            receiveMsgBuilder.append(backMsg);\n\n                            ChatProcessResp.Choice choiceResp = ChatProcessResp.Choice.builder()\n                                    .index(choice.getIndex())\n                                    .finish_reason(choice.getFinishReason())\n                                    .delta(ChatProcessResp.Delta.builder().content(backMsg).build())\n                                    .build();\n                            ChatProcessResp.Detail detailResp = ChatProcessResp.Detail.builder()\n                                    .id(chunk.getId())\n                                    .created(chunk.getCreated())\n                                    .object(chunk.getObject())\n                                    .model(chunk.getModel())\n                                    .choices(Arrays.asList(choiceResp))\n                                    .build();\n                            ChatProcessResp resp = ChatProcessResp.builder()\n                                    .id(chunk.getId())\n                                    .role(choice.getMessage().getRole())\n                                    .text(receiveMsgBuilder.toString())\n                                    .delta(backMsg)\n                                    .detail(detailResp)\n                                    .build();\n                            super.pushClient(sseEmitter, resp);\n                            log.debug(\"push message to client\uff1a{}\", resp);\n                        }", "                        if (stop) {\n                            // save message to store\n                            String sendMessageId = IdUtil.simpleUUID();\n                            super.saveMessages(\n                                    // send message\n                                    ChatMsgStoreItem.builder()\n                                            .messageId(sendMessageId)\n                                            .text(req.getPrompt())\n                                            .parentMessageId(req.getOptions() != null ? req.getOptions().getParentMessageId() : null)\n                                            .role(ChatMessageRole.USER.value())\n                                            .created(startTime)\n                                            .build(),\n                                    // receive message\n                                    ChatMsgStoreItem.builder()\n                                            .messageId(chunk.getId())\n                                            .text(receiveMsgBuilder.toString())\n                                            .parentMessageId(sendMessageId)\n                                            .role(ChatMessageRole.ASSISTANT.value())\n                                            .created(LocalDateTime.now())\n                                            .build()\n                            );\n\n                            sseEmitter.complete();\n                        }\n                    }\n\n                });\n    }\n\n    private List<ChatMessage> buildSendMsgBody(ChatProcessReq req) {\n        List<ChatMessage> messages = new ArrayList<>();\n        // system message", "        if (StrUtil.isNotBlank(req.getSystemMessage())) {\n            ChatMessage msg = new ChatMessage();\n            msg.setRole(ChatMessageRole.SYSTEM.value());\n            msg.setContent(req.getSystemMessage());\n            messages.add(msg);\n        }\n\n        // history message\n        if (req.getOptions() != null && StrUtil.isNotBlank(req.getOptions().getParentMessageId())) {\n            List<ChatMsgStoreItem> historyMessages = super.getParentMessages(req.getOptions().getParentMessageId());\n            historyMessages.forEach(row -> {\n                ChatMessage msg = new ChatMessage();\n                msg.setRole(row.getRole());\n                msg.setContent(row.getText());\n                messages.add(msg);\n            });", "        if (req.getOptions() != null && StrUtil.isNotBlank(req.getOptions().getParentMessageId())) {\n            List<ChatMsgStoreItem> historyMessages = super.getParentMessages(req.getOptions().getParentMessageId());\n            historyMessages.forEach(row -> {\n                ChatMessage msg = new ChatMessage();\n                msg.setRole(row.getRole());\n                msg.setContent(row.getText());\n                messages.add(msg);\n            });\n            if (ObjectUtil.isEmpty(historyMessages)) {\n                // not found parent messages\n                req.getOptions().setParentMessageId(null);\n            }\n        }\n\n        // user send message\n        ChatMessage latestMsg = new ChatMessage();\n        latestMsg.setRole(ChatMessageRole.USER.value());\n        latestMsg.setContent(req.getPrompt());\n        messages.add(latestMsg);\n\n        return messages;\n    }\n\n    /**\n     * Query account balance\n     *\n     * @return\n     */", "            if (ObjectUtil.isEmpty(historyMessages)) {\n                // not found parent messages\n                req.getOptions().setParentMessageId(null);\n            }\n        }\n\n        // user send message\n        ChatMessage latestMsg = new ChatMessage();\n        latestMsg.setRole(ChatMessageRole.USER.value());\n        latestMsg.setContent(req.getPrompt());\n        messages.add(latestMsg);\n\n        return messages;\n    }\n\n    /**\n     * Query account balance\n     *\n     * @return\n     */", "    public Double queryBalance() {\n        this.checkService();\n        Double balance = null;\n        try {\n            if (StrUtil.isNotBlank(appProperties.getOpenaiSensitiveId())) {\n                String authHeader = \"Bearer \" + appProperties.getOpenaiSensitiveId();\n                balance = openAiExtApi.billing(authHeader).blockingGet().getTotal_available();\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n        return balance;\n    }\n\n    interface OpenAiExtApi {\n        @GET(\"/dashboard/billing/credit_grants\")\n        Single<BillingResult> billing(@Header(\"Authorization\") String authHeader);\n    }\n\n    @Data\n    static class BillingResult {\n        Object error;\n        @JsonProperty(\"total_available\")\n        Double total_available;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/service/OpenAiReverseService.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.service;\n\nimport cn.hutool.core.util.BooleanUtil;\nimport cn.hutool.core.util.IdUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.suimz.open.chatgptweb.java.bean.po.ReverseChatChunk;\nimport com.suimz.open.chatgptweb.java.bean.po.ReverseResponseBodyCallback;\nimport com.suimz.open.chatgptweb.java.bean.po.ReverseSSE;\nimport com.suimz.open.chatgptweb.java.bean.req.ChatProcessReq;", "import com.suimz.open.chatgptweb.java.bean.po.ReverseSSE;\nimport com.suimz.open.chatgptweb.java.bean.req.ChatProcessReq;\nimport com.suimz.open.chatgptweb.java.bean.resp.ChatProcessResp;\nimport com.suimz.open.chatgptweb.java.core.exception.BizException;\nimport com.suimz.open.chatgptweb.java.core.exception.ApiRequestErrorBizException;\nimport com.suimz.open.chatgptweb.java.core.exception.ReverseServiceNotInitializedBizException;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\nimport com.theokanning.openai.service.OpenAiService;\nimport io.reactivex.BackpressureStrategy;\nimport io.reactivex.Flowable;", "import io.reactivex.BackpressureStrategy;\nimport io.reactivex.Flowable;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.ResponseBody;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\nimport retrofit2.Call;\nimport retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;", "import retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;\nimport retrofit2.converter.jackson.JacksonConverterFactory;\nimport retrofit2.http.*;\n\n/**\n * Reverse ChatGPT website backend API service\n *\n * @author https://github.com/suimz\n */", " * @author https://github.com/suimz\n */\n@Slf4j\n@Service\npublic class OpenAiReverseService extends AbstractChatService implements CommandLineRunner {\n    private ReverseApi reverseApi;\n\n    @Override\n    public void run(String... args) {\n        if (StrUtil.isBlank(appProperties.getOpenaiAccessToken())) {\n            log.warn(\"The [ app.openai-access-token ] configuration option was not found, init of openAi reverse service has been skipped\");\n            return;\n        }\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(\"http://localhost/\") // placeholder\n                .client(okHttpClient)\n                .addConverterFactory(JacksonConverterFactory.create(OpenAiService.defaultObjectMapper()))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n        reverseApi = retrofit.create(ReverseApi.class);\n\n        log.info(\"Successfully created the openAi reverse service instance\");\n    }\n", "    public void run(String... args) {\n        if (StrUtil.isBlank(appProperties.getOpenaiAccessToken())) {\n            log.warn(\"The [ app.openai-access-token ] configuration option was not found, init of openAi reverse service has been skipped\");\n            return;\n        }\n\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(\"http://localhost/\") // placeholder\n                .client(okHttpClient)\n                .addConverterFactory(JacksonConverterFactory.create(OpenAiService.defaultObjectMapper()))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n        reverseApi = retrofit.create(ReverseApi.class);\n\n        log.info(\"Successfully created the openAi reverse service instance\");\n    }\n", "    public void checkService() {\n        if (StrUtil.isBlank(appProperties.getOpenaiAccessToken()) || StrUtil.isBlank(appProperties.getOpenaiReverseApiProxyUrl())) {\n            throw new ReverseServiceNotInitializedBizException();\n        }\n    }\n\n    @Override\n    public void streamChat(SseEmitter sseEmitter, ChatProcessReq req) {\n        this.checkService();\n        String authHeader = \"Bearer \" + appProperties.getOpenaiAccessToken();\n        ObjectNode body = buildSendMsgBody(req);\n        String sendMsgId = body.findValues(\"messages\").get(0).findValue(\"id\").asText();\n\n        Flowable.<ReverseSSE>create(emitter -> reverseApi.conversation(appProperties.getOpenaiReverseApiProxyUrl(), body, authHeader).enqueue(new ReverseResponseBodyCallback(emitter, false)), BackpressureStrategy.BUFFER)\n                .map(sse -> okHttpObjectMapper.readValue(sse.getData(), ReverseChatChunk.class))\n                .blockingForEach(chunk -> {", "                    try {\n                        if (StrUtil.isNotBlank(chunk.getError())) {\n                            log.debug(chunk.getError());\n                            sseEmitter.completeWithError(new BizException(chunk.getError()));\n                        }\n\n                        if (!ChatMessageRole.ASSISTANT.value().equalsIgnoreCase(chunk.getMessage().getAuthor().getRole())) return;\n\n                        boolean stop = BooleanUtil.isTrue(chunk.getMessage().getEndTurn());\n\n                        if (!stop) {\n                            ChatProcessResp resp = ChatProcessResp.builder()\n                                    .id(chunk.getMessage().getId())\n                                    .role(chunk.getMessage().getAuthor().getRole())\n                                    .text(chunk.getMessage().getContent().getParts().get(0))\n                                    .parentMessageId(sendMsgId)\n                                    .conversationId(chunk.getConversationId())\n                                    .build();\n                            super.pushClient(sseEmitter, resp);\n                            log.debug(\"push message to client\uff1a{}\", resp);\n                        } else {\n                            sseEmitter.complete();\n                        }\n                    } catch (Exception e) {\n                        sseEmitter.completeWithError(e);\n                        throw e;\n                    }\n                });\n    }\n\n    private ObjectNode buildSendMsgBody(ChatProcessReq req) {\n        String sendMsg = req.getPrompt();\n        String msgId = IdUtil.randomUUID();\n        String parentMessageId = IdUtil.randomUUID();\n        String conversationId = null;\n\n        ChatProcessReq.Options options = req.getOptions();", "                        if (!stop) {\n                            ChatProcessResp resp = ChatProcessResp.builder()\n                                    .id(chunk.getMessage().getId())\n                                    .role(chunk.getMessage().getAuthor().getRole())\n                                    .text(chunk.getMessage().getContent().getParts().get(0))\n                                    .parentMessageId(sendMsgId)\n                                    .conversationId(chunk.getConversationId())\n                                    .build();\n                            super.pushClient(sseEmitter, resp);\n                            log.debug(\"push message to client\uff1a{}\", resp);\n                        } else {\n                            sseEmitter.complete();\n                        }\n                    } catch (Exception e) {\n                        sseEmitter.completeWithError(e);\n                        throw e;\n                    }\n                });\n    }\n\n    private ObjectNode buildSendMsgBody(ChatProcessReq req) {\n        String sendMsg = req.getPrompt();\n        String msgId = IdUtil.randomUUID();\n        String parentMessageId = IdUtil.randomUUID();\n        String conversationId = null;\n\n        ChatProcessReq.Options options = req.getOptions();", "        if (options != null) {\n            if (StrUtil.isNotBlank(options.getParentMessageId())) {\n                parentMessageId = options.getParentMessageId();\n            }\n            if (StrUtil.isNotBlank(options.getConversationId())) {\n                conversationId = options.getConversationId();\n            }\n        }\n\n        ObjectNode message = okHttpObjectMapper.createObjectNode();\n        message.put(\"id\", msgId);\n        message.put(\"author\", okHttpObjectMapper.createObjectNode().put(\"role\", ChatMessageRole.USER.value()));\n        ObjectNode content = okHttpObjectMapper.createObjectNode().put(\"content_type\", \"text\");\n        content.putArray(\"parts\").add(sendMsg);\n        message.put(\"content\", content);\n\n        ObjectNode root = okHttpObjectMapper.createObjectNode();\n        root.put(\"action\", \"next\");\n        root.put(\"model\", \"text-davinci-002-render-sha\");\n        root.putArray(\"messages\").add(message);\n        root.put(\"conversation_id\", conversationId);\n        root.put(\"parent_message_id\", parentMessageId);\n\n        return root;\n    }\n\n    interface ReverseApi {\n        @Streaming\n        @Headers({\"Cache-Control: no-cache\", \"X-Accel-Buffering: no\"})\n        @POST\n        Call<ResponseBody> conversation(@Url String url, @Body ObjectNode body, @Header(\"Authorization\") String authHeader);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/service/store/IMsgStoreService.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.service.store;\n\nimport com.suimz.open.chatgptweb.java.bean.po.ChatMsgStoreItem;\n\nimport java.util.List;\n\n/**\n * Chat Message Store interface\n *\n * @author https://github.com/suimz", " *\n * @author https://github.com/suimz\n */\npublic interface IMsgStoreService {\n\n    /**\n     * Save conversation message\n     *\n     * @param messages\n     */\n    void save(ChatMsgStoreItem...messages);\n\n    /**\n     * Get all parent messages\n     *\n     * @param parentMessageId\n     * @return\n     */\n    List<ChatMsgStoreItem> getParentMessages(String parentMessageId);\n\n}\n"]}
{"filename": "src/main/java/com/suimz/open/chatgptweb/java/service/store/MemMsgStoreService.java", "chunked_list": ["package com.suimz.open.chatgptweb.java.service.store;\n\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.suimz.open.chatgptweb.java.bean.po.ChatMsgStoreItem;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.stream.Collectors;", "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.stream.Collectors;\n\n/**\n * Store chat messages in memory, which will be cleared when the program stops running\n *\n * @author https://github.com/suimz\n */\n@Slf4j\npublic class MemMsgStoreService implements IMsgStoreService {\n    private Map<String, ChatMsgStoreItem> MSG_MAP = new ConcurrentHashMap<>();\n\n    @Override", "@Slf4j\npublic class MemMsgStoreService implements IMsgStoreService {\n    private Map<String, ChatMsgStoreItem> MSG_MAP = new ConcurrentHashMap<>();\n\n    @Override\n    public void save(ChatMsgStoreItem... messages) {\n        List<ChatMsgStoreItem> messageList = Arrays.stream(messages).filter(ObjectUtil::isNotNull).collect(Collectors.toList());\n        if (ObjectUtil.isEmpty(messageList)) return;\n\n        for (ChatMsgStoreItem chatMsgItem : messageList) {\n            MSG_MAP.put(chatMsgItem.getMessageId(), chatMsgItem);\n        }\n    }\n\n    @Override\n    public List<ChatMsgStoreItem> getParentMessages(String parentMessageId) {\n        List<ChatMsgStoreItem> list = new ArrayList<>();", "        for (ChatMsgStoreItem chatMsgItem : messageList) {\n            MSG_MAP.put(chatMsgItem.getMessageId(), chatMsgItem);\n        }\n    }\n\n    @Override\n    public List<ChatMsgStoreItem> getParentMessages(String parentMessageId) {\n        List<ChatMsgStoreItem> list = new ArrayList<>();\n        if (StrUtil.isNotBlank(parentMessageId)) {\n            String nextParentMessageId = parentMessageId;\n            do {\n                ChatMsgStoreItem msg = MSG_MAP.get(nextParentMessageId);", "        if (StrUtil.isNotBlank(parentMessageId)) {\n            String nextParentMessageId = parentMessageId;\n            do {\n                ChatMsgStoreItem msg = MSG_MAP.get(nextParentMessageId);\n                if (msg == null) break;\n                list.add(msg);\n                nextParentMessageId = msg.getParentMessageId();\n                if (StrUtil.isBlank(nextParentMessageId)) break;\n            } while (true);\n        }\n        return list.stream()\n                // Sort by created\n                .sorted(Comparator.comparing(ChatMsgStoreItem::getCreated))\n                .collect(Collectors.toList());\n    }\n}\n", "            } while (true);\n        }\n        return list.stream()\n                // Sort by created\n                .sorted(Comparator.comparing(ChatMsgStoreItem::getCreated))\n                .collect(Collectors.toList());\n    }\n}\n"]}
