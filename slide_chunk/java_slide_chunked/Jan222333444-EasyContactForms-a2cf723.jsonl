{"filename": "PluginAPI/src/main/java/org/easycontactforms/api/PluginFactory.java", "chunked_list": ["package org.easycontactforms.api;\n\npublic interface PluginFactory {\n\n    public String getName();\n\n    public Plugin build();\n}\n"]}
{"filename": "PluginAPI/src/main/java/org/easycontactforms/api/Plugin.java", "chunked_list": ["package org.easycontactforms.api;\n\nimport org.easycontactforms.api.models.ContactFormDto;\nimport org.easycontactforms.api.models.ContactForm;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic interface Plugin {\n    \n    PluginPriority priority = PluginPriority.LOW;\n\n    default List<PluginFactory> getPluginFactories() {\n        return Collections.emptyList();\n    }\n\n    /**\n     * Executed on Startup of Server\n     * @return true if successful; false on error\n     */\n    boolean onStartup();\n\n    /**\n     * Executed when all plugins are loaded\n     * @return true if successful; false on error\n     */\n    boolean onLoad();\n\n    /**\n     * Executed before stopping the server\n     * @return true if successful; false on error\n     */\n    boolean onTeardown();\n\n    /**\n     * Is called before any processing happens\n     * @param contactForm the contact form sent\n     * @return true if processing is finished and other plugins can access; false cancels all other plugin executions after this plugin\n     */\n    boolean beforeContactFormProcessing(ContactFormDto contactForm);\n\n    /**\n     * Is called after processing is finished\n     * @param contactForm the contact form after processing\n     * @return true if processing is finished and other plugins can access; false cancels all other plugin executions after this plugin\n     */\n    boolean contactFormProcessed(ContactForm contactForm);\n\n    /**\n     * Is called after sending an email.\n     * @param contactForm the contact form in the way it was sent\n     * @return true if processing is finished and other plugins can access;\n     */\n    boolean onMailSent(ContactForm contactForm);\n\n    /**\n     * Is executed if a command on the command line interface could not be recognized as internal command\n     * @param command command entered (args[0])\n     * @param args all arguments including the command\n     * @return true if command could be processed by the method, this blocks following plugins from processing it.\n     */\n    boolean onCommand(String command, String... args);\n}\n", "public interface Plugin {\n    \n    PluginPriority priority = PluginPriority.LOW;\n\n    default List<PluginFactory> getPluginFactories() {\n        return Collections.emptyList();\n    }\n\n    /**\n     * Executed on Startup of Server\n     * @return true if successful; false on error\n     */\n    boolean onStartup();\n\n    /**\n     * Executed when all plugins are loaded\n     * @return true if successful; false on error\n     */\n    boolean onLoad();\n\n    /**\n     * Executed before stopping the server\n     * @return true if successful; false on error\n     */\n    boolean onTeardown();\n\n    /**\n     * Is called before any processing happens\n     * @param contactForm the contact form sent\n     * @return true if processing is finished and other plugins can access; false cancels all other plugin executions after this plugin\n     */\n    boolean beforeContactFormProcessing(ContactFormDto contactForm);\n\n    /**\n     * Is called after processing is finished\n     * @param contactForm the contact form after processing\n     * @return true if processing is finished and other plugins can access; false cancels all other plugin executions after this plugin\n     */\n    boolean contactFormProcessed(ContactForm contactForm);\n\n    /**\n     * Is called after sending an email.\n     * @param contactForm the contact form in the way it was sent\n     * @return true if processing is finished and other plugins can access;\n     */\n    boolean onMailSent(ContactForm contactForm);\n\n    /**\n     * Is executed if a command on the command line interface could not be recognized as internal command\n     * @param command command entered (args[0])\n     * @param args all arguments including the command\n     * @return true if command could be processed by the method, this blocks following plugins from processing it.\n     */\n    boolean onCommand(String command, String... args);\n}\n"]}
{"filename": "PluginAPI/src/main/java/org/easycontactforms/api/PluginPriority.java", "chunked_list": ["package org.easycontactforms.api;\n\npublic enum PluginPriority {\n    LOWEST(0), LOW(1), MIDDLE(2), HIGH(3), HIGHEST(4);\n\n    public final int value;\n\n    private PluginPriority(int value){\n        this.value = value;\n    }\n}\n"]}
{"filename": "PluginAPI/src/main/java/org/easycontactforms/api/models/ContactFormDto.java", "chunked_list": ["package org.easycontactforms.api.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ContactFormDto {\n\n\n    private String email;\n\n    private String name;\n\n    private String subject;\n\n    private String message;\n}\n", "@NoArgsConstructor\n@AllArgsConstructor\npublic class ContactFormDto {\n\n\n    private String email;\n\n    private String name;\n\n    private String subject;\n\n    private String message;\n}\n"]}
{"filename": "PluginAPI/src/main/java/org/easycontactforms/api/models/ContactForm.java", "chunked_list": ["package org.easycontactforms.api.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ContactForm {\n\n    private int id;\n\n    private String email;\n\n    private String name;\n\n    private String subject;\n\n    private String message;\n\n\n    public ContactForm(String email, String name, String subject, String message){\n        this.email = email;\n        this.name = name;\n        this.subject = subject;\n        this.message = message;\n    }", "@NoArgsConstructor\n@AllArgsConstructor\npublic class ContactForm {\n\n    private int id;\n\n    private String email;\n\n    private String name;\n\n    private String subject;\n\n    private String message;\n\n\n    public ContactForm(String email, String name, String subject, String message){\n        this.email = email;\n        this.name = name;\n        this.subject = subject;\n        this.message = message;\n    }", "    public static ContactForm fromContactFormDto(ContactFormDto contactFormDto){\n        return new ContactForm(contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage());\n    }\n}\n"]}
{"filename": "TestPlugin/src/main/java/org/easycontactforms/testplugin/TestPlugin.java", "chunked_list": ["package org.easycontactforms.testplugin;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginFactory;\nimport org.easycontactforms.api.models.ContactForm;\nimport org.easycontactforms.api.models.ContactFormDto;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TestPlugin implements Plugin {\n\n    public List<PluginFactory> getPluginFactories(){\n        ArrayList<PluginFactory> factories = new ArrayList<>();\n        factories.add(new TestPluginFactory());\n        return factories;\n    }\n    @Override", "import java.util.List;\n\npublic class TestPlugin implements Plugin {\n\n    public List<PluginFactory> getPluginFactories(){\n        ArrayList<PluginFactory> factories = new ArrayList<>();\n        factories.add(new TestPluginFactory());\n        return factories;\n    }\n    @Override\n    public boolean onStartup() {\n        System.out.println(\"Im started\");\n        return true;\n    }\n\n    @Override", "    public boolean onStartup() {\n        System.out.println(\"Im started\");\n        return true;\n    }\n\n    @Override\n    public boolean onLoad() {\n        System.out.println(\"on load\");\n        return true;\n    }\n\n    @Override", "    public boolean onTeardown() {\n        System.out.println(\"Teardown\");\n        return true;\n    }\n\n    @Override\n    public boolean beforeContactFormProcessing(ContactFormDto contactForm) {\n        System.out.println(\"Before Processing\");\n        return false;\n    }\n\n    @Override", "    public boolean contactFormProcessed(ContactForm contactForm) {\n        System.out.println(\"Processed\");\n        return false;\n    }\n\n    @Override\n    public boolean onMailSent(ContactForm contactForm) {\n        System.out.println(\"Mail Sent\");\n        return false;\n    }\n\n    @Override", "    public boolean onCommand(String command, String... args) {\n        return false;\n    }\n}\n"]}
{"filename": "TestPlugin/src/main/java/org/easycontactforms/testplugin/TestPluginFactory.java", "chunked_list": ["package org.easycontactforms.testplugin;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginFactory;\n\npublic class TestPluginFactory implements PluginFactory {\n    @Override\n    public String getName() {\n        return \"TestPlugin\";\n    }\n\n    @Override", "    public Plugin build() {\n        return new TestPlugin();\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/EasyContactFormsApplicationTests.java", "chunked_list": ["package org.easycontactforms;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest()\n@SpringBootConfiguration\nclass EasyContactFormsApplicationTests {\n", "class EasyContactFormsApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/CommandHandlerTest.java", "chunked_list": ["package org.easycontactforms.unittests;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.core.commandhandler.CommandHandler;\nimport org.easycontactforms.core.commandhandler.CommandHandlerThread;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.easycontactforms.unittests.testpluginclasses.Testplugin1;\nimport org.easycontactforms.unittests.testpluginclasses.Testplugin2;\nimport org.easycontactforms.unittests.testpluginclasses.Testplugin3;\nimport org.junit.jupiter.api.Assertions;", "import org.easycontactforms.unittests.testpluginclasses.Testplugin3;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.List;\n\n\npublic class CommandHandlerTest {\n\n    @Test", "\npublic class CommandHandlerTest {\n\n    @Test\n    public void testPriorities(){\n        Plugin pluginFirst = new Testplugin1();\n        Plugin plugin2 = new Testplugin2();\n        Plugin plugin3 = new Testplugin3();\n        PluginStore.instance.plugins.put(\"first\", pluginFirst);\n        PluginStore.instance.plugins.put(\"middle\", plugin2);\n        PluginStore.instance.plugins.put(\"last\", plugin3);\n        CommandHandler handler = new CommandHandler(null, null);\n        List<Plugin> result = handler.getPluginsByPriority();\n        Assertions.assertTrue(result.get(0) instanceof Testplugin2);\n        Assertions.assertTrue(result.get(1) instanceof Testplugin3);\n        Assertions.assertTrue(result.get(2) instanceof Testplugin1);\n    }\n\n    @Test", "    public void testInvalidShutdownTime(){\n        CommandHandler handler = new CommandHandler(null, null);\n        boolean result = handler.onCommand(\"shutdown\", \"shutdown\",\"asdf\");\n        Assertions.assertTrue(result);\n    }\n    @Test\n    public void testInvalidCommand(){\n        CommandHandler handler = new CommandHandler(null, null);\n        boolean result = handler.onCommand(\"asdfa\", \"asdfa\",\"asdf\");\n        Assertions.assertFalse(result);\n    }\n\n    @Test", "    public void testPluginCommand(){\n        Plugin pluginFirst = new Testplugin1();\n        PluginStore.instance.plugins.put(\"first\", pluginFirst);\n        CommandHandler handler = new CommandHandler(null, null);\n        boolean result = handler.onCommand(\"plugintestcommand\", \"plugintestcommand\");\n        Assertions.assertTrue(result);\n    }\n\n    @Test\n    public void testCommandHandlerThread() throws InterruptedException {\n        InputStream stream = new ByteArrayInputStream(\"stopCommandHandler\\n\".getBytes());\n        CommandHandlerThread thread = new CommandHandlerThread(null, stream, \"\");\n        thread.start();\n        thread.join();\n    }\n}\n", "    public void testCommandHandlerThread() throws InterruptedException {\n        InputStream stream = new ByteArrayInputStream(\"stopCommandHandler\\n\".getBytes());\n        CommandHandlerThread thread = new CommandHandlerThread(null, stream, \"\");\n        thread.start();\n        thread.join();\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/CertificateGenerationTest.java", "chunked_list": ["package org.easycontactforms.unittests;\n\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.easycontactforms.core.FirstStartupChecker;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport javax.security.auth.x500.X500Principal;\nimport java.security.KeyPair;\nimport java.security.NoSuchAlgorithmException;", "import java.security.KeyPair;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.Security;\nimport java.security.cert.X509Certificate;\n\npublic class CertificateGenerationTest {\n\n    @Test\n    public void testKeyPairGeneration() throws NoSuchAlgorithmException {\n        Security.addProvider(new BouncyCastleProvider());\n        FirstStartupChecker checker = new FirstStartupChecker();\n        KeyPair keyPair = checker.generateKeyPair();\n        Assertions.assertNotNull(keyPair);\n        Assertions.assertNotNull(keyPair.getPublic());\n        Assertions.assertNotNull(keyPair.getPrivate());\n    }\n\n    @Test", "    public void testKeyPairGeneration() throws NoSuchAlgorithmException {\n        Security.addProvider(new BouncyCastleProvider());\n        FirstStartupChecker checker = new FirstStartupChecker();\n        KeyPair keyPair = checker.generateKeyPair();\n        Assertions.assertNotNull(keyPair);\n        Assertions.assertNotNull(keyPair.getPublic());\n        Assertions.assertNotNull(keyPair.getPrivate());\n    }\n\n    @Test\n    public void testCertificateGeneration() throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n        FirstStartupChecker checker = new FirstStartupChecker();\n        KeyPair keyPair = checker.generateKeyPair();\n\n        X509Certificate certificate = checker.generateSelfSignedCertificate(keyPair);\n\n        Assertions.assertNotNull(certificate);\n\n        X500Principal principal = certificate.getIssuerX500Principal();\n        Assertions.assertEquals(\"CN=localhost\", principal.getName());\n    }\n}\n", "    public void testCertificateGeneration() throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n        FirstStartupChecker checker = new FirstStartupChecker();\n        KeyPair keyPair = checker.generateKeyPair();\n\n        X509Certificate certificate = checker.generateSelfSignedCertificate(keyPair);\n\n        Assertions.assertNotNull(certificate);\n\n        X500Principal principal = certificate.getIssuerX500Principal();\n        Assertions.assertEquals(\"CN=localhost\", principal.getName());\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/MailingServiceTest.java", "chunked_list": ["package org.easycontactforms.unittests;\n\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.services.ContactFormService;\nimport org.easycontactforms.core.services.MailingService;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\n\npublic class MailingServiceTest {\n\n    @Test", "import org.mockito.Mockito;\n\npublic class MailingServiceTest {\n\n    @Test\n    public void testRender(){\n        MailingService mailingService = new MailingService();\n\n        ContactForm contactForm = new ContactForm(\"test@example.test\", \"TestName\", \"\", \"\");\n        contactForm.setId(1);\n        String output = mailingService.renderHTML(contactForm);\n\n        Assertions.assertFalse(output.contains(\"${\"));\n        Assertions.assertTrue(output.contains(\"test@example.test\"));\n        Assertions.assertTrue(output.contains(\"TestName\"));\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/HTMLContactFormControllerTest.java", "chunked_list": ["package org.easycontactforms.unittests;\n\nimport org.easycontactforms.core.controller.HTMLContactFormController;\nimport org.easycontactforms.core.dtos.HTMLContactFormDto;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.services.ContactFormService;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class HTMLContactFormControllerTest {\n\n    @Test", "import org.mockito.Mockito;\n\npublic class HTMLContactFormControllerTest {\n\n    @Test\n    public void testHTMLContactFormController(){\n        HTMLContactFormDto dto = new HTMLContactFormDto(\"/success\", \"/error\");\n        dto.setName(\"\");\n        dto.setEmail(\"\");\n        dto.setMessage(\"\");\n        dto.setSubject(null);\n        ContactFormService serviceMock = Mockito.mock(ContactFormService.class);\n        Mockito.when(serviceMock.saveContactForm(dto)).thenReturn(new ContactForm());\n        HTMLContactFormController controller = new HTMLContactFormController(serviceMock);\n        String result = controller.processPlainHTMLForm(\"localhost\", dto);\n        Assertions.assertEquals(\"redirect:localhost/success\", result);\n    }\n\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/ContactFormControllerTest.java", "chunked_list": ["package org.easycontactforms.unittests;\n\nimport org.easycontactforms.core.controller.ContactFormController;\nimport org.easycontactforms.core.dtos.ContactFormDto;\nimport org.easycontactforms.core.dtos.ErrorDto;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.services.ContactFormService;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;", "import org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\npublic class ContactFormControllerTest {\n\n    @Test\n    public void testHandlerFullCorrect(){\n        ContactFormDto dto = new ContactFormDto(\"test@email.com\", \"nameString\", \"subjectString\", \"message\");\n\n        ContactFormService service = Mockito.mock(ContactFormService.class);\n        ContactForm contactForm = ContactForm.fromContactFormDto(dto);\n        Mockito.when(service.saveContactForm(dto)).thenReturn(contactForm);\n\n        ContactFormController controller = new ContactFormController(service);\n\n        ResponseEntity response = controller.handleRequest(dto);\n\n        Assertions.assertEquals(HttpStatus.ACCEPTED, response.getStatusCode());\n        Assertions.assertEquals(contactForm, response.getBody());\n\n    }\n\n    @Test", "    public void testHandlerFullCorrect(){\n        ContactFormDto dto = new ContactFormDto(\"test@email.com\", \"nameString\", \"subjectString\", \"message\");\n\n        ContactFormService service = Mockito.mock(ContactFormService.class);\n        ContactForm contactForm = ContactForm.fromContactFormDto(dto);\n        Mockito.when(service.saveContactForm(dto)).thenReturn(contactForm);\n\n        ContactFormController controller = new ContactFormController(service);\n\n        ResponseEntity response = controller.handleRequest(dto);\n\n        Assertions.assertEquals(HttpStatus.ACCEPTED, response.getStatusCode());\n        Assertions.assertEquals(contactForm, response.getBody());\n\n    }\n\n    @Test", "    public void testHandlerMinimalCorrect(){\n        ContactFormDto dto = new ContactFormDto(\"test@email.com\", null, null, \"message\");\n\n        ContactFormService service = Mockito.mock(ContactFormService.class);\n        ContactForm contactForm = ContactForm.fromContactFormDto(dto);\n        Mockito.when(service.saveContactForm(dto)).thenReturn(contactForm);\n\n        ContactFormController controller = new ContactFormController(service);\n\n        ResponseEntity response = controller.handleRequest(dto);\n\n        Assertions.assertEquals(HttpStatus.ACCEPTED, response.getStatusCode());\n        Assertions.assertEquals(contactForm, response.getBody());\n\n    }\n\n    @Test", "    public void testHandlerMissingEmail(){\n        ContactFormDto dto = new ContactFormDto(null, \"nameString\", \"subjectString\", \"message\");\n        ContactFormService service = Mockito.mock(ContactFormService.class);\n\n        ContactFormController controller = new ContactFormController(service);\n\n        ErrorDto expectedError = new ErrorDto(400, \"Missing required attributes in request body\");\n\n        ResponseEntity response = controller.handleRequest(dto);\n\n        Assertions.assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n        Assertions.assertEquals(expectedError, response.getBody());\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/testpluginclasses/Testplugin1.java", "chunked_list": ["package org.easycontactforms.unittests.testpluginclasses;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginPriority;\nimport org.easycontactforms.api.models.ContactForm;\nimport org.easycontactforms.api.models.ContactFormDto;\n\npublic class Testplugin1 implements Plugin {\n\n    PluginPriority priority = PluginPriority.LOWEST;\n    @Override", "    public boolean onStartup() {\n        return false;\n    }\n\n    @Override\n    public boolean onLoad() {\n        return false;\n    }\n\n    @Override\n    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override", "    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override\n    public boolean beforeContactFormProcessing(ContactFormDto contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override", "    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onMailSent(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onCommand(String command, String... args) {\n        return command.equalsIgnoreCase(\"plugintestcommand\");\n    }\n}\n", "    public boolean onCommand(String command, String... args) {\n        return command.equalsIgnoreCase(\"plugintestcommand\");\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/testpluginclasses/Testplugin3.java", "chunked_list": ["package org.easycontactforms.unittests.testpluginclasses;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginPriority;\nimport org.easycontactforms.api.models.ContactForm;\nimport org.easycontactforms.api.models.ContactFormDto;\n\npublic class Testplugin3 implements Plugin {\n    PluginPriority priority = PluginPriority.MIDDLE;\n    @Override\n    public boolean onStartup() {\n        return false;\n    }\n\n    @Override", "    public boolean onStartup() {\n        return false;\n    }\n\n    @Override\n    public boolean onLoad() {\n        return false;\n    }\n\n    @Override\n    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override", "    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override\n    public boolean beforeContactFormProcessing(ContactFormDto contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override", "    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onMailSent(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onCommand(String command, String... args) {\n        return false;\n    }\n}\n", "    public boolean onCommand(String command, String... args) {\n        return false;\n    }\n}\n"]}
{"filename": "src/test/java/org/easycontactforms/unittests/testpluginclasses/Testplugin2.java", "chunked_list": ["package org.easycontactforms.unittests.testpluginclasses;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginPriority;\nimport org.easycontactforms.api.models.ContactForm;\nimport org.easycontactforms.api.models.ContactFormDto;\n\npublic class Testplugin2 implements Plugin {\n\n\n    PluginPriority priority = PluginPriority.HIGHEST;\n\n    @Override", "    public boolean onStartup() {\n        return false;\n    }\n\n    @Override\n    public boolean onLoad() {\n        return false;\n    }\n\n    @Override\n    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override", "    public boolean onTeardown() {\n        return false;\n    }\n\n    @Override\n    public boolean beforeContactFormProcessing(ContactFormDto contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override", "    public boolean contactFormProcessed(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onMailSent(ContactForm contactForm) {\n        return false;\n    }\n\n    @Override\n    public boolean onCommand(String command, String... args) {\n        return false;\n    }\n}\n", "    public boolean onCommand(String command, String... args) {\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/ApplicationState.java", "chunked_list": ["package org.easycontactforms.core;\n\nimport org.springframework.beans.factory.annotation.Value;\n\nimport java.util.Objects;\n\n/**\n * Stores state of application\n */\npublic class ApplicationState {\n    public static ApplicationState instance = getInstance();", " */\npublic class ApplicationState {\n    public static ApplicationState instance = getInstance();\n    public static boolean smtpAvailable = true;\n\n    @Value(\"${redirect.mode.resend.interval}\")\n    public static int resendInterval;\n\n    public static ApplicationState getInstance(){\n        return Objects.requireNonNullElseGet(ApplicationState.instance, ApplicationState::new);\n    }\n\n\n\n\n}\n", "    public static ApplicationState getInstance(){\n        return Objects.requireNonNullElseGet(ApplicationState.instance, ApplicationState::new);\n    }\n\n\n\n\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/EasyContactFormsApplication.java", "chunked_list": ["package org.easycontactforms.core;\n\nimport jakarta.annotation.PreDestroy;\nimport lombok.extern.slf4j.Slf4j;\nimport org.easycontactforms.api.PluginFactory;\nimport org.easycontactforms.core.commandhandler.CommandHandlerThread;\nimport org.easycontactforms.core.pluginloader.PluginLoader;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;", "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\nimport java.io.File;\nimport java.util.Map;\n\n/**\n * Main class of application", "/**\n * Main class of application\n * Handles startup and teardown of Plugins and application\n */\n@Slf4j\n@SpringBootApplication\n@EnableScheduling\npublic class EasyContactFormsApplication {\n    public static void main(String[] args) {\n        String pluginsPath = \"plugins\";\n\n        new FirstStartupChecker().checkDirectories();\n        loadPlugins(pluginsPath);\n\n        //Starts all plugins", "    public static void main(String[] args) {\n        String pluginsPath = \"plugins\";\n\n        new FirstStartupChecker().checkDirectories();\n        loadPlugins(pluginsPath);\n\n        //Starts all plugins\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onStartup();\n        }\n        //Starts Spring Boot server\n        ApplicationContext context = SpringApplication.run(EasyContactFormsApplication.class, args);\n\n        //Executes on load hook", "        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onLoad();\n        }\n\n        CommandHandlerThread handlerThread = new CommandHandlerThread(context, System.in, args);\n        handlerThread.start();\n    }\n\n    public static void loadPlugins(String pluginsPath) {\n        PluginLoader pluginLoader = new PluginLoader(new File(pluginsPath));\n        pluginLoader.loadPlugins();\n\n        Map<String, PluginFactory> factories = pluginLoader.getPluginFactories();\n", "    public static void loadPlugins(String pluginsPath) {\n        PluginLoader pluginLoader = new PluginLoader(new File(pluginsPath));\n        pluginLoader.loadPlugins();\n\n        Map<String, PluginFactory> factories = pluginLoader.getPluginFactories();\n\n        for (String key : factories.keySet()) {\n            PluginStore.instance.plugins.put(key, factories.get(key).build());\n        }\n    }\n\n    @PreDestroy", "    public static void teardown() {\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onTeardown();\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/FirstStartupChecker.java", "chunked_list": ["package org.easycontactforms.core;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.bouncycastle.asn1.ASN1Sequence;\nimport org.bouncycastle.asn1.x500.X500Name;\nimport org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\nimport org.bouncycastle.cert.X509v3CertificateBuilder;\nimport org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.openssl.jcajce.JcaPEMWriter;", "import org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.openssl.jcajce.JcaPEMWriter;\nimport org.bouncycastle.operator.ContentSigner;\nimport org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.cert.X509Certificate;\nimport java.util.Date;", "import java.security.cert.X509Certificate;\nimport java.util.Date;\n\n@Slf4j\npublic class FirstStartupChecker {\n    public void checkDirectories() {\n        File pluginsDir = new File(\"plugins\");\n        if (!pluginsDir.exists() || !pluginsDir.isDirectory()) {\n            createPluginDirectory(pluginsDir);\n        }\n        File configDir = new File(\"config\");", "        if (!configDir.exists() || !configDir.isDirectory()) {\n            createConfigDirectory(configDir);\n\n        }\n        File secretsDir = new File(\"secrets\");\n        if(!secretsDir.exists() || !secretsDir.isDirectory()){\n            generateSSLCertificate(secretsDir);\n        }\n    }\n\n    private void createPluginDirectory(File pluginsDir){\n        log.info(\"Plugin directory not found: \" + pluginsDir + \" | Adding directory\");", "        if (!pluginsDir.mkdirs()) {\n            log.error(\"Could not create plugins directory\");\n        }\n    }\n\n    private void createConfigDirectory(File configDir){\n        log.info(\"Config directory not found! Adding directory\");\n        if (!configDir.mkdirs()) {\n            log.error(\"Could not create config directory\");\n            throw new RuntimeException(\"Could not create config directory\");\n        }\n        InputStream resource = getClass().getClassLoader().getResourceAsStream(\"/application.properties\");", "        if (resource == null) {\n            throw new IllegalArgumentException(\"application.properties not found!\");\n        } else {\n\n            try {\n                log.info(\"Adding standard configuration to config directory\");\n                byte[] data = resource.readAllBytes();\n\n                OutputStream out = new FileOutputStream(configDir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"application.properties\");\n                out.write(data);\n                out.close();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n", "    public void generateSSLCertificate(File secretsDir)  {\n        log.info(\"Building certificate\");\n        if (!secretsDir.exists() || !secretsDir.isDirectory()) {\n            if(!secretsDir.mkdirs()){\n                log.error(\"Could not create directory\");\n                return;\n            }\n        }\n        try {\n            Security.addProvider(new BouncyCastleProvider());\n            KeyPair keyPair = generateKeyPair();\n            X509Certificate cert = generateSelfSignedCertificate(keyPair);\n            savePrivateKeyToFile(keyPair.getPrivate(), secretsDir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"private.key\");\n            saveCertificateToFile(cert, secretsDir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"server.crt\");\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n", "        try {\n            Security.addProvider(new BouncyCastleProvider());\n            KeyPair keyPair = generateKeyPair();\n            X509Certificate cert = generateSelfSignedCertificate(keyPair);\n            savePrivateKeyToFile(keyPair.getPrivate(), secretsDir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"private.key\");\n            saveCertificateToFile(cert, secretsDir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"server.crt\");\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n", "    public X509Certificate generateSelfSignedCertificate(KeyPair keyPair) throws Exception {\n        Date startDate = new Date();\n        Date endDate = new Date(startDate.getTime() + 365 * 24 * 60 * 60 * 1000L); // 1 year validity\n\n        X500Name dnName = new X500Name(\"CN=localhost\");\n\n        BigInteger certSerialNumber = BigInteger.valueOf(System.currentTimeMillis());\n        SubjectPublicKeyInfo info = SubjectPublicKeyInfo.getInstance(ASN1Sequence.getInstance(keyPair.getPublic().getEncoded()));\n\n        X509v3CertificateBuilder certificateBuilder = new X509v3CertificateBuilder(\n                dnName,\n                certSerialNumber,\n                startDate,\n                endDate,\n                dnName,\n                info\n        );\n\n        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n\n        return new JcaX509CertificateConverter().getCertificate(certificateBuilder.build(contentSigner));\n    }\n", "    public KeyPair generateKeyPair() throws NoSuchAlgorithmException {\n        KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n        generator.initialize(2048); // Key size\n        return generator.generateKeyPair();\n    }\n\n    private void savePrivateKeyToFile(PrivateKey privateKey, String filePath) throws IOException {\n        try (JcaPEMWriter pemWriter = new JcaPEMWriter(new FileWriter(filePath))) {\n            pemWriter.writeObject(privateKey);\n        }\n    }\n\n    private void saveCertificateToFile(X509Certificate certificate, String filePath) throws IOException {\n        try (JcaPEMWriter pemWriter = new JcaPEMWriter(new FileWriter(filePath))) {\n            pemWriter.writeObject(certificate);\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/dtos/ContactFormDto.java", "chunked_list": ["package org.easycontactforms.core.dtos;\n\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;", "import lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JacksonXmlRootElement(localName = \"ContactFormDto\")\npublic class ContactFormDto {\n\n    @NotNull\n    @NotEmpty(message = \"Email cannot be empty\")\n    @Email(message = \"Has to be a valid email address\")\n    @JacksonXmlProperty(localName=\"email\")\n    private String email;\n\n    @JacksonXmlProperty(localName=\"name\")\n    private String name;\n\n    @JacksonXmlProperty(localName = \"subject\")\n    private String subject;\n\n    @NotNull\n    @NotEmpty(message = \"Message cannot be empty\")\n    @JacksonXmlProperty(localName=\"message\")\n    private String message;\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/dtos/ErrorDto.java", "chunked_list": ["package org.easycontactforms.core.dtos;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ErrorDto {\n    private int status;\n\n    private String message;\n}\n", "@NoArgsConstructor\npublic class ErrorDto {\n    private int status;\n\n    private String message;\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/dtos/HTMLContactFormDto.java", "chunked_list": ["package org.easycontactforms.core.dtos;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class HTMLContactFormDto extends ContactFormDto{\n\n    /**\n     * url/path for redirect after successful processing of data\n     */\n    private String redirect;\n\n    /**\n     * url/path for redirect if processing of data failed\n     */\n    private String redirectError;\n}\n", "@NoArgsConstructor\n@AllArgsConstructor\npublic class HTMLContactFormDto extends ContactFormDto{\n\n    /**\n     * url/path for redirect after successful processing of data\n     */\n    private String redirect;\n\n    /**\n     * url/path for redirect if processing of data failed\n     */\n    private String redirectError;\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/pluginloader/PluginLoader.java", "chunked_list": ["package org.easycontactforms.core.pluginloader;\n\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.api.PluginFactory;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Controller;\n\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;", "import java.net.URI;\nimport java.net.URL;\nimport java.io.File;\nimport java.net.URLClassLoader;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport static java.util.Objects.requireNonNull;\n\n/**", "\n/**\n * Initial Loader for Plugins\n */\n@Slf4j\npublic class PluginLoader {\n    private final Map<String, PluginFactory> fooFactoryMap = new HashMap<>();\n    private final File pluginsDir;\n    private final AtomicBoolean loading = new AtomicBoolean();\n\n    public PluginLoader(final File pluginsDir) {\n        this.pluginsDir = pluginsDir;\n    }\n", "    public void loadPlugins() {\n        if (!pluginsDir.exists() || !pluginsDir.isDirectory()) {\n            log.error(\"Skipping Plugin Loading. Plugin dir not found: \" + pluginsDir);\n            return;\n        }\n\n        if (loading.compareAndSet(false, true)) {\n            final File[] files = requireNonNull(pluginsDir.listFiles());\n            for (File pluginDir : files) {\n                if (pluginDir.isDirectory()) {\n                    loadPlugin(pluginDir);\n                }\n            }\n        }\n    }\n\n    private void loadPlugin(final File pluginDir) {\n        log.info(\"Loading plugin: \" + pluginDir);\n        final URLClassLoader pluginClassLoader = createPluginClassLoader(pluginDir);\n        final ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();", "            for (File pluginDir : files) {\n                if (pluginDir.isDirectory()) {\n                    loadPlugin(pluginDir);\n                }\n            }\n        }\n    }\n\n    private void loadPlugin(final File pluginDir) {\n        log.info(\"Loading plugin: \" + pluginDir);\n        final URLClassLoader pluginClassLoader = createPluginClassLoader(pluginDir);\n        final ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();", "        try {\n            Thread.currentThread().setContextClassLoader(pluginClassLoader);\n            for (Plugin plugin : ServiceLoader.load(Plugin.class, pluginClassLoader)) {\n                installPlugin(plugin);\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(currentClassLoader);\n        }\n    }\n\n\n    private void installPlugin(final Plugin plugin) {\n        log.info(\"Installing plugin: \" + plugin.getClass().getName());", "        for (PluginFactory f : plugin.getPluginFactories()) {\n            fooFactoryMap.put(f.getName(), f);\n        }\n    }\n\n    private URLClassLoader createPluginClassLoader(File dir) {\n        final URL[] urls = Arrays.stream(Optional.ofNullable(dir.listFiles()).orElse(new File[]{}))\n                .sorted()\n                .map(File::toURI)\n                .map(this::toUrl)\n                .toArray(URL[]::new);\n\n        return new PluginClassLoader(urls, getClass().getClassLoader());\n    }\n\n    private URL toUrl(final URI uri) {", "        try {\n            return uri.toURL();\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public PluginFactory getPluginFactory(String name) {\n        return fooFactoryMap.get(name);\n    }\n\n    public Map<String,PluginFactory> getPluginFactories() {\n        return fooFactoryMap;\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/pluginloader/PluginClassLoader.java", "chunked_list": ["package org.easycontactforms.core.pluginloader;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.List;\n\n/**\n * Loads a plugin leveraging a {@link URLClassLoader}. However, it restricts the plugin from\n * using the system classloader thereby trimming access to all system classes.\n *", " * using the system classloader thereby trimming access to all system classes.\n *\n * Only the classes in SHARED_PACKAGES are visible to the plugin.\n */\npublic class PluginClassLoader extends URLClassLoader {\n\n    public static final List<String> SHARED_PACKAGES = List.of(\n            \"org.easycontactforms.api\", \"org.springframework.stereotype\",\n            \"org.springframework.web.bind.annotation\"\n    );\n\n    private final ClassLoader parentClassLoader;\n\n    public PluginClassLoader(URL[] urls, ClassLoader parentClassLoader) {\n        super(urls, null);\n        this.parentClassLoader = parentClassLoader;\n    }\n\n    @Override\n    protected Class<?> loadClass(String name, boolean resolve)\n            throws ClassNotFoundException {\n        // has the class loaded already?\n        Class<?> loadedClass = findLoadedClass(name);", "        if (loadedClass == null) {\n            final boolean isSharedClass = SHARED_PACKAGES.stream().anyMatch(name::startsWith);\n            if (isSharedClass) {\n                loadedClass = parentClassLoader.loadClass(name);\n            } else {\n                loadedClass = super.loadClass(name, resolve);\n            }\n        }\n\n        if (resolve) {      // marked to resolve\n            resolveClass(loadedClass);\n        }\n        return loadedClass;\n    }\n}\n", "        if (resolve) {      // marked to resolve\n            resolveClass(loadedClass);\n        }\n        return loadedClass;\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/pluginloader/PluginStore.java", "chunked_list": ["package org.easycontactforms.core.pluginloader;\n\nimport org.easycontactforms.api.Plugin;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Plugin store to handle storage of Plugin instances\n */\npublic enum PluginStore {\n    instance;\n    public Map<String, Plugin> plugins = new HashMap<>();\n}\n", " * Plugin store to handle storage of Plugin instances\n */\npublic enum PluginStore {\n    instance;\n    public Map<String, Plugin> plugins = new HashMap<>();\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/repositories/ContactFormRepository.java", "chunked_list": ["package org.easycontactforms.core.repositories;\n\nimport org.easycontactforms.core.models.ContactForm;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\n/**\n * Repository to interact with database\n */\npublic interface ContactFormRepository extends JpaRepository<ContactForm, Integer> {\n\n\n    public List<ContactForm> findByEmailSent(boolean emailSent);\n}\n", " * Repository to interact with database\n */\npublic interface ContactFormRepository extends JpaRepository<ContactForm, Integer> {\n\n\n    public List<ContactForm> findByEmailSent(boolean emailSent);\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/models/ContactForm.java", "chunked_list": ["package org.easycontactforms.core.models;\n\nimport org.easycontactforms.core.dtos.ContactFormDto;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotNull;", "import jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotNull;\nimport java.util.Date;\n\n/**\n * Database model for contact request\n */\n@Entity\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@Table(name = \"contact_form\")\n@AllArgsConstructor\npublic class ContactForm {\n\n    @Id\n    @GeneratedValue(strategy= GenerationType.AUTO)\n    private int id;\n\n    @NotNull\n    @Email\n    private String email;\n\n    private String name;\n\n    private String subject;\n\n    @NotNull\n    @Column(length = 10240)\n    private String message;\n\n    @NotNull\n    private boolean emailSent;\n\n    @NotNull\n    private Date created;\n\n    @NotNull\n    private Date updated;\n\n\n    public ContactForm(String email, String name, String subject, String message){\n        this.email = email;\n        this.name = name;\n        this.subject = subject;\n        this.message = message;\n        this.emailSent = false;\n    }", "    public static ContactForm fromContactFormDto(ContactFormDto contactFormDto){\n        return new ContactForm(contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage());\n    }\n\n    @PrePersist\n    protected void onCreate() {\n        created = new Date();\n        updated = new Date();\n    }\n\n    @PreUpdate\n    protected void onUpdate() {\n        updated = new Date();\n    }\n\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/controller/ContactFormController.java", "chunked_list": ["package org.easycontactforms.core.controller;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.tags.Tag;", "import io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.easycontactforms.core.dtos.ContactFormDto;\nimport org.easycontactforms.core.dtos.ErrorDto;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.services.ContactFormService;\n\nimport lombok.extern.slf4j.Slf4j;", "\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n\n/**\n * Controller for handling contact requests with JSON or XML body", "/**\n * Controller for handling contact requests with JSON or XML body\n */\n@Tag(name=\"contact-submission\", description = \"All contact submission related endpoints\")\n@RestController\n@Slf4j\n@RequestMapping(\"/contact\")\npublic class ContactFormController {\n\n\n    private final ContactFormService service;\n\n\n    @Autowired\n    public ContactFormController(ContactFormService service){\n        this.service = service;\n    }\n\n    /**\n     * receives request if body contains JSON\n     * @param contactFormDto request body\n     * @return status and in db saved object\n     */\n    @Operation(summary = \"Add contact request\",\n            parameters = {\n                    @Parameter(in = ParameterIn.HEADER,\n                            name = \"authorization\",\n                            description = \"Optional Authorization via Bearer token\",\n                            required = false,\n                            schema = @Schema(type = \"string\"))})\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"201\", description = \"Created new entry\",\n                    content = {@Content(mediaType = \"application/json\",\n                            schema = @Schema(implementation = ContactForm.class))}),\n            @ApiResponse(responseCode = \"400\", description = \"Invalid request\",\n                    content = @Content)})\n    @CrossOrigin\n    @PostMapping(consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE})", "    public ResponseEntity processContactForm(@RequestBody @Valid ContactFormDto contactFormDto){\n        return handleRequest(contactFormDto);\n    }\n\n    /**\n     * receives request if body contains XML\n     * @param contactFormDto request body\n     * @return status and in db saved object\n     */\n    @CrossOrigin\n    @PostMapping(consumes = {MediaType.APPLICATION_XML_VALUE}, produces = MediaType.APPLICATION_XML_VALUE)", "    public ResponseEntity processContactFormXML(@RequestBody @Valid ContactFormDto contactFormDto){\n        log.error(\"Email \" + contactFormDto.getEmail());\n        return handleRequest(contactFormDto);\n    }\n\n    /**\n     * handles controller logic and handles plugin hooks\n     * @param contactFormDto request body\n     * @return status and in db saved object\n     */\n    public ResponseEntity handleRequest(ContactFormDto contactFormDto){\n        log.debug(\"[POST] Saving Contact Form\");", "    public ResponseEntity handleRequest(ContactFormDto contactFormDto){\n        log.debug(\"[POST] Saving Contact Form\");\n        for(String key : PluginStore.instance.plugins.keySet()){\n            PluginStore.instance.plugins.get(key).beforeContactFormProcessing(new org.easycontactforms.api.models.ContactFormDto(contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n        }\n        if (contactFormDto.getEmail() == null || contactFormDto.getMessage() == null){\n            return ResponseEntity.status(400).body(new ErrorDto(400, \"Missing required attributes in request body\"));\n        }\n        ContactForm contactForm = service.saveContactForm(contactFormDto);\n        for(String key : PluginStore.instance.plugins.keySet()){\n            PluginStore.instance.plugins.get(key).contactFormProcessed(new org.easycontactforms.api.models.ContactForm(contactForm.getId(), contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n        }\n        log.debug(\"[POST] successfully processed contact form\");\n        return ResponseEntity.accepted().body(contactForm);\n    }\n\n}\n", "        for(String key : PluginStore.instance.plugins.keySet()){\n            PluginStore.instance.plugins.get(key).contactFormProcessed(new org.easycontactforms.api.models.ContactForm(contactForm.getId(), contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n        }\n        log.debug(\"[POST] successfully processed contact form\");\n        return ResponseEntity.accepted().body(contactForm);\n    }\n\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/controller/HTMLContactFormController.java", "chunked_list": ["package org.easycontactforms.core.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.easycontactforms.core.dtos.HTMLContactFormDto;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.easycontactforms.core.services.ContactFormService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Controller;", "import org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * Controller for handling form-data requests (plain HTML Form post)\n */", " * Controller for handling form-data requests (plain HTML Form post)\n */\n@Controller\n@Slf4j\n@RequestMapping(\"/contact\")\npublic class HTMLContactFormController {\n\n    private final ContactFormService service;\n\n    @Autowired\n    public HTMLContactFormController(ContactFormService service) {\n        this.service = service;\n    }\n\n    /**\n     * Handles plain form posts without javascript used\n     *\n     * @param origin         Server of website\n     * @param contactFormDto Form data in plain html post encoding\n     * @return proper redirect back to website if possible\n     */\n    @CrossOrigin\n    @PostMapping", "    public String processPlainHTMLForm(@RequestHeader(HttpHeaders.ORIGIN) String origin, HTMLContactFormDto contactFormDto) {\n        try {\n            log.debug(\"[POST] Saving Contact Form\");\n\n            // Processing plugin hook before contact form processing\n            for (String key : PluginStore.instance.plugins.keySet()) {\n                PluginStore.instance.plugins.get(key).beforeContactFormProcessing(new org.easycontactforms.api.models.ContactFormDto(contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n            }\n            if (contactFormDto.getEmail() == null || contactFormDto.getMessage() == null) {\n                throw new RuntimeException();\n            }\n            // processes contact form\n            ContactForm contactForm = service.saveContactForm(contactFormDto);\n            log.debug(\"[POST] processed data excluding plugins\");\n\n            // Executing plugin hook contactFormProcessed", "            if (contactFormDto.getEmail() == null || contactFormDto.getMessage() == null) {\n                throw new RuntimeException();\n            }\n            // processes contact form\n            ContactForm contactForm = service.saveContactForm(contactFormDto);\n            log.debug(\"[POST] processed data excluding plugins\");\n\n            // Executing plugin hook contactFormProcessed\n            for (String key : PluginStore.instance.plugins.keySet()) {\n                PluginStore.instance.plugins.get(key).contactFormProcessed(new org.easycontactforms.api.models.ContactForm(contactForm.getId(), contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n            }\n            log.debug(\"[POST] successfully processed contact form\");\n\n            /*\n             * Redirect handling\n             */\n            return getRedirect(origin, contactFormDto);\n\n        } catch (Exception e) {\n", "            for (String key : PluginStore.instance.plugins.keySet()) {\n                PluginStore.instance.plugins.get(key).contactFormProcessed(new org.easycontactforms.api.models.ContactForm(contactForm.getId(), contactFormDto.getEmail(), contactFormDto.getName(), contactFormDto.getSubject(), contactFormDto.getMessage()));\n            }\n            log.debug(\"[POST] successfully processed contact form\");\n\n            /*\n             * Redirect handling\n             */\n            return getRedirect(origin, contactFormDto);\n\n        } catch (Exception e) {\n", "            if (contactFormDto.getRedirectError() != null) {\n                assert origin != null;\n                if (contactFormDto.getRedirectError().contains(origin)) {\n                    return \"redirect:\" + contactFormDto.getRedirectError();\n                }\n                return \"redirect:\" + origin + contactFormDto.getRedirectError();\n            }\n\n        }\n        return \"redirect:\" + origin;\n    }\n\n    /**\n     * Redirect success handling\n     */\n    private String getRedirect(String origin, HTMLContactFormDto contactFormDto){", "        if (contactFormDto.getRedirect() != null) {\n            if (origin == null) {\n                return \"redirect:\" + contactFormDto.getRedirect();\n            }\n            if (contactFormDto.getRedirect().contains(origin)) {\n                return \"redirect:\" + contactFormDto.getRedirect();\n            }\n            return \"redirect:\" + origin + contactFormDto.getRedirect();\n        }\n        log.info(\"[POST][FORM-DATA] Received invalid redirect input\");\n        throw new RuntimeException();\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/scheduled/ResendEmailsScheduler.java", "chunked_list": ["package org.easycontactforms.core.scheduled;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.easycontactforms.core.services.ContactFormService;\nimport org.easycontactforms.core.services.MailingService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\n@Slf4j\n@Component\npublic class ResendEmailsScheduler {\n\n    private final MailingService mailingService;\n\n    private final ContactFormService contactFormService;\n\n    @Value(\"${redirect.mode.resend}\")\n    private boolean resend;\n\n\n    @Autowired\n    public ResendEmailsScheduler(MailingService mailingService, ContactFormService contactFormService){\n        this.mailingService = mailingService;\n        this.contactFormService = contactFormService;\n    }\n\n    @Scheduled(fixedRateString = \"${redirect.mode.resend.interval}\")", "    public void resendEmails(){\n        if(resend) {\n            log.info(\"Resending not send emails\");\n            mailingService.resendMails(true, contactFormService);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/commandhandler/CommandHandlerThread.java", "chunked_list": ["package org.easycontactforms.core.commandhandler;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationContext;\n\nimport java.io.InputStream;\nimport java.util.Scanner;\n\n/**\n * Thread for processing command line inputs", "/**\n * Thread for processing command line inputs\n */\n@Slf4j\npublic class CommandHandlerThread extends Thread {\n\n    private final ApplicationContext context;\n\n    private final String[] baseArgs;\n\n    private final InputStream inputStream;\n\n    public CommandHandlerThread(ApplicationContext context, InputStream inputStream, String... baseArgs){\n        this.context = context;\n        this.baseArgs = baseArgs;\n        this.inputStream = inputStream;\n    }\n    @Override", "    public void run() {\n        //Waiting and processing commands from std in\n        Scanner scanner = new Scanner(inputStream);\n        CommandHandler handler = new CommandHandler(context, baseArgs);\n        while (true) {\n            String input = scanner.nextLine();\n            String[] arguments = input.split(\" \");\n            String command = arguments[0];\n            boolean result = handler.onCommand(command, arguments);\n            if (!result) {\n                if(command.equalsIgnoreCase(\"stopCommandHandler\")){\n                    break;\n                }\n                log.error(\"Could not recognize command\");\n            }\n        }\n        log.info(\"Stopped command handler!\");\n    }\n}\n", "            if (!result) {\n                if(command.equalsIgnoreCase(\"stopCommandHandler\")){\n                    break;\n                }\n                log.error(\"Could not recognize command\");\n            }\n        }\n        log.info(\"Stopped command handler!\");\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/commandhandler/CommandHandler.java", "chunked_list": ["package org.easycontactforms.core.commandhandler;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.easycontactforms.api.Plugin;\nimport org.easycontactforms.core.EasyContactFormsApplication;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.context.ApplicationContext;\n\nimport java.util.*;", "\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\n\n/**\n * Class for handling command line inputs\n */\n@Slf4j\npublic class CommandHandler {\n\n    /**\n     * Currently used Spring Application Context\n     */\n    private ApplicationContext context;\n\n    /**\n     * JVM arguments for startup of service\n     */\n    private final String[] baseArgs;\n\n    /**\n     * List of all plugins ordered by priority\n     */\n    private List<Plugin> plugins;\n\n    public CommandHandler(ApplicationContext context, String[] args){\n        this.context = context;\n        this.baseArgs = args;\n        this.plugins = this.priorities();\n    }\n\n    /**\n     * gets executed if new line is entered\n     * @param command base command (everything before first white space)\n     * @param args all command line arguments (including command)\n     */", " */\n@Slf4j\npublic class CommandHandler {\n\n    /**\n     * Currently used Spring Application Context\n     */\n    private ApplicationContext context;\n\n    /**\n     * JVM arguments for startup of service\n     */\n    private final String[] baseArgs;\n\n    /**\n     * List of all plugins ordered by priority\n     */\n    private List<Plugin> plugins;\n\n    public CommandHandler(ApplicationContext context, String[] args){\n        this.context = context;\n        this.baseArgs = args;\n        this.plugins = this.priorities();\n    }\n\n    /**\n     * gets executed if new line is entered\n     * @param command base command (everything before first white space)\n     * @param args all command line arguments (including command)\n     */", "    public boolean onCommand(String command, String... args) {\n        boolean internalCommand = internalCommands(command, args);\n        boolean external = false;\n        if(!internalCommand){\n            external = onCommandPlugins(command, args);\n        }\n        return internalCommand || external;\n    }\n\n    /**\n     * Sorts plugins by priority\n     * @return list of all plugins loaded sorted by priority from Highest to Lowest\n     */\n    private List<Plugin> priorities(){\n        return PluginStore.instance.plugins.values().stream().sorted(Comparator.comparingInt(plugin -> plugin.priority.value)).collect(Collectors.toList());\n    }\n\n    /**\n     * executes plugin commands\n     * @param command executed command\n     * @param args command line arguments\n     */\n    private boolean onCommandPlugins(String command, String... args) {", "        for (Plugin plugin : plugins) {\n            try {\n                boolean handled = plugin.onCommand(command, args);\n                if (handled) {\n                    return true;\n                }\n            } catch (AbstractMethodError error) {\n                log.warn(\"Plugin does not implement onCommand Method\");\n                log.warn(error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    /**\n     * executes basic internal commands from command line\n     * @param command executed command\n     * @param args command line arguments\n     * @return true if command is internal, else false\n     */\n    private boolean internalCommands(String command, String... args)  {", "        if (command.equalsIgnoreCase(\"stop\")) {\n            System.exit(0);\n            return true;\n        } else if (command.equalsIgnoreCase(\"reloadplugins\")) {\n            reloadPlugins();\n            return true;\n        } else if (command.equalsIgnoreCase(\"reloadspring\")) {\n            SpringApplication.exit(context);\n            this.context = SpringApplication.run(EasyContactFormsApplication.class, this.baseArgs);\n            return true;\n        } else if (command.equalsIgnoreCase(\"reload\")) {\n            SpringApplication.exit(context);\n            this.context = SpringApplication.run(EasyContactFormsApplication.class, this.baseArgs);\n            reloadPlugins();\n            return true;", "        } else if (command.equalsIgnoreCase(\"reload\")) {\n            SpringApplication.exit(context);\n            this.context = SpringApplication.run(EasyContactFormsApplication.class, this.baseArgs);\n            reloadPlugins();\n            return true;\n        } else if (command.equalsIgnoreCase(\"shutdown\")) {\n            shutdown(args);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * reloads all plugins from source\n     */\n    private void reloadPlugins(){\n        String pluginsPath = \"plugins\";\n\n        EasyContactFormsApplication.loadPlugins(pluginsPath);\n        plugins = priorities();\n\n        //Starts all plugins", "        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onStartup();\n        }\n\n        //Executes on load hook\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onLoad();\n        }\n    }\n\n    /**\n     * logic for shutdown command\n     * @param args command line arguments\n     */\n    private void shutdown(String... args){\n        // standard execution", "        if(args.length == 1){\n            try {\n                TimeUnit.SECONDS.sleep(10);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            System.exit(0);\n            return;\n        }\n        // initiates shutdown immediately (like stop command)\n        if(args[1].equalsIgnoreCase(\"now\")){\n            System.exit(0);\n            return;\n        }\n        // initiates shutdown after given delay in seconds", "        if(args[1].equalsIgnoreCase(\"now\")){\n            System.exit(0);\n            return;\n        }\n        // initiates shutdown after given delay in seconds\n        try{\n            int delay = Integer.parseInt(args[1]);\n            TimeUnit.SECONDS.sleep(delay);\n            System.exit(0);\n        } catch (NumberFormatException exception) {\n            log.error(\"Cannot parse input. Argument 1 is not of type integer: {}\", args[1]);\n        } catch (InterruptedException e) {\n            log.error(\"Something went wrong on Shutdown\");\n        }\n    }\n\n    /**\n     *\n     * @return List of Plugins ordered from highest to lowest priority\n     */\n    public List<Plugin> getPluginsByPriority(){\n        return plugins;\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/services/MailSendThread.java", "chunked_list": ["package org.easycontactforms.core.services;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.easycontactforms.core.ApplicationState;\nimport org.easycontactforms.core.pluginloader.PluginStore;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport javax.mail.MessagingException;\nimport java.io.UnsupportedEncodingException;", "import javax.mail.MessagingException;\nimport java.io.UnsupportedEncodingException;\n\n@Slf4j\npublic class MailSendThread extends Thread {\n\n    private final MailingService mailingService;\n\n    private final ContactFormService contactFormService;\n    private final ContactForm contactForm;\n\n    @Value(\"${redirect.mode.resend}\")\n    private boolean resendPolicy;\n\n    public MailSendThread(ContactFormService contactFormService, MailingService mailingService, ContactForm contactForm) {\n        this.contactFormService = contactFormService;\n        this.mailingService = mailingService;\n        this.contactForm = contactForm;\n    }\n\n    @Override", "    public void run() {\n        super.run();\n        try {\n            mailingService.sendMail(contactForm);\n        } catch (MessagingException e) {\n            log.error(\"Could not connect to smtp server\");\n            ApplicationState.smtpAvailable = false;\n            return;\n        } catch (UnsupportedEncodingException e) {\n            ApplicationState.smtpAvailable = false;\n            e.printStackTrace();\n            return;\n        }", "        if(!ApplicationState.smtpAvailable && resendPolicy){\n            ApplicationState.smtpAvailable = true;\n            mailingService.resendMails(true, contactFormService);\n        }\n        contactForm.setEmailSent(true);\n        contactFormService.updateContactForm(contactForm);\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onMailSent(new org.easycontactforms.api.models.ContactForm(contactForm.getId(), contactForm.getName(), contactForm.getEmail(), contactForm.getSubject(), contactForm.getMessage()));\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/services/MailingService.java", "chunked_list": ["package org.easycontactforms.core.services;\n\nimport org.easycontactforms.core.models.ContactForm;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.thymeleaf.TemplateEngine;\nimport org.thymeleaf.context.Context;\nimport org.thymeleaf.templatemode.TemplateMode;", "import org.thymeleaf.context.Context;\nimport org.thymeleaf.templatemode.TemplateMode;\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\n\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport java.io.UnsupportedEncodingException;", "import javax.mail.internet.MimeMultipart;\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport java.util.Properties;\n\n/**\n * Service to send emails\n */\n@Slf4j\n@Service\npublic class MailingService {\n\n    @Value(\"${mail.user.name}\")\n    private String name;\n\n    @Value(\"${mail.user.password}\")\n    private String password;\n\n    @Value(\"${mail.smtp.auth}\")\n    private String auth;\n\n    @Value(\"${mail.smtp.ssl.enable}\")\n    private String enable;\n\n    @Value(\"${mail.smtp.host}\")\n    private String host;\n\n    @Value(\"${mail.smtp.port}\")\n    private String port;\n\n    @Value(\"${mail.smtp.ssl.protocols}\")\n    private String protocols;\n\n    @Value(\"${mail.smtp.ssl.trust}\")\n    private String trust;\n\n    @Value(\"${mail.user.address}\")\n    private String address;\n\n    @Value(\"${mail.recipient.address}\")\n    private String recipient;\n\n    @Value(\"${mail.user.displayName}\")\n    private String displayName;\n\n    /**\n     * method sends email based on configuration of application\n     * @param contactForm contact form to redirect\n     * @throws MessagingException is thrown if smtp server is not reachable\n     * @throws UnsupportedEncodingException unexpected error\n     */", "@Slf4j\n@Service\npublic class MailingService {\n\n    @Value(\"${mail.user.name}\")\n    private String name;\n\n    @Value(\"${mail.user.password}\")\n    private String password;\n\n    @Value(\"${mail.smtp.auth}\")\n    private String auth;\n\n    @Value(\"${mail.smtp.ssl.enable}\")\n    private String enable;\n\n    @Value(\"${mail.smtp.host}\")\n    private String host;\n\n    @Value(\"${mail.smtp.port}\")\n    private String port;\n\n    @Value(\"${mail.smtp.ssl.protocols}\")\n    private String protocols;\n\n    @Value(\"${mail.smtp.ssl.trust}\")\n    private String trust;\n\n    @Value(\"${mail.user.address}\")\n    private String address;\n\n    @Value(\"${mail.recipient.address}\")\n    private String recipient;\n\n    @Value(\"${mail.user.displayName}\")\n    private String displayName;\n\n    /**\n     * method sends email based on configuration of application\n     * @param contactForm contact form to redirect\n     * @throws MessagingException is thrown if smtp server is not reachable\n     * @throws UnsupportedEncodingException unexpected error\n     */", "    public void sendMail(ContactForm contactForm) throws MessagingException, UnsupportedEncodingException {\n        Properties prop = new Properties();\n        prop.put(\"mail.smtp.auth\", auth);\n        prop.put(\"mail.smtp.ssl.enable\", enable);\n        prop.put(\"mail.smtp.host\", host);\n        prop.put(\"mail.smtp.port\", port);\n        prop.put(\"mail.smtp.ssl.protocols\", protocols);\n        prop.put(\"mail.smtp.ssl.trust\", trust);\n\n        Session session = Session.getInstance(prop, new Authenticator() {\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(\n                        name, password);\n            }\n        });\n        String msg = renderHTML(contactForm);\n        Message message = new MimeMessage(session);\n\n        message.setFrom(new InternetAddress(address, displayName));\n        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipient));\n        message.setSubject(\"New Contact Request from: \" + contactForm.getEmail());\n\n        MimeBodyPart mimeBodyPart = new MimeBodyPart();\n        mimeBodyPart.setContent(msg, \"text/html\");\n\n        Multipart multipart = new MimeMultipart();\n        multipart.addBodyPart(mimeBodyPart);\n\n        message.setContent(multipart);\n        Transport.send(message);\n\n\n\n    }\n\n    /**\n     * Renders HTML for Email based on contact form\n     * @param contactForm information to render HTML\n     * @return rendered HTML as String\n     */", "    public String renderHTML(ContactForm contactForm) {\n        ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n        templateResolver.setSuffix(\".html\");\n        templateResolver.setTemplateMode(TemplateMode.HTML);\n\n        TemplateEngine templateEngine = new TemplateEngine();\n        templateEngine.setTemplateResolver(templateResolver);\n\n        String[] msg = contactForm.getMessage().split(\"\\n\");\n\n\n        Context context = new Context();\n        context.setVariable(\"name\", contactForm.getName() == null ? \"\" : contactForm.getName());\n        context.setVariable(\"subject\", contactForm.getSubject() == null ? \"\" : contactForm.getSubject());\n        context.setVariable(\"message\", msg);\n        context.setVariable(\"email\", contactForm.getEmail());\n        context.setVariable(\"id\", contactForm.getId());\n\n        return templateEngine.process(\"mail-template\", context);\n    }\n", "    public void resendMails(boolean resendOnlyNotSendMails, ContactFormService contactFormService){\n        if(resendOnlyNotSendMails){\n            List<ContactForm> forms = contactFormService.getContactForms(true);\n            for (ContactForm contactForm : forms){\n                MailSendThread thread = new MailSendThread(contactFormService, this, contactForm);\n                thread.start();\n            }\n        }\n\n    }\n}\n"]}
{"filename": "src/main/java/org/easycontactforms/core/services/ContactFormService.java", "chunked_list": ["package org.easycontactforms.core.services;\n\nimport org.easycontactforms.core.dtos.ContactFormDto;\nimport org.easycontactforms.core.models.ContactForm;\nimport org.easycontactforms.core.repositories.ContactFormRepository;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *  Service to handle processing of contact form input\n */\n@Slf4j\n@Service\npublic class ContactFormService {\n    private final ContactFormRepository repository;\n\n    private final MailingService mailingService;\n\n    @Value(\"${redirect.mode}\")\n    private String mode;\n\n    @Autowired\n    public ContactFormService(ContactFormRepository repository, MailingService mailingService){\n        this.repository = repository;\n        this.mailingService = mailingService;\n    }\n\n    /**\n     * handles initial request\n     * @param contactFormDto\n     * @return\n     */", "@Slf4j\n@Service\npublic class ContactFormService {\n    private final ContactFormRepository repository;\n\n    private final MailingService mailingService;\n\n    @Value(\"${redirect.mode}\")\n    private String mode;\n\n    @Autowired\n    public ContactFormService(ContactFormRepository repository, MailingService mailingService){\n        this.repository = repository;\n        this.mailingService = mailingService;\n    }\n\n    /**\n     * handles initial request\n     * @param contactFormDto\n     * @return\n     */", "    public ContactForm saveContactForm(ContactFormDto contactFormDto){\n        ContactForm contactForm = repository.save(ContactForm.fromContactFormDto(contactFormDto));\n        if(mode.equalsIgnoreCase(\"email\")){\n            log.info(\"Redirecting Contact Form to email\");\n            MailSendThread thread = new MailSendThread(this, mailingService, contactForm);\n            thread.start();\n        }\n        log.info(\"Saved Contact Form\");\n        return contactForm;\n    }\n\n    /**\n     * updates single instance in database\n     * @param contactForm changed object\n     * @return result from database\n     */", "    public ContactForm updateContactForm(ContactForm contactForm){\n        repository.save(contactForm);\n        return contactForm;\n    }\n\n    public List<ContactForm> getContactForms(boolean onlyNotSendEmails){\n\n        if(!onlyNotSendEmails){\n            return repository.findAll();\n        }else {\n            return repository.findByEmailSent(false);\n        }\n    }\n}\n"]}
