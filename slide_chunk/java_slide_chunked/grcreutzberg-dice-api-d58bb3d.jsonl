{"filename": "src/test/java/com/dice/ApiApplicationTests.java", "chunked_list": ["package com.dice;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ApiApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/dice/DiceApplication.java", "chunked_list": ["package com.dice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DiceApplication.class, args);\n    }\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(DiceApplication.class, args);\n    }\n}\n"]}
{"filename": "src/main/java/com/dice/DTO/DiceSwDTO.java", "chunked_list": ["package com.dice.DTO;\n\npublic class DiceSwDTO {\n    private int habilidade = 0;\n    private int proficiencia = 0;\n    private int dificuldade = 0;\n    private int desafio = 0;\n    private int ampliacao = 0;\n    private int contratempo = 0;\n\n    public int getHabilidade() {\n        return habilidade;\n    }\n", "    public int getHabilidade() {\n        return habilidade;\n    }\n\n    public void setHabilidade(final int habilidade) {\n        this.habilidade = habilidade;\n    }\n\n    public int getProficiencia() {\n        return proficiencia;\n    }\n", "    public int getProficiencia() {\n        return proficiencia;\n    }\n\n    public void setProficiencia(final int proficiencia) {\n        this.proficiencia = proficiencia;\n    }\n\n    public int getDificuldade() {\n        return dificuldade;\n    }\n", "    public int getDificuldade() {\n        return dificuldade;\n    }\n\n    public void setDificuldade(final int dificuldade) {\n        this.dificuldade = dificuldade;\n    }\n\n    public int getDesafio() {\n        return desafio;\n    }\n", "    public int getDesafio() {\n        return desafio;\n    }\n\n    public void setDesafio(final int desafio) {\n        this.desafio = desafio;\n    }\n\n    public int getAmpliacao() {\n        return ampliacao;\n    }\n", "    public int getAmpliacao() {\n        return ampliacao;\n    }\n\n    public void setAmpliacao(final int ampliacao) {\n        this.ampliacao = ampliacao;\n    }\n\n    public int getContratempo() {\n        return contratempo;\n    }\n", "    public int getContratempo() {\n        return contratempo;\n    }\n\n    public void setContratempo(final int contratempo) {\n        this.contratempo = contratempo;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dice/DTO/ResultadoSwDTO.java", "chunked_list": ["package com.dice.DTO;\n\npublic class ResultadoSwDTO {\n\n    private int sucessos = 0;\n    private int triunfos = 0;\n    private int vantagens = 0;\n    private int fracassos = 0;\n    private int desesperos = 0;\n    private int ameacas = 0;\n", "    public int getSucessos() {\n        return sucessos;\n    }\n\n    public void setSucessos(final int sucessos) {\n        this.sucessos = sucessos;\n    }\n\n    public int getTriunfos() {\n        return triunfos;\n    }\n", "    public int getTriunfos() {\n        return triunfos;\n    }\n\n    public void setTriunfos(final int triunfos) {\n        this.triunfos = triunfos;\n    }\n\n    public int getVantagens() {\n        return vantagens;\n    }\n", "    public int getVantagens() {\n        return vantagens;\n    }\n\n    public void setVantagens(final int vantagens) {\n        this.vantagens = vantagens;\n    }\n\n    public int getFracassos() {\n        return fracassos;\n    }\n", "    public int getFracassos() {\n        return fracassos;\n    }\n\n    public void setFracassos(final int fracassos) {\n        this.fracassos = fracassos;\n    }\n\n    public int getDesesperos() {\n        return desesperos;\n    }\n", "    public int getDesesperos() {\n        return desesperos;\n    }\n\n    public void setDesesperos(final int desesperos) {\n        this.desesperos = desesperos;\n    }\n\n    public int getAmeacas() {\n        return ameacas;\n    }\n", "    public int getAmeacas() {\n        return ameacas;\n    }\n\n    public void setAmeacas(final int ameacas) {\n        this.ameacas = ameacas;\n    }\n}\n"]}
{"filename": "src/main/java/com/dice/DTO/ResultadoSwForceDTO.java", "chunked_list": ["package com.dice.DTO;\n\npublic class ResultadoSwForceDTO {\n\n    private int luz = 0;\n    private int negro = 0;\n\n    public int getLuz() {\n        return luz;\n    }\n", "    public void setLuz(final int luz) {\n        this.luz = luz;\n    }\n\n    public int getNegro() {\n        return negro;\n    }\n\n    public void setNegro(final int negro) {\n        this.negro = negro;\n    }\n}\n", "    public void setNegro(final int negro) {\n        this.negro = negro;\n    }\n}\n"]}
{"filename": "src/main/java/com/dice/model/Dice.java", "chunked_list": ["package com.dice.model;\n\npublic class Dice {\n    private int nFaces;\n\n    public Dice(int nFaces) {\n        if (nFaces < 2) {\n            throw new IllegalArgumentException(\"O dado deve ter pelo menos duas faces.\");\n        }\n        this.nFaces = nFaces;\n    }\n", "    public int roll() {\n        return (int) (Math.random() * nFaces) + 1;\n    }\n}\n\n"]}
{"filename": "src/main/java/com/dice/controller/DiceRollController.java", "chunked_list": ["package com.dice.controller;\n\nimport com.dice.service.DiceRollService;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/v1/dice\")\npublic class DiceRollController {\n    private final DiceRollService service;\n    public DiceRollController(DiceRollService diceRollService) {\n        this.service = diceRollService;\n    }\n\n    @GetMapping(\"/roll\")\n    public int[] rollDice(\n            @RequestParam(name = \"quantity\", defaultValue = \"1\") int quantity,\n            @RequestParam(name = \"faces\", defaultValue = \"20\") int faces\n    ) {\n        return service.rollDice(quantity, faces);\n    }\n\n    @GetMapping(\"/advantage\")", "@RestController\n@RequestMapping(\"/v1/dice\")\npublic class DiceRollController {\n    private final DiceRollService service;\n    public DiceRollController(DiceRollService diceRollService) {\n        this.service = diceRollService;\n    }\n\n    @GetMapping(\"/roll\")\n    public int[] rollDice(\n            @RequestParam(name = \"quantity\", defaultValue = \"1\") int quantity,\n            @RequestParam(name = \"faces\", defaultValue = \"20\") int faces\n    ) {\n        return service.rollDice(quantity, faces);\n    }\n\n    @GetMapping(\"/advantage\")", "    public int rollAdvantage(\n            @RequestParam(name = \"dice\", defaultValue = \"20\") int dice\n    ) {\n        return service.rollDisVantage(\"Advantage\", dice);\n    }\n\n    @GetMapping(\"/disadvantage\")\n    public int rollDisadvantage(\n            @RequestParam(name = \"dice\", defaultValue = \"20\") int dice\n    ) {\n        return service.rollDisVantage(\"Disadvantage\", dice);\n    }\n}\n"]}
{"filename": "src/main/java/com/dice/controller/StarWarsController.java", "chunked_list": ["package com.dice.controller;\n\nimport com.dice.DTO.DiceSwDTO;\nimport com.dice.DTO.ResultadoSwDTO;\nimport com.dice.DTO.ResultadoSwForceDTO;\nimport com.dice.service.StarWarsService;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n", "import org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/v1/dice/sw\")\npublic class StarWarsController {\n\n    private final StarWarsService service;\n    public StarWarsController(StarWarsService starWarsService) {\n        this.service = starWarsService;\n    }\n\n    @GetMapping(\"/force\")\n    public ResponseEntity<ResultadoSwForceDTO> rollForce(\n            @RequestParam(name = \"quantity\", defaultValue = \"1\") int quantity\n    ) {\n        return new ResponseEntity<ResultadoSwForceDTO>(service.rollForce(quantity), HttpStatus.OK);\n    }\n\n    @PostMapping(\"/roll\")\n    public ResponseEntity<ResultadoSwDTO> rollDice(@RequestBody DiceSwDTO dice) {\n        return new ResponseEntity<ResultadoSwDTO>(service.rollSwDice(dice), HttpStatus.OK);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dice/service/StarWarsService.java", "chunked_list": ["package com.dice.service;\n\nimport com.dice.DTO.DiceSwDTO;\nimport com.dice.DTO.ResultadoSwDTO;\nimport com.dice.DTO.ResultadoSwForceDTO;\nimport com.dice.model.Dice;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StarWarsService {\n\n    public StarWarsService() {}\n", "@Service\npublic class StarWarsService {\n\n    public StarWarsService() {}\n\n    public ResultadoSwDTO rollSwDice(DiceSwDTO dice) {\n        int success = 0;\n        int triumph = 0;\n        int advantage = 0;\n        int failure = 0;\n        int despair = 0;\n        int threat = 0;\n\n        // Obter os valores para cada tipo de dado.\n        int boost = dice.getAmpliacao();\n        int ability = dice.getHabilidade();\n        int proficiency = dice.getProficiencia();\n        int setback = dice.getContratempo();\n        int difficulty = dice.getDificuldade();\n        int challenge = dice.getDesafio();\n\n        // Calcular os resultados dos dados.", "        for (int i = 0; i < boost; i++) {\n            Dice boostDice = new Dice(6);\n            int result = boostDice.roll();\n            if (result == 1 || result == 2 ) {\n                // Do nothing\n            } else if (result == 3) {\n                success += 1;\n            } else if (result == 4) {\n                success += 1;\n                advantage += 1;\n            } else if (result == 5) {\n                advantage += 2;", "            } else if (result == 5) {\n                advantage += 2;\n            } else if (result == 6) {\n                advantage += 1;\n            }\n        }\n\n        for (int i = 0; i < ability; i++) {\n            Dice abilityDice = new Dice(8);\n            int result = abilityDice.roll();\n            if (result == 1) {\n                // Do nothing", "            if (result == 1) {\n                // Do nothing\n            } else if (result == 2 || result == 3) {\n                success += 1;\n            } else if (result == 4) {\n                success += 2;\n            } else if (result == 5 || result == 6) {\n                advantage += 1;\n            } else if (result == 7) {\n                success += 1;\n                advantage += 1;", "            } else if (result == 7) {\n                success += 1;\n                advantage += 1;\n            } else if (result == 8) {\n                advantage += 2;\n            }\n        }\n\n        for (int i = 0; i < proficiency; i++) {\n            Dice proficiencyDice = new Dice(12);\n            int result = proficiencyDice.roll();", "        for (int i = 0; i < proficiency; i++) {\n            Dice proficiencyDice = new Dice(12);\n            int result = proficiencyDice.roll();\n            if (result == 1) {\n                // Do nothing\n            } else if (result == 2 || result == 3) {\n                success += 1;\n            } else if (result == 4 || result == 5) {\n                success += 2;\n            } else if (result == 6) {\n                advantage += 1;", "            } else if (result == 6) {\n                advantage += 1;\n            } else if (result == 7 || result == 8 || result == 9) {\n                success += 1;\n                advantage += 1;\n            } else if (result == 10 || result == 11) {\n                advantage += 2;\n            } else if (result == 12) {\n                triumph += 1;\n            }\n        }\n", "        for (int i = 0; i < setback; i++) {\n            Dice setbackDice = new Dice(6);\n            int result = setbackDice.roll();\n            if (result == 1 || result == 2) {\n                // Do nothing\n            } else if (result == 3 || result == 4) {\n                failure += 1;\n            } else if (result == 5 || result == 6) {\n                threat += 1;\n            }\n        }\n", "        for (int i = 0; i < difficulty; i++) {\n            Dice difficultyDice = new Dice(8);\n            int result = difficultyDice.roll();\n            if (result == 1) {\n                // Do nothing\n            } else if (result == 2) {\n                failure += 1;\n            } else if (result == 3) {\n                failure += 2;\n            } else if (result == 4 || result == 5 || result == 6) {\n                threat += 1;", "            } else if (result == 4 || result == 5 || result == 6) {\n                threat += 1;\n            } else if (result == 7) {\n                threat += 2;\n            } else if (result == 8) {\n                failure += 1;\n                threat += 1;\n            }\n        }\n\n        for (int i = 0; i < challenge; i++) {\n            Dice challengeDice = new Dice(12);\n            int result = challengeDice.roll();", "        for (int i = 0; i < challenge; i++) {\n            Dice challengeDice = new Dice(12);\n            int result = challengeDice.roll();\n            if (result == 1) {\n                // Do nothing\n            } else if (result == 2 || result == 3) {\n                failure += 1;\n            } else if (result == 4 || result == 5) {\n                failure += 2;\n            } else if (result == 6 || result == 7) {\n                threat += 1;", "            } else if (result == 6 || result == 7) {\n                threat += 1;\n            } else if (result == 8 || result == 9) {\n                failure += 1;\n                threat += 1;\n            } else if (result == 10 || result == 11) {\n                threat += 2;\n            } else if (result == 12) {\n                despair += 1;\n            }\n        }\n\n        return getResultSwDice(success, triumph, advantage, failure, despair, threat);\n    }\n\n    private ResultadoSwDTO getResultSwDice(int success, int triumph, int advantage, int failure, int despair, int threat) {\n        ResultadoSwDTO diceResult = new ResultadoSwDTO();", "        if (success - failure > 0) {\n            diceResult.setSucessos(success - failure);\n            diceResult.setFracassos(0);\n        } else if (success - failure < 0) {\n            diceResult.setSucessos(0);\n            diceResult.setFracassos(failure - success);\n        } else {\n            diceResult.setSucessos(0);\n            diceResult.setFracassos(0);\n        }\n", "        if (advantage - threat > 0) {\n            diceResult.setVantagens(advantage - threat);\n            diceResult.setAmeacas(0);\n        } else if (advantage - threat < 0) {\n            diceResult.setVantagens(0);\n            diceResult.setAmeacas(threat - advantage);\n        } else {\n            diceResult.setVantagens(0);\n            diceResult.setAmeacas(0);\n        }\n", "        if (triumph - despair > 0) {\n            diceResult.setTriunfos(triumph - despair);\n            diceResult.setDesesperos(0);\n        } else if (triumph - despair < 0) {\n            diceResult.setTriunfos(0);\n            diceResult.setDesesperos(despair - triumph);\n        } else {\n            diceResult.setTriunfos(0);\n            diceResult.setDesesperos(0);\n        }\n        return diceResult;\n    }\n", "    public ResultadoSwForceDTO rollForce(int quantity) {\n        int light = 0;\n        int dark = 0;\n\n        for (int i = 0; i < quantity; i++) {\n            Dice challengeDice = new Dice(12);\n            int result = challengeDice.roll();\n            if (result == 1 || result == 2 || result == 3 || result == 4 || result == 5 || result == 6) {\n                dark += 1;\n            } else if (result == 7) {\n                dark += 2;", "            } else if (result == 7) {\n                dark += 2;\n            } else if (result == 8 || result == 9) {\n                light += 1;\n            } else if (result == 10 || result == 11 || result == 12) {\n                light += 2;\n            }\n        }\n\n        ResultadoSwForceDTO forceResult = new ResultadoSwForceDTO();\n        forceResult.setLuz(light);\n        forceResult.setNegro(dark);\n        return  forceResult;\n    }\n}\n"]}
{"filename": "src/main/java/com/dice/service/DiceRollService.java", "chunked_list": ["package com.dice.service;\n\nimport com.dice.model.Dice;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DiceRollService {\n\n    public DiceRollService() {}\n\n    public int[] rollDice(int numberOfDice, int faces) {", "        if (numberOfDice <= 0) {\n            throw new IllegalArgumentException(\"A quantidade de dados deve ser maior que zero.\");\n        }\n\n        int[] results = new int[numberOfDice];\n        Dice dice = new Dice(faces);\n\n        for (int i = 0; i < numberOfDice; i++) {\n            results[i] = dice.roll();\n        }\n\n        return results;\n    }\n", "    public int rollDisVantage(String type, int dice) {\n        if (dice <= 0) {\n            throw new IllegalArgumentException(\"O dado deve ser maior que zero.\");\n        }\n\n        int diceX = new Dice(dice).roll();\n        int diceY = new Dice(dice).roll();\n        int resultDice = new Dice(dice).roll();\n\n        if (type.equalsIgnoreCase(\"Advantage\")) {\n            return resultDice + Math.max(diceX, diceY); //Retorna Dado + Vantagem\n        }\n        return resultDice - Math.min(diceX, diceY); //Retorna Dado - Desvantagem\n    }\n}\n\n", "        if (type.equalsIgnoreCase(\"Advantage\")) {\n            return resultDice + Math.max(diceX, diceY); //Retorna Dado + Vantagem\n        }\n        return resultDice - Math.min(diceX, diceY); //Retorna Dado - Desvantagem\n    }\n}\n\n"]}
