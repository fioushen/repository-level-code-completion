{"filename": "plugins/minio-plugins/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingMinioServerException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * MinioFileServiceException\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingMinioServerException extends FileShippingException {\n}\n"]}
{"filename": "plugins/minio-plugins/src/main/java/com/rebiekong/tec/tools/file/bridge/service/impl/MinioFileServiceImpl.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.service.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.exception.*;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport io.minio.*;\nimport io.minio.messages.Item;\n\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Iterator;", "import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * MinioFileServiceImpl\n *\n * @author rebie\n * @since 2023/04/13.", " * @author rebie\n * @since 2023/04/13.\n */\npublic class MinioFileServiceImpl implements IFileService {\n\n    private String accessKey;\n    private String secretKey;\n    private String url;\n    private String bucket;\n    private Boolean trace;\n\n    private MinioClient client = null;\n\n    @Override", "    public String fileServiceFlag() {\n        return \"minio\";\n    }\n\n    @Override\n    public void init(Map<String, String> obj) {\n        this.accessKey = obj.get(\"accessKey\");\n        this.secretKey = obj.get(\"secretKey\");\n        this.url = obj.get(\"url\");\n        this.bucket = obj.get(\"bucket\");\n        this.trace = Boolean.valueOf(obj.getOrDefault(\"trace\", \"false\"));\n\n        client = MinioClient.builder()\n                .endpoint(this.url)\n                .credentials(this.accessKey, this.secretKey)\n                .build();", "        if (this.trace) {\n            client.traceOn(System.out);\n        }\n    }\n\n    @Override\n    public boolean fileExists(String path) {\n        try {\n            Iterator<Result<Item>> b = null;\n            b = client.listObjects(ListObjectsArgs.builder()\n                    .bucket(bucket)\n                    .prefix(path)\n                    .build()).iterator();", "            if (!b.hasNext()) {\n                return false;\n            }\n            Item item = b.next().get();\n            String on = item.objectName();\n            if (!on.startsWith(\"/\")) {\n                return path.equals(\"/\" + on);\n            } else {\n                return path.equals(on);\n            }\n        } catch (Throwable e) {\n            throw new FileShippingMinioServerException();\n        }\n    }\n\n    @Override", "    public InputStream read(String path) throws FileShippingReadException {\n        try {\n            return client.getObject(GetObjectArgs.builder()\n                    .bucket(bucket)\n                    .object(path)\n                    .build());\n        } catch (Throwable e) {\n            e.printStackTrace();\n            throw new FileShippingReadException();\n        }\n\n    }\n\n    @Override", "    public long fileSize(String path) throws FileShippingReadException {\n        try {\n            return client.statObject(StatObjectArgs.builder()\n                    .bucket(bucket)\n                    .object(path)\n                    .build()).size();\n        } catch (Throwable e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public List<FileMeta> listDir(String path) throws FileShippingListException {", "        try {\n            List<FileMeta> fileMetas = new ArrayList<>();\n            for (Result<Item> listObject : client.listObjects(ListObjectsArgs.builder()\n                    .bucket(bucket)\n                    .prefix(path)\n                    .build())) {\n                fileMetas.add(FileMeta.builder()\n                        .lastModifyTime(listObject.get().lastModified().toEpochSecond())\n                        .fileSize(listObject.get().size())\n                        .path(\"/\" + listObject.get().objectName())\n                        .isDir(listObject.get().isDir())\n                        .build());\n            }\n            return fileMetas;\n        } catch (Throwable e) {\n            throw new FileShippingMinioServerException();\n        }\n    }\n\n    @Override", "    public void mkdir(String path) throws FileShippingMkdirException {\n\n    }\n\n    @Override\n    public void write(String path, InputStream inputStream) throws FileShippingWriteException {\n        try {\n            client.putObject(PutObjectArgs.builder()\n                    .bucket(bucket)\n                    .object(path)\n                    .stream(inputStream, inputStream.available(), -1)\n                    .build());\n        } catch (Throwable e) {\n            throw new FileShippingMinioServerException();\n        }\n    }\n\n    @Override", "    public void rm(String path) throws FileShippingRmException {\n        try {\n            client.removeObject(RemoveObjectArgs.builder()\n                    .bucket(bucket)\n                    .object(path)\n                    .build());\n        } catch (Throwable e) {\n            throw new FileShippingMinioServerException();\n        }\n    }\n\n    @Override", "    public void rename(String src, String dst) throws FileShippingRmException {\n        try {\n            client.copyObject(CopyObjectArgs.builder()\n                    .bucket(bucket)\n                    .object(dst)\n                    .source(CopySource.builder()\n                            .bucket(bucket)\n                            .object(src)\n                            .build())\n                    .build());\n            rm(src);\n        } catch (Throwable e) {\n            throw new FileShippingMinioServerException();\n        }\n    }\n}\n"]}
{"filename": "plugins/ftp-plugins/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingFtpServerException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingFtpServerException\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingFtpServerException extends FileShippingException {\n}\n\n"]}
{"filename": "plugins/ftp-plugins/src/main/java/com/rebiekong/tec/tools/file/bridge/service/impl/FtpFileServiceImpl.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.service.impl;\n\nimport cn.hutool.core.thread.ThreadFactoryBuilder;", "\nimport cn.hutool.core.thread.ThreadFactoryBuilder;\nimport cn.hutool.core.thread.ThreadUtil;\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.exception.*;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport com.rebiekong.tec.tools.file.bridge.utils.NumberUtil;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPFile;", "import org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPFile;\nimport org.apache.commons.net.ftp.FTPReply;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;", "import java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;", "import java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Collectors;\n\n/**\n * FtpFileServiceImpl\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FtpFileServiceImpl implements IFileService {\n\n    private String ip;\n    private Integer port;\n    private String userName;\n    private String userPassword;\n    private String root;\n    private String serverCharset;\n    private String tmpPrefix;\n    private Boolean ifUsingTemp;\n    private FTPClient ftpClient;\n    private ScheduledExecutorService exe;\n\n    @Override", " * @since 2023/04/13.\n */\npublic class FtpFileServiceImpl implements IFileService {\n\n    private String ip;\n    private Integer port;\n    private String userName;\n    private String userPassword;\n    private String root;\n    private String serverCharset;\n    private String tmpPrefix;\n    private Boolean ifUsingTemp;\n    private FTPClient ftpClient;\n    private ScheduledExecutorService exe;\n\n    @Override", "    public void close() {\n        exe.shutdown();\n    }\n\n    @Override\n    public String fileServiceFlag() {\n        return \"ftp\";\n    }\n\n    @Override\n    public void init(Map<String, String> obj) {\n        this.root = obj.get(\"root\");\n        this.ip = obj.get(\"ip\");\n        this.port = Integer.parseInt(obj.get(\"port\"));\n        this.userName = obj.get(\"username\");\n        this.userPassword = obj.get(\"password\");\n        this.serverCharset = obj.getOrDefault(\"charset\", \"ISO-8859-1\");\n        this.ifUsingTemp = Boolean.valueOf(obj.getOrDefault(\"usingTemp\", \"true\"));\n        this.tmpPrefix = obj.getOrDefault(\"tmpPrefix\", \".tmp\");\n", "    public void init(Map<String, String> obj) {\n        this.root = obj.get(\"root\");\n        this.ip = obj.get(\"ip\");\n        this.port = Integer.parseInt(obj.get(\"port\"));\n        this.userName = obj.get(\"username\");\n        this.userPassword = obj.get(\"password\");\n        this.serverCharset = obj.getOrDefault(\"charset\", \"ISO-8859-1\");\n        this.ifUsingTemp = Boolean.valueOf(obj.getOrDefault(\"usingTemp\", \"true\"));\n        this.tmpPrefix = obj.getOrDefault(\"tmpPrefix\", \".tmp\");\n\n        try {\n            initFtp();\n        } catch (IOException e) {\n            throw new FileShippingFtpServerException();\n        }\n        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNamePrefix(\"ftp-timer\").build();\n        exe = new ScheduledThreadPoolExecutor(2, namedThreadFactory);\n        exe.scheduleAtFixedRate(this::noOp, 500, 1000, TimeUnit.SECONDS);\n    }\n\n    private void initFtp() throws IOException {\n        ftpClient = new FTPClient();\n        ftpClient.connect(ip, port);\n        ftpClient.login(userName, userPassword);\n        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);\n        ftpClient.setCharset(Charset.forName(serverCharset));\n        ftpClient.enterLocalPassiveMode();\n        ftpClient.setKeepAlive(true);\n    }\n\n    private void noOp() {", "        try {\n            initFtp();\n        } catch (IOException e) {\n            throw new FileShippingFtpServerException();\n        }\n        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNamePrefix(\"ftp-timer\").build();\n        exe = new ScheduledThreadPoolExecutor(2, namedThreadFactory);\n        exe.scheduleAtFixedRate(this::noOp, 500, 1000, TimeUnit.SECONDS);\n    }\n\n    private void initFtp() throws IOException {\n        ftpClient = new FTPClient();\n        ftpClient.connect(ip, port);\n        ftpClient.login(userName, userPassword);\n        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);\n        ftpClient.setCharset(Charset.forName(serverCharset));\n        ftpClient.enterLocalPassiveMode();\n        ftpClient.setKeepAlive(true);\n    }\n\n    private void noOp() {", "        try {\n            ftpClient.sendNoOp();\n        } catch (IOException e) {\n            e.printStackTrace();\n            try {\n                initFtp();\n            } catch (IOException ignored) {\n            }\n        }\n    }\n\n    private synchronized void tryFtp() {", "        if (!ftpClient.isAvailable()) {\n            try {\n                initFtp();\n            } catch (IOException e) {\n                throw new FileShippingFtpServerException();\n            }\n        }\n    }\n\n    @Override\n    public void closeInputStream(InputStream input) throws IOException {\n        AtomicInteger ct = new AtomicInteger(0);", "    public void closeInputStream(InputStream input) throws IOException {\n        AtomicInteger ct = new AtomicInteger(0);\n        while (true) {\n            if (ftpClient.completePendingCommand() || ct.incrementAndGet() > 5) {\n                input.close();\n                break;\n            }\n            ThreadUtil.sleep(1, TimeUnit.SECONDS);\n        }\n    }\n\n\n    @Override", "    public InputStream read(String path) {\n        tryFtp();\n        try {\n            return ftpClient.retrieveFileStream(translate(path));\n        } catch (IOException e) {\n            throw new FileShippingReadException();\n        }\n    }\n\n    @Override\n    public void rename(String src, String dst) throws FileShippingRmException {", "    public void rename(String src, String dst) throws FileShippingRmException {\n        try {\n            ftpClient.rename(translate(src), translate(dst));\n        } catch (IOException e) {\n            throw new FileShippingReadException();\n        }\n    }\n\n    @Override\n    public long fileSize(String path) throws FileShippingReadException {\n        try {", "    public long fileSize(String path) throws FileShippingReadException {\n        try {\n            if (NumberUtil.isNumber(ftpClient.getSize(translate(path)))) {\n                return Long.parseLong(ftpClient.getSize(translate(path)));\n            } else {\n                return fileSize(path);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override", "    public void rm(String path) {\n        tryFtp();\n        try {\n            ftpClient.deleteFile(translate(path));\n        } catch (IOException e) {\n            throw new FileShippingRmException();\n        }\n    }\n\n    @Override\n    public void mkdir(String path) {\n        tryFtp();", "    public void mkdir(String path) {\n        tryFtp();\n        try {\n            ftpClient.makeDirectory(translate(path));\n        } catch (IOException e) {\n            throw new FileShippingMkdirException();\n        }\n    }\n\n    @Override\n    public boolean fileExists(String path) {\n        tryFtp();", "    public boolean fileExists(String path) {\n        tryFtp();\n        try {\n            InputStream is = ftpClient.retrieveFileStream(translate(path));\n            if (is == null || ftpClient.getReplyCode() == FTPReply.FILE_UNAVAILABLE) {\n                return false;\n            }\n            is.close();\n            return true;\n        } catch (IOException e) {\n            throw new FileShippingCheckFileExistsException(e);\n        }\n    }\n\n    @Override", "    public void write(String path, InputStream inputStream) {\n        tryFtp();\n        try {\n            if (ifUsingTemp) {\n                ftpClient.storeFile(translate(path + tmpPrefix), inputStream);\n                ftpClient.rename(translate(path + tmpPrefix), translate(path));\n            } else {\n                ftpClient.storeFile(translate(path), inputStream);\n            }\n        } catch (IOException e) {\n            throw new FileShippingWriteException();\n        }\n    }\n\n    private String translate(String path) {", "        try {\n            if (Objects.equals(path, \"/\")) {\n                return new String((root).getBytes(StandardCharsets.UTF_8), serverCharset);\n            } else {\n                return new String((root + path).getBytes(StandardCharsets.UTF_8), serverCharset);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n            throw new FileShippingListException();\n        }\n    }\n\n    @Override\n    public List<FileMeta> listDir(String path) {\n        tryFtp();\n        FTPFile[] dirs;", "        try {\n            dirs = ftpClient.listFiles(translate(path));\n        } catch (IOException e) {\n            try {\n                initFtp();\n            } catch (IOException ex) {\n                throw new FileShippingFtpServerException();\n            }\n            throw new FileShippingListException();\n        }\n        return Arrays.stream(dirs).map(file -> FileMeta.builder()\n                .isDir(file.isDirectory())\n                .fileSize(file.getSize())\n                .path((\"/\".equals(path) ? path : (path + \"/\")) + new String(file.getName().getBytes(StandardCharsets.ISO_8859_1)).replace(\"\\\\\\\\\", \"/\").replaceAll(translate(\"\"), \"\"))\n                .lastModifyTime(file.getTimestamp().getTimeInMillis())\n                .build()).collect(Collectors.toList());\n    }\n}\n"]}
{"filename": "plugins/local-plugins/src/main/java/com/rebiekong/tec/tools/file/bridge/service/impl/LocalFileServiceImpl.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.service.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.exception.*;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport com.rebiekong.tec.tools.file.bridge.utils.IOUtil;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;", "import java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * LocalFileServiceImpl\n *", " * LocalFileServiceImpl\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class LocalFileServiceImpl implements IFileService {\n    protected String root;\n\n    @Override\n    public String fileServiceFlag() {\n        return \"local\";\n    }\n\n    @Override", "    public String fileServiceFlag() {\n        return \"local\";\n    }\n\n    @Override\n    public void init(Map<String, String> obj) {\n        this.root = new File(obj.get(\"root\")).getAbsolutePath().replaceAll(\"\\\\\\\\\", \"/\");\n    }\n\n    @Override\n    public InputStream read(String path) throws FileShippingReadException {\n        File nf = new File(root + path);", "    public InputStream read(String path) throws FileShippingReadException {\n        File nf = new File(root + path);\n        if (nf.exists()) {\n            try {\n                return new FileInputStream(nf);\n            } catch (FileNotFoundException ignored) {\n            }\n        } else {\n            throw new FileShippingReadException();\n        }\n        throw new FileShippingReadException();\n    }\n\n    @Override", "    public long fileSize(String path) throws FileShippingReadException {\n        File nf = new File(root + path);\n        return nf.length();\n    }\n\n    @Override\n    public void rename(String src, String dst) throws FileShippingRmException {\n        File s = new File(root + src);\n        s.renameTo(new File(root + dst));\n    }\n\n    @Override", "    public void rm(String path) throws FileShippingRmException {\n        File nf = new File(root + path);\n        if (nf.exists()) {\n            if (!nf.isFile()) {\n                throw new FileShippingRmException();\n            }\n            if (!nf.delete()) {\n                throw new FileShippingRmException();\n            }\n\n        }\n    }\n\n    @Override", "    public void mkdir(String path) throws FileShippingMkdirException {\n        File nf = new File(root + path);\n        if (!nf.getParentFile().exists()) {\n            throw new FileShippingMkdirException();\n        }\n        if (nf.exists()) {\n            if (nf.isFile()) {\n                throw new FileShippingMkdirException();\n            }\n        } else {\n            if (!nf.mkdir()) {\n                throw new FileShippingMkdirException();\n            }\n        }\n    }\n\n    @Override", "            if (!nf.mkdir()) {\n                throw new FileShippingMkdirException();\n            }\n        }\n    }\n\n    @Override\n    public void write(String path, InputStream inputStream) throws FileShippingWriteException {\n        File nf = new File(root + path);\n        if (!nf.getParentFile().exists()) {\n            throw new FileShippingWriteException();\n        }", "        if (!nf.getParentFile().exists()) {\n            throw new FileShippingWriteException();\n        }\n        if (nf.exists()) {\n            throw new FileShippingWriteException();\n        }\n        try {\n            nf.createNewFile();\n            IOUtil.streamPipe(inputStream, Files.newOutputStream(nf.toPath()));\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new FileShippingWriteException();\n        }\n    }\n\n    @Override\n    public List<FileMeta> listDir(String path) throws FileShippingListException {\n        File nf = new File(root + path);", "        if (!nf.exists()) {\n            throw new FileShippingListException();\n        }\n        if (!nf.isDirectory()) {\n            throw new FileShippingListException();\n        }\n        File[] fs = nf.listFiles();\n        if (fs != null) {\n\n            return Arrays.stream(fs).map(s -> {\n                        long size = -1L;", "                        if (s.isFile()) {\n                            try {\n                                size = Files.size(Paths.get(s.getAbsolutePath()));\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return FileMeta.builder()\n                                .path(s.getAbsolutePath().replaceAll(\"\\\\\\\\\", \"/\").replace(root, \"\"))\n                                .isDir(s.isDirectory())\n                                .fileSize(size)\n                                .lastModifyTime(s.lastModified())\n                                .build();\n                    })\n                    .collect(Collectors.toList());\n        }\n        return new ArrayList<>();\n    }\n\n    @Override", "    public boolean fileExists(String path) {\n        File nf = new File(root + path);\n        return nf.isFile() && nf.exists();\n    }\n\n    @Override\n    public String toString() {\n        return \"LocalFileService(root=\" + root + \")\";\n    }\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/process/IProcess.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.process;\n\n/**", "\n/**\n * IProcess\n *\n * @author rebie\n * @since 2023/04/24.\n */\npublic interface IProcess {\n\n\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/entity/FileMeta.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.entity;\n\nimport lombok.Builder;", "\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.ToString;\n\nimport java.io.File;\n\n/**\n * FileMeta \u6587\u4ef6meta\u4fe1\u606f\n *", " * FileMeta \u6587\u4ef6meta\u4fe1\u606f\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@Builder\n@ToString\npublic class FileMeta {\n    /**\n     * \u76f8\u5bf9\u8def\u5f84\n     */\n    @Getter\n    private String path;\n    /**\n     * \u662f\u5426\u76ee\u5f55\n     */\n    private Boolean isDir;\n    /**\n     * \u6587\u4ef6\u5927\u5c0f\uff0c\u76ee\u5f55\u9700\u8981\u8bbe\u7f6e\u4e3a-1\n     */\n    @Getter\n    private Long fileSize;\n    /**\n     * \u6700\u540e\u7f16\u8f91\u65f6\u95f4\n     */\n    @Getter\n    private Long lastModifyTime;\n", "    public String getFileName() {\n        return new File(path).getName();\n    }\n\n    public boolean isDir() {\n        return isDir;\n    }\n\n    public boolean isFile() {\n        return !isDir;\n    }\n}\n", "    public boolean isFile() {\n        return !isDir;\n    }\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/IFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.util.Map;\nimport java.util.function.Predicate;\n\n/**\n * IFilter \u6587\u4ef6\u8fc7\u6ee4\u5668\u63a5\u53e3\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/13.\n */\npublic interface IFilter extends Predicate<FileMeta> {\n\n    /**\n     * \u8fd4\u56de\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684flag\n     *\n     * @return flag\n     */\n    default String flag() {\n        return null;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u63a5\u53e3\u670d\u52a1\n     *\n     * @param obj \u53c2\u6570\n     */\n    default void init(Map<String, Object> obj) {\n    }\n\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingWriteException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingWriteException \u6587\u4ef6\u670d\u52a1\u5199\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingWriteException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingServiceException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingServiceException  \u6587\u4ef6\u670d\u52a1\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingServiceException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingRmException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingRmException \u6587\u4ef6\u5220\u9664\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingRmException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingException \u6587\u4ef6\u540c\u6b65\u901a\u7528\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\nabstract public class FileShippingException extends RuntimeException {\n    public FileShippingException() {\n\n    }\n\n    public FileShippingException(Exception e) {\n        super(e);\n    }\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingCheckFileExistsException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingCheckFileExistsException \u6587\u4ef6\u5b58\u5728\u68c0\u6d4b\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingCheckFileExistsException extends FileShippingException {\n    public FileShippingCheckFileExistsException(Exception e) {\n        super(e);\n    }\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingMkdirException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingMkdirException \u6587\u4ef6\u5939\u521b\u5efa\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingMkdirException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingListException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingListException \u6587\u4ef6\u5185\u5bb9\u5217\u8868\u83b7\u53d6\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingListException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/exception/FileShippingReadException.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.exception;\n\n/**", "\n/**\n * FileShippingReadException \u6587\u4ef6\u5185\u5bb9\u8bfb\u53d6\u5f02\u5e38\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileShippingReadException extends FileShippingException {\n}\n"]}
{"filename": "file-bridge-api/src/main/java/com/rebiekong/tec/tools/file/bridge/service/IFileService.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.service;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.exception.*;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**", "\n/**\n * FileService \u6587\u4ef6\u4f20\u8f93\u63a5\u53e3\n * \u5b9a\u4e49\u6587\u4ef6\u5904\u7406\u903b\u8f91\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic interface IFileService {\n\n    /**\n     * \u8fd4\u56de\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684flag\n     *\n     * @return flag\n     */\n    String fileServiceFlag();\n\n    /**\n     * \u521d\u59cb\u5316\u63a5\u53e3\u670d\u52a1\n     *\n     * @param obj \u53c2\u6570\n     */\n    void init(Map<String, String> obj);\n\n    /**\n     * \u81ea\u5b9a\u4e49\u5173\u95ed\u9000\u51fa\u65b9\u6cd5\n     */\n    default void close() {\n    }\n\n    /**\n     * \u6253\u5f00\u6587\u4ef6\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u8fd4\u56de\u6587\u4ef6\u6d41\n     * @throws FileShippingReadException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    InputStream read(String path) throws FileShippingReadException;\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\n     *\n     * @param path \u6587\u4ef6\u8def\u5f84\n     * @return \u6587\u4ef6\u5927\u5c0f\n     * @throws FileShippingReadException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    long fileSize(String path) throws FileShippingReadException;\n\n    /**\n     * \u83b7\u53d6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4fe1\u606f\uff08\u6587\u4ef6/\u76ee\u5f55\uff09\n     * TODO \u9700\u8981\u6ce8\u610f\uff0c\u5f53\u8fd4\u56de\u7684\u5355\u5c42\u4e2d\u6587\u4ef6\u91cf\u8d85\u7ea7\u5927\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5b58\u5728\u95ee\u9898\uff0c\u540e\u7eed\u8fdb\u4e00\u6b65\u4f18\u5316\u6210\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u8fd4\u56de\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u76ee\u5f55\u6587\u4ef6\u4fe1\u606f\n     * @throws FileShippingListException \u5f53\u8def\u5f84\u4e3a\u6587\u4ef6\u6216\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    List<FileMeta> listDir(String path) throws FileShippingListException;\n\n    /**\n     * \u65b0\u5efa\u76ee\u5f55\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @throws FileShippingMkdirException \u5f53\u8def\u5f84\u4e3a\u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    void mkdir(String path) throws FileShippingMkdirException;\n\n    /**\n     * \u5224\u65ad\u76ee\u5f55\u662f\u5426\u5b58\u5728\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u662f\u5426\u5b58\u5728\n     */\n    default boolean dirExists(String path) {\n        return true;\n    }\n\n    /**\n     * \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u662f\u5426\u5b58\u5728\n     */\n    default boolean fileExists(String path) {\n        return true;\n    }\n\n    /**\n     * \u5199\u6587\u4ef6\n     *\n     * @param path        \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @param inputStream \u8f93\u5165\u6d41\n     * @throws FileShippingWriteException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    void write(String path, InputStream inputStream) throws FileShippingWriteException;\n\n    /**\n     * \u5220\u9664\u6587\u4ef6\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @throws FileShippingRmException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u65f6\u629b\u51fa\n     */\n    void rm(String path) throws FileShippingRmException;\n\n    /**\n     * \u91cd\u547d\u540d\u6587\u4ef6\n     *\n     * @param src source\n     * @param dst dst\n     * @throws FileShippingRmException \u91cd\u547d\u540d\u5931\u8d25\u65f6\u629b\u51fa\n     */\n    void rename(String src, String dst) throws FileShippingRmException;\n\n    /**\n     * \u5173\u95ed\u6d41\u65b9\u6cd5\n     * \u5141\u8bb8\u6587\u4ef6\u63a5\u53e3\u81ea\u5b9a\u4e49\u8bfb\u53d6\u6d41\u7684\u5173\u95ed\u903b\u8f91\n     *\n     * @param input \u8bfb\u53d6\u6d41\n     * @throws IOException \u6d41\u5173\u95ed\u5f02\u5e38\u65f6\u629b\u51fa\n     */\n    default void closeInputStream(InputStream input) throws IOException {\n        input.close();\n    }\n}\n", "public interface IFileService {\n\n    /**\n     * \u8fd4\u56de\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684flag\n     *\n     * @return flag\n     */\n    String fileServiceFlag();\n\n    /**\n     * \u521d\u59cb\u5316\u63a5\u53e3\u670d\u52a1\n     *\n     * @param obj \u53c2\u6570\n     */\n    void init(Map<String, String> obj);\n\n    /**\n     * \u81ea\u5b9a\u4e49\u5173\u95ed\u9000\u51fa\u65b9\u6cd5\n     */\n    default void close() {\n    }\n\n    /**\n     * \u6253\u5f00\u6587\u4ef6\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u8fd4\u56de\u6587\u4ef6\u6d41\n     * @throws FileShippingReadException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    InputStream read(String path) throws FileShippingReadException;\n\n    /**\n     * \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\n     *\n     * @param path \u6587\u4ef6\u8def\u5f84\n     * @return \u6587\u4ef6\u5927\u5c0f\n     * @throws FileShippingReadException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    long fileSize(String path) throws FileShippingReadException;\n\n    /**\n     * \u83b7\u53d6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4fe1\u606f\uff08\u6587\u4ef6/\u76ee\u5f55\uff09\n     * TODO \u9700\u8981\u6ce8\u610f\uff0c\u5f53\u8fd4\u56de\u7684\u5355\u5c42\u4e2d\u6587\u4ef6\u91cf\u8d85\u7ea7\u5927\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5b58\u5728\u95ee\u9898\uff0c\u540e\u7eed\u8fdb\u4e00\u6b65\u4f18\u5316\u6210\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u8fd4\u56de\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u76ee\u5f55\u6587\u4ef6\u4fe1\u606f\n     * @throws FileShippingListException \u5f53\u8def\u5f84\u4e3a\u6587\u4ef6\u6216\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    List<FileMeta> listDir(String path) throws FileShippingListException;\n\n    /**\n     * \u65b0\u5efa\u76ee\u5f55\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @throws FileShippingMkdirException \u5f53\u8def\u5f84\u4e3a\u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    void mkdir(String path) throws FileShippingMkdirException;\n\n    /**\n     * \u5224\u65ad\u76ee\u5f55\u662f\u5426\u5b58\u5728\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u662f\u5426\u5b58\u5728\n     */\n    default boolean dirExists(String path) {\n        return true;\n    }\n\n    /**\n     * \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @return \u662f\u5426\u5b58\u5728\n     */\n    default boolean fileExists(String path) {\n        return true;\n    }\n\n    /**\n     * \u5199\u6587\u4ef6\n     *\n     * @param path        \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @param inputStream \u8f93\u5165\u6d41\n     * @throws FileShippingWriteException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\u65f6\u629b\u51fa\n     */\n    void write(String path, InputStream inputStream) throws FileShippingWriteException;\n\n    /**\n     * \u5220\u9664\u6587\u4ef6\n     *\n     * @param path \u5f53\u524d\u6570\u636e\u6e90\u7684\u76f8\u5bf9\u8def\u5f84\n     * @throws FileShippingRmException \u5f53\u8def\u5f84\u4e3a\u76ee\u5f55\u65f6\u629b\u51fa\n     */\n    void rm(String path) throws FileShippingRmException;\n\n    /**\n     * \u91cd\u547d\u540d\u6587\u4ef6\n     *\n     * @param src source\n     * @param dst dst\n     * @throws FileShippingRmException \u91cd\u547d\u540d\u5931\u8d25\u65f6\u629b\u51fa\n     */\n    void rename(String src, String dst) throws FileShippingRmException;\n\n    /**\n     * \u5173\u95ed\u6d41\u65b9\u6cd5\n     * \u5141\u8bb8\u6587\u4ef6\u63a5\u53e3\u81ea\u5b9a\u4e49\u8bfb\u53d6\u6d41\u7684\u5173\u95ed\u903b\u8f91\n     *\n     * @param input \u8bfb\u53d6\u6d41\n     * @throws IOException \u6d41\u5173\u95ed\u5f02\u5e38\u65f6\u629b\u51fa\n     */\n    default void closeInputStream(InputStream input) throws IOException {\n        input.close();\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/FilePipe.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge;\n\nimport com.alibaba.fastjson.JSONArray;", "\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.jobs.IJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.impl.CloneJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.impl.MkdirJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.impl.MoveJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.impl.RetryJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.DualSideParam;", "import com.rebiekong.tec.tools.file.bridge.jobs.impl.RetryJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.DualSideParam;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.SingleSideParam;\nimport com.rebiekong.tec.tools.file.bridge.param.FilePipeParam;\nimport com.rebiekong.tec.tools.file.bridge.param.MirrorParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;", "import java.util.Comparator;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\n/**\n * FilePipe", "/**\n * FilePipe\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FilePipe {\n\n    private static final String ROOT = \"/\";\n    private final MirrorParam mirrorParam;\n    private final List<IFileService> inputs;\n    private final IFileService output;\n    private final Predicate<FileMeta> filePredicate;\n\n    public FilePipe(FilePipeParam param) {\n        this.inputs = param.getInputs();\n        this.output = param.getOutput();\n        this.filePredicate = param.getFilePredicate();\n        this.mirrorParam = param.getMirrorParam();\n    }\n", "    public static FilePipe getPipeLine(JSONObject obj) {\n        JSONArray inputArr = obj.getJSONArray(\"input\");\n        List<IFileService> inputFileServices = new ArrayList<>();\n        if (inputArr != null) {\n            for (int i = 0; i < inputArr.size(); i++) {\n                inputFileServices.add(FileServiceFactory.getService(inputArr.getJSONObject(i)));\n            }\n        }\n        return new FilePipe(FilePipeParam.builder()\n                .inputs(inputFileServices)\n                .output(FileServiceFactory.getService(obj.getJSONObject(\"output\")))\n                .filePredicate(FilterFactory.getFilter(obj.getJSONArray(\"file_filter\")))\n                .mirrorParam(MirrorParam.fromJsonObj(obj.getJSONObject(\"mirror_param\")))\n                .build());\n    }\n", "    public void run() {\n        analyzePath(ROOT).forEach(IJob::run);\n    }\n\n    public void close() {\n        inputs.forEach(IFileService::close);\n        output.close();\n    }\n\n    private List<IJob> analyzePath(String path) {\n        AtomicInteger inputCT = new AtomicInteger(0);\n        Function<List<IJob>, Consumer<IJob>> jobAccepter = jobList -> {\n            AtomicInteger listIndexHolder = new AtomicInteger(0);\n            return job -> job.setJobIndex(listIndexHolder.getAndIncrement());\n        };\n        return inputs.stream().parallel()\n                .flatMap(input -> {\n                    int inputIndex = inputCT.getAndIncrement();\n                    return input.listDir(path).stream().flatMap(fileMeta -> {\n                        List<IJob> jobs = new ArrayList<>();\n                        Consumer<IJob> jobAppender = jobAccepter.apply(jobs);", "                        if (fileMeta.isDir()) {\n                            jobAppender.accept(RetryJob.wrap(MkdirJob.of(SingleSideParam.builder()\n                                    .path(fileMeta.getPath())\n                                    .fileService(output)\n                                    .build())));\n                            analyzePath(fileMeta.getPath()).forEach(jobAppender);\n                        } else if (fileMeta.isFile()) {\n                            if (filePredicate.test(fileMeta)) {\n                                DualSideParam param = DualSideParam.builder()\n                                        .path(fileMeta.getPath())\n                                        .input(input)\n                                        .output(output)\n                                        .build();\n                                IJob job;", "                                if (mirrorParam != null) {\n                                    job = CloneJob.of(param\n                                            .setSubParams(CloneJob.MIRROR_MODE_PARAM, mirrorParam.getMirrorMode().equals(1) ? CloneJob.MIRROR_MODE_APPEND : CloneJob.MIRROR_MODE_FULL)\n                                            .setSubParams(CloneJob.CLONE_FLAG_STORE_PATH_PARAM, mirrorParam.getCloneResultPath())\n                                    );\n                                } else {\n                                    job = MoveJob.of(param);\n                                }\n                                jobAppender.accept(RetryJob.wrap(job));\n                            }\n                        }\n                        return jobs.stream();\n                    }).peek(s -> s.setInputIndex(inputIndex));\n                }).sorted(Comparator.comparing(IJob::sortIndex)).collect(Collectors.toList());\n    }\n\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/FilterFactory.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge;\n\nimport com.alibaba.fastjson.JSONArray;", "\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.rebiekong.tec.tools.file.bridge.filter.IFilter;\nimport org.reflections.Reflections;\n\nimport java.util.*;\n\n/**\n * FilterFactory", "/**\n * FilterFactory\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FilterFactory {\n\n    public static IFilter getFilter(JSONArray object) {\n        List<IFilter> filters = new ArrayList<>();\n        for (int i = 0; i < object.size(); i++) {\n            JSONObject conf = object.getJSONObject(i);\n            IFilter filter = FilterFactory.create(conf);\n            filters.add(filter);\n        }\n        return f -> filters.stream().allMatch(s -> s.test(f));\n    }\n", "    public static IFilter getFilter(JSONArray object) {\n        List<IFilter> filters = new ArrayList<>();\n        for (int i = 0; i < object.size(); i++) {\n            JSONObject conf = object.getJSONObject(i);\n            IFilter filter = FilterFactory.create(conf);\n            filters.add(filter);\n        }\n        return f -> filters.stream().allMatch(s -> s.test(f));\n    }\n\n    public static IFilter create(JSONObject obj) {", "    public static IFilter create(JSONObject obj) {\n        if (obj == null) {\n            return null;\n        }\n        Reflections reflections = new Reflections(IFilter.class.getPackage().getName());\n        Set<Class<? extends IFilter>> fs = reflections.getSubTypesOf(IFilter.class);\n\n        Map<String, Object> params = new HashMap<>();\n        for (String key : obj.keySet()) {\n            Object value = obj.get(key);\n            if (value != null) {\n                params.put(key, value);\n            }\n        }", "        for (String key : obj.keySet()) {\n            Object value = obj.get(key);\n            if (value != null) {\n                params.put(key, value);\n            }\n        }\n        for (Class<? extends IFilter> f : fs) {\n            try {\n                IFilter inst = f.newInstance();\n                if (inst.flag().equals(obj.getString(\"type\"))) {\n                    inst.init(params);\n                    return inst;\n                }\n            } catch (InstantiationException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return null;\n    }\n}\n", "                if (inst.flag().equals(obj.getString(\"type\"))) {\n                    inst.init(params);\n                    return inst;\n                }\n            } catch (InstantiationException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/FileBridge.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge;\n\nimport cn.hutool.core.io.file.FileReader;", "\nimport cn.hutool.core.io.file.FileReader;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\n\npublic class FileBridge {\n\n    public static void main(String... args) {\n        // \u5224\u65ad\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u4f20\u5165\u4e14\u5b58\u5728\n        if (args.length < 1) {\n            System.exit(-1);\n        }\n        String configPath = args[0];", "        if (!(new File(configPath).exists())) {\n            System.exit(-2);\n        }\n        FileReader fileReader = new FileReader(configPath);\n        JSONArray res = JSON.parseArray(fileReader.readString());\n        List<FilePipe> filePipeList = new ArrayList<>();\n        for (int i = 0; i < res.size(); i++) {\n            JSONObject pipeLineInfo = res.getJSONObject(i);\n            filePipeList.add(FilePipe.getPipeLine(pipeLineInfo));\n        }\n        for (FilePipe filePipe : filePipeList) {\n            filePipe.run();\n            filePipe.close();\n        }\n    }\n}\n", "        for (FilePipe filePipe : filePipeList) {\n            filePipe.run();\n            filePipe.close();\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/FileServiceFactory.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge;\n\nimport com.alibaba.fastjson.JSONObject;", "\nimport com.alibaba.fastjson.JSONObject;\nimport com.rebiekong.tec.tools.file.bridge.exception.FileShippingServiceException;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport org.reflections.Reflections;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n", "import java.util.Set;\n\n/**\n * FileServiceFactory\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class FileServiceFactory {\n    public static IFileService getService(JSONObject obj) {\n        IFileService fileService = create(obj);", "public class FileServiceFactory {\n    public static IFileService getService(JSONObject obj) {\n        IFileService fileService = create(obj);\n        if (fileService == null) {\n            throw new FileShippingServiceException();\n        }\n        return fileService;\n    }\n\n    public static IFileService create(JSONObject obj) {\n\n        Reflections reflections = new Reflections(IFileService.class.getPackage().getName());\n        Set<Class<? extends IFileService>> fs = reflections.getSubTypesOf(IFileService.class);\n\n        Map<String, String> params = new HashMap<>();", "    public static IFileService create(JSONObject obj) {\n\n        Reflections reflections = new Reflections(IFileService.class.getPackage().getName());\n        Set<Class<? extends IFileService>> fs = reflections.getSubTypesOf(IFileService.class);\n\n        Map<String, String> params = new HashMap<>();\n        for (String key : obj.keySet()) {\n            Object value = obj.get(key);\n            if (value != null) {\n                params.put(key, String.valueOf(value));\n            }\n        }", "            if (value != null) {\n                params.put(key, String.valueOf(value));\n            }\n        }\n        for (Class<? extends IFileService> f : fs) {\n            try {\n                IFileService inst = f.newInstance();\n                if (inst.fileServiceFlag().equals(obj.getString(\"type\"))) {\n                    inst.init(params);\n                    return inst;\n                }\n            } catch (InstantiationException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/FileSizeFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.util.Map;\n\n/**\n * FileSizeFilter \u6587\u4ef6\u5927\u5c0f\u8fc7\u6ee4\u5668\n *\n * @author rebie\n * @since 2023/04/23.", " * @author rebie\n * @since 2023/04/23.\n */\npublic class FileSizeFilter implements IFilter {\n    long maxSize;\n    long minSize;\n\n    @Override\n    public String flag() {\n        return \"fileSize\";\n    }\n\n    @Override", "    public String flag() {\n        return \"fileSize\";\n    }\n\n    @Override\n    public void init(Map<String, Object> obj) {\n        this.maxSize = Long.parseLong(obj.getOrDefault(\"maxSize\", String.valueOf(Integer.MAX_VALUE)).toString());\n        this.minSize = Long.parseLong(obj.getOrDefault(\"minSize\", \"0\").toString());\n    }\n\n    @Override", "    public boolean test(FileMeta fileMeta) {\n        if (fileMeta.isFile()) {\n            return fileMeta.getFileSize() >= minSize && fileMeta.getFileSize() <= maxSize;\n        } else {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/ModifyTimeFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.util.Map;\n\n/**\n * ModifyTimeFilter \u4fee\u6539\u65f6\u95f4\u8fc7\u6ee4\u5668\n *\n * @author rebie\n * @since 2023/04/13.", " * @author rebie\n * @since 2023/04/13.\n */\npublic class ModifyTimeFilter implements IFilter {\n    long modifyTime;\n\n    @Override\n    public String flag() {\n        return \"modifyTime\";\n    }\n\n    @Override", "    public void init(Map<String, Object> obj) {\n        this.modifyTime = Long.parseLong(obj.getOrDefault(\"modifyWatcher\", \"10\").toString());\n    }\n\n    @Override\n    public boolean test(FileMeta fileMeta) {\n        if (modifyTime >= 0) {\n            return fileMeta.getLastModifyTime() < System.currentTimeMillis() - modifyTime * 1000;\n        }\n        return false;\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/ExtFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.io.File;\nimport java.util.Map;\n\n/**\n * ExtFilter \u540e\u7f00\u8fc7\u6ee4\u5668\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/13.\n */\npublic class ExtFilter implements IFilter {\n    private String ext;\n\n    @Override\n    public String flag() {\n        return \"ext\";\n    }\n\n    @Override", "    public String flag() {\n        return \"ext\";\n    }\n\n    @Override\n    public void init(Map<String, Object> obj) {\n        this.ext = String.valueOf(obj.get(\"ext\"));\n\n    }\n\n    @Override", "    public boolean test(FileMeta s) {\n        return new File(s.getPath()).getName().endsWith(ext);\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/PatternFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.util.Map;\n\n/**\n * PatternFilter \u6b63\u5219\u8fc7\u6ee4\u5668\n *\n * @author rebie\n * @since 2023/05/08.", " * @author rebie\n * @since 2023/05/08.\n */\npublic class PatternFilter implements IFilter {\n    private String pattern;\n\n    @Override\n    public String flag() {\n        return \"pattern\";\n    }\n\n    @Override", "    public void init(Map<String, Object> obj) {\n        this.pattern = String.valueOf(obj.get(\"pattern\"));\n    }\n\n    @Override\n    public boolean test(FileMeta fileMeta) {\n        if (fileMeta.isFile()) {\n            return fileMeta.getFileName().matches(pattern);\n        } else {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/filter/PrefixFilter.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.filter;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\n\nimport java.io.File;\nimport java.util.Map;\n\n/**\n * PrefixFilter \u524d\u7f00\u8fc7\u6ee4\u5668\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/24.\n */\npublic class PrefixFilter implements IFilter {\n    private String prefix;\n\n    @Override\n    public String flag() {\n        return \"prefix\";\n    }\n\n    @Override", "    public String flag() {\n        return \"prefix\";\n    }\n\n    @Override\n    public void init(Map<String, Object> obj) {\n        this.prefix = String.valueOf(obj.get(\"prefix\"));\n\n    }\n\n    @Override", "    public boolean test(FileMeta s) {\n        return new File(s.getPath()).getName().startsWith(prefix);\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/BaseJob.java", "chunked_list": ["package com.rebiekong.tec.tools.file.bridge.jobs;\n\n/**\n * BaseJob\n *\n * @author rebie\n * @since 2023/07/26.\n */\nabstract public class BaseJob implements IJob {\n\n    private Integer jobIndex;\n    private Integer inputIndex;\n\n    @Override", "abstract public class BaseJob implements IJob {\n\n    private Integer jobIndex;\n    private Integer inputIndex;\n\n    @Override\n    public void setJobIndex(Integer jobIndex) {\n        this.jobIndex = jobIndex;\n    }\n\n    @Override", "    public void setInputIndex(Integer inputIndex) {\n        this.inputIndex = inputIndex;\n    }\n\n    @Override\n    public String sortIndex() {\n        return String.format(\"%08d___%08d\", inputIndex, jobIndex);\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/IJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs;\n\n/**", "\n/**\n * IJob \u6587\u4ef6\u540c\u6b65\u4f5c\u4e1a\n * \u6587\u4ef6\u540c\u6b65\u4f5c\u4e1a\u662f\u7a0b\u5e8f\u4e2d\u8fd0\u884c\u7684\u6700\u5c0f\u5355\u5143\n *\n * @author rebie\n * @since 2023/04/13.\n */\npublic interface IJob {\n    /**\n     * \u4efb\u52a1\u8fd0\u884c\n     */\n    void run();\n\n    void setInputIndex(Integer inputIndex);\n\n    void setJobIndex(Integer jobIndex);\n\n\n    String sortIndex();\n}\n", "public interface IJob {\n    /**\n     * \u4efb\u52a1\u8fd0\u884c\n     */\n    void run();\n\n    void setInputIndex(Integer inputIndex);\n\n    void setJobIndex(Integer jobIndex);\n\n\n    String sortIndex();\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/RetryJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;", "\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.IJob;\nimport lombok.ToString;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * RetryJob\n *", " * RetryJob\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\npublic class RetryJob extends BaseJob {\n\n    public static final int NEVER_RETRY = -1;\n    private final IJob job;\n    private final Integer maxFail;\n\n    private RetryJob(IJob job, Integer maxFail) {\n        this.job = job;\n        this.maxFail = maxFail;\n    }\n", "    public static final int NEVER_RETRY = -1;\n    private final IJob job;\n    private final Integer maxFail;\n\n    private RetryJob(IJob job, Integer maxFail) {\n        this.job = job;\n        this.maxFail = maxFail;\n    }\n\n    public static IJob wrap(IJob job) {\n        return wrap(job, 3);\n    }\n", "    public static IJob wrap(IJob job) {\n        return wrap(job, 3);\n    }\n\n    public static IJob wrap(IJob job, Integer maxFail) {\n        return new RetryJob(job, maxFail);\n    }\n\n    public static IJob fastFailWrap(IJob job) {\n        return new RetryJob(job, NEVER_RETRY);\n    }\n\n    @Override", "    public static IJob fastFailWrap(IJob job) {\n        return new RetryJob(job, NEVER_RETRY);\n    }\n\n    @Override\n    public void run() {\n        if (maxFail == NEVER_RETRY) {\n            try {\n                job.run();\n            } catch (Throwable e) {\n                e.printStackTrace();\n            }\n        } else {\n            AtomicInteger failCounter = new AtomicInteger(0);", "            while (failCounter.getAndIncrement() < maxFail) {\n                try {\n                    job.run();\n                    break;\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/DelJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;", "\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.SingleSideParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.ToString;\n\n/**\n * DelJob\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\npublic class DelJob extends BaseJob {\n    private final String path;\n    private final IFileService fileService;\n\n    private DelJob(SingleSideParam param) {\n        this.path = param.getPath();\n        this.fileService = param.getFileService();\n    }\n", "    public static DelJob of(SingleSideParam param) {\n        return new DelJob(param);\n    }\n\n    @Override\n    public void run() {\n        fileService.rm(path);\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/MoveJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;", "\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.IJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.DualSideParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.ToString;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * MoveJob", "/**\n * MoveJob\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\n@Slf4j\npublic class MoveJob extends BaseJob {\n\n    private final IJob copyJob;\n    private final IJob rollBackJob;\n    private final IJob delJob;\n    private final String path;\n    private final IFileService input;\n    private final IFileService output;\n\n    private MoveJob(DualSideParam param) {\n        this.path = param.getPath();\n        this.input = param.getInput();\n        this.output = param.getOutput();\n        this.copyJob = RetryJob.wrap(CopyJob.of(param));\n        this.rollBackJob = RetryJob.wrap(DelJob.of(param.outputSideParam()), RetryJob.NEVER_RETRY);\n        this.delJob = RetryJob.wrap(DelJob.of(param.inputSideParam()), RetryJob.NEVER_RETRY);\n    }\n", "public class MoveJob extends BaseJob {\n\n    private final IJob copyJob;\n    private final IJob rollBackJob;\n    private final IJob delJob;\n    private final String path;\n    private final IFileService input;\n    private final IFileService output;\n\n    private MoveJob(DualSideParam param) {\n        this.path = param.getPath();\n        this.input = param.getInput();\n        this.output = param.getOutput();\n        this.copyJob = RetryJob.wrap(CopyJob.of(param));\n        this.rollBackJob = RetryJob.wrap(DelJob.of(param.outputSideParam()), RetryJob.NEVER_RETRY);\n        this.delJob = RetryJob.wrap(DelJob.of(param.inputSideParam()), RetryJob.NEVER_RETRY);\n    }\n", "    public static MoveJob of(DualSideParam param) {\n        return new MoveJob(param);\n    }\n\n    @Override\n    public void run() {\n        try {\n            copyJob.run();\n            delJob.run();\n        } catch (Throwable t) {\n            log.error(t.getMessage(), t);\n            rollBackJob.run();\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/CloneJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport cn.hutool.core.io.IoUtil;", "\nimport cn.hutool.core.io.IoUtil;\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.DualSideParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.ToString;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;", "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Date;\nimport java.util.function.Predicate;\n\n/**", "\n/**\n * CloneJob\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\npublic class CloneJob extends BaseJob {\n\n    public static final String DEFAULT_CLONE_FINISHED_FLAG = \".cloneFinish\";", "public class CloneJob extends BaseJob {\n\n    public static final String DEFAULT_CLONE_FINISHED_FLAG = \".cloneFinish\";\n    public static final String MIRROR_MODE_PARAM = \"MIRROR_MODE_PARAM\";\n    public static final String MIRROR_MODE_APPEND = \"MIRROR_MODE_APPEND\";\n    public static final String MIRROR_MODE_FULL = \"MIRROR_MODE_APPEND\";\n\n    public static final String CLONE_FLAG_STORE_PATH_PARAM = \"CLONE_FLAG_STORE_PATH_PARAM\";\n\n    private final String path;\n    private final IFileService input;\n    private final IFileService output;\n\n    private final String cloneFinishedFlag;\n    private final String cloneResultStorePath;\n    private final boolean isAppend;\n\n    private CloneJob(DualSideParam param) {\n        this.path = param.getPath();\n        this.input = param.getInput();\n        this.output = param.getOutput();\n        this.cloneFinishedFlag = DEFAULT_CLONE_FINISHED_FLAG;\n        this.isAppend = param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);\n        this.cloneResultStorePath = param.getSubParams(CLONE_FLAG_STORE_PATH_PARAM, null);\n    }\n", "    public static CloneJob of(DualSideParam param) {\n        return new CloneJob(param);\n    }\n\n    @Override\n    public void run() {\n        try {\n            Predicate<String> p = s -> !output.fileExists(path);\n            if (isAppend) {\n                p = p.and(s -> (!checkFlag()));\n            }\n            // \u79fb\u52a8\u6a21\u5f0f\u4e0b\u5f53\u6587\u4ef6\u6587\u4ef6\u5b58\u5728\u4f46\u5927\u5c0f\u4e0d\u540c\u65f6\u8986\u76d6\n            Predicate<String> ff = s -> output.fileExists(path) && (input.fileSize(path) != output.fileSize(path));\n\n            // \u68c0\u67e5\u672c\u5730\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u8fdb\u884c\u590d\u5236\n            input.fileSize(path);", "            if (isAppend) {\n                p = p.and(s -> (!checkFlag()));\n            }\n            // \u79fb\u52a8\u6a21\u5f0f\u4e0b\u5f53\u6587\u4ef6\u6587\u4ef6\u5b58\u5728\u4f46\u5927\u5c0f\u4e0d\u540c\u65f6\u8986\u76d6\n            Predicate<String> ff = s -> output.fileExists(path) && (input.fileSize(path) != output.fileSize(path));\n\n            // \u68c0\u67e5\u672c\u5730\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u8fdb\u884c\u590d\u5236\n            input.fileSize(path);\n            if (ff.test(path) || p.test(path)) {\n                if (output.fileExists(path)) {\n                    output.rm(path);\n                    output.rm(getFlagPath());\n                }\n                InputStream in = input.read(path);\n                output.write(path + \".tmp\", in);\n                output.rename(path + \".tmp\", path);\n                input.closeInputStream(in);", "            if (ff.test(path) || p.test(path)) {\n                if (output.fileExists(path)) {\n                    output.rm(path);\n                    output.rm(getFlagPath());\n                }\n                InputStream in = input.read(path);\n                output.write(path + \".tmp\", in);\n                output.rename(path + \".tmp\", path);\n                input.closeInputStream(in);\n                if (isAppend) {\n                    ByteArrayInputStream flagIn = new ByteArrayInputStream((\"clone finish\" + new Date()).getBytes(StandardCharsets.UTF_8));\n                    writeFlag(getFlagPath(), flagIn);\n                    flagIn.close();\n                }\n            }\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void writeFlag(String path, InputStream data) {", "                if (isAppend) {\n                    ByteArrayInputStream flagIn = new ByteArrayInputStream((\"clone finish\" + new Date()).getBytes(StandardCharsets.UTF_8));\n                    writeFlag(getFlagPath(), flagIn);\n                    flagIn.close();\n                }\n            }\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void writeFlag(String path, InputStream data) {", "        if (cloneResultStorePath == null) {\n            output.write(path, data);\n        } else {\n            byte[] buffer = IoUtil.readBytes(data);\n            try (OutputStream fo = Files.newOutputStream(Paths.get(path))) {\n                fo.write(buffer);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    private boolean checkFlag() {", "        if (cloneResultStorePath == null) {\n            return output.fileExists(getFlagPath());\n        } else {\n            return Files.exists(Paths.get(getFlagPath()));\n        }\n    }\n\n    private String getFlagPath() {\n        if (cloneResultStorePath != null) {\n            return cloneResultStorePath + path + cloneFinishedFlag;\n        }\n        return path + cloneFinishedFlag;\n    }\n}\n", "        if (cloneResultStorePath != null) {\n            return cloneResultStorePath + path + cloneFinishedFlag;\n        }\n        return path + cloneFinishedFlag;\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/MkdirJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;", "\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.SingleSideParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.ToString;\n\n/**\n * MkdirJob\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\npublic class MkdirJob extends BaseJob {\n\n    private final String path;\n    private final IFileService fileService;\n\n    private MkdirJob(SingleSideParam param) {\n        this.path = param.getPath();\n        this.fileService = param.getFileService();\n    }\n", "    public static MkdirJob of(SingleSideParam param) {\n        return new MkdirJob(param);\n    }\n\n    @Override\n    public void run() {\n        fileService.mkdir(path);\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/impl/CopyJob.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.impl;\n\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;", "\nimport com.rebiekong.tec.tools.file.bridge.jobs.BaseJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.IJob;\nimport com.rebiekong.tec.tools.file.bridge.jobs.param.DualSideParam;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.ToString;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n", "import java.io.InputStream;\n\n/**\n * CopyJob\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@ToString\npublic class CopyJob extends BaseJob {\n\n    private final String path;\n    private final IFileService input;\n    private final IFileService output;\n    private final IJob deleteJob;\n\n    private CopyJob(DualSideParam param) {\n        this.path = param.getPath();\n        this.input = param.getInput();\n        this.output = param.getOutput();\n        this.deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));\n    }\n", "@ToString\npublic class CopyJob extends BaseJob {\n\n    private final String path;\n    private final IFileService input;\n    private final IFileService output;\n    private final IJob deleteJob;\n\n    private CopyJob(DualSideParam param) {\n        this.path = param.getPath();\n        this.input = param.getInput();\n        this.output = param.getOutput();\n        this.deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));\n    }\n", "    public static CopyJob of(DualSideParam param) {\n        return new CopyJob(param);\n    }\n\n    @Override\n    public void run() {\n        deleteJob.run();\n        InputStream in = input.read(path);\n        output.write(path, in);\n        try {\n            input.closeInputStream(in);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "        try {\n            input.closeInputStream(in);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/param/DualSideParam.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.param;\n\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;", "\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * DualSideParams", "/**\n * DualSideParams\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@Data\n@Builder\npublic class DualSideParam {\n    private String path;\n    private IFileService input;\n    private IFileService output;\n    @Builder.Default\n    private Map<String, String> subParams = new HashMap<>();\n", "public class DualSideParam {\n    private String path;\n    private IFileService input;\n    private IFileService output;\n    @Builder.Default\n    private Map<String, String> subParams = new HashMap<>();\n\n    public DualSideParam setSubParams(String key, String value) {\n        subParams.put(key, value);\n        return this;\n    }\n", "    public String getSubParams(String key, String defaultValue) {\n        return subParams.getOrDefault(key, defaultValue);\n    }\n\n    public SingleSideParam inputSideParam() {\n        return SingleSideParam.builder()\n                .path(path)\n                .fileService(input)\n                .build();\n    }\n", "    public SingleSideParam outputSideParam() {\n        return SingleSideParam.builder()\n                .path(path)\n                .fileService(output)\n                .build();\n    }\n\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/jobs/param/SingleSideParam.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.jobs.param;\n\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;", "\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.Builder;\nimport lombok.Data;\n\n/**\n * SingleSideParam\n *\n * @author rebie\n * @since 2023/04/13.", " * @author rebie\n * @since 2023/04/13.\n */\n@Data\n@Builder\npublic class SingleSideParam {\n    private String path;\n    private IFileService fileService;\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/param/FilePipeParam.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.param;\n\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;", "\nimport com.rebiekong.tec.tools.file.bridge.entity.FileMeta;\nimport com.rebiekong.tec.tools.file.bridge.service.IFileService;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\n/**", "\n/**\n * FilePipeParam\n *\n * @author rebie\n * @since 2023/04/13.\n */\n@Data\n@Builder\npublic class FilePipeParam {\n    /**\n     * \u6e90\u63d2\u4ef6\n     */\n    private final List<IFileService> inputs;\n    /**\n     * \u76ee\u6807\u63d2\u4ef6\n     */\n    private final IFileService output;\n    /**\n     * \u6587\u4ef6\u8fc7\u6ee4\u5668\n     */\n    private final Predicate<FileMeta> filePredicate;\n    /**\n     * \u955c\u50cf\u6a21\u5f0f\u53c2\u6570 \u4e0d\u8bbe\u7f6e\u5219\u4e3a\u79fb\u52a8\u6a21\u5f0f\n     */\n    private final MirrorParam mirrorParam;\n}\n", "@Builder\npublic class FilePipeParam {\n    /**\n     * \u6e90\u63d2\u4ef6\n     */\n    private final List<IFileService> inputs;\n    /**\n     * \u76ee\u6807\u63d2\u4ef6\n     */\n    private final IFileService output;\n    /**\n     * \u6587\u4ef6\u8fc7\u6ee4\u5668\n     */\n    private final Predicate<FileMeta> filePredicate;\n    /**\n     * \u955c\u50cf\u6a21\u5f0f\u53c2\u6570 \u4e0d\u8bbe\u7f6e\u5219\u4e3a\u79fb\u52a8\u6a21\u5f0f\n     */\n    private final MirrorParam mirrorParam;\n}\n"]}
{"filename": "file-bridge-provider/src/main/java/com/rebiekong/tec/tools/file/bridge/param/MirrorParam.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.param;\n\nimport com.alibaba.fastjson.JSONObject;", "\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.Builder;\nimport lombok.Data;\n\n/**\n * MirrorParam\n *\n * @author rebie\n * @since 2023/04/13.", " * @author rebie\n * @since 2023/04/13.\n */\n@Data\n@Builder\npublic class MirrorParam {\n    /**\n     * \u955c\u50cf\u6a21\u5f0f 1\uff1a\u8ffd\u52a0\u6a21\u5f0f\u30012\uff1a\u5168\u91cf\u6a21\u5f0f\n     */\n    private final Integer mirrorMode;\n    /**\n     * \u955c\u50cf\u6807\u8bb0\u6587\u4ef6\u5730\u5740 \u4e0d\u8bbe\u7f6e\u5219\u4e3a\u8f93\u51fa\u76ee\u5f55\n     */\n    private final String cloneResultPath;\n", "    public static MirrorParam fromJsonObj(JSONObject obj) {\n        if (obj == null) {\n            return null;\n        }\n        return MirrorParam.builder()\n                .mirrorMode(obj.getInteger(\"mirror_mode\"))\n                .cloneResultPath(obj.getString(\"clone_result_path\")).build();\n    }\n}\n"]}
{"filename": "file-bridge-common/src/main/java/com/rebiekong/tec/tools/file/bridge/utils/IOUtil.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.utils;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Arrays;\n\n/**\n * IOUtil\n *\n * @author rebie", " *\n * @author rebie\n * @since 2023/04/14.\n */\npublic class IOUtil {\n\n    public static void streamPipe(InputStream input, OutputStream output) throws IOException {\n        int bufferSize = 4096;\n        byte[] buffer;\n\n        buffer = new byte[bufferSize];\n        int readSize = input.read(buffer);", "        while (readSize > 0) {\n            output.write(Arrays.copyOfRange(buffer, 0, readSize));\n            buffer = new byte[bufferSize];\n            readSize = input.read(buffer);\n        }\n    }\n}\n"]}
{"filename": "file-bridge-common/src/main/java/com/rebiekong/tec/tools/file/bridge/utils/CharUtil.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.utils;\n\n/**", "\n/**\n * CharUtil\n *\n * @author rebie\n * @since 2023/04/14.\n */\npublic class CharUtil {\n    public static boolean isBlankChar(char c) {\n        return isBlankChar((int) c);\n    }\n", "    public static boolean isBlankChar(char c) {\n        return isBlankChar((int) c);\n    }\n\n    public static boolean isBlankChar(int c) {\n        return Character.isWhitespace(c) || Character.isSpaceChar(c) || c == 65279 || c == 8234 || c == 0 || c == 12644 || c == 10240 || c == 6158;\n    }\n}\n"]}
{"filename": "file-bridge-common/src/main/java/com/rebiekong/tec/tools/file/bridge/utils/NumberUtil.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.utils;\n\n/**", "\n/**\n * NumberUtil\n *\n * @author rebie\n * @since 2023/04/14.\n */\npublic class NumberUtil {\n    public static boolean isNumber(CharSequence str) {\n        if (StrUtil.isBlank(str)) {\n            return false;\n        } else {\n            char[] chars = str.toString().toCharArray();\n            int sz = chars.length;\n            boolean hasExp = false;\n            boolean hasDecPoint = false;\n            boolean allowSigns = false;\n            boolean foundDigit = false;\n            int start = chars[0] != '-' && chars[0] != '+' ? 0 : 1;\n            int i;", "    public static boolean isNumber(CharSequence str) {\n        if (StrUtil.isBlank(str)) {\n            return false;\n        } else {\n            char[] chars = str.toString().toCharArray();\n            int sz = chars.length;\n            boolean hasExp = false;\n            boolean hasDecPoint = false;\n            boolean allowSigns = false;\n            boolean foundDigit = false;\n            int start = chars[0] != '-' && chars[0] != '+' ? 0 : 1;\n            int i;", "            if (sz > start + 1 && chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {\n                i = start + 2;\n                if (i == sz) {\n                    return false;\n                } else {\n                    while (i < chars.length) {\n                        if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {\n                            return false;\n                        }\n\n                        ++i;\n                    }\n\n                    return true;\n                }\n            } else {\n                --sz;\n", "                for (i = start; i < sz || i < sz + 1 && allowSigns && !foundDigit; ++i) {\n                    if (chars[i] >= '0' && chars[i] <= '9') {\n                        foundDigit = true;\n                        allowSigns = false;\n                    } else if (chars[i] == '.') {\n                        if (hasDecPoint || hasExp) {\n                            return false;\n                        }\n\n                        hasDecPoint = true;\n                    } else if (chars[i] != 'e' && chars[i] != 'E') {", "                    } else if (chars[i] != 'e' && chars[i] != 'E') {\n                        if (chars[i] != '+' && chars[i] != '-') {\n                            return false;\n                        }\n\n                        if (!allowSigns) {\n                            return false;\n                        }\n\n                        allowSigns = false;\n                        foundDigit = false;\n                    } else {", "                        if (hasExp) {\n                            return false;\n                        }\n\n                        if (!foundDigit) {\n                            return false;\n                        }\n\n                        hasExp = true;\n                        allowSigns = true;\n                    }\n                }\n", "                if (i < chars.length) {\n                    if (chars[i] >= '0' && chars[i] <= '9') {\n                        return true;\n                    } else if (chars[i] != 'e' && chars[i] != 'E') {\n                        if (chars[i] == '.') {\n                            return !hasDecPoint && !hasExp && foundDigit;\n                        } else if (allowSigns || chars[i] != 'd' && chars[i] != 'D' && chars[i] != 'f' && chars[i] != 'F') {\n                            if (chars[i] != 'l' && chars[i] != 'L') {\n                                return false;\n                            } else {\n                                return foundDigit && !hasExp;\n                            }\n                        } else {\n                            return foundDigit;\n                        }\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return !allowSigns && foundDigit;\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "file-bridge-common/src/main/java/com/rebiekong/tec/tools/file/bridge/utils/StrUtil.java", "chunked_list": ["/*\n *   Copyright 2023 rebiekong\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.rebiekong.tec.tools.file.bridge.utils;\n\n/**", "\n/**\n * StrUtil\n *\n * @author rebie\n * @since 2023/04/14.\n */\npublic class StrUtil {\n\n    public static boolean isBlank(CharSequence str) {\n        int length;", "    public static boolean isBlank(CharSequence str) {\n        int length;\n        if (str != null && (length = str.length()) != 0) {\n            for (int i = 0; i < length; ++i) {\n                if (!CharUtil.isBlankChar(str.charAt(i))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n"]}
