{"filename": "admin4j-json-gson/src/test/java/com/admin4j/json/AppTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\n/**\n * Unit test for simple App.\n */\npublic class AppTest \n    extends TestCase\n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */", " */\npublic class AppTest \n    extends TestCase\n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */", "    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }\n\n    /**\n     * Rigourous Test :-)\n     */\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n", "    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n"]}
{"filename": "admin4j-json-gson/src/main/java/com/admin4j/json/GsonJSONMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport lombok.RequiredArgsConstructor;\n", "import lombok.RequiredArgsConstructor;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author andanyang\n * @since 2023/5/25 13:58", " * @author andanyang\n * @since 2023/5/25 13:58\n */\n@RequiredArgsConstructor\npublic class GsonJSONMapper implements JSONMapper {\n\n    private final Gson gson;\n    private final JsonObject json;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override", "    public Object getOriginObject() {\n        return json;\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3aJSON \u5b57\u7b26\u4e32\n     *\n     * @return\n     */\n    @Override\n    public String toJSONString() {\n        return gson.toJson(json);\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     *\n     * @param tClass\n     */\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return gson.fromJson(json, tClass);\n    }\n\n    @Override", "    public String toJSONString() {\n        return gson.toJson(json);\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     *\n     * @param tClass\n     */\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return gson.fromJson(json, tClass);\n    }\n\n    @Override", "    public boolean isArray(String key) {\n        JsonElement jsonElement = json.get(key);\n        return jsonElement instanceof JsonArray;\n    }\n\n    @Override\n    public boolean isObject(String key) {\n        JsonElement jsonElement = json.get(key);\n        return jsonElement instanceof JsonObject;\n    }\n\n    @Override", "    public Boolean getBoolean(String key) {\n        return json.has(key) ? json.get(key).getAsBoolean() : null;\n    }\n\n    @Override\n    public boolean getBooleanValue(String key) {\n        return json.get(key).getAsBoolean();\n    }\n\n    @Override\n    public Integer getInteger(String key) {\n        return json.has(key) ? json.get(key).getAsInt() : null;\n    }\n\n    @Override", "    public Integer getInteger(String key) {\n        return json.has(key) ? json.get(key).getAsInt() : null;\n    }\n\n    @Override\n    public int getIntValue(String key) {\n        return json.get(key).getAsInt();\n    }\n\n    @Override\n    public Long getLong(String key) {\n        return json.has(key) ? json.get(key).getAsLong() : null;\n    }\n\n    @Override", "    public Long getLong(String key) {\n        return json.has(key) ? json.get(key).getAsLong() : null;\n    }\n\n    @Override\n    public long getLongValue(String key) {\n        return json.get(key).getAsLong();\n    }\n\n    @Override\n    public Float getFloat(String key) {\n        return json.has(key) ? json.get(key).getAsFloat() : null;\n    }\n\n    @Override", "    public Float getFloat(String key) {\n        return json.has(key) ? json.get(key).getAsFloat() : null;\n    }\n\n    @Override\n    public float getFloatValue(String key) {\n        return json.get(key).getAsFloat();\n    }\n\n    @Override\n    public Double getDouble(String key) {\n        return json.has(key) ? json.get(key).getAsDouble() : null;\n    }\n\n    @Override", "    public Double getDouble(String key) {\n        return json.has(key) ? json.get(key).getAsDouble() : null;\n    }\n\n    @Override\n    public double getDoubleValue(String key) {\n        return json.get(key).getAsDouble();\n    }\n\n    @Override\n    public String getString(String key) {\n        return json.get(key).getAsString();\n    }\n\n    @Override", "    public String getString(String key) {\n        return json.get(key).getAsString();\n    }\n\n    @Override\n    public BigDecimal getBigDecimal(String key) {\n        return json.get(key).getAsBigDecimal();\n    }\n\n    @Override\n    public boolean containsKey(String key) {\n        return json.has(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return json.keySet();\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684\u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684\u5bf9\u8c61\uff08JSONMapper\uff09\u503c\n     *\n     * @param key\n     */\n    @Override", "    public boolean containsKey(String key) {\n        return json.has(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return json.keySet();\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684\u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684\u5bf9\u8c61\uff08JSONMapper\uff09\u503c\n     *\n     * @param key\n     */\n    @Override", "    public JSONMapper getJSONMapper(String key) {\n\n        return json.has(key) ? new GsonJSONMapper(gson, (JsonObject) json.get(key)) : null;\n    }\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    @Override\n    public JSONArrayMapper getJSONArrayMapper(String key) {\n        return json.has(key) ? new GsonArrayMapper(gson, json.getAsJsonArray(key)) : null;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684Object\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n        return json.has(key) ? gson.fromJson(json.get(key), tClass) : null;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JsonArray asJsonArray = json.getAsJsonArray(key);\n        List<T> result = new ArrayList<>(asJsonArray.size());", "    public JSONArrayMapper getJSONArrayMapper(String key) {\n        return json.has(key) ? new GsonArrayMapper(gson, json.getAsJsonArray(key)) : null;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684Object\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n        return json.has(key) ? gson.fromJson(json.get(key), tClass) : null;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JsonArray asJsonArray = json.getAsJsonArray(key);\n        List<T> result = new ArrayList<>(asJsonArray.size());", "        for (JsonElement jsonElement : asJsonArray) {\n            result.add(gson.fromJson(jsonElement, tClass));\n        }\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     */\n    @Override\n    public List<JSONMapper> getMappers(String key) {\n        JsonArray asJsonArray = json.getAsJsonArray(key);\n        List<JSONMapper> result = new ArrayList<>(asJsonArray.size());", "        for (JsonElement jsonElement : asJsonArray) {\n            result.add(new GsonJSONMapper(gson, (JsonObject) jsonElement));\n        }\n        return result;\n    }\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    @Override", "    public int size() {\n        return json.size();\n    }\n\n    @Override\n    public String toString() {\n\n        return json.toString();\n    }\n}\n"]}
{"filename": "admin4j-json-gson/src/main/java/com/admin4j/json/GsonArrayMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport com.google.gson.reflect.TypeToken;\nimport lombok.RequiredArgsConstructor;\n", "import lombok.RequiredArgsConstructor;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * @author andanyang\n * @since 2023/5/25 15:46\n */\n@RequiredArgsConstructor\npublic class GsonArrayMapper implements JSONArrayMapper {\n    private final Gson gson;\n    private final JsonArray json;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override", " */\n@RequiredArgsConstructor\npublic class GsonArrayMapper implements JSONArrayMapper {\n    private final Gson gson;\n    private final JsonArray json;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override\n    public Object getOriginObject() {\n        return json;\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    @Override", "    public Object getOriginObject() {\n        return json;\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    @Override\n    public JSONMapper getMapper(int index) {\n        JsonObject json1 = (JsonObject) json.get(index);\n        return json1 == null ? null : new GsonJSONMapper(gson, json1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override", "    public JSONMapper getMapper(int index) {\n        JsonObject json1 = (JsonObject) json.get(index);\n        return json1 == null ? null : new GsonJSONMapper(gson, json1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override\n    public JSONArrayMapper getArray(int index) {\n        JsonArray json1 = (JsonArray) json.get(index);\n        return json1 == null ? null : new GsonArrayMapper(gson, json1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public JSONArrayMapper getArray(int index) {\n        JsonArray json1 = (JsonArray) json.get(index);\n        return json1 == null ? null : new GsonArrayMapper(gson, json1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public boolean getBooleanValue(int index) {\n\n        return json.get(index).getAsBoolean();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public boolean getBooleanValue(int index) {\n\n        return json.get(index).getAsBoolean();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public Boolean getBoolean(int index) {\n\n        return size() <= index ? null : json.get(index).getAsBoolean();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public Boolean getBoolean(int index) {\n\n        return size() <= index ? null : json.get(index).getAsBoolean();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public int getIntValue(int index) {\n        return json.get(index).getAsInt();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public int getIntValue(int index) {\n        return json.get(index).getAsInt();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public Integer getInteger(int index) {\n        return size() <= index ? null : json.get(index).getAsInt();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public Integer getInteger(int index) {\n        return size() <= index ? null : json.get(index).getAsInt();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public long getLongValue(int index) {\n        return json.get(index).getAsLong();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public long getLongValue(int index) {\n        return json.get(index).getAsLong();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public Long getLong(int index) {\n        return size() <= index ? null : json.get(index).getAsLong();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public Long getLong(int index) {\n        return size() <= index ? null : json.get(index).getAsLong();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public float getFloatValue(int index) {\n        return json.get(index).getAsFloat();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public float getFloatValue(int index) {\n        return json.get(index).getAsFloat();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public Float getFloat(int index) {\n        return size() <= index ? null : json.get(index).getAsFloat();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public Float getFloat(int index) {\n        return size() <= index ? null : json.get(index).getAsFloat();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public double getDoubleValue(int index) {\n        return json.get(index).getAsDouble();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public double getDoubleValue(int index) {\n        return json.get(index).getAsDouble();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public Double getDouble(int index) {\n        return size() <= index ? null : json.get(index).getAsDouble();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override", "    public Double getDouble(int index) {\n        return size() <= index ? null : json.get(index).getAsDouble();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override\n    public String getString(int index) {\n        return json.get(index).getAsString();\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        T[] beans = gson.fromJson(json, TypeToken.getArray(tClass).getType());\n        return Arrays.asList(beans);\n    }\n\n\n    @Override", "    public String getString(int index) {\n        return json.get(index).getAsString();\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        T[] beans = gson.fromJson(json, TypeToken.getArray(tClass).getType());\n        return Arrays.asList(beans);\n    }\n\n\n    @Override", "    public int size() {\n        return json.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return json.isEmpty();\n    }\n}\n"]}
{"filename": "admin4j-json-gson/src/main/java/com/admin4j/json/GsonConvertor.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.reflect.TypeToken;\nimport lombok.Data;", "import com.google.gson.reflect.TypeToken;\nimport lombok.Data;\n\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Type;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author andanyang\n * @since 2023/5/5 14:22\n */\n@Data\npublic class GsonConvertor implements JSONConvertor {\n\n    private Gson gson = new Gson();\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n\n        InputStreamReader inputStreamReader = new InputStreamReader(is, charset);\n        return gson.fromJson(inputStreamReader, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n\n        String s = new String(bytes, charset);\n        return parseObject(s, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(String input, Class<T> clazz) {\n        return gson.fromJson(input, clazz);\n    }\n\n    /**\n     * JSON \u8f6c Map\n     */\n    @Override\n    public Map<String, Object> parseMap(String input) {\n        Type type = new TypeToken<Map<String, Object>>() {\n        }.getType();\n        return gson.fromJson(input, type);\n    }\n\n    @Override\n    public Map<String, Object> parseMap(InputStream is) {\n        Type type = new TypeToken<Map<String, Object>>() {\n        }.getType();\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        return gson.fromJson(inputStreamReader, type);\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> clazz) {\n        TypeToken<?> parameterized = TypeToken.getParameterized(List.class, clazz);\n        return gson.fromJson(input, parameterized.getType());\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {\n\n        TypeToken<?> parameterized = TypeToken.getParameterized(List.class, clazz);\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        return gson.fromJson(inputStreamReader, parameterized.getType());\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     */\n    @Override", "@Data\npublic class GsonConvertor implements JSONConvertor {\n\n    private Gson gson = new Gson();\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n\n        InputStreamReader inputStreamReader = new InputStreamReader(is, charset);\n        return gson.fromJson(inputStreamReader, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n\n        String s = new String(bytes, charset);\n        return parseObject(s, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    @Override\n    public <T> T parseObject(String input, Class<T> clazz) {\n        return gson.fromJson(input, clazz);\n    }\n\n    /**\n     * JSON \u8f6c Map\n     */\n    @Override\n    public Map<String, Object> parseMap(String input) {\n        Type type = new TypeToken<Map<String, Object>>() {\n        }.getType();\n        return gson.fromJson(input, type);\n    }\n\n    @Override\n    public Map<String, Object> parseMap(InputStream is) {\n        Type type = new TypeToken<Map<String, Object>>() {\n        }.getType();\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        return gson.fromJson(inputStreamReader, type);\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> clazz) {\n        TypeToken<?> parameterized = TypeToken.getParameterized(List.class, clazz);\n        return gson.fromJson(input, parameterized.getType());\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {\n\n        TypeToken<?> parameterized = TypeToken.getParameterized(List.class, clazz);\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        return gson.fromJson(inputStreamReader, parameterized.getType());\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     */\n    @Override", "    public String toJSONString(Object object) {\n\n        return gson.toJson(object);\n    }\n\n    @Override\n    public byte[] serialize(Object object) {\n        return toJSONString(object).getBytes();\n    }\n\n\n    @Override", "    public JSONMapper parseMapper(InputStream is) {\n        JsonObject json = this.gson.fromJson(new InputStreamReader(is, StandardCharsets.UTF_8), JsonObject.class);\n        return json == null ? null : new GsonJSONMapper(this.gson, json);\n    }\n\n    @Override\n    public JSONMapper parseMapper(String input) {\n        JsonObject json = this.gson.fromJson(input, JsonObject.class);\n        return json == null ? null : new GsonJSONMapper(this.gson, json);\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(String input) {\n\n        JsonArray list = gson.fromJson(input, JsonArray.class);\n        List<JSONMapper> jsonMappers = new ArrayList<>(list.size());", "        while (list.iterator().hasNext()) {\n            JsonElement next = list.iterator().next();\n            jsonMappers.add(new GsonJSONMapper(gson, (JsonObject) next));\n        }\n\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        JsonArray list = gson.fromJson(inputStreamReader, JsonArray.class);\n        List<JSONMapper> jsonMappers = new ArrayList<>(list.size());", "        while (list.iterator().hasNext()) {\n            JsonElement next = list.iterator().next();\n            jsonMappers.add(new GsonJSONMapper(gson, (JsonObject) next));\n        }\n\n        return jsonMappers;\n    }\n\n\n    @Override\n    public JSONArrayMapper parseArrayMapper(String input) {\n        JsonArray list = gson.fromJson(input, JsonArray.class);\n        return list == null ? null : new GsonArrayMapper(gson, list);\n    }\n\n    @Override", "    public JSONArrayMapper parseArrayMapper(String input) {\n        JsonArray list = gson.fromJson(input, JsonArray.class);\n        return list == null ? null : new GsonArrayMapper(gson, list);\n    }\n\n    @Override\n    public JSONArrayMapper parseArrayMapper(InputStream is) {\n        InputStreamReader inputStreamReader = new InputStreamReader(is);\n        JsonArray list = gson.fromJson(inputStreamReader, JsonArray.class);\n\n        return list == null ? null : new GsonArrayMapper(gson, list);\n    }\n}\n"]}
{"filename": "admin4j-json-fastjson/src/main/java/com/admin4j/json/FastjsonConvertor.java", "chunked_list": ["package com.admin4j.json;\n\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.BufferedReader;", "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @author andanyang\n * @since 2023/5/5 13:31\n */\npublic class FastjsonConvertor implements JSONConvertor {\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param is\n     * @param clazz\n     * @param charset\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n", "public class FastjsonConvertor implements JSONConvertor {\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param is\n     * @param clazz\n     * @param charset\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n", "        try {\n            return JSON.parseObject(is, charset, clazz);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param bytes\n     * @param clazz\n     * @param charset\n     */\n    @Override\n    public <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n\n        return JSON.parseObject(bytes, clazz);\n\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param input\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(String input, Class<T> clazz) {\n        return JSON.parseObject(input, clazz);\n    }\n\n\n    /**\n     * JSON \u8f6c Map\n     */\n    @Override\n    public Map<String, Object> parseMap(String input) {\n        return JSON.parseObject(input);\n    }\n\n    @Override\n    public Map<String, Object> parseMap(InputStream is) {", "        try {\n            return JSON.parseObject(is, StandardCharsets.UTF_8, Map.class);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> clazz) {\n        return JSON.parseArray(input, clazz);\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {\n\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return JSON.parseArray(str, clazz);\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    @Override", "    public String toJSONString(Object object) {\n        return JSON.toJSONString(object);\n    }\n\n    @Override\n    public byte[] serialize(Object object) {\n        return JSON.toJSONBytes(object);\n    }\n\n\n    @Override", "    public JSONMapper parseMapper(InputStream is) {\n        try {\n            JSONObject jsonObject = JSON.parseObject(is, StandardCharsets.UTF_8, JSONObject.class);\n            return jsonObject == null ? null : new FastjsonJSONMapper(jsonObject);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public JSONMapper parseMapper(String input) {\n        JSONObject jsonObject = JSON.parseObject(input);\n        return jsonObject == null ? null : new FastjsonJSONMapper(jsonObject);\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(String input) {\n        JSONArray objects = JSON.parseArray(input);\n        List<JSONMapper> jsonMappers = new ArrayList<>(objects.size());", "    public JSONMapper parseMapper(String input) {\n        JSONObject jsonObject = JSON.parseObject(input);\n        return jsonObject == null ? null : new FastjsonJSONMapper(jsonObject);\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(String input) {\n        JSONArray objects = JSON.parseArray(input);\n        List<JSONMapper> jsonMappers = new ArrayList<>(objects.size());\n        for (Object o : objects) {\n            jsonMappers.add(new FastjsonJSONMapper((JSONObject) o));\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return parseJSONMappers(str);\n    }\n\n    @Override", "        for (Object o : objects) {\n            jsonMappers.add(new FastjsonJSONMapper((JSONObject) o));\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return parseJSONMappers(str);\n    }\n\n    @Override", "    public JSONArrayMapper parseArrayMapper(String input) {\n        JSONArray objects = JSON.parseArray(input);\n        return objects == null ? null : new FastJSONArrayMapper(objects);\n    }\n\n    @Override\n    public JSONArrayMapper parseArrayMapper(InputStream is) {\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return parseArrayMapper(str);\n    }\n}\n"]}
{"filename": "admin4j-json-fastjson/src/main/java/com/admin4j/json/FastJSONArrayMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * @author andanyang\n * @since 2023/5/25 15:30\n */\n@RequiredArgsConstructor\npublic class FastJSONArrayMapper implements JSONArrayMapper {\n\n\n    private final JSONArray jsonArray;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override", "    public Object getOriginObject() {\n        return jsonArray;\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    @Override\n    public JSONMapper getMapper(int index) {\n        JSONObject jsonObject = jsonArray.getJSONObject(index);\n        return jsonObject == null ? null : new FastjsonJSONMapper(jsonObject);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override", "    public JSONMapper getMapper(int index) {\n        JSONObject jsonObject = jsonArray.getJSONObject(index);\n        return jsonObject == null ? null : new FastjsonJSONMapper(jsonObject);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override\n    public JSONArrayMapper getArray(int index) {\n\n        JSONArray jsonArray1 = jsonArray.getJSONArray(index);\n        return jsonArray1 == null ? null : new FastJSONArrayMapper(jsonArray1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public JSONArrayMapper getArray(int index) {\n\n        JSONArray jsonArray1 = jsonArray.getJSONArray(index);\n        return jsonArray1 == null ? null : new FastJSONArrayMapper(jsonArray1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public boolean getBooleanValue(int index) {\n        return jsonArray.getBooleanValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public Boolean getBoolean(int index) {\n        return jsonArray.getBoolean(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public Boolean getBoolean(int index) {\n        return jsonArray.getBoolean(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public int getIntValue(int index) {\n        return jsonArray.getIntValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public int getIntValue(int index) {\n        return jsonArray.getIntValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public Integer getInteger(int index) {\n        return jsonArray.getInteger(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public Integer getInteger(int index) {\n        return jsonArray.getInteger(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public long getLongValue(int index) {\n        return jsonArray.getLongValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public long getLongValue(int index) {\n        return jsonArray.getLongValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public Long getLong(int index) {\n        return jsonArray.getLong(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public Long getLong(int index) {\n        return jsonArray.getLong(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public float getFloatValue(int index) {\n        return jsonArray.getFloatValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public float getFloatValue(int index) {\n        return jsonArray.getFloatValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public Float getFloat(int index) {\n        return jsonArray.getFloat(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public Float getFloat(int index) {\n        return jsonArray.getFloat(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public double getDoubleValue(int index) {\n        return jsonArray.getDoubleValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public double getDoubleValue(int index) {\n        return jsonArray.getDoubleValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public Double getDouble(int index) {\n        return jsonArray.getDouble(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override", "    public Double getDouble(int index) {\n        return jsonArray.getDouble(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override\n    public String getString(int index) {\n        return jsonArray.getString(index);\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        return jsonArray.toJavaList(tClass);\n    }\n\n\n    @Override", "    public String getString(int index) {\n        return jsonArray.getString(index);\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        return jsonArray.toJavaList(tClass);\n    }\n\n\n    @Override", "    public int size() {\n        return jsonArray.size();\n    }\n\n\n    @Override\n    public boolean isEmpty() {\n        return jsonArray.isEmpty();\n    }\n}\n"]}
{"filename": "admin4j-json-fastjson/src/main/java/com/admin4j/json/FastjsonJSONMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.RequiredArgsConstructor;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;", "import java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author andanyang\n * @since 2023/5/25 12:39\n */\n@RequiredArgsConstructor\npublic class FastjsonJSONMapper implements JSONMapper {\n\n    private final JSONObject jsonObject;\n\n    @Override", " */\n@RequiredArgsConstructor\npublic class FastjsonJSONMapper implements JSONMapper {\n\n    private final JSONObject jsonObject;\n\n    @Override\n    public Object getOriginObject() {\n        return jsonObject;\n    }\n\n    @Override", "    public boolean isArray(String key) {\n        return jsonObject.get(key) instanceof JSONArray;\n    }\n\n    @Override\n    public boolean isObject(String key) {\n        return jsonObject.get(key) instanceof JSONObject;\n    }\n\n    @Override\n    public JSONMapper getJSONMapper(String key) {\n        JSONObject jsonObject1 = jsonObject.getJSONObject(key);\n        return jsonObject1 == null ? null : new FastjsonJSONMapper(jsonObject1);\n    }\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    @Override", "    public JSONMapper getJSONMapper(String key) {\n        JSONObject jsonObject1 = jsonObject.getJSONObject(key);\n        return jsonObject1 == null ? null : new FastjsonJSONMapper(jsonObject1);\n    }\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    @Override\n    public JSONArrayMapper getJSONArrayMapper(String key) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        return jsonArray == null ? null : new FastJSONArrayMapper(jsonArray);\n    }\n\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n        return jsonObject.getObject(key, tClass);\n    }\n\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        List<T> jsonMappers = new ArrayList<>(jsonArray.size());", "    public JSONArrayMapper getJSONArrayMapper(String key) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        return jsonArray == null ? null : new FastJSONArrayMapper(jsonArray);\n    }\n\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n        return jsonObject.getObject(key, tClass);\n    }\n\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        List<T> jsonMappers = new ArrayList<>(jsonArray.size());", "        for (Object jsonObject : jsonArray) {\n            if (jsonObject instanceof JSONObject) {\n                jsonMappers.add(((JSONObject) jsonObject).toJavaObject(tClass));\n            } else {\n                jsonMappers.add((T) jsonObject);\n            }\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> getMappers(String key) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        List<JSONMapper> jsonMappers = new ArrayList<>(jsonArray.size());", "        for (Object jsonObject : jsonArray) {\n            jsonMappers.add(new FastjsonJSONMapper((JSONObject) jsonObject));\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public Boolean getBoolean(String key) {\n        return jsonObject.getBoolean(key);\n    }\n\n    @Override", "    public boolean getBooleanValue(String key) {\n        return jsonObject.getBooleanValue(key);\n    }\n\n    @Override\n    public Integer getInteger(String key) {\n        return jsonObject.getInteger(key);\n    }\n\n    public int getIntValue(String key) {\n        return jsonObject.getIntValue(key);\n    }\n\n    @Override", "    public int getIntValue(String key) {\n        return jsonObject.getIntValue(key);\n    }\n\n    @Override\n    public Long getLong(String key) {\n        return jsonObject.getLong(key);\n    }\n\n    @Override\n    public long getLongValue(String key) {\n        return jsonObject.getLongValue(key);\n    }\n\n    @Override", "    public long getLongValue(String key) {\n        return jsonObject.getLongValue(key);\n    }\n\n    @Override\n    public Float getFloat(String key) {\n        return jsonObject.getFloat(key);\n    }\n\n    @Override\n    public float getFloatValue(String key) {\n        return jsonObject.getFloatValue(key);\n    }\n\n    @Override", "    public float getFloatValue(String key) {\n        return jsonObject.getFloatValue(key);\n    }\n\n    @Override\n    public Double getDouble(String key) {\n        return jsonObject.getDouble(key);\n    }\n\n    @Override\n    public double getDoubleValue(String key) {\n        return jsonObject.getDoubleValue(key);\n    }\n\n    @Override", "    public double getDoubleValue(String key) {\n        return jsonObject.getDoubleValue(key);\n    }\n\n    @Override\n    public String getString(String key) {\n        return jsonObject.getString(key);\n    }\n\n    @Override\n    public BigDecimal getBigDecimal(String key) {\n        return jsonObject.getBigDecimal(key);\n    }\n\n    @Override", "    public BigDecimal getBigDecimal(String key) {\n        return jsonObject.getBigDecimal(key);\n    }\n\n    @Override\n    public boolean containsKey(String key) {\n        return jsonObject.containsKey(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return jsonObject.keySet();\n    }\n\n    @Override", "    public String toJSONString() {\n        return jsonObject.toJSONString();\n    }\n\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return jsonObject.toJavaObject(tClass);\n    }\n\n    @Override\n    public String toString() {\n\n        return jsonObject.toString();\n    }\n\n    @Override", "    public String toString() {\n\n        return jsonObject.toString();\n    }\n\n    @Override\n    public int size() {\n\n        return jsonObject.size();\n    }\n}\n"]}
{"filename": "admin4j-json-jackson/src/test/java/com/admin4j/json/AppTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\n/**\n * Unit test for simple App.\n */\npublic class AppTest \n    extends TestCase\n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */", " */\npublic class AppTest \n    extends TestCase\n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */", "    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }\n\n    /**\n     * Rigourous Test :-)\n     */\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n", "    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n"]}
{"filename": "admin4j-json-jackson/src/main/java/com/admin4j/json/JacksonArrayMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.type.CollectionType;\nimport lombok.RequiredArgsConstructor;", "import com.fasterxml.jackson.databind.type.CollectionType;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author andanyang\n * @since 2023/5/25 16:00\n */", " * @since 2023/5/25 16:00\n */\n@RequiredArgsConstructor\npublic class JacksonArrayMapper implements JSONArrayMapper {\n\n    private final ObjectMapper mapper;\n    private final ArrayNode arrayNode;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override", "    public Object getOriginObject() {\n        return arrayNode;\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    @Override\n    public JSONMapper getMapper(int index) {\n        JsonNode jsonNode = arrayNode.get(index);\n        return jsonNode == null ? null : new JacksonJSONMapper(mapper, jsonNode);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override", "    public JSONMapper getMapper(int index) {\n        JsonNode jsonNode = arrayNode.get(index);\n        return jsonNode == null ? null : new JacksonJSONMapper(mapper, jsonNode);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override\n    public JSONArrayMapper getArray(int index) {\n        ArrayNode arrayNode1 = (ArrayNode) arrayNode.get(index);\n        return arrayNode1 == null ? null : new JacksonArrayMapper(mapper, arrayNode1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public JSONArrayMapper getArray(int index) {\n        ArrayNode arrayNode1 = (ArrayNode) arrayNode.get(index);\n        return arrayNode1 == null ? null : new JacksonArrayMapper(mapper, arrayNode1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public boolean getBooleanValue(int index) {\n\n        return arrayNode.get(index).booleanValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public boolean getBooleanValue(int index) {\n\n        return arrayNode.get(index).booleanValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public Boolean getBoolean(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.booleanValue();\n    }\n\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public Boolean getBoolean(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.booleanValue();\n    }\n\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public int getIntValue(int index) {\n        return arrayNode.get(index).intValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public Integer getInteger(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.intValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public Integer getInteger(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.intValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public Long getLong(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.longValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public Long getLong(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.longValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public long getLongValue(int index) {\n        return arrayNode.get(index).longValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public long getLongValue(int index) {\n        return arrayNode.get(index).longValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public float getFloatValue(int index) {\n        return arrayNode.get(index).floatValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public float getFloatValue(int index) {\n        return arrayNode.get(index).floatValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public Float getFloat(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.floatValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public Float getFloat(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.floatValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public double getDoubleValue(int index) {\n        return arrayNode.get(index).doubleValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public double getDoubleValue(int index) {\n        return arrayNode.get(index).doubleValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public Double getDouble(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.doubleValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override", "    public Double getDouble(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.doubleValue();\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override\n    public String getString(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.textValue();\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        CollectionType collectionType = this.mapper.getTypeFactory().constructCollectionType(ArrayList.class, tClass);", "    public String getString(int index) {\n        JsonNode node = arrayNode.get(index);\n        return node == null ? null : node.textValue();\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        CollectionType collectionType = this.mapper.getTypeFactory().constructCollectionType(ArrayList.class, tClass);", "        try {\n            return this.mapper.treeToValue(arrayNode, collectionType);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    @Override\n    public int size() {\n        return arrayNode.size();\n    }\n\n    @Override", "    public int size() {\n        return arrayNode.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return arrayNode.isEmpty();\n    }\n}\n"]}
{"filename": "admin4j-json-jackson/src/main/java/com/admin4j/json/JacksonJSONMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport lombok.RequiredArgsConstructor;\n\nimport java.math.BigDecimal;", "\nimport java.math.BigDecimal;\nimport java.util.*;\n\n/**\n * @author andanyang\n * @since 2023/5/25 13:23\n */\n@RequiredArgsConstructor\npublic class JacksonJSONMapper implements JSONMapper {\n\n    private final ObjectMapper mapper;\n    private final JsonNode jsonNode;\n\n\n    /**\n     * \u662f\u5426\u4e3a\u6570\u7ec4\n     *\n     * @param key\n     */\n    @Override", "@RequiredArgsConstructor\npublic class JacksonJSONMapper implements JSONMapper {\n\n    private final ObjectMapper mapper;\n    private final JsonNode jsonNode;\n\n\n    /**\n     * \u662f\u5426\u4e3a\u6570\u7ec4\n     *\n     * @param key\n     */\n    @Override", "    public boolean isArray(String key) {\n        JsonNode node = jsonNode.get(key);\n        return node != null && node.isArray();\n    }\n\n    /**\n     * \u662f\u5426\u662f\u5bf9\u8c61\n     *\n     * @param key\n     */\n    @Override", "    public boolean isObject(String key) {\n        JsonNode node = jsonNode.get(key);\n        return node != null && node.isObject();\n    }\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override\n    public Object getOriginObject() {\n        return jsonNode;\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3aJSON \u5b57\u7b26\u4e32\n     *\n     * @return\n     */\n    @Override", "    public Object getOriginObject() {\n        return jsonNode;\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3aJSON \u5b57\u7b26\u4e32\n     *\n     * @return\n     */\n    @Override\n    public String toJSONString() {\n        return jsonNode.toString();\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     *\n     * @param tClass\n     */\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return mapper.convertValue(jsonNode, tClass);\n    }\n\n    @Override", "    public String toJSONString() {\n        return jsonNode.toString();\n    }\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     *\n     * @param tClass\n     */\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return mapper.convertValue(jsonNode, tClass);\n    }\n\n    @Override", "    public Boolean getBoolean(String key) {\n        JsonNode node = jsonNode.get(key);\n        return node == null ? null : node.asBoolean();\n    }\n\n    @Override\n    public boolean getBooleanValue(String key) {\n        JsonNode node = jsonNode.get(key);\n        return node.asBoolean();\n    }\n\n    @Override", "    public Integer getInteger(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).intValue() : null;\n    }\n\n    @Override\n    public int getIntValue(String key) {\n        return jsonNode.get(key).intValue();\n    }\n\n    @Override\n    public Long getLong(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).longValue() : null;\n    }\n\n    @Override", "    public Long getLong(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).longValue() : null;\n    }\n\n    @Override\n    public long getLongValue(String key) {\n        return jsonNode.get(key).longValue();\n    }\n\n    @Override\n    public Float getFloat(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).floatValue() : null;\n    }\n\n    @Override", "    public Float getFloat(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).floatValue() : null;\n    }\n\n    @Override\n    public float getFloatValue(String key) {\n        return jsonNode.get(key).floatValue();\n    }\n\n    @Override\n    public Double getDouble(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).doubleValue() : null;\n    }\n\n    @Override", "    public Double getDouble(String key) {\n        return jsonNode.has(key) ? jsonNode.get(key).doubleValue() : null;\n    }\n\n    @Override\n    public double getDoubleValue(String key) {\n        return jsonNode.get(key).doubleValue();\n    }\n\n    @Override\n    public String getString(String key) {\n        return jsonNode.get(key).asText();\n    }\n\n    @Override", "    public String getString(String key) {\n        return jsonNode.get(key).asText();\n    }\n\n    @Override\n    public BigDecimal getBigDecimal(String key) {\n        return new BigDecimal(jsonNode.get(key).asText());\n    }\n\n    @Override\n    public boolean containsKey(String key) {\n        return jsonNode.has(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        final Iterator<String> it = this.jsonNode.fieldNames();\n\n        return new AbstractSet<String>() {\n            @Override\n            public Iterator<String> iterator() {\n                return it;\n            }\n\n            @Override", "    public boolean containsKey(String key) {\n        return jsonNode.has(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        final Iterator<String> it = this.jsonNode.fieldNames();\n\n        return new AbstractSet<String>() {\n            @Override\n            public Iterator<String> iterator() {\n                return it;\n            }\n\n            @Override", "            public int size() {\n                return jsonNode.size();\n            }\n        };\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684\u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684\u5bf9\u8c61\uff08JSONMapper\uff09\u503c\n     *\n     * @param key\n     */\n    @Override", "    public JSONMapper getJSONMapper(String key) {\n        JsonNode jsonNode1 = jsonNode.get(key);\n        return jsonNode1 == null ? null : new JacksonJSONMapper(mapper, jsonNode1);\n    }\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    @Override\n    public JSONArrayMapper getJSONArrayMapper(String key) {\n        JsonNode node = this.jsonNode.get(key);", "    public JSONArrayMapper getJSONArrayMapper(String key) {\n        JsonNode node = this.jsonNode.get(key);\n        if (node == null || !node.isArray()) {\n            return null;\n        }\n        ArrayNode arrayNode = (ArrayNode) jsonNode.get(key);\n        return arrayNode == null ? null : new JacksonArrayMapper(mapper, arrayNode);\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684Object\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n\n        return mapper.convertValue(jsonNode.get(key), tClass);\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     * @param tClass\n     */\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JsonNode node = this.jsonNode.get(key);", "        if (node == null || !node.isArray()) {\n            return null;\n        }\n\n        int size = node.size();\n        if (size == 0) {\n            return Collections.emptyList();\n        }\n\n        List<T> result = new ArrayList<T>(size);\n        for (int i = 0; i < size; i++) {\n            JsonNode item = node.get(i);\n            result.add(mapper.convertValue(item, tClass));\n        }\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     */\n    @Override\n    public List<JSONMapper> getMappers(String key) {\n        JsonNode node = this.jsonNode.get(key);", "        for (int i = 0; i < size; i++) {\n            JsonNode item = node.get(i);\n            result.add(mapper.convertValue(item, tClass));\n        }\n        return result;\n    }\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     *\n     * @param key\n     */\n    @Override\n    public List<JSONMapper> getMappers(String key) {\n        JsonNode node = this.jsonNode.get(key);", "        if (node == null || !node.isArray()) {\n            return null;\n        }\n\n        int size = node.size();\n        if (size == 0) {\n            return Collections.emptyList();\n        }\n\n        List<JSONMapper> result = new ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n            JsonNode item = node.get(i);\n            result.add(new JacksonJSONMapper(mapper, item));\n        }\n        return result;\n    }\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    @Override", "        for (int i = 0; i < size; i++) {\n            JsonNode item = node.get(i);\n            result.add(new JacksonJSONMapper(mapper, item));\n        }\n        return result;\n    }\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    @Override", "    public int size() {\n        return jsonNode.size();\n    }\n\n    @Override\n    public String toString() {\n\n        return jsonNode.toString();\n    }\n}\n"]}
{"filename": "admin4j-json-jackson/src/main/java/com/admin4j/json/JacksonConvertor.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;", "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport lombok.Data;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\n/**\n * https://blog.csdn.net/agonie201218/article/details/125966380\n *\n * @author andanyang\n * @since 2023/5/5 13:47\n */\n@Data\npublic class JacksonConvertor implements JSONConvertor {\n\n\n    TypeReference<Map> mapTypeRef = new TypeReference<Map>() {\n    };\n    private ObjectMapper mapper = new ObjectMapper();\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param is\n     * @param charset\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n", " */\n@Data\npublic class JacksonConvertor implements JSONConvertor {\n\n\n    TypeReference<Map> mapTypeRef = new TypeReference<Map>() {\n    };\n    private ObjectMapper mapper = new ObjectMapper();\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param is\n     * @param charset\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n", "        try {\n            return mapper.readValue(is, clazz);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param bytes\n     * @param charset\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {", "        try {\n            return mapper.readValue(bytes, clazz);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param input\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(String input, Class<T> clazz) {", "        try {\n            return mapper.readValue(input, clazz);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * JSON \u8f6c Map\n     *\n     * @param input\n     */\n    @Override\n    public Map<String, Object> parseMap(String input) {", "        try {\n            return mapper.readValue(input, mapTypeRef);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public Map<String, Object> parseMap(InputStream is) {\n        try {\n\n            return mapper.readValue(is, mapTypeRef);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> clazz) {", "        try {\n\n            return mapper.readValue(is, mapTypeRef);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> clazz) {\n        try {\n            JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, clazz);\n            return mapper.readValue(input, javaType);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {", "        try {\n            JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, clazz);\n            return mapper.readValue(input, javaType);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {\n        try {\n            JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, clazz);\n            return mapper.readValue(is, javaType);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    @Override", "        try {\n            JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, clazz);\n            return mapper.readValue(is, javaType);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    @Override", "    public String toJSONString(Object object) {\n\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public byte[] serialize(Object object) {", "        try {\n            return mapper.writeValueAsBytes(object);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    @Override\n    public JSONMapper parseMapper(InputStream is) {\n\n        JsonNode node = null;", "    public JSONMapper parseMapper(InputStream is) {\n\n        JsonNode node = null;\n        try {\n            node = mapper.readTree(is);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return node == null ? null : new JacksonJSONMapper(mapper, node);\n    }\n\n    @Override", "    public JSONMapper parseMapper(String input) {\n        JsonNode node = null;\n\n        try {\n            node = mapper.readTree(input);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n\n        return node == null ? null : new JacksonJSONMapper(mapper, node);\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(String input) {\n        ArrayNode arrayNode;", "        try {\n            arrayNode = (ArrayNode) mapper.readTree(input);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n\n        int size = arrayNode.size();\n        List<JSONMapper> result = new ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n\n            result.add(new JacksonJSONMapper(mapper, arrayNode.get(i)));\n        }\n        return result;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        ArrayNode arrayNode;", "        for (int i = 0; i < size; i++) {\n\n            result.add(new JacksonJSONMapper(mapper, arrayNode.get(i)));\n        }\n        return result;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        ArrayNode arrayNode;\n        try {\n            arrayNode = (ArrayNode) mapper.readTree(is);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        int size = arrayNode.size();\n        List<JSONMapper> result = new ArrayList<>(size);", "        try {\n            arrayNode = (ArrayNode) mapper.readTree(is);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        int size = arrayNode.size();\n        List<JSONMapper> result = new ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n\n            result.add(new JacksonJSONMapper(mapper, arrayNode.get(i)));\n        }\n        return result;\n    }\n\n\n    @Override", "        for (int i = 0; i < size; i++) {\n\n            result.add(new JacksonJSONMapper(mapper, arrayNode.get(i)));\n        }\n        return result;\n    }\n\n\n    @Override\n    public JSONArrayMapper parseArrayMapper(String input) {\n        ArrayNode arrayNode;", "    public JSONArrayMapper parseArrayMapper(String input) {\n        ArrayNode arrayNode;\n        try {\n            arrayNode = (ArrayNode) mapper.readTree(input);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n\n        return arrayNode == null ? null : new JacksonArrayMapper(mapper, arrayNode);\n    }\n\n    @Override", "    public JSONArrayMapper parseArrayMapper(InputStream is) {\n        ArrayNode arrayNode;\n        try {\n            arrayNode = (ArrayNode) mapper.readTree(is);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return arrayNode == null ? null : new JacksonArrayMapper(mapper, arrayNode);\n    }\n}\n"]}
{"filename": "admin4j-json/src/main/java/com/admin4j/json/JSONConvertor.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\n\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\n/**\n * JSON \u5e8f\u5217\u5316\u5668\n *\n * @author andanyang\n * @since 2023/5/5 12:21\n */\npublic interface JSONConvertor extends Prioritized {\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(InputStream is, Charset charset, Class<T> clazz);\n\n    default <T> T parseObject(InputStream is, Class<T> clazz) {\n        return parseObject(is, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz);\n\n    default <T> T parseObject(byte[] bytes, Class<T> clazz) {\n        return parseObject(bytes, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(String input, Class<T> clazz);\n\n    /**\n     * JSON \u8f6c Map\n     */\n    Map<String, Object> parseMap(String input);\n\n    Map<String, Object> parseMap(InputStream is);\n\n    JSONMapper parseMapper(InputStream is);\n\n    JSONMapper parseMapper(String input);\n\n    <T> List<T> parseList(String input, Class<T> clazz);\n\n    <T> List<T> parseList(InputStream is, Class<T> clazz);\n\n    List<JSONMapper> parseJSONMappers(String input);\n\n    List<JSONMapper> parseJSONMappers(InputStream is);\n\n    JSONArrayMapper parseArrayMapper(String input);\n\n    JSONArrayMapper parseArrayMapper(InputStream is);\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    String toJSONString(Object object);\n\n    byte[] serialize(Object object);\n}\n", " */\npublic interface JSONConvertor extends Prioritized {\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(InputStream is, Charset charset, Class<T> clazz);\n\n    default <T> T parseObject(InputStream is, Class<T> clazz) {\n        return parseObject(is, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz);\n\n    default <T> T parseObject(byte[] bytes, Class<T> clazz) {\n        return parseObject(bytes, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    <T> T parseObject(String input, Class<T> clazz);\n\n    /**\n     * JSON \u8f6c Map\n     */\n    Map<String, Object> parseMap(String input);\n\n    Map<String, Object> parseMap(InputStream is);\n\n    JSONMapper parseMapper(InputStream is);\n\n    JSONMapper parseMapper(String input);\n\n    <T> List<T> parseList(String input, Class<T> clazz);\n\n    <T> List<T> parseList(InputStream is, Class<T> clazz);\n\n    List<JSONMapper> parseJSONMappers(String input);\n\n    List<JSONMapper> parseJSONMappers(InputStream is);\n\n    JSONArrayMapper parseArrayMapper(String input);\n\n    JSONArrayMapper parseArrayMapper(InputStream is);\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    String toJSONString(Object object);\n\n    byte[] serialize(Object object);\n}\n"]}
{"filename": "admin4j-json/src/main/java/com/admin4j/json/Prioritized.java", "chunked_list": ["package com.admin4j.json;\n\nimport static java.lang.Integer.compare;\n\n/**\n * \u4f18\u5148\u7ea7\u63a5\u53e3\u53ef\u4ee5\u7531\u5e94\u8be5\u6392\u5e8f\u7684\u5bf9\u8c61\u5b9e\u73b0\uff0c\u4f8b\u5982\u53ef\u6267\u884c\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\n *\n * @author andanyang\n * @since 2023/4/26 9:39\n */\npublic interface Prioritized extends Comparable<Prioritized> {\n\n    /**\n     * The maximum priority\n     */\n    int MAX_PRIORITY = Integer.MIN_VALUE;\n\n    /**\n     * The minimum priority\n     */\n    int MIN_PRIORITY = Integer.MAX_VALUE;\n\n    /**\n     * Normal Priority\n     */\n    int NORMAL_PRIORITY = 0;\n\n    /**\n     * Get the priority\n     *\n     * @return the default is {@link #NORMAL_PRIORITY}\n     */\n    default int getPriority() {\n        return NORMAL_PRIORITY;\n    }\n\n    /**\n     * \u6570\u5b57\u8d8a\u5927\u6392\u5e8f\u8d8a\u9760\u524d\n     */\n    @Override\n    default int compareTo(Prioritized that) {\n        return compare(this.getPriority(), that.getPriority());\n    }\n\n}\n", " * @since 2023/4/26 9:39\n */\npublic interface Prioritized extends Comparable<Prioritized> {\n\n    /**\n     * The maximum priority\n     */\n    int MAX_PRIORITY = Integer.MIN_VALUE;\n\n    /**\n     * The minimum priority\n     */\n    int MIN_PRIORITY = Integer.MAX_VALUE;\n\n    /**\n     * Normal Priority\n     */\n    int NORMAL_PRIORITY = 0;\n\n    /**\n     * Get the priority\n     *\n     * @return the default is {@link #NORMAL_PRIORITY}\n     */\n    default int getPriority() {\n        return NORMAL_PRIORITY;\n    }\n\n    /**\n     * \u6570\u5b57\u8d8a\u5927\u6392\u5e8f\u8d8a\u9760\u524d\n     */\n    @Override\n    default int compareTo(Prioritized that) {\n        return compare(this.getPriority(), that.getPriority());\n    }\n\n}\n"]}
{"filename": "admin4j-json/src/main/java/com/admin4j/json/JSONUtil.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONMapper;\n\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ServiceLoader;", "import java.util.Map;\nimport java.util.ServiceLoader;\nimport java.util.stream.StreamSupport;\n\n/**\n * JSON \u89e3\u6790\u5de5\u5177\u7c7b\n *\n * @author andanyang\n * @since 2023/5/5 13:10\n */\npublic class JSONUtil {\n\n    private static final JSONConvertor JSON_CONVERTOR = loadJSONConvertor();\n\n    /**\n     * \u4f7f\u7528SPI \u52a0\u8f7d JSON_CONVERTOR\n     *\n     * @return\n     */\n    private static JSONConvertor loadJSONConvertor() {\n        return StreamSupport.stream(ServiceLoader.load(JSONConvertor.class).spliterator(), false)\n                .sorted().findFirst().orElseGet(() -> {\n                    throw new IllegalArgumentException(\"no JSON converter found\");\n                });\n    }\n\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n\n        return JSON_CONVERTOR.parseObject(is, charset, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(InputStream is, Class<T> clazz) {\n        return parseObject(is, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(bytes, charset, clazz);\n    }\n\n    public static <T> T parseObject(byte[] bytes, Class<T> clazz) {\n        return parseObject(bytes, StandardCharsets.UTF_8, clazz);\n    }\n\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(input, clazz);\n    }\n\n    /**\n     * JSON \u8f6c Map\n     */", " * @since 2023/5/5 13:10\n */\npublic class JSONUtil {\n\n    private static final JSONConvertor JSON_CONVERTOR = loadJSONConvertor();\n\n    /**\n     * \u4f7f\u7528SPI \u52a0\u8f7d JSON_CONVERTOR\n     *\n     * @return\n     */\n    private static JSONConvertor loadJSONConvertor() {\n        return StreamSupport.stream(ServiceLoader.load(JSONConvertor.class).spliterator(), false)\n                .sorted().findFirst().orElseGet(() -> {\n                    throw new IllegalArgumentException(\"no JSON converter found\");\n                });\n    }\n\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n\n        return JSON_CONVERTOR.parseObject(is, charset, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(InputStream is, Class<T> clazz) {\n        return parseObject(is, StandardCharsets.UTF_8, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(bytes, charset, clazz);\n    }\n\n    public static <T> T parseObject(byte[] bytes, Class<T> clazz) {\n        return parseObject(bytes, StandardCharsets.UTF_8, clazz);\n    }\n\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Class<T> clazz) {\n        return JSON_CONVERTOR.parseObject(input, clazz);\n    }\n\n    /**\n     * JSON \u8f6c Map\n     */", "    public static Map<String, Object> parseMap(String input) {\n        return JSON_CONVERTOR.parseMap(input);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210Map\n     */\n    public static Map<String, Object> parseMap(InputStream is) {\n        return JSON_CONVERTOR.parseMap(is);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210JSONMapper\n     */", "    public static JSONMapper parseMapper(String input) {\n        return JSON_CONVERTOR.parseMapper(input);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210JSONMapper\n     */\n    public static JSONMapper parseMapper(InputStream is) {\n        return JSON_CONVERTOR.parseMapper(is);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210List\n     */\n    public static <T> List<T> parseList(String input, Class<T> clazz) {\n        return JSON_CONVERTOR.parseList(input, clazz);\n    }\n\n    public static <T> List<T> parseList(InputStream is, Class<T> clazz) {\n        return JSON_CONVERTOR.parseList(is, clazz);\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */", "    public static String toJSONString(Object object) {\n\n        return JSON_CONVERTOR.toJSONString(object);\n    }\n\n    public static byte[] serialize(Object object) {\n        return JSON_CONVERTOR.serialize(object);\n    }\n}\n"]}
{"filename": "admin4j-json/src/main/java/com/admin4j/json/mapper/JSONArrayMapper.java", "chunked_list": ["package com.admin4j.json.mapper;\n\nimport java.util.List;\n\n/**\n * @author andanyang\n * @since 2023/5/25 12:37\n */\npublic interface JSONArrayMapper {\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    Object getOriginObject();\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    JSONMapper getMapper(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    JSONArrayMapper getArray(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    boolean getBooleanValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    int getIntValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    long getLongValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    float getFloatValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    double getDoubleValue(int index);\n\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    Boolean getBoolean(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    Integer getInteger(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    Long getLong(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    Float getFloat(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    Double getDouble(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    String getString(int index);\n\n    /**\n     * @param <T>    \u76ee\u6807\u6cdb\u578b\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    <T> List<T> toList(Class<T> tClass);\n\n\n    int size();\n\n\n    boolean isEmpty();\n}\n", "public interface JSONArrayMapper {\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    Object getOriginObject();\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    JSONMapper getMapper(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    JSONArrayMapper getArray(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    boolean getBooleanValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    int getIntValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    long getLongValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    float getFloatValue(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    double getDoubleValue(int index);\n\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    Boolean getBoolean(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    Integer getInteger(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    Long getLong(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    Float getFloat(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    Double getDouble(int index);\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    String getString(int index);\n\n    /**\n     * @param <T>    \u76ee\u6807\u6cdb\u578b\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    <T> List<T> toList(Class<T> tClass);\n\n\n    int size();\n\n\n    boolean isEmpty();\n}\n"]}
{"filename": "admin4j-json/src/main/java/com/admin4j/json/mapper/JSONMapper.java", "chunked_list": ["package com.admin4j.json.mapper;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author andanyang\n * @since 2023/5/25 12:37\n */\npublic interface JSONMapper {\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    Object getOriginObject();\n\n    /**\n     * \u662f\u5426\u4e3a\u6570\u7ec4\n     */\n    boolean isArray(String key);\n\n    /**\n     * \u662f\u5426\u662f\u5bf9\u8c61\n     */\n    boolean isObject(String key);\n\n    /**\n     * \u8f6c\u5316\u4e3aJSON \u5b57\u7b26\u4e32\n     *\n     * @return\n     */\n    String toJSONString();\n\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     */\n    <T> T toJavaObject(Class<T> tClass);\n\n    Boolean getBoolean(String key);\n\n\n    boolean getBooleanValue(String key);\n\n\n    Integer getInteger(String key);\n\n    int getIntValue(String key);\n\n\n    Long getLong(String key);\n\n\n    long getLongValue(String key);\n\n\n    Float getFloat(String key);\n\n    float getFloatValue(String key);\n\n\n    Double getDouble(String key);\n\n\n    double getDoubleValue(String key);\n\n\n    String getString(String key);\n\n    BigDecimal getBigDecimal(String key);\n\n    boolean containsKey(String key);\n\n\n    Set<String> keySet();\n\n\n    /**\n     * \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684\u5bf9\u8c61\uff08JSONMapper\uff09\u503c\n     */\n    JSONMapper getJSONMapper(String key);\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    JSONArrayMapper getJSONArrayMapper(String key);\n\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684Object\u503c\n     */\n    <T> T getObject(String key, Class<T> tClass);\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     */\n    <T> List<T> getArray(String key, Class<T> tClass);\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     */\n    List<JSONMapper> getMappers(String key);\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    int size();\n}\n", " * @since 2023/5/25 12:37\n */\npublic interface JSONMapper {\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    Object getOriginObject();\n\n    /**\n     * \u662f\u5426\u4e3a\u6570\u7ec4\n     */\n    boolean isArray(String key);\n\n    /**\n     * \u662f\u5426\u662f\u5bf9\u8c61\n     */\n    boolean isObject(String key);\n\n    /**\n     * \u8f6c\u5316\u4e3aJSON \u5b57\u7b26\u4e32\n     *\n     * @return\n     */\n    String toJSONString();\n\n\n    /**\n     * \u8f6c\u5316\u4e3ajava\u5bf9\u8c61\n     */\n    <T> T toJavaObject(Class<T> tClass);\n\n    Boolean getBoolean(String key);\n\n\n    boolean getBooleanValue(String key);\n\n\n    Integer getInteger(String key);\n\n    int getIntValue(String key);\n\n\n    Long getLong(String key);\n\n\n    long getLongValue(String key);\n\n\n    Float getFloat(String key);\n\n    float getFloatValue(String key);\n\n\n    Double getDouble(String key);\n\n\n    double getDoubleValue(String key);\n\n\n    String getString(String key);\n\n    BigDecimal getBigDecimal(String key);\n\n    boolean containsKey(String key);\n\n\n    Set<String> keySet();\n\n\n    /**\n     * \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684\u5bf9\u8c61\uff08JSONMapper\uff09\u503c\n     */\n    JSONMapper getJSONMapper(String key);\n\n    /**\n     * @param key key\n     * @return \u83b7\u53d6\u8be5key\u7684 \u5b50\u5bf9\u8c61\u7684 \u6570\u7ec4 \uff08JSONArrayMapper\uff09\u503c\n     */\n    JSONArrayMapper getJSONArrayMapper(String key);\n\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684Object\u503c\n     */\n    <T> T getObject(String key, Class<T> tClass);\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     */\n    <T> List<T> getArray(String key, Class<T> tClass);\n\n    /**\n     * \u83b7\u53d6\u6539key\u7684 \u5b50\u5bf9\u8c61\u7684List\u503c\n     */\n    List<JSONMapper> getMappers(String key);\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    int size();\n}\n"]}
{"filename": "admin4j-json-fastjson2/src/main/java/com/admin4j/json/Fastjson2JSONMapper.java", "chunked_list": ["package com.admin4j.json;\n\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\nimport lombok.RequiredArgsConstructor;\n\nimport java.math.BigDecimal;", "\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author andanyang\n * @since 2023/5/25 12:39\n */", " * @since 2023/5/25 12:39\n */\n@RequiredArgsConstructor\npublic class Fastjson2JSONMapper implements JSONMapper {\n\n    private final JSONObject jsonObject;\n\n    @Override\n    public Object getOriginObject() {\n        return jsonObject;\n    }\n\n    @Override", "    public Object getOriginObject() {\n        return jsonObject;\n    }\n\n    @Override\n    public JSONMapper getJSONMapper(String key) {\n        JSONObject jsonObject1 = jsonObject.getJSONObject(key);\n        return jsonObject1 == null ? null : new Fastjson2JSONMapper(jsonObject1);\n    }\n\n    @Override", "    public JSONArrayMapper getJSONArrayMapper(String key) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        return jsonArray == null ? null : new Fast2JSONArrayMapper(jsonArray);\n    }\n\n    @Override\n    public boolean isArray(String key) {\n        return jsonObject.get(key) instanceof JSONArray;\n    }\n\n    @Override", "    public boolean isObject(String key) {\n        return jsonObject.get(key) instanceof JSONObject;\n    }\n\n    @Override\n    public <T> T getObject(String key, Class<T> tClass) {\n        return jsonObject.getObject(key, tClass);\n    }\n\n    @Override\n    public <T> List<T> getArray(String key, Class<T> tClass) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        List<T> jsonMappers = new ArrayList<>(jsonArray.size());", "        for (Object jsonObject : jsonArray) {\n            if (jsonObject instanceof JSONObject) {\n                jsonMappers.add(((JSONObject) jsonObject).toJavaObject(tClass));\n            } else {\n                jsonMappers.add((T) jsonObject);\n            }\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> getMappers(String key) {\n        JSONArray jsonArray = jsonObject.getJSONArray(key);\n        List<JSONMapper> jsonMappers = new ArrayList<>(jsonArray.size());", "        for (Object jsonObject : jsonArray) {\n            jsonMappers.add(new Fastjson2JSONMapper((JSONObject) jsonObject));\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public Boolean getBoolean(String key) {\n        return jsonObject.getBoolean(key);\n    }\n\n    @Override", "    public boolean getBooleanValue(String key) {\n        return jsonObject.getBooleanValue(key);\n    }\n\n    @Override\n    public Integer getInteger(String key) {\n        return jsonObject.getInteger(key);\n    }\n\n    @Override\n    public int getIntValue(String key) {\n        return jsonObject.getIntValue(key);\n    }\n\n    @Override", "    public int getIntValue(String key) {\n        return jsonObject.getIntValue(key);\n    }\n\n    @Override\n    public Long getLong(String key) {\n        return jsonObject.getLong(key);\n    }\n\n    @Override\n    public long getLongValue(String key) {\n        return jsonObject.getLongValue(key);\n    }\n\n    @Override", "    public long getLongValue(String key) {\n        return jsonObject.getLongValue(key);\n    }\n\n    @Override\n    public Float getFloat(String key) {\n        return jsonObject.getFloat(key);\n    }\n\n    @Override\n    public float getFloatValue(String key) {\n        return jsonObject.getFloatValue(key);\n    }\n\n    @Override", "    public float getFloatValue(String key) {\n        return jsonObject.getFloatValue(key);\n    }\n\n    @Override\n    public Double getDouble(String key) {\n        return jsonObject.getDouble(key);\n    }\n\n    @Override\n    public double getDoubleValue(String key) {\n        return jsonObject.getDoubleValue(key);\n    }\n\n    @Override", "    public double getDoubleValue(String key) {\n        return jsonObject.getDoubleValue(key);\n    }\n\n    @Override\n    public String getString(String key) {\n        return jsonObject.getString(key);\n    }\n\n    @Override\n    public BigDecimal getBigDecimal(String key) {\n        return jsonObject.getBigDecimal(key);\n    }\n\n    @Override", "    public BigDecimal getBigDecimal(String key) {\n        return jsonObject.getBigDecimal(key);\n    }\n\n    @Override\n    public boolean containsKey(String key) {\n        return jsonObject.containsKey(key);\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return jsonObject.keySet();\n    }\n\n    @Override", "    public String toJSONString() {\n        return jsonObject.toJSONString();\n    }\n\n    @Override\n    public <T> T toJavaObject(Class<T> tClass) {\n        return jsonObject.toJavaObject(tClass);\n    }\n\n    @Override\n    public String toString() {\n\n        return jsonObject.toString();\n    }\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    @Override", "    public String toString() {\n\n        return jsonObject.toString();\n    }\n\n    /**\n     * \u5b50\u5143\u7d20\u7684\u6570\u91cf\n     *\n     * @return\n     */\n    @Override", "    public int size() {\n        return jsonObject.size();\n    }\n}\n"]}
{"filename": "admin4j-json-fastjson2/src/main/java/com/admin4j/json/Fastjson2Convertor.java", "chunked_list": ["package com.admin4j.json;\n\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\n\nimport java.io.BufferedReader;", "\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;", "import java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @author andanyang\n * @since 2023/5/5 13:31\n */\npublic class Fastjson2Convertor implements com.admin4j.json.JSONConvertor {\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param is\n     * @param clazz\n     * @param charset\n     */\n    @Override\n    public <T> T parseObject(InputStream is, Charset charset, Class<T> clazz) {\n        return JSON.parseObject(is, charset, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param bytes\n     * @param clazz\n     * @param charset\n     */\n    @Override\n    public <T> T parseObject(byte[] bytes, Charset charset, Class<T> clazz) {\n\n        return JSON.parseObject(bytes, clazz);\n\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     *\n     * @param input\n     * @param clazz\n     */\n    @Override\n    public <T> T parseObject(String input, Class<T> clazz) {\n        return JSON.parseObject(input, clazz);\n    }\n\n\n    /**\n     * JSON \u8f6c Map\n     */\n    @Override\n    public Map<String, Object> parseMap(String input) {\n        return JSON.parseObject(input);\n    }\n\n    @Override\n    public Map<String, Object> parseMap(InputStream is) {\n\n        return JSON.parseObject(is, StandardCharsets.UTF_8, Map.class);\n    }\n\n    @Override\n    public <T> List<T> parseList(String input, Class<T> type) {\n        return JSON.parseArray(input, type);\n    }\n\n    @Override\n    public <T> List<T> parseList(InputStream is, Class<T> clazz) {\n\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return JSON.parseArray(str, clazz);\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6210json\u5b57\u7b26\u4e32\n     *\n     * @param object\n     */\n    @Override", "    public String toJSONString(Object object) {\n        return JSON.toJSONString(object);\n    }\n\n    @Override\n    public byte[] serialize(Object object) {\n        return JSON.toJSONBytes(object);\n\n    }\n\n    @Override", "    public JSONMapper parseMapper(InputStream is) {\n\n        JSONObject jsonObject = JSON.parseObject(is, StandardCharsets.UTF_8, JSONObject.class);\n        return jsonObject == null ? null : new Fastjson2JSONMapper(jsonObject);\n    }\n\n    @Override\n    public JSONMapper parseMapper(String input) {\n        JSONObject jsonObject = JSON.parseObject(input);\n        return jsonObject == null ? null : new Fastjson2JSONMapper(jsonObject);\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(String input) {\n        JSONArray objects = JSON.parseArray(input);\n        List<JSONMapper> jsonMappers = new ArrayList<>(objects.size());", "        for (Object o : objects) {\n            jsonMappers.add(new Fastjson2JSONMapper((JSONObject) o));\n        }\n        return jsonMappers;\n    }\n\n    @Override\n    public List<JSONMapper> parseJSONMappers(InputStream is) {\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return parseJSONMappers(str);\n    }\n\n    @Override", "    public JSONArrayMapper parseArrayMapper(String input) {\n        JSONArray objects = JSON.parseArray(input);\n        return objects == null ? null : new Fast2JSONArrayMapper(objects);\n    }\n\n    @Override\n    public JSONArrayMapper parseArrayMapper(InputStream is) {\n        String str = new BufferedReader(new InputStreamReader(is))\n                .lines().collect(Collectors.joining(System.lineSeparator()));\n        return parseArrayMapper(str);\n    }\n}\n"]}
{"filename": "admin4j-json-fastjson2/src/main/java/com/admin4j/json/Fast2JSONArrayMapper.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * @author andanyang\n * @since 2023/5/25 15:30\n */\n@RequiredArgsConstructor\npublic class Fast2JSONArrayMapper implements JSONArrayMapper {\n\n\n    private final JSONArray jsonArray;\n\n    /**\n     * \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n     */\n    @Override", "    public Object getOriginObject() {\n        return jsonArray;\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonObj\n     */\n    @Override\n    public JSONMapper getMapper(int index) {\n        JSONObject jsonObject = jsonArray.getJSONObject(index);\n        return jsonObject == null ? null : new Fastjson2JSONMapper(jsonObject);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override", "    public JSONMapper getMapper(int index) {\n        JSONObject jsonObject = jsonArray.getJSONObject(index);\n        return jsonObject == null ? null : new Fastjson2JSONMapper(jsonObject);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return \u5b50 JsonArr\n     */\n    @Override\n    public JSONArrayMapper getArray(int index) {\n\n        JSONArray jsonArray1 = jsonArray.getJSONArray(index);\n        return jsonArray1 == null ? null : new Fast2JSONArrayMapper(jsonArray1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public JSONArrayMapper getArray(int index) {\n\n        JSONArray jsonArray1 = jsonArray.getJSONArray(index);\n        return jsonArray1 == null ? null : new Fast2JSONArrayMapper(jsonArray1);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override", "    public boolean getBooleanValue(int index) {\n        return jsonArray.getBooleanValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return boolean \u503c\n     */\n    @Override\n    public Boolean getBoolean(int index) {\n        return jsonArray.getBoolean(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public Boolean getBoolean(int index) {\n        return jsonArray.getBoolean(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public int getIntValue(int index) {\n        return jsonArray.getIntValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override", "    public int getIntValue(int index) {\n        return jsonArray.getIntValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return int \u503c\n     */\n    @Override\n    public Integer getInteger(int index) {\n        return jsonArray.getInteger(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public Integer getInteger(int index) {\n        return jsonArray.getInteger(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public long getLongValue(int index) {\n        return jsonArray.getLongValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override", "    public long getLongValue(int index) {\n        return jsonArray.getLongValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return long \u503c\n     */\n    @Override\n    public Long getLong(int index) {\n        return jsonArray.getLong(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public Long getLong(int index) {\n        return jsonArray.getLong(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public float getFloatValue(int index) {\n        return jsonArray.getFloatValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override", "    public float getFloatValue(int index) {\n        return jsonArray.getFloatValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return float \u503c\n     */\n    @Override\n    public Float getFloat(int index) {\n        return jsonArray.getFloat(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public Float getFloat(int index) {\n        return jsonArray.getFloat(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public double getDoubleValue(int index) {\n        return jsonArray.getDoubleValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override", "    public double getDoubleValue(int index) {\n        return jsonArray.getDoubleValue(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return double \u503c\n     */\n    @Override\n    public Double getDouble(int index) {\n        return jsonArray.getDouble(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override", "    public Double getDouble(int index) {\n        return jsonArray.getDouble(index);\n    }\n\n    /**\n     * @param index \u5143\u7d20\u4e0b\u6807\n     * @return String \u503c\n     */\n    @Override\n    public String getString(int index) {\n        return jsonArray.getString(index);\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        return jsonArray.toJavaList(tClass);\n    }\n\n\n    @Override", "    public String getString(int index) {\n        return jsonArray.getString(index);\n    }\n\n    /**\n     * @param tClass \u76ee\u6807\u7c7b\u578b\n     * @return \u8f6c JavaBean \u5217\u8868\n     */\n    @Override\n    public <T> List<T> toList(Class<T> tClass) {\n        return jsonArray.toJavaList(tClass);\n    }\n\n\n    @Override", "    public int size() {\n        return jsonArray.size();\n    }\n\n\n    @Override\n    public boolean isEmpty() {\n        //jsonArray.iterator()\n        return jsonArray.isEmpty();\n    }\n\n\n    //@Override", "    //public boolean hasNext() {\n    //    return jsonArray.iterator().hasNext();\n    //}\n    //\n    //\n    //@Override\n    //public Object next() {\n    //    return jsonArray.iterator().next();\n    //}\n}\n"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/FastJSONMapperTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.junit.Before;\n\nimport java.util.Collections;\n\n/**\n * @author andanyang", "/**\n * @author andanyang\n * @since 2023/5/25 14:40\n */\npublic class FastJSONMapperTest extends JSONMapperTest {\n\n\n    @Before\n    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = JSON.parseObject(testString);\n        jsonMapper = new FastjsonJSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}", "    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = JSON.parseObject(testString);\n        jsonMapper = new FastjsonJSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/GsonJSONMapperTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.alibaba.fastjson.JSON;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport org.junit.Before;\n\nimport java.util.Collections;\n\n/**", "\n/**\n * @author andanyang\n * @since 2023/5/25 14:40\n */\npublic class GsonJSONMapperTest extends JSONMapperTest {\n\n\n    @Before\n    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        //JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        //jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        Gson gson = new Gson();\n        JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}", "    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        //JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        //jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        Gson gson = new Gson();\n        JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/Fast2JSONMapperTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport org.junit.Before;\n\nimport java.util.Collections;\n\n/**\n * @author andanyang", "/**\n * @author andanyang\n * @since 2023/5/25 14:40\n */\npublic class Fast2JSONMapperTest extends JSONMapperTest {\n\n\n    @Before\n    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}", "    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/JacksonJSONMapperTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.Before;\n\nimport java.util.Collections;\n\n/**", "\n/**\n * @author andanyang\n * @since 2023/5/25 14:40\n */\npublic class JacksonJSONMapperTest extends JSONMapperTest {\n\n\n    @Before\n    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        //JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        //jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode node = objectMapper.readTree(testString);\n        jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}", "    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        //JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        //jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode node = objectMapper.readTree(testString);\n        jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/JSONMapperTest.java", "chunked_list": ["package com.admin4j.json;\n\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.junit.Before;\nimport org.junit.Test;", "import org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author andanyang\n * @since 2023/5/25 14:40", " * @author andanyang\n * @since 2023/5/25 14:40\n */\npublic class JSONMapperTest {\n\n    JSONMapper jsonMapper;\n    String testString;\n\n    @Before\n    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n    @Test", "    public void init() throws Exception {\n\n\n        SubTestJSON subTestJSON = new SubTestJSON(\"10\", 11, 12L);\n        TestJSON testJSON = new TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n\n        testString = JSON.toJSONString(testJSON);\n\n\n        JSONObject jsonObject = com.alibaba.fastjson2.JSON.parseObject(testString);\n        jsonMapper = new Fastjson2JSONMapper(jsonObject);\n\n        //Gson gson = new Gson();\n        //JsonObject jsonObject = gson.fromJson(testString, JsonObject.class);\n        //jsonMapper = new GsonJSONMapper(gson, jsonObject);\n\n        //ObjectMapper objectMapper = new ObjectMapper();\n        //JsonNode node = objectMapper.readTree(testString);\n        //jsonMapper = new JacksonJSONMapper(objectMapper, node);\n    }\n\n\n    @Test", "    public void testIsObject() {\n        boolean subTestJSON = jsonMapper.isObject(\"subTestJSON\");\n        System.out.println(\"testIsObject = \" + subTestJSON);\n        assert subTestJSON;\n        boolean a = jsonMapper.isObject(\"a\");\n        System.out.println(\"a = \" + a);\n        assert !a;\n\n        boolean array = jsonMapper.isObject(\"subTestJSONs\");\n        System.out.println(\"array = \" + array);\n        assert !array;\n    }\n\n    @Test", "    public void testIsArray() {\n        boolean subTestJSON = jsonMapper.isArray(\"subTestJSON\");\n        System.out.println(\"testIsArray = \" + subTestJSON);\n        assert !subTestJSON;\n        boolean a = jsonMapper.isArray(\"a\");\n        System.out.println(\"a = \" + a);\n        assert !a;\n\n        boolean array = jsonMapper.isArray(\"subTestJSONs\");\n        System.out.println(\"array = \" + array);\n        assert array;\n    }\n\n    @Test", "    public void testOriginObject() {\n\n        Object originObject = jsonMapper.getOriginObject();\n        System.out.println(\"originObject = \" + originObject);\n    }\n\n    @Test\n    public void toJSONString() {\n\n        String jsonString = jsonMapper.toJSONString();\n        System.out.println(\"jsonString = \" + jsonString);\n        assert jsonString != null;\n    }\n\n    @Test", "    public void toJavaObject() {\n        TestJSON javaObject = jsonMapper.toJavaObject(TestJSON.class);\n        System.out.println(\"javaObject = \" + javaObject);\n        assert javaObject.b == 2;\n    }\n\n    @Test\n    public void getBoolean() {\n\n        Boolean f = jsonMapper.getBoolean(\"f\");\n        System.out.println(\"f = \" + f);\n        assert f;\n    }\n\n    @Test", "    public void getBooleanValue() {\n        Boolean f = jsonMapper.getBooleanValue(\"f\");\n        System.out.println(\"f = \" + f);\n        assert f;\n    }\n\n    @Test\n    public void getInteger() {\n        Integer b = jsonMapper.getInteger(\"b\");\n        System.out.println(\"b = \" + b);\n        assert b == 2;\n    }\n\n    @Test", "    public void getIntValue() {\n        int b = jsonMapper.getIntValue(\"b\");\n        System.out.println(\"b = \" + b);\n\n        assert b == 2;\n    }\n\n    @Test\n    public void getLong() {\n        Long c = jsonMapper.getLong(\"c\");\n        System.out.println(\"c = \" + c);\n        assert c == 3L;\n    }\n\n    @Test", "    public void getLong() {\n        Long c = jsonMapper.getLong(\"c\");\n        System.out.println(\"c = \" + c);\n        assert c == 3L;\n    }\n\n    @Test\n    public void getLongValue() {\n        long c = jsonMapper.getLongValue(\"c\");\n        System.out.println(\"c = \" + c);\n        assert c == 3L;\n    }\n\n    @Test", "    public void getFloat() {\n\n        Float e = jsonMapper.getFloat(\"e\");\n        System.out.println(\"e = \" + e);\n        assert e == 5f;\n    }\n\n    @Test\n    public void getFloatValue() {\n\n        float e = jsonMapper.getFloatValue(\"e\");\n        System.out.println(\"e = \" + e);\n        assert e == 5f;\n    }\n\n    @Test", "    public void getFloatValue() {\n\n        float e = jsonMapper.getFloatValue(\"e\");\n        System.out.println(\"e = \" + e);\n        assert e == 5f;\n    }\n\n    @Test\n    public void getDouble() {\n        Double d = jsonMapper.getDouble(\"d\");\n        System.out.println(\"e = \" + d);\n        assert d == 4D;\n    }\n\n    @Test", "    public void getDouble() {\n        Double d = jsonMapper.getDouble(\"d\");\n        System.out.println(\"e = \" + d);\n        assert d == 4D;\n    }\n\n    @Test\n    public void getDoubleValue() {\n        double d = jsonMapper.getDoubleValue(\"d\");\n        System.out.println(\"e = \" + d);\n        assert d == 4L;\n    }\n\n    @Test", "    public void getString() {\n        String string = jsonMapper.getString(\"a\");\n        System.out.println(\"string = \" + string);\n        assert string.equals(\"1\");\n    }\n\n    @Test\n    public void containsKey() {\n        boolean a = jsonMapper.containsKey(\"a\");\n        System.out.println(\"a = \" + a);\n        boolean w = jsonMapper.containsKey(\"w\");\n        System.out.println(\"w = \" + w);\n        assert a;\n        assert !w;\n    }\n\n    @Test", "    public void keySet() {\n        Set<String> strings = jsonMapper.keySet();\n        System.out.println(\"strings = \" + strings);\n        assert strings.size() == 8;\n    }\n\n    @Test\n    public void getJSONMapper() {\n\n        JSONMapper subTestJSON = jsonMapper.getJSONMapper(\"subTestJSON\");\n        System.out.println(\"subTestJSON = \" + subTestJSON);\n        assert subTestJSON.getIntValue(\"y\") == 11;\n    }\n\n    @Test", "    public void getObject() {\n\n        SubTestJSON subTestJSON = jsonMapper.getObject(\"subTestJSON\", SubTestJSON.class);\n        System.out.println(\"subTestJSON = \" + subTestJSON);\n        assert subTestJSON.x.equals(\"10\");\n    }\n\n    @Test\n    public void getArray() {\n        List<SubTestJSON> subTestJSON = jsonMapper.getArray(\"subTestJSONs\", SubTestJSON.class);\n        System.out.println(\"subTestJSON = \" + subTestJSON);\n        assert subTestJSON != null;\n        assert subTestJSON.get(0).x.equals(\"10\");\n    }\n\n    @Test", "    public void getArray() {\n        List<SubTestJSON> subTestJSON = jsonMapper.getArray(\"subTestJSONs\", SubTestJSON.class);\n        System.out.println(\"subTestJSON = \" + subTestJSON);\n        assert subTestJSON != null;\n        assert subTestJSON.get(0).x.equals(\"10\");\n    }\n\n    @Test\n    public void getArrayMapper() {\n\n        List<JSONMapper> subTestJSONs = jsonMapper.getMappers(\"subTestJSONs\");\n        System.out.println(\"subTestJSONs = \" + subTestJSONs);\n        assert subTestJSONs != null;\n        assert subTestJSONs.get(0).getInteger(\"y\").equals(11);\n    }\n\n    @Test", "    public void getArrayMapper() {\n\n        List<JSONMapper> subTestJSONs = jsonMapper.getMappers(\"subTestJSONs\");\n        System.out.println(\"subTestJSONs = \" + subTestJSONs);\n        assert subTestJSONs != null;\n        assert subTestJSONs.get(0).getInteger(\"y\").equals(11);\n    }\n\n    @Test\n    public void size() {\n\n        int size = jsonMapper.size();\n        System.out.println(\"size = \" + size);\n        assert size == 8;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class TestJSON {\n        private String a;\n        private int b;\n        private long c;\n        private double d;\n        private float e;\n        private boolean f;\n        private SubTestJSON subTestJSON;\n        private List<SubTestJSON> subTestJSONs;\n\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class SubTestJSON {\n        private String x;\n        private int y;\n        private long z;\n    }\n}", "    public void size() {\n\n        int size = jsonMapper.size();\n        System.out.println(\"size = \" + size);\n        assert size == 8;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class TestJSON {\n        private String a;\n        private int b;\n        private long c;\n        private double d;\n        private float e;\n        private boolean f;\n        private SubTestJSON subTestJSON;\n        private List<SubTestJSON> subTestJSONs;\n\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class SubTestJSON {\n        private String x;\n        private int y;\n        private long z;\n    }\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/array/GsonArrayMapperTest.java", "chunked_list": ["package com.admin4j.json.array;\n\nimport com.admin4j.json.GsonArrayMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.junit.Before;\n\n/**\n * @author andanyang\n * @since 2023/5/25 16:14", " * @author andanyang\n * @since 2023/5/25 16:14\n */\npublic class GsonArrayMapperTest extends ArrayMapperTest {\n\n\n    @Before\n    public void initialize() {\n        super.initialize();\n\n        Gson gson = new Gson();\n        JsonArray jsonObject = gson.fromJson(testArrsys, JsonArray.class);\n        jsonArrayMapper = new GsonArrayMapper(gson, jsonObject);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/array/FastArrayMapperTest.java", "chunked_list": ["package com.admin4j.json.array;\n\nimport com.admin4j.json.FastJSONArrayMapper;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport org.junit.Before;\n\n/**\n * @author andanyang\n * @since 2023/5/25 16:14", " * @author andanyang\n * @since 2023/5/25 16:14\n */\npublic class FastArrayMapperTest extends ArrayMapperTest {\n\n\n    @Before\n    public void initialize() {\n        super.initialize();\n        JSONArray objects = JSON.parseArray(testArrsys);\n        jsonArrayMapper = new FastJSONArrayMapper(objects);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/array/Fast2ArrayMapperTest.java", "chunked_list": ["package com.admin4j.json.array;\n\nimport com.admin4j.json.FastJSONArrayMapper;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport org.junit.Before;\n\n/**\n * @author andanyang\n * @since 2023/5/25 16:14", " * @author andanyang\n * @since 2023/5/25 16:14\n */\npublic class Fast2ArrayMapperTest extends ArrayMapperTest {\n\n\n    @Before\n    public void initialize() {\n        super.initialize();\n        JSONArray objects = JSON.parseArray(testArrsys);\n        jsonArrayMapper = new FastJSONArrayMapper(objects);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/array/JacksonArrayMapperTest.java", "chunked_list": ["package com.admin4j.json.array;\n\nimport com.admin4j.json.JacksonArrayMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport org.junit.Before;\n\n/**\n * @author andanyang", "/**\n * @author andanyang\n * @since 2023/5/25 16:14\n */\npublic class JacksonArrayMapperTest extends ArrayMapperTest {\n\n\n    @Before\n    public void initialize() {\n        super.initialize();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        ArrayNode node = null;", "    public void initialize() {\n        super.initialize();\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        ArrayNode node = null;\n        try {\n            node = (ArrayNode) objectMapper.readTree(testArrsys);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n        jsonArrayMapper = new JacksonArrayMapper(objectMapper, node);\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/test/java/com/admin4j/json/array/ArrayMapperTest.java", "chunked_list": ["package com.admin4j.json.array;\n\nimport com.admin4j.json.Fast2JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONArrayMapper;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;", "import lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/**\n * @author andanyang\n * @since 2023/5/25 16:14\n */\npublic class ArrayMapperTest {\n\n    JSONArrayMapper jsonArrayMapper;\n    String testArrsys;\n\n    @Before", "    public void initialize() {\n        ArrayMapperTest.SubTestJSON subTestJSON = new ArrayMapperTest.SubTestJSON(\"10\", 11, 12L);\n        ArrayMapperTest.TestJSON testJSON1 = new ArrayMapperTest.TestJSON(\"1\", 2, 3L, 4d, 5f, true, subTestJSON, Collections.singletonList(subTestJSON));\n        ArrayMapperTest.TestJSON testJSON2 = new ArrayMapperTest.TestJSON(\"11\", 12, 13L, 14d, 15f, true, subTestJSON, Collections.singletonList(subTestJSON));\n        List<ArrayMapperTest.TestJSON> testJSONS = new ArrayList<>();\n        testJSONS.add(testJSON1);\n        testJSONS.add(testJSON2);\n\n\n        Object[] objects1 = {\n                \"111\", 1, 2L, 3D, 4f, true, subTestJSON, testJSONS\n        };\n        testArrsys = JSON.toJSONString(objects1);\n        JSONArray objects = JSON.parseArray(testArrsys);\n        jsonArrayMapper = new Fast2JSONArrayMapper(objects);\n\n    }\n", "    public void testGetOriginObject() {\n    }\n\n    @Test\n    public void testGetMapper() {\n\n        JSONMapper mapper = jsonArrayMapper.getMapper(6);\n        System.out.println(\"mapper = \" + mapper);\n        assert mapper.getString(\"x\").equals(\"10\");\n    }\n\n    @Test", "    public void testGetArray() {\n        JSONArrayMapper array = jsonArrayMapper.getArray(7);\n        System.out.println(\"array = \" + array);\n        assert array.size() == 2;\n    }\n\n    @Test\n    public void testGetBooleanValue() {\n        boolean booleanValue = jsonArrayMapper.getBooleanValue(5);\n        System.out.println(\"booleanValue = \" + booleanValue);\n        assert booleanValue;\n    }\n\n    @Test", "    public void testGetInt() {\n        int intValue = jsonArrayMapper.getIntValue(1);\n        System.out.println(\"intValue = \" + intValue);\n        assert intValue == 1;\n    }\n\n    @Test\n    public void testGetLong() {\n        long longValue = jsonArrayMapper.getLongValue(2);\n        System.out.println(\"longValue = \" + longValue);\n        assert longValue == 2;\n    }\n\n    @Test", "    public void testGetFloatValue() {\n        float floatValue = jsonArrayMapper.getFloatValue(4);\n        System.out.println(\"floatValue = \" + floatValue);\n        assert floatValue == 4;\n    }\n\n    @Test\n    public void testGetDoubleValue() {\n        double doubleValue = jsonArrayMapper.getDoubleValue(3);\n        System.out.println(\"doubleValue = \" + doubleValue);\n        assert doubleValue == 3;\n    }\n\n    @Test", "    public void testGetString() {\n        String string = jsonArrayMapper.getString(0);\n        System.out.println(\"string = \" + string);\n        assert Objects.equals(string, \"111\");\n    }\n\n    @Test\n    public void testToList() {\n\n        JSONArrayMapper array = jsonArrayMapper.getArray(7);\n        List<TestJSON> list = array.toList(TestJSON.class);\n        System.out.println(\"list = \" + list);\n        assert list.size() == 2;\n    }\n\n    @Test", "    public void testSize() {\n        int size = jsonArrayMapper.size();\n        System.out.println(\"size = \" + size);\n        assert size == 8;\n    }\n\n\n    @Test\n    public void testIsEmpty() {\n        boolean empty = jsonArrayMapper.isEmpty();\n        System.out.println(\"empty = \" + empty);\n        assert !empty;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class SubTestJSON {\n        private String x;\n        private int y;\n        private long z;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class TestJSON {\n        private String a;\n        private int b;\n        private long c;\n        private double d;\n        private float e;\n        private boolean f;\n        private ArrayMapperTest.SubTestJSON subTestJSON;\n        private List<ArrayMapperTest.SubTestJSON> subTestJSONs;\n\n    }\n\n\n}", "    public void testIsEmpty() {\n        boolean empty = jsonArrayMapper.isEmpty();\n        System.out.println(\"empty = \" + empty);\n        assert !empty;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class SubTestJSON {\n        private String x;\n        private int y;\n        private long z;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    static class TestJSON {\n        private String a;\n        private int b;\n        private long c;\n        private double d;\n        private float e;\n        private boolean f;\n        private ArrayMapperTest.SubTestJSON subTestJSON;\n        private List<ArrayMapperTest.SubTestJSON> subTestJSONs;\n\n    }\n\n\n}"]}
{"filename": "admin4j-json-test/src/main/java/com/admin4j/json/test/JSONTest.java", "chunked_list": ["package com.admin4j.json.test;\n\nimport com.admin4j.json.JSONUtil;\nimport com.admin4j.json.mapper.JSONMapper;\nimport com.admin4j.json.test.entity.User;\nimport org.junit.Test;\n\nimport java.util.Map;\n\n/**", "\n/**\n * @author andanyang\n * @since 2023/5/5 15:35\n */\npublic class JSONTest {\n\n    @Test\n    public void testToJSONString() throws Exception {\n\n        User admin4j = new User(\"admin4j\", 18);\n        String jsonString = JSONUtil.toJSONString(admin4j);\n        System.out.println(\"jsonString = \" + jsonString);\n    }\n\n    @Test", "    public void testToJSONString() throws Exception {\n\n        User admin4j = new User(\"admin4j\", 18);\n        String jsonString = JSONUtil.toJSONString(admin4j);\n        System.out.println(\"jsonString = \" + jsonString);\n    }\n\n    @Test\n    public void testParseObject() throws Exception {\n\n        String json = \"{\\\"age\\\":18,\\\"name\\\":\\\"admin4j\\\"}\";\n        User user = JSONUtil.parseObject(json, User.class);\n        System.out.println(\"user = \" + user);\n    }\n\n    @Test", "    public void testParseObject() throws Exception {\n\n        String json = \"{\\\"age\\\":18,\\\"name\\\":\\\"admin4j\\\"}\";\n        User user = JSONUtil.parseObject(json, User.class);\n        System.out.println(\"user = \" + user);\n    }\n\n    @Test\n    public void testParseMap() throws Exception {\n\n        String json = \"{\\\"age\\\":18,\\\"name\\\":\\\"admin4j\\\"}\";\n        Map<String, Object> stringObjectMap = JSONUtil.parseMap(json);\n        System.out.println(\"stringObjectMap = \" + stringObjectMap);\n    }\n\n    @Test", "    public void testParseMap() throws Exception {\n\n        String json = \"{\\\"age\\\":18,\\\"name\\\":\\\"admin4j\\\"}\";\n        Map<String, Object> stringObjectMap = JSONUtil.parseMap(json);\n        System.out.println(\"stringObjectMap = \" + stringObjectMap);\n    }\n\n    @Test\n    public void getJSONArrayMapper() throws Exception {\n\n        String json = \"{\\\"code\\\":0,\\\"message\\\":\\\"success\\\",\\\"error_details\\\":[],\\\"data\\\":[{\\\"wid\\\":985723,\\\"type\\\":3,\\\"name\\\":\\\"5636\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618640,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u4e1cNJJW\u4e09\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618639,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u4e1cNJJW\u4e8c\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618638,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u5357GAJW\u4e09\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618641,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u5357TXJW\u4e00\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618635,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u4e00\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618636,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u4e8c\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618637,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u56db\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618811,\\\"type\\\":3,\\\"name\\\":\\\"\u6613\u8fbe\u4e91 \u5fb7\u56fd6\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617839,\\\"type\\\":3,\\\"name\\\":\\\"\u6613\u8fbe\u4e91\u82f1\u56fdM2\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617773,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79-\u5f90\u8fbe MIRALOMA\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617774,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79-\u5f90\u8fbe NJCB\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617663,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feCAMR\u7f8e\u897f\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617771,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feCAMR\u7f8e\u897f\u4ed3\uff08\u4e50\u613f7\uff09\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617664,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feGANW\u7f8e\u5357\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617665,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feNJCB\u7f8e\u4e1c\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617772,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feNJCB\u7f8e\u4e1c\u4ed3\uff08\u4e50\u613f7\uff09\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617776,\\\"type\\\":3,\\\"name\\\":\\\"\u8c37\u4ed3\u5fb7\u56fd5\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617775,\\\"type\\\":3,\\\"name\\\":\\\"\u8c37\u4ed3\u82f1\u56fd\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617674,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u5fb7\u56fd\u4e0d\u83b1\u6885\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617673,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u5fb7\u56fd\u6cd5\u5170\u514b\u798f2\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617672,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u82f1\u56fd\u83b1\u5207\u65af\u7279\u4ed3\\\",\\\"is_delete\\\":0}],\\\"total\\\":0}\";\n        JSONMapper jsonMapper = JSONUtil.parseMapper(json);\n        System.out.println(\"data = \" + jsonMapper.getJSONArrayMapper(\"data\"));\n        Long wid = jsonMapper.getJSONArrayMapper(\"data\").getMapper(0).getLong(\"wid\");\n        System.out.println(\"wid = \" + wid);\n        assert wid == 985723;\n    }\n}\n", "    public void getJSONArrayMapper() throws Exception {\n\n        String json = \"{\\\"code\\\":0,\\\"message\\\":\\\"success\\\",\\\"error_details\\\":[],\\\"data\\\":[{\\\"wid\\\":985723,\\\"type\\\":3,\\\"name\\\":\\\"5636\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618640,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u4e1cNJJW\u4e09\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618639,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u4e1cNJJW\u4e8c\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618638,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u5357GAJW\u4e09\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618641,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u5357TXJW\u4e00\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618635,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u4e00\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618636,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u4e8c\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618637,\\\"type\\\":3,\\\"name\\\":\\\"\u65e0\u5fe7\u8fbe\u7f8e\u897fCAJW\u56db\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":618811,\\\"type\\\":3,\\\"name\\\":\\\"\u6613\u8fbe\u4e91 \u5fb7\u56fd6\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617839,\\\"type\\\":3,\\\"name\\\":\\\"\u6613\u8fbe\u4e91\u82f1\u56fdM2\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617773,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79-\u5f90\u8fbe MIRALOMA\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617774,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79-\u5f90\u8fbe NJCB\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617663,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feCAMR\u7f8e\u897f\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617771,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feCAMR\u7f8e\u897f\u4ed3\uff08\u4e50\u613f7\uff09\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617664,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feGANW\u7f8e\u5357\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617665,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feNJCB\u7f8e\u4e1c\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617772,\\\"type\\\":3,\\\"name\\\":\\\"\u730e\u8c79\u4f9b\u5e94\u94feNJCB\u7f8e\u4e1c\u4ed3\uff08\u4e50\u613f7\uff09\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617776,\\\"type\\\":3,\\\"name\\\":\\\"\u8c37\u4ed3\u5fb7\u56fd5\u53f7\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617775,\\\"type\\\":3,\\\"name\\\":\\\"\u8c37\u4ed3\u82f1\u56fd\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617674,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u5fb7\u56fd\u4e0d\u83b1\u6885\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617673,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u5fb7\u56fd\u6cd5\u5170\u514b\u798f2\u4ed3\\\",\\\"is_delete\\\":0},{\\\"wid\\\":617672,\\\"type\\\":3,\\\"name\\\":\\\"\u9012\u56db\u65b9\u82f1\u56fd\u83b1\u5207\u65af\u7279\u4ed3\\\",\\\"is_delete\\\":0}],\\\"total\\\":0}\";\n        JSONMapper jsonMapper = JSONUtil.parseMapper(json);\n        System.out.println(\"data = \" + jsonMapper.getJSONArrayMapper(\"data\"));\n        Long wid = jsonMapper.getJSONArrayMapper(\"data\").getMapper(0).getLong(\"wid\");\n        System.out.println(\"wid = \" + wid);\n        assert wid == 985723;\n    }\n}\n"]}
{"filename": "admin4j-json-test/src/main/java/com/admin4j/json/test/entity/User.java", "chunked_list": ["package com.admin4j.json.test.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author andanyang\n * @since 2023/5/5 15:36\n */", " * @since 2023/5/5 15:36\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n    private String name;\n    private Integer age;\n}\n"]}
