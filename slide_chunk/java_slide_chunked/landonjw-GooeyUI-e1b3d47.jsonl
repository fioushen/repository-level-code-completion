{"filename": "forge/src/main/java/dev/landonjw/gooeyui/forge/GooeyUIForge.java", "chunked_list": ["package dev.landonjw.gooeyui.forge;\n\nimport dev.landonjw.gooeyui.GooeyUI;\nimport net.minecraftforge.fml.common.Mod;\n\n@Mod(GooeyUI.MOD_ID)\npublic class GooeyUIForge {\n\n    public GooeyUIForge() {\n        GooeyUI.init();\n    }\n\n}\n"]}
{"filename": "common/src/test/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/parser/DeluxeMenuCommandParsingServiceTest.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.parser;\n\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.decorators.DeluxeMenuCommandDecoratorParser;\nimport org.apache.logging.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.mockito.Mock;", "import org.junit.jupiter.params.provider.ValueSource;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;", "import static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\nclass DeluxeMenuCommandParsingServiceTest {\n\n    @Mock\n    Logger logger;\n\n    @Test\n    public void parse_KnownCommand_ReturnsCommand() {\n        DeluxeMenuCommand command = mock(DeluxeMenuCommand.class);\n        var commandParsers = getTestCommandParserMap(command);\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        var result = service.parse(\"[test]\");\n\n        assertTrue(result.isPresent());\n        assertEquals(command, result.get());\n    }\n\n    @Test", "\n    @Test\n    public void parse_KnownCommand_ReturnsCommand() {\n        DeluxeMenuCommand command = mock(DeluxeMenuCommand.class);\n        var commandParsers = getTestCommandParserMap(command);\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        var result = service.parse(\"[test]\");\n\n        assertTrue(result.isPresent());\n        assertEquals(command, result.get());\n    }\n\n    @Test", "    public void parse_UnknownCommand_ReturnsEmptyOptional() {\n        Map<String, DeluxeMenuCommandParser> commandParsers = new HashMap<>();\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        var result = service.parse(\"[test]\");\n\n        assertTrue(result.isEmpty());\n    }\n\n    @Test", "    public void parse_UnknownCommand_LogsWarning() {\n        Map<String, DeluxeMenuCommandParser> commandParsers = new HashMap<>();\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        service.parse(\"[test]\");\n\n        verify(logger, times(1)).warn(\"No command parser registered for type 'test' in input '[test]'\");\n    }\n\n    @Test", "    public void parse_NoCommand_LogsWarning() {\n        Map<String, DeluxeMenuCommandParser> commandParsers = new HashMap<>();\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        service.parse(\"abc\");\n\n        verify(logger, times(1)).warn(\"Could not find command in input 'abc'\");\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\n            \"[test] abcdef <foo=bar>\",\n            \"[test]abcdef<foo=bar>\",\n            \"[test]   abcdef     <foo=bar>\",\n    })", "    public void parse_KnownCommand_PassesStrippedArgumentToCommand(String input) {\n        DeluxeMenuCommandParser parser = mock(DeluxeMenuCommandParser.class);\n        Map<String, DeluxeMenuCommandParser> commandParsers = new HashMap<>();\n        commandParsers.put(\"test\", parser);\n        Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers = new HashMap<>();\n        var service = new DeluxeMenuCommandParsingService(logger, commandParsers, decoratorParsers);\n\n        service.parse(input);\n\n        verify(parser, times(1)).parse(\"abcdef\");\n    }\n\n    private Map<String, DeluxeMenuCommandParser> getTestCommandParserMap(DeluxeMenuCommand command) {\n        DeluxeMenuCommandParser parser = mock(DeluxeMenuCommandParser.class);\n        when(parser.parse(any())).thenReturn(Optional.of(command));\n        Map<String, DeluxeMenuCommandParser> parsers = new HashMap<>();\n        parsers.put(\"test\", parser);\n        return parsers;\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/GooeyUI.java", "chunked_list": ["package dev.landonjw.gooeyui;\n\nimport dev.architectury.event.events.common.CommandRegistrationEvent;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class GooeyUI {\n\n    public static final String MOD_ID = \"gooeyui\";\n    private static final Logger logger = LogManager.getLogger();\n", "    public static final String MOD_ID = \"gooeyui\";\n    private static final Logger logger = LogManager.getLogger();\n\n    public static void init() {\n        logger.info(\"Initialized\");\n        CommandRegistrationEvent.EVENT.register((dispatcher, registry, selection) -> {\n            \n        });\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/DeluxeMenuGuiConfig.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu;\n\nimport ca.landonjw.gooeylibs2.api.page.Page;\nimport dev.landonjw.gooeyui.configuration.GuiConfig;\nimport org.apache.logging.log4j.Logger;\n\npublic class DeluxeMenuGuiConfig implements GuiConfig {\n\n    private final Logger logger;\n\n    public DeluxeMenuGuiConfig(Logger logger) {\n        this.logger = logger;\n    }\n\n    @Override", "    public Page toPage() {\n        return null;\n    }\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/DeluxeMenuItem.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu;\n\nimport ca.landonjw.gooeylibs2.api.button.ButtonAction;\nimport ca.landonjw.gooeylibs2.api.button.ButtonClick;\nimport ca.landonjw.gooeylibs2.api.data.UpdateEmitter;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.requirement.DeluxeMenuRequirement;\nimport net.minecraft.server.level.ServerPlayer;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.ItemStack;\n", "import net.minecraft.world.item.ItemStack;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class DeluxeMenuItem extends UpdateEmitter<DeluxeMenuItem> {\n\n    private final Item material;\n    private final int data;\n    private final boolean updateInterval;\n    private final List<DeluxeMenuRequirement> viewRequirements;\n    private final Map<ButtonClick, List<DeluxeMenuRequirement>> clickRequirements;\n\n    public DeluxeMenuItem(Item material,\n                          int data,\n                          boolean updateInterval,\n                          List<DeluxeMenuRequirement> viewRequirements,\n                          Map<ButtonClick, List<DeluxeMenuRequirement>> clickRequirements) {\n        this.material = material;\n        this.data = data;\n        this.updateInterval = updateInterval;\n        this.viewRequirements = viewRequirements;\n        this.clickRequirements = clickRequirements;\n    }\n", "    public ItemStack toItemStack() {\n        return null; // TODO\n    }\n\n    public boolean canView(ServerPlayer player) {\n        for (DeluxeMenuRequirement requirement : viewRequirements) {\n            if (!requirement.test(player)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public void onClick(ButtonAction action) {\n        ButtonClick clickType = action.getClickType();\n        List<DeluxeMenuRequirement> requirements = clickRequirements.get(clickType);\n        if (requirements == null) return;\n\n\n    }\n\n    private void runDenyCommands(ButtonAction action) {\n\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/DeluxeMenuButton.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu;\n\nimport ca.landonjw.gooeylibs2.api.button.Button;\nimport ca.landonjw.gooeylibs2.api.button.ButtonAction;\nimport ca.landonjw.gooeylibs2.api.data.UpdateEmitter;\nimport net.minecraft.world.item.ItemStack;\nimport org.checkerframework.checker.nullness.qual.NonNull;\n\nimport java.util.List;\n\npublic class DeluxeMenuButton extends UpdateEmitter<Button> implements Button {\n\n    private final List<DeluxeMenuItem> possibleItemViews;\n    private DeluxeMenuItem currentItemView;\n\n    public DeluxeMenuButton(List<DeluxeMenuItem> possibleItemViews) {\n        // TODO: Sort by priority\n        this.possibleItemViews = possibleItemViews;\n    }\n\n    @Override", "import java.util.List;\n\npublic class DeluxeMenuButton extends UpdateEmitter<Button> implements Button {\n\n    private final List<DeluxeMenuItem> possibleItemViews;\n    private DeluxeMenuItem currentItemView;\n\n    public DeluxeMenuButton(List<DeluxeMenuItem> possibleItemViews) {\n        // TODO: Sort by priority\n        this.possibleItemViews = possibleItemViews;\n    }\n\n    @Override", "    public ItemStack getDisplay() {\n        return (currentItemView != null) ? currentItemView.toItemStack() : ItemStack.EMPTY;\n    }\n\n    @Override\n    public void onClick(@NonNull ButtonAction action) {\n\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/DeluxeMenuGuiConfigAdapter.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu;\n\nimport ca.landonjw.gooeylibs2.api.button.Button;\nimport dev.landonjw.gooeyui.configuration.GuiConfigAdapter;\nimport dev.landonjw.gooeyui.configuration.GuiConfig;\nimport org.apache.logging.log4j.Logger;\nimport org.spongepowered.configurate.CommentedConfigurationNode;\nimport org.spongepowered.configurate.yaml.YamlConfigurationLoader;\n\nimport java.io.File;", "\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;\n\npublic class DeluxeMenuGuiConfigAdapter implements GuiConfigAdapter {\n\n    private final Logger logger;\n\n    public DeluxeMenuGuiConfigAdapter(Logger logger) {\n        this.logger = logger;\n    }\n\n    @Override\n    public CompletableFuture<Optional<GuiConfig>> parse(File file) {\n        return CompletableFuture.supplyAsync(() -> {\n            CommentedConfigurationNode rootNode = loadFile(file);", "            if (rootNode == null) return Optional.empty();\n\n            // TODO Properly parse into DeluxeMenuGuiConfig\n            return Optional.empty();\n        });\n    }\n\n    private CommentedConfigurationNode loadFile(File file) {\n        try {\n            return YamlConfigurationLoader.builder()\n                    .file(file)\n                    .build()\n                    .load();\n        }\n        catch (IOException ex)\n        {\n            logger.error(\"Error occurred while loading configuration file '\" + file.getPath() + \"'\", ex);\n            return null;\n        }\n    }\n\n    private List<Button> parseButtons() {\n        return null;\n    }\n}", "        try {\n            return YamlConfigurationLoader.builder()\n                    .file(file)\n                    .build()\n                    .load();\n        }\n        catch (IOException ex)\n        {\n            logger.error(\"Error occurred while loading configuration file '\" + file.getPath() + \"'\", ex);\n            return null;\n        }\n    }\n\n    private List<Button> parseButtons() {\n        return null;\n    }\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/DeluxeMenuCommand.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands;\n\nimport net.minecraft.server.level.ServerPlayer;\n\npublic interface DeluxeMenuCommand {\n    void run(ServerPlayer player);\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/parser/DeluxeMenuCloseGuiCommandParser.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.parser;\n\nimport ca.landonjw.gooeylibs2.api.UIManager;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\n\nimport java.util.Optional;\n\npublic class DeluxeMenuCloseGuiCommandParser implements DeluxeMenuCommandParser {\n\n    @Override\n    public Optional<DeluxeMenuCommand> parse(String input) {\n        return Optional.of(UIManager::closeUI);\n    }\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/parser/DeluxeMenuRefreshGuiCommandParser.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.parser;\n\nimport ca.landonjw.gooeylibs2.api.UIManager;\nimport ca.landonjw.gooeylibs2.api.container.GooeyContainer;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\nimport net.minecraft.server.level.ServerPlayer;\n\nimport java.util.Optional;\n\npublic class DeluxeMenuRefreshGuiCommandParser implements DeluxeMenuCommandParser {\n\n    @Override\n    public Optional<DeluxeMenuCommand> parse(String input) {\n        return Optional.of(this::refreshPage);\n    }\n\n    private void refreshPage(ServerPlayer player) {", "\npublic class DeluxeMenuRefreshGuiCommandParser implements DeluxeMenuCommandParser {\n\n    @Override\n    public Optional<DeluxeMenuCommand> parse(String input) {\n        return Optional.of(this::refreshPage);\n    }\n\n    private void refreshPage(ServerPlayer player) {\n        if (player.containerMenu instanceof GooeyContainer gooeyContainer) {\n            var page = gooeyContainer.getPage();\n            UIManager.openUIForcefully(player, page);\n        }\n    }\n\n}\n", "        if (player.containerMenu instanceof GooeyContainer gooeyContainer) {\n            var page = gooeyContainer.getPage();\n            UIManager.openUIForcefully(player, page);\n        }\n    }\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/parser/DeluxeMenuCommandParsingService.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.parser;\n\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.decorators.DeluxeMenuCommandDecoratorParser;\nimport org.apache.logging.log4j.Logger;\n\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.regex.Pattern;\n\npublic class DeluxeMenuCommandParsingService {\n\n    private final Logger logger;\n    private final Map<String, DeluxeMenuCommandParser> commandParsers;\n    private final Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers;\n\n    private final Pattern COMMAND_LOCATOR = Pattern.compile(\"\\\\[(\\\\w+)\\\\]\\\\s*(\\\\w+)?\\\\s*(<.*>)*\");\n    private final Pattern DECORATOR_ARG_LOCATOR = Pattern.compile(\"\\\\<(\\\\w+)=(\\\\w+)\\\\>\");\n\n    public DeluxeMenuCommandParsingService(Logger logger,\n                                           Map<String, DeluxeMenuCommandParser> parsersByCommandType,\n                                           Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers) {\n        this.logger = logger;\n        this.commandParsers = parsersByCommandType;\n        this.decoratorParsers = decoratorParsers;\n    }\n\n    public Optional<DeluxeMenuCommand> parse(String input) {\n        var matcher = COMMAND_LOCATOR.matcher(input);", "import java.util.regex.Pattern;\n\npublic class DeluxeMenuCommandParsingService {\n\n    private final Logger logger;\n    private final Map<String, DeluxeMenuCommandParser> commandParsers;\n    private final Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers;\n\n    private final Pattern COMMAND_LOCATOR = Pattern.compile(\"\\\\[(\\\\w+)\\\\]\\\\s*(\\\\w+)?\\\\s*(<.*>)*\");\n    private final Pattern DECORATOR_ARG_LOCATOR = Pattern.compile(\"\\\\<(\\\\w+)=(\\\\w+)\\\\>\");\n\n    public DeluxeMenuCommandParsingService(Logger logger,\n                                           Map<String, DeluxeMenuCommandParser> parsersByCommandType,\n                                           Map<String, DeluxeMenuCommandDecoratorParser> decoratorParsers) {\n        this.logger = logger;\n        this.commandParsers = parsersByCommandType;\n        this.decoratorParsers = decoratorParsers;\n    }\n\n    public Optional<DeluxeMenuCommand> parse(String input) {\n        var matcher = COMMAND_LOCATOR.matcher(input);", "        if (!matcher.find()) {\n            logger.warn(\"Could not find command in input '\" + input + \"'\");\n            return Optional.empty();\n        }\n\n        var commandType = matcher.group(1);\n        var commandArgs = matcher.group(2);\n        var decorators = matcher.group(3);\n        var parser = commandParsers.get(commandType);\n\n        if (parser == null) {\n            logger.warn(\"No command parser registered for type '\" + commandType + \"' in input '\" + input + \"'\");\n            return Optional.empty();\n        }\n\n        Optional<DeluxeMenuCommand> command = parser.parse(commandArgs);\n", "        if (parser == null) {\n            logger.warn(\"No command parser registered for type '\" + commandType + \"' in input '\" + input + \"'\");\n            return Optional.empty();\n        }\n\n        Optional<DeluxeMenuCommand> command = parser.parse(commandArgs);\n\n        if (command.isEmpty() || decorators == null) return command;\n\n        DeluxeMenuCommand decoratedCommand = parseDecorators(command.get(), decorators);\n        return Optional.of(decoratedCommand);\n    }\n\n    private DeluxeMenuCommand parseDecorators(DeluxeMenuCommand command, String input) {\n        var matcher = DECORATOR_ARG_LOCATOR.matcher(input);\n\n        /* Any time a decorator parser is found, the current decoratedCommand is decorated and reassigned to the result.\n           If no parser is found, this will simply be the initial command given in the function parameters.\n         */\n        var decoratedCommand = command;", "        while (matcher.find()) {\n            var decoratorType = matcher.group(1);\n            var decoratorArgs = matcher.group(2);\n\n            var decoratorParser = decoratorParsers.get(decoratorType);\n            if (decoratorParser == null) {\n                logger.warn(\"No decorator parser registered for type '\" + decoratorType + \"' in input '\" + input + \"'\");\n            }\n            else {\n                var maybeDecorator = decoratorParser.parse(decoratedCommand, decoratorArgs);\n                if (maybeDecorator.isPresent()) {\n                    decoratedCommand = maybeDecorator.get();\n                }\n            }\n        }\n        return decoratedCommand;\n    }\n\n}", "                if (maybeDecorator.isPresent()) {\n                    decoratedCommand = maybeDecorator.get();\n                }\n            }\n        }\n        return decoratedCommand;\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/parser/DeluxeMenuCommandParser.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.parser;\n\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\n\nimport java.util.Optional;\n\npublic interface DeluxeMenuCommandParser {\n    Optional<DeluxeMenuCommand> parse(String input);\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/decorators/DelayCommandDecorator.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.decorators;\n\nimport ca.landonjw.gooeylibs2.api.tasks.Task;\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\nimport net.minecraft.server.level.ServerPlayer;\n\npublic class DelayCommandDecorator implements DeluxeMenuCommand {\n\n    private final DeluxeMenuCommand command;\n    private final long delayTicks;\n\n    public DelayCommandDecorator(DeluxeMenuCommand command, long delayTicks) {\n        this.command = command;\n        this.delayTicks = delayTicks;\n    }\n\n    @Override", "    public void run(ServerPlayer player) {\n        Task.builder()\n                .delay(delayTicks)\n                .execute(() -> command.run(player))\n                .build();\n    }\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/decorators/DeluxeMenuCommandDecoratorParser.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.decorators;\n\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\n\nimport java.util.Optional;\n\npublic interface DeluxeMenuCommandDecoratorParser {\n    Optional<DeluxeMenuCommand> parse(DeluxeMenuCommand command, String input);\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/commands/decorators/ChanceCommandDecorator.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.commands.decorators;\n\nimport dev.landonjw.gooeyui.adapter.deluxemenu.commands.DeluxeMenuCommand;\nimport net.minecraft.server.level.ServerPlayer;\n\nimport java.util.Random;\n\npublic class ChanceCommandDecorator implements DeluxeMenuCommand {\n\n    private final DeluxeMenuCommand command;\n    private final double chance;\n    private final Random random;\n\n    public ChanceCommandDecorator(DeluxeMenuCommand command, double chance, Random random) {\n        this.command = command;\n        this.chance = chance;\n        this.random = random;\n    }\n\n    @Override", "    public void run(ServerPlayer player) {\n        if (random.nextDouble() < chance) {\n            command.run(player);\n        }\n    }\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/requirement/DeluxeMenuRequirement.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.requirement;\n\nimport net.minecraft.server.level.ServerPlayer;\n\npublic interface DeluxeMenuRequirement {\n    boolean test(ServerPlayer player);\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/adapter/deluxemenu/requirement/DeluxeMenuRequirements.java", "chunked_list": ["package dev.landonjw.gooeyui.adapter.deluxemenu.requirement;\n\nimport net.minecraft.world.item.ItemStack;\nimport org.apache.logging.log4j.Logger;\n\npublic class DeluxeMenuRequirements {\n\n    private final double DOUBLE_COMPARISON_EPSILON = 0.000001d;\n\n    private final Logger logger;\n\n    public DeluxeMenuRequirements(Logger logger) {\n        this.logger = logger;\n    }\n", "    public DeluxeMenuRequirement not(DeluxeMenuRequirement requirement) {\n        return (player) -> !requirement.test(player);\n    }\n\n    public DeluxeMenuRequirement or(DeluxeMenuRequirement a, DeluxeMenuRequirement b) {\n        return (player) -> a.test(player) || b.test(player);\n    }\n\n    public DeluxeMenuRequirement and(DeluxeMenuRequirement a, DeluxeMenuRequirement b) {\n        return (player) -> a.test(player) && b.test(player);\n    }\n", "    public DeluxeMenuRequirement and(DeluxeMenuRequirement a, DeluxeMenuRequirement b) {\n        return (player) -> a.test(player) && b.test(player);\n    }\n\n    public DeluxeMenuRequirement hasPermission(String permission) {\n        // TODO: Money support\n        return (player) -> {\n            return true;\n        };\n    }\n", "    public DeluxeMenuRequirement hasMoney() {\n        return (player) -> {\n            // TODO: Currency support\n            return true;\n        };\n    }\n\n    public DeluxeMenuRequirement hasItem(ItemStack itemStack) {\n        return (player) -> player.getInventory().contains(itemStack);\n    }\n", "    public DeluxeMenuRequirement javascript(String expression) {\n        // TODO: JavaScript support\n        return (player) -> {\n            return true;\n        };\n    }\n\n    public DeluxeMenuRequirement stringEquals(String input, String output) {\n        return (player) -> input.equals(output);\n    }\n", "    public DeluxeMenuRequirement stringEqualsIgnoreCase(String input, String output) {\n        return (player) -> input.equalsIgnoreCase(output);\n    }\n\n    public DeluxeMenuRequirement stringContains(String input, String output) {\n        return (player) -> output.contains(input);\n    }\n\n    public DeluxeMenuRequirement equal(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);", "    public DeluxeMenuRequirement equal(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);\n            if (inputNum == null || outputNum == null) return false;\n            return Math.abs(inputNum - outputNum) < DOUBLE_COMPARISON_EPSILON;\n        };\n    }\n\n    public DeluxeMenuRequirement greaterThan(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);", "    public DeluxeMenuRequirement greaterThan(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);\n            if (inputNum == null || outputNum == null) return false;\n            return inputNum > outputNum;\n        };\n    }\n\n    public DeluxeMenuRequirement lessThan(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);", "    public DeluxeMenuRequirement lessThan(String input, String output) {\n        return (player) -> {\n            Double inputNum = tryParseDouble(input);\n            Double outputNum = tryParseDouble(output);\n            if (inputNum == null || outputNum == null) return false;\n            return inputNum < outputNum;\n        };\n    }\n\n    public DeluxeMenuRequirement greaterThanOrEqual(String input, String output) {\n        return or(greaterThan(input, output), equal(input, output));\n    }\n", "    public DeluxeMenuRequirement greaterThanOrEqual(String input, String output) {\n        return or(greaterThan(input, output), equal(input, output));\n    }\n\n    public DeluxeMenuRequirement lessThanOrEqual(String input, String output) {\n        return or(lessThan(input, output), equal(input, output));\n    }\n\n    private Double tryParseDouble(String maybeDouble) {\n        try {\n            return Double.parseDouble(maybeDouble);\n        }\n        catch (NumberFormatException ex) {\n            logger.error(\"Failed to coerce input '\" + maybeDouble + \"' into a double.\");\n            return null;\n        }\n    }\n\n}", "        try {\n            return Double.parseDouble(maybeDouble);\n        }\n        catch (NumberFormatException ex) {\n            logger.error(\"Failed to coerce input '\" + maybeDouble + \"' into a double.\");\n            return null;\n        }\n    }\n\n}"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/configuration/GuiConfigAdapter.java", "chunked_list": ["package dev.landonjw.gooeyui.configuration;\n\nimport dev.landonjw.gooeyui.configuration.GuiConfig;\n\nimport java.io.File;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;\n\npublic interface GuiConfigAdapter {\n\n    CompletableFuture<Optional<GuiConfig>> parse(File file);\n\n}\n", "public interface GuiConfigAdapter {\n\n    CompletableFuture<Optional<GuiConfig>> parse(File file);\n\n}\n"]}
{"filename": "common/src/main/java/dev/landonjw/gooeyui/configuration/GuiConfig.java", "chunked_list": ["package dev.landonjw.gooeyui.configuration;\n\nimport ca.landonjw.gooeylibs2.api.page.Page;\n\npublic interface GuiConfig {\n\n    Page toPage();\n\n}"]}
{"filename": "fabric/src/main/java/dev/landonjw/gooeyui/fabric/GooeyUIFabric.java", "chunked_list": ["package dev.landonjw.gooeyui.fabric;\n\nimport dev.landonjw.gooeyui.GooeyUI;\nimport net.fabricmc.api.ModInitializer;\n\npublic class GooeyUIFabric implements ModInitializer {\n    @Override\n    public void onInitialize() {\n        GooeyUI.init();\n    }\n}\n"]}
