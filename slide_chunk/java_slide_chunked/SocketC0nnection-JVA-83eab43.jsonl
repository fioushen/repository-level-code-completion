{"filename": "src/main/java/net/socketconnection/jva/ValorantAPI.java", "chunked_list": ["package net.socketconnection.jva;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.enums.Language;\nimport net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.exceptions.*;\nimport net.socketconnection.jva.models.Version;", "import net.socketconnection.jva.exceptions.*;\nimport net.socketconnection.jva.models.Version;\nimport net.socketconnection.jva.models.WebsiteArticle;\nimport net.socketconnection.jva.models.shop.Bundle;\nimport net.socketconnection.jva.models.shop.ContentTier;\nimport net.socketconnection.jva.models.shop.item.BundleItem;\nimport net.socketconnection.jva.models.shop.item.Item;\nimport net.socketconnection.jva.models.shop.item.OfferItem;\nimport net.socketconnection.jva.models.status.ServerStatus;\nimport net.socketconnection.jva.models.status.StatusEntry;", "import net.socketconnection.jva.models.status.ServerStatus;\nimport net.socketconnection.jva.models.status.StatusEntry;\nimport net.socketconnection.jva.models.status.Update;\nimport net.socketconnection.jva.player.LeaderboardPlayer;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;", "import java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ValorantAPI {\n\n    private final URL baseUrl;\n    private final String apiKey;\n\n    public ValorantAPI(String apiKey) throws IOException {\n        baseUrl = new URL(\"https://api.henrikdev.xyz/valorant\");\n        this.apiKey = apiKey;\n    }\n\n    public ValorantAPI() throws IOException {\n        this(null);\n    }\n\n    public List<LeaderboardPlayer> getLeaderboard(Region region, String riotId) throws IOException {\n        JsonArray leaderboardData;\n", "public class ValorantAPI {\n\n    private final URL baseUrl;\n    private final String apiKey;\n\n    public ValorantAPI(String apiKey) throws IOException {\n        baseUrl = new URL(\"https://api.henrikdev.xyz/valorant\");\n        this.apiKey = apiKey;\n    }\n\n    public ValorantAPI() throws IOException {\n        this(null);\n    }\n\n    public List<LeaderboardPlayer> getLeaderboard(Region region, String riotId) throws IOException {\n        JsonArray leaderboardData;\n", "        if(riotId == null) {\n            leaderboardData = sendRestRequest(\"/v1/leaderboard/\" + region.getQuery()).getAsJsonArray();\n        } else {\n            if(!riotId.contains(\"#\") || riotId.split(\"#\").length < 2) {\n                throw new InvalidRiotIdentificationException(\"Unknown format (right format: NAME#TAG)\");\n            }\n\n            String[] data = riotId.split(\"#\");\n\n            leaderboardData = sendRestRequest(\"/v1/leaderboard/\" + region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();\n        }\n\n        List<LeaderboardPlayer> leaderboard = new LinkedList<>();\n", "        for(JsonElement element : leaderboardData) {\n            leaderboard.add(new LeaderboardPlayer(this).fetchData(element.getAsJsonObject()));\n        }\n\n        return leaderboard;\n    }\n\n    public List<LeaderboardPlayer> getLeaderboard(Region region) throws IOException {\n        return getLeaderboard(region, null);\n    }\n", "    public ServerStatus getServerStatus(Region region) throws IOException {\n        JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");\n\n        JsonArray maintenancesData = statusData.getAsJsonArray(\"maintenances\");\n        JsonArray incidentsData = statusData.getAsJsonArray(\"incidents\");\n\n        List<StatusEntry> maintenances = new LinkedList<>();\n        List<StatusEntry> incidents = new LinkedList<>();\n\n        for(JsonElement maintenanceElement : maintenancesData) {\n            JsonObject maintenanceObject = maintenanceElement.getAsJsonObject();\n            List<Update> updates = new LinkedList<>();\n", "        for(JsonElement maintenanceElement : maintenancesData) {\n            JsonObject maintenanceObject = maintenanceElement.getAsJsonObject();\n            List<Update> updates = new LinkedList<>();\n\n            for(JsonElement updateElement : maintenanceObject.getAsJsonArray(\"updates\")) {\n                JsonObject updateObject = updateElement.getAsJsonObject();\n                Map<Language, String> translations = new LinkedHashMap<>();\n\n                for(JsonElement translationElement : updateObject.getAsJsonArray(\"translations\")) {\n                    JsonObject translationObject = translationElement.getAsJsonObject();\n\n                    translations.put(Language.getFromLocale(GsonUtils.getAsString(translationObject.get(\"locale\"))),\n                            GsonUtils.getAsString(translationObject.get(\"content\")));\n                }\n\n                List<String> publishLocations = new LinkedList<>();\n", "                for(JsonElement translationElement : updateObject.getAsJsonArray(\"translations\")) {\n                    JsonObject translationObject = translationElement.getAsJsonObject();\n\n                    translations.put(Language.getFromLocale(GsonUtils.getAsString(translationObject.get(\"locale\"))),\n                            GsonUtils.getAsString(translationObject.get(\"content\")));\n                }\n\n                List<String> publishLocations = new LinkedList<>();\n\n                for(JsonElement publishElement : updateObject.getAsJsonArray(\"publish_locations\")) {\n                    publishLocations.add(GsonUtils.getAsString(publishElement));\n                }\n\n                updates.add(new Update(GsonUtils.getAsString(updateObject.get(\"created_at\")), GsonUtils.getAsString(updateObject.get(\"updated_at\")),\n                        GsonUtils.getAsBoolean(updateObject.get(\"publish\")), GsonUtils.getAsInt(updateObject.get(\"id\")), translations,\n                        publishLocations.toArray(new String[0]), GsonUtils.getAsString(updateObject.get(\"author\"))));\n            }\n\n            List<String> platforms = new LinkedList<>();\n", "                for(JsonElement publishElement : updateObject.getAsJsonArray(\"publish_locations\")) {\n                    publishLocations.add(GsonUtils.getAsString(publishElement));\n                }\n\n                updates.add(new Update(GsonUtils.getAsString(updateObject.get(\"created_at\")), GsonUtils.getAsString(updateObject.get(\"updated_at\")),\n                        GsonUtils.getAsBoolean(updateObject.get(\"publish\")), GsonUtils.getAsInt(updateObject.get(\"id\")), translations,\n                        publishLocations.toArray(new String[0]), GsonUtils.getAsString(updateObject.get(\"author\"))));\n            }\n\n            List<String> platforms = new LinkedList<>();\n", "            for(JsonElement platformElement : maintenanceObject.getAsJsonArray(\"platforms\")) {\n                platforms.add(GsonUtils.getAsString(platformElement));\n            }\n\n            Map<Language, String> titles = new LinkedHashMap<>();\n\n            for(JsonElement titleElement : maintenanceObject.getAsJsonArray(\"titles\")) {\n                JsonObject titleObject = titleElement.getAsJsonObject();\n\n                titles.put(Language.getFromLocale(GsonUtils.getAsString(titleObject.get(\"locale\"))), GsonUtils.getAsString(titleObject.get(\"content\")));\n            }\n\n            maintenances.add(new StatusEntry(GsonUtils.getAsString(maintenanceObject.get(\"created_at\")), GsonUtils.getAsString(maintenanceObject.get(\"archive_at\")),\n                    updates.toArray(new Update[0]), platforms.toArray(new String[0]), GsonUtils.getAsString(maintenanceObject.get(\"updated_at\")),\n                    GsonUtils.getAsInt(maintenanceObject.get(\"id\")), titles, GsonUtils.getAsString(maintenanceObject.get(\"maintenance_status\")),\n                    GsonUtils.getAsString(maintenanceObject.get(\"incident_severity\"))));\n        }\n", "        for(JsonElement incidentElement : incidentsData) {\n            JsonObject incidentObject = incidentElement.getAsJsonObject();\n            List<Update> updates = new LinkedList<>();\n\n            for(JsonElement updateElement : incidentObject.getAsJsonArray(\"updates\")) {\n                JsonObject updateObject = updateElement.getAsJsonObject();\n                Map<Language, String> translations = new LinkedHashMap<>();\n\n                for(JsonElement translationElement : updateObject.getAsJsonArray(\"translations\")) {\n                    JsonObject translationObject = translationElement.getAsJsonObject();\n\n                    translations.put(Language.getFromLocale(GsonUtils.getAsString(translationObject.get(\"locale\"))), GsonUtils.getAsString(translationObject.get(\"content\")));\n                }\n\n                List<String> publishLocations = new LinkedList<>();\n", "                for(JsonElement translationElement : updateObject.getAsJsonArray(\"translations\")) {\n                    JsonObject translationObject = translationElement.getAsJsonObject();\n\n                    translations.put(Language.getFromLocale(GsonUtils.getAsString(translationObject.get(\"locale\"))), GsonUtils.getAsString(translationObject.get(\"content\")));\n                }\n\n                List<String> publishLocations = new LinkedList<>();\n\n                for(JsonElement publishElement : updateObject.getAsJsonArray(\"publish_locations\")) {\n                    publishLocations.add(GsonUtils.getAsString(publishElement));\n                }\n\n                updates.add(new Update(GsonUtils.getAsString(updateObject.get(\"created_at\")), GsonUtils.getAsString(updateObject.get(\"updated_at\")),\n                        GsonUtils.getAsBoolean(updateObject.get(\"publish\")), GsonUtils.getAsInt(updateObject.get(\"id\")), translations,\n                        publishLocations.toArray(new String[0]), GsonUtils.getAsString(updateObject.get(\"author\"))));\n            }\n\n            List<String> platforms = new LinkedList<>();\n", "                for(JsonElement publishElement : updateObject.getAsJsonArray(\"publish_locations\")) {\n                    publishLocations.add(GsonUtils.getAsString(publishElement));\n                }\n\n                updates.add(new Update(GsonUtils.getAsString(updateObject.get(\"created_at\")), GsonUtils.getAsString(updateObject.get(\"updated_at\")),\n                        GsonUtils.getAsBoolean(updateObject.get(\"publish\")), GsonUtils.getAsInt(updateObject.get(\"id\")), translations,\n                        publishLocations.toArray(new String[0]), GsonUtils.getAsString(updateObject.get(\"author\"))));\n            }\n\n            List<String> platforms = new LinkedList<>();\n", "            for(JsonElement platformElement : incidentObject.getAsJsonArray(\"platforms\")) {\n                platforms.add(GsonUtils.getAsString(platformElement));\n            }\n\n            Map<Language, String> titles = new LinkedHashMap<>();\n\n            for(JsonElement titleElement : incidentObject.getAsJsonArray(\"titles\")) {\n                JsonObject titleObject = titleElement.getAsJsonObject();\n\n                titles.put(Language.getFromLocale(GsonUtils.getAsString(titleObject.get(\"locale\"))), GsonUtils.getAsString(titleObject.get(\"content\")));\n            }\n\n            incidents.add(new StatusEntry(GsonUtils.getAsString(incidentObject.get(\"created_at\")), GsonUtils.getAsString(incidentObject.get(\"archive_at\")),\n                    updates.toArray(new Update[0]), platforms.toArray(new String[0]), GsonUtils.getAsString(incidentObject.get(\"updated_at\")),\n                    GsonUtils.getAsInt(incidentObject.get(\"id\")), titles, GsonUtils.getAsString(incidentObject.get(\"maintenance_status\")),\n                    GsonUtils.getAsString(incidentObject.get(\"incident_severity\"))));\n        }\n\n        return new ServerStatus(maintenances.toArray(new StatusEntry[0]), incidents.toArray(new StatusEntry[0]));\n    }\n", "    public Version getVersion(Region region) throws IOException {\n        JsonObject versionData = sendRestRequest(\"/v1/version/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");\n\n        return new Version(GsonUtils.getAsString(versionData.get(\"version\")), GsonUtils.getAsString(versionData.get(\"clientVersion\")),\n                GsonUtils.getAsString(versionData.get(\"branch\")), Region.getFromQuery(GsonUtils.getAsString(versionData.get(\"region\"))));\n    }\n\n    public List<WebsiteArticle> getWebsiteArticles(Language language) throws IOException {\n        JsonArray articleData = sendRestRequest(\"/v1/website/\" + language.getLocaleUrl()).getAsJsonObject().getAsJsonArray(\"data\");\n\n        List<WebsiteArticle> websiteArticles = new LinkedList<>();\n", "        for(JsonElement articleElement : articleData) {\n            JsonObject articleObject = articleElement.getAsJsonObject();\n\n            websiteArticles.add(new WebsiteArticle(GsonUtils.getAsString(articleObject.get(\"banner_url\")), WebsiteArticle.Category.getFromQuery(GsonUtils.getAsString(articleObject.get(\"category\"))),\n                    GsonUtils.getAsString(articleObject.get(\"date\")), GsonUtils.getAsString(articleObject.get(\"external_link\")),\n                    GsonUtils.getAsString(articleObject.get(\"title\")), GsonUtils.getAsString(articleObject.get(\"url\"))));\n        }\n\n        return websiteArticles;\n    }\n\n    public List<Bundle> getStoreBundles() throws IOException {\n        JsonArray bundlesData = sendRestRequest(\"/v2/store-featured\").getAsJsonObject().getAsJsonArray(\"data\");\n\n        List<Bundle> bundles = new LinkedList<>();\n", "        for(JsonElement bundleElement : bundlesData) {\n            JsonObject bundleObject = bundleElement.getAsJsonObject();\n            JsonArray itemData = bundleObject.getAsJsonArray(\"items\");\n\n            List<BundleItem> items = new LinkedList<>();\n\n            for(JsonElement itemElement : itemData) {\n                JsonObject itemObject = itemElement.getAsJsonObject();\n\n                items.add(new BundleItem(GsonUtils.getAsString(itemObject.get(\"uuid\")), GsonUtils.getAsString(itemObject.get(\"name\")),\n                        GsonUtils.getAsString(itemObject.get(\"image\")), Item.Type.getFromQuery(GsonUtils.getAsString(itemObject.get(\"type\"))),\n                        GsonUtils.getAsInt(itemObject.get(\"amount\")), GsonUtils.getAsInt(itemObject.get(\"discount_percent\")),\n                        GsonUtils.getAsInt(itemObject.get(\"base_price\")), GsonUtils.getAsInt(itemObject.get(\"discounted_price\")),\n                        GsonUtils.getAsBoolean(itemObject.get(\"promo_item\"))));\n            }\n\n            bundles.add(new Bundle(GsonUtils.getAsString(bundleObject.get(\"bundle_uuid\")), GsonUtils.getAsInt(bundleObject.get(\"bundle_price\")),\n                    GsonUtils.getAsBoolean(bundleObject.get(\"whole_sale_only\")), items.toArray(new BundleItem[0]), GsonUtils.getAsLong(bundleObject.get(\"seconds_remaining\")),\n                    GsonUtils.getAsString(bundleObject.get(\"expires_at\"))));\n        }\n\n        return bundles;\n    }\n\n    public List<OfferItem> getStoreOffers() throws IOException {\n        JsonArray offersData = sendRestRequest(\"/v2/store-offers\").getAsJsonObject().getAsJsonObject(\"data\").getAsJsonArray(\"offers\");\n\n        List<OfferItem> items = new LinkedList<>();\n", "        for(JsonElement offerElement : offersData) {\n            JsonObject offerObject = offerElement.getAsJsonObject();\n\n            ContentTier contentTier = null;\n\n            if(!offerObject.get(\"content_tier\").isJsonNull()) {\n                JsonObject contentTierObject = offerObject.getAsJsonObject(\"content_tier\");\n\n                contentTier = new ContentTier(GsonUtils.getAsString(contentTierObject.get(\"name\")),\n                        GsonUtils.getAsString(contentTierObject.get(\"dev_name\")), GsonUtils.getAsString(contentTierObject.get(\"icon\")));\n            }\n\n            items.add(new OfferItem(GsonUtils.getAsString(offerObject.get(\"skin_id\")), GsonUtils.getAsString(offerObject.get(\"name\")),\n                    GsonUtils.getAsString(offerObject.get(\"icon\")), Item.Type.getFromQuery(GsonUtils.getAsString(offerObject.get(\"type\"))),\n                    GsonUtils.getAsString(offerObject.get(\"offer_id\")), GsonUtils.getAsInt(offerObject.get(\"cost\")), contentTier));\n        }\n\n        return items;\n    }\n", "    public JsonElement sendRestRequest(String uriPath) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(baseUrl + uriPath).openConnection();\n\n        if(apiKey != null) {\n            connection.setRequestProperty(\"Authorization\", apiKey);\n        }\n\n        connection.setRequestProperty(\"User-Agent\", \"Java Valorant API (JVA)\");\n        connection.setDoInput(true);\n\n        switch (connection.getResponseCode()) {\n            case 200:\n                break;\n            case 403:\n                throw new InvalidAuthenticationException(connection.getResponseMessage());\n            case 404:\n                throw new IncorrectDataException(connection.getResponseMessage());\n            case 429:\n                throw new RateLimitedException(connection.getResponseMessage());\n            default:\n                throw new FetchException(\"Rest API returned unknown error code: \" + connection.getResponseMessage());\n        }\n\n        StringBuilder builder = new StringBuilder();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String msg;\n", "        while ((msg = reader.readLine()) != null) {\n            builder.append(msg).append(\"\\n\");\n        }\n\n        return new Gson().fromJson(builder.toString(), JsonElement.class);\n    }\n\n    public String getApiKey() {\n        return apiKey;\n    }\n", "    public URL getBaseUrl() {\n        return baseUrl;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/player/ValorantPlayer.java", "chunked_list": ["package net.socketconnection.jva.player;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.enums.GameMode;\nimport net.socketconnection.jva.enums.Rank;\nimport net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.exceptions.InvalidRiotIdentificationException;", "import net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.exceptions.InvalidRiotIdentificationException;\nimport net.socketconnection.jva.match.Match;\nimport net.socketconnection.jva.models.player.PlayerCard;\nimport net.socketconnection.jva.models.image.RankImage;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;", "import java.util.LinkedList;\nimport java.util.List;\n\npublic class ValorantPlayer extends Player {\n\n    Region region;\n    int level;\n    PlayerCard playerCard;\n    String lastUpdate;\n    Rank rank;\n    RankImage rankImage;\n    int rankRating;\n    int mmrChange;\n    int elo;\n\n    public ValorantPlayer(ValorantAPI valorantAPI) {\n        super(valorantAPI);\n    }\n", "    public ValorantPlayer fetchData(String username, String tag) throws IOException {\n        this.username = username;\n        this.tag = tag;\n\n        JsonObject accountData = valorantAPI.sendRestRequest(\"/v1/account/\" + username + \"/\" + tag).getAsJsonObject().getAsJsonObject(\"data\");\n\n        playerId = GsonUtils.getAsString(accountData.get(\"puuid\"));\n        region = Region.getFromQuery(GsonUtils.getAsString(accountData.get(\"region\")));\n        level = GsonUtils.getAsInt(accountData.get(\"account_level\"));\n\n        JsonObject cards = accountData.getAsJsonObject(\"card\");\n\n        playerCard = new PlayerCard(GsonUtils.getAsString(cards.get(\"small\")), GsonUtils.getAsString(cards.get(\"large\")),\n                GsonUtils.getAsString(cards.get(\"wide\")), GsonUtils.getAsString(cards.get(\"id\")));\n        lastUpdate = GsonUtils.getAsString(accountData.get(\"last_update\"));\n\n        JsonObject mmrData = valorantAPI.sendRestRequest(\"/v1/mmr/\" + region.getQuery() + \"/\" + username + \"/\" + tag).getAsJsonObject().getAsJsonObject(\"data\");\n\n        rank = Rank.getFromId(GsonUtils.getAsInt(mmrData.get(\"currenttier\")));\n", "        if(!mmrData.get(\"images\").isJsonNull()) {\n            JsonObject ranks = mmrData.getAsJsonObject(\"images\");\n\n            rankImage = new RankImage(GsonUtils.getAsString(ranks.get(\"small\")), GsonUtils.getAsString(ranks.get(\"large\")),\n                    GsonUtils.getAsString(ranks.get(\"triangle_down\")), GsonUtils.getAsString(ranks.get(\"triangle_up\")));\n        }\n\n        rankRating = GsonUtils.getAsInt(mmrData.get(\"ranking_in_tier\"));\n        mmrChange = GsonUtils.getAsInt(mmrData.get(\"mmr_change_to_last_game\"));\n        elo = GsonUtils.getAsInt(mmrData.get(\"elo\"));\n\n        fetched = true;\n\n        return this;\n    }\n", "    public ValorantPlayer fetchData(String riotId) throws IOException {\n        if (!riotId.contains(\"#\") || riotId.split(\"#\").length < 2) {\n            throw new InvalidRiotIdentificationException(\"Unknown format (right format: NAME#TAG)\");\n        }\n\n        String[] data = riotId.split(\"#\");\n\n        return fetchData(data[0], data[1]);\n    }\n\n    public Match[] getMatchHistory(GameMode gameMode) throws IOException {\n        JsonArray matchHistoryData;\n", "        if (gameMode == null) {\n            matchHistoryData = valorantAPI.sendRestRequest(\"/v3/matches/\" + region.getQuery() + \"/\" + username + \"/\" + tag).getAsJsonObject().getAsJsonArray(\"data\");\n        } else {\n            matchHistoryData = valorantAPI.sendRestRequest(\"/v3/matches/\" + region.getQuery() + \"/\" + username + \"/\" + tag + \"?filter=\" + gameMode.getQuery()).getAsJsonObject().getAsJsonArray(\"data\");\n        }\n\n        List<Match> matches = new LinkedList<>();\n\n        for (JsonElement element : matchHistoryData) {\n            matches.add(new Match(valorantAPI).fetchData(element.getAsJsonObject()));\n        }\n\n        return matches.toArray(new Match[0]);\n    }\n\n    public Match[] getMatchHistory() throws IOException {\n        return getMatchHistory(null);\n    }\n", "        for (JsonElement element : matchHistoryData) {\n            matches.add(new Match(valorantAPI).fetchData(element.getAsJsonObject()));\n        }\n\n        return matches.toArray(new Match[0]);\n    }\n\n    public Match[] getMatchHistory() throws IOException {\n        return getMatchHistory(null);\n    }\n", "    public MatchPlayer getMatchPlayer(String matchId) throws IOException {\n        Match match = new Match(valorantAPI).fetchData(matchId);\n\n        for (MatchPlayer player : match.getPlayers()) {\n            if (!player.getPlayerId().equals(playerId)) {\n                continue;\n            }\n\n            return player;\n        }\n\n        return null;\n    }\n", "    public int getElo() {\n        return elo;\n    }\n\n    public int getMmrChange() {\n        return mmrChange;\n    }\n\n    public int getRankRating() {\n        return rankRating;\n    }\n", "    public int getRankRating() {\n        return rankRating;\n    }\n\n    public RankImage getRankImage() {\n        return rankImage;\n    }\n\n    public Rank getRank() {\n        return rank;\n    }\n", "    public Rank getRank() {\n        return rank;\n    }\n\n    public String getLastUpdate() {\n        return lastUpdate;\n    }\n\n    public PlayerCard getPlayerCard() {\n        return playerCard;\n    }\n", "    public PlayerCard getPlayerCard() {\n        return playerCard;\n    }\n\n    public int getLevel() {\n        return level;\n    }\n\n    public Region getRegion() {\n        return region;\n    }\n\n}\n", "    public Region getRegion() {\n        return region;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/player/RoundPlayer.java", "chunked_list": ["package net.socketconnection.jva.player;\n\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.exceptions.FetchException;\n\nimport java.io.IOException;\n\npublic class RoundPlayer extends Player {\n\n\n\n    public RoundPlayer(ValorantAPI valorantAPI) {\n        super(valorantAPI);\n    }\n", "    public ValorantPlayer getValorantPlayer() throws IOException {\n        if (!fetched) {\n            throw new FetchException(\"Not fetched yet (no riot-id information\");\n        }\n\n        return new ValorantPlayer(valorantAPI).fetchData(username, tag);\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/player/LeaderboardPlayer.java", "chunked_list": ["package net.socketconnection.jva.player;\n\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.enums.Rank;\nimport net.socketconnection.jva.exceptions.FetchException;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.io.IOException;\n\npublic class LeaderboardPlayer extends Player {\n\n    String playerCardId;\n    String titleId;\n    boolean banned;\n    boolean anonymized;\n    int leaderboardRank;\n    int rankRating;\n    int amountOfWins;\n    Rank rank;\n\n    public LeaderboardPlayer(ValorantAPI valorantAPI) {\n        super(valorantAPI);\n    }\n", "import java.io.IOException;\n\npublic class LeaderboardPlayer extends Player {\n\n    String playerCardId;\n    String titleId;\n    boolean banned;\n    boolean anonymized;\n    int leaderboardRank;\n    int rankRating;\n    int amountOfWins;\n    Rank rank;\n\n    public LeaderboardPlayer(ValorantAPI valorantAPI) {\n        super(valorantAPI);\n    }\n", "    public LeaderboardPlayer fetchData(JsonObject object) {\n        playerCardId = GsonUtils.getAsString(object.get(\"PlayerCardID\"));\n        titleId = GsonUtils.getAsString(object.get(\"TitleID\"));\n        banned = GsonUtils.getAsBoolean(object.get(\"IsBanned\"));\n        anonymized = GsonUtils.getAsBoolean(object.get(\"IsAnonymized\"));\n        playerId = GsonUtils.getAsString(object.get(\"puuid\"));\n        username = GsonUtils.getAsString(object.get(\"gameName\"));\n        tag = GsonUtils.getAsString(object.get(\"tagLine\"));\n        leaderboardRank = GsonUtils.getAsInt(object.get(\"leaderboardRank\"));\n        rankRating = GsonUtils.getAsInt(object.get(\"rankedRating\"));\n        amountOfWins = GsonUtils.getAsInt(object.get(\"numberOfWins\"));\n        rank = Rank.getFromId(GsonUtils.getAsInt(object.get(\"competitiveTier\")));\n\n        fetched = true;\n\n        return this;\n    }\n", "    public ValorantPlayer getValorantPlayer() throws IOException {\n        if (!fetched) {\n            throw new FetchException(\"Not fetched yet (no riot-id information\");\n        }\n\n        return new ValorantPlayer(valorantAPI).fetchData(username, tag);\n    }\n\n    @Override\n    public String getRiotId() {\n        if (username.isEmpty() || tag.isEmpty()) {\n            return null;\n        }\n\n        return super.getRiotId();\n    }\n", "    public String getRiotId() {\n        if (username.isEmpty() || tag.isEmpty()) {\n            return null;\n        }\n\n        return super.getRiotId();\n    }\n\n    public Rank getRank() {\n        return rank;\n    }\n", "    public Rank getRank() {\n        return rank;\n    }\n\n    public int getAmountOfWins() {\n        return amountOfWins;\n    }\n\n    public int getRankRating() {\n        return rankRating;\n    }\n", "    public int getRankRating() {\n        return rankRating;\n    }\n\n    public int getLeaderboardRank() {\n        return leaderboardRank;\n    }\n\n    public boolean isAnonymized() {\n        return anonymized;\n    }\n", "    public boolean isAnonymized() {\n        return anonymized;\n    }\n\n    public boolean isBanned() {\n        return banned;\n    }\n\n    public String getTitleId() {\n        return titleId;\n    }\n", "    public String getTitleId() {\n        return titleId;\n    }\n\n    public String getPlayerCardId() {\n        return playerCardId;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/player/MatchPlayer.java", "chunked_list": ["package net.socketconnection.jva.player;\n\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.enums.Agent;\nimport net.socketconnection.jva.enums.Rank;\nimport net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.models.image.AgentImage;\nimport net.socketconnection.jva.models.player.*;\nimport net.socketconnection.jva.utils.GsonUtils;", "import net.socketconnection.jva.models.player.*;\nimport net.socketconnection.jva.utils.GsonUtils;\n\npublic class MatchPlayer extends ValorantPlayer {\n\n    String team;\n    Agent agent;\n    Rank rank;\n    String playerTitle;\n    String partyId;\n    long playtime;\n    Behavior behavior;\n    Platform platform;\n    AbilityCasts abilityCasts;\n    AgentImage agentImage;\n    Stats stats;\n    Economy economy;\n    int damageMade;\n    int damageReceived;\n\n    public MatchPlayer(ValorantAPI valorantAPI) {\n        super(valorantAPI);\n    }\n", "    public MatchPlayer fetchData(Region region, JsonObject object) {\n        this.region = region;\n\n        playerId = GsonUtils.getAsString(object.get(\"puuid\"));\n        username = GsonUtils.getAsString(object.get(\"name\"));\n        tag = GsonUtils.getAsString(object.get(\"tag\"));\n        team = GsonUtils.getAsString(object.get(\"team\"));\n        level = GsonUtils.getAsInt(object.get(\"level\"));\n        agent = Agent.getFromName(GsonUtils.getAsString(object.get(\"character\")));\n        rank = Rank.getFromId(GsonUtils.getAsInt(object.get(\"currenttier\")));\n        playerTitle = GsonUtils.getAsString(object.get(\"player_title\"));\n        partyId = GsonUtils.getAsString(object.get(\"party_id\"));\n        playtime = GsonUtils.getAsLong(object.getAsJsonObject(\"session_playtime\").get(\"milliseconds\"));\n\n        JsonObject behaviorData = object.getAsJsonObject(\"behavior\");\n        JsonObject friendlyFireData = behaviorData.getAsJsonObject(\"friendly_fire\");\n\n        behavior = new Behavior(GsonUtils.getAsInt(behaviorData.get(\"afk_rounds\")), GsonUtils.getAsInt(friendlyFireData.get(\"incoming\")),\n                GsonUtils.getAsInt(friendlyFireData.get(\"outgoing\")), GsonUtils.getAsInt(behaviorData.get(\"rounds_in_spawn\")));\n\n        JsonObject platformData = object.getAsJsonObject(\"platform\");\n        JsonObject osData = platformData.getAsJsonObject(\"os\");\n\n        platform = new Platform(GsonUtils.getAsString(platformData.get(\"type\")), GsonUtils.getAsString(osData.get(\"name\")),\n                GsonUtils.getAsString(osData.get(\"version\")));\n\n        JsonObject abilityCastData = object.getAsJsonObject(\"ability_casts\");\n\n        abilityCasts = new AbilityCasts(GsonUtils.getAsInt(abilityCastData.get(\"c_cast\")), GsonUtils.getAsInt(abilityCastData.get(\"q_cast\")),\n                GsonUtils.getAsInt(abilityCastData.get(\"e_cast\")), GsonUtils.getAsInt(abilityCastData.get(\"x_cast\")));\n\n        JsonObject assetsData = object.getAsJsonObject(\"assets\");\n        JsonObject cardData = assetsData.getAsJsonObject(\"card\");\n        JsonObject agentData = assetsData.getAsJsonObject(\"agent\");\n\n        playerCard = new PlayerCard(GsonUtils.getAsString(cardData.get(\"small\")), GsonUtils.getAsString(cardData.get(\"large\")),\n                GsonUtils.getAsString(cardData.get(\"wide\")), GsonUtils.getAsString(object.get(\"player_card\")));\n        agentImage = new AgentImage(GsonUtils.getAsString(agentData.get(\"small\")), GsonUtils.getAsString(agentData.get(\"bust\")),\n                GsonUtils.getAsString(agentData.get(\"full\")), GsonUtils.getAsString(agentData.get(\"killfeed\")));\n\n        JsonObject statsData = object.getAsJsonObject(\"stats\");\n\n        stats = new Stats(GsonUtils.getAsInt(statsData.get(\"score\")), GsonUtils.getAsInt(statsData.get(\"kills\")), GsonUtils.getAsInt(statsData.get(\"deaths\")),\n                GsonUtils.getAsInt(statsData.get(\"assists\")), GsonUtils.getAsInt(statsData.get(\"bodyshots\")), GsonUtils.getAsInt(statsData.get(\"headshots\")),\n                GsonUtils.getAsInt(statsData.get(\"legshots\")));\n\n        JsonObject economyData = object.getAsJsonObject(\"economy\");\n        JsonObject spentData = economyData.getAsJsonObject(\"spent\");\n        JsonObject loadoutData = economyData.getAsJsonObject(\"loadout_value\");\n\n        economy = new Economy(GsonUtils.getAsInt(spentData.get(\"overall\")), GsonUtils.getAsInt(spentData.get(\"average\")),\n                GsonUtils.getAsInt(loadoutData.get(\"overall\")), GsonUtils.getAsInt(loadoutData.get(\"average\")));\n\n        damageMade = GsonUtils.getAsInt(object.get(\"damage_made\"));\n        damageReceived = GsonUtils.getAsInt(object.get(\"damage_received\"));\n\n        fetched = true;\n\n        return this;\n    }\n", "    public int getDamageReceived() {\n        return damageReceived;\n    }\n\n    public int getDamageMade() {\n        return damageMade;\n    }\n\n    public Economy getEconomy() {\n        return economy;\n    }\n", "    public Economy getEconomy() {\n        return economy;\n    }\n\n    public Stats getStats() {\n        return stats;\n    }\n\n    public AgentImage getAgentImage() {\n        return agentImage;\n    }\n", "    public AgentImage getAgentImage() {\n        return agentImage;\n    }\n\n    public AbilityCasts getAbilityCasts() {\n        return abilityCasts;\n    }\n\n    public Platform getPlatform() {\n        return platform;\n    }\n", "    public Platform getPlatform() {\n        return platform;\n    }\n\n    public Behavior getBehavior() {\n        return behavior;\n    }\n\n    public long getPlaytime() {\n        return playtime;\n    }\n", "    public long getPlaytime() {\n        return playtime;\n    }\n\n    public String getPartyId() {\n        return partyId;\n    }\n\n    public String getPlayerTitle() {\n        return playerTitle;\n    }\n", "    public String getPlayerTitle() {\n        return playerTitle;\n    }\n\n    public Rank getRank() {\n        return rank;\n    }\n\n    public Agent getAgent() {\n        return agent;\n    }\n", "    public Agent getAgent() {\n        return agent;\n    }\n\n    public String getTeam() {\n        return team;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/player/Player.java", "chunked_list": ["package net.socketconnection.jva.player;\n\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.enums.Rank;\nimport net.socketconnection.jva.utils.RiotUtils;\n\npublic abstract class Player {\n\n    ValorantAPI valorantAPI;\n\n    String username;\n    String tag;\n    String playerId;\n\n    boolean fetched;\n\n    public Player(ValorantAPI valorantAPI) {\n        this.valorantAPI = valorantAPI;\n    }\n", "    public boolean isFetched() {\n        return fetched;\n    }\n\n    public String getRiotId() {\n        return RiotUtils.toRiotId(username, tag);\n    }\n\n    public String getPlayerId() {\n        return playerId;\n    }\n", "    public String getPlayerId() {\n        return playerId;\n    }\n\n    public String getTag() {\n        return tag;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n", "    public String getUsername() {\n        return username;\n    }\n\n    public ValorantAPI getValorantAPI() {\n        return valorantAPI;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/MatchRound.java", "chunked_list": ["package net.socketconnection.jva.match;\n\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.match.events.DefuseEvent;\nimport net.socketconnection.jva.match.events.PlantEvent;\nimport net.socketconnection.jva.player.MatchPlayer;\nimport net.socketconnection.jva.player.RoundPlayer;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.util.List;", "\nimport java.util.List;\n\npublic class MatchRound {\n\n    final Match match;\n    String winningTeam;\n    String endType;\n    boolean bombPlanted;\n    boolean bombDefused;\n    List<RoundPlayer> players;\n    PlantEvent plantEvent;\n    DefuseEvent defuseEvent;\n\n    public MatchRound(Match match) {\n        this.match = match;\n    }\n", "    public MatchRound fetchData(JsonObject object) {\n        winningTeam = GsonUtils.getAsString(object.get(\"winning_team\"));\n        endType = GsonUtils.getAsString(object.get(\"end_type\"));\n        bombPlanted = GsonUtils.getAsBoolean(object.get(\"bomb_planted\"));\n        bombDefused = GsonUtils.getAsBoolean(object.get(\"bomb_defused\"));\n\n        if(bombPlanted) {\n            plantEvent = (PlantEvent) new PlantEvent(this).fetchData(object.getAsJsonObject(\"plant_events\"));\n        }\n\n        if(bombDefused) {\n            defuseEvent = (DefuseEvent) new DefuseEvent(this).fetchData(object.getAsJsonObject(\"defuse_events\"));\n        }\n\n        return this;\n    }\n", "        if(bombDefused) {\n            defuseEvent = (DefuseEvent) new DefuseEvent(this).fetchData(object.getAsJsonObject(\"defuse_events\"));\n        }\n\n        return this;\n    }\n\n    public RoundPlayer getPlayer(String playerId) {\n        for(RoundPlayer player : players) {\n            if(!player.getPlayerId().equalsIgnoreCase(playerId)) {\n                continue;\n            }\n\n            return player;\n        }\n\n        return null;\n    }\n", "        for(RoundPlayer player : players) {\n            if(!player.getPlayerId().equalsIgnoreCase(playerId)) {\n                continue;\n            }\n\n            return player;\n        }\n\n        return null;\n    }\n", "    public RoundPlayer getPlayer(MatchPlayer matchPlayer) {\n        return getPlayer(matchPlayer.getPlayerId());\n    }\n\n    public DefuseEvent getDefuseEvent() {\n        return defuseEvent;\n    }\n\n    public PlantEvent getPlantEvent() {\n        return plantEvent;\n    }\n\n    public List<RoundPlayer> getPlayers() {\n        return players;\n    }\n", "    public PlantEvent getPlantEvent() {\n        return plantEvent;\n    }\n\n    public List<RoundPlayer> getPlayers() {\n        return players;\n    }\n\n    public boolean isBombDefused() {\n        return bombDefused;\n    }\n", "    public boolean isBombDefused() {\n        return bombDefused;\n    }\n\n    public boolean isBombPlanted() {\n        return bombPlanted;\n    }\n\n    public String getEndType() {\n        return endType;\n    }\n", "    public String getEndType() {\n        return endType;\n    }\n\n    public String getWinningTeam() {\n        return winningTeam;\n    }\n\n    public Match getMatch() {\n        return match;\n    }\n}\n", "    public Match getMatch() {\n        return match;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/Match.java", "chunked_list": ["package net.socketconnection.jva.match;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.ValorantAPI;\nimport net.socketconnection.jva.enums.GameMode;\nimport net.socketconnection.jva.enums.Map;\nimport net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.player.MatchPlayer;", "import net.socketconnection.jva.enums.Region;\nimport net.socketconnection.jva.player.MatchPlayer;\nimport net.socketconnection.jva.player.ValorantPlayer;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Match {\n\n    final ValorantAPI valorantAPI;\n\n    String matchId;\n    Map map;\n    String gameVersion;\n    long gameLength;\n    String gameStart;\n    int roundsPlayed;\n    GameMode gameMode;\n    String seasonId;\n    String platform;\n    Region region;\n    String server;\n    List<MatchPlayer> players;\n    MatchTeam red;\n    MatchTeam blue;\n    List<MatchRound> rounds;\n\n    boolean fetched;\n\n    public Match(ValorantAPI valorantAPI) {\n        this.valorantAPI = valorantAPI;\n    }\n", "\npublic class Match {\n\n    final ValorantAPI valorantAPI;\n\n    String matchId;\n    Map map;\n    String gameVersion;\n    long gameLength;\n    String gameStart;\n    int roundsPlayed;\n    GameMode gameMode;\n    String seasonId;\n    String platform;\n    Region region;\n    String server;\n    List<MatchPlayer> players;\n    MatchTeam red;\n    MatchTeam blue;\n    List<MatchRound> rounds;\n\n    boolean fetched;\n\n    public Match(ValorantAPI valorantAPI) {\n        this.valorantAPI = valorantAPI;\n    }\n", "    public Match fetchData(JsonObject object) {\n        JsonObject metaData = object.getAsJsonObject(\"metadata\");\n\n        map = Map.getFromName(GsonUtils.getAsString(metaData.get(\"map\")));\n        gameVersion = GsonUtils.getAsString(metaData.get(\"game_version\"));\n        gameLength = GsonUtils.getAsLong(metaData.get(\"game_length\"));\n        gameStart = GsonUtils.getAsString(metaData.get(\"game_start_patched\"));\n        roundsPlayed = GsonUtils.getAsInt(metaData.get(\"rounds_played\"));\n        gameMode = GameMode.getFromName(GsonUtils.getAsString(metaData.get(\"mode\")));\n        seasonId = GsonUtils.getAsString(metaData.get(\"season_id\"));\n        platform = GsonUtils.getAsString(metaData.get(\"platform\"));\n        matchId = GsonUtils.getAsString(metaData.get(\"matchid\"));\n        region = Region.getFromQuery(GsonUtils.getAsString(metaData.get(\"region\")));\n        server = GsonUtils.getAsString(metaData.get(\"cluster\"));\n\n        JsonArray playerData = object.getAsJsonObject(\"players\").getAsJsonArray(\"all_players\");\n\n        players = new LinkedList<>();\n\n        List<MatchPlayer> redPlayers = new LinkedList<>();\n        List<MatchPlayer> bluePlayers = new LinkedList<>();\n", "        for (JsonElement playerElement : playerData) {\n            MatchPlayer matchPlayer = new MatchPlayer(valorantAPI).fetchData(region, playerElement.getAsJsonObject());\n\n            switch (matchPlayer.getTeam()) {\n                case \"Red\":\n                    redPlayers.add(matchPlayer);\n\n                    break;\n                case \"Blue\":\n                    bluePlayers.add(matchPlayer);\n\n                    break;\n            }\n\n            players.add(matchPlayer);\n        }\n\n        JsonObject redData = object.getAsJsonObject(\"teams\").getAsJsonObject(\"red\");\n        JsonObject blueData = object.getAsJsonObject(\"teams\").getAsJsonObject(\"blue\");\n\n        red = new MatchTeam(redPlayers, GsonUtils.getAsBoolean(redData.get(\"has_won\")), GsonUtils.getAsInt(redData.get(\"rounds_won\")),\n                GsonUtils.getAsInt(redData.get(\"rounds_lost\")));\n        blue = new MatchTeam(bluePlayers, GsonUtils.getAsBoolean(blueData.get(\"has_won\")), GsonUtils.getAsInt(blueData.get(\"rounds_won\")),\n                GsonUtils.getAsInt(blueData.get(\"rounds_lost\")));\n\n        JsonArray roundsData = object.getAsJsonArray(\"rounds\");\n\n        rounds = new LinkedList<>();\n", "        for(JsonElement roundElement : roundsData) {\n            rounds.add(new MatchRound(this).fetchData(roundElement.getAsJsonObject()));\n        }\n\n        fetched = true;\n\n        return this;\n    }\n\n    public Match fetchData(String matchId) throws IOException {\n        return fetchData(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));\n    }\n", "    public Match fetchData(String matchId) throws IOException {\n        return fetchData(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));\n    }\n\n    public MatchPlayer getMatchPlayer(ValorantPlayer valorantPlayer) {\n        for (MatchPlayer player : players) {\n            if (!player.getPlayerId().equals(valorantPlayer.getPlayerId())) {\n                continue;\n            }\n\n            return player;\n        }\n\n        return null;\n    }\n", "    public boolean isFetched() {\n        return fetched;\n    }\n\n    public List<MatchRound> getRounds() {\n        return rounds;\n    }\n\n    public MatchTeam getBlue() {\n        return blue;\n    }\n", "    public MatchTeam getBlue() {\n        return blue;\n    }\n\n    public MatchTeam getRed() {\n        return red;\n    }\n\n    public List<MatchPlayer> getPlayers() {\n        return players;\n    }\n", "    public String getServer() {\n        return server;\n    }\n\n    public Region getRegion() {\n        return region;\n    }\n\n    public String getPlatform() {\n        return platform;\n    }\n", "    public String getPlatform() {\n        return platform;\n    }\n\n    public String getSeasonId() {\n        return seasonId;\n    }\n\n    public GameMode getGameMode() {\n        return gameMode;\n    }\n", "    public GameMode getGameMode() {\n        return gameMode;\n    }\n\n    public int getRoundsPlayed() {\n        return roundsPlayed;\n    }\n\n    public String getGameStart() {\n        return gameStart;\n    }\n", "    public String getGameStart() {\n        return gameStart;\n    }\n\n    public long getGameLength() {\n        return gameLength;\n    }\n\n    public String getGameVersion() {\n        return gameVersion;\n    }\n", "    public String getGameVersion() {\n        return gameVersion;\n    }\n\n    public Map getMap() {\n        return map;\n    }\n\n    public String getMatchId() {\n        return matchId;\n    }\n", "    public String getMatchId() {\n        return matchId;\n    }\n\n    public ValorantAPI getValorantAPI() {\n        return valorantAPI;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/MatchTeam.java", "chunked_list": ["package net.socketconnection.jva.match;\n\nimport net.socketconnection.jva.player.MatchPlayer;\n\nimport java.util.List;\n\npublic class MatchTeam {\n\n    private final List<MatchPlayer> players;\n    private final boolean won;\n    private final int roundsWon;\n    private final int roundsLost;\n\n    public MatchTeam(List<MatchPlayer> players, boolean won, int roundsWon, int roundsLost) {\n        this.players = players;\n        this.won = won;\n        this.roundsWon = roundsWon;\n        this.roundsLost = roundsLost;\n    }\n", "    public int getRoundsLost() {\n        return roundsLost;\n    }\n\n    public int getRoundsWon() {\n        return roundsWon;\n    }\n\n    public boolean hasWon() {\n        return won;\n    }\n\n    public List<MatchPlayer> getPlayers() {\n        return players;\n    }\n}\n", "    public boolean hasWon() {\n        return won;\n    }\n\n    public List<MatchPlayer> getPlayers() {\n        return players;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/events/PlantEvent.java", "chunked_list": ["package net.socketconnection.jva.match.events;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.match.MatchRound;\nimport net.socketconnection.jva.models.Location;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.util.LinkedHashMap;", "\nimport java.util.LinkedHashMap;\n\npublic class PlantEvent extends SpikeEvent {\n\n    String site;\n\n    public PlantEvent(MatchRound matchRound) {\n        super(matchRound);\n    }\n\n    @Override", "    public Event fetchData(JsonObject object) {\n        if(!object.get(\"plant_location\").isJsonNull()) {\n            JsonObject plantLocationData = object.getAsJsonObject(\"plant_location\");\n\n            location = new Location(GsonUtils.getAsInt(plantLocationData.get(\"x\")), GsonUtils.getAsInt(plantLocationData.get(\"y\")), 0);\n        }\n\n        if(!object.get(\"planted_by\").isJsonNull()) {\n            interactor = matchRound.getPlayer(GsonUtils.getAsString(object.getAsJsonObject(\"planted_by\").get(\"puuid\")));\n        }\n\n        site = GsonUtils.getAsString(object.get(\"plant_site\"));\n        timeInRound = GsonUtils.getAsLong(object.get(\"plant_time_in_round\"));\n", "        if(!object.get(\"player_locations_on_plant\").isJsonNull()) {\n            JsonArray playerLocationData = object.getAsJsonArray(\"player_locations_on_plant\");\n\n            playerLocations = new LinkedHashMap<>();\n\n            for(JsonElement playerLocationElement : playerLocationData) {\n                JsonObject playerLocationObject = playerLocationElement.getAsJsonObject();\n\n                playerLocations.put(matchRound.getPlayer(GsonUtils.getAsString(playerLocationObject.get(\"player_puuid\"))),\n                        new Location(GsonUtils.getAsInt(playerLocationObject.getAsJsonObject(\"location\").get(\"x\")),\n                                GsonUtils.getAsInt(playerLocationObject.getAsJsonObject(\"location\").get(\"y\")),\n                                GsonUtils.getAsDouble(playerLocationObject.get(\"view_radians\"))));\n            }\n        }\n\n        return this;\n    }\n", "    public String getSite() {\n        return site;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/events/Event.java", "chunked_list": ["package net.socketconnection.jva.match.events;\n\nimport com.google.gson.JsonObject;\n\npublic interface Event {\n\n    Event fetchData(JsonObject object);\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/events/SpikeEvent.java", "chunked_list": ["package net.socketconnection.jva.match.events;\n\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.match.MatchRound;\nimport net.socketconnection.jva.models.Location;\nimport net.socketconnection.jva.player.RoundPlayer;\n\nimport java.util.Map;\n\npublic abstract class SpikeEvent implements Event {\n\n    final MatchRound matchRound;\n    Location location;\n    RoundPlayer interactor;\n    long timeInRound;\n    Map<RoundPlayer, Location> playerLocations;\n\n    public SpikeEvent(MatchRound matchRound) {\n        this.matchRound = matchRound;\n    }\n\n    @Override", "\npublic abstract class SpikeEvent implements Event {\n\n    final MatchRound matchRound;\n    Location location;\n    RoundPlayer interactor;\n    long timeInRound;\n    Map<RoundPlayer, Location> playerLocations;\n\n    public SpikeEvent(MatchRound matchRound) {\n        this.matchRound = matchRound;\n    }\n\n    @Override", "    public Event fetchData(JsonObject object) {\n        return this;\n    }\n\n    public Map<RoundPlayer, Location> getPlayerLocations() {\n        return playerLocations;\n    }\n\n    public long getTimeInRound() {\n        return timeInRound;\n    }\n", "    public long getTimeInRound() {\n        return timeInRound;\n    }\n\n    public RoundPlayer getInteractor() {\n        return interactor;\n    }\n\n    public Location getLocation() {\n        return location;\n    }\n", "    public Location getLocation() {\n        return location;\n    }\n\n    public MatchRound getMatchRound() {\n        return matchRound;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/match/events/DefuseEvent.java", "chunked_list": ["package net.socketconnection.jva.match.events;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport net.socketconnection.jva.match.MatchRound;\nimport net.socketconnection.jva.models.Location;\nimport net.socketconnection.jva.utils.GsonUtils;\n\nimport java.util.LinkedHashMap;", "\nimport java.util.LinkedHashMap;\n\npublic class DefuseEvent extends SpikeEvent {\n\n    public DefuseEvent(MatchRound matchRound) {\n        super(matchRound);\n    }\n\n    @Override\n    public Event fetchData(JsonObject object) {", "    public Event fetchData(JsonObject object) {\n        if(!object.get(\"defuse_location\").isJsonNull()) {\n            JsonObject plantLocationData = object.getAsJsonObject(\"defuse_location\");\n\n            location = new Location(GsonUtils.getAsInt(plantLocationData.get(\"x\")), GsonUtils.getAsInt(plantLocationData.get(\"y\")), 0);\n        }\n\n        if(!object.get(\"defused_by\").isJsonNull()) {\n            interactor = matchRound.getPlayer(GsonUtils.getAsString(object.getAsJsonObject(\"defused_by\").get(\"puuid\")));\n        }\n\n        timeInRound = GsonUtils.getAsLong(object.get(\"defuse_time_in_round\"));\n", "        if(!object.get(\"player_locations_on_defuse\").isJsonNull()) {\n            JsonArray playerLocationData = object.getAsJsonArray(\"player_locations_on_defuse\");\n\n            playerLocations = new LinkedHashMap<>();\n\n            for(JsonElement playerLocationElement : playerLocationData) {\n                JsonObject playerLocationObject = playerLocationElement.getAsJsonObject();\n\n                playerLocations.put(matchRound.getPlayer(GsonUtils.getAsString(playerLocationObject.get(\"player_puuid\"))),\n                        new Location(GsonUtils.getAsInt(playerLocationObject.getAsJsonObject(\"location\").get(\"x\")),\n                                GsonUtils.getAsInt(playerLocationObject.getAsJsonObject(\"location\").get(\"y\")),\n                                GsonUtils.getAsDouble(playerLocationObject.get(\"view_radians\"))));\n            }\n        }\n\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/utils/GsonUtils.java", "chunked_list": ["package net.socketconnection.jva.utils;\n\nimport com.google.gson.JsonElement;\n\npublic class GsonUtils {\n\n    public static String getAsString(JsonElement element) {\n        if(element.isJsonNull()) {\n            return null;\n        }\n\n        return element.getAsString();\n    }\n", "    public static int getAsInt(JsonElement element) {\n        if(element.isJsonNull()) {\n            return 0;\n        }\n\n        return element.getAsInt();\n    }\n\n    public static double getAsDouble(JsonElement element) {\n        if(element.isJsonNull()) {\n            return 0;\n        }\n\n        return element.getAsDouble();\n    }\n", "    public static double getAsDouble(JsonElement element) {\n        if(element.isJsonNull()) {\n            return 0;\n        }\n\n        return element.getAsDouble();\n    }\n\n    public static long getAsLong(JsonElement element) {\n        if(element.isJsonNull()) {\n            return 0;\n        }\n\n        return element.getAsLong();\n    }\n", "    public static long getAsLong(JsonElement element) {\n        if(element.isJsonNull()) {\n            return 0;\n        }\n\n        return element.getAsLong();\n    }\n\n    public static boolean getAsBoolean(JsonElement element) {\n        if(element.isJsonNull()) {\n            return false;\n        }\n\n        return element.getAsBoolean();\n    }\n\n}\n", "    public static boolean getAsBoolean(JsonElement element) {\n        if(element.isJsonNull()) {\n            return false;\n        }\n\n        return element.getAsBoolean();\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/utils/RiotUtils.java", "chunked_list": ["package net.socketconnection.jva.utils;\n\npublic class RiotUtils {\n\n    public static String toRiotId(String username, String tag) {\n        return username + \"#\" + tag;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/exceptions/FetchException.java", "chunked_list": ["package net.socketconnection.jva.exceptions;\n\nimport java.io.IOException;\n\npublic class FetchException extends IOException {\n\n    private final String errorMessage;\n\n    public FetchException(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override", "    public String getMessage() {\n        return errorMessage;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/exceptions/InvalidRiotIdentificationException.java", "chunked_list": ["package net.socketconnection.jva.exceptions;\n\nimport java.io.IOException;\n\npublic class InvalidRiotIdentificationException extends IOException {\n    \n    private final String errorMessage;\n    \n    public InvalidRiotIdentificationException(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override", "    public String getMessage() {\n        return errorMessage;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/exceptions/InvalidAuthenticationException.java", "chunked_list": ["package net.socketconnection.jva.exceptions;\n\nimport java.io.IOException;\n\npublic class InvalidAuthenticationException extends IOException {\n\n    private final String errorMessage;\n\n    public InvalidAuthenticationException(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override", "    public String getMessage() {\n        return errorMessage;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/exceptions/IncorrectDataException.java", "chunked_list": ["package net.socketconnection.jva.exceptions;\n\nimport java.io.IOException;\n\npublic class IncorrectDataException extends IOException {\n\n    private final String errorMessage;\n\n    public IncorrectDataException(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override", "    public String getMessage() {\n        return errorMessage;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/exceptions/RateLimitedException.java", "chunked_list": ["package net.socketconnection.jva.exceptions;\n\nimport java.io.IOException;\n\npublic class RateLimitedException extends IOException {\n\n    private final String errorMessage;\n\n    public RateLimitedException(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override", "    public String getMessage() {\n        return errorMessage;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/WebsiteArticle.java", "chunked_list": ["package net.socketconnection.jva.models;\n\npublic final class WebsiteArticle {\n\n    private final String bannerUrl;\n    private final Category category;\n    private final String date;\n    private final String externalLink;\n    private final String title;\n    private final String url;\n\n    public WebsiteArticle(String bannerUrl, Category category, String date, String externalLink, String title, String url) {\n        this.bannerUrl = bannerUrl;\n        this.category = category;\n        this.date = date;\n        this.externalLink = externalLink;\n        this.title = title;\n        this.url = url;\n    }\n", "    public enum Category {\n\n        PATCH_NOTES(\"patch_notes\", \"Patch Notes\"),\n        DEV(\"dev\", \"Dev\"),\n        GAME_UPDATES(\"game_updates\", \"Game Updates\"),\n        ESPORTS(\"esports\", \"eSports\"),\n        ANNOUNCEMENTS(\"announcements\", \"Announcements\"),\n        COMMUNITY(\"community\", \"Community\");\n\n        private final String query;\n        private final String name;\n\n        Category(String query, String name) {\n            this.query = query;\n            this.name = name;\n        }\n", "        public static Category getFromName(String name) {\n            for(Category category : values()) {\n                if(!category.name.equalsIgnoreCase(name)) {\n                    continue;\n                }\n\n                return category;\n            }\n\n            return null;\n        }\n", "        public static Category getFromQuery(String query) {\n            for(Category category : values()) {\n                if(!category.query.equalsIgnoreCase(query)) {\n                    continue;\n                }\n\n                return category;\n            }\n\n            return null;\n        }\n", "        public String getName() {\n            return name;\n        }\n\n        public String getQuery() {\n            return query;\n        }\n    }\n\n    public String getUrl() {\n        return url;\n    }\n", "    public String getUrl() {\n        return url;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getExternalLink() {\n        return externalLink;\n    }\n", "    public String getExternalLink() {\n        return externalLink;\n    }\n\n    public String getDate() {\n        return date;\n    }\n\n    public Category getCategory() {\n        return category;\n    }\n", "    public Category getCategory() {\n        return category;\n    }\n\n    public String getBannerUrl() {\n        return bannerUrl;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/Location.java", "chunked_list": ["package net.socketconnection.jva.models;\n\npublic final class Location {\n\n    private final int x;\n    private final int y;\n    private final double viewRadians;\n\n    public Location(int x, int y, double viewRadians) {\n        this.x = x;\n        this.y = y;\n        this.viewRadians = viewRadians;\n    }\n", "    public double getViewRadians() {\n        return viewRadians;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public int getX() {\n        return x;\n    }\n}\n", "    public int getX() {\n        return x;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/Version.java", "chunked_list": ["package net.socketconnection.jva.models;\n\nimport net.socketconnection.jva.enums.Region;\n\npublic final class Version {\n\n    private final String version;\n    private final String clientVersion;\n    private final String brand;\n    private final Region region;\n\n    public Version(String version, String clientVersion, String brand, Region region) {\n        this.version = version;\n        this.clientVersion = clientVersion;\n        this.brand = brand;\n        this.region = region;\n    }\n", "    public Region getRegion() {\n        return region;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public String getClientVersion() {\n        return clientVersion;\n    }\n", "    public String getClientVersion() {\n        return clientVersion;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/Economy.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class Economy {\n\n    private final int overallSpent;\n    private final int averageSpent;\n\n    private final int overallLoadout;\n    private final int averageLoadout;\n\n    public Economy(int overallSpent, int averageSpent, int overallLoadout, int averageLoadout) {\n        this.overallSpent = overallSpent;\n        this.averageSpent = averageSpent;\n\n        this.overallLoadout = overallLoadout;\n        this.averageLoadout = averageLoadout;\n    }\n", "    public int getAverageLoadout() {\n        return averageLoadout;\n    }\n\n    public int getOverallLoadout() {\n        return overallLoadout;\n    }\n\n    public int getAverageSpent() {\n        return averageSpent;\n    }\n", "    public int getAverageSpent() {\n        return averageSpent;\n    }\n\n    public int getOverallSpent() {\n        return overallSpent;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/PlayerCard.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class PlayerCard {\n\n    private final String small;\n    private final String large;\n    private final String wide;\n    private final String id;\n\n    public PlayerCard(String small, String large, String wide, String id) {\n        this.small = small;\n        this.large = large;\n        this.wide = wide;\n        this.id = id;\n    }\n", "    public String getId() {\n        return id;\n    }\n\n    public String getWide() {\n        return wide;\n    }\n\n    public String getLarge() {\n        return large;\n    }\n", "    public String getLarge() {\n        return large;\n    }\n\n    public String getSmall() {\n        return small;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/Stats.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class Stats {\n\n    private final int score;\n    private final int kills;\n    private final int deaths;\n    private final int assists;\n    private final int bodyshots;\n    private final int headshots;\n    private final int legshots;\n\n    public Stats(int score, int kills, int deaths, int assists, int bodyshots, int headshots, int legshots) {\n        this.score = score;\n        this.kills = kills;\n        this.deaths = deaths;\n        this.assists = assists;\n        this.bodyshots = bodyshots;\n        this.headshots = headshots;\n        this.legshots = legshots;\n    }\n", "    public int getLegshots() {\n        return legshots;\n    }\n\n    public int getHeadshots() {\n        return headshots;\n    }\n\n    public int getBodyshots() {\n        return bodyshots;\n    }\n", "    public int getBodyshots() {\n        return bodyshots;\n    }\n\n    public int getAssists() {\n        return assists;\n    }\n\n    public int getDeaths() {\n        return deaths;\n    }\n", "    public int getDeaths() {\n        return deaths;\n    }\n\n    public int getKills() {\n        return kills;\n    }\n\n    public int getScore() {\n        return score;\n    }\n}\n", "    public int getScore() {\n        return score;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/AbilityCasts.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class AbilityCasts {\n\n    private final int c;\n    private final int q;\n    private final int e;\n    private final int x;\n\n    public AbilityCasts(int c, int q, int e, int x) {\n        this.c = c;\n        this.q = q;\n        this.e = e;\n        this.x = x;\n    }\n", "    public int getX() {\n        return x;\n    }\n\n    public int getE() {\n        return e;\n    }\n\n    public int getQ() {\n        return q;\n    }\n", "    public int getQ() {\n        return q;\n    }\n\n    public int getC() {\n        return c;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/Platform.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class Platform {\n\n    private final String type;\n    private final String operatingSystem;\n    private final String operatingSystemVersion;\n\n    public Platform(String type, String operatingSystem, String operatingSystemVersion) {\n        this.type = type;\n        this.operatingSystem = operatingSystem;\n        this.operatingSystemVersion = operatingSystemVersion;\n    }\n", "    public String getOperatingSystemVersion() {\n        return operatingSystemVersion;\n    }\n\n    public String getOperatingSystem() {\n        return operatingSystem;\n    }\n\n    public String getType() {\n        return type;\n    }\n}\n", "    public String getType() {\n        return type;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/player/Behavior.java", "chunked_list": ["package net.socketconnection.jva.models.player;\n\npublic final class Behavior {\n\n    private final int afkRounds;\n    private final int incomingFriendlyFire;\n    private final int outgoingFriendlyFire;\n    private final int roundsInSpawn;\n\n    public Behavior(int afkRounds, int incomingFriendlyFire, int outgoingFriendlyFire, int roundsInSpawn) {\n        this.afkRounds = afkRounds;\n        this.incomingFriendlyFire = incomingFriendlyFire;\n        this.outgoingFriendlyFire = outgoingFriendlyFire;\n        this.roundsInSpawn = roundsInSpawn;\n    }\n", "    public int getRoundsInSpawn() {\n        return roundsInSpawn;\n    }\n\n    public int getOutgoingFriendlyFire() {\n        return outgoingFriendlyFire;\n    }\n\n    public int getIncomingFriendlyFire() {\n        return incomingFriendlyFire;\n    }\n", "    public int getIncomingFriendlyFire() {\n        return incomingFriendlyFire;\n    }\n\n    public int getAfkRounds() {\n        return afkRounds;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/status/StatusEntry.java", "chunked_list": ["package net.socketconnection.jva.models.status;\n\nimport net.socketconnection.jva.enums.Language;\n\nimport java.util.Map;\n\npublic final class StatusEntry {\n\n    private final String createdAt;\n    private final String archiveAt;\n    private final Update[] updates;\n    private final String[] platforms;\n    private final String updatedAt;\n    private final int id;\n    private final Map<Language, String> titles;\n    private final String maintenanceStatus;\n    private final String incidentSeverity;\n\n    public StatusEntry(String createdAt, String archiveAt, Update[] updates, String[] platforms, String updatedAt, int id,\n                       Map<Language, String> titles, String maintenanceStatus, String incidentSeverity) {\n        this.createdAt = createdAt;\n        this.archiveAt = archiveAt;\n        this.updates = updates;\n        this.platforms = platforms;\n        this.updatedAt = updatedAt;\n        this.id = id;\n        this.titles = titles;\n        this.maintenanceStatus = maintenanceStatus;\n        this.incidentSeverity = incidentSeverity;\n    }\n", "    public String getIncidentSeverity() {\n        return incidentSeverity;\n    }\n\n    public String getMaintenanceStatus() {\n        return maintenanceStatus;\n    }\n\n    public Map<Language, String> getTitles() {\n        return titles;\n    }\n", "    public int getId() {\n        return id;\n    }\n\n    public String getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public String[] getPlatforms() {\n        return platforms;\n    }\n\n    public Update[] getUpdates() {\n        return updates;\n    }\n", "    public String getArchiveAt() {\n        return archiveAt;\n    }\n\n    public String getCreatedAt() {\n        return createdAt;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/status/ServerStatus.java", "chunked_list": ["package net.socketconnection.jva.models.status;\n\npublic final class ServerStatus {\n\n    private final StatusEntry[] maintenances;\n    private final StatusEntry[] incidents;\n\n    public ServerStatus(StatusEntry[] maintenances, StatusEntry[] incidents) {\n        this.maintenances = maintenances;\n        this.incidents = incidents;\n    }\n\n    public StatusEntry[] getIncidents() {\n        return incidents;\n    }\n\n    public StatusEntry[] getMaintenances() {\n        return maintenances;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/status/Update.java", "chunked_list": ["package net.socketconnection.jva.models.status;\n\nimport net.socketconnection.jva.enums.Language;\n\nimport java.util.Map;\n\npublic final class Update {\n\n    private final String createdAt;\n    private final String updatedAt;\n    private final boolean published;\n    private final int id;\n    private final Map<Language, String> translations;\n    private final String[] publishLocations;\n    private final String author;\n\n    public Update(String createdAt, String updatedAt, boolean published, int id, Map<Language, String> translations, String[] publishLocations, String author) {\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.published = published;\n        this.id = id;\n        this.translations = translations;\n        this.publishLocations = publishLocations;\n        this.author = author;\n    }\n", "    public String getAuthor() {\n        return author;\n    }\n\n    public String[] getPublishLocations() {\n        return publishLocations;\n    }\n\n    public Map<Language, String> getTranslations() {\n        return translations;\n    }\n", "    public int getId() {\n        return id;\n    }\n\n    public boolean isPublished() {\n        return published;\n    }\n\n    public String getUpdatedAt() {\n        return updatedAt;\n    }\n", "    public String getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public String getCreatedAt() {\n        return createdAt;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/image/RankImage.java", "chunked_list": ["package net.socketconnection.jva.models.image;\n\npublic final class RankImage {\n\n    private final String small;\n    private final String large;\n    private final String triangleDown;\n    private final String triangleUp;\n\n    public RankImage(String small, String large, String triangleDown, String triangleUp) {\n        this.small = small;\n        this.large = large;\n        this.triangleDown = triangleDown;\n        this.triangleUp = triangleUp;\n    }\n", "    public String getTriangleUp() {\n        return triangleUp;\n    }\n\n    public String getTriangleDown() {\n        return triangleDown;\n    }\n\n    public String getLarge() {\n        return large;\n    }\n", "    public String getLarge() {\n        return large;\n    }\n\n    public String getSmall() {\n        return small;\n    }\n\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/image/AgentImage.java", "chunked_list": ["package net.socketconnection.jva.models.image;\n\npublic final class AgentImage {\n\n    private final String small;\n    private final String bust;\n    private final String full;\n    private final String killFeed;\n\n    public AgentImage(String small, String bust, String full, String killFeed) {\n        this.small = small;\n        this.bust = bust;\n        this.full = full;\n        this.killFeed = killFeed;\n    }\n", "    public String getKillFeed() {\n        return killFeed;\n    }\n\n    public String getFull() {\n        return full;\n    }\n\n    public String getBust() {\n        return bust;\n    }\n", "    public String getBust() {\n        return bust;\n    }\n\n    public String getSmall() {\n        return small;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/shop/ContentTier.java", "chunked_list": ["package net.socketconnection.jva.models.shop;\n\npublic final class ContentTier {\n\n    private final String name;\n    private final String devName;\n    private final String icon;\n\n    public ContentTier(String name, String devName, String icon) {\n        this.name = name;\n        this.devName = devName;\n        this.icon = icon;\n    }\n", "    public String getIcon() {\n        return icon;\n    }\n\n    public String getDevName() {\n        return devName;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n", "    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/shop/Bundle.java", "chunked_list": ["package net.socketconnection.jva.models.shop;\n\nimport net.socketconnection.jva.models.shop.item.Item;\n\npublic final class Bundle {\n\n    private final String bundleId;\n    private final int bundlePrice;\n    private final boolean wholeSaleOnly;\n    private final Item[] items;\n    private final long secondsRemaining;\n    private final String expiresAt;\n\n    public Bundle(String bundleId, int bundlePrice, boolean wholeSaleOnly, Item[] items, long secondsRemaining, String expiresAt) {\n        this.bundleId = bundleId;\n        this.bundlePrice = bundlePrice;\n        this.wholeSaleOnly = wholeSaleOnly;\n        this.items = items;\n        this.secondsRemaining = secondsRemaining;\n        this.expiresAt = expiresAt;\n    }\n", "    public String getExpiresAt() {\n        return expiresAt;\n    }\n\n    public long getSecondsRemaining() {\n        return secondsRemaining;\n    }\n\n    public Item[] getItems() {\n        return items;\n    }\n", "    public boolean isWholeSaleOnly() {\n        return wholeSaleOnly;\n    }\n\n    public int getBundlePrice() {\n        return bundlePrice;\n    }\n\n    public String getBundleId() {\n        return bundleId;\n    }\n}\n", "    public String getBundleId() {\n        return bundleId;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/shop/item/BundleItem.java", "chunked_list": ["package net.socketconnection.jva.models.shop.item;\n\npublic final class BundleItem extends Item {\n\n    private final int amount;\n    private final int discountPercent;\n    private final int basePrice;\n    private final int discountedPrice;\n    private final boolean promoItem;\n\n    public BundleItem(String skinId, String name, String image, Type type, int amount, int discountPercent, int basePrice,\n                      int discountedPrice, boolean promoItem) {\n        super(skinId, name, image, type);\n\n        this.amount = amount;\n        this.discountPercent = discountPercent;\n        this.basePrice = basePrice;\n        this.discountedPrice = discountedPrice;\n        this.promoItem = promoItem;\n    }\n", "    public boolean isPromoItem() {\n        return promoItem;\n    }\n\n    public int getDiscountedPrice() {\n        return discountedPrice;\n    }\n\n    public int getBasePrice() {\n        return basePrice;\n    }\n", "    public int getBasePrice() {\n        return basePrice;\n    }\n\n    public int getDiscountPercent() {\n        return discountPercent;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n}\n", "    public int getAmount() {\n        return amount;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/shop/item/Item.java", "chunked_list": ["package net.socketconnection.jva.models.shop.item;\n\npublic abstract class Item {\n\n    private final String skinId;\n    private final String name;\n    private final String image;\n    private final Type type;\n\n    public Item(String skinId, String name, String image, Type type) {\n        this.skinId = skinId;\n        this.name = name;\n        this.image = image;\n        this.type = type;\n    }\n", "    public enum Type {\n\n        BUDDY(\"buddy\", \"Buddy\"),\n        PLAYER_CARD(\"player_card\", \"Player Card\"),\n        SKIN_LEVEL(\"skin_level\", \"Skin Level\");\n\n        private final String query;\n        private final String name;\n\n        Type(String query, String name) {\n            this.query = query;\n            this.name = name;\n        }\n", "        public static Type getFromName(String name) {\n            for(Type type : values()) {\n                if(!type.name.equalsIgnoreCase(name)) {\n                    continue;\n                }\n\n                return type;\n            }\n\n            return null;\n        }\n", "        public static Type getFromQuery(String query) {\n            for(Type type : values()) {\n                if(!type.query.equalsIgnoreCase(query)) {\n                    continue;\n                }\n\n                return type;\n            }\n\n            return null;\n        }\n", "        public String getName() {\n            return name;\n        }\n\n        public String getQuery() {\n            return query;\n        }\n    }\n\n    public Type getType() {\n        return type;\n    }\n", "    public Type getType() {\n        return type;\n    }\n\n    public String getImage() {\n        return image;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public String getSkinId() {\n        return skinId;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/models/shop/item/OfferItem.java", "chunked_list": ["package net.socketconnection.jva.models.shop.item;\n\nimport net.socketconnection.jva.models.shop.ContentTier;\n\npublic final class OfferItem extends Item {\n\n    private final String offerId;\n    private final int cost;\n    private final ContentTier contentTier;\n\n    public OfferItem(String skinId, String name, String image, Type type, String offerId, int cost, ContentTier contentTier) {\n        super(skinId, name, image, type);\n\n        this.offerId = offerId;\n        this.cost = cost;\n        this.contentTier = contentTier;\n    }\n", "    public ContentTier getContentTier() {\n        return contentTier;\n    }\n\n    public int getCost() {\n        return cost;\n    }\n\n    public String getOfferId() {\n        return offerId;\n    }\n}\n", "    public String getOfferId() {\n        return offerId;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/Rank.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum Rank {\n\n    RADIANT(\"Radiant\", 27),\n    IMMORTAL_3(\"Immortal 3\", 26),\n    IMMORTAL_2(\"Immortal 2\", 25),\n    IMMORTAL_1(\"Immortal 1\", 24),\n    ASCENDANT_3(\"Ascendant 3\", 23),\n    ASCENDANT_2(\"Ascendant 2\", 22),\n    ASCENDANT_1(\"Ascendant 1\", 21),\n    DIAMOND_3(\"Diamond 3\", 20),\n    DIAMOND_2(\"Diamond 2\", 19),\n    DIAMOND_1(\"Diamond 1\", 18),\n    PLATINUM_3(\"Platinum 3\", 17),\n    PLATINUM_2(\"Platinum 2\", 16),\n    PLATINUM_1(\"Platinum 1\", 15),\n    GOLD_3(\"Gold 3\", 14),\n    GOLD_2(\"Gold 2\", 13),\n    GOLD_1(\"Gold 1\", 12),\n    SILVER_3(\"Silver 3\", 11),\n    SILVER_2(\"Silver 2\", 10),\n    SILVER_1(\"Silver 1\", 9),\n    BRONZE_3(\"Bronze 3\", 8),\n    BRONZE_2(\"Bronze 2\", 7),\n    BRONZE_1(\"Bronze 1\", 6),\n    IRON_3(\"Iron 3\", 5),\n    IRON_2(\"Iron 2\", 4),\n    IRON_1(\"Iron 1\", 3),\n    UNUSED_2(\"Unused 2\", 2),\n    UNUSED_1(\"Unused 1\", 1),\n    UNRANKED(\"Unranked\", 0);\n\n    private final String name;\n    private final int id;\n\n    Rank(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n", "    public static Rank getFromName(String name) {\n        for(Rank rank : values()) {\n            if(!rank.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return rank;\n        }\n\n        return null;\n    }\n", "    public static Rank getFromId(int id) {\n        for(Rank rank : values()) {\n            if(rank.id != id) {\n                continue;\n            }\n\n            return rank;\n        }\n\n        return null;\n    }\n", "    public int getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/GameMode.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum GameMode {\n\n    UNRATED(\"unrated\", \"Unrated\"),\n    COMPETITIVE(\"competitive\", \"Competitive\"),\n    DEATHMATCH(\"deathmatch\", \"Deathmatch\"),\n    SWIFTPLAY(\"swiftplay\", \"Swiftplay\"),\n    SPIKE_RUSH(\"spikerush\", \"Spike Rush\"),\n    REPLICATION(\"replication\", \"Replication\"),\n    ESCALATION(\"escalation\", \"Escalation\");\n\n    private final String query;\n    private final String name;\n\n    GameMode(String query, String name) {\n        this.query = query;\n        this.name = name;\n    }\n", "    public static GameMode getFromQuery(String query) {\n        for(GameMode gameMode : values()) {\n            if(!gameMode.query.equalsIgnoreCase(query)) {\n                continue;\n            }\n\n            return gameMode;\n        }\n\n        return null;\n    }\n", "    public static GameMode getFromName(String name) {\n        for(GameMode gameMode : values()) {\n            if(!gameMode.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return gameMode;\n        }\n\n        return null;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/Language.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum Language {\n\n    ENGLISH(\"en_US\", \"en-en\", \"English\"),\n    GERMAN(\"de_DE\", \"de-de\", \"German\"),\n    SPANISH_SPAIN(\"es_ES\", \"es-es\", \"Spain Spanish\"),\n    SPANISH_MEXICO(\"es_MX\", \"es-mx\", \"Mexican Spanish\"),\n    FRENCH(\"fr_FR\", \"fr-fr\", \"French\"),\n    INDONESIAN(\"id_ID\", \"id-id\", \"Indonesian\"),\n    ITALIAN(\"it_IT\", \"it-it\", \"Italian\"),\n    PORTUGUESE(\"pt_BR\", \"pt-br\", \"Portuguese\"),\n    ARABIC(\"ar_AE\", \"ar-ae\", \"Arabic\"),\n    POLISH(\"pl_PL\", \"pl-pl\", \"Polish\"),\n    RUSSIAN(\"ru_RU\", \"ru-ru\", \"Russian\"),\n    TURKISH(\"tr_TR\", \"tr-tr\", \"Turkish\"),\n    CHINESE(\"zh_TW\", \"zh-tw\", \"Chinese\"),\n    VIETNAMESE(\"vi_VN\", \"vi-vn\", \"Vietnamese\"),\n    THAI(\"th_TH\", \"th-th\", \"Thai\"),\n    JAPANESE(\"ja_JP\", \"ja-jp\", \"Japanese\"),\n    KOREAN(\"ko_KR\", \"ko-kr\", \"Korean\");\n\n    private final String locale;\n    private final String localeUrl;\n    private final String name;\n\n    Language(String locale, String localeUrl, String name) {\n        this.locale = locale;\n        this.localeUrl = localeUrl;\n        this.name = name;\n    }\n", "    public static Language getFromName(String name) {\n        for(Language language : values()) {\n            if(!language.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return language;\n        }\n\n        return null;\n    }\n", "    public static Language getFromLocaleUrl(String localeUrl) {\n        for(Language language : values()) {\n            if(!language.localeUrl.equalsIgnoreCase(localeUrl)) {\n                continue;\n            }\n\n            return language;\n        }\n\n        return null;\n    }\n", "    public static Language getFromLocale(String locale) {\n        for(Language language : values()) {\n            if(!language.locale.equalsIgnoreCase(locale)) {\n                continue;\n            }\n\n            return language;\n        }\n\n        return null;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public String getLocaleUrl() {\n        return localeUrl;\n    }\n\n    public String getLocale() {\n        return locale;\n    }\n}\n", "    public String getLocale() {\n        return locale;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/Map.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum Map {\n\n    BIND(\"Bind\"),\n    SPLIT(\"Split\"),\n    HAVEN(\"Haven\"),\n    ICEBOX(\"Icebox\"),\n    ASCENT(\"Ascent\"),\n    LOTUS(\"Lotus\"),\n    BREEZE(\"Breeze\"),\n    FRACTURE(\"Fracture\"),\n    PEARL(\"Pearl\");\n\n    private final String name;\n\n    Map(String name) {\n        this.name = name;\n    }\n", "    public static Map getFromName(String name) {\n        for(Map map : values()) {\n            if(!map.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return map;\n        }\n\n        return null;\n    }\n", "    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/Region.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum Region {\n\n    EUROPE(\"eu\", \"Europe\"),\n    NORTH_AMERICA(\"na\", \"North America\"),\n    ASIA_PACIFIC(\"ap\", \"Asia Pacific\"),\n    KOREA(\"kr\", \"Korea\");\n\n    private final String query;\n    private final String name;\n\n    Region(String query, String name) {\n        this.query = query;\n        this.name = name;\n    }\n", "    public static Region getFromQuery(String query) {\n        for(Region region : values()) {\n            if(!region.query.equalsIgnoreCase(query)) {\n                continue;\n            }\n\n            return region;\n        }\n\n        return null;\n    }\n", "    public static Region getFromName(String name) {\n        for(Region region : values()) {\n            if(!region.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return region;\n        }\n\n        return null;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n}\n"]}
{"filename": "src/main/java/net/socketconnection/jva/enums/Agent.java", "chunked_list": ["package net.socketconnection.jva.enums;\n\npublic enum Agent {\n\n    JETT(\"Jett\", Category.DUELIST),\n    RAZE(\"Raze\", Category.DUELIST),\n    BREACH(\"Breach\", Category.INITIATOR),\n    OMEN(\"Omen\", Category.CONTROLLER),\n    BRIMSTONE(\"Brimstone\", Category.CONTROLLER),\n    PHOENIX(\"Phoenix\", Category.DUELIST),\n    SAGE(\"Sage\", Category.SENTINEL),\n    SOVA(\"Sova\", Category.INITIATOR),\n    VIPER(\"Viper\", Category.CONTROLLER),\n    CYPHER(\"Cypher\", Category.SENTINEL),\n    REYNA(\"Reyna\", Category.DUELIST),\n    KILLJOY(\"Killjoy\", Category.SENTINEL),\n    SKYE(\"Skye\", Category.INITIATOR),\n    YORU(\"Yoru\", Category.DUELIST),\n    ASTRA(\"Astra\", Category.CONTROLLER),\n    KAYO(\"KAY/O\", Category.INITIATOR),\n    CHAMBER(\"Chamber\", Category.SENTINEL),\n    NEON(\"Neon\", Category.DUELIST),\n    FADE(\"Fade\", Category.INITIATOR),\n    HARBOR(\"Harbor\", Category.CONTROLLER),\n    GEKKO(\"Gekko\", Category.INITIATOR);\n\n    private final String name;\n    private final Category category;\n\n    Agent(String name, Category category) {\n        this.name = name;\n        this.category = category;\n    }\n", "    public static Agent getFromCategory(Category category) {\n        for(Agent agent : values()) {\n            if(!agent.category.equals(category)) {\n                continue;\n            }\n\n            return agent;\n        }\n\n        return null;\n    }\n", "    public static Agent getFromName(String name) {\n        for(Agent agent : values()) {\n            if(!agent.name.equalsIgnoreCase(name)) {\n                continue;\n            }\n\n            return agent;\n        }\n\n        return null;\n    }\n", "    public Category getCategory() {\n        return category;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public enum Category {\n\n        DUELIST(\"Duelist\"),\n        CONTROLLER(\"Controller\"),\n        INITIATOR(\"Initiator\"),\n        SENTINEL(\"Sentinel\");\n\n        private final String name;\n\n        Category(String name) {\n            this.name = name;\n        }\n", "    public enum Category {\n\n        DUELIST(\"Duelist\"),\n        CONTROLLER(\"Controller\"),\n        INITIATOR(\"Initiator\"),\n        SENTINEL(\"Sentinel\");\n\n        private final String name;\n\n        Category(String name) {\n            this.name = name;\n        }\n", "        public static Category getFromName(String name) {\n            for(Category category : values()) {\n                if(!category.name.equalsIgnoreCase(name)) {\n                    continue;\n                }\n\n                return category;\n            }\n\n            return null;\n        }\n", "        public String getName() {\n            return name;\n        }\n    }\n}\n"]}
