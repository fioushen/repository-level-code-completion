{"filename": "lib/src/main/java/burp/MyBurpExtension.java", "chunked_list": ["package burp;\n\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport burp.api.montoya.BurpExtension;\nimport burp.api.montoya.MontoyaApi;", "import burp.api.montoya.BurpExtension;\nimport burp.api.montoya.MontoyaApi;\nimport burp.api.montoya.logging.Logging;\nimport burp.api.montoya.ui.menu.Menu;\nimport burpgpt.gui.MyMenu;\nimport burpgpt.http.GPTClient;\nimport lombok.Getter;\n\npublic class MyBurpExtension implements BurpExtension, PropertyChangeListener {\n\n    public static final Boolean DEBUG = false;\n", "public class MyBurpExtension implements BurpExtension, PropertyChangeListener {\n\n    public static final Boolean DEBUG = false;\n\n    public static final String EXTENSION = \"BurpGPT\";\n    public static final String VERSION = \"0.1.1\";\n\n    private PropertyChangeSupport propertyChangeSupport;\n    @Getter\n    Logging logging;\n    @Getter\n    MontoyaApi montoyaApi;\n\n    @Getter\n    private String apiKey = \"PLEASE_CHANGE_ME_OR_YOU_WILL_MAKE_THE_DEVELOPER_SAD\";\n    @Getter\n    List<String> modelIds = Arrays.asList(\"davinci\", \"ada\", \"babbage\", \"curie\");\n    @Getter\n    private int maxPromptSize = 1024;\n    @Getter\n    private String model = modelIds.get(0);\n    @Getter\n    String prompt = \"Please analyze the following HTTP request and response for potential security vulnerabilities, \"\n            + \"specifically focusing on OWASP top 10 vulnerabilities such as SQL injection, XSS, CSRF, and other common web application security threats.\\n\\n\"\n            + \"Format your response as a bullet list with each point listing a vulnerability name and a brief description, in the format:\\n\"\n            + \"- Vulnerability Name: Brief description of vulnerability\\n\\n\"\n            + \"Exclude irrelevant information.\\n\\n\"\n            + \"=== Request ===\\n\"\n            + \"{REQUEST}\\n\\n\"\n            + \"=== Response ===\\n\"\n            + \"{RESPONSE}\\n\";\n\n    private GPTClient gptClient;\n\n    @Override", "    public void initialize(MontoyaApi montoyaApi) {\n        this.montoyaApi = montoyaApi;\n        this.logging = montoyaApi.logging();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n\n        montoyaApi.extension().setName(EXTENSION);\n        logging.logToOutput(\"[+] Extension loaded\");\n\n        gptClient = new GPTClient(apiKey, model, prompt, logging);\n        MyScanCheck scanCheck = new MyScanCheck(gptClient, logging);\n\n        Menu menu = MyMenu.createMenu(this);\n        montoyaApi.userInterface().menuBar().registerMenu(menu);\n        logging.logToOutput(\"[+] Menu added to the menu bar\");\n\n        montoyaApi.scanner().registerScanCheck(scanCheck);\n        logging.logToOutput(\"[+] Passive scan check registered\");\n    }\n", "    public void addPropertyChangeListener(PropertyChangeListener listener) {\n        propertyChangeSupport.addPropertyChangeListener(listener);\n    }\n\n    @Override\n    public void propertyChange(PropertyChangeEvent evt) {\n    }\n\n    public void updateSettings(String newApiKey, String newModelId, int newMaxPromptSize, String newPrompt) {\n        String[] newValues = {\n                newApiKey, newModelId, Integer.toString(newMaxPromptSize), newPrompt };\n        String[] oldValues = {\n                this.apiKey, this.model, Integer.toString(this.maxPromptSize), this.prompt };\n\n        this.apiKey = newApiKey;\n        this.model = newModelId;\n        this.maxPromptSize = newMaxPromptSize;\n        this.prompt = newPrompt;\n\n        this.gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);\n\n        propertyChangeSupport.firePropertyChange(\"settingsChanged\", oldValues, newValues);\n", "    public void updateSettings(String newApiKey, String newModelId, int newMaxPromptSize, String newPrompt) {\n        String[] newValues = {\n                newApiKey, newModelId, Integer.toString(newMaxPromptSize), newPrompt };\n        String[] oldValues = {\n                this.apiKey, this.model, Integer.toString(this.maxPromptSize), this.prompt };\n\n        this.apiKey = newApiKey;\n        this.model = newModelId;\n        this.maxPromptSize = newMaxPromptSize;\n        this.prompt = newPrompt;\n\n        this.gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);\n\n        propertyChangeSupport.firePropertyChange(\"settingsChanged\", oldValues, newValues);\n", "        if (MyBurpExtension.DEBUG) {\n            logging.logToOutput(\"[*] Updated extension settings:\");\n            logging.logToOutput(String.format(\"- apiKey: %s\\n\" +\n                    \"- model: %s\\n\" +\n                    \"- maxPromptSize: %s\\n\" +\n                    \"- prompt: %s\",\n                    newApiKey, newModelId, newMaxPromptSize, newPrompt));\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/burp/MyScanCheck.java", "chunked_list": ["package burp;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.commons.text.StringEscapeUtils;\n\nimport burp.api.montoya.http.message.HttpRequestResponse;", "\nimport burp.api.montoya.http.message.HttpRequestResponse;\nimport burp.api.montoya.logging.Logging;\nimport burp.api.montoya.scanner.AuditResult;\nimport burp.api.montoya.scanner.ConsolidationAction;\nimport burp.api.montoya.scanner.ScanCheck;\nimport burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPoint;\nimport burp.api.montoya.scanner.audit.issues.AuditIssue;\nimport burp.api.montoya.scanner.audit.issues.AuditIssueConfidence;\nimport burp.api.montoya.scanner.audit.issues.AuditIssueSeverity;", "import burp.api.montoya.scanner.audit.issues.AuditIssueConfidence;\nimport burp.api.montoya.scanner.audit.issues.AuditIssueSeverity;\nimport burpgpt.gpt.GPTRequest;\nimport burpgpt.gpt.GPTResponse;\nimport burpgpt.http.GPTClient;\nimport lombok.Setter;\n\npublic class MyScanCheck implements ScanCheck {\n\n    private Logging logging;\n\n    @Setter\n    private GPTClient gptClient;\n\n    public MyScanCheck(GPTClient gptClient, Logging logging) {\n        this.gptClient = gptClient;\n        this.logging = logging;\n    }\n\n    @Override", "    public AuditResult activeAudit(HttpRequestResponse httpRequestResponse, AuditInsertionPoint auditInsertionPoint) {\n        return AuditResult.auditResult(new ArrayList<>());\n    }\n\n    @Override\n    public AuditResult passiveAudit(HttpRequestResponse httpRequestResponse) {\n        try {\n            Pair<GPTRequest, GPTResponse> gptResults = gptClient.identifyVulnerabilities(httpRequestResponse);\n            List<AuditIssue> auditIssues = createAuditIssuesFromGPTResponse(gptResults, httpRequestResponse);\n            return AuditResult.auditResult(auditIssues);\n        } catch (IOException e) {\n            logging.raiseErrorEvent(e.getMessage());\n            return AuditResult.auditResult(new ArrayList<>());\n        }\n    }\n\n    @Override", "    public ConsolidationAction consolidateIssues(AuditIssue newIssue, AuditIssue existingIssue) {\n        return newIssue.equals(existingIssue) ? ConsolidationAction.KEEP_EXISTING\n                : ConsolidationAction.KEEP_BOTH;\n    }\n\n    private List<AuditIssue> createAuditIssuesFromGPTResponse(Pair<GPTRequest, GPTResponse> gptResults,\n            HttpRequestResponse httpRequestResponse) {\n        List<AuditIssue> auditIssues = new ArrayList<>();\n        GPTRequest gptRequest = gptResults.getLeft();\n        GPTResponse gptResponse = gptResults.getRight();\n", "        if (gptResponse.getChoices() != null) {\n            String escapedPrompt = StringEscapeUtils.escapeHtml4(gptRequest.getPrompt().trim()).replace(\"\\n\", \"<br />\");\n            String issueBackground = String.format(\n                    \"The OpenAI API generated a response using the following parameters:\" + \"<br>\"\n                            + \"<ul>\"\n                            + \"<li>Model: %s</li>\"\n                            + \"<li>Maximum prompt size: %s</li>\"\n                            + \"<li>Prompt:<br><br>%s</li>\"\n                            + \"</ul>\",\n                    gptRequest.getModel(), gptRequest.getMaxPromptSize(), escapedPrompt);\n\n            String choiceText = gptResponse.getChoices().get(0).getText();\n            String escapedDetail = StringEscapeUtils.escapeHtml4(choiceText.trim()).replace(\"\\n\", \"<br />\");\n\n            AuditIssue auditIssue = AuditIssue.auditIssue(\n                    \"GPT-generated insights\",\n                    escapedDetail,\n                    null,\n                    httpRequestResponse.request().url(),\n                    AuditIssueSeverity.INFORMATION,\n                    AuditIssueConfidence.TENTATIVE,\n                    issueBackground,\n                    null,\n                    null,\n                    httpRequestResponse);\n            auditIssues.add(auditIssue);\n        }\n\n        return auditIssues;\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gpt/GPTRequest.java", "chunked_list": ["package burpgpt.gpt;\n\nimport burp.api.montoya.http.message.requests.HttpRequest;\nimport burp.api.montoya.http.message.responses.HttpResponse;\nimport lombok.Getter;\n\npublic class GPTRequest {\n    @Getter\n    private final int n;\n    @Getter\n    private String model;\n    @Getter\n    private final int maxPromptSize;\n    @Getter\n    private String prompt;\n    private final String url;\n    private final String method;\n    private final String requestHeaders;\n    private final String requestBody;\n    private final String responseHeaders;\n    private final String responseBody;\n\n    private final String request;\n    private final String response;\n\n    public GPTRequest(HttpRequest httpRequest, HttpResponse httpResponse, String model, int n, int maxPromptSize) {\n        this.url = httpRequest.url();\n        this.method = httpRequest.method();\n        this.requestHeaders = httpRequest.headers().toString();\n        this.requestBody = httpRequest.bodyToString();\n        this.responseHeaders = httpResponse.headers().toString();\n        this.responseBody = httpResponse.bodyToString();\n\n        this.request = httpRequest.toString();\n        this.response = httpResponse.toString();\n\n        this.model = model;\n        this.n = n;\n        this.maxPromptSize = maxPromptSize;\n    }\n", "    public void setPrompt(String prompt) {\n        String[] placeholders = {\n                \"{REQUEST}\", \"{RESPONSE}\", \"{IS_TRUNCATED_PROMPT}\",\n                \"{URL}\", \"{METHOD}\", \"{REQUEST_HEADERS}\",\n                \"{REQUEST_BODY}\", \"{RESPONSE_HEADERS}\", \"{RESPONSE_BODY}\" };\n        String[] replacements = {\n                request, response, Boolean.toString(prompt.length() > maxPromptSize),\n                url, method, requestHeaders,\n                requestBody, responseHeaders, responseBody };\n\n        for (int i = 0; i < placeholders.length; i++) {\n            prompt = prompt.replace(placeholders[i], replacements[i]);\n        }\n", "        for (int i = 0; i < placeholders.length; i++) {\n            prompt = prompt.replace(placeholders[i], replacements[i]);\n        }\n\n        if (prompt.length() > maxPromptSize) {\n            prompt = prompt.substring(0, maxPromptSize);\n        }\n\n        this.prompt = prompt;\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gpt/GPTResponse.java", "chunked_list": ["package burpgpt.gpt;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.gson.annotations.SerializedName;\n\nimport lombok.Getter;\n\n@Getter\npublic class GPTResponse {\n    private List<Choice> choices;\n    private String model;\n    private String id;\n    @SerializedName(\"created\")\n    private long createdTimestamp;\n    @SerializedName(\"usage\")\n    private Usage usage;\n\n    public GPTResponse(List<Choice> choices) {\n        this.choices = choices;\n    }\n\n    @Getter", "\n@Getter\npublic class GPTResponse {\n    private List<Choice> choices;\n    private String model;\n    private String id;\n    @SerializedName(\"created\")\n    private long createdTimestamp;\n    @SerializedName(\"usage\")\n    private Usage usage;\n\n    public GPTResponse(List<Choice> choices) {\n        this.choices = choices;\n    }\n\n    @Getter", "    public class Choice {\n        private String text;\n        private int index;\n        private Object logprobs; // or use a specific class structure if needed\n        @SerializedName(\"finish_reason\")\n        private String finishReason;\n\n        @Override\n        public String toString() {\n            return \"Choice{\" +\n                    \"text='\" + text + '\\'' +\n                    \", index=\" + index +\n                    \", logprobs=\" + logprobs +\n                    \", finishReason='\" + finishReason + '\\'' +\n                    '}';\n        }\n    }\n\n    public List<String> getChoiceTexts() {\n        List<String> choiceTexts = new ArrayList<>();", "        public String toString() {\n            return \"Choice{\" +\n                    \"text='\" + text + '\\'' +\n                    \", index=\" + index +\n                    \", logprobs=\" + logprobs +\n                    \", finishReason='\" + finishReason + '\\'' +\n                    '}';\n        }\n    }\n\n    public List<String> getChoiceTexts() {\n        List<String> choiceTexts = new ArrayList<>();", "        for (Choice choice : choices) {\n            choiceTexts.add(choice.getText());\n        }\n        return choiceTexts;\n    }\n\n    @Getter\n    public static class Usage {\n        private long promptTokens;\n        private long completionTokens;\n        private long totalTokens;\n\n        @Override", "        public String toString() {\n            return \"Usage{\" +\n                    \"promptTokens=\" + promptTokens +\n                    \", completionTokens=\" + completionTokens +\n                    \", totalTokens=\" + totalTokens +\n                    '}';\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"GPTResponse{\" +\n                \"choices=\" + choices +\n                \", model='\" + model + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", createdTimestamp=\" + createdTimestamp +\n                \", usage=\" + usage +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"GPTResponse{\" +\n                \"choices=\" + choices +\n                \", model='\" + model + '\\'' +\n                \", id='\" + id + '\\'' +\n                \", createdTimestamp=\" + createdTimestamp +\n                \", usage=\" + usage +\n                '}';\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/http/GPTClient.java", "chunked_list": ["package burpgpt.http;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.lang3.tuple.Pair;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n", "import com.google.gson.JsonObject;\n\nimport burp.MyBurpExtension;\nimport burp.api.montoya.http.message.HttpRequestResponse;\nimport burp.api.montoya.http.message.requests.HttpRequest;\nimport burp.api.montoya.http.message.responses.HttpResponse;\nimport burp.api.montoya.logging.Logging;\nimport burpgpt.gpt.GPTRequest;\nimport burpgpt.gpt.GPTResponse;\nimport okhttp3.MediaType;", "import burpgpt.gpt.GPTResponse;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport okio.Buffer;\n\npublic class GPTClient {\n\n  private String apiKey;\n  private String model;\n  private int maxPromptSize;\n  private String prompt;\n  private final OkHttpClient client;\n  private final Gson gson;\n  private Logging logging;\n\n  public GPTClient(String apiKey, String model, String prompt, Logging logging) {\n    this.apiKey = apiKey;\n    this.model = model;\n    this.prompt = prompt;\n    this.logging = logging;\n    client = new OkHttpClient.Builder()\n        .connectTimeout(60, TimeUnit.SECONDS)\n        .readTimeout(60, TimeUnit.SECONDS)\n        .writeTimeout(60, TimeUnit.SECONDS)\n        .build();\n    gson = new Gson();\n  }\n", "public class GPTClient {\n\n  private String apiKey;\n  private String model;\n  private int maxPromptSize;\n  private String prompt;\n  private final OkHttpClient client;\n  private final Gson gson;\n  private Logging logging;\n\n  public GPTClient(String apiKey, String model, String prompt, Logging logging) {\n    this.apiKey = apiKey;\n    this.model = model;\n    this.prompt = prompt;\n    this.logging = logging;\n    client = new OkHttpClient.Builder()\n        .connectTimeout(60, TimeUnit.SECONDS)\n        .readTimeout(60, TimeUnit.SECONDS)\n        .writeTimeout(60, TimeUnit.SECONDS)\n        .build();\n    gson = new Gson();\n  }\n", "  public void updateSettings(String newApiKey, String newModelId, int newMaxPromptSize, String newPrompt) {\n    this.apiKey = newApiKey;\n    this.model = newModelId;\n    this.maxPromptSize = newMaxPromptSize;\n    this.prompt = newPrompt;\n  }\n\n  public Pair<GPTRequest, GPTResponse> identifyVulnerabilities(HttpRequestResponse selectedMessage) throws IOException {\n    HttpRequest selectedRequest = selectedMessage.request();\n    HttpResponse selectedResponse = selectedMessage.response();\n", "    if (MyBurpExtension.DEBUG) {\n      logging.logToOutput(\"[*] Selected request:\");\n      logging.logToOutput(String.format(\"- url: %s\\n\" +\n          \"- method: %s\\n\" +\n          \"- headers: %s\\n\" +\n          \"- body: %s\",\n          selectedRequest.url(),\n          selectedRequest.method(),\n          selectedRequest.headers().toString(),\n          selectedRequest.bodyToString()));\n\n      logging.logToOutput(\"[*] Selected response:\");\n      logging.logToOutput(String.format(\"- headers: %s\\n\" +\n          \"- body: %s\",\n          selectedResponse.headers().toString(),\n          selectedResponse.bodyToString()));\n    }\n\n    // This code sends the selected request/response information to ChatGPT\n    // and receives a list of potential vulnerabilities in response.\n    // TODO: Add a field to specify the maxTokens value", "    try {\n      GPTRequest gptRequest = new GPTRequest(selectedRequest, selectedResponse, model, 1, maxPromptSize);\n      GPTResponse gptResponse = getCompletions(gptRequest, apiKey, model, prompt);\n      return Pair.of(gptRequest, gptResponse);\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n  private GPTResponse getCompletions(GPTRequest gptRequest, String apiKey, String model, String prompt)\n      throws IOException {\n    gptRequest.setPrompt(prompt);\n\n    String apiEndpoint = \"https://api.openai.com/v1/completions\";\n    MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");\n    JsonObject jsonObject = new JsonObject();\n    jsonObject.addProperty(\"prompt\", gptRequest.getPrompt());\n    jsonObject.addProperty(\"max_tokens\", gptRequest.getMaxPromptSize());\n    jsonObject.addProperty(\"n\", gptRequest.getN());\n    jsonObject.addProperty(\"model\", model);\n    String jsonBody = gson.toJson(jsonObject);\n\n    RequestBody body = RequestBody.create(jsonBody, JSON);\n    Request request = new Request.Builder()\n        .url(apiEndpoint)\n        .addHeader(\"Content-Type\", \"application/json\")\n        .addHeader(\"Authorization\", \"Bearer \" + apiKey)\n        .post(body)\n        .build();\n", "    if (MyBurpExtension.DEBUG) {\n      // Write the request body to a buffer\n      Buffer buffer = new Buffer();\n      request.body().writeTo(buffer);\n\n      logging.logToOutput(\"[+] Completion request sent:\");\n      logging.logToOutput(String.format(\"- request: %s\\n\" +\n          \"- requestBody: %s\", request, buffer.readUtf8()));\n    }\n\n    try (Response response = client.newCall(request).execute()) {", "      if (!response.isSuccessful()) {\n        handleErrorResponse(response);\n      } else {\n        String responseBody = response.body().string();\n\n        if (MyBurpExtension.DEBUG) {\n          logging.logToOutput(\"[+] Completion response received:\");\n          logging.logToOutput(String.format(\"- responseBody: %s\",\n              responseBody));\n        }\n\n        return gson.fromJson(responseBody, GPTResponse.class);\n      }\n    } catch (IOException e) {\n      throw new IOException(e);\n    }\n\n    return null;\n  }\n\n  private void handleErrorResponse(Response response) throws IOException {\n    int statusCode = response.code();\n    String responseBody = response.body().string();\n\n    switch (statusCode) {\n      case 400:\n        throw new IOException(String.format(\"Bad request (400): %s\", responseBody));\n      case 401:\n        throw new IOException(String.format(\"Unauthorized (401): %s\", responseBody));\n      case 429:\n        throw new IOException(String.format(\"Too many requests (429): %s\", responseBody));\n      default:\n        throw new IOException(\n            String.format(\"Unhandled response code (%d): %s\", statusCode, responseBody));\n    }\n  }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gui/MyMenu.java", "chunked_list": ["package burpgpt.gui;\n\nimport burp.MyBurpExtension;\nimport burp.api.montoya.ui.menu.BasicMenuItem;\nimport burp.api.montoya.ui.menu.Menu;\n\npublic class MyMenu {\n\n    public static Menu createMenu(MyBurpExtension myBurpExtension) {\n        BasicMenuItem basicMenuItem = BasicMenuItem.basicMenuItem(\"Settings\").withAction(() -> {\n            ControllerDialog settingsPanel = new ControllerDialog(myBurpExtension);\n            settingsPanel.setVisible(true);\n        });\n        Menu menu = Menu.menu(MyBurpExtension.EXTENSION).withMenuItems(basicMenuItem);\n        return menu;\n    }\n}\n", "    public static Menu createMenu(MyBurpExtension myBurpExtension) {\n        BasicMenuItem basicMenuItem = BasicMenuItem.basicMenuItem(\"Settings\").withAction(() -> {\n            ControllerDialog settingsPanel = new ControllerDialog(myBurpExtension);\n            settingsPanel.setVisible(true);\n        });\n        Menu menu = Menu.menu(MyBurpExtension.EXTENSION).withMenuItems(basicMenuItem);\n        return menu;\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gui/ControllerDialog.java", "chunked_list": ["package burpgpt.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.CardLayout;\nimport java.awt.Dimension;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.swing.JDialog;\nimport javax.swing.JList;", "import javax.swing.JDialog;\nimport javax.swing.JList;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.ListSelectionModel;\n\nimport burp.MyBurpExtension;\nimport burpgpt.gui.views.AboutView;\nimport burpgpt.gui.views.PlaceholdersView;\nimport burpgpt.gui.views.SettingsView;", "import burpgpt.gui.views.PlaceholdersView;\nimport burpgpt.gui.views.SettingsView;\n\npublic class ControllerDialog extends JDialog {\n\n    private final MyBurpExtension myBurpExtension;\n\n    private JList<String> listView;\n\n    private final SettingsView settingsView;\n    private final PlaceholdersView placeholdersView;\n    private final AboutView aboutView;\n\n    private Map<String, JPanel> viewMap = new HashMap<>();\n\n    public ControllerDialog(MyBurpExtension myBurpExtension) {\n        this.myBurpExtension = myBurpExtension;\n\n        settingsView = new SettingsView(myBurpExtension);\n        placeholdersView = new PlaceholdersView();\n        aboutView = new AboutView();\n\n        setupDialog();\n        initComponents();\n        registerApplyButtonListener();\n\n        myBurpExtension.getMontoyaApi().userInterface().applyThemeToComponent(this);\n\n        pack();\n        setLocationRelativeTo(myBurpExtension.getMontoyaApi().userInterface().swingUtils().suiteFrame());\n    }\n\n    private void setupDialog() {\n        setTitle(String.format(\"%s Settings\", MyBurpExtension.EXTENSION));\n        setLayout(new BorderLayout());\n        setResizable(false);\n        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        // setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);\n    }\n\n    private void initComponents() {\n        listView = createListView();\n\n        JPanel listPanel = new JPanel(new BorderLayout());\n        listPanel.setPreferredSize(new Dimension(150, 0));\n        listPanel.add(new JScrollPane(listView), BorderLayout.CENTER);\n\n        add(listPanel, BorderLayout.WEST);\n\n        viewMap.put(\"OpenAI API\", settingsView);\n        viewMap.put(\"Placeholder reference\", placeholdersView);\n        viewMap.put(\"About\", aboutView);\n\n        JPanel cardsPanel = new JPanel(new CardLayout());", "        for (JPanel view : viewMap.values()) {\n            view.setPreferredSize(settingsView.getPreferredSize());\n            cardsPanel.add(view, view.getClass().getName());\n        }\n        add(cardsPanel, BorderLayout.CENTER);\n\n        setDefaultView(\"OpenAI API\");\n    }\n\n    private void registerApplyButtonListener() {\n        settingsView.setOnApplyButtonClickListener(() -> {\n            setVisible(false);\n        });\n    }\n\n    private void setDefaultView(String viewName) {\n        listView.setSelectedValue(viewName, true);\n    }\n\n    private JList<String> createListView() {\n        String[] listData = { \"OpenAI API\", \"Placeholder reference\", \"About\" };\n        JList<String> listView = new JList<>(listData);\n        listView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n        listView.addListSelectionListener(e -> {", "            if (!e.getValueIsAdjusting()) {\n                String selectedValue = listView.getSelectedValue();\n                updateView(selectedValue);\n            }\n        });\n\n        return listView;\n    }\n\n    private void updateView(String selectedValue) {\n        JPanel selectedPanel = viewMap.get(selectedValue);", "        if (selectedPanel != null) {\n            CardLayout cardLayout = (CardLayout) (((JPanel) getContentPane().getComponent(1)).getLayout());\n            cardLayout.show((JPanel) getContentPane().getComponent(1), selectedPanel.getClass().getName());\n        } else {\n            // Handle the case when the selected value is not found in the viewMap\n            System.err.println(\"View not found: \" + selectedValue);\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gui/views/PlaceholdersView.java", "chunked_list": ["package burpgpt.gui.views;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;", "import javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\n\npublic class PlaceholdersView extends JPanel {\n\n    public PlaceholdersView() {\n        setLayout(new BorderLayout());\n        setBorder(BorderFactory.createEmptyBorder(16, 16, 16, 16)); // add 16-pixel padding to the root panel\n        add(initComponents(), BorderLayout.CENTER);\n    }\n\n    private JPanel initComponents() {\n        JPanel contentPanel = new JPanel();\n        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.PAGE_AXIS));\n\n        contentPanel.add(createIntroLabel());\n        contentPanel.add(Box.createRigidArea(new Dimension(0, 16)));\n        contentPanel.add(createTableScrollPane());\n\n        return contentPanel;\n    }\n\n    private JLabel createIntroLabel() {\n        String intro = \"<html>\"\n                + \"<div id='descriptionDiv' style='width: 800px'>\"\n                + \"<p>The prompt customization feature provided by the extension allows users to tailor traffic analysis prompts using a placeholder system. \"\n                + \"For optimal results, it is recommended to use the placeholders provided by the extension.</p>\"\n                + \"<br />\"\n                + \"<p>The following table shows the available placeholders and their corresponding values:</p>\"\n                + \"</div>\"\n                + \"</html>\";\n        JLabel introLabel = new JLabel();\n        introLabel.setText(intro);\n        introLabel.putClientProperty(\"html.disable\", null);\n        return introLabel;\n    }\n\n    private Object[][] getTableData() {\n        return new Object[][] {\n                { \"{REQUEST}\", \"The scanned request.\" },\n                { \"{URL}\", \"The URL of the scanned request.\" },\n                { \"{METHOD}\", \"The HTTP request method used in the scanned request.\" },\n                { \"{REQUEST_HEADERS}\", \"The headers of the scanned request.\" },\n                { \"{REQUEST_BODY}\", \"The body of the scanned request.\" },\n                { \"{RESPONSE}\", \"The scanned response.\" },\n                { \"{RESPONSE_HEADERS}\", \"The headers of the scanned response.\" },\n                { \"{RESPONSE_BODY}\", \"The body of the scanned response.\" },\n                { \"{IS_TRUNCATED_PROMPT}\",\n                        \"A boolean value that is programmatically set to true or false to indicate whether the prompt was truncated to the Maximum Prompt Size defined in the Settings.\" }\n        };\n    }\n\n    private JScrollPane createTableScrollPane() {\n        String[] columnNames = { \"Placeholder\", \"Value\" };\n        Object[][] data = getTableData();\n        NonEditableTableModel tableModel = new NonEditableTableModel(data, columnNames);\n        JTable table = new JTable(tableModel);\n        JScrollPane scrollPane = new JScrollPane(table);\n        return scrollPane;\n    }\n\n    private class NonEditableTableModel extends DefaultTableModel {\n        public NonEditableTableModel(Object[][] data, Object[] columnNames) {\n            super(data, columnNames);\n        }\n\n        @Override", "        public boolean isCellEditable(int row, int column) {\n            return false;\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gui/views/AboutView.java", "chunked_list": ["package burpgpt.gui.views;\n\nimport java.awt.Color;\nimport java.awt.Desktop;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.net.URI;", "import java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Calendar;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.GroupLayout;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;", "import javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.LayoutStyle;\nimport javax.swing.ScrollPaneConstants;\nimport javax.swing.ToolTipManager;\nimport javax.swing.UIManager;\n\nimport burp.MyBurpExtension;\nimport burpgpt.utilities.HtmlResourceLoader;", "import burp.MyBurpExtension;\nimport burpgpt.utilities.HtmlResourceLoader;\n\npublic class AboutView extends JPanel {\n\n    private static final int COPYRIGHT_FONT_SIZE = 12;\n    private static final String WEBSITE = \"https://burpgpt.app/#pricing\";\n\n    public AboutView() {\n        setLayout(new GroupLayout(this));\n        setBorder(BorderFactory.createEmptyBorder(16, 16, 16, 16));\n        initComponents();\n        enableTooltips();\n    }\n", "    public void initComponents() {\n        JLabel titleLabel = createTitleLabel();\n        JLabel copyRightLabel = createCopyRightLabel();\n        JLabel descriptionLabel = createDescriptionLabel();\n        JScrollPane descriptionScrollPane = new JScrollPane(descriptionLabel);\n        descriptionScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\n        descriptionScrollPane.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));\n        descriptionScrollPane.setBorder(BorderFactory.createEmptyBorder());\n        JButton upgradeButton = createUpgradeButton();\n\n        GroupLayout layout = (GroupLayout) getLayout();\n\n        GroupLayout.Group horizontalGroup = layout.createParallelGroup(GroupLayout.Alignment.CENTER)\n                .addComponent(titleLabel)\n                .addComponent(copyRightLabel)\n                .addComponent(descriptionScrollPane)\n                .addComponent(upgradeButton);\n        layout.setHorizontalGroup(horizontalGroup);\n\n        GroupLayout.Group verticalGroup = layout.createSequentialGroup()\n                .addComponent(titleLabel)\n                .addComponent(copyRightLabel)\n                .addGap(16)\n                .addComponent(descriptionScrollPane)\n                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(upgradeButton);\n        layout.setVerticalGroup(verticalGroup);\n    }\n\n    private JLabel createTitleLabel() {\n        String title = String.format(\"<html><h1>%s v%s</h1></html>\", MyBurpExtension.EXTENSION,\n                MyBurpExtension.VERSION);\n        JLabel titleLabel = new JLabel(title);\n        titleLabel.putClientProperty(\"html.disable\", null);\n        return titleLabel;\n    }\n\n    private JLabel createCopyRightLabel() {\n        String year = String.valueOf(Calendar.getInstance().get(Calendar.YEAR));\n        String copyRight = String.format(\n                \"<html>Copyright &copy; %s - %s Alexandre Teyar, Aegis Cyber &lt;<a href=\\\"https://aegiscyber.co.uk\\\">www.aegiscyber.co.uk</a>&gt;. All Rights Reserved.</html>\",\n                year, year);\n        JLabel copyRightLabel = new JLabel(copyRight);\n        copyRightLabel.setFont(new Font(copyRightLabel.getFont().getName(), Font.PLAIN, COPYRIGHT_FONT_SIZE));\n        copyRightLabel.setForeground(Color.GRAY);\n        copyRightLabel.putClientProperty(\"html.disable\", null);\n        return copyRightLabel;\n    }\n\n    private JLabel createDescriptionLabel() {\n        String description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");\n        JLabel descriptionLabel = new JLabel(description);\n        descriptionLabel.putClientProperty(\"html.disable\", null);\n        return descriptionLabel;\n    }\n\n    private JButton createUpgradeButton() {\n        JButton upgradeButton = new JButton(\"Upgrade to the Pro edition\");\n        upgradeButton.setToolTipText(\"Upgrade to the Pro edition by visiting our official website\");\n        upgradeButton.setBackground(UIManager.getColor(\"Burp.burpOrange\"));\n        upgradeButton.setForeground(Color.WHITE);\n        upgradeButton.setFont(upgradeButton.getFont().deriveFont(Font.BOLD));\n        upgradeButton.addActionListener(new ActionListener() {\n            @Override", "            public void actionPerformed(ActionEvent e) {\n                try {\n                    Desktop.getDesktop().browse(new URI(WEBSITE));\n                } catch (IOException | URISyntaxException e1) {\n                    // pass\n                }\n            }\n        });\n        return upgradeButton;\n    }\n\n    private void enableTooltips() {\n        ToolTipManager.sharedInstance().setInitialDelay(0);\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/gui/views/SettingsView.java", "chunked_list": ["package burpgpt.gui.views;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n", "import java.beans.PropertyChangeListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTextArea;", "import javax.swing.JSpinner;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.UIManager;\n\nimport burp.MyBurpExtension;\n\npublic class SettingsView extends JPanel implements PropertyChangeListener {\n\n    private MyBurpExtension myBurpExtension;\n\n    private JTextField apiKeyField;\n    private JComboBox<String> modelIdComboBox;\n    private JSpinner maxPromptSizeField;\n    private JTextArea promptField;\n\n    private String model;\n", "public class SettingsView extends JPanel implements PropertyChangeListener {\n\n    private MyBurpExtension myBurpExtension;\n\n    private JTextField apiKeyField;\n    private JComboBox<String> modelIdComboBox;\n    private JSpinner maxPromptSizeField;\n    private JTextArea promptField;\n\n    private String model;\n", "    public interface OnApplyButtonClickListener {\n        void onApplyButtonClick();\n    }\n\n    private OnApplyButtonClickListener onApplyButtonClickListener;\n\n    public void setOnApplyButtonClickListener(OnApplyButtonClickListener onApplyButtonClickListener) {\n        this.onApplyButtonClickListener = onApplyButtonClickListener;\n    }\n\n    public SettingsView(MyBurpExtension myBurpExtension) {\n        this.myBurpExtension = myBurpExtension;\n\n        setLayout(new GridBagLayout());\n        initComponents();\n\n        myBurpExtension.addPropertyChangeListener(this);\n    }\n\n    private void initComponents() {\n        createApiKeyField(0);\n        createModelIdComboBox(1);\n        createMaxPromptSizeField(2);\n        createPromptField(3);\n        createPromptDescriptionLabel(4);\n        createApplyButton(5);\n    }\n\n    private void createApiKeyField(int y) {\n        JLabel apiKeyLabel = new JLabel(\"API key:\");\n        apiKeyField = new JTextField(myBurpExtension.getApiKey(), 20);\n        add(apiKeyLabel, createGridBagConstraints(0, y));\n        add(apiKeyField, createGridBagConstraints(1, y));\n    }\n\n    private void createModelIdComboBox(int y) {\n        JLabel modelIdLabel = new JLabel(\"Model:\");\n        modelIdComboBox = new JComboBox<>(myBurpExtension.getModelIds().toArray(new String[0]));\n        modelIdComboBox.setSelectedItem(myBurpExtension.getModel());\n        modelIdComboBox.addActionListener(e -> model = (String) modelIdComboBox.getSelectedItem());\n        add(modelIdLabel, createGridBagConstraints(0, y));\n        add(modelIdComboBox, createGridBagConstraints(1, y));\n    }\n\n    private void createMaxPromptSizeField(int y) {\n        JLabel maxPromptSizeLabel = new JLabel(\"Maximum prompt size:\");\n        maxPromptSizeField = new JSpinner(\n                new SpinnerNumberModel(myBurpExtension.getMaxPromptSize(), 1, Integer.MAX_VALUE, 1));\n        add(maxPromptSizeLabel, createGridBagConstraints(0, y));\n        add(maxPromptSizeField, createGridBagConstraints(1, y));\n    }\n\n    private void createPromptField(int y) {\n        JLabel promptLabel = new JLabel(\"Prompt:\");\n        promptField = new JTextArea(myBurpExtension.getPrompt(), 14, 20);\n        promptField.setWrapStyleWord(true);\n        promptField.setLineWrap(true);\n        JScrollPane promptScrollPane = new JScrollPane(promptField);\n        add(promptLabel, createGridBagConstraints(0, y));\n        add(promptScrollPane, createGridBagConstraints(1, y));\n    }\n\n    private void createPromptDescriptionLabel(int y) {\n        JLabel promptDescriptionLabel = new JLabel(\n                \"<html>Refer to the repository (<a href=\\\"https://github.com/aress31/burpgpt\\\">https://github.com/aress31/burpgpt</a>) to learn how to optimally set the prompt for the GPT model.</html>\");\n        promptDescriptionLabel.putClientProperty(\"html.disable\", null);\n        add(promptDescriptionLabel, createGridBagConstraints(1, y));\n    }\n\n    private void createApplyButton(int y) {\n        JButton applyButton = new JButton(\"Apply\");\n        applyButton.addActionListener(e -> applySettings());\n        applyButton.setBackground(UIManager.getColor(\"Burp.burpOrange\"));\n        applyButton.setForeground(Color.WHITE);\n        applyButton.setFont(applyButton.getFont().deriveFont(Font.BOLD));\n        add(applyButton, createGridBagConstraints(1, y));\n    }\n\n    private void applySettings() {\n        String newApiKey = apiKeyField.getText().trim();\n        String newModelId = (String) modelIdComboBox.getSelectedItem();\n        int newMaxPromptSize = (int) maxPromptSizeField.getValue();\n        String newPromptText = promptField.getText().trim();\n", "        if (newApiKey.isEmpty() || newModelId.isEmpty() || newPromptText.isEmpty() || newMaxPromptSize <= 0) {\n            JOptionPane.showMessageDialog(SettingsView.this,\n                    \"All fields are required and max prompt size must be greater than 0\", \"Error\",\n                    JOptionPane.ERROR_MESSAGE);\n            return;\n        }\n\n        myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);\n\n        if (onApplyButtonClickListener != null) {\n            onApplyButtonClickListener.onApplyButtonClick();\n        }\n    }\n\n    private GridBagConstraints createGridBagConstraints(int x, int y) {\n        GridBagConstraints constraints = new GridBagConstraints();\n        constraints.gridx = x;\n        constraints.gridy = y;\n        constraints.weightx = x == 0 ? 0 : 1;\n        constraints.weighty = 0.5;\n        constraints.insets = new Insets(16, x == 0 ? 16 : 4, 16, x == 0 ? 4 : 16);\n        constraints.anchor = y != 5 ? GridBagConstraints.LINE_START : GridBagConstraints.LINE_END;\n        constraints.fill = (x == 0 || y == 5) ? GridBagConstraints.NONE : GridBagConstraints.HORIZONTAL;\n        return constraints;\n    }\n\n    @Override", "        if (onApplyButtonClickListener != null) {\n            onApplyButtonClickListener.onApplyButtonClick();\n        }\n    }\n\n    private GridBagConstraints createGridBagConstraints(int x, int y) {\n        GridBagConstraints constraints = new GridBagConstraints();\n        constraints.gridx = x;\n        constraints.gridy = y;\n        constraints.weightx = x == 0 ? 0 : 1;\n        constraints.weighty = 0.5;\n        constraints.insets = new Insets(16, x == 0 ? 16 : 4, 16, x == 0 ? 4 : 16);\n        constraints.anchor = y != 5 ? GridBagConstraints.LINE_START : GridBagConstraints.LINE_END;\n        constraints.fill = (x == 0 || y == 5) ? GridBagConstraints.NONE : GridBagConstraints.HORIZONTAL;\n        return constraints;\n    }\n\n    @Override", "    public void propertyChange(PropertyChangeEvent evt) {\n        if (\"settingsChanged\".equals(evt.getPropertyName())) {\n            String[] newValues = (String[]) evt.getNewValue();\n            apiKeyField.setText(newValues[0]);\n            modelIdComboBox.setSelectedItem(newValues[1]);\n            maxPromptSizeField.setValue(Integer.parseInt(newValues[2]));\n            promptField.setText(newValues[3]);\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/burpgpt/utilities/HtmlResourceLoader.java", "chunked_list": ["package burpgpt.utilities;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\n\npublic class HtmlResourceLoader {\n\n    public static String loadHtmlContent(String resourceName) {\n        StringBuilder content = new StringBuilder();\n        try (InputStream inputStream = HtmlResourceLoader.class.getClassLoader().getResourceAsStream(resourceName);\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {\n\n            String line;", "public class HtmlResourceLoader {\n\n    public static String loadHtmlContent(String resourceName) {\n        StringBuilder content = new StringBuilder();\n        try (InputStream inputStream = HtmlResourceLoader.class.getClassLoader().getResourceAsStream(resourceName);\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {\n\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                content.append(line);\n                content.append(System.lineSeparator());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return content.toString();\n    }\n}", "            while ((line = bufferedReader.readLine()) != null) {\n                content.append(line);\n                content.append(System.lineSeparator());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return content.toString();\n    }\n}"]}
