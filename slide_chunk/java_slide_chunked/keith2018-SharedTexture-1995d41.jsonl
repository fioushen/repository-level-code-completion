{"filename": "shared/src/test/java/me/robot9/shared/ExampleUnitTest.java", "chunked_list": ["package me.robot9.shared;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "shared/src/main/java/me/robot9/shared/SharedTexture.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.hardware.HardwareBuffer;\nimport android.os.ParcelFileDescriptor;", "import android.hardware.HardwareBuffer;\nimport android.os.ParcelFileDescriptor;\nimport android.util.Log;\n\n\npublic class SharedTexture {\n\n    private static final String TAG = \"SharedTexture\";\n    private static final int EGL_NO_NATIVE_FENCE_FD_ANDROID = -1;\n    private static boolean available = false;\n\n    static {\n        System.loadLibrary(\"shared-texture\");\n    }\n\n    static {", "        try {\n            available = available();\n        } catch (Throwable t) {\n            Log.e(TAG, \"SharedTexture check available error: \" + t);\n        }\n\n        Log.d(TAG, \"SharedTexture available: \" + available);\n        if (!available) {\n            Log.e(TAG, \"SharedTexture not available\");\n        }\n    }\n\n    private long nativeContext = 0;\n    private HardwareBuffer buffer = null;\n\n    public SharedTexture(HardwareBuffer buff) {\n        Log.d(TAG, \"create SharedTexture from buffer\");\n        nativeContext = createFromBuffer(buff);\n        buffer = buff;\n    }\n\n    public SharedTexture(int width, int height) {\n        Log.d(TAG, \"create new SharedTexture:(\" + width + \",\" + height + \")\");\n        nativeContext = create(width, height);\n    }\n", "    public static boolean isAvailable() {\n        return available;\n    }\n\n    public HardwareBuffer getHardwareBuffer() {\n        if (nativeContext != 0) {\n            if (buffer != null) {\n                buffer.close();\n                buffer = null;\n            }\n            buffer = getBuffer(nativeContext);\n            return buffer;\n        }\n        return null;\n    }\n", "    public boolean bindTexture(int texId) {\n        if (nativeContext != 0) {\n            return bindTexture(nativeContext, texId);\n        }\n        return false;\n    }\n\n    public int getBufferWidth() {\n        if (nativeContext != 0) {\n            return getWidth(nativeContext);\n        }\n        return 0;\n    }\n", "        if (nativeContext != 0) {\n            return getWidth(nativeContext);\n        }\n        return 0;\n    }\n\n    public int getBufferHeight() {\n        if (nativeContext != 0) {\n            return getHeight(nativeContext);\n        }\n        return 0;\n    }\n", "    public int getBindTexture() {\n        if (nativeContext != 0) {\n            return getBindTexture(nativeContext);\n        }\n        return 0;\n    }\n\n    public ParcelFileDescriptor createFence() {\n        int fd = createEGLFence();\n        if (fd != EGL_NO_NATIVE_FENCE_FD_ANDROID) {\n            return ParcelFileDescriptor.adoptFd(fd);\n        }\n        return null;\n    }\n", "        if (fd != EGL_NO_NATIVE_FENCE_FD_ANDROID) {\n            return ParcelFileDescriptor.adoptFd(fd);\n        }\n        return null;\n    }\n\n    public boolean waitFence(ParcelFileDescriptor pfd) {\n        if (pfd != null) {\n            int fd = pfd.detachFd();\n            if (fd != EGL_NO_NATIVE_FENCE_FD_ANDROID) {\n                return waitEGLFence(fd);\n            }\n        }\n\n        return false;\n    }\n", "            if (fd != EGL_NO_NATIVE_FENCE_FD_ANDROID) {\n                return waitEGLFence(fd);\n            }\n        }\n\n        return false;\n    }\n\n    public void release() {\n        if (nativeContext != 0) {\n            Log.d(TAG, \"destroy\");", "    public void release() {\n        if (nativeContext != 0) {\n            Log.d(TAG, \"destroy\");\n            if (buffer != null) {\n                buffer.close();\n                buffer = null;\n            }\n            destroy(nativeContext);\n            nativeContext = 0;\n        }\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        super.finalize();\n        release();\n    }\n\n    private static native boolean available();\n\n    private static native int createEGLFence();\n\n    private static native boolean waitEGLFence(int fenceFd);\n\n    private native long create(int width, int height);\n\n    private native long createFromBuffer(HardwareBuffer buffer);\n\n    private native HardwareBuffer getBuffer(long ctx);\n\n    private native boolean bindTexture(long ctx, int texId);\n\n    private native int getWidth(long ctx);\n\n    private native int getHeight(long ctx);\n\n    private native int getBindTexture(long ctx);\n\n    private native void destroy(long ctx);\n}\n"]}
{"filename": "shared/src/androidTest/java/me/robot9/shared/ExampleInstrumentedTest.java", "chunked_list": ["package me.robot9.shared;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"me.robot9.shared.test\", appContext.getPackageName());\n    }\n}"]}
{"filename": "app/src/test/java/me/robot9/shared/ExampleUnitTest.java", "chunked_list": ["package me.robot9.shared;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "app/src/main/java/me/robot9/shared/MainActivity.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.content.ComponentName;\nimport android.content.Intent;", "import android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.opengl.GLES20;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.ParcelFileDescriptor;\nimport android.os.RemoteException;\nimport android.util.Log;\nimport android.widget.Toast;", "import android.util.Log;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport me.robot9.shared.databinding.ActivityMainBinding;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = \"MainActivity\";\n\n    private ActivityMainBinding binding;\n    private OnscreenRenderView surfaceView;\n\n    private ServiceConnection aidlConnection;\n    private IOffscreenInterface aidlInterface;\n\n    private QuadRenderer quadRenderer;\n    private SharedTexture sharedTexture;\n    private int renderWidth = 0;\n    private int renderHeight = 0;\n    private int texId = 0;\n\n    private final AtomicBoolean aidlReady = new AtomicBoolean(false);\n    private final AtomicBoolean renderReady = new AtomicBoolean(false);\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        initGLSurfaceView();\n", "\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = \"MainActivity\";\n\n    private ActivityMainBinding binding;\n    private OnscreenRenderView surfaceView;\n\n    private ServiceConnection aidlConnection;\n    private IOffscreenInterface aidlInterface;\n\n    private QuadRenderer quadRenderer;\n    private SharedTexture sharedTexture;\n    private int renderWidth = 0;\n    private int renderHeight = 0;\n    private int texId = 0;\n\n    private final AtomicBoolean aidlReady = new AtomicBoolean(false);\n    private final AtomicBoolean renderReady = new AtomicBoolean(false);\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        initGLSurfaceView();\n", "        if (!SharedTexture.isAvailable()) {\n            Toast.makeText(this, \"shared texture not available !\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n\n        if (SharedTexture.isAvailable()) {\n            startOffscreenService();\n        }\n        surfaceView.onResume();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n", "        if (SharedTexture.isAvailable()) {\n            startOffscreenService();\n        }\n        surfaceView.onResume();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n\n        if (SharedTexture.isAvailable()) {\n            stopOffscreenService();\n        }\n        surfaceView.onPause();\n    }\n\n    private void initGLSurfaceView() {\n        surfaceView = binding.surfaceView;\n        surfaceView.setSurfaceViewCallback(new OnscreenRenderView.SurfaceViewCallback() {\n            @Override", "        if (SharedTexture.isAvailable()) {\n            stopOffscreenService();\n        }\n        surfaceView.onPause();\n    }\n\n    private void initGLSurfaceView() {\n        surfaceView = binding.surfaceView;\n        surfaceView.setSurfaceViewCallback(new OnscreenRenderView.SurfaceViewCallback() {\n            @Override\n            public void onCreated(int width, int height) {\n                renderWidth = width;\n                renderHeight = height;\n            }\n\n            @Override", "            public void onCreated(int width, int height) {\n                renderWidth = width;\n                renderHeight = height;\n            }\n\n            @Override\n            public void onDrawFrame() {\n                GLES20.glClearColor(0, 0, 0, 0);\n                GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n\n                if (aidlReady.get()) {\n                    // init render context", "                if (aidlReady.get()) {\n                    // init render context\n                    if (!renderReady.get()) {\n                        createRenderResources();\n                        offscreenRenderInit();\n                    }\n\n                    // draw frame\n                    offscreenRenderDrawFrame();\n\n                    // draw shared texture\n                    quadRenderer.drawTexture(texId, renderWidth, renderHeight);\n                }\n            }\n\n            @Override", "            public void onDestroy() {\n                destroyRenderResources();\n            }\n        });\n    }\n\n    private void createRenderResources() {\n        Log.d(TAG, \"createRenderResources\");\n\n        quadRenderer = new QuadRenderer();\n\n        texId = EGLCore.createTexture(GLES20.GL_TEXTURE_2D);\n        sharedTexture = new SharedTexture(renderWidth, renderHeight);\n        sharedTexture.bindTexture(texId);\n\n        renderReady.set(true);\n    }\n\n    private void destroyRenderResources() {\n        Log.d(TAG, \"destroyRenderResources\");\n\n        renderReady.set(false);\n", "        if (quadRenderer != null) {\n            quadRenderer.release();\n            quadRenderer = null;\n        }\n\n        EGLCore.deleteTexture(texId);\n        if (sharedTexture != null) {\n            sharedTexture.release();\n            sharedTexture = null;\n        }\n    }\n\n    private void offscreenRenderInit() {", "        try {\n            aidlInterface.init(sharedTexture.getHardwareBuffer(), renderWidth, renderHeight);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void offscreenRenderDrawFrame() {\n        try {\n            ParcelFileDescriptor fence = aidlInterface.drawFrame();\n            if (fence != null) {\n                sharedTexture.waitFence(fence);\n            }\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void offscreenRenderDestroy() {", "        try {\n            ParcelFileDescriptor fence = aidlInterface.drawFrame();\n            if (fence != null) {\n                sharedTexture.waitFence(fence);\n            }\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void offscreenRenderDestroy() {", "        try {\n            aidlInterface.destroy();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void startOffscreenService() {\n        Log.d(TAG, \"startOffscreenService\");\n        if (aidlConnection == null) {\n            aidlConnection = new ServiceConnection() {\n                @Override", "        if (aidlConnection == null) {\n            aidlConnection = new ServiceConnection() {\n                @Override\n                public void onServiceConnected(ComponentName name, IBinder service) {\n                    Log.d(TAG, \"onServiceConnected\");\n                    aidlInterface = IOffscreenInterface.Stub.asInterface(service);\n                    aidlReady.set(true);\n                }\n\n                @Override\n                public void onServiceDisconnected(ComponentName name) {\n                    Log.d(TAG, \"onServiceDisconnected\");\n                }\n            };\n        }\n\n        Intent it = new Intent(this, OffscreenService.class);\n        bindService(it, aidlConnection, BIND_AUTO_CREATE | BIND_IMPORTANT);\n    }\n\n    private void stopOffscreenService() {\n        Log.d(TAG, \"stopOffscreenService\");\n\n        aidlReady.set(false);\n", "                public void onServiceDisconnected(ComponentName name) {\n                    Log.d(TAG, \"onServiceDisconnected\");\n                }\n            };\n        }\n\n        Intent it = new Intent(this, OffscreenService.class);\n        bindService(it, aidlConnection, BIND_AUTO_CREATE | BIND_IMPORTANT);\n    }\n\n    private void stopOffscreenService() {\n        Log.d(TAG, \"stopOffscreenService\");\n\n        aidlReady.set(false);\n", "        if (aidlInterface != null) {\n            offscreenRenderDestroy();\n            aidlInterface = null;\n        }\n\n        if (aidlConnection != null) {\n            unbindService(aidlConnection);\n            aidlConnection = null;\n        }\n    }\n}\n"]}
{"filename": "app/src/main/java/me/robot9/shared/OnscreenRenderView.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.content.Context;\nimport android.opengl.GLSurfaceView;", "import android.content.Context;\nimport android.opengl.GLSurfaceView;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.SurfaceHolder;\n\nimport javax.microedition.khronos.egl.EGLConfig;\nimport javax.microedition.khronos.opengles.GL10;\n\npublic class OnscreenRenderView extends GLSurfaceView {\n\n    private static final String TAG = \"OnscreenRenderView\";\n\n    private int renderWidth = 0;\n    private int renderHeight = 0;\n\n    private boolean firstFrame = true;\n    private SurfaceViewCallback callback;\n\n    public OnscreenRenderView(Context context) {\n        super(context);\n        init();\n    }\n\n    public OnscreenRenderView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    private void init() {\n        setEGLContextClientVersion(3);\n        setRenderer(new GLSurfaceView.Renderer() {\n            @Override", "\npublic class OnscreenRenderView extends GLSurfaceView {\n\n    private static final String TAG = \"OnscreenRenderView\";\n\n    private int renderWidth = 0;\n    private int renderHeight = 0;\n\n    private boolean firstFrame = true;\n    private SurfaceViewCallback callback;\n\n    public OnscreenRenderView(Context context) {\n        super(context);\n        init();\n    }\n\n    public OnscreenRenderView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    private void init() {\n        setEGLContextClientVersion(3);\n        setRenderer(new GLSurfaceView.Renderer() {\n            @Override", "            public void onSurfaceCreated(GL10 gl10, EGLConfig eglConfig) {\n                firstFrame = true;\n            }\n\n            @Override\n            public void onSurfaceChanged(GL10 gl10, int width, int height) {\n                renderWidth = width;\n                renderHeight = height;\n            }\n\n            @Override", "            public void onDrawFrame(GL10 gl10) {\n                if (firstFrame) {\n                    firstFrame = false;\n                    if (callback != null) {\n                        callback.onCreated(renderWidth, renderHeight);\n                    }\n                }\n\n                if (callback != null) {\n                    callback.onDrawFrame();\n                }\n            }\n        });\n    }\n\n    @Override", "                if (callback != null) {\n                    callback.onDrawFrame();\n                }\n            }\n        });\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        Log.d(TAG, \"surfaceCreated\");\n        super.surfaceCreated(holder);\n    }\n\n    @Override", "    public void surfaceCreated(SurfaceHolder holder) {\n        Log.d(TAG, \"surfaceCreated\");\n        super.surfaceCreated(holder);\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        Log.d(TAG, \"surfaceDestroyed\");\n        if (callback != null) {\n            queueEvent(new Runnable() {\n                @Override", "        if (callback != null) {\n            queueEvent(new Runnable() {\n                @Override\n                public void run() {\n                    callback.onDestroy();\n                }\n            });\n        }\n        super.surfaceDestroyed(holder);\n    }\n", "    public void setSurfaceViewCallback(SurfaceViewCallback callback) {\n        this.callback = callback;\n    }\n\n    // all call back run in GLThread\n    interface SurfaceViewCallback {\n        void onCreated(int width, int height);\n\n        void onDrawFrame();\n\n        void onDestroy();\n    }\n}\n"]}
{"filename": "app/src/main/java/me/robot9/shared/OffscreenService.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.app.Service;\nimport android.content.Intent;", "import android.app.Service;\nimport android.content.Intent;\nimport android.hardware.HardwareBuffer;\nimport android.opengl.EGL14;\nimport android.opengl.EGLSurface;\nimport android.opengl.GLES20;\nimport android.os.IBinder;\nimport android.os.ParcelFileDescriptor;\nimport android.os.RemoteException;\nimport android.util.Log;", "import android.os.RemoteException;\nimport android.util.Log;\n\nimport androidx.annotation.Nullable;\n\npublic class OffscreenService extends Service {\n    private static final String TAG = \"OffscreenService\";\n\n    private EGLCore outputEglCore = null;\n    private EGLSurface outputEGLSurface = EGL14.EGL_NO_SURFACE;\n\n    private SharedTexture sharedTexture;\n    private int renderWidth = 0;\n    private int renderHeight = 0;\n    private int texId = 0;\n    private int framebufferId = 0;\n\n    private boolean renderReady = false;\n\n    private float color = 0.f;\n\n    @Nullable\n    @Override", "    public IBinder onBind(Intent intent) {\n        return new IOffscreenInterface.Stub() {\n\n            @Override\n            public void init(HardwareBuffer buff, int width, int height) throws RemoteException {\n                Log.d(TAG, \"AIDL call: init\");\n                renderWidth = width;\n                renderHeight = height;\n\n                outputEglCore.makeCurrent(outputEGLSurface);\n\n                // create gl texture and bind to SharedTexture\n                texId = EGLCore.createTexture(GLES20.GL_TEXTURE_2D);\n                sharedTexture = new SharedTexture(buff);\n                sharedTexture.bindTexture(texId);\n\n                // render to texture\n                int[] framebuffers = new int[1];\n                GLES20.glGenFramebuffers(1, framebuffers, 0);\n                framebufferId = framebuffers[0];\n\n                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, framebufferId);\n                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, texId, 0);\n\n                renderReady = true;\n            }\n\n            @Override", "            public ParcelFileDescriptor drawFrame() throws RemoteException {\n                if (!renderReady) {\n                    return null;\n                }\n\n                outputEglCore.makeCurrent(outputEGLSurface);\n\n                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, framebufferId);\n                GLES20.glViewport(0, 0, renderWidth, renderHeight);\n\n                // change clear color every frame\n                color += 0.01f;", "                if (color > 1.f) {\n                    color = 0.f;\n                }\n                GLES20.glClearColor(color, 0, 0, 1.0f);\n                GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n\n                // TODO draw implementation\n\n                GLES20.glFlush();\n\n                return sharedTexture.createFence();\n            }\n\n            @Override", "            public void destroy() throws RemoteException {\n                Log.d(TAG, \"AIDL call: destroy\");\n                if (!renderReady) {\n                    return;\n                }\n\n                sharedTexture.release();\n                EGLCore.deleteTexture(texId);\n\n                int[] frameBuffers = new int[]{framebufferId};\n                GLES20.glDeleteFramebuffers(frameBuffers.length, frameBuffers, 0);\n            }\n        };\n    }\n\n    @Override", "    public void onCreate() {\n        super.onCreate();\n        Log.d(TAG, \"onCreate\");\n\n        // create egl context\n        outputEglCore = new EGLCore(EGL14.EGL_NO_CONTEXT, EGLCore.FLAG_TRY_GLES3);\n        outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);\n    }\n\n    @Override\n    public void onDestroy() {\n        Log.d(TAG, \"onDestroy\");\n\n        renderReady = false;\n        outputEglCore.releaseSurface(outputEGLSurface);\n        outputEglCore.release();\n\n        outputEglCore = null;\n        outputEGLSurface = EGL14.EGL_NO_SURFACE;\n\n        super.onDestroy();\n    }\n}\n", "    public void onDestroy() {\n        Log.d(TAG, \"onDestroy\");\n\n        renderReady = false;\n        outputEglCore.releaseSurface(outputEGLSurface);\n        outputEglCore.release();\n\n        outputEglCore = null;\n        outputEGLSurface = EGL14.EGL_NO_SURFACE;\n\n        super.onDestroy();\n    }\n}\n"]}
{"filename": "app/src/main/java/me/robot9/shared/EGLCore.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.graphics.SurfaceTexture;\nimport android.opengl.EGL14;", "import android.graphics.SurfaceTexture;\nimport android.opengl.EGL14;\nimport android.opengl.EGLConfig;\nimport android.opengl.EGLContext;\nimport android.opengl.EGLDisplay;\nimport android.opengl.EGLExt;\nimport android.opengl.EGLSurface;\nimport android.opengl.GLES20;\nimport android.util.Log;\nimport android.view.Surface;", "import android.util.Log;\nimport android.view.Surface;\n\npublic final class EGLCore {\n\n    public final static int FLAG_RECORDABLE = 0x01;\n    public final static int FLAG_TRY_GLES3 = 0x02;\n    private final static String TAG = \"EGLCore\";\n    private final static int EGL_RECORDABLE_ANDROID = 0x3142;\n\n    private int mGlVersion = -1;\n    private EGLConfig mEGLConfig = null;\n    private EGLDisplay mEGLDisplay = EGL14.EGL_NO_DISPLAY;\n    private EGLContext mEGLContext = EGL14.EGL_NO_CONTEXT;\n\n    public EGLCore() {\n        this(null, 0);\n    }\n\n    public EGLCore(EGLContext sharedContext, int flag) {\n        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n        int[] version = new int[2];", "        if (!EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1)) {\n            throw new RuntimeException(\"unable to init EGL14\");\n        }\n\n        if ((flag & FLAG_TRY_GLES3) != 0) {\n            initEGLContext(sharedContext, flag, 3);\n        }\n        if (mEGLContext == EGL14.EGL_NO_CONTEXT) {\n            initEGLContext(sharedContext, flag, 2);\n        }\n\n        int[] value = new int[1];\n        EGL14.eglQueryContext(mEGLDisplay, mEGLContext, EGL14.EGL_CONTEXT_CLIENT_VERSION, value, 0);\n        Log.i(TAG, \"EGLContext client version=\" + value[0]);\n    }\n", "    public static int createTexture(int target) {\n        int[] textures = new int[1];\n        GLES20.glGenTextures(textures.length, textures, 0);\n        GLES20.glBindTexture(target, textures[0]);\n        GLES20.glTexParameteri(target, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n        GLES20.glTexParameteri(target, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n        GLES20.glTexParameteri(target, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameteri(target, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n        return textures[0];\n    }\n", "    public static void deleteTexture(int texture) {\n        int[] textures = new int[]{texture};\n        GLES20.glDeleteTextures(textures.length, textures, 0);\n    }\n\n    private void initEGLContext(EGLContext sharedContext, int flag, int version) {\n        EGLConfig config = getConfig(flag, version);\n        if (config == null) {\n            throw new RuntimeException(\"unable to find suitable EGLConfig\");\n        }\n", "        if (sharedContext == null) {\n            sharedContext = EGL14.EGL_NO_CONTEXT;\n        }\n\n        int[] attributeList = {EGL14.EGL_CONTEXT_CLIENT_VERSION, version, EGL14.EGL_NONE};\n\n        EGLContext context = EGL14.eglCreateContext(mEGLDisplay, config, sharedContext, attributeList, 0);\n        int error = EGL14.eglGetError();\n        if (error == EGL14.EGL_SUCCESS) {\n            mEGLConfig = config;\n            mEGLContext = context;\n            mGlVersion = version;\n        } else {\n            throw new RuntimeException(\"eglCreateContext failed:\" + error);\n        }\n    }\n\n    private EGLConfig getConfig(int flag, int version) {\n        int renderType = EGL14.EGL_OPENGL_ES2_BIT;", "        if (error == EGL14.EGL_SUCCESS) {\n            mEGLConfig = config;\n            mEGLContext = context;\n            mGlVersion = version;\n        } else {\n            throw new RuntimeException(\"eglCreateContext failed:\" + error);\n        }\n    }\n\n    private EGLConfig getConfig(int flag, int version) {\n        int renderType = EGL14.EGL_OPENGL_ES2_BIT;", "        if (version >= 3) {\n            renderType |= EGLExt.EGL_OPENGL_ES3_BIT_KHR;\n        }\n\n        int[] attributeList = {\n                EGL14.EGL_RED_SIZE, 8,\n                EGL14.EGL_GREEN_SIZE, 8,\n                EGL14.EGL_BLUE_SIZE, 8,\n                EGL14.EGL_ALPHA_SIZE, 8,\n                //EGL14.EGL_DEPTH_SIZE, 16,\n                //EGL14.EGL_STENCIL_SIZE, 8,\n                EGL14.EGL_RENDERABLE_TYPE, renderType,\n                EGL14.EGL_NONE, 0,\n                EGL14.EGL_NONE\n        };\n", "        if ((flag & FLAG_RECORDABLE) != 0) {\n            attributeList[attributeList.length - 3] = EGL_RECORDABLE_ANDROID;\n            attributeList[attributeList.length - 2] = 1;\n        }\n        int[] numConfigs = new int[1];\n        EGLConfig[] configs = new EGLConfig[1];\n        if (!EGL14.eglChooseConfig(mEGLDisplay, attributeList, 0, configs,\n                0, configs.length, numConfigs, 0)) {\n            Log.e(TAG, \"unable to find RGB8888 / \" + version + \" EGLConfig\");\n            return null;\n        }\n        return configs[0];\n    }\n", "    public void release() {\n        if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {\n            EGL14.eglMakeCurrent(mEGLDisplay, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_CONTEXT);\n            EGL14.eglDestroyContext(mEGLDisplay, mEGLContext);\n            EGL14.eglReleaseThread();\n            EGL14.eglTerminate(mEGLDisplay);\n        }\n        mEGLConfig = null;\n        mEGLDisplay = EGL14.EGL_NO_DISPLAY;\n        mEGLContext = EGL14.EGL_NO_CONTEXT;\n    }\n\n    @Override\n    protected void finalize() throws Throwable {", "        try {\n            if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {\n                release();\n            }\n        } finally {\n            super.finalize();\n        }\n    }\n\n    public void releaseSurface(EGLSurface eglSurface) {\n        if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {\n            EGL14.eglDestroySurface(mEGLDisplay, eglSurface);\n        }\n    }\n", "    public void releaseSurface(EGLSurface eglSurface) {\n        if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {\n            EGL14.eglDestroySurface(mEGLDisplay, eglSurface);\n        }\n    }\n\n    public EGLSurface createWindowSurface(Object surface) {\n        if (!(surface instanceof Surface) && !(surface instanceof SurfaceTexture)) {\n            throw new RuntimeException(\"invalid surface:\" + surface);\n        }\n\n        int[] surfaceAttr = {EGL14.EGL_NONE};\n        EGLSurface eglSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, surface, surfaceAttr, 0);", "        if (eglSurface == null) {\n            throw new RuntimeException(\"window surface is null\");\n        }\n        return eglSurface;\n    }\n\n    public EGLSurface createOffsetScreenSurface(int width, int height) {\n        int[] surfaceAttr = {EGL14.EGL_WIDTH, width,\n                EGL14.EGL_HEIGHT, height,\n                EGL14.EGL_NONE};\n        EGLSurface eglSurface = EGL14.eglCreatePbufferSurface(mEGLDisplay, mEGLConfig, surfaceAttr, 0);", "        if (eglSurface == null) {\n            throw new RuntimeException(\"offset-screen surface is null\");\n        }\n        return eglSurface;\n    }\n\n    public void makeCurrent(EGLSurface eglSurface) {\n        if (!EGL14.eglMakeCurrent(mEGLDisplay, eglSurface, eglSurface, mEGLContext)) {\n            throw new RuntimeException(\"eglMakeCurrent failed!\");\n        }\n    }\n", "    public void makeCurrent(EGLSurface drawSurface, EGLSurface readSurface) {\n        if (!EGL14.eglMakeCurrent(mEGLDisplay, drawSurface, readSurface, mEGLContext)) {\n            throw new RuntimeException(\"eglMakeCurrent failed!\");\n        }\n    }\n\n    public boolean swapBuffers(EGLSurface eglSurface) {\n        return EGL14.eglSwapBuffers(mEGLDisplay, eglSurface);\n    }\n\n    public void setPresentationTime(EGLSurface eglSurface, long nsec) {\n        EGLExt.eglPresentationTimeANDROID(mEGLDisplay, eglSurface, nsec);\n    }\n", "    public void setPresentationTime(EGLSurface eglSurface, long nsec) {\n        EGLExt.eglPresentationTimeANDROID(mEGLDisplay, eglSurface, nsec);\n    }\n\n    public boolean isCurrent(EGLSurface eglSurface) {\n        return mEGLContext.equals(EGL14.eglGetCurrentContext())\n                && eglSurface.equals(EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW));\n    }\n\n    public int querySurface(EGLSurface eglSurface, int what) {\n        int[] value = new int[1];\n        EGL14.eglQuerySurface(mEGLDisplay, eglSurface, what, value, 0);\n        return value[0];\n    }\n", "    public int querySurface(EGLSurface eglSurface, int what) {\n        int[] value = new int[1];\n        EGL14.eglQuerySurface(mEGLDisplay, eglSurface, what, value, 0);\n        return value[0];\n    }\n\n    public String queryString(int what) {\n        return EGL14.eglQueryString(mEGLDisplay, what);\n    }\n\n    public int getVersion() {\n        return mGlVersion;\n    }\n}", "    public int getVersion() {\n        return mGlVersion;\n    }\n}"]}
{"filename": "app/src/main/java/me/robot9/shared/QuadRenderer.java", "chunked_list": ["/*\n * SharedTexture\n * @author \t: keith@robot9.me\n *\n */\n\npackage me.robot9.shared;\n\nimport android.opengl.GLES20;\n", "import android.opengl.GLES20;\n\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.FloatBuffer;\n\npublic class QuadRenderer {\n    static float squareCoords[] = {\n            -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1\n    };\n    static float textureVertices[] = {\n            0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0\n    };\n    static float textureVerticesFlipY[] = {\n            0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1\n    };\n    private final String vertexShaderCode = \"\" +\n            \"precision mediump float;\\n\" +\n            \"attribute vec4 vPosition;\\n\" +\n            \"attribute vec4 inputTexCoordinate;\\n\" +\n            \"varying vec4 texCoordinate;\\n\" +\n            \"void main() {\\n\" +\n            \"  gl_Position = vPosition;\\n\" +\n            \"  texCoordinate = inputTexCoordinate;\\n\" +\n            \"}\";\n    private final String fragmentShaderCode = \"\" +\n            \"precision mediump float;\\n\" +\n            \"varying vec4 texCoordinate;\\n\" +\n            \"uniform sampler2D s_texture;\\n\" +\n            \"void main() {\\n\" +\n            \"  gl_FragColor = texture2D(s_texture, vec2(texCoordinate.x,texCoordinate.y));\\n\" +\n            \"}\";\n    private FloatBuffer vertexBuffer, textureVerticesBuffer;\n    private int mProgram;\n    private int mPositionHandle;\n    private int mTexCoordHandle;\n    private int mTextureLocation;\n    private int mFrameBuffer;\n\n    public QuadRenderer() {\n        this(false);\n    }\n\n    public QuadRenderer(boolean filpY) {\n        // vertex\n        ByteBuffer bb = ByteBuffer.allocateDirect(squareCoords.length * 4);\n        bb.order(ByteOrder.nativeOrder());\n        vertexBuffer = bb.asFloatBuffer();\n        vertexBuffer.put(squareCoords);\n        vertexBuffer.position(0);\n\n        // texture\n        float[] targetTextureVertices = filpY ? textureVerticesFlipY : textureVertices;\n        ByteBuffer bb2 = ByteBuffer.allocateDirect(targetTextureVertices.length * 4);\n        bb2.order(ByteOrder.nativeOrder());\n        textureVerticesBuffer = bb2.asFloatBuffer();\n        textureVerticesBuffer.put(targetTextureVertices);\n        textureVerticesBuffer.position(0);\n\n        // shader\n        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode);\n        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode);\n        mProgram = GLES20.glCreateProgram();\n        GLES20.glAttachShader(mProgram, vertexShader);\n        GLES20.glAttachShader(mProgram, fragmentShader);\n        GLES20.glLinkProgram(mProgram);\n        GLES20.glDeleteShader(vertexShader);\n        GLES20.glDeleteShader(fragmentShader);\n\n        GLES20.glUseProgram(mProgram);\n        mTextureLocation = GLES20.glGetUniformLocation(mProgram, \"s_texture\");\n        mPositionHandle = GLES20.glGetAttribLocation(mProgram, \"vPosition\");\n        mTexCoordHandle = GLES20.glGetAttribLocation(mProgram, \"inputTexCoordinate\");\n\n        // fbo\n        int[] frameBuffers = new int[1];\n        GLES20.glGenFramebuffers(1, frameBuffers, 0);\n        mFrameBuffer = frameBuffers[0];\n    }\n", "    public void drawTexture(int inputTexture, int width, int height) {\n        GLES20.glUseProgram(mProgram);\n\n        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, inputTexture);\n        GLES20.glUniform1i(mTextureLocation, 0);\n\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n        GLES20.glVertexAttribPointer(mPositionHandle, 2, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n\n        GLES20.glEnableVertexAttribArray(mTexCoordHandle);\n        GLES20.glVertexAttribPointer(mTexCoordHandle, 2, GLES20.GL_FLOAT, false, 0, textureVerticesBuffer);\n\n        // draw\n        GLES20.glViewport(0, 0, width, height);\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 6);\n\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n        GLES20.glDisableVertexAttribArray(mTexCoordHandle);\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\n        GLES20.glUseProgram(0);\n    }\n\n    private int loadShader(int type, String shaderCode) {\n        int shader = GLES20.glCreateShader(type);\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n        return shader;\n    }\n", "    public void release() {\n        int[] frameBuffers = new int[]{mFrameBuffer};\n        GLES20.glDeleteFramebuffers(frameBuffers.length, frameBuffers, 0);\n        GLES20.glDeleteProgram(mProgram);\n    }\n}\n"]}
{"filename": "app/src/androidTest/java/me/robot9/shared/ExampleInstrumentedTest.java", "chunked_list": ["package me.robot9.shared;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"me.robot9.shared\", appContext.getPackageName());\n    }\n}"]}
