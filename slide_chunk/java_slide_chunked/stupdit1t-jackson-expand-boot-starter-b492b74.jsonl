{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/serializer/ExpandSerializer.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.serializer;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonStreamContext;\nimport com.fasterxml.jackson.databind.BeanProperty;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.github.stupdit1t.jackson.expand.annotation.Expand;", "import com.fasterxml.jackson.databind.ser.ContextualSerializer;\nimport com.github.stupdit1t.jackson.expand.annotation.Expand;\nimport com.github.stupdit1t.jackson.expand.cache.ExpandCache;\nimport com.github.stupdit1t.jackson.expand.cache.LocalCache;\nimport com.github.stupdit1t.jackson.expand.config.JacksonExpandProperties;\nimport com.github.stupdit1t.jackson.expand.domain.ExpandStrategy;\nimport com.github.stupdit1t.jackson.expand.domain.SerializerParam;\nimport com.github.stupdit1t.jackson.expand.handler.params.ParamsHandler;\nimport com.github.stupdit1t.jackson.expand.handler.rsp.ResponseHandler;\nimport com.github.stupdit1t.jackson.expand.util.ReflectUtil;", "import com.github.stupdit1t.jackson.expand.handler.rsp.ResponseHandler;\nimport com.github.stupdit1t.jackson.expand.util.ReflectUtil;\nimport com.github.stupdit1t.jackson.expand.util.SpringUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;", "import org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.ServletRequest;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.locks.StampedLock;\nimport java.util.stream.Collectors;", "import java.util.concurrent.locks.StampedLock;\nimport java.util.stream.Collectors;\n\npublic class ExpandSerializer extends JsonSerializer<Object> implements ContextualSerializer {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ExpandSerializer.class);\n\n    /**\n     * \u6210\u529f\u6570\u636e\n     */\n    public static final String OK = \"OK\";\n\n    /**\n     * \u5931\u8d25\u6570\u636e\n     */", "    public static final String OK = \"OK\";\n\n    /**\n     * \u5931\u8d25\u6570\u636e\n     */\n    public static final String FAIL = \"FAIL\";\n\n    /**\n     * \u7f13\u5b58\n     */\n    private static ExpandCache cache;\n\n    /**\n     * \u914d\u7f6e\n     */\n    private static JacksonExpandProperties jacksonExpandProperties;\n\n    /**\n     * \u672c\u5730\u9501\u7f13\u5b58\uff0c\u9632\u6b62\u540c\u65f6\u67e5\u8be2\n     */\n    private static final LocalCache lockCache = new LocalCache();\n\n    /**\n     * \u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n     */\n    private Object loadService;\n\n    /**\n     * \u65b9\u6cd5\n     */\n    private String method;\n\n    /**\n     * \u6ce8\u89e3\u53c2\u6570\u5904\u7406\n     */\n    private SerializerParam params;\n\n    /**\n     * \u8fd4\u56de\u7ed3\u679c\u5904\u7406\u7c7b\n     */\n    private ParamsHandler paramsHandler;\n\n    /**\n     * \u8fd4\u56de\u7ed3\u679c\u5904\u7406\u7c7b\n     */\n    private ResponseHandler responseHandler;\n\n    /**\n     * bean\u540d\u79f0\n     */\n    private String beanName;\n\n    public ExpandSerializer() {\n        super();", "        if (cache == null) {\n            synchronized (ExpandSerializer.class) {\n                if (cache == null) {\n                    cache = SpringUtil.getBean(ExpandCache.class);\n                    jacksonExpandProperties = SpringUtil.getBean(JacksonExpandProperties.class);\n                }\n            }\n        }\n    }\n\n    public ExpandSerializer(String beanName, String method, SerializerParam params, ParamsHandler paramsHandler, ResponseHandler otherResponseHandler) {\n        this();\n        this.loadService = SpringUtil.getBean(beanName);\n        this.method = method;\n        this.params = params;\n        this.responseHandler = otherResponseHandler;\n        this.paramsHandler = paramsHandler;\n        this.beanName = beanName;\n    }\n\n    @Override", "    public void serialize(Object bindData, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n        String writeFieldPath = getFieldPath(gen.getOutputContext());\n\n        // \u7edf\u4e00path\u66ff\u6362\n        String dynamicExpandCommonPrefix = jacksonExpandProperties.getDynamicExpandCommonPrefix();\n        if (StringUtils.hasText(dynamicExpandCommonPrefix) && writeFieldPath.startsWith(dynamicExpandCommonPrefix)) {\n            writeFieldPath = writeFieldPath.substring(dynamicExpandCommonPrefix.length() + 1);\n        }\n\n        // \u662f\u5426\u5c55\u5f00\n        boolean expand;\n        // \u52a8\u6001\u5c55\u5f00\u5f00\u542f\uff0c\u5224\u65ad\u662f\u5426\u5c55\u5f00\n        boolean dynamicExpand = jacksonExpandProperties.isDynamicExpand();", "        if (dynamicExpand) {\n            Set<String> needExpandField = getParam(jacksonExpandProperties.getDynamicExpandParameterName());\n            // \u5982\u679c\u4ee3\u7801\u91cc\u8bbe\u7f6e\u4e0d\u5c55\u5f00\uff0c\u52a8\u6001\u5c55\u5f00\u4e5f\u4e0d\u751f\u6548\n            expand = needExpandField.contains(writeFieldPath) && params.isOpen();\n        } else {\n            expand = params.isOpen();\n        }\n        if (!expand) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u5224\u65ad\u8981\u5199\u5165\u7684\u5b57\u6bb5\n        String writeField = gen.getOutputContext().getCurrentName();", "        if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {\n            writeField = gen.getOutputContext().getCurrentName();\n        } else if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {\n            writeField = String.format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());\n        }\n\n        // \u81ea\u5b9a\u4e49\u8981\u5199\u5165\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\n        if (StringUtils.hasText(params.getWriteField())) {\n            writeField = params.getWriteField();\n        }\n\n        // \u8bbe\u7f6e\u7406\u8bba\u4e0a\u7684\u54cd\u5e94\u7c7b\u578b\uff0c\u8981\u4e0d\u8981\u4f7f\u7528\u53d6\u51b3\u4e8e ResponseHandler \u8981\u4e0d\u8981\u5904\u7406\uff0c\u6bd4\u5982\u53ea\u80fd\u5199\u5165\u6570\u636e\u5bf9\u8c61\u5b58\u5728\u7684\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u662f\u5ffd\u7565\u5b58\u4e0d\u5b58\u5728\n        Class<?> writeClass = null;", "        if (params.getWriteField() != null && StringUtils.hasText(params.getWriteField())) {\n            Field field = ReflectionUtils.findField(gen.getCurrentValue().getClass(), params.getWriteField());\n            if (field != null) {\n                writeClass = field.getType();\n            }\n        }\n\n        // \u5173\u95ed\u4e0d\u5b58\u5728\u5b57\u6bb5\u6269\u5c55\uff0c\u88ab\u5199\u5165\u7684\u5b57\u6bb5\u7c7b\u578b\u627e\u4e0d\u5230\uff0c\u4e0d\u6269\u5c55\n        if (!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n\n        // \u7ffb\u8bd1\u4e3a\u975e\u5f53\u524d\u5b57\u6bb5\uff0c\u5148\u5199\u5165\u5f53\u524d\u5b57\u6bb5\u503c\u518d\u7ffb\u8bd1\n        boolean currField = gen.getOutputContext().getCurrentName().equals(writeField);", "        if (!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n\n        // \u7ffb\u8bd1\u4e3a\u975e\u5f53\u524d\u5b57\u6bb5\uff0c\u5148\u5199\u5165\u5f53\u524d\u5b57\u6bb5\u503c\u518d\u7ffb\u8bd1\n        boolean currField = gen.getOutputContext().getCurrentName().equals(writeField);\n        if (!currField) {\n            gen.writeObject(bindData);\n            gen.writeFieldName(writeField);\n        }", "        if (!currField) {\n            gen.writeObject(bindData);\n            gen.writeFieldName(writeField);\n        }\n        if (bindData == null || loadService == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u83b7\u53d6\u7f13\u5b58KEY\n        Object[] args = params.getRemoteParams();\n        int argsLength = args == null ? 0 : args.length;\n        String cacheKey = jacksonExpandProperties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + paramsHandler.getCacheKey(bindData, args);\n        Object result = getCacheInfo(cacheKey);", "        if (result != null) {\n            LOG.info(\"{} Expand cache \u547d\u4e2d: {}\", beanName, result);\n            gen.writeObject(result);\n            return;\n        }\n\n        StampedLock lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));\n        // \u5199\u9501\u907f\u514d\u540c\u4e00\u4e1a\u52a1ID\u91cd\u590d\u67e5\u8be2\n        long stamp = lock.writeLock();\n        Integer cacheTime = params.getCacheTime();\n        try {\n            // \u591a\u53c2\u6570\u7ec4\u88c5\n            Object[] objectParams = new Object[argsLength + 1];\n            objectParams[0] = paramsHandler.handleVal(bindData);", "        try {\n            // \u591a\u53c2\u6570\u7ec4\u88c5\n            Object[] objectParams = new Object[argsLength + 1];\n            objectParams[0] = paramsHandler.handleVal(bindData);\n            if(objectParams.length > 1){\n                System.arraycopy(args, 0, objectParams, 1, argsLength);\n            }\n            // \u8bf7\u6c42\u7ffb\u8bd1\u7ed3\u679c\n            Object loadResult = ReflectUtil.invoke(loadService, method, objectParams);\n            if (loadResult != null) {\n                result = this.responseHandler.handle(this.beanName, method, loadResult, writeClass, objectParams);\n                cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));\n            } else {\n                LOG.error(\"\u3010{}\u3011 Expand\u5931\u8d25\uff0c\u672a\u627e\u5230\uff1a{}\", beanName, bindData);\n                cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));\n                result = bindData;\n            }\n\n        } catch (Exception e) {\n            LOG.error(\"\u3010{}\u3011 Expand\u5f02\u5e38\uff1a\", beanName, e);\n            cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));\n            result = bindData;\n        } finally {\n            lock.unlockWrite(stamp);\n        }\n        gen.writeObject(result);\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u5b57\u6bb5\u7684path\u8def\u5f84\n     *\n     * @param outputContext\n     * @return\n     */\n    private String getFieldPath(JsonStreamContext outputContext) {\n        List<String> path = new ArrayList<>(4);", "            if (loadResult != null) {\n                result = this.responseHandler.handle(this.beanName, method, loadResult, writeClass, objectParams);\n                cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));\n            } else {\n                LOG.error(\"\u3010{}\u3011 Expand\u5931\u8d25\uff0c\u672a\u627e\u5230\uff1a{}\", beanName, bindData);\n                cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));\n                result = bindData;\n            }\n\n        } catch (Exception e) {\n            LOG.error(\"\u3010{}\u3011 Expand\u5f02\u5e38\uff1a\", beanName, e);\n            cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));\n            result = bindData;\n        } finally {\n            lock.unlockWrite(stamp);\n        }\n        gen.writeObject(result);\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u5b57\u6bb5\u7684path\u8def\u5f84\n     *\n     * @param outputContext\n     * @return\n     */\n    private String getFieldPath(JsonStreamContext outputContext) {\n        List<String> path = new ArrayList<>(4);", "        while (outputContext != null) {\n            String currentName = outputContext.getCurrentName();\n            if (StringUtils.hasText(currentName)) {\n                path.add(currentName);\n            }\n            outputContext = outputContext.getParent();\n        }\n        Collections.reverse(path);\n        return String.join(\".\", path);\n    }\n\n    /**\n     * \u83b7\u53d6\u538d\u4fe1\u606f\n     *\n     * @param cacheKey \u7f13\u5b58\u7684KEY\n     * @return\n     */\n    private Object getCacheInfo(String cacheKey) {\n        Object result = cache.get(String.format(cacheKey, OK));", "        if (result == null) {\n            result = cache.get(String.format(cacheKey, FAIL));\n        }\n        return result;\n    }\n\n    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n        if (property != null) {\n            Expand load = property.getAnnotation(Expand.class);\n            if (load == null) {\n                throw new RuntimeException(\"\u672a\u6ce8\u89e3\u76f8\u5173 @Expand \u6ce8\u89e3\");\n            }\n            String bean = load.bean();\n            Class<? extends ParamsHandler> paramsHandlerClass = load.paramsHandler();\n            Class<? extends ResponseHandler> responseHandlerClass = load.responseHandler();\n            String method = load.method();", "        if (property != null) {\n            Expand load = property.getAnnotation(Expand.class);\n            if (load == null) {\n                throw new RuntimeException(\"\u672a\u6ce8\u89e3\u76f8\u5173 @Expand \u6ce8\u89e3\");\n            }\n            String bean = load.bean();\n            Class<? extends ParamsHandler> paramsHandlerClass = load.paramsHandler();\n            Class<? extends ResponseHandler> responseHandlerClass = load.responseHandler();\n            String method = load.method();\n            try {\n                ParamsHandler paramsHandler = paramsHandlerClass.getDeclaredConstructor().newInstance();\n                ResponseHandler responseHandler = responseHandlerClass.getDeclaredConstructor().newInstance();\n                int cacheTime = load.cacheTime();\n                // \u989d\u5916\u53c2\u6570\u5904\u7406\n                SerializerParam params = paramsHandler.handleAnnotation(property);\n                // \u53c2\u6570\u5904\u7406\u5668\u6ca1\u8bbe\u7f6e\uff0c\u4e14\u7236\u6ce8\u8bbe\u7f6e\u4e86\uff0c\u4ee5\u7236\u6ce8\u89e3\u4e3a\u4e3b", "            try {\n                ParamsHandler paramsHandler = paramsHandlerClass.getDeclaredConstructor().newInstance();\n                ResponseHandler responseHandler = responseHandlerClass.getDeclaredConstructor().newInstance();\n                int cacheTime = load.cacheTime();\n                // \u989d\u5916\u53c2\u6570\u5904\u7406\n                SerializerParam params = paramsHandler.handleAnnotation(property);\n                // \u53c2\u6570\u5904\u7406\u5668\u6ca1\u8bbe\u7f6e\uff0c\u4e14\u7236\u6ce8\u8bbe\u7f6e\u4e86\uff0c\u4ee5\u7236\u6ce8\u89e3\u4e3a\u4e3b\n                if (params.getCacheTime() == null && cacheTime != -1) {\n                    params.setCacheTime(cacheTime);\n                }\n                // \u7f13\u5b58\u65f6\u95f4\u672a\u8bbe\u7f6e\uff0c\u53d6\u9ed8\u8ba4", "                if (params.getCacheTime() == null) {\n                    params.setCacheTime(jacksonExpandProperties.getCacheTimeout());\n                }\n                if (params.isOpen() == null) {\n                    params.setExpand(load.expand());\n                }\n                return new ExpandSerializer(bean, method, params, paramsHandler, responseHandler);\n            } catch (Exception e) {\n                LOG.error(\"@Expand error: \", e);\n            }\n        }\n        return prov.findNullValueSerializer(null);\n    }\n\n    /**\n     * \u83b7\u53d6\u5c55\u5f00\u53c2\u6570\n     *\n     * @param key\n     * @return\n     */\n    private Set<String> getParam(String key) {\n        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();", "        if (attributes == null) {\n            return Collections.emptySet();\n        }\n        ServletRequest request = ((ServletRequestAttributes) attributes).getRequest();\n        String[] parameterValues = request.getParameterValues(key);\n        if (parameterValues == null) {\n            return Collections.emptySet();\n        }\n        return Arrays.stream(parameterValues).flatMap(o -> Arrays.stream(o.split(\",\")))\n                .collect(Collectors.toSet());\n    }\n}\n\n\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/domain/SerializerParam.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.domain;\n\n/**\n * \u6ce8\u89e3\u5904\u7406\u7ed3\u679c\n */\npublic class SerializerParam {\n\n    /**\n     * \u8fdc\u7a0b\u8c03\u7528\u989d\u5916\u53c2\u6570\n     */\n    private Object[] remoteParams;\n\n    /**\n     * \u5199\u5165\u5b57\u6bb5\n     */\n    private String writeField;\n\n    /**\n     * \u503c\u7f13\u5b58\u65f6\u95f4\n     */\n    private Integer cacheTime;\n\n    /**\n     * \u662f\u5426\u5c55\u5f00\n     */\n    private Boolean expand;\n\n    public Object[] getRemoteParams() {\n        return remoteParams;\n    }\n", "    public void setRemoteParams(Object[] remoteParams) {\n        this.remoteParams = remoteParams;\n    }\n\n    public String getWriteField() {\n        return writeField;\n    }\n\n    public void setWriteField(String writeField) {\n        this.writeField = writeField;\n    }\n", "    public void setWriteField(String writeField) {\n        this.writeField = writeField;\n    }\n\n    public Integer getCacheTime() {\n        return cacheTime;\n    }\n\n    public void setCacheTime(Integer cacheTime) {\n        this.cacheTime = cacheTime;\n    }\n", "    public void setCacheTime(Integer cacheTime) {\n        this.cacheTime = cacheTime;\n    }\n\n    public Boolean isOpen() {\n        return expand;\n    }\n\n    public void setExpand(Boolean expand) {\n        this.expand = expand;\n    }\n}\n", "    public void setExpand(Boolean expand) {\n        this.expand = expand;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/domain/ExpandStrategy.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.domain;\n\n/**\n * \u5c55\u5f00\u7b56\u7565\n */\npublic enum ExpandStrategy {\n\n    /**\n     * \u8986\u76d6\u5f53\u524d\u5b57\u6bb5\n     */\n    COVER,\n\n    /**\n     * \u590d\u5236\u5b57\u6bb5\n     */\n    COPY,\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/config/JacksonExpandProperties.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.config;\n\nimport com.github.stupdit1t.jackson.expand.domain.ExpandStrategy;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\n\n@EnableConfigurationProperties(JacksonExpandProperties.class)\n@ConfigurationProperties(\n        prefix = \"spring.jackson.expand\"\n)\npublic class JacksonExpandProperties {\n\n    /**\n     * \u7f13\u5b58Key\u524d\u7f00\n     */\n    private String cachePrefix = \"Expand\";\n\n    /**\n     * \u7f13\u5b58\u65f6\u95f4\n     * <p>\n     * \u5355\u4f4d\u79d2\n     */\n    private Integer cacheTimeout = 300;\n\n    /**\n     * \u662f\u5426\u8981\u52a8\u6001\u5c55\u5f00\uff0c\u5982\u679ctrue\u3002\u5219\u901a\u8fc7\u63a5\u53e3url\u4f20\u53c2\u8fdb\u884c\u5c55\u5f00\uff0c\u9ed8\u8ba4\u4e0d\u5c55\u5f00\u3002\n     * \u5982\u679c\u4ee3\u7801\u91cc\u8bbe\u7f6e\u4e0d\u5c55\u5f00\uff0c\u52a8\u6001\u5c55\u5f00\u4e5f\u4e0d\u751f\u6548\n     * <p>\n     * \u5982\u4f20\u53c2 /api/user?expand=userId,father.id\n     * <p>\n     * \u5219\u4f1a\u5c55\u5f00\n     */\n    private boolean dynamicExpand;\n\n    /**\n     * \u52a8\u6001\u5c55\u5f00\u53c2\u6570\u540d\u5b57, URL \u63a5\u53d7\u7684\u53c2\u6570\n     */\n    private String dynamicExpandParameterName = \"expand\";\n\n\n    /**\n     * \u52a8\u6001\u5c55\u5f00 \u7edf\u4e00\u6570\u636e\u7684Path\u524d\u7f00\uff0c\u6bd4\u5982\u524d\u7f00\u662f data.body. \u5982\u679c\u914d\u7f6e expand=userId, \u76f8\u5f53\u4e8e\u662fexpnad=data.body.userId, \u9ed8\u8ba4\u65e0\n     */\n    private String dynamicExpandCommonPrefix;\n\n    /**\n     * \u5c55\u5f00\u7b56\u7565, \u9ed8\u8ba4\u8986\u76d6\n     */\n    private ExpandStrategy expandStrategy = ExpandStrategy.COVER;\n\n    /**\n     * \u590d\u5236\u5b57\u6bb5\u7b56\u7565\uff0c\u683c\u5f0f\u5316\n     */\n    private String copyStrategyFormat = \"$%s\";\n\n    /**\n     * \u53ef\u4ee5\u6269\u5c55\u5230\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\n     */\n    private boolean canExpandToNotExistField = true;\n", "        prefix = \"spring.jackson.expand\"\n)\npublic class JacksonExpandProperties {\n\n    /**\n     * \u7f13\u5b58Key\u524d\u7f00\n     */\n    private String cachePrefix = \"Expand\";\n\n    /**\n     * \u7f13\u5b58\u65f6\u95f4\n     * <p>\n     * \u5355\u4f4d\u79d2\n     */\n    private Integer cacheTimeout = 300;\n\n    /**\n     * \u662f\u5426\u8981\u52a8\u6001\u5c55\u5f00\uff0c\u5982\u679ctrue\u3002\u5219\u901a\u8fc7\u63a5\u53e3url\u4f20\u53c2\u8fdb\u884c\u5c55\u5f00\uff0c\u9ed8\u8ba4\u4e0d\u5c55\u5f00\u3002\n     * \u5982\u679c\u4ee3\u7801\u91cc\u8bbe\u7f6e\u4e0d\u5c55\u5f00\uff0c\u52a8\u6001\u5c55\u5f00\u4e5f\u4e0d\u751f\u6548\n     * <p>\n     * \u5982\u4f20\u53c2 /api/user?expand=userId,father.id\n     * <p>\n     * \u5219\u4f1a\u5c55\u5f00\n     */\n    private boolean dynamicExpand;\n\n    /**\n     * \u52a8\u6001\u5c55\u5f00\u53c2\u6570\u540d\u5b57, URL \u63a5\u53d7\u7684\u53c2\u6570\n     */\n    private String dynamicExpandParameterName = \"expand\";\n\n\n    /**\n     * \u52a8\u6001\u5c55\u5f00 \u7edf\u4e00\u6570\u636e\u7684Path\u524d\u7f00\uff0c\u6bd4\u5982\u524d\u7f00\u662f data.body. \u5982\u679c\u914d\u7f6e expand=userId, \u76f8\u5f53\u4e8e\u662fexpnad=data.body.userId, \u9ed8\u8ba4\u65e0\n     */\n    private String dynamicExpandCommonPrefix;\n\n    /**\n     * \u5c55\u5f00\u7b56\u7565, \u9ed8\u8ba4\u8986\u76d6\n     */\n    private ExpandStrategy expandStrategy = ExpandStrategy.COVER;\n\n    /**\n     * \u590d\u5236\u5b57\u6bb5\u7b56\u7565\uff0c\u683c\u5f0f\u5316\n     */\n    private String copyStrategyFormat = \"$%s\";\n\n    /**\n     * \u53ef\u4ee5\u6269\u5c55\u5230\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\n     */\n    private boolean canExpandToNotExistField = true;\n", "    public String getCachePrefix() {\n        return cachePrefix;\n    }\n\n    public void setCachePrefix(String cachePrefix) {\n        this.cachePrefix = cachePrefix;\n    }\n\n    public Integer getCacheTimeout() {\n        return cacheTimeout;\n    }\n", "    public Integer getCacheTimeout() {\n        return cacheTimeout;\n    }\n\n    public void setCacheTimeout(Integer cacheTimeout) {\n        this.cacheTimeout = cacheTimeout;\n    }\n\n    public boolean isDynamicExpand() {\n        return dynamicExpand;\n    }\n", "    public boolean isDynamicExpand() {\n        return dynamicExpand;\n    }\n\n    public void setDynamicExpand(boolean dynamicExpand) {\n        this.dynamicExpand = dynamicExpand;\n    }\n\n    public String getDynamicExpandParameterName() {\n        return dynamicExpandParameterName;\n    }\n", "    public String getDynamicExpandParameterName() {\n        return dynamicExpandParameterName;\n    }\n\n    public void setDynamicExpandParameterName(String dynamicExpandParameterName) {\n        this.dynamicExpandParameterName = dynamicExpandParameterName;\n    }\n\n    public ExpandStrategy getExpandStrategy() {\n        return expandStrategy;\n    }\n", "    public ExpandStrategy getExpandStrategy() {\n        return expandStrategy;\n    }\n\n    public void setExpandStrategy(ExpandStrategy expandStrategy) {\n        this.expandStrategy = expandStrategy;\n    }\n\n    public String getCopyStrategyFormat() {\n        return copyStrategyFormat;\n    }\n", "    public String getCopyStrategyFormat() {\n        return copyStrategyFormat;\n    }\n\n    public void setCopyStrategyFormat(String copyStrategyFormat) {\n        this.copyStrategyFormat = copyStrategyFormat;\n    }\n\n    public boolean isCanExpandToNotExistField() {\n        return canExpandToNotExistField;\n    }\n", "    public boolean isCanExpandToNotExistField() {\n        return canExpandToNotExistField;\n    }\n\n    public void setCanExpandToNotExistField(boolean canExpandToNotExistField) {\n        this.canExpandToNotExistField = canExpandToNotExistField;\n    }\n\n    public String getDynamicExpandCommonPrefix() {\n        return dynamicExpandCommonPrefix;\n    }\n", "    public String getDynamicExpandCommonPrefix() {\n        return dynamicExpandCommonPrefix;\n    }\n\n    public void setDynamicExpandCommonPrefix(String dynamicExpandCommonPrefix) {\n        this.dynamicExpandCommonPrefix = dynamicExpandCommonPrefix;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/config/JacksonExpandConfigure.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.config;\n\nimport com.github.stupdit1t.jackson.expand.cache.ExpandCache;\nimport com.github.stupdit1t.jackson.expand.cache.LocalCache;\nimport com.github.stupdit1t.jackson.expand.util.SpringUtil;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\n\npublic class JacksonExpandConfigure {\n\n    @Bean", "public class JacksonExpandConfigure {\n\n    @Bean\n    public SpringUtil springUtil() {\n        return new SpringUtil();\n    }\n\n    /**\n     * jackson  \u914d\u7f6e\n     *\n     * @return\n     */\n    @Bean", "    public JacksonExpandProperties jacksonExpandProperties() {\n        return new JacksonExpandProperties();\n    }\n\n    /**\n     * \u9ed8\u8ba4\u7f13\u5b58\u673a\u5236\uff0c \u672c\u5730\u7f13\u5b58\n     *\n     * @return\n     */\n    @Bean\n    @ConditionalOnMissingBean", "    public ExpandCache coverCache() {\n        return new LocalCache();\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/handler/params/DefaultParamsHandler.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.handler.params;\n\nimport com.fasterxml.jackson.databind.BeanProperty;\nimport com.github.stupdit1t.jackson.expand.annotation.Expand;\nimport com.github.stupdit1t.jackson.expand.domain.SerializerParam;\nimport org.springframework.util.StringUtils;\n\n/**\n * \u5355\u503clong\u53c2\u6570\u5904\u7406\u5668\n * <p>", " * \u5355\u503clong\u53c2\u6570\u5904\u7406\u5668\n * <p>\n * \u5982\u4f60\u7684\u5b57\u6bb5\u7c7b\u578b\u662fLong\uff0c\u4e14\u76f4\u63a5\u5c31\u662f\u53c2\u6570\uff0c\u4e0d\u9700\u8981\u5904\u7406\uff0c\u7528\u8fd9\u4e2a\n */\npublic class DefaultParamsHandler implements ParamsHandler {\n\n    @Override\n    public Object handleVal(Object val) {\n        return val;\n    }\n\n    @Override", "    public SerializerParam handleAnnotation(BeanProperty property) {\n        SerializerParam params = new SerializerParam();\n        // \u7528\u6237\u6ce8\u89e3\u503c\u5904\u7406\n        Expand expand = property.getAnnotation(Expand.class);\n        if (expand != null) {\n            if (StringUtils.hasText(expand.to())) {\n                params.setWriteField(expand.to());\n            }\n            params.setExpand(expand.expand());\n        }\n        return params;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/handler/params/ParamsHandler.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.handler.params;\n\nimport com.fasterxml.jackson.databind.BeanProperty;\nimport com.github.stupdit1t.jackson.expand.domain.SerializerParam;\n\nimport java.util.StringJoiner;\n\n/**\n * \u53c2\u6570\u5904\u7406\u7c7b\n */\npublic interface ParamsHandler {\n\n    /**\n     * \u5904\u7406\u6ce8\u89e3\u5bf9\u8c61\u7684\u503c\n     *\n     * @param val\n     * @return\n     */\n    Object handleVal(Object val);\n\n    /**\n     * \u5904\u7406\u6ce8\u89e3\u4e0a\u7684\u53c2\u6570\n     *\n     * @param property\n     * @return\n     */\n    SerializerParam handleAnnotation(BeanProperty property);\n\n    /**\n     * \u83b7\u53d6\u7f13\u5b58\u7684key\n     *\n     * @param val           \u5f53\u524d\u503c\n     * @param annotationVal \u6ce8\u89e3\u503c\n     * @return\n     */\n    default String getCacheKey(Object val, Object[] annotationVal) {", " * \u53c2\u6570\u5904\u7406\u7c7b\n */\npublic interface ParamsHandler {\n\n    /**\n     * \u5904\u7406\u6ce8\u89e3\u5bf9\u8c61\u7684\u503c\n     *\n     * @param val\n     * @return\n     */\n    Object handleVal(Object val);\n\n    /**\n     * \u5904\u7406\u6ce8\u89e3\u4e0a\u7684\u53c2\u6570\n     *\n     * @param property\n     * @return\n     */\n    SerializerParam handleAnnotation(BeanProperty property);\n\n    /**\n     * \u83b7\u53d6\u7f13\u5b58\u7684key\n     *\n     * @param val           \u5f53\u524d\u503c\n     * @param annotationVal \u6ce8\u89e3\u503c\n     * @return\n     */\n    default String getCacheKey(Object val, Object[] annotationVal) {", "        if (annotationVal == null) {\n            return val.toString();\n        }\n        StringJoiner key = new StringJoiner(\"-\");\n        key.add(String.valueOf(val));\n        for (Object subVal : annotationVal) {\n            key.add(String.valueOf(subVal));\n        }\n        return key.toString();\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/handler/rsp/ResponseHandler.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.handler.rsp;\n\n/**\n * \u8fd4\u56de\u5904\u7406\u7b2c\u4e09\u65b9\u54cd\u5e94\n */\npublic interface ResponseHandler {\n    Object handle(String bean, String method, Object rsp, Class<?> writeClass, Object... params);\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/handler/rsp/DefaultResponseHandler.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.handler.rsp;\n\n/**\n * \u9ed8\u8ba4\u8fd4\u56de\u503c\u5904\u7406\uff0c\u4e0d\u5904\u7406\n */\npublic class DefaultResponseHandler implements ResponseHandler {\n\n    /**\n     * \u54cd\u5e94\u6570\u636e\u5904\u7406\n     *\n     * @param bean   \u5f53\u524dbean\n     * @param method \u5f53\u524d\u65b9\u6cd5\n     * @param rsp    \u5f53\u524d\u8fd4\u56de\u503c\n     * @param toClass    \u8981\u586b\u5145\u5b57\u6bb5\u7684\u7c7b\u578b\n     * @param params \u5f53\u524d\u65b9\u6cd5\u53c2\u6570\n     * @return\n     */\n    @Override", "    public Object handle(String bean, String method, Object rsp, Class<?> toClass, Object... params) {\n        return rsp;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/util/SpringUtil.java", "chunked_list": ["//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\npackage com.github.stupdit1t.jackson.expand.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;", "import org.springframework.beans.factory.ListableBeanFactory;\nimport org.springframework.beans.factory.config.BeanFactoryPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\n\npublic class SpringUtil implements BeanFactoryPostProcessor, ApplicationContextAware {\n    private static ConfigurableListableBeanFactory beanFactory;\n    private static ApplicationContext applicationContext;\n\n    public SpringUtil() {\n    }\n\n    @Override", "    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n        SpringUtil.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) {\n        SpringUtil.applicationContext = applicationContext;\n    }\n\n    public static ListableBeanFactory getBeanFactory() {\n        return (ListableBeanFactory)(null == beanFactory ? applicationContext : beanFactory);\n    }\n\n    public static <T> T getBean(String name) {\n        return (T) getBeanFactory().getBean(name);\n    }\n\n    public static <T> T getBean(Class<T> clazz) {\n        return getBeanFactory().getBean(clazz);\n    }\n}\n", "    public static ListableBeanFactory getBeanFactory() {\n        return (ListableBeanFactory)(null == beanFactory ? applicationContext : beanFactory);\n    }\n\n    public static <T> T getBean(String name) {\n        return (T) getBeanFactory().getBean(name);\n    }\n\n    public static <T> T getBean(Class<T> clazz) {\n        return getBeanFactory().getBean(clazz);\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/util/ReflectUtil.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.util;\n\nimport org.springframework.util.ObjectUtils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class ReflectUtil {\n\n    /**\n     * \u5305\u88c5\u7c7b\u578b\u4e3aKey\uff0c\u539f\u59cb\u7c7b\u578b\u4e3aValue\uff0c\u4f8b\u5982\uff1a Integer.class =\u300b int.class.\n     */\n    public static final Map<Class<?>, Class<?>> WRAPPER_PRIMITIVE_MAP = new ConcurrentHashMap<>(8);\n\n    static {\n        WRAPPER_PRIMITIVE_MAP.put(Boolean.class, boolean.class);\n        WRAPPER_PRIMITIVE_MAP.put(Byte.class, byte.class);\n        WRAPPER_PRIMITIVE_MAP.put(Character.class, char.class);\n        WRAPPER_PRIMITIVE_MAP.put(Double.class, double.class);\n        WRAPPER_PRIMITIVE_MAP.put(Float.class, float.class);\n        WRAPPER_PRIMITIVE_MAP.put(Integer.class, int.class);\n        WRAPPER_PRIMITIVE_MAP.put(Long.class, long.class);\n        WRAPPER_PRIMITIVE_MAP.put(Short.class, short.class);\n    }\n\n    /**\n     * \u53cd\u5c04\u65b9\u6cd5\u7f13\u5b58\n     */\n    private static final Map<String, Method> METHODS_CACHE = new ConcurrentHashMap<>();\n\n    /**\n     * \u53cd\u5c04\u8c03\u7528\n     *\n     * @param obj\n     * @param methodName\n     * @param args\n     * @return\n     */", "    public static final Map<Class<?>, Class<?>> WRAPPER_PRIMITIVE_MAP = new ConcurrentHashMap<>(8);\n\n    static {\n        WRAPPER_PRIMITIVE_MAP.put(Boolean.class, boolean.class);\n        WRAPPER_PRIMITIVE_MAP.put(Byte.class, byte.class);\n        WRAPPER_PRIMITIVE_MAP.put(Character.class, char.class);\n        WRAPPER_PRIMITIVE_MAP.put(Double.class, double.class);\n        WRAPPER_PRIMITIVE_MAP.put(Float.class, float.class);\n        WRAPPER_PRIMITIVE_MAP.put(Integer.class, int.class);\n        WRAPPER_PRIMITIVE_MAP.put(Long.class, long.class);\n        WRAPPER_PRIMITIVE_MAP.put(Short.class, short.class);\n    }\n\n    /**\n     * \u53cd\u5c04\u65b9\u6cd5\u7f13\u5b58\n     */\n    private static final Map<String, Method> METHODS_CACHE = new ConcurrentHashMap<>();\n\n    /**\n     * \u53cd\u5c04\u8c03\u7528\n     *\n     * @param obj\n     * @param methodName\n     * @param args\n     * @return\n     */", "    public static Object invoke(Object obj, String methodName, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        String cacheKey = obj.getClass().getName() + methodName;\n        final Method method = METHODS_CACHE.computeIfAbsent(cacheKey, (key) -> getMethod(obj.getClass(), methodName, args));\n        if (null == method) {\n            throw new UnsupportedOperationException(\"No such method: [\" + methodName + \"] from [\" + obj.getClass() + \"]\");\n        }\n        return method.invoke(obj, args);\n    }\n\n    /**\n     * \u83b7\u53d6\u53cd\u5c04\u65b9\u6cd5\n     *\n     * @param beanClass\n     * @param methodName\n     * @param args\n     * @return\n     */\n    private static Method getMethod(Class<?> beanClass, String methodName, Object[] args) {\n        List<Method> allMethods = new ArrayList<>();\n        Class<?> searchType = beanClass;\n        Class<?>[] argsClasses = getClasses(args);", "        while (searchType != null) {\n            allMethods.addAll(new ArrayList<>(Arrays.asList(searchType.getDeclaredMethods())));\n            searchType = searchType.getSuperclass();\n        }\n\n        for (Method method : allMethods) {\n            if (methodName.equals(method.getName()) && isAllAssignableFrom(method.getParameterTypes(), argsClasses)\n                    //\u6392\u9664\u6865\u63a5\u65b9\u6cd5\n                    && !method.isBridge()) {\n                return method;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * \u83b7\u5f97\u5bf9\u8c61\u6570\u7ec4\u7684\u7c7b\u6570\u7ec4\n     *\n     * @param objects \u5bf9\u8c61\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728{@code null}\u5143\u7d20\uff0c\u5219\u6b64\u5143\u7d20\u88ab\u8ba4\u4e3a\u662fObject\u7c7b\u578b\n     * @return \u7c7b\u6570\u7ec4\n     */", "    public static Class<?>[] getClasses(Object... objects) {\n        Class<?>[] classes = new Class<?>[objects.length];\n        Object obj;\n        for (int i = 0; i < objects.length; i++) {\n            obj = objects[i];\n            if (null == obj) {\n                classes[i] = Object.class;\n            } else {\n                classes[i] = obj.getClass();\n            }\n        }\n        return classes;\n    }\n\n    /**\n     * \u6bd4\u8f83\u5224\u65adtypes1\u548ctypes2\u4e24\u7ec4\u7c7b\uff0c\u5982\u679ctypes1\u4e2d\u6240\u6709\u7684\u7c7b\u90fd\u4e0etypes2\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7c7b\u76f8\u540c\uff0c\u6216\u8005\u662f\u5176\u7236\u7c7b\u6216\u63a5\u53e3\uff0c\u5219\u8fd4\u56de{@code true}\n     *\n     * @param types1 \u7c7b\u7ec41\n     * @param types2 \u7c7b\u7ec42\n     * @return \u662f\u5426\u76f8\u540c\u3001\u7236\u7c7b\u6216\u63a5\u53e3\n     */\n    private static boolean isAllAssignableFrom(Class<?>[] types1, Class<?>[] types2) {", "        if (ObjectUtils.isEmpty(types1) && ObjectUtils.isEmpty(types2)) {\n            return true;\n        }\n        if (null == types1 || null == types2) {\n            // \u4efb\u4f55\u4e00\u4e2a\u4e3anull\u4e0d\u76f8\u7b49\uff08\u4e4b\u524d\u5df2\u5224\u65ad\u4e24\u4e2a\u90fd\u4e3anull\u7684\u60c5\u51b5\uff09\n            return false;\n        }\n        if (types1.length != types2.length) {\n            return false;\n        }\n\n        Class<?> type1;\n        Class<?> type2;", "        for (int i = 0; i < types1.length; i++) {\n            type1 = types1[i];\n            type2 = types2[i];\n            if (isBasicType(type1) && isBasicType(type2)) {\n                // \u539f\u59cb\u7c7b\u578b\u548c\u5305\u88c5\u7c7b\u578b\u5b58\u5728\u4e0d\u4e00\u81f4\u60c5\u51b5\n                if (unWrap(type1) != unWrap(type2)) {\n                    return false;\n                }\n            } else if (!type1.isAssignableFrom(type2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\uff08\u5305\u62ec\u5305\u88c5\u7c7b\u548c\u539f\u59cb\u7c7b\uff09\n     *\n     * @param clazz \u7c7b\n     * @return \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\n     */\n    private static boolean isBasicType(Class<?> clazz) {", "            } else if (!type1.isAssignableFrom(type2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\uff08\u5305\u62ec\u5305\u88c5\u7c7b\u548c\u539f\u59cb\u7c7b\uff09\n     *\n     * @param clazz \u7c7b\n     * @return \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\n     */\n    private static boolean isBasicType(Class<?> clazz) {", "        if (null == clazz) {\n            return false;\n        }\n        return (clazz.isPrimitive() || WRAPPER_PRIMITIVE_MAP.containsKey(clazz));\n    }\n\n    /**\n     * \u5305\u88c5\u7c7b\u8f6c\u4e3a\u539f\u59cb\u7c7b\uff0c\u975e\u5305\u88c5\u7c7b\u8fd4\u56de\u539f\u7c7b\n     *\n     * @param clazz \u5305\u88c5\u7c7b\n     * @return \u539f\u59cb\u7c7b\n     */\n    private static Class<?> unWrap(Class<?> clazz) {", "        if (null == clazz || clazz.isPrimitive()) {\n            return clazz;\n        }\n        Class<?> result = WRAPPER_PRIMITIVE_MAP.get(clazz);\n        return (null == result) ? clazz : result;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/cache/LocalCache.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.cache;\n\nimport com.github.stupdit1t.jackson.expand.serializer.ExpandSerializer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.AntPathMatcher;\n\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;", "import java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.stream.Collectors;\n\n/**\n * \u7b80\u5355\u7684\u672c\u5730\u7f13\u5b58\u5b9e\u73b0\n */\npublic class LocalCache implements ExpandCache {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ExpandSerializer.class);\n\n    private static final Timer timer = new Timer();\n\n    private final Map<String, Object> cacheMap;\n\n    public LocalCache() {\n        this.cacheMap = new ConcurrentHashMap<>();\n    }\n\n    public LocalCache(Map<String, Object> cacheMap) {\n        this.cacheMap = cacheMap;\n    }\n\n    @Override\n    public <T> void put(String key, T value, Duration timeout) {\n        cacheMap.put(key, value);\n        scheduleExpiration(key, timeout.toMillis());\n    }\n\n    @Override\n    public <T> T get(String key) {\n        return (T) cacheMap.get(key);\n    }\n\n    public <T> T get(String cacheKey, T value, Duration timeout) {\n        T val = (T) cacheMap.computeIfAbsent(cacheKey, (key) -> {\n            scheduleExpiration(cacheKey, timeout.toMillis());\n            return value;\n        });\n        return val;\n    }\n\n    @Override\n    public Set<String> keys(String pattern) {\n        return cacheMap.keySet().stream()\n                .filter(key -> matchKey(pattern, key))\n                .collect(Collectors.toSet());\n    }\n\n    @Override", "    public void clear() {\n        this.cacheMap.clear();\n        timer.purge();\n    }\n\n    @Override\n    public void delete(String key) {\n        this.cacheMap.remove(key);\n    }\n\n    /**\n     * \u8ba1\u65f6\u5230\u671f\n     *\n     * @param key\n     * @param expirationTimeMillis\n     */\n    private void scheduleExpiration(String key, long expirationTimeMillis) {\n        timer.schedule(new TimerTask() {\n            @Override", "            public void run() {\n                LOG.info(\"\u7f13\u5b58KEY\u5931\u6548:{}\", key);\n                cacheMap.remove(key);\n            }\n        }, expirationTimeMillis);\n    }\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/cache/ExpandCache.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.cache;\n\nimport com.github.stupdit1t.jackson.expand.config.JacksonExpandProperties;\nimport com.github.stupdit1t.jackson.expand.util.SpringUtil;\nimport com.github.stupdit1t.jackson.expand.serializer.ExpandSerializer;\nimport org.springframework.util.AntPathMatcher;\n\nimport java.time.Duration;\nimport java.util.Set;\nimport java.util.StringJoiner;", "import java.util.Set;\nimport java.util.StringJoiner;\n\n/**\n * \u7f13\u5b58\u62bd\u8c61\n */\npublic interface ExpandCache {\n\n    /**\n     * \u653e\u5165\u7f13\u5b58\n     *\n     * @param key\n     * @param value\n     * @param <T>\n     */\n    <T> void put(String key, T value, Duration timeout);\n\n    /**\n     * \u83b7\u53d6\u7f13\u5b58\n     *\n     * @param key\n     * @return\n     */\n    <T> T get(String key);\n\n    /**\n     * \u5217\u51fa\u5339\u914d\u7684\u7684key\n     *\n     * @param pattern\n     * @return\n     */\n    Set<String> keys(String pattern);\n\n    /**\n     * \u6e05\u7a7a\u7f13\u5b58\n     */\n    void clear();\n\n    /**\n     * \u5220\u9664\u7f13\u5b58\n     *\n     * @param key\n     */\n    void delete(String key);\n\n    /**\n     * \u6309\u7167bean\u5220\u9664\u7f13\u5b58\n     */\n    default void delete(String beanName, String method, Object bindData, Object... annotationVal) {\n        JacksonExpandProperties properties = SpringUtil.getBean(JacksonExpandProperties.class);\n        StringJoiner key = new StringJoiner(\"-\");\n        key.add(String.valueOf(bindData));", "        for (Object subVal : annotationVal) {\n            key.add(String.valueOf(subVal));\n        }\n        String cacheKey = properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();\n        delete(String.format(cacheKey, ExpandSerializer.OK));\n        delete(String.format(cacheKey, ExpandSerializer.FAIL));\n    }\n\n\n    /**\n     * \u6a21\u7cca\u5339\u914dkey\n     *\n     * @param pattern\n     * @param key\n     */\n    default boolean matchKey(String pattern, String key) {\n        AntPathMatcher antPathMatcher = new AntPathMatcher();\n        // *", "        if (\"*\".equals(pattern)) {\n            return true;\n        }\n        // h?llo\n        if (pattern.contains(\"?\")) {\n            if (antPathMatcher.match(pattern, key)) {\n                return true;\n            }\n        }\n        // h*llo\n        if (pattern.contains(\"*\")) {", "        if (pattern.contains(\"*\")) {\n            if (antPathMatcher.match(pattern, key)) {\n                return true;\n            }\n        }\n        // h[ae]llo\n        if (pattern.contains(\"[\") && pattern.contains(\"]\")) {\n            return key.matches(pattern);\n        }\n        return false;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/stupdit1t/jackson/expand/annotation/Expand.java", "chunked_list": ["package com.github.stupdit1t.jackson.expand.annotation;\n\nimport com.fasterxml.jackson.annotation.JacksonAnnotationsInside;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.github.stupdit1t.jackson.expand.handler.params.DefaultParamsHandler;\nimport com.github.stupdit1t.jackson.expand.handler.params.ParamsHandler;\nimport com.github.stupdit1t.jackson.expand.handler.rsp.DefaultResponseHandler;\nimport com.github.stupdit1t.jackson.expand.handler.rsp.ResponseHandler;\nimport com.github.stupdit1t.jackson.expand.serializer.ExpandSerializer;\n", "import com.github.stupdit1t.jackson.expand.serializer.ExpandSerializer;\n\nimport java.lang.annotation.*;\n\n/**\n * \u5c55\u5f00\u6ce8\u89e3\n *\n * @author 625\n */\n@Retention(RetentionPolicy.RUNTIME)", " */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE})\n@Inherited\n@JacksonAnnotationsInside\n@JsonSerialize(using = ExpandSerializer.class)\npublic @interface Expand {\n\n    /**\n     * spring\u64cd\u7684Bean-name", "    /**\n     * spring\u64cd\u7684Bean-name\n     *\n     * @return\n     */\n    String bean();\n\n    /**\n     * \u6570\u636e\u5c55\u5f00\u65b9\u6cd5\n     *", "     * \u6570\u636e\u5c55\u5f00\u65b9\u6cd5\n     *\n     * @return\n     */\n    String method() default \"expand\";\n\n    /**\n     * \u56de\u663e\u5230\u5b57\u6bb5, \u586b\u5199\u4e86\u5df2\u586b\u5199\u7684\u4e3a\u51c6, \u5426\u5219\u81ea\u52a8\u586b\u5145\u5f53\u524d\u5b57\u6bb5\n     *\n     * @return", "     *\n     * @return\n     */\n    String to() default \"\";\n\n    /**\n     * \u503c\u7f13\u5b58\u65f6\u95f4\uff0c \u5355\u4f4d\u79d2\n     *\n     * @return\n     */", "     * @return\n     */\n    int cacheTime() default -1;\n\n    /**\n     * \u662f\u5426\u8981\u5c55\u5f00\n     *\n     * @return\n     */\n    boolean expand() default true;", "     */\n    boolean expand() default true;\n\n    /**\n     * \u53c2\u6570\u5904\u7406\u5668\n     *\n     * @return\n     */\n    Class<? extends ParamsHandler> paramsHandler() default DefaultParamsHandler.class;\n", "    Class<? extends ParamsHandler> paramsHandler() default DefaultParamsHandler.class;\n\n    /**\n     * \u8fd4\u56de\u7ed3\u679c\u5904\u7406\u7c7b\n     *\n     * @return\n     */\n    Class<? extends ResponseHandler> responseHandler() default DefaultResponseHandler.class;\n}\n", "}\n"]}
