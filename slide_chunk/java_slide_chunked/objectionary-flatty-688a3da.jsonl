{"filename": "src/test/java/org/objectionary/ObjectsBoxTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.entities.Data;\nimport org.objectionary.entities.Empty;\nimport org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;", "import org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\n\n/**\n * ObjectsBox test.\n *\n * @since 0.1.0", " *\n * @since 0.1.0\n */\nfinal class ObjectsBoxTest {\n\n    /**\n     * Literal for v0.\n     */\n    private static final String INIT_OBJECT = \"\u03bd0\";\n", "    private static final String INIT_OBJECT = \"\u03bd0\";\n\n    @Test\n    void boxWithEmptyToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Empty());\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),", "        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 x \u21a6 \u00f8 \u27e7\")\n        );\n    }\n\n    @Test\n    void boxWithDataToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();", "        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u0394\", new Data(Integer.parseInt(\"000A\", 16)));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u0394 \u21a6 0x000A \u27e7\")\n        );\n    }\n", "    }\n\n    @Test\n    void boxWithLocatorToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Locator(\"\ud835\udf0b.\ud835\udf0b.y\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),", "        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 x \u21a6 \ud835\udf0b.\ud835\udf0b.y \u27e7\")\n        );\n    }\n\n    @Test\n    void boxWithFlatObjectToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();", "        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"y\", new FlatObject(\"bar\", \"\u03be\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 bar(\u03be) \u27e7\")\n        );\n    }\n", "    }\n\n    @Test\n    void boxWithLambdaToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u03bb\", new Lambda(\"Plus\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),", "        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 Plus \u27e7\")\n        );\n    }\n\n    @Test\n    void boxWithNestedObjectToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> application = new HashMap<>();", "        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> application = new HashMap<>();\n        application.put(\"x\", new Locator(\"\ud835\udf0b.\ud835\udf0b.z\"));\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"y\", new NestedObject(\"v\", application));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        MatcherAssert.assertThat(\n            box.toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 v( x \u21a6 \ud835\udf0b.\ud835\udf0b.z ) \u27e7\")\n        );", "            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 v( x \u21a6 \ud835\udf0b.\ud835\udf0b.z ) \u27e7\")\n        );\n    }\n\n    @Test\n    void zeroObjectOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Empty());\n        box.put(\"a\", bindings);", "        bindings.put(\"x\", new Empty());\n        box.put(\"a\", bindings);\n        bindings = new HashMap<>();\n        bindings.put(\"y\", new Empty());\n        box.put(\"b\", bindings);\n        bindings = new HashMap<>();\n        bindings.put(\"z\", new Empty());\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        final String result = box.toString();\n        MatcherAssert.assertThat(", "        final String result = box.toString();\n        MatcherAssert.assertThat(\n            result.split(\"\\n\")[0],\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 z \u21a6 \u00f8 \u27e7\")\n        );\n    }\n\n    @Test\n    void deltaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();", "    void deltaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u0394\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"x\", new Empty());\n        bindings.put(\"y\", new FlatObject(\"bar\", \"\ud835\udf0b\"));\n        bindings.put(\"a\", new Lambda(\"Atom\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        final String result = box.toString();\n        MatcherAssert.assertThat(", "        final String result = box.toString();\n        MatcherAssert.assertThat(\n            result.split(\" \")[3],\n            Matchers.equalTo(\"\u0394\")\n        );\n    }\n\n    @Test\n    void lambdaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();", "    void lambdaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u03bb\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"a1\", new Empty());\n        bindings.put(\"a2\", new FlatObject(\"bar\", \"\ud835\udf0b\"));\n        bindings.put(\"a3\", new Lambda(\"Atom\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        final String result = box.toString();\n        MatcherAssert.assertThat(", "        final String result = box.toString();\n        MatcherAssert.assertThat(\n            result.split(\" \")[3],\n            Matchers.equalTo(\"\u03bb\")\n        );\n    }\n\n    @Test\n    void phiOrderTest() {\n        final ObjectsBox box = new ObjectsBox();", "    void phiOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\ud835\udf11\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"a\", new Empty());\n        bindings.put(\"b\", new FlatObject(\"d\", \"\ud835\udf0b\"));\n        bindings.put(\"c\", new Lambda(\"Atom\"));\n        box.put(ObjectsBoxTest.INIT_OBJECT, bindings);\n        final String result = box.toString();\n        MatcherAssert.assertThat(", "        final String result = box.toString();\n        MatcherAssert.assertThat(\n            result.split(\" \")[3],\n            Matchers.equalTo(\"\ud835\udf11\")\n        );\n    }\n}\n"]}
{"filename": "src/test/java/org/objectionary/package-info.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Flatty tests.", "/**\n * Flatty tests.\n *\n * @since 0.1.0\n */\npackage org.objectionary;\n"]}
{"filename": "src/test/java/org/objectionary/EntitiesTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.hamcrest.MatcherAssert;", "\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.entities.Data;\nimport org.objectionary.entities.Empty;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;", "import org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\nimport org.objectionary.parsing.Entities;\n\n/**\n * Entities reader test.\n *\n * @since 0.1.0", " *\n * @since 0.1.0\n * @todo #53:30min Add more tests for Reader.\n *  It should nested entities tests.\n *  Also we have to enable this tests.\n */\nfinal class EntitiesTest {\n\n    @Test\n    void readOneEmptyTest() {", "    @Test\n    void readOneEmptyTest() {\n        final String input = \"\u00f8\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(Empty.class)\n        );\n    }\n", "    }\n\n    @Test\n    void readOneLocatorTest() {\n        final String input = \"\ud835\udf0b.\ud835\udf0b.\ud835\udf0b.x\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(Locator.class)\n        );", "            Matchers.instanceOf(Locator.class)\n        );\n    }\n\n    @Test\n    void readOneLambdaTest() {\n        final String input = \"int-times\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),", "        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(Lambda.class)\n        );\n    }\n\n    @Test\n    void readOneDataTest() {\n        final String input = \"0x0042\";\n        final Entities reader = new Entities(new Tokenizer(input));", "        final String input = \"0x0042\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(Data.class)\n        );\n    }\n\n    @Test\n    void readOneObjectTest() {", "    @Test\n    void readOneObjectTest() {\n        final String input = \"\u03bd(\ud835\udf0b)\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(FlatObject.class)\n        );\n    }\n", "    }\n\n    @Disabled\n    @Test\n    void readOneFailedTest() {\n        final String input = \"...\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(IllegalArgumentException.class)", "            reader.one(),\n            Matchers.instanceOf(IllegalArgumentException.class)\n        );\n    }\n\n    @Test\n    void readOneNestedObject() {\n        final String input = \"\u03bd1( \u03c1 \u21a6 \u03be.\u03c1 )\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(", "        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(NestedObject.class)\n        );\n    }\n\n    @Test\n    void readOneDoubledNestedObject() {\n        final String input = \"\u03bd2( \u03bd3 \u21a6 \u03bd4( \u03c1 \u21a6 \u03be.\u03c1 ) )\";", "    void readOneDoubledNestedObject() {\n        final String input = \"\u03bd2( \u03bd3 \u21a6 \u03bd4( \u03c1 \u21a6 \u03be.\u03c1 ) )\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        MatcherAssert.assertThat(\n            reader.one(),\n            Matchers.instanceOf(NestedObject.class)\n        );\n    }\n\n    @Test", "\n    @Test\n    void failedToReadOneNestedObject() {\n        final String input = \"\u27e6 \u03bd3 \u21a6 \u03bd4( \u03c1 \u21a6 \u03be.\u03c1 ) \u27e7\";\n        final Entities reader = new Entities(new Tokenizer(input));\n        Assertions.assertThrows(\n            IllegalArgumentException.class,\n            () -> reader.one()\n        );\n    }", "        );\n    }\n}\n"]}
{"filename": "src/test/java/org/objectionary/ParserTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.hamcrest.MatcherAssert;", "\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.parsing.Parser;\n\n/**\n * Parser test.\n *", " * Parser test.\n *\n * @since 0.1.0\n */\nfinal class ParserTest {\n\n    /**\n     * Simple parsing test.\n     */\n    @Disabled", "     */\n    @Disabled\n    @Test\n    void simpleParsingTest() {\n        final String line = \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 int-neg, \u03c1 \u21a6 \ud835\udf0b.\ud835\udefc0 \u27e7\";\n        final Parser parser = new Parser(line);\n        MatcherAssert.assertThat(parser.parse().toString(), Matchers.equalTo(line));\n    }\n\n    /**", "\n    /**\n     * Simple nested test.\n     */\n    @Disabled\n    @Test\n    void simpleNestedTest() {\n        final String line = \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd2( a \u21a6 \u03be.x ) \u27e7\";\n        final Parser parser = new Parser(line);\n        MatcherAssert.assertThat(parser.parse().toString(), Matchers.equalTo(line));", "        final Parser parser = new Parser(line);\n        MatcherAssert.assertThat(parser.parse().toString(), Matchers.equalTo(line));\n    }\n\n    /**\n     * Large test.\n     */\n    @Disabled\n    @Test\n    void largeTest() {", "    @Test\n    void largeTest() {\n        final String[] input = {\n            \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd3(\ud835\udf0b) \u27e7\",\n            \"\u03bd1(\ud835\udf0b) \u21a6 \u27e6 \u0394 \u21a6 0x002A \u27e7\",\n            \"\u03bd2(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 int-add, \u03c1 \u21a6 \ud835\udf0b.\ud835\udefc0, \ud835\udefc0 \u21a6 \ud835\udf0b.\ud835\udefc1 \u27e7\",\n            \"\u03bd3(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd2(\u03be), \ud835\udefc1 \u21a6 \u03bd1 \u27e7\",\n            \"\u03bd5(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd3(\u03be) \u27e7\",\n        };\n        final String[] correct = {", "        };\n        final String[] correct = {\n            \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd3(\ud835\udf0b) \u27e7\",\n            \"\u03bd1(\ud835\udf0b) \u21a6 \u27e6 \u0394 \u21a6 0x002A \u27e7\",\n            \"\u03bd2(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 int-add, \u03c1 \u21a6 \ud835\udf0b.\ud835\udefc0, \ud835\udefc0 \u21a6 \ud835\udf0b.\ud835\udefc1 \u27e7\",\n            \"\u03bd3(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd2(\u03be), \ud835\udefc1 \u21a6 \u03bd1 \u27e7\",\n            \"\u03bd5(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd3(\u03be) \u27e7\",\n        };\n        final Parser parser = new Parser(String.join(\"\\n\", input));\n        MatcherAssert.assertThat(", "        final Parser parser = new Parser(String.join(\"\\n\", input));\n        MatcherAssert.assertThat(\n            parser.parse().toString(),\n            Matchers.equalToCompressingWhiteSpace(String.join(\"\\n\", correct))\n        );\n    }\n\n    /**\n     * Large test with nested objects.\n     */", "     * Large test with nested objects.\n     */\n    @Test\n    @Disabled\n    void largeWithNestingTest() {\n        final String[] input = {\n            \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd1( x \u21a6 \u03bd2( y \u21a6 0x0007 ) ) \u27e7\",\n            \"\u03bd1(\ud835\udf0b) \u21a6 \u27e6 x \u21a6 \u00f8 \u27e7\",\n            \"\u03bd2(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 \u00f8 \u27e7\",\n        };", "            \"\u03bd2(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 \u00f8 \u27e7\",\n        };\n        final String[] correct = {\n            \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd1( x \u21a6 \u03bd2( y \u21a6 0x0007 ) ) \u27e7\",\n            \"\u03bd1(\ud835\udf0b) \u21a6 \u27e6 x \u21a6 \u00f8 \u27e7\",\n            \"\u03bd2(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 \u00f8 \u27e7\",\n        };\n        final Parser parser = new Parser(String.join(\"\\n\", input));\n        MatcherAssert.assertThat(\n            parser.parse().toString(),", "        MatcherAssert.assertThat(\n            parser.parse().toString(),\n            Matchers.equalToCompressingWhiteSpace(String.join(\"\\n\", correct))\n        );\n    }\n}\n"]}
{"filename": "src/test/java/org/objectionary/FlatterTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.entities.Data;\nimport org.objectionary.entities.Empty;\nimport org.objectionary.entities.Entity;", "import org.objectionary.entities.Empty;\nimport org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\n\n/**\n * Test case for {@link Flatter}.\n * @since 0.1.0", " * Test case for {@link Flatter}.\n * @since 0.1.0\n *\n * @todo #23:30min Enable several tests in this FlatterTest class.\n *  Since they are failed due to NPE, we need to fix them. The tests\n *  are disabled for now.\n */\nfinal class FlatterTest {\n\n    /**", "\n    /**\n     * Literal for v0.\n     */\n    private static final String INIT_OBJECT = \"\u03bd0\";\n\n    /**\n     * Flatter can flatten empty object.\n     */\n    @Test", "     */\n    @Test\n    void testFlatter() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Empty());\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat(),", "        MatcherAssert.assertThat(\n            flatter.flat(),\n            Matchers.equalTo(box)\n        );\n    }\n\n    @Test\n    void boxWithDataToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();", "        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u0394\", new Data(Integer.parseInt(\"000A\", 16)));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u0394 \u21a6 0x000A \u27e7\")\n        );\n    }", "        );\n    }\n\n    @Test\n    void boxWithLocatorToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Locator(\"\ud835\udf0b.\ud835\udf0b.y\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);", "        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 x \u21a6 \ud835\udf0b.\ud835\udf0b.y \u27e7\")\n        );\n    }\n\n    @Test\n    @Disabled", "    @Test\n    @Disabled\n    void boxWithFlatObjectToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"y\", new FlatObject(\"bar\", \"\u03be\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString(),", "        MatcherAssert.assertThat(\n            flatter.flat().toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 bar(\u03be) \u27e7\")\n        );\n    }\n\n    @Test\n    void boxWithLambdaToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();", "        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u03bb\", new Lambda(\"Plus\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 Plus \u27e7\")\n        );\n    }", "        );\n    }\n\n    @Test\n    @Disabled\n    void boxWithNestedObjectToStringTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> application = new HashMap<>();\n        application.put(\"x\", new Locator(\"\ud835\udf0b.\ud835\udf0b.z\"));\n        final Map<String, Entity> bindings = new HashMap<>();", "        application.put(\"x\", new Locator(\"\ud835\udf0b.\ud835\udf0b.z\"));\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"y\", new NestedObject(\"v\", application));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString(),\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 y \u21a6 v( x \u21a6 \ud835\udf0b.\ud835\udf0b.z ) \u27e7\")\n        );\n    }", "        );\n    }\n\n    @Test\n    @Disabled\n    void zeroObjectOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"x\", new Empty());\n        box.put(\"a\", bindings);", "        bindings.put(\"x\", new Empty());\n        box.put(\"a\", bindings);\n        bindings = new HashMap<>();\n        bindings.put(\"y\", new Empty());\n        box.put(\"b\", bindings);\n        bindings = new HashMap<>();\n        bindings.put(\"z\", new Empty());\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(", "        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString().split(\"\\n\")[0],\n            Matchers.equalTo(\"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 z \u21a6 \u00f8 \u27e7\")\n        );\n    }\n\n    @Test\n    @Disabled\n    void deltaOrderTest() {", "    @Disabled\n    void deltaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u0394\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"x\", new Empty());\n        bindings.put(\"y\", new FlatObject(\"bar\", \"\ud835\udf0b\"));\n        bindings.put(\"a\", new Lambda(\"Atom\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);", "        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString().split(\" \")[3],\n            Matchers.equalTo(\"\u0394\")\n        );\n    }\n\n    @Test\n    @Disabled", "    @Test\n    @Disabled\n    void lambdaOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\u03bb\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"a1\", new Empty());\n        bindings.put(\"a2\", new FlatObject(\"bar\", \"\ud835\udf0b\"));\n        bindings.put(\"a3\", new Lambda(\"Atom\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);", "        bindings.put(\"a3\", new Lambda(\"Atom\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString().split(\" \")[3],\n            Matchers.equalTo(\"\u03bb\")\n        );\n    }\n\n    @Test", "\n    @Test\n    @Disabled\n    void phiOrderTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final Map<String, Entity> bindings = new HashMap<>();\n        bindings.put(\"\ud835\udf11\", new Data(Integer.parseInt(\"000A\", 16)));\n        bindings.put(\"a\", new Empty());\n        bindings.put(\"b\", new FlatObject(\"d\", \"\ud835\udf0b\"));\n        bindings.put(\"c\", new Lambda(\"Atom\"));", "        bindings.put(\"b\", new FlatObject(\"d\", \"\ud835\udf0b\"));\n        bindings.put(\"c\", new Lambda(\"Atom\"));\n        box.put(FlatterTest.INIT_OBJECT, bindings);\n        final Flatter flatter = new Flatter(box);\n        MatcherAssert.assertThat(\n            flatter.flat().toString().split(\" \")[3],\n            Matchers.equalTo(\"\ud835\udf11\")\n        );\n    }\n", "    }\n\n}\n"]}
{"filename": "src/test/java/org/objectionary/TypeCheckerTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.hamcrest.MatcherAssert;", "\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.parsing.TypeChecker;\n\n/**\n * TypeChecker test.\n *\n * @since 0.1.0", " *\n * @since 0.1.0\n */\nfinal class TypeCheckerTest {\n\n    @Test\n    void isEmptyTest() {\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u00f8\").isEmpty(),\n            Matchers.is(true)", "            new TypeChecker(\"\u00f8\").isEmpty(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u00f8()\").isEmpty(),\n            Matchers.is(false)\n        );\n    }\n\n    @Test", "\n    @Test\n    void isLocatorTest() {\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\ud835\udf0b.\ud835\udf0b.\ud835\udf0b.x\").isLocator(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u03be.y\").isLocator(),\n            Matchers.is(true)", "            new TypeChecker(\"\u03be.y\").isLocator(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u03bd0\").isLocator(),\n            Matchers.is(false)\n        );\n    }\n\n    @Test", "\n    @Test\n    void isDataTest() {\n        MatcherAssert.assertThat(\n            new TypeChecker(\"0x1234\").isData(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"42\").isData(),\n            Matchers.is(false)", "            new TypeChecker(\"42\").isData(),\n            Matchers.is(false)\n        );\n    }\n\n    @Test\n    void isLambdaTest() {\n        MatcherAssert.assertThat(\n            new TypeChecker(\"int-times\").isLambda(),\n            Matchers.is(true)", "            new TypeChecker(\"int-times\").isLambda(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"bool-if\").isLambda(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"42\").isLambda(),\n            Matchers.is(false)", "            new TypeChecker(\"42\").isLambda(),\n            Matchers.is(false)\n        );\n    }\n\n    @Test\n    void isObjectTest() {\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u03bd0(\ud835\udf0b)\").isObject(),\n            Matchers.is(true)", "            new TypeChecker(\"\u03bd0(\ud835\udf0b)\").isObject(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u03bd1(\u03be)\").isObject(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"\u03bd2\").isObject(),\n            Matchers.is(true)", "            new TypeChecker(\"\u03bd2\").isObject(),\n            Matchers.is(true)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"x(\ud835\udf0b)\").isObject(),\n            Matchers.is(false)\n        );\n        MatcherAssert.assertThat(\n            new TypeChecker(\"y\").isObject(),\n            Matchers.is(false)", "            new TypeChecker(\"y\").isObject(),\n            Matchers.is(false)\n        );\n    }\n}\n"]}
{"filename": "src/test/java/org/objectionary/ParseLineTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.hamcrest.MatcherAssert;", "\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.parsing.LineParser;\n\n/**\n * Line parser test.\n *", " * Line parser test.\n *\n * @since 0.1.0\n */\nfinal class ParseLineTest {\n\n    /**\n    * Simple parsing test.\n    */\n    @Disabled", "    */\n    @Disabled\n    @Test\n    void simpleParsingTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final String line = \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \u03bb \u21a6 int-neg, \u03c1 \u21a6 \ud835\udf0b.\ud835\udefc0 \u27e7\";\n        final LineParser parser = new LineParser(box);\n        parser.parseLine(line);\n        MatcherAssert.assertThat(parser.toString(), Matchers.equalTo(line));\n    }", "        MatcherAssert.assertThat(parser.toString(), Matchers.equalTo(line));\n    }\n\n    /**\n     * Simple nested test.\n     */\n    @Disabled\n    @Test\n    void simpleNestedTest() {\n        final ObjectsBox box = new ObjectsBox();", "    void simpleNestedTest() {\n        final ObjectsBox box = new ObjectsBox();\n        final String line = \"\u03bd0(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd2( a \u21a6 \u03be.x ) \u27e7\";\n        final LineParser parser = new LineParser(box);\n        parser.parseLine(line);\n        MatcherAssert.assertThat(parser.toString(), Matchers.equalTo(line));\n    }\n\n}\n", "}\n"]}
{"filename": "src/test/java/org/objectionary/TokenizerTest.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.hamcrest.MatcherAssert;", "\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.junit.jupiter.api.Test;\nimport org.objectionary.tokens.ArrowToken;\nimport org.objectionary.tokens.BracketToken;\nimport org.objectionary.tokens.StringToken;\nimport org.objectionary.tokens.Token;\n\n/**", "\n/**\n * Tokenizer test.\n *\n * @since 0.1.0\n */\nfinal class TokenizerTest {\n\n    @Test\n    void tokenizerTest() {", "    @Test\n    void tokenizerTest() {\n        final String input = \"\u03bd1(\ud835\udf0b) \u21a6 \u27e6 \ud835\udf11 \u21a6 \u03bd2( a \u21a6 \u03be.x ) \u27e7\";\n        final Tokenizer tokenizer = new Tokenizer(input);\n        int index = 0;\n        final Token[] expectations = {\n            new StringToken(\"\"),\n            new ArrowToken(),\n            new BracketToken(BracketToken.BracketType.OPEN),\n            new StringToken(\"\"),", "            new BracketToken(BracketToken.BracketType.OPEN),\n            new StringToken(\"\"),\n            new ArrowToken(),\n            new StringToken(\"\"),\n            new StringToken(\"\"),\n            new ArrowToken(),\n            new StringToken(\"\"),\n            new BracketToken(BracketToken.BracketType.CLOSE),\n            new BracketToken(BracketToken.BracketType.CLOSE),\n        };\n        while (tokenizer.hasNext()) {\n            final Token expected = expectations[index];\n            index += 1;\n            MatcherAssert.assertThat(\n                tokenizer.getToken(), Matchers.instanceOf(expected.getClass())\n            );", "            new BracketToken(BracketToken.BracketType.CLOSE),\n        };\n        while (tokenizer.hasNext()) {\n            final Token expected = expectations[index];\n            index += 1;\n            MatcherAssert.assertThat(\n                tokenizer.getToken(), Matchers.instanceOf(expected.getClass())\n            );\n            if (expected instanceof BracketToken) {\n                MatcherAssert.assertThat(\n                    ((BracketToken) expected).getState(),\n                    Matchers.equalTo(((BracketToken) tokenizer.getToken()).getState())\n                );\n            }\n            tokenizer.next();\n        }\n    }\n}\n", "            if (expected instanceof BracketToken) {\n                MatcherAssert.assertThat(\n                    ((BracketToken) expected).getState(),\n                    Matchers.equalTo(((BracketToken) tokenizer.getToken()).getState())\n                );\n            }\n            tokenizer.next();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/Flatter.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Queue;\nimport java.util.Set;", "import java.util.Queue;\nimport java.util.Set;\nimport org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\n\n/**\n * This class realizes the flattening of the objects.\n * @since 0.1.0", " * This class realizes the flattening of the objects.\n * @since 0.1.0\n */\npublic final class Flatter {\n\n    /**\n     * The counter of created objects.\n     */\n    private static int counter;\n\n    /**\n     * The objects box.\n     */\n    private final ObjectsBox box;\n\n    /**\n     * Constructor.\n     * @param box The objects box.\n     */\n    public Flatter(final ObjectsBox box) {\n        this.box = box;\n    }\n\n    /**\n     * Flattens the objects.\n     * @return The flattened objects box.\n     */", "    public ObjectsBox flat() {\n        Flatter.counter = this.findMaxIndex() + 1;\n        boolean found = true;\n        while (found) {\n            found = false;\n            for (\n                final Map.Entry<String, Map<String, Entity>> entry : this.box.content().entrySet()\n            ) {\n                for (final Map.Entry<String, Entity> binding : entry.getValue().entrySet()) {\n                    if (binding.getValue() instanceof NestedObject) {\n                        this.flatOne(\n                            binding.getKey(),\n                            (NestedObject) binding.getValue(),\n                            entry.getValue()\n                        );\n                        found = true;\n                        break;\n                    }\n                }", "                for (final Map.Entry<String, Entity> binding : entry.getValue().entrySet()) {\n                    if (binding.getValue() instanceof NestedObject) {\n                        this.flatOne(\n                            binding.getKey(),\n                            (NestedObject) binding.getValue(),\n                            entry.getValue()\n                        );\n                        found = true;\n                        break;\n                    }\n                }", "                if (found) {\n                    break;\n                }\n            }\n        }\n        this.removeUnusedObjects();\n        this.resuspendLocalBinds();\n        this.renameObjects();\n        return this.box;\n    }\n\n    /**\n     * Flattens one object.\n     * @param key The name of binding to this non-flat object.\n     * @param object The non-flat object itself.\n     * @param user The object which contains the non-flat object.\n     */\n    private void flatOne(\n        final String key,\n        final NestedObject object,\n        final Map<String, Entity> user\n    ) {\n        final Map<String, Entity> bindings = deepCopy(this.box.get(object.getName()));\n        final Map<String, Entity> application = deepCopy(object.getApplication());\n        final Map<String, Entity> reframed = deepReframe(application);", "        for (final Map.Entry<String, Entity> entry : reframed.entrySet()) {\n            if (bindings.containsKey(entry.getKey())) {\n                bindings.put(entry.getKey(), entry.getValue());\n            }\n        }\n        final String name = String.format(\"\u03bd%d\", Flatter.counter);\n        Flatter.counter += 1;\n        this.box.put(name, bindings);\n        user.put(key, new FlatObject(name, \"\u03be\"));\n    }\n\n    /**\n     * Removes unused objects from the box.\n     */\n    private void removeUnusedObjects() {\n        final Set<String> uses = new HashSet<>();\n        final Queue<String> queue = new LinkedList<>();\n        queue.add(\"\u03bd0\");", "        while (!queue.isEmpty()) {\n            final String name = queue.poll();\n            uses.add(name);\n            for (final Map.Entry<String, Entity> binding : this.box.get(name).entrySet()) {\n                if (binding.getValue() instanceof FlatObject) {\n                    final String value = ((FlatObject) binding.getValue()).getName();\n                    if (!uses.contains(value)) {\n                        queue.add(value);\n                    }\n                }\n            }\n        }\n        this.box.content().entrySet().removeIf(entry -> !uses.contains(entry.getKey()));\n    }\n\n    /**\n     * Takes all locators to local variables and clearly sets them up.\n     */\n    private void resuspendLocalBinds() {", "        for (final Map<String, Entity> bindings : this.box.content().values()) {\n            boolean found = true;\n            while (found) {\n                found = false;\n                for (final Map.Entry<String, Entity> binding : bindings.entrySet()) {\n                    if (binding.getValue() instanceof Locator) {\n                        final List<String> locator = ((Locator) binding.getValue()).getPath();\n                        if (!locator.get(0).equals(\"\u03be\")) {\n                            continue;\n                        }\n                        final String name = locator.get(1);\n                        final Entity entity = bindings.get(name);\n                        bindings.remove(name);\n                        bindings.put(binding.getKey(), entity);\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Renames the objects to use smaller indexes.\n     */\n    private void renameObjects() {\n        final List<Integer> list = new ArrayList<>(0);", "        for (final String name : this.box.content().keySet()) {\n            list.add(Integer.parseInt(name.substring(1)));\n        }\n        Collections.sort(list);\n        final int size = this.box.content().size();\n        for (int idx = 0; idx < size; ++idx) {\n            final String end = String.valueOf(idx);\n            final String start = String.valueOf(list.get(idx));\n            if (end.equals(start)) {\n                continue;\n            }\n            this.changeName(String.format(\"\u03bd%s\", start), String.format(\"\u03bd%s\", end));\n        }\n    }\n\n    /**\n     * Changes the name of the object.\n     * @param start The old name.\n     * @param end The new name.\n     */\n    private void changeName(final String start, final String end) {", "            if (end.equals(start)) {\n                continue;\n            }\n            this.changeName(String.format(\"\u03bd%s\", start), String.format(\"\u03bd%s\", end));\n        }\n    }\n\n    /**\n     * Changes the name of the object.\n     * @param start The old name.\n     * @param end The new name.\n     */\n    private void changeName(final String start, final String end) {", "        for (\n            final Map.Entry<String, Map<String, Entity>> bindings\n                : this.box.content().entrySet()\n        ) {\n            for (final Map.Entry<String, Entity> binding : bindings.getValue().entrySet()) {\n                if (\n                    binding.getValue() instanceof FlatObject\n                        && ((FlatObject) binding.getValue()).getName().equals(start)\n                ) {\n                    binding.setValue(\n                        new FlatObject(end, ((FlatObject) binding.getValue()).getLocator())\n                    );\n                }\n            }\n        }\n        this.box.put(end, this.box.get(start));\n        this.box.content().remove(start);\n    }\n\n    /**\n     * Finds the maximum index of the objects.\n     * @return The maximum index of the objects.\n     */\n    private int findMaxIndex() {\n        return this.box.content().keySet().stream()\n            .map(key -> Integer.parseInt(key.substring(1)))\n            .max(Integer::compareTo).orElse(0);\n    }\n\n    /**\n     * Returns the deep copy of the bindings.\n     * @param bindings The bindings.\n     * @return The deep copy of the bindings.\n     */\n    private static Map<String, Entity> deepCopy(final Map<String, Entity> bindings) {\n        final Map<String, Entity> result = new HashMap<>(bindings.size());", "        for (final Map.Entry<String, Entity> entry : bindings.entrySet()) {\n            result.put(entry.getKey(), entry.getValue().copy());\n        }\n        return result;\n    }\n\n    /**\n     * Returns the deep reframe of the bindings.\n     * @param bindings The bindings.\n     * @return The deep reframe of the bindings.\n     */\n    private static Map<String, Entity> deepReframe(final Map<String, Entity> bindings) {\n        final Map<String, Entity> result = new HashMap<>(bindings.size());", "        for (final Map.Entry<String, Entity> entry : bindings.entrySet()) {\n            result.put(entry.getKey(), entry.getValue().reframe());\n        }\n        return result;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/objectionary/package-info.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * All nessessary classes for working with Flatty.", "/**\n * All nessessary classes for working with Flatty.\n * @since 0.1.0\n */\npackage org.objectionary;\n"]}
{"filename": "src/main/java/org/objectionary/ObjectsBox.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.objectionary.entities.Entity;\n\n/**\n * This class represents the objects box.", "/**\n * This class represents the objects box.\n * @since 0.1.0\n */\npublic final class ObjectsBox {\n\n    /**\n     * The box of objects.\n     */\n    private final Map<String, Map<String, Entity>> box;\n\n    /**\n     * Constructor.\n     */\n    public ObjectsBox() {\n        this.box = new HashMap<>();\n    }\n\n    /**\n     * Puts an object into the box.\n     * @param name The name of the object.\n     * @param bindings The bindings of the object.\n     */", "    public void put(final String name, final Map<String, Entity> bindings) {\n        this.box.put(name, bindings);\n    }\n\n    /**\n     * Gets an object by name.\n     * @param name The name of the object.\n     * @return The object.\n     */\n    public Map<String, Entity> get(final String name) {\n        return this.box.get(name);\n    }\n\n    /**\n     * Gets the box of objects.\n     * @return The box of objects.\n     */\n    public Map<String, Map<String, Entity>> content() {\n        return this.box;\n    }\n\n    /**\n     * Converts the box of objects to a string.\n     * @checkstyle NoJavadocForOverriddenMethodsCheck (10 lines)\n     */\n    @Override", "    public String toString() {\n        if (!this.box.containsKey(\"\u03bd0\")) {\n            throw new IllegalArgumentException(\"The box does not contain the object \u03bd0.\");\n        }\n        final List<String> results = new ArrayList<>(this.box.size());\n        results.add(ObjectsBox.serialize(\"\u03bd0\", this.box.get(\"\u03bd0\")));\n        for (final Map.Entry<String, Map<String, Entity>> entry : this.box.entrySet()) {\n            if (entry.getKey().equals(\"\u03bd0\")) {\n                continue;\n            }\n            results.add(\n                ObjectsBox.serialize(entry.getKey(), entry.getValue())\n            );\n        }\n        return String.join(\"\\n\", results);\n    }\n\n    /**\n     * Converts an object to a string.\n     * @param name The name of the object.\n     * @param bindings The bindings of the object.\n     * @return The string representation of the object.\n     */\n    private static String serialize(\n        final String name, final Map<String, Entity> bindings\n    ) {\n        final List<String> dataizations = Arrays.asList(\"\u0394\", \"\ud835\udf11\", \"\u03bb\");\n        final List<String> result = new ArrayList<>(bindings.size());", "        for (final String binding : dataizations) {\n            if (bindings.containsKey(binding)) {\n                result.add(\n                    String.format(\"%s \u21a6 %s\", binding, bindings.get(binding))\n                );\n            }\n        }\n        for (final Map.Entry<String, Entity> binding : bindings.entrySet()) {\n            if (dataizations.contains(binding.getKey())) {\n                continue;\n            }\n            result.add(\n                String.format(\"%s \u21a6 %s\", binding.getKey(), binding.getValue())\n            );\n        }\n        return String.format(\n            \"%s(\ud835\udf0b) \u21a6 \u27e6 %s \u27e7\",\n            name,\n            String.join(\", \", result)\n        );\n    }\n\n}\n", "            if (dataizations.contains(binding.getKey())) {\n                continue;\n            }\n            result.add(\n                String.format(\"%s \u21a6 %s\", binding.getKey(), binding.getValue())\n            );\n        }\n        return String.format(\n            \"%s(\ud835\udf0b) \u21a6 \u27e6 %s \u27e7\",\n            name,\n            String.join(\", \", result)\n        );\n    }\n\n}\n"]}
{"filename": "src/main/java/org/objectionary/Tokenizer.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary;\n\nimport org.objectionary.tokens.ArrowToken;", "\nimport org.objectionary.tokens.ArrowToken;\nimport org.objectionary.tokens.BracketToken;\nimport org.objectionary.tokens.StringToken;\nimport org.objectionary.tokens.Token;\n\n/**\n * This class is representing the tokens stream.\n * @since 0.1.0\n */\npublic final class Tokenizer {\n\n    /**\n     * The tokens.\n     */\n    private final String[] tokens;\n\n    /**\n     * The current position.\n     */\n    private int position;\n\n    /**\n     * Constructor.\n     *\n     * @param input The input string.\n     */\n    public Tokenizer(final String input) {\n        this.tokens = input.split(\" \");\n        this.position = 0;\n    }\n\n    /**\n     * Checks if there are more tokens.\n     * @return True if there are more tokens.\n     */", " * @since 0.1.0\n */\npublic final class Tokenizer {\n\n    /**\n     * The tokens.\n     */\n    private final String[] tokens;\n\n    /**\n     * The current position.\n     */\n    private int position;\n\n    /**\n     * Constructor.\n     *\n     * @param input The input string.\n     */\n    public Tokenizer(final String input) {\n        this.tokens = input.split(\" \");\n        this.position = 0;\n    }\n\n    /**\n     * Checks if there are more tokens.\n     * @return True if there are more tokens.\n     */", "    public boolean hasNext() {\n        return this.position < this.tokens.length;\n    }\n\n    /**\n     * Returns the current token.\n     * @return The current token.\n     */\n    public Token getToken() {\n        final String token = this.tokens[this.position];\n        final Token result;\n        switch (token) {\n            case \"\u21a6\":\n                result = new ArrowToken();\n                break;\n            case \"(\":\n            case \"\u27e6\":\n                result = new BracketToken(BracketToken.BracketType.OPEN);\n                break;\n            case \")\":\n            case \"\u27e7\":\n                result = new BracketToken(BracketToken.BracketType.CLOSE);\n                break;\n            default:\n                result = new StringToken(token);\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Increments the position.\n     */", "    public Token getToken() {\n        final String token = this.tokens[this.position];\n        final Token result;\n        switch (token) {\n            case \"\u21a6\":\n                result = new ArrowToken();\n                break;\n            case \"(\":\n            case \"\u27e6\":\n                result = new BracketToken(BracketToken.BracketType.OPEN);\n                break;\n            case \")\":\n            case \"\u27e7\":\n                result = new BracketToken(BracketToken.BracketType.CLOSE);\n                break;\n            default:\n                result = new StringToken(token);\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Increments the position.\n     */", "    public void next() {\n        this.position += 1;\n    }\n}\n\n"]}
{"filename": "src/main/java/org/objectionary/parsing/TypeChecker.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.parsing;\n\n/**", "\n/**\n * This class is representing the type checker.\n * @since 0.1.0\n */\npublic final class TypeChecker {\n\n    /**\n     * The token to check the type of.\n     */\n    private final String token;\n\n    /**\n     * Constructor.\n     * @param token The token to check the type of.\n     */\n    public TypeChecker(final String token) {\n        this.token = token;\n    }\n\n    /**\n     * Checks if the token is an empty.\n     * @return True if the token is an empty.\n     */", "    public boolean isEmpty() {\n        return this.token.equals(\"\u00f8\");\n    }\n\n    /**\n     * Checks if the token is a locator.\n     * @return True if the token is a locator.\n     */\n    public boolean isLocator() {\n        return this.token.startsWith(\"\ud835\udf0b.\") || this.token.startsWith(\"\u03be.\");\n    }\n\n    /**\n     * Checks if the token is a data.\n     * @return True if the token is a data.\n     */", "    public boolean isLocator() {\n        return this.token.startsWith(\"\ud835\udf0b.\") || this.token.startsWith(\"\u03be.\");\n    }\n\n    /**\n     * Checks if the token is a data.\n     * @return True if the token is a data.\n     */\n    public boolean isData() {\n        return this.token.startsWith(\"0x\");\n    }\n\n    /**\n     * Checks if the token is a lambda.\n     * @return True if the token is a lambda.\n     */", "    public boolean isData() {\n        return this.token.startsWith(\"0x\");\n    }\n\n    /**\n     * Checks if the token is a lambda.\n     * @return True if the token is a lambda.\n     */\n    public boolean isLambda() {\n        return this.token.startsWith(\"bool\") || this.token.startsWith(\"int\");\n    }\n\n    /**\n     * Checks if the token is an object.\n     * @return True if the token is an object.\n     */", "    public boolean isLambda() {\n        return this.token.startsWith(\"bool\") || this.token.startsWith(\"int\");\n    }\n\n    /**\n     * Checks if the token is an object.\n     * @return True if the token is an object.\n     */\n    public boolean isObject() {\n        return this.token.charAt(0) == '\u03bd';\n    }\n}\n", "    public boolean isObject() {\n        return this.token.charAt(0) == '\u03bd';\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/parsing/package-info.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Package with parsing classes.", "/**\n * Package with parsing classes.\n */\npackage org.objectionary.parsing;\n"]}
{"filename": "src/main/java/org/objectionary/parsing/Entities.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.parsing;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.objectionary.Tokenizer;\nimport org.objectionary.entities.Data;\nimport org.objectionary.entities.Empty;\nimport org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;", "import org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\nimport org.objectionary.tokens.BracketToken;\nimport org.objectionary.tokens.StringToken;\nimport org.objectionary.tokens.Token;\n\n/**\n * Entities reader.\n * @since 0.1.0", " * Entities reader.\n * @since 0.1.0\n * @checkstyle NonStaticMethodCheck (100 lines)\n */\npublic final class Entities {\n\n    /**\n     * The tokenizer.\n     */\n    @SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n    private final Tokenizer tokenizer;\n\n    /**\n     * Constructor.\n     * @param tokenizer The tokenizer.\n     */\n    public Entities(final Tokenizer tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n\n    /**\n     * Reads one entity.\n     * @return The parsed entity.\n     */", "    public Entity one() {\n        final Token token = this.tokenizer.getToken();\n        if (!(token instanceof StringToken)) {\n            throw new IllegalArgumentException(\"Expected string token\");\n        }\n        final String value = ((StringToken) token).getValue();\n        final Entity result;\n        final TypeChecker type = new TypeChecker(value);\n        if (type.isEmpty()) {\n            result = new Empty();\n        } else if (type.isLocator()) {\n            result = new Locator(value);", "        if (type.isEmpty()) {\n            result = new Empty();\n        } else if (type.isLocator()) {\n            result = new Locator(value);\n        } else if (type.isData()) {\n            result = new Data(Integer.parseInt(value.substring(2), 16));\n        } else if (type.isLambda()) {\n            result = new Lambda(value);\n        } else if (type.isObject()) {\n            result = this.createObject(value);\n        } else {\n            throw new IllegalArgumentException(\"Unknown token\");\n        }\n        return result;\n    }\n\n    /**\n     * Reads nested entity.\n     * @return The parsed nested entity.\n     */\n    public Map<String, Entity> nested() {\n        final Map<String, Entity> result = new HashMap<>();", "        } else if (type.isObject()) {\n            result = this.createObject(value);\n        } else {\n            throw new IllegalArgumentException(\"Unknown token\");\n        }\n        return result;\n    }\n\n    /**\n     * Reads nested entity.\n     * @return The parsed nested entity.\n     */\n    public Map<String, Entity> nested() {\n        final Map<String, Entity> result = new HashMap<>();", "        while (true) {\n            final Token token = this.tokenizer.getToken();\n            if (token instanceof BracketToken) {\n                final BracketToken bracket = (BracketToken) token;\n                if (bracket.getState() == BracketToken.BracketType.CLOSE) {\n                    break;\n                }\n            }\n            final String name = ((StringToken) token).getValue();\n            this.tokenizer.next();\n            this.tokenizer.next();\n            final Entity entity = this.one();\n            result.put(name, entity);\n            this.tokenizer.next();\n        }\n        return result;\n    }\n\n    /**\n     * Creates an object.\n     * @param value The value to parse.\n     * @return The parsed entity.\n     */\n    private Entity createObject(final String value) {\n        final Entity result;", "        if (value.contains(\")\")) {\n            result = new FlatObject(\n                value.substring(0, value.indexOf('(')),\n                value.substring(value.indexOf('(') + 1, value.indexOf(')'))\n            );\n        } else if (value.contains(\"(\")) {\n            this.tokenizer.next();\n            final Map<String, Entity> application = this.nested();\n            result = new NestedObject(\n                value.substring(0, value.indexOf('(')), application\n            );\n        } else {\n            result = new FlatObject(value, \"\");\n        }\n        return result;\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/parsing/LineParser.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.parsing;\n\nimport org.objectionary.ObjectsBox;", "\nimport org.objectionary.ObjectsBox;\n\n/**\n * One line parser.\n * @since 0.1.0\n */\npublic final class LineParser {\n\n    /**\n     * The box to put the result into.\n     */\n    @SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n    private final ObjectsBox results;\n\n    /**\n     * Constructor.\n     * @param results The box to put the result into.\n     */\n    public LineParser(final ObjectsBox results) {\n        this.results = results;\n    }\n\n    /**\n     * Parses one line and puts the result into the box.\n     * @param line The line to parse.\n     * @todo #38:30min Implement this method.\n     *  This method should parse one line and put the result into the box.\n     */", "    public void parseLine(final String line) {\n        throw new UnsupportedOperationException(\"Not implemented yet\");\n    }\n\n}\n"]}
{"filename": "src/main/java/org/objectionary/parsing/Parser.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.parsing;\n\nimport org.objectionary.ObjectsBox;", "\nimport org.objectionary.ObjectsBox;\n\n/**\n * This class represents the parser.\n * @since 0.1.0\n */\npublic final class Parser {\n\n    /**\n     * The input.\n     */\n    @SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n    private final String input;\n\n    /**\n     * Constructor.\n     * @param input The input to parse.\n     */\n    public Parser(final String input) {\n        this.input = input;\n    }\n\n    /**\n     * Parses the input.\n     * @return The parsed map.\n     * @todo #23:30min Implement this method.\n     *  This method should parse the input line by line\n     *  and return a objects box with the parsed objects.\n     * @checkstyle NonStaticMethodCheck (10 lines)\n     */", "    public ObjectsBox parse() {\n        return null;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/Locator.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\nimport java.util.Arrays;", "\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * This class represents the locator entity.\n * @since 0.1.0\n */\npublic final class Locator extends Entity {\n\n    /**\n     * The path of the locator.\n     */\n    private final String path;\n\n    /**\n     * Constructor.\n     * @param path The path of the locator.\n     */\n    public Locator(final String path) {\n        this.path = path;\n    }\n\n    /**\n     * Returns the path of the locator.\n     * @return The path of the locator.\n     */\n    public List<String> getPath() {\n        return Arrays.asList(this.path.split(\"\\\\.\"));\n    }\n\n    @Override", "public final class Locator extends Entity {\n\n    /**\n     * The path of the locator.\n     */\n    private final String path;\n\n    /**\n     * Constructor.\n     * @param path The path of the locator.\n     */\n    public Locator(final String path) {\n        this.path = path;\n    }\n\n    /**\n     * Returns the path of the locator.\n     * @return The path of the locator.\n     */\n    public List<String> getPath() {\n        return Arrays.asList(this.path.split(\"\\\\.\"));\n    }\n\n    @Override", "    public Entity copy() {\n        return new Locator(String.join(\".\", this.getPath()));\n    }\n\n    @Override\n    public Entity reframe() {\n        return new Locator(\"\ud835\udf0b.\".concat(String.join(\".\", this.path).replace(\"\u03be.\", \"\")));\n    }\n\n    @Override\n    public String toString() {\n        return this.path;\n    }\n}\n", "    public String toString() {\n        return this.path;\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/package-info.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * All necessary entities for working with Flatty.", "/**\n * All necessary entities for working with Flatty.\n */\npackage org.objectionary.entities;\n"]}
{"filename": "src/main/java/org/objectionary/entities/Empty.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\n/**", "\n/**\n * This class represents the empty entity.\n * @since 0.1.0\n */\npublic final class Empty extends Entity {\n\n    @Override\n    public Entity copy() {\n        return new Empty();\n    }\n\n    @Override", "    public Entity copy() {\n        return new Empty();\n    }\n\n    @Override\n    public Entity reframe() {\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        return \"\u00f8\";\n    }\n}\n", "    public String toString() {\n        return \"\u00f8\";\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/Entity.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\n/**", "\n/**\n * This class represents the entity.\n * @since 0.1.0\n */\n@SuppressWarnings(\"PMD.AbstractClassWithoutAbstractMethod\")\npublic abstract class Entity {\n\n    /**\n     * Protected constructor.\n     * This constructor is used to create an entity.\n     */\n    protected Entity() {\n        // Empty constructor\n    }\n\n    /**\n     * Returns the deep copy of the entity.\n     * @return The deep copy of the entity.\n     */", "    public abstract Entity copy();\n\n    /**\n     * Add one pi to the entity.\n     * @return The entity with one pi added.\n     */\n    public abstract Entity reframe();\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/Data.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\n/**", "\n/**\n * This class represents the data entity.\n * @since 0.1.0\n */\npublic final class Data extends Entity {\n\n    /**\n     * The data value.\n     */\n    private final int value;\n\n    /**\n     * Constructor.\n     * @param value The data value.\n     */\n    public Data(final int value) {\n        this.value = value;\n    }\n\n    /**\n     * Get the data value.\n     * @return The data value.\n     */", "    public int getData() {\n        return this.value;\n    }\n\n    @Override\n    public Entity copy() {\n        return new Data(this.getData());\n    }\n\n    @Override\n    public Entity reframe() {\n        return this;\n    }\n\n    @Override", "    public Entity reframe() {\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"0x%04X\", this.value);\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/Lambda.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\n/**", "\n/**\n * This class represents the lambda entity.\n * @since 0.1.0\n */\npublic final class Lambda extends Entity {\n\n    /**\n     * The function of the lambda.\n     */\n    private final String function;\n\n    /**\n     * Constructor.\n     * @param function The function of the lambda.\n     */\n    public Lambda(final String function) {\n        this.function = function;\n    }\n\n    /**\n     * Returns the function of the lambda.\n     * @return The function of the lambda.\n     */", "    public String getFunction() {\n        return this.function;\n    }\n\n    @Override\n    public String toString() {\n        return this.getFunction();\n    }\n\n    @Override\n    public Entity copy() {\n        return new Lambda(this.getFunction());\n    }\n\n    @Override", "    public Entity copy() {\n        return new Lambda(this.getFunction());\n    }\n\n    @Override\n    public Entity reframe() {\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/FlatObject.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\n/**", "\n/**\n * This class represents the flat object entity.\n * @since 0.1.0\n */\npublic final class FlatObject extends Entity {\n\n    /**\n     * The name of the object.\n     */\n    private final String name;\n\n    /**\n     * The locator of the object.\n     */\n    private final String locator;\n\n    /**\n     * Constructor.\n     *\n     * @param name The name of the object.\n     */\n    public FlatObject(final String name) {\n        this(name, \"\");\n    }\n\n    /**\n     * Constructor.\n     * @param name The name of the object.\n     * @param locator The locator of the object.\n     */\n    public FlatObject(final String name, final String locator) {\n        this.name = name;\n        this.locator = locator;\n    }\n\n    /**\n     * Returns the name of the object.\n     * @return The name of the object.\n     */", "    public String getName() {\n        return this.name;\n    }\n\n    /**\n     * Returns the locator of the object.\n     * @return The locator of the object.\n     */\n    public String getLocator() {\n        return this.locator;\n    }\n\n    @Override", "    public String getLocator() {\n        return this.locator;\n    }\n\n    @Override\n    public Entity copy() {\n        return new FlatObject(this.name, this.locator);\n    }\n\n    @Override\n    public Entity reframe() {\n        final Entity entity;", "    public Entity reframe() {\n        final Entity entity;\n        if (this.locator.isEmpty()) {\n            entity = this.copy();\n        } else {\n            entity = new FlatObject(this.getName(), \"\");\n        }\n        return entity;\n    }\n\n    @Override", "    public String toString() {\n        final String printed;\n        if (this.locator.isEmpty()) {\n            printed = this.name;\n        } else {\n            printed = String.format(\"%s(%s)\", this.name, this.locator);\n        }\n        return printed;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/objectionary/entities/NestedObject.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.entities;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * This class represents the object with application entity.\n * @since 0.1.0\n */\npublic final class NestedObject extends Entity {\n\n    /**\n     * The name of the object with application.\n     */\n    private final String name;\n\n    /**\n     * The application of the object with application.\n     */\n    private final Map<String, Entity> application;\n\n    /**\n     * Constructor.\n     * @param name The name of the object with application.\n     * @param application The application of the object with application.\n     */\n    public NestedObject(final String name, final Map<String, Entity> application) {\n        this.name = name;\n        this.application = application;\n    }\n\n    /**\n     * Returns the name of the object with application.\n     * @return The name of the object with application.\n     */", "public final class NestedObject extends Entity {\n\n    /**\n     * The name of the object with application.\n     */\n    private final String name;\n\n    /**\n     * The application of the object with application.\n     */\n    private final Map<String, Entity> application;\n\n    /**\n     * Constructor.\n     * @param name The name of the object with application.\n     * @param application The application of the object with application.\n     */\n    public NestedObject(final String name, final Map<String, Entity> application) {\n        this.name = name;\n        this.application = application;\n    }\n\n    /**\n     * Returns the name of the object with application.\n     * @return The name of the object with application.\n     */", "    public String getName() {\n        return this.name;\n    }\n\n    /**\n     * Returns the application of the object with application.\n     * @return The application of the object with application.\n     */\n    public Map<String, Entity> getApplication() {\n        return this.application;\n    }\n\n    @Override", "    public String toString() {\n        final StringBuilder buffer = new StringBuilder();\n        final int size = this.application.size();\n        int count = 0;\n        for (final Map.Entry<String, Entity> entry : this.getApplication().entrySet()) {\n            buffer.append(entry.getKey()).append(\" \u21a6 \").append(entry.getValue());\n            count += 1;\n            if (count < size) {\n                buffer.append(\", \");\n            }\n        }\n        return String.format(\"%s( %s )\", this.getName(), buffer);\n    }\n\n    @Override", "    public Entity copy() {\n        final Map<String, Entity> copy = new HashMap<>(this.application.size());\n        for (final Map.Entry<String, Entity> entry : this.application.entrySet()) {\n            copy.put(entry.getKey(), entry.getValue().copy());\n        }\n        return new NestedObject(this.getName(), copy);\n    }\n\n    @Override\n    public Entity reframe() {\n        final Map<String, Entity> reframed = new HashMap<>(this.application.size());", "    public Entity reframe() {\n        final Map<String, Entity> reframed = new HashMap<>(this.application.size());\n        for (final Map.Entry<String, Entity> entry : this.application.entrySet()) {\n            reframed.put(entry.getKey(), entry.getValue().reframe());\n        }\n        return new NestedObject(this.getName(), reframed);\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/tokens/package-info.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * All necessary tokens for tokenization.", "/**\n * All necessary tokens for tokenization.\n */\npackage org.objectionary.tokens;\n"]}
{"filename": "src/main/java/org/objectionary/tokens/BracketToken.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.tokens;\n\n/**", "\n/**\n * This class represents the both application and object brackets.\n * @since 0.1.0\n */\npublic final class BracketToken extends Token {\n\n    /**\n     * The state of the bracket.\n     */\n    private final BracketType state;\n\n    /**\n     * Constructor.\n     * @param state The state of the bracket.\n     */\n    public BracketToken(final BracketType state) {\n        this.state = state;\n    }\n\n    /**\n     * Returns the state of the bracket.\n     * @return The state of the bracket.\n     */", "    public BracketType getState() {\n        return this.state;\n    }\n\n    /**\n     * Enum for the bracket type.\n     */\n    public enum BracketType {\n        /**\n         * The open bracket.\n         */\n        OPEN,\n        /**\n         * The close bracket.\n         */\n        CLOSE\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/tokens/StringToken.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.tokens;\n\n/**", "\n/**\n * This class represents the string token.\n * @since 0.1.0\n */\npublic final class StringToken extends Token {\n\n    /**\n     * The value of the string.\n     */\n    private final String value;\n\n    /**\n     * Constructor.\n     * @param value The value of the string.\n     */\n    public StringToken(final String value) {\n        this.value = value;\n    }\n\n    /**\n     * Gets the value of the string.\n     * @return The value of the string.\n     */", "    public String getValue() {\n        return this.value;\n    }\n}\n"]}
{"filename": "src/main/java/org/objectionary/tokens/Token.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.tokens;\n\n/**", "\n/**\n * This class represents the token.\n * @since 0.1.0\n */\npublic class Token {\n}\n"]}
{"filename": "src/main/java/org/objectionary/tokens/ArrowToken.java", "chunked_list": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is", " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE", " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.objectionary.tokens;\n\n/**", "\n/**\n * This class represents the arrow token.\n * @since 0.1.0\n */\npublic final class ArrowToken extends Token {\n}\n"]}
