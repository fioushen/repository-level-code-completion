{"filename": "src/main/java/com/obotach/enhancer/EnhancementInfo.java", "chunked_list": ["package com.obotach.enhancer;\n\nimport org.bukkit.ChatColor;\n\npublic class EnhancementInfo {\n    private final String enhanceName;\n    private final ChatColor enhanceColor;\n\n    public EnhancementInfo(String enhanceName, ChatColor enhanceColor) {\n        this.enhanceName = enhanceName;\n        this.enhanceColor = enhanceColor;\n    }\n", "    public String getEnhanceName() {\n        return this.enhanceName;\n    }\n\n    public ChatColor getEnhanceColor() {\n        return this.enhanceColor;\n    }\n}"]}
{"filename": "src/main/java/com/obotach/enhancer/Enhancing.java", "chunked_list": ["package com.obotach.enhancer;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.command.Command;", "import org.bukkit.Bukkit;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.bukkit.event.Listener;\nimport org.bukkit.plugin.java.JavaPlugin;\n\nimport com.obotach.enhancer.Commands.EnhanceCommandExecutor;", "\nimport com.obotach.enhancer.Commands.EnhanceCommandExecutor;\nimport com.obotach.enhancer.Commands.EnhanceItemCommand;\nimport com.obotach.enhancer.Commands.GiveItemsCommand;\nimport com.obotach.enhancer.Commands.RepairCommand;\nimport com.obotach.enhancer.Listeners.BlockBreakListener;\nimport com.obotach.enhancer.Listeners.DisableEnchantingListener;\nimport com.obotach.enhancer.Listeners.EnhanceGUIListener;\nimport com.obotach.enhancer.Listeners.MobDeathListener;\nimport com.obotach.enhancer.Shops.ProtectionRuneShop;", "import com.obotach.enhancer.Listeners.MobDeathListener;\nimport com.obotach.enhancer.Shops.ProtectionRuneShop;\n\nimport net.md_5.bungee.api.ChatColor;\n\npublic class Enhancing extends JavaPlugin implements Listener {\n\n    private static Enhancing instance;\n\n    @Override\n    public void onEnable() {\n        instance = this;\n        // Create config file if it doesn't exist", "    public void onEnable() {\n        instance = this;\n        // Create config file if it doesn't exist\n        if (!getDataFolder().exists()) {\n            getDataFolder().mkdirs();\n        }\n        File configFile = new File(getDataFolder(), \"config.yml\");\n        if (!configFile.exists()) {\n            try {\n                configFile.createNewFile();\n                getLogger().info(\"Created config file.\");\n\n                // Write example data to config file\n                YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);\n                // add black-stone-drop-chance to config\n                config.set(\"plugin-prefix\", ChatColor.GOLD + \"[Enhancing] \" + ChatColor.RESET);\n                config.set(\"black-stone-drop-chance\", 1);\n                config.set(\"concentrated-black-stone-drop-chance\", 0.5);\n                config.set(\"memory-fragment-drop-chance\", 0.5);\n                config.set(\"protection-stone-drop-chance\", 0.1);\n                config.set(\"protection-stone-exp-cost\", 100);", "            try {\n                configFile.createNewFile();\n                getLogger().info(\"Created config file.\");\n\n                // Write example data to config file\n                YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);\n                // add black-stone-drop-chance to config\n                config.set(\"plugin-prefix\", ChatColor.GOLD + \"[Enhancing] \" + ChatColor.RESET);\n                config.set(\"black-stone-drop-chance\", 1);\n                config.set(\"concentrated-black-stone-drop-chance\", 0.5);\n                config.set(\"memory-fragment-drop-chance\", 0.5);\n                config.set(\"protection-stone-drop-chance\", 0.1);\n                config.set(\"protection-stone-exp-cost\", 100);", "                for (int i = 0; i <= 19; i++) {\n                    String path = i + \".weapon\";\n                    List<String> enchants = Arrays.asList(\"sharpness:1\", \"unbreaking:1\");\n                    config.set(path, enchants);\n\n                    path = i + \".armor\";\n                    enchants = Arrays.asList(\"protection:1\", \"unbreaking:1\");\n                    config.set(path, enchants);\n                    config.set(i + \".success_chance\", 100);\n                }\n                config.save(configFile);\n                getLogger().info(\"Wrote example data to config file.\");\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n\n        Bukkit.getPluginManager().registerEvents(this, this);\n        double blackStoneDropChance = getConfig().getDouble(\"black-stone-drop-chance\");\n        double concentratedBlackStoneDropChance = getConfig().getDouble(\"concentrated-black-stone-drop-chance\");\n        double memoryFragmentDropChance = getConfig().getDouble(\"memory-fragment-drop-chance\");\n        double protectionStoneDropChance = getConfig().getDouble(\"protection-stone-drop-chance\");\n        int protectionStoneEXPCost = getConfig().getInt(\"protection-stone-exp-cost\");\n        getServer().getPluginManager().registerEvents(new MobDeathListener(blackStoneDropChance, concentratedBlackStoneDropChance, protectionStoneDropChance), this);\n        EnhanceGUI enhanceGUI = new EnhanceGUI(this);\n        getServer().getPluginManager().registerEvents(new EnhanceGUIListener(this, enhanceGUI), this);\n        getServer().getPluginManager().registerEvents(new DisableEnchantingListener(), this);\n        getServer().getPluginManager().registerEvents(new ProtectionRuneShop(protectionStoneEXPCost), this);\n        getServer().getPluginManager().registerEvents(new BlockBreakListener(memoryFragmentDropChance), this);\n\n        getCommand(\"enhance\").setExecutor(new EnhanceCommandExecutor());\n        getCommand(\"giveblackstone\").setExecutor(new GiveItemsCommand());\n        getCommand(\"enhanceitem\").setExecutor(new EnhanceItemCommand(this));\n        getCommand(\"reloadconfig\").setExecutor(new ReloadCommandExecutor(this));\n        getCommand(\"protectionshop\").setExecutor(new ProtectionRuneShop(protectionStoneEXPCost));\n        getCommand(\"erepair\").setExecutor(new RepairCommand(this));\n\n        //anounce plugin is enabled and say what version it is and what drop chance is\n        String version = getDescription().getVersion();\n        getLogger().info(\"Enhancing plugin enabled (version \" + version + \")\");\n        getLogger().info(\"Black stone drop chance: \" + blackStoneDropChance);\n        getLogger().info(\"Concentrated black stone drop chance: \" + concentratedBlackStoneDropChance);\n\n    }\n", "    public static Enhancing getInstance() {\n        return instance;\n    }\n\n    public FileConfiguration getConfig() {\n        return super.getConfig();\n    }\n\n    public class ReloadCommandExecutor implements CommandExecutor {\n\n        private final Enhancing plugin;\n    \n        public ReloadCommandExecutor(Enhancing plugin) {\n            this.plugin = plugin;\n        }\n    \n        @Override", "    public class ReloadCommandExecutor implements CommandExecutor {\n\n        private final Enhancing plugin;\n    \n        public ReloadCommandExecutor(Enhancing plugin) {\n            this.plugin = plugin;\n        }\n    \n        @Override\n        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n            if (command.getName().equalsIgnoreCase(\"reloadconfig\")) {\n                plugin.reloadConfig();\n                sender.sendMessage(ChatColor.GREEN + \"Config reloaded.\");\n                return true;\n            }\n            return false;\n        }\n    }\n}", "        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n            if (command.getName().equalsIgnoreCase(\"reloadconfig\")) {\n                plugin.reloadConfig();\n                sender.sendMessage(ChatColor.GREEN + \"Config reloaded.\");\n                return true;\n            }\n            return false;\n        }\n    }\n}"]}
{"filename": "src/main/java/com/obotach/enhancer/EnhanceGUI.java", "chunked_list": ["package com.obotach.enhancer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.NamespacedKey;\nimport org.bukkit.Sound;", "import org.bukkit.NamespacedKey;\nimport org.bukkit.Sound;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.Inventory;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataType;\nimport org.jetbrains.annotations.Nullable;\n\nimport net.kyori.adventure.text.Component;", "\nimport net.kyori.adventure.text.Component;\n\npublic class EnhanceGUI {\n\n    public static final String INVENTORY_TITLE = ChatColor.BLUE + \"Enhance Item\";\n    private final Enhancing plugin;\n\n    public EnhanceGUI(Enhancing plugin) {\n        this.plugin = plugin;\n    }\n", "    public static Inventory createEnhanceInventory() {\n        Component titleComponent = Component.text(INVENTORY_TITLE);\n        Inventory enhanceInventory = Bukkit.createInventory(null, 45, titleComponent); // Increase the inventory size to 36\n    \n        ItemStack placeholder = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);\n        ItemMeta placeholderMeta = placeholder.getItemMeta();\n        if (placeholderMeta != null) {\n            placeholderMeta.setDisplayName(ChatColor.GRAY + \" \");\n            placeholder.setItemMeta(placeholderMeta);\n        }\n    ", "        for (int i = 0; i < 45; i++) {\n            if (i == 33) {\n                ItemStack protectionInfo = new ItemStack(Material.PURPLE_STAINED_GLASS_PANE);\n                ItemMeta meta = protectionInfo.getItemMeta();\n                if (meta != null) {\n                    List<Component> lore = new ArrayList<>();\n                    lore.add(Component.text(ChatColor.GRAY + \"If you put a protection rune in the slot to the right\"));\n                    lore.add(Component.text(ChatColor.GRAY + \"items wont be downgraded when failing PRI-PEN.\"));\n                    meta.lore(lore);\n                    protectionInfo.setItemMeta(meta);\n                }\n                enhanceInventory.setItem(i, protectionInfo);\n                continue;\n            }", "            if (i == 26) {\n                // yellow stained glass pane\n                ItemStack yellowPane = new ItemStack(Material.YELLOW_STAINED_GLASS_PANE);\n                ItemMeta yellowPaneMeta = yellowPane.getItemMeta();\n                yellowPaneMeta.setDisplayName(ChatColor.YELLOW + \"Preview\");\n                if (yellowPaneMeta != null) {\n                    List<Component> lore = new ArrayList<>();\n                    lore.add(Component.text(ChatColor.GRAY + \"When an item is entered this will show what the\"));\n                    lore.add(Component.text(ChatColor.GRAY + \"next level of that item will look like.\"));\n                    yellowPaneMeta.lore(lore);\n                    yellowPane.setItemMeta(yellowPaneMeta);\n                }\n                enhanceInventory.setItem(i, yellowPane);\n                continue;\n            }\n            ", "            if (i != 19 && i != 22 && i != 25 && i != 16 && i != 34) { // Add protection rune slot at index 34\n                enhanceInventory.setItem(i, placeholder);\n            }\n        }\n        // set block at index 16 to be the show percent success block\n        enhanceInventory.setItem(16, createSuccessChancePanel(0));\n    \n        ItemStack enhanceButton = new ItemStack(Material.GREEN_STAINED_GLASS_PANE);\n        ItemMeta enhanceButtonMeta = enhanceButton.getItemMeta();\n        if (enhanceButtonMeta != null) {\n            enhanceButtonMeta.setDisplayName(ChatColor.GREEN + \"Enhance\");\n            enhanceButton.setItemMeta(enhanceButtonMeta);\n        }\n    \n        enhanceInventory.setItem(25, createEnhanceButton());\n    \n        return enhanceInventory;\n    }\n    \n    \n    \n", "        if (enhanceButtonMeta != null) {\n            enhanceButtonMeta.setDisplayName(ChatColor.GREEN + \"Enhance\");\n            enhanceButton.setItemMeta(enhanceButtonMeta);\n        }\n    \n        enhanceInventory.setItem(25, createEnhanceButton());\n    \n        return enhanceInventory;\n    }\n    \n    \n    \n", "    public static void openEnhanceGUI(Player player) {\n        player.openInventory(createEnhanceInventory());\n    }\n    \n    public static ItemStack createEnhanceButton() {\n        ItemStack enhanceButton = new ItemStack(Material.RED_STAINED_GLASS_PANE);\n        ItemMeta meta = enhanceButton.getItemMeta();\n    \n        if (meta != null) {\n            meta.setDisplayName(ChatColor.GOLD + \"Enhance\");\n            enhanceButton.setItemMeta(meta);\n            List<Component> lore = new ArrayList<>();\n            lore.add(Component.text(ChatColor.GRAY + \"Click to enhance your item\"));\n            lore.add(Component.text(ChatColor.GRAY + \"Black Stones will be conusmed\"));\n            lore.add(Component.text(ChatColor.RED + ChatColor.BOLD.toString() + \"WARNING: \" + ChatColor.RESET + ChatColor.RED + \"PRI-PEN downgrade item level on enhance failures!\"));\n            meta.lore(lore);\n            enhanceButton.setItemMeta(meta);\n        }\n    \n        return enhanceButton;\n    }\n", "        if (meta != null) {\n            meta.setDisplayName(ChatColor.GOLD + \"Enhance\");\n            enhanceButton.setItemMeta(meta);\n            List<Component> lore = new ArrayList<>();\n            lore.add(Component.text(ChatColor.GRAY + \"Click to enhance your item\"));\n            lore.add(Component.text(ChatColor.GRAY + \"Black Stones will be conusmed\"));\n            lore.add(Component.text(ChatColor.RED + ChatColor.BOLD.toString() + \"WARNING: \" + ChatColor.RESET + ChatColor.RED + \"PRI-PEN downgrade item level on enhance failures!\"));\n            meta.lore(lore);\n            enhanceButton.setItemMeta(meta);\n        }\n    \n        return enhanceButton;\n    }\n", "    public static ItemStack createSuccessChancePanel(double successChance) {\n        ItemStack enhanceButton = new ItemStack(Material.GREEN_STAINED_GLASS_PANE);\n        ItemMeta meta = enhanceButton.getItemMeta();\n    \n        if (meta != null) {\n            meta.setDisplayName(ChatColor.GREEN + \"Success Chance\");\n            List<Component> lore = new ArrayList<>();\n            lore.add(Component.text(ChatColor.AQUA + \"\" + ChatColor.AQUA + String.format(\"%.2f\", successChance) + \"%\"));\n            meta.lore(lore);\n            enhanceButton.setItemMeta(meta);\n        }\n    \n        return enhanceButton;\n    }\n", "    public void showSuccessBlock(Player player, Inventory inventory) {\n        ItemStack successBlock = new ItemStack(Material.LIME_WOOL);\n        ItemMeta meta = successBlock.getItemMeta();\n        if (meta != null) {\n            meta.displayName(Component.text(ChatColor.GREEN + \"Enhancement Success!\"));\n            successBlock.setItemMeta(meta);\n        }\n        inventory.setItem(25, successBlock);\n        // update the success chance panel\n        updateSuccessChancePanel(inventory);\n        player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);\n        \n    \n        Bukkit.getScheduler().runTaskLater(plugin, () -> {\n            updateSuccessChancePanel(inventory);\n        }, 3 * 20L);\n    }\n    ", "    public void showFailureBlock(Player player, Inventory inventory) {\n        ItemStack failureBlock = new ItemStack(Material.RED_WOOL);\n        ItemMeta meta = failureBlock.getItemMeta();\n        if (meta != null) {\n            meta.displayName(Component.text(ChatColor.RED + \"Enhancement Failed\"));\n            failureBlock.setItemMeta(meta);\n        }\n        inventory.setItem(25, failureBlock);\n    \n        player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1.0f, 1.0f);\n    \n        Bukkit.getScheduler().runTaskLater(plugin, () -> {\n            updateSuccessChancePanel(inventory);\n        }, 3 * 20L);\n    }\n\n    // Add this new method inside the EnhanceGUIListener class", "    public void updateSuccessChancePanel(Inventory inventory) {\n        ItemStack itemToEnhance = inventory.getItem(19);\n        if (itemToEnhance != null && itemToEnhance.getType() != Material.AIR) {\n            ItemMeta itemMeta = itemToEnhance.getItemMeta();\n            NamespacedKey enhancementLevelKey = new NamespacedKey(plugin, \"enhancement_level\");\n            int currentLevel = itemMeta.getPersistentDataContainer().getOrDefault(enhancementLevelKey, PersistentDataType.INTEGER, 0);\n            int nextLevel = currentLevel + 1;\n            double successChance = Utils.getSuccessChance(plugin, nextLevel);\n            inventory.setItem(16, EnhanceGUI.createSuccessChancePanel(successChance));\n\n            // if item level is 20 or higher, set the enhance button to be the max enhancement achieved button", "            if (currentLevel >= 20) {\n                inventory.setItem(25, EnhanceGUI.createMaxEnhancementAchievedButton());\n            }\n        } else {\n            inventory.setItem(16, EnhanceGUI.createSuccessChancePanel(0));\n        }\n    }\n\n    public static @Nullable ItemStack createMaxEnhancementAchievedButton() {\n        ItemStack maxEnhancementAchievedButton = new ItemStack(Material.RED_STAINED_GLASS_PANE);\n        ItemMeta meta = maxEnhancementAchievedButton.getItemMeta();\n    ", "        if (meta != null) {\n            meta.setDisplayName(ChatColor.RED + \"Max Enhancement Achieved\");\n            maxEnhancementAchievedButton.setItemMeta(meta);\n        }\n    \n        return maxEnhancementAchievedButton;\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/CustomItems.java", "chunked_list": ["package com.obotach.enhancer;\n\nimport net.kyori.adventure.text.Component;\nimport org.bukkit.Material;\nimport org.bukkit.inventory.ItemFlag;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataContainer;\nimport org.bukkit.persistence.PersistentDataType;\nimport org.bukkit.NamespacedKey;", "import org.bukkit.persistence.PersistentDataType;\nimport org.bukkit.NamespacedKey;\n\npublic class CustomItems {\n    public static ItemStack createBlackStoneWeapon() {\n        ItemStack blackStoneWeapon = new ItemStack(Material.COAL, 1);\n        ItemMeta meta = blackStoneWeapon.getItemMeta();\n\n        if (meta != null) {\n            meta.displayName(Component.text(\"Black Stone (Weapon)\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(CustomItemKeys.BLACK_STONE_WEAPON_KEY, PersistentDataType.INTEGER, 1);\n            blackStoneWeapon.setItemMeta(meta);\n        }\n\n        return blackStoneWeapon;\n    }\n", "        if (meta != null) {\n            meta.displayName(Component.text(\"Black Stone (Weapon)\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(CustomItemKeys.BLACK_STONE_WEAPON_KEY, PersistentDataType.INTEGER, 1);\n            blackStoneWeapon.setItemMeta(meta);\n        }\n\n        return blackStoneWeapon;\n    }\n", "    public static ItemStack createBlackStoneArmor() {\n        ItemStack blackStoneArmor = new ItemStack(Material.CHARCOAL, 1);\n        ItemMeta meta = blackStoneArmor.getItemMeta();\n\n        if (meta != null) {\n            meta.displayName(Component.text(\"Black Stone (Armor)\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(CustomItemKeys.BLACK_STONE_ARMOR_KEY, PersistentDataType.INTEGER, 1);\n            blackStoneArmor.setItemMeta(meta);\n        }\n\n        return blackStoneArmor;\n    }\n", "    public static ItemStack createConcentratedMagicalBlackStoneWeapon() {\n        ItemStack concentratedMagicalBlackStoneWeapon = new ItemStack(Material.RED_DYE, 1);\n        ItemMeta meta = concentratedMagicalBlackStoneWeapon.getItemMeta();\n\n        if (meta != null) {\n            meta.displayName(Component.text(\"\u00a7cConcentrated Magical Black Stone (Weapon)\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(CustomItemKeys.CONCENTRATED_MAGICAL_BLACK_STONE_WEAPON_KEY, PersistentDataType.INTEGER, 1);\n            concentratedMagicalBlackStoneWeapon.setItemMeta(meta);\n        }\n\n        return concentratedMagicalBlackStoneWeapon;\n    }\n", "    public static ItemStack createConcentratedMagicalBlackStoneArmor() {\n        ItemStack concentratedMagicalBlackStoneArmor = new ItemStack(Material.CYAN_DYE, 1);\n        ItemMeta meta = concentratedMagicalBlackStoneArmor.getItemMeta();\n\n        if (meta != null) {\n            meta.displayName(Component.text(\"\u00a7cConcentrated Magical Black Stone (Armor)\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(CustomItemKeys.CONCENTRATED_MAGICAL_BLACK_STONE_ARMOR_KEY, PersistentDataType.INTEGER, 1);\n            concentratedMagicalBlackStoneArmor.setItemMeta(meta);\n        }\n\n        return concentratedMagicalBlackStoneArmor;\n    }\n", "    public static ItemStack createProtectionRune() {\n        ItemStack protectionRune = new ItemStack(Material.NETHER_STAR, 1);\n        ItemMeta meta = protectionRune.getItemMeta();\n    \n        if (meta != null) {\n            meta.displayName(Component.text(\"\u00a7eProtection Rune\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.PROTECTION_ENVIRONMENTAL, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"protection_rune\"), PersistentDataType.INTEGER, 1);\n            protectionRune.setItemMeta(meta);\n        }\n    \n        return protectionRune;\n    }\n", "    public static ItemStack createMemoryFragment() {\n        ItemStack memoryFragment = new ItemStack(Material.GLOWSTONE_DUST, 1);\n        ItemMeta meta = memoryFragment.getItemMeta();\n    \n        if (meta != null) {\n            meta.displayName(Component.text(\"\u00a7eMemory Fragment\"));\n            meta.addEnchant(org.bukkit.enchantments.Enchantment.LURE, 1, true);\n            meta.addItemFlags(ItemFlag.HIDE_ENCHANTS);\n            PersistentDataContainer data = meta.getPersistentDataContainer();\n            data.set(new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"memory_fragment\"), PersistentDataType.INTEGER, 1);\n            memoryFragment.setItemMeta(meta);\n        }\n    \n        return memoryFragment;\n    }\n    \n    \n", "    public class CustomItemKeys {\n        public static final NamespacedKey BLACK_STONE_WEAPON_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"black_stone_weapon\");\n        public static final NamespacedKey BLACK_STONE_ARMOR_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"black_stone_armor\");\n        \n        public static final NamespacedKey CONCENTRATED_MAGICAL_BLACK_STONE_WEAPON_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"concentrated_magical_black_stone_weapon\");\n        public static final NamespacedKey CONCENTRATED_MAGICAL_BLACK_STONE_ARMOR_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"concentrated_magical_black_stone_armor\");\n\n        public static final NamespacedKey PROTECTION_RUNE_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"protection_rune\");\n\n        public static final NamespacedKey MEMORY_FRAGMENT_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"memory_fragment\");\n    }\n}\n", "        public static final NamespacedKey MEMORY_FRAGMENT_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"memory_fragment\");\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Utils.java", "chunked_list": ["package com.obotach.enhancer;\n\nimport java.util.List;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.NamespacedKey;\nimport org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.enchantments.Enchantment;", "import org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.enchantments.Enchantment;\nimport org.bukkit.entity.Damageable;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\n\nimport net.kyori.adventure.text.Component;\n\npublic class Utils {\n", "\npublic class Utils {\n\n    public static void betterBroadcast(String message) {\n        for (Player player : Bukkit.getServer().getOnlinePlayers()) {\n            player.sendMessage(message);\n        }\n    }\n    \n    public static boolean isWeapon(ItemStack item) {\n        Material type = item.getType();\n        return type.name().endsWith(\"_SWORD\") || type.name().endsWith(\"_AXE\") || type.name().endsWith(\"_BOW\") || type.name().endsWith(\"_CROSSBOW\");\n    }\n", "    public static boolean isWeapon(ItemStack item) {\n        Material type = item.getType();\n        return type.name().endsWith(\"_SWORD\") || type.name().endsWith(\"_AXE\") || type.name().endsWith(\"_BOW\") || type.name().endsWith(\"_CROSSBOW\");\n    }\n\n    public static boolean isArmor(ItemStack item) {\n        Material type = item.getType();\n        return type.name().endsWith(\"_HELMET\") || type.name().endsWith(\"_CHESTPLATE\") || type.name().endsWith(\"_LEGGINGS\") || type.name().endsWith(\"_BOOTS\");\n    }\n\n    public static double getSuccessChance(Enhancing plugin, int currentLevel) {\n        ConfigurationSection config = plugin.getConfig().getConfigurationSection(String.valueOf(currentLevel));", "    public static double getSuccessChance(Enhancing plugin, int currentLevel) {\n        ConfigurationSection config = plugin.getConfig().getConfigurationSection(String.valueOf(currentLevel));\n        if (config == null) {\n            return 0;\n        }\n    \n        double successChance = config.getDouble(\"success_chance\");\n        if (successChance <= 0) {\n            return 0;\n        }\n    \n        return successChance;\n    }\n", "    public static Component getEnhancementName(int enhancementLevel) {\n        if (enhancementLevel > 15) {\n            return Component.text(Utils.getEnhancementInfo(enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());\n        } else {\n            return Component.text(Utils.getEnhancementInfo(enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());\n        }\n    }\n\n    public static void applyEnchantments(Enhancing plugin, ItemStack item, int enhancementLevel) {\n        ConfigurationSection config = plugin.getConfig().getConfigurationSection(String.valueOf(enhancementLevel));\n        if (config == null) {\n            return;\n        }\n    ", "    public static void applyEnchantments(Enhancing plugin, ItemStack item, int enhancementLevel) {\n        ConfigurationSection config = plugin.getConfig().getConfigurationSection(String.valueOf(enhancementLevel));\n        if (config == null) {\n            return;\n        }\n    \n        if (Utils.isWeapon(item)) {\n            List<String> weaponEnchants = config.getStringList(\"weapon\");\n            applyEnchantmentList(item, weaponEnchants);\n        } else if (Utils.isArmor(item)) {\n            List<String> armorEnchants = config.getStringList(\"armor\");\n            applyEnchantmentList(item, armorEnchants);\n        }\n    }\n    \n    private static void applyEnchantmentList(ItemStack item, List<String> enchantmentList) {", "        } else if (Utils.isArmor(item)) {\n            List<String> armorEnchants = config.getStringList(\"armor\");\n            applyEnchantmentList(item, armorEnchants);\n        }\n    }\n    \n    private static void applyEnchantmentList(ItemStack item, List<String> enchantmentList) {\n        for (String enchantmentString : enchantmentList) {\n            String[] enchantmentData = enchantmentString.split(\":\");\n            String enchantmentName = enchantmentData[0];\n            int enchantmentLevel = Integer.parseInt(enchantmentData[1]);\n    \n            Enchantment enchantment = Enchantment.getByKey(NamespacedKey.minecraft(enchantmentName.toLowerCase()));", "            if (enchantment != null) {\n                item.addUnsafeEnchantment(enchantment, enchantmentLevel);\n            }\n        }\n    }\n\n    public static ItemStack createCountdownItem(Material material, int countdown) {\n        ItemStack item = new ItemStack(material);\n        ItemMeta meta = item.getItemMeta();\n        if (meta != null) {\n            meta.displayName(Component.text(ChatColor.AQUA + \"Enhancing in \" + ChatColor.BOLD + countdown + \" seconds\"));\n            item.setItemMeta(meta);\n        }\n        return item;\n    }\n", "        if (meta != null) {\n            meta.displayName(Component.text(ChatColor.AQUA + \"Enhancing in \" + ChatColor.BOLD + countdown + \" seconds\"));\n            item.setItemMeta(meta);\n        }\n        return item;\n    }\n\n    public static EnhancementInfo getEnhancementInfo(int nextLevel) {\n        String enhanceName;\n        ChatColor enhanceColor;\n    \n        switch (nextLevel) {\n            case 16:\n                enhanceName = \"PRI\";\n                enhanceColor = ChatColor.GREEN;\n                break;\n            case 17:\n                enhanceName = \"DUO\";\n                enhanceColor = ChatColor.AQUA;\n                break;\n            case 18:\n                enhanceName = \"TRI\";\n                enhanceColor = ChatColor.GOLD;\n                break;\n            case 19:\n                enhanceName = \"TET\";\n                enhanceColor = ChatColor.YELLOW;\n                break;\n            case 20:\n                enhanceName = \"PEN\";\n                enhanceColor = ChatColor.RED;\n                break;\n            default:\n                enhanceName = String.valueOf(nextLevel);\n                enhanceColor = ChatColor.GREEN;\n                break;\n        }\n    \n        return new EnhancementInfo(enhanceName, enhanceColor);\n    }\n", "    public static boolean isBlackStone(ItemStack item) {\n        if (item == null || item.getType() != Material.BLACKSTONE) {\n            return false;\n        }\n    \n        ItemMeta meta = item.getItemMeta();\n        if (meta == null || !meta.hasDisplayName()) {\n            return false;\n        }\n    \n        return ChatColor.stripColor(meta.getDisplayName()).equals(\"Black Stone\");\n    }\n    ", "    public static boolean isProtectionRune(ItemStack item) {\n        if (item == null || item.getType() != Material.PAPER) {\n            return false;\n        }\n    \n        ItemMeta meta = item.getItemMeta();\n        if (meta == null || !meta.hasDisplayName()) {\n            return false;\n        }\n    \n        return ChatColor.stripColor(meta.getDisplayName()).equals(\"Protection Rune\");\n    }\n", "    public static int getMaxDurability(ItemStack item) {\n        return item.getType().getMaxDurability();\n    }\n    \n    public static int getDurability(ItemStack item) {\n        int maxDurability = item.getType().getMaxDurability();\n        int currentDamage = item.getDurability();\n        return maxDurability - currentDamage;\n    }\n\n    public static void setDurability(ItemStack item, int newDurability) {\n        int maxDurability = item.getType().getMaxDurability();", "    public static void setDurability(ItemStack item, int newDurability) {\n        int maxDurability = item.getType().getMaxDurability();\n        if (newDurability < 0 || newDurability > maxDurability) {\n            throw new IllegalArgumentException(\"Invalid durability value\");\n        }\n        int newDamage = maxDurability - newDurability;\n        item.setDurability((short) newDamage);\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Commands/EnhanceCommandExecutor.java", "chunked_list": ["package com.obotach.enhancer.Commands;\n\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n\nimport com.obotach.enhancer.EnhanceGUI;\n\npublic class EnhanceCommandExecutor implements CommandExecutor {\n    @Override", "\npublic class EnhanceCommandExecutor implements CommandExecutor {\n    @Override\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (!(sender instanceof Player)) {\n            sender.sendMessage(\"This command can only be used by a player.\");\n            return true;\n        }\n        \n        if (!sender.hasPermission(\"enhancing.enhance\")) {\n            sender.sendMessage(\"You do not have permission to use this command.\");\n            return true;\n        }\n", "        if (!sender.hasPermission(\"enhancing.enhance\")) {\n            sender.sendMessage(\"You do not have permission to use this command.\");\n            return true;\n        }\n\n        if (sender instanceof Player) {\n            Player player = (Player) sender;\n            EnhanceGUI.openEnhanceGUI(player);\n        } else {\n            sender.sendMessage(\"This command can only be used by players.\");\n        }\n\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Commands/EnhanceItemCommand.java", "chunked_list": ["package com.obotach.enhancer.Commands;\n\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.NamespacedKey;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;", "import org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataType;\n\nimport com.obotach.enhancer.Enhancing;\nimport com.obotach.enhancer.Utils;\nimport com.obotach.enhancer.Listeners.EnhanceGUIListener;\n\nimport net.kyori.adventure.text.Component;", "\nimport net.kyori.adventure.text.Component;\n\npublic class EnhanceItemCommand implements CommandExecutor {\n    private final Enhancing plugin;\n\n    public EnhanceItemCommand(Enhancing plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override", "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (!(sender instanceof Player)) {\n            sender.sendMessage(\"This command can only be used by a player.\");\n            return true;\n        }\n\n        if (!sender.hasPermission(\"enhancing.enhanceitem\")) {\n            sender.sendMessage(Component.text(\"\u00a7cYou do not have permission to use this command.\"));\n            return true;\n        }\n", "        if (args.length != 1) {\n            sender.sendMessage(\"Usage: /enhanceitem <level>\");\n            return true;\n        }\n\n        int level;\n        try {\n            level = Integer.parseInt(args[0]);\n        } catch (NumberFormatException e) {\n            sender.sendMessage(\"Invalid level. Please enter a valid number.\");\n            return true;\n        }\n", "        if (level < 0 || level > 20) {\n            sender.sendMessage(\"Invalid level. The enhancement level must be between 0 and 20.\");\n            return true;\n        }\n\n        Player player = (Player) sender;\n        ItemStack item = player.getInventory().getItemInMainHand();\n\n        if (item == null || item.getType() == Material.AIR) {\n            sender.sendMessage(\"You must hold an item in your main hand to enhance it.\");\n            return true;\n        }\n", "        if (item == null || item.getType() == Material.AIR) {\n            sender.sendMessage(\"You must hold an item in your main hand to enhance it.\");\n            return true;\n        }\n\n        if (!Utils.isWeapon(item) && !Utils.isArmor(item)) {\n            sender.sendMessage(\"You can only enhance weapons and armor.\");\n            return true;\n        }\n\n        ItemMeta itemMeta = item.getItemMeta();\n        NamespacedKey enhancementLevelKey = new NamespacedKey(plugin, \"enhancement_level\");\n        itemMeta.getPersistentDataContainer().set(enhancementLevelKey, PersistentDataType.INTEGER, level);\n        item.setItemMeta(itemMeta);\n\n        String enhanceName;\n        ChatColor enhanceColor;\n        switch (level) {\n            case 16:\n                enhanceName = \"PRI\";\n                enhanceColor = ChatColor.GREEN;\n                break;\n            case 17:\n                enhanceName = \"DUO\";\n                enhanceColor = ChatColor.AQUA;\n                break;\n            case 18:\n                enhanceName = \"TRI\";\n                enhanceColor = ChatColor.GOLD;\n                break;\n            case 19:\n                enhanceName = \"TET\";\n                enhanceColor = ChatColor.YELLOW;\n                break;\n            case 20:\n                enhanceName = \"PEN\";\n                enhanceColor = ChatColor.RED;\n                break;\n            default:\n                enhanceName = String.valueOf(level);\n                enhanceColor = ChatColor.GREEN;\n                break;\n        }\n        itemMeta.getPersistentDataContainer().set(enhancementLevelKey, PersistentDataType.INTEGER, level);", "        if (level > 15) {\n            itemMeta.displayName(Component.text(enhanceColor + \"\" + ChatColor.BOLD + \"\" + enhanceName));\n        } else {\n            itemMeta.displayName(Component.text(enhanceColor + \"+\" + enhanceName));\n        }\n        item.setItemMeta(itemMeta); // Set the new meta before applying enchantment\n        Utils.applyEnchantments(plugin, item, level);\n        sender.sendMessage(\"Item enhanced to level \" + level + \".\");\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Commands/RepairCommand.java", "chunked_list": ["package com.obotach.enhancer.Commands;\n\nimport com.obotach.enhancer.CustomItems;\nimport com.obotach.enhancer.Enhancing;\nimport com.obotach.enhancer.CustomItems.CustomItemKeys;\n\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.NamespacedKey;\nimport org.bukkit.Sound;", "import org.bukkit.NamespacedKey;\nimport org.bukkit.Sound;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.PlayerInventory;\nimport org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataContainer;", "import org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataContainer;\nimport org.bukkit.persistence.PersistentDataType;\n\npublic class RepairCommand implements CommandExecutor {\n\n    private Enhancing plugin;\n\n    public RepairCommand(Enhancing plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override", "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (!(sender instanceof Player)) {\n            sender.sendMessage(ChatColor.RED + \"This command can only be used by players.\");\n            return true;\n        }\n\n        Player player = (Player) sender;\n        ItemStack heldItem = player.getInventory().getItemInMainHand();\n\n        if (isEnhancedItem(heldItem)) {\n            int memoryFragmentsUsed = repairItemWithMemoryFragments(player, heldItem);\n", "        if (isEnhancedItem(heldItem)) {\n            int memoryFragmentsUsed = repairItemWithMemoryFragments(player, heldItem);\n\n            if (memoryFragmentsUsed > 0) {\n                player.sendMessage(ChatColor.GREEN + \"Successfully repaired your item using \" + memoryFragmentsUsed + \" memory fragments.\");\n                player.playSound(player.getLocation(), Sound.BLOCK_ANVIL_USE, 1.0f, 1.0f);\n            } else {\n                player.sendMessage(ChatColor.YELLOW + \"Your item is already at max durability.\");\n            }\n        } else {\n            player.sendMessage(ChatColor.RED + \"You must hold an enhanced item to repair it.\");\n        }\n\n        return true;\n    }\n\n    private int repairItemWithMemoryFragments(Player player, ItemStack itemToRepair) {\n        PlayerInventory inventory = player.getInventory();\n        int memoryFragmentsUsed = 0;\n", "        for (int i = 0; i < inventory.getSize(); i++) {\n            ItemStack currentItem = inventory.getItem(i);\n\n            if (isMemoryFragment(currentItem)) {\n                int repairAmount = currentItem.getAmount();\n                int remainingDurability = itemToRepair.getType().getMaxDurability() - itemToRepair.getDurability();\n\n                if (repairAmount >= remainingDurability) {\n                    repairAmount = remainingDurability;\n                    currentItem.setAmount(currentItem.getAmount() - repairAmount);\n                    itemToRepair.setDurability((short) 0);\n                    memoryFragmentsUsed += repairAmount;\n                    break;\n                } else {\n                    currentItem.setAmount(0);\n                    itemToRepair.setDurability((short) (itemToRepair.getDurability() - repairAmount));\n                    memoryFragmentsUsed += repairAmount;\n                    remainingDurability -= repairAmount;\n                }\n", "                if (currentItem.getAmount() <= 0) {\n                    inventory.clear(i);\n                } else {\n                    inventory.setItem(i, currentItem);\n                }\n            }\n        }\n\n        return memoryFragmentsUsed;\n    }\n\n    private boolean isEnhancedItem(ItemStack item) {", "        if (item == null || item.getType() == Material.AIR) {\n            return false;\n        }\n    \n        ItemMeta itemMeta = item.getItemMeta();\n        if (itemMeta == null) {\n            return false;\n        }\n    \n        NamespacedKey enhancementLevelKey = new NamespacedKey(plugin, \"enhancement_level\");\n        return itemMeta.getPersistentDataContainer().has(enhancementLevelKey, PersistentDataType.INTEGER);\n    }    \n", "    public static boolean isMemoryFragment(ItemStack item) {\n        if (item == null || !item.hasItemMeta()) {\n            return false;\n        }\n\n        ItemMeta meta = item.getItemMeta();\n        if (meta == null) {\n            return false;\n        }\n\n        PersistentDataContainer data = meta.getPersistentDataContainer();\n        return data.has(CustomItemKeys.MEMORY_FRAGMENT_KEY, PersistentDataType.INTEGER);\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Commands/GiveItemsCommand.java", "chunked_list": ["package com.obotach.enhancer.Commands;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;\n\nimport com.obotach.enhancer.CustomItems;", "\nimport com.obotach.enhancer.CustomItems;\nimport com.obotach.enhancer.Enhancing;\n\npublic class GiveItemsCommand implements CommandExecutor {\n\n    @Override\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (!sender.hasPermission(\"enhancing.giveblackstone\")) {\n            sender.sendMessage(\"You do not have permission to use this command.\");\n            return true;\n        }\n", "        if (!sender.hasPermission(\"enhancing.giveblackstone\")) {\n            sender.sendMessage(\"You do not have permission to use this command.\");\n            return true;\n        }\n\n        if (!(sender instanceof Player)) {\n            sender.sendMessage(\"This command can only be used by a player.\");\n            return true;\n        }\n        \n        Player player = (Player) sender;\n", "        if (args.length == 3) {\n            Player targetPlayer = Bukkit.getPlayer(args[0]);\n            if (targetPlayer == null) {\n                sender.sendMessage(\"Invalid player. Please enter a valid player name.\");\n                return true;\n            }\n\n            String itemType = args[1].toLowerCase();\n            int amount;\n\n            try {\n                amount = Integer.parseInt(args[2]);\n            } catch (NumberFormatException e) {\n                player.sendMessage(\"Invalid amount. Please enter a valid number.\");\n                return true;\n            }\n", "            try {\n                amount = Integer.parseInt(args[2]);\n            } catch (NumberFormatException e) {\n                player.sendMessage(\"Invalid amount. Please enter a valid number.\");\n                return true;\n            }\n\n            if (amount < 1) {\n                player.sendMessage(\"The amount must be at least 1.\");\n                return true;\n            }\n\n            ItemStack itemToGive = null;\n", "            if (itemType.equals(\"weapon\")) {\n                itemToGive = CustomItems.createBlackStoneWeapon();\n            } else if (itemType.equals(\"armor\")) {\n                itemToGive = CustomItems.createBlackStoneArmor();\n            } else if (itemType.equals(\"cweapon\")) {\n                itemToGive = CustomItems.createConcentratedMagicalBlackStoneWeapon();\n            } else if (itemType.equals(\"carmor\")) {\n                itemToGive = CustomItems.createConcentratedMagicalBlackStoneArmor();\n            } else if (itemType.equals(\"pstone\")) {\n                itemToGive = CustomItems.createProtectionRune();\n            } else if (itemType.equals(\"memoryfragment\")) {\n                itemToGive = CustomItems.createMemoryFragment();\n            } else {\n                sender.sendMessage(\"Usage: /giveblackstone <player> <weapon|armor|cweapon|carmor|memoryfragment> <amount>\");\n                return true;\n            }\n\n            itemToGive.setAmount(amount);\n            targetPlayer.getInventory().addItem(itemToGive);\n            targetPlayer.sendMessage(\"You have received \" + amount + \" Black Stone(s) (\" + itemType + \").\");\n            player.sendMessage(\"You have given \" + amount + \" Black Stone(s) (\" + itemType + \") to \" + targetPlayer.getName() + \".\");\n        } else {\n            sender.sendMessage(\"Usage: /giveblackstone <player> <weapon|armor|cweapon|carmor> <amount>\");\n        }\n\n        return true;\n    }\n}\n", "            } else if (itemType.equals(\"pstone\")) {\n                itemToGive = CustomItems.createProtectionRune();\n            } else if (itemType.equals(\"memoryfragment\")) {\n                itemToGive = CustomItems.createMemoryFragment();\n            } else {\n                sender.sendMessage(\"Usage: /giveblackstone <player> <weapon|armor|cweapon|carmor|memoryfragment> <amount>\");\n                return true;\n            }\n\n            itemToGive.setAmount(amount);\n            targetPlayer.getInventory().addItem(itemToGive);\n            targetPlayer.sendMessage(\"You have received \" + amount + \" Black Stone(s) (\" + itemType + \").\");\n            player.sendMessage(\"You have given \" + amount + \" Black Stone(s) (\" + itemType + \") to \" + targetPlayer.getName() + \".\");\n        } else {\n            sender.sendMessage(\"Usage: /giveblackstone <player> <weapon|armor|cweapon|carmor> <amount>\");\n        }\n\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Shops/ProtectionRuneShop.java", "chunked_list": ["package com.obotach.enhancer.Shops;\n\nimport java.util.List;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.Material;\nimport org.bukkit.Sound;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;", "import org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.inventory.InventoryClickEvent;\nimport org.bukkit.inventory.Inventory;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\n", "import org.bukkit.inventory.meta.ItemMeta;\n\nimport com.obotach.enhancer.CustomItems;\nimport com.obotach.enhancer.Enhancing;\n\npublic class ProtectionRuneShop implements CommandExecutor, Listener {\n    private static final String SHOP_NAME = \"\u00a76Protection Rune Shop\";\n    private static final int SHOP_SIZE = 27;\n    private static final int PROTECTION_RUNE_SLOT = 13;\n    private int protectionStoneEXPCost;\n\n    public ProtectionRuneShop(int protectionStoneEXPCost) {\n        this.protectionStoneEXPCost = protectionStoneEXPCost;\n    }\n\n    @Override", "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (!(sender instanceof Player)) {\n            sender.sendMessage(\"\u00a7cOnly players can use this command.\");\n            return true;\n        }\n\n        Player player = (Player) sender;\n        openShop(player);\n        return true;\n    }\n", "    public void openShop(Player player) {\n        Inventory shop = Bukkit.createInventory(null, SHOP_SIZE, SHOP_NAME);\n\n        // Fill shop with black glass panes\n        ItemStack blackGlassPane = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);\n        ItemMeta blackGlassPaneMeta = blackGlassPane.getItemMeta();\n        if (blackGlassPaneMeta != null) {\n            blackGlassPaneMeta.setDisplayName(\"\u00a70\");\n            blackGlassPane.setItemMeta(blackGlassPaneMeta);\n        }\n        for (int i = 0; i < SHOP_SIZE; i++) {\n            shop.setItem(i, blackGlassPane);\n        }\n\n        // Add protection rune in the middle\n        ItemStack protectionRune = CustomItems.createProtectionRune();\n        ItemMeta protectionRuneMeta = protectionRune.getItemMeta();", "        for (int i = 0; i < SHOP_SIZE; i++) {\n            shop.setItem(i, blackGlassPane);\n        }\n\n        // Add protection rune in the middle\n        ItemStack protectionRune = CustomItems.createProtectionRune();\n        ItemMeta protectionRuneMeta = protectionRune.getItemMeta();\n        if (protectionRuneMeta != null) {\n            protectionRuneMeta.setLore(List.of(\"\u00a77Click to buy\", \"\u00a7eCost: \"+protectionStoneEXPCost+\" levels for 1 protection runes\"));\n            protectionRune.setItemMeta(protectionRuneMeta);\n        }\n        shop.setItem(PROTECTION_RUNE_SLOT, protectionRune);\n\n        player.openInventory(shop);\n    }\n\n    @EventHandler", "public void onInventoryClick(InventoryClickEvent event) {\n    if (!(event.getWhoClicked() instanceof Player)) {\n        return;\n    }\n\n    Player player = (Player) event.getWhoClicked();\n\n    if (event.getView().getTitle().equals(SHOP_NAME)) {\n        event.setCancelled(true);\n\n        if (event.getSlot() == PROTECTION_RUNE_SLOT) {\n            int requiredLevels = protectionStoneEXPCost;\n", "        if (event.getSlot() == PROTECTION_RUNE_SLOT) {\n            int requiredLevels = protectionStoneEXPCost;\n\n            if (player.getLevel() >= requiredLevels) {\n                player.setLevel(player.getLevel() - requiredLevels);\n                ItemStack protectionRunes = CustomItems.createProtectionRune();\n                protectionRunes.setAmount(1);\n                player.getInventory().addItem(protectionRunes);\n\n                player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1.0f, 1.0f);\n                player.sendMessage(\"\u00a7aYou have successfully purchased a Protection Rune!\");\n\n                // Show success block\n                ItemStack successItem = new ItemStack(Material.LIME_STAINED_GLASS_PANE);\n                ItemMeta successMeta = successItem.getItemMeta();", "                if (successMeta != null) {\n                    successMeta.setDisplayName(\"\u00a7aPurchase successful!\");\n                    successItem.setItemMeta(successMeta);\n                }\n                event.getClickedInventory().setItem(PROTECTION_RUNE_SLOT, successItem);\n\n                // Schedule a task to revert the success item back to the protection rune after a delay\n                Bukkit.getScheduler().runTaskLater(Enhancing.getPlugin(Enhancing.class), () -> {\n                    ItemStack protectionRune = CustomItems.createProtectionRune();\n                    ItemMeta protectionRuneMeta = protectionRune.getItemMeta();\n                    if (protectionRuneMeta != null) {\n                        protectionRuneMeta.setLore(List.of(\"\u00a77Click to buy\", \"\u00a7eCost: \"+protectionStoneEXPCost+\" levels for a Protection Rune\"));\n                        protectionRune.setItemMeta(protectionRuneMeta);\n                    }\n                    event.getClickedInventory().setItem(PROTECTION_RUNE_SLOT, protectionRune);\n                }, 60L); // 60 ticks (3 seconds) delay\n            } else {\n                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);\n\n                ItemStack errorItem = new ItemStack(Material.BARRIER);\n                ItemMeta errorMeta = errorItem.getItemMeta();", "                    if (protectionRuneMeta != null) {\n                        protectionRuneMeta.setLore(List.of(\"\u00a77Click to buy\", \"\u00a7eCost: \"+protectionStoneEXPCost+\" levels for a Protection Rune\"));\n                        protectionRune.setItemMeta(protectionRuneMeta);\n                    }\n                    event.getClickedInventory().setItem(PROTECTION_RUNE_SLOT, protectionRune);\n                }, 60L); // 60 ticks (3 seconds) delay\n            } else {\n                player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);\n\n                ItemStack errorItem = new ItemStack(Material.BARRIER);\n                ItemMeta errorMeta = errorItem.getItemMeta();", "                if (errorMeta != null) {\n                    errorMeta.setDisplayName(\"\u00a7cError: Insufficient levels\");\n                    errorMeta.setLore(List.of(\"\u00a77You need \"+protectionStoneEXPCost+\" levels to buy a Protection Rune.\"));\n                    errorItem.setItemMeta(errorMeta);\n                }\n                event.getClickedInventory().setItem(PROTECTION_RUNE_SLOT, errorItem);\n\n                // Schedule a task to revert the error item back to the protection rune after a delay\n                Bukkit.getScheduler().runTaskLater(Enhancing.getPlugin(Enhancing.class), () -> {\n                    ItemStack protectionRune = CustomItems.createProtectionRune();\n                    ItemMeta protectionRuneMeta = protectionRune.getItemMeta();", "                    if (protectionRuneMeta != null) {\n                        protectionRuneMeta.setLore(List.of(\"\u00a77Click to buy\", \"\u00a7eCost: \"+protectionStoneEXPCost+\" levels for a Protection Rune\"));\n                        protectionRune.setItemMeta(protectionRuneMeta);\n                    }\n                    event.getClickedInventory().setItem(PROTECTION_RUNE_SLOT, protectionRune);\n                }, 60L); // 60 ticks (3 seconds) delay\n                }\n            }\n        }\n    }\n}\n    "]}
{"filename": "src/main/java/com/obotach/enhancer/Listeners/BlockBreakListener.java", "chunked_list": ["package com.obotach.enhancer.Listeners;\n\nimport com.obotach.enhancer.CustomItems;\nimport org.bukkit.Material;\nimport org.bukkit.block.Block;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.block.BlockBreakEvent;\nimport org.bukkit.inventory.ItemStack;\n", "import org.bukkit.inventory.ItemStack;\n\nimport java.util.Random;\n\npublic class BlockBreakListener implements Listener {\n\n    private final Random random = new Random();\n    private double memoryFragmentDropChance;\n\n    public BlockBreakListener(double memoryFragmentDropChance) {\n        this.memoryFragmentDropChance = memoryFragmentDropChance;\n    }\n\n    @EventHandler", "    public void onBlockBreak(BlockBreakEvent event) {\n        Block block = event.getBlock();\n\n        // Check if the block is solid and not an air block\n        if (block.getType().isSolid() && block.getType() != Material.AIR) {\n            // 1% chance\n            if (random.nextDouble() < memoryFragmentDropChance) {\n                ItemStack memoryFragment = CustomItems.createMemoryFragment();\n                block.getWorld().dropItemNaturally(block.getLocation(), memoryFragment);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Listeners/MobDeathListener.java", "chunked_list": ["package com.obotach.enhancer.Listeners;\n\nimport org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.bukkit.entity.*;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDeathEvent;\nimport org.bukkit.inventory.ItemStack;\n", "import org.bukkit.inventory.ItemStack;\n\nimport com.obotach.enhancer.CustomItems;\nimport com.obotach.enhancer.Enhancing;\n\nimport java.util.Random;\n\npublic class MobDeathListener implements Listener {\n    private final Random random = new Random();\n    private double blackStoneDropChance;\n    private double concentratedBlackStoneDropChance;\n    private double protectionStoneDropChance;\n\n    public MobDeathListener(double blackStoneDropChance, double concentratedBlackStoneDropChance, double protectionStoneDropChance) {\n        this.blackStoneDropChance = blackStoneDropChance;\n        this.concentratedBlackStoneDropChance = concentratedBlackStoneDropChance;\n        this.protectionStoneDropChance = protectionStoneDropChance;\n    }\n\n    @EventHandler", "    public void onMobDeath(EntityDeathEvent event) {\n        LivingEntity entity = event.getEntity();\n\n        if (isHostileMob(entity) && shouldDropBlackStone()) {\n            ItemStack blackStone = random.nextBoolean() ? CustomItems.createBlackStoneWeapon() : CustomItems.createBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }\n        if (isHostileMob(entity) && shouldDropConcentratedBlackStone()) {\n            ItemStack blackStone = random.nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), blackStone);\n        }", "        if (isHostileMob(entity) && shouldDropProtectionStone()) {\n            ItemStack protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();\n            entity.getWorld().dropItemNaturally(entity.getLocation(), protectionStone);\n        }\n    }\n\n    private boolean isHostileMob(LivingEntity entity) {\n        EntityType entityType = entity.getType();\n        return entityType == EntityType.ZOMBIE || entityType == EntityType.SKELETON || entityType == EntityType.CREEPER\n                || entityType == EntityType.ENDERMAN || entityType == EntityType.BLAZE || entityType == EntityType.WITHER_SKELETON\n                || entityType == EntityType.GHAST || entityType == EntityType.MAGMA_CUBE || entityType == EntityType.SLIME\n                || entityType == EntityType.PHANTOM || entityType == EntityType.DROWNED || entityType == EntityType.HUSK\n                || entityType == EntityType.STRAY || entityType == EntityType.PILLAGER || entityType == EntityType.RAVAGER\n                || entityType == EntityType.SHULKER || entityType == EntityType.SILVERFISH || entityType == EntityType.SPIDER\n                || entityType == EntityType.CAVE_SPIDER || entityType == EntityType.VEX || entityType == EntityType.VINDICATOR\n                || entityType == EntityType.EVOKER || entityType == EntityType.WITCH || entityType == EntityType.WITHER\n                || entityType == EntityType.ELDER_GUARDIAN || entityType == EntityType.GUARDIAN || entityType == EntityType.HOGLIN\n                || entityType == EntityType.PIGLIN || entityType == EntityType.PIGLIN_BRUTE || entityType == EntityType.STRIDER\n                || entityType == EntityType.ZOGLIN || entityType == EntityType.ZOMBIFIED_PIGLIN;\n    }\n\n    private boolean shouldDropBlackStone() {\n        return random.nextInt(100) < blackStoneDropChance;\n    }\n\n    private boolean shouldDropConcentratedBlackStone() {\n        return random.nextInt(100) < concentratedBlackStoneDropChance;\n    }\n\n    private boolean shouldDropProtectionStone() {\n        return random.nextInt(100) < protectionStoneDropChance;\n    }\n}\n"]}
{"filename": "src/main/java/com/obotach/enhancer/Listeners/EnhanceGUIListener.java", "chunked_list": ["package com.obotach.enhancer.Listeners;\n\nimport net.kyori.adventure.text.Component;\nimport net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\n", "import java.util.UUID;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.NamespacedKey;\nimport org.bukkit.Particle;\nimport org.bukkit.Sound;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;", "import org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.inventory.InventoryAction;\nimport org.bukkit.event.inventory.InventoryClickEvent;\nimport org.bukkit.event.inventory.InventoryCloseEvent;\nimport org.bukkit.event.inventory.InventoryDragEvent;\nimport org.bukkit.inventory.Inventory;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;", "import org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\nimport org.bukkit.persistence.PersistentDataType;\n\nimport com.obotach.enhancer.EnhanceGUI;\nimport com.obotach.enhancer.Enhancing;\nimport com.obotach.enhancer.Utils;\nimport com.obotach.enhancer.CustomItems.CustomItemKeys;\nimport com.obotach.enhancer.EnhancementInfo;\n\npublic class EnhanceGUIListener implements Listener {", "import com.obotach.enhancer.EnhancementInfo;\n\npublic class EnhanceGUIListener implements Listener {\n    public static final NamespacedKey ENHANCEMENT_LEVEL_KEY = new NamespacedKey(Enhancing.getPlugin(Enhancing.class), \"enhancement_level\");\n    // plugin preifx from config\n    private final String prefix = Enhancing.getPlugin(Enhancing.class).getConfig().getString(\"plugin-prefix\");\n    private final Map<UUID, Integer> enhancementTasks;\n\n    private final Enhancing plugin;\n    private EnhanceGUI enhanceGUI;\n\n    public EnhanceGUIListener(Enhancing plugin, EnhanceGUI enhanceGUI) {\n        this.plugin = plugin;\n        this.enhanceGUI = enhanceGUI;\n        this.enhancementTasks = new HashMap<>();\n    }\n\n    @EventHandler", "    public void onInventoryClick(InventoryClickEvent event) {\n        Component viewTitle = event.getView().title();\n\n        if (viewTitle == null || !viewTitle.equals(Component.text(EnhanceGUI.INVENTORY_TITLE))) {\n            return;\n        }\n\n        // Check if the player has an ongoing enhancement\n        if (isPlayerEnhancing(event.getWhoClicked().getUniqueId())) {\n            event.setCancelled(true);\n            return;\n        }\n\n        int clickedSlot = event.getSlot();\n        Inventory clickedInventory = event.getClickedInventory();\n\n        // If the clicked inventory is not the EnhanceGUI inventory, allow the event", "        if (isPlayerEnhancing(event.getWhoClicked().getUniqueId())) {\n            event.setCancelled(true);\n            return;\n        }\n\n        int clickedSlot = event.getSlot();\n        Inventory clickedInventory = event.getClickedInventory();\n\n        // If the clicked inventory is not the EnhanceGUI inventory, allow the event\n        if (clickedInventory == null || !clickedInventory.equals(event.getView().getTopInventory())) {\n            return;\n        }\n\n        // Cancel the click event to prevent players from taking items from the GUI, except in slots 19, 22, 34", "        if (clickedInventory == null || !clickedInventory.equals(event.getView().getTopInventory())) {\n            return;\n        }\n\n        // Cancel the click event to prevent players from taking items from the GUI, except in slots 19, 22, 34\n        if (clickedSlot != 19 && clickedSlot != 22 && clickedSlot != 34) {\n            event.setCancelled(true);\n        }\n\n        InventoryAction action = event.getAction();\n\n        // code below updates the enhance button when the item or black stone is placed in the slot so we always have latest enchant success rate", "        if (clickedSlot == 19 || clickedSlot == 22 || action == InventoryAction.MOVE_TO_OTHER_INVENTORY || action == InventoryAction.SWAP_WITH_CURSOR || action == InventoryAction.COLLECT_TO_CURSOR || action == InventoryAction.HOTBAR_MOVE_AND_READD || action == InventoryAction.HOTBAR_SWAP) {\n            // Call updateEnhanceButton() when the item or black stone is placed in the slot\n            enhanceGUI.updateSuccessChancePanel(event.getClickedInventory());\n        }\n\n        // Check if the clicked slot is the enhance button\n        if (event.getSlot() == 25) {\n            ItemStack itemToEnhance = event.getClickedInventory().getItem(19);\n            ItemStack blackStone = event.getClickedInventory().getItem(22);\n\n            if (itemToEnhance == null || itemToEnhance.getType() == Material.AIR || blackStone == null || blackStone.getType() == Material.AIR) {\n                return;\n            }\n\n            ItemMeta blackStoneMeta = blackStone.getItemMeta();", "            if (itemToEnhance == null || itemToEnhance.getType() == Material.AIR || blackStone == null || blackStone.getType() == Material.AIR) {\n                return;\n            }\n\n            ItemMeta blackStoneMeta = blackStone.getItemMeta();\n            if (blackStoneMeta == null) {\n                return;\n            }\n\n            boolean isWeapon = Utils.isWeapon(itemToEnhance);\n            boolean isArmor = Utils.isArmor(itemToEnhance);\n            int enhancementLevel = itemToEnhance.getItemMeta().getPersistentDataContainer().getOrDefault(ENHANCEMENT_LEVEL_KEY, PersistentDataType.INTEGER, 0) + 1;\n", "            if (isWeapon && blackStoneMeta.getPersistentDataContainer().has(CustomItemKeys.BLACK_STONE_WEAPON_KEY, PersistentDataType.INTEGER) && enhancementLevel <= 15) {\n                startEnhancementAnimation((Player) event.getWhoClicked(), event.getClickedInventory(), 19, 22);\n            } else if (isArmor && blackStoneMeta.getPersistentDataContainer().has(CustomItemKeys.BLACK_STONE_ARMOR_KEY, PersistentDataType.INTEGER) && enhancementLevel <= 15) {\n                startEnhancementAnimation((Player) event.getWhoClicked(), event.getClickedInventory(), 19, 22);\n            } else if (isWeapon && blackStoneMeta.getPersistentDataContainer().has(CustomItemKeys.CONCENTRATED_MAGICAL_BLACK_STONE_WEAPON_KEY, PersistentDataType.INTEGER) && enhancementLevel >= 16 && enhancementLevel <= 20) {\n                startEnhancementAnimation((Player) event.getWhoClicked(), event.getClickedInventory(), 19, 22);\n            } else if (isArmor && blackStoneMeta.getPersistentDataContainer().has(CustomItemKeys.CONCENTRATED_MAGICAL_BLACK_STONE_ARMOR_KEY, PersistentDataType.INTEGER) && enhancementLevel >= 16 && enhancementLevel <= 20) {\n                startEnhancementAnimation((Player) event.getWhoClicked(), event.getClickedInventory(), 19, 22);\n            } else if ( enhancementLevel >= 20) {\n                clickedInventory.setItem(25, EnhanceGUI.createMaxEnhancementAchievedButton());\n            } else {\n                showErrorInGUI(clickedInventory, enhancementLevel);\n            }\n        }\n    }\n\n    private void startEnhancementAnimation(Player player, Inventory inventory, int itemSlot, int blackStoneSlot) {\n        ItemStack protectionStone = inventory.getItem(34);\n        \n        //check if slot 34 is empty if not check if it is a Protection Rune. If it is not a protection rune show error", "            } else if ( enhancementLevel >= 20) {\n                clickedInventory.setItem(25, EnhanceGUI.createMaxEnhancementAchievedButton());\n            } else {\n                showErrorInGUI(clickedInventory, enhancementLevel);\n            }\n        }\n    }\n\n    private void startEnhancementAnimation(Player player, Inventory inventory, int itemSlot, int blackStoneSlot) {\n        ItemStack protectionStone = inventory.getItem(34);\n        \n        //check if slot 34 is empty if not check if it is a Protection Rune. If it is not a protection rune show error", "        if (protectionStone != null && protectionStone.getType() != Material.AIR && !protectionStone.getItemMeta().getPersistentDataContainer().has(CustomItemKeys.PROTECTION_RUNE_KEY, PersistentDataType.INTEGER)) {\n            //return itenm to player and remove it from inventory\n            player.getInventory().addItem(protectionStone);\n            inventory.setItem(34, null);\n            showErrorInGUI(inventory, 0);\n            return;\n        }\n        \n        Material[] countdownBlocks = {Material.RED_CONCRETE, Material.ORANGE_CONCRETE, Material.YELLOW_CONCRETE, Material.LIME_CONCRETE, Material.GREEN_CONCRETE};\n    \n        int taskId = Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, new Runnable() {\n            int countdown = 5;\n    \n            @Override", "            public void run() {\n                if (countdown > 0) {\n                    // Change the block and play the sound\n                    inventory.setItem(25, Utils.createCountdownItem(countdownBlocks[countdown - 1], countdown));\n                    player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_HAT, 1.0f, 1.0f);\n                    countdown--;\n                } else {\n                    // Cancel the task and enhance the item\n                    Bukkit.getScheduler().cancelTask(enhancementTasks.get(player.getUniqueId()));\n                    enhancementTasks.remove(player.getUniqueId());\n                    enhanceItem(player, inventory, itemSlot, blackStoneSlot);\n                }\n            }\n        }, 0L, 20L);\n    \n        // Store the task ID for the player\n        enhancementTasks.put(player.getUniqueId(), taskId);\n    }\n\n    private void showErrorInGUI(Inventory inventory, int enhancementLevel) {\n        ItemStack errorBlock = new ItemStack(Material.RED_WOOL);\n        ItemMeta meta = errorBlock.getItemMeta();", "        if (meta != null) {\n            String errorMessage;\n            if (enhancementLevel <= 15) {\n                errorMessage = ChatColor.RED + \"You must use the correct Black Stone for the item you want to enhance.\";\n            } else {\n                errorMessage = ChatColor.RED + \"You must use a Concentrated Magical Black Stone for enhancement levels 16-20.\";\n            }\n            meta.displayName(Component.text(errorMessage));\n            errorBlock.setItemMeta(meta);\n        }\n        inventory.setItem(25, errorBlock);\n    \n        Bukkit.getScheduler().runTaskLater(plugin, () -> {\n            inventory.setItem(25, enhanceGUI.createEnhanceButton());\n        }, 3 * 20L);\n    }\n\n\n    @EventHandler", "    public void onInventoryClose(InventoryCloseEvent event) {\n        Component viewTitle = event.getView().title();\n\n        if (viewTitle == null || !viewTitle.equals(Component.text(EnhanceGUI.INVENTORY_TITLE))) {\n            return;\n        }\n\n        Inventory inventory = event.getInventory();\n        Player player = (Player) event.getPlayer();\n\n        ItemStack item = inventory.getItem(19);\n        ItemStack blackStone = inventory.getItem(22);\n        ItemStack protectionRune = inventory.getItem(34);\n", "        if (item != null) {\n            player.getInventory().addItem(item);\n        }\n\n        if (blackStone != null) {\n            player.getInventory().addItem(blackStone);\n        }\n\n        if (protectionRune != null) {\n            player.getInventory().addItem(protectionRune);\n        }\n\n        UUID playerUUID = event.getPlayer().getUniqueId();", "        if (protectionRune != null) {\n            player.getInventory().addItem(protectionRune);\n        }\n\n        UUID playerUUID = event.getPlayer().getUniqueId();\n        if (enhancementTasks.containsKey(playerUUID)) {\n            Bukkit.getScheduler().cancelTask(enhancementTasks.get(playerUUID));\n            enhancementTasks.remove(playerUUID);\n        }\n    }\n\n    private void enhanceItem(Player player, Inventory inventory, int itemSlot, int blackStoneSlot) {\n        ItemStack itemToEnhance = inventory.getItem(itemSlot);\n        ItemStack blackStone = inventory.getItem(blackStoneSlot);\n        ItemStack protectionStone = inventory.getItem(34);\n        ItemMeta itemMeta = itemToEnhance.getItemMeta();\n\n        boolean hasProtectionStone = protectionStone != null && protectionStone.getType() != Material.AIR && protectionStone.getItemMeta().getPersistentDataContainer().has(CustomItemKeys.PROTECTION_RUNE_KEY, PersistentDataType.INTEGER);\n\n        NamespacedKey enhancementLevelKey = new NamespacedKey(plugin, \"enhancement_level\");\n        int currentLevel = itemMeta.getPersistentDataContainer().getOrDefault(enhancementLevelKey, PersistentDataType.INTEGER, 0);\n        double successChance = Utils.getSuccessChance(plugin, currentLevel);\n\n        Random random = new Random();\n        boolean success = random.nextDouble() * 100 < successChance;\n\n        int nextLevel = currentLevel + 1;\n        EnhancementInfo enhanceName = Utils.getEnhancementInfo(nextLevel);", "        if (success) {\n            itemMeta.getPersistentDataContainer().set(enhancementLevelKey, PersistentDataType.INTEGER, nextLevel);\n            if (nextLevel > 15) {\n                itemMeta.displayName(Utils.getEnhancementName(nextLevel));\n                Utils.betterBroadcast(prefix + ChatColor.RED + player.getName() +  ChatColor.GREEN + \" Succesfully Enhanced \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)));\n            } else {\n                itemMeta.displayName(Component.text(enhanceName.getEnhanceColor() + \"+\" + enhanceName.getEnhanceName()));\n                Utils.betterBroadcast(prefix + ChatColor.AQUA + player.getName() +  ChatColor.GREEN + \" Succesfully Enhanced \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + ChatColor.GREEN + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)));\n            }\n            itemToEnhance.setItemMeta(itemMeta); // Set the new meta before applying enchantments\n            Utils.applyEnchantments(plugin, itemToEnhance, nextLevel);\n            enhanceGUI.updateSuccessChancePanel(inventory);\n            enhanceGUI.showSuccessBlock(player, inventory);\n            spawnSuccessParticles(player);\n        } else {", "            if (currentLevel >= 16 && currentLevel <= 20 && !hasProtectionStone) {\n                // Downgrade the item by one level\n                currentLevel--;\n                itemMeta.getPersistentDataContainer().set(enhancementLevelKey, PersistentDataType.INTEGER, currentLevel);\n                itemMeta.displayName(Utils.getEnhancementName(currentLevel));\n                itemToEnhance.setItemMeta(itemMeta);\n    \n                // Announce the downgrade to users\n                Utils.betterBroadcast(prefix + ChatColor.YELLOW + player.getName() + ChatColor.RED + \" Failed to Enhance \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel+1)) + ChatColor.RED + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)) + ChatColor.GRAY + \" and downgraded to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)));\n            } else if (currentLevel >= 16 && currentLevel <= 20 && hasProtectionStone) {\n                // Announce the failure to enhance with protection to users\n                Utils.betterBroadcast(prefix + ChatColor.YELLOW + player.getName() + ChatColor.RED + \" Failed to Enhance \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)) + ChatColor.GRAY + \" but item is protected by Protection Stone.\");\n            } else {\n                Utils.betterBroadcast(prefix + ChatColor.YELLOW + player.getName() + ChatColor.RED + \" Failed to Enhance \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)));\n            }\n    \n            enhanceGUI.showFailureBlock(player, inventory);\n            int maxDurability = Utils.getMaxDurability(itemToEnhance);\n            int durabilityLoss = currentLevel >= 16 && currentLevel <= 20 ? (int) (maxDurability * 0.2) : (int) (maxDurability * 0.1);\n            int newDurability = Utils.getDurability(itemToEnhance) - durabilityLoss;\n            Utils.setDurability(itemToEnhance, newDurability);\n        }\n\n    ", "            } else if (currentLevel >= 16 && currentLevel <= 20 && hasProtectionStone) {\n                // Announce the failure to enhance with protection to users\n                Utils.betterBroadcast(prefix + ChatColor.YELLOW + player.getName() + ChatColor.RED + \" Failed to Enhance \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)) + ChatColor.GRAY + \" but item is protected by Protection Stone.\");\n            } else {\n                Utils.betterBroadcast(prefix + ChatColor.YELLOW + player.getName() + ChatColor.RED + \" Failed to Enhance \" + ChatColor.AQUA + itemToEnhance.getType().name() + ChatColor.GRAY + \" from \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(currentLevel)) + \" to \" + LegacyComponentSerializer.legacySection().serialize(Utils.getEnhancementName(nextLevel)));\n            }\n    \n            enhanceGUI.showFailureBlock(player, inventory);\n            int maxDurability = Utils.getMaxDurability(itemToEnhance);\n            int durabilityLoss = currentLevel >= 16 && currentLevel <= 20 ? (int) (maxDurability * 0.2) : (int) (maxDurability * 0.1);\n            int newDurability = Utils.getDurability(itemToEnhance) - durabilityLoss;\n            Utils.setDurability(itemToEnhance, newDurability);\n        }\n\n    ", "        if (blackStone.getAmount() > 1) {\n            blackStone.setAmount(blackStone.getAmount() - 1);\n        } else {\n            inventory.setItem(blackStoneSlot, null);\n        }\n\n        if (hasProtectionStone) {\n            if (protectionStone.getAmount() > 1) {\n                protectionStone.setAmount(protectionStone.getAmount() - 1);\n            } else {\n                inventory.setItem(34, null);\n            }\n        }\n    }\n\n    private boolean isPlayerEnhancing(UUID playerUUID) {\n        return enhancementTasks.containsKey(playerUUID);\n    }\n\n    private void spawnSuccessParticles(Player player) {", "        for (int i = 0; i < 100; i++) {\n            double offsetX = (Math.random() * 2) - 1;\n            double offsetY = (Math.random() * 2) - 1;\n            double offsetZ = (Math.random() * 2) - 1;\n            player.getWorld().spawnParticle(Particle.FIREWORKS_SPARK, player.getLocation().add(0, 1, 0), 0, offsetX, offsetY, offsetZ, 0.1);\n        }\n    }\n}"]}
{"filename": "src/main/java/com/obotach/enhancer/Listeners/DisableEnchantingListener.java", "chunked_list": ["package com.obotach.enhancer.Listeners;\n\nimport org.bukkit.Material;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.inventory.InventoryClickEvent;\nimport org.bukkit.event.inventory.InventoryType;\nimport org.bukkit.inventory.ItemStack;\n\npublic class DisableEnchantingListener implements Listener {\n\n    @EventHandler", "import org.bukkit.inventory.ItemStack;\n\npublic class DisableEnchantingListener implements Listener {\n\n    @EventHandler\n    public void onInventoryClick(InventoryClickEvent event) {\n        // Check if the inventory type is an Enchanting Table\n        if (event.getInventory().getType() != InventoryType.ENCHANTING) {\n            return;\n        }\n\n        ItemStack item = event.getCurrentItem();\n", "        if (item == null) {\n            return;\n        }\n\n        Material type = item.getType();\n\n        // Check if the item is armor, sword, or axe\n        if (type.name().endsWith(\"_HELMET\") || type.name().endsWith(\"_CHESTPLATE\")\n                || type.name().endsWith(\"_LEGGINGS\") || type.name().endsWith(\"_BOOTS\")\n                || type.name().endsWith(\"_SWORD\") || type.name().endsWith(\"_AXE\")) {\n            event.setCancelled(true);\n\n            // Send a message to the player\n            Player player = (Player) event.getWhoClicked();\n            player.sendMessage(\"\u00a7cYou cannot use the enchanting table for this item. Please use the \u00a76/enhance\u00a7c command to enchant your gear.\");\n        }\n    }\n}\n"]}
