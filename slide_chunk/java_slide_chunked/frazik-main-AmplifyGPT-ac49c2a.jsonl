{"filename": "lib/src/test/java/com/frazik/instructgpt/RegressionTests.java", "chunked_list": ["package com.frazik.instructgpt;\n\nimport com.frazik.instructgpt.embedding.EmbeddingProvider;\nimport com.frazik.instructgpt.embedding.OpenAIEmbeddingProvider;\nimport com.frazik.instructgpt.memory.LocalMemory;\nimport com.frazik.instructgpt.memory.Memory;\nimport com.frazik.instructgpt.models.Model;\nimport com.frazik.instructgpt.models.OpenAIModel;\nimport com.frazik.instructgpt.response.Response;\nimport com.theokanning.openai.completion.chat.ChatMessage;", "import com.frazik.instructgpt.response.Response;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTests {\n\n    @Test\n    void embeddingTest() {\n        EmbeddingProvider embeddingProvider = new OpenAIEmbeddingProvider();\n        double[] embeddings = embeddingProvider.get(\"This is A test\");\n\n        assertEquals(-0.006280571, embeddings[0],0.005);\n        assertEquals(-0.0040152827, embeddings[2], 0.05);\n        assertEquals(0.005179715, embeddings[embeddings.length - 2], 0.05);\n    }\n\n    @Test\n    void modelTest() {\n        Model model = new OpenAIModel(\"gpt-3.5-turbo\");\n        ChatMessage chatMessage = new ChatMessage();\n        chatMessage.setRole(\"assistant\");\n        chatMessage.setContent(\"This is a test!\");\n        List<ChatMessage> chatMessages = new ArrayList<>();\n        chatMessages.add(chatMessage);\n        String response = model.chat(chatMessages, 100, 0.8);\n\n        assertTrue(response.length() > 10);\n    }\n\n    @Test\n    void basicChatTest() {\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n        Response resp = agent.chat();\n        assertNotNull(resp);\n    }\n\n    @Test\n    void basicChatResult() {\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n        Response resp = agent.chat();\n        assertEquals(\"google_search\", resp.getCommand());\n    }\n\n}\n", "import static org.junit.jupiter.api.Assertions.*;\n\npublic class RegressionTests {\n\n    @Test\n    void embeddingTest() {\n        EmbeddingProvider embeddingProvider = new OpenAIEmbeddingProvider();\n        double[] embeddings = embeddingProvider.get(\"This is A test\");\n\n        assertEquals(-0.006280571, embeddings[0],0.005);\n        assertEquals(-0.0040152827, embeddings[2], 0.05);\n        assertEquals(0.005179715, embeddings[embeddings.length - 2], 0.05);\n    }\n\n    @Test\n    void modelTest() {\n        Model model = new OpenAIModel(\"gpt-3.5-turbo\");\n        ChatMessage chatMessage = new ChatMessage();\n        chatMessage.setRole(\"assistant\");\n        chatMessage.setContent(\"This is a test!\");\n        List<ChatMessage> chatMessages = new ArrayList<>();\n        chatMessages.add(chatMessage);\n        String response = model.chat(chatMessages, 100, 0.8);\n\n        assertTrue(response.length() > 10);\n    }\n\n    @Test\n    void basicChatTest() {\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n        Response resp = agent.chat();\n        assertNotNull(resp);\n    }\n\n    @Test\n    void basicChatResult() {\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n        Response resp = agent.chat();\n        assertEquals(\"google_search\", resp.getCommand());\n    }\n\n}\n"]}
{"filename": "lib/src/test/java/com/frazik/instructgpt/PromptTests.java", "chunked_list": ["package com.frazik.instructgpt;\n\nimport com.frazik.instructgpt.prompts.Prompt;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class PromptTests {\n\n        @Test\n        void testPromptLoad() {\n            Prompt prompt = new Prompt.Builder(\"constraints\").build();\n            String promptString = prompt.getContent();\n            assertTrue(promptString.length() > 150);\n        }\n\n        @Test\n        void testPromptLoadWithNumberList() {\n            Prompt prompt = new Prompt.Builder(\"constraints\").numberList().build();\n            String promptString = prompt.getContent();\n            assertTrue(promptString.contains(\"1.\"));\n        }\n\n        @Test\n        void testPromptLoadWithDelimited() {\n            Prompt prompt = new Prompt.Builder(\"constraints\").delimited().build();\n            String promptString = prompt.getContent();\n            int countNewLines = promptString.length() - promptString.replace(\"\\n\", \"\").length();\n            assertTrue(countNewLines > 3);\n        }\n\n        @Test\n        void testPromptLoadWithFormatted() {\n            Prompt prompt = new Prompt.Builder(\"persona\").formatted(0, \"test123\", \"test456\").build();\n            String promptString = prompt.getContent();\n            assertTrue(promptString.contains(\"test123\"));\n        }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/Agent.java", "chunked_list": ["package com.frazik.instructgpt;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.frazik.instructgpt.auto.Cli;\nimport com.frazik.instructgpt.embedding.OpenAIEmbeddingProvider;\nimport com.frazik.instructgpt.memory.LocalMemory;\nimport com.frazik.instructgpt.models.OpenAIModel;\nimport com.frazik.instructgpt.prompts.Prompt;", "import com.frazik.instructgpt.models.OpenAIModel;\nimport com.frazik.instructgpt.prompts.Prompt;\nimport com.frazik.instructgpt.prompts.PromptHistory;\nimport com.frazik.instructgpt.response.Response;\nimport com.frazik.instructgpt.tools.Browser;\nimport com.frazik.instructgpt.tools.GoogleSearch;\nimport com.frazik.instructgpt.tools.Tool;\nimport com.google.gson.Gson;\nimport lombok.extern.slf4j.Slf4j;\nimport org.json.JSONObject;", "import lombok.extern.slf4j.Slf4j;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.util.*;\n\n@Slf4j\npublic class Agent {\n    private final String name;\n    private final String description;\n    private final List<String> goals;\n    private final LocalMemory memory;\n    private final PromptHistory history;\n    private final List<Tool> tools;\n    private Map<String, Object> stagingTool;\n    private JsonNode stagingResponse;\n    private final OpenAIModel openAIModel;\n    private static final ObjectMapper mapper = new ObjectMapper();\n    public Agent(String name, String description, List<String> goals, String model) {\n        this.history = new PromptHistory();\n        this.name = name;\n        this.description = description;\n        this.goals = goals;\n        this.memory = new LocalMemory();\n        this.tools = Arrays.asList(new Browser(), new GoogleSearch());\n        this.openAIModel = new OpenAIModel(model);\n    }\n\n    private Map<String, String> buildPrompts(String role, String content) {\n        Map<String, String> prompt = new HashMap<>();\n        prompt.put(\"role\", role);\n        prompt.put(\"content\", content);\n        return prompt;\n    }\n\n    private List<Map<String, String>> getFullPrompt(String userInput) {\n        List<Map<String, String>> prompt = new ArrayList<>();\n\n        // Build header prompt\n        Map<String, String> header = buildPrompts(\"system\", headerPrompt());\n        prompt.add(header);\n\n        // Build current date and time prompt\n        Prompt currentTimePrompt = new Prompt.Builder(\"current_time\")\n                .withRole(\"system\")\n                .formattedWithCurrentTime(0)\n                .build();\n        prompt.add(currentTimePrompt.getPrompt());\n\n        // Retrieve relevant memory\n        List<String> relevantMemory = memory.get(10);\n", "        if (relevantMemory != null) {\n            int tokenLimit = 2500;\n            Map<String, String> context = null;\n\n            // Add memory documents while staying under token limit\n            while (!relevantMemory.isEmpty()) {\n                String memoryStr = String.join(\"\\n\", relevantMemory);\n                Prompt memoryPrompt = new Prompt.Builder(\"reminds_past\")\n                        .withRole(\"system\")\n                        .formatted(0, memoryStr)\n                        .build();\n                context = memoryPrompt.getPrompt();\n                List<Map<String, String>> updatedPrompt = new ArrayList<>(prompt);\n                updatedPrompt.add(context);\n                int tokenCount = openAIModel.countTokens(updatedPrompt);\n", "                if (tokenCount < tokenLimit) {\n                    break;\n                }\n\n                relevantMemory.remove(relevantMemory.size() - 1);\n            }\n\n            if (context != null) {\n                prompt.add(prompt.size() - 1, context);\n            }\n        }\n\n        // Add user input prompt\n        List<Map<String, String>> userPrompt = new ArrayList<>();", "        if (userInput != null && !userInput.isEmpty()) {\n            userPrompt.add(buildPrompts(\"user\", userInput));\n        }\n\n        List<Map<String, String>> newPrompt = new ArrayList<>(prompt.subList(0, 2));\n        newPrompt.addAll(history.getValues());\n\n        if (prompt.size() > 2) {\n            newPrompt.addAll(prompt.subList(2, prompt.size()));\n        }\n\n        newPrompt.addAll(userPrompt);\n        prompt = newPrompt;\n\n        // Ensure each prompt is not null", "        for (Map<String, String> p : prompt) {\n            assert p != null;\n        }\n\n        int tokenLimit = openAIModel.getTokenLimit() - 1000;\n        int tokenCount = openAIModel.countTokens(prompt);\n\n        // Remove history messages to stay under token limit\n        while (history.getSize() > 1 && tokenCount > tokenLimit) {\n            history.remove(0);\n            prompt.remove(2);\n            tokenCount = openAIModel.countTokens(prompt);\n        }\n\n        return prompt;\n    }\n\n", "        while (history.getSize() > 1 && tokenCount > tokenLimit) {\n            history.remove(0);\n            prompt.remove(2);\n            tokenCount = openAIModel.countTokens(prompt);\n        }\n\n        return prompt;\n    }\n\n\n    public Response chat() {\n        Prompt seedInput = new Prompt.Builder(\"seed\").build();\n        return chat(seedInput.getContent(), false);\n    }\n", "    public Response chat() {\n        Prompt seedInput = new Prompt.Builder(\"seed\").build();\n        return chat(seedInput.getContent(), false);\n    }\n\n    public Response chat(String message) {\n        return chat(message, false);\n    }\n\n    /**\n     * The chat function is a method that performs a chat interaction between a user and an assistant. Here's a breakdown of what it does:\n     * If there is a staging tool available and the run_tool parameter is set to True, it runs the staging tool and processes the output. The assistant's response, the output of the tool, and any human feedback are stored in the memory.\n     * If there is a staging tool available but run_tool is False, it adds a system message to the history indicating that the user did not approve running the tool. The assistant's response and a corresponding message indicating that the user did not approve are stored in the memory.\n     * The get_full_prompt method is called to construct the prompt for the chat interaction. It retrieves relevant information from memory, adds system messages for the current header and the current time and date, adds previous history messages, adds user input (if provided), and removes excess messages if the token count exceeds the token limit.\n     * The chat method calls the chat function to generate a response based on the constructed prompt. The maximum number of tokens for the response is limited to the remaining token limit after accounting for the prompt's token count.\n     * The generated response is printed and stored in the assistant's history as a user message and an assistant message.\n     * If the generated response contains a valid JSON object with a \"name\" field, it is treated as a staging tool command. The staging tool and its response are stored for later processing.\n     * The response, either as a JSON object (if it contains a \"name\" field) or as a string, is returned from the chat function.\n     * Overall, the chat function orchestrates the chat interaction with the assistant, manages the staging tool, constructs the prompt, generates a response, and handles the storage and processing of the response.\n     * staging_response is a variable used in the chat function. It is used to store the response generated by a staging tool during a chat interaction. A staging tool is an external tool or process that can be run by the assistant to perform specific tasks or actions.\n     * In the context of the chat function, if there is a staging tool available and it is run during the chat interaction, the response generated by the staging tool is stored in the staging_response variable. The stored response is later used for further processing, such as storing it in the assistant's memory along with other relevant information.\n     * The staging_response variable is set to None initially and is assigned a value when a staging tool is run and produces a response.\n     */", "    public Response chat(String message, boolean runTool) {\n        if (this.stagingTool != null) {\n            if (runTool) {\n                if (this.stagingTool.get(\"name\").equals(\"task_complete\")) {\n                    message = \"\";\n                }\n                Object output = this.runStagingTool();\n                Prompt humanFeedbackPrompt = new Prompt.Builder(\"human_feedback\")\n                        .withRole(\"system\")\n                        .formatted(0, this.stagingResponse, output, message)\n                        .build();\n                this.memory.add(humanFeedbackPrompt.getContent());\n            } else {\n                Prompt noApprovePrompt = new Prompt.Builder(\"no_approve\")\n                        .withRole(\"system\")\n                        .formatted(0, this.stagingTool)\n                        .build();\n                this.history.addNewPrompt(noApprovePrompt.getPrompt());\n                Prompt noApproveReplayPrompt = new Prompt.Builder(\"no_approve_reply\")\n                        .withRole(\"system\")\n                        .formatted(0, this.stagingResponse, message)\n                        .build();\n                this.memory.add(noApproveReplayPrompt.getContent());\n            }\n            this.stagingTool = null;\n            this.stagingResponse = null;\n        }\n        List<Map<String, String>> fullPrompt = this.getFullPrompt(message);\n        int tokenCount = openAIModel.countTokens(fullPrompt);\n        int tokenLimit = openAIModel.getTokenLimit();\n        String resp = openAIModel.chat(fullPrompt, tokenLimit - tokenCount);\n        System.out.println(\"=========\");\n        System.out.println(resp);\n        System.out.println(\"=========\");\n        this.history.addNewPrompt(\"user\", message);\n        this.history.addNewPrompt(\"assistant\", resp);\n\n        Response response = Response.getResponseFromRaw(resp);", "        if (response != null) {\n            JsonNode parsedResp = response.getParsedResp();\n\n            JsonNode commandArgsNode = parsedResp.get(\"command\").get(\"args\");\n            String commandArgs = commandArgsNode.toString();\n            String commandName = parsedResp.get(\"command\").get(\"name\").asText();\n\n            this.stagingTool = new HashMap<>();\n            this.stagingTool.put(\"args\", commandArgs);\n            this.stagingTool.put(\"name\", commandName);\n\n            this.stagingResponse = parsedResp;\n            return response;\n        }\n\n        return null;\n    }\n", "    public String lastUserInput() {\n        for (int i = history.getSize() - 1; i >= 0; i--) {\n            Map<String, String> msg = history.getValue(i);\n            if (\"user\".equals(msg.get(\"role\"))) {\n                return msg.get(\"content\");\n            }\n        }\n        return \"\";\n    }\n\n    public String lastAgentResponse() {", "    public String lastAgentResponse() {\n        for (int i = history.getSize() - 1; i >= 0; i--) {\n            Map<String, String> msg = history.getValue(i);\n            if (\"assistant\".equals(msg.get(\"role\"))) {\n                return msg.get(\"content\");\n            }\n        }\n        return \"\";\n    }\n\n    public Object runStagingTool() {", "    public Object runStagingTool() {\n        if (!this.stagingTool.containsKey(\"name\")) {\n            Prompt noCommandPrompt = new Prompt.Builder(\"no_command\")\n                    .withRole(\"system\")\n                    .build();\n            this.history.addNewPrompt(noCommandPrompt.getPrompt());\n            return null;\n        }\n        if (this.stagingTool.get(\"name\").equals(\"task_complete\")) {\n            return new HashMap<String, Boolean>() {{\n                put(\"success\", true);\n            }};\n        }", "        if (this.stagingTool.get(\"name\").equals(\"task_complete\")) {\n            return new HashMap<String, Boolean>() {{\n                put(\"success\", true);\n            }};\n        }\n        if (!this.stagingTool.containsKey(\"args\")) {\n            Prompt argsNotProvidedPrompt = new Prompt.Builder(\"arg_missing\")\n                    .withRole(\"system\")\n                    .build();\n            this.history.addNewPrompt(argsNotProvidedPrompt.getPrompt());\n            return null;\n        }\n        String toolId = (String) this.stagingTool.get(\"name\");\n        String argsJson = (String) this.stagingTool.get(\"args\");\n\n        Map<String, String> args = null;", "        try {\n            args = mapper.readValue(argsJson, new TypeReference<Map<String, String>>() {});\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        boolean found = false;\n        Object resp = null;\n        for (Tool tool : this.tools) {\n            if (tool.getId().equals(toolId)) {\n                found = true;\n                resp = tool.run(args);\n                Prompt responsePrompt = new Prompt.Builder(\"response\")\n                        .formatted(0, toolId, new Gson().toJson(resp))\n                        .withRole(\"system\")\n                        .build();\n                this.history.addNewPrompt(responsePrompt.getPrompt());\n                break;\n            }\n        }", "        for (Tool tool : this.tools) {\n            if (tool.getId().equals(toolId)) {\n                found = true;\n                resp = tool.run(args);\n                Prompt responsePrompt = new Prompt.Builder(\"response\")\n                        .formatted(0, toolId, new Gson().toJson(resp))\n                        .withRole(\"system\")\n                        .build();\n                this.history.addNewPrompt(responsePrompt.getPrompt());\n                break;\n            }\n        }", "        if (!found) {\n            Prompt commandMissing = new Prompt.Builder(\"command_missing\")\n                    .formatted(0, toolId)\n                    .withRole(\"system\")\n                    .build();\n            this.history.addNewPrompt(commandMissing.getPrompt());\n            return null;\n        }\n        return resp;\n    }\n", "    public void clearState() {\n        history.clear();\n        memory.clear();\n    }\n\n    public String headerPrompt() {\n        ArrayList<String> prompt = new ArrayList<>();\n        prompt.add(personaPrompt());\n        if (!goals.isEmpty()) {\n            prompt.add(goalsPrompt());\n        }\n        prompt.add(constraintsPrompt());\n", "        if (!goals.isEmpty()) {\n            prompt.add(goalsPrompt());\n        }\n        prompt.add(constraintsPrompt());\n\n        if (tools != null && !tools.isEmpty()) {\n            prompt.add(toolsPrompt());\n        }\n        prompt.add(resourcesPrompt());\n        prompt.add(evaluationPrompt());\n        prompt.add(defaultResponsePrompt());\n        return newLineDelimited(prompt);\n    }\n", "    public String defaultResponsePrompt() {\n        String defaultResponse = Prompt.getDefaultResponse();\n        Prompt defaultResponsePrompt = new Prompt.Builder(\"use_only_defined_format\")\n                .formatted(0, defaultResponse)\n                .build();\n        return defaultResponsePrompt.getContent();\n    }\n    public String personaPrompt() {\n        Prompt personaPrompt = new Prompt.Builder(\"persona\")\n                .formatted(0, name, description)\n                .build();\n        return personaPrompt.getContent();\n    }\n", "    public String goalsPrompt() {\n        ArrayList<String> prompt = new ArrayList<>();\n        prompt.add(\"GOALS:\");\n        for (int i = 0; i < goals.size(); i++) {\n            prompt.add((i + 1) + \". \" + goals.get(i));\n        }\n        return newLineDelimited(prompt);\n    }\n\n    public String constraintsPrompt() {\n        Prompt constraintsPrompt = new Prompt.Builder(\"constraints\")\n                .build();\n        return constraintsPrompt.getContent();\n    }\n", "    public String constraintsPrompt() {\n        Prompt constraintsPrompt = new Prompt.Builder(\"constraints\")\n                .build();\n        return constraintsPrompt.getContent();\n    }\n\n    public String resourcesPrompt() {\n        Prompt resourcesPrompt = new Prompt.Builder(\"resources\")\n                .build();\n        return resourcesPrompt.getContent();\n    }\n", "    public String evaluationPrompt() {\n        Prompt evaluationPrompt = new Prompt.Builder(\"evaluation\")\n                .delimited()\n                .build();\n        return evaluationPrompt.getContent();\n    }\n\n    /**\n     * The given code snippet represents a method called tools_prompt() that generates a prompt for a list of tools in a specific format. Here's a breakdown of what the code does:\n     * It initializes an empty list called prompt to store the lines of the prompt.\n     * It appends the string \"Commands:\" as the first line of the prompt.\n     * It iterates over the list of tools (self.tools) and performs the following steps for each tool:\n     * a. Retrieves the index i and the tool itself from the enumeration (enumerate(self.tools)).\n     * b. Sets the agent property of the tool to the current instance of the class (tool.agent = self).\n     * c. Retrieves the prompt specific to the tool using the prompt() method of the tool (tool.prompt()).\n     * d. Adds a line to the prompt list in the format \"{index + 1}. {tool prompt}\" (e.g., \"1. Tool prompt\").\n     * It creates a dictionary named task_complete_command with the following key-value pairs:\n     * a. \"name\" property set to \"task_complete\".\n     * b. \"description\" property set to \"Execute this command when all given tasks are completed.\"\n     * c. \"args\" property set to an empty dictionary {}.\n     * d. \"response_format\" property set to {\"success\": \"true\"}.\n     * Adds a line to the prompt list in the format \"{toolIndex + 2}. {JSON representation of task_complete_command}\" (e.g., \"2. {JSON representation of task_complete_command}\").\n     * Finally, it joins all the lines in the prompt list using the newline character \"\\n\" and appends an additional newline character at the end.\n     * The method returns the generated prompt as a String.\n     * In summary, the tools_prompt() method generates a prompt that lists available commands/tools, their descriptions, and an additional command called \"task_complete\" with a predefined response format.\n     */", "    public String toolsPrompt() {\n        List<String> prompt = new ArrayList<>();\n        prompt.add(\"Commands:\");\n        for (int i = 0; i < this.tools.size(); i++) {\n            Tool tool = this.tools.get(i);\n            tool.setAgent(this);\n            prompt.add((i + 1) + \". \" + tool.prompt());\n        }\n        JSONObject taskCompleteCommand = new JSONObject();\n        taskCompleteCommand.put(\"name\", \"task_complete\");\n        taskCompleteCommand.put(\"description\", \"Execute this command when all given tasks are completed.\");\n        taskCompleteCommand.put(\"args\", new JSONObject());\n        JSONObject responseFormat = new JSONObject();\n        responseFormat.put(\"success\", \"true\");\n        taskCompleteCommand.put(\"response_format\", responseFormat);\n        prompt.add((this.tools.size() + 1) + \". \" + taskCompleteCommand);\n        return newLineDelimited(prompt);\n    }\n\n    private static String newLineDelimited(List<String> prompt) {\n        return String.join(\"\\n\", prompt) + \"\\n\";\n    }\n", "    public void cli() {\n        // implementation of the command-line interface for the agent\n        Cli cli = new Cli(this);\n        cli.run();\n    }\n\n    public String getName() {\n        return name;\n    }\n}"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/Summarizer.java", "chunked_list": ["package com.frazik.instructgpt;\n\n/*\nAdapted from Auto-GPT (https://github.com/Significant-Gravitas/Auto-GPT)\n*/\n\nimport com.frazik.instructgpt.models.OpenAIModel;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Summarizer {\n    private String model;\n    private OpenAIModel openAIModel;\n\n    public Summarizer(String model) {\n        this.model = model;\n    }\n", "    public String summarize(String text, String query) {\n        List<String> summaries = new ArrayList<>();\n        for (String chunk : chunkText(text)) {\n            summaries.add(chat(new String[]{prompt(chunk, query)}, 300));\n        }\n        String summary = String.join(\"\\n\", summaries);\n        while (summary.length() > Math.pow(2, 13)) {\n            summaries = new ArrayList<>();\n            for (String chunk : chunkText(summary)) {\n                summaries.add(chat(new String[]{prompt(chunk, query)}, 300));\n            }\n            summary = String.join(\"\\n\", summaries);\n        }\n        return summary;\n    }\n\n    private List<String> chunkText(String text) {\n        String[] paras = text.split(\"\\n\");\n        int currLen = 0;\n        List<String> currChunk = new ArrayList<>();\n        List<String> chunks = new ArrayList<>();", "            for (String chunk : chunkText(summary)) {\n                summaries.add(chat(new String[]{prompt(chunk, query)}, 300));\n            }\n            summary = String.join(\"\\n\", summaries);\n        }\n        return summary;\n    }\n\n    private List<String> chunkText(String text) {\n        String[] paras = text.split(\"\\n\");\n        int currLen = 0;\n        List<String> currChunk = new ArrayList<>();\n        List<String> chunks = new ArrayList<>();", "        for (String para : paras) {\n            int newLen = currLen + para.length() + 1;\n            if (newLen <= Math.pow(2, 12)) {\n                currChunk.add(para);\n                currLen = newLen;\n            } else {\n                chunks.add(String.join(\"\\n\", currChunk));\n                currChunk = new ArrayList<>();\n                currChunk.add(para);\n                currLen = para.length() + 1;\n            }\n        }", "        if (!currChunk.isEmpty()) {\n            chunks.add(String.join(\"\\n\", currChunk));\n        }\n        return chunks;\n    }\n\n    private String prompt(String text, String query) {\n        return \"{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"\\\"\\\"\"\n                + text\n                + \"\\\"\\\"\\\" Using the above text, please answer the following question: \\\"\"\n                + query\n                + \"\\\" -- if the question cannot be answered using the text, please summarize the text.\\\"}\";\n    }\n\n    private String chat(String[] prompts, int maxTokens) {\n        return openAIModel.chat(prompts);\n    }\n}\n\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/tools/Tool.java", "chunked_list": ["package com.frazik.instructgpt.tools;\n\nimport com.frazik.instructgpt.Agent;\nimport com.google.gson.Gson;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;", "import java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic abstract class Tool {\n    public String getId() {\n        return String.join(\"_\", camelCaseSplit(this.getClass().getSimpleName())).toLowerCase();\n    }\n\n    public String getDesc() {\n        return String.join(\" \", camelCaseSplit(this.getClass().getSimpleName()));\n    }\n", "    public String getDesc() {\n        return String.join(\" \", camelCaseSplit(this.getClass().getSimpleName()));\n    }\n\n    public abstract Map<String, String> getArgs();\n\n    public abstract Map<String, Object> run(Map<String, String> kwargs);\n\n    public abstract Map<String, String> getResp();\n\n    private Agent agent;\n", "    public abstract Map<String, String> getResp();\n\n    private Agent agent;\n\n    public String prompt() {\n        Map<String, Object> promptMap = new HashMap<>();\n        promptMap.put(\"name\", this.getId());\n        promptMap.put(\"description\", this.getDesc());\n        promptMap.put(\"args\", this.getArgs());\n        promptMap.put(\"response_format\", this.getResp());\n        return new Gson().toJson(promptMap);\n    }\n", "    public void setAgent(Agent agent) {\n        this.agent = agent;\n    }\n\n    private List<String> camelCaseSplit(String str) {\n        List<String> words = new ArrayList<>();\n        Matcher matcher = Pattern.compile(\"[A-Z](?:[a-z]+|[A-Z]*(?=[A-Z]|$))\").matcher(str);\n        while (matcher.find()) {\n            words.add(matcher.group());\n        }\n        return words;\n    }\n}\n\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/tools/Browser.java", "chunked_list": ["package com.frazik.instructgpt.tools;\n\nimport com.frazik.instructgpt.Summarizer;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.NoSuchWindowException;", "import org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.NoSuchWindowException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\nimport java.io.IOException;\nimport java.time.Duration;", "import java.io.IOException;\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Browser extends Tool {\n    private final ChromeOptions options;\n    private WebDriver driver;\n    private final Summarizer summarizer;\n\n    public Browser() {\n        super();\n        options = new ChromeOptions();\n        options.addArguments(\"user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.49 Safari/537.36\");\n        // options.setHeadless(true);\n        summarizer = new Summarizer(\"model\");\n        Runtime.getRuntime().addShutdownHook(new Thread() {", "            public void run() {\n                close();\n            }\n        });\n    }\n\n    private void initDriver() {\n        close();\n        driver = new ChromeDriver(options);\n    }\n\n    private String get(String url) {", "        if (driver == null) {\n            initDriver();\n        }\n        try {\n            driver.get(url);\n        } catch (NoSuchWindowException e) {\n            initDriver();\n            driver.get(url);\n        }\n        Duration duration = Duration.ofMillis(10000);\n        WebDriverWait wait = new WebDriverWait(driver, duration);\n        wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName(\"body\")));\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        return js.executeScript(\"return document.body.outerHTML;\").toString();\n    }\n\n    private List<Map<String, String>> extractLinksFromSoup(Document soup) {\n        List<Map<String, String>> links = new ArrayList<Map<String, String>>();\n        Elements linkElements = soup.select(\"a[href]\");", "        for (Element linkElement : linkElements) {\n            Map<String, String> link = new HashMap<String, String>();\n            link.put(\"text\", linkElement.text());\n            link.put(\"url\", linkElement.absUrl(\"href\"));\n            links.add(link);\n        }\n        return links;\n    }\n\n    private String extractTextFromSoup(Document soup) {\n        List<String> chunks = new ArrayList<String>();", "        for (Element element : soup.select(\"*\")) {\n            if (!element.tagName().equals(\"script\") && !element.tagName().equals(\"style\")) {\n                chunks.add(element.text());\n            }\n        }\n        return String.join(\"\\n\", chunks);\n    }\n\n    @Override\n    public String getDesc() {\n        return \"Scrape answers for a question in a given web page\";\n    }\n\n    @Override\n    public Map<String, String> getArgs() {\n        Map<String, String> args = new HashMap<String, String>();\n        args.put(\"url\", \"URL of the website to scrape\");\n        args.put(\"question\", \"The question\");\n        return args;\n    }\n\n    @Override\n    public Map<String, Object> run(Map<String, String> kwargs) {\n        return null;\n    }\n\n    @Override\n    public Map<String, String> getResp() {\n        Map<String, String> resp = new HashMap<String, String>();\n        resp.put(\"text\", \"Summary of relevant text scraped from the website\");\n        resp.put(\"links\", \"list of links from the website, where each item is in the form `[link_text,link_url]`\");\n        return resp;\n    }\n", "    public String getDesc() {\n        return \"Scrape answers for a question in a given web page\";\n    }\n\n    @Override\n    public Map<String, String> getArgs() {\n        Map<String, String> args = new HashMap<String, String>();\n        args.put(\"url\", \"URL of the website to scrape\");\n        args.put(\"question\", \"The question\");\n        return args;\n    }\n\n    @Override\n    public Map<String, Object> run(Map<String, String> kwargs) {\n        return null;\n    }\n\n    @Override\n    public Map<String, String> getResp() {\n        Map<String, String> resp = new HashMap<String, String>();\n        resp.put(\"text\", \"Summary of relevant text scraped from the website\");\n        resp.put(\"links\", \"list of links from the website, where each item is in the form `[link_text,link_url]`\");\n        return resp;\n    }\n", "    public void close() {\n        try {\n            if (this.driver != null) {\n                this.driver.quit();\n            }\n        } catch (Exception e) {\n            // Handle exception\n        }\n    }\n\n    public Map<String, Object> run(String url, String question) {\n        Map<String, Object> result = new HashMap<>();\n        Document doc = null;", "        try {\n            doc = Jsoup.connect(url).get();\n        } catch (IOException e) {\n            // Handle exception\n        }\n        if (doc != null) {\n            doc.select(\"script, style\").remove();\n            Elements links = doc.select(\"a[href]\");\n            List<Map<String, String>> extractedLinks = new ArrayList<>();\n            for (Element link : links) {\n                Map<String, String> linkMap = new HashMap<>();\n                linkMap.put(\"text\", link.text());\n                linkMap.put(\"href\", link.attr(\"href\"));\n                extractedLinks.add(linkMap);", "            for (Element link : links) {\n                Map<String, String> linkMap = new HashMap<>();\n                linkMap.put(\"text\", link.text());\n                linkMap.put(\"href\", link.attr(\"href\"));\n                extractedLinks.add(linkMap);\n                if (extractedLinks.size() >= 5) {\n                    break;\n                }\n            }\n            String text = doc.text();\n            String[] lines = text.split(\"\\\\r?\\\\n\");\n            List<String> chunks = new ArrayList<>();", "            for (String line : lines) {\n                String[] phrases = line.split(\"\\\\s{2,}\");\n                for (String phrase : phrases) {\n                    chunks.add(phrase.trim());\n                }\n            }\n            String extractedText = String.join(\"\\n\", chunks);\n            String summary = this.summarizer.summarize(extractedText, question);\n            result.put(\"text\", summary);\n            result.put(\"links\", extractedLinks);\n        }\n        return result;\n    }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/tools/GoogleSearch.java", "chunked_list": ["package com.frazik.instructgpt.tools;\n\nimport com.google.api.services.customsearch.v1.Customsearch;\nimport com.google.api.services.customsearch.v1.CustomsearchRequestInitializer;\nimport com.google.api.services.customsearch.v1.model.Result;\nimport com.google.api.services.customsearch.v1.model.Search;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;", "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GoogleSearch extends Tool {\n    private final String googleApiKey = System.getenv(\"GOOGLE_API_KEY\");\n    private final String googleCxId = System.getenv(\"GOOGLE_CX_ID\");\n\n    @Override\n    public Map<String, String> getArgs() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"query\", \"The query to search for\");\n        return map;\n    }\n\n    @Override\n    public Map<String, String> getResp() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"results\", \"A list of results. Each result is of the form [title, link, description]\");\n        return map;\n    }\n\n    private List<List<String>> googleSearch(String query, int numResults) {", "        try {\n            Customsearch customsearch = new Customsearch.Builder(\n                    new com.google.api.client.http.javanet.NetHttpTransport(),\n                    new com.google.api.client.json.jackson2.JacksonFactory(),\n                    null)\n                    .setApplicationName(\"Google Search API\")\n                    .setGoogleClientRequestInitializer(new CustomsearchRequestInitializer(googleApiKey))\n                    .build();\n\n            Customsearch.Cse.List list = customsearch.cse().list().setQ(query).setCx(googleCxId).setNum(numResults).setFields(\"items(title, link, snippet)\");\n            Search results = list.execute();\n\n            List<List<String>> resultList = new ArrayList<>();", "            for (Result result : results.getItems()) {\n                String snippet = result.getSnippet();\n                List<String> innerList = new ArrayList<>();\n                innerList.add(result.getTitle());\n                innerList.add(result.getLink());\n                innerList.add(snippet == null ? \"\" : snippet);\n                resultList.add(innerList);\n            }\n            return resultList;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public Map<String, Object> run(Map<String, String> args) {\n        String query = args.get(\"query\");\n        int numResults = args.get(\"numResults\") == null ? 8 : Integer.parseInt(args.get(\"numResults\"));\n        Map<String, Object> result = new HashMap<>();", "        if (googleApiKey != null && !googleApiKey.trim().isEmpty() && !googleApiKey.equals(\"your-google-api-key\")) {\n            result.put(\"results\", googleSearch(query, numResults));\n        } else {\n            //result.put(\"results\", duckduckgoSearch(query, numResults));\n        }\n        return result;\n    }\n\n}\n\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/prompts/Prompt.java", "chunked_list": ["package com.frazik.instructgpt.prompts;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.google.gson.Gson;\nimport org.openqa.selenium.json.TypeToken;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;", "import java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\npublic class Prompt {\n    private final String role;\n    private final String content;\n    private static final Map<String, List<String>> promptsBundle;\n    private static final Map<String, Map<String, String>> defaultResponsesJson;\n    private static final ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\n\n    static {\n        // Use generic types to prepare for future expansion\n        TypeToken<Map<String, List<String>>> promptsToken = new TypeToken<Map<String, List<String>>>() {};\n        promptsBundle = readPromptJson(promptsToken, \"prompts_en.json\");\n        // Use generic types to prepare for future expansion\n        TypeToken<Map<String, Map<String, String>>> defaultResponsesToken =\n                new TypeToken<Map<String, Map<String, String>>>() {};\n        defaultResponsesJson = readPromptJson(defaultResponsesToken, \"default_response_en.json\");\n    }\n    \n    public Prompt(String role, String content) {\n        this.role = role;\n        this.content = content;\n    }\n", "    public String getContent() {\n        return content;\n    }\n\n    public static String getDefaultResponse() {\n        try {\n            return objectMapper.writeValueAsString(defaultResponsesJson);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public Map<String, String> getPrompt() {\n        Map<String, String> prompt = new HashMap<>();\n        prompt.put(\"role\", role);\n        prompt.put(\"content\", content);\n        return prompt;\n    }\n", "    public static class Builder\n    {\n        private final List<String> prompts;\n        private String role;\n        public Builder(String key) {\n            //deep copy of prompts\n            prompts = new ArrayList<>(promptsBundle.get(key));\n        }\n\n        public Builder numberList() {\n            // Append a number to each prompt", "        public Builder numberList() {\n            // Append a number to each prompt\n            for (int i = 1; i < prompts.size(); i++) {\n                prompts.set(i, i + \". \" + prompts.get(i));\n            }\n            return this;\n        }\n\n        public Builder delimited() {\n            // Append a newline to each prompt\n            prompts.replaceAll(s -> s + \"\\n\");\n            return this;\n        }\n", "        public Builder delimited() {\n            // Append a newline to each prompt\n            prompts.replaceAll(s -> s + \"\\n\");\n            return this;\n        }\n\n        public Builder formatted(int i, Object... args) {\n            // Format the prompt\n            prompts.set(i, String.format(prompts.get(i), args));\n            return this;\n        }\n", "        public Builder formattedWithCurrentTime(int i) {\n            String currentTime  = ZonedDateTime.now().format(DateTimeFormatter.ofPattern(\"EEE MMM dd HH:mm:ss yyyy\"));\n            return formatted(i, currentTime);\n        }\n        public Builder withRole(String role) {\n            this.role = role;\n            return this;\n        }\n\n        public Prompt build() {\n            String content = String.join(\"\", prompts);\n            return new Prompt(role, content);\n        }\n    }\n\n    private static <T> T readPromptJson(TypeToken<T> token, String jsonFileName) {", "        public Prompt build() {\n            String content = String.join(\"\", prompts);\n            return new Prompt(role, content);\n        }\n    }\n\n    private static <T> T readPromptJson(TypeToken<T> token, String jsonFileName) {\n        try {\n            InputStream inputStream = Prompt.class.getClassLoader().getResourceAsStream(jsonFileName);\n\n            if (inputStream == null) {\n                throw new FileNotFoundException(jsonFileName + \" file not found.\");\n            }\n\n            InputStreamReader reader = new InputStreamReader(inputStream);\n            return new Gson().fromJson(reader, token.getType());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error reading \" + jsonFileName, e);\n        }\n    }\n}\n", "            if (inputStream == null) {\n                throw new FileNotFoundException(jsonFileName + \" file not found.\");\n            }\n\n            InputStreamReader reader = new InputStreamReader(inputStream);\n            return new Gson().fromJson(reader, token.getType());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error reading \" + jsonFileName, e);\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/prompts/PromptUtils.java", "chunked_list": ["package com.frazik.instructgpt.prompts;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class PromptUtils {\n\n    public static Map<String, String> buildPrompts(String role, String content) {\n        Map<String, String> prompt = new HashMap<>();\n        prompt.put(\"role\", role);\n        prompt.put(\"content\", content);\n        return prompt;\n    }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/prompts/PromptHistory.java", "chunked_list": ["package com.frazik.instructgpt.prompts;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@Getter", "\n@Getter\n@Setter\npublic class PromptHistory {\n\n    private final List<Map<String, String>> values;\n\n    public PromptHistory() {\n        this.values = new ArrayList<>();\n    }\n", "    public int getSize() {\n        return values.size();\n    }\n\n    public Map<String, String> getValue(int i) {\n        return values.get(i);\n    }\n\n    public void clear() {\n        values.clear();\n    }\n", "    public void clear() {\n        values.clear();\n    }\n\n    public void remove(int i) {\n        this.values.remove(i);\n    }\n\n    public String subListToString(int start, int end) {\n        return listToString(values.subList(start, end));\n    }\n", "    public String subListToString(int start, int end) {\n        return listToString(values.subList(start, end));\n    }\n\n    public void addNewPrompt(String role, String content) {\n        this.values.add(PromptUtils.buildPrompts(role, content));\n    }\n\n    public void addNewPrompt(Map<String, String> prompt) {\n        this.values.add(prompt);\n    }\n", "    public void addNewPrompt(Map<String, String> prompt) {\n        this.values.add(prompt);\n    }\n\n    public static String listToString(List<Map<String, String>> values) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\\n\");\n\n        for (Map<String, String> map : values) {\n            sb.append(\"  {\\n\");\n            for (Map.Entry<String, String> entry : map.entrySet()) {\n                String key = entry.getKey();\n                String value = entry.getValue();\n                sb.append(\"    \").append(key).append(\": \").append(value).append(\",\\n\");\n            }\n            sb.append(\"  },\\n\");\n        }\n\n        sb.append(\"]\\n\");\n\n        return sb.toString();\n    }\n\n}\n", "        for (Map<String, String> map : values) {\n            sb.append(\"  {\\n\");\n            for (Map.Entry<String, String> entry : map.entrySet()) {\n                String key = entry.getKey();\n                String value = entry.getValue();\n                sb.append(\"    \").append(key).append(\": \").append(value).append(\",\\n\");\n            }\n            sb.append(\"  },\\n\");\n        }\n\n        sb.append(\"]\\n\");\n\n        return sb.toString();\n    }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/auto/Cli.java", "chunked_list": ["package com.frazik.instructgpt.auto;\n\nimport com.frazik.instructgpt.Agent;\nimport com.frazik.instructgpt.response.Response;\nimport com.frazik.instructgpt.response.Thought;\n\nimport java.util.Scanner;\n\npublic class Cli {\n    private Agent agent;\n    private Scanner scanner;\n\n    public Cli(Agent agent) {\n        this.agent = agent;\n        this.scanner = new Scanner(System.in);\n    }\n", "public class Cli {\n    private Agent agent;\n    private Scanner scanner;\n\n    public Cli(Agent agent) {\n        this.agent = agent;\n        this.scanner = new Scanner(System.in);\n    }\n\n    public void run() {\n        Response resp = agent.chat();\n", "    public void run() {\n        Response resp = agent.chat();\n\n        while (true) {\n            if (resp.hasThoughts()) {\n                Thought thoughts = resp.getThoughts();\n                if (thoughts.hasText()) {\n                    System.out.println(agent.getName() + \": \" + thoughts.getText());\n                }\n                if (thoughts.hasReasoning()) {\n                    System.out.println(agent.getName() + \": Reasoning: \" + thoughts.getReasoning());\n                }", "                if (thoughts.hasReasoning()) {\n                    System.out.println(agent.getName() + \": Reasoning: \" + thoughts.getReasoning());\n                }\n                if (thoughts.hasPlan()) {\n                    for (String plan : thoughts.getPlan().split(\"\\n\")) {\n                        System.out.println(agent.getName() + \": \" + plan);\n                    }\n                }\n                if (thoughts.hasCriticism()) {\n                    System.out.println(agent.getName() + \": Criticism: \" + thoughts.getCriticism());\n                }", "                if (thoughts.hasCriticism()) {\n                    System.out.println(agent.getName() + \": Criticism: \" + thoughts.getCriticism());\n                }\n                if (thoughts.hasSpeak()) {\n                    System.out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());\n                }\n            }\n            if (resp.hasCommand()) {\n                System.out.println(\"Agent wants to execute the following command: \\n\" + resp.getCommand());\n                while (true) {\n                    System.out.print(\"(Y/N)? \");\n                    String yn = scanner.nextLine().toLowerCase().trim();", "                while (true) {\n                    System.out.print(\"(Y/N)? \");\n                    String yn = scanner.nextLine().toLowerCase().trim();\n                    if (\"y\".equals(yn) || \"n\".equals(yn)) {\n                        if (\"y\".equals(yn)) {\n                            resp = agent.chat(\"GENERATE NEXT COMMAND JSON\", true);\n                        } else {\n                            System.out.print(\"Enter feedback (Why not execute the command?): \");\n                            String feedback = scanner.nextLine();\n                            resp = agent.chat(feedback, false);\n                        }\n                        break;\n                    }\n                }\n            }\n            System.out.print(\"Enter message: \");\n            String inp = scanner.nextLine();", "            if (\"exit\".equalsIgnoreCase(inp.trim())) {\n                return;\n            }\n            resp = agent.chat(inp);\n        }\n    }\n}\n\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/response/Response.java", "chunked_list": ["package com.frazik.instructgpt.response;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.Getter;\n\n@Getter\npublic class Response {\n    private final Thought thoughts;\n    private final String command;\n\n    private final JsonNode parsedResp;\n\n    private static final ObjectMapper mapper = new ObjectMapper();\n\n    public Response(Thought thoughts, String command, JsonNode parsedResp) {\n        this.thoughts = thoughts;\n        this.command = command;\n        this.parsedResp = parsedResp;\n    }\n", "    public boolean hasThoughts() {\n        return thoughts != null;\n    }\n\n    public boolean hasCommand() {\n        return command != null;\n    }\n\n    public static Response getResponseFromRaw(String rawResponse) {\n        JsonNode parsedResp = loadJson(rawResponse);\n", "    public static Response getResponseFromRaw(String rawResponse) {\n        JsonNode parsedResp = loadJson(rawResponse);\n\n        if (parsedResp == null) {\n            return null;\n        }\n\n        if (parsedResp.has(\"name\")) {\n            parsedResp = mapper.createObjectNode().set(\"command\", parsedResp);\n        }\n\n        // Parse the 'thoughts' and 'command' parts of the response into objects", "        if (parsedResp.has(\"thoughts\") && parsedResp.has(\"command\")) {\n            JsonNode thoughtsNode = parsedResp.get(\"thoughts\");\n            Thought thoughts = new Thought(\n                    thoughtsNode.get(\"text\").asText(),\n                    thoughtsNode.get(\"reasoning\").asText(),\n                    thoughtsNode.get(\"plan\").asText(),\n                    thoughtsNode.get(\"criticism\").asText(),\n                    thoughtsNode.get(\"speak\").asText()\n            );\n            JsonNode commandNode = parsedResp.get(\"command\");\n            return new Response(thoughts, commandNode.get(\"name\").asText(), parsedResp);\n        }\n        return null;\n    }\n\n    private static JsonNode loadJson(String s) {", "        if (!s.contains(\"{\") || !s.contains(\"}\")) {\n            return null;\n        }\n        try {\n            return mapper.readTree(s);\n        } catch (Exception exc1) {\n            int startIndex = s.indexOf(\"{\");\n            int endIndex = s.indexOf(\"}\") + 1;\n            String subString = s.substring(startIndex, endIndex);\n            try {\n                return mapper.readTree(subString);\n            } catch (Exception exc2) {\n                subString += \"}\";", "            try {\n                return mapper.readTree(subString);\n            } catch (Exception exc2) {\n                subString += \"}\";\n                try {\n                    return mapper.readTree(subString);\n                } catch (Exception exc3) {\n                    subString = subString.replace(\"'\", \"\\\"\");\n                    try {\n                        return mapper.readTree(subString);\n                    } catch (Exception exc4) {\n                        return null;\n                    }\n                }\n            }\n        }\n    }\n}\n", "                    try {\n                        return mapper.readTree(subString);\n                    } catch (Exception exc4) {\n                        return null;\n                    }\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/response/Thought.java", "chunked_list": ["package com.frazik.instructgpt.response;\n\npublic class Thought {\n    private String text;\n    private String reasoning;\n    private String plan;\n    private String criticism;\n    private String speak;\n\n    public Thought(String text, String reasoning, String plan, String criticism, String speak) {\n        this.text = text;\n        this.reasoning = reasoning;\n        this.plan = plan;\n        this.criticism = criticism;\n        this.speak = speak;\n    }\n", "    public boolean hasText() {\n        return text != null;\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    public boolean hasReasoning() {\n        return reasoning != null;\n    }\n", "    public boolean hasReasoning() {\n        return reasoning != null;\n    }\n\n    public String getReasoning() {\n        return reasoning;\n    }\n\n    public boolean hasPlan() {\n        return plan != null;\n    }\n", "    public boolean hasPlan() {\n        return plan != null;\n    }\n\n    public String getPlan() {\n        return plan;\n    }\n\n    public boolean hasCriticism() {\n        return criticism != null;\n    }\n", "    public boolean hasCriticism() {\n        return criticism != null;\n    }\n\n    public String getCriticism() {\n        return criticism;\n    }\n\n    public boolean hasSpeak() {\n        return speak != null;\n    }\n", "    public boolean hasSpeak() {\n        return speak != null;\n    }\n\n    public String getSpeak() {\n        return speak;\n    }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/models/OpenAIModel.java", "chunked_list": ["package com.frazik.instructgpt.models;\n\nimport com.knuddels.jtokkit.Encodings;\nimport com.knuddels.jtokkit.api.Encoding;\nimport com.knuddels.jtokkit.api.EncodingRegistry;\nimport com.knuddels.jtokkit.api.ModelType;\nimport com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.service.OpenAiService;", "import com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.service.OpenAiService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class OpenAIModel extends Model {\n    private static final Logger logger = LoggerFactory.getLogger(OpenAIModel.class);\n    private final String model;\n    private final String apiKey;\n    private final Encoding encoding;\n\n    public OpenAIModel(String model) {\n        this.model = model;\n        this.apiKey = System.getenv(\"OPENAI_API_KEY\");\n        EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\n        this.encoding = registry.getEncodingForModel(ModelType.GPT_3_5_TURBO);\n    }\n\n    // Converts List<Map<String, String>> to List<ChatMessage>\n    private static List<ChatMessage> toChatMessages(List<Map<String, String>> prompt) {\n        List<ChatMessage> chatMessages = new ArrayList<>();", "import java.util.Map;\n\npublic class OpenAIModel extends Model {\n    private static final Logger logger = LoggerFactory.getLogger(OpenAIModel.class);\n    private final String model;\n    private final String apiKey;\n    private final Encoding encoding;\n\n    public OpenAIModel(String model) {\n        this.model = model;\n        this.apiKey = System.getenv(\"OPENAI_API_KEY\");\n        EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\n        this.encoding = registry.getEncodingForModel(ModelType.GPT_3_5_TURBO);\n    }\n\n    // Converts List<Map<String, String>> to List<ChatMessage>\n    private static List<ChatMessage> toChatMessages(List<Map<String, String>> prompt) {\n        List<ChatMessage> chatMessages = new ArrayList<>();", "        for (Map<String, String> message : prompt) {\n            chatMessages.add(new ChatMessage(message.get(\"role\"), message.get(\"content\")));\n        }\n        return chatMessages;\n    }\n\n    public String chat(List<Map<String, String>> messages, Integer maxTokens) {\n        return chat(toChatMessages(messages), maxTokens, 0.8);\n    }\n\n    public String chat(String[] prompts) {\n        List<ChatMessage> chatMessages = new ArrayList<>();", "    public String chat(String[] prompts) {\n        List<ChatMessage> chatMessages = new ArrayList<>();\n        for (String prompt : prompts) {\n            chatMessages.add(new ChatMessage(\"user\", prompt));\n        }\n        return chat(chatMessages, 100, 0.8);\n    }\n\n    @Override\n    public String chat(List<ChatMessage> messages, Integer maxTokens, Double temperature) {\n        OpenAiService openAiService = new OpenAiService(apiKey, Duration.ofSeconds(55));\n\n        int numRetries = 3;", "    public String chat(List<ChatMessage> messages, Integer maxTokens, Double temperature) {\n        OpenAiService openAiService = new OpenAiService(apiKey, Duration.ofSeconds(55));\n\n        int numRetries = 3;\n        for (int i = 0; i < numRetries; i++) {\n            try {\n                ChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest();\n                chatCompletionRequest.setModel(this.model);\n                chatCompletionRequest.setTemperature(temperature);\n                chatCompletionRequest.setMessages(messages);\n                chatCompletionRequest.setMaxTokens(maxTokens);\n                return openAiService.createChatCompletion(chatCompletionRequest).getChoices().get(0).getMessage().getContent();\n            } catch (OpenAiHttpException e) {", "                if (e.statusCode == 429) {\n                    logger.warn(\"Rate limit exceeded. Retrying after 20 seconds.\");\n                    try {\n                        Thread.sleep(20000);\n                    } catch (InterruptedException ex) {\n                        ex.printStackTrace();\n                    }\n                } else {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        throw new RuntimeException(\"Failed to get a response from OpenAI API.\");\n    }\n\n    @Override", "    public int countTokens(List<Map<String, String>> messages) {\n        int tokensPerMessage, tokensPerName;\n        if (model.equals(\"gpt-3.5-turbo\")) {\n            tokensPerMessage = 4;\n            tokensPerName = -1;\n        } else if (model.equals(\"gpt-4\")) {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        } else {\n            throw new RuntimeException(\"Unsupported model type: \" + model);\n        }\n\n        int numTokens = 0;", "        for (Map<String, String> message : messages) {\n            numTokens += tokensPerMessage;\n            for (Map.Entry<String, String> entry : message.entrySet()) {\n                numTokens += this.encoding.encode(entry.getValue()).size();\n                if (entry.getKey().equals(\"name\")) {\n                    numTokens += tokensPerName;\n                }\n            }\n        }\n        numTokens += 3;\n        return numTokens;\n    }\n\n    @Override", "    public int getTokenLimit() {\n        if (model.equals(\"gpt-3.5-turbo\")) {\n            return 4000;\n        } else if (model.equals(\"gpt-4\")) {\n            return 8000;\n        } else {\n            throw new RuntimeException(\"Unsupported model type: \" + model);\n        }\n    }\n\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/models/Model.java", "chunked_list": ["package com.frazik.instructgpt.models;\n\nimport com.theokanning.openai.completion.chat.ChatMessage;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic abstract class Model {\n    public abstract String chat(List<ChatMessage> messages, Integer maxTokens, Double temperature);\n\n    public abstract int countTokens(List<Map<String, String>> messages);\n", "    public abstract String chat(List<ChatMessage> messages, Integer maxTokens, Double temperature);\n\n    public abstract int countTokens(List<Map<String, String>> messages);\n\n    public abstract int getTokenLimit();\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/embedding/EmbeddingProvider.java", "chunked_list": ["package com.frazik.instructgpt.embedding;\n\n\npublic abstract class EmbeddingProvider {\n    public abstract double[] get(String text);\n\n}"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/embedding/OpenAIEmbeddingProvider.java", "chunked_list": ["package com.frazik.instructgpt.embedding;\n\nimport com.theokanning.openai.embedding.Embedding;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport com.theokanning.openai.embedding.EmbeddingResult;\nimport com.theokanning.openai.service.OpenAiService;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class OpenAIEmbeddingProvider extends EmbeddingProvider {", "import java.util.List;\n\npublic class OpenAIEmbeddingProvider extends EmbeddingProvider {\n    public static final String OPENAI_API_KEY = \"OPENAI_API_KEY\";\n    private final String model;\n\n    public OpenAIEmbeddingProvider(String model) {\n        super();\n        this.model = model;\n    }\n\n    public OpenAIEmbeddingProvider() {\n        this(\"text-embedding-ada-002\");\n    }\n\n    @Override\n    public double[] get(String text) {\n        String token = System.getenv(OPENAI_API_KEY);\n        OpenAiService  openAiService = new OpenAiService(token);\n        EmbeddingRequest embeddingRequest = new EmbeddingRequest();\n        embeddingRequest.setModel(model);\n        embeddingRequest.setInput(Collections.singletonList(text));\n        EmbeddingResult embeddingResult = openAiService.createEmbeddings(embeddingRequest);\n\n        List<Embedding> embeddings = embeddingResult.getData();\n        List<Double> firstEmbeddings = embeddings.get(0).getEmbedding();\n        return firstEmbeddings.stream().mapToDouble(Double::doubleValue).toArray();\n    }\n\n}"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/memory/Memory.java", "chunked_list": ["package com.frazik.instructgpt.memory;\nimport java.util.List;\npublic abstract class Memory {\n    public abstract void add(String doc);\n    public abstract List<String> get(int k);\n    public abstract void clear();\n}\n"]}
{"filename": "lib/src/main/java/com/frazik/instructgpt/memory/LocalMemory.java", "chunked_list": ["package com.frazik.instructgpt.memory;\n\nimport lombok.extern.slf4j.Slf4j;;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n@Slf4j\npublic class LocalMemory extends Memory {\n\n    private final List<String> docs;\n\n    public LocalMemory() {\n        super();\n        this.docs = new ArrayList<>();\n    }\n\n    @Override", "@Slf4j\npublic class LocalMemory extends Memory {\n\n    private final List<String> docs;\n\n    public LocalMemory() {\n        super();\n        this.docs = new ArrayList<>();\n    }\n\n    @Override", "    public void add(String doc) {\n        this.docs.add(0, doc);\n    }\n\n    @Override\n    public List<String> get(int k) {\n        // get last k docs, or all docs if k > docs.size()\n        if (k > this.docs.size()) {\n            return this.docs;\n        }\n        return this.docs.subList(0, k);\n    }\n    @Override", "    public void clear() {\n        this.docs.clear();\n    }\n\n}\n"]}
{"filename": "examples/src/main/java/examples/ExampleSearch.java", "chunked_list": ["package examples;\n\nimport com.frazik.instructgpt.Agent;\n\nimport java.util.List;\n\npublic class ExampleSearch {\n\n    public static void main(String[] args) {\n\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n\n        agent.cli();\n\n    }\n\n}\n", "    public static void main(String[] args) {\n\n        String name = \"Shop assistant\";\n        String description = \"an AI assistant that researches and finds the best car\";\n\n        List<String> goals = new java.util.ArrayList<>();\n        goals.add(\"Search for the car on Google\");\n        goals.add(\"Write the list of the top 5 best cars and their prices to a file\");\n        goals.add(\"Summarize the pros and cons of each car and write it to a different file called 'cars-research.txt'\");\n        goals.add(\"There will be no user assistance. Terminate once writing both files is complete.\");\n\n        Agent agent = new Agent(name, description, goals, \"gpt-3.5-turbo\");\n\n        agent.cli();\n\n    }\n\n}\n"]}
