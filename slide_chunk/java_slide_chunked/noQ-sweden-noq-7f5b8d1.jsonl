{"filename": "noq-backend/src/main/java/com/noq/backend/NoqBackendApplication.java", "chunked_list": ["package com.noq.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class NoqBackendApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NoqBackendApplication.class, args);\n    }\n\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(NoqBackendApplication.class, args);\n    }\n\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/UserRepositoryImp.java", "chunked_list": ["package com.noq.backend.repository;\nimport com.noq.backend.models.User;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Repository\npublic class UserRepositoryImp implements UserRepository{\n    private final Map<String, User> users = new HashMap<>();\n\n    @Override", "\n@Repository\npublic class UserRepositoryImp implements UserRepository{\n    private final Map<String, User> users = new HashMap<>();\n\n    @Override\n    public User save(User user) {\n        users.put(user.getId(), user);\n        return user;\n    }\n\n    @Override", "    public User getUserByUserId(String userId) {\n        return users.get(userId);\n    }\n\n    @Override\n    public List<User> getAllUsers() {\n        return new ArrayList<>(users.values());\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/ReservationRepository.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.Reservation;\n\nimport java.util.List;\n\npublic interface ReservationRepository {\n\n    Reservation save (Reservation reservation);\n\n    Reservation getReservationByReservationId(String reservationId);\n\n    List<Reservation> getAllReservations();\n\n\n    void saveAll(List<Reservation> reservations);\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/ReservationRepositoryImpl.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.Host;\nimport com.noq.backend.models.Reservation;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n@Repository\npublic class ReservationRepositoryImpl implements ReservationRepository {\n   \n    private final Map<String, Reservation> reservations = new HashMap<>();\n\n    @Override\n    public Reservation save(Reservation reservation) {\n        return reservations.put(reservation.getReservationId(), reservation);\n    }\n    @Override", "    public Reservation save(Reservation reservation) {\n        return reservations.put(reservation.getReservationId(), reservation);\n    }\n    @Override\n    public void saveAll(List<Reservation> reservations){\n        for (Reservation reservation : reservations) {\n            this.reservations.put(reservation.getReservationId(), reservation);\n        }\n    };\n\n    @Override", "    public Reservation getReservationByReservationId(String reservationId) {\n        return reservations.get(reservationId);\n    }\n\n    @Override\n    public List<Reservation> getAllReservations() {\n        return new ArrayList<>(reservations.values());\n    }\n\n\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/HostRepositoryImpl.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.Host;\nimport com.noq.backend.models.User;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n@Repository\npublic class HostRepositoryImpl implements HostRepository {\n\n    private final Map<String, Host> hosts = new HashMap<>();\n    @Override\n    public Host save(Host host) {\n        hosts.put(host.getHostId(), host);\n        return host;\n    }\n\n    @Override", "    public Host getHostByHostId(String hostId) {\n        return hosts.get(hostId);\n    }\n\n    @Override\n    public List<Host> getAllHosts() {\n        return new ArrayList<>(hosts.values());\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/UserRepository.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.User;\n\nimport java.util.List;\n\npublic interface UserRepository {\n    User save(User user);\n    User getUserByUserId(String userId);\n    List<User> getAllUsers();\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/HostRepository.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.Host;\n\nimport java.util.List;\n\npublic interface HostRepository {\n\n    Host save (Host host);\n\n    Host getHostByHostId(String hostId);\n\n    List<Host> getAllHosts();\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/repository/BedRepository.java", "chunked_list": ["package com.noq.backend.repository;\n\nimport com.noq.backend.models.Bed;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface BedRepository extends JpaRepository<Bed, Long> {\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/DTO/ReservationDTO.java", "chunked_list": ["package com.noq.backend.DTO;\n\nimport com.noq.backend.models.Host;\nimport com.noq.backend.models.Status;\nimport com.noq.backend.models.User;\n\npublic record ReservationDTO(String reservationId, Host host, User user, Status status ) {\n\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/DTO/AddressDTO.java", "chunked_list": ["package com.noq.backend.DTO;\n\npublic record AddressDTO(String id, String street, String streetNum, String postalCode, String cityName) {\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/DTO/UserDTO.java", "chunked_list": ["package com.noq.backend.DTO;\n\nimport java.util.UUID;\n\npublic record UserDTO(String id, String name, Boolean reservation) {\n\n}"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/DTO/HostDTO.java", "chunked_list": ["package com.noq.backend.DTO;\n\npublic record HostDTO (String hostId, String name, AddressDTO address, String image, Long bed){\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/Bed.java", "chunked_list": ["package com.noq.backend.models;\n\nimport jakarta.persistence.*;\nimport jakarta.persistence.Id;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport java.math.BigDecimal;\n\nimport java.util.UUID;\n", "import java.util.UUID;\n\n@Data\n@NoArgsConstructor\n@Entity(name =\"beds\")\npublic class Bed {\n    @Id @Column(name = \"id\", nullable = false)\n    private Long id;\n    private int size;\n    private BigDecimal price;\n    private Status status;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"id\")\n    private Address address;\n    private String picture;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"host_id\")\n    private Host host;\n\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/User.java", "chunked_list": ["package com.noq.backend.models;\nimport jakarta.persistence.Column;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport jakarta.persistence.*;\nimport jakarta.persistence.Id;\n\nimport java.util.UUID;\n", "import java.util.UUID;\n\n@Data\n@Entity(name=\"users\")\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n\n    @Id @Column(name = \"id\", nullable = false)\n    private String id;\n    private String name;\n    private Boolean reservation;\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/Address.java", "chunked_list": ["package com.noq.backend.models;\nimport jakarta.persistence.Column;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.*;\n\nimport java.util.UUID;\n", "import java.util.UUID;\n\n@Data\n@Entity(name=\"address\")\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Address {\n\n    @Id @Column(name = \"id\", nullable = false)\n    private String id;\n    private String street;\n    private String streetNum;\n    private String postalCode;\n    private String cityName;\n}\n\n\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/Host.java", "chunked_list": ["package com.noq.backend.models;\nimport jakarta.persistence.Column;\nimport lombok.*;\nimport jakarta.persistence.Id;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\nimport jakarta.persistence.*;\n", "import jakarta.persistence.*;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity(name=\"hosts\")\npublic class Host {\n\n    @Id @Column(name = \"id\", nullable = false)\n    private String hostId;\n    private String name;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"id\")\n    private Address address;\n    private String image;\n    private Long bed;\n\n    /*\n    @OneToMany(mappedBy = \"host\",  cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set<Bed> beds = new HashSet<>();\n*/\n\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/CreateReservation.java", "chunked_list": ["package com.noq.backend.models;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class CreateReservation {\n    private String hostId;\n    private String userId;\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/Status.java", "chunked_list": ["package com.noq.backend.models;\n\npublic enum Status {\n    PENDING(\"Pending\"),\n    RESERVED(\"Reserved\"),\n    CANCELLED(\"Cancelled\");\n\n    private final String name;\n\n    Status(String name) {\n        this.name = name;\n    }", "    public String getDisplayName() {\n        return name;\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/models/Reservation.java", "chunked_list": ["package com.noq.backend.models;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.UUID;\n", "import java.util.UUID;\n\n@Entity\n@NoArgsConstructor\n@Data\n@AllArgsConstructor\npublic class Reservation {\n    @Id @Column(name = \"id\", nullable = false)\n    private String reservationId;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"host_id\")\n    private Host host;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    private LocalDateTime reservedTime;\n    private Status status;\n\n    public Reservation(Host host, User user, Status status) {\n        this.reservationId = UUID.randomUUID().toString();\n        this.host = host;\n        this.user = user;\n        this.status = status;\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/services/ReservationService.java", "chunked_list": ["package com.noq.backend.services;\n\nimport com.noq.backend.DTO.ReservationDTO;\nimport com.noq.backend.models.*;\nimport com.noq.backend.repository.HostRepository;\nimport com.noq.backend.repository.ReservationRepository;\nimport com.noq.backend.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ReservationService {\n\n    private HostRepository hostRepository;\n    private UserRepository userRepository;\n    private ReservationRepository reservationRepository;\n\n    @Autowired\n    public ReservationService(ReservationRepository reservationRepository, HostRepository hostRepository, UserRepository userRepository) {\n        this.hostRepository = hostRepository;\n        this.userRepository = userRepository;\n        this.reservationRepository = reservationRepository;\n    }\n", "@Service\npublic class ReservationService {\n\n    private HostRepository hostRepository;\n    private UserRepository userRepository;\n    private ReservationRepository reservationRepository;\n\n    @Autowired\n    public ReservationService(ReservationRepository reservationRepository, HostRepository hostRepository, UserRepository userRepository) {\n        this.hostRepository = hostRepository;\n        this.userRepository = userRepository;\n        this.reservationRepository = reservationRepository;\n    }\n", "    public Reservation getReservationByUserId(String userId) {\n        List<Reservation> reservations = reservationRepository.getAllReservations();\n        Reservation reservation = reservations.stream()\n                .filter(res -> res.getUser().getId().equals(userId))\n                .findFirst()\n                .orElse(null);\n        return reservation;\n    }\n\n    public Reservation createReservation(CreateReservation createReservation) {\n        User user = userRepository.getUserByUserId(createReservation.getUserId());\n        user.setReservation(true);\n        userRepository.save(user);\n\n        Host host = hostRepository.getHostByHostId(createReservation.getHostId());\n\n        Reservation reservation = new Reservation(host, user, Status.PENDING);\n        reservationRepository.save(reservation);\n        return reservation;\n    }\n\n    // returns empty array...??\n    public List<Reservation> getReservationsByHostIdStatusPending(String hostId) {\n        System.out.print(hostId);\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> res.getHost().getHostId().equals(hostId) && res.getStatus().equals(Status.PENDING))\n                .collect(Collectors.toList());\n        System.out.print(reservations);\n        return reservations;\n    }\n\n    public List<Reservation> approveReservations(List<String> reservationsId) {\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {", "    public Reservation createReservation(CreateReservation createReservation) {\n        User user = userRepository.getUserByUserId(createReservation.getUserId());\n        user.setReservation(true);\n        userRepository.save(user);\n\n        Host host = hostRepository.getHostByHostId(createReservation.getHostId());\n\n        Reservation reservation = new Reservation(host, user, Status.PENDING);\n        reservationRepository.save(reservation);\n        return reservation;\n    }\n\n    // returns empty array...??\n    public List<Reservation> getReservationsByHostIdStatusPending(String hostId) {\n        System.out.print(hostId);\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> res.getHost().getHostId().equals(hostId) && res.getStatus().equals(Status.PENDING))\n                .collect(Collectors.toList());\n        System.out.print(reservations);\n        return reservations;\n    }\n\n    public List<Reservation> approveReservations(List<String> reservationsId) {\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {", "                    if (reservationsId.contains(res.getReservationId())) {\n                        res.setStatus(Status.RESERVED);\n                        return true;\n                    }\n                    return false;\n                })\n                .collect(Collectors.toList());\n        reservationRepository.saveAll(reservations);\n        return reservations;\n    }\n\n    public List<Reservation> getReservationsByHostIdStatusReserved(String hostId) {\n        System.out.print(hostId);\n        List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> res.getHost().getHostId().equals(hostId) && res.getStatus().equals(Status.RESERVED))\n                .collect(Collectors.toList());\n        System.out.print(reservations);\n        return reservations;\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/services/InitializeDataService.java", "chunked_list": ["package com.noq.backend.services;\n\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class InitializeDataService {\n\n    private UserService userService;\n    private HostService hostService;\n\n    @Autowired\n    public InitializeDataService(UserService userService, HostService hostService) {\n        this.userService = userService;\n        this.hostService = hostService;\n    }\n\n    @PostConstruct", "public class InitializeDataService {\n\n    private UserService userService;\n    private HostService hostService;\n\n    @Autowired\n    public InitializeDataService(UserService userService, HostService hostService) {\n        this.userService = userService;\n        this.hostService = hostService;\n    }\n\n    @PostConstruct", "    public void initializeData() {\n        userService.createUsers();\n        hostService.createHosts();\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/services/UserService.java", "chunked_list": ["package com.noq.backend.services;\n\nimport com.noq.backend.models.User;\nimport com.noq.backend.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;", "import java.util.List;\nimport java.util.UUID;\n\n@Service\npublic class UserService {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public List<User> getAllUsers() {\n        return userRepository.getAllUsers();\n    }\n\n    public List<User> createUsers() {\n        User user1 = new User(\n                \"1\",\n                \"Person Personsson\",\n                false\n        );\n        User user2 = new User(\n                \"2\",\n                \"Individ Individson\",\n                true\n        );\n        userRepository.save(user1);\n        userRepository.save(user2);\n        return new ArrayList<>(userRepository.getAllUsers());\n    }\n", "    public User getUserById(String userId) {\n        User existingUser = userRepository.getUserByUserId(userId);\n        if (existingUser != null) {\n            return existingUser;\n        } else {\n            return userRepository.getUserByUserId(userId);\n        }\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/services/HostService.java", "chunked_list": ["package com.noq.backend.services;\n\nimport com.noq.backend.models.Address;\nimport com.noq.backend.models.Bed;\nimport com.noq.backend.models.Host;\nimport com.noq.backend.repository.HostRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;", "\nimport java.util.*;\n\n@Service\npublic class HostService {\n\n    private HostRepository hostRepository;\n\n    @Autowired\n    public HostService(HostRepository hostRepository) {\n        this.hostRepository = hostRepository;\n    }\n\n\n    public List<Host> getAllHosts() {\n            return hostRepository.getAllHosts();\n        }\n\n    public List<Host> createHosts() {\n        Host host1 = new Host(\"3\", \"Test-H\u00e4rberget 1\", new Address(UUID.randomUUID().toString(), \"Gatgatan\", \"12\", \"12345\", \"Stockholm\"), \"url/till/bild/pa/Harberget1.png\", 15L);\n        Host host2 = new Host(\"4\", \"Test-H\u00e4rberget 2\", new Address(UUID.randomUUID().toString(), \"V\u00e4gv\u00e4gen\", \"21\", \"23546\", \"Lund\"), \"url/till/bild/pa/Harberget2.png\", 20L);\n        hostRepository.save(host1);\n        hostRepository.save(host2);\n        return new ArrayList<>(hostRepository.getAllHosts());\n    }\n\n}\n\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/controllers/HostController.java", "chunked_list": ["package com.noq.backend.controllers;\n\nimport com.noq.backend.DTO.AddressDTO;\nimport com.noq.backend.DTO.HostDTO;\nimport com.noq.backend.models.Host;\nimport com.noq.backend.services.HostService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/host\")\n@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\npublic class HostController {\n\n    private final HostService hostService;\n\n    @Autowired\n    public HostController(HostService hostService) {\n        this.hostService = hostService;\n    }\n\n\n    @GetMapping(\"/get-all\")\n    public List<HostDTO> getAllHosts() {\n        return hostService.getAllHosts()\n                .stream()\n                .map(HostController::hostDTO)\n                .collect(Collectors.toList());\n    }\n\n\n\n    private static HostDTO hostDTO(Host host) {\n        AddressDTO addressDTO = new AddressDTO(\n                host.getAddress().getId(),\n                host.getAddress().getStreet(),\n                host.getAddress().getStreetNum(),\n                host.getAddress().getPostalCode(),\n                host.getAddress().getCityName()\n        );\n\n        return new HostDTO(\n                host.getHostId(),\n                host.getName(),\n                addressDTO,\n                host.getImage(),\n                host.getBed()\n        );\n    }\n}\n\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/controllers/UserController.java", "chunked_list": ["package com.noq.backend.controllers;\n\nimport com.noq.backend.DTO.UserDTO;\nimport com.noq.backend.models.User;\nimport com.noq.backend.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;", "import java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/user\")\n@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\npublic class UserController {\n\n    private final UserService userService;\n    @Autowired\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n\n\n    @GetMapping(\"/get-all\")\n    public List<UserDTO> getAllUsers() {\n        return userService.getAllUsers()\n                .stream()\n                .map(UserController::userDTO)\n                .collect(Collectors.toList());\n    }\n\n    @GetMapping(\"/{userId}\")", "    public UserDTO getUserById(@PathVariable String userId) {\n        User user = userService.getUserById(userId);\n        return userDTO(user);\n    }\n\n\n\n    private static UserDTO userDTO(User user) {\n        return new UserDTO(\n                user.getId(),\n                user.getName(),\n                user.getReservation()\n        );\n    }\n}\n"]}
{"filename": "noq-backend/src/main/java/com/noq/backend/controllers/ReservationController.java", "chunked_list": ["package com.noq.backend.controllers;\n\nimport com.noq.backend.DTO.HostDTO;\nimport com.noq.backend.DTO.ReservationDTO;\nimport com.noq.backend.models.CreateReservation;\nimport com.noq.backend.models.Host;\nimport com.noq.backend.models.Reservation;\nimport com.noq.backend.services.ReservationService;\nimport org.springframework.web.bind.annotation.*;\n", "import org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping(\"/api/reservation\")\n@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")\npublic class ReservationController {\n\n    private final ReservationService reservationService;\n\n    public ReservationController(ReservationService reservationService) {\n        this.reservationService = reservationService;\n    }\n\n\n    @GetMapping(\"/{userId}\")", "public class ReservationController {\n\n    private final ReservationService reservationService;\n\n    public ReservationController(ReservationService reservationService) {\n        this.reservationService = reservationService;\n    }\n\n\n    @GetMapping(\"/{userId}\")\n    public ReservationDTO getReservation(@PathVariable String userId) {\n        return toReservationDTO(reservationService.getReservationByUserId(userId));\n    }\n\n    @PostMapping(\"/create\")", "    public ReservationDTO getReservation(@PathVariable String userId) {\n        return toReservationDTO(reservationService.getReservationByUserId(userId));\n    }\n\n    @PostMapping(\"/create\")\n    public ReservationDTO createReservation(@RequestBody CreateReservation createReservation) {\n        return toReservationDTO(reservationService.createReservation(createReservation));\n    }\n    @GetMapping(\"/get-reservations/{hostId}\")\n    public List<ReservationDTO> getReservationsByHostId(@PathVariable String hostId) {\n        return reservationService.getReservationsByHostIdStatusPending(hostId)\n                .stream()\n                .map(ReservationController::toReservationDTO)\n                .collect(Collectors.toList());\n    }\n\n    @PutMapping(\"/approve-reservations/{hostId}\")\n    public List<ReservationDTO> approveReservations(@RequestBody List<String> reservationsId) {\n        return reservationService.approveReservations(reservationsId)\n                .stream()\n                .map(ReservationController::toReservationDTO)\n                .collect(Collectors.toList());\n    }\n\n    @GetMapping(\"/get-approved/{hostId}\")\n    public List<ReservationDTO> getApprovedByHostId(@PathVariable String hostId) {\n        return reservationService.getReservationsByHostIdStatusReserved(hostId)\n                .stream()\n                .map(ReservationController::toReservationDTO)\n                .collect(Collectors.toList());\n    }\n\n\n    private static ReservationDTO toReservationDTO(Reservation reservation) {\n        return new ReservationDTO(\n                reservation.getReservationId(),\n                reservation.getHost(),\n                reservation.getUser(),\n                reservation.getStatus());\n    }\n}"]}
