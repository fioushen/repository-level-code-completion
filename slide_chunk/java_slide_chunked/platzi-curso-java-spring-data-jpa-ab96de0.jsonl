{"filename": "src/test/java/com/platzi/pizza/PlatziPizzeriaApplicationTests.java", "chunked_list": ["package com.platzi.pizza;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass PlatziPizzeriaApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/PlatziPizzeriaApplication.java", "chunked_list": ["package com.platzi.pizza;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n@SpringBootApplication\n@EnableJpaRepositories\n@EnableJpaAuditing\npublic class PlatziPizzeriaApplication {\n", "@EnableJpaRepositories\n@EnableJpaAuditing\npublic class PlatziPizzeriaApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(PlatziPizzeriaApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/audit/AuditableEntity.java", "chunked_list": ["package com.platzi.pizza.persistence.audit;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.MappedSuperclass;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\n\nimport java.time.LocalDateTime;\n\n@MappedSuperclass\npublic class AuditableEntity {\n    @Column(name = \"created_date\")\n    @CreatedDate\n    private LocalDateTime createdDate;\n\n    @Column(name = \"modified_date\")\n    @LastModifiedDate\n    private LocalDateTime modifiedDate;\n}\n", "\n@MappedSuperclass\npublic class AuditableEntity {\n    @Column(name = \"created_date\")\n    @CreatedDate\n    private LocalDateTime createdDate;\n\n    @Column(name = \"modified_date\")\n    @LastModifiedDate\n    private LocalDateTime modifiedDate;\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/audit/AuditPizzaListener.java", "chunked_list": ["package com.platzi.pizza.persistence.audit;\n\nimport com.platzi.pizza.persistence.entity.PizzaEntity;\nimport jakarta.persistence.PostLoad;\nimport jakarta.persistence.PostPersist;\nimport jakarta.persistence.PostUpdate;\nimport jakarta.persistence.PreRemove;\nimport org.springframework.util.SerializationUtils;\n\npublic class AuditPizzaListener {\n    private PizzaEntity currentValue;\n\n    @PostLoad", "\npublic class AuditPizzaListener {\n    private PizzaEntity currentValue;\n\n    @PostLoad\n    public void postLoad(PizzaEntity entity) {\n        System.out.println(\"POST LOAD\");\n        this.currentValue = SerializationUtils.clone(entity);\n    }\n\n    @PostPersist\n    @PostUpdate", "    public void onPostPersist(PizzaEntity entity) {\n        System.out.println(\"POST PERSIST OR UPDATE\");\n        System.out.println(\"OLD VALUE: \" + this.currentValue);\n        System.out.println(\"NEW VALUE: \" + entity.toString());\n    }\n\n    @PreRemove\n    public void onPreDelete(PizzaEntity entity) {\n        System.out.println(entity.toString());\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/entity/CustomerEntity.java", "chunked_list": ["package com.platzi.pizza.persistence.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n", "import lombok.Setter;\n\n@Entity\n@Table(name = \"customer\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class CustomerEntity {\n    @Id\n    @Column(name = \"id_customer\", nullable = false, length = 15)\n    private String idCustomer;\n\n    @Column(nullable = false, length = 60)\n    private String name;\n\n    @Column(length = 100)\n    private String address;\n\n    @Column(nullable = false, length = 50, unique = true)\n    private String email;\n\n    @Column(name = \"phone_number\", length = 20)\n    private String phoneNumber;\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/entity/OrderItemEntity.java", "chunked_list": ["package com.platzi.pizza.persistence.entity;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.IdClass;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToOne;", "import jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Entity\n@Table(name = \"order_item\")\n@IdClass(OrderItemId.class)", "@Table(name = \"order_item\")\n@IdClass(OrderItemId.class)\n@Getter\n@Setter\n@NoArgsConstructor\npublic class OrderItemEntity {\n    @Id\n    @Column(name = \"id_order\", nullable = false)\n    private Integer idOrder;\n\n    @Id\n    @Column(name = \"id_item\", nullable = false)\n    private Integer idItem;\n\n    @Column(name = \"id_pizza\", nullable = false)\n    private Integer idPizza;\n\n    @Column(nullable = false, columnDefinition = \"Decimal(2,1)\")\n    private Double quantity;\n\n    @Column(nullable = false, columnDefinition = \"Decimal(5,2)\")\n    private Double price;\n\n    @ManyToOne\n    @JoinColumn(name = \"id_order\", referencedColumnName = \"id_order\", insertable = false, updatable = false)\n    @JsonIgnore\n    private OrderEntity order;\n\n    @OneToOne\n    @JoinColumn(name = \"id_pizza\", referencedColumnName = \"id_pizza\", insertable = false, updatable = false)\n    private PizzaEntity pizza;\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/entity/PizzaEntity.java", "chunked_list": ["package com.platzi.pizza.persistence.entity;\n\nimport com.platzi.pizza.persistence.audit.AuditPizzaListener;\nimport com.platzi.pizza.persistence.audit.AuditableEntity;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EntityListeners;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;", "import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.io.Serializable;\n", "import java.io.Serializable;\n\n@Entity\n@Table(name = \"pizza\")\n@EntityListeners({AuditingEntityListener.class, AuditPizzaListener.class})\n@Getter\n@Setter\n@NoArgsConstructor\npublic class PizzaEntity extends AuditableEntity implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id_pizza\", nullable = false)\n    private Integer idPizza;\n\n    @Column(nullable = false, length = 30, unique = true)\n    private String name;\n\n    @Column(nullable = false, length = 150)\n    private String description;\n\n    @Column(nullable = false, columnDefinition = \"Decimal(5,2)\")\n    private Double price;\n\n    @Column(columnDefinition = \"TINYINT\")\n    private Boolean vegetarian;\n\n    @Column(columnDefinition = \"TINYINT\")\n    private Boolean vegan;\n\n    @Column(columnDefinition = \"TINYINT\", nullable = false)\n    private Boolean available;\n\n    @Override", "public class PizzaEntity extends AuditableEntity implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id_pizza\", nullable = false)\n    private Integer idPizza;\n\n    @Column(nullable = false, length = 30, unique = true)\n    private String name;\n\n    @Column(nullable = false, length = 150)\n    private String description;\n\n    @Column(nullable = false, columnDefinition = \"Decimal(5,2)\")\n    private Double price;\n\n    @Column(columnDefinition = \"TINYINT\")\n    private Boolean vegetarian;\n\n    @Column(columnDefinition = \"TINYINT\")\n    private Boolean vegan;\n\n    @Column(columnDefinition = \"TINYINT\", nullable = false)\n    private Boolean available;\n\n    @Override", "    public String toString() {\n        return \"PizzaEntity{\" +\n                \"idPizza=\" + idPizza +\n                \", name='\" + name + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", price=\" + price +\n                \", vegetarian=\" + vegetarian +\n                \", vegan=\" + vegan +\n                \", available=\" + available +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/entity/OrderEntity.java", "chunked_list": ["package com.platzi.pizza.persistence.entity;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;", "import jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.OrderBy;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n", "import lombok.Setter;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Table(name = \"pizza_order\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class OrderEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id_order\", nullable = false)\n    private Integer idOrder;\n\n    @Column(name = \"id_customer\", nullable = false, length = 15)\n    private String idCustomer;\n\n    @Column(nullable = false, columnDefinition = \"DATETIME\")\n    private LocalDateTime date;\n\n    @Column(nullable = false, columnDefinition = \"DECIMAL(6,2)\")\n    private Double total;\n\n    @Column(nullable = false, columnDefinition = \"CHAR(1)\")\n    private String method;\n\n    @Column(name = \"additional_notes\", length = 200)\n    private String additionalNotes;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"id_customer\", referencedColumnName = \"id_customer\", insertable = false, updatable = false)\n    @JsonIgnore\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", fetch = FetchType.EAGER)\n    @OrderBy(\"price DESC\")\n    private List<OrderItemEntity> items;\n}\n", "@Setter\n@NoArgsConstructor\npublic class OrderEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id_order\", nullable = false)\n    private Integer idOrder;\n\n    @Column(name = \"id_customer\", nullable = false, length = 15)\n    private String idCustomer;\n\n    @Column(nullable = false, columnDefinition = \"DATETIME\")\n    private LocalDateTime date;\n\n    @Column(nullable = false, columnDefinition = \"DECIMAL(6,2)\")\n    private Double total;\n\n    @Column(nullable = false, columnDefinition = \"CHAR(1)\")\n    private String method;\n\n    @Column(name = \"additional_notes\", length = 200)\n    private String additionalNotes;\n\n    @OneToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"id_customer\", referencedColumnName = \"id_customer\", insertable = false, updatable = false)\n    @JsonIgnore\n    private CustomerEntity customer;\n\n    @OneToMany(mappedBy = \"order\", fetch = FetchType.EAGER)\n    @OrderBy(\"price DESC\")\n    private List<OrderItemEntity> items;\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/entity/OrderItemId.java", "chunked_list": ["package com.platzi.pizza.persistence.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class OrderItemId implements Serializable {\n    private Integer idOrder;\n    private Integer idItem;\n\n    @Override", "    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof OrderItemId that)) return false;\n        return Objects.equals(idOrder, that.idOrder) && Objects.equals(idItem, that.idItem);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(idOrder, idItem);\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/repository/PizzaPagSortRepository.java", "chunked_list": ["package com.platzi.pizza.persistence.repository;\n\nimport com.platzi.pizza.persistence.entity.PizzaEntity;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.ListPagingAndSortingRepository;\n\npublic interface PizzaPagSortRepository extends ListPagingAndSortingRepository<PizzaEntity, Integer> {\n    Page<PizzaEntity> findByAvailableTrue(Pageable pageable);\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/repository/CustomerRepository.java", "chunked_list": ["package com.platzi.pizza.persistence.repository;\n\nimport com.platzi.pizza.persistence.entity.CustomerEntity;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.ListCrudRepository;\nimport org.springframework.data.repository.query.Param;\n\npublic interface CustomerRepository extends ListCrudRepository<CustomerEntity, String> {\n\n    @Query(value = \"SELECT c FROM CustomerEntity c WHERE c.phoneNumber = :phone\")\n    CustomerEntity findByPhone(@Param(\"phone\") String phone);\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/repository/PizzaRepository.java", "chunked_list": ["package com.platzi.pizza.persistence.repository;\n\nimport com.platzi.pizza.persistence.entity.PizzaEntity;\nimport com.platzi.pizza.service.dto.UpdatePizzaPriceDto;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.ListCrudRepository;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface PizzaRepository extends ListCrudRepository<PizzaEntity, Integer> {\n    List<PizzaEntity> findAllByAvailableTrueOrderByPrice();\n    Optional<PizzaEntity> findFirstByAvailableTrueAndNameIgnoreCase(String name);\n    List<PizzaEntity> findAllByAvailableTrueAndDescriptionContainingIgnoreCase(String description);\n    List<PizzaEntity> findAllByAvailableTrueAndDescriptionNotContainingIgnoreCase(String description);\n    List<PizzaEntity> findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(double price);\n    int countByVeganTrue();\n\n    @Query(value =\n            \"UPDATE pizza \" +\n            \"SET price = :#{#newPizzaPrice.newPrice} \" +\n            \"WHERE id_pizza = :#{#newPizzaPrice.pizzaId}\", nativeQuery = true)\n    @Modifying\n    void updatePrice(@Param(\"newPizzaPrice\") UpdatePizzaPriceDto newPizzaPrice);\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/repository/OrderRepository.java", "chunked_list": ["package com.platzi.pizza.persistence.repository;\n\nimport com.platzi.pizza.persistence.entity.OrderEntity;\nimport com.platzi.pizza.persistence.projection.OrderSummary;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.jpa.repository.query.Procedure;\nimport org.springframework.data.repository.ListCrudRepository;\nimport org.springframework.data.repository.query.Param;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\nimport java.util.List;\n\npublic interface OrderRepository extends ListCrudRepository<OrderEntity, Integer> {\n    List<OrderEntity> findAllByDateAfter(LocalDateTime date);\n    List<OrderEntity> findAllByMethodIn(List<String> methods);\n\n    @Query(value = \"SELECT * FROM pizza_order WHERE id_customer = :id\", nativeQuery = true)\n    List<OrderEntity> findCustomerOrders(@Param(\"id\") String idCustomer);\n\n    @Query(value =\n            \"SELECT  po.id_order AS idOrder, cu.name AS customerName, po.date AS orderDate,\" +\n            \"        po.total AS orderTotal, GROUP_CONCAT(pi.name) AS pizzaNames \" +\n            \"FROM   pizza_order po  \" +\n            \"   INNER JOIN customer cu ON po.id_customer = cu.id_customer  \" +\n            \"   INNER JOIN order_item oi ON po.id_order = oi.id_order  \" +\n            \"   INNER JOIN pizza pi ON oi.id_pizza = pi.id_pizza  \" +\n            \"WHERE  po.id_order = :orderId \" +\n            \"GROUP BY po.id_order, cu.name, po.date, po.total\", nativeQuery = true)\n    OrderSummary findSummary(@Param(\"orderId\") int orderId);\n\n    @Procedure(value = \"take_random_pizza_order\", outputParameterName = \"order_taken\")\n    boolean saveRandomOrder(@Param(\"id_customer\") String idCustomer, @Param(\"method\") String method);\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/persistence/projection/OrderSummary.java", "chunked_list": ["package com.platzi.pizza.persistence.projection;\n\nimport java.time.LocalDateTime;\n\npublic interface OrderSummary {\n    Integer getIdOrder();\n    String getCustomerName();\n    LocalDateTime getOrderDate();\n    Double getOrderTotal();\n    String getPizzaNames();\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/web/controller/OrderController.java", "chunked_list": ["package com.platzi.pizza.web.controller;\n\nimport com.platzi.pizza.persistence.entity.OrderEntity;\nimport com.platzi.pizza.persistence.projection.OrderSummary;\nimport com.platzi.pizza.service.OrderService;\nimport com.platzi.pizza.service.dto.RandomOrderDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController", "\n@RestController\n@RequestMapping(\"/api/orders\")\npublic class OrderController {\n    private final OrderService orderService;\n\n    @Autowired\n    public OrderController(OrderService orderService) {\n        this.orderService = orderService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<OrderEntity>> getAll() {\n        return ResponseEntity.ok(this.orderService.getAll());\n    }\n\n    @GetMapping(\"/today\")\n    public ResponseEntity<List<OrderEntity>> getTodayOrders() {\n        return ResponseEntity.ok(this.orderService.getTodayOrders());\n    }\n\n    @GetMapping(\"/outside\")\n    public ResponseEntity<List<OrderEntity>> getOutsideOrders() {\n        return ResponseEntity.ok(this.orderService.getOutsideOrders());\n    }\n\n    @GetMapping(\"/customer/{id}\")\n    public ResponseEntity<List<OrderEntity>> getOutsideOrders(@PathVariable String id) {\n        return ResponseEntity.ok(this.orderService.getCustomerOrders(id));\n    }\n\n    @GetMapping(\"/summary/{id}\")\n    public ResponseEntity<OrderSummary> getSummary(@PathVariable int id) {\n        return ResponseEntity.ok(this.orderService.getSummary(id));\n    }\n\n    @PostMapping(\"/random\")\n    public ResponseEntity<Boolean> randomOrder(@RequestBody RandomOrderDto dto) {\n        return ResponseEntity.ok(this.orderService.saveRandomOrder(dto));\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/web/controller/CustomerController.java", "chunked_list": ["package com.platzi.pizza.web.controller;\n\nimport com.platzi.pizza.persistence.entity.CustomerEntity;\nimport com.platzi.pizza.service.CustomerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/customers\")\npublic class CustomerController {\n    private final CustomerService customerService;\n\n    @Autowired\n    public CustomerController(CustomerService customerService) {\n        this.customerService = customerService;\n    }\n\n    @GetMapping(\"/phone/{phone}\")\n    public ResponseEntity<CustomerEntity> getByPhone(@PathVariable String phone) {\n        return ResponseEntity.ok(this.customerService.findByPhone(phone));\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/web/controller/PizzaController.java", "chunked_list": ["package com.platzi.pizza.web.controller;\n\nimport com.platzi.pizza.persistence.entity.PizzaEntity;\nimport com.platzi.pizza.service.PizzaService;\nimport com.platzi.pizza.service.dto.UpdatePizzaPriceDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;", "import org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n", "import org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/pizzas\")\npublic class PizzaController {\n    private final PizzaService pizzaService;\n\n    @Autowired\n    public PizzaController(PizzaService pizzaService) {\n        this.pizzaService = pizzaService;\n    }\n\n    @GetMapping\n    public ResponseEntity<Page<PizzaEntity>> getAll(@RequestParam(defaultValue = \"0\") int page,\n                                                    @RequestParam(defaultValue = \"8\") int elements) {\n        return ResponseEntity.ok(this.pizzaService.getAll(page, elements));\n    }\n\n    @GetMapping(\"/{idPizza}\")\n    public ResponseEntity<PizzaEntity> get(@PathVariable int idPizza) {\n        return ResponseEntity.ok(this.pizzaService.get(idPizza));\n    }\n\n    @GetMapping(\"/available\")\n    public ResponseEntity<Page<PizzaEntity>> getAvailable(@RequestParam(defaultValue = \"0\") int page,\n                                                          @RequestParam(defaultValue = \"8\") int elements,\n                                                          @RequestParam(defaultValue = \"price\") String sortBy,\n                                                          @RequestParam(defaultValue = \"ASC\") String sortDirection) {\n        return ResponseEntity.ok(this.pizzaService.getAvailable(page, elements, sortBy, sortDirection));\n    }\n\n    @GetMapping(\"/name/{name}\")\n    public ResponseEntity<PizzaEntity> getByName(@PathVariable String name) {\n        return ResponseEntity.ok(this.pizzaService.getByName(name));\n    }\n\n    @GetMapping(\"/with/{ingredient}\")\n    public ResponseEntity<List<PizzaEntity>> getWith(@PathVariable String ingredient) {\n        return ResponseEntity.ok(this.pizzaService.getWith(ingredient));\n    }\n\n    @GetMapping(\"/without/{ingredient}\")\n    public ResponseEntity<List<PizzaEntity>> getWithout(@PathVariable String ingredient) {\n        return ResponseEntity.ok(this.pizzaService.getWithout(ingredient));\n    }\n\n    @GetMapping(\"/cheapest/{price}\")\n    public ResponseEntity<List<PizzaEntity>> getCheapestPizzas(@PathVariable double price) {\n        return ResponseEntity.ok(this.pizzaService.getCheapest(price));\n    }\n\n    @PostMapping\n    public ResponseEntity<PizzaEntity> add(@RequestBody PizzaEntity pizza) {", "        if (pizza.getIdPizza() == null || !this.pizzaService.exists(pizza.getIdPizza())) {\n            return ResponseEntity.ok(this.pizzaService.save(pizza));\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n\n    @PutMapping\n    public ResponseEntity<PizzaEntity> update(@RequestBody PizzaEntity pizza) {\n        if (pizza.getIdPizza() != null && this.pizzaService.exists(pizza.getIdPizza())) {\n            return ResponseEntity.ok(this.pizzaService.save(pizza));\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n\n    @PutMapping(\"/price\")\n    public ResponseEntity<Void> updatePrice(@RequestBody UpdatePizzaPriceDto dto) {", "        if (pizza.getIdPizza() != null && this.pizzaService.exists(pizza.getIdPizza())) {\n            return ResponseEntity.ok(this.pizzaService.save(pizza));\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n\n    @PutMapping(\"/price\")\n    public ResponseEntity<Void> updatePrice(@RequestBody UpdatePizzaPriceDto dto) {\n        if (this.pizzaService.exists(dto.getPizzaId())) {\n            this.pizzaService.updatePrice(dto);\n            return ResponseEntity.ok().build();\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n\n    @DeleteMapping(\"/{idPizza}\")\n    public ResponseEntity<Void> delete(@PathVariable int idPizza) {", "        if (this.pizzaService.exists(dto.getPizzaId())) {\n            this.pizzaService.updatePrice(dto);\n            return ResponseEntity.ok().build();\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n\n    @DeleteMapping(\"/{idPizza}\")\n    public ResponseEntity<Void> delete(@PathVariable int idPizza) {\n        if (this.pizzaService.exists(idPizza)) {\n            this.pizzaService.delete(idPizza);\n            return ResponseEntity.ok().build();\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n}\n", "        if (this.pizzaService.exists(idPizza)) {\n            this.pizzaService.delete(idPizza);\n            return ResponseEntity.ok().build();\n        }\n\n        return ResponseEntity.badRequest().build();\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/CustomerService.java", "chunked_list": ["package com.platzi.pizza.service;\n\nimport com.platzi.pizza.persistence.entity.CustomerEntity;\nimport com.platzi.pizza.persistence.repository.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CustomerService {\n    private final CustomerRepository customerRepository;\n\n    @Autowired\n    public CustomerService(CustomerRepository customerRepository) {\n        this.customerRepository = customerRepository;\n    }\n", "public class CustomerService {\n    private final CustomerRepository customerRepository;\n\n    @Autowired\n    public CustomerService(CustomerRepository customerRepository) {\n        this.customerRepository = customerRepository;\n    }\n\n    public CustomerEntity findByPhone(String phone) {\n        return this.customerRepository.findByPhone(phone);\n    }\n}\n", "    public CustomerEntity findByPhone(String phone) {\n        return this.customerRepository.findByPhone(phone);\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/PizzaService.java", "chunked_list": ["package com.platzi.pizza.service;\n\nimport com.platzi.pizza.persistence.entity.PizzaEntity;\nimport com.platzi.pizza.persistence.repository.PizzaPagSortRepository;\nimport com.platzi.pizza.persistence.repository.PizzaRepository;\nimport com.platzi.pizza.service.dto.UpdatePizzaPriceDto;\nimport com.platzi.pizza.service.exception.EmailApiException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n\n@Service\npublic class PizzaService {\n    private final PizzaRepository pizzaRepository;\n    private final PizzaPagSortRepository pizzaPagSortRepository;\n\n    @Autowired\n    public PizzaService(PizzaRepository pizzaRepository, PizzaPagSortRepository pizzaPagSortRepository) {\n        this.pizzaRepository = pizzaRepository;\n        this.pizzaPagSortRepository = pizzaPagSortRepository;\n    }\n\n    public Page<PizzaEntity> getAll(int page, int elements) {\n        Pageable pageRequest = PageRequest.of(page, elements);\n        return this.pizzaPagSortRepository.findAll(pageRequest);\n    }\n\n    public Page<PizzaEntity> getAvailable(int page, int elements, String sortBy, String sortDirection) {\n        System.out.println(this.pizzaRepository.countByVeganTrue());\n\n        Sort sort = Sort.by(Sort.Direction.fromString(sortDirection), sortBy);\n        Pageable pageRequest = PageRequest.of(page, elements, sort);\n\n        return this.pizzaPagSortRepository.findByAvailableTrue(pageRequest);\n    }\n", "\n@Service\npublic class PizzaService {\n    private final PizzaRepository pizzaRepository;\n    private final PizzaPagSortRepository pizzaPagSortRepository;\n\n    @Autowired\n    public PizzaService(PizzaRepository pizzaRepository, PizzaPagSortRepository pizzaPagSortRepository) {\n        this.pizzaRepository = pizzaRepository;\n        this.pizzaPagSortRepository = pizzaPagSortRepository;\n    }\n\n    public Page<PizzaEntity> getAll(int page, int elements) {\n        Pageable pageRequest = PageRequest.of(page, elements);\n        return this.pizzaPagSortRepository.findAll(pageRequest);\n    }\n\n    public Page<PizzaEntity> getAvailable(int page, int elements, String sortBy, String sortDirection) {\n        System.out.println(this.pizzaRepository.countByVeganTrue());\n\n        Sort sort = Sort.by(Sort.Direction.fromString(sortDirection), sortBy);\n        Pageable pageRequest = PageRequest.of(page, elements, sort);\n\n        return this.pizzaPagSortRepository.findByAvailableTrue(pageRequest);\n    }\n", "    public PizzaEntity getByName(String name) {\n        return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));\n    }\n\n    public List<PizzaEntity> getWith(String ingredient) {\n        return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getWithout(String ingredient) {\n        return this.pizzaRepository.findAllByAvailableTrueAndDescriptionNotContainingIgnoreCase(ingredient);\n    }\n\n    public List<PizzaEntity> getCheapest(double price) {\n        return this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);\n    }\n", "    public PizzaEntity get(int idPizza) {\n        return this.pizzaRepository.findById(idPizza).orElse(null);\n    }\n\n    public PizzaEntity save(PizzaEntity pizza) {\n        return this.pizzaRepository.save(pizza);\n    }\n\n    public void delete(int idPizza) {\n        this.pizzaRepository.deleteById(idPizza);\n    }\n\n    @Transactional(noRollbackFor = EmailApiException.class)", "    public void delete(int idPizza) {\n        this.pizzaRepository.deleteById(idPizza);\n    }\n\n    @Transactional(noRollbackFor = EmailApiException.class)\n    public void updatePrice(UpdatePizzaPriceDto dto) {\n        this.pizzaRepository.updatePrice(dto);\n        this.sendEmail();\n    }\n\n    private void sendEmail() {\n        throw new EmailApiException();\n    }\n", "    public boolean exists(int idPizza) {\n        return this.pizzaRepository.existsById(idPizza);\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/OrderService.java", "chunked_list": ["package com.platzi.pizza.service;\n\nimport com.platzi.pizza.persistence.entity.OrderEntity;\nimport com.platzi.pizza.persistence.projection.OrderSummary;\nimport com.platzi.pizza.persistence.repository.OrderRepository;\nimport com.platzi.pizza.service.dto.RandomOrderDto;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n", "import org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.List;\n\n@Service\npublic class OrderService {\n    private final OrderRepository orderRepository;\n\n    private static final String DELIVERY = \"D\";\n    private static final String CARRYOUT = \"C\";\n    private static final String ON_SITE = \"S\";\n\n    @Autowired\n    public OrderService(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    public List<OrderEntity> getAll() {\n        return this.orderRepository.findAll();\n    }\n\n    public List<OrderEntity> getTodayOrders() {\n        LocalDateTime today = LocalDate.now().atTime(0, 0);\n        return this.orderRepository.findAllByDateAfter(today);\n    }\n\n    public List<OrderEntity> getOutsideOrders() {\n        List<String> methods = Arrays.asList(DELIVERY, CARRYOUT);\n        return this.orderRepository.findAllByMethodIn(methods);\n    }\n\n    public List<OrderEntity> getCustomerOrders(String idCustomer) {\n        return this.orderRepository.findCustomerOrders(idCustomer);\n    }\n", "public class OrderService {\n    private final OrderRepository orderRepository;\n\n    private static final String DELIVERY = \"D\";\n    private static final String CARRYOUT = \"C\";\n    private static final String ON_SITE = \"S\";\n\n    @Autowired\n    public OrderService(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    public List<OrderEntity> getAll() {\n        return this.orderRepository.findAll();\n    }\n\n    public List<OrderEntity> getTodayOrders() {\n        LocalDateTime today = LocalDate.now().atTime(0, 0);\n        return this.orderRepository.findAllByDateAfter(today);\n    }\n\n    public List<OrderEntity> getOutsideOrders() {\n        List<String> methods = Arrays.asList(DELIVERY, CARRYOUT);\n        return this.orderRepository.findAllByMethodIn(methods);\n    }\n\n    public List<OrderEntity> getCustomerOrders(String idCustomer) {\n        return this.orderRepository.findCustomerOrders(idCustomer);\n    }\n", "    public OrderSummary getSummary(int orderId) {\n        return this.orderRepository.findSummary(orderId);\n    }\n\n    @Transactional\n    public boolean saveRandomOrder(RandomOrderDto randomOrderDto) {\n        return this.orderRepository.saveRandomOrder(randomOrderDto.getIdCustomer(), randomOrderDto.getMethod());\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/exception/EmailApiException.java", "chunked_list": ["package com.platzi.pizza.service.exception;\n\npublic class EmailApiException extends RuntimeException {\n    public EmailApiException() {\n        super(\"Error sending email...\");\n    }\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/dto/UpdatePizzaPriceDto.java", "chunked_list": ["package com.platzi.pizza.service.dto;\n\nimport lombok.Data;\n\n@Data\npublic class UpdatePizzaPriceDto {\n    private int pizzaId;\n    private double newPrice;\n}\n"]}
{"filename": "src/main/java/com/platzi/pizza/service/dto/RandomOrderDto.java", "chunked_list": ["package com.platzi.pizza.service.dto;\n\nimport lombok.Data;\n\n@Data\npublic class RandomOrderDto {\n    private String idCustomer;\n    private String method;\n}\n"]}
