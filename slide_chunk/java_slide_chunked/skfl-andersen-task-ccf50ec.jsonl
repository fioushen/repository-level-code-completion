{"filename": "src/test/java/com/andersentask/bookshop/user/repository/UserRepositoryTest.java", "chunked_list": ["package com.andersentask.bookshop.user.repository;\n\nimport com.andersentask.bookshop.user.entities.User;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport static com.andersentask.bookshop.user.enums.Role.ROLE_USER;", "\nimport static com.andersentask.bookshop.user.enums.Role.ROLE_USER;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass UserRepositoryTest {\n\n    private UserRepository userRepository;\n", "    private UserRepository userRepository;\n\n    private final User user = User.builder()\n            .firstName(\"exampleFirstName\")\n            .lastName(\"exampleLastName\")\n            .email(\"example@gmail.com\")\n            .password(\"password\")\n            .role(ROLE_USER)\n            .build();\n", "            .build();\n\n    @BeforeEach\n    void setUp() {\n        userRepository = new UserRepository();\n    }\n\n    @Test\n    void save() {\n", "    void save() {\n\n        User savedUser = userRepository.save(user);\n\n        assertNotNull(savedUser.getId());\n        assertEquals(Optional.of(user), userRepository.findByEmailIgnoreCase(user.getEmail()));\n        assertEquals(1, userRepository.findAll().size());\n        assertTrue(userRepository.findAll().contains(savedUser));\n    }\n", "    }\n\n    @Test\n    void findByIdExistingUser() {\n        userRepository.save(user);\n\n        Optional<User> result = userRepository.findById(user.getId());\n\n        assertTrue(result.isPresent());\n        assertEquals(user, result.get());", "        assertTrue(result.isPresent());\n        assertEquals(user, result.get());\n    }\n\n    @Test\n    void testFindByIdMissingUser() {\n        Optional<User> result = userRepository.findById(1L);\n\n        assertTrue(result.isEmpty());\n    }", "        assertTrue(result.isEmpty());\n    }\n\n    @Test\n    void findAll() {\n        User user2 = User.builder()\n                .firstName(\"exampleFirstName2\")\n                .lastName(\"exampleLastName2\")\n                .email(\"example2@gmail.com\")\n                .password(\"password2\")", "                .email(\"example2@gmail.com\")\n                .password(\"password2\")\n                .role(ROLE_USER)\n                .build();\n\n        userRepository.save(user);\n        userRepository.save(user2);\n\n        List<User> result = userRepository.findAll();\n", "        List<User> result = userRepository.findAll();\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(user));\n        assertTrue(result.contains(user2));\n    }\n\n    @Test\n    void findByEmailIgnoreCaseExistingUser() {\n        userRepository.save(user);", "    void findByEmailIgnoreCaseExistingUser() {\n        userRepository.save(user);\n\n        Optional<User> result = userRepository.findByEmailIgnoreCase(user.getEmail().toUpperCase());\n\n        assertTrue(result.isPresent());\n        assertEquals(user, result.get());\n    }\n\n    @Test", "\n    @Test\n    void testFindByEmailIgnoreCaseMissingUser() {\n        Optional<User> result = userRepository.findByEmailIgnoreCase(\"missingemail@gmail.com\");\n\n        assertTrue(result.isEmpty());\n    }\n}"]}
{"filename": "src/test/java/com/andersentask/bookshop/user/service/UserServiceTest.java", "chunked_list": ["package com.andersentask.bookshop.user.service;\n\nimport com.andersentask.bookshop.user.entities.User;\nimport com.andersentask.bookshop.user.repository.UserRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n", "import org.mockito.junit.jupiter.MockitoExtension;\n\nimport java.util.Optional;\n\nimport static com.andersentask.bookshop.user.enums.Role.ROLE_USER;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n", "    private UserRepository userRepository;\n\n    private UserService userService;\n\n    private final User user = User.builder()\n            .email(\"example@gmail.com\")\n            .password(\"password\")\n            .firstName(\"exampleFirstName\")\n            .lastName(\"exampleLastName\")\n            .role(ROLE_USER)", "            .lastName(\"exampleLastName\")\n            .role(ROLE_USER)\n            .build();\n\n    @BeforeEach\n    void setUp() {\n        userService = new UserService(userRepository);\n    }\n\n    @Test", "\n    @Test\n    void registrationNewUser() {\n        when(userRepository.findByEmailIgnoreCase(user.getEmail())).thenReturn(Optional.empty());\n\n        assertTrue(userService.registration(user));\n        verify(userRepository, times(1)).findByEmailIgnoreCase(user.getEmail());\n        verify(userRepository, times(1)).save(user);\n    }\n", "    }\n\n    @Test\n    void registrationExistingUser() {\n        when(userRepository.findByEmailIgnoreCase(user.getEmail())).thenReturn(Optional.of(user));\n\n        assertFalse(userService.registration(user));\n        verify(userRepository, times(1)).findByEmailIgnoreCase(user.getEmail());\n    }\n", "    }\n\n    @Test\n    void findByEmailExistingUser() {\n        when(userRepository.findByEmailIgnoreCase(user.getEmail())).thenReturn(Optional.of(user));\n\n        Optional<User> foundUser = userService.findByEmail(user.getEmail());\n        assertTrue(foundUser.isPresent());\n        assertEquals(user, foundUser.get());\n        verify(userRepository, times(1)).findByEmailIgnoreCase(user.getEmail());", "        assertEquals(user, foundUser.get());\n        verify(userRepository, times(1)).findByEmailIgnoreCase(user.getEmail());\n    }\n\n    @Test\n    void findByEmailMissingUser() {\n        when(userRepository.findByEmailIgnoreCase(user.getEmail())).thenReturn(Optional.empty());\n\n        assertFalse(userService.findByEmail(user.getEmail()).isPresent());\n    }", "        assertFalse(userService.findByEmail(user.getEmail()).isPresent());\n    }\n}\n"]}
{"filename": "src/test/java/com/andersentask/bookshop/order/repositories/OrderRepositoryTest.java", "chunked_list": ["package com.andersentask.bookshop.order.repositories;\n\nimport com.andersentask.bookshop.book.services.BookService;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport com.andersentask.bookshop.user.entities.User;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n", "import org.mockito.Mock;\n\nimport javax.sql.DataSource;\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass OrderRepositoryTest {", "\nclass OrderRepositoryTest {\n\n    private final Order testOrder = Order.builder()\n            .user(User.builder().firstName(\"qwerty\").build())\n            .orderCost(BigDecimal.valueOf(345.34))\n            .orderStatus(OrderStatus.COMPLETED)\n            .build();\n    private OrderRepository orderRepository;\n    @Mock", "    private OrderRepository orderRepository;\n    @Mock\n    private DataSource dataSource;\n    @Mock\n    private BookService bookService;\n\n    @BeforeEach\n    void setUp() {\n        orderRepository = new OrderRepository(dataSource, bookService);\n    }", "        orderRepository = new OrderRepository(dataSource, bookService);\n    }\n\n    @Test\n    void save() {\n        orderRepository.save(testOrder);\n\n        assertNotNull(testOrder.getOrderId());\n        assertEquals(Optional.of(testOrder), orderRepository.findById(1L));\n        assertEquals(1, orderRepository.findAll().size());", "        assertEquals(Optional.of(testOrder), orderRepository.findById(1L));\n        assertEquals(1, orderRepository.findAll().size());\n        assertTrue(orderRepository.findAll().contains(testOrder));\n    }\n\n    @Test\n    void findById() {\n        orderRepository.save(testOrder);\n        Optional<Order> result = orderRepository.findById(testOrder.getOrderId());\n", "        Optional<Order> result = orderRepository.findById(testOrder.getOrderId());\n\n        assertTrue(result.isPresent());\n        assertEquals(testOrder, result.get());\n\n        assertEquals(Optional.empty(), orderRepository.findById(2L));\n    }\n\n    @Test\n    void findAll() {", "    @Test\n    void findAll() {\n        Order testOrder2 = Order.builder()\n                .user(User.builder().firstName(\"qwerty2\").build())\n                .orderCost(BigDecimal.valueOf(3456.34))\n                .orderStatus(OrderStatus.IN_PROCESS)\n                .build();\n\n        orderRepository.save(testOrder);\n        orderRepository.save(testOrder2);", "        orderRepository.save(testOrder);\n        orderRepository.save(testOrder2);\n\n        List<Order> result = orderRepository.findAll();\n        assertEquals(2, orderRepository.findAll().size());\n        assertTrue(result.contains(testOrder));\n        assertTrue(result.contains(testOrder2));\n    }\n}", "}"]}
{"filename": "src/test/java/com/andersentask/bookshop/order/service/OrderServiceTest.java", "chunked_list": ["package com.andersentask.bookshop.order.service;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport com.andersentask.bookshop.book.services.BookService;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderSort;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport com.andersentask.bookshop.order.repositories.OrderRepository;\nimport com.andersentask.bookshop.user.entities.User;", "import com.andersentask.bookshop.order.repositories.OrderRepository;\nimport com.andersentask.bookshop.user.entities.User;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\n\nimport javax.sql.DataSource;\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;", "import java.math.BigDecimal;\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass OrderServiceTest {\n", "class OrderServiceTest {\n\n    private final Order testOrder = Order.builder()\n            .user(User.builder().firstName(\"qwerty\").build())\n            .orderCost(BigDecimal.valueOf(345.34))\n            .orderStatus(OrderStatus.COMPLETED)\n            .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.now()))\n            .booksInOrder(List.of(Book.builder()\n                    .name(\"qwerty\")\n                    .status(BookStatus.AVAILABLE)", "                    .name(\"qwerty\")\n                    .status(BookStatus.AVAILABLE)\n                    .price(BigDecimal.valueOf(12.12))\n                    .build()))\n            .build();\n    private final Order testOrder2 = Order.builder()\n            .user(User.builder().firstName(\"qwerty2\").build())\n            .orderCost(BigDecimal.valueOf(3456.34))\n            .orderStatus(OrderStatus.IN_PROCESS)\n            .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.now()))", "            .orderStatus(OrderStatus.IN_PROCESS)\n            .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.now()))\n            .build();\n    private final Order testOrder3 = Order.builder()\n            .user(User.builder().firstName(\"qwerty3\").build())\n            .orderCost(BigDecimal.valueOf(3106.34))\n            .orderStatus(OrderStatus.CANCELED)\n            .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.now()))\n            .build();\n    @Mock", "            .build();\n    @Mock\n    private OrderRepository orderRepository;\n    private OrderService orderService;\n    @Spy\n    private DataSource dataSource;\n    @Spy\n    private BookService bookService;\n\n    @BeforeEach", "\n    @BeforeEach\n    void setUp() {\n        orderRepository = new OrderRepository(dataSource, bookService);\n        orderService = new OrderService(orderRepository);\n    }\n\n    @Test\n    void saveOrder() {\n        orderService.saveOrder(testOrder);", "    void saveOrder() {\n        orderService.saveOrder(testOrder);\n\n        assertNotNull(testOrder.getOrderId());\n        assertEquals(Optional.of(testOrder), orderService.getOrderById(testOrder.getOrderId()));\n        assertEquals(1, orderService.getAllOrders().size());\n        assertTrue(orderService.getAllOrders().contains(testOrder));\n    }\n\n    @Test", "\n    @Test\n    void getOrderById() {\n        orderService.saveOrder(testOrder);\n        Optional<Order> result = orderService.getOrderById(testOrder.getOrderId());\n\n        assertTrue(result.isPresent());\n        assertEquals(testOrder, result.get());\n        assertEquals(Optional.empty(), orderService.getOrderById(2L));\n    }", "        assertEquals(Optional.empty(), orderService.getOrderById(2L));\n    }\n\n    @Test\n    void getAllOrders() {\n        orderService.saveOrder(testOrder);\n        orderService.saveOrder(testOrder2);\n        List<Order> bookList = orderService.getAllOrders();\n\n        assertEquals(2, orderService.getAllOrders().size());", "\n        assertEquals(2, orderService.getAllOrders().size());\n        assertTrue(bookList.contains(testOrder));\n        assertTrue(bookList.contains(testOrder2));\n    }\n\n    @Test\n    void changeStatusOfOrder() {\n        orderService.saveOrder(testOrder);\n        orderService.saveOrder(testOrder2);", "        orderService.saveOrder(testOrder);\n        orderService.saveOrder(testOrder2);\n        orderService.saveOrder(testOrder3);\n\n        orderService.changeStatusOfOrder(testOrder.getOrderId(), OrderStatus.IN_PROCESS);\n        assertNotEquals(OrderStatus.IN_PROCESS, testOrder.getOrderStatus());\n\n        orderService.changeStatusOfOrder(testOrder2.getOrderId(), OrderStatus.COMPLETED);\n        assertEquals(OrderStatus.COMPLETED, testOrder2.getOrderStatus());\n", "        assertEquals(OrderStatus.COMPLETED, testOrder2.getOrderStatus());\n\n        orderService.changeStatusOfOrder(testOrder3.getOrderId(), OrderStatus.IN_PROCESS);\n        assertEquals(OrderStatus.CANCELED, testOrder3.getOrderStatus());\n    }\n\n    @Test\n    void getSortedOrders() {\n        orderService.saveOrder(testOrder);\n        orderService.saveOrder(testOrder2);", "        orderService.saveOrder(testOrder);\n        orderService.saveOrder(testOrder2);\n\n        orderService.getSortedOrders(OrderSort.ID);\n        assertEquals(1L, orderService.getAllOrders().get(0).getOrderId());\n        assertEquals(2L, orderService.getAllOrders().get(1).getOrderId());\n\n        orderService.getSortedOrders(OrderSort.COMPLETION_DATE);\n        assertNotEquals(Timestamp.valueOf(LocalDateTime.now()), orderService.getAllOrders().get(0).getTimeOfCompletingOrder());\n        assertNotEquals(Timestamp.valueOf(LocalDateTime.now()), orderService.getAllOrders().get(1).getTimeOfCompletingOrder());", "        assertNotEquals(Timestamp.valueOf(LocalDateTime.now()), orderService.getAllOrders().get(0).getTimeOfCompletingOrder());\n        assertNotEquals(Timestamp.valueOf(LocalDateTime.now()), orderService.getAllOrders().get(1).getTimeOfCompletingOrder());\n\n        orderService.getSortedOrders(OrderSort.COST);\n        assertEquals(BigDecimal.valueOf(345.34), orderService.getAllOrders().get(0).getOrderCost());\n        assertEquals(BigDecimal.valueOf(3456.34), orderService.getAllOrders().get(1).getOrderCost());\n\n        orderService.getSortedOrders(OrderSort.STATUS);\n        assertEquals(OrderStatus.COMPLETED, orderService.getAllOrders().get(0).getOrderStatus());\n        assertEquals(OrderStatus.IN_PROCESS, orderService.getAllOrders().get(1).getOrderStatus());", "        assertEquals(OrderStatus.COMPLETED, orderService.getAllOrders().get(0).getOrderStatus());\n        assertEquals(OrderStatus.IN_PROCESS, orderService.getAllOrders().get(1).getOrderStatus());\n    }\n\n    @Test\n    void getIncomeForPeriod() {\n        Order completedOrder1 = Order.builder()\n                .user(User.builder().firstName(\"qwerty\").build())\n                .orderCost(BigDecimal.valueOf(345.34))\n                .orderStatus(OrderStatus.COMPLETED)", "                .orderCost(BigDecimal.valueOf(345.34))\n                .orderStatus(OrderStatus.COMPLETED)\n                .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.of(2023, 1, 1, 2, 2)))\n                .booksInOrder(List.of(Book.builder()\n                        .name(\"qwerty\")\n                        .status(BookStatus.AVAILABLE)\n                        .price(BigDecimal.valueOf(12.12))\n                        .build()))\n                .build();\n        Order completedOrder2 = Order.builder()", "                .build();\n        Order completedOrder2 = Order.builder()\n                .user(User.builder().firstName(\"qwerty\").build())\n                .orderCost(BigDecimal.valueOf(345.34))\n                .orderStatus(OrderStatus.COMPLETED)\n                .timeOfCompletingOrder(Timestamp.valueOf(LocalDateTime.of(2023, 1, 1, 2, 2)))\n                .booksInOrder(List.of(Book.builder()\n                        .name(\"qwerty\")\n                        .status(BookStatus.AVAILABLE)\n                        .price(BigDecimal.valueOf(12.12))", "                        .status(BookStatus.AVAILABLE)\n                        .price(BigDecimal.valueOf(12.12))\n                        .build()))\n                .build();\n\n        orderService.saveOrder(completedOrder1);\n        orderService.saveOrder(completedOrder2);\n\n\n        assertEquals(BigDecimal.valueOf(345.34), orderService.getIncomeForPeriod(LocalDateTime.of(2023, 1, 1, 1, 1), LocalDateTime.of(2023, 2, 1, 1, 1)));", "\n        assertEquals(BigDecimal.valueOf(345.34), orderService.getIncomeForPeriod(LocalDateTime.of(2023, 1, 1, 1, 1), LocalDateTime.of(2023, 2, 1, 1, 1)));\n        assertEquals(BigDecimal.valueOf(690.68), orderService.getIncomeForPeriod(LocalDateTime.of(2023, 1, 1, 1, 1), LocalDateTime.of(2023, 3, 1, 1, 1)));\n        assertEquals(BigDecimal.ZERO, orderService.getIncomeForPeriod(LocalDateTime.of(2024, 1, 1, 1, 1), LocalDateTime.of(2023, 3, 1, 1, 1)));\n\n    }\n\n    @Test\n    void getAllBooksFromOrder() {\n        orderService.saveOrder(testOrder);", "    void getAllBooksFromOrder() {\n        orderService.saveOrder(testOrder);\n\n        assertEquals(testOrder.getBooksInOrder(), orderService.getAllBooksFromOrder(testOrder.getOrderId()));\n    }\n}"]}
{"filename": "src/test/java/com/andersentask/bookshop/book/repositories/BookRepositoryTest.java", "chunked_list": ["package com.andersentask.bookshop.book.repositories;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport jakarta.persistence.EntityManager;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport java.math.BigDecimal;", "\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BookRepositoryTest {\n\n", "\n\n    @Mock\n    private EntityManager entityManager;\n\n    private BookRepository bookRepository;\n    private final Book testBook = Book.builder()\n            .name(\"qwerty\")\n            .status(BookStatus.AVAILABLE)\n            .price(BigDecimal.valueOf(12.12))", "            .status(BookStatus.AVAILABLE)\n            .price(BigDecimal.valueOf(12.12))\n            .build();\n\n    @BeforeEach\n    void setUp() {\n        bookRepository = new BookRepository(entityManager);\n    }\n\n    @Test", "\n    @Test\n    void save() {\n        bookRepository.save(testBook);\n\n        assertNotNull(testBook.getId());\n        assertEquals(Optional.of(testBook), bookRepository.findById(1L));\n        assertEquals(1, bookRepository.findAll().size());\n        assertTrue(bookRepository.findAll().contains(testBook));\n    }", "        assertTrue(bookRepository.findAll().contains(testBook));\n    }\n\n    @Test\n    void findById() {\n        bookRepository.save(testBook);\n        Optional<Book> result = bookRepository.findById(testBook.getId());\n\n        assertTrue(result.isPresent());\n        assertEquals(testBook, result.get());", "        assertTrue(result.isPresent());\n        assertEquals(testBook, result.get());\n\n        assertEquals(Optional.empty(), bookRepository.findById(2L));\n    }\n\n    @Test\n    void findAll() {\n        Book testBook2 = Book.builder()\n                .name(\"qwerty2\")", "        Book testBook2 = Book.builder()\n                .name(\"qwerty2\")\n                .status(BookStatus.OUT_OF_STOCK)\n                .price(BigDecimal.valueOf(22.22))\n                .build();\n\n        bookRepository.save(testBook);\n        bookRepository.save(testBook2);\n\n        List<Book> result = bookRepository.findAll();", "\n        List<Book> result = bookRepository.findAll();\n        assertEquals(2, bookRepository.findAll().size());\n        assertTrue(result.contains(testBook));\n        assertTrue(result.contains(testBook2));\n    }\n}"]}
{"filename": "src/test/java/com/andersentask/bookshop/book/services/BookServiceTest.java", "chunked_list": ["//package com.andersentask.bookshop.book.services;\n//\n//import com.andersentask.bookshop.book.entities.Book;\n//import com.andersentask.bookshop.book.enums.BookSort;\n//import com.andersentask.bookshop.book.enums.BookStatus;\n//import com.andersentask.bookshop.book.repositories.BookRepository;\n//import org.junit.jupiter.api.BeforeEach;\n//import org.junit.jupiter.api.Test;\n//import org.junit.jupiter.api.extension.ExtendWith;\n//import org.mockito.Mock;", "//import org.junit.jupiter.api.extension.ExtendWith;\n//import org.mockito.Mock;\n//import org.mockito.junit.jupiter.MockitoExtension;\n//\n//import javax.sql.DataSource;\n//import java.math.BigDecimal;\n//import java.util.List;\n//import java.util.Optional;\n//\n//import static org.junit.jupiter.api.Assertions.*;", "//\n//import static org.junit.jupiter.api.Assertions.*;\n//\n//@ExtendWith(MockitoExtension.class)\n//class BookServiceTest {\n//\n//    @Mock\n//    private BookRepository bookRepository;\n//    @Mock\n//    private DataSource dataSource;", "//    @Mock\n//    private DataSource dataSource;\n//    private BookService bookService;\n//\n//    @BeforeEach\n//    void setUp() {\n//        bookRepository = new BookRepository(dataSource);\n//        bookService = new BookService(bookRepository);\n//    }\n//", "//    }\n//\n//    private final Book testBook = Book.builder()\n//            .name(\"qwerty\")\n//            .status(BookStatus.AVAILABLE)\n//            .price(BigDecimal.valueOf(12.12))\n//            .build();\n//\n//    private final Book testBook2 = Book.builder()\n//            .name(\"qwerty2\")", "//    private final Book testBook2 = Book.builder()\n//            .name(\"qwerty2\")\n//            .status(BookStatus.OUT_OF_STOCK)\n//            .price(BigDecimal.valueOf(22.22))\n//            .build();\n//\n//    private final Book testBook3 = Book.builder()\n//            .name(\"qwerty3\")\n//            .status(BookStatus.OUT_OF_STOCK)\n//            .price(BigDecimal.valueOf(33.33))", "//            .status(BookStatus.OUT_OF_STOCK)\n//            .price(BigDecimal.valueOf(33.33))\n//            .build();\n//\n//    @Test\n//    void save() {\n//        bookService.save(testBook);\n//\n//        assertNotNull(testBook.getId());\n//        assertEquals(Optional.of(testBook), bookService.getBookById(testBook.getId()));", "//        assertNotNull(testBook.getId());\n//        assertEquals(Optional.of(testBook), bookService.getBookById(testBook.getId()));\n//        assertEquals(1, bookService.getAllBooks().size());\n//        assertTrue(bookRepository.findAll().contains(testBook));\n//    }\n//\n//    @Test\n//    void getAllBooks() {\n//        bookService.save(testBook);\n//        bookService.save(testBook2);", "//        bookService.save(testBook);\n//        bookService.save(testBook2);\n//        List<Book> bookList = bookService.getAllBooks();\n//\n//        assertEquals(2, bookService.getAllBooks().size());\n//        assertTrue(bookList.contains(testBook));\n//        assertTrue(bookList.contains(testBook2));\n//    }\n//\n//    @Test", "//\n//    @Test\n//    void getBookById() {\n//        bookService.save(testBook);\n//        Optional<Book> result = bookService.getBookById(testBook.getId());\n//\n//        assertTrue(result.isPresent());\n//        assertEquals(testBook, result.get());\n//        assertEquals(Optional.empty(), bookService.getBookById(2L));\n//    }", "//        assertEquals(Optional.empty(), bookService.getBookById(2L));\n//    }\n//\n//    @Test\n//    void setStatusToBook() {\n//        bookService.save(testBook);\n//        bookService.setStatusToBook(testBook.getId(), BookStatus.OUT_OF_STOCK);\n//\n//        assertEquals(BookStatus.OUT_OF_STOCK, testBook.getStatus());\n//        assertNotNull(testBook.getId());", "//        assertEquals(BookStatus.OUT_OF_STOCK, testBook.getStatus());\n//        assertNotNull(testBook.getId());\n//        assertEquals(Optional.of(testBook), bookService.getBookById(testBook.getId()));\n//        assertTrue(bookRepository.findAll().contains(testBook));\n//    }\n//\n//    @Test\n//    void getSortedBooks() {\n//        bookService.save(testBook);\n//        bookService.save(testBook2);", "//        bookService.save(testBook);\n//        bookService.save(testBook2);\n//\n//        bookService.getSortedBooks(BookSort.ID);\n//        assertEquals(1L, bookService.getAllBooks().get(0).getId());\n//        assertEquals(2L, bookService.getAllBooks().get(1).getId());\n//\n//        bookService.getSortedBooks(BookSort.NAME);\n//        assertEquals(\"qwerty\", bookService.getAllBooks().get(0).getName());\n//        assertEquals(\"qwerty2\", bookService.getAllBooks().get(1).getName());", "//        assertEquals(\"qwerty\", bookService.getAllBooks().get(0).getName());\n//        assertEquals(\"qwerty2\", bookService.getAllBooks().get(1).getName());\n//\n//        bookService.getSortedBooks(BookSort.PRICE);\n//        assertEquals(BigDecimal.valueOf(12.12), bookService.getAllBooks().get(0).getPrice());\n//        assertEquals(BigDecimal.valueOf(22.22), bookService.getAllBooks().get(1).getPrice());\n//\n//        bookService.getSortedBooks(BookSort.STATUS);\n//        assertEquals(BookStatus.AVAILABLE, bookService.getAllBooks().get(0).getStatus());\n//        assertEquals(BookStatus.OUT_OF_STOCK, bookService.getAllBooks().get(1).getStatus());", "//        assertEquals(BookStatus.AVAILABLE, bookService.getAllBooks().get(0).getStatus());\n//        assertEquals(BookStatus.OUT_OF_STOCK, bookService.getAllBooks().get(1).getStatus());\n//    }\n//\n//    @Test\n//    void getBooksByIds() {\n//        bookService.save(testBook);\n//        bookService.save(testBook2);\n//        List<Book> bookList = bookService.getAllBooks();\n//        List<Long> ids = bookRepository.findAll().stream().map(Book::getId).toList();", "//        List<Book> bookList = bookService.getAllBooks();\n//        List<Long> ids = bookRepository.findAll().stream().map(Book::getId).toList();\n//\n//        assertEquals(bookList, bookService.getBooksByIds(ids));\n//    }\n//\n//    @Test\n//    void getBooksOutOfStock() {\n//        bookService.save(testBook);\n//        bookService.save(testBook2);", "//        bookService.save(testBook);\n//        bookService.save(testBook2);\n//        bookService.save(testBook3);\n//        List<Book> bookList = bookService.getAllBooks();\n//\n//        assertEquals(bookService.getAllBooks().subList(1, 3), bookService.getBooksOutOfStock(bookList));\n//    }\n//\n//    @Test\n//    void allBooksAreAvailable() {", "//    @Test\n//    void allBooksAreAvailable() {\n//        bookService.save(testBook);\n//        bookService.save(testBook2);\n//        bookService.save(testBook3);\n//        List<Book> bookList = bookService.getAllBooks();\n//\n//        bookService.getAllBooks();\n//        assertFalse(bookService.allBooksAreAvailable(bookList));\n//    }", "//        assertFalse(bookService.allBooksAreAvailable(bookList));\n//    }\n//}"]}
{"filename": "src/test/java/com/andersentask/bookshop/request/repository/RequestRepositoryTest.java", "chunked_list": ["package com.andersentask.bookshop.request.repository;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.user.entities.User;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RequestRepositoryTest {\n\n    @Mock\n    private RequestRepository requestRepository;", "    @Mock\n    private RequestRepository requestRepository;\n\n    @BeforeEach\n    void setUp() {\n//        requestRepository = new RequestRepository(dataSource);\n    }\n\n    private final Request testRequest = Request.builder()\n            .user(User.builder().firstName(\"qwerty\").build())", "    private final Request testRequest = Request.builder()\n            .user(User.builder().firstName(\"qwerty\").build())\n            .book(Book.builder().name(\"123\").build())\n            .build();\n\n    @Test\n    void save() {\n        requestRepository.save(testRequest);\n\n        assertNotNull(testRequest.getId());", "\n        assertNotNull(testRequest.getId());\n        assertEquals(Optional.of(testRequest), requestRepository.findById(1L));\n        assertEquals(1, requestRepository.findAll().size());\n        assertTrue(requestRepository.findAll().contains(testRequest));\n    }\n\n    @Test\n    void delete() {\n        requestRepository.save(testRequest);", "    void delete() {\n        requestRepository.save(testRequest);\n//        requestRepository.delete(testRequest.getId());\n\n        assertTrue(requestRepository.findAll().isEmpty());\n    }\n\n    @Test\n    void findById() {\n        requestRepository.save(testRequest);", "    void findById() {\n        requestRepository.save(testRequest);\n        Optional<Request> result = requestRepository.findById(testRequest.getId());\n\n        assertTrue(result.isPresent());\n        assertEquals(testRequest, result.get());\n\n        assertEquals(Optional.empty(), requestRepository.findById(2L));\n    }\n", "    }\n\n    @Test\n    void findAll() {\n        Request testRequest2 = Request.builder()\n                .user(User.builder().firstName(\"qwerty2\").build())\n                .book(Book.builder().name(\"1234\").build())\n                .build();\n\n        requestRepository.save(testRequest);", "\n        requestRepository.save(testRequest);\n        requestRepository.save(testRequest2);\n\n        List<Request> result = requestRepository.findAll();\n        assertEquals(2, requestRepository.findAll().size());\n        assertTrue(result.contains(testRequest));\n        assertTrue(result.contains(testRequest2));\n    }\n}", "    }\n}"]}
{"filename": "src/test/java/com/andersentask/bookshop/request/services/RequestServiceTest.java", "chunked_list": ["package com.andersentask.bookshop.request.services;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.request.repository.RequestRepository;\nimport com.andersentask.bookshop.user.entities.User;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n", "import org.mockito.Mock;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RequestServiceTest {\n\n    @Mock", "\n    @Mock\n    private RequestRepository requestRepository;\n\n    private RequestService requestService;\n\n    @BeforeEach\n    void setUp() {\n//        requestRepository = new RequestRepository(dataSource);\n        requestService = new RequestService(requestRepository);", "//        requestRepository = new RequestRepository(dataSource);\n        requestService = new RequestService(requestRepository);\n    }\n\n    private final Request testRequest = Request.builder()\n            .user(User.builder()\n                    .firstName(\"qwerty\")\n                    .id(1L)\n                    .build())\n            .book(Book.builder()", "                    .build())\n            .book(Book.builder()\n                    .id(1L)\n                    .name(\"123\")\n                    .build())\n            .build();\n\n    private final Request testRequest2 = Request.builder()\n            .user(User.builder()\n                    .firstName(\"qwerty2\")", "            .user(User.builder()\n                    .firstName(\"qwerty2\")\n                    .build())\n            .book(Book.builder()\n                    .id(2L)\n                    .name(\"1234\")\n                    .build())\n            .build();\n\n    private final Request testRequest3 = Request.builder()", "\n    private final Request testRequest3 = Request.builder()\n            .user(User.builder()\n                    .firstName(\"qwerty3\")\n                    .build())\n            .book(Book.builder()\n                    .id(1L)\n                    .name(\"12345\")\n                    .build())\n            .build();", "                    .build())\n            .build();\n\n    @Test\n    void saveRequest() {\n        requestService.saveRequest(testRequest);\n\n        assertNotNull(testRequest.getId());\n        assertEquals(Optional.of(testRequest), requestRepository.findById(testRequest.getId()));\n        assertEquals(1, requestService.getAllRequests().size());", "        assertEquals(Optional.of(testRequest), requestRepository.findById(testRequest.getId()));\n        assertEquals(1, requestService.getAllRequests().size());\n        assertTrue(requestService.getAllRequests().contains(testRequest));\n    }\n\n    @Test\n    void getAllRequests() {\n        requestService.saveRequest(testRequest);\n        requestService.saveRequest(testRequest2);\n", "        requestService.saveRequest(testRequest2);\n\n        List<Request> requestList = requestService.getAllRequests();\n\n        assertEquals(2, requestService.getAllRequests().size());\n        assertTrue(requestList.contains(testRequest));\n        assertTrue(requestList.contains(testRequest2));\n    }\n\n    @Test", "\n    @Test\n    void deleteRequest() {\n        requestService.saveRequest(testRequest);\n        requestService.deleteRequest(testRequest.getBook());\n\n        assertTrue(requestRepository.findAll().isEmpty());\n    }\n\n    @Test", "\n    @Test\n    void getAllBooksFromRequests() {\n        requestService.saveRequest(testRequest);\n        requestService.saveRequest(testRequest2);\n        requestService.saveRequest(testRequest3);\n\n        List<Book> bookList = requestService.getAllRequests().stream().map(Request::getBook).toList();\n\n        assertEquals(bookList, requestService.getAllBooksFromAllRequests());", "\n        assertEquals(bookList, requestService.getAllBooksFromAllRequests());\n    }\n\n    @Test\n    void getNumberOfRequestsOnBook() {\n        requestService.saveRequest(testRequest);\n        requestService.saveRequest(testRequest2);\n\n", "\n\n        assertEquals(1, requestService.getNumberOfRequestsOnBook(testRequest2.getBook().getId()));\n        assertEquals(1, requestService.getNumberOfRequestsOnBook(testRequest.getBook().getId()));\n\n        requestService.saveRequest(testRequest3);\n\n        assertEquals(2, requestService.getNumberOfRequestsOnBook(testRequest.getBook().getId()));\n    }\n}", "    }\n}"]}
{"filename": "src/main/java/com/andersentask/bookshop/BookshopApplication.java", "chunked_list": ["package com.andersentask.bookshop;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BookshopApplication {\n    public static void main(String[] args) {\n        try{\n            SpringApplication.run(BookshopApplication.class, args);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n", "        try{\n            SpringApplication.run(BookshopApplication.class, args);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/user/repository/UserRepository.java", "chunked_list": ["package com.andersentask.bookshop.user.repository;\n\nimport com.andersentask.bookshop.user.entities.User;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Deprecated\npublic class UserRepository {\n\n    private final List<User> users;\n\n    private Long id;\n\n    public UserRepository() {\n        this.id = 1L;\n        this.users = new ArrayList<>();\n    }\n", "@Deprecated\npublic class UserRepository {\n\n    private final List<User> users;\n\n    private Long id;\n\n    public UserRepository() {\n        this.id = 1L;\n        this.users = new ArrayList<>();\n    }\n", "    public User save(User user) {\n        user.setId(id++);\n        users.add(user);\n        return user;\n    }\n\n    public Optional<User> findById(Long id) {\n        return users.stream()\n                .filter(user -> user.getId().equals(id))\n                .findFirst();\n    }\n\n    public List<User> findAll() {\n        return users;\n    }\n\n    public Optional<User> findByEmailIgnoreCase(String email) {\n        return users.stream()\n                .filter(user -> user.getEmail().equalsIgnoreCase(email))\n                .findFirst();\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/user/enums/Role.java", "chunked_list": ["package com.andersentask.bookshop.user.enums;\n\npublic enum Role {\n    ROLE_USER,\n    ROLE_ADMIN\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/user/service/UserService.java", "chunked_list": ["package com.andersentask.bookshop.user.service;\n\nimport com.andersentask.bookshop.user.entities.User;\nimport com.andersentask.bookshop.user.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.Optional;\n\n@RequiredArgsConstructor\n@Deprecated\npublic class UserService {\n\n    private final UserRepository userRepository;\n", "@RequiredArgsConstructor\n@Deprecated\npublic class UserService {\n\n    private final UserRepository userRepository;\n\n    public boolean registration(User user) {\n        if (userRepository.findByEmailIgnoreCase(user.getEmail()).isPresent()) {\n            return false;\n        }\n        userRepository.save(user);\n        return true;\n    }\n\n    public Optional<User> findByEmail(String email) {\n        return userRepository.findByEmailIgnoreCase(email);\n    }\n}\n\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/user/entities/User.java", "chunked_list": ["package com.andersentask.bookshop.user.entities;\n\nimport com.andersentask.bookshop.user.enums.Role;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter", "\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class User {\n\n    private Long id;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String email;\n\n    private String password;\n\n    private Role role;\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/broker/Commands.java", "chunked_list": ["package com.andersentask.bookshop.broker;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.enums.BookSort;\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport com.andersentask.bookshop.book.services.BookService;\nimport com.andersentask.bookshop.broker.enums.ResultOfOperation;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderSort;\nimport com.andersentask.bookshop.order.enums.OrderStatus;", "import com.andersentask.bookshop.order.enums.OrderSort;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport com.andersentask.bookshop.order.service.OrderService;\nimport com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.request.services.RequestService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Comparator;\nimport java.util.HashMap;", "import java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\n@RequiredArgsConstructor\npublic class Commands {\n\n    private final RequestService requestService;\n\n    private final OrderService orderService;\n\n    private final BookService bookService;\n\n    private final EntityFactory entityFactory;\n\n\n    /**\n     * Method set new status to book\n     * Returns result of operation:\n     * WRONG_BOOK_ID => if the input can be parsed to Long, but there is no such ID for books\n     * BOOK_ALREADY_HAS_THIS_STATUS => if input has the same bookstatus, as the book\n     * BOOK_STATUS_UPDATED => if status was successfully updated\n     * If the book status changed from OUT_OF_STOCK to AVAILABLE,\n     * all requests for this book are deleted\n     *\n     * @param bookId     the bookId of the book and should be got from user\n     * @param bookStatus bookStatus of the book and got from user\n     * @return the status of method completion as ENUM\n     */\n    public ResultOfOperation.SetBookStatus setStatusToBookAndDeleteCorrespondingRequests(Long bookId, BookStatus bookStatus) {\n        return bookService\n                .getBookById(bookId)\n                .map(book -> setBookStatus(book, bookStatus))\n                .orElse(ResultOfOperation.SetBookStatus.WRONG_BOOK_ID);\n    }\n\n    private ResultOfOperation.SetBookStatus setBookStatus(Book book, BookStatus bookStatus) {", "        if (book.getStatus() == bookStatus) {\n            return ResultOfOperation.SetBookStatus.BOOK_ALREADY_HAS_THIS_STATUS;\n        }\n        bookService.setStatusToBook(book.getId(), bookStatus);\n        return ResultOfOperation.SetBookStatus.BOOK_STATUS_UPDATED;\n    }\n\n    /**\n     * Create and save request from a book (doesn't matter, what status of book)\n     * Returns result of operation as ENUM:\n     * WRONG_BOOK_ID => if the input can be parsed to Long, but there is no such ID for books\n     * REQUEST_CREATED => if the request was successfully created\n     *\n     * @param bookId book object and should be got from user\n     * @return the status of method completion as ENUM\n     */\n    public ResultOfOperation.CreateRequest createRequest(Long bookId) {\n        return bookService\n                .getBookById(bookId)\n                .map(this::createRequestFromBook)\n                .orElse(ResultOfOperation.CreateRequest.WRONG_BOOK_ID);\n    }\n\n    private ResultOfOperation.CreateRequest createRequestFromBook(Book book) {\n        Request request = entityFactory.buildRequest(book);\n        requestService.saveRequest(request);\n        return ResultOfOperation.CreateRequest.REQUEST_CREATED;\n    }\n\n    /**\n     * return list of books, sorted by param bookSort\n     * if no correct sort values entered, return list sorted by id\n     *\n     * @param bookSort can be name, price, status or id and should be got from user\n     * @return books, optionally sorted by entered param\n     */\n    public List<Book> getSortedBooks(BookSort bookSort) {\n        return bookService.getSortedBooks(bookSort);\n    }\n\n    /**\n     * Create and save order from a list of id of books\n     * If book is out_of_stock, also create and save request\n     * Returns result of operation as ENUM:\n     * WRONG_BOOK_ID => if the input can be parsed to Long, but there is no such ID for books\n     * ORDER_CREATED => if the order was successfully created and saved\n     * ORDER_AND_REQUESTS_CREATED => of the order and requests (n=>1) were successfully created and saved\n     *\n     * @param ids list of id of books and should be got from user\n     * @return the status of method completion as ENUM\n     */\n    public ResultOfOperation.CreateOrder createOrder(List<Long> ids) {\n        List<Book> booksToOrder = bookService.getBooksByIds(ids);", "        if (booksToOrder.size() != ids.size()) {\n            return ResultOfOperation.CreateOrder.WRONG_BOOK_ID;\n        }\n        Order order = entityFactory.buildOrder(booksToOrder);\n        return createOrderAndRequestsIfOrderHasOutOfStockBooks(order, booksToOrder);\n    }\n\n    private ResultOfOperation.CreateOrder createOrderAndRequestsIfOrderHasOutOfStockBooks(Order order, List<Book> booksToOrder) {\n        orderService.saveOrder(order);\n        List<Book> booksToRequest = bookService.getBooksOutOfStock(booksToOrder);\n        if (!booksToRequest.isEmpty()) {\n            return ResultOfOperation.CreateOrder.ORDER_AND_REQUESTS_CREATED;\n        }\n        return ResultOfOperation.CreateOrder.ORDER_CREATED;\n    }\n\n    /**\n     * method set new status to order with following logic:\n     * in_processing => canceled, in_processing => completed\n     * canceled => in_processing\n     * completed can't be changed. To be completed, order should have all of it books available\n     * Returns result of operation as ENUM:\n     * WRONG_ORDER_ID => if the input can be parsed to Long, but there is no such ID for order\n     * ORDER_STATUS_CAN_NOT_BE_UPDATED => if the logic is not met\n     * STATUS_UPDATED => if the order status was successfully updated\n     *\n     * @param id          id of order and should be got from user\n     * @param orderStatus can be completed, canceled or in_processing and should be got from user\n     * @return the status of method completion as ENUM\n     */\n    public ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck changeStatusOfOrderIncludingBooksCheck(Long id, OrderStatus orderStatus) {\n        return orderService\n                .getOrderById(id)\n                .map(order -> changeStatusOfOrder(order, orderStatus))\n                .orElse(ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck.WRONG_ORDER_ID);\n    }\n\n    private ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck changeStatusOfOrder(Order order, OrderStatus orderStatus) {", "        if (!booksToRequest.isEmpty()) {\n            return ResultOfOperation.CreateOrder.ORDER_AND_REQUESTS_CREATED;\n        }\n        return ResultOfOperation.CreateOrder.ORDER_CREATED;\n    }\n\n    /**\n     * method set new status to order with following logic:\n     * in_processing => canceled, in_processing => completed\n     * canceled => in_processing\n     * completed can't be changed. To be completed, order should have all of it books available\n     * Returns result of operation as ENUM:\n     * WRONG_ORDER_ID => if the input can be parsed to Long, but there is no such ID for order\n     * ORDER_STATUS_CAN_NOT_BE_UPDATED => if the logic is not met\n     * STATUS_UPDATED => if the order status was successfully updated\n     *\n     * @param id          id of order and should be got from user\n     * @param orderStatus can be completed, canceled or in_processing and should be got from user\n     * @return the status of method completion as ENUM\n     */\n    public ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck changeStatusOfOrderIncludingBooksCheck(Long id, OrderStatus orderStatus) {\n        return orderService\n                .getOrderById(id)\n                .map(order -> changeStatusOfOrder(order, orderStatus))\n                .orElse(ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck.WRONG_ORDER_ID);\n    }\n\n    private ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck changeStatusOfOrder(Order order, OrderStatus orderStatus) {", "        if (orderHasSameStatus(order, orderStatus)) {\n            return ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck.ORDER_ALREADY_HAS_THIS_STATUS;\n        }\n        if (orderStatusNotToBeCompletedOrAllBooksAvailable(order, orderStatus)) {\n            order = orderService.changeStatusOfOrder(order.getId(), orderStatus);\n        }\n        return orderStatusUpdateWasSuccessful(order, orderStatus);\n    }\n\n    private boolean orderHasSameStatus(Order order, OrderStatus orderStatus) {\n        return order.getStatus() == orderStatus;\n    }\n\n    private boolean orderStatusNotToBeCompletedOrAllBooksAvailable(Order order, OrderStatus orderStatus) {\n        boolean allBooksAvailable = bookService.allBooksAreAvailable(order.getBooks());\n        return orderStatus != OrderStatus.COMPLETED || allBooksAvailable;\n    }\n\n    private ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck orderStatusUpdateWasSuccessful(Order order, OrderStatus orderStatus) {\n        return order.getStatus() == orderStatus ?\n                ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck.STATUS_UPDATED :\n                ResultOfOperation.ChangeStatusOfOrderIncludingBooksCheck.ORDER_STATUS_CAN_NOT_BE_UPDATED;\n    }\n\n    /**\n     * return list of orders, sorted by param orderSort\n     * if no correct sort values entered, return list sorted by id\n     *\n     * @param orderSort can be cost, completion_date or status and should be got from user\n     * @return orders, optionally sorted by entered param\n     */\n    public List<Order> getSortedOrders(OrderSort orderSort) {\n        return orderService.getSortedOrders(orderSort);\n    }\n\n    /**\n     * return optional of number of the requests on the book\n     * if the value of the optional is set, that means, that book id is entered correct\n     * otherwise, the value of the optional is empty (means, book id is invalid)\n     *\n     * @param id id of the book and should be got from user\n     * @return number of the request on the precise book\n     */", "    public Long getNumberOfRequestsOnBook(Long id) {\n        return bookService\n                .getBookById(id)\n                .map(requestService::getNumberOfRequestsOnBook)\n                .orElse(0L);\n    }\n\n    /**\n     * return id of books and the number of requests on these books in descending order\n     *\n     * @return id of the book and number of requests on this book\n     */\n    public Map<Long, Long> getBooksAndNumberOfRequests() {\n        Map<Long, Long> map = new HashMap<>();\n        requestService.getAllBooksFromAllRequests()\n                .stream()\n                .distinct()\n                .sorted(Comparator.comparing(book -> getNumberOfRequestsOnBook(book.getId()),\n                        Comparator.reverseOrder()))\n                .forEachOrdered(book -> map.put(book.getId(),\n                        getNumberOfRequestsOnBook(book.getId())));\n        return map;\n    }\n\n    /**\n     * return order by Order id\n     *\n     * @param orderId id of the order and should be got from user\n     * @return Order object\n     */", "    public Order getOrderById(Long orderId) {\n        return orderService.getOrderById(orderId)\n                .orElseThrow(() -> new IllegalArgumentException(\"No order with such ID\"));\n    }\n\n    /**\n     * return all requests\n     *\n     * @return requests\n     */\n    public List<Request> getAllRequests() {\n        return requestService.getAllRequests();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/broker/EntityFactory.java", "chunked_list": ["package com.andersentask.bookshop.broker;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport com.andersentask.bookshop.request.entities.Request;\nimport org.springframework.stereotype.Component;\n\nimport java.math.BigDecimal;\nimport java.util.List;", "import java.math.BigDecimal;\nimport java.util.List;\n\n@Component\npublic class EntityFactory {\n\n    public Request buildRequest(Book book) {\n        return Request.builder()\n                .book(book)\n                .build();\n    }\n", "    public Order buildOrder(List<Book> books) {\n        return Order.builder()\n                .cost(getCostOfListOfBooks(books))\n                .status(OrderStatus.IN_PROCESS)\n                .books(books)\n                .build();\n    }\n\n    private BigDecimal getCostOfListOfBooks(List<Book> books) {\n        return books.stream()\n                .map(Book::getPrice)\n                .reduce(BigDecimal.ZERO, BigDecimal::add);\n    }\n}\n\n\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/broker/enums/ResultOfOperation.java", "chunked_list": ["package com.andersentask.bookshop.broker.enums;\n\npublic enum ResultOfOperation {\n    ;\n\n    public enum SetBookStatus {\n        WRONG_BOOK_ID,\n        BOOK_ALREADY_HAS_THIS_STATUS,\n        BOOK_STATUS_UPDATED,\n        INCORRECT_ENTRANCE_OF_BOOK_ID_OR_BOOK_STATUS\n    }\n", "    public enum CreateRequest {\n        WRONG_BOOK_ID,\n        REQUEST_CREATED,\n        INCORRECT_ENTRANCE_OF_BOOK_ID\n    }\n\n    public enum CreateOrder {\n        WRONG_BOOK_ID,\n        ORDER_CREATED,\n        ORDER_AND_REQUESTS_CREATED,\n        INCORRECT_ENTRANCE_OF_BOOK_ID\n    }\n", "    public enum ChangeStatusOfOrderIncludingBooksCheck {\n        WRONG_ORDER_ID,\n        ORDER_STATUS_CAN_NOT_BE_UPDATED,\n        STATUS_UPDATED,\n        ORDER_ALREADY_HAS_THIS_STATUS,\n        INCORRECT_ENTRANCE_OF_ORDER_ID_OR_BOOK_STATUS\n    }\n\n    public enum GetNumberOfRequestsOnBook {\n        WRONG_BOOK_ID,\n        INCORRECT_ENTRANCE_OF_BOOK_ID\n    }\n", "    public enum GetNumberOfRequestsOnBook {\n        WRONG_BOOK_ID,\n        INCORRECT_ENTRANCE_OF_BOOK_ID\n    }\n\n    public enum GetAllBooksFromOrder {\n        WRONG_ORDER_ID,\n        THE_LIST_OF_BOOKS_BELOW,\n    }\n\n    public enum getIncomeForPeriod {\n        WRONG_DATE\n    }\n", "    public enum getIncomeForPeriod {\n        WRONG_DATE\n    }\n\n    public enum GetBooksAndNumberOfRequests {\n        NO_REQUESTS\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/response/ApplicationError.java", "chunked_list": ["package com.andersentask.bookshop.response;\n\nimport lombok.*;\n\nimport java.io.Serializable;\n\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ApplicationError implements Serializable {\n\n    private int statusCode;\n\n    private String errorMessage;\n}\n", "@AllArgsConstructor\n@NoArgsConstructor\npublic class ApplicationError implements Serializable {\n\n    private int statusCode;\n\n    private String errorMessage;\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/order/repositories/OrderRepository.java", "chunked_list": ["package com.andersentask.bookshop.order.repositories;\n\nimport com.andersentask.bookshop.order.entities.Order;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface OrderRepository extends JpaRepository<Order,Long> {\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/order/enums/OrderStatus.java", "chunked_list": ["package com.andersentask.bookshop.order.enums;\n\npublic enum OrderStatus {\n    IN_PROCESS,\n    COMPLETED,\n    CANCELED\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/order/enums/OrderSort.java", "chunked_list": ["package com.andersentask.bookshop.order.enums;\n\npublic enum OrderSort {\n    ID,\n    COST,\n    TIME,\n    STATUS\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/order/service/OrderService.java", "chunked_list": ["package com.andersentask.bookshop.order.service;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.services.BookService;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderSort;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport com.andersentask.bookshop.order.repositories.OrderRepository;\nimport com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.request.services.RequestService;", "import com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.request.services.RequestService;\nimport lombok.RequiredArgsConstructor;\nimport org.aspectj.weaver.ast.Or;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\nimport java.util.List;", "import java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Optional;\n\n@RequiredArgsConstructor\n@Service\npublic class OrderService {\n\n    private final OrderRepository orderRepository;\n\n    private final RequestService requestService;\n\n    private final BookService bookService;\n\n    public List<Order> getSortedOrders(OrderSort orderSort) {\n        return orderRepository.findAll(Sort.by(Sort.Direction.ASC,\n                orderSort.toString().toLowerCase(Locale.ROOT)));\n    }\n", "    public void saveOrder(Order order) {\n        orderRepository.save(order);\n        createRequestsFromOrder(order);\n    }\n\n    private void createRequestsFromOrder(Order order){\n        List<Book> booksToRequest = bookService.getBooksOutOfStock(order.getBooks());\n        for (Book book : booksToRequest) {\n            Request request = Request.builder()\n                    .book(book)\n                    .build();\n            requestService.saveRequest(request);\n        }\n    }\n\n    public Optional<Order> getOrderById(Long id) {\n        return orderRepository.findById(id);\n    }\n", "    public Order changeStatusOfOrder(Long orderId, OrderStatus orderStatus) {\n        Order orderToUpdate = orderRepository.findById(orderId).orElseThrow();\n        if (fromInProcessToCompleted(orderToUpdate, orderStatus)) {\n            orderToUpdate.setStatus(OrderStatus.COMPLETED);\n            orderToUpdate.setTime(Timestamp.valueOf(LocalDateTime.now()));\n            orderRepository.save(orderToUpdate);\n        }\n        if (fromInProcessToCanceled(orderToUpdate, orderStatus)) {\n            orderToUpdate.setStatus(OrderStatus.CANCELED);\n            orderRepository.save(orderToUpdate);\n        }\n        return orderToUpdate;\n    }\n\n    private boolean fromInProcessToCompleted(Order orderToUpdate, OrderStatus orderStatus) {\n        return orderToUpdate.getStatus() == OrderStatus.IN_PROCESS\n                && orderStatus == OrderStatus.COMPLETED;\n    }\n\n    private boolean fromInProcessToCanceled(Order orderToUpdate, OrderStatus orderStatus) {\n        return orderToUpdate.getStatus() == OrderStatus.IN_PROCESS\n                && orderStatus == OrderStatus.CANCELED;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/order/entities/Order.java", "chunked_list": ["package com.andersentask.bookshop.order.entities;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.order.enums.OrderStatus;;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.Fetch;", "import lombok.NoArgsConstructor;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\n\nimport java.math.BigDecimal;\nimport java.sql.Timestamp;\nimport java.util.List;\n\n@Data\n@Builder", "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"orders\")\npublic class Order {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n\n    @Column(name = \"user_id\")\n    private Long userId;\n\n    @Column (name = \"cost\")\n    private BigDecimal cost;\n\n    @Column(name = \"status\")\n    @Enumerated(EnumType.STRING)\n    private OrderStatus status;\n\n    @Column(name = \"time_of_completing\")\n    private Timestamp time;\n\n    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"orders_books\",\n            joinColumns = @JoinColumn(name = \"order_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"book_id\")\n    )\n    @Fetch(FetchMode.JOIN)\n    private List<Book> books;\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/exception/GlobalExceptionHandler.java", "chunked_list": ["package com.andersentask.bookshop.exception;\n\n\nimport com.andersentask.bookshop.response.ApplicationError;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler\n    public ResponseEntity<ApplicationError> handleException(Exception e) {\n        return ResponseEntity.status(HttpStatus.I_AM_A_TEAPOT.value()).body(ApplicationError.builder()\n                .statusCode(HttpStatus.I_AM_A_TEAPOT.value())\n                .errorMessage(e.getMessage())\n                .build());\n    }\n}\n", "\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler\n    public ResponseEntity<ApplicationError> handleException(Exception e) {\n        return ResponseEntity.status(HttpStatus.I_AM_A_TEAPOT.value()).body(ApplicationError.builder()\n                .statusCode(HttpStatus.I_AM_A_TEAPOT.value())\n                .errorMessage(e.getMessage())\n                .build());\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/book/repositories/BookRepository.java", "chunked_list": ["package com.andersentask.bookshop.book.repositories;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BookRepository extends JpaRepository<Book, Long> {\n\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/book/enums/BookStatus.java", "chunked_list": ["package com.andersentask.bookshop.book.enums;\n\npublic enum BookStatus {\n    AVAILABLE,\n    OUT_OF_STOCK\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/book/enums/BookSort.java", "chunked_list": ["package com.andersentask.bookshop.book.enums;\n\npublic enum BookSort {\n    ID,\n    NAME,\n    PRICE,\n    STATUS\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/book/services/BookService.java", "chunked_list": ["package com.andersentask.bookshop.book.services;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.enums.BookSort;\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport com.andersentask.bookshop.book.repositories.BookRepository;\nimport com.andersentask.bookshop.request.services.RequestService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;", "import org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Optional;\n\n@RequiredArgsConstructor\n@Service\npublic class BookService {\n\n    private final BookRepository bookRepository;\n\n    private final RequestService requestService;\n\n\n    public Optional<Book> getBookById(Long bookId) {\n        return bookRepository.findById(bookId);\n    }\n", "@RequiredArgsConstructor\n@Service\npublic class BookService {\n\n    private final BookRepository bookRepository;\n\n    private final RequestService requestService;\n\n\n    public Optional<Book> getBookById(Long bookId) {\n        return bookRepository.findById(bookId);\n    }\n", "    public void setStatusToBook(Long id, BookStatus bookStatus) {\n        Book bookToUpdate = bookRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"Can't find book with such id\"));\n        bookToUpdate.setStatus(bookStatus);\n        bookRepository.save(bookToUpdate);\n        if (bookStatus == BookStatus.AVAILABLE) {\n            requestService.deleteRequest(bookToUpdate);\n        }\n    }\n\n    public List<Book> getSortedBooks(BookSort bookSort) {\n        return bookRepository.findAll(Sort.by(Sort.Direction.ASC,\n                bookSort.toString().toLowerCase(Locale.ROOT)));\n    }\n\n    public List<Book> getBooksByIds(List<Long> bookIds) {\n        List<Book> books = new ArrayList<>();", "        for (Long bookId: bookIds){\n            getBookById(bookId).ifPresent(books::add);\n        }\n        return books;\n    }\n\n    public List<Book> getBooksOutOfStock(List<Book> books) {\n        return books.stream()\n                .filter(book -> book.getStatus() == BookStatus.OUT_OF_STOCK)\n                .toList();\n    }\n", "    public boolean allBooksAreAvailable(List<Book> books) {\n        return books.stream()\n                .allMatch(book -> book.getStatus() == BookStatus.AVAILABLE);\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/book/entities/Book.java", "chunked_list": ["package com.andersentask.bookshop.book.entities;\n\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;", "import jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.math.BigDecimal;\n", "import java.math.BigDecimal;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@Entity\n@Table(name = \"books\")\npublic class Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"status\")\n    @Enumerated(value = EnumType.STRING)\n    private BookStatus status;\n\n    @Column(name = \"price\")\n    private BigDecimal price;\n}\n", "public class Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"status\")\n    @Enumerated(value = EnumType.STRING)\n    private BookStatus status;\n\n    @Column(name = \"price\")\n    private BigDecimal price;\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/request/repository/RequestRepository.java", "chunked_list": ["package com.andersentask.bookshop.request.repository;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.request.entities.Request;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface RequestRepository extends JpaRepository<Request,Long> {\n\n    void removeByBook(Book book);\n    Long countByBook(Book book);\n}\n", "public interface RequestRepository extends JpaRepository<Request,Long> {\n\n    void removeByBook(Book book);\n    Long countByBook(Book book);\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/request/services/RequestService.java", "chunked_list": ["package com.andersentask.bookshop.request.services;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.request.entities.Request;\nimport com.andersentask.bookshop.request.repository.RequestRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n", "import java.util.List;\n\n@RequiredArgsConstructor\n@Service\npublic class RequestService {\n\n    private final RequestRepository requestRepository;\n\n    public void saveRequest(Request request) {\n        requestRepository.save(request);\n    }\n\n    public List<Request> getAllRequests() {\n        return requestRepository.findAll();\n    }\n", "    public void saveRequest(Request request) {\n        requestRepository.save(request);\n    }\n\n    public List<Request> getAllRequests() {\n        return requestRepository.findAll();\n    }\n\n    public void deleteRequest(Book book) {\n        requestRepository.removeByBook(book);\n    }\n\n    public List<Book> getAllBooksFromAllRequests() {\n        return getAllRequests().stream()\n                .map(Request::getBook)\n                .toList();\n    }\n", "    public void deleteRequest(Book book) {\n        requestRepository.removeByBook(book);\n    }\n\n    public List<Book> getAllBooksFromAllRequests() {\n        return getAllRequests().stream()\n                .map(Request::getBook)\n                .toList();\n    }\n\n    public Long getNumberOfRequestsOnBook(Book book) {\n        return requestRepository.countByBook(book);\n    }\n}\n", "    public Long getNumberOfRequestsOnBook(Book book) {\n        return requestRepository.countByBook(book);\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/request/entities/Request.java", "chunked_list": ["package com.andersentask.bookshop.request.entities;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;", "import org.hibernate.annotations.Fetch;\nimport org.hibernate.annotations.FetchMode;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\n@Table(name = \"requests\")\npublic class Request {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n\n    @Column(name = \"user_id\")\n    private Long userId;\n\n    @ManyToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n    @JoinColumn(name = \"book_id\")\n    @Fetch(FetchMode.JOIN)\n    private Book book;\n}\n", "@Table(name = \"requests\")\npublic class Request {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n\n    @Column(name = \"user_id\")\n    private Long userId;\n\n    @ManyToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n    @JoinColumn(name = \"book_id\")\n    @Fetch(FetchMode.JOIN)\n    private Book book;\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/controllers/OrderController.java", "chunked_list": ["package com.andersentask.bookshop.controllers;\n\nimport com.andersentask.bookshop.broker.Commands;\nimport com.andersentask.bookshop.order.entities.Order;\nimport com.andersentask.bookshop.order.enums.OrderSort;\nimport com.andersentask.bookshop.order.enums.OrderStatus;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\n@RestController\n@RequiredArgsConstructor", "@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/order\")\npublic class OrderController {\n\n    private final Commands commands;\n\n    @GetMapping(\"all\")\n    public ResponseEntity<List<Order>> getOrderList(@RequestParam(name = \"sort\", defaultValue = \"ID\") String sort) {\n        return new ResponseEntity<>(\n                commands.getSortedOrders(OrderSort.valueOf(sort.toUpperCase(Locale.ROOT))),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"new\")\n    public ResponseEntity<Map<String, String>> createOrder(@RequestBody Map<String, List<Long>> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.createOrder(body.get(\"bookIds\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response,HttpStatus.OK);\n    }\n\n    @GetMapping(\"{orderId}\")\n    public ResponseEntity<Order> getBooksFromOrder(@PathVariable Long orderId){\n        return new ResponseEntity<>(\n                commands.getOrderById(orderId),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"{orderId}/status\")\n    public ResponseEntity<Map<String,String>> changeOrderStatus(\n            @PathVariable Long orderId, @RequestBody Map<String, OrderStatus> body){\n        Map<String, String> response = new HashMap<>();\n        String result = commands.changeStatusOfOrderIncludingBooksCheck(orderId, body.get(\"status\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response,HttpStatus.OK);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/controllers/RequestController.java", "chunked_list": ["package com.andersentask.bookshop.controllers;\n\nimport com.andersentask.bookshop.broker.Commands;\nimport com.andersentask.bookshop.request.entities.Request;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/request\")\n@RequiredArgsConstructor\npublic class RequestController {\n\n    private final Commands commands;\n\n    @GetMapping(\"all\")\n    public ResponseEntity<List<Request>> getRequestList() {\n        return new ResponseEntity<>(commands.getAllRequests()\n                , HttpStatus.OK);\n    }\n\n    @GetMapping(\"quantity-of-requests\")\n    public ResponseEntity<Map<Long, Long>> getBooksAndNumberOfRequests() {\n        return new ResponseEntity<>(commands.getBooksAndNumberOfRequests(),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"new\")\n    public ResponseEntity<Map<String,String>> createRequest(@RequestBody Map<String, Long> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.createRequest(body.get(\"bookId\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}\")\n    public ResponseEntity<Long> getNumberOfRequestsOnBook(@PathVariable Long bookId) {\n        return new ResponseEntity<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);\n    }\n}\n", "public class RequestController {\n\n    private final Commands commands;\n\n    @GetMapping(\"all\")\n    public ResponseEntity<List<Request>> getRequestList() {\n        return new ResponseEntity<>(commands.getAllRequests()\n                , HttpStatus.OK);\n    }\n\n    @GetMapping(\"quantity-of-requests\")\n    public ResponseEntity<Map<Long, Long>> getBooksAndNumberOfRequests() {\n        return new ResponseEntity<>(commands.getBooksAndNumberOfRequests(),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"new\")\n    public ResponseEntity<Map<String,String>> createRequest(@RequestBody Map<String, Long> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.createRequest(body.get(\"bookId\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }\n\n    @GetMapping(\"book/{bookId}\")\n    public ResponseEntity<Long> getNumberOfRequestsOnBook(@PathVariable Long bookId) {\n        return new ResponseEntity<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);\n    }\n}\n"]}
{"filename": "src/main/java/com/andersentask/bookshop/controllers/BookController.java", "chunked_list": ["package com.andersentask.bookshop.controllers;\n\nimport com.andersentask.bookshop.book.entities.Book;\nimport com.andersentask.bookshop.book.enums.BookSort;\nimport com.andersentask.bookshop.book.enums.BookStatus;\nimport com.andersentask.bookshop.broker.Commands;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/book\")\npublic class BookController {\n\n    private final Commands commands;\n\n    @GetMapping(\"all\")\n    public ResponseEntity<List<Book>> getBookList(@RequestParam(name = \"sort\", defaultValue = \"ID\") String sort) {\n        return new ResponseEntity<>(\n                commands.getSortedBooks(BookSort.valueOf(sort.toUpperCase(Locale.ROOT))),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"{bookId}/status\")\n    public ResponseEntity<Map<String, String>> changeBookStatus(@PathVariable Long bookId, @RequestBody Map<String, BookStatus> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.setStatusToBookAndDeleteCorrespondingRequests(bookId, body.get(\"status\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }\n}\n", "@RequestMapping(\"/book\")\npublic class BookController {\n\n    private final Commands commands;\n\n    @GetMapping(\"all\")\n    public ResponseEntity<List<Book>> getBookList(@RequestParam(name = \"sort\", defaultValue = \"ID\") String sort) {\n        return new ResponseEntity<>(\n                commands.getSortedBooks(BookSort.valueOf(sort.toUpperCase(Locale.ROOT))),\n                HttpStatus.OK);\n    }\n\n    @PostMapping(\"{bookId}/status\")\n    public ResponseEntity<Map<String, String>> changeBookStatus(@PathVariable Long bookId, @RequestBody Map<String, BookStatus> body) {\n        Map<String, String> response = new HashMap<>();\n        String result = commands.setStatusToBookAndDeleteCorrespondingRequests(bookId, body.get(\"status\"))\n                .toString();\n        response.put(\"operationResult\", result);\n        return new ResponseEntity<>(response, HttpStatus.OK);\n    }\n}\n"]}
