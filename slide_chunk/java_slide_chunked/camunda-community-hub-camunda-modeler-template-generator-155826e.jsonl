{"filename": "template-generator-core/src/main/java/org/camunda/community/template/generator/TemplateProperty.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n/**\n * This annotation can be used to annotate fields and represents one property in a Template in the", "/**\n * This annotation can be used to annotate fields and represents one property in a Template in the\n * Modeler.\n */\n@Retention(RUNTIME)\n@Target(FIELD)\npublic @interface TemplateProperty {\n\n  public static final String STRING = \"String\";\n\n  public static final String TEXT = \"Text\";\n", "  public static final String STRING = \"String\";\n\n  public static final String TEXT = \"Text\";\n\n  public static final String DROPDOWN = \"Dropdown\";\n\n  public static final String PROPERTY = \"property\";\n\n  public static final String HIDDEN = \"Hidden\";\n\n  public static final String INPUT = \"input\";\n", "  public static final String HIDDEN = \"Hidden\";\n\n  public static final String INPUT = \"input\";\n\n  public static final String OUTPUT = \"output\";\n\n  /**\n   * @return label of the property\n   */\n  public String label() default \"\";\n\n  /**\n   * @return type of the property\n   */", "  public String label() default \"\";\n\n  /**\n   * @return type of the property\n   */\n  public String type();\n\n  /**\n   * @return value of the property\n   */\n  public String value() default \"\";\n\n  /**\n   * @return choices containing name and value per index\n   */\n  public Choice[] choices() default {};\n\n  /**\n   * @return description of the property\n   */", "  public String value() default \"\";\n\n  /**\n   * @return choices containing name and value per index\n   */\n  public Choice[] choices() default {};\n\n  /**\n   * @return description of the property\n   */\n  public String description() default \"\";\n\n  /**\n   * @return parameter type \"input\", \"output\" or \"property\"\n   */", "  public String description() default \"\";\n\n  /**\n   * @return parameter type \"input\", \"output\" or \"property\"\n   */\n  public String parameterType() default INPUT;\n\n  /**\n   * @return binding name of the property\n   */\n  public String bindingName() default \"\";\n\n  /**\n   * @return scriptFormat of the property\n   */", "  public String bindingName() default \"\";\n\n  /**\n   * @return scriptFormat of the property\n   */\n  public String scriptFormat() default \"\";\n\n  /**\n   * @return whether the property can be empty or not\n   */\n  public boolean notEmpty() default false;\n\n  /**\n   * @return whether the property should be editable by the user or not\n   */", "  public boolean notEmpty() default false;\n\n  /**\n   * @return whether the property should be editable by the user or not\n   */\n  public boolean isEditable() default true;\n}\n"]}
{"filename": "template-generator-core/src/main/java/org/camunda/community/template/generator/Template.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n/**", "\n/**\n * The Template annotation can be used to annotate methods. This annotation is absolutely necessary\n * because only classes that contain this annotation will be scanned. It represents a Template in\n * the Modeler and contains the corresponding properties which are read from fields of the same\n * class hierarchy annotated with TemplateProperty.\n */\n@Retention(RUNTIME)\n@Target({METHOD, TYPE})\npublic @interface Template {", "@Target({METHOD, TYPE})\npublic @interface Template {\n\n  public static final String SERVICE_TASK = \"bpmn:ServiceTask\";\n\n  /**\n   * @return name of the activity\n   */\n  public String name();\n\n  /**\n   * @return id of the activity\n   */", "  public String name();\n\n  /**\n   * @return id of the activity\n   */\n  public String id();\n\n  /**\n   * @return types the activity should apply to\n   */\n  public String[] appliesTo();\n\n  /**\n   * @return function of the activity\n   */", "  public String function() default \"\";\n\n  /**\n   * @return function name of the activity\n   */\n  public String functionNameProperty() default \"\";\n\n  /**\n   * @return list of additional TemplateProperty annotations for the activity\n   */\n  public TemplateProperty[] templateProperties() default {};\n\n  /**\n   * @return flag to display entries\n   */", "  public boolean entriesVisible() default true;\n}\n"]}
{"filename": "template-generator-core/src/main/java/org/camunda/community/template/generator/Choice.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n/**", "\n/**\n * This annotation should only be used in the choices field of the TemplateProperty annotation. It\n * represents one entry of a dropdown menu.\n */\n@Retention(RUNTIME)\n@Target({METHOD, TYPE})\npublic @interface Choice {\n\n  /**", "\n  /**\n   * @return name of the choice\n   */\n  public String name();\n\n  /**\n   * @return value of the choice\n   */\n  public String value();\n}\n", "  public String value();\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/GeneratorTest.java", "chunked_list": ["package org.camunda.community.template.generator.test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.camunda.community.template.generator.GeneratorParser.INPUT_PARAMETER;\nimport static org.camunda.community.template.generator.GeneratorPlugin.SCHEMA_BASE_URL;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport io.github.classgraph.ClassGraph;\nimport io.github.classgraph.ClassInfo;", "import io.github.classgraph.ClassGraph;\nimport io.github.classgraph.ClassInfo;\nimport io.github.classgraph.ClassInfoList;\nimport io.github.classgraph.ScanResult;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.camunda.community.template.generator.Generator;", "import org.apache.maven.plugin.MojoExecutionException;\nimport org.camunda.community.template.generator.Generator;\nimport org.camunda.community.template.generator.GeneratorParser;\nimport org.camunda.community.template.generator.TemplateProperty;\nimport org.camunda.community.template.generator.objectmodel.*;\nimport org.codehaus.plexus.util.FileUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n", "import org.junit.jupiter.api.TestInstance;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class GeneratorTest {\n\n  List<ClassInfo> classInfosTemplate = new ArrayList<>();\n\n  List<ClassInfo> classInfosTemplateParameters = new ArrayList<>();\n\n  List<ClassInfo> classInfosTemplateMixed = new ArrayList<>();\n\n  List<ClassInfo> classInfosTemplateMultiple = new ArrayList<>();\n\n  List<ClassInfo> classInfosTemplateExternalTask = new ArrayList<>();\n\n  ClassInfoList scan(String scanPackages) {\n    ScanResult scanResult = new ClassGraph().acceptPackages(scanPackages).enableAllInfo().scan();\n\n    return scanResult.getClassesWithMethodAnnotation(\n        org.camunda.community.template.generator.Template.class.getName());\n  }\n\n  @BeforeEach", "  public void testSomething() {\n    for (ClassInfo classInfo : scan(\"org.camunda.community.template.generator.test.template\")) {\n      classInfosTemplate.clear();\n      classInfosTemplate.add(classInfo);\n    }\n\n    for (ClassInfo classInfo :\n        scan(\"org.camunda.community.template.generator.test.templateparameters\")) {\n      classInfosTemplateParameters.clear();\n      classInfosTemplateParameters.add(classInfo);\n    }\n", "    for (ClassInfo classInfo :\n        scan(\"org.camunda.community.template.generator.test.templatemixed\")) {\n      classInfosTemplateMixed.clear();\n      classInfosTemplateMixed.add(classInfo);\n    }\n\n    for (ClassInfo classInfo :\n        scan(\"org.camunda.community.template.generator.test.templatemultiple\")) {\n      classInfosTemplateMultiple.clear();\n      classInfosTemplateMultiple.add(classInfo);\n    }\n", "    for (ClassInfo classInfo :\n        scan(\"org.camunda.community.template.generator.test.templateexternaltask\")) {\n      classInfosTemplateExternalTask.clear();\n      classInfosTemplateExternalTask.add(classInfo);\n    }\n  }\n\n  @Test\n  public void testTemplate() {\n    List<Template> templates = new ArrayList<>();\n\n    Template template = new Template();\n    template.setTemplateName(\"Example\");\n    template.setTemplateID(\"com.example.Example\");\n    template.setAppliesTo(new String[] {\"bpmn:Task\"});\n    template.setEntriesVisible(false);\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"Example Additional Property\");\n    templatePropertyExample.setType(TemplateProperty.STRING);\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of an additional property\");\n    templatePropertyExample.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleAdditionalProperty\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(new Constraint(true));\n\n    Property templateProperty = new Property();\n    templateProperty.setType(TemplateProperty.HIDDEN);\n    templateProperty.setValue(\n        \"org.camunda.community.template.generator.test.template.TestTemplate\");\n    templateProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:class\"));\n\n    Property templateFunctionProperty = new Property();\n    templateFunctionProperty.setType(TemplateProperty.HIDDEN);\n    templateFunctionProperty.setValue(\"exampleFunction\");\n    templateFunctionProperty.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleNameProperty\"));\n\n    template.addTemplateProperty(templatePropertyExample);\n    template.addTemplateProperty(templateFunctionProperty);\n    template.addTemplateProperty(templateProperty);\n\n    templates.add(template);\n\n    List<Template> resultTemplates = GeneratorParser.processTemplates(classInfosTemplate.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(templates);\n  }\n\n  @Test", "  public void testTemplate() {\n    List<Template> templates = new ArrayList<>();\n\n    Template template = new Template();\n    template.setTemplateName(\"Example\");\n    template.setTemplateID(\"com.example.Example\");\n    template.setAppliesTo(new String[] {\"bpmn:Task\"});\n    template.setEntriesVisible(false);\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"Example Additional Property\");\n    templatePropertyExample.setType(TemplateProperty.STRING);\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of an additional property\");\n    templatePropertyExample.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleAdditionalProperty\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(new Constraint(true));\n\n    Property templateProperty = new Property();\n    templateProperty.setType(TemplateProperty.HIDDEN);\n    templateProperty.setValue(\n        \"org.camunda.community.template.generator.test.template.TestTemplate\");\n    templateProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:class\"));\n\n    Property templateFunctionProperty = new Property();\n    templateFunctionProperty.setType(TemplateProperty.HIDDEN);\n    templateFunctionProperty.setValue(\"exampleFunction\");\n    templateFunctionProperty.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleNameProperty\"));\n\n    template.addTemplateProperty(templatePropertyExample);\n    template.addTemplateProperty(templateFunctionProperty);\n    template.addTemplateProperty(templateProperty);\n\n    templates.add(template);\n\n    List<Template> resultTemplates = GeneratorParser.processTemplates(classInfosTemplate.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(templates);\n  }\n\n  @Test", "  public void testTemplateParameters() {\n    List<Property> properties = new ArrayList<>();\n\n    Choice exampleChoice = new Choice(\"\", \"\");\n    exampleChoice.setName(\"exampleChoice\");\n    exampleChoice.setValue(\"exampleChoiceValue\");\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"Example Property\");\n    templatePropertyExample.setType(\"Dropdown\");\n    templatePropertyExample.setChoices(new Choice[] {exampleChoice});\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of a property\");\n    templatePropertyExample.setBinding(new Binding(\"camunda:inputParameter\", \"null\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(new Constraint(true));\n\n    properties.add(templatePropertyExample);\n\n    List<Property> resultTemplates =\n        GeneratorParser.processGlobalProperties(classInfosTemplateParameters.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(properties);\n  }\n\n  @Test", "  public void testTemplateMixed() {\n    List<Template> templates = new ArrayList<>();\n\n    Template template = new Template();\n    template.setTemplateName(\"Example\");\n    template.setTemplateID(\"com.example.Example\");\n    template.setAppliesTo(new String[] {\"bpmn:Task\"});\n    template.setEntriesVisible(false);\n\n    Constraint constraint = new Constraint(false);\n    constraint.setNotEmpty(true);\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"Example Property\");\n    templatePropertyExample.setType(TemplateProperty.STRING);\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of a property\");\n    templatePropertyExample.setBinding(new Binding(\"camunda:inputParameter\", \"null\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(constraint);\n\n    Property templateAdditionalPropertyExample = new Property();\n    templateAdditionalPropertyExample.setLabel(\"Example Additional Property\");\n    templateAdditionalPropertyExample.setType(TemplateProperty.STRING);\n    templateAdditionalPropertyExample.setValue(\"example\");\n    templateAdditionalPropertyExample.setDescription(\"Example of an additional property\");\n    templateAdditionalPropertyExample.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleAdditionalProperty\"));\n    templateAdditionalPropertyExample.setEditable(false);\n    templateAdditionalPropertyExample.setConstraint(new Constraint(true));\n\n    Property templateProperty = new Property();\n    templateProperty.setType(TemplateProperty.HIDDEN);\n    templateProperty.setValue(\n        \"org.camunda.community.template.generator.test.templatemixed.TestTemplateMixed\");\n    templateProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:class\"));\n\n    Property templateFunctionProperty = new Property();\n    templateFunctionProperty.setType(TemplateProperty.HIDDEN);\n    templateFunctionProperty.setValue(\"exampleFunction\");\n    templateFunctionProperty.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleNameProperty\"));\n\n    template.addTemplateProperty(templateAdditionalPropertyExample);\n    template.addTemplateProperty(templateFunctionProperty);\n    template.addTemplateProperty(templatePropertyExample);\n    template.addTemplateProperty(templateProperty);\n\n    templates.add(template);\n\n    List<Template> resultTemplates =\n        GeneratorParser.processTemplates(classInfosTemplateMixed.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(templates);\n  }\n\n  @Test", "  public void testTemplateMultiple() {\n    List<Template> templates = new ArrayList<>();\n\n    Template templateOne = new Template();\n    templateOne.setTemplateName(\"ExampleOne\");\n    templateOne.setTemplateID(\"com.example.ExampleOne\");\n    templateOne.setAppliesTo(new String[] {\"bpmn:Task\"});\n    templateOne.setEntriesVisible(false);\n\n    Template templateTwo = new Template();\n    templateTwo.setTemplateName(\"ExampleTwo\");\n    templateTwo.setTemplateID(\"com.example.ExampleTwo\");\n    templateTwo.setAppliesTo(new String[] {\"bpmn:Task\"});\n    templateTwo.setEntriesVisible(false);\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"Example Property\");\n    templatePropertyExample.setType(TemplateProperty.STRING);\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of a property\");\n    templatePropertyExample.setBinding(new Binding(\"camunda:inputParameter\", \"null\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(new Constraint(true));\n\n    Property templateAdditionalPropertyExampleOne = new Property();\n    templateAdditionalPropertyExampleOne.setLabel(\"Example Additional Property One\");\n    templateAdditionalPropertyExampleOne.setType(TemplateProperty.STRING);\n    templateAdditionalPropertyExampleOne.setValue(\"exampleOne\");\n    templateAdditionalPropertyExampleOne.setDescription(\"Example of an additional property\");\n    templateAdditionalPropertyExampleOne.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleAdditionalPropertyOne\"));\n    templateAdditionalPropertyExampleOne.setEditable(false);\n    templateAdditionalPropertyExampleOne.setConstraint(new Constraint(true));\n\n    Binding templateAdditionalPropertyTwoBinding = new Binding();\n    templateAdditionalPropertyTwoBinding.setType(\"camunda:outputParameter\");\n    templateAdditionalPropertyTwoBinding.setSource(\"${exampleAdditionalPropertyTwo}\");\n\n    Property templateAdditionalPropertyExampleTwo = new Property();\n    templateAdditionalPropertyExampleTwo.setLabel(\"Example Additional Property Two\");\n    templateAdditionalPropertyExampleTwo.setType(TemplateProperty.STRING);\n    templateAdditionalPropertyExampleTwo.setValue(\"exampleTwo\");\n    templateAdditionalPropertyExampleTwo.setDescription(\"Example of an additional property\");\n    templateAdditionalPropertyExampleTwo.setBinding(templateAdditionalPropertyTwoBinding);\n    templateAdditionalPropertyExampleTwo.setEditable(true);\n    templateAdditionalPropertyExampleTwo.setConstraint(new Constraint(false));\n\n    Property templateProperty = new Property();\n    templateProperty.setType(TemplateProperty.HIDDEN);\n    templateProperty.setValue(\n        \"org.camunda.community.template.generator.test.templatemultiple.TestTemplateMultiple\");\n    templateProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:class\"));\n\n    Property templateFunctionPropertyOne = new Property();\n    templateFunctionPropertyOne.setType(TemplateProperty.HIDDEN);\n    templateFunctionPropertyOne.setValue(\"exampleFunctionOne\");\n    templateFunctionPropertyOne.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleNamePropertyOne\"));\n\n    Property templateFunctionPropertyTwo = new Property();\n    templateFunctionPropertyTwo.setType(TemplateProperty.HIDDEN);\n    templateFunctionPropertyTwo.setValue(\"exampleFunctionTwo\");\n    templateFunctionPropertyTwo.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleNamePropertyTwo\"));\n\n    templateOne.addTemplateProperty(templateAdditionalPropertyExampleOne);\n    templateOne.addTemplateProperty(templateFunctionPropertyOne);\n    templateOne.addTemplateProperty(templatePropertyExample);\n    templateOne.addTemplateProperty(templateProperty);\n\n    templateTwo.addTemplateProperty(templateAdditionalPropertyExampleTwo);\n    templateTwo.addTemplateProperty(templateFunctionPropertyTwo);\n    templateTwo.addTemplateProperty(templatePropertyExample);\n    templateTwo.addTemplateProperty(templateProperty);\n\n    templates.add(templateOne);\n    templates.add(templateTwo);\n\n    List<Template> resultTemplates =\n        GeneratorParser.processTemplates(classInfosTemplateMultiple.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(templates);\n  }\n\n  @Test", "  public void testTemplateExternalTask() {\n    List<Template> templates = new ArrayList<>();\n\n    Template template = new Template();\n    template.setTemplateName(\"External Task Example\");\n    template.setTemplateID(\"com.example.ExternalTaskExample\");\n    template.setAppliesTo(new String[] {\"bpmn:Task\"});\n    template.setEntriesVisible(false);\n\n    Property templatePropertyExample = new Property();\n    templatePropertyExample.setLabel(\"External Task Example Additional Property\");\n    templatePropertyExample.setType(TemplateProperty.STRING);\n    templatePropertyExample.setValue(\"example\");\n    templatePropertyExample.setDescription(\"Example of an additional property\");\n    templatePropertyExample.setBinding(\n        new Binding(\"camunda:inputParameter\", \"exampleAdditionalProperty\"));\n    templatePropertyExample.setEditable(false);\n    templatePropertyExample.setConstraint(new Constraint(true));\n\n    Property externalTaskFunctionProperty = new Property();\n    externalTaskFunctionProperty.setType(TemplateProperty.HIDDEN);\n    externalTaskFunctionProperty.setValue(\"external\");\n    externalTaskFunctionProperty.setEditable(false);\n    externalTaskFunctionProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:type\"));\n    externalTaskFunctionProperty.setConstraint(new Constraint(false));\n\n    Property externalTaskTopic = new Property();\n    externalTaskTopic.setLabel(\"External Topic\");\n    externalTaskTopic.setType(TemplateProperty.STRING);\n    externalTaskTopic.setEditable(true);\n    externalTaskTopic.setConstraint(new Constraint(true));\n    externalTaskTopic.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:topic\"));\n\n    Property externalTaskPriority = new Property();\n    externalTaskPriority.setLabel(\"External Task Priority\");\n    externalTaskPriority.setType(TemplateProperty.STRING);\n    externalTaskPriority.setEditable(true);\n    externalTaskPriority.setConstraint(new Constraint(false));\n    externalTaskPriority.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:taskPriority\"));\n\n    Property templateProperty = new Property();\n    templateProperty.setType(TemplateProperty.HIDDEN);\n    templateProperty.setValue(\n        \"org.camunda.community.template.generator.test.templateexternaltask.TestTemplateExternalTask\");\n    templateProperty.setBinding(new Binding(TemplateProperty.PROPERTY, \"camunda:class\"));\n\n    template.addTemplateProperty(templatePropertyExample);\n    template.addTemplateProperty(externalTaskFunctionProperty);\n    template.addTemplateProperty(externalTaskTopic);\n    template.addTemplateProperty(externalTaskPriority);\n    template.addTemplateProperty(templateProperty);\n\n    templates.add(template);\n\n    List<Template> resultTemplates =\n        GeneratorParser.processTemplates(classInfosTemplateExternalTask.get(0));\n\n    assertThat(resultTemplates).usingRecursiveComparison().isEqualTo(templates);\n  }\n\n  @Test", "  public void testTemplateJsonOutput() throws MojoExecutionException, IOException {\n    new Generator()\n        .generate(\n            \"0.12.0\",\n            \"org.camunda.community.template.generator.test.template\",\n            \"target/test-files/resources/actual\",\n            false);\n\n    assertEquals(\n        FileUtils.fileRead(new File(\"src/test/resources/test-expected/TestTemplateTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        FileUtils.fileRead(\n                new File(\"target/test-files/resources/actual/TestTemplateTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        \"Files are not equal!\");\n  }\n\n  @Test", "  public void testTemplateMixedJsonOutput() throws MojoExecutionException, IOException {\n    new Generator()\n        .generate(\n            \"0.12.0\",\n            \"org.camunda.community.template.generator.test.templatemixed\",\n            \"target/test-files/resources/actual\",\n            false);\n\n    assertEquals(\n        FileUtils.fileRead(\n                new File(\"src/test/resources/test-expected/TestTemplateMixedTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        FileUtils.fileRead(\n                new File(\"target/test-files/resources/actual/TestTemplateMixedTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        \"Files are not equal!\");\n  }\n\n  @Test", "  public void testTemplateParametersJsonOutput() throws MojoExecutionException, IOException {\n    new Generator()\n        .generate(\n            \"0.12.0\",\n            \"org.camunda.community.template.generator.test.templateparameters\",\n            \"target/test-files/resources/actual\",\n            false);\n\n    assertEquals(\n        FileUtils.fileRead(\n                new File(\"src/test/resources/test-expected/TestTemplateParametersTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        FileUtils.fileRead(\n                new File(\"target/test-files/resources/actual/TestTemplateParametersTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        \"Files are not equal!\");\n  }\n\n  @Test", "  public void testTemplateMultipleJsonOutput() throws MojoExecutionException, IOException {\n    new Generator()\n        .generate(\n            \"0.12.0\",\n            \"org.camunda.community.template.generator.test.templatemultiple\",\n            \"target/test-files/resources/actual\",\n            true);\n\n    assertEquals(\n        FileUtils.fileRead(\n                new File(\"src/test/resources/test-expected/TestTemplateMultipleTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        FileUtils.fileRead(\n                new File(\"target/test-files/resources/actual/TestTemplateMultipleTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        \"Files are not equal!\");\n  }\n\n  @Test", "  public void testTemplateExternalTaskJsonOutput() throws MojoExecutionException, IOException {\n    new Generator()\n        .generate(\n            \"0.12.0\",\n            \"org.camunda.community.template.generator.test.templateexternaltask\",\n            \"target/test-files/resources/actual\",\n            false);\n\n    assertEquals(\n        FileUtils.fileRead(\n                new File(\"src/test/resources/test-expected/TestTemplateExternalTaskTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        FileUtils.fileRead(\n                new File(\n                    \"target/test-files/resources/actual/TestTemplateExternalTaskTemplates.json\"))\n            .replace(\"\\n\", \"\")\n            .replace(\"\\r\", \"\"),\n        \"Files are not equal!\");\n  }\n\n  @Test", "  public void testMalformedJSON() throws Exception {\n    String schema =\n        new Generator().downloadSchema(SCHEMA_BASE_URL + \"@0.12.0\" + \"/resources/schema.json\");\n\n    Exception exception =\n        assertThrows(\n            MojoExecutionException.class,\n            () -> {\n              new Generator()\n                  .validateJsonFile(\n                      \"src/test/resources/test-expected/TestMalformedJSON.json\", schema);\n            });\n\n    String expectedMessage =\n        \"JSON validation failed! File: src/test/resources/test-expected/TestMalformedJSON.json\";\n    String actualMessage = exception.getMessage();\n\n    assertEquals(expectedMessage, actualMessage);\n  }\n\n  @Test", "  public void testMalformedSchemaURL() {\n    Exception exception =\n        assertThrows(\n            MojoExecutionException.class,\n            () -> {\n              new Generator().downloadSchema(\"malformedTestURL\");\n            });\n\n    String expectedMessage = \"Failed to download schema!\";\n    String actualMessage = exception.getMessage();\n\n    assertEquals(expectedMessage, actualMessage);\n  }\n\n  @Test", "  public void testBindingScriptFormat() {\n    Binding expectedBinding = new Binding();\n    expectedBinding.setType(INPUT_PARAMETER);\n    expectedBinding.setName(\"exampleBinding\");\n    expectedBinding.setScriptFormat(\"exampleScriptFormat\");\n\n    Binding actualBinding =\n        GeneratorParser.parseBinding(\n            TemplateProperty.INPUT, \"exampleBinding\", \"exampleScriptFormat\");\n\n    assertThat(actualBinding).usingRecursiveComparison().isEqualTo(expectedBinding);\n  }\n\n  @Test", "  public void testDuplicateTemplateID() {\n    Exception exception =\n        assertThrows(\n            MojoExecutionException.class,\n            () -> {\n              new Generator()\n                  .generate(\n                      \"0.12.0\",\n                      \"org.camunda.community.template.generator.test.duplicatetemplateid\",\n                      \"target/test-files/resources/duplicateid\",\n                      false);\n            });\n\n    String expectedMessage = \"Duplicate template id found: com.example.Example\";\n    String actualMessage = exception.getMessage();\n\n    assertEquals(expectedMessage, actualMessage);\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/templateparameters/TestTemplateParameters.java", "chunked_list": ["package org.camunda.community.template.generator.test.templateparameters;\n\nimport org.camunda.community.template.generator.Choice;\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\n\npublic class TestTemplateParameters {\n\n  @TemplateProperty(\n      label = \"Example Property\", //\n      description = \"Example of a property\", //\n      parameterType = TemplateProperty.INPUT, //\n      type = TemplateProperty.DROPDOWN, //\n      choices = {@Choice(name = \"exampleChoice\", value = \"exampleChoiceValue\")}, //\n      value = \"example\", //\n      notEmpty = true, //\n      isEditable = false)\n  String test = \"test\";\n\n  @Template(\n      name = \"Example\", //\n      id = \"com.example.Example\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunction\", //\n      functionNameProperty = \"exampleNameProperty\", //\n      entriesVisible = false)", "  public void testMethod() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/templateexternaltask/TestTemplateExternalTask.java", "chunked_list": ["package org.camunda.community.template.generator.test.templateexternaltask;\n\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\n\npublic class TestTemplateExternalTask {\n\n  String test = \"test\";\n\n  @Template(\n      name = \"External Task Example\", //\n      id = \"com.example.ExternalTaskExample\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"External Task Example Additional Property\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.INPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"example\", //\n            bindingName = \"exampleAdditionalProperty\", //\n            notEmpty = true, //\n            isEditable = false), //\n        @TemplateProperty(\n            type = TemplateProperty.HIDDEN, //\n            value = \"external\", //\n            isEditable = false, //\n            parameterType = TemplateProperty.PROPERTY, //\n            bindingName = \"type\"), //\n        @TemplateProperty(\n            type = TemplateProperty.STRING, //\n            label = \"External Topic\", //\n            notEmpty = true, //\n            parameterType = TemplateProperty.PROPERTY, //\n            bindingName = \"topic\"), //\n        @TemplateProperty(\n            type = TemplateProperty.STRING, //\n            label = \"External Task Priority\", //\n            parameterType = TemplateProperty.PROPERTY, //\n            bindingName = \"taskPriority\")\n      })", "  public void testMethod() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/template/TestTemplate.java", "chunked_list": ["package org.camunda.community.template.generator.test.template;\n\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\n\npublic class TestTemplate {\n\n  String test = \"test\";\n\n  @Template(\n      name = \"Example\", //\n      id = \"com.example.Example\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunction\", //\n      functionNameProperty = \"exampleNameProperty\", //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"Example Additional Property\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.INPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"example\", //\n            bindingName = \"exampleAdditionalProperty\", //\n            notEmpty = true, //\n            isEditable = false)\n      })", "  public void testMethod() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/templatemultiple/TestTemplateMultiple.java", "chunked_list": ["package org.camunda.community.template.generator.test.templatemultiple;\n\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\n\npublic class TestTemplateMultiple {\n\n  @TemplateProperty(\n      label = \"Example Property\", //\n      description = \"Example of a property\", //\n      parameterType = TemplateProperty.INPUT, //\n      type = TemplateProperty.STRING, //\n      value = \"example\", //\n      notEmpty = true, //\n      isEditable = false)\n  String test = \"test\";\n\n  @Template(\n      name = \"ExampleOne\", //\n      id = \"com.example.ExampleOne\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunctionOne\", //\n      functionNameProperty = \"exampleNamePropertyOne\", //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"Example Additional Property One\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.INPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"exampleOne\", //\n            bindingName = \"exampleAdditionalPropertyOne\", //\n            notEmpty = true, //\n            isEditable = false)\n      })", "  public void testMethodOne() {}\n\n  @Template(\n      name = \"ExampleTwo\", //\n      id = \"com.example.ExampleTwo\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunctionTwo\", //\n      functionNameProperty = \"exampleNamePropertyTwo\", //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"Example Additional Property Two\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.OUTPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"exampleTwo\", //\n            bindingName = \"exampleAdditionalPropertyTwo\", //\n            notEmpty = false, //\n            isEditable = true)\n      })", "  public void testMethodTwo() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/duplicatetemplateid/TestDuplicateTemplateID.java", "chunked_list": ["package org.camunda.community.template.generator.test.duplicatetemplateid;\n\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\nimport org.camunda.community.template.generator.test.template.TestTemplate;\n\npublic class TestDuplicateTemplateID extends TestTemplate {\n\n  String test = \"test\";\n\n  @Template(\n      name = \"Example\", //\n      id = \"com.example.Example\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunction\", //\n      functionNameProperty = \"exampleNameProperty\", //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"Example Additional Property\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.INPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"example\", //\n            bindingName = \"exampleAdditionalProperty\", //\n            notEmpty = true, //\n            isEditable = false)\n      })", "  public void testMethod() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/test/java/org/camunda/community/template/generator/test/templatemixed/TestTemplateMixed.java", "chunked_list": ["package org.camunda.community.template.generator.test.templatemixed;\n\nimport org.camunda.community.template.generator.Template;\nimport org.camunda.community.template.generator.TemplateProperty;\n\npublic class TestTemplateMixed {\n\n  @TemplateProperty(\n      label = \"Example Property\", //\n      description = \"Example of a property\", //\n      parameterType = TemplateProperty.INPUT, //\n      type = TemplateProperty.STRING, //\n      value = \"example\", //\n      notEmpty = true, //\n      isEditable = false)\n  String test = \"test\";\n\n  @Template(\n      name = \"Example\", //\n      id = \"com.example.Example\", //\n      appliesTo = {\"bpmn:Task\"}, //\n      function = \"exampleFunction\", //\n      functionNameProperty = \"exampleNameProperty\", //\n      entriesVisible = false, //\n      templateProperties = {\n        @TemplateProperty(\n            label = \"Example Additional Property\", //\n            description = \"Example of an additional property\", //\n            parameterType = TemplateProperty.INPUT, //\n            type = TemplateProperty.STRING, //\n            value = \"example\", //\n            bindingName = \"exampleAdditionalProperty\", //\n            notEmpty = true, //\n            isEditable = false)\n      })", "  public void testMethod() {}\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/GeneratorParser.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport io.github.classgraph.*;\nimport java.util.*;\nimport java.util.AbstractMap.SimpleEntry;\nimport org.camunda.community.template.generator.objectmodel.*;\nimport org.camunda.community.template.generator.objectmodel.Choice;\nimport org.camunda.community.template.generator.objectmodel.Template;\n\n/** Parser class for the Template Generator Maven plugin */\npublic class GeneratorParser {\n", "\n/** Parser class for the Template Generator Maven plugin */\npublic class GeneratorParser {\n\n  public static final String TEMPLATE_ID = \"id\";\n\n  public static final String ENTRIES_VISIBLE = \"entriesVisible\";\n\n  public static final String APPLIES_TO = \"appliesTo\";\n\n  public static final String FUNCTION = \"function\";\n", "  public static final String APPLIES_TO = \"appliesTo\";\n\n  public static final String FUNCTION = \"function\";\n\n  public static final String FUNCTION_NAME_PROPERTY = \"functionNameProperty\";\n\n  public static final String DESCRIPTION = \"description\";\n\n  public static final String INDEX = \"index\";\n\n  public static final String BINDING = \"binding\";\n", "  public static final String INDEX = \"index\";\n\n  public static final String BINDING = \"binding\";\n\n  public static final String BINDING_NAME = \"bindingName\";\n\n  public static final String SCRIPT_FORMAT = \"scriptFormat\";\n\n  public static final String EDITABLE = \"editable\";\n\n  public static final String IS_EDITABLE = \"isEditable\";\n", "  public static final String EDITABLE = \"editable\";\n\n  public static final String IS_EDITABLE = \"isEditable\";\n\n  public static final String LABEL = \"label\";\n\n  public static final String TYPE = \"type\";\n\n  public static final String NAME = \"name\";\n\n  public static final String PROPERTIES = \"templateProperties\";\n", "  public static final String NAME = \"name\";\n\n  public static final String PROPERTIES = \"templateProperties\";\n\n  public static final String CHOICES = \"choices\";\n\n  public static final String NOTEMPTY = \"notEmpty\";\n\n  public static final String VALUE = \"value\";\n\n  public static final String PROPERTY = \"property\";\n", "  public static final String VALUE = \"value\";\n\n  public static final String PROPERTY = \"property\";\n\n  public static final String PARAMETER_TYPE = \"parameterType\";\n\n  public static final String CAMUNDA_PREFIX = \"camunda:\";\n\n  public static final String INPUT_PARAMETER = CAMUNDA_PREFIX + \"inputParameter\";\n\n  public static final String OUTPUT_PARAMETER = CAMUNDA_PREFIX + \"outputParameter\";\n", "  public static final String INPUT_PARAMETER = CAMUNDA_PREFIX + \"inputParameter\";\n\n  public static final String OUTPUT_PARAMETER = CAMUNDA_PREFIX + \"outputParameter\";\n\n  public static final String CLASS_PARAMETER = \"class\";\n\n  private GeneratorParser() {}\n\n  /**\n   * Returns a Binding object for a template property based on the provided type and name\n   *\n   * @param type\n   * @param name\n   * @param scriptFormat\n   * @return Binding object\n   */", "  public static Binding parseBinding(String type, String name, String scriptFormat) {\n    Binding binding = new Binding();\n\n    switch (type) {\n      case TemplateProperty.INPUT:\n        binding.setType(INPUT_PARAMETER);\n        binding.setName(name);\n        break;\n\n      case TemplateProperty.OUTPUT:\n        binding.setType(OUTPUT_PARAMETER);\n        binding.setSource(\"${\" + name + \"}\");\n        break;\n\n      case TemplateProperty.PROPERTY:\n        binding.setType(PROPERTY);\n        binding.setName(CAMUNDA_PREFIX + name);\n        break;\n\n      default:\n        break;\n    }\n", "    if (!scriptFormat.isBlank()) {\n      binding.setScriptFormat(scriptFormat);\n    }\n\n    return binding;\n  }\n\n  /**\n   * Returns a List of choices for a dropdown template property based on the provided array of\n   * choice Annotations.\n   *\n   * @param objectChoices\n   * @return List of Choice objects\n   */", "  public static List<Choice> parseChoices(Object[] objectChoices) {\n    List<Choice> choices = new ArrayList<>();\n\n    for (Object choice : objectChoices) {\n      AnnotationInfo choiceAnnotationInfo = (AnnotationInfo) choice;\n\n      String choiceName = (String) choiceAnnotationInfo.getParameterValues().getValue(NAME);\n      String choiceValue = (String) choiceAnnotationInfo.getParameterValues().getValue(VALUE);\n\n      choices.add(new Choice(choiceName, choiceValue));\n    }\n", "    if (choices.isEmpty()) {\n      return Collections.emptyList();\n    } else {\n      return choices;\n    }\n  }\n\n  /**\n   * Returns a Property object that was created based on the provided fieldParameters\n   *\n   * @param fieldParameters\n   * @return Property based on the provided fieldParameters\n   */", "  public static Property createProperty(Map<String, Object> fieldParameters) {\n    Property property = new Property();\n\n    String label = String.valueOf(fieldParameters.get(LABEL));\n    if (!label.isBlank()) {\n      property.setLabel(label);\n    }\n\n    String type = String.valueOf(fieldParameters.get(TYPE));\n    if (!type.isBlank()) {\n      property.setType(type);\n    }\n\n    String value = String.valueOf(fieldParameters.get(VALUE));", "    if (!type.isBlank()) {\n      property.setType(type);\n    }\n\n    String value = String.valueOf(fieldParameters.get(VALUE));\n    if (!value.isBlank()) {\n      property.setValue(value);\n    }\n\n    String description = String.valueOf(fieldParameters.get(DESCRIPTION));\n    if (!description.isBlank()) {\n      property.setDescription(description);\n    }\n\n    String bindingName = String.valueOf(fieldParameters.get(BINDING_NAME));\n    String scriptFormat = String.valueOf(fieldParameters.get(SCRIPT_FORMAT));", "    if (!description.isBlank()) {\n      property.setDescription(description);\n    }\n\n    String bindingName = String.valueOf(fieldParameters.get(BINDING_NAME));\n    String scriptFormat = String.valueOf(fieldParameters.get(SCRIPT_FORMAT));\n    if (!bindingName.isBlank()) {\n      property.setBinding(\n          parseBinding(\n              String.valueOf(fieldParameters.get(PARAMETER_TYPE)), bindingName, scriptFormat));\n    }\n\n    List<Choice> choices = parseChoices((Object[]) fieldParameters.get(CHOICES));", "    if (!choices.isEmpty()) {\n      property.setChoices(choices.toArray(new Choice[0]));\n    }\n\n    property.setEditable(((Boolean) (fieldParameters.get(IS_EDITABLE))).booleanValue());\n\n    property.setConstraint(\n        new Constraint(((Boolean) (fieldParameters.get(NOTEMPTY))).booleanValue()));\n\n    return property;\n  }\n\n  /**\n   * Returns a Template object that was created based on the provided methodParameters.\n   *\n   * @param methodParameters\n   * @return Template based on the provided methodParameters\n   */", "  public static Template createTemplate(Map<String, Object> methodParameters) {\n    Template template = new Template();\n\n    template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());\n\n    template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));\n\n    String templateName = String.valueOf(methodParameters.get(NAME));\n    if (!templateName.isBlank()) {\n      template.setTemplateName(templateName);\n    }\n\n    String templateID = String.valueOf(methodParameters.get(TEMPLATE_ID));", "    if (!templateName.isBlank()) {\n      template.setTemplateName(templateName);\n    }\n\n    String templateID = String.valueOf(methodParameters.get(TEMPLATE_ID));\n    if (!templateID.isBlank()) {\n      template.setTemplateID(templateID);\n    }\n\n    // Add method specific properties\n    for (Object o : (Object[]) methodParameters.get(PROPERTIES)) {\n      template.addTemplateProperty(processSingleProperty((AnnotationInfo) o));\n    }\n\n    return template;\n  }\n\n  /**\n   * Returns a Property object that represents the implementation type property of an activity.\n   *\n   * @param className\n   * @return Property representation of the implementation type\n   */", "    for (Object o : (Object[]) methodParameters.get(PROPERTIES)) {\n      template.addTemplateProperty(processSingleProperty((AnnotationInfo) o));\n    }\n\n    return template;\n  }\n\n  /**\n   * Returns a Property object that represents the implementation type property of an activity.\n   *\n   * @param className\n   * @return Property representation of the implementation type\n   */", "  public static Property createImplementationTypeProperty(String className) {\n    Property implementationTypeProperty = new Property();\n\n    implementationTypeProperty.setType(TemplateProperty.HIDDEN);\n    implementationTypeProperty.setValue(className);\n    implementationTypeProperty.setBinding(parseBinding(PROPERTY, CLASS_PARAMETER, \"\"));\n\n    return implementationTypeProperty;\n  }\n\n  /**\n   * Returns a Property object that represents the function field property of an activity.\n   *\n   * @param function\n   * @param functionNameProperty\n   * @return Property representation of the function field\n   */", "  public static Property createFunctionField(String function, String functionNameProperty) {\n    Property functionFieldProperty = new Property();\n\n    functionFieldProperty.setType(TemplateProperty.HIDDEN);\n    functionFieldProperty.setValue(function);\n    functionFieldProperty.setBinding(\n        parseBinding(TemplateProperty.INPUT, functionNameProperty, \"\"));\n\n    return functionFieldProperty;\n  }\n\n  /**\n   * Returns a SimpleEntry that contains the key and value of the provided AnnotationParameterValue.\n   *\n   * @param annotationParameter\n   * @return SimpleEntry containing key and value of an Annotation property\n   */", "  public static SimpleEntry<String, Object> processAnnotationParameter(\n      AnnotationParameterValue annotationParameter) {\n    String annotationParameterName = annotationParameter.getName();\n    Object annotationParameterValue = annotationParameter.getValue();\n\n    return new SimpleEntry<>(annotationParameterName, annotationParameterValue);\n  }\n\n  /**\n   * Returns a map with all parameters of an AnnotationInfo object\n   *\n   * @param annotationInfo\n   * @return Map containing all parameters of an AnnotationInfo\n   */", "  public static Map<String, Object> processParameterValues(AnnotationInfo annotationInfo) {\n    AnnotationParameterValueList methodAnnotationParameters =\n        annotationInfo.getParameterValues(true);\n\n    Map<String, Object> parameters = new HashMap<>();\n\n    // Iterate through all parameters of one method Annotation\n    for (AnnotationParameterValue methodAnnotationParameter : methodAnnotationParameters) {\n      SimpleEntry<String, Object> fieldEntry =\n          processAnnotationParameter(methodAnnotationParameter);\n      parameters.put(fieldEntry.getKey(), fieldEntry.getValue());\n    }\n\n    return parameters;\n  }\n\n  /**\n   * Returns a Property object that was created based on the annotation values of the provided\n   * FieldInfo. Useful when reading a TemplateProperty of a field.\n   *\n   * @param fieldInfo\n   * @return Property representation of the provided FieldInfo\n   */", "  public static Property processSingleProperty(FieldInfo fieldInfo) {\n    AnnotationInfo fieldAnnotationInfo =\n        fieldInfo.getAnnotationInfo(TemplateProperty.class.getName());\n\n    if (fieldAnnotationInfo != null) {\n      Map<String, Object> fieldParameters = processParameterValues(fieldAnnotationInfo);\n\n      Property property = createProperty(fieldParameters);\n\n      // Create the binding for a property\n      String bindingType = String.valueOf(fieldParameters.get(PARAMETER_TYPE));\n      String bindingName = String.valueOf(fieldInfo.getConstantInitializerValue());\n      String scriptFormat = String.valueOf(fieldParameters.get(SCRIPT_FORMAT));\n      Binding binding = parseBinding(bindingType, bindingName, scriptFormat);\n\n      property.setBinding(binding);\n\n      return property;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a Property object that was created based on the annotation values of the provided\n   * AnnotationInfo. Useful when reading a TemplateProperty annotation inside a parent annotation.\n   *\n   * @param annotationInfo\n   * @return Property representation of the provided AnnotationInfo\n   */", "  public static Property processSingleProperty(AnnotationInfo annotationInfo) {\n    if (annotationInfo.getName().equals(TemplateProperty.class.getName())) {\n      Map<String, Object> methodParameters = processParameterValues(annotationInfo);\n\n      return createProperty(methodParameters);\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a Template object that was created based on the annotation values of the provided\n   * MethodInfo.\n   *\n   * @param methodInfo\n   * @return Template representation of the provided MethodInfo\n   */", "  public static Template processSingleTemplate(MethodInfo methodInfo) {\n    AnnotationInfo methodAnnotationInfo =\n        methodInfo.getAnnotationInfo(\n            org.camunda.community.template.generator.Template.class.getName());\n\n    if (methodAnnotationInfo != null) {\n      Map<String, Object> methodParameters = processParameterValues(methodAnnotationInfo);\n\n      Template template = createTemplate(methodParameters);\n\n      // Add function field if parameters are present\n      String function = String.valueOf(methodParameters.get(FUNCTION));\n      String functionNameProperty = String.valueOf(methodParameters.get(FUNCTION_NAME_PROPERTY));\n", "      if (!function.isBlank() && !functionNameProperty.isBlank()) {\n        template.addTemplateProperty(createFunctionField(function, functionNameProperty));\n      }\n\n      return template;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a List of processed properties based on the fields of the provided ClassInfo.\n   *\n   * @param classInfo\n   * @return List of processed properties\n   */", "  public static List<Property> processGlobalProperties(ClassInfo classInfo) {\n    List<Property> globalProperties = new ArrayList<>();\n\n    // Iterate through all fields of a class\n    for (FieldInfo fieldInfo : classInfo.getFieldInfo()) {\n      Property property = processSingleProperty(fieldInfo);\n\n      if (property != null) {\n        globalProperties.add(property);\n      }\n    }\n\n    return globalProperties;\n  }\n\n  /**\n   * Returns a List of created templates for a given ClassInfo.\n   *\n   * @param classInfo\n   * @return List of processed templates\n   */", "  public static List<Template> processTemplates(ClassInfo classInfo) {\n    List<Template> templates = new ArrayList<>();\n\n    // Iterate through all methods of a class\n    for (MethodInfo methodInfo : classInfo.getDeclaredMethodInfo()) {\n      Template template = processSingleTemplate(methodInfo);\n\n      if (template != null) {\n        for (Property property : processGlobalProperties(classInfo)) {\n          template.addTemplateProperty(property);\n        }\n\n        // Add Implementation Type property\n        String className = classInfo.getName();\n        template.addTemplateProperty(createImplementationTypeProperty(className));\n\n        templates.add(template);\n      }\n    }\n\n    return templates;\n  }\n}\n", "        for (Property property : processGlobalProperties(classInfo)) {\n          template.addTemplateProperty(property);\n        }\n\n        // Add Implementation Type property\n        String className = classInfo.getName();\n        template.addTemplateProperty(createImplementationTypeProperty(className));\n\n        templates.add(template);\n      }\n    }\n\n    return templates;\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/Generator.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport static org.camunda.community.template.generator.GeneratorPlugin.SCHEMA_BASE_URL;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.GsonBuilder;\nimport com.networknt.schema.JsonSchema;\nimport com.networknt.schema.JsonSchemaFactory;\nimport com.networknt.schema.SpecVersion;", "import com.networknt.schema.JsonSchemaFactory;\nimport com.networknt.schema.SpecVersion;\nimport com.networknt.schema.ValidationMessage;\nimport io.github.classgraph.ClassGraph;\nimport io.github.classgraph.ClassInfo;\nimport io.github.classgraph.ClassInfoList;\nimport io.github.classgraph.ScanResult;\nimport java.io.*;\nimport java.net.URL;\nimport java.util.HashSet;", "import java.net.URL;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport org.apache.maven.plugin.MojoExecutionException;\n\npublic class Generator {\n\n  Logger logger = Logger.getLogger(Generator.class.getName());\n", "  public void generate(\n      String schemaVersion, String scanPackages, String outputDir, boolean skipValidation)\n      throws MojoExecutionException {\n    // Set schema URL\n    String schemaURL =\n        SCHEMA_BASE_URL\n            + (schemaVersion.equals(\"null\") ? \"\" : \"@\" + schemaVersion)\n            + \"/resources/schema.json\";\n\n    logger.info(\"Scanning for annotations ...\");\n\n    ScanResult scanResult = new ClassGraph().acceptPackages(scanPackages).enableAllInfo().scan();\n    ClassInfoList classInfoList =\n        scanResult.getClassesWithMethodAnnotation(\n            org.camunda.community.template.generator.Template.class.getName());\n\n    Set<String> templateIDs = new HashSet<>();\n\n    // Iterate through all classes containing a Template annotation", "    for (ClassInfo classInfo : classInfoList) {\n      if (classInfo.hasDeclaredMethodAnnotation(\n          org.camunda.community.template.generator.Template.class.getName())) {\n        // Set template file output path\n        String filePath = outputDir + File.separator + classInfo.getSimpleName() + \"Templates.json\";\n\n        // Parse templates of the current class\n        List<org.camunda.community.template.generator.objectmodel.Template> templates =\n            GeneratorParser.processTemplates(classInfo);\n        for (org.camunda.community.template.generator.objectmodel.Template template : templates) {\n          template.setSchemaURL(schemaURL);\n", "        for (org.camunda.community.template.generator.objectmodel.Template template : templates) {\n          template.setSchemaURL(schemaURL);\n\n          if (!templateIDs.contains(template.getTemplateID())) {\n            templateIDs.add(template.getTemplateID());\n          } else {\n            throw new MojoExecutionException(\n                \"Duplicate template id found: \" + template.getTemplateID());\n          }\n        }\n\n        // Serialize object model to JSON\n        String resultJSON = (new GsonBuilder()).setPrettyPrinting().create().toJson(templates);\n        writeJsonToFile(filePath, resultJSON);\n\n        // Validate JSON file", "        if (!skipValidation) {\n          // Download schema for validation\n          String schema = downloadSchema(schemaURL);\n\n          // Validate file using schema\n          validateJsonFile(filePath, schema);\n        } else {\n          logger.warning(\"Skipping JSON schema validation!\");\n        }\n      }\n    }\n  }\n\n  /**\n   * Writes the JSON String to a specific file path.\n   *\n   * @param filePath The path where to save the specified JSON String\n   * @param json The JSON String to write\n   * @throws MojoExecutionException\n   */\n  private void writeJsonToFile(String filePath, String json) throws MojoExecutionException {\n    File file = new File(filePath);\n    file.getParentFile().mkdirs();\n\n    try (FileWriter outputFile = new FileWriter(file)) {\n      outputFile.write(json);\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"Failed to write output file \" + filePath, e);\n    }\n  }\n\n  /**\n   * Downloads a schema from the provided URL\n   *\n   * @param schemaURL The URL from where to download the schema\n   * @return The schema as String\n   */", "  public String downloadSchema(String schemaURL) throws MojoExecutionException {\n    StringBuilder schema = new StringBuilder();\n\n    try (BufferedReader reader =\n        new BufferedReader(new InputStreamReader(new URL(schemaURL).openStream()))) {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        schema.append(line);\n      }\n\n      logger.info(\"Successfully downloaded schema from: \" + schemaURL);\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"Failed to download schema!\", e);\n    }\n\n    return schema.toString();\n  }\n\n  /**\n   * Validates a JSON file against the provided schema\n   *\n   * @param filePath The file path to validate\n   * @param schemaTemplate The schema template to use for validation\n   * @throws MojoExecutionException\n   */", "  public void validateJsonFile(String filePath, String schemaTemplate)\n      throws MojoExecutionException {\n    ObjectMapper objectMapper = new ObjectMapper();\n    JsonSchemaFactory schemaFactory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);\n\n    try {\n      File file = new File(filePath);\n      JsonNode json = objectMapper.readTree(new FileInputStream(file));\n      JsonSchema schema =\n          schemaFactory.getSchema(new ByteArrayInputStream(schemaTemplate.getBytes()));\n      Set<ValidationMessage> validationResult = schema.validate(json);\n\n      // Print validation errors", "      if (validationResult.isEmpty()) {\n        logger.info(file.getName() + \": Validation successful\");\n      } else {\n        validationResult.forEach(vm -> logger.warning(file.getName() + \": \" + vm.getMessage()));\n      }\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"JSON validation failed! File: \" + filePath, e);\n    }\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/GeneratorPlugin.java", "chunked_list": ["package org.camunda.community.template.generator;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.apache.maven.artifact.DependencyResolutionRequiredException;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugin.descriptor.PluginDescriptor;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;", "import org.apache.maven.plugin.descriptor.PluginDescriptor;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport org.apache.maven.plugins.annotations.ResolutionScope;\nimport org.apache.maven.project.MavenProject;\nimport org.codehaus.plexus.classworlds.realm.ClassRealm;\n\n/** The main class of the modeler template generator */\n@Mojo(", "/** The main class of the modeler template generator */\n@Mojo(\n    name = \"template-generator\",\n    defaultPhase = LifecyclePhase.COMPILE,\n    requiresDependencyResolution = ResolutionScope.COMPILE)\npublic class GeneratorPlugin extends AbstractMojo {\n\n  public static final String SCHEMA_BASE_URL =\n      \"https://unpkg.com/@camunda/element-templates-json-schema\";\n\n  @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n  private MavenProject project;\n\n  @Parameter(property = \"template-generator.schemaVersion\", defaultValue = \"null\")\n  private String schemaVersion;\n\n  @Parameter(property = \"template-generator.outputDir\")\n  private String outputDir;\n\n  @Parameter(property = \"template-generator.scanPackages\", defaultValue = \"*\")\n  private String scanPackages;\n\n  @Parameter(property = \"template-generator.skipValidation\", defaultValue = \"false\")\n  private boolean skipValidation;\n\n  @Override", "  public void execute() throws MojoExecutionException, MojoFailureException {\n    setClasspath();\n\n    getLog().info(\"Schema version: \" + schemaVersion);\n    getLog().info(\"Output directory: \" + outputDir);\n    getLog().info(\"Scanned package: \" + scanPackages);\n\n    new Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private void setClasspath() throws MojoExecutionException {\n    final PluginDescriptor pluginDescriptor =\n        (PluginDescriptor) getPluginContext().get(\"pluginDescriptor\");\n    final ClassRealm classRealm = pluginDescriptor.getClassRealm();", "    try {\n      project\n          .getCompileClasspathElements()\n          .forEach(\n              c -> {\n                try {\n                  classRealm.addURL(new URL(\"file:///\" + c.toString()));\n                } catch (MalformedURLException e1) {\n                  throw new IllegalArgumentException(\"Error create file URL: \" + c, e1);\n                }\n              });\n    } catch (DependencyResolutionRequiredException e1) {\n      throw new MojoExecutionException(\"Dependency resolution failed\", e1);\n    }\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/objectmodel/Binding.java", "chunked_list": ["package org.camunda.community.template.generator.objectmodel;\n\n/** Binding object for a property */\npublic class Binding {\n\n  private String type;\n\n  private String name;\n\n  private String source;\n\n  private String scriptFormat;\n\n  /**\n   * @return type\n   */", "  public String getType() {\n    return type;\n  }\n\n  /**\n   * @param type\n   */\n  public void setType(String type) {\n    this.type = type;\n  }\n\n  /**\n   * @return name\n   */", "  public String getName() {\n    return name;\n  }\n\n  /**\n   * @param name\n   */\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  /**\n   * @return source\n   */", "  public String getSource() {\n    return source;\n  }\n\n  /**\n   * @param source\n   */\n  public void setSource(String source) {\n    this.source = source;\n  }\n\n  /**\n   * @return scriptFormat\n   */", "  public String getScriptFormat() {\n    return scriptFormat;\n  }\n\n  /**\n   * @param scriptFormat\n   */\n  public void setScriptFormat(String scriptFormat) {\n    this.scriptFormat = scriptFormat;\n  }\n\n  /**\n   * @param type\n   * @param name\n   */\n  public Binding(String type, String name) {\n    super();\n    this.type = type;\n    this.name = name;\n  }\n\n  /** */\n  public Binding() {\n    super();\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/objectmodel/Template.java", "chunked_list": ["package org.camunda.community.template.generator.objectmodel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/** Represents one activity for a Camunda Modeler Template file */\npublic class Template {\n\n  private String $schema;\n\n  private String name;\n\n  private String id;\n\n  private String[] appliesTo;\n\n  private boolean entriesVisible;\n\n  private List<Property> properties;\n\n  /**\n   * @return schemaURL\n   */", "  public String getSchemaURL() {\n    return $schema;\n  }\n\n  /**\n   * @param schemaURL\n   */\n  public void setSchemaURL(String schemaURL) {\n    this.$schema = schemaURL;\n  }\n\n  /**\n   * @return name\n   */", "  public String getTemplateName() {\n    return name;\n  }\n\n  /**\n   * @param templateName\n   */\n  public void setTemplateName(String templateName) {\n    this.name = templateName;\n  }\n\n  /**\n   * @return ID\n   */", "  public String getTemplateID() {\n    return id;\n  }\n\n  /**\n   * @param templateID\n   */\n  public void setTemplateID(String templateID) {\n    this.id = templateID;\n  }\n\n  /**\n   * @return appliesTo\n   */\n  public String[] getAppliesTo() {\n    return appliesTo;\n  }\n\n  /**\n   * @param appliesTo\n   */", "  public void setAppliesTo(String[] appliesTo) {\n    this.appliesTo = appliesTo;\n  }\n\n  /**\n   * @return entriesVisible\n   */\n  public boolean isEntriesVisible() {\n    return entriesVisible;\n  }\n\n  /**\n   * @param entriesVisible\n   */", "  public void setEntriesVisible(boolean entriesVisible) {\n    this.entriesVisible = entriesVisible;\n  }\n\n  /**\n   * @return properties\n   */\n  public List<Property> getTemplateProperties() {\n    return properties;\n  }\n\n  /**\n   * @param templateProperty\n   */", "  public void addTemplateProperty(Property templateProperty) {\n    properties.add(templateProperty);\n  }\n\n  /** */\n  public Template() {\n    super();\n    this.properties = new ArrayList<>();\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/objectmodel/Property.java", "chunked_list": ["package org.camunda.community.template.generator.objectmodel;\n\n/** Represents one property of an activity for a Camunda Modeler Template file */\npublic class Property {\n\n  private String label;\n\n  private String type;\n\n  private String value;\n\n  private String description;\n\n  private String propertyType;\n\n  private boolean editable;\n\n  private Choice[] choices;\n\n  private Constraint constraints;\n\n  private Binding binding;\n\n  /**\n   * @return label\n   */", "  public String getLabel() {\n    return label;\n  }\n\n  /**\n   * @param label\n   */\n  public void setLabel(String label) {\n    this.label = label;\n  }\n\n  /**\n   * @return type\n   */", "  public String getType() {\n    return type;\n  }\n\n  /**\n   * @param type\n   */\n  public void setType(String type) {\n    this.type = type;\n  }\n\n  /**\n   * @return value\n   */", "  public String getValue() {\n    return value;\n  }\n\n  /**\n   * @param value\n   */\n  public void setValue(String value) {\n    this.value = value;\n  }\n\n  /**\n   * @return description\n   */", "  public String getDescription() {\n    return description;\n  }\n\n  /**\n   * @param description\n   */\n  public void setDescription(String description) {\n    this.description = description;\n  }\n\n  /**\n   * @return propertyType\n   */", "  public String getPropertyType() {\n    return propertyType;\n  }\n\n  /**\n   * @param propertyType\n   */\n  public void setPropertyType(String propertyType) {\n    this.propertyType = propertyType;\n  }\n\n  /**\n   * @return editable\n   */", "  public boolean isEditable() {\n    return editable;\n  }\n\n  /**\n   * @param editable\n   */\n  public void setEditable(boolean editable) {\n    this.editable = editable;\n  }\n\n  /**\n   * @return choices\n   */\n  public Choice[] getChoices() {\n    return choices;\n  }\n\n  /**\n   * @param choices\n   */", "  public void setChoices(Choice[] choices) {\n    this.choices = choices;\n  }\n\n  /**\n   * @return constraint\n   */\n  public Constraint getConstraint() {\n    return constraints;\n  }\n\n  /**\n   * @param constraints\n   */", "  public void setConstraint(Constraint constraints) {\n    this.constraints = constraints;\n  }\n\n  /**\n   * @return binding\n   */\n  public Binding getBinding() {\n    return binding;\n  }\n\n  /**\n   * @param binding\n   */", "  public void setBinding(Binding binding) {\n    this.binding = binding;\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/objectmodel/Constraint.java", "chunked_list": ["package org.camunda.community.template.generator.objectmodel;\n\n/** A constrained that is contained by a property */\npublic class Constraint {\n\n  private boolean notEmpty;\n\n  /**\n   * @return notEmpty\n   */\n  public boolean isNotEmpty() {\n    return notEmpty;\n  }\n\n  /**\n   * @param notEmpty\n   */", "  public boolean isNotEmpty() {\n    return notEmpty;\n  }\n\n  /**\n   * @param notEmpty\n   */\n  public void setNotEmpty(boolean notEmpty) {\n    this.notEmpty = notEmpty;\n  }\n\n  /**\n   * @param notEmpty\n   */\n  public Constraint(boolean notEmpty) {\n    super();\n    this.notEmpty = notEmpty;\n  }\n}\n"]}
{"filename": "template-generator-maven-plugin/src/main/java/org/camunda/community/template/generator/objectmodel/Choice.java", "chunked_list": ["package org.camunda.community.template.generator.objectmodel;\n\n/** Represents one choice of a dropdown property */\npublic class Choice {\n\n  private String name;\n\n  private String value;\n\n  /**\n   * @return name\n   */", "  public String getName() {\n    return name;\n  }\n\n  /**\n   * @param name\n   */\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  /**\n   * @return value\n   */", "  public String getValue() {\n    return value;\n  }\n\n  /**\n   * @param value\n   */\n  public void setValue(String value) {\n    this.value = value;\n  }\n\n  /**\n   * @param name\n   * @param value\n   */\n  public Choice(String name, String value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n}\n"]}
