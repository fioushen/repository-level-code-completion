{"filename": "src/test/java/com/example/myproject/MyTest.java", "chunked_list": ["package com.example.myproject;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\n/**\n * Unit test for simple App.\n */\npublic class MyTest {\n    /**\n     * Rigorous Test :-)\n     */\n    @Test", " */\npublic class MyTest {\n    /**\n     * Rigorous Test :-)\n     */\n    @Test\n    public void shouldAnswerWithTrue() {\n        assertTrue(true);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/MCDeploy.java", "chunked_list": ["package dev._2lstudios.mcdeploy;\n\nimport java.io.IOException;\n\nimport dev._2lstudios.mcdeploy.errors.MCDException;\nimport dev._2lstudios.mcdeploy.errors.NoSuchSoftwareException;\nimport dev._2lstudios.mcdeploy.errors.NoSuchVersionException;\nimport dev._2lstudios.mcdeploy.errors.SoftwareFetchException;\nimport dev._2lstudios.mcdeploy.software.LocalSoftwareArtifact;\nimport dev._2lstudios.mcdeploy.software.RunOptions;", "import dev._2lstudios.mcdeploy.software.LocalSoftwareArtifact;\nimport dev._2lstudios.mcdeploy.software.RunOptions;\nimport dev._2lstudios.mcdeploy.software.Software;\nimport dev._2lstudios.mcdeploy.software.SoftwareArtifact;\nimport dev._2lstudios.mcdeploy.software.SoftwareManager;\nimport dev._2lstudios.mcdeploy.utils.StdListener;\n\npublic class MCDeploy {\n    public static final String VERSION = \"0.0.1\";\n\n    private SoftwareManager softwares;\n\n    public MCDeploy() {\n        this.softwares = new SoftwareManager();\n    }\n", "    public static final String VERSION = \"0.0.1\";\n\n    private SoftwareManager softwares;\n\n    public MCDeploy() {\n        this.softwares = new SoftwareManager();\n    }\n\n    public SoftwareManager getSoftwareManager() {\n        return this.softwares;\n    }\n", "    public SoftwareManager getSoftwareManager() {\n        return this.softwares;\n    }\n\n    public SoftwareArtifact getArtifact(String artifactId) throws NoSuchSoftwareException, NoSuchVersionException {\n        String[] parts = artifactId.split(\"@\");\n        String softwareId = parts[0];\n        String versionId = parts.length > 1 ? parts[1] : \"latest\";\n\n        Software software = this.softwares.getSoftware(softwareId);\n        if (software == null) {\n            throw new NoSuchSoftwareException(softwareId);\n        }\n\n        SoftwareArtifact artifact = software.getArtifact(versionId);", "        if (software == null) {\n            throw new NoSuchSoftwareException(softwareId);\n        }\n\n        SoftwareArtifact artifact = software.getArtifact(versionId);\n        if (artifact == null) {\n            throw new NoSuchVersionException(versionId);\n        }\n\n        return artifact;\n    }\n", "    public void install(String artifactId, RunOptions options) throws MCDException {\n        SoftwareArtifact artifact = this.getArtifact(artifactId);\n        try {\n            artifact.install(options);\n        } catch (IOException | InterruptedException e) {\n            throw new MCDException(\"Error installing artifact: \" + e.getLocalizedMessage(), e);\n        }\n    }\n\n    public int runLocal(String jarFile, StdListener listener, RunOptions options) throws MCDException {\n        SoftwareArtifact artifact = new LocalSoftwareArtifact(jarFile);", "    public int runLocal(String jarFile, StdListener listener, RunOptions options) throws MCDException {\n        SoftwareArtifact artifact = new LocalSoftwareArtifact(jarFile);\n        try {\n            return artifact.run(options, listener);\n        } catch (IOException | InterruptedException e) {\n            throw new MCDException(\"Error installing artifact: \" + e.getLocalizedMessage(), e);\n        }\n    }\n\n    public int runLocalAndPipe(String jarFile, RunOptions options) throws MCDException {\n        return this.runLocal(jarFile, (chr) -> {\n            System.out.print(chr);\n        }, options);\n    }\n", "    public int runLocalAndPipe(String jarFile, RunOptions options) throws MCDException {\n        return this.runLocal(jarFile, (chr) -> {\n            System.out.print(chr);\n        }, options);\n    }\n\n    public int run(String artifactId, StdListener listener, RunOptions options) throws MCDException {\n        SoftwareArtifact artifact = this.getArtifact(artifactId);\n        try {\n            return artifact.run(options, listener);\n        } catch (IOException | InterruptedException e) {\n            throw new MCDException(\"Error installing artifact: \" + e.getMessage(), e);\n        }\n    }\n", "        try {\n            return artifact.run(options, listener);\n        } catch (IOException | InterruptedException e) {\n            throw new MCDException(\"Error installing artifact: \" + e.getMessage(), e);\n        }\n    }\n\n    public int runAndPipe(String artifactId, RunOptions options) throws MCDException {\n        return this.run(artifactId, (chr) -> {\n            System.out.print(chr);\n        }, options);\n    }\n", "    public void prepare() throws SoftwareFetchException {\n        this.softwares.download();\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/cli/CLILauncher.java", "chunked_list": ["package dev._2lstudios.mcdeploy.cli;\n\nimport picocli.CommandLine;\n\npublic class CLILauncher {\n    public static void main(String[] args) {\n        new CommandLine(new CLI()).execute(args);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/cli/CLI.java", "chunked_list": ["package dev._2lstudios.mcdeploy.cli;\n\nimport java.util.concurrent.Callable;\n\nimport dev._2lstudios.mcdeploy.cli.commands.InstallCommand;\nimport dev._2lstudios.mcdeploy.cli.commands.RunCommand;\nimport picocli.CommandLine;\nimport picocli.CommandLine.Command;\n\n@Command(", "\n@Command(\n        // Application name.\n        name = \"mcdeploy\",\n        // Application description\n        description = \"Download and deploy minecraft servers with one command.\\n\",\n        // CLI subcommands\n        subcommands = {\n                InstallCommand.class,\n                RunCommand.class,", "                InstallCommand.class,\n                RunCommand.class,\n        })\npublic class CLI implements Callable<Integer> {\n    @Override\n    public Integer call() {\n        CommandLine.usage(this, System.out);\n        return 0;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/cli/Logger.java", "chunked_list": ["package dev._2lstudios.mcdeploy.cli;\n\npublic class Logger {\n    static void print(String message) {\n        System.out.println(\"[MCDeploy] \" + message);\n    }\n\n    public static void crit(String message) {\n        print(\"CRIT \" + message);\n    }\n", "    public static void info(String message) {\n        print(\"INFO \" + message);\n    }\n\n    public static void warn(String message) {\n        print(\"WARN \" + message);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/cli/commands/InstallCommand.java", "chunked_list": ["package dev._2lstudios.mcdeploy.cli.commands;\n\nimport java.io.File;\nimport java.util.concurrent.Callable;\n\nimport dev._2lstudios.mcdeploy.MCDeploy;\nimport dev._2lstudios.mcdeploy.cli.Logger;\nimport dev._2lstudios.mcdeploy.errors.MCDException;\nimport dev._2lstudios.mcdeploy.software.RunOptions;\n", "import dev._2lstudios.mcdeploy.software.RunOptions;\n\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\n\n@Command(name = \"install\", description = \"Install a server artifact.\")\npublic class InstallCommand implements Callable<Integer> {\n    @Option(description = \"Directory where install server\", names = { \"-d\", \"--directory\" })\n    private File cwd;\n\n    @Option(description = \"Java runtime binary\", defaultValue = \"java\", names = { \"-j\", \"--java\" })\n    private String java;\n\n    @Parameters(index = \"0\", arity = \"0..1\", description = \"Server software and version\", defaultValue = \"vanilla@latest\")\n    private String artifactId;\n\n    @Override", "    public Integer call() {\n        MCDeploy mcd = new MCDeploy();\n        RunOptions options = new RunOptions().setCWD(this.cwd).setJava(this.java);\n\n        try {\n            Logger.info(\"Fetching for versions...\");\n            mcd.prepare();\n\n            Logger.info(\"Preparing for download artifact: \" + artifactId);\n            mcd.install(artifactId, options);\n            Logger.info(\"Installed successfully.\");\n\n        } catch (MCDException e) {\n            Logger.crit(e.getMessage());\n        }\n\n        return 0;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/cli/commands/RunCommand.java", "chunked_list": ["package dev._2lstudios.mcdeploy.cli.commands;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.concurrent.Callable;\n\nimport dev._2lstudios.mcdeploy.MCDeploy;\nimport dev._2lstudios.mcdeploy.cli.Logger;\nimport dev._2lstudios.mcdeploy.errors.MCDException;\nimport dev._2lstudios.mcdeploy.software.RunOptions;", "import dev._2lstudios.mcdeploy.errors.MCDException;\nimport dev._2lstudios.mcdeploy.software.RunOptions;\nimport dev._2lstudios.mcdeploy.utils.FileUtils;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\n\n@Command(name = \"run\", description = \"Run server in current directory.\")\npublic class RunCommand implements Callable<Integer> {\n    @Option(description = \"Enable/disable console input and output\", defaultValue = \"true\", names = { \"-c\",\n            \"--console\" })\n    private boolean console;\n\n    @Option(description = \"Directory where install server\", names = { \"-d\", \"--directory\" })\n    private File cwd;\n\n    @Option(description = \"Accept EULA\", defaultValue = \"false\", names = { \"-e\", \"--eula\" })\n    private boolean eula;\n\n    @Option(description = \"Jar file\", defaultValue = \"\", names = { \"-f\", \"--file\" })\n    private String file;\n\n    @Option(description = \"Java runtime binary\", defaultValue = \"java\", names = { \"-j\", \"--java\" })\n    private String java;\n\n    @Override", "    public Integer call() throws IOException {\n        MCDeploy mcd = new MCDeploy();\n        RunOptions options = new RunOptions().setCWD(this.cwd).setEula(this.eula).setJava(this.java);\n\n        File dotMCDFile = new File(options.cwd, \".mcdeploy\");\n        if (this.file == null || this.file.isEmpty()) {\n            this.file = FileUtils.readFile(dotMCDFile);\n        }\n\n        String banner = \"Launching artifact:\\n\";\n        banner += \"> Console: \" + this.console + \"\\n\";\n        banner += \"> Eula: \" + this.eula + \"\\n\";\n        banner += \"> Jar file: \" + this.file + \"\\n\";\n        banner += \"> JRE binary: \" + options.java + \"\\n\";\n        banner += \"> Working directory: \" + options.cwd.getAbsolutePath() + \"\\n\";\n        Logger.info(banner);\n", "        try {\n            int exitCode = mcd.runLocal(this.file, this.console ? System.out::print : null, options);\n            Logger.info(\"Process exited with code: \" + exitCode);\n        } catch (MCDException e) {\n            Logger.crit(e.getMessage());\n        }\n\n        return 0;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/utils/StdListener.java", "chunked_list": ["package dev._2lstudios.mcdeploy.utils;\n\npublic interface StdListener {\n    public void onReceive(String chr);\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/utils/DownloadUtils.java", "chunked_list": ["package dev._2lstudios.mcdeploy.utils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;", "import java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Scanner;\n\npublic class DownloadUtils {\n    public static File download(String url, File target, boolean ignoreExist) throws IOException {\n        if (target.exists() && !ignoreExist) {\n            return target;\n        } else {\n            InputStream in = new URL(url).openStream();\n            Files.copy(in, Paths.get(target.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);\n            return target;\n        }\n    }\n", "    public static File downloadTemp(String url) throws IOException {\n        String tmpdir = System.getProperty(\"java.io.tmpdir\");\n        File dir = new File(tmpdir, RandomUtils.randomString(16));\n        dir.mkdirs();\n\n        String fileName = new File(url).getName();\n        File file = new File(dir, fileName);\n        return DownloadUtils.download(url, file, false);\n    }\n\n    public static String readStringFromURL(String requestURL) throws IOException {\n        try (Scanner scanner = new Scanner(new URL(requestURL).openStream(),\n                StandardCharsets.UTF_8.toString())) {\n            scanner.useDelimiter(\"\\\\A\");\n            return scanner.hasNext() ? scanner.next() : \"\";\n        }\n    }\n}\n", "    public static String readStringFromURL(String requestURL) throws IOException {\n        try (Scanner scanner = new Scanner(new URL(requestURL).openStream(),\n                StandardCharsets.UTF_8.toString())) {\n            scanner.useDelimiter(\"\\\\A\");\n            return scanner.hasNext() ? scanner.next() : \"\";\n        }\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/utils/ProcessUtils.java", "chunked_list": ["package dev._2lstudios.mcdeploy.utils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport dev._2lstudios.mcdeploy.cli.Logger;\n\npublic class ProcessUtils {\n    public static int runAndWait(String cmd, File cwd, StdListener listener) throws IOException, InterruptedException {\n        Process proc = Runtime.getRuntime().exec(cmd, new String[] {}, cwd);\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {", "public class ProcessUtils {\n    public static int runAndWait(String cmd, File cwd, StdListener listener) throws IOException, InterruptedException {\n        Process proc = Runtime.getRuntime().exec(cmd, new String[] {}, cwd);\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            public void run() {\n                if (proc.isAlive()) {\n                    Logger.info(\"Shutting down alive sub process with PID: \" + proc.pid());\n                    proc.destroy();\n                }\n            }\n        });\n", "        if (listener != null) {\n            try (InputStreamReader isr = new InputStreamReader(proc.getInputStream())) {\n                int c;\n                while ((c = isr.read()) >= 0) {\n                    String value = String.valueOf((char) c);\n                    listener.onReceive(value);\n                }\n            }\n            return proc.exitValue();\n        } else {\n            return proc.waitFor();\n        }\n    }\n", "    public static int runAndWait(String cmd, File cwd) throws IOException, InterruptedException {\n        return runAndWait(cmd, cwd, null);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/utils/FileUtils.java", "chunked_list": ["package dev._2lstudios.mcdeploy.utils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\n\npublic class FileUtils {\n    public static final File CURRENT_DIR = new File(System.getProperty(\"user.dir\"));\n    public static final String CURRENT_DIR_STR = \"a\";\n", "public class FileUtils {\n    public static final File CURRENT_DIR = new File(System.getProperty(\"user.dir\"));\n    public static final String CURRENT_DIR_STR = \"a\";\n\n    public static void deleteRecursive(File directory) {\n        for (File child : directory.listFiles()) {\n            if (child.isFile()) {\n                child.delete();\n            } else {\n                FileUtils.deleteRecursive(child);\n            }\n        }\n\n        directory.delete();\n    }\n", "    public static void moveAll(File source, File target) throws IOException {\n        for (File child : source.listFiles()) {\n            File targetChild = new File(target, child.getName());\n            Files.move(child.toPath(), targetChild.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        }\n    }\n\n    public static String readFile(File target) throws IOException {\n        return Files.readString(target.toPath());\n    }\n", "    public static void writeFile(File target, String content) throws IOException {\n        Files.writeString(target.toPath(), content, StandardCharsets.UTF_8);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/utils/RandomUtils.java", "chunked_list": ["package dev._2lstudios.mcdeploy.utils;\n\nimport java.util.Random;\n\npublic class RandomUtils {\n    private static String SALTCHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n\n    public static String randomString(int length) {\n        StringBuilder salt = new StringBuilder();\n        Random rnd = new Random();\n        while (salt.length() < length) {\n            int index = (int) (rnd.nextFloat() * SALTCHARS.length());\n            salt.append(SALTCHARS.charAt(index));\n        }\n        String saltStr = salt.toString();\n        return saltStr;\n\n    }\n}\n", "        while (salt.length() < length) {\n            int index = (int) (rnd.nextFloat() * SALTCHARS.length());\n            salt.append(SALTCHARS.charAt(index));\n        }\n        String saltStr = salt.toString();\n        return saltStr;\n\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/LocalSoftwareArtifact.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\npublic class LocalSoftwareArtifact extends SoftwareArtifact {\n    private String jarFile;\n\n    public LocalSoftwareArtifact(String jarFile) {\n        super(null, null, null);\n        this.jarFile = jarFile;\n    }\n\n    @Override", "    public String getJARName() {\n        return this.jarFile;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/SoftwareType.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\npublic enum SoftwareType {\n    SERVER, PROXY, MODDED, BEDROCK, MISC\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/SoftwareManager.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;", "import com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\nimport dev._2lstudios.mcdeploy.errors.SoftwareFetchException;\nimport dev._2lstudios.mcdeploy.utils.DownloadUtils;\n\npublic class SoftwareManager {\n    private Map<String, Software> softwares;\n\n    public SoftwareManager() {\n        this.softwares = new HashMap<>();\n    }\n\n    private void downloadHandler() throws IOException {\n        String url = \"https://github.com/sammwyy/minecraft-db/raw/main/data/servers.json\";\n        String raw = DownloadUtils.readStringFromURL(url);\n\n        Type mapType = new TypeToken<Map<String, Software>>() {\n        }.getType();\n        Map<String, Software> softwares = new Gson().fromJson(raw, mapType);\n        this.softwares = softwares;\n", "        for (Entry<String, Software> entry : this.softwares.entrySet()) {\n            entry.getValue().id = entry.getKey();\n        }\n    }\n\n    public void download() throws SoftwareFetchException {\n        try {\n            this.downloadHandler();\n        } catch (IOException e) {\n            throw new SoftwareFetchException(e);\n        }\n    }\n", "    public Software getSoftware(String id) {\n        return this.softwares.get(id);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/Software.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class Software {\n    protected String id;\n    private SoftwareInstaller installer;\n    private Map<String, String> resources;\n    private String url;\n    private String type;\n    private List<String> versions;\n", "    public String getID() {\n        return this.id;\n    }\n\n    public SoftwareInstaller getInstaller() {\n        return this.installer;\n    }\n\n    public SoftwareArtifact getArtifact(String version) {\n        if (version == null || version.equals(\"latest\") || version.isEmpty()) {\n            version = this.versions.get(0);", "    public SoftwareArtifact getArtifact(String version) {\n        if (version == null || version.equals(\"latest\") || version.isEmpty()) {\n            version = this.versions.get(0);\n        } else if (!this.versions.contains(version)) {\n            return null;\n        }\n\n        if (this.resources != null && this.resources.containsKey(version)) {\n            String artifactUrl = this.resources.get(version);\n            return new SoftwareArtifact(artifactUrl, this, version);\n        } else {\n            String artifactUrl = this.url.replace(\"{version}\", version);\n            return new SoftwareArtifact(artifactUrl, this, version);\n        }\n    }\n", "    public SoftwareArtifact getArtifact() {\n        return this.getArtifact(\"latest\");\n    }\n\n    public SoftwareType getType() {\n        return SoftwareType.valueOf(this.type.toUpperCase());\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/SoftwareInstaller.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\npublic class SoftwareInstaller {\n    private String archive;\n    private String execute;\n    private String jar;\n    private boolean temp;\n\n    public String getArchive() {\n        return this.archive;\n    }\n", "    public String getArchive() {\n        return this.archive;\n    }\n\n    public String getExecute() {\n        return this.execute;\n    }\n\n    public String getJAR() {\n        return this.jar;\n    }\n", "    public String getJAR() {\n        return this.jar;\n    }\n\n    public boolean isRunInTempDirectory() {\n        return this.temp;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/RunOptions.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\nimport java.io.File;\n\nimport dev._2lstudios.mcdeploy.utils.FileUtils;\n\npublic class RunOptions {\n    public File cwd = FileUtils.CURRENT_DIR;\n    public boolean eula = false;\n    public String java = \"java\";\n", "    public boolean eula = false;\n    public String java = \"java\";\n\n    public RunOptions setCWD(File cwd) {\n        if (cwd != null) {\n            this.cwd = cwd;\n        }\n        return this;\n    }\n\n    public RunOptions setEula(boolean eula) {\n        this.eula = eula;\n        return this;\n    }\n", "    public RunOptions setEula(boolean eula) {\n        this.eula = eula;\n        return this;\n    }\n\n    public RunOptions setJava(String java) {\n        if (java != null && !java.isEmpty()) {\n            this.java = java;\n        }\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/software/SoftwareArtifact.java", "chunked_list": ["package dev._2lstudios.mcdeploy.software;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport dev._2lstudios.mcdeploy.utils.DownloadUtils;\nimport dev._2lstudios.mcdeploy.utils.FileUtils;\nimport dev._2lstudios.mcdeploy.utils.ProcessUtils;\nimport dev._2lstudios.mcdeploy.utils.StdListener;\n\npublic class SoftwareArtifact {\n    private String url;\n    private Software software;\n    private String version;\n\n    public SoftwareArtifact(String url, Software software, String version) {\n        this.url = url;\n        this.software = software;\n        this.version = version;\n    }\n", "import dev._2lstudios.mcdeploy.utils.StdListener;\n\npublic class SoftwareArtifact {\n    private String url;\n    private Software software;\n    private String version;\n\n    public SoftwareArtifact(String url, Software software, String version) {\n        this.url = url;\n        this.software = software;\n        this.version = version;\n    }\n", "    public String getID() {\n        return this.software.getID() + \"@\" + this.version;\n    }\n\n    public String getJARName() {\n        if (this.software.getInstaller() == null) {\n            return this.software.getID() + \"-\" + this.version + \".jar\";\n        } else {\n            return this.software.getInstaller().getJAR().replace(\"{version}\", this.version);\n        }\n    }\n", "    public void download(File directory, boolean ignoreExist) throws IOException {\n        File finalFile = new File(directory, this.getJARName());\n        DownloadUtils.download(this.url, finalFile, ignoreExist);\n    }\n\n    public void install(RunOptions options) throws IOException, InterruptedException {\n        SoftwareInstaller installer = this.software.getInstaller();\n\n        if (installer == null) {\n            this.download(options.cwd, true);\n        } else {\n            File installerFile = DownloadUtils.downloadTemp(this.url);\n            File tempDir = installerFile.getParentFile();\n\n            String cmd = installer.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java);\n            int status = ProcessUtils.runAndWait(cmd, tempDir);\n", "        if (installer == null) {\n            this.download(options.cwd, true);\n        } else {\n            File installerFile = DownloadUtils.downloadTemp(this.url);\n            File tempDir = installerFile.getParentFile();\n\n            String cmd = installer.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java);\n            int status = ProcessUtils.runAndWait(cmd, tempDir);\n\n            if (status == 0) {\n                String archive = installer.getArchive();\n                File archiveFile = new File(tempDir, archive);\n                FileUtils.moveAll(archiveFile, options.cwd);\n            }\n\n            FileUtils.deleteRecursive(tempDir);\n        }\n\n        FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());\n    }\n", "            if (status == 0) {\n                String archive = installer.getArchive();\n                File archiveFile = new File(tempDir, archive);\n                FileUtils.moveAll(archiveFile, options.cwd);\n            }\n\n            FileUtils.deleteRecursive(tempDir);\n        }\n\n        FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());\n    }\n", "    public int run(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        String cmd = options.java + \" -jar \" + this.getJARName();\n        File cwd = options.cwd;\n\n        if (options.eula) {\n            FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");\n        }\n\n        return ProcessUtils.runAndWait(cmd, cwd, listener);\n    }\n", "    public void installAndRun(RunOptions options, StdListener listener) throws IOException, InterruptedException {\n        this.install(options);\n        this.run(options, listener);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/errors/SoftwareFetchException.java", "chunked_list": ["package dev._2lstudios.mcdeploy.errors;\n\npublic class SoftwareFetchException extends MCDException {\n    public SoftwareFetchException(Exception child) {\n        super(\"Cannot fetch software list.\", child);\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/errors/NoSuchSoftwareException.java", "chunked_list": ["package dev._2lstudios.mcdeploy.errors;\n\npublic class NoSuchSoftwareException extends MCDException {\n    private String software;\n\n    public NoSuchSoftwareException(String software) {\n        super(\"No such software named \" + software);\n        this.software = software;\n    }\n\n    public String getSoftware() {\n        return this.software;\n    }\n}\n", "    public String getSoftware() {\n        return this.software;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/errors/NoSuchVersionException.java", "chunked_list": ["package dev._2lstudios.mcdeploy.errors;\n\npublic class NoSuchVersionException extends MCDException {\n    private String version;\n\n    public NoSuchVersionException(String version) {\n        super(\"No such version named \" + version);\n        this.version = version;\n    }\n\n    public String getVersion() {\n        return this.version;\n    }\n}\n", "    public String getVersion() {\n        return this.version;\n    }\n}\n"]}
{"filename": "src/main/java/dev/_2lstudios/mcdeploy/errors/MCDException.java", "chunked_list": ["package dev._2lstudios.mcdeploy.errors;\n\npublic class MCDException extends Exception {\n    public MCDException(String message) {\n        super(message);\n    }\n\n    public MCDException(String message, Exception child) {\n        super(message, child);\n    }\n}\n"]}
