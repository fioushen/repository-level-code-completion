{"filename": "src/test/java/com/github/kingschan1204/threads/QueueTest.java", "chunked_list": ["package com.github.kingschan1204.threads;\n\nimport com.github.kingschan1204.easycrawl.helper.datetime.DateHelper;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.*;\n\npublic class QueueTest {\n\n    public static void main(String[] args) {\n        BlockingQueue<String> queue = new ArrayBlockingQueue<>(1);\n        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2);\n\n        Runnable producer = () ->{", "public class QueueTest {\n\n    public static void main(String[] args) {\n        BlockingQueue<String> queue = new ArrayBlockingQueue<>(1);\n        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(2);\n\n        Runnable producer = () ->{\n            try {\n                queue.put(DateHelper.now().dateTime());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        Runnable producer1 = () ->{", "            try {\n                queue.put(\"1\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        Runnable consumer = () ->{\n            try {\n                while (true) {\n                    String time = queue.take();\n                    System.out.println(\"Consumer \" + time);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        executorService.scheduleAtFixedRate(producer,1,5,TimeUnit.SECONDS);\n        executorService.scheduleAtFixedRate(producer1,1,1,TimeUnit.SECONDS);\n        executorService.submit(consumer);\n    }\n\n}\n", "            try {\n                while (true) {\n                    String time = queue.take();\n                    System.out.println(\"Consumer \" + time);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n\n        executorService.scheduleAtFixedRate(producer,1,5,TimeUnit.SECONDS);\n        executorService.scheduleAtFixedRate(producer1,1,1,TimeUnit.SECONDS);\n        executorService.submit(consumer);\n    }\n\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/ThsTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Slf4j\n@DisplayName(\"\u540c\u82b1\u987a\u6d4b\u8bd5\")\npublic class ThsTest {\n\n    String url = \"http://basic.10jqka.com.cn/api/stock/export.php?export=main&type=year&code=600519\";\n    String referer = \"http://basic.10jqka.com.cn/api/stock/export.php?export=main&type=year&code=600519\";\n\n    @DisplayName(\"\u5e74\u62a5\u4e0b\u8f7d\")\n    @Test", "@DisplayName(\"\u540c\u82b1\u987a\u6d4b\u8bd5\")\npublic class ThsTest {\n\n    String url = \"http://basic.10jqka.com.cn/api/stock/export.php?export=main&type=year&code=600519\";\n    String referer = \"http://basic.10jqka.com.cn/api/stock/export.php?export=main&type=year&code=600519\";\n\n    @DisplayName(\"\u5e74\u62a5\u4e0b\u8f7d\")\n    @Test\n    public void getYearReport() {\n        File file = new EasyCrawl<File>()\n                .webAgent(WebAgent.defaultAgent().folder(\"C:\\\\temp\\\\\")\n                        .referer(referer)\n                        .url(url))\n                .analyze(WebAgent::getFile)\n                .execute();\n        System.out.println(String.format(\"\u6587\u4ef6\u4e0a\u540d\uff1a%s \u6587\u4ef6\u5927\u5c0f\uff1a%s kb\", file.getName(), file.length() / 1024));\n    }\n\n    @DisplayName(\"\u516c\u53f8\u8d44\u6599\")\n    @Test", "    public void getYearReport() {\n        File file = new EasyCrawl<File>()\n                .webAgent(WebAgent.defaultAgent().folder(\"C:\\\\temp\\\\\")\n                        .referer(referer)\n                        .url(url))\n                .analyze(WebAgent::getFile)\n                .execute();\n        System.out.println(String.format(\"\u6587\u4ef6\u4e0a\u540d\uff1a%s \u6587\u4ef6\u5927\u5c0f\uff1a%s kb\", file.getName(), file.length() / 1024));\n    }\n\n    @DisplayName(\"\u516c\u53f8\u8d44\u6599\")\n    @Test", "    public void company() {\n        Map<String, String> map = new EasyCrawl<Map<String, String>>()\n                .webAgent(WebAgent.defaultAgent().referer(\"http://basic.10jqka.com.cn\").url(\"https://basic.10jqka.com.cn/600519/company.html\"))\n                .analyze(r -> {\n                    Map<String, String> m = new HashMap<>();\n                    String content = r.getText();\n                    Document doc = Jsoup.parse(content);\n                    Elements elements = doc.select(\"#detail > div.bd > table > tbody > tr.video-btn-box-tr > td:nth-child(2) > span\");\n                    m.put(\"name\", elements.text());\n                    m.put(\"control\", doc.select(\"#detail > div.bd > div > table > tbody > tr:nth-child(4) > td > div > span\").text());\n                    m.put(\"url\", doc.select(\"#detail > div.bd > table > tbody > tr:nth-child(3) > td:nth-child(2) > span\").text());\n                    return m;\n                }).execute();\n        System.out.println(map);\n    }\n\n\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/ProxyTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;", "import java.net.InetSocketAddress;\nimport java.net.Proxy;\n\n@Slf4j\n@DisplayName(\"\u4ee3\u7406\u6d4b\u8bd5\")\npublic class ProxyTest {\n\n    String useAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\";\n    String apiUrl = \"https://myip.ipip.net/\";\n    String ip = \"117.74.65.29\";\n    int port = 7890;\n    Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(ip, port));\n\n    @DisplayName(\"\u4ee3\u7406ip\u6d4b\u8bd5\")\n    @Test", "    public void proxyTest() {\n        String result = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().referer(apiUrl).useAgent(useAgent).url(apiUrl).proxy(proxy))\n                .analyze(r -> r.getResult().getBody()).execute();\n        System.out.println(result);\n    }\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/XueQiuTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.helper.collections.MapUtil;\nimport com.github.kingschan1204.easycrawl.helper.datetime.DateHelper;\nimport com.github.kingschan1204.easycrawl.helper.json.JsonHelper;\nimport com.github.kingschan1204.easycrawl.helper.sql.SqlHelper;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;", "import com.github.kingschan1204.easycrawl.helper.sql.SqlHelper;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n", "import java.util.Map;\n\n@Slf4j\n@DisplayName(\"\u96ea\u7403\u6d4b\u8bd5\")\npublic class XueQiuTest {\n    String page = \"https://xueqiu.com\";\n\n    @DisplayName(\"\u6240\u6709\u4ee3\u7801\")\n    @Test\n    public void getAllCode() {\n        String referer = \"https://xueqiu.com/hq/screener\";\n        String apiurl = \"https://xueqiu.com/service/screener/screen?category=CN&exchange=sh_sz&areacode=&indcode=&order_by=symbol&order=desc&page=1&size=200&only_count=0&current=&pct=&mc=&volume=&_=${timestamp}\";\n        List list = new EasyCrawl<List<JSONObject>>()\n                .webAgent(WebAgent.defaultAgent().url(apiurl).referer(referer))\n                .analyze(r -> {\n                    List<JSONObject> jsonObjects = new ArrayList<>();\n                    JSONArray jsonArray = r.getJson().get(\"data.list\", JSONArray.class);", "    public void getAllCode() {\n        String referer = \"https://xueqiu.com/hq/screener\";\n        String apiurl = \"https://xueqiu.com/service/screener/screen?category=CN&exchange=sh_sz&areacode=&indcode=&order_by=symbol&order=desc&page=1&size=200&only_count=0&current=&pct=&mc=&volume=&_=${timestamp}\";\n        List list = new EasyCrawl<List<JSONObject>>()\n                .webAgent(WebAgent.defaultAgent().url(apiurl).referer(referer))\n                .analyze(r -> {\n                    List<JSONObject> jsonObjects = new ArrayList<>();\n                    JSONArray jsonArray = r.getJson().get(\"data.list\", JSONArray.class);\n                    for (int j = 0; j < jsonArray.size(); j++) {\n                        jsonObjects.add(jsonArray.getJSONObject(j));\n                    }\n                    return jsonObjects;\n                }).executePage(null, \"page\", \"data.count\", 200);\n\n        log.info(\"\u5171{}\u652f\u80a1\u7968\", list.size());\n        list.forEach(System.out::println);\n\n    }\n\n\n    @DisplayName(\"\u5386\u53f2\u5206\u7ea2\")\n    @Test", "                    for (int j = 0; j < jsonArray.size(); j++) {\n                        jsonObjects.add(jsonArray.getJSONObject(j));\n                    }\n                    return jsonObjects;\n                }).executePage(null, \"page\", \"data.count\", 200);\n\n        log.info(\"\u5171{}\u652f\u80a1\u7968\", list.size());\n        list.forEach(System.out::println);\n\n    }\n\n\n    @DisplayName(\"\u5386\u53f2\u5206\u7ea2\")\n    @Test", "    public void getBonus() {\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/f10/cn/bonus.json?symbol=${code}&size=100&page=1&extend=true\";\n        String referer = \"https://xueqiu.com/snowman/S/SH600887/detail\";\n        Map<String, Object> args = new MapUtil<String, Object>().put(\"code\", \"SH600887\").getMap();\n        Map<String, String> cookies = getXQCookies();\n\n        String data = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().url(apiUrl).referer(referer).cookie(cookies))\n                .analyze(WebAgent::getText)\n                .execute(args);\n        System.out.println(data);\n        JSONArray rows = JsonHelper.of(data).get(\"data.items\", JSONArray.class);\n        StringBuffer sqls = new StringBuffer();", "        for (int i = 0; i < rows.size(); i++) {\n            JSONObject row = rows.getJSONObject(i);\n            //\u628a\u65f6\u95f4\u6233\u8f6c\u4e3a\u53ef\u8bfb\u65e5\u671f\n            for (String key : row.keySet()) {\n                if (row.get(key) instanceof Long) {\n                    row.put(key, DateHelper.of(row.getLong(key)).date());\n\n                }\n            }\n            String insert = SqlHelper.insert(row.keySet().toArray(new String[]{}), row.values().toArray(new Object[]{}), \"dividend\");\n            sqls.append(insert);\n\n        }\n        System.out.println(sqls);\n\n    }\n\n    @DisplayName(\"\u516c\u53f8\u7b80\u4ecb\")\n    @Test", "    public void companyInfo() {\n\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/f10/cn/company.json?symbol=${code}\";\n        String data =  new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().url(apiUrl).referer(page).cookie(getXQCookies()))\n                .analyze(WebAgent::getText)\n                .execute(new MapUtil<String, Object>().put(\"code\", \"SH600887\").getMap());\n        System.out.println(data);\n    }\n\n    @DisplayName(\"top10 \u80a1\u4e1c\")\n    @Test", "    public void top10() {\n        Map<String, Object> map = new MapUtil<String, Object>().put(\"code\", \"SH600887\").getMap();\n        Map<String, String> cookies = getXQCookies();\n        //\u83b7\u53d6\u6700\u65b0\u7684\u5341\u5927\u80a1\u4e1c \u53ca \u6240\u6709\u65f6\u95f4\u5217\u8868\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/f10/cn/top_holders.json?symbol=${code}&circula=0&count=200\";\n        String data = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().url(apiUrl).referer(page).cookie(WebAgent.getCookies(page)))\n                .analyze(WebAgent::getText)\n                .execute(map);\n        System.out.println(data);\n        //\u6307\u5b9a\u5177\u4f53\u65f6\u95f4\u83b7\u53d6top10\n        String reportUrl = \"https://stock.xueqiu.com/v5/stock/f10/cn/top_holders.json?symbol=${code}&locate=1669824000000&start=1669824000000&circula=0\";\n        data = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().url(reportUrl).referer(page).cookie(cookies))\n                .analyze(WebAgent::getText)\n                .execute(map);\n        System.out.println(data);\n    }\n\n    @DisplayName(\"\u80a1\u4e1c\u4eba\u6570\")\n    @Test", "    public void gdrs() {\n        String page = \"https://xueqiu.com/snowman/S/${code}/detail#/GDRS\";\n        Map<String, Object> map = new MapUtil<String, Object>().put(\"code\", \"SH600887\").getMap();\n        Map<String, String> cookies = getXQCookies();\n        //\u83b7\u53d6\u6700\u65b0\u7684\u5341\u5927\u80a1\u4e1c \u53ca \u6240\u6709\u65f6\u95f4\u5217\u8868\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/f10/cn/holders.json?symbol=${code}&extend=true&page=1&size=100\";\n        String data = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().url(apiUrl).referer(page).cookie(cookies))\n                .analyze(WebAgent::getText)\n                .execute(map);\n        System.out.println(data);\n    }\n\n\n    @DisplayName(\"\u65e5k\u7ebf\")\n    @Test", "    public void dayOfKline() {\n        int pageSize = -284;\n        Map<String, Object> map = new MapUtil<String, Object>()\n                .put(\"code\", \"SH600887\") //\u80a1\u7968\u4ee3\u7801\n                .put(\"begin\", System.currentTimeMillis()) //\u5f00\u59cb\u65f6\u95f4\n                .put(\"count\", pageSize) //\u67e5\u8fc7\u53bb\u591a\u5c11\u5929\u7684\u6570\u636e\n                .getMap();\n        Map<String, String> cookies = getXQCookies();\n\n        //\u83b7\u53d6\u6700\u65b0\u7684\u5341\u5927\u80a1\u4e1c \u53ca \u6240\u6709\u65f6\u95f4\u5217\u8868\n        String referer = \"https://xueqiu.com/S/${code}\";\n        String dataUrl = \"https://stock.xueqiu.com/v5/stock/chart/kline.json?symbol=${code}&begin=${begin}&period=day&type=before&count=${count}&indicator=kline,pe,pb,ps,pcf,market_capital,agt,ggt,balance\";\n        List<String> list = new ArrayList<>();\n        boolean hasNext = true;", "        while (hasNext) {\n            JsonHelper jsonHelper = new EasyCrawl<JsonHelper>()\n                    .webAgent(WebAgent.defaultAgent().url(dataUrl).referer(referer).cookie(cookies))\n                    .analyze(WebAgent::getJson).execute(map);\n\n            JSONArray columns = jsonHelper.get(\"data.column\", JSONArray.class);\n            JSONArray rows = jsonHelper.get(\"data.item\", JSONArray.class);\n            StringBuffer sqls = new StringBuffer();\n            for (int i = 0; i < rows.size(); i++) {\n                JSONArray array = rows.getJSONArray(i);\n                //2000-01-01 00:00:00", "            for (int i = 0; i < rows.size(); i++) {\n                JSONArray array = rows.getJSONArray(i);\n                //2000-01-01 00:00:00\n                if (DateHelper.of(array.getLong(0)).year().equals(\"2000\")) {\n                    System.out.println(String.format(\"2000\u5e74\u4ee5\u524d\u7684\u6570\u636e\u4e0d\u8981\u4e86\uff01%s\", DateHelper.of(array.getLong(0)).date()));\n                    hasNext = false;\n                    break;\n                }\n                //\u628a\u65f6\u95f4\u6233\u8f6c\u4e3a\u53ef\u8bfb\u65e5\u671f\n                array.set(0, DateHelper.of(array.getLong(0)).date());\n                String insert = SqlHelper.insert(columns.toArray(), array.toArray(new Object[]{}), \"kline_600887\");\n                sqls.append(insert);\n\n            }\n            list.add(sqls.toString());\n            //\u8bbe\u7f6e\u4e0b\u4e00\u6b21\u7684\u53c2\u6570\n            System.out.println(\n                    String.format(\"\u65f6\u95f4\u8303\u56f4\uff1a %s ~ %s\",\n                            DateHelper.of(rows.getJSONArray(0).getLong(0)).date(),\n                            DateHelper.of(rows.getJSONArray(rows.size() - 1).getLong(0)).date())\n            );\n            map.put(\"begin\", rows.getJSONArray(0).getLong(0));", "            if (rows.size() < Math.abs(pageSize)) {\n                System.out.println(\"\u6ca1\u6709\u6570\u636e\u4e86\uff01\");\n                hasNext = false;\n                break;\n            }\n        }\n        list.forEach(System.err::println);\n\n    }\n\n    @DisplayName(\"\u4e2a\u80a1\u8be6\u60c5\")\n    @Test", "    public void proxyTest() {\n        Map<String, String> cookies = getXQCookies();\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/quote.json?symbol=SH600887&extend=detail\";\n        String referer = \"https://xueqiu.com/S/SH600887\";\n        String result = new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().referer(referer).cookie(cookies).url(apiUrl))\n                .analyze(r -> r.getResult().getBody()).execute();\n        System.out.println(result);\n    }\n\n    @DisplayName(\"\u4e3b\u8981\u6307\u6807\")\n    @Test", "    public void mainIndex() throws Exception {\n        String apiUrl = \"https://stock.xueqiu.com/v5/stock/finance/cn/indicator.json?symbol=SZ002304&type=Q4&is_detail=true&count=5&timestamp=\";\n        String referer = \"https://xueqiu.com/snowman/S/SZ002304/detail\";\n        JsonHelper result = new EasyCrawl<JsonHelper>()\n                .webAgent(WebAgent.defaultAgent().referer(referer).cookie(getXQCookies()).url(apiUrl))\n                .analyze(WebAgent::getJson)\n                .execute();\n        System.out.println(result);\n    }\n\n    Map<String, String> getXQCookies(){\n        String cookieUrl = \"https://xueqiu.com/about/contact-us\";\n        return WebAgent.getCookies(cookieUrl);\n    }\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/ResponseTypeTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.helper.collections.MapUtil;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Map;\n", "import java.util.Map;\n\n@DisplayName(\"\u5404\u6587\u4ef6\u7c7b\u578b\u6d4b\u8bd5\")\npublic class ResponseTypeTest {\n\n    @Test\n    public void test() {\n        Map<String, String> map = new MapUtil<String, String>()\n                .put(\"js\", \"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js\")\n                .put(\"css\", \"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap-grid.min.css\")\n                .put(\"html\", \"https://www.bootcdn.cn/\")\n                .put(\"png\", \"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\")\n                .put(\"pdf\", \"http://notice.10jqka.com.cn/api/pdf/6cb73f7b9c9925c3.pdf\")\n                .getMap();", "        for (String type : map.keySet()) {\n            new EasyCrawl<String>().webAgent(WebAgent.defaultAgent().url(map.get(type))).analyze(WebAgent::getText).execute();\n        }\n    }\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/ExChangeTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\n@Slf4j\n@DisplayName(\"\u5927\u76d8\u6307\u6570\u6d4b\u8bd5\")\npublic class ExChangeTest {\n\n    @DisplayName(\"\u65b0\u6d6a\")\n    @Test", "@Slf4j\n@DisplayName(\"\u5927\u76d8\u6307\u6570\u6d4b\u8bd5\")\npublic class ExChangeTest {\n\n    @DisplayName(\"\u65b0\u6d6a\")\n    @Test\n    public void sina() {\n        String referer = \"http://finance.sina.com.cn\";\n        String apiUrl = \"http://hq.sinajs.cn/list=sz399001,sh000001,sz399006,sh000300\";\n        String data =  new EasyCrawl<String>()\n                .webAgent(WebAgent.defaultAgent().referer(referer).url(apiUrl))\n                .analyze(WebAgent::getText)\n                .execute();\n        System.out.println(data);\n    }\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/CsIndexTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.HttpRequestConfig;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.helper.collections.MapUtil;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport java.io.File;", "import org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.util.Map;\n\n@Slf4j\n@DisplayName(\"\u4e2d\u8bc1\")\npublic class CsIndexTest {\n\n    @DisplayName(\"\u884c\u4e1a\u5206\u7c7b\u8868\u4e0b\u8f7d\")\n    @Test\n    public void industry() {\n        String cookieUrl = \"https://www.csindex.com.cn/en/indices/index-detail/000300#/dataService/industryClassification\";\n        String reqUrl = \"https://www.csindex.com.cn/csindex-home/exportExcel/security-industry-search-excel/CH\";\n        String referer = \"https://www.csindex.com.cn/en/indices/index-detail/000300\";\n        Map<String, String> cookies = WebAgent.defaultAgent().referer(\"https://www.csindex.com.cn\").url(cookieUrl).execute(null).getResult().getCookies();\n\n        File file = new EasyCrawl<File>()\n                .webAgent(WebAgent.defaultAgent().folder(\"C:\\\\temp\\\\\")\n                        .url(reqUrl)\n                        .head(new MapUtil<String, String>().put(\"Content-Type\", \"application/json; charset=utf-8\").getMap())\n                        .referer(referer)\n                        .cookie(cookies)\n                        .method(HttpRequestConfig.Method.POST)\n                        .body(\"{\\\"searchInput\\\":\\\"\\\",\\\"pageNum\\\":1,\\\"pageSize\\\":10,\\\"sortField\\\":null,\\\"sortOrder\\\":null}\"))\n                .analyze(WebAgent::getFile)\n                .execute();\n        System.out.println(String.format(\"\u6587\u4ef6\u4e0a\u540d\uff1a%s \u6587\u4ef6\u5927\u5c0f\uff1a%s kb\", file.getName(), file.length() / 1024));\n    }\n}\n", "    public void industry() {\n        String cookieUrl = \"https://www.csindex.com.cn/en/indices/index-detail/000300#/dataService/industryClassification\";\n        String reqUrl = \"https://www.csindex.com.cn/csindex-home/exportExcel/security-industry-search-excel/CH\";\n        String referer = \"https://www.csindex.com.cn/en/indices/index-detail/000300\";\n        Map<String, String> cookies = WebAgent.defaultAgent().referer(\"https://www.csindex.com.cn\").url(cookieUrl).execute(null).getResult().getCookies();\n\n        File file = new EasyCrawl<File>()\n                .webAgent(WebAgent.defaultAgent().folder(\"C:\\\\temp\\\\\")\n                        .url(reqUrl)\n                        .head(new MapUtil<String, String>().put(\"Content-Type\", \"application/json; charset=utf-8\").getMap())\n                        .referer(referer)\n                        .cookie(cookies)\n                        .method(HttpRequestConfig.Method.POST)\n                        .body(\"{\\\"searchInput\\\":\\\"\\\",\\\"pageNum\\\":1,\\\"pageSize\\\":10,\\\"sortField\\\":null,\\\"sortOrder\\\":null}\"))\n                .analyze(WebAgent::getFile)\n                .execute();\n        System.out.println(String.format(\"\u6587\u4ef6\u4e0a\u540d\uff1a%s \u6587\u4ef6\u5927\u5c0f\uff1a%s kb\", file.getName(), file.length() / 1024));\n    }\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/easycrawl/SzseTest.java", "chunked_list": ["package com.github.kingschan1204.easycrawl;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.helper.http.UrlHelper;\nimport com.github.kingschan1204.easycrawl.task.EasyCrawl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;", "import lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport java.util.concurrent.CompletableFuture;\n\n@Slf4j", "\n@Slf4j\n@DisplayName(\"\u6df1\u4ea4\u6240\u6d4b\u8bd5\")\npublic class SzseTest {\n\n    String referer = \"http://www.szse.cn/disclosure/index.html\";\n    String useAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\";\n    String apiUrl = \"http://www.szse.cn/api/report/exchange/onepersistenthour/monthList?month=2023-03\";\n\n\n    TreeMap<String, Boolean> getDay(String month) {", "        try {\n            String url = new UrlHelper(apiUrl).set(\"month\", month).getUrl();\n           String data = new EasyCrawl<String>()\n                    .webAgent(WebAgent.defaultAgent().referer(referer).url(url))\n                    .analyze(WebAgent::getText)\n                    .execute();\n            return parserData(data);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    TreeMap<String, Boolean> parserData(String text) {\n        JSONObject json = new JSONObject(true);\n        json = JSON.parseObject(text);\n        JSONArray jsonArray = json.getJSONArray(\"data\");\n        TreeMap<String, Boolean> data = new TreeMap<>();", "        for (int i = 0; i < jsonArray.size(); i++) {\n            data.put(\n                    jsonArray.getJSONObject(i).getString(\"jyrq\"),\n                    jsonArray.getJSONObject(i).getInteger(\"jybz\") == 1\n            );\n        }\n        return data;\n    }\n\n    @DisplayName(\"\u4ea4\u6613\u65e5\u6570\u636e\")\n    @Test", "    public void tradingDay() throws Exception {\n\n        int year = 2020;\n        int end = 2023;\n        List<String> month = new ArrayList<>();\n        for (int i = year; i <= end; i++) {\n            for (int j = 1; j < 13; j++) {\n                month.add(String.format(\"%s-%02d\", i, j));\n            }\n        }\n        List<CompletableFuture> list = new ArrayList<>();", "        for (String s : month) {\n            CompletableFuture cf = CompletableFuture.supplyAsync(() -> getDay(s));\n            cf.thenAccept(System.out::println);\n            list.add(cf);\n        }\n        CompletableFuture.allOf(list.toArray(new CompletableFuture[]{})).join();\n    }\n\n    @DisplayName(\"\u6708\u4efd\u4ea4\u6613\u65e5\u6570\u636e\")\n    @Test\n    public void proxyTest() throws Exception {\n        String month = \"2023-03\";\n        String url = new UrlHelper(apiUrl).set(\"month\", month).getUrl();\n        TreeMap<String, Boolean> result = new EasyCrawl< TreeMap<String, Boolean>>()\n                .webAgent(WebAgent.defaultAgent().referer(url).useAgent(useAgent).url(apiUrl))\n                .analyze(r -> parserData(r.getResult().getBody()))\n                .execute();\n        System.out.println(result);\n    }\n\n}\n", "    public void proxyTest() throws Exception {\n        String month = \"2023-03\";\n        String url = new UrlHelper(apiUrl).set(\"month\", month).getUrl();\n        TreeMap<String, Boolean> result = new EasyCrawl< TreeMap<String, Boolean>>()\n                .webAgent(WebAgent.defaultAgent().referer(url).useAgent(useAgent).url(apiUrl))\n                .analyze(r -> parserData(r.getResult().getBody()))\n                .execute();\n        System.out.println(result);\n    }\n\n}\n"]}
{"filename": "src/test/java/com/github/kingschan1204/text/RegexTest.java", "chunked_list": ["package com.github.kingschan1204.text;\n\nimport com.github.kingschan1204.easycrawl.helper.regex.RegexHelper;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@DisplayName(\"\u6b63\u5219\u6d4b\u8bd5\")\npublic class RegexTest {\n\n    @Test", "\n@DisplayName(\"\u6b63\u5219\u6d4b\u8bd5\")\npublic class RegexTest {\n\n    @Test\n    public void charsetTest() {\n        String content = \"\\t<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset =gbk \\\"/>\\n<html lang=\\\"zh\\\" data-hairline=\\\"true\\\" class=\\\"itcauecng\\\" data-theme=\\\"light\\\"><head><META CHARSET=\\\"utf-8 \\\"/><title data-rh=\\\"true\\\">\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5</title>\";\n        List<String> list = RegexHelper.find(content, \"<(?i)meta(\\\\s+|.*)(?i)charSet(\\\\s+)?=.*/>\");\n        System.out.println(list);\n        list.forEach(r -> {\n            System.out.println(RegexHelper.find(r, \"(?i)charSet(\\\\s+)?=.*\\\"\").stream().map(s -> s.replaceAll(\"(?i)charSet|=|\\\"|\\\\s\", \"\")).collect(Collectors.joining(\",\")));\n        });\n        System.err.println(RegexHelper.findFirst(content, \"<(?i)meta(\\\\s+|.*)(?i)charSet(\\\\s+)?=.*/>\"));\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/task/EasyCrawl.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.task;\n\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.helper.http.UrlHelper;\nimport com.github.kingschan1204.easycrawl.helper.json.JsonHelper;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;", "import java.util.*;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\n@Slf4j\npublic class EasyCrawl<R> {\n\n    private WebAgent webAgent;\n    private Function<WebAgent, R> parserFunction;\n\n    public EasyCrawl<R> webAgent(WebAgent webAgent) {\n        this.webAgent = webAgent;\n        return this;\n    }\n", "//    public static EasyCrawlNew of(WebAgentNew webAgent){\n//        return new EasyCrawlNew(webAgent);\n//    }\n\n    public EasyCrawl<R> analyze(Function<WebAgent, R> parserFunction) {\n        this.parserFunction = parserFunction;\n        return this;\n    }\n\n    public R execute() {\n        return execute(null);\n    }\n", "    public R execute() {\n        return execute(null);\n    }\n\n    public R execute(Map<String, Object> map) {\n        Assert.notNull(webAgent, \"agent\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n        Assert.notNull(parserFunction, \"\u89e3\u6790\u51fd\u6570\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n        R result;\n        CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {\n            try {\n                return webAgent.execute(map);\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }).thenApply(parserFunction);", "            try {\n                return webAgent.execute(map);\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }).thenApply(parserFunction);\n        try {\n            result = cf.get();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return result;\n    }\n\n    /**\n     * restApi json\u683c\u5f0f\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u9875\n     * @param map          \u8fd0\u884c\u53c2\u6570\n     * @param pageIndexKey \u9875\u7801key\n     * @param totalKey     \u603b\u8bb0\u5f55\u6761\u6570key\n     * @param pageSize\n     * @return\n     */\n    public List<R> executePage(Map<String, Object> map, String pageIndexKey, String totalKey, Integer pageSize) {\n        List<R> list = Collections.synchronizedList(new ArrayList<>());\n        WebAgent data = webAgent.execute(map);\n        JsonHelper json = data.getJson();\n        int totalRows = json.get(totalKey, Integer.class);\n        int totalPage = (totalRows + pageSize - 1) / pageSize;\n        log.debug(\"\u5171{}\u8bb0\u5f55,\u6bcf\u9875\u5c55\u793a{}\u6761,\u5171{}\u9875\", totalRows, pageSize, totalPage);\n\n        List<CompletableFuture<R>> cfList = new ArrayList<>();\n        Consumer<R> consumer = (r) -> {", "            if (r instanceof Collection) {\n                list.addAll((Collection<? extends R>) r);\n            } else {\n                list.add(r);\n            }\n        };\n        cfList.add(CompletableFuture.supplyAsync(() -> data).thenApply(parserFunction));\n        cfList.get(0).thenAccept(consumer);\n\n        for (int i = 2; i <= totalPage; i++) {\n            String url = new UrlHelper(webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();\n            CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {", "        for (int i = 2; i <= totalPage; i++) {\n            String url = new UrlHelper(webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();\n            CompletableFuture<R> cf = CompletableFuture.supplyAsync(() -> {\n                try {\n                    return webAgent.url(url).execute(map);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n            }).thenApply(parserFunction);\n            cf.thenAccept(consumer);\n            cfList.add(cf);\n        }\n        CompletableFuture.allOf(cfList.toArray(new CompletableFuture[]{})).join();\n        return list;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/thread/PausableThreadPoolExecutor.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.*;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * @author kingschan", "/**\n * @author kingschan\n */\n@Slf4j\npublic class PausableThreadPoolExecutor extends ThreadPoolExecutor {\n\n    private boolean isPaused;\n    private ReentrantLock lock;\n    private Condition condition;\n\n    public PausableThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);\n        lock = new ReentrantLock();\n        condition = lock.newCondition();\n    }\n\n\n    /**\n     * @param thread   The thread being executed\n     * @param runnable The runnable task\n     * @see {@link ThreadPoolExecutor#beforeExecute(Thread, Runnable)}\n     */\n    @Override\n    protected void beforeExecute(Thread thread, Runnable runnable) {\n        super.beforeExecute(thread, runnable);\n        lock.lock();", "        try {\n            while (isPaused) {\n                condition.await();\n            }\n        } catch (InterruptedException ie) {\n            thread.interrupt();\n        } finally {\n            lock.unlock();\n        }\n    }\n", "    public boolean isRunning() {\n        return !isPaused;\n    }\n\n    public boolean isPaused() {\n        return isPaused;\n    }\n\n    /**\n     * Pause the execution\n     */", "    public void pause() {\n        lock.lock();\n        try {\n            isPaused = true;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * Resume pool execution\n     */", "    public void resume() {\n        lock.lock();\n        try {\n            isPaused = false;\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/thread/MonitorScheduledThreadPool.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;", "import java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n/**\n * @author kingschan\n */\n@Slf4j\npublic class MonitorScheduledThreadPool extends ScheduledThreadPoolExecutor {\n\n\n    /**\n     * \u9519\u8bef\u6b21\u6570\n     */\n    private AtomicInteger errorNumber;\n    /**\n     * \u6700\u5927\u9519\u8bef\u6b21\u6570\n     */\n    private Integer maxErrorNumber;\n    /**\n     * \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4\n     */\n    long start = 0L;\n    /**\n     * \u4efb\u52a1\u8017\u65f6\u6beb\u79d2\u6570\n     */\n    private Double runMillSeconds = 0.0;\n\n\n    boolean isPause = false;\n    ReentrantLock lock = new ReentrantLock();\n    Condition condition = lock.newCondition();\n\n\n    public MonitorScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler,AtomicInteger errorNumber,Integer maxErrorNumber) {\n        super(corePoolSize, threadFactory, handler);\n        this.errorNumber = errorNumber;\n        this.maxErrorNumber = maxErrorNumber;\n    }\n\n    @Override\n    protected void beforeExecute(Thread t, Runnable r) {", "        try {\n            start = System.currentTimeMillis();\n            lock.lock();\n            super.beforeExecute(t, r);\n            while (isPause) {\n                long ms = 10L;\n                log.info(\"{} \u4efb\u52a1\u5df2\u88ab\u6682\u505c!\", t.getName());\n                Thread.sleep(ms);\n                condition.await();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    @Override\n    protected void afterExecute(Runnable r, Throwable t) {\n        super.afterExecute(r, t);\n        //\u5982\u679c\u6700\u5927\u9519\u8bef\u6b21\u6570\u4e3a0 \u5219\u4e0d\u9650\u5236\u9519\u8bef\u6b21\u6570", "        if (maxErrorNumber != 0 && errorNumber.get() > maxErrorNumber) {\n            log.error(\"\u9519\u8bef\u6b21\u6570\u8fc7\u591a\uff0c\u5373\u5c06\u5173\u95ed\u7ebf\u7a0b\u4efb\u52a1\uff0c\u5f53\u524d\u9519\u8bef\u6570:{} \u6700\u5927\u5141\u8bb8\u9519\u8bef\u6b21\u6570\uff1a{}\", errorNumber.get(), maxErrorNumber);\n            shutdown();\n        }\n        trace();\n        runMillSeconds = Double.valueOf(System.currentTimeMillis() - start);\n    }\n\n    void trace() {\n        log.info(\"\u3010{}\u3011 - {} \u672c\u6b21\u8017\u65f6{}\u79d2\",\n                Thread.currentThread().getName(),\n                String.format(\"\u603b\u7ebf\u7a0b\u6570:%s,\u6d3b\u52a8\u7ebf\u7a0b\u6570:%s,\u6267\u884c\u5b8c\u6210\u7ebf\u7a0b\u6570:%s,\u6392\u961f\u7ebf\u7a0b\u6570:%s,\u9519\u8bef\u6b21\u6570\uff1a%s\",\n                        getTaskCount(),\n                        getActiveCount(),\n                        getCompletedTaskCount(),\n                        getQueue().size(),\n                        errorNumber\n                )\n                , runMillSeconds\n        );\n    }\n\n\n    @Override\n    protected void terminated() {\n        super.terminated();\n        log.warn(\"\u7ebf\u7a0b{}\u5df2\u88ab\u5173\u95ed\uff01 \", Thread.currentThread().getName());\n    }\n\n    /**\n     * \u6682\u505c\n     */", "    public void pause() {\n        lock.lock();\n        isPause = true;\n        lock.unlock();\n    }\n\n    /**\n     * \u7ee7\u7eed\u6267\u884c\n     */\n    public void resume() {\n        lock.lock();\n        isPause = false;\n        condition.signalAll();\n        lock.unlock();\n    }\n\n    /**\n     * \u4efb\u52a1\u662f\u5426\u88ab\u6682\u505c\n     *\n     * @return true \u6682\u505c  false \u6b63\u5e38\n     */", "    public void resume() {\n        lock.lock();\n        isPause = false;\n        condition.signalAll();\n        lock.unlock();\n    }\n\n    /**\n     * \u4efb\u52a1\u662f\u5426\u88ab\u6682\u505c\n     *\n     * @return true \u6682\u505c  false \u6b63\u5e38\n     */", "    public boolean isPause() {\n        return isPause;\n    }\n\n    /**\n     * \u5f97\u5230\u4e0a\u6b21\u8fd0\u884c\u65f6\u95f4\n     *\n     * @return\n     */\n    public Double getRunMillSeconds() {\n        return this.runMillSeconds;\n    }\n}\n", "    public Double getRunMillSeconds() {\n        return this.runMillSeconds;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/plugs/poi/ExcelHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.plugs.poi;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Slf4j\npublic class ExcelHelper {\n\n    public static List<Object[]> read(String filePath, int sheetIndex) throws Exception {\n        FileInputStream inputStream = new FileInputStream(new File(filePath));\n        Workbook workbook = new XSSFWorkbook(inputStream);\n        Sheet sheet = workbook.getSheetAt(sheetIndex);\n        List<Object[]> list = new ArrayList<>();\n", "        for (Row row : sheet) {\n            List<Object> rowData = new ArrayList<>();\n//            Cell cell = row.getCell();\n            for (Cell cell : row) {\n                switch (cell.getCellType()) {\n                    case NUMERIC:   //\u6570\u5b57\n                        Double doubleValue = cell.getNumericCellValue();\n                        rowData.add(doubleValue);\n                        // \u683c\u5f0f\u5316\u79d1\u5b66\u8ba1\u6570\u6cd5\uff0c\u53d6\u4e00\u4f4d\u6574\u6570\n//                        DecimalFormat df = new DecimalFormat(\"0\");\n//                         = df.format(doubleValue);\n                        break;\n                    case STRING:    //\u5b57\u7b26\u4e32\n                        rowData.add(cell.getStringCellValue());\n                        break;\n                    case BOOLEAN:   //\u5e03\u5c14\n                        rowData.add(cell.getBooleanCellValue());\n                        break;\n                    case BLANK:     // \u7a7a\u503c\n                        rowData.add(null);\n                        break;\n                    case FORMULA:   // \u516c\u5f0f\n                        rowData.add(cell.getCellFormula());\n                        break;\n                    case ERROR:     // \u6545\u969c\n                        break;\n                    default:\n                        break;\n                }\n            }\n            list.add(rowData.toArray(new Object[]{}));\n        }\n        workbook.close();\n        inputStream.close();\n        return list;\n\n    }\n", "    public static void main(String[] args) throws Exception {\n        String file = \"C:\\\\temp\\\\\u884c\u4e1a\u5206\u7c7b.xlsx\";\n        List<Object[]> list = ExcelHelper.read(file,0);\n        list.stream().forEach(r -> {\n            Object[] objects = r;\n            String s = Arrays.stream(objects).map(String::valueOf).collect(Collectors.joining(\",\"));\n            System.out.println(s);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/plugs/freemarker/StringTemplateLoader.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.plugs.freemarker;\n\nimport freemarker.cache.TemplateLoader;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\n\n/**\n *", "/**\n *\n * @author kings.chan\n * @create 2020-02-13 12:15\n **/\npublic class StringTemplateLoader implements TemplateLoader {\n    private String template;\n\n    public StringTemplateLoader(String template) {\n        this.template = template;\n        if (null == template) {\n            this.template = \"\";\n        }\n    }\n\n    @Override", "        if (null == template) {\n            this.template = \"\";\n        }\n    }\n\n    @Override\n    public void closeTemplateSource(Object templateSource) throws IOException {\n        ((StringReader) templateSource).close();\n    }\n\n    @Override", "    public Object findTemplateSource(String name) throws IOException {\n        return new StringReader(template);\n    }\n\n    @Override\n    public long getLastModified(Object templateSource) {\n        return 0;\n    }\n\n    @Override\n    public Reader getReader(Object templateSource, String encoding) throws IOException {\n        return (Reader) templateSource;\n    }\n\n\n}\n", "    public Reader getReader(Object templateSource, String encoding) throws IOException {\n        return (Reader) templateSource;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/plugs/freemarker/FreemarkParser.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.plugs.freemarker;\n\nimport com.alibaba.fastjson.JSON;\nimport com.github.kingschan1204.easycrawl.plugs.freemarker.tag.UnixTimeStampTag;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.StringWriter;\nimport java.util.Map;", "import java.io.StringWriter;\nimport java.util.Map;\n\n/**\n * @author kings.chan\n * @create 2020-02-13 15:30\n **/\n@Slf4j\npublic class FreemarkParser {\n\n    public String parse(String text, Map<String, Object> valMap) throws Exception {\n        return freemarkerParse(text, valMap);\n    }\n\n    /**\n     * \u6a21\u677f\u89e3\u6790\n     *\n     * @param text\n     * @param valMap\n     * @return\n     * @throws Exception\n     */", "public class FreemarkParser {\n\n    public String parse(String text, Map<String, Object> valMap) throws Exception {\n        return freemarkerParse(text, valMap);\n    }\n\n    /**\n     * \u6a21\u677f\u89e3\u6790\n     *\n     * @param text\n     * @param valMap\n     * @return\n     * @throws Exception\n     */", "    public String freemarkerParse(String text, Map<String, Object> valMap) throws Exception {\n        Configuration configuration = new Configuration(Configuration.VERSION_2_3_32);\n        //<@ts len=10>${v}</@ts>\n        configuration.setSharedVariable(\"ts\", new UnixTimeStampTag());\n        configuration.setTemplateLoader(new StringTemplateLoader(text));\n        configuration.setDefaultEncoding(\"UTF-8\");\n        configuration.setNumberFormat(\"#.####\");\n        Template template = configuration.getTemplate(\"\");\n        StringWriter writer = new StringWriter();\n        try {\n            template.process(valMap, writer);\n        } catch (Exception e) {\n            System.out.println(JSON.toJSONString(valMap));\n            System.out.println(text);\n            throw e;\n        }\n        return writer.toString();\n    }\n", "        try {\n            template.process(valMap, writer);\n        } catch (Exception e) {\n            System.out.println(JSON.toJSONString(valMap));\n            System.out.println(text);\n            throw e;\n        }\n        return writer.toString();\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"<@ts>${v}</@ts>\";\n        String result = new FreemarkParser().parse(text, null);\n        System.out.println(result);\n    }\n}\n", "    public static void main(String[] args) throws Exception {\n        String text = \"<@ts>${v}</@ts>\";\n        String result = new FreemarkParser().parse(text, null);\n        System.out.println(result);\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/plugs/freemarker/tag/UnixTimeStampTag.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.plugs.freemarker.tag;\n\nimport com.alibaba.fastjson.JSON;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\nimport freemarker.core.Environment;\nimport freemarker.template.*;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.IOException;\nimport java.util.Map;", "import java.io.IOException;\nimport java.util.Map;\n\n@Slf4j\npublic class UnixTimeStampTag implements TemplateDirectiveModel {\n\n    @Override\n    public void execute(Environment environment, Map map, TemplateModel[] templateModels, TemplateDirectiveBody templateDirectiveBody) throws TemplateException, IOException {\n        DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_32);\n        log.debug(\"Freemarker \u81ea\u5b9a\u4e49\u6807\u7b7e\u4f20\u5165\u53c2\u6570\uff1a{}\", JSON.toJSONString(map));\n        //\u9ed8\u8ba4\u8f93\u51fa13\u4f4d\n        String type = map.containsKey(\"len\") ? String.valueOf(map.get(\"len\")) : \"13\";\n        Assert.isTrue(type.matches(\"10|13\"), \"\u65f6\u95f4\u6233\u53ea\u652f\u630110\u4f4d\u6216\u800513\u4f4d\uff01\");\n        long timeStamp = type.equals(\"13\") ? System.currentTimeMillis() : System.currentTimeMillis() / 1000;\n        TemplateModel tm = builder.build().wrap(timeStamp);\n        environment.setVariable(\"v\", tm);\n        templateDirectiveBody.render(environment.getOut());\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/store/DataStore.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.store;\n\nimport java.util.Map;\n\n/**\n * @author kingschan\n * 2023-4-25\n */\npublic interface DataStore {\n\n\n    enum TableModel {\n        EXISTS,\n        AUTO_CREATE\n\n    }\n\n\n    DataStore table(String name, TableModel model);\n\n    DataStore primary(String key);\n\n    DataStore batchSize(int size);\n\n    DataStore upsert(String condition);\n\n    DataStore execute();\n\n    DataStore mapping(Map<String, String> map);\n\n}\n", "public interface DataStore {\n\n\n    enum TableModel {\n        EXISTS,\n        AUTO_CREATE\n\n    }\n\n\n    DataStore table(String name, TableModel model);\n\n    DataStore primary(String key);\n\n    DataStore batchSize(int size);\n\n    DataStore upsert(String condition);\n\n    DataStore execute();\n\n    DataStore mapping(Map<String, String> map);\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/variable/Expression.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.variable;\n\nimport java.util.Map;\n\npublic interface Expression {\n    /**\n     *\n     * @param args \u53c2\u6570\n     * @return \u89e3\u6790\u8868\u8fbe\u5f0f\u540e\u7684\u7ed3\u679c\n     */\n    String execute(Map<String, String> args);\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/variable/ScanVariable.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.variable;\n\nimport com.github.kingschan1204.easycrawl.core.variable.impl.TimeStampExpression;\nimport com.github.kingschan1204.easycrawl.helper.regex.RegexHelper;\nimport com.github.kingschan1204.easycrawl.helper.collections.MapUtil;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * @author kingschan\n */\npublic class ScanVariable {\n\n    private static final Map<String, Expression> elMap;\n\n    static {\n        elMap = new HashMap<>();\n        elMap.put(\"timestamp\", new TimeStampExpression());\n    }\n\n    /**\n     * \u626b\u63cf\u5e76\u89e3\u6790\u53d8\u91cf\n     *\n     * @param text \u8981\u626b\u63cf\u7684\u6587\u672c\n     * @param map  \u4f20\u5165\u7684\u53c2\u6570\n     * @return String\n     */", "    public static String parser(String text, Map<String, Object> map) {\n        if (null == text) {\n            return null;\n        }\n        List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{(\\\\w|\\\\s|\\\\=)+\\\\}\");\n        if (null != exps && exps.size() > 0) {\n            for (String el : exps) {\n                String[] els = el.replaceAll(\"[${}]\", \"\").split(\"\\\\s+\");\n                String tag = els[0];\n                Map<String, String> argsMap = new HashMap<>(10);\n                if (els.length > 1) {", "                if (els.length > 1) {\n                    for (int i = 1; i < els.length; i++) {\n                        String[] token = els[i].split(\"=\");\n                        argsMap.put(token[0], token[1]);\n                    }\n                }\n                if (elMap.containsKey(tag)) {\n                    text = text.replace(el, elMap.get(tag).execute(argsMap));\n                }\n                if (null != map && map.containsKey(tag)) {\n                    text = text.replace(el, String.valueOf(map.get(tag)));\n                }\n            }\n        }\n        return text;\n    }\n", "                if (null != map && map.containsKey(tag)) {\n                    text = text.replace(el, String.valueOf(map.get(tag)));\n                }\n            }\n        }\n        return text;\n    }\n\n    public static void main(String[] args) {\n        String text = \"https://xueqiu.com/service/screener/screen?category=CN&exchange=sh_sz&areacode=&indcode=&order_by=symbol&order=desc&page=${page}&size=${pageSize}&only_count=0&current=&pct=&mc=&volume=&_=${timestamp}\";\n        System.out.println(ScanVariable.parser(text,\n                new MapUtil<String, Object>()\n                        .put(\"page\", \"1\")\n                        .put(\"pageSize\", \"300\")\n                        .getMap()));\n    }\n\n}\n", "    public static void main(String[] args) {\n        String text = \"https://xueqiu.com/service/screener/screen?category=CN&exchange=sh_sz&areacode=&indcode=&order_by=symbol&order=desc&page=${page}&size=${pageSize}&only_count=0&current=&pct=&mc=&volume=&_=${timestamp}\";\n        System.out.println(ScanVariable.parser(text,\n                new MapUtil<String, Object>()\n                        .put(\"page\", \"1\")\n                        .put(\"pageSize\", \"300\")\n                        .getMap()));\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/variable/impl/TimeStampExpression.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.variable.impl;\n\nimport com.github.kingschan1204.easycrawl.core.variable.Expression;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\n\nimport java.util.Map;\n\n/**\n * \u65f6\u95f4\u6233\u5b9a\u4e49\n * ${timestamp len=10}", " * \u65f6\u95f4\u6233\u5b9a\u4e49\n * ${timestamp len=10}\n * @author kingschan\n */\npublic class TimeStampExpression implements Expression {\n\n    @Override\n    public String execute(Map<String, String> args) {\n        //\u9ed8\u8ba4\u8f93\u51fa13\u4f4d\n        String type = args.containsKey(\"len\") ? String.valueOf(args.get(\"len\")) : \"13\";\n        Assert.isTrue(type.matches(\"10|13\"), \"\u65f6\u95f4\u6233\u53ea\u652f\u630110\u4f4d\u6216\u800513\u4f4d\uff01\");\n        long timeStamp = \"13\".equals(type) ? System.currentTimeMillis() : System.currentTimeMillis() / 1000;\n        return String.valueOf(timeStamp);\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/AgentResult.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jsoup.Connection;\n\nimport java.io.Serializable;\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * @author kings.chan\n * 2019-03-07 9:33\n **/\n@Slf4j\npublic class AgentResult implements Serializable {\n\n    public AgentResult(Long millis, Connection.Response response) {\n        this.timeMillis = System.currentTimeMillis() - millis;\n        this.response = response;\n        this.charset = response.charset();\n        this.body = response.body();\n    }\n\n    //\u8bf7\u6c42\u8017\u65f6  \u6beb\u79d2\n    private final Long timeMillis;\n    private final Connection.Response response;\n    // \u5bf9\u5916\n//    private Integer statusCode;\n//    private String statusMessage;\n    @Setter\n    private String charset;\n    //    private String contentType;\n    @Getter\n    @Setter\n    private String body;\n//    private byte[] bodyAsByes;\n//    private Map<String, String> cookies;\n//    private Map<String, String> headers;\n", "    public Long getTimeMillis() {\n        return timeMillis;\n    }\n\n    public Integer getStatusCode() {\n        return this.response.statusCode();\n    }\n\n    public String getStatusMessage() {\n        return this.response.statusMessage();\n    }\n", "    public String getStatusMessage() {\n        return this.response.statusMessage();\n    }\n\n    public String getCharset() {\n        return charset;\n    }\n\n    public String getContentType() {\n        return this.response.contentType();\n    }\n\n    public Map<String, String> getCookies() {\n        return this.response.cookies();\n    }\n\n    public byte[] getBodyAsByes() {\n        return this.response.bodyAsBytes();\n    }\n\n    public Map<String, String> getHeaders() {\n        return this.response.headers();\n    }\n\n\n}\n", "    public String getContentType() {\n        return this.response.contentType();\n    }\n\n    public Map<String, String> getCookies() {\n        return this.response.cookies();\n    }\n\n    public byte[] getBodyAsByes() {\n        return this.response.bodyAsBytes();\n    }\n\n    public Map<String, String> getHeaders() {\n        return this.response.headers();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/WebAgent.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent;\n\n\nimport com.github.kingschan1204.easycrawl.core.agent.interceptor.impl.StatusPrintInterceptorImpl;\nimport com.github.kingschan1204.easycrawl.core.agent.interceptor.impl.TranscodingInterceptorImpl;\nimport com.github.kingschan1204.easycrawl.helper.json.JsonHelper;\n\nimport java.io.File;\nimport java.net.Proxy;\nimport java.util.Map;", "import java.net.Proxy;\nimport java.util.Map;\n\n/**\n * @author kings.chan\n * 2023-04-21\n **/\n\npublic interface WebAgent {\n\n//    enum ResponseType {\n//        FILE(File.class), HTML(String.class), JSON(JsonHelper.class), TEXT(String.class);\n//        public Class<?> type;\n//\n//        ResponseType(Class<?> clazz) {\n//            type = clazz;\n//        }\n//    }\n\n//    WebAgentNew of(HttpRequestConfig config);\n\n    /**\n     * \u9ed8\u8ba4agent\n     *\n     * @return GenericHttp1Agent\n     */\n    static WebAgent defaultAgent() {\n        GenericHttp1AgentProxy proxy = new GenericHttp1AgentProxy(\n                new GenericHttp1Agent(),\n                new StatusPrintInterceptorImpl(),\n                new TranscodingInterceptorImpl()\n        );\n        return proxy;\n    }\n\n    static Map<String, String> getCookies(String url) {\n        return defaultAgent().url(url).execute(null).getResult().getCookies();\n    }\n\n    HttpRequestConfig getConfig();\n\n    WebAgent url(String url);\n\n    WebAgent referer(String referer);\n\n    WebAgent method(HttpRequestConfig.Method method);\n\n    WebAgent head(Map<String, String> head);\n\n    WebAgent useAgent(String useAgent);\n\n    WebAgent cookie(Map<String, String> cookie);\n\n    WebAgent timeOut(Integer timeOut);\n\n    WebAgent proxy(Proxy proxy);\n\n    WebAgent body(String body);\n\n    WebAgent folder(String folder);\n\n    WebAgent fileName(String fileName);\n\n    WebAgent execute(Map<String, Object> data);\n\n    AgentResult getResult();\n\n    JsonHelper getJson();\n\n    String getText();\n\n    File getFile();\n\n}\n", "public interface WebAgent {\n\n//    enum ResponseType {\n//        FILE(File.class), HTML(String.class), JSON(JsonHelper.class), TEXT(String.class);\n//        public Class<?> type;\n//\n//        ResponseType(Class<?> clazz) {\n//            type = clazz;\n//        }\n//    }\n\n//    WebAgentNew of(HttpRequestConfig config);\n\n    /**\n     * \u9ed8\u8ba4agent\n     *\n     * @return GenericHttp1Agent\n     */\n    static WebAgent defaultAgent() {\n        GenericHttp1AgentProxy proxy = new GenericHttp1AgentProxy(\n                new GenericHttp1Agent(),\n                new StatusPrintInterceptorImpl(),\n                new TranscodingInterceptorImpl()\n        );\n        return proxy;\n    }\n\n    static Map<String, String> getCookies(String url) {\n        return defaultAgent().url(url).execute(null).getResult().getCookies();\n    }\n\n    HttpRequestConfig getConfig();\n\n    WebAgent url(String url);\n\n    WebAgent referer(String referer);\n\n    WebAgent method(HttpRequestConfig.Method method);\n\n    WebAgent head(Map<String, String> head);\n\n    WebAgent useAgent(String useAgent);\n\n    WebAgent cookie(Map<String, String> cookie);\n\n    WebAgent timeOut(Integer timeOut);\n\n    WebAgent proxy(Proxy proxy);\n\n    WebAgent body(String body);\n\n    WebAgent folder(String folder);\n\n    WebAgent fileName(String fileName);\n\n    WebAgent execute(Map<String, Object> data);\n\n    AgentResult getResult();\n\n    JsonHelper getJson();\n\n    String getText();\n\n    File getFile();\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/GenericHttp1Agent.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent;\n\nimport com.github.kingschan1204.easycrawl.core.agent.utils.JsoupHelper;\nimport com.github.kingschan1204.easycrawl.core.variable.ScanVariable;\nimport com.github.kingschan1204.easycrawl.helper.http.ResponseHeadHelper;\nimport com.github.kingschan1204.easycrawl.helper.json.JsonHelper;\nimport com.github.kingschan1204.easycrawl.helper.regex.RegexHelper;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\nimport lombok.extern.slf4j.Slf4j;\n", "import lombok.extern.slf4j.Slf4j;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.net.Proxy;\nimport java.util.Map;\n\n/**\n * @author kingschan\n * 2023-4-24", " * @author kingschan\n * 2023-4-24\n */\n@Slf4j\npublic class GenericHttp1Agent implements WebAgent {\n\n    private HttpRequestConfig config;\n    private AgentResult result;\n\n    public GenericHttp1Agent(HttpRequestConfig config) {\n        this.config = config;\n    }\n\n    public GenericHttp1Agent() {\n        this.config = new HttpRequestConfig();\n    }\n", "    public static WebAgent of(HttpRequestConfig config) {\n        return new GenericHttp1Agent(config);\n    }\n\n//\n//    @Override\n//    public WebAgentNew of(HttpRequestConfig config) {\n//        this.config = config;\n//        return this;\n//    }\n\n    @Override", "    public HttpRequestConfig getConfig() {\n        return this.config;\n    }\n\n    @Override\n    public WebAgent url(String url) {\n        this.config.setUrl(url);\n        return this;\n    }\n\n    @Override", "    public WebAgent referer(String referer) {\n        this.config.setReferer(referer);\n        return this;\n    }\n\n    @Override\n    public WebAgent method(HttpRequestConfig.Method method) {\n        this.config.setMethod(method);\n        return this;\n    }\n\n    @Override", "    public WebAgent head(Map<String, String> head) {\n        this.config.setHead(head);\n        return this;\n    }\n\n    @Override\n    public WebAgent useAgent(String useAgent) {\n        this.config.setUseAgent(useAgent);\n        return this;\n    }\n\n    @Override", "    public WebAgent cookie(Map<String, String> cookie) {\n        this.config.setCookie(cookie);\n        return this;\n    }\n\n    @Override\n    public WebAgent timeOut(Integer timeOut) {\n        this.config.setTimeOut(timeOut);\n        return this;\n    }\n\n    @Override", "    public WebAgent proxy(Proxy proxy) {\n        this.config.setProxy(proxy);\n        return this;\n    }\n\n    @Override\n    public WebAgent body(String body) {\n        this.config.setBody(body);\n        return this;\n    }\n\n    @Override", "    public WebAgent folder(String folder) {\n        this.config.setFolder(folder);\n        return this;\n    }\n\n    @Override\n    public WebAgent fileName(String fileName) {\n        this.config.setFileName(fileName);\n        return this;\n    }\n\n    @Override", "    public WebAgent execute(Map<String, Object> data) {\n        String httpUrl = ScanVariable.parser(this.config.getUrl(), data).trim();\n        String referer = null != this.config.getReferer() ? ScanVariable.parser(this.config.getReferer(), data).trim() : null;\n        this.result = JsoupHelper.request(\n                httpUrl, this.config.method(),\n                this.config.getTimeOut(), this.config.getUseAgent(), referer, this.config.getHead(),\n                this.config.getCookie(), this.config.getProxy(),\n                true, true, this.config.getBody());\n        return this;\n    }\n\n    @Override", "    public AgentResult getResult() {\n        return this.result;\n    }\n\n    @Override\n    public JsonHelper getJson() {\n        return JsonHelper.of(this.result.getBody());\n    }\n\n    @Override\n    public String getText() {\n        return getResult().getBody();\n    }\n\n    @Override", "    public String getText() {\n        return getResult().getBody();\n    }\n\n    @Override\n    public File getFile() {\n        Assert.notNull(this.result, \"\u8fd4\u56de\u5bf9\u8c61\u4e3a\u7a7a\uff01\u6216\u8005\u7a0b\u5e8f\u8fd8\u672a\u6267\u884cexecute\u65b9\u6cd5\uff01\");\n        ResponseHeadHelper headHelper = ResponseHeadHelper.of(result.getHeaders());\n        Assert.isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");\n        String defaultFileName = null;\n        File file = null;", "        if (result.getStatusCode() != 200) {\n            log.error(\"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{}\", this.config.getUrl());\n            throw new RuntimeException(String.format(\"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a%s \u8fd4\u56de\u7801:%s\", this.config.getUrl(), result.getStatusCode()));\n        }\n        try {\n            defaultFileName = headHelper.getFileName();\n            //\u6587\u4ef6\u540d\u4f18\u5148\u4f7f\u7528\u6307\u5b9a\u7684\u6587\u4ef6\u540d\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a \u5219\u83b7\u53d6\u81ea\u52a8\u8bc6\u522b\u7684\u6587\u4ef6\u540d\n            this.config.setFileName(String.valueOf(this.config.getFileName()).matches(RegexHelper.REGEX_FILE_NAME) ? this.config.getFileName() : defaultFileName);\n            Assert.notNull(this.config.getFileName(), \"\u6587\u4ef6\u540d\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n            String path = String.format(\"%s%s\", this.config.getFolder(), this.config.getFileName());\n            // output here\n            log.info(\"\u8f93\u51fa\u6587\u4ef6\uff1a{}\", path);\n            FileOutputStream out = null;\n            file = new File(path);", "            try {\n                out = (new FileOutputStream(file));\n                out.write(result.getBodyAsByes());\n            } catch (Exception ex) {\n                log.error(\"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{} {}\", this.config.getUrl(), ex);\n                ex.printStackTrace();\n            } finally {\n                assert out != null;\n                out.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n        return file;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/HttpRequestConfig.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent;\n\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.jsoup.Connection;\n\nimport java.net.Proxy;\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * @author kingschan\n */\n@NoArgsConstructor\n@Data\npublic class HttpRequestConfig {\n\n    public Map<String, String> cookie;\n\n    public Map<String, String> head;\n", "    public String referer;\n\n    public String url;\n\n    public Integer timeOut = 8000;\n\n    public String useAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\";\n\n    public String body;\n\n    /**\n     * \u4ee3\u7406\n     */", "    public String body;\n\n    /**\n     * \u4ee3\u7406\n     */\n    public Proxy proxy;\n    /**\n     * http \u8bf7\u6c42\u65b9\u5f0f\n     */\n    public Method method = Method.GET;\n\n\n    //\u4e0b\u8f7d\u6587\u4ef6\u76f8\u5173\u914d\u7f6e\n    /**\n     * \u4e0b\u8f7d\u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55\n     */\n    private String folder;\n    /**\n     * \u5199\u5165\u78c1\u76d8\u65f6\u7684\u6587\u4ef6\u540d\uff0c\u4e0d\u4f20\u503c\u7684\u65f6\u5019\u81ea\u52a8\u8bc6\u522b\uff0c\u4f20\u503c\u7684\u65f6\u5019\u7528\u624b\u52a8\u6307\u5b9a\u7684\u6587\u4ef6\u540d\n     */\n    private String fileName;\n\n", "    public Method method = Method.GET;\n\n\n    //\u4e0b\u8f7d\u6587\u4ef6\u76f8\u5173\u914d\u7f6e\n    /**\n     * \u4e0b\u8f7d\u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55\n     */\n    private String folder;\n    /**\n     * \u5199\u5165\u78c1\u76d8\u65f6\u7684\u6587\u4ef6\u540d\uff0c\u4e0d\u4f20\u503c\u7684\u65f6\u5019\u81ea\u52a8\u8bc6\u522b\uff0c\u4f20\u503c\u7684\u65f6\u5019\u7528\u624b\u52a8\u6307\u5b9a\u7684\u6587\u4ef6\u540d\n     */\n    private String fileName;\n\n", "    public static enum Method {\n        GET,\n        POST\n//        PUT,\n//        DELETE,\n//        PATCH,\n//        HEAD,\n//        OPTIONS,\n//        TRACE\n\n    }\n\n    public Connection.Method method() {\n        Connection.Method m;\n        switch (this.method) {\n            case GET:\n                m = Connection.Method.GET;\n                break;\n            case POST:\n                m = Connection.Method.POST;\n                break;\n            default:\n                throw new RuntimeException(\"\u76ee\u524d\u53ea\u652f\u6301\uff1aget , post \u65b9\u6cd5\uff01\");\n        }\n        return m;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/GenericHttp1AgentProxy.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent;\n\nimport com.github.kingschan1204.easycrawl.core.agent.interceptor.AfterInterceptor;\nimport com.github.kingschan1204.easycrawl.helper.json.JsonHelper;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.File;\nimport java.net.Proxy;\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * \u901a\u7528http1.1\u4ee3\u7406\u6a21\u5f0f\n *\n * @author kingschan\n * 2023-4-25\n */", " * 2023-4-25\n */\n@Slf4j\npublic class GenericHttp1AgentProxy implements WebAgent {\n\n    private WebAgent webAgent;\n    private AgentResult result;\n    private List<AfterInterceptor> interceptors;\n\n    public GenericHttp1AgentProxy(WebAgent webAgent, AfterInterceptor... afterInterceptors) {\n        this.webAgent = webAgent;\n        this.interceptors = Arrays.asList(afterInterceptors);\n    }\n\n    @Override", "    public HttpRequestConfig getConfig() {\n        return this.webAgent.getConfig();\n    }\n\n    @Override\n    public WebAgent url(String url) {\n         this.webAgent.url(url);\n        return this;\n    }\n\n    @Override", "    public WebAgent referer(String referer) {\n        this.webAgent.referer(referer);\n        return this;\n    }\n\n    @Override\n    public WebAgent method(HttpRequestConfig.Method method) {\n         this.webAgent.method(method);\n        return this;\n    }\n\n    @Override", "    public WebAgent head(Map<String, String> head) {\n         this.webAgent.head(head);\n        return this;\n    }\n\n    @Override\n    public WebAgent useAgent(String useAgent) {\n         this.webAgent.useAgent(useAgent);\n        return this;\n    }\n\n    @Override", "    public WebAgent cookie(Map<String, String> cookie) {\n         this.webAgent.cookie(cookie);\n        return this;\n    }\n\n    @Override\n    public WebAgent timeOut(Integer timeOut) {\n         this.webAgent.timeOut(timeOut);\n        return this;\n    }\n\n    @Override", "    public WebAgent proxy(Proxy proxy) {\n         this.webAgent.proxy(proxy);\n        return this;\n    }\n\n    @Override\n    public WebAgent body(String body) {\n         this.webAgent.body(body);\n        return this;\n    }\n\n    @Override", "    public WebAgent folder(String folder) {\n         this.webAgent.folder(folder);\n        return this;\n    }\n\n    @Override\n    public WebAgent fileName(String fileName) {\n         this.webAgent.fileName(fileName);\n        return this;\n    }\n\n    @Override", "    public WebAgent execute(Map<String, Object> data) {\n        WebAgent wa = this.webAgent.execute(data);\n        for (AfterInterceptor interceport : interceptors) {\n            result = interceport.interceptor(data, wa);\n        }\n        return this;\n    }\n\n    @Override\n    public AgentResult getResult() {\n        //\u4f18\u5148\u62ff\u81ea\u8eab\u5bf9\u8c61\u7684agentResult\n        return null == result ? this.webAgent.getResult() : result;\n    }\n\n    @Override", "    public AgentResult getResult() {\n        //\u4f18\u5148\u62ff\u81ea\u8eab\u5bf9\u8c61\u7684agentResult\n        return null == result ? this.webAgent.getResult() : result;\n    }\n\n    @Override\n    public JsonHelper getJson() {\n        return this.webAgent.getJson();\n    }\n\n    @Override", "    public String getText() {\n        return this.webAgent.getText();\n    }\n\n    @Override\n    public File getFile() {\n        return this.webAgent.getFile();\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/utils/JsoupHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent.utils;\n\nimport com.github.kingschan1204.easycrawl.core.agent.AgentResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\n\nimport javax.net.ssl.*;\nimport java.net.Proxy;\nimport java.net.SocketTimeoutException;", "import java.net.Proxy;\nimport java.net.SocketTimeoutException;\nimport java.security.cert.X509Certificate;\nimport java.util.Map;\n\n/**\n * jsoup \u901a\u7528\u5de5\u5177\n *\n * @author kings.chan\n *  2019-03-28 10:24", " * @author kings.chan\n *  2019-03-28 10:24\n **/\n@Slf4j\npublic class JsoupHelper {\n\n   public static Connection buildConnection(String pageUrl, Connection.Method method,\n                                      Integer timeOut, String useAgent, String referer,\n                                      Map<String, String> heads,\n                                      Map<String, String> cookie, Proxy proxy,\n                                      Boolean ignoreContentType, Boolean ignoreHttpErrors,String body) {\n       //maxBodySize\u9ed8\u8ba4\u662f1M\uff0c\u8bbe\u7f6e0 \u5219\u4e3a\u65e0\u9650\u5236\n        Connection connection = Jsoup.connect(pageUrl)\n                .timeout(null == timeOut ? 8000 : timeOut)\n                .method(null == method ? Connection.Method.GET : method)\n                .maxBodySize(0);", "        if (null != useAgent) {\n            connection.userAgent(useAgent);\n        }\n        if (null != ignoreContentType) {\n            connection.ignoreContentType(ignoreContentType);\n        }\n        if (null != ignoreHttpErrors) {\n            connection.ignoreHttpErrors(ignoreHttpErrors);\n        }\n        if (null != referer) {\n            connection.referrer(referer);\n        }", "        if (null != referer) {\n            connection.referrer(referer);\n        }\n        if (null != proxy) {\n            connection.proxy(proxy);\n        }\n        if (null != cookie) {\n            connection.cookies(cookie);\n        }\n        if (null != heads) {\n            connection.headers(heads);\n        }", "        if (null != heads) {\n            connection.headers(heads);\n        }\n        if (null != body) {\n            connection.requestBody(body);\n        }\n        return connection;\n    }\n\n    /**\n     * jsoup \u901a\u7528\u8bf7\u6c42\u65b9\u6cd5\n     *\n     * @param pageUrl  url\n     * @param method   \u65b9\u6cd5\n     * @param timeOut  \u8d85\u65f6\u65f6\u95f4\u5355\u4f4d\u6beb\u79d2\n     * @param useAgent \u8bf7\u6c42\u5934\n     * @param referer  \u6765\u6e90url\n     * @return AgentResult\n     */", "    public static AgentResult request(String pageUrl, Connection.Method method,\n                                      Integer timeOut, String useAgent, String referer) {\n        return request(\n                pageUrl, method,\n                timeOut, useAgent, referer, null,\n                null, null,\n                true, true,null);\n    }\n\n\n    /**\n     * jsoup \u901a\u7528\u8bf7\u6c42\u65b9\u6cd5\n     *\n     * @param pageUrl           url\n     * @param method            \u65b9\u6cd5\n     * @param timeOut           \u8d85\u65f6\u65f6\u95f4\u5355\u4f4d\u6beb\u79d2\n     * @param useAgent          \u8bf7\u6c42\u5934\n     * @param referer           \u6765\u6e90url\n     * @param heads             http head\u5934\n     * @param cookie            cookie\n     * @param proxy             \u662f\u5426\u4f7f\u7528\u4ee3\u7406\n     * @param ignoreContentType \u662f\u5426\u5ffd\u7565\u5185\u5bb9\u7c7b\u578b\n     * @param ignoreHttpErrors  \u662f\u5426\u5ffd\u7565http\u9519\u8bef\n     * @return AgentResult\n     */", "    public static AgentResult request(String pageUrl, Connection.Method method,\n                                      Integer timeOut, String useAgent, String referer,\n                                      Map<String, String> heads,\n                                      Map<String, String> cookie, Proxy proxy,\n                                      Boolean ignoreContentType, Boolean ignoreHttpErrors, String body) {\n        long start = System.currentTimeMillis();\n        AgentResult agentResult;\n        Connection.Response response;\n        try {\n            log.debug(pageUrl);\n            if (pageUrl.contains(\"https\")) {\n                trustAllHttpsCertificates();\n                HttpsURLConnection.setDefaultHostnameVerifier(hv);\n            }\n            Connection connection = buildConnection(pageUrl, method,\n                    timeOut, useAgent, referer,\n                    heads,\n                    cookie, proxy,\n                    ignoreContentType, ignoreHttpErrors,body);\n            response = connection.execute();\n            agentResult = new AgentResult(start, response);\n            return agentResult;\n        } catch (SocketTimeoutException ex) {\n            log.error(\"\u3010\u7f51\u7edc\u8d85\u65f6\u3011 {} \u6267\u884c\u65f6\u95f4\uff1a{} \u6beb\u79d2\", pageUrl, System.currentTimeMillis() - start);\n            throw  new RuntimeException(ex.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"crawlPage {} {}\", pageUrl, e);\n            throw  new RuntimeException(e.getMessage());\n        }\n    }\n\n    static HostnameVerifier hv = (urlHostName, session) -> {\n//            log.warn(\"Warning: URL Host: {}  vs. {}\", urlHostName, session.getPeerHost());\n        return true;\n    };\n\n    private static void trustAllHttpsCertificates() throws Exception {\n        TrustManager[] trustAllCerts = new TrustManager[1];\n        TrustManager tm = new Mitm();\n        trustAllCerts[0] = tm;\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCerts, null);\n        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n    }\n\n    static class Mitm implements TrustManager, X509TrustManager {\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n", "        try {\n            log.debug(pageUrl);\n            if (pageUrl.contains(\"https\")) {\n                trustAllHttpsCertificates();\n                HttpsURLConnection.setDefaultHostnameVerifier(hv);\n            }\n            Connection connection = buildConnection(pageUrl, method,\n                    timeOut, useAgent, referer,\n                    heads,\n                    cookie, proxy,\n                    ignoreContentType, ignoreHttpErrors,body);\n            response = connection.execute();\n            agentResult = new AgentResult(start, response);\n            return agentResult;\n        } catch (SocketTimeoutException ex) {\n            log.error(\"\u3010\u7f51\u7edc\u8d85\u65f6\u3011 {} \u6267\u884c\u65f6\u95f4\uff1a{} \u6beb\u79d2\", pageUrl, System.currentTimeMillis() - start);\n            throw  new RuntimeException(ex.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"crawlPage {} {}\", pageUrl, e);\n            throw  new RuntimeException(e.getMessage());\n        }\n    }\n\n    static HostnameVerifier hv = (urlHostName, session) -> {\n//            log.warn(\"Warning: URL Host: {}  vs. {}\", urlHostName, session.getPeerHost());\n        return true;\n    };\n\n    private static void trustAllHttpsCertificates() throws Exception {\n        TrustManager[] trustAllCerts = new TrustManager[1];\n        TrustManager tm = new Mitm();\n        trustAllCerts[0] = tm;\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCerts, null);\n        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n    }\n\n    static class Mitm implements TrustManager, X509TrustManager {\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n", "        public boolean isServerTrusted(X509Certificate[] certs) {\n            return true;\n        }\n\n        public boolean isClientTrusted(X509Certificate[] certs) {\n            return true;\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] certs, String authType)\n                throws java.security.cert.CertificateException {\n        }\n\n        @Override", "        public void checkServerTrusted(X509Certificate[] certs, String authType)\n                throws java.security.cert.CertificateException {\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] certs, String authType)\n                throws java.security.cert.CertificateException {\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/interceptor/AfterInterceptor.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent.interceptor;\n\nimport com.github.kingschan1204.easycrawl.core.agent.AgentResult;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\n\nimport java.util.Map;\n\npublic interface AfterInterceptor {\n\n    AgentResult interceptor(Map<String, Object> data, WebAgent webAgent);\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/interceptor/impl/StatusPrintInterceptorImpl.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent.interceptor.impl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.AgentResult;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.core.agent.interceptor.AfterInterceptor;\nimport com.github.kingschan1204.easycrawl.helper.http.ResponseAssertHelper;\nimport lombok.extern.slf4j.Slf4j;\nimport java.util.Map;\n/**\n * @author kingschan", "/**\n * @author kingschan\n */\n@Slf4j\npublic class StatusPrintInterceptorImpl implements AfterInterceptor {\n\n    @Override\n    public AgentResult interceptor(Map<String, Object> data, WebAgent webAgent) {\n        AgentResult result = webAgent.getResult();\n        log.debug(\"ContentType : {}\", result.getContentType());\n        log.debug(\"\u7f16\u7801 {} \",result.getCharset());\n        log.debug(\"Headers : {}\", result.getHeaders());\n        log.debug(\"Cookies : {}\", result.getCookies());\n        log.debug(\"\u8017\u65f6 {} \u6beb\u79d2\",result.getTimeMillis());\n        ResponseAssertHelper.of(result).infer();\n        return result;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/core/agent/interceptor/impl/TranscodingInterceptorImpl.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.core.agent.interceptor.impl;\n\nimport com.github.kingschan1204.easycrawl.core.agent.AgentResult;\nimport com.github.kingschan1204.easycrawl.core.agent.WebAgent;\nimport com.github.kingschan1204.easycrawl.core.agent.interceptor.AfterInterceptor;\nimport com.github.kingschan1204.easycrawl.helper.regex.RegexHelper;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * @author kingschan\n */\n@Slf4j\npublic class TranscodingInterceptorImpl implements AfterInterceptor {\n    @Override\n    public AgentResult interceptor(Map<String, Object> data, WebAgent webAgent) {\n        AgentResult result = webAgent.getResult();\n        String charset = result.getCharset();\n        String contentType = result.getContentType();\n        //\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\"/>\n        // <meta charSet=\"utf-8\"/>", "    public AgentResult interceptor(Map<String, Object> data, WebAgent webAgent) {\n        AgentResult result = webAgent.getResult();\n        String charset = result.getCharset();\n        String contentType = result.getContentType();\n        //\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\"/>\n        // <meta charSet=\"utf-8\"/>\n        if (null == charset && contentType.matches(\"text/html.*\")) {\n            log.warn(\"\u672a\u83b7\u53d6\u5230\u7f16\u7801\u4fe1\u606f,\u6709\u53ef\u80fd\u4e2d\u6587\u4e71\u7801\uff01\u5c1d\u8bd5\u81ea\u52a8\u63d0\u53d6\u7f16\u7801\uff01\");\n            String text = RegexHelper.findFirst(result.getBody(), RegexHelper.REGEX_HTML_CHARSET);\n            charset = RegexHelper.findFirst(text, \"(?i)charSet(\\\\s+)?=.*\\\"\").replaceAll(\"(?i)charSet|=|\\\"|\\\\s\", \"\");\n            if (!charset.isEmpty()) {\n                log.debug(\"\u7f16\u7801\u63d0\u53d6\u6210\u529f,\u5c06\u81ea\u52a8\u8f6c\u7801\uff1a{}\", charset);\n                result.setBody(transcoding(result.getBodyAsByes(), charset));\n            } else {\n                log.warn(\"\u81ea\u52a8\u63d0\u53d6\u7f16\u7801\u5931\u8d25\uff01\");\n            }\n        }\n        return result;\n    }\n\n    /**\n     * \u8f6c\u7801\n     *\n     * @param charset \u5c06byte\u6570\u7ec4\u6309\u4f20\u5165\u7f16\u7801\u8f6c\u7801\n     * @return getContent\n     */\n    String transcoding(byte[] bytes, String charset) {", "            if (!charset.isEmpty()) {\n                log.debug(\"\u7f16\u7801\u63d0\u53d6\u6210\u529f,\u5c06\u81ea\u52a8\u8f6c\u7801\uff1a{}\", charset);\n                result.setBody(transcoding(result.getBodyAsByes(), charset));\n            } else {\n                log.warn(\"\u81ea\u52a8\u63d0\u53d6\u7f16\u7801\u5931\u8d25\uff01\");\n            }\n        }\n        return result;\n    }\n\n    /**\n     * \u8f6c\u7801\n     *\n     * @param charset \u5c06byte\u6570\u7ec4\u6309\u4f20\u5165\u7f16\u7801\u8f6c\u7801\n     * @return getContent\n     */\n    String transcoding(byte[] bytes, String charset) {", "        try {\n            return new String(bytes, charset);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/sql/SqlHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.sql;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.github.kingschan1204.easycrawl.helper.regex.RegexHelper;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.math.BigDecimal;\nimport java.util.*;", "import java.math.BigDecimal;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * @author kingschan\n */\n@Slf4j\npublic class SqlHelper {\n\n    public static final Map<String, String> fieldType;\n\n    static {\n        fieldType = new HashMap<>();\n        fieldType.put(\"String\", \"varchar(50)\");\n        fieldType.put(\"Integer\", \"int\");\n        fieldType.put(\"Long\", \"bigint\");\n        fieldType.put(\"Boolean\", \"bit\");\n        fieldType.put(\"BigDecimal\", \"decimal(22,4)\");\n    }\n", "public class SqlHelper {\n\n    public static final Map<String, String> fieldType;\n\n    static {\n        fieldType = new HashMap<>();\n        fieldType.put(\"String\", \"varchar(50)\");\n        fieldType.put(\"Integer\", \"int\");\n        fieldType.put(\"Long\", \"bigint\");\n        fieldType.put(\"Boolean\", \"bit\");\n        fieldType.put(\"BigDecimal\", \"decimal(22,4)\");\n    }\n", "    public static String createTable(JSONObject json, String tableName) {\n        List<String> fields = new ArrayList<>();\n        for (String key : json.keySet()) {\n            String type = Optional.ofNullable(json.get(key)).map(r -> json.get(key).getClass().getSimpleName()).orElse(\"String\");\n            fields.add(String.format(\" `%s` %s\", key, fieldType.get(type)));\n        }\n        return String.format(\"create table %s (%s)\", tableName, String.join(\",\", fields));\n    }\n\n    public static String createTable(String[] columns, String tableName) {\n        String temp = \"create table %s (%s)\";\n        String fields = \" `%s` varchar(50) not null default '' \";\n        StringBuffer field = new StringBuffer();", "    public static String createTable(String[] columns, String tableName) {\n        String temp = \"create table %s (%s)\";\n        String fields = \" `%s` varchar(50) not null default '' \";\n        StringBuffer field = new StringBuffer();\n        for (int i = 0; i < columns.length; i++) {\n            field.append(String.format(fields, columns[i]));\n            if (i < columns.length - 1) {\n                field.append(\",\");\n            }\n        }\n        return String.format(temp, tableName, field.toString());\n    }\n", "    public static String insert(Object[] columns, Object[] data, String tableName) {\n        String temp = \"insert into %s (%s) values (%s);\";\n        return String.format(temp, tableName,\n                Arrays.stream(columns).map(String::valueOf).collect(Collectors.joining(\",\")),\n                Arrays.stream(data).map(v -> {\n                    String val = String.valueOf(v);\n                    //\u79d1\u5b66\u8ba1\u6570\u8f6c\u6362\n                    if (val.matches(RegexHelper.REGEX_SCIENTIFIC_NOTATION)) {\n                        return String.format(\"'%s'\", null == v ? \"\" : new BigDecimal(val).toPlainString());\n                    }\n                    return String.format(\"'%s'\", null == v ? \"\" : v);\n                }).collect(Collectors.joining(\",\"))\n        );\n    }\n", "    public static String insertBatch(String[] columns, JSONArray data, String tableName) {\n        Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");\n        String temp = \"insert into %s (%s) values %s ;\";\n        StringBuffer values = new StringBuffer();\n        for (int i = 0; i < data.size(); i++) {\n            JSONArray row = data.getJSONArray(i);\n            values.append(String.format(\"(%s)\",\n                    Arrays.stream(row.toArray(new Object[]{})).map(v -> String.format(\"'%s'\", null == v ? \"\" : v)).collect(Collectors.joining(\",\"))\n            ));\n            if (i < columns.length - 1) {\n                values.append(\",\");\n            }\n        }\n        return String.format(temp, tableName,\n                Arrays.stream(columns).map(r -> String.format(\"`%s`\", r)).collect(Collectors.joining(\",\")),\n                values.toString()\n        );\n    }\n\n\n\n\n}\n", "            if (i < columns.length - 1) {\n                values.append(\",\");\n            }\n        }\n        return String.format(temp, tableName,\n                Arrays.stream(columns).map(r -> String.format(\"`%s`\", r)).collect(Collectors.joining(\",\")),\n                values.toString()\n        );\n    }\n\n\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/validation/Assert.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.validation;\n\n/**\n * @author kingschan\n * 2023-3-30\n */\npublic class Assert {\n    /**\n     * \u662f\u5426\u4e3a\u771f\n     * @param exp\n     * @param message\n     */", "    public static void isTrue(boolean exp, String message) {\n        if (!exp) {\n            throw new RuntimeException(message);\n        }\n    }\n\n    public static void notNull(Object val, String message) {\n        if(null == val){\n            throw new RuntimeException(message);\n        }\n    }\n\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/math/MathHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.math;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n/**\n * @author kingschan\n * 2023-5-24\n */\npublic class MathHelper {\n\n    private BigDecimal value;\n    //\u6574\u6570\u3001\u8d1f\u6570\u3001\u5c0f\u6570\u3001\u79d1\u5b66\u8ba1\u6570\n    private static final String pattern = \"^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?$\";\n\n    public MathHelper(BigDecimal value) {\n        this.value = value;\n    }\n", " */\npublic class MathHelper {\n\n    private BigDecimal value;\n    //\u6574\u6570\u3001\u8d1f\u6570\u3001\u5c0f\u6570\u3001\u79d1\u5b66\u8ba1\u6570\n    private static final String pattern = \"^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?$\";\n\n    public MathHelper(BigDecimal value) {\n        this.value = value;\n    }\n", "    public static MathHelper of(String text) {\n        return new MathHelper(toBigDecimal(text));\n    }\n\n    static BigDecimal toBigDecimal(String text) {\n        assert null != text;\n        assert text.matches(pattern);\n        return new BigDecimal(text);\n    }\n\n    /**\n     * \u76f8\u52a0\n     *\n     * @param val \u8981\u52a0\u7684\u503c\n     * @return this\n     */", "    public MathHelper add(String val) {\n        this.value = this.value.add(toBigDecimal(val));\n        return this;\n    }\n\n    /**\n     * \u76f8\u51cf\n     *\n     * @param val \u8981\u51cf\u7684\u503c\n     * @return this\n     */", "    public MathHelper subtract(String val) {\n        this.value = this.value.subtract(toBigDecimal(val));\n        return this;\n    }\n\n    /**\n     * \u76f8\u4e58\n     *\n     * @param val \u503c\n     * @return this\n     */", "    public MathHelper multiply(String val) {\n        this.value = this.value.multiply(toBigDecimal(val));\n        return this;\n    }\n\n    /**\n     * \u9664\n     *\n     * @param val \u8981\u9664\u7684\u503c\n     * @return this\n     */", "    public MathHelper divide(String val) {\n        this.value = this.value.divide(toBigDecimal(val));\n        return this;\n    }\n\n    /**\n     * \u4fdd\u7559\u51e0\u4f4d\u5c0f\u6570\n     *\n     * @param v            \u5c0f\u6570\u4f4d\n     * @param roundingMode \u6d6e\u52a8\u6a21\u5f0f\n     * @return this\n     * CEILING: \u5411\u6b63\u65e0\u7a77\u65b9\u5411\u820d\u5165\u3002\n     * FLOOR: \u5411\u8d1f\u65e0\u7a77\u65b9\u5411\u820d\u5165\u3002\n     * UP: \u8fdc\u79bb\u96f6\u65b9\u5411\u820d\u5165\uff08\u6b63\u6570\u820d\u5165\u4e3a\u6b63\u65e0\u7a77\uff0c\u8d1f\u6570\u820d\u5165\u4e3a\u8d1f\u65e0\u7a77\uff09\u3002\n     * DOWN: \u5411\u96f6\u65b9\u5411\u820d\u5165\uff08\u76f4\u63a5\u820d\u5f03\u5c0f\u6570\u90e8\u5206\uff09\u3002\n     * HALF_UP: \u6700\u8fd1\u6570\u5b57\u820d\u5165\uff08\u4e94\u820d\u516d\u5165\uff0c\u56db\u820d\u4e94\u5165\uff09\u3002\n     * HALF_DOWN: \u6700\u8fd1\u6570\u5b57\u820d\u5165\uff08\u4e94\u820d\u516d\u5165\uff0c\u4e94\u820d\u516d\u5165\uff09\u3002\n     * HALF_EVEN: \u6700\u8fd1\u6570\u5b57\u820d\u5165\uff08\u94f6\u884c\u5bb6\u7b97\u6cd5\uff1a\u56db\u820d\u516d\u5165\u4e94\u8003\u8651\uff0c\u82e5\u820d\u5f03\u90e8\u5206\u5de6\u8fb9\u7684\u6570\u5b57\u4e3a\u5076\u6570\uff0c\u5219\u820d\u5165\u540e\u7684\u7ed3\u679c\u52a0\u4e0a1\uff09\u3002\n     * UNNECESSARY: \u65ad\u8a00\u8bf7\u6c42\u7684\u64cd\u4f5c\u5177\u6709\u7cbe\u786e\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u820d\u5165\u3002\u5982\u679c\u5bf9\u83b7\u5f97\u6b64\u7ed3\u679c\u7684\u7cbe\u786e\u5ea6\u7684\u4efb\u4f55\u7591\u95ee\uff0c\u5219\u4f1a\u629b\u51fa\u4e00\u4e2a ArithmeticException \u5f02\u5e38\u3002\n     */", "    public MathHelper scale(int v, RoundingMode roundingMode) {\n        this.value = this.value.setScale(v, roundingMode);\n        return this;\n    }\n\n    public MathHelper scale(int v) {\n        this.value = this.value.setScale(v,RoundingMode.DOWN);\n        return this;\n    }\n\n    public double doubleValue() {\n        return this.value.doubleValue();\n    }\n", "    public double doubleValue() {\n        return this.value.doubleValue();\n    }\n\n    public String stringValue() {\n        return this.value.toPlainString();\n    }\n\n    public static void main(String[] args) {\n        String[] values = {\"1.66\", \"22424.8\", \"-142\", \"-212.22222222222222\", \"1.99714E13\"};\n        for (String val : values) {\n            System.out.println(MathHelper.of(val).scale(1).add(\"10\").stringValue());\n        }\n    }\n}\n", "    public static void main(String[] args) {\n        String[] values = {\"1.66\", \"22424.8\", \"-142\", \"-212.22222222222222\", \"1.99714E13\"};\n        for (String val : values) {\n            System.out.println(MathHelper.of(val).scale(1).add(\"10\").stringValue());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/collections/MapUtil.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.collections;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MapUtil<K, V> {\n    Map<K, V> map;\n\n    public MapUtil() {\n        this.map = new HashMap<>();\n    }\n\n    public MapUtil<K, V> put(K key, V val) {\n        this.map.put(key, val);\n        return this;\n    }\n\n    public Map<K, V> getMap() {\n        return this.map;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/http/ResponseAssertHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.http;\n\nimport com.github.kingschan1204.easycrawl.core.agent.AgentResult;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * @author kingschan\n */\n@Slf4j\npublic class ResponseAssertHelper {\n\n    private AgentResult result;\n\n    public ResponseAssertHelper(AgentResult agentResult) {\n        this.result = agentResult;\n    }\n", "@Slf4j\npublic class ResponseAssertHelper {\n\n    private AgentResult result;\n\n    public ResponseAssertHelper(AgentResult agentResult) {\n        this.result = agentResult;\n    }\n\n    public static ResponseAssertHelper of(AgentResult agentResult) {\n        return new ResponseAssertHelper(agentResult);\n    }\n", "    public static ResponseAssertHelper of(AgentResult agentResult) {\n        return new ResponseAssertHelper(agentResult);\n    }\n\n    public void infer() {\n        statusCode();\n        contentType();\n    }\n\n    public void statusCode() {\n        log.debug(\"http\u72b6\u6001\uff1a{}\", result.getStatusCode());", "    public void statusCode() {\n        log.debug(\"http\u72b6\u6001\uff1a{}\", result.getStatusCode());\n        if (!result.getStatusCode().equals(200)) {\n            if (result.getStatusCode() >= 500) {\n                log.warn(\"\u670d\u52a1\u5668\u9519\u8bef\uff01\");\n            } else if (result.getStatusCode() == 404) {\n                log.warn(\"\u5730\u5740\u4e0d\u5b58\u5728\uff01\");\n            } else if (result.getStatusCode() == 401) {\n                log.warn(\"401\u8868\u793a\u672a\u7ecf\u6388\u6743\uff01\u6216\u8005\u8bc1\u660e\u767b\u5f55\u4fe1\u606f\u7684cookie,token\u5df2\u8fc7\u671f\uff01\");\n            } else if (result.getStatusCode() == 400) {\n                log.warn(\"\u4f20\u53c2\u6709\u95ee\u9898!\u4e00\u822c\u53c2\u6570\u4f20\u5c11\u4e86\u6216\u8005\u4e0d\u6b63\u786e\uff01\");\n            }else{\n                log.warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {}\",result.getStatusCode());\n            }\n        }\n    }\n", "            } else if (result.getStatusCode() == 400) {\n                log.warn(\"\u4f20\u53c2\u6709\u95ee\u9898!\u4e00\u822c\u53c2\u6570\u4f20\u5c11\u4e86\u6216\u8005\u4e0d\u6b63\u786e\uff01\");\n            }else{\n                log.warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {}\",result.getStatusCode());\n            }\n        }\n    }\n\n    public void contentType() {\n        String type = result.getContentType();\n        String content = \"\u4e0d\u77e5\u9053\u662f\u4e2a\u5565\uff01\";", "    public void contentType() {\n        String type = result.getContentType();\n        String content = \"\u4e0d\u77e5\u9053\u662f\u4e2a\u5565\uff01\";\n        if (type.matches(\"text/html.*\")) {\n            content = \"html\";\n        } else if (type.matches(\"application/json.*\")) {\n            content = \"json\";\n        } else if (type.matches(\"application/vnd.ms-excel.*\")) {\n            content = \"excel\";\n        } else if (type.matches(\"text/css.*\")) {\n            content = \"css\";", "        } else if (type.matches(\"text/css.*\")) {\n            content = \"css\";\n        } else if (type.matches(\"application/javascript.*\")) {\n            content = \"js\";\n        } else if (type.matches(\"image.*\")) {\n            content = \"\u56fe\u7247\";\n        } else if (type.matches(\"application/pdf.*\")) {\n            content = \"pdf\";\n        }\n        log.debug(\"\u63a8\u6d4b http \u54cd\u5e94\u7c7b\u578b\uff1a{}\", content);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/http/ResponseHeadHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.http;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.URLDecoder;\nimport java.util.Map;\n\n/**\n * http\u54cd\u5e94\u5934\u5de5\u5177\u7c7b\n *", " * http\u54cd\u5e94\u5934\u5de5\u5177\u7c7b\n *\n * @author kings.chan\n * 2023-4-21\n */\n@Slf4j\npublic class ResponseHeadHelper {\n    /**\n     * HTTP\u54cd\u5e94\u4e2d\u53d1\u9001\u7684\u6570\u636e\u5982\u4f55\u88ab\u663e\u793a\u6216\u4fdd\u5b58\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u63a7\u5236\u6d4f\u89c8\u5668\u5982\u4f55\u5904\u7406HTTP\u54cd\u5e94\u7684\u9644\u4ef6\uff0c\u4ee5\u53ca\u5728\u4e0b\u8f7d\u6587\u4ef6\u65f6\u63d0\u793a\u7528\u6237\u6587\u4ef6\u7684\u540d\u79f0\u548c\u7c7b\u578b\u7b49\u4fe1\u606f\u3002\n     * Content-disposition: <type>; filename=\"<filename>\"\n     */", "    public static final String CONTENT_DISPOSITION = \"Content-disposition\";\n\n    private final Map<String, String> responseHeaders;\n\n    public ResponseHeadHelper(Map<String, String> responseHeaders) {\n        this.responseHeaders = responseHeaders;\n    }\n\n    public static ResponseHeadHelper of(Map<String, String> responseHeaders) {\n        return new ResponseHeadHelper(responseHeaders);\n    }\n\n    /**\n     * \u4eceContent-disposition\u5934\u91cc\u83b7\u53d6\u6587\u4ef6\u540d\n     * @return\n     */", "    public static ResponseHeadHelper of(Map<String, String> responseHeaders) {\n        return new ResponseHeadHelper(responseHeaders);\n    }\n\n    /**\n     * \u4eceContent-disposition\u5934\u91cc\u83b7\u53d6\u6587\u4ef6\u540d\n     * @return\n     */\n    public String getFileName() {\n        String fileName;\n        try {\n            String key = responseHeaders.keySet().stream().filter(r -> r.matches(\"(?i)Content-disposition\")).findFirst().get();\n            String cd = responseHeaders.get(key);\n            //\u6709\u53ef\u80fd\u8981\u8f6c\u7801\n            String decode = URLDecoder.decode(cd, \"UTF-8\");\n            fileName = decode.replaceAll(\".*=\", \"\");\n            log.debug(\"\u63d0\u53d6\u5230\u7684\u6587\u4ef6\u540d : {}\",fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n        return fileName;\n    }\n\n    /**\n     * \u662f\u5426\u662f\u6587\u4ef6\u4e0b\u8f7d\u7c7b\u578b\u7684\u54cd\u5e94\u5934\n     *\n     * @return true or false\n     */", "    public String getFileName() {\n        String fileName;\n        try {\n            String key = responseHeaders.keySet().stream().filter(r -> r.matches(\"(?i)Content-disposition\")).findFirst().get();\n            String cd = responseHeaders.get(key);\n            //\u6709\u53ef\u80fd\u8981\u8f6c\u7801\n            String decode = URLDecoder.decode(cd, \"UTF-8\");\n            fileName = decode.replaceAll(\".*=\", \"\");\n            log.debug(\"\u63d0\u53d6\u5230\u7684\u6587\u4ef6\u540d : {}\",fileName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n        return fileName;\n    }\n\n    /**\n     * \u662f\u5426\u662f\u6587\u4ef6\u4e0b\u8f7d\u7c7b\u578b\u7684\u54cd\u5e94\u5934\n     *\n     * @return true or false\n     */", "    public boolean fileContent() {\n        return responseHeaders.keySet().stream().map(String::toLowerCase).anyMatch(r -> r.equals(CONTENT_DISPOSITION.toLowerCase()));\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/http/UrlHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.http;\n\nimport lombok.AllArgsConstructor;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n\n/**", "\n/**\n * @author kings.chan\n * 2021-7-20\n * url \u5de5\u5177\u7c7b\n */\n@AllArgsConstructor\npublic class UrlHelper {\n\n    private String url;\n\n    /**\n     * \u8bbe\u7f6eurl \u53c2\u6570\n     *\n     * @param name\n     * @param value\n     * @return\n     */", "    public UrlHelper set(String name, String value) {\n        String regex = String.format(\"%s=[\\\\w-]+\", name);\n        String replace = String.format(\"%s=%s\", name, value);\n        this.url = this.url.replaceAll(regex, replace);\n        return this;\n    }\n\n    public Map<String, String> getAll() {\n        String urlString = this.url.replaceAll(\"^.*\\\\?\", \"\");\n        String[] urlArgs = urlString.split(\"&\");\n        return Arrays.stream(urlArgs).map(s -> s.split(\"=\")).collect(Collectors.toMap(s -> Arrays.asList(s).get(0), v -> Arrays.asList(v).size() > 1 ? Arrays.asList(v).get(1) : \"\"));\n    }\n", "    public String get(String key) {\n        Map<String, String> map = getAll();\n        return map.get(key);\n    }\n\n    public String getUrl() {\n        return this.url;\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/json/JsonHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.json;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.parser.Feature;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\n\nimport java.util.*;", "\nimport java.util.*;\n/**\n * @author kingschan\n * 2023-4-25\n * json\u64cd\u4f5c\u517c\u5bb9 jsonObject\u3001jsonArray\n */\npublic class JsonHelper implements JsonOp{\n\n    private JSONObject json;\n    private JSONArray jsonArray;\n\n    public JsonHelper(JSONObject json) {\n        this.json = json;\n    }\n\n    public JsonHelper(JSONArray jsonArray) {\n        this.jsonArray = jsonArray;\n    }\n\n", "    public static JsonHelper of(Object object, Feature... feature) {\n        assert null != object;\n        List<Feature> featureList = new ArrayList<>();\n        featureList.add(Feature.OrderedField);\n        if (null != feature) {\n            featureList.addAll(Arrays.asList(feature));\n        }\n        if (object instanceof String) {\n            String text = object.toString();\n            if (text.startsWith(\"[\")) {\n                return new JsonHelper(JSON.parseArray(text));\n            }\n            return new JsonHelper(JSON.parseObject(text, featureList.toArray(new Feature[]{})));", "            if (text.startsWith(\"[\")) {\n                return new JsonHelper(JSON.parseArray(text));\n            }\n            return new JsonHelper(JSON.parseObject(text, featureList.toArray(new Feature[]{})));\n        } else if (object instanceof Collections) {\n            return new JsonHelper(JSONArray.parseArray(JSON.toJSONString(object)));\n        }\n        return new JsonHelper(JSON.parseObject(JSON.toJSONString(object), featureList.toArray(new Feature[]{})));\n    }\n\n    @Override", "    public JsonHelper put(String key, Object value) {\n        Assert.notNull(json, \"\u5f53\u524d\u4e3b\u4f53\u6570\u636e\u4e3aJSONArray\u65e0\u6cd5\u4f7f\u7528\u6b64\u65b9\u6cd5\uff01\");\n        this.json.put(key, value);\n        return this;\n    }\n\n    @Override\n    public JsonHelper add(JSONObject jsonObject) {\n        Assert.notNull(jsonArray, \"\u5f53\u524d\u4e3b\u4f53\u6570\u636e\u4e3aJSONObject\u65e0\u6cd5\u4f7f\u7528\u6b64\u65b9\u6cd5\uff01\");\n        this.jsonArray.add(jsonObject);\n        return this;\n    }\n", "    public Object get(String key) {\n        Assert.notNull(json, \"\u5f53\u524d\u4e3b\u4f53\u6570\u636e\u4e3aJSONArray\u65e0\u6cd5\u4f7f\u7528\u6b64\u65b9\u6cd5\uff01\");\n        return this.json.get(key);\n    }\n\n    /**\n     * \u901a\u8fc7\n     *  <p>\u5c5e\u6027. \u7684\u65b9\u5f0f\u53d6 \u652f\u6301\u591a\u5c42<p/>\n     *  <p>$first \u8fd4\u56dejsonArray\u7684\u7b2c\u4e00\u4e2a\u5bf9\u8c61<p/>\n     *  <p>$last \u8fd4\u56dejsonArray\u7684\u6700\u540e\u4e00\u4e2a\u5bf9\u8c61<p/>\n     *  <p>* \u8fd4\u56dejsonArray\u7684\u6240\u6709\u5bf9\u8c61<p/>\n     *  <p>,\u9017\u53f7\u5206\u9694\u53ef\u83b7\u53d6jsonArray\u7684\u591a\u4e2a\u5b57\u6bb5\u7ec4\u6210\u65b0\u5bf9\u8c61\u8fd4\u56de<p/>\n     * @param expression \u8868\u8fbe\u5f0f  \u5c5e\u6027.\u5c5e\u6027\n     * @param clazz      \u8fd4\u56de\u7c7b\u578b\n     * @return \u8868\u8fbe\u5f0f\u7684\u503c\n     */\n    @Override\n    public <T> T get(String expression, Class<T> clazz) {\n        String[] depth = expression.split(\"\\\\.\");\n        Object object = null;", "        if (null != json) {\n            object = getValByExpression(this.json, depth[0]);\n        } else {\n            object = getValByExpression(this.jsonArray, depth[0]);\n        }\n        for (int i = 1; i < depth.length; i++) {\n            object = getValByExpression(object, depth[i]);\n        }\n        return (T) object;\n    }\n\n    private Object getValByExpression(Object object, String expression) {", "        if (object instanceof JSONObject) {\n            return ((JSONObject) object).get(expression);\n        } else if (object instanceof JSONArray) {\n            //jsonArray\u6a21\u5f0f\n            //\u5982\u679c\u662f\u6570\u5b57\u76f4\u63a5\u53d6\u4e0b\u6807\uff0c\u4fdd\u7559\u5173\u952e\u5b57\uff1a$first\u7b2c\u4e00\u6761 $last\u6700\u540e\u4e00\u6761\n            JSONArray js = (JSONArray) object;\n            if (expression.matches(\"\\\\d+\")) {\n                return js.get(Integer.parseInt(expression));\n            } else if (expression.matches(\"\\\\$first\")) {\n                return js.get(0);\n            } else if (expression.matches(\"\\\\$last\")) {\n                return js.get(js.size() - 1);", "            } else if (expression.matches(\"\\\\$first\")) {\n                return js.get(0);\n            } else if (expression.matches(\"\\\\$last\")) {\n                return js.get(js.size() - 1);\n            } else if (expression.equals(\"*\")) {\n                return js;\n            } else {\n                //\u4ece\u96c6\u5408\u91cc\u62bd \u652f\u6301\u591a\u5b57\u6bb5\u4ee5,\u9017\u53f7\u5206\u9694\n                String[] fields = expression.split(\",\");\n                JSONArray result = new JSONArray();\n                for (int i = 0; i < js.size(); i++) {\n                    JSONObject json = new JSONObject(true);", "                for (int i = 0; i < js.size(); i++) {\n                    JSONObject json = new JSONObject(true);\n                    for (String key : fields) {\n                        json.put(key, js.getJSONObject(i).get(key));\n                    }\n                    result.add(json);\n                }\n                return result;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \u662f\u5426\u5b58\u5728key\n     *\n     * @param expression \u8868\u8fbe\u5f0f\n     * @return \u662f\u5426\u5305\u62eckey\n     */\n    @Override", "    public boolean hasKey(String expression) {\n        return null != get(expression, Object.class);\n    }\n\n    @Override\n    public Set<String> getKeys() {\n        return getAllKeys(this.json);\n    }\n\n    Set<String> getAllKeys(JSONObject jsonObject) {\n        Set<String> keys = new LinkedHashSet<>();", "        for (String key : jsonObject.keySet()) {\n            Object value = jsonObject.get(key);\n            if (value instanceof JSONObject) {\n                Set<String> subKeys = getAllKeys((JSONObject) value);\n                for (String subKey : subKeys) {\n                    keys.add(key + \".\" + subKey);\n                }\n            } else {\n                keys.add(key);\n            }\n        }\n        return keys;\n    }\n\n    @Override", "    public String toString() {\n        //\u6309\u987a\u5e8f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4e0d\u8f93\u51fa\u4e3anull\u7684\u5b57\u6bb5\uff0c\u8bbe\u7f6e\u4e3anull\u4e5f\u8f93\u51fa\n        return JSON.toJSONString(null == json ? jsonArray : json, SerializerFeature.SortField,SerializerFeature.WriteMapNullValue);\n    }\n\n    public static void main(String[] args) {\n//        String data = \"[0,1,2,3,4]\";\n//        String data = \"[{'name':'a'},{'name':'b','array':[1,2,3,4,5]}]\";\n        String data = \"{'name':'b','array':[1,2,3,4,5]}\";\n        JsonHelper helper = JsonHelper.of(data);\n        System.out.println(helper.get(\"array.$last\", Object.class));\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/json/JsonOp.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.json;\n\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.util.Set;\n\n/**\n * @author kingschan\n * 2023-4-25\n * json\u64cd\u4f5c\u517c\u5bb9 jsonObject\u3001jsonArray", " * 2023-4-25\n * json\u64cd\u4f5c\u517c\u5bb9 jsonObject\u3001jsonArray\n */\npublic interface JsonOp {\n\n    JsonHelper put(String key, Object value);\n\n    JsonHelper add(JSONObject jsonObject);\n\n    <T> T get(String expression, Class<T> clazz);\n\n    boolean hasKey(String expression);\n\n    Set<String> getKeys();\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/regex/RegexHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.regex;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * @author kingschan\n */\npublic class RegexHelper {\n    /**\n     * \u6587\u4ef6\u540d\n     */", " * @author kingschan\n */\npublic class RegexHelper {\n    /**\n     * \u6587\u4ef6\u540d\n     */\n    public static final String REGEX_FILE_NAME = \"^[\\\\u4E00-\\\\u9FA5A-Za-z0-9_]+\\\\.\\\\w+$\";\n    /**\n     * \u8868\u8fbe\u5f0f\n     */\n    public static final String REGEX_EXPRESSION = \"\\\\$\\\\{(\\\\w|\\\\s|\\\\=)+\\\\}\";\n    /**\n     * \u79d1\u5b66\u8ba1\u7b97\n     */", "    public static final String REGEX_EXPRESSION = \"\\\\$\\\\{(\\\\w|\\\\s|\\\\=)+\\\\}\";\n    /**\n     * \u79d1\u5b66\u8ba1\u7b97\n     */\n    public static final String REGEX_SCIENTIFIC_NOTATION = \"\\\\d+\\\\.\\\\d+E(\\\\+)?\\\\d+\";\n    /**\n     * html meta\u6807\u7b7echarset\u5c5e\u6027\u63d0\u53d6\n     */\n    public static final String REGEX_HTML_CHARSET = \"<(?i)meta(\\\\s+|.*)(?i)charSet(\\\\s+)?=.*/>\";\n\n    /**\n     * \u63d0\u53d6\u6587\u672c\u4e2d\u5339\u914d\u6b63\u5219\u7684\u5b57\u7b26\u4e32\n     *\n     * @param text\n     * @param regx \u6b63\u5219\n     * @return \u7ed3\u679c\n     */", "    public static final String REGEX_HTML_CHARSET = \"<(?i)meta(\\\\s+|.*)(?i)charSet(\\\\s+)?=.*/>\";\n\n    /**\n     * \u63d0\u53d6\u6587\u672c\u4e2d\u5339\u914d\u6b63\u5219\u7684\u5b57\u7b26\u4e32\n     *\n     * @param text\n     * @param regx \u6b63\u5219\n     * @return \u7ed3\u679c\n     */\n    public static List<String> find(String text, String regx) {\n        List<String> list = new ArrayList<>();", "    public static List<String> find(String text, String regx) {\n        List<String> list = new ArrayList<>();\n        try {\n            Pattern pattern = Pattern.compile(regx);\n            Matcher matcher = pattern.matcher(text);\n            while (matcher.find()) {\n                list.add(matcher.group());\n            }\n            return list;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return list;\n        }\n\n    }\n", "    public static String findFirst(String text, String regx) {\n        Pattern pattern = Pattern.compile(regx);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return matcher.group();\n        }\n        return \"\";\n    }\n}\n"]}
{"filename": "src/main/java/com/github/kingschan1204/easycrawl/helper/datetime/DateHelper.java", "chunked_list": ["package com.github.kingschan1204.easycrawl.helper.datetime;\n\n\nimport com.github.kingschan1204.easycrawl.helper.validation.Assert;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;", "import java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\n\n/**\n * java8\u65e5\u671f\u5de5\u5177\u7c7b\u5c01\u88c5\n *\n * @author kings.chan\n * @date 2021-9-10\n */\n@Slf4j\npublic class DateHelper {\n\n    private LocalDateTime localDateTime;\n\n    public DateHelper(LocalDateTime localDateTime) {\n        this.localDateTime = localDateTime;\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @return DateHelperNew\n     */", " */\n@Slf4j\npublic class DateHelper {\n\n    private LocalDateTime localDateTime;\n\n    public DateHelper(LocalDateTime localDateTime) {\n        this.localDateTime = localDateTime;\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @return DateHelperNew\n     */", "    public static DateHelper now() {\n        return new DateHelper(LocalDateTime.now());\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @param timeStamp \u65f6\u95f4\u6233\n     * @return DateHelperNew\n     */\n    public static DateHelper of(Long timeStamp) {\n        Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");", "    public static DateHelper of(Long timeStamp) {\n        Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n        if (String.valueOf(timeStamp).length() > 10) {\n            timeStamp = timeStamp / 1000;\n        }\n        LocalDateTime time = LocalDateTime.ofEpochSecond(timeStamp, 0, ZoneOffset.ofHours(8));\n        return new DateHelper(time);\n    }\n\n    /**\n     * \u521d\u59cb\u5bf9\u8c61\n     *\n     * @param text \u683c\u5f0f\uff1a2023-04-01,2023-4-1,2023-04-01 00:00:00,2022-2-1T12:55:00,20230401\n     * @return DateHelperNew\n     */", "    public static DateHelper of(String text) {\n        String date = text.contains(\".\") ? text.replaceAll(\"\\\\..*\", \"\") : text;\n        if (date.contains(\"T\")) {\n            date = date.replace(\"T\", \" \");\n        }\n        if (date.matches(\"\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}\")) {\n            String[] array = date.split(\"-\");\n            date = String.format(\"%s-%02d-%02d 00:00:00\", array[0], Integer.valueOf(array[1]), Integer.valueOf(array[2]));\n        } else if (date.matches(\"\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{2}:\\\\d{2}:\\\\d{2}\")) {\n            String[] array = date.replaceAll(\"\\\\s.*\", \"\").split(\"-\");\n            date = String.format(\"%s-%02d-%02d %s\", array[0], Integer.valueOf(array[1]), Integer.valueOf(array[2]), date.split(\"\\\\s\")[1]);", "        } else if (date.matches(\"\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{2}:\\\\d{2}:\\\\d{2}\")) {\n            String[] array = date.replaceAll(\"\\\\s.*\", \"\").split(\"-\");\n            date = String.format(\"%s-%02d-%02d %s\", array[0], Integer.valueOf(array[1]), Integer.valueOf(array[2]), date.split(\"\\\\s\")[1]);\n        } else if (date.matches(\"\\\\d{8}\")) {\n            date = String.format(\"%s-%s-%s 00:00:00\", date.substring(0, 4), date.substring(4, 6), date.substring(6));\n        } else {\n            throw new RuntimeException(\"\u4e0d\u652f\u6301\u7684\u683c\u5f0f\uff1a\" + text);\n        }\n        LocalDateTime localDate = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n        return new DateHelper(localDate);\n    }\n\n", "    public DateHelper plusYears(long years) {\n        this.localDateTime = localDateTime.plusYears(years);\n        return this;\n    }\n\n    public DateHelper plusMonths(long months) {\n        this.localDateTime = localDateTime.plusMonths(months);\n        return this;\n    }\n\n    /**\n     * \u65e5\u671f\u5929\u6570\u76f8\u52a0\n     *\n     * @param days \u8981\u52a0\u7684\u5929\u6570\n     * @return DateHelperNew\n     */", "    public DateHelper plusDays(long days) {\n        this.localDateTime = localDateTime.plusDays(days);\n        return this;\n    }\n\n    public DateHelper minusYears(long years) {\n        this.localDateTime = localDateTime.minusYears(years);\n        return this;\n    }\n\n    public DateHelper minusMonths(long months) {\n        this.localDateTime = localDateTime.minusMonths(months);\n        return this;\n    }\n\n    /**\n     * \u65e5\u671f\u5929\u6570\u76f8\u51cf\n     *\n     * @param days \u8981\u51cf\u7684\u5929\u6570\n     * @return DateHelperNew\n     */", "    public DateHelper minusMonths(long months) {\n        this.localDateTime = localDateTime.minusMonths(months);\n        return this;\n    }\n\n    /**\n     * \u65e5\u671f\u5929\u6570\u76f8\u51cf\n     *\n     * @param days \u8981\u51cf\u7684\u5929\u6570\n     * @return DateHelperNew\n     */", "    public DateHelper minusDays(long days) {\n        this.localDateTime = localDateTime.minusDays(days);\n        return this;\n    }\n\n    /**\n     * \u5f97\u5230\u5f53\u524d\u65f6\u95f4\u6233\n     *\n     * @return 10\u4f4d\u7684\u65f6\u95f4\u6233\n     */\n    public Long timeStamp() {\n        return localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli() / 1000;\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u5e74\n     *\n     * @return yyyy\u5e74\n     */", "    public Long timeStamp() {\n        return localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli() / 1000;\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u5e74\n     *\n     * @return yyyy\u5e74\n     */\n    public String year() {\n        return format(\"yyyy\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u6708\n     *\n     * @return MM\u6708\n     */", "    public String year() {\n        return format(\"yyyy\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u6708\n     *\n     * @return MM\u6708\n     */\n    public String month() {\n        return format(\"MM\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u65e5\n     *\n     * @return dd\u65e5\n     */", "    public String month() {\n        return format(\"MM\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\u7684\u65e5\n     *\n     * @return dd\u65e5\n     */\n    public String day() {\n        return format(\"dd\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\n     *\n     * @return yyyy-MM-dd\n     */", "    public String day() {\n        return format(\"dd\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\n     *\n     * @return yyyy-MM-dd\n     */\n    public String date() {\n        return format(\"yyyy-MM-dd\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\n     *\n     * @return yyyy-MM-dd HH:mm:ss\n     */", "    public String date() {\n        return format(\"yyyy-MM-dd\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65e5\u671f\n     *\n     * @return yyyy-MM-dd HH:mm:ss\n     */\n    public String dateTime() {\n        return format(\"yyyy-MM-dd HH:mm:ss\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65f6\u95f4\n     *\n     * @return HH:mm:ss\n     */", "    public String dateTime() {\n        return format(\"yyyy-MM-dd HH:mm:ss\");\n    }\n\n    /**\n     * \u8fd4\u56de\u65f6\u95f4\n     *\n     * @return HH:mm:ss\n     */\n    public String time() {\n        return format(\"HH:mm:ss\");\n    }\n\n    /**\n     * \u6309\u4f20\u5165\u7684\u683c\u5f0f \u683c\u5f0f\u5316\u65e5\u671f\n     *\n     * @param format\n     * @return\n     */", "    public String time() {\n        return format(\"HH:mm:ss\");\n    }\n\n    /**\n     * \u6309\u4f20\u5165\u7684\u683c\u5f0f \u683c\u5f0f\u5316\u65e5\u671f\n     *\n     * @param format\n     * @return\n     */\n    public String format(String format) {\n        return DateTimeFormatter.ofPattern(format).format(localDateTime);\n    }\n", "    public String format(String format) {\n        return DateTimeFormatter.ofPattern(format).format(localDateTime);\n    }\n\n    public static void main(String[] args) {\n        String[] dates = {\"2022-2-1\", \"2022-12-1\", \"2022-2-12\", \"2022-2-1 12:55:00\", \"2022-2-1T12:55:00\", \"2022-02-01 00:00:00\", \"20220201\"};\n        for (String date : dates) {\n            System.out.println(DateHelper.of(date).date());\n        }\n    }\n\n}\n"]}
