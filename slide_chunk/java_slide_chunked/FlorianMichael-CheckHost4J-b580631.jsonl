{"filename": "src/main/java/de/florianmichael/checkhost4j/CheckHostAPI.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j;", "\npackage de.florianmichael.checkhost4j;\n\nimport com.google.gson.*;\nimport de.florianmichael.checkhost4j.types.CHResult;\nimport de.florianmichael.checkhost4j.types.CHServer;\nimport de.florianmichael.checkhost4j.results.ResultTypes;\nimport de.florianmichael.checkhost4j.results.*;\n\nimport java.io.BufferedReader;", "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.Map.Entry;", "import java.util.*;\nimport java.util.Map.Entry;\n\npublic final class CheckHostAPI {\n\tpublic final static Gson GSON = new Gson();\n\t\n\tpublic static CHResult<Map<CHServer, PingResult>> createPingRequest(String host, int maxNodes) throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = sendCheckHostRequest(ResultTypes.PING, host, maxNodes);\n\n\t\treturn new CHResult<>(ResultTypes.PING, entry.getKey(), entry.getValue());\n\t}\n\t", "\tpublic static CHResult<Map<CHServer, TCPResult>> createTCPRequest(String host, int maxNodes) throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = sendCheckHostRequest(ResultTypes.TCP, host, maxNodes);\n\n\t\treturn new CHResult<>(ResultTypes.TCP, entry.getKey(), entry.getValue());\n\t}\n\t\n\tpublic static CHResult<Map<CHServer, UDPResult>> createUDPRequest(String host, int maxNodes) throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = sendCheckHostRequest(ResultTypes.UDP, host, maxNodes);\n\n\t\treturn new CHResult<>(ResultTypes.UDP, entry.getKey(), entry.getValue());\n\t}\n\t", "\tpublic static CHResult<Map<CHServer, HTTPResult>> createHTTPRequest(String host, int maxNodes) throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = sendCheckHostRequest(ResultTypes.HTTP, host, maxNodes);\n\n\t\treturn new CHResult<>(ResultTypes.HTTP, entry.getKey(), entry.getValue());\n\t}\n\t\n\tpublic static CHResult<Map<CHServer, DNSResult>> createDNSRequest(String host, int maxNodes) throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = sendCheckHostRequest(ResultTypes.DNS, host, maxNodes);\n\n\t\treturn new CHResult<>(ResultTypes.DNS, entry.getKey(), entry.getValue());\n\t}\n\t\n\tprivate static Entry<String, List<CHServer>> sendCheckHostRequest(ResultTypes type, String host, int maxNodes) throws IOException {\n\t\tfinal JsonObject main = performGetRequest(\"https://check-host.net/check-\" + type.value.toLowerCase(Locale.ROOT) + \"?host=\" + URLEncoder.encode(host, StandardCharsets.UTF_8) + \"&max_nodes=\" + maxNodes);", "\t\tif(!main.has(\"nodes\")) throw new IOException(\"Invalid response!\");\n\t\t\n\t\tfinal List<CHServer> servers = new ArrayList<>();\n\t\tJsonObject nodes = main.get(\"nodes\").getAsJsonObject();\n\n\t\tfor(Entry<String, JsonElement> entry : nodes.entrySet()) {\n\t\t\tfinal JsonArray list = entry.getValue().getAsJsonArray();\n\t\t\tfinal List<String> infos = new ArrayList<>();\n\n\t\t\tif (list.size() > 3) {\n\t\t\t\tfor (int i = 3; i < list.size(); i++) {\n\t\t\t\t\tinfos.add(list.get(i).getAsString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tservers.add(new CHServer(entry.getKey(), list.get(1).getAsString(), list.get(0).getAsString(), list.get(2).getAsString(), infos));\n\t\t}\n\t\t\n\t\treturn new Entry<>() {\n\n\t\t\t@Override", "\t\t\tif (list.size() > 3) {\n\t\t\t\tfor (int i = 3; i < list.size(); i++) {\n\t\t\t\t\tinfos.add(list.get(i).getAsString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tservers.add(new CHServer(entry.getKey(), list.get(1).getAsString(), list.get(0).getAsString(), list.get(2).getAsString(), infos));\n\t\t}\n\t\t\n\t\treturn new Entry<>() {\n\n\t\t\t@Override", "\t\t\tpublic String getKey() {\n\t\t\t\treturn main.get(\"request_id\").getAsString();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<CHServer> getValue() {\n\t\t\t\treturn servers;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<CHServer> setValue(List<CHServer> value) {\n\t\t\t\treturn servers;\n\t\t\t}\n\t\t};\n\t}\n", "\tpublic static JsonObject performGetRequest(String url) throws IOException {\n\t\tfinal HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n\n\t\tconnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0\");\n\t\tconnection.setRequestProperty(\"Accept\", \"application/json\");\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n\t\tStringBuilder json = new StringBuilder();\n\t\tString line = null;\n\t\twhile((line = br.readLine()) != null) {\n\t\t\tjson.append(line).append(System.lineSeparator());\n\t\t}\n\t\tbr.close();\n\t\tfinal JsonObject main = CheckHostAPI.GSON.fromJson(json.toString(), JsonObject.class).getAsJsonObject();\n\t\tconnection.disconnect();\n\t\treturn main;\n\t}\n}\n", "\t\twhile((line = br.readLine()) != null) {\n\t\t\tjson.append(line).append(System.lineSeparator());\n\t\t}\n\t\tbr.close();\n\t\tfinal JsonObject main = CheckHostAPI.GSON.fromJson(json.toString(), JsonObject.class).getAsJsonObject();\n\t\tconnection.disconnect();\n\t\treturn main;\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/ResultTypes.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\npublic enum ResultTypes {\n\t\n\tPING(\"Ping\"),\n\tTCP(\"TCP\"),\n\tUDP(\"UDP\"),\n\tHTTP(\"HTTP\"),\n\tDNS(\"DNS\");\n", "\tpublic final String value;\n\t\n\tResultTypes(String value) {\n\t\tthis.value = value;\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/HTTPResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\npublic record HTTPResult(String status, double ping, String address, int errorCode) {\n\n\tpublic boolean isSuccessful() {\n\t\treturn status != null && status.equalsIgnoreCase(\"OK\");\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/TCPResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\npublic record TCPResult(double ping, String address, String error) {\n\n\tpublic boolean isSuccessful() {\n\t\treturn error == null;\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/UDPResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\npublic record UDPResult(double timeout, double ping, String address, String error) {\n\n\tpublic boolean isSuccessful() {\n\t\treturn error == null;\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/PingResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\nimport java.util.List;\n\npublic record PingResult(List<PingEntry> pingEntries) {\n\n\tpublic boolean isSuccessful() {\n\t\treturn pingEntries != null && !pingEntries.isEmpty();\n\t}\n", "\tpublic record PingEntry(String status, double ping, String address) {\n\n\t\tpublic boolean isSuccessful() {\n\t\t\treturn (status != null && status.equalsIgnoreCase(\"OK\")) && ping >= 0;\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/results/DNSResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.results;", "\npackage de.florianmichael.checkhost4j.results;\n\nimport java.util.Map;\n\npublic record DNSResult(int ttl, Map<String, String[]> result) {\n\n\tpublic boolean isSuccessful() {\n\t\treturn ttl >= 0;\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/types/CHResult.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.types;", "\npackage de.florianmichael.checkhost4j.types;\n\nimport de.florianmichael.checkhost4j.results.*;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map.Entry;\n\npublic class CHResult<T> {\n\t\n\tprivate final ResultTypes type;\n\tprivate final List<CHServer> servers;\n\tprivate final String requestId;\n\tprivate T result;\n\t\n\tpublic CHResult(ResultTypes type, String requestId, List<CHServer> servers) throws IOException {\n\t\tthis.type = type;\n\t\tthis.requestId = requestId;\n\t\tthis.servers = servers;\n\n\t\tthis.update();\n\t}\n\t", "\npublic class CHResult<T> {\n\t\n\tprivate final ResultTypes type;\n\tprivate final List<CHServer> servers;\n\tprivate final String requestId;\n\tprivate T result;\n\t\n\tpublic CHResult(ResultTypes type, String requestId, List<CHServer> servers) throws IOException {\n\t\tthis.type = type;\n\t\tthis.requestId = requestId;\n\t\tthis.servers = servers;\n\n\t\tthis.update();\n\t}\n\t", "\tpublic String requestId() {\n\t\treturn requestId;\n\t}\n\t\n\tpublic T getResult() {\n\t\treturn result;\n\t}\n\t\n\tpublic ResultTypes type() {\n\t\treturn type;\n\t}\n\t\n\tpublic List<CHServer> servers() {\n\t\treturn servers;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")", "\tpublic ResultTypes type() {\n\t\treturn type;\n\t}\n\t\n\tpublic List<CHServer> servers() {\n\t\treturn servers;\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void update() throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = new Entry<>() {\n\n\t\t\t@Override", "\tpublic void update() throws IOException {\n\t\tfinal Entry<String, List<CHServer>> entry = new Entry<>() {\n\n\t\t\t@Override\n\t\t\tpublic String getKey() {\n\t\t\t\treturn requestId;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<CHServer> getValue() {\n\t\t\t\treturn servers;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<CHServer> setValue(List<CHServer> value) {\n\t\t\t\treturn servers;\n\t\t\t}\n\t\t};\n\t\tswitch (type) {\n\t\t\tcase PING -> result = (T) InternalInterface.ping(entry);\n\t\t\tcase DNS -> result = (T) InternalInterface.dns(entry);\n\t\t\tcase HTTP -> result = (T) InternalInterface.http(entry);\n\t\t\tcase UDP -> result = (T) InternalInterface.udp(entry);\n\t\t\tcase TCP -> result = (T) InternalInterface.tcp(entry);\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/types/InternalInterface.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.types;", "\npackage de.florianmichael.checkhost4j.types;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport de.florianmichael.checkhost4j.CheckHostAPI;\nimport de.florianmichael.checkhost4j.results.*;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class InternalInterface {\n\n    static Map<CHServer, PingResult> ping(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n\n        Map<CHServer, PingResult> result = new HashMap<>();", "\npublic class InternalInterface {\n\n    static Map<CHServer, PingResult> ping(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n\n        Map<CHServer, PingResult> result = new HashMap<>();\n        for (CHServer server : servers) {\n            if (!main.has(server.name())) continue;", "        for (CHServer server : servers) {\n            if (!main.has(server.name())) continue;\n            if (main.get(server.name()).isJsonNull()) continue;\n\n            JsonArray jsonArray = main.get(server.name()).getAsJsonArray();\n            for (int k = 0; k < jsonArray.size(); k++) {\n                final JsonElement element = jsonArray.get(k);\n\n                if (element.isJsonArray()) {\n                    JsonArray innerJsonArray = element.getAsJsonArray();\n                    List<PingResult.PingEntry> pEntries = new ArrayList<>();", "                if (element.isJsonArray()) {\n                    JsonArray innerJsonArray = element.getAsJsonArray();\n                    List<PingResult.PingEntry> pEntries = new ArrayList<>();\n                    for (int j = 0; j < innerJsonArray.size(); j++) {\n                        if (!innerJsonArray.get(j).isJsonArray()) continue;\n\n                        JsonArray ja3 = innerJsonArray.get(j).getAsJsonArray();\n                        if (ja3.size() != 2 && ja3.size() != 3) {\n                            pEntries.add(new PingResult.PingEntry(\"Unable to resolve domain name.\", -1, null));\n                            continue;\n                        }\n                        String status = ja3.get(0).getAsString();\n                        double ping = ja3.get(1).getAsDouble();\n                        String addr = null;", "                        if (ja3.size() > 2) {\n                            addr = ja3.get(2).getAsString();\n                        }\n                        PingResult.PingEntry pEntry = new PingResult.PingEntry(status, ping, addr);\n                        pEntries.add(pEntry);\n                    }\n                    result.put(server, new PingResult(pEntries));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static Map<CHServer, TCPResult> tcp(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n\n        Map<CHServer, TCPResult> result = new HashMap<CHServer, TCPResult>();", "        for (CHServer server : servers) {\n            JsonArray ja = null;\n            if (!main.has(server.name())) continue;\n            if (main.get(server.name()).isJsonNull()) continue;\n\n            ja = main.get(server.name()).getAsJsonArray();\n\n            if (ja.size() != 1) continue;\n\n            JsonObject obj = ja.get(0).getAsJsonObject();\n            String error = null;", "            if (obj.has(\"error\")) {\n                error = obj.get(\"error\").getAsString();\n            }\n            String addr = null;\n            if (obj.has(\"address\")) {\n                addr = obj.get(\"address\").getAsString();\n            }\n            double ping = 0;\n            if (obj.has(\"time\")) {\n                ping = obj.get(\"time\").getAsDouble();\n            }\n\n            TCPResult res = new TCPResult(ping, addr, error);\n            result.put(server, res);\n        }\n\n        return result;\n    }\n\n    static Map<CHServer, UDPResult> udp(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n        Map<CHServer, UDPResult> result = new HashMap<>();", "            if (obj.has(\"time\")) {\n                ping = obj.get(\"time\").getAsDouble();\n            }\n\n            TCPResult res = new TCPResult(ping, addr, error);\n            result.put(server, res);\n        }\n\n        return result;\n    }\n\n    static Map<CHServer, UDPResult> udp(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n        Map<CHServer, UDPResult> result = new HashMap<>();", "        for (CHServer server : servers) {\n            JsonArray ja = null;\n            if (!main.has(server.name())) continue;\n            if (main.get(server.name()).isJsonNull()) continue;\n\n            ja = main.get(server.name()).getAsJsonArray();\n\n            if (ja.size() != 1) continue;\n            JsonObject obj = ja.get(0).getAsJsonObject();\n            String error = null;\n            if (obj.has(\"error\")) {\n                error = obj.get(\"error\").getAsString();\n            }\n            String addr = null;", "            if (obj.has(\"error\")) {\n                error = obj.get(\"error\").getAsString();\n            }\n            String addr = null;\n            if (obj.has(\"address\")) {\n                addr = obj.get(\"address\").getAsString();\n            }\n            double ping = 0;\n            if (obj.has(\"time\")) {\n                ping = obj.get(\"time\").getAsDouble();\n            }\n            double timeout = 0;", "            if (obj.has(\"time\")) {\n                ping = obj.get(\"time\").getAsDouble();\n            }\n            double timeout = 0;\n            if (obj.has(\"timeout\")) {\n                timeout = obj.get(\"timeout\").getAsDouble();\n            }\n\n            UDPResult res = new UDPResult(timeout, ping, addr, error);\n            result.put(server, res);\n        }\n\n        return result;\n    }\n\n    static Map<CHServer, HTTPResult> http(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n        Map<CHServer, HTTPResult> result = new HashMap<CHServer, HTTPResult>();", "        for (CHServer server : servers) {\n            JsonArray ja = null;\n            if (!main.has(server.name())) continue;\n            if (main.get(server.name()).isJsonNull()) continue;\n\n            ja = main.get(server.name()).getAsJsonArray();\n\n            if (ja.size() != 1) continue;\n            ja = ja.get(0).getAsJsonArray();\n\n            double ping = ja.get(1).getAsDouble();\n            String status = ja.get(2).getAsString();\n            int error = ja.size() > 3 && ja.get(3).isJsonPrimitive() ? ja.get(3).getAsInt() : -1;", "            if (error == -1)\n                continue;\n            String addr = ja.size() > 4 && ja.get(4).isJsonPrimitive() ? ja.get(4).getAsString() : null;\n\n            HTTPResult res = new HTTPResult(status, ping, addr, error);\n            result.put(server, res);\n        }\n\n        return result;\n    }\n\n    static Map<CHServer, DNSResult> dns(Map.Entry<String, List<CHServer>> input) throws IOException {\n        String id = input.getKey();\n        List<CHServer> servers = input.getValue();\n        JsonObject main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));\n        Map<CHServer, DNSResult> result = new HashMap<CHServer, DNSResult>();", "        for (CHServer server : servers) {\n            JsonArray ja = null;\n            if (!main.has(server.name())) continue;\n            if (main.get(server.name()).isJsonNull()) continue;\n\n            ja = main.get(server.name()).getAsJsonArray();\n\n            if (ja.size() != 1) continue;\n            JsonObject obj = ja.get(0).getAsJsonObject();\n\n            Map<String, String[]> domainInfos = new HashMap<String, String[]>();", "            for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n                if (entry.getKey().equals(\"TTL\") || !entry.getValue().isJsonArray())\n                    continue;\n                JsonArray ja2 = entry.getValue().getAsJsonArray();\n                String[] values = new String[ja2.size()];\n                for (int k = 0; k < ja2.size(); k++) {\n                    if (ja2.get(k).isJsonPrimitive()) {\n                        values[k] = ja2.get(k).getAsString();\n                    }\n                }\n                domainInfos.put(entry.getKey(), values);\n            }\n            DNSResult res = new DNSResult(obj.has(\"TTL\") && obj.get(\"TTL\").isJsonPrimitive() ? obj.get(\"TTL\").getAsInt() : -1, domainInfos);\n            result.put(server, res);\n        }\n        return result;\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/checkhost4j/types/CHServer.java", "chunked_list": ["/*\n * This file is part of CheckHost4J - https://github.com/FlorianMichael/CheckHost4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.checkhost4j.types;", "\npackage de.florianmichael.checkhost4j.types;\n\nimport java.util.List;\n\npublic record CHServer(String name, String country, String countryCode, String city, List<String> infos) {\n}\n"]}
