{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/onUrlChangeListener.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager;\n\nimport okhttp3.HttpUrl;", "\nimport okhttp3.HttpUrl;\n\n/**\n * ================================================\n * Url \u76d1\u542c\u5668\n * <p>\n * Created by JessYan on 20/07/2017 14:18\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>", " * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic interface onUrlChangeListener {\n\n    /**\n     * \u6b64\u65b9\u6cd5\u5728\u6846\u67b6\u4f7f\u7528 {@code domainName} \u4f5c\u4e3a key,\u4ece {@link RetrofitUrlManager#mDomainNameHub}\n     * \u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684 BaseUrl \u6784\u5efa\u65b0\u7684 Url \u4e4b\u524d\u4f1a\u88ab\u8c03\u7528\n     * <p>\n     * \u53ef\u4ee5\u4f7f\u7528\u6b64\u56de\u8c03\u786e\u4fdd {@link RetrofitUrlManager#mDomainNameHub} \u4e2d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u81ea\u5df1\u671f\u671b\u7684 BaseUrl\n     * \u5982\u679c\u4e0d\u5b58\u5728\u53ef\u4ee5\u5728\u6b64\u65b9\u6cd5\u4e2d\u8fdb\u884c {@link RetrofitUrlManager#putDomain(String, String)}\n     *\n     * @param oldUrl\n     * @param domainName\n     */\n    void onUrlChangeBefore(HttpUrl oldUrl, String domainName);\n\n    /**\n     * \u5f53 Url \u7684 BaseUrl \u88ab\u5207\u6362\u65f6\u56de\u8c03\n     * \u8c03\u7528\u65f6\u95f4\u662f\u5728\u63a5\u53e3\u8bf7\u6c42\u670d\u52a1\u5668\u4e4b\u524d\n     *\n     * @param newUrl\n     * @param oldUrl\n     */\n    void onUrlChanged(HttpUrl newUrl, HttpUrl oldUrl);\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/RetrofitUrlManager.java", "chunked_list": ["\npackage com.foundation.service.urlmanager.retrofiturlmanager;\n\nimport android.text.TextUtils;\nimport android.util.Log;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.parser.AdvancedUrlParser;\nimport com.foundation.service.urlmanager.retrofiturlmanager.parser.DefaultUrlParser;\nimport com.foundation.service.urlmanager.retrofiturlmanager.parser.UrlParser;\n", "import com.foundation.service.urlmanager.retrofiturlmanager.parser.UrlParser;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport okhttp3.HttpUrl;\nimport okhttp3.Interceptor;", "import okhttp3.HttpUrl;\nimport okhttp3.Interceptor;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\nimport static com.foundation.service.urlmanager.retrofiturlmanager.Utils.checkNotNull;\nimport static com.foundation.service.urlmanager.retrofiturlmanager.Utils.checkUrl;\n\n/**", "\n/**\n * ================================================\n * \u6e90\u7801\u57fa\u4e8e RetrofitUrlManager 1.4.0\n * \u6e90\u7801 https://github.com/JessYanCoding/RetrofitUrlManager\n * \u6587\u6863\uff1ahttps://www.jianshu.com/p/35a8959c2f86\n * Created by JessYan on 17/07/2017 14:29\n * ================================================\n */\npublic class RetrofitUrlManager {\n    private static final String TAG = \"RetrofitUrlManager\";\n    private static final boolean DEPENDENCY_OKHTTP;\n    private static final String DOMAIN_NAME = \"Domain-Name\";\n    private static final String GLOBAL_DOMAIN_NAME = \"com.foundation.service.globalDomainName\";", " */\npublic class RetrofitUrlManager {\n    private static final String TAG = \"RetrofitUrlManager\";\n    private static final boolean DEPENDENCY_OKHTTP;\n    private static final String DOMAIN_NAME = \"Domain-Name\";\n    private static final String GLOBAL_DOMAIN_NAME = \"com.foundation.service.globalDomainName\";\n    public static final String DOMAIN_NAME_HEADER = DOMAIN_NAME + \": \";\n    /**\n     * \u5982\u679c\u5728 Url \u5730\u5740\u4e2d\u52a0\u5165\u6b64\u6807\u8bc6\u7b26, \u6846\u67b6\u5c06\u4e0d\u4f1a\u5bf9\u6b64 Url \u8fdb\u884c\u4efb\u4f55\u5207\u6362 BaseUrl \u7684\u64cd\u4f5c\n     */\n    public static final String IDENTIFICATION_IGNORE = \"#url_ignore\";\n    /**\n     * \u5982\u679c\u5728 Url \u5730\u5740\u4e2d\u52a0\u5165\u6b64\u6807\u8bc6\u7b26, \u610f\u5473\u7740\u60a8\u60f3\u5bf9\u6b64 Url \u5f00\u542f\u8d85\u7ea7\u6a21\u5f0f, \u6846\u67b6\u4f1a\u5c06 '=' \u540e\u9762\u7684\u6570\u5b57\u4f5c\u4e3a PathSize, \u6765\u786e\u8ba4\u6700\u7ec8\u9700\u8981\u88ab\u8d85\u7ea7\u6a21\u5f0f\u66ff\u6362\u7684 BaseUrl\n     */", "    public static final String IDENTIFICATION_IGNORE = \"#url_ignore\";\n    /**\n     * \u5982\u679c\u5728 Url \u5730\u5740\u4e2d\u52a0\u5165\u6b64\u6807\u8bc6\u7b26, \u610f\u5473\u7740\u60a8\u60f3\u5bf9\u6b64 Url \u5f00\u542f\u8d85\u7ea7\u6a21\u5f0f, \u6846\u67b6\u4f1a\u5c06 '=' \u540e\u9762\u7684\u6570\u5b57\u4f5c\u4e3a PathSize, \u6765\u786e\u8ba4\u6700\u7ec8\u9700\u8981\u88ab\u8d85\u7ea7\u6a21\u5f0f\u66ff\u6362\u7684 BaseUrl\n     */\n    public static final String IDENTIFICATION_PATH_SIZE = \"#baseurl_path_size=\";\n\n    private HttpUrl baseUrl;\n    private int pathSize;\n    private boolean isRun = true; //\u9ed8\u8ba4\u5f00\u59cb\u8fd0\u884c, \u53ef\u4ee5\u968f\u65f6\u505c\u6b62\u8fd0\u884c, \u6bd4\u5982\u60a8\u5728 App \u542f\u52a8\u540e\u5df2\u7ecf\u4e0d\u9700\u8981\u518d\u52a8\u6001\u5207\u6362 BaseUrl \u4e86\n    private boolean debug = false;//\u5728 Debug  \u6a21\u5f0f\u4e0b\u53ef\u4ee5\u6253\u5370\u65e5\u5fd7\n    private final Map<String, HttpUrl> mDomainNameHub = new HashMap<>();\n    private final Interceptor mInterceptor;\n    private final List<onUrlChangeListener> mListeners = new ArrayList<>();\n    private UrlParser mUrlParser;\n\n    static {\n        boolean hasDependency;", "        try {\n            Class.forName(\"okhttp3.OkHttpClient\");\n            hasDependency = true;\n        } catch (ClassNotFoundException e) {\n            hasDependency = false;\n        }\n        DEPENDENCY_OKHTTP = hasDependency;\n    }\n\n\n    private RetrofitUrlManager() {", "        if (!DEPENDENCY_OKHTTP) { //\u4f7f\u7528\u672c\u6846\u67b6\u5fc5\u987b\u4f9d\u8d56 Okhttp\n            throw new IllegalStateException(\"Must be dependency Okhttp\");\n        }\n        UrlParser urlParser = new DefaultUrlParser();\n        urlParser.init(this);\n        setUrlParser(urlParser);\n        this.mInterceptor = new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n                if (!isRun()) // \u53ef\u4ee5\u5728 App \u8fd0\u884c\u65f6, \u968f\u65f6\u901a\u8fc7 setRun(false) \u6765\u7ed3\u675f\u672c\u6846\u67b6\u7684\u8fd0\u884c\n                    return chain.proceed(chain.request());\n                return chain.proceed(processRequest(chain.request()));\n            }\n        };\n    }\n\n    private static class RetrofitUrlManagerHolder {\n        private static final RetrofitUrlManager INSTANCE = new RetrofitUrlManager();\n    }\n", "            public Response intercept(Chain chain) throws IOException {\n                if (!isRun()) // \u53ef\u4ee5\u5728 App \u8fd0\u884c\u65f6, \u968f\u65f6\u901a\u8fc7 setRun(false) \u6765\u7ed3\u675f\u672c\u6846\u67b6\u7684\u8fd0\u884c\n                    return chain.proceed(chain.request());\n                return chain.proceed(processRequest(chain.request()));\n            }\n        };\n    }\n\n    private static class RetrofitUrlManagerHolder {\n        private static final RetrofitUrlManager INSTANCE = new RetrofitUrlManager();\n    }\n", "    public static final RetrofitUrlManager getInstance() {\n        return RetrofitUrlManagerHolder.INSTANCE;\n    }\n\n    /**\n     * \u5c06 {@link OkHttpClient.Builder} \u4f20\u5165, \u914d\u7f6e\u4e00\u4e9b\u672c\u6846\u67b6\u9700\u8981\u7684\u53c2\u6570\n     *\n     * @param builder {@link OkHttpClient.Builder}\n     * @return {@link OkHttpClient.Builder}\n     */\n    public OkHttpClient.Builder with(OkHttpClient.Builder builder) {\n        checkNotNull(builder, \"builder cannot be null\");\n        return builder\n                .addInterceptor(mInterceptor);\n    }\n\n    /**\n     * \u5bf9 {@link Request} \u8fdb\u884c\u4e00\u4e9b\u5fc5\u8981\u7684\u52a0\u5de5, \u6267\u884c\u5207\u6362 BaseUrl \u7684\u76f8\u5173\u903b\u8f91\n     *\n     * @param request {@link Request}\n     * @return {@link Request}\n     */", "    public OkHttpClient.Builder with(OkHttpClient.Builder builder) {\n        checkNotNull(builder, \"builder cannot be null\");\n        return builder\n                .addInterceptor(mInterceptor);\n    }\n\n    /**\n     * \u5bf9 {@link Request} \u8fdb\u884c\u4e00\u4e9b\u5fc5\u8981\u7684\u52a0\u5de5, \u6267\u884c\u5207\u6362 BaseUrl \u7684\u76f8\u5173\u903b\u8f91\n     *\n     * @param request {@link Request}\n     * @return {@link Request}\n     */", "    public Request processRequest(Request request) {\n        if (request == null) return request;\n\n        Request.Builder newBuilder = request.newBuilder();\n\n        String url = request.url().toString();\n        //\u5982\u679c Url \u5730\u5740\u4e2d\u5305\u542b IDENTIFICATION_IGNORE \u6807\u8bc6\u7b26, \u6846\u67b6\u5c06\u4e0d\u4f1a\u5bf9\u6b64 Url \u8fdb\u884c\u4efb\u4f55\u5207\u6362 BaseUrl \u7684\u64cd\u4f5c\n        if (url.contains(IDENTIFICATION_IGNORE)) {\n            return pruneIdentification(newBuilder, url);\n        }\n\n        String domainName = obtainDomainNameFromHeaders(request);\n\n        HttpUrl httpUrl;\n\n        Object[] listeners = listenersToArray();\n\n        // \u5982\u679c\u6709 header,\u83b7\u53d6 header \u4e2d domainName \u6240\u6620\u5c04\u7684 url,\u82e5\u6ca1\u6709,\u5219\u68c0\u67e5\u5168\u5c40\u7684 BaseUrl,\u672a\u627e\u5230\u5219\u4e3anull", "        if (!TextUtils.isEmpty(domainName)) {\n            notifyListener(request, domainName, listeners);\n            httpUrl = fetchDomain(domainName);\n            newBuilder.removeHeader(DOMAIN_NAME);\n        } else {\n            notifyListener(request, GLOBAL_DOMAIN_NAME, listeners);\n            httpUrl = getGlobalDomain();\n        }\n\n        if (null != httpUrl) {\n            HttpUrl newUrl = mUrlParser.parseUrl(httpUrl, request.url());", "        if (null != httpUrl) {\n            HttpUrl newUrl = mUrlParser.parseUrl(httpUrl, request.url());\n            if (debug)\n                Log.d(RetrofitUrlManager.TAG, \"The new url is { \" + newUrl.toString() + \" }, old url is { \" + request.url().toString() + \" }\");\n\n            if (listeners != null) {\n                for (int i = 0; i < listeners.length; i++) {\n                    ((onUrlChangeListener) listeners[i]).onUrlChanged(newUrl, request.url()); // \u901a\u77e5\u76d1\u542c\u5668\u6b64 Url \u7684 BaseUrl \u5df2\u88ab\u5207\u6362\n                }\n            }\n\n            return newBuilder\n                    .url(newUrl)\n                    .build();\n        }\n\n        return newBuilder.build();\n\n    }\n\n    /**\n     * \u5c06 {@code IDENTIFICATION_IGNORE} \u4ece Url \u5730\u5740\u4e2d\u4fee\u526a\u6389\n     *\n     * @param newBuilder {@link Request.Builder}\n     * @param url        \u539f\u59cb Url \u5730\u5740\n     * @return \u88ab\u4fee\u526a\u8fc7 Url \u5730\u5740\u7684 {@link Request}\n     */\n    private Request pruneIdentification(Request.Builder newBuilder, String url) {\n        String[] split = url.split(IDENTIFICATION_IGNORE);\n        StringBuffer buffer = new StringBuffer();", "        for (String s : split) {\n            buffer.append(s);\n        }\n        return newBuilder\n                .url(buffer.toString())\n                .build();\n    }\n\n    /**\n     * \u901a\u77e5\u6240\u6709\u76d1\u542c\u5668\u7684 {@link onUrlChangeListener#onUrlChangeBefore(HttpUrl, String)} \u65b9\u6cd5\n     *\n     * @param request    {@link Request}\n     * @param domainName \u57df\u540d\u7684\u522b\u540d\n     * @param listeners  \u76d1\u542c\u5668\u5217\u8868\n     */\n    private void notifyListener(Request request, String domainName, Object[] listeners) {", "        if (listeners != null) {\n            for (int i = 0; i < listeners.length; i++) {\n                ((onUrlChangeListener) listeners[i]).onUrlChangeBefore(request.url(), domainName);\n            }\n        }\n    }\n\n    /**\n     * \u6846\u67b6\u662f\u5426\u5728\u8fd0\u884c\n     *\n     * @return {@code true} \u4e3a\u6b63\u5728\u8fd0\u884c, {@code false} \u4e3a\u672a\u8fd0\u884c\n     */", "    public boolean isRun() {\n        return this.isRun;\n    }\n\n    /**\n     * \u63a7\u5236\u6846\u67b6\u662f\u5426\u8fd0\u884c, \u5728\u6bcf\u4e2a\u57df\u540d\u5730\u5740\u90fd\u5df2\u7ecf\u786e\u5b9a, \u4e0d\u9700\u8981\u518d\u52a8\u6001\u66f4\u6539\u65f6\u53ef\u8bbe\u7f6e\u4e3a {@code false}\n     *\n     * @param run {@code true} \u4e3a\u6b63\u5728\u8fd0\u884c, {@code false} \u4e3a\u672a\u8fd0\u884c\n     */\n    public void setRun(boolean run) {\n        this.isRun = run;\n    }\n\n    /**\n     * \u5f00\u542f Debug \u6a21\u5f0f\u4e0b\u53ef\u4ee5\u6253\u5370\u65e5\u5fd7\n     *\n     * @param debug true \u5f00\u542f Debug \u6a21\u5f0f\n     */", "    public void setRun(boolean run) {\n        this.isRun = run;\n    }\n\n    /**\n     * \u5f00\u542f Debug \u6a21\u5f0f\u4e0b\u53ef\u4ee5\u6253\u5370\u65e5\u5fd7\n     *\n     * @param debug true \u5f00\u542f Debug \u6a21\u5f0f\n     */\n    public void setDebug(boolean debug) {\n        this.debug = debug;\n    }\n\n    /**\n     * \u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ad8\u7ea7\u6a21\u5f0f\u53ef\u4ee5\u66ff\u6362\u62e5\u6709\u591a\u4e2a pathSegments \u7684 BaseUrl, \u5982: https://www.github.com/wiki/part\n     * \u9ad8\u7ea7\u6a21\u5f0f\u7684\u89e3\u6790\u89c4\u5219, \u8bf7\u770b {@link AdvancedUrlParser}\n     * \u6ce8\u610f, \u5982\u679c\u6ca1\u6709\u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ed8\u8ba4\u4e3a\u666e\u901a\u9ed8\u8ba4, \u53ea\u80fd\u66ff\u6362\u57df\u540d, \u5982: https://www.github.com\n     * <p>\n     * \u6ce8\u610f, \u9047\u5230\u8fd9\u4e2a\u5751, \u8bf7\u522b\u602a\u6846\u67b6!!! Retrofit \u7684 BaseUrl \u542b\u6709\u53ef\u88ab\u8986\u76d6 pathSegment \u7684\u89c4\u5219:\n     * \u4e3e\u4f8b: \u60a8\u8bbe\u7f6e\u7ed9 Retrofit \u7684 BaseUrl \u662f \"http://www.github.com/a/b/\"\n     * \u7136\u540e\u60a8\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7ed9\u7684\u6ce8\u89e3\u662f {@code @GET(\"/path\")}, \u8fd9\u65f6 Retrofit \u751f\u6210\u7684\u6700\u7ec8\u8def\u5f84\u662f \"http://www.github.com/path\"\n     * \"/a/b/\" \u88ab\u526a\u5207\u6389\u4e86, \u4e3a\u4ec0\u4e48? \u56e0\u4e3a\u60a8\u5728 \"path\" \u524d\u9762\u52a0\u4e0a\u4e86 \"/\", \"/\" \u4f1a\u8ba9 Retrofit \u8ba4\u4e3a\u628a\u60a8\u53ea\u60f3\u4fdd\u7559 BaseUrl \u4e2d\u7684\u57df\u540d\n     * \u5982\u679c\u53bb\u6389 \"/\", {@code @GET(\"path\")} \u5f97\u5230\u7684\u6700\u7ec8\u8def\u5f84\u624d\u662f \"http://www.github.com/a/b/path\"\n     * <p>\n     * \u6240\u4ee5\u5982\u679c\u5728\u6700\u7ec8\u8def\u5f84\u4e2d, BaseUrl \u7684 \"/a/b/\" \u56e0\u4e3a\u60a8\u4e0d\u719f\u6089\u89c4\u5219\u800c\u88ab\u526a\u5207, \u8fd9\u65f6\u60a8\u5e94\u8be5\u5728 {@link #startAdvancedModel(HttpUrl)}\n     * \u4e2d\u4f20\u5165\u88ab\u526a\u5207\u7684\u5b9e\u9645 BaseUrl \"http://www.github.com\", \u800c\u4e0d\u662f http://www.github.com/a/b/, \u5426\u5219\u6846\u67b6\u4f1a\u7406\u89e3\u9519\u8bef!\n     *\n     * @param baseUrl \u60a8\u5f53\u65f6\u4f20\u5165 Retrofit \u7684 BaseUrl\n     * @see AdvancedUrlParser\n     */", "    public void setDebug(boolean debug) {\n        this.debug = debug;\n    }\n\n    /**\n     * \u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ad8\u7ea7\u6a21\u5f0f\u53ef\u4ee5\u66ff\u6362\u62e5\u6709\u591a\u4e2a pathSegments \u7684 BaseUrl, \u5982: https://www.github.com/wiki/part\n     * \u9ad8\u7ea7\u6a21\u5f0f\u7684\u89e3\u6790\u89c4\u5219, \u8bf7\u770b {@link AdvancedUrlParser}\n     * \u6ce8\u610f, \u5982\u679c\u6ca1\u6709\u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ed8\u8ba4\u4e3a\u666e\u901a\u9ed8\u8ba4, \u53ea\u80fd\u66ff\u6362\u57df\u540d, \u5982: https://www.github.com\n     * <p>\n     * \u6ce8\u610f, \u9047\u5230\u8fd9\u4e2a\u5751, \u8bf7\u522b\u602a\u6846\u67b6!!! Retrofit \u7684 BaseUrl \u542b\u6709\u53ef\u88ab\u8986\u76d6 pathSegment \u7684\u89c4\u5219:\n     * \u4e3e\u4f8b: \u60a8\u8bbe\u7f6e\u7ed9 Retrofit \u7684 BaseUrl \u662f \"http://www.github.com/a/b/\"\n     * \u7136\u540e\u60a8\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7ed9\u7684\u6ce8\u89e3\u662f {@code @GET(\"/path\")}, \u8fd9\u65f6 Retrofit \u751f\u6210\u7684\u6700\u7ec8\u8def\u5f84\u662f \"http://www.github.com/path\"\n     * \"/a/b/\" \u88ab\u526a\u5207\u6389\u4e86, \u4e3a\u4ec0\u4e48? \u56e0\u4e3a\u60a8\u5728 \"path\" \u524d\u9762\u52a0\u4e0a\u4e86 \"/\", \"/\" \u4f1a\u8ba9 Retrofit \u8ba4\u4e3a\u628a\u60a8\u53ea\u60f3\u4fdd\u7559 BaseUrl \u4e2d\u7684\u57df\u540d\n     * \u5982\u679c\u53bb\u6389 \"/\", {@code @GET(\"path\")} \u5f97\u5230\u7684\u6700\u7ec8\u8def\u5f84\u624d\u662f \"http://www.github.com/a/b/path\"\n     * <p>\n     * \u6240\u4ee5\u5982\u679c\u5728\u6700\u7ec8\u8def\u5f84\u4e2d, BaseUrl \u7684 \"/a/b/\" \u56e0\u4e3a\u60a8\u4e0d\u719f\u6089\u89c4\u5219\u800c\u88ab\u526a\u5207, \u8fd9\u65f6\u60a8\u5e94\u8be5\u5728 {@link #startAdvancedModel(HttpUrl)}\n     * \u4e2d\u4f20\u5165\u88ab\u526a\u5207\u7684\u5b9e\u9645 BaseUrl \"http://www.github.com\", \u800c\u4e0d\u662f http://www.github.com/a/b/, \u5426\u5219\u6846\u67b6\u4f1a\u7406\u89e3\u9519\u8bef!\n     *\n     * @param baseUrl \u60a8\u5f53\u65f6\u4f20\u5165 Retrofit \u7684 BaseUrl\n     * @see AdvancedUrlParser\n     */", "    public void startAdvancedModel(String baseUrl) {\n        checkNotNull(baseUrl, \"baseUrl cannot be null\");\n        startAdvancedModel(checkUrl(baseUrl));\n    }\n\n    /**\n     * \u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ad8\u7ea7\u6a21\u5f0f\u53ef\u4ee5\u66ff\u6362\u62e5\u6709\u591a\u4e2a pathSegments \u7684 BaseUrl, \u5982: https://www.github.com/wiki/part\n     * \u9ad8\u7ea7\u6a21\u5f0f\u7684\u89e3\u6790\u89c4\u5219, \u8bf7\u770b {@link AdvancedUrlParser}\n     * \u6ce8\u610f, \u5982\u679c\u6ca1\u6709\u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f, \u9ed8\u8ba4\u4e3a\u666e\u901a\u9ed8\u8ba4, \u53ea\u80fd\u66ff\u6362\u57df\u540d, \u5982: https://www.github.com\n     * <p>\n     * \u6ce8\u610f, \u9047\u5230\u8fd9\u4e2a\u5751, \u8bf7\u522b\u602a\u6846\u67b6!!! Retrofit \u7684 BaseUrl \u542b\u6709\u53ef\u88ab\u8986\u76d6 pathSegment \u7684\u89c4\u5219:\n     * \u4e3e\u4f8b: \u60a8\u8bbe\u7f6e\u7ed9 Retrofit \u7684 BaseUrl \u662f \"http://www.github.com/a/b/\"\n     * \u7136\u540e\u60a8\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7ed9\u7684\u6ce8\u89e3\u662f {@code @GET(\"/path\")}, \u8fd9\u65f6 Retrofit \u751f\u6210\u7684\u6700\u7ec8\u8def\u5f84\u662f \"http://www.github.com/path\"\n     * \"/a/b/\" \u88ab\u526a\u5207\u6389\u4e86, \u4e3a\u4ec0\u4e48? \u56e0\u4e3a\u60a8\u5728 \"path\" \u524d\u9762\u52a0\u4e0a\u4e86 \"/\", \"/\" \u4f1a\u8ba9 Retrofit \u8ba4\u4e3a\u628a\u60a8\u53ea\u60f3\u4fdd\u7559 BaseUrl \u4e2d\u7684\u57df\u540d\n     * \u5982\u679c\u53bb\u6389 \"/\", {@code @GET(\"path\")} \u5f97\u5230\u7684\u6700\u7ec8\u8def\u5f84\u624d\u662f \"http://www.github.com/a/b/path\"\n     * <p>\n     * \u6240\u4ee5\u5982\u679c\u5728\u6700\u7ec8\u8def\u5f84\u4e2d, BaseUrl \u7684 \"/a/b/\" \u56e0\u4e3a\u60a8\u4e0d\u719f\u6089\u89c4\u5219\u800c\u88ab\u526a\u5207, \u8fd9\u65f6\u60a8\u5e94\u8be5\u5728 {@link #startAdvancedModel(HttpUrl)}\n     * \u4e2d\u4f20\u5165\u88ab\u526a\u5207\u7684\u5b9e\u9645 BaseUrl \"http://www.github.com\", \u800c\u4e0d\u662f http://www.github.com/a/b/, \u5426\u5219\u6846\u67b6\u4f1a\u7406\u89e3\u9519\u8bef!\n     *\n     * @param baseUrl \u60a8\u5f53\u65f6\u4f20\u5165 Retrofit \u7684 BaseUrl\n     * @see AdvancedUrlParser\n     */", "    public synchronized void startAdvancedModel(HttpUrl baseUrl) {\n        checkNotNull(baseUrl, \"baseUrl cannot be null\");\n        this.baseUrl = baseUrl;\n        this.pathSize = baseUrl.pathSize();\n        List<String> baseUrlpathSegments = baseUrl.pathSegments();\n        if (\"\".equals(baseUrlpathSegments.get(baseUrlpathSegments.size() - 1))) {\n            this.pathSize -= 1;\n        }\n    }\n\n    /**\n     * \u83b7\u53d6 PathSegments \u7684\u603b\u5927\u5c0f\n     *\n     * @return PathSegments \u7684 size\n     */", "    public int getPathSize() {\n        return pathSize;\n    }\n\n    /**\n     * \u662f\u5426\u5f00\u542f\u9ad8\u7ea7\u6a21\u5f0f\n     *\n     * @return {@code true} \u4e3a\u5f00\u542f, {@code false} \u4e3a\u672a\u5f00\u542f\n     */\n    public boolean isAdvancedModel() {\n        return baseUrl != null;\n    }\n\n    /**\n     * \u83b7\u53d6 BaseUrl\n     *\n     * @return {@link #baseUrl}\n     */", "    public boolean isAdvancedModel() {\n        return baseUrl != null;\n    }\n\n    /**\n     * \u83b7\u53d6 BaseUrl\n     *\n     * @return {@link #baseUrl}\n     */\n    public HttpUrl getBaseUrl() {\n        return baseUrl;\n    }\n\n    /**\n     * \u5c06 url \u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u6b64\u65b9\u6cd5, \u5e76\u4f7f\u7528\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684 Url \u5730\u5740\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42, \u5219\u4f1a\u4f7f\u6b64 Url \u5730\u5740\u5ffd\u7565\u6389\u672c\u6846\u67b6\u7684\u6240\u6709\u66f4\u6539\u6548\u679c\n     * <p>\n     * \u4f7f\u7528\u573a\u666f:\n     * \u6bd4\u5982\u5f53\u60a8\u4f7f\u7528\u4e86 {@link #setGlobalDomain(String url)} \u914d\u7f6e\u4e86\u5168\u5c40 BaseUrl \u540e, \u60f3\u8bf7\u6c42\u4e00\u4e2a\u4e0e\u5168\u5c40 BaseUrl\n     * \u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u670d\u52a1\u5546\u5730\u5740\u83b7\u53d6\u56fe\u7247\n     *\n     * @param url Url \u5730\u5740\n     * @return \u5904\u7406\u540e\u7684 Url \u5730\u5740\n     */", "    public HttpUrl getBaseUrl() {\n        return baseUrl;\n    }\n\n    /**\n     * \u5c06 url \u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u6b64\u65b9\u6cd5, \u5e76\u4f7f\u7528\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684 Url \u5730\u5740\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42, \u5219\u4f1a\u4f7f\u6b64 Url \u5730\u5740\u5ffd\u7565\u6389\u672c\u6846\u67b6\u7684\u6240\u6709\u66f4\u6539\u6548\u679c\n     * <p>\n     * \u4f7f\u7528\u573a\u666f:\n     * \u6bd4\u5982\u5f53\u60a8\u4f7f\u7528\u4e86 {@link #setGlobalDomain(String url)} \u914d\u7f6e\u4e86\u5168\u5c40 BaseUrl \u540e, \u60f3\u8bf7\u6c42\u4e00\u4e2a\u4e0e\u5168\u5c40 BaseUrl\n     * \u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u670d\u52a1\u5546\u5730\u5740\u83b7\u53d6\u56fe\u7247\n     *\n     * @param url Url \u5730\u5740\n     * @return \u5904\u7406\u540e\u7684 Url \u5730\u5740\n     */", "    public String setUrlNotChange(String url) {\n        checkNotNull(url, \"url cannot be null\");\n        return url + IDENTIFICATION_IGNORE;\n    }\n\n    /**\n     * \u5c06 url \u5730\u5740\u548c pathSize \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u6b64\u65b9\u6cd5, \u5e76\u4f7f\u7528\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684 Url \u5730\u5740\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42, \u5219\u4f1a\u4f7f\u6b64 Url \u5730\u5740\u4f7f\u7528\u8d85\u7ea7\u6a21\u5f0f\n     * <p>\n     * \u4ec0\u4e48\u662f\u8d85\u7ea7\u6a21\u5f0f? \u8bf7\u770b {@link RetrofitUrlManager} \u4e0a\u9762\u7684\u6ce8\u91ca\n     *\n     * @param url      Url \u5730\u5740\n     * @param pathSize pathSize\n     * @return \u5904\u7406\u540e\u7684 Url \u5730\u5740\n     */", "    public String setPathSizeOfUrl(String url, int pathSize) {\n        checkNotNull(url, \"url cannot be null\");\n        if (pathSize < 0) throw new IllegalArgumentException(\"pathSize must be >= 0\");\n        return url + IDENTIFICATION_PATH_SIZE + pathSize;\n    }\n\n    /**\n     * \u5168\u5c40\u52a8\u6001\u66ff\u6362 BaseUrl, \u4f18\u5148\u7ea7: Header\u4e2d\u914d\u7f6e\u7684 BaseUrl > \u5168\u5c40\u914d\u7f6e\u7684 BaseUrl\n     * \u9664\u4e86\u4f5c\u4e3a\u5907\u7528\u7684 BaseUrl, \u5f53\u60a8\u9879\u76ee\u4e2d\u53ea\u6709\u4e00\u4e2a BaseUrl, \u4f46\u9700\u8981\u52a8\u6001\u5207\u6362\n     * \u8fd9\u79cd\u65b9\u5f0f\u4e0d\u7528\u5728\u6bcf\u4e2a\u63a5\u53e3\u65b9\u6cd5\u4e0a\u52a0\u5165 Header, \u5c31\u80fd\u5b9e\u73b0\u52a8\u6001\u5207\u6362 BaseUrl\n     *\n     * @param globalDomain \u5168\u5c40 BaseUrl\n     */", "    public void setGlobalDomain(String globalDomain) {\n        checkNotNull(globalDomain, \"globalDomain cannot be null\");\n        synchronized (mDomainNameHub) {\n            mDomainNameHub.put(GLOBAL_DOMAIN_NAME, Utils.checkUrl(globalDomain));\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5168\u5c40 BaseUrl\n     */\n    public synchronized HttpUrl getGlobalDomain() {\n        return mDomainNameHub.get(GLOBAL_DOMAIN_NAME);\n    }\n\n    /**\n     * \u79fb\u9664\u5168\u5c40 BaseUrl\n     */", "    public synchronized HttpUrl getGlobalDomain() {\n        return mDomainNameHub.get(GLOBAL_DOMAIN_NAME);\n    }\n\n    /**\n     * \u79fb\u9664\u5168\u5c40 BaseUrl\n     */\n    public void removeGlobalDomain() {\n        synchronized (mDomainNameHub) {\n            mDomainNameHub.remove(GLOBAL_DOMAIN_NAME);\n        }\n    }\n\n    /**\n     * \u5b58\u653e Domain(BaseUrl) \u7684\u6620\u5c04\u5173\u7cfb\n     *\n     * @param domainName\n     * @param domainUrl\n     */", "    public void putDomain(String domainName, String domainUrl) {\n        checkNotNull(domainName, \"domainName cannot be null\");\n        checkNotNull(domainUrl, \"domainUrl cannot be null\");\n        synchronized (mDomainNameHub) {\n            mDomainNameHub.put(domainName, Utils.checkUrl(domainUrl));\n        }\n    }\n\n    /**\n     * \u53d6\u51fa\u5bf9\u5e94 {@code domainName} \u7684 Url(BaseUrl)\n     *\n     * @param domainName\n     * @return\n     */", "    public synchronized HttpUrl fetchDomain(String domainName) {\n        checkNotNull(domainName, \"domainName cannot be null\");\n        return mDomainNameHub.get(domainName);\n    }\n\n    /**\n     * \u79fb\u9664\u67d0\u4e2a {@code domainName}\n     *\n     * @param domainName {@code domainName}\n     */\n    public void removeDomain(String domainName) {\n        checkNotNull(domainName, \"domainName cannot be null\");\n        synchronized (mDomainNameHub) {\n            mDomainNameHub.remove(domainName);\n        }\n    }\n\n    /**\n     * \u6e05\u7406\u6240\u6709 Domain(BaseUrl)\n     */", "    public void removeDomain(String domainName) {\n        checkNotNull(domainName, \"domainName cannot be null\");\n        synchronized (mDomainNameHub) {\n            mDomainNameHub.remove(domainName);\n        }\n    }\n\n    /**\n     * \u6e05\u7406\u6240\u6709 Domain(BaseUrl)\n     */\n    public void clearAllDomain() {\n        mDomainNameHub.clear();\n    }\n\n    /**\n     * \u5b58\u653e Domain(BaseUrl) \u7684\u5bb9\u5668\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u4e2a {@code domainName}\n     *\n     * @param domainName {@code domainName}\n     * @return {@code true} \u4e3a\u5b58\u5728, {@code false} \u4e3a\u4e0d\u5b58\u5728\n     */", "    public void clearAllDomain() {\n        mDomainNameHub.clear();\n    }\n\n    /**\n     * \u5b58\u653e Domain(BaseUrl) \u7684\u5bb9\u5668\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u4e2a {@code domainName}\n     *\n     * @param domainName {@code domainName}\n     * @return {@code true} \u4e3a\u5b58\u5728, {@code false} \u4e3a\u4e0d\u5b58\u5728\n     */\n    public synchronized boolean haveDomain(String domainName) {\n        return mDomainNameHub.containsKey(domainName);\n    }\n\n    /**\n     * \u5b58\u653e Domain(BaseUrl) \u7684\u5bb9\u5668, \u5f53\u524d\u7684\u5927\u5c0f\n     *\n     * @return \u5bb9\u91cf\u5927\u5c0f\n     */", "    public synchronized boolean haveDomain(String domainName) {\n        return mDomainNameHub.containsKey(domainName);\n    }\n\n    /**\n     * \u5b58\u653e Domain(BaseUrl) \u7684\u5bb9\u5668, \u5f53\u524d\u7684\u5927\u5c0f\n     *\n     * @return \u5bb9\u91cf\u5927\u5c0f\n     */\n    public synchronized int domainSize() {\n        return mDomainNameHub.size();\n    }\n\n    /**\n     * \u53ef\u81ea\u884c\u5b9e\u73b0 {@link UrlParser} \u52a8\u6001\u5207\u6362 Url \u89e3\u6790\u7b56\u7565\n     *\n     * @param parser {@link UrlParser}\n     */", "    public synchronized int domainSize() {\n        return mDomainNameHub.size();\n    }\n\n    /**\n     * \u53ef\u81ea\u884c\u5b9e\u73b0 {@link UrlParser} \u52a8\u6001\u5207\u6362 Url \u89e3\u6790\u7b56\u7565\n     *\n     * @param parser {@link UrlParser}\n     */\n    public void setUrlParser(UrlParser parser) {\n        checkNotNull(parser, \"parser cannot be null\");\n        this.mUrlParser = parser;\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668(\u5f53 Url \u7684 BaseUrl \u88ab\u5207\u6362\u65f6\u4f1a\u88ab\u56de\u8c03\u7684\u76d1\u542c\u5668)\n     *\n     * @param listener \u76d1\u542c\u5668\u5217\u8868\n     */", "    public void setUrlParser(UrlParser parser) {\n        checkNotNull(parser, \"parser cannot be null\");\n        this.mUrlParser = parser;\n    }\n\n    /**\n     * \u6ce8\u518c\u76d1\u542c\u5668(\u5f53 Url \u7684 BaseUrl \u88ab\u5207\u6362\u65f6\u4f1a\u88ab\u56de\u8c03\u7684\u76d1\u542c\u5668)\n     *\n     * @param listener \u76d1\u542c\u5668\u5217\u8868\n     */\n    public void registerUrlChangeListener(onUrlChangeListener listener) {\n        checkNotNull(listener, \"listener cannot be null\");\n        synchronized (mListeners) {\n            mListeners.add(listener);\n        }\n    }\n\n    /**\n     * \u6ce8\u9500\u76d1\u542c\u5668(\u5f53 Url \u7684 BaseUrl \u88ab\u5207\u6362\u65f6\u4f1a\u88ab\u56de\u8c03\u7684\u76d1\u542c\u5668)\n     *\n     * @param listener \u76d1\u542c\u5668\u5217\u8868\n     */", "    public void registerUrlChangeListener(onUrlChangeListener listener) {\n        checkNotNull(listener, \"listener cannot be null\");\n        synchronized (mListeners) {\n            mListeners.add(listener);\n        }\n    }\n\n    /**\n     * \u6ce8\u9500\u76d1\u542c\u5668(\u5f53 Url \u7684 BaseUrl \u88ab\u5207\u6362\u65f6\u4f1a\u88ab\u56de\u8c03\u7684\u76d1\u542c\u5668)\n     *\n     * @param listener \u76d1\u542c\u5668\u5217\u8868\n     */", "    public void unregisterUrlChangeListener(onUrlChangeListener listener) {\n        checkNotNull(listener, \"listener cannot be null\");\n        synchronized (mListeners) {\n            mListeners.remove(listener);\n        }\n    }\n\n    private Object[] listenersToArray() {\n        Object[] listeners = null;\n        synchronized (mListeners) {\n            if (mListeners.size() > 0) {\n                listeners = mListeners.toArray();\n            }\n        }\n        return listeners;\n    }\n\n    /**\n     * \u4ece {@link Request#header(String)} \u4e2d\u53d6\u51fa DomainName\n     *\n     * @param request {@link Request}\n     * @return DomainName\n     */\n    private String obtainDomainNameFromHeaders(Request request) {\n        List<String> headers = request.headers(DOMAIN_NAME);", "            if (mListeners.size() > 0) {\n                listeners = mListeners.toArray();\n            }\n        }\n        return listeners;\n    }\n\n    /**\n     * \u4ece {@link Request#header(String)} \u4e2d\u53d6\u51fa DomainName\n     *\n     * @param request {@link Request}\n     * @return DomainName\n     */\n    private String obtainDomainNameFromHeaders(Request request) {\n        List<String> headers = request.headers(DOMAIN_NAME);", "        if (headers == null || headers.size() == 0)\n            return null;\n        if (headers.size() > 1)\n            throw new IllegalArgumentException(\"Only one Domain-Name in the headers\");\n        return request.header(DOMAIN_NAME);\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/InvalidUrlException.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager;\n\nimport android.text.TextUtils;", "\nimport android.text.TextUtils;\n\n/**\n * ================================================\n * Url \u65e0\u6548\u7684\u5f02\u5e38\n * <p>\n * Created by JessYan on 2017/7/24.\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>", " * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class InvalidUrlException extends RuntimeException {\n\n    public InvalidUrlException(String url) {\n        super(\"You've configured an invalid url : \" + (TextUtils.isEmpty(url) ? \"EMPTY_OR_NULL_URL\" : url));\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/Utils.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager;\n\nimport okhttp3.HttpUrl;", "\nimport okhttp3.HttpUrl;\n\n/**\n * ================================================\n * \u5de5\u5177\u7c7b\n * <p>\n * Created by JessYan on 2017/7/24.\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>", " * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\nclass Utils {\n\n    private Utils() {\n        throw new IllegalStateException(\"do not instantiation me\");\n    }\n", "    }\n\n    static HttpUrl checkUrl(String url) {\n        HttpUrl parseUrl = HttpUrl.parse(url);\n        if (null == parseUrl) {\n            throw new InvalidUrlException(url);\n        } else {\n            return parseUrl;\n        }\n    }\n\n    static <T> T checkNotNull(T object, String message) {", "        if (object == null) {\n            throw new NullPointerException(message);\n        }\n        return object;\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/parser/DefaultUrlParser.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.parser;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;", "\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;\n\nimport okhttp3.HttpUrl;\n\nimport static com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager.IDENTIFICATION_PATH_SIZE;\n\n/**\n * ================================================\n * \u9ed8\u8ba4\u89e3\u6790\u5668, \u53ef\u6839\u636e\u81ea\u5b9a\u4e49\u7b56\u7565\u9009\u62e9\u4e0d\u540c\u7684\u89e3\u6790\u5668", " * ================================================\n * \u9ed8\u8ba4\u89e3\u6790\u5668, \u53ef\u6839\u636e\u81ea\u5b9a\u4e49\u7b56\u7565\u9009\u62e9\u4e0d\u540c\u7684\u89e3\u6790\u5668\n * <p>\n * \u5982\u679c\u60a8\u89c9\u5f97 {@link DefaultUrlParser} \u7684\u89e3\u6790\u7b56\u7565\u5e76\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u9700\u6c42, \u60a8\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u66f4\u9002\u5408\u60a8\u7684 {@link UrlParser}\n * \u7136\u540e\u901a\u8fc7 {@link RetrofitUrlManager#setUrlParser(UrlParser)} \u914d\u7f6e\u7ed9\u6846\u67b6, \u5373\u53ef\u66ff\u6362 {@link DefaultUrlParser}\n * \u81ea\u5df1\u6539 {@link DefaultUrlParser} \u7684\u6e90\u7801\u6765\u8fbe\u5230\u6269\u5c55\u7684\u76ee\u7684\u662f\u5f88\u7b28\u7684\u884c\u4e3a\n *\n * @see UrlParser\n * Created by JessYan on 17/07/2017 18:23\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>", " * Created by JessYan on 17/07/2017 18:23\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class DefaultUrlParser implements UrlParser {\n\n    private UrlParser mDomainUrlParser;\n    private volatile UrlParser mAdvancedUrlParser;\n    private volatile UrlParser mSuperUrlParser;\n    private RetrofitUrlManager mRetrofitUrlManager;\n\n    @Override", "    public void init(RetrofitUrlManager retrofitUrlManager) {\n        this.mRetrofitUrlManager = retrofitUrlManager;\n        this.mDomainUrlParser = new DomainUrlParser();\n        this.mDomainUrlParser.init(retrofitUrlManager);\n    }\n\n    @Override\n    public HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url) {\n        if (null == domainUrl) return url;\n\n        if (url.toString().contains(IDENTIFICATION_PATH_SIZE)) {", "        if (null == domainUrl) return url;\n\n        if (url.toString().contains(IDENTIFICATION_PATH_SIZE)) {\n            if (mSuperUrlParser == null) {\n                synchronized (this) {\n                    if (mSuperUrlParser == null) {\n                        mSuperUrlParser = new SuperUrlParser();\n                        mSuperUrlParser.init(mRetrofitUrlManager);\n                    }\n                }\n            }\n            return mSuperUrlParser.parseUrl(domainUrl, url);\n        }\n\n        //\u5982\u679c\u662f\u9ad8\u7ea7\u6a21\u5f0f\u5219\u4f7f\u7528\u9ad8\u7ea7\u89e3\u6790\u5668", "        if (mRetrofitUrlManager.isAdvancedModel()) {\n            if (mAdvancedUrlParser == null) {\n                synchronized (this) {\n                    if (mAdvancedUrlParser == null) {\n                        mAdvancedUrlParser = new AdvancedUrlParser();\n                        mAdvancedUrlParser.init(mRetrofitUrlManager);\n                    }\n                }\n            }\n            return mAdvancedUrlParser.parseUrl(domainUrl, url);\n        }\n        return mDomainUrlParser.parseUrl(domainUrl, url);\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/parser/SuperUrlParser.java", "chunked_list": ["/*\n * Copyright 2018 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.parser;\n\nimport android.text.TextUtils;", "\nimport android.text.TextUtils;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.Cache;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.LruCache;\n\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\nimport okhttp3.HttpUrl;\n\nimport static com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager.IDENTIFICATION_PATH_SIZE;\n\n/**\n * ================================================\n * \u8d85\u7ea7\u89e3\u6790\u5668\n * \u8d85\u7ea7\u6a21\u5f0f\u5c5e\u4e8e\u9ad8\u7ea7\u6a21\u5f0f\u7684\u52a0\u5f3a\u7248, \u4f18\u5148\u7ea7\u9ad8\u4e8e\u9ad8\u7ea7\u6a21\u5f0f, \u5728\u9ad8\u7ea7\u6a21\u5f0f\u4e2d, \u9700\u8981\u4f20\u5165\u4e00\u4e2a BaseUrl (\u60a8\u4f20\u5165 Retrofit \u7684 BaseUrl) \u4f5c\u4e3a\u88ab\u66ff\u6362\u7684\u57fa\u51c6", " * \u8d85\u7ea7\u89e3\u6790\u5668\n * \u8d85\u7ea7\u6a21\u5f0f\u5c5e\u4e8e\u9ad8\u7ea7\u6a21\u5f0f\u7684\u52a0\u5f3a\u7248, \u4f18\u5148\u7ea7\u9ad8\u4e8e\u9ad8\u7ea7\u6a21\u5f0f, \u5728\u9ad8\u7ea7\u6a21\u5f0f\u4e2d, \u9700\u8981\u4f20\u5165\u4e00\u4e2a BaseUrl (\u60a8\u4f20\u5165 Retrofit \u7684 BaseUrl) \u4f5c\u4e3a\u88ab\u66ff\u6362\u7684\u57fa\u51c6\n * \u5982\u8fd9\u4e2a\u4f20\u5165\u7684 BaseUrl \u4e3a \"https://www.github.com/wiki/part\" (PathSize = 2), \u90a3\u6846\u67b6\u4f1a\u5c06\u6240\u6709\u9700\u8981\u88ab\u66ff\u6362\u7684 Url \u4e2d\u7684 \u57df\u540d \u4ee5\u53ca \u57df\u540d \u540e\u9762\u7684\u524d\u4e24\u4e2a pathSegments\n * \u4f7f\u7528\u60a8\u4f20\u5165 {@link RetrofitUrlManager#putDomain(String, String)} \u65b9\u6cd5\u7684 Url \u66ff\u6362\u6389\n * \u4f46\u5982\u679c\u7a81\u7136\u6709\u4e00\u5c0f\u90e8\u5206\u7684 Url \u53ea\u60f3\u5c06 \"https://www.github.com/wiki\" (PathSize = 1) \u66ff\u6362\u6389, \u540e\u9762\u7684 pathSegment '/part' \u60f3\u88ab\u4fdd\u7559\u4e0b\u6765\n * \u8fd9\u65f6\u9879\u76ee\u4e2d\u5c31\u51fa\u73b0\u4e86\u591a\u4e2a PathSize \u4e0d\u540c\u7684\u9700\u8981\u88ab\u66ff\u6362\u7684 BaseUrl\n * <p>\n * \u4f7f\u7528\u9ad8\u7ea7\u6a21\u5f0f\u5b9e\u73b0\u8fd9\u79cd\u9700\u6c42\u7565\u663e\u9ebb\u70e6, \u6240\u4ee5\u6211\u521b\u5efa\u4e86\u8d85\u7ea7\u6a21\u5f0f, \u8ba9\u6bcf\u4e00\u4e2a Url \u90fd\u53ef\u4ee5\u968f\u610f\u6307\u5b9a\u4e0d\u540c\u7684 BaseUrl (PathSize \u81ea\u5df1\u5b9a) \u4f5c\u4e3a\u88ab\u66ff\u6362\u7684\u57fa\u51c6\n * \u4f7f RetrofitUrlManager \u53ef\u4ee5\u4ece\u5bb9\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u7684\u9700\u6c42\n * <p>", " * \u4f7f RetrofitUrlManager \u53ef\u4ee5\u4ece\u5bb9\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u7684\u9700\u6c42\n * <p>\n * \u8d85\u7ea7\u6a21\u5f0f\u4e5f\u9700\u8981\u624b\u52a8\u5f00\u542f, \u4f46\u4e0e\u9ad8\u7ea7\u6a21\u5f0f\u4e0d\u540c\u7684\u662f, \u5f00\u542f\u8d85\u7ea7\u6a21\u5f0f\u5e76\u4e0d\u9700\u8981\u8c03\u7528 API, \u53ea\u9700\u8981\u5728 Url \u4e2d\u52a0\u5165 {@link RetrofitUrlManager#IDENTIFICATION_PATH_SIZE} + PathSize\n * <p>\n * \u66ff\u6362\u89c4\u5219\u5982\u4e0b:\n * 1.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part#baseurl_path_size=1, #baseurl_path_size=1 \u8868\u793a\u5176\u4e2d BaseUrl \u4e3a https://www.github.com/wiki\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/part\n * <p>", " * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/part\n * <p>\n * 2.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part#baseurl_path_size=1, #baseurl_path_size=1 \u8868\u793a\u5176\u4e2d BaseUrl \u4e3a https://www.github.com/wiki\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/part\n * <p>\n * 3.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part#baseurl_path_size=0, #baseurl_path_size=0 \u8868\u793a\u5176\u4e2d BaseUrl \u4e3a https://www.github.com\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api", " * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part#baseurl_path_size=0, #baseurl_path_size=0 \u8868\u793a\u5176\u4e2d BaseUrl \u4e3a https://www.github.com\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/wiki/part\n * <p>\n * 4.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part/issues/1#baseurl_path_size=3, #baseurl_path_size=3 \u8868\u793a\u5176\u4e2d BaseUrl \u4e3a https://www.github.com/wiki/part/issues\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/1\n *\n * @see UrlParser", " *\n * @see UrlParser\n * Created by JessYan on 2018/6/21 16:41\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class SuperUrlParser implements UrlParser {\n    private RetrofitUrlManager mRetrofitUrlManager;\n    private Cache<String, String> mCache;\n\n    @Override", "    public void init(RetrofitUrlManager retrofitUrlManager) {\n        this.mRetrofitUrlManager = retrofitUrlManager;\n        this.mCache = new LruCache<>(100);\n    }\n\n    @Override\n    public HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url) {\n        if (null == domainUrl) return url;\n\n        HttpUrl.Builder builder = url.newBuilder();\n\n        int pathSize = resolvePathSize(url, builder);\n", "        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url, pathSize)))) {\n            for (int i = 0; i < url.pathSize(); i++) {\n                //\u5f53\u5220\u9664\u4e86\u4e0a\u4e00\u4e2a index, PathSegment \u7684 item \u4f1a\u81ea\u52a8\u524d\u8fdb\u4e00\u4f4d, \u6240\u4ee5 remove(0) \u5c31\u597d\n                builder.removePathSegment(0);\n            }\n\n            List<String> newPathSegments = new ArrayList<>();\n            newPathSegments.addAll(domainUrl.encodedPathSegments());\n\n\n            if (url.pathSize() > pathSize) {\n                List<String> encodedPathSegments = url.encodedPathSegments();", "            if (url.pathSize() > pathSize) {\n                List<String> encodedPathSegments = url.encodedPathSegments();\n                for (int i = pathSize; i < encodedPathSegments.size(); i++) {\n                    newPathSegments.add(encodedPathSegments.get(i));\n                }\n            } else if (url.pathSize() < pathSize) {\n                throw new IllegalArgumentException(String.format(\n                        \"Your final path is %s, the pathSize = %d, but the #baseurl_path_size = %d, #baseurl_path_size must be less than or equal to pathSize of the final path\",\n                        url.scheme() + \"://\" + url.host() + url.encodedPath(), url.pathSize(), pathSize));\n            }\n", "            for (String PathSegment : newPathSegments) {\n                builder.addEncodedPathSegment(PathSegment);\n            }\n        } else {\n            builder.encodedPath(mCache.get(getKey(domainUrl, url, pathSize)));\n        }\n\n        HttpUrl httpUrl = builder\n                .scheme(domainUrl.scheme())\n                .host(domainUrl.host())\n                .port(domainUrl.port())\n                .build();\n", "        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url, pathSize)))) {\n            mCache.put(getKey(domainUrl, url, pathSize), httpUrl.encodedPath());\n        }\n        return httpUrl;\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url, int PathSize) {\n        return domainUrl.encodedPath() + url.encodedPath()\n                + PathSize;\n    }\n\n    private int resolvePathSize(HttpUrl httpUrl, HttpUrl.Builder builder) {\n        String fragment = httpUrl.fragment();\n\n        int pathSize = 0;\n        StringBuffer newFragment = new StringBuffer();\n", "        if (fragment.indexOf(\"#\") == -1) {\n            String[] split = fragment.split(\"=\");\n            if (split.length > 1) {\n                pathSize = Integer.parseInt(split[1]);\n            }\n        } else {\n            if (fragment.indexOf(IDENTIFICATION_PATH_SIZE) == -1) {\n                int index = fragment.indexOf(\"#\");\n                newFragment.append(fragment.substring(index + 1, fragment.length()));\n                String[] split = fragment.substring(0, index).split(\"=\");\n                if (split.length > 1) {\n                    pathSize = Integer.parseInt(split[1]);\n                }\n            } else {\n                String[] split = fragment.split(IDENTIFICATION_PATH_SIZE);\n                newFragment.append(split[0]);", "                if (split.length > 1) {\n                    pathSize = Integer.parseInt(split[1]);\n                }\n            } else {\n                String[] split = fragment.split(IDENTIFICATION_PATH_SIZE);\n                newFragment.append(split[0]);\n                if (split.length > 1) {\n                    int index = split[1].indexOf(\"#\");\n                    if (index != -1) {\n                        newFragment.append(split[1].substring(index, split[1].length()));\n                        String substring = split[1].substring(0, index);", "                    if (index != -1) {\n                        newFragment.append(split[1].substring(index, split[1].length()));\n                        String substring = split[1].substring(0, index);\n                        if (!TextUtils.isEmpty(substring)) {\n                            pathSize = Integer.parseInt(substring);\n                        }\n                    } else {\n                        pathSize = Integer.parseInt(split[1]);\n                    }\n                }\n            }\n        }", "        if (TextUtils.isEmpty(newFragment.toString())) {\n            builder.fragment(null);\n        } else {\n            builder.fragment(newFragment.toString());\n        }\n        return pathSize;\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/parser/AdvancedUrlParser.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.parser;\n\nimport android.text.TextUtils;", "\nimport android.text.TextUtils;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.Cache;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.LruCache;\n\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\nimport okhttp3.HttpUrl;\n\n/**\n * ================================================\n * \u9ad8\u7ea7\u89e3\u6790\u5668, \u5f53 BaseUrl \u4e2d\u6709\u9664\u4e86\u57df\u540d\u4ee5\u5916\u7684\u5176\u4ed6 Path \u65f6, \u53ef\u4f7f\u7528\u6b64\u89e3\u6790\u5668\n * <p>\n * \u6bd4\u5982:\n * 1.", " * \u6bd4\u5982:\n * 1.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part, \u60a8\u5728 App \u521d\u59cb\u5316\u65f6\u4f20\u5165 {@link RetrofitUrlManager#startAdvancedModel(String)}\n * \u7684 BaseUrl \u4e3a https://www.github.com/wiki\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)} \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/part\n * <p>\n * 2.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part, \u60a8\u5728 App \u521d\u59cb\u5316\u65f6\u4f20\u5165 {@link RetrofitUrlManager#startAdvancedModel(String)}\n * \u7684 BaseUrl \u4e3a https://www.github.com/wiki", " * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part, \u60a8\u5728 App \u521d\u59cb\u5316\u65f6\u4f20\u5165 {@link RetrofitUrlManager#startAdvancedModel(String)}\n * \u7684 BaseUrl \u4e3a https://www.github.com/wiki\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)} \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/part\n * <p>\n * 3.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki/part, \u60a8\u5728 App \u521d\u59cb\u5316\u65f6\u4f20\u5165 {@link RetrofitUrlManager#startAdvancedModel(String)}\n * \u7684 BaseUrl \u4e3a https://www.github.com\n * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)} \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/wiki/part", " * \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)} \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api\n * \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/wiki/part\n * <p>\n * \u89e3\u6790\u5668\u4f1a\u5c06 BaseUrl \u5168\u90e8\u66ff\u6362\u6210\u60a8\u4f20\u5165\u7684 Url \u5730\u5740\n *\n * @see UrlParser\n * Created by JessYan on 09/06/2018 16:00\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================", " * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class AdvancedUrlParser implements UrlParser {\n    private RetrofitUrlManager mRetrofitUrlManager;\n    private Cache<String, String> mCache;\n\n    @Override\n    public void init(RetrofitUrlManager retrofitUrlManager) {\n        this.mRetrofitUrlManager = retrofitUrlManager;\n        this.mCache = new LruCache<>(100);\n    }\n\n    @Override", "    public void init(RetrofitUrlManager retrofitUrlManager) {\n        this.mRetrofitUrlManager = retrofitUrlManager;\n        this.mCache = new LruCache<>(100);\n    }\n\n    @Override\n    public HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url) {\n        if (null == domainUrl) return url;\n\n        HttpUrl.Builder builder = url.newBuilder();\n", "        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url)))) {\n            for (int i = 0; i < url.pathSize(); i++) {\n                //\u5f53\u5220\u9664\u4e86\u4e0a\u4e00\u4e2a index, PathSegment \u7684 item \u4f1a\u81ea\u52a8\u524d\u8fdb\u4e00\u4f4d, \u6240\u4ee5 remove(0) \u5c31\u597d\n                builder.removePathSegment(0);\n            }\n\n            List<String> newPathSegments = new ArrayList<>();\n            newPathSegments.addAll(domainUrl.encodedPathSegments());\n\n            if (url.pathSize() > mRetrofitUrlManager.getPathSize()) {\n                List<String> encodedPathSegments = url.encodedPathSegments();", "            if (url.pathSize() > mRetrofitUrlManager.getPathSize()) {\n                List<String> encodedPathSegments = url.encodedPathSegments();\n                for (int i = mRetrofitUrlManager.getPathSize(); i < encodedPathSegments.size(); i++) {\n                    newPathSegments.add(encodedPathSegments.get(i));\n                }\n            } else if (url.pathSize() < mRetrofitUrlManager.getPathSize()) {\n                throw new IllegalArgumentException(String.format(\"Your final path is %s, but the baseUrl of your RetrofitUrlManager#startAdvancedModel is %s\",\n                        url.scheme() + \"://\" + url.host() + url.encodedPath(),\n                        mRetrofitUrlManager.getBaseUrl().scheme() + \"://\"\n                                + mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));\n            }\n", "            for (String PathSegment : newPathSegments) {\n                builder.addEncodedPathSegment(PathSegment);\n            }\n        } else {\n            builder.encodedPath(mCache.get(getKey(domainUrl, url)));\n        }\n\n        HttpUrl httpUrl = builder\n                .scheme(domainUrl.scheme())\n                .host(domainUrl.host())\n                .port(domainUrl.port())\n                .build();\n", "        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url)))) {\n            mCache.put(getKey(domainUrl, url), httpUrl.encodedPath());\n        }\n        return httpUrl;\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.encodedPath() + url.encodedPath()\n                + mRetrofitUrlManager.getPathSize();\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/parser/DomainUrlParser.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.parser;\n\nimport android.text.TextUtils;", "\nimport android.text.TextUtils;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.Cache;\nimport com.foundation.service.urlmanager.retrofiturlmanager.cache.LruCache;\n\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\nimport okhttp3.HttpUrl;\n\n/**\n * ================================================\n * \u57df\u540d\u89e3\u6790\u5668, \u6b64\u89e3\u6790\u5668\u7528\u6765\u89e3\u6790\u57df\u540d, \u9ed8\u8ba4\u5c06\u60a8\u7684\u57df\u540d\u4f5c\u4e3a BaseUrl, \u53ea\u4f1a\u5c06\u65e7 URL \u5730\u5740\u4e2d\u7684\u57df\u540d\u66ff\u6362\u6210\u4f60\u60f3\u8981\u7684\u5730\u5740\n * <p>\n * \u6bd4\u5982:\n * 1.", " * \u6bd4\u5982:\n * 1.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki, \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\n * \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com/api, \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/api/wiki\n * <p>\n * 2.\n * \u65e7 URL \u5730\u5740\u4e3a https://www.github.com/wiki, \u60a8\u8c03\u7528 {@link RetrofitUrlManager#putDomain(String, String)}\n * \u65b9\u6cd5\u4f20\u5165\u7684 URL \u5730\u5740\u662f https://www.google.com, \u7ecf\u8fc7\u672c\u89e3\u6790\u5668\u89e3\u6790\u540e\u751f\u6210\u7684\u65b0 URL \u5730\u5740\u4e3a http://www.google.com/wiki\n *\n * @see UrlParser", " *\n * @see UrlParser\n * Created by JessYan on 17/07/2017 18:23\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class DomainUrlParser implements UrlParser {\n    private Cache<String, String> mCache;\n\n    @Override", "    public void init(RetrofitUrlManager retrofitUrlManager) {\n        this.mCache = new LruCache<>(100);\n    }\n\n    @Override\n    public HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url) {\n        // \u5982\u679c HttpUrl.parse(url); \u89e3\u6790\u4e3a null \u8bf4\u660e,url \u683c\u5f0f\u4e0d\u6b63\u786e,\u6b63\u786e\u7684\u683c\u5f0f\u4e3a \"https://github.com:443\"\n        // http \u9ed8\u8ba4\u7aef\u53e3 80, https \u9ed8\u8ba4\u7aef\u53e3 443, \u5982\u679c\u7aef\u53e3\u53f7\u662f\u9ed8\u8ba4\u7aef\u53e3\u53f7\u5c31\u53ef\u4ee5\u5c06 \":443\" \u53bb\u6389\n        // \u53ea\u652f\u6301 http \u548c https\n\n        if (null == domainUrl) return url;\n\n        HttpUrl.Builder builder = url.newBuilder();\n", "        if (null == domainUrl) return url;\n\n        HttpUrl.Builder builder = url.newBuilder();\n\n        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url)))) {\n            for (int i = 0; i < url.pathSize(); i++) {\n                //\u5f53\u5220\u9664\u4e86\u4e0a\u4e00\u4e2a index, PathSegment \u7684 item \u4f1a\u81ea\u52a8\u524d\u8fdb\u4e00\u4f4d, \u6240\u4ee5 remove(0) \u5c31\u597d\n                builder.removePathSegment(0);\n            }\n\n            List<String> newPathSegments = new ArrayList<>();\n            newPathSegments.addAll(domainUrl.encodedPathSegments());\n            newPathSegments.addAll(url.encodedPathSegments());\n", "            for (String PathSegment : newPathSegments) {\n                builder.addEncodedPathSegment(PathSegment);\n            }\n        } else {\n            builder.encodedPath(mCache.get(getKey(domainUrl, url)));\n        }\n\n        HttpUrl httpUrl = builder\n                .scheme(domainUrl.scheme())\n                .host(domainUrl.host())\n                .port(domainUrl.port())\n                .build();\n", "        if (TextUtils.isEmpty(mCache.get(getKey(domainUrl, url)))) {\n            mCache.put(getKey(domainUrl, url), httpUrl.encodedPath());\n        }\n        return httpUrl;\n    }\n\n    private String getKey(HttpUrl domainUrl, HttpUrl url) {\n        return domainUrl.encodedPath() + url.encodedPath();\n    }\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/parser/UrlParser.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.parser;\n\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;", "\nimport com.foundation.service.urlmanager.retrofiturlmanager.RetrofitUrlManager;\n\nimport okhttp3.HttpUrl;\nimport okhttp3.Request;\n\n/**\n * ================================================\n * Url\u89e3\u6790\u5668\n * <p>", " * Url\u89e3\u6790\u5668\n * <p>\n * Created by JessYan on 17/07/2017 17:44\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\n\npublic interface UrlParser {\n\n    /**\n     * \u8fd9\u91cc\u53ef\u4ee5\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\n     *\n     * @param retrofitUrlManager {@link RetrofitUrlManager}\n     */\n    void init(RetrofitUrlManager retrofitUrlManager);\n\n    /**\n     * \u5c06 {@link RetrofitUrlManager#mDomainNameHub} \u4e2d\u6620\u5c04\u7684 URL \u89e3\u6790\u6210\u5b8c\u6574\u7684{@link HttpUrl}\n     * \u7528\u6765\u66ff\u6362 @{@link Request#url} \u8fbe\u5230\u52a8\u6001\u5207\u6362 URL\n     *\n     * @param domainUrl \u7528\u4e8e\u66ff\u6362\u7684 URL \u5730\u5740\n     * @param url       \u65e7 URL \u5730\u5740\n     * @return\n     */\n    HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url);\n}\n", "public interface UrlParser {\n\n    /**\n     * \u8fd9\u91cc\u53ef\u4ee5\u505a\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\n     *\n     * @param retrofitUrlManager {@link RetrofitUrlManager}\n     */\n    void init(RetrofitUrlManager retrofitUrlManager);\n\n    /**\n     * \u5c06 {@link RetrofitUrlManager#mDomainNameHub} \u4e2d\u6620\u5c04\u7684 URL \u89e3\u6790\u6210\u5b8c\u6574\u7684{@link HttpUrl}\n     * \u7528\u6765\u66ff\u6362 @{@link Request#url} \u8fbe\u5230\u52a8\u6001\u5207\u6362 URL\n     *\n     * @param domainUrl \u7528\u4e8e\u66ff\u6362\u7684 URL \u5730\u5740\n     * @param url       \u65e7 URL \u5730\u5740\n     * @return\n     */\n    HttpUrl parseUrl(HttpUrl domainUrl, HttpUrl url);\n}\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/cache/LruCache.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.cache;\n\nimport java.util.LinkedHashMap;", "\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n\n/**\n * ================================================\n * LRU \u5373 Least Recently Used, \u6700\u8fd1\u6700\u5c11\u4f7f\u7528, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u7f13\u5b58\u6ee1\u4e86, \u4f1a\u4f18\u5148\u6dd8\u6c70\u90a3\u4e9b\u6700\u8fd1\u6700\u4e0d\u5e38\u8bbf\u95ee\u7684\u6570\u636e\n * \u6b64\u79cd\u7f13\u5b58\u7b56\u7565\u4e3a\u6846\u67b6\u9ed8\u8ba4\u63d0\u4f9b, \u53ef\u81ea\u884c\u5b9e\u73b0\u5176\u4ed6\u7f13\u5b58\u7b56\u7565, \u5982\u78c1\u76d8\u7f13\u5b58", " * LRU \u5373 Least Recently Used, \u6700\u8fd1\u6700\u5c11\u4f7f\u7528, \u4e5f\u5c31\u662f\u8bf4, \u5f53\u7f13\u5b58\u6ee1\u4e86, \u4f1a\u4f18\u5148\u6dd8\u6c70\u90a3\u4e9b\u6700\u8fd1\u6700\u4e0d\u5e38\u8bbf\u95ee\u7684\u6570\u636e\n * \u6b64\u79cd\u7f13\u5b58\u7b56\u7565\u4e3a\u6846\u67b6\u9ed8\u8ba4\u63d0\u4f9b, \u53ef\u81ea\u884c\u5b9e\u73b0\u5176\u4ed6\u7f13\u5b58\u7b56\u7565, \u5982\u78c1\u76d8\u7f13\u5b58\n *\n * @see Cache\n * Created by JessYan on 25/09/2017 16:57\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic class LruCache<K, V> implements Cache<K, V> {\n    private final LinkedHashMap<K, V> cache = new LinkedHashMap<>(100, 0.75f, true);\n    private final int initialMaxSize;\n    private int maxSize;\n    private int currentSize = 0;\n\n    /**\n     * Constructor for LruCache.\n     *\n     * @param size \u8fd9\u4e2a\u7f13\u5b58\u7684\u6700\u5927 size,\u8fd9\u4e2a size \u6240\u4f7f\u7528\u7684\u5355\u4f4d\u5fc5\u987b\u548c {@link #getItemSize(Object)} \u6240\u4f7f\u7528\u7684\u5355\u4f4d\u4e00\u81f4.\n     */\n    public LruCache(int size) {\n        this.initialMaxSize = size;\n        this.maxSize = size;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4e00\u4e2a\u7cfb\u6570\u5e94\u7528\u4e8e\u5f53\u65f6\u6784\u9020\u51fd\u6570\u4e2d\u6240\u4f20\u5165\u7684 size, \u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 {@link #maxSize}\n     * \u5e76\u4f1a\u7acb\u5373\u8c03\u7528 {@link #evict} \u5f00\u59cb\u6e05\u9664\u6ee1\u8db3\u6761\u4ef6\u7684\u6761\u76ee\n     *\n     * @param multiplier \u7cfb\u6570\n     */", " */\npublic class LruCache<K, V> implements Cache<K, V> {\n    private final LinkedHashMap<K, V> cache = new LinkedHashMap<>(100, 0.75f, true);\n    private final int initialMaxSize;\n    private int maxSize;\n    private int currentSize = 0;\n\n    /**\n     * Constructor for LruCache.\n     *\n     * @param size \u8fd9\u4e2a\u7f13\u5b58\u7684\u6700\u5927 size,\u8fd9\u4e2a size \u6240\u4f7f\u7528\u7684\u5355\u4f4d\u5fc5\u987b\u548c {@link #getItemSize(Object)} \u6240\u4f7f\u7528\u7684\u5355\u4f4d\u4e00\u81f4.\n     */\n    public LruCache(int size) {\n        this.initialMaxSize = size;\n        this.maxSize = size;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4e00\u4e2a\u7cfb\u6570\u5e94\u7528\u4e8e\u5f53\u65f6\u6784\u9020\u51fd\u6570\u4e2d\u6240\u4f20\u5165\u7684 size, \u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 {@link #maxSize}\n     * \u5e76\u4f1a\u7acb\u5373\u8c03\u7528 {@link #evict} \u5f00\u59cb\u6e05\u9664\u6ee1\u8db3\u6761\u4ef6\u7684\u6761\u76ee\n     *\n     * @param multiplier \u7cfb\u6570\n     */", "    public synchronized void setSizeMultiplier(float multiplier) {\n        if (multiplier < 0) {\n            throw new IllegalArgumentException(\"Multiplier must be >= 0\");\n        }\n        maxSize = Math.round(initialMaxSize * multiplier);\n        evict();\n    }\n\n    /**\n     * \u8fd4\u56de\u6bcf\u4e2a {@code item} \u6240\u5360\u7528\u7684 size,\u9ed8\u8ba4\u4e3a1,\u8fd9\u4e2a size \u7684\u5355\u4f4d\u5fc5\u987b\u548c\u6784\u9020\u51fd\u6570\u6240\u4f20\u5165\u7684 size \u4e00\u81f4\n     * \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u5355\u4f4d,\u6bd4\u5982\u8bf4 bytes\n     *\n     * @param item \u6bcf\u4e2a {@code item} \u6240\u5360\u7528\u7684 size\n     * @return \u5355\u4e2a item \u7684 {@code size}\n     */\n    protected int getItemSize(V item) {\n        return 1;\n    }\n\n    /**\n     * \u5f53\u7f13\u5b58\u4e2d\u6709\u88ab\u9a71\u9010\u7684\u6761\u76ee\u65f6,\u4f1a\u56de\u8c03\u6b64\u65b9\u6cd5,\u9ed8\u8ba4\u7a7a\u5b9e\u73b0,\u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\n     *\n     * @param key   \u88ab\u9a71\u9010\u6761\u76ee\u7684 {@code key}\n     * @param value \u88ab\u9a71\u9010\u6761\u76ee\u7684 {@code value}\n     */\n    protected void onItemEvicted(K key, V value) {\n        // optional override\n    }\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u6240\u80fd\u5141\u8bb8\u7684\u6700\u5927 size\n     *\n     * @return {@code maxSize}\n     */\n    @Override", "    public synchronized int getMaxSize() {\n        return maxSize;\n    }\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u5df2\u5360\u7528\u7684\u603b size\n     *\n     * @return {@code size}\n     */\n    @Override\n    public synchronized int size() {\n        return currentSize;\n    }\n\n    /**\n     * \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u6709\u5bf9\u5e94\u7684 {@code value} \u5e76\u4e14\u4e0d\u4e3a {@code null},\u5219\u8fd4\u56de true\n     *\n     * @param key \u7528\u6765\u6620\u5c04\u7684 {@code key}\n     * @return {@code true} \u4e3a\u5728\u5bb9\u5668\u4e2d\u542b\u6709\u8fd9\u4e2a {@code key}, \u5426\u5219\u4e3a {@code false}\n     */\n    @Override", "    public synchronized int size() {\n        return currentSize;\n    }\n\n    /**\n     * \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u6709\u5bf9\u5e94\u7684 {@code value} \u5e76\u4e14\u4e0d\u4e3a {@code null},\u5219\u8fd4\u56de true\n     *\n     * @param key \u7528\u6765\u6620\u5c04\u7684 {@code key}\n     * @return {@code true} \u4e3a\u5728\u5bb9\u5668\u4e2d\u542b\u6709\u8fd9\u4e2a {@code key}, \u5426\u5219\u4e3a {@code false}\n     */\n    @Override", "    public synchronized boolean containsKey(K key) {\n        return cache.containsKey(key);\n    }\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u4e2d\u542b\u6709\u7684\u6240\u6709 {@code key}\n     *\n     * @return {@code keySet}\n     */\n    @Override\n    public synchronized Set<K> keySet() {\n        return cache.keySet();\n    }\n\n    /**\n     * \u8fd4\u56de\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u5bf9\u5e94\u7684 {@code value}, \u5982\u679c\u8fd4\u56de {@code null} \u8bf4\u660e\u8fd9\u4e2a {@code key} \u6ca1\u6709\u5bf9\u5e94\u7684 {@code value}\n     *\n     * @param key \u7528\u6765\u6620\u5c04\u7684 {@code key}\n     * @return {@code value}\n     */\n    @Override", "    public synchronized Set<K> keySet() {\n        return cache.keySet();\n    }\n\n    /**\n     * \u8fd4\u56de\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u5bf9\u5e94\u7684 {@code value}, \u5982\u679c\u8fd4\u56de {@code null} \u8bf4\u660e\u8fd9\u4e2a {@code key} \u6ca1\u6709\u5bf9\u5e94\u7684 {@code value}\n     *\n     * @param key \u7528\u6765\u6620\u5c04\u7684 {@code key}\n     * @return {@code value}\n     */\n    @Override", "    public synchronized V get(K key) {\n        return cache.get(key);\n    }\n\n    /**\n     * \u5c06 {@code key} \u548c {@code value} \u4ee5\u6761\u76ee\u7684\u5f62\u5f0f\u52a0\u5165\u7f13\u5b58,\u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u5df2\u7ecf\u6709\u5bf9\u5e94\u7684 {@code value}\n     * \u5219\u6b64 {@code value} \u88ab\u65b0\u7684 {@code value} \u66ff\u6362\u5e76\u8fd4\u56de,\u5982\u679c\u4e3a {@code null} \u8bf4\u660e\u662f\u4e00\u4e2a\u65b0\u6761\u76ee\n     * <p>\n     * \u5982\u679c {@link #getItemSize} \u8fd4\u56de\u7684 size \u5927\u4e8e\u6216\u7b49\u4e8e\u7f13\u5b58\u6240\u80fd\u5141\u8bb8\u7684\u6700\u5927 size, \u5219\u4e0d\u80fd\u5411\u7f13\u5b58\u4e2d\u6dfb\u52a0\u6b64\u6761\u76ee\n     * \u6b64\u65f6\u4f1a\u56de\u8c03 {@link #onItemEvicted(Object, Object)} \u901a\u77e5\u6b64\u65b9\u6cd5\u5f53\u524d\u88ab\u9a71\u9010\u7684\u6761\u76ee\n     *\n     * @param key   \u901a\u8fc7\u8fd9\u4e2a {@code key} \u6dfb\u52a0\u6761\u76ee\n     * @param value \u9700\u8981\u6dfb\u52a0\u7684 {@code value}\n     * @return \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u5bb9\u5668\u4e2d\u5df2\u7ecf\u50a8\u5b58\u6709 {@code value}, \u5219\u8fd4\u56de\u4e4b\u524d\u7684 {@code value} \u5426\u5219\u8fd4\u56de {@code null}\n     */\n    @Override", "    public synchronized V put(K key, V value) {\n        final int itemSize = getItemSize(value);\n        if (itemSize >= maxSize) {\n            onItemEvicted(key, value);\n            return null;\n        }\n\n        final V result = cache.put(key, value);\n        if (value != null) {\n            currentSize += getItemSize(value);\n        }", "        if (value != null) {\n            currentSize += getItemSize(value);\n        }\n        if (result != null) {\n            currentSize -= getItemSize(result);\n        }\n        evict();\n\n        return result;\n    }\n\n    /**\n     * \u79fb\u9664\u7f13\u5b58\u4e2d\u8fd9\u4e2a {@code key} \u6240\u5bf9\u5e94\u7684\u6761\u76ee,\u5e76\u8fd4\u56de\u6240\u79fb\u9664\u6761\u76ee\u7684 {@code value}\n     * \u5982\u679c\u8fd4\u56de\u4e3a {@code null} \u5219\u6709\u53ef\u80fd\u65f6\u56e0\u4e3a\u8fd9\u4e2a {@code key} \u5bf9\u5e94\u7684 {@code value} \u4e3a {@code null} \u6216\u6761\u76ee\u4e0d\u5b58\u5728\n     *\n     * @param key \u4f7f\u7528\u8fd9\u4e2a {@code key} \u79fb\u9664\u5bf9\u5e94\u7684\u6761\u76ee\n     * @return \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u5bb9\u5668\u4e2d\u5df2\u7ecf\u50a8\u5b58\u6709 {@code value} \u5e76\u4e14\u5220\u9664\u6210\u529f\u5219\u8fd4\u56de\u5220\u9664\u7684 {@code value}, \u5426\u5219\u8fd4\u56de {@code null}\n     */\n    @Override", "    public synchronized V remove(K key) {\n        final V value = cache.remove(key);\n        if (value != null) {\n            currentSize -= getItemSize(value);\n        }\n        return value;\n    }\n\n    /**\n     * \u6e05\u9664\u7f13\u5b58\u4e2d\u6240\u6709\u7684\u5185\u5bb9\n     */\n    @Override", "    public void clear() {\n        trimToSize(0);\n    }\n\n    /**\n     * \u5f53\u6307\u5b9a\u7684 size \u5c0f\u4e8e\u5f53\u524d\u7f13\u5b58\u5df2\u5360\u7528\u7684\u603b size \u65f6,\u4f1a\u5f00\u59cb\u6e05\u9664\u7f13\u5b58\u4e2d\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6761\u76ee\n     *\n     * @param size {@code size}\n     */\n    protected synchronized void trimToSize(int size) {\n        Map.Entry<K, V> last;", "        while (currentSize > size) {\n            last = cache.entrySet().iterator().next();\n            final V toRemove = last.getValue();\n            currentSize -= getItemSize(toRemove);\n            final K key = last.getKey();\n            cache.remove(key);\n            onItemEvicted(key, toRemove);\n        }\n    }\n\n    /**\n     * \u5f53\u7f13\u5b58\u4e2d\u5df2\u5360\u7528\u7684\u603b size \u5927\u4e8e\u6240\u80fd\u5141\u8bb8\u7684\u6700\u5927 size ,\u4f1a\u4f7f\u7528  {@link #trimToSize(int)} \u5f00\u59cb\u6e05\u9664\u6ee1\u8db3\u6761\u4ef6\u7684\u6761\u76ee\n     */\n    private void evict() {\n        trimToSize(maxSize);\n    }\n}\n\n"]}
{"filename": "net/src/main/java/com/foundation/service/urlmanager/retrofiturlmanager/cache/Cache.java", "chunked_list": ["/*\n * Copyright 2017 JessYan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.foundation.service.urlmanager.retrofiturlmanager.cache;\n\nimport java.util.Set;", "\nimport java.util.Set;\n\n\n/**\n * ================================================\n * \u7f13\u5b58\n *\n * @see LruCache\n * Created by JessYan on 25/09/2017 16:36", " * @see LruCache\n * Created by JessYan on 25/09/2017 16:36\n * <a href=\"mailto:jess.yan.effort@gmail.com\">Contact me</a>\n * <a href=\"https://github.com/JessYanCoding\">Follow me</a>\n * ================================================\n */\npublic interface Cache<K, V> {\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u5df2\u5360\u7528\u7684\u603b size\n     *\n     * @return {@code size}\n     */\n    int size();\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u6240\u80fd\u5141\u8bb8\u7684\u6700\u5927 size\n     *\n     * @return {@code maxSize}\n     */\n    int getMaxSize();\n\n    /**\n     * \u8fd4\u56de\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u5bf9\u5e94\u7684 {@code value}, \u5982\u679c\u8fd4\u56de {@code null} \u8bf4\u660e\u8fd9\u4e2a {@code key} \u6ca1\u6709\u5bf9\u5e94\u7684 {@code value}\n     *\n     * @param key {@code key}\n     * @return {@code value}\n     */\n    V get(K key);\n\n    /**\n     * \u5c06 {@code key} \u548c {@code value} \u4ee5\u6761\u76ee\u7684\u5f62\u5f0f\u52a0\u5165\u7f13\u5b58,\u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u5df2\u7ecf\u6709\u5bf9\u5e94\u7684 {@code value}\n     * \u5219\u6b64 {@code value} \u88ab\u65b0\u7684 {@code value} \u66ff\u6362\u5e76\u8fd4\u56de,\u5982\u679c\u4e3a {@code null} \u8bf4\u660e\u662f\u4e00\u4e2a\u65b0\u6761\u76ee\n     *\n     * @param key   {@code key}\n     * @param value {@code value}\n     * @return \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u5bb9\u5668\u4e2d\u5df2\u7ecf\u50a8\u5b58\u6709 {@code value}, \u5219\u8fd4\u56de\u4e4b\u524d\u7684 {@code value} \u5426\u5219\u8fd4\u56de {@code null}\n     */\n    V put(K key, V value);\n\n    /**\n     * \u79fb\u9664\u7f13\u5b58\u4e2d\u8fd9\u4e2a {@code key} \u6240\u5bf9\u5e94\u7684\u6761\u76ee,\u5e76\u8fd4\u56de\u6240\u79fb\u9664\u6761\u76ee\u7684 value\n     * \u5982\u679c\u8fd4\u56de\u4e3a {@code null} \u5219\u6709\u53ef\u80fd\u65f6\u56e0\u4e3a\u8fd9\u4e2a {@code key} \u5bf9\u5e94\u7684 value \u4e3a {@code null} \u6216\u6761\u76ee\u4e0d\u5b58\u5728\n     *\n     * @param key {@code key}\n     * @return \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u5bb9\u5668\u4e2d\u5df2\u7ecf\u50a8\u5b58\u6709 {@code value} \u5e76\u4e14\u5220\u9664\u6210\u529f\u5219\u8fd4\u56de\u5220\u9664\u7684 {@code value}, \u5426\u5219\u8fd4\u56de {@code null}\n     */\n    V remove(K key);\n\n    /**\n     * \u5982\u679c\u8fd9\u4e2a {@code key} \u5728\u7f13\u5b58\u4e2d\u6709\u5bf9\u5e94\u7684 value \u5e76\u4e14\u4e0d\u4e3a {@code null}, \u5219\u8fd4\u56de {@code true}\n     *\n     * @param key {@code key}\n     * @return {@code true} \u4e3a\u5728\u5bb9\u5668\u4e2d\u542b\u6709\u8fd9\u4e2a {@code key}, \u5426\u5219\u4e3a {@code false}\n     */\n    boolean containsKey(K key);\n\n    /**\n     * \u8fd4\u56de\u5f53\u524d\u7f13\u5b58\u4e2d\u542b\u6709\u7684\u6240\u6709 {@code key}\n     *\n     * @return {@code keySet}\n     */\n    Set<K> keySet();\n\n    /**\n     * \u6e05\u9664\u7f13\u5b58\u4e2d\u6240\u6709\u7684\u5185\u5bb9\n     */\n    void clear();\n}\n"]}
{"filename": "simple/src/main/java/com/foundation/app/simple/utils/NetworkStatusUtils.java", "chunked_list": ["package com.foundation.app.simple.utils;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.Network;\nimport android.net.NetworkInfo;\nimport android.os.Build;\n\n/**", "\n/**\n * create by zhusw on 5/24/21 16:07\n */\npublic class NetworkStatusUtils {\n    public static void init(Application app) {\n\n    }\n\n    public static boolean networkIsConnected(Context context) {\n        if (null != context) {\n            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);", "    public static boolean networkIsConnected(Context context) {\n        if (null != context) {\n            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n            if (null != cm) {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                    Network[] networks = cm.getAllNetworks();\n                    boolean networkIsConnected = false;\n                    if (null != networks && networks.length > 0) {\n                        NetworkInfo networkInfo;\n                        for (int i = networks.length - 1; i >= 0; i--) {\n                            networkInfo = cm.getNetworkInfo(networks[i]);", "                        for (int i = networks.length - 1; i >= 0; i--) {\n                            networkInfo = cm.getNetworkInfo(networks[i]);\n                            if (networkInfo != null && networkInfo.isConnected()) {\n                                networkIsConnected = true;\n                                break;\n                            }\n                        }\n                    }\n                    return networkIsConnected;\n                } else {\n                    NetworkInfo networkInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n                    boolean isWifiConnected = networkInfo.isConnected();\n                    networkInfo = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n                    boolean isMobileConnected = networkInfo.isConnected();\n                    return isWifiConnected || isMobileConnected;\n                }\n            } else {\n                throw new NullPointerException(\"cann not obtain  ConnectivityManager,\" +\n                        \"check internet permission  or Mobile Phone Network Setting\");\n            }\n        }\n        return false;\n    }\n}\n"]}
{"filename": "simple/src/main/java/com/foundation/app/simple/vm/Test.java", "chunked_list": ["package com.foundation.app.simple.vm;\n\n/**\n * create by zhusw on 5/21/21 15:04\n */\npublic class Test {\n    public static int work() {\n        int i = 1;\n        return i + 1;\n    }\n}\n"]}
