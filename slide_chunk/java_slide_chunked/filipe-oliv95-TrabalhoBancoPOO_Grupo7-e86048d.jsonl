{"filename": "src/agencias/Agencia.java", "chunked_list": ["package agencias;\n\npublic class Agencia {\n\n\tprivate String numAgencia;\n\n\tpublic Agencia() {\n\n\t}\n\n\tpublic Agencia(String numAgencia) {\n\t\tthis.numAgencia = numAgencia;\n\t}\n", "\tpublic String getNumAgencia() {\n\t\treturn numAgencia;\n\t}\n\n\tpublic void setNumAgencia(String numAgencia) {\n\t\tthis.numAgencia = numAgencia;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn numAgencia;\n\t}\n}", "\tpublic String toString() {\n\t\treturn numAgencia;\n\t}\n}"]}
{"filename": "src/extratos/Extrato.java", "chunked_list": ["package extratos;\n\nimport java.time.LocalDate;\n\npublic class Extrato {\n\n\tprivate LocalDate data;\n\tprivate String tipoDeMovimentacao;\n\tprivate double valor;\n\t\n\tpublic Extrato() {\n\t}\n\n\tpublic Extrato(LocalDate data, String tipoMovimentacao, double valor) {\n\t\tsuper();\n\t\tthis.data = data;\n\t\tthis.tipoDeMovimentacao = tipoMovimentacao;\n\t\tthis.valor = valor;\n\t}\n\t\n", "\tpublic LocalDate getData() {\n\t\treturn data;\n\t}\n\n\tpublic void setData(LocalDate data) {\n\t\tthis.data = data;\n\t}\n\n\tpublic String getTipoDeMovimentacao() {\n\t\treturn tipoDeMovimentacao;\n\t}\n", "\tpublic String getTipoDeMovimentacao() {\n\t\treturn tipoDeMovimentacao;\n\t}\n\n\tpublic double getValor() {\n\t\treturn valor;\n\t}\n\n\tpublic void setValor(double valor) {\n\t\tthis.valor = valor;\n\t}\t\n\n\t@Override", "\tpublic void setValor(double valor) {\n\t\tthis.valor = valor;\n\t}\t\n\n\t@Override\n\tpublic String toString() {\n\t\treturn data + \"  |  \" +  tipoDeMovimentacao \n\t\t\t\t+ \"  |  R$ \" + String.format(\"%.2f\", valor);\n\t}\t\n}\n"]}
{"filename": "src/segurosDeVida/SeguroDeVida.java", "chunked_list": ["package segurosDeVida;\n\npublic abstract class SeguroDeVida {\n\n\tprivate final static double TAXA_SEGURO = 0.20;\n\tprivate static double valorSeguro;\n\tprivate static double valorSeguroAposTaxa;\n\t\n\tpublic SeguroDeVida(double valorSeguro) {\n\t\tsuper();\n\t}\n", "\tpublic static void setValorSeguroAposTaxa(double valorSeguroAposTaxa) {\n\t\tSeguroDeVida.valorSeguroAposTaxa = valorSeguroAposTaxa;\n\t}\n\n\tpublic static double getValorSeguro() {\n\t\treturn valorSeguro;\n\t}\n\n\tpublic static void setValorSeguro(double valorSeguro) {\n\t\tSeguroDeVida.valorSeguro = valorSeguro;\n\t}\n", "\tpublic static void setValorSeguro(double valorSeguro) {\n\t\tSeguroDeVida.valorSeguro = valorSeguro;\n\t}\n\n\tpublic static double getTaxaSeguro() {\n\t\treturn TAXA_SEGURO;\n\t}\n\n\tpublic static double getValorTributacao() {\n\n\t\treturn getValorSeguro() * TAXA_SEGURO;\n\t}\n", "\tpublic static double getValorTributacao() {\n\n\t\treturn getValorSeguro() * TAXA_SEGURO;\n\t}\n\n\tpublic static double getValorSeguroAposTaxa() {\n\t\tvalorSeguroAposTaxa = valorSeguro * (1 - TAXA_SEGURO);\n\t\treturn valorSeguroAposTaxa; \n\t}\n\n}"]}
{"filename": "src/io/Escritor.java", "chunked_list": ["package io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Collections;", "import java.time.format.DateTimeFormatter;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport agencias.Agencia;\nimport contas.Conta;\nimport contas.ContaCorrente;", "import contas.Conta;\nimport contas.ContaCorrente;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport pessoas.Diretor;\nimport pessoas.Funcionario;\nimport pessoas.Gerente;\nimport pessoas.enums.UsuariosEnum;", "import pessoas.Gerente;\nimport pessoas.enums.UsuariosEnum;\nimport principal.SistemaBancario;\nimport segurosDeVida.SeguroDeVida;\n\npublic class Escritor {\n\n\tstatic final String CAMINHO = \"./comprovantes/\";\n\tstatic String SUB_CAMINHO = null;\n\tstatic final String EXTENSAO = \".txt\";\n", "\tpublic static void comprovanteSaque(Conta conta, double valorSaque) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaque\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** SAQUE ***************\";\n\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor do saque: R$\" + valorSaque;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************ FIM DO SAQUE ************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void comprovanteDeposito(Conta conta, double valorDeposito) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteDeposito\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"***************** DEP\u00d3SITO *****************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorDeposito;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************* FIM DO DEP\u00d3SITO **************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void comprovanteTransferencia(Conta conta, Conta contaDestino, double valorTransferencia) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n*************** TRANSFER\u00caNCIA ***************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ DADOS DO REMETENTE *************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********** DADOS DO DESTINAT\u00c1RIO ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + contaDestino.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + contaDestino.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + contaDestino.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + contaDestino.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorTransferencia;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********** FIM DA TRANSFER\u00caNCIA ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void extratoConta(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n********************* EXTRATO *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tbw.append(\"\\n\");", "\t\t\tfor (Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {\n\t\t\t\tbw.append(listaMovimentacao.toString() + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");\n\n\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\tlinha = \"Total gasto em tributos = R$\"\n\t\t\t\t\t\t+ String.format(\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n", "\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor do Seguro de Vida = R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********************* FIM **************************\\n\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void comprovanteSaldo(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* SALDO *******************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************* FIM *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void relatorioTributacaoCC(ContaCorrente conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t+ \"relatorioTributacaoCC\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** TOTAL DE TRIBUTA\u00c7\u00d5ES *****************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de saques realizados = \" + conta.getTotalSaques();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dep\u00f3sitos realizados = \" + conta.getTotalDepositos();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");\n", "\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor segurado do Seguro de Vida = R$ \"\n\t\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void rendimentDaPoupanca(Conta conta, Cliente cliente, Double rendimento, int dias,\n\t\t\tdouble valorSimulado, double totalFinal) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******* Simula\u00e7\u00e3o de Rendimento da Poupan\u00e7a ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor simulado: R$ \" + String.format(\"%.2f\", valorSimulado);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dias: \" + dias;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O rendimento seria de: R$ \" + String.format(\"%.2f\", rendimento);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor final seria de: R$ \" + String.format(\"%.2f\", totalFinal);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void relatorioContasPorAgencia(Conta conta, Funcionario funcionario) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioContasPorAgencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tint totalContas = 0;\n\t\t\tString linha = \"****************** RESPONS\u00c1VEL **********************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ TOTAL DE CONTAS NA AG\u00caNCIA *************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n", "\t\t\tfor (String cpf : SistemaBancario.mapaDeContas.keySet()) {\n\t\t\t\tif (SistemaBancario.mapaDeContas.get(cpf).getAgencia().getNumAgencia()\n\t\t\t\t\t\t.equals(conta.getAgencia().getNumAgencia())) {\n\n\t\t\t\t\tlinha = \"CPF: \" + SistemaBancario.mapaDeContas.get(cpf).getCpf();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Ag\u00eancia : \" + SistemaBancario.mapaDeContas.get(cpf).getAgencia();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Conta: \" + SistemaBancario.mapaDeContas.get(cpf).getNumConta();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\ttotalContas++;\n\n\t\t\t\t\tlinha = \"*****************************************************\";\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlinha = \"Total de contas: \" + totalContas;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tbw.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "\tpublic static void relatorioClientes(List<Conta> contas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_relatorioDeClientes\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* Informa\u00e7\u00f5es dos Clientes *******************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tCollections.sort(contas);", "\t\t\tfor (Conta c : contas) {\n\t\t\t\tlinha = c.getAgencia().getNumAgencia() + \" - \" + c.getTitular();\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\t\t\tlinha = \"****************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "\tpublic static void relatorioCapitalBanco(List<Conta> listaContas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_\" + \"relatorioCapitalBanco\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\t\t\tdouble capitalTotalBanco = 0;\n\t\t\tString linha = \"******** TOTAL DE CAPITAL ARMAZENADO NO BANCO ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n", "\t\t\tfor (Conta lista : listaContas) {\n\t\t\t\tcapitalTotalBanco += lista.getSaldo();\n\t\t\t}\n\n\t\t\tlinha = \"Total do Capital armazenado no banco: R$ \" + capitalTotalBanco;\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void comprovanteSeguroDeVida(Conta conta, Cliente cliente) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSeguroDeVida\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** COMPROVANTE SEGURO DE VIDA ********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF = \" + Cliente.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor pago na contrata\u00e7\u00e3o do Seguro de Vida foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguro());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor segurado ap\u00f3s taxa\u00e7\u00e3o foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Voc\u00ea pagou de tarifa R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorTributacao());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void registroDeDadosAtualizados() throws IOException {\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(new FileWriter(\".\\\\database\\\\registrodedados.txt\"))) {\n\n\t\t\t// registrando as agencias\n\t\t\tSet<Agencia> set = new HashSet<>(SistemaBancario.listaAgencias);\n\t\t\tfor (Agencia ag : set) {\n\t\t\t\tbw.write(\"AGENCIA\" + \";\" + ag.getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\t\t\n\t\t\t// Loop pelo mapa de gerente", "\t\t\tfor (Map.Entry<String, Gerente> dadosG : SistemaBancario.mapaDeGerentes.entrySet()) {\n\t\t\t\tGerente gerente = dadosG.getValue();\n\t\t\t\tbw.write(gerente.getTipoDeUsuario().name() + \";\" + gerente.getNome() + \";\" + gerente.getCpf() + \";\"\n\t\t\t\t\t\t+ gerente.getSenha() + \";\" + gerente.getAgencia().getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de diretor\n\t\t\tfor (Map.Entry<String, Diretor> dadosD : SistemaBancario.mapaDeDiretores.entrySet()) {\n\t\t\t\tDiretor diretor = dadosD.getValue();\n\t\t\t\tbw.write(diretor.getTipoDeUsuario().name() + \";\" + diretor.getNome() + \";\" + diretor.getCpf() + \";\"\n\t\t\t\t\t\t+ diretor.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de presidente", "\t\t\tfor (Map.Entry<String, Diretor> dadosD : SistemaBancario.mapaDeDiretores.entrySet()) {\n\t\t\t\tDiretor diretor = dadosD.getValue();\n\t\t\t\tbw.write(diretor.getTipoDeUsuario().name() + \";\" + diretor.getNome() + \";\" + diretor.getCpf() + \";\"\n\t\t\t\t\t\t+ diretor.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de presidente\n\t\t\tfor (Map.Entry<String, Funcionario> dadosP : SistemaBancario.mapaDeFuncionarios.entrySet()) {\n\t\t\t\tFuncionario presidente = dadosP.getValue();\n\t\t\t\tif (presidente.getTipoDeUsuario() == UsuariosEnum.PRESIDENTE) {\n\t\t\t\t\tbw.write(presidente.getTipoDeUsuario().name() + \";\" + presidente.getNome() + \";\"\n\t\t\t\t\t\t\t+ presidente.getCpf() + \";\" + presidente.getSenha());\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de cliente", "\t\t\tfor (Map.Entry<String, Funcionario> dadosP : SistemaBancario.mapaDeFuncionarios.entrySet()) {\n\t\t\t\tFuncionario presidente = dadosP.getValue();\n\t\t\t\tif (presidente.getTipoDeUsuario() == UsuariosEnum.PRESIDENTE) {\n\t\t\t\t\tbw.write(presidente.getTipoDeUsuario().name() + \";\" + presidente.getNome() + \";\"\n\t\t\t\t\t\t\t+ presidente.getCpf() + \";\" + presidente.getSenha());\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de cliente\n\t\t\tfor (Map.Entry<String, Cliente> dadosClie : SistemaBancario.mapaDeClientes.entrySet()) {\n\t\t\t\tCliente cliente = dadosClie.getValue();\n\t\t\t\tbw.write(cliente.getTipoDeUsuario().name() + \";\" + cliente.getNome() + \";\" + cliente.getCpf() + \";\"\n\t\t\t\t\t\t+ cliente.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de contas", "\t\t\tfor (Map.Entry<String, Cliente> dadosClie : SistemaBancario.mapaDeClientes.entrySet()) {\n\t\t\t\tCliente cliente = dadosClie.getValue();\n\t\t\t\tbw.write(cliente.getTipoDeUsuario().name() + \";\" + cliente.getNome() + \";\" + cliente.getCpf() + \";\"\n\t\t\t\t\t\t+ cliente.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t// Loop pelo mapa de contas\n\t\t\tfor (Map.Entry<String, Conta> entrada : SistemaBancario.mapaDeContas.entrySet()) {\n\t\t\t\tConta conta = entrada.getValue();\n\n\t\t\t\t// Checando se a conta \u00e9 POUPANCA ou CORRENTE", "\t\t\tfor (Map.Entry<String, Conta> entrada : SistemaBancario.mapaDeContas.entrySet()) {\n\t\t\t\tConta conta = entrada.getValue();\n\n\t\t\t\t// Checando se a conta \u00e9 POUPANCA ou CORRENTE\n\t\t\t\tif (conta.getTipoDeConta() == ContasEnum.POUPANCA || conta.getTipoDeConta() == ContasEnum.CORRENTE) {\n\n\t\t\t\t\t// Escrevendo detalhes da conta com o saldo atualizado\n\t\t\t\t\tbw.write(conta.getTipoDeConta().name() + \";\" + conta.getAgencia().getNumAgencia() + \";\"\n\t\t\t\t\t\t\t+ conta.getNumConta() + \";\" + conta.getTitular().getTipoDeUsuario().name()+ \";\" + conta.getTitular().getNome()\n\t\t\t\t\t\t\t+ \";\" + conta.getCpf() + \";\" + conta.getTitular().getSenha() + \";\"\n\t\t\t\t\t\t\t+ conta.getCpf() + \";\" + String.format(\"%.2f\", conta.getSaldo()));\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "src/io/Leitor.java", "chunked_list": ["package io;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nimport agencias.Agencia;\nimport contas.ContaCorrente;\nimport contas.ContaPoupanca;\nimport contas.enums.ContasEnum;", "import contas.ContaPoupanca;\nimport contas.enums.ContasEnum;\nimport pessoas.Cliente;\nimport pessoas.Diretor;\nimport pessoas.Gerente;\nimport pessoas.Presidente;\nimport pessoas.enums.UsuariosEnum;\nimport principal.SistemaBancario;\n\npublic class Leitor {\n\tpublic static void leitura(String path) {\n\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(path))) {\n\n\t\t\tString linha = \"\";\n", "\npublic class Leitor {\n\tpublic static void leitura(String path) {\n\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(path))) {\n\n\t\t\tString linha = \"\";\n\n\t\t\twhile (true) {\n\n\t\t\t\tlinha = br.readLine();", "\t\t\twhile (true) {\n\n\t\t\t\tlinha = br.readLine();\n\t\t\t\tif (linha != null) {\n\n\t\t\t\t\tString[] vetor = linha.split(\";\");\n\n\t\t\t\t\tif (vetor[0].equalsIgnoreCase(\"AGENCIA\")) {\n\n\t\t\t\t\t\tAgencia agencia = new Agencia(vetor[1]);\n\t\t\t\t\t\tSistemaBancario.listaAgencias.add(agencia);\n", "\t\t\t\t\t} else if (vetor[0].equalsIgnoreCase(UsuariosEnum.GERENTE.name())) {\n\n\t\t\t\t\t\tGerente gerentes = new Gerente(UsuariosEnum.GERENTE, vetor[1], vetor[2],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[3]), new Agencia(vetor[4]));\n\t\t\t\t\t\tSistemaBancario.mapaDeGerentes.put(vetor[2], gerentes);\n\t\t\t\t\t\tSistemaBancario.mapaDeFuncionarios.put(vetor[2], gerentes);\n\n\t\t\t\t\t} else if (vetor[0].equalsIgnoreCase(UsuariosEnum.DIRETOR.name())) {\n\n\t\t\t\t\t\tDiretor diretores = new Diretor(UsuariosEnum.DIRETOR, vetor[1], vetor[2],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[3]));\n\t\t\t\t\t\tSistemaBancario.mapaDeDiretores.put(vetor[2], diretores);\n\t\t\t\t\t\tSistemaBancario.mapaDeFuncionarios.put(vetor[2], diretores);\n", "\t\t\t\t\t} else if (vetor[0].equalsIgnoreCase(UsuariosEnum.PRESIDENTE.name())) {\n\n\t\t\t\t\t\tPresidente presidente = new Presidente(UsuariosEnum.PRESIDENTE, vetor[1], vetor[2],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[3]));\n\t\t\t\t\t\tSistemaBancario.mapaDeFuncionarios.put(vetor[2], presidente);\n\n\t\t\t\t\t} else if (vetor[0].equalsIgnoreCase(UsuariosEnum.CLIENTE.name())) {\n\n\t\t\t\t\t\tCliente cliente = new Cliente(UsuariosEnum.CLIENTE, vetor[1], vetor[2],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[3]));\n\t\t\t\t\t\tSistemaBancario.mapaDeClientes.put(vetor[2], cliente);\n\n\t\t\t\t\t}\n", "\t\t\t\t\telse if (vetor[0].equalsIgnoreCase(ContasEnum.POUPANCA.name())) {\n\n\t\t\t\t\t\tCliente cliente = new Cliente(UsuariosEnum.CLIENTE, vetor[4], vetor[5],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[6]));\n\t\t\t\t\t\tContaPoupanca contas = new ContaPoupanca(ContasEnum.POUPANCA, new Agencia(vetor[1]), vetor[2],\n\t\t\t\t\t\t\t\tcliente, vetor[7], Double.parseDouble(vetor[8]));\n\t\t\t\t\t\tSistemaBancario.mapaDeContas.put(vetor[5], contas);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (vetor[0].equalsIgnoreCase(ContasEnum.CORRENTE.name())) {\n\t\t\t\t\t\tCliente cliente = new Cliente(UsuariosEnum.CLIENTE, vetor[4], vetor[5],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[6]));\n\t\t\t\t\t\tContaCorrente contas = new ContaCorrente(ContasEnum.CORRENTE, new Agencia(vetor[1]), vetor[2],\n\t\t\t\t\t\t\t\tcliente, vetor[7], Double.parseDouble(vetor[8]));\n\t\t\t\t\t\tSistemaBancario.mapaDeContas.put(vetor[5], contas);\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t} else\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro na leitura dos dados: \" + e.getMessage());\n\t\t}\n\t}\n}\n", "\t\t\t\t\telse if (vetor[0].equalsIgnoreCase(ContasEnum.CORRENTE.name())) {\n\t\t\t\t\t\tCliente cliente = new Cliente(UsuariosEnum.CLIENTE, vetor[4], vetor[5],\n\t\t\t\t\t\t\t\tInteger.parseInt(vetor[6]));\n\t\t\t\t\t\tContaCorrente contas = new ContaCorrente(ContasEnum.CORRENTE, new Agencia(vetor[1]), vetor[2],\n\t\t\t\t\t\t\t\tcliente, vetor[7], Double.parseDouble(vetor[8]));\n\t\t\t\t\t\tSistemaBancario.mapaDeContas.put(vetor[5], contas);\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t} else\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro na leitura dos dados: \" + e.getMessage());\n\t\t}\n\t}\n}\n"]}
{"filename": "src/relatorios/Relatorio.java", "chunked_list": ["package relatorios;\n\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport contas.Conta;", "\nimport contas.Conta;\nimport contas.ContaCorrente;\nimport contas.ContaPoupanca;\nimport io.Escritor;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport pessoas.Funcionario;\nimport pessoas.Gerente;\nimport principal.SistemaBancario;", "import pessoas.Gerente;\nimport principal.SistemaBancario;\nimport segurosDeVida.SeguroDeVida;\n\npublic class Relatorio {\n\n\tpublic static void imprimirSaldo(Conta conta) {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\t\tDate date = new Date();\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"******** Saldo na Conta ********\");\n\t\tSystem.out.println(\"Tipo de conta: \" + conta.getTipoDeConta().name());\n\t\tSystem.out.println(\"N\u00famero da conta: \" + conta.getNumConta());\n\t\tSystem.out.println(\"Saldo: \" + String.format(\"R$ %.2f\", conta.getSaldo()));\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"********************************\");\n\n\t\tEscritor.comprovanteSaldo(conta);\n\t}\n", "\tpublic static void tributacaoCC(ContaCorrente conta) {\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"****** Relat\u00f3rio de tributa\u00e7\u00e3o ******\");\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor de tarifa cobrado no saque: R$ \" + ContaCorrente.getTarifaSaque());\n\t\tSystem.out.println(\"Total de saques: \" + conta.getTotalSaques());\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());\n\t\tSystem.out.println(\"Total de dep\u00f3sitos: \" + conta.getTotalDepositos());\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());\n\t\tSystem.out.println(\"Total de transfer\u00eancias: \" + conta.getTotalTransferencias());\n\t\tSystem.out.println(\"**************************************\");\n\t\tSystem.out.println();\n\n\t\tdouble tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();\n\t\tdouble tarifaTotalDeposito = conta.getTotalDepositos() * ContaCorrente.getTarifaDeposito();\n\t\tdouble tarifaTotalTransferencia = conta.getTotalTransferencias() * ContaCorrente.getTarifaTransferencia();\n\n\t\tSystem.out.println(\"Total de tarifas cobradas em saques: R$\" + tarifaTotalSaque);\n\t\tSystem.out.println(\"Total de tarifas cobradas em dep\u00f3sitos: R$\" + tarifaTotalDeposito);\n\t\tSystem.out.println(\"Total de tarifas cobradas em transfer\u00eancias: R$\" + tarifaTotalTransferencia);\n\t\tdouble somaTarifas = tarifaTotalSaque + tarifaTotalDeposito + tarifaTotalTransferencia;\n\t\tSystem.out.println(\"Soma de todas as tarifas: R$\" + somaTarifas);\n\t\tSystem.out.println();\n", "\t\tif (Menu.contratoSeguro == true) {\n\t\t\tSystem.out.printf(\"O valor adicionado para seu seguro foi de: R$%.2f%n\",\n\t\t\t\t\tSeguroDeVida.getValorSeguroAposTaxa());\n\t\t}\n\t}\n\n\tpublic static void simularRendimentoPoupanca(Conta conta, Cliente cliente) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"****** Simula\u00e7\u00e3o de Rendimento da Poupan\u00e7a ******\");\n\t\tDouble valorSimulado = 0.0;\n\t\tInteger dias = 0;\n\t\tdo {\n\t\t\tSystem.out.print(\"Qual valor deseja simular: R$ \");\n\t\t\tvalorSimulado = sc.nextDouble();", "\t\t\tif (valorSimulado < 0 || valorSimulado == null)\n\t\t\t\tSystem.out.println(\"Insira um valor positivo em reais. \\n\");\n\t\t} while (valorSimulado < 0);\n\n\t\tdo {\n\t\t\tSystem.out.printf(\"Quantos dias deseja saber o rendimento: \");\n\t\t\tdias = sc.nextInt();\n\t\t\tif (dias < 0)\n\t\t\t\tSystem.out.println(\"Insira um valor positivo de dias. \\n\");\n\t\t} while (dias < 0 || dias == null);\n\t\tDouble rendimento = valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);\n\t\tdouble totalFinal = valorSimulado + rendimento;\n\n\t\tSystem.out.printf(\"O rendimento para o prazo informado: R$ %.2f%n\", rendimento);\n\t\tSystem.out.printf(\"Valor final ficaria: R$ %.2f\", totalFinal);\n\t\tEscritor.rendimentDaPoupanca(conta, cliente, rendimento, dias, valorSimulado, totalFinal);\n\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"**************************************************\");\n", "\t\t} while (dias < 0 || dias == null);\n\t\tDouble rendimento = valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);\n\t\tdouble totalFinal = valorSimulado + rendimento;\n\n\t\tSystem.out.printf(\"O rendimento para o prazo informado: R$ %.2f%n\", rendimento);\n\t\tSystem.out.printf(\"Valor final ficaria: R$ %.2f\", totalFinal);\n\t\tEscritor.rendimentDaPoupanca(conta, cliente, rendimento, dias, valorSimulado, totalFinal);\n\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"**************************************************\");\n", "\t\ttry {\n\t\t\tMenu.menuRelatorio(conta, cliente);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tsc.close();\n\n\t}\n", "\tpublic static void numDeContasNaAgencia(Conta conta, String cpf, Funcionario funcionario) throws IOException {\n\t\tint totalContas = 0;\n\t\tGerente gerente = SistemaBancario.mapaDeGerentes.get(cpf);\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"****** Contas na ag\u00eancia do Gerente ******\");\n\t\ttry {\n\t\t\tif (gerente.getCpf().equals(cpf)) {\n\t\t\t\tfor (String cpfConta : SistemaBancario.mapaDeContas.keySet()) {\n\t\t\t\t\tif (SistemaBancario.mapaDeContas.get(cpfConta).getAgencia().getNumAgencia()\n\t\t\t\t\t\t\t.equals(gerente.getAgencia().getNumAgencia())) {\n\t\t\t\t\t\tSystem.out.println(SistemaBancario.mapaDeContas.get(cpfConta));\n\t\t\t\t\t\ttotalContas++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Total de contas na ag\u00eancia : \" + totalContas);\n\t\t\t\tSystem.out.println(\"******************************************\");\n\t\t\t\tEscritor.relatorioContasPorAgencia(conta, funcionario);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t}\n", "\t\t\t\t\tif (SistemaBancario.mapaDeContas.get(cpfConta).getAgencia().getNumAgencia()\n\t\t\t\t\t\t\t.equals(gerente.getAgencia().getNumAgencia())) {\n\t\t\t\t\t\tSystem.out.println(SistemaBancario.mapaDeContas.get(cpfConta));\n\t\t\t\t\t\ttotalContas++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Total de contas na ag\u00eancia : \" + totalContas);\n\t\t\t\tSystem.out.println(\"******************************************\");\n\t\t\t\tEscritor.relatorioContasPorAgencia(conta, funcionario);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t}\n", "\tpublic static void informacoesClientes(List<Conta> contas, Conta conta, Funcionario funcionario)\n\t\t\tthrows IOException {\n\t\tSystem.out.println(\"*************** Informa\u00e7\u00f5es dos Clientes *****************\");\n\t\tCollections.sort(contas);\n\t\tfor (Conta c : contas) {\n\t\t\tSystem.out.printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());\n\t\t}\n\t\tSystem.out.println(\"**********************************************************\");\n\t\tSystem.out.println();\n\n\t\tEscritor.relatorioClientes(contas, conta, funcionario);\n\t}\n", "\tpublic static void valorTotalCapitalBanco(List<Conta> listaContas, Conta conta, Funcionario funcionario) {\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"********* Consulta do Capital do Banco ***********\");\n\t\tdouble capitalBancoSaldo = 0;\n\t\tfor (Conta lista : listaContas) {\n\t\t\tcapitalBancoSaldo += lista.getSaldo();\n\t\t}\n\t\tSystem.out.printf(\"Total em saldo: R$ %.2f%n\", capitalBancoSaldo);\n\n\t\tSystem.out.println(\"**************************************************\");\n\t\tEscritor.relatorioCapitalBanco(listaContas, conta, funcionario);\n\t}\n", "\tpublic static void SeguroDeVida(Conta conta, Cliente cliente) {\n\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"*********** Seguro de vida ***********\");\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"NOME : \" + cliente.getNome());\n\t\tSystem.out.println(\"CPF : \" + Cliente.imprimeCPF(cliente.getCpf()));\n\t\tSystem.out.printf(\"O valor debitado do seu saldo foi de: R$ %.2f%n\", SeguroDeVida.getValorSeguro());\n\t\tSystem.out.printf(\"O valor segurado foi de: R$ %.2f%n\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\tSystem.out.printf(\"Voc\u00ea pagou R$ %.2f de tarifa.\", SeguroDeVida.getValorTributacao());\n\n\t\tSystem.out.println(\"\\n\\n**************************************\");\n\n\t\tEscritor.comprovanteSeguroDeVida(conta, cliente);\n\t}\n}\n"]}
{"filename": "src/pessoas/Gerente.java", "chunked_list": ["package pessoas;\n\nimport agencias.Agencia;\nimport pessoas.enums.UsuariosEnum;\n\npublic class Gerente extends Funcionario {\n\n    private Agencia agencia;\n    \n    public Gerente() {\n        super();\n    }\n    \n    public Gerente(Agencia agencia) {\n        super();\n        this.agencia = agencia;\n    }\n    \n    public Gerente(UsuariosEnum tipoDeUsuario,String nome, String cpf, Integer senha, Agencia agencia) {\n        super(tipoDeUsuario, nome, cpf, senha);\n        this.agencia = agencia;\n    }        \n", "    public Agencia getAgencia() {\n        return agencia;\n    }\n\n    public void setAgencia(Agencia agencia) {\n        this.agencia = agencia;\n    }    \n    \n\n    @Override\n    public String toString() {\n        return \"Nome = \" + getNome() \n                + \", Cpf = \" + imprimeCPF(getCpf())\n                + \", Agencia = \" + agencia\n                + \", Cargo = \" + getTipoDeUsuario();                \n    }    \n}", "    public String toString() {\n        return \"Nome = \" + getNome() \n                + \", Cpf = \" + imprimeCPF(getCpf())\n                + \", Agencia = \" + agencia\n                + \", Cargo = \" + getTipoDeUsuario();                \n    }    \n}"]}
{"filename": "src/pessoas/Funcionario.java", "chunked_list": ["package pessoas;\n\nimport pessoas.enums.UsuariosEnum;\n\npublic abstract class Funcionario extends Usuario {\n\n\tpublic Funcionario() {\n\t\t\n\t}\t\t\n\t\t\n\tpublic Funcionario(UsuariosEnum tipoDeUsuario, String nome, String cpf, Integer senha) {\n\t\tsuper(tipoDeUsuario, nome, cpf, senha);\n\t}\n\t", "\tpublic static String imprimeCPF(String CPF) {\n        return(CPF.substring(0, 3) + \".\" + CPF.substring(3, 6) + \".\" +\n        CPF.substring(6, 9) + \"-\" + CPF.substring(9, 11));\n    }\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getNome() + \", cpf = \" + imprimeCPF(getCpf())\n\t\t\t\t+ \", Cargo = \" + getTipoDeUsuario();\n\t}\n}\n"]}
{"filename": "src/pessoas/Cliente.java", "chunked_list": ["package pessoas;\n\nimport pessoas.enums.UsuariosEnum;\n\npublic class Cliente extends Usuario {\n\n\tpublic Cliente () {\n\t\t\n\t}\n\n\tpublic Cliente(UsuariosEnum tipoDeUsuario, String nome, String cpf, Integer senha) {\n\t\tsuper(tipoDeUsuario, nome, cpf, senha);\n\t}\n", "\tpublic static String imprimeCPF(String CPF) {\n        return(CPF.substring(0, 3) + \".\" + CPF.substring(3, 6) + \".\" +\n        CPF.substring(6, 9) + \"-\" + CPF.substring(9, 11));\n    }\n\t\n\tpublic int compareTo(Cliente titular) {\n\t\tif (this.getNome().compareTo(titular.getNome()) > 0) { // compara pelo nome\n\t\t\treturn -1; \n\t\t}\n\t\tif (this.getNome().compareTo(titular.getNome()) < 0) {\n\t\t\treturn 1;\n\t\t} \n\t\treturn 0;\n\t}\n\t\n\t@Override", "\t\tif (this.getNome().compareTo(titular.getNome()) < 0) {\n\t\t\treturn 1;\n\t\t} \n\t\treturn 0;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn getNome() + \" | CPF = \" + imprimeCPF(getCpf());\n\t}\n}\n"]}
{"filename": "src/pessoas/Diretor.java", "chunked_list": ["package pessoas;\n\nimport pessoas.enums.UsuariosEnum;\n\npublic class Diretor extends Funcionario {\n\n\tpublic Diretor() {\n\t\tsuper();\n\t}\n\t\n\tpublic Diretor(UsuariosEnum tipoDeUsuario, String nome, String cpf, Integer senha) {\n\t\tsuper(tipoDeUsuario, nome, cpf, senha);\n\t}\n\n\t@Override", "\tpublic String toString() {\n\t\treturn \"Nome = \" + getNome() \n\t\t\t\t+ \", CPF = \" + imprimeCPF(getCpf())\n\t\t\t\t+ \", Cargo = \" + getTipoDeUsuario();\n\t}\n}\n"]}
{"filename": "src/pessoas/Presidente.java", "chunked_list": ["package pessoas;\n\nimport pessoas.enums.UsuariosEnum;\n\npublic class Presidente extends Funcionario {\n\n\tpublic Presidente() {\n\t\tsuper();\n\t}\n\n\tpublic Presidente(UsuariosEnum tipoDeUsuario, String nome, String cpf, Integer senha) {\n\t\tsuper(tipoDeUsuario, nome, cpf, senha);\n\t}\n\n\t\n\t@Override", "\tpublic String toString() {\n\t\treturn \"Nome =\" + getNome() \n\t\t\t\t\t+ \", CPF = \" + imprimeCPF(getCpf()) \n\t\t\t\t\t+ \", Cargo = \" + getTipoDeUsuario();\n\t}\t\n}\n"]}
{"filename": "src/pessoas/Usuario.java", "chunked_list": ["package pessoas;\n\nimport pessoas.enums.UsuariosEnum;\n\npublic abstract class Usuario {\n\n\tprivate String nome;\n\tprivate String cpf;\n\tprivate Integer senha;\n\tprivate UsuariosEnum tipoDeUsuario;\n\t\n\tpublic Usuario() {\n\t\tsuper();\n\t}\n\n\tpublic Usuario(String nome, String cpf) {\n\t\tsuper();\n\t\tthis.nome = nome;\n\t\tthis.cpf = cpf;\n\t}\n\t\n\tpublic Usuario(UsuariosEnum tipoDeUsuario, String nome, String cpf, Integer senha) {\n\t\tthis.tipoDeUsuario = tipoDeUsuario;\n\t\tthis.nome = nome;\n\t\tthis.cpf = cpf;\n\t\tthis.senha = senha;\n\t}\n", "\tpublic String getNome() {\n\t\treturn nome;\n\t}\n\n\tpublic void setNome(String nome) {\n\t\tthis.nome = nome;\n\t}\n\n\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n", "\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tthis.cpf = cpf;\n\t}\t\n\n\tpublic Integer getSenha() {\n\t\treturn senha;\n\t}\n", "\tpublic Integer getSenha() {\n\t\treturn senha;\n\t}\n\n\tpublic void setSenha(Integer senha) {\n\t\tthis.senha = senha;\n\t}\n\n\tpublic UsuariosEnum getTipoDeUsuario() {\n\t\treturn tipoDeUsuario;\n\t}\n", "\tpublic UsuariosEnum getTipoDeUsuario() {\n\t\treturn tipoDeUsuario;\n\t}\n\n\tpublic void setTipoDeUsuario(UsuariosEnum tipoDeUsuario) {\n\t\tthis.tipoDeUsuario = tipoDeUsuario;\n\t}\t\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Nome=\" + nome + \", cpf=\" + cpf \n\t\t\t\t\t+ \", tipoDeUsuario=\" + tipoDeUsuario;\n\t}\t\n}\n", "\tpublic String toString() {\n\t\treturn \"Nome=\" + nome + \", cpf=\" + cpf \n\t\t\t\t\t+ \", tipoDeUsuario=\" + tipoDeUsuario;\n\t}\t\n}\n"]}
{"filename": "src/pessoas/enums/UsuariosEnum.java", "chunked_list": ["package pessoas.enums;\n\npublic enum UsuariosEnum { // TESTE\n\n\tCLIENTE(\"Cliente\", 1),\n\tFUNCIONARIO(\"Funcion\u00e1rio\", 2),\n\tGERENTE(\"Gerente\", 3),\n\tDIRETOR(\"Diretor\", 4),\n\tPRESIDENTE(\"Presidente\", 5);\n\n\tprivate final String tipoPessoa;\n\tprivate final Integer idPessoa;\n\t\n\tUsuariosEnum(String tipo, int id) {\n\t\tthis.tipoPessoa = tipo;\n\t\tthis.idPessoa = id;\n\t}\n\t", "\tpublic String getTipoPessoa() {\n\t\treturn tipoPessoa;\n\t}\n\n\tpublic Integer getIdPessoa() {\n\t\treturn idPessoa;\n\t}\n\t\n}\n"]}
{"filename": "src/contas/ContaCorrente.java", "chunked_list": ["package contas;\n\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Date;\n\nimport agencias.Agencia;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport menus.Menu;", "import extratos.Extrato;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport relatorios.Relatorio;\nimport segurosDeVida.SeguroDeVida;\n\npublic class ContaCorrente extends Conta {\n\n\tprivate final static double TARIFA_SAQUE = 0.1;\n\tprivate final static double TARIFA_DEPOSITO = 0.1;\n\tprivate final static double TARIFA_TRANSFERENCIA = 0.2;\n\tprivate double totalSaques;\n\tprivate double totalDepositos;\n\tprivate double totalTransferencias;\n\n\tpublic ContaCorrente() {\n\t\tsuper();\n\t}\n\n\tpublic ContaCorrente(ContasEnum tipoDeConta, Agencia agencia, String numConta, Cliente titular, String cpf,\n\t\t\tdouble saldoInicial) {\n\t\tsuper(tipoDeConta, agencia, numConta, titular, cpf, saldoInicial);\n\t}\n", "\tpublic double getTotalSaques() {\n\t\treturn totalSaques;\n\t}\n\n\tpublic void setTotalSaques(double totalSaques) {\n\t\tthis.totalSaques = totalSaques;\n\t}\n\n\tpublic double getTotalDepositos() {\n\t\treturn totalDepositos;\n\t}\n", "\tpublic double getTotalDepositos() {\n\t\treturn totalDepositos;\n\t}\n\n\tpublic void setTotalDepositos(double totalDepositos) {\n\t\tthis.totalDepositos = totalDepositos;\n\t}\n\n\tpublic double getTotalTransferencias() {\n\t\treturn totalTransferencias;\n\t}\n", "\tpublic double getTotalTransferencias() {\n\t\treturn totalTransferencias;\n\t}\n\n\tpublic void setTotalTransferencias(double totalTransferencias) {\n\t\tthis.totalTransferencias = totalTransferencias;\n\t}\n\n\tpublic static double getTarifaSaque() {\n\t\treturn TARIFA_SAQUE;\n\t}\n", "\tpublic static double getTarifaSaque() {\n\t\treturn TARIFA_SAQUE;\n\t}\n\n\tpublic static double getTarifaDeposito() {\n\t\treturn TARIFA_DEPOSITO;\n\t}\n\n\tpublic static double getTarifaTransferencia() {\n\t\treturn TARIFA_TRANSFERENCIA;\n\t}\n", "\tpublic static double getTarifaTransferencia() {\n\t\treturn TARIFA_TRANSFERENCIA;\n\t}\n\n\tpublic double getTotalTarifas() {\n\t\tdouble totalTarifaDeposito = TARIFA_DEPOSITO * totalDepositos;\n\t\tdouble totalTarifaSaque = TARIFA_SAQUE * totalSaques;\n\t\tdouble totalTarifaTransferencia = TARIFA_TRANSFERENCIA * totalTransferencias;\n\t\tdouble totalTarifas = totalTarifaDeposito + totalTarifaSaque + totalTarifaTransferencia;\n\t\treturn totalTarifas;\n\t}\n\n\t@Override", "\tpublic void sacar(double valor, Conta conta) {\n\t\tif (this.saldo < valor + TARIFA_SAQUE) {\n\t\t\tSystem.out.println(\"Saldo insuficiente\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor + TARIFA_SAQUE;\n\t\t\ttotalSaques++;\n\t\t\tSystem.out.println(\"Saque realizado com sucesso.\");\n\t\t\tExtrato saque = new Extrato(LocalDate.now(), \"Saque\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(saque);\n\t\t}\n\t}\n", "\tpublic void debitarSeguro(double valor, Conta conta, Cliente cliente) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Saldo insuficiente\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tExtrato seguroVida = new Extrato(LocalDate.now(), \"Seguro de Vida\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(seguroVida);\n\t\t\tRelatorio.SeguroDeVida(conta, cliente);\n\t\t}\n\t}\n\n\t@Override", "\tpublic void depositar(double valor, Conta conta) {\n\t\tif (valor > 0) {\n\t\t\tsaldo += valor - TARIFA_DEPOSITO;\n\t\t\ttotalDepositos++;\n\t\t\tExtrato deposito = new Extrato(LocalDate.now(), \"Dep\u00f3sito\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(deposito);\n\t\t} else {\n\t\t\tSystem.out.println(\"Valor inv\u00e1lido\");\n\t\t}\n\t}\n\n\t@Override", "\tpublic void transferir(Conta contaDestino, double valor, Conta conta) {\n\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Seu saldo \u00e9 insuficiente!\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= (valor + TARIFA_TRANSFERENCIA);\n\t\t\tcontaDestino.saldo += valor;\n\t\t\ttotalTransferencias++;\n\t\t\tExtrato transferencia = new Extrato(LocalDate.now(), \"Transfer\u00eacia\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(transferencia);\n\t\t}\n\t}\n\n\t@Override", "\tpublic void imprimeExtrato(Conta conta) {\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"**************** Extrato da Conta Corrente ****************\");\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\t\tDate date = new Date();\n\t\tSystem.out.println(\"Titular: \" + this.getTitular().getNome() + \", CPF: \" + Cliente.imprimeCPF(getCpf()));\n\t\tSystem.out.println(\"Ag\u00eancia: \" + getAgencia().getNumAgencia() + \", N\u00famero da conta: \" + getNumConta());\n\t\tSystem.out.println();\n\n\t\tfor (Extrato cc : getlistaDeMovimentacoes()) {\n\t\t\tSystem.out.println(cc);\n\t\t}\n\n\t\tSystem.out.printf(\"Total gasto em tributos = R$ %.2f%n\", ((ContaCorrente) conta).getTotalTarifas());\n", "\t\tfor (Extrato cc : getlistaDeMovimentacoes()) {\n\t\t\tSystem.out.println(cc);\n\t\t}\n\n\t\tSystem.out.printf(\"Total gasto em tributos = R$ %.2f%n\", ((ContaCorrente) conta).getTotalTarifas());\n\n\t\tif (Menu.contratoSeguro == true) {\n\t\t\tSystem.out.printf(\"O valor do seguro ap\u00f3s tributa\u00e7\u00e3o = R$ %.2f%n\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t}\n\n\t\tSystem.out.println();\n\t\tSystem.out.printf(\"Saldo atualizado: R$ %.2f%n\", conta.getSaldo());\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"**********************************************************\");\n\t}\n\n\t@Override", "\tpublic String toString() {\n\t\treturn \"Agencia = \" + getAgencia() + \", Titular = \" + getTitular() + \", Numero = \" + getNumConta()\n\t\t\t\t+ \", Saldo = \" + getSaldo();\n\t}\n\n}"]}
{"filename": "src/contas/ContaPoupanca.java", "chunked_list": ["package contas;\n\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Date;\n\nimport agencias.Agencia;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport pessoas.Cliente;", "import extratos.Extrato;\nimport pessoas.Cliente;\n\npublic class ContaPoupanca extends Conta {\n\n\tprivate static final double TAXA_RENDIMENTO_MES = 0.005;\n\n\tpublic ContaPoupanca() {\n\t\tsuper();\n\t}\n\n\tpublic ContaPoupanca(ContasEnum tipoDeConta, Agencia agencia, String numConta, Cliente titular, String cpf,\n\t\t\tdouble saldoInicial) {\n\t\tsuper(tipoDeConta, agencia, numConta, titular, cpf, saldoInicial);\n\t}\n", "\tpublic static double getTaxaRendimento() {\n\t\treturn TAXA_RENDIMENTO_MES;\n\t}\n\n\t@Override\n\tpublic void debitarSeguro(double valor, Conta conta, Cliente cliente) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Saldo insuficiente\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t}\n\t}\n\n\t@Override", "\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void imprimeExtrato(Conta conta) {\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"************* Extrato da Conta Poupan\u00e7a *************\");\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\t\tDate date = new Date();\n\t\tSystem.out.println(\"Titular: \" + this.getTitular().getNome() + \", CPF: \" + Cliente.imprimeCPF(getCpf()));\n\t\tSystem.out.println(\"Ag\u00eancia: \" + getAgencia().getNumAgencia() + \", N\u00famero da conta: \" + getNumConta());\n\t\tSystem.out.println();", "\tpublic void imprimeExtrato(Conta conta) {\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"************* Extrato da Conta Poupan\u00e7a *************\");\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\t\tDate date = new Date();\n\t\tSystem.out.println(\"Titular: \" + this.getTitular().getNome() + \", CPF: \" + Cliente.imprimeCPF(getCpf()));\n\t\tSystem.out.println(\"Ag\u00eancia: \" + getAgencia().getNumAgencia() + \", N\u00famero da conta: \" + getNumConta());\n\t\tSystem.out.println();\n\t\tfor (Extrato cc : getlistaDeMovimentacoes()) {\n\t\t\tSystem.out.println(cc);\n\t\t}\n\t\tSystem.out.println();\n\t\tSystem.out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"****************************************************\");\n\t}\n\n\t@Override", "\t\tfor (Extrato cc : getlistaDeMovimentacoes()) {\n\t\t\tSystem.out.println(cc);\n\t\t}\n\t\tSystem.out.println();\n\t\tSystem.out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());\n\t\tSystem.out.println(\"Data: \" + sdf.format(date));\n\t\tSystem.out.println(\"****************************************************\");\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Agencia = \" + getAgencia() + \", Titular = \" + getTitular() + \", Numero = \" + getNumConta()\n\t\t\t\t+ \", Saldo = \" + getSaldo();\n\t}\n\n\t@Override", "\tpublic String toString() {\n\t\treturn \"Agencia = \" + getAgencia() + \", Titular = \" + getTitular() + \", Numero = \" + getNumConta()\n\t\t\t\t+ \", Saldo = \" + getSaldo();\n\t}\n\n\t@Override\n\tpublic void sacar(double valor, Conta conta) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Saldo insuficiente\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tSystem.out.println(\"Saque realizado com sucesso.\");\n\t\t\tExtrato saque = new Extrato(LocalDate.now(), \"Saque\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(saque);\n\t\t}\n\n\t}\n\n\t@Override", "\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tSystem.out.println(\"Saque realizado com sucesso.\");\n\t\t\tExtrato saque = new Extrato(LocalDate.now(), \"Saque\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(saque);\n\t\t}\n\n\t}\n\n\t@Override", "\tpublic void transferir(Conta contaDestino, double valor, Conta conta) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Seu saldo \u00e9 insuficiente!\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tcontaDestino.saldo += valor;\n\t\t\tExtrato transferencia = new Extrato(LocalDate.now(), \"Transfer\u00eacia\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(transferencia);\n\t\t}\n\t}\n\n\t@Override", "\tpublic void depositar(double valor, Conta conta) {\n\t\tif (valor > 0) {\n\t\t\tsaldo += valor;\n\t\t\tExtrato deposito = new Extrato(LocalDate.now(), \"Dep\u00f3sito\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(deposito);\n\t\t} else {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t}\n\t}\n\n}"]}
{"filename": "src/contas/Conta.java", "chunked_list": ["package contas;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport agencias.Agencia;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport operacoes.Operacao;", "import extratos.Extrato;\nimport operacoes.Operacao;\nimport pessoas.Cliente;\n\npublic abstract class Conta implements Operacao, Comparable<Conta> {\n\n\tprivate Agencia agencia;\n\tprivate String numConta;\n\tprivate Cliente titular;\n\tprivate String cpf;\n\tprotected double saldo;\n\tprivate ContasEnum tipoDeConta;\n\n\tprivate List<Extrato> listaDeMovimentacoes = new ArrayList<>();\n\n\tpublic Conta() {\n\n\t}\n\n\tpublic Conta(ContasEnum tipoDeConta, Agencia agencia, String numConta, Cliente titular, String cpf, double saldo) {\n\t\tthis.tipoDeConta = tipoDeConta;\n\t\tthis.agencia = agencia;\n\t\tthis.numConta = numConta;\n\t\tthis.titular = titular;\n\t\tthis.cpf = cpf;\n\t\tthis.saldo = saldo;\n\t}\n", "\tpublic Agencia getAgencia() {\n\t\treturn agencia;\n\t}\n\n\tpublic void setAgencia(Agencia agencia) {\n\t\tthis.agencia = agencia;\n\t}\n\n\tpublic String getNumConta() {\n\t\treturn numConta;\n\t}\n", "\tpublic String getNumConta() {\n\t\treturn numConta;\n\t}\n\n\tpublic void setNumConta(String numConta) {\n\t\tthis.numConta = numConta;\n\t}\n\n\tpublic Cliente getTitular() {\n\t\treturn titular;\n\t}\n", "\tpublic Cliente getTitular() {\n\t\treturn titular;\n\t}\n\n\tpublic void setTitular(Cliente titular) {\n\t\tthis.titular = titular;\n\t}\n\n\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n", "\tpublic String getCpf() {\n\t\treturn cpf;\n\t}\n\n\tpublic void setCpf(String cpf) {\n\t\tthis.cpf = cpf;\n\t}\n\n\tpublic ContasEnum getTipoDeConta() {\n\t\treturn tipoDeConta;\n\t}\n", "\tpublic ContasEnum getTipoDeConta() {\n\t\treturn tipoDeConta;\n\t}\n\n\tpublic void setTipoDeConta(ContasEnum tipoDeConta) {\n\t\tthis.tipoDeConta = tipoDeConta;\n\t}\n\n\tpublic double getSaldo() {\n\t\treturn saldo;\n\t}\n\n\tpublic List<Extrato> getlistaDeMovimentacoes() {\n\t\treturn listaDeMovimentacoes;\n\t}\n", "\tpublic double getSaldo() {\n\t\treturn saldo;\n\t}\n\n\tpublic List<Extrato> getlistaDeMovimentacoes() {\n\t\treturn listaDeMovimentacoes;\n\t}\n\n\tpublic void depositar(double valor, Conta conta) {\n\t\tif (valor > 0) {\n\t\t\tsaldo += valor;\n\t\t\tExtrato deposito = new Extrato(LocalDate.now(), \"Dep\u00f3sito\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(deposito);\n\t\t} else {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t}\n\t}\n", "\tpublic void depositar(double valor, Conta conta) {\n\t\tif (valor > 0) {\n\t\t\tsaldo += valor;\n\t\t\tExtrato deposito = new Extrato(LocalDate.now(), \"Dep\u00f3sito\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(deposito);\n\t\t} else {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t}\n\t}\n\n\tpublic void sacar(double valor, Conta conta) {", "\tpublic void sacar(double valor, Conta conta) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Saldo insuficiente\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tSystem.out.println(\"Saque realizado com sucesso.\");\n\t\t\tExtrato saque = new Extrato(LocalDate.now(), \"Saque\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(saque);\n\t\t}\n\t}\n", "\tpublic void transferir(Conta contaDestino, double valor, Conta conta) {\n\t\tif (this.saldo < valor) {\n\t\t\tSystem.out.println(\"Seu saldo \u00e9 insuficiente!\");\n\t\t} else if (valor < 0) {\n\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t} else {\n\t\t\tthis.saldo -= valor;\n\t\t\tcontaDestino.saldo += valor;\n\t\t\tExtrato transferencia = new Extrato(LocalDate.now(), \"Transfer\u00eacia\", valor);\n\t\t\tconta.getlistaDeMovimentacoes().add(transferencia);\n\t\t}\n\t}\n", "\tpublic abstract void debitarSeguro(double valor, Conta conta, Cliente cliente);\n\n\tpublic String imprimeCPF(String CPF) {\n\t\treturn (CPF.substring(0, 3) + \".\" + CPF.substring(3, 6) + \".\" + CPF.substring(6, 9) + \"-\"\n\t\t\t\t+ CPF.substring(9, 11));\n\t}\n\n\t@Override\n\tpublic int compareTo(Conta cont) {\n\t\tif (this.getTitular().compareTo(cont.getTitular()) > 0) {\n\t\t\treturn -1;\n\t\t}", "\tpublic int compareTo(Conta cont) {\n\t\tif (this.getTitular().compareTo(cont.getTitular()) > 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (this.getTitular().compareTo(cont.getTitular()) < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic abstract void imprimeExtrato(Conta conta);\n\n\t@Override", "\tpublic abstract void imprimeExtrato(Conta conta);\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Numero = \" + getNumConta() + \", agencia = \" + agencia + \", titular = \" + titular + \", cpf = \" + cpf\n\t\t\t\t+ \", saldo = \" + saldo;\n\t}\n\n}\n"]}
{"filename": "src/contas/enums/ContasEnum.java", "chunked_list": ["package contas.enums;\n\npublic enum ContasEnum {  // TESTE\n\n\tCORRENTE(\"Conta Corrente\", 1),\n    POUPANCA(\"Poupan\u00e7a\", 2);\n\n    private final String tipoDeConta;\n    private final Integer idConta;\n\n    ContasEnum(String tipoDeConta, Integer idConta) {\n        this.tipoDeConta = tipoDeConta;\n        this.idConta = idConta;\n    }\n", "    public String getTipoConta() {\n        return this.tipoDeConta;\n    }\n\n    public Integer getIdConta() {\n        return this.idConta;\n    }\n}"]}
{"filename": "src/principal/SistemaBancario.java", "chunked_list": ["package principal;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Map;\n\nimport agencias.Agencia;", "\nimport agencias.Agencia;\nimport contas.Conta;\nimport io.Leitor;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport pessoas.Diretor;\nimport pessoas.Funcionario;\nimport pessoas.Gerente;\n\npublic class SistemaBancario {\n", "import pessoas.Gerente;\n\npublic class SistemaBancario {\n\n\tpublic static Map<String, Gerente> mapaDeGerentes = new HashMap<>();\n\tpublic static Map<String, Diretor> mapaDeDiretores = new HashMap<>();\n\tpublic static Map<String, Funcionario> mapaDeFuncionarios = new HashMap<>();\n\tpublic static Map<String, Cliente> mapaDeClientes = new HashMap<>();\n\tpublic static Map<String, Conta> mapaDeContas = new HashMap<>();\n\tpublic static List<Agencia> listaAgencias = new ArrayList<>();\n", "\tpublic static Map<String, Conta> mapaDeContas = new HashMap<>();\n\tpublic static List<Agencia> listaAgencias = new ArrayList<>();\n\n\tpublic static void main(String[] args) throws InputMismatchException, NullPointerException, IOException {\n\t\t\n\t\tLeitor.leitura(\".\\\\database\\\\registrodedados.txt\");\t\t\n\t\tMenu.menuEntrada();\n\t}\n}"]}
{"filename": "src/menus/Menu.java", "chunked_list": ["package menus;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Scanner;\n\nimport contas.Conta;", "\nimport contas.Conta;\nimport contas.ContaCorrente;\nimport contas.enums.ContasEnum;\nimport io.Escritor;\nimport pessoas.Cliente;\nimport pessoas.Funcionario;\nimport principal.SistemaBancario;\nimport relatorios.Relatorio;\nimport segurosDeVida.SeguroDeVida;", "import relatorios.Relatorio;\nimport segurosDeVida.SeguroDeVida;\n\npublic class Menu {\n\n\tpublic static boolean contratoSeguro = false;\n\n\tpublic static void menuEntrada() throws InputMismatchException, NullPointerException, IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tLocale.setDefault(Locale.US);\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"______  ___  _   _ _____ _____   _____ _____ _____ _____ \");\n\t\t\tSystem.out.println(\"| ___ \\\\/ _ \\\\| \\\\ | /  __ \\\\  _  | /  ___|  ___|_   _|  ___|\");\n\t\t\tSystem.out.println(\"| |_/ / /_\\\\ \\\\  \\\\| | /  \\\\/ | | | \\\\ `--.| |__   | | | |__  \");\n\t\t\tSystem.out.println(\"| ___ \\\\  _  | . ` | |   | | | |  `--. \\\\  __|  | | |  __| \");\n\t\t\tSystem.out.println(\"| |_/ / | | | |\\\\  | \\\\__/\\\\ \\\\_/ / /\\\\__/ / |___  | | | |___ \");\n\t\t\tSystem.out.println(\"\\\\____/\\\\_| |_|_| \\\\_/\\\\____/\\\\___/  \\\\____/\\\\____/  \\\\_/ \\\\____/ \");\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"******** Menu Inicial **********\");\n\t\t\tSystem.out.println(\"[1] Login\");\n\t\t\tSystem.out.println(\"[2] Encerrar\");\n\t\t\tint opcao = sc.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 1:\n\t\t\t\tmenuInicial();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println();\n\t\t\t\tEscritor.registroDeDadosAtualizados();\n\t\t\t\tSystem.out.println(\"Sistema encerrado.\");\n\t\t\t\tSystem.exit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmenuEntrada();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Ocorreu um erro.\");\n\t\t\tSystem.out.println(\"Poss\u00edvel solu\u00e7\u00e3o para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} finally {\n\t\t\tmenuEntrada();\n\t\t}\n\t\tsc.close();\n\t}\n", "\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"______  ___  _   _ _____ _____   _____ _____ _____ _____ \");\n\t\t\tSystem.out.println(\"| ___ \\\\/ _ \\\\| \\\\ | /  __ \\\\  _  | /  ___|  ___|_   _|  ___|\");\n\t\t\tSystem.out.println(\"| |_/ / /_\\\\ \\\\  \\\\| | /  \\\\/ | | | \\\\ `--.| |__   | | | |__  \");\n\t\t\tSystem.out.println(\"| ___ \\\\  _  | . ` | |   | | | |  `--. \\\\  __|  | | |  __| \");\n\t\t\tSystem.out.println(\"| |_/ / | | | |\\\\  | \\\\__/\\\\ \\\\_/ / /\\\\__/ / |___  | | | |___ \");\n\t\t\tSystem.out.println(\"\\\\____/\\\\_| |_|_| \\\\_/\\\\____/\\\\___/  \\\\____/\\\\____/  \\\\_/ \\\\____/ \");\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"******** Menu Inicial **********\");\n\t\t\tSystem.out.println(\"[1] Login\");\n\t\t\tSystem.out.println(\"[2] Encerrar\");\n\t\t\tint opcao = sc.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 1:\n\t\t\t\tmenuInicial();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println();\n\t\t\t\tEscritor.registroDeDadosAtualizados();\n\t\t\t\tSystem.out.println(\"Sistema encerrado.\");\n\t\t\t\tSystem.exit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmenuEntrada();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Ocorreu um erro.\");\n\t\t\tSystem.out.println(\"Poss\u00edvel solu\u00e7\u00e3o para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} finally {\n\t\t\tmenuEntrada();\n\t\t}\n\t\tsc.close();\n\t}\n", "\tpublic static void menuInicial() throws InputMismatchException, IOException, NullPointerException {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tLocale.setDefault(Locale.US);\n\t\tCliente cliente;\n\t\tConta conta;\n\t\tFuncionario funcionario;\n\t\tint senha = 0;\n\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.println(\"******** Menu de Login **********\");\n\t\t\t\tSystem.out.print(\"[ Digite seu CPF ]: \");\n\t\t\t\tString cpf = sc.nextLine();\n\t\t\t\tSystem.out.print(\"[ Digite sua senha ]: \");\n\t\t\t\tsenha = sc.nextInt();\n\t\t\t\tsc.nextLine();\n\t\t\t\tSystem.out.println(\"**********************************\");\n\n\t\t\t\tcliente = SistemaBancario.mapaDeClientes.get(cpf);\n\t\t\t\tconta = SistemaBancario.mapaDeContas.get(cpf);\n\t\t\t\tfuncionario = SistemaBancario.mapaDeFuncionarios.get(cpf);\n\t\t\t\tList<Conta> listaContas = new ArrayList<>(SistemaBancario.mapaDeContas.values());\n", "\t\ttry {\n\t\t\tdo {\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.println(\"******** Menu de Login **********\");\n\t\t\t\tSystem.out.print(\"[ Digite seu CPF ]: \");\n\t\t\t\tString cpf = sc.nextLine();\n\t\t\t\tSystem.out.print(\"[ Digite sua senha ]: \");\n\t\t\t\tsenha = sc.nextInt();\n\t\t\t\tsc.nextLine();\n\t\t\t\tSystem.out.println(\"**********************************\");\n\n\t\t\t\tcliente = SistemaBancario.mapaDeClientes.get(cpf);\n\t\t\t\tconta = SistemaBancario.mapaDeContas.get(cpf);\n\t\t\t\tfuncionario = SistemaBancario.mapaDeFuncionarios.get(cpf);\n\t\t\t\tList<Conta> listaContas = new ArrayList<>(SistemaBancario.mapaDeContas.values());\n", "\t\t\t\tif (conta != null && funcionario != null) {\n\t\t\t\t\tif (funcionario.getSenha() == senha) {\n\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t}\n\t\t\t\t} else if (conta != null && cliente != null) {\n\t\t\t\t\tif (cliente.getSenha() == senha) {\n\t\t\t\t\t\tMenu.menuCliente(conta, cliente);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"DADOS INCORRETOS. Digite novamente \\n\");\n\t\t\t\t\t}\n\t\t\t\t}", "\t\t\t} while (conta == null || cliente == null || cliente.getSenha() != senha\n\t\t\t\t\t|| funcionario.getSenha() != senha);\n\t\t}\n\n\t\tcatch (InputMismatchException e) {\n\t\t\tSystem.out.println(\"Ocorreu um erro.\");\n\t\t\tSystem.out.println(\"Poss\u00edvel solu\u00e7\u00e3o para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} finally {\n\t\t\tmenuInicial();\n\t\t}\n\t\tsc.close();\n\t}\n", "\tpublic static void menuFuncionario(Funcionario funcionario, Conta conta, List<Conta> listaContas, String cpf,\n\t\t\tCliente cliente) throws IOException, NullPointerException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tLocale.setDefault(Locale.US);\n\t\tint opcao = 0;\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Ol\u00e1 \" + funcionario.getTipoDeUsuario().getTipoPessoa() + \" \" + funcionario.getNome() + \".\");\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\tSystem.out.println(\"[1] Entrar como Cliente\");\n\t\t\t\tSystem.out.println(\"[2] Entrar como \" + funcionario.getTipoDeUsuario().getTipoPessoa());\n\t\t\t\tSystem.out.println(\"[3] Logout\");\n\t\t\t\topcao = sc.nextInt();\n\n\t\t\t\tswitch (opcao) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tMenu.menuCliente(conta, cliente);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tswitch (funcionario.getTipoDeUsuario()) {\n\t\t\t\t\tcase GERENTE:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Gerente ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Consulta de contas da sua ag\u00eancia \");\n\t\t\t\t\t\tSystem.out.println(\"[2] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tRelatorio.numDeContasNaAgencia(conta, cpf, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DIRETOR:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Diretor ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\t\t\tSystem.out.println(\"[2] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tRelatorio.informacoesClientes(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PRESIDENTE:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Presidente ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\t\t\tSystem.out.println(\"[2] Relat\u00f3rio do capital total armazenado\");\n\t\t\t\t\t\tSystem.out.println(\"[3] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tRelatorio.informacoesClientes(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tRelatorio.valorTotalCapitalBanco(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 3:\n\t\t\t\t\tcontratoSeguro = false;\n\t\t\t\t\tmenuEntrada();\n\t\t\t\t\tbreak;\n\t\t\t\t}", "\t\ttry {\n\t\t\tdo {\n\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\tSystem.out.println(\"[1] Entrar como Cliente\");\n\t\t\t\tSystem.out.println(\"[2] Entrar como \" + funcionario.getTipoDeUsuario().getTipoPessoa());\n\t\t\t\tSystem.out.println(\"[3] Logout\");\n\t\t\t\topcao = sc.nextInt();\n\n\t\t\t\tswitch (opcao) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tMenu.menuCliente(conta, cliente);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tswitch (funcionario.getTipoDeUsuario()) {\n\t\t\t\t\tcase GERENTE:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Gerente ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Consulta de contas da sua ag\u00eancia \");\n\t\t\t\t\t\tSystem.out.println(\"[2] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tRelatorio.numDeContasNaAgencia(conta, cpf, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DIRETOR:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Diretor ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\t\t\tSystem.out.println(\"[2] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tRelatorio.informacoesClientes(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PRESIDENTE:\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"******** Menu Presidente ********\");\n\t\t\t\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\t\t\t\tSystem.out.println(\"[1] Relat\u00f3rio de informa\u00e7\u00f5es dos clientes do banco\");\n\t\t\t\t\t\tSystem.out.println(\"[2] Relat\u00f3rio do capital total armazenado\");\n\t\t\t\t\t\tSystem.out.println(\"[3] Retornar ao menu anterior\");\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tRelatorio.informacoesClientes(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tRelatorio.valorTotalCapitalBanco(listaContas, conta, funcionario);\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 3:\n\t\t\t\t\tcontratoSeguro = false;\n\t\t\t\t\tmenuEntrada();\n\t\t\t\t\tbreak;\n\t\t\t\t}", "\t\t\t} while (opcao != 1 || opcao != 2 || opcao != 3);\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println(\"Ocorreu um erro.\");\n\t\t\tSystem.out.println(\"Poss\u00edveis solu\u00e7\u00f5es para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t\tSystem.out.println(\"- Digite n\u00fameros ao inv\u00e9s de letras\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} finally {\n\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t}\n\t\tsc.close();\n\n\t}\n", "\tpublic static void menuCliente(Conta conta, Cliente cliente) throws IOException, NullPointerException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tLocale.setDefault(Locale.US);\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"******** Menu cliente ********\\n\");\n\t\t\tSystem.out.println(\"Ol\u00e1 \" + cliente.getNome() + \"!\");\n\t\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\t\tSystem.out.println(\"[1] Saque\");\n\t\t\tSystem.out.println(\"[2] Dep\u00f3sito\");\n\t\t\tSystem.out.println(\"[3] Transfer\u00eancia para outra conta\");\n\t\t\tSystem.out.println(\"[4] Extrato da conta\");\n\t\t\tSystem.out.println(\"[5] Relat\u00f3rios e Saldo\");\n\t\t\tSystem.out.println(\"[6] Logout\");\n\n\t\t\tint opcao = sc.nextInt();\n\t\t\tswitch (opcao) {\n\t\t\tcase 1:\n\t\t\t\tSystem.out.print(\"Insira o valor do saque: R$ \");\n\t\t\t\tdouble valor = sc.nextDouble();\n\n\t\t\t\tconta.sacar(valor, conta);\n\t\t\t\tEscritor.comprovanteSaque(conta, valor);\n\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.printf(\"Insira o valor para dep\u00f3sito: R$ \");\n\t\t\t\tvalor = sc.nextDouble();\n\n\t\t\t\tconta.depositar(valor, conta);\n\n\t\t\t\tEscritor.comprovanteDeposito(conta, valor); \n\t\t\t\tSystem.out.printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());\n\t\t\t\tSystem.out.println();\n\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.printf(\"Insira o valor da transferencia: R$ \");\n\t\t\t\tvalor = sc.nextDouble();", "\t\t\t\tif (valor < 0) {\n\t\t\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t}\n\t\t\t\tif (valor > conta.getSaldo()) {\n\t\t\t\t\tSystem.out.println(\"Saldo insuficiente.\");\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t}\n\t\t\t\tsc.nextLine();\n\n\t\t\t\tSystem.out.printf(\"Insira o CPF do destinat\u00e1rio: \");\n\t\t\t\tString cpfDestinatario = sc.nextLine();\n", "\t\t\t\twhile (cpfDestinatario.equals(conta.getCpf())) {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Voc\u00ea n\u00e3o pode fazer transfer\u00eancia para si mesmo!\");\n\t\t\t\t\tSystem.out.printf(\"Entre com um CPF v\u00e1lido: \");\n\t\t\t\t\tcpfDestinatario = sc.nextLine();\n\t\t\t\t}\n\n\t\t\t\tConta contaDestino = SistemaBancario.mapaDeContas.get(cpfDestinatario);\n\t\t\t\tconta.transferir(contaDestino, valor, conta);\n\t\t\t\tEscritor.comprovanteTransferencia(conta, contaDestino, valor);\n\n\t\t\t\tSystem.out.println(\"Transfer\u00eancia realizada com sucesso.\");\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tconta.imprimeExtrato(conta);\n\t\t\t\tEscritor.extratoConta(conta);\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tcontratoSeguro = false;\n\t\t\t\tmenuEntrada();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.println(\"Op\u00e7\u00e3o n\u00e3o existe. Digite o n\u00famero correto.\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Ocorreu um erro na transfer\u00eancia.\");\n\t\t\tSystem.out.println(\"Poss\u00edvel solu\u00e7\u00e3o para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t} finally {\n\t\t\tmenuCliente(conta, cliente);\n\t\t}\n\t\tsc.close();\n\t}\n", "\tpublic static void menuRelatorio(Conta conta, Cliente cliente) throws IOException, NullPointerException {\n\t\tSystem.out.println();\n\t\tScanner sc = new Scanner(System.in);\n\t\tLocale.setDefault(Locale.US);\n\t\tSystem.out.println(\"******** Menu relat\u00f3rio ********\");\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"Escolha entre as op\u00e7\u00f5es abaixo:\");\n\t\tSystem.out.println(\"[1] Saldo\");\n\t\tSystem.out.println(\"[2] Relat\u00f3rio de Tributa\u00e7\u00e3o da Conta Corrente\");\n\t\tSystem.out.println(\"[3] Relat\u00f3rio de Rendimento da Conta Poupan\u00e7a\");\n\t\tSystem.out.println(\"[4] Seguro de vida\");\n\t\tSystem.out.println(\"[5] Retornar ao menu anterior\");\n\n\t\tint opcao = 0;\n", "\t\ttry {\n\t\t\topcao = sc.nextInt();\n\n\t\t\tswitch (opcao) {\n\t\t\tcase 1:\n\t\t\t\tRelatorio.imprimirSaldo(conta);\n\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\t\tRelatorio.tributacaoCC((ContaCorrente) conta);\n\t\t\t\t\tEscritor.relatorioTributacaoCC((ContaCorrente) conta);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Desculpe, voc\u00ea n\u00e3o possui Conta Corrente.\");\n\t\t\t\t}\n\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 3:", "\t\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\t\tRelatorio.tributacaoCC((ContaCorrente) conta);\n\t\t\t\t\tEscritor.relatorioTributacaoCC((ContaCorrente) conta);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Desculpe, voc\u00ea n\u00e3o possui Conta Corrente.\");\n\t\t\t\t}\n\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.POUPANCA)) {\n\t\t\t\t\tRelatorio.simularRendimentoPoupanca(conta, cliente);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Desculpe, voc\u00ea n\u00e3o possui Conta Poupan\u00e7a.\");\n\n\t\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:", "\t\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.POUPANCA)) {\n\t\t\t\t\tRelatorio.simularRendimentoPoupanca(conta, cliente);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Desculpe, voc\u00ea n\u00e3o possui Conta Poupan\u00e7a.\");\n\n\t\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tif (contratoSeguro == true) {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Voc\u00ea ja contratou esse servi\u00e7o.\");", "\t\t\t\tif (contratoSeguro == true) {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Voc\u00ea ja contratou esse servi\u00e7o.\");\n\t\t\t\t} else if (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t.println(\"Ao realizar a contrata\u00e7\u00e3o do seguro de vida, voc\u00ea pagar\u00e1 20% do valor como taxa\");\n\t\t\t\t\tSystem.out.println(\"Deseja contratar um seguro de vida? Sim [1] N\u00e3o [2] \");\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\topcao = sc.nextInt();\n\t\t\t\t\t\tswitch (opcao) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tSystem.out.print(\"Qual o valor que ser\u00e1 segurado? R$ \");\n\t\t\t\t\t\t\tdouble valor = sc.nextDouble();", "\t\t\t\t\t\t\twhile (valor < 0) {\n\t\t\t\t\t\t\t\tSystem.out.print(\"Insira um valor v\u00e1lido: R$ \");\n\t\t\t\t\t\t\t\tvalor = sc.nextDouble();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSeguroDeVida.setValorSeguro(valor);\n\t\t\t\t\t\t\tconta.debitarSeguro(valor, conta, cliente);\n\t\t\t\t\t\t\tcontratoSeguro = true;\n\n\t\t\t\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido. \");\n\t\t\t\t\t\t\tSystem.out.println(\"Deseja contratar um seguro de vida? Sim [1] N\u00e3o [2] \");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n", "\t\t\t\t\t} while (opcao != 1 || opcao != 2);\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Desculpe, voc\u00ea n\u00e3o possui Conta Corrente.\");\n\t\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\t}\n\t\t\tcase 5:\n\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmenuRelatorio(conta, cliente);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (InputMismatchException e) {\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.println(\"Ocorreu um erro.\");\n\t\t\tSystem.out.println(\"Poss\u00edveis solu\u00e7\u00f5es para o erro:\");\n\t\t\tSystem.out.println(\"- Insira apenas n\u00fameros com ou sem ponto (.)\");\n\t\t\tSystem.out.println(\"- Digite n\u00fameros ao inv\u00e9s de letras\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t} catch (NullPointerException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\n\t\t} finally {\n\t\t\tmenuRelatorio(conta, cliente);\n\t\t}\n\t\tsc.close();\n\t}\n}"]}
{"filename": "src/operacoes/Operacao.java", "chunked_list": ["package operacoes;\n\nimport contas.Conta;\n\npublic interface Operacao {\n\t\n\t  public void sacar(double valor, Conta conta);\n\t  \n\t  public void transferir(Conta contaDestino, double valor, Conta conta);\n\t  \n\t  public void depositar(double valor, Conta conta);\n}\n", "\t  public void transferir(Conta contaDestino, double valor, Conta conta);\n\t  \n\t  public void depositar(double valor, Conta conta);\n}\n"]}
