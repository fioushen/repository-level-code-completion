{"filename": "src/test/java/pro/edgematrix/crypto/EdgeServiceTest.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;", "import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.web3j.abi.datatypes.Address;\nimport org.web3j.protocol.core.methods.response.TransactionReceipt;\nimport org.web3j.protocol.http.HttpService;\nimport pro.edgematrix.EdgeService;\nimport pro.edgematrix.EdgeWeb3j;", "import pro.edgematrix.EdgeService;\nimport pro.edgematrix.EdgeWeb3j;\nimport pro.edgematrix.RtcMsg;\nimport pro.edgematrix.common.ChainId;\nimport pro.edgematrix.common.PrecompileAddress;\nimport pro.edgematrix.protocol.methods.response.EdgeCallResult;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.Base64;", "import java.math.BigInteger;\nimport java.util.Base64;\nimport java.util.concurrent.ExecutionException;\n\npublic class EdgeServiceTest {\n\n    /**\n     * \"oregon.edgematrix.xyz\"  is one of testnet node's rpcUrl\n     */\n    private final static EdgeWeb3j web3j = EdgeWeb3j.build(new HttpService(\"https://oregon.edgematrix.xyz\"));\n\n    // A edge-matrix node that is running Stable Diffusion service for testing purpose.\n    private final static String TEST_PEERID = \"16Uiu2HAm14xAsnJHDqnQNQ2Qqo1SapdRk9j8mBKY6mghVDP9B9u5\";\n\n\n    @BeforeAll", "    public static void prepare() {\n    }\n\n    @AfterAll\n    public static void finish() {\n        web3j.shutdown();\n    }\n\n    /**\n     * Test for send a telegram to a precompile contract with data\n     *\n     * @throws ExecutionException\n     * @throws InterruptedException\n     */\n    @Test", "    public void testSendTelegram() throws ExecutionException, InterruptedException {\n        EdgeService edgeService = new EdgeService();\n        String s = edgeService.sendTelegram(\n                web3j,\n                ChainId.TEST_NET.getId(),\n                edgeService.getNextTelegramNonce(web3j, SampleKeys.ADDRESS),\n                PrecompileAddress.EDGE_RTC_SUBJECT.getAddress(),\n                SampleKeys.CREDENTIALS,\n                \"\");\n        System.out.println(s);\n    }\n\n    /**\n     * Test for create a rtc chat channel\n     *\n     * @throws ExecutionException\n     * @throws InterruptedException\n     */\n    @Test", "    public void testCreateRtcSubject() throws ExecutionException, InterruptedException {\n        EdgeService edgeService = new EdgeService();\n        String s = edgeService.createRtcSubject(\n                web3j,\n                ChainId.TEST_NET.getId(),\n                edgeService.getNextTelegramNonce(web3j, SampleKeys.ADDRESS),\n                SampleKeys.CREDENTIALS);\n        // returen a rtc subject hash as rtc channel hash\n        System.out.println(s);\n    }\n\n    /**\n     * Test for a Stable Diffusion txt2img api call\n     *\n     * @throws ExecutionException\n     * @throws InterruptedException\n     */\n    @Test", "    public void testCallEdgeApi() throws ExecutionException, InterruptedException, JsonProcessingException {\n        EdgeService edgeService = new EdgeService();\n        String peerId = TEST_PEERID;\n        String apiHttpMethod = \"POST\";\n        String apiPath = \"/sdapi/v1/txt2img\";\n        String apiData = \"{\\n\" +\n                \"      \\\"enable_hr\\\": false,\\n\" +\n                \"      \\\"denoising_strength\\\": 0,\\n\" +\n                \"      \\\"firstphase_width\\\": 0,\\n\" +\n                \"      \\\"firstphase_height\\\": 0,\\n\" +\n                \"      \\\"hr_scale\\\": 2,\\n\" +\n                \"      \\\"hr_upscaler\\\": \\\"\\\",\\n\" +\n                \"      \\\"hr_second_pass_steps\\\": 0,\\n\" +\n                \"      \\\"hr_resize_x\\\": 0,\\n\" +\n                \"      \\\"hr_resize_y\\\": 0,\\n\" +\n                \"      \\\"prompt\\\": \\\"white cat and dog\\\",\\n\" +\n                \"      \\\"styles\\\": [\\n\" +\n                \"        \\\"\\\"\\n\" +\n                \"      ],\\n\" +\n                \"      \\\"seed\\\": -1,\\n\" +\n                \"      \\\"subseed\\\": -1,\\n\" +\n                \"      \\\"subseed_strength\\\": 0,\\n\" +\n                \"      \\\"seed_resize_from_h\\\": -1,\\n\" +\n                \"      \\\"seed_resize_from_w\\\": -1,\\n\" +\n                \"      \\\"sampler_name\\\": \\\"\\\",\\n\" +\n                \"      \\\"batch_size\\\": 1,\\n\" +\n                \"      \\\"n_iter\\\": 1,\\n\" +\n                \"      \\\"steps\\\": 50,\\n\" +\n                \"      \\\"cfg_scale\\\": 7,\\n\" +\n                \"      \\\"width\\\": 512,\\n\" +\n                \"      \\\"height\\\": 512,\\n\" +\n                \"      \\\"restore_faces\\\": false,\\n\" +\n                \"      \\\"tiling\\\": false,\\n\" +\n                \"      \\\"do_not_save_samples\\\": false,\\n\" +\n                \"      \\\"do_not_save_grid\\\": false,\\n\" +\n                \"      \\\"negative_prompt\\\": \\\"\\\",\\n\" +\n                \"      \\\"eta\\\": 0,\\n\" +\n                \"      \\\"s_churn\\\": 0,\\n\" +\n                \"      \\\"s_tmax\\\": 0,\\n\" +\n                \"      \\\"s_tmin\\\": 0,\\n\" +\n                \"      \\\"s_noise\\\": 1,\\n\" +\n                \"      \\\"override_settings\\\": {},\\n\" +\n                \"      \\\"override_settings_restore_afterwards\\\": true,\\n\" +\n                \"      \\\"script_args\\\": [],\\n\" +\n                \"      \\\"sampler_index\\\": \\\"Euler\\\",\\n\" +\n                \"      \\\"script_name\\\": \\\"\\\",\\n\" +\n                \"      \\\"send_images\\\": true,\\n\" +\n                \"      \\\"save_images\\\": false,\\n\" +\n                \"      \\\"alwayson_scripts\\\": {}\\n\" +\n                \"    }\";\n        String s = edgeService.callEdgeApi(\n                web3j,\n                ChainId.TEST_NET.getId(),\n                edgeService.getNextTelegramNonce(web3j, SampleKeys.ADDRESS),\n                SampleKeys.CREDENTIALS,\n                peerId,\n                apiHttpMethod,\n                apiPath,\n                apiData);", "        if (isValidJSON(s)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            EdgeCallResult edgeCallResult = objectMapper.readValue(s, EdgeCallResult.class);\n            System.out.println(\"telegram_hash: \" + edgeCallResult.getTelegram_hash());\n            System.out.println(\"response: \" + new String(Base64.getDecoder().decode(edgeCallResult.getResponse())));\n        } else {\n            System.out.println(\"invalid json\");\n        }\n    }\n\n    public boolean isValidJSON(final String json) {\n        boolean valid = false;", "    public boolean isValidJSON(final String json) {\n        boolean valid = false;\n        try {\n            final JsonParser parser = new ObjectMapper().createParser(json);\n            while (parser.nextToken() != null) {\n            }\n            valid = true;\n        } catch (JsonParseException jpe) {\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return valid;\n    }\n\n    /**\n     * send a broadcast rtc msg to a rtc channel\n     */\n    @Test", "    public void testSendRtcMsg() {\n        EdgeService edgeService = new EdgeService();\n        String s = edgeService.sendRtcMsg(\n                web3j,\n                ChainId.TEST_NET.getId(),\n                SampleKeys.CREDENTIALS,\n                RtcMsg.createRtcMsg(\n                        \"0x8eeb338239ada22d81ffb7adc995fe31a4d1dc2d701bc8a58fffe5b53e14281e\",\n                        \"edge_chat\",\n                        \"hello\",\n                        new Address(\"0x0\").toString()));\n        System.out.println(s);\n    }\n\n    @Test", "    public void testGetNextTelegramNonce() throws ExecutionException, InterruptedException {\n        EdgeService edgeService = new EdgeService();\n        BigInteger telegramCount = edgeService.getNextTelegramNonce(web3j, SampleKeys.ADDRESS);\n        if (telegramCount != null) {\n            System.out.printf(\"nextNonce: %s%n\", telegramCount);\n        }\n    }\n\n    @Test\n    public void testGetTelegramReceipt() throws IOException {\n        EdgeService edgeService = new EdgeService();\n        TransactionReceipt receipt = edgeService.getTelegramReceipt(web3j, \"0x6b7c880d58fef940e7b7932b9239d2737b4a71583c4640757e234de94bb98c0b\");", "    public void testGetTelegramReceipt() throws IOException {\n        EdgeService edgeService = new EdgeService();\n        TransactionReceipt receipt = edgeService.getTelegramReceipt(web3j, \"0x6b7c880d58fef940e7b7932b9239d2737b4a71583c4640757e234de94bb98c0b\");\n        if (receipt != null && receipt.getBlockHash() != null && receipt.getStatus() != null && receipt.getTo() != null) {\n            System.out.printf(\"blockHash: %s, status: %s, to: %s%n\", receipt.getBlockHash(), receipt.getStatus(), receipt.getTo());\n        }\n    }\n\n}\n"]}
{"filename": "src/test/java/pro/edgematrix/crypto/SampleKeys.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.web3j.crypto.Credentials;\nimport org.web3j.crypto.ECKeyPair;\nimport org.web3j.utils.Numeric;\n", "import org.web3j.utils.Numeric;\n\nimport java.math.BigInteger;\n\n/**\n * Keys generated for unit testing purposes.\n */\npublic class SampleKeys {\n\n    public static final String PRIVATE_KEY_STRING =\n            \"03b7dfc824b0cbcfe789ec0ce4571f3460befd0490e3d0d2aad8e3c07dbcce14\";", "    public static final String PRIVATE_KEY_STRING =\n            \"03b7dfc824b0cbcfe789ec0ce4571f3460befd0490e3d0d2aad8e3c07dbcce14\";\n    public static final String ADDRESS = \"0x0aF137aa3EcC7d10d926013ee34049AfA77382e6\";\n    public static final String ADDRESS_NO_PREFIX = Numeric.cleanHexPrefix(ADDRESS);\n\n\n    static final BigInteger PRIVATE_KEY = Numeric.toBigInt(PRIVATE_KEY_STRING);\n\n    static final ECKeyPair KEY_PAIR = ECKeyPair.create(PRIVATE_KEY);\n\n    public static final Credentials CREDENTIALS = Credentials.create(KEY_PAIR);\n\n    private SampleKeys() {\n    }\n}\n", "    public static final Credentials CREDENTIALS = Credentials.create(KEY_PAIR);\n\n    private SampleKeys() {\n    }\n}\n"]}
{"filename": "src/test/java/pro/edgematrix/crypto/RtcMsgEncoderTest.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.junit.jupiter.api.Test;\nimport org.web3j.abi.datatypes.Address;\nimport org.web3j.utils.Numeric;\nimport pro.edgematrix.common.ChainId;", "import org.web3j.utils.Numeric;\nimport pro.edgematrix.common.ChainId;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class RtcMsgEncoderTest {\n\n    // Example from https://eips.ethereum.org/EIPS/eip-155\n    private final String SIGN_RESULT_EXAMPLE =\n            \"0xf8acb84230783865656233333832333961646132326438316666623761646339393566653331613464316463326437303162633861353866666665356235336531343238316589656467655f636861748568656c6c6f94000000000000000000000000000000000000000028a0c2ef640e01996a92a323233b847348b8ab3107673e4ad120c6561a24a24e1267a060e348a187ed7bd7668783ebe1e87db36d59ea72cda99560dc78c048668b42d2\";\n\n    @Test", "    public void testSignMessageAfterEip155() {\n        byte[] signedMessage =\n                RtcMsgEncoder.signMessage(\n                        createRtcMsg(),\n                        ChainId.TEST_NET.getId(),\n                        SampleKeys.CREDENTIALS);\n\n        String hexMessage = Numeric.toHexString(signedMessage);\n        System.out.println(\"Actual  : \" + hexMessage);\n        System.out.println(\"Expected: \" + SIGN_RESULT_EXAMPLE);\n        assertEquals(SIGN_RESULT_EXAMPLE, hexMessage);\n    }\n\n    private static RawRtcMsg createRtcMsg() {\n        return RawRtcMsg.createRtcMsg(\n                \"0x8eeb338239ada22d81ffb7adc995fe31a4d1dc2d701bc8a58fffe5b53e14281e\",\n                \"edge_chat\",\n                \"hello\",\n                new Address(\"0x0\").toString());\n    }\n\n}\n"]}
{"filename": "src/test/java/pro/edgematrix/crypto/TelegramEncoderTest.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.junit.jupiter.api.Test;\nimport org.web3j.utils.Numeric;\nimport pro.edgematrix.common.ChainId;\nimport pro.edgematrix.common.PrecompileAddress;", "import pro.edgematrix.common.ChainId;\nimport pro.edgematrix.common.PrecompileAddress;\n\nimport java.math.BigInteger;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class TelegramEncoderTest {\n\n    @Test\n    public void testSignMessageAfterEip155() {\n        byte[] signedMessage =\n                TelegramEncoder.signMessage(\n                        createEip155RawTransaction(),\n                        ChainId.TEST_NET.getId(),\n                        SampleKeys.CREDENTIALS);\n\n        String hexMessage = Numeric.toHexString(signedMessage);\n        String SIGN_RESULT_ETH_EXAMPLE = \"0xf85d038080940000000000000000000000000000000000003101808028a0bec9c466527c5d86bba8f9df2c4db78fa19948ed9ff05de532b7607cff939474a0495b85bc7cc2bc8b69860f3033523afa3ef4f839cfc2687c0f4bbe60b718df5d\";\n        assertEquals(SIGN_RESULT_ETH_EXAMPLE, hexMessage);\n    }\n\n\n    static RawTelegram createEip155RawTransaction() {\n        return RawTelegram.createEtherTransaction(\n                BigInteger.valueOf(3),\n                BigInteger.valueOf(0),\n                BigInteger.valueOf(0),\n                PrecompileAddress.EDGE_RTC_SUBJECT.getAddress(),\n                BigInteger.valueOf(0));\n    }\n\n    @Test", "    public void testSignMessageAfterEip155() {\n        byte[] signedMessage =\n                TelegramEncoder.signMessage(\n                        createEip155RawTransaction(),\n                        ChainId.TEST_NET.getId(),\n                        SampleKeys.CREDENTIALS);\n\n        String hexMessage = Numeric.toHexString(signedMessage);\n        String SIGN_RESULT_ETH_EXAMPLE = \"0xf85d038080940000000000000000000000000000000000003101808028a0bec9c466527c5d86bba8f9df2c4db78fa19948ed9ff05de532b7607cff939474a0495b85bc7cc2bc8b69860f3033523afa3ef4f839cfc2687c0f4bbe60b718df5d\";\n        assertEquals(SIGN_RESULT_ETH_EXAMPLE, hexMessage);\n    }\n\n\n    static RawTelegram createEip155RawTransaction() {\n        return RawTelegram.createEtherTransaction(\n                BigInteger.valueOf(3),\n                BigInteger.valueOf(0),\n                BigInteger.valueOf(0),\n                PrecompileAddress.EDGE_RTC_SUBJECT.getAddress(),\n                BigInteger.valueOf(0));\n    }\n\n    @Test", "    public void testSignTelegram() {\n        byte[] signedMessage =\n                TelegramEncoder.signMessage(\n                        createTestEdgeCallTelegram(),\n                        ChainId.TEST_NET.getId(),\n                        SampleKeys.CREDENTIALS);\n\n        String hexMessage = Numeric.toHexString(signedMessage);\n        System.out.println(hexMessage);\n        String SIGN_RESULT_ETH_EXAMPLE = \"0xf9054a14808094000000000000000000000000000000000000300180b904ec7b22706565724964223a2231365569753248416d31347841736e4a4844716e514e513251716f3153617064526b396a386d424b59366d67685644503942397535222c22656e64706f696e74223a222f617069222c22496e707574223a7b226d6574686f64223a2022504f5354222c2268656164657273223a5b5d2c2270617468223a222f73646170692f76312f74787432696d67222c22626f6479223a7b0a20202020202022656e61626c655f6872223a2066616c73652c0a2020202020202264656e6f6973696e675f737472656e677468223a20302c0a20202020202022666972737470686173655f7769647468223a20302c0a20202020202022666972737470686173655f686569676874223a20302c0a2020202020202268725f7363616c65223a20322c0a2020202020202268725f75707363616c6572223a2022222c0a2020202020202268725f7365636f6e645f706173735f7374657073223a20302c0a2020202020202268725f726573697a655f78223a20302c0a2020202020202268725f726573697a655f79223a20302c0a2020202020202270726f6d7074223a202277686974652063617420616e6420646f67222c0a202020202020227374796c6573223a205b0a202020202020202022220a2020202020205d2c0a2020202020202273656564223a202d312c0a2020202020202273756273656564223a202d312c0a20202020202022737562736565645f737472656e677468223a20302c0a20202020202022736565645f726573697a655f66726f6d5f68223a202d312c0a20202020202022736565645f726573697a655f66726f6d5f77223a202d312c0a2020202020202273616d706c65725f6e616d65223a2022222c0a2020202020202262617463685f73697a65223a20312c0a202020202020226e5f69746572223a20312c0a202020202020227374657073223a2035302c0a202020202020226366675f7363616c65223a20372c0a202020202020227769647468223a203531322c0a20202020202022686569676874223a203531322c0a20202020202022726573746f72655f6661636573223a2066616c73652c0a2020202020202274696c696e67223a2066616c73652c0a20202020202022646f5f6e6f745f736176655f73616d706c6573223a2066616c73652c0a20202020202022646f5f6e6f745f736176655f67726964223a2066616c73652c0a202020202020226e656761746976655f70726f6d7074223a2022222c0a20202020202022657461223a20302c0a20202020202022735f636875726e223a20302c0a20202020202022735f746d6178223a20302c0a20202020202022735f746d696e223a20302c0a20202020202022735f6e6f697365223a20312c0a202020202020226f766572726964655f73657474696e6773223a207b7d2c0a202020202020226f766572726964655f73657474696e67735f726573746f72655f61667465727761726473223a20747275652c0a202020202020227363726970745f61726773223a205b5d2c0a2020202020202273616d706c65725f696e646578223a202245756c6572222c0a202020202020227363726970745f6e616d65223a2022222c0a2020202020202273656e645f696d61676573223a20747275652c0a20202020202022736176655f696d61676573223a2066616c73652c0a20202020202022616c776179736f6e5f73637269707473223a207b7d0a202020207d7d7d28a04d738460dceedcd65074366c35c37e12fbe4e85f4b662fb306a61633cb1623d19f0cfc68b55ae48009ef981a6b2668cdc316466a7a82e181e4a3527a6b2036bd\";\n        assertEquals(SIGN_RESULT_ETH_EXAMPLE, hexMessage);\n    }\n\n\n    static RawTelegram createTestEdgeCallTelegram() {\n        return RawTelegram.createTransaction(\n                BigInteger.valueOf(20),\n                BigInteger.valueOf(0),\n                BigInteger.valueOf(0),\n                PrecompileAddress.EDGE_CALL.getAddress(),\n                BigInteger.valueOf(0),\n                \"{\\\"peerId\\\":\\\"16Uiu2HAm14xAsnJHDqnQNQ2Qqo1SapdRk9j8mBKY6mghVDP9B9u5\\\",\\\"endpoint\\\":\\\"/api\\\",\\\"Input\\\":{\\\"method\\\": \\\"POST\\\",\\\"headers\\\":[],\\\"path\\\":\\\"/sdapi/v1/txt2img\\\",\\\"body\\\":{\\n\" +\n                        \"      \\\"enable_hr\\\": false,\\n\" +\n                        \"      \\\"denoising_strength\\\": 0,\\n\" +\n                        \"      \\\"firstphase_width\\\": 0,\\n\" +\n                        \"      \\\"firstphase_height\\\": 0,\\n\" +\n                        \"      \\\"hr_scale\\\": 2,\\n\" +\n                        \"      \\\"hr_upscaler\\\": \\\"\\\",\\n\" +\n                        \"      \\\"hr_second_pass_steps\\\": 0,\\n\" +\n                        \"      \\\"hr_resize_x\\\": 0,\\n\" +\n                        \"      \\\"hr_resize_y\\\": 0,\\n\" +\n                        \"      \\\"prompt\\\": \\\"white cat and dog\\\",\\n\" +\n                        \"      \\\"styles\\\": [\\n\" +\n                        \"        \\\"\\\"\\n\" +\n                        \"      ],\\n\" +\n                        \"      \\\"seed\\\": -1,\\n\" +\n                        \"      \\\"subseed\\\": -1,\\n\" +\n                        \"      \\\"subseed_strength\\\": 0,\\n\" +\n                        \"      \\\"seed_resize_from_h\\\": -1,\\n\" +\n                        \"      \\\"seed_resize_from_w\\\": -1,\\n\" +\n                        \"      \\\"sampler_name\\\": \\\"\\\",\\n\" +\n                        \"      \\\"batch_size\\\": 1,\\n\" +\n                        \"      \\\"n_iter\\\": 1,\\n\" +\n                        \"      \\\"steps\\\": 50,\\n\" +\n                        \"      \\\"cfg_scale\\\": 7,\\n\" +\n                        \"      \\\"width\\\": 512,\\n\" +\n                        \"      \\\"height\\\": 512,\\n\" +\n                        \"      \\\"restore_faces\\\": false,\\n\" +\n                        \"      \\\"tiling\\\": false,\\n\" +\n                        \"      \\\"do_not_save_samples\\\": false,\\n\" +\n                        \"      \\\"do_not_save_grid\\\": false,\\n\" +\n                        \"      \\\"negative_prompt\\\": \\\"\\\",\\n\" +\n                        \"      \\\"eta\\\": 0,\\n\" +\n                        \"      \\\"s_churn\\\": 0,\\n\" +\n                        \"      \\\"s_tmax\\\": 0,\\n\" +\n                        \"      \\\"s_tmin\\\": 0,\\n\" +\n                        \"      \\\"s_noise\\\": 1,\\n\" +\n                        \"      \\\"override_settings\\\": {},\\n\" +\n                        \"      \\\"override_settings_restore_afterwards\\\": true,\\n\" +\n                        \"      \\\"script_args\\\": [],\\n\" +\n                        \"      \\\"sampler_index\\\": \\\"Euler\\\",\\n\" +\n                        \"      \\\"script_name\\\": \\\"\\\",\\n\" +\n                        \"      \\\"send_images\\\": true,\\n\" +\n                        \"      \\\"save_images\\\": false,\\n\" +\n                        \"      \\\"alwayson_scripts\\\": {}\\n\" +\n                        \"    }}}\");\n    }\n\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/RtcMsg.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix;\n\n/**\n * rtc message\n */\npublic class RtcMsg {\n\n    // RTC channel hash.\n    private String subject;\n\n    // application name the rtc channel belongs to\n    private String application;\n\n    // rtc text content.\n    private String content;\n\n    // address of rtc message to.\n    // 0x0 is broadcast address\n    private String to;\n", " */\npublic class RtcMsg {\n\n    // RTC channel hash.\n    private String subject;\n\n    // application name the rtc channel belongs to\n    private String application;\n\n    // rtc text content.\n    private String content;\n\n    // address of rtc message to.\n    // 0x0 is broadcast address\n    private String to;\n", "    public static RtcMsg createRtcMsg(\n            String subject, String application, String content, String to) {\n        RtcMsg rtcMsg = new RtcMsg();\n        rtcMsg.application = application;\n        rtcMsg.subject = subject;\n        rtcMsg.to = to;\n        rtcMsg.content = content;\n        return rtcMsg;\n    }\n\n    public String getSubject() {\n        return subject;\n    }\n", "    public String getSubject() {\n        return subject;\n    }\n\n    public void setSubject(String subject) {\n        this.subject = subject;\n    }\n\n    public String getApplication() {\n        return application;\n    }\n", "    public String getApplication() {\n        return application;\n    }\n\n    public void setApplication(String application) {\n        this.application = application;\n    }\n\n    public String getContent() {\n        return content;\n    }\n", "    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public String getTo() {\n        return to;\n    }\n", "    public String getTo() {\n        return to;\n    }\n\n    public void setTo(String to) {\n        this.to = to;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/EdgeService.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix;\n\nimport org.web3j.crypto.Credentials;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.Request;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount;", "import org.web3j.protocol.core.Request;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;\nimport org.web3j.protocol.core.methods.response.TransactionReceipt;\nimport org.web3j.utils.Numeric;\nimport pro.edgematrix.common.PrecompileAddress;\nimport pro.edgematrix.crypto.RawRtcMsg;\nimport pro.edgematrix.crypto.RawTelegram;\nimport pro.edgematrix.crypto.RtcMsgEncoder;\nimport pro.edgematrix.crypto.TelegramEncoder;", "import pro.edgematrix.crypto.RtcMsgEncoder;\nimport pro.edgematrix.crypto.TelegramEncoder;\nimport pro.edgematrix.protocol.methods.response.EdgeSendRtcMsg;\nimport pro.edgematrix.protocol.methods.response.EdgeSendTelegram;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.concurrent.ExecutionException;\n\n/**", "\n/**\n * JSON-RPC Request service.\n */\npublic class EdgeService {\n    /**\n     * send a telegram to edge-matrix node\n     *\n     * @param web3j           EdgeWeb3j instance\n     * @param chainId         EMC chain id, 2 is testnet  chain id\n     * @param nonce           nonce for caller\n     * @param contractAddress address to\n     * @param credentials     caller's credential\n     * @param data            data for call, \"\" is empty data\n     * @return deserialized JSON-RPC responses\n     */", "    public String sendTelegram(EdgeWeb3j web3j, long chainId, BigInteger nonce, String contractAddress, Credentials credentials, String data) {\n        if (web3j == null) return null;\n\n        BigInteger gasPrice = BigInteger.valueOf(0);\n        BigInteger gasLimit = BigInteger.valueOf(0);\n        BigInteger value = BigInteger.valueOf(0);\n        RawTelegram rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);\n\n        byte[] signMessage = TelegramEncoder.signMessage(rawTransaction, chainId, credentials);\n        String signData = Numeric.toHexString(signMessage);\n", "        if (!\"\".equals(signData)) {\n            try {\n                EdgeSendTelegram send = web3j.edgeSendRawTelegram(signData).send();\n                if (send.hasError()) {\n                    throw new RuntimeException(send.getError().getMessage());\n                } else {\n                    return send.getResult();\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(\"send telegram exception\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * create a rtc subject on edge-matrix net\n     *\n     * @param web3j       EdgeWeb3j instance\n     * @param chainId     EMC chain id, 2 is testnet chain id\n     * @param nonce       nonce for caller\n     * @param credentials caller's credential\n     * @return deserialized JSON-RPC responses\n     */", "    public String createRtcSubject(EdgeWeb3j web3j, long chainId, BigInteger nonce, Credentials credentials) {\n        if (web3j == null) return null;\n\n        BigInteger gasPrice = BigInteger.valueOf(0);\n        BigInteger gasLimit = BigInteger.valueOf(0);\n        BigInteger value = BigInteger.valueOf(0);\n        RawTelegram rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, PrecompileAddress.EDGE_RTC_SUBJECT.getAddress(), value, \"\");\n\n        byte[] signMessage = TelegramEncoder.signMessage(rawTransaction, chainId, credentials);\n        String signData = Numeric.toHexString(signMessage);\n", "        if (!\"\".equals(signData)) {\n            try {\n                EdgeSendTelegram send = web3j.edgeSendRawTelegram(signData).send();\n                if (send.hasError()) {\n                    throw new RuntimeException(send.getError().getMessage());\n                } else {\n                    return send.getResult();\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(\"send telegram exception\");\n            }\n        }\n        return null;\n    }\n", "    public String callEdgeApi(EdgeWeb3j web3j, long chainId, BigInteger nonce, Credentials credentials, String peerId, String apiHttpMethod, String apiPath, String apiData) {\n        if (web3j == null) return null;\n\n        BigInteger gasPrice = BigInteger.valueOf(0);\n        BigInteger gasLimit = BigInteger.valueOf(0);\n        BigInteger value = BigInteger.valueOf(0);\n        String data = String.format(\"{\\\"peerId\\\":\\\"%s\\\",\\\"endpoint\\\":\\\"/api\\\",\\\"Input\\\":{\\\"method\\\": \\\"%s\\\",\\\"headers\\\":[],\\\"path\\\":\\\"%s\\\",\\\"body\\\":%s}}\",peerId,apiHttpMethod,apiPath,apiData);\n        RawTelegram rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, PrecompileAddress.EDGE_CALL.getAddress(), value, data);\n\n        byte[] signMessage = TelegramEncoder.signMessage(rawTransaction, chainId, credentials);\n        String signData = Numeric.toHexString(signMessage);\n", "        if (!\"\".equals(signData)) {\n            try {\n                Request<?, EdgeSendTelegram> edgeSendTelegramRequest = web3j.edgeSendRawTelegram(signData);\n                EdgeSendTelegram send = edgeSendTelegramRequest.send();\n                if (send.hasError()) {\n                    throw new RuntimeException(send.getError().getMessage());\n                } else {\n                    return send.getResult();\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(\"send telegram exception\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * send a message to rtc subject\n     *\n     * @param web3j       EdgeWeb3j instance\n     * @param chainId     EMC chain id, 2 is testnet chain id\n     * @param credentials caller's credential\n     * @param rtcMsg      RtcMsg instance to be sent\n     * @return deserialized JSON-RPC responses\n     */", "    public String sendRtcMsg(EdgeWeb3j web3j, long chainId, Credentials credentials, RtcMsg rtcMsg) {\n        if (web3j == null) return null;\n\n        RawRtcMsg rawTransaction = RawRtcMsg.createRtcMsg(rtcMsg.getSubject(), rtcMsg.getApplication(), rtcMsg.getContent(), rtcMsg.getTo());\n\n        byte[] signMessage = RtcMsgEncoder.signMessage(rawTransaction, chainId, credentials);\n        String signData = Numeric.toHexString(signMessage);\n\n        if (!\"\".equals(signData)) {\n            try {\n                EdgeSendRtcMsg send = web3j.edgeSendRawMsg(signData).send();", "        if (!\"\".equals(signData)) {\n            try {\n                EdgeSendRtcMsg send = web3j.edgeSendRawMsg(signData).send();\n                if (send.hasError()) {\n                    throw new RuntimeException(send.getError().getMessage());\n                } else {\n                    return send.getResult();\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(\"send rtcMsg exception\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * get next nonce for caller\n     *\n     * @param web3j   EdgeWeb3j instance\n     * @param address caller's address - e.g. \"0x0aF137aa3EcC7d10d926013ee34049AfA77382e6\"\n     * @return number of nonce, will be used for sendTelegram\n     * @throws ExecutionException ExecutionException\n     * @throws InterruptedException InterruptedException\n     */", "    public BigInteger getNextTelegramNonce(EdgeWeb3j web3j, String address) throws ExecutionException, InterruptedException {\n        if (web3j == null) return null;\n\n        EthGetTransactionCount ethGetTransactionCount = web3j.edgeGetTelegramCount(\n                address, DefaultBlockParameterName.LATEST).sendAsync().get();\n        if (ethGetTransactionCount != null) {\n            return ethGetTransactionCount.getTransactionCount();\n        }\n        return null;\n    }\n\n    /**\n     * get a receipt of sendTelegram call\n     *\n     * @param web3j        EdgeWeb3j instance\n     * @param telegramHash hashString returned by a sendTelegram call,  - e.g. \"0x6b7c880d58fef940e7b7932b9239d2737b4a71583c4640757e234de94bb98c0b\"\n     * @return EthGetTransactionReceipt\n     * @throws IOException IOException\n     */", "    public TransactionReceipt getTelegramReceipt(EdgeWeb3j web3j, String telegramHash) throws IOException {\n        EthGetTransactionReceipt transactionReceipt = web3j.edgeGetTelegramReceipt(telegramHash).send();\n        if (transactionReceipt != null && transactionReceipt.getTransactionReceipt().isPresent()) {\n            return transactionReceipt.getTransactionReceipt().get();\n        } else {\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/EdgeWeb3j.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix;\n\nimport org.web3j.protocol.Web3jService;\nimport org.web3j.protocol.core.Batcher;\nimport org.web3j.protocol.core.DefaultBlockParameter;\nimport org.web3j.protocol.core.Ethereum;", "import org.web3j.protocol.core.DefaultBlockParameter;\nimport org.web3j.protocol.core.Ethereum;\nimport org.web3j.protocol.core.Request;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;\nimport org.web3j.protocol.rx.Web3jRx;\nimport pro.edgematrix.protocol.core.JsonRpc2_0Web3j;\nimport pro.edgematrix.protocol.methods.response.EdgeSendRtcMsg;\nimport pro.edgematrix.protocol.methods.response.EdgeSendTelegram;\n", "import pro.edgematrix.protocol.methods.response.EdgeSendTelegram;\n\n/**\n * egde-matrix JSON-RPC Request object building factory.\n */\npublic interface EdgeWeb3j extends Ethereum, Web3jRx, Batcher {\n\n    Request<?, EthGetTransactionReceipt> edgeGetTelegramReceipt(String telegramHash);\n\n    Request<?, EthGetTransactionCount> edgeGetTelegramCount(\n            String address, DefaultBlockParameter defaultBlockParameter);\n\n    Request<?, EdgeSendTelegram> edgeSendRawTelegram(String var1);\n\n    Request<?, EdgeSendRtcMsg> edgeSendRawMsg(String var1);\n\n    /**\n     * Construct a new EdgeWeb3j instance.\n     *\n     * @param web3jService web3j service instance - i.e. HTTP or IPC\n     * @return new EdgeWeb3j instance\n     */\n    static EdgeWeb3j build(Web3jService web3jService) {\n        return new JsonRpc2_0Web3j(web3jService);\n    }\n\n    /**\n     * Shutdowns a EdgeWeb3j instance and closes opened resources.\n     */\n    void shutdown();\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/common/PrecompileAddress.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.common;\n\npublic enum PrecompileAddress {\n    EDGE_RTC_SUBJECT(\"0x0000000000000000000000000000000000003101\"),\n    EDGE_CALL(\"0x0000000000000000000000000000000000003001\");\n\n    private String address;\n\n    PrecompileAddress(String addr) {\n        this.address = addr;\n    }\n", "    public String getAddress() {\n        return address;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/common/ChainId.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.common;\n\npublic enum ChainId {\n    MAIN_NET(1),\n    TEST_NET(2);\n\n    private int id;\n\n    ChainId(int id) {\n        this.id = id;\n    }\n", "    public int getId() {\n        return id;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/Sign.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.bouncycastle.asn1.x9.X9ECParameters;\nimport org.bouncycastle.asn1.x9.X9IntegerConverter;\nimport org.bouncycastle.crypto.ec.CustomNamedCurves;\nimport org.bouncycastle.crypto.params.ECDomainParameters;", "import org.bouncycastle.crypto.ec.CustomNamedCurves;\nimport org.bouncycastle.crypto.params.ECDomainParameters;\nimport org.bouncycastle.math.ec.ECAlgorithms;\nimport org.bouncycastle.math.ec.ECPoint;\nimport org.bouncycastle.math.ec.FixedPointCombMultiplier;\nimport org.bouncycastle.math.ec.custom.sec.SecP256K1Curve;\nimport org.web3j.crypto.ECDSASignature;\nimport org.web3j.crypto.ECKeyPair;\nimport org.web3j.crypto.Hash;\nimport org.web3j.crypto.StructuredDataEncoder;", "import org.web3j.crypto.Hash;\nimport org.web3j.crypto.StructuredDataEncoder;\nimport org.web3j.utils.Numeric;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\nimport java.security.SignatureException;\nimport java.util.Arrays;\n", "import java.util.Arrays;\n\nimport static org.bouncycastle.util.BigIntegers.TWO;\nimport static org.web3j.utils.Assertions.verifyPrecondition;\n\n/**\n * Transaction signing logic.\n *\n * <p>Adapted from the <a\n * href=\"https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/core/ECKey.java\">", " * <p>Adapted from the <a\n * href=\"https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/core/ECKey.java\">\n * BitcoinJ ECKey</a> implementation.\n */\npublic class Sign {\n\n    public static final X9ECParameters CURVE_PARAMS = CustomNamedCurves.getByName(\"secp256k1\");\n    public static final int CHAIN_ID_INC = 35;\n    public static final int LOWER_REAL_V = 27;\n    // The v signature parameter starts at 37 because 1 is the first valid chainId so:\n    // chainId >= 1 implies that 2 * chainId + CHAIN_ID_INC >= 37.\n    // https://eips.ethereum.org/EIPS/eip-155", "    public static final int LOWER_REAL_V = 27;\n    // The v signature parameter starts at 37 because 1 is the first valid chainId so:\n    // chainId >= 1 implies that 2 * chainId + CHAIN_ID_INC >= 37.\n    // https://eips.ethereum.org/EIPS/eip-155\n    public static final int REPLAY_PROTECTED_V_MIN = 37;\n    static final ECDomainParameters CURVE =\n            new ECDomainParameters(\n                    CURVE_PARAMS.getCurve(),\n                    CURVE_PARAMS.getG(),\n                    CURVE_PARAMS.getN(),\n                    CURVE_PARAMS.getH());\n    static final BigInteger HALF_CURVE_ORDER = CURVE_PARAMS.getN().shiftRight(1);\n\n    static final String MESSAGE_PREFIX = \"\\u0019Ethereum Signed Message:\\n\";\n\n    static byte[] getEthereumMessagePrefix(int messageLength) {\n        return MESSAGE_PREFIX\n                .concat(String.valueOf(messageLength))\n                .getBytes(StandardCharsets.UTF_8);\n    }\n", "    public static byte[] getEthereumMessageHash(byte[] message) {\n        byte[] prefix = getEthereumMessagePrefix(message.length);\n\n        byte[] result = new byte[prefix.length + message.length];\n        System.arraycopy(prefix, 0, result, 0, prefix.length);\n        System.arraycopy(message, 0, result, prefix.length, message.length);\n\n        return Hash.sha3(result);\n    }\n\n    public static SignatureData signPrefixedMessage(byte[] message, ECKeyPair keyPair) {\n        return signMessage(getEthereumMessageHash(message), keyPair, false);\n    }\n", "    public static SignatureData signPrefixedMessage(byte[] message, ECKeyPair keyPair) {\n        return signMessage(getEthereumMessageHash(message), keyPair, false);\n    }\n\n    public static SignatureData signMessage(byte[] message, ECKeyPair keyPair) {\n        return signMessage(message, keyPair, true);\n    }\n\n    public static SignatureData signTypedData(String jsonData, ECKeyPair keyPair)\n            throws IOException {\n        StructuredDataEncoder dataEncoder = new StructuredDataEncoder(jsonData);\n        byte[] hashStructuredData = dataEncoder.hashStructuredData();\n\n        return signMessage(hashStructuredData, keyPair, false);\n    }\n", "    public static SignatureData signTypedData(String jsonData, ECKeyPair keyPair)\n            throws IOException {\n        StructuredDataEncoder dataEncoder = new StructuredDataEncoder(jsonData);\n        byte[] hashStructuredData = dataEncoder.hashStructuredData();\n\n        return signMessage(hashStructuredData, keyPair, false);\n    }\n\n    public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean needToHash) {\n        BigInteger publicKey = keyPair.getPublicKey();\n        byte[] messageHash;", "    public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean needToHash) {\n        BigInteger publicKey = keyPair.getPublicKey();\n        byte[] messageHash;\n        if (needToHash) {\n            messageHash = Hash.sha3(message);\n        } else {\n            messageHash = message;\n        }\n\n        ECDSASignature sig = keyPair.sign(messageHash);\n\n        return createSignatureData(sig, publicKey, messageHash);\n    }\n\n    /**\n     * Signature without EIP-155 (Simple replay attack protection)\n     * https://eips.ethereum.org/EIPS/eip-155 To add EIP-155 call\n     * TransactionEncoder.createEip155SignatureData after that.\n     */", "    public static SignatureData createSignatureData(\n            ECDSASignature sig, BigInteger publicKey, byte[] messageHash) {\n        // Now we have to work backwards to figure out the recId needed to recover the signature.\n        int recId = -1;\n        for (int i = 0; i < 4; i++) {\n            BigInteger k = recoverFromSignature(i, sig, messageHash);\n            if (k != null && k.equals(publicKey)) {\n                recId = i;\n                break;\n            }\n        }", "        if (recId == -1) {\n            throw new RuntimeException(\n                    \"Could not construct a recoverable key. Are your credentials valid?\");\n        }\n\n        int headerByte = recId + 27;\n\n        // 1 header + 32 bytes for R + 32 bytes for S\n        byte[] v = new byte[] {(byte) headerByte};\n        byte[] r = Numeric.toBytesPadded(sig.r, 32);\n        byte[] s = Numeric.toBytesPadded(sig.s, 32);\n\n        return new SignatureData(v, r, s);\n    }\n\n    /**\n     * Given the components of a signature and a selector value, recover and return the public key\n     * that generated the signature according to the algorithm in SEC1v2 section 4.1.6.\n     *\n     * <p>The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the\n     * correct one. Because the key recovery operation yields multiple potential keys, the correct\n     * key must either be stored alongside the signature, or you must be willing to try each recId\n     * in turn until you find one that outputs the key you are expecting.\n     *\n     * <p>If this method returns null it means recovery was not possible and recId should be\n     * iterated.\n     *\n     * <p>Given the above two points, a correct usage of this method is inside a for loop from 0 to\n     * 3, and if the output is null OR a key that is not the one you expect, you try again with the\n     * next recId.\n     *\n     * @param recId Which possible key to recover.\n     * @param sig the R and S components of the signature, wrapped.\n     * @param message Hash of the data that was signed.\n     * @return An ECKey containing only the public part, or null if recovery wasn't possible.\n     */", "    public static BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message) {\n        verifyPrecondition(recId >= 0 && recId <= 3, \"recId must be in the range of [0, 3]\");\n        verifyPrecondition(sig.r.signum() >= 0, \"r must be positive\");\n        verifyPrecondition(sig.s.signum() >= 0, \"s must be positive\");\n        verifyPrecondition(message != null, \"message cannot be null\");\n\n        // 1.0 For j from 0 to h   (h == recId here and the loop is outside this function)\n        //   1.1 Let x = r + jn\n        BigInteger n = CURVE.getN(); // Curve order.\n        BigInteger i = BigInteger.valueOf((long) recId / 2);\n        BigInteger x = sig.r.add(i.multiply(n));\n        //   1.2. Convert the integer x to an octet string X of length mlen using the conversion\n        //        routine specified in Section 2.3.7, where mlen = \u2308(log2 p)/8\u2309 or mlen = \u2308m/8\u2309.\n        //   1.3. Convert the octet string (16 set binary digits)||X to an elliptic curve point R\n        //        using the conversion routine specified in Section 2.3.4. If this conversion\n        //        routine outputs \"invalid\", then do another iteration of Step 1.\n        //\n        // More concisely, what these points mean is to use X as a compressed public key.\n        BigInteger prime = SecP256K1Curve.q;", "        if (x.compareTo(prime) >= 0) {\n            // Cannot have point co-ordinates larger than this as everything takes place modulo Q.\n            return null;\n        }\n        // Compressed keys require you to know an extra bit of data about the y-coord as there are\n        // two possibilities. So it's encoded in the recId.\n        ECPoint R = decompressKey(x, (recId & 1) == 1);\n        //   1.4. If nR != point at infinity, then do another iteration of Step 1 (callers\n        //        responsibility).\n        if (!R.multiply(n).isInfinity()) {\n            return null;\n        }\n        //   1.5. Compute e from M using Steps 2 and 3 of ECDSA signature verification.\n        BigInteger e = new BigInteger(1, message);\n        //   1.6. For k from 1 to 2 do the following.   (loop is outside this function via\n        //        iterating recId)", "        if (!R.multiply(n).isInfinity()) {\n            return null;\n        }\n        //   1.5. Compute e from M using Steps 2 and 3 of ECDSA signature verification.\n        BigInteger e = new BigInteger(1, message);\n        //   1.6. For k from 1 to 2 do the following.   (loop is outside this function via\n        //        iterating recId)\n        //   1.6.1. Compute a candidate public key as:\n        //               Q = mi(r) * (sR - eG)\n        //\n        // Where mi(x) is the modular multiplicative inverse. We transform this into the following:\n        //               Q = (mi(r) * s ** R) + (mi(r) * -e ** G)\n        // Where -e is the modular additive inverse of e, that is z such that z + e = 0 (mod n).\n        // In the above equation ** is point multiplication and + is point addition (the EC group\n        // operator).\n        //\n        // We can find the additive inverse by subtracting e from zero then taking the mod. For\n        // example the additive inverse of 3 modulo 11 is 8 because 3 + 8 mod 11 = 0, and\n        // -3 mod 11 = 8.\n        BigInteger eInv = BigInteger.ZERO.subtract(e).mod(n);\n        BigInteger rInv = sig.r.modInverse(n);\n        BigInteger srInv = rInv.multiply(sig.s).mod(n);\n        BigInteger eInvrInv = rInv.multiply(eInv).mod(n);\n        ECPoint q = ECAlgorithms.sumOfTwoMultiplies(CURVE.getG(), eInvrInv, R, srInv);\n\n        byte[] qBytes = q.getEncoded(false);\n        // We remove the prefix\n        return new BigInteger(1, Arrays.copyOfRange(qBytes, 1, qBytes.length));\n    }\n\n    /** Decompress a compressed public key (x co-ord and low-bit of y-coord). */\n    private static ECPoint decompressKey(BigInteger xBN, boolean yBit) {\n        X9IntegerConverter x9 = new X9IntegerConverter();\n        byte[] compEnc = x9.integerToBytes(xBN, 1 + x9.getByteLength(CURVE.getCurve()));\n        compEnc[0] = (byte) (yBit ? 0x03 : 0x02);\n        return CURVE.getCurve().decodePoint(compEnc);\n    }\n\n    /**\n     * Given an arbitrary piece of text and an Ethereum message signature encoded in bytes, returns", "     * the public key that was used to sign it. This can then be compared to the expected public key\n     * to determine if the signature was correct.\n     *\n     * @param message RLP encoded message.\n     * @param signatureData The message signature components\n     * @return the public key used to sign the message\n     * @throws SignatureException If the public key could not be recovered or if there was a\n     *     signature format error.\n     */\n    public static BigInteger signedMessageToKey(byte[] message, SignatureData signatureData)\n            throws SignatureException {\n        return signedMessageHashToKey(Hash.sha3(message), signatureData);\n    }\n\n    /**\n     * Given an arbitrary message and an Ethereum message signature encoded in bytes, returns the", "    public static BigInteger signedMessageToKey(byte[] message, SignatureData signatureData)\n            throws SignatureException {\n        return signedMessageHashToKey(Hash.sha3(message), signatureData);\n    }\n\n    /**\n     * Given an arbitrary message and an Ethereum message signature encoded in bytes, returns the\n     * public key that was used to sign it. This can then be compared to the expected public key to\n     * determine if the signature was correct.\n     *\n     * @param message The message.\n     * @param signatureData The message signature components", "     * @return the public key used to sign the message\n     * @throws SignatureException If the public key could not be recovered or if there was a\n     *     signature format error.\n     */\n    public static BigInteger signedPrefixedMessageToKey(byte[] message, SignatureData signatureData)\n            throws SignatureException {\n        return signedMessageHashToKey(getEthereumMessageHash(message), signatureData);\n    }\n\n    /**\n     * Given an arbitrary message hash and an Ethereum message signature encoded in bytes, returns", "     * the public key that was used to sign it. This can then be compared to the expected public key\n     * to determine if the signature was correct.\n     *\n     * @param messageHash The message hash.\n     * @param signatureData The message signature components\n     * @return the public key used to sign the message\n     * @throws SignatureException If the public key could not be recovered or if there was a\n     *     signature format error.\n     */\n    public static BigInteger signedMessageHashToKey(byte[] messageHash, SignatureData signatureData)\n            throws SignatureException {\n\n        byte[] r = signatureData.getR();\n        byte[] s = signatureData.getS();\n        verifyPrecondition(r != null && r.length == 32, \"r must be 32 bytes\");\n        verifyPrecondition(s != null && s.length == 32, \"s must be 32 bytes\");\n\n        int header = signatureData.getV()[0] & 0xFF;\n        // The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,\n        //                  0x1D = second key with even y, 0x1E = second key with odd y", "    public static BigInteger signedMessageHashToKey(byte[] messageHash, SignatureData signatureData)\n            throws SignatureException {\n\n        byte[] r = signatureData.getR();\n        byte[] s = signatureData.getS();\n        verifyPrecondition(r != null && r.length == 32, \"r must be 32 bytes\");\n        verifyPrecondition(s != null && s.length == 32, \"s must be 32 bytes\");\n\n        int header = signatureData.getV()[0] & 0xFF;\n        // The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,\n        //                  0x1D = second key with even y, 0x1E = second key with odd y", "        if (header < 27 || header > 34) {\n            throw new SignatureException(\"Header byte out of range: \" + header);\n        }\n\n        ECDSASignature sig =\n                new ECDSASignature(\n                        new BigInteger(1, signatureData.getR()),\n                        new BigInteger(1, signatureData.getS()));\n\n        int recId = header - 27;\n        BigInteger key = recoverFromSignature(recId, sig, messageHash);", "        if (key == null) {\n            throw new SignatureException(\"Could not recover public key from signature\");\n        }\n        return key;\n    }\n\n    /**\n     * Returns recovery ID.\n     *\n     * @param signatureData The message signature components\n     * @param chainId of the network\n     * @return int recovery ID\n     */", "    public static int getRecId(SignatureData signatureData, long chainId) {\n        BigInteger v = Numeric.toBigInt(signatureData.getV());\n        BigInteger lowerRealV = BigInteger.valueOf(LOWER_REAL_V);\n        BigInteger lowerRealVPlus1 = BigInteger.valueOf(LOWER_REAL_V + 1);\n        BigInteger lowerRealVReplayProtected = BigInteger.valueOf(REPLAY_PROTECTED_V_MIN);\n        BigInteger chainIdInc = BigInteger.valueOf(CHAIN_ID_INC);\n        if (v.equals(lowerRealV) || v.equals(lowerRealVPlus1)) {\n            return v.subtract(lowerRealV).intValue();\n        } else if (v.compareTo(lowerRealVReplayProtected) >= 0) {\n            return v.subtract(BigInteger.valueOf(chainId).multiply(TWO))\n                    .subtract(chainIdInc)\n                    .intValue();\n        } else {\n            throw new IllegalArgumentException(String.format(\"Unsupported v parameter: %s\", v));\n        }\n    }\n\n    /**\n     * Returns the header 'v'.\n     *\n     * @param recId The recovery id.\n     * @return byte[] header 'v'.\n     */", "        } else if (v.compareTo(lowerRealVReplayProtected) >= 0) {\n            return v.subtract(BigInteger.valueOf(chainId).multiply(TWO))\n                    .subtract(chainIdInc)\n                    .intValue();\n        } else {\n            throw new IllegalArgumentException(String.format(\"Unsupported v parameter: %s\", v));\n        }\n    }\n\n    /**\n     * Returns the header 'v'.\n     *\n     * @param recId The recovery id.\n     * @return byte[] header 'v'.\n     */", "    public static byte[] getVFromRecId(int recId) {\n        return new byte[] {(byte) (LOWER_REAL_V + recId)};\n    }\n\n    /**\n     * Returns public key from the given private key.\n     *\n     * @param privKey the private key to derive the public key from\n     * @return BigInteger encoded public key\n     */\n    public static BigInteger publicKeyFromPrivate(BigInteger privKey) {\n        ECPoint point = publicPointFromPrivate(privKey);\n\n        byte[] encoded = point.getEncoded(false);\n        return new BigInteger(1, Arrays.copyOfRange(encoded, 1, encoded.length)); // remove prefix\n    }\n\n    /**", "    public static BigInteger publicKeyFromPrivate(BigInteger privKey) {\n        ECPoint point = publicPointFromPrivate(privKey);\n\n        byte[] encoded = point.getEncoded(false);\n        return new BigInteger(1, Arrays.copyOfRange(encoded, 1, encoded.length)); // remove prefix\n    }\n\n    /**\n     * Returns public key point from the given private key.\n     *\n     * @param privKey the private key to derive the public key from\n     * @return ECPoint public key\n     */", "     * Returns public key point from the given private key.\n     *\n     * @param privKey the private key to derive the public key from\n     * @return ECPoint public key\n     */\n    public static ECPoint publicPointFromPrivate(BigInteger privKey) {\n        /*\n         * TODO: FixedPointCombMultiplier currently doesn't support scalars longer than the group\n         * order, but that could change in future versions.\n         */\n        if (privKey.bitLength() > CURVE.getN().bitLength()) {\n            privKey = privKey.mod(CURVE.getN());\n        }\n        return new FixedPointCombMultiplier().multiply(CURVE.getG(), privKey);\n    }\n\n    /**", "        if (privKey.bitLength() > CURVE.getN().bitLength()) {\n            privKey = privKey.mod(CURVE.getN());\n        }\n        return new FixedPointCombMultiplier().multiply(CURVE.getG(), privKey);\n    }\n\n    /**\n     * Returns public key point from the given curve.\n     *\n     * @param bits representing the point on the curve\n     * @return BigInteger encoded public key\n     */", "    public static BigInteger publicFromPoint(byte[] bits) {\n        return new BigInteger(1, Arrays.copyOfRange(bits, 1, bits.length)); // remove prefix\n    }\n\n    public static class SignatureData {\n        private final byte[] v;\n        private final byte[] r;\n        private final byte[] s;\n\n        public SignatureData(byte v, byte[] r, byte[] s) {\n            this(new byte[] {v}, r, s);\n        }\n\n        public SignatureData(byte[] v, byte[] r, byte[] s) {\n            this.v = v;\n            this.r = r;\n            this.s = s;\n        }\n\n        public byte[] getV() {\n            return v;\n        }\n\n        public byte[] getR() {\n            return r;\n        }\n\n        public byte[] getS() {\n            return s;\n        }\n\n        @Override", "        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (o == null || getClass() != o.getClass()) {\n                return false;\n            }\n\n            SignatureData that = (SignatureData) o;\n\n            if (!Arrays.equals(v, that.v)) {\n                return false;\n            }", "            if (!Arrays.equals(v, that.v)) {\n                return false;\n            }\n            if (!Arrays.equals(r, that.r)) {\n                return false;\n            }\n            return Arrays.equals(s, that.s);\n        }\n\n        @Override\n        public int hashCode() {\n            int result = Arrays.hashCode(v);\n            result = 31 * result + Arrays.hashCode(r);\n            result = 31 * result + Arrays.hashCode(s);\n            return result;\n        }\n    }\n}\n", "        public int hashCode() {\n            int result = Arrays.hashCode(v);\n            result = 31 * result + Arrays.hashCode(r);\n            result = 31 * result + Arrays.hashCode(s);\n            return result;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/RtcMsgEncoder.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.web3j.crypto.Credentials;\nimport org.web3j.rlp.RlpEncoder;\nimport org.web3j.rlp.RlpList;\nimport org.web3j.rlp.RlpType;", "import org.web3j.rlp.RlpList;\nimport org.web3j.rlp.RlpType;\nimport org.web3j.utils.Numeric;\n\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\nimport static org.web3j.crypto.Sign.CHAIN_ID_INC;\nimport static org.web3j.crypto.Sign.LOWER_REAL_V;", "import static org.web3j.crypto.Sign.CHAIN_ID_INC;\nimport static org.web3j.crypto.Sign.LOWER_REAL_V;\n\n/**\n * Create RLP encoded transaction, implementation <a href=\"http://www.edgematrix.pro/api/paper.pdf\">yellow\n * paper</a>.\n */\npublic class RtcMsgEncoder {\n\n    /**\n     * Use for RtcMsg\n     *\n     * @return signature\n     */", "    public static byte[] signMessage(\n            RawRtcMsg rawTransaction, long chainId, Credentials credentials) {\n\n        byte[] encodedTransaction = encode(rawTransaction, chainId);\n        Sign.SignatureData signatureData =\n                Sign.signMessage(encodedTransaction, credentials.getEcKeyPair());\n\n        Sign.SignatureData eip155SignatureData = createEip155SignatureData(signatureData, chainId);\n        return encode(rawTransaction, eip155SignatureData);\n    }\n", "    public static Sign.SignatureData createEip155SignatureData(\n            Sign.SignatureData signatureData, long chainId) {\n        BigInteger v = Numeric.toBigInt(signatureData.getV());\n        v = v.subtract(BigInteger.valueOf(LOWER_REAL_V));\n        v = v.add(BigInteger.valueOf(chainId).multiply(BigInteger.valueOf(2)));\n        v = v.add(BigInteger.valueOf(CHAIN_ID_INC));\n\n        return new Sign.SignatureData(v.toByteArray(), signatureData.getR(), signatureData.getS());\n    }\n\n    public static byte[] encode(RawRtcMsg rawTransaction) {\n        return encode(rawTransaction, null);\n    }\n\n    /**\n     * Encode RtcMsg with chainId together\n     *\n     * @return encoded bytes\n     */", "    public static byte[] encode(RawRtcMsg rawTransaction) {\n        return encode(rawTransaction, null);\n    }\n\n    /**\n     * Encode RtcMsg with chainId together\n     *\n     * @return encoded bytes\n     */\n    public static byte[] encode(RawRtcMsg rawTransaction, long chainId) {\n        Sign.SignatureData signatureData =\n                new Sign.SignatureData(longToBytes(chainId), new byte[]{}, new byte[]{});\n        return encode(rawTransaction, signatureData);\n    }\n", "    public static byte[] encode(RawRtcMsg rawTransaction, long chainId) {\n        Sign.SignatureData signatureData =\n                new Sign.SignatureData(longToBytes(chainId), new byte[]{}, new byte[]{});\n        return encode(rawTransaction, signatureData);\n    }\n\n    public static byte[] encode(RawRtcMsg rawTransaction, Sign.SignatureData signatureData) {\n        List<RlpType> values = asRlpValues(rawTransaction, signatureData);\n        RlpList rlpList = new RlpList(values);\n        byte[] encoded = RlpEncoder.encode(rlpList);\n\n        return encoded;\n    }\n\n    private static byte[] longToBytes(long x) {\n        ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);\n        buffer.putLong(x);\n        return buffer.array();\n    }\n", "    public static List<RlpType> asRlpValues(\n            RawRtcMsg rawTransaction, Sign.SignatureData signatureData) {\n        return rawTransaction.getTransaction().asRlpValues(signatureData);\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/RawRtcMsg.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.web3j.rlp.RlpType;\nimport pro.edgematrix.crypto.type.IRtcMsg;\nimport pro.edgematrix.crypto.type.RtcMsg;\nimport pro.edgematrix.crypto.type.RtcMsgType;", "import pro.edgematrix.crypto.type.RtcMsg;\nimport pro.edgematrix.crypto.type.RtcMsgType;\n\nimport java.util.List;\n\n/**\n * RawRtcMsg class used for signing RawRtcMsg locally.<br>\n * For the specification, refer to <a href=\"http://www.edgematrix.pro/api/paper.pdf\">yellow\n * paper</a>.\n */\npublic class RawRtcMsg {\n\n    private final IRtcMsg transaction;\n\n    protected RawRtcMsg(final IRtcMsg transaction) {\n        this.transaction = transaction;\n    }\n\n", " * paper</a>.\n */\npublic class RawRtcMsg {\n\n    private final IRtcMsg transaction;\n\n    protected RawRtcMsg(final IRtcMsg transaction) {\n        this.transaction = transaction;\n    }\n\n", "    public static RawRtcMsg createRtcMsg(\n            String subject, String application, String content, String to) {\n        return new RawRtcMsg(\n                RtcMsg.createContractTransaction(\n                        subject, application, content, to));\n    }\n\n    public List<RlpType> asRlpValues(Sign.SignatureData signatureData) {\n        return transaction.asRlpValues(signatureData);\n    }\n", "    public String getSubject() {\n        return transaction.getSubject();\n    }\n\n    public String getApplication() {\n        return transaction.getApplication();\n    }\n\n    public String getContent() {\n        return transaction.getContent();\n    }\n", "    public String getContent() {\n        return transaction.getContent();\n    }\n\n    public String getTo() {\n        return transaction.getTo();\n    }\n\n    public RtcMsgType getType() {\n        return transaction.getType();\n    }\n", "    public RtcMsgType getType() {\n        return transaction.getType();\n    }\n\n    public IRtcMsg getTransaction() {\n        return transaction;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/TelegramEncoder.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.web3j.crypto.Credentials;\nimport org.web3j.crypto.Sign;\nimport org.web3j.crypto.exception.CryptoWeb3jException;\nimport org.web3j.rlp.RlpEncoder;", "import org.web3j.crypto.exception.CryptoWeb3jException;\nimport org.web3j.rlp.RlpEncoder;\nimport org.web3j.rlp.RlpList;\nimport org.web3j.rlp.RlpType;\nimport org.web3j.utils.Numeric;\n\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\nimport java.util.List;\n", "import java.util.List;\n\nimport static org.web3j.crypto.Sign.CHAIN_ID_INC;\nimport static org.web3j.crypto.Sign.LOWER_REAL_V;\n\n/**\n * Create RLP encoded transaction, implementation as per p4 of the <a\n * href=\"http://gavwood.com/paper.pdf\">yellow paper</a>.\n */\npublic class TelegramEncoder {\n\n    /**\n     * Use for new transactions Eip1559 (this txs has a new field chainId) or an old one before\n     * Eip155\n     *\n     * @return signature\n     */", " */\npublic class TelegramEncoder {\n\n    /**\n     * Use for new transactions Eip1559 (this txs has a new field chainId) or an old one before\n     * Eip155\n     *\n     * @return signature\n     */\n    public static byte[] signMessage(RawTelegram rawTransaction, Credentials credentials) {\n        byte[] encodedTransaction = encode(rawTransaction);\n        org.web3j.crypto.Sign.SignatureData signatureData =\n                org.web3j.crypto.Sign.signMessage(encodedTransaction, credentials.getEcKeyPair());\n\n        return encode(rawTransaction, signatureData);\n    }\n\n    /**\n     * Use for legacy txs (after Eip155 before Eip1559)\n     *\n     * @return signature\n     */", "    public static byte[] signMessage(RawTelegram rawTransaction, Credentials credentials) {\n        byte[] encodedTransaction = encode(rawTransaction);\n        org.web3j.crypto.Sign.SignatureData signatureData =\n                org.web3j.crypto.Sign.signMessage(encodedTransaction, credentials.getEcKeyPair());\n\n        return encode(rawTransaction, signatureData);\n    }\n\n    /**\n     * Use for legacy txs (after Eip155 before Eip1559)\n     *\n     * @return signature\n     */", "    public static byte[] signMessage(\n            RawTelegram rawTransaction, long chainId, Credentials credentials) {\n\n        // Eip1559: Tx has ChainId inside\n        if (rawTransaction.getType().isEip1559()) {\n            return signMessage(rawTransaction, credentials);\n        }\n\n        byte[] encodedTransaction = encode(rawTransaction, chainId);\n        org.web3j.crypto.Sign.SignatureData signatureData =\n                org.web3j.crypto.Sign.signMessage(encodedTransaction, credentials.getEcKeyPair());\n\n        org.web3j.crypto.Sign.SignatureData eip155SignatureData = createEip155SignatureData(signatureData, chainId);\n        return encode(rawTransaction, eip155SignatureData);\n    }\n\n", "    public static org.web3j.crypto.Sign.SignatureData createEip155SignatureData(\n            org.web3j.crypto.Sign.SignatureData signatureData, long chainId) {\n        BigInteger v = Numeric.toBigInt(signatureData.getV());\n        v = v.subtract(BigInteger.valueOf(LOWER_REAL_V));\n        v = v.add(BigInteger.valueOf(chainId).multiply(BigInteger.valueOf(2)));\n        v = v.add(BigInteger.valueOf(CHAIN_ID_INC));\n\n        return new org.web3j.crypto.Sign.SignatureData(v.toByteArray(), signatureData.getR(), signatureData.getS());\n    }\n\n", "    public static byte[] encode(RawTelegram rawTransaction) {\n        return encode(rawTransaction, null);\n    }\n\n    /**\n     * Encode transaction with chainId together, it make sense only for Legacy transactions\n     *\n     * @return encoded bytes\n     */\n    public static byte[] encode(RawTelegram rawTransaction, long chainId) {\n        if (!rawTransaction.getType().isLegacy()) {\n            throw new CryptoWeb3jException(\"Incorrect transaction type. Tx type should be Legacy.\");\n        }\n\n        org.web3j.crypto.Sign.SignatureData signatureData =\n                new org.web3j.crypto.Sign.SignatureData(longToBytes(chainId), new byte[]{}, new byte[]{});\n        return encode(rawTransaction, signatureData);\n    }\n", "    public static byte[] encode(RawTelegram rawTransaction, long chainId) {\n        if (!rawTransaction.getType().isLegacy()) {\n            throw new CryptoWeb3jException(\"Incorrect transaction type. Tx type should be Legacy.\");\n        }\n\n        org.web3j.crypto.Sign.SignatureData signatureData =\n                new org.web3j.crypto.Sign.SignatureData(longToBytes(chainId), new byte[]{}, new byte[]{});\n        return encode(rawTransaction, signatureData);\n    }\n\n    public static byte[] encode(RawTelegram rawTransaction, org.web3j.crypto.Sign.SignatureData signatureData) {\n        List<RlpType> values = asRlpValues(rawTransaction, signatureData);\n        RlpList rlpList = new RlpList(values);\n        byte[] encoded = RlpEncoder.encode(rlpList);\n", "    public static byte[] encode(RawTelegram rawTransaction, org.web3j.crypto.Sign.SignatureData signatureData) {\n        List<RlpType> values = asRlpValues(rawTransaction, signatureData);\n        RlpList rlpList = new RlpList(values);\n        byte[] encoded = RlpEncoder.encode(rlpList);\n\n        if (rawTransaction.getType().isEip1559() || rawTransaction.getType().isEip2930()) {\n            return ByteBuffer.allocate(encoded.length + 1)\n                    .put(rawTransaction.getType().getRlpType())\n                    .put(encoded)\n                    .array();\n        }\n        return encoded;\n    }\n\n    private static byte[] longToBytes(long x) {\n        ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);\n        buffer.putLong(x);\n        return buffer.array();\n    }\n", "    public static List<RlpType> asRlpValues(\n            RawTelegram rawTransaction, Sign.SignatureData signatureData) {\n        return rawTransaction.getTransaction().asRlpValues(signatureData);\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/RawTelegram.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto;\n\nimport org.web3j.crypto.transaction.type.ITransaction;\nimport org.web3j.crypto.transaction.type.LegacyTransaction;\nimport org.web3j.crypto.transaction.type.TransactionType;\nimport org.web3j.utils.Numeric;", "import org.web3j.crypto.transaction.type.TransactionType;\nimport org.web3j.utils.Numeric;\n\nimport java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * Transaction class used for signing transactions locally.<br>\n * For the specification, refer to p4 of the <a href=\"http://gavwood.com/paper.pdf\">yellow\n * paper</a>.", " * For the specification, refer to p4 of the <a href=\"http://gavwood.com/paper.pdf\">yellow\n * paper</a>.\n */\npublic class RawTelegram {\n\n    private final ITransaction transaction;\n\n    protected RawTelegram(final ITransaction transaction) {\n        this.transaction = transaction;\n    }\n\n    protected RawTelegram(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n        this(new LegacyTransaction(nonce, gasPrice, gasLimit, to, value, Numeric.toHexString(data.getBytes(StandardCharsets.UTF_8))));\n    }\n", "    public static RawTelegram createContractTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            BigInteger value,\n            String init) {\n        return new RawTelegram(\n                LegacyTransaction.createContractTransaction(\n                        nonce, gasPrice, gasLimit, value, init));\n    }\n", "    public static RawTelegram createEtherTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value) {\n\n        return new RawTelegram(\n                LegacyTransaction.createEtherTransaction(nonce, gasPrice, gasLimit, to, value));\n    }\n", "    public static RawTelegram createTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n\n        return new RawTelegram(\n                LegacyTransaction.createTransaction(nonce, gasPrice, gasLimit, to, value, Numeric.toHexString(data.getBytes(StandardCharsets.UTF_8))));\n    }\n\n", "    public BigInteger getNonce() {\n        return transaction.getNonce();\n    }\n\n    public BigInteger getGasPrice() {\n        return transaction.getGasPrice();\n    }\n\n    public BigInteger getGasLimit() {\n        return transaction.getGasLimit();\n    }\n", "    public BigInteger getGasLimit() {\n        return transaction.getGasLimit();\n    }\n\n    public String getTo() {\n        return transaction.getTo();\n    }\n\n    public BigInteger getValue() {\n        return transaction.getValue();\n    }\n", "    public BigInteger getValue() {\n        return transaction.getValue();\n    }\n\n    public String getData() {\n        return transaction.getData();\n    }\n\n    public TransactionType getType() {\n        return transaction.getType();\n    }\n", "    public TransactionType getType() {\n        return transaction.getType();\n    }\n\n    public ITransaction getTransaction() {\n        return transaction;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/type/RtcMsg.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto.type;\n\nimport org.web3j.rlp.RlpString;\nimport org.web3j.rlp.RlpType;\nimport org.web3j.utils.Bytes;\nimport org.web3j.utils.Numeric;", "import org.web3j.utils.Bytes;\nimport org.web3j.utils.Numeric;\nimport pro.edgematrix.crypto.Sign;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * RtcMsg class used for signing RtcMsg locally.<br>\n * For the specification, refer to <a href=\"http://www.edgematrix.pro/api/paper.pdf\">yellow", " * RtcMsg class used for signing RtcMsg locally.<br>\n * For the specification, refer to <a href=\"http://www.edgematrix.pro/api/paper.pdf\">yellow\n * paper</a>.\n */\npublic class RtcMsg implements IRtcMsg {\n\n    private RtcMsgType type;\n\n    String subject;\n    String application;\n    String content;\n    String to;\n\n    public RtcMsg(String subject, String application, String content, String to) {\n        this.subject = subject;\n        this.application = application;\n        this.content = content;\n        this.to = to;\n        this.type = RtcMsgType.SubscribeMsg;\n    }\n\n    @Override\n    public List<RlpType> asRlpValues(Sign.SignatureData signatureData) {\n        List<RlpType> result = new ArrayList<>();\n\n        result.add(RlpString.create(getSubject()));\n\n        result.add(RlpString.create(getApplication()));\n        result.add(RlpString.create(getContent()));\n\n        // an empty to address should not be encoded as a numeric 0 value\n        String to = getTo();", "        if (to != null && to.length() > 0) {\n            // addresses that start with zeros should be encoded with the zeros included, not\n            // as numeric values\n            result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n        } else {\n            result.add(RlpString.create(\"\"));\n        }\n\n        if (signatureData != null) {\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getV())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getR())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getS())));\n        }\n\n        return result;\n    }\n", "        if (signatureData != null) {\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getV())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getR())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getS())));\n        }\n\n        return result;\n    }\n\n    public static RtcMsg createContractTransaction(\n            String subject, String application, String content, String to) {\n\n        return new RtcMsg(subject, application, content, to);\n    }\n\n    @Override", "    public static RtcMsg createContractTransaction(\n            String subject, String application, String content, String to) {\n\n        return new RtcMsg(subject, application, content, to);\n    }\n\n    @Override\n    public RtcMsgType getType() {\n        return type;\n    }\n", "    public String getSubject() {\n        return subject;\n    }\n\n    public String getApplication() {\n        return application;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    @Override", "    public String getContent() {\n        return content;\n    }\n\n    @Override\n    public String getTo() {\n        return to;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/type/ITelegram.java", "chunked_list": ["/*\n * Copyright 2021 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto.type;\n\nimport org.web3j.crypto.Sign;\nimport org.web3j.crypto.transaction.type.TransactionType;\nimport org.web3j.rlp.RlpType;\n", "import org.web3j.rlp.RlpType;\n\nimport java.math.BigInteger;\nimport java.util.List;\n\npublic interface ITelegram {\n\n    List<RlpType> asRlpValues(Sign.SignatureData signatureData);\n\n    BigInteger getNonce();\n\n    BigInteger getGasPrice();\n\n    BigInteger getGasLimit();\n\n    String getTo();\n\n    BigInteger getValue();\n\n    String getData();\n\n    TransactionType getType();\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/type/Telegram.java", "chunked_list": ["/*\n * Copyright 2019 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto.type;\n\nimport org.web3j.crypto.Sign;\nimport org.web3j.crypto.transaction.type.LegacyTransaction;\nimport org.web3j.crypto.transaction.type.TransactionType;\nimport org.web3j.rlp.RlpString;", "import org.web3j.crypto.transaction.type.TransactionType;\nimport org.web3j.rlp.RlpString;\nimport org.web3j.rlp.RlpType;\nimport org.web3j.utils.Bytes;\nimport org.web3j.utils.Numeric;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\nimport static org.web3j.crypto.transaction.type.TransactionType.LEGACY;\n\n/**\n * Telegram class used for signing Telegram locally.<br>\n * For the specification, refer to <a href=\"http://www.edgematrix.pro/api/paper.pdf\">yellow\n * paper</a>.\n */\npublic class Telegram implements ITelegram {\n\n    private TransactionType type;\n    private BigInteger nonce;\n    private BigInteger gasPrice;\n    private BigInteger gasLimit;\n    private String to;\n    private BigInteger value;\n    private String data;\n\n    public Telegram(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n        this(LEGACY, nonce, gasPrice, gasLimit, to, value, data);\n    }\n\n    // LegacyTransaction can have only one tx type. Use another constructor.\n    @Deprecated\n    public Telegram(\n            TransactionType type,\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n        this.type = type;\n        this.nonce = nonce;\n        this.gasPrice = gasPrice;\n        this.gasLimit = gasLimit;\n        this.to = to;\n        this.value = value;\n        this.data = data != null ? Numeric.cleanHexPrefix(data) : null;\n    }\n\n    @Override\n    public List<RlpType> asRlpValues(Sign.SignatureData signatureData) {\n        List<RlpType> result = new ArrayList<>();\n\n        result.add(RlpString.create(getNonce()));\n\n        result.add(RlpString.create(getGasPrice()));\n        result.add(RlpString.create(getGasLimit()));\n\n        // an empty to address (contract creation) should not be encoded as a numeric 0 value\n        String to = getTo();", " */\npublic class Telegram implements ITelegram {\n\n    private TransactionType type;\n    private BigInteger nonce;\n    private BigInteger gasPrice;\n    private BigInteger gasLimit;\n    private String to;\n    private BigInteger value;\n    private String data;\n\n    public Telegram(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n        this(LEGACY, nonce, gasPrice, gasLimit, to, value, data);\n    }\n\n    // LegacyTransaction can have only one tx type. Use another constructor.\n    @Deprecated\n    public Telegram(\n            TransactionType type,\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n        this.type = type;\n        this.nonce = nonce;\n        this.gasPrice = gasPrice;\n        this.gasLimit = gasLimit;\n        this.to = to;\n        this.value = value;\n        this.data = data != null ? Numeric.cleanHexPrefix(data) : null;\n    }\n\n    @Override\n    public List<RlpType> asRlpValues(Sign.SignatureData signatureData) {\n        List<RlpType> result = new ArrayList<>();\n\n        result.add(RlpString.create(getNonce()));\n\n        result.add(RlpString.create(getGasPrice()));\n        result.add(RlpString.create(getGasLimit()));\n\n        // an empty to address (contract creation) should not be encoded as a numeric 0 value\n        String to = getTo();", "        if (to != null && to.length() > 0) {\n            // addresses that start with zeros should be encoded with the zeros included, not\n            // as numeric values\n            result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n        } else {\n            result.add(RlpString.create(\"\"));\n        }\n\n        result.add(RlpString.create(getValue()));\n\n        // value field will already be hex encoded, so we need to convert into binary first\n        byte[] data = Numeric.hexStringToByteArray(getData());\n        result.add(RlpString.create(data));\n", "        if (signatureData != null) {\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getV())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getR())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getS())));\n        }\n\n        return result;\n    }\n\n    public static LegacyTransaction createContractTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            BigInteger value,\n            String init) {\n\n        return new LegacyTransaction(nonce, gasPrice, gasLimit, \"\", value, init);\n    }\n", "    public static LegacyTransaction createContractTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            BigInteger value,\n            String init) {\n\n        return new LegacyTransaction(nonce, gasPrice, gasLimit, \"\", value, init);\n    }\n\n    public static LegacyTransaction createEtherTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value) {\n\n        return new LegacyTransaction(nonce, gasPrice, gasLimit, to, value, \"\");\n    }\n", "    public static LegacyTransaction createEtherTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value) {\n\n        return new LegacyTransaction(nonce, gasPrice, gasLimit, to, value, \"\");\n    }\n\n    public static LegacyTransaction createTransaction(\n            BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to, String data) {\n        return createTransaction(nonce, gasPrice, gasLimit, to, BigInteger.ZERO, data);\n    }\n", "    public static LegacyTransaction createTransaction(\n            BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to, String data) {\n        return createTransaction(nonce, gasPrice, gasLimit, to, BigInteger.ZERO, data);\n    }\n\n    public static LegacyTransaction createTransaction(\n            BigInteger nonce,\n            BigInteger gasPrice,\n            BigInteger gasLimit,\n            String to,\n            BigInteger value,\n            String data) {\n\n        return new LegacyTransaction(nonce, gasPrice, gasLimit, to, value, data);\n    }\n\n    @Override", "    public BigInteger getNonce() {\n        return nonce;\n    }\n\n    @Override\n    public BigInteger getGasPrice() {\n        return gasPrice;\n    }\n\n    @Override\n    public BigInteger getGasLimit() {\n        return gasLimit;\n    }\n\n    @Override", "    public BigInteger getGasLimit() {\n        return gasLimit;\n    }\n\n    @Override\n    public String getTo() {\n        return to;\n    }\n\n    @Override\n    public BigInteger getValue() {\n        return value;\n    }\n\n    @Override", "    public BigInteger getValue() {\n        return value;\n    }\n\n    @Override\n    public String getData() {\n        return data;\n    }\n\n    @Override\n    public TransactionType getType() {\n        return type;\n    }\n}\n", "    public TransactionType getType() {\n        return type;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/type/RtcMsgType.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto.type;\n\n\npublic enum RtcMsgType {\n    SubjectMsg(((byte) 0x0)),\n    StateMsg(((byte) 0x01)),\n    SubscribeMsg(((byte) 0x02));\n\n    Byte type;\n\n    RtcMsgType(final Byte type) {\n        this.type = type;\n    }\n", "    public Byte getRlpType() {\n        return type;\n    }\n\n    public boolean isSubject() {\n        return this.equals(RtcMsgType.SubjectMsg);\n    }\n\n    public boolean isState() {\n        return this.equals(RtcMsgType.StateMsg);\n    }\n", "    public boolean isState() {\n        return this.equals(RtcMsgType.StateMsg);\n    }\n\n    public boolean isSubscribe() {\n        return this.equals(RtcMsgType.SubscribeMsg);\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/crypto/type/IRtcMsg.java", "chunked_list": ["/*\n * Copyright 2023 edgematrix Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.crypto.type;\n\nimport org.web3j.rlp.RlpType;\nimport pro.edgematrix.crypto.Sign;\n\nimport java.util.List;", "\nimport java.util.List;\n\npublic interface IRtcMsg {\n\n    List<RlpType> asRlpValues(Sign.SignatureData signatureData);\n\n     String getSubject();\n\n    String getApplication();\n\n    String getContent();\n\n    String getTo();\n\n    RtcMsgType getType();\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/protocol/methods/response/EdgeSendRtcMsg.java", "chunked_list": ["/*\n * Copyright 2019 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.protocol.methods.response;\n\nimport org.web3j.protocol.core.Response;\n\n/** edge_sendRawMsg */\npublic class EdgeSendRtcMsg extends Response<String> {\n}\n", "/** edge_sendRawMsg */\npublic class EdgeSendRtcMsg extends Response<String> {\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/protocol/methods/response/EdgeCallResult.java", "chunked_list": ["/*\n * Copyright 2019 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.protocol.methods.response;\n\n/** EdgeCallResponse. */\npublic class EdgeCallResult {\n    private String telegram_hash;\n    private String response;\n", "    public String getTelegram_hash() {\n        return telegram_hash;\n    }\n\n    public void setTelegram_hash(String telegram_hash) {\n        this.telegram_hash = telegram_hash;\n    }\n\n    public String getResponse() {\n        return response;\n    }\n", "    public String getResponse() {\n        return response;\n    }\n\n    public void setResponse(String response) {\n        this.response = response;\n    }\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/protocol/methods/response/EdgeSendTelegram.java", "chunked_list": ["/*\n * Copyright 2019 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.protocol.methods.response;\n\nimport org.web3j.protocol.core.Response;\n\n/** edge_sendRawTelegram. */\npublic class EdgeSendTelegram extends Response<String> {\n}\n", "/** edge_sendRawTelegram. */\npublic class EdgeSendTelegram extends Response<String> {\n}\n"]}
{"filename": "src/main/java/pro/edgematrix/protocol/core/JsonRpc2_0Web3j.java", "chunked_list": ["/*\n * Copyright 2019 Web3 Labs Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n */\npackage pro.edgematrix.protocol.core;\n\nimport io.reactivex.Flowable;\nimport org.web3j.protocol.Web3j;\nimport org.web3j.protocol.Web3jService;\nimport org.web3j.protocol.core.BatchRequest;", "import org.web3j.protocol.Web3jService;\nimport org.web3j.protocol.core.BatchRequest;\nimport org.web3j.protocol.core.DefaultBlockParameter;\nimport org.web3j.protocol.core.Request;\nimport org.web3j.protocol.core.methods.request.ShhFilter;\nimport org.web3j.protocol.core.methods.request.ShhPost;\nimport org.web3j.protocol.core.methods.request.Transaction;\nimport org.web3j.protocol.core.methods.response.*;\nimport org.web3j.protocol.core.methods.response.admin.AdminDataDir;\nimport org.web3j.protocol.core.methods.response.admin.AdminNodeInfo;", "import org.web3j.protocol.core.methods.response.admin.AdminDataDir;\nimport org.web3j.protocol.core.methods.response.admin.AdminNodeInfo;\nimport org.web3j.protocol.core.methods.response.admin.AdminPeers;\nimport org.web3j.protocol.rx.JsonRpc2_0Rx;\nimport org.web3j.protocol.websocket.events.LogNotification;\nimport org.web3j.protocol.websocket.events.NewHeadsNotification;\nimport org.web3j.utils.Async;\nimport org.web3j.utils.Numeric;\nimport pro.edgematrix.EdgeWeb3j;\nimport pro.edgematrix.protocol.methods.response.EdgeSendRtcMsg;", "import pro.edgematrix.EdgeWeb3j;\nimport pro.edgematrix.protocol.methods.response.EdgeSendRtcMsg;\nimport pro.edgematrix.protocol.methods.response.EdgeSendTelegram;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.util.concurrent.ScheduledExecutorService;\n\n/**", "\n/**\n * JSON-RPC 2.0 factory implementation.\n */\npublic class JsonRpc2_0Web3j implements EdgeWeb3j, Web3j {\n\n    public static final int DEFAULT_BLOCK_TIME = 15 * 1000;\n\n    protected final Web3jService web3jService;\n    private final JsonRpc2_0Rx web3jRx;\n    private final long blockTime;\n    private final ScheduledExecutorService scheduledExecutorService;\n\n    public JsonRpc2_0Web3j(Web3jService web3jService) {\n        this(web3jService, DEFAULT_BLOCK_TIME, Async.defaultExecutorService());\n    }\n\n    public JsonRpc2_0Web3j(\n            Web3jService web3jService,\n            long pollingInterval,\n            ScheduledExecutorService scheduledExecutorService) {\n        this.web3jService = web3jService;\n        this.web3jRx = new JsonRpc2_0Rx(this, scheduledExecutorService);\n        this.blockTime = pollingInterval;\n        this.scheduledExecutorService = scheduledExecutorService;\n    }\n\n    /**\n     * edge json-rpc  methods\n     */\n    @Override\n    public Request<?, EthGetTransactionReceipt> edgeGetTelegramReceipt(String telegramHash) {\n        return new Request<>(\n                \"edge_getTelegramReceipt\",\n                Arrays.asList(telegramHash),\n                web3jService,\n                EthGetTransactionReceipt.class);\n    }\n\n    @Override\n    public Request<?, EthGetTransactionCount> edgeGetTelegramCount(\n            String address, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"edge_getTelegramCount\",\n                Arrays.asList(address, defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetTransactionCount.class);\n    }\n\n    @Override\n    public Request<?, EdgeSendTelegram>\n    edgeSendRawTelegram(String signedTransactionData) {\n        return new Request<>(\n                \"edge_sendRawTelegram\",\n                Arrays.asList(signedTransactionData),\n                web3jService,\n                EdgeSendTelegram.class);\n    }\n\n    @Override\n    public Request<?, EdgeSendRtcMsg>\n    edgeSendRawMsg(String signedTransactionData) {\n        return new Request<>(\n                \"edge_sendRawMsg\",\n                Arrays.asList(signedTransactionData),\n                web3jService,\n                EdgeSendRtcMsg.class);\n    }\n\n    /**\n     * eth json-rpc methods\n     */\n\n    @Override\n    public Request<?, Web3ClientVersion> web3ClientVersion() {\n        return new Request<>(\n                \"web3_clientVersion\",\n                Collections.<String>emptyList(),\n                web3jService,\n                Web3ClientVersion.class);\n    }\n\n    @Override\n    public Request<?, Web3Sha3> web3Sha3(String data) {\n        return new Request<>(\"web3_sha3\", Arrays.asList(data), web3jService, Web3Sha3.class);\n    }\n\n    @Override\n    public Request<?, NetVersion> netVersion() {\n        return new Request<>(\n                \"net_version\", Collections.<String>emptyList(), web3jService, NetVersion.class);\n    }\n\n    @Override\n    public Request<?, NetListening> netListening() {\n        return new Request<>(\n                \"net_listening\", Collections.<String>emptyList(), web3jService, NetListening.class);\n    }\n\n    @Override\n    public Request<?, NetPeerCount> netPeerCount() {\n        return new Request<>(\n                \"net_peerCount\", Collections.<String>emptyList(), web3jService, NetPeerCount.class);\n    }\n\n    @Override\n    public Request<?, AdminNodeInfo> adminNodeInfo() {\n        return new Request<>(\n                \"admin_nodeInfo\", Collections.emptyList(), web3jService, AdminNodeInfo.class);\n    }\n\n    @Override\n    public Request<?, AdminPeers> adminPeers() {\n        return new Request<>(\n                \"admin_peers\", Collections.emptyList(), web3jService, AdminPeers.class);\n    }\n\n    @Override\n    public Request<?, BooleanResponse> adminAddPeer(String url) {\n        return new Request<>(\n                \"admin_addPeer\", Arrays.asList(url), web3jService, BooleanResponse.class);\n    }\n\n    @Override\n    public Request<?, BooleanResponse> adminRemovePeer(String url) {\n        return new Request<>(\n                \"admin_removePeer\", Arrays.asList(url), web3jService, BooleanResponse.class);\n    }\n\n    @Override\n    public Request<?, AdminDataDir> adminDataDir() {\n        return new Request<>(\n                \"admin_datadir\", Collections.emptyList(), web3jService, AdminDataDir.class);\n    }\n\n    @Override\n    public Request<?, EthProtocolVersion> ethProtocolVersion() {\n        return new Request<>(\n                \"eth_protocolVersion\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthProtocolVersion.class);\n    }\n\n    @Override\n    public Request<?, EthChainId> ethChainId() {\n        return new Request<>(\n                \"eth_chainId\", Collections.<String>emptyList(), web3jService, EthChainId.class);\n    }\n\n    @Override\n    public Request<?, EthCoinbase> ethCoinbase() {\n        return new Request<>(\n                \"eth_coinbase\", Collections.<String>emptyList(), web3jService, EthCoinbase.class);\n    }\n\n    @Override\n    public Request<?, EthSyncing> ethSyncing() {\n        return new Request<>(\n                \"eth_syncing\", Collections.<String>emptyList(), web3jService, EthSyncing.class);\n    }\n\n    @Override\n    public Request<?, EthMining> ethMining() {\n        return new Request<>(\n                \"eth_mining\", Collections.<String>emptyList(), web3jService, EthMining.class);\n    }\n\n    @Override\n    public Request<?, EthHashrate> ethHashrate() {\n        return new Request<>(\n                \"eth_hashrate\", Collections.<String>emptyList(), web3jService, EthHashrate.class);\n    }\n\n    @Override\n    public Request<?, EthGasPrice> ethGasPrice() {\n        return new Request<>(\n                \"eth_gasPrice\", Collections.<String>emptyList(), web3jService, EthGasPrice.class);\n    }\n\n    @Override\n    public Request<?, EthMaxPriorityFeePerGas> ethMaxPriorityFeePerGas() {\n        return new Request<>(\n                \"eth_maxPriorityFeePerGas\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthMaxPriorityFeePerGas.class);\n    }\n\n    @Override\n    public Request<?, EthFeeHistory> ethFeeHistory(\n            int blockCount, DefaultBlockParameter newestBlock, List<Double> rewardPercentiles) {\n        return new Request<>(\n                \"eth_feeHistory\",\n                Arrays.asList(\n                        Numeric.encodeQuantity(BigInteger.valueOf(blockCount)),\n                        newestBlock.getValue(),\n                        rewardPercentiles),\n                web3jService,\n                EthFeeHistory.class);\n    }\n\n    @Override\n    public Request<?, EthAccounts> ethAccounts() {\n        return new Request<>(\n                \"eth_accounts\", Collections.<String>emptyList(), web3jService, EthAccounts.class);\n    }\n\n    @Override\n    public Request<?, EthBlockNumber> ethBlockNumber() {\n        return new Request<>(\n                \"eth_blockNumber\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthBlockNumber.class);\n    }\n\n    @Override\n    public Request<?, EthGetBalance> ethGetBalance(\n            String address, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getBalance\",\n                Arrays.asList(address, defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetBalance.class);\n    }\n\n    @Override\n    public Request<?, EthGetStorageAt> ethGetStorageAt(\n            String address, BigInteger position, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getStorageAt\",\n                Arrays.asList(\n                        address,\n                        Numeric.encodeQuantity(position),\n                        defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetStorageAt.class);\n    }\n\n    @Override\n    public Request<?, EthGetTransactionCount> ethGetTransactionCount(\n            String address, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getTransactionCount\",\n                Arrays.asList(address, defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetTransactionCount.class);\n    }\n\n    @Override\n    public Request<?, EthGetBlockTransactionCountByHash> ethGetBlockTransactionCountByHash(\n            String blockHash) {\n        return new Request<>(\n                \"eth_getBlockTransactionCountByHash\",\n                Arrays.asList(blockHash),\n                web3jService,\n                EthGetBlockTransactionCountByHash.class);\n    }\n\n    @Override\n    public Request<?, EthGetBlockTransactionCountByNumber> ethGetBlockTransactionCountByNumber(\n            DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getBlockTransactionCountByNumber\",\n                Arrays.asList(defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetBlockTransactionCountByNumber.class);\n    }\n\n    @Override\n    public Request<?, EthGetUncleCountByBlockHash> ethGetUncleCountByBlockHash(String blockHash) {\n        return new Request<>(\n                \"eth_getUncleCountByBlockHash\",\n                Arrays.asList(blockHash),\n                web3jService,\n                EthGetUncleCountByBlockHash.class);\n    }\n\n    @Override\n    public Request<?, EthGetUncleCountByBlockNumber> ethGetUncleCountByBlockNumber(\n            DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getUncleCountByBlockNumber\",\n                Arrays.asList(defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetUncleCountByBlockNumber.class);\n    }\n\n    @Override\n    public Request<?, EthGetCode> ethGetCode(\n            String address, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getCode\",\n                Arrays.asList(address, defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetCode.class);\n    }\n\n    @Override\n    public Request<?, EthSign> ethSign(String address, String sha3HashOfDataToSign) {\n        return new Request<>(\n                \"eth_sign\",\n                Arrays.asList(address, sha3HashOfDataToSign),\n                web3jService,\n                EthSign.class);\n    }\n\n    @Override\n    public Request<?, org.web3j.protocol.core.methods.response.EthSendTransaction>\n    ethSendTransaction(Transaction transaction) {\n        return new Request<>(\n                \"eth_sendTransaction\",\n                Arrays.asList(transaction),\n                web3jService,\n                org.web3j.protocol.core.methods.response.EthSendTransaction.class);\n    }\n\n    @Override\n    public Request<?, org.web3j.protocol.core.methods.response.EthSendTransaction>\n    ethSendRawTransaction(String signedTransactionData) {\n        return new Request<>(\n                \"edge_sendRawTelegram\",\n                Arrays.asList(signedTransactionData),\n                web3jService,\n                org.web3j.protocol.core.methods.response.EthSendTransaction.class);\n    }\n\n    @Override\n    public Request<?, org.web3j.protocol.core.methods.response.EthCall> ethCall(\n            Transaction transaction, DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_call\",\n                Arrays.asList(transaction, defaultBlockParameter),\n                web3jService,\n                org.web3j.protocol.core.methods.response.EthCall.class);\n    }\n\n    @Override\n    public Request<?, EthEstimateGas> ethEstimateGas(Transaction transaction) {\n        return new Request<>(\n                \"eth_estimateGas\", Arrays.asList(transaction), web3jService, EthEstimateGas.class);\n    }\n\n    @Override\n    public Request<?, EthBlock> ethGetBlockByHash(\n            String blockHash, boolean returnFullTransactionObjects) {\n        return new Request<>(\n                \"eth_getBlockByHash\",\n                Arrays.asList(blockHash, returnFullTransactionObjects),\n                web3jService,\n                EthBlock.class);\n    }\n\n    @Override\n    public Request<?, EthBlock> ethGetBlockByNumber(\n            DefaultBlockParameter defaultBlockParameter, boolean returnFullTransactionObjects) {\n        return new Request<>(\n                \"eth_getBlockByNumber\",\n                Arrays.asList(defaultBlockParameter.getValue(), returnFullTransactionObjects),\n                web3jService,\n                EthBlock.class);\n    }\n\n    @Override\n    public Request<?, EthTransaction> ethGetTransactionByHash(String transactionHash) {\n        return new Request<>(\n                \"eth_getTransactionByHash\",\n                Arrays.asList(transactionHash),\n                web3jService,\n                EthTransaction.class);\n    }\n\n    @Override\n    public Request<?, EthTransaction> ethGetTransactionByBlockHashAndIndex(\n            String blockHash, BigInteger transactionIndex) {\n        return new Request<>(\n                \"eth_getTransactionByBlockHashAndIndex\",\n                Arrays.asList(blockHash, Numeric.encodeQuantity(transactionIndex)),\n                web3jService,\n                EthTransaction.class);\n    }\n\n    @Override\n    public Request<?, EthTransaction> ethGetTransactionByBlockNumberAndIndex(\n            DefaultBlockParameter defaultBlockParameter, BigInteger transactionIndex) {\n        return new Request<>(\n                \"eth_getTransactionByBlockNumberAndIndex\",\n                Arrays.asList(\n                        defaultBlockParameter.getValue(), Numeric.encodeQuantity(transactionIndex)),\n                web3jService,\n                EthTransaction.class);\n    }\n\n    @Override\n    public Request<?, EthGetTransactionReceipt> ethGetTransactionReceipt(String transactionHash) {\n        return new Request<>(\n                \"eth_getTransactionReceipt\",\n                Arrays.asList(transactionHash),\n                web3jService,\n                EthGetTransactionReceipt.class);\n    }\n\n    @Override\n    public Request<?, EthGetBlockReceipts> ethGetBlockReceipts(\n            DefaultBlockParameter defaultBlockParameter) {\n        return new Request<>(\n                \"eth_getBlockReceipts\",\n                Arrays.asList(defaultBlockParameter.getValue()),\n                web3jService,\n                EthGetBlockReceipts.class);\n    }\n\n    @Override\n    public Request<?, EthBlock> ethGetUncleByBlockHashAndIndex(\n            String blockHash, BigInteger transactionIndex) {\n        return new Request<>(\n                \"eth_getUncleByBlockHashAndIndex\",\n                Arrays.asList(blockHash, Numeric.encodeQuantity(transactionIndex)),\n                web3jService,\n                EthBlock.class);\n    }\n\n    @Override\n    public Request<?, EthBlock> ethGetUncleByBlockNumberAndIndex(\n            DefaultBlockParameter defaultBlockParameter, BigInteger uncleIndex) {\n        return new Request<>(\n                \"eth_getUncleByBlockNumberAndIndex\",\n                Arrays.asList(defaultBlockParameter.getValue(), Numeric.encodeQuantity(uncleIndex)),\n                web3jService,\n                EthBlock.class);\n    }\n\n    @Override\n    public Request<?, EthGetCompilers> ethGetCompilers() {\n        return new Request<>(\n                \"eth_getCompilers\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthGetCompilers.class);\n    }\n\n    @Override\n    public Request<?, EthCompileLLL> ethCompileLLL(String sourceCode) {\n        return new Request<>(\n                \"eth_compileLLL\", Arrays.asList(sourceCode), web3jService, EthCompileLLL.class);\n    }\n\n    @Override\n    public Request<?, EthCompileSolidity> ethCompileSolidity(String sourceCode) {\n        return new Request<>(\n                \"eth_compileSolidity\",\n                Arrays.asList(sourceCode),\n                web3jService,\n                EthCompileSolidity.class);\n    }\n\n    @Override\n    public Request<?, EthCompileSerpent> ethCompileSerpent(String sourceCode) {\n        return new Request<>(\n                \"eth_compileSerpent\",\n                Arrays.asList(sourceCode),\n                web3jService,\n                EthCompileSerpent.class);\n    }\n\n    @Override\n    public Request<?, EthFilter> ethNewFilter(\n            org.web3j.protocol.core.methods.request.EthFilter ethFilter) {\n        return new Request<>(\n                \"eth_newFilter\", Arrays.asList(ethFilter), web3jService, EthFilter.class);\n    }\n\n    @Override\n    public Request<?, EthFilter> ethNewBlockFilter() {\n        return new Request<>(\n                \"eth_newBlockFilter\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthFilter.class);\n    }\n\n    @Override\n    public Request<?, EthFilter> ethNewPendingTransactionFilter() {\n        return new Request<>(\n                \"eth_newPendingTransactionFilter\",\n                Collections.<String>emptyList(),\n                web3jService,\n                EthFilter.class);\n    }\n\n    @Override\n    public Request<?, EthUninstallFilter> ethUninstallFilter(BigInteger filterId) {\n        return new Request<>(\n                \"eth_uninstallFilter\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                EthUninstallFilter.class);\n    }\n\n    @Override\n    public Request<?, EthLog> ethGetFilterChanges(BigInteger filterId) {\n        return new Request<>(\n                \"eth_getFilterChanges\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                EthLog.class);\n    }\n\n    @Override\n    public Request<?, EthLog> ethGetFilterLogs(BigInteger filterId) {\n        return new Request<>(\n                \"eth_getFilterLogs\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                EthLog.class);\n    }\n\n    @Override\n    public Request<?, EthLog> ethGetLogs(\n            org.web3j.protocol.core.methods.request.EthFilter ethFilter) {\n        return new Request<>(\"eth_getLogs\", Arrays.asList(ethFilter), web3jService, EthLog.class);\n    }\n\n    @Override\n    public Request<?, EthGetWork> ethGetWork() {\n        return new Request<>(\n                \"eth_getWork\", Collections.<String>emptyList(), web3jService, EthGetWork.class);\n    }\n\n    @Override\n    public Request<?, EthSubmitWork> ethSubmitWork(\n            String nonce, String headerPowHash, String mixDigest) {\n        return new Request<>(\n                \"eth_submitWork\",\n                Arrays.asList(nonce, headerPowHash, mixDigest),\n                web3jService,\n                EthSubmitWork.class);\n    }\n\n    @Override\n    public Request<?, EthSubmitHashrate> ethSubmitHashrate(String hashrate, String clientId) {\n        return new Request<>(\n                \"eth_submitHashrate\",\n                Arrays.asList(hashrate, clientId),\n                web3jService,\n                EthSubmitHashrate.class);\n    }\n\n    @Override\n    public Request<?, DbPutString> dbPutString(\n            String databaseName, String keyName, String stringToStore) {\n        return new Request<>(\n                \"db_putString\",\n                Arrays.asList(databaseName, keyName, stringToStore),\n                web3jService,\n                DbPutString.class);\n    }\n\n    @Override\n    public Request<?, DbGetString> dbGetString(String databaseName, String keyName) {\n        return new Request<>(\n                \"db_getString\",\n                Arrays.asList(databaseName, keyName),\n                web3jService,\n                DbGetString.class);\n    }\n\n    @Override\n    public Request<?, DbPutHex> dbPutHex(String databaseName, String keyName, String dataToStore) {\n        return new Request<>(\n                \"db_putHex\",\n                Arrays.asList(databaseName, keyName, dataToStore),\n                web3jService,\n                DbPutHex.class);\n    }\n\n    @Override\n    public Request<?, DbGetHex> dbGetHex(String databaseName, String keyName) {\n        return new Request<>(\n                \"db_getHex\", Arrays.asList(databaseName, keyName), web3jService, DbGetHex.class);\n    }\n\n    @Override\n    public Request<?, org.web3j.protocol.core.methods.response.ShhPost> shhPost(ShhPost shhPost) {\n        return new Request<>(\n                \"shh_post\",\n                Arrays.asList(shhPost),\n                web3jService,\n                org.web3j.protocol.core.methods.response.ShhPost.class);\n    }\n\n    @Override\n    public Request<?, ShhVersion> shhVersion() {\n        return new Request<>(\n                \"shh_version\", Collections.<String>emptyList(), web3jService, ShhVersion.class);\n    }\n\n    @Override\n    public Request<?, ShhNewIdentity> shhNewIdentity() {\n        return new Request<>(\n                \"shh_newIdentity\",\n                Collections.<String>emptyList(),\n                web3jService,\n                ShhNewIdentity.class);\n    }\n\n    @Override\n    public Request<?, ShhHasIdentity> shhHasIdentity(String identityAddress) {\n        return new Request<>(\n                \"shh_hasIdentity\",\n                Arrays.asList(identityAddress),\n                web3jService,\n                ShhHasIdentity.class);\n    }\n\n    @Override\n    public Request<?, ShhNewGroup> shhNewGroup() {\n        return new Request<>(\n                \"shh_newGroup\", Collections.<String>emptyList(), web3jService, ShhNewGroup.class);\n    }\n\n    @Override\n    public Request<?, ShhAddToGroup> shhAddToGroup(String identityAddress) {\n        return new Request<>(\n                \"shh_addToGroup\",\n                Arrays.asList(identityAddress),\n                web3jService,\n                ShhAddToGroup.class);\n    }\n\n    @Override\n    public Request<?, ShhNewFilter> shhNewFilter(ShhFilter shhFilter) {\n        return new Request<>(\n                \"shh_newFilter\", Arrays.asList(shhFilter), web3jService, ShhNewFilter.class);\n    }\n\n    @Override\n    public Request<?, ShhUninstallFilter> shhUninstallFilter(BigInteger filterId) {\n        return new Request<>(\n                \"shh_uninstallFilter\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                ShhUninstallFilter.class);\n    }\n\n    @Override\n    public Request<?, ShhMessages> shhGetFilterChanges(BigInteger filterId) {\n        return new Request<>(\n                \"shh_getFilterChanges\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                ShhMessages.class);\n    }\n\n    @Override\n    public Request<?, ShhMessages> shhGetMessages(BigInteger filterId) {\n        return new Request<>(\n                \"shh_getMessages\",\n                Arrays.asList(Numeric.toHexStringWithPrefix(filterId)),\n                web3jService,\n                ShhMessages.class);\n    }\n\n    @Override\n    public Request<?, TxPoolStatus> txPoolStatus() {\n        return new Request<>(\n                \"txpool_status\", Collections.<String>emptyList(), web3jService, TxPoolStatus.class);\n    }\n\n    @Override\n    public Flowable<NewHeadsNotification> newHeadsNotifications() {\n        return web3jService.subscribe(\n                new Request<>(\n                        \"eth_subscribe\",\n                        Collections.singletonList(\"newHeads\"),\n                        web3jService,\n                        EthSubscribe.class),\n                \"eth_unsubscribe\",\n                NewHeadsNotification.class);\n    }\n\n    @Override\n    public Flowable<LogNotification> logsNotifications(\n            List<String> addresses, List<String> topics) {\n\n        Map<String, Object> params = createLogsParams(addresses, topics);\n\n        return web3jService.subscribe(\n                new Request<>(\n                        \"eth_subscribe\",\n                        Arrays.asList(\"logs\", params),\n                        web3jService,\n                        EthSubscribe.class),\n                \"eth_unsubscribe\",\n                LogNotification.class);\n    }\n\n    private Map<String, Object> createLogsParams(List<String> addresses, List<String> topics) {\n        Map<String, Object> params = new HashMap<>();", "        if (!addresses.isEmpty()) {\n            params.put(\"address\", addresses);\n        }\n        if (!topics.isEmpty()) {\n            params.put(\"topics\", topics);\n        }\n        return params;\n    }\n\n    @Override\n    public Flowable<String> ethBlockHashFlowable() {\n        return web3jRx.ethBlockHashFlowable(blockTime);\n    }\n\n    @Override\n    public Flowable<String> ethPendingTransactionHashFlowable() {\n        return web3jRx.ethPendingTransactionHashFlowable(blockTime);\n    }\n\n    @Override\n    public Flowable<Log> ethLogFlowable(\n            org.web3j.protocol.core.methods.request.EthFilter ethFilter) {\n        return web3jRx.ethLogFlowable(ethFilter, blockTime);\n    }\n\n    @Override\n    public Flowable<org.web3j.protocol.core.methods.response.Transaction> transactionFlowable() {\n        return web3jRx.transactionFlowable(blockTime);\n    }\n\n    @Override\n    public Flowable<org.web3j.protocol.core.methods.response.Transaction>\n    pendingTransactionFlowable() {\n        return web3jRx.pendingTransactionFlowable(blockTime);\n    }\n\n    @Override\n    public Flowable<EthBlock> blockFlowable(boolean fullTransactionObjects) {\n        return web3jRx.blockFlowable(fullTransactionObjects, blockTime);\n    }\n\n    @Override\n    public Flowable<EthBlock> replayPastBlocksFlowable(\n            DefaultBlockParameter startBlock,\n            DefaultBlockParameter endBlock,\n            boolean fullTransactionObjects) {\n        return web3jRx.replayBlocksFlowable(startBlock, endBlock, fullTransactionObjects);\n    }\n\n    @Override\n    public Flowable<EthBlock> replayPastBlocksFlowable(\n            DefaultBlockParameter startBlock,\n            DefaultBlockParameter endBlock,\n            boolean fullTransactionObjects,\n            boolean ascending) {\n        return web3jRx.replayBlocksFlowable(\n                startBlock, endBlock, fullTransactionObjects, ascending);\n    }\n\n    @Override\n    public Flowable<EthBlock> replayPastBlocksFlowable(\n            DefaultBlockParameter startBlock,\n            boolean fullTransactionObjects,\n            Flowable<EthBlock> onCompleteFlowable) {\n        return web3jRx.replayPastBlocksFlowable(\n                startBlock, fullTransactionObjects, onCompleteFlowable);\n    }\n\n    @Override\n    public Flowable<EthBlock> replayPastBlocksFlowable(\n            DefaultBlockParameter startBlock, boolean fullTransactionObjects) {\n        return web3jRx.replayPastBlocksFlowable(startBlock, fullTransactionObjects);\n    }\n\n    @Override\n    public Flowable<org.web3j.protocol.core.methods.response.Transaction>\n    replayPastTransactionsFlowable(\n            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {\n        return web3jRx.replayTransactionsFlowable(startBlock, endBlock);\n    }\n\n    @Override\n    public Flowable<org.web3j.protocol.core.methods.response.Transaction>\n    replayPastTransactionsFlowable(DefaultBlockParameter startBlock) {\n        return web3jRx.replayPastTransactionsFlowable(startBlock);\n    }\n\n    @Override\n    public Flowable<EthBlock> replayPastAndFutureBlocksFlowable(\n            DefaultBlockParameter startBlock, boolean fullTransactionObjects) {\n        return web3jRx.replayPastAndFutureBlocksFlowable(\n                startBlock, fullTransactionObjects, blockTime);\n    }\n\n    @Override\n    public Flowable<org.web3j.protocol.core.methods.response.Transaction>\n    replayPastAndFutureTransactionsFlowable(DefaultBlockParameter startBlock) {\n        return web3jRx.replayPastAndFutureTransactionsFlowable(startBlock, blockTime);\n    }\n\n    @Override", "    public void shutdown() {\n        scheduledExecutorService.shutdown();\n        try {\n            web3jService.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to close web3j service\", e);\n        }\n    }\n\n    @Override\n    public BatchRequest newBatch() {\n        return new BatchRequest(web3jService);\n    }\n}\n", "    public BatchRequest newBatch() {\n        return new BatchRequest(web3jService);\n    }\n}\n"]}
