{"filename": "src/test/java/com/hs/trace/Test.java", "chunked_list": ["package com.hs.trace;\n\nimport cn.hutool.core.io.FileUtil;\nimport java.io.File;\nimport java.io.FileFilter;\n\npublic class Test {\n\n  public static void main(String[] args) {\n    File file = new File(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\web-site\");\n    File[] htmlList = file.listFiles(new FileFilter() {\n      @Override", "  public static void main(String[] args) {\n    File file = new File(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\web-site\");\n    File[] htmlList = file.listFiles(new FileFilter() {\n      @Override\n      public boolean accept(File pathname) {\n        return pathname.getName().endsWith(\".html\");\n      }\n    });\n    for(File html : htmlList){\n      String content = FileUtil.readString(html,\"UTF-8\");\n      \n    }\n\n  }\n\n}\n", "    for(File html : htmlList){\n      String content = FileUtil.readString(html,\"UTF-8\");\n      \n    }\n\n  }\n\n}\n"]}
{"filename": "src/main/java/com/hs/trace/TraceApplication.java", "chunked_list": ["package com.hs.trace;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableAsync;\n\n\n@SpringBootApplication\n@EnableAsync\npublic class TraceApplication {\n", "@EnableAsync\npublic class TraceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(TraceApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/hs/trace/Test.java", "chunked_list": ["package com.hs.trace;\n\nimport cn.hutool.json.JSONArray;\nimport cn.hutool.json.JSONUtil;\nimport com.hs.trace.service.Point;\nimport com.hs.trace.service.muti.TraceMutiOcr;\n\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;", "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        String ss = \"[{\\\"action\\\":\\\"down\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1175,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1175,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1173,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1173,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1173,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1175,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1175,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1172,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1172,\\\"y\\\":855},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1168,\\\"y\\\":863},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1165,\\\"y\\\":875},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1161,\\\"y\\\":888},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1161,\\\"y\\\":894},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1164,\\\"y\\\":901},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1166,\\\"y\\\":902},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1170,\\\"y\\\":902},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1176,\\\"y\\\":898},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1181,\\\"y\\\":891},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1186,\\\"y\\\":882},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1186,\\\"y\\\":874},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1186,\\\"y\\\":861},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1181,\\\"y\\\":856},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1177,\\\"y\\\":855},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1174,\\\"y\\\":854},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1171,\\\"y\\\":856},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1167,\\\"y\\\":859},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1167,\\\"y\\\":861},{\\\"action\\\":\\\"up\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1167,\\\"y\\\":861}],\\\"10441\\\":[{\\\"action\\\":\\\"down\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1514,\\\"y\\\":854},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1514,\\\"y\\\":854},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1516,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1517,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1515,\\\"y\\\":852},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1515,\\\"y\\\":853},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1514,\\\"y\\\":856},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1508,\\\"y\\\":871},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1503,\\\"y\\\":883},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1500,\\\"y\\\":899},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1499,\\\"y\\\":914},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1500,\\\"y\\\":916},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1508,\\\"y\\\":915},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1520,\\\"y\\\":902},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1522,\\\"y\\\":891},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1522,\\\"y\\\":887},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1518,\\\"y\\\":886},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1508,\\\"y\\\":890},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1500,\\\"y\\\":895},{\\\"action\\\":\\\"move\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1499,\\\"y\\\":896},{\\\"action\\\":\\\"up\\\",\\\"pageserial\\\":\\\"1536.736.31.61\\\",\\\"x\\\":1499,\\\"y\\\":896}]\";\n        JSONArray array = JSONUtil.parseArray(ss);\n        List<Point> pointList = array.toList(Point.class);\n\n        TraceMutiOcr traceMutiOcr = new TraceMutiOcr(\"G:\\\\\u7a81\u53d1\u5947\u60f3\\\\trace\\\\model-number.txt\");\n        String result = traceMutiOcr.ocr(pointList);\n        System.out.println(result);\n    }\n\n    private static String regex(String content ,String regex){\n        Pattern pattern = Pattern.compile(regex,Pattern.DOTALL);\n        Matcher matcher = pattern.matcher(content);", "        if(matcher.find()){\n            return matcher.group(1);\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/com/hs/trace/common/Result.java", "chunked_list": ["package com.hs.trace.common;\n\nimport lombok.Data;\n\n@Data\npublic class Result<T> {\n    /**\n     * \u72b6\u6001\u7801\n     */\n    private int code;\n\n    /**\n     * \u4fe1\u606f\n     */\n    private String msg;\n\n    /**\n     * \u662f\u5426\u5168\u5c40\u5c55\u793a\u9519\u8bef\u6d88\u606f\uff1a1-\u662f\uff0c0-\u5426\n     */\n//    private int isShowMessage = 1;\n\n    /**\n     * \u6570\u636e\n     */\n    private T data;\n\n    public Result() {\n\n    }\n\n    public Result(ResultCodeEnum code, T data) {\n        this.code = code.getValue();\n        this.msg = code.getMsg();\n        this.data = data;\n    }\n\n    public Result(ResultCodeEnum code, String msg, T data) {\n        this.code = code.getValue();\n        this.msg = msg;\n        this.data = data;\n    }\n", "//    public int getCode() {\n//        return code;\n//    }\n//\n//    public void setCode(int code) {\n//        this.code = code;\n//    }\n//\n//    public String getMsg() {\n//        return msg;\n//    }\n//", "//    public String getMsg() {\n//        return msg;\n//    }\n//\n//    public void setMsg(String msg) {\n//        this.msg = msg;\n//    }\n//\n//    public T getData() {\n//        return data;\n//    }\n//", "//    public T getData() {\n//        return data;\n//    }\n//\n//    public void setData(T data) {\n//        this.data = data;\n//    }\n//\n//    public int getIsShowMessage() {\n//        return isShowMessage;\n//    }\n//", "//    public int getIsShowMessage() {\n//        return isShowMessage;\n//    }\n//\n//    public void setIsShowMessage(int isShowMessage) {\n//        this.isShowMessage = isShowMessage;\n//    }\n\n    public boolean success(){\n        return code == ResultCodeEnum.SUC.getValue();\n    }\n}\n", "    public boolean success(){\n        return code == ResultCodeEnum.SUC.getValue();\n    }\n}\n"]}
{"filename": "src/main/java/com/hs/trace/common/ResultCodeEnum.java", "chunked_list": ["package com.hs.trace.common;\n\n/**\n * \u7ed3\u679c\u8fd4\u56de\n */\npublic enum ResultCodeEnum {\n\n    /**\n     * \u57fa\u672c\u7ed3\u679c\u7801\n     */\n    SUC(0, \"\u6210\u529f\"),\n    COMMONERROR(1, \"\u901a\u7528\u9519\u8bef\"),\n    NOT_LOGIN(2, \"\u672a\u767b\u5f55\u6216\u767b\u9646\u5df2\u8fc7\u671f\"),\n\n    ;\n    /**\n     * \u8fd4\u56de\u7801\n     */\n    private int value;\n    /**\n     * \u63cf\u8ff0\u4fe1\u606f\n     */\n    private String msg;\n\n    ResultCodeEnum(int value, String msg) {\n        this.value = value;\n        this.msg = msg;\n    }\n", "    public int getValue() {\n        return value;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public static ResultCodeEnum getEnum(int code) {\n        ResultCodeEnum[] values = values();\n        for (ResultCodeEnum value : values) {", "    public static ResultCodeEnum getEnum(int code) {\n        ResultCodeEnum[] values = values();\n        for (ResultCodeEnum value : values) {\n            if (value.value == code) {\n                return value;\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/com/hs/trace/common/Results.java", "chunked_list": ["package com.hs.trace.common;\n\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\n/**\n * \u8fd4\u56de\u5de5\u5177\u7c7b\n *\n * @author lx\n */\npublic class Results {\n\n    public static <T> Result<T> success() {\n        return new Result<>(ResultCodeEnum.SUC, null);\n    }\n\n    public static <T> Result<T> success(T data) {\n        return new Result<>(ResultCodeEnum.SUC, data);\n    }\n\n    public static <T> Result<T> error() {\n        return new Result<>(ResultCodeEnum.COMMONERROR, null);\n    }\n\n    public static <T> Result<T> error(String msg) {\n        return new Result<>(ResultCodeEnum.COMMONERROR, msg, null);\n    }\n\n    public static <T> Result<T> error(ResultCodeEnum resultCodeEnum) {\n        return new Result<>(resultCodeEnum, null);\n    }\n\n    public static <T> Result<T> errorNotShow(String msg) {\n        Result result = error(msg);\n//        result.setIsShowMessage(0);\n        return result;\n    }\n\n    public static <T> Result<T> errorNotShow(ResultCodeEnum resultCodeEnum) {\n        Result result = error(resultCodeEnum);\n//        result.setIsShowMessage(0);\n        return result;\n    }\n\n    public static <T> Result<T> result(Supplier<Result<T>> supplier) {\n        return supplier.get();\n    }\n\n    public static <T> Result<T> result(T t, Function<T, Result<T>> function) {\n        return function.apply(t);\n    }\n", " * @author lx\n */\npublic class Results {\n\n    public static <T> Result<T> success() {\n        return new Result<>(ResultCodeEnum.SUC, null);\n    }\n\n    public static <T> Result<T> success(T data) {\n        return new Result<>(ResultCodeEnum.SUC, data);\n    }\n\n    public static <T> Result<T> error() {\n        return new Result<>(ResultCodeEnum.COMMONERROR, null);\n    }\n\n    public static <T> Result<T> error(String msg) {\n        return new Result<>(ResultCodeEnum.COMMONERROR, msg, null);\n    }\n\n    public static <T> Result<T> error(ResultCodeEnum resultCodeEnum) {\n        return new Result<>(resultCodeEnum, null);\n    }\n\n    public static <T> Result<T> errorNotShow(String msg) {\n        Result result = error(msg);\n//        result.setIsShowMessage(0);\n        return result;\n    }\n\n    public static <T> Result<T> errorNotShow(ResultCodeEnum resultCodeEnum) {\n        Result result = error(resultCodeEnum);\n//        result.setIsShowMessage(0);\n        return result;\n    }\n\n    public static <T> Result<T> result(Supplier<Result<T>> supplier) {\n        return supplier.get();\n    }\n\n    public static <T> Result<T> result(T t, Function<T, Result<T>> function) {\n        return function.apply(t);\n    }\n", "    public static Result<String> result(boolean ret, String errorMsg) {\n        if (ret) {\n            return new Result<>(ResultCodeEnum.SUC, null);\n        } else {\n            return new Result<>(ResultCodeEnum.COMMONERROR, errorMsg, null);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/hs/trace/controller/TraceController.java", "chunked_list": ["package com.hs.trace.controller;\n\nimport com.hs.trace.common.Result;\nimport com.hs.trace.common.Results;\nimport com.hs.trace.service.Point;\nimport com.hs.trace.service.TraceOcr;\nimport com.hs.trace.service.muti.TraceMutiOcr;\nimport com.hs.trace.service.muti.TraceMutiOcrForVXNotCommon;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.PostConstruct;\nimport java.util.HashMap;\nimport java.util.List;", "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * <p>\n * \u6d4b\u8bd5\u7528\u6a21\u5757\n * </p>\n *\n * @author yuanzong", " *\n * @author yuanzong\n * @since 2020-02-19\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/api/trace\")\npublic class TraceController {\n\n    @Value(\"${file.model}\")\n    private String modelDir;\n\n    static TraceMutiOcr ocr = null;\n\n    @PostConstruct", "    public void init(){\n        ocr = new TraceMutiOcr(modelDir+\"/model-number.txt\");\n    }\n\n\n    @PostMapping(\"/reload.json\")\n    private Result reload() {\n        ocr = new TraceMutiOcr(modelDir+\"/model-number.txt\");\n        return Results.success();\n    }\n\n\n    @PostMapping(\"/bjocrnumber.json\")\n    private Result bjocrnumber(@RequestBody List<Point> objList) {\n        long t1 = System.currentTimeMillis();\n        String letter = TraceOcr.ocrNumber(objList);\n        Map map = new HashMap();\n        map.put(\"letter\",letter);\n        map.put(\"time\",System.currentTimeMillis()-t1);\n        return Results.success(map);\n    }\n\n\n    @PostMapping(\"/bjocrletter.json\")\n    private Result bjocrletter(@RequestBody List<Point> objList) {\n        long t1 = System.currentTimeMillis();\n        String letter = TraceOcr.ocrLetter(objList);\n        Map map = new HashMap();\n        map.put(\"letter\",letter);\n        map.put(\"time\",System.currentTimeMillis()-t1);\n        return Results.success(map);\n    }\n\n    @PostMapping(\"/bjocrraw.json\")\n    private Result bjocrraw(@RequestBody List<Point> objList) {\n        long t1 = System.currentTimeMillis();\n        String letter = TraceOcr.ocrRaw(objList);\n        Map map = new HashMap();\n        map.put(\"letter\",letter);\n        map.put(\"time\",System.currentTimeMillis()-t1);\n        return Results.success(map);\n    }\n\n\n\n    @PostMapping(\"/mutinumber.json\")\n    private Result mutinumber(@RequestBody List<Point> objList) {\n        long t1 = System.currentTimeMillis();\n        String letter = ocr.ocr(objList);\n        Map map = new HashMap();\n        map.put(\"letter\",letter);\n        map.put(\"time\",System.currentTimeMillis()-t1);\n        return Results.success(map);\n    }\n\n    @PostMapping(\"/mutiraw.json\")\n    private Result mutiraw(@RequestBody List<Point> objList) {\n        long t1 = System.currentTimeMillis();\n        String letter = TraceMutiOcrForVXNotCommon.ocrRaw(objList);\n        Map map = new HashMap();\n        map.put(\"letter\",letter);\n        map.put(\"time\",System.currentTimeMillis()-t1);\n        return Results.success(map);\n    }\n\n//    @PostMapping(\"/mutiletter.json\")\n//    private Result mutiletter(@RequestBody List<Point> objList) {\n//        long t1 = System.currentTimeMillis();\n//        String letter = TraceMutiOcr.ocr(objList,\"letter\");\n//        Map map = new HashMap();\n//        map.put(\"letter\",letter);\n//        map.put(\"time\",System.currentTimeMillis()-t1);\n//        return Results.success(map);\n//    }\n\n}"]}
{"filename": "src/main/java/com/hs/trace/service/Helper.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\n@Data\npublic class Helper {\n\n    private int minX;\n    private int minY;\n    private int maxX;\n    private int maxY;\n\n    private int xDistance;\n    private int yDistance;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/Point.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\n@Data\npublic class Point {\n    private String action;\n    private String actionPen;\n    private int x;\n    private int y;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/Range.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@AllArgsConstructor\n@Data\nclass Range{\n    float min;\n    float max;", "    float min;\n    float max;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/Letter.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\nclass Letter{\n    private String letter;\n    private int asc;", "    private String letter;\n    private int asc;\n    private List<Line> lines;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/Stroke.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\n@Data\nclass Stroke {\n\n    private String name;\n\n    private Line[] lines;", "\n    private Line[] lines;\n\n}"]}
{"filename": "src/main/java/com/hs/trace/service/TraceOcr.java", "chunked_list": ["package com.hs.trace.service;\n\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.json.JSONArray;\nimport cn.hutool.json.JSONUtil;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport java.util.*;\n\npublic class TraceOcr {\n\n\n    //\u5c0f\u6bb5\u89d2\u5ea6,\u5927\u6bb5\u5934\u5c3e\u89d2\u5ea6,x\u6bd4\u4f8b,y\u5f02\u8f74\u6bd4\u4f8b\n    static String n1 = \"[60-120],[75-135],0-1,0.8-1\";\n    static String n2 = \"[270-360 0-90],[315-360 0-75],0.1-1,0-1;[90-270],[90-180],0-1,0-1;[270-360 0-90],[300-360 0-30],0.2-1,0-1\";\n    static String n3 = \"[270-360 0-90],[315-360 0-75],0.2-1,0-1;[90-270],[90-180],0.1-1,0-1;[270-360 0-90],[300-360 0-75],0.1-1,0-1;[90-270],[105-210],0.2-1,0-1\";\n    static String n4 = \"[45-150],[0-180],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0.2-1,0-1;[180-360],[180-270],0-1,0.02-1;[45-135],[45-120],0-1,0.4-1\";\n    static String n5 = \"[315-360 0-30],[315-360 0-30],0.1-1,0-1;[180-270],[180-270],0-1,0-1;[75-135],[75-135],0-1,0.1-1;[335-360 0-75],[335-360 0-75],0-1,0.1-1;[90-270],[90-270],0.1-1,0-1\";\n    static String n6 = \"[45-180],[45-135],0-1,0.6-1;[180-360],[180-360],0-1,0.05-0.7;[90-225],[90-225],0-1,0-1\";\n    static String n7 = \"[270-360 0-45],[315-360 0-45],0.2-1,0-1,0-1,0.1-3;[60-135],[75-135],0-1,0.8-1\";\n    static String n81 = \"[90-270],[105-270],0.1-1,0-1;[270-360 0-90],[0-90],0.2-1,0-1;[90-270],[90-270],0.2-1,0-1;[270-360 0-90],[270-360],0.2-1,0-1\";\n    static String n82 = \"[270-360 0-90],[315-360 0-75],0.3-1,0-1;[90-270],[90-180],0.3-1,0-1;[270-360 0-90],[300-360 0-45],0.3-1,0-1;[90-270],[180-270],0.3-1,0-1\";\n    static String n91 = \"[90-270],[105-225],0.3-1,0-1;[270-360 0-45],[315-360 0-45],0.3-1,0-1;[75-135],[75-135],0-1,0.3-1\";\n    static String n92 = \"[270-360],[270-360],0.3-1,0-1;[135-270],[135-270],0.1-1,0-1;[45-135],[45-135],0-1,0.7-1\";\n    static String n01 = \"[90-270],[90-180],0.02-1,0-1;[270-360 0-90],[300-360 0-75],0.8-1,0-1;[90-270],[90-270],0.01-1,0-1\";\n    static String n02 = \"[45-135],[45-135],0-1,0-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[235-315],[235-315],0-1,0-1;[135-225],[135-225],0-1,0-1;\";\n\n    static String n4_1_1 = \"[45-150],[0-180],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0.2-1,0-1\";\n    static String n4_1_2 = \"[60-120],[75-135],0-1,0.8-1\";\n\n    static String n5_1_1 = \"[75-135],[75-135],0-1,0.1-1;[90-270],[90-270],0.1-1,0-1\";\n    static String n5_1_2 = \"[315-360 0-45],[315-360 0-45],0.5-1,0-1\";\n\n    static String A1 = \"[270-360],[270-360],0-1,0.2-1;[0-115],[0-115],0-1,0.2-1;[180-270],[180-270],0-1,0-1;[270-360 0-45],[270-360 0-45],0.1-1,0-1\";\n    static String B1 = \"[45-135],[45-135],0-1,0.2-1;[225-315],[225-315],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[90-180],[90-180],0-1,0-1;[315-360 0-75],[315-360 0-75],0-1,0-1;[90-180],[90-180],0.1-1,0-1\";\n    static String C1 = \"[45-135],[45-135],0-1,0-1;[315-360 0-45],[315-360 0-45],0-1,0-1\";\n    static String D1 = \"[45-135],[45-135],0-1,0.2-1;[225-315],[225-315],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[90-180],[90-180],0.1-1,0-1\";\n\n\n    static String X_1 = \"[0-90],[0-90],0.1-1,0.1-1;[225-360],[225-360],0-1,0.1-1;[90-180],[90-180],0.1-1,0.1-1\";\n    static String X_2 = \"[90-180],[90-180],0.1-1,0.1-1;[225-315],[225-315],0-1,0.1-1;[0-90],[0-90],0.1-1,0.1-1\";\n    static String X_1_1 = \"[0-90],[0-90],0.1-1,0.1-1\";\n    static String X_1_2 = \"[90-180],[90-180],0.1-1,0.1-1\";\n    //v[15-120],[15-120],0-1,0-1;\n    static String V = \"[270-360 0-15],[270-360 0-15],0.1-1,0-1\";\n\n", "import java.util.*;\n\npublic class TraceOcr {\n\n\n    //\u5c0f\u6bb5\u89d2\u5ea6,\u5927\u6bb5\u5934\u5c3e\u89d2\u5ea6,x\u6bd4\u4f8b,y\u5f02\u8f74\u6bd4\u4f8b\n    static String n1 = \"[60-120],[75-135],0-1,0.8-1\";\n    static String n2 = \"[270-360 0-90],[315-360 0-75],0.1-1,0-1;[90-270],[90-180],0-1,0-1;[270-360 0-90],[300-360 0-30],0.2-1,0-1\";\n    static String n3 = \"[270-360 0-90],[315-360 0-75],0.2-1,0-1;[90-270],[90-180],0.1-1,0-1;[270-360 0-90],[300-360 0-75],0.1-1,0-1;[90-270],[105-210],0.2-1,0-1\";\n    static String n4 = \"[45-150],[0-180],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0.2-1,0-1;[180-360],[180-270],0-1,0.02-1;[45-135],[45-120],0-1,0.4-1\";\n    static String n5 = \"[315-360 0-30],[315-360 0-30],0.1-1,0-1;[180-270],[180-270],0-1,0-1;[75-135],[75-135],0-1,0.1-1;[335-360 0-75],[335-360 0-75],0-1,0.1-1;[90-270],[90-270],0.1-1,0-1\";\n    static String n6 = \"[45-180],[45-135],0-1,0.6-1;[180-360],[180-360],0-1,0.05-0.7;[90-225],[90-225],0-1,0-1\";\n    static String n7 = \"[270-360 0-45],[315-360 0-45],0.2-1,0-1,0-1,0.1-3;[60-135],[75-135],0-1,0.8-1\";\n    static String n81 = \"[90-270],[105-270],0.1-1,0-1;[270-360 0-90],[0-90],0.2-1,0-1;[90-270],[90-270],0.2-1,0-1;[270-360 0-90],[270-360],0.2-1,0-1\";\n    static String n82 = \"[270-360 0-90],[315-360 0-75],0.3-1,0-1;[90-270],[90-180],0.3-1,0-1;[270-360 0-90],[300-360 0-45],0.3-1,0-1;[90-270],[180-270],0.3-1,0-1\";\n    static String n91 = \"[90-270],[105-225],0.3-1,0-1;[270-360 0-45],[315-360 0-45],0.3-1,0-1;[75-135],[75-135],0-1,0.3-1\";\n    static String n92 = \"[270-360],[270-360],0.3-1,0-1;[135-270],[135-270],0.1-1,0-1;[45-135],[45-135],0-1,0.7-1\";\n    static String n01 = \"[90-270],[90-180],0.02-1,0-1;[270-360 0-90],[300-360 0-75],0.8-1,0-1;[90-270],[90-270],0.01-1,0-1\";\n    static String n02 = \"[45-135],[45-135],0-1,0-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[235-315],[235-315],0-1,0-1;[135-225],[135-225],0-1,0-1;\";\n\n    static String n4_1_1 = \"[45-150],[0-180],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0.2-1,0-1\";\n    static String n4_1_2 = \"[60-120],[75-135],0-1,0.8-1\";\n\n    static String n5_1_1 = \"[75-135],[75-135],0-1,0.1-1;[90-270],[90-270],0.1-1,0-1\";\n    static String n5_1_2 = \"[315-360 0-45],[315-360 0-45],0.5-1,0-1\";\n\n    static String A1 = \"[270-360],[270-360],0-1,0.2-1;[0-115],[0-115],0-1,0.2-1;[180-270],[180-270],0-1,0-1;[270-360 0-45],[270-360 0-45],0.1-1,0-1\";\n    static String B1 = \"[45-135],[45-135],0-1,0.2-1;[225-315],[225-315],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[90-180],[90-180],0-1,0-1;[315-360 0-75],[315-360 0-75],0-1,0-1;[90-180],[90-180],0.1-1,0-1\";\n    static String C1 = \"[45-135],[45-135],0-1,0-1;[315-360 0-45],[315-360 0-45],0-1,0-1\";\n    static String D1 = \"[45-135],[45-135],0-1,0.2-1;[225-315],[225-315],0-1,0.2-1;[315-360 0-45],[315-360 0-45],0-1,0-1;[90-180],[90-180],0.1-1,0-1\";\n\n\n    static String X_1 = \"[0-90],[0-90],0.1-1,0.1-1;[225-360],[225-360],0-1,0.1-1;[90-180],[90-180],0.1-1,0.1-1\";\n    static String X_2 = \"[90-180],[90-180],0.1-1,0.1-1;[225-315],[225-315],0-1,0.1-1;[0-90],[0-90],0.1-1,0.1-1\";\n    static String X_1_1 = \"[0-90],[0-90],0.1-1,0.1-1\";\n    static String X_1_2 = \"[90-180],[90-180],0.1-1,0.1-1\";\n    //v[15-120],[15-120],0-1,0-1;\n    static String V = \"[270-360 0-15],[270-360 0-15],0.1-1,0-1\";\n\n", "    public static void main(String[] args) {\n//        String txt = FileUtil.readString(\"F:\\\\wechat\\\\WeChat Files\\\\sanjijiji\\\\FileStorage\\\\File\\\\2022-04\\\\22.txt\",\"UTF-8\");\n//        JSONArray array = JSONUtil.parseArray(txt);\n//        List<Point> pointList = array.toList(Point.class);\n//        ocrNumber(pointList);\n    }\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57\n    public static String ocrNumber(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        String letter =  getNumber(handList);\n        System.out.println(letter);\n        return letter;\n    }\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57", "    public static String ocrNumber(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        String letter =  getNumber(handList);\n        System.out.println(letter);\n        return letter;\n    }\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57", "    public static String ocrLetter(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        String letter =  getLetter(handList);\n        System.out.println(letter);\n        return letter;\n    }\n\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57", "    public static String ocrRaw(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        String letter =  getRaw(handList);\n        System.out.println(letter);\n        return letter;\n    }\n\n", "    public static String getNumber(HandList handList) {\n\n        if (handList.getLineList().size() == 1) {\n\n            List<Point> userLine = handList.getLineList().get(0);\n            if (userLine.size() <= 4) {\n                return \"1\";\n            }\n\n            Helper helper = new Helper();\n            setXY(helper,userLine);\n", "            if(fuckByTrace(modelMap.get(\"5\"),userLine,helper)){\n                return \"5\";\n            }\n            if(fuckByTrace(modelMap.get(\"3\"),userLine,helper)){\n                return \"3\";\n            }\n            if(fuckByTrace(modelMap.get(\"8\"),userLine,helper)){\n                return \"8\";\n            }\n            if(fuckByTrace(modelMap.get(\"4\"),userLine,helper)){\n                return \"4\";\n            }", "            if(fuckByTrace(modelMap.get(\"4\"),userLine,helper)){\n                return \"4\";\n            }\n            if(fuckByTrace(modelMap.get(\"2\"),userLine,helper)){\n                return \"2\";\n            }\n            if(fuckByTrace(modelMap.get(\"6\"),userLine,helper)){\n                return \"6\";\n            }\n            if(fuckByTrace(modelMap.get(\"9\"),userLine,helper)){\n                return \"9\";\n            }", "            if(fuckByTrace(modelMap.get(\"9\"),userLine,helper)){\n                return \"9\";\n            }\n            if(fuckByTrace(modelMap.get(\"0\"),userLine,helper)){\n                return \"0\";\n            }\n            if(fuckByTrace(modelMap.get(\"7\"),userLine,helper)){\n                return \"7\";\n            }\n            if(fuckByTrace(modelMap.get(\"1\"),userLine,helper)){\n                return \"1\";\n            }\n            return null;\n        }", "            if(fuckByTrace(modelMap.get(\"1\"),userLine,helper)){\n                return \"1\";\n            }\n            return null;\n        }\n        else if (handList.getLineList().size() == 2) {\n            List<Point> userLine1 = handList.getLineList().get(0);\n            List<Point> userLine2 = handList.getLineList().get(1);\n\n            Helper helper1 = new Helper();\n            setXY(helper1,userLine1);\n\n            Helper helper2 = new Helper();\n            setXY(helper2,userLine2);\n", "            if(fuckByTrace(modelMap.get(\"421\"),userLine1,helper1)\n                    && fuckByTrace(modelMap.get(\"422\"),userLine2,helper2)\n                    ){\n                return \"4\";\n            }\n\n            if(\n                (fuckByTrace(modelMap.get(\"521\"),userLine1,helper1)\n                    && fuckByTrace(modelMap.get(\"522\"),userLine2,helper2))||\n                (fuckByTrace(modelMap.get(\"522\"),userLine1,helper1)\n                        && fuckByTrace(modelMap.get(\"521\"),userLine2,helper2))\n            ){\n                return \"5\";\n            }\n\n\n            return null;\n        }\n        return null;\n    }\n\n    private static String getLetter(HandList handList) {\n", "        if (handList.getLineList().size() == 1) {\n\n            List<Point> userLine = handList.getLineList().get(0);\n            if (userLine.size() <= 4) {\n                return \"C\";\n            }\n\n            Helper helper = new Helper();\n            setXY(helper,userLine);\n\n            if(fuckByTrace(modelMap.get(\"B\"),userLine,helper)){\n                return \"B\";\n            }", "            if(fuckByTrace(modelMap.get(\"B\"),userLine,helper)){\n                return \"B\";\n            }\n            if(fuckByTrace(modelMap.get(\"A\"),userLine,helper)){\n                return \"A\";\n            }\n            if(fuckByTrace(modelMap.get(\"D\"),userLine,helper)){\n                return \"D\";\n            }\n            if(fuckByTrace(modelMap.get(\"C\"),userLine,helper)){\n                return \"C\";\n            }\n            return null;\n        }", "            if(fuckByTrace(modelMap.get(\"C\"),userLine,helper)){\n                return \"C\";\n            }\n            return null;\n        }\n        else if (handList.getLineList().size() == 2) {\n\n            return null;\n        }\n        return null;\n    }\n\n    private static String getRaw(HandList handList) {\n", "        if (handList.getLineList().size() == 1) {\n\n            List<Point> userLine = handList.getLineList().get(0);\n\n            Helper helper = new Helper();\n            setXY(helper,userLine);\n\n            if(fuckByTrace(modelMap.get(\"X1\"),userLine,helper)\n                    || fuckByTrace(modelMap.get(\"X2\"),userLine,helper)\n                    ){\n                return \"X\";\n            }", "            if(fuckByTrace(modelMap.get(\"V\"),userLine,helper)){\n                return \"V\";\n            }\n        }\n        else if (handList.getLineList().size() == 2) {\n\n            List<Point> userLine1 = handList.getLineList().get(0);\n            List<Point> userLine2 = handList.getLineList().get(1);\n\n            Helper helper1 = new Helper();\n            setXY(helper1,userLine1);\n\n            Helper helper2 = new Helper();\n            setXY(helper2,userLine2);\n", "            if((fuckByTrace(modelMap.get(\"X21\"),userLine1,helper1)\n                    && fuckByTrace(modelMap.get(\"X22\"),userLine2,helper2))\n                    ||\n                    (fuckByTrace(modelMap.get(\"X22\"),userLine1,helper1)\n                            && fuckByTrace(modelMap.get(\"X21\"),userLine2,helper2))\n                    ){\n                return \"X\";\n            }\n        }\n        return null;\n    }\n\n\n    static Map<String,List<Letter>> modelMap = new HashMap<>();\n\n    static {\n        //\u4e00\u7b14\n        modelMap.put(\"1\", Arrays.asList(new Letter[]{convertModel(\"1\", n1)}));\n        modelMap.put(\"2\", Arrays.asList(new Letter[]{convertModel(\"2\",n2)}));\n        modelMap.put(\"3\", Arrays.asList(new Letter[]{convertModel(\"3\",n3)}));\n        modelMap.put(\"4\", Arrays.asList(new Letter[]{convertModel(\"4\",n4)}));\n        modelMap.put(\"5\", Arrays.asList(new Letter[]{convertModel(\"5\",n5)}));\n        modelMap.put(\"6\", Arrays.asList(new Letter[]{convertModel(\"6\",n6)}));\n        modelMap.put(\"7\", Arrays.asList(new Letter[]{convertModel(\"7\",n7)}));\n        modelMap.put(\"8\", Arrays.asList(new Letter[]{\n                convertModel(\"8\",n81),\n                convertModel(\"8\",n82)}));\n        modelMap.put(\"9\", Arrays.asList(new Letter[]{\n                convertModel(\"9\",n91),\n                convertModel(\"9\",n92)}));\n        modelMap.put(\"0\", Arrays.asList(new Letter[]{\n                convertModel(\"0\",n01),\n                convertModel(\"0\",n02)\n        }));\n\n        //\u4e24\u7b14\n        modelMap.put(\"421\", Arrays.asList(new Letter[]{convertModel(\"4\",n4_1_1)}));\n        modelMap.put(\"422\", Arrays.asList(new Letter[]{convertModel(\"4\",n4_1_2)}));\n\n        //\u4e24\u7b14\n        modelMap.put(\"521\", Arrays.asList(new Letter[]{convertModel(\"5\",n5_1_1)}));\n        modelMap.put(\"522\", Arrays.asList(new Letter[]{convertModel(\"5\",n5_1_2)}));\n\n        modelMap.put(\"A\", Arrays.asList(new Letter[]{convertModel(\"A\", A1)}));\n        modelMap.put(\"B\", Arrays.asList(new Letter[]{convertModel(\"B\",B1)}));\n        modelMap.put(\"C\", Arrays.asList(new Letter[]{convertModel(\"C\",C1)}));\n        modelMap.put(\"D\", Arrays.asList(new Letter[]{convertModel(\"D\",D1)}));\n\n        //\n        modelMap.put(\"X1\", Arrays.asList(new Letter[]{convertModel(\"X\", X_1)}));\n        modelMap.put(\"X2\", Arrays.asList(new Letter[]{convertModel(\"X\", X_2)}));\n        modelMap.put(\"X21\", Arrays.asList(new Letter[]{convertModel(\"X\", X_1_1)}));\n        modelMap.put(\"X22\", Arrays.asList(new Letter[]{convertModel(\"X\", X_1_2)}));\n        modelMap.put(\"V\", Arrays.asList(new Letter[]{convertModel(\"v\", V)}));\n\n    }\n\n    //\u5b57\u7b26\u4e32\u8f6c\u6a21\u578b\n    static Letter convertModel(String charr,String modelStr){\n        Letter letter = new Letter();\n        letter.setLetter(charr);\n        List<Line> lines = new ArrayList<>();\n        String[] segs = modelStr.split(\";\");", "        for (int i = 0;i<segs.length;i++) {\n            String seg = segs[i];\n            String[] actions = seg.split(\",\");\n            String[] arrowStr = actions[0].replace(\"[\",\"\").replace(\"]\",\"\").split(\" \");\n            String[] degStr = actions[1].replace(\"[\",\"\").replace(\"]\",\"\").split(\" \");\n            String[] curXRange = actions[2].split(\"-\");\n            String[] curYRange = actions[3].split(\"-\");\n\n\n            Range[] arrowdegs = new Range[arrowStr.length];\n            for (int j = 0;j<arrowStr.length;j++) {\n                String[] ds = arrowStr[j].split(\"-\");\n                arrowdegs[j] = new Range(Float.parseFloat(ds[0]),Float.parseFloat(ds[1]));\n            }\n            Range[] degs = new Range[degStr.length];", "            for (int j = 0;j<arrowStr.length;j++) {\n                String[] ds = arrowStr[j].split(\"-\");\n                arrowdegs[j] = new Range(Float.parseFloat(ds[0]),Float.parseFloat(ds[1]));\n            }\n            Range[] degs = new Range[degStr.length];\n            for (int j = 0;j<degStr.length;j++) {\n                String[] ds = degStr[j].split(\"-\");\n                degs[j] = new Range(Float.parseFloat(ds[0]),Float.parseFloat(ds[1]));\n            }\n\n            Line line = new Line();\n            line.setArrows(arrowdegs);\n            line.setDegs(degs);\n            line.setCurXPercent(new Range(Float.parseFloat(curXRange[0]),Float.parseFloat(curXRange[1])));\n            line.setCurYPercent(new Range(Float.parseFloat(curYRange[0]),Float.parseFloat(curYRange[1])));", "            if(actions.length >= 5){\n                String[]  diffRange = actions[4].split(\"-\");\n                line.setDiffXPercent(new Range(Float.parseFloat(diffRange[0]),Float.parseFloat(diffRange[1])));\n            }\n            if(actions.length >= 6){\n                String[]  diffRange = actions[5].split(\"-\");\n                line.setDiffYPercent(new Range(Float.parseFloat(diffRange[0]),Float.parseFloat(diffRange[1])));\n            }\n            lines.add(line);\n        }\n        letter.setLines(lines);\n        System.out.println(JSONUtil.toJsonStr(letter));\n        return letter;\n    }\n\n\n\n    private static boolean fuckByTrace(List<Letter> letters, List<Point> userLines,Helper helper) {\n", "        for (Letter letter : letters) {\n            System.out.println(\"\u6b63\u5728\u8bc6\u522bletter:\"+letter.getLetter());\n            int i = 0 ;\n            int j = 0 ;\n            for (Line condLine : letter.getLines()) {\n                System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\"+j);\n                for (; i < userLines.size(); i++) {\n                    if (i == 0) {\n                        continue;\n                    }\n                    //2\u4e2a\u70b9\u95f4\u7684\u89d2\u5ea6\n                    Point prePoint = userLines.get(i-1);\n                    Point curPoint = userLines.get(i);\n                    boolean inStatus = isStart(condLine,prePoint,curPoint);\n\n                    //4\u79cd\u72b6\u6001\uff0c\u4e4b\u524d\u5728\u4e0d\u5728\uff0c\u73b0\u5728\u5728\u4e0d\u5728\n                    //\u4e4b\u524d\u5728", "                    if(inStatus){\n                        if(!condLine.isInState()){\n                            condLine.setInState(true);\n                            condLine.setFirstPoint(prePoint);\n                        }\n                        if(i == userLines.size()-1){\n                            condLine.setLastPoint(curPoint);\n                            if(fuckByLine(condLine,helper)){\n                                System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\"+j+\"success\");\n                                condLine.setPass(true);\n                                break;\n                            }else{\n                                condLine.setInState(false);\n                            }\n                        }\n                    }else{", "                        if(condLine.isInState()){\n                            //\u5224\u65ad\u8fd9\u5927\u6bb5\u662f\u5426\u7b26\u5408condLine\n                            condLine.setLastPoint(prePoint);\n                            if(fuckByLine(condLine,helper)){\n                                System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\"+j+\"success\");\n                                condLine.setPass(true);\n                                condLine.setFirstPoint(null);\n                                condLine.setLastPoint(null);\n                                condLine.setInState(false);\n                                break;\n                            }else{\n                                condLine.setInState(false);\n                            }\n                        }\n                    }\n                }\n                j++;\n            }", "            if(isAllPass(letter)){\n                return true;\n            }\n\n        }\n        return false;\n    }\n\n    private static boolean isAllPass(Letter letter){\n        boolean r = true;\n        for (Line line : letter.getLines()) {\n            r = r && line.isPass();\n\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n    private static void clearCondLine(Line line){\n        line.setPass(false);\n        line.setInState(false);\n        line.setFirstPoint(null);\n        line.setLastPoint(null);\n    }\n\n\n    private static boolean fuckByLine(Line condLine,Helper helper){\n\n        float deg = getDeg(condLine.getFirstPoint(),condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        for (Line line : letter.getLines()) {\n            r = r && line.isPass();\n\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n    private static void clearCondLine(Line line){\n        line.setPass(false);\n        line.setInState(false);\n        line.setFirstPoint(null);\n        line.setLastPoint(null);\n    }\n\n\n    private static boolean fuckByLine(Line condLine,Helper helper){\n\n        float deg = getDeg(condLine.getFirstPoint(),condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        if(!inRange(deg,condLine.getDegs())){\n            System.out.println(\"deg...cur:\"+deg+\";expect:\"+ JSONUtil.toJsonStr(condLine.getDegs()));\n            return false;\n        }\n        if(!inRangeByDistance(condLine,helper)){\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private static boolean isStart(Line condLine, Point prePoint,Point curPoint) {\n\n        Float deg = getDeg(prePoint,curPoint);\n        return inRange(deg,condLine.getArrows());\n    }\n\n    private static boolean inRange(float deg,Range[] ranges){", "        for (Range range : ranges) {\n            if(deg >= range.getMin() && deg <= range.getMax()){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean inRange(float deg,Range range){\n        if(deg >= range.getMin() && deg <= range.getMax()){\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean inRangeByDistance(Line line,Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());", "        if(deg >= range.getMin() && deg <= range.getMax()){\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean inRangeByDistance(Line line,Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());\n        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }", "        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }\n        if(!inRange(y / helper.getYDistance() , line.getCurYPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur y:\"+y / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurYPercent()));\n            return false;\n        }\n\n        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }", "        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }\n        if(line.getDiffXPercent() != null){\n            if(!inRange(y / helper.getXDistance() , line.getDiffXPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b2:cur y:\"+y / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffXPercent()));\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //\u9884\u5904\u7406\u70b9\u4fe1\u606f\n    private static HandList preDoPoint(List<Point> objList) {\n        HandList handList = new HandList();\n        List<Point> lineList = null;", "        for (Point point : objList) {\n            if (\"ACTION_DOWN\".equals(point.getAction())) {\n                lineList = new ArrayList<>();\n            }\n            lineList.add(point);\n            if (\"ACTION_UP\".equals(point.getAction())) {\n                handList.getLineList().add(lineList);\n            }\n        }\n\n        //\u9884\u5904\u7406,\u53bb\u9664\u4e00\u4e2a\u5730\u65b9\u591a\u70b9\u7684\u60c5\u51b5,\u6392\u9664\u5e72\u6270", "        for (int j = 0; j < handList.getLineList().size(); j++) {\n            List<Point> points = handList.getLineList().get(j);\n            List<Point> newPoints = new ArrayList<>();\n            Point stand = null;\n            for (int i = 0; i < points.size(); i++) {\n                if (i == 0) {\n                    stand = points.get(i);\n                    newPoints.add(points.get(i));\n                    continue;\n                }\n                Point cur = points.get(i);", "                if (Math.abs(cur.getX() - stand.getX()) >= 5 || Math.abs(cur.getY() - stand.getY()) >= 5) {\n                    newPoints.add(points.get(i));\n                    stand = points.get(i);\n                }\n            }\n            //\u8fc7\u6ee4\u5355\u4e2a\u70b9\u7684\u7b14\u753b,\u53ef\u80fd\u662f\u8bef\u70b9\n            if (newPoints.size() > 1) {\n                handList.getLineList().set(j, newPoints);\n            } else {\n                handList.getLineList().remove(j);\n            }\n        }\n        return handList;\n    }\n\n    private static float getDeg(Point fromPoint,Point toPoint) {\n        float deg = (float) Math.toDegrees(Math.atan2(toPoint.getY() - fromPoint.getY(), toPoint.getX() - fromPoint.getX()));", "        if (deg < 0) {\n            deg += 360;\n        }\n        return deg;\n    }\n\n    private static void setXY(Helper helper,List<Point> pointList){\n\n        int minX = 0;\n        int maxX = 0;\n        int minY = 0;\n        int maxY = 0;\n\n        int i = 0;", "        for (Point point : pointList) {\n            if (i++ == 0) {\n                minY = point.getY();\n                maxY = point.getY();\n                minX = point.getX();\n                maxX = point.getX();\n                continue;\n            }\n            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }", "            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }\n            if (point.getY() < minY) {\n                minY = point.getY();\n            }\n            if (point.getX() > maxX) {\n                maxX = point.getX();\n            }\n            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setXDistance(xDistance==0?1:xDistance);\n        helper.setYDistance(yDistance==0?1:yDistance);\n    }\n}\n\n\n\n\n\n\n\n", "            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setXDistance(xDistance==0?1:xDistance);\n        helper.setYDistance(yDistance==0?1:yDistance);\n    }\n}\n\n\n\n\n\n\n\n"]}
{"filename": "src/main/java/com/hs/trace/service/Line.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\n@Data\nclass Line{\n\n    //\u7b14\u8ff9\n    private Range[] arrows;\n    private Range[] degs;", "    private Range[] arrows;\n    private Range[] degs;\n    private Range curXPercent;\n    private Range curYPercent;\n    private Range diffXPercent;\n    private Range diffYPercent;\n\n    //\u7528\u4e8e\u5224\u65ad\n    //\u662f\u5426\u6b63\u5728\n    private boolean inState;", "    //\u662f\u5426\u6b63\u5728\n    private boolean inState;\n    private Point firstPoint;\n    private Point lastPoint;\n    private boolean pass;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/HandList.java", "chunked_list": ["package com.hs.trace.service;\n\nimport lombok.Data;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Data\npublic class HandList {\n\n    private List<List<Point>> lineList = new ArrayList<>();\n\n    private String[] strokeList;\n    private String[] wordList;\n    private Helper[] helperList;\n}", "public class HandList {\n\n    private List<List<Point>> lineList = new ArrayList<>();\n\n    private String[] strokeList;\n    private String[] wordList;\n    private Helper[] helperList;\n}"]}
{"filename": "src/main/java/com/hs/trace/service/muti/TraceMutiOcrForVXNotCommon.java", "chunked_list": ["package com.hs.trace.service.muti;\n\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.json.JSONArray;\nimport cn.hutool.json.JSONObject;\nimport cn.hutool.json.JSONUtil;\nimport com.hs.trace.service.HandList;\nimport com.hs.trace.service.Helper;\nimport com.hs.trace.service.Point;\n", "import com.hs.trace.service.Point;\n\nimport java.util.*;\n\npublic class TraceMutiOcrForVXNotCommon {\n\n    public static void main(String[] args) {\n\n        String s = \"[  {\\\"pen_type\\\":2,\\\"x\\\":1083,\\\"y\\\":2650,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_down\\\",\\\"time\\\":1655091243048,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1084,\\\"y\\\":2654,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243072,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1110,\\\"y\\\":2714,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243112,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1194,\\\"y\\\":2736,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243144,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1265,\\\"y\\\":2715,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243160,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1333,\\\"y\\\":2684,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243176,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1476,\\\"y\\\":2608,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243224,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1493,\\\"y\\\":2602,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243240,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1494,\\\"y\\\":2601,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243264,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1469,\\\"y\\\":2626,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_move\\\",\\\"time\\\":1655091243284,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"},{\\\"pen_type\\\":2,\\\"x\\\":1384,\\\"y\\\":2669,\\\"force\\\":-1,\\\"page\\\":\\\"1536.717.10.75\\\",\\\"isButtonDown\\\":true,\\\"actionPen\\\":\\\"pen_up\\\",\\\"time\\\":1655091243300,\\\"sortNo\\\":\\\"\u7ed7\ufffd1\u68f0\ufffd\\\"}]\";\n        List<Point> objList =  JSONUtil.toList(JSONUtil.parseArray(s),Point.class);\n        System.out.println(ocrRaw(objList));\n\n    }\n\n    static List<Stroke> strokes = new ArrayList<>();\n    static Map<String,String> singles = new HashMap<>();\n    static Map<String,List<Compose>> composes = new HashMap<>();\n\n    static {\n        init();\n    }\n", "    public static void init() {\n\n        List<String> lines = FileUtil.readLines(\"G:\\\\\u7a81\u53d1\u5947\u60f3\\\\trace\\\\modelvx.txt\", \"UTF-8\");\n        String mode = null;\n        for (String line : lines) {\n            if(line.startsWith(\"--\")){\n                continue;\n            }\n            if (\"[stroke]\".equals(line)) {\n                mode = \"stroke\";\n                continue;", "            if (\"[stroke]\".equals(line)) {\n                mode = \"stroke\";\n                continue;\n            } else if (\"[single]\".equals(line)) {\n                mode = \"single\";\n                continue;\n            } else if (\"[compose]\".equals(line)) {\n                mode = \"compose\";\n                continue;\n            }\n            if (mode == null || line.equals(\"\")) {\n                continue;", "            if (mode == null || line.equals(\"\")) {\n                continue;\n            } else if (\"stroke\".equals(mode)) {\n                Stroke letter = JSONUtil.toBean(line, Stroke.class);\n                strokes.add(letter);\n            } else if (\"single\".equals(mode)) {\n                JSONObject obj = JSONUtil.parseObj(line);\n                String letter = obj.getStr(\"letter\");\n                JSONArray arr = obj.getJSONArray(\"strokes\");\n                for (int i = 0;i<arr.size() ;i++) {\n                    singles.put(arr.getJSONObject(i).getStr(\"stroke\"),letter);\n                }", "                for (int i = 0;i<arr.size() ;i++) {\n                    singles.put(arr.getJSONObject(i).getStr(\"stroke\"),letter);\n                }\n            } else if (\"compose\".equals(mode)) {\n                Compose compose = JSONUtil.toBean(line, Compose.class);\n                //\u67e5\u8be2\u6700\u540e\u4e00\u7b14\u7684\u540d\u79f0\n                String stroke = compose.getStrokes().get(compose.getStrokes().size()-1).getStroke();\n                List<Compose> list = composes.get(stroke);\n                if(list == null){\n                    list = new ArrayList<>();\n                }\n                list.add(compose);\n                composes.put(stroke,list);\n            }\n        }\n        strokes.sort(new Comparator<Stroke>() {\n            @Override", "                if(list == null){\n                    list = new ArrayList<>();\n                }\n                list.add(compose);\n                composes.put(stroke,list);\n            }\n        }\n        strokes.sort(new Comparator<Stroke>() {\n            @Override\n            public int compare(Stroke o1, Stroke o2) {\n                return o1.getAsc() - o2.getAsc();\n            }\n        });\n    }\n\n\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57", "            public int compare(Stroke o1, Stroke o2) {\n                return o1.getAsc() - o2.getAsc();\n            }\n        });\n    }\n\n\n\n    //\u8bc6\u522b\u5355\u4e2a\u6570\u5b57\n    public static String ocrRaw(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);", "    public static String ocrRaw(List<Point> objList) {\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        if(handList.getLineList().size() > 3){\n            return \"\";\n        }\n        return getNumber(handList);\n    }\n\n", "    public static String getNumber(HandList handList) {\n\n        for (int i = 0; i< handList.getLineList().size();i++) {\n\n            List<Point> userLine = handList.getLineList().get(i);\n            Helper helper = new Helper();\n            setXY(helper, userLine);\n            handList.getHelperList()[i] = helper;\n\n            for (Stroke stroke : strokes) {\n                //", "            for (Stroke stroke : strokes) {\n                //\n                if (fuckByTrace(stroke, userLine, helper)) {\n\n                    handList.getStrokeList()[i] = stroke.getStroke();\n                    //\u5148\u4ece\u7ec4\u5408\u5224\u65ad\n                    boolean find = fuckByCompose(stroke.getStroke(),handList,i);\n                    if(!find){\n                        //\u7ec4\u5408\u91cc\u627e\u4e0d\u5230\uff0c\u7136\u540e\u4ece\u5355\u4e2a\u91cc\u5224\u65ad\n                        fuckBySingle(stroke.getStroke(),handList,i);\n                    }\n                    break;\n                }else{\n                    handList.getStrokeList()[i] = null;\n                }\n            }\n        }\n        return getWords(handList);\n    }\n\n    private static String getWords(HandList handList){\n        String sb = null;", "        for (int i = 0;i<handList.getWordList().length;i++) {\n            if(i < 2 && handList.getWordList()[i] != null){\n                sb = handList.getWordList()[i];\n            }\n        }\n        return sb == null?\"\":sb;\n    }\n\n    private static boolean fuckByCompose(String strokeName,HandList handList,int i){\n        List<Compose> componse = composes.get(strokeName);\n        if(componse == null || componse.size() == 0){\n            return false;\n        }\n", "        if(componse == null || componse.size() == 0){\n            return false;\n        }\n\n        for (Compose compose : componse) {\n            int size = compose.getStrokes().size();\n            if(i < size-1){\n                continue;\n            }\n\n            Helper base = null;\n            //\u67e5\u627ebase\u7684\u6570\u636e", "            for (int j = 0;j< compose.getStrokes().size();j++) {\n                int handIndex = i - size + 1 + j;\n                StrokeComposeVo strokeComposeVo = compose.getStrokes().get(j);\n                if(\"base\".equals(strokeComposeVo.getRole())){\n                    base = handList.getHelperList()[handIndex];\n                    break;\n                }\n            }\n            if(base == null){\n                return false;\n            }\n\n            boolean allPass = true;", "            if(base == null){\n                return false;\n            }\n\n            boolean allPass = true;\n            for (int j = 0;j< compose.getStrokes().size();j++) {\n\n                StrokeComposeVo strokeComposeVo = compose.getStrokes().get(j);\n                int handIndex = i - size + 1 + j;\n                String oriStroke = handList.getStrokeList()[handIndex];\n                //\u5148\u770b\u7b14\u753b\u5bf9\u4e0d\u5bf9", "                if(!strokeComposeVo.getStroke().equals(oriStroke)){\n                    allPass = false;\n                    break;\n                }\n\n                if(\"base\".equals(strokeComposeVo.getRole())){\n                    continue;\n                }\n\n                //\u5f00\u59cb\u5224\u65ad\u662f\u5426\u7b26\u5408\u4f4d\u7f6e\u4fe1\u606f\n                //\u90a3\u7b14\u7684\u4f4d\u7f6e\u4fe1\u606f\u662f\u5426\u7b26\u5408\n                Helper current = handList.getHelperList()[handIndex];\n                //\u6807\u51c6\n", "                if(fuckComposePostion(base,current,strokeComposeVo)){\n                    continue;\n                }else{\n                    allPass = false;\n                    break;\n                }\n            }\n\n            //\u5982\u679c\u67d0\u4e2a\u7ec4\u5408\u901a\u8fc7\u4e86\uff0c\u4e0d\u518d\u5f80\u4e0b\u5339\u914d\u4e86\uff0c\n            if(allPass){\n                for (int j = 0;j< compose.getStrokes().size();j++) {\n                    handList.getWordList()[i - size + 1 + j] = null;\n                }\n                handList.getWordList()[i] = compose.getLetter();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean fuckComposePostion(Helper base,Helper current,StrokeComposeVo stand){\n\n        float xMin = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMin();\n        float xMax = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMax();\n        float yMin = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMin();\n        float yMax = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMax();\n", "            if(allPass){\n                for (int j = 0;j< compose.getStrokes().size();j++) {\n                    handList.getWordList()[i - size + 1 + j] = null;\n                }\n                handList.getWordList()[i] = compose.getLetter();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean fuckComposePostion(Helper base,Helper current,StrokeComposeVo stand){\n\n        float xMin = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMin();\n        float xMax = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMax();\n        float yMin = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMin();\n        float yMax = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMax();\n", "        if(\"in\".equals(stand.getX().getMode())){\n\n            if(current.getMinX() >= xMin && current.getMaxX() <= xMax ){\n\n            }else{\n                return false;\n            }\n        }\n        else if(\"contain\".equals(stand.getX().getMode())){\n\n            if(current.getMinX() <= xMin && current.getMaxX() >= xMax ){\n\n            }else{\n                return false;\n            }", "        else if(\"contain\".equals(stand.getX().getMode())){\n\n            if(current.getMinX() <= xMin && current.getMaxX() >= xMax ){\n\n            }else{\n                return false;\n            }\n        }else if(\"touch\".equals(stand.getX().getMode())){\n\n            if(current.getMaxX() < xMin || current.getMinX() > xMax ){\n                return false;\n            }\n        }\n", "            if(current.getMaxX() < xMin || current.getMinX() > xMax ){\n                return false;\n            }\n        }\n\n        if(\"in\".equals(stand.getY().getMode())){\n\n            if(current.getMinY() >= yMin && current.getMaxY() <= yMax ){\n\n            }else{\n                return false;\n            }\n        }", "        else if(\"contain\".equals(stand.getY().getMode())){\n\n            if(current.getMinY() <= yMin && current.getMaxY() >= yMax ){\n\n            }else{\n                return false;\n            }\n        }\n        else if(\"touch\".equals(stand.getY().getMode())){\n\n            if(current.getMaxY() < yMin || current.getMinY() > yMax ){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    private static void fuckBySingle(String strokeName,HandList handList,int i){\n        String letter = singles.get(strokeName);", "        else if(\"touch\".equals(stand.getY().getMode())){\n\n            if(current.getMaxY() < yMin || current.getMinY() > yMax ){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    private static void fuckBySingle(String strokeName,HandList handList,int i){\n        String letter = singles.get(strokeName);", "        if(letter != null){\n            handList.getWordList()[i] = letter;\n        }\n    }\n\n\n\n    private static boolean fuckByTrace(Stroke stroke, List<Point> userLines, Helper helper) {\n\n        System.out.println(\"\u6b63\u5728\u8bc6\u522b\u7b14\u753bstroke:\" + stroke.getStroke());\n        int i = 0;\n        int j = 0;", "        for (Line condLine : stroke.getLines()) {\n            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j);\n            for (; i < userLines.size(); i++) {\n                if (i == 0) {\n                    continue;\n                }\n                //2\u4e2a\u70b9\u95f4\u7684\u89d2\u5ea6\n                Point prePoint = userLines.get(i - 1);\n                Point curPoint = userLines.get(i);\n                boolean inStatus = isStart(condLine, prePoint, curPoint);\n\n                //4\u79cd\u72b6\u6001\uff0c\u4e4b\u524d\u5728\u4e0d\u5728\uff0c\u73b0\u5728\u5728\u4e0d\u5728\n                //\u4e4b\u524d\u5728", "                if (inStatus) {\n                    if (!condLine.isInState()) {\n                        condLine.setInState(true);\n                        condLine.setFirstPoint(prePoint);\n                    }\n                    if (i == userLines.size() - 1) {\n                        condLine.setLastPoint(curPoint);\n                        if (fuckByLine(condLine, helper)) {\n                            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j + \"success\");\n                            condLine.setPass(true);\n                            break;\n                        } else {\n                            condLine.setInState(false);\n                        }\n                    }\n                } else {", "                    if (condLine.isInState()) {\n                        //\u5224\u65ad\u8fd9\u5927\u6bb5\u662f\u5426\u7b26\u5408condLine\n                        condLine.setLastPoint(prePoint);\n                        if (fuckByLine(condLine, helper)) {\n                            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j + \"success\");\n                            condLine.setPass(true);\n                            condLine.setFirstPoint(null);\n                            condLine.setLastPoint(null);\n                            condLine.setInState(false);\n                            break;\n                        } else {\n                            condLine.setInState(false);\n                        }\n                    }\n                }\n            }\n            j++;\n        }", "        if (isAllPass(stroke)) {\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean isAllPass(Stroke stroke) {\n        boolean r = true;\n        for (Line line : stroke.getLines()) {\n            r = r && line.isPass();\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n\n\n\n    private static boolean fuckByLine(Line condLine, Helper helper) {\n\n        float deg = getDeg(condLine.getFirstPoint(), condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        for (Line line : stroke.getLines()) {\n            r = r && line.isPass();\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n\n\n\n    private static boolean fuckByLine(Line condLine, Helper helper) {\n\n        float deg = getDeg(condLine.getFirstPoint(), condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        if (!inRange(deg, condLine.getDegs())) {\n            System.out.println(\"deg...cur:\" + deg + \";expect:\" + JSONUtil.toJsonStr(condLine.getDegs()));\n            return false;\n        }\n        if (!inRangeByDistance(condLine, helper)) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private static boolean isStart(Line condLine, Point prePoint, Point curPoint) {\n\n        Float deg = getDeg(prePoint, curPoint);\n        return inRange(deg, condLine.getArrows());\n    }\n\n    private static boolean inRange(float deg, Range[] ranges) {", "        for (Range range : ranges) {\n            if (deg >= range.getMin() && deg <= range.getMax()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean inRange(float deg, Range range) {\n        if (deg >= range.getMin() && deg <= range.getMax()) {\n            return true;\n        }\n        return false;\n    }\n\n        private static boolean inRangeByDistance(Line line, Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());", "        if (deg >= range.getMin() && deg <= range.getMax()) {\n            return true;\n        }\n        return false;\n    }\n\n        private static boolean inRangeByDistance(Line line, Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());\n        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }", "        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }\n        if(!inRange(y / helper.getYDistance() , line.getCurYPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur y:\"+y / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurYPercent()));\n            return false;\n        }\n\n        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }", "        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }\n        if(line.getDiffXPercent() != null){\n            if(!inRange(y / helper.getXDistance() , line.getDiffXPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b2:cur y:\"+y / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffXPercent()));\n                return false;\n            }\n        }\n        return true;\n    }\n//\n    //\u9884\u5904\u7406\u70b9\u4fe1\u606f\n    private static HandList preDoPoint(List<Point> objList) {\n        HandList handList = new HandList();\n        List<Point> lineList = null;", "        for (Point point : objList) {\n            if (\"pen_down\".equals(point.getActionPen())) {\n                lineList = new ArrayList<>();\n            }\n            lineList.add(point);\n            if (\"pen_up\".equals(point.getActionPen())) {\n                handList.getLineList().add(lineList);\n            }\n        }\n\n        //\u9884\u5904\u7406,\u53bb\u9664\u4e00\u4e2a\u5730\u65b9\u591a\u70b9\u7684\u60c5\u51b5,\u6392\u9664\u5e72\u6270", "        for (int j = 0; j < handList.getLineList().size(); j++) {\n            List<Point> points = handList.getLineList().get(j);\n            List<Point> newPoints = new ArrayList<>();\n            Point stand = null;\n            for (int i = 0; i < points.size(); i++) {\n                if (i == 0) {\n                    stand = points.get(i);\n                    newPoints.add(points.get(i));\n                    continue;\n                }\n                Point cur = points.get(i);", "                if (Math.abs(cur.getX() - stand.getX()) >= 5 || Math.abs(cur.getY() - stand.getY()) >= 5) {\n                    newPoints.add(points.get(i));\n                    stand = points.get(i);\n                }\n            }\n            //\u8fc7\u6ee4\u5355\u4e2a\u70b9\u7684\u7b14\u753b,\u53ef\u80fd\u662f\u8bef\u70b9\n            if (newPoints.size() > 1) {\n                handList.getLineList().set(j, newPoints);\n            } else {\n                handList.getLineList().remove(j);\n            }\n        }\n\n        handList.setWordList(new String[handList.getLineList().size()]);\n        handList.setHelperList(new Helper[handList.getLineList().size()]);\n        handList.setStrokeList(new String[handList.getLineList().size()]);\n        return handList;\n    }\n\n    private static float getDeg(Point fromPoint, Point toPoint) {\n        float deg = (float) Math.toDegrees(Math.atan2(toPoint.getY() - fromPoint.getY(), toPoint.getX() - fromPoint.getX()));", "        if (deg < 0) {\n            deg += 360;\n        }\n        return deg;\n    }\n\n    private static void setXY(Helper helper, List<Point> pointList) {\n\n        int minX = 0;\n        int maxX = 0;\n        int minY = 0;\n        int maxY = 0;\n\n        int i = 0;", "        for (Point point : pointList) {\n            if (i++ == 0) {\n                minY = point.getY();\n                maxY = point.getY();\n                minX = point.getX();\n                maxX = point.getX();\n                continue;\n            }\n            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }", "            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }\n            if (point.getY() < minY) {\n                minY = point.getY();\n            }\n            if (point.getX() > maxX) {\n                maxX = point.getX();\n            }\n            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setMinX(minX);\n        helper.setMaxX(maxX);\n        helper.setMinY(minY);\n        helper.setMaxY(maxY);\n\n        helper.setXDistance(xDistance == 0 ? 1 : xDistance);\n        helper.setYDistance(yDistance == 0 ? 1 : yDistance);\n    }\n}\n\n\n\n\n\n\n\n", "            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setMinX(minX);\n        helper.setMaxX(maxX);\n        helper.setMinY(minY);\n        helper.setMaxY(maxY);\n\n        helper.setXDistance(xDistance == 0 ? 1 : xDistance);\n        helper.setYDistance(yDistance == 0 ? 1 : yDistance);\n    }\n}\n\n\n\n\n\n\n\n"]}
{"filename": "src/main/java/com/hs/trace/service/muti/TraceMutiOcr.java", "chunked_list": ["package com.hs.trace.service.muti;\n\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.json.JSONArray;\nimport cn.hutool.json.JSONObject;\nimport cn.hutool.json.JSONUtil;\nimport com.hs.trace.service.Point;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\nimport java.util.*;\n\npublic class TraceMutiOcr {\n\n\n    public TraceMutiOcr(String modelFilePath){\n        init(modelFilePath);\n    }\n\n    List<Stroke> strokes = new ArrayList<>();\n    Map<String,String> singles = new HashMap<>();\n    Map<String,List<Compose>> composes = new HashMap<>();\n", "    public TraceMutiOcr init(String modelFilePath) {\n\n        List<String> lines = FileUtil.readLines(modelFilePath, \"UTF-8\");\n        String mode = null;\n        for (String line : lines) {\n            if(line.startsWith(\"--\")){\n                continue;\n            }\n            if (\"[stroke]\".equals(line)) {\n                mode = \"stroke\";\n                continue;", "            if (\"[stroke]\".equals(line)) {\n                mode = \"stroke\";\n                continue;\n            } else if (\"[single]\".equals(line)) {\n                mode = \"single\";\n                continue;\n            } else if (\"[compose]\".equals(line)) {\n                mode = \"compose\";\n                continue;\n            }\n            if (mode == null || line.equals(\"\")) {\n                continue;", "            if (mode == null || line.equals(\"\")) {\n                continue;\n            } else if (\"stroke\".equals(mode)) {\n                Stroke letter = JSONUtil.toBean(line, Stroke.class);\n                strokes.add(letter);\n            } else if (\"single\".equals(mode)) {\n                JSONObject obj = JSONUtil.parseObj(line);\n                String letter = obj.getStr(\"letter\");\n                JSONArray arr = obj.getJSONArray(\"strokes\");\n                for (int i = 0;i<arr.size() ;i++) {\n                    singles.put(arr.getJSONObject(i).getStr(\"stroke\"),letter);\n                }", "                for (int i = 0;i<arr.size() ;i++) {\n                    singles.put(arr.getJSONObject(i).getStr(\"stroke\"),letter);\n                }\n            } else if (\"compose\".equals(mode)) {\n                Compose compose = JSONUtil.toBean(line, Compose.class);\n                //\u67e5\u8be2\u6700\u540e\u4e00\u7b14\u7684\u540d\u79f0\n                String stroke = compose.getStrokes().get(compose.getStrokes().size()-1).getStroke();\n                List<Compose> list = composes.get(stroke);\n                if(list == null){\n                    list = new ArrayList<>();\n                }\n                list.add(compose);\n                composes.put(stroke,list);\n            }\n        }\n        strokes.sort(new Comparator<Stroke>() {\n            @Override", "                if(list == null){\n                    list = new ArrayList<>();\n                }\n                list.add(compose);\n                composes.put(stroke,list);\n            }\n        }\n        strokes.sort(new Comparator<Stroke>() {\n            @Override\n            public int compare(Stroke o1, Stroke o2) {\n                return o1.getAsc()- o2.getAsc();\n            }\n        });\n\n        System.out.println(strokes);\n        return this;\n    }\n", "            public int compare(Stroke o1, Stroke o2) {\n                return o1.getAsc()- o2.getAsc();\n            }\n        });\n\n        System.out.println(strokes);\n        return this;\n    }\n\n    public String ocr(List<Point> objList) {\n        //\u5c11\u4e8e4\u4e2a\u70b9\u7684pass", "    public String ocr(List<Point> objList) {\n        //\u5c11\u4e8e4\u4e2a\u70b9\u7684pass\n        if (objList.size() < 4) {\n            return null;\n        }\n        HandList handList = preDoPoint(objList);\n        String letter = getResult(handList);\n\n        return letter;\n    }\n\n", "    public String getResult(HandList handList) {\n\n        for (int i = 0; i< handList.getLineList().size();i++) {\n\n            List<Point> userLine = handList.getLineList().get(i);\n            Helper helper = new Helper();\n            setXY(helper, userLine);\n            handList.getHelperList()[i] = helper;\n\n            for (Stroke stroke : strokes) {\n", "            for (Stroke stroke : strokes) {\n\n                if (fuckByTrace(stroke, userLine, helper)) {\n                    //change-1\n                    if(handList.getStrokeList().get(i) == null){\n                        List<String> strokeList = new ArrayList<>();\n                        strokeList.add(stroke.getStroke());\n                        handList.getStrokeList().add(strokeList);\n                    }else{\n                        handList.getStrokeList().get(i).add(stroke.getStroke());\n                    }\n\n                    //\u5148\u4ece\u7ec4\u5408\u5224\u65ad\n                    boolean find = fuckByCompose(stroke.getStroke(),handList,i);", "                    if(!find){\n                        //\u7ec4\u5408\u91cc\u627e\u4e0d\u5230\uff0c\u7136\u540e\u4ece\u5355\u4e2a\u91cc\u5224\u65ad\n                        fuckBySingle(stroke.getStroke(),handList,i);\n                    }\n                    //change-4\n                    if(find){\n                        break;\n                    }\n                    //change-1\n                    //break;\n                }\n\n                //change-5", "                if(handList.getWordList()[i] != null){\n                    break;\n                }\n//                else{\n//                    handList.getStrokeList()[i] = null;\n//                }\n            }\n\n            System.out.println(\"=====================================\");\n        }\n        return getWords(handList);\n    }\n\n    private String getWords(HandList handList){\n        StringBuffer sb = new StringBuffer();", "        for (String s : handList.getWordList()) {\n            sb.append(s == null?\"\":s);\n        }\n        return sb.toString();\n    }\n\n    private boolean fuckByCompose(String strokeName,HandList handList,int i){\n\n        List<Compose> componse = composes.get(strokeName);\n\n        if(componse == null || componse.size() == 0){\n            return false;\n        }\n", "        if(componse == null || componse.size() == 0){\n            return false;\n        }\n\n        for (Compose compose : componse) {\n            int size = compose.getStrokes().size();\n            if(i < size-1){\n                continue;\n            }\n\n            Helper base = null;\n            //\u67e5\u627ebase\u7684\u6570\u636e", "            for (int j = 0;j< compose.getStrokes().size();j++) {\n                int handIndex = i - size + 1 + j;\n                StrokeComposeVo strokeComposeVo = compose.getStrokes().get(j);\n                if(\"base\".equals(strokeComposeVo.getRole())){\n                    base = handList.getHelperList()[handIndex];\n                    break;\n                }\n            }\n\n            if(base == null){\n                return false;\n            }\n\n            boolean allPass = true;", "            if(base == null){\n                return false;\n            }\n\n            boolean allPass = true;\n            for (int j = 0;j< compose.getStrokes().size();j++) {\n\n                StrokeComposeVo strokeComposeVo = compose.getStrokes().get(j);\n                int handIndex = i - size + 1 + j;\n                //change-1\n                List<String> oriStrokes = handList.getStrokeList().get(handIndex);\n                //\u5148\u770b\u7b14\u753b\u5bf9\u4e0d\u5bf9", "                if(!oriStrokes.contains(strokeComposeVo.getStroke())){\n                    allPass = false;\n                    break;\n                }\n\n                if(\"base\".equals(strokeComposeVo.getRole())){\n                    continue;\n                }\n\n                //\u5f00\u59cb\u5224\u65ad\u662f\u5426\u7b26\u5408\u4f4d\u7f6e\u4fe1\u606f\n                //\u90a3\u7b14\u7684\u4f4d\u7f6e\u4fe1\u606f\u662f\u5426\u7b26\u5408\n                Helper current = handList.getHelperList()[handIndex];\n\n                //\u6807\u51c6", "                if(fuckComposePostion(base,current,strokeComposeVo)){\n                    continue;\n                }else{\n                    allPass = false;\n                    break;\n                }\n            }\n\n            //\u5982\u679c\u67d0\u4e2a\u7ec4\u5408\u901a\u8fc7\u4e86\uff0c\u4e0d\u518d\u5f80\u4e0b\u5339\u914d\u4e86\uff0c\n            if(allPass){\n                //change-2\n                String w = handList.getWordList()[i];\n                //change-3", "            if(allPass){\n                //change-2\n                String w = handList.getWordList()[i];\n                //change-3\n                if(w == null || \"single\".equals(handList.getWordFromList()[i])){\n                    for (int j = 0;j< compose.getStrokes().size();j++) {\n                        handList.getWordList()[i - size + 1 + j] = null;\n                    }\n                    handList.getWordList()[i] = compose.getLetter();\n                }\n                //change-5 //\u5982\u679c\u627e\u5230\u4e86 \u8981\u770b\u4e4b\u524d\u7684\u7b14\u753b\u6709\u6ca1\u6709\u88ab\u7528\u5230\uff0c\u5982\u679c\u7528\u5230\u4e86\u5c31\u8981\u518d\u5f80\u4e0a\u67e5\u8be2\n                handList.getStrokeUsedList()[i] = compose.getStrokes().size();", "                for (int t=1; t< handList.getStrokeUsedList()[i]; t++){\n                    int y = i - t ;\n                    for (int x=1;x < handList.getStrokeUsedList()[y]; x++){\n                        for (String sn : handList.getStrokeList().get(y-x)) {\n                            if(fuckByCompose(sn,handList,y-x)){\n                                break;\n                            }\n                        }\n                    }\n                    handList.getStrokeUsedList()[y] = 0;\n                }\n                //\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean fuckComposePostion(Helper base,Helper current,StrokeComposeVo stand){\n\n        System.out.println(\"\u7ec4\u5408\u8bc6\u522b\uff1a\"+stand.getStroke());\n\n        float xMin = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMin();\n        float xMax = base.getMinX() + base.getXDistance() * stand.getX().getRange().getMax();\n        float yMin = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMin();\n        float yMax = base.getMinY() + base.getYDistance() * stand.getY().getRange().getMax();\n", "        if(\"in\".equals(stand.getX().getMode())){\n\n            if(current.getMinX() >= xMin && current.getMaxX() <= xMax ){\n\n            }else{\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522bin\uff1acur x \"+JSONUtil.toJsonStr(current)+\"expect xMin\"+xMin+\",xMax\"+xMax);\n                return false;\n            }\n        }\n        else if(\"contain\".equals(stand.getX().getMode())){\n", "        else if(\"contain\".equals(stand.getX().getMode())){\n\n            if(current.getMinX() <= xMin && current.getMaxX() >= xMax ){\n\n            }else{\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522bcontain\uff1acur x \"+JSONUtil.toJsonStr(current)+\"expect xMin\"+xMin+\",xMax\"+xMax);\n                return false;\n            }\n        }else if(\"touch\".equals(stand.getX().getMode())){\n\n            if(current.getMaxX() < xMin || current.getMinX() > xMax ){\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522btouch\uff1acur x \"+JSONUtil.toJsonStr(current)+\"expect xMin\"+xMin+\",xMax\"+xMax);\n                return false;\n            }\n        }\n", "        }else if(\"touch\".equals(stand.getX().getMode())){\n\n            if(current.getMaxX() < xMin || current.getMinX() > xMax ){\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522btouch\uff1acur x \"+JSONUtil.toJsonStr(current)+\"expect xMin\"+xMin+\",xMax\"+xMax);\n                return false;\n            }\n        }\n\n        if(\"in\".equals(stand.getY().getMode())){\n\n            if(current.getMinY() >= yMin && current.getMaxY() <= yMax ){\n\n            }else{\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522bin\uff1acur y \"+JSONUtil.toJsonStr(current)+\"expect yMin\"+yMin+\",yMax\"+yMax);\n                return false;\n            }\n        }", "        if(\"in\".equals(stand.getY().getMode())){\n\n            if(current.getMinY() >= yMin && current.getMaxY() <= yMax ){\n\n            }else{\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522bin\uff1acur y \"+JSONUtil.toJsonStr(current)+\"expect yMin\"+yMin+\",yMax\"+yMax);\n                return false;\n            }\n        }\n        else if(\"contain\".equals(stand.getY().getMode())){\n", "        else if(\"contain\".equals(stand.getY().getMode())){\n\n            if(current.getMinY() <= yMin && current.getMaxY() >= yMax ){\n\n            }else{\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522bcontain\uff1acur y \"+JSONUtil.toJsonStr(current)+\"expect yMin\"+yMin+\",yMax\"+yMax);\n                return false;\n            }\n        }\n        else if(\"touch\".equals(stand.getY().getMode())){\n", "        else if(\"touch\".equals(stand.getY().getMode())){\n\n            if(current.getMaxY() < yMin || current.getMinY() > yMax ){\n                System.out.println(\"\u7ec4\u5408\u8bc6\u522btouch\uff1acur y \"+JSONUtil.toJsonStr(current)+\"expect yMin\"+yMin+\",yMax\"+yMax);\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    private void fuckBySingle(String strokeName,HandList handList,int i){\n        String letter = singles.get(strokeName);", "        if(letter != null){\n            String w = handList.getWordList()[i];\n            if(w == null){\n                //change-3\n                handList.getWordFromList()[i] = \"single\";\n                handList.getWordList()[i] = letter;\n            }\n        }\n    }\n\n\n    private static boolean fuckByTrace(Stroke stroke, List<Point> userLines, Helper helper) {\n\n        System.out.println(\"\u6b63\u5728\u8bc6\u522b\u7b14\u753bstroke:\" + stroke.getStroke());\n        int i = 0;\n        int j = 0;", "        for (Line condLine : stroke.getLines()) {\n            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j);\n\n            //change-6\n            condLine.setLinePoints(new ArrayList<>());\n\n            for (; i < userLines.size(); i++) {\n                if (i == 0) {\n                    continue;\n                }\n                //2\u4e2a\u70b9\u95f4\u7684\u89d2\u5ea6\n                Point prePoint = userLines.get(i - 1);\n                Point curPoint = userLines.get(i);\n                boolean inStatus = isStart(condLine, prePoint, curPoint);\n\n                //4\u79cd\u72b6\u6001\uff0c\u4e4b\u524d\u5728\u4e0d\u5728\uff0c\u73b0\u5728\u5728\u4e0d\u5728\n                //\u4e4b\u524d\u5728", "                if (inStatus) {\n                    if (!condLine.isInState()) {\n                        condLine.setInState(true);\n                        condLine.setFirstPoint(prePoint);\n                        //change-6\n                        condLine.getLinePoints().add(prePoint);\n                    }\n                    //change-6\n                    condLine.getLinePoints().add(curPoint);\n                    if (i == userLines.size() - 1) {\n                        condLine.setLastPoint(curPoint);", "                    if (i == userLines.size() - 1) {\n                        condLine.setLastPoint(curPoint);\n                        if (fuckByLine(condLine, helper)) {\n                            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j + \"success\");\n                            condLine.setPass(true);\n                            break;\n                        } else {\n                            condLine.setInState(false);\n                        }\n                    }\n                } else {", "                    if (condLine.isInState()) {\n                        //\u5224\u65ad\u8fd9\u5927\u6bb5\u662f\u5426\u7b26\u5408condLine\n                        condLine.setLastPoint(prePoint);\n                        if (fuckByLine(condLine, helper)) {\n                            System.out.println(\"\u6b63\u5728\u8bc6\u522bline:\" + j + \"success\");\n                            condLine.setPass(true);\n                            condLine.setFirstPoint(null);\n                            condLine.setLastPoint(null);\n                            condLine.setInState(false);\n                            break;\n                        } else {\n                            condLine.setInState(false);\n                        }\n                    }\n                }\n            }\n            j++;\n        }", "        if (isAllPass(stroke)) {\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean isAllPass(Stroke stroke) {\n        boolean r = true;\n        for (Line line : stroke.getLines()) {\n            r = r && line.isPass();\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n    private static void clearCondLine(Line line) {\n        line.setPass(false);\n        line.setInState(false);\n        line.setFirstPoint(null);\n        line.setLastPoint(null);\n    }\n\n\n    private static boolean fuckByLine(Line condLine, Helper helper) {\n\n        float deg = getDeg(condLine.getFirstPoint(), condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        for (Line line : stroke.getLines()) {\n            r = r && line.isPass();\n            line.setPass(false);\n            line.setInState(false);\n            line.setFirstPoint(null);\n            line.setLastPoint(null);\n        }\n        return r;\n    }\n\n    private static void clearCondLine(Line line) {\n        line.setPass(false);\n        line.setInState(false);\n        line.setFirstPoint(null);\n        line.setLastPoint(null);\n    }\n\n\n    private static boolean fuckByLine(Line condLine, Helper helper) {\n\n        float deg = getDeg(condLine.getFirstPoint(), condLine.getLastPoint());\n        //\u5148\u5224\u65ad\u662f\u5426\u7b26\u5408\u9996\u5c3e\u89d2\u5ea6", "        if (!inRange(deg, condLine.getDegs())) {\n            System.out.println(\"deg...cur:\" + deg + \";expect:\" + JSONUtil.toJsonStr(condLine.getDegs()));\n            return false;\n        }\n        if (!inRangeByDistance(condLine, helper)) {\n            return false;\n        }\n\n        //change-6\n        if (!inRangeByArea(condLine, helper)) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private static boolean isStart(Line condLine, Point prePoint, Point curPoint) {\n\n        Float deg = getDeg(prePoint, curPoint);\n        return inRange(deg, condLine.getArrows());\n    }\n\n    private static boolean inRange(float deg, Range[] ranges) {", "        if (!inRangeByArea(condLine, helper)) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private static boolean isStart(Line condLine, Point prePoint, Point curPoint) {\n\n        Float deg = getDeg(prePoint, curPoint);\n        return inRange(deg, condLine.getArrows());\n    }\n\n    private static boolean inRange(float deg, Range[] ranges) {", "        for (Range range : ranges) {\n            if (deg >= range.getMin() && deg <= range.getMax()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static boolean inRange(float deg, Range range) {\n        if (deg >= range.getMin() && deg <= range.getMax()) {\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean inRangeByDistance(Line line, Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());", "        if (deg >= range.getMin() && deg <= range.getMax()) {\n            return true;\n        }\n        return false;\n    }\n\n    private static boolean inRangeByDistance(Line line, Helper helper){\n\n        float x = Math.abs(line.getLastPoint().getX() - line.getFirstPoint().getX());\n        float y = Math.abs(line.getLastPoint().getY() - line.getFirstPoint().getY());\n        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }", "        if(!inRange(x / helper.getXDistance() , line.getCurXPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur x:\"+x / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurXPercent()));\n            return false;\n        }\n        if(!inRange(y / helper.getYDistance() , line.getCurYPercent())){\n            System.out.println(\"\u6bd4\u4f8b:cur y:\"+y / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getCurYPercent()));\n            return false;\n        }\n\n        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }", "        if(line.getDiffYPercent() != null){\n            if(!inRange(x / helper.getYDistance() , line.getDiffYPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b:cur x:\"+x / helper.getYDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffYPercent()));\n                return false;\n            }\n        }\n        if(line.getDiffXPercent() != null){\n            if(!inRange(y / helper.getXDistance() , line.getDiffXPercent())){\n                System.out.println(\"\u5f02\u8f74\u6bd4\u4f8b2:cur y:\"+y / helper.getXDistance()+\":\"+ JSONUtil.toJsonStr(line.getDiffXPercent()));\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    //change-6 \u6574\u4e2a\u65b9\u6cd5\u90fd\u662f\u65b0\u52a0\u7684\n    private static boolean inRangeByArea(Line line, Helper helper){\n", "        if(line.getArea() == null){\n            return true;\n        }\n\n        float xMin = helper.getMinX() + helper.getXDistance() * line.getArea().getXRange().getMin();\n        float xMax = helper.getMinX() + helper.getXDistance() * line.getArea().getXRange().getMax();\n        float yMin = helper.getMinY() + helper.getYDistance() * line.getArea().getYRange().getMin();\n        float yMax = helper.getMinY() + helper.getYDistance() * line.getArea().getYRange().getMax();\n\n        for (Point point : line.getLinePoints()) {\n            if(point.getX() >= xMin && point.getX() <= xMax\n                && point.getY() >= yMin && point.getY() <= yMax ){\n                return true;\n            }\n        }\n\n        System.out.println(\"\u7ebf\u6761\u8bc6\u522btouch\uff1a\"+JSONUtil.toJsonStr(line.getArea())+\"expect xMin\"+xMin+\",xMax\"+xMax);\n\n        return false;\n    }\n//\n    //\u9884\u5904\u7406\u70b9\u4fe1\u606f\n    private static HandList preDoPoint(List<Point> objList) {\n        HandList handList = new HandList();\n        List<Point> lineList = null;", "        for (Point point : line.getLinePoints()) {\n            if(point.getX() >= xMin && point.getX() <= xMax\n                && point.getY() >= yMin && point.getY() <= yMax ){\n                return true;\n            }\n        }\n\n        System.out.println(\"\u7ebf\u6761\u8bc6\u522btouch\uff1a\"+JSONUtil.toJsonStr(line.getArea())+\"expect xMin\"+xMin+\",xMax\"+xMax);\n\n        return false;\n    }\n//\n    //\u9884\u5904\u7406\u70b9\u4fe1\u606f\n    private static HandList preDoPoint(List<Point> objList) {\n        HandList handList = new HandList();\n        List<Point> lineList = null;", "        for (Point point : objList) {\n            if (\"down\".equals(point.getAction())) {\n                lineList = new ArrayList<>();\n            }\n            lineList.add(point);\n            if (\"up\".equals(point.getAction())) {\n                handList.getLineList().add(lineList);\n            }\n        }\n\n        //\u9884\u5904\u7406,\u53bb\u9664\u4e00\u4e2a\u5730\u65b9\u591a\u70b9\u7684\u60c5\u51b5,\u6392\u9664\u5e72\u6270", "        for (int j = 0; j < handList.getLineList().size(); j++) {\n            List<Point> points = handList.getLineList().get(j);\n            List<Point> newPoints = new ArrayList<>();\n            Point stand = null;\n            for (int i = 0; i < points.size(); i++) {\n                if (i == 0) {\n                    stand = points.get(i);\n                    newPoints.add(points.get(i));\n                    continue;\n                }\n                Point cur = points.get(i);", "                if (Math.abs(cur.getX() - stand.getX()) >= 5 || Math.abs(cur.getY() - stand.getY()) >= 5) {\n                    newPoints.add(points.get(i));\n                    stand = points.get(i);\n                }\n            }\n            //\u8fc7\u6ee4\u5355\u4e2a\u70b9\u7684\u7b14\u753b,\u53ef\u80fd\u662f\u8bef\u70b9\n            if (newPoints.size() > 1) {\n                handList.getLineList().set(j, newPoints);\n            } else {\n                handList.getLineList().remove(j);\n            }\n        }\n\n        handList.setWordList(new String[handList.getLineList().size()]);\n        //change-3\n        handList.setWordFromList(new String[handList.getLineList().size()]);\n        handList.setHelperList(new Helper[handList.getLineList().size()]);\n\n        //change-5\n        handList.setStrokeUsedList(new int[handList.getLineList().size()]);\n\n        //change-1\n        List<List<String>> strokeList = new ArrayList<>();", "        for (List<Point> points : handList.getLineList()) {\n            strokeList.add(new ArrayList<>());\n        }\n        handList.setStrokeList(strokeList);\n        return handList;\n    }\n\n    private static float getDeg(Point fromPoint, Point toPoint) {\n        float deg = (float) Math.toDegrees(Math.atan2(toPoint.getY() - fromPoint.getY(), toPoint.getX() - fromPoint.getX()));\n        if (deg < 0) {\n            deg += 360;\n        }\n        return deg;\n    }\n\n    private static void setXY(Helper helper, List<Point> pointList) {\n\n        int minX = 0;\n        int maxX = 0;\n        int minY = 0;\n        int maxY = 0;\n\n        int i = 0;", "        if (deg < 0) {\n            deg += 360;\n        }\n        return deg;\n    }\n\n    private static void setXY(Helper helper, List<Point> pointList) {\n\n        int minX = 0;\n        int maxX = 0;\n        int minY = 0;\n        int maxY = 0;\n\n        int i = 0;", "        for (Point point : pointList) {\n            if (i++ == 0) {\n                minY = point.getY();\n                maxY = point.getY();\n                minX = point.getX();\n                maxX = point.getX();\n                continue;\n            }\n            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }", "            if (point.getY() > maxY) {\n                maxY = point.getY();\n            }\n            if (point.getY() < minY) {\n                minY = point.getY();\n            }\n            if (point.getX() > maxX) {\n                maxX = point.getX();\n            }\n            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setMinX(minX);\n        helper.setMaxX(maxX);\n        helper.setMinY(minY);\n        helper.setMaxY(maxY);\n\n        helper.setXDistance(xDistance == 0 ? 1 : xDistance);\n        helper.setYDistance(yDistance == 0 ? 1 : yDistance);\n    }\n}\n\n@Data\nclass Compose {\n    private String letter;\n    private List<StrokeComposeVo> strokes;\n}\n\n@Data\nclass Line {\n    //\u7b14\u8ff9\n    private Range[] arrows;\n    private Range[] degs;\n    private Range curXPercent;\n    private Range curYPercent;\n    private Range diffXPercent;\n    private Range diffYPercent;\n    //change-6\n    private LineArea area;\n\n    //\u7528\u4e8e\u5224\u65ad\n    //\u662f\u5426\u6b63\u5728\n    private boolean inState;\n    private Point firstPoint;\n    private Point lastPoint;\n    private boolean pass;\n    //change-6\n    private List<Point> linePoints;\n}\n\n@Data\nclass Helper {\n\n    private int minX;\n    private int minY;\n    private int maxX;\n    private int maxY;\n\n    private int xDistance;\n    private int yDistance;\n}\n\n@Data\nclass HandList {\n    private List<List<Point>> lineList = new ArrayList<>();\n    //change-1\n    private List<List<String>> strokeList;\n    private String[] wordList;\n    //change-3\n    private String[] wordFromList;\n    private Helper[] helperList;\n    //change-5\n    private int[] strokeUsedList;\n}\n\n@Data\nclass StrokeComposeVo {\n\n    private String stroke;\n    private String role;\n    private Position x;\n    private Position y;\n}\n\n@Data\nclass Position{\n    private String mode;\n    private Range range;\n}\n\n@Data\nclass Stroke {\n    private String stroke;\n    private Integer asc;\n    private List<Line> lines;\n}\n\n@AllArgsConstructor\n@Data\nclass Range {\n    float min;\n    float max;\n}\n\n@Data\nclass LineArea{\n    private String mode;\n    private Range xRange;\n    private Range yRange;\n}\n\n", "            if (point.getX() < minX) {\n                minX = point.getX();\n            }\n        }\n\n        int xDistance = maxX - minX;\n        int yDistance = maxY - minY;\n\n        helper.setMinX(minX);\n        helper.setMaxX(maxX);\n        helper.setMinY(minY);\n        helper.setMaxY(maxY);\n\n        helper.setXDistance(xDistance == 0 ? 1 : xDistance);\n        helper.setYDistance(yDistance == 0 ? 1 : yDistance);\n    }\n}\n\n@Data\nclass Compose {\n    private String letter;\n    private List<StrokeComposeVo> strokes;\n}\n\n@Data\nclass Line {\n    //\u7b14\u8ff9\n    private Range[] arrows;\n    private Range[] degs;\n    private Range curXPercent;\n    private Range curYPercent;\n    private Range diffXPercent;\n    private Range diffYPercent;\n    //change-6\n    private LineArea area;\n\n    //\u7528\u4e8e\u5224\u65ad\n    //\u662f\u5426\u6b63\u5728\n    private boolean inState;\n    private Point firstPoint;\n    private Point lastPoint;\n    private boolean pass;\n    //change-6\n    private List<Point> linePoints;\n}\n\n@Data\nclass Helper {\n\n    private int minX;\n    private int minY;\n    private int maxX;\n    private int maxY;\n\n    private int xDistance;\n    private int yDistance;\n}\n\n@Data\nclass HandList {\n    private List<List<Point>> lineList = new ArrayList<>();\n    //change-1\n    private List<List<String>> strokeList;\n    private String[] wordList;\n    //change-3\n    private String[] wordFromList;\n    private Helper[] helperList;\n    //change-5\n    private int[] strokeUsedList;\n}\n\n@Data\nclass StrokeComposeVo {\n\n    private String stroke;\n    private String role;\n    private Position x;\n    private Position y;\n}\n\n@Data\nclass Position{\n    private String mode;\n    private Range range;\n}\n\n@Data\nclass Stroke {\n    private String stroke;\n    private Integer asc;\n    private List<Line> lines;\n}\n\n@AllArgsConstructor\n@Data\nclass Range {\n    float min;\n    float max;\n}\n\n@Data\nclass LineArea{\n    private String mode;\n    private Range xRange;\n    private Range yRange;\n}\n\n"]}
{"filename": "src/main/java/com/hs/trace/service/formula/FormulaUtil.java", "chunked_list": ["package com.hs.trace.service.formula;\n\nimport cn.hutool.core.util.StrUtil;\nimport lombok.Data;\nimport lombok.extern.java.Log;\nimport org.dom4j.Document;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.springframework.util.CollectionUtils;\n", "import org.springframework.util.CollectionUtils;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.*;\n\n\n@Log\npublic class FormulaUtil {\n\n  private static String ERROR_STR = \"ERROR\";\n  private static int index = 0;\n", "  public static void main(String[] args) throws Exception {\n    String latex = mml2Latex(\"<math><?xml version=\\\"1.0\\\" encoding=\\\"UTF-16\\\"?><mml:math xmlns:mml=\\\"http://www.w3.org/1998/Math/MathML\\\" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"><mml:mi mathvariant=\\\"normal\\\">f</mml:mi><mml:mo>(</mml:mo><mml:mi mathvariant=\\\"normal\\\">x</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mo>-</mml:mo><mml:msup><mml:mrow><mml:mi  >x</mml:mi><mml:mi >x</mml:mi></mml:mrow><mml:mrow><mml:mn>3</mml:mn></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi mathvariant=\\\"normal\\\">f</mml:mi><mml:mi mathvariant=\\\"normal\\\">'</mml:mi><mml:mo>(</mml:mo><mml:mn>2</mml:mn><mml:mo>)</mml:mo><mml:mi mathvariant=\\\"normal\\\">x</mml:mi><mml:mo>+</mml:mo><mml:mrow><mml:msubsup><mml:mo stretchy=\\\"false\\\">\u222b</mml:mo><mml:mrow><mml:mn>0</mml:mn></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msubsup><mml:mrow><mml:mi mathvariant=\\\"normal\\\">f</mml:mi><mml:mo>(</mml:mo><mml:mi mathvariant=\\\"normal\\\">x</mml:mi><mml:mo>)</mml:mo><mml:mi mathvariant=\\\"normal\\\">d</mml:mi><mml:mi mathvariant=\\\"normal\\\">x</mml:mi></mml:mrow></mml:mrow></mml:math></math>\");\n    System.err.println(latex);\n\n  }\n\n  private static List<String> speWords = new ArrayList<>();\n\n  static {\n    speWords.add(\"(\");\n    speWords.add(\"[\");\n    speWords.add(\"\\\\{\");\n    speWords.add(\"|\");\n    speWords.add(\")\");\n    speWords.add(\"]\");\n    speWords.add(\"\\\\}\");\n  }\n", "  public static String mml2Latex(String mml) {\n    log.info(\"index:\" + index++);\n    log.info(\"mml:\"+mml);\n    if (StrUtil.isBlank(mml)) {\n      return ERROR_STR;\n    }\n    mml = preDo(mml);\n    FormMulaHelper helper = new FormMulaHelper();\n    try {\n      SAXReader saxReader = new SAXReader();\n      Document document = saxReader.read(new ByteArrayInputStream(mml.getBytes()));\n      Element rootElement = document.getRootElement();\n      Iterator it = rootElement.elementIterator();", "    try {\n      SAXReader saxReader = new SAXReader();\n      Document document = saxReader.read(new ByteArrayInputStream(mml.getBytes()));\n      Element rootElement = document.getRootElement();\n      Iterator it = rootElement.elementIterator();\n      while (it.hasNext()) {\n        Element item = (Element) it.next();\n        parseElement(item, helper);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      return \"error\";\n    }\n    log.info(\"latex:\"+helper.getSb().toString());\n    return helper.getSb().toString();\n  }\n", "  public static String preDo(String mml) {\n    mml = mml.replaceAll(\"<\\\\?xml.*?>\", \"\");\n    mml = mml.trim();\n    return mml;\n  }\n\n  public static void parseElement(Element element, FormMulaHelper helper) throws Exception {\n\n    String elementName = element.getName();\n\n    String[] symbols = new String[]{\"mglyph\", \"mi\", \"mn\", \"mo\", \"ms\", \"mspace\", \"mtext\"};\n    String[] undos = new String[]{\"maligngroup\", \"malignmark\", \"mlabeledtr\", \"mlongdiv\",\n        \"mscarries\", \"mscarry\", \"msgroup\", \"msline\", \"msrow\", \"mstack\", \"none\"};\n", "    if (Arrays.asList(symbols).contains(elementName)) {\n      parseSymbol(element, helper);\n    }\n    //\u5e03\u5c40\n    else if (StrUtil.equals(\"menclose\", elementName)) {\n      // todo\n      // https://developer.mozilla.org/zh-CN/docs/Web/MathML/Element/menclose\n    } else if (StrUtil.equals(\"merror\", elementName)) {\n      // todo\n      // https://developer.mozilla.org/zh-CN/docs/Web/MathML/Element/merror\n    } else if (StrUtil.equals(\"mfenced\", elementName)) {\n      parseFenced(element, helper);", "    } else if (StrUtil.equals(\"mfenced\", elementName)) {\n      parseFenced(element, helper);\n    } else if (StrUtil.equals(\"mfrac\", elementName)) {\n      parseMfrac(element, helper);\n    } else if (StrUtil.equals(\"mpadded\", elementName)) {\n      parseMpadded(element, helper);\n    } else if (StrUtil.equals(\"msup\", elementName)) {\n      parseMsup(element, helper);\n    } else if (StrUtil.equals(\"msub\", elementName)) {\n      parseMsub(element, helper);\n    } else if (StrUtil.equals(\"msubsup\", elementName)) {\n      parseMsubsup(element, helper);", "    } else if (StrUtil.equals(\"msub\", elementName)) {\n      parseMsub(element, helper);\n    } else if (StrUtil.equals(\"msubsup\", elementName)) {\n      parseMsubsup(element, helper);\n    } else if (StrUtil.equals(\"menclose\", elementName)) {\n      parseMenclose(element, helper);\n    } else if (StrUtil.equals(\"merror\", elementName)) {\n      parseMerror(element, helper);\n    } else if (StrUtil.equals(\"mphantom\", elementName)) {\n      parseMphantom(element, helper);\n    } else if (StrUtil.equals(\"mroot\", elementName)) {\n      parseMroot(element, helper);", "    } else if (StrUtil.equals(\"mphantom\", elementName)) {\n      parseMphantom(element, helper);\n    } else if (StrUtil.equals(\"mroot\", elementName)) {\n      parseMroot(element, helper);\n    } else if (StrUtil.equals(\"mrow\", elementName)) {\n      parseMrow(element, helper);\n    } else if (StrUtil.equals(\"msqrt\", elementName)) {\n      parseMsqrt(element, helper);\n    } else if (StrUtil.equals(\"mstyle\", elementName)) {\n      parseMstyle(element, helper);\n    } else if (StrUtil.equals(\"mmultiscripts\", elementName)) {\n      parseMmultiscripts(element, helper);", "    } else if (StrUtil.equals(\"mstyle\", elementName)) {\n      parseMstyle(element, helper);\n    } else if (StrUtil.equals(\"mmultiscripts\", elementName)) {\n      parseMmultiscripts(element, helper);\n    } else if (StrUtil.equals(\"mover\", elementName)) {\n      parseMover(element, helper);\n    } else if (StrUtil.equals(\"munder\", elementName)) {\n      parseMunder(element, helper);\n    } else if (StrUtil.equals(\"munderover\", elementName)) {\n      parseMunderover(element, helper);\n    } else if (StrUtil.equals(\"mtable\", elementName)) {\n      parseMtable(element, helper);\n    }\n", "    } else if (StrUtil.equals(\"munderover\", elementName)) {\n      parseMunderover(element, helper);\n    } else if (StrUtil.equals(\"mtable\", elementName)) {\n      parseMtable(element, helper);\n    }\n\n//    else if (Arrays.asList(undos).contains(elementName)){\n//      //undo\n//    }\n    else {\n      Iterator it = element.elementIterator();", "      while (it.hasNext()) {\n        Element item = (Element) it.next();\n        parseElement(item, helper);\n      }\n    }\n  }\n\n\n  public static void parseSymbol(Element element, FormMulaHelper helper) {\n    String txt = element.getText();\n    if(StrUtil.isBlank(txt)){\n        return;\n    }", "  public static void parseSymbol(Element element, FormMulaHelper helper) {\n    String txt = element.getText();\n    if(StrUtil.isBlank(txt)){\n        return;\n    }\n    if(helper.isInText()){\n        helper.append(txt);\n        return;\n    }\n    boolean style = false;\n    String m = element.attributeValue(\"mathvariant\");", "    if(StrUtil.isNotBlank(m)){\n        if(m.equals(\"normal\")){\n            style = true;\n            helper.append(\"\\\\text\");\n        }\n        if(m.equals(\"bold\")){\n            style = true;\n            helper.append(\"\\\\textbf\");\n        }\n    }\n    if (StrUtil.isNotBlank(txt)) {\n      txt = txt.trim();\n      boolean isCond = txt.length() > 1;", "    if (StrUtil.isNotBlank(txt)) {\n      txt = txt.trim();\n      boolean isCond = txt.length() > 1;\n      if (isCond || style) {\n        helper.append(\"{\");\n      }\n      helper.append(key(txt));\n      if (isCond || style) {\n        helper.append(\"}\");\n      }\n    }\n  }\n\n", "  public static void parseFenced(Element element, FormMulaHelper helper) throws Exception {\n\n    String open = element.attributeValue(\"open\");\n    String close = element.attributeValue(\"close\");\n    if(open == null){\n      open = \"(\";\n    }\n    if(close == null){\n      close = \")\";\n    }\n    open = key(open);\n    close = key(close);\n\n    boolean hasLeft = false;", "    if(speWords.contains(open)){\n      open = \"\\\\left \" + open;\n      hasLeft = true;\n    }\n\n    if(close.equals(\"\") && hasLeft){\n      close = \"\\\\right. \";\n    }else if(speWords.contains(close) && hasLeft){\n      close = \"\\\\right \"+close;\n    }\n\n    String separators = element.attributeValue(\"separators\");\n    char[] chars = new char[1];\n    chars[0] = ' ';", "    if(separators != null){\n      chars = separators.toCharArray();;\n    }\n\n    helper.append(open + \" \");\n    Iterator it = element.elementIterator();\n    int i = 0;\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n      if (it.hasNext()) {\n        helper.append(i >= chars.length ? String.valueOf(chars[chars.length - 1]) : String.valueOf(chars[i]));\n      }\n      i++;\n    }\n    helper.append(\" \" + close);\n  }\n", "      if (it.hasNext()) {\n        helper.append(i >= chars.length ? String.valueOf(chars[chars.length - 1]) : String.valueOf(chars[i]));\n      }\n      i++;\n    }\n    helper.append(\" \" + close);\n  }\n\n  public static void parseMsub(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;", "  public static void parseMsub(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\"{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      } else if (i == 1) {\n        helper.append(\"_{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n", "      } else if (i == 1) {\n        helper.append(\"_{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n\n  public static void parseMsup(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;", "  public static void parseMsup(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\"{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      } else if (i == 1) {\n        helper.append(\"^{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n", "      } else if (i == 1) {\n        helper.append(\"^{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n\n  public static void parseMsubsup(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;", "  public static void parseMsubsup(Element element, FormMulaHelper helper) throws Exception {\n\n    Iterator it = element.elementIterator();\n    int i = 0;\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\"{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      } else if (i == 1) {\n        helper.append(\"_\");\n        parseElement(item, helper);\n        helper.append(\"}\");", "      } else if (i == 1) {\n        helper.append(\"_\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      } else if (i == 2) {\n        helper.append(\"^{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n", "  public static void parseMfrac(Element element, FormMulaHelper helper) throws Exception {\n\n    helper.append(\"\\\\frac\");\n    Iterator it = element.elementIterator();\n    int i = 0;\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\"{\");\n        parseElement(item, helper);\n        helper.append(\"}\");", "      } else if (i == 1) {\n        helper.append(\"{\");\n        parseElement(item, helper);\n        helper.append(\"}\");\n      }\n      i++;\n    }\n  }\n\n  public static void parseMenclose(Element element, FormMulaHelper helper) throws Exception {\n\n    //\u5e94\u6309\u7167notation\u505a\u4e0d\u540c\u7684\u8f6c\u5316\uff0c\u5b9e\u9645\u8fc7\u7a0b\uff0c\u6ca1\u6709\u8f6c\u5316\u89c4\u5219\n    String notation = element.attributeValue(\"notation\");\n    helper.append(\"\\\\overline\");\n    Iterator it = element.elementIterator();\n    int i = 0;\n    helper.append(\"{\");", "  public static void parseMenclose(Element element, FormMulaHelper helper) throws Exception {\n\n    //\u5e94\u6309\u7167notation\u505a\u4e0d\u540c\u7684\u8f6c\u5316\uff0c\u5b9e\u9645\u8fc7\u7a0b\uff0c\u6ca1\u6709\u8f6c\u5316\u89c4\u5219\n    String notation = element.attributeValue(\"notation\");\n    helper.append(\"\\\\overline\");\n    Iterator it = element.elementIterator();\n    int i = 0;\n    helper.append(\"{\");\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\")\");\n      }\n      parseElement(item, helper);\n      i++;\n    }\n    helper.append(\"}\");\n  }\n", "    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      if (i == 0) {\n        helper.append(\")\");\n      }\n      parseElement(item, helper);\n      i++;\n    }\n    helper.append(\"}\");\n  }\n", "  public static void parseMerror(Element element, FormMulaHelper helper) throws Exception {\n    //error latex\u6ca1\u6709\u5bf9\u5e94\u7684\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n    }\n  }\n\n  public static void parseMpadded(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();", "  public static void parseMpadded(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n    }\n  }\n\n  public static void parseMphantom(Element element, FormMulaHelper helper) throws Exception {\n    helper.append(\"\\\\phantom\");\n    Iterator it = element.elementIterator();\n    helper.append(\"{\");", "  public static void parseMphantom(Element element, FormMulaHelper helper) throws Exception {\n    helper.append(\"\\\\phantom\");\n    Iterator it = element.elementIterator();\n    helper.append(\"{\");\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n    }\n    helper.append(\"}\");\n  }\n", "  public static void parseMroot(Element element, FormMulaHelper helper) throws Exception {\n    helper.append(\"\\\\sqrt\");\n    int i = 0;\n    Iterator it = element.elementIterator();\n\n    Element item0 = null;\n    Element item1 = null;\n    while (it.hasNext()) {\n      if (i == 0) {\n        item0 = (Element) it.next();\n      } else if (i == 1) {\n        item1 = (Element) it.next();\n      }\n      i++;\n    }\n", "      if (i == 0) {\n        item0 = (Element) it.next();\n      } else if (i == 1) {\n        item1 = (Element) it.next();\n      }\n      i++;\n    }\n\n    if (item1 != null) {\n      helper.append(\"[\");\n      parseElement(item1, helper);\n      helper.append(\"]\");\n    }", "    if (item1 != null) {\n      helper.append(\"[\");\n      parseElement(item1, helper);\n      helper.append(\"]\");\n    }\n    if (item0 != null) {\n      parseElement(item0, helper);\n    }\n  }\n\n  public static void parseMrow(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();", "  public static void parseMrow(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n    }\n  }\n\n  public static void parseMsqrt(Element element, FormMulaHelper helper) throws Exception {\n    helper.append(\"\\\\sqrt\");\n\n    helper.addTempData();\n    Iterator it = element.elementIterator();", "  public static void parseMsqrt(Element element, FormMulaHelper helper) throws Exception {\n    helper.append(\"\\\\sqrt\");\n\n    helper.addTempData();\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element tmp = (Element) it.next();\n      parseElement(tmp, helper);\n    }\n    String tmpData = helper.getTempData();\n\n    helper.append(\"{\");\n    helper.append(tmpData);\n    helper.append(\"}\");\n  }\n", "  public static void parseMstyle(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n    }\n  }\n\n  public static void parseMmultiscripts(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();\n    boolean before = false;\n    Element mainElement = null;\n    List<Element> beforeList = new ArrayList<>();\n    List<Element> afterList = new ArrayList<>();\n    int i = 0;", "  public static void parseMmultiscripts(Element element, FormMulaHelper helper) throws Exception {\n    Iterator it = element.elementIterator();\n    boolean before = false;\n    Element mainElement = null;\n    List<Element> beforeList = new ArrayList<>();\n    List<Element> afterList = new ArrayList<>();\n    int i = 0;\n    while (it.hasNext()) {\n      Element ele = (Element) it.next();\n      if(i++ == 0){\n        mainElement = ele;\n        continue;\n      }", "      if(i++ == 0){\n        mainElement = ele;\n        continue;\n      }\n      if (StrUtil.equals(ele.getName(), \"mprescripts\")) {\n        before = true;\n        continue;\n      }\n      if(before){\n        beforeList.add(ele);\n      }else{\n        afterList.add(ele);\n      }\n    }\n", "      if(before){\n        beforeList.add(ele);\n      }else{\n        afterList.add(ele);\n      }\n    }\n\n    for(i = 0 ; i<beforeList.size() ;i++ ){\n      if(i == 0){\n        if(beforeList.get(i).getName().equals(\"none\")){\n          continue;\n        }\n        helper.addTempData();\n        parseElement(beforeList.get(i), helper);\n        String temp = helper.getTempData();", "      if(i == 0){\n        if(beforeList.get(i).getName().equals(\"none\")){\n          continue;\n        }\n        helper.addTempData();\n        parseElement(beforeList.get(i), helper);\n        String temp = helper.getTempData();\n        if(!StrUtil.isBlank(temp.trim())){\n          helper.append(\"_\");\n          helper.append(temp);\n        }\n      }", "      if(i == 1){\n        if(beforeList.get(i).getName().equals(\"none\")){\n          continue;\n        }\n        helper.addTempData();\n        parseElement(beforeList.get(i), helper);\n        String temp = helper.getTempData();\n        if(!StrUtil.isBlank(temp.trim())){\n          helper.append(\"^\");\n          helper.append(temp);\n        }\n      }\n    }\n//    helper.append(\"\\\\textrm{\");\n//    helper.setInText(true);\n    parseElement(mainElement, helper);\n//    helper.setInText(false);\n//    helper.append(\"}\");\n", "    for(i = 0 ; i<afterList.size() ;i++ ){\n      if(i == 0){\n        if(afterList.get(i).getName().equals(\"none\")){\n          continue;\n        }\n        helper.addTempData();\n        parseElement(afterList.get(i), helper);\n        String temp = helper.getTempData();\n        if(!StrUtil.isBlank(temp.trim())){\n          helper.append(\"_\");\n          helper.append(temp);\n        }\n      }", "        if(!StrUtil.isBlank(temp.trim())){\n          helper.append(\"_\");\n          helper.append(temp);\n        }\n      }\n      if(i == 1){\n        if(afterList.get(i).getName().equals(\"none\")){\n          continue;\n        }\n        helper.addTempData();\n        parseElement(afterList.get(i), helper);\n        String temp = helper.getTempData();", "        if(!StrUtil.isBlank(temp.trim())){\n          helper.append(\"^\");\n          helper.append(temp);\n        }\n      }\n    }\n\n  }\n\n  public static void parseMover(Element element, FormMulaHelper helper) throws Exception {\n\n    int i = 0;\n    Iterator it = element.elementIterator();\n\n    Element item0 = null;\n    Element item1 = null;", "  public static void parseMover(Element element, FormMulaHelper helper) throws Exception {\n\n    int i = 0;\n    Iterator it = element.elementIterator();\n\n    Element item0 = null;\n    Element item1 = null;\n    while (it.hasNext()) {\n      Element tmp = (Element) it.next();\n      if (i == 0) {\n        item0 = tmp;", "      if (i == 0) {\n        item0 = tmp;\n      } else if (i == 1) {\n        item1 = tmp;\n      }\n      i++;\n    }\n\n    if (item1 != null) {\n\n      helper.addTempData();\n      parseElement(item1, helper);\n      String tmpData = helper.getTempData();\n      String t = tmpData.trim();", "    if (item1 != null) {\n\n      helper.addTempData();\n      parseElement(item1, helper);\n      String tmpData = helper.getTempData();\n      String t = tmpData.trim();\n      if (\"~\".equals(t)) {\n        helper.append(\"\\\\widetilde\");\n      } else if (\"^\".equals(t)) {\n        helper.append(\"\\\\widehat\");\n      } else if (\"\u2190\".equals(t)) {\n        helper.append(\"\\\\overleftarrow\");", "      } else if (\"^\".equals(t)) {\n        helper.append(\"\\\\widehat\");\n      } else if (\"\u2190\".equals(t)) {\n        helper.append(\"\\\\overleftarrow\");\n      } else if (\"\u2192\".equals(t)) {\n        helper.append(\"\\\\overrightarrow\");\n      } else if (\"-\".equals(t)) {\n        helper.append(\"\\\\overline\");\n      } else if (\"\u23de\".equals(t)) {\n        helper.append(\"\\\\overbrace\");\n      } else {\n        helper.append(\"\\\\overset{\"+tmpData+\"}\");\n      }\n    }", "      } else if (\"\u23de\".equals(t)) {\n        helper.append(\"\\\\overbrace\");\n      } else {\n        helper.append(\"\\\\overset{\"+tmpData+\"}\");\n      }\n    }\n    if (item0 != null) {\n      helper.append(\"{\");\n      parseElement(item0, helper);\n      helper.append(\"}\");\n    }\n  }\n", "  public static void parseMunder(Element element, FormMulaHelper helper) throws Exception {\n\n    int i = 0;\n    Iterator it = element.elementIterator();\n\n    Element item0 = null;\n    Element item1 = null;\n    while (it.hasNext()) {\n      Element tmp = (Element) it.next();\n      if (i == 0) {\n        item0 = tmp;", "      if (i == 0) {\n        item0 = tmp;\n      } else if (i == 1) {\n        item1 = tmp;\n      }\n      i++;\n    }\n\n    if (item1 != null) {\n\n      helper.addTempData();\n      parseElement(item1, helper);\n      String tmpData = helper.getTempData();\n", "    if (item1 != null) {\n\n      helper.addTempData();\n      parseElement(item1, helper);\n      String tmpData = helper.getTempData();\n\n      if (\"\u23df\".equals(tmpData)) {\n        helper.append(\"\\\\underbrace\");\n      } else {\n        helper.append(\"\\\\underset{\"+tmpData+\"}\");\n      }\n    }", "    if (item0 != null) {\n      helper.append(\"{\");\n      parseElement(item0, helper);\n      helper.append(\"}\");\n    }\n  }\n\n  public static void parseMunderover(Element element, FormMulaHelper helper) throws Exception {\n\n    int i = 0;\n    Iterator it = element.elementIterator();\n\n    Element item0 = null;\n    Element item1 = null;\n    Element item2 = null;", "    while (it.hasNext()) {\n      Element tmp = (Element) it.next();\n      if (i == 0) {\n        item0 = tmp;\n      } else if (i == 1) {\n        item1 = tmp;\n      } else if (i == 2) {\n        item2 = tmp;\n      }\n      i++;\n    }\n", "    if (item1 != null) {\n      helper.addTempData();\n      parseElement(item1, helper);\n      String tmpData = helper.getTempData();\n\n      if (\"\u23df\".equals(tmpData)) {\n        helper.append(\"\\\\underbrace\");\n      } else {\n        helper.append(\"\\\\underset{\"+tmpData+\"}\");\n      }\n    }\n    helper.append(\"{\");\n", "    if (item2 != null) {\n      helper.addTempData();\n      parseElement(item2, helper);\n      String tmpData = helper.getTempData();\n\n      if (\"~\".equals(tmpData)) {\n        helper.append(\"\\\\widetilde\");\n      } else if (\"^\".equals(tmpData)) {\n        helper.append(\"\\\\widehat\");\n      } else if (\"\u2190\".equals(tmpData)) {\n        helper.append(\"\\\\overleftarrow\");", "      } else if (\"\u2190\".equals(tmpData)) {\n        helper.append(\"\\\\overleftarrow\");\n      } else if (\"\u2192\".equals(tmpData)) {\n        helper.append(\"\\\\overrightarrow\");\n      } else if (\"-\".equals(tmpData)) {\n        helper.append(\"\\\\overline\");\n      } else if (\"\u23de\".equals(tmpData)) {\n        helper.append(\"\\\\overbrace\");\n      } else {\n        helper.append(\"\\\\overset\");\n          helper.append(\"{\");\n          helper.append(tmpData);\n          helper.append(\"}\");\n      }\n    }\n    helper.append(\"{\");\n    parseElement(item0, helper);\n    helper.append(\"}\");\n    helper.append(\"}\");\n  }\n", "  public static void parseMtable(Element element, FormMulaHelper helper) throws Exception {\n\n    helper.append(\"\\\\begin{array}{lcl}\");\n\n    Iterator it = element.elementIterator();\n    while (it.hasNext()) {\n      Element item = (Element) it.next();\n      parseElement(item, helper);\n      if (it.hasNext()) {\n        helper.append(\" \\\\\\\\ \");\n      }\n    }\n\n    helper.append(\"\\\\end{array}\");\n  }\n\n\n  private static String key(String key) {", "      if (it.hasNext()) {\n        helper.append(\" \\\\\\\\ \");\n      }\n    }\n\n    helper.append(\"\\\\end{array}\");\n  }\n\n\n  private static String key(String key) {\n    if (StrUtil.isBlank(key)) {\n      return \"\";\n    }", "    if (StrUtil.isBlank(key)) {\n      return \"\";\n    }\n    if (key.equals(\"{\")) {\n      key = \"\\\\{\";\n    }\n    if (key.equals(\"}\")) {\n      key = \"\\\\}\";\n    }\n    if (key.equals(\"%\")) {\n      key = \"\\\\%\";\n    }", "    if (key.equals(\"%\")) {\n      key = \"\\\\%\";\n    }\n    if (key.equals(\"_\")) {\n      key = \"\\\\_\";\n    }\n\n    if (key.equals(\"~\")) {\n      key = \"\\\\sim\";\n    }\n\n    key = key.replaceAll(\"[\\\\s\\\\u00A0]+\", \" \");\n    return key;\n  }\n\n\n\n\n}\n\n@Data\nclass FormMulaHelper {\n\n  private StringBuffer sb = new StringBuffer();\n\n  private List<StringBuffer> tempDataList = new LinkedList<>();\n", "  public void append(String content) {\n    if(CollectionUtils.isEmpty(tempDataList)){\n      sb.append(content);\n    }else{\n      tempDataList.get(tempDataList.size()-1).append(content);\n    }\n  }\n\n  public void addTempData(){\n    tempDataList.add(new StringBuffer());\n  }\n", "  public void addTempData(){\n    tempDataList.add(new StringBuffer());\n  }\n\n  public String getTempData(){\n    String data = tempDataList.get(tempDataList.size()-1 ).toString();\n    tempDataList.remove(tempDataList.size()-1);\n    return data;\n  }\n\n\n  private boolean inText = false;\n\n}"]}
