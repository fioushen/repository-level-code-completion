{"filename": "src/main/java/com/vsantos1/legacy/core/annotations/PathVariable.java", "chunked_list": ["package com.vsantos1.legacy.core.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface PathVariable {", "@Retention(RetentionPolicy.RUNTIME)\npublic @interface PathVariable {\n\n    String value();\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/annotations/RequestMapping.java", "chunked_list": ["package com.vsantos1.legacy.core.annotations;\n\nimport com.vsantos1.legacy.core.enums.ContentType;\nimport com.vsantos1.legacy.core.enums.HttpMethod;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n", "import java.lang.annotation.Target;\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface RequestMapping {\n\n    HttpMethod method() default HttpMethod.GET;\n\n    String value() default \"\";\n", "    String value() default \"\";\n\n    ContentType contentType() default ContentType.APPLICATION_JSON;\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/upload/FileUpload.java", "chunked_list": ["// https://github.com/vsantos1\n\n\n\n/*\n * Copyright (c)  @vsantos1 - https://github.com/vsantos1\n * 2022-2023.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at", " * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License. Licensed under the Apache License, Version 2.0 (the \"License\");", " * See the License for the specific language governing permissions and\n * limitations under the License. Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.vsantos1.legacy.core.upload;\n\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport jakarta.servlet.http.HttpServletResponse;", "import com.vsantos1.legacy.core.enums.HttpStatus;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.Part;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;", "import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.logging.Logger;\n\npublic class FileUpload {\n    private String uploadDir = System.getProperty(\"user.home\");\n\n    private final Logger logger = Logger.getLogger(FileUpload.class.getName());\n    private final List<String> ALLOWED_VIDEO_EXTENSIONS = List.of(\"mp4\", \"webm\", \"ogg\", \"ogv\", \"avi\", \"wmv\", \"mov\", \"flv\", \"3gp\", \"3g2\", \"mkv\");\n\n    private final List<String> ALLOWED_AUDIO_EXTENSIONS = List.of(\"mp3\", \"wav\", \"ogg\", \"oga\", \"flac\", \"m4a\", \"aac\", \"wma\", \"webm\", \"opus\");\n\n    private final List<String> ALLOWED_DOCUMENT_EXTENSIONS = List.of(\"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"ppt\", \"pptx\", \"odt\", \"ods\", \"odp\", \"odg\", \"odc\", \"odf\", \"txt\", \"rtf\", \"csv\", \"tsv\", \"tex\", \"xml\");\n\n    private final List<String> ALLOWED_IMAGE_EXTENSIONS = List.of(\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"svg\", \"webp\");\n\n    private final List<String> ALLOWED_ARCHIVE_EXTENSIONS = List.of(\"zip\", \"rar\", \"7z\", \"tar\", \"gz\", \"bz2\", \"xz\");\n\n    protected void createDirectory(String path) {\n        File uploadDir = new File(path);\n", "        if (!uploadDir.exists()) {\n            uploadDir.mkdirs();\n        }\n    }\n\n    protected void setPathContext(String folderName) {\n        String DIR = this.uploadDir + File.separator + \"uploads\";\n\n\n        if (!folderName.isEmpty() || !folderName.isBlank()) {\n            this.uploadDir = this.uploadDir + File.separator + folderName;\n\n        } else {\n            this.uploadDir = DIR;\n        }\n    }\n\n\n    /**\n     * @param fileName String\n     * @param part     Part\n     * @return void\n     */\n    protected void saveFile(String fileName, Part part) {\n\n        File file = new File(uploadDir, fileName);\n\n        try (InputStream input = part.getInputStream()) {\n            Files.copy(input, file.toPath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * @param unique   boolean\n     * @param fileName String\n     * @return String\n     */\n    protected String generateUniqueFilename(boolean unique, String fileName) {\n\n", "        if (!folderName.isEmpty() || !folderName.isBlank()) {\n            this.uploadDir = this.uploadDir + File.separator + folderName;\n\n        } else {\n            this.uploadDir = DIR;\n        }\n    }\n\n\n    /**\n     * @param fileName String\n     * @param part     Part\n     * @return void\n     */\n    protected void saveFile(String fileName, Part part) {\n\n        File file = new File(uploadDir, fileName);\n\n        try (InputStream input = part.getInputStream()) {\n            Files.copy(input, file.toPath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * @param unique   boolean\n     * @param fileName String\n     * @return String\n     */\n    protected String generateUniqueFilename(boolean unique, String fileName) {\n\n", "        if (unique) {\n            String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n            fileName = fileName.replace(fileName.substring(fileName.lastIndexOf('.')), \"\");\n            return fileName + \"_\" + UUID.randomUUID() + \".\" + fileExtension;\n        }\n\n        return fileName;\n\n    }\n\n    protected void isSizeAllowed(Part part, int maxFileSize) throws IOException {\n\n        // 1MB\n        int DEFAULT_FILE_SIZE = 1024 * 1024;\n\n        maxFileSize = DEFAULT_FILE_SIZE * maxFileSize;\n\n        logger.info(\"File size: \" + part.getSize() * DEFAULT_FILE_SIZE);\n", "        if (part.getSize() > maxFileSize) {\n            throw new IOException(\"File size is too large\");\n        }\n    }\n\n    /**\n     * @param folderName String\n     * @param fileName   String\n     * @param part       Part\n     */\n    protected void execute(String folderName, String fileName, Part part, boolean unique) {\n        fileName = this.generateUniqueFilename(unique, fileName);\n\n        this.setPathContext(folderName);\n\n        this.createDirectory(this.uploadDir);\n\n        this.saveFile(fileName, part);\n    }\n\n    /**\n     * @param parts       Collection<Part>\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     */", "    public void multipleFileUpload(Collection<Part> parts, String folderName, boolean unique, int maxFileSize) {\n\n        try {\n            for (Part part : parts) {\n                this.fileUpload(part, folderName, unique, maxFileSize);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws Exception IOException\n     */\n", "    public void archiveUpload(Part part, String folderName, boolean unique, int maxFileSize) throws Exception {\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n\n        if (!ALLOWED_ARCHIVE_EXTENSIONS.contains(fileExtension)) {\n            throw new IOException(\"Invalid archive file extension type\");\n        }\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n\n    }\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws Exception IOException\n     */\n", "    public void documentUpload(Part part, String folderName, boolean unique, int maxFileSize) throws Exception {\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n\n        if (!ALLOWED_DOCUMENT_EXTENSIONS.contains(fileExtension)) {\n            throw new IOException(\"Invalid document file extension type\");\n        }\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n\n    }\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws Exception IOException\n     */", "    public void audioUpload(Part part, String folderName, boolean unique, int maxFileSize) throws Exception {\n\n\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n\n        if (!ALLOWED_AUDIO_EXTENSIONS.contains(fileExtension)) {\n            throw new IOException(\"Invalid audio file extension type\");\n        }\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n\n    }\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws IOException\n     */", "    public void videoUpload(Part part, String folderName, boolean unique, int maxFileSize) throws IOException {\n\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n\n        if (!ALLOWED_VIDEO_EXTENSIONS.contains(fileExtension)) {\n            throw new IOException(\"Invalid video file extension type\");\n        }\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n\n    }\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws IOException\n     */", "    public void fileUpload(Part part, String folderName, boolean unique, int maxFileSize) throws IOException {\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n\n    }\n\n    /**\n     * @param part        Part\n     * @param folderName  String\n     * @param unique      boolean\n     * @param maxFileSize int (MB)\n     * @return void\n     * @throws IOException\n     */", "    public void imageUpload(Part part, String folderName, boolean unique, int maxFileSize) throws IOException {\n\n        // Get the filename and extension\n        String fileName = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);\n\n        if (!ALLOWED_IMAGE_EXTENSIONS.contains(fileExtension)) {\n            throw new IOException(\"Invalid image file extension type\");\n        }\n\n        // Check if the file size is allowed\n        this.isSizeAllowed(part, maxFileSize);\n\n        // Do the magic\n        this.execute(folderName, fileName, part, unique);\n    }\n", "    public void downloadFileFromDisk(String fileName, HttpServletResponse response) throws IOException {\n        String filePath = this.uploadDir + File.separator + \"uploads\" + File.separator + fileName;\n\n        Path file = Paths.get(filePath);\n\n        if (Files.exists(file)) {\n            response.setContentType(\"application/octet-stream\");\n            response.setStatus(HttpStatus.OK.getValue());\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\"\");\n\n            try (InputStream in = Files.newInputStream(file)) {\n                byte[] buffer = new byte[4096];\n                int bytesRead;", "                while ((bytesRead = in.read(buffer)) != -1) {\n                    response.getOutputStream().write(buffer, 0, bytesRead);\n                }\n            }\n        } else {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n        }\n    }\n\n    public byte[] getFileFromDisk(String fileName) throws IOException {\n        String filePath = this.uploadDir + File.separator + \"uploads\" + File.separator + fileName;\n\n        Path file = Paths.get(filePath);\n", "        if (Files.exists(file)) {\n            return Files.readAllBytes(file);\n        } else {\n            throw new IOException(\"File not found\");\n        }\n    }\n\n    public void deleteFileFromDisk(String fileName) throws IOException {\n        String filePath = this.uploadDir + File.separator + \"uploads\" + File.separator + fileName;\n\n        Path file = Paths.get(filePath);\n", "        if (Files.exists(file)) {\n            Files.delete(file);\n        } else {\n            throw new IOException(\"File not found\");\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/repository/CrudRepository.java", "chunked_list": ["package com.vsantos1.legacy.core.repository;\n\n\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\n\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n\n    T save(T entity);\n\n    T update(T entity);\n\n    T findById(ID id, Class<T> entityClass);\n\n    List<T> saveAll(List<T> entities, Class<T> entityClass);\n\n    List<T> findAll(Class<T> entityClass);\n\n    void delete(ID id, Class<T> entityClass);\n\n    void deleteById(ID id);\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/repository/Repository.java", "chunked_list": ["package com.vsantos1.legacy.core.repository;\n\n\nimport java.util.List;\n\npublic interface Repository<T, ID> {\n\n    T save(T entity);\n\n    T update(T entity);\n\n    T findById(ID id, Class<T> entityClass);\n\n\n    List<T> findAll(Class<T> entityClass);\n\n    void delete(ID id, Class<T> entityClass);\n\n    void deleteById(ID id);\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/dao/GenericDAO.java", "chunked_list": ["package com.vsantos1.legacy.core.dao;\n\n\nimport com.vsantos1.legacy.core.db.DatabaseFactory;\nimport com.vsantos1.legacy.core.db.migrations.ApplicationMigrationRunner;\nimport com.vsantos1.legacy.core.repository.CrudRepository;\nimport org.hibernate.cfg.NotYetImplementedException;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;", "import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport java.lang.reflect.Field;\nimport java.util.List;\n\npublic class GenericDAO<T, ID> implements CrudRepository<T, ID> {\n\n\n    public GenericDAO() {\n    }\n", "    public static EntityManager getEntityManager() {\n        EntityManagerFactory factory = DatabaseFactory.getEntityManagerFactory(null);\n        return factory.createEntityManager();\n    }\n\n    @Override\n    public T save(T entity) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n\n        try {\n            Field id = entity.getClass().getDeclaredField(\"id\");\n            id.setAccessible(true);\n            Object value = id.get(entity);", "        try {\n            Field id = entity.getClass().getDeclaredField(\"id\");\n            id.setAccessible(true);\n            Object value = id.get(entity);\n            if (value == null) {\n                em.persist(entity);\n\n            }else{\n                em.merge(entity);\n\n            }\n\n            em.getTransaction().commit();\n            em.close();\n\n\n            return entity;\n        } catch (IllegalAccessException | NoSuchFieldException e) {\n            throw new RuntimeException(\"Error while inserting data\", e);\n        }\n\n    }\n\n\n    @Override\n    public List<T> saveAll(List<T> entities, Class<T> clazz) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n", "        try {\n            for (T entity : entities) {\n                Field id = clazz.getDeclaredField(\"id\");\n                id.setAccessible(true);\n                Object value = id.get(entity);\n                if (value == null) {\n                    em.persist(entity);\n                    continue;\n                }\n\n                em.merge(entity);\n            }\n            em.getTransaction().commit();\n            em.close();\n\n            return entities;\n        } catch (IllegalAccessException | NoSuchFieldException e) {\n            throw new RuntimeException(\"Error while flushing data\", e);\n        }\n    }\n\n    @Override\n    public List<T> findAll(Class<T> clazz) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n", "        try {\n            List<T> entities = em.createQuery(\"SELECT e FROM \" + clazz.getSimpleName() + \" e\", clazz).getResultList();\n            em.getTransaction().commit();\n            em.close();\n\n\n            return entities;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error retrieving data, cause \", e);\n        }\n    }\n\n\n    @Override", "    public T update(T entity) {\n        throw new NotYetImplementedException(\"Update method not implemented yet\");\n    }\n\n\n    @Override\n    public void deleteById(ID id) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n\n        try {\n            em.remove(id);\n            em.getTransaction().commit();\n            em.close();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error deleting data\", e);\n        }\n    }\n\n    @Override", "        try {\n            em.remove(id);\n            em.getTransaction().commit();\n            em.close();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error deleting data\", e);\n        }\n    }\n\n    @Override\n    public T findById(ID id, Class<T> clazz) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n", "    public T findById(ID id, Class<T> clazz) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n\n        try {\n            T entity = em.find(clazz, id);\n            em.getTransaction().commit();\n            em.close();\n\n            return entity;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error retrieving data, cause \", e);\n        }\n    }\n\n\n    @Override", "    public void delete(ID id, Class<T> clazz) {\n        EntityManager em = getEntityManager();\n        em.getTransaction().begin();\n\n        try {\n            T entity = em.find(clazz, id);\n            em.remove(entity);\n            em.getTransaction().commit();\n            em.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error saving data\", e);\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/encrypt/Encryption.java", "chunked_list": ["package com.vsantos1.legacy.core.encrypt;\n\nimport at.favre.lib.crypto.bcrypt.BCrypt;\n\npublic class Encryption {\n\n    private final int STRENGTH;\n\n    public Encryption(int strength) {\n\n        this.STRENGTH = strength == 0 ? strength : 12;\n    }\n\n\n    public BCrypt.Hasher getEncrypt() {\n        return BCrypt.withDefaults();\n    }\n\n    public BCrypt.Verifyer getVerifyer() {\n        return BCrypt.verifyer();\n    }\n", "    public String generateHash(String hash) {\n\n        return getEncrypt().hashToString(STRENGTH, hash.toCharArray());\n    }\n\n    public boolean compareHash(String hashed, String hash) {\n        return getVerifyer().verify(hashed.toCharArray(), hash).verified;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/encrypt/EncryptionFactory.java", "chunked_list": ["package com.vsantos1.legacy.core.encrypt;\n\n\npublic class EncryptionFactory {\n\n\n    public static Encryption getInstance(int strength) {\n        return new Encryption(strength);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/config/YamlFile.java", "chunked_list": ["package com.vsantos1.legacy.core.config;\n\n\npublic class YamlFile {\n\n    private String url;\n\n    private String host;\n\n    private String port;\n    private String password;\n\n    private String username;\n\n    private String dialect;\n\n    private String ddl;\n\n    private String driverClassName;\n    private boolean showSql;\n\n    private boolean formatSql;\n\n\n    public YamlFile() {\n    }\n    public YamlFile(String url, String host, String port, String password, String username, String dialect, String ddl, String driverClassName, boolean showSql, boolean formatSql) {\n        this.url = url;\n        this.host = host;\n        this.port = port;\n        this.password = password;\n        this.username = username;\n        this.dialect = dialect;\n        this.ddl = ddl;\n        this.driverClassName = driverClassName;\n        this.showSql = showSql;\n        this.formatSql = formatSql;\n    }\n", "    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n", "    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getdialect() {\n        return dialect;\n    }\n", "    public String getdialect() {\n        return dialect;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n", "    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public String getPort() {\n        return port;\n    }\n\n    public void setPort(String port) {\n        this.port = port;\n    }\n", "    public void setPort(String port) {\n        this.port = port;\n    }\n\n    public void setdialect(String dialect) {\n        this.dialect = dialect;\n    }\n\n    public String getDdl() {\n        return ddl;\n    }\n", "    public String getDdl() {\n        return ddl;\n    }\n\n    public void setDdl(String ddl) {\n        this.ddl = ddl;\n    }\n\n    public boolean isShowSql() {\n        return showSql;\n    }\n", "    public boolean isShowSql() {\n        return showSql;\n    }\n\n    public void setShowSql(boolean showSql) {\n        this.showSql = showSql;\n    }\n\n    public boolean isFormatSql() {\n        return formatSql;\n    }\n", "    public boolean isFormatSql() {\n        return formatSql;\n    }\n\n    public String getDialect() {\n        return dialect;\n    }\n\n    public void setDialect(String dialect) {\n        this.dialect = dialect;\n    }\n", "    public void setDialect(String dialect) {\n        this.dialect = dialect;\n    }\n\n    public String getDriverClassName() {\n        return driverClassName;\n    }\n\n    public void setDriverClassName(String driverClassName) {\n        this.driverClassName = driverClassName;\n    }\n", "    public void setDriverClassName(String driverClassName) {\n        this.driverClassName = driverClassName;\n    }\n\n    public void setFormatSql(boolean formatSql) {\n        this.formatSql = formatSql;\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/config/LoadApplicationConfig.java", "chunked_list": ["package com.vsantos1.legacy.core.config;\n\nimport com.vsantos1.legacy.core.db.DatabaseFactory;\nimport org.yaml.snakeyaml.Yaml;\n\nimport java.io.InputStream;\n\npublic class LoadApplicationConfig extends YamlFile {\n\n    private static final Yaml yaml = new Yaml();\n\n    public LoadApplicationConfig(String url, String host, String port, String password, String username, String dialect, String ddl, String driverClassName, boolean showSql, boolean formatSql) {\n        super(url, host, port, password, username, dialect, ddl, driverClassName, showSql, formatSql);\n    }\n", "    public static YamlFile loadYaml() {\n\n\n        InputStream inputStream = DatabaseFactory.class.getClassLoader().getResourceAsStream(\"application.yml\");\n        YamlFile yamlFile = yaml.loadAs(inputStream, YamlFile.class);\n\n        if (yamlFile == null) {\n            throw new RuntimeException(\"Error loading application.yml, please check if the file exists\");\n        }\n\n        String URL = yamlFile.getUrl() == null ? \"\" : yamlFile.getUrl();\n        return new LoadApplicationConfig(URL, yamlFile.getHost(), yamlFile.getPort(),\n                yamlFile.getPassword(), yamlFile.getUsername(), yamlFile.getdialect(),\n                yamlFile.getDdl(), yamlFile.getDriverClassName(), yamlFile.isShowSql(), yamlFile.isFormatSql());\n\n\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/db/DatabaseFactory.java", "chunked_list": ["package com.vsantos1.legacy.core.db;\n\nimport com.vsantos1.legacy.core.config.LoadApplicationConfig;\nimport com.vsantos1.legacy.core.config.YamlFile;\nimport com.vsantos1.legacy.core.db.migrations.ApplicationMigrationRunner;\nimport org.hibernate.cfg.AvailableSettings;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport java.util.HashMap;", "import javax.persistence.Persistence;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DatabaseFactory {\n\n\n    private static final String PERSISTENCE_UNIT_NAME = \"HireMe\";\n\n\n    public DatabaseFactory() {\n        ApplicationMigrationRunner.run();\n    }\n\n", "    public static EntityManagerFactory getEntityManagerFactory(String persistenceUnitName) {\n\n        YamlFile yamlFile = LoadApplicationConfig.loadYaml();\n\n        Map<String, String> properties = new HashMap<>();\n        properties.put(AvailableSettings.DIALECT, yamlFile.getdialect());\n        properties.put(AvailableSettings.HBM2DDL_AUTO, yamlFile.getDdl());\n        properties.put(AvailableSettings.DRIVER, yamlFile.getDriverClassName());\n        properties.put(AvailableSettings.URL, yamlFile.getUrl());\n        properties.put(AvailableSettings.USER, yamlFile.getUsername());\n        properties.put(AvailableSettings.PASS, yamlFile.getPassword());\n        properties.put(AvailableSettings.SHOW_SQL, String.valueOf(yamlFile.isShowSql()));\n        properties.put(AvailableSettings.FORMAT_SQL, String.valueOf(yamlFile.isFormatSql()));\n        properties.put(AvailableSettings.POOL_SIZE, String.valueOf(10));\n\n        String persistenceUnit = persistenceUnitName == null ? PERSISTENCE_UNIT_NAME : persistenceUnitName;\n        return Persistence.createEntityManagerFactory(persistenceUnit, properties);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/db/migrations/ApplicationMigrationRunner.java", "chunked_list": ["package com.vsantos1.legacy.core.db.migrations;\n\nimport com.vsantos1.legacy.core.db.DatabaseFactory;\n\nimport javax.persistence.EntityManagerFactory;\n\npublic class ApplicationMigrationRunner {\n\n    private static final EntityManagerFactory FACTORY = DatabaseFactory.getEntityManagerFactory(null);\n\n    public static void run() {", "    public static void run() {\n        if (FACTORY == null) {\n           throw new RuntimeException(\"Error creating EntityManagerFactory\");\n        }\n\n        FACTORY.createEntityManager().getTransaction().begin();\n        FACTORY.createEntityManager().getTransaction().commit();\n        FACTORY.createEntityManager().close();\n        FACTORY.close();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/parser/Json.java", "chunked_list": ["package com.vsantos1.legacy.core.parser;\n\nimport com.google.gson.Gson;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class Json {\n\n    private static final Gson GSON = new Gson();\n    private static final StringBuilder BUILDER = new StringBuilder();\n\n    public Json() {\n    }\n\n    public static <T> T parseToObject(BufferedReader reader, Class<T> target) throws IOException {\n\n        String line;\n", "        for (line = reader.readLine(); line != null; line = reader.readLine()) {\n            BUILDER.append(line);\n        }\n\n        String json = BUILDER.toString();\n        return GSON.fromJson(json, target);\n    }\n\n\n\n    public static String parseToJson(Object object) {\n        return GSON.toJson(object);\n    }\n}\n", "    public static String parseToJson(Object object) {\n        return GSON.toJson(object);\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/response/ResponseEntity.java", "chunked_list": ["package com.vsantos1.legacy.core.response;\n\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport com.vsantos1.legacy.core.parser.Json;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n\npublic class ResponseEntity<T> {\n    private final HttpStatus status;\n    private static final String CHARSET_ENCODING = \"UTF-8\";\n    private final T body;\n\n    protected Json json;\n\n    ResponseEntity(HttpStatus status, T body) {\n        this.status = status;\n        this.body = body;\n    }\n", "public class ResponseEntity<T> {\n    private final HttpStatus status;\n    private static final String CHARSET_ENCODING = \"UTF-8\";\n    private final T body;\n\n    protected Json json;\n\n    ResponseEntity(HttpStatus status, T body) {\n        this.status = status;\n        this.body = body;\n    }\n", "    public void build(HttpServletResponse response) {\n        try {\n            this.execute(response);\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    protected void execute(HttpServletResponse response) throws IOException {\n        response.setStatus(this.status.getValue());\n        response.setCharacterEncoding(CHARSET_ENCODING);\n\n", "        if (this.status == HttpStatus.NO_CONTENT || this.body == null) {\n            return;\n        }\n\n        if (this.body instanceof byte[]) {\n            response.getOutputStream().write((byte[]) this.body);\n            response.getOutputStream().close();\n            return;\n        }\n\n        response.getWriter().write(Json.parseToJson(this.body));\n        response.getWriter().close();\n    }\n\n}"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/response/Error.java", "chunked_list": ["package com.vsantos1.legacy.core.response;\n\nimport com.vsantos1.legacy.core.enums.HttpStatus;\n\nimport java.util.Date;\n\npublic class Error {\n\n\n    private String message;\n\n    private int status;\n\n    private String path;\n\n    private Date timestamp;\n\n    public Error(String message, int status, String path, Date timestamp) {\n        this.message = message;\n        this.status = status;\n        this.path = path;\n        this.timestamp = timestamp;\n    }\n", "    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n", "    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public void setTimestamp(Date timestamp) {\n        this.timestamp = timestamp;\n    }\n", "    public void setTimestamp(Date timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public String getPath() {\n        return path;\n    }\n", "    public String getPath() {\n        return path;\n    }\n\n    public Date getTimestamp() {\n        return timestamp;\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/response/Response.java", "chunked_list": ["package com.vsantos1.legacy.core.response;\n\nimport com.vsantos1.legacy.core.enums.HttpStatus;\n\n\npublic class Response<T> {\n    private final HttpStatus status;\n    private final T body;\n\n    Response(HttpStatus status, T body) {\n        this.status = status;\n        this.body = body;\n    }\n\n    public static <T> StatusBuilder<T> status(HttpStatus status) {\n        return new StatusBuilder<>(status);\n    }\n", "    public int getStatus() {\n        return status.getValue();\n    }\n\n    public T getBody() {\n        return body;\n    }\n\n\n}"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/response/StatusBuilder.java", "chunked_list": ["package com.vsantos1.legacy.core.response;\n\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport jakarta.servlet.http.HttpServletResponse;\n\npublic class StatusBuilder<T> {\n    private final HttpStatus status;\n\n    StatusBuilder(HttpStatus status) {\n        this.status = status;\n    }\n\n    public ResponseEntity<T> body(T body) {\n\n        return new ResponseEntity<>(status, body);\n    }\n", "    public void build(HttpServletResponse response) {\n        new ResponseEntity<>(status, response).build(response);\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/enums/ContentType.java", "chunked_list": ["package com.vsantos1.legacy.core.enums;\n\npublic enum ContentType {\n    APPLICATION_JSON(\"application/json\"),\n    APPLICATION_XML(\"application/xml\"),\n    APPLICATION_PDF(\"application/pdf\"),\n    APPLICATION_OCTET_STREAM(\"application/octet-stream\"),\n    APPLICATION_FORM_URLENCODED(\"application/x-www-form-urlencoded\"),\n    APPLICATION_XHTML_XML(\"application/xhtml+xml\"),\n    APPLICATION_ATOM_XML(\"application/atom+xml\"),\n    APPLICATION_RSS_XML(\"application/rss+xml\"),\n    APPLICATION_SOAP_XML(\"application/soap+xml\"),\n    APPLICATION_ZIP(\"application/zip\"),\n    APPLICATION_GZIP(\"application/gzip\"),\n    APPLICATION_TAR(\"application/tar\"),\n    APPLICATION_FONT_WOFF(\"application/font-woff\"),\n    APPLICATION_FONT_WOFF2(\"application/font-woff2\"),\n    APPLICATION_FONT_SFNT(\"application/font-sfnt\"),\n    APPLICATION_SQL(\"application/sql\"),\n    APPLICATION_LD_JSON(\"application/ld+json\"),\n    IMAGE_JPEG(\"image/jpeg\"),\n    IMAGE_PNG(\"image/png\"),\n    IMAGE_GIF(\"image/gif\"),\n    IMAGE_SVG_XML(\"image/svg+xml\"),\n    MULTIPART_FORM_DATA(\"multipart/form-data\"),\n    TEXT_HTML(\"text/html\"),\n    TEXT_PLAIN(\"text/plain\"),\n    TEXT_XML(\"text/xml\"),\n    TEXT_CSS(\"text/css\"),\n    AUDIO_MPEG(\"audio/mpeg\"),\n    AUDIO_MP4(\"audio/mp4\"),\n    AUDIO_OGG(\"audio/ogg\"),\n    AUDIO_WAV(\"audio/wav\"),\n    VIDEO_MP4(\"video/mp4\"),\n    VIDEO_MPEG(\"video/mpeg\"),\n    VIDEO_OGG(\"video/ogg\"),\n    VIDEO_QUICKTIME(\"video/quicktime\"),\n    VIDEO_WEBM(\"video/webm\");\n\n    private final String value;\n\n    ContentType(String value) {\n        this.value = value;\n    }\n", "    public String getValue() {\n        return value;\n    }\n}"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/enums/HttpStatus.java", "chunked_list": ["package com.vsantos1.legacy.core.enums;\n\npublic enum HttpStatus {\n\n    CONTINUE(100),\n    SWITCHING_PROTOCOLS(101),\n    PROCESSING(102),\n    EARLY_HINTS(103),\n    OK(200),\n    CREATED(201),\n    ACCEPTED(202),\n    NON_AUTHORITATIVE_INFORMATION(203),\n    NO_CONTENT(204),\n    RESET_CONTENT(205),\n    PARTIAL_CONTENT(206),\n    MULTI_STATUS(207),\n    ALREADY_REPORTED(208),\n    IM_USED(226),\n\n    MULTIPLE_CHOICES(300),\n    MOVED_PERMANENTLY(301),\n    FOUND(302),\n    SEE_OTHER(303),\n    NOT_MODIFIED(304),\n    USE_PROXY(305),\n    SWITCH_PROXY(306),\n    TEMPORARY_REDIRECT(307),\n    PERMANENT_REDIRECT(308),\n\n    BAD_REQUEST(400),\n    UNAUTHORIZED(401),\n    PAYMENT_REQUIRED(402),\n    FORBIDDEN(403),\n    NOT_FOUND(404),\n    METHOD_NOT_ALLOWED(405),\n    NOT_ACCEPTABLE(406),\n    PROXY_AUTHENTICATION_REQUIRED(407),\n    REQUEST_TIMEOUT(408),\n    CONFLICT(409),\n    GONE(410),\n    LENGTH_REQUIRED(411),\n    PRECONDITION_FAILED(412),\n    PAYLOAD_TOO_LARGE(413),\n    URI_TOO_LONG(414),\n    UNSUPPORTED_MEDIA_TYPE(415),\n    RANGE_NOT_SATISFIABLE(416),\n    EXPECTATION_FAILED(417),\n    IM_A_TEAPOT(418),\n    MISDIRECTED_REQUEST(421),\n    UNPROCESSABLE_ENTITY(422),\n    LOCKED(423),\n    FAILED_DEPENDENCY(424),\n    TOO_EARLY(425),\n    UPGRADE_REQUIRED(426),\n    PRECONDITION_REQUIRED(428),\n    TOO_MANY_REQUESTS(429),\n    REQUEST_HEADER_FIELDS_TOO_LARGE(431),\n    UNAVAILABLE_FOR_LEGAL_REASONS(451),\n    INTERNAL_SERVER_ERROR(500),\n    NOT_IMPLEMENTED(501),\n    BAD_GATEWAY(502),\n    SERVICE_UNAVAILABLE(503),\n    GATEWAY_TIMEOUT(504),\n    HTTP_VERSION_NOT_SUPPORTED(505),\n    VARIANT_ALSO_NEGOTIATES(506),\n    INSUFFICIENT_STORAGE(507),\n    LOOP_DETECTED(508),\n    NOT_EXTENDED(510),\n    NETWORK_AUTHENTICATION_REQUIRED(511);\n\n    private final int value;\n\n    HttpStatus(int value) {\n        this.value = value;\n    }\n", "    public int getValue() {\n        return value;\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/enums/DDL.java", "chunked_list": ["package com.vsantos1.legacy.core.enums;\n\npublic enum DDL {\n\n        CREATE(\"create\"),\n        CREATE_DROP(\"create-drop\"),\n        UPDATE(\"update\"),\n        VALIDATE(\"validate\");\n\n        private String ddl;\n\n        DDL(String ddl) {\n            this.ddl = ddl;\n        }\n", "        public String getDdl() {\n            return ddl;\n        }\n\n        public void setDdl(String ddl) {\n            this.ddl = ddl;\n        }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/enums/HttpMethod.java", "chunked_list": ["package com.vsantos1.legacy.core.enums;\n\npublic enum HttpMethod {\n    GET(\"get\"),\n    POST(\"post\"),\n    PUT(\"put\"),\n    DELETE(\"delete\");\n\n    private String method;\n\n    HttpMethod(String method) {\n        this.method = method;\n    }\n", "    public String getMethod() {\n        return method;\n    }\n\n    public void setMethod(String method) {\n        this.method = method;\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/router/Controller.java", "chunked_list": ["package com.vsantos1.legacy.core.router;\n\n\nimport com.vsantos1.legacy.core.annotations.RequestMapping;\nimport com.vsantos1.legacy.core.enums.ContentType;\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport com.vsantos1.legacy.core.response.Error;\nimport com.vsantos1.legacy.core.response.Response;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;", "import jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Date;\nimport java.util.HashMap;", "import java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Controller extends HttpServlet {\n\n    private Map<String, Method> handlerMethods;\n\n\n    @Override\n    public void init() throws ServletException {\n        super.init();\n        handlerMethods = new HashMap<>();\n\n        Method[] methods = this.getClass().getDeclaredMethods();", "    public void init() throws ServletException {\n        super.init();\n        handlerMethods = new HashMap<>();\n\n        Method[] methods = this.getClass().getDeclaredMethods();\n        for (Method method : methods) {\n            if (method.isAnnotationPresent(RequestMapping.class)) {\n                RequestMapping mapping = method.getAnnotation(RequestMapping.class);\n                String path = mapping.value();\n                handlerMethods.put(path, method);\n            }\n\n        }\n    }\n\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) {\n        String path = request.getPathInfo();\n        String method = request.getMethod();\n\n        Method handlerMethod = handlerMethods.get(path);", "        if (handlerMethod != null) {\n            RequestMapping mapping = handlerMethod.getAnnotation(RequestMapping.class);\n            if (mapping.method().name().equalsIgnoreCase(method)) {\n                try {\n                    handleRequest(handlerMethod, request, response, mapping.contentType());\n\n                } catch (IllegalAccessException | InvocationTargetException e) {\n\n                    this.ErrorBuilder(request, response, \"Internal Server Error\", HttpStatus.INTERNAL_SERVER_ERROR);\n                }\n                return;\n            }\n        }\n\n        this.ErrorBuilder(request, response, \"Not found\", HttpStatus.NOT_FOUND);\n    }\n\n    private void handleRequest(Method handlerMethod, HttpServletRequest request, HttpServletResponse response, ContentType contentType)\n            throws IllegalAccessException, InvocationTargetException {\n        response.setContentType(ContentType.TEXT_PLAIN.getValue());\n\n        Class<?>[] parameterTypes = handlerMethod.getParameterTypes();\n        Object[] args = new Object[parameterTypes.length];", "        for (int i = 0; i < parameterTypes.length; i++) {\n            if (parameterTypes[i].equals(HttpServletRequest.class)) {\n                args[i] = request;\n            }\n            if (parameterTypes[i].equals(HttpServletResponse.class)) {\n                args[i] = response;\n            }\n\n        }\n\n        handlerMethod.invoke(this, args);\n    }\n\n    private void ErrorBuilder(HttpServletRequest request, HttpServletResponse response, String message, HttpStatus status) {\n        Response.status(status).body(new Error(message, status.getValue(), request.getRequestURI(), new Date())).build(response);\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/core/mapper/Mapper.java", "chunked_list": ["package com.vsantos1.legacy.core.mapper;\n\nimport org.modelmapper.ModelMapper;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Mapper {\n\n    private static final ModelMapper mapper = new ModelMapper();\n", "    public ModelMapper modelMapper(boolean skillNullCheck, boolean ignoreAmbiguity) {\n        mapper.getConfiguration().setSkipNullEnabled(skillNullCheck);\n        mapper.getConfiguration().setAmbiguityIgnored(ignoreAmbiguity);\n        return mapper;\n    }\n\n    public static <Origin, Destination> Destination parseObject(Origin origin, Class<Destination> destinationClass) {\n        return mapper.map(origin, destinationClass);\n    }\n\n\n    public static <Origin, Destination> List<Destination> parseListObjects(List<Origin> origin, Class<Destination> destinationClass) {\n        List<Destination> destination = new ArrayList<>();\n", "        for (Origin o : origin) {\n            mapper.map(o, destination);\n        }\n        return destination;\n    }\n\n    public static <Origin, Destination> void copyProperties(Origin origin, Destination destination) {\n        mapper.map(origin, destination);\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/web/servlets/FilesServlet.java", "chunked_list": ["package com.vsantos1.legacy.web.servlets;\n\nimport com.vsantos1.legacy.core.enums.ContentType;\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport com.vsantos1.legacy.core.response.Response;\nimport com.vsantos1.legacy.core.upload.FileUpload;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.annotation.WebServlet;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;", "import jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n\n@WebServlet(name = \"files\", urlPatterns = \"/files\")\npublic class FilesServlet extends HttpServlet {\n\n    private final FileUpload file;\n\n    public FilesServlet() {\n        this.file = new FileUpload();\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n        String fileName = req.getParameter(\"name\");\n\n        Response.status(HttpStatus.OK).body(file.getFileFromDisk(fileName)).build(resp, ContentType.IMAGE_JPEG);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doPost(req, resp);\n    }\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/web/servlets/Test.java", "chunked_list": ["package com.vsantos1.legacy.web.servlets;\n\nimport com.vsantos1.legacy.core.annotations.PathVariable;\nimport com.vsantos1.legacy.core.annotations.RequestMapping;\nimport com.vsantos1.legacy.core.enums.ContentType;\nimport com.vsantos1.legacy.core.enums.HttpMethod;\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport com.vsantos1.legacy.core.response.Response;\nimport com.vsantos1.legacy.core.router.Controller;\nimport com.vsantos1.legacy.web.models.Category;", "import com.vsantos1.legacy.core.router.Controller;\nimport com.vsantos1.legacy.web.models.Category;\nimport jakarta.servlet.annotation.WebServlet;\nimport jakarta.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/api/*\")\npublic class Test extends Controller {\n\n    @RequestMapping(value = \"/test\", method = HttpMethod.GET, contentType = ContentType.APPLICATION_JSON)\n    public void getExample(HttpServletResponse response) {\n        Response.status(HttpStatus.OK).body(new Category(2L, \"name\", \"description\")).build(response);\n\n    }\n\n    @RequestMapping(value = \"/test/{id}\", method = HttpMethod.GET, contentType = ContentType.APPLICATION_JSON)", "    public void getExample(HttpServletResponse response) {\n        Response.status(HttpStatus.OK).body(new Category(2L, \"name\", \"description\")).build(response);\n\n    }\n\n    @RequestMapping(value = \"/test/{id}\", method = HttpMethod.GET, contentType = ContentType.APPLICATION_JSON)\n    public void getByIdExample(@PathVariable(\"id\") Long id, HttpServletResponse response) {\n        Response.status(HttpStatus.OK).body(new Category(2L, \"name\", \"description\")).build(response);\n\n    }\n\n    @RequestMapping(value = \"/test/create\", method = HttpMethod.POST, contentType = ContentType.APPLICATION_JSON)", "    public void putExample(HttpServletResponse response) {\n\n        Response.status(HttpStatus.CREATED).body(new Category(2L, \"name\", \"description\")).build(response);\n    }\n\n    @RequestMapping(value = \"/test/edit/{id}\", method = HttpMethod.PUT, contentType = ContentType.APPLICATION_JSON)\n    public void postExample(@PathVariable(\"id\") Long id, HttpServletResponse response) {\n\n        Response.status(HttpStatus.OK).body(new Category(2L, \"name\", \"description\")).build(response);\n\n    }\n\n    @RequestMapping(value = \"/test/delete/{id}\", method = HttpMethod.DELETE)", "    public void deleteExample(@PathVariable(\"id\") Long id, HttpServletResponse response) {\n\n        Response.status(HttpStatus.NO_CONTENT).build(response);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/vsantos1/legacy/web/servlets/HomeServlet.java", "chunked_list": ["package com.vsantos1.legacy.web.servlets;\n\nimport com.vsantos1.legacy.core.dao.GenericDAO;\nimport com.vsantos1.legacy.core.encrypt.Encryption;\nimport com.vsantos1.legacy.core.encrypt.EncryptionFactory;\nimport com.vsantos1.legacy.core.enums.ContentType;\nimport com.vsantos1.legacy.core.enums.HttpStatus;\nimport com.vsantos1.legacy.core.response.Response;\nimport com.vsantos1.legacy.web.models.Category;\nimport jakarta.servlet.annotation.WebServlet;", "import com.vsantos1.legacy.web.models.Category;\nimport jakarta.servlet.annotation.WebServlet;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\n@WebServlet(name = \"home\", urlPatterns = \"/home\")\npublic class HomeServlet extends HttpServlet {\n\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\n\n        GenericDAO<Category, Long> genericDAO = new GenericDAO<>();\n\n        List<Category> categories = new ArrayList<>();\n\n        categories.add(new Category(null, \"A\", \"B\"));\n        categories.add(new Category(null, \"A\", \"B\"));\n        categories.add(new Category(13L, \"Lanche da galeras\", \"dsdas\"));\n        categories.add(new Category(19L, \"Adsadsa\", \"Bdsads\"));\n        categories.add(new Category(null, \"A\", \"B\"));\n        categories.add(new Category(null, \"A\", \"B\"));\n        genericDAO.saveAll(categories, Category.class);\n\n        Response.status(HttpStatus.OK).body(categories).build(response, ContentType.APPLICATION_JSON);\n\n    }\n\n", "    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\n        String name = request.getParameter(\"name\");\n        String description = request.getParameter(\"description\");\n\n\n        Encryption hash = EncryptionFactory.getInstance(15);\n        String hashed = hash.generateHash(name);\n        GenericDAO<Category, Long> genericDAO = new GenericDAO<>();\n\n        Category category = genericDAO.save(new Category(null, hashed, description));\n\n        Response.status(HttpStatus.OK).body(category).build(response, ContentType.APPLICATION_JSON);\n    }\n\n\n}"]}
{"filename": "src/main/java/com/vsantos1/legacy/web/models/Category.java", "chunked_list": ["package com.vsantos1.legacy.web.models;\n\nimport javax.persistence.*;\nimport java.io.Serial;\nimport java.io.Serializable;\n\n@Entity\n@Table(name = \"tb_categories\")\npublic class Category implements Serializable {\n\n\n\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String name;\n\n    private String description;\n\n\n    public Category() {\n    }\n\n    public Category(Long id, String name, String description) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n    }\n", "public class Category implements Serializable {\n\n\n\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String name;\n\n    private String description;\n\n\n    public Category() {\n    }\n\n    public Category(Long id, String name, String description) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n    }\n", "    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n", "    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public String toString() {\n        return \"Category{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", description='\" + description + '\\'' +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"Category{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", description='\" + description + '\\'' +\n                '}';\n    }\n}\n"]}
