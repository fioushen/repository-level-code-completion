{"filename": "Forge/src/main/java/me/khajiitos/servercountryflags/forge/ServerCountryFlagsForge.java", "chunked_list": ["package me.khajiitos.servercountryflags.forge;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport me.khajiitos.servercountryflags.common.config.ClothConfigCheck;\nimport me.khajiitos.servercountryflags.common.config.ClothConfigScreenMaker;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.client.ConfigScreenHandler;\nimport net.minecraftforge.fml.DistExecutor;\nimport net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;", "import net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;\n\n@Mod(ServerCountryFlags.MOD_ID)\npublic class ServerCountryFlagsForge {\n\n    public ServerCountryFlagsForge() {\n        DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> ServerCountryFlags::init);\n\n        if (ClothConfigCheck.isInstalled()) {\n            ModLoadingContext.get().registerExtensionPoint(ConfigScreenHandler.ConfigScreenFactory.class, () -> new ConfigScreenHandler.ConfigScreenFactory(ClothConfigScreenMaker::create));\n        }\n    }\n}", "        if (ClothConfigCheck.isInstalled()) {\n            ModLoadingContext.get().registerExtensionPoint(ConfigScreenHandler.ConfigScreenFactory.class, () -> new ConfigScreenHandler.ConfigScreenFactory(ClothConfigScreenMaker::create));\n        }\n    }\n}"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/APITimeoutManager.java", "chunked_list": ["package me.khajiitos.servercountryflags.common;\n\npublic class APITimeoutManager {\n    private static int requestsLeft = 45;\n    private static long cooldownReset = -1;\n    private static int requestsSent = 0;\n\n    public static boolean isOnCooldown() {\n        return requestsLeft <= 0 && System.currentTimeMillis() < cooldownReset;\n    }\n", "    public static int getRequestsSent() {\n        return requestsSent;\n    }\n\n    public static void incrementRequestsSent() {\n        requestsSent++;\n    }\n\n    public static void decrementRequestsSent() {\n        requestsSent--;\n    }\n", "    public static void decrementRequestsSent() {\n        requestsSent--;\n    }\n\n    public static void setRequestsLeft(int apiRequestsLeft) {\n        requestsLeft = apiRequestsLeft;\n    }\n\n    public static void setSecondsLeftUntilReset(int apiSecondsLeft) {\n        cooldownReset = System.currentTimeMillis() + apiSecondsLeft * 1000L;\n    }\n}", "    public static void setSecondsLeftUntilReset(int apiSecondsLeft) {\n        cooldownReset = System.currentTimeMillis() + apiSecondsLeft * 1000L;\n    }\n}"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/ServerCountryFlags.java", "chunked_list": ["package me.khajiitos.servercountryflags.common;\n\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport com.mojang.blaze3d.platform.NativeImage;\nimport me.khajiitos.servercountryflags.common.config.Config;\nimport me.khajiitos.servercountryflags.common.util.APIResponse;\nimport me.khajiitos.servercountryflags.common.util.LocationInfo;\nimport me.khajiitos.servercountryflags.common.util.NetworkChangeDetector;", "import me.khajiitos.servercountryflags.common.util.LocationInfo;\nimport me.khajiitos.servercountryflags.common.util.NetworkChangeDetector;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.multiplayer.ServerList;\nimport net.minecraft.client.multiplayer.resolver.ResolvedServerAddress;\nimport net.minecraft.client.multiplayer.resolver.ServerAddress;\nimport net.minecraft.client.multiplayer.resolver.ServerAddressResolver;\nimport net.minecraft.client.multiplayer.resolver.ServerRedirectHandler;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.server.packs.resources.Resource;", "import net.minecraft.resources.ResourceLocation;\nimport net.minecraft.server.packs.resources.Resource;\nimport net.minecraft.server.packs.resources.ResourceManager;\nimport org.jetbrains.annotations.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;", "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;", "import java.util.Optional;\nimport java.util.concurrent.CompletableFuture;\n\npublic class ServerCountryFlags {\n\tpublic static final String MOD_ID = \"servercountryflags\";\n\tpublic static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);\n\tpublic static final String API_NAME = \"http://ip-api.com/json/\";\n\tpublic static final int API_FIELDS = 541395;\n\tpublic static String apiLanguage = null;\n\tpublic static ServerList serverList; // Servers from the server list\n", "\tpublic static String apiLanguage = null;\n\tpublic static ServerList serverList; // Servers from the server list\n\n\tpublic static HashMap<String, APIResponse> servers = new HashMap<>(); // Servers' flags\n\tpublic static HashMap<String, Float> flagAspectRatios = new HashMap<>();\n\tpublic static boolean flagAspectRatiosLoaded = false;\n\tpublic static ServerRedirectHandler redirectResolver = ServerRedirectHandler.createDnsSrvRedirectHandler();\n\n\tpublic static LocationInfo localLocation = null;\n\n\tstatic <T>\n\tT last(T[] arr) {\n\t\treturn arr[arr.length - 1];\n\t}\n", "\tpublic static LocationInfo localLocation = null;\n\n\tstatic <T>\n\tT last(T[] arr) {\n\t\treturn arr[arr.length - 1];\n\t}\n\n\tpublic static void init() {\n\t\tConfig.init();\n\t\tNetworkChangeDetector.check();\n\t\tMinecraft.getInstance().execute(() -> {\n\t\t\tResourceManager resourceManager =  Minecraft.getInstance().getResourceManager();\n\t\t\tMap<ResourceLocation, Resource> resourceLocations = resourceManager.listResources(\"textures/flags\", path -> true);\n\n\t\t\tThread flagThread = new Thread(() -> {", "\t\t\t\tfor (Map.Entry<ResourceLocation, Resource> entry : resourceLocations.entrySet()) {\n\t\t\t\t\tif (!entry.getKey().getNamespace().equals(MOD_ID)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (entry.getValue() == null) {\n\t\t\t\t\t\t\tServerCountryFlags.LOGGER.error(\"Failed to load resource \" + entry.getKey().getPath());\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry (InputStream inputStream = entry.getValue().open()) {\n\t\t\t\t\t\t\tNativeImage image = NativeImage.read(inputStream);\n\t\t\t\t\t\t\tString code = last(entry.getKey().getPath().split(\"/\"));\n\t\t\t\t\t\t\tcode = code.substring(0, code.length() - 4);\n\t\t\t\t\t\t\tflagAspectRatios.put(code, (float)image.getWidth() / (float)image.getHeight());\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tLOGGER.error(e.getMessage());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tflagAspectRatiosLoaded = true;\n\t\t\t});\n\t\t\tflagThread.setName(\"Flag load thread\");\n\t\t\tflagThread.start();\n\t\t});\n\n\t\tupdateLocalLocationInfo();\n\t}\n", "\tpublic static void updateAPILanguage(String language) {\n\t\tfinal String oldApiLanguage = apiLanguage;\n\n\t\tif (Config.cfg.forceEnglish) {\n\t\t\tapiLanguage = null;\n\t\t} else if (language != null) {\n\t\t\tif (language.startsWith(\"en\")) apiLanguage = null;\n\t\t\telse if (language.startsWith(\"de\")) apiLanguage = \"de\";\n\t\t\telse if (language.startsWith(\"es\")) apiLanguage = \"es\";\n\t\t\telse if (language.startsWith(\"pt\")) apiLanguage = \"pt-BR\";\n\t\t\telse if (language.startsWith(\"fr\")) apiLanguage = \"fr\";", "\t\t\telse if (language.startsWith(\"es\")) apiLanguage = \"es\";\n\t\t\telse if (language.startsWith(\"pt\")) apiLanguage = \"pt-BR\";\n\t\t\telse if (language.startsWith(\"fr\")) apiLanguage = \"fr\";\n\t\t\telse if (language.startsWith(\"ja\")) apiLanguage = \"ja\";\n\t\t\telse if (language.startsWith(\"zn\")) apiLanguage = \"zn-CN\";\n\t\t\telse if (language.startsWith(\"ru\")) apiLanguage = \"ru\";\n\t\t\telse apiLanguage = null;\n\t\t}\n\n\t\tif (!Objects.equals(apiLanguage, oldApiLanguage)) {\n\t\t\tservers.clear();\n\t\t}\n\t}\n\n\tpublic static @NotNull APIResponse getAPIResponse(String ip) {\n\t\t// If the IP is empty, the API will give us our location\n", "\t\tif (!Objects.equals(apiLanguage, oldApiLanguage)) {\n\t\t\tservers.clear();\n\t\t}\n\t}\n\n\tpublic static @NotNull APIResponse getAPIResponse(String ip) {\n\t\t// If the IP is empty, the API will give us our location\n\n\t\tif (APITimeoutManager.isOnCooldown()) {\n\t\t\treturn new APIResponse(APIResponse.Status.COOLDOWN, null);\n\t\t}\n\n\t\tString apiUrlStr = API_NAME + ip + \"?fields=\" + API_FIELDS;", "\t\tif (APITimeoutManager.isOnCooldown()) {\n\t\t\treturn new APIResponse(APIResponse.Status.COOLDOWN, null);\n\t\t}\n\n\t\tString apiUrlStr = API_NAME + ip + \"?fields=\" + API_FIELDS;\n\t\tif (apiLanguage != null) {\n\t\t\tapiUrlStr += \"&lang=\" + apiLanguage;\n\t\t}\n\t\ttry {\n\t\t\tAPITimeoutManager.incrementRequestsSent();\n\t\t\tURL apiUrl = new URL(apiUrlStr);\n\t\t\tURLConnection con = apiUrl.openConnection();\n\t\t\tcon.setConnectTimeout(3000);\n\n\t\t\tint requestsLeft = con.getHeaderFieldInt(\"X-Rl\", -1);\n\t\t\tint secondsLeft = con.getHeaderFieldInt(\"X-Ttl\", -1);\n\n\t\t\tAPITimeoutManager.decrementRequestsSent();\n", "\t\ttry {\n\t\t\tAPITimeoutManager.incrementRequestsSent();\n\t\t\tURL apiUrl = new URL(apiUrlStr);\n\t\t\tURLConnection con = apiUrl.openConnection();\n\t\t\tcon.setConnectTimeout(3000);\n\n\t\t\tint requestsLeft = con.getHeaderFieldInt(\"X-Rl\", -1);\n\t\t\tint secondsLeft = con.getHeaderFieldInt(\"X-Ttl\", -1);\n\n\t\t\tAPITimeoutManager.decrementRequestsSent();\n", "\t\t\tif (requestsLeft != -1 && secondsLeft != -1) {\n\t\t\t\tAPITimeoutManager.setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());\n\t\t\t\tAPITimeoutManager.setSecondsLeftUntilReset(secondsLeft);\n\t\t\t}\n\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8));\n\t\t\tJsonElement jsonElement = JsonParser.parseReader(reader);\n\n\t\t\tif (jsonElement == null) {\n\t\t\t\tServerCountryFlags.LOGGER.error(\"Received something that's not JSON\");\n\t\t\t\treturn new APIResponse(APIResponse.Status.UNKNOWN, null);\n\t\t\t}\n", "\t\t\tif (jsonElement == null) {\n\t\t\t\tServerCountryFlags.LOGGER.error(\"Received something that's not JSON\");\n\t\t\t\treturn new APIResponse(APIResponse.Status.UNKNOWN, null);\n\t\t\t}\n\n\t\t\tif (jsonElement.isJsonObject()) {\n\t\t\t\treturn new APIResponse(APIResponse.Status.SUCCESS, new LocationInfo((JsonObject) jsonElement));\n\t\t\t} else {\n\t\t\t\tServerCountryFlags.LOGGER.error(\"Received JSON element, but it's not an object: \" + jsonElement);\n\t\t\t\treturn new APIResponse(APIResponse.Status.UNKNOWN, null);\n\t\t\t}\n\t\t} catch (MalformedURLException e) {\n\t\t\tServerCountryFlags.LOGGER.error(\"Malformed API Url: \" + apiUrlStr);\n\t\t} catch (UnknownHostException e) {\n\t\t\tServerCountryFlags.LOGGER.error(\"Unknown host - no internet?\");\n\t\t} catch (IOException e) {\n\t\t\tServerCountryFlags.LOGGER.error(e.getMessage());\n\t\t}\n\t\tAPITimeoutManager.decrementRequestsSent();\n\t\treturn new APIResponse(APIResponse.Status.UNKNOWN, null);\n\t}\n", "\tpublic static boolean isIpLocal(InetAddress address) {\n\t\treturn address.isLoopbackAddress() || address.isLinkLocalAddress() || address.isSiteLocalAddress();\n\t}\n\n\tpublic static void updateServerLocationInfo(String serverAddress) {\n\t\tCompletableFuture.runAsync(() -> {\n\t\t\tServerAddress address = ServerAddress.parseString(serverAddress);\n\t\t\tif (Config.cfg.resolveRedirects) {\n\t\t\t\tOptional<ServerAddress> redirect = redirectResolver.lookupRedirect(address);\n\n\t\t\t\tif (redirect.isPresent()) {\n\t\t\t\t\taddress = redirect.get();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tOptional<ResolvedServerAddress> resolvedAddress = ServerAddressResolver.SYSTEM.resolve(address);", "\t\t\t\tif (redirect.isPresent()) {\n\t\t\t\t\taddress = redirect.get();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tOptional<ResolvedServerAddress> resolvedAddress = ServerAddressResolver.SYSTEM.resolve(address);\n\t\t\tif (resolvedAddress.isPresent()) {\n\t\t\t\tInetSocketAddress socketAddress = resolvedAddress.get().asInetSocketAddress();\n\t\t\t\tString stringHostAddress = isIpLocal(socketAddress.getAddress()) ? \"\" : socketAddress.getAddress().getHostAddress();\n\n\t\t\t\tAPIResponse response = getAPIResponse(stringHostAddress);\n\t\t\t\tAPIResponse oldResponse = servers.get(serverAddress);", "\t\t\t\tif (oldResponse == null || (oldResponse.unknown() || !response.unknown()) || (oldResponse.cooldown() && response.locationInfo() != null)) {\n\t\t\t\t\tservers.putIfAbsent(serverAddress, response);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static void updateLocalLocationInfo() {\n\t\tCompletableFuture.runAsync(() -> {\n\t\t\tAPIResponse response = getAPIResponse(\"\");\n\t\t\tif (response.locationInfo() != null) {\n\t\t\t\tlocalLocation = response.locationInfo();\n", "\t\t\tif (response.locationInfo() != null) {\n\t\t\t\tlocalLocation = response.locationInfo();\n\n\t\t\t\tfor (APIResponse serverResponse : servers.values()) {\n\t\t\t\t\tif (!serverResponse.cooldown()) {\n\t\t\t\t\t\tserverResponse.locationInfo().updateDistanceFromLocal();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/config/Config.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.config;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;\nimport net.minecraft.client.resources.language.LanguageManager;\n\nimport java.io.*;\nimport java.lang.reflect.Field;", "import java.io.*;\nimport java.lang.reflect.Field;\nimport java.nio.file.*;\nimport java.util.Arrays;\nimport java.util.Optional;\nimport java.util.Properties;\n\npublic class Config {\n    public static class Values {\n        @ConfigEntry(name = \"Flag border\", description = \"Displays a border around flags\", configCategory = \"Border\")\n        public boolean flagBorder = true;\n\n        @ConfigEntry(name = \"Border color R\", description = \"Red channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))", "    public static class Values {\n        @ConfigEntry(name = \"Flag border\", description = \"Displays a border around flags\", configCategory = \"Border\")\n        public boolean flagBorder = true;\n\n        @ConfigEntry(name = \"Border color R\", description = \"Red channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))\n        public int borderR = 65;\n\n        @ConfigEntry(name = \"Border color G\", description = \"Green channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))\n        public int borderG = 65;\n\n        @ConfigEntry(name = \"Border color B\", description = \"Blue channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))", "        public int borderG = 65;\n\n        @ConfigEntry(name = \"Border color B\", description = \"Blue channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))\n        public int borderB = 65;\n\n        @ConfigEntry(name = \"Border color A\", description = \"Alpha channel value for the border color around flags\", configCategory = \"Border\", constraints = @Constraints(maxValue = 255))\n        public int borderA = 255;\n\n        @ConfigEntry(name = \"Reload on refresh\", description = \"Forces flags to be reloaded when the server list is refreshed\")\n        public boolean reloadOnRefresh = false;\n\n        @ConfigEntry(name = \"Show distance\", description = \"Shows the approximate distance between the server and you when you hover over a flag\", configCategory = \"Preferences\")", "        public boolean reloadOnRefresh = false;\n\n        @ConfigEntry(name = \"Show distance\", description = \"Shows the approximate distance between the server and you when you hover over a flag\", configCategory = \"Preferences\")\n        public boolean showDistance = true;\n\n        @ConfigEntry(name = \"Use kilometers\", description = \"Uses kilometers instead of miles\", configCategory = \"Locale\")\n        public boolean useKm = true;\n\n        @ConfigEntry(name = \"Force English\", description = \"Forces the API results to be in English instead of your in-game language\", configCategory = \"Locale\")\n        public boolean forceEnglish = false;\n\n        @ConfigEntry(name = \"Display unknown flag\", description = \"Displays the unknown flag when we don't have data about the server yet\")", "        public boolean forceEnglish = false;\n\n        @ConfigEntry(name = \"Display unknown flag\", description = \"Displays the unknown flag when we don't have data about the server yet\")\n        public boolean displayUnknownFlag = true;\n\n        @ConfigEntry(name = \"Display cooldown flag\", description = \"Displays a timeout flag when we have an API cooldown\")\n        public boolean displayCooldownFlag = true;\n\n        @ConfigEntry(name = \"Show district\", description = \"Shows the district of the location too, if available\")\n        public boolean showDistrict = false;\n\n        @ConfigEntry(name = \"Show ISP\", description = \"Shows the ISP of the host, if available\")", "        public boolean showDistrict = false;\n\n        @ConfigEntry(name = \"Show ISP\", description = \"Shows the ISP of the host, if available\")\n        public boolean showISP = false;\n\n        @ConfigEntry(name = \"Map button\", description = \"Shows a map button in the server list which opens the server map\", configCategory = \"Preferences\")\n        public boolean mapButton = true;\n\n        @ConfigEntry(name = \"Map button on the right side\", description = \"Decides whether the map button should be on the right side or the left side\", configCategory = \"Preferences\")\n        public boolean mapButtonRight = true;\n\n        @ConfigEntry(name = \"Show home on map\", description = \"Shows your location on the server map too\", configCategory = \"Preferences\")", "        public boolean mapButtonRight = true;\n\n        @ConfigEntry(name = \"Show home on map\", description = \"Shows your location on the server map too\", configCategory = \"Preferences\")\n        public boolean showHomeOnMap = true;\n\n        @ConfigEntry(name = \"Resolve SRV redirects\", description = \"Uses the redirected IP (if present) instead of just the resolved IP\")\n        public boolean resolveRedirects = true;\n\n        @ConfigEntry(name = \"Flag position\", description = \"Changes the flags' positions. Available options: default, left, right, behindName\", stringValues = {\"default\", \"left\", \"right\", \"behindName\"}, configCategory = \"Preferences\")\n        public String flagPosition = \"behindName\";\n    }\n\n    private static File configDirectory;\n    private static File propertiesFile;\n    private static WatchService watchService;\n\n    // DO NOT TOUCH", "        public String flagPosition = \"behindName\";\n    }\n\n    private static File configDirectory;\n    private static File propertiesFile;\n    private static WatchService watchService;\n\n    // DO NOT TOUCH\n    public static final Config.Values DEFAULT = new Config.Values();\n\n    // but feel free to touch this one :)", "    public static final Config.Values DEFAULT = new Config.Values();\n\n    // but feel free to touch this one :)\n    public static final Config.Values cfg = new Config.Values();\n\n    public static void init() {\n        String minecraftDir = Minecraft.getInstance().gameDirectory.getAbsolutePath();\n        configDirectory = new File(minecraftDir + \"/config/\" + ServerCountryFlags.MOD_ID);\n        propertiesFile = new File(configDirectory.getAbsolutePath() + \"/\" + ServerCountryFlags.MOD_ID + \".properties\");\n\n        load();\n        registerWatchService();\n    }\n", "    public static void load() {\n        Properties properties = new Properties();\n        boolean loadedProperties = false;\n        try {\n            properties.load(new FileInputStream(propertiesFile));\n            loadedProperties = true;\n        } catch (FileNotFoundException e) {\n            ServerCountryFlags.LOGGER.info(\"Our properties file doesn't exist, creating it\");\n            try {\n                boolean ignored = configDirectory.mkdirs();\n                if (!propertiesFile.createNewFile()) {\n                    ServerCountryFlags.LOGGER.warn(\"Our properties file actually exists... What?\");\n                }\n                save();\n            } catch (IOException ex) {\n                ServerCountryFlags.LOGGER.error(\"Couldn't create the properties file\");\n                ServerCountryFlags.LOGGER.error(ex.getMessage());\n            }\n        } catch (IOException e) {\n            ServerCountryFlags.LOGGER.error(\"Couldn't read the properties file\");\n            ServerCountryFlags.LOGGER.error(e.getMessage());\n        }\n", "            try {\n                boolean ignored = configDirectory.mkdirs();\n                if (!propertiesFile.createNewFile()) {\n                    ServerCountryFlags.LOGGER.warn(\"Our properties file actually exists... What?\");\n                }\n                save();\n            } catch (IOException ex) {\n                ServerCountryFlags.LOGGER.error(\"Couldn't create the properties file\");\n                ServerCountryFlags.LOGGER.error(ex.getMessage());\n            }\n        } catch (IOException e) {\n            ServerCountryFlags.LOGGER.error(\"Couldn't read the properties file\");\n            ServerCountryFlags.LOGGER.error(e.getMessage());\n        }\n", "        if (!loadedProperties)\n            return;\n\n        boolean rewriteConfig = false;\n        for (Field field : Config.Values.class.getDeclaredFields()) {\n            ConfigEntry annotation = field.getAnnotation(ConfigEntry.class);\n            if (annotation != null) {\n                String propertiesValue = properties.getProperty(field.getName());\n                if (propertiesValue == null) {\n                    rewriteConfig = true;\n                } else {", "                if (propertiesValue == null) {\n                    rewriteConfig = true;\n                } else {\n                    try {\n                        if (field.getType() == String.class) {\n                            field.set(cfg, propertiesValue);\n                        } else if (field.getType() == boolean.class) {\n                            field.setBoolean(cfg, Boolean.parseBoolean(propertiesValue));\n                        } else if (field.getType() == int.class) {\n                            Optional<Constraints> constraints = Arrays.stream(annotation.constraints()).findFirst();\n                            int value = Integer.parseInt(propertiesValue);", "                        } else if (field.getType() == int.class) {\n                            Optional<Constraints> constraints = Arrays.stream(annotation.constraints()).findFirst();\n                            int value = Integer.parseInt(propertiesValue);\n                            if (constraints.isPresent()) {\n                                value = Math.max(Math.min(value, constraints.get().maxValue()), constraints.get().minValue());\n                            }\n                            field.setInt(cfg, value);\n                        } else if (field.getType() == float.class) {\n                            field.setFloat(cfg, Float.parseFloat(propertiesValue));\n                        } else {\n                            ServerCountryFlags.LOGGER.warn(\"Bug: unsupported config type \" + field.getType().getSimpleName());\n                        }\n                    } catch (IllegalAccessException e) {\n                        ServerCountryFlags.LOGGER.warn(\"Bug: can't modify a config field\");\n                    } catch (NumberFormatException e) {\n                        ServerCountryFlags.LOGGER.warn(\"Field \" + field.getName() + \" in the properties type is not of type \" + field.getType().getSimpleName());\n                    }\n                }\n            }\n        }\n", "        if (rewriteConfig) {\n            ServerCountryFlags.LOGGER.info(\"Properties file doesn't contain all fields available, rewriting it\");\n            save();\n        }\n\n        afterLoad();\n    }\n\n    private static void afterLoad() {\n        if (cfg.forceEnglish) {\n            ServerCountryFlags.updateAPILanguage(null);\n        } else {\n            LanguageManager languageManager = Minecraft.getInstance().getLanguageManager();\n            // IntelliJ claims that languageManager will never be null\n            // but that's actually not the case", "        if (cfg.forceEnglish) {\n            ServerCountryFlags.updateAPILanguage(null);\n        } else {\n            LanguageManager languageManager = Minecraft.getInstance().getLanguageManager();\n            // IntelliJ claims that languageManager will never be null\n            // but that's actually not the case\n            if (languageManager != null) {\n                ServerCountryFlags.updateAPILanguage(languageManager.getSelected());\n            }\n        }\n\n        // So that the map button appears/disappears without having to reopen the screen\n        Screen screen = Minecraft.getInstance().screen;", "        if (screen instanceof JoinMultiplayerScreen) {\n            screen.resize(Minecraft.getInstance(), screen.width, screen.height);\n        }\n    }\n\n    public static void save() {\n        Properties properties = new Properties();\n\n        StringBuilder fieldsDescriptions = new StringBuilder();\n\n        for (Field field : Config.Values.class.getDeclaredFields()) {\n            ConfigEntry annotation = field.getAnnotation(ConfigEntry.class);", "        for (Field field : Config.Values.class.getDeclaredFields()) {\n            ConfigEntry annotation = field.getAnnotation(ConfigEntry.class);\n            if (annotation != null) {\n                try {\n                    String fieldName = field.getName();\n                    if (!annotation.description().equals(\"\")) {\n                        fieldsDescriptions.append(\"\\n\").append(fieldName).append(\" - \").append(annotation.description());\n                    }\n                    properties.setProperty(fieldName, String.valueOf(field.get(cfg)));\n                } catch (IllegalAccessException e) {\n                    ServerCountryFlags.LOGGER.warn(\"Bug: can't access a config field\");\n                }\n            }\n        }\n", "        try {\n            String comments = \"Mod properties file\";\n            if (!fieldsDescriptions.isEmpty()) {\n                comments += \"\\nField descriptions:\" + fieldsDescriptions;\n            }\n            properties.store(new FileOutputStream(propertiesFile), comments);\n        } catch (FileNotFoundException e) {\n            ServerCountryFlags.LOGGER.error(\"Couldn't save the properties file because it doesn't exist\");\n        } catch (IOException e) {\n            ServerCountryFlags.LOGGER.error(\"Couldn't save the properties file\");\n            ServerCountryFlags.LOGGER.error(e.getMessage());\n        }\n    }\n\n    private static void registerWatchService() {", "        try {\n            watchService = FileSystems.getDefault().newWatchService();\n            Paths.get(propertiesFile.getParent()).register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);\n            Thread watcherThread = new Thread(() -> {\n                try {\n                    while (true) {\n                        WatchKey key = watchService.take();\n\n                        // Sometimes multiple events may be taken from updating the file once, sleeping prevents it\n                        Thread.sleep(250);\n", "                        if (!key.pollEvents().isEmpty()) {\n                            ServerCountryFlags.LOGGER.info(\"Properties file modified, reloading it\");\n                            load();\n                        }\n                        key.reset();\n                    }\n                } catch (Exception e) {\n                    ServerCountryFlags.LOGGER.warn(\"WatchService closed\");\n                }\n            });\n            watcherThread.setName(\"File watcher\");\n            watcherThread.start();\n        } catch (IOException e) {\n            ServerCountryFlags.LOGGER.error(\"Couldn't initialize WatchService\");\n        }\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/config/ClothConfigScreenMaker.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.config;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport me.shedaniel.clothconfig2.api.ConfigBuilder;\nimport me.shedaniel.clothconfig2.api.ConfigCategory;\nimport me.shedaniel.clothconfig2.api.ConfigEntryBuilder;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.network.chat.Component;\n", "import net.minecraft.network.chat.Component;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class ClothConfigScreenMaker {\n\n    public static Screen create(Minecraft minecraft, Screen parent) {\n        return create(parent);\n    }\n", "    public static Screen create(Minecraft minecraft, Screen parent) {\n        return create(parent);\n    }\n\n    public static Screen create(Screen parent) {\n        ConfigBuilder builder = ConfigBuilder.create()\n                .setParentScreen(parent)\n                .setTitle(Component.literal(\"Server Country Flags\"))\n                .setSavingRunnable(Config::save);\n\n        // Saving the config will cause it to be written to and then instantly loaded from file again.\n        // Probably not a big deal though.\n\n        ConfigEntryBuilder entryBuilder = builder.entryBuilder();\n", "        for (Field field : Config.Values.class.getDeclaredFields()) {\n            addEntryForField(field, builder, entryBuilder);\n        }\n\n        return builder.build();\n    }\n\n    public static void addEntryForField(Field field, ConfigBuilder configBuilder, ConfigEntryBuilder entryBuilder) {\n        ConfigEntry annotation = field.getAnnotation(ConfigEntry.class);\n\n        if (annotation == null) {\n            return;\n        }\n\n        ConfigCategory category = configBuilder.getOrCreateCategory(Component.literal(annotation.configCategory()));\n", "        if (annotation == null) {\n            return;\n        }\n\n        ConfigCategory category = configBuilder.getOrCreateCategory(Component.literal(annotation.configCategory()));\n\n        try {\n            if (field.getType() == int.class) {\n                Optional<Constraints> constraints = Arrays.stream(annotation.constraints()).findFirst();\n                category.addEntry(entryBuilder.startIntField(Component.literal(annotation.name()), field.getInt(Config.cfg))\n                        .setTooltip(Component.literal(annotation.description()))\n                        .setDefaultValue(field.getInt(Config.DEFAULT))\n                        .setSaveConsumer(newValue -> setCfgInt(field, newValue))\n                        .setMin(constraints.isPresent() ? constraints.get().minValue() : null)\n                        .setMax(constraints.isPresent() ? constraints.get().maxValue() : null)\n                        .build());", "            } else if (field.getType() == boolean.class) {\n                category.addEntry(entryBuilder.startBooleanToggle(Component.literal(annotation.name()), field.getBoolean(Config.cfg))\n                        .setTooltip(Component.literal(annotation.description()))\n                        .setDefaultValue(field.getBoolean(Config.DEFAULT))\n                        .setSaveConsumer(newValue -> setCfgBoolean(field, newValue))\n                        .build());\n            } else if (field.getType() == String.class) {\n                if (annotation.stringValues() != null) {\n                    category.addEntry(entryBuilder.startStringDropdownMenu(Component.literal(annotation.name()), (String)field.get(Config.cfg))\n                            .setSelections(List.of(annotation.stringValues()))\n                            .setTooltip(Component.literal(annotation.description()))\n                            .setDefaultValue((String)field.get(Config.DEFAULT))\n                            .setSaveConsumer(newValue -> setCfgString(field, newValue))\n                            .build());\n                } else {\n                    category.addEntry(entryBuilder.startStrField(Component.literal(annotation.name()), (String)field.get(Config.cfg))\n                            .setTooltip(Component.literal(annotation.description()))\n                            .setDefaultValue((String)field.get(Config.DEFAULT))\n                            .setSaveConsumer(newValue -> setCfgString(field, newValue))\n                            .build());\n                }\n            }\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to access a field\", e);\n        }\n    }\n\n    private static void setCfgInt(Field field, int value) {", "        try {\n            field.setInt(Config.cfg, value);\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to set value to a field\", e);\n        }\n    }\n\n    private static void setCfgBoolean(Field field, boolean value) {\n        try {\n            field.setBoolean(Config.cfg, value);\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to set value to a field\", e);\n        }\n    }\n\n    private static void setCfgString(Field field, String string) {", "        try {\n            field.setBoolean(Config.cfg, value);\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to set value to a field\", e);\n        }\n    }\n\n    private static void setCfgString(Field field, String string) {\n        try {\n            field.set(Config.cfg, string);\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to set value to a field\", e);\n        }\n    }\n}\n", "        try {\n            field.set(Config.cfg, string);\n        } catch (IllegalAccessException e) {\n            ServerCountryFlags.LOGGER.error(\"Failed to set value to a field\", e);\n        }\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/config/Constraints.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.config;\n\npublic @interface Constraints {\n    int minValue() default 0;\n    int maxValue() default 100;\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/config/ConfigEntry.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.config;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface ConfigEntry {\n    String name() default \"\";\n    String description() default \"\";\n    String[] stringValues() default {};\n    String configCategory() default \"Miscellaneous\";\n    Constraints[] constraints() default {};\n}\n", "@Retention(RetentionPolicy.RUNTIME)\npublic @interface ConfigEntry {\n    String name() default \"\";\n    String description() default \"\";\n    String[] stringValues() default {};\n    String configCategory() default \"Miscellaneous\";\n    Constraints[] constraints() default {};\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/config/ClothConfigCheck.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.config;\n\npublic class ClothConfigCheck {\n    public static boolean isInstalled() {\n        try {\n            Class.forName(\"me.shedaniel.clothconfig2.ClothConfigDemo\");\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/util/LocationInfo.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.util;\n\nimport com.google.gson.JsonObject;\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\n\nimport java.util.List;\n\npublic class LocationInfo {\n    private static final double MILE_KM_RATIO = 1.609344;\n\n    public boolean success = false;", "    public boolean success = false;\n    public String countryCode = null;\n    public String countryName = null;\n    public String cityName = null;\n    public String districtName = null;\n    public String ispName = null;\n    public double latitude = -1.0;\n    public double longitude = -1.0;\n    private double distanceFromLocal = -1.0; // in miles\n\n    public LocationInfo(JsonObject apiObject) {", "        if (apiObject.has(\"status\")) {\n            success = apiObject.get(\"status\").getAsString().equals(\"success\");\n            if (!success) {\n                ServerCountryFlags.LOGGER.error(\"API result isn't successful\");\n                ServerCountryFlags.LOGGER.error(apiObject.toString());\n                return;\n            }\n        } else {\n            ServerCountryFlags.LOGGER.error(\"API Object doesn't include the field 'status'\");\n            ServerCountryFlags.LOGGER.error(apiObject.toString());\n            return;\n        }\n", "        if (apiObject.keySet().containsAll(List.of(\"country\", \"countryCode\", \"city\", \"lon\", \"lat\", \"district\", \"isp\"))) {\n            this.countryName = apiObject.get(\"country\").getAsString();\n            this.countryCode = apiObject.get(\"countryCode\").getAsString().toLowerCase();\n            this.cityName = apiObject.get(\"city\").getAsString();\n            this.districtName = apiObject.get(\"district\").getAsString();\n            this.ispName = apiObject.get(\"isp\").getAsString();\n\n            this.longitude = apiObject.get(\"lon\").getAsDouble();\n            this.latitude = apiObject.get(\"lat\").getAsDouble();\n            this.distanceFromLocal = calculateDistanceFromLocal();\n        } else {\n            ServerCountryFlags.LOGGER.error(\"API Object is incomplete\");\n            ServerCountryFlags.LOGGER.error(apiObject.toString());\n            success = false;\n        }\n    }\n\n    private double calculateDistanceFromLocal() {\n        LocationInfo local = ServerCountryFlags.localLocation;\n", "        if (local == null)\n            return -1.0;\n\n        double theta = local.longitude - this.longitude;\n        return Math.toDegrees(Math.acos(\n                Math.sin(Math.toRadians(local.latitude)) * Math.sin(Math.toRadians(this.latitude))\n                + Math.cos(Math.toRadians(local.latitude)) * Math.cos(Math.toRadians(this.latitude))\n                * Math.cos(Math.toRadians(theta))\n        )) * 69.09;\n    }\n", "    public double getDistanceFromLocal(boolean inKm) {\n        if (this.distanceFromLocal == -1.0)\n            return -1.0;\n        return inKm ? this.distanceFromLocal * MILE_KM_RATIO : this.distanceFromLocal;\n    }\n\n    public void updateDistanceFromLocal() {\n        this.distanceFromLocal = calculateDistanceFromLocal();\n    }\n}"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/util/NetworkChangeDetector.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.util;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\n\nimport java.net.InterfaceAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;", "import java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class NetworkChangeDetector {\n    private static final HashMap<NetworkInterface, List<InterfaceAddress>> previousInterfaces = new HashMap<>();\n\n    public static boolean check() {\n        boolean changed = false;\n        try {\n            List<NetworkInterface> currentInterfaces = Collections.list(NetworkInterface.getNetworkInterfaces());", "        try {\n            List<NetworkInterface> currentInterfaces = Collections.list(NetworkInterface.getNetworkInterfaces());\n            for (NetworkInterface networkInterface : currentInterfaces) {\n                if (!previousInterfaces.containsKey(networkInterface)) {\n                    previousInterfaces.put(networkInterface, new ArrayList<>());\n                    changed = true;\n                }\n                for (InterfaceAddress address : networkInterface.getInterfaceAddresses()) {\n                    if (!previousInterfaces.get(networkInterface).contains(address)) {\n                        previousInterfaces.get(networkInterface).add(address);\n                        changed = true;\n                    }\n                }\n            }\n            List<NetworkInterface> interfacesToRemove = new ArrayList<>();", "                    if (!previousInterfaces.get(networkInterface).contains(address)) {\n                        previousInterfaces.get(networkInterface).add(address);\n                        changed = true;\n                    }\n                }\n            }\n            List<NetworkInterface> interfacesToRemove = new ArrayList<>();\n            for (NetworkInterface networkInterface : previousInterfaces.keySet()) {\n                if (!currentInterfaces.contains(networkInterface)) {\n                    interfacesToRemove.add(networkInterface);\n                    changed = true;\n                } else {", "                if (!currentInterfaces.contains(networkInterface)) {\n                    interfacesToRemove.add(networkInterface);\n                    changed = true;\n                } else {\n                    for (InterfaceAddress address : networkInterface.getInterfaceAddresses()) {\n                        if (!previousInterfaces.get(networkInterface).contains(address)) {\n                            previousInterfaces.get(networkInterface).remove(address);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n            interfacesToRemove.forEach(previousInterfaces::remove);\n        } catch (SocketException e) {\n            ServerCountryFlags.LOGGER.warn(\"SocketException while checking network interfaces\");\n        }\n\n        return changed;\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/util/APIResponse.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.util;\n\npublic record APIResponse(Status status, LocationInfo locationInfo) {\n    public boolean cooldown() {\n        return status == Status.COOLDOWN;\n    }\n\n    public boolean unknown() {\n        return status == Status.UNKNOWN;\n    }\n", "    public enum Status {\n        SUCCESS,\n        UNKNOWN,\n        COOLDOWN\n    }\n}"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/screen/ServerMapScreen.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.screen;\n\nimport com.mojang.blaze3d.systems.RenderSystem;\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport me.khajiitos.servercountryflags.common.config.Config;\nimport me.khajiitos.servercountryflags.common.util.APIResponse;\nimport me.khajiitos.servercountryflags.common.util.LocationInfo;\nimport me.khajiitos.servercountryflags.common.util.NetworkChangeDetector;\nimport net.minecraft.ChatFormatting;\nimport net.minecraft.client.Minecraft;", "import net.minecraft.ChatFormatting;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.client.gui.components.Button;\nimport net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.util.FormattedCharSequence;\nimport org.jetbrains.annotations.NotNull;\nimport org.lwjgl.opengl.GL11;", "import org.jetbrains.annotations.NotNull;\nimport org.lwjgl.opengl.GL11;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ServerMapScreen extends Screen {\n    public static final ResourceLocation MAP_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/map.jpg\");\n    public static final ResourceLocation POINT_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/point.png\");\n    public static final ResourceLocation POINT_HOVERED_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/point_hovered.png\");", "    public static final ResourceLocation MAP_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/map.jpg\");\n    public static final ResourceLocation POINT_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/point.png\");\n    public static final ResourceLocation POINT_HOVERED_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/point_hovered.png\");\n    public static final ResourceLocation POINT_HOME_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/point_home.png\");\n    public static final double MAP_TEXTURE_ASPECT = 3600.0 / 1800.0;\n    public static final double POINT_TEXTURE_ASPECT = 526.0 / 754.0;\n    public static final double ZOOM_STRENGTH = 0.1;\n\n    private int mapStartX, mapStartY, mapWidth, mapHeight;\n    private final Screen parent;\n    private final ArrayList<Point> points = new ArrayList<>();\n\n    private double zoomedAreaStartX = 0.0;\n    private double zoomedAreaStartY = 0.0;\n    private double zoomedAreaWidth = 1.0;\n    private double zoomedAreaHeight = 1.0;\n\n    private boolean movingMap = false;\n    private double movingMapLastX = -1.0;\n    private double movingMapLastY = -1.0;\n\n    public ServerMapScreen(Screen parent) {\n        super(Component.translatable(\"servermap.title\"));\n        this.parent = parent;\n", "        if (Config.cfg.showHomeOnMap && ServerCountryFlags.localLocation != null) {\n            addPoint(null, ServerCountryFlags.localLocation);\n        }\n\n        for (Map.Entry<String, APIResponse> entry : ServerCountryFlags.servers.entrySet()) {\n            if (entry.getValue().locationInfo() != null) {\n                addPoint(entry.getKey(), entry.getValue().locationInfo());\n            }\n        }\n    }\n", "    public Point getPoint(double lon, double lat) {\n        for (Point point : points) {\n\n            if (point.locationInfo.longitude == lon && point.locationInfo.latitude == lat) {\n                return point;\n            }\n        }\n        return null;\n    }\n\n    public double clampDouble(double value, double min, double max) {", "    public double clampDouble(double value, double min, double max) {\n        if (value > max)\n            value = max;\n        else if (value < min)\n            value = min;\n        return value;\n    }\n\n    @Override\n    public void mouseMoved(double mouseX, double mouseY) {\n        super.mouseMoved(mouseX, mouseY);", "    public void mouseMoved(double mouseX, double mouseY) {\n        super.mouseMoved(mouseX, mouseY);\n        if (this.movingMap) {\n            double deltaX = (this.movingMapLastX - mouseX) / this.mapWidth * zoomedAreaWidth;\n            double deltaY = (this.movingMapLastY - mouseY) / this.mapHeight * zoomedAreaHeight;\n            this.movingMapLastX = mouseX;\n            this.movingMapLastY = mouseY;\n\n            zoomedAreaStartX = clampDouble(zoomedAreaStartX + deltaX, 0.0, 1.0 - zoomedAreaWidth);\n            zoomedAreaStartY = clampDouble(zoomedAreaStartY + deltaY, 0.0, 1.0 - zoomedAreaHeight);\n        }\n    }\n\n    @Override", "    public boolean mouseReleased(double mouseX, double mouseY, int button) {\n        if (button == 0) {\n            this.movingMap = false;\n            this.movingMapLastX = -1.0;\n            this.movingMapLastY = -1.0;\n        }\n        return super.mouseReleased(mouseX, mouseY, button);\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button) {", "    public boolean mouseClicked(double mouseX, double mouseY, int button) {\n        if (button == 0 && mouseX >= mapStartX && mouseX <= mapStartX + mapWidth && mouseY >= mapStartY && mouseY <= mapStartY + mapHeight) {\n            this.movingMap = true;\n            this.movingMapLastX = mouseX;\n            this.movingMapLastY = mouseY;\n        }\n        return super.mouseClicked(mouseX, mouseY, button);\n    }\n\n    @Override\n    public boolean mouseScrolled(double mouseX, double mouseY, double amount) {", "    public boolean mouseScrolled(double mouseX, double mouseY, double amount) {\n        if (mouseX >= mapStartX && mouseX <= mapStartX + mapWidth && mouseY >= mapStartY && mouseY <= mapStartY + mapHeight) {\n            double oldWidth = zoomedAreaWidth;\n            double oldHeight = zoomedAreaHeight;\n\n            zoomedAreaWidth = clampDouble(zoomedAreaWidth - amount * ZOOM_STRENGTH, 0.05, 1.0);\n            zoomedAreaHeight = clampDouble(zoomedAreaHeight - amount * ZOOM_STRENGTH, 0.05, 1.0);\n\n            double widthDelta = oldWidth - zoomedAreaWidth;\n            double heightDelta = oldHeight - zoomedAreaHeight;\n\n            zoomedAreaStartX = clampDouble(zoomedAreaStartX + ((mouseX - mapStartX) / mapWidth) * widthDelta, 0.0, 1.0 - zoomedAreaWidth);\n            zoomedAreaStartY = clampDouble(zoomedAreaStartY + ((mouseY - mapStartY) / mapHeight) * heightDelta, 0.0, 1.0 - zoomedAreaHeight);\n            return true;\n        } else {\n            return super.mouseScrolled(mouseX, mouseY, amount);\n        }\n    }\n\n    private void addPoint(String name, LocationInfo locationInfo) {\n        Point point = getPoint(locationInfo.longitude, locationInfo.latitude);", "        if (point != null) {\n            point.addServer(name);\n        } else {\n            points.add(new Point(name, locationInfo));\n        }\n    }\n\n    @Override\n    public void init() {\n\n        this.addRenderableWidget(new Button.Builder(\n                Component.translatable(\"selectServer.refresh\"),\n                (button) -> {\n                    this.clearWidgets();\n                    this.init();\n", "    public void init() {\n\n        this.addRenderableWidget(new Button.Builder(\n                Component.translatable(\"selectServer.refresh\"),\n                (button) -> {\n                    this.clearWidgets();\n                    this.init();\n\n                    if (ServerCountryFlags.serverList == null) {\n                        return;\n                    }\n", "                    if (ServerCountryFlags.serverList == null) {\n                        return;\n                    }\n\n                    if (Config.cfg.reloadOnRefresh) {\n                        points.clear();\n                        ServerCountryFlags.servers.clear();\n                        ServerCountryFlags.localLocation = null;\n                    }\n\n                    if (ServerCountryFlags.localLocation == null || NetworkChangeDetector.check()) {\n                        ServerCountryFlags.updateLocalLocationInfo();\n                    }\n", "                    if (ServerCountryFlags.localLocation == null || NetworkChangeDetector.check()) {\n                        ServerCountryFlags.updateLocalLocationInfo();\n                    }\n\n                    for (int i = 0; i < ServerCountryFlags.serverList.size(); i++) {\n                        if (ServerCountryFlags.servers.containsKey(ServerCountryFlags.serverList.get(i).ip)) {\n                            continue;\n                        }\n                        ServerCountryFlags.updateServerLocationInfo(ServerCountryFlags.serverList.get(i).ip);\n                    }\n                }\n        ).bounds(this.width / 2 - 105, this.height - 26, 100, 20).build());\n\n        this.addRenderableWidget(new Button.Builder(\n                Component.translatable(\"gui.back\"),\n                (button) -> Minecraft.getInstance().setScreen(this.parent)\n        ).bounds(this.width / 2 + 5, this.height - 26, 100, 20).build());\n    }\n\n    @Override", "    public void render(@NotNull GuiGraphics context, int mouseX, int mouseY, float delta) {\n        this.renderBackground(context);\n        super.render(context, mouseX, mouseY, delta);\n        context.drawCenteredString(this.font, this.getTitle().getVisualOrderText(), this.width / 2, 12, 0xFFFFFFFF);\n        context.fill(0, 32, this.width, this.height - 32, 0xAA000000);\n\n        mapHeight = this.height - 64;\n        mapWidth = (int)(mapHeight * MAP_TEXTURE_ASPECT);\n\n        if (mapWidth > this.width) {\n            mapWidth = this.width;\n            mapHeight = (int)(mapWidth / MAP_TEXTURE_ASPECT);\n        }\n\n        mapStartX = this.width / 2 - mapWidth / 2;\n        mapStartY = 32 + ((this.height - 64) / 2 - mapHeight / 2);\n\n        // TODO: this doesn't seem to work anymore\n        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\n        context.blit(MAP_TEXTURE, mapStartX, mapStartY, mapWidth, mapHeight, (float)(mapWidth * zoomedAreaStartX), (float)(mapHeight * zoomedAreaStartY), (int)(mapWidth * zoomedAreaWidth), (int)(mapHeight * zoomedAreaHeight), mapWidth, mapHeight);\n        Point hoveredPoint = null;\n\n        int pointHeight = mapHeight / 20;\n        int pointWidth = (int)(pointHeight * POINT_TEXTURE_ASPECT);\n", "        if (mapWidth > this.width) {\n            mapWidth = this.width;\n            mapHeight = (int)(mapWidth / MAP_TEXTURE_ASPECT);\n        }\n\n        mapStartX = this.width / 2 - mapWidth / 2;\n        mapStartY = 32 + ((this.height - 64) / 2 - mapHeight / 2);\n\n        // TODO: this doesn't seem to work anymore\n        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);\n        RenderSystem.texParameter(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);\n\n        context.blit(MAP_TEXTURE, mapStartX, mapStartY, mapWidth, mapHeight, (float)(mapWidth * zoomedAreaStartX), (float)(mapHeight * zoomedAreaStartY), (int)(mapWidth * zoomedAreaWidth), (int)(mapHeight * zoomedAreaHeight), mapWidth, mapHeight);\n        Point hoveredPoint = null;\n\n        int pointHeight = mapHeight / 20;\n        int pointWidth = (int)(pointHeight * POINT_TEXTURE_ASPECT);\n", "        for (int i = points.size() - 1; i >= 0; i--) {\n            Point point = points.get(i);\n            Coordinates coords = latlonToPos(point.locationInfo.latitude, point.locationInfo.longitude, mapWidth, mapHeight);\n            int pointStartX = mapStartX + coords.x - (pointWidth / 2);\n            int pointStartY = mapStartY + coords.y - pointHeight;\n\n            if (coords.x < 0 || coords.x > mapWidth - (pointWidth / 2) || coords.y < pointHeight || coords.y > mapHeight)\n                continue;\n\n            if (mouseX >= pointStartX && mouseX <= pointStartX + pointWidth && mouseY >= pointStartY && mouseY <= pointStartY + pointHeight) {\n                hoveredPoint = point;\n                break;\n            }\n        }\n", "            if (mouseX >= pointStartX && mouseX <= pointStartX + pointWidth && mouseY >= pointStartY && mouseY <= pointStartY + pointHeight) {\n                hoveredPoint = point;\n                break;\n            }\n        }\n\n        for (Point point : this.points) {\n            point.render(context, hoveredPoint == point);\n        }\n\n        if (hoveredPoint != null) {\n            this.setTooltipForNextRenderPass(hoveredPoint.getTooltip());\n        }\n\n        RenderSystem.disableBlend();\n    }\n", "        if (hoveredPoint != null) {\n            this.setTooltipForNextRenderPass(hoveredPoint.getTooltip());\n        }\n\n        RenderSystem.disableBlend();\n    }\n\n    public void onClose() {\n        Minecraft.getInstance().setScreen(this.parent);\n    }\n\n    @Override", "    public void tick() {\n        super.tick();\n\n        // Syncs the location infos from the server list to here\n        this.points.clear();\n\n        if (ServerCountryFlags.localLocation != null) {\n            addPoint(null, ServerCountryFlags.localLocation);\n        }\n\n        for (Map.Entry<String, APIResponse> entry : ServerCountryFlags.servers.entrySet()) {", "        for (Map.Entry<String, APIResponse> entry : ServerCountryFlags.servers.entrySet()) {\n            if (entry.getValue().locationInfo() != null) {\n                addPoint(entry.getKey(), entry.getValue().locationInfo());\n            }\n        }\n    }\n\n    public class Point {\n        LocationInfo locationInfo;\n        List<String> servers;\n        public boolean hasHome;\n\n        public Point(String beginningName, LocationInfo beginningLocationInfo) {\n            this.servers = new ArrayList<>();\n            this.locationInfo = beginningLocationInfo;\n            this.addServer(beginningName);\n        }\n", "        public boolean hasHome;\n\n        public Point(String beginningName, LocationInfo beginningLocationInfo) {\n            this.servers = new ArrayList<>();\n            this.locationInfo = beginningLocationInfo;\n            this.addServer(beginningName);\n        }\n\n        public void addServer(String name) {\n            if (name == null) {\n                this.hasHome = true;\n            }\n            this.servers.add(name);\n        }\n\n        public List<FormattedCharSequence> getTooltip() {\n            List<FormattedCharSequence> list = new ArrayList<>();\n            list.add(Component.literal((Config.cfg.showDistrict && !locationInfo.districtName.equals(\"\") ? (locationInfo.districtName + \", \") : \"\") + locationInfo.cityName + \", \" + locationInfo.countryName).withStyle(ChatFormatting.BOLD).getVisualOrderText());\n            list.add(Component.nullToEmpty(null).getVisualOrderText());\n", "        public void addServer(String name) {\n            if (name == null) {\n                this.hasHome = true;\n            }\n            this.servers.add(name);\n        }\n\n        public List<FormattedCharSequence> getTooltip() {\n            List<FormattedCharSequence> list = new ArrayList<>();\n            list.add(Component.literal((Config.cfg.showDistrict && !locationInfo.districtName.equals(\"\") ? (locationInfo.districtName + \", \") : \"\") + locationInfo.cityName + \", \" + locationInfo.countryName).withStyle(ChatFormatting.BOLD).getVisualOrderText());\n            list.add(Component.nullToEmpty(null).getVisualOrderText());\n", "            for (String server : this.servers) {\n                if (server == null) {\n                    list.add(Component.translatable(\"servermap.home\").withStyle(ChatFormatting.BOLD).getVisualOrderText());\n                } else {\n                    list.add(Component.literal(server).getVisualOrderText());\n                }\n            }\n            return list;\n        }\n\n        private void render(GuiGraphics context, boolean hovered) {\n            Coordinates coords = latlonToPos(this.locationInfo.latitude, this.locationInfo.longitude, mapWidth, mapHeight);\n            int pointHeight = mapHeight / 20;\n            int pointWidth = (int)(pointHeight * POINT_TEXTURE_ASPECT);\n            int pointStartX = mapStartX + coords.x - (pointWidth / 2);\n            int pointStartY = mapStartY + coords.y - pointHeight;\n", "            if (coords.x < 0 || coords.x > mapWidth - (pointWidth / 2) || coords.y < pointHeight || coords.y > mapHeight)\n                return;\n\n            ResourceLocation texture = POINT_TEXTURE;\n\n            if (this.hasHome) {\n                texture = POINT_HOME_TEXTURE;\n            } else if (hovered) {\n                texture = POINT_HOVERED_TEXTURE;\n            }\n\n            context.blit(texture, pointStartX, pointStartY, 0, 0, pointWidth, pointHeight, pointWidth, pointHeight);\n        }\n    }\n", "    public static class Coordinates {\n        public int x, y;\n\n        public Coordinates(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private Coordinates latlonToPos(double lat, double lon, int width, int height) {\n        int x = (int)(width * (((180.0 + lon) / 360.0 - zoomedAreaStartX) / zoomedAreaHeight));\n        int y = (int)(height * (((90.0 - lat) / 180.0 - zoomedAreaStartY) / zoomedAreaWidth));\n        return new Coordinates(x, y);\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/mixin/OnlineServerEntryMixin.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.mixin;\n\nimport com.mojang.blaze3d.systems.RenderSystem;\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport me.khajiitos.servercountryflags.common.config.Config;\nimport me.khajiitos.servercountryflags.common.util.APIResponse;\nimport me.khajiitos.servercountryflags.common.util.LocationInfo;\nimport net.minecraft.ChatFormatting;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;", "import net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;\nimport net.minecraft.client.gui.screens.multiplayer.ServerSelectionList;\nimport net.minecraft.client.multiplayer.ServerData;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.resources.ResourceLocation;\nimport org.spongepowered.asm.mixin.Final;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;", "import org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.Unique;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\n@Mixin(ServerSelectionList.OnlineServerEntry.class)\npublic class OnlineServerEntryMixin {\n\n    @Shadow\n    @Final\n    private ServerData serverData;\n\n    @Shadow\n    @Final\n    private JoinMultiplayerScreen screen;\n\n    @Unique\n    private static boolean printedError = false;\n\n    @Unique\n    private static String originalName;\n\n    @Inject(at = @At(\"HEAD\"), method = \"render\")", "    public void renderHead(GuiGraphics context, int index, int y, int x, int entryWidth, int entryHeight, int mouseX, int mouseY, boolean hovered, float tickDelta, CallbackInfo info) {\n        if (!ServerCountryFlags.flagAspectRatiosLoaded) {\n            return;\n        }\n\n        originalName = this.serverData.name;\n        if (Config.cfg.flagPosition.equalsIgnoreCase(\"behindName\")) {\n            this.serverData.name = \"\";\n        }\n    }\n\n    @Inject(at = @At(\"TAIL\"), method = \"render\")", "    public void render(GuiGraphics context, int index, int y, int x, int entryWidth, int entryHeight, int mouseX, int mouseY, boolean hovered, float tickDelta, CallbackInfo info) {\n        if (!ServerCountryFlags.flagAspectRatiosLoaded) {\n            return;\n        }\n\n        Component toolTip;\n        String countryCode;\n        APIResponse apiResponse = ServerCountryFlags.servers.get(serverData.ip);\n        LocationInfo locationInfo = null;\n\n        if (apiResponse != null) {\n            locationInfo = apiResponse.locationInfo();", "        if (apiResponse != null) {\n            locationInfo = apiResponse.locationInfo();\n            if (apiResponse.cooldown()) {\n                if (!Config.cfg.displayCooldownFlag && Config.cfg.flagPosition.equalsIgnoreCase(\"behindname\")) {\n                    this.serverData.name = originalName;\n                    context.drawString(Minecraft.getInstance().font, this.serverData.name, x + 35, y + 1, 16777215, false);\n                    return;\n                }\n                toolTip = Component.translatable(\"locationInfo.cooldown\");\n                countryCode = \"timeout\";\n            } else if (apiResponse.unknown()) {", "            } else if (apiResponse.unknown()) {\n                if (!Config.cfg.displayUnknownFlag && Config.cfg.flagPosition.equalsIgnoreCase(\"behindname\")) {\n                    this.serverData.name = originalName;\n                    context.drawString(Minecraft.getInstance().font, this.serverData.name, x + 35, y + 1, 16777215, false);\n                    return;\n                }\n                toolTip = Component.translatable(\"locationInfo.unknown\");\n                countryCode = \"unknown\";\n            } else {\n                toolTip = Component.literal((Config.cfg.showDistrict && !locationInfo.districtName.equals(\"\") ? (locationInfo.districtName + \", \") : \"\") + locationInfo.cityName + \", \" + locationInfo.countryName);\n                countryCode = locationInfo.countryCode;\n            }\n        } else {", "            if (!Config.cfg.displayUnknownFlag && Config.cfg.flagPosition.equalsIgnoreCase(\"behindname\")) {\n                this.serverData.name = originalName;\n                context.drawString(Minecraft.getInstance().font, this.serverData.name, x + 35, y + 1, 16777215, false);\n                return;\n            }\n            toolTip = Component.translatable(\"locationInfo.unknown\");\n            countryCode = \"unknown\";\n        }\n\n        int height = 12;\n        double aspect = ServerCountryFlags.flagAspectRatios.get(countryCode);\n        int width = (int)(aspect * height);\n        int startingX, startingY;\n\n        switch (Config.cfg.flagPosition.toLowerCase()) {\n            case \"left\" -> {\n                startingX = x - width - 6;\n                startingY = y + (entryHeight / 2) - (height / 2);\n            }\n            case \"right\" -> {\n                startingX = x + entryWidth + 10;\n                startingY = y + (entryHeight / 2) - (height / 2);\n            }\n            case \"behindname\" -> {\n                height = 8;\n                width = (int) (aspect * height);\n                startingX = x + 35;\n                startingY = y + 1;\n                this.serverData.name = originalName;\n                context.drawString(Minecraft.getInstance().font, this.serverData.name, startingX + width + 3, y + 1, 16777215, false);\n            }\n            default -> {\n                startingX = x + entryWidth - width - 6;\n                startingY = y + entryHeight - height - 4;\n            }\n        }\n", "        if (!ServerCountryFlags.flagAspectRatios.containsKey(countryCode)) {\n            if (!printedError) {\n                ServerCountryFlags.LOGGER.error(\"ERROR: Unsupported country code: \" + countryCode);\n                printedError = true;\n            }\n            toolTip = Component.translatable(\"locationInfo.unknown\");\n            countryCode = \"unknown\";\n        }\n\n        ResourceLocation textureId = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/flags/\" + countryCode + \".png\");\n\n        RenderSystem.enableBlend();\n        context.blit(textureId, startingX, startingY, 0.0F, 0.0F, width, height, width, height);", "        if (Config.cfg.flagBorder) {\n            final int color = (Config.cfg.borderR << 16) | (Config.cfg.borderG << 8) | Config.cfg.borderB | (Config.cfg.borderA << 24);\n            context.renderOutline(startingX - 1, startingY - 1, width + 2, height + 2, color);\n        }\n        RenderSystem.disableBlend();\n        if (mouseX >= startingX && mouseX <= startingX + width && mouseY >= startingY && mouseY <= startingY + height) {\n            List<Component> toolTipList = new ArrayList<>();\n            toolTipList.add(toolTip);\n\n            if (locationInfo != null) {\n                if (Config.cfg.showISP && !locationInfo.ispName.equals(\"\")) {\n                    toolTipList.add(Component.translatable(\"locationInfo.isp\", locationInfo.ispName));\n                }", "            if (locationInfo != null) {\n                if (Config.cfg.showISP && !locationInfo.ispName.equals(\"\")) {\n                    toolTipList.add(Component.translatable(\"locationInfo.isp\", locationInfo.ispName));\n                }\n                if (Config.cfg.showDistance) {\n                    double distanceFromLocal = locationInfo.getDistanceFromLocal(Config.cfg.useKm);\n                    if (distanceFromLocal != -1.0) {\n                        toolTipList.add(Component.translatable(\"locationInfo.distance\", (int)distanceFromLocal, Component.translatable(Config.cfg.useKm ? \"locationInfo.km\" : \"locationInfo.mi\")).withStyle(ChatFormatting.ITALIC));\n                    }\n                }\n            }\n            screen.setToolTip(toolTipList);\n        }\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/mixin/JoinMultiplayerScreenMixin.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.mixin;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport me.khajiitos.servercountryflags.common.config.Config;\nimport me.khajiitos.servercountryflags.common.screen.ServerMapScreen;\nimport me.khajiitos.servercountryflags.common.util.NetworkChangeDetector;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.components.ImageButton;\nimport net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;", "import net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen;\nimport net.minecraft.client.multiplayer.ServerList;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.resources.ResourceLocation;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.Unique;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;", "import org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\n@Mixin(JoinMultiplayerScreen.class)\npublic class JoinMultiplayerScreenMixin extends Screen {\n    @Unique\n    private static final ResourceLocation MAP_BUTTON_TEXTURE = new ResourceLocation(ServerCountryFlags.MOD_ID, \"textures/misc/map_button.png\");\n\n    @Shadow\n    private ServerList servers;\n\n    private JoinMultiplayerScreenMixin(Component title) {\n        super(title);\n    }\n\n    @Inject(method = \"<init>\", at = @At(\"TAIL\"))", "    public void constructor(CallbackInfo info) {\n        if (Config.cfg.reloadOnRefresh) {\n            ServerCountryFlags.servers.clear();\n            ServerCountryFlags.localLocation = null;\n        }\n\n        if (ServerCountryFlags.localLocation == null || NetworkChangeDetector.check()) {\n            ServerCountryFlags.updateLocalLocationInfo();\n        }\n    }\n\n    @Inject(at = @At(\"TAIL\"), method = \"init\")", "    public void init(CallbackInfo info) {\n        ServerCountryFlags.serverList = this.servers;\n\n        for (int i = 0; i < this.servers.size(); i++) {\n            if (!ServerCountryFlags.servers.containsKey(this.servers.get(i).ip)) {\n                ServerCountryFlags.updateServerLocationInfo(this.servers.get(i).ip);\n            }\n        }\n\n        if (Config.cfg.mapButton) {\n            int posX = this.width / 2 + (Config.cfg.mapButtonRight ? 159 : -179);\n            int posY = this.height - 30;\n            this.addRenderableWidget(new ImageButton(posX, posY, 20, 20, Minecraft.getInstance().options.highContrast().get() ? 20 : 0, 0, 20, MAP_BUTTON_TEXTURE, 40, 40, (button) -> Minecraft.getInstance().setScreen(new ServerMapScreen(this))));\n        }\n    }\n}\n", "        if (Config.cfg.mapButton) {\n            int posX = this.width / 2 + (Config.cfg.mapButtonRight ? 159 : -179);\n            int posY = this.height - 30;\n            this.addRenderableWidget(new ImageButton(posX, posY, 20, 20, Minecraft.getInstance().options.highContrast().get() ? 20 : 0, 0, 20, MAP_BUTTON_TEXTURE, 40, 40, (button) -> Minecraft.getInstance().setScreen(new ServerMapScreen(this))));\n        }\n    }\n}\n"]}
{"filename": "Common/src/main/java/me/khajiitos/servercountryflags/common/mixin/LanguageManagerMixin.java", "chunked_list": ["package me.khajiitos.servercountryflags.common.mixin;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.resources.language.LanguageManager;\nimport net.minecraft.server.packs.resources.ResourceManager;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;", "import org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\n@Mixin(LanguageManager.class)\npublic class LanguageManagerMixin {\n    @Inject(at = @At(\"TAIL\"), method = \"onResourceManagerReload\")\n    public void onResourceManagerReload(ResourceManager manager, CallbackInfo info) {\n        ServerCountryFlags.updateAPILanguage(Minecraft.getInstance().getLanguageManager().getSelected());\n    }\n}\n"]}
{"filename": "Fabric/src/main/java/me/khajiitos/servercountryflags/fabric/ServerCountryFlagsFabric.java", "chunked_list": ["package me.khajiitos.servercountryflags.fabric;\n\nimport me.khajiitos.servercountryflags.common.ServerCountryFlags;\nimport net.fabricmc.api.ClientModInitializer;\n\npublic class ServerCountryFlagsFabric implements ClientModInitializer {\n    @Override\n    public void onInitializeClient() {\n        ServerCountryFlags.init();\n    }\n}\n"]}
{"filename": "Fabric/src/main/java/me/khajiitos/servercountryflags/fabric/ModMenuApiImpl.java", "chunked_list": ["package me.khajiitos.servercountryflags.fabric;\n\nimport com.terraformersmc.modmenu.api.ConfigScreenFactory;\nimport com.terraformersmc.modmenu.api.ModMenuApi;\nimport me.khajiitos.servercountryflags.common.config.ClothConfigCheck;\nimport me.khajiitos.servercountryflags.common.config.ClothConfigScreenMaker;\n\npublic class ModMenuApiImpl implements ModMenuApi {\n\n    @Override\n    public ConfigScreenFactory<?> getModConfigScreenFactory() {", "        if (ClothConfigCheck.isInstalled()) {\n            return ClothConfigScreenMaker::create;\n        }\n        return ModMenuApi.super.getModConfigScreenFactory();\n    }\n}"]}
