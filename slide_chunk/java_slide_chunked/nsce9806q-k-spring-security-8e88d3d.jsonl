{"filename": "src/test/java/org/swmaestro/kauth/KauthApplicationTests.java", "chunked_list": ["package org.swmaestro.kauth;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass KauthApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "src/test/java/org/swmaestro/kauth/integration/KSecurityConfigurationTests.java", "chunked_list": ["package org.swmaestro.kauth.integration;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.test.context.ContextConfiguration;", "import org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.swmaestro.kauth.KauthApplication;\nimport org.swmaestro.kauth.core.jwt.JwtFilterChainBuilder;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * @author Kevin Park", "/**\n * @author Kevin Park\n * @since 0.0.1\n */\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = { KSecurityConfigurationTests.SecurityConfiguration.class, KauthApplication.class })\npublic class KSecurityConfigurationTests {\n\n    @Autowired\n    private ApplicationContext context;\n\n    @DisplayName(\"SecurityConfiguration \uc5d0 JwtUsernamePasswordAuthenticationFilter \uac00 \ub4f1\ub85d\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\")\n    @Test", "    public void checkJwtUsernamePasswordAuthenticationFilterIsRegisteredInSecurityConfiguration() {\n        assertThat(context.getBean(SecurityFilterChain.class)\n                .getFilters()\n                .stream()\n                .anyMatch(filter -> filter.getClass().getName().contains(\"JwtUsernamePasswordAuthenticationFilter\")))\n                .isTrue();\n    }\n\n    @Configuration\n    @EnableWebSecurity\n    static class SecurityConfiguration {\n        @Bean\n        SecurityFilterChain filterChain(JwtFilterChainBuilder builder) throws Exception {\n            return builder.init()\n                    .UsernamePassword(\"/login\")\n                    .build();\n        }\n\n        @Bean", "        public BCryptPasswordEncoder bCryptPasswordEncoder() {\n            return new BCryptPasswordEncoder();\n        }\n\n        @Bean\n        UserDetailsService userDetailsService() {\n            UserDetails user = User.withDefaultPasswordEncoder().username(\"user\").password(\"password\").roles(\"USER\").build();\n            return new InMemoryUserDetailsManager(user);\n        }\n    }\n}\n"]}
{"filename": "src/test/java/org/swmaestro/kauth/util/HttpServletResponseUtilTest.java", "chunked_list": ["package org.swmaestro.kauth.util;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.web.server.Cookie;", "import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.web.server.Cookie;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.mock.web.MockHttpServletResponse;\nimport org.springframework.web.util.ContentCachingResponseWrapper;\nimport org.swmaestro.kauth.dto.UsernamePasswordLoginRequest;\n\nimport java.io.IOException;\n\n@SpringBootTest", "\n@SpringBootTest\nclass HttpServletResponseUtilTest {\n\n    @Autowired\n    private HttpServletResponseUtil httpServletResponseUtil;\n\n    @DisplayName(\"\ud5e4\ub354 \uc124\uc815 \ud14c\uc2a4\ud2b8\")\n    @Test\n    void setHeader() {", "    @Test\n    void setHeader() {\n        HttpServletResponse response = new MockHttpServletResponse();\n\n        httpServletResponseUtil.setHeader(response, \"name\", \"value\");\n\n        Assertions.assertEquals(\"value\", response.getHeader(\"name\"));\n    }\n\n    @DisplayName(\"JSON body \uc124\uc815 \ud14c\uc2a4\ud2b8\")", "\n    @DisplayName(\"JSON body \uc124\uc815 \ud14c\uc2a4\ud2b8\")\n    @Test\n    void setJsonBody() throws IOException {\n        UsernamePasswordLoginRequest loginRequest = new UsernamePasswordLoginRequest();\n        loginRequest.setUsername(\"username\");\n        loginRequest.setPassword(\"password\");\n\n        HttpServletResponse response = new MockHttpServletResponse();\n        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(response);", "        HttpServletResponse response = new MockHttpServletResponse();\n        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(response);\n\n        httpServletResponseUtil.setJsonBody(responseWrapper, loginRequest);\n\n        byte[] contentAsByteArray = responseWrapper.getContentAsByteArray();\n        String responseStr = new String(contentAsByteArray, responseWrapper.getCharacterEncoding());\n        UsernamePasswordLoginRequest responseLoginRequest = new ObjectMapper().readValue(responseStr, UsernamePasswordLoginRequest.class);\n\n        Assertions.assertEquals(\"application/json;charset=UTF-8\", response.getContentType());", "\n        Assertions.assertEquals(\"application/json;charset=UTF-8\", response.getContentType());\n        Assertions.assertEquals(\"UTF-8\", response.getCharacterEncoding());\n        Assertions.assertEquals(\"username\", responseLoginRequest.getUsername());\n        Assertions.assertEquals(\"password\", responseLoginRequest.getPassword());\n    }\n\n    @DisplayName(\"401 \uc751\ub2f5 \uc124\uc815 \ud14c\uc2a4\ud2b8\")\n    @Test\n    void setUnauthorizedResponse() throws IOException {", "    @Test\n    void setUnauthorizedResponse() throws IOException {\n        RuntimeException exception = new RuntimeException(\"unauthorized\");\n\n        HttpServletResponse response = new MockHttpServletResponse();\n        ContentCachingResponseWrapper responseWrapper = new ContentCachingResponseWrapper(response);\n\n        httpServletResponseUtil.setUnauthorizedResponse(responseWrapper, exception);\n\n        byte[] contentAsByteArray = responseWrapper.getContentAsByteArray();", "\n        byte[] contentAsByteArray = responseWrapper.getContentAsByteArray();\n        String responseStr = new String(contentAsByteArray, responseWrapper.getCharacterEncoding());\n        RuntimeException responseException = new ObjectMapper().readValue(responseStr, RuntimeException.class);\n\n        Assertions.assertEquals(HttpServletResponse.SC_UNAUTHORIZED, response.getStatus());\n        Assertions.assertEquals(\"unauthorized\", responseException.getMessage());\n    }\n\n    @DisplayName(\"Response Cookie \uc124\uc815 \ud14c\uc2a4\ud2b8\")", "\n    @DisplayName(\"Response Cookie \uc124\uc815 \ud14c\uc2a4\ud2b8\")\n    @Test\n    void setCookie() {\n        HttpServletResponse response = new MockHttpServletResponse();\n\n        httpServletResponseUtil.setCookie(\n                response,\n                \"refresh_token\",\n                \"token\",", "                \"refresh_token\",\n                \"token\",\n                \"/\",\n                3600,\n                \"localhost\",\n                Cookie.SameSite.NONE\n        );\n\n        String responseCookie = response.getHeader(HttpHeaders.SET_COOKIE);\n", "        String responseCookie = response.getHeader(HttpHeaders.SET_COOKIE);\n\n        Assertions.assertNotNull(responseCookie);\n        Assertions.assertTrue(responseCookie.contains(\"refresh_token=token\"));\n        Assertions.assertTrue(responseCookie.contains(\"Path=/\"));\n        Assertions.assertTrue(responseCookie.contains(\"Expires=\"));\n        Assertions.assertTrue(responseCookie.contains(\"Domain=localhost\"));\n        Assertions.assertTrue(responseCookie.contains(\"SameSite=NONE\"));\n    }\n}", "    }\n}\n"]}
{"filename": "src/test/java/org/swmaestro/kauth/showcase/UserLoginWithJwtTests.java", "chunked_list": ["package org.swmaestro.kauth.showcase;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.MediaType;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.test.context.ContextConfiguration;", "import org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.swmaestro.kauth.KauthApplication;\nimport org.swmaestro.kauth.core.jwt.JwtFilterChainBuilder;", "import org.swmaestro.kauth.KauthApplication;\nimport org.swmaestro.kauth.core.jwt.JwtFilterChainBuilder;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.authenticated;\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.unauthenticated;\nimport static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;", "import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n/**\n * @author Kevin Park\n * @since 0.0.1\n */\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = { UserLoginWithJwtTests.SecurityConfiguration.class, KauthApplication.class })\n@WebAppConfiguration\npublic class UserLoginWithJwtTests {\n\n    @Autowired\n    private WebApplicationContext context;\n\n    private MockMvc mockMvc;\n\n    @BeforeEach", "@ContextConfiguration(classes = { UserLoginWithJwtTests.SecurityConfiguration.class, KauthApplication.class })\n@WebAppConfiguration\npublic class UserLoginWithJwtTests {\n\n    @Autowired\n    private WebApplicationContext context;\n\n    private MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        this.mockMvc = MockMvcBuilders\n                .webAppContextSetup(this.context)\n                .apply(springSecurity())\n                .build();\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778 \uc131\uacf5 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void setup() {\n        this.mockMvc = MockMvcBuilders\n                .webAppContextSetup(this.context)\n                .apply(springSecurity())\n                .build();\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778 \uc131\uacf5 \ud14c\uc2a4\ud2b8\")\n    @Test\n    public void withUsernamePasswordJwtLoginSuccessTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"user\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(authenticated())\n                .andExpect(status().is2xxSuccessful())\n                .andExpect(header().exists(\"Authorization\"))\n                .andExpect(header().exists(\"Refresh-Token\"));\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \ud328\uc2a4\uc6cc\ub4dc \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginSuccessTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"user\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(authenticated())\n                .andExpect(status().is2xxSuccessful())\n                .andExpect(header().exists(\"Authorization\"))\n                .andExpect(header().exists(\"Refresh-Token\"));\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \ud328\uc2a4\uc6cc\ub4dc \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginFailByWrongPasswordTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"user\\\", \\\"password\\\": \\\"wrongPassword\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(unauthenticated())\n                .andExpect(status().isUnauthorized());\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \ub9cc\ub8cc\ub41c \uc720\uc800 \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginFailByExpiredUserTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"expiredUser\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(unauthenticated())\n                .andExpect(status().isUnauthorized());\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \uc7a0\uae34 \uc720\uc800 \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginFailByLockedUserTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"lockedUser\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(unauthenticated())\n                .andExpect(status().isUnauthorized());\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \uc778\uc99d \ub9cc\ub8cc \uc720\uc800 \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginFailByCredentialExpiredUserTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"credentialExpiredUser\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(unauthenticated())\n                .andExpect(status().isUnauthorized());\n    }\n\n    @DisplayName(\"Username + Password (JWT) \ub85c\uadf8\uc778: \ube44\ud65c\uc131\ud654 \uc720\uc800 \uc2e4\ud328 \ud14c\uc2a4\ud2b8\")\n    @Test", "    public void withUsernamePasswordJwtLoginFailByDisabledUserTest() throws Exception {\n        String requestJson = \"{\\\"username\\\":\\\"disabledUser\\\", \\\"password\\\": \\\"password\\\"}\";\n\n        this.mockMvc.perform(post(\"/login\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .content(requestJson))\n                .andDo(print())\n\n                .andExpect(unauthenticated())\n                .andExpect(status().isUnauthorized());\n    }\n\n    @Configuration\n    @EnableWebSecurity\n    @EnableWebMvc\n    static class SecurityConfiguration {\n        @Bean\n        SecurityFilterChain filterChain(JwtFilterChainBuilder builder) throws Exception {\n            return builder.init()\n                    .UsernamePassword(\"/login\")\n                    .build();\n        }\n\n        @Bean", "        public BCryptPasswordEncoder bCryptPasswordEncoder() {\n            return new BCryptPasswordEncoder();\n        }\n\n        @Bean\n        UserDetailsService userDetailsService() {\n            UserDetails user = User.withDefaultPasswordEncoder()\n                    .username(\"user\")\n                    .password(\"password\")\n                    .roles(\"USER\")\n                    .build();\n\n            UserDetails expiredUser = User.withDefaultPasswordEncoder()\n                    .username(\"expiredUser\")\n                    .password(\"password\")\n                    .roles(\"USER\")\n                    .accountExpired(true)\n                    .build();\n\n            UserDetails lockedUser = User.withDefaultPasswordEncoder()\n                    .username(\"lockedUser\")\n                    .password(\"password\")\n                    .roles(\"USER\")\n                    .accountLocked(true)\n                    .build();\n\n            UserDetails credentialExpiredUser = User.withDefaultPasswordEncoder()\n                    .username(\"credentialExpiredUser\")\n                    .password(\"password\")\n                    .roles(\"USER\")\n                    .credentialsExpired(true)\n                    .build();\n\n            UserDetails disabledUser = User.withDefaultPasswordEncoder()\n                    .username(\"disabledUser\")\n                    .password(\"password\")\n                    .roles(\"USER\")\n                    .disabled(true)\n                    .build();\n\n            return new InMemoryUserDetailsManager(user, expiredUser, lockedUser, credentialExpiredUser, disabledUser);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/KauthApplication.java", "chunked_list": ["package org.swmaestro.kauth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class KauthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(KauthApplication.class, args);\n    }\n\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(KauthApplication.class, args);\n    }\n\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/UsernamePasswordAuthenticationManager.java", "chunked_list": ["package org.swmaestro.kauth.authentication;\n\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.security.authentication.AccountStatusUserDetailsChecker;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsChecker;", "import org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsChecker;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\nimport org.swmaestro.kauth.core.user.PostAuthenticationService;\nimport org.swmaestro.kauth.core.user.KauthUserDetailsService;\n\n/**", "\n/**\n * Username + Password\ub97c \uc0ac\uc6a9\ud558\ub294 {@link AuthenticationManager}\n * @author ChangEn Yea\n */\n@Lazy\n@Component\npublic class UsernamePasswordAuthenticationManager implements AuthenticationManager {\n\n\tprivate final KauthUserDetailsService userDetailsService;\n\n\tprivate final PasswordEncoder passwordEncoder;\n\n\tprivate final UserDetailsChecker userDetailsChecker = new AccountStatusUserDetailsChecker();\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param userDetailsService {@link KauthUserDetailsService}\n\t * @param passwordEncoder {@link PasswordEncoder}\n\t */\n\tpublic UsernamePasswordAuthenticationManager(KauthUserDetailsService userDetailsService,\n\t\tPasswordEncoder passwordEncoder) {\n\t\tthis.userDetailsService = userDetailsService;\n\t\tthis.passwordEncoder = passwordEncoder;\n\t}\n\n\t/**\n\t * <pre>\n\t * {@link UserDetailsService#loadUserByUsername}\ub97c \ud638\ucd9c\ud574\uc11c\n\t * {@link Authentication}\uc758 credentials\uacfc {@link UserDetails}\uc758 password\ub97c {@link PasswordEncoder#matches}\ub97c \ud1b5\ud574\n\t * \uc77c\uce58 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4.\n\t * \uc77c\uce58 \ud55c\ub2e4\uba74 {@link Authentication} \uc778\uc2a4\ud134\uc2a4\ub97c \uc778\uc99d \ucc98\ub9ac\ud558\uace0, credential\ub97c \uc0ad\uc81c\ud558\uace0, \uad8c\ud55c\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * </pre>\n\t * @param authentication {@link Authentication}\n\t * @return \uc778\uc99d \ucc98\ub9ac \ub41c {@link Authentication}\n\t * @throws AuthenticationException\n\t */\n\t@Override", "\tpublic Authentication authenticate(Authentication authentication)\n\t\tthrows AuthenticationException {\n\n\t\tAuthenticationProvider auth = (AuthenticationProvider)authentication;\n\t\tUserDetails user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());\n\n\t\tif (user == null) {\n\t\t\tthrow new UsernameNotFoundException(\"userDetailsService.loadUserByUsername returns null\");\n\t\t}\n\n\t\t// AccountStatusException \uccb4\ud06c\n\t\tuserDetailsChecker.check(user);\n", "\t\tif (passwordEncoder.matches((String)auth.getCredentials(), user.getPassword())) {\n\t\t\tauth.setAuthenticated(true);\n\t\t\tauth.eraseCredentials();\n\t\t\tauth.setAuthorities(user.getAuthorities());\n\t\t\tuserDetailsService.handleSuccessfulAuthentication(user);\n\n\t\t\treturn auth;\n\t\t} else {\n\t\t\tthrow new BadCredentialsException(\"Password does not matches.\");\n\t\t}\n\t}\n\n\t/**\n\t * {@link BadCredentialsException}\uc744 \ucc98\ub9ac\ud558\ub3c4\ub85d\n\t * {@link PostAuthenticationService#handleBadCredentialsException}\uc744 \ud638\ucd9c\ud55c\ub2e4.\n\t * @param username\n\t * @return \ube44\ubc00\ubc88\ud638 \ud2c0\ub9b0 \ud69f\uc218. (-1 \uc774\uba74 \ud2c0\ub9b0 \ud69f\uc218\ub97c \uc54c\ub824\uc8fc\uc9c0 \uc54a\ub294\ub2e4)\n\t */", "\tpublic Integer handleBadCredentialsException(String username) {\n\t\treturn userDetailsService.handleBadCredentialsException(username);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/AbstractAuthenticationFilter.java", "chunked_list": ["package org.swmaestro.kauth.authentication;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n\nimport org.apache.commons.logging.Log;", "\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.security.authentication.InternalAuthenticationServiceException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\n", "import org.swmaestro.kauth.util.HttpServletResponseUtil;\n\n/**\n * Kauth \uc778\uc99d \ucd94\uc0c1 \ud074\ub798\uc2a4 \ud544\ud130\n * @author ChangEn Yea\n */\npublic abstract class AbstractAuthenticationFilter extends OncePerRequestFilter {\n\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\n\tprotected final AntPathRequestMatcher requestMatcher;\n\n\tprotected final HttpServletResponseUtil responseUtil;\n\n\t/**\n\t * \uc774 \uc778\uc99d \ud544\ud130\uc758 {@link AntPathRequestMatcher}\ub97c \uc124\uc815\ud558\uace0 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param requestMatcher {@link AntPathRequestMatcher}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tprotected AbstractAuthenticationFilter(AntPathRequestMatcher requestMatcher, HttpServletResponseUtil responseUtil) {\n\t\tthis.requestMatcher = requestMatcher;\n\t\tthis.responseUtil = responseUtil;\n\t}\n\n\t/**\n\t * \uc694\uccad\uc774 {@link #requestMatcher}\uc640 \uc77c\uce58\ud558\uba74 {@link #attemptAuthentication} \ud638\ucd9c\uc744 \ud1b5\ud574 \uc778\uc99d\ud558\uace0\n\t * \uc131\uacf5 \uc5ec\ubd80\uc5d0 \ub530\ub77c {@link #successfulAuthentication} \ub610\ub294 {@link #unsuccessfulAuthentication}\ub97c \ud638\ucd9c\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @param chain {@link FilterChain}\n\t * @throws IOException\n\t * @throws ServletException\n\t */\n\t@Override", "\tpublic void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n\t\tthrows IOException, ServletException {\n\n\t\tif (requestMatcher.matches(request)) {\n\t\t\ttry {\n\t\t\t\tAuthentication authenticationResult = attemptAuthentication(request, response);\n\t\t\t\tsuccessfulAuthentication(request, response, chain, authenticationResult);\n\t\t\t} catch (InternalAuthenticationServiceException failed) {\n\t\t\t\tsuper.logger.error(\"An internal error occurred while trying to authenticate the user.\", failed);\n\t\t\t} catch (AuthenticationException ex) {\n\t\t\t\tunsuccessfulAuthentication(request, response, ex);\n\t\t\t}\n\t\t} else {\n\t\t\tchain.doFilter(request, response);\n\t\t}\n\t}\n\n\t/**\n\t * \uc0ac\uc6a9\uc790\ub97c \uc778\uc99d\ud558\uace0 \uc778\uc99d \uc131\uacf5 \uc2dc {@link Authentication}\ub97c \ubc18\ud658\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @return \uc778\uc99d \ub41c {@link Authentication}\n\t * @throws AuthenticationException \ub85c\uadf8\uc778 \uc624\ub958, \uacc4\uc815 \uc7a0\uae40 \ub4f1 \uc778\uc99d \uc2e4\ud328 \uc2dc\n\t * @throws IOException\n\t * @throws ServletException\n\t */", "\tpublic abstract Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\tthrows AuthenticationException, IOException, ServletException;\n\n\t/**\n\t * {@link #attemptAuthentication}\uc5d0\uc11c \uc778\uc99d \uc131\uacf5\uc2dc\uc758 \ub85c\uc9c1\uc744 \ucc98\ub9ac\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @param chain {@link FilterChain}\n\t * @param authResult {@link Authentication}\n\t * @throws IOException\n\t * @throws ServletException\n\t */\n\tprotected abstract void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\tFilterChain chain, Authentication authResult) throws IOException, ServletException;\n\n\t/**\n\t * {@link #attemptAuthentication}\uc5d0\uc11c \uc778\uc99d \uc2e4\ud328\uc2dc\uc758 \ub85c\uc9c1\uc744 \ucc98\ub9ac\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @throws IOException\n\t * @throws ServletException\n\t */\n\tprotected abstract void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\tAuthenticationException failed) throws IOException, ServletException;\n\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/AuthenticationProvider.java", "chunked_list": ["package org.swmaestro.kauth.authentication;\n\nimport java.util.Collection;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.CredentialsContainer;\nimport org.springframework.security.core.GrantedAuthority;\n\n/**\n * Kauth\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 {@link Authentication} \uad6c\ud604 \ud074\ub798\uc2a4", "/**\n * Kauth\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 {@link Authentication} \uad6c\ud604 \ud074\ub798\uc2a4\n * @author ChangEn Yea\n */\npublic class AuthenticationProvider implements Authentication, CredentialsContainer {\n\n\tprivate final Object principal;\n\n\tprivate Object credential;\n\n\tprivate Object details;\n\n\tprivate Collection<? extends GrantedAuthority> authorities;\n\n\tprivate boolean isAuthenticated;\n\n\t/**\n\t * principal\uacfc \uad8c\ud55c\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param principal {@link #principal}\n\t * @param details {@link #details}\n\t * @param authorities {@link Collection<GrantedAuthority>}\n\t */\n\tpublic AuthenticationProvider(Object principal, Object details,\n\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tthis.principal = principal;\n\t\tthis.details = details;\n\t\tthis.authorities = authorities;\n\t}\n\n\t/**\n\t * principal\uacfc credential\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param principal {@link Object}\n\t * @param credential {@link Object}\n\t */\n\tpublic AuthenticationProvider(Object principal, Object credential) {\n\t\tthis.principal = principal;\n\t\tthis.credential = credential;\n\t}\n\n\t/**\n\t * \uad8c\ud55c\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param authorities {@link Collection<GrantedAuthority>}\n\t */", "\tpublic void setAuthorities(\n\t\tCollection<? extends GrantedAuthority> authorities) {\n\t\tthis.authorities = authorities;\n\t}\n\n\t/**\n\t * \uad8c\ud55c\uc744 \ubc18\ud658\ud55c\ub2e4.\n\t * @return \uc774 {@link Authentication}\uc758 \uad8c\ud55c\n\t */\n\t@Override\n\tpublic Collection<? extends GrantedAuthority> getAuthorities() {\n\t\treturn this.authorities;\n\t}\n\n\t/**\n\t * {@link #credential}\uc744 \ubc18\ud658\ud55c\ub2e4.\n\t * @return \uc774 {@link Authentication}\uc758 {@link #credential}\n\t */\n\t@Override", "\tpublic Object getCredentials() {\n\t\treturn this.credential;\n\t}\n\n\t/**\n\t * {@link #details}\uc744 \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link Authentication}\uc758 {@link #details}\n\t */\n\t@Override\n\tpublic Object getDetails() {\n\t\treturn this.details;\n\t}\n\n\t/**\n\t * {@link #principal}\uc744 \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link Authentication}\uc758 {@link #principal}\n\t */\n\t@Override", "\tpublic Object getDetails() {\n\t\treturn this.details;\n\t}\n\n\t/**\n\t * {@link #principal}\uc744 \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link Authentication}\uc758 {@link #principal}\n\t */\n\t@Override\n\tpublic Object getPrincipal() {\n\t\treturn this.principal;\n\t}\n\n\t/**\n\t * \uc778\uc99d \uc5ec\ubd80\ub97c \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link Authentication}\uc758 \uc778\uc99d \uc5ec\ubd80\n\t */\n\t@Override", "\tpublic Object getPrincipal() {\n\t\treturn this.principal;\n\t}\n\n\t/**\n\t * \uc778\uc99d \uc5ec\ubd80\ub97c \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link Authentication}\uc758 \uc778\uc99d \uc5ec\ubd80\n\t */\n\t@Override\n\tpublic boolean isAuthenticated() {\n\t\treturn this.isAuthenticated;\n\t}\n\n\t/**\n\t * {@link #details}\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param details {@link org.springframework.security.core.userdetails.UserDetails}\n\t */", "\tpublic boolean isAuthenticated() {\n\t\treturn this.isAuthenticated;\n\t}\n\n\t/**\n\t * {@link #details}\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param details {@link org.springframework.security.core.userdetails.UserDetails}\n\t */\n\tpublic void setDetails(Object details) {\n\t\tthis.details = details;\n\t}\n\n\t/**\n\t * \uc774 \uc778\uc99d \uac1d\uccb4 \uc778\uc2a4\ud134\uc2a4\uc758 \uc778\uc99d \uc5ec\ubd80\ub97c \uc124\uc815\ud55c\ub2e4.\n\t * @param isAuthenticated <code>true</code> if the token should be trusted (which may\n\t * result in an exception) or <code>false</code> if the token should not be trusted\n\t * @throws IllegalArgumentException\n\t */\n\t@Override", "\tpublic void setDetails(Object details) {\n\t\tthis.details = details;\n\t}\n\n\t/**\n\t * \uc774 \uc778\uc99d \uac1d\uccb4 \uc778\uc2a4\ud134\uc2a4\uc758 \uc778\uc99d \uc5ec\ubd80\ub97c \uc124\uc815\ud55c\ub2e4.\n\t * @param isAuthenticated <code>true</code> if the token should be trusted (which may\n\t * result in an exception) or <code>false</code> if the token should not be trusted\n\t * @throws IllegalArgumentException\n\t */\n\t@Override", "\tpublic void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n\t\tthis.isAuthenticated = isAuthenticated;\n\t}\n\n\t@Override\n\tpublic String getName() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * {@link #credential}\uc744 \uc0ad\uc81c\ud55c\ub2e4.\n\t */\n\t@Override", "\tpublic void eraseCredentials() {\n\t\tthis.credential = null;\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/AbstractUsernamePasswordAuthenticationFilter.java", "chunked_list": ["package org.swmaestro.kauth.authentication;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n", "import java.io.IOException;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.swmaestro.kauth.dto.UsernamePasswordLoginRequest;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;", "import org.swmaestro.kauth.dto.UsernamePasswordLoginRequest;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\n\n/**\n * Kauth username + password \uc778\uc99d \ucd94\uc0c1 \ud074\ub798\uc2a4 \ud544\ud130\n * @author ChangEn Yea\n */\npublic abstract class AbstractUsernamePasswordAuthenticationFilter extends AbstractAuthenticationFilter {\n\n\tprivate final UsernamePasswordAuthenticationManager authenticationManager;\n\n\tprivate final ObjectMapper objectMapper;\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param antPathRequestMatcher {@link AntPathRequestMatcher}\n\t * @param authenticationManager {@link AuthenticationManager}\n\t * @param objectMapper {@link ObjectMapper}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tprotected AbstractUsernamePasswordAuthenticationFilter(AntPathRequestMatcher antPathRequestMatcher,\n\t\tAuthenticationManager authenticationManager, ObjectMapper objectMapper, HttpServletResponseUtil responseUtil) {\n\t\tsuper(antPathRequestMatcher, responseUtil);\n\t\tthis.authenticationManager = (UsernamePasswordAuthenticationManager)authenticationManager;\n\t\tthis.objectMapper = objectMapper;\n\t}\n\n\t/**\n\t * {@link HttpServletRequest}\uc758 body\uc5d0 \uc788\ub294 username\uacfc password\ub97c\n\t * {@link UsernamePasswordAuthenticationManager}\ub97c \ud1b5\ud574 \uc778\uc99d\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @return \uc778\uc99d \ub41c {@link Authentication}\n\t * @throws AuthenticationException \ub85c\uadf8\uc778 \uc624\ub958(\uc544\uc774\ub514, \ube44\ubc00\ubc88\ud638 \uc624\ub958 \ub4f1), \uacc4\uc815 \uc7a0\uae40 \ub4f1 \uc778\uc99d \uc2e4\ud328 \uc2dc\n\t */\n\t@Override", "\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\tthrows AuthenticationException {\n\t\ttry {\n\t\t\tUsernamePasswordLoginRequest loginRequest = objectMapper\n\t\t\t\t.readValue(request.getInputStream(), UsernamePasswordLoginRequest.class);\n\n\t\t\treturn this.authenticationManager.authenticate(new AuthenticationProvider(\n\t\t\t\tloginRequest.getUsername(), loginRequest.getPassword()));\n\n\t\t} catch (IOException e) {\n\t\t\tsuper.logger.error(e);\n\t\t\t//\tTODO \uc544\uc774\ub514 \ube44\ubc88 \uc798\ubabb \ub4e4\uc5b4\uc654\ub2e4\uace0 400 response \ucc98\ub9ac\ud574\uc57c\ud568\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * TODO 200 \ub610\ub294 401 \uc120\ud0dd\n\t * {@link #attemptAuthentication}\uc5d0\uc11c \uc778\uc99d \uc2e4\ud328\uc2dc \uac01 \uc0c1\ud669\uc5d0 \ub9de\uac8c \ub85c\uc9c1\uc744 \ucc98\ub9ac\ud558\uace0 401 \uc751\ub2f5\uc744 \ubc18\ud658\ud558\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4..\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @param failed {@link AuthenticationException}\n\t * @throws IOException\n\t * @throws ServletException\n\t */\n\t@Override\n\tprotected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n\t\tAuthenticationException failed) throws IOException, ServletException {\n\n\t\t// TODO \uc624\ub958 \uba54\uc138\uc9c0 \ud615\uc2dd", "\t\tif (failed.getClass().equals(UsernameNotFoundException.class)) {\n\t\t\t// UserDetailsService\uc5d0\uc11c UserDetails\ub97c \ucc3e\uc744 \uc218 \uc5c6\ub294 \uacbd\uc6b0, \uc544\uc774\ub514+\ube44\ubc00\ubc88\ud638 \uc624\ub958 \uba54\uc138\uc9c0\n\t\t\tsuper.responseUtil.setUnauthorizedResponse(response, failed);\n\t\t} else if (failed.getClass().equals(BadCredentialsException.class)) {\n\t\t\tInteger passwordFailureCount = authenticationManager.handleBadCredentialsException(\n\t\t\t\tobjectMapper.readTree(request.getInputStream()).get(\"username\").asText());\n\n\t\t\tif (passwordFailureCount == -1) {\n\t\t\t\t// \ube44\ubc00\ubc88\ud638 \uc624\ub958 \ud69f\uc218 \ube44\uacf5\uac1c, \uc544\uc774\ub514+\ube44\ubc00\ubc88\ud638 \uc624\ub958 \uba54\uc138\uc9c0\n\t\t\t\tsuper.responseUtil.setUnauthorizedResponse(response, failed);\n\t\t\t} else {\n\t\t\t\t// \ube44\ubc00\ubc88\ud638 \ud2c0\ub9b0 \ud69f\uc218 + \ube44\ubc00\ubc88\ud638 \uc624\ub958 \uba54\uc138\uc9c0\n\t\t\t\tsuper.responseUtil.setUnauthorizedResponse(response, failed);\n\t\t\t}\n\t\t} else {\n\t\t\t// \uae30\ud0c0 AuthenticationException \uad00\ub828 \uba54\uc2dc\uc9c0 (\uacc4\uc815 \uc7a0\uae08 \ub4f1)\n\t\t\tsuper.responseUtil.setUnauthorizedResponse(response, failed);\n\t\t}\n\t}\n\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/jwt/JwtReissueFilter.java", "chunked_list": ["package org.swmaestro.kauth.authentication.jwt;\n\nimport java.io.IOException;\n\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.swmaestro.kauth.exceptions.RefreshTokenMismatchException;\nimport org.swmaestro.kauth.exceptions.RefreshTokenMissingException;\nimport org.swmaestro.kauth.exceptions.RefreshTokenServiceUnavailableException;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;", "import org.swmaestro.kauth.exceptions.RefreshTokenServiceUnavailableException;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\nimport org.swmaestro.kauth.util.JwtUtil;\n\nimport com.auth0.jwt.exceptions.JWTVerificationException;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;", "import jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n/**\n * \ud1a0\ud070 \uc7ac\ubc1c\uae09 \ud544\ud130\n * @author ChangEn Yea\n */\npublic class JwtReissueFilter extends OncePerRequestFilter {\n\n\tprivate final AntPathRequestMatcher requestMatcher;\n\n\tprivate final JwtUtil jwtUtil;\n\n\tprivate final RefreshTokenManager refreshTokenManager;\n\n\tprivate final HttpServletResponseUtil responseUtil;\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param requestMatcher {@link AntPathRequestMatcher}\n\t * @param jwtUtil {@link JwtUtil}\n\t * @param refreshTokenManager {@link RefreshTokenManager}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tpublic JwtReissueFilter(AntPathRequestMatcher requestMatcher, JwtUtil jwtUtil,\n\t\tRefreshTokenManager refreshTokenManager, HttpServletResponseUtil responseUtil) {\n\t\tthis.requestMatcher = requestMatcher;\n\t\tthis.jwtUtil = jwtUtil;\n\t\tthis.refreshTokenManager = refreshTokenManager;\n\t\tthis.responseUtil = responseUtil;\n\t}\n\n\t/**\n\t * \uc694\uccad\uc774 {@link #requestMatcher}\uc640 \uc77c\uce58\ud558\uba74 \uc694\uccad Refresh-Token \ud5e4\ub354\uc758 \ud1a0\ud070\uc744 \uac80\uc99d\ud55c\ub2e4.\n\t * \ud5e4\ub354\uc640 \uc11c\ubc84 \ub0b4\uc758 \ub450 refreshToken\uc744 \ube44\uad50\ud558\uace0,\n\t * \uac19\uc740 \ud1a0\ud070\uc774\ub77c\uba74 \uc0c8\ub85c\uc6b4 \ud1a0\ud070\uc744 \ubc1c\uae09\ud558\uace0 \uc800\uc7a5\ud558\uace0 \uc751\ub2f5 \ud5e4\ub354\uc5d0 \ud1a0\ud070\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @param filterChain {@link FilterChain}\n\t * @throws ServletException\n\t * @throws IOException\n\t */\n\t@Override\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n\t\tFilterChain filterChain) throws ServletException, IOException {", "\t\tif (requestMatcher.matches(request)) {\n\t\t\ttry {\n\t\t\t\tString token = request.getHeader(\"Refresh-Token\");\n\t\t\t\tif (token == null) {\n\t\t\t\t\tthrow new RefreshTokenMissingException();\n\t\t\t\t}\n\n\t\t\t\tString username = jwtUtil.verifyToken(token);\n\n\t\t\t\tif (!refreshTokenManager.getRefreshToken(username).equals(token)) {\n\t\t\t\t\tresponseUtil.setUnauthorizedResponse(response,\n\t\t\t\t\t\tnew RefreshTokenMismatchException(\"RefreshTokens are not match.\"));\n\t\t\t\t}\n\n\t\t\t\tString accessToken = jwtUtil.createAccessToken(username);\n\t\t\t\tString refreshToken = jwtUtil.createRefreshToken(username);\n\n\t\t\t\trefreshTokenManager.setRefreshToken(refreshToken, username);\n\n\t\t\t\tresponseUtil.setHeader(response, \"Authorization\", accessToken);\n\t\t\t\tresponseUtil.setHeader(response, \"Refresh-Token\", refreshToken);\n\n\t\t\t} catch (RefreshTokenMissingException | RefreshTokenServiceUnavailableException |\n\t\t\t\t\t RefreshTokenMismatchException | JWTVerificationException e) {\n\t\t\t\tresponseUtil.setUnauthorizedResponse(response, e);\n\t\t\t}\n\t\t} else {\n\t\t\tfilterChain.doFilter(request, response);\n\t\t}\n\t}\n}\n", "\t\t\t\tif (!refreshTokenManager.getRefreshToken(username).equals(token)) {\n\t\t\t\t\tresponseUtil.setUnauthorizedResponse(response,\n\t\t\t\t\t\tnew RefreshTokenMismatchException(\"RefreshTokens are not match.\"));\n\t\t\t\t}\n\n\t\t\t\tString accessToken = jwtUtil.createAccessToken(username);\n\t\t\t\tString refreshToken = jwtUtil.createRefreshToken(username);\n\n\t\t\t\trefreshTokenManager.setRefreshToken(refreshToken, username);\n\n\t\t\t\tresponseUtil.setHeader(response, \"Authorization\", accessToken);\n\t\t\t\tresponseUtil.setHeader(response, \"Refresh-Token\", refreshToken);\n\n\t\t\t} catch (RefreshTokenMissingException | RefreshTokenServiceUnavailableException |\n\t\t\t\t\t RefreshTokenMismatchException | JWTVerificationException e) {\n\t\t\t\tresponseUtil.setUnauthorizedResponse(response, e);\n\t\t\t}\n\t\t} else {\n\t\t\tfilterChain.doFilter(request, response);\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/jwt/RefreshTokenManager.java", "chunked_list": ["package org.swmaestro.kauth.authentication.jwt;\n\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.stereotype.Component;\nimport org.swmaestro.kauth.core.user.RefreshTokenService;\nimport org.swmaestro.kauth.exceptions.RefreshTokenServiceUnavailableException;\n\n/**\n * RefreshToken\uc744 get/set \ud55c\ub2e4.\n * @author ChangEn Yea", " * RefreshToken\uc744 get/set \ud55c\ub2e4.\n * @author ChangEn Yea\n */\n@Lazy\n@Component\npublic class RefreshTokenManager {\n\n\tprivate final RefreshTokenService refreshTokenService;\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param refreshTokenService {@link RefreshTokenService}\n\t */\n\tpublic RefreshTokenManager(RefreshTokenService refreshTokenService) {\n\t\tthis.refreshTokenService = refreshTokenService;\n\t}\n\n\t/**\n\t * {@link RefreshTokenService#getRefreshToken}\ub97c \ud1b5\ud574 RefreshToken\uc744 \uac00\uc838\uc628\ub2e4.\n\t * @param username\n\t * @return RefreshToken\n\t * @throws RefreshTokenServiceUnavailableException {@link RefreshTokenService#getRefreshToken} \uba54\uc18c\ub4dc\uac00\n\t * null\uc744 \ubc18\ud658 \ud560 \ub54c (\uad6c\ud604\uc774 \uc548\ub418\uc5b4 \uc788\uc744 \ub54c) \ubc1c\uc0dd\n\t */\n\tString getRefreshToken(String username) throws RefreshTokenServiceUnavailableException {\n\t\tString refreshToken = refreshTokenService.getRefreshToken(username);\n", "\t\tif (refreshToken == null) {\n\t\t\tthrow new RefreshTokenServiceUnavailableException(\n\t\t\t\t\"RefreshTokenService.getRefreshToken(String) is not defined\");\n\t\t}\n\t\treturn refreshToken;\n\t}\n\n\t/**\n\t * {@link RefreshTokenService#setRefreshToken}\ub97c \ud1b5\ud574 RefreshToken\uc744 \uc800\uc7a5\ud55c\ub2e4.\n\t * @param refreshToken\n\t * @param username\n\t */\n\tvoid setRefreshToken(String refreshToken, String username) {\n\t\trefreshTokenService.setRefreshToken(refreshToken, username);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/authentication/jwt/JwtUsernamePasswordAuthenticationFilter.java", "chunked_list": ["package org.swmaestro.kauth.authentication.jwt;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.io.IOException;\n\nimport org.springframework.security.authentication.AuthenticationManager;", "\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.swmaestro.kauth.authentication.AbstractUsernamePasswordAuthenticationFilter;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\nimport org.swmaestro.kauth.util.JwtUtil;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n", "import com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * JWT\ub97c \ubc1c\uae09\ud558\ub294 username + password \uc778\uc99d \ud544\ud130\n * @author ChangEn Yea\n */\n\npublic class JwtUsernamePasswordAuthenticationFilter extends\n\tAbstractUsernamePasswordAuthenticationFilter {\n\n\tprivate final JwtUtil jwtUtil;\n\n\tprivate final RefreshTokenManager refreshTokenManager;\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t * @param pattern               URI \ud328\ud134\n\t * @param jwtUtil               {@link JwtUtil}\n\t * @param authenticationManager {@link AuthenticationManager}\n\t * @param objectMapper          {@link ObjectMapper}\n\t * @param refreshTokenManager {@link RefreshTokenManager}\n\t */\n\tpublic JwtUsernamePasswordAuthenticationFilter(String pattern, JwtUtil jwtUtil,\n\t\tAuthenticationManager authenticationManager, ObjectMapper objectMapper,\n\t\tRefreshTokenManager refreshTokenManager, HttpServletResponseUtil responseUtil) {\n\t\tsuper(new AntPathRequestMatcher(pattern, \"POST\"), authenticationManager, objectMapper, responseUtil);\n\t\tthis.jwtUtil = jwtUtil;\n\t\tthis.refreshTokenManager = refreshTokenManager;\n\t}\n\n\t/**\n\t * {@link #attemptAuthentication}\uc5d0\uc11c \uc778\uc99d \uc131\uacf5\uc2dc \ud1a0\ud070\uc744 \ubc1c\uae09\ud55c\ub2e4.\n\t * Refresh\ud1a0\ud070\uc740 \uc11c\ubc84\uc5d0 \uc800\uc7a5\ud558\uace0 \ud1a0\ud070\uc744 \ub2f4\uc544 200 \uc751\ub2f5\uc744 \ubc18\ud658\ud558\ub3c4\ub85d \uc124\uc815\ud55c\ub2e4.\n\t * @param request {@link HttpServletRequest}\n\t * @param response {@link HttpServletResponse}\n\t * @param chain {@link FilterChain}\n\t * @param authResult {@link Authentication}\n\t * @throws IOException\n\t * @throws ServletException\n\t */\n\t@Override\n\tprotected void successfulAuthentication(HttpServletRequest request,\n\t\tHttpServletResponse response, FilterChain chain, Authentication authResult)\n\t\tthrows IOException, ServletException {\n\n\t\tString username = (String) authResult.getPrincipal();\n\n\t\tString accessToken = jwtUtil.createAccessToken(username);\n\t\tString refreshToken = jwtUtil.createRefreshToken(username);\n\n\t\trefreshTokenManager.setRefreshToken(refreshToken, username);\n\n\t\tsuper.responseUtil.setHeader(response, \"Authorization\", accessToken);\n\t\tsuper.responseUtil.setHeader(response, \"Refresh-Token\", refreshToken);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/exceptions/RefreshTokenServiceUnavailableException.java", "chunked_list": ["package org.swmaestro.kauth.exceptions;\n\nimport org.swmaestro.kauth.core.user.RefreshTokenService;\n\n/**\n * {@link RefreshTokenService#getRefreshToken}\uac00 \ubbf8\uad6c\ud604 \uc0c1\ud0dc\uc5d0\uc11c \ud638\ucd9c\uc774 \ub420 \uacbd\uc6b0\uc5d0 \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\n * @author ChangEn Yea\n */\npublic class RefreshTokenServiceUnavailableException extends RuntimeException{\n\n\tpublic RefreshTokenServiceUnavailableException(String message) {\n\t\tsuper(message, null);\n\t}\n}\n", "public class RefreshTokenServiceUnavailableException extends RuntimeException{\n\n\tpublic RefreshTokenServiceUnavailableException(String message) {\n\t\tsuper(message, null);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/exceptions/RefreshTokenMissingException.java", "chunked_list": ["package org.swmaestro.kauth.exceptions;\n\n/**\n * {@link jakarta.servlet.http.HttpServletRequest} Refresh-Token \ud5e4\ub354\uac00 \uc5c6\uc744 \uacbd\uc6b0\uc5d0 \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\n * @author ChangEn Yea\n */\npublic class RefreshTokenMissingException extends RuntimeException {\n\n\tpublic RefreshTokenMissingException() {\n\t\tthis(\"RefreshToken is missing\", null);\n\t}\n\n\tpublic RefreshTokenMissingException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/exceptions/RefreshTokenMismatchException.java", "chunked_list": ["package org.swmaestro.kauth.exceptions;\n\n/**\n * \ube44\uad50\ud558\ub294 \ub450 RefreshToken\uc774 \ubd88\uc77c\uce58 \uc2dc \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\n * @author ChangEn Yea\n */\npublic class RefreshTokenMismatchException extends RuntimeException{\n\n\tpublic RefreshTokenMismatchException(String message) {\n\t\tsuper(message, null);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/util/JwtUtil.java", "chunked_list": ["package org.swmaestro.kauth.util;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport java.util.Date;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n/**\n * JWT \ubc1c\uae09/\uac80\uc99d", "/**\n * JWT \ubc1c\uae09/\uac80\uc99d\n * @author ChangEn Yea\n */\n@Component\npublic class JwtUtil {\n\n    @Value(\"${kauth.jwt.secret:kauth}\")\n    private String JWT_SECRET;\n\n    @Value(\"${kauth.jwt.prefix:bearer}\")\n    private String JWT_PREFIX;\n\n    @Value(\"${kauth.jwt.access-token-expiration-time:1800000}\")\n    private Long ACCESS_TOKEN_EXPIRATION_TIME;\n\n    @Value(\"${kauth.jwt.refresh-token-expiration-time:2592000000}\")\n    private Long REFRESH_TOKEN_EXPIRATION_TIME;\n\n    private String createToken(String sub, Long expirationTime) {\n        return JWT_PREFIX + \" \" + JWT.create()\n            .withSubject(sub)\n            .withIssuedAt(new Date())\n            .withExpiresAt(new Date(System.currentTimeMillis() + expirationTime))\n            .sign(Algorithm.HMAC512(JWT_SECRET));\n    }\n", "    public String createAccessToken(String username) {\n        return createToken(username, ACCESS_TOKEN_EXPIRATION_TIME);\n    }\n\n    public String createRefreshToken(String username) {\n        return createToken(username, REFRESH_TOKEN_EXPIRATION_TIME);\n    }\n\n    public String verifyToken(String token) {\n        return JWT.require(Algorithm.HMAC512(JWT_SECRET)).build()\n            .verify(token.replace(JWT_PREFIX, \"\"))\n            .getSubject();\n    }\n}\n", "    public String verifyToken(String token) {\n        return JWT.require(Algorithm.HMAC512(JWT_SECRET)).build()\n            .verify(token.replace(JWT_PREFIX, \"\"))\n            .getSubject();\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/util/ErrorResponse.java", "chunked_list": ["package org.swmaestro.kauth.util;\n\npublic record ErrorResponse(\n    String message\n) {\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/util/HttpServletResponseUtil.java", "chunked_list": ["package org.swmaestro.kauth.util;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.boot.web.server.Cookie;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseCookie;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\n\n@Component\npublic class HttpServletResponseUtil {\n\n    private final ObjectMapper objectMapper;\n\n    public HttpServletResponseUtil(ObjectMapper objectMapper) {\n        this.objectMapper = objectMapper;\n    }\n\n    // setHeader sets header in HttpServletResponse", "    public void setHeader(HttpServletResponse response, String name, String value) {\n        response.setHeader(name, value);\n    }\n\n    // setJsonBody sets json body in HttpServletResponse\n    public void setJsonBody(HttpServletResponse response, Object body) throws IOException {\n        response.setContentType(\"application/json\");\n        response.setCharacterEncoding(\"UTF-8\");\n\n        String responseBody = objectMapper.writeValueAsString(body);\n\n        response.getWriter().write(responseBody);\n    }\n\n    // setUnauthorizedResponse sets 401 Unauthorized response in HttpServletResponse", "    public void setUnauthorizedResponse(HttpServletResponse response, Exception exception) throws IOException {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        String responseBody = objectMapper.writeValueAsString(exception);\n\n        response.getWriter().write(responseBody);\n    }\n\n    // setCookie sets cookie in HttpServletResponse\n    public void setCookie(\n            HttpServletResponse response,\n            String name,\n            String value,\n            String path,\n            int maxAge,\n            String domain,\n            Cookie.SameSite sameSite\n    ) {\n        ResponseCookie cookie = ResponseCookie.from(name, value)\n                .path(path)\n                .httpOnly(true)\n                .secure(true)\n                .maxAge(maxAge)\n                .sameSite(sameSite.toString())\n                .domain(domain)\n                .build();\n\n        response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());\n    }\n}\n", "    public void setCookie(\n            HttpServletResponse response,\n            String name,\n            String value,\n            String path,\n            int maxAge,\n            String domain,\n            Cookie.SameSite sameSite\n    ) {\n        ResponseCookie cookie = ResponseCookie.from(name, value)\n                .path(path)\n                .httpOnly(true)\n                .secure(true)\n                .maxAge(maxAge)\n                .sameSite(sameSite.toString())\n                .domain(domain)\n                .build();\n\n        response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/KauthFilterChain.java", "chunked_list": ["package org.swmaestro.kauth.core;\n\nimport jakarta.servlet.Filter;\n\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;", "import org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\n\n/**\n * Kauth\uc758 \ud544\ud130\uccb4\uc778\uc744 \uad6c\uc131\ud55c\ub2e4.\n * @param <T> \uc774 \ud074\ub798\uc2a4\uc758 \uc0c1\uc18d \ud074\ub798\uc2a4\n * @author ChangEn Yea\n */\npublic abstract class KauthFilterChain<T> {\n\n\tprotected final HttpSecurity http;\n\n\tprotected final HttpServletResponseUtil responseUtil;\n\n\t/**\n\t * {@link KauthFilterChainBuilder#init()} \ud638\ucd9c\uc744 \ud1b5\ud574 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t *\n\t * @param http         {@link HttpSecurity}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tprotected KauthFilterChain(HttpSecurity http, HttpServletResponseUtil responseUtil) {\n\t\tthis.http = http;\n\t\tthis.responseUtil = responseUtil;\n\t}\n\n\t/**\n\t * Spring Security\uac00 Session\uc744 \uc0dd\uc131\ud558\uc9c0\ub3c4 \uc54a\uace0, \uc0ac\uc6a9\ud558\uc9c0\ub3c4 \uc54a\ub294 \uc815\ucc45\uc73c\ub85c \uc124\uc815\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setSessionStateless() throws Exception {\n\t\tthis.http.sessionManagement(sessionManagementConfigurer ->\n\t\t\tsessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n\t}\n\n\t/**\n\t * Spring Security\uc758 HTTP Basic \uc778\uc99d \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setHttpBasicDisable() throws Exception {\n\t\tthis.http.httpBasic(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * Spring Security\uc758 Form Login \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setFormLoginDisable() throws Exception {\n\t\tthis.http.formLogin(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * Spring Security\uc758 CSRF \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setCsrfDisable() throws Exception {\n\t\tthis.http.csrf(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * CORS \uc815\ucc45\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param source {@link CorsConfigurationSource}\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */", " * @author ChangEn Yea\n */\npublic abstract class KauthFilterChain<T> {\n\n\tprotected final HttpSecurity http;\n\n\tprotected final HttpServletResponseUtil responseUtil;\n\n\t/**\n\t * {@link KauthFilterChainBuilder#init()} \ud638\ucd9c\uc744 \ud1b5\ud574 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t *\n\t * @param http         {@link HttpSecurity}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tprotected KauthFilterChain(HttpSecurity http, HttpServletResponseUtil responseUtil) {\n\t\tthis.http = http;\n\t\tthis.responseUtil = responseUtil;\n\t}\n\n\t/**\n\t * Spring Security\uac00 Session\uc744 \uc0dd\uc131\ud558\uc9c0\ub3c4 \uc54a\uace0, \uc0ac\uc6a9\ud558\uc9c0\ub3c4 \uc54a\ub294 \uc815\ucc45\uc73c\ub85c \uc124\uc815\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setSessionStateless() throws Exception {\n\t\tthis.http.sessionManagement(sessionManagementConfigurer ->\n\t\t\tsessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n\t}\n\n\t/**\n\t * Spring Security\uc758 HTTP Basic \uc778\uc99d \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setHttpBasicDisable() throws Exception {\n\t\tthis.http.httpBasic(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * Spring Security\uc758 Form Login \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setFormLoginDisable() throws Exception {\n\t\tthis.http.formLogin(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * Spring Security\uc758 CSRF \ube44\ud65c\uc131\ud654\ud55c\ub2e4.\n\t * @throws Exception\n\t */\n\tprotected void setCsrfDisable() throws Exception {\n\t\tthis.http.csrf(AbstractHttpConfigurer::disable);\n\t}\n\n\t/**\n\t * CORS \uc815\ucc45\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param source {@link CorsConfigurationSource}\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */", "\tpublic abstract T cors(CorsConfigurationSource source) throws Exception;\n\n\t/**\n\t * HTTP \uc694\uccad \ubcc4 \uad8c\ud55c\uc5d0 \ub530\ub978 \uc778\uac00 \uc815\ucc45\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param authorizeHttpRequestsCustomizer {@link  AuthorizeHttpRequestsConfigurer.AuthorizationManagerRequestMatcherRegistry} \uc124\uc815\uc744 \uc704\ud55c {@link Customizer}\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */\n\tpublic abstract T authorizeHttpRequests(\n\t\tCustomizer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry> authorizeHttpRequestsCustomizer)\n\t\tthrows Exception;\n\n\t/**\n\t * {@link Filter}\ub97c beforeFilter \uc55e\uc5d0 \uc801\uc6a9\ud55c\ub2e4.\n\t * @param filter \uc801\uc6a9 \ud560 {@link Filter}\n\t * @param beforeFilter \uc801\uc6a9 \ud560 \ud544\ud130\uac00 \uc774 {@link Filter}\ubcf4\ub2e4 \uba3c\uc800 \uc2e4\ud589\ub428\n\t */\n\tprotected void addFilterBefore(Filter filter, Class<? extends Filter> beforeFilter) {\n\t\tthis.http.addFilterBefore(filter, beforeFilter);\n\t}\n\n\t/**\n\t * {@link SecurityFilterChain}\uc744 \ubc18\ud658\ud558\uace0 {@link KauthFilterChain} \uc124\uc815\uc744 \uc885\ub8cc\ud55c\ub2e4.\n\t * @return {@link SecurityFilterChain}\n\t * @throws Exception\n\t */", "\tpublic abstract T authorizeHttpRequests(\n\t\tCustomizer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry> authorizeHttpRequestsCustomizer)\n\t\tthrows Exception;\n\n\t/**\n\t * {@link Filter}\ub97c beforeFilter \uc55e\uc5d0 \uc801\uc6a9\ud55c\ub2e4.\n\t * @param filter \uc801\uc6a9 \ud560 {@link Filter}\n\t * @param beforeFilter \uc801\uc6a9 \ud560 \ud544\ud130\uac00 \uc774 {@link Filter}\ubcf4\ub2e4 \uba3c\uc800 \uc2e4\ud589\ub428\n\t */\n\tprotected void addFilterBefore(Filter filter, Class<? extends Filter> beforeFilter) {\n\t\tthis.http.addFilterBefore(filter, beforeFilter);\n\t}\n\n\t/**\n\t * {@link SecurityFilterChain}\uc744 \ubc18\ud658\ud558\uace0 {@link KauthFilterChain} \uc124\uc815\uc744 \uc885\ub8cc\ud55c\ub2e4.\n\t * @return {@link SecurityFilterChain}\n\t * @throws Exception\n\t */", "\tpublic SecurityFilterChain build() throws Exception {\n\t\treturn this.http.build();\n\t}\n\n\t/**\n\t * \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\uc758 {@link HttpSecurity}\ub97c \ubc18\ud658\ud558\uace0 {@link KauthFilterChain} \uc124\uc815\uc744 \uc885\ub8cc\ud55c\ub2e4.\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\uc758 {@link HttpSecurity}\n\t * @throws Exception\n\t */\n\tpublic HttpSecurity createConfiguredHttpSecurity() throws Exception {\n\t\treturn this.http;\n\t}\n}\n", "\tpublic HttpSecurity createConfiguredHttpSecurity() throws Exception {\n\t\treturn this.http;\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/KauthFilterChainBuilder.java", "chunked_list": ["package org.swmaestro.kauth.core;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\nimport org.swmaestro.kauth.util.JwtUtil;\n\n/**\n * Kauth\uc758 \ud544\ud130\uccb4\uc778 \uad6c\uc131\uc744 \uc704\ud55c {@link KauthFilterChain}\ub97c \uc0dd\uc131\ud55c\ub2e4.\n * @param <T> {@link KauthFilterChain}\uc758 \uc0c1\uc18d \ud074\ub798\uc2a4", " * Kauth\uc758 \ud544\ud130\uccb4\uc778 \uad6c\uc131\uc744 \uc704\ud55c {@link KauthFilterChain}\ub97c \uc0dd\uc131\ud55c\ub2e4.\n * @param <T> {@link KauthFilterChain}\uc758 \uc0c1\uc18d \ud074\ub798\uc2a4\n * @author ChangEn Yea\n */\npublic abstract class KauthFilterChainBuilder<T extends KauthFilterChain<?>> {\n\n\tprotected final HttpSecurity httpSecurity;\n\n\tprotected final AuthenticationManager authenticationManager;\n\n\tprotected final HttpServletResponseUtil responseUtil;\n\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t *\n\t * @param httpSecurity          {@link HttpSecurity}\n\t * @param authenticationManager {@link JwtUtil}\n\t * @param responseUtil {@link HttpServletResponseUtil}\n\t */\n\tprotected KauthFilterChainBuilder(HttpSecurity httpSecurity,\n\t\tAuthenticationManager authenticationManager, HttpServletResponseUtil responseUtil) {\n\t\tthis.httpSecurity = httpSecurity;\n\t\tthis.authenticationManager = authenticationManager;\n\t\tthis.responseUtil = responseUtil;\n\t}\n\n\t/**\n\t * {@link KauthFilterChain}\uc744 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud558\uace0 \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link KauthFilterChain}\uc744 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */", "\tpublic abstract T init() throws Exception;\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/user/KauthUserDetailsService.java", "chunked_list": ["package org.swmaestro.kauth.core.user;\n\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\n/**\n * Kauth\ub85c {@link org.springframework.security.web.SecurityFilterChain} \uad6c\uc131\uc2dc \uad6c\ud604\uc774 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\n * @author ChangEn Yea\n */\npublic interface KauthUserDetailsService extends UserDetailsService, PostAuthenticationService {\n}\n", "public interface KauthUserDetailsService extends UserDetailsService, PostAuthenticationService {\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/user/PostAuthenticationService.java", "chunked_list": ["package org.swmaestro.kauth.core.user;\n\nimport org.springframework.security.core.userdetails.UserDetails;\n\n/**\n * \uc778\uc99d \uc774\ud6c4 \ucc98\ub9ac\ub97c \uc704\ud55c \uc778\ud130\ud398\uc774\uc2a4\n * @author ChangEn Yea\n */\npublic interface PostAuthenticationService {\n\n\t/**\n\t * \ube44\ubc00\ubc88\ud638 \uc624\ub958\uc2dc \ud638\ucd9c\ub418\ub294 \uba54\uc11c\ub4dc\n\t * @param username\n\t * @return \ube44\ubc00\ubc88\ud638 \ud2c0\ub9b0 \ud69f\uc218. (-1 \uc774\uba74 \ud2c0\ub9b0 \ud69f\uc218\ub97c \uc54c\ub824\uc8fc\uc9c0 \uc54a\ub294\ub2e4)\n\t */\n\tdefault Integer handleBadCredentialsException(String username) {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * \uc778\uc99d \uc131\uacf5 \ud6c4 \ud638\ucd9c\ub418\ub294 \ucd94\uac00\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uba54\uc11c\ub4dc\n\t * @param userDetails {@link UserDetails}\n\t */\n\tdefault void handleSuccessfulAuthentication(UserDetails userDetails) {\n\n\t}\n}\n", "public interface PostAuthenticationService {\n\n\t/**\n\t * \ube44\ubc00\ubc88\ud638 \uc624\ub958\uc2dc \ud638\ucd9c\ub418\ub294 \uba54\uc11c\ub4dc\n\t * @param username\n\t * @return \ube44\ubc00\ubc88\ud638 \ud2c0\ub9b0 \ud69f\uc218. (-1 \uc774\uba74 \ud2c0\ub9b0 \ud69f\uc218\ub97c \uc54c\ub824\uc8fc\uc9c0 \uc54a\ub294\ub2e4)\n\t */\n\tdefault Integer handleBadCredentialsException(String username) {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * \uc778\uc99d \uc131\uacf5 \ud6c4 \ud638\ucd9c\ub418\ub294 \ucd94\uac00\uc801\uc778 \ucc98\ub9ac\ub97c \uc704\ud55c \uba54\uc11c\ub4dc\n\t * @param userDetails {@link UserDetails}\n\t */\n\tdefault void handleSuccessfulAuthentication(UserDetails userDetails) {\n\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/user/RefreshTokenService.java", "chunked_list": ["package org.swmaestro.kauth.core.user;\n\n/**\n * JWT RefreshToken \uc804\ub7b5 \uc0ac\uc6a9\uc2dc \uad6c\ud604\uc774 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\n * @author ChangEn Yea\n */\npublic interface RefreshTokenService {\n\n\t/**\n\t * username\uc73c\ub85c RefreshToken\ub97c \uac00\uc838\uc628\ub2e4.\n\t * @param username\n\t * @return RefreshToken\n\t */\n\tdefault String getRefreshToken(String username) { return null; }\n\n\t/**\n\t * refreshToken\uc744 \uc11c\ubc84\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n\t * @param refreshToken\n\t * @param username\n\t */\n\tdefault void setRefreshToken(String refreshToken, String username) {}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/jwt/JwtFilterChainBuilder.java", "chunked_list": ["package org.swmaestro.kauth.core.jwt;\n\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.stereotype.Component;\nimport org.swmaestro.kauth.authentication.jwt.RefreshTokenManager;\nimport org.swmaestro.kauth.core.KauthFilterChain;\nimport org.swmaestro.kauth.core.KauthFilterChainBuilder;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;", "import org.swmaestro.kauth.core.KauthFilterChainBuilder;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\nimport org.swmaestro.kauth.util.JwtUtil;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * JWT\ub85c \uc778\uc99d/\uc778\uac00\ub97c \ucc98\ub9ac\ud558\ub294 Kauth\uc758 \ud544\ud130\uccb4\uc778 \uad6c\uc131\uc744 \uc704\ud55c {@link KauthFilterChain}\ub97c \uc0dd\uc131\ud55c\ub2e4.\n * @author ChangEn Yea\n */", " * @author ChangEn Yea\n */\n@Lazy\n@Component\npublic class JwtFilterChainBuilder extends KauthFilterChainBuilder<JwtFilterChain> {\n\n\tprivate final JwtUtil jwtUtil;\n\n\tprivate final ObjectMapper objectMapper;\n\n\tprivate final RefreshTokenManager refreshTokenManager;\n\n\t/**\n\t * \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t *\n\t * @param httpSecurity          {@link HttpSecurity}\n\t * @param jwtUtil               {@link JwtUtil}\n\t * @param authenticationManager {@link JwtUtil}\n\t * @param objectMapper          {@link ObjectMapper}\n\t * @param refreshTokenManager {@link RefreshTokenManager}\n\t */\n\tpublic JwtFilterChainBuilder(HttpSecurity httpSecurity, JwtUtil jwtUtil,\n\t\tAuthenticationManager authenticationManager, ObjectMapper objectMapper, HttpServletResponseUtil responseUtil,\n\t\tRefreshTokenManager refreshTokenManager) {\n\t\tsuper(httpSecurity, authenticationManager, responseUtil);\n\t\tthis.jwtUtil = jwtUtil;\n\t\tthis.objectMapper = objectMapper;\n\t\tthis.refreshTokenManager = refreshTokenManager;\n\t}\n\n\t/**\n\t * {@link JwtFilterChain} \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud558\uace0 \ubc18\ud658\ud55c\ub2e4.\n\t * @return {@link JwtFilterChain} \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */\n\t@Override", "\tpublic JwtFilterChain init() throws Exception {\n\t\treturn new JwtFilterChain(httpSecurity, jwtUtil, authenticationManager, refreshTokenManager, objectMapper,\n\t\t\tsuper.responseUtil);\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/core/jwt/JwtFilterChain.java", "chunked_list": ["package org.swmaestro.kauth.core.jwt;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.swmaestro.kauth.authentication.jwt.JwtUsernamePasswordAuthenticationFilter;\nimport org.swmaestro.kauth.authentication.jwt.RefreshTokenManager;\nimport org.swmaestro.kauth.authorization.JwtAuthorizationFilter;", "import org.swmaestro.kauth.authentication.jwt.RefreshTokenManager;\nimport org.swmaestro.kauth.authorization.JwtAuthorizationFilter;\nimport org.swmaestro.kauth.core.KauthFilterChain;\nimport org.swmaestro.kauth.util.HttpServletResponseUtil;\nimport org.swmaestro.kauth.util.JwtUtil;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n * JWT\ub85c \uc778\uc99d/\uc778\uac00\ub97c \ucc98\ub9ac\ud558\ub294 Kauth\uc758 \ud544\ud130\uccb4\uc778\uc744 \uad6c\uc131\ud55c\ub2e4.", "/**\n * JWT\ub85c \uc778\uc99d/\uc778\uac00\ub97c \ucc98\ub9ac\ud558\ub294 Kauth\uc758 \ud544\ud130\uccb4\uc778\uc744 \uad6c\uc131\ud55c\ub2e4.\n * @author ChangEn Yea\n */\npublic class JwtFilterChain extends KauthFilterChain<JwtFilterChain> {\n\n\tprivate final JwtUtil jwtUtil;\n\n\tprivate final AuthenticationManager authenticationManager;\n\n\tprivate final RefreshTokenManager refreshTokenManager;\n\n\tprivate final ObjectMapper objectMapper;\n\n\t/**\n\t * {@link JwtFilterChainBuilder#init()} \ud638\ucd9c\uc744 \ud1b5\ud574 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\t *\n\t * @param http                  {@link HttpSecurity}\n\t * @param jwtUtil               {@link JwtUtil}\n\t * @param authenticationManager {@link AuthenticationManager}\n\t * @param refreshTokenManager {@link RefreshTokenManager}\n\t * @param objectMapper          {@link ObjectMapper}\n\t * @throws Exception\n\t */\n\tprotected JwtFilterChain(HttpSecurity http, JwtUtil jwtUtil,\n\t\tAuthenticationManager authenticationManager, RefreshTokenManager refreshTokenManager,\n\t\tObjectMapper objectMapper, HttpServletResponseUtil responseUtil) throws Exception {\n\n\t\tsuper(http, responseUtil);\n\t\tthis.jwtUtil = jwtUtil;\n\t\tthis.authenticationManager = authenticationManager;\n\t\tthis.refreshTokenManager = refreshTokenManager;\n\t\tthis.objectMapper = objectMapper;\n\n\t\tsuper.setHttpBasicDisable();\n\t\tsuper.setSessionStateless();\n\t\tsuper.setFormLoginDisable();\n\t\tsuper.setCsrfDisable();\n\n\t\t// super.addFilterBefore(new JwtAuthorizationFilter(userDetailsService, jwtUtil, ), RequestCacheAwareFilter.class);\n\t}\n\n\t/**\n\t * CORS \uc815\ucc45\uc744 \uc124\uc815\ud55c\ub2e4.\n\t * @param source {@link CorsConfigurationSource}\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t * @throws Exception\n\t */\n\t@Override", "\tpublic JwtFilterChain cors(CorsConfigurationSource source)\n\t\tthrows Exception {\n\t\tsuper.http.cors(corsConfigurer -> corsConfigurer.configurationSource(source));\n\t\treturn this;\n\t}\n\n\t/**\n\t * \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\uc758 {@link HttpSecurity}\ub97c \ubc18\ud658\ud558\uace0 {@link KauthFilterChain} \uc124\uc815\uc744 \uc885\ub8cc\ud55c\ub2e4.\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\uc758 {@link HttpSecurity}\n\t * @throws Exception\n\t */\n\t@Override", "\tpublic JwtFilterChain authorizeHttpRequests(\n\t\tCustomizer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry> authorizeHttpRequestsCustomizer)\n\t\tthrows Exception {\n\n\t\tsuper.http.authorizeHttpRequests(authorizeHttpRequestsCustomizer);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * UsernamePassword \ub85c\uadf8\uc778 \ubc29\uc2dd\uc744 \ud65c\uc131\ud654 \ud55c\ub2e4. (default endpoint uri: /login)\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t */", "\tpublic JwtFilterChain UsernamePassword() {\n\t\treturn UsernamePassword(\"login\");\n\t}\n\n\t/**\n\t * UsernamePassword \ub85c\uadf8\uc778 \ubc29\uc2dd\uc744 \ud65c\uc131\ud654 \ud55c\ub2e4.\n\t * @param pattern \ub85c\uadf8\uc778 \uc694\uccad endpoint uri\n\t * @return \ud604\uc7ac \uc778\uc2a4\ud134\uc2a4\n\t */\n\tpublic JwtFilterChain UsernamePassword(String pattern) {\n\t\tsuper.addFilterBefore(new JwtUsernamePasswordAuthenticationFilter(\"/\" + pattern,\n\t\t\t\tthis.jwtUtil, this.authenticationManager, this.objectMapper, refreshTokenManager, responseUtil),\n\t\t\tJwtAuthorizationFilter.class);\n\n\t\treturn this;\n\t}\n}\n", "\tpublic JwtFilterChain UsernamePassword(String pattern) {\n\t\tsuper.addFilterBefore(new JwtUsernamePasswordAuthenticationFilter(\"/\" + pattern,\n\t\t\t\tthis.jwtUtil, this.authenticationManager, this.objectMapper, refreshTokenManager, responseUtil),\n\t\t\tJwtAuthorizationFilter.class);\n\n\t\treturn this;\n\t}\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/entity/KauthUserPrincipal.java", "chunked_list": ["package org.swmaestro.kauth.oauth.entity;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\n\nimport java.util.Collection;\nimport java.util.Map;\n\n/**", "\n/**\n * UserPrincipal \uc5d0 \ub3c4\uba54\uc778 \ubaa8\ub378\uc744 \uc8fc\uc785\ud574 \ub3c4\uba54\uc778 \ubaa8\ub378 \uc811\uadfc\uc774 \uc6a9\uc774\ud558\ub3c4\ub85d \ud558\ub294 \ucd94\uc0c1 \ud074\ub798\uc2a4\n * \ucd94\uc0c1 \ud074\ub798\uc2a4 KauthUserPrincipal \uc744 \uc0c1\uc18d\ud558\uace0 \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \ub3c4\uba54\uc778 \ubaa8\ub378\uc5d0 \ub9de\uac8c \uba54\uc18c\ub4dc\ub97c \uc7ac\uc815\uc758\n * <M> : \uc720\uc800(\uba64\ubc84) \ub3c4\uba54\uc778 \ubaa8\ub378\n * @author pyo\n * @param <M>\n */\npublic abstract class KauthUserPrincipal<M> implements OAuth2User, UserDetails {\n\n    private M member;\n    private Map<String, Object> attributes;\n\n    /**\n     * \uc77c\ubc18 \ub85c\uadf8\uc778 \ud588\uc744 \ub54c\uc758 UserPrincipal\n     * @param member\n     */\n    public KauthUserPrincipal(M member) {\n        this.member = member;\n    }\n\n    /**\n     * \uc18c\uc15c \ub85c\uadf8\uc778 \ud588\uc744 \ub54c\uc758 UserPrincipal\n     * @param member\n     * @param attributes\n     */\n    public KauthUserPrincipal(M member, Map<String, Object> attributes) {\n        this.member = member;\n        this.attributes = attributes;\n    }\n}\n", "public abstract class KauthUserPrincipal<M> implements OAuth2User, UserDetails {\n\n    private M member;\n    private Map<String, Object> attributes;\n\n    /**\n     * \uc77c\ubc18 \ub85c\uadf8\uc778 \ud588\uc744 \ub54c\uc758 UserPrincipal\n     * @param member\n     */\n    public KauthUserPrincipal(M member) {\n        this.member = member;\n    }\n\n    /**\n     * \uc18c\uc15c \ub85c\uadf8\uc778 \ud588\uc744 \ub54c\uc758 UserPrincipal\n     * @param member\n     * @param attributes\n     */\n    public KauthUserPrincipal(M member, Map<String, Object> attributes) {\n        this.member = member;\n        this.attributes = attributes;\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/service/KOAuth2UserService.java", "chunked_list": ["package org.swmaestro.kauth.oauth.service;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.swmaestro.kauth.oauth.entity.KauthUserPrincipal;\nimport org.swmaestro.kauth.oauth.info.provider.ProviderType;\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfo;", "import org.swmaestro.kauth.oauth.info.provider.ProviderType;\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfo;\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfoFactory;\n\n/**\n * Provider \ub85c\ubd80\ud130 \ubc1b\uc740 OAuth2 \uc720\uc800(User) \uc815\ubcf4\ub97c \uae30\uc874 \uacc4\uc815(Member)\uacfc \uc5f0\uacc4\ud558\uc5ec \ucc98\ub9ac(\ud68c\uc6d0\uac00\uc785, \uc815\ubcf4 \uac31\uc2e0 \ub4f1)\ud558\ub294 \uc11c\ube44\uc2a4\n * \uc0ac\uc6a9\uc790\ub294 \uc774 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\ub294 Custom \uc11c\ube44\uc2a4 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0\n * processMemberByOAuth2UserInfo \uba54\uc18c\ub4dc\uc5d0 \uae30\uc874 \uacc4\uc815(\uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uba64\ubc84 \ub3c4\uba54\uc778 \ubaa8\ub378)\uacfc \uc5f0\uacc4\ud574\uc11c \ucc98\ub9ac\ud558\ub294 \uae30\ub2a5\uc744 \uad6c\ud604\ud55c\ub2e4.\n * @author pyo\n */", " * @author pyo\n */\n@RequiredArgsConstructor\npublic abstract class KOAuth2UserService extends DefaultOAuth2UserService {\n\n    private final OAuth2UserInfoFactory oAuth2UserInfoFactory;\n\n    @Override\n    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n        OAuth2User user = super.loadUser(userRequest);\n        OAuth2UserInfo oAuth2UserInfo = makeOAuth2UserInfoByProvider(userRequest, user);\n\n        return processMemberByOAuth2UserInfo(oAuth2UserInfo);\n    }\n\n    /**\n     * \ub85c\uadf8\uc778\ud55c Provider \uac00 \ubb34\uc5c7\uc778\uc9c0 \ud310\ubcc4\ud558\uace0 \uadf8\uc5d0 \ub9de\ub294 OAuth2UserInfo \ub97c\n     * processMemberByOAuth2UserInfo \uc5d0 \ub118\uaca8\uc8fc\ub294 \uba54\uc18c\ub4dc\n     * @param userRequest\n     * @param user\n     * @return (OAuth2UserInfo)\n     */\n    private OAuth2UserInfo makeOAuth2UserInfoByProvider(OAuth2UserRequest userRequest, OAuth2User user) {\n        ProviderType providerType = ProviderType.valueOf(\n                userRequest.getClientRegistration().getRegistrationId().toUpperCase());\n\n        return oAuth2UserInfoFactory.getOAuth2UserInfo(providerType, user.getAttributes());\n    }\n\n    /**\n     * OAuth2UserInfo \uc5d0\uc11c \uc5bb\uc740 \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \uae30\uc874 \uacc4\uc815(Member)\uacfc \uc5f0\uacc4\ud558\uc5ec \ucc98\ub9ac(\ud68c\uc6d0\uac00\uc785, \uc815\ubcf4 \uac31\uc2e0 \ub4f1)\ud558\ub294 \uba54\uc18c\ub4dc\n     * return \uc608\uc2dc: return new KauthUserPrincipal(member, oAuth2UserInfo.getAttributes());\n     * @param oAuth2UserInfo\n     * @return (KauthUserPrincipal) \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uba64\ubc84 \ubaa8\uba54\uc778 \ubaa8\ub378\uacfc OAuth2UserInfo\uc758 attributes\uc744 \uc8fc\uc785\ud55c \uac1d\uccb4 \ubc18\ud658\n     */", "    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n        OAuth2User user = super.loadUser(userRequest);\n        OAuth2UserInfo oAuth2UserInfo = makeOAuth2UserInfoByProvider(userRequest, user);\n\n        return processMemberByOAuth2UserInfo(oAuth2UserInfo);\n    }\n\n    /**\n     * \ub85c\uadf8\uc778\ud55c Provider \uac00 \ubb34\uc5c7\uc778\uc9c0 \ud310\ubcc4\ud558\uace0 \uadf8\uc5d0 \ub9de\ub294 OAuth2UserInfo \ub97c\n     * processMemberByOAuth2UserInfo \uc5d0 \ub118\uaca8\uc8fc\ub294 \uba54\uc18c\ub4dc\n     * @param userRequest\n     * @param user\n     * @return (OAuth2UserInfo)\n     */\n    private OAuth2UserInfo makeOAuth2UserInfoByProvider(OAuth2UserRequest userRequest, OAuth2User user) {\n        ProviderType providerType = ProviderType.valueOf(\n                userRequest.getClientRegistration().getRegistrationId().toUpperCase());\n\n        return oAuth2UserInfoFactory.getOAuth2UserInfo(providerType, user.getAttributes());\n    }\n\n    /**\n     * OAuth2UserInfo \uc5d0\uc11c \uc5bb\uc740 \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \uae30\uc874 \uacc4\uc815(Member)\uacfc \uc5f0\uacc4\ud558\uc5ec \ucc98\ub9ac(\ud68c\uc6d0\uac00\uc785, \uc815\ubcf4 \uac31\uc2e0 \ub4f1)\ud558\ub294 \uba54\uc18c\ub4dc\n     * return \uc608\uc2dc: return new KauthUserPrincipal(member, oAuth2UserInfo.getAttributes());\n     * @param oAuth2UserInfo\n     * @return (KauthUserPrincipal) \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uba64\ubc84 \ubaa8\uba54\uc778 \ubaa8\ub378\uacfc OAuth2UserInfo\uc758 attributes\uc744 \uc8fc\uc785\ud55c \uac1d\uccb4 \ubc18\ud658\n     */", "    public abstract KauthUserPrincipal processMemberByOAuth2UserInfo(OAuth2UserInfo oAuth2UserInfo);\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/OAuth2UserInfoFactory.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info;\n\nimport org.springframework.stereotype.Component;\nimport org.swmaestro.kauth.oauth.info.provider.ProviderType;\nimport org.swmaestro.kauth.oauth.info.provider.GoogleOAuth2UserInfo;\nimport org.swmaestro.kauth.oauth.info.provider.KakaoOAuth2UserInfo;\nimport org.swmaestro.kauth.oauth.info.provider.NaverOAuth2UserInfo;\n\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * OAuth Provider \ubcc4\ub85c \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \ubc18\ud658\ud558\ub294 Factory Class\n * @author pyo\n */\n@Component\npublic class OAuth2UserInfoFactory {\n    public OAuth2UserInfo getOAuth2UserInfo(ProviderType providerType, Map<String, Object> attributes) {\n        switch (providerType) {\n            case GOOGLE: return new GoogleOAuth2UserInfo(attributes);\n            case NAVER: return new NaverOAuth2UserInfo(attributes);\n            case KAKAO: return new KakaoOAuth2UserInfo(attributes);\n            default: throw new IllegalArgumentException(\"Unsupported Provider Type\");\n        }\n    }\n}\n", "    public OAuth2UserInfo getOAuth2UserInfo(ProviderType providerType, Map<String, Object> attributes) {\n        switch (providerType) {\n            case GOOGLE: return new GoogleOAuth2UserInfo(attributes);\n            case NAVER: return new NaverOAuth2UserInfo(attributes);\n            case KAKAO: return new KakaoOAuth2UserInfo(attributes);\n            default: throw new IllegalArgumentException(\"Unsupported Provider Type\");\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/OAuth2UserInfo.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info;\n\nimport java.util.Map;\n\n/**\n * OAuth2 \ub85c\uadf8\uc778\uc73c\ub85c \uc5bb\uc740 \uc0ac\uc6a9\uc790 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0b8 abstract class\n * @author pyo\n */\npublic abstract class OAuth2UserInfo {\n    protected Map<String, Object> attributes;\n\n    public OAuth2UserInfo(Map<String, Object> attributes) {\n        this.attributes = attributes;\n    }\n\n    public Map<String, Object> getAttributes() {\n        return attributes;\n    }\n", "public abstract class OAuth2UserInfo {\n    protected Map<String, Object> attributes;\n\n    public OAuth2UserInfo(Map<String, Object> attributes) {\n        this.attributes = attributes;\n    }\n\n    public Map<String, Object> getAttributes() {\n        return attributes;\n    }\n", "    public abstract String getId();\n\n    public abstract String getName();\n\n    public abstract String getEmail();\n\n    public abstract String getImageUrl();\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/provider/GoogleOAuth2UserInfo.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info.provider;\n\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfo;\n\nimport java.util.Map;\n\n/**\n * \uad6c\uae00 OAuth2 \ub85c\uadf8\uc778\uc744 \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\ub294 \uc720\uc800 \uc815\ubcf4 \uad6c\ud604\uccb4\n * @author pyo\n */\npublic class GoogleOAuth2UserInfo extends OAuth2UserInfo {\n\n    public GoogleOAuth2UserInfo(Map<String, Object> attributes) {\n        super(attributes);\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ub4f1\ub85d\ubc88\ud638 \ubc18\ud658\n     * @return (String) \"12345678\"\n     */\n    @Override", " * @author pyo\n */\npublic class GoogleOAuth2UserInfo extends OAuth2UserInfo {\n\n    public GoogleOAuth2UserInfo(Map<String, Object> attributes) {\n        super(attributes);\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ub4f1\ub85d\ubc88\ud638 \ubc18\ud658\n     * @return (String) \"12345678\"\n     */\n    @Override", "    public String getId() {\n        return (String) attributes.get(\"id\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc774\ub984 \ubc18\ud658(\uc2e4\uc81c \uc774\ub984\uc774 \uc544\ub2d0 \uc218 \uc788\uc74c)\n     * @return (String) \"\uae38\ub3d9\uc774\"\n     */\n    @Override\n    public String getName() {\n        return (String) attributes.get(\"name\");\n    }\n\n\n    /**\n     * \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790 \uc774\uba54\uc77c\uc744 \ubc18\ud658\n     * @return (String) \"example@ex.com\"\n     */\n    @Override", "    public String getName() {\n        return (String) attributes.get(\"name\");\n    }\n\n\n    /**\n     * \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790 \uc774\uba54\uc77c\uc744 \ubc18\ud658\n     * @return (String) \"example@ex.com\"\n     */\n    @Override\n    public String getEmail() {\n        return (String) attributes.get(\"email\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0 URL \ubc18\ud658\n     * \uae30\ubcf8 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0\uc77c \uacbd\uc6b0 \uc774\ub984 \uccab \uae00\uc790\ub85c \ub41c \ub79c\ub364 \uc774\ubbf8\uc9c0 URL\uc774 \ubc18\ud658\ub41c\ub2e4.\n     * @return (String) \"http://yyy.google.com/.../img_640x640.jpg\"\n     */\n    @Override", "    public String getEmail() {\n        return (String) attributes.get(\"email\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0 URL \ubc18\ud658\n     * \uae30\ubcf8 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0\uc77c \uacbd\uc6b0 \uc774\ub984 \uccab \uae00\uc790\ub85c \ub41c \ub79c\ub364 \uc774\ubbf8\uc9c0 URL\uc774 \ubc18\ud658\ub41c\ub2e4.\n     * @return (String) \"http://yyy.google.com/.../img_640x640.jpg\"\n     */\n    @Override\n    public String getImageUrl() {\n        return (String) attributes.get(\"picture\");\n    }\n}\n", "    public String getImageUrl() {\n        return (String) attributes.get(\"picture\");\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/provider/KakaoOAuth2UserInfo.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info.provider;\n\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfo;\n\nimport java.util.Map;\n\n\n/**\n * \uce74\uce74\uc624 OAuth2 \ub85c\uadf8\uc778\uc744 \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\ub294 \uc720\uc800 \uc815\ubcf4 \uad6c\ud604\uccb4\n * @author pyo", " * \uce74\uce74\uc624 OAuth2 \ub85c\uadf8\uc778\uc744 \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\ub294 \uc720\uc800 \uc815\ubcf4 \uad6c\ud604\uccb4\n * @author pyo\n */\npublic class KakaoOAuth2UserInfo extends OAuth2UserInfo {\n\n    private Map<String, Object> kakaoAccount;\n    private Map<String, Object> profile;\n\n    public KakaoOAuth2UserInfo(Map<String, Object> attributes) {\n        super(attributes);\n        this.kakaoAccount = (Map) attributes.get(\"kakao_account\");\n        this.profile = (Map) kakaoAccount.get(\"profile\");\n    }\n\n    /**\n     * \uce74\uce74\uc624\uc5d0 \ub4f1\ub85d\ub41c \ud68c\uc6d0\ubc88\ud638 \ubc18\ud658\n     * @return (String) \"q1w2e3r4\"\n     */\n    @Override", "    public String getId() {\n        return (String) attributes.get(\"id\");\n    }\n\n    /**\n     * \uce74\uce74\uc624\uc5d0 \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790\uc758 \uc2e4\uc81c \uc774\ub984\uc744 \ubc18\ud658\n     * @return (String) \"\ud64d\uae38\ub3d9\"\n     */\n    @Override\n    public String getName() {\n        boolean nameNeedsAgreement = (boolean) kakaoAccount.get(\"name_needs_agreement\");", "    public String getName() {\n        boolean nameNeedsAgreement = (boolean) kakaoAccount.get(\"name_needs_agreement\");\n        if (nameNeedsAgreement) {\n            return (String) kakaoAccount.get(\"name\");\n        }\n        return null;\n    }\n\n    /**\n     * \uce74\uce74\uc624\uacc4\uc815 \uc774\uba54\uc77c \ubc18\ud658\n     * @return (String) \"example@ex.com\"\n     */\n    @Override", "    public String getEmail() {\n        boolean emailNeedsAgreement = (boolean) kakaoAccount.get(\"email_needs_agreement\");\n        if (emailNeedsAgreement) {\n            boolean isEmailValid = (boolean) kakaoAccount.get(\"is_email_valid\");\n            boolean isEmailVerified = (boolean) kakaoAccount.get(\"is_email_verified\");\n            if (isEmailValid && isEmailVerified) {\n                return (String) kakaoAccount.get(\"email\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \uce74\uce74\uc624 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0 URL \ubc18\ud658\n     * \uae30\ubcf8 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0\uc77c \uacbd\uc6b0 null \ubc18\ud658\n     * @return (String) \"http://yyy.kakao.com/dn/.../img_640x640.jpg\"\n     */\n    @Override", "    public String getImageUrl() {\n        boolean profileImageNeedsAgreement = (boolean) kakaoAccount.get(\"profile_image_needs_agreement\");\n        if (profileImageNeedsAgreement) {\n            if (!(boolean) profile.get(\"is_default_image\")) {\n                return (String) profile.get(\"profile_image_url\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \uce74\uce74\uc624 \ud504\ub85c\ud544 \uc378\ub124\uc77c \uc774\ubbf8\uc9c0 URL \ubc18\ud658 (\uc791\uc740 \ud06c\uae30)\n     * \uae30\ubcf8 \ud504\ub85c\ud544 \uc774\ubbf8\uc9c0\uc77c \uacbd\uc6b0 null \ubc18\ud658\n     * @return (String) \"http://yyy.kakao.com/.../img_110x110.jpg\"\n     */", "    public String getThumbnailImageUrl() {\n        boolean profileImageNeedsAgreement = (boolean) kakaoAccount.get(\"profile_image_needs_agreement\");\n        if (profileImageNeedsAgreement) {\n            if (!(boolean) profile.get(\"is_default_image\")) {\n                return (String) profile.get(\"thumbnail_image_url\");\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790\uac00 \uc124\uc815\ud55c \uce74\uce74\uc624 \ub2c9\ub124\uc784 \ubc18\ud658\n     * @return (String) \"\uae38\ub3d9\uc774\"\n     */", "    public String getNickname() {\n        boolean profileNicknameNeedsAgreement = (boolean) kakaoAccount.get(\"profile_nickname_needs_agreement\");\n        if (profileNicknameNeedsAgreement) {\n            return (String) profile.get(\"nickname\");\n        }\n        return null;\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790\uc758 \uc5f0\ub839\ub300\ub97c \ubc18\ud658\n     * 20\ub300 -> \"20~29\"\n     * @return (String) \"20~29\"\n     */", "    public String getAgeRange() {\n        boolean ageRangeNeedsAgreement = (boolean) kakaoAccount.get(\"age_range_needs_agreement\");\n        if (ageRangeNeedsAgreement) {\n            return (String) kakaoAccount.get(\"age_range\");\n        }\n        return null;\n    }\n\n    /**\n     * \uc0dd\uc77c\uc744 \"MMDD\" \ud615\ud0dc\ub85c \ubc18\ud658\n     * @return (String) \"1130\"\n     */", "    public String getBirthday() {\n        boolean birthdayNeedsAgreement = (boolean) kakaoAccount.get(\"birthday_needs_agreement\");\n        if (birthdayNeedsAgreement) {\n            return (String) kakaoAccount.get(\"birthday\");\n        }\n        return null;\n    }\n\n    /**\n     * \uc0dd\uc77c \ud0c0\uc785\uc744 \ubc18\ud658\n     * SOLAR(\uc591\ub825) \ub610\ub294 LUNAR(\uc74c\ub825)\n     * @return (String) \"SOLAR\"\n     */", "    public String getBirthdayType() {\n        boolean birthdayNeedsAgreement = (boolean) kakaoAccount.get(\"birthday_needs_agreement\");\n        if (birthdayNeedsAgreement) {\n            return (String) kakaoAccount.get(\"birthday_type\");\n        }\n        return null;\n    }\n\n    /**\n     * \ucd9c\uc0dd\uc5f0\ub3c4\ub97c \"YYYY\" \ud615\ud0dc\ub85c \ubc18\ud658\n     * @return (String) \"2022\"\n     */", "    public String getBirthyear() {\n        boolean birthyearNeedsAgreement = (boolean) kakaoAccount.get(\"birthyear_needs_agreement\");\n        if (birthyearNeedsAgreement) {\n            return (String) kakaoAccount.get(\"birthyear\");\n        }\n        return null;\n    }\n\n    /**\n     * \uc131\ubcc4\uc744 \ubc18\ud658\n     * female(\uc5ec\uc790) \ub610\ub294 male(\ub0a8\uc790)\n     * @return (String) \"female\"\n     */", "    public String getGender() {\n        boolean genderNeedsAgreement = (boolean) kakaoAccount.get(\"gender_needs_agreement\");\n        if (genderNeedsAgreement) {\n            return (String) kakaoAccount.get(\"gender\");\n        }\n        return null;\n    }\n\n    /**\n     * \uc804\ud654\ubc88\ud638 \ubc18\ud658\n     * @return (String) \"+82 010-1234-5678\"\n     */", "    public String getPhoneNumber() {\n        boolean phoneNumberNeedsAgreement = (boolean) kakaoAccount.get(\"phone_number_needs_agreement\");\n        if (phoneNumberNeedsAgreement) {\n            return (String) kakaoAccount.get(\"phone_number\");\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/provider/ProviderType.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info.provider;\n\n/**\n * \uc81c\uacf5\ud558\ub294 OAuth2 \uc11c\ube44\uc2a4 Provider Enum\n * @author pyo\n */\npublic enum ProviderType {\n    GOOGLE, NAVER, KAKAO\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/oauth/info/provider/NaverOAuth2UserInfo.java", "chunked_list": ["package org.swmaestro.kauth.oauth.info.provider;\n\nimport org.swmaestro.kauth.oauth.info.OAuth2UserInfo;\n\nimport java.util.Map;\n\n/**\n * \ub124\uc774\ubc84 OAuth2 \ub85c\uadf8\uc778\uc744 \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\ub294 \uc720\uc800 \uc815\ubcf4 \uad6c\ud604\uccb4\n * @author pyo\n */\npublic class NaverOAuth2UserInfo extends OAuth2UserInfo {\n\n    Map<String, Object> response;\n\n    public NaverOAuth2UserInfo(Map<String, Object> attributes) {\n        super(attributes);\n        response = (Map<String, Object>) attributes.get(\"response\");\n    }\n\n    /**\n     * \ub124\uc774\ubc84\uc5d0 \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790 \ud68c\uc6d0 \ubc88\ud638 \ubc18\ud658\n     * @return (String) \"12345678\"\n     */\n    @Override", " * @author pyo\n */\npublic class NaverOAuth2UserInfo extends OAuth2UserInfo {\n\n    Map<String, Object> response;\n\n    public NaverOAuth2UserInfo(Map<String, Object> attributes) {\n        super(attributes);\n        response = (Map<String, Object>) attributes.get(\"response\");\n    }\n\n    /**\n     * \ub124\uc774\ubc84\uc5d0 \ub4f1\ub85d\ub41c \uc0ac\uc6a9\uc790 \ud68c\uc6d0 \ubc88\ud638 \ubc18\ud658\n     * @return (String) \"12345678\"\n     */\n    @Override", "    public String getId() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"id\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc2e4\uc81c \uc774\ub984 \ubc18\ud658\n     * @return (String) \"\ud64d\uae38\ub3d9\"\n     */\n    @Override", "    public String getName() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"name\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790\uac00 \ub124\uc774\ubc84\uc5d0 \ub4f1\ub85d\ud55c \uc774\uba54\uc77c \ubc18\ud658\n     * @return (String) \"example@ex.com\"\n     */\n    @Override", "    public String getEmail() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"email\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ud504\ub85c\ud544 \uc0ac\uc9c4 URL \ubc18\ud658\n     * @return (String) \"https://ssl.pstatic.net/.../nodata_33x33.gif\"\n     */\n    @Override", "    public String getImageUrl() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"profile_image\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790\uac00 \ub4f1\ub85d\ud55c \ub124\uc774\ubc84 \ub2c9\ub124\uc784 \ubc18\ud658\n     * \ub2c9\ub124\uc784\uc744 \ub4f1\ub85d\ud558\uc9c0 \uc54a\uc558\uc73c\uba74 \"id***\" \ud615\ud0dc\ub85c \ubc18\ud658\n     * @return (String) \"\uae38\ub3d9\uc774\"\n     */", "    public String getNickname() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"nickname\");\n    }\n\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc5f0\ub839\ub300\ub97c \ubc18\ud658\n     * 20\ub300 -> \"20-29\"\n     * @return (String) \"20-29\"\n     */", "    public String getAgeRange() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"age\");\n    }\n\n    /**\n     * \uc131\ubcc4 \ubc18\ud658\n     * F(\uc5ec\uc790), M(\ub0a8\uc790), U(\ud655\uc778\ubd88\uac00)\n     * @return (String) \"F\"\n     */", "    public String getGender() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"gender\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \uc0dd\uc77c\uc744 \"MM-DD\" \ud615\ud0dc\ub85c \ubc18\ud658\n     * @return (String) \"10-01\"\n     */", "    public String getBirthday() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"birthday\");\n    }\n\n    /**\n     * \ucd9c\uc0dd \uc5f0\ub3c4\ub97c \"YYYY\" \ud615\ud0dc\ub85c \ubc18\ud658\n     * @return (String) \"1999\"\n     */", "    public String getBirthyear() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"birthyear\");\n    }\n\n    /**\n     * \uc0ac\uc6a9\uc790 \ud734\ub300\ud3f0 \ubc88\ud638 \ubc18\ud658\n     * @return (String) \"010-1234-5678\"\n     */", "    public String getPhoneNumber() {\n        if (response == null) {\n            return null;\n        }\n\n        return (String) response.get(\"mobile\");\n    }\n}\n"]}
{"filename": "src/main/java/org/swmaestro/kauth/dto/UsernamePasswordLoginRequest.java", "chunked_list": ["package org.swmaestro.kauth.dto;\n\n/**\n * username + password \ub85c\uadf8\uc778 \uc694\uccad body DTO\n * @author ChangEn Yea\n */\npublic class UsernamePasswordLoginRequest {\n\n\tprivate String username;\n\n\tprivate String password;\n\n\tpublic UsernamePasswordLoginRequest() {\n\t}\n", "\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n", "\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n}\n"]}
