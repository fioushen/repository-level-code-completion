{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/AbstractGeneratorTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Optional;\nimport org.opendatadiscovery.oddrn.exception.GenerateException;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class AbstractGeneratorTest {\n    public void shouldGeneratePath(final OddrnPath path, final String expected)\n            throws GenerateException, IllegalAccessException,\n            InvocationTargetException, NoSuchMethodException {\n        final String oddrn = path.oddrn();\n        assertEquals(expected, oddrn);\n        final Optional<OddrnPath> parse = Generator.getInstance().parse(oddrn);\n        assertNotNull(parse);\n        assertEquals(path, parse.get());\n    }\n", "    public void shouldFail(final OddrnPath path, final Class<? extends Exception> exception) {\n        assertThrows(exception, path::oddrn);\n    }\n\n    public void shouldParse(final String oddrn, final OddrnPath expected) throws InvocationTargetException,\n            IllegalAccessException, NoSuchMethodException {\n        final Optional<OddrnPath> parsed = Generator.getInstance().parse(oddrn);\n        assertEquals(expected, parsed.get());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/JdbcProcessorsTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.model.PostgreSqlPath;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class JdbcProcessorsTest {\n    @Test\n    public void testJdbcGenerator()  {\n        final String url = new JdbcProcessors().url(\n            PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"test\")\n                .build(),\n            5432\n        );\n\n        assertEquals(\"jdbc:postgresql://1.1.1.1:5432/test\", url);\n    }\n}", "    public void testJdbcGenerator()  {\n        final String url = new JdbcProcessors().url(\n            PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"test\")\n                .build(),\n            5432\n        );\n\n        assertEquals(\"jdbc:postgresql://1.1.1.1:5432/test\", url);\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/JdbcUrlParserTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.model.HivePath;\nimport org.opendatadiscovery.oddrn.model.MysqlPath;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\nimport org.opendatadiscovery.oddrn.model.PostgreSqlPath;\nimport org.opendatadiscovery.oddrn.model.SnowflakePath;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;", "\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class JdbcUrlParserTest {\n    @Test\n    public void testPostgreSqlJdbcUrlParser() {\n        test(\n            \"jdbc:postgresql://localhost/dvdrental\",\n            PostgreSqlPath.builder()\n                .host(\"localhost\")\n                .database(\"dvdrental\")\n                .build()\n        );\n\n        test(\n            \"jdbc:postgresql://localhost/dvdrental?sslmode=true\",\n            PostgreSqlPath.builder()\n                .host(\"localhost\")\n                .database(\"dvdrental\")\n                .build()\n        );\n    }\n\n    @Test", "    public void testMysqlJdbcUrlParser() {\n        test(\n            \"jdbc:mysql://user:password@localhost/dvdrental?sslmode=true\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"dvdrental\")\n                .build()\n        );\n\n        test(\n            \"jdbc:mysql://user:password@localhost/?sslmode=true\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"user\")\n                .build()\n        );\n\n        test(\n            \"jdbc:mysql://localhost/dvdrental\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"dvdrental\")\n                .build()\n        );\n\n        test(\n            \"jdbc:mysql://localhost/dvdrental?sslmode=true\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"dvdrental\")\n                .build()\n        );\n\n        testWithUser(\n            \"jdbc:mysql://localhost\", \"admin\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"admin\")\n                .build()\n        );\n\n        testWithUser(\n            \"jdbc:mysql://localhost?sslmode=true\", \"admin\",\n            MysqlPath.builder()\n                .host(\"localhost\")\n                .database(\"admin\")\n                .build()\n        );\n    }\n\n    @Test", "    public void testSnowflake() {\n        test(\n            \"jdbc:snowflake://myorganization-myaccount.snowflakecomputing.com\",\n            SnowflakePath.builder()\n                .account(\"myorganization-myaccount\")\n                .build()\n        );\n\n        test(\n            \"jdbc:snowflake://myorganization-myaccount.snowflakecomputing.com?params=1\",\n            SnowflakePath.builder()\n                .account(\"myorganization-myaccount\")\n                .build()\n        );\n    }\n\n    @Test", "    public void testHive() {\n        test(\n            \"jdbc:hive2://m1.hdp.local:10011/dbname;transportMode=http;httpPath=cliservice\",\n            HivePath.builder()\n                .host(\"m1.hdp.local\")\n                .database(\"dbname\")\n                .build()\n        );\n\n        test(\n            \"jdbc:hive2://m1.hdp.local:2181,m2.hdp.local:2181,m3.hdp.local:2181/database\",\n            HivePath.builder()\n                .host(\"m1.hdp.local,m2.hdp.local,m3.hdp.local\")\n                .database(\"database\")\n                .build()\n        );\n    }\n\n    private void test(final String url, final OddrnPath expected) {\n        final OddrnPath path = new JdbcUrlParser().parse(url);\n        assertNotNull(path);\n        assertEquals(expected, path);\n    }\n\n    private void testWithUser(final String url, final String user, final OddrnPath expected) {\n        final OddrnPath path = new JdbcUrlParser().parse(url, user);\n        assertNotNull(path);\n        assertEquals(expected, path);\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/DockerMicroservicePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\n\npublic class DockerMicroservicePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateImagePath() throws Exception {\n        shouldGeneratePath(\n            DockerMicroservicePath.builder()\n                .image(\"ghcr.io/opendatadiscovery/odd-platform:latest\")\n                .build(),\n            \"//microservice/docker/image/ghcr.io\\\\\\\\opendatadiscovery\\\\\\\\odd-platform:latest\"\n        );\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/HivePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class HivePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            HivePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//hive/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            HivePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//hive/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            HivePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .schema(\"public\")\n                .table(\"test\")\n                .column(\"id\")\n                .build(),\n            \"//hive/host/1.1.1.1/databases/dbname/schemas/public/tables/test/columns/id\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            HivePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .table(\"test\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/KafkaConnectorPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class KafkaConnectorPathTest extends AbstractGeneratorTest {\n\n    @Test\n    public void shouldGenerateConnectorPath() throws Exception {\n        shouldGeneratePath(\n            KafkaConnectorPath.builder()\n                .host(\"1.1.1.1\")\n                .connector(\"sink\")\n                .build(),\n            \"//kafkaconnect/host/1.1.1.1/connectors/sink\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateConnectorPath() throws Exception {\n        shouldGeneratePath(\n            KafkaConnectorPath.builder()\n                .host(\"1.1.1.1\")\n                .connector(\"sink\")\n                .build(),\n            \"//kafkaconnect/host/1.1.1.1/connectors/sink\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            KafkaConnectorPath.builder()\n                .connector(\"sink\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/PostgreSqlTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Optional;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.Generator;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n", "import org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class PostgreSqlTest extends AbstractGeneratorTest {\n\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//postgresql/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .schema(\"public\")\n                .table(\"test\")\n                .column(\"id\")\n                .build(),\n            \"//postgresql/host/1.1.1.1/databases/dbname/schemas/public/tables/test/columns/id\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .table(\"test\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n\n    @Test", "    public void shouldParsePartialOddrn()\n            throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        final PostgreSqlPath expected = PostgreSqlPath.builder().build();\n        shouldParse(\"//postgresql/\", expected);\n    }\n\n    @Test\n    public void shouldParsePartialOddrnWithHost()\n            throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        final PostgreSqlPath expected = PostgreSqlPath.builder()\n                .host(\"1.1.1.1\")\n                .build();\n        shouldParse(\"//postgresql/host/1.1.1.1/dbname\", expected);\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/AirflowPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class AirflowPathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDagPath() throws Exception {\n        shouldGeneratePath(\n            AirflowPath.builder()\n                .host(\"1.1.1.1\")\n                .dag(\"etl\")\n                .build(),\n            \"//airflow/host/1.1.1.1/dags/etl\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDagPath() throws Exception {\n        shouldGeneratePath(\n            AirflowPath.builder()\n                .host(\"1.1.1.1\")\n                .dag(\"etl\")\n                .build(),\n            \"//airflow/host/1.1.1.1/dags/etl\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateTaskPath() throws Exception {\n        shouldGeneratePath(\n            AirflowPath.builder()\n                .host(\"1.1.1.1\")\n                .dag(\"etl\")\n                .task(\"transform\")\n                .build(),\n            \"//airflow/host/1.1.1.1/dags/etl/tasks/transform\"\n        );\n    }\n\n    @Test", "    public void shouldFailRunPath() {\n        shouldFail(\n            AirflowPath.builder()\n                .dag(\"etl\")\n                .run(UUID.randomUUID().toString())\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/AwsS3PathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class AwsS3PathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateBucketPath() throws Exception {\n        shouldGeneratePath(\n                AwsS3Path.builder()\n                        .bucket(\"my_bucket\")\n                        .build(),\n                \"//s3/cloud/aws/buckets/my_bucket\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateBucketPath() throws Exception {\n        shouldGeneratePath(\n                AwsS3Path.builder()\n                        .bucket(\"my_bucket\")\n                        .build(),\n                \"//s3/cloud/aws/buckets/my_bucket\"\n        );\n    }\n\n    @Test\n    public void shouldGenerateKeyPath() throws Exception {\n        shouldGeneratePath(\n                AwsS3Path.builder()\n                        .bucket(\"my_bucket\")\n                        .key(\"file1\")\n                        .build(),\n                \"//s3/cloud/aws/buckets/my_bucket/keys/file1\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateKeyPath() throws Exception {\n        shouldGeneratePath(\n                AwsS3Path.builder()\n                        .bucket(\"my_bucket\")\n                        .key(\"file1\")\n                        .build(),\n                \"//s3/cloud/aws/buckets/my_bucket/keys/file1\"\n        );\n    }\n\n    @Test", "    public void shouldGeneratePathKeyPath() throws Exception {\n        shouldGeneratePath(\n                AwsS3Path.builder()\n                        .bucket(\"my_bucket\")\n                        .key(\"path/to/file1.csv\")\n                        .build(),\n                \"//s3/cloud/aws/buckets/my_bucket/keys/path\\\\\\\\to\\\\\\\\file1.csv\"\n        );\n    }\n\n    @Test", "    public void shouldFailKeyPath() {\n        shouldFail(\n                AwsS3Path.builder()\n                        .key(UUID.randomUUID().toString())\n                        .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/SnowflakeTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class SnowflakeTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            SnowflakePath.builder()\n                .account(\"wh\")\n                .database(\"dbname\")\n                .build(),\n            \"//snowflake/account/wh/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            SnowflakePath.builder()\n                .account(\"wh\")\n                .database(\"dbname\")\n                .build(),\n            \"//snowflake/account/wh/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            SnowflakePath.builder()\n                .account(\"wh\")\n                .database(\"dbname\")\n                .schema(\"test\")\n                .table(\"test\")\n                .column(\"id\")\n                .build(),\n            \"//snowflake/account/wh/databases/dbname/schemas/test/tables/test/columns/id\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            SnowflakePath.builder()\n                .account(\"wh\")\n                .database(\"dbname\")\n                .table(\"test\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/ClickhousePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\n\npublic class ClickhousePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabaseName() throws Exception {\n        shouldGeneratePath(\n            ClickhousePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//clickhouse/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateTableName1() throws Exception {\n        shouldGeneratePath(\n            ClickhousePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .table(\"table\")\n                .build(),\n            \"//clickhouse/host/1.1.1.1/databases/dbname/tables/table\"\n        );\n\n        shouldGeneratePath(\n            ClickhousePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .view(\"table\")\n                .build(),\n            \"//clickhouse/host/1.1.1.1/databases/dbname/views/table\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnName() throws Exception {\n        shouldGeneratePath(\n            ClickhousePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .table(\"table\")\n                .tableColumn(\"col1\")\n                .build(),\n            \"//clickhouse/host/1.1.1.1/databases/dbname/tables/table/tables_columns/col1\"\n        );\n\n        shouldGeneratePath(\n            ClickhousePath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .view(\"table\")\n                .viewColumn(\"col1\")\n                .build(),\n            \"//clickhouse/host/1.1.1.1/databases/dbname/views/table/views_columns/col1\"\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/SparkPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class SparkPathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateJobPath() throws Exception {\n        shouldGeneratePath(\n            SparkPath.builder()\n                .host(\"127.0.0.1\")\n                .job(\"etl\")\n                .build(),\n            \"//spark/host/127.0.0.1/jobs/etl\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateJobPath() throws Exception {\n        shouldGeneratePath(\n            SparkPath.builder()\n                .host(\"127.0.0.1\")\n                .job(\"etl\")\n                .build(),\n            \"//spark/host/127.0.0.1/jobs/etl\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateRunPath() throws Exception {\n        shouldGeneratePath(\n            SparkPath.builder()\n                .host(\"127.0.0.1\")\n                .job(\"etl\")\n                .run(\"affjfkhx2p\")\n                .build(),\n            \"//spark/host/127.0.0.1/jobs/etl/runs/affjfkhx2p\"\n        );\n    }\n\n    @Test", "    public void shouldFailRunPath() {\n        shouldFail(\n            SparkPath.builder()\n                .host(\"127.0.0.1\")\n                .run(UUID.randomUUID().toString())\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/HttpServicePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class HttpServicePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            HttpServicePath.builder()\n                .host(\"1.1.1.1\")\n                .method(\"GET\")\n                .path(\"/entites/1\")\n                .build(),\n            \"//http/host/1.1.1.1/methods/GET/paths/\\\\\\\\entites\\\\\\\\1\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            HttpServicePath.builder()\n                .host(\"1.1.1.1\")\n                .method(\"GET\")\n                .path(\"/entites/1\")\n                .build(),\n            \"//http/host/1.1.1.1/methods/GET/paths/\\\\\\\\entites\\\\\\\\1\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            HttpServicePath.builder()\n                .host(\"1.1.1.1\")\n                .path(\"/entites/1\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/ODDPlatformDataEntityGroupPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class ODDPlatformDataEntityGroupPathTest extends AbstractGeneratorTest {\n\n    @Test\n    public void shouldGenerateDataEntityGroupPath() throws Exception {\n        shouldGeneratePath(\n                ODDPlatformDataEntityGroupPath.builder()\n                        .id(1L)\n                        .build(),\n                \"//oddplatform_deg/id/1\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDataEntityGroupPath() throws Exception {\n        shouldGeneratePath(\n                ODDPlatformDataEntityGroupPath.builder()\n                        .id(1L)\n                        .build(),\n                \"//oddplatform_deg/id/1\"\n        );\n    }\n\n    @Test\n    public void shouldFailWhenIdIsNotSet() {\n        shouldFail(\n                ODDPlatformDataEntityGroupPath.builder()\n                        .build(),\n                EmptyPathValueException.class\n        );\n    }\n}\n", "    public void shouldFailWhenIdIsNotSet() {\n        shouldFail(\n                ODDPlatformDataEntityGroupPath.builder()\n                        .build(),\n                EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/GrpcServicePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class GrpcServicePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            GrpcServicePath.builder()\n                .host(\"1.1.1.1\")\n                .service(\"helloworld\")\n                .method(\"call\")\n                .build(),\n            \"//grpc/host/1.1.1.1/services/helloworld/methods/call\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            GrpcServicePath.builder()\n                .host(\"1.1.1.1\")\n                .service(\"helloworld\")\n                .method(\"call\")\n                .build(),\n            \"//grpc/host/1.1.1.1/services/helloworld/methods/call\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            GrpcServicePath.builder()\n                .host(\"1.1.1.1\")\n                .method(\"call\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/MysqlTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class MysqlTest extends AbstractGeneratorTest {\n\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            MysqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//mysql/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            MysqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .build(),\n            \"//mysql/host/1.1.1.1/databases/dbname\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            MysqlPath.builder()\n                .host(\"1.1.1.1\")\n                .database(\"dbname\")\n                .table(\"test\")\n                .column(\"id\")\n                .build(),\n            \"//mysql/host/1.1.1.1/databases/dbname/tables/test/columns/id\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            MysqlPath.builder()\n                .host(\"1.1.1.1\")\n                .table(\"test\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/KafkaPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class KafkaPathTest extends AbstractGeneratorTest {\n\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            KafkaPath.builder()\n                .cluster(\"1.1.1.1\")\n                .topic(\"topic-test\")\n                .build(),\n            \"//kafka/cluster/1.1.1.1/topics/topic-test\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            KafkaPath.builder()\n                .cluster(\"1.1.1.1\")\n                .topic(\"topic-test\")\n                .build(),\n            \"//kafka/cluster/1.1.1.1/topics/topic-test\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            KafkaPath.builder()\n                .cluster(\"1.1.1.1\")\n                .topic(\"topic-test\")\n                .column(\"topic-column\")\n                .build(),\n            \"//kafka/cluster/1.1.1.1/topics/topic-test/columns/topic-column\"\n        );\n    }\n\n    @Test", "    public void shouldFailTablePath() {\n        shouldFail(\n            KafkaPath.builder()\n                .cluster(\"1.1.1.1\")\n                .column(\"topic-column\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/CustomS3PathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class CustomS3PathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateBucketPath() throws Exception {\n        shouldGeneratePath(\n                CustomS3Path.builder()\n                        .endpoint(\"http://172.27.0.2:9000\")\n                        .bucket(\"my_bucket\")\n                        .build(),\n                \"//s3-custom/endpoint/http:\\\\\\\\\\\\\\\\172.27.0.2:9000/buckets/my_bucket\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateBucketPath() throws Exception {\n        shouldGeneratePath(\n                CustomS3Path.builder()\n                        .endpoint(\"http://172.27.0.2:9000\")\n                        .bucket(\"my_bucket\")\n                        .build(),\n                \"//s3-custom/endpoint/http:\\\\\\\\\\\\\\\\172.27.0.2:9000/buckets/my_bucket\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateKeyPath() throws Exception {\n        shouldGeneratePath(\n                CustomS3Path.builder()\n                        .endpoint(\"http://172.27.0.2:9000\")\n                        .bucket(\"my_bucket\")\n                        .key(\"file1\")\n                        .build(),\n                \"//s3-custom/endpoint/http:\\\\\\\\\\\\\\\\172.27.0.2:9000/buckets/my_bucket/keys/file1\"\n        );\n    }\n\n    @Test", "    public void shouldGeneratePathKeyPath() throws Exception {\n        shouldGeneratePath(\n                CustomS3Path.builder()\n                        .endpoint(\"http://172.27.0.2:9000\")\n                        .bucket(\"my_bucket\")\n                        .key(\"path/to/file1\")\n                        .build(),\n                \"//s3-custom/endpoint/http:\\\\\\\\\\\\\\\\172.27.0.2:9000/buckets/my_bucket/keys/path\\\\\\\\to\\\\\\\\file1\"\n        );\n    }\n\n    @Test", "    public void shouldFailKeyPath() {\n        shouldFail(\n                CustomS3Path.builder()\n                        .endpoint(\"http://172.27.0.2:9000\")\n                        .key(UUID.randomUUID().toString())\n                        .build(),\n                EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/NamedMicroservicePathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\n\npublic class NamedMicroservicePathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateImagePath() throws Exception {\n        shouldGeneratePath(\n            NamedMicroservicePath.builder()\n                .name(\"odd-platform:latest\")\n                .build(),\n            \"//microservice/named/name/odd-platform:latest\"\n        );\n    }\n}"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/HdfsPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class HdfsPathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGeneratePath() throws Exception {\n        shouldGeneratePath(\n                HdfsPath.builder()\n                        .site(\"sandbox.com:8020\")\n                        .path(\"path/to/file1.ext\")\n                        .build(),\n                \"//hdfs/site/sandbox.com:8020/paths/path\\\\\\\\to\\\\\\\\file1.ext\"\n        );\n    }\n\n    @Test", "    public void shouldGeneratePath() throws Exception {\n        shouldGeneratePath(\n                HdfsPath.builder()\n                        .site(\"sandbox.com:8020\")\n                        .path(\"path/to/file1.ext\")\n                        .build(),\n                \"//hdfs/site/sandbox.com:8020/paths/path\\\\\\\\to\\\\\\\\file1.ext\"\n        );\n    }\n\n    @Test", "    public void shouldFailPath() {\n        shouldFail(\n                HdfsPath.builder()\n                        .path(UUID.randomUUID().toString())\n                        .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/test/java/org/opendatadiscovery/oddrn/model/DynamodbPathTest.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.junit.jupiter.api.Test;\nimport org.opendatadiscovery.oddrn.AbstractGeneratorTest;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\n\npublic class DynamodbPathTest extends AbstractGeneratorTest {\n    @Test\n    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            DynamodbPath.builder()\n                .account(\"7771111\")\n                .region(\"eu-central-1\")\n                .table(\"dtable\")\n                .build(),\n            \"//dynamodb/cloud/aws/account/7771111/region/eu-central-1/tables/dtable\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateDatabasePath() throws Exception {\n        shouldGeneratePath(\n            DynamodbPath.builder()\n                .account(\"7771111\")\n                .region(\"eu-central-1\")\n                .table(\"dtable\")\n                .build(),\n            \"//dynamodb/cloud/aws/account/7771111/region/eu-central-1/tables/dtable\"\n        );\n    }\n\n    @Test", "    public void shouldGenerateColumnPath() throws Exception {\n        shouldGeneratePath(\n            DynamodbPath.builder()\n                .account(\"7771111\")\n                .region(\"eu-central-1\")\n                .table(\"dtable\")\n                .column(\"id\")\n                .build(),\n            \"//dynamodb/cloud/aws/account/7771111/region/eu-central-1/tables/dtable/columns/id\"\n        );\n    }\n\n    @Test", "    public void shouldFailColumnPath() {\n        shouldFail(\n            DynamodbPath.builder()\n                .account(\"7771111\")\n                .region(\"eu-central-1\")\n                .column(\"id\")\n                .build(),\n            EmptyPathValueException.class\n        );\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/JdbcProcessors.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport java.util.Map;\nimport org.opendatadiscovery.oddrn.model.ClickhousePath;\nimport org.opendatadiscovery.oddrn.model.HivePath;\nimport org.opendatadiscovery.oddrn.model.MysqlPath;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\nimport org.opendatadiscovery.oddrn.model.PostgreSqlPath;\nimport org.opendatadiscovery.oddrn.model.SnowflakePath;\nimport org.opendatadiscovery.oddrn.processor.ClickhouseJdbcProcessor;", "import org.opendatadiscovery.oddrn.model.SnowflakePath;\nimport org.opendatadiscovery.oddrn.processor.ClickhouseJdbcProcessor;\nimport org.opendatadiscovery.oddrn.processor.Hive2JdbcProcessor;\nimport org.opendatadiscovery.oddrn.processor.JdbcProcessor;\nimport org.opendatadiscovery.oddrn.processor.MysqlJdbcProcessor;\nimport org.opendatadiscovery.oddrn.processor.PostgreSqlJdbcProcessor;\nimport org.opendatadiscovery.oddrn.processor.SnowflakeJdbcProcessor;\n\npublic class JdbcProcessors {\n    private final Map<String, JdbcProcessor<? extends OddrnPath>> processorMap = Map.of(\n        MysqlJdbcProcessor.PREFIX, new MysqlJdbcProcessor(),\n        PostgreSqlJdbcProcessor.PREFIX, new PostgreSqlJdbcProcessor(),\n        SnowflakeJdbcProcessor.PREFIX, new SnowflakeJdbcProcessor(),\n        Hive2JdbcProcessor.PREFIX, new Hive2JdbcProcessor(),\n        ClickhouseJdbcProcessor.PREFIX, new ClickhouseJdbcProcessor()\n    );\n\n    private final Map<Class<? extends OddrnPath>, JdbcProcessor<? extends OddrnPath>> processorMapByClass = Map.of(\n        MysqlPath.class, new MysqlJdbcProcessor(),\n        PostgreSqlPath.class, new PostgreSqlJdbcProcessor(),\n        SnowflakePath.class, new SnowflakeJdbcProcessor(),\n        HivePath.class, new Hive2JdbcProcessor(),\n        ClickhousePath.class, new ClickhouseJdbcProcessor()\n    );\n", "public class JdbcProcessors {\n    private final Map<String, JdbcProcessor<? extends OddrnPath>> processorMap = Map.of(\n        MysqlJdbcProcessor.PREFIX, new MysqlJdbcProcessor(),\n        PostgreSqlJdbcProcessor.PREFIX, new PostgreSqlJdbcProcessor(),\n        SnowflakeJdbcProcessor.PREFIX, new SnowflakeJdbcProcessor(),\n        Hive2JdbcProcessor.PREFIX, new Hive2JdbcProcessor(),\n        ClickhouseJdbcProcessor.PREFIX, new ClickhouseJdbcProcessor()\n    );\n\n    private final Map<Class<? extends OddrnPath>, JdbcProcessor<? extends OddrnPath>> processorMapByClass = Map.of(\n        MysqlPath.class, new MysqlJdbcProcessor(),\n        PostgreSqlPath.class, new PostgreSqlJdbcProcessor(),\n        SnowflakePath.class, new SnowflakeJdbcProcessor(),\n        HivePath.class, new Hive2JdbcProcessor(),\n        ClickhousePath.class, new ClickhouseJdbcProcessor()\n    );\n", "    public OddrnPath path(final String driver, final String host, final String database) {\n        final JdbcProcessor<?> processor = processorMap.get(driver);\n        if (processor != null) {\n            return processor.path(host, database);\n        } else {\n            return null;\n        }\n    }\n\n    public  <T extends OddrnPath> String url(final T path, final int port) {\n        final JdbcProcessor<T> processor = (JdbcProcessor<T>) processorMapByClass.get(path.getClass());", "        if (processor != null) {\n            return processor.url(path, port);\n        } else {\n            return null;\n        }\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/JdbcUrlParser.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\nimport lombok.Data;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\npublic class JdbcUrlParser {\n    private static final String JDBC_PREFIX = \"jdbc:\";\n    private static final String SEPARATOR = \"://\";\n    private static final String DEFAULT_DB_NAME = \"default\";\n\n    private final JdbcProcessors jdbcProcessors = new JdbcProcessors();\n", "    public OddrnPath parse(final String url) {\n        return parse(url, DEFAULT_DB_NAME);\n    }\n\n    public OddrnPath parse(final String url, final String user) {\n        if (url == null || !url.startsWith(JDBC_PREFIX) || url.indexOf(':', JDBC_PREFIX.length()) == -1) {\n            throw new IllegalArgumentException(\"Invalid JDBC url.\");\n        }\n\n        final int separatorPos = url.indexOf(SEPARATOR, JDBC_PREFIX.length());\n        if (separatorPos == -1) {\n            throw new IllegalArgumentException(\"Invalid JDBC url.\");\n        }\n\n        final String urlSecondPart = url.substring(separatorPos + SEPARATOR.length());\n        final String driver = url.substring(JDBC_PREFIX.length(), separatorPos);\n        final int dbPos = urlSecondPart.indexOf(\"/\");\n        int paramsPos = urlSecondPart.indexOf(\"?\");\n        final int semicolonParamsPos = urlSecondPart.indexOf(\";\");\n", "        if (separatorPos == -1) {\n            throw new IllegalArgumentException(\"Invalid JDBC url.\");\n        }\n\n        final String urlSecondPart = url.substring(separatorPos + SEPARATOR.length());\n        final String driver = url.substring(JDBC_PREFIX.length(), separatorPos);\n        final int dbPos = urlSecondPart.indexOf(\"/\");\n        int paramsPos = urlSecondPart.indexOf(\"?\");\n        final int semicolonParamsPos = urlSecondPart.indexOf(\";\");\n\n        if (semicolonParamsPos > 0 && semicolonParamsPos < paramsPos) {\n            paramsPos = semicolonParamsPos;", "        if (semicolonParamsPos > 0 && semicolonParamsPos < paramsPos) {\n            paramsPos = semicolonParamsPos;\n        } else if (paramsPos == -1 && semicolonParamsPos > 0) {\n            paramsPos = semicolonParamsPos;\n        }\n\n        final String host;\n        final String database;\n\n        if (dbPos < 0 && paramsPos > 0) {\n            // cases:\n            // jdbc:mysql://localhost?params\n\n            host = urlSecondPart.substring(0, paramsPos);\n            database = user;", "        if (dbPos < 0 && paramsPos > 0) {\n            // cases:\n            // jdbc:mysql://localhost?params\n\n            host = urlSecondPart.substring(0, paramsPos);\n            database = user;\n        } else if (dbPos > 0 && paramsPos > 0) {\n            // cases: jdbc:mysql://localhost/dbName?params\n\n            host = urlSecondPart.substring(0, dbPos);\n            database = urlSecondPart.substring(dbPos + 1, paramsPos);", "        } else if (dbPos > 0 && paramsPos < 0) {\n            // cases: jdbc:mysql://localhost/dbName\n\n            host = urlSecondPart.substring(0, dbPos);\n            database = urlSecondPart.substring(dbPos + 1);\n        } else {\n            // cases: jdbc:mysql://localhost\n\n            host = urlSecondPart;\n            database = null;\n        }\n\n        final HostUserPath hostUserPath = parseHostUserPath(host);\n        final String generatedHost = hostUserPath.host;\n        final String generatedUser = hostUserPath.user != null ? hostUserPath.user : user;\n        final String generatedDatabase;", "        if ((database == null || database.isEmpty()) && generatedUser != null) {\n            generatedDatabase = generatedUser;\n        } else {\n            generatedDatabase = database;\n        }\n\n        return jdbcProcessors.path(driver, generatedHost, generatedDatabase);\n    }\n\n    private HostUserPath parseHostUserPath(final String host) {\n        final int userPassPos = host.indexOf(\"@\");\n        final String joinedHost;", "        if (host.contains(\",\")) {\n            final String[] hosts = host.split(\",\");\n            joinedHost = Arrays.stream(hosts)\n                .map(h -> replacePort(h, userPassPos))\n                .collect(Collectors.joining(\",\"));\n        } else {\n            joinedHost = replacePort(host, userPassPos);\n        }\n\n        if (userPassPos > 0) {\n            final String newHost = joinedHost.substring(userPassPos + 1);\n            final String userPass = joinedHost.substring(0, userPassPos);\n            final int passPos = userPass.indexOf(\":\");\n            final String user = passPos > 0 ? userPass.substring(0, passPos) : userPass;\n            return new HostUserPath(newHost, user);\n        } else {\n            return new HostUserPath(joinedHost, null);\n        }\n    }\n\n    private String replacePort(final String host, final int userPassPos) {\n        final int portPos = host.lastIndexOf(\":\");\n        return portPos > userPassPos ? host.substring(0, portPos) : host;\n    }\n\n    @Data\n    private static class HostUserPath {\n        private final String host;\n        private final String user;\n    }\n}\n", "        if (userPassPos > 0) {\n            final String newHost = joinedHost.substring(userPassPos + 1);\n            final String userPass = joinedHost.substring(0, userPassPos);\n            final int passPos = userPass.indexOf(\":\");\n            final String user = passPos > 0 ? userPass.substring(0, passPos) : userPass;\n            return new HostUserPath(newHost, user);\n        } else {\n            return new HostUserPath(joinedHost, null);\n        }\n    }\n\n    private String replacePort(final String host, final int userPassPos) {\n        final int portPos = host.lastIndexOf(\":\");\n        return portPos > userPassPos ? host.substring(0, portPos) : host;\n    }\n\n    @Data\n    private static class HostUserPath {\n        private final String host;\n        private final String user;\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/Generator.java", "chunked_list": ["package org.opendatadiscovery.oddrn;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.HashSet;", "import java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;", "import java.util.function.Function;\nimport java.util.stream.Collectors;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.SneakyThrows;\nimport org.opendatadiscovery.oddrn.annotation.PathField;\nimport org.opendatadiscovery.oddrn.exception.EmptyPathValueException;\nimport org.opendatadiscovery.oddrn.exception.GenerateException;\nimport org.opendatadiscovery.oddrn.exception.PathDoesntExistException;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;", "import org.opendatadiscovery.oddrn.exception.PathDoesntExistException;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\nimport org.opendatadiscovery.oddrn.util.GeneratorUtil;\nimport org.reflections.Reflections;\n\nimport static java.util.Locale.ENGLISH;\nimport static java.util.function.Function.identity;\n\npublic class Generator {\n    static final String GET_PREFIX = \"get\";\n\n    private static final Map<Class<?>, Function<String, ?>> RETURN_TYPE_MAPPING = new HashMap<>();\n\n    private static class LazyHolder {\n        static final Generator INSTANCE = new Generator();\n    }\n", "public class Generator {\n    static final String GET_PREFIX = \"get\";\n\n    private static final Map<Class<?>, Function<String, ?>> RETURN_TYPE_MAPPING = new HashMap<>();\n\n    private static class LazyHolder {\n        static final Generator INSTANCE = new Generator();\n    }\n\n    public static Generator getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n    static {\n        RETURN_TYPE_MAPPING.put(String.class, identity());\n        RETURN_TYPE_MAPPING.put(Integer.class, Integer::parseInt);\n        RETURN_TYPE_MAPPING.put(Long.class, Long::parseLong);\n        RETURN_TYPE_MAPPING.put(Double.class, Double::parseDouble);\n        RETURN_TYPE_MAPPING.put(Float.class, Float::parseFloat);\n    }\n\n    private final Map<Class<? extends OddrnPath>, ModelDescription> cache =\n        new Reflections(\"org.opendatadiscovery.oddrn.model\").getSubTypesOf(OddrnPath.class)\n                .stream()\n                .collect(Collectors.toMap(c -> c, this::generateModel));\n", "    public static Generator getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n    static {\n        RETURN_TYPE_MAPPING.put(String.class, identity());\n        RETURN_TYPE_MAPPING.put(Integer.class, Integer::parseInt);\n        RETURN_TYPE_MAPPING.put(Long.class, Long::parseLong);\n        RETURN_TYPE_MAPPING.put(Double.class, Double::parseDouble);\n        RETURN_TYPE_MAPPING.put(Float.class, Float::parseFloat);\n    }\n\n    private final Map<Class<? extends OddrnPath>, ModelDescription> cache =\n        new Reflections(\"org.opendatadiscovery.oddrn.model\").getSubTypesOf(OddrnPath.class)\n                .stream()\n                .collect(Collectors.toMap(c -> c, this::generateModel));\n", "    public static String capitalize(final String name) {\n        if (name == null || name.length() == 0) {\n            return name;\n        }\n        return name.substring(0, 1).toUpperCase(ENGLISH) + name.substring(1);\n    }\n\n    public void register(final Class<? extends OddrnPath> clazz) {\n        this.generateModel(clazz);\n    }\n\n    public Optional<OddrnPath> parse(final String oddrn)\n            throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        final Optional<OddrnPath> result = Optional.empty();\n", "        for (final ModelDescription description : this.cache.values()) {\n            if (oddrn.startsWith(description.prefix + \"/\")) {\n                final String withoutPrefix = oddrn.substring(description.prefix.length());\n                final Object builder = description.builderMethod.invoke(null);\n                int nextFieldPos = 0;\n\n                do {\n                    final int fieldNamePos = withoutPrefix.indexOf(\"/\", nextFieldPos);\n                    final int valuePos = withoutPrefix.indexOf(\"/\", fieldNamePos + 1);\n                    if (valuePos == -1) {\n                        break;\n                    }\n                    nextFieldPos = withoutPrefix.indexOf(\"/\", valuePos + 1);\n", "                    if (valuePos == -1) {\n                        break;\n                    }\n                    nextFieldPos = withoutPrefix.indexOf(\"/\", valuePos + 1);\n\n                    if (fieldNamePos >= 0) {\n                        final String fieldName = withoutPrefix.substring(fieldNamePos + 1, valuePos);\n                        final String stringValue;\n                        if (nextFieldPos > 0) {\n                            stringValue = withoutPrefix.substring(valuePos + 1, nextFieldPos);\n                        } else {\n                            stringValue = withoutPrefix.substring(valuePos + 1);\n                        }\n                        final ModelField modelField = description.prefixes.get(fieldName);\n", "                        if (nextFieldPos > 0) {\n                            stringValue = withoutPrefix.substring(valuePos + 1, nextFieldPos);\n                        } else {\n                            stringValue = withoutPrefix.substring(valuePos + 1);\n                        }\n                        final ModelField modelField = description.prefixes.get(fieldName);\n\n                        if (modelField != null) {\n                            final Class<?> returnType = modelField.getReadMethod().getReturnType();\n\n                            final Function<String, ?> mapper = RETURN_TYPE_MAPPING.get(returnType);\n", "                            if (mapper == null) {\n                                throw new IllegalArgumentException(\n                                    String.format(\"Field path of type %s is not supported\", returnType));\n                            }\n\n                            modelField.setMethod.invoke(builder, mapper.apply(GeneratorUtil.unescape(stringValue)));\n                        }\n                    }\n                } while (nextFieldPos >= 0);\n\n                return Optional.ofNullable(\n                    (OddrnPath) builder.getClass().getMethod(\"build\").invoke(builder)\n                );\n            }\n        }\n\n        return result;\n    }\n", "                } while (nextFieldPos >= 0);\n\n                return Optional.ofNullable(\n                    (OddrnPath) builder.getClass().getMethod(\"build\").invoke(builder)\n                );\n            }\n        }\n\n        return result;\n    }\n", "    public String generate(final OddrnPath path) throws GenerateException {\n        try {\n            final ModelDescription modelDescription = cache.computeIfAbsent(\n                path.getClass(),\n                this::generateModel\n            );\n\n            // find last none empty field\n            final Iterator<ModelField> iterator = modelDescription.fields.iterator();\n            ModelField field = null;\n            while (iterator.hasNext()) {\n                field = iterator.next();\n                final Object result = field.readMethod.invoke(path);", "            while (iterator.hasNext()) {\n                field = iterator.next();\n                final Object result = field.readMethod.invoke(path);\n                if (result != null) {\n                    break;\n                }\n            }\n\n            if (field != null) {\n                return generate(path, modelDescription, field);\n            } else {\n                throw new GenerateException(\"All fields are empty\");\n            }\n        } catch (Exception e) {", "            if (field != null) {\n                return generate(path, modelDescription, field);\n            } else {\n                throw new GenerateException(\"All fields are empty\");\n            }\n        } catch (Exception e) {\n            if (e instanceof GenerateException) {\n                throw (GenerateException) e;\n            } else {\n                throw new GenerateException(\"Generate error\", e);\n            }\n        }\n    }\n", "    public String generate(final OddrnPath path, final ModelDescription description, final ModelField field)\n            throws GenerateException {\n        try {\n            validatePath(path, description, field);\n\n            final Map<String, ModelField> fields = description.fieldsMap;\n\n            final List<ModelField> pathFields = new ArrayList<>();\n\n            ModelField currentField = field;\n            pathFields.add(currentField);\n", "            while (currentField.pathField.dependency().length > 0\n                && !currentField.pathField.dependency()[0].isEmpty()\n            ) {\n                for (final String dependency : currentField.pathField.dependency()) {\n                    if (!dependency.isEmpty()) {\n                        final Optional<ModelField> find = Optional.ofNullable(fields.get(dependency));\n\n                        if (find.isPresent()) {\n                            currentField = find.get();\n                            pathFields.add(currentField);\n                            break;\n                        } else {\n                            throw new PathDoesntExistException(\n                                String.format(\"Path %s doesn't exist in generator\",\n                                    String.join(\" ,\", currentField.pathField.dependency())\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n\n            Collections.reverse(pathFields);\n            final StringBuilder builder = new StringBuilder();\n            builder.append(path.prefix());", "            for (final ModelField modelField : pathFields) {\n                final String prefix = modelField.pathField.prefix().isEmpty()\n                    ? modelField.getField().getName()\n                    : modelField.pathField.prefix();\n\n                builder.append(\"/\");\n                builder.append(prefix);\n                builder.append(\"/\");\n                builder.append(GeneratorUtil.escape(modelField.readMethod.invoke(path).toString()));\n            }\n\n            return builder.toString();\n        } catch (Exception e) {", "            if (e instanceof GenerateException) {\n                throw (GenerateException) e;\n            } else {\n                throw new GenerateException(\"Generate error\", e);\n            }\n        }\n    }\n\n    public void validateAllPaths(final OddrnPath model)\n            throws GenerateException {\n        final ModelDescription modelDescription = cache.computeIfAbsent(\n            model.getClass(),\n            this::generateModel\n        );\n", "    public void validateAllPaths(final OddrnPath model)\n            throws GenerateException {\n        final ModelDescription modelDescription = cache.computeIfAbsent(\n            model.getClass(),\n            this::generateModel\n        );\n\n        for (final ModelField field : modelDescription.fields) {\n            this.validatePath(model, modelDescription, field);\n        }\n    }\n", "    public void validatePath(final OddrnPath path, final ModelDescription description, final ModelField field)\n            throws GenerateException {\n        try {\n            final String fieldName = field.name;\n\n            boolean allFailed = true;\n            Exception lastException = null;\n\n            if (field.pathField.dependency().length > 0) {\n                for (final String dependency : field.pathField.dependency()) {\n                    if (!dependency.isEmpty()) {\n                        final ModelField modelField =\n                            description.fields.stream().filter(f -> f.name.equals(dependency)).findFirst()\n                                .orElseThrow(() -> new PathDoesntExistException(dependency));", "            if (field.pathField.dependency().length > 0) {\n                for (final String dependency : field.pathField.dependency()) {\n                    if (!dependency.isEmpty()) {\n                        final ModelField modelField =\n                            description.fields.stream().filter(f -> f.name.equals(dependency)).findFirst()\n                                .orElseThrow(() -> new PathDoesntExistException(dependency));\n                        try {\n                            validatePath(path, description, modelField);\n                            allFailed = false;\n                        } catch (Exception e) {\n                            lastException = e;\n                        }\n                    }\n                }\n            }\n", "            if (allFailed && lastException != null) {\n                throw lastException;\n            }\n\n            if (!field.pathField.nullable()\n                && (field.getReadMethod().invoke(path) == null\n                || field.getReadMethod().invoke(path).toString().trim().isEmpty())\n            ) {\n                throw new EmptyPathValueException(\n                    String.format(\"'Attribute %s' is empty\",\n                        fieldName\n                    )\n                );\n            }\n        } catch (Exception e) {", "            if (e instanceof GenerateException) {\n                throw (GenerateException) e;\n            } else {\n                throw new GenerateException(\"Generate error\", e);\n            }\n        }\n    }\n\n    @SneakyThrows\n    private ModelDescription generateModel(final Class<? extends OddrnPath> clazz) {\n        final ModelDescription.ModelDescriptionBuilder descriptionBuilder = ModelDescription.builder();\n\n        final Map<String, ModelField> fieldsMap = new HashMap<>();\n        final Map<String, ModelField> prefixes = new HashMap<>();\n\n        Class<?> currentClazz = clazz;\n        final Class<?> builderClazz = clazz.getMethod(\"builder\").getReturnType();\n        final Method builderMethod = clazz.getMethod(\"builder\");\n        final Object builder = builderMethod.invoke(null);\n        final Object build = builder.getClass().getMethod(\"build\").invoke(builder);\n        final String prefix = build.getClass().getMethod(\"prefix\").invoke(build).toString();\n\n        descriptionBuilder.prefix(prefix);\n        descriptionBuilder.builderMethod(clazz.getMethod(\"builder\"));\n", "        while (OddrnPath.class.isAssignableFrom(currentClazz)) {\n            for (final Field field : currentClazz.getDeclaredFields()) {\n                final PathField[] pathFields = field.getAnnotationsByType(PathField.class);\n\n                if (pathFields.length > 0) {\n                    final Method getMethod = clazz.getMethod(GET_PREFIX + capitalize(field.getName()));\n                    final Method setMethod = builderClazz.getMethod(field.getName(), getMethod.getReturnType());\n\n                    final ModelField model = ModelField.builder()\n                        .name(field.getName())\n                        .field(field)\n                        .pathField(pathFields[0])\n                        .readMethod(getMethod)\n                        .setMethod(setMethod)\n                        .build();\n\n                    final PathField pathField = pathFields[0];\n                    final String fieldPrefix = pathField.prefix().isEmpty() ? field.getName() : pathField.prefix();\n                    fieldsMap.put(field.getName(), model);\n                    prefixes.put(\n                        fieldPrefix,\n                        model\n                    );\n                }\n            }\n            currentClazz = currentClazz.getSuperclass();\n        }\n\n        final LinkedList<ModelField> fields = new LinkedList<>();\n        final LinkedList<String> fieldNames = new LinkedList<>();\n        final Set<String> processedFields = new HashSet<>();\n        final Deque<String> fieldsToProcess = new LinkedList<>(fieldsMap.keySet());\n", "        while (!fieldsToProcess.isEmpty()) {\n            final String fieldName = fieldsToProcess.pop();\n            if (!processedFields.contains(fieldName)) {\n                final ModelField modelField = fieldsMap.get(fieldName);\n                final String[] dependency = modelField.pathField.dependency();\n                final List<String> dependencies = new ArrayList<>();\n\n                if (dependency != null && dependency.length > 0) {\n                    boolean restart = false;\n                    for (final String dependencyName : dependency) {\n                        if (!dependencyName.isEmpty()) {\n                            dependencies.add(dependencyName);", "                    for (final String dependencyName : dependency) {\n                        if (!dependencyName.isEmpty()) {\n                            dependencies.add(dependencyName);\n                            if (!processedFields.contains(dependencyName)) {\n                                fieldsToProcess.push(fieldName);\n                                fieldsToProcess.push(dependencyName);\n                                restart = true;\n                            }\n                        }\n                    }\n                    if (restart) {\n                        continue;\n                    }\n                }\n\n                final int pos = dependencies.stream().mapToInt(fieldNames::indexOf).max().orElse(0);\n                fields.add(pos, fieldsMap.get(fieldName));\n                fieldNames.add(pos, fieldName);\n                processedFields.add(fieldName);\n            }\n        }\n\n        descriptionBuilder.prefixes(prefixes);\n        descriptionBuilder.fields(fields);\n        descriptionBuilder.fieldsMap(fieldsMap);\n        return descriptionBuilder.build();\n    }\n\n    @Data\n    @Builder\n    private static class ModelDescription {\n        private final Map<String, ModelField> prefixes;\n        private final Map<String, ModelField> fieldsMap;\n        private final List<ModelField> fields;\n        private final String prefix;\n        private final Method builderMethod;\n    }\n\n    @Data\n    @Builder\n    private static class ModelField {\n        private final String name;\n        private final Field field;\n        private final Method readMethod;\n        private final Method setMethod;\n        private final PathField pathField;\n    }\n}\n", "                    if (restart) {\n                        continue;\n                    }\n                }\n\n                final int pos = dependencies.stream().mapToInt(fieldNames::indexOf).max().orElse(0);\n                fields.add(pos, fieldsMap.get(fieldName));\n                fieldNames.add(pos, fieldName);\n                processedFields.add(fieldName);\n            }\n        }\n\n        descriptionBuilder.prefixes(prefixes);\n        descriptionBuilder.fields(fields);\n        descriptionBuilder.fieldsMap(fieldsMap);\n        return descriptionBuilder.build();\n    }\n\n    @Data\n    @Builder\n    private static class ModelDescription {\n        private final Map<String, ModelField> prefixes;\n        private final Map<String, ModelField> fieldsMap;\n        private final List<ModelField> fields;\n        private final String prefix;\n        private final Method builderMethod;\n    }\n\n    @Data\n    @Builder\n    private static class ModelField {\n        private final String name;\n        private final Field field;\n        private final Method readMethod;\n        private final Method setMethod;\n        private final PathField pathField;\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/model/RdsPath.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\npublic interface RdsPath {\n    String getHost();\n\n    String getDatabase();\n\n    String getTable();\n\n    String getView();\n\n    String getColumn();\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/model/OddrnPath.java", "chunked_list": ["package org.opendatadiscovery.oddrn.model;\n\nimport org.opendatadiscovery.oddrn.Generator;\nimport org.opendatadiscovery.oddrn.exception.GenerateException;\n\npublic interface OddrnPath {\n    String prefix();\n\n    String name();\n\n    default String oddrn() throws GenerateException {\n        return Generator.getInstance().generate(this);\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/util/GeneratorUtil.java", "chunked_list": ["package org.opendatadiscovery.oddrn.util;\n\npublic class GeneratorUtil {\n    public static String escape(final String value) {\n        return value.replace(\"/\", \"\\\\\\\\\");\n    }\n\n    public static String unescape(final String value) {\n        return value.replace(\"\\\\\\\\\", \"/\");\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/SnowflakeJdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\nimport org.opendatadiscovery.oddrn.model.SnowflakePath;\n\npublic class SnowflakeJdbcProcessor implements JdbcProcessor<SnowflakePath> {\n\n    public static final String PREFIX = \"snowflake\";\n\n    @Override\n    public OddrnPath path(final String host, final String database) {\n        return SnowflakePath.builder()\n            .account(host.substring(0, host.indexOf(\".\")))\n            .build();\n    }\n\n    @Override", "    public OddrnPath path(final String host, final String database) {\n        return SnowflakePath.builder()\n            .account(host.substring(0, host.indexOf(\".\")))\n            .build();\n    }\n\n    @Override\n    public String url(final SnowflakePath path, final int port) {\n        return String.format(\"jdbc:%s://%s.snowflakecomputing.com\", PREFIX, path.getAccount());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/PostgreSqlJdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\nimport org.opendatadiscovery.oddrn.model.PostgreSqlPath;\n\npublic class PostgreSqlJdbcProcessor implements JdbcProcessor<PostgreSqlPath> {\n\n    public static final String PREFIX = \"postgresql\";\n\n    @Override\n    public OddrnPath path(final String host, final String database) {\n        return PostgreSqlPath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override", "    public OddrnPath path(final String host, final String database) {\n        return PostgreSqlPath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override\n    public String url(final PostgreSqlPath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n", "    public String url(final PostgreSqlPath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/MysqlJdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.MysqlPath;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\npublic class MysqlJdbcProcessor implements JdbcProcessor<MysqlPath> {\n\n    public static final String PREFIX = \"mysql\";\n\n    @Override\n    public OddrnPath path(final String host, final String database) {\n        return MysqlPath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override", "    public OddrnPath path(final String host, final String database) {\n        return MysqlPath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override\n    public String url(final MysqlPath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n", "    public String url(final MysqlPath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/Hive2JdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.HivePath;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\npublic class Hive2JdbcProcessor implements JdbcProcessor<HivePath> {\n\n    public static final String PREFIX = \"hive2\";\n\n    @Override\n    public OddrnPath path(final String host, final String database) {\n        return HivePath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override", "    public OddrnPath path(final String host, final String database) {\n        return HivePath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override\n    public String url(final HivePath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n", "    public String url(final HivePath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/JdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\npublic interface JdbcProcessor<T extends OddrnPath> {\n    OddrnPath path(String host, String database);\n\n    String url(T path, int port);\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/processor/ClickhouseJdbcProcessor.java", "chunked_list": ["package org.opendatadiscovery.oddrn.processor;\n\nimport org.opendatadiscovery.oddrn.model.ClickhousePath;\nimport org.opendatadiscovery.oddrn.model.OddrnPath;\n\npublic class ClickhouseJdbcProcessor implements JdbcProcessor<ClickhousePath> {\n    public static final String PREFIX = \"clickhouse\";\n\n    @Override\n    public OddrnPath path(final String host, final String database) {\n        return ClickhousePath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override", "    public OddrnPath path(final String host, final String database) {\n        return ClickhousePath.builder()\n            .host(host)\n            .database(database)\n            .build();\n    }\n\n    @Override\n    public String url(final ClickhousePath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n", "    public String url(final ClickhousePath path, final int port) {\n        return String.format(\"jdbc:%s://%s:%d/%s\", PREFIX, path.getHost(), port, path.getDatabase());\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/exception/PathDoesntExistException.java", "chunked_list": ["package org.opendatadiscovery.oddrn.exception;\n\npublic class PathDoesntExistException extends GenerateException {\n    public PathDoesntExistException(final String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/exception/EmptyPathValueException.java", "chunked_list": ["package org.opendatadiscovery.oddrn.exception;\n\npublic class EmptyPathValueException extends GenerateException {\n    public EmptyPathValueException(final String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/exception/GenerateException.java", "chunked_list": ["package org.opendatadiscovery.oddrn.exception;\n\npublic class GenerateException extends RuntimeException {\n    public GenerateException(final String message) {\n        super(message);\n    }\n\n    public GenerateException(final String message, final Throwable e) {\n        super(message, e);\n    }\n}\n"]}
{"filename": "oddrn-generator-java/src/main/java/org/opendatadiscovery/oddrn/annotation/PathField.java", "chunked_list": ["package org.opendatadiscovery.oddrn.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface PathField {", "@Target(ElementType.FIELD)\npublic @interface PathField {\n    String[] dependency() default \"\";\n\n    String prefix() default \"\";\n\n    boolean nullable() default false;\n}\n", ""]}
