{"filename": "src/test/java/com/projeto/workshopmongo/WorkshopmongoApplicationTests.java", "chunked_list": ["package com.projeto.workshopmongo;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass WorkshopmongoApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/WorkshopmongoApplication.java", "chunked_list": ["package com.projeto.workshopmongo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class WorkshopmongoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(WorkshopmongoApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(WorkshopmongoApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/repository/UserRepository.java", "chunked_list": ["package com.projeto.workshopmongo.repository;\n\nimport com.projeto.workshopmongo.domain.User;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends MongoRepository<User, String> {\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/repository/PostRepository.java", "chunked_list": ["package com.projeto.workshopmongo.repository;\n\nimport com.projeto.workshopmongo.domain.Post;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.data.mongodb.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Date;\nimport java.util.List;\n", "import java.util.List;\n\n@Repository\npublic interface PostRepository extends MongoRepository<Post, String> {\n\n    @Query(\"{ 'title': { $regex: ?0, $options: 'i' } }\")\n    List<Post> searchTitle(String text);\n    List<Post> findByTitleContainingIgnoreCase(String text);\n\n    @Query(\"{ $and: [ { date: {$gte: ?1} }, { date: { $lte: ?2} } , { $or: [ { 'title': { $regex: ?0, $options: 'i' } }, { 'body': { $regex: ?0, $options: 'i' } }, { 'comments.text': { $regex: ?0, $options: 'i' } } ] } ] }\")\n    List<Post> fullSearch(String text, Date minDate, Date maxDate);\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/domain/User.java", "chunked_list": ["package com.projeto.workshopmongo.domain;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.DBRef;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;", "import java.util.List;\nimport java.util.Objects;\n@Document(collection = \"user\")\npublic class User implements Serializable {\n    private static final long serialVersionUID = 1l;\n    @Id\n    private String id;\n    private String name;\n    private String email;\n    @DBRef (lazy = true)\n    private List<Post> posts = new ArrayList<>();\n\n    public User() {\n    }\n\n    public User(String id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n", "    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n", "    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    public List<Post> getPosts() {\n        return posts;\n    }\n", "    public void setPosts(List<Post> posts) {\n        this.posts = posts;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        User user = (User) o;\n        return Objects.equals(id, user.id) && Objects.equals(name, user.name) && Objects.equals(email, user.email);\n    }\n\n    @Override", "    public int hashCode() {\n        return Objects.hash(id, name, email);\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/domain/Post.java", "chunked_list": ["package com.projeto.workshopmongo.domain;\n\nimport com.projeto.workshopmongo.dto.AuthorDTO;\nimport com.projeto.workshopmongo.dto.CommentDTO;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Date;", "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Objects;\n\n@Document\npublic class Post implements Serializable {\n\n    private static final long serialVersionUID = 1l;\n    @Id\n    private String id;\n    private Date date;\n    private  String title;\n    private String body;\n    private AuthorDTO author;\n    private List<CommentDTO> commentsList = new ArrayList<>();\n\n    public Post() {\n    }\n\n    public Post(String id, Date date, String title, String body, AuthorDTO author ) {\n        this.id = id;\n        this.date = date;\n        this.title = title;\n        this.body = body;\n        this.author = author;\n    }\n", "    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n", "    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n", "    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getBody() {\n        return body;\n    }\n", "    public String getBody() {\n        return body;\n    }\n\n    public void setBody(String body) {\n        this.body = body;\n    }\n\n    public AuthorDTO getAuthor() {\n        return author;\n    }\n\n    public List<CommentDTO> getCommentsList() {\n        return commentsList;\n    }\n", "    public AuthorDTO getAuthor() {\n        return author;\n    }\n\n    public List<CommentDTO> getCommentsList() {\n        return commentsList;\n    }\n\n    public void setCommentsList(List<CommentDTO> commentsList) {\n        this.commentsList = commentsList;\n    }\n", "    public void setCommentsList(List<CommentDTO> commentsList) {\n        this.commentsList = commentsList;\n    }\n\n    public void setAuthor(AuthorDTO author) {\n        this.author = author;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Post post = (Post) o;\n        return id.equals(post.id);\n    }\n\n    @Override", "    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Post post = (Post) o;\n        return id.equals(post.id);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}\n", "    public int hashCode() {\n        return Objects.hash(id);\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/config/Instanciation.java", "chunked_list": ["package com.projeto.workshopmongo.config;\n\n\nimport com.projeto.workshopmongo.domain.Post;\nimport com.projeto.workshopmongo.domain.User;\nimport com.projeto.workshopmongo.dto.AuthorDTO;\nimport com.projeto.workshopmongo.dto.CommentDTO;\nimport com.projeto.workshopmongo.repository.PostRepository;\nimport com.projeto.workshopmongo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;", "import com.projeto.workshopmongo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.TimeZone;\n\n@Configuration\npublic class Instanciation implements CommandLineRunner {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    PostRepository postRepository;\n\n    @Override", "\n@Configuration\npublic class Instanciation implements CommandLineRunner {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    PostRepository postRepository;\n\n    @Override\n    public void run(String... args) throws Exception {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n        sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n\n        userRepository.deleteAll();\n        postRepository.deleteAll();\n\n\n        User maria = new User(null, \"Maria Brown\", \"maria@gmail.com\");\n        User alex = new User(null, \"Alex Green\", \"alex@gmail.com\");\n        User bob = new User(null, \"Bob Grey\", \"bob@gmail.com\");\n        userRepository.saveAll(Arrays.asList(maria,alex,bob));\n\n        Post post1 = new Post (null, sdf.parse(\"21/03/2018\"), \"Partiu viagem\",\"Vou viajar para SP abra\u00e7os\", new AuthorDTO(maria));\n        Post post2 = new Post(null, sdf.parse(\"18/04/2023\"),\"Workshop muito bom!\",\"Estou aprendendo bastante sobre Spring!\", new AuthorDTO(bob));\n\n        CommentDTO c1 = new CommentDTO(\"Boa viagem mano!\", sdf.parse(\"21/02/2018\"),new AuthorDTO(alex));\n        CommentDTO c2 = new CommentDTO(\"Aproveite\", sdf.parse(\"22/02/2018\"),new AuthorDTO(bob));\n        CommentDTO c3 = new CommentDTO(\"Tenha um \u00f3timo dia!\", sdf.parse(\"23/02/2018\"),new AuthorDTO(alex));\n\n        post1.getCommentsList().addAll(Arrays.asList(c1,c2));\n        post2.getCommentsList().addAll(Arrays.asList(c3));\n\n        postRepository.saveAll(Arrays.asList(post1, post2));\n\n        maria.getPosts().addAll(Arrays.asList(post1,post2));\n        userRepository.save(maria);\n\n    }\n}\n", "    public void run(String... args) throws Exception {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n        sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n\n        userRepository.deleteAll();\n        postRepository.deleteAll();\n\n\n        User maria = new User(null, \"Maria Brown\", \"maria@gmail.com\");\n        User alex = new User(null, \"Alex Green\", \"alex@gmail.com\");\n        User bob = new User(null, \"Bob Grey\", \"bob@gmail.com\");\n        userRepository.saveAll(Arrays.asList(maria,alex,bob));\n\n        Post post1 = new Post (null, sdf.parse(\"21/03/2018\"), \"Partiu viagem\",\"Vou viajar para SP abra\u00e7os\", new AuthorDTO(maria));\n        Post post2 = new Post(null, sdf.parse(\"18/04/2023\"),\"Workshop muito bom!\",\"Estou aprendendo bastante sobre Spring!\", new AuthorDTO(bob));\n\n        CommentDTO c1 = new CommentDTO(\"Boa viagem mano!\", sdf.parse(\"21/02/2018\"),new AuthorDTO(alex));\n        CommentDTO c2 = new CommentDTO(\"Aproveite\", sdf.parse(\"22/02/2018\"),new AuthorDTO(bob));\n        CommentDTO c3 = new CommentDTO(\"Tenha um \u00f3timo dia!\", sdf.parse(\"23/02/2018\"),new AuthorDTO(alex));\n\n        post1.getCommentsList().addAll(Arrays.asList(c1,c2));\n        post2.getCommentsList().addAll(Arrays.asList(c3));\n\n        postRepository.saveAll(Arrays.asList(post1, post2));\n\n        maria.getPosts().addAll(Arrays.asList(post1,post2));\n        userRepository.save(maria);\n\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/resources/PostResource.java", "chunked_list": ["package com.projeto.workshopmongo.resources;\n\nimport com.projeto.workshopmongo.domain.Post;\nimport com.projeto.workshopmongo.resources.util.URL;\nimport com.projeto.workshopmongo.services.PostService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Date;", "\nimport java.util.Date;\nimport java.util.List;\n\n@RestController\n@RequestMapping(value = \"/posts\")\npublic class PostResource {\n    @Autowired\n    private PostService postService;\n\n    @GetMapping(value = \"/{id}\")\n    public ResponseEntity<Post> findById(@PathVariable String id){\n        Post obj = postService.findById(id);\n        return ResponseEntity.ok().body(obj);\n    }\n\n    @GetMapping(value = \"/titlesearch\")\n    public ResponseEntity<List<Post>> findByTitle(@RequestParam(value = \"text\", defaultValue = \"\") String text){\n        String decodingText = URL.decodeParam(text);\n        List<Post> list = postService.findByTitle(decodingText);\n       return ResponseEntity.ok().body(list);\n    }\n    @GetMapping(\"/fullsearch\")\n    public ResponseEntity<List<Post>> fullSearch(\n            @RequestParam(value = \"text\", defaultValue = \"\") String text,\n            @RequestParam(value = \"minDate\", defaultValue = \"\") String minDate,\n            @RequestParam(value = \"maxDate\", defaultValue = \"\") String maxDate) {\n        text = URL.decodeParam(text);\n        Date min = URL.convertDate(minDate, new Date(0L));\n        Date max = URL.convertDate(maxDate, new Date());\n        List<Post> list = postService.fullSearch(text, min ,max);\n        return ResponseEntity.ok().body(list);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/resources/UseResource.java", "chunked_list": ["package com.projeto.workshopmongo.resources;\n\nimport com.projeto.workshopmongo.domain.Post;\nimport com.projeto.workshopmongo.domain.User;\nimport com.projeto.workshopmongo.dto.UserDTO;\nimport com.projeto.workshopmongo.resources.util.URL;\nimport com.projeto.workshopmongo.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RestController", "\n@RestController\n@RequestMapping(value=\"/users\")\npublic class UseResource {\n\n    @Autowired\n    private UserService service;\n    @GetMapping\n    public ResponseEntity<List<UserDTO>> findAll(){\n        List<User>lista =  service.findAll();\n        List<UserDTO> listaDTO = lista.stream().map(x -> new UserDTO(x)).collect(Collectors.toList());\n        return ResponseEntity.ok().body(listaDTO);\n    }\n\n    @GetMapping(value =\"/{id}\")\n    public ResponseEntity<UserDTO> findById(@PathVariable String id){\n        User obj = service.findById(id);\n        return ResponseEntity.ok(new UserDTO(obj));\n        }\n\n    @PostMapping\n    public ResponseEntity<Void> insert(@RequestBody UserDTO objDTO){\n        User obj = service.fromDTO(objDTO);\n        obj = service.insert(obj);\n        URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path(\"/{id}\").buildAndExpand(obj.getId()).toUri();\n        return ResponseEntity.created(uri).build();\n    }\n\n    @PutMapping(value = \"/{id}\")\n    public ResponseEntity<Void> update(@RequestBody UserDTO objDto, @PathVariable String id){\n            User obj = service.fromDTO(objDto);\n            obj.setId(id);\n            obj = service.update(obj);\n            return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(value = \"{id}/posts\")\n    ResponseEntity<List<Post>> findPost(@PathVariable String id){\n        User obj = service.findById(id);\n        return ResponseEntity.ok().body(obj.getPosts());\n    }\n\n    @DeleteMapping(value = \"/{id}\")\n    public ResponseEntity<Void> deleteById(@PathVariable String id){\n        service.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    }\n\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/resources/exceptions/ResourceExceptionHandler.java", "chunked_list": ["package com.projeto.workshopmongo.resources.exceptions;\n\nimport com.projeto.workshopmongo.services.exception.ObjectNotFoundException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class ResourceExceptionHandler {\n    @ExceptionHandler(ObjectNotFoundException.class)\n    public ResponseEntity<StandardError> objectNotFound(ObjectNotFoundException e, HttpServletRequest request){\n        HttpStatus status = HttpStatus.NOT_FOUND;\n        StandardError err = new StandardError(System.currentTimeMillis(),status.\n                value(),\"N\u00e3o encontrado\", e.getMessage(), request.getRequestURI());\n        return ResponseEntity.status(status).body(err);\n    }\n}\n", "\n@ControllerAdvice\npublic class ResourceExceptionHandler {\n    @ExceptionHandler(ObjectNotFoundException.class)\n    public ResponseEntity<StandardError> objectNotFound(ObjectNotFoundException e, HttpServletRequest request){\n        HttpStatus status = HttpStatus.NOT_FOUND;\n        StandardError err = new StandardError(System.currentTimeMillis(),status.\n                value(),\"N\u00e3o encontrado\", e.getMessage(), request.getRequestURI());\n        return ResponseEntity.status(status).body(err);\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/resources/exceptions/StandardError.java", "chunked_list": ["package com.projeto.workshopmongo.resources.exceptions;\n\nimport java.io.Serializable;\n\npublic class StandardError implements Serializable {\n    private static final long serialVersionUID = 1l;\n    private Long timestamp;\n    private Integer status;\n    private String error;\n    private String message;\n    private String path;\n\n    public StandardError(Long timestamp, Integer status, String error, String message, String path) {\n        this.timestamp = timestamp;\n        this.status = status;\n        this.error = error;\n        this.message = message;\n        this.path = path;\n    }\n", "    public Long getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(Long timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    public Integer getStatus() {\n        return status;\n    }\n", "    public Integer getStatus() {\n        return status;\n    }\n\n    public void setStatus(Integer status) {\n        this.status = status;\n    }\n\n    public String getError() {\n        return error;\n    }\n", "    public String getError() {\n        return error;\n    }\n\n    public void setError(String error) {\n        this.error = error;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n", "    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getPath() {\n        return path;\n    }\n", "    public String getPath() {\n        return path;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/resources/util/URL.java", "chunked_list": ["package com.projeto.workshopmongo.resources.util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class URL {\n    public static String decodeParam(String text){\n        try{\n            return URLDecoder.decode(text,\"UTF-8\");\n        }catch (UnsupportedEncodingException e){\n            return \"\";\n        }\n    }\n", "public class URL {\n    public static String decodeParam(String text){\n        try{\n            return URLDecoder.decode(text,\"UTF-8\");\n        }catch (UnsupportedEncodingException e){\n            return \"\";\n        }\n    }\n\n    public static Date convertDate(String textDate, Date defaultValue){\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "    public static Date convertDate(String textDate, Date defaultValue){\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        try {\n            return sdf.parse(textDate);\n        } catch (ParseException e) {\n            return defaultValue;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/services/PostService.java", "chunked_list": ["package com.projeto.workshopmongo.services;\n\nimport com.projeto.workshopmongo.domain.Post;\nimport com.projeto.workshopmongo.repository.PostRepository;\nimport com.projeto.workshopmongo.services.exception.ObjectNotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.Date;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PostService {\n    @Autowired\n    private PostRepository postRepository;\n\n    public Post findById(String id){\n      Optional<Post> obj = postRepository.findById(id);\n      return obj.orElseThrow(() -> new ObjectNotFoundException(\"Objeto n\u00e3o encontrado\"));\n    }\n\n    public List<Post> findByTitle(String text){\n        return postRepository.searchTitle(text);\n    }\n\n    public List<Post> fullSearch(String text, Date minDate, Date maxDate){\n        maxDate = new Date(maxDate.getTime() + 24 * 60 * 60 * 1000);\n        return postRepository.fullSearch(text, minDate, maxDate);\n    }\n\n\n}\n", "    public Post findById(String id){\n      Optional<Post> obj = postRepository.findById(id);\n      return obj.orElseThrow(() -> new ObjectNotFoundException(\"Objeto n\u00e3o encontrado\"));\n    }\n\n    public List<Post> findByTitle(String text){\n        return postRepository.searchTitle(text);\n    }\n\n    public List<Post> fullSearch(String text, Date minDate, Date maxDate){\n        maxDate = new Date(maxDate.getTime() + 24 * 60 * 60 * 1000);\n        return postRepository.fullSearch(text, minDate, maxDate);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/services/UserService.java", "chunked_list": ["package com.projeto.workshopmongo.services;\n\nimport com.projeto.workshopmongo.domain.User;\nimport com.projeto.workshopmongo.dto.UserDTO;\nimport com.projeto.workshopmongo.repository.UserRepository;\nimport com.projeto.workshopmongo.services.exception.ObjectNotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository repository;\n    public List<User> findAll(){\n        return repository.findAll();\n    }\n", "    public User findById(String id){\n        Optional<User> obj= repository.findById(id);\n        return obj.orElseThrow(() -> new ObjectNotFoundException(\"Objeto n\u00e3o encontrado\"));\n    }\n\n    public User insert(User obj){\n        return repository.insert(obj);\n    }\n\n    public void deleteById(String id){\n        findById(id);\n        repository.deleteById(id);\n    }\n", "    public void deleteById(String id){\n        findById(id);\n        repository.deleteById(id);\n    }\n\n    public User update(User obj){\n        User newObj = findById(obj.getId()) ;\n        updateData(newObj,obj);\n        return repository.save(newObj);\n    }\n    private void updateData(User newObj, User obj){\n        newObj.setId(obj.getId());\n        newObj.setName(obj.getName());\n        newObj.setEmail(obj.getEmail());\n    }\n", "    public User fromDTO (UserDTO objDTO){\n        return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());\n    }\n\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/services/exception/ObjectNotFoundException.java", "chunked_list": ["package com.projeto.workshopmongo.services.exception;\n\npublic class ObjectNotFoundException extends RuntimeException {\n    private static final long serialVersionUID = 1l;\n\n    public ObjectNotFoundException(String msg) {\n        super(msg);\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/dto/CommentDTO.java", "chunked_list": ["package com.projeto.workshopmongo.dto;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class CommentDTO implements Serializable {\n    private static final long serialVersionUID = 1l;\n    private String text;\n    private Date date;\n    private AuthorDTO getAuthorDTO;\n\n    public CommentDTO() {\n    }\n\n    public CommentDTO(String text, Date date, AuthorDTO getAuthorDTO) {\n        this.text = text;\n        this.date = date;\n        this.getAuthorDTO = getAuthorDTO;\n    }\n", "    public String getText() {\n        return text;\n    }\n\n    public void setText(String text) {\n        this.text = text;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n", "    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public AuthorDTO getGetAuthorDTO() {\n        return getAuthorDTO;\n    }\n", "    public AuthorDTO getGetAuthorDTO() {\n        return getAuthorDTO;\n    }\n\n    public void setGetAuthorDTO(AuthorDTO getAuthorDTO) {\n        this.getAuthorDTO = getAuthorDTO;\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/dto/AuthorDTO.java", "chunked_list": ["package com.projeto.workshopmongo.dto;\n\nimport com.projeto.workshopmongo.domain.User;\n\nimport java.io.Serializable;\n\npublic class AuthorDTO implements Serializable {\n    private String id;\n    private String name;\n\n    public AuthorDTO(){\n    }\n\n    public AuthorDTO(User obj) {\n        this.id = obj.getId();\n        this.name = obj.getName();\n    }\n", "    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n"]}
{"filename": "src/main/java/com/projeto/workshopmongo/dto/UserDTO.java", "chunked_list": ["package com.projeto.workshopmongo.dto;\n\nimport com.projeto.workshopmongo.domain.User;\n\nimport java.io.Serializable;\n\npublic class UserDTO implements Serializable {\n    private static final long serialVersionUID = 1l;\n    private String id;\n    private String name;\n    private String email;\n\n    public UserDTO() {\n    }\n\n    public UserDTO(User obj){\n        this.id = obj.getId();\n        this.name = obj.getName();\n        this.email = obj.getEmail();\n    }\n", "    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n", "    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n"]}
