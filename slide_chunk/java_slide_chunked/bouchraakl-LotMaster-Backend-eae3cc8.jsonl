{"filename": "src/test/java/br/com/uniamerica/estacionamento/EstacionamentoApplicationTests.java", "chunked_list": ["package br.com.uniamerica.estacionamento;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass EstacionamentoApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/EstacionamentoApplication.java", "chunked_list": ["package br.com.uniamerica.estacionamento;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\n\n@SpringBootApplication\npublic class EstacionamentoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EstacionamentoApplication.class, args);\n\t}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(EstacionamentoApplication.class, args);\n\t}\n\n\tpublic void addCorsMappings(CorsRegistry registry) {\n\t\tregistry.addMapping(\"/**\")\n\t\t\t\t.allowedOrigins(\"http://localhost:8082\")\n\t\t\t\t.allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n\t\t\t\t.allowedHeaders(\"Content-Type\")\n\t\t\t\t.allowCredentials(true);\n\t}\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Condutor.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.validator.constraints.br.CPF;", "import org.hibernate.envers.Audited;\nimport org.hibernate.validator.constraints.br.CPF;\n\n@Entity\n@Audited\n@Table(name = \"condutores\", schema = \"public\")\n@AuditTable(value = \"condutores_audit\", schema = \"audit\")\npublic class Condutor extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @Column(name = \"nome\", nullable = false, length = 30)\n    @NotNull(message = \"The driver's name cannot be null.\")\n    @Size(min = 2, max = 30, message = \"The driver's name must have at least 2 characters and at most 30 characters.\")\n    @NotBlank(message = \"The driver's name cannot be empty.\")\n    private String nome;\n\n    @Getter\n    @Setter\n    @Column(name = \"cpf\", nullable = false, unique = true, length = 15)\n    @CPF\n    @NotNull(message = \"The driver's CPF cannot be null.\")\n    @NotBlank(message = \"The driver's CPF cannot be empty.\")\n    @Pattern(regexp = \"\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}-\\\\d{2}\",\n            message = \"The CPF format is invalid. The correct format is xxx.xxx.xxx-xx.\")\n    private String cpf;\n\n\n    @Getter\n    @Setter\n    @Column(name = \"telefone\", nullable = false)\n    @NotNull(message = \"The driver's phone number cannot be null.\")\n    @NotBlank(message = \"The driver's phone number cannot be empty.\")\n    private String telefone;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempohoras_gasto\")\n    private int tempoPagoHoras;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempominutos_gasto\")\n    private int tempoPagoMinutos;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_descontoHoras\")\n    private int tempoDescontoHoras;\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Marca.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\n", "import org.hibernate.envers.Audited;\n\n@Entity\n@Audited\n@Table(name = \"marcas\", schema = \"public\")\n@AuditTable(value = \"marcas_audit\", schema = \"audit\")\npublic class Marca extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @Column(name = \"nome\", nullable = false, length = 30)\n    @NotNull(message = \"The brand name field is required.\")\n    @NotBlank(message = \"The brand name field must not be empty.\")\n    @Size(min = 2, max = 30, message = \"The brand name must be between 2 and 30 characters in length.\")\n    private String nome;\n\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Movimentacao.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\n", "import org.hibernate.envers.Audited;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\n\n@Entity\n@Audited\n@Table(name = \"movimentacoes\", schema = \"public\")\n@AuditTable(value = \"movimentacoes_audit\", schema = \"audit\")\npublic class Movimentacao extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @ManyToOne\n    @JoinColumn(name = \"veiculo_id\", nullable = false)\n    @NotNull(message = \"The vehicle object was not provided.\")\n    private Veiculo veiculo;\n\n    @Getter\n    @Setter\n    @ManyToOne\n    @JoinColumn(name = \"condutor_id\", nullable = false)\n    @NotNull(message = \"The driver object was not provided.\")\n    private Condutor condutor;\n\n    @Getter\n    @Setter\n    @Column(name = \"entrada\", nullable = false)\n    @NotNull(message = \"The entry date of the movement was not provided.\")\n    private LocalDateTime entrada;\n\n    @Getter\n    @Setter\n    @Column(name = \"saida\")\n    private LocalDateTime saida;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempoHoras\")\n    private int tempoHoras;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempoMinutos\")\n    private int tempoMinutos;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_desconto\")\n    private int tempoDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_multaHoras\")\n    private int tempoMultaHoras;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_multaMinutes\")\n    private int tempoMultaMinutes;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_desconto\")\n    private BigDecimal valorDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_multa\")\n    private BigDecimal valorMulta;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_total\")\n    private BigDecimal valorTotal;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_hora\")\n    private BigDecimal valorHora;\n\n    @Getter\n    @Setter\n    @Column(name = \"valorhora_multa\")\n    private BigDecimal valorHoraMulta;\n}\n", "@AuditTable(value = \"movimentacoes_audit\", schema = \"audit\")\npublic class Movimentacao extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @ManyToOne\n    @JoinColumn(name = \"veiculo_id\", nullable = false)\n    @NotNull(message = \"The vehicle object was not provided.\")\n    private Veiculo veiculo;\n\n    @Getter\n    @Setter\n    @ManyToOne\n    @JoinColumn(name = \"condutor_id\", nullable = false)\n    @NotNull(message = \"The driver object was not provided.\")\n    private Condutor condutor;\n\n    @Getter\n    @Setter\n    @Column(name = \"entrada\", nullable = false)\n    @NotNull(message = \"The entry date of the movement was not provided.\")\n    private LocalDateTime entrada;\n\n    @Getter\n    @Setter\n    @Column(name = \"saida\")\n    private LocalDateTime saida;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempoHoras\")\n    private int tempoHoras;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempoMinutos\")\n    private int tempoMinutos;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_desconto\")\n    private int tempoDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_multaHoras\")\n    private int tempoMultaHoras;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_multaMinutes\")\n    private int tempoMultaMinutes;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_desconto\")\n    private BigDecimal valorDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_multa\")\n    private BigDecimal valorMulta;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_total\")\n    private BigDecimal valorTotal;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_hora\")\n    private BigDecimal valorHora;\n\n    @Getter\n    @Setter\n    @Column(name = \"valorhora_multa\")\n    private BigDecimal valorHoraMulta;\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Configuracao.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.NotNull;\n\nimport lombok.Getter;\nimport lombok.Setter;\n", "import lombok.Setter;\n\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\n\nimport java.math.BigDecimal;\nimport java.time.LocalTime;\n\n@Entity\n@Audited", "@Entity\n@Audited\n@Table(name = \"configuracoes\", schema = \"public\")\n@AuditTable(value = \"configuracoes_audit\", schema = \"audit\")\npublic class Configuracao extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_hora\", nullable = false)\n    @NotNull(message = \"The hour rate cannot be null.\")\n    private BigDecimal valorHora;\n\n    @Getter\n    @Setter\n    @Column(name = \"valor_minutomulta\", nullable = false)\n    @NotNull(message = \"The minute penalty value cannot be null.\")\n    private BigDecimal valorMinutoMulta;\n\n    @Getter\n    @Setter\n    @Column(name = \"inicio-expediente\", nullable = false)\n    @NotNull(message = \"The opening time cannot be null.\")\n    private LocalTime inicioExpediente;\n\n    @Getter\n    @Setter\n    @Column(name = \"fim_expediente\", nullable = false)\n    @NotNull(message = \"The closing time cannot be null.\")\n    private LocalTime fimExpediente;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_paradesconto\", nullable = false)\n    @NotNull(message = \"The discount time limit cannot be null.\")\n    private int tempoParaDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"tempo_dedesconto\", nullable = false)\n    @NotNull(message = \"The discount time value cannot be null.\")\n    private int tempoDeDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"gerar_desconto\")\n    private Boolean gerarDesconto;\n\n    @Getter\n    @Setter\n    @Column(name = \"vagas_moto\", nullable = false)\n    @NotNull(message = \"The motorcycle spaces field cannot be null.\")\n    private int vagasMoto;\n\n    @Getter\n    @Setter\n    @Column(name = \"vagas_carro\", nullable = false)\n    @NotNull(message = \"The car spaces field cannot be null.\")\n    private int vagasCarro;\n\n    @Getter\n    @Setter\n    @Column(name = \"vagas_van\", nullable = false)\n    @NotNull(message = \"The van spaces field cannot be null.\")\n    private int vagasVan;\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Modelo.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.*;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\n", "import org.hibernate.envers.Audited;\n\n@Entity\n@Audited\n@Table(name = \"modelos\", schema = \"public\")\n@AuditTable(value = \"modelos_audit\", schema = \"audit\")\npublic class Modelo extends AbstractEntity {\n\n    @Getter\n    @Setter\n    @Column(name = \"nome\", nullable = false, unique = true, length = 40)\n    @NotNull(message = \"The model name cannot be null.\")\n    @NotBlank(message = \"The model name cannot be blank.\")\n    @Size(min = 2, max = 40, message = \"The model name must have a minimum of 2 characters and a maximum of 40 characters.\")\n    private String nome;\n\n    @Getter\n    @Setter\n    @JoinColumn(name = \"marca_id\", nullable = false)\n    @ManyToOne(fetch = FetchType.EAGER)\n    @NotNull(message = \"The brand object must be provided.\")\n    private Marca marca;\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Veiculo.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.JoinColumn;", "import jakarta.persistence.Enumerated;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.Pattern;\n\nimport org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;", "import org.hibernate.envers.AuditTable;\nimport org.hibernate.envers.Audited;\nimport org.hibernate.validator.constraints.Range;\n\n@Getter\n@Setter\n@Entity\n@Audited\n@Table(name = \"veiculos\", schema = \"public\")\n@AuditTable(value = \"veiculos_audit\", schema = \"audit\")\npublic class Veiculo extends AbstractEntity {\n\n    @Column(name = \"placa\", nullable = false, unique = true)\n    @NotNull(message = \"The vehicle's license plate cannot be null.\")\n    @NotBlank(message = \"The vehicle's license plate cannot be empty.\")\n    @Getter\n    @Setter\n    private String placa;\n\n    @JoinColumn(name = \"modelo_id\", nullable = false)\n    @ManyToOne\n    @NotNull(message = \"The model object was not provided.\")\n    @Getter\n    @Setter\n    private Modelo modelo;\n\n    @Column(name = \"ano\", nullable = false)\n    @Range(min = 1990,max = 2025,message = \"Fabric year of the vehicle should be between 1990-2025\")\n    @Getter\n    @Setter\n    private int ano;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"cor\", nullable = false)\n    @NotNull(message = \"The vehicle's color cannot be null.\")\n    @Getter\n    @Setter\n    private Cor cor;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"tipo\", nullable = false)\n    @NotNull(message = \"The vehicle's type cannot be null.\")\n    @Getter\n    @Setter\n    private Tipo tipo;\n}\n\n\n", "@Table(name = \"veiculos\", schema = \"public\")\n@AuditTable(value = \"veiculos_audit\", schema = \"audit\")\npublic class Veiculo extends AbstractEntity {\n\n    @Column(name = \"placa\", nullable = false, unique = true)\n    @NotNull(message = \"The vehicle's license plate cannot be null.\")\n    @NotBlank(message = \"The vehicle's license plate cannot be empty.\")\n    @Getter\n    @Setter\n    private String placa;\n\n    @JoinColumn(name = \"modelo_id\", nullable = false)\n    @ManyToOne\n    @NotNull(message = \"The model object was not provided.\")\n    @Getter\n    @Setter\n    private Modelo modelo;\n\n    @Column(name = \"ano\", nullable = false)\n    @Range(min = 1990,max = 2025,message = \"Fabric year of the vehicle should be between 1990-2025\")\n    @Getter\n    @Setter\n    private int ano;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"cor\", nullable = false)\n    @NotNull(message = \"The vehicle's color cannot be null.\")\n    @Getter\n    @Setter\n    private Cor cor;\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"tipo\", nullable = false)\n    @NotNull(message = \"The vehicle's type cannot be null.\")\n    @Getter\n    @Setter\n    private Tipo tipo;\n}\n\n\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/AbstractEntity.java", "chunked_list": ["package br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.AssertTrue;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\n\n@MappedSuperclass\npublic abstract class AbstractEntity {\n\n    @Id\n    @Getter\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"id\", unique = true)\n    private Long id;\n\n    @Getter @Setter\n    @Column(name = \"dtCadastro\")\n    @DateTimeFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private LocalDateTime cadastro;\n\n    @Getter\n    @Setter\n    @Column(name = \"dtAtualizacao\")\n    @DateTimeFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")\n    private LocalDateTime atualizacao;\n\n    @Getter\n    @Setter\n    @Column(name = \"ativo\", nullable = false)\n    @NotNull(message = \"Campo ativo n\u00e3o informado.\")\n    private boolean ativo;\n\n    @PrePersist\n    private void updateCadastroOnPersist() {\n        this.cadastro = LocalDateTime.now();\n    }\n\n    @PreUpdate\n    private void updateAtualizacaoOnUpdate() {\n        this.atualizacao = LocalDateTime.now();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Cor.java", "chunked_list": ["/* -------------------Package--------------------------- */\npackage br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.validation.constraints.NotNull;\n\n/* ----------------------------------------------------- */\n@NotNull\npublic enum Cor {\n    SILVER,\n    GRAY,\n    WHITE,\n    BLACK,\n    PINK,\n    BLUE\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/entity/Tipo.java", "chunked_list": ["/* -------------------Package--------------------------- */\npackage br.com.uniamerica.estacionamento.entity;\n\nimport jakarta.validation.constraints.NotNull;\n\n/* ----------------------------------------------------- */\n@NotNull\npublic enum Tipo {\n    CAR,\n    MOTORCYCLE,\n    VAN\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/MovimentacaoRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Movimentacao}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Configuracao;\nimport br.com.uniamerica.estacionamento.entity.Movimentacao;\nimport br.com.uniamerica.estacionamento.entity.Tipo;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;", "import br.com.uniamerica.estacionamento.entity.Tipo;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.Collection;\nimport java.util.List;\n\npublic interface MovimentacaoRepository extends JpaRepository<Movimentacao, Long> {\n\n    /**\n     * Finds movements by the specified vehicle.\n     *\n     * @param veiculo the vehicle\n     * @return a list of movements associated with the specified vehicle\n     */\n    public List<Movimentacao> findByVeiculo(final Veiculo veiculo);\n\n    /**\n     * Retrieves all open movements.\n     *\n     * @return a list of open movements\n     */\n    @Query(\"from Movimentacao where saida = null\")\n    public List<Movimentacao> findAllAbertas();\n\n    /**\n     * Retrieves movements by the specified condutor ID.\n     *\n     * @param id the ID of the condutor\n     * @return a list of movements associated with the specified condutor ID\n     */\n    @Query(value = \"SELECT * FROM movimentacoes WHERE condutor_id = :id\", nativeQuery = true)\n    public List<Movimentacao> findByCondutorId(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves movements by the specified vehicle type.\n     *\n     * @param tipo the type of the vehicle\n     * @return a list of movements associated with the specified vehicle type\n     */\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.tipo = :tipo\")\n    List<Movimentacao> findByVeiculoTipo(@Param(\"tipo\") Tipo tipo);\n\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.id = :id\")\n    List<Movimentacao> findByVeiculoId(@Param(\"id\") Long id);\n\n    @Query(\"from Movimentacao where saida != null\")\n    public List<Movimentacao> findAllFechadas();\n\n    @Query(value = \"SELECT m FROM Movimentacao m ORDER BY m.id DESC LIMIT 1\")\n    Movimentacao ultimaMovimentacao();\n    @Query(\"SELECT m FROM Movimentacao m ORDER BY m.entrada DESC LIMIT 4\")\n    List<Movimentacao> findLastFiveByOrderByEntryDateDesc();\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.placa = :placa AND m.saida IS NULL\")\n    List<Movimentacao> findMovimentacoesAbertasByPlaca(@Param(\"placa\") String placa);\n\n}", "\npublic interface MovimentacaoRepository extends JpaRepository<Movimentacao, Long> {\n\n    /**\n     * Finds movements by the specified vehicle.\n     *\n     * @param veiculo the vehicle\n     * @return a list of movements associated with the specified vehicle\n     */\n    public List<Movimentacao> findByVeiculo(final Veiculo veiculo);\n\n    /**\n     * Retrieves all open movements.\n     *\n     * @return a list of open movements\n     */\n    @Query(\"from Movimentacao where saida = null\")\n    public List<Movimentacao> findAllAbertas();\n\n    /**\n     * Retrieves movements by the specified condutor ID.\n     *\n     * @param id the ID of the condutor\n     * @return a list of movements associated with the specified condutor ID\n     */\n    @Query(value = \"SELECT * FROM movimentacoes WHERE condutor_id = :id\", nativeQuery = true)\n    public List<Movimentacao> findByCondutorId(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves movements by the specified vehicle type.\n     *\n     * @param tipo the type of the vehicle\n     * @return a list of movements associated with the specified vehicle type\n     */\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.tipo = :tipo\")\n    List<Movimentacao> findByVeiculoTipo(@Param(\"tipo\") Tipo tipo);\n\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.id = :id\")\n    List<Movimentacao> findByVeiculoId(@Param(\"id\") Long id);\n\n    @Query(\"from Movimentacao where saida != null\")\n    public List<Movimentacao> findAllFechadas();\n\n    @Query(value = \"SELECT m FROM Movimentacao m ORDER BY m.id DESC LIMIT 1\")\n    Movimentacao ultimaMovimentacao();\n    @Query(\"SELECT m FROM Movimentacao m ORDER BY m.entrada DESC LIMIT 4\")\n    List<Movimentacao> findLastFiveByOrderByEntryDateDesc();\n    @Query(\"SELECT m FROM Movimentacao m JOIN m.veiculo v WHERE v.placa = :placa AND m.saida IS NULL\")\n    List<Movimentacao> findMovimentacoesAbertasByPlaca(@Param(\"placa\") String placa);\n\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/MarcaRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Marca}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;", "import org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface MarcaRepository extends JpaRepository<Marca, Long> {\n\n    /**\n     * Finds brands by the specified name.\n     *\n     * @param nome the name of the brand\n     * @return a list of brands with the specified name\n     */\n\n    @Query(\"SELECT m FROM Marca m WHERE m.nome like :nome\")", "    public Marca findByNome(@Param(\"nome\") final String nome);\n\n\n\n\n    /**\n     * Retrieves the name of the brand with the specified ID.\n     *\n     * @param id the ID of the brand\n     * @return the name of the brand\n     */\n    @Query(\"SELECT ma.nome FROM Marca ma WHERE ma.id = :id\")", "    public String findByNomeID(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves all active brands.\n     *\n     * @return a list of active brands\n     */\n    @Query(\"from Marca where ativo = true\")\n    public List<Marca> findAllAtivo();\n\n    /**\n     * Retrieves the active brands with the specified ID.\n     *\n     * @param id the ID of the brand\n     * @return a list of active brands with the specified ID\n     */\n    @Query(\"from Marca where id = :id and ativo = true\")\n    public List<Marca> findActiveElement(@Param(\"id\") Long id);\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/ConfiguracaoRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Configuracao}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Configuracao;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n", "import org.springframework.data.jpa.repository.Query;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\npublic interface ConfiguracaoRepository extends JpaRepository<Configuracao, Long> {\n\n    /**\n     * Finds configurations by the specified hourly value.\n     *\n     * @param valorHora the hourly value\n     * @return a list of configurations with the specified hourly value\n     */\n    public List<Configuracao> findByValorHora(final BigDecimal valorHora);\n\n    /**\n     * Finds a configuration by the specified penalty minute value.\n     *\n     * @param valorMinutoMulta the penalty minute value\n     * @return the configuration with the specified penalty minute value\n     */", "    public Configuracao findByValorMinutoMulta(final BigDecimal valorMinutoMulta);\n\n    /**\n     * Retrieves the latest configuration.\n     *\n     * @return the latest configuration\n     */\n    @Query(value = \"SELECT c FROM Configuracao c ORDER BY c.id DESC LIMIT 1\")\n    Configuracao ultimaConfiguracao();\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/VeiculoRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Veiculo}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Movimentacao;\nimport br.com.uniamerica.estacionamento.entity.Tipo;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport org.springframework.data.jpa.repository.JpaRepository;", "import br.com.uniamerica.estacionamento.entity.Veiculo;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface VeiculoRepository extends JpaRepository<Veiculo, Long> {\n\n    /**\n     * Finds a vehicle by the specified license plate.\n     *\n     * @param placa the license plate\n     * @return the vehicle with the specified license plate\n     */\n    @Query(\"FROM Veiculo WHERE placa = :placa\")", "    public Veiculo findByPlaca(@Param(\"placa\") final String placa);\n\n    /**\n     * Retrieves the license plate of the vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return the license plate of the vehicle\n     */\n    @Query(\"SELECT v.placa FROM Veiculo v WHERE v.id = :id\")\n    public String findByPlacaID(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves the year of the vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return the year of the vehicle\n     */\n    @Query(\"SELECT v.ano FROM Veiculo v WHERE v.id = :id\")", "    public String findByPlacaID(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves the year of the vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return the year of the vehicle\n     */\n    @Query(\"SELECT v.ano FROM Veiculo v WHERE v.id = :id\")\n    public String findByAnoID(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves all active vehicles.\n     *\n     * @return a list of active vehicles\n     */\n    @Query(\"from Veiculo where ativo = true\")\n    public List<Veiculo> findAllAtivo();\n\n    /**\n     * Retrieves movements associated with the vehicle of the specified model ID.\n     *\n     * @param id the ID of the model\n     * @return a list of movements associated with the specified model ID\n     */\n    @Query(\"FROM Veiculo WHERE id = :id\")\n    public List<Movimentacao> findByModeloId(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves the active vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return a list containing the active vehicle with the specified ID\n     */\n    @Query(\"from Veiculo where id = :id and ativo = true\")\n    public List<Veiculo> findActiveElement(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves the vehicle type of the vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return the vehicle type\n     */\n    @Query(\"SELECT v.tipo FROM Veiculo v WHERE v.id = :id\")\n    Tipo getTipoVeiculo(@Param(\"id\") Long id);\n\n    @Query(\"SELECT COUNT(v) > 0 FROM Veiculo v WHERE v.placa = :placa AND v.id <> :id\")\n    boolean existsByPlacaAndIdNot(@Param(\"placa\") String placa, @Param(\"id\") Long id);\n\n    @Query(\"SELECT COUNT(v) > 0 FROM Veiculo v WHERE v.placa = :placa\")\n    boolean existsByPlaca(@Param(\"placa\") String placa);\n}", "    public String findByAnoID(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves all active vehicles.\n     *\n     * @return a list of active vehicles\n     */\n    @Query(\"from Veiculo where ativo = true\")\n    public List<Veiculo> findAllAtivo();\n\n    /**\n     * Retrieves movements associated with the vehicle of the specified model ID.\n     *\n     * @param id the ID of the model\n     * @return a list of movements associated with the specified model ID\n     */\n    @Query(\"FROM Veiculo WHERE id = :id\")\n    public List<Movimentacao> findByModeloId(@Param(\"id\") final Long id);\n\n    /**\n     * Retrieves the active vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return a list containing the active vehicle with the specified ID\n     */\n    @Query(\"from Veiculo where id = :id and ativo = true\")\n    public List<Veiculo> findActiveElement(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves the vehicle type of the vehicle with the specified ID.\n     *\n     * @param id the ID of the vehicle\n     * @return the vehicle type\n     */\n    @Query(\"SELECT v.tipo FROM Veiculo v WHERE v.id = :id\")\n    Tipo getTipoVeiculo(@Param(\"id\") Long id);\n\n    @Query(\"SELECT COUNT(v) > 0 FROM Veiculo v WHERE v.placa = :placa AND v.id <> :id\")\n    boolean existsByPlacaAndIdNot(@Param(\"placa\") String placa, @Param(\"id\") Long id);\n\n    @Query(\"SELECT COUNT(v) > 0 FROM Veiculo v WHERE v.placa = :placa\")\n    boolean existsByPlaca(@Param(\"placa\") String placa);\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/ModeloRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Modelo}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Modelo;\nimport br.com.uniamerica.estacionamento.entity.Movimentacao;\nimport org.springframework.data.jpa.repository.JpaRepository;", "import br.com.uniamerica.estacionamento.entity.Movimentacao;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ModeloRepository extends JpaRepository<Modelo, Long> {\n\n    /**\n     * Finds models by the specified name.\n     *\n     * @param nome the name of the model\n     * @return a list of models with the specified name\n     */\n    @Query(\"SELECT m FROM Modelo m WHERE m.nome like :nome\")", "@Repository\npublic interface ModeloRepository extends JpaRepository<Modelo, Long> {\n\n    /**\n     * Finds models by the specified name.\n     *\n     * @param nome the name of the model\n     * @return a list of models with the specified name\n     */\n    @Query(\"SELECT m FROM Modelo m WHERE m.nome like :nome\")\n    public Modelo findByNome(@Param(\"nome\") final String nome);\n\n\n    /**\n     * Retrieves all active models.\n     *\n     * @return a list of active models\n     */\n    @Query(\"from Modelo where ativo = true\")\n    public List<Modelo> findAllAtivo();\n\n    /**\n     * Retrieves models by the specified brand ID.\n     *\n     * @param id the ID of the brand\n     * @return a list of models with the specified brand ID\n     */\n    @Query(\"FROM Modelo WHERE id = :id\")\n    public List<Modelo> findByMarcaId(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves the name of the model with the specified ID.\n     *\n     * @param nome the ID of the model\n     * @return the name of the model\n     */\n\n    @Query(\"SELECT m FROM Modelo m JOIN m.marca ma WHERE ma.nome = :nome\")\n    Modelo findByNomeMarca(@Param(\"nome\") final String nome);\n\n\n    /**\n     * Retrieves the active models with the specified ID.\n     *\n     * @param id the ID of the model\n     * @return a list of active models with the specified ID\n     */\n    @Query(\"from Modelo where id = :id and ativo = true\")\n    public List<Modelo> findActiveElement(@Param(\"id\") Long id);\n\n}", "    public Modelo findByNome(@Param(\"nome\") final String nome);\n\n\n    /**\n     * Retrieves all active models.\n     *\n     * @return a list of active models\n     */\n    @Query(\"from Modelo where ativo = true\")\n    public List<Modelo> findAllAtivo();\n\n    /**\n     * Retrieves models by the specified brand ID.\n     *\n     * @param id the ID of the brand\n     * @return a list of models with the specified brand ID\n     */\n    @Query(\"FROM Modelo WHERE id = :id\")\n    public List<Modelo> findByMarcaId(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves the name of the model with the specified ID.\n     *\n     * @param nome the ID of the model\n     * @return the name of the model\n     */\n\n    @Query(\"SELECT m FROM Modelo m JOIN m.marca ma WHERE ma.nome = :nome\")\n    Modelo findByNomeMarca(@Param(\"nome\") final String nome);\n\n\n    /**\n     * Retrieves the active models with the specified ID.\n     *\n     * @param id the ID of the model\n     * @return a list of active models with the specified ID\n     */\n    @Query(\"from Modelo where id = :id and ativo = true\")\n    public List<Modelo> findActiveElement(@Param(\"id\") Long id);\n\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/repository/CondutorRepository.java", "chunked_list": ["/**\n * This interface represents the repository for the entity {@link Condutor}.\n * It extends the {@link JpaRepository} interface, providing CRUD operations for the entity.\n */\npackage br.com.uniamerica.estacionamento.repository;\n\nimport br.com.uniamerica.estacionamento.entity.Condutor;\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;", "import org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface CondutorRepository extends JpaRepository<Condutor, Long> {\n\n    /**\n     * Retrieves the name of the condutor with the specified ID.\n     *\n     * @param id the ID of the condutor\n     * @return the name of the condutor\n     */\n    @Query(\"SELECT c.nome FROM Condutor c WHERE c.id = :id\")", "    public String findByNomeId(@Param(\"id\") Long id);\n\n    @Query(\"SELECT c FROM Condutor c WHERE c.nome like :nome\")\n    public Condutor findByNome(@Param(\"nome\") final String nome);\n\n\n    /**\n     * Finds a condutor by their CPF.\n     *\n     * @param cpf the CPF of the condutor\n     * @return the condutor with the specified CPF\n     */\n    @Query(\"SELECT c FROM Condutor c where c.cpf like :cpf\")", "    public Condutor findbyCPF(@Param(\"cpf\") final String cpf);\n\n    /**\n     * Retrieves all active condutors.\n     *\n     * @return a list of active condutors\n     */\n    @Query(\"from Condutor where ativo = true\")\n    public List<Condutor> findAllAtivo();\n\n    /**\n     * Retrieves the active condutors with the specified ID.\n     *\n     * @param id the ID of the condutor\n     * @return a list of active condutors with the specified ID\n     */\n    @Query(\"from Condutor where id = :id and ativo = true\")\n    public List<Condutor> findActiveElement(@Param(\"id\") Long id);\n\n    /**\n     * Retrieves the phone number of the condutor with the specified ID.\n     *\n     * @param id the ID of the condutor\n     * @return the phone number of the condutor\n     */\n    @Query(\"SELECT c.telefone FROM Condutor c WHERE c.id = :id\")", "    public String findByPhone(@Param(\"id\") Long id);\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/config/ValidationExceptionHandler.java", "chunked_list": ["package br.com.uniamerica.estacionamento.config;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestControllerAdvice\npublic class ValidationExceptionHandler {\n\n    /**\n     * Handles MethodArgumentNotValidException and returns a map of field errors.\n     *\n     * @param ex The MethodArgumentNotValidException to handle.\n     * @return Map of field errors.\n     */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public Map<String, String> handleValidationException(MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n\n            errors.put(fieldName, errorMessage);\n        });\n\n        return errors;\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/config/CustomExceptionHandler.java", "chunked_list": ["package br.com.uniamerica.estacionamento.config;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.time.format.DateTimeParseException;\n\n@RestControllerAdvice\npublic class CustomExceptionHandler {\n\n\n    @ExceptionHandler(DateTimeParseException.class)\n    public ResponseEntity<String> handleDateTimeParseException(DateTimeParseException ex) {\n        String errorMessage = \"Falha ao analisar a data e hora.\" +\n                \" Por favor, forne\u00e7a a data e hora no formato 'yyyy-MM-dd'T'HH:mm:ss'.\";\n        return new ResponseEntity<>(errorMessage, HttpStatus.BAD_REQUEST);\n    }\n\n}\n\n", "\n@RestControllerAdvice\npublic class CustomExceptionHandler {\n\n\n    @ExceptionHandler(DateTimeParseException.class)\n    public ResponseEntity<String> handleDateTimeParseException(DateTimeParseException ex) {\n        String errorMessage = \"Falha ao analisar a data e hora.\" +\n                \" Por favor, forne\u00e7a a data e hora no formato 'yyyy-MM-dd'T'HH:mm:ss'.\";\n        return new ResponseEntity<>(errorMessage, HttpStatus.BAD_REQUEST);\n    }\n\n}\n\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/config/CorsConfig.java", "chunked_list": ["package br.com.uniamerica.estacionamento.config;\n\nimport org.springframework.beans.factory.annotation.Configurable;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"http://localhost:8082\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .allowedHeaders(\"Content-Type\")\n                .allowCredentials(true);\n    }\n}\n", "public class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"http://localhost:8082\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .allowedHeaders(\"Content-Type\")\n                .allowCredentials(true);\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/ModeloController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Modelo;\nimport br.com.uniamerica.estacionamento.repository.ModeloRepository;\nimport br.com.uniamerica.estacionamento.repository.VeiculoRepository;\nimport br.com.uniamerica.estacionamento.service.ModeloService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/modelo\")\npublic class ModeloController {\n\n    @Autowired\n    private ModeloRepository modeloRepository;\n\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n\n    @Autowired\n    private ModeloService modeloService;\n\n    /**\n     * Retrieves a Modelo by ID.\n     *\n     * @param id The ID of the Modelo to retrieve.\n     * @return ResponseEntity with the Modelo if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Modelo modelo = modeloRepository.findById(id).orElse(null);\n        return modelo == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(modelo);\n    }\n\n    /**\n     * Retrieves all Modelos.\n     *\n     * @return ResponseEntity with a list of all Modelos.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Modelo>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.modeloService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<?> getAll() {\n        return ResponseEntity.ok(this.modeloRepository.findAll());\n    }\n\n    /**\n     * Retrieves active Modelos.\n     *\n     * @return ResponseEntity with a list of active Modelos.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findModelosAtivos() {\n        List<Modelo> modeloList = modeloRepository.findAllAtivo();", "@RestController\n@RequestMapping(\"/api/modelo\")\npublic class ModeloController {\n\n    @Autowired\n    private ModeloRepository modeloRepository;\n\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n\n    @Autowired\n    private ModeloService modeloService;\n\n    /**\n     * Retrieves a Modelo by ID.\n     *\n     * @param id The ID of the Modelo to retrieve.\n     * @return ResponseEntity with the Modelo if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Modelo modelo = modeloRepository.findById(id).orElse(null);\n        return modelo == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(modelo);\n    }\n\n    /**\n     * Retrieves all Modelos.\n     *\n     * @return ResponseEntity with a list of all Modelos.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Modelo>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.modeloService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<?> getAll() {\n        return ResponseEntity.ok(this.modeloRepository.findAll());\n    }\n\n    /**\n     * Retrieves active Modelos.\n     *\n     * @return ResponseEntity with a list of active Modelos.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findModelosAtivos() {\n        List<Modelo> modeloList = modeloRepository.findAllAtivo();", "        if (modeloList == null || modeloList.isEmpty()) {\n            return ResponseEntity.badRequest().body(\"N\u00e3o h\u00e1 nenhum modelo ativo\");\n        } else {\n            return ResponseEntity.ok(modeloList);\n        }\n    }\n\n    @GetMapping(\"/nome/{nome}\")\n    public ResponseEntity<?> getByNomeMarca(@PathVariable(\"nome\") String nome) {\n        return ResponseEntity.ok(this.modeloRepository.findByNome(nome));\n    }\n\n\n    /**\n     * Registers a new Modelo.\n     *\n     * @param modelo The Modelo object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerModelo(@RequestBody @Validated final Modelo modelo) {", "        try {\n            modeloService.validarCadastroModelo(modelo);\n            return ResponseEntity.ok(\"Registro Cadastrado com Sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Modelo.\n     *\n     * @param modelo The updated Modelo object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarModelo(@RequestBody @Validated final Modelo modelo) {", "        try {\n            modeloService.validarUpdateModelo(modelo);\n            return ResponseEntity.ok(\"Registro atualizado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Deletes a Modelo by ID.\n     *\n     * @param id The ID of the Modelo to delete.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @DeleteMapping\n    public ResponseEntity<?> excluirModelo(@RequestParam(\"id\") final Long id) {", "        try {\n            modeloService.validarDeleteModelo(id);\n            return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/VeiculoController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;\nimport br.com.uniamerica.estacionamento.repository.VeiculoRepository;\nimport br.com.uniamerica.estacionamento.service.VeiculoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"api/veiculo\")\npublic class VeiculoController {\n\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n\n    @Autowired\n    private VeiculoService veiculoService;\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    /**\n     * Retrieves a Veiculo by ID.\n     *\n     * @param id The ID of the Veiculo to retrieve.\n     * @return ResponseEntity with the Veiculo if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id)  {\n        final Veiculo veiculo = veiculoRepository.findById(id).orElse(null);\n        return veiculo == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(veiculo);\n    }\n\n    /**\n     * Retrieves all Veiculos.\n     *\n     * @return ResponseEntity with a list of all Veiculos.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Veiculo>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.veiculoService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<List<Veiculo>> getAll() {\n        return ResponseEntity.ok(\n                this.veiculoRepository.findAll()\n        );\n    }\n\n    /**\n     * Retrieves active Veiculos.\n     *\n     * @return ResponseEntity with a list of active Veiculos.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findVeiculosAtivos() {\n        List<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "@RestController\n@RequestMapping(\"api/veiculo\")\npublic class VeiculoController {\n\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n\n    @Autowired\n    private VeiculoService veiculoService;\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    /**\n     * Retrieves a Veiculo by ID.\n     *\n     * @param id The ID of the Veiculo to retrieve.\n     * @return ResponseEntity with the Veiculo if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id)  {\n        final Veiculo veiculo = veiculoRepository.findById(id).orElse(null);\n        return veiculo == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(veiculo);\n    }\n\n    /**\n     * Retrieves all Veiculos.\n     *\n     * @return ResponseEntity with a list of all Veiculos.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Veiculo>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.veiculoService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<List<Veiculo>> getAll() {\n        return ResponseEntity.ok(\n                this.veiculoRepository.findAll()\n        );\n    }\n\n    /**\n     * Retrieves active Veiculos.\n     *\n     * @return ResponseEntity with a list of active Veiculos.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findVeiculosAtivos() {\n        List<Veiculo> veiculoList = veiculoRepository.findAllAtivo();", "        if (veiculoList == null || veiculoList.isEmpty()) {\n            return ResponseEntity.badRequest().body(\"N\u00e3o tem nenhum veiculo ativo\");\n        } else {\n            return ResponseEntity.ok(veiculoList);\n        }\n    }\n\n    @GetMapping(\"/placa\")\n    public ResponseEntity<?> getByPlaca(@RequestParam(\"placa\") String placa) {\n        final Veiculo veiculo = this.veiculoRepository.findByPlaca(placa);\n", "        if (veiculo == null || veiculo.getPlaca() == null) {\n            return ResponseEntity.badRequest().body(\"placa inv\u00e1lida\");\n        }\n\n        return ResponseEntity.ok(veiculo);\n    }\n\n    /**\n     * Registers a new Veiculo.\n     *\n     * @param veiculo The Veiculo object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerVeiculo(@RequestBody @Validated final Veiculo veiculo) {", "        try {\n            veiculoService.validarCadastroVeiculo(veiculo);\n            return ResponseEntity.ok(\"Registro Cadastrado com Sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Veiculo.\n     *\n     * @param veiculo The updated Veiculo object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarVeiculo(@RequestBody @Validated final Veiculo veiculo) {", "        try {\n            veiculoService.validarUpdateVeiculo(veiculo);\n            return ResponseEntity.ok(\"Registro atualizado com sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Deletes a Veiculo by ID.\n     *\n     * @param id The ID of the Veiculo to delete.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @DeleteMapping\n    public ResponseEntity<?> excluirCondutor(@RequestParam(\"id\") final Long id) {", "        try {\n            veiculoService.validarDeleteVeiculo(id);\n            return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/CondutorController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Condutor;\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport br.com.uniamerica.estacionamento.repository.CondutorRepository;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;\nimport br.com.uniamerica.estacionamento.service.CondutorService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n", "import java.util.List;\n\n@RestController\n@RequestMapping(value = \"api/condutor\")\npublic class CondutorController {\n\n    @Autowired\n    private CondutorRepository condutorRepository;\n\n    @Autowired\n    private CondutorService condutorService;\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    /**\n     * Retrieves a Condutor by ID.\n     *\n     * @param id The ID of the Condutor to retrieve.\n     * @return ResponseEntity with the Condutor if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Condutor condutor = condutorRepository.findById(id).orElse(null);\n        return condutor == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(condutor);\n    }\n\n    /**\n     * Retrieves all Condutores.\n     *\n     * @return ResponseEntity with a list of all Condutores.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Condutor>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.condutorService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<List<Condutor>> getAll() {\n        return ResponseEntity.ok(\n                this.condutorRepository.findAll()\n        );\n    }\n\n    @GetMapping(\"/nome\")\n    public ResponseEntity<?> getByNome(@RequestParam(\"nome\") String nome) {\n        final Condutor condutor = this.condutorRepository.findByNome(nome);\n", "        if (condutor == null || condutor.getNome() == null) {\n            return ResponseEntity.badRequest().body(\"nome inv\u00e1lido\");\n        }\n\n        return ResponseEntity.ok(condutor);\n    }\n\n    @GetMapping(\"/cpf\")\n    public ResponseEntity<?> getByCPF(@RequestParam(\"cpf\") String cpf) {\n        final Condutor condutor = this.condutorRepository.findbyCPF(cpf);\n", "        if (condutor == null || condutor.getCpf() == null) {\n            return ResponseEntity.badRequest().body(\"cpf inv\u00e1lido\");\n        }\n\n        return ResponseEntity.ok(condutor);\n    }\n\n    /**\n     * Retrieves all active Condutores.\n     *\n     * @return ResponseEntity with a list of active Condutores.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findActiveCondutores() {\n        return ResponseEntity.ok(condutorRepository.findAllAtivo());\n    }\n\n    /**\n     * Creates a new Condutor.\n     *\n     * @param condutor The Condutor object to create.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> cadastrarCondutor(@RequestBody @Validated final Condutor condutor) {", "        try {\n            condutorService.validarCadastroCondutor(condutor);\n            return ResponseEntity.ok(\"Condutor cadastrado com sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Condutor.\n     *\n     * @param condutor The updated Condutor object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarCondutor(@RequestBody @Validated final Condutor condutor) {", "        try {\n            condutorService.validarUpdateCondutor(condutor);\n            return ResponseEntity.ok(\"Registro atualizado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Deletes a Condutor by ID.\n     *\n     * @param id The ID of the Condutor to delete.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @DeleteMapping\n    public ResponseEntity<?> excluirCondutor(@RequestParam(\"id\") final Long id) {", "        try {\n            condutorService.validarDeleteCondutor(id);\n            return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/MovimentacaoController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Movimentacao;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;\nimport br.com.uniamerica.estacionamento.service.MovimentacaoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;", "import org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"api/movimentacao\")\npublic class MovimentacaoController {\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    @Autowired\n    private MovimentacaoService movimentacaoService;\n\n    /**\n     * Retrieves a Movimentacao by ID.\n     *\n     * @param id The ID of the Movimentacao to retrieve.\n     * @return ResponseEntity with the Movimentacao if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Movimentacao movimentacao = movimentacaoRepository.findById(id).orElse(null);\n        return movimentacao == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(movimentacao);\n    }\n\n    /**\n     * Retrieves all Movimentacoes.\n     *\n     * @return ResponseEntity with a list of all Movimentacoes.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Movimentacao>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.movimentacaoService.listAll(pageable));\n    }\n    /**\n     * Retrieves open Movimentacoes.\n     *\n     * @return ResponseEntity with a list of open Movimentacoes.\n     */\n    @GetMapping(\"/abertas\")\n    public ResponseEntity<?> findMovimentacoesAbertas(@RequestParam(value = \"placa\", required = false) String placa) {", "@RestController\n@RequestMapping(\"api/movimentacao\")\npublic class MovimentacaoController {\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    @Autowired\n    private MovimentacaoService movimentacaoService;\n\n    /**\n     * Retrieves a Movimentacao by ID.\n     *\n     * @param id The ID of the Movimentacao to retrieve.\n     * @return ResponseEntity with the Movimentacao if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Movimentacao movimentacao = movimentacaoRepository.findById(id).orElse(null);\n        return movimentacao == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(movimentacao);\n    }\n\n    /**\n     * Retrieves all Movimentacoes.\n     *\n     * @return ResponseEntity with a list of all Movimentacoes.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Movimentacao>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.movimentacaoService.listAll(pageable));\n    }\n    /**\n     * Retrieves open Movimentacoes.\n     *\n     * @return ResponseEntity with a list of open Movimentacoes.\n     */\n    @GetMapping(\"/abertas\")\n    public ResponseEntity<?> findMovimentacoesAbertas(@RequestParam(value = \"placa\", required = false) String placa) {", "        if (placa != null && !placa.isEmpty()) {\n            // Perform a search based on the placa (vehicle license plate)\n            List<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);\n            return ResponseEntity.ok(movimentacoes);\n        } else {\n            // Retrieve all open Movimentacoes\n            List<Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();\n            return ResponseEntity.ok(movimentacoes);\n        }\n    }\n\n\n    @GetMapping(\"/closed\")\n    public ResponseEntity<?> findMovimentacoesFechadas() {\n        return ResponseEntity.ok(movimentacaoRepository.findAllFechadas());\n    }\n\n    @GetMapping(\"/last-five\")\n    public ResponseEntity<?> findMovimentacoesLastFive() {\n        List<Movimentacao> lastFiveMovimentacoes = movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();\n        return ResponseEntity.ok(lastFiveMovimentacoes);\n    }\n\n    @GetMapping(\"/last\")\n    public ResponseEntity<?> getLastRequest() {\n        return ResponseEntity.ok(movimentacaoRepository.ultimaMovimentacao());\n    }\n\n    /**\n     * Registers a new Movimentacao.\n     *\n     * @param movimentacao The Movimentacao object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerMovimentacao(@RequestBody @Validated final Movimentacao movimentacao) {", "        try {\n            movimentacaoService.validarCadastroMovimentacao(movimentacao);\n            if (movimentacao.getSaida() != null){\n                String relatorio = movimentacaoService.emitirRelatorio(movimentacao);\n                return ResponseEntity.ok(relatorio);\n            }else{\n                return ResponseEntity.ok(\"Registro Cadastrado com Sucesso\");\n            }\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Movimentacao.\n     *\n     * @param movimentacao The updated Movimentacao object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarMovimentacao(@RequestBody @Validated final Movimentacao movimentacao) {", "        try {\n            movimentacaoService.validarUpdateMovimentacao(movimentacao);\n            if (movimentacao.getSaida() != null){\n                String relatorio = movimentacaoService.emitirRelatorio(movimentacao);\n                return ResponseEntity.ok(relatorio);\n            }else{\n                return ResponseEntity.ok(\"Registro Atualizado com Sucesso\");\n            }\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e);\n        }\n    }\n\n    /**\n     * Deletes a Movimentacao by ID.\n     *\n     * @param id The ID of the Movimentacao to delete.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @DeleteMapping\n    public ResponseEntity<?> excluirMovimentacao(@RequestParam(\"id\") final Long id) {", "        try {\n            movimentacaoService.validarDeleteMovimentacao(id);\n            return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/ConfiguracaoController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Configuracao;\nimport br.com.uniamerica.estacionamento.repository.ConfiguracaoRepository;\nimport br.com.uniamerica.estacionamento.service.ConfiguracaoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"api/configuracao\")\npublic class ConfiguracaoController {\n\n    @Autowired\n    private ConfiguracaoRepository configuracaoRepository;\n\n    @Autowired\n    private ConfiguracaoService configuracaoService;\n\n    /**\n     * Retrieves a Configuracao by ID.\n     *\n     * @param id The ID of the Configuracao to retrieve.\n     * @return ResponseEntity with the Configuracao if found, otherwise a bad request response.\n     */\n    @GetMapping\n    public ResponseEntity<?> findByIdRequest(@RequestParam(\"id\") final Long id) {\n        final Configuracao configuracao = configuracaoRepository.findById(id).orElse(null);\n        return configuracao == null\n                ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\")\n                : ResponseEntity.ok(configuracao);\n    }\n\n    @GetMapping(\"/last\")\n    public ResponseEntity<?> getLastRequest() {\n        return ResponseEntity.ok(configuracaoRepository.ultimaConfiguracao());\n    }\n\n    /**\n     * Retrieves all Configuracoes.\n     *\n     * @return ResponseEntity with a list of all Configuracoes.\n     */\n    @GetMapping(\"/all\")\n    public ResponseEntity<?> getAllRequest() {\n        return ResponseEntity.ok(configuracaoRepository.findAll());\n    }\n\n    /**\n     * Registers a new Configuracao.\n     *\n     * @param configuracao The Configuracao object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerConfiguracao(@RequestBody @Validated final Configuracao configuracao) {", "        try {\n            configuracaoService.validarCadastroConfiguracao(configuracao);\n            return ResponseEntity.ok(\"Configuracao registrada com sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Configuracao.\n     *\n     * @param configuracao The updated Configuracao object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarConfiguracao(@RequestBody @Validated final Configuracao configuracao) {", "        try {\n            configuracaoService.validarUpdateConfiguracao(configuracao);\n            return ResponseEntity.ok(\"Registro atualizado com sucesso\");\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/controller/MarcaController.java", "chunked_list": ["package br.com.uniamerica.estacionamento.controller;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.repository.MarcaRepository;\nimport br.com.uniamerica.estacionamento.repository.ModeloRepository;\nimport br.com.uniamerica.estacionamento.service.MarcaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DataIntegrityViolationException;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n@CrossOrigin\n@RestController\n@RequestMapping(\"api/marca\")\npublic class MarcaController {\n\n    @Autowired\n    private MarcaRepository marcaRepository;\n\n    @Autowired\n    private ModeloRepository modeloRepository;\n\n    @Autowired\n    private MarcaService marcaService;\n\n    /**\n     * Retrieves a Marca by ID.\n     *\n     * @param id The ID of the Marca to retrieve.\n     * @return ResponseEntity with the Marca if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Marca marca = marcaRepository.findById(id).orElse(null);\n        return marca == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(marca);\n    }\n\n    /**\n     * Retrieves all Marcas.\n     *\n     * @return ResponseEntity with a list of all Marcas.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Marca>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.marcaService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<?> getAll() {\n        return ResponseEntity.ok(this.marcaRepository.findAll());\n    }\n\n\n    @GetMapping(\"/nome/{nome}\")\n    public ResponseEntity<?> getByNome(@PathVariable(\"nome\") String nome) {\n        return ResponseEntity.ok(this.marcaRepository.findByNome(nome));\n    }\n\n\n\n    /**\n     * Retrieves active Marcas.\n     *\n     * @return ResponseEntity with a list of active Marcas.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findMarcasAtivas() {\n        return ResponseEntity.ok(marcaRepository.findAllAtivo());\n    }\n\n    /**\n     * Registers a new Marca.\n     *\n     * @param marca The Marca object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerMarca(@RequestBody @Validated final Marca marca) {", "@RequestMapping(\"api/marca\")\npublic class MarcaController {\n\n    @Autowired\n    private MarcaRepository marcaRepository;\n\n    @Autowired\n    private ModeloRepository modeloRepository;\n\n    @Autowired\n    private MarcaService marcaService;\n\n    /**\n     * Retrieves a Marca by ID.\n     *\n     * @param id The ID of the Marca to retrieve.\n     * @return ResponseEntity with the Marca if found, otherwise a bad request response.\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getByIdRequest(@PathVariable(\"id\") Long id) {\n        final Marca marca = marcaRepository.findById(id).orElse(null);\n        return marca == null ? ResponseEntity.badRequest().body(\"ID n\u00e3o encontrado\") : ResponseEntity.ok(marca);\n    }\n\n    /**\n     * Retrieves all Marcas.\n     *\n     * @return ResponseEntity with a list of all Marcas.\n     */\n    @GetMapping\n    public ResponseEntity<Page<Marca>> getAllRequest(Pageable pageable) {\n        return ResponseEntity.ok(this.marcaService.listAll(pageable));\n    }\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<?> getAll() {\n        return ResponseEntity.ok(this.marcaRepository.findAll());\n    }\n\n\n    @GetMapping(\"/nome/{nome}\")\n    public ResponseEntity<?> getByNome(@PathVariable(\"nome\") String nome) {\n        return ResponseEntity.ok(this.marcaRepository.findByNome(nome));\n    }\n\n\n\n    /**\n     * Retrieves active Marcas.\n     *\n     * @return ResponseEntity with a list of active Marcas.\n     */\n    @GetMapping(\"/ativos\")\n    public ResponseEntity<?> findMarcasAtivas() {\n        return ResponseEntity.ok(marcaRepository.findAllAtivo());\n    }\n\n    /**\n     * Registers a new Marca.\n     *\n     * @param marca The Marca object to register.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PostMapping\n    public ResponseEntity<?> registerMarca(@RequestBody @Validated final Marca marca) {", "        try {\n            marcaService.validarCadastroMarca(marca);\n            return ResponseEntity.ok(\"Marca registrada com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest().body(e.getMessage());\n        }\n    }\n\n    /**\n     * Updates an existing Marca.\n     *\n     * @param marca The updated Marca object.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @PutMapping\n    public ResponseEntity<?> editarMarca(@RequestBody @Validated final Marca marca) {", "        try {\n            marcaService.validarUpdateMarca(marca);\n            return ResponseEntity.ok(\"Registro atualizado com sucesso\");\n        } catch (DataIntegrityViolationException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getCause().getCause().getMessage());\n        } catch (RuntimeException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Deletes a Marca by ID.\n     *\n     * @param id The ID of the Marca to delete.\n     * @return ResponseEntity indicating the success or failure of the operation.\n     */\n    @DeleteMapping\n    public ResponseEntity<?> excluirMarca(@RequestParam(\"id\") final Long id) {", "        try {\n            marcaService.validarDeleteMarca(id);\n            return ResponseEntity.ok(\"Registro apagado com sucesso\");\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.internalServerError().body(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/VeiculoService.java", "chunked_list": ["package br.com.uniamerica.estacionamento.service;\n\n\nimport br.com.uniamerica.estacionamento.entity.*;\nimport br.com.uniamerica.estacionamento.repository.ModeloRepository;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;\nimport br.com.uniamerica.estacionamento.repository.VeiculoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.time.LocalDateTime;\nimport java.time.Year;\nimport java.util.Optional;\nimport java.util.regex.Matcher;", "import java.util.Optional;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n\n/*\n- Essa classe \u00e9 respons\u00e1vel por realizar valida\u00e7\u00f5es de dados relacionados a veiculos.\n- Todas as valida\u00e7\u00f5es s\u00e3o realizadas atrav\u00e9s de m\u00e9todos que s\u00e3o executados quando um\n  cadastro, atualiza\u00e7\u00e3o ou exclus\u00e3o de veiculos \u00e9 solicitado.\n*/", "  cadastro, atualiza\u00e7\u00e3o ou exclus\u00e3o de veiculos \u00e9 solicitado.\n*/\n@Service\npublic class VeiculoService {\n\n    private static final int MIN_ALLOWED_YEAR = 2008;\n    int currentYear = Year.now().getValue();\n\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n    @Autowired\n    private ModeloRepository modeloRepository;\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n\n    /**\n     * Realiza valida\u00e7\u00f5es para cadastrar um novo ve\u00edculo no sistema.\n     *\n     * @param veiculo o objeto Veiculo a ser validado.\n     * @throws IllegalArgumentException se alguma das valida\u00e7\u00f5es n\u00e3o passar.\n     */\n    @Transactional", "    public void validarCadastroVeiculo(Veiculo veiculo) {\n\n        veiculo.setCadastro(LocalDateTime.now());\n\n        // Validate plate format\n        String brazilFormat = \"^[A-Z]{3}-\\\\d{4}$\"; // Format ABC-1234\n        String paraguayFormat = \"^[A-Z]{3}\\\\s\\\\d{4}$\"; // Format ABC 1234\n        String argentinaFormat = \"^[A-Z]{3}\\\\s\\\\d{3}$\"; // Format ABC 123\n\n        Pattern brazilPattern = Pattern.compile(brazilFormat);\n        Pattern paraguayPattern = Pattern.compile(paraguayFormat);\n        Pattern argentinaPattern = Pattern.compile(argentinaFormat);\n\n        Matcher brazilMatcher = brazilPattern.matcher(veiculo.getPlaca());\n        Matcher paraguayMatcher = paraguayPattern.matcher(veiculo.getPlaca());\n        Matcher argentinaMatcher = argentinaPattern.matcher(veiculo.getPlaca());\n\n        Assert.isTrue(brazilMatcher.matches() || paraguayMatcher.matches() || argentinaMatcher.matches(),\n                \"The plate format \" + veiculo.getPlaca() + \" is invalid. The expected format is ABC-1234 for Brazil, ABC 1234 for Paraguay, or ABC 123 for Argentina.\");\n\n        final Veiculo veiculoByPlaca = this.veiculoRepository.findByPlaca(veiculo.getPlaca());\n        Assert.isTrue(veiculoByPlaca == null,\n                \"There is already a registered vehicle with the license plate \" + veiculo.getPlaca() +\n                \". Please check if the data is correct and try again.\");\n\n        Assert.notNull(veiculo.getModelo().getId(), \"It was not possible to save the vehicle because the associated model was not found.\");\n\n        this.veiculoRepository.save(veiculo);\n\n    }\n\n    /**\n     * Valida os dados de um objeto Veiculo antes de atualiz\u00e1-lo no banco de dados.\n     * A transa\u00e7\u00e3o \u00e9 somente para leitura e ser\u00e1 revertida em caso de exce\u00e7\u00e3o.\n     *\n     * @param veiculo o objeto Veiculo a ser validado\n     */\n\n    @Transactional", "    public void validarUpdateVeiculo(Veiculo veiculo) {\n        veiculo.setAtualizacao(LocalDateTime.now());\n\n        final Veiculo veiculoByPlaca = this.veiculoRepository.findByPlaca(veiculo.getPlaca());\n        Optional<Veiculo> veiculoAtualOptional = veiculoRepository.findById(veiculo.getId());\n        if (veiculoAtualOptional.isPresent()) {\n            Veiculo veiculoAtual = veiculoAtualOptional.get();\n            if (!veiculoAtual.getPlaca().equals(veiculo.getPlaca())) {\n                Optional<Veiculo> veiculoByPlacaa = Optional.ofNullable(veiculoRepository.findByPlaca(veiculo.getPlaca()));\n                Assert.isTrue(!veiculoByPlacaa.isPresent(), \"There is already a registered vehicle with the license plate \" +\n                        veiculo.getPlaca() +\n                        \". Please check if the data is correct and try again.\");\n            }\n        }\n\n\n        veiculoRepository.save(veiculo);\n    }\n\n    /**\n     * Valida se um Veiculo com o ID fornecido existe no banco de dados antes de permitir sua exclus\u00e3o.\n     * A transa\u00e7\u00e3o \u00e9 somente para leitura e ser\u00e1 revertida em caso de exce\u00e7\u00e3o.\n     *\n     * @param id o ID do Veiculo a ser exclu\u00eddo\n     * @throws IllegalArgumentException se o ID do Veiculo n\u00e3o existir no banco de dados\n     */\n    @Transactional", "    public void validarDeleteVeiculo(Long id) {\n\n\n        final Veiculo veiculo = this.veiculoRepository.findById(id).orElse(null);\n        Assert.notNull(veiculo, \"Vehicle not registered !\");\n\n        if (!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {\n            veiculo.setAtivo(false);\n            this.veiculoRepository.save(veiculo);\n        } else {\n            this.veiculoRepository.delete(veiculo);\n        }\n    }\n\n    public Page<Veiculo> listAll(Pageable pageable) {\n        return this.veiculoRepository.findAll(pageable);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/CondutorService.java", "chunked_list": ["/**\n * The CondutorService class provides methods for managing Condutor entities.\n * It applies clean code principles and follows professional coding standards.\n */\npackage br.com.uniamerica.estacionamento.service;\n\nimport br.com.uniamerica.estacionamento.entity.Condutor;\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.repository.CondutorRepository;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;", "import br.com.uniamerica.estacionamento.repository.CondutorRepository;\nimport br.com.uniamerica.estacionamento.repository.MovimentacaoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class CondutorService {\n\n    private final CondutorRepository condutorRepository;\n    private final MovimentacaoRepository movimentacaoRepository;\n\n    @Autowired\n    public CondutorService(CondutorRepository condutorRepository, MovimentacaoRepository movimentacaoRepository) {\n        this.condutorRepository = condutorRepository;\n        this.movimentacaoRepository = movimentacaoRepository;\n    }\n\n    /**\n     * Validates the registration of a Condutor.\n     *\n     * @param condutor The Condutor to be validated and saved.\n     * @throws IllegalArgumentException If a Condutor with the same CPF already exists.\n     */\n    @Transactional", "    public void validarCadastroCondutor(Condutor condutor) {\n        condutor.setCadastro(LocalDateTime.now());\n\n        final Condutor condutorbyCPF = this.condutorRepository.findbyCPF(condutor.getCpf());\n        Assert.isNull(condutorbyCPF,\"CPF already exists\");\n\n        condutorRepository.save(condutor);\n    }\n\n    /**\n     * Validates the update of a Condutor.\n     *\n     * @param condutor The Condutor to be validated and updated.\n     * @throws IllegalArgumentException If the provided Condutor ID is null or not found in the database,\n     *                                  or if a Condutor with the same CPF already exists.\n     */\n    @Transactional", "    public void validarUpdateCondutor(Condutor condutor) {\n        condutor.setAtualizacao(LocalDateTime.now());\n\n        condutorRepository.save(condutor);\n    }\n\n    /**\n     * Validates the deletion of a Condutor.\n     *\n     * @param id The ID of the Condutor to be validated and deleted.\n     * @throws IllegalArgumentException If the provided Condutor ID is not found in the database.\n     */\n    @Transactional", "    public void validarDeleteCondutor(Long id){\n\n        /*\n         * Verifica se o Condutor informado existe\n         * */\n        final Condutor condutorBanco = this.condutorRepository.findById(id).orElse(null);\n        Assert.notNull(condutorBanco, \"Condutor n\u00e3o encontrado!\");\n\n        if(!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()){\n            condutorBanco.setAtivo(false);\n            this.condutorRepository.save(condutorBanco);\n        }else{\n            this.condutorRepository.delete(condutorBanco);\n        }\n    }\n\n    public Page<Condutor> listAll(Pageable pageable) {\n        return this.condutorRepository.findAll(pageable);\n    }\n}\n", "        if(!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()){\n            condutorBanco.setAtivo(false);\n            this.condutorRepository.save(condutorBanco);\n        }else{\n            this.condutorRepository.delete(condutorBanco);\n        }\n    }\n\n    public Page<Condutor> listAll(Pageable pageable) {\n        return this.condutorRepository.findAll(pageable);\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/MarcaService.java", "chunked_list": ["package br.com.uniamerica.estacionamento.service;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport br.com.uniamerica.estacionamento.repository.MarcaRepository;\nimport br.com.uniamerica.estacionamento.repository.ModeloRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;", "import org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\n\n/**", "\n/**\n * Service class responsible for performing validations related to car brands (marcas).\n */\n@Service\npublic class MarcaService {\n\n    @Autowired\n    public MarcaRepository marcaRepository;\n    @Autowired\n    public ModeloRepository modeloRepository;\n\n\n    /**\n     * Validates the registration of a new brand.\n     *\n     * @param marca The brand object to be validated.\n     * @throws IllegalArgumentException if the brand name already exists in the database or if it is not provided.\n     */\n    @Transactional", "    public MarcaRepository marcaRepository;\n    @Autowired\n    public ModeloRepository modeloRepository;\n\n\n    /**\n     * Validates the registration of a new brand.\n     *\n     * @param marca The brand object to be validated.\n     * @throws IllegalArgumentException if the brand name already exists in the database or if it is not provided.\n     */\n    @Transactional", "    public void validarCadastroMarca(Marca marca) {\n\n        marca.setCadastro(LocalDateTime.now());\n\n        Marca marcasByNome = marcaRepository.findByNome(marca.getNome());\n        Assert.isNull(marcasByNome,\n                \"A brand is already registered with the provided name.\");\n\n        marcaRepository.save(marca);\n    }\n\n    /**\n     * Validates the update of an existing brand.\n     *\n     * @param marca The brand object to be validated.\n     * @throws IllegalArgumentException if the brand ID is not provided or if the brand name already exists in the database.\n     */\n    @Transactional", "    public void validarUpdateMarca(Marca marca) {\n\n        marca.setAtualizacao(LocalDateTime.now());\n\n        marcaRepository.save(marca);\n    }\n\n    /**\n     * Validates the deletion of an existing brand.\n     *\n     * @param id The ID of the brand to be validated.\n     * @throws IllegalArgumentException if the ID does not exist in the database.\n     */\n    @Transactional", "    public void validarDeleteMarca(Long id){\n\n        final Marca marca = this.marcaRepository.findById(id).orElse(null);\n        Assert.notNull(marca, \"Marca n\u00e3o encontrado!\");\n\n        if(!this.modeloRepository.findByMarcaId(id).isEmpty()){\n            marca.setAtivo(false);\n            this.marcaRepository.save(marca);\n        }else{\n            this.marcaRepository.delete(marca);\n        }\n    }\n\n    public Page<Marca> listAll(Pageable pageable) {\n        return this.marcaRepository.findAll(pageable);\n    }\n}\n"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/MovimentacaoService.java", "chunked_list": ["//------------------Package----------------------\npackage br.com.uniamerica.estacionamento.service;\n\n//------------------Imports----------------------\n\nimport br.com.uniamerica.estacionamento.entity.*;\nimport br.com.uniamerica.estacionamento.repository.*;\nimport jakarta.persistence.EntityNotFoundException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;", "import java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.time.Duration;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.*;\n\n\n/*", "\n/*\n- Essa classe \u00e9 respons\u00e1vel por realizar valida\u00e7\u00f5es de dados relacionados a movimentacoes.\n- Todas as valida\u00e7\u00f5es s\u00e3o realizadas atrav\u00e9s de m\u00e9todos que s\u00e3o executados quando um\n  cadastro, atualiza\u00e7\u00e3o ou exclus\u00e3o de movimentacoes \u00e9 solicitado.\n*/\n@Service\npublic class MovimentacaoService {\n\n    @Autowired\n    private MovimentacaoRepository movimentacaoRepository;\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n    @Autowired\n    private CondutorRepository condutorRepository;\n    @Autowired\n    private ConfiguracaoRepository configuracaoRepository;\n    @Autowired\n    private MarcaRepository marcaRepository;\n    @Autowired\n    private ModeloRepository modeloRepository;\n\n\n    private Configuracao obterConfiguracao() {\n        Configuracao configuracao = configuracaoRepository.ultimaConfiguracao();", "        if (configuracao == null) {\n            throw new EntityNotFoundException(\"Error, the configurations were not defined.\");\n        }\n        return configuracao;\n    }\n\n    /**\n     * Realiza a valida\u00e7\u00e3o dos dados necess\u00e1rios para cadastrar uma movimenta\u00e7\u00e3o de ve\u00edculo no estacionamento.\n     *\n     * @param movimentacao a movimenta\u00e7\u00e3o de ve\u00edculo a ser validada\n     */\n    @Transactional", "    public void validarCadastroMovimentacao(Movimentacao movimentacao) {\n\n        movimentacao.setCadastro(LocalDateTime.now());\n        Configuracao configuracao = obterConfiguracao();\n\n        BigDecimal valorMinutoMulta = configuracao.getValorMinutoMulta();\n        System.out.println(valorMinutoMulta);\n        movimentacao.setValorHoraMulta(valorMinutoMulta.multiply(new BigDecimal(\"60.0\")));\n        movimentacao.setValorHora(configuracao.getValorHora());\n\n        validarMovimentacao(movimentacao);\n        verificarVagasDisponiveis(movimentacao);\n", "        if (movimentacao.getSaida() != null) {\n            LocalDateTime entrada = movimentacao.getEntrada();\n            LocalDateTime saida = movimentacao.getSaida();\n\n\n            if (entrada.isAfter(saida)) {\n                throw new IllegalArgumentException(\"The entry date must be before or equal to the exit date.\");\n            }\n\n            saidaOperations(movimentacao);\n            emitirRelatorio(movimentacao);\n        } else {\n            configurarValoresPadrao(movimentacao);\n        }\n\n        this.movimentacaoRepository.save(movimentacao);\n    }\n\n    /**\n     * M\u00e9todo respons\u00e1vel por validar os dados de uma movimenta\u00e7\u00e3o antes de sua atualiza\u00e7\u00e3o.\n     *\n     * @param movimentacao Movimenta\u00e7\u00e3o a ser validada\n     */\n    @Transactional", "    public void validarUpdateMovimentacao(Movimentacao movimentacao) {\n\n        Configuracao configuracao = obterConfiguracao();\n\n        BigDecimal valorMinutoMulta = configuracao.getValorMinutoMulta();\n        movimentacao.setValorHoraMulta(valorMinutoMulta.multiply(new BigDecimal(\"60.0\")));\n        movimentacao.setValorHora(configuracao.getValorHora());\n\n        movimentacao.setAtualizacao(LocalDateTime.now());\n        Assert.notNull(movimentacao.getId(), \"The ID of the provided movement is null.\");\n\n        Assert.isTrue(movimentacaoRepository.existsById(movimentacao.getId()),\n                \"The specified movement ID was not found in the database.\");\n\n        verificarVagasDisponiveis(movimentacao);\n        validarMovimentacao(movimentacao);\n\n", "        if (movimentacao.getSaida() != null) {\n            saidaOperations(movimentacao);\n            emitirRelatorio(movimentacao);\n\n        } else {\n            configurarValoresPadrao(movimentacao);\n        }\n\n        this.movimentacaoRepository.save(movimentacao);\n    }\n\n    /**\n     * Verifica se o ID da movimenta\u00e7\u00e3o existe no banco de dados e, se existir, permite que ela seja exclu\u00edda.\n     *\n     * @param id o ID da movimenta\u00e7\u00e3o a ser exclu\u00edda\n     * @throws IllegalArgumentException se o ID da movimenta\u00e7\u00e3o n\u00e3o existir no banco de dados\n     */\n    @Transactional", "    public void validarDeleteMovimentacao(Long id){\n        /*\n         * Verifica se a Movimenta\u00e7\u00e3o informada existe\n         * */\n        final Movimentacao movimentacao = this.movimentacaoRepository.findById(id).orElse(null);\n        Assert.notNull(movimentacao, \"Movimentation not found!\");\n\n        movimentacaoRepository.delete(movimentacao);\n    }\n\n    private void validarMovimentacao(Movimentacao movimentacao) {\n        // Validar ve\u00edculo e condutor\n        validarVeiculo(movimentacao.getVeiculo());\n        validarCondutor(movimentacao.getCondutor());\n\n        LocalTime entrada = LocalTime.from(movimentacao.getEntrada());\n        LocalTime inicioExpediente = obterConfiguracao().getInicioExpediente();\n        LocalTime fimExpediente = obterConfiguracao().getFimExpediente();\n\n    }\n\n    private void validarCondutor(Condutor condutor) {\n\n        // Garantir que o condutor esteja ativo\n        final List<Condutor> isActive = condutorRepository.findActiveElement(condutor.getId());\n        Assert.isTrue(!isActive.isEmpty(), \"The driver associated with this movement is inactive.\");\n\n\n        // Garantir que o condutor exista no reposit\u00f3rio\n        Assert.isTrue(condutorRepository.existsById(condutor.getId()),\n                \"Unable to register the movement, the specified driver was not found in the system.\");\n\n    }\n\n    private void validarVeiculo(Veiculo veiculo) {\n\n        final List<Veiculo> isActive = veiculoRepository.findActiveElement(veiculo.getId());\n        Assert.isTrue(!isActive.isEmpty(), \"The vehicle associated with this movement is inactive.\");\n\n        // Garantir que o ve\u00edculo exista no reposit\u00f3rio\n        Assert.isTrue(veiculoRepository.existsById(veiculo.getId()),\n                \"Unable to register the movement, the specified vehicle was not found in the system.\");\n\n    }\n\n    private void saidaOperations(Movimentacao movimentacao) {\n\n        Configuracao configuracao = obterConfiguracao();\n\n        // Definindo hor\u00e1rio de funcionamento do estacionamento\n        LocalTime OPENING_TIME = configuracao.getInicioExpediente();\n        LocalTime CLOSING_TIME = configuracao.getFimExpediente();\n\n        LocalDateTime entrada = movimentacao.getEntrada();\n        LocalDateTime saida = movimentacao.getSaida();\n\n        BigDecimal valorMinutoMulta = configuracao.getValorMinutoMulta();\n\n\n        // Calcula a dura\u00e7\u00e3o entre a entrada e a sa\u00edda\n        Duration duracao = Duration.between(entrada, saida);\n\n        long totalSecoundsOfDuration = duracao.getSeconds();\n        long hours = totalSecoundsOfDuration / 3600;\n        long minutes = (totalSecoundsOfDuration % 3600) / 60;\n\n        // Define as horas e minutos totais da movimenta\u00e7\u00e3o\n        movimentacao.setTempoHoras((int) hours);\n        movimentacao.setTempoMinutos((int) minutes);\n\n        // Calcular tempoMulta e valorTempoMulta\n        calculateMulta(movimentacao, entrada, saida, OPENING_TIME, CLOSING_TIME);\n\n        // Configurar tempos pagos e de desconto para o condutor associado\n        valoresCondutor(movimentacao);\n\n        // Gerenciar todas as opera\u00e7\u00f5es de desconto\n        manageDesconto(movimentacao);\n\n        BigDecimal valorHorasEstacionadas = BigDecimal.valueOf(movimentacao.getTempoHoras())\n                .multiply(movimentacao.getValorHora())\n                .add(BigDecimal.valueOf(movimentacao.getTempoMinutos())\n                        .multiply(movimentacao.getValorHora())\n                        .divide(BigDecimal.valueOf(60), 2, RoundingMode.HALF_UP));\n\n        BigDecimal valorTotal = valorHorasEstacionadas\n                .add(movimentacao.getValorMulta())\n                .subtract(movimentacao.getValorDesconto());\n//                .max(BigDecimal.ZERO) // Prevent negative result\n//                .setScale(2, RoundingMode.HALF_UP);\n\n        movimentacao.setValorTotal(valorTotal);\n\n\n        movimentacao.setValorTotal(valorTotal);\n\n\n    }\n\n    private void valoresCondutor(Movimentacao movimentacao) {\n        // Obter o condutor da movimenta\u00e7\u00e3o\n        Condutor condutor = condutorRepository.findById(movimentacao.getCondutor().getId()).orElse(null);\n        assert condutor != null;\n\n        // Adicionar horas e minutos pagos ao condutor\n        int hoursToAdd = movimentacao.getTempoHoras();\n        int minutesToAdd = movimentacao.getTempoMinutos();\n\n        condutor.setTempoPagoHoras(condutor.getTempoPagoHoras() + hoursToAdd);\n        condutor.setTempoPagoMinutos(condutor.getTempoPagoMinutos() + minutesToAdd);\n\n        // Verificar se os minutos pagos ultrapassaram 60 minutos\n        int extraHours = condutor.getTempoPagoMinutos() / 60;\n        condutor.setTempoPagoMinutos(condutor.getTempoPagoMinutos() % 60);\n        condutor.setTempoPagoHoras(condutor.getTempoPagoHoras() + extraHours);\n\n    }\n\n    private void calculateMulta(Movimentacao movimentacao,\n                                LocalDateTime entrada,\n                                LocalDateTime saida,\n                                LocalTime inicioExpediente,\n                                LocalTime fimExpediente) {\n\n        int tempoMultaMinutos = 0;\n        int ano = saida.getYear() - entrada.getYear();\n        int dias = 0;\n", "        if (ano > 0) {\n            dias += saida.getDayOfYear() + (365 * ano) - entrada.getDayOfYear();\n        } else {\n            dias += saida.getDayOfYear() - entrada.getDayOfYear();\n        }\n        if (entrada.toLocalTime().isBefore(inicioExpediente)) {\n            tempoMultaMinutos += ((int) Duration.between(entrada.toLocalTime(), inicioExpediente).toMinutes());\n        }\n        if (saida.toLocalTime().isAfter(fimExpediente)) {\n            tempoMultaMinutos += ((int) Duration.between(fimExpediente, saida.toLocalTime()).toMinutes());\n        }", "        if (saida.toLocalTime().isAfter(fimExpediente)) {\n            tempoMultaMinutos += ((int) Duration.between(fimExpediente, saida.toLocalTime()).toMinutes());\n        }\n        if (dias > 0) {\n            int diferenca = ((int) Duration.between(inicioExpediente, fimExpediente).toMinutes());\n            tempoMultaMinutos += (dias * 24 * 60)\n                    - (diferenca * dias);\n        }\n\n//        ;\n//\n//        // Calculando valor multa\n//        BigDecimal valorMultaTotal = (new BigDecimal(movimentacao.getTempoMultaHoras())\n//                .multiply(movimentacao.getValorHoraMulta()))\n//                .add(new BigDecimal(movimentacao.getTempoMultaMinutes())\n//                        .multiply(movimentacao.getValorHoraMulta()\n//                                .divide(new BigDecimal(60), RoundingMode.HALF_UP)));\n\n        movimentacao.setValorMulta(BigDecimal.valueOf(tempoMultaMinutos).multiply(obterConfiguracao().getValorMinutoMulta()));\n    }\n\n\n    private void manageDesconto(Movimentacao movimentacao) {\n\n        Condutor condutor = condutorRepository.findById(movimentacao.getCondutor().getId()).orElse(null);\n", "        if (condutor == null) {\n            return;\n        }\n\n        int tempoPagoHoras = condutor.getTempoPagoHoras();\n        int tempoHoras = movimentacao.getTempoHoras();\n        Configuracao configuracao = obterConfiguracao();\n\n        int currentMultiple = tempoPagoHoras / configuracao.getTempoParaDesconto();\n        int nextMultiple = (tempoPagoHoras + tempoHoras) / configuracao.getTempoParaDesconto();\n", "        if (nextMultiple > currentMultiple) {\n            int numNewMultiples = nextMultiple - currentMultiple;\n            int descontoToAdd = numNewMultiples * configuracao.getTempoDeDesconto();\n            int currentDesconto = condutor.getTempoDescontoHoras();\n            int newDescontoHours = currentDesconto + descontoToAdd;\n            condutor.setTempoDescontoHoras(newDescontoHours);\n        }\n\n        int tempoDesconto = condutor.getTempoDescontoHoras();\n        movimentacao.setTempoDesconto(tempoDesconto);\n", "        if (configuracao.getGerarDesconto()) {\n            BigDecimal valorDesconto = BigDecimal.valueOf(tempoDesconto).multiply(movimentacao.getValorHora());\n            movimentacao.setValorDesconto(valorDesconto);\n        } else {\n            movimentacao.setValorDesconto(BigDecimal.ZERO);\n        }\n    }\n\n\n    private void verificarVagasDisponiveis(Movimentacao movimentacao) {\n        Tipo tipoVeiculo = veiculoRepository.getTipoVeiculo(movimentacao.getVeiculo().getId());\n\n        List<Movimentacao> qtdeVeiculo = movimentacaoRepository.findByVeiculoTipo(tipoVeiculo);\n\n        int vagasOccupadas = qtdeVeiculo.size();\n\n        int vagasDisponiveis = switch (tipoVeiculo) {\n            case MOTORCYCLE -> obterConfiguracao().getVagasMoto() - vagasOccupadas;\n            case CAR -> obterConfiguracao().getVagasCarro() - vagasOccupadas;\n            case VAN -> obterConfiguracao().getVagasVan() - vagasOccupadas;\n            default -> throw new IllegalArgumentException(\"Vehicle type is invalid! \");\n        };\n", "        if (vagasDisponiveis <= 0) {\n            throw new IllegalArgumentException(\"There are no available parking spaces for \" +\n                    veiculoRepository.getTipoVeiculo(movimentacao.getVeiculo().getId()).toString());\n        }\n    }\n\n    private void configurarValoresPadrao(Movimentacao movimentacao) {\n\n        // Configurar valores padr\u00e3o para a movimenta\u00e7\u00e3o\n        movimentacao.setTempoHoras(0);\n        movimentacao.setTempoMinutos(0);\n        movimentacao.setValorDesconto(BigDecimal.ZERO);\n        movimentacao.setValorMulta(BigDecimal.ZERO);\n\n    }\n", "    public String emitirRelatorio(Movimentacao movimentacao) {\n        String nomeCondutor = condutorRepository.findByNomeId(movimentacao.getCondutor().getId());\n        String phoneCondutor = condutorRepository.findByPhone(movimentacao.getCondutor().getId());\n        String placaVeiculo = veiculoRepository.findByPlacaID(movimentacao.getVeiculo().getId());\n        Tipo tipo = veiculoRepository.getTipoVeiculo(movimentacao.getVeiculo().getId());\n        String ano = veiculoRepository.findByAnoID(movimentacao.getVeiculo().getId());\n\n        StringBuilder reportBuilder = new StringBuilder();\n        String lineSeparator = \"\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\";\n        String headerSeparator = \"\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\";\n\n        reportBuilder.append(\"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n\");\n        reportBuilder.append(\"\u2551            Fechamento da Movimenta\u00e7\u00e3o               \u2551\\n\");\n        reportBuilder.append(headerSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551           Informa\u00e7\u00f5es sobre o Condutor              \u2551\\n\");\n        reportBuilder.append(lineSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Nome do Condutor:             \").append(nomeCondutor).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Telefone do Condutor:         \").append(phoneCondutor).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Quantidade de Horas Desconto: \").append(movimentacao.getTempoDesconto())\n                .append(\" horas\\n\");\n        reportBuilder.append(headerSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551            Informa\u00e7\u00f5es sobre o Ve\u00edculo              \u2551\\n\");\n        reportBuilder.append(lineSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Placa do Veiculo:               \").append(placaVeiculo).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Tipo  do Veiculo:               \").append(tipo).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Ano de Fabrica\u00e7\u00e3o:              \").append(ano).append(\"\\n\");\n        reportBuilder.append(headerSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551        Informa\u00e7\u00f5es sobre a Movimenta\u00e7\u00e3o Atual       \u2551\\n\");\n        reportBuilder.append(lineSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Data de Entrada:           \").append(movimentacao.getEntrada()).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Data de Sa\u00edda:             \").append(movimentacao.getSaida()).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Tempo Estacionado:         \").append(movimentacao.getTempoHoras())\n                .append(\" horas e \")\n                .append(movimentacao.getTempoMinutos()).append(\" minutos\\n\");\n        reportBuilder.append(\"\u2551 Tempo Multa:               \").append(movimentacao.getTempoMultaHoras())\n                .append(\" horas e \")\n                .append(movimentacao.getTempoMultaMinutes()).append(\" minutos\\n\");\n        reportBuilder.append(\"\u2551 Tempo de Desconto:         \").append(movimentacao.getTempoDesconto())\n                .append(\" horas\\n\");\n        reportBuilder.append(headerSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551          Valores da Movimenta\u00e7\u00e3o Atual              \u2551\\n\");\n        reportBuilder.append(lineSeparator).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Valor da Multa:            \").append(movimentacao.getValorMulta()).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Valor de Desconto:         \").append(movimentacao.getValorDesconto()).append(\"\\n\");\n        reportBuilder.append(\"\u2551 Valor Total:               \").append(movimentacao.getValorTotal()).append(\"\\n\");\n        reportBuilder.append(\"\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\");\n\n        System.out.println(reportBuilder.toString());\n        return reportBuilder.toString();\n    }\n\n    public Page<Movimentacao> listAll(Pageable pageable) {\n        return this.movimentacaoRepository.findAll(pageable);\n    }\n\n\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/ModeloService.java", "chunked_list": ["package br.com.uniamerica.estacionamento.service;\n\nimport br.com.uniamerica.estacionamento.entity.Marca;\nimport br.com.uniamerica.estacionamento.entity.Modelo;\nimport br.com.uniamerica.estacionamento.entity.Veiculo;\nimport br.com.uniamerica.estacionamento.repository.MarcaRepository;\nimport br.com.uniamerica.estacionamento.repository.ModeloRepository;\nimport br.com.uniamerica.estacionamento.repository.VeiculoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.Banner;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.Banner;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * Service class responsible for performing data validations related to modelos.\n * All validations are performed through methods that are executed when creating, updating, or deleting a modelo.\n */\n@Service\npublic class ModeloService {\n\n    @Autowired", "@Service\npublic class ModeloService {\n\n    @Autowired\n    public ModeloRepository modeloRepository;\n    @Autowired\n    public MarcaRepository marcaRepository;\n    @Autowired\n    private VeiculoRepository veiculoRepository;\n\n    /**\n     * Validates the information of a new modelo before it is saved to the database.\n     *\n     * @param modelo The modelo to be validated.\n     * @throws IllegalArgumentException If the modelo information is incorrect.\n     */\n    @Transactional", "    public void validarCadastroModelo(Modelo modelo) {\n        modelo.setCadastro(LocalDateTime.now());\n        // Verificar se o nome do modelo j\u00e1 existe no banco de dados\n        final Modelo existingModel = this.modeloRepository.findByNome(modelo.getNome());\n        Assert.isNull(existingModel, \"A model is already registered with the provided name.\");\n\n//        // Verificar se o ID da marca foi informado e se ele existe no banco de dados\n//        Assert.notNull(modelo.getMarca().getId(), \"It was not possible to save the model because the associated brand was not found.\");\n//\n//        Modelo modelo1 = this.modeloRepository.findByNomeMarca(modelo.getMarca().getNome());\n//        Assert.isNull(modelo1,\"It was not possible to save the model because the associated brand was not found.\");\n        modeloRepository.save(modelo);\n    }\n\n    /**\n     * Validates the information of an existing modelo before it is updated.\n     *\n     * @param modelo The modelo to be validated.\n     * @throws IllegalArgumentException If the modelo information is incorrect.\n     */\n    @Transactional", "    public void validarUpdateModelo(Modelo modelo) {\n        modelo.setAtualizacao(LocalDateTime.now());\n\n        // Verificar se o nome do modelo j\u00e1 existe no banco de dados\n        final Modelo existingModel = this.modeloRepository.findByNome(modelo.getNome());\n        Assert.isNull(existingModel, \"A model is already registered with the provided name.\");\n//\n//\n//\n//        Modelo modelo1 = this.modeloRepository.findByNomeMarca(modelo.getMarca().getNome());\n//        Assert.isNull(modelo1,\"It was not possible to save the\" +\n//                \" model because the associated brand was not found.\");\n\n        modeloRepository.save(modelo);\n    }\n\n    /**\n     * Validates the information of a modelo to be deleted.\n     *\n     * @param id The ID of the modelo to be validated.\n     * @throws IllegalArgumentException If the modelo ID does not exist in the database.\n     */\n    @Transactional", "    public void validarDeleteModelo(Long id) {\n\n        final Modelo modelo = this.modeloRepository.findById(id).orElse(null);\n        Assert.notNull(modelo, \"Modelo n\u00e3o encontrado!\");\n\n        if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {\n            modelo.setAtivo(false);\n            this.modeloRepository.save(modelo);\n        } else {\n            this.modeloRepository.delete(modelo);\n        }\n    }\n\n    /**\n     * Validates if a modelo ID exists in the database.\n     *\n     * @param modeloId The ID of the modelo to be validated.\n     * @throws IllegalArgumentException If the modelo ID does not exist in the database.\n     */\n    private void validarIdModelo(Long modeloId) {\n        Assert.notNull(modeloId,\n                \"ID do modelo nao pode ser nulo.\");\n        Assert.isTrue(modeloRepository.existsById(modeloId),\n                \"N\u00e3o foi poss\u00edvel apagar o modelo, pois o ID  n\u00e3o foi encontrado.\");\n    }\n\n    /**\n     * Validates if the marca associated with the modelo is active.\n     *\n     * @param marcaId The ID of the marca associated with the modelo.\n     * @throws IllegalArgumentException If the marca associated with the modelo is inactive.\n     */\n    private void validarMarcaAtiva(Long marcaId) {\n        final List<Marca> isActive = marcaRepository.findActiveElement(marcaId);\n        Assert.isTrue(!isActive.isEmpty(), \"The brand associated with this model is inactive.\");\n    }\n\n    /**\n     * Validates if a marca ID is provided and exists in the database.\n     *\n     * @param marcaId The ID of the marca associated with the modelo.\n     * @throws IllegalArgumentException If the marca ID is not provided or does not exist in the database.\n     */\n    private void validarIdMarca(Long marcaId) {\n        Assert.notNull(marcaId, \"The brand ID in the model cannot be null.\");\n        Assert.isTrue(marcaRepository.existsById(marcaId),\n                \"Failed to save the model because the associated brand was not found.\");\n    }\n\n    private void validarNomeModelo(Modelo modelo) {\n        // Verificar se o nome do modelo j\u00e1 existe no banco de dados\n        final Modelo modelosCurrent = this.modeloRepository.findByNome(modelo.getNome());\n        Assert.isTrue(modelosCurrent == null,\n                \"A model is already registered with the provided name. \" +\n                        \"Please check the entered data and try again.\");\n\n    }\n\n    public Page<Modelo> listAll(Pageable pageable) {\n        return this.modeloRepository.findAll(pageable);\n    }\n\n}"]}
{"filename": "src/main/java/br/com/uniamerica/estacionamento/service/ConfiguracaoService.java", "chunked_list": ["package br.com.uniamerica.estacionamento.service;\n\nimport br.com.uniamerica.estacionamento.entity.Configuracao;\nimport br.com.uniamerica.estacionamento.repository.ConfiguracaoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\n\n/**\n * Service class for managing configurations.\n */\n@Service\npublic class ConfiguracaoService {\n\n    private final ConfiguracaoRepository configuracaoRepository;\n\n    /**\n     * Constructs a ConfiguracaoService with the specified repository.\n     *\n     * @param configuracaoRepository the repository for configurations\n     */\n    @Autowired\n    public ConfiguracaoService(ConfiguracaoRepository configuracaoRepository) {\n        this.configuracaoRepository = configuracaoRepository;\n    }\n\n    /**\n     * Validates and saves the provided configuration.\n     *\n     * @param configuracao the configuration to be validated and saved\n     */\n    @Transactional", "    public void validarCadastroConfiguracao(Configuracao configuracao) {\n        configuracao.setCadastro(LocalDateTime.now());\n        configuracaoRepository.save(configuracao);\n    }\n\n    /**\n     * Validates and updates the provided configuration.\n     *\n     * @param configuracao the configuration to be validated and updated\n     */\n    @Transactional(rollbackFor = Exception.class)", "    public void validarUpdateConfiguracao(Configuracao configuracao) {\n        configuracao.setAtualizacao(LocalDateTime.now());\n        validateConfiguracaoId(configuracao);\n        configuracaoRepository.save(configuracao);\n    }\n\n    /**\n     * Validates the ID of the provided configuration.\n     *\n     * @param configuracao the configuration to be validated\n     * @throws IllegalArgumentException if the ID of the configuration is null or not found in the database\n     */\n    private void validateConfiguracaoId(Configuracao configuracao) {\n        Assert.notNull(configuracao.getId(),\n                \"The provided configuration ID is null. \" +\n                        \"Make sure the configuration object has a valid ID before performing this operation.\");\n        Assert.isTrue(configuracaoRepository.existsById(configuracao.getId()),\n                \"The specified configuration ID was not found in the database. \" +\n                        \"Please verify that the ID is correct and try again.\");\n    }\n\n}\n"]}
