{"filename": "src/main/java/com/mineblock11/simplebroadcast/SimpleBroadcast.java", "chunked_list": ["package com.mineblock11.simplebroadcast;\n\nimport com.mineblock11.simplebroadcast.commands.SimpleBroadcastCommands;\nimport com.mineblock11.simplebroadcast.data.ConfigurationManager;\nimport net.fabricmc.api.ModInitializer;\nimport net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;\n\npublic class SimpleBroadcast implements ModInitializer {\n    public SimpleBroadcastCommands commands = new SimpleBroadcastCommands();\n\n    @Override", "    public SimpleBroadcastCommands commands = new SimpleBroadcastCommands();\n\n    @Override\n    public void onInitialize() {\n//        ArgumentTypeRegistry.registerArgumentType(new Identifier(\"simplebroadcast\", \"message_type\"), MessageTypeArgument.class, ConstantArgumentSerializer.of(MessageTypeArgument::new));\n//        ArgumentTypeRegistry.registerArgumentType(new Identifier(\"simplebroadcast\", \"broadcast_location\"), BroadcastLocationArgument.class, ConstantArgumentSerializer.of(BroadcastLocationArgument::new));\n\n        ConfigurationManager.loadConfig();\n\n        CommandRegistrationCallback.EVENT.register(commands::registerCommands);\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/commands/SimpleBroadcastCommands.java", "chunked_list": ["package com.mineblock11.simplebroadcast.commands;\n\nimport com.mineblock11.simplebroadcast.commands.arguments.MessagePresetSuggestionProvider;\nimport com.mineblock11.simplebroadcast.commands.arguments.MessageTypeSuggestionProvider;\nimport com.mineblock11.simplebroadcast.data.BroadcastLocation;\nimport com.mineblock11.simplebroadcast.data.BroadcastMessage;\nimport com.mineblock11.simplebroadcast.data.ConfigurationManager;\nimport com.mineblock11.simplebroadcast.data.MessageType;\nimport com.mojang.brigadier.Command;\nimport com.mojang.brigadier.CommandDispatcher;", "import com.mojang.brigadier.Command;\nimport com.mojang.brigadier.CommandDispatcher;\nimport com.mojang.brigadier.arguments.StringArgumentType;\nimport com.mojang.brigadier.context.CommandContext;\nimport eu.pb4.placeholders.api.PlaceholderContext;\nimport eu.pb4.placeholders.api.Placeholders;\nimport eu.pb4.placeholders.api.TextParserUtils;\nimport eu.pb4.placeholders.api.node.parent.ParentTextNode;\nimport net.minecraft.command.CommandRegistryAccess;\nimport net.minecraft.command.CommandSource;", "import net.minecraft.command.CommandRegistryAccess;\nimport net.minecraft.command.CommandSource;\nimport net.minecraft.command.argument.IdentifierArgumentType;\nimport net.minecraft.server.command.CommandManager;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Identifier;\n\nimport java.util.Arrays;\n", "import java.util.Arrays;\n\nimport static net.minecraft.server.command.CommandManager.argument;\nimport static net.minecraft.server.command.CommandManager.literal;\n\npublic class SimpleBroadcastCommands {\n    public void registerCommands(CommandDispatcher<ServerCommandSource> commandDispatcher, CommandRegistryAccess registryAccess, CommandManager.RegistrationEnvironment registrationEnvironment) {\n        commandDispatcher.register(\n                literal(\"broadcast\")\n                        .requires(source -> source.hasPermissionLevel(4))\n                        .then(argument(\"contents\", StringArgumentType.string()).executes(this::quickBroadcast))\n                        .then(literal(\"preset\")\n                                .then(\n                                        literal(\"create\")\n                                                .then(\n                                                        argument(\"id\", IdentifierArgumentType.identifier())\n                                                                .then(\n                                                                        argument(\"type\", IdentifierArgumentType.identifier())\n                                                                                .suggests(new MessageTypeSuggestionProvider())\n                                                                                .executes(this::createBlankPreset)\n                                                                                .then(\n                                                                                        argument(\"contents\", StringArgumentType.string())\n                                                                                                .executes(this::createContentPreset)\n                                                                                )\n                                                                )\n\n                                                )\n                                )\n                                .then(\n                                        argument(\"id\", IdentifierArgumentType.identifier())\n                                                .suggests(new MessagePresetSuggestionProvider())\n                                                .executes(this::executePresetBroadcast)\n                                                .then(\n                                                        literal(\"contents\")\n                                                                .executes(this::getPresetContents)\n                                                                .then(\n                                                                        argument(\"value\", StringArgumentType.string())\n                                                                                .executes(this::setPresetContents)\n                                                                )\n                                                )\n                                                .then(\n                                                        literal(\"location\")\n                                                                .executes(this::getPresetLocation)\n                                                                .then(\n                                                                        argument(\"location\", StringArgumentType.word())\n                                                                                .suggests((a, builder) -> CommandSource.suggestMatching(Arrays.stream(BroadcastLocation.values()).map(value -> value.asString()), builder))\n                                                                                .executes(this::setPresetLocation)\n                                                                )\n                                                )\n                                                .then(\n                                                        literal(\"type\")\n                                                                .executes(this::getPresetType)\n                                                                .then(\n                                                                        argument(\"type\", IdentifierArgumentType.identifier())\n                                                                                .suggests(new MessageTypeSuggestionProvider())\n                                                                                .executes(this::setPresetType)\n                                                                )\n                                                )\n                                                .then(literal(\"delete\").executes(this::deletePreset))\n                                )\n                        )\n                        .then(literal(\"types\")\n                                .then(\n                                        argument(\"type\", IdentifierArgumentType.identifier())\n                                                .suggests(new MessageTypeSuggestionProvider())\n                                                .then(literal(\"location\").executes(this::getMessageTypeLocation).then(\n                                                        argument(\"location\", StringArgumentType.word())\n                                                                .suggests((a, builder) -> CommandSource.suggestMatching(Arrays.stream(BroadcastLocation.values()).map(value -> value.asString()), builder))\n                                                                .executes(this::setMessageTypeLocation)))\n                                                .then(literal(\"prefix\").executes(this::getMessageTypePrefix)\n                                                        .then(argument(\"value\", StringArgumentType.string())\n                                                                .executes(this::setMessageTypePrefix)))\n                                                .then(literal(\"suffix\").executes(this::getMessageTypeSuffix)\n                                                        .then(\n                                                                argument(\"value\", StringArgumentType.string())\n                                                                        .executes(this::setMessageTypeSuffix))))\n                                .then(\n                                        literal(\"create\").then(\n                                                argument(\"id\", IdentifierArgumentType.identifier()).executes(this::createMessageType)))\n                        )\n                        .then(literal(\"help\").executes(this::displayHelpPrompt))\n                        .then(\n                                argument(\"type\", IdentifierArgumentType.identifier())\n                                        .suggests(new MessageTypeSuggestionProvider())\n                                        .then(\n                                                argument(\"location\", StringArgumentType.word())\n                                                        .suggests((a, builder) -> CommandSource.suggestMatching(Arrays.stream(BroadcastLocation.values()).map(value -> value.asString()), builder))\n                                                        .then(argument(\"contents\", StringArgumentType.string())\n                                                                .executes(this::executeLocationBroadcast)))\n                                        .then(\n                                                argument(\"contents\", StringArgumentType.string())\n                                                        .executes(this::executeChatBroadcast)))\n        );\n    }\n\n    private void sendFeedback(CommandContext<ServerCommandSource> commandContext, String feedback) {\n        commandContext.getSource().sendFeedback(() -> TextParserUtils.formatText(feedback), true);\n    }\n\n    private int createContentPreset(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        String contents = StringArgumentType.getString(commandContext, \"contents\");\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        BroadcastMessage message = new BroadcastMessage(contents, type, type.getDefaultLocation());\n\n        ConfigurationManager.MESSAGE_PRESET_REGISTRY.put(ID, message);\n\n        sendFeedback(commandContext, \"<color:gold>Created a new message preset.\\nPlease configure it using the <color:gray>/broadcast preset \" + ID + \" ...<color:gold> command.\");\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int createBlankPreset(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        BroadcastMessage message = new BroadcastMessage(\"<color:gold>This is a message preset, please configure it using the <color:gray>/broadcast preset \" + ID + \" ...<color:gold> command.\", type, type.getDefaultLocation());\n\n        ConfigurationManager.MESSAGE_PRESET_REGISTRY.put(ID, message);\n\n        sendFeedback(commandContext, \"<color:gold>Created a new message preset.\\nPlease configure it using the <color:gray>/broadcast preset \" + ID + \" ...<color:gold> command.\");\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int deletePreset(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n\n        ConfigurationManager.MESSAGE_PRESET_REGISTRY.remove(ID);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> has been deleted.\");\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getPresetContents(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(ID);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> has the following contents:\\n<r>\" + preset.getRawContents());\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setPresetContents(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(ID);\n        String contents = StringArgumentType.getString(commandContext, \"value\");\n\n        preset.setRawContents(contents);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> now has the following contents:\\n<r>\" + preset.getRawContents());\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getPresetLocation(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(ID);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> is shown at the following location: <color:gray>\" + preset.getBroadcastLocation().asString());\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setPresetLocation(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(ID);\n        BroadcastLocation location = BroadcastLocation.valueOf(StringArgumentType.getString(commandContext, \"location\").toUpperCase());\n\n        preset.setBroadcastLocation(location);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> is now shown at the following location: <color:gray>\" + preset.getBroadcastLocation().asString());\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getPresetType(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"id\"));\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> uses the <color:gray>\" + preset.getMessageType().getID() + \"<color:gold> message type.\");\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setPresetType(CommandContext<ServerCommandSource> commandContext) {\n        Identifier ID = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(ID);\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n\n        preset.setMessageType(type);\n\n        sendFeedback(commandContext, \"<color:gray>\" + ID + \"<color:gold> now uses the <color:gray>\" + type.getID() + \"<color:gold> message type.\");\n\n        ConfigurationManager.saveConfig();\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int executePresetBroadcast(CommandContext<ServerCommandSource> commandContext) {\n        BroadcastMessage preset = ConfigurationManager.MESSAGE_PRESET_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"id\"));\n        preset.broadcast(commandContext.getSource().getServer(), commandContext.getSource());\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int quickBroadcast(CommandContext<ServerCommandSource> commandContext) {\n        String rawContents = StringArgumentType.getString(commandContext, \"contents\");\n        BroadcastMessage message = new BroadcastMessage(rawContents, new MessageType.SimpleBroadcastDefaultMessageType(), BroadcastLocation.CHAT);\n        message.broadcast(commandContext.getSource().getServer(), commandContext.getSource());\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setMessageTypeLocation(CommandContext<ServerCommandSource> commandContext) {\n        BroadcastLocation location = BroadcastLocation.valueOf(StringArgumentType.getString(commandContext, \"location\").toUpperCase());\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        type.setDefaultLocation(location);\n\n        sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> default display location is now:<r> <color:gray>\" + location.asString());\n\n        ConfigurationManager.saveConfig();\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getMessageTypeLocation(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n\n        sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> default display location is:<r> <color:gray>\" + type.getDefaultLocation().asString());\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setMessageTypeSuffix(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        String rawContents = StringArgumentType.getString(commandContext, \"value\");\n        type.setSuffix(rawContents);\n\n        sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> now has the following suffix:<r> \");\n\n        ConfigurationManager.saveConfig();\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getMessageTypeSuffix(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n", "        if (!type.hasSuffix()) {\n            sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> does not have a suffix.<r>\");\n        } else {\n            sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> has the following suffix:<r> \");\n        }\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int setMessageTypePrefix(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        String rawContents = StringArgumentType.getString(commandContext, \"value\");\n        type.setPrefix(rawContents);\n\n        sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> now has the following prefix:<r> \");\n\n        ConfigurationManager.saveConfig();\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int getMessageTypePrefix(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n", "        if (!type.hasPrefix()) {\n            sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> does not have a prefix.<r>\");\n        } else {\n            sendFeedback(commandContext, \"<color:gray>\" + type.getID() + \"<r><color:gold> has the following prefix:<r> \");\n        }\n\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int createMessageType(CommandContext<ServerCommandSource> commandContext) {\n        Identifier id = IdentifierArgumentType.getIdentifier(commandContext, \"id\");\n        sendFeedback(commandContext, \"<color:gold>Created new broadcast message type: <color:gray>\" + id);\n        MessageType.CustomMessageType messageType = new MessageType.CustomMessageType(null, null, null);\n        ConfigurationManager.MESSAGE_TYPE_REGISTRY.put(id, messageType);\n        ConfigurationManager.saveConfig();\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int displayHelpPrompt(CommandContext<ServerCommandSource> commandContext) {\n        String helpPrompt = \"<color:gold>SimpleBroadcast<r> <dark_gray>%server:mod_version simplebroadcast%<r>\\n\" +\n                \"<color:blue><underline><italic><url:'https://docs.mineblock11.dev/simplebroadcast'>https://docs.mineblock11.dev/simplebroadcast<r>\";\n        PlaceholderContext context = PlaceholderContext.of(commandContext.getSource());\n        ParentTextNode contents = TextParserUtils.formatNodes(helpPrompt);\n        Text parsed = Placeholders.parseText(contents, context);\n        commandContext.getSource().sendFeedback(() -> parsed, false);\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int executeLocationBroadcast(CommandContext<ServerCommandSource> commandContext) {\n        BroadcastLocation location = BroadcastLocation.valueOf(StringArgumentType.getString(commandContext, \"location\").toUpperCase());\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        String rawContents = StringArgumentType.getString(commandContext, \"contents\");\n        BroadcastMessage message = new BroadcastMessage(rawContents, type, location);\n        message.broadcast(commandContext.getSource().getServer(), commandContext.getSource());\n        return Command.SINGLE_SUCCESS;\n    }\n\n    private int executeChatBroadcast(CommandContext<ServerCommandSource> commandContext) {\n        MessageType type = ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.getIdentifier(commandContext, \"type\"));\n        String rawContents = StringArgumentType.getString(commandContext, \"contents\");\n        BroadcastMessage message = new BroadcastMessage(rawContents, type, type.getDefaultLocation());\n        message.broadcast(commandContext.getSource().getServer(), commandContext.getSource());\n        return Command.SINGLE_SUCCESS;\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/commands/arguments/BroadcastLocationArgument.java", "chunked_list": ["package com.mineblock11.simplebroadcast.commands.arguments;\n\nimport com.mineblock11.simplebroadcast.data.BroadcastLocation;\nimport com.mojang.brigadier.StringReader;\nimport com.mojang.brigadier.arguments.ArgumentType;\nimport com.mojang.brigadier.arguments.StringArgumentType;\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.exceptions.CommandSyntaxException;\n\npublic class BroadcastLocationArgument implements ArgumentType<BroadcastLocation> {\n    public static BroadcastLocation get(final CommandContext<?> context, final String name) {\n        return context.getArgument(name, BroadcastLocation.class);\n    }\n\n    @Override", "\npublic class BroadcastLocationArgument implements ArgumentType<BroadcastLocation> {\n    public static BroadcastLocation get(final CommandContext<?> context, final String name) {\n        return context.getArgument(name, BroadcastLocation.class);\n    }\n\n    @Override\n    public BroadcastLocation parse(StringReader reader) throws CommandSyntaxException {\n        return BroadcastLocation.valueOf(StringArgumentType.word().parse(reader).toUpperCase());\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/commands/arguments/MessageTypeArgument.java", "chunked_list": ["package com.mineblock11.simplebroadcast.commands.arguments;\n\nimport com.mineblock11.simplebroadcast.data.ConfigurationManager;\nimport com.mineblock11.simplebroadcast.data.MessageType;\nimport com.mojang.brigadier.StringReader;\nimport com.mojang.brigadier.arguments.ArgumentType;\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.exceptions.CommandSyntaxException;\nimport net.minecraft.command.argument.IdentifierArgumentType;\n\npublic class MessageTypeArgument implements ArgumentType<MessageType> {", "import net.minecraft.command.argument.IdentifierArgumentType;\n\npublic class MessageTypeArgument implements ArgumentType<MessageType> {\n    public static MessageType get(final CommandContext<?> context, final String name) {\n        return context.getArgument(name, MessageType.class);\n    }\n\n    public MessageType parse(StringReader stringReader) throws CommandSyntaxException {\n        return ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(IdentifierArgumentType.identifier().parse(stringReader));\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/commands/arguments/MessagePresetSuggestionProvider.java", "chunked_list": ["package com.mineblock11.simplebroadcast.commands.arguments;\n\nimport com.mineblock11.simplebroadcast.data.ConfigurationManager;\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.exceptions.CommandSyntaxException;\nimport com.mojang.brigadier.suggestion.SuggestionProvider;\nimport com.mojang.brigadier.suggestion.Suggestions;\nimport com.mojang.brigadier.suggestion.SuggestionsBuilder;\nimport net.minecraft.command.CommandSource;\nimport net.minecraft.server.command.ServerCommandSource;", "import net.minecraft.command.CommandSource;\nimport net.minecraft.server.command.ServerCommandSource;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class MessagePresetSuggestionProvider implements SuggestionProvider<ServerCommandSource> {\n    @Override\n    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) throws CommandSyntaxException {\n        return CommandSource.suggestIdentifiers(ConfigurationManager.MESSAGE_PRESET_REGISTRY.keySet(), builder);\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/commands/arguments/MessageTypeSuggestionProvider.java", "chunked_list": ["package com.mineblock11.simplebroadcast.commands.arguments;\n\nimport com.mineblock11.simplebroadcast.data.ConfigurationManager;\nimport com.mojang.brigadier.context.CommandContext;\nimport com.mojang.brigadier.exceptions.CommandSyntaxException;\nimport com.mojang.brigadier.suggestion.SuggestionProvider;\nimport com.mojang.brigadier.suggestion.Suggestions;\nimport com.mojang.brigadier.suggestion.SuggestionsBuilder;\nimport net.minecraft.command.CommandSource;\nimport net.minecraft.server.command.ServerCommandSource;", "import net.minecraft.command.CommandSource;\nimport net.minecraft.server.command.ServerCommandSource;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class MessageTypeSuggestionProvider implements SuggestionProvider<ServerCommandSource> {\n    @Override\n    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) throws CommandSyntaxException {\n        return CommandSource.suggestIdentifiers(ConfigurationManager.MESSAGE_TYPE_REGISTRY.keySet(), builder);\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/data/MessageType.java", "chunked_list": ["package com.mineblock11.simplebroadcast.data;\n\nimport eu.pb4.placeholders.api.PlaceholderContext;\nimport eu.pb4.placeholders.api.Placeholders;\nimport eu.pb4.placeholders.api.TextParserUtils;\nimport eu.pb4.placeholders.api.node.parent.ParentTextNode;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.text.MutableText;\nimport net.minecraft.text.Text;", "import net.minecraft.text.MutableText;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Identifier;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.Objects;\n\npublic abstract class MessageType {\n\n    protected @Nullable String prefix, suffix;\n    protected BroadcastLocation defaultLocation = BroadcastLocation.CHAT;\n", "    public BroadcastLocation getDefaultLocation() {\n        return defaultLocation;\n    }\n\n    public void setDefaultLocation(BroadcastLocation _location) {\n        this.defaultLocation = _location;\n    }\n\n    @Nullable\n    public Identifier getID() {\n        for (var entry : ConfigurationManager.MESSAGE_TYPE_REGISTRY.entrySet()) {", "    public Identifier getID() {\n        for (var entry : ConfigurationManager.MESSAGE_TYPE_REGISTRY.entrySet()) {\n            if (entry.getValue().equals(this)) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n\n    @Nullable\n    public String getPrefix() {\n        return prefix;\n    }\n", "    public String getPrefix() {\n        return prefix;\n    }\n\n    public void setPrefix(String _prefix) {\n        this.prefix = _prefix;\n    }\n\n    @Nullable\n    public String getSuffix() {\n        return suffix;\n    }\n", "    public String getSuffix() {\n        return suffix;\n    }\n\n    public void setSuffix(String _suffix) {\n        this.suffix = _suffix;\n    }\n\n    public Text getPrefixAsText() {\n        return TextParserUtils.formatText(getPrefix());\n    }\n", "    public Text getPrefixAsText() {\n        return TextParserUtils.formatText(getPrefix());\n    }\n\n    public Text getSuffixAsText() {\n        return TextParserUtils.formatText(getSuffix());\n    }\n\n    public Text getPrefixAsText(MinecraftServer server, @Nullable ServerCommandSource source) {\n        ParentTextNode contents = TextParserUtils.formatNodes(getPrefix());\n        PlaceholderContext context = source == null ? PlaceholderContext.of(server) : PlaceholderContext.of(source);\n        return Placeholders.parseText(contents, context);\n    }\n", "    public Text getPrefixAsText(MinecraftServer server, @Nullable ServerCommandSource source) {\n        ParentTextNode contents = TextParserUtils.formatNodes(getPrefix());\n        PlaceholderContext context = source == null ? PlaceholderContext.of(server) : PlaceholderContext.of(source);\n        return Placeholders.parseText(contents, context);\n    }\n\n    public Text getSuffixAsText(MinecraftServer server, @Nullable ServerCommandSource source) {\n        ParentTextNode contents = TextParserUtils.formatNodes(getSuffix());\n        PlaceholderContext context = source == null ? PlaceholderContext.of(server) : PlaceholderContext.of(source);\n        return Placeholders.parseText(contents, context);\n    }\n", "    public abstract Text formatMessageContents(MutableText contents, MinecraftServer server, @Nullable ServerCommandSource source);\n\n    public boolean hasSuffix() {\n        return this.suffix != null;\n    }\n\n    public boolean hasPrefix() {\n        return this.prefix != null;\n    }\n\n    public static class VanillaMessageType extends CustomMessageType {\n        public VanillaMessageType() {\n            super(\"[Server]\", null, null);\n        }\n    }\n", "    public static class VanillaMessageType extends CustomMessageType {\n        public VanillaMessageType() {\n            super(\"[Server]\", null, null);\n        }\n    }\n\n    public static class SimpleBroadcastDefaultMessageType extends CustomMessageType {\n        public SimpleBroadcastDefaultMessageType() {\n            super(\"<color:dark_gray>[<color:dark_red><bold>BROADCAST<r><color:dark_gray>]\", null, null);\n        }\n    }\n", "    public static class PlainMessageType extends CustomMessageType {\n        public PlainMessageType() {\n            super(null, null, null);\n        }\n    }\n\n    public static class CustomMessageType extends MessageType {\n        public CustomMessageType(@Nullable String prefix, @Nullable String suffix, @Nullable BroadcastLocation defaultLocation) {\n            this.prefix = prefix;\n            this.suffix = suffix;\n            this.defaultLocation = Objects.requireNonNullElse(defaultLocation, BroadcastLocation.CHAT);\n        }\n\n        @Override", "        public Text formatMessageContents(MutableText contents, MinecraftServer server, @Nullable ServerCommandSource source) {\n            MutableText content = Text.empty();\n            if (this.getPrefix() != null) {\n                content = content\n                        .append(this.getPrefixAsText(server, source))\n                        .append(\" \");\n            }\n            content = content.append(contents);\n            if (this.getSuffix() != null) {\n                content = content\n                        .append(\" \")\n                        .append(this.getSuffixAsText(server, source));\n            }\n            return content;\n        }\n    }\n}\n", "            if (this.getSuffix() != null) {\n                content = content\n                        .append(\" \")\n                        .append(this.getSuffixAsText(server, source));\n            }\n            return content;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/data/BroadcastLocation.java", "chunked_list": ["package com.mineblock11.simplebroadcast.data;\n\nimport net.minecraft.util.StringIdentifiable;\n\npublic enum BroadcastLocation implements StringIdentifiable {\n    ACTIONBAR,\n    CHAT,\n    TITLE;\n\n    @Override\n    public String asString() {\n        return this.name().toLowerCase();\n    }\n}\n", "    public String asString() {\n        return this.name().toLowerCase();\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/data/ConfigurationManager.java", "chunked_list": ["package com.mineblock11.simplebroadcast.data;\n\nimport com.google.gson.*;\nimport com.google.gson.stream.JsonReader;\nimport net.fabricmc.loader.api.FabricLoader;\nimport net.minecraft.util.Identifier;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;", "import java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class ConfigurationManager {\n    public static final HashMap<Identifier, MessageType> MESSAGE_TYPE_REGISTRY = new HashMap<>();", "\npublic class ConfigurationManager {\n    public static final HashMap<Identifier, MessageType> MESSAGE_TYPE_REGISTRY = new HashMap<>();\n    public static final HashMap<Identifier, BroadcastMessage> MESSAGE_PRESET_REGISTRY = new HashMap<>();\n//    public static final HashMap<Identifier> MESSAGE_POOL_REGISTRY = new HashMap<>();\n//    public static final HashMap<Identifier, Object> SCHEDULE_REGISTRY = new HashMap<>();\n\n    static {\n        var $default = new MessageType.SimpleBroadcastDefaultMessageType();\n        ConfigurationManager.MESSAGE_TYPE_REGISTRY.put(new Identifier(\"minecraft:vanilla\"), new MessageType.VanillaMessageType());\n        ConfigurationManager.MESSAGE_TYPE_REGISTRY.put(new Identifier(\"simplebroadcast:default\"), $default);\n        ConfigurationManager.MESSAGE_TYPE_REGISTRY.put(new Identifier(\"minecraft:plain\"), new MessageType.PlainMessageType());\n\n        ConfigurationManager.MESSAGE_PRESET_REGISTRY.put(new Identifier(\"simplebroadcast:hello\"), new BroadcastMessage(\"Hello World!\", $default, $default.getDefaultLocation()));\n    }\n\n    private static File getConfigurationFile() {", "        if (FabricLoader.getInstance().isDevelopmentEnvironment()) {\n            return new File(\"simple-broadcast-debug-config.json\");\n        } else {\n            return FabricLoader.getInstance().getConfigDir().resolve(\"simple-broadcast.json\").toFile();\n        }\n    }\n\n    public static void saveConfig() {\n        Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();\n        JsonObject config = new JsonObject();\n        JsonArray arrayOfMessageTypes = new JsonArray();", "        for (Map.Entry<Identifier, MessageType> identifierMessageTypeEntry : MESSAGE_TYPE_REGISTRY.entrySet()) {\n            JsonObject object = gson.toJsonTree(identifierMessageTypeEntry.getValue()).getAsJsonObject();\n            object.addProperty(\"id\", identifierMessageTypeEntry.getKey().toString());\n            arrayOfMessageTypes.add(object);\n        }\n        config.add(\"message_types\", arrayOfMessageTypes);\n\n        JsonArray arrayOfMessagePresets = new JsonArray();\n        for (Map.Entry<Identifier, BroadcastMessage> identifierBroadcastMessageEntry : MESSAGE_PRESET_REGISTRY.entrySet()) {\n            JsonObject object = gson.toJsonTree(identifierBroadcastMessageEntry.getValue()).getAsJsonObject();\n            object.remove(\"messageType\");\n            object.addProperty(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());\n            object.addProperty(\"id\", identifierBroadcastMessageEntry.getKey().toString());\n            arrayOfMessagePresets.add(object);\n        }\n        config.add(\"message_presets\", arrayOfMessagePresets);\n\n        String json = gson.toJson(config);", "        for (Map.Entry<Identifier, BroadcastMessage> identifierBroadcastMessageEntry : MESSAGE_PRESET_REGISTRY.entrySet()) {\n            JsonObject object = gson.toJsonTree(identifierBroadcastMessageEntry.getValue()).getAsJsonObject();\n            object.remove(\"messageType\");\n            object.addProperty(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());\n            object.addProperty(\"id\", identifierBroadcastMessageEntry.getKey().toString());\n            arrayOfMessagePresets.add(object);\n        }\n        config.add(\"message_presets\", arrayOfMessagePresets);\n\n        String json = gson.toJson(config);\n        try {\n            Files.writeString(Path.of(getConfigurationFile().getPath()), json);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "        try {\n            Files.writeString(Path.of(getConfigurationFile().getPath()), json);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void loadConfig() {\n        File configurationFile = getConfigurationFile();\n        if (!configurationFile.exists()) saveConfig();\n        Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();", "        if (!configurationFile.exists()) saveConfig();\n        Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().disableHtmlEscaping().create();\n        try {\n            // message_types\n            JsonObject config = gson.fromJson(new JsonReader(new FileReader(configurationFile)), JsonObject.class);\n            JsonArray arrayOfMessageTypes = config.getAsJsonArray(\"message_types\");\n            ConfigurationManager.MESSAGE_TYPE_REGISTRY.clear();\n            for (JsonElement arrayOfMessageType : arrayOfMessageTypes) {\n                JsonObject obj = arrayOfMessageType.getAsJsonObject();\n                Identifier ID = Identifier.tryParse(obj.get(\"id\").getAsString());\n                obj.remove(\"id\");\n\n                MessageType type = gson.fromJson(obj, MessageType.CustomMessageType.class);\n                ConfigurationManager.MESSAGE_TYPE_REGISTRY.put(ID, type);\n            }\n", "            if(!config.has(\"message_presets\")) {\n                config.add(\"message_presets\", new JsonArray());\n            }\n\n            JsonArray arrayOfMessagePresets = config.getAsJsonArray(\"message_presets\");\n            ConfigurationManager.MESSAGE_PRESET_REGISTRY.clear();\n            for (JsonElement arrayOfMessagePreset : arrayOfMessagePresets) {\n                JsonObject obj = arrayOfMessagePreset.getAsJsonObject();\n                Identifier messageTypeID = Identifier.tryParse(obj.get(\"messageType\").getAsString());\n                Identifier ID = Identifier.tryParse(obj.get(\"id\").getAsString());\n                obj.remove(\"messageType\");\n                obj.remove(\"id\");\n\n                BroadcastMessage message = gson.fromJson(obj, BroadcastMessage.class);\n                message.setMessageType(ConfigurationManager.MESSAGE_TYPE_REGISTRY.get(messageTypeID));\n                ConfigurationManager.MESSAGE_PRESET_REGISTRY.put(ID, message);\n            }\n\n            // TODO: Schedules + Message Pools\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n}\n"]}
{"filename": "src/main/java/com/mineblock11/simplebroadcast/data/BroadcastMessage.java", "chunked_list": ["package com.mineblock11.simplebroadcast.data;\n\nimport eu.pb4.placeholders.api.PlaceholderContext;\nimport eu.pb4.placeholders.api.Placeholders;\nimport eu.pb4.placeholders.api.TextParserUtils;\nimport eu.pb4.placeholders.api.node.parent.ParentTextNode;\nimport net.minecraft.network.packet.s2c.play.TitleFadeS2CPacket;\nimport net.minecraft.network.packet.s2c.play.TitleS2CPacket;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.server.command.ServerCommandSource;", "import net.minecraft.server.MinecraftServer;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Identifier;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class BroadcastMessage {\n    private String contents;\n    private MessageType messageType;\n    private BroadcastLocation broadcastLocation;\n\n    public BroadcastMessage(String contents, MessageType messageType, @NotNull BroadcastLocation broadcastLocation) {\n        this.contents = contents;\n        this.messageType = messageType;\n        this.broadcastLocation = broadcastLocation;\n    }\n", "    public void broadcast(MinecraftServer server, @Nullable ServerCommandSource source) {\n        MessageType type = getMessageType();\n        Text result = type.formatMessageContents(getContentsAsText(server, source).copy(), server, source);\n        switch (broadcastLocation) {\n            case ACTIONBAR:\n                server.getPlayerManager().getPlayerList().forEach(serverPlayerEntity -> serverPlayerEntity.sendMessage(result, true));\n                break;\n            case TITLE:\n                server.getPlayerManager().sendToAll(new TitleFadeS2CPacket(10, 100, 10));\n                server.getPlayerManager().sendToAll(new TitleS2CPacket(result));\n                break;\n            default:\n                server.getPlayerManager().getPlayerList().forEach(serverPlayerEntity -> serverPlayerEntity.sendMessage(result));\n                break;\n        }\n    }\n", "    public Text getContentsAsText(MinecraftServer server, @Nullable ServerCommandSource source) {\n        ParentTextNode contents = TextParserUtils.formatNodes(this.contents);\n        PlaceholderContext context = source == null ? PlaceholderContext.of(server) : PlaceholderContext.of(source);\n        return Placeholders.parseText(contents, context);\n    }\n\n    public MessageType getMessageType() {\n        return messageType;\n    }\n\n    public BroadcastLocation getBroadcastLocation() {\n        return broadcastLocation;\n    }\n\n    @Nullable", "    public BroadcastLocation getBroadcastLocation() {\n        return broadcastLocation;\n    }\n\n    @Nullable\n    public Identifier getID() {\n        for (var entry : ConfigurationManager.MESSAGE_PRESET_REGISTRY.entrySet()) {\n            if (entry.getValue().equals(this)) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n", "    public void setMessageType(MessageType messageType) {\n        this.messageType = messageType;\n    }\n\n    public String getRawContents() {\n        return this.contents;\n    }\n\n    public void setRawContents(String contents) {\n        this.contents = contents;\n    }\n", "    public void setRawContents(String contents) {\n        this.contents = contents;\n    }\n\n    public void setBroadcastLocation(BroadcastLocation location) {\n        this.broadcastLocation = location;\n    }\n}\n"]}
