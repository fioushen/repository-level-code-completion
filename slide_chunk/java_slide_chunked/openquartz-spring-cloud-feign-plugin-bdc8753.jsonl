{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/utils/CollectionUtils.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.utils;\n\nimport java.util.Collection;\n\n/**\n * @author svnee\n **/\npublic final class CollectionUtils {\n\n    private CollectionUtils() {\n    }\n", "    public static boolean isEmpty(Collection<?> collection) {\n        return collection == null || collection.isEmpty();\n    }\n\n    public static boolean isNotEmpty(Collection<?> collection) {\n        return !isEmpty(collection);\n    }\n\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/utils/MapUtils.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.utils;\n\nimport java.util.Map;\n\n/**\n * MapUtils\n *\n * @author svnee\n **/\npublic final class MapUtils {\n\n    private MapUtils() {\n    }\n\n    /**\n     * is Empty map\n     * @param map map\n     * @return empty map\n     */", " **/\npublic final class MapUtils {\n\n    private MapUtils() {\n    }\n\n    /**\n     * is Empty map\n     * @param map map\n     * @return empty map\n     */", "    public static boolean isEmpty(Map<?, ?> map) {\n        return map == null || map.isEmpty();\n    }\n\n    /**\n     * is not empty\n     * @param map map\n     * @return not empty\n     */\n    public static boolean isNotEmpty(Map<?, ?> map) {\n        return !isEmpty(map);\n    }\n\n}\n", "    public static boolean isNotEmpty(Map<?, ?> map) {\n        return !isEmpty(map);\n    }\n\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/constants/Constants.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.constants;\n\n/**\n * Constants\n * @author svnee\n **/\npublic final class Constants {\n\n    private Constants() {\n    }\n", "    public static final String ALL_MATCH = \"*\";\n\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/advisor/DynamicFeignTimeoutInterceptor.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.advisor;\n\nimport com.openquartz.feign.plugin.starter.constants.Constants;\nimport feign.Client;\nimport feign.Request;\nimport feign.Request.Options;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Objects;\nimport org.aopalliance.intercept.MethodInterceptor;", "import java.util.Objects;\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.openquartz.feign.plugin.starter.autoconfig.property.FeignTimeoutProperties;\nimport com.openquartz.feign.plugin.starter.autoconfig.property.FeignTimeoutProperties.TimeoutProperty;\nimport com.openquartz.feign.plugin.starter.utils.CollectionUtils;\nimport com.openquartz.feign.plugin.starter.utils.MapUtils;\n", "import com.openquartz.feign.plugin.starter.utils.MapUtils;\n\n/**\n * DynamicFeignTimeoutInterceptor\n *\n * @author svnee\n **/\npublic class DynamicFeignTimeoutInterceptor implements MethodInterceptor {\n\n    private static final Logger log = LoggerFactory.getLogger(DynamicFeignTimeoutInterceptor.class);\n\n    /**\n     * feign args length\n     *\n     * {@link Client#execute(feign.Request, feign.Request.Options)}\n     */\n    private static final Integer FEIGN_ARGS_LEN = 2;\n\n    /**\n     * feign request args index\n     *\n     * {@link Client#execute(feign.Request, feign.Request.Options)}\n     */\n    private static final Integer FEIGN_REQUEST_ARGS_INDEX = 0;\n\n    /**\n     * feign options args index\n     *\n     * {@link Client#execute(feign.Request, feign.Request.Options)}\n     */\n    private static final Integer FEIGN_REQUEST_OPTION_ARGS_INDEX = 1;\n\n    /**\n     * timeout config\n     */\n    private final FeignTimeoutProperties properties;\n\n    public DynamicFeignTimeoutInterceptor(FeignTimeoutProperties properties) {\n        this.properties = properties;\n    }\n\n    @Override", "    public Object invoke(MethodInvocation invocation) throws Throwable {\n\n        Object[] args = invocation.getArguments();\n        if (MapUtils.isNotEmpty(this.properties.getConfig())) {\n            try {\n                Options options = null;\n                if (args.length == FEIGN_ARGS_LEN) {\n                    Request request = (Request) args[FEIGN_REQUEST_ARGS_INDEX];\n                    URI uri = URI.create(request.url());\n                    options = this.wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);\n                }\n", "                if (options != null) {\n                    args[FEIGN_REQUEST_OPTION_ARGS_INDEX] = options;\n                }\n            } catch (Exception ex) {\n                log.error(\"[DynamicFeignTimeoutInterceptor#invoke]feign set timeout exception!\", ex);\n            }\n        }\n        return invocation.proceed();\n    }\n\n    /**\n     * get timeout options\n     *\n     * @param propertyList timeout configs\n     * @param uri uri\n     * @return wrapper options\n     */\n    private Options wrapperTimeoutOptions(List<TimeoutProperty> propertyList, URI uri) {\n        // support ip+host", "        if (CollectionUtils.isEmpty(propertyList)) {\n            return null;\n        }\n        // match property\n        TimeoutProperty property = match(propertyList, uri.getPath());\n        if (property == null) {\n            return null;\n        } else {\n            if (property.getConnectTimeout() == null) {\n                property.setConnectTimeout(property.getReadTimeout());\n            }\n", "            if (property.getConnectTimeout() == null) {\n                property.setConnectTimeout(property.getReadTimeout());\n            }\n\n            if (property.getReadTimeout() == null) {\n                property.setReadTimeout(property.getConnectTimeout());\n            }\n\n            return new Options(property.getConnectTimeout(), property.getReadTimeout());\n        }\n    }\n\n    /**\n     * match rule\n     * first match special path rule property,then match all rule property!\n     *\n     * @param propertyList Same host's property\n     * @param path uri path\n     * @return timeout property\n     */\n    private TimeoutProperty match(List<TimeoutProperty> propertyList, String path) {\n        TimeoutProperty allMathPathTimeProperty = null;", "        for (TimeoutProperty property : propertyList) {\n            if (Objects.equals(property.getPath(), path)) {\n                return property;\n            }\n            if (Objects.equals(Constants.ALL_MATCH, property.getPath())) {\n                allMathPathTimeProperty = property;\n            }\n        }\n        return allMathPathTimeProperty;\n    }\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/advisor/FeignPluginAdvisor.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.advisor;\n\nimport feign.Client;\nimport java.lang.reflect.Method;\nimport java.util.Objects;\nimport org.aopalliance.aop.Advice;\nimport org.springframework.aop.ClassFilter;\nimport org.springframework.aop.MethodMatcher;\nimport org.springframework.aop.Pointcut;\nimport org.springframework.aop.support.AbstractPointcutAdvisor;", "import org.springframework.aop.Pointcut;\nimport org.springframework.aop.support.AbstractPointcutAdvisor;\nimport org.springframework.aop.support.StaticMethodMatcher;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.lang.NonNull;\n\n/**\n * dynamic set feign timeout for spring cloud feign!", "/**\n * dynamic set feign timeout for spring cloud feign!\n *\n * @author svnee\n */\npublic class FeignPluginAdvisor extends AbstractPointcutAdvisor implements BeanFactoryAware {\n\n    private final transient Advice advice;\n    private final transient Pointcut pointcut;\n\n    private static final String EXECUTE_METHOD_NAME = \"execute\";\n\n    public FeignPluginAdvisor(DynamicFeignTimeoutInterceptor interceptor) {\n        this.advice = interceptor;\n        this.pointcut = buildPointcut();\n    }\n\n    private Pointcut buildPointcut() {\n        return new FullyQualifiedNameMethodPoint(Client.class, EXECUTE_METHOD_NAME);\n    }\n\n    private static class FullyQualifiedNameMethodPoint implements Pointcut {\n\n        private final Class<?> parentClazz;\n        private final String methodName;\n\n        public FullyQualifiedNameMethodPoint(Class<?> parentClazz, String methodName) {\n            this.parentClazz = parentClazz;\n            this.methodName = methodName;\n        }\n\n        @Override\n        public @NonNull ClassFilter getClassFilter() {\n            return parentClazz::isAssignableFrom;\n        }\n\n        @Override\n        public @NonNull MethodMatcher getMethodMatcher() {\n            return new FullQualifiedNameMethodMatcher(methodName);\n        }\n\n        private static class FullQualifiedNameMethodMatcher extends StaticMethodMatcher {\n\n            private final String methodName;\n\n            public FullQualifiedNameMethodMatcher(String methodName) {\n                this.methodName = methodName;\n            }\n\n            @Override", "            public boolean matches(@NonNull Method method,@NonNull Class<?> targetClass) {\n                return matchesMethod(method);\n            }\n\n            private boolean matchesMethod(Method method) {\n                return method.getName().equals(methodName);\n            }\n        }\n    }\n\n    @Override\n    public @NonNull Pointcut getPointcut() {\n        return pointcut;\n    }\n\n    @Override\n    public @NonNull Advice getAdvice() {\n        return advice;\n    }\n\n    @Override", "    public void setBeanFactory(@NonNull BeanFactory beanFactory) throws BeansException {\n        if (this.advice instanceof BeanFactoryAware) {\n            ((BeanFactoryAware) this.advice).setBeanFactory(beanFactory);\n        }\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }", "        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        FeignPluginAdvisor that = (FeignPluginAdvisor) o;\n        return Objects.equals(advice, that.advice) && Objects.equals(pointcut, that.pointcut);\n    }\n\n    @Override", "    public int hashCode() {\n        return Objects.hash(super.hashCode(), advice, pointcut);\n    }\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/autoconfig/FeignPluginAutoConfiguration.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.autoconfig;\n\nimport feign.Feign;\nimport org.springframework.aop.Advisor;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient;\nimport org.springframework.context.annotation.Bean;", "import org.springframework.cloud.openfeign.ribbon.LoadBalancerFeignClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Role;\nimport com.openquartz.feign.plugin.starter.advisor.DynamicFeignTimeoutInterceptor;\nimport com.openquartz.feign.plugin.starter.advisor.FeignPluginAdvisor;\nimport com.openquartz.feign.plugin.starter.autoconfig.property.FeignPluginEnableProperties;\nimport com.openquartz.feign.plugin.starter.autoconfig.property.FeignTimeoutProperties;\n\n/**", "\n/**\n * FeignPluginAutoConfiguration\n *\n * @author svnee\n **/\n@Configuration\n@EnableConfigurationProperties({FeignTimeoutProperties.class, FeignPluginEnableProperties.class})\n@ConditionalOnClass({LoadBalancerFeignClient.class, Feign.class})\n@ConditionalOnProperty(prefix = FeignPluginEnableProperties.PREFIX, value = \"enable\", matchIfMissing = true)\npublic class FeignPluginAutoConfiguration {\n\n    @Bean\n    @Role(value = BeanDefinition.ROLE_INFRASTRUCTURE)", "@ConditionalOnClass({LoadBalancerFeignClient.class, Feign.class})\n@ConditionalOnProperty(prefix = FeignPluginEnableProperties.PREFIX, value = \"enable\", matchIfMissing = true)\npublic class FeignPluginAutoConfiguration {\n\n    @Bean\n    @Role(value = BeanDefinition.ROLE_INFRASTRUCTURE)\n    public Advisor fileExportExecutorAnnotationAdvisor(FeignTimeoutProperties feignTimeoutProperties,\n        FeignPluginEnableProperties feignPluginEnableProperties\n    ) {\n        DynamicFeignTimeoutInterceptor interceptor = new DynamicFeignTimeoutInterceptor(feignTimeoutProperties);\n        FeignPluginAdvisor advisor = new FeignPluginAdvisor(interceptor);\n        advisor.setOrder(feignPluginEnableProperties.getAdvisorOrder());\n        return advisor;\n    }\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/autoconfig/property/FeignTimeoutProperties.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.autoconfig.property;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.TreeMap;\nimport java.util.stream.Collectors;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\n", "import org.springframework.cloud.context.config.annotation.RefreshScope;\n\n/**\n * feign timeout property,support spring cloud config refresh!\n * set property\n * <p>\n * feign.plugin.client.config.{config-alias}.host = {host}\n * feign.plugin.client.config.{config-alias}.path = *\n * feign.plugin.client.config.{config-alias}.connect-timeout = 1000\n * feign.plugin.client.config.{config-alias}.read-timeout = 1000", " * feign.plugin.client.config.{config-alias}.connect-timeout = 1000\n * feign.plugin.client.config.{config-alias}.read-timeout = 1000\n * </p>\n *\n * @author svnee\n */\n@RefreshScope\n@ConfigurationProperties(prefix = FeignTimeoutProperties.PREFIX)\npublic class FeignTimeoutProperties {\n\n    public static final String PREFIX = \"feign.plugin.client\";\n\n    private Map<String, TimeoutProperty> config = new TreeMap<>();\n\n    public Map<String, TimeoutProperty> getConfig() {\n        return this.config;\n    }\n", "public class FeignTimeoutProperties {\n\n    public static final String PREFIX = \"feign.plugin.client\";\n\n    private Map<String, TimeoutProperty> config = new TreeMap<>();\n\n    public Map<String, TimeoutProperty> getConfig() {\n        return this.config;\n    }\n\n    public void setConfig(final Map<String, TimeoutProperty> config) {\n        this.config = config;\n    }\n\n    public FeignTimeoutProperties(final Map<String, TimeoutProperty> config) {\n        this.config = config;\n    }\n\n    /**\n     * get host config\n     *\n     * @param host host\n     * @return timeout property\n     */\n    public List<TimeoutProperty> getHostConfig(String host) {\n        return config.values().stream().filter(e -> e.getHost().equals(host)).collect(Collectors.toList());\n    }\n\n    @Override", "    public void setConfig(final Map<String, TimeoutProperty> config) {\n        this.config = config;\n    }\n\n    public FeignTimeoutProperties(final Map<String, TimeoutProperty> config) {\n        this.config = config;\n    }\n\n    /**\n     * get host config\n     *\n     * @param host host\n     * @return timeout property\n     */\n    public List<TimeoutProperty> getHostConfig(String host) {\n        return config.values().stream().filter(e -> e.getHost().equals(host)).collect(Collectors.toList());\n    }\n\n    @Override", "    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        FeignTimeoutProperties that = (FeignTimeoutProperties) o;\n        return Objects.equals(config, that.config);\n    }\n\n    @Override", "    public int hashCode() {\n        return Objects.hash(config);\n    }\n\n    @Override\n    public String toString() {\n        return \"FeignTimeoutProperties{\" +\n            \"config=\" + config +\n            '}';\n    }\n\n    /**\n     * base template timeout property\n     *\n     * @author svnee\n     */", "    public static class TimeoutProperty {\n\n        /**\n         * host\n         */\n        private String host;\n\n        /**\n         * match default all\n         */\n        private String path = \"*\";\n\n        /**\n         * connect timeout\n         */\n        private Integer connectTimeout;\n\n        /**\n         * read timeout\n         */\n        private Integer readTimeout;\n", "        public Integer getConnectTimeout() {\n            return connectTimeout;\n        }\n\n        public void setConnectTimeout(Integer connectTimeout) {\n            this.connectTimeout = connectTimeout;\n        }\n\n        public Integer getReadTimeout() {\n            return readTimeout;\n        }\n", "        public Integer getReadTimeout() {\n            return readTimeout;\n        }\n\n        public void setReadTimeout(Integer readTimeout) {\n            this.readTimeout = readTimeout;\n        }\n\n        public String getPath() {\n            return path;\n        }\n", "        public String getPath() {\n            return path;\n        }\n\n        public void setPath(String path) {\n            this.path = path;\n        }\n\n        public String getHost() {\n            return host;\n        }\n", "        public String getHost() {\n            return host;\n        }\n\n        public void setHost(String host) {\n            this.host = host;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }", "        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (o == null || getClass() != o.getClass()) {\n                return false;\n            }\n            TimeoutProperty that = (TimeoutProperty) o;\n            return Objects.equals(host, that.host) && Objects.equals(path, that.path) && Objects\n                .equals(connectTimeout, that.connectTimeout) && Objects.equals(readTimeout, that.readTimeout);\n        }\n\n        @Override", "        public int hashCode() {\n            return Objects.hash(host, path, connectTimeout, readTimeout);\n        }\n    }\n}\n"]}
{"filename": "feign-plugin-spring-boot-starter/src/main/java/com/openquartz/feign/plugin/starter/autoconfig/property/FeignPluginEnableProperties.java", "chunked_list": ["package com.openquartz.feign.plugin.starter.autoconfig.property;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n/**\n * FeignPluginEnableProperties\n *\n * @author svnee\n **/\n@ConfigurationProperties(prefix = FeignPluginEnableProperties.PREFIX)\npublic class FeignPluginEnableProperties {\n", " **/\n@ConfigurationProperties(prefix = FeignPluginEnableProperties.PREFIX)\npublic class FeignPluginEnableProperties {\n\n    public static final String PREFIX = \"feign.plugin\";\n\n    /**\n     * enable feign plugin\n     */\n    private boolean enable = true;\n\n    /**\n     * advisor order\n     */\n    private Integer advisorOrder = Integer.MAX_VALUE;\n", "    public boolean isEnable() {\n        return enable;\n    }\n\n    public void setEnable(boolean enable) {\n        this.enable = enable;\n    }\n\n    public Integer getAdvisorOrder() {\n        return advisorOrder;\n    }\n", "    public Integer getAdvisorOrder() {\n        return advisorOrder;\n    }\n\n    public void setAdvisorOrder(Integer advisorOrder) {\n        this.advisorOrder = advisorOrder;\n    }\n}\n"]}
{"filename": "feign-plugin-example/src/main/java/com/openquartz/feign/plugin/example/FeignPluginExampleStarter.java", "chunked_list": ["package com.openquartz.feign.plugin.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n/**\n * FeignPluginExampleStarter\n *\n * @author svnee", " *\n * @author svnee\n **/\n@EnableFeignClients\n@SpringBootApplication\npublic class FeignPluginExampleStarter {\n\n    public static void main(String[] args) {\n        SpringApplication.run(FeignPluginExampleStarter.class);\n    }\n\n}\n"]}
{"filename": "feign-plugin-example/src/main/java/com/openquartz/feign/plugin/example/feign/ServerOneFeign.java", "chunked_list": ["package com.openquartz.feign.plugin.example.feign;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * server one feign\n * @author svnee\n */\n@FeignClient(name = \"server-one\",url = \"localhost:8080\")\npublic interface ServerOneFeign {\n\n    /**\n     * test hello method\n     */\n    @GetMapping(\"/event/sync\")\n    void sayHello();\n\n}\n", " */\n@FeignClient(name = \"server-one\",url = \"localhost:8080\")\npublic interface ServerOneFeign {\n\n    /**\n     * test hello method\n     */\n    @GetMapping(\"/event/sync\")\n    void sayHello();\n\n}\n"]}
{"filename": "feign-plugin-example/src/main/java/com/openquartz/feign/plugin/example/controller/TestController.java", "chunked_list": ["package com.openquartz.feign.plugin.example.controller;\n\nimport com.openquartz.feign.plugin.example.feign.ServerOneFeign;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * TestController", "/**\n * TestController\n *\n * @author svnee\n **/\n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n\n    @Resource\n    ServerOneFeign serverOneFeign;\n\n    @GetMapping(\"/get\")", "    public void hello() {\n\n        long startTime = System.currentTimeMillis();\n        try {\n            serverOneFeign.sayHello();\n        } finally {\n            System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\"+(System.currentTimeMillis() - startTime));\n        }\n    }\n\n}\n"]}
