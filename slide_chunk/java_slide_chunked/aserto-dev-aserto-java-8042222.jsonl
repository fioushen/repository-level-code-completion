{"filename": "examples/authz-example/src/main/java/org/example/AuthzExample.java", "chunked_list": ["package org.example;\n\nimport com.aserto.AuthorizerClient;\nimport com.aserto.AuthzClient;\nimport com.aserto.ChannelBuilder;\nimport com.aserto.authorizer.v2.Decision;\nimport com.aserto.authorizer.v2.api.IdentityType;\nimport com.aserto.model.IdentityCtx;\nimport com.aserto.model.PolicyCtx;\nimport io.grpc.ManagedChannel;", "import com.aserto.model.PolicyCtx;\nimport io.grpc.ManagedChannel;\n\nimport javax.net.ssl.SSLException;\nimport java.util.List;\n\npublic class AuthzExample {\n    public static void main(String[] args) throws Exception {\n        // create a channel that has the connection details\n        ManagedChannel channel = new ChannelBuilder()\n                .withHost(\"localhost\")\n                .withPort(8282)\n                .withInsecure(true)\n                .build();\n\n        // create authz client\n        AuthorizerClient authzClient = new AuthzClient(channel);\n\n        // identity context contains information abou the user that requests access to some resource\n        IdentityCtx identityCtx = new IdentityCtx(\"rick@the-citadel.com\", IdentityType.IDENTITY_TYPE_SUB);\n\n        // contains information about the policy we want to check for the provided identity\n        PolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"todoApp.DELETE.todos.__id\", new String[]{\"allowed\"});\n\n        // check if the identity is allowed to perform the action\n        List<Decision> decisions = authzClient.is(identityCtx, policyCtx);\n        authzClient.close();\n\n        decisions.forEach(decision -> {\n            String dec = decision.getDecision();\n            boolean isAllowed =  decision.getIs();\n            System.out.println(\"For decision [\" + dec + \"] the answer was [\" + isAllowed + \"]\");\n        });\n    }\n}\n"]}
{"filename": "src/test/java/AuthzClientTest.java", "chunked_list": ["import com.aserto.AuthorizerClient;\nimport com.aserto.AuthzClient;\nimport com.aserto.authorizer.v2.*;\nimport com.aserto.authorizer.v2.api.IdentityType;\nimport com.aserto.authorizer.v2.api.Module;\nimport com.aserto.model.IdentityCtx;\nimport com.aserto.model.PolicyCtx;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport io.grpc.ManagedChannel;", "import com.google.protobuf.Value;\nimport io.grpc.ManagedChannel;\nimport io.grpc.inprocess.InProcessChannelBuilder;\nimport io.grpc.inprocess.InProcessServerBuilder;\nimport io.grpc.stub.StreamObserver;\nimport io.grpc.testing.GrpcCleanupRule;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport javax.net.ssl.SSLException;\nimport java.io.IOException;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.AdditionalAnswers.delegatesTo;\nimport static org.mockito.Mockito.mock;", "import static org.mockito.AdditionalAnswers.delegatesTo;\nimport static org.mockito.Mockito.mock;\n\n\nclass AuthzClientTest {\n\n    @Rule\n    public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n\n    // Will be used to mock the grpc server\n    private final AuthorizerGrpc.AuthorizerImplBase serviceImpl =\n            mock(AuthorizerGrpc.AuthorizerImplBase.class, delegatesTo(\n                    new AuthorizerGrpc.AuthorizerImplBase() {\n                        // Implement necessary behaviour for tests by overriding the grpc called methods\n\n                        @Override", "                        public void listPolicies(ListPoliciesRequest request, StreamObserver<ListPoliciesResponse> responseObserver) {\n                            ListPoliciesResponse listPoliciesResponse = ListPoliciesResponse.newBuilder()\n                                    .addResult(Module.newBuilder().setId(\"test\").build())\n                                    .addResult(Module.newBuilder().setId(\"test2\").build())\n                                    .build();\n\n                            responseObserver.onNext(listPoliciesResponse);\n                            responseObserver.onCompleted();\n                        }\n\n                        @Override", "                        public void is(IsRequest request, StreamObserver<IsResponse> responseObserver) {\n                            boolean deleteAction = request.getPolicyContext().getPath().equals(\"todoApp.DELETE.todos.__id\");\n                            boolean editorRole = request.getIdentityContext().getIdentity().equals(\"rick@the-citadel.com\");\n\n                            Decision decision;\n                            if (deleteAction && editorRole) {\n                                decision = Decision.newBuilder().setDecision(\"allowed\").setIs(true).build();\n                            } else {\n                                decision = Decision.newBuilder().setDecision(\"allowed\").setIs(false).build();\n                            }\n\n                            IsResponse isResponse = IsResponse.newBuilder()\n                                    .addDecisions(decision)\n                                    .build();\n\n                            responseObserver.onNext(isResponse);\n                            responseObserver.onCompleted();\n                        }\n\n                        @Override", "                        public void query(QueryRequest request, StreamObserver<QueryResponse> responseObserver) {\n                            boolean expectedQuery = request.getQuery().equals(\"x = input; y = data\");\n                            boolean expectedResourceContext = request.getResourceContext().getFieldsMap().get(\"id\").getStringValue().equals(\"string_value\");\n\n                            Struct response = null;\n                            if (expectedQuery && expectedResourceContext) {\n                                Value value = Value.newBuilder().setStringValue(\"response_string_value\").build();\n\n                                response = Struct.newBuilder().putFields(\"response_id\",value).build();\n                            }\n\n                            QueryResponse queryResponse = QueryResponse.newBuilder()\n                                    .setResponse(response)\n                                    .build();\n\n\n                            responseObserver.onNext(queryResponse);\n                            responseObserver.onCompleted();\n                        }\n\n                        @Override", "                        public void decisionTree(DecisionTreeRequest request, StreamObserver<DecisionTreeResponse> responseObserver) {\n                            Value falseValue = Value.newBuilder().setBoolValue(false).build();\n                            Struct decision = Struct.newBuilder().putFields(\"allowed\", falseValue).build();\n\n                            Value structValue = Value.newBuilder().setStructValue(decision).build();\n                            Struct response = Struct.newBuilder().putFields(\"todoApp.GET.todos\", structValue).build();\n\n                            DecisionTreeResponse decisionTreeResponse = DecisionTreeResponse.newBuilder().setPath(response).build();\n\n                            responseObserver.onNext(decisionTreeResponse);\n                            responseObserver.onCompleted();\n                        }\n\n                        @Override", "                        public void getPolicy(GetPolicyRequest request, StreamObserver<GetPolicyResponse> responseObserver) {\n                            Module module = Module.newBuilder().setId(request.getId()).build();\n                            GetPolicyResponse getPolicyResponse = GetPolicyResponse.newBuilder().setResult(module).build();\n\n\n                            responseObserver.onNext(getPolicyResponse);\n                            responseObserver.onCompleted();\n                        }\n                    }));\n\n    private AuthorizerClient client;\n\n    @BeforeEach", "    public void setUp() throws IOException {\n        // Generate a unique in-process server name.\n        String serverName = InProcessServerBuilder.generateName();\n\n        // Create a server, add service, start, and register for automatic graceful shutdown.\n        grpcCleanup.register(InProcessServerBuilder\n                .forName(serverName).directExecutor().addService(serviceImpl).build().start());\n\n        // Create a client channel and register for automatic graceful shutdown.\n        ManagedChannel channel = grpcCleanup.register(\n                InProcessChannelBuilder.forName(serverName).directExecutor().build());\n\n        // Create a HelloWorldClient using the in-process channel;\n        client = new AuthzClient(channel);\n    }\n\n    @AfterEach", "    public void tearDown() throws Exception {\n        client.close();\n    }\n\n    @Test\n    void testIsTrueCall() throws Exception {\n        // Arrange\n        IdentityCtx identityCtx = new IdentityCtx(\"rick@the-citadel.com\", IdentityType.IDENTITY_TYPE_SUB);\n        PolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"todoApp.DELETE.todos.__id\", new String[]{\"allowed\"});\n\n        Decision expectedDecision = Decision.newBuilder().setDecision(\"allowed\").setIs(true).build();\n        List<Decision> expectedDecisions = Arrays.asList(expectedDecision);\n\n        // Act\n        List<Decision> decisions = client.is(identityCtx, policyCtx);\n\n        // Assert\n        assertTrue(compareLists(decisions, expectedDecisions));\n    }\n\n    @Test\n    void testIsFalseCall() throws Exception {\n        // Arrange\n        IdentityCtx identityCtx = new IdentityCtx(\"beth@the-smiths.com\", IdentityType.IDENTITY_TYPE_SUB);\n        PolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"todoApp.DELETE.todos.__id\", new String[]{\"allowed\"});\n\n        Decision expectedDecision = Decision.newBuilder().setDecision(\"allowed\").setIs(false).build();\n        List<Decision> expectedDecisions = Arrays.asList(expectedDecision);\n\n        // Act\n        List<Decision> decisions = client.is(identityCtx, policyCtx);\n\n        // Assert\n        assertTrue(compareLists(decisions, expectedDecisions));\n    }\n\n    @Test\n    void testQueryCall() throws Exception {\n        // Arrange\n        PolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"todoApp.DELETE.todos.__id\", new String[]{\"allowed\"});\n        String query = \"x = input; y = data\";\n\n        Map<String, Value> values = new HashMap<>();\n        values.put(\"id\", Value.newBuilder().setStringValue(\"string_value\").build());\n\n        // Act\n        Struct queryResponse = client.query(query, policyCtx, values);\n\n        // Assert\n        assertEquals(1, queryResponse.getFieldsCount());\n    }\n\n    @Test\n    void testDecisionTree() {\n        // Arrange\n        IdentityCtx identityCtx = new IdentityCtx(\"beth@the-smiths.com\", IdentityType.IDENTITY_TYPE_SUB);\n        PolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"\", new String[]{\"allowed\"});\n\n        // Act\n        Map<String, Value> decisionTreeResponse = client.decisionTree(identityCtx, policyCtx);\n\n\n        Value falseValue = Value.newBuilder().setBoolValue(false).build();\n        Struct decision = Struct.newBuilder().putFields(\"allowed\", falseValue).build();\n\n        Value structValue = Value.newBuilder().setStructValue(decision).build();\n        Struct expectedResponse = Struct.newBuilder().putFields(\"todoApp.GET.todos\", structValue).build();\n\n        // Assert\n        assertTrue(compareDecisionMaps(expectedResponse.getFieldsMap(), decisionTreeResponse));\n    }\n\n    @Test\n    void testGetPolicy() throws SSLException {\n        // Arrange\n        String policyPath = \"todo/tmp/opa/oci/github/workspace/content/src/policies/todoApp.GET.users.__userID.rego\";\n\n        // Act\n        Module policyResponse = client.getPolicy(policyPath);\n\n        // Assert\n        assertEquals(policyPath, policyResponse.getId());\n    }\n\n    private boolean compareLists(List list1, List list2) {", "        if (list1.size() != list2.size()) {\n            return false;\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (!list1.get(i).equals(list2.get(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean compareDecisionMaps(Map<String, Value> s1, Map<String, Value> s2) {", "        if (s1.size() != s2.size()) {\n            return false;\n        }\n        for (Map.Entry<String, Value> entry : s1.entrySet()) {\n            if (!s2.containsKey(entry.getKey())) {\n                return false;\n            }\n            if (!s2.get(entry.getKey()).equals(entry.getValue())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"]}
{"filename": "src/test/java/AuthzClientIntegrationTest.java", "chunked_list": ["import com.aserto.AuthzClient;\nimport com.aserto.ChannelBuilder;\nimport com.aserto.authorizer.v2.api.Module;\nimport io.grpc.ManagedChannel;\nimport io.grpc.StatusRuntimeException;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\nimport javax.net.ssl.SSLException;\nimport java.io.IOException;", "import javax.net.ssl.SSLException;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@Tag(\"IntegrationTest\")\nclass AuthzClientIntegrationTest {\n    @Test", "class AuthzClientIntegrationTest {\n    @Test\n    @Tag(\"IntegrationTest\")\n    void testBuildAuthzClient() throws IOException {\n        // Arrange\n        ManagedChannel channel = new ChannelBuilder()\n                .withHost(\"localhost\")\n                .withPort(8282)\n                .withInsecure(false)\n                .withCACertPath(System.getProperty(\"user.home\") + \"/.config/topaz/certs/grpc-ca.crt\")", "                .withInsecure(false)\n                .withCACertPath(System.getProperty(\"user.home\") + \"/.config/topaz/certs/grpc-ca.crt\")\n                .build();\n\n        AuthzClient authzClient =  new AuthzClient(channel);\n\n        // Act\n        List<Module> policies = authzClient.listPolicies(\"todo\", \"todo\");\n        authzClient.close();\n", "        authzClient.close();\n\n        // Assert\n        assertEquals(6, policies.size());\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    void testInsecureConnectionToInsecureClient() throws SSLException {\n        // Arrange", "    void testInsecureConnectionToInsecureClient() throws SSLException {\n        // Arrange\n        ManagedChannel channel = new ChannelBuilder()\n                .withHost(\"localhost\")\n                .withPort(8282)\n                .withInsecure(true)\n                .build();\n\n        AuthzClient authzClient =  new AuthzClient(channel);\n", "        AuthzClient authzClient =  new AuthzClient(channel);\n\n        // Act\n        List<Module> policies = authzClient.listPolicies(\"todo\", \"todo\");\n        authzClient.close();\n\n        // Assert\n        assertEquals(6, policies.size());\n    }\n", "    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    void testFailWhenSecureConnectionToInsecureClient() throws SSLException {\n        // Arrange\n        ManagedChannel channel = new ChannelBuilder()\n                .withHost(\"localhost\")\n                .withPort(8282)\n                .withInsecure(false)", "                .withPort(8282)\n                .withInsecure(false)\n                .build();\n\n        AuthzClient authzClient =  new AuthzClient(channel);\n\n        // Act & Assert\n        StatusRuntimeException exception = assertThrows(StatusRuntimeException.class, () -> {\n            authzClient.listPolicies(\"todo\", \"todo\");\n        });", "            authzClient.listPolicies(\"todo\", \"todo\");\n        });\n        authzClient.close();\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/AuthorizerClient.java", "chunked_list": ["package com.aserto;\n\nimport com.aserto.authorizer.v2.Decision;\nimport com.aserto.authorizer.v2.api.Module;\nimport com.aserto.model.IdentityCtx;\nimport com.aserto.model.PolicyCtx;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Map;\n\npublic interface AuthorizerClient {\n    public List<Module> listPolicies(String policyName, String policyLabel);\n    public Module getPolicy(String policyId);\n    public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx);\n    public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx, Map<String, Value> resourceCtx);\n    public Struct query(String query, PolicyCtx policyContext, Map<String, Value> values);\n    public Map<String, Value> decisionTree(IdentityCtx identityCtx, PolicyCtx policyCtx);", "    public Struct query(String query, PolicyCtx policyContext, Map<String, Value> values);\n    public Map<String, Value> decisionTree(IdentityCtx identityCtx, PolicyCtx policyCtx);\n    public void close();\n}\n"]}
{"filename": "src/main/java/com/aserto/ChannelBuilder.java", "chunked_list": ["package com.aserto;\n\nimport com.aserto.model.Config;\nimport io.grpc.ManagedChannel;\nimport io.grpc.Metadata;\nimport io.grpc.netty.GrpcSslContexts;\nimport io.grpc.netty.NettyChannelBuilder;\nimport io.grpc.stub.MetadataUtils;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;", "import io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport javax.net.ssl.SSLException;\nimport java.io.File;\n\n\npublic class ChannelBuilder {\n    private Config cfg;\n\n    public ChannelBuilder() {\n        this.cfg = new Config();\n    }\n\n    public ChannelBuilder(Config config) {\n        this.cfg = config;\n    }\n", "    public ChannelBuilder withTenantId(String tenantId) {\n        cfg.setTenantId(tenantId);\n\n        return this;\n    }\n\n    public ChannelBuilder withHost(String host) {\n        cfg.setHost(host);\n\n        return this;\n    }\n", "    public ChannelBuilder withPort(int port) {\n        cfg.setPort(port);\n\n        return this;\n    }\n\n    public ChannelBuilder withAPIKeyAuth(String apiKey) {\n        cfg.setApiKey(apiKey);\n\n        return this;\n    }\n", "    public ChannelBuilder withTokenAuth(String token) {\n        cfg.setToken(token);\n\n        return this;\n    }\n\n    public ChannelBuilder withInsecure(Boolean insecure) {\n        cfg.setInsecure(insecure);\n\n        return this;\n    }\n", "    public ChannelBuilder withCACertPath(String caCertPath) {\n        cfg.setCaCertPath(caCertPath);\n\n        return this;\n    }\n\n    public ManagedChannel build() throws SSLException {\n        Metadata metadata = new Metadata();\n        Metadata.Key<String> asertoTenantId = Metadata.Key.of(\"aserto-tenant-id\", Metadata.ASCII_STRING_MARSHALLER);\n        Metadata.Key<String> authorization = Metadata.Key.of(\"authorization\", Metadata.ASCII_STRING_MARSHALLER);\n", "        if (cfg.getTenantId() != null) {\n            metadata.put(asertoTenantId, cfg.getTenantId());\n        }\n\n        if (cfg.getApiKey() != null) {\n            metadata.put(authorization, \"basic \" + cfg.getApiKey());\n        }\n\n        NettyChannelBuilder channelBuilder = NettyChannelBuilder\n                .forAddress(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));\n\n        boolean insecure = cfg.getInsecure();\n        boolean caSpecified  = !cfg.getCaCertPath().isEmpty();\n", "        if (insecure) {\n            SslContext context = GrpcSslContexts.forClient()\n                    .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                    .build();\n            channelBuilder.sslContext(context);\n        } else if (caSpecified) {\n            SslContext context = GrpcSslContexts.forClient()\n                    .trustManager(new File(cfg.getCaCertPath()))\n                    .build();\n            channelBuilder.sslContext(context);\n        }\n\n\n        return channelBuilder.build();\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/AuthzClient.java", "chunked_list": ["package com.aserto;\n\nimport com.aserto.authorizer.v2.*;\nimport com.aserto.authorizer.v2.Decision;\nimport com.aserto.authorizer.v2.api.*;\nimport com.aserto.authorizer.v2.api.Module;\nimport com.aserto.model.IdentityCtx;\nimport com.aserto.model.PolicyCtx;\nimport com.google.protobuf.Struct;\nimport com.google.protobuf.Value;", "import com.google.protobuf.Struct;\nimport com.google.protobuf.Value;\nimport io.grpc.ManagedChannel;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\npublic class AuthzClient implements AuthorizerClient {\n    private AuthorizerGrpc.AuthorizerBlockingStub client;\n    private ManagedChannel channel;\n    public AuthzClient(ManagedChannel channel) {\n        client = AuthorizerGrpc.newBlockingStub(channel);\n        this.channel = channel;\n    }\n\n    public List<Module> listPolicies(String policyName, String policyLabel) {\n        ListPoliciesRequest.Builder policyBuilder = ListPoliciesRequest.newBuilder();\n\n        PolicyInstance policy = buildPolicy(policyName, policyLabel);\n        policyBuilder.setPolicyInstance(policy);\n\n        ListPoliciesResponse response = client.listPolicies(policyBuilder.build());\n\n        return response.getResultList();\n    }\n", "\npublic class AuthzClient implements AuthorizerClient {\n    private AuthorizerGrpc.AuthorizerBlockingStub client;\n    private ManagedChannel channel;\n    public AuthzClient(ManagedChannel channel) {\n        client = AuthorizerGrpc.newBlockingStub(channel);\n        this.channel = channel;\n    }\n\n    public List<Module> listPolicies(String policyName, String policyLabel) {\n        ListPoliciesRequest.Builder policyBuilder = ListPoliciesRequest.newBuilder();\n\n        PolicyInstance policy = buildPolicy(policyName, policyLabel);\n        policyBuilder.setPolicyInstance(policy);\n\n        ListPoliciesResponse response = client.listPolicies(policyBuilder.build());\n\n        return response.getResultList();\n    }\n", "    public Module getPolicy(String policyId) {\n        GetPolicyRequest.Builder getPolicyBuilder = GetPolicyRequest.newBuilder();\n        getPolicyBuilder.setId(policyId);\n\n        GetPolicyResponse policyResponse = client.getPolicy(getPolicyBuilder.build());\n\n        return policyResponse.getResult();\n    }\n\n    public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx) {\n        return this.is(identityCtx, policyCtx, Collections.emptyMap());\n    }\n\n    public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx, Map<String, Value> values) {\n        IsRequest.Builder isBuilder = IsRequest.newBuilder();\n\n        IdentityContext identityContext = buildIdentityContext(identityCtx);\n        PolicyContext policyContext = buildPolicyContext(policyCtx);\n        PolicyInstance policy = buildPolicy(policyCtx.getName(), policyCtx.getLabel());\n        Struct.Builder resourceContext = buildResourceContext(values);\n\n        isBuilder.setIdentityContext(identityContext);\n        isBuilder.setPolicyContext(policyContext);\n        isBuilder.setPolicyInstance(policy);\n        isBuilder.setResourceContext(resourceContext);\n\n        IsResponse isResponse = client.is(isBuilder.build());\n\n        return isResponse.getDecisionsList();\n    }\n", "    public Struct query(String query, PolicyCtx policyContext, Map<String, Value> values) {\n        QueryRequest.Builder queryRequestBuilder = QueryRequest.newBuilder();\n        queryRequestBuilder.setQuery(query);\n\n        PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());\n        Struct.Builder structBuilder = buildResourceContext(values);\n\n        queryRequestBuilder.setPolicyInstance(policy);\n        queryRequestBuilder.setResourceContext(structBuilder);\n\n        QueryResponse queryResponse = client.query(queryRequestBuilder.build());\n\n        return queryResponse.getResponse();\n    }\n\n    public Map<String, Value> decisionTree(IdentityCtx identityCtx, PolicyCtx policyCtx) {\n        DecisionTreeRequest.Builder decisionTreeBuilder = DecisionTreeRequest.newBuilder();\n\n        IdentityContext identityContext = buildIdentityContext(identityCtx);\n        PolicyContext policyContext = buildPolicyContext(policyCtx);\n        PolicyInstance policy = buildPolicy(policyCtx.getName(), policyCtx.getLabel());\n\n        decisionTreeBuilder.setIdentityContext(identityContext);\n        decisionTreeBuilder.setPolicyContext(policyContext);\n        decisionTreeBuilder.setPolicyInstance(policy);\n\n        DecisionTreeResponse decisionTree = client.decisionTree(decisionTreeBuilder.build());\n\n        return decisionTree.getPath().getFieldsMap();\n    }\n", "    public void close() {\n        channel.shutdown();\n    }\n\n    private PolicyInstance buildPolicy(String name, String label) {\n        PolicyInstance.Builder policyInstance = PolicyInstance.newBuilder();\n        policyInstance.setName(name);\n        policyInstance.setInstanceLabel(label);\n\n        return policyInstance.build();\n    }\n\n    private IdentityContext buildIdentityContext(IdentityCtx identityContext) {\n        IdentityContext.Builder identityContextBuilder =  IdentityContext.newBuilder();\n        identityContextBuilder.setIdentity(identityContext.getIdentity());\n        identityContextBuilder.setType(identityContext.getIdentityType());\n\n        return identityContextBuilder.build();\n    }\n\n    private PolicyContext buildPolicyContext(PolicyCtx policyContext) {\n        PolicyContext.Builder policyContextBuilder = PolicyContext.newBuilder();\n        policyContextBuilder.setPath(policyContext.getPath());\n        policyContextBuilder.addAllDecisions(Arrays.asList(policyContext.getDecisions()));\n\n        return policyContextBuilder.build();\n    }\n\n    private Struct.Builder buildResourceContext(Map<String, Value> values) {\n        Struct.Builder structBuilder = Struct.newBuilder();\n        values.forEach(structBuilder::putFields);\n\n        return structBuilder;\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/DirectoryClient.java", "chunked_list": ["package com.aserto;\n\nimport com.aserto.directory.common.v2.ObjectTypeIdentifier;\nimport com.aserto.directory.common.v2.PaginationRequest;\nimport com.aserto.directory.exporter.v2.ExporterGrpc;\nimport com.aserto.directory.importer.v2.ImporterGrpc;\nimport com.aserto.directory.reader.v2.*;\nimport com.aserto.directory.writer.v2.WriterGrpc;\nimport com.aserto.directory.common.v2.Object;\nimport io.grpc.ManagedChannel;", "import com.aserto.directory.common.v2.Object;\nimport io.grpc.ManagedChannel;\n\npublic class DirectoryClient {\n    private ReaderGrpc.ReaderBlockingStub readerClient;\n    private WriterGrpc.WriterBlockingStub writerClient;\n    private ImporterGrpc.ImporterBlockingStub importerClient;\n    private ExporterGrpc.ExporterBlockingStub exporterClient;\n    private ManagedChannel channel;\n\n    public DirectoryClient(ManagedChannel channel) {\n        this.readerClient = ReaderGrpc.newBlockingStub(channel);\n        this.writerClient = WriterGrpc.newBlockingStub(channel);\n        this.importerClient = ImporterGrpc.newBlockingStub(channel);\n        this.exporterClient = ExporterGrpc.newBlockingStub(channel);\n        this.channel = channel;\n    }\n\n    public ReaderGrpc.ReaderBlockingStub getReaderClient() {\n        return readerClient;\n    }\n\n    public WriterGrpc.WriterBlockingStub getWriterClient() {\n        return writerClient;\n    }\n\n    public ImporterGrpc.ImporterBlockingStub getImporterClient() {\n        return importerClient;\n    }\n\n    public ExporterGrpc.ExporterBlockingStub getExporterClient() {\n        return exporterClient;\n    }\n    class Result<T> {\n        private T[] results;\n        private String nextPageToken;\n\n        public Result(T[] results, String nextPageToken) {\n            this.results = results;\n            this.nextPageToken = nextPageToken;\n        }\n\n        public T[] getResults() {\n            return results;\n        }\n", "        public String getNextPageToken() {\n            return nextPageToken;\n        }\n    }\n\n    public Result<Object> getObjects(String objectType, Integer pageSize, String nextPageToken) {\n        GetObjectsRequest.Builder builder = GetObjectsRequest.newBuilder();\n\n        PaginationRequest paginationRequest = PaginationRequest.newBuilder()\n            .setSize(pageSize)\n            .setToken(nextPageToken)\n            .build();\n        ObjectTypeIdentifier objectIdentifier = ObjectTypeIdentifier.newBuilder()\n                .setName(objectType)\n                .build();\n\n        GetObjectsRequest request = builder\n                .setPage(paginationRequest)\n                .setParam(objectIdentifier)\n                .build();\n        GetObjectsResponse response = readerClient.getObjects(request);\n        String nextToken = response.getPage().getNextToken();\n\n\n        Object[] objects = response.getResultsList().toArray(new Object[0]);\n        return new Result<>(objects, nextToken);\n    }\n", "    public void close() {\n        channel.shutdown();\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/model/PolicyCtx.java", "chunked_list": ["package com.aserto.model;\n\npublic class PolicyCtx {\n    private String name;\n    private String label;\n    private String path;\n    private String[] decisions;\n\n    public PolicyCtx() {\n    }\n\n    public PolicyCtx(String name, String label, String path, String[] decisions) {\n        this.name = name;\n        this.label = label;\n        this.path = path;\n        this.decisions = decisions;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n", "    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public String getPath() {\n        return path;\n    }\n", "    public String getPath() {\n        return path;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public String[] getDecisions() {\n        return decisions;\n    }\n", "    public void setDecisions(String[] decisions) {\n        this.decisions = decisions;\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/model/Config.java", "chunked_list": ["package com.aserto.model;\n\npublic class Config {\n    private String host;\n    private int port;\n    private String apiKey;\n    private String tenantId;\n    private String token = \"\";\n    private Boolean insecure = false;\n    private String caCertPath = \"\";\n\n    public Config() {\n    }\n\n    public Config(String host, int port, String apiKey, String tenantID, String token, Boolean insecure, String caCertPath) {\n        this.host = host;\n        this.port = port;\n        this.apiKey = apiKey;\n        this.tenantId = tenantID;\n        this.token = token;\n        this.insecure = insecure;\n        this.caCertPath = caCertPath;\n    }\n", "    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n", "    public int getPort() {\n        return port;\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n\n    public String getApiKey() {\n        return apiKey;\n    }\n", "    public String getApiKey() {\n        return apiKey;\n    }\n\n    public void setApiKey(String apiKey) {\n        this.apiKey = apiKey;\n    }\n\n    public String getTenantId() {\n        return tenantId;\n    }\n", "    public String getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n    }\n\n    public String getToken() {\n        return token;\n    }\n", "    public String getToken() {\n        return token;\n    }\n\n    public void setToken(String token) {\n        this.token = token;\n    }\n\n    public Boolean getInsecure() {\n        return insecure;\n    }\n", "    public Boolean getInsecure() {\n        return insecure;\n    }\n\n    public void setInsecure(Boolean insecure) {\n        this.insecure = insecure;\n    }\n\n    public String getCaCertPath() {\n        return caCertPath;\n    }\n", "    public String getCaCertPath() {\n        return caCertPath;\n    }\n\n    public void setCaCertPath(String caCertPath) {\n        this.caCertPath = caCertPath;\n    }\n}\n"]}
{"filename": "src/main/java/com/aserto/model/IdentityCtx.java", "chunked_list": ["package com.aserto.model;\n\nimport com.aserto.authorizer.v2.api.IdentityType;\n\npublic class IdentityCtx {\n    private String identity;\n    private IdentityType identityType;\n\n    public IdentityCtx() {\n    }\n\n    public IdentityCtx(String identity, IdentityType identityType) {\n        this.identity = identity;\n        this.identityType = identityType;\n    }\n", "    public String getIdentity() {\n        return identity;\n    }\n\n    public void setIdentity(String identity) {\n        this.identity = identity;\n    }\n\n    public IdentityType getIdentityType() {\n        return identityType;\n    }\n", "    public IdentityType getIdentityType() {\n        return identityType;\n    }\n\n    public void setIdentityType(IdentityType identityType) {\n        this.identityType = identityType;\n    }\n}\n"]}
