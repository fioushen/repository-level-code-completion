{"filename": "sample/empty-project/module-b/src/test/java/me/panxin/jumptocontroller/moduleb/ModuleBApplicationTests.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ModuleBApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "sample/empty-project/module-b/src/main/java/me/panxin/jumptocontroller/moduleb/ModuleBApplication.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients({\"me.panxin.jumptocontroller\"})\n@SpringBootApplication\npublic class ModuleBApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ModuleBApplication.class, args);\n    }\n\n}\n", "public class ModuleBApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ModuleBApplication.class, args);\n    }\n\n}\n"]}
{"filename": "sample/empty-project/module-b/src/main/java/me/panxin/jumptocontroller/moduleb/feign/UserFeignClientInvokes.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb.feign;\n\nimport me.panxin.jumptocontroller.moduleb.common.Result;\nimport me.panxin.jumptocontroller.moduleb.vo.UserVo;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**", "\n/**\n * @author PanXin\n * @version $ Id: UserFeignClientInvokes, v 0.1 2023/05/22 20:29 PanXin Exp $\n */\n@FeignClient(value = \"user-service\")\npublic interface UserFeignClientInvokes {\n\n    @RequestMapping(value = \"/user/query\", method = RequestMethod.GET)\n    Result<UserVo> queryIntegral(@RequestParam(\"userId\") String userId);\n}\n"]}
{"filename": "sample/empty-project/module-b/src/main/java/me/panxin/jumptocontroller/moduleb/vo/UserVo.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb.vo;\n\n/**\n * @author PanXin\n * @version $ Id: UserVo, v 0.1 2023/05/22 20:38 PanXin Exp $\n */\npublic class UserVo {\n}"]}
{"filename": "sample/empty-project/module-b/src/main/java/me/panxin/jumptocontroller/moduleb/common/Result.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb.common;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.apache.commons.lang3.time.DateFormatUtils;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * @author PanXin\n * @version $ Id: Result, v 0.1 2023/03/15 19:03 PanXin Exp $", " * @author PanXin\n * @version $ Id: Result, v 0.1 2023/03/15 19:03 PanXin Exp $\n */\npublic class Result<T> implements Serializable {\n\n    private static final long serialVersionUID = -5762046734606427915L;\n\n    public static final  String DATE_PATTERN = \"yyyy-MM-dd HH:mm:ss SSS\";\n\n    private Boolean success;\n\n    private String  code;\n\n    private String  message;\n\n    private T data;\n\n    private String timestamp;\n\n    public static <T> Result<T> success(T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(true);\n        result.setCode(ErrorCode.SUCCESS.getCode());\n        result.setMessage(ErrorCode.SUCCESS.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> success(){\n        return success(null);\n    }\n\n    public static <T> Result<T> fail(ErrorCode errorCode){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(errorCode.getCode());\n        result.setMessage(errorCode.getDesc());\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex, T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(ErrorCode.SYSTEM_ERROR.getCode());\n        result.setMessage(ex != null? ExceptionUtils.getRootCauseMessage(ex) : ErrorCode.SYSTEM_ERROR.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex){\n        return fail(ex, null);\n    }\n\n    public static <T> Result<T> fail(){\n        return fail(null,null);\n    }\n", "    public Boolean getSuccess() {\n        return success;\n    }\n\n    public void setSuccess(Boolean success) {\n        this.success = success;\n    }\n\n    public String getCode() {\n        return code;\n    }\n", "    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n", "    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getData() {\n        return data;\n    }\n", "    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public String getTimestamp() {\n        return timestamp;\n    }\n", "    public String getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(String timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    @Override\n    public String toString() {\n        return \"Result{\" +\n                \"success=\" + success +\n                \", code='\" + code + '\\'' +\n                \", message='\" + message + '\\'' +\n                \", data=\" + data +\n                \", timestamp='\" + timestamp + '\\'' +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"Result{\" +\n                \"success=\" + success +\n                \", code='\" + code + '\\'' +\n                \", message='\" + message + '\\'' +\n                \", data=\" + data +\n                \", timestamp='\" + timestamp + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "sample/empty-project/module-b/src/main/java/me/panxin/jumptocontroller/moduleb/common/ErrorCode.java", "chunked_list": ["package me.panxin.jumptocontroller.moduleb.common;\n\n/**\n * @author PanXin\n */\n\npublic enum ErrorCode {\n    // \u9519\u8bef\u7801\n    SUCCESS(\"00000\", \"\u6210\u529f\"),\n    PARAM_ERROR(\"A0400\",\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\"),\n    SYSTEM_ERROR(\"B0001\", \"\u7cfb\u7edf\u6267\u884c\u51fa\u9519\"),\n\n    //\u81ea\u5b9a\u4e49\u4e1a\u52a1\u9519\u8bef\u7801\n    RATE_LIMIT_ERROR(\"3005\", \"\u9650\u6d41\u5f02\u5e38\"),\n    FILE_UPLOAD_FAILURE(\"3006\", \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\"),\n    ;\n\n    /**\n     * \u7f16\u7801\n     */\n    private final String code;\n\n    /**\n     * \u63cf\u8ff0\u4fe1\u606f\n     */\n    private final String desc;\n     ErrorCode(String code, String desc){\n         this.code = code;\n         this.desc = desc;\n     }\n", "    public String getCode() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "sample/empty-project/module-a/src/test/java/me/panxin/jumptocontroller/modulea/ModuleAApplicationTests.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ModuleAApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "sample/empty-project/module-a/src/main/java/me/panxin/jumptocontroller/modulea/ModuleAApplication.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ModuleAApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(ModuleAApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(ModuleAApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "sample/empty-project/module-a/src/main/java/me/panxin/jumptocontroller/modulea/vo/UserVo.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea.vo;\n\n/**\n * @author PanXin\n * @version $ Id: UserVo, v 0.1 2023/05/22 20:38 PanXin Exp $\n */\npublic class UserVo {\n}"]}
{"filename": "sample/empty-project/module-a/src/main/java/me/panxin/jumptocontroller/modulea/common/Result.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea.common;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.apache.commons.lang3.time.DateFormatUtils;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * @author PanXin", "/**\n * @author PanXin\n * @version $ Id: Result, v 0.1 2023/03/15 19:03 PanXin Exp $\n */\npublic class Result<T> implements Serializable {\n\n    private static final long serialVersionUID = -5762046734606427915L;\n\n    public static final  String DATE_PATTERN = \"yyyy-MM-dd HH:mm:ss SSS\";\n\n    private Boolean success;\n\n    private String  code;\n\n    private String  message;\n\n    private T data;\n\n    private String timestamp;\n\n    public static <T> Result<T> success(T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(true);\n        result.setCode(ErrorCode.SUCCESS.getCode());\n        result.setMessage(ErrorCode.SUCCESS.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> success(){\n        return success(null);\n    }\n\n    public static <T> Result<T> fail(ErrorCode errorCode){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(errorCode.getCode());\n        result.setMessage(errorCode.getDesc());\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex, T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(ErrorCode.SYSTEM_ERROR.getCode());\n        result.setMessage(ex != null? ExceptionUtils.getRootCauseMessage(ex) : ErrorCode.SYSTEM_ERROR.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex){\n        return fail(ex, null);\n    }\n\n    public static <T> Result<T> fail(){\n        return fail(null,null);\n    }\n", "    public static final  String DATE_PATTERN = \"yyyy-MM-dd HH:mm:ss SSS\";\n\n    private Boolean success;\n\n    private String  code;\n\n    private String  message;\n\n    private T data;\n\n    private String timestamp;\n\n    public static <T> Result<T> success(T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(true);\n        result.setCode(ErrorCode.SUCCESS.getCode());\n        result.setMessage(ErrorCode.SUCCESS.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> success(){\n        return success(null);\n    }\n\n    public static <T> Result<T> fail(ErrorCode errorCode){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(errorCode.getCode());\n        result.setMessage(errorCode.getDesc());\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex, T payload){\n        Result<T> result = new Result<>();\n        result.setSuccess(false);\n        result.setCode(ErrorCode.SYSTEM_ERROR.getCode());\n        result.setMessage(ex != null? ExceptionUtils.getRootCauseMessage(ex) : ErrorCode.SYSTEM_ERROR.getDesc());\n        result.setData(payload);\n        result.setTimestamp(DateFormatUtils.format(new Date(), DATE_PATTERN));\n        return result;\n    }\n\n    public static <T> Result<T> fail(Throwable ex){\n        return fail(ex, null);\n    }\n\n    public static <T> Result<T> fail(){\n        return fail(null,null);\n    }\n", "    public Boolean getSuccess() {\n        return success;\n    }\n\n    public void setSuccess(Boolean success) {\n        this.success = success;\n    }\n\n    public String getCode() {\n        return code;\n    }\n", "    public String getCode() {\n        return code;\n    }\n\n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n", "    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getData() {\n        return data;\n    }\n", "    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public String getTimestamp() {\n        return timestamp;\n    }\n", "    public String getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(String timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    @Override\n    public String toString() {\n        return \"Result{\" +\n                \"success=\" + success +\n                \", code='\" + code + '\\'' +\n                \", message='\" + message + '\\'' +\n                \", data=\" + data +\n                \", timestamp='\" + timestamp + '\\'' +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"Result{\" +\n                \"success=\" + success +\n                \", code='\" + code + '\\'' +\n                \", message='\" + message + '\\'' +\n                \", data=\" + data +\n                \", timestamp='\" + timestamp + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "sample/empty-project/module-a/src/main/java/me/panxin/jumptocontroller/modulea/common/ErrorCode.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea.common;\n\n/**\n * @author PanXin\n */\n\npublic enum ErrorCode {\n    // \u9519\u8bef\u7801\n    SUCCESS(\"00000\", \"\u6210\u529f\"),\n    PARAM_ERROR(\"A0400\",\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\"),\n    SYSTEM_ERROR(\"B0001\", \"\u7cfb\u7edf\u6267\u884c\u51fa\u9519\"),\n\n    //\u81ea\u5b9a\u4e49\u4e1a\u52a1\u9519\u8bef\u7801\n    RATE_LIMIT_ERROR(\"3005\", \"\u9650\u6d41\u5f02\u5e38\"),\n    FILE_UPLOAD_FAILURE(\"3006\", \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\"),\n    ;\n\n    /**\n     * \u7f16\u7801\n     */\n    private final String code;\n\n    /**\n     * \u63cf\u8ff0\u4fe1\u606f\n     */\n    private final String desc;\n     ErrorCode(String code, String desc){\n         this.code = code;\n         this.desc = desc;\n     }\n", "    public String getCode() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "sample/empty-project/module-a/src/main/java/me/panxin/jumptocontroller/modulea/controller/UserController.java", "chunked_list": ["package me.panxin.jumptocontroller.modulea.controller;\n\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport me.panxin.jumptocontroller.modulea.common.Result;\nimport me.panxin.jumptocontroller.modulea.vo.UserVo;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author PanXin\n * @version $ Id: UserController, v 0.1 2023/05/22 20:27 PanXin Exp $\n */\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    /**\n     * \u67e5\u8be2\n     * \u67e5\u8be2\u7528\u6237\u4ec5\u4f5c\u5c55\u793a\n     *\n     * @param userId \u7528\u6237id\n     * @return {@link Result}<{@link UserVo}>\n     */\n    @ApiOperation(\"\u67e5\u8be2\u7528\u6237\")\n    @GetMapping(value = \"/query\")\n    public Result<UserVo> query(\n            @ApiParam(name = \"userId\", value = \"\u7528\u6237ID\", required = true) @RequestParam(value = \"userId\", required = true) String userId) {\n\n        return null;\n    }\n    @ApiOperation(\"\u5220\u9664\u7528\u6237\")\n    @GetMapping(value = \"/delete\")\n    public Result<UserVo> delete(\n            @ApiParam(name = \"userId\", value = \"\u7528\u6237ID\", required = true) @RequestParam(value = \"userId\", required = true) String userId) {\n\n        return null;\n    }\n}", "@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    /**\n     * \u67e5\u8be2\n     * \u67e5\u8be2\u7528\u6237\u4ec5\u4f5c\u5c55\u793a\n     *\n     * @param userId \u7528\u6237id\n     * @return {@link Result}<{@link UserVo}>\n     */\n    @ApiOperation(\"\u67e5\u8be2\u7528\u6237\")\n    @GetMapping(value = \"/query\")\n    public Result<UserVo> query(\n            @ApiParam(name = \"userId\", value = \"\u7528\u6237ID\", required = true) @RequestParam(value = \"userId\", required = true) String userId) {\n\n        return null;\n    }\n    @ApiOperation(\"\u5220\u9664\u7528\u6237\")\n    @GetMapping(value = \"/delete\")\n    public Result<UserVo> delete(\n            @ApiParam(name = \"userId\", value = \"\u7528\u6237ID\", required = true) @RequestParam(value = \"userId\", required = true) String userId) {\n\n        return null;\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/ControllerInfo.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller;\n\nimport com.intellij.psi.PsiMethod;\n\n/**\n * @author PanXin\n * @version $ Id: ControllerInfo, v 0.1 2023/05/16 9:42 PanXin Exp $\n */\n\npublic class ControllerInfo {\n    private String path=\"\";\n    private String swaggerInfo=\"\";\n    private String swaggerNotes=\"\";\n    private PsiMethod method;\n\n    private String requestMethod;\n\n    public ControllerInfo() {    }\n\n    public ControllerInfo(String path, String swaggerInfo, String swaggerNotes, PsiMethod method) {\n        this.path = path;\n        this.swaggerInfo = swaggerInfo;\n        this.swaggerNotes = swaggerNotes;\n        this.method = method;\n    }\n", "\npublic class ControllerInfo {\n    private String path=\"\";\n    private String swaggerInfo=\"\";\n    private String swaggerNotes=\"\";\n    private PsiMethod method;\n\n    private String requestMethod;\n\n    public ControllerInfo() {    }\n\n    public ControllerInfo(String path, String swaggerInfo, String swaggerNotes, PsiMethod method) {\n        this.path = path;\n        this.swaggerInfo = swaggerInfo;\n        this.swaggerNotes = swaggerNotes;\n        this.method = method;\n    }\n", "    public String getPath() {\n        return this.path;\n    }\n\n    public String getSwaggerInfo() {\n        return this.swaggerInfo;\n    }\n\n    public String getSwaggerNotes() {\n        return this.swaggerNotes;\n    }\n", "    public String getSwaggerNotes() {\n        return this.swaggerNotes;\n    }\n\n    public PsiMethod getMethod() {\n        return this.method;\n    }\n\n    public String getRequestMethod() {\n        return this.requestMethod;\n    }\n", "    public String getRequestMethod() {\n        return this.requestMethod;\n    }\n\n    public void setPath(String path) {\n        this.path = path;\n    }\n\n    public void setSwaggerInfo(String swaggerInfo) {\n        this.swaggerInfo = swaggerInfo;\n    }\n", "    public void setSwaggerInfo(String swaggerInfo) {\n        this.swaggerInfo = swaggerInfo;\n    }\n\n    public void setSwaggerNotes(String swaggerNotes) {\n        this.swaggerNotes = swaggerNotes;\n    }\n\n    public void setMethod(PsiMethod method) {\n        this.method = method;\n    }\n", "    public void setMethod(PsiMethod method) {\n        this.method = method;\n    }\n\n    public void setRequestMethod(String requestMethod) {\n        this.requestMethod = requestMethod;\n    }\n\n    public boolean equals(final Object o) {\n        if (o == this) return true;\n        if (!(o instanceof ControllerInfo)) return false;\n        final ControllerInfo other = (ControllerInfo) o;", "    public boolean equals(final Object o) {\n        if (o == this) return true;\n        if (!(o instanceof ControllerInfo)) return false;\n        final ControllerInfo other = (ControllerInfo) o;\n        if (!other.canEqual((Object) this)) return false;\n        final Object this$path = this.getPath();\n        final Object other$path = other.getPath();\n        if (this$path == null ? other$path != null : !this$path.equals(other$path)) return false;\n        final Object this$swaggerInfo = this.getSwaggerInfo();\n        final Object other$swaggerInfo = other.getSwaggerInfo();\n        if (this$swaggerInfo == null ? other$swaggerInfo != null : !this$swaggerInfo.equals(other$swaggerInfo))\n            return false;\n        final Object this$swaggerNotes = this.getSwaggerNotes();\n        final Object other$swaggerNotes = other.getSwaggerNotes();", "        if (this$swaggerInfo == null ? other$swaggerInfo != null : !this$swaggerInfo.equals(other$swaggerInfo))\n            return false;\n        final Object this$swaggerNotes = this.getSwaggerNotes();\n        final Object other$swaggerNotes = other.getSwaggerNotes();\n        if (this$swaggerNotes == null ? other$swaggerNotes != null : !this$swaggerNotes.equals(other$swaggerNotes))\n            return false;\n        final Object this$method = this.getMethod();\n        final Object other$method = other.getMethod();\n        if (this$method == null ? other$method != null : !this$method.equals(other$method)) return false;\n        final Object this$requestMethod = this.getRequestMethod();\n        final Object other$requestMethod = other.getRequestMethod();", "        if (this$method == null ? other$method != null : !this$method.equals(other$method)) return false;\n        final Object this$requestMethod = this.getRequestMethod();\n        final Object other$requestMethod = other.getRequestMethod();\n        if (this$requestMethod == null ? other$requestMethod != null : !this$requestMethod.equals(other$requestMethod))\n            return false;\n        return true;\n    }\n\n    protected boolean canEqual(final Object other) {\n        return other instanceof ControllerInfo;\n    }\n", "    public int hashCode() {\n        final int PRIME = 59;\n        int result = 1;\n        final Object $path = this.getPath();\n        result = result * PRIME + ($path == null ? 43 : $path.hashCode());\n        final Object $swaggerInfo = this.getSwaggerInfo();\n        result = result * PRIME + ($swaggerInfo == null ? 43 : $swaggerInfo.hashCode());\n        final Object $swaggerNotes = this.getSwaggerNotes();\n        result = result * PRIME + ($swaggerNotes == null ? 43 : $swaggerNotes.hashCode());\n        final Object $method = this.getMethod();\n        result = result * PRIME + ($method == null ? 43 : $method.hashCode());\n        final Object $requestMethod = this.getRequestMethod();\n        result = result * PRIME + ($requestMethod == null ? 43 : $requestMethod.hashCode());\n        return result;\n    }\n", "    public String toString() {\n        return \"ControllerInfo(path=\" + this.getPath() + \", swaggerInfo=\" + this.getSwaggerInfo() + \", swaggerNotes=\" + this.getSwaggerNotes() + \", method=\" + this.getMethod() + \", requestMethod=\" + this.getRequestMethod() + \")\";\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/action/RefreshCacheAction.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.action;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.project.Project;\nimport me.panxin.plugin.idea.jumpcontroller.util.JavaSourceFileUtil;\nimport me.panxin.plugin.idea.jumpcontroller.util.MyCacheManager;\nimport org.jetbrains.annotations.NotNull;\n\n/**", "\n/**\n * @author PanXin\n * @version $ Id: ControllerPathCollector, v 0.1 2023/05/16 9:42 PanXin Exp $\n */\npublic class RefreshCacheAction extends AnAction {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent event) {\n        JavaSourceFileUtil.clear();\n        // \u626b\u63cf\u9879\u76ee\u4e2d\u7684Java\u6e90\u6587\u4ef6\n       JavaSourceFileUtil.scanAllProjectControllerInfo();\n    }\n}", "    public void actionPerformed(@NotNull AnActionEvent event) {\n        JavaSourceFileUtil.clear();\n        // \u626b\u63cf\u9879\u76ee\u4e2d\u7684Java\u6e90\u6587\u4ef6\n       JavaSourceFileUtil.scanAllProjectControllerInfo();\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/action/SearchControllerAction.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.action;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.editor.ScrollType;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiFile;\nimport com.intellij.psi.PsiJavaFile;\nimport com.intellij.psi.PsiMethod;", "import com.intellij.psi.PsiJavaFile;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.util.PsiUtilBase;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.util.JavaSourceFileUtil;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport javax.swing.*;\nimport javax.swing.event.DocumentEvent;", "import javax.swing.*;\nimport javax.swing.event.DocumentEvent;\nimport javax.swing.event.DocumentListener;\nimport java.awt.*;\nimport java.awt.datatransfer.DataFlavor;\nimport java.awt.datatransfer.Transferable;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.util.List;\nimport java.util.stream.Collectors;", "import java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author PanXin\n * @version $ Id: ControllerPathCollector, v 0.1 2023/05/16 9:42 PanXin Exp $\n */\npublic class SearchControllerAction extends AnAction {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent event) {\n\n        // \u626b\u63cf\u9879\u76ee\u4e2d\u7684Java\u6e90\u6587\u4ef6\n        List<ControllerInfo> controllerInfos = JavaSourceFileUtil.scanAllProjectControllerInfo();\n        // \u6267\u884c\u641c\u7d22\n        startSearch(controllerInfos);\n    }\n    private void startSearch(List<ControllerInfo> controllerInfos) {\n        JFrame searchFrame = new JFrame(\"\u641c\u7d22\");\n        searchFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n        searchFrame.setSize(1000, 400);\n\n        JTextArea resultTextArea = new JTextArea();\n        resultTextArea.setText(\" \u6309\u56de\u8f66\u8df3\u8f6c\u7b2c\u4e00\u4e2a\u63a5\u53e3\\n \u53ef\u4ee5\u901a\u8fc7\u7a7a\u683c+\u6570\u5b57\u4f20\u9012\u884c\u6570\uff0c\u4f8b\u5982\uff1a\\n /user/list 2\\n \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5feb\u6377\u952e\");\n        resultTextArea.setEditable(false);\n        JScrollPane scrollPane = new JScrollPane(resultTextArea);\n\n        JTextField searchField = new JTextField();\n        searchField.setToolTipText(\"\u6309\u56de\u8f66\u8df3\u8f6c\");\n        searchField.setEditable(true); // \u542f\u7528\u7f16\u8f91\u529f\u80fd\n        searchField.setTransferHandler(new TextFieldTransferHandler()); // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u4f20\u8f93\u5904\u7406\u7a0b\u5e8f\n        searchField.setPreferredSize(new Dimension(300, 30));\n        searchField.getDocument().addDocumentListener(new DocumentListener() {\n            @Override", "    public void actionPerformed(@NotNull AnActionEvent event) {\n\n        // \u626b\u63cf\u9879\u76ee\u4e2d\u7684Java\u6e90\u6587\u4ef6\n        List<ControllerInfo> controllerInfos = JavaSourceFileUtil.scanAllProjectControllerInfo();\n        // \u6267\u884c\u641c\u7d22\n        startSearch(controllerInfos);\n    }\n    private void startSearch(List<ControllerInfo> controllerInfos) {\n        JFrame searchFrame = new JFrame(\"\u641c\u7d22\");\n        searchFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n        searchFrame.setSize(1000, 400);\n\n        JTextArea resultTextArea = new JTextArea();\n        resultTextArea.setText(\" \u6309\u56de\u8f66\u8df3\u8f6c\u7b2c\u4e00\u4e2a\u63a5\u53e3\\n \u53ef\u4ee5\u901a\u8fc7\u7a7a\u683c+\u6570\u5b57\u4f20\u9012\u884c\u6570\uff0c\u4f8b\u5982\uff1a\\n /user/list 2\\n \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5feb\u6377\u952e\");\n        resultTextArea.setEditable(false);\n        JScrollPane scrollPane = new JScrollPane(resultTextArea);\n\n        JTextField searchField = new JTextField();\n        searchField.setToolTipText(\"\u6309\u56de\u8f66\u8df3\u8f6c\");\n        searchField.setEditable(true); // \u542f\u7528\u7f16\u8f91\u529f\u80fd\n        searchField.setTransferHandler(new TextFieldTransferHandler()); // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u4f20\u8f93\u5904\u7406\u7a0b\u5e8f\n        searchField.setPreferredSize(new Dimension(300, 30));\n        searchField.getDocument().addDocumentListener(new DocumentListener() {\n            @Override", "            public void insertUpdate(DocumentEvent e) {\n                performSearch();\n            }\n\n            @Override\n            public void removeUpdate(DocumentEvent e) {\n                performSearch();\n            }\n\n            @Override\n            public void changedUpdate(DocumentEvent e) {\n                performSearch();\n            }\n\n            private void performSearch() {\n                String searchText = searchField.getText().strip();\n                List<ControllerInfo> searchResults = searchControllerInfos(controllerInfos, searchText.split(\" \")[0]);\n                showControllerInfo(searchResults, resultTextArea);\n            }\n        });\n\n        searchField.addKeyListener(new KeyAdapter() {\n            @Override", "            public void changedUpdate(DocumentEvent e) {\n                performSearch();\n            }\n\n            private void performSearch() {\n                String searchText = searchField.getText().strip();\n                List<ControllerInfo> searchResults = searchControllerInfos(controllerInfos, searchText.split(\" \")[0]);\n                showControllerInfo(searchResults, resultTextArea);\n            }\n        });\n\n        searchField.addKeyListener(new KeyAdapter() {\n            @Override", "            public void keyPressed(KeyEvent e) {\n                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n                    navigateToFirstControllerCode(controllerInfos, searchField.getText().strip());\n                }\n            }\n        });\n\n        JPanel contentPane = new JPanel(new BorderLayout());\n        JPanel searchPanel = new JPanel(new FlowLayout());\n        searchPanel.add(new JLabel(\"Search:\"));\n        searchPanel.add(searchField);\n        contentPane.add(searchPanel, BorderLayout.NORTH);\n        contentPane.add(scrollPane, BorderLayout.CENTER);\n\n        searchFrame.setContentPane(contentPane);\n        searchFrame.setVisible(true);\n    }\n    static class TextFieldTransferHandler extends TransferHandler {\n        @Override", "        public boolean canImport(TransferSupport support) {\n            return support.isDataFlavorSupported(DataFlavor.stringFlavor);\n        }\n\n        @Override\n        public boolean importData(TransferSupport support) {\n            if (!canImport(support)) {\n                return false;\n            }\n\n            Transferable transferable = support.getTransferable();", "            try {\n                String data = (String) transferable.getTransferData(DataFlavor.stringFlavor);\n                JTextField textField = (JTextField) support.getComponent();\n                textField.setText(data);\n                return true;\n            } catch (Exception e) {\n                return false;\n            }\n        }\n    }\n\n    private void showControllerInfo(List<ControllerInfo> controllerInfos, JTextArea resultTextArea) {\n        resultTextArea.setText(JavaSourceFileUtil.showResult(controllerInfos));\n        resultTextArea.setCaretPosition(0);\n    }\n\n\n    private List<ControllerInfo> searchControllerInfos(List<ControllerInfo> controllerInfos, String searchText) {\n        return controllerInfos.stream()\n                .filter(info -> isMatched(info, searchText))\n                .collect(Collectors.toList());\n    }\n    private void navigateToFirstControllerCode(List<ControllerInfo> controllerInfos, String searchText) {\n        List<ControllerInfo> searchResults = null;\n        int i = 0;\n        String[] s = searchText.split(\" \");", "        if(s.length == 1){\n            searchResults = searchControllerInfos(controllerInfos, searchText);\n        }else if(s.length == 2){\n            searchResults = searchControllerInfos(controllerInfos, s[0]);\n            i = Integer.parseInt(s[1])-1;\n        }\n        if (CollectionUtils.isNotEmpty(searchResults)) {\n            ControllerInfo iResult = searchResults.get(i);\n            navigateToControllerCode(iResult);\n        }\n    }\n    private void navigateToControllerCode(ControllerInfo controllerInfo) {\n        PsiFile file = controllerInfo.getMethod().getContainingFile();", "        if (file instanceof PsiJavaFile) {\n            PsiJavaFile javaFile = (PsiJavaFile) file;\n            PsiClass[] classes = javaFile.getClasses();\n            if (classes.length > 0) {\n                PsiClass psiClass = classes[0];\n                psiClass.navigate(true);\n                // \u5b9a\u4f4d\u5230\u5bf9\u5e94\u7684\u65b9\u6cd5\n                PsiMethod targetMethod = controllerInfo.getMethod();\n                if (targetMethod != null) {\n                    int offset = targetMethod.getTextOffset();\n                    Editor editor = PsiUtilBase.findEditor(file);", "                if (targetMethod != null) {\n                    int offset = targetMethod.getTextOffset();\n                    Editor editor = PsiUtilBase.findEditor(file);\n                    if (editor != null) {\n                        editor.getCaretModel().moveToOffset(offset);\n                        editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);\n                    }\n                }\n            }\n        }\n    }\n    // \u6dfb\u52a0\u8f85\u52a9\u65b9\u6cd5isMatched\uff1a\n    private boolean isMatched(ControllerInfo controllerInfo, String searchText) {\n        String lowerCase = searchText.toLowerCase();", "        if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        if(controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }\n\n}", "        if(controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        return false;\n    }\n\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/action/ScanControllerAction.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.action;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.util.CustomDialog;\nimport me.panxin.plugin.idea.jumpcontroller.util.JavaSourceFileUtil;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;", "\nimport java.util.List;\n\n/**\n * @author PanXin\n * @version $ Id: ControllerPathCollector, v 0.1 2023/05/16 9:42 PanXin Exp $\n */\npublic class ScanControllerAction extends AnAction {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent event) {\n        List<ControllerInfo> controllerInfos = JavaSourceFileUtil.scanAllProjectControllerInfo();\n        showControllerInfo(controllerInfos);\n\n    }\n    private void showControllerInfo(List<ControllerInfo> controllerInfos) {\n        CustomDialog dialog = new CustomDialog(controllerInfos);\n        dialog.show();\n    }\n}", "    public void actionPerformed(@NotNull AnActionEvent event) {\n        List<ControllerInfo> controllerInfos = JavaSourceFileUtil.scanAllProjectControllerInfo();\n        showControllerInfo(controllerInfos);\n\n    }\n    private void showControllerInfo(List<ControllerInfo> controllerInfos) {\n        CustomDialog dialog = new CustomDialog(controllerInfos);\n        dialog.show();\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/enumclass/SpringRequestMethodAnnotation.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.enumclass;\n\n/**\n * @author PanXin\n * @version $ Id: SpringRequestMethodAnnotation, v 0.1 2023/05/16 11:25 PanXin Exp $\n */\npublic enum SpringRequestMethodAnnotation {\n    /**\n     * RequestMapping\n     */\n    REQUEST_MAPPING(\"org.springframework.web.bind.annotation.RequestMapping\", null),\n    /**\n     * GetMapping\n     */\n    GET_MAPPING(\"org.springframework.web.bind.annotation.GetMapping\", \"GET\"),\n    /**\n     * PostMapping\n     */\n    POST_MAPPING(\"org.springframework.web.bind.annotation.PostMapping\", \"POST\"),\n    /**\n     * PutMapping\n     */\n    PUT_MAPPING(\"org.springframework.web.bind.annotation.PutMapping\", \"PUT\"),\n    /**\n     * DeleteMapping\n     */\n    DELETE_MAPPING(\"org.springframework.web.bind.annotation.DeleteMapping\", \"DELETE\"),\n    /**\n     * PatchMapping\n     */\n    PATCH_MAPPING(\"org.springframework.web.bind.annotation.PatchMapping\", \"PATCH\");\n\n    private final String qualifiedName;\n    private final String methodName;\n\n    SpringRequestMethodAnnotation(String qualifiedName, String methodName) {\n        this.qualifiedName = qualifiedName;\n        this.methodName = methodName;\n    }\n", "    public static SpringRequestMethodAnnotation getByQualifiedName(String qualifiedName) {\n        for (SpringRequestMethodAnnotation springRequestAnnotation : SpringRequestMethodAnnotation.values()) {\n            if (springRequestAnnotation.getQualifiedName().equals(qualifiedName)) {\n                return springRequestAnnotation;\n            }\n        }\n        return null;\n    }\n\n    public static SpringRequestMethodAnnotation getByShortName(String requestMapping) {\n        for (SpringRequestMethodAnnotation springRequestAnnotation : SpringRequestMethodAnnotation.values()) {", "    public static SpringRequestMethodAnnotation getByShortName(String requestMapping) {\n        for (SpringRequestMethodAnnotation springRequestAnnotation : SpringRequestMethodAnnotation.values()) {\n            if (springRequestAnnotation.getQualifiedName().endsWith(requestMapping)) {\n                return springRequestAnnotation;\n            }\n        }\n        return null;\n    }\n\n    public String methodName() {\n        return this.methodName;\n    }\n", "    public String methodName() {\n        return this.methodName;\n    }\n\n    public String getQualifiedName() {\n        return qualifiedName;\n    }\n\n    public String getShortName() {\n        return qualifiedName.substring(qualifiedName.lastIndexOf(\".\") - 1);\n    }\n}", "    public String getShortName() {\n        return qualifiedName.substring(qualifiedName.lastIndexOf(\".\") - 1);\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/enumclass/SpringControllerClassAnnotation.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.enumclass;\n\n/**\n * @author PanXin\n * @version $ Id: SpringRequestMethodAnnotation, v 0.1 2023/05/16 11:25 PanXin Exp $\n */\npublic enum SpringControllerClassAnnotation {\n    /**\n     * RequestMapping\n     */\n    CONTROLLER(\"org.springframework.stereotype.Controller\"),\n    /**\n     * GetMapping\n     */\n    RESTCONTROLLER(\"org.springframework.web.bind.annotation.RestController\");\n\n    private final String qualifiedName;\n\n    SpringControllerClassAnnotation(String qualifiedName) {\n        this.qualifiedName = qualifiedName;\n    }\n\n", "    public static SpringControllerClassAnnotation getByShortName(String requestMapping) {\n        for (SpringControllerClassAnnotation springRequestAnnotation : SpringControllerClassAnnotation.values()) {\n            if (springRequestAnnotation.getQualifiedName().endsWith(requestMapping)) {\n                return springRequestAnnotation;\n            }\n        }\n        return null;\n    }\n\n    public String getQualifiedName() {\n        return qualifiedName;\n    }\n}", "    public String getQualifiedName() {\n        return qualifiedName;\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/util/MyCacheManager.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.util;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiMethod;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.HashMap;\nimport java.util.List;", "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @author PanXin\n * @version $ Id: MyCacheManager, v 0.1 2023/05/17 14:21 PanXin Exp $\n */\npublic class MyCacheManager {\n\n    private MyCacheManager() {\n    }\n\n    // \u7f13\u5b58controller\u63a5\u53e3\u6570\u636e\u4f7f\u7528\n    private static Map<String, List<Pair<String, ControllerInfo>>> projectCacheMap = new HashMap<>();\n\n    // \u7f13\u5b58controller\u63a5\u53e3\u6570\u636e,\u4e3b\u952e\u662f\u65b9\u6cd5\u7684\u5b8c\u5168\u9650\u5b9a\u540d\uff08fully qualified name\uff09,\u503c\u4e3a\u63a5\u53e3\u8def\u5f84\n    private static Map<String, Map<String, String>> projectControllerCacheMap = new HashMap<>();\n\n    // \u7f13\u5b58Feign\u63a5\u53e3\u6570\u636e\u4f7f\u7528\n    private static Map<String, List<Pair<String, ControllerInfo>>> projectFeignCacheMap = new HashMap<>();\n", " */\npublic class MyCacheManager {\n\n    private MyCacheManager() {\n    }\n\n    // \u7f13\u5b58controller\u63a5\u53e3\u6570\u636e\u4f7f\u7528\n    private static Map<String, List<Pair<String, ControllerInfo>>> projectCacheMap = new HashMap<>();\n\n    // \u7f13\u5b58controller\u63a5\u53e3\u6570\u636e,\u4e3b\u952e\u662f\u65b9\u6cd5\u7684\u5b8c\u5168\u9650\u5b9a\u540d\uff08fully qualified name\uff09,\u503c\u4e3a\u63a5\u53e3\u8def\u5f84\n    private static Map<String, Map<String, String>> projectControllerCacheMap = new HashMap<>();\n\n    // \u7f13\u5b58Feign\u63a5\u53e3\u6570\u636e\u4f7f\u7528\n    private static Map<String, List<Pair<String, ControllerInfo>>> projectFeignCacheMap = new HashMap<>();\n", "    public static void clear() {\n        projectCacheMap = null;\n        projectFeignCacheMap = null;\n        projectControllerCacheMap = null;\n    }\n\n    public static List<Pair<String, ControllerInfo>> getCacheData(Project project) {\n        String projectId = project.getBasePath(); // \u4ee5\u9879\u76ee\u8def\u5f84\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\n        return projectCacheMap.get(projectId);\n    }\n", "    public static void setCacheData(Project project, List<Pair<String, ControllerInfo>> feignCacheData) {\n        String projectId = project.getBasePath(); // \u4ee5\u9879\u76ee\u8def\u5f84\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\n        projectCacheMap.put(projectId, feignCacheData);\n    }\n\n    public static List<Pair<String, ControllerInfo>> getFeignCacheData(Project project) {\n        String projectId = project.getBasePath(); // \u4ee5\u9879\u76ee\u8def\u5f84\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\n        return projectFeignCacheMap.get(projectId);\n    }\n\n    public static void setFeignCacheData(Project project, List<Pair<String, ControllerInfo>> feignCacheData) {\n        String projectId = project.getBasePath(); // \u4ee5\u9879\u76ee\u8def\u5f84\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\n        projectFeignCacheMap.put(projectId, feignCacheData);\n    }\n", "    public static void setFeignCacheData(Project project, List<Pair<String, ControllerInfo>> feignCacheData) {\n        String projectId = project.getBasePath(); // \u4ee5\u9879\u76ee\u8def\u5f84\u4f5c\u4e3a\u552f\u4e00\u6807\u8bc6\u7b26\n        projectFeignCacheMap.put(projectId, feignCacheData);\n    }\n\n    public static String getControllerPath(PsiMethod controllerMethod) {\n        String basePath = controllerMethod.getProject().getBasePath();\n        if (projectControllerCacheMap.get(basePath) == null) {\n            if(projectCacheMap.get(basePath) == null){\n                JavaSourceFileUtil.scanControllerPaths(controllerMethod.getProject());\n            }\n            Map<String, String> collect = projectCacheMap.get(basePath).stream()\n                    .map(Pair::getRight)\n                    .collect(Collectors.toMap(controllerInfo -> getKey(controllerInfo.getMethod()),\n                            ControllerInfo::getPath,\n                            (a1, a2) -> {\n                                System.out.println(a1);\n                                System.out.println(a2);\n                                return a1;\n                            })\n                    );\n            projectControllerCacheMap.put(basePath, collect);\n        }\n        return projectControllerCacheMap.get(basePath).get(getKey(controllerMethod));\n\n    }\n\n    @NotNull\n    private static String getKey(PsiMethod controllerMethod) {\n        return controllerMethod.getContainingClass().getQualifiedName() + controllerMethod.getName();\n    }\n}", "            if(projectCacheMap.get(basePath) == null){\n                JavaSourceFileUtil.scanControllerPaths(controllerMethod.getProject());\n            }\n            Map<String, String> collect = projectCacheMap.get(basePath).stream()\n                    .map(Pair::getRight)\n                    .collect(Collectors.toMap(controllerInfo -> getKey(controllerInfo.getMethod()),\n                            ControllerInfo::getPath,\n                            (a1, a2) -> {\n                                System.out.println(a1);\n                                System.out.println(a2);\n                                return a1;\n                            })\n                    );\n            projectControllerCacheMap.put(basePath, collect);\n        }\n        return projectControllerCacheMap.get(basePath).get(getKey(controllerMethod));\n\n    }\n\n    @NotNull\n    private static String getKey(PsiMethod controllerMethod) {\n        return controllerMethod.getContainingClass().getQualifiedName() + controllerMethod.getName();\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/util/JavaSourceFileUtil.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.util;\n\nimport com.intellij.openapi.project.DumbService;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.project.ProjectManager;\nimport com.intellij.psi.*;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport com.intellij.psi.util.PsiTreeUtil;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.enumclass.SpringRequestMethodAnnotation;", "import me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.enumclass.SpringRequestMethodAnnotation;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\n\nimport javax.swing.*;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;", "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\n\nimport static me.panxin.plugin.idea.jumpcontroller.enumclass.SpringControllerClassAnnotation.CONTROLLER;\nimport static me.panxin.plugin.idea.jumpcontroller.enumclass.SpringControllerClassAnnotation.RESTCONTROLLER;\nimport static me.panxin.plugin.idea.jumpcontroller.enumclass.SpringRequestMethodAnnotation.*;\n", "import static me.panxin.plugin.idea.jumpcontroller.enumclass.SpringRequestMethodAnnotation.*;\n\n/**\n * @author PanXin\n * @version $ Id: JavaSourceFileUtil, v 0.1 2023/05/17 10:17 PanXin Exp $\n */\npublic class JavaSourceFileUtil {\n\n    private JavaSourceFileUtil(){};\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u6253\u5f00\u7684\u9879\u76ee\u5217\u8868\n     *\n     * @return {@link Project[]}\n     */\n    private static Project[] getOpenProjects() {\n        // \u83b7\u53d6ProjectManager\u5b9e\u4f8b\n        ProjectManager projectManager = ProjectManager.getInstance();\n        // \u83b7\u53d6\u6240\u6709\u6253\u5f00\u7684\u9879\u76ee\u5217\u8868\n        return projectManager.getOpenProjects();\n    }", "    public static void clear() {\n        Project[] openProjects = getOpenProjects();\n        for (Project project : openProjects) {\n            // \u626b\u63cf\u9879\u76ee\u4e2d\u7684Java\u6e90\u6587\u4ef6\n            MyCacheManager.setCacheData(project,null);\n        }\n    }\n    public static List<ControllerInfo> scanAllProjectControllerInfo() {\n        Project[] openProjects = getOpenProjects();\n        return Arrays.stream(openProjects)\n                .flatMap(project -> JavaSourceFileUtil.scanControllerPaths(project).stream())\n                .collect(Collectors.toList());\n    }\n", "    public static List<ControllerInfo> scanControllerPaths(Project project) {\n        PsiManager psiManager = PsiManager.getInstance(project);\n        GlobalSearchScope searchScope = GlobalSearchScope.projectScope(project);\n        PsiPackage rootPackage = JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(\"\");\n        // \u68c0\u67e5\u662f\u5426\u5728 Dumb \u6a21\u5f0f\u4e0b\uff0c\u4ee5\u907f\u514d\u5728\u9879\u76ee\u6784\u5efa\u671f\u95f4\u6267\u884c\u4ee3\u7801\n        if (DumbService.isDumb(project)) {\n            return Collections.emptyList();\n        }\n        List<Pair<String, ControllerInfo>> cachedControllerInfos = MyCacheManager.getCacheData(project);\n        if (CollectionUtils.isNotEmpty(cachedControllerInfos)) {\n            return cachedControllerInfos.stream()\n                    .map(Pair::getRight)\n                    .collect(Collectors.toList());\n        }\n        cachedControllerInfos = new ArrayList<>();\n        List<ControllerInfo> controllerInfos = new ArrayList<>();\n\n        // \u83b7\u53d6\u9879\u76ee\u4e2d\u7684\u6240\u6709Java\u6e90\u6587\u4ef6\n        List<PsiClass> javaFiles = getAllClasses(rootPackage, searchScope);\n", "        if (CollectionUtils.isNotEmpty(cachedControllerInfos)) {\n            return cachedControllerInfos.stream()\n                    .map(Pair::getRight)\n                    .collect(Collectors.toList());\n        }\n        cachedControllerInfos = new ArrayList<>();\n        List<ControllerInfo> controllerInfos = new ArrayList<>();\n\n        // \u83b7\u53d6\u9879\u76ee\u4e2d\u7684\u6240\u6709Java\u6e90\u6587\u4ef6\n        List<PsiClass> javaFiles = getAllClasses(rootPackage, searchScope);\n", "        for (PsiClass psiClass : javaFiles) {\n            // \u5224\u65ad\u7c7b\u662f\u5426\u5e26\u6709@Controller\u6216@RestController\u6ce8\u89e3\n            if (isControllerClass(psiClass)) {\n                String parentPath = extractControllerPath(psiClass);\n                // \u89e3\u6790\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u63d0\u53d6\u63a5\u53e3\u8def\u5f84\u548cSwagger\u6ce8\u89e3\u4fe1\u606f\n                PsiMethod[] methods = psiClass.getMethods();\n                for (PsiMethod method : methods) {\n                    ControllerInfo controllerInfo = extractControllerInfo(parentPath, method);\n                    if (controllerInfo != null) {\n                        // \u8bbe\u7f6e\u65b9\u6cd5\u4fe1\u606f\n                        controllerInfo.setMethod(method);\n                        controllerInfos.add(controllerInfo);\n                    }\n                }\n            }\n        }\n\n        // \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u7f13\u5b58\u4e2d\n        cachedControllerInfos.addAll(controllerInfos.stream()\n                .map(info -> Pair.of(info.getPath(), info))\n                .collect(Collectors.toList()));\n        MyCacheManager.setCacheData(project, cachedControllerInfos);\n        return controllerInfos;\n    }\n", "                    if (controllerInfo != null) {\n                        // \u8bbe\u7f6e\u65b9\u6cd5\u4fe1\u606f\n                        controllerInfo.setMethod(method);\n                        controllerInfos.add(controllerInfo);\n                    }\n                }\n            }\n        }\n\n        // \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u7f13\u5b58\u4e2d\n        cachedControllerInfos.addAll(controllerInfos.stream()\n                .map(info -> Pair.of(info.getPath(), info))\n                .collect(Collectors.toList()));\n        MyCacheManager.setCacheData(project, cachedControllerInfos);\n        return controllerInfos;\n    }\n", "    public static List<PsiClass> getAllClasses(PsiPackage rootPackage, GlobalSearchScope searchScope) {\n        List<PsiClass> javaFiles = new ArrayList<>();\n        processPackage(rootPackage, searchScope, javaFiles);\n        return javaFiles;\n    }\n\n    private static void processPackage(PsiPackage psiPackage, GlobalSearchScope searchScope, List<PsiClass> classesToCheck) {\n        for (PsiClass psiClass : psiPackage.getClasses()) {\n            classesToCheck.add(psiClass);\n        }\n", "        for (PsiPackage subPackage : psiPackage.getSubPackages(searchScope)) {\n            processPackage(subPackage, searchScope, classesToCheck);\n        }\n    }\n\n\n    public static String showResult(List<ControllerInfo> controllerInfos) {\n        StringBuilder message = new StringBuilder();\n        // \u8868\u5934\u4fe1\u606f\n        int i = 0;\n        message.append(String.format(\"%-3s\", \"Num\")).append(\"\\t\");\n        message.append(String.format(\"%-7s\", \"Request\")).append(\"\\t\");\n        message.append(String.format(\"%-52s\", \"Path\")).append(\"\\t\");\n        message.append(String.format(\"%-25s\", \"Swagger Info\")).append(\"\\t\");\n        message.append(String.format(\"%-25s\", \"Swagger Notes\")).append(\"\\n\");", "        for (ControllerInfo info : controllerInfos) {\n            message.append(String.format(\"%-3d\", ++i)).append(\"\\t\");\n            message.append(String.format(\"%-7s\", info.getRequestMethod())).append(\"\\t\");\n            // \u63a5\u53e3\u8def\u5f84\n            message.append(String.format(\"%-52s\", info.getPath())).append(\"\\t\");\n            // Swagger Info\n            message.append(String.format(\"%-25s\", info.getSwaggerInfo())).append(\"\\t\");\n            // Swagger Notes\n            message.append(String.format(\"%-25s\", info.getSwaggerNotes())).append(\"\\n\");\n        }\n        return message.toString();\n    }\n\n\n", "    public static boolean isControllerClass(PsiClass psiClass) {\n        PsiAnnotation[] annotations = psiClass.getAnnotations();\n        for (PsiAnnotation annotation : annotations) {\n            String annotationName = annotation.getQualifiedName();\n            if (annotationName != null && (annotationName.equals(CONTROLLER.getQualifiedName())\n                    || annotationName.equals(RESTCONTROLLER.getQualifiedName()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * \u6839\u636e\u65b9\u6cd5\u63d0\u53d6\u5b8c\u6574\u7684\u63a5\u53e3\u4fe1\u606f\n     *\n     * @param parentPath \u7236\u8def\u5f84\n     * @param method     \u65b9\u6cd5\n     * @return {@link ControllerInfo}\n     */", "    public static ControllerInfo extractControllerInfo(String parentPath, PsiMethod method) {\n        ControllerInfo controllerInfo = new ControllerInfo();\n        controllerInfo.setPath(parentPath);\n        PsiAnnotation[] annotations = method.getAnnotations();\n        for (PsiAnnotation annotation : annotations) {\n            String annotationName = annotation.getQualifiedName();\n            // \u5904\u7406 @RequestMapping \u6ce8\u89e3\n            if (annotationName != null && annotationName.equals(REQUEST_MAPPING.getQualifiedName())) {\n                controllerInfo.setRequestMethod(\"REQUEST\");\n                // \u63d0\u53d6 method \u5c5e\u6027\u503c\n                PsiAnnotationMemberValue methodValue = annotation.findAttributeValue(\"method\");", "                if (methodValue instanceof PsiReferenceExpression) {\n                    PsiElement resolvedElement = ((PsiReferenceExpression) methodValue).resolve();\n                    if (resolvedElement instanceof PsiField) {\n                        String methodName = ((PsiField) resolvedElement).getName();\n                        // \u4f7f\u7528\u5b57\u5178\u6620\u5c04\u8bbe\u7f6e\u8bf7\u6c42\u65b9\u6cd5\n                        controllerInfo.setRequestMethod(getRequestMethodFromMethodName(methodName));\n                    }\n                }\n                return getValue(annotation, controllerInfo, method);\n            } else if (SpringRequestMethodAnnotation.getByQualifiedName(annotationName) != null) {\n                // \u5904\u7406\u5176\u4ed6\u5e38\u7528\u6ce8\u89e3\n                SpringRequestMethodAnnotation requestMethod = SpringRequestMethodAnnotation.getByQualifiedName(annotationName);\n                controllerInfo.setRequestMethod(requestMethod !=null? requestMethod.methodName(): \"REQUEST\");\n                return getValue(annotation, controllerInfo, method);\n            }\n\n        }\n        return null;\n    }\n\n    /**\n     * \u63d0\u53d6Controller\u7c7b\u6587\u4ef6\u7684\u63a5\u53e3\u8def\u5f84\n     *\n     * @param psiClass psi\u7c7b\n     * @return {@link String}\n     */", "            } else if (SpringRequestMethodAnnotation.getByQualifiedName(annotationName) != null) {\n                // \u5904\u7406\u5176\u4ed6\u5e38\u7528\u6ce8\u89e3\n                SpringRequestMethodAnnotation requestMethod = SpringRequestMethodAnnotation.getByQualifiedName(annotationName);\n                controllerInfo.setRequestMethod(requestMethod !=null? requestMethod.methodName(): \"REQUEST\");\n                return getValue(annotation, controllerInfo, method);\n            }\n\n        }\n        return null;\n    }\n\n    /**\n     * \u63d0\u53d6Controller\u7c7b\u6587\u4ef6\u7684\u63a5\u53e3\u8def\u5f84\n     *\n     * @param psiClass psi\u7c7b\n     * @return {@link String}\n     */", "    public static String extractControllerPath(PsiClass psiClass) {\n        PsiAnnotation[] annotations = psiClass.getAnnotations();\n        for (PsiAnnotation annotation : annotations) {\n            String annotationName = annotation.getQualifiedName();\n            if (REQUEST_MAPPING.getQualifiedName().equals(annotationName)) {\n                return getValueFromPsiAnnotation(annotation);\n            }\n        }\n        return \"\";\n    }\n    public static String getValueFromPsiAnnotation(PsiAnnotation annotation){\n        PsiAnnotationParameterList parameterList = annotation.getParameterList();\n        PsiNameValuePair[] attributes = parameterList.getAttributes();", "    public static String getValueFromPsiAnnotation(PsiAnnotation annotation){\n        PsiAnnotationParameterList parameterList = annotation.getParameterList();\n        PsiNameValuePair[] attributes = parameterList.getAttributes();\n        for (PsiNameValuePair attribute : attributes) {\n            String attributeName = attribute.getAttributeName();\n            if (\"value\".equals(attributeName) || \"path\".equals(attributeName)) {\n                PsiAnnotationMemberValue attributeValue = attribute.getValue();\n                if (attributeValue instanceof PsiLiteralExpression) {\n                    Object value = ((PsiLiteralExpression) attributeValue).getValue();\n                    if (value instanceof String) {\n                        return ((String) value).startsWith(\"/\") ? (String) value : \"/\" + value;\n                    }\n                }\n            }\n        }\n        return \"\";\n\n    }\n\n    /**\n     * \u83b7\u5f97\u4ef7\u503c\n     * \u8def\u5f84\uff1a\u7c7b\u6587\u4ef6\u63a5\u53e3\u8def\u5f84+\u65b9\u6cd5\u63a5\u53e3\u8def\u5f84\n     *\n     * @param controllerInfo \u63a7\u5236\u5668\u4fe1\u606f\n     * @param method         \u65b9\u6cd5\n     * @param annotation     \u6ce8\u91ca\n     * @return {@link ControllerInfo}\n     */", "                    if (value instanceof String) {\n                        return ((String) value).startsWith(\"/\") ? (String) value : \"/\" + value;\n                    }\n                }\n            }\n        }\n        return \"\";\n\n    }\n\n    /**\n     * \u83b7\u5f97\u4ef7\u503c\n     * \u8def\u5f84\uff1a\u7c7b\u6587\u4ef6\u63a5\u53e3\u8def\u5f84+\u65b9\u6cd5\u63a5\u53e3\u8def\u5f84\n     *\n     * @param controllerInfo \u63a7\u5236\u5668\u4fe1\u606f\n     * @param method         \u65b9\u6cd5\n     * @param annotation     \u6ce8\u91ca\n     * @return {@link ControllerInfo}\n     */", "    public static ControllerInfo getValue(PsiAnnotation annotation, ControllerInfo controllerInfo, PsiMethod method) {\n        String path = getValueFromPsiAnnotation(annotation);\n        controllerInfo.setPath(controllerInfo.getPath() + path);\n        extractSwaggerInfo(method, controllerInfo);\n        return controllerInfo;\n    }\n    private static void extractSwaggerInfo(PsiMethod method, ControllerInfo controllerInfo) {\n        PsiModifierList methodModifierList = method.getModifierList();\n        PsiAnnotation swaggerAnnotation = methodModifierList.findAnnotation(\"io.swagger.annotations.ApiOperation\");\n        if (swaggerAnnotation != null) {\n            extractSwaggerValue(swaggerAnnotation, \"value\", controllerInfo::setSwaggerInfo);\n            extractSwaggerValue(swaggerAnnotation, \"notes\", controllerInfo::setSwaggerNotes);\n        }\n    }\n\n    private static void extractSwaggerValue(PsiAnnotation swaggerAnnotation, String attributeName, Consumer<String> setter) {\n        PsiAnnotationMemberValue attributeValue = swaggerAnnotation.findAttributeValue(attributeName);", "        if (swaggerAnnotation != null) {\n            extractSwaggerValue(swaggerAnnotation, \"value\", controllerInfo::setSwaggerInfo);\n            extractSwaggerValue(swaggerAnnotation, \"notes\", controllerInfo::setSwaggerNotes);\n        }\n    }\n\n    private static void extractSwaggerValue(PsiAnnotation swaggerAnnotation, String attributeName, Consumer<String> setter) {\n        PsiAnnotationMemberValue attributeValue = swaggerAnnotation.findAttributeValue(attributeName);\n        if (attributeValue instanceof PsiLiteralExpression) {\n            Object value = ((PsiLiteralExpression) attributeValue).getValue();\n            if (value instanceof String) {\n                setter.accept((String) value);\n            }\n        }\n    }\n\n    private static String getRequestMethodFromMethodName(String methodName) {\n        // \u4f7f\u7528\u5b57\u5178\u6620\u5c04\u66ff\u4ee3\u591a\u4e2a\u6761\u4ef6\u5206\u652f\n        Map<String, String> methodMappings = new HashMap<>();\n        methodMappings.put(\"GET\", \"GET\");\n        methodMappings.put(\"POST\", \"POST\");\n        methodMappings.put(\"PUT\", \"PUT\");\n        methodMappings.put(\"DELETE\", \"DELETE\");\n        return methodMappings.getOrDefault(methodName, \"REQUEST\");\n    }\n\n    /**\n     * \u76ee\u524d\u53ea\u80fd\u8df3\u8f6c\u5230\u5f53\u524d\u9879\u76ee\u4e0b\u7684\u6587\u4ef6\u5426\u5219\u4f1a\u62a5Element from alien project\u9519\u8bef\n     *\n     * @param psiMethod psi\u65b9\u6cd5\n     * @return {@link List}<{@link PsiElement}>\n     */", "        if (attributeValue instanceof PsiLiteralExpression) {\n            Object value = ((PsiLiteralExpression) attributeValue).getValue();\n            if (value instanceof String) {\n                setter.accept((String) value);\n            }\n        }\n    }\n\n    private static String getRequestMethodFromMethodName(String methodName) {\n        // \u4f7f\u7528\u5b57\u5178\u6620\u5c04\u66ff\u4ee3\u591a\u4e2a\u6761\u4ef6\u5206\u652f\n        Map<String, String> methodMappings = new HashMap<>();\n        methodMappings.put(\"GET\", \"GET\");\n        methodMappings.put(\"POST\", \"POST\");\n        methodMappings.put(\"PUT\", \"PUT\");\n        methodMappings.put(\"DELETE\", \"DELETE\");\n        return methodMappings.getOrDefault(methodName, \"REQUEST\");\n    }\n\n    /**\n     * \u76ee\u524d\u53ea\u80fd\u8df3\u8f6c\u5230\u5f53\u524d\u9879\u76ee\u4e0b\u7684\u6587\u4ef6\u5426\u5219\u4f1a\u62a5Element from alien project\u9519\u8bef\n     *\n     * @param psiMethod psi\u65b9\u6cd5\n     * @return {@link List}<{@link PsiElement}>\n     */", "    public static List<PsiElement> process(PsiMethod psiMethod) {\n        List<PsiElement> elementList = new ArrayList<>();\n\n        // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\n        Project project = psiMethod.getProject();\n\n        List<ControllerInfo> controllerInfos = JavaSourceFileUtil.scanControllerPaths(project);\n\n        if (controllerInfos != null) {\n            // \u904d\u5386 Controller \u7c7b\u7684\u6240\u6709\u65b9\u6cd5\n            for (ControllerInfo controllerInfo : controllerInfos) {", "        if (controllerInfos != null) {\n            // \u904d\u5386 Controller \u7c7b\u7684\u6240\u6709\u65b9\u6cd5\n            for (ControllerInfo controllerInfo : controllerInfos) {\n                if (isMethodMatch(controllerInfo, psiMethod)) {\n                    elementList.add(controllerInfo.getMethod());\n                }\n            }\n        }\n\n        return elementList;\n    }\n\n    private static boolean isMethodMatch(ControllerInfo controllerInfo, PsiMethod feignMethod) {\n        ControllerInfo feignInfo = JavaSourceFileUtil.extractControllerInfo(\"\", feignMethod);", "        if(feignInfo != null){\n            String path = feignInfo.getPath();\n            if(StringUtils.isNotBlank(path)){\n                return path.equals(controllerInfo.getPath());\n            }\n        }\n        return false;\n    }\n\n    /**\n     * \u5143\u7d20\u662f\u5426\u4e3aFeignClient\u4e0b\u7684\u65b9\u6cd5\n     *\n     * @param element \u5143\u7d20\n     * @return boolean\n     */", "    public static boolean isElementWithinInterface(PsiElement element) {\n        if (element instanceof PsiClass && ((PsiClass) element).isInterface()) {\n            PsiClass psiClass = (PsiClass) element;\n\n            // \u68c0\u67e5\u7c7b\u4e0a\u662f\u5426\u5b58\u5728 FeignClient \u6ce8\u89e3\n            PsiAnnotation feignAnnotation = psiClass.getAnnotation(\"org.springframework.cloud.openfeign.FeignClient\");\n            if (feignAnnotation != null) {\n                return true;\n            }\n        }\n        PsiClass type = PsiTreeUtil.getParentOfType(element, PsiClass.class);\n        return type != null && isElementWithinInterface(type);\n    }\n\n\n    /**\n     * \u626b\u63cfFeign\u63a5\u53e3\u4fe1\u606f\u6dfb\u52a0\u5230\u7f13\u5b58\u91cc\u9762\n     *\n     * @param project \u9879\u76ee\n     * @return {@link List}<{@link ControllerInfo}>\n     */", "    public static List<ControllerInfo> scanFeignInterfaces(Project project) {\n        PsiManager psiManager = PsiManager.getInstance(project);\n        GlobalSearchScope searchScope = GlobalSearchScope.projectScope(project);\n        PsiPackage rootPackage = JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(\"\");\n\n        // \u68c0\u67e5\u662f\u5426\u5728 Dumb \u6a21\u5f0f\u4e0b\uff0c\u4ee5\u907f\u514d\u5728\u9879\u76ee\u6784\u5efa\u671f\u95f4\u6267\u884c\u4ee3\u7801\n        if (DumbService.isDumb(project)) {\n            return Collections.emptyList();\n        }\n\n        List<Pair<String, ControllerInfo>> feignCacheData = MyCacheManager.getFeignCacheData(project);", "        if (CollectionUtils.isNotEmpty(feignCacheData)) {\n            return feignCacheData.stream()\n                    .map(Pair::getRight)\n                    .collect(Collectors.toList());\n        }\n        feignCacheData = new ArrayList<>();\n        List<ControllerInfo> feignInfos = new ArrayList<>();\n        // \u83b7\u53d6\u9879\u76ee\u4e2d\u7684\u6240\u6709Java\u6e90\u6587\u4ef6\n        List<PsiClass> javaFiles = getAllClasses(rootPackage, searchScope);\n        for (PsiClass psiClass : javaFiles) {\n            // \u5224\u65ad\u7c7b\u662f\u5426\u5e26\u6709@FeignClient\u6ce8\u89e3", "        for (PsiClass psiClass : javaFiles) {\n            // \u5224\u65ad\u7c7b\u662f\u5426\u5e26\u6709@FeignClient\u6ce8\u89e3\n            if (isFeignInterface(psiClass)) {\n                // \u89e3\u6790\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u63d0\u53d6\u63a5\u53e3\u8def\u5f84\n                PsiMethod[] methods = psiClass.getMethods();\n                for (PsiMethod method : methods) {\n                    ControllerInfo feignInfo = extractControllerInfo(\"\", method);\n                    if (feignInfo != null) {\n                        // \u8bbe\u7f6e\u65b9\u6cd5\u4fe1\u606f\n                        feignInfo.setMethod(method);\n                        feignInfos.add(feignInfo);\n                    }\n                }\n            }\n        }\n\n        // \u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u7f13\u5b58\u4e2d\n        feignCacheData.addAll(feignInfos.stream()\n                .map(info -> Pair.of(info.getPath(), info))\n                .collect(Collectors.toList()));\n        MyCacheManager.setFeignCacheData(project, feignCacheData);\n\n        return feignInfos;\n    }\n    // \u5224\u65ad\u7c7b\u662f\u5426\u5e26\u6709@FeignClient\u6ce8\u89e3\n    private static boolean isFeignInterface(PsiClass psiClass) {\n        PsiAnnotation annotation = psiClass.getAnnotation(\"org.springframework.cloud.openfeign.FeignClient\");\n        return annotation != null;\n    }\n\n", "    public static void exportToCSV(List<ControllerInfo> controllerInfos) {\n        // \u83b7\u53d6\u6587\u4ef6\u9009\u62e9\u5668\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        fileChooser.setDialogTitle(\"\u5bfc\u51fa\u5217\u8868\");\n\n        // \u663e\u793a\u6587\u4ef6\u9009\u62e9\u5668\n        int result = fileChooser.showSaveDialog(null);\n        if (result != JFileChooser.APPROVE_OPTION) {\n            return;\n        }\n\n        // \u83b7\u53d6\u6587\u4ef6\n        File file = fileChooser.getSelectedFile();\n\n        // \u521b\u5efa CSV \u6587\u4ef6\u5199\u5165\u5668\n        try (FileWriter fileWriter = new FileWriter(file.getAbsolutePath() + \".csv\")) {\n            // \u5199\u5165\u5217\u5934\n            String[] columnNames = {\"\u5e8f\u53f7\", \"\u8bf7\u6c42\u65b9\u6cd5\", \"\u8def\u5f84\", \"Swagger Info\", \"Swagger Notes\"};\n            fileWriter.write(String.join(\",\", columnNames) + \"\\n\");\n\n            // \u5199\u5165\u5217\u8868\u6570\u636e\n            Integer i = 0;", "        if (result != JFileChooser.APPROVE_OPTION) {\n            return;\n        }\n\n        // \u83b7\u53d6\u6587\u4ef6\n        File file = fileChooser.getSelectedFile();\n\n        // \u521b\u5efa CSV \u6587\u4ef6\u5199\u5165\u5668\n        try (FileWriter fileWriter = new FileWriter(file.getAbsolutePath() + \".csv\")) {\n            // \u5199\u5165\u5217\u5934\n            String[] columnNames = {\"\u5e8f\u53f7\", \"\u8bf7\u6c42\u65b9\u6cd5\", \"\u8def\u5f84\", \"Swagger Info\", \"Swagger Notes\"};\n            fileWriter.write(String.join(\",\", columnNames) + \"\\n\");\n\n            // \u5199\u5165\u5217\u8868\u6570\u636e\n            Integer i = 0;", "            for (ControllerInfo controllerInfo : controllerInfos) {\n                i++;\n                String[] data = {\n                        i.toString(),\n                        controllerInfo.getRequestMethod(),\n                        controllerInfo.getPath(),\n                        controllerInfo.getSwaggerInfo(),\n                        controllerInfo.getSwaggerNotes()\n                };\n                fileWriter.write(String.join(\",\", data) + \"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/util/CustomDialog.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.util;\n\nimport com.intellij.openapi.ui.DialogWrapper;\nimport com.intellij.openapi.ui.Messages;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.List;", "import java.awt.*;\nimport java.util.List;\n\npublic class CustomDialog extends DialogWrapper {\n    private final int dialogWidth = 600;  // \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u7684\u5bbd\u5ea6\n    private final int dialogHeight = 400; // \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\u7684\u9ad8\u5ea6\n    private List<ControllerInfo> controllerInfos;\n\n    @Override\n    protected void init() {\n        super.init();\n        setSize(dialogWidth, dialogHeight);\n    }\n\n    public CustomDialog(List<ControllerInfo> controllerInfos) {\n        super(true);\n        this.controllerInfos = controllerInfos;\n        init();\n        setTitle(\"\u63a5\u53e3\u4fe1\u606f\");\n    }\n\n    @Nullable\n    @Override\n    protected JComponent createCenterPanel() {\n        // \u521b\u5efa\u5185\u5bb9\u9762\u677f\n        JPanel panel = new JPanel(new BorderLayout());\n        JTextArea textArea = new JTextArea();\n        textArea.setText(JavaSourceFileUtil.showResult(controllerInfos));\n\n        // \u5c06\u6587\u672c\u533a\u57df\u653e\u5165\u6eda\u52a8\u9762\u677f\u4e2d\n        JScrollPane scrollPane = new JScrollPane(textArea);\n        panel.add(scrollPane, BorderLayout.CENTER);\n\n        // \u6dfb\u52a0\u5bfc\u51fa\u5217\u8868\u6309\u94ae\n        JButton exportButton = new JButton(\"\u5bfc\u51fa\u5217\u8868\");\n        exportButton.addActionListener(e -> {\n            // \u5c06\u5217\u8868\u5bfc\u51fa\u5230 CSV \u6587\u4ef6\n            JavaSourceFileUtil.exportToCSV(controllerInfos);\n        });\n\n        panel.add(exportButton, BorderLayout.SOUTH);\n\n        return panel;\n    }\n\n}\n"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/util/MyIcons.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.util;\n\nimport com.intellij.openapi.util.IconLoader;\n\nimport javax.swing.*;\n\n/**\n * @author PanXin\n * @version $ Id: MyIcons, v 0.1 2023/05/19 20:46 PanXin Exp $\n */\npublic interface MyIcons {\n    Icon STATEMENT_LINE_FEIGN_ICON = IconLoader.getIcon(\"/images/feign_method\", MyIcons.class);\n    Icon STATEMENT_LINE_CONTROLLER_ICON = IconLoader.getIcon(\"/images/controller_method\", MyIcons.class);\n}\n\n", " * @version $ Id: MyIcons, v 0.1 2023/05/19 20:46 PanXin Exp $\n */\npublic interface MyIcons {\n    Icon STATEMENT_LINE_FEIGN_ICON = IconLoader.getIcon(\"/images/feign_method\", MyIcons.class);\n    Icon STATEMENT_LINE_CONTROLLER_ICON = IconLoader.getIcon(\"/images/controller_method\", MyIcons.class);\n}\n\n"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/provider/Controller2FeignLineMarkerProvider.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.provider;\n\nimport com.intellij.codeInsight.daemon.RelatedItemLineMarkerInfo;\nimport com.intellij.codeInsight.daemon.RelatedItemLineMarkerProvider;\nimport com.intellij.codeInsight.navigation.NavigationGutterIconBuilder;\nimport com.intellij.openapi.editor.markup.GutterIconRenderer;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;", "import com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.util.PsiTreeUtil;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.util.JavaSourceFileUtil;\nimport me.panxin.plugin.idea.jumpcontroller.util.MyCacheManager;\nimport me.panxin.plugin.idea.jumpcontroller.util.MyIcons;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * \u884c\u6807\u8bb0\u548c\u8df3\u8f6c\u7b26\u53f7\n */\npublic class Controller2FeignLineMarkerProvider extends RelatedItemLineMarkerProvider {\n\n\n    @Override\n    protected void collectNavigationMarkers(@NotNull PsiElement element, @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {", " * \u884c\u6807\u8bb0\u548c\u8df3\u8f6c\u7b26\u53f7\n */\npublic class Controller2FeignLineMarkerProvider extends RelatedItemLineMarkerProvider {\n\n\n    @Override\n    protected void collectNavigationMarkers(@NotNull PsiElement element, @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {\n        if (element instanceof PsiMethod && isElementWithinController(element)) {\n            PsiMethod psiMethod = (PsiMethod) element;\n            PsiClass psiClass = psiMethod.getContainingClass();\n            if (psiClass != null) {\n                List<PsiElement> resultList = process(psiMethod);", "            if (psiClass != null) {\n                List<PsiElement> resultList = process(psiMethod);\n                if (!resultList.isEmpty()) {\n                    NavigationGutterIconBuilder<PsiElement> builder = NavigationGutterIconBuilder\n                            .create(MyIcons.STATEMENT_LINE_CONTROLLER_ICON)\n                            .setAlignment(GutterIconRenderer.Alignment.CENTER)\n                            .setTargets(resultList)\n                            .setTooltipTitle(\"Navigation to target in Feign\");\n                    result.add(builder.createLineMarkerInfo(Objects.requireNonNull(psiMethod.getNameIdentifier())));\n                }\n            }\n        }\n    }\n\n    /**\n     * \u8c03\u8f6c\u5230\u8c03\u7528\u8be5controller\u7684Feign\n     *\n     * @param controllerMethod psi\u65b9\u6cd5\n     * @return {@link List}<{@link PsiElement}>\n     */\n    private List<PsiElement> process(PsiMethod controllerMethod) {\n        List<PsiElement> elementList = new ArrayList<>();\n        // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\n        Project project = controllerMethod.getProject();\n        List<ControllerInfo> feignInfos = JavaSourceFileUtil.scanFeignInterfaces(project);", "        if (feignInfos != null) {\n            // \u904d\u5386 Controller \u7c7b\u7684\u6240\u6709\u65b9\u6cd5\n            for (ControllerInfo feignInfo : feignInfos) {\n                if (isMethodMatch(feignInfo, controllerMethod)) {\n                    elementList.add(feignInfo.getMethod());\n                }\n            }\n        }\n\n        return elementList;\n    }\n\n    private static boolean isMethodMatch(ControllerInfo feignInfo, PsiMethod controllerMethod) {\n        String controllerPath = MyCacheManager.getControllerPath(controllerMethod);", "        if (StringUtils.isNotBlank(controllerPath)) {\n            return controllerPath.equals(feignInfo.getPath());\n        }\n        return false;\n    }\n\n    /**\n     * \u5143\u7d20\u662f\u5426\u4e3aFeignClient\u4e0b\u7684\u65b9\u6cd5\n     *\n     * @param element \u5143\u7d20\n     * @return boolean\n     */\n    private static boolean isElementWithinController(PsiElement element) {", "        if (element instanceof PsiClass) {\n            PsiClass psiClass = (PsiClass) element;\n\n            // \u68c0\u67e5\u7c7b\u4e0a\u662f\u5426\u5b58\u5728 FeignClient \u6ce8\u89e3\n            return JavaSourceFileUtil.isControllerClass(psiClass);\n        }\n        PsiClass type = PsiTreeUtil.getParentOfType(element, PsiClass.class);\n        return type != null && isElementWithinController(type);\n    }\n}\n\n"]}
{"filename": "src/main/java/me/panxin/plugin/idea/jumpcontroller/provider/Feign2ControllerLineMarkerProvider.java", "chunked_list": ["package me.panxin.plugin.idea.jumpcontroller.provider;\n\nimport com.intellij.codeInsight.daemon.RelatedItemLineMarkerInfo;\nimport com.intellij.codeInsight.daemon.RelatedItemLineMarkerProvider;\nimport com.intellij.codeInsight.navigation.NavigationGutterIconBuilder;\nimport com.intellij.openapi.editor.markup.GutterIconRenderer;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;", "import com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.util.PsiTreeUtil;\nimport me.panxin.plugin.idea.jumpcontroller.ControllerInfo;\nimport me.panxin.plugin.idea.jumpcontroller.util.JavaSourceFileUtil;\nimport me.panxin.plugin.idea.jumpcontroller.util.MyIcons;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * \u884c\u6807\u8bb0\u548c\u8df3\u8f6c\u7b26\u53f7\n */\npublic class Feign2ControllerLineMarkerProvider extends RelatedItemLineMarkerProvider {\n\n\n    @Override\n    protected void collectNavigationMarkers(@NotNull PsiElement element, @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {", " * \u884c\u6807\u8bb0\u548c\u8df3\u8f6c\u7b26\u53f7\n */\npublic class Feign2ControllerLineMarkerProvider extends RelatedItemLineMarkerProvider {\n\n\n    @Override\n    protected void collectNavigationMarkers(@NotNull PsiElement element, @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {\n        if (element instanceof PsiMethod && JavaSourceFileUtil.isElementWithinInterface(element)) {\n            PsiMethod psiMethod = (PsiMethod) element;\n            PsiClass psiClass = psiMethod.getContainingClass();\n            if (psiClass != null) {\n                List<PsiElement> resultList = JavaSourceFileUtil.process(psiMethod);", "            if (psiClass != null) {\n                List<PsiElement> resultList = JavaSourceFileUtil.process(psiMethod);\n                if (!resultList.isEmpty()) {\n                    NavigationGutterIconBuilder<PsiElement> builder = NavigationGutterIconBuilder\n                            .create(MyIcons.STATEMENT_LINE_FEIGN_ICON)\n                            .setAlignment(GutterIconRenderer.Alignment.CENTER)\n                            .setTargets(resultList)\n                            .setTooltipTitle(\"Navigation to target in Controller\");\n                    result.add(builder.createLineMarkerInfo(Objects.requireNonNull(psiMethod.getNameIdentifier())));\n                }\n            }\n        }\n    }\n\n\n}\n\n"]}
