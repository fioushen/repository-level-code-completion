{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/MonitoringInternetShopApplication.java", "chunked_list": ["package com.example.MonitoringInternetShop;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MonitoringInternetShopApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MonitoringInternetShopApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MonitoringInternetShopApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Services/ProductService.java", "chunked_list": ["package com.example.MonitoringInternetShop.Services;\n\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport com.example.MonitoringInternetShop.Models.Product;\nimport com.example.MonitoringInternetShop.Repositories.OrderItemRepository;\nimport com.example.MonitoringInternetShop.Repositories.ProductRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Comparator;", "\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    @Autowired\n    private OrderItemRepository orderItemRepository;\n\n    public List<Product> getFilteredAndSortedProducts(String category, String sortBy) {\n        List<Product> products;", "        if (category != null && !category.isEmpty()) {\n            products = productRepository.findByCategory(category);\n        } else {\n            products = productRepository.findAll();\n        }\n        if (sortBy != null && !sortBy.isEmpty()) {\n            if (\"price\".equalsIgnoreCase(sortBy)) {\n                products.sort(Comparator.comparing(Product::getPrice));\n            } else if (\"popularity\".equalsIgnoreCase(sortBy)) {\n                products.sort(Comparator.comparing(Product::getSales).reversed());\n            }\n        }\n        return products;\n    }\n\n", "            } else if (\"popularity\".equalsIgnoreCase(sortBy)) {\n                products.sort(Comparator.comparing(Product::getSales).reversed());\n            }\n        }\n        return products;\n    }\n\n\n    public void saveProduct(Product product) {\n        productRepository.save(product);\n    }\n\n    public List<Product> getTopProducts() {\n        return productRepository.findAll().stream()\n                .sorted((p1, p2) -> p2.getSales() - p1.getSales())\n                .limit(10)\n                .collect(Collectors.toList());\n    }\n\n    public List<Product> getAllProducts() {\n        return productRepository.findAll();\n    }\n\n", "    public void saveProduct(Product product) {\n        productRepository.save(product);\n    }\n\n    public List<Product> getTopProducts() {\n        return productRepository.findAll().stream()\n                .sorted((p1, p2) -> p2.getSales() - p1.getSales())\n                .limit(10)\n                .collect(Collectors.toList());\n    }\n\n    public List<Product> getAllProducts() {\n        return productRepository.findAll();\n    }\n\n", "    public Product findById(Long id) {\n        Optional<Product> productOptional = productRepository.findById(id);\n        return productOptional.orElse(null);\n    }\n\n    public Product getProductById(Long id) {\n        return productRepository.findById(id).orElse(null);\n    }\n\n    public void incrementProductStock(Long id, Integer incrementAmount) {\n        Optional<Product> optionalProduct = productRepository.findById(id);", "    public void incrementProductStock(Long id, Integer incrementAmount) {\n        Optional<Product> optionalProduct = productRepository.findById(id);\n        if (optionalProduct.isPresent()) {\n            Product product = optionalProduct.get();\n            product.setStock(product.getStock() + incrementAmount);\n            productRepository.save(product);\n        } else {\n            throw new RuntimeException(\"\u041f\u0440\u043e\u0434\u0443\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0441 id: \" + id);\n        }\n    }\n", "    public void decrementProductStock(Long id, Integer decrementAmount) throws RuntimeException {\n        Optional<Product> optionalProduct = productRepository.findById(id);\n        if (optionalProduct.isPresent()) {\n            Product product = optionalProduct.get();\n            if (product.getStock() >= decrementAmount) {\n                product.setStock(product.getStock() - decrementAmount);\n            } else {\n                throw new RuntimeException(\"\u0422\u043e\u0432\u0430\u0440\u0430 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441 id: \" + id);\n            }\n            productRepository.save(product);\n        } else {\n            throw new RuntimeException(\"\u041f\u0440\u043e\u0434\u0443\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0441 id: \" + id);\n        }\n    }\n", "    public void updateProduct(Product product) {\n        Optional<Product> existingProduct = productRepository.findById(product.getId());\n        if (existingProduct.isPresent()) {\n            productRepository.save(product);\n        }\n    }\n\n    public void deleteProduct(Long id) {\n        productRepository.deleteById(id);\n    }\n\n    public List<OrderItem> findOrderItemsByProduct(Long productId) {\n        return orderItemRepository.findAllByProduct_Id(productId);\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Services/CategoryService.java", "chunked_list": ["package com.example.MonitoringInternetShop.Services;\n\nimport com.example.MonitoringInternetShop.Models.Category;\nimport com.example.MonitoringInternetShop.Repositories.CategoryRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class CategoryService {\n    @Autowired\n    private CategoryRepository categoryRepository;\n\n    public List<Category> getAllCategories() {\n        return categoryRepository.findAll();\n    }\n", "\n@Service\npublic class CategoryService {\n    @Autowired\n    private CategoryRepository categoryRepository;\n\n    public List<Category> getAllCategories() {\n        return categoryRepository.findAll();\n    }\n\n    public void saveCategory(Category category) {\n        categoryRepository.save(category);\n    }\n\n}\n\n", "    public void saveCategory(Category category) {\n        categoryRepository.save(category);\n    }\n\n}\n\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Services/UserService.java", "chunked_list": ["package com.example.MonitoringInternetShop.Services;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Repositories.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\nimport jakarta.servlet.http.HttpSession;\n\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    public Optional<User> findByName(String name) {\n        return userRepository.findByName(name);\n    }\n\n    public Optional<User> validateUser(String username, String password) {\n        Optional<User> userOptional = userRepository.findByLogin(username);", "        if (userOptional.isPresent() && password.equals(userOptional.get().getPassword())) {\n            return userOptional;\n        }\n        return Optional.empty();\n    }\n\n    public Optional<User> getLoggedInUser(HttpSession session) {\n        return Optional.ofNullable((User) session.getAttribute(\"user\"));\n    }\n\n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public Optional<User> getUserById(Long id) {\n        return userRepository.findById(id);\n    }\n\n    @Transactional", "    public void updateUser(Long id, User userDetails) {\n        Optional<User> userOptional = userRepository.findById(id);\n        if (userOptional.isPresent()) {\n            User user = userOptional.get();\n            user.setName(userDetails.getName());\n            user.setMail(userDetails.getMail());\n            user.setLogin(userDetails.getLogin());\n            user.setPassword(userDetails.getPassword());\n            user.setRole(userDetails.getRole());\n            user.setStatus(userDetails.getStatus());\n            userRepository.save(user);\n        }\n    }\n\n    @Transactional", "    public void deleteUser(Long id) {\n        userRepository.deleteById(id);\n    }\n\n    @Transactional\n    public void updateUserPassword(Long id, String newPassword) {\n        Optional<User> userOptional = userRepository.findById(id);\n        if (userOptional.isPresent()) {\n            User user = userOptional.get();\n            user.setPassword(newPassword);\n            userRepository.save(user);\n        }\n    }\n\n    @Transactional", "    public void updateUserStatus(Long id, User.Status status) {\n        Optional<User> userOptional = userRepository.findById(id);\n        if (userOptional.isPresent()) {\n            User user = userOptional.get();\n            user.setStatus(status);\n            userRepository.save(user);\n        }\n    }\n}"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Services/PromotionService.java", "chunked_list": ["package com.example.MonitoringInternetShop.Services;\n\nimport com.example.MonitoringInternetShop.Models.Promotion;\nimport com.example.MonitoringInternetShop.Repositories.PromotionRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class PromotionService {\n\n    @Autowired\n    private PromotionRepository promotionRepository;\n\n    public List<Promotion> getActivePromotions() {\n        return promotionRepository.findAllByEndDateAfter(LocalDate.now());\n    }\n\n    public List<Promotion> getCompletedPromotions() {\n        return promotionRepository.findAllByEndDateBefore(LocalDate.now());\n    }\n", "    public void addPromotion(Promotion promotion) {\n        promotionRepository.save(promotion);\n    }\n\n    public Promotion getPromotionById(Long id) {\n        Optional<Promotion> promotion = promotionRepository.findById(id);\n        return promotion.orElse(null);\n    }\n\n    public void updatePromotion(Long id, Promotion updatedPromotion) {\n        Optional<Promotion> existingPromotionOpt = promotionRepository.findById(id);", "    public void updatePromotion(Long id, Promotion updatedPromotion) {\n        Optional<Promotion> existingPromotionOpt = promotionRepository.findById(id);\n        if (existingPromotionOpt.isPresent()) {\n            Promotion existingPromotion = existingPromotionOpt.get();\n            if (updatedPromotion.getName() != null)\n                existingPromotion.setName(updatedPromotion.getName());\n            if (updatedPromotion.getStartDate() != null)\n                existingPromotion.setStartDate(updatedPromotion.getStartDate());\n            if (updatedPromotion.getEndDate() != null)\n                existingPromotion.setEndDate(updatedPromotion.getEndDate());\n            if (updatedPromotion.getConditions() != null)\n                existingPromotion.setConditions(updatedPromotion.getConditions());\n            promotionRepository.save(existingPromotion);\n        }\n    }\n", "            if (updatedPromotion.getEndDate() != null)\n                existingPromotion.setEndDate(updatedPromotion.getEndDate());\n            if (updatedPromotion.getConditions() != null)\n                existingPromotion.setConditions(updatedPromotion.getConditions());\n            promotionRepository.save(existingPromotion);\n        }\n    }\n\n    public void deletePromotion(Long id) {\n        promotionRepository.deleteById(id);\n    }\n}\n", "    public void deletePromotion(Long id) {\n        promotionRepository.deleteById(id);\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Services/OrderService.java", "chunked_list": ["package com.example.MonitoringInternetShop.Services;\n\nimport com.example.MonitoringInternetShop.Models.Order;\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Repositories.OrderRepository;\nimport com.example.MonitoringInternetShop.Repositories.OrderItemRepository;\nimport jakarta.transaction.Transactional;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class OrderService {\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @Autowired\n    private OrderItemRepository orderItemRepository;\n\n    public List<Order> getLatestOrders() {\n        return orderRepository.findAll(Sort.by(Sort.Direction.DESC, \"orderDate\")).stream()\n                .limit(10)\n                .collect(Collectors.toList());\n    }\n\n    public List<Order> getAllOrders() {\n        return orderRepository.findAll();\n    }\n\n    public List<Order> searchOrders() {\n        return null;\n    }\n", "public class OrderService {\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @Autowired\n    private OrderItemRepository orderItemRepository;\n\n    public List<Order> getLatestOrders() {\n        return orderRepository.findAll(Sort.by(Sort.Direction.DESC, \"orderDate\")).stream()\n                .limit(10)\n                .collect(Collectors.toList());\n    }\n\n    public List<Order> getAllOrders() {\n        return orderRepository.findAll();\n    }\n\n    public List<Order> searchOrders() {\n        return null;\n    }\n", "    public void updateOrderStatus(Long id, String status) {\n        Order order = orderRepository.findById(id).orElseThrow();\n        order.setStatus(status);\n        orderRepository.save(order);\n    }\n\n    public Order saveOrder(Order order) {\n        return orderRepository.save(order);\n    }\n\n    @Autowired\n    public OrderService(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    public List<Order> findOrdersByUser(User user) {\n        return orderRepository.findByUser(user);\n    }\n\n    public List<Order> getOrdersByStatus(String status) {\n        return orderRepository.findByStatus(status);\n    }\n\n    @Transactional", "    public void deleteOrder(Long id) {\n        Order order = orderRepository.findById(id)\n                .orElseThrow(() -> new IllegalArgumentException(\"Invalid order Id:\" + id));\n\n        List<OrderItem> orderItems = order.getOrderItems();\n        orderItemRepository.deleteAll(orderItems);\n\n        orderRepository.delete(order);\n    }\n}\n\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/User.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Table(name = \"users\")\n@Getter\n@Setter\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private String mail;\n    private String login;\n    private String password;\n\n    @Enumerated(EnumType.STRING)\n    private Role role;\n\n    @Enumerated(EnumType.STRING)\n    private Status status;\n", "@Setter\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private String mail;\n    private String login;\n    private String password;\n\n    @Enumerated(EnumType.STRING)\n    private Role role;\n\n    @Enumerated(EnumType.STRING)\n    private Status status;\n", "    public enum Role {\n        USER, ADMIN\n    }\n\n    public enum Status {\n        ACTIVE, INACTIVE\n    }\n}"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/Promotion.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = \"promotion\")\n@Getter", "@Table(name = \"promotion\")\n@Getter\n@Setter\npublic class Promotion {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private LocalDate startDate;\n    private LocalDate endDate;\n    private String conditions;\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/Order.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity", "\n@Entity\n@Table(name = \"orders\")\n@Getter\n@Setter\npublic class Order {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private LocalDate orderDate;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<OrderItem> orderItems;\n\n    private String status;\n", "    public BigDecimal getTotalAmount() {\n        return orderItems.stream()\n                .map(OrderItem::getTotalPrice)\n                .reduce(BigDecimal.ZERO, BigDecimal::add);\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/Product.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.math.BigDecimal;\n\n@Entity\n@Table(name = \"products\")\n@Getter", "@Table(name = \"products\")\n@Getter\n@Setter\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n    private BigDecimal price;\n    private int sales;\n    private String description;\n    private String category;\n    private int stock;\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/OrderItem.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.math.BigDecimal;\n\n@Entity\n@Table(name = \"order_items\")\n@Getter", "@Table(name = \"order_items\")\n@Getter\n@Setter\npublic class OrderItem {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"product_id\")\n    private Product product;\n\n    @ManyToOne\n    @JoinColumn(name = \"order_id\")\n    private Order order;\n\n    private int quantity;\n", "    public BigDecimal getTotalPrice() {\n        return product.getPrice().multiply(new BigDecimal(quantity));\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Models/Category.java", "chunked_list": ["package com.example.MonitoringInternetShop.Models;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Entity\n@Table(name = \"categories\")\n@Getter\n@Setter\npublic class Category {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n}\n", "@Getter\n@Setter\npublic class Category {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    private String name;\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/UserRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByName(String name);\n\n    Optional<User> findByLogin(String login);\n\n    Optional<User> findByMail(String mail);\n}\n", "\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByName(String name);\n\n    Optional<User> findByLogin(String login);\n\n    Optional<User> findByMail(String mail);\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/PromotionRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.Promotion;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Repository\npublic interface PromotionRepository extends JpaRepository<Promotion, Long> {\n    List<Promotion> findAllByEndDateAfter(LocalDate date);\n\n    List<Promotion> findAllByEndDateBefore(LocalDate date);\n}\n", "\n@Repository\npublic interface PromotionRepository extends JpaRepository<Promotion, Long> {\n    List<Promotion> findAllByEndDateAfter(LocalDate date);\n\n    List<Promotion> findAllByEndDateBefore(LocalDate date);\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/OrderRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.Order;\nimport com.example.MonitoringInternetShop.Models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface OrderRepository extends JpaRepository<Order, Long> {\n    List<Order> findByUser(User user);\n\n    List<Order> findByStatus(String status);\n\n}\n", "\n@Repository\npublic interface OrderRepository extends JpaRepository<Order, Long> {\n    List<Order> findByUser(User user);\n\n    List<Order> findByStatus(String status);\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/CategoryRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.Category;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CategoryRepository extends JpaRepository<Category, Long> {\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/ProductRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.Product;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n    List<Product> findByCategory(String category);\n}\n", "@Repository\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n    List<Product> findByCategory(String category);\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Repositories/OrderItemRepository.java", "chunked_list": ["package com.example.MonitoringInternetShop.Repositories;\n\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface OrderItemRepository extends JpaRepository<OrderItem, Long> {\n\n    List<OrderItem> findAllByProduct_Id(Long productId);\n}\n", "\n@Repository\npublic interface OrderItemRepository extends JpaRepository<OrderItem, Long> {\n\n    List<OrderItem> findAllByProduct_Id(Long productId);\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/OrderController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.Order;\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport com.example.MonitoringInternetShop.Models.Product;\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Services.OrderService;\nimport com.example.MonitoringInternetShop.Services.ProductService;\nimport com.example.MonitoringInternetShop.Services.UserService;\nimport jakarta.servlet.http.HttpSession;", "import com.example.MonitoringInternetShop.Services.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;", "import java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Controller\npublic class OrderController {\n\n    @Autowired\n    private OrderService orderService;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private ProductService productService;\n\n    @GetMapping(\"/orders\")", "    public String orders(@RequestParam(required = false) String status, @RequestParam(required = false) String search, Model model) {\n        List<Order> orders;\n        if (status != null && !status.isEmpty()) {\n            orders = orderService.getOrdersByStatus(status);\n        } else if (search != null) {\n            orders = orderService.searchOrders();\n        } else {\n            orders = orderService.getAllOrders();\n        }\n        model.addAttribute(\"orders\", orders);\n        return \"orders\";\n    }\n\n    @PostMapping(\"/orders/update/{id}\")", "    public String updateOrderStatus(@PathVariable Long id, @RequestParam String status) {\n        orderService.updateOrderStatus(id, status);\n        return \"redirect:/orders\";\n    }\n\n\n    @PostMapping(\"/orders/new\")\n    public String createOrder(@RequestParam String user, @RequestParam List<Long> products, @RequestParam int quantity) {\n        Order newOrder = new Order();\n        newOrder.setUser(userService.findByName(user).orElseThrow());\n        newOrder.setOrderDate(LocalDate.now());\n\n        List<OrderItem> orderItems = new ArrayList<>();", "        for (Long productId : products) {\n            Product product = productService.findById(productId);\n            OrderItem orderItem = new OrderItem();\n            orderItem.setProduct(product);\n            orderItem.setQuantity(quantity);\n            orderItems.add(orderItem);\n        }\n        newOrder.setOrderItems(orderItems);\n\n        orderService.saveOrder(newOrder);\n        return \"redirect:/orders\";\n    }\n\n    @GetMapping(\"/create-order\")", "    public String showCreateOrderPage(Model model, HttpSession session) {\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null) {\n            return \"redirect:/login\";\n        }\n\n        List<Product> products = productService.getAllProducts();\n        model.addAttribute(\"products\", products);\n\n        return \"create-order\";\n    }\n\n    @PostMapping(\"/create-order\")", "    public String handleCreateOrder(@RequestParam List<Long> productIds, @RequestParam List<Integer> quantities, HttpSession session, RedirectAttributes redirectAttrs) {\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null) {\n            return \"redirect:/login\";\n        }\n\n        Order order = new Order();\n        order.setOrderDate(LocalDate.now());\n        order.setUser(user);\n\n        List<OrderItem> orderItems = new ArrayList<>();", "        for (int i = 0; i < productIds.size(); i++) {\n            Long productId = productIds.get(i);\n            Product product = productService.getProductById(productId);\n\n            int quantity = quantities.get(i);\n            if (product.getStock() < quantity) {\n                redirectAttrs.addFlashAttribute(\"error\", \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u0434\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \" + product.getName());\n                return \"redirect:/create-order\";\n            }\n\n            product.setStock(product.getStock() - quantity);\n            product.setSales(product.getSales() + quantity);\n\n            OrderItem orderItem = new OrderItem();\n            orderItem.setProduct(product);\n            orderItem.setQuantity(quantity);\n            orderItem.setOrder(order);\n\n            orderItems.add(orderItem);\n        }\n\n        order.setOrderItems(orderItems);\n        order.setStatus(\"\u041d\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438\");\n\n        orderService.saveOrder(order);\n\n        return \"redirect:/user-orders\";\n    }\n\n    @GetMapping(\"/user-orders\")", "    public String viewOrders(Model model, HttpSession session) {\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null) {\n            return \"redirect:/login\";\n        }\n\n        List<Order> orders = orderService.findOrdersByUser(user);\n        model.addAttribute(\"orders\", orders);\n        return \"user-orders\";\n    }\n\n    @PostMapping(\"/orders/delete/{id}\")", "    public String deleteOrder(@PathVariable Long id) {\n        orderService.deleteOrder(id);\n        return \"redirect:/orders\";\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/PromotionController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.Promotion;\nimport com.example.MonitoringInternetShop.Services.PromotionService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\n@Controller\npublic class PromotionController {\n\n    @Autowired\n    private PromotionService promotionService;\n\n    @GetMapping(\"/promotions\")", "    public String showPromotionsPage(Model model) {\n        model.addAttribute(\"activePromotions\", promotionService.getActivePromotions());\n        model.addAttribute(\"completedPromotions\", promotionService.getCompletedPromotions());\n        return \"promotions\";\n    }\n\n    @PostMapping(\"/promotions/add\")\n    public String addPromotion(@ModelAttribute Promotion promotion) {\n        promotionService.addPromotion(promotion);\n        return \"redirect:/promotions\";\n    }\n\n    @GetMapping(\"/promotions/edit/{id}\")", "    public String editPromotion(@PathVariable(\"id\") Long id, Model model) {\n        Promotion promotion = promotionService.getPromotionById(id);\n        if (promotion != null) {\n            model.addAttribute(\"promotion\", promotion);\n            return \"edit-promotion\";\n        } else {\n            return \"redirect:/promotions\";\n        }\n    }\n\n    @PostMapping(\"/promotions/edit/{id}\")", "    public String updatePromotion(@PathVariable(\"id\") Long id, @ModelAttribute Promotion promotion) {\n        promotionService.updatePromotion(id, promotion);\n        return \"redirect:/promotions\";\n    }\n\n    @GetMapping(\"/promotions/delete/{id}\")\n    public String deletePromotion(@PathVariable(\"id\") Long id) {\n        promotionService.deletePromotion(id);\n        return \"redirect:/promotions\";\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/CategoryController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.Category;\nimport com.example.MonitoringInternetShop.Services.CategoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n\n@Controller\n@RequestMapping(\"/categories\")\npublic class CategoryController {\n\n    private final CategoryService categoryService;\n\n    @Autowired\n    public CategoryController(CategoryService categoryService) {\n        this.categoryService = categoryService;\n    }\n\n    @PostMapping", "@Controller\n@RequestMapping(\"/categories\")\npublic class CategoryController {\n\n    private final CategoryService categoryService;\n\n    @Autowired\n    public CategoryController(CategoryService categoryService) {\n        this.categoryService = categoryService;\n    }\n\n    @PostMapping", "    public String addCategory(@ModelAttribute(\"category\") Category category) {\n        categoryService.saveCategory(category);\n        return \"redirect:/products\";\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/DashboardController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.Order;\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport com.example.MonitoringInternetShop.Models.Product;\nimport com.example.MonitoringInternetShop.Services.OrderService;\nimport com.example.MonitoringInternetShop.Services.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;", "import org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;", "import java.util.Map;\nimport java.util.stream.Collectors;\n\n@Controller\npublic class DashboardController {\n    @Autowired\n    private ProductService productService;\n\n    @Autowired\n    private OrderService orderService;\n\n    @GetMapping(\"/dashboard\")", "    public String dashboard(Model model) {\n        List<Product> topProducts = productService.getTopProducts();\n        List<Order> latestOrders = orderService.getLatestOrders();\n\n        model.addAttribute(\"topProducts\", topProducts);\n        model.addAttribute(\"latestOrders\", latestOrders);\n\n        int totalSoldProducts = latestOrders.stream()\n                .flatMap(order -> order.getOrderItems().stream())\n                .mapToInt(OrderItem::getQuantity)\n                .sum();\n\n        BigDecimal totalRevenue = latestOrders.stream()\n                .map(Order::getTotalAmount)\n                .reduce(BigDecimal.ZERO, BigDecimal::add);\n\n        BigDecimal averageCheck = latestOrders.size() > 0\n                ? totalRevenue.divide(BigDecimal.valueOf(latestOrders.size()), 2, RoundingMode.HALF_UP)\n                : BigDecimal.ZERO;\n\n        List<Map<String, Object>> salesData = topProducts.stream()\n                .map(product -> {\n                    Map<String, Object> map = new HashMap<>();\n                    map.put(\"name\", product.getName());\n                    map.put(\"sales\", product.getSales());\n                    map.put(\"revenue\", product.getPrice().multiply(new BigDecimal(product.getSales()))); // new line\n                    return map;\n                })\n                .collect(Collectors.toList());\n\n        model.addAttribute(\"totalSoldProducts\", totalSoldProducts);\n        model.addAttribute(\"totalRevenue\", totalRevenue);\n        model.addAttribute(\"averageCheck\", averageCheck);\n        model.addAttribute(\"salesData\", salesData);\n\n        return \"dashboard\";\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/UserManagementController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Services.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model;\n", "import org.springframework.ui.Model;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(\"user-management\")\npublic class UserManagementController {\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"\")", "    public String showUsers(Model model, HttpSession session) {\n        User loggedInUser = userService.getLoggedInUser(session).orElseThrow();\n        List<User> users = userService.getAllUsers();\n        users.remove(loggedInUser);\n        model.addAttribute(\"users\", users);\n        return \"user-management\";\n    }\n\n    @GetMapping(\"/edit/{id}\")\n    public String showEditForm(@PathVariable(\"id\") Long id, Model model) {\n        User user = userService.getUserById(id).orElseThrow();\n        model.addAttribute(\"user\", user);\n        return \"edit-user\";\n    }\n\n    @PostMapping(\"/edit/{id}\")", "    public String showEditForm(@PathVariable(\"id\") Long id, Model model) {\n        User user = userService.getUserById(id).orElseThrow();\n        model.addAttribute(\"user\", user);\n        return \"edit-user\";\n    }\n\n    @PostMapping(\"/edit/{id}\")\n    public String updateUser(@PathVariable(\"id\") Long id, @ModelAttribute User user) {\n        userService.updateUserPassword(id, user.getPassword());\n        userService.updateUserStatus(id, user.getStatus());\n        userService.updateUser(id, user);\n        return \"redirect:/user-management\";\n    }\n\n    @GetMapping(\"/delete/{id}\")", "    public String deleteUser(@PathVariable(\"id\") Long id) {\n        userService.deleteUser(id);\n        return \"redirect:/user-management\";\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/LoginController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Repositories.UserRepository;\nimport com.example.MonitoringInternetShop.Services.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\n\n@Controller\npublic class LoginController {\n\n    private static final String INVALID_USER = \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\";\n    private static final String UNKNOWN_ROLE = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\";\n    private static final String INACTIVE_ACCOUNT = \"\u0412\u0430\u0448 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0443 \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438\";\n    private static final String LOGIN_EXISTS = \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u043b\u043e\u0433\u0438\u043d\u043e\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\";\n    private static final String EMAIL_EXISTS = \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\";\n    private static final String PASSWORD_MISMATCH = \"\u041f\u0430\u0440\u043e\u043b\u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442!\";\n    private static final String REGISTRATION_SUCCESS = \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430. \u0412\u0430\u0448 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438.\";\n\n    @Autowired\n    private UserService userService;\n    @Autowired\n    private UserRepository userRepository;\n\n    @GetMapping(\"/login\")", "    public String showLoginPage() {\n        return \"login\";\n    }\n\n    @GetMapping(\"/register\")\n    public String registerForm(Model model) {\n        model.addAttribute(\"user\", new User());\n        return \"registration\";\n    }\n\n    @PostMapping(\"/login\")", "    public String handleLogin(@RequestParam String username, @RequestParam String password, HttpSession session, Model model) {\n        Optional<User> userOptional = userService.validateUser(username, password);\n        if (userOptional.isPresent()) {\n            User user = userOptional.get();\n            if (User.Status.ACTIVE.equals(user.getStatus())) {\n                session.setAttribute(\"user\", user);\n                if (User.Role.ADMIN.equals(user.getRole())) {\n                    return \"redirect:/dashboard\";\n                } else if (User.Role.USER.equals(user.getRole())) {\n                    return \"redirect:/create-order\";\n                } else {\n                    model.addAttribute(\"error\", UNKNOWN_ROLE);\n                    return \"login\";\n                }\n            } else {\n                model.addAttribute(\"error\", INACTIVE_ACCOUNT);\n                return \"login\";\n            }\n        } else {\n            model.addAttribute(\"error\", INVALID_USER);\n            return \"login\";\n        }\n    }\n\n    @PostMapping(\"/register\")", "                } else if (User.Role.USER.equals(user.getRole())) {\n                    return \"redirect:/create-order\";\n                } else {\n                    model.addAttribute(\"error\", UNKNOWN_ROLE);\n                    return \"login\";\n                }\n            } else {\n                model.addAttribute(\"error\", INACTIVE_ACCOUNT);\n                return \"login\";\n            }\n        } else {\n            model.addAttribute(\"error\", INVALID_USER);\n            return \"login\";\n        }\n    }\n\n    @PostMapping(\"/register\")", "    public String addUser(@ModelAttribute User user, @RequestParam String passwordConfirm, Model model) {\n        Optional<User> userFromDbOptional = userRepository.findByLogin(user.getLogin());\n        Optional<User> emailFromDbOptional = userRepository.findByMail(user.getMail());\n\n        if (userFromDbOptional.isPresent()) {\n            model.addAttribute(\"message\", LOGIN_EXISTS);\n            return \"registration\";\n        }\n\n        if (emailFromDbOptional.isPresent()) {\n            model.addAttribute(\"message\", EMAIL_EXISTS);\n            return \"registration\";\n        }\n", "        if (emailFromDbOptional.isPresent()) {\n            model.addAttribute(\"message\", EMAIL_EXISTS);\n            return \"registration\";\n        }\n\n        if (!user.getPassword().equals(passwordConfirm)) {\n            model.addAttribute(\"message\", PASSWORD_MISMATCH);\n            return \"registration\";\n        }\n\n        user.setStatus(User.Status.INACTIVE);\n        user.setRole(User.Role.USER);\n        userRepository.save(user);\n        model.addAttribute(\"message\", REGISTRATION_SUCCESS);\n        return \"login\";\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/MainController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Services.OrderService;\nimport com.example.MonitoringInternetShop.Services.ProductService;\nimport com.example.MonitoringInternetShop.Services.UserService;\nimport com.example.MonitoringInternetShop.Models.Product;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;", "import org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport java.math.BigDecimal;\n\n@Controller\npublic class MainController {\n\n    @Autowired\n    private OrderService orderService;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private ProductService productService;\n\n    @GetMapping(\"/\")", "    public String home(Model model) {\n        int totalUsers = userService.getAllUsers().size();\n        int totalOrders = orderService.getAllOrders().size();\n        int totalSales = productService.getAllProducts().stream().mapToInt(Product::getSales).sum();\n        BigDecimal totalSoldAmount = productService.getAllProducts().stream()\n                .map(product -> product.getPrice().multiply(new BigDecimal(product.getSales())))\n                .reduce(BigDecimal.ZERO, BigDecimal::add);\n\n        model.addAttribute(\"totalUsers\", totalUsers);\n        model.addAttribute(\"totalOrders\", totalOrders);\n        model.addAttribute(\"totalSales\", totalSales);\n        model.addAttribute(\"totalSoldAmount\", totalSoldAmount);\n\n        return \"main\";\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/SettingsController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport com.example.MonitoringInternetShop.Repositories.UserRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n\n@Controller\npublic class SettingsController {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @GetMapping(\"/settings\")", "    public String settingsForm(Model model, HttpSession session) {\n        User user = (User) session.getAttribute(\"user\");\n        if (user != null) {\n            model.addAttribute(\"user\", user);\n            return \"settings\";\n        } else {\n            return \"redirect:/login\";\n        }\n    }\n\n    @PostMapping(\"/settings\")", "    public String updateUser(@ModelAttribute User updatedUser, HttpSession session) {\n        User currentUser = (User) session.getAttribute(\"user\");\n        if (currentUser != null) {\n            currentUser.setName(updatedUser.getName());\n            currentUser.setMail(updatedUser.getMail());\n            currentUser.setLogin(updatedUser.getLogin());\n            userRepository.save(currentUser);\n            session.setAttribute(\"user\", currentUser);\n        }\n        return \"redirect:/settings\";\n    }\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Controllers/ProductController.java", "chunked_list": ["package com.example.MonitoringInternetShop.Controllers;\n\nimport com.example.MonitoringInternetShop.Models.Category;\nimport com.example.MonitoringInternetShop.Models.OrderItem;\nimport com.example.MonitoringInternetShop.Models.Product;\nimport com.example.MonitoringInternetShop.Services.CategoryService;\nimport com.example.MonitoringInternetShop.Services.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;", "import org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(\"/products\")\npublic class ProductController {\n\n    @Autowired\n    private ProductService productService;\n    @Autowired\n    private CategoryService categoryService;\n\n    @GetMapping", "@RequestMapping(\"/products\")\npublic class ProductController {\n\n    @Autowired\n    private ProductService productService;\n    @Autowired\n    private CategoryService categoryService;\n\n    @GetMapping\n    public String products(Model model,\n                           @RequestParam(name = \"category\", required = false) String category,\n                           @RequestParam(name = \"sortBy\", required = false) String sortBy) {\n        List<Product> products = productService.getFilteredAndSortedProducts(category, sortBy);\n        List<Category> categories = categoryService.getAllCategories();\n        model.addAttribute(\"products\", products);\n        model.addAttribute(\"product\", new Product());\n        model.addAttribute(\"categories\", categories);\n        model.addAttribute(\"category\", new Category());\n        return \"products\";\n    }\n\n    @PostMapping", "    public String products(Model model,\n                           @RequestParam(name = \"category\", required = false) String category,\n                           @RequestParam(name = \"sortBy\", required = false) String sortBy) {\n        List<Product> products = productService.getFilteredAndSortedProducts(category, sortBy);\n        List<Category> categories = categoryService.getAllCategories();\n        model.addAttribute(\"products\", products);\n        model.addAttribute(\"product\", new Product());\n        model.addAttribute(\"categories\", categories);\n        model.addAttribute(\"category\", new Category());\n        return \"products\";\n    }\n\n    @PostMapping", "    public String createProduct(@ModelAttribute Product product) {\n        productService.saveProduct(product);\n        return \"redirect:/products\";\n    }\n\n    @PostMapping(\"/{id}/edit\")\n    public String editProduct(@PathVariable Long id, Product product) {\n        Product existingProduct = productService.getProductById(id);\n        if (existingProduct != null) {\n            existingProduct.setName(product.getName());\n            existingProduct.setPrice(product.getPrice());\n            existingProduct.setSales(product.getSales());\n            existingProduct.setDescription(product.getDescription());\n            existingProduct.setCategory(product.getCategory());\n            existingProduct.setStock(product.getStock());\n            productService.updateProduct(existingProduct);\n        }\n        return \"redirect:/products\";\n    }\n\n    @PostMapping(\"/{id}/delete\")", "        if (existingProduct != null) {\n            existingProduct.setName(product.getName());\n            existingProduct.setPrice(product.getPrice());\n            existingProduct.setSales(product.getSales());\n            existingProduct.setDescription(product.getDescription());\n            existingProduct.setCategory(product.getCategory());\n            existingProduct.setStock(product.getStock());\n            productService.updateProduct(existingProduct);\n        }\n        return \"redirect:/products\";\n    }\n\n    @PostMapping(\"/{id}/delete\")", "    public String deleteProduct(@PathVariable Long id, RedirectAttributes redirectAttributes) {\n        List<OrderItem> orderItems = productService.findOrderItemsByProduct(id);\n        if (!orderItems.isEmpty()) {\n            redirectAttributes.addFlashAttribute(\"alert\", \"\u041d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u043e\u0432\u0430\u0440, \u043f\u043e\u043a\u0430 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u0437\u0430\u043a\u0430\u0437\u044b. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0441 \u0437\u0430\u043a\u0430\u0437\u0430\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c.\");\n            return \"redirect:/products\";\n        }\n\n        productService.deleteProduct(id);\n        return \"redirect:/products\";\n    }\n\n\n    @PostMapping(\"/{id}/incrementStock\")", "    public String incrementProductStock(@PathVariable(\"id\") Long id, @RequestParam(\"incrementAmount\") Integer incrementAmount) {\n        productService.incrementProductStock(id, incrementAmount);\n        return \"redirect:/products\";\n    }\n\n\n    @PostMapping(\"/{id}/decrementStock\")\n    public String decrementProductStock(@PathVariable(\"id\") Long id, @RequestParam(\"decrementAmount\") Integer decrementAmount, Model model) {\n        try {\n            productService.decrementProductStock(id, decrementAmount);\n        } catch (RuntimeException ex) {\n            model.addAttribute(\"alert\", ex.getMessage());\n            return \"products\";\n        }\n        return \"redirect:/products\";\n    }\n\n    @PostMapping(\"/categories\")", "        try {\n            productService.decrementProductStock(id, decrementAmount);\n        } catch (RuntimeException ex) {\n            model.addAttribute(\"alert\", ex.getMessage());\n            return \"products\";\n        }\n        return \"redirect:/products\";\n    }\n\n    @PostMapping(\"/categories\")\n    public String createCategory(@ModelAttribute Category category) {\n        categoryService.saveCategory(category);\n        return \"redirect:/products\";\n    }\n\n}\n", "    public String createCategory(@ModelAttribute Category category) {\n        categoryService.saveCategory(category);\n        return \"redirect:/products\";\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Secure/RoleCheckInterceptor.java", "chunked_list": ["package com.example.MonitoringInternetShop.Secure;\n\nimport com.example.MonitoringInternetShop.Models.User;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\npublic class RoleCheckInterceptor implements HandlerInterceptor {\n\n    private final String expectedRole;\n\n    public RoleCheckInterceptor(String expectedRole) {\n        this.expectedRole = expectedRole;\n    }\n\n    @Override", "public class RoleCheckInterceptor implements HandlerInterceptor {\n\n    private final String expectedRole;\n\n    public RoleCheckInterceptor(String expectedRole) {\n        this.expectedRole = expectedRole;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");", "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        User user = (User) session.getAttribute(\"user\");\n        if (user == null || !user.getRole().equals(User.Role.valueOf(expectedRole))) {\n            response.sendRedirect(\"/login\");\n            return false;\n        }\n        return true;\n    }\n\n}\n"]}
{"filename": "MonitoringInternetShop/src/main/java/com/example/MonitoringInternetShop/Secure/WebMvcConfig.java", "chunked_list": ["package com.example.MonitoringInternetShop.Secure;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new RoleCheckInterceptor(\"ADMIN\")).addPathPatterns(\"/dashboard\", \"/edit_order\", \"/edit-user\", \"/orders\", \"/products\", \"/promotions\", \"/settings\", \"/user-management\");\n        registry.addInterceptor(new RoleCheckInterceptor(\"USER\")).addPathPatterns(\"/create-order\", \"/user-orders\");\n    }\n\n}\n", "    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new RoleCheckInterceptor(\"ADMIN\")).addPathPatterns(\"/dashboard\", \"/edit_order\", \"/edit-user\", \"/orders\", \"/products\", \"/promotions\", \"/settings\", \"/user-management\");\n        registry.addInterceptor(new RoleCheckInterceptor(\"USER\")).addPathPatterns(\"/create-order\", \"/user-orders\");\n    }\n\n}\n"]}
