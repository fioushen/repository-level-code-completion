{"filename": "src/main/java/dev/cristike/aquainput/input/StringInput.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input;\n\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\n/**\n * A child class of AquaInput used for the input of non-empty strings.\n * */\npublic class StringInput extends AquaInput {\n\n    @Override\n    public boolean isValidInput(@NotNull String input) {\n        return !input.isEmpty();\n    }\n}\n", "    public boolean isValidInput(@NotNull String input) {\n        return !input.isEmpty();\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/DoubleInput.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input;\n\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.Optional;\n\n/**\n * A child class of AquaInput used for the input of double values.\n * */\npublic class DoubleInput extends AquaInput {\n\n    @Override\n    public boolean isValidInput(@NotNull String input) {", "    public boolean isValidInput(@NotNull String input) {\n        try {\n            Double.parseDouble(input);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    /**\n     * Parses the given input if possible into an double.\n     *\n     * @param input the input\n     * @return an optional that may contain the parsed value\n     * */\n    public Optional<Double> parseInput(@NotNull String input) {", "        try {\n            return Optional.of(Double.parseDouble(input));\n        } catch (NumberFormatException e) {\n            return Optional.empty();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/IntegerInput.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input;\n\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.Optional;\n\n/**\n * A child class of AquaInput used for the input of integer values.\n * */\npublic class IntegerInput extends AquaInput {\n\n    @Override\n    public boolean isValidInput(@NotNull String input) {", "    public boolean isValidInput(@NotNull String input) {\n        try {\n            Integer.parseInt(input);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    /**\n     * Parses the given input if possible into an integer.\n     *\n     * @param input the input\n     * @return an optional that may contain the parsed value\n     * */\n    public Optional<Integer> parseInput(@NotNull String input) {", "        try {\n            return Optional.of(Integer.parseInt(input));\n        } catch (NumberFormatException e) {\n            return Optional.empty();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/StringCollectionInput.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input;\n\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.Collection;\n\n/**\n * A child class of AquaInput used for the input of a string present\n * in a collection.\n * */\npublic class StringCollectionInput extends AquaInput {\n    private final Collection<String> collection;\n\n    public StringCollectionInput(Collection<String> collection) {\n        this.collection = collection;\n    }\n\n    @Override", "public class StringCollectionInput extends AquaInput {\n    private final Collection<String> collection;\n\n    public StringCollectionInput(Collection<String> collection) {\n        this.collection = collection;\n    }\n\n    @Override\n    public boolean isValidInput(@NotNull String input) {\n        return collection.contains(input);\n    }\n}\n", "    public boolean isValidInput(@NotNull String input) {\n        return collection.contains(input);\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/AquaInput.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input;\n\nimport dev.cristike.aquainput.input.enums.InputFlag;\nimport dev.cristike.aquainput.input.enums.InputMessage;", "import dev.cristike.aquainput.input.enums.InputFlag;\nimport dev.cristike.aquainput.input.enums.InputMessage;\nimport org.bukkit.entity.Player;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.*;\n\n/**\n * An abstract class that stands as base for all type of inputs.\n * */\npublic abstract class AquaInput {\n    private final Map<InputMessage, String> messages = new HashMap<>();\n    private final EnumSet<InputFlag> flags = EnumSet.noneOf(InputFlag.class);\n    private List<String> allowedCommands = new ArrayList<>();\n    private int attempts = -1;\n    private int timeout = -1;\n\n    /**\n     * Checks if the given input is valid.\n     *\n     * @param input the input\n     * */", " * An abstract class that stands as base for all type of inputs.\n * */\npublic abstract class AquaInput {\n    private final Map<InputMessage, String> messages = new HashMap<>();\n    private final EnumSet<InputFlag> flags = EnumSet.noneOf(InputFlag.class);\n    private List<String> allowedCommands = new ArrayList<>();\n    private int attempts = -1;\n    private int timeout = -1;\n\n    /**\n     * Checks if the given input is valid.\n     *\n     * @param input the input\n     * */", "    public abstract boolean isValidInput(@NotNull String input);\n\n    /**\n     * Sends, if present, the message of the given type to the player.\n     * The following placeholders can be used: {player}, {attempts}\n     *\n     * @param type the message type\n     * @param player the player\n     * */\n    public final void sendMessage(@NotNull InputMessage type, @NotNull Player player) {\n        if (!messages.containsKey(type)) return;\n        player.sendMessage(messages.get(type)\n                .replace(\"{player}\", player.getName())\n                .replace(\"{attempts}\", String.valueOf(attempts)));\n    }\n\n    /**\n     * Sends, if present, the message of the given type to the player.\n     * The following placeholders can be used: {player}, {attempts}, {input}\n     *\n     * @param type the message type\n     * @param player the player\n     * @param input the input\n     * */", "    public final void sendMessage(@NotNull InputMessage type, @NotNull Player player) {\n        if (!messages.containsKey(type)) return;\n        player.sendMessage(messages.get(type)\n                .replace(\"{player}\", player.getName())\n                .replace(\"{attempts}\", String.valueOf(attempts)));\n    }\n\n    /**\n     * Sends, if present, the message of the given type to the player.\n     * The following placeholders can be used: {player}, {attempts}, {input}\n     *\n     * @param type the message type\n     * @param player the player\n     * @param input the input\n     * */", "    public final void sendMessage(@NotNull InputMessage type, @NotNull Player player, @NotNull String input) {\n        if (!messages.containsKey(type)) return;\n        player.sendMessage(messages.get(type)\n                .replace(\"{player}\", player.getName())\n                .replace(\"{attempts}\", String.valueOf(attempts))\n                .replace(\"{input}\", input));\n    }\n\n    /**\n     * Sets the message for the given message type.\n     *\n     * @param type the message type\n     * @param message the message\n     * */\n    @NotNull", "    public final AquaInput setMessage(@NotNull InputMessage type, @NotNull String message) {\n        messages.put(type, message);\n        return this;\n    }\n\n    /**\n     * Checks if the given flag is enabled.\n     *\n     * @param flag the flag\n     * @return whether the flag is or not enabled\n     * */", "    public final boolean hasFlag(@NotNull InputFlag flag) {\n        return flags.contains(flag);\n    }\n\n    /**\n     * Sets the given flags as enabled.\n     *\n     * @param flags the flags\n     * */\n    @NotNull\n    public final AquaInput setFlags(@NotNull InputFlag ... flags) {\n        this.flags.addAll(Arrays.asList(flags));\n        return this;\n    }\n\n    /**\n     * Checks if the given command is allowed to be used.\n     *\n     * @param command the command\n     * @return whether the command is allowed or not\n     * */", "    public final AquaInput setFlags(@NotNull InputFlag ... flags) {\n        this.flags.addAll(Arrays.asList(flags));\n        return this;\n    }\n\n    /**\n     * Checks if the given command is allowed to be used.\n     *\n     * @param command the command\n     * @return whether the command is allowed or not\n     * */", "    public final boolean isCommandAllowed(@NotNull String command) {\n        return allowedCommands.contains(command);\n    }\n\n    /**\n     * Sets the allowed commands to be used.\n     *\n     * @param allowedCommands the commands\n     * */\n    @NotNull\n    public final AquaInput setAllowedCommands(@NotNull List<String> allowedCommands) {\n        this.allowedCommands = allowedCommands;\n        return this;\n    }\n\n    /**\n     * Sets the allowed commands to be used.\n     *\n     * @param allowedCommands the commands\n     * */\n    @NotNull", "    public final AquaInput setAllowedCommands(@NotNull List<String> allowedCommands) {\n        this.allowedCommands = allowedCommands;\n        return this;\n    }\n\n    /**\n     * Sets the allowed commands to be used.\n     *\n     * @param allowedCommands the commands\n     * */\n    @NotNull", "    public final AquaInput setAllowedCommands(@NotNull String ... allowedCommands) {\n        this.allowedCommands = Arrays.asList(allowedCommands);\n        return this;\n    }\n\n    /**\n     * Gets the remaining number of attempts the input\n     * can be given.\n     *\n     * @return the remaining number of attempts\n     * */", "    public final int getAttempts() {\n        return attempts;\n    }\n\n    /**\n     * Sets the remaining number of attempts the input\n     * can be given.\n     * Any value smaller than 0 will be interpreted\n     * as infinite.\n     *\n     * @param attempts the number of attempts\n     * */\n    @NotNull", "    public final AquaInput setAttempts(int attempts) {\n        this.attempts = attempts;\n        return this;\n    }\n\n    /**\n     * Gets the duration after which the input prompt\n     * will be cancelled.\n     * This duration is in seconds. Any value smaller than\n     * 0 will disable the timeout.\n     *\n     * @return the duration\n     * */", "    public final int getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Gets the duration after which the input prompt\n     * will be cancelled.\n     * This duration is in seconds. Any value smaller than\n     * 0 will disable the timeout.\n     *\n     * @param timeout  the duration\n     * */\n    @NotNull", "    public final AquaInput setTimeout(int timeout) {\n        this.timeout = timeout;\n        return this;\n    }\n\n    /**\n     * Copies the properties of this object in the given\n     * object.\n     *\n     * @param input the object\n     * */", "    public final void copyTo(@NotNull AquaInput input) {\n        messages.forEach(input::setMessage);\n\n        input.setFlags(flags.toArray(InputFlag[]::new));\n        input.setAllowedCommands(allowedCommands.toArray(String[]::new));\n        input.setAttempts(attempts);\n        input.setTimeout(timeout);\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/enums/InputFlag.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input.enums;\n\n/**\n * An enum of the possible flags of an AquaInput object.", "/**\n * An enum of the possible flags of an AquaInput object.\n * */\npublic enum InputFlag {\n    DISABLE_COMMANDS, DISABLE_MOVEMENT, DISABLE_INTERACTION\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/input/enums/InputMessage.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.input.enums;\n\n/**\n * An enum of the available messages for the input prompt.", "/**\n * An enum of the available messages for the input prompt.\n * */\npublic enum InputMessage {\n    PROMPT, INVALID_INPUT, DISABLED_COMMANDS, DISABLED_MOVEMENT, DISABLED_INTERACTION, TIMEOUT, SUCCESS\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/response/AquaInputResponse.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.response;\n\nimport dev.cristike.aquainput.response.enums.InputStatus;\nimport org.jetbrains.annotations.NotNull;", "import dev.cristike.aquainput.response.enums.InputStatus;\nimport org.jetbrains.annotations.NotNull;\n\n/**\n * A class that represents the response of an input prompt.\n * It contains the status and the value.\n * */\npublic record AquaInputResponse(InputStatus status, String value) {\n\n    /**\n     * Returns the status of an input prompt.\n     *\n     * @return the status\n     * */\n    @NotNull", "    public InputStatus status() {\n        return status;\n    }\n\n    /**\n     * Returns the string value of an input prompt.\n     *\n     * @return the value\n     * */\n    @NotNull\n    public String value() {\n        return value;\n    }\n}\n", "    public String value() {\n        return value;\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/response/enums/InputStatus.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.response.enums;\n\n/**\n * An enum of the possible response status of an input prompt.", "/**\n * An enum of the possible response status of an input prompt.\n * */\npublic enum InputStatus {\n    SUCCESS, TIMEOUT, FAILED_ATTEMPTS, PLAYER_QUIT, PLAYER_DEATH\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/request/AquaInputRequest.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.request;\n\nimport dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.response.AquaInputResponse;", "import dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.response.AquaInputResponse;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class AquaInputRequest {\n    private final CompletableFuture<AquaInputResponse> future = new CompletableFuture<>();\n    private final AquaInput input;\n\n    public AquaInputRequest(AquaInput input) {\n        this.input = input;\n    }\n\n    public CompletableFuture<AquaInputResponse> getFuture() {\n        return future;\n    }\n", "    public AquaInput getInput() {\n        return input;\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/manager/EventsListener.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.manager;\n\nimport dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.input.enums.InputFlag;", "import dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.input.enums.InputFlag;\nimport dev.cristike.aquainput.input.enums.InputMessage;\nimport dev.cristike.aquainput.response.AquaInputResponse;\nimport dev.cristike.aquainput.response.enums.InputStatus;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.EventPriority;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDamageEvent;", "import org.bukkit.event.Listener;\nimport org.bukkit.event.entity.EntityDamageEvent;\nimport org.bukkit.event.entity.PlayerDeathEvent;\nimport org.bukkit.event.player.*;\n\n/**\n * An event listener class that is responsible for getting the input values,\n * restricting the player and complete input requests when needed.\n * */\npublic class EventsListener implements Listener {\n\n    /* Gets the input from chat, filters it and possibly completes the input request. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)", " * */\npublic class EventsListener implements Listener {\n\n    /* Gets the input from chat, filters it and possibly completes the input request. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)\n    public void onChat(AsyncPlayerChatEvent event) {\n        Player player = event.getPlayer();\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n\n        if (input == null) return;\n        event.setCancelled(true);\n", "        if (input == null) return;\n        event.setCancelled(true);\n\n        if (input.isValidInput(event.getMessage())) {\n            input.sendMessage(InputMessage.SUCCESS, player, event.getMessage());\n            AquaInputManager.completeCurrentRequest(\n                    player.getUniqueId(),\n                    new AquaInputResponse(InputStatus.SUCCESS, event.getMessage()));\n\n            return;\n        }\n", "        if (input.getAttempts() > 0)\n            input.setAttempts(input.getAttempts() - 1);\n\n        if (input.getAttempts() == 0) {\n            AquaInputManager.completeCurrentRequest(\n                    player.getUniqueId(),\n                    new AquaInputResponse(InputStatus.FAILED_ATTEMPTS, \"\"));\n            return;\n        }\n\n        input.sendMessage(InputMessage.INVALID_INPUT, player);\n    }\n\n    /* Handles the case when commands are not allowed. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)", "    public void onCommand(PlayerCommandPreprocessEvent event) {\n        Player player = event.getPlayer();\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n\n        if (input == null) return;\n        if (!input.hasFlag(InputFlag.DISABLE_COMMANDS)) return;\n        String command = event.getMessage().substring(1).split(\" \")[0];\n\n        if (input.isCommandAllowed(command)) return;\n        input.sendMessage(InputMessage.DISABLED_COMMANDS, player, command);\n        event.setCancelled(true);\n    }\n\n    /* Handles the case when movement is not allowed. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)", "        if (input.isCommandAllowed(command)) return;\n        input.sendMessage(InputMessage.DISABLED_COMMANDS, player, command);\n        event.setCancelled(true);\n    }\n\n    /* Handles the case when movement is not allowed. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)\n    public void onMove(PlayerMoveEvent event) {\n        if (event.getTo() == null) return;\n        Player player = event.getPlayer();\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n", "        if (event.getTo() == null) return;\n        Player player = event.getPlayer();\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n\n        if (input == null) return;\n        if (!input.hasFlag(InputFlag.DISABLE_MOVEMENT)) return;\n        if (event.getFrom().distanceSquared(event.getTo()) == 0) return;\n        input.sendMessage(InputMessage.DISABLED_MOVEMENT, player);\n        event.setCancelled(true);\n    }\n\n    /* Handles the case when interactions are not allowed. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)", "    public void onInteraction(PlayerInteractEvent event) {\n        Player player = event.getPlayer();\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n\n        if (input == null) return;\n        if (!input.hasFlag(InputFlag.DISABLE_INTERACTION)) return;\n        input.sendMessage(InputMessage.DISABLED_INTERACTION, player);\n        event.setCancelled(true);\n    }\n\n    /* Handles the case when interactions are not allowed. */\n    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)", "    public void onInteracted(EntityDamageEvent event) {\n        if (!(event.getEntity() instanceof Player player)) return;\n        AquaInput input = AquaInputManager.getCurrentRequest(player.getUniqueId());\n\n        if (input == null) return;\n        if (!input.hasFlag(InputFlag.DISABLE_INTERACTION)) return;\n        input.sendMessage(InputMessage.DISABLED_INTERACTION, player);\n        event.setCancelled(true);\n    }\n\n    /* Handles the case when there are somehow input requests for the player when he joins. */\n    @EventHandler(priority = EventPriority.LOWEST)", "    public void onJoin(PlayerJoinEvent event) {\n        AquaInputManager.clearAllRequests(event.getPlayer().getUniqueId());\n    }\n\n    /* Clears the input requests when the player leaves the server. */\n    @EventHandler(priority = EventPriority.HIGHEST)\n    public void onQuit(PlayerQuitEvent event) {\n        AquaInputManager.completeAllRequests(\n                event.getPlayer().getUniqueId(),\n                new AquaInputResponse(InputStatus.PLAYER_QUIT, \"\"));\n    }\n\n    /* Clears the input requests when the player dies. */\n    @EventHandler(priority = EventPriority.HIGHEST)", "    public void onDeath(PlayerDeathEvent event) {\n        AquaInputManager.completeAllRequests(\n                event.getEntity().getUniqueId(),\n                new AquaInputResponse(InputStatus.PLAYER_QUIT, \"\"));\n    }\n}\n"]}
{"filename": "src/main/java/dev/cristike/aquainput/manager/AquaInputManager.java", "chunked_list": ["/*\n *   Copyright (c) 2023 Cristike\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *", " *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in all\n *   copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", " *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n *   SOFTWARE.\n */\n\npackage dev.cristike.aquainput.manager;\n\nimport dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.input.enums.InputMessage;", "import dev.cristike.aquainput.input.AquaInput;\nimport dev.cristike.aquainput.input.enums.InputMessage;\nimport dev.cristike.aquainput.request.AquaInputRequest;\nimport dev.cristike.aquainput.response.AquaInputResponse;\nimport dev.cristike.aquainput.response.enums.InputStatus;\nimport org.bukkit.entity.Player;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n", "import org.jetbrains.annotations.Nullable;\n\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;\n\n/**\n * The main class that provides the function to prompt for input.\n * */\npublic class AquaInputManager {\n    private static JavaPlugin plugin;\n    private static final Map<UUID, Queue<AquaInputRequest>> requestsQueue = new HashMap<>();\n\n    /**\n     * Prompts the player with the given unique id for input of a given form\n     * defined by the AquaInput object.\n     *\n     * @param plugin the plugin\n     * @param uuid the unique id\n     * @param input the input type\n     *\n     * @return a CompletableFuture that returns the response to the prompt.\n     * */", "public class AquaInputManager {\n    private static JavaPlugin plugin;\n    private static final Map<UUID, Queue<AquaInputRequest>> requestsQueue = new HashMap<>();\n\n    /**\n     * Prompts the player with the given unique id for input of a given form\n     * defined by the AquaInput object.\n     *\n     * @param plugin the plugin\n     * @param uuid the unique id\n     * @param input the input type\n     *\n     * @return a CompletableFuture that returns the response to the prompt.\n     * */", "    public static CompletableFuture<AquaInputResponse> promptInput(@NotNull JavaPlugin plugin,\n                                                                   @NotNull UUID uuid,\n                                                                   @NotNull AquaInput input) {\n        if (AquaInputManager.plugin == null) initialize(plugin);\n        Queue<AquaInputRequest> queue = requestsQueue.computeIfAbsent(uuid, k -> new LinkedList<>());\n        AquaInputRequest request = new AquaInputRequest(input);\n\n        queue.add(request);\n        if (queue.size() == 1)\n            initializeInputRequest(uuid, request);\n\n        return request.getFuture();\n    }\n\n    /* Initializes the tool for the hosting plugin. */\n    private static void initialize(@NotNull JavaPlugin plugin) {\n        AquaInputManager.plugin = plugin;\n        plugin.getServer().getPluginManager().registerEvents(new EventsListener(), plugin);\n    }\n\n    /* Initializes the new request with the timeout task and sending the prompt message. */\n    private static void initializeInputRequest(@NotNull UUID uuid, @NotNull AquaInputRequest request) {\n        /* Sending the prompt message. */\n        sendInputMessage(uuid, request.getInput(), InputMessage.PROMPT);\n\n        /* Initializing the timeout task. */", "        if (queue.size() == 1)\n            initializeInputRequest(uuid, request);\n\n        return request.getFuture();\n    }\n\n    /* Initializes the tool for the hosting plugin. */\n    private static void initialize(@NotNull JavaPlugin plugin) {\n        AquaInputManager.plugin = plugin;\n        plugin.getServer().getPluginManager().registerEvents(new EventsListener(), plugin);\n    }\n\n    /* Initializes the new request with the timeout task and sending the prompt message. */\n    private static void initializeInputRequest(@NotNull UUID uuid, @NotNull AquaInputRequest request) {\n        /* Sending the prompt message. */\n        sendInputMessage(uuid, request.getInput(), InputMessage.PROMPT);\n\n        /* Initializing the timeout task. */", "        if (request.getInput().getTimeout() < 0) return;\n        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n            if (!requestsQueue.containsKey(uuid)) return;\n            Queue<AquaInputRequest> requests = requestsQueue.get(uuid);\n\n            if (requests.element() != request) return;\n            sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);\n            completeCurrentRequest(uuid, new AquaInputResponse(InputStatus.TIMEOUT, \"\"));\n        }, request.getInput().getTimeout() * 20L);\n    }\n    \n    /* Sends the input message to the player with the given unique id if he's online. */\n    private static void sendInputMessage(@NotNull UUID uuid, @NotNull AquaInput input, @NotNull InputMessage message) {\n        Player player = plugin.getServer().getPlayer(uuid);", "        if (player != null) input.sendMessage(message, player);\n    }\n\n    /* Gets the current head of the input requests queue. */\n    @Nullable\n    protected static AquaInput getCurrentRequest(@NotNull UUID uuid) {\n        if (!requestsQueue.containsKey(uuid)) return null;\n        return requestsQueue.get(uuid).element().getInput();\n    }\n\n    /* Completes the CompletableFuture of the current head of the input requests queue. */\n    protected static void completeCurrentRequest(@NotNull UUID uuid, @NotNull AquaInputResponse response) {\n        Queue<AquaInputRequest> requests = requestsQueue.get(uuid);\n\n        requests.element().getFuture().complete(response);\n        requests.remove();\n", "        if (requests.isEmpty()) requestsQueue.remove(uuid);\n        else initializeInputRequest(uuid, requests.element());\n    }\n\n    /* Completes all the CompletableFuture from the input requests queue. */\n    protected static void completeAllRequests(@NotNull UUID uuid, @NotNull AquaInputResponse response) {\n        if (!requestsQueue.containsKey(uuid)) return;\n\n        requestsQueue.get(uuid).forEach(request -> request.getFuture().complete(response));\n        requestsQueue.remove(uuid);\n    }\n\n    /* Clears all the input requests without completing them. */\n    protected static void clearAllRequests(@NotNull UUID uuid) {\n        requestsQueue.remove(uuid);\n    }\n}\n"]}
