{"filename": "service/src/test/java/com/theokanning/openai/service/FileTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.DeleteResult;\nimport com.theokanning.openai.file.File;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class FileTest {\n    static String filePath = \"src/test/resources/fine-tuning-data.jsonl\";\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n    static String fileId;\n\n    @Test\n    @Order(1)\n    void uploadFile() throws Exception {\n        File file = service.uploadFile(\"fine-tune\", filePath);\n        fileId = file.getId();\n\n        assertEquals(\"fine-tune\", file.getPurpose());\n        assertEquals(filePath, file.getFilename());\n\n        // wait for file to be processed\n        TimeUnit.SECONDS.sleep(10);\n    }\n\n    @Test\n    @Order(2)\n    void listFiles() {\n        List<File> files = service.listFiles();\n\n        assertTrue(files.stream().anyMatch(file -> file.getId().equals(fileId)));\n    }\n\n    @Test\n    @Order(3)\n    void retrieveFile() {\n        File file = service.retrieveFile(fileId);\n\n        assertEquals(filePath, file.getFilename());\n    }\n\n    @Test\n    @Order(4)\n    void deleteFile() {\n        DeleteResult result = service.deleteFile(fileId);\n        assertTrue(result.isDeleted());\n    }\n}\n", "public class FileTest {\n    static String filePath = \"src/test/resources/fine-tuning-data.jsonl\";\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n    static String fileId;\n\n    @Test\n    @Order(1)\n    void uploadFile() throws Exception {\n        File file = service.uploadFile(\"fine-tune\", filePath);\n        fileId = file.getId();\n\n        assertEquals(\"fine-tune\", file.getPurpose());\n        assertEquals(filePath, file.getFilename());\n\n        // wait for file to be processed\n        TimeUnit.SECONDS.sleep(10);\n    }\n\n    @Test\n    @Order(2)\n    void listFiles() {\n        List<File> files = service.listFiles();\n\n        assertTrue(files.stream().anyMatch(file -> file.getId().equals(fileId)));\n    }\n\n    @Test\n    @Order(3)\n    void retrieveFile() {\n        File file = service.retrieveFile(fileId);\n\n        assertEquals(filePath, file.getFilename());\n    }\n\n    @Test\n    @Order(4)\n    void deleteFile() {\n        DeleteResult result = service.deleteFile(fileId);\n        assertTrue(result.isDeleted());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/EmbeddingTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.embedding.Embedding;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;", "\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\n\npublic class EmbeddingTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void createEmbeddings() {\n        EmbeddingRequest embeddingRequest = EmbeddingRequest.builder()\n                .model(\"text-similarity-babbage-001\")\n                .input(Collections.singletonList(\"The food was delicious and the waiter...\"))\n                .build();\n\n        List<Embedding> embeddings = service.createEmbeddings(embeddingRequest).getData();\n\n        assertFalse(embeddings.isEmpty());\n        assertFalse(embeddings.get(0).getEmbedding().isEmpty());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/ModelTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.model.Model;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n", "import static org.junit.jupiter.api.Assertions.assertFalse;\n\n\npublic class ModelTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void listModels() {\n        List<Model> models = service.listModels();\n\n        assertFalse(models.isEmpty());\n    }\n\n    @Test\n    void getModel() {\n        Model ada = service.getModel(\"ada\");\n\n        assertEquals(\"ada\", ada.id);\n        assertEquals(\"openai\", ada.ownedBy);\n        assertFalse(ada.permission.isEmpty());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/ModerationTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.moderation.Moderation;\nimport com.theokanning.openai.moderation.ModerationRequest;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n\npublic class ModerationTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void createModeration() {\n        ModerationRequest moderationRequest = ModerationRequest.builder()\n                .input(\"I want to kill them\")\n                .model(\"text-moderation-latest\")\n                .build();\n\n        Moderation moderationScore = service.createModeration(moderationRequest).getResults().get(0);\n\n        assertTrue(moderationScore.isFlagged());\n    }\n}\n", "\npublic class ModerationTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void createModeration() {\n        ModerationRequest moderationRequest = ModerationRequest.builder()\n                .input(\"I want to kill them\")\n                .model(\"text-moderation-latest\")\n                .build();\n\n        Moderation moderationScore = service.createModeration(moderationRequest).getResults().get(0);\n\n        assertTrue(moderationScore.isFlagged());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/ChatCompletionTest.java", "chunked_list": ["package com.theokanning.openai.service;\nimport com.theokanning.openai.completion.chat.ChatCompletionChoice;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;", "import java.util.HashMap;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass ChatCompletionTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    OpenAiService service = new OpenAiService(token);\n", "    OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void createChatCompletion() {\n        final List<ChatMessage> messages = new ArrayList<>();\n        final ChatMessage systemMessage = new ChatMessage(ChatMessageRole.SYSTEM.value(), \"You are a dog and will speak as such.\");\n        messages.add(systemMessage);\n\n        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest\n                .builder()", "        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest\n                .builder()\n                .model(\"gpt-3.5-turbo\")\n                .messages(messages)\n                .n(5)\n                .maxTokens(50)\n                .logitBias(new HashMap<>())\n                .build();\n\n        List<ChatCompletionChoice> choices = service.createChatCompletion(chatCompletionRequest).getChoices();", "\n        List<ChatCompletionChoice> choices = service.createChatCompletion(chatCompletionRequest).getChoices();\n        assertEquals(5, choices.size());\n\n    }\n\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/ImageTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.image.CreateImageEditRequest;\nimport com.theokanning.openai.image.CreateImageRequest;\nimport com.theokanning.openai.image.CreateImageVariationRequest;\nimport com.theokanning.openai.image.Image;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.Duration;\nimport java.util.List;", "import java.time.Duration;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\n\npublic class ImageTest {\n\n    static String filePath = \"src/test/resources/penguin.png\";\n    static String fileWithAlphaPath = \"src/test/resources/penguin_with_alpha.png\";\n    static String maskPath = \"src/test/resources/mask.png\";\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token, Duration.ofSeconds(30));\n\n    @Test\n    void createImageUrl() {\n        CreateImageRequest createImageRequest = CreateImageRequest.builder()\n                .prompt(\"penguin\")\n                .n(3)\n                .size(\"256x256\")\n                .user(\"testing\")\n                .build();\n\n        List<Image> images = service.createImage(createImageRequest).getData();\n        assertEquals(3, images.size());\n        assertNotNull(images.get(0).getUrl());\n    }\n\n    @Test\n    void createImageBase64() {\n        CreateImageRequest createImageRequest = CreateImageRequest.builder()\n                .prompt(\"penguin\")\n                .responseFormat(\"b64_json\")\n                .user(\"testing\")\n                .build();\n\n        List<Image> images = service.createImage(createImageRequest).getData();\n        assertEquals(1, images.size());\n        assertNotNull(images.get(0).getB64Json());\n    }\n\n    @Test\n    void createImageEdit() {\n        CreateImageEditRequest createImageRequest = CreateImageEditRequest.builder()\n                .prompt(\"a penguin with a red background\")\n                .responseFormat(\"url\")\n                .size(\"256x256\")\n                .user(\"testing\")\n                .n(2)\n                .build();\n\n        List<Image> images = service.createImageEdit(createImageRequest, fileWithAlphaPath, null).getData();\n        assertEquals(2, images.size());\n        assertNotNull(images.get(0).getUrl());\n    }\n\n    @Test\n    void createImageEditWithMask() {\n        CreateImageEditRequest createImageRequest = CreateImageEditRequest.builder()\n                .prompt(\"a penguin with a red hat\")\n                .responseFormat(\"url\")\n                .size(\"256x256\")\n                .user(\"testing\")\n                .n(2)\n                .build();\n\n        List<Image> images = service.createImageEdit(createImageRequest, filePath, maskPath).getData();\n        assertEquals(2, images.size());\n        assertNotNull(images.get(0).getUrl());\n    }\n\n    @Test\n    void createImageVariation() {\n        CreateImageVariationRequest createImageVariationRequest = CreateImageVariationRequest.builder()\n                .responseFormat(\"url\")\n                .size(\"256x256\")\n                .user(\"testing\")\n                .n(2)\n                .build();\n\n        List<Image> images = service.createImageVariation(createImageVariationRequest, filePath).getData();\n        assertEquals(2, images.size());\n        assertNotNull(images.get(0).getUrl());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/FineTuneTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.finetune.FineTuneEvent;\nimport com.theokanning.openai.finetune.FineTuneRequest;\nimport com.theokanning.openai.finetune.FineTuneResult;\nimport org.junit.jupiter.api.*;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.TimeUnit;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class FineTuneTest {\n    static com.theokanning.openai.service.OpenAiService service;\n    static String fileId;\n    static String fineTuneId;\n\n\n    @BeforeAll\n   static void setup() throws Exception {\n        String token = System.getenv(\"OPENAI_TOKEN\");\n        service = new OpenAiService(token);\n        fileId = service.uploadFile(\"fine-tune\", \"src/test/resources/fine-tuning-data.jsonl\").getId();\n\n        // wait for file to be processed\n        TimeUnit.SECONDS.sleep(10);\n    }\n\n    @AfterAll\n    static void teardown() {\n        service.deleteFile(fileId);\n    }\n\n    @Test\n    @Order(1)\n    void createFineTune() {\n        FineTuneRequest request = FineTuneRequest.builder()\n                .trainingFile(fileId)\n                .model(\"ada\")\n                .nEpochs(4)\n                .build();\n\n        FineTuneResult fineTune = service.createFineTune(request);\n        fineTuneId = fineTune.getId();\n\n        assertEquals(\"pending\", fineTune.getStatus());\n    }\n\n    @Test\n    @Order(2)\n    void listFineTunes() {\n        List<FineTuneResult> fineTunes = service.listFineTunes();\n\n        assertTrue(fineTunes.stream().anyMatch(fineTune -> fineTune.getId().equals(fineTuneId)));\n    }\n\n    @Test\n    @Order(3)\n    void listFineTuneEvents() {\n        List<FineTuneEvent> events = service.listFineTuneEvents(fineTuneId);\n\n        assertFalse(events.isEmpty());\n    }\n\n    @Test\n    @Order(3)\n    void retrieveFineTune() {\n        FineTuneResult fineTune = service.retrieveFineTune(fineTuneId);\n\n        assertEquals(\"ada\", fineTune.getModel());\n    }\n\n    @Test\n    @Order(4)\n    void cancelFineTune() {\n        FineTuneResult fineTune = service.cancelFineTune(fineTuneId);\n\n        assertEquals(\"cancelled\", fineTune.getStatus());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/OpenAiServiceTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.completion.CompletionResult;\nimport io.reactivex.Single;\nimport okhttp3.MediaType;\nimport okhttp3.ResponseBody;\nimport org.junit.jupiter.api.Test;", "import okhttp3.ResponseBody;\nimport org.junit.jupiter.api.Test;\nimport retrofit2.HttpException;\nimport retrofit2.Response;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class OpenAiServiceTest {\n\n    @Test\n    void assertTokenNotNull() {\n        String token = null;\n        assertThrows(NullPointerException.class, () -> new OpenAiService(token));\n    }\n\n    @Test\n    void executeHappyPath() {\n        CompletionResult expected = new CompletionResult();\n        Single<CompletionResult> single = Single.just(expected);\n\n        CompletionResult actual = OpenAiService.execute(single);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    void executeParseHttpError() throws JsonProcessingException{\n        String errorBody = \"{\\\"error\\\":{\\\"message\\\":\\\"Invalid auth token\\\",\\\"type\\\":\\\"type\\\",\\\"param\\\":\\\"param\\\",\\\"code\\\":\\\"code\\\"}}\";\n        HttpException httpException = createException(errorBody, 401);\n        Single<CompletionResult> single = Single.error(httpException);\n\n        OpenAiHttpException exception = assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single));\n\n        assertEquals(\"Invalid auth token\", exception.getMessage());\n        assertEquals(\"type\", exception.type);\n        assertEquals(\"param\", exception.param);\n        assertEquals(\"code\", exception.code);\n        assertEquals(401, exception.statusCode);\n    }\n\n    @Test\n    void executeParseUnknownProperties() {\n        // error body contains one unknown property and no message\n        String errorBody = \"{\\\"error\\\":{\\\"unknown\\\":\\\"Invalid auth token\\\",\\\"type\\\":\\\"type\\\",\\\"param\\\":\\\"param\\\",\\\"code\\\":\\\"code\\\"}}\";\n        HttpException httpException = createException(errorBody, 401);\n        Single<CompletionResult> single = Single.error(httpException);\n\n        OpenAiHttpException exception = assertThrows(OpenAiHttpException.class, () -> OpenAiService.execute(single));\n        assertNull(exception.getMessage());\n        assertEquals(\"type\", exception.type);\n        assertEquals(\"param\", exception.param);\n        assertEquals(\"code\", exception.code);\n        assertEquals(401, exception.statusCode);\n    }\n\n    @Test\n    void executeNullErrorBodyThrowOriginalError() {\n        // exception with a successful response creates an error without an error body\n        HttpException httpException = new HttpException(Response.success(new CompletionResult()));\n        Single<CompletionResult> single = Single.error(httpException);\n\n        HttpException exception = assertThrows(HttpException.class, () -> OpenAiService.execute(single));\n    }\n\n    private HttpException createException(String errorBody, int code) {\n        ResponseBody body = ResponseBody.create(MediaType.get(\"application/json\"), errorBody);\n        Response<Void> response = Response.error(code, body);\n        return new HttpException(response);\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/EditTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.edit.EditRequest;\nimport com.theokanning.openai.edit.EditResult;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class EditTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void edit() throws OpenAiHttpException {\n        EditRequest request = EditRequest.builder()\n                .model(\"text-davinci-edit-001\")\n                .input(\"What day of the wek is it?\")\n                .instruction(\"Fix the spelling mistakes\")\n                .build();\n\n        EditResult result = service.createEdit(request);\n        assertNotNull(result.getChoices().get(0).getText());\n    }\n}\n", "\npublic class EditTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    com.theokanning.openai.service.OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void edit() throws OpenAiHttpException {\n        EditRequest request = EditRequest.builder()\n                .model(\"text-davinci-edit-001\")\n                .input(\"What day of the wek is it?\")\n                .instruction(\"Fix the spelling mistakes\")\n                .build();\n\n        EditResult result = service.createEdit(request);\n        assertNotNull(result.getChoices().get(0).getText());\n    }\n}\n"]}
{"filename": "service/src/test/java/com/theokanning/openai/service/CompletionTest.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.completion.CompletionChoice;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport com.theokanning.openai.service.OpenAiService;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.List;\n", "import java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\npublic class CompletionTest {\n\n    String token = System.getenv(\"OPENAI_TOKEN\");\n    OpenAiService service = new OpenAiService(token);\n\n    @Test\n    void createCompletion() {\n        CompletionRequest completionRequest = CompletionRequest.builder()\n                .model(\"ada\")\n                .prompt(\"Somebody once told me the world is gonna roll me\")\n                .echo(true)\n                .n(5)\n                .maxTokens(50)\n                .user(\"testing\")\n                .logitBias(new HashMap<>())\n                .logprobs(5)\n                .build();\n\n        List<CompletionChoice> choices = service.createCompletion(completionRequest).getChoices();\n        assertEquals(5, choices.size());\n        assertNotNull(choices.get(0).getLogprobs());\n    }\n}\n"]}
{"filename": "service/src/main/java/com/theokanning/openai/service/OpenAiService.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.theokanning.openai.DeleteResult;\nimport com.theokanning.openai.OpenAiError;\nimport com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.completion.CompletionRequest;", "import com.theokanning.openai.OpenAiHttpException;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport com.theokanning.openai.completion.CompletionResult;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatCompletionResult;\nimport com.theokanning.openai.edit.EditRequest;\nimport com.theokanning.openai.edit.EditResult;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport com.theokanning.openai.embedding.EmbeddingResult;\nimport com.theokanning.openai.file.File;", "import com.theokanning.openai.embedding.EmbeddingResult;\nimport com.theokanning.openai.file.File;\nimport com.theokanning.openai.finetune.FineTuneEvent;\nimport com.theokanning.openai.finetune.FineTuneRequest;\nimport com.theokanning.openai.finetune.FineTuneResult;\nimport com.theokanning.openai.image.CreateImageEditRequest;\nimport com.theokanning.openai.image.CreateImageRequest;\nimport com.theokanning.openai.image.CreateImageVariationRequest;\nimport com.theokanning.openai.image.ImageResult;\nimport com.theokanning.openai.model.Model;", "import com.theokanning.openai.image.ImageResult;\nimport com.theokanning.openai.model.Model;\nimport com.theokanning.openai.moderation.ModerationRequest;\nimport com.theokanning.openai.moderation.ModerationResult;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.TimeUnit;\n\nimport io.reactivex.Single;\nimport okhttp3.ConnectionPool;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.OkHttpClient;\nimport okhttp3.RequestBody;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.HttpException;", "import okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.HttpException;\nimport retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;\nimport retrofit2.converter.jackson.JacksonConverterFactory;\n\npublic class OpenAiService {\n\n    private static final String BASE_URL = \"https://api.openai.com/\";\n    private static final ObjectMapper errorMapper = defaultObjectMapper();\n\n    private final OpenAiAPI api;\n\n\n    /**\n     * \u5bf9sdk26\u4ee5\u4e0b\u7684\u8bbe\u5907\u8fdb\u884c\u4e86\u9002\u914d\n     * \u5e76\u505a\u4e86\u4e00\u4e9b\u5c0f\u5c0f\u7684\u4fee\u6539\u4f7f\u5176\u53ef\u4ee5\u81ea\u5b9a\u4e49BASE_URL\n     * <p>\n     * Creates a new OpenAiService that wraps OpenAiApi\n     *\n     * @param token OpenAi token string \"sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n     */\n    public OpenAiService(final String token, final String url, final Long timeout) {\n        this(buildApi(token, url, timeout));\n    }\n\n    /**\n     * Creates a new OpenAiService that wraps OpenAiApi.\n     * Use this if you need more customization.\n     *\n     * @param api OpenAiApi instance to use for all methods\n     */\n    public OpenAiService(final OpenAiAPI api) {\n        this.api = api;\n    }\n\n    public List<Model> listModels() {\n        return execute(api.listModels()).data;\n    }\n", "    public Model getModel(String modelId) {\n        return execute(api.getModel(modelId));\n    }\n\n    public CompletionResult createCompletion(CompletionRequest request) {\n        return execute(api.createCompletion(request));\n    }\n    \n    public ChatCompletionResult createChatCompletion(ChatCompletionRequest request) {\n        return execute(api.createChatCompletion(request));\n    }\n", "    public ChatCompletionResult createChatCompletion(ChatCompletionRequest request) {\n        return execute(api.createChatCompletion(request));\n    }\n\n    public EditResult createEdit(EditRequest request) {\n        return execute(api.createEdit(request));\n    }\n\n    public EmbeddingResult createEmbeddings(EmbeddingRequest request) {\n        return execute(api.createEmbeddings(request));\n    }\n\n    public List<File> listFiles() {\n        return execute(api.listFiles()).data;\n    }\n", "    public EmbeddingResult createEmbeddings(EmbeddingRequest request) {\n        return execute(api.createEmbeddings(request));\n    }\n\n    public List<File> listFiles() {\n        return execute(api.listFiles()).data;\n    }\n\n    public File uploadFile(String purpose, String filepath) {\n        java.io.File file = new java.io.File(filepath);\n        RequestBody purposeBody = RequestBody.create(okhttp3.MultipartBody.FORM, purpose);\n        RequestBody fileBody = RequestBody.create(MediaType.parse(\"text\"), file);\n        MultipartBody.Part body = MultipartBody.Part.createFormData(\"file\", filepath, fileBody);\n\n        return execute(api.uploadFile(purposeBody, body));\n    }\n", "    public File uploadFile(String purpose, String filepath) {\n        java.io.File file = new java.io.File(filepath);\n        RequestBody purposeBody = RequestBody.create(okhttp3.MultipartBody.FORM, purpose);\n        RequestBody fileBody = RequestBody.create(MediaType.parse(\"text\"), file);\n        MultipartBody.Part body = MultipartBody.Part.createFormData(\"file\", filepath, fileBody);\n\n        return execute(api.uploadFile(purposeBody, body));\n    }\n\n    public DeleteResult deleteFile(String fileId) {\n        return execute(api.deleteFile(fileId));\n    }\n", "    public DeleteResult deleteFile(String fileId) {\n        return execute(api.deleteFile(fileId));\n    }\n\n    public File retrieveFile(String fileId) {\n        return execute(api.retrieveFile(fileId));\n    }\n\n    public FineTuneResult createFineTune(FineTuneRequest request) {\n        return execute(api.createFineTune(request));\n    }\n", "    public FineTuneResult createFineTune(FineTuneRequest request) {\n        return execute(api.createFineTune(request));\n    }\n\n    public CompletionResult createFineTuneCompletion(CompletionRequest request) {\n        return execute(api.createFineTuneCompletion(request));\n    }\n\n    public List<FineTuneResult> listFineTunes() {\n        return execute(api.listFineTunes()).data;\n    }\n", "    public FineTuneResult retrieveFineTune(String fineTuneId) {\n        return execute(api.retrieveFineTune(fineTuneId));\n    }\n\n    public FineTuneResult cancelFineTune(String fineTuneId) {\n        return execute(api.cancelFineTune(fineTuneId));\n    }\n\n    public List<FineTuneEvent> listFineTuneEvents(String fineTuneId) {\n        return execute(api.listFineTuneEvents(fineTuneId)).data;\n    }\n", "    public DeleteResult deleteFineTune(String fineTuneId) {\n        return execute(api.deleteFineTune(fineTuneId));\n    }\n\n    public ImageResult createImage(CreateImageRequest request) {\n        return execute(api.createImage(request));\n    }\n\n    public ImageResult createImageEdit(CreateImageEditRequest request, String imagePath, String maskPath) {\n        java.io.File image = new java.io.File(imagePath);\n        java.io.File mask = null;", "    public ImageResult createImageEdit(CreateImageEditRequest request, String imagePath, String maskPath) {\n        java.io.File image = new java.io.File(imagePath);\n        java.io.File mask = null;\n        if (maskPath != null) {\n            mask = new java.io.File(maskPath);\n        }\n        return createImageEdit(request, image, mask);\n    }\n\n    public ImageResult createImageEdit(CreateImageEditRequest request, java.io.File image, java.io.File mask) {\n        RequestBody imageBody = RequestBody.create(MediaType.parse(\"image\"), image);\n\n        MultipartBody.Builder builder = new MultipartBody.Builder()\n                .setType(MediaType.get(\"multipart/form-data\"))\n                .addFormDataPart(\"prompt\", request.getPrompt())\n                .addFormDataPart(\"size\", request.getSize())\n                .addFormDataPart(\"response_format\", request.getResponseFormat())\n                .addFormDataPart(\"image\", \"image\", imageBody);\n", "    public ImageResult createImageEdit(CreateImageEditRequest request, java.io.File image, java.io.File mask) {\n        RequestBody imageBody = RequestBody.create(MediaType.parse(\"image\"), image);\n\n        MultipartBody.Builder builder = new MultipartBody.Builder()\n                .setType(MediaType.get(\"multipart/form-data\"))\n                .addFormDataPart(\"prompt\", request.getPrompt())\n                .addFormDataPart(\"size\", request.getSize())\n                .addFormDataPart(\"response_format\", request.getResponseFormat())\n                .addFormDataPart(\"image\", \"image\", imageBody);\n\n        if (request.getN() != null) {\n            builder.addFormDataPart(\"n\", request.getN().toString());\n        }\n", "        if (request.getN() != null) {\n            builder.addFormDataPart(\"n\", request.getN().toString());\n        }\n\n        if (mask != null) {\n            RequestBody maskBody = RequestBody.create(MediaType.parse(\"image\"), mask);\n            builder.addFormDataPart(\"mask\", \"mask\", maskBody);\n        }\n\n        return execute(api.createImageEdit(builder.build()));\n    }\n", "    public ImageResult createImageVariation(CreateImageVariationRequest request, String imagePath) {\n        java.io.File image = new java.io.File(imagePath);\n        return createImageVariation(request, image);\n    }\n\n    public ImageResult createImageVariation(CreateImageVariationRequest request, java.io.File image) {\n        RequestBody imageBody = RequestBody.create(MediaType.parse(\"image\"), image);\n\n        MultipartBody.Builder builder = new MultipartBody.Builder()\n                .setType(MediaType.get(\"multipart/form-data\"))\n                .addFormDataPart(\"size\", request.getSize())\n                .addFormDataPart(\"response_format\", request.getResponseFormat())\n                .addFormDataPart(\"image\", \"image\", imageBody);\n", "        if (request.getN() != null) {\n            builder.addFormDataPart(\"n\", request.getN().toString());\n        }\n\n        return execute(api.createImageVariation(builder.build()));\n    }\n\n    public ModerationResult createModeration(ModerationRequest request) {\n        return execute(api.createModeration(request));\n    }\n\n    /**\n     * Calls the Open AI api, returns the response, and parses error messages if the request fails\n     */\n    public static <T> T execute(Single<T> apiCall) {", "        try {\n            return apiCall.blockingGet();\n        } catch (HttpException e) {\n            try {\n                if (e.response() == null || e.response().errorBody() == null) {\n                    throw e;\n                }\n                String errorBody = e.response().errorBody().string();\n\n                OpenAiError error = errorMapper.readValue(errorBody, OpenAiError.class);\n                throw new OpenAiHttpException(error, e, e.code());\n            } catch (IOException ex) {\n                // couldn't parse OpenAI error\n                throw e;\n            }\n        }\n    }\n", "    public static OpenAiAPI buildApi(String token, String url, Long timeout) {\n        Objects.requireNonNull(token, \"OpenAI token required\");\n        ObjectMapper mapper = defaultObjectMapper();\n        OkHttpClient client = defaultClient(token, timeout);\n        Retrofit retrofit = defaultRetrofit(client, mapper, url);\n        return retrofit.create(OpenAiAPI.class);\n    }\n\n    public static ObjectMapper defaultObjectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n        return mapper;\n    }\n", "    public static ObjectMapper defaultObjectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n        return mapper;\n    }\n\n    public static OkHttpClient defaultClient(String token, Long timeout) {\n        return new OkHttpClient.Builder()\n                .addInterceptor(new AuthenticationInterceptor(token))\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS))\n                .readTimeout(timeout, TimeUnit.SECONDS)\n                .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BASIC))\n                .build();\n    }\n\n", "    public static OkHttpClient defaultClient(String token, Long timeout) {\n        return new OkHttpClient.Builder()\n                .addInterceptor(new AuthenticationInterceptor(token))\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS))\n                .readTimeout(timeout, TimeUnit.SECONDS)\n                .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BASIC))\n                .build();\n    }\n\n\n    public static Retrofit defaultRetrofit(OkHttpClient client, ObjectMapper mapper, String url) {\n        return new Retrofit.Builder()\n                .baseUrl(url)\n                .client(client)\n                .addConverterFactory(JacksonConverterFactory.create(mapper))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n    }\n", "    public static Retrofit defaultRetrofit(OkHttpClient client, ObjectMapper mapper, String url) {\n        return new Retrofit.Builder()\n                .baseUrl(url)\n                .client(client)\n                .addConverterFactory(JacksonConverterFactory.create(mapper))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n    }\n\n    public static Retrofit defaultRetrofit(OkHttpClient client, ObjectMapper mapper) {\n        return new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .client(client)\n                .addConverterFactory(JacksonConverterFactory.create(mapper))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n    }\n}\n", "    public static Retrofit defaultRetrofit(OkHttpClient client, ObjectMapper mapper) {\n        return new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .client(client)\n                .addConverterFactory(JacksonConverterFactory.create(mapper))\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .build();\n    }\n}\n"]}
{"filename": "service/src/main/java/com/theokanning/openai/service/AuthenticationInterceptor.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport okhttp3.Interceptor;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\nimport java.io.IOException;\n\n/**\n * OkHttp Interceptor that adds an authorization token header", "/**\n * OkHttp Interceptor that adds an authorization token header\n */\npublic class AuthenticationInterceptor implements Interceptor {\n\n    private final String token;\n\n    AuthenticationInterceptor(String token) {\n        this.token = token;\n    }\n\n    @Override", "    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request()\n                .newBuilder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .build();\n        return chain.proceed(request);\n    }\n}\n"]}
{"filename": "service/src/main/java/com/theokanning/openai/service/OpenAiAPI.java", "chunked_list": ["package com.theokanning.openai.service;\n\nimport com.theokanning.openai.DeleteResult;\nimport com.theokanning.openai.OpenAiResponse;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport com.theokanning.openai.completion.CompletionResult;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatCompletionResult;\nimport com.theokanning.openai.edit.EditRequest;\nimport com.theokanning.openai.edit.EditResult;", "import com.theokanning.openai.edit.EditRequest;\nimport com.theokanning.openai.edit.EditResult;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport com.theokanning.openai.embedding.EmbeddingResult;\nimport com.theokanning.openai.engine.Engine;\nimport com.theokanning.openai.file.File;\nimport com.theokanning.openai.finetune.FineTuneEvent;\nimport com.theokanning.openai.finetune.FineTuneRequest;\nimport com.theokanning.openai.finetune.FineTuneResult;\nimport com.theokanning.openai.image.CreateImageRequest;", "import com.theokanning.openai.finetune.FineTuneResult;\nimport com.theokanning.openai.image.CreateImageRequest;\nimport com.theokanning.openai.image.ImageResult;\nimport com.theokanning.openai.model.Model;\nimport com.theokanning.openai.moderation.ModerationRequest;\nimport com.theokanning.openai.moderation.ModerationResult;\n\nimport io.reactivex.Single;\nimport okhttp3.MultipartBody;\nimport okhttp3.RequestBody;", "import okhttp3.MultipartBody;\nimport okhttp3.RequestBody;\nimport retrofit2.http.Body;\nimport retrofit2.http.DELETE;\nimport retrofit2.http.GET;\nimport retrofit2.http.Multipart;\nimport retrofit2.http.POST;\nimport retrofit2.http.Part;\nimport retrofit2.http.Path;\n\npublic interface OpenAiAPI {\n\n    /**\n     * \u89e3\u51b3\u539fOpenAiApi\u7684Retrofit2 url\u62fc\u63a5\u95ee\u9898\n     */\n\n    @GET(\"v1/models\")\n    Single<OpenAiResponse<Model>> listModels();\n\n    @GET(\"v1/models/{model_id}\")\n    Single<Model> getModel(@Path(\"model_id\") String modelId);\n\n    @POST(\"v1/completions\")\n    Single<CompletionResult> createCompletion(@Body CompletionRequest request);\n\n    @POST(\"v1/chat/completions\")\n    Single<ChatCompletionResult> createChatCompletion(@Body ChatCompletionRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/completions\")\n    Single<CompletionResult> createCompletion(@Path(\"engine_id\") String engineId, @Body CompletionRequest request);\n\n    @POST(\"v1/edits\")\n    Single<EditResult> createEdit(@Body EditRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/edits\")\n    Single<EditResult> createEdit(@Path(\"engine_id\") String engineId, @Body EditRequest request);\n\n    @POST(\"v1/embeddings\")\n    Single<EmbeddingResult> createEmbeddings(@Body EmbeddingRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/embeddings\")\n    Single<EmbeddingResult> createEmbeddings(@Path(\"engine_id\") String engineId, @Body EmbeddingRequest request);\n\n    @GET(\"v1/files\")\n    Single<OpenAiResponse<File>> listFiles();\n\n    @Multipart\n    @POST(\"v1/files\")\n    Single<File> uploadFile(@Part(\"purpose\") RequestBody purpose, @Part MultipartBody.Part file);\n\n    @DELETE(\"v1/files/{file_id}\")\n    Single<DeleteResult> deleteFile(@Path(\"file_id\") String fileId);\n\n    @GET(\"v1/files/{file_id}\")\n    Single<File> retrieveFile(@Path(\"file_id\") String fileId);\n\n    @POST(\"v1/fine-tunes\")\n    Single<FineTuneResult> createFineTune(@Body FineTuneRequest request);\n\n    @POST(\"v1/completions\")\n    Single<CompletionResult> createFineTuneCompletion(@Body CompletionRequest request);\n\n    @GET(\"v1/fine-tunes\")\n    Single<OpenAiResponse<FineTuneResult>> listFineTunes();\n\n    @GET(\"v1/fine-tunes/{fine_tune_id}\")\n    Single<FineTuneResult> retrieveFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @POST(\"v1/fine-tunes/{fine_tune_id}/cancel\")\n    Single<FineTuneResult> cancelFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @GET(\"v1/fine-tunes/{fine_tune_id}/events\")\n    Single<OpenAiResponse<FineTuneEvent>> listFineTuneEvents(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @DELETE(\"v1/models/{fine_tune_id}\")\n    Single<DeleteResult> deleteFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @POST(\"v1/images/generations\")\n    Single<ImageResult> createImage(@Body CreateImageRequest request);\n\n    @POST(\"v1/images/edits\")\n    Single<ImageResult> createImageEdit(@Body RequestBody requestBody);\n\n    @POST(\"v1/images/variations\")\n    Single<ImageResult> createImageVariation(@Body RequestBody requestBody);\n\n    @POST(\"v1/moderations\")\n    Single<ModerationResult> createModeration(@Body ModerationRequest request);\n\n    @Deprecated\n    @GET(\"v1/engines\")\n    Single<OpenAiResponse<Engine>> getEngines();\n\n    @Deprecated\n    @GET(\"v1/engines/{engine_id}\")\n    Single<Engine> getEngine(@Path(\"engine_id\") String engineId);\n}\n", "import retrofit2.http.Path;\n\npublic interface OpenAiAPI {\n\n    /**\n     * \u89e3\u51b3\u539fOpenAiApi\u7684Retrofit2 url\u62fc\u63a5\u95ee\u9898\n     */\n\n    @GET(\"v1/models\")\n    Single<OpenAiResponse<Model>> listModels();\n\n    @GET(\"v1/models/{model_id}\")\n    Single<Model> getModel(@Path(\"model_id\") String modelId);\n\n    @POST(\"v1/completions\")\n    Single<CompletionResult> createCompletion(@Body CompletionRequest request);\n\n    @POST(\"v1/chat/completions\")\n    Single<ChatCompletionResult> createChatCompletion(@Body ChatCompletionRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/completions\")\n    Single<CompletionResult> createCompletion(@Path(\"engine_id\") String engineId, @Body CompletionRequest request);\n\n    @POST(\"v1/edits\")\n    Single<EditResult> createEdit(@Body EditRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/edits\")\n    Single<EditResult> createEdit(@Path(\"engine_id\") String engineId, @Body EditRequest request);\n\n    @POST(\"v1/embeddings\")\n    Single<EmbeddingResult> createEmbeddings(@Body EmbeddingRequest request);\n\n    @Deprecated\n    @POST(\"v1/engines/{engine_id}/embeddings\")\n    Single<EmbeddingResult> createEmbeddings(@Path(\"engine_id\") String engineId, @Body EmbeddingRequest request);\n\n    @GET(\"v1/files\")\n    Single<OpenAiResponse<File>> listFiles();\n\n    @Multipart\n    @POST(\"v1/files\")\n    Single<File> uploadFile(@Part(\"purpose\") RequestBody purpose, @Part MultipartBody.Part file);\n\n    @DELETE(\"v1/files/{file_id}\")\n    Single<DeleteResult> deleteFile(@Path(\"file_id\") String fileId);\n\n    @GET(\"v1/files/{file_id}\")\n    Single<File> retrieveFile(@Path(\"file_id\") String fileId);\n\n    @POST(\"v1/fine-tunes\")\n    Single<FineTuneResult> createFineTune(@Body FineTuneRequest request);\n\n    @POST(\"v1/completions\")\n    Single<CompletionResult> createFineTuneCompletion(@Body CompletionRequest request);\n\n    @GET(\"v1/fine-tunes\")\n    Single<OpenAiResponse<FineTuneResult>> listFineTunes();\n\n    @GET(\"v1/fine-tunes/{fine_tune_id}\")\n    Single<FineTuneResult> retrieveFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @POST(\"v1/fine-tunes/{fine_tune_id}/cancel\")\n    Single<FineTuneResult> cancelFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @GET(\"v1/fine-tunes/{fine_tune_id}/events\")\n    Single<OpenAiResponse<FineTuneEvent>> listFineTuneEvents(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @DELETE(\"v1/models/{fine_tune_id}\")\n    Single<DeleteResult> deleteFineTune(@Path(\"fine_tune_id\") String fineTuneId);\n\n    @POST(\"v1/images/generations\")\n    Single<ImageResult> createImage(@Body CreateImageRequest request);\n\n    @POST(\"v1/images/edits\")\n    Single<ImageResult> createImageEdit(@Body RequestBody requestBody);\n\n    @POST(\"v1/images/variations\")\n    Single<ImageResult> createImageVariation(@Body RequestBody requestBody);\n\n    @POST(\"v1/moderations\")\n    Single<ModerationResult> createModeration(@Body ModerationRequest request);\n\n    @Deprecated\n    @GET(\"v1/engines\")\n    Single<OpenAiResponse<Engine>> getEngines();\n\n    @Deprecated\n    @GET(\"v1/engines/{engine_id}\")\n    Single<Engine> getEngine(@Path(\"engine_id\") String engineId);\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_java.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_java {\n\n  @NotNull", "@Extend(\"clike\")\npublic class Prism_java {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Token keyword = token(\"keyword\", pattern(compile(\"\\\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\\\b\")));\n\n    final Prism4j.Grammar java = GrammarUtils.extend(GrammarUtils.require(prism4j, \"clike\"), \"java\",\n      keyword,\n      token(\"number\", pattern(compile(\"\\\\b0b[01]+\\\\b|\\\\b0x[\\\\da-f]*\\\\.?[\\\\da-fp-]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?[df]?\", CASE_INSENSITIVE))),\n      token(\"operator\", pattern(\n        compile(\"(^|[^.])(?:\\\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\\\|[|=]?|\\\\*=?|\\\\/=?|%=?|\\\\^=?|[?:~])\", MULTILINE),\n        true\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(java, \"function\",\n      token(\"annotation\", pattern(\n        compile(\"(^|[^.])@\\\\w+\"),\n        true,\n        false,\n        \"punctuation\"\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(java, \"class-name\",\n      token(\"generics\", pattern(\n        compile(\"<\\\\s*\\\\w+(?:\\\\.\\\\w+)?(?:\\\\s*,\\\\s*\\\\w+(?:\\\\.\\\\w+)?)*>\", CASE_INSENSITIVE),\n        false,\n        false,\n        \"function\",\n        grammar(\n          \"inside\",\n          keyword,\n          token(\"punctuation\", pattern(compile(\"[<>(),.:]\")))\n        )\n      ))\n    );\n\n    return java;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_clojure.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_clojure {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"clojure\",\n      token(\"comment\", pattern(compile(\";+.*\"))),\n      token(\"string\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"\"))),\n      token(\"operator\", pattern(compile(\"(?:::|[:|'])\\\\b[a-z][\\\\w*+!?-]*\\\\b\", CASE_INSENSITIVE))),\n      token(\"keyword\",\n        pattern(\n          compile(\"([^\\\\w+*'?-])(?:def|if|do|let|\\\\.\\\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\\\.|new|set!|def\\\\-|defn|defn\\\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\\\*|\\\\+|\\\\-|\\\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\\\?|ensure|eval|every\\\\?|false\\\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\\\?|new|newline|next|nil\\\\?|node|not|not-any\\\\?|not-every\\\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\\\?|split-at|split-with|str|string\\\\?|struct|struct-map|subs|subvec|symbol|symbol\\\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\\\?|vector|vector-zip|vector\\\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\\\?|zipmap|zipper)(?=[^\\\\w+*'?-])\"),\n          true\n        )\n      ),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false|nil)\\\\b\"))),\n      token(\"number\", pattern(compile(\"\\\\b[0-9A-Fa-f]+\\\\b\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\](),]\")))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"clojure\",\n      token(\"comment\", pattern(compile(\";+.*\"))),\n      token(\"string\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"\"))),\n      token(\"operator\", pattern(compile(\"(?:::|[:|'])\\\\b[a-z][\\\\w*+!?-]*\\\\b\", CASE_INSENSITIVE))),\n      token(\"keyword\",\n        pattern(\n          compile(\"([^\\\\w+*'?-])(?:def|if|do|let|\\\\.\\\\.|quote|var|->>|->|fn|loop|recur|throw|try|monitor-enter|\\\\.|new|set!|def\\\\-|defn|defn\\\\-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|==|defrecord|>=|deftype|<=|defproject|ns|\\\\*|\\\\+|\\\\-|\\\\/|<|=|>|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\\\\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\\\?|ensure|eval|every\\\\?|false\\\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\\\\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\\\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\\\\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\\\\?|new|newline|next|nil\\\\?|node|not|not-any\\\\?|not-every\\\\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\\\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\\\?|split-at|split-with|str|string\\\\?|struct|struct-map|subs|subvec|symbol|symbol\\\\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\\\\?|union|up|update-proxy|val|vals|var-get|var-set|var\\\\?|vector|vector-zip|vector\\\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\\\?|zipmap|zipper)(?=[^\\\\w+*'?-])\"),\n          true\n        )\n      ),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false|nil)\\\\b\"))),\n      token(\"number\", pattern(compile(\"\\\\b[0-9A-Fa-f]+\\\\b\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\](),]\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_c.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_c {\n\n  @NotNull", "@Extend(\"clike\")\npublic class Prism_c {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar c = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"c\",\n      new GrammarUtils.TokenFilter() {\n        @Override", "        public boolean test(@NotNull Prism4j.Token token) {\n          final String name = token.name();\n          return !\"class-name\".equals(name) && !\"boolean\".equals(name);\n        }\n      },\n      token(\"keyword\", pattern(compile(\"\\\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\\\b\"))),\n      token(\"operator\", pattern(compile(\"-[>-]?|\\\\+\\\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\\\|\\\\|?|[~^%?*\\\\/]\"))),\n      token(\"number\", pattern(compile(\"(?:\\\\b0x[\\\\da-f]+|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?)[ful]*\", CASE_INSENSITIVE)))\n    );\n\n    GrammarUtils.insertBeforeToken(c, \"string\",\n      token(\"macro\", pattern(\n        compile(\"(^\\\\s*)#\\\\s*[a-z]+(?:[^\\\\r\\\\n\\\\\\\\]|\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S]))*\", CASE_INSENSITIVE | MULTILINE),\n        true,\n        false,\n        \"property\",\n        grammar(\"inside\",\n          token(\"string\", pattern(compile(\"(#\\\\s*include\\\\s*)(?:<.+?>|(\\\"|')(?:\\\\\\\\?.)+?\\\\2)\"), true)),\n          token(\"directive\", pattern(\n            compile(\"(#\\\\s*)\\\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\\\b\"),\n            true,\n            false,\n            \"keyword\"\n          ))\n        )\n      )),\n      token(\"constant\", pattern(compile(\"\\\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\\\b\")))\n    );\n\n    return c;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_git.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_git {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"git\",\n      token(\"comment\", pattern(compile(\"^#.*\", MULTILINE))),\n      token(\"deleted\", pattern(compile(\"^[-\u2013].*\", MULTILINE))),\n      token(\"inserted\", pattern(compile(\"^\\\\+.*\", MULTILINE))),\n      token(\"string\", pattern(compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\", MULTILINE))),\n      token(\"command\", pattern(\n        compile(\"^.*\\\\$ git .*$\", MULTILINE),\n        false,\n        false,\n        null,\n        grammar(\"inside\",\n          token(\"parameter\", pattern(compile(\"\\\\s--?\\\\w+\", MULTILINE)))\n        )\n      )),\n      token(\"coord\", pattern(compile(\"^@@.*@@$\", MULTILINE))),\n      token(\"commit_sha1\", pattern(compile(\"^commit \\\\w{40}$\", MULTILINE)))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"git\",\n      token(\"comment\", pattern(compile(\"^#.*\", MULTILINE))),\n      token(\"deleted\", pattern(compile(\"^[-\u2013].*\", MULTILINE))),\n      token(\"inserted\", pattern(compile(\"^\\\\+.*\", MULTILINE))),\n      token(\"string\", pattern(compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\", MULTILINE))),\n      token(\"command\", pattern(\n        compile(\"^.*\\\\$ git .*$\", MULTILINE),\n        false,\n        false,\n        null,\n        grammar(\"inside\",\n          token(\"parameter\", pattern(compile(\"\\\\s--?\\\\w+\", MULTILINE)))\n        )\n      )),\n      token(\"coord\", pattern(compile(\"^@@.*@@$\", MULTILINE))),\n      token(\"commit_sha1\", pattern(compile(\"^commit \\\\w{40}$\", MULTILINE)))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_latex.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.regex.Pattern;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_latex {\n\n  @NotNull", "public class Prism_latex {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Pattern funcPattern = compile(\"\\\\\\\\(?:[^a-z()\\\\[\\\\]]|[a-z*]+)\", CASE_INSENSITIVE);\n\n    final Prism4j.Grammar insideEqu = grammar(\"inside\",\n      token(\"equation-command\", pattern(funcPattern, false, false, \"regex\"))\n    );\n\n    return grammar(\"latex\",\n      token(\"comment\", pattern(compile(\"%.*\", MULTILINE))),\n      token(\"cdata\", pattern(\n        compile(\"(\\\\\\\\begin\\\\{((?:verbatim|lstlisting)\\\\*?)\\\\})[\\\\s\\\\S]*?(?=\\\\\\\\end\\\\{\\\\2\\\\})\"),\n        true\n        )\n      ),\n      token(\"equation\",\n        pattern(\n          compile(\"\\\\$(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\$])*\\\\$|\\\\\\\\\\\\([\\\\s\\\\S]*?\\\\\\\\\\\\)|\\\\\\\\\\\\[[\\\\s\\\\S]*?\\\\\\\\\\\\]\"),\n          false,\n          false,\n          \"string\",\n          insideEqu\n        ),\n        pattern(\n          compile(\"(\\\\\\\\begin\\\\{((?:equation|math|eqnarray|align|multline|gather)\\\\*?)\\\\})[\\\\s\\\\S]*?(?=\\\\\\\\end\\\\{\\\\2\\\\})\"),\n          true,\n          false,\n          \"string\",\n          insideEqu\n        )\n      ),\n      token(\"keyword\", pattern(\n        compile(\"(\\\\\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\\\[[^\\\\]]+\\\\])?\\\\{)[^}]+(?=\\\\})\"),\n        true\n      )),\n      token(\"url\", pattern(\n        compile(\"(\\\\\\\\url\\\\{)[^}]+(?=\\\\})\"),\n        true\n      )),\n      token(\"headline\", pattern(\n        compile(\"(\\\\\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\\\*?(?:\\\\[[^\\\\]]+\\\\])?\\\\{)[^}]+(?=\\\\}(?:\\\\[[^\\\\]]+\\\\])?)\"),\n        true,\n        false,\n        \"class-name\"\n      )),\n      token(\"function\", pattern(\n        funcPattern,\n        false,\n        false,\n        \"selector\"\n      )),\n      token(\"punctuation\", pattern(compile(\"[\\\\[\\\\]{}&]\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_css.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Modify;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Modify(\"markup\")\npublic abstract class Prism_css {\n\n  // todo: really important one..\n  // before a language is requested (fro example css)\n  // it won't be initialized (so we won't modify markup to highlight css) before it was requested...\n\n  @NotNull", "public abstract class Prism_css {\n\n  // todo: really important one..\n  // before a language is requested (fro example css)\n  // it won't be initialized (so we won't modify markup to highlight css) before it was requested...\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar grammar = grammar(\n      \"css\",\n      token(\"comment\", pattern(compile(\"\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/\"))),\n      token(\n        \"atrule\",\n        pattern(\n          compile(\"@[\\\\w-]+?.*?(?:;|(?=\\\\s*\\\\{))\", CASE_INSENSITIVE),\n          false,\n          false,\n          null,\n          grammar(\n            \"inside\",\n            token(\"rule\", pattern(compile(\"@[\\\\w-]+\")))\n          )\n        )\n      ),\n      token(\n        \"url\",\n        pattern(compile(\"url\\\\((?:([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1|.*?)\\\\)\", CASE_INSENSITIVE))\n      ),\n      token(\"selector\", pattern(compile(\"[^{}\\\\s][^{};]*?(?=\\\\s*\\\\{)\"))),\n      token(\n        \"string\",\n        pattern(compile(\"(\\\"|')(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\n        \"property\",\n        pattern(compile(\"[-_a-z\\\\xA0-\\\\uFFFF][-\\\\w\\\\xA0-\\\\uFFFF]*(?=\\\\s*:)\", CASE_INSENSITIVE))\n      ),\n      token(\"important\", pattern(compile(\"\\\\B!important\\\\b\", CASE_INSENSITIVE))),\n      token(\"function\", pattern(compile(\"[-a-z0-9]+(?=\\\\()\", CASE_INSENSITIVE))),\n      token(\"punctuation\", pattern(compile(\"[(){};:]\")))\n    );\n\n    // can we maybe add some helper to specify simplified location?\n\n    // now we need to put the all tokens from grammar inside `atrule` (except the `atrule` of cause)\n    final Prism4j.Token atrule = grammar.tokens().get(1);\n    final Prism4j.Grammar inside = GrammarUtils.findFirstInsideGrammar(atrule);", "    if (inside != null) {\n      for (Prism4j.Token token : grammar.tokens()) {\n        if (!\"atrule\".equals(token.name())) {\n          inside.tokens().add(token);\n        }\n      }\n    }\n\n    final Prism4j.Grammar markup = prism4j.grammar(\"markup\");\n    if (markup != null) {\n      GrammarUtils.insertBeforeToken(markup, \"tag\",\n        token(\n          \"style\",\n          pattern(\n            compile(\"(<style[\\\\s\\\\S]*?>)[\\\\s\\\\S]*?(?=<\\\\/style>)\", CASE_INSENSITIVE),\n            true,\n            true,\n            \"language-css\",\n            grammar\n          )\n        )\n      );\n\n      // important thing here is to clone found grammar\n      // otherwise we will have stackoverflow (inside tag references style-attr, which\n      // references inside tag, etc)\n      final Prism4j.Grammar markupTagInside;\n      {\n        Prism4j.Grammar _temp = null;\n        final Prism4j.Token token = GrammarUtils.findToken(markup, \"tag\");", "    if (markup != null) {\n      GrammarUtils.insertBeforeToken(markup, \"tag\",\n        token(\n          \"style\",\n          pattern(\n            compile(\"(<style[\\\\s\\\\S]*?>)[\\\\s\\\\S]*?(?=<\\\\/style>)\", CASE_INSENSITIVE),\n            true,\n            true,\n            \"language-css\",\n            grammar\n          )\n        )\n      );\n\n      // important thing here is to clone found grammar\n      // otherwise we will have stackoverflow (inside tag references style-attr, which\n      // references inside tag, etc)\n      final Prism4j.Grammar markupTagInside;\n      {\n        Prism4j.Grammar _temp = null;\n        final Prism4j.Token token = GrammarUtils.findToken(markup, \"tag\");", "        if (token != null) {\n          _temp = GrammarUtils.findFirstInsideGrammar(token);\n          if (_temp != null) {\n            _temp = GrammarUtils.clone(_temp);\n          }\n        }\n        markupTagInside = _temp;\n      }\n\n      GrammarUtils.insertBeforeToken(markup, \"tag/attr-value\",\n        token(\n          \"style-attr\",\n          pattern(\n            compile(\"\\\\s*style=(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1\", CASE_INSENSITIVE),\n            false,\n            false,\n            \"language-css\",\n            grammar(\n              \"inside\",\n              token(\n                \"attr-name\",\n                pattern(\n                  compile(\"^\\\\s*style\", CASE_INSENSITIVE),\n                  false,\n                  false,\n                  null,\n                  markupTagInside\n                )\n              ),\n              token(\"punctuation\", pattern(compile(\"^\\\\s*=\\\\s*['\\\"]|['\\\"]\\\\s*$\"))),\n              token(\n                \"attr-value\",\n                pattern(\n                  compile(\".+\", CASE_INSENSITIVE),\n                  false,\n                  false,\n                  null,\n                  grammar\n                )\n              )\n\n            )\n          )\n        )\n      );\n    }\n\n    return grammar;\n  }\n\n  private Prism_css() {\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_sql.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_sql {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"sql\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|(?:--|\\\\/\\\\/|#).*)\"),\n        true\n      )),\n      token(\"string\", pattern(\n        compile(\"(^|[^@\\\\\\\\])(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\2)[^\\\\\\\\])*\\\\2\"),\n        true,\n        true\n      )),\n      token(\"variable\", pattern(compile(\"@[\\\\w.$]+|@([\\\"'`])(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])+\\\\1\"))),\n      token(\"function\", pattern(\n        compile(\"\\\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\\\s*\\\\()\", CASE_INSENSITIVE)\n      )),\n      token(\"keyword\", pattern(\n        compile(\"\\\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"boolean\", pattern(\n        compile(\"\\\\b(?:TRUE|FALSE|NULL)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"number\", pattern(\n        compile(\"\\\\b0x[\\\\da-f]+\\\\b|\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"operator\", pattern(\n        compile(\"[-+*\\\\/=%^~]|&&?|\\\\|\\\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"punctuation\", pattern(compile(\"[;\\\\[\\\\]()`,.]\")))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"sql\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/|(?:--|\\\\/\\\\/|#).*)\"),\n        true\n      )),\n      token(\"string\", pattern(\n        compile(\"(^|[^@\\\\\\\\])(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\2)[^\\\\\\\\])*\\\\2\"),\n        true,\n        true\n      )),\n      token(\"variable\", pattern(compile(\"@[\\\\w.$]+|@([\\\"'`])(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])+\\\\1\"))),\n      token(\"function\", pattern(\n        compile(\"\\\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\\\s*\\\\()\", CASE_INSENSITIVE)\n      )),\n      token(\"keyword\", pattern(\n        compile(\"\\\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"boolean\", pattern(\n        compile(\"\\\\b(?:TRUE|FALSE|NULL)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"number\", pattern(\n        compile(\"\\\\b0x[\\\\da-f]+\\\\b|\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"operator\", pattern(\n        compile(\"[-+*\\\\/=%^~]|&&?|\\\\|\\\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"punctuation\", pattern(compile(\"[;\\\\[\\\\]()`,.]\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_json.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Aliases;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;", "import static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Aliases(\"jsonp\")\npublic class Prism_json {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\n      \"json\",\n      token(\"property\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?=\\\\s*:)\", CASE_INSENSITIVE))),\n      token(\"string\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?!\\\\s*:)\"), false, true)),\n      token(\"number\", pattern(compile(\"\\\\b0x[\\\\dA-Fa-f]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\]);,]\"))),\n      // not sure about this one...\n      token(\"operator\", pattern(compile(\":\"))),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\", CASE_INSENSITIVE))),\n      token(\"null\", pattern(compile(\"\\\\bnull\\\\b\", CASE_INSENSITIVE)))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\n      \"json\",\n      token(\"property\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?=\\\\s*:)\", CASE_INSENSITIVE))),\n      token(\"string\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?!\\\\s*:)\"), false, true)),\n      token(\"number\", pattern(compile(\"\\\\b0x[\\\\dA-Fa-f]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\]);,]\"))),\n      // not sure about this one...\n      token(\"operator\", pattern(compile(\":\"))),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\", CASE_INSENSITIVE))),\n      token(\"null\", pattern(compile(\"\\\\bnull\\\\b\", CASE_INSENSITIVE)))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_brainfuck.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;", "import static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_brainfuck {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"brainfuck\",\n      token(\"pointer\", pattern(compile(\"<|>\"), false, false, \"keyword\")),\n      token(\"increment\", pattern(compile(\"\\\\+\"), false, false, \"inserted\")),\n      token(\"decrement\", pattern(compile(\"-\"), false, false, \"deleted\")),\n      token(\"branching\", pattern(compile(\"\\\\[|\\\\]\"), false, false, \"important\")),\n      token(\"operator\", pattern(compile(\"[.,]\"))),\n      token(\"comment\", pattern(compile(\"\\\\S+\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_markdown.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.MULTILINE;", "\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"markup\")\npublic class Prism_markdown {\n\n  @NotNull", "@Extend(\"markup\")\npublic class Prism_markdown {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar markdown = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"markup\"),\n      \"markdown\"\n    );\n\n    final Prism4j.Token bold = token(\"bold\", pattern(\n      compile(\"(^|[^\\\\\\\\])(\\\\*\\\\*|__)(?:(?:\\\\r?\\\\n|\\\\r)(?!\\\\r?\\\\n|\\\\r)|.)+?\\\\2\"),\n      true,\n      false,\n      null,\n      grammar(\"inside\", token(\"punctuation\", pattern(compile(\"^\\\\*\\\\*|^__|\\\\*\\\\*$|__$\"))))\n    ));\n\n    final Prism4j.Token italic = token(\"italic\", pattern(\n      compile(\"(^|[^\\\\\\\\])([*_])(?:(?:\\\\r?\\\\n|\\\\r)(?!\\\\r?\\\\n|\\\\r)|.)+?\\\\2\"),\n      true,\n      false,\n      null,\n      grammar(\"inside\", token(\"punctuation\", pattern(compile(\"^[*_]|[*_]$\"))))\n    ));\n\n    final Prism4j.Token url = token(\"url\", pattern(\n      compile(\"!?\\\\[[^\\\\]]+\\\\](?:\\\\([^\\\\s)]+(?:[\\\\t ]+\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\")?\\\\)| ?\\\\[[^\\\\]\\\\n]*\\\\])\"),\n      false,\n      false,\n      null,\n      grammar(\"inside\",\n        token(\"variable\", pattern(compile(\"(!?\\\\[)[^\\\\]]+(?=\\\\]$)\"), true)),\n        token(\"string\", pattern(compile(\"\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"(?=\\\\)$)\")))\n      )\n    ));\n\n    GrammarUtils.insertBeforeToken(markdown, \"prolog\",\n      token(\"blockquote\", pattern(compile(\"^>(?:[\\\\t ]*>)*\", MULTILINE))),\n      token(\"code\",\n        pattern(compile(\"^(?: {4}|\\\\t).+\", MULTILINE), false, false, \"keyword\"),\n        pattern(compile(\"``.+?``|`[^`\\\\n]+`\"), false, false, \"keyword\")\n      ),\n      token(\n        \"title\",\n        pattern(\n          compile(\"\\\\w+.*(?:\\\\r?\\\\n|\\\\r)(?:==+|--+)\"),\n          false,\n          false,\n          \"important\",\n          grammar(\"inside\", token(\"punctuation\", pattern(compile(\"==+$|--+$\"))))\n        ),\n        pattern(\n          compile(\"(^\\\\s*)#+.+\", MULTILINE),\n          true,\n          false,\n          \"important\",\n          grammar(\"inside\", token(\"punctuation\", pattern(compile(\"^#+|#+$\"))))\n        )\n      ),\n      token(\"hr\", pattern(\n        compile(\"(^\\\\s*)([*-])(?:[\\\\t ]*\\\\2){2,}(?=\\\\s*$)\", MULTILINE),\n        true,\n        false,\n        \"punctuation\"\n      )),\n      token(\"list\", pattern(\n        compile(\"(^\\\\s*)(?:[*+-]|\\\\d+\\\\.)(?=[\\\\t ].)\", MULTILINE),\n        true,\n        false,\n        \"punctuation\"\n      )),\n      token(\"url-reference\", pattern(\n        compile(\"!?\\\\[[^\\\\]]+\\\\]:[\\\\t ]+(?:\\\\S+|<(?:\\\\\\\\.|[^>\\\\\\\\])+>)(?:[\\\\t ]+(?:\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"|'(?:\\\\\\\\.|[^'\\\\\\\\])*'|\\\\((?:\\\\\\\\.|[^)\\\\\\\\])*\\\\)))?\"),\n        false,\n        false,\n        \"url\",\n        grammar(\"inside\",\n          token(\"variable\", pattern(compile(\"^(!?\\\\[)[^\\\\]]+\"), true)),\n          token(\"string\", pattern(compile(\"(?:\\\"(?:\\\\\\\\.|[^\\\"\\\\\\\\])*\\\"|'(?:\\\\\\\\.|[^'\\\\\\\\])*'|\\\\((?:\\\\\\\\.|[^)\\\\\\\\])*\\\\))$\"))),\n          token(\"punctuation\", pattern(compile(\"^[\\\\[\\\\]!:]|[<>]\")))\n        )\n      )),\n      bold,\n      italic,\n      url\n    );\n\n    add(GrammarUtils.findFirstInsideGrammar(bold), url, italic);\n    add(GrammarUtils.findFirstInsideGrammar(italic), url, bold);\n\n    return markdown;\n  }\n\n  private static void add(@Nullable Prism4j.Grammar grammar, @NotNull Prism4j.Token first, @NotNull Prism4j.Token second) {", "    if (grammar != null) {\n      grammar.tokens().add(first);\n      grammar.tokens().add(second);\n    }\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_go.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_go {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar go = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"go\",\n      new GrammarUtils.TokenFilter() {\n        @Override", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar go = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"go\",\n      new GrammarUtils.TokenFilter() {\n        @Override\n        public boolean test(@NotNull Prism4j.Token token) {\n          return !\"class-name\".equals(token.name());\n        }\n      },\n      token(\"keyword\", pattern(compile(\"\\\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\\\b\"))),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:_|iota|nil|true|false)\\\\b\"))),\n      token(\"operator\", pattern(compile(\"[*\\\\/%^!=]=?|\\\\+[=+]?|-[=-]?|\\\\|[=|]?|&(?:=|&|\\\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\\\.\\\\.\\\\.\"))),\n      token(\"number\", pattern(compile(\"(?:\\\\b0x[a-f\\\\d]+|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)i?\", CASE_INSENSITIVE))),\n      token(\"string\", pattern(\n        compile(\"([\\\"'`])(\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1\"),\n        false,\n        true\n      ))\n    );\n\n    // clike doesn't have builtin\n    GrammarUtils.insertBeforeToken(go, \"boolean\",\n      token(\"builtin\", pattern(compile(\"\\\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\\\b\")))\n    );\n\n    return go;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_dart.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_dart {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar dart = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"dart\",\n      token(\"string\",\n        pattern(compile(\"r?(\\\"\\\"\\\"|''')[\\\\s\\\\S]*?\\\\1\"), false, true),\n        pattern(compile(\"r?(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\"keyword\",\n        pattern(compile(\"\\\\b(?:async|sync|yield)\\\\*\")),\n        pattern(compile(\"\\\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\\\b\"))\n      ),\n      token(\"operator\", pattern(compile(\"\\\\bis!|\\\\b(?:as|is)\\\\b|\\\\+\\\\+|--|&&|\\\\|\\\\||<<=?|>>=?|~(?:\\\\/=?)?|[+\\\\-*\\\\/%&^|=!<>]=?|\\\\?\")))\n    );\n\n    GrammarUtils.insertBeforeToken(dart, \"function\",\n      token(\"metadata\", pattern(compile(\"@\\\\w+\"), false, false, \"symbol\"))\n    );\n\n    return dart;\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar dart = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"dart\",\n      token(\"string\",\n        pattern(compile(\"r?(\\\"\\\"\\\"|''')[\\\\s\\\\S]*?\\\\1\"), false, true),\n        pattern(compile(\"r?(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\"keyword\",\n        pattern(compile(\"\\\\b(?:async|sync|yield)\\\\*\")),\n        pattern(compile(\"\\\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|external|extends|factory|final|finally|for|get|if|implements|import|in|library|new|null|operator|part|rethrow|return|set|static|super|switch|this|throw|try|typedef|var|void|while|with|yield)\\\\b\"))\n      ),\n      token(\"operator\", pattern(compile(\"\\\\bis!|\\\\b(?:as|is)\\\\b|\\\\+\\\\+|--|&&|\\\\|\\\\||<<=?|>>=?|~(?:\\\\/=?)?|[+\\\\-*\\\\/%&^|=!<>]=?|\\\\?\")))\n    );\n\n    GrammarUtils.insertBeforeToken(dart, \"function\",\n      token(\"metadata\", pattern(compile(\"@\\\\w+\"), false, false, \"symbol\"))\n    );\n\n    return dart;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_python.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_python {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"python\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])#.*\"),\n        true\n      )),\n      token(\"triple-quoted-string\", pattern(\n        compile(\"(\\\"\\\"\\\"|''')[\\\\s\\\\S]+?\\\\1\"),\n        false,\n        true,\n        \"string\"\n      )),\n      token(\"string\", pattern(\n        compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"),\n        false,\n        true\n      )),\n      token(\"function\", pattern(\n        compile(\"((?:^|\\\\s)def[ \\\\t]+)[a-zA-Z_]\\\\w*(?=\\\\s*\\\\()\"),\n        true\n      )),\n      token(\"class-name\", pattern(\n        compile(\"(\\\\bclass\\\\s+)\\\\w+\", CASE_INSENSITIVE),\n        true\n      )),\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\\\b\"))),\n      token(\"builtin\", pattern(compile(\"\\\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\\\b\"))),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:True|False|None)\\\\b\"))),\n      token(\"number\", pattern(\n        compile(\"(?:\\\\b(?=\\\\d)|\\\\B(?=\\\\.))(?:0[bo])?(?:(?:\\\\d|0x[\\\\da-f])[\\\\da-f]*\\\\.?\\\\d*|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?j?\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"operator\", pattern(compile(\"[-+%=]=?|!=|\\\\*\\\\*?=?|\\\\/\\\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\\\b(?:or|and|not)\\\\b\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\];(),.:]\")))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"python\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])#.*\"),\n        true\n      )),\n      token(\"triple-quoted-string\", pattern(\n        compile(\"(\\\"\\\"\\\"|''')[\\\\s\\\\S]+?\\\\1\"),\n        false,\n        true,\n        \"string\"\n      )),\n      token(\"string\", pattern(\n        compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"),\n        false,\n        true\n      )),\n      token(\"function\", pattern(\n        compile(\"((?:^|\\\\s)def[ \\\\t]+)[a-zA-Z_]\\\\w*(?=\\\\s*\\\\()\"),\n        true\n      )),\n      token(\"class-name\", pattern(\n        compile(\"(\\\\bclass\\\\s+)\\\\w+\", CASE_INSENSITIVE),\n        true\n      )),\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\\\b\"))),\n      token(\"builtin\", pattern(compile(\"\\\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\\\b\"))),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:True|False|None)\\\\b\"))),\n      token(\"number\", pattern(\n        compile(\"(?:\\\\b(?=\\\\d)|\\\\B(?=\\\\.))(?:0[bo])?(?:(?:\\\\d|0x[\\\\da-f])[\\\\da-f]*\\\\.?\\\\d*|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?j?\\\\b\", CASE_INSENSITIVE)\n      )),\n      token(\"operator\", pattern(compile(\"[-+%=]=?|!=|\\\\*\\\\*?=?|\\\\/\\\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\\\b(?:or|and|not)\\\\b\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\];(),.:]\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_cpp.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"c\")\npublic class Prism_cpp {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar cpp = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"c\"),\n      \"cpp\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\\\b\"))),\n      token(\"operator\", pattern(compile(\"--?|\\\\+\\\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\\\^|~|%|&{1,2}|\\\\|\\\\|?|\\\\?|\\\\*|\\\\/|\\\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\\\b\")))\n    );\n\n    // in prism-js cpp is extending c, but c has not booleans... (like classes)\n    GrammarUtils.insertBeforeToken(cpp, \"function\",\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\")))\n    );\n\n    GrammarUtils.insertBeforeToken(cpp, \"keyword\",\n      token(\"class-name\", pattern(compile(\"(class\\\\s+)\\\\w+\", CASE_INSENSITIVE), true))\n    );\n\n    GrammarUtils.insertBeforeToken(cpp, \"string\",\n      token(\"raw-string\", pattern(compile(\"R\\\"([^()\\\\\\\\ ]{0,16})\\\\([\\\\s\\\\S]*?\\\\)\\\\1\\\"\"), false, true, \"string\"))\n    );\n\n    return cpp;\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar cpp = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"c\"),\n      \"cpp\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\\\b\"))),\n      token(\"operator\", pattern(compile(\"--?|\\\\+\\\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\\\^|~|%|&{1,2}|\\\\|\\\\|?|\\\\?|\\\\*|\\\\/|\\\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\\\b\")))\n    );\n\n    // in prism-js cpp is extending c, but c has not booleans... (like classes)\n    GrammarUtils.insertBeforeToken(cpp, \"function\",\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\")))\n    );\n\n    GrammarUtils.insertBeforeToken(cpp, \"keyword\",\n      token(\"class-name\", pattern(compile(\"(class\\\\s+)\\\\w+\", CASE_INSENSITIVE), true))\n    );\n\n    GrammarUtils.insertBeforeToken(cpp, \"string\",\n      token(\"raw-string\", pattern(compile(\"R\\\"([^()\\\\\\\\ ]{0,16})\\\\([\\\\s\\\\S]*?\\\\)\\\\1\\\"\"), false, true, \"string\"))\n    );\n\n    return cpp;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_css_extras.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Modify;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;", "\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Modify(\"css\")\npublic class Prism_css_extras {\n\n  @Nullable", "@Modify(\"css\")\npublic class Prism_css_extras {\n\n  @Nullable\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar css = prism4j.grammar(\"css\");\n\n    if (css != null) {\n\n      final Prism4j.Token selector = GrammarUtils.findToken(css, \"selector\");", "    if (css != null) {\n\n      final Prism4j.Token selector = GrammarUtils.findToken(css, \"selector\");\n      if (selector != null) {\n        final Prism4j.Pattern pattern = pattern(\n          compile(\"[^{}\\\\s][^{}]*(?=\\\\s*\\\\{)\"),\n          false,\n          false,\n          null,\n          grammar(\"inside\",\n            token(\"pseudo-element\", pattern(compile(\":(?:after|before|first-letter|first-line|selection)|::[-\\\\w]+\"))),\n            token(\"pseudo-class\", pattern(compile(\":[-\\\\w]+(?:\\\\(.*\\\\))?\"))),\n            token(\"class\", pattern(compile(\"\\\\.[-:.\\\\w]+\"))),\n            token(\"id\", pattern(compile(\"#[-:.\\\\w]+\"))),\n            token(\"attribute\", pattern(compile(\"\\\\[[^\\\\]]+\\\\]\")))\n          )\n        );\n        selector.patterns().clear();\n        selector.patterns().add(pattern);\n      }\n\n      GrammarUtils.insertBeforeToken(css, \"function\",\n        token(\"hexcode\", pattern(compile(\"#[\\\\da-f]{3,8}\", CASE_INSENSITIVE))),\n        token(\"entity\", pattern(compile(\"\\\\\\\\[\\\\da-f]{1,8}\", CASE_INSENSITIVE))),\n        token(\"number\", pattern(compile(\"[\\\\d%.]+\")))\n      );\n    }\n    return null;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_clike.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.regex.Pattern;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;", "import static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic abstract class Prism_clike {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\n      \"clike\",\n      token(\n        \"comment\",\n        pattern(compile(\"(^|[^\\\\\\\\])\\\\/\\\\*[\\\\s\\\\S]*?(?:\\\\*\\\\/|$)\"), true),\n        pattern(compile(\"(^|[^\\\\\\\\:])\\\\/\\\\/.*\"), true, true)\n      ),\n      token(\n        \"string\",\n        pattern(compile(\"([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\n        \"class-name\",\n        pattern(\n          compile(\"((?:\\\\b(?:class|interface|extends|implements|trait|instanceof|new)\\\\s+)|(?:catch\\\\s+\\\\())[\\\\w.\\\\\\\\]+\"),\n          true,\n          false,\n          null,\n          grammar(\"inside\", token(\"punctuation\", pattern(compile(\"[.\\\\\\\\]\"))))\n        )\n      ),\n      token(\n        \"keyword\",\n        pattern(compile(\"\\\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\\\b\"))\n      ),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\"))),\n      token(\"function\", pattern(compile(\"[a-z0-9_]+(?=\\\\()\", Pattern.CASE_INSENSITIVE))),\n      token(\n        \"number\",\n        pattern(compile(\"\\\\b0x[\\\\da-f]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\", Pattern.CASE_INSENSITIVE))\n      ),\n      token(\"operator\", pattern(compile(\"--?|\\\\+\\\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\\\|\\\\|?|\\\\?|\\\\*|\\\\/|~|\\\\^|%\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\];(),.:]\")))\n    );\n  }\n\n  private Prism_clike() {\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\n      \"clike\",\n      token(\n        \"comment\",\n        pattern(compile(\"(^|[^\\\\\\\\])\\\\/\\\\*[\\\\s\\\\S]*?(?:\\\\*\\\\/|$)\"), true),\n        pattern(compile(\"(^|[^\\\\\\\\:])\\\\/\\\\/.*\"), true, true)\n      ),\n      token(\n        \"string\",\n        pattern(compile(\"([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\n        \"class-name\",\n        pattern(\n          compile(\"((?:\\\\b(?:class|interface|extends|implements|trait|instanceof|new)\\\\s+)|(?:catch\\\\s+\\\\())[\\\\w.\\\\\\\\]+\"),\n          true,\n          false,\n          null,\n          grammar(\"inside\", token(\"punctuation\", pattern(compile(\"[.\\\\\\\\]\"))))\n        )\n      ),\n      token(\n        \"keyword\",\n        pattern(compile(\"\\\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\\\b\"))\n      ),\n      token(\"boolean\", pattern(compile(\"\\\\b(?:true|false)\\\\b\"))),\n      token(\"function\", pattern(compile(\"[a-z0-9_]+(?=\\\\()\", Pattern.CASE_INSENSITIVE))),\n      token(\n        \"number\",\n        pattern(compile(\"\\\\b0x[\\\\da-f]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\", Pattern.CASE_INSENSITIVE))\n      ),\n      token(\"operator\", pattern(compile(\"--?|\\\\+\\\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\\\|\\\\|?|\\\\?|\\\\*|\\\\/|~|\\\\^|%\"))),\n      token(\"punctuation\", pattern(compile(\"[{}\\\\[\\\\];(),.:]\")))\n    );\n  }\n\n  private Prism_clike() {\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_scala.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"java\")\npublic class Prism_scala {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    final Prism4j.Grammar scala = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"java\"),\n      \"scala\",\n      new GrammarUtils.TokenFilter() {\n        @Override", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    final Prism4j.Grammar scala = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"java\"),\n      \"scala\",\n      new GrammarUtils.TokenFilter() {\n        @Override\n        public boolean test(@NotNull Prism4j.Token token) {\n          final String name = token.name();\n          return !\"class-name\".equals(name) && !\"function\".equals(name);\n        }\n      },\n      token(\"keyword\", pattern(\n        compile(\"<-|=>|\\\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\\\b\")\n      )),\n      token(\"string\",\n        pattern(compile(\"\\\"\\\"\\\"[\\\\s\\\\S]*?\\\"\\\"\\\"\"), false, true),\n        pattern(compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true)\n      ),\n      token(\"number\", pattern(\n        compile(\"\\\\b0x[\\\\da-f]*\\\\.?[\\\\da-f]+|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:e\\\\d+)?[dfl]?\", CASE_INSENSITIVE)\n      ))\n    );\n\n    scala.tokens().add(\n      token(\"symbol\", pattern(compile(\"'[^\\\\d\\\\s\\\\\\\\]\\\\w*\")))\n    );\n\n    GrammarUtils.insertBeforeToken(scala, \"number\",\n      token(\"builtin\", pattern(compile(\"\\\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\\\b\")))\n    );\n\n    return scala;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_javascript.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Aliases;", "import io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Aliases;\nimport io.noties.prism4j.annotations.Extend;\nimport io.noties.prism4j.annotations.Modify;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;", "import static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Aliases(\"js\")\n@Modify(\"markup\")\n@Extend(\"clike\")\npublic class Prism_javascript {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar js = GrammarUtils.extend(GrammarUtils.require(prism4j, \"clike\"), \"javascript\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\\\b\"))),\n      token(\"number\", pattern(compile(\"\\\\b(?:0[xX][\\\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?\"))),\n      token(\"function\", pattern(compile(\"[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*(?=\\\\s*\\\\()\", CASE_INSENSITIVE))),\n      token(\"operator\", pattern(compile(\"-[-=]?|\\\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\\\|[|=]?|\\\\*\\\\*?=?|\\\\/=?|~|\\\\^=?|%=?|\\\\?|\\\\.{3}\")))\n    );\n\n    GrammarUtils.insertBeforeToken(js, \"keyword\",\n      token(\"regex\", pattern(\n        compile(\"((?:^|[^$\\\\w\\\\xA0-\\\\uFFFF.\\\"'\\\\])\\\\s])\\\\s*)\\\\/(\\\\[[^\\\\]\\\\r\\\\n]+]|\\\\\\\\.|[^/\\\\\\\\\\\\[\\\\r\\\\n])+\\\\/[gimyu]{0,5}(?=\\\\s*($|[\\\\r\\\\n,.;})\\\\]]))\"),\n        true,\n        true\n      )),\n      token(\n        \"function-variable\",\n        pattern(\n          compile(\"[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*(?=\\\\s*=\\\\s*(?:function\\\\b|(?:\\\\([^()]*\\\\)|[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*)\\\\s*=>))\", CASE_INSENSITIVE),\n          false,\n          false,\n          \"function\"\n        )\n      ),\n      token(\"constant\", pattern(compile(\"\\\\b[A-Z][A-Z\\\\d_]*\\\\b\")))\n    );\n\n    final Prism4j.Token interpolation = token(\"interpolation\");\n\n    GrammarUtils.insertBeforeToken(js, \"string\",\n      token(\n        \"template-string\",\n        pattern(\n          compile(\"`(?:\\\\\\\\[\\\\s\\\\S]|\\\\$\\\\{[^}]+\\\\}|[^\\\\\\\\`])*`\"),\n          false,\n          true,\n          null,\n          grammar(\n            \"inside\",\n            interpolation,\n            token(\"string\", pattern(compile(\"[\\\\s\\\\S]+\")))\n          )\n        )\n      )\n    );\n\n    final Prism4j.Grammar insideInterpolation;\n    {\n      final List<Prism4j.Token> tokens = new ArrayList<>(js.tokens().size() + 1);\n      tokens.add(token(\n        \"interpolation-punctuation\",\n        pattern(compile(\"^\\\\$\\\\{|\\\\}$\"), false, false, \"punctuation\")\n      ));\n      tokens.addAll(js.tokens());\n      insideInterpolation = grammar(\"inside\", tokens);\n    }\n\n    interpolation.patterns().add(pattern(\n      compile(\"\\\\$\\\\{[^}]+\\\\}\"),\n      false,\n      false,\n      null,\n      insideInterpolation\n    ));\n\n    final Prism4j.Grammar markup = prism4j.grammar(\"markup\");", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar js = GrammarUtils.extend(GrammarUtils.require(prism4j, \"clike\"), \"javascript\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\\\b\"))),\n      token(\"number\", pattern(compile(\"\\\\b(?:0[xX][\\\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?\"))),\n      token(\"function\", pattern(compile(\"[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*(?=\\\\s*\\\\()\", CASE_INSENSITIVE))),\n      token(\"operator\", pattern(compile(\"-[-=]?|\\\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\\\|[|=]?|\\\\*\\\\*?=?|\\\\/=?|~|\\\\^=?|%=?|\\\\?|\\\\.{3}\")))\n    );\n\n    GrammarUtils.insertBeforeToken(js, \"keyword\",\n      token(\"regex\", pattern(\n        compile(\"((?:^|[^$\\\\w\\\\xA0-\\\\uFFFF.\\\"'\\\\])\\\\s])\\\\s*)\\\\/(\\\\[[^\\\\]\\\\r\\\\n]+]|\\\\\\\\.|[^/\\\\\\\\\\\\[\\\\r\\\\n])+\\\\/[gimyu]{0,5}(?=\\\\s*($|[\\\\r\\\\n,.;})\\\\]]))\"),\n        true,\n        true\n      )),\n      token(\n        \"function-variable\",\n        pattern(\n          compile(\"[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*(?=\\\\s*=\\\\s*(?:function\\\\b|(?:\\\\([^()]*\\\\)|[_$a-z\\\\xA0-\\\\uFFFF][$\\\\w\\\\xA0-\\\\uFFFF]*)\\\\s*=>))\", CASE_INSENSITIVE),\n          false,\n          false,\n          \"function\"\n        )\n      ),\n      token(\"constant\", pattern(compile(\"\\\\b[A-Z][A-Z\\\\d_]*\\\\b\")))\n    );\n\n    final Prism4j.Token interpolation = token(\"interpolation\");\n\n    GrammarUtils.insertBeforeToken(js, \"string\",\n      token(\n        \"template-string\",\n        pattern(\n          compile(\"`(?:\\\\\\\\[\\\\s\\\\S]|\\\\$\\\\{[^}]+\\\\}|[^\\\\\\\\`])*`\"),\n          false,\n          true,\n          null,\n          grammar(\n            \"inside\",\n            interpolation,\n            token(\"string\", pattern(compile(\"[\\\\s\\\\S]+\")))\n          )\n        )\n      )\n    );\n\n    final Prism4j.Grammar insideInterpolation;\n    {\n      final List<Prism4j.Token> tokens = new ArrayList<>(js.tokens().size() + 1);\n      tokens.add(token(\n        \"interpolation-punctuation\",\n        pattern(compile(\"^\\\\$\\\\{|\\\\}$\"), false, false, \"punctuation\")\n      ));\n      tokens.addAll(js.tokens());\n      insideInterpolation = grammar(\"inside\", tokens);\n    }\n\n    interpolation.patterns().add(pattern(\n      compile(\"\\\\$\\\\{[^}]+\\\\}\"),\n      false,\n      false,\n      null,\n      insideInterpolation\n    ));\n\n    final Prism4j.Grammar markup = prism4j.grammar(\"markup\");", "    if (markup != null) {\n      GrammarUtils.insertBeforeToken(markup, \"tag\",\n        token(\n          \"script\", pattern(\n            compile(\"(<script[\\\\s\\\\S]*?>)[\\\\s\\\\S]*?(?=<\\\\/script>)\", CASE_INSENSITIVE),\n            true,\n            true,\n            \"language-javascript\",\n            js\n          )\n        )\n      );\n    }\n\n    return js;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_yaml.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;", "import static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_yaml {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"yaml\",\n      token(\"scalar\", pattern(\n        compile(\"([\\\\-:]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*[|>])[ \\\\t]*(?:((?:\\\\r?\\\\n|\\\\r)[ \\\\t]+)[^\\\\r\\\\n]+(?:\\\\2[^\\\\r\\\\n]+)*)\"),\n        true,\n        false,\n        \"string\"\n      )),\n      token(\"comment\", pattern(compile(\"#.*\"))),\n      token(\"key\", pattern(\n        compile(\"(\\\\s*(?:^|[:\\\\-,\\\\[{\\\\r\\\\n?])[ \\\\t]*(?:![^\\\\s]+)?[ \\\\t]*)[^\\\\r\\\\n{\\\\[\\\\]},#\\\\s]+?(?=\\\\s*:\\\\s)\"),\n        true,\n        false,\n        \"atrule\"\n      )),\n      token(\"directive\", pattern(\n        compile(\"(^[ \\\\t]*)%.+\", MULTILINE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"datetime\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:\\\\d{4}-\\\\d\\\\d?-\\\\d\\\\d?(?:[tT]|[ \\\\t]+)\\\\d\\\\d?:\\\\d{2}:\\\\d{2}(?:\\\\.\\\\d*)?[ \\\\t]*(?:Z|[-+]\\\\d\\\\d?(?::\\\\d{2})?)?|\\\\d{4}-\\\\d{2}-\\\\d{2}|\\\\d\\\\d?:\\\\d{2}(?::\\\\d{2}(?:\\\\.\\\\d*)?)?)(?=[ \\\\t]*(?:$|,|]|\\\\}))\", MULTILINE),\n        true,\n        false,\n        \"number\"\n      )),\n      token(\"boolean\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:true|false)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"null\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:null|~)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"string\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(\\\"|')(?:(?!\\\\2)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\2(?=[ \\\\t]*(?:$|,|]|\\\\}))\", MULTILINE),\n        true,\n        true\n      )),\n      token(\"number\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)[+-]?(?:0x[\\\\da-f]+|0o[0-7]+|(?:\\\\d+\\\\.?\\\\d*|\\\\.?\\\\d+)(?:e[+-]?\\\\d+)?|\\\\.inf|\\\\.nan)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true\n      )),\n      token(\"tag\", pattern(compile(\"![^\\\\s]+\"))),\n      token(\"important\", pattern(compile(\"[&*][\\\\w]+\"))),\n      token(\"punctuation\", pattern(compile(\"---|[:\\\\[\\\\]{}\\\\-,|>?]|\\\\.\\\\.\\\\.\")))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"yaml\",\n      token(\"scalar\", pattern(\n        compile(\"([\\\\-:]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*[|>])[ \\\\t]*(?:((?:\\\\r?\\\\n|\\\\r)[ \\\\t]+)[^\\\\r\\\\n]+(?:\\\\2[^\\\\r\\\\n]+)*)\"),\n        true,\n        false,\n        \"string\"\n      )),\n      token(\"comment\", pattern(compile(\"#.*\"))),\n      token(\"key\", pattern(\n        compile(\"(\\\\s*(?:^|[:\\\\-,\\\\[{\\\\r\\\\n?])[ \\\\t]*(?:![^\\\\s]+)?[ \\\\t]*)[^\\\\r\\\\n{\\\\[\\\\]},#\\\\s]+?(?=\\\\s*:\\\\s)\"),\n        true,\n        false,\n        \"atrule\"\n      )),\n      token(\"directive\", pattern(\n        compile(\"(^[ \\\\t]*)%.+\", MULTILINE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"datetime\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:\\\\d{4}-\\\\d\\\\d?-\\\\d\\\\d?(?:[tT]|[ \\\\t]+)\\\\d\\\\d?:\\\\d{2}:\\\\d{2}(?:\\\\.\\\\d*)?[ \\\\t]*(?:Z|[-+]\\\\d\\\\d?(?::\\\\d{2})?)?|\\\\d{4}-\\\\d{2}-\\\\d{2}|\\\\d\\\\d?:\\\\d{2}(?::\\\\d{2}(?:\\\\.\\\\d*)?)?)(?=[ \\\\t]*(?:$|,|]|\\\\}))\", MULTILINE),\n        true,\n        false,\n        \"number\"\n      )),\n      token(\"boolean\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:true|false)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"null\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(?:null|~)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true,\n        false,\n        \"important\"\n      )),\n      token(\"string\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)(\\\"|')(?:(?!\\\\2)[^\\\\\\\\\\\\r\\\\n]|\\\\\\\\.)*\\\\2(?=[ \\\\t]*(?:$|,|]|\\\\}))\", MULTILINE),\n        true,\n        true\n      )),\n      token(\"number\", pattern(\n        compile(\"([:\\\\-,\\\\[{]\\\\s*(?:![^\\\\s]+)?[ \\\\t]*)[+-]?(?:0x[\\\\da-f]+|0o[0-7]+|(?:\\\\d+\\\\.?\\\\d*|\\\\.?\\\\d+)(?:e[+-]?\\\\d+)?|\\\\.inf|\\\\.nan)[ \\\\t]*(?=$|,|]|\\\\})\", MULTILINE | CASE_INSENSITIVE),\n        true\n      )),\n      token(\"tag\", pattern(compile(\"![^\\\\s]+\"))),\n      token(\"important\", pattern(compile(\"[&*][\\\\w]+\"))),\n      token(\"punctuation\", pattern(compile(\"---|[:\\\\[\\\\]{}\\\\-,|>?]|\\\\.\\\\.\\\\.\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_swift.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n", "import io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n\n@SuppressWarnings(\"unused\")", "\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_swift {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar swift = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"swift\",\n      token(\"string\", pattern(\n        compile(\"(\\\"|')(\\\\\\\\(?:\\\\((?:[^()]|\\\\([^)]+\\\\))+\\\\)|\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"),\n        false,\n        true,\n        null,\n        grammar(\"inside\", token(\"interpolation\", pattern(\n          compile(\"\\\\\\\\\\\\((?:[^()]|\\\\([^)]+\\\\))+\\\\)\"),\n          false,\n          false,\n          null,\n          grammar(\"inside\", token(\"delimiter\", pattern(\n            compile(\"^\\\\\\\\\\\\(|\\\\)$\"),\n            false,\n            false,\n            \"variable\"\n          )))\n        )))\n      )),\n      token(\"keyword\", pattern(\n        compile(\"\\\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\\\b\")\n      )),\n      token(\"number\", pattern(\n        compile(\"\\\\b(?:[\\\\d_]+(?:\\\\.[\\\\de_]+)?|0x[a-f0-9_]+(?:\\\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\\\b\", CASE_INSENSITIVE)\n      ))\n    );\n\n    final List<Prism4j.Token> tokens = swift.tokens();\n\n    tokens.add(token(\"constant\", pattern(compile(\"\\\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\\\b\"))));\n    tokens.add(token(\"atrule\", pattern(compile(\"@\\\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\\\b\"))));", "    tokens.add(token(\"builtin\", pattern(compile(\"\\\\b(?:[A-Z]\\\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\\\b\"))));\n\n    final Prism4j.Token interpolationToken = GrammarUtils.findToken(swift, \"string/interpolation\");\n    final Prism4j.Grammar interpolationGrammar = interpolationToken != null\n      ? GrammarUtils.findFirstInsideGrammar(interpolationToken)\n      : null;\n    if (interpolationGrammar != null) {\n      interpolationGrammar.tokens().addAll(swift.tokens());\n    }\n\n    return swift;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_groovy.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;", "import static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_groovy {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar groovy = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"groovy\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\\\b\"))),\n      token(\"string\",\n        pattern(\n          compile(\"(\\\"\\\"\\\"|''')[\\\\s\\\\S]*?\\\\1|(?:\\\\$\\\\/)(?:\\\\$\\\\/\\\\$|[\\\\s\\\\S])*?\\\\/\\\\$\"), false, true\n        ),\n        pattern(\n          compile(\"([\\\"'\\\\/])(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true\n        )\n      ),\n      token(\"number\",\n        pattern(\n          compile(\"\\\\b(?:0b[01_]+|0x[\\\\da-f_]+(?:\\\\.[\\\\da-f_p\\\\-]+)?|[\\\\d_]+(?:\\\\.[\\\\d_]+)?(?:e[+-]?[\\\\d]+)?)[glidf]?\\\\b\", CASE_INSENSITIVE)\n        )\n      ),\n      token(\"operator\",\n        pattern(\n          compile(\"(^|[^.])(?:~|==?~?|\\\\?[.:]?|\\\\*(?:[.=]|\\\\*=?)?|\\\\.[@&]|\\\\.\\\\.<|\\\\.{1,2}(?!\\\\.)|-[-=>]?|\\\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\\\|[|=]?|\\\\/=?|\\\\^=?|%=?)\"),\n          true\n        )\n      ),\n      token(\"punctuation\",\n        pattern(compile(\"\\\\.+|[{}\\\\[\\\\];(),:$]\"))\n      )\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"string\",\n      token(\"shebang\", pattern(\n        compile(\"#!.+\"),\n        false,\n        false,\n        \"comment\"\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"punctuation\",\n      token(\"spock-block\", pattern(\n        compile(\"\\\\b(?:setup|given|when|then|and|cleanup|expect|where):\")\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"function\",\n      token(\"annotation\", pattern(\n        compile(\"(^|[^.])@\\\\w+\"),\n        true,\n        false,\n        \"punctuation\"\n      ))\n    );\n\n    // no string templates :(\n\n    return groovy;\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar groovy = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"groovy\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\\\b\"))),\n      token(\"string\",\n        pattern(\n          compile(\"(\\\"\\\"\\\"|''')[\\\\s\\\\S]*?\\\\1|(?:\\\\$\\\\/)(?:\\\\$\\\\/\\\\$|[\\\\s\\\\S])*?\\\\/\\\\$\"), false, true\n        ),\n        pattern(\n          compile(\"([\\\"'\\\\/])(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"), false, true\n        )\n      ),\n      token(\"number\",\n        pattern(\n          compile(\"\\\\b(?:0b[01_]+|0x[\\\\da-f_]+(?:\\\\.[\\\\da-f_p\\\\-]+)?|[\\\\d_]+(?:\\\\.[\\\\d_]+)?(?:e[+-]?[\\\\d]+)?)[glidf]?\\\\b\", CASE_INSENSITIVE)\n        )\n      ),\n      token(\"operator\",\n        pattern(\n          compile(\"(^|[^.])(?:~|==?~?|\\\\?[.:]?|\\\\*(?:[.=]|\\\\*=?)?|\\\\.[@&]|\\\\.\\\\.<|\\\\.{1,2}(?!\\\\.)|-[-=>]?|\\\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\\\|[|=]?|\\\\/=?|\\\\^=?|%=?)\"),\n          true\n        )\n      ),\n      token(\"punctuation\",\n        pattern(compile(\"\\\\.+|[{}\\\\[\\\\];(),:$]\"))\n      )\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"string\",\n      token(\"shebang\", pattern(\n        compile(\"#!.+\"),\n        false,\n        false,\n        \"comment\"\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"punctuation\",\n      token(\"spock-block\", pattern(\n        compile(\"\\\\b(?:setup|given|when|then|and|cleanup|expect|where):\")\n      ))\n    );\n\n    GrammarUtils.insertBeforeToken(groovy, \"function\",\n      token(\"annotation\", pattern(\n        compile(\"(^|[^.])@\\\\w+\"),\n        true,\n        false,\n        \"punctuation\"\n      ))\n    );\n\n    // no string templates :(\n\n    return groovy;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_csharp.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Aliases;\nimport io.noties.prism4j.annotations.Extend;\n", "import io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.CASE_INSENSITIVE;\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")", "\n@SuppressWarnings(\"unused\")\n@Aliases(\"dotnet\")\n@Extend(\"clike\")\npublic class Prism_csharp {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar classNameInsidePunctuation = grammar(\"inside\",\n      token(\"punctuation\", pattern(compile(\"\\\\.\")))\n    );\n\n    final Prism4j.Grammar csharp = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"csharp\",\n      token(\"keyword\", pattern(compile(\"\\\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\\\b\"))),\n      token(\"string\",\n        pattern(compile(\"@(\\\"|')(?:\\\\1\\\\1|\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1\"), false, true),\n        pattern(compile(\"(\\\"|')(?:\\\\\\\\.|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*?\\\\1\"), false, true)\n      ),\n      token(\"class-name\",\n        pattern(\n          compile(\"\\\\b[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\b(?=\\\\s+\\\\w+)\"),\n          false,\n          false,\n          null,\n          classNameInsidePunctuation\n        ),\n        pattern(\n          compile(\"(\\\\[)[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\b\"),\n          true,\n          false,\n          null,\n          classNameInsidePunctuation\n        ),\n        pattern(\n          compile(\"(\\\\b(?:class|interface)\\\\s+[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\s*:\\\\s*)[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\b\"),\n          true,\n          false,\n          null,\n          classNameInsidePunctuation\n        ),\n        pattern(\n          compile(\"((?:\\\\b(?:class|interface|new)\\\\s+)|(?:catch\\\\s+\\\\())[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\b\"),\n          true,\n          false,\n          null,\n          classNameInsidePunctuation\n        )\n      ),\n      token(\"number\", pattern(compile(\"\\\\b0x[\\\\da-f]+\\\\b|(?:\\\\b\\\\d+\\\\.?\\\\d*|\\\\B\\\\.\\\\d+)f?\", CASE_INSENSITIVE)))\n    );\n\n    GrammarUtils.insertBeforeToken(csharp, \"class-name\",\n      token(\"generic-method\", pattern(\n        compile(\"\\\\w+\\\\s*<[^>\\\\r\\\\n]+?>\\\\s*(?=\\\\()\"),\n        false,\n        false,\n        null,\n        grammar(\"inside\",\n          token(\"function\", pattern(compile(\"^\\\\w+\"))),\n          token(\"class-name\", pattern(compile(\"\\\\b[A-Z]\\\\w*(?:\\\\.\\\\w+)*\\\\b\"), false, false, null, classNameInsidePunctuation)),\n          GrammarUtils.findToken(csharp, \"keyword\"),\n          token(\"punctuation\", pattern(compile(\"[<>(),.:]\")))\n        )\n      )),\n      token(\"preprocessor\", pattern(\n        compile(\"(^\\\\s*)#.*\", MULTILINE),\n        true,\n        false,\n        \"property\",\n        grammar(\"inside\",\n          token(\"directive\", pattern(\n            compile(\"(\\\\s*#)\\\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\\\b\"),\n            true,\n            false,\n            \"keyword\"\n          ))\n        )\n      ))\n    );\n\n    return csharp;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_kotlin.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport io.noties.prism4j.GrammarUtils;\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;", "import io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Extend;\n\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n\n@SuppressWarnings(\"unused\")", "\n@SuppressWarnings(\"unused\")\n@Extend(\"clike\")\npublic class Prism_kotlin {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n\n    final Prism4j.Grammar kotlin = GrammarUtils.extend(\n      GrammarUtils.require(prism4j, \"clike\"),\n      \"kotlin\",\n      new GrammarUtils.TokenFilter() {\n        @Override", "        public boolean test(@NotNull Prism4j.Token token) {\n          return !\"class-name\".equals(token.name());\n        }\n      },\n      token(\n        \"keyword\",\n        pattern(compile(\"(^|[^.])\\\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\\\b\"), true)\n      ),\n      token(\n        \"function\",\n        pattern(compile(\"\\\\w+(?=\\\\s*\\\\()\")),\n        pattern(compile(\"(\\\\.)\\\\w+(?=\\\\s*\\\\{)\"), true)\n      ),\n      token(\n        \"number\",\n        pattern(compile(\"\\\\b(?:0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\\\d+(?:_\\\\d+)*(?:\\\\.\\\\d+(?:_\\\\d+)*)?(?:[eE][+-]?\\\\d+(?:_\\\\d+)*)?[fFL]?)\\\\b\"))\n      ),\n      token(\n        \"operator\",\n        pattern(compile(\"\\\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\\\/*%<>]=?|[?:]:?|\\\\.\\\\.|&&|\\\\|\\\\||\\\\b(?:and|inv|or|shl|shr|ushr|xor)\\\\b\"))\n      )\n    );\n\n    GrammarUtils.insertBeforeToken(kotlin, \"string\",\n      token(\"raw-string\", pattern(compile(\"(\\\"\\\"\\\"|''')[\\\\s\\\\S]*?\\\\1\"), false, false, \"string\"))\n    );\n\n    GrammarUtils.insertBeforeToken(kotlin, \"keyword\",\n      token(\"annotation\", pattern(compile(\"\\\\B@(?:\\\\w+:)?(?:[A-Z]\\\\w*|\\\\[[^\\\\]]+\\\\])\"), false, false, \"builtin\"))\n    );\n\n    GrammarUtils.insertBeforeToken(kotlin, \"function\",\n      token(\"label\", pattern(compile(\"\\\\w+@|@\\\\w+\"), false, false, \"symbol\"))\n    );\n\n    // this grammar has 1 token: interpolation, which has 2 patterns\n    final Prism4j.Grammar interpolationInside;\n    {\n\n      // okay, I was cloning the tokens of kotlin grammar (so there is no recursive chain of calls),\n      // but it looks like it wants to have recursive calls\n      // I did this because interpolation test was failing due to the fact that `string`\n      // `raw-string` tokens didn't have `inside`, so there were not tokenized\n      // I still find that it has potential to fall with stackoverflow (in some cases)\n      final List<Prism4j.Token> tokens = new ArrayList<>(kotlin.tokens().size() + 1);\n      tokens.add(token(\"delimiter\", pattern(compile(\"^\\\\$\\\\{|\\\\}$\"), false, false, \"variable\")));\n      tokens.addAll(kotlin.tokens());\n\n      interpolationInside = grammar(\n        \"inside\",\n        token(\"interpolation\",\n          pattern(compile(\"\\\\$\\\\{[^}]+\\\\}\"), false, false, null, grammar(\"inside\", tokens)),\n          pattern(compile(\"\\\\$\\\\w+\"), false, false, \"variable\")\n        )\n      );\n    }\n\n    final Prism4j.Token string = GrammarUtils.findToken(kotlin, \"string\");\n    final Prism4j.Token rawString = GrammarUtils.findToken(kotlin, \"raw-string\");\n", "    if (string != null\n      && rawString != null) {\n\n      final Prism4j.Pattern stringPattern = string.patterns().get(0);\n      final Prism4j.Pattern rawStringPattern = rawString.patterns().get(0);\n\n      string.patterns().add(\n        pattern(stringPattern.regex(), stringPattern.lookbehind(), stringPattern.greedy(), stringPattern.alias(), interpolationInside)\n      );\n\n      rawString.patterns().add(\n        pattern(rawStringPattern.regex(), rawStringPattern.lookbehind(), rawStringPattern.greedy(), rawStringPattern.alias(), interpolationInside)\n      );\n\n      string.patterns().remove(0);\n      rawString.patterns().remove(0);\n\n    } else {\n      throw new RuntimeException(\"Unexpected state, cannot find `string` and/or `raw-string` tokens \" +\n        \"inside kotlin grammar\");\n    }\n\n    return kotlin;\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_makefile.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport io.noties.prism4j.Prism4j;\n\nimport static java.util.regex.Pattern.MULTILINE;\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;", "import static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\npublic class Prism_makefile {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"makefile\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])#(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|[^\\\\\\\\\\\\r\\\\n])*\"),\n        true\n      )),\n      token(\"string\", pattern(\n        compile(\"([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"),\n        false,\n        true\n      )),\n      token(\"builtin\", pattern(compile(\"\\\\.[A-Z][^:#=\\\\s]+(?=\\\\s*:(?!=))\"))),\n      token(\"symbol\", pattern(\n        compile(\"^[^:=\\\\r\\\\n]+(?=\\\\s*:(?!=))\", MULTILINE),\n        false,\n        false,\n        null,\n        grammar(\"inside\",\n          token(\"variable\", pattern(compile(\"\\\\$+(?:[^(){}:#=\\\\s]+|(?=[({]))\")))\n        )\n      )),\n      token(\"variable\", pattern(compile(\"\\\\$+(?:[^(){}:#=\\\\s]+|\\\\([@*%<^+?][DF]\\\\)|(?=[({]))\"))),\n      token(\"keyword\",\n        pattern(compile(\"-include\\\\b|\\\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\\\b\")),\n        pattern(\n          compile(\"(\\\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\\\t])\"),\n          true\n        )\n      ),\n      token(\"operator\", pattern(compile(\"(?:::|[?:+!])?=|[|@]\"))),\n      token(\"punctuation\", pattern(compile(\"[:;(){}]\")))\n    );\n  }\n}\n", "  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    return grammar(\"makefile\",\n      token(\"comment\", pattern(\n        compile(\"(^|[^\\\\\\\\])#(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|[^\\\\\\\\\\\\r\\\\n])*\"),\n        true\n      )),\n      token(\"string\", pattern(\n        compile(\"([\\\"'])(?:\\\\\\\\(?:\\\\r\\\\n|[\\\\s\\\\S])|(?!\\\\1)[^\\\\\\\\\\\\r\\\\n])*\\\\1\"),\n        false,\n        true\n      )),\n      token(\"builtin\", pattern(compile(\"\\\\.[A-Z][^:#=\\\\s]+(?=\\\\s*:(?!=))\"))),\n      token(\"symbol\", pattern(\n        compile(\"^[^:=\\\\r\\\\n]+(?=\\\\s*:(?!=))\", MULTILINE),\n        false,\n        false,\n        null,\n        grammar(\"inside\",\n          token(\"variable\", pattern(compile(\"\\\\$+(?:[^(){}:#=\\\\s]+|(?=[({]))\")))\n        )\n      )),\n      token(\"variable\", pattern(compile(\"\\\\$+(?:[^(){}:#=\\\\s]+|\\\\([@*%<^+?][DF]\\\\)|(?=[({]))\"))),\n      token(\"keyword\",\n        pattern(compile(\"-include\\\\b|\\\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\\\b\")),\n        pattern(\n          compile(\"(\\\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\\\t])\"),\n          true\n        )\n      ),\n      token(\"operator\", pattern(compile(\"(?:::|[?:+!])?=|[|@]\"))),\n      token(\"punctuation\", pattern(compile(\"[:;(){}]\")))\n    );\n  }\n}\n"]}
{"filename": "app/src/main/java/com/dudu/weargpt/languages/Prism_markup.java", "chunked_list": ["package com.dudu.weargpt.languages;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.regex.Pattern;\n\nimport io.noties.prism4j.Prism4j;\nimport io.noties.prism4j.annotations.Aliases;\n\nimport static java.util.regex.Pattern.compile;", "\nimport static java.util.regex.Pattern.compile;\nimport static io.noties.prism4j.Prism4j.grammar;\nimport static io.noties.prism4j.Prism4j.pattern;\nimport static io.noties.prism4j.Prism4j.token;\n\n@SuppressWarnings(\"unused\")\n@Aliases({\"xml\", \"html\", \"mathml\", \"svg\"})\npublic abstract class Prism_markup {\n\n  @NotNull", "public abstract class Prism_markup {\n\n  @NotNull\n  public static Prism4j.Grammar create(@NotNull Prism4j prism4j) {\n    final Prism4j.Token entity = token(\"entity\", pattern(compile(\"&#?[\\\\da-z]{1,8};\", Pattern.CASE_INSENSITIVE)));\n    return grammar(\n      \"markup\",\n      token(\"comment\", pattern(compile(\"<!--[\\\\s\\\\S]*?-->\"))),\n      token(\"prolog\", pattern(compile(\"<\\\\?[\\\\s\\\\S]+?\\\\?>\"))),\n      token(\"doctype\", pattern(compile(\"<!DOCTYPE[\\\\s\\\\S]+?>\", Pattern.CASE_INSENSITIVE))),\n      token(\"cdata\", pattern(compile(\"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?]]>\", Pattern.CASE_INSENSITIVE))),\n      token(\n        \"tag\",\n        pattern(\n          compile(\"<\\\\/?(?!\\\\d)[^\\\\s>\\\\/=$<%]+(?:\\\\s+[^\\\\s>\\\\/=]+(?:=(?:(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1|[^\\\\s'\\\">=]+))?)*\\\\s*\\\\/?>\", Pattern.CASE_INSENSITIVE),\n          false,\n          true,\n          null,\n          grammar(\n            \"inside\",\n            token(\n              \"tag\",\n              pattern(\n                compile(\"^<\\\\/?[^\\\\s>\\\\/]+\", Pattern.CASE_INSENSITIVE),\n                false,\n                false,\n                null,\n                grammar(\n                  \"inside\",\n                  token(\"punctuation\", pattern(compile(\"^<\\\\/?\"))),\n                  token(\"namespace\", pattern(compile(\"^[^\\\\s>\\\\/:]+:\")))\n                )\n              )\n            ),\n            token(\n              \"attr-value\",\n              pattern(\n                compile(\"=(?:(\\\"|')(?:\\\\\\\\[\\\\s\\\\S]|(?!\\\\1)[^\\\\\\\\])*\\\\1|[^\\\\s'\\\">=]+)\", Pattern.CASE_INSENSITIVE),\n                false,\n                false,\n                null,\n                grammar(\n                  \"inside\",\n                  token(\n                    \"punctuation\",\n                    pattern(compile(\"^=\")),\n                    pattern(compile(\"(^|[^\\\\\\\\])[\\\"']\"), true)\n                  ),\n                  entity\n                )\n              )\n            ),\n            token(\"punctuation\", pattern(compile(\"\\\\/?>\"))),\n            token(\n              \"attr-name\",\n              pattern(\n                compile(\"[^\\\\s>\\\\/]+\"),\n                false,\n                false,\n                null,\n                grammar(\n                  \"inside\",\n                  token(\"namespace\", pattern(compile(\"^[^\\\\s>\\\\/:]+:\")))\n                )\n              )\n            )\n          )\n        )\n      ),\n      entity\n    );\n  }\n\n  private Prism_markup() {\n  }\n}\n"]}
