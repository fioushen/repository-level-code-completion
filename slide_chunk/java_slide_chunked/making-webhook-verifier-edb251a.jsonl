{"filename": "src/test/java/am/ik/webhook/WebhookVerifierTest.java", "chunked_list": ["package am.ik.webhook;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nimport static am.ik.webhook.WebhookSigner.Encoder.BASE64;\nimport static am.ik.webhook.WebhookSigner.Encoder.HEX;\nimport static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Assertions.assertThat;\n\nclass WebhookVerifierTest {\n\n\t/**\n\t * <a href=\n\t * \"https://github.com/compwright/x-hub-signature/blob/master/src/XHubSignature.test.js\">...</a>\n\t * <a href=\n\t * \"https://github.com/McFoggy/xhub4j/blob/master/xhub4j-core/src/test/java/fr/brouillard/oss/security/xhub/TestXHub.java\">...</a>\n\t */", "\t * \"https://github.com/McFoggy/xhub4j/blob/master/xhub4j-core/src/test/java/fr/brouillard/oss/security/xhub/TestXHub.java\">...</a>\n\t */\n\t@ParameterizedTest\n\t@CsvSource({ \"random-signature-body,SHA1,my_little_secret,3dca279e731c97c38e3019a075dee9ebbd0a99f0\",\n\t\t\t\"The quick brown fox jumps over the lazy dog,SHA1,key,de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9\",\n\t\t\t\"{ \\\"id\\\": \\\"realtime_update\\\" },SHA256,my_little_secret,2bee603b1bd2b873912ee43469a3b4a377ad70e7f64cbd58ccdbc67eb9a1b37f\" })\n\tvoid signHex(String payload, String algorithm, String secret, String signature) throws Exception {\n\t\tfinal WebhookVerifier verifier = new WebhookVerifier(new HmacWebhookSigner(algorithm, secret), HEX);\n\t\tassertThat(verifier.sign(payload)).isEqualTo(algorithm.toLowerCase() + \"=\" + signature);\n\t}", "\t\tassertThat(verifier.sign(payload)).isEqualTo(algorithm.toLowerCase() + \"=\" + signature);\n\t}\n\n\t/**\n\t * <a href=\n\t * \"https://github.com/McFoggy/xhub4j/blob/master/xhub4j-core/src/test/java/fr/brouillard/oss/security/xhub/TestXHub.java\">...</a>\n\t */\n\t@ParameterizedTest\n\t@CsvSource({ \"foo,SHA1,qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50,+3h2gpjf4xcynjCGU5lbdMBwGOc=\", })\n\tvoid signBase64(String payload, String algorithm, String secret, String signature) throws Exception {", "\t@CsvSource({ \"foo,SHA1,qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50,+3h2gpjf4xcynjCGU5lbdMBwGOc=\", })\n\tvoid signBase64(String payload, String algorithm, String secret, String signature) throws Exception {\n\t\tfinal WebhookVerifier verifier = new WebhookVerifier(new HmacWebhookSigner(algorithm, secret), BASE64);\n\t\tassertThat(verifier.sign(payload)).isEqualTo(algorithm.toLowerCase() + \"=\" + signature);\n\t}\n\n\t@Test\n\tvoid signWithGithubWebhook() {\n\t\tfinal String payload = \"{\\\"zen\\\":\\\"Approachable is better than simple.\\\",\\\"hook_id\\\":405653791,\\\"hook\\\":{\\\"type\\\":\\\"Repository\\\",\\\"id\\\":405653791,\\\"name\\\":\\\"web\\\",\\\"active\\\":true,\\\"events\\\":[\\\"push\\\"],\\\"config\\\":{\\\"content_type\\\":\\\"json\\\",\\\"insecure_ssl\\\":\\\"0\\\",\\\"secret\\\":\\\"********\\\",\\\"url\\\":\\\"https://api.ik.am/webhook\\\"},\\\"updated_at\\\":\\\"2023-03-18T12:21:12Z\\\",\\\"created_at\\\":\\\"2023-03-18T12:21:12Z\\\",\\\"url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791\\\",\\\"test_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/test\\\",\\\"ping_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/pings\\\",\\\"deliveries_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/deliveries\\\",\\\"last_response\\\":{\\\"code\\\":null,\\\"status\\\":\\\"unused\\\",\\\"message\\\":null}},\\\"repository\\\":{\\\"id\\\":48331386,\\\"node_id\\\":\\\"MDEwOlJlcG9zaXRvcnk0ODMzMTM4Ng==\\\",\\\"name\\\":\\\"blog.ik.am\\\",\\\"full_name\\\":\\\"making/blog.ik.am\\\",\\\"private\\\":false,\\\"owner\\\":{\\\"login\\\":\\\"making\\\",\\\"id\\\":106908,\\\"node_id\\\":\\\"MDQ6VXNlcjEwNjkwOA==\\\",\\\"avatar_url\\\":\\\"https://avatars.githubusercontent.com/u/106908?v=4\\\",\\\"gravatar_id\\\":\\\"\\\",\\\"url\\\":\\\"https://api.github.com/users/making\\\",\\\"html_url\\\":\\\"https://github.com/making\\\",\\\"followers_url\\\":\\\"https://api.github.com/users/making/followers\\\",\\\"following_url\\\":\\\"https://api.github.com/users/making/following{/other_user}\\\",\\\"gists_url\\\":\\\"https://api.github.com/users/making/gists{/gist_id}\\\",\\\"starred_url\\\":\\\"https://api.github.com/users/making/starred{/owner}{/repo}\\\",\\\"subscriptions_url\\\":\\\"https://api.github.com/users/making/subscriptions\\\",\\\"organizations_url\\\":\\\"https://api.github.com/users/making/orgs\\\",\\\"repos_url\\\":\\\"https://api.github.com/users/making/repos\\\",\\\"events_url\\\":\\\"https://api.github.com/users/making/events{/privacy}\\\",\\\"received_events_url\\\":\\\"https://api.github.com/users/making/received_events\\\",\\\"type\\\":\\\"User\\\",\\\"site_admin\\\":false},\\\"html_url\\\":\\\"https://github.com/making/blog.ik.am\\\",\\\"description\\\":\\\"Blog Contents\\\",\\\"fork\\\":false,\\\"url\\\":\\\"https://api.github.com/repos/making/blog.ik.am\\\",\\\"forks_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/forks\\\",\\\"keys_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/keys{/key_id}\\\",\\\"collaborators_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/collaborators{/collaborator}\\\",\\\"teams_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/teams\\\",\\\"hooks_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks\\\",\\\"issue_events_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues/events{/number}\\\",\\\"events_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/events\\\",\\\"assignees_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/assignees{/user}\\\",\\\"branches_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/branches{/branch}\\\",\\\"tags_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/tags\\\",\\\"blobs_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/blobs{/sha}\\\",\\\"git_tags_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/tags{/sha}\\\",\\\"git_refs_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/refs{/sha}\\\",\\\"trees_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/trees{/sha}\\\",\\\"statuses_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/statuses/{sha}\\\",\\\"languages_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/languages\\\",\\\"stargazers_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/stargazers\\\",\\\"contributors_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/contributors\\\",\\\"subscribers_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/subscribers\\\",\\\"subscription_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/subscription\\\",\\\"commits_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/commits{/sha}\\\",\\\"git_commits_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/commits{/sha}\\\",\\\"comments_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/comments{/number}\\\",\\\"issue_comment_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues/comments{/number}\\\",\\\"contents_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/contents/{+path}\\\",\\\"compare_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/compare/{base}...{head}\\\",\\\"merges_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/merges\\\",\\\"archive_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/{archive_format}{/ref}\\\",\\\"downloads_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/downloads\\\",\\\"issues_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues{/number}\\\",\\\"pulls_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/pulls{/number}\\\",\\\"milestones_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/milestones{/number}\\\",\\\"notifications_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/notifications{?since,all,participating}\\\",\\\"labels_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/labels{/name}\\\",\\\"releases_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/releases{/id}\\\",\\\"deployments_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/deployments\\\",\\\"created_at\\\":\\\"2015-12-20T17:55:09Z\\\",\\\"updated_at\\\":\\\"2023-01-30T07:33:26Z\\\",\\\"pushed_at\\\":\\\"2023-02-17T08:10:45Z\\\",\\\"git_url\\\":\\\"git://github.com/making/blog.ik.am.git\\\",\\\"ssh_url\\\":\\\"git@github.com:making/blog.ik.am.git\\\",\\\"clone_url\\\":\\\"https://github.com/making/blog.ik.am.git\\\",\\\"svn_url\\\":\\\"https://github.com/making/blog.ik.am\\\",\\\"homepage\\\":\\\"https://ik.am\\\",\\\"size\\\":3638,\\\"stargazers_count\\\":4,\\\"watchers_count\\\":4,\\\"language\\\":null,\\\"has_issues\\\":true,\\\"has_projects\\\":true,\\\"has_downloads\\\":true,\\\"has_wiki\\\":true,\\\"has_pages\\\":false,\\\"has_discussions\\\":false,\\\"forks_count\\\":7,\\\"mirror_url\\\":null,\\\"archived\\\":false,\\\"disabled\\\":false,\\\"open_issues_count\\\":9,\\\"license\\\":null,\\\"allow_forking\\\":true,\\\"is_template\\\":false,\\\"web_commit_signoff_required\\\":false,\\\"topics\\\":[],\\\"visibility\\\":\\\"public\\\",\\\"forks\\\":7,\\\"open_issues\\\":9,\\\"watchers\\\":4,\\\"default_branch\\\":\\\"master\\\"},\\\"sender\\\":{\\\"login\\\":\\\"making\\\",\\\"id\\\":106908,\\\"node_id\\\":\\\"MDQ6VXNlcjEwNjkwOA==\\\",\\\"avatar_url\\\":\\\"https://avatars.githubusercontent.com/u/106908?v=4\\\",\\\"gravatar_id\\\":\\\"\\\",\\\"url\\\":\\\"https://api.github.com/users/making\\\",\\\"html_url\\\":\\\"https://github.com/making\\\",\\\"followers_url\\\":\\\"https://api.github.com/users/making/followers\\\",\\\"following_url\\\":\\\"https://api.github.com/users/making/following{/other_user}\\\",\\\"gists_url\\\":\\\"https://api.github.com/users/making/gists{/gist_id}\\\",\\\"starred_url\\\":\\\"https://api.github.com/users/making/starred{/owner}{/repo}\\\",\\\"subscriptions_url\\\":\\\"https://api.github.com/users/making/subscriptions\\\",\\\"organizations_url\\\":\\\"https://api.github.com/users/making/orgs\\\",\\\"repos_url\\\":\\\"https://api.github.com/users/making/repos\\\",\\\"events_url\\\":\\\"https://api.github.com/users/making/events{/privacy}\\\",\\\"received_events_url\\\":\\\"https://api.github.com/users/making/received_events\\\",\\\"type\\\":\\\"User\\\",\\\"site_admin\\\":false}}\";\n\t\tfinal WebhookVerifier verifierSha1 = WebhookVerifier.gitHubSha1(\"mysecret\");", "\t\tfinal String payload = \"{\\\"zen\\\":\\\"Approachable is better than simple.\\\",\\\"hook_id\\\":405653791,\\\"hook\\\":{\\\"type\\\":\\\"Repository\\\",\\\"id\\\":405653791,\\\"name\\\":\\\"web\\\",\\\"active\\\":true,\\\"events\\\":[\\\"push\\\"],\\\"config\\\":{\\\"content_type\\\":\\\"json\\\",\\\"insecure_ssl\\\":\\\"0\\\",\\\"secret\\\":\\\"********\\\",\\\"url\\\":\\\"https://api.ik.am/webhook\\\"},\\\"updated_at\\\":\\\"2023-03-18T12:21:12Z\\\",\\\"created_at\\\":\\\"2023-03-18T12:21:12Z\\\",\\\"url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791\\\",\\\"test_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/test\\\",\\\"ping_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/pings\\\",\\\"deliveries_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks/405653791/deliveries\\\",\\\"last_response\\\":{\\\"code\\\":null,\\\"status\\\":\\\"unused\\\",\\\"message\\\":null}},\\\"repository\\\":{\\\"id\\\":48331386,\\\"node_id\\\":\\\"MDEwOlJlcG9zaXRvcnk0ODMzMTM4Ng==\\\",\\\"name\\\":\\\"blog.ik.am\\\",\\\"full_name\\\":\\\"making/blog.ik.am\\\",\\\"private\\\":false,\\\"owner\\\":{\\\"login\\\":\\\"making\\\",\\\"id\\\":106908,\\\"node_id\\\":\\\"MDQ6VXNlcjEwNjkwOA==\\\",\\\"avatar_url\\\":\\\"https://avatars.githubusercontent.com/u/106908?v=4\\\",\\\"gravatar_id\\\":\\\"\\\",\\\"url\\\":\\\"https://api.github.com/users/making\\\",\\\"html_url\\\":\\\"https://github.com/making\\\",\\\"followers_url\\\":\\\"https://api.github.com/users/making/followers\\\",\\\"following_url\\\":\\\"https://api.github.com/users/making/following{/other_user}\\\",\\\"gists_url\\\":\\\"https://api.github.com/users/making/gists{/gist_id}\\\",\\\"starred_url\\\":\\\"https://api.github.com/users/making/starred{/owner}{/repo}\\\",\\\"subscriptions_url\\\":\\\"https://api.github.com/users/making/subscriptions\\\",\\\"organizations_url\\\":\\\"https://api.github.com/users/making/orgs\\\",\\\"repos_url\\\":\\\"https://api.github.com/users/making/repos\\\",\\\"events_url\\\":\\\"https://api.github.com/users/making/events{/privacy}\\\",\\\"received_events_url\\\":\\\"https://api.github.com/users/making/received_events\\\",\\\"type\\\":\\\"User\\\",\\\"site_admin\\\":false},\\\"html_url\\\":\\\"https://github.com/making/blog.ik.am\\\",\\\"description\\\":\\\"Blog Contents\\\",\\\"fork\\\":false,\\\"url\\\":\\\"https://api.github.com/repos/making/blog.ik.am\\\",\\\"forks_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/forks\\\",\\\"keys_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/keys{/key_id}\\\",\\\"collaborators_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/collaborators{/collaborator}\\\",\\\"teams_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/teams\\\",\\\"hooks_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/hooks\\\",\\\"issue_events_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues/events{/number}\\\",\\\"events_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/events\\\",\\\"assignees_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/assignees{/user}\\\",\\\"branches_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/branches{/branch}\\\",\\\"tags_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/tags\\\",\\\"blobs_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/blobs{/sha}\\\",\\\"git_tags_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/tags{/sha}\\\",\\\"git_refs_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/refs{/sha}\\\",\\\"trees_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/trees{/sha}\\\",\\\"statuses_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/statuses/{sha}\\\",\\\"languages_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/languages\\\",\\\"stargazers_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/stargazers\\\",\\\"contributors_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/contributors\\\",\\\"subscribers_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/subscribers\\\",\\\"subscription_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/subscription\\\",\\\"commits_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/commits{/sha}\\\",\\\"git_commits_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/git/commits{/sha}\\\",\\\"comments_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/comments{/number}\\\",\\\"issue_comment_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues/comments{/number}\\\",\\\"contents_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/contents/{+path}\\\",\\\"compare_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/compare/{base}...{head}\\\",\\\"merges_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/merges\\\",\\\"archive_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/{archive_format}{/ref}\\\",\\\"downloads_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/downloads\\\",\\\"issues_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/issues{/number}\\\",\\\"pulls_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/pulls{/number}\\\",\\\"milestones_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/milestones{/number}\\\",\\\"notifications_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/notifications{?since,all,participating}\\\",\\\"labels_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/labels{/name}\\\",\\\"releases_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/releases{/id}\\\",\\\"deployments_url\\\":\\\"https://api.github.com/repos/making/blog.ik.am/deployments\\\",\\\"created_at\\\":\\\"2015-12-20T17:55:09Z\\\",\\\"updated_at\\\":\\\"2023-01-30T07:33:26Z\\\",\\\"pushed_at\\\":\\\"2023-02-17T08:10:45Z\\\",\\\"git_url\\\":\\\"git://github.com/making/blog.ik.am.git\\\",\\\"ssh_url\\\":\\\"git@github.com:making/blog.ik.am.git\\\",\\\"clone_url\\\":\\\"https://github.com/making/blog.ik.am.git\\\",\\\"svn_url\\\":\\\"https://github.com/making/blog.ik.am\\\",\\\"homepage\\\":\\\"https://ik.am\\\",\\\"size\\\":3638,\\\"stargazers_count\\\":4,\\\"watchers_count\\\":4,\\\"language\\\":null,\\\"has_issues\\\":true,\\\"has_projects\\\":true,\\\"has_downloads\\\":true,\\\"has_wiki\\\":true,\\\"has_pages\\\":false,\\\"has_discussions\\\":false,\\\"forks_count\\\":7,\\\"mirror_url\\\":null,\\\"archived\\\":false,\\\"disabled\\\":false,\\\"open_issues_count\\\":9,\\\"license\\\":null,\\\"allow_forking\\\":true,\\\"is_template\\\":false,\\\"web_commit_signoff_required\\\":false,\\\"topics\\\":[],\\\"visibility\\\":\\\"public\\\",\\\"forks\\\":7,\\\"open_issues\\\":9,\\\"watchers\\\":4,\\\"default_branch\\\":\\\"master\\\"},\\\"sender\\\":{\\\"login\\\":\\\"making\\\",\\\"id\\\":106908,\\\"node_id\\\":\\\"MDQ6VXNlcjEwNjkwOA==\\\",\\\"avatar_url\\\":\\\"https://avatars.githubusercontent.com/u/106908?v=4\\\",\\\"gravatar_id\\\":\\\"\\\",\\\"url\\\":\\\"https://api.github.com/users/making\\\",\\\"html_url\\\":\\\"https://github.com/making\\\",\\\"followers_url\\\":\\\"https://api.github.com/users/making/followers\\\",\\\"following_url\\\":\\\"https://api.github.com/users/making/following{/other_user}\\\",\\\"gists_url\\\":\\\"https://api.github.com/users/making/gists{/gist_id}\\\",\\\"starred_url\\\":\\\"https://api.github.com/users/making/starred{/owner}{/repo}\\\",\\\"subscriptions_url\\\":\\\"https://api.github.com/users/making/subscriptions\\\",\\\"organizations_url\\\":\\\"https://api.github.com/users/making/orgs\\\",\\\"repos_url\\\":\\\"https://api.github.com/users/making/repos\\\",\\\"events_url\\\":\\\"https://api.github.com/users/making/events{/privacy}\\\",\\\"received_events_url\\\":\\\"https://api.github.com/users/making/received_events\\\",\\\"type\\\":\\\"User\\\",\\\"site_admin\\\":false}}\";\n\t\tfinal WebhookVerifier verifierSha1 = WebhookVerifier.gitHubSha1(\"mysecret\");\n\t\tassertThat(verifierSha1.sign(payload)).isEqualTo(\"sha1=86113fc14033057267fce7de17d32d9bd49fba88\");\n\t\tfinal WebhookVerifier verifierSha256 = WebhookVerifier.gitHubSha256(\"mysecret\");\n\t\tassertThat(verifierSha256.sign(payload))\n\t\t\t.isEqualTo(\"sha256=ad4327fdb7670348eed766ee96c4164809cb49e761581fd4678629b31bbee362\");\n\t}\n\n}", "}"]}
{"filename": "src/test/java/am/ik/webhook/spring/WebhookVerifierRequestBodyAdviceTest.java", "chunked_list": ["package am.ik.webhook.spring;\n\nimport java.nio.charset.StandardCharsets;\n\nimport am.ik.webhook.WebhookAuthenticationException;\nimport am.ik.webhook.WebhookHttpHeaders;\nimport am.ik.webhook.annotation.WebhookPayload;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;", "import org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;", "import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n", "import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nclass WebhookVerifierRequestBodyAdviceTest {\n\n\tMockMvc mockMvc = MockMvcBuilders.standaloneSetup(new TestController())\n\t\t.setControllerAdvice(WebhookVerifierRequestBodyAdvice.githubSha256(\"my_little_secret\"))\n\t\t.build();\n\n\t@Test\n\tvoid test_400() throws Exception {", "\t@Test\n\tvoid test_400() throws Exception {\n\t\tfinal MvcResult mvcResult = this.mockMvc\n\t\t\t.perform(post(\"/string\").contentType(MediaType.APPLICATION_JSON).content(\"{ \\\"id\\\": \\\"realtime_update\\\" }\"))\n\t\t\t.andExpect(status().isBadRequest())\n\t\t\t.andReturn();\n\t\tfinal Exception resolvedException = mvcResult.getResolvedException();\n\t\tassertThat(resolvedException).isInstanceOf(ResponseStatusException.class);\n\t\tassertThat(resolvedException).isNotNull();\n\t\tassertThat(((ResponseStatusException) resolvedException).getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);", "\t\tassertThat(resolvedException).isNotNull();\n\t\tassertThat(((ResponseStatusException) resolvedException).getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);\n\n\t}\n\n\t@Test\n\tvoid test_403() throws Exception {\n\t\tfinal MvcResult mvcResult = this.mockMvc\n\t\t\t.perform(post(\"/string\").contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(WebhookHttpHeaders.X_HUB_SIGNATURE_256,", "\t\t\t.perform(post(\"/string\").contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(WebhookHttpHeaders.X_HUB_SIGNATURE_256,\n\t\t\t\t\t\t\"sha256=ad4327fdb7670348eed766ee96c4164809cb49e761581fd4678629b31bbee362\")\n\t\t\t\t.content(\"{ \\\"id\\\": \\\"realtime_update\\\" }\"))\n\t\t\t.andExpect(status().isForbidden())\n\t\t\t.andReturn();\n\t\tfinal Exception resolvedException = mvcResult.getResolvedException();\n\t\tassertThat(resolvedException).isInstanceOf(ResponseStatusException.class);\n\t\tassertThat(resolvedException).isNotNull();\n\t\tassertThat(((ResponseStatusException) resolvedException).getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);", "\t\tassertThat(resolvedException).isNotNull();\n\t\tassertThat(((ResponseStatusException) resolvedException).getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);\n\t\tfinal Throwable cause = resolvedException.getCause();\n\t\tassertThat(cause).isInstanceOf(WebhookAuthenticationException.class);\n\t\tassertThat(cause).isNotNull();\n\t\tassertThat(cause.getMessage()).isEqualTo(\n\t\t\t\t\"Could not verify signature: 'sha256=ad4327fdb7670348eed766ee96c4164809cb49e761581fd4678629b31bbee362'\");\n\t}\n\n\t@ParameterizedTest", "\n\t@ParameterizedTest\n\t@CsvSource({ \"/string\", \"/bytes\" })\n\tvoid test_200(String path) throws Exception {\n\t\tthis.mockMvc\n\t\t\t.perform(post(path).contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.header(WebhookHttpHeaders.X_HUB_SIGNATURE_256,\n\t\t\t\t\t\t\"sha256=2bee603b1bd2b873912ee43469a3b4a377ad70e7f64cbd58ccdbc67eb9a1b37f\")\n\t\t\t\t.content(\"{ \\\"id\\\": \\\"realtime_update\\\" }\"))\n\t\t\t.andExpect(status().isOk())", "\t\t\t\t.content(\"{ \\\"id\\\": \\\"realtime_update\\\" }\"))\n\t\t\t.andExpect(status().isOk())\n\t\t\t.andExpect(content().string(\"OK: { \\\"id\\\": \\\"realtime_update\\\" }\"));\n\t}\n\n\t@RestController\n\tstatic class TestController {\n\n\t\t@PostMapping(path = \"/string\")\n\t\tpublic String string(@WebhookPayload @RequestBody String payload) {\n\t\t\treturn \"OK: \" + payload;\n\t\t}\n\n\t\t@PostMapping(path = \"/bytes\")", "\t\t@PostMapping(path = \"/string\")\n\t\tpublic String string(@WebhookPayload @RequestBody String payload) {\n\t\t\treturn \"OK: \" + payload;\n\t\t}\n\n\t\t@PostMapping(path = \"/bytes\")\n\t\tpublic String bytes(@WebhookPayload @RequestBody byte[] payload) {\n\t\t\treturn \"OK: \" + new String(payload, StandardCharsets.UTF_8);\n\t\t}\n\n\t}\n\n}"]}
{"filename": "src/main/java/am/ik/webhook/Hex.java", "chunked_list": ["package am.ik.webhook;\n\nclass Hex {\n\n\tpublic static String encodeHex(byte[] data) {\n\t\tfinal StringBuilder sb = new StringBuilder();\n\t\tfor (byte datum : data) {\n\t\t\tsb.append(toHex(datum));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tstatic String toHex(byte b) {\n\t\tfinal char[] hex = new char[2];\n\t\thex[0] = Character.forDigit((b >> 4) & 0xF, 16);\n\t\thex[1] = Character.forDigit((b & 0xF), 16);\n\t\treturn new String(hex).toLowerCase();\n\t}\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/WebhookAuthenticationException.java", "chunked_list": ["package am.ik.webhook;\n\n/**\n * Exception raised when a github webhook message is received but its HMAC signature does\n * not match the one computed with the shared secret.\n */\npublic class WebhookAuthenticationException extends RuntimeException {\n\n\tpublic WebhookAuthenticationException(String actual) {\n\t\tsuper(String.format(\"Could not verify signature: '%s'\", actual));\n\t}\n\n}"]}
{"filename": "src/main/java/am/ik/webhook/WebhookHttpHeaders.java", "chunked_list": ["package am.ik.webhook;\n\npublic class WebhookHttpHeaders {\n\n\tpublic static final String X_HUB_SIGNATURE = \"X-Hub-Signature\";\n\n\tpublic static final String X_HUB_SIGNATURE_256 = \"X-Hub-Signature-256\";\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/WebhookVerifier.java", "chunked_list": ["package am.ik.webhook;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.function.Supplier;\nimport java.util.logging.Logger;\n\nimport am.ik.webhook.WebhookSigner.Encoder;\n\npublic final class WebhookVerifier {\n\n\tprivate final Logger log = Logger.getLogger(WebhookVerifier.class.getName());\n\n\tprivate final WebhookSigner signer;\n\n\tprivate final Encoder encoder;\n\n\tpublic WebhookVerifier(WebhookSigner signer, Encoder encoder) {\n\t\tthis.signer = signer;\n\t\tthis.encoder = encoder;\n\t}\n", "public final class WebhookVerifier {\n\n\tprivate final Logger log = Logger.getLogger(WebhookVerifier.class.getName());\n\n\tprivate final WebhookSigner signer;\n\n\tprivate final Encoder encoder;\n\n\tpublic WebhookVerifier(WebhookSigner signer, Encoder encoder) {\n\t\tthis.signer = signer;\n\t\tthis.encoder = encoder;\n\t}\n", "\tpublic void verify(String payload, String signature) {\n\t\tString computedSignature = this.sign(payload);\n\t\tthis.verifySignature(computedSignature, signature, () -> payload);\n\t}\n\n\tpublic void verify(byte[] payload, String signature) {\n\t\tString computedSignature = this.sign(payload);\n\t\tthis.verifySignature(computedSignature, signature, () -> new String(payload, StandardCharsets.UTF_8));\n\t}\n\n\tprivate void verifySignature(String computedSignature, String signature, Supplier<String> payloadSupplier) {", "\t\tif (!computedSignature.equalsIgnoreCase(signature)) {\n\t\t\tlog.warning(() -> \"Failed to verify payload (payload=%s, computedSignature=%s, signature=%s)\"\n\t\t\t\t.formatted(payloadSupplier.get(), computedSignature, signature));\n\t\t\tthrow new WebhookAuthenticationException(signature);\n\t\t}\n\t}\n\n\tpublic String sign(String payload) {\n\t\treturn this.signer.sign(payload, this.encoder);\n\t}\n", "\tpublic String sign(byte[] payload) {\n\t\treturn this.signer.sign(payload, this.encoder);\n\t}\n\n\tpublic static WebhookVerifier gitHubSha1(String secret) {\n\t\treturn new WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);\n\t}\n\n\tpublic static WebhookVerifier gitHubSha256(String secret) {\n\t\treturn new WebhookVerifier(WebhookSigner.hmacSha256(secret), Encoder.HEX);\n\t}\n\n}\n", "\tpublic static WebhookVerifier gitHubSha256(String secret) {\n\t\treturn new WebhookVerifier(WebhookSigner.hmacSha256(secret), Encoder.HEX);\n\t}\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/WebhookSigner.java", "chunked_list": ["package am.ik.webhook;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.Objects;\n\n@FunctionalInterface\npublic interface WebhookSigner {\n\n\tdefault String sign(String payload, Encoder encoder) {\n\t\treturn this.sign(Objects.requireNonNull(payload, \"'payload' must not be null\").getBytes(StandardCharsets.UTF_8),\n\t\t\t\tencoder);\n\t}\n\n\tString sign(byte[] payload, Encoder encoder);\n\n\tstatic WebhookSigner hmacSha1(String secret) {\n\t\treturn new HmacWebhookSigner(\"SHA1\", secret);\n\t}\n\n\tstatic WebhookSigner hmacSha256(String secret) {\n\t\treturn new HmacWebhookSigner(\"SHA256\", secret);\n\t}\n\n\tstatic WebhookSigner hmacSha512(String secret) {\n\t\treturn new HmacWebhookSigner(\"SHA512\", secret);\n\t}\n\n\t@FunctionalInterface\n\tinterface Encoder {\n\n\t\tString encode(byte[] data);\n\n\t\tEncoder HEX = Hex::encodeHex;\n\n\t\tEncoder BASE64 = data -> Base64.getEncoder().encodeToString(data);\n\n\t}\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/HmacWebhookSigner.java", "chunked_list": ["package am.ik.webhook;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport static java.util.Objects.requireNonNull;\n\npublic final class HmacWebhookSigner implements WebhookSigner {\n\n\tprivate final Mac hmac;\n\n\tprivate final String algorithmName;\n\n\tpublic HmacWebhookSigner(String algorithmName, String secret) {\n\t\tfinal String hmacAlgorithmName = \"Hmac\"\n\t\t\t\t+ requireNonNull(algorithmName, \"'algorithmName' must not be null\").toUpperCase();", "import static java.util.Objects.requireNonNull;\n\npublic final class HmacWebhookSigner implements WebhookSigner {\n\n\tprivate final Mac hmac;\n\n\tprivate final String algorithmName;\n\n\tpublic HmacWebhookSigner(String algorithmName, String secret) {\n\t\tfinal String hmacAlgorithmName = \"Hmac\"\n\t\t\t\t+ requireNonNull(algorithmName, \"'algorithmName' must not be null\").toUpperCase();", "\t\ttry {\n\t\t\tfinal SecretKeySpec signingKey = new SecretKeySpec(\n\t\t\t\t\trequireNonNull(secret, \"'secret' must not be null\").getBytes(), hmacAlgorithmName);\n\t\t\tthis.hmac = Mac.getInstance(hmacAlgorithmName);\n\t\t\tthis.hmac.init(signingKey);\n\t\t}\n\t\tcatch (NoSuchAlgorithmException | InvalidKeyException e) {\n\t\t\tthrow new IllegalArgumentException(e);\n\t\t}\n\t\tthis.algorithmName = algorithmName.toLowerCase();\n\t}\n\n\t@Override", "\tpublic String sign(byte[] payload, Encoder encoder) {\n\t\tfinal byte[] sig = this.hmac.doFinal(requireNonNull(payload, \"'payload' must not be null\"));\n\t\treturn this.algorithmName + \"=\" + encoder.encode(sig);\n\t}\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/spring/WebhookVerifierRequestBodyAdvice.java", "chunked_list": ["package am.ik.webhook.spring;\n\nimport java.lang.reflect.Type;\nimport java.util.function.Function;\nimport java.util.logging.Logger;\n\nimport am.ik.webhook.WebhookAuthenticationException;\nimport am.ik.webhook.WebhookHttpHeaders;\nimport am.ik.webhook.WebhookVerifier;\nimport am.ik.webhook.annotation.WebhookPayload;", "import am.ik.webhook.WebhookVerifier;\nimport am.ik.webhook.annotation.WebhookPayload;\n\nimport org.springframework.core.MethodParameter;\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.server.ResponseStatusException;", "import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter;\n\n@ControllerAdvice\npublic class WebhookVerifierRequestBodyAdvice extends RequestBodyAdviceAdapter {\n\n\tprivate final WebhookVerifier webhookVerifier;\n\n\tprivate final String signatureHeaderName;\n\n\tprivate final Logger log = Logger.getLogger(WebhookVerifierRequestBodyAdvice.class.getName());\n", "\tpublic static WebhookVerifierRequestBodyAdvice githubSha1(String secret) {\n\t\treturn new WebhookVerifierRequestBodyAdvice(WebhookVerifier::gitHubSha1, secret,\n\t\t\t\tWebhookHttpHeaders.X_HUB_SIGNATURE);\n\t}\n\n\tpublic static WebhookVerifierRequestBodyAdvice githubSha256(String secret) {\n\t\treturn new WebhookVerifierRequestBodyAdvice(WebhookVerifier::gitHubSha256, secret,\n\t\t\t\tWebhookHttpHeaders.X_HUB_SIGNATURE_256);\n\t}\n\n\tpublic WebhookVerifierRequestBodyAdvice(Function<String, WebhookVerifier> webhookVerifierFactory, String secret,\n\t\t\tString signatureHeaderName) {\n\t\tthis.signatureHeaderName = signatureHeaderName;\n\t\tthis.webhookVerifier = webhookVerifierFactory.apply(secret);\n\t}\n\n\t@Override", "\tpublic boolean supports(MethodParameter methodParameter, Type targetType,\n\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\tfinal boolean hasWebhookPayload = methodParameter.hasParameterAnnotation(WebhookPayload.class);\n\t\tif (hasWebhookPayload) {\n\t\t\tif (String.class.equals(targetType) || byte[].class.equals(targetType)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.warning(\n\t\t\t\t\t\t() -> \"@WebhookPayload is found but the type (%s) is not supported. Only String and byte[] are supported as a payload type.\"\n\t\t\t\t\t\t\t.formatted(targetType));\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override", "\tpublic Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType,\n\t\t\tClass<? extends HttpMessageConverter<?>> converterType) {\n\t\tfinal String signature = inputMessage.getHeaders().getFirst(this.signatureHeaderName);\n\t\tif (!StringUtils.hasLength(signature)) {\n\t\t\tthrow new ResponseStatusException(HttpStatus.BAD_REQUEST,\n\t\t\t\t\t\"The signature header '%s' is missing or blank.\".formatted(this.signatureHeaderName));\n\t\t}\n\t\tlog.info(() -> \"Verify if the payload signature is '%s'\".formatted(signature));\n\t\ttry {\n\t\t\tif (body instanceof final String payload) {\n\t\t\t\tthis.webhookVerifier.verify(payload, signature);\n\t\t\t}", "\t\ttry {\n\t\t\tif (body instanceof final String payload) {\n\t\t\t\tthis.webhookVerifier.verify(payload, signature);\n\t\t\t}\n\t\t\telse if (body instanceof final byte[] payload) {\n\t\t\t\tthis.webhookVerifier.verify(payload, signature);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalStateException(\"Only String and byte[] are supported as a payload type.\");\n\t\t\t}\n\t\t}\n\t\tcatch (WebhookAuthenticationException e) {\n\t\t\tthrow new ResponseStatusException(HttpStatus.FORBIDDEN, e.getMessage(), e);\n\t\t}\n\t\treturn body;\n\t}\n\n}\n"]}
{"filename": "src/main/java/am/ik/webhook/annotation/WebhookPayload.java", "chunked_list": ["package am.ik.webhook.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)", "@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface WebhookPayload {\n\n}\n"]}
