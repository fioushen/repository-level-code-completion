{"filename": "src/test/java/com/yeliheng/eventbus/EventBusBasicTest.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport com.yeliheng.eventbus.annotations.Subscribe;\nimport com.yeliheng.eventbus.enums.ThreadType;\nimport com.yeliheng.eventbus.events.IntTestEvent;\nimport com.yeliheng.eventbus.events.StringTestEvent;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n", "import org.slf4j.LoggerFactory;\n\n\n/**\n * \u4e8b\u4ef6\u603b\u7ebf\u57fa\u7840\u6d4b\u8bd5\u7528\u4f8b\n * EventBus basic test case\n * @author Liam Ye\n */\npublic class EventBusBasicTest {\n\n    public static final Logger logger = LoggerFactory.getLogger(EventBusBasicTest.class);\n", "public class EventBusBasicTest {\n\n    public static final Logger logger = LoggerFactory.getLogger(EventBusBasicTest.class);\n\n    public EventBus eventBus = EventBus.getInstance();\n\n    @Test\n    public void testRegisterAndPost() {\n        eventBus.register(this);\n        EventBus.post(new IntTestEvent(666));\n        eventBus.unregister(this);\n    }\n\n    @Test", "    public void testRegisterTwice() {\n        eventBus.register(this);\n        eventBus.register(this);\n        EventBus.post(new IntTestEvent(666));\n    }\n\n    @Test\n    public void testPostManyTimes() {\n        eventBus.register(this);\n        int count = 1000000;\n        long start = System.currentTimeMillis();", "        for (int i = 0; i < count; i++) {\n            EventBus.post(new StringTestEvent(\"Hello, World!\"));\n        }\n        long time = System.currentTimeMillis() - start;\n        logger.info(\"Posted \" + count + \" events in \" + time + \"ms\");\n    }\n\n    @Subscribe\n    public void onIntTestEvent(IntTestEvent event) {\n        logger.info(\"onIntTestEvent: \" + event.getValue());\n    }\n\n    @Subscribe(threadType = ThreadType.ASYNC)", "    public void onIntTestEvent(IntTestEvent event) {\n        logger.info(\"onIntTestEvent: \" + event.getValue());\n    }\n\n    @Subscribe(threadType = ThreadType.ASYNC)\n    public void onIntTestEventAsync(IntTestEvent event) {\n        logger.info(\"I am second: \" + event.getValue());\n    }\n\n\n}\n"]}
{"filename": "src/test/java/com/yeliheng/eventbus/EventBusMultiThreadTest.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport com.yeliheng.eventbus.annotations.Subscribe;\nimport com.yeliheng.eventbus.enums.ThreadType;\nimport com.yeliheng.eventbus.events.DiscardTestEvent;\nimport com.yeliheng.eventbus.events.StringTestEvent;\nimport com.yeliheng.eventbus.events.TimeConsumingTestEvent;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * \u4e8b\u4ef6\u603b\u7ebf\u591a\u7ebf\u7a0b\u63a5\u6536\u6d4b\u8bd5\n * EventBus multi-thread receive test\n * @author Liam Ye\n */\npublic class EventBusMultiThreadTest {\n    public static final Logger logger = LoggerFactory.getLogger(EventBusMultiThreadTest.class);\n", "public class EventBusMultiThreadTest {\n    public static final Logger logger = LoggerFactory.getLogger(EventBusMultiThreadTest.class);\n\n    public EventBus eventBus = EventBus.getInstance();\n\n    @Test\n    public void testRegisterAndPost() {\n        eventBus.register(this);\n        EventBus.post(new StringTestEvent(\"Hello, World!\"));\n        eventBus.unregister(this);\n    }\n\n    @Test", "    public void testTimeConsumingOperation() throws InterruptedException {\n        eventBus.register(this);\n        EventBus.post(new TimeConsumingTestEvent(666));\n        for (int i = 0; i < 3; i ++) {\n            logger.info(\"[Sync]-\" + i);\n            Thread.sleep(1000);\n        }\n        eventBus.unregister(this);\n        logger.info(\"[Sync] Operation completed.\");\n        Thread.sleep(3000);\n        logger.info(\"[Sync] Thread terminated.\");\n    }\n\n    @Test", "    public void testPostManyEventsWithAsync() {\n        eventBus.register(this);\n        int count = 1000000;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < count; i++) {\n            EventBus.post(new DiscardTestEvent());\n        }\n        long time = System.currentTimeMillis() - start;\n        logger.info(\"Posted \" + count + \" events in \" + time + \"ms\");\n        eventBus.unregister(this);\n    }\n\n    // \u5f02\u6b65 - 1\n    @Subscribe(threadType = ThreadType.ASYNC)", "    public void onStringTestEventAsync(StringTestEvent event) {\n         logger.info(\"[ASYNC-1] \" + event.getString());\n    }\n\n    // \u5f02\u6b65 - 2\n    @Subscribe(threadType = ThreadType.ASYNC)\n    public void onStringTestEventAsync2(StringTestEvent event) {\n        logger.info(\"[ASYNC-2] \" + event.getString());\n    }\n\n    // \u540c\u6b65 - 1\n    @Subscribe", "    public void onStringTestEvent(StringTestEvent event) {\n        logger.info(\"[CURRENT-1] \" + event.getString());\n    }\n\n    // \u540c\u6b65 - 2\n    @Subscribe\n    public void onStringTestEvent2(StringTestEvent event) {\n        logger.info(\"[CURRENT-2] \" + event.getString());\n    }\n\n    @Subscribe(threadType = ThreadType.ASYNC)", "    public void onDiscardTestEvent(DiscardTestEvent event) {\n        // Just do nothing.\n    }\n\n    // \u8017\u65f6\u64cd\u4f5c\n    @Subscribe(threadType = ThreadType.ASYNC)\n    public void onTimeConsumingTestEvent(TimeConsumingTestEvent event) throws InterruptedException {\n        logger.info(\"[Async] Starting time-consuming operation...\");\n        Thread.sleep(5000);\n        logger.info(\"[Async] Operation completed.\");\n\n    }\n\n    // \u540c\u6b65\u5bf9\u7167\u64cd\u4f5c\n    @Subscribe", "    public void onTimeConsumingTestEvent2(TimeConsumingTestEvent event) {\n        logger.info(\"[Sync] Return \" + event.getValue());\n    }\n\n}\n"]}
{"filename": "src/test/java/com/yeliheng/eventbus/events/StringTestEvent.java", "chunked_list": ["package com.yeliheng.eventbus.events;\n\nimport com.yeliheng.eventbus.interfaces.IEvent;\n\n/**\n * \u5b57\u7b26\u4e32\u4e8b\u4ef6\u6d4b\u8bd5\n * String event test\n * @author Liam Ye\n */\npublic class StringTestEvent implements IEvent\n{\n    private final String str;\n\n    public StringTestEvent(String str)\n    {\n        this.str = str;\n    }\n", " */\npublic class StringTestEvent implements IEvent\n{\n    private final String str;\n\n    public StringTestEvent(String str)\n    {\n        this.str = str;\n    }\n\n    public String getString()\n    {\n        return str;\n    }\n}\n", "    public String getString()\n    {\n        return str;\n    }\n}\n"]}
{"filename": "src/test/java/com/yeliheng/eventbus/events/TimeConsumingTestEvent.java", "chunked_list": ["package com.yeliheng.eventbus.events;\n\nimport com.yeliheng.eventbus.interfaces.IEvent;\n\n/**\n * \u8017\u65f6\u64cd\u4f5c\u4e8b\u4ef6\u6d4b\u8bd5\n * Time-consuming operation event test\n * @author Liam Ye\n */\npublic class TimeConsumingTestEvent implements IEvent {\n\n        private final int value;\n\n        public TimeConsumingTestEvent(int value)\n        {\n            this.value = value;\n        }\n", " */\npublic class TimeConsumingTestEvent implements IEvent {\n\n        private final int value;\n\n        public TimeConsumingTestEvent(int value)\n        {\n            this.value = value;\n        }\n\n        public int getValue()\n        {\n            return value;\n        }\n\n}\n", "        public int getValue()\n        {\n            return value;\n        }\n\n}\n"]}
{"filename": "src/test/java/com/yeliheng/eventbus/events/IntTestEvent.java", "chunked_list": ["package com.yeliheng.eventbus.events;\n\nimport com.yeliheng.eventbus.interfaces.IEvent;\n\n/**\n * \u6574\u578b\u4e8b\u4ef6\u6d4b\u8bd5\n * Integer event test\n * @author Liam Ye\n */\npublic class IntTestEvent implements IEvent\n{\n    private final int value;\n\n    public IntTestEvent(int value)\n    {\n        this.value = value;\n    }\n", " */\npublic class IntTestEvent implements IEvent\n{\n    private final int value;\n\n    public IntTestEvent(int value)\n    {\n        this.value = value;\n    }\n\n    public int getValue()\n    {\n        return value;\n    }\n\n}\n", "    public int getValue()\n    {\n        return value;\n    }\n\n}\n"]}
{"filename": "src/test/java/com/yeliheng/eventbus/events/DiscardTestEvent.java", "chunked_list": ["package com.yeliheng.eventbus.events;\n\nimport com.yeliheng.eventbus.interfaces.IEvent;\n\n/**\n * \u4e22\u5f03\u4e8b\u4ef6\uff0c\u7528\u4e8e\u6027\u80fd\u6d4b\u8bd5\n * Discard event, used for performance testing\n * @author Liam Ye\n */\npublic class DiscardTestEvent implements IEvent {\n    // Just do nothing.\n}\n", " */\npublic class DiscardTestEvent implements IEvent {\n    // Just do nothing.\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/EventBusThreadFactory.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * \u4e8b\u4ef6\u603b\u7ebf\u7ebf\u7a0b\u5de5\u5382", "/**\n * \u4e8b\u4ef6\u603b\u7ebf\u7ebf\u7a0b\u5de5\u5382\n * Event bus thread factory\n * @author Liam Ye\n */\npublic class EventBusThreadFactory implements ThreadFactory {\n\n    public final Logger logger = LoggerFactory.getLogger(EventBusThreadFactory.class);\n\n    private final int poolNumber;\n\n    private final AtomicInteger threadNumber = new AtomicInteger(1);\n\n    EventBusThreadFactory(int poolNumber) {\n        this.poolNumber = poolNumber;\n    }\n\n    @Override", "    public Thread newThread(Runnable runnable) {\n        String threadName = \"eventbus-\" + poolNumber + \"-thread-\" + threadNumber.getAndIncrement();\n        Thread thread = new Thread(runnable, threadName);\n        thread.setDaemon(false);\n        thread.setPriority(Thread.NORM_PRIORITY);\n        thread.setUncaughtExceptionHandler((t, e) -> logger.warn(t.toString() + e.toString()));\n        return thread;\n    }\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/Subscription.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport com.yeliheng.eventbus.enums.ThreadType;\nimport com.yeliheng.eventbus.interfaces.IEvent;\nimport com.yeliheng.eventbus.interfaces.ISubscriber;\n\nimport java.lang.reflect.Method;\n\n/**\n * Subscription \u5b9e\u4f53", "/**\n * Subscription \u5b9e\u4f53\n * Subscription entity\n * @author Liam Ye\n */\npublic class Subscription implements ISubscriber {\n\n    private final Object subscriber;\n\n    private final Method method;\n\n    private final ThreadType threadType;\n\n    public Subscription(Object subscriber, Method method, ThreadType threadType) {\n        this.subscriber = subscriber;\n        this.method = method;\n        this.threadType = threadType;\n    }\n\n    @Override", "    public ThreadType getThreadType() {\n        return threadType;\n    }\n\n    @Override\n    public void invoke(IEvent event) {\n        try {\n            method.invoke(subscriber, event);\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Unexpected exception - \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }\n\n    @Override", "    public Object getSubscriber() {\n        return subscriber;\n    }\n\n    public Method getMethod() {\n        return method;\n    }\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/EventBus.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport com.yeliheng.eventbus.enums.ThreadType;\nimport com.yeliheng.eventbus.interfaces.IEvent;\nimport com.yeliheng.eventbus.interfaces.ISubscriber;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.Executor;", "import java.util.*;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * \u4e8b\u4ef6\u603b\u7ebf\u5b9e\u73b0\uff0c\u7528\u4e8e\u6ce8\u518c\u8ba2\u9605\u8005\u548c\u53d1\u5e03\u4e8b\u4ef6\n * Event bus implementation, used to register subscribers and publish events\n * @author Liam Ye", " * Event bus implementation, used to register subscribers and publish events\n * @author Liam Ye\n */\npublic class EventBus {\n\n    public static final Logger logger = LoggerFactory.getLogger(EventBus.class);\n\n    private static final Map<Class<?>, List<ISubscriber>> subscriberMap = new HashMap<>();\n\n    private static final Map<Class<?>, Boolean> subscriberStatusMap = new HashMap<>();\n\n    private static final EventBus instance = new EventBus();\n\n    private static final EventBusThreadFactory factory = new EventBusThreadFactory(1);\n", "    public static final int CORE_POOL_SIZE = Runtime.getRuntime().availableProcessors() * 2;\n\n    public static final int MAX_POOL_SIZE = CORE_POOL_SIZE * 2;\n\n    private static final Executor executor = new ThreadPoolExecutor(\n            CORE_POOL_SIZE,\n            MAX_POOL_SIZE,\n            3L,\n            TimeUnit.SECONDS,\n            new LinkedBlockingQueue<>(),\n            factory\n            );\n\n    private EventBus() {", "        if(instance != null) {\n            throw new RuntimeException(\"EventBus is a singleton\");\n        }\n    }\n\n    public static EventBus getInstance() {\n        return instance;\n    }\n\n    public void register(Object subscriber) {\n        Objects.requireNonNull(subscriber);", "    public void register(Object subscriber) {\n        Objects.requireNonNull(subscriber);\n        if(subscriberStatusMap.get(subscriber.getClass()) != null) {\n            logger.warn(String.format(\"Subscriber %s has already been registered\",subscriber.getClass()));\n            return;\n        }\n        // \u5efa\u7acb\u4e8b\u4ef6\u7c7b\u5230\u8ba2\u9605\u8005\u7684\u6620\u5c04\n        Map<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);\n        synchronized (this) {\n            if(!registeredSubs.isEmpty()) {\n                subscriberStatusMap.put(subscriber.getClass(), true);\n                logger.info(String.format(\"Registered: %s\",subscriber.getClass()));\n            }\n            registeredSubs.forEach((subscriberClass, subscribers) -> subscriberMap.computeIfAbsent(subscriberClass, k -> new ArrayList<>()).addAll(subscribers));\n        }\n    }\n", "            if(!registeredSubs.isEmpty()) {\n                subscriberStatusMap.put(subscriber.getClass(), true);\n                logger.info(String.format(\"Registered: %s\",subscriber.getClass()));\n            }\n            registeredSubs.forEach((subscriberClass, subscribers) -> subscriberMap.computeIfAbsent(subscriberClass, k -> new ArrayList<>()).addAll(subscribers));\n        }\n    }\n\n    public void unregister(Object subscriber) {\n        Objects.requireNonNull(subscriber);\n        if(subscriberMap != null && !subscriberMap.isEmpty()) {\n            subscriberMap.forEach((subscriberClass, subscribers) -> {", "    public void unregister(Object subscriber) {\n        Objects.requireNonNull(subscriber);\n        if(subscriberMap != null && !subscriberMap.isEmpty()) {\n            subscriberMap.forEach((subscriberClass, subscribers) -> {\n                if(subscribers == null || subscribers.isEmpty()) {\n                    logger.warn(String.format(\"Subscriber %s was not registered\",subscriber.getClass()));\n                    return;\n                }\n                subscribers.removeIf(sub -> sub.getSubscriber() == subscriber);\n                subscriberStatusMap.remove(subscriber.getClass());\n            });\n        }else {\n            logger.warn(String.format(\"Subscriber %s was not registered\",subscriber.getClass()));\n        }\n    }\n", "    public static void post(IEvent event) {\n        Objects.requireNonNull(event);\n        Class<? extends IEvent> clazz = event.getClass();\n        List<ISubscriber> subscribers = subscriberMap.get(clazz);\n        if (subscribers == null || subscribers.isEmpty()) {\n            return;\n        }\n        for (ISubscriber subscriber : subscribers) {\n            if(subscriber.getThreadType() == ThreadType.ASYNC) {\n                executor.execute(() -> subscriber.invoke(event));\n            }else {\n                subscriber.invoke(event);\n            }\n        }\n    }\n\n}\n", "            if(subscriber.getThreadType() == ThreadType.ASYNC) {\n                executor.execute(() -> subscriber.invoke(event));\n            }else {\n                subscriber.invoke(event);\n            }\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/SubscriberFinder.java", "chunked_list": ["package com.yeliheng.eventbus;\n\nimport com.yeliheng.eventbus.annotations.Subscribe;\nimport com.yeliheng.eventbus.interfaces.IEvent;\nimport com.yeliheng.eventbus.interfaces.ISubscriber;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\n/**\n * \u626b\u63cf\u88ab Subscriber \u6807\u6ce8\u7684\u65b9\u6cd5\uff0c\u67e5\u627e\u6240\u6709\u7684\u8ba2\u9605\u8005\n * Scan the method which marked by Subscriber annotation to find all subscribers\n * @author Liam Ye\n */\npublic class SubscriberFinder {\n\n    public static Map<Class<?>, List<ISubscriber>> find(Object subscriber) {\n        Map<Class<?>, List<ISubscriber>> subscriberMap = new HashMap<>();\n        Class<?> clazz = subscriber.getClass();\n        Method[] methods = clazz.getDeclaredMethods();", "public class SubscriberFinder {\n\n    public static Map<Class<?>, List<ISubscriber>> find(Object subscriber) {\n        Map<Class<?>, List<ISubscriber>> subscriberMap = new HashMap<>();\n        Class<?> clazz = subscriber.getClass();\n        Method[] methods = clazz.getDeclaredMethods();\n        for (Method method : methods) {\n            Subscribe annotation = method.getAnnotation(Subscribe.class);\n            if(annotation != null) {\n                checkSubscriberMethod(method);\n                Class<?>[] parameterTypes = method.getParameterTypes();\n                subscriberMap.computeIfAbsent(parameterTypes[0], k -> new ArrayList<>()).add(new Subscription(subscriber, method, annotation.threadType()));\n            }\n        }\n        return subscriberMap;\n    }\n\n    private static void checkSubscriberMethod(Method method) {", "            if(annotation != null) {\n                checkSubscriberMethod(method);\n                Class<?>[] parameterTypes = method.getParameterTypes();\n                subscriberMap.computeIfAbsent(parameterTypes[0], k -> new ArrayList<>()).add(new Subscription(subscriber, method, annotation.threadType()));\n            }\n        }\n        return subscriberMap;\n    }\n\n    private static void checkSubscriberMethod(Method method) {\n        if(method.getParameterCount() != 1) {\n            throw new IllegalArgumentException(String.format(\"[%s] Subscriber method: %s must have exactly 1 parameter\", method.getDeclaringClass(), method.getName()));\n        }", "        if(method.getParameterCount() != 1) {\n            throw new IllegalArgumentException(String.format(\"[%s] Subscriber method: %s must have exactly 1 parameter\", method.getDeclaringClass(), method.getName()));\n        }\n        if(method.getReturnType() != void.class) {\n            throw new IllegalArgumentException(String.format(\"[%s] Subscriber method: %s must have a void return type\", method.getDeclaringClass(), method.getName()));\n        }\n        if(!IEvent.class.isAssignableFrom(method.getParameterTypes()[0])) {\n            throw new IllegalArgumentException(String.format(\"[%s] Subscriber method: %s must have a parameter type of IEvent\", method.getDeclaringClass(), method.getName()));\n        }\n\n    }\n\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/annotations/Subscribe.java", "chunked_list": ["package com.yeliheng.eventbus.annotations;\n\nimport com.yeliheng.eventbus.enums.ThreadType;\n\nimport java.lang.annotation.*;\n\n/**\n * Subscribe \u6ce8\u89e3\n * Subscirbe annotation\n * @author Liam Ye", " * Subscirbe annotation\n * @author Liam Ye\n */\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Subscribe {\n    ThreadType threadType() default ThreadType.CURRENT;\n}\n", "}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/interfaces/IEvent.java", "chunked_list": ["package com.yeliheng.eventbus.interfaces;\n\n/**\n * \u4e8b\u4ef6\u63a5\u53e3\uff0c\u6240\u6709\u4e8b\u4ef6\u90fd\u9700\u8981\u5b9e\u73b0\u8be5\u63a5\u53e3\n * Event interface, all events need to implement this interface\n * @author Liam Ye\n */\npublic interface IEvent {\n\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/interfaces/ISubscriber.java", "chunked_list": ["package com.yeliheng.eventbus.interfaces;\n\nimport com.yeliheng.eventbus.enums.ThreadType;\n\n/**\n * \u8ba2\u9605\u8005\u63a5\u53e3\n * Subscriber interface\n * @author Liam Ye\n */\npublic interface ISubscriber {\n\n    ThreadType getThreadType();\n", " */\npublic interface ISubscriber {\n\n    ThreadType getThreadType();\n\n    public Object getSubscriber();\n\n    void invoke(IEvent event);\n\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/spring/EventBusAutoRegister.java", "chunked_list": ["package com.yeliheng.eventbus.spring;\n\nimport com.yeliheng.eventbus.EventBus;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.framework.AopProxyUtils;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\n", "\n\n/**\n * Spring\u4e0b\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u6709@Subscribe\u6ce8\u89e3\u7684Bean\n * Auto register all beans with @Subscribe annotation in Spring\n * @author Liam Ye\n */\npublic class EventBusAutoRegister implements BeanPostProcessor {\n\n    public static final Logger logger = LoggerFactory.getLogger(EventBusAutoRegister.class);\n\n    @Override", "    public static final Logger logger = LoggerFactory.getLogger(EventBusAutoRegister.class);\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        Object realBean = AopProxyUtils.getSingletonTarget(bean);\n        if(realBean == null) {\n            realBean = bean;\n        }\n        EventBus.getInstance().register(realBean);\n        return bean;\n    }\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/spring/context/EventBusContext.java", "chunked_list": ["package com.yeliheng.eventbus.spring.context;\n\nimport com.yeliheng.eventbus.EventBus;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.event.ApplicationContextEvent;\nimport org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.context.event.ContextRefreshedEvent;", "import org.springframework.context.event.ContextClosedEvent;\nimport org.springframework.context.event.ContextRefreshedEvent;\n\nimport java.lang.reflect.Field;\nimport java.util.concurrent.ExecutorService;\n\n/**\n * Spring \u4e0a\u4e0b\u6587\u4e8b\u4ef6\u5904\u7406\uff0c\u53ea\u6709\u5f53\u4f7f\u7528\u4e86Spring\u6846\u67b6\u65f6\u624d\u4f1a\u6267\u884c\u8fd9\u4e2a\u7c7b\n * Spring context event handler, only if you are using the Spring framework this class be executed\n * @author Liam Ye", " * Spring context event handler, only if you are using the Spring framework this class be executed\n * @author Liam Ye\n */\npublic class EventBusContext implements ApplicationListener<ApplicationContextEvent> {\n\n    public static final Logger logger = LoggerFactory.getLogger(EventBusContext.class);\n\n    private ApplicationContext applicationContext;\n\n    private static EventBusContext instance;\n", "    public static EventBusContext getEventContext() {\n        return instance;\n    }\n\n    public static ApplicationContext getApplicationContext() {\n        return instance.applicationContext;\n    }\n\n    private synchronized void shutdownSafely() {\n        try {\n            // \u7ec8\u6b62\u7ebf\u7a0b\u6c60\n            Field executorField = EventBus.class.getDeclaredField(\"executor\");\n            executorField.setAccessible(true);\n            ExecutorService executorService = (ExecutorService) executorField.get(null);\n            executorService.shutdown();\n        } catch (Exception e) {\n            logger.error(String.format(\"Failed to shutdown, Unexpected exception: %s\",e.getMessage()));\n            return;\n        }\n        logger.info(\"EventBus successfully shutdown.\");\n    }\n\n    @Override", "        try {\n            // \u7ec8\u6b62\u7ebf\u7a0b\u6c60\n            Field executorField = EventBus.class.getDeclaredField(\"executor\");\n            executorField.setAccessible(true);\n            ExecutorService executorService = (ExecutorService) executorField.get(null);\n            executorService.shutdown();\n        } catch (Exception e) {\n            logger.error(String.format(\"Failed to shutdown, Unexpected exception: %s\",e.getMessage()));\n            return;\n        }\n        logger.info(\"EventBus successfully shutdown.\");\n    }\n\n    @Override", "    public void onApplicationEvent(ApplicationContextEvent event) {\n        if(event instanceof ContextRefreshedEvent) {\n            // \u521d\u59cb\u5316\u4e0a\u4e0b\u6587\n            EventBusContext.instance = this;\n            applicationContext = event.getApplicationContext();\n            logger.info(\"EventBus initialized.\");\n        } else if (event instanceof ContextClosedEvent) {\n            // \u5173\u95ed\u4e0a\u4e0b\u6587\n            shutdownSafely();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/spring/config/AutoConfiguration.java", "chunked_list": ["package com.yeliheng.eventbus.spring.config;\n\nimport com.yeliheng.eventbus.EventBus;\nimport com.yeliheng.eventbus.spring.EventBusAutoRegister;\nimport com.yeliheng.eventbus.spring.context.EventBusContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\n\n/**", "\n/**\n * \u81ea\u52a8\u914d\u7f6eBean\n * Auto configuration bean\n * @author Liam Ye\n */\n\n@Configuration\npublic class AutoConfiguration {\n\n    @Bean(name = \"eventBusContext\")", "public class AutoConfiguration {\n\n    @Bean(name = \"eventBusContext\")\n    public EventBusContext eventBusContext() {\n        return new EventBusContext();\n    }\n\n    @Bean(name = \"eventBusAutoRegister\")\n    public EventBusAutoRegister eventBusAutoRegister() {\n        return new EventBusAutoRegister();\n    }\n}\n", "    public EventBusAutoRegister eventBusAutoRegister() {\n        return new EventBusAutoRegister();\n    }\n}\n"]}
{"filename": "src/main/java/com/yeliheng/eventbus/enums/ThreadType.java", "chunked_list": ["package com.yeliheng.eventbus.enums;\n\n/**\n * \u7ebf\u7a0b\u7c7b\u578b\n * Type of thread\n * @author Liam Ye\n */\npublic enum ThreadType {\n    /**\n     * \u5f53\u524d\u7ebf\u7a0b\uff0c\u540c\u6b65\u65b9\u5f0f\n     * Current thread, synchronous way\n     */\n    CURRENT,\n    /**\n     * \u5f02\u6b65\u65b9\u5f0f\n     * Asynchronous way\n     */\n    ASYNC\n\n}\n"]}
