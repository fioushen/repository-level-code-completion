{"filename": "unjuanable/src/test/java/demo/unjuanable/UnjuanableApplicationTests.java", "chunked_list": ["package demo.unjuanable;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass UnjuanableApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/application/orgmng/orgservice/OrgServiceIT.java", "chunked_list": ["package demo.unjuanable.application.orgmng.orgservice;\n\nimport demo.unjuanable.domain.orgmng.org.*;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;", "import org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@Transactional\nclass OrgServiceIT {", "@Transactional\nclass OrgServiceIT {\n    static final Long DEFAULT_ORG_ID = 1L;\n    static final Long DEFAULT_USER_ID = 1L;\n    static final long DEFAULT_TENANT_ID = 1L;\n    static final long DEFAULT_EMP_ID = 1L;\n    @Autowired\n    private OrgService orgService;\n\n    @Autowired", "\n    @Autowired\n    private OrgRepository orgRepository;\n\n    @Autowired\n    private OrgReBuilderFactory orgReBuilderFactory;\n\n    @Test\n    void addOrg_should_create_org_when_validation_passed() {\n        // Given", "    void addOrg_should_create_org_when_validation_passed() {\n        // Given\n        CreateOrgRequest request = buildCreateRequest();\n\n        // When\n        OrgResponse actualResponse = orgService.addOrg(request, DEFAULT_USER_ID);\n\n        // Then\n        assertNotNull(actualResponse.getId());\n        assertEquals(request.getTenantId(), actualResponse.getTenantId());", "        assertNotNull(actualResponse.getId());\n        assertEquals(request.getTenantId(), actualResponse.getTenantId());\n        assertEquals(request.getOrgTypeCode(), actualResponse.getOrgTypeCode());\n        assertEquals(request.getLeaderId(), actualResponse.getLeaderId());\n        assertEquals(request.getSuperiorId(), actualResponse.getSuperiorId());\n        assertEquals(request.getName(), actualResponse.getName());\n        assertEquals(OrgStatus.EFFECTIVE.code(), actualResponse.getStatusCode());\n\n        Org actualSaved = orgRepository.findById(actualResponse.getTenantId(),actualResponse.getId())\n                .orElseGet(Assertions::fail);", "        Org actualSaved = orgRepository.findById(actualResponse.getTenantId(),actualResponse.getId())\n                .orElseGet(Assertions::fail);\n        assertEquals(request.getTenantId(), actualSaved.getTenantId());\n        assertEquals(request.getOrgTypeCode(), actualSaved.getOrgTypeCode());\n        assertEquals(request.getLeaderId(), actualSaved.getLeaderId());\n        assertEquals(request.getSuperiorId(), actualSaved.getSuperiorId());\n        assertEquals(request.getName(), actualSaved.getName());\n        assertEquals(OrgStatus.EFFECTIVE, actualSaved.getStatus());\n\n    }", "\n    }\n\n    private CreateOrgRequest buildCreateRequest() {\n        CreateOrgRequest request = new CreateOrgRequest();\n        request.setTenant(DEFAULT_TENANT_ID);\n        request.setOrgType(\"DEVCENT\");\n        request.setLeader(DEFAULT_EMP_ID);\n        request.setSuperior(1L);\n        request.setName(\"\u5fe0\u4e49\u5802\");", "        request.setSuperior(1L);\n        request.setName(\"\u5fe0\u4e49\u5802\");\n        return request;\n    }\n\n    @Test\n    public void updateOrgBasic_should_update_org_when_org_exists() {\n        // Given\n        Org preparedOrg = prepareOrgTobeUpdated();\n\n        // When\n        UpdateOrgBasicRequest request = buildUpdateRequest();\n        OrgResponse actualResponse = orgService.updateOrgBasic(preparedOrg.getId(), request, 1L);\n\n        // Then\n        assertNotNull(actualResponse);\n        assertEquals(request.getName(), actualResponse.getName());\n        assertEquals(request.getLeaderId(), actualResponse.getLeaderId());\n\n        Org actualSaved = orgRepository.findById(preparedOrg.getTenantId(), preparedOrg.getId()).orElse(null);\n        assertNotNull(actualSaved);\n        assertEquals(request.getName(), actualSaved.getName());\n        assertEquals(request.getLeaderId(), actualSaved.getLeaderId());\n\n    }\n\n    @Test", "    public void cancelOrg_should_cancel_when_org_exists() {\n        //Given\n        Org preparedOrg = prepareOrgTobeUpdated();\n\n        // When\n        Long canceledId = orgService.cancelOrg(preparedOrg.getTenantId(),preparedOrg.getId(), 1L);\n\n        // Then\n        Org canceledOrg = orgRepository.findById(preparedOrg.getTenantId(), preparedOrg.getId())\n                .orElseGet(Assertions::fail);\n\n        assertTrue(canceledOrg.isCanceled());\n        assertEquals(preparedOrg.getId(), canceledId);\n\n    }\n\n    private UpdateOrgBasicRequest buildUpdateRequest() {\n        UpdateOrgBasicRequest request = new UpdateOrgBasicRequest();\n        request.setTenantId(DEFAULT_TENANT_ID);\n        request.setLeaderId(DEFAULT_USER_ID);\n        request.setName(\"\u805a\u4e49\u5385\");\n        return request;\n    }\n\n    private Org prepareOrgTobeUpdated() {\n        OrgReBuilder orgReBuilder = orgReBuilderFactory.build();\n        Org org = orgReBuilder\n                .tenantId(DEFAULT_TENANT_ID)\n                .superiorId(DEFAULT_ORG_ID)\n                .orgTypeCode(\"DEVCENT\")\n                .leaderId(DEFAULT_EMP_ID)\n                .name(\"\u5fe0\u4e49\u5802\")\n                .statusCode(OrgStatus.EFFECTIVE.code())\n                .createdAt(LocalDateTime.now())\n                .createdBy(DEFAULT_USER_ID)\n                .build();\n        orgRepository.save(org);\n        return org;\n    }\n}"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/domain/orgmng/org/OrgStatusTest.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass OrgStatusTest {\n\n    @Test", "\n    @Test\n    void ofCode() {\n        assertEquals(OrgStatus.EFFECTIVE, OrgStatus.ofCode(\"EF\"));\n\n        assertEquals(OrgStatus.CANCELLED, OrgStatus.ofCode(\"CA\"));\n\n        assertThrows(BusinessException.class, () -> OrgStatus.ofCode(\"XX\"));\n    }\n}", "    }\n}"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/domain/orgmng/org/validator/OrgNameValidatorTest.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.org.OrgRepository;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n", "import org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\nclass OrgNameValidatorTest {\n\n    static final String DEFAULT_EMP_NAME = \"\u738b\u6559\u5934\";\n    static final long DEFAULT_TENANT_ID = 1L;", "    static final String DEFAULT_EMP_NAME = \"\u738b\u6559\u5934\";\n    static final long DEFAULT_TENANT_ID = 1L;\n    static final long DEFAULT_ORG_ID = 1L;\n\n    @Mock\n    private OrgRepository orgRepository;\n\n    @InjectMocks\n    private OrgNameValidator validator;\n", "    private OrgNameValidator validator;\n\n    @Test\n    public void nameShouldNotDuplicatedInSameSuperior_shouldThrowException_whenDuplicated() {\n        setupExists(true);\n\n        assertThrows(BusinessException.class,\n                () -> validator.shouldNotDuplicatedInSameSuperior(\n                        DEFAULT_TENANT_ID\n                        , DEFAULT_ORG_ID\n                        , DEFAULT_EMP_NAME));\n\n        verifyCallExistsBySuperiorIdAndName();\n    }\n\n    @Test", "    public void nameShouldNotDuplicatedInSameSuperior_shouldNotThrowException_whenNotDuplicated() {\n        setupExists(false);\n\n        validator.shouldNotDuplicatedInSameSuperior(\n                DEFAULT_TENANT_ID\n                , DEFAULT_ORG_ID\n                , DEFAULT_EMP_NAME);\n\n        verifyCallExistsBySuperiorIdAndName();\n    }\n\n    private void setupExists(boolean exists) {\n        when(orgRepository.existsBySuperiorIdAndName(\n                DEFAULT_TENANT_ID\n                , DEFAULT_ORG_ID\n                , DEFAULT_EMP_NAME))\n                .thenReturn(exists);\n    }\n\n    private void verifyCallExistsBySuperiorIdAndName() {\n        verify(orgRepository, times(1)).existsBySuperiorIdAndName(\n                DEFAULT_TENANT_ID\n                , DEFAULT_ORG_ID\n                , DEFAULT_EMP_NAME);\n    }\n\n\n}"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/common/util/StringUtilTest.java", "chunked_list": ["package demo.unjuanable.common.util;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.util.StringUtils;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass StringUtilTest {\n\n    @Test", "\n    @Test\n    void isBlank() {\n        assertTrue(StringUtils.isBlank(null));\n        assertTrue(StringUtils.isBlank(\"\"));\n        assertTrue(StringUtils.isBlank(\" \"));\n\n        assertFalse(StringUtils.isBlank(\"hello\"));\n        assertFalse(StringUtils.isBlank(\"  hello  \"));\n    }", "        assertFalse(StringUtils.isBlank(\"  hello  \"));\n    }\n}\n\n"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/adapter/driven/persistence/orgmng/EmpRepositoryIT.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.orgmng;\n\nimport demo.unjuanable.domain.orgmng.emp.EmpRepository;\nimport demo.unjuanable.domain.orgmng.emp.EmpStatus;\nimport demo.unjuanable.domain.orgmng.org.Org;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;", "import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@Transactional\nclass EmpRepositoryIT {", "@Transactional\nclass EmpRepositoryIT {\n\n    @Autowired\n    private EmpRepository empRepository;\n\n    @Test\n    public void existsByIdAndStatus_shouldBeTrue_whenExists() {\n\n        boolean found = empRepository.existsByIdAndStatus( 1L ,1L ,EmpStatus.REGULAR);\n\n        assertTrue(found);\n    }\n\n    @Test", "    public void existsByIdAndStatus_shouldBeFalse_whenNotExists() {\n\n        boolean found = empRepository.existsByIdAndStatus( 1L ,1L ,EmpStatus.TERMINATED);\n\n        assertFalse(found);\n    }\n}"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/adapter/driven/persistence/orgmng/OrgRepositoryIT.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.orgmng;\n\nimport demo.unjuanable.domain.orgmng.org.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;\n", "import org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@Transactional", "@SpringBootTest\n@Transactional\nclass OrgRepositoryIT {\n    static final Long DEFAULT_ORG_ID = 1L;\n    static final Long DEFAULT_USER_ID = 1L;\n    static final long DEFAULT_TENANT_ID = 1L;\n    static final long DEFAULT_EMP_ID = 1L;\n    final private OrgRepository orgRepository;\n    private OrgReBuilderFactory orgReBuilderFactory;\n", "    private OrgReBuilderFactory orgReBuilderFactory;\n\n    @Autowired\n    OrgRepositoryIT(OrgRepository orgRepository, OrgReBuilderFactory orgReBuilderFactory) {\n        this.orgRepository = orgRepository;\n        this.orgReBuilderFactory = orgReBuilderFactory;\n    }\n\n    @Test\n    void save_successfully() {", "    @Test\n    void save_successfully() {\n        Org org = new Org(1L, \"DEVCET\", LocalDateTime.now(), 1L);\n        org.setName(\"\u5927\u540d\u5e9c\");\n        org.setLeaderId(1L);\n        org.setSuperiorId(1L);\n\n        Org created = orgRepository.save(org);\n\n        assertNotNull(created.getId());", "\n        assertNotNull(created.getId());\n    }\n\n    @Test\n    void findById_notfound() {\n        Optional<Org> org = orgRepository.findById(1L, -1L);\n        assertTrue(org.isEmpty());\n    }\n", "    }\n\n    @Test\n    public void existsBySuperiorIdAndName_shouldBeTrue_whenExists() {\n        //given\n        Org org = prepareOrg();\n\n        //when\n        boolean found = orgRepository.existsBySuperiorIdAndName(\n                org.getTenantId(),\n                org.getSuperiorId(),\n                org.getName());\n\n        assertTrue(found);\n    }\n\n    @Test", "    public void existsBySuperiorIdAndName_shouldBeFalse_whenExists() {\n\n        boolean found = orgRepository.existsBySuperiorIdAndName(\n                DEFAULT_TENANT_ID\n                , DEFAULT_EMP_ID\n                , \"\u67d0\u67d0\u67d0\");\n\n        assertFalse(found);\n    }\n\n    private Org prepareOrg() {\n        OrgReBuilder orgReBuilder = orgReBuilderFactory.build();\n        Org org = orgReBuilder\n                .tenantId(DEFAULT_TENANT_ID)\n                .superiorId(DEFAULT_ORG_ID)\n                .orgTypeCode(\"DEVCENT\")\n                .leaderId(DEFAULT_EMP_ID)\n                .name(\"\u5fe0\u4e49\u5802\")\n                .statusCode(OrgStatus.EFFECTIVE.code())\n                .createdAt(LocalDateTime.now())\n                .createdBy(DEFAULT_USER_ID)\n                .build();\n        orgRepository.save(org);\n        return org;\n    }\n}"]}
{"filename": "unjuanable/src/test/java/demo/unjuanable/adapter/driven/persistence/tenantmng/TenantRepositoryIT.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.tenantmng;\n\nimport demo.unjuanable.domain.tenantmng.Tenant;\nimport demo.unjuanable.domain.tenantmng.TenantStatus;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;", "import org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@Transactional", "@SpringBootTest\n@Transactional\nclass TenantRepositoryIT {\n    private final TenantRepositoryJdbc tenantRepository;\n\n    @Autowired\n    TenantRepositoryIT(TenantRepositoryJdbc tenantRepository) {\n        this.tenantRepository = tenantRepository;\n    }\n", "    }\n\n    @Test\n    public void existsByIdAndStatus_shouldBeTrue_whenExists() {\n        //given\n        Tenant tenant = prepareTenant();\n\n        //when\n        boolean found = tenantRepository.existsByIdAndStatus(\n                tenant.getId(),\n                tenant.getStatus());\n\n        //then\n        assertTrue(found);\n    }\n\n    @Test", "    public void existsByIdAndStatus_shouldBeFalse_whenNotExists() {\n        //given\n        Tenant tenant = prepareTenant();\n\n        //when\n        boolean found = tenantRepository.existsByIdAndStatus(\n                tenant.getId(),\n                TenantStatus.TERMINATED);\n\n        //then\n        assertFalse(found);\n    }\n\n    private Tenant prepareTenant() {\n        Tenant result = new Tenant(LocalDateTime.now(), 1L);\n        result.setName(\"\u67d0\u67d0\u67d0\");\n        tenantRepository.save(result);\n        return result;\n    }\n}"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/UnjuanableApplication.java", "chunked_list": ["package demo.unjuanable;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport springfox.documentation.oas.annotations.EnableOpenApi;\n\n/*\n * To use swagger-ui 3.0.0:\n * url: http://localhost:8080/swagger-ui/index.html\n * add to application.yml:", " * url: http://localhost:8080/swagger-ui/index.html\n * add to application.yml:\n *   spring:\n *     mvc:\n *       pathmatch:\n *         matching-strategy: ANT_PATH_MATCHER\n */\n@EnableOpenApi\n@SpringBootApplication\npublic class UnjuanableApplication {\n", "@SpringBootApplication\npublic class UnjuanableApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(UnjuanableApplication.class, args);\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/application/orgmng/orgservice/CreateOrgRequest.java", "chunked_list": ["package demo.unjuanable.application.orgmng.orgservice;\n\npublic class CreateOrgRequest {\n    private Long tenant;\n    private Long superior;\n    private String orgType;\n    private Long leader;\n    private String name;\n\n    public Long getTenantId() {\n        return tenant;\n    }\n", "    public Long getTenantId() {\n        return tenant;\n    }\n\n    public void setTenant(Long tenant) {\n        this.tenant = tenant;\n    }\n\n    public Long getSuperiorId() {\n        return superior;\n    }\n", "    public Long getSuperiorId() {\n        return superior;\n    }\n\n    public void setSuperior(Long superior) {\n        this.superior = superior;\n    }\n\n    public String getOrgTypeCode() {\n        return orgType;\n    }\n", "    public String getOrgTypeCode() {\n        return orgType;\n    }\n\n    public void setOrgType(String orgType) {\n        this.orgType = orgType;\n    }\n\n    public Long getLeaderId() {\n        return leader;\n    }\n", "    public Long getLeaderId() {\n        return leader;\n    }\n\n    public void setLeader(Long leader) {\n        this.leader = leader;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"OrgDto{ tenant=\" + tenant +\n                \", superior=\" + superior +\n                \", orgType='\" + orgType + '\\'' +\n                \", leader=\" + leader +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"OrgDto{ tenant=\" + tenant +\n                \", superior=\" + superior +\n                \", orgType='\" + orgType + '\\'' +\n                \", leader=\" + leader +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/application/orgmng/orgservice/UpdateOrgBasicRequest.java", "chunked_list": ["package demo.unjuanable.application.orgmng.orgservice;\n\n// tenant should not blank\n// tenant should be valid\n// superior ...\n// org type should be valid\n// leader should be valid\n// name should not blank\n// created user should not blank\n\npublic class UpdateOrgBasicRequest {\n    private Long tenantId;\n    private Long leaderId;\n    private String name;\n", "// created user should not blank\n\npublic class UpdateOrgBasicRequest {\n    private Long tenantId;\n    private Long leaderId;\n    private String name;\n\n    public Long getTenantId() {\n        return tenantId;\n    }\n", "    public void setTenantId(Long tenantId) {\n        this.tenantId = tenantId;\n    }\n\n    public Long getLeaderId() {\n        return leaderId;\n    }\n\n    public void setLeaderId(Long leaderId) {\n        this.leaderId = leaderId;\n    }\n", "    public void setLeaderId(Long leaderId) {\n        this.leaderId = leaderId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override", "    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"OrgDto{\" + \" tenant=\" + tenantId +\n                \", leader=\" + leaderId +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/application/orgmng/orgservice/OrgResponse.java", "chunked_list": ["package demo.unjuanable.application.orgmng.orgservice;\n\n// tenant should not blank\n// tenant should be valid\n// superior ...\n// org type should be valid\n// leader should be valid\n// name should not blank\n// created user should not blank\n", "// created user should not blank\n\nimport java.time.LocalDateTime;\n\npublic class OrgResponse {\n\n    private Long id;\n    private Long tenantId;\n    private Long superiorId;\n    private String orgTypeCode;\n    private Long leaderId;\n    private String name;\n    private String statusCode;\n    private LocalDateTime createdAt;\n    private Long createdBy;\n    private LocalDateTime lastUpdatedAt;\n    private Long lastUpdatedBy;\n", "    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n\n    public Long getTenantId() {\n        return tenantId;\n    }\n", "    public Long getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(Long tenantId) {\n        this.tenantId = tenantId;\n    }\n\n    public Long getSuperiorId() {\n        return superiorId;\n    }\n", "    public Long getSuperiorId() {\n        return superiorId;\n    }\n\n    public void setSuperiorId(Long superiorId) {\n        this.superiorId = superiorId;\n    }\n\n    public String getOrgTypeCode() {\n        return orgTypeCode;\n    }\n", "    public String getOrgTypeCode() {\n        return orgTypeCode;\n    }\n\n    public void setOrgTypeCode(String orgTypeCode) {\n        this.orgTypeCode = orgTypeCode;\n    }\n\n    public Long getLeaderId() {\n        return leaderId;\n    }\n", "    public Long getLeaderId() {\n        return leaderId;\n    }\n\n    public void setLeaderId(Long leaderId) {\n        this.leaderId = leaderId;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getStatusCode() {\n        return statusCode;\n    }\n", "    public String getStatusCode() {\n        return statusCode;\n    }\n\n    public void setStatusCode(String statusCode) {\n        this.statusCode = statusCode;\n    }\n\n    public LocalDateTime getCreatedAt() {\n        return createdAt;\n    }\n", "    public LocalDateTime getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(LocalDateTime createdAt) {\n        this.createdAt = createdAt;\n    }\n\n\n    public Long getCreatedBy() {\n        return createdBy;\n    }\n", "    public Long getCreatedBy() {\n        return createdBy;\n    }\n\n    public void setCreatedBy(Long createdBy) {\n        this.createdBy = createdBy;\n    }\n\n\n    public LocalDateTime getLastUpdatedAt() {\n        return lastUpdatedAt;\n    }\n", "    public LocalDateTime getLastUpdatedAt() {\n        return lastUpdatedAt;\n    }\n\n    public void setLastUpdatedAt(LocalDateTime lastUpdatedAt) {\n        this.lastUpdatedAt = lastUpdatedAt;\n    }\n\n\n    public Long getLastUpdatedBy() {\n        return lastUpdatedBy;\n    }\n", "    public Long getLastUpdatedBy() {\n        return lastUpdatedBy;\n    }\n\n    public void setLastUpdatedBy(Long lastUpdatedBy) {\n        this.lastUpdatedBy = lastUpdatedBy;\n    }\n\n    @Override\n    public String toString() {\n        return \"OrgDto{\" + \"id=\" + id +\n                \", tenant=\" + tenantId +\n                \", superior=\" + superiorId +\n                \", orgType='\" + orgTypeCode + '\\'' +\n                \", leader=\" + leaderId +\n                \", name='\" + name + '\\'' +\n                \", createdAt=\" + createdAt +\n                \", createdBy=\" + createdBy +\n                \", lastUpdatedAt=\" + lastUpdatedAt +\n                \", lastUpdatedBy=\" + lastUpdatedBy +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"OrgDto{\" + \"id=\" + id +\n                \", tenant=\" + tenantId +\n                \", superior=\" + superiorId +\n                \", orgType='\" + orgTypeCode + '\\'' +\n                \", leader=\" + leaderId +\n                \", name='\" + name + '\\'' +\n                \", createdAt=\" + createdAt +\n                \", createdBy=\" + createdBy +\n                \", lastUpdatedAt=\" + lastUpdatedAt +\n                \", lastUpdatedBy=\" + lastUpdatedBy +\n                '}';\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/application/orgmng/orgservice/OrgService.java", "chunked_list": ["package demo.unjuanable.application.orgmng.orgservice;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.org.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Optional;\n", "import java.util.Optional;\n\n@Service\npublic class OrgService {\n    private final OrgBuilderFactory orgBuilderFactory;\n    private final OrgRepository orgRepository;\n    private final OrgHandler orgHandler;\n\n    @Autowired\n    public OrgService(OrgBuilderFactory orgBuilderFactory\n            , OrgHandler orgHandler\n            , OrgRepository orgRepository) {\n        this.orgBuilderFactory = orgBuilderFactory;\n        this.orgHandler = orgHandler;\n        this.orgRepository = orgRepository;\n    }\n\n    @Transactional", "    public OrgResponse addOrg(CreateOrgRequest request, Long userId) {\n        OrgBuilder builder = orgBuilderFactory.create();\n\n        Org org = builder.tenantId(request.getTenantId())\n                .orgTypeCode(request.getOrgTypeCode())\n                .leaderId(request.getLeaderId())\n                .superiorId(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();\n\n        org = orgRepository.save(org);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional", "    public OrgResponse updateOrgBasic(Long id, UpdateOrgBasicRequest request, Long userId) {\n        Org org = orgRepository.findById(request.getTenantId(), id)\n                .orElseThrow(() -> {\n                    throw new BusinessException(\"\u8981\u4fee\u6539\u7684\u7ec4\u7ec7(id =\" + id + \"  )\u4e0d\u5b58\u5728\uff01\");\n                });\n\n        orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);\n        orgRepository.update(org);\n\n        return buildOrgDto(org);\n    }\n\n    @Transactional", "    public Long cancelOrg(Long tenant, Long id, Long userId) {\n        Org org = orgRepository.findById(tenant, id)\n                .orElseThrow(() -> {\n                    throw new BusinessException(\"\u8981\u53d6\u6d88\u7684\u7ec4\u7ec7(id =\" + id + \"  )\u4e0d\u5b58\u5728\uff01\");\n                });\n\n        orgHandler.cancel(org, userId);\n        orgRepository.update(org);\n\n        return org.getId();\n    }\n\n    public Optional<Org> findOrgById(Long tenantId, Long id) {\n        return orgRepository.findById(tenantId, id);\n    }\n\n    private static OrgResponse buildOrgDto(Org org) {\n        OrgResponse response = new OrgResponse();\n        response.setId(org.getId());\n        response.setTenantId(org.getTenantId());\n        response.setOrgTypeCode(org.getOrgTypeCode());\n        response.setName(org.getName());\n        response.setLeaderId(org.getLeaderId());\n        response.setSuperiorId(org.getSuperiorId());\n        response.setStatusCode(org.getStatus().code());\n        response.setCreatedBy(org.getCreatedBy());\n        response.setCreatedAt(org.getCreatedAt());\n        response.setLastUpdatedBy(org.getLastUpdatedBy());\n        response.setLastUpdatedAt(org.getLastUpdatedAt());\n        return response;\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/common/validator/CommonTenantValidator.java", "chunked_list": ["package demo.unjuanable.domain.common.validator;\n\nimport demo.unjuanable.adapter.driven.persistence.tenantmng.TenantRepositoryJdbc;\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.tenantmng.TenantStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CommonTenantValidator {\n    private final TenantRepositoryJdbc tenantRepository;\n\n    @Autowired\n    public CommonTenantValidator(TenantRepositoryJdbc tenantRepository) {\n        this.tenantRepository = tenantRepository;\n    }\n", "@Component\npublic class CommonTenantValidator {\n    private final TenantRepositoryJdbc tenantRepository;\n\n    @Autowired\n    public CommonTenantValidator(TenantRepositoryJdbc tenantRepository) {\n        this.tenantRepository = tenantRepository;\n    }\n\n    public void shouldEffective(Long tenant) {\n        // \u79df\u6237\u5fc5\u987b\u6709\u6548", "    public void shouldEffective(Long tenant) {\n        // \u79df\u6237\u5fc5\u987b\u6709\u6548\n        if (!tenantRepository.existsByIdAndStatus(tenant, TenantStatus.EFFECTIVE)) {\n            throw new BusinessException(\"id\u4e3a'\" + tenant + \"'\u7684\u79df\u6237\u4e0d\u662f\u6709\u6548\u79df\u6237\uff01\");\n        }\n    }\n\n}"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/common/exception/DirtyDataException.java", "chunked_list": ["package demo.unjuanable.domain.common.exception;\n\npublic class DirtyDataException extends RuntimeException {\n    public DirtyDataException(String msg) {\n        super(msg);\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/common/exception/BusinessException.java", "chunked_list": ["package demo.unjuanable.domain.common.exception;\n\npublic class BusinessException extends RuntimeException {\n    public BusinessException(String msg) {\n        super(msg);\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/orgtype/OrgTypeRepository.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.orgtype;\n\npublic interface OrgTypeRepository {\n    boolean existsByCodeAndStatus(long tenant, String code, OrgTypeStatus status);\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/orgtype/OrgType.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.orgtype;\n\n\nimport demo.unjuanable.common.framework.domain.AuditableEntity;\n\nimport java.time.LocalDateTime;\n\npublic class OrgType extends AuditableEntity {\n\n  private String code;\n  private long tenant;\n  private String name;\n  private OrgTypeStatus status;\n\n  public OrgType(LocalDateTime createdAt, Long createdBy) {\n    super(createdAt, createdBy);\n  }\n", "  public String getCode() {\n    return code;\n  }\n\n  public void setCode(String code) {\n    this.code = code;\n  }\n\n\n  public long getTenant() {\n    return tenant;\n  }\n", "  public long getTenant() {\n    return tenant;\n  }\n\n  public void setTenant(long tenant) {\n    this.tenant = tenant;\n  }\n\n\n  public String getName() {\n    return name;\n  }\n", "  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public void setLastUpdatedAt(LocalDateTime lastUpdatedAt) {\n    this.lastUpdatedAt = lastUpdatedAt;\n  }\n\n", "  public void setLastUpdatedAt(LocalDateTime lastUpdatedAt) {\n    this.lastUpdatedAt = lastUpdatedAt;\n  }\n\n\n  public void setLastUpdatedBy(long lastUpdatedBy) {\n    this.lastUpdatedBy = lastUpdatedBy;\n  }\n\n\n  public OrgTypeStatus getStatus() {\n    return status;\n  }\n", "  public OrgTypeStatus getStatus() {\n    return status;\n  }\n\n  public void setStatus(OrgTypeStatus status) {\n    this.status = status;\n  }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/orgtype/OrgTypeStatus.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.orgtype;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\n\nimport java.util.Arrays;\n\npublic enum OrgTypeStatus {\n    EFFECTIVE(\"EF\", \"\u6709\u6548\"),\n    TERMINATED(\"EF\", \"\u7ec8\u6b62\");\n\n    private final String code;\n    private final String desc;\n", "    public static OrgTypeStatus ofCode(String code) {\n        return Arrays.stream(values())\n                .filter( s -> s.code.equals(code))\n                .findAny()\n                .orElseThrow(() -> new BusinessException(code + \"\u4e0d\u662f\u6709\u6548\u7684\u7ec4\u7ec7\u7c7b\u578b\u72b6\u6001\u4ee3\u7801\uff01\"));\n    }\n\n    OrgTypeStatus(String code, String desc) {\n        this.code = code;\n        this.desc = desc;\n\n    }\n", "    public String code() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgReBuilderFactory.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class OrgReBuilderFactory {\n\n    public OrgReBuilder build() {\n        return new OrgReBuilder();\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgRepository.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport java.util.Optional;\n\npublic interface OrgRepository {\n    Org save(Org org);\n\n    Optional<Org> findById(Long tenantId, Long id);\n\n    Optional<Org> findByIdAndStatus(Long tenantId, Long id, OrgStatus status);\n\n    boolean existsBySuperiorIdAndName(Long tenant, Long superior, String name);\n    int update(Org org);\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgStatus.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\n\nimport java.util.Arrays;\n\npublic enum OrgStatus {\n    EFFECTIVE(\"EF\", \"\u6709\u6548\"),\n    CANCELLED(\"CA\", \"\u7ec8\u6b62\");\n\n    private final String code;\n    private final String desc;\n", "    public static OrgStatus ofCode(String code) {\n        return Arrays.stream(values())\n                .filter( s -> s.code.equals(code))\n                .findAny()\n                .orElseThrow(() -> new BusinessException(code + \"\u4e0d\u662f\u6709\u6548\u7684\u7ec4\u7ec7\u72b6\u6001\u4ee3\u7801\uff01\"));\n    }\n\n    OrgStatus(String code, String desc) {\n        this.code = code;\n        this.desc = desc;\n    }\n", "    public String code() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/Org.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport demo.unjuanable.common.framework.domain.AuditableEntity;\n\nimport java.time.LocalDateTime;\n\npublic class Org extends AuditableEntity {\n    private final Long tenantId;\n    private Long id;\n    private Long superiorId;\n    private String orgTypeCode;\n    private Long leaderId;\n    private String name;\n    private OrgStatus status;\n\n    public Org(Long tenantId, String orgTypeCode, LocalDateTime createdAt, Long createdBy) {\n        super(createdAt, createdBy);\n        this.tenantId = tenantId;\n        this.orgTypeCode = orgTypeCode;\n        status = OrgStatus.EFFECTIVE;\n    }\n", "    public Long getId() {\n        return id;\n    }\n\n    public Long getTenantId() {\n        return tenantId;\n    }\n\n    public Long getSuperiorId() {\n        return superiorId;\n    }\n", "    public Long getSuperiorId() {\n        return superiorId;\n    }\n\n    public String getOrgTypeCode() {\n        return orgTypeCode;\n    }\n\n    public Long getLeaderId() {\n        return leaderId;\n    }\n", "    public Long getLeaderId() {\n        return leaderId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public OrgStatus getStatus() {\n        return status;\n    }\n", "    public OrgStatus getStatus() {\n        return status;\n    }\n\n    public boolean isEffective() {\n        return status.equals(OrgStatus.EFFECTIVE);\n    }\n\n    public boolean isCanceled() {\n        return status.equals(OrgStatus.CANCELLED);\n    }\n", "    public boolean isCanceled() {\n        return status.equals(OrgStatus.CANCELLED);\n    }\n\n    public void setSuperiorId(Long superiorId) {\n        this.superiorId = superiorId;\n    }\n\n    public void setLeaderId(Long leaderId) {\n        this.leaderId = leaderId;\n    }\n", "    public void setLeaderId(Long leaderId) {\n        this.leaderId = leaderId;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setStatus(OrgStatus status) {\n        this.status = status;\n    }\n", "    public void setStatus(OrgStatus status) {\n        this.status = status;\n    }\n\n    public void cancel() {\n        this.status = OrgStatus.CANCELLED;\n    }\n\n    void setId(Long id) {\n        this.id = id;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgReBuilder.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\n\nimport java.time.LocalDateTime;\n\n// \u7528\u4e8e\u4ece\u6570\u636e\u5e93\u91cd\u5efaOrg\uff0c\u5047\u8bbe\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u65f6\u5e72\u51c0\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c\u3002\npublic class OrgReBuilder {\n    private Long id;\n    private Long tenantId;\n    private Long superiorId;\n    private String orgTypeCode;\n    private Long leaderId;\n    private String name;\n    private String statusCode;\n\n    private LocalDateTime createdAt;\n    private Long createdBy;\n    private LocalDateTime lastUpdatedAt;\n    private Long lastUpdatedBy;\n", "    public OrgReBuilder tenantId(Long tenantId) {\n        this.tenantId = tenantId;\n        return this;\n    }\n\n    public OrgReBuilder id(Long id) {\n        this.id = id;\n        return this;\n    }\n\n    public OrgReBuilder superiorId(Long superiorId) {\n        this.superiorId = superiorId;\n        return this;\n    }\n", "    public OrgReBuilder superiorId(Long superiorId) {\n        this.superiorId = superiorId;\n        return this;\n    }\n\n    public OrgReBuilder orgTypeCode(String orgTypeCode) {\n        this.orgTypeCode = orgTypeCode;\n        return this;\n    }\n\n    public OrgReBuilder leaderId(Long leaderId) {\n        this.leaderId = leaderId;\n        return this;\n    }\n", "    public OrgReBuilder leaderId(Long leaderId) {\n        this.leaderId = leaderId;\n        return this;\n    }\n\n    public OrgReBuilder name(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public OrgReBuilder statusCode(String statusCode) {\n        this.statusCode = statusCode;\n        return this;\n    }\n", "    public OrgReBuilder statusCode(String statusCode) {\n        this.statusCode = statusCode;\n        return this;\n    }\n\n    public OrgReBuilder createdAt(LocalDateTime createdAt) {\n        this.createdAt = createdAt;\n        return this;\n    }\n\n    public OrgReBuilder createdBy(Long createdBy) {\n        this.createdBy = createdBy;\n        return this;\n    }\n", "    public OrgReBuilder createdBy(Long createdBy) {\n        this.createdBy = createdBy;\n        return this;\n    }\n\n    public OrgReBuilder lastCreatedAt(LocalDateTime lastUpdatedAt) {\n        this.lastUpdatedAt = lastUpdatedAt;\n        return this;\n    }\n\n    public OrgReBuilder lastUpdatedBy(Long lastUpdatedBy) {\n        this.lastUpdatedBy = lastUpdatedBy;\n        return this;\n    }\n", "    public OrgReBuilder lastUpdatedBy(Long lastUpdatedBy) {\n        this.lastUpdatedBy = lastUpdatedBy;\n        return this;\n    }\n\n    public Org build() {\n        Org org = new Org(tenantId, orgTypeCode, createdAt, createdBy);\n        org.setId(id);\n        org.setSuperiorId(this.superiorId);\n        org.setLeaderId(this.leaderId);\n        org.setName(this.name);\n        org.setStatus(OrgStatus.ofCode(statusCode));\n        org.setLastUpdatedAt(lastUpdatedAt);\n        org.setLastUpdatedBy(lastUpdatedBy);\n        return org;\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgBuilder.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\n\nimport demo.unjuanable.domain.common.validator.CommonTenantValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgLeaderValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgNameValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgTypeValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.SuperiorValidator;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgType;\n", "import demo.unjuanable.domain.orgmng.orgtype.OrgType;\n\nimport java.time.LocalDateTime;\n\npublic class OrgBuilder {\n    private final CommonTenantValidator assertOrgTenant;\n    private final OrgTypeValidator assertOrgType;\n    private final SuperiorValidator assertSuperior;\n    private final OrgNameValidator assertOrgName;\n    private final OrgLeaderValidator assertOrgLeader;\n\n    private Long tenantId;\n    private Long superiorId;\n    private String orgTypeCode;\n    private Long leaderId;\n    private String name;\n    private Long createdBy;\n\n    OrgBuilder(CommonTenantValidator assertOrgTenant\n            , OrgTypeValidator assertOrgType\n            , SuperiorValidator assertSuperior\n            , OrgNameValidator assertOrgName\n            , OrgLeaderValidator assertOrgLeader) {\n\n        this.assertOrgTenant = assertOrgTenant;\n        this.assertOrgType = assertOrgType;\n        this.assertSuperior = assertSuperior;\n        this.assertOrgName = assertOrgName;\n        this.assertOrgLeader = assertOrgLeader;\n    }\n", "    public OrgBuilder tenantId(Long tenantId) {\n        this.tenantId = tenantId;\n        return this;\n    }\n\n    public OrgBuilder superiorId(Long superiorId) {\n        this.superiorId = superiorId;\n        return this;\n    }\n\n    public OrgBuilder orgTypeCode(String orgTypeCode) {\n        this.orgTypeCode = orgTypeCode;\n        return this;\n    }\n", "    public OrgBuilder orgTypeCode(String orgTypeCode) {\n        this.orgTypeCode = orgTypeCode;\n        return this;\n    }\n\n    public OrgBuilder leaderId(Long leaderId) {\n        this.leaderId = leaderId;\n        return this;\n    }\n\n    public OrgBuilder name(String name) {\n        this.name = name;\n        return this;\n    }\n", "    public OrgBuilder name(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public OrgBuilder createdBy(Long createdBy) {\n        this.createdBy = createdBy;\n        return this;\n    }\n\n    public Org build() {\n        validate();\n\n        Org org = new Org(tenantId, orgTypeCode, LocalDateTime.now(), createdBy);\n        org.setLeaderId(this.leaderId);\n        org.setName(this.name);\n        org.setSuperiorId(this.superiorId);\n\n        return org;\n    }\n\n    private void validate() {\n        validateOrgTenant();\n        validateOrgLeader();\n        validateOrgType();\n        validateSuperior();\n        validateOrgName();\n    }\n\n    private void validateOrgLeader() {\n        assertOrgLeader.shouldEffective(tenantId, leaderId);\n    }\n\n    private void validateOrgTenant() {\n        assertOrgTenant.shouldEffective(tenantId);\n    }\n\n    private void validateOrgName() {\n        assertOrgName.shouldNotEmpty(name);\n        assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);\n    }\n\n    private void validateSuperior() {\n        Org superiorOrg = assertSuperior.shouldEffective(tenantId, superiorId);\n        OrgType superiorOrgType = assertSuperior.orgTypeShouldEffective(tenantId, superiorId, superiorOrg);\n        assertSuperior.ofDevGroupMustDevCenter(superiorId, orgTypeCode, superiorOrgType);\n        assertSuperior.ofDevCenterAndDirectDeptMustEntp(superiorId, orgTypeCode, superiorOrgType);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldNotEmpty(orgTypeCode);\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n        assertOrgType.shouldNotEntp(orgTypeCode);\n    }\n\n\n}\n", "    public Org build() {\n        validate();\n\n        Org org = new Org(tenantId, orgTypeCode, LocalDateTime.now(), createdBy);\n        org.setLeaderId(this.leaderId);\n        org.setName(this.name);\n        org.setSuperiorId(this.superiorId);\n\n        return org;\n    }\n\n    private void validate() {\n        validateOrgTenant();\n        validateOrgLeader();\n        validateOrgType();\n        validateSuperior();\n        validateOrgName();\n    }\n\n    private void validateOrgLeader() {\n        assertOrgLeader.shouldEffective(tenantId, leaderId);\n    }\n\n    private void validateOrgTenant() {\n        assertOrgTenant.shouldEffective(tenantId);\n    }\n\n    private void validateOrgName() {\n        assertOrgName.shouldNotEmpty(name);\n        assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);\n    }\n\n    private void validateSuperior() {\n        Org superiorOrg = assertSuperior.shouldEffective(tenantId, superiorId);\n        OrgType superiorOrgType = assertSuperior.orgTypeShouldEffective(tenantId, superiorId, superiorOrg);\n        assertSuperior.ofDevGroupMustDevCenter(superiorId, orgTypeCode, superiorOrgType);\n        assertSuperior.ofDevCenterAndDirectDeptMustEntp(superiorId, orgTypeCode, superiorOrgType);\n    }\n\n    private void validateOrgType() {\n        assertOrgType.shouldNotEmpty(orgTypeCode);\n        assertOrgType.shouldEffective(tenantId, orgTypeCode);\n        assertOrgType.shouldNotEntp(orgTypeCode);\n    }\n\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgBuilderFactory.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport demo.unjuanable.domain.common.validator.CommonTenantValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgLeaderValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgNameValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgTypeValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.SuperiorValidator;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\n@Component\npublic class OrgBuilderFactory {\n    private final CommonTenantValidator commonTenantValidator;\n    private final OrgTypeValidator orgTypeValidator;\n    private final SuperiorValidator superiorValidator;\n    private final OrgNameValidator orgNameValidator;\n    private final OrgLeaderValidator orgLeaderValidator;\n\n    @Autowired\n    public OrgBuilderFactory(CommonTenantValidator commonTenantValidator\n            , OrgTypeValidator orgTypeValidator\n            , SuperiorValidator superiorValidator\n            , OrgNameValidator orgNameValidator\n            , OrgLeaderValidator orgLeaderValidator) {\n\n        this.commonTenantValidator = commonTenantValidator;\n        this.orgTypeValidator = orgTypeValidator;\n        this.superiorValidator = superiorValidator;\n        this.orgNameValidator = orgNameValidator;\n        this.orgLeaderValidator = orgLeaderValidator;\n    }\n", "    public OrgBuilder create() {\n        return new OrgBuilder(commonTenantValidator\n                , orgTypeValidator\n                , superiorValidator\n                , orgNameValidator\n                , orgLeaderValidator);\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/OrgHandler.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org;\n\nimport demo.unjuanable.domain.orgmng.org.validator.CancelOrgValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgLeaderValidator;\nimport demo.unjuanable.domain.orgmng.org.validator.OrgNameValidator;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\n\n@Component\npublic class OrgHandler {\n    private final OrgNameValidator assertOrgName;\n    private final OrgLeaderValidator assertOrgLeader;\n    private final CancelOrgValidator assertOrgToBeCanceled;\n\n    public OrgHandler( OrgNameValidator assertOrgName\n            , OrgLeaderValidator assertOrgLeader\n            , CancelOrgValidator assertOrgToBeCanceled) {\n\n        this.assertOrgName = assertOrgName;\n        this.assertOrgLeader = assertOrgLeader;\n        this.assertOrgToBeCanceled = assertOrgToBeCanceled;\n    }\n", "\n@Component\npublic class OrgHandler {\n    private final OrgNameValidator assertOrgName;\n    private final OrgLeaderValidator assertOrgLeader;\n    private final CancelOrgValidator assertOrgToBeCanceled;\n\n    public OrgHandler( OrgNameValidator assertOrgName\n            , OrgLeaderValidator assertOrgLeader\n            , CancelOrgValidator assertOrgToBeCanceled) {\n\n        this.assertOrgName = assertOrgName;\n        this.assertOrgLeader = assertOrgLeader;\n        this.assertOrgToBeCanceled = assertOrgToBeCanceled;\n    }\n", "    public void updateBasic(Org org, String newName, Long newLeader, Long userId) {\n        updateName(org, newName);\n        updateLeader(org, newLeader);\n        updateAuditInfo(org, userId);\n    }\n\n    public void cancel(Org org, Long userId) {\n        assertOrgToBeCanceled.shouldNotHasEmp(org.getTenantId(), org.getId());\n        assertOrgToBeCanceled.shouldEffective(org);\n        org.cancel();\n        updateAuditInfo(org, userId);\n    }\n\n    private void updateLeader(Org org, Long newLeader) {", "        if (newLeader != null && !newLeader.equals(org.getLeaderId())) {\n            assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);\n            org.setLeaderId(newLeader);\n        }\n    }\n\n    private void updateName(Org org, String newName) {\n        if (newName != null && !newName.equals(org.getName())) {\n            assertOrgName.shouldNotEmpty(newName);\n            assertOrgName.shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);\n            org.setName(newName);\n        }\n    }\n\n    private void updateAuditInfo(Org org, Long userId) {\n        org.setLastUpdatedBy(userId);\n        org.setLastUpdatedAt(LocalDateTime.now());\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/validator/CancelOrgValidator.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.emp.EmpRepository;\nimport demo.unjuanable.domain.orgmng.emp.EmpStatus;\nimport demo.unjuanable.domain.orgmng.org.Org;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CancelOrgValidator {\n\n    private final EmpRepository empRepository;\n\n    @Autowired\n    public CancelOrgValidator(EmpRepository empRepository) {\n        this.empRepository = empRepository;\n    }\n\n    // \u8981\u88ab\u64a4\u9500\u7684\u7ec4\u7ec7\u4e0d\u80fd\u6709\u4e0b\u5c5e\u5458\u5de5", "\n@Component\npublic class CancelOrgValidator {\n\n    private final EmpRepository empRepository;\n\n    @Autowired\n    public CancelOrgValidator(EmpRepository empRepository) {\n        this.empRepository = empRepository;\n    }\n\n    // \u8981\u88ab\u64a4\u9500\u7684\u7ec4\u7ec7\u4e0d\u80fd\u6709\u4e0b\u5c5e\u5458\u5de5", "    public void shouldNotHasEmp(Long tenant, Long id) {\n        if (empRepository.existsByIdAndStatus(tenant, id, EmpStatus.PROBATION, EmpStatus.REGULAR)) {\n            throw new BusinessException(\"\u8be5\u7ec4\u7ec7\u4e2d\u4ecd\u7136\u6709\u5458\u5de5\uff0c\u4e0d\u80fd\u64a4\u9500\uff01\");\n        }\n    }\n\n    // \u53ea\u6709\u6709\u6548\u7ec4\u7ec7\u624d\u80fd\u88ab\u64a4\u9500\n    public void shouldEffective(Org org) {\n        if (!org.isEffective()){\n            throw new BusinessException(\"\u8be5\u7ec4\u7ec7\u4e0d\u662f\u6709\u6548\u72b6\u6001\uff0c\u4e0d\u80fd\u64a4\u9500\uff01\");\n        }\n    }\n}\n", "        if (!org.isEffective()){\n            throw new BusinessException(\"\u8be5\u7ec4\u7ec7\u4e0d\u662f\u6709\u6548\u72b6\u6001\uff0c\u4e0d\u80fd\u64a4\u9500\uff01\");\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/validator/OrgNameValidator.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.org.OrgRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport static demo.unjuanable.common.util.StringUtil.isBlank;\n\n@Component\npublic class OrgNameValidator {\n    private final OrgRepository orgRepository;\n\n    @Autowired\n    OrgNameValidator(OrgRepository orgRepository) {\n        this.orgRepository = orgRepository;\n    }\n\n    // \u7ec4\u7ec7\u5fc5\u987b\u6709\u540d\u79f0", "\n@Component\npublic class OrgNameValidator {\n    private final OrgRepository orgRepository;\n\n    @Autowired\n    OrgNameValidator(OrgRepository orgRepository) {\n        this.orgRepository = orgRepository;\n    }\n\n    // \u7ec4\u7ec7\u5fc5\u987b\u6709\u540d\u79f0", "    public void shouldNotEmpty(String name) {\n        if (isBlank(name)) {\n            throw new BusinessException(\"\u7ec4\u7ec7\u6ca1\u6709\u540d\u79f0\uff01\");\n        }\n    }\n\n    // \u540c\u4e00\u4e2a\u7ec4\u7ec7\u4e0b\u7684\u4e0b\u7ea7\u7ec4\u7ec7\u4e0d\u80fd\u91cd\u540d\n    public void shouldNotDuplicatedInSameSuperior(Long tenantId, Long superiorId, String name) {\n        if (orgRepository.existsBySuperiorIdAndName(tenantId, superiorId, name)) {\n            throw new BusinessException(\"\u540c\u4e00\u4e0a\u7ea7\u4e0b\u5df2\u7ecf\u6709\u540d\u4e3a'\" + name + \"'\u7684\u7ec4\u7ec7\u5b58\u5728\uff01\");\n        }\n    }\n}\n", "        if (orgRepository.existsBySuperiorIdAndName(tenantId, superiorId, name)) {\n            throw new BusinessException(\"\u540c\u4e00\u4e0a\u7ea7\u4e0b\u5df2\u7ecf\u6709\u540d\u4e3a'\" + name + \"'\u7684\u7ec4\u7ec7\u5b58\u5728\uff01\");\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/validator/SuperiorValidator.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.adapter.driven.persistence.orgmng.OrgTypeRepositoryJdbc;\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.common.exception.DirtyDataException;\nimport demo.unjuanable.domain.orgmng.org.Org;\nimport demo.unjuanable.domain.orgmng.org.OrgRepository;\nimport demo.unjuanable.domain.orgmng.org.OrgStatus;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgType;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeStatus;", "import demo.unjuanable.domain.orgmng.orgtype.OrgType;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SuperiorValidator {\n    private final OrgTypeRepositoryJdbc orgTypeRepository;\n    private final OrgRepository orgRepository;\n\n    @Autowired\n    public SuperiorValidator(OrgTypeRepositoryJdbc orgTypeRepository, OrgRepository orgRepository) {\n        this.orgTypeRepository = orgTypeRepository;\n        this.orgRepository = orgRepository;\n    }\n\n    // \u4e0a\u7ea7\u7ec4\u7ec7\u5e94\u8be5\u662f\u6709\u6548\u7ec4\u7ec7", "    public Org shouldEffective(Long tenant, Long superior) {\n        return orgRepository.findByIdAndStatus(tenant\n                        , superior, OrgStatus.EFFECTIVE)\n                .orElseThrow(() ->\n                        new BusinessException(\"'\" + superior + \"' \u4e0d\u662f\u6709\u6548\u7684\u7ec4\u7ec7 id !\"));\n    }\n\n    public OrgType orgTypeShouldEffective(Long tenant, Long superior, Org superiorOrg) {\n        return orgTypeRepository.findByCodeAndStatus(tenant\n                        , superiorOrg.getOrgTypeCode()\n                        , OrgTypeStatus.EFFECTIVE)\n                .orElseThrow(() ->\n                        new DirtyDataException(\"id \u4e3a '\" + superior\n                                + \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));\n    }\n\n    // \u5f00\u53d1\u4e2d\u5fc3\u548c\u76f4\u5c5e\u90e8\u95e8\u7684\u4e0a\u7ea7\u53ea\u80fd\u662f\u4f01\u4e1a", "    public void ofDevCenterAndDirectDeptMustEntp(Long superior, String orgType, OrgType superiorOrgType) {\n        if ((\"DEVCENT\".equals(orgType) || \"DIRDEP\".equals(orgType))\n                && !\"ENTP\".equals(superiorOrgType.getCode())) {\n            throw new BusinessException(\"\u5f00\u53d1\u4e2d\u5fc3\u6216\u76f4\u5c5e\u90e8\u95e8\u7684\u4e0a\u7ea7(id = '\" + superior\n                    + \"')\u4e0d\u662f\u4f01\u4e1a\uff01\");\n        }\n    }\n\n    // \u5f00\u53d1\u7ec4\u7684\u4e0a\u7ea7\u53ea\u80fd\u662f\u5f00\u53d1\u4e2d\u5fc3\n    public void ofDevGroupMustDevCenter(Long superior, String orgType, OrgType superiorOrgType) {\n        if (\"DEVGRP\".equals(orgType) && !\"DEVCENT\".equals(superiorOrgType.getCode())) {\n            throw new BusinessException(\"\u5f00\u53d1\u7ec4\u7684\u4e0a\u7ea7(id = '\" + superior\n                    + \"')\u4e0d\u662f\u5f00\u53d1\u4e2d\u5fc3\uff01\");\n        }\n    }\n}\n", "    public void ofDevGroupMustDevCenter(Long superior, String orgType, OrgType superiorOrgType) {\n        if (\"DEVGRP\".equals(orgType) && !\"DEVCENT\".equals(superiorOrgType.getCode())) {\n            throw new BusinessException(\"\u5f00\u53d1\u7ec4\u7684\u4e0a\u7ea7(id = '\" + superior\n                    + \"')\u4e0d\u662f\u5f00\u53d1\u4e2d\u5fc3\uff01\");\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/validator/OrgLeaderValidator.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.emp.EmpStatus;\nimport demo.unjuanable.domain.orgmng.emp.EmpRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class OrgLeaderValidator {\n    private final EmpRepository empRepository;\n\n    @Autowired\n    OrgLeaderValidator(EmpRepository empRepository) {\n        this.empRepository = empRepository;\n    }\n\n    // \u7ec4\u7ec7\u8d1f\u8d23\u4eba\u53ef\u4ee5\u7a7a\u7f3a\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u5728\u804c\u5458\u5de5\uff08\u542b\u8bd5\u7528\u671f\uff09", "@Component\npublic class OrgLeaderValidator {\n    private final EmpRepository empRepository;\n\n    @Autowired\n    OrgLeaderValidator(EmpRepository empRepository) {\n        this.empRepository = empRepository;\n    }\n\n    // \u7ec4\u7ec7\u8d1f\u8d23\u4eba\u53ef\u4ee5\u7a7a\u7f3a\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u5728\u804c\u5458\u5de5\uff08\u542b\u8bd5\u7528\u671f\uff09\n    public void shouldEffective(Long tenant, Long leader) {", "    public void shouldEffective(Long tenant, Long leader) {\n        if (leader != null\n                && !empRepository.existsByIdAndStatus(tenant, leader\n                , EmpStatus.REGULAR, EmpStatus.PROBATION)) {\n            throw new BusinessException(\"\u7ec4\u7ec7\u8d1f\u8d23\u4eba(id='\" + leader + \"')\u4e0d\u662f\u5728\u804c\u5458\u5de5\uff01\");\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/org/validator/OrgTypeValidator.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.org.validator;\n\nimport demo.unjuanable.domain.common.exception.BusinessException;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeRepository;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport static demo.unjuanable.common.util.StringUtil.isBlank;\n", "import static demo.unjuanable.common.util.StringUtil.isBlank;\n\n@Component\npublic class OrgTypeValidator {\n    private final OrgTypeRepository orgTypeRepository;\n\n    @Autowired\n    OrgTypeValidator(OrgTypeRepository orgTypeRepository) {\n        this.orgTypeRepository = orgTypeRepository;\n    }\n\n    // \u7ec4\u7ec7\u7c7b\u522b\u4e0d\u80fd\u4e3a\u7a7a", "    public void shouldNotEmpty(String orgType) {\n        if (isBlank(orgType)) {\n            throw new BusinessException(\"\u7ec4\u7ec7\u7c7b\u522b\u4e0d\u80fd\u4e3a\u7a7a\uff01\");\n        }\n    }\n\n    // \u7ec4\u7ec7\u7c7b\u522b\u5fc5\u987b\u6709\u6548\n    public void shouldEffective(Long tenant, String orgType) {\n        if (!orgTypeRepository.existsByCodeAndStatus(tenant, orgType, OrgTypeStatus.EFFECTIVE)) {\n            throw new BusinessException(\"'\" + orgType + \"'\u4e0d\u662f\u6709\u6548\u7684\u7ec4\u7ec7\u7c7b\u522b\u4ee3\u7801\uff01\");\n        }\n    }\n\n    // \u4f01\u4e1a\u662f\u5728\u521b\u5efa\u79df\u6237\u7684\u65f6\u5019\u521b\u5efa\u597d\u7684\uff0c\u56e0\u6b64\u4e0d\u80fd\u5355\u72ec\u521b\u5efa\u4f01\u4e1a", "        if (!orgTypeRepository.existsByCodeAndStatus(tenant, orgType, OrgTypeStatus.EFFECTIVE)) {\n            throw new BusinessException(\"'\" + orgType + \"'\u4e0d\u662f\u6709\u6548\u7684\u7ec4\u7ec7\u7c7b\u522b\u4ee3\u7801\uff01\");\n        }\n    }\n\n    // \u4f01\u4e1a\u662f\u5728\u521b\u5efa\u79df\u6237\u7684\u65f6\u5019\u521b\u5efa\u597d\u7684\uff0c\u56e0\u6b64\u4e0d\u80fd\u5355\u72ec\u521b\u5efa\u4f01\u4e1a\n    public void shouldNotEntp(String orgType) {\n        if (\"ENTP\".equals(orgType)) {\n            throw new BusinessException(\"\u4f01\u4e1a\u662f\u5728\u521b\u5efa\u79df\u6237\u7684\u65f6\u5019\u521b\u5efa\u597d\u7684\uff0c\u56e0\u6b64\u4e0d\u80fd\u5355\u72ec\u521b\u5efa\u4f01\u4e1a!\");\n        }\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/emp/EmpStatus.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.emp;\n\npublic enum EmpStatus {\n    REGULAR(\"REG\", \"\u6b63\u5f0f\"),\n    PROBATION(\"PRO\", \"\u8bd5\u7528\u671f\"),\n    TERMINATED(\"TER\", \"\u7ec8\u6b62\");\n\n    private final String code;\n    private final String desc;\n\n    EmpStatus(String code, String desc) {\n        this.code = code;\n        this.desc = desc;\n    }\n", "    public String code() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/orgmng/emp/EmpRepository.java", "chunked_list": ["package demo.unjuanable.domain.orgmng.emp;\n\npublic interface EmpRepository {\n\n    boolean existsByIdAndStatus(Long tenant, Long id, EmpStatus... statuses);\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/tenantmng/Tenant.java", "chunked_list": ["package demo.unjuanable.domain.tenantmng;\n\nimport demo.unjuanable.common.framework.domain.AuditableEntity;\nimport demo.unjuanable.domain.orgmng.org.OrgStatus;\n\nimport java.time.LocalDateTime;\n\npublic class Tenant extends AuditableEntity {\n    private Long id;\n    private String name;\n    private TenantStatus status;\n\n    public Tenant(LocalDateTime createdAt, Long createdBy) {\n        super(createdAt, createdBy);\n        status = TenantStatus.EFFECTIVE;\n    }\n", "    public Long getId() {\n        return id;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setStatus(TenantStatus status) {\n        this.status = status;\n    }\n", "    public void setStatus(TenantStatus status) {\n        this.status = status;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public TenantStatus getStatus() {\n        return status;\n    }\n}\n", "    public TenantStatus getStatus() {\n        return status;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/tenantmng/TenantStatus.java", "chunked_list": ["package demo.unjuanable.domain.tenantmng;\n\npublic enum TenantStatus {\n    EFFECTIVE(\"EF\", \"\u6709\u6548\"),\n    TERMINATED(\"TERMINATED\", \"\u7ec8\u6b62\");\n\n    private final String code;\n    private final String desc;\n\n    TenantStatus(String code, String desc) {\n        this.code = code;\n        this.desc = desc;\n\n    }\n", "    public String code() {\n        return code;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/domain/tenantmng/TenantRepository.java", "chunked_list": ["package demo.unjuanable.domain.tenantmng;\n\npublic interface TenantRepository {\n    boolean existsByIdAndStatus(long tenantId, TenantStatus status);\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/common/util/SqlUtil.java", "chunked_list": ["package demo.unjuanable.common.util;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.time.LocalDateTime;\n\npublic final class SqlUtil {\n    private SqlUtil(){}\n\n    public static LocalDateTime toLocalDateTime(ResultSet rs, String fieldName) throws SQLException {\n        Timestamp ts = rs.getTimestamp(fieldName);\n        return ts == null ? null : ts.toLocalDateTime();\n    }\n\n}\n", "    public static LocalDateTime toLocalDateTime(ResultSet rs, String fieldName) throws SQLException {\n        Timestamp ts = rs.getTimestamp(fieldName);\n        return ts == null ? null : ts.toLocalDateTime();\n    }\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/common/util/ReflectUtil.java", "chunked_list": ["package demo.unjuanable.common.util;\n\n//import demo.unjuanable.domain.orgmng.org.Org;\n\nimport java.lang.reflect.Field;\n\npublic final class ReflectUtil {\n    private ReflectUtil() {}\n\n    public static void forceSet(Object theObj, String fieldName, Object fieldValue) {\n        try {\n            Field idField = theObj.getClass().getDeclaredField(fieldName);\n            idField.setAccessible(true);\n            idField.set(theObj, fieldValue);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(\"\u7f16\u7a0b\u9519\u8bef\uff01\");\n        }\n    }\n}\n", "    public static void forceSet(Object theObj, String fieldName, Object fieldValue) {\n        try {\n            Field idField = theObj.getClass().getDeclaredField(fieldName);\n            idField.setAccessible(true);\n            idField.set(theObj, fieldValue);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(\"\u7f16\u7a0b\u9519\u8bef\uff01\");\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/common/util/StringUtil.java", "chunked_list": ["package demo.unjuanable.common.util;\n\npublic final class StringUtil {\n    private StringUtil(){}\n    public static boolean isBlank(String str) {\n        return str == null || str.trim().isEmpty();\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/common/framework/domain/AuditableEntity.java", "chunked_list": ["package demo.unjuanable.common.framework.domain;\n\nimport java.time.LocalDateTime;\n\npublic abstract class AuditableEntity {\n    protected final LocalDateTime createdAt;\n    protected final Long createdBy;\n    protected LocalDateTime lastUpdatedAt;\n    protected Long lastUpdatedBy;\n\n    public AuditableEntity(LocalDateTime createdAt, Long createdBy) {\n        this.createdAt = createdAt;\n        this.createdBy = createdBy;\n    }\n", "    public Long getCreatedBy() {\n        return createdBy;\n    }\n\n    public LocalDateTime getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setLastUpdatedAt(LocalDateTime lastUpdatedAt) {\n        this.lastUpdatedAt = lastUpdatedAt;\n    }\n", "    public void setLastUpdatedAt(LocalDateTime lastUpdatedAt) {\n        this.lastUpdatedAt = lastUpdatedAt;\n    }\n\n    public LocalDateTime getLastUpdatedAt() {\n        return lastUpdatedAt;\n    }\n\n    public void setLastUpdatedBy(Long lastUpdatedBy) {\n        this.lastUpdatedBy = lastUpdatedBy;\n    }\n", "    public void setLastUpdatedBy(Long lastUpdatedBy) {\n        this.lastUpdatedBy = lastUpdatedBy;\n    }\n\n    public Long getLastUpdatedBy() {\n        return lastUpdatedBy;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/adapter/driven/persistence/orgmng/OrgTypeRepositoryJdbc.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.orgmng;\n\nimport demo.unjuanable.common.util.SqlUtil;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgType;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeRepository;\nimport demo.unjuanable.domain.orgmng.orgtype.OrgTypeStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n", "import org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic class OrgTypeRepositoryJdbc implements OrgTypeRepository {\n    private final JdbcTemplate jdbc;\n\n    @Autowired\n    public OrgTypeRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n    }\n", "    public int countByCodeAndStatus(long tenantId, String code, OrgTypeStatus status) {\n        final String countSql = \"select count(*) \" +\n                \"from org_type \" +\n                \"where tenant_id = ? and code = ? and status_code = ?\";\n        return jdbc.queryForObject(countSql, Integer.class, tenantId, code, status.code());\n    }\n\n    public Optional<OrgType> findByCodeAndStatus(long tenantId, String code, OrgTypeStatus status) {\n        final String sql = \"select  code, tenant_id, name, status_code\" +\n                \", created_at, created_by, last_updated_at, last_updated_by \" +\n                \"from org_type \" +\n                \"where tenant_id = ? and code = ? and status_code = ?\";\n\n        return Optional.ofNullable(\n                jdbc.queryForObject(sql,\n                        (rs, rowNum) -> {\n                            OrgType orgType = new OrgType(SqlUtil.toLocalDateTime(rs, \"created_at\")\n                                    , rs.getLong(\"created_by\")\n                            );\n                            orgType.setCode(rs.getString(\"code\"));\n                            orgType.setTenant(rs.getLong(\"tenant_id\"));\n                            orgType.setName(rs.getString(\"name\"));\n                            orgType.setStatus(OrgTypeStatus.ofCode(rs.getString(\"status_code\")));\n                            orgType.setLastUpdatedAt(SqlUtil.toLocalDateTime(rs, \"last_updated_at\"));\n                            orgType.setLastUpdatedBy(rs.getLong(\"last_updated_by\"));\n                            return orgType;\n                        }\n                        , tenantId\n                        , code\n                        , status.code()));\n    }\n\n    @Override", "    public boolean existsByCodeAndStatus(long tenant, String code, OrgTypeStatus status) {\n        return countByCodeAndStatus(tenant, code\n                , status) > 0;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/adapter/driven/persistence/orgmng/EmpRepositoryJdbc.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.orgmng;\n\nimport demo.unjuanable.domain.orgmng.emp.EmpRepository;\nimport demo.unjuanable.domain.orgmng.emp.EmpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.IncorrectResultSizeDataAccessException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class EmpRepositoryJdbc implements EmpRepository {\n\n    private final JdbcTemplate jdbc;\n\n    @Autowired\n    public EmpRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n    }\n\n    @Override", "\n@Repository\npublic class EmpRepositoryJdbc implements EmpRepository {\n\n    private final JdbcTemplate jdbc;\n\n    @Autowired\n    public EmpRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n    }\n\n    @Override", "    public boolean existsByIdAndStatus(Long tenantId, Long id, EmpStatus... statuses) {\n\n        String sql = buildSqlExistsByIdAndStatus(statuses.length);\n\n        Object[] params = buildParamsExistsByIdAndStatus(tenantId, id, statuses);\n\n\n        try {\n            return jdbc.queryForObject(sql, Integer.class, params) != null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return false;\n        }\n    }\n\n    private static Object[] buildParamsExistsByIdAndStatus(Long tenantId, Long id, EmpStatus[] statuses) {\n        Object[] params = new Object[2 + statuses.length];\n        params[0] = tenantId;\n        params[1] = id;\n        int j = 2;", "        for(EmpStatus status: statuses) {\n           params[j++] = status.code();\n        }\n        return params;\n    }\n\n    private static String buildSqlExistsByIdAndStatus(int statusCount) {\n        String status_condition = \"\";\n        for (int i = 0; i < statusCount; i++) {\n            if (i == 0) {\n                status_condition = status_condition + \" and (status_code = ?\";\n            } else {\n                status_condition = status_condition + \"or status_code = ?\";\n            }\n        }\n        status_condition += \")\";\n\n        String sql = \" select 1 from emp  where tenant_id = ? and id = ?\"\n                + status_condition\n                + \" limit 1 \";\n        return sql;\n    }\n}\n", "        for (int i = 0; i < statusCount; i++) {\n            if (i == 0) {\n                status_condition = status_condition + \" and (status_code = ?\";\n            } else {\n                status_condition = status_condition + \"or status_code = ?\";\n            }\n        }\n        status_condition += \")\";\n\n        String sql = \" select 1 from emp  where tenant_id = ? and id = ?\"\n                + status_condition\n                + \" limit 1 \";\n        return sql;\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/adapter/driven/persistence/orgmng/OrgRepositoryJdbc.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.orgmng;\n\nimport demo.unjuanable.domain.orgmng.org.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.IncorrectResultSizeDataAccessException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.jdbc.core.simple.SimpleJdbcInsert;\nimport org.springframework.stereotype.Repository;\n", "import org.springframework.stereotype.Repository;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static demo.unjuanable.common.util.ReflectUtil.forceSet;\nimport static demo.unjuanable.common.util.SqlUtil.toLocalDateTime;", "import static demo.unjuanable.common.util.ReflectUtil.forceSet;\nimport static demo.unjuanable.common.util.SqlUtil.toLocalDateTime;\n\n@Repository\npublic class OrgRepositoryJdbc implements OrgRepository {\n    private final JdbcTemplate jdbc;\n    private final SimpleJdbcInsert insertOrg;\n    private final OrgReBuilderFactory orgReBuilderFactory;\n    private final RowMapper<Org> orgRowMapper = new OrgRowMapper();\n\n    @Autowired\n    public OrgRepositoryJdbc(JdbcTemplate jdbc, OrgReBuilderFactory orgReBuilderFactory) {\n        this.jdbc = jdbc;\n        this.insertOrg = new SimpleJdbcInsert(jdbc)\n                .withTableName(\"org\")\n                .usingGeneratedKeyColumns(\"id\");\n\n        this.orgReBuilderFactory = orgReBuilderFactory;\n\n    }\n\n    @Override\n    public Optional<Org> findByIdAndStatus(Long tenantId, Long id, OrgStatus status) {\n        final String sql = \" select id\"\n                + \", tenant_id\"\n                + \", superior_id\"\n                + \", org_type_code\"\n                + \", leader_id\"\n                + \", name\"\n                + \", status_code\"\n                + \", created_at\"\n                + \", created_by\"\n                + \", last_updated_at\"\n                + \", last_updated_by \"\n                + \" from org \"\n                + \" where tenant_id = ?  and id = ? and status_code = ? \";\n\n        return Optional.ofNullable(\n                jdbc.queryForObject(sql\n                        , orgRowMapper\n                        , tenantId\n                        , id\n                        , status.code()));\n    }\n\n    @Override", "    public Org save(Org org) {\n        Map<String, Object> parms = new HashMap<>(8);\n\n        parms.put(\"created_at\", org.getCreatedAt());\n        parms.put(\"created_by\", org.getCreatedBy());\n        parms.put(\"leader_id\", org.getLeaderId());\n        parms.put(\"name\", org.getName());\n        parms.put(\"org_type_code\", org.getOrgTypeCode());\n        parms.put(\"status_code\", org.getStatus().code());\n        parms.put(\"superior_id\", org.getSuperiorId());\n        parms.put(\"tenant_id\", org.getTenantId());\n\n        Number createdId = insertOrg.executeAndReturnKey(parms);\n\n        forceSet(org, \"id\", createdId.longValue());\n\n        return org;\n    }\n\n    @Override\n    public Optional<Org> findById(Long tenantId, Long id) {\n        final String sql = \" select id\"\n                + \", tenant_id\"\n                + \", superior_id\"\n                + \", org_type_code\"\n                + \", leader_id\"\n                + \", name\"\n                + \", status_code\"\n                + \", created_at\"\n                + \", created_by\"\n                + \", last_updated_at\"\n                + \", last_updated_by \"\n                + \" from org \"\n                + \" where tenant_id = ?  and id = ? \";\n", "        try {\n            return Optional.ofNullable(jdbc.queryForObject(sql\n                    , orgRowMapper\n                    , tenantId\n                    , id));\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return Optional.empty();\n        }\n\n    }\n\n    @Override", "    public boolean existsBySuperiorIdAndName(Long tenantId, Long superiorId, String name) {\n        final String sql = \" select 1 from org \"\n                + \" where tenant_id = ?  and superior_id = ? and name = ?\"\n                + \" limit 1 \";\n\n        try {\n            return jdbc.queryForObject(sql, Integer.class, tenantId, superiorId, name) != null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return false;\n        }\n    }\n\n    @Override", "    public int update(Org org) {\n        String sql = \"update org \"\n                + \" set superior_id = ? \"\n                + \", org_type_code =? \"\n                + \", leader_id = ?\"\n                + \", name = ?\"\n                + \", status_code =?\"\n                + \", last_updated_at = ?\"\n                + \", last_updated_by = ? \"\n                + \" where tenant_id = ? and id = ? \";\n\n        return this.jdbc.update(sql\n                , org.getSuperiorId()\n                , org.getOrgTypeCode()\n                , org.getLeaderId()\n                , org.getName()\n                , org.getStatus().code()\n                , org.getLastUpdatedAt()\n                , org.getLastUpdatedBy()\n                , org.getTenantId()\n                , org.getId()\n        );\n    }\n\n\n    class OrgRowMapper implements RowMapper<Org> {\n        @Override", "        public Org mapRow(ResultSet rs, int rowNum) throws SQLException {\n            OrgReBuilder orgReBuilder = orgReBuilderFactory.build();\n            return orgReBuilder.id(rs.getLong(\"id\"))\n                    .tenantId(rs.getLong(\"tenant_id\"))\n                    .superiorId(rs.getLong(\"superior_id\"))\n                    .orgTypeCode(rs.getString(\"org_type_code\"))\n                    .leaderId(rs.getLong(\"leader_id\"))\n                    .name(rs.getString(\"name\"))\n                    .statusCode(rs.getString(\"status_code\"))\n                    .createdAt(rs.getTimestamp(\"created_at\").toLocalDateTime())\n                    .createdBy(rs.getLong(\"created_by\"))\n                    .lastCreatedAt(toLocalDateTime(rs, \"last_updated_at\"))\n                    .lastUpdatedBy(rs.getLong(\"last_updated_by\"))\n                    .build();\n        }\n    }\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/adapter/driven/persistence/tenantmng/TenantRepositoryJdbc.java", "chunked_list": ["package demo.unjuanable.adapter.driven.persistence.tenantmng;\n\nimport demo.unjuanable.domain.orgmng.org.Org;\nimport demo.unjuanable.domain.tenantmng.Tenant;\nimport demo.unjuanable.domain.tenantmng.TenantRepository;\nimport demo.unjuanable.domain.tenantmng.TenantStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.IncorrectResultSizeDataAccessException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.simple.SimpleJdbcInsert;", "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.simple.SimpleJdbcInsert;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static demo.unjuanable.common.util.ReflectUtil.forceSet;\n\n@Repository\npublic class TenantRepositoryJdbc implements TenantRepository {\n    private final JdbcTemplate jdbc;\n    private final SimpleJdbcInsert insertTenant;\n\n    @Autowired\n    public TenantRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n        this.insertTenant = new SimpleJdbcInsert(jdbc)\n                .withTableName(\"tenant\")\n                .usingGeneratedKeyColumns(\"id\");\n    }\n", "\n@Repository\npublic class TenantRepositoryJdbc implements TenantRepository {\n    private final JdbcTemplate jdbc;\n    private final SimpleJdbcInsert insertTenant;\n\n    @Autowired\n    public TenantRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n        this.insertTenant = new SimpleJdbcInsert(jdbc)\n                .withTableName(\"tenant\")\n                .usingGeneratedKeyColumns(\"id\");\n    }\n", "    public Tenant save(Tenant tenant) {\n        Map<String, Object> parms = new HashMap<>(3);\n\n        parms.put(\"name\", tenant.getName());\n        parms.put(\"status_code\", tenant.getStatus().code());\n        parms.put(\"created_at\", tenant.getCreatedAt());\n        parms.put(\"created_by\", tenant.getCreatedBy());\n\n        Number createdId = insertTenant.executeAndReturnKey(parms);\n\n        forceSet(tenant, \"id\", createdId.longValue());\n\n        return tenant;\n    }\n\n\n    @Override", "    public boolean existsByIdAndStatus(long tenantId, TenantStatus status) {\n\n        final String sql = \" select 1 from tenant \"\n                + \" where id = ?  and status_code = ?\"\n                + \" limit 1 \";\n\n        try {\n            return jdbc.queryForObject(sql, Integer.class, tenantId, status.code()) != null;\n        } catch (IncorrectResultSizeDataAccessException e) {\n            return false;\n        }\n\n    }\n\n\n}\n"]}
{"filename": "unjuanable/src/main/java/demo/unjuanable/adapter/driving/restful/orgmng/OrgController.java", "chunked_list": ["package demo.unjuanable.adapter.driving.restful.orgmng;\n\nimport demo.unjuanable.application.orgmng.orgservice.OrgService;\nimport demo.unjuanable.application.orgmng.orgservice.OrgResponse;\nimport demo.unjuanable.application.orgmng.orgservice.CreateOrgRequest;\nimport demo.unjuanable.application.orgmng.orgservice.UpdateOrgBasicRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class OrgController {\n    private final OrgService orgService;\n    @Autowired\n    public OrgController(OrgService orgService) {\n        this.orgService = orgService;\n    }\n\n    @PostMapping(\"/api/organizations\")", "\n@RestController\npublic class OrgController {\n    private final OrgService orgService;\n    @Autowired\n    public OrgController(OrgService orgService) {\n        this.orgService = orgService;\n    }\n\n    @PostMapping(\"/api/organizations\")\n    public OrgResponse addOrg(@RequestParam(\"userid\") Long userId\n            , @RequestBody CreateOrgRequest request) {\n        return orgService.addOrg(request, userId);\n    }\n\n    @PatchMapping(\"/api/organizations/{id}\")", "    public OrgResponse addOrg(@RequestParam(\"userid\") Long userId\n            , @RequestBody CreateOrgRequest request) {\n        return orgService.addOrg(request, userId);\n    }\n\n    @PatchMapping(\"/api/organizations/{id}\")\n    public OrgResponse updateOrgBasic(@PathVariable Long id\n            , @RequestParam(\"userid\") Long userId\n            , @RequestBody UpdateOrgBasicRequest request) {\n        //Long user = acquireUserId();\n        return orgService.updateOrgBasic(id, request, userId);\n    }\n\n\n    @PostMapping(\"/api/organizations/{id}/cancel\")", "    public Long cancelOrg(@PathVariable Long id\n            , @RequestParam(\"userid\") Long userId\n            , @RequestParam Long tenant) {\n        //Long user = acquireUserId();\n        return orgService.cancelOrg(tenant, id, userId);\n    }\n\n    private Long acquireUserId() {\n        //TODO: use JWT\n        return 1L;\n    }\n}\n"]}
