{"filename": "src/test/java/com/dhx/template/TemplateApplicationTests.java", "chunked_list": ["package com.dhx.template;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass TemplateApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/TemplateApplication.java", "chunked_list": ["package com.dhx.template;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@SpringBootApplication\n@MapperScan(\"com.dhx.template.mapper\")\n@EnableScheduling\npublic class TemplateApplication {\n", "@MapperScan(\"com.dhx.template.mapper\")\n@EnableScheduling\npublic class TemplateApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(TemplateApplication.class, args);\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/task/JobExample.java", "chunked_list": ["package com.dhx.template.task;\n\nimport org.springframework.scheduling.annotation.Scheduled;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className JobExample spring Scheduled\u5b9a\u65f6\u4efb\u52a1\n * @date : 2023/05/04/ 17:47\n **/\npublic class JobExample {\n\n    @Scheduled(cron = \"0 0 0 * * ?\") // \u8bbe\u7f6e\u6bcf\u5929\u96f6\u70b9\u6267\u884c\n    private void refreshTask(){\n\n    }\n}\n", " **/\npublic class JobExample {\n\n    @Scheduled(cron = \"0 0 0 * * ?\") // \u8bbe\u7f6e\u6bcf\u5929\u96f6\u70b9\u6267\u884c\n    private void refreshTask(){\n\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/SqlUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className SqlUtil\n * @date : 2023/07/05/ 15:09\n **/\npublic class SqlUtil {\n\n    /**\n     * \u6821\u9a8c\u6392\u5e8f\u5b57\u6bb5\u662f\u5426\u5408\u6cd5\uff08\u9632\u6b62 SQL \u6ce8\u5165\uff09\n     *\n     * @param sortField\n     * @return\n     */", " **/\npublic class SqlUtil {\n\n    /**\n     * \u6821\u9a8c\u6392\u5e8f\u5b57\u6bb5\u662f\u5426\u5408\u6cd5\uff08\u9632\u6b62 SQL \u6ce8\u5165\uff09\n     *\n     * @param sortField\n     * @return\n     */\n    public static boolean validSortField(String sortField) {\n        if (StringUtils.isBlank(sortField)) {\n            return false;\n        }\n        return !StringUtils.containsAny(sortField, \"=\", \"(\", \")\", \" \");\n    }\n\n}\n", "    public static boolean validSortField(String sortField) {\n        if (StringUtils.isBlank(sortField)) {\n            return false;\n        }\n        return !StringUtils.containsAny(sortField, \"=\", \"(\", \")\", \" \");\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/SMSUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport cn.hutool.core.util.RandomUtil;\nimport com.alibaba.fastjson.JSONObject;\nimport com.aliyun.dysmsapi20170525.Client;\nimport com.aliyun.dysmsapi20170525.models.SendSmsRequest;\nimport com.aliyun.dysmsapi20170525.models.SendSmsResponse;\nimport com.aliyun.teaopenapi.models.Config;\nimport com.dhx.template.common.constant.SMSConstant;\nimport com.dhx.template.config.SmsConfig;", "import com.dhx.template.common.constant.SMSConstant;\nimport com.dhx.template.config.SmsConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.util.Random;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className SMSUtils\n * @date : 2023/07/05/ 17:55\n **/\n@Slf4j\n@Component\npublic class SMSUtil {\n\n    @Resource\n    Client client;\n\n    /**\n     * \u53d1\u9001\u9a8c\u8bc1\u7801\n     *\n     * @param phone \u624b\u673a\u53f7\n     * @return boolean\n     */", "    public String send(String phone) {\n        JSONObject param = randomCode();\n        SendSmsRequest request = createRequest(phone, JSONObject.toJSONString(param));\n        JSONObject jsonObject = null;\n        try {\n            SendSmsResponse response = client.sendSms(request);\n            jsonObject = (JSONObject) JSONObject.parseObject(JSONObject.toJSONString(response)).get(\"body\");\n            System.out.println(jsonObject);\n            if (jsonObject.get(\"code\").equals(SMSConstant.SUCCESS_CODE)) {\n                log.info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n                return (String) param.get(\"code\");\n            }\n        } catch (Exception e) {\n            log.error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u51fa\u73b0\u5f02\u5e38\uff1a{}\", e.getMessage());\n            return \"\";\n        }\n        log.info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n        return \"\";\n    }\n\n    /**\n     * \u521b\u5efa\u8bf7\u6c42\n     *\n     * @param mobile \u63a5\u53d7\u624b\u673a\u53f7\n     * @return SendSmsRequest\n     */\n    private SendSmsRequest createRequest(String mobile, String param) {\n        return new SendSmsRequest()\n                .setPhoneNumbers(mobile)\n                .setSignName(SMSConstant.COMMON_SIGN_NAME)//\u6b64\u586b\u5199\u7b7e\u540d\u540d\u79f0\n                .setTemplateCode(SMSConstant.TEMPLATE_CODE_TWO)//\u6b64\u586b\u5199\u6a21\u677fCODE\n                .setTemplateParam(param);//\u9a8c\u8bc1\u7801\u53c2\u6570\u4e3ajson\u5b57\u7b26\u4e32\u683c\u5f0f {\"code\":\"xxxxxx\"}\n    }\n\n    /**\n     * \u968f\u673a6\u4f4d\u9a8c\u8bc1\u7801\n     *\n     * @return code\n     */\n    private JSONObject randomCode() {\n        String code = RandomUtil.randomNumbers(6);\n        JSONObject param = new JSONObject();\n        param.put(\"code\", code);\n        return param;\n    }\n}\n", "            if (jsonObject.get(\"code\").equals(SMSConstant.SUCCESS_CODE)) {\n                log.info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n                return (String) param.get(\"code\");\n            }\n        } catch (Exception e) {\n            log.error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u51fa\u73b0\u5f02\u5e38\uff1a{}\", e.getMessage());\n            return \"\";\n        }\n        log.info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), DateUtil.now());\n        return \"\";\n    }\n\n    /**\n     * \u521b\u5efa\u8bf7\u6c42\n     *\n     * @param mobile \u63a5\u53d7\u624b\u673a\u53f7\n     * @return SendSmsRequest\n     */\n    private SendSmsRequest createRequest(String mobile, String param) {\n        return new SendSmsRequest()\n                .setPhoneNumbers(mobile)\n                .setSignName(SMSConstant.COMMON_SIGN_NAME)//\u6b64\u586b\u5199\u7b7e\u540d\u540d\u79f0\n                .setTemplateCode(SMSConstant.TEMPLATE_CODE_TWO)//\u6b64\u586b\u5199\u6a21\u677fCODE\n                .setTemplateParam(param);//\u9a8c\u8bc1\u7801\u53c2\u6570\u4e3ajson\u5b57\u7b26\u4e32\u683c\u5f0f {\"code\":\"xxxxxx\"}\n    }\n\n    /**\n     * \u968f\u673a6\u4f4d\u9a8c\u8bc1\u7801\n     *\n     * @return code\n     */\n    private JSONObject randomCode() {\n        String code = RandomUtil.randomNumbers(6);\n        JSONObject param = new JSONObject();\n        param.put(\"code\", code);\n        return param;\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/DateUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.joda.time.DateTime;\nimport org.joda.time.LocalDate;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;", "import java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * \u65e5\u671f\u5904\u7406\n *\n * @author Mark sunlightcs@gmail.com\n */\npublic class DateUtil {\n\n\n    /** \u65f6\u95f4\u683c\u5f0f(yyyy-MM-dd) */", "public class DateUtil {\n\n\n    /** \u65f6\u95f4\u683c\u5f0f(yyyy-MM-dd) */\n    public final static String DATE_PATTERN = \"yyyy-MM-dd\";\n    /** \u65f6\u95f4\u683c\u5f0f(yyyy-MM-dd HH:mm:ss) */\n    public final static String DATE_TIME_PATTERN = \"yyyy-MM-dd HH:mm:ss\";\n\n    public static String now(){\n        return format(new Date(),DATE_TIME_PATTERN);\n    }\n\n    /**\n     * \u65e5\u671f\u683c\u5f0f\u5316 \u65e5\u671f\u683c\u5f0f\u4e3a\uff1ayyyy-MM-dd\n     * @param date  \u65e5\u671f\n     * @return \u8fd4\u56deyyyy-MM-dd\u683c\u5f0f\u65e5\u671f\n     */", "    public static String now(){\n        return format(new Date(),DATE_TIME_PATTERN);\n    }\n\n    /**\n     * \u65e5\u671f\u683c\u5f0f\u5316 \u65e5\u671f\u683c\u5f0f\u4e3a\uff1ayyyy-MM-dd\n     * @param date  \u65e5\u671f\n     * @return \u8fd4\u56deyyyy-MM-dd\u683c\u5f0f\u65e5\u671f\n     */\n    public static String format(Date date) {\n        return format(date, DATE_PATTERN);\n    }\n\n    /**\n     * \u65e5\u671f\u683c\u5f0f\u5316 \u65e5\u671f\u683c\u5f0f\u4e3a\uff1ayyyy-MM-dd\n     * @param date  \u65e5\u671f\n     * @param pattern  \u683c\u5f0f\uff0c\u5982\uff1aDateUtils.DATE_TIME_PATTERN\n     * @return \u8fd4\u56deyyyy-MM-dd\u683c\u5f0f\u65e5\u671f\n     */", "    public static String format(Date date) {\n        return format(date, DATE_PATTERN);\n    }\n\n    /**\n     * \u65e5\u671f\u683c\u5f0f\u5316 \u65e5\u671f\u683c\u5f0f\u4e3a\uff1ayyyy-MM-dd\n     * @param date  \u65e5\u671f\n     * @param pattern  \u683c\u5f0f\uff0c\u5982\uff1aDateUtils.DATE_TIME_PATTERN\n     * @return \u8fd4\u56deyyyy-MM-dd\u683c\u5f0f\u65e5\u671f\n     */\n    public static String format(Date date, String pattern) {", "    public static String format(Date date, String pattern) {\n        if (date != null) {\n            SimpleDateFormat df = new SimpleDateFormat(pattern);\n            return df.format(date);\n        }\n        return null;\n    }\n\n    /**\n     * \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u65e5\u671f\n     * @param strDate \u65e5\u671f\u5b57\u7b26\u4e32\n     * @param pattern \u65e5\u671f\u7684\u683c\u5f0f\uff0c\u5982\uff1aDateUtils.DATE_TIME_PATTERN\n     */", "    public static Date stringToDate(String strDate, String pattern) {\n        if (StringUtils.isBlank(strDate)) {\n            return null;\n        }\n\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(pattern);\n        return fmt.parseLocalDateTime(strDate).toDate();\n    }\n\n    /**\n     * \u6839\u636e\u5468\u6570\uff0c\u83b7\u53d6\u5f00\u59cb\u65e5\u671f\u3001\u7ed3\u675f\u65e5\u671f\n     * @param week  \u5468\u671f  0\u672c\u5468\uff0c-1\u4e0a\u5468\uff0c-2\u4e0a\u4e0a\u5468\uff0c1\u4e0b\u5468\uff0c2\u4e0b\u4e0b\u5468\n     * @return \u8fd4\u56dedate[0]\u5f00\u59cb\u65e5\u671f\u3001date[1]\u7ed3\u675f\u65e5\u671f\n     */", "    public static Date[] getWeekStartAndEnd(int week) {\n        DateTime dateTime = new DateTime();\n        LocalDate date = new LocalDate(dateTime.plusWeeks(week));\n\n        date = date.dayOfWeek().withMinimumValue();\n        Date beginDate = date.toDate();\n        Date endDate = date.plusDays(6).toDate();\n        return new Date[]{beginDate, endDate};\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u79d2\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param seconds \u79d2\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u79d2\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateSeconds(Date date, int seconds) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusSeconds(seconds).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u5206\u949f\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param minutes \u5206\u949f\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u5206\u949f\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateMinutes(Date date, int minutes) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusMinutes(minutes).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u5c0f\u65f6\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param hours \u5c0f\u65f6\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u5c0f\u65f6\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateHours(Date date, int hours) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusHours(hours).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u5929\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param days \u5929\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u5929\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateDays(Date date, int days) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusDays(days).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u5468\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param weeks \u5468\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u5468\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateWeeks(Date date, int weeks) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusWeeks(weeks).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u6708\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param months \u6708\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u6708\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateMonths(Date date, int months) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusMonths(months).toDate();\n    }\n\n    /**\n     * \u5bf9\u65e5\u671f\u7684\u3010\u5e74\u3011\u8fdb\u884c\u52a0/\u51cf\n     *\n     * @param date \u65e5\u671f\n     * @param years \u5e74\u6570\uff0c\u8d1f\u6570\u4e3a\u51cf\n     * @return \u52a0/\u51cf\u51e0\u5e74\u540e\u7684\u65e5\u671f\n     */", "    public static Date addDateYears(Date date, int years) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime.plusYears(years).toDate();\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/ResultUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.common.ErrorCode;\n\nimport java.io.Serializable;\n\n/**\n * \u8fd4\u56de\u6570\u636e\n *", " * \u8fd4\u56de\u6570\u636e\n *\n * @author Mark sunlightcs@gmail.com\n */\n// extends HashMap<String, Object>\npublic class ResultUtil implements Serializable{\n\tprivate static final long serialVersionUID = 164567353L;\n\t/**\n\t * \u6b63\u5e38\u8fd4\u56de\n\t * @param data\n\t * @param <T>\n\t * @return\n\t */\n\tpublic static <T> BaseResponse<T> success(T data){\n\t\treturn new BaseResponse<T>(200,data,\"ok\");\n\t}\n\n\n\t/**\n\t * \u51fa\u73b0\u9519\u8bef\n\t * @param errorCode\n\t * @param <T>\n\t * @return\n\t */\n\tpublic static <T> BaseResponse<T> error(ErrorCode errorCode){\n\t\treturn new BaseResponse<T>(errorCode);\n\t}\n\n\t/**\n\t * \u5931\u8d25\n\t *\n\t * @param code\n\t * @param message\n\t * @return\n\t */", "\tpublic static BaseResponse error(int code, String message) {\n\t\treturn new BaseResponse(code, null,message);\n\t}\n\n\t/**\n\t *\n\t * @param errorCode \u9519\u8bef\u7801\n\t * @param <T>\n\t * @return\n\t */\n\tpublic static <T> BaseResponse<T> error(ErrorCode errorCode,String message){\n\t\treturn new BaseResponse<T>(errorCode,message);\n\t}\n\n\n\t/**\n\t *\n\t * @return\n\t */\n\tpublic static <T> BaseResponse<T> error(){\n\t\treturn new BaseResponse<T>(ErrorCode.SYSTEM_ERROR);\n\t}\n", "\tpublic static BaseResponse success() {\n\t\treturn new BaseResponse(200,null,\"success\");\n\t}\n}\n\n\n"]}
{"filename": "src/main/java/com/dhx/template/utils/UserHolder.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport com.dhx.template.model.DTO.user.UserDTO;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserHolder\n * @date : 2023/05/04/ 16:13\n **/\npublic class UserHolder {\n    public static ThreadLocal<UserDTO> user = new ThreadLocal<>();\n", " **/\npublic class UserHolder {\n    public static ThreadLocal<UserDTO> user = new ThreadLocal<>();\n\n    public static UserDTO getUser() {\n        return user.get();\n    }\n\n    public static void setUser(UserDTO userDTO) {\n        user.set(userDTO);\n    }\n}\n", "    public static void setUser(UserDTO userDTO) {\n        user.set(userDTO);\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/AopUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport org.springframework.aop.framework.AdvisedSupport;\nimport org.springframework.aop.framework.AopProxy;\nimport org.springframework.aop.support.AopUtils;\n\nimport java.lang.reflect.Field;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className AopUtil\n * @date : 2023/04/10/ 14:33\n **/\npublic class AopUtil{\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a\u4ee3\u7406\u5b9e\u4f8b\u7684\u771f\u5b9e\u5bf9\u8c61\n     * @param proxy\n     * @return\n     * @throws Exception\n     */", "    public static Object getTarget(Object proxy) throws Exception {\n        if (!AopUtils.isAopProxy(proxy)) {\n            return proxy;\n        }\n        if (AopUtils.isJdkDynamicProxy(proxy)) {\n            /**JDK\u52a8\u6001\u4ee3\u7406*/\n            return getJdkDynamicProxyTargetObject(proxy);\n        } else if(AopUtils.isCglibProxy(proxy)){\n            /**cglib\u52a8\u6001\u4ee3\u7406*/\n            return getCglibProxyTargetObject(proxy);\n        }\n        return proxy;\n    }\n    private static Object getCglibProxyTargetObject(Object proxy) throws Exception {\n        Field h = proxy.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n        h.setAccessible(true);\n        Object dynamicAdvisedInterceptor = h.get(proxy);\n        Field advised = dynamicAdvisedInterceptor.getClass().getDeclaredField(\"advised\");\n        advised.setAccessible(true);\n        Object target = ((AdvisedSupport) advised.get(dynamicAdvisedInterceptor)).getTargetSource().getTarget();\n        return target;\n    }\n\n    private static Object getJdkDynamicProxyTargetObject(Object proxy) throws Exception {\n        Field h = proxy.getClass().getSuperclass().getDeclaredField(\"h\");\n        h.setAccessible(true);\n        AopProxy aopProxy = (AopProxy) h.get(proxy);\n        Field advised = aopProxy.getClass().getDeclaredField(\"advised\");\n        advised.setAccessible(true);\n        Object target = ((AdvisedSupport) advised.get(aopProxy)).getTargetSource().getTarget();\n        return target;\n    }\n}\n\n"]}
{"filename": "src/main/java/com/dhx/template/utils/ThrowUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.exception.BusinessException;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className ThrowUtil\n * @date : 2023/07/05/ 15:08\n **/\npublic class ThrowUtil {\n\n    /**\n     * \u6761\u4ef6\u6210\u7acb\u5219\u629b\u5f02\u5e38\n     *\n     * @param condition\n     * @param runtimeException\n     */", " * @date : 2023/07/05/ 15:08\n **/\npublic class ThrowUtil {\n\n    /**\n     * \u6761\u4ef6\u6210\u7acb\u5219\u629b\u5f02\u5e38\n     *\n     * @param condition\n     * @param runtimeException\n     */\n    public static void throwIf(boolean condition, RuntimeException runtimeException) {", "    public static void throwIf(boolean condition, RuntimeException runtimeException) {\n        if (condition) {\n            throw runtimeException;\n        }\n    }\n\n    /**\n     * \u6761\u4ef6\u6210\u7acb\u5219\u629b\u5f02\u5e38\n     *\n     * @param condition\n     * @param errorCode\n     */", "    public static void throwIf(boolean condition, ErrorCode errorCode) {\n        throwIf(condition, new BusinessException(errorCode));\n    }\n\n    /**\n     * \u6761\u4ef6\u6210\u7acb\u5219\u629b\u5f02\u5e38\n     *\n     * @param condition\n     * @param errorCode\n     * @param message\n     */", "    public static void throwIf(boolean condition, ErrorCode errorCode, String message) {\n        throwIf(condition, new BusinessException(errorCode, message));\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/utils/FileUtil.java", "chunked_list": ["package com.dhx.template.utils;\n\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.exception.BusinessException;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\nimport java.nio.channels.FileChannel;\n\n/**", "\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className FileUtil\n * @date : 2023/07/05/ 15:45\n **/\npublic class FileUtil {\n\n\n    public static final String[]PICTURE_TYPES= new String[]{\".jpg\",\".png\",\".jpeg\", \".gif\", \".bmp\", \".webp\",\".GIF\",\".BMP\",\".WEBP\",\".JPG\",\".PNG\",\"JPEG\",};\n    public static final int MAX_SIZE= 20*1024*1000;\n    /**\n     * MultipartFile \u8f6c File\n     * @param file\n     * @throws Exception\n     */", "    public static final String[]PICTURE_TYPES= new String[]{\".jpg\",\".png\",\".jpeg\", \".gif\", \".bmp\", \".webp\",\".GIF\",\".BMP\",\".WEBP\",\".JPG\",\".PNG\",\"JPEG\",};\n    public static final int MAX_SIZE= 20*1024*1000;\n    /**\n     * MultipartFile \u8f6c File\n     * @param file\n     * @throws Exception\n     */\n    public static File multipartFileToFile(MultipartFile file) throws Exception {\n        File toFile = null;\n        if (file.equals(\"\") || file.getSize() <= 0) {\n            file = null;\n        } else {\n            InputStream ins = null;\n            ins = file.getInputStream();\n            toFile = new File(file.getOriginalFilename());\n            inputStreamToFile(ins, toFile);\n            ins.close();\n        }\n        return toFile;\n    }\n\n    //\u83b7\u53d6\u6d41\u6587\u4ef6\n    private static void inputStreamToFile(InputStream ins, File file) {", "        if (file.equals(\"\") || file.getSize() <= 0) {\n            file = null;\n        } else {\n            InputStream ins = null;\n            ins = file.getInputStream();\n            toFile = new File(file.getOriginalFilename());\n            inputStreamToFile(ins, toFile);\n            ins.close();\n        }\n        return toFile;\n    }\n\n    //\u83b7\u53d6\u6d41\u6587\u4ef6\n    private static void inputStreamToFile(InputStream ins, File file) {", "        try {\n            OutputStream os = new FileOutputStream(file);\n            int bytesRead = 0;\n            byte[] buffer = new byte[8192];\n            while ((bytesRead = ins.read(buffer, 0, 8192)) != -1) {\n                os.write(buffer, 0, bytesRead);\n            }\n            os.close();\n            ins.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * \u5220\u9664\u672c\u5730\u4e34\u65f6\u6587\u4ef6\n     * @param file\n     */", "    public static void deleteTempFile(File file) {\n        if (file != null) {\n            File del = new File(file.toURI());\n            del.delete();\n        }\n    }\n\n    /**\n     * \u68c0\u67e5\u56fe\u7247\u662f\u5426\u7b26\u5408\u89c4\u8303 \u5927\u5c0f/\u7c7b\u578b\n     * @param file\n     * @return\n     */", "    public static boolean checkFile(File file) throws IOException {\n        String name = file.getName();\n        long fileSize = getFileSize(file);\n        if(fileSize>=MAX_SIZE){\n            throw new BusinessException(ErrorCode.PARAMS_ERROR,\"\u6587\u4ef6\u5927\u5c0f\u9650\u5236\u572820MB\");\n        }\n        String suffix= name.substring(name.lastIndexOf(\".\"));\n        for (String picture_type : PICTURE_TYPES) {\n            if(picture_type.equals(suffix)){\n                return true;\n            }\n        }\n        throw new BusinessException(ErrorCode.PARAMS_ERROR,\"\u8bf7\u4e0a\u4f20\u56fe\u7247\u7c7b\u578b\u6587\u4ef6\");\n    }\n\n\n    /**\n     * @param file \u6587\u4ef6\n     * @return \u8fd4\u56de\u6587\u4ef6\u5927\u5c0f byte\n     * @throws IOException\n     */", "            if(picture_type.equals(suffix)){\n                return true;\n            }\n        }\n        throw new BusinessException(ErrorCode.PARAMS_ERROR,\"\u8bf7\u4e0a\u4f20\u56fe\u7247\u7c7b\u578b\u6587\u4ef6\");\n    }\n\n\n    /**\n     * @param file \u6587\u4ef6\n     * @return \u8fd4\u56de\u6587\u4ef6\u5927\u5c0f byte\n     * @throws IOException\n     */", "    public static long getFileSize(File file) throws IOException {\n        FileInputStream fis = new FileInputStream(file);\n        FileChannel fc = fis.getChannel();\n        return fc.size();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/ErrorCode.java", "chunked_list": ["package com.dhx.template.common;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className ErrorCode <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP\"> \u5173\u4e8eHTTP\u72b6\u6001\u7801 </a>\n * @date : 2023/01/07/ 14:34\n **/\npublic enum ErrorCode {\n    SUCCESS(200,\"ok\"),\n    //HTTP\u72b6\u6001\u7801\u672c\u8eab\u5c31\u662f500\uff0c\u4e3a\u4ec0\u4e48500\uff0c\u56e0\u4e3a\u4f60\u7684\u4e1a\u52a1\u91cc\u9762\u629b\u5f02\u5e38 , \u4f46\u662f\u4e0d\u5e94\u8be5\u8ba9\u524d\u7aef\u51fa\u73b0500\uff0c\u56e0\u4e3a\u6211\u4eec\u521a\u521a\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e1a\u52a1\u5f02\u5e38\uff0c\u5b83\u5e94\u8be5\u8fd4\u56de40000\n    PARAMS_ERROR(400,\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\"),\n    NULL_ERROR(400,\"\u8bf7\u6c42\u6570\u636e\u4e3a\u7a7a\"),\n    NOT_LOGIN(401,\"\u672a\u767b\u5f55\"),\n    NO_AUTH_ERROR(403,\"\u65e0\u6743\u9650\"),\n\n    FORBIDDEN_ERROR(403,\"\u7981\u6b62\u8bbf\u95ee\"),\n\n    NOT_FOUND(404,\"\u8bbf\u95ee\u8def\u5f84\u9519\u8bef\"),\n    NOT_FOUND_ERROR(404, \"\u8bf7\u6c42\u6570\u636e\u4e0d\u5b58\u5728\"),\n    UPLOAD_ERROR(406,\"\u4e0a\u4f20\u5931\u8d25\"),\n    TOO_MANY_REQUEST(429,\"\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\"),\n    SYSTEM_ERROR(500,\"\u670d\u52a1\u5668\u5185\u90e8\u5f02\u5e38\"),\n\n    OPERATION_ERROR(50001, \"\u64cd\u4f5c\u5931\u8d25\"),\n\n    ;\n    final int code;\n    final String msg;\n    ErrorCode(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n", "    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/BaseResponse.java", "chunked_list": ["package com.dhx.template.common;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className BaseResponse\n * @date : 2023/01/07/ 14:33", " * @className BaseResponse\n * @date : 2023/01/07/ 14:33\n **/\n@Data\npublic class BaseResponse<T> implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private int code;\n\n    private T data;//  controller \u4e2d\u7684\u4e0d\u540c\u7684\u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e0d\u540c\n\n    private String message;\n\n\n    public BaseResponse(int code, T data, String message) {\n        this.code = code;\n        this.data = data;\n        this.message = message;\n    }\n\n    public BaseResponse(ErrorCode errorCode) {\n        this(errorCode.getCode(), null, errorCode.getMsg());\n    }\n\n\n    public BaseResponse(ErrorCode errorCode, String message) {\n        this(errorCode.getCode(), null, message);\n    }\n\n    /**\n     * \u6b63\u5e38\u8fd4\u56de\n     * @param data\n     * @param <T>\n     * @return\n     */\n    public <T> BaseResponse<T> success(T data) {\n        return new BaseResponse<T>(200, data, \"ok\");\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/constant/RedisConstant.java", "chunked_list": ["package com.dhx.template.common.constant;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\">adorabled4</a>\n * @className RedisConstant\n * @date : 2023/05/04/ 16:49\n **/\npublic class RedisConstant {\n\n    /**\n     * jwt \u79d8\u94a5\n     */", " **/\npublic class RedisConstant {\n\n    /**\n     * jwt \u79d8\u94a5\n     */\n    public static final String SECRET_KEY = \"mySecretKey\";\n\n    /**\n     * token\u8fc7\u671f\u65f6\u95f4\n     */", "    public static final long EXPIRATION_TIME = TimeUnit.DAYS.toSeconds(1);\n\n    /**\n     * access_token \u524d\u7f00\n     */\n    public static final String ACCESS_TOKEN_PREFIX = \"access_token:\";\n\n    /**\n     * \u5237\u65b0token \u524d\u7f00\n     */\n    public static final String REFRESH_TOKEN_PREFIX = \"refresh_token:\";\n\n\n    /**\n     * \u7f13\u5b58\u7528\u6237\u5269\u4f59\u6b21\u6570\n     */", "    public static final String REFRESH_TOKEN_PREFIX = \"refresh_token:\";\n\n\n    /**\n     * \u7f13\u5b58\u7528\u6237\u5269\u4f59\u6b21\u6570\n     */\n    public static final String USER_INTERFACE_INFO_PREFIX = \"user:interface:\";\n\n    /**\n     *\n     */", "    public static final long LEFT_NUM_TTL = TimeUnit.DAYS.toHours(12);\n\n    /**\n     * \u662f\u4e00\u4e2a\u96c6\u5408\n     */\n    public static final String INTERFACE_RANK_KEY = \"interface:rank\";\n\n    public static final String CODE_KEY = \"login:code:\";\n\n    /**\n     * \u9a8c\u8bc1\u7801\u6709\u6548\u65f6\u95f4\n     */", "    public static final long CODE_TTL = 60 * 5;\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/constant/UserConstant.java", "chunked_list": ["package com.dhx.template.common.constant;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserConstans\n * @date : 2023/01/07/ 14:53\n **/\npublic class UserConstant {\n\n    public static final String PASSWORD_SALT = \"dhxSalt\";\n", "    public static final String PASSWORD_SALT = \"dhxSalt\";\n\n    public static final int USER_PAGE_SIZE = 10;\n\n    /**\n     * \u9a8c\u8bc1\u7801\u957f\u5ea6\n     */\n    public static final int CODE_LEN = 6;\n\n    /**\n     * \u9ed8\u8ba4\u89d2\u8272\n     */", "    public static final String DEFAULT_ROLE = \"user\";\n\n    /**\n     * \u7ba1\u7406\u5458\u89d2\u8272\n     */\n    public static final String ADMIN_ROLE = \"admin\";\n\n    /**\n     * \u88ab\u5c01\u53f7\n     */\n    public static final String BAN_ROLE = \"ban\";\n\n\n    /**\n     * \u7528\u6237\u540d\u6b63\u5219 \u5141\u8bb8\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u548c\u4e2d\u6587\u5b57\u7b26\uff0c\u957f\u5ea6\u57284\u523016\u4e2a\u5b57\u7b26\u4e4b\u95f4\u3002\n     */", "    public static final String BAN_ROLE = \"ban\";\n\n\n    /**\n     * \u7528\u6237\u540d\u6b63\u5219 \u5141\u8bb8\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u548c\u4e2d\u6587\u5b57\u7b26\uff0c\u957f\u5ea6\u57284\u523016\u4e2a\u5b57\u7b26\u4e4b\u95f4\u3002\n     */\n    public static final String USER_NAME_REGEX = \"^[a-zA-Z0-9_\\\\u4e00-\\\\u9fa5]{4,16}$\";\n\n    /**\n     * \u5e10\u6237\u6b63\u5219 \u5141\u8bb8\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\uff0c\u957f\u5ea6\u57288\u523020\u4e2a\u5b57\u7b26\u4e4b\u95f4\u3002\n     */", "    public static final String USER_ACCOUNT_REGEX = \"^[a-zA-Z0-9_]{8,20}$\";\n\n    /**\n     * \u5bc6\u7801\u6b63\u5219 \u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57\u3001\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u3001\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u81f3\u5c11\u4e3a8\u4e2a\u5b57\u7b26\u3002\n     */\n//    public static final String PASSWORD_REGEX = \"^(?=.\\\\d)(?=.[a-z])(?=.*[A-Z]).{8,}$\";\n    public static final String PASSWORD_REGEX=\"^(?=.*[a-zA-Z])(?=.*\\\\d).{6,18}$\";\n\n    /**\n     * \u7535\u8bdd\u6b63\u5219\n     */", "    public static final String PHONE_REGEX = \"^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\\\d{8}$\";\n\n    /**\n     * \u90ae\u7bb1\u6b63\u5219\n     */\n    public static final String EMAIL_REGEX = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\";\n}"]}
{"filename": "src/main/java/com/dhx/template/common/constant/SMSConstant.java", "chunked_list": ["package com.dhx.template.common.constant;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a> TODO SMS\u76f8\u5173\u914d\u7f6e\n * @className SMSConstant\n * @date : 2023/07/05/ 17:56\n **/\npublic class SMSConstant {\n\n\n    public static final String SUCCESS_CODE=\"OK\";\n\n    /**\n     * \u6a21\u677f\u540d\u79f0\n     */", "    public static final String SUCCESS_CODE=\"OK\";\n\n    /**\n     * \u6a21\u677f\u540d\u79f0\n     */\n    public static final String COMMON_SIGN_NAME =\"**********\" ;\n\n    /**\n     * \u6a21\u677fCODE\n     */\n    public static final String TEMPLATE_CODE_TWO =\"*************\";\n}\n", "    public static final String TEMPLATE_CODE_TWO =\"*************\";\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/constant/JwtConstant.java", "chunked_list": ["package com.dhx.template.common.constant;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className JwtConstant\n * @date : 2023/05/04/ 16:48\n **/\npublic class JwtConstant {\n\n    public static final  String SECRET_KEY =\"64gbe45fgw45634523fv23432fg435tgw3fw34765rfdfbd\";\n", "    public static final  String SECRET_KEY =\"64gbe45fgw45634523fv23432fg435tgw3fw34765rfdfbd\";\n\n    public static final  long EXPIRATION_TIME=60*60*24; //\u5355\u4f4d second\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/exception/BusinessException.java", "chunked_list": ["package com.dhx.template.common.exception;\n\nimport com.dhx.template.common.ErrorCode;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className BusinessException", " * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className BusinessException\n * @date : 2023/01/07/ 14:28\n **/\n@Data\npublic class BusinessException extends RuntimeException implements Serializable {\n\n    private static final long serialVersionUID = 165474231423634L;\n\n    /**\n     * \u9519\u8bef\u7801\n     */\n    private int code=50000;\n\n\n    /**\n     * \u9519\u8bef\u63cf\u8ff0\n     */\n    private String message;\n\n    public BusinessException(int code ,String message){\n        super(message);// \u9519\u8bef\u4fe1\u606f\n        this.code=code;\n        this.message=message;\n    }\n\n    public BusinessException(ErrorCode errorCode, String message){\n        super(errorCode.getMsg());// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=message;\n    }\n\n    public BusinessException(ErrorCode errorCode){\n        super(errorCode.getMsg());// \u9519\u8bef\u4fe1\u606f\n        this.code=errorCode.getCode();\n        this.message=errorCode.getMsg();\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/annotation/SysLog.java", "chunked_list": ["package com.dhx.template.common.annotation;\n\nimport java.lang.annotation.*;\n\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface SysLog {\n    /**\n     * \u6267\u884c\u7684\u5185\u5bb9", "    /**\n     * \u6267\u884c\u7684\u5185\u5bb9\n     *\n     * @return\n     */\n    String value() default \"\";\n}\n"]}
{"filename": "src/main/java/com/dhx/template/common/annotation/AuthCheck.java", "chunked_list": ["package com.dhx.template.common.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className AuthCheck", " * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className AuthCheck\n * @date : 2023/01/07/ 14:57\n **/\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AuthCheck {\n\n    /**\n     *", "    /**\n     *\n     * @return\n     */\n    String mustRole() default \"\";\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/config/MvcConfig.java", "chunked_list": ["package com.dhx.template.config;\n\nimport com.dhx.template.aop.ReFreshTokenInterceptor;\nimport com.dhx.template.service.JwtTokensService;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n", "import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport javax.annotation.Resource;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className MvcConfig\n * @date : 2023/01/07/ 14:55\n **/\n@Configuration\npublic class MvcConfig implements WebMvcConfigurer {\n\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Resource\n    JwtTokensService jwtTokensService;\n\n    @Override", " **/\n@Configuration\npublic class MvcConfig implements WebMvcConfigurer {\n\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Resource\n    JwtTokensService jwtTokensService;\n\n    @Override", "    public void addInterceptors(InterceptorRegistry registry) {\n        //\u6ce8\u610f\u4e0d\u8981\u62e6\u622aknife4j\u7684\u63a5\u53e3\u6587\u6863\n        registry.addInterceptor(new ReFreshTokenInterceptor(stringRedisTemplate, jwtTokensService)).addPathPatterns(\"/**\")\n                .excludePathPatterns(\n                        \"/**/login/**\",\n                        \"/**/register/**\",\n                        \"/**/doc.html/**\",\n                        \"/static/**\",\n                        \"/**/swagger-ui.html/**\",\n                        \"/**/favicon.ico\",\n                        \"/**/swagger-resources/**\",\n                        \"/**/webjars/**\"\n                );\n        WebMvcConfigurer.super.addInterceptors(registry);\n    }\n\n\n    /**\n     * \u6dfb\u52a0\u5168\u5c40\u8de8\u57df\u914d\u7f6e\n     *\n     * @param registry \u6ce8\u518c\u8868\n     */\n    @Override", "    public void addCorsMappings(CorsRegistry registry) {\n        // \u8986\u76d6\u6240\u6709\u8bf7\u6c42\n        registry.addMapping(\"/**\")\n                // \u5141\u8bb8\u53d1\u9001 Cookie\n                .allowCredentials(true)\n                // \u653e\u884c\u54ea\u4e9b\u57df\u540d\uff08\u5fc5\u987b\u7528 patterns\uff0c\u5426\u5219 * \u4f1a\u548c allowCredentials \u51b2\u7a81\uff09\n                .allowedOriginPatterns(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                .allowedHeaders(\"*\")\n                .exposedHeaders(\"*\");\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/config/MybatisConfig.java", "chunked_list": ["package com.dhx.template.config;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className MybatisConfig  \u6ce8\u5165mybatis-plus\u5206\u9875\u62e6\u622a\u5668,\n * @date : 2023/01/07/ 14:55\n **/\n@Configuration\npublic class MybatisConfig {\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n}\n", "    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/config/SmsConfig.java", "chunked_list": ["package com.dhx.template.config;\n\nimport com.aliyun.dysmsapi20170525.Client;\nimport com.aliyun.teaopenapi.models.Config;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**", "\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className SmsConfig\n * @date : 2023/07/05/ 17:53\n **/\n@Configuration\npublic class SmsConfig {\n    @Value(\"${sms.endpoint}\")\n    private String endpoint;\n\n    @Value(\"${sms.accessId}\")\n    private String accessId;\n\n    @Value(\"${sms.accessKey}\")\n    private String accessKey;\n\n    @Bean\n    Client client(){\n        Client client = null;\n        Config config = new Config()\n                // \u60a8\u7684AccessKey ID\n                .setAccessKeyId(accessId)\n                // \u60a8\u7684AccessKey Secret\n                .setAccessKeySecret(accessKey);\n        config.endpoint = endpoint;\n        config.setEndpoint(endpoint);", "        try {\n            client = new Client(config);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return client;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/config/ThreadPoolConfigProperties.java", "chunked_list": ["package com.dhx.template.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className ThreadPoolConfigProperties\n * @date : 2023/05/04/ 17:00", " * @className ThreadPoolConfigProperties\n * @date : 2023/05/04/ 17:00\n **/\n@Data\n@Component\n@ConfigurationProperties(prefix = \"template.thread\")\npublic class ThreadPoolConfigProperties {\n\n    private Integer coreSize;\n\n    private Integer maxSize;\n\n    private Integer keepAliveTime;\n}\n"]}
{"filename": "src/main/java/com/dhx/template/config/ThreadConfig.java", "chunked_list": ["package com.dhx.template.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.TimeUnit;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className ThreadConfig\n * @date : 2023/05/04/ 17:00\n **/\n@Configuration\npublic class ThreadConfig {\n\n    @Bean", "public class ThreadConfig {\n\n    @Bean\n    public ThreadPoolExecutor threadPoolExecutor(ThreadPoolConfigProperties pool) {\n        return new ThreadPoolExecutor(pool.getCoreSize(), pool.getMaxSize(), pool.getKeepAliveTime(), TimeUnit.SECONDS,\n                new LinkedBlockingDeque<>(100000),\n                Executors.defaultThreadFactory(),\n                new ThreadPoolExecutor.AbortPolicy());\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/DO/UserEntity.java", "chunked_list": ["package com.dhx.template.model.DO;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport java.io.Serializable;\nimport java.util.Date;\n\nimport com.dhx.template.common.constant.UserConstant;", "\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.Pattern;\n\n/**\n * \n * @TableName t_user\n */", " * @TableName t_user\n */\n@TableName(value =\"t_user\")\n@Data\npublic class UserEntity implements Serializable {\n\n    /**\n     * \u7528\u6237id\n     */\n    @TableId(type = IdType.ASSIGN_ID)\n    private Long userId;\n\n    /**\n     * \u6635\u79f0\n     */\n    @Pattern(regexp = UserConstant.USER_NAME_REGEX, message = \"\u7528\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String userName;\n\n    /**\n     * \u8d26\u6237\n     */\n    @Pattern(regexp = UserConstant.USER_ACCOUNT_REGEX, message = \"\u7528\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String userAccount;\n\n    /**\n     * \u767b\u5f55\u5bc6\u7801\n     */\n    @Pattern(regexp = UserConstant.PASSWORD_REGEX, message = \"\u7528\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String userPassword;\n\n    /**\n     * \u5730\u5740\n     */\n    private String address;\n\n    /**\n     * \u5934\u50cf\u5730\u5740\n     */\n    private String avatarUrl;\n\n    /**\n     * \u6027\u522b1\u75370\u5973\n     */\n    private Integer gender;\n\n    /**\n     * \u624b\u673a\u53f7\n     */\n    private String phone;\n\n    /**\n     * \u90ae\u7bb1\n     */\n    private String email;\n\n    /**\n     * \u6700\u540e\u4e00\u6b21\u767b\u5f55\u7684IP\n     */\n    private String lastLoginIp;\n\n    /**\n     * \u6ce8\u518c\u65f6\u95f4\n     */\n    private Date createTime;\n\n    /**\n     * \u66f4\u65b0\u65f6\u95f4\n     */\n    private Date updateTime;\n\n    /**\n     * \u903b\u8f91\u5220\u9664\n     */\n    private Integer isDelete;\n\n    /**\n     * \u662f\u5426\u662f\u7ba1\u7406\u5458\n     */\n    private String userRole;\n\n    /**\n     * \u51fa\u751f\u65e5\u671f\n     */\n    private Date birth;\n\n    public UserEntity(Long userId, String userName, String avatarUrl, String userRole) {\n        this.userId = userId;\n        this.userName = userName;\n        this.avatarUrl = avatarUrl;\n        this.userRole = userRole;\n    }\n\n    public UserEntity(){}\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n\n    @Override", "    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        UserEntity other = (UserEntity) that;\n        return (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId()))\n            && (this.getUserName() == null ? other.getUserName() == null : this.getUserName().equals(other.getUserName()))\n            && (this.getUserAccount() == null ? other.getUserAccount() == null : this.getUserAccount().equals(other.getUserAccount()))\n            && (this.getUserPassword() == null ? other.getUserPassword() == null : this.getUserPassword().equals(other.getUserPassword()))\n            && (this.getAddress() == null ? other.getAddress() == null : this.getAddress().equals(other.getAddress()))\n            && (this.getAvatarUrl() == null ? other.getAvatarUrl() == null : this.getAvatarUrl().equals(other.getAvatarUrl()))\n            && (this.getGender() == null ? other.getGender() == null : this.getGender().equals(other.getGender()))\n            && (this.getPhone() == null ? other.getPhone() == null : this.getPhone().equals(other.getPhone()))\n            && (this.getEmail() == null ? other.getEmail() == null : this.getEmail().equals(other.getEmail()))\n            && (this.getLastLoginIp() == null ? other.getLastLoginIp() == null : this.getLastLoginIp().equals(other.getLastLoginIp()))\n            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))\n            && (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))\n            && (this.getIsDelete() == null ? other.getIsDelete() == null : this.getIsDelete().equals(other.getIsDelete()))\n            && (this.getUserRole() == null ? other.getUserRole() == null : this.getUserRole().equals(other.getUserRole()))\n            && (this.getBirth() == null ? other.getBirth() == null : this.getBirth().equals(other.getBirth()));\n    }\n\n    @Override", "    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());\n        result = prime * result + ((getUserName() == null) ? 0 : getUserName().hashCode());\n        result = prime * result + ((getUserAccount() == null) ? 0 : getUserAccount().hashCode());\n        result = prime * result + ((getUserPassword() == null) ? 0 : getUserPassword().hashCode());\n        result = prime * result + ((getAddress() == null) ? 0 : getAddress().hashCode());\n        result = prime * result + ((getAvatarUrl() == null) ? 0 : getAvatarUrl().hashCode());\n        result = prime * result + ((getGender() == null) ? 0 : getGender().hashCode());\n        result = prime * result + ((getPhone() == null) ? 0 : getPhone().hashCode());\n        result = prime * result + ((getEmail() == null) ? 0 : getEmail().hashCode());\n        result = prime * result + ((getLastLoginIp() == null) ? 0 : getLastLoginIp().hashCode());\n        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());\n        result = prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());\n        result = prime * result + ((getIsDelete() == null) ? 0 : getIsDelete().hashCode());\n        result = prime * result + ((getUserRole() == null) ? 0 : getUserRole().hashCode());\n        result = prime * result + ((getBirth() == null) ? 0 : getBirth().hashCode());\n        return result;\n    }\n\n    @Override", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", userId=\").append(userId);\n        sb.append(\", userName=\").append(userName);\n        sb.append(\", userAccount=\").append(userAccount);\n        sb.append(\", userPassword=\").append(userPassword);\n        sb.append(\", address=\").append(address);\n        sb.append(\", avatarUrl=\").append(avatarUrl);\n        sb.append(\", gender=\").append(gender);\n        sb.append(\", phone=\").append(phone);\n        sb.append(\", email=\").append(email);\n        sb.append(\", lastLoginIp=\").append(lastLoginIp);\n        sb.append(\", createTime=\").append(createTime);\n        sb.append(\", updateTime=\").append(updateTime);\n        sb.append(\", isDelete=\").append(isDelete);\n        sb.append(\", userRole=\").append(userRole);\n        sb.append(\", birth=\").append(birth);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }\n}"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/JwtToken.java", "chunked_list": ["package com.dhx.template.model.DTO;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className JwtToken\n * @date : 2023/05/04/ 16:49", " * @className JwtToken\n * @date : 2023/05/04/ 16:49\n **/\n@Data\npublic class JwtToken implements Serializable {\n\n    private String token;\n    private String refreshToken;\n\n    public JwtToken(String token, String refreshToken) {\n        this.token = token;\n        this.refreshToken = refreshToken;\n    }\n", "    public String getToken() {\n        return token;\n    }\n\n    public void setToken(String token) {\n        this.token = token;\n    }\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n", "    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n}"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/user/LoginRequest.java", "chunked_list": ["package com.dhx.template.model.DTO.user;\n\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.Pattern;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className LoginParam", " * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className LoginParam\n * @date : 2023/05/04/ 16:41\n **/\n@Data\npublic class LoginRequest {\n    /**\n     * 4~16\u4f4d \u6570\u5b57,\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\n     */\n    @Pattern(regexp = UserConstant.USER_ACCOUNT_REGEX,message = \"\u8d26\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303\")\n    private String userAccount;\n\n\n    /**\n     * \u81f3\u5c118-16\u4e2a\u5b57\u7b26\uff0c\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\u548c1\u4e2a\u6570\u5b57\uff0c\u5176\u4ed6\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\n     */\n    @Pattern(regexp = UserConstant.PASSWORD_REGEX,message = \"\u5bc6\u7801\u4e0d\u7b26\u5408\u89c4\u8303\")\n    private String password;\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/user/UpdateUserRequest.java", "chunked_list": ["package com.dhx.template.model.DTO.user;\n\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.Pattern;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**", "\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UpdateUserRequest\n * @date : 2023/07/05/ 16:18\n **/\n@Data\npublic class UpdateUserRequest implements Serializable {\n\n\n    /**\n     * \u6635\u79f0\n     */\n    @Pattern(regexp = UserConstant.USER_ACCOUNT_REGEX, message = \"\u7528\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String userName;\n\n    /**\n     * \u5730\u5740\n     */\n    private String address;\n\n    /**\n     * \u5934\u50cf\u5730\u5740\n     */\n    private String avatarUrl;\n\n    /**\n     * \u6027\u522b1\u75370\u5973\n     */\n    private Integer gender;\n\n    /**\n     * \u624b\u673a\u53f7\n     */\n    @Pattern(regexp = UserConstant.PHONE_REGEX, message = \"\u7535\u8bdd\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String phone;\n\n    /**\n     * \u90ae\u7bb1\n     */\n    @Pattern(regexp = UserConstant.EMAIL_REGEX, message = \"\u90ae\u7bb1\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String email;\n\n    /**\n     * \u51fa\u751f\u65e5\u671f\n     */\n    private Date birth;\n\n    private static final long serialVersionUID = 1L;\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/user/RegisterRequest.java", "chunked_list": ["package com.dhx.template.model.DTO.user;\n\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.Pattern;\n\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className RegisterParam\n * @date : 2023/05/04/ 16:42\n **/\n@Data\npublic class RegisterRequest {\n    /**\n     * 4~16\u4f4d \u6570\u5b57,\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\n     */\n    @Pattern(regexp = UserConstant.USER_ACCOUNT_REGEX,message = \"\u8d26\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303\")\n    private String userAccount;\n\n\n    /**\n     * \u81f3\u5c118-16\u4e2a\u5b57\u7b26\uff0c\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\u548c1\u4e2a\u6570\u5b57\uff0c\u5176\u4ed6\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\n     */\n    @Pattern(regexp = UserConstant.PASSWORD_REGEX,message = \"\u5bc6\u7801\u4e0d\u7b26\u5408\u89c4\u8303\")\n    private String password;\n\n    private String checkPassword;\n}"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/user/UserDTO.java", "chunked_list": ["package com.dhx.template.model.DTO.user;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserDTO\n * @date : 2023/05/04/ 16:18", " * @className UserDTO\n * @date : 2023/05/04/ 16:18\n **/\n@Data\npublic class UserDTO implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \u7528\u6237id\n     */\n    private Long userId;\n\n    /**\n     * \u6635\u79f0\n     */\n    private String userName;\n\n    /**\n     * \u5934\u50cf\u5730\u5740\n     */\n    private String avatarUrl;\n\n    /**\n     * \u7528\u6237\u89d2\u8272\n     */\n    private String userRole;\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/DTO/user/LoginByPhoneRequest.java", "chunked_list": ["package com.dhx.template.model.DTO.user;\n\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Pattern;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className LoginBuPhoneReqeust\n * @date : 2023/07/05/ 16:40\n **/\n\n@Data\npublic class LoginByPhoneRequest {\n\n    /**\n     * \u7535\u8bdd\n     */\n    @Pattern(regexp = UserConstant.PHONE_REGEX,message = \"\u624b\u673a\u53f7\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String phone;\n\n    /**\n     * \u9a8c\u8bc1\u7801\n     */\n    @NotNull(message = \"\u9a8c\u8bc1\u7801\u4e0d\u80fd\u4e3a\u7a7a!\")\n    private String code;\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/enums/UserRoleEnum.java", "chunked_list": ["package com.dhx.template.model.enums;\n\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserRoleEnum\n * @date : 2023/07/05/ 15:03\n **/\npublic enum UserRoleEnum {\n\n    USER(\"\u7528\u6237\", \"user\"),\n    ADMIN(\"\u7ba1\u7406\u5458\", \"admin\"),\n    BAN(\"\u5c01\u53f7\", \"ban\");\n\n    private final String role;\n\n    private final String value;\n\n    UserRoleEnum(String text, String value) {\n        this.role = text;\n        this.value = value;\n    }\n\n    /**\n     * \u83b7\u53d6\u503c\u5217\u8868\n     *\n     * @return\n     */", "    public static List<String> getValues() {\n        return Arrays.stream(values()).map(item -> item.value).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e value \u83b7\u53d6\u679a\u4e3e\n     *\n     * @param value\n     * @return\n     */\n    public static UserRoleEnum getEnumByValue(String value) {", "    public static UserRoleEnum getEnumByValue(String value) {\n        if (ObjectUtils.isEmpty(value)) {\n            return null;\n        }\n        for (UserRoleEnum anEnum : UserRoleEnum.values()) {\n            if (anEnum.value.equals(value)) {\n                return anEnum;\n            }\n        }\n        return null;\n    }\n", "    public String getValue() {\n        return value;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/model/VO/UserVO.java", "chunked_list": ["package com.dhx.template.model.VO;\n\nimport com.dhx.template.common.constant.UserConstant;\nimport lombok.Data;\n\nimport javax.validation.constraints.Pattern;\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**", "\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserVO\n * @date : 2023/05/04/ 16:19\n **/\n@Data\npublic class UserVO implements Serializable {\n\n    /**\n     * \u7528\u6237id\n     */\n    private Long userId;\n\n    /**\n     * \u6635\u79f0\n     */\n    @Pattern(regexp = UserConstant.USER_ACCOUNT_REGEX, message = \"\u7528\u6237\u540d\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String userName;\n\n    /**\n     * \u8d26\u6237\n     */\n    private String userAccount;\n\n    /**\n     * \u5730\u5740\n     */\n    private String address;\n\n    /**\n     * \u5934\u50cf\u5730\u5740\n     */\n    private String avatarUrl;\n\n    /**\n     * \u6027\u522b1\u75370\u5973\n     */\n    private Integer gender;\n\n    /**\n     * \u624b\u673a\u53f7\n     */\n    @Pattern(regexp = UserConstant.PHONE_REGEX, message = \"\u7535\u8bdd\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String phone;\n\n    /**\n     * \u90ae\u7bb1\n     */\n    @Pattern(regexp = UserConstant.EMAIL_REGEX, message = \"\u90ae\u7bb1\u4e0d\u7b26\u5408\u89c4\u8303!\")\n    private String email;\n\n    /**\n     * \u7528\u6237\u89d2\u8272\n     */\n    private String userRole;\n\n    /**\n     * \u51fa\u751f\u65e5\u671f\n     */\n    private Date birth;\n\n    private static final long serialVersionUID = 1L;\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/controller/UserController.java", "chunked_list": ["package com.dhx.template.controller;\n\nimport cn.hutool.core.bean.BeanUtil;\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.util.RandomUtil;\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.annotation.AuthCheck;\nimport com.dhx.template.common.annotation.SysLog;\nimport com.dhx.template.common.constant.RedisConstant;", "import com.dhx.template.common.annotation.SysLog;\nimport com.dhx.template.common.constant.RedisConstant;\nimport com.dhx.template.common.constant.UserConstant;\nimport com.dhx.template.model.DO.UserEntity;\nimport com.dhx.template.model.DTO.user.*;\nimport com.dhx.template.model.VO.UserVO;\nimport com.dhx.template.service.JwtTokensService;\nimport com.dhx.template.service.UserService;\nimport com.dhx.template.utils.ResultUtil;\nimport com.dhx.template.utils.SMSUtil;", "import com.dhx.template.utils.ResultUtil;\nimport com.dhx.template.utils.SMSUtil;\nimport com.dhx.template.utils.ThrowUtil;\nimport com.dhx.template.utils.UserHolder;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.*;\n", "import org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.validation.Valid;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n/**", "\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className UserController\n * @date : 2023/05/04/ 16:41\n **/\n@RestController\n@RequestMapping(\"/user\")\n@Slf4j\npublic class UserController {\n\n    @Resource\n    UserService userService;\n\n    @Resource\n    JwtTokensService jwtTokensService;\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Resource\n    SMSUtil smsUtil;\n\n\n    @PostMapping(\"/login\")\n    @ApiOperation(\"\u7528\u6237\u767b\u5f55\")\n    @SysLog(\"\u7528\u6237\u767b\u5f55\")", "@Slf4j\npublic class UserController {\n\n    @Resource\n    UserService userService;\n\n    @Resource\n    JwtTokensService jwtTokensService;\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Resource\n    SMSUtil smsUtil;\n\n\n    @PostMapping(\"/login\")\n    @ApiOperation(\"\u7528\u6237\u767b\u5f55\")\n    @SysLog(\"\u7528\u6237\u767b\u5f55\")", "    public BaseResponse login(@Valid @RequestBody LoginRequest param, HttpServletRequest request) {\n        if (param == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        String userAccount = param.getUserAccount();\n        String password = param.getPassword();\n        if (password == null || userAccount == null) {\n            return ResultUtil.error(ErrorCode.NULL_ERROR);\n        }\n        return userService.login(userAccount, password, request);\n    }\n\n    @PostMapping(\"/login/phone\")\n    @ApiOperation(\"\u624b\u673a\u53f7\u767b\u5f55\")\n    @SysLog\n    public BaseResponse<String> loginByPhone(@RequestBody @Valid LoginByPhoneRequest param, HttpServletRequest request) {\n        ThrowUtil.throwIf(StringUtils.isBlank(param.getCode()) || param.getCode().length() != UserConstant.CODE_LEN,\n                ErrorCode.PARAMS_ERROR, \"\u9a8c\u8bc1\u7801\u975e\u6cd5!\");\n        String codeKey = RedisConstant.CODE_KEY + param.getPhone();\n        String codeVal = stringRedisTemplate.opsForValue().get(codeKey);\n        // \u9a8c\u8bc1\u7801\u662f\u5426\u8fc7\u671f", "        if(StringUtils.isBlank(codeVal)){\n            return  ResultUtil.error(ErrorCode.FORBIDDEN_ERROR,\"\u9a8c\u8bc1\u7801\u8fc7\u671f, \u8bf7\u91cd\u65b0\u53d1\u9001!\");\n        }\n        String[] split = codeVal.split(\"-\");\n        long time = Long.parseLong(split[0]);\n        if(new Date().getTime()/1000 - time > 60 * 5){\n            return  ResultUtil.error(ErrorCode.FORBIDDEN_ERROR,\"\u9a8c\u8bc1\u7801\u8fc7\u671f, \u8bf7\u91cd\u65b0\u53d1\u9001!\");\n        }\n        // \u6821\u9a8ccode\n        String code = split[1];\n        if (code.equals(param.getCode())) {\n            return userService.loginByPhone(param.getPhone(), request);\n        }\n        return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u9a8c\u8bc1\u7801\u9519\u8bef!\");\n    }\n\n    @PostMapping(\"/login/code\")\n    @ApiOperation(\"\u53d1\u9001\u624b\u673a\u767b\u5f55\u9a8c\u8bc1\u7801\")\n    @SysLog", "        if (code.equals(param.getCode())) {\n            return userService.loginByPhone(param.getPhone(), request);\n        }\n        return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u9a8c\u8bc1\u7801\u9519\u8bef!\");\n    }\n\n    @PostMapping(\"/login/code\")\n    @ApiOperation(\"\u53d1\u9001\u624b\u673a\u767b\u5f55\u9a8c\u8bc1\u7801\")\n    @SysLog\n    public BaseResponse sendCodeSMS(@RequestParam(\"phone\") String phone) {\n        String codeKey = RedisConstant.CODE_KEY + phone;\n        String oldCode = stringRedisTemplate.opsForValue().get(codeKey);\n        // \u5224\u65ad\u662f\u5426\u4e4b\u524d\u53d1\u9001\u8fc7", "    public BaseResponse sendCodeSMS(@RequestParam(\"phone\") String phone) {\n        String codeKey = RedisConstant.CODE_KEY + phone;\n        String oldCode = stringRedisTemplate.opsForValue().get(codeKey);\n        // \u5224\u65ad\u662f\u5426\u4e4b\u524d\u53d1\u9001\u8fc7\n        if(StringUtils.isNotBlank(oldCode)){\n            String[] split = oldCode.split(\"-\");\n            long time = Long.parseLong(split[0]);\n            // \u5982\u679c\u4e24\u6b21\u53d1\u9001\u7684\u95f4\u9694\u5c0f\u4e8e 60s => reject\n            if(new Date().getTime()/1000 - time < 60){\n                return  ResultUtil.error(ErrorCode.FORBIDDEN_ERROR,\"\u8bf7\u7a0d\u540e\u53d1\u9001\u9a8c\u8bc1\u7801!\");\n            }\n        }\n        // TODO OSS Email\n        // \u62fc\u63a5\u65f6\u95f4\u6233\n        String newCode = smsUtil.send(phone);", "            if(new Date().getTime()/1000 - time < 60){\n                return  ResultUtil.error(ErrorCode.FORBIDDEN_ERROR,\"\u8bf7\u7a0d\u540e\u53d1\u9001\u9a8c\u8bc1\u7801!\");\n            }\n        }\n        // TODO OSS Email\n        // \u62fc\u63a5\u65f6\u95f4\u6233\n        String newCode = smsUtil.send(phone);\n        if(newCode.equals(\"\")){\n            return ResultUtil.error(ErrorCode.SYSTEM_ERROR,\"\u53d1\u9001\u5931\u8d25,\u670d\u52a1\u5f02\u5e38!\");\n        }\n        long now = new Date().getTime()/1000;\n        String codeVal = now+\"-\"+newCode;\n        // \u5b58\u50a8\n        stringRedisTemplate.opsForValue().set(codeKey, codeVal, RedisConstant.CODE_TTL, TimeUnit.SECONDS);\n        return ResultUtil.success();\n    }\n\n    @GetMapping(\"/logout\")\n    @ApiOperation(\"\u9000\u51fa\u767b\u5f55\")", "    public BaseResponse logOut(HttpServletRequest request) {\n        UserDTO user = UserHolder.getUser();\n        jwtTokensService.removeTokenByUserId(user.getUserId());\n        return ResultUtil.success();\n    }\n\n    @PostMapping(\"/register\")\n    @ApiOperation(\"\u7528\u6237\u6ce8\u518c\")\n    public BaseResponse register(@Valid @RequestBody RegisterRequest param) {\n        if (param == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        String userAccount = param.getUserAccount();\n        String password = param.getPassword();\n        ;\n        String checkPassword = param.getCheckPassword();\n        ;\n        return userService.register(userAccount, password, checkPassword);\n    }\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(\"\u901a\u8fc7\u7528\u6237id\u83b7\u53d6\u7528\u6237\u4fe1\u606f\")\n    public BaseResponse<UserVO> getUserById(@PathVariable(\"id\") Long userId) {", "    public BaseResponse register(@Valid @RequestBody RegisterRequest param) {\n        if (param == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        String userAccount = param.getUserAccount();\n        String password = param.getPassword();\n        ;\n        String checkPassword = param.getCheckPassword();\n        ;\n        return userService.register(userAccount, password, checkPassword);\n    }\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(\"\u901a\u8fc7\u7528\u6237id\u83b7\u53d6\u7528\u6237\u4fe1\u606f\")\n    public BaseResponse<UserVO> getUserById(@PathVariable(\"id\") Long userId) {", "        if (userId == null || userId < 0) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        return userService.getUserById(userId);\n    }\n\n\n    @GetMapping(\"/list\")\n    @ApiOperation(\"\u83b7\u53d6\u7528\u6237\u5217\u8868\")\n    public BaseResponse<List<UserVO>> getUserList(\n            @RequestParam(value = \"pageSize\", defaultValue = \"5\") int pageSize,\n            @RequestParam(value = \"current\", defaultValue = \"1\") int current) {\n        return userService.getUserList(pageSize, current);\n    }\n\n\n    @DeleteMapping(\"/{id}\")\n    @ApiOperation(\"\u901a\u8fc7ID\u5220\u9664\u7528\u6237\")\n    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)\n    public BaseResponse<Boolean> deleteUserById(@PathVariable(\"id\") Long userId) {", "        if (userId == null || userId < 0) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        return userService.deleteUserById(userId);\n    }\n\n\n    @PostMapping(\"/add\")\n    @ApiOperation(\"\u6dfb\u52a0\u7528\u6237\")\n    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)\n    public BaseResponse addUser(@RequestBody @Valid UserEntity userVO) {", "    public BaseResponse addUser(@RequestBody @Valid UserEntity userVO) {\n        if (userVO == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        return userService.addUser(userVO);\n    }\n\n    @PostMapping(\"/update\")\n    @ApiOperation(\"\u66f4\u65b0\u7528\u6237\u4fe1\u606f\")\n    public BaseResponse updateUserInfo(@RequestBody @Valid UpdateUserRequest userVO) {\n        if (userVO == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        UserDTO user = UserHolder.getUser();\n        UserEntity userEntity = BeanUtil.copyProperties(userVO, UserEntity.class);\n        userEntity.setUserId(user.getUserId());\n        return ResultUtil.success(userService.updateById(userEntity));\n    }\n\n    @GetMapping(\"/current\")\n    @ApiOperation(\"\u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\")\n    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)\n    public BaseResponse<UserVO> currentUser() {\n        UserDTO user = UserHolder.getUser();\n        UserEntity userEntity = userService.getById(user.getUserId());\n        UserVO UserVO = BeanUtil.copyProperties(userEntity, UserVO.class);\n        return ResultUtil.success(UserVO);\n    }\n}\n", "    public BaseResponse updateUserInfo(@RequestBody @Valid UpdateUserRequest userVO) {\n        if (userVO == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n        }\n        UserDTO user = UserHolder.getUser();\n        UserEntity userEntity = BeanUtil.copyProperties(userVO, UserEntity.class);\n        userEntity.setUserId(user.getUserId());\n        return ResultUtil.success(userService.updateById(userEntity));\n    }\n\n    @GetMapping(\"/current\")\n    @ApiOperation(\"\u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\")\n    @AuthCheck(mustRole = UserConstant.ADMIN_ROLE)\n    public BaseResponse<UserVO> currentUser() {\n        UserDTO user = UserHolder.getUser();\n        UserEntity userEntity = userService.getById(user.getUserId());\n        UserVO UserVO = BeanUtil.copyProperties(userEntity, UserVO.class);\n        return ResultUtil.success(UserVO);\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/service/UserService.java", "chunked_list": ["package com.dhx.template.service;\n\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.model.DO.UserEntity;\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.dhx.template.model.VO.UserVO;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\n", "import java.util.List;\n\n/**\n* @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n* @description \u9488\u5bf9\u8868\u3010t_user\u3011\u7684\u6570\u636e\u5e93\u64cd\u4f5cService\n* @createDate 2023-05-04 16:18:15\n*/\npublic interface UserService extends IService<UserEntity> {\n\n    /**\n     * \u5220\u9664\u7528\u6237id\n     *\n     * @param userId \u7528\u6237id\n     * @return {@link BaseResponse}<{@link Boolean}>\n     */\n    BaseResponse<Boolean> deleteUserById(Long userId);\n\n    /**\n     * \u83b7\u53d6\u7528\u6237\u5217\u8868\n     *\n     * @param pageSize \u9875\u9762\u5927\u5c0f\n     * @param current  \u5f53\u524d\n     * @return {@link BaseResponse}<{@link List}<{@link UserVO}>>\n     */\n    BaseResponse<List<UserVO>> getUserList(int pageSize, int current);\n\n    /**\n     * \u5f97\u5230\u7528\u6237id\n     *\n     * @param userId \u7528\u6237id\n     * @return {@link BaseResponse}<{@link UserVO}>\n     */\n    BaseResponse<UserVO> getUserById(Long userId);\n\n    /**\n     * \u6dfb\u52a0\u7528\u6237\n     *\n     * @param userVo\n     * @return {@link BaseResponse}\n     */\n    BaseResponse addUser(UserEntity userVo);\n\n    /**\n     * \u7528\u6237\u6ce8\u518c\n     * @param userAccount \u7528\u6237\u8d26\u6237\u540d\n     * @param password\n     * @param checkPassword\n     * @return\n     */\n    BaseResponse register(String userAccount, String password, String checkPassword);\n\n    /**\n     * \u7528\u6237\u767b\u5f55\n     * @param userAccount \u8d26\u6237\n     * @param password \u5bc6\u7801\n     * @return \u8fd4\u56detoken\n     */\n    BaseResponse login(String userAccount, String password, HttpServletRequest request);\n\n    /**\n     * \u662f\u5426\u662fadmin\n     *\n     * @param request \u8bf7\u6c42\n     * @return boolean\n     */\n    boolean isAdmin(HttpServletRequest request);\n\n\n    /**\n     * \u662f\u7ba1\u7406\n     *\n     * @param user \u7528\u6237\n     * @return boolean\n     */\n    boolean isAdmin(UserEntity user);\n\n    /**\n     * \u901a\u8fc7\u624b\u673a\u53f7\u767b\u5f55(\u5982\u679c\u6ca1\u6709\u6ce8\u518c\u9700\u8981\u6ce8\u518c)\n     *\n     * @param phone    \u7535\u8bdd\n     * @return {@link BaseResponse}\n     */\n    BaseResponse<String> loginByPhone(String phone,HttpServletRequest request);\n}"]}
{"filename": "src/main/java/com/dhx/template/service/JwtTokensService.java", "chunked_list": ["package com.dhx.template.service;\n\nimport com.dhx.template.model.DO.UserEntity;\nimport com.dhx.template.model.DTO.JwtToken;\n\npublic interface JwtTokensService  {\n\n\n    /**\n     * \u751f\u6210JWT\u8bbf\u95eetoken\n     * @param user\n     * @return\n     */\n    String generateAccessToken(UserEntity user);\n\n\n    /**\n     * \u751f\u6210refreshToken\n     * @param user\n     * @return\n     */\n    String generateRefreshToken(UserEntity user);\n\n\n    /**\n     * \u9a8c\u8bc1token\n     *\n     * @param token\n     * @return\n     */\n    UserEntity validateToken(String token);\n\n    /**\n     * \u83b7\u53d6\u4ee4\u724c\u4e2d\u7684\u7528\u6237id\n     * @param token\n     * @return\n     */\n    String getUserIdFromToken(String token);\n\n    /**\n     * \u64a4\u9500JWT\u4ee4\u724c\n     * @param user\n     */", "    public void revokeToken(UserEntity user) ;\n\n\n    /**\n     * \u9a8c\u8bc1token\u662f\u5426\u8fc7\u671f\n     * @param token\n     * @return\n     */\n    boolean isTokenExpired(String token);\n\n    /**\n     * \u6e05\u9664\u8fc7\u671f\u7684\u4ee4\u724c\n     */\n    void cleanExpiredTokens();\n\n    /**\n     * \u4fdd\u5b58token\u5230redis\n     * @param jwtToken\n     * @param user\n     */\n    void save2Redis(JwtToken jwtToken, UserEntity user);\n\n    /**\n     * \u901a\u8fc7\u7528\u6237id\u5220\u9664\u4ee4\u724c\n     *\n     * @param userId \u7528\u6237id\n     */\n    void removeTokenByUserId(Long userId);\n}\n\n"]}
{"filename": "src/main/java/com/dhx/template/service/impl/JwtTokensServiceImpl.java", "chunked_list": ["package com.dhx.template.service.impl;\n\nimport com.dhx.template.model.DO.UserEntity;\nimport com.dhx.template.model.DTO.JwtToken;\nimport com.dhx.template.service.JwtTokensService;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;", "import org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.dhx.template.common.constant.JwtConstant.EXPIRATION_TIME;\nimport static com.dhx.template.common.constant.JwtConstant.SECRET_KEY;\nimport static com.dhx.template.common.constant.RedisConstant.ACCESS_TOKEN_PREFIX;", "import static com.dhx.template.common.constant.JwtConstant.SECRET_KEY;\nimport static com.dhx.template.common.constant.RedisConstant.ACCESS_TOKEN_PREFIX;\nimport static com.dhx.template.common.constant.RedisConstant.REFRESH_TOKEN_PREFIX;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className JwtTokensServiceImpl\n * @date : 2023/05/04/ 16:48\n **/\n@Service\npublic class JwtTokensServiceImpl implements JwtTokensService {\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Override", " **/\n@Service\npublic class JwtTokensServiceImpl implements JwtTokensService {\n\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n\n    @Override\n    public String generateAccessToken(UserEntity user) {\n        Claims claims = Jwts.claims().setSubject(String.valueOf(user.getUserId()));\n        claims.put(\"avatarUrl\", user.getAvatarUrl());\n        claims.put(\"userRole\", user.getUserRole());\n        Date now = new Date();\n        Date expirationDate = new Date(now.getTime() + EXPIRATION_TIME * 1000);\n        String token = Jwts.builder()\n                .setClaims(claims)\n                .setIssuedAt(now)\n                .setExpiration(expirationDate)\n                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n                .compact();\n\n        String key = ACCESS_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.opsForValue().set(key, token, EXPIRATION_TIME, TimeUnit.SECONDS);\n\n        return token;\n    }\n\n    @Override", "    public String generateAccessToken(UserEntity user) {\n        Claims claims = Jwts.claims().setSubject(String.valueOf(user.getUserId()));\n        claims.put(\"avatarUrl\", user.getAvatarUrl());\n        claims.put(\"userRole\", user.getUserRole());\n        Date now = new Date();\n        Date expirationDate = new Date(now.getTime() + EXPIRATION_TIME * 1000);\n        String token = Jwts.builder()\n                .setClaims(claims)\n                .setIssuedAt(now)\n                .setExpiration(expirationDate)\n                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n                .compact();\n\n        String key = ACCESS_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.opsForValue().set(key, token, EXPIRATION_TIME, TimeUnit.SECONDS);\n\n        return token;\n    }\n\n    @Override", "    public String generateRefreshToken(UserEntity user) {\n        Claims claims = Jwts.claims().setSubject(user.getUserId().toString());\n        Date now = new Date();\n        Date expirationDate = new Date(now.getTime() + EXPIRATION_TIME * 1000);\n        String token = Jwts.builder()\n                .setClaims(claims)\n                .setIssuedAt(now)\n                .setExpiration(expirationDate)\n                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n                .compact();\n\n        String key = REFRESH_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.opsForValue().set(key, token, EXPIRATION_TIME, TimeUnit.SECONDS);\n        return token;\n    }\n\n\n    @Override", "    public UserEntity validateToken(String token) {\n        try {\n            Claims claims = Jwts.parser()\n                    .setSigningKey(SECRET_KEY)\n                    .parseClaimsJws(token)\n                    .getBody();\n            String userName = claims.getSubject();\n            String userId = getUserIdFromToken(token);\n            String avatarUrl = (String) claims.get(\"avatarUrl\") ;\n            String userRole = (String) claims.get(\"userRole\") ;\n            String key = ACCESS_TOKEN_PREFIX + userId;\n            String storedToken = stringRedisTemplate.opsForValue().get(key);\n", "            if (storedToken != null && storedToken.equals(token)) {\n                // \u5982\u679cRedis\u4e2d\u5b58\u50a8\u7684\u4ee4\u724c\u4e0e\u4f20\u5165\u7684\u4ee4\u724c\u5339\u914d\uff0c\u5219\u9a8c\u8bc1\u901a\u8fc7\n                return new UserEntity(Long.parseLong(userId), userName ,avatarUrl,userRole);\n            }\n        } catch (Exception e) {\n            // \u89e3\u6790\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u9a8c\u8bc1\u5931\u8d25\n            System.out.println(e.getMessage());\n        }\n        return null;\n    }\n\n    @Override", "    public String getUserIdFromToken(String token) {\n        Claims claims = Jwts.parser()\n                .setSigningKey(SECRET_KEY)\n                .parseClaimsJws(token)\n                .getBody();\n        return claims.getSubject();\n    }\n\n    @Override\n    public void revokeToken(UserEntity user) {\n        String accessKey = ACCESS_TOKEN_PREFIX + user.getUserId();\n        String refreshKey = REFRESH_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.delete(accessKey);\n        stringRedisTemplate.delete(refreshKey);\n    }\n\n\n    @Override", "    public void revokeToken(UserEntity user) {\n        String accessKey = ACCESS_TOKEN_PREFIX + user.getUserId();\n        String refreshKey = REFRESH_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.delete(accessKey);\n        stringRedisTemplate.delete(refreshKey);\n    }\n\n\n    @Override\n    public void cleanExpiredTokens() {\n        stringRedisTemplate.keys(\"*\").forEach(key -> {", "    public void cleanExpiredTokens() {\n        stringRedisTemplate.keys(\"*\").forEach(key -> {\n            if (key.startsWith(ACCESS_TOKEN_PREFIX) || key.startsWith(REFRESH_TOKEN_PREFIX)) {\n                String token = stringRedisTemplate.opsForValue().get(key);\n                if (token != null && isTokenExpired(token)) {\n                    stringRedisTemplate.delete(key);\n                }\n            }\n        });\n    }\n\n    @Override", "    public boolean isTokenExpired(String token) {\n        Date expirationDate = Jwts.parser()\n                .setSigningKey(SECRET_KEY)\n                .parseClaimsJws(token)\n                .getBody()\n                .getExpiration();\n        return expirationDate.before(new Date());\n    }\n\n    @Override\n    public void save2Redis(JwtToken jwtToken, UserEntity user) {\n        String token = jwtToken.getToken();\n        String refreshToken =  jwtToken.getRefreshToken();\n        String accessKey = ACCESS_TOKEN_PREFIX + user.getUserId();\n        String refreshKey = REFRESH_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.opsForValue().set(accessKey,token,EXPIRATION_TIME, TimeUnit.SECONDS);\n        stringRedisTemplate.opsForValue().set(refreshKey,refreshToken,EXPIRATION_TIME, TimeUnit.SECONDS);\n    }\n\n    @Override", "    public void save2Redis(JwtToken jwtToken, UserEntity user) {\n        String token = jwtToken.getToken();\n        String refreshToken =  jwtToken.getRefreshToken();\n        String accessKey = ACCESS_TOKEN_PREFIX + user.getUserId();\n        String refreshKey = REFRESH_TOKEN_PREFIX + user.getUserId();\n        stringRedisTemplate.opsForValue().set(accessKey,token,EXPIRATION_TIME, TimeUnit.SECONDS);\n        stringRedisTemplate.opsForValue().set(refreshKey,refreshToken,EXPIRATION_TIME, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public void removeTokenByUserId(Long userId) {\n        String accessKey = ACCESS_TOKEN_PREFIX + userId;\n        String refreshKey = REFRESH_TOKEN_PREFIX + userId;\n        stringRedisTemplate.opsForValue().getAndDelete(accessKey);\n        stringRedisTemplate.opsForValue().getAndDelete(refreshKey);\n    }\n}\n\n\n", "    public void removeTokenByUserId(Long userId) {\n        String accessKey = ACCESS_TOKEN_PREFIX + userId;\n        String refreshKey = REFRESH_TOKEN_PREFIX + userId;\n        stringRedisTemplate.opsForValue().getAndDelete(accessKey);\n        stringRedisTemplate.opsForValue().getAndDelete(refreshKey);\n    }\n}\n\n\n"]}
{"filename": "src/main/java/com/dhx/template/service/impl/UserServiceImpl.java", "chunked_list": ["package com.dhx.template.service.impl;\n\nimport cn.hutool.core.bean.BeanUtil;\nimport cn.hutool.core.lang.UUID;\nimport cn.hutool.crypto.digest.BCrypt;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.common.ErrorCode;", "import com.dhx.template.common.BaseResponse;\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.constant.UserConstant;\nimport com.dhx.template.model.DO.UserEntity;\nimport com.dhx.template.model.DTO.JwtToken;\nimport com.dhx.template.model.DTO.user.UserDTO;\nimport com.dhx.template.model.VO.UserVO;\nimport com.dhx.template.service.JwtTokensService;\nimport com.dhx.template.service.UserService;\nimport com.dhx.template.mapper.UserMapper;", "import com.dhx.template.service.UserService;\nimport com.dhx.template.mapper.UserMapper;\nimport com.dhx.template.utils.ResultUtil;\nimport com.dhx.template.utils.UserHolder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;", "import javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @description \u9488\u5bf9\u8868\u3010t_user\u3011\u7684\u6570\u636e\u5e93\u64cd\u4f5cService\u5b9e\u73b0\n * @createDate 2023-05-04 16:18:15\n */", " * @createDate 2023-05-04 16:18:15\n */\n@Service\n@Slf4j\npublic class UserServiceImpl extends ServiceImpl<UserMapper, UserEntity>\n        implements UserService {\n\n    @Resource\n    UserMapper userMapper;\n\n    @Resource\n    JwtTokensService jwtTokensService;\n\n    @Override", "    public BaseResponse login(String userAccount, String password, HttpServletRequest request) {\n        //1. \u83b7\u53d6\u7684\u52a0\u5bc6\u5bc6\u7801\n        UserEntity user = query().eq(\"user_account\", userAccount).one();\n        String handlerPassword = user.getUserPassword();\n        //2. \u67e5\u8be2\u7528\u6237\u5bc6\u7801\u662f\u5426\u6b63\u786e\n        boolean checkpw = BCrypt.checkpw(password, handlerPassword);\n        if (!checkpw) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u8d26\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef!\");\n        }\n        //3. \u83b7\u53d6jwt\u7684token\u5e76\u5c06token\u5199\u5165Redis\n        String token = jwtTokensService.generateAccessToken(user);\n        String refreshToken = jwtTokensService.generateRefreshToken(user);\n        JwtToken jwtToken = new JwtToken(token, refreshToken);\n        jwtTokensService.save2Redis(jwtToken, user);\n        //4. \u4fdd\u5b58\u7528\u6237\u7684\u767b\u5f55IPV4\u5730\u5740", "        try {\n            String remoteAddr = request.getRemoteAddr();\n            if (StringUtils.isNotBlank(remoteAddr)) {\n                user.setLastLoginIp(remoteAddr);\n            }\n        } catch (RuntimeException e) {\n            log.error(\"\u4fdd\u5b58\u7528\u6237\u767b\u5f55IP\u5931\u8d25, remoteAddress:{}\", request.getRemoteAddr());\n        }\n        updateById(user);\n        // \u8fd4\u56dejwtToken\n        return ResultUtil.success(token);\n    }\n\n    @Override", "    public BaseResponse register(String userAccount, String password, String checkPassword) {\n        if (!password.equals(checkPassword)) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4!\");\n        }\n        Long cnt = query().eq(\"user_account\", userAccount).count();\n        if (cnt != 0) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u7528\u6237\u540d\u5df2\u88ab\u6ce8\u518c!\");\n        }\n        UserEntity user = new UserEntity();\n        String handlerPassword = BCrypt.hashpw(password);\n        user.setUserAccount(userAccount);\n        user.setUserName(\"user-\" + UUID.randomUUID().toString().substring(0, 10));\n        user.setUserPassword(handlerPassword);\n        boolean save = save(user);\n        return ResultUtil.success(user.getUserId());\n    }\n\n    @Override\n    public BaseResponse<String> loginByPhone(String phone ,HttpServletRequest request) {\n        Long cnt = query().eq(\"phone\", phone).count();\n        UserEntity user;", "        if (cnt == 0) {\n            return ResultUtil.error(ErrorCode.NOT_FOUND_ERROR,\"\u7528\u6237\u672a\u6ce8\u518c!\");\n        } else {\n            // \u7528\u6237\u5df2\u7ecf\u6ce8\u518c\u4e86\n            user = query().eq(\"phone\", phone).one();\n            user.setPhone(phone);\n        }\n        // \u7528\u6237\u767b\u5f55\n        String token = jwtTokensService.generateAccessToken(user);\n        String refreshToken = jwtTokensService.generateRefreshToken(user);\n        JwtToken jwtToken = new JwtToken(token, refreshToken);\n        jwtTokensService.save2Redis(jwtToken, user);\n        //4. \u4fdd\u5b58\u7528\u6237\u7684\u767b\u5f55IPV4\u5730\u5740", "        try {\n            String remoteAddr = request.getRemoteAddr();\n            if (StringUtils.isNotBlank(remoteAddr)) {\n                user.setLastLoginIp(remoteAddr);\n            }\n        } catch (RuntimeException e) {\n            log.error(\"\u4fdd\u5b58\u7528\u6237\u767b\u5f55IP\u5931\u8d25, remoteAddress:{}\", request.getRemoteAddr());\n        }\n        updateById(user);\n        // \u8fd4\u56dejwtToken\n        return ResultUtil.success(token);\n    }\n\n    @Override\n    public BaseResponse<UserVO> getUserById(Long userId) {\n        UserEntity user = userMapper.selectById(userId);\n        System.out.println(user);", "        if (user == null) {\n            return ResultUtil.error(ErrorCode.PARAMS_ERROR, \"\u7528\u6237\u4e0d\u5b58\u5728!\");\n        }\n        // \u8f6c\u6362\u6210vo \u5bf9\u8c61\n        UserVO UserVO = BeanUtil.copyProperties(user, UserVO.class);\n        return ResultUtil.success(UserVO);\n    }\n\n    @Override\n    public BaseResponse<Boolean> deleteUserById(Long userId) {\n        boolean result = remove(new QueryWrapper<UserEntity>().eq(\"user_id\", userId));\n        return ResultUtil.success(result);\n    }\n\n    @Override\n    public BaseResponse<List<UserVO>> getUserList(int pageSize, int current) {\n        // \u5206\u9875\u67e5\u8be2\u6570\u636e\n        List<UserEntity> records = query().page(new Page<>(current, pageSize)).getRecords();\n        // \u8f6c\u6362\u4e3aUserVO\n        List<UserVO> UserVOList = records.stream().map(item -> BeanUtil.copyProperties(item, UserVO.class)).collect(Collectors.toList());\n        return ResultUtil.success(UserVOList);\n    }\n\n\n    @Override", "    public BaseResponse addUser(UserEntity user) {\n        String password = user.getUserPassword();\n        String handlerPassword = BCrypt.hashpw(password);\n        user.setUserPassword(handlerPassword);\n        save(user);\n        return ResultUtil.success(user.getUserId());\n    }\n\n    @Override\n    public boolean isAdmin(HttpServletRequest request) {\n        UserDTO user = UserHolder.getUser();", "    public boolean isAdmin(HttpServletRequest request) {\n        UserDTO user = UserHolder.getUser();\n        if (user.getUserRole() == null) {\n            return false;\n        }\n        return user.getUserRole().equals(UserConstant.ADMIN_ROLE);\n    }\n\n    @Override\n    public boolean isAdmin(UserEntity user) {\n        if (user.getUserRole() == null) {\n            return false;\n        }\n        return user.getUserRole().equals(UserConstant.ADMIN_ROLE);\n    }\n}\n\n\n\n\n", "    public boolean isAdmin(UserEntity user) {\n        if (user.getUserRole() == null) {\n            return false;\n        }\n        return user.getUserRole().equals(UserConstant.ADMIN_ROLE);\n    }\n}\n\n\n\n\n"]}
{"filename": "src/main/java/com/dhx/template/mapper/UserMapper.java", "chunked_list": ["package com.dhx.template.mapper;\n\nimport com.dhx.template.model.DO.UserEntity;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @description \u9488\u5bf9\u8868\u3010t_user\u3011\u7684\u6570\u636e\u5e93\u64cd\u4f5cMapper\n * @createDate 2023-05-04 16:18:15\n * @Entity com.dhx.template.model.DO.UserEntity", " * @createDate 2023-05-04 16:18:15\n * @Entity com.dhx.template.model.DO.UserEntity\n */\npublic interface UserMapper extends BaseMapper<UserEntity> {\n\n}\n\n\n\n\n"]}
{"filename": "src/main/java/com/dhx/template/aop/GlobalExceptionHandler.java", "chunked_list": ["package com.dhx.template.aop;\n\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.exception.BusinessException;\nimport com.dhx.template.utils.ResultUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.convert.ConversionFailedException;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.validation.BindingResult;", "import org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.MissingServletRequestParameterException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\nimport org.springframework.web.multipart.MultipartException;", "import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\nimport org.springframework.web.multipart.MultipartException;\nimport org.springframework.web.servlet.NoHandlerFoundException;\n\nimport javax.validation.ConstraintViolationException;\nimport java.util.List;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className GlobalExceptionHandler", " * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className GlobalExceptionHandler\n * @date : 2023/05/04/ 17:18\n **/\n@RestControllerAdvice\n@Slf4j\npublic class GlobalExceptionHandler {\n\n\n    /**\n     * \u5e38\u89c1\u7684\u53c2\u6570\u5f02\u5e38\u5904\u7406\n     */\n    @ExceptionHandler(value = {MethodArgumentTypeMismatchException.class, MissingServletRequestParameterException.class,\n            ConversionFailedException.class, ConstraintViolationException.class, HttpMessageNotReadableException.class})", "    public BaseResponse handleMethodArgumentTypeMismatchException(HttpMessageNotReadableException e) {\n        log.error(e.getMessage(), e);\n        return ResultUtil.error(ErrorCode.PARAMS_ERROR);\n    }\n\n    /**\n     * \u5904\u7406\u81ea\u5b9a\u4e49\u5f02\u5e38\n     */\n    @ExceptionHandler(BusinessException.class)\n    public BaseResponse<Object> handleRRException(BusinessException e) {\n        log.error(e.getMessage(), e);\n        return ResultUtil.error(e.getCode(), e.getMessage());\n    }\n\n    @ExceptionHandler(value = MultipartException.class)", "    public Object fileUploadExceptionHandler(MultipartException exception) {\n        Throwable rootCause = exception.getRootCause();\n//        if (rootCause instanceof MultiPartParserDefinition.FileTooLargeException) {\n//            return ResultUtil.error(ErrorCode.UPLOAD_ERROR, \"\u6587\u4ef6\u8fc7\u5927!\");\n//        }\n        return ResultUtil.error(ErrorCode.UPLOAD_ERROR);\n    }\n\n    @ExceptionHandler(NoHandlerFoundException.class)\n    public BaseResponse handlerNoFoundException(Exception e) {\n        log.error(e.getMessage(), e);\n        return ResultUtil.error(ErrorCode.NOT_FOUND);\n    }\n\n\n    /**\n     * \u5904\u7406\u53c2\u6570\u5f02\u5e38\n     *\n     * @param e e\n     * @return {@link BaseResponse}\n     */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @ResponseBody", "    public BaseResponse handlerNoFoundException(Exception e) {\n        log.error(e.getMessage(), e);\n        return ResultUtil.error(ErrorCode.NOT_FOUND);\n    }\n\n\n    /**\n     * \u5904\u7406\u53c2\u6570\u5f02\u5e38\n     *\n     * @param e e\n     * @return {@link BaseResponse}\n     */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @ResponseBody", "    public BaseResponse handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n        BindingResult bindingResult = e.getBindingResult();\n        StringBuilder sb = new StringBuilder();\n        if (bindingResult.hasErrors()) {\n            List<ObjectError> allErrors = bindingResult.getAllErrors();\n            for (ObjectError objectError : allErrors) {\n                sb.append(objectError.getDefaultMessage()).append(\";\");\n            }\n        }\n        return ResultUtil.error(ErrorCode.PARAMS_ERROR, sb.toString());\n    }\n\n    @ExceptionHandler(Exception.class)", "    public BaseResponse handleException(Exception e) {\n        log.error(e.getMessage(), e);\n        return ResultUtil.error();\n    }\n}\n"]}
{"filename": "src/main/java/com/dhx/template/aop/AuthCheckAOP.java", "chunked_list": ["package com.dhx.template.aop;\n\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.annotation.AuthCheck;\nimport com.dhx.template.common.exception.BusinessException;\nimport com.dhx.template.model.DTO.user.UserDTO;\nimport com.dhx.template.model.enums.UserRoleEnum;\nimport com.dhx.template.utils.UserHolder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;", "import lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Method;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className AuthCheckAOP\n * @date : 2023/05/04/ 16:26\n **/\n@Aspect", " **/\n@Aspect\n@Component\n@Slf4j\npublic class AuthCheckAOP {\n\n    /**\n     * \u5b9a\u4e49\u5207\u70b9\n     */\n    @Pointcut(\"@annotation(com.dhx.template.common.annotation.AuthCheck)\")\n    public void logPointcut() {\n    }\n\n    @Around(value = \"logPointcut()\")", "    public void logPointcut() {\n    }\n\n    @Around(value = \"logPointcut()\")\n    public Object run(ProceedingJoinPoint joinPoint) throws Throwable {\n        Signature signature = joinPoint.getSignature();//\u65b9\u6cd5\u7b7e\u540d\n        Method method = ((MethodSignature) signature).getMethod();\n        //\u8fd9\u4e2a\u65b9\u6cd5\u624d\u662f\u76ee\u6807\u5bf9\u8c61\u4e0a\u6709\u6ce8\u89e3\u7684\u65b9\u6cd5\n        Method realMethod = joinPoint.getTarget().getClass().getDeclaredMethod(signature.getName(), method.getParameterTypes());\n        //\u83b7\u53d6\u6ce8\u89e3\n        AuthCheck authCheck = realMethod.getAnnotation(AuthCheck.class);\n        String mustRole = authCheck.mustRole();", "        if (StringUtils.isNotBlank(mustRole)) {\n            UserDTO loginUser = UserHolder.getUser();\n            UserRoleEnum mustUserRoleEnum = UserRoleEnum.getEnumByValue(mustRole);\n            if (mustUserRoleEnum == null) {\n                throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n            }\n            String userRole = loginUser.getUserRole();\n            // \u5982\u679c\u88ab\u5c01\u53f7\uff0c\u76f4\u63a5\u62d2\u7edd\n            if (UserRoleEnum.BAN.equals(mustUserRoleEnum)) {\n                throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n            }\n            // \u5fc5\u987b\u6709\u7ba1\u7406\u5458\u6743\u9650", "            if (UserRoleEnum.BAN.equals(mustUserRoleEnum)) {\n                throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n            }\n            // \u5fc5\u987b\u6709\u7ba1\u7406\u5458\u6743\u9650\n            if (UserRoleEnum.ADMIN.equals(mustUserRoleEnum)) {\n                if (!mustRole.equals(userRole)) {\n                    throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n                }\n            }\n        }\n        return joinPoint.proceed();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/dhx/template/aop/ReFreshTokenInterceptor.java", "chunked_list": ["package com.dhx.template.aop;\n\nimport cn.hutool.core.bean.BeanUtil;\nimport com.dhx.template.common.ErrorCode;\nimport com.dhx.template.common.exception.BusinessException;\nimport com.dhx.template.common.constant.JwtConstant;\nimport com.dhx.template.common.constant.RedisConstant;\nimport com.dhx.template.model.DO.UserEntity;\nimport com.dhx.template.model.DTO.user.UserDTO;\nimport com.dhx.template.service.JwtTokensService;", "import com.dhx.template.model.DTO.user.UserDTO;\nimport com.dhx.template.service.JwtTokensService;\nimport com.dhx.template.utils.UserHolder;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.concurrent.TimeUnit;", "import javax.servlet.http.HttpServletResponse;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className ReFreshTokenInterceptor\n * @date : 2023/05/04/ 17:03\n **/\npublic class ReFreshTokenInterceptor implements HandlerInterceptor {\n\n    JwtTokensService jwtTokensService;\n\n    StringRedisTemplate stringRedisTemplate;\n\n\n    public ReFreshTokenInterceptor(StringRedisTemplate stringRedisTemplate, JwtTokensService jwtTokensService){\n        this.jwtTokensService=jwtTokensService;\n        this.stringRedisTemplate=stringRedisTemplate;\n    }\n\n    @Override", "public class ReFreshTokenInterceptor implements HandlerInterceptor {\n\n    JwtTokensService jwtTokensService;\n\n    StringRedisTemplate stringRedisTemplate;\n\n\n    public ReFreshTokenInterceptor(StringRedisTemplate stringRedisTemplate, JwtTokensService jwtTokensService){\n        this.jwtTokensService=jwtTokensService;\n        this.stringRedisTemplate=stringRedisTemplate;\n    }\n\n    @Override", "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"Authorization\"); //\u4ece\u8bf7\u6c42\u5934\u4e2d\u83b7\u53d6JWT access_token\n        if(StringUtils.isEmpty(token)){\n            throw new BusinessException(ErrorCode.NOT_LOGIN,\"missing jwt token\");\n        }\n        try {\n            // \u89e3\u6790\u5e76\u9a8c\u8bc1JWT token\u662f\u5426\u5408\u6cd5\n            boolean isTokenExpired = jwtTokensService.isTokenExpired(token);\n            UserEntity user = jwtTokensService.validateToken(token);\n            if(isTokenExpired){\n                // \u5982\u679ctoken\u8fc7\u671f , \u90a3\u4e48\u9700\u8981\u901a\u8fc7refresh_token\u751f\u6210\u4e00\u4e2a\u65b0\u7684access_token\n                String refreshTokenKey = RedisConstant.REFRESH_TOKEN_PREFIX+ user.getUserId();\n                String refreshToken = stringRedisTemplate.opsForValue().get(refreshTokenKey);", "            if(isTokenExpired){\n                // \u5982\u679ctoken\u8fc7\u671f , \u90a3\u4e48\u9700\u8981\u901a\u8fc7refresh_token\u751f\u6210\u4e00\u4e2a\u65b0\u7684access_token\n                String refreshTokenKey = RedisConstant.REFRESH_TOKEN_PREFIX+ user.getUserId();\n                String refreshToken = stringRedisTemplate.opsForValue().get(refreshTokenKey);\n                if(StringUtils.isEmpty(refreshToken)){\n                    throw new BusinessException(ErrorCode.NOT_LOGIN,\"missing refresh token\");\n                }\n                if(jwtTokensService.isTokenExpired(refreshToken)){\n                    throw new BusinessException(ErrorCode.NOT_LOGIN,\"\u8d85\u65f6, \u8bf7\u91cd\u65b0\u767b\u5f55\");\n                }\n                // \u751f\u6210\u65b0\u7684accessToken , \u540c\u65f6\u4fdd\u5b58\u5230redis\n                String accessToken = jwtTokensService.generateAccessToken(user);\n                String accessTokenKey = RedisConstant.ACCESS_TOKEN_PREFIX +user.getUserId();\n                stringRedisTemplate.opsForValue().set(accessTokenKey,accessToken,\n                        JwtConstant.EXPIRATION_TIME, TimeUnit.SECONDS);\n\n                response.setHeader(\"Authorization\",accessToken);\n                // \u66f4\u65b0token\u8fd9\u4e2a\u52a8\u4f5c\u5728\u7528\u6237\u770b\u6765\u662f\u672a\u77e5\u7684, \u66f4\u65b0\u5b8c\u4e4b\u540e\u9700\u8981\u5728ThreadLocal\u4e2d\u6dfb\u52a0UserDTO\n                UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);\n                UserHolder.setUser(userDTO);\n            }else{\n                // \u5982\u679ctoken\u6ca1\u6709\u8fc7\u671f, \u90a3\u4e48\u76f4\u63a5\u6dfb\u52a0\u7528\u6237\u7684\u6570\u636e\n                UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);\n                UserHolder.setUser(userDTO);\n            }\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Invalid JWT token\");\n        }\n    }\n}\n\n"]}
{"filename": "src/main/java/com/dhx/template/aop/SysLogAOP.java", "chunked_list": ["package com.dhx.template.aop;\nimport com.dhx.template.common.annotation.SysLog;\nimport com.dhx.template.common.BaseResponse;\nimport com.dhx.template.model.DTO.user.UserDTO;\nimport com.dhx.template.utils.AopUtil;\nimport com.dhx.template.utils.UserHolder;\nimport lombok.Data;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;", "import org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.CodeSignature;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.BindingResult;", "import org.springframework.stereotype.Component;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.*;\n\n/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>", "/**\n * @author <a href=\"https://blog.dhx.icu/\"> adorabled4 </a>\n * @className SysLogAOP\n * @date : 2023/03/24/ 22:11\n **/\n@Aspect\n@Component\n@Slf4j\npublic class SysLogAOP {\n\n    // \u5b9a\u4e49\u5207\u9762\n    @Pointcut(\"@annotation(com.dhx.template.common.annotation.SysLog)\")", "public class SysLogAOP {\n\n    // \u5b9a\u4e49\u5207\u9762\n    @Pointcut(\"@annotation(com.dhx.template.common.annotation.SysLog)\")\n    public void logPointcut(){\n    }\n\n    @Around(value= \"logPointcut()\")\n    public Object run(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object[] args = joinPoint.getArgs();\n        Signature signature =  joinPoint.getSignature();//\u65b9\u6cd5\u7b7e\u540d\n        Method method = ( (MethodSignature)signature ).getMethod();\n        //\u8fd9\u4e2a\u65b9\u6cd5\u624d\u662f\u76ee\u6807\u5bf9\u8c61\u4e0a\u6709\u6ce8\u89e3\u7684\u65b9\u6cd5\n        Method realMethod = joinPoint.getTarget().getClass().getDeclaredMethod(signature.getName(), method.getParameterTypes());\n        //\u83b7\u53d6\u6ce8\u89e3\n        SysLog sysLog = realMethod.getAnnotation(SysLog.class);\n        Object proceed = joinPoint.proceed(args);", "    public Object run(ProceedingJoinPoint joinPoint) throws Throwable {\n        Object[] args = joinPoint.getArgs();\n        Signature signature =  joinPoint.getSignature();//\u65b9\u6cd5\u7b7e\u540d\n        Method method = ( (MethodSignature)signature ).getMethod();\n        //\u8fd9\u4e2a\u65b9\u6cd5\u624d\u662f\u76ee\u6807\u5bf9\u8c61\u4e0a\u6709\u6ce8\u89e3\u7684\u65b9\u6cd5\n        Method realMethod = joinPoint.getTarget().getClass().getDeclaredMethod(signature.getName(), method.getParameterTypes());\n        //\u83b7\u53d6\u6ce8\u89e3\n        SysLog sysLog = realMethod.getAnnotation(SysLog.class);\n        Object proceed = joinPoint.proceed(args);\n        if(proceed instanceof BaseResponse){\n            BaseResponse result = (BaseResponse) proceed;\n            LogParam params = getParams(joinPoint);\n            params.setAPIInfo(method);", "        if(proceed instanceof BaseResponse){\n            BaseResponse result = (BaseResponse) proceed;\n            LogParam params = getParams(joinPoint);\n            params.setAPIInfo(method);\n            if(result.getCode()==0 || result.getCode()==200){\n                // \u6267\u884c\u6210\u529f\n                log.info(\"[\u6210\u529f] \u7528\u6237Id:{}, \u8bf7\u6c42\u65b9\u5f0f: {} , \u8bf7\u6c42\u8def\u5f84: {} , \u6267\u884c\u5185\u5bb9: {} , \u53c2\u6570: {}\",\n                        params.getUserId(),params.getHttpMethod(),params.getUrl(),sysLog.value(),params.getMethodParams());\n            }else{\n                // \u6267\u884c\u5931\u8d25\n                log.info(\"[\u5931\u8d25] \u7528\u6237Id:{}, \u8bf7\u6c42\u65b9\u5f0f: {} , \u8bf7\u6c42\u8def\u5f84: {} , \u6267\u884c\u5185\u5bb9: {},\u5931\u8d25\u539f\u56e0:{} ,\u53c2\u6570: {}\",\n                        params.getUserId(),params.getHttpMethod(),params.getUrl(),sysLog.value(),result.getMessage(),params.getMethodParams());\n            }\n            return result;\n        }else{\n            return proceed;\n        }\n    }\n\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u53c2\u6570\n     * @param joinPoint\n     * @return\n     */\n    private LogParam getParams(ProceedingJoinPoint joinPoint){\n        Object[] args = joinPoint.getArgs();// \u83b7\u53d6\u4f20\u5165\u7684\u53c2\u6570\n        // \u5c01\u88c5LogParam\n        LogParam logParams = new LogParam(args.length);\n        Map<String, Object> params = logParams.getMethodParams();\n        UserDTO user = UserHolder.getUser();", "        if(user!=null){\n            logParams.setUserId(user.getUserId());\n        }\n        String[] paramNames = ((CodeSignature) joinPoint.getSignature()).getParameterNames();\n        // \u8bbe\u7f6e\u65b9\u6cd5\u53c2\u6570\u4fe1\u606f\n        for (int i = 0; i < paramNames.length; i++) {\n            if (args[i] instanceof BindingResult) {\n                continue;\n            }\n            params.put(paramNames[i], args[i]);\n        }\n        return logParams;\n    }\n    @Data\n    static class LogParam {\n        /**\n         * \u8bbf\u95ee\u7528\u6237\n         */\n        private Long userId;\n        /**\n         * \u7528\u6237\u4f20\u5165\u7684\u53c2\u6570\n         */\n        private Map<String,Object> methodParams;\n\n        /**\n         *  \u7528\u6237\u8bbf\u95ee\u7684\u63a5\u53e3url\n         */\n        private String url;\n\n        /**\n         *  \u8bf7\u6c42\u65b9\u5f0f\n         */\n        private String httpMethod;\n\n        LogParam(int capacity){\n            methodParams =new HashMap<>(capacity);\n        }\n\n        private void setAPIInfo(Method method) throws Exception {\n            Annotation[] annotations = method.getAnnotations(); // \u8fd9\u6837\u83b7\u53d6\u5230\u7684\u90fd\u662f\u4ee3\u7406\u5bf9\u8c61\u7684\u6ce8\u89e3", "            for (Annotation annotation : annotations) {\n                Annotation target = (Annotation) AopUtil.getTarget(annotation); // \u83b7\u53d6\u771f\u5b9e\u6ce8\u89e3\u5bf9\u8c61\n                Class<? extends Annotation> aClass = target.annotationType(); // \u6ce8\u89e3\u7684\u7c7b\n                // \u6ce8\u89e3\u4e0a\u9762\u7684\u6ce8\u89e3\n                // \u5982\u679c\u6ce8\u89e3\u7684\u5934\u4e0a\u5305\u542b\u6709@Mapping() \u6216\u8005 @RequestMapping()\n                if(aClass.getAnnotation(Mapping.class)!=null){\n                    RequestMapping requestMapping = (RequestMapping)annotation;\n                    RequestMethod[] httpMethod = requestMapping.method();\n                    String[] value = requestMapping.value();\n                    this.httpMethod=httpMethod[0].toString(); // \u83b7\u53d6\u4e0d\u5230value\n                    this.url=value[0];", "                }else if(aClass.getAnnotation(RequestMapping.class)!=null){\n                    // \u6ce8\u89e3\u662f\u5176\u4ed6\u7684\u6ce8\u89e3(GetMapping ,PostMapping\u7b49)\n                    try{\n                        if(annotation instanceof GetMapping){\n                            GetMapping getMapping= (GetMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.GET.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];\n                        }else if(annotation instanceof PostMapping){\n                            PostMapping getMapping= (PostMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.POST.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];", "                        }else if(annotation instanceof PostMapping){\n                            PostMapping getMapping= (PostMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.POST.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];\n                        }else if(annotation instanceof DeleteMapping){\n                            DeleteMapping getMapping= (DeleteMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.DELETE.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];\n                        }else if(annotation instanceof PutMapping){\n                            PutMapping getMapping= (PutMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.PUT.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];\n                        }\n                    }catch (Exception e) {\n                        log.error(\"\u83b7\u53d6\u63a5\u53e3\u6ce8\u89e3\u5931\u8d25 ,\u6ce8\u89e3\u4e3a {}\",aClass);\n                    }\n                }\n            }\n        }\n    }\n}", "                        }else if(annotation instanceof PutMapping){\n                            PutMapping getMapping= (PutMapping)annotation;\n                            String[] value = getMapping.value();\n                            this.httpMethod=HttpMethod.PUT.toString(); // \u5f3a\u5236\u8f6c\u6362\u83b7\u53d6\u4e0d\u5230value\n                            this.url=value[0];\n                        }\n                    }catch (Exception e) {\n                        log.error(\"\u83b7\u53d6\u63a5\u53e3\u6ce8\u89e3\u5931\u8d25 ,\u6ce8\u89e3\u4e3a {}\",aClass);\n                    }\n                }\n            }\n        }\n    }\n}"]}
