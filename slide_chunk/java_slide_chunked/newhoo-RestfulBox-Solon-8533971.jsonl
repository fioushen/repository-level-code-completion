{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/MethodPath.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * MethodPath\n */\n@Getter\n@AllArgsConstructor\npublic class MethodPath {\n    private final String path;\n    private final String method;\n}\n", "@Getter\n@AllArgsConstructor\npublic class MethodPath {\n    private final String path;\n    private final String method;\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/SolonApiResolver.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon;\n\nimport com.intellij.openapi.module.Module;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.ext.solon.language.JavaLanguageResolver;\nimport io.github.newhoo.restkit.restful.BaseRequestResolver;\nimport io.github.newhoo.restkit.restful.RequestResolver;\nimport io.github.newhoo.restkit.restful.ep.RestfulResolverProvider;", "import io.github.newhoo.restkit.restful.RequestResolver;\nimport io.github.newhoo.restkit.restful.ep.RestfulResolverProvider;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\n/**\n * solon service scanner\n *\n * @since 1.0.0", " *\n * @since 1.0.0\n */\npublic class SolonApiResolver extends BaseRequestResolver {\n\n    @NotNull\n    @Override\n    public String getFrameworkName() {\n        return \"Solon\";\n    }\n\n    @Override\n    public List<RestItem> findRestItemListInModule(Module module, GlobalSearchScope globalSearchScope) {\n        return new JavaLanguageResolver().findRestItemListInModule(module, globalSearchScope);\n    }\n", "    public static class SolonApiResolverProvider implements RestfulResolverProvider {\n        @Override\n        public RequestResolver createRequestResolver(@NotNull Project project) {\n            return new SolonApiResolver();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/linemarker/ServiceLineMarkerProvider.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.linemarker;\n\nimport com.intellij.codeInsight.daemon.LineMarkerInfo;\nimport com.intellij.codeInsight.daemon.LineMarkerProvider;\nimport com.intellij.openapi.editor.markup.GutterIconRenderer;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.config.ConfigHelper;", "import io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.config.ConfigHelper;\nimport io.github.newhoo.restkit.ext.solon.language.JavaLanguageResolver;\nimport io.github.newhoo.restkit.toolwindow.ToolWindowHelper;\nimport org.jetbrains.annotations.NotNull;\n\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestMethodAnnotation.REQUEST_MAPPING;\n\n/**\n * ServiceLineMarkerProvider", "/**\n * ServiceLineMarkerProvider\n *\n * @author newhoo\n * @date 2023/5/21\n * @since 1.0.0\n */\npublic class ServiceLineMarkerProvider implements LineMarkerProvider {\n\n    @Override\n    public LineMarkerInfo<?> getLineMarkerInfo(@NotNull PsiElement element) {", "        if (element instanceof PsiMethod && ConfigHelper.getCommonSetting(element.getProject()).isEnableMethodLineMarker()) {\n            PsiMethod psiMethod = (PsiMethod) element;\n            if (!psiMethod.hasAnnotation(REQUEST_MAPPING.getQualifiedName())) {\n                return null;\n            }\n            PsiClass containingClass = psiMethod.getContainingClass();\n            boolean flag = containingClass != null && containingClass.hasAnnotation(\"org.noear.solon.annotation.Controller\");\n            if (flag) {\n                return new LineMarkerInfo<>(element, element.getTextRange(), ConfigHelper.NAVIGATE_ICON,\n                                            psiElement -> ConfigHelper.NAVIGATE_TEXT,\n                                            (e, elt) -> {\n                                                ToolWindowHelper.navigateToTree(elt, () -> {\n                                                    RestItem restItem = new JavaLanguageResolver().tryGenerateRestItem(element);", "                                                    if (restItem != null) {\n                                                        restItem.setProject(elt.getProject().getName());\n                                                    }\n                                                    return restItem;\n                                                });\n                                            },\n                                            GutterIconRenderer.Alignment.LEFT, () -> \"RestfulBox-Solon\");\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/language/BaseLanguageResolver.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.language;\n\nimport com.intellij.openapi.module.Module;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiAnnotationMemberValue;\nimport com.intellij.psi.PsiArrayInitializerMemberValue;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiField;", "import com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiField;\nimport com.intellij.psi.PsiLiteralExpression;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.PsiModifier;\nimport com.intellij.psi.PsiParameter;\nimport io.github.newhoo.restkit.common.KV;\nimport io.github.newhoo.restkit.common.PsiRestItem;\nimport io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.ext.solon.MethodPath;", "import io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.ext.solon.MethodPath;\nimport io.github.newhoo.restkit.ext.solon.helper.PsiAnnotationHelper;\nimport io.github.newhoo.restkit.ext.solon.helper.PsiClassHelper;\nimport io.github.newhoo.restkit.ext.solon.util.TypeUtils;\nimport io.github.newhoo.restkit.restful.BaseRequestResolver;\nimport io.github.newhoo.restkit.restful.ParamResolver;\nimport io.github.newhoo.restkit.restful.RequestHelper;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;", "import lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;", "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.PATH_VARIABLE;\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_BODY;\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_COOKIE;", "import static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_BODY;\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_COOKIE;\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_HEADER;\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestParamAnnotation.REQUEST_PARAM;\n\n\n/**\n * Base language resolver for SpringRequestResolver in Java and kotlin\n *\n * @author newhoo", " *\n * @author newhoo\n * @since 1.0.0\n */\npublic abstract class BaseLanguageResolver extends BaseRequestResolver implements ParamResolver {\n\n    @NotNull\n    @Override\n    public String getFrameworkName() {\n        return \"Solon\";\n    }\n\n    @NotNull", "    public String getFrameworkName() {\n        return \"Solon\";\n    }\n\n    @NotNull\n    public RestItem createRestServiceItem(@NotNull Module module, PsiElement psiElement, @NotNull String typePath, @NotNull String methodPath, String method) {\n        String requestPath = RequestHelper.getCombinedPath(typePath, methodPath);\n        return new PsiRestItem(requestPath, method, module.getName(), getFrameworkName(), psiElement, this);\n    }\n\n    @NotNull", "    public RestItem createRestServiceItem(@NotNull Module module, PsiElement psiElement, @NotNull String path, String method) {\n        return new PsiRestItem(path, method, module.getName(), getFrameworkName(), psiElement, this);\n    }\n\n    public List<RestItem> combineTypeAndMethod(List<MethodPath> typeMethodPaths, List<MethodPath> methodMethodPaths, PsiElement psiElement, Module module) {\n        List<RestItem> itemList = new ArrayList<>();\n        for (MethodPath methodPath : methodMethodPaths) {\n            if (typeMethodPaths.isEmpty()) {\n                RestItem item = createRestServiceItem(module, psiElement, \"\", methodPath.getPath(), methodPath.getMethod());\n                itemList.add(item);\n            } else {", "                for (MethodPath typeMethodPath : typeMethodPaths) {\n                    String combinedPath = RequestHelper.getCombinedPath(typeMethodPath.getPath(), methodPath.getPath());\n                    String typeMethod = typeMethodPath.getMethod();\n\n                    if (typeMethod != null && !typeMethod.equals(methodPath.getMethod())) {\n                        RestItem item = createRestServiceItem(module, psiElement, combinedPath, typeMethod);\n                        itemList.add(item);\n                    }\n\n                    RestItem item = createRestServiceItem(module, psiElement, combinedPath, methodPath.getMethod());\n                    itemList.add(item);\n                }\n            }\n        }\n        return itemList;\n    }\n", "    public RestItem combineFirstRestItem(List<MethodPath> typeMethodPaths, List<MethodPath> methodMethodPaths, PsiElement psiElement, String moduleName) {\n        if (methodMethodPaths.isEmpty()) {\n            return null;\n        }\n        MethodPath methodPath = methodMethodPaths.get(0);\n        if (typeMethodPaths.isEmpty()) {\n            String requestPath = RequestHelper.getCombinedPath(\"\", methodPath.getPath());\n            return new PsiRestItem(requestPath, methodPath.getMethod(), moduleName, getFrameworkName(), psiElement, this);\n        } else {\n            MethodPath typeMethodPath = typeMethodPaths.get(0);\n            String combinedPath = RequestHelper.getCombinedPath(typeMethodPath.getPath(), methodPath.getPath());\n            String typeMethod = typeMethodPath.getMethod();\n", "            if (typeMethod != null && !typeMethod.equals(methodPath.getMethod())) {\n                return new PsiRestItem(combinedPath, typeMethod, moduleName, getFrameworkName(), psiElement, this);\n            }\n\n            return new PsiRestItem(combinedPath, methodPath.getMethod(), moduleName, getFrameworkName(), psiElement, this);\n        }\n    }\n\n    public List<KV> buildHeaderString(PsiMethod psiMethod) {\n        List<KV> list = new ArrayList<>();\n        PsiParameter[] psiParameters = psiMethod.getParameterList().getParameters();", "        for (PsiParameter psiParameter : psiParameters) {\n            {\n                PsiAnnotation requestHeaderAnno = psiParameter.getAnnotation(REQUEST_HEADER.getQualifiedName());\n                if (requestHeaderAnno != null) {\n                    String headerName = ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestHeaderAnno, \"value\"),\n                                                                  ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestHeaderAnno, \"name\"), psiParameter.getName()\n                                                                  ));\n                    PsiClass fieldClass = PsiClassHelper.findPsiClass(psiParameter.getType().getCanonicalText(), psiMethod.getProject());\n                    if (fieldClass != null && fieldClass.isEnum()) {\n                        PsiField[] enumFields = fieldClass.getAllFields();\n                        list.add(new KV(headerName, enumFields.length > 1 ? enumFields[0].getName() : \"\"));\n                    } else {\n                        Object fieldDefaultValue = TypeUtils.getExampleValue(psiParameter.getType().getPresentableText(), true);\n                        list.add(new KV(headerName, String.valueOf(fieldDefaultValue)));\n                    }\n                }\n            }\n            {\n                PsiAnnotation requestHeaderAnno = psiParameter.getAnnotation(REQUEST_COOKIE.getQualifiedName());", "                    if (fieldClass != null && fieldClass.isEnum()) {\n                        PsiField[] enumFields = fieldClass.getAllFields();\n                        list.add(new KV(headerName, enumFields.length > 1 ? enumFields[0].getName() : \"\"));\n                    } else {\n                        Object fieldDefaultValue = TypeUtils.getExampleValue(psiParameter.getType().getPresentableText(), true);\n                        list.add(new KV(headerName, String.valueOf(fieldDefaultValue)));\n                    }\n                }\n            }\n            {\n                PsiAnnotation requestHeaderAnno = psiParameter.getAnnotation(REQUEST_COOKIE.getQualifiedName());", "                if (requestHeaderAnno != null) {\n                    String headerName = ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestHeaderAnno, \"value\"),\n                                                                  ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestHeaderAnno, \"name\"), psiParameter.getName()\n                                                                  ));\n                    Object fieldDefaultValue = TypeUtils.getExampleValue(psiParameter.getType().getPresentableText(), true);\n                    list.add(new KV(\"Cookie\", headerName + \"=\" + fieldDefaultValue));\n                }\n            }\n        }\n        return list;\n    }\n\n    public List<KV> buildParamString(PsiMethod psiMethod) {\n        List<KV> list = new ArrayList<>();\n\n        List<Parameter> parameterList = getParameterList(psiMethod);\n\n        // \u62fc\u63a5\u53c2\u6570", "        for (Parameter parameter : parameterList) {\n            String paramType = parameter.getParamType();\n\n            // \u6570\u7ec4|\u96c6\u5408\n            if (TypeUtils.isArray(paramType) || TypeUtils.isList(paramType)) {\n                paramType = TypeUtils.isArray(paramType)\n                        ? paramType.replace(\"[]\", \"\")\n                        : paramType.contains(\"<\")\n                        ? paramType.substring(paramType.indexOf(\"<\") + 1, paramType.lastIndexOf(\">\"))\n                        : Object.class.getCanonicalName();\n            }\n\n            // \u7b80\u5355\u5e38\u7528\u7c7b\u578b", "            if (TypeUtils.isPrimitiveOrSimpleType(paramType)) {\n                list.add(new KV(parameter.getParamName(), String.valueOf(TypeUtils.getExampleValue(paramType, true))));\n                continue;\n            }\n            // \u6587\u4ef6\u7c7b\u578b\n            Set<String> fileParameterTypeSet = Stream.of(\"org.noear.solon.core.handle.UploadedFile\").collect(Collectors.toSet());\n            if (fileParameterTypeSet.contains(paramType)) {\n                list.add(new KV(parameter.getParamName(), \"file@[filepath]\"));\n                continue;\n            }\n\n            PsiClass psiClass = PsiClassHelper.findPsiClass(paramType, psiMethod.getProject());", "            if (psiClass != null) {\n                PsiField[] fields = psiClass.getAllFields();\n                if (psiClass.isEnum()) {\n                    list.add(new KV(parameter.getParamName(), fields.length > 1 ? fields[0].getName() : \"\"));\n                    continue;\n                }\n                for (PsiField field : fields) {\n                    if (field.hasModifierProperty(PsiModifier.STATIC) || field.hasModifierProperty(PsiModifier.TRANSIENT)) {\n                        continue;\n                    }\n                    PsiClass fieldClass = PsiClassHelper.findPsiClass(field.getType().getCanonicalText(), psiMethod.getProject());", "                    if (fieldClass != null && fieldClass.isEnum()) {\n                        PsiField[] enumFields = fieldClass.getAllFields();\n                        list.add(new KV(field.getName(), enumFields.length > 1 ? enumFields[0].getName() : \"\"));\n                    } else {\n                        Object fieldDefaultValue = TypeUtils.getExampleValue(field.getType().getPresentableText(), true);\n                        list.add(new KV(field.getName(), String.valueOf(fieldDefaultValue)));\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    /**\n     * \u6784\u5efaRequestBody json \u53c2\u6570\n     */", "    public String buildRequestBodyJson(PsiMethod psiMethod) {\n        return Arrays.stream(psiMethod.getParameterList().getParameters())\n                     .filter(psiParameter -> psiParameter.hasAnnotation(REQUEST_BODY.getQualifiedName()))\n                     .findFirst()\n                     .map(psiParameter -> PsiClassHelper.convertClassToJSON(psiParameter.getType().getCanonicalText(), psiMethod.getProject()))\n                     .orElse(null);\n    }\n\n    private List<KV> getHeaderItem(PsiAnnotationMemberValue headers) {\n        if (headers instanceof PsiLiteralExpression) {\n            final String s = String.valueOf(((PsiLiteralExpression) headers).getValue());\n            String[] split = StringUtils.split(s, \"=\");\n            return split.length > 1 ? Collections.singletonList(new KV(split[0], split[1])) : Collections.emptyList();\n        }\n\n        List<KV> list = new ArrayList<>();", "        if (headers instanceof PsiLiteralExpression) {\n            final String s = String.valueOf(((PsiLiteralExpression) headers).getValue());\n            String[] split = StringUtils.split(s, \"=\");\n            return split.length > 1 ? Collections.singletonList(new KV(split[0], split[1])) : Collections.emptyList();\n        }\n\n        List<KV> list = new ArrayList<>();\n        if (headers instanceof PsiArrayInitializerMemberValue) {\n            for (PsiAnnotationMemberValue initializer : ((PsiArrayInitializerMemberValue) headers).getInitializers()) {\n                list.addAll(getHeaderItem(initializer));\n            }\n        }\n        return list;\n    }\n\n    @NotNull\n    private List<Parameter> getParameterList(PsiMethod psiMethod) {\n        List<Parameter> parameterList = new ArrayList<>();\n\n        Set<String> paramFilterTypes = getParamFilterTypes(psiMethod.getProject());\n\n        PsiParameter[] psiParameters = psiMethod.getParameterList().getParameters();", "            for (PsiAnnotationMemberValue initializer : ((PsiArrayInitializerMemberValue) headers).getInitializers()) {\n                list.addAll(getHeaderItem(initializer));\n            }\n        }\n        return list;\n    }\n\n    @NotNull\n    private List<Parameter> getParameterList(PsiMethod psiMethod) {\n        List<Parameter> parameterList = new ArrayList<>();\n\n        Set<String> paramFilterTypes = getParamFilterTypes(psiMethod.getProject());\n\n        PsiParameter[] psiParameters = psiMethod.getParameterList().getParameters();", "        for (PsiParameter psiParameter : psiParameters) {\n            String paramTypeName = psiParameter.getType().getCanonicalText();\n            if (paramFilterTypes.contains(paramTypeName)\n                    || CollectionUtils.containsAny(paramFilterTypes, Arrays.stream(psiParameter.getAnnotations()).map(PsiAnnotation::getQualifiedName).collect(Collectors.toSet()))) {\n                continue;\n            }\n\n            // @PathVariable\n            PsiAnnotation pathVariableAnno = psiParameter.getAnnotation(PATH_VARIABLE.getQualifiedName());\n            if (pathVariableAnno != null) {\n                String paramName = ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(pathVariableAnno, \"value\"),\n                                                             ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(pathVariableAnno, \"name\"), psiParameter.getName()\n                                                             ));\n                Parameter parameter = new Parameter(paramTypeName, paramName);\n                parameterList.add(parameter);\n                continue;\n            }\n\n            // @RequestParam\n            PsiAnnotation requestParamAnno = psiParameter.getAnnotation(REQUEST_PARAM.getQualifiedName());", "            if (pathVariableAnno != null) {\n                String paramName = ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(pathVariableAnno, \"value\"),\n                                                             ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(pathVariableAnno, \"name\"), psiParameter.getName()\n                                                             ));\n                Parameter parameter = new Parameter(paramTypeName, paramName);\n                parameterList.add(parameter);\n                continue;\n            }\n\n            // @RequestParam\n            PsiAnnotation requestParamAnno = psiParameter.getAnnotation(REQUEST_PARAM.getQualifiedName());", "            if (requestParamAnno != null) {\n                String paramName = ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestParamAnno, \"value\"),\n                                                             ObjectUtils.defaultIfNull(PsiAnnotationHelper.getAnnotationValue(requestParamAnno, \"name\"), psiParameter.getName()\n                                                             ));\n                Parameter parameter = new Parameter(paramTypeName, paramName);\n                parameterList.add(parameter);\n                continue;\n            }\n\n            // \u5176\u4ed6\u672a\u5305\u542b\u6307\u5b9a\u6ce8\u89e3\n            Parameter parameter = new Parameter(paramTypeName, psiParameter.getName());\n            parameterList.add(parameter);\n        }\n        return parameterList;\n    }\n\n    @NotNull\n    @Override\n    public Set<String> getParamFilterTypes(@NotNull Project project) {\n        return Stream.of(\n                \"java.util.Locale\",\n                \"org.noear.solon.core.handle.Context\",\n                \"org.noear.solon.core.handle.ModelAndView\",\n                \"org.noear.solon.annotation.Header\",\n                \"org.noear.solon.annotation.Cookie\",\n                \"org.noear.solon.annotation.Body\"\n        ).collect(Collectors.toSet());\n    }\n\n    @Getter\n    @AllArgsConstructor\n    static class Parameter {\n        private String paramType;\n        private String paramName;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/language/JavaLanguageResolver.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.language;\n\nimport com.intellij.openapi.module.Module;\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.PsiModifierList;\nimport com.intellij.psi.impl.java.stubs.index.JavaAnnotationIndex;\nimport com.intellij.psi.javadoc.PsiDocToken;", "import com.intellij.psi.impl.java.stubs.index.JavaAnnotationIndex;\nimport com.intellij.psi.javadoc.PsiDocToken;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport io.github.newhoo.restkit.common.KV;\nimport io.github.newhoo.restkit.common.RestItem;\nimport io.github.newhoo.restkit.ext.solon.MethodPath;\nimport io.github.newhoo.restkit.ext.solon.solon.SolonAnnotationHelper;\nimport io.github.newhoo.restkit.ext.solon.solon.SolonControllerAnnotation;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;", "import org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/**\n * JavaLanguageResolver, will work when Java enabled\n *\n * @author newhoo\n * @since 1.0.0\n */\npublic class JavaLanguageResolver extends BaseLanguageResolver {\n\n    public RestItem tryGenerateRestItem(@NotNull PsiElement psiElement) {\n        PsiMethod psiMethod;", "public class JavaLanguageResolver extends BaseLanguageResolver {\n\n    public RestItem tryGenerateRestItem(@NotNull PsiElement psiElement) {\n        PsiMethod psiMethod;\n        if (psiElement instanceof PsiMethod) {\n            psiMethod = (PsiMethod) psiElement;\n        } else if (psiElement.getParent() instanceof PsiMethod) {\n            psiMethod = (PsiMethod) psiElement.getParent();\n        } else {\n            return null;\n        }\n        List<MethodPath> typeMethodPaths = SolonAnnotationHelper.getTypeMethodPaths(psiMethod.getContainingClass());\n        List<MethodPath> methodMethodPaths = SolonAnnotationHelper.getMethodMethodPaths(psiMethod);\n        return combineFirstRestItem(typeMethodPaths, methodMethodPaths, psiMethod, \"\");\n    }\n\n    @Override\n    public List<RestItem> findRestItemListInModule(Module module, GlobalSearchScope globalSearchScope) {\n        List<RestItem> itemList = new ArrayList<>();\n        SolonControllerAnnotation[] supportedAnnotations = SolonControllerAnnotation.values();\n//        Set<String> filterClassQualifiedNames = new HashSet<>();", "        for (SolonControllerAnnotation controllerAnnotation : supportedAnnotations) {\n            // java: \u6807\u6ce8\u4e86 (Rest)Controller \u6ce8\u89e3\u7684\u7c7b\uff0c\u5373 Controller \u7c7b\n            Collection<PsiAnnotation> psiAnnotations = JavaAnnotationIndex.getInstance().get(controllerAnnotation.getShortName(), module.getProject(), globalSearchScope);\n            for (PsiAnnotation psiAnnotation : psiAnnotations) {\n                if (!controllerAnnotation.getQualifiedName().equals(psiAnnotation.getQualifiedName())) {\n                    continue;\n                }\n                PsiModifierList psiModifierList = (PsiModifierList) psiAnnotation.getParent();\n                PsiElement psiElement = psiModifierList.getParent();\n\n                if (psiElement instanceof PsiClass) {\n                    PsiClass psiClass = (PsiClass) psiElement;", "                if (psiElement instanceof PsiClass) {\n                    PsiClass psiClass = (PsiClass) psiElement;\n//                    if (filterClassQualifiedNames.contains(psiClass.getQualifiedName())) {\n//                        continue;\n//                    }\n                    List<RestItem> serviceItemList = getRequestItemList(psiClass, module);\n                    serviceItemList.forEach(e -> e.setPackageName(psiClass.getQualifiedName()));\n                    itemList.addAll(serviceItemList);\n                }\n            }\n        }\n        return itemList;\n    }\n\n    private List<RestItem> getRequestItemList(PsiClass psiClass, Module module) {\n        List<PsiMethod> psiMethods = new ArrayList<>(Arrays.asList(psiClass.getMethods()));", "        for (PsiClass aSuper : psiClass.getSupers()) {\n            if (!\"java.lang.Object\".equals(aSuper.getQualifiedName())) {\n                psiMethods.addAll(Arrays.asList(aSuper.getMethods()));\n            }\n        }\n        if (psiMethods.size() == 0) {\n            return Collections.emptyList();\n        }\n\n        List<RestItem> itemList = new ArrayList<>();\n        List<MethodPath> typeMethodPaths = SolonAnnotationHelper.getTypeMethodPaths(psiClass);\n", "        for (PsiMethod psiMethod : psiMethods) {\n            List<MethodPath> methodMethodPaths = SolonAnnotationHelper.getMethodMethodPaths(psiMethod);\n            itemList.addAll(combineTypeAndMethod(typeMethodPaths, methodMethodPaths, psiMethod, module));\n        }\n        return itemList;\n    }\n\n    @NotNull\n    @Override\n    public List<KV> buildHeaders(@NotNull PsiElement psiElement) {\n        if (!(psiElement instanceof PsiMethod)) {\n            return Collections.emptyList();\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        return buildHeaderString(psiMethod);\n    }\n\n    @NotNull\n    @Override\n    public List<KV> buildParams(@NotNull PsiElement psiElement) {", "        if (!(psiElement instanceof PsiMethod)) {\n            return Collections.emptyList();\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        return buildHeaderString(psiMethod);\n    }\n\n    @NotNull\n    @Override\n    public List<KV> buildParams(@NotNull PsiElement psiElement) {\n        if (!(psiElement instanceof PsiMethod)) {\n            return Collections.emptyList();\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        return buildParamString(psiMethod);\n    }\n\n    @NotNull\n    @Override", "        if (!(psiElement instanceof PsiMethod)) {\n            return Collections.emptyList();\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        return buildParamString(psiMethod);\n    }\n\n    @NotNull\n    @Override\n    public String buildRequestBodyJson(@NotNull PsiElement psiElement) {\n        if (!(psiElement instanceof PsiMethod)) {\n            return \"\";\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        String s = buildRequestBodyJson(psiMethod);\n        return Objects.nonNull(s) ? s : \"\";\n    }\n\n    @NotNull\n    @Override", "    public String buildRequestBodyJson(@NotNull PsiElement psiElement) {\n        if (!(psiElement instanceof PsiMethod)) {\n            return \"\";\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n        String s = buildRequestBodyJson(psiMethod);\n        return Objects.nonNull(s) ? s : \"\";\n    }\n\n    @NotNull\n    @Override", "    public String buildDescription(@NotNull PsiElement psiElement) {\n        if (!(psiElement instanceof PsiMethod)) {\n            return \"\";\n        }\n        PsiMethod psiMethod = (PsiMethod) psiElement;\n\n        String restName = null;\n        String location;\n        if (psiMethod.getDocComment() != null) {\n            restName = Arrays.stream(psiMethod.getDocComment().getDescriptionElements())\n                             .filter(e -> e instanceof PsiDocToken)\n                             .filter(e -> StringUtils.isNotBlank(e.getText()))\n                             .findFirst()\n                             .map(e -> e.getText().trim()).orElse(null);\n        }\n        location = psiMethod.getContainingClass().getName().concat(\"#\").concat(psiMethod.getName());", "        if (psiMethod.getDocComment() != null) {\n            restName = Arrays.stream(psiMethod.getDocComment().getDescriptionElements())\n                             .filter(e -> e instanceof PsiDocToken)\n                             .filter(e -> StringUtils.isNotBlank(e.getText()))\n                             .findFirst()\n                             .map(e -> e.getText().trim()).orElse(null);\n        }\n        location = psiMethod.getContainingClass().getName().concat(\"#\").concat(psiMethod.getName());\n        if (StringUtils.isNotEmpty(restName)) {\n            location = location.concat(\"#\").concat(restName);\n        }\n        return location;\n    }\n}\n", "        if (StringUtils.isNotEmpty(restName)) {\n            location = location.concat(\"#\").concat(restName);\n        }\n        return location;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/util/TypeUtils.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.util;\n\nimport org.jetbrains.annotations.NotNull;\n\n/**\n * TypeUtils\n *\n * @author newhoo\n * @since 1.0.0\n */\npublic final class TypeUtils {\n", " * @since 1.0.0\n */\npublic final class TypeUtils {\n\n    public static boolean isArray(String type) {\n        return type.endsWith(\"[]\");\n    }\n\n    public static boolean isList(String type) {\n        if (type.contains(\"<\")) {\n            type = type.substring(0, type.indexOf(\"<\"));\n        }\n        switch (type) {\n            case \"java.util.List\":\n            case \"java.util.ArrayList\":\n            case \"java.util.LinkedList\":\n            case \"java.util.Set\":\n            case \"java.util.HashSet\":\n            case \"java.util.TreeSet\":\n            case \"java.util.SortedSet\":\n            case \"java.util.Collection\":\n            case \"java.util.ArrayDeque\":\n            case \"java.util.PriorityQueue\":\n                return true;\n            default:\n                return false;\n        }\n    }\n", "    public static boolean isList(String type) {\n        if (type.contains(\"<\")) {\n            type = type.substring(0, type.indexOf(\"<\"));\n        }\n        switch (type) {\n            case \"java.util.List\":\n            case \"java.util.ArrayList\":\n            case \"java.util.LinkedList\":\n            case \"java.util.Set\":\n            case \"java.util.HashSet\":\n            case \"java.util.TreeSet\":\n            case \"java.util.SortedSet\":\n            case \"java.util.Collection\":\n            case \"java.util.ArrayDeque\":\n            case \"java.util.PriorityQueue\":\n                return true;\n            default:\n                return false;\n        }\n    }\n", "    public static boolean isMap(String type) {\n        if (type.contains(\"<\")) {\n            type = type.substring(0, type.indexOf(\"<\"));\n        }\n        switch (type) {\n            case \"java.util.Properties\":\n            case \"java.util.Map\":\n            case \"java.util.HashMap\":\n            case \"java.util.LinkedHashMap\":\n            case \"java.util.TreeMap\":\n            case \"java.util.SortedMap\":\n            case \"java.util.ConcurrentHashMap\":\n            case \"java.util.Hashtable\":\n                return true;\n            default:\n                return false;\n        }\n    }\n", "    public static boolean isPrimitiveOrSimpleType(String parameterType) {\n        if (parameterType == null) {\n            return false;\n        }\n        String type = parameterType.replace(\"PsiType:\", \"\");\n        switch (type) {\n            case \"byte\":\n            case \"java.lang.Byte\":\n            case \"char\":\n            case \"java.lang.String\":\n            case \"java.util.Date\":\n            case \"java.sql.Timestamp\":\n            case \"java.time.LocalDate\":\n            case \"java.time.LocalDateTime\":\n            case \"short\":\n            case \"java.lang.Short\":\n            case \"int\":\n            case \"java.lang.Integer\":\n            case \"long\":\n            case \"java.lang.Long\":\n            case \"float\":\n            case \"java.lang.Float\":\n            case \"double\":\n            case \"java.lang.Double\":\n            case \"java.math.BigInteger\":\n            case \"java.math.BigDecimal\":\n            case \"boolean\":\n            case \"java.lang.Boolean\":\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * \u57fa\u672c\u7c7b\u578b\u8f6c\u5316\u4e3a\u5305\u88c5\u7c7b\u578b\n     *\n     * @param classType \u57fa\u672c\u7c7b\u578b\n     */", "    public static String primitiveToBox(String classType) {\n        switch (classType) {\n            case \"char\":\n                return \"java.lang.Character\";\n            case \"short\":\n                return \"java.lang.Short\";\n            case \"int\":\n                return \"java.lang.Integer\";\n            case \"long\":\n                return \"java.lang.Long\";\n            case \"float\":\n                return \"java.lang.Float\";\n            case \"double\":\n                return \"java.lang.Double\";\n            case \"boolean\":\n                return \"java.lang.Boolean\";\n            default:\n        }\n        return classType;\n    }\n\n    @NotNull", "    public static Object getExampleValue(String parameterType, boolean isRandom) {\n        if (parameterType.isEmpty()) {\n            return \"\";\n        }\n        if (parameterType.lastIndexOf(\".\") > 0) {\n            parameterType = parameterType.substring(parameterType.lastIndexOf(\".\") + 1);\n        }\n        String type = parameterType.replace(\"PsiType:\", \"\");\n        switch (type) {\n            case \"byte\":\n            case \"Byte\":\n                return Byte.valueOf(\"1\");\n            case \"char\":\n                return 'a';\n            case \"String\":\n                return isRandom ? \"str\" : \"\";\n            case \"Date\":\n            case \"Timestamp\":\n            case \"LocalDate\":\n            case \"LocalDateTime\":\n                return System.currentTimeMillis();\n            case \"short\":\n            case \"Short\":\n            case \"int\":\n            case \"Integer\":\n            case \"long\":\n            case \"Long\":\n            case \"BigInteger\":\n            case \"BigDecimal\":\n                return 0;\n            case \"float\":\n            case \"Float\":\n            case \"double\":\n            case \"Double\":\n                return 0.0;\n            case \"boolean\":\n            case \"Boolean\":\n                return true;\n            default:\n                return \"\";\n        }\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/solon/SolonControllerAnnotation.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.solon;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@Getter\n@AllArgsConstructor\npublic enum SolonControllerAnnotation {\n\n    CONTROLLER(\"Controller\", \"org.noear.solon.annotation.Controller\");\n\n    private final String shortName;\n    private final String qualifiedName;\n}"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/solon/SolonRequestMethodAnnotation.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.solon;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@Getter\n@AllArgsConstructor\npublic enum SolonRequestMethodAnnotation {\n\n    REQUEST_MAPPING(\"Mapping\", \"org.noear.solon.annotation.Mapping\", null),\n    HEAD_MAPPING(\"Head\", \"org.noear.solon.annotation.Head\", \"Head\"),\n    GET_MAPPING(\"Get\", \"org.noear.solon.annotation.Get\", \"GET\"),\n    POST_MAPPING(\"Post\", \"org.noear.solon.annotation.Post\", \"POST\"),\n    PUT_MAPPING(\"Put\", \"org.noear.solon.annotation.Put\", \"PUT\"),\n    DELETE_MAPPING(\"Delete\", \"org.noear.solon.annotation.Delete\", \"DELETE\"),\n    PATCH_MAPPING(\"Patch\", \"org.noear.solon.annotation.Patch\", \"PATCH\");\n\n    private final String shortName;\n    private final String qualifiedName;\n    private final String method;\n}"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/solon/SolonAnnotationHelper.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.solon;\n\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiMethod;\nimport io.github.newhoo.restkit.ext.solon.MethodPath;\nimport io.github.newhoo.restkit.ext.solon.helper.PsiAnnotationHelper;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;", "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static io.github.newhoo.restkit.ext.solon.solon.SolonRequestMethodAnnotation.REQUEST_MAPPING;\n\npublic class SolonAnnotationHelper {\n\n    /**\n     * \u7c7b\u4e0a\u7684\u6ce8\u89e3\n     */", "\npublic class SolonAnnotationHelper {\n\n    /**\n     * \u7c7b\u4e0a\u7684\u6ce8\u89e3\n     */\n    public static List<MethodPath> getTypeMethodPaths(PsiClass psiClass) {\n        return getMethodPaths(solonMappingAnno -> PsiAnnotationHelper.getInheritedAnnotation(psiClass, solonMappingAnno.getQualifiedName()));\n    }\n\n    /**\n     * \u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\n     */", "    public static List<MethodPath> getMethodMethodPaths(PsiMethod psiMethod) {\n        return getMethodPaths(solonMappingAnno -> PsiAnnotationHelper.getInheritedAnnotation(psiMethod, solonMappingAnno.getQualifiedName()));\n    }\n\n    private static List<MethodPath> getMethodPaths(@NotNull Function<SolonRequestMethodAnnotation, PsiAnnotation> getAnno) {\n        PsiAnnotation requestMappingAnnotation = getAnno.apply(REQUEST_MAPPING);\n        if (requestMappingAnnotation == null) {\n            return Collections.emptyList();\n        }\n\n        String path = \"\";\n        List<String> methodList;\n\n        List<String> pathList = PsiAnnotationHelper.getAnnotationAttributeValues(requestMappingAnnotation, \"value\");", "        if (pathList.isEmpty()) {\n            pathList = PsiAnnotationHelper.getAnnotationAttributeValues(requestMappingAnnotation, \"path\");\n        }\n        if (!pathList.isEmpty()) {\n            path = pathList.get(0);\n        }\n\n        methodList = PsiAnnotationHelper.getAnnotationAttributeValues(requestMappingAnnotation, \"method\")\n                                        .stream()\n                                        .map(method -> method.replace(\"MethodType.\", \"\"))\n                                        .collect(Collectors.toList());\n", "        for (SolonRequestMethodAnnotation annotation : SolonRequestMethodAnnotation.values()) {\n            if (annotation.getMethod() != null) {\n                if (getAnno.apply(annotation) != null) {\n                    methodList.add(annotation.getMethod());\n                }\n            }\n        }\n\n        List<MethodPath> mappingList = new ArrayList<>(4);\n        if (methodList.isEmpty()) {\n            mappingList.add(new MethodPath(path, null));\n        } else {", "        if (methodList.isEmpty()) {\n            mappingList.add(new MethodPath(path, null));\n        } else {\n            for (String method : methodList) {\n                mappingList.add(new MethodPath(path, method));\n            }\n        }\n\n        return mappingList;\n    }\n}"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/solon/SolonRequestParamAnnotation.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.solon;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@Getter\n@AllArgsConstructor\npublic enum SolonRequestParamAnnotation {\n    REQUEST_PARAM(\"Param\", \"org.noear.solon.annotation.Param\"),\n    REQUEST_BODY(\"Body\", \"org.noear.solon.annotation.Body\"),\n    PATH_VARIABLE(\"Path\", \"org.noear.solon.annotation.Path\"),\n    REQUEST_HEADER(\"Header\", \"org.noear.solon.annotation.Header\"),\n    REQUEST_COOKIE(\"Cookie\", \"org.noear.solon.annotation.Cookie\");\n\n    private final String shortName;\n    private final String qualifiedName;\n}"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/helper/PsiAnnotationHelper.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.helper;\n\nimport com.intellij.psi.PsiAnnotation;\nimport com.intellij.psi.PsiAnnotationMemberValue;\nimport com.intellij.psi.PsiArrayInitializerMemberValue;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiLiteralExpression;\nimport com.intellij.psi.PsiMethod;\nimport com.intellij.psi.PsiReferenceExpression;\nimport org.jetbrains.annotations.NotNull;", "import com.intellij.psi.PsiReferenceExpression;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * PsiAnnotationHelper in Java\n *\n * @author newhoo", " *\n * @author newhoo\n * @since 1.0.0\n */\npublic class PsiAnnotationHelper {\n\n    /**\n     * \u83b7\u53d6class\u6ce8\u89e3\n     *\n     * @param psiClass\n     * @param fqn\n     */", "    public static PsiAnnotation getInheritedAnnotation(PsiClass psiClass, String fqn) {\n        if (psiClass == null) {\n            return null;\n        }\n        PsiAnnotation annotation = psiClass.getAnnotation(fqn);\n        if (annotation != null) {\n            return annotation;\n        }\n        for (PsiClass aSuper : psiClass.getSupers()) {\n            if (!\"java.lang.Object\".equals(aSuper.getQualifiedName())) {\n                PsiAnnotation superClassAnno = getInheritedAnnotation(aSuper, fqn);", "        for (PsiClass aSuper : psiClass.getSupers()) {\n            if (!\"java.lang.Object\".equals(aSuper.getQualifiedName())) {\n                PsiAnnotation superClassAnno = getInheritedAnnotation(aSuper, fqn);\n                if (superClassAnno != null) {\n                    return superClassAnno;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \u83b7\u53d6method\u6ce8\u89e3\n     *\n     * @param psiMethod\n     * @param fqn\n     */", "    public static PsiAnnotation getInheritedAnnotation(PsiMethod psiMethod, String fqn) {\n        PsiAnnotation annotation = psiMethod.getAnnotation(fqn);\n        if (annotation != null) {\n            return annotation;\n        }\n        for (PsiMethod aSuper : psiMethod.findSuperMethods()) {\n            PsiAnnotation superMethodAnnotation = getInheritedAnnotation(aSuper, fqn);\n            if (superMethodAnnotation != null) {\n                return superMethodAnnotation;\n            }\n        }\n        return null;\n    }\n\n    @NotNull", "    public static List<String> getAnnotationAttributeValues(PsiAnnotation annotation, String attr) {\n        List<String> values = new ArrayList<>();\n        PsiAnnotationMemberValue value = annotation.findDeclaredAttributeValue(attr);\n        if (value == null) {\n            return values;\n        }\n\n        //\u53ea\u6709\u6ce8\u89e3\n        //\u4e00\u4e2a\u503c class com.intellij.psi.impl.source.tree.java.PsiLiteralExpressionImpl\n        //\u591a\u4e2a\u503c  class com.intellij.psi.impl.source.tree.java.PsiArrayInitializerMemberValueImpl\n        if (value instanceof PsiReferenceExpression) {\n            PsiReferenceExpression expression = (PsiReferenceExpression) value;\n            values.add(expression.getText());", "        if (value instanceof PsiReferenceExpression) {\n            PsiReferenceExpression expression = (PsiReferenceExpression) value;\n            values.add(expression.getText());\n        } else if (value instanceof PsiLiteralExpression) {\n//            values.add(psiNameValuePair.getLiteralValue());\n            values.add(((PsiLiteralExpression) value).getValue().toString());\n        } else if (value instanceof PsiArrayInitializerMemberValue) {\n            PsiAnnotationMemberValue[] initializers = ((PsiArrayInitializerMemberValue) value).getInitializers();\n\n            for (PsiAnnotationMemberValue initializer : initializers) {\n                values.add(initializer.getText().replaceAll(\"\\\"\", \"\"));\n            }\n        }\n\n        return values;\n    }\n", "            for (PsiAnnotationMemberValue initializer : initializers) {\n                values.add(initializer.getText().replaceAll(\"\\\"\", \"\"));\n            }\n        }\n\n        return values;\n    }\n\n    public static String getAnnotationValue(PsiAnnotation annotation, String attributeName) {\n        String paramName = null;\n        PsiAnnotationMemberValue attributeValue = annotation.findDeclaredAttributeValue(attributeName);\n", "    public static String getAnnotationValue(PsiAnnotation annotation, String attributeName) {\n        String paramName = null;\n        PsiAnnotationMemberValue attributeValue = annotation.findDeclaredAttributeValue(attributeName);\n\n        if (attributeValue instanceof PsiLiteralExpression) {\n            paramName = (String) ((PsiLiteralExpression) attributeValue).getValue();\n        }\n        return paramName;\n    }\n}\n"]}
{"filename": "src/main/java/io/github/newhoo/restkit/ext/solon/helper/PsiClassHelper.java", "chunked_list": ["package io.github.newhoo.restkit.ext.solon.helper;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiEnumConstant;\nimport com.intellij.psi.PsiField;\nimport com.intellij.psi.PsiModifier;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport com.intellij.psi.search.PsiShortNamesCache;\nimport io.github.newhoo.restkit.ext.solon.util.TypeUtils;", "import com.intellij.psi.search.PsiShortNamesCache;\nimport io.github.newhoo.restkit.ext.solon.util.TypeUtils;\nimport io.github.newhoo.restkit.util.JsonUtils;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * PsiClassHelper in Java", "/**\n * PsiClassHelper in Java\n *\n * @author newhoo\n * @since 1.0.0\n */\npublic class PsiClassHelper {\n\n    private static final int MAX_CORRELATION_COUNT = 6;\n\n    public static String convertClassToJSON(String className, Project project) {\n        Object o = assemblePsiClass(className, project, 0, false);\n        return JsonUtils.toJson(o);\n    }\n", "    public static String convertClassToJSON(String className, Project project) {\n        Object o = assemblePsiClass(className, project, 0, false);\n        return JsonUtils.toJson(o);\n    }\n\n    public static Object assemblePsiClass(String typeCanonicalText, Project project, int autoCorrelationCount, boolean putClass) {\n        boolean containsGeneric = typeCanonicalText.contains(\"<\");\n        // \u6570\u7ec4|\u96c6\u5408\n        if (TypeUtils.isArray(typeCanonicalText) || TypeUtils.isList(typeCanonicalText)) {\n            String elementType = TypeUtils.isArray(typeCanonicalText)\n                    ? typeCanonicalText.replace(\"[]\", \"\")\n                    : containsGeneric\n                    ? typeCanonicalText.substring(typeCanonicalText.indexOf(\"<\") + 1, typeCanonicalText.lastIndexOf(\">\"))\n                    : Object.class.getCanonicalName();\n            return Collections.singletonList(assemblePsiClass(elementType, project, autoCorrelationCount, putClass));\n        }\n\n        PsiClass psiClass = PsiClassHelper.findPsiClass(typeCanonicalText, project);", "        if (TypeUtils.isArray(typeCanonicalText) || TypeUtils.isList(typeCanonicalText)) {\n            String elementType = TypeUtils.isArray(typeCanonicalText)\n                    ? typeCanonicalText.replace(\"[]\", \"\")\n                    : containsGeneric\n                    ? typeCanonicalText.substring(typeCanonicalText.indexOf(\"<\") + 1, typeCanonicalText.lastIndexOf(\">\"))\n                    : Object.class.getCanonicalName();\n            return Collections.singletonList(assemblePsiClass(elementType, project, autoCorrelationCount, putClass));\n        }\n\n        PsiClass psiClass = PsiClassHelper.findPsiClass(typeCanonicalText, project);\n        if (psiClass == null) {\n            //\u7b80\u5355\u5e38\u7528\u7c7b\u578b", "        if (psiClass == null) {\n            //\u7b80\u5355\u5e38\u7528\u7c7b\u578b\n            if (TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {\n                return TypeUtils.getExampleValue(typeCanonicalText, false);\n            }\n            return Collections.emptyMap();\n        }\n\n        //\u7b80\u5355\u5e38\u7528\u7c7b\u578b\n        if (TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {\n            return TypeUtils.getExampleValue(typeCanonicalText, false);\n        }\n\n        // \u679a\u4e3e", "        if (TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {\n            return TypeUtils.getExampleValue(typeCanonicalText, false);\n        }\n\n        // \u679a\u4e3e\n        if (psiClass.isEnum()) {\n            PsiField[] enumFields = psiClass.getFields();\n            for (PsiField enumField : enumFields) {\n                if (enumField instanceof PsiEnumConstant) {\n                    return enumField.getName();\n                }\n            }\n            return \"\";\n        }\n\n        // Map", "                if (enumField instanceof PsiEnumConstant) {\n                    return enumField.getName();\n                }\n            }\n            return \"\";\n        }\n\n        // Map\n        if (TypeUtils.isMap(typeCanonicalText)) {\n            return Collections.emptyMap();\n        }\n", "        if (TypeUtils.isMap(typeCanonicalText)) {\n            return Collections.emptyMap();\n        }\n\n        if (autoCorrelationCount > MAX_CORRELATION_COUNT) {\n            return Collections.emptyMap();\n        }\n        autoCorrelationCount++;\n\n        Map<String, Object> map = new LinkedHashMap<>();\n        if (putClass) {", "        if (putClass) {\n            if (containsGeneric) {\n                map.put(\"class\", typeCanonicalText.substring(0, typeCanonicalText.indexOf(\"<\")));\n            } else {\n                map.put(\"class\", typeCanonicalText);\n            }\n        }\n        for (PsiField field : psiClass.getAllFields()) {\n            if (field.hasModifierProperty(PsiModifier.STATIC) || field.hasModifierProperty(PsiModifier.FINAL) || field.hasModifierProperty(PsiModifier.TRANSIENT)) {\n                continue;\n            }\n            String fieldType = field.getType().getCanonicalText();\n            // \u4e0d\u5b58\u5728\u6cdb\u578b", "            if (field.hasModifierProperty(PsiModifier.STATIC) || field.hasModifierProperty(PsiModifier.FINAL) || field.hasModifierProperty(PsiModifier.TRANSIENT)) {\n                continue;\n            }\n            String fieldType = field.getType().getCanonicalText();\n            // \u4e0d\u5b58\u5728\u6cdb\u578b\n            if (!containsGeneric) {\n                map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));\n                continue;\n            }\n            // \u5b58\u5728\u6cdb\u578b\n            if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {\n                map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));", "            if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {\n                map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));\n            } else if (PsiClassHelper.findPsiClass(fieldType, project) == null) {\n                map.put(field.getName(), assemblePsiClass(typeCanonicalText.substring(typeCanonicalText.indexOf(\"<\") + 1, typeCanonicalText.lastIndexOf(\">\")), project, autoCorrelationCount, putClass));\n            } else {\n                map.put(field.getName(), assemblePsiClass(fieldType, project, autoCorrelationCount, putClass));\n            }\n        }\n        return map;\n    }\n\n    /**\n     * \u67e5\u627e\u7c7b\n     *\n     * @param typeCanonicalText \u53c2\u6570\u7c7b\u578b\u5168\u9650\u5b9a\u540d\u79f0\n     * @param project           \u5f53\u524dproject\n     * @return \u67e5\u627e\u5230\u7684\u7c7b\n     */", "    public static PsiClass findPsiClass(String typeCanonicalText, Project project) {\n        // \u57fa\u672c\u7c7b\u578b\u8f6c\u5316\u4e3a\u5bf9\u5e94\u5305\u88c5\u7c7b\u578b\n        typeCanonicalText = TypeUtils.primitiveToBox(typeCanonicalText);\n\n        String className = typeCanonicalText;\n        if (className.contains(\"[]\")) {\n            className = className.replaceAll(\"\\\\[]\", \"\");\n        }\n        if (className.contains(\"<\")) {\n            className = className.substring(0, className.indexOf(\"<\"));\n        }", "        if (className.contains(\"<\")) {\n            className = className.substring(0, className.indexOf(\"<\"));\n        }\n        if (className.lastIndexOf(\".\") > 0) {\n            className = className.substring(className.lastIndexOf(\".\") + 1);\n        }\n        PsiClass[] classesByName = PsiShortNamesCache.getInstance(project).getClassesByName(className, GlobalSearchScope.allScope(project));\n        for (PsiClass psiClass : classesByName) {\n            if (typeCanonicalText.startsWith(psiClass.getQualifiedName())) {\n                return psiClass;\n            }\n        }\n        return null;\n    }\n}", "            if (typeCanonicalText.startsWith(psiClass.getQualifiedName())) {\n                return psiClass;\n            }\n        }\n        return null;\n    }\n}"]}
