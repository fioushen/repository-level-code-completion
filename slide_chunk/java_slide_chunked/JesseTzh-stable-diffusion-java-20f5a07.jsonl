{"filename": "src/main/java/com/jessetzh/test/GeneratorTest.java", "chunked_list": ["package com.jessetzh.test;\n\n\nimport com.jessetzh.parameters.Img2ImgParameter;\nimport com.jessetzh.parameters.SamplerEnums;\nimport com.jessetzh.parameters.Text2ImgParameter;\nimport com.jessetzh.request.Img2Img;\nimport com.jessetzh.request.Text2Img;\nimport com.jessetzh.res.SdResponses;\n", "import com.jessetzh.res.SdResponses;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.nio.file.Files;\nimport java.nio.file.Path;", "import java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Base64;\n\n/**\n *\n */\n\npublic class GeneratorTest {\n\n\t//\u652f\u6301\u76f4\u63a5\u4f7f\u7528 gradio.live WebUI \u5730\u5740\u8c03\u7528\n\tstatic final String URL = \"https://xxxxxxxxxxxxx.gradio.live/\";\n", "\npublic class GeneratorTest {\n\n\t//\u652f\u6301\u76f4\u63a5\u4f7f\u7528 gradio.live WebUI \u5730\u5740\u8c03\u7528\n\tstatic final String URL = \"https://xxxxxxxxxxxxx.gradio.live/\";\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tnew GeneratorTest().img2imgTest();\n\t}\n\n\tprivate void text2ImgText() throws IOException {\n\t\tText2ImgParameter parameter = new Text2ImgParameter(URL);\n\t\t//\u5982\u9700\u8981\u4ee3\u7406\u5219\u89e3\u5f00\u4e0b\u5217\u4ee3\u7801\u6ce8\u91ca\n//\t\tparameter.getBasicParameter().setProxyEnable(true);\n//\t\tparameter.getBasicParameter().setProxyHost(\"127.0.0.1\");\n//\t\tparameter.getBasicParameter().setProxyPort(7890);\n\t\tparameter.setPrompt(\"One Golden Retriever\");\n\t\tSdResponses res = Text2Img.generate(parameter);", "\t\tfor (String image : res.getImages()) {\n\t\t\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(image)));\n\t\t\tFile output = new File(\"image.png\");\n\t\t\tImageIO.write(bufferedImage, \"png\", output);\n\t\t}\n\t}\n\n\tprivate void img2imgTest() throws IOException {\n\t\tImg2ImgParameter parameter = new Img2ImgParameter(URL);\n\t\t//\u91cd\u7ed8\u5e45\u5ea6\n\t\tparameter.setDenoisingStrength(new BigDecimal(\"0.55\"));\n\t\tparameter.setSeed(-1);\n\t\tparameter.setSteps(30);\n\t\tparameter.setCfgScale(7);\n\t\tparameter.setWidth(512);\n\t\tparameter.setHeight(512);\n\t\tparameter.setSamplerName(SamplerEnums.DPM_2M_Karras.getInfo());\n\t\tPath path = Paths.get(\"test.jpeg\");\n\t\tbyte[] bytes = Files.readAllBytes(path);\n\t\tBase64.Encoder encoder = Base64.getEncoder();\n\t\tString base64String = encoder.encodeToString(bytes);\n\t\tparameter.setInit_images(new String[]{base64String});\n\t\tparameter.setPrompt(\"dog\");\n\t\tparameter.setNegativePrompt(\"cat\");\n\t\tSdResponses res = Img2Img.generate(parameter);", "\t\tfor (String image : res.getImages()) {\n\t\t\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(image)));\n\t\t\tFile output = new File(\"image.png\");\n\t\t\tImageIO.write(bufferedImage, \"png\", output);\n\t\t\tSystem.out.println(res.getInfo());\n\t\t}\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/jessetzh/handler/StableDiffusionException.java", "chunked_list": ["package com.jessetzh.handler;\n\n/**\n * Abnormal drawing\n *\n * @author JesseTzh\n */\npublic class StableDiffusionException extends RuntimeException  {\n\n    private static final long serialVersionUID = 1L;\n\n    public StableDiffusionException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "src/main/java/com/jessetzh/handler/SdResHandler.java", "chunked_list": ["package com.jessetzh.handler;\n\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\n\npublic class SdResHandler {\n\n    public static void process(CloseableHttpResponse response) throws IOException {\n        if (response.getStatusLine().getStatusCode() != 200) {", "    public static void process(CloseableHttpResponse response) throws IOException {\n        if (response.getStatusLine().getStatusCode() != 200) {\n            if (response.getStatusLine().getStatusCode() == 401) {\n                throw new StableDiffusionException(\"Identity verification failed. Please check if your username and password are correct!\");\n            } else if (response.getStatusLine().getStatusCode() == 500) {\n                throw new StableDiffusionException(EntityUtils.toString(response.getEntity()));\n            } else {\n                throw new StableDiffusionException(\"Interface call error, please check if the URL is correct.\");\n            }\n        } else {\n            if (response.getEntity() == null) {\n                System.err.println(\"The result is empty!\");\n            }\n        }\n    }\n}\n", "            if (response.getEntity() == null) {\n                System.err.println(\"The result is empty!\");\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/jessetzh/handler/BasicParameterHandler.java", "chunked_list": ["package com.jessetzh.handler;\n\nimport com.jessetzh.parameters.BasicParameter;\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.conn.DefaultProxyRoutePlanner;", "import org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.conn.DefaultProxyRoutePlanner;\n\n/**\n * Basic parameter validation.\n */\npublic class BasicParameterHandler {\n\n    public static void check(BasicParameter basicParameter, HttpClientBuilder builder) {\n        if (basicParameter.isAuthEnable()) {\n            if (basicParameter.getUser() == null || basicParameter.getPassword() == null) {\n                throw new StableDiffusionException(\"The username and password cannot be empty when authentication is enabled!\");\n            }\n            // Identity verification information\n            CredentialsProvider provider = new BasicCredentialsProvider();\n            UsernamePasswordCredentials credentials\n                    = new UsernamePasswordCredentials(basicParameter.getUser(), basicParameter.getPassword());\n            provider.setCredentials(AuthScope.ANY, credentials);\n            // Set CredentialsProvider object to HttpClientBuilder\n            builder.setDefaultCredentialsProvider(provider);\n        }", "    public static void check(BasicParameter basicParameter, HttpClientBuilder builder) {\n        if (basicParameter.isAuthEnable()) {\n            if (basicParameter.getUser() == null || basicParameter.getPassword() == null) {\n                throw new StableDiffusionException(\"The username and password cannot be empty when authentication is enabled!\");\n            }\n            // Identity verification information\n            CredentialsProvider provider = new BasicCredentialsProvider();\n            UsernamePasswordCredentials credentials\n                    = new UsernamePasswordCredentials(basicParameter.getUser(), basicParameter.getPassword());\n            provider.setCredentials(AuthScope.ANY, credentials);\n            // Set CredentialsProvider object to HttpClientBuilder\n            builder.setDefaultCredentialsProvider(provider);\n        }", "        if (basicParameter.isProxyEnable()) {\n            if (basicParameter.getProxyHost() == null || basicParameter.getProxyPort() == 0) {\n                throw new StableDiffusionException(\"When using a proxy server, please specify the proxy server address and port.\");\n            }\n            // Access an API using a proxy server.\n            builder.setRoutePlanner(new DefaultProxyRoutePlanner(new HttpHost(basicParameter.getProxyHost(), basicParameter.getProxyPort())));\n        }\n        if (basicParameter.getApiUrl() == null) {\n            throw new StableDiffusionException(\"API url can not be empty!\");\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/jessetzh/res/SdResponses.java", "chunked_list": ["package com.jessetzh.res;\n\n\nimport com.jessetzh.parameters.SdParameter;\n\npublic class SdResponses {\n\n\tprivate String[] images;\n\n\tprivate SdParameter parameters;\n\n\tprivate String info;\n\n\tpublic String[] getImages() {\n\t\treturn images;\n\t}\n", "\tpublic void setImages(String[] images) {\n\t\tthis.images = images;\n\t}\n\n\tpublic SdParameter getParameters() {\n\t\treturn parameters;\n\t}\n\n\tpublic void setParameters(SdParameter parameters) {\n\t\tthis.parameters = parameters;\n\t}\n", "\tpublic void setParameters(SdParameter parameters) {\n\t\tthis.parameters = parameters;\n\t}\n\n\t\tpublic String getInfo() {\n\t\treturn info;\n\t}\n\n\tpublic void setInfo(String info) {\n\t\tthis.info = info;\n\t}\n\n\tpublic SdResponses() {\n\t}\n\n\tpublic SdResponses(String[] images, SdParameter parameters, String info) {\n\t\tthis.images = images;\n\t\tthis.parameters = parameters;\n\t\tthis.info = info;\n\t}\n}\n", "\tpublic void setInfo(String info) {\n\t\tthis.info = info;\n\t}\n\n\tpublic SdResponses() {\n\t}\n\n\tpublic SdResponses(String[] images, SdParameter parameters, String info) {\n\t\tthis.images = images;\n\t\tthis.parameters = parameters;\n\t\tthis.info = info;\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/res/SdErrorInfo.java", "chunked_list": ["package com.jessetzh.res;\n\npublic class SdErrorInfo {\n\tString detail;\n\n\tpublic String getDetail() {\n\t\treturn detail;\n\t}\n\n\tpublic void setDetail(String detail) {\n\t\tthis.detail = detail;\n\t}\n}\n", "\tpublic void setDetail(String detail) {\n\t\tthis.detail = detail;\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/parameters/SamplerEnums.java", "chunked_list": ["package com.jessetzh.parameters;\n\npublic enum SamplerEnums {\n\n\tEuler_a(1, \"Euler_a\"),\n\tEuler(2, \"Euler\"),\n\tLMS(3, \"LMS\"),\n\tHeun(4, \"Heun\"),\n\tDPM2(5, \"DPM2\"),\n\tDPM2_a(6, \"DPM2 a\"),\n\tDPM_2S_a(7, \"DPM++ 2S a\"),\n\tDPM_2M(8, \"DPM++ 2M\"),\n\tDPM_SDE(9, \"DPM++ SDE\"),\n\tDPM_fast(10, \"DPM fast\"),\n\tDPM_adaptive(11, \"DPM adaptive\"),\n\tLMS_Karras(12, \"LMS Karras\"),\n\tDPM2_Karras(13, \"DPM2 Karras\"),\n\tDPM2_a_Karras(14, \"DPM2 a Karras\"),\n\tDPM_2S_a_Karras(15, \"DPM++ 2S a Karras\"),\n\tDPM_2M_Karras(16, \"DPM++ 2M Karras\"),\n\tDPM_SDE_Karras(17, \"DPM++ SDE Karras\"),\n\tDDIM(18, \"DDIM\"),\n\tPLMS(19, \"PLMS\"),\n\tUniPC(20, \"UniPC\");\n\n\tprivate final Integer code;\n\n\tprivate final String info;\n", "\tpublic Integer getCode() {\n\t\treturn code;\n\t}\n\n\tpublic String getInfo() {\n\t\treturn info;\n\t}\n\n\tSamplerEnums(int i, String samplerName) {\n\t\tthis.code = i;\n\t\tthis.info = samplerName;\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/parameters/BasicParameter.java", "chunked_list": ["package com.jessetzh.parameters;\n\npublic class BasicParameter {\n\n\tprivate String apiUrl;\n\n\tprivate boolean proxyEnable;\n\n\tprivate String proxyHost;\n\n\tprivate int proxyPort;\n\n\tprivate boolean authEnable;\n\n\tprivate String user;\n\n\tprivate String password;\n", "\tpublic String getApiUrl() {\n\t\treturn apiUrl;\n\t}\n\n\tpublic void setApiUrl(String apiUrl) {\n\t\tthis.apiUrl = apiUrl;\n\t}\n\n\tpublic boolean isProxyEnable() {\n\t\treturn proxyEnable;\n\t}\n", "\tpublic boolean isProxyEnable() {\n\t\treturn proxyEnable;\n\t}\n\n\tpublic void setProxyEnable(boolean proxyEnable) {\n\t\tthis.proxyEnable = proxyEnable;\n\t}\n\n\tpublic String getProxyHost() {\n\t\treturn proxyHost;\n\t}\n", "\tpublic String getProxyHost() {\n\t\treturn proxyHost;\n\t}\n\n\tpublic void setProxyHost(String proxyHost) {\n\t\tthis.proxyHost = proxyHost;\n\t}\n\n\tpublic int getProxyPort() {\n\t\treturn proxyPort;\n\t}\n", "\tpublic int getProxyPort() {\n\t\treturn proxyPort;\n\t}\n\n\tpublic void setProxyPort(int proxyPort) {\n\t\tthis.proxyPort = proxyPort;\n\t}\n\n\tpublic boolean isAuthEnable() {\n\t\treturn authEnable;\n\t}\n", "\tpublic boolean isAuthEnable() {\n\t\treturn authEnable;\n\t}\n\n\tpublic void setAuthEnable(boolean authEnable) {\n\t\tthis.authEnable = authEnable;\n\t}\n\n\tpublic String getUser() {\n\t\treturn user;\n\t}\n", "\tpublic String getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(String user) {\n\t\tthis.user = user;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n", "\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\n\tpublic BasicParameter(String url) {\n\t\tthis.proxyEnable = false;\n\t\tthis.authEnable = false;", "\t\tif (url != null) {\n\t\t\tif ( url.endsWith(\"/\")) {\n\t\t\t\turl = url.substring(0, url.length() - 1);\n\t\t\t}\n\t\t}\n\t\tthis.apiUrl = url;\n\t}\n\n\tpublic BasicParameter() {\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/parameters/Img2ImgParameter.java", "chunked_list": ["package com.jessetzh.parameters;\n\nimport com.google.gson.annotations.SerializedName;\n\nimport java.math.BigDecimal;\n\npublic class Img2ImgParameter extends SdParameter {\n\n    String[] init_images;\n\n    @SerializedName(\"denoising_strength\")\n    private BigDecimal denoisingStrength;\n", "    public BigDecimal getDenoisingStrength() {\n        return denoisingStrength;\n    }\n\n    public void setDenoisingStrength(BigDecimal denoisingStrength) {\n        this.denoisingStrength = denoisingStrength;\n    }\n\n    public String[] getInit_images() {\n        return init_images;\n    }\n", "    public void setInit_images(String[] init_images) {\n        this.init_images = init_images;\n    }\n\n    public Img2ImgParameter() {\n        super();\n    }\n\n    public Img2ImgParameter(String url) {\n        super(url);\n    }\n}\n"]}
{"filename": "src/main/java/com/jessetzh/parameters/SdParameter.java", "chunked_list": ["package com.jessetzh.parameters;\n\nimport com.google.gson.annotations.SerializedName;\n\nimport java.math.BigDecimal;\n\npublic class SdParameter {\n\n\tprivate transient BasicParameter basicParameter;\n\n\tprivate String prompt;\n\n\t@SerializedName(\"negative_prompt\")\n\tprivate String negativePrompt;\n\n\tprivate int steps;\n\n\t@SerializedName(\"resize_mode\")\n\tprivate int resizeMode;\n\n\t@SerializedName(\"cfg_scale\")\n\tprivate int cfgScale;\n\n\tprivate int seed;\n\n\tprivate int width;\n\n\tprivate int height;\n\n\t@SerializedName(\"sampler_name\")\n\tprivate String samplerName;\n", "\tpublic int getResizeMode() {\n\t\treturn resizeMode;\n\t}\n\n\tpublic void setResizeMode(int resizeMode) {\n\t\tthis.resizeMode = resizeMode;\n\t}\n\n\tpublic int getCfgScale() {\n\t\treturn cfgScale;\n\t}\n", "\tpublic int getCfgScale() {\n\t\treturn cfgScale;\n\t}\n\n\tpublic void setCfgScale(int cfgScale) {\n\t\tthis.cfgScale = cfgScale;\n\t}\n\n\tpublic int getSeed() {\n\t\treturn seed;\n\t}\n", "\tpublic int getSeed() {\n\t\treturn seed;\n\t}\n\n\tpublic void setSeed(int seed) {\n\t\tthis.seed = seed;\n\t}\n\n\tpublic int getWidth() {\n\t\treturn width;\n\t}\n", "\tpublic int getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic void setWidth(int width) {\n\t\tthis.width = width;\n\t}\n\n\tpublic int getHeight() {\n\t\treturn height;\n\t}\n", "\tpublic int getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic void setHeight(int height) {\n\t\tthis.height = height;\n\t}\n\n\tpublic String getSamplerName() {\n\t\treturn samplerName;\n\t}\n", "\tpublic String getSamplerName() {\n\t\treturn samplerName;\n\t}\n\n\tpublic void setSamplerName(String samplerName) {\n\t\tthis.samplerName = samplerName;\n\t}\n\n\tpublic int getSteps() {\n\t\treturn steps;\n\t}\n", "\tpublic int getSteps() {\n\t\treturn steps;\n\t}\n\n\tpublic void setSteps(int steps) {\n\t\tthis.steps = steps;\n\t}\n\n\tpublic String getNegativePrompt() {\n\t\treturn negativePrompt;\n\t}\n", "\tpublic String getNegativePrompt() {\n\t\treturn negativePrompt;\n\t}\n\n\tpublic void setNegativePrompt(String negativePrompt) {\n\t\tthis.negativePrompt = negativePrompt;\n\t}\n\n\tpublic BasicParameter getBasicParameter() {\n\t\treturn basicParameter;\n\t}\n", "\tpublic BasicParameter getBasicParameter() {\n\t\treturn basicParameter;\n\t}\n\n\tpublic void setBasicParameter(BasicParameter basicParameter) {\n\t\tthis.basicParameter = basicParameter;\n\t}\n\n\tpublic String getPrompt() {\n\t\treturn prompt;\n\t}\n", "\tpublic String getPrompt() {\n\t\treturn prompt;\n\t}\n\n\tpublic void setPrompt(String prompt) {\n\t\tthis.prompt = prompt;\n\t}\n\n\tpublic SdParameter() {\n\n\t}\n\n\tpublic SdParameter(String url) {\n\t\tthis.basicParameter = new BasicParameter(url);\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/parameters/Text2ImgParameter.java", "chunked_list": ["package com.jessetzh.parameters;\n\npublic class Text2ImgParameter extends SdParameter{\n\n\tpublic Text2ImgParameter() {\n\t\tsuper();\n\t}\n\n\tpublic Text2ImgParameter(String url) {\n\t\tsuper(url);\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/request/RequestExecutor.java", "chunked_list": ["package com.jessetzh.request;\n\nimport com.google.gson.Gson;\nimport com.jessetzh.handler.SdResHandler;\nimport com.jessetzh.handler.StableDiffusionException;\nimport com.jessetzh.res.SdResponses;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;", "import org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class RequestExecutor {\n\n\tpublic static SdResponses execute(HttpClientBuilder builder, StringEntity entity, HttpPost httpPost) throws IOException {\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse response = null;\n\t\tSdResponses responses = new SdResponses();\n\t\thttpPost.setEntity(entity);\n\t\thttpPost.setHeader(\"Accept\", \"application/json\");\n\t\thttpPost.setHeader(\"Content-type\", \"application/json\");", "\tpublic static SdResponses execute(HttpClientBuilder builder, StringEntity entity, HttpPost httpPost) throws IOException {\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse response = null;\n\t\tSdResponses responses = new SdResponses();\n\t\thttpPost.setEntity(entity);\n\t\thttpPost.setHeader(\"Accept\", \"application/json\");\n\t\thttpPost.setHeader(\"Content-type\", \"application/json\");\n\t\ttry {\n\t\t\thttpClient = builder.build();\n\t\t\tlong startTime = System.currentTimeMillis();\n\t\t\tresponse = httpClient.execute(httpPost);\n\t\t\tSystem.out.println(\"Request duration: \" + (System.currentTimeMillis() - startTime) + \"ms\");\n\t\t\t// Process the request result.\n\t\t\tSdResHandler.process(response);\n\t\t\tGson gson = new Gson();\n\t\t\tresponses = gson.fromJson(new InputStreamReader(response.getEntity().getContent()), SdResponses.class);\n\t\t} catch (StableDiffusionException e) {\n\t\t\tSystem.err.println(\"Stable-Diffusion request error!\");\n\t\t\tthrow new StableDiffusionException(e.getMessage());\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {", "\t\t\tif (response != null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tif (httpClient != null) {\n\t\t\t\thttpClient.close();\n\t\t\t}\n\t\t}\n\t\treturn responses;\n\t}\n}\n"]}
{"filename": "src/main/java/com/jessetzh/request/Text2Img.java", "chunked_list": ["package com.jessetzh.request;\n\nimport com.google.gson.GsonBuilder;\nimport com.jessetzh.handler.BasicParameterHandler;\nimport com.jessetzh.parameters.Text2ImgParameter;\nimport com.jessetzh.res.SdResponses;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;", "import org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;\n\nimport java.io.IOException;\n\npublic class Text2Img {\n\n\tprivate static final String API_PATH = \"/sdapi/v1/img2img\";\n\n\tpublic static SdResponses generate(Text2ImgParameter parameter) throws IOException {\n\t\tHttpClientBuilder builder = HttpClients.custom();\n\t\tBasicParameterHandler.check(parameter.getBasicParameter(), builder);\n\t\tparameter.getBasicParameter().setApiUrl(parameter.getBasicParameter().getApiUrl() + API_PATH);\n\t\tHttpPost httpPost = new HttpPost(parameter.getBasicParameter().getApiUrl());\n\t\tStringEntity entity = new StringEntity(new GsonBuilder().create().toJson(parameter));\n\t\treturn RequestExecutor.execute(builder, entity, httpPost);\n\t}\n\n}\n", "\tpublic static SdResponses generate(Text2ImgParameter parameter) throws IOException {\n\t\tHttpClientBuilder builder = HttpClients.custom();\n\t\tBasicParameterHandler.check(parameter.getBasicParameter(), builder);\n\t\tparameter.getBasicParameter().setApiUrl(parameter.getBasicParameter().getApiUrl() + API_PATH);\n\t\tHttpPost httpPost = new HttpPost(parameter.getBasicParameter().getApiUrl());\n\t\tStringEntity entity = new StringEntity(new GsonBuilder().create().toJson(parameter));\n\t\treturn RequestExecutor.execute(builder, entity, httpPost);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/jessetzh/request/Img2Img.java", "chunked_list": ["package com.jessetzh.request;\n\nimport com.google.gson.GsonBuilder;\nimport com.jessetzh.handler.BasicParameterHandler;\nimport com.jessetzh.parameters.Img2ImgParameter;\nimport com.jessetzh.res.SdResponses;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;", "import org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;\n\nimport java.io.IOException;\n\npublic class Img2Img {\n\n\tprivate static final String API_PATH = \"/sdapi/v1/img2img\";\n\n\tpublic static SdResponses generate(Img2ImgParameter parameter) throws IOException {\n\t\tHttpClientBuilder builder = HttpClients.custom();\n\t\tBasicParameterHandler.check(parameter.getBasicParameter(), builder);\n\t\tparameter.getBasicParameter().setApiUrl(parameter.getBasicParameter().getApiUrl() + API_PATH);\n\t\tHttpPost httpPost = new HttpPost(parameter.getBasicParameter().getApiUrl());\n\t\tStringEntity entity = new StringEntity(new GsonBuilder().create().toJson(parameter));\n\t\treturn RequestExecutor.execute(builder, entity, httpPost);\n\t}\n\n}\n", "\tpublic static SdResponses generate(Img2ImgParameter parameter) throws IOException {\n\t\tHttpClientBuilder builder = HttpClients.custom();\n\t\tBasicParameterHandler.check(parameter.getBasicParameter(), builder);\n\t\tparameter.getBasicParameter().setApiUrl(parameter.getBasicParameter().getApiUrl() + API_PATH);\n\t\tHttpPost httpPost = new HttpPost(parameter.getBasicParameter().getApiUrl());\n\t\tStringEntity entity = new StringEntity(new GsonBuilder().create().toJson(parameter));\n\t\treturn RequestExecutor.execute(builder, entity, httpPost);\n\t}\n\n}\n"]}
