{"filename": "src/test/java/dev/yanisk/TDDPredict/service/PredictionProcessorServiceTest.java", "chunked_list": ["package dev.yanisk.TDDPredict.service;\n\nimport com.intellij.openapi.project.Project;\nimport dev.yanisk.TDDPredict.bus.TestRunEventPublisherService;\nimport dev.yanisk.TDDPredict.models.*;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\n", "import org.mockito.ArgumentCaptor;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass PredictionProcessorServiceTest {\n\n    Project project;\n\n    TDDPredictStateComponent tddPredictStateComponent;", "\n    TDDPredictStateComponent tddPredictStateComponent;\n\n    PredictionProcessorService predictionProcessorService;\n\n    GitService gitService;\n    private TestRunEventPublisherService testRunEventPublisherService;\n\n    @BeforeEach\n    void setup() {", "    @BeforeEach\n    void setup() {\n        project = mock(Project.class);\n        predictionProcessorService = new PredictionProcessorService(project);\n\n\n        tddPredictStateComponent = mock(TDDPredictStateComponent.class);\n        gitService = mock(GitService.class);\n        testRunEventPublisherService = mock(TestRunEventPublisherService.class);\n", "        testRunEventPublisherService = mock(TestRunEventPublisherService.class);\n\n        when(project.getService(TDDPredictStateComponent.class)).thenReturn(tddPredictStateComponent);\n        when(project.getService(GitService.class)).thenReturn(gitService);\n        when(project.getService(TestRunEventPublisherService.class)).thenReturn(testRunEventPublisherService);\n    }\n\n    @Test\n    void given_test_finished_user_guessed_pass_then_should_record_test_outcome_and_correct_prediction() {\n        //arrange", "    void given_test_finished_user_guessed_pass_then_should_record_test_outcome_and_correct_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.PASS,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_PASS);\n", "        predictionProcessorService.processPrediction(ProcessOutcome.TEST_PASS);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.CORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.PASSED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n\n    @Test\n    void given_test_finished_user_guessed_fail_then_should_record_test_outcome_and_incorrect_prediction() {", "    @Test\n    void given_test_finished_user_guessed_fail_then_should_record_test_outcome_and_incorrect_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.FAIL,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_PASS);", "        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_PASS);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.INCORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.PASSED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n\n    @Test", "\n    @Test\n    void given_test_terminated_user_guessed_pass_then_should_record_test_outcome_and_incorrect_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.PASS,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act", "\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_TERMINATED);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.INCORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.NOT_EXECUTED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n", "    }\n\n    @Test\n    void given_test_terminated_user_guessed_fail_then_should_record_test_outcome_and_incorrect_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.FAIL,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n", "        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_TERMINATED);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.INCORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.NOT_EXECUTED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }", "        assertEquals(TestRunOutcome.NOT_EXECUTED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n\n    @Test\n    void given_test_failed_user_guessed_fail_then_should_record_test_outcome_and_correct_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.FAIL,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);", "        TestRun testRun = new TestRun(null, Guess.FAIL,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.CORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.FAILED, testRunArgumentCaptor.getValue().getTestRunOutcome());", "        assertEquals(Prediction.CORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.FAILED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n\n    @Test\n    void given_test_failed_user_guessed_pass_then_should_record_test_outcome_and_incorrect_prediction() {\n        //arrange\n        ArgumentCaptor<TestRun> testRunArgumentCaptor = ArgumentCaptor.forClass(TestRun.class);\n\n        TestRun testRun = new TestRun(null, Guess.PASS,null,null,null);", "\n        TestRun testRun = new TestRun(null, Guess.PASS,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        //act\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n\n        //assert\n        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.INCORRECT, testRunArgumentCaptor.getValue().getPrediction());", "        verify(testRunEventPublisherService).publishTestRunProcessed(testRunArgumentCaptor.capture());\n        assertEquals(Prediction.INCORRECT, testRunArgumentCaptor.getValue().getPrediction());\n        assertEquals(TestRunOutcome.FAILED, testRunArgumentCaptor.getValue().getTestRunOutcome());\n    }\n\n    @Test\n    void should_add_current_commit_to_test_run() {\n        TestRun testRun = new TestRun(null, null,null,null,null);\n        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n", "        when(tddPredictStateComponent.getLatestTest()).thenReturn(testRun);\n\n        predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n        verify(gitService).addCommitNumberToTestRun(any(TestRun.class));\n    }\n\n}"]}
{"filename": "src/test/java/dev/yanisk/TDDPredict/view/HistoryListTest.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.util.messages.MessageBus;\nimport com.intellij.util.messages.MessageBusConnection;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport org.junit.jupiter.api.Test;\nimport java.util.LinkedList;\n\nimport static org.junit.jupiter.api.Assertions.*;", "\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nclass HistoryListTest {\n\n    @Test\n    void when_there_is_no_test_run_outcome_should_not_throw_exception() {\n        Project project = mock(Project.class);", "    void when_there_is_no_test_run_outcome_should_not_throw_exception() {\n        Project project = mock(Project.class);\n        MessageBus messageBus = mock(MessageBus.class);\n        MessageBusConnection messageBusConnection = mock(MessageBusConnection.class);\n\n        when(project.getMessageBus()).thenReturn(messageBus);\n        when(messageBus.connect()).thenReturn(messageBusConnection);\n\n        HistoryList historyList = new HistoryList(project);\n", "        HistoryList historyList = new HistoryList(project);\n\n        LinkedList<TestRun> testHistory = new LinkedList<>();\n        TestRun testRun = new TestRun();\n        testRun.setDateTime(\"2015-04-14T11:07:00\");\n        testHistory.add(testRun);\n\n\n        assertDoesNotThrow(() -> {\n            historyList.addHistory(testHistory);", "        assertDoesNotThrow(() -> {\n            historyList.addHistory(testHistory);\n        });\n\n    }\n\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/TDDStatsToolWindow.java", "chunked_list": ["package dev.yanisk.TDDPredict;\n\nimport com.intellij.ui.components.JBPanel;\nimport com.intellij.ui.content.Content;\nimport com.intellij.ui.content.ContentFactory;\nimport dev.yanisk.TDDPredict.listeners.TestEventProcessedListener;\nimport dev.yanisk.TDDPredict.util.Constants;\nimport dev.yanisk.TDDPredict.view.CounterLabel;\nimport dev.yanisk.TDDPredict.view.HistoryList;\nimport dev.yanisk.TDDPredict.view.MainTddPanel;", "import dev.yanisk.TDDPredict.view.HistoryList;\nimport dev.yanisk.TDDPredict.view.MainTddPanel;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.wm.ToolWindow;\nimport com.intellij.openapi.wm.ToolWindowFactory;\nimport org.jetbrains.annotations.NotNull;\n\npublic class TDDStatsToolWindow implements ToolWindowFactory {\n\n    private Project project;\n\n    @Override", "    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {\n        this.project = project;\n        generateUserData();\n\n        TDDPredictToolWindowContent tddPredictToolWindowContent = new TDDPredictToolWindowContent();\n        Content content = ContentFactory.getInstance().createContent(tddPredictToolWindowContent.getContentPanel(project), \"\", false);\n\n        toolWindow.getContentManager().addContent(content);\n        project.getService(TestEventProcessedListener.class);\n    }\n\n    private static class TDDPredictToolWindowContent {", "        public JBPanel getContentPanel(Project project) {\n            return new MainTddPanel(project);\n\n        }\n    }\n\n\n    private void generateUserData() {\n        project.putUserData(Constants.TEST_PASS_COUNTER, new CounterLabel());\n        project.putUserData(Constants.TEST_FAIL_COUNTER, new CounterLabel());\n        project.putUserData(Constants.PREDICT_CORRECT_COUNTER, new CounterLabel());\n        project.putUserData(Constants.PREDICT_INCORRECT_COUNTER, new CounterLabel());\n        project.putUserData(Constants.TEST_TERMINATION_COUNTER, new CounterLabel());\n        project.putUserData(Constants.HISTORY_PANEL, new HistoryList(project));\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/listeners/ProcessListener.java", "chunked_list": ["package dev.yanisk.TDDPredict.listeners;\n\nimport dev.yanisk.TDDPredict.models.ProcessOutcome;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport dev.yanisk.TDDPredict.service.PredictionProcessorService;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport com.intellij.execution.ExecutionListener;\nimport com.intellij.execution.process.ProcessHandler;\nimport com.intellij.execution.runners.ExecutionEnvironment;\nimport com.intellij.openapi.project.Project;", "import com.intellij.execution.runners.ExecutionEnvironment;\nimport com.intellij.openapi.project.Project;\nimport org.jetbrains.annotations.NotNull;\n\npublic class ProcessListener implements ExecutionListener {\n    private final Project project;\n\n    public ProcessListener(Project project) {\n        this.project = project;\n    }\n\n    @Override", "    public void processNotStarted(@NotNull String executorId, @NotNull ExecutionEnvironment env, Throwable cause) {\n        TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n\n        if (tddPredictStateComponent.getTestHistory().size() > 0) {\n            TestRun lastTestRun = tddPredictStateComponent.getLatestTest();\n            if (lastTestRun.getPrediction() == null) {\n                PredictionProcessorService predictionProcessorService = project.getService(PredictionProcessorService.class);\n                predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n            }\n        }\n\n    }\n\n//    @Override", "//    public void processTerminated(@NotNull RunProfile runProfile, @NotNull ProcessHandler handler) {\n//        if (handler.getExitCode() != null && handler.getExitCode() > 0) {\n//\n//            TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n//\n//            if(tddPredictStateComponent.getTestHistory().size() > 0) {\n//                PredictionProcessorService predictionProcessorService = project.getService(PredictionProcessorService.class);\n//                predictionProcessorService.processPrediction(ProcessOutcome.TEST_TERMINATED);\n//            }\n//        }\n//    }\n\n    /*\n    Having problems on determining when a test is terminated. So saying it just fails.\n\n    On a failed test the below will be called and I have not found a way to identify if test has passed\n    as the ProcessHandler or RunProfile has no context of test.\n\n     */\n    @Override", "    public void processTerminated(@NotNull String executorId,\n                                  @NotNull ExecutionEnvironment env,\n                                  @NotNull ProcessHandler handler,\n                                  int exitCode) {\n        if (exitCode > 0) {\n\n            TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n\n            if (tddPredictStateComponent.getTestHistory().size() > 0) {\n                PredictionProcessorService predictionProcessorService = project.getService(PredictionProcessorService.class);\n                predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n            }\n        }\n    }\n\n}", "            if (tddPredictStateComponent.getTestHistory().size() > 0) {\n                PredictionProcessorService predictionProcessorService = project.getService(PredictionProcessorService.class);\n                predictionProcessorService.processPrediction(ProcessOutcome.TEST_FAILED);\n            }\n        }\n    }\n\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/listeners/GitListener.java", "chunked_list": ["package dev.yanisk.TDDPredict.listeners;\n\nimport dev.yanisk.TDDPredict.service.GitService;\nimport com.intellij.openapi.project.Project;\nimport git4idea.repo.GitRepository;\nimport git4idea.repo.GitRepositoryChangeListener;\nimport org.jetbrains.annotations.NotNull;\npublic class GitListener implements GitRepositoryChangeListener {\n\n    private final Project project;\n\n    public GitListener(Project project) {\n        this.project = project;\n    }\n\n    @Override", "    public void repositoryChanged(@NotNull GitRepository repository) {\n        project.getService(GitService.class).setCurrentCommit(repository.getCurrentRevision());\n        project.getService(GitService.class).setGitRepository(repository);\n//        Collection<GitRemote> remotes = repository.getInfo().getRemotes();\n//\n//        remotes.forEach(remote -> {\n//            String remoteUrl = remote.getFirstUrl().replaceFirst(\"\\\\.git\",\"/\");\n//            project.getService(GitService.class).setCurrentCommit(remoteUrl + repository.getCurrentRevision());\n//        });\n\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/listeners/TestEventProcessedListener.java", "chunked_list": ["package dev.yanisk.TDDPredict.listeners;\n\nimport com.intellij.openapi.components.Service;\nimport com.intellij.openapi.project.Project;\nimport dev.yanisk.TDDPredict.bus.TestRunEventBus;\nimport dev.yanisk.TDDPredict.models.Prediction;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport dev.yanisk.TDDPredict.models.TestRunOutcome;\nimport dev.yanisk.TDDPredict.util.Constants;\n", "import dev.yanisk.TDDPredict.util.Constants;\n\n@Service\npublic final class TestEventProcessedListener implements TestRunEventBus {\n\n    private final Project project;\n\n    public TestEventProcessedListener(Project project) {\n        this.project = project;\n        project.getMessageBus().connect().subscribe(TestRunEventBus.TEST_RUN_EVENT_BUS, this);\n    }\n\n    @Override", "    public void testRunProcessed(TestRun testRun) {\n        incrementPredictionCounter(testRun.getPrediction());\n        incrementTestRunOutcomeCounter(testRun.getTestRunOutcome());\n    }\n\n\n    private void incrementPredictionCounter(Prediction prediction) {\n        if(prediction == Prediction.CORRECT) {\n            project.getUserData(Constants.PREDICT_CORRECT_COUNTER).incrementCount();\n        } else {\n            project.getUserData(Constants.PREDICT_INCORRECT_COUNTER).incrementCount();\n        }\n    }\n\n    private void incrementTestRunOutcomeCounter(TestRunOutcome testRunOutcome) {", "        if(testRunOutcome == TestRunOutcome.PASSED) {\n            project.getUserData(Constants.TEST_PASS_COUNTER).incrementCount();\n        } else if(testRunOutcome == TestRunOutcome.FAILED) {\n            project.getUserData(Constants.TEST_FAIL_COUNTER).incrementCount();\n        } else {\n            project.getUserData(Constants.TEST_TERMINATION_COUNTER).incrementCount();\n        }\n    }\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/listeners/TestListener.java", "chunked_list": ["package dev.yanisk.TDDPredict.listeners;\n\nimport dev.yanisk.TDDPredict.models.ProcessOutcome;\nimport dev.yanisk.TDDPredict.service.PredictionProcessorService;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport com.intellij.execution.testframework.sm.runner.SMTRunnerEventsListener;\nimport com.intellij.execution.testframework.sm.runner.SMTestProxy;\nimport com.intellij.openapi.project.Project;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;", "import org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class TestListener implements SMTRunnerEventsListener {\n    private final Project project;\n\n    public TestListener(Project project) {\n        this.project = project;\n    }\n\n    @Override", "    public void onTestingFinished(SMTestProxy.@NotNull SMRootTestProxy testsRoot) {\n        TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n\n        if(tddPredictStateComponent.getTestHistory().size() > 0) {\n            ProcessOutcome processOutcome = testsRoot.isPassed() ? ProcessOutcome.TEST_PASS : ProcessOutcome.TEST_FAILED;\n\n            PredictionProcessorService predictionProcessorService = project.getService(PredictionProcessorService.class);\n            predictionProcessorService.processPrediction(processOutcome);\n        }\n    }\n\n    @Override", "    public void onTestingStarted(SMTestProxy.@NotNull SMRootTestProxy testsRoot) {\n\n    }\n\n    @Override\n    public void onTestsCountInSuite(int count) {\n\n    }\n\n    @Override\n    public void onTestStarted(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override", "    public void onTestStarted(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override\n    public void onTestFinished(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override\n    public void onTestFailed(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override", "    public void onTestFailed(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override\n    public void onTestIgnored(@NotNull SMTestProxy test) {\n\n    }\n\n    @Override\n    public void onSuiteFinished(@NotNull SMTestProxy suite) {\n\n    }\n\n    @Override", "    public void onSuiteFinished(@NotNull SMTestProxy suite) {\n\n    }\n\n    @Override\n    public void onSuiteStarted(@NotNull SMTestProxy suite) {\n\n    }\n\n    @Override\n    public void onCustomProgressTestsCategory(@Nullable String categoryName, int testCount) {\n\n    }\n\n    @Override", "    public void onCustomProgressTestsCategory(@Nullable String categoryName, int testCount) {\n\n    }\n\n    @Override\n    public void onCustomProgressTestStarted() {\n\n    }\n\n    @Override\n    public void onCustomProgressTestFailed() {\n\n    }\n\n    @Override", "    public void onCustomProgressTestFailed() {\n\n    }\n\n    @Override\n    public void onCustomProgressTestFinished() {\n\n    }\n\n    @Override\n    public void onSuiteTreeNodeAdded(SMTestProxy testProxy) {\n\n    }\n\n    @Override", "    public void onSuiteTreeNodeAdded(SMTestProxy testProxy) {\n\n    }\n\n    @Override\n    public void onSuiteTreeStarted(SMTestProxy suite) {\n\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/actions/PredictFailAction.java", "chunked_list": ["package dev.yanisk.TDDPredict.actions;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport org.jetbrains.annotations.NotNull;\n\nimport static dev.yanisk.TDDPredict.util.PredictionHelper.greenPredictCalled;\nimport static dev.yanisk.TDDPredict.util.PredictionHelper.redPredictCalled;\n\npublic class PredictFailAction extends AnAction {\n    @Override", "\npublic class PredictFailAction extends AnAction {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        redPredictCalled(e.getProject());\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/actions/PredictPassAction.java", "chunked_list": ["package dev.yanisk.TDDPredict.actions;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport org.jetbrains.annotations.NotNull;\n\nimport static dev.yanisk.TDDPredict.util.PredictionHelper.greenPredictCalled;\n\npublic class PredictPassAction extends AnAction {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        greenPredictCalled(e.getProject());\n    }\n}\n", "public class PredictPassAction extends AnAction {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        greenPredictCalled(e.getProject());\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/util/ButtonColors.java", "chunked_list": ["package dev.yanisk.TDDPredict.util;\n\nimport java.awt.*;\n\npublic class ButtonColors {\n\n    public static Color TEST_PASS_COLOR = new Color(58, 141, 41, 208);\n    public static Color TEST_FAIL_COLOR = new Color(182, 62, 62, 208);\n    public static Color TEST_DID_NOT_RUN_COLOR = new Color(215, 200, 75, 208);\n}\n", "    public static Color TEST_DID_NOT_RUN_COLOR = new Color(215, 200, 75, 208);\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/util/Constants.java", "chunked_list": ["package dev.yanisk.TDDPredict.util;\n\nimport dev.yanisk.TDDPredict.view.CounterLabel;\nimport dev.yanisk.TDDPredict.view.HistoryList;\nimport com.intellij.openapi.util.Key;\n\npublic class Constants {\n    public static final Key<CounterLabel> TEST_PASS_COUNTER = Key.create(\"TestPassCounter\");\n    public static final Key<CounterLabel> TEST_FAIL_COUNTER = Key.create(\"TestFailCounter\");\n    public static final Key<CounterLabel> PREDICT_CORRECT_COUNTER = Key.create(\"PredictCorrectCounter\");\n    public static final Key<CounterLabel> PREDICT_INCORRECT_COUNTER = Key.create(\"PredictIncorrectCounter\");", "    public static final Key<CounterLabel> TEST_FAIL_COUNTER = Key.create(\"TestFailCounter\");\n    public static final Key<CounterLabel> PREDICT_CORRECT_COUNTER = Key.create(\"PredictCorrectCounter\");\n    public static final Key<CounterLabel> PREDICT_INCORRECT_COUNTER = Key.create(\"PredictIncorrectCounter\");\n    public static final Key<HistoryList> HISTORY_PANEL = Key.create(\"HistoryPanel\");\n    public static final Key<CounterLabel> TEST_TERMINATION_COUNTER = Key.create(\"HistoryPanel\");\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/util/PredictionHelper.java", "chunked_list": ["package dev.yanisk.TDDPredict.util;\n\nimport com.intellij.openapi.components.ServiceManager;\nimport dev.yanisk.TDDPredict.models.Guess;\nimport dev.yanisk.TDDPredict.state.SettingsStateComponent;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport dev.yanisk.TDDPredict.view.Dialog;\nimport com.intellij.execution.ProgramRunnerUtil;\nimport com.intellij.execution.RunManager;\nimport com.intellij.execution.RunnerAndConfigurationSettings;", "import com.intellij.execution.RunManager;\nimport com.intellij.execution.RunnerAndConfigurationSettings;\nimport com.intellij.execution.executors.DefaultRunExecutor;\nimport com.intellij.openapi.project.Project;\n\npublic class PredictionHelper {\n\n    public static void greenPredictCalled(Project project) {\n        SettingsStateComponent settingsStateComponent = project.getService(SettingsStateComponent.class);\n        if(settingsStateComponent.getState().predictionPopupDisabled) {\n            predictPass(project);\n        } else {\n            Dialog dialog = new Dialog(\"Predicting PASS\",\"Predicting tests will PASS!\");", "        if(settingsStateComponent.getState().predictionPopupDisabled) {\n            predictPass(project);\n        } else {\n            Dialog dialog = new Dialog(\"Predicting PASS\",\"Predicting tests will PASS!\");\n            if(dialog.showAndGet()) {\n                predictPass(project);\n            }\n        }\n    }\n\n    public static void redPredictCalled(Project project) {\n        SettingsStateComponent settingsStateComponent = project.getService(SettingsStateComponent.class);", "    public static void redPredictCalled(Project project) {\n        SettingsStateComponent settingsStateComponent = project.getService(SettingsStateComponent.class);\n        if(settingsStateComponent.getState().predictionPopupDisabled) {\n            predictFail(project);\n        } else {\n            Dialog dialog = new Dialog(\"Predicting FAIL\",\"Predicting tests will FAIL!\");\n            if(dialog.showAndGet()) {\n                predictFail(project);\n            }\n        }\n    }\n", "//    public static void terminatePredictCalled(Project project) {\n//        Dialog dialog = new Dialog(\"Predicting BREAK\",\"Predicting app BREAKS! and no tests are run!\");\n//        if(dialog.showAndGet()) {\n//            persistGuessToStateStorage(project, Guess.NOT_EXECUTED);\n//            executeSelectedConfiguration(project);\n//        }\n//    }\n\n\n\n    private static void predictPass(Project project) {\n        persistGuessToStateStorage(project, Guess.PASS);\n        executeSelectedConfiguration(project);\n    }\n\n    private static void predictFail(Project project) {\n        persistGuessToStateStorage(project, Guess.FAIL);\n        executeSelectedConfiguration(project);\n    }\n    private static void persistGuessToStateStorage(Project project, Guess guess) {\n        TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n        tddPredictStateComponent.addGuess(guess);\n    }\n\n    private static void executeSelectedConfiguration(Project project) {\n        ProgramRunnerUtil.executeConfiguration(getConfiguration(project), DefaultRunExecutor.getRunExecutorInstance());\n    }\n\n    private static RunnerAndConfigurationSettings getConfiguration(Project project) {\n        RunManager runManager = RunManager.getInstance(project);\n\n        RunnerAndConfigurationSettings selectedConfiguration = runManager.getSelectedConfiguration();\n\n        return selectedConfiguration;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/models/ProcessOutcome.java", "chunked_list": ["package dev.yanisk.TDDPredict.models;\n\npublic enum ProcessOutcome {\n    TEST_FAILED, TEST_TERMINATED, TEST_PASS\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/models/Guess.java", "chunked_list": ["package dev.yanisk.TDDPredict.models;\n\npublic enum Guess {\n    PASS, NOT_EXECUTED, FAIL\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/models/TestRun.java", "chunked_list": ["package dev.yanisk.TDDPredict.models;\n\nimport com.intellij.util.xmlb.annotations.Attribute;\nimport com.intellij.util.xmlb.annotations.Tag;\n\n@Tag(\"testRun\")\npublic class TestRun {\n    @Attribute(\"testRunOutcome\")\n    private TestRunOutcome testRunOutcome;\n\n    @Attribute(\"guess\")\n    private Guess guess;\n\n    @Attribute(\"dateTime\")\n    private String dateTime;\n\n    @Attribute(\"commit\")\n    private String commit;\n\n    @Attribute(\"prediction\")\n    private Prediction prediction;\n\n    public TestRun() {\n    }\n\n    public TestRun(TestRunOutcome testRunOutcome, Guess guess, String dateTime, String commit, Prediction prediction) {\n        this.testRunOutcome = testRunOutcome;\n        this.guess = guess;\n        this.dateTime = dateTime;\n        this.commit = commit;\n        this.prediction = prediction;\n    }\n", "    public void setOutcome(TestRunOutcome testRunOutcome) {\n        this.testRunOutcome = testRunOutcome;\n        derivePrediction(testRunOutcome);\n    }\n\n    private void derivePrediction(TestRunOutcome testRunOutcome) {\n        switch (testRunOutcome){\n            case PASSED:\n                if (guess == Guess.PASS) {\n                    setPrediction(Prediction.CORRECT);\n                }\n                break;\n            case FAILED:", "                if (guess == Guess.PASS) {\n                    setPrediction(Prediction.CORRECT);\n                }\n                break;\n            case FAILED:\n                if (guess == Guess.FAIL) {\n                    setPrediction(Prediction.CORRECT);\n                }\n                break;\n            case NOT_EXECUTED:\n                if (guess == Guess.NOT_EXECUTED) {\n                    setPrediction(Prediction.CORRECT);\n                }\n                break;\n            default:\n                setPrediction(Prediction.INCORRECT);\n        }\n    }\n", "                if (guess == Guess.NOT_EXECUTED) {\n                    setPrediction(Prediction.CORRECT);\n                }\n                break;\n            default:\n                setPrediction(Prediction.INCORRECT);\n        }\n    }\n\n    public TestRunOutcome getTestRunOutcome() {\n        return testRunOutcome;\n    }\n", "    public TestRunOutcome getTestRunOutcome() {\n        return testRunOutcome;\n    }\n\n    public void setTestRunOutcome(TestRunOutcome testRunOutcome) {\n        this.testRunOutcome = testRunOutcome;\n    }\n\n    public Guess getGuess() {\n        return guess;\n    }\n", "    public Guess getGuess() {\n        return guess;\n    }\n\n    public void setGuess(Guess guess) {\n        this.guess = guess;\n    }\n\n    public String getDateTime() {\n        return dateTime;\n    }\n", "    public String getDateTime() {\n        return dateTime;\n    }\n\n    public void setDateTime(String dateTime) {\n        this.dateTime = dateTime;\n    }\n\n    public Prediction getPrediction() {\n        return prediction;\n    }\n", "    public Prediction getPrediction() {\n        return prediction;\n    }\n\n    public void setPrediction(Prediction prediction) {\n        this.prediction = prediction;\n    }\n\n    @Override\n    public String toString() {\n        return \"TestRun{\" +\n                \"testRunOutcome=\" + testRunOutcome +\n                \", guess=\" + guess +\n                \", dateTime='\" + dateTime + '\\'' +\n                \", prediction=\" + prediction +\n                '}';\n    }\n\n", "    public String toString() {\n        return \"TestRun{\" +\n                \"testRunOutcome=\" + testRunOutcome +\n                \", guess=\" + guess +\n                \", dateTime='\" + dateTime + '\\'' +\n                \", prediction=\" + prediction +\n                '}';\n    }\n\n\n    public void setCommit(String commit) {\n        this.commit = commit;\n    }\n", "    public void setCommit(String commit) {\n        this.commit = commit;\n    }\n\n    public String getCommit() {\n        return commit;\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/models/Prediction.java", "chunked_list": ["package dev.yanisk.TDDPredict.models;\n\npublic enum Prediction {\n    CORRECT, INCORRECT\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/models/TestRunOutcome.java", "chunked_list": ["package dev.yanisk.TDDPredict.models;\n\npublic enum TestRunOutcome {\n    PASSED, FAILED, NOT_EXECUTED\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/state/TDDPredictStateComponent.java", "chunked_list": ["package dev.yanisk.TDDPredict.state;\n\nimport dev.yanisk.TDDPredict.models.Guess;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.openapi.components.StoragePathMacros;\nimport com.intellij.openapi.project.Project;\nimport org.jetbrains.annotations.NotNull;", "import com.intellij.openapi.project.Project;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.time.LocalDateTime;\nimport java.util.LinkedList;\n\n@State(name = \"TDDPredictState\", storages = {@Storage(StoragePathMacros.WORKSPACE_FILE)})\npublic class TDDPredictStateComponent implements PersistentStateComponent<TDDPredictState> {\n    private TDDPredictState state;\n    public TDDPredictStateComponent(Project project) {\n        state = new TDDPredictState();\n    }\n\n    @Nullable\n    @Override", "public class TDDPredictStateComponent implements PersistentStateComponent<TDDPredictState> {\n    private TDDPredictState state;\n    public TDDPredictStateComponent(Project project) {\n        state = new TDDPredictState();\n    }\n\n    @Nullable\n    @Override\n    public TDDPredictState getState() {\n        return state;\n    }\n\n    @Override", "    public TDDPredictState getState() {\n        return state;\n    }\n\n    @Override\n    public void loadState(@NotNull TDDPredictState state) {\n        this.state = state;\n    }\n\n    public void addGuess(Guess guess) {\n        TestRun testRun = new TestRun(null,guess,LocalDateTime.now().toString(),null, null);\n        state.testRunHistory.addFirst(testRun);\n    }\n\n    public LinkedList<TestRun> getTestHistory() {\n        return new LinkedList<>(state.testRunHistory);\n    }\n", "    public void addGuess(Guess guess) {\n        TestRun testRun = new TestRun(null,guess,LocalDateTime.now().toString(),null, null);\n        state.testRunHistory.addFirst(testRun);\n    }\n\n    public LinkedList<TestRun> getTestHistory() {\n        return new LinkedList<>(state.testRunHistory);\n    }\n\n    public void clearTestHistory() {\n        state.testRunHistory.clear();\n    }\n\n\n", "    public void clearTestHistory() {\n        state.testRunHistory.clear();\n    }\n\n\n\n    public TestRun getLatestTest() {\n        return state.testRunHistory.getFirst();\n    }\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/state/SettingsState.java", "chunked_list": ["package dev.yanisk.TDDPredict.state;\n\nimport com.intellij.util.xmlb.annotations.Tag;\n\npublic class SettingsState {\n    @Tag(\"predictionPopupDisabled\")\n    public boolean predictionPopupDisabled;\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/state/SettingsStateComponent.java", "chunked_list": ["package dev.yanisk.TDDPredict.state;\n\nimport com.intellij.openapi.components.*;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\n\n@State(name = \"SettingsState\", storages = {@Storage(StoragePathMacros.WORKSPACE_FILE)})\npublic final class SettingsStateComponent implements PersistentStateComponent<SettingsState> {\n\n    private SettingsState state;\n    public SettingsStateComponent() {\n        state = new SettingsState();\n    }\n\n    @Nullable\n    @Override", "public final class SettingsStateComponent implements PersistentStateComponent<SettingsState> {\n\n    private SettingsState state;\n    public SettingsStateComponent() {\n        state = new SettingsState();\n    }\n\n    @Nullable\n    @Override\n    public SettingsState getState() {\n        return state;\n    }\n\n    @Override", "    public SettingsState getState() {\n        return state;\n    }\n\n    @Override\n    public void loadState(@NotNull SettingsState state) {\n        this.state = state;\n    }\n\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/state/TDDPredictState.java", "chunked_list": ["package dev.yanisk.TDDPredict.state;\n\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport com.intellij.util.xmlb.annotations.Tag;\nimport com.intellij.util.xmlb.annotations.XCollection;\n\nimport java.util.LinkedList;\n\npublic class TDDPredictState {\n\n    @Tag(\"testRunHistory\")\n    @XCollection\n    public LinkedList<TestRun> testRunHistory = new LinkedList<>();\n}\n\n", "public class TDDPredictState {\n\n    @Tag(\"testRunHistory\")\n    @XCollection\n    public LinkedList<TestRun> testRunHistory = new LinkedList<>();\n}\n\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/service/PredictionProcessorService.java", "chunked_list": ["package dev.yanisk.TDDPredict.service;\n\nimport com.intellij.openapi.components.Service;\nimport dev.yanisk.TDDPredict.bus.TestRunEventPublisherService;\nimport dev.yanisk.TDDPredict.models.*;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport com.intellij.openapi.project.Project;\n\n@Service(Service.Level.PROJECT)\npublic final class PredictionProcessorService {\n\n    private final Project project;\n\n    public PredictionProcessorService(Project project) {\n        this.project = project;\n    }\n", "@Service(Service.Level.PROJECT)\npublic final class PredictionProcessorService {\n\n    private final Project project;\n\n    public PredictionProcessorService(Project project) {\n        this.project = project;\n    }\n\n    public void processPrediction(ProcessOutcome processOutcome) {\n        TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n        TestRun latestTest = tddPredictStateComponent.getLatestTest();\n", "    public void processPrediction(ProcessOutcome processOutcome) {\n        TDDPredictStateComponent tddPredictStateComponent = project.getService(TDDPredictStateComponent.class);\n        TestRun latestTest = tddPredictStateComponent.getLatestTest();\n\n        if(latestTest.getTestRunOutcome() != null) {\n            return;\n        }\n\n        latestTest.setPrediction(Prediction.INCORRECT);\n\n        switch (processOutcome) {\n            case TEST_PASS:\n                latestTest.setTestRunOutcome(TestRunOutcome.PASSED);", "                if(latestTest.getGuess() == Guess.PASS) {\n                    latestTest.setPrediction(Prediction.CORRECT);\n                }\n                break;\n\n            case TEST_FAILED:\n                latestTest.setTestRunOutcome(TestRunOutcome.FAILED);\n                if(latestTest.getGuess() == Guess.FAIL) {\n                    latestTest.setPrediction(Prediction.CORRECT);\n                }\n                break;\n\n            case TEST_TERMINATED:\n                latestTest.setTestRunOutcome(TestRunOutcome.NOT_EXECUTED);\n                break;\n\n        }\n\n        project.getService(GitService.class).addCommitNumberToTestRun(latestTest);\n        project.getService(TestRunEventPublisherService.class).publishTestRunProcessed(latestTest);\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/service/GitService.java", "chunked_list": ["package dev.yanisk.TDDPredict.service;\n\nimport com.intellij.openapi.components.Service;\nimport com.intellij.openapi.project.Project;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport git4idea.repo.GitRepository;\n\n@Service(Service.Level.PROJECT)\npublic final class GitService {\n\n    private boolean continuousCommitEnabled;\n    private String currentCommit;\n\n    private GitRepository gitRepository;\n\n    public GitService(Project project) {\n    }\n", "public final class GitService {\n\n    private boolean continuousCommitEnabled;\n    private String currentCommit;\n\n    private GitRepository gitRepository;\n\n    public GitService(Project project) {\n    }\n\n    public void setCurrentCommit(String currentCommit) {\n        this.currentCommit = currentCommit;\n    }\n", "    public void setCurrentCommit(String currentCommit) {\n        this.currentCommit = currentCommit;\n    }\n\n    public String getCurrentCommit() {\n        return currentCommit;\n    }\n\n    public void addCommitNumberToTestRun(TestRun testRun) {\n        testRun.setCommit(getCurrentCommit());\n    }\n", "    public void addCommitNumberToTestRun(TestRun testRun) {\n        testRun.setCommit(getCurrentCommit());\n    }\n\n    public GitRepository getGitRepository() {\n        return gitRepository;\n    }\n\n    public void setGitRepository(GitRepository gitRepository) {\n        this.gitRepository = gitRepository;\n    }\n}\n", "    public void setGitRepository(GitRepository gitRepository) {\n        this.gitRepository = gitRepository;\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/Dialog.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.openapi.ui.DialogWrapper;\nimport com.intellij.ui.components.JBLabel;\nimport com.intellij.ui.components.JBPanel;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.awt.*;\n\npublic class Dialog extends DialogWrapper {\n\n\n    private final String message;\n\n    public Dialog(String title, String message) {\n        super(true); // use current window as parent\n        this.message = message;\n        setTitle(title);\n        init();\n    }\n\n\n    @Override\n    protected @Nullable JBPanel createCenterPanel() {\n        JBPanel dialogPanel = new JBPanel(new BorderLayout());\n\n        JBLabel label = new JBLabel(message);\n        dialogPanel.add(label, BorderLayout.CENTER);\n\n        return dialogPanel;\n    }\n}\n", "\npublic class Dialog extends DialogWrapper {\n\n\n    private final String message;\n\n    public Dialog(String title, String message) {\n        super(true); // use current window as parent\n        this.message = message;\n        setTitle(title);\n        init();\n    }\n\n\n    @Override\n    protected @Nullable JBPanel createCenterPanel() {\n        JBPanel dialogPanel = new JBPanel(new BorderLayout());\n\n        JBLabel label = new JBLabel(message);\n        dialogPanel.add(label, BorderLayout.CENTER);\n\n        return dialogPanel;\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/MainTddPanel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.icons.AllIcons;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class MainTddPanel extends JBPanel {\n    private final Project project;\n\n    public MainTddPanel(Project project) {\n        this.project = project;\n\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n\n        add(createAlignedPanel(new ActionPanel(project)));\n        add(createAlignedPanel(new SummaryPanel(project)));\n        add(createAlignedPanel(createHistoryScrollPane()));\n        add(createAlignedPanel(createSettingsButton()));\n    }\n\n    private JPanel createAlignedPanel(JComponent component) {\n        return new JPanel() {\n            {\n                setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n                add(component);\n                setAlignmentY(TOP_ALIGNMENT);\n            }\n\n            @Override", "\npublic class MainTddPanel extends JBPanel {\n    private final Project project;\n\n    public MainTddPanel(Project project) {\n        this.project = project;\n\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n\n        add(createAlignedPanel(new ActionPanel(project)));\n        add(createAlignedPanel(new SummaryPanel(project)));\n        add(createAlignedPanel(createHistoryScrollPane()));\n        add(createAlignedPanel(createSettingsButton()));\n    }\n\n    private JPanel createAlignedPanel(JComponent component) {\n        return new JPanel() {\n            {\n                setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n                add(component);\n                setAlignmentY(TOP_ALIGNMENT);\n            }\n\n            @Override", "            public Dimension getMaximumSize() {\n                Dimension max = super.getMaximumSize();\n                max.height = getPreferredSize().height;\n                return max;\n            }\n        };\n    }\n\n\n\n\n    private JButton createSettingsButton() {\n        JButton settingsButton = new JButton(\"Settings\", AllIcons.General.Settings);\n        settingsButton.addActionListener(e -> {\n            SettingsDialog settingsDialog = new SettingsDialog(project);\n            settingsDialog.show();\n        });\n\n        settingsButton.setAlignmentX(CENTER_ALIGNMENT);\n\n        return settingsButton;\n    }\n\n\n    private JBPanel createHistoryScrollPane() {\n\n\n\n        // Wrap the historyScrollPane in a custom JPanel to control the width and height\n        ScrollableHistoryList wrapper = new ScrollableHistoryList(project);\n\n        // Set the maximum height of the wrapper panel\n\n\n\n        return wrapper;\n    }\n\n\n\n\n\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/Circle.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.ui.components.JBPanel;\n\nimport java.awt.*;\n\npublic class Circle extends JBPanel {\n\n    private final Color color;\n    private final int circleSize;\n\n    public Circle(Color color, int circleSize, String tooltip) {\n        this.color = color;\n        this.circleSize = circleSize;\n        this.setPreferredSize(new Dimension(circleSize, circleSize));\n        this.setToolTipText(tooltip);\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        // Cast the Graphics object to Graphics2D\n        Graphics2D g2d = (Graphics2D) g;\n\n        // Enable anti-aliasing\n        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n        g2d.setColor(color);\n        g2d.fillOval(0, 0, circleSize, circleSize);\n\n        // Dispose the Graphics2D object to release system resources\n        g2d.dispose();\n    }\n\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/PredictionStatisticsPanel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.ui.components.JBLabel;\nimport dev.yanisk.TDDPredict.models.Prediction;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport dev.yanisk.TDDPredict.util.Constants;\nimport com.intellij.icons.AllIcons;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\n", "import com.intellij.ui.components.JBPanel;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class PredictionStatisticsPanel extends JBPanel {\n\n    private final Project project;\n    private CounterLabel incorrectGuessCounterLabel;\n    private CounterLabel correctGuessCounterLabel;\n\n    public PredictionStatisticsPanel(Project project) {\n        this.project = project;\n        loadCounterLabels();\n        loadCounterData();\n\n        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n\n        createCorrectPredictionsPanel();\n        createIncorrectPredictionsPanel();\n    }\n\n    private void createIncorrectPredictionsPanel() {\n        JBPanel incorrectPredictionsPanel = new JBPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n        JBLabel incorrectPredictions = new JBLabel(AllIcons.RunConfigurations.TestFailed);\n        incorrectPredictions.setToolTipText(\"Incorrect Predictions\");\n        incorrectPredictionsPanel.add(incorrectPredictions);\n        incorrectPredictionsPanel.add(incorrectGuessCounterLabel);\n        add(incorrectPredictionsPanel);\n    }\n\n    private void createCorrectPredictionsPanel() {\n        JBPanel correctPredictionsPanel = new JBPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n        JBLabel correctPredictions = new JBLabel(AllIcons.RunConfigurations.TestPassed);\n        correctPredictions.setToolTipText(\"Correct Predictions\");\n        correctPredictionsPanel.add(correctPredictions);\n        correctPredictionsPanel.add(correctGuessCounterLabel);\n        add(correctPredictionsPanel);\n    }\n\n    private void loadCounterLabels() {\n        correctGuessCounterLabel = project.getUserData(Constants.PREDICT_CORRECT_COUNTER);\n        incorrectGuessCounterLabel = project.getUserData(Constants.PREDICT_INCORRECT_COUNTER);\n    }\n\n    private void loadCounterData() {\n        incorrectGuessCounterLabel.setCount(calculateGuesses(Prediction.INCORRECT));\n        correctGuessCounterLabel.setCount(calculateGuesses(Prediction.CORRECT));\n    }\n\n    private long calculateGuesses(Prediction correct) {\n        return project.getService(TDDPredictStateComponent.class).getTestHistory()\n                .stream()\n                .filter(testRun -> testRun.getPrediction() == correct)\n                .count();\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/CounterLabel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport javax.swing.*;\n\npublic class CounterLabel extends JLabel {\n    private long count;\n\n    public CounterLabel() {\n\n    }\n\n", "    public void incrementCount() {\n        count++;\n        this.setText(count);\n    }\n\n    public void setCount(long count) {\n        this.count = count;\n        setText(count);\n    }\n\n    private void setText(long count) {\n        this.setText(String.valueOf(count));\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/SettingsDialog.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.ui.components.JBCheckBox;\nimport com.intellij.ui.components.JBPanel;\nimport dev.yanisk.TDDPredict.state.SettingsStateComponent;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport dev.yanisk.TDDPredict.util.Constants;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.DialogWrapper;\nimport org.jetbrains.annotations.Nullable;", "import com.intellij.openapi.ui.DialogWrapper;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionListener;\n\npublic class SettingsDialog extends DialogWrapper {\n    private final Project project;\n\n    public SettingsDialog(Project project) {\n        super(true);\n        this.setTitle(\"TDD Predict Settings\");\n        this.project = project;\n        init();\n    }\n\n\n    @Override\n    protected @Nullable JComponent createCenterPanel() {\n        JBPanel dialogPanel = new JBPanel(new BorderLayout());\n\n        SettingsStateComponent settingsStateComponent = project.getService(SettingsStateComponent.class);\n\n        JBCheckBox gitCheckbox = new JBCheckBox();\n        gitCheckbox.setText(\"Disable Prediction Popup\");\n        gitCheckbox.setSelected(settingsStateComponent.getState().predictionPopupDisabled);\n\n        gitCheckbox.addActionListener(e -> {", "            if(gitCheckbox.isSelected()) {\n                settingsStateComponent.getState().predictionPopupDisabled = true;\n            } else {\n                settingsStateComponent.getState().predictionPopupDisabled = false;\n            }\n        });\n\n        dialogPanel.add(gitCheckbox, BorderLayout.NORTH);\n        dialogPanel.add(createDeleteDataButton(), BorderLayout.CENTER);\n\n\n\n        return dialogPanel;\n    }\n\n    private JBPanel createDeleteDataButton() {\n        JBPanel buttonsBottomPanel = new JBPanel(new GridLayout(1, 1));\n\n        JButton deleteDataButton = createButton(\"Delete Data\", e -> {\n            dev.yanisk.TDDPredict.view.Dialog dialog = new Dialog(\"Are you sure?\",\"This will delete all data for this project.\");\n", "            if(dialog.showAndGet()) {\n                project.getService(TDDPredictStateComponent.class).clearTestHistory();\n                project.getUserData(Constants.HISTORY_PANEL).removeHistory();\n                project.getUserData(Constants.TEST_PASS_COUNTER).setCount(0);\n                project.getUserData(Constants.TEST_FAIL_COUNTER).setCount(0);\n                project.getUserData(Constants.TEST_TERMINATION_COUNTER).setCount(0);\n                project.getUserData(Constants.PREDICT_CORRECT_COUNTER).setCount(0);\n                project.getUserData(Constants.PREDICT_INCORRECT_COUNTER).setCount(0);\n            }\n        });\n\n        buttonsBottomPanel.add(deleteDataButton);\n\n        return buttonsBottomPanel;\n    }\n\n    private JButton createButton(String text, ActionListener listener) {\n        JButton button = new JButton(text);\n        button.addActionListener(listener);\n        return button;\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/HistoryList.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.ide.BrowserUtil;\nimport git4idea.repo.GitRemote;\n\nimport java.util.*;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\nimport dev.yanisk.TDDPredict.bus.TestRunEventBus;", "import com.intellij.ui.components.JBPanel;\nimport dev.yanisk.TDDPredict.bus.TestRunEventBus;\nimport dev.yanisk.TDDPredict.models.Prediction;\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport com.intellij.icons.AllIcons;\nimport com.intellij.ui.components.JBLabel;\nimport dev.yanisk.TDDPredict.service.GitService;\nimport dev.yanisk.TDDPredict.util.ButtonColors;\nimport git4idea.repo.GitRepository;\n", "import git4idea.repo.GitRepository;\n\nimport javax.swing.*;\nimport javax.swing.Timer;\nimport java.awt.*;\nimport java.time.Duration;\nimport java.time.LocalDateTime;\n\npublic class HistoryList extends JBPanel implements TestRunEventBus {\n\n    private final Project project;\n    private final LinkedList<TestRun> testHistory = new LinkedList<>();\n\n    public HistoryList(Project project) {\n        this.project = project;\n        project.getMessageBus().connect().subscribe(TestRunEventBus.TEST_RUN_EVENT_BUS, this);\n        this.setLayout(new BorderLayout());\n    }\n", "public class HistoryList extends JBPanel implements TestRunEventBus {\n\n    private final Project project;\n    private final LinkedList<TestRun> testHistory = new LinkedList<>();\n\n    public HistoryList(Project project) {\n        this.project = project;\n        project.getMessageBus().connect().subscribe(TestRunEventBus.TEST_RUN_EVENT_BUS, this);\n        this.setLayout(new BorderLayout());\n    }\n", "    public void addHistory(LinkedList<TestRun> testHistory) {\n        this.testHistory.addAll(testHistory);\n        generateHistoryList();\n        setupRefreshTimer(60000); // one minute\n    }\n\n    private void setupRefreshTimer(int delay) {\n        // Set up timer to regenerate history list every minute\n        Timer timer = new Timer(delay, e -> {\n            if (testHistory.size() != 0) {\n                removeAll();\n                generateHistoryList();\n            }\n        });\n        timer.start();\n    }\n", "            if (testHistory.size() != 0) {\n                removeAll();\n                generateHistoryList();\n            }\n        });\n        timer.start();\n    }\n\n    public void addTestRun(TestRun lastTestRun) {\n        testHistory.addFirst(lastTestRun);\n        this.removeAll();\n        generateHistoryList();\n    }\n", "    public void addTestRun(TestRun lastTestRun) {\n        testHistory.addFirst(lastTestRun);\n        this.removeAll();\n        generateHistoryList();\n    }\n\n    public void removeHistory() {\n        testHistory.clear();\n        this.removeAll();\n        generateHistoryList();\n    }\n\n    private void generateHistoryList() {\n        extracted();\n    }\n\n    private void extracted() {", "        if (testHistory.size() == 0) {\n            add(new JBLabel(\"No predictions\", SwingConstants.CENTER), BorderLayout.NORTH);\n        } else {\n            removeAll();\n            JBPanel historyContent = new JBPanel(new GridBagLayout());\n            GridBagConstraints historyGbc = new GridBagConstraints();\n            historyGbc.insets = new Insets(5, 5, 5, 5);\n\n            for (int i = 0; i < testHistory.size(); i++) {\n                TestRun testRun = testHistory.get(i);\n\n                //do not show items without test run outcome", "            for (int i = 0; i < testHistory.size(); i++) {\n                TestRun testRun = testHistory.get(i);\n\n                //do not show items without test run outcome\n                if (testRun.getTestRunOutcome() == null) {\n                    continue;\n                }\n\n                // time\n                historyGbc.gridy = i;\n                historyGbc.gridx = 0;\n\n                String dateTimeString = testRun.getDateTime();\n                LocalDateTime dateTime = LocalDateTime.parse(dateTimeString);\n\n                long secondsSinceLastExecution = Duration.between(dateTime, LocalDateTime.now()).getSeconds();\n                JBLabel timeLabel = new JBLabel(getTimeString(secondsSinceLastExecution));\n\n                //If nothing has happened for 15 minutes make the time red", "                if (i == 0 && secondsSinceLastExecution >= 900) {\n                    Font boldFont = timeLabel.getFont().deriveFont(Font.BOLD);\n                    timeLabel.setForeground(Color.RED);\n                    timeLabel.setFont(boldFont);\n                }\n\n                historyContent.add(timeLabel, historyGbc);\n\n                // circle\n                historyGbc.gridy = i;\n                historyGbc.gridx = 1;\n\n                Color circleColor = Color.BLACK;\n\n                switch (testRun.getTestRunOutcome()) {\n                    case PASSED:\n                        circleColor = ButtonColors.TEST_PASS_COLOR;\n                        break;\n                    case FAILED:\n                        circleColor = ButtonColors.TEST_FAIL_COLOR;\n                        break;\n                    case NOT_EXECUTED:\n                        circleColor = ButtonColors.TEST_DID_NOT_RUN_COLOR;\n                        break;\n                }\n\n                JBPanel exampleGreenCirclePanel = new Circle(circleColor, 14, testRun.getCommit());\n                historyContent.add(exampleGreenCirclePanel, historyGbc);\n\n                //icon\n                historyGbc.gridx = 2;\n\n                Icon icon = testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;\n                historyContent.add(new JLabel(icon), historyGbc);\n", "                try {\n                    if(project.getService(GitService.class).getGitRepository().getRemotes().size() > 0) {\n                        //icon\n                        historyGbc.gridx = 3;\n                        JButton viewCommitButton = createViewCommitButton(testRun.getCommit());\n                        historyContent.add(viewCommitButton, historyGbc);\n                    }\n                } catch (Exception e) {\n                    //Threw an exception on PyCharm - probably because no remotes but just wrapping into 1.0.1\n                }\n\n\n            }\n\n            add(historyContent, BorderLayout.NORTH);\n        }\n    }\n\n    private JButton createViewCommitButton(String commitHash) {\n        Icon viewIcon = AllIcons.Actions.Preview;\n        JButton viewCommitButton = new JButton(viewIcon);\n        // Remove button elements\n        viewCommitButton.setOpaque(false);\n        viewCommitButton.setContentAreaFilled(false);\n        viewCommitButton.setBorderPainted(false);\n        viewCommitButton.setFocusPainted(false);\n        viewCommitButton.setToolTipText(\"View\");\n        // Remove margin\n        viewCommitButton.setMargin(new Insets(0, 0, 0, 0));\n        viewCommitButton.setPreferredSize(new Dimension(14,14));\n        viewCommitButton.addActionListener(e -> {\n            GitRepository repository = project.getService(GitService.class).getGitRepository(); // Your GitRepository instance here\n\n            Set<GitRemote> remotes =  new HashSet<>(repository.getRemotes());", "            if (!remotes.isEmpty()) {\n                GitRemote remote = remotes.iterator().next();\n                String remoteUrl = remote.getFirstUrl();\n\n                if (remoteUrl != null) {\n                    String baseUrl = remote.getFirstUrl().replaceFirst(\"\\\\.git\",\"/\");\n                    String commitUrl = baseUrl + \"/commit/\" + commitHash;\n                    BrowserUtil.browse(commitUrl);\n                }\n            }\n        });\n\n        return viewCommitButton;\n    }\n\n    private String getTimeString(long secondsSinceExecution) {\n", "        if (secondsSinceExecution < 60) {\n            return \"< 1 min\";\n        } else if (secondsSinceExecution < 3600) {\n            return (secondsSinceExecution / 60) + \" min\";\n        } else if (secondsSinceExecution < 86400) {\n            return (secondsSinceExecution / 3600) + \" h\";\n        } else {\n            return \"1d+\";\n        }\n    }\n\n    @Override", "    public void testRunProcessed(TestRun testRun) {\n        addTestRun(testRun);\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/TestOutcomePanel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport dev.yanisk.TDDPredict.models.TestRunOutcome;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport dev.yanisk.TDDPredict.util.Constants;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\nimport dev.yanisk.TDDPredict.util.ButtonColors;\n\nimport java.awt.*;", "\nimport java.awt.*;\n\npublic class TestOutcomePanel extends JBPanel {\n\n    private final Project project;\n    private CounterLabel testsPassedCounterLabel;\n    private CounterLabel testsFailedCounterLabel;\n    private CounterLabel testNotExecutedCounterLabel;\n\n    public TestOutcomePanel(Project project) {\n        this.project = project;\n\n        loadCounterLabels();\n        loadCounterData();\n\n        setLayout(new GridLayout(1, 3, 5, 5));\n        add(createCircleWithCounter(ButtonColors.TEST_PASS_COLOR, testsPassedCounterLabel, \"Tests Passed\"));\n        add(createCircleWithCounter(ButtonColors.TEST_FAIL_COLOR, testsFailedCounterLabel, \"Tests Failed\"));\n//        add(createCircleWithCounter(ButtonColors.TEST_DID_NOT_RUN_COLOR, testNotExecutedCounterLabel, \"Tests did not run after prediction\"));\n\n    }\n\n    private void loadCounterLabels() {\n        testsPassedCounterLabel = project.getUserData(Constants.TEST_PASS_COUNTER);\n        testsFailedCounterLabel = project.getUserData(Constants.TEST_FAIL_COUNTER);\n        testNotExecutedCounterLabel = project.getUserData(Constants.TEST_TERMINATION_COUNTER);\n    }\n\n\n    private JBPanel createCircleWithCounter(Color color, CounterLabel counterLabel, String tooltip) {\n        JBPanel circleWithCounterPanel = new JBPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));\n\n        int circleSize = 14;\n        Circle circle = new Circle(color, circleSize, tooltip);\n        circleWithCounterPanel.add(circle);\n        circleWithCounterPanel.add(counterLabel);\n\n        return circleWithCounterPanel;\n    }\n\n    private void loadCounterData() {\n        testsPassedCounterLabel.setCount(calculateOutcomes(TestRunOutcome.PASSED));\n        testsFailedCounterLabel.setCount(calculateOutcomes(TestRunOutcome.FAILED));\n        testNotExecutedCounterLabel.setCount(calculateOutcomes(TestRunOutcome.NOT_EXECUTED));\n    }\n\n    private long calculateOutcomes(TestRunOutcome outcome) {\n        return project.getService(TDDPredictStateComponent.class).getTestHistory()\n                .stream()\n                .filter(testRun -> testRun.getTestRunOutcome() == outcome)\n                .count();\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/SummaryPanel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class SummaryPanel extends JBPanel {\n\n    private final Project project;\n\n    public SummaryPanel(Project project) {\n        this.project = project;\n\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n        setMaximumSize(new Dimension(150,250));\n        addComponentsToPanel();\n    }\n\n\n    private void addComponentsToPanel() {\n        // Test Outcomes\n        add(createTitleLabel(\"Test Outcomes\"));\n        add(new TestOutcomePanel(project));\n        add(new JSeparator(SwingConstants.HORIZONTAL));\n\n        // Prediction Statistics\n        add(createTitleLabel(\"Prediction Statistics\"));\n        add(new PredictionStatisticsPanel(project));\n    }\n\n    private JLabel createTitleLabel(String title) {\n        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);\n        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\n        return titleLabel;\n    }\n\n}", "public class SummaryPanel extends JBPanel {\n\n    private final Project project;\n\n    public SummaryPanel(Project project) {\n        this.project = project;\n\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n        setMaximumSize(new Dimension(150,250));\n        addComponentsToPanel();\n    }\n\n\n    private void addComponentsToPanel() {\n        // Test Outcomes\n        add(createTitleLabel(\"Test Outcomes\"));\n        add(new TestOutcomePanel(project));\n        add(new JSeparator(SwingConstants.HORIZONTAL));\n\n        // Prediction Statistics\n        add(createTitleLabel(\"Prediction Statistics\"));\n        add(new PredictionStatisticsPanel(project));\n    }\n\n    private JLabel createTitleLabel(String title) {\n        JLabel titleLabel = new JLabel(title, SwingConstants.CENTER);\n        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\n        return titleLabel;\n    }\n\n}"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/ScrollableHistoryList.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport dev.yanisk.TDDPredict.models.TestRun;\nimport dev.yanisk.TDDPredict.state.TDDPredictStateComponent;\nimport dev.yanisk.TDDPredict.util.Constants;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.ui.components.JBPanel;\nimport com.intellij.ui.components.JBScrollPane;\n\nimport java.awt.*;", "\nimport java.awt.*;\nimport java.util.LinkedList;\n\npublic class ScrollableHistoryList extends JBPanel {\n\n    public ScrollableHistoryList(Project project) {\n\n        HistoryList historyList = project.getUserData(Constants.HISTORY_PANEL);\n        LinkedList<TestRun> testHistory = project.getService(TDDPredictStateComponent.class).getTestHistory();\n        historyList.addHistory(testHistory);\n\n        JBScrollPane scrollPanel = new JBScrollPane(historyList);\n        scrollPanel.setAlignmentX(Component.LEFT_ALIGNMENT);\n        scrollPanel.setPreferredSize(new Dimension(150, 120));\n        scrollPanel.setMinimumSize(new Dimension(150, 120));\n        setToolTipText(null);\n\n        add(scrollPanel);\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/view/ActionPanel.java", "chunked_list": ["package dev.yanisk.TDDPredict.view;\n\nimport com.intellij.ui.components.JBPanel;\nimport dev.yanisk.TDDPredict.util.PredictionHelper;\nimport com.intellij.icons.AllIcons;\nimport com.intellij.openapi.project.Project;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionListener;", "import java.awt.*;\nimport java.awt.event.ActionListener;\n\npublic class ActionPanel extends JBPanel {\n    private final Project project;\n\n    public ActionPanel(Project project) {\n        this.project = project;\n        JBPanel northPanel = new JBPanel();\n        northPanel.setLayout(new BoxLayout(northPanel, BoxLayout.Y_AXIS));\n        northPanel.add(createPredictLabel());\n        northPanel.add(createButtonsPanel());\n        this.add(northPanel);\n    }\n\n    private JLabel createPredictLabel() {\n        JLabel predictLabel = new JLabel(\"Predict\");\n        predictLabel.setHorizontalAlignment(SwingConstants.CENTER);\n        predictLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\n        return predictLabel;\n    }\n\n    private JBPanel createButtonsPanel() {\n        JBPanel buttonsPanel = new JBPanel(new GridLayout(1, 2));\n        String passButtonText = \"Pass  \"; //Added padding because doesn't look centered\n        JButton predictPassButton = createButton(passButtonText, AllIcons.RunConfigurations.TestPassed,e -> {\n            PredictionHelper.greenPredictCalled(project);\n        });\n\n        String failButtonText = \"Fail  \"; //Added padding because doesn't look centered\n        JButton predictFailButton = createButton(failButtonText,AllIcons.RunConfigurations.TestError, e -> {\n            PredictionHelper.redPredictCalled(project);\n        });\n//        JButton predictExecutionFailButton = createButton(\"BREAK\", e -> {\n//            PredictionHelper.terminatePredictCalled(project);\n//        });\n\n        buttonsPanel.add(predictPassButton);\n        buttonsPanel.add(predictFailButton);\n//        buttonsPanel.add(predictExecutionFailButton);\n\n        return buttonsPanel;\n    }\n\n\n    private JButton createButton(String text, Icon icon, ActionListener listener) {\n        JButton button = new JButton(text, icon);\n\n        button.addActionListener(listener);\n        return button;\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/bus/TestRunEventPublisherService.java", "chunked_list": ["package dev.yanisk.TDDPredict.bus;\n\nimport com.intellij.openapi.components.Service;\nimport com.intellij.openapi.project.Project;\nimport dev.yanisk.TDDPredict.models.TestRun;\n\n@Service(Service.Level.PROJECT)\npublic final class TestRunEventPublisherService {\n    private final Project project;\n\n    public TestRunEventPublisherService(Project project) {\n        this.project = project;\n    }\n", "    public void publishTestRunProcessed(TestRun processedTestRun) {\n        project.getMessageBus().syncPublisher(TestRunEventBus.TEST_RUN_EVENT_BUS).testRunProcessed(processedTestRun);\n    }\n}\n"]}
{"filename": "src/main/java/dev/yanisk/TDDPredict/bus/TestRunEventBus.java", "chunked_list": ["package dev.yanisk.TDDPredict.bus;\n\nimport com.intellij.util.messages.Topic;\nimport dev.yanisk.TDDPredict.models.TestRun;\n\npublic interface TestRunEventBus {\n    Topic<TestRunEventBus> TEST_RUN_EVENT_BUS = new Topic<>(\"dev.yanisk.TDDPredict.bus.TestRunProcessedTopic\", TestRunEventBus.class);\n\n    void testRunProcessed(TestRun testRun);\n}\n"]}
