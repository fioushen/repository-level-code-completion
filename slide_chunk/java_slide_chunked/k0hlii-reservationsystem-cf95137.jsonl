{"filename": "src/main/java/module-info.java", "chunked_list": ["module com.example.controllsdemo {\n    requires javafx.controls;\n    requires javafx.fxml;\n    requires java.sql;\n\n\n    opens com.example.controllsdemo to javafx.fxml;\n    exports com.example.controllsdemo;\n}", "}"]}
{"filename": "src/main/java/model/CustomerDAO.java", "chunked_list": ["package model;\n\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport util.DBConnector;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;", "import java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class CustomerDAO {\n    public static ObservableList<Customer> getCustomer() {\n        ObservableList<Customer> customers = FXCollections.observableArrayList();\n\n        Connection con;\n        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Kunde\";\n\n            ResultSet rs = con.createStatement().executeQuery(sql);", "        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Kunde\";\n\n            ResultSet rs = con.createStatement().executeQuery(sql);\n            while (rs.next()) {\n                customers.add(new Customer(\n                    rs.getInt(\"KundenID\"),\n                    rs.getString(\"Vorname\"),\n                    rs.getString(\"Nachname\"),\n                    rs.getString(\"Telefonnummer\"),\n                    rs.getString(\"Email\"),\n                    rs.getInt(\"AdressenID\")\n                ));\n            }\n        } catch (SQLException ex) {\n            System.err.println(ex.getMessage());\n        }\n\n        return customers;\n    }\n", "    public static Customer getCustomerbyID(int id) {\n        ObservableList<Customer> customers = getCustomer();\n\n        for (int i = 0; i < customers.size(); i++) {\n            if (customers.get(i).id == id) {\n                return customers.get(i);\n            }\n        }\n        System.out.println(\"No Customer found\");\n        return new Customer(\"nothing\",\"found\");\n    }\n", "    public static void add(Customer c) {\n        try (Connection con = DBConnector.connect()) {\n\n            String sql = \"INSERT INTO Kunde (Vorname, Nachname, Telefonnummer, Email, AdressenID) \" +\n                    \"VALUES (?, ?, ?, ?, ?)\";\n\n            PreparedStatement preparedStatement = con.prepareStatement(sql);\n\n            preparedStatement.setString(1, c.firstname);\n            preparedStatement.setString(2, c.lastname);\n            preparedStatement.setString(3, c.phone);\n            preparedStatement.setString(4, c.email);\n            preparedStatement.setInt(5, c.addressID);\n\n            preparedStatement.executeUpdate();\n\n        } catch (SQLException ex) {\n            System.err.println(\"Error executing SQL: \" + ex.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/model/DayReservations.java", "chunked_list": ["package model;\n\nimport javafx.scene.layout.Pane;\n\nimport java.time.LocalDate;\nimport java.util.Date;\n\npublic class DayReservations {\n    public LocalDate date;\n    public Pane[] reservations = new Pane[200];\n\n    public DayReservations(LocalDate date, Pane[] reservationPanes) {\n        this.date = date;\n        this.reservations = reservationPanes;\n    }\n}\n", "    public LocalDate date;\n    public Pane[] reservations = new Pane[200];\n\n    public DayReservations(LocalDate date, Pane[] reservationPanes) {\n        this.date = date;\n        this.reservations = reservationPanes;\n    }\n}\n"]}
{"filename": "src/main/java/model/SharedDataModel.java", "chunked_list": ["package model;\n\nimport java.util.Date;\n\npublic class SharedDataModel {\n    private static int court;\n    private static Date date;\n\n    private static Reservation reservation;\n\n    public static Date getDate() {\n        return date;\n    }\n", "    public static Date getDate() {\n        return date;\n    }\n\n    public static void setDate(Date date) {\n        SharedDataModel.date = date;\n    }\n\n    public  int getCourt() {\n        return court;\n    }\n", "    public  int getCourt() {\n        return court;\n    }\n\n    public  void setCourt(int court) {\n        SharedDataModel.court = court;\n    }\n\n    public void setReservation(Reservation reservation) {\n        SharedDataModel.reservation = reservation;\n    }\n", "    public void setReservation(Reservation reservation) {\n        SharedDataModel.reservation = reservation;\n    }\n\n    public static Reservation getReservation() {\n        return reservation;\n    }\n}\n\n"]}
{"filename": "src/main/java/model/ReservationDAO.java", "chunked_list": ["package model;\n\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport util.DBConnector;\n\nimport java.sql.Connection;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;", "import java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Date;\n\npublic class ReservationDAO {\n    public static ObservableList<Reservation> getReservations() {\n        ObservableList<Reservation> reservations = FXCollections.observableArrayList();\n\n        Connection con;\n        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Reservierungen\";\n\n            ResultSet rs = con.createStatement().executeQuery(sql);", "        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Reservierungen\";\n\n            ResultSet rs = con.createStatement().executeQuery(sql);\n            while (rs.next()) {\n                reservations.add(new Reservation(\n                        rs.getInt(\"ReservierungsID\"),\n                        rs.getInt(\"AnzahlPl\u00e4tze\"),\n                        rs.getInt(\"AnzahlEinheiten\"),\n                        rs.getFloat(\"Preis\"),\n                        rs.getDate(\"Datum\"),\n                        rs.getTime(\"Uhrzeit\"),\n                        rs.getInt(\"Platz\"),\n                        rs.getInt(\"KundenID\"),\n                        rs.getString(\"Zustand\")\n                        )\n                );\n            }\n        } catch (SQLException ex) {\n            System.err.println(ex.getMessage());\n        }\n\n        return reservations;\n    }\n", "    public static ObservableList<Reservation> getReservations(Date date) {\n        java.util.Date utilDate = date; // Assuming r.date is a java.util.Date object\n\n        // Convert java.util.Date to java.sql.Date\n        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());\n\n        ObservableList<Reservation> reservations = FXCollections.observableArrayList();\n\n        Connection con;\n        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Reservierungen WHERE Datum = ?\";\n            PreparedStatement preparedStatement = con.prepareStatement(sql);\n            preparedStatement.setDate(1, sqlDate);\n            ResultSet rs = preparedStatement.executeQuery();", "        try {\n            con = DBConnector.connect();\n            String sql = \"SELECT * FROM Reservierungen WHERE Datum = ?\";\n            PreparedStatement preparedStatement = con.prepareStatement(sql);\n            preparedStatement.setDate(1, sqlDate);\n            ResultSet rs = preparedStatement.executeQuery();\n            while (rs.next()) {\n                reservations.add(new Reservation(\n                    rs.getInt(\"ReservierungsID\"),\n                    rs.getInt(\"AnzahlPl\u00e4tze\"),\n                    rs.getInt(\"AnzahlEinheiten\"),\n                    rs.getFloat(\"Preis\"),\n                    rs.getDate(\"Datum\"),\n                    rs.getTime(\"Uhrzeit\"),\n                    rs.getInt(\"Platz\"),\n                    rs.getInt(\"KundenID\"),\n                    rs.getString(\"Zustand\")\n                    )\n                );\n            }\n        } catch (SQLException ex) {\n            System.err.println(ex.getMessage());\n        }\n\n        return reservations;\n    }\n\n", "    public static void add(Reservation r) {\n        try (Connection con = DBConnector.connect()) {\n            java.util.Date utilDate = r.date;\n\n            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());\n\n            String sql = \"INSERT INTO Reservierungen (AnzahlPl\u00e4tze, AnzahlEinheiten, Preis, Datum, Uhrzeit, Platz, KundenID, Zustand) \" +\n                    \"VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\n\n            PreparedStatement preparedStatement = con.prepareStatement(sql);\n            preparedStatement.setInt(1, r.court_count);\n            preparedStatement.setInt(2, r.sessions);\n            preparedStatement.setDouble(3, r.price);\n            preparedStatement.setDate(4, sqlDate);\n            preparedStatement.setString(5, \"09:00:00\");\n            preparedStatement.setInt(6, r.court);\n            preparedStatement.setInt(7, r.cusomerID);\n            preparedStatement.setString(8, \"reserved\");\n\n            preparedStatement.executeUpdate();\n\n        } catch (SQLException ex) {\n            System.err.println(\"Error executing SQL: \" + ex.getMessage());\n        }\n\n    }", "    public static void update(Reservation r) {\n        Connection con;\n\n        try {\n            con = DBConnector.connect();\n            String sql = \"UPDATE Reservierungen SET Zustand = '\" + r.state + \"' WHERE ReservierungsID = \" + r.id;\n            con.createStatement().executeUpdate(sql);\n        } catch (SQLException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/model/Reservation.java", "chunked_list": ["package model;\n\nimport java.sql.Time;\nimport java.util.Date;\n\npublic class Reservation {\n\n    public int court;\n    public int court_count;\n    public int sessions;\n    public Customer customer;\n    public java.util.Date date;\n    int id;\n    float price;\n    int cusomerID;", "    public int court_count;\n    public int sessions;\n    public Customer customer;\n    public java.util.Date date;\n    int id;\n    float price;\n    int cusomerID;\n    public String state;\n\n    public Reservation(int court, int court_count, int sessions, Customer customer, Date date) {\n        this.court = court;\n        this.court_count = court_count;\n        this.sessions = sessions;\n        this.customer = customer;\n        this.date = date;\n    }\n\n    public Reservation(int id, int anzahlPl\u00e4tze, int anzahlEinheiten, float preis, Date datum, Time uhrzeit, int platz, int kundenID, String zustand) {\n        this.id = id;\n        this.court_count = anzahlPl\u00e4tze;\n        this.sessions = anzahlEinheiten;\n        this.price = preis;\n        this.date = datum;\n        this.cusomerID = kundenID;\n        this.state = zustand;\n        this.customer = CustomerDAO.getCustomerbyID(kundenID);\n        this.court = platz;\n    }\n    public Reservation(int anzahlPl\u00e4tze, int anzahlEinheiten, float preis, Date datum, Time uhrzeit, int platz, int kundenID, String zustand) {\n        this.court_count = anzahlPl\u00e4tze;\n        this.sessions = anzahlEinheiten;\n        this.price = preis;\n        this.date = datum;\n        this.cusomerID = kundenID;\n        this.state = zustand;\n        this.customer = CustomerDAO.getCustomerbyID(kundenID);\n        this.court = platz;\n    }\n\n\n    @Override", "    public String toString() {\n        return \"Reservation{\" +\n                \"court=\" + court +\n                \", court_count=\" + court_count +\n                \", sessions=\" + sessions +\n                \", customer=\" + customer +\n                \", date=\" + date +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/model/Customer.java", "chunked_list": ["package model;\n\npublic class Customer {\n    public int id;\n    public String firstname;\n    public String lastname;\n    String phone;\n    String email;\n    int addressID;\n\n    public Customer(String firstname, String lastname) {\n        this.firstname = firstname;\n        this.lastname = lastname;\n    }\n\n    public Customer(int id, String firstname, String lastname, String phone, String email, int addressID) {\n        this.id = id;\n        this.firstname = firstname;\n        this.lastname = lastname;\n        this.phone = phone;\n        this.email = email;\n        this.addressID = addressID;\n    }\n\n    public Customer(String firstname, String lastname, String phone, String email, int addressID) {\n        this.firstname = firstname;\n        this.lastname = lastname;\n        this.phone = phone;\n        this.email = email;\n        this.addressID = addressID;\n    }\n\n\n\n\n", "    public int getID() {\n        return this.id;\n    }\n\n    @Override\n    public String toString() {\n        return this.firstname +\" \"+ this.lastname;\n\n    }\n}\n"]}
{"filename": "src/main/java/util/DBConnector.java", "chunked_list": ["package util;\n\nimport java.sql.Connection;  \nimport java.sql.DriverManager;  \nimport java.sql.SQLException;  \n\npublic class DBConnector {  \n  private static Connection conn;  \n  private static String url = \"jdbc:mysql://localhost:3306/badmintoncenter\";\n  private static String user = \"root\"; //Username of database\n  private static String pass = \"\"; //Password of database\n  ", "  public static Connection connect() throws SQLException{  \n    try{  \n      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n    }catch(ClassNotFoundException cnfe){  \n      System.err.println(\"Error Class not found: \"+cnfe.getMessage());\n    }catch(InstantiationException ie){  \n      System.err.println(\"Error Instantiation Exception: \"+ie.getMessage());  \n    }catch(IllegalAccessException iae){  \n      System.err.println(\"Error Illegal AccessException: \"+iae.getMessage());  \n    }  \n    conn = DriverManager.getConnection(url,user,pass);  \n    return conn;  \n  }  \n  ", "  public static Connection getConnection() throws SQLException, ClassNotFoundException{  \n    if(conn !=null && !conn.isClosed())  \n      return conn;  \n    connect();  \n    return conn;  \n  }  \n}  \n"]}
{"filename": "src/main/java/util/DML_DAO.java", "chunked_list": ["package util;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n/**\n *\n * @author tc\n */\npublic class DML_DAO {\n    public static void executeDML (String sql) {\n        Connection con;\n        ", " */\npublic class DML_DAO {\n    public static void executeDML (String sql) {\n        Connection con;\n        \n        try {\n            con = DBConnector.connect();\n            con.createStatement().executeUpdate(sql);\n        } catch (SQLException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/example/controllsdemo/Paymenu.java", "chunked_list": ["package com.example.controllsdemo;\n\nimport javafx.event.ActionEvent;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.TextField;\nimport javafx.stage.Stage;\nimport model.Reservation;\nimport model.ReservationDAO;\nimport model.SharedDataModel;\n", "import model.SharedDataModel;\n\n\npublic class Paymenu\n{\n    @javafx.fxml.FXML\n    private TextField tfCustomer;\n    @javafx.fxml.FXML\n    private TextField tfPrice;\n    @javafx.fxml.FXML\n    private Button btnPay;\n    @javafx.fxml.FXML\n    private Button btnCancel;\n    @javafx.fxml.FXML\n    private TextField tfCntSessions;\n\n    @javafx.fxml.FXML", "    public void initialize() {\n        Reservation reservation = SharedDataModel.getReservation();\n        int sessions = reservation.sessions * reservation.court_count;\n        double price;\n        if (sessions ==1) {\n            price = 19.9;\n        }\n        else {\n            price =19.9 +(sessions-1) * 9.95;\n        }\n\n        tfCustomer.setText(reservation.customer.firstname + \" \" + reservation.customer.lastname);\n        tfPrice.setText(String.format(\"%.2f\", price) + \"\u20ac\");\n        tfCntSessions.setText(String.valueOf(sessions));\n    }\n\n    @javafx.fxml.FXML", "    public void handlePay(ActionEvent actionEvent) {\n        SharedDataModel.getReservation().state = \"paid\";\n        ReservationDAO.update(SharedDataModel.getReservation());\n\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n\n    @javafx.fxml.FXML\n    public void handlebtnCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n}", "    public void handlebtnCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n}"]}
{"filename": "src/main/java/com/example/controllsdemo/Reservationmenu_Controller.java", "chunked_list": ["package com.example.controllsdemo;\n\nimport javafx.beans.property.SimpleListProperty;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;", "import javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport model.*;\n\nimport java.io.IOException;\nimport java.net.URL;\n\nimport java.util.Date;", "\nimport java.util.Date;\nimport java.sql.Time;\nimport java.util.ResourceBundle;\n\npublic class Reservationmenu_Controller implements Initializable {\n\n    @javafx.fxml.FXML\n    private ComboBox cbCustomer;\n    @javafx.fxml.FXML\n    private Spinner<Integer> spCourts;\n    @javafx.fxml.FXML\n    private Spinner<Integer> spSessions;\n\n    @javafx.fxml.FXML\n    private Button btnCancel;\n\n    @Override", "    public void initialize(URL url, ResourceBundle resourceBundle)\n    {\n        SimpleListProperty listProperty = new SimpleListProperty();\n        ObservableList<Customer> customers = CustomerDAO.getCustomer();\n\n        listProperty.setValue(customers);\n        cbCustomer.itemsProperty().bind(listProperty);\n\n        spCourts.setValueFactory(\n            new SpinnerValueFactory.IntegerSpinnerValueFactory(1,10)\n        );\n        spSessions.setValueFactory(\n            new SpinnerValueFactory.IntegerSpinnerValueFactory(1,20)\n        );\n    }\n\n    @javafx.fxml.FXML", "    public void handlecbCustomer() {\n\n    }\n\n    @FXML\n    public void handlSubmit(ActionEvent actionEvent) {\n\n//        if (cbCustomer.getSelectionModel().isEmpty()) {\n//            Alert alert = new Alert(Alert.AlertType.ERROR);\n//            alert.setTitle(\"Error\");\n//            alert.setHeaderText(\"No customer selected\");\n//            alert.setContentText(\"Please select a customer\");\n//            alert.showAndWait();\n//            return;\n//        }\n        SharedDataModel data = new SharedDataModel();\n\n        float price = 10.5F;\n\n        Date date = data.getDate();\n        System.out.println(date);\n        Customer customer = (Customer) cbCustomer.getSelectionModel().getSelectedItem();\n\n        String state =\"reserved\";\n        Reservation r = new Reservation(spCourts.getValue(),spSessions.getValue(),price,date,new Time(654),data.getCourt(),customer.id,state);\n\n        ReservationDAO.add(r);\n\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n\n    }\n\n    @javafx.fxml.FXML", "    public void handlebtnCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n\n    @FXML\n    public void handleAddCustomer(ActionEvent actionEvent) {\n        try {\n            Stage stage = new Stage();\n\n            FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"customermenu.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load());\n            stage.setTitle(\"New Customer\");\n            stage.initModality(Modality.APPLICATION_MODAL);\n            stage.setScene(scene);\n            stage.showAndWait();\n\n            SimpleListProperty listProperty = new SimpleListProperty();\n            ObservableList<Customer> customers = CustomerDAO.getCustomer();\n\n            listProperty.setValue(customers);\n            cbCustomer.itemsProperty().bind(listProperty);\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/example/controllsdemo/HelloController.java", "chunked_list": ["package com.example.controllsdemo;\n\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.GridPane;", "import javafx.scene.control.*;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Pane;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport model.*;\n\n\nimport java.io.IOException;\nimport java.net.URL;", "import java.io.IOException;\nimport java.net.URL;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.ResourceBundle;\nimport java.time.LocalDate;\n\npublic class HelloController  implements Initializable {\n    @FXML\n    private DatePicker datepicker;\n    @FXML\n    private Button btnMo;\n    @FXML\n    private Button btnDi;\n    @FXML\n    private Button btnMi;\n    @FXML\n    private Button btnDo;\n    @FXML\n    private Button btnFr;\n    @FXML\n    private Button btnSa;\n    @FXML\n    private Button btnSo;\n\n    @FXML\n    private GridPane grid;\n\n    Button[] weekdaysButtons;\n    String[] weekdays = {\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\",\"SUNDAY\"};\n    String[] shortWeekdays = {\"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\",\"So\"};\n\n    int courts = 10;\n\n    Pane[] reservationPanes = new Pane[200];\n\n    ObservableList<Reservation> reservations;\n\n    @Override", "    public void initialize(URL url, ResourceBundle resourceBundle)\n    {\n        datepicker.setValue(LocalDate.now());\n        weekdaysButtons = new Button[]{btnMo, btnDi, btnMi, btnDo, btnFr, btnSa, btnSo};\n        updateWeekdays();\n\n        updateReservations();\n    }\n\n    private void drawButtons() {\n        Button[] reseravtionButtons = new Button[200];", "        for (int i = 0; i < 200; i++) {\n            reseravtionButtons[i] = new Button(\"\"+i);\n            reseravtionButtons[i].setOnAction(this::handleReservationButton);\n            reseravtionButtons[i].setOpacity(0);\n            reseravtionButtons[i].setPrefHeight(100);\n            reseravtionButtons[i].setPrefWidth(100);\n            if (i%courts >= 5 ) {\n                grid.add(reseravtionButtons[i], i%courts +3, i/courts +1);\n            }\n            else {\n                grid.add(reseravtionButtons[i], i%courts +1, i/courts +1);\n            }\n        }\n    }\n\n    private void updateReservations() {\n\n        grid.getChildren().removeAll(reservationPanes);\n\n        LocalDate localDate = datepicker.getValue();\n\n        // Convert LocalDate to java.util.Date\n        Date utilDate = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());\n\n        reservations = ReservationDAO.getReservations(utilDate);\n\n        reservationPanes = new Pane[200];", "        for (int i = 0; i < reservations.size(); i++) {\n            displayReservation(reservations.get(i));\n        }\n        drawButtons();\n\n    }\n\n    void handleReservationButton(ActionEvent actionEvent)\n    {\n        Button btn = (Button) actionEvent.getSource();\n", "        for (int i = 0; i < reservations.size(); i++) {\n            if (reservations.get(i).court == Integer.parseInt(btn.getText())) {\n                SharedDataModel data = new SharedDataModel();\n                data.setReservation(reservations.get(i));\n                try {\n                    Stage stage = new Stage();\n\n                    FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"paymenu.fxml\"));\n                    Scene scene = new Scene(fxmlLoader.load());\n                    stage.setTitle(\"New Reservation\");\n                    stage.initModality(Modality.APPLICATION_MODAL);\n                    stage.setScene(scene);\n                    stage.showAndWait();\n\n                    updateReservations();\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                }\n                finally {\n                    return;\n                }\n\n            }\n        }\n\n", "        try {\n            SharedDataModel data = new SharedDataModel();\n            data.setCourt(Integer.parseInt(btn.getText()));\n\n            LocalDate localDate = datepicker.getValue();\n            Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());\n            SharedDataModel.setDate(date);\n            Stage stage = new Stage();\n\n            FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"reservationmenu.fxml\"));\n            Scene scene = new Scene(fxmlLoader.load());\n            stage.setTitle(\"New Reservation\");\n            stage.initModality(Modality.APPLICATION_MODAL);\n            stage.setScene(scene);\n            stage.showAndWait();\n\n            updateReservations();\n\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @FXML", "    public void handleDatePicker(ActionEvent actionEvent)\n    {\n        datepicker.setValue(datepicker.getValue());\n        updateWeekdays();\n        updateReservations();\n    }\n\n    public Pane createPane(Reservation reservation)\n    {\n        Pane pane = new Pane(new Label(\"\"+reservation.customer.firstname +\"\\n\"+reservation.customer.lastname));\n        pane.getStyleClass().add(\"pane\");\n        return pane;\n    }\n", "    public void displayReservation(Reservation reservation)\n    {\n        Pane pane = createPane(reservation);\n        reservationPanes[reservation.court] = pane;\n\n        if (reservation.court%courts >= 5 ) {\n            grid.add(pane, reservation.court%courts +3, reservation.court/courts +1);\n        }\n        else {\n            grid.add(pane, reservation.court%courts +1, reservation.court/courts +1);\n        }\n\n        grid.setRowSpan(pane,reservation.sessions);\n        grid.setColumnSpan(pane,reservation.court_count);\n", "        try {\n            pane.getStyleClass().add(reservation.state);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    void updateWeekdays()\n    {", "        for (Button btn :weekdaysButtons) {\n            btn.getStyleClass().remove(\"weekday-selected\");\n        }\n\n        for (int i = 0; i < weekdays.length; i++) {\n            if (weekdays[i].equals(datepicker.getValue().getDayOfWeek().toString())) {\n                weekdaysButtons[i].getStyleClass().add(\"weekday-selected\");\n            }\n        }\n    }\n\n    @FXML", "    public void handleDayback(ActionEvent actionEvent)\n    {\n        datepicker.setValue(datepicker.getValue().minusDays(1));\n\n        updateWeekdays();\n        updateReservations();\n    }\n\n    @FXML\n    public void handleDayforward(ActionEvent actionEvent)\n    {\n        datepicker.setValue(datepicker.getValue().plusDays(1));\n        updateWeekdays();\n        updateReservations();\n    }\n\n    @FXML", "    public void handleDayforward(ActionEvent actionEvent)\n    {\n        datepicker.setValue(datepicker.getValue().plusDays(1));\n        updateWeekdays();\n        updateReservations();\n    }\n\n    @FXML\n    public void handleWeekdaySelect(ActionEvent actionEvent)\n    {\n        Button btn = (Button) actionEvent.getSource();\n        String btnText = btn.getText();\n\n        updateWeekdays();\n        updateReservations();\n\n        String dayOfWeek = datepicker.getValue().getDayOfWeek().toString();\n\n        int day1 = 0;\n        int day2 = 0;\n", "    public void handleWeekdaySelect(ActionEvent actionEvent)\n    {\n        Button btn = (Button) actionEvent.getSource();\n        String btnText = btn.getText();\n\n        updateWeekdays();\n        updateReservations();\n\n        String dayOfWeek = datepicker.getValue().getDayOfWeek().toString();\n\n        int day1 = 0;\n        int day2 = 0;\n", "        for (int i = 0; i < weekdays.length; i++) {\n            if (dayOfWeek.equals(weekdays[i])) {\n                 day1 = i;\n            }\n        }\n\n        for (int i = 0; i < shortWeekdays.length; i++) {\n            if (btnText.equals(shortWeekdays[i])) {\n                day2 = i;\n            }\n        }\n", "        if (day1 < day2) {\n            datepicker.setValue(datepicker.getValue().plusDays(day2 - day1));\n        } else if (day1 > day2) {\n            datepicker.setValue(datepicker.getValue().minusDays(day1 - day2));\n        } else {\n            datepicker.setValue(datepicker.getValue());\n        }\n    }\n}"]}
{"filename": "src/main/java/com/example/controllsdemo/Customermenu.java", "chunked_list": ["package com.example.controllsdemo;\n\nimport javafx.event.ActionEvent;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextField;\nimport javafx.stage.Stage;\nimport model.Customer;\nimport model.CustomerDAO;\n\npublic class Customermenu\n{\n    @javafx.fxml.FXML\n    private TextField inpVorname;\n    @javafx.fxml.FXML\n    private TextField inpNachname;\n    @javafx.fxml.FXML\n    private TextField inpEmail;\n    @javafx.fxml.FXML\n    private Button btnSubmit;\n    @javafx.fxml.FXML\n    private Button btnCancel;\n    @javafx.fxml.FXML\n    private TextField inpTelNr;\n\n    @javafx.fxml.FXML", "import model.CustomerDAO;\n\npublic class Customermenu\n{\n    @javafx.fxml.FXML\n    private TextField inpVorname;\n    @javafx.fxml.FXML\n    private TextField inpNachname;\n    @javafx.fxml.FXML\n    private TextField inpEmail;\n    @javafx.fxml.FXML\n    private Button btnSubmit;\n    @javafx.fxml.FXML\n    private Button btnCancel;\n    @javafx.fxml.FXML\n    private TextField inpTelNr;\n\n    @javafx.fxml.FXML", "    public void initialize() {\n    }\n\n    @javafx.fxml.FXML\n    public void handlSubmit(ActionEvent actionEvent) {\n        if (inpVorname.getText().isEmpty() || inpNachname.getText().isEmpty() || inpEmail.getText().isEmpty() || inpTelNr.getText().isEmpty()) {\n            return;\n        }\n        Customer customer = new Customer(inpVorname.getText(), inpNachname.getText(), inpEmail.getText(), inpTelNr.getText(), 1);\n        CustomerDAO.add(customer);\n\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n\n    @javafx.fxml.FXML", "    public void handlebtnCancel(ActionEvent actionEvent) {\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n}"]}
{"filename": "src/main/java/com/example/controllsdemo/HelloApplication.java", "chunked_list": ["package com.example.controllsdemo;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\n\nimport java.io.IOException;\n\npublic class HelloApplication extends Application {\n    @Override", "\npublic class HelloApplication extends Application {\n    @Override\n    public void start(Stage stage) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(\"main-page.fxml\"));\n        Scene scene = new Scene(fxmlLoader.load());\n        stage.setTitle(\"Reservation System\");\n        stage.setScene(scene);\n        stage.show(); //leider show\n    }\n", "    public static void main(String[] args) {\n        launch();\n    }\n}"]}
