{"filename": "Metaphor/src/test/java/com/bangbet/luckybus/ExampleUnitTest.java", "chunked_list": ["package com.bangbet.luckybus;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/Metaphor.java", "chunked_list": ["package com.xuanwenchao.metaphor;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorManager;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\nimport com.xuanwenchao.metaphor.manager.MetaphorManager;\n\n/**\n * @author Xuan Wenchao", "/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor\n * @Description: Metaphor is a operator witch face to user\n * @date Dec 21,2022\n */\n\npublic class Metaphor {\n\n    /**\n     * @param object It is a container class that is used for show fragment and only is object what is kind of AppCompatActivity or Fragment.\n     * @Description: get IMetaphorManager object, it will be create if it not existed.\n     * for details you can visit interface define of IMetaphorManager\n     * @return: IMetaphorManager\n     **/", "    public static IMetaphorManager with(Object object) {\n        return MetaphorManager.createMetaphorManager(object);\n    }\n\n    /**\n     * @param object It is a fragment that has been added to container\n     * @Description: get IMetaphorSubFragmentManager object, it will be create if it not existed.\n     * user can do more action with IMetaphorSubFragmentManager.\n     * @return: IMetaphorSubFragmentManager\n     **/\n    public static IMetaphorSubFragmentManager getManager(Fragment object) {\n        return MetaphorManager.findMetaphorManager(object);\n    }\n\n\n    /**\n     * @param b log switch variant, default is false\n     * @Description: you can set output log of metaphor to logcat console.\n     * @return: Void\n     **/", "    public static IMetaphorSubFragmentManager getManager(Fragment object) {\n        return MetaphorManager.findMetaphorManager(object);\n    }\n\n\n    /**\n     * @param b log switch variant, default is false\n     * @Description: you can set output log of metaphor to logcat console.\n     * @return: Void\n     **/\n    public static void setShowDebugLog(boolean b) {\n        MetaphorManager.isPrintLog = b;\n    }\n}\n", "    public static void setShowDebugLog(boolean b) {\n        MetaphorManager.isPrintLog = b;\n    }\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/interfaces/IMetaphorSubFragmentManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.interfaces;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.interfaces\n * @Description: define the interface for sub fragment that has been added to fragmentmanager\n * @date Dec 08,2022", " * @Description: define the interface for sub fragment that has been added to fragmentmanager\n * @date Dec 08,2022\n */\npublic interface IMetaphorSubFragmentManager {\n    /**\n     * @param code it is a code for custom define\n     * @param msg  it is a object for custom define\n     * @Description: send message to base object\n     * @return: IMetaphorManager\n     */\n    public IMetaphorSubFragmentManager sendMessageToBase(int code, Object msg);\n\n    /**\n     * @param metaphorMessage listener for message\n     * @Description: bind a listener for communication between base fragment and sub fragment\n     * @return: void\n     */\n    void bindFragmentListener(IMetaphorMessage metaphorMessage);\n\n    /**\n     * @param tagForFragment tag name of fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(String tagForFragment, int code, Object msg);\n\n    /**\n     * @param fragment target fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(Fragment fragment, int code, Object msg);\n\n    /**\n     * @param strTag tag name of fragment\n     * @Description: show fragment on container view that tag name is strTag\n     * @return: IMetaphorSubFragmentManager\n     */", "    public IMetaphorSubFragmentManager sendMessageToBase(int code, Object msg);\n\n    /**\n     * @param metaphorMessage listener for message\n     * @Description: bind a listener for communication between base fragment and sub fragment\n     * @return: void\n     */\n    void bindFragmentListener(IMetaphorMessage metaphorMessage);\n\n    /**\n     * @param tagForFragment tag name of fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(String tagForFragment, int code, Object msg);\n\n    /**\n     * @param fragment target fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(Fragment fragment, int code, Object msg);\n\n    /**\n     * @param strTag tag name of fragment\n     * @Description: show fragment on container view that tag name is strTag\n     * @return: IMetaphorSubFragmentManager\n     */", "    public IMetaphorSubFragmentManager showFragment(@NonNull String strTag);\n\n    /**\n     * @param fragment To be show object\n     * @Description: Show fragment and hide others that is contained in stack list, it will be added when it not existed.\n     * the container view of the fragment is the first containerView in resList, throw exception if resList's size is zero.\n     * @return: IMetaphorSubFragmentManager\n     */\n    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment);\n\n    /**\n     * @param fragment it will be add to first containerViewId\n     * @param strTag   tag name of fragment\n     * @return void\n     * @Description: add fragment into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment);\n\n    /**\n     * @param fragment it will be add to first containerViewId\n     * @param strTag   tag name of fragment\n     * @return void\n     * @Description: add fragment into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */\n    public void addFragment(@NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param strTag   tag name of fragment\n     * @return void\n     * @Description:  Find a fragment tag name in the stack of MetaphorManager\n     */\n    boolean isTagExist(@NonNull String strTag);\n}\n", "    public void addFragment(@NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param strTag   tag name of fragment\n     * @return void\n     * @Description:  Find a fragment tag name in the stack of MetaphorManager\n     */\n    boolean isTagExist(@NonNull String strTag);\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/interfaces/IMetaphorManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.interfaces;\n\nimport androidx.annotation.IdRes;\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\n\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.interfaces\n * @Description: as a manager interface in public for all class, you can use it by chain operation\n * @date Dec 02,2022\n */\n", " * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.interfaces\n * @Description: as a manager interface in public for all class, you can use it by chain operation\n * @date Dec 02,2022\n */\n\npublic interface IMetaphorManager {\n\n    /**\n     * @Description: bind a listener for communication between base fragment and sub fragment\n     * @param metaphorMessage listener for message\n     * @return: void\n     */", "    public IMetaphorManager bindListener(IMetaphorMessage metaphorMessage);\n\n    /**\n     * @Description: Add container view ID for show fragment, same as MetaphorRes in effect\n     * @containerViewId container view is use to show fragment\n     * @return: void\n     */\n    public void addContainerViewID(@IdRes int containerViewId);\n\n\n    /**\n     * @param fragment it will be add to first containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorManager addFragment(@NonNull Fragment fragment);\n\n\n    /**\n     * @param fragment it will be add to first containerViewId\n     * @param strTag   tag name of fragment\n     * @return IMetaphorManager\n     * @Description: add fragment into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */\n    public IMetaphorManager addFragment(@NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param containerViewId container view is use to show fragment\n     * @param fragment        it will be add to containerViewId\n     * @param strTag          tag name of fragment\n     * @Description: add fragment to FragmentManager for containerViewId and hide\n     * @return: IMetaphorManager\n     */", "    public IMetaphorManager addFragment(@NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param containerViewId container view is use to show fragment\n     * @param fragment        it will be add to containerViewId\n     * @param strTag          tag name of fragment\n     * @Description: add fragment to FragmentManager for containerViewId and hide\n     * @return: IMetaphorManager\n     */\n    public IMetaphorManager addFragment(@IdRes int containerViewId, @NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param fragments the list will be add to first containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorManager addFragment(@IdRes int containerViewId, @NonNull Fragment fragment, @NonNull String strTag);\n\n    /**\n     * @param fragments the list will be add to first containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */\n    public IMetaphorManager addFragment(@NonNull Fragment... fragments);\n\n\n    /**\n     * @param fragments the list will be add to specify Serial Number containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list into stack list, the container view of the fragment is the specify Serial Number containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorManager addFragment(@NonNull Fragment... fragments);\n\n\n    /**\n     * @param fragments the list will be add to specify Serial Number containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list into stack list, the container view of the fragment is the specify Serial Number containerView,\n     * throw exception if resList's size is zero\n     */\n    public IMetaphorManager addFragment(int containerViewSerialNumber, @NonNull Fragment... fragments);\n\n    /**\n     * @param strTags   the tag list for fragments list\n     * @param fragments the list will be add to first containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list and tag list into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorManager addFragment(int containerViewSerialNumber, @NonNull Fragment... fragments);\n\n    /**\n     * @param strTags   the tag list for fragments list\n     * @param fragments the list will be add to first containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list and tag list into stack list, the container view of the fragment is the first containerView,\n     * throw exception if resList's size is zero\n     */\n    public IMetaphorManager addFragment(@NonNull String[] strTags, @NonNull Fragment... fragments);\n\n\n    /**\n     * @param strTags   the tag list for fragments list\n     * @param fragments the list will be add to specify Serial Number containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list and tag list into stack list, the container view of the fragment is the specify Serial Number containerView,\n     * throw exception if resList's size is zero\n     */", "    public IMetaphorManager addFragment(@NonNull String[] strTags, @NonNull Fragment... fragments);\n\n\n    /**\n     * @param strTags   the tag list for fragments list\n     * @param fragments the list will be add to specify Serial Number containerViewId\n     * @return IMetaphorManager\n     * @Description: add fragment list and tag list into stack list, the container view of the fragment is the specify Serial Number containerView,\n     * throw exception if resList's size is zero\n     */\n    public IMetaphorManager addFragment(int containerViewSerialNumber,@NonNull String[] strTags, @NonNull Fragment... fragments);\n\n    /**\n     * @param fragment To be show object\n     * @Description: Show fragment and hide others that is contained in stack list, it will be added when it not existed.\n     * the container view of the fragment is the first containerView in resList, throw exception if resList's size is zero.\n     * @return: IMetaphorManager\n     */", "    public IMetaphorManager addFragment(int containerViewSerialNumber,@NonNull String[] strTags, @NonNull Fragment... fragments);\n\n    /**\n     * @param fragment To be show object\n     * @Description: Show fragment and hide others that is contained in stack list, it will be added when it not existed.\n     * the container view of the fragment is the first containerView in resList, throw exception if resList's size is zero.\n     * @return: IMetaphorManager\n     */\n    public IMetaphorManager showFragment(@NonNull Fragment fragment);\n\n    /**\n     * @param strTag tag name of fragment\n     * @Description: show fragment on container view that tag name is strTag\n     * @return: IMetaphorManager\n     */", "    public IMetaphorManager showFragment(@NonNull Fragment fragment);\n\n    /**\n     * @param strTag tag name of fragment\n     * @Description: show fragment on container view that tag name is strTag\n     * @return: IMetaphorManager\n     */\n    public IMetaphorManager showFragment(@NonNull String strTag);\n\n    /**\n     * @param fragment To be hide object\n     * @Description: Hide fragment whitch is contained in stack list\n     * @return: void\n     */\n    void hideFragment(@NonNull Fragment fragment);\n\n    /**\n     * @param strTag tag name of fragment\n     * @Description: Hide fragment on container view that tag name is strTag\n     * @return: void\n     */\n    void hideFragment(@NonNull String strTag);\n\n    /**\n     * @param tagForFragment tag name of fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(String tagForFragment, int code, Object msg);\n\n    /**\n     * @param fragment target fragment\n     * @Description: send message to another fragment\n     * @return: void\n     */\n    void sendMessageToFragment(Fragment fragment, int code, Object msg);\n\n    /**\n     * @param strTag   tag name of fragment\n     * @return void\n     * @Description:  Find a fragment tag name in the stack of MetaphorManager\n     */\n     boolean isTagExist(@NonNull String strTag);\n\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/interfaces/IMetaphorMessage.java", "chunked_list": ["package com.xuanwenchao.metaphor.interfaces;\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.interfaces\n * @Description:\n * @date Dec 08,2022\n */\npublic interface IMetaphorMessage {\n    /**\n     * @param from the source of message\n     * @param code user customize code of message\n     * @param msg user customize object of message\n     * @Description: receive Metaphor message callback\n     * @return: void\n     */\n    void OnMessageReceive(Object from, int code, Object msg);\n}\n", "public interface IMetaphorMessage {\n    /**\n     * @param from the source of message\n     * @param code user customize code of message\n     * @param msg user customize object of message\n     * @Description: receive Metaphor message callback\n     * @return: void\n     */\n    void OnMessageReceive(Object from, int code, Object msg);\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/exception/MetaphorException.java", "chunked_list": ["package com.xuanwenchao.metaphor.exception;\n\n/**\n * @Package com.xuanwenchao.metaphor.exception\n * @Description: base exception class in metaphor project\n * @author Xuan Wenchao\n * @date Dec 02,2022\n */\n\npublic class MetaphorException extends RuntimeException {\n    public MetaphorException(String msg) {\n        super(msg);\n    }\n}\n", "\npublic class MetaphorException extends RuntimeException {\n    public MetaphorException(String msg) {\n        super(msg);\n    }\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/annotation/MetaphorRes.java", "chunked_list": ["package com.xuanwenchao.metaphor.annotation;\n\nimport androidx.annotation.IdRes;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n", "import java.lang.annotation.Target;\n\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.annotation\n * @Description: It is a annotation whitch named MetaphorRes that is used for container view be predefined\n * @date Dec 02,2022\n */\n", " */\n\n@Inherited\n@Target(ElementType.TYPE) //for class in activity, fragment, dialog ...\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MetaphorRes {\n\n    /**\n    @Description: can predefined one or above container view resource\n    @return: the array type to resource ID", "    @Description: can predefined one or above container view resource\n    @return: the array type to resource ID\n    */\n    @IdRes\n    int[] containerViewIDs() default 0;\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/manager/MetaphorSubFragmentManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.manager;\n\nimport androidx.annotation.NonNull;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorMessage;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\n", "import com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\n\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.manager\n * @Description: In order to action for show or hide in chain operate\n * @date Dec 06,2022\n */\npublic class MetaphorSubFragmentManager implements IMetaphorSubFragmentManager {\n", " */\npublic class MetaphorSubFragmentManager implements IMetaphorSubFragmentManager {\n\n    public static IMetaphorSubFragmentManager create(MetaphorManager metaphorManager, Fragment fragment) {\n        return new MetaphorSubFragmentManager(metaphorManager, fragment);\n    }\n\n    private MetaphorManager m_metaphorManager;\n    private Fragment m_fragment;\n\n    MetaphorSubFragmentManager(MetaphorManager metaphorManager, Fragment fragment) {\n        m_metaphorManager = metaphorManager;\n        m_fragment = fragment;\n    }\n\n    @Override", "    public IMetaphorSubFragmentManager sendMessageToBase(int code, Object msg) {\n        m_metaphorManager.sendMessageToBase(code, msg);\n        return this;\n    }\n\n    @Override\n    public void bindFragmentListener(IMetaphorMessage metaphorMessage) {\n        m_metaphorManager.bindFragmentListener(metaphorMessage);\n    }\n\n    @Override", "    public void sendMessageToFragment(String tagForFragment, int code, Object msg) {\n        m_metaphorManager.sendMessageToFragment(tagForFragment, code, msg);\n    }\n\n    @Override\n    public void sendMessageToFragment(Fragment fragment, int code, Object msg) {\n        m_metaphorManager.sendMessageToFragment(fragment, code, msg);\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager showFragment(@NonNull String strTag) {\n        m_metaphorManager.showFragment(strTag);\n        return this;\n    }\n\n    @Override", "    public IMetaphorSubFragmentManager showFragment(@NonNull String strTag) {\n        m_metaphorManager.showFragment(strTag);\n        return this;\n    }\n\n    @Override\n    public IMetaphorSubFragmentManager showFragment(@NonNull Fragment fragment) {\n        m_metaphorManager.showFragment(fragment);\n        return this;\n    }\n\n    @Override", "    public void addFragment(@NonNull Fragment fragment, @NonNull String strTag) {\n        m_metaphorManager.addFragment(fragment, strTag);\n    }\n\n    @Override\n    public boolean isTagExist(@NonNull String strTag) {\n        return m_metaphorManager.isTagExist(strTag);\n    }\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/manager/MetaphorManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.manager;\n\nimport android.util.Log;\nimport android.util.SparseArray;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;", "import androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.xuanwenchao.metaphor.annotation.MetaphorRes;\nimport com.xuanwenchao.metaphor.exception.MetaphorException;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorManager;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorMessage;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.manager\n * @Description: base function had been supplied implements IMetaphorManager, optional strategy class\n * @date Dec 03,2022\n */\npublic abstract class MetaphorManager implements IMetaphorManager {\n\n    static final String kErrorTag = \"Metaphor Error:\";", " */\npublic abstract class MetaphorManager implements IMetaphorManager {\n\n    static final String kErrorTag = \"Metaphor Error:\";\n    public static boolean isPrintLog = true;\n\n\n    // hashcode of base object : MetaphorManager object\n    static SparseArray m_metaphorManagers = new SparseArray<IMetaphorManager>();\n\n    //map is (Hash Code of fragment address) : (IMetaphorMessage)\n    SparseArray m_fragmentToListener = new SparseArray<IMetaphorMessage>();\n\n    //map is (container view ID) : (FragmentManager)\n    SparseArray m_containerViewMap = new SparseArray<androidx.fragment.app.FragmentManager>();\n\n    //map is (Hash Code of fragment address) : (container view ID)\n    SparseArray m_fragmentToContainerView = new SparseArray<Integer>();\n\n    //map is (Tag String of fragment) : (container view ID)\n    HashMap<String, Fragment> m_tagToFragment = new HashMap<>();\n\n    int[] m_containerViewIds;\n    Object m_baseObject = null;\n    IMetaphorMessage m_metaphorMessage;\n    Fragment m_currentSubFragment; //the fragment that called findMetaphorManager\n", "    public static IMetaphorManager createMetaphorManager(@NonNull Object object) {\n        int objectCode = System.identityHashCode(object);\n        IMetaphorManager iMetaphorManager = (IMetaphorManager) m_metaphorManagers.get(objectCode);\n        if (iMetaphorManager != null) {\n            return iMetaphorManager;\n        }\n        if (object instanceof AppCompatActivity) {\n            MetaphorActivityManager metaphorManager = MetaphorActivityManager.createActivityManager((AppCompatActivity) object);\n            m_metaphorManagers.put(objectCode, metaphorManager);\n            return metaphorManager;\n        } else if (object instanceof Fragment) {\n            IMetaphorManager metaphorManager = MetaphorFragmentManager.createFragmentManager((Fragment) object);\n            m_metaphorManagers.put(objectCode, metaphorManager);\n            return metaphorManager;\n        } else {\n            throw new MetaphorException(\"Base class must used on AppCompatActivity or Fragment\");\n        }\n    }\n\n    /**\n     * @param object It is a fragment that has been added to MetaphorManager\n     * @Description: Find the relative MetaphorManager by sub fragment\n     * @return: MetaphorManager or null if not exist\n     **/", "        } else if (object instanceof Fragment) {\n            IMetaphorManager metaphorManager = MetaphorFragmentManager.createFragmentManager((Fragment) object);\n            m_metaphorManagers.put(objectCode, metaphorManager);\n            return metaphorManager;\n        } else {\n            throw new MetaphorException(\"Base class must used on AppCompatActivity or Fragment\");\n        }\n    }\n\n    /**\n     * @param object It is a fragment that has been added to MetaphorManager\n     * @Description: Find the relative MetaphorManager by sub fragment\n     * @return: MetaphorManager or null if not exist\n     **/", "    public static IMetaphorSubFragmentManager findMetaphorManager(@NonNull Fragment object) {\n        for (int i = 0; i < m_metaphorManagers.size(); i++) {\n            MetaphorManager metaphorManager = (MetaphorManager) (m_metaphorManagers.valueAt(i));\n            int objectCode = System.identityHashCode(object);\n            if (metaphorManager.isContainFragmentCode(objectCode)) {\n                metaphorManager.m_currentSubFragment = object;\n                return MetaphorSubFragmentManager.create(metaphorManager, (Fragment) object);\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * @Description: Retrieve the resource configuration with annotation\n     * @return: void\n     */\n    MetaphorManager(@NonNull Object object) {\n        Class<?> clazz = object.getClass();\n        MetaphorRes metaphorRes = clazz.getAnnotation(MetaphorRes.class);\n        int[] cvIDs = metaphorRes.containerViewIDs();", "        if (cvIDs.length > 0) {\n            m_containerViewIds = cvIDs;\n        }\n    }\n\n    /**\n     * @Description: Release static space (m_metaphorManagers) after object is destroy.\n     * @return: void\n     */\n    void OnMetaphorManagerDestroy() {\n        if (m_baseObject != null) {\n            int objectCode = System.identityHashCode(m_baseObject);\n            m_metaphorManagers.remove(objectCode);\n            m_baseObject = null;\n        }\n    }\n\n\n    @Override", "        if (m_baseObject != null) {\n            int objectCode = System.identityHashCode(m_baseObject);\n            m_metaphorManagers.remove(objectCode);\n            m_baseObject = null;\n        }\n    }\n\n\n    @Override\n    public IMetaphorManager bindListener(IMetaphorMessage metaphorMessage) {\n        m_metaphorMessage = metaphorMessage;\n        return this;\n    }\n\n    void sendMessageToBase(int code, Object msg) {", "    public IMetaphorManager bindListener(IMetaphorMessage metaphorMessage) {\n        m_metaphorMessage = metaphorMessage;\n        return this;\n    }\n\n    void sendMessageToBase(int code, Object msg) {\n        if (m_metaphorMessage != null) {\n            m_metaphorMessage.OnMessageReceive(m_currentSubFragment, code, msg);\n        } else {\n            printErrorLog(\"sendMessageToBase -> code:\" + code + \" msg:\" + msg.toString() + \": base is not bind listener\");\n        }\n    }\n\n    void bindFragmentListener(IMetaphorMessage metaphorMessage) {", "        if (m_currentSubFragment != null && metaphorMessage != null) {\n            int fragmentCode = System.identityHashCode(m_currentSubFragment);\n            m_fragmentToListener.put(fragmentCode, metaphorMessage);\n        } else {\n            printErrorLog(\"bindFragmentListener -> m_currentSubFragment=\" + m_currentSubFragment + \",metaphorMessage=\" + metaphorMessage);\n        }\n    }\n\n    public void sendMessageToFragment(String tagForFragment, int code, Object msg) {\n        if (tagForFragment != null) {\n            Fragment fragment = m_tagToFragment.get(tagForFragment);", "    public void sendMessageToFragment(String tagForFragment, int code, Object msg) {\n        if (tagForFragment != null) {\n            Fragment fragment = m_tagToFragment.get(tagForFragment);\n            if (fragment != null) {\n                sendMessageToFragment(fragment, code, msg);\n            } else {\n                printErrorLog(\"sendMessageToFragment -> tag name:\" + tagForFragment + \" could not be found.\");\n            }\n        } else {\n            printErrorLog(\"sendMessageToFragment -> tag is null\");\n        }\n    }\n", "    public void sendMessageToFragment(Fragment fragment, int code, Object msg) {\n        int fragmentCode = System.identityHashCode(fragment);\n        Object iMetaphorMessage = m_fragmentToListener.get(fragmentCode, null);\n        if (iMetaphorMessage != null) {\n            if (m_currentSubFragment != null) {\n                ((IMetaphorMessage) iMetaphorMessage).OnMessageReceive(m_currentSubFragment, code, msg);\n            } else {\n                ((IMetaphorMessage) iMetaphorMessage).OnMessageReceive(m_baseObject, code, msg);\n            }\n        } else {\n            printErrorLog(\"sendMessageToFragment -> Fragment:\" + fragment + \": is not bind listener\");\n        }\n    }\n\n    void printErrorLog(String strMessage) {", "        if (isPrintLog) {\n            Log.e(kErrorTag, strMessage);\n        }\n    }\n\n    boolean isContainFragmentCode(int fragmentCode) {\n        Object obj = m_fragmentToContainerView.get(fragmentCode);\n        return obj != null;\n    }\n\n    @Override", "    public IMetaphorManager addFragment(@NonNull Fragment fragment) {\n        return this.addFragment(fragment, null);\n    }\n\n    @Override\n    public IMetaphorManager addFragment(@NonNull Fragment fragment, @NonNull String strTag) {\n        if (m_containerViewMap.size() <= 0) {\n            throw new MetaphorException(\"No container view ID be specified! 22178!\");\n        }\n\n        Integer key = m_containerViewMap.keyAt(0);\n        return this.addFragment(key, fragment, strTag);\n    }\n\n    @Override", "    public IMetaphorManager addFragment(int containerViewId, @NonNull Fragment fragment, @NonNull String strTag) {\n        this.addContainerViewID(containerViewId);\n\n        int fragmentCode = System.identityHashCode(fragment);\n        Integer cvIDexist = (Integer) m_fragmentToContainerView.get(fragmentCode);\n        if (cvIDexist != null) {\n            //The fragment will be remove from FragmentManager if existed.\n            ((androidx.fragment.app.FragmentManager) m_containerViewMap.get(containerViewId)).beginTransaction().remove(fragment);\n            m_fragmentToContainerView.delete(fragmentCode);\n        }\n        m_fragmentToContainerView.put(fragmentCode, containerViewId);\n\n        FragmentTransaction fragmentTransaction = ((FragmentManager) m_containerViewMap.get(containerViewId)).beginTransaction();", "        if (strTag == null || strTag.length() == 0) {\n            fragmentTransaction.add(containerViewId, fragment).hide(fragment);\n        } else {\n            m_tagToFragment.remove(strTag);\n            m_tagToFragment.put(strTag, fragment);\n            fragmentTransaction.add(containerViewId, fragment, strTag).hide(fragment);\n        }\n        fragmentTransaction.commitNowAllowingStateLoss();\n        return this;\n    }\n\n\n    @Override", "    public IMetaphorManager addFragment(@NonNull Fragment... fragments) {\n        return this.addFragment(null, fragments);\n    }\n\n    @Override\n    public IMetaphorManager addFragment(int containerViewSerialNumber, @NonNull Fragment... fragments) {\n        return this.addFragment(containerViewSerialNumber, null, fragments);\n    }\n\n    @Override\n    public IMetaphorManager addFragment(@NonNull String[] strTags, @NonNull Fragment... fragments) {\n        return this.addFragment(0, strTags, fragments);\n    }\n\n    @Override", "    public IMetaphorManager addFragment(@NonNull String[] strTags, @NonNull Fragment... fragments) {\n        return this.addFragment(0, strTags, fragments);\n    }\n\n    @Override\n    public IMetaphorManager addFragment(int containerViewSerialNumber, @NonNull String[] strTags, @NonNull Fragment... fragments) {\n        if (m_containerViewMap.size() <= containerViewSerialNumber) {\n            throw new MetaphorException(\"No container view ID be specified! 22220!\");\n        }\n        Integer cvID = m_containerViewMap.keyAt(containerViewSerialNumber);\n        androidx.fragment.app.FragmentManager fmg = (androidx.fragment.app.FragmentManager) m_containerViewMap.valueAt(containerViewSerialNumber);\n\n        FragmentTransaction ft = fmg.beginTransaction();\n        int i = 0;\n", "        for (Fragment f : fragments) {\n            if (strTags != null && strTags.length > i) {\n                m_tagToFragment.remove(strTags[i]);\n                m_tagToFragment.put(strTags[i], f);\n                ft.add(cvID, f, strTags[i]).hide(f);\n            } else {\n                ft.add(cvID, f).hide(f);\n            }\n            int fragmentCode = System.identityHashCode(f);\n            Integer cvIDexist = (Integer) m_fragmentToContainerView.get(fragmentCode);\n            if (cvIDexist != null) {\n                //The fragment will be remove from FragmentManager if existed.\n                ft.remove(f);\n                m_fragmentToContainerView.delete(fragmentCode);\n            }\n            m_fragmentToContainerView.put(fragmentCode, cvID);\n            i++;\n        }\n        ft.commit();\n//        ft.commitNowAllowingStateLoss();\n        return this;\n    }\n\n\n    @Override", "            if (cvIDexist != null) {\n                //The fragment will be remove from FragmentManager if existed.\n                ft.remove(f);\n                m_fragmentToContainerView.delete(fragmentCode);\n            }\n            m_fragmentToContainerView.put(fragmentCode, cvID);\n            i++;\n        }\n        ft.commit();\n//        ft.commitNowAllowingStateLoss();\n        return this;\n    }\n\n\n    @Override", "    public IMetaphorManager showFragment(@NonNull Fragment fragment) {\n        int fragmentCode = System.identityHashCode(fragment);\n        Integer cvIDexist = (Integer) m_fragmentToContainerView.get(fragmentCode);\n        if (cvIDexist != null) {\n            androidx.fragment.app.FragmentManager fragmentManager = ((androidx.fragment.app.FragmentManager) m_containerViewMap.get(cvIDexist));\n            FragmentTransaction ft = fragmentManager.beginTransaction();\n            for (Fragment f : fragmentManager.getFragments()) {\n                int fc = System.identityHashCode(f);\n                Integer cv = (Integer) m_fragmentToContainerView.get(fc);\n                if (cv != null && cv.intValue() == cvIDexist.intValue() && f != fragment) {\n                    ft.hide(f);\n                }\n            }\n            ft.show(fragment);//.addToBackStack(null);\n\n            ft.commit();\n//            ft.commitAllowingStateLoss();\n            int a = 10;\n        } else {\n            throw new MetaphorException(\"No container view ID be found! 221266!\");\n        }\n        return this;\n    }\n\n    @Override", "                if (cv != null && cv.intValue() == cvIDexist.intValue() && f != fragment) {\n                    ft.hide(f);\n                }\n            }\n            ft.show(fragment);//.addToBackStack(null);\n\n            ft.commit();\n//            ft.commitAllowingStateLoss();\n            int a = 10;\n        } else {\n            throw new MetaphorException(\"No container view ID be found! 221266!\");\n        }\n        return this;\n    }\n\n    @Override", "    public IMetaphorManager showFragment(@NonNull String strTag) {\n        Fragment fragment = m_tagToFragment.get(strTag);\n        if (fragment != null) {\n            this.showFragment(fragment);\n        } else {\n            printErrorLog(\"showFragment -> strTag:\" + strTag + \": is not exist\");\n        }\n        return this;\n    }\n\n    @Override", "    public void hideFragment(@NonNull Fragment fragment) {\n        int fragmentCode = System.identityHashCode(fragment);\n        Integer cvIDexist = (Integer) m_fragmentToContainerView.get(fragmentCode);\n        if (cvIDexist != null) {\n            androidx.fragment.app.FragmentManager fragmentManager = ((androidx.fragment.app.FragmentManager) m_containerViewMap.get(cvIDexist));\n            FragmentTransaction ft = fragmentManager.beginTransaction();\n            ft.hide(fragment);\n            ft.commit();\n        } else {\n            throw new MetaphorException(\"No container view ID be found! 221290!\");\n        }\n    }\n\n    @Override", "    public void hideFragment(@NonNull String strTag) {\n        Fragment fragment = m_tagToFragment.get(strTag);\n        if (fragment != null) {\n            this.hideFragment(fragment);\n        } else {\n            printErrorLog(\"hideFragment -> strTag:\" + strTag + \": is not exist\");\n        }\n    }\n\n    @Override\n    public boolean isTagExist(@NonNull String strTag) {\n        Fragment fragment = m_tagToFragment.get(strTag);\n        return fragment != null ? true : false;\n    }\n\n}\n\n", "    public boolean isTagExist(@NonNull String strTag) {\n        Fragment fragment = m_tagToFragment.get(strTag);\n        return fragment != null ? true : false;\n    }\n\n}\n\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/manager/MetaphorActivityManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.manager;\n\nimport android.app.Activity;\nimport android.app.Application;\nimport android.os.Bundle;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.Fragment;", "import androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.Fragment;\n\nimport com.xuanwenchao.metaphor.exception.MetaphorException;\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.manager\n * @Description: MetaphorActivityManager extens MetaphorManager for manage fragment base on Activity, optional strategy class\n * @date Dec 19,2022", " * @Description: MetaphorActivityManager extens MetaphorManager for manage fragment base on Activity, optional strategy class\n * @date Dec 19,2022\n */\nfinal class MetaphorActivityManager extends MetaphorManager {\n\n    static MetaphorActivityManager createActivityManager(@NonNull AppCompatActivity activity) {\n        return new MetaphorActivityManager(activity);\n    }\n\n    MetaphorActivityManager(AppCompatActivity activity) {", "\n    MetaphorActivityManager(AppCompatActivity activity) {\n        super(activity);\n        m_baseObject = activity;\n        activity.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle bundle) {\n\n            }\n\n            @Override", "            public void onActivityStarted(@NonNull Activity activity) {\n\n            }\n\n            @Override\n            public void onActivityResumed(@NonNull Activity activity) {\n\n            }\n\n            @Override\n            public void onActivityPaused(@NonNull Activity activity) {\n\n            }\n\n            @Override", "            public void onActivityPaused(@NonNull Activity activity) {\n\n            }\n\n            @Override\n            public void onActivityStopped(@NonNull Activity activity) {\n\n            }\n\n            @Override\n            public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle bundle) {\n\n            }\n\n            @Override", "            public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle bundle) {\n\n            }\n\n            @Override\n            public void onActivityDestroyed(@NonNull Activity activity) {\n                OnMetaphorManagerDestroy();\n            }\n        });\n\n        if (m_containerViewIds != null && m_containerViewIds.length > 0) {", "        if (m_containerViewIds != null && m_containerViewIds.length > 0) {\n            for (int cvid : m_containerViewIds) {\n                this.addContainerViewID(cvid);\n            }\n        }\n    }\n\n    @Override\n    public void addContainerViewID(int containerViewId) {\n        if (m_baseObject == null) {\n            throw new MetaphorException(\"No base fragment or activity be specified!\");\n        }\n", "    public void addContainerViewID(int containerViewId) {\n        if (m_baseObject == null) {\n            throw new MetaphorException(\"No base fragment or activity be specified!\");\n        }\n\n        if (m_containerViewMap.get(containerViewId) == null) {\n            m_containerViewMap.put(containerViewId, ((AppCompatActivity) m_baseObject).getSupportFragmentManager());\n        }\n    }\n}\n"]}
{"filename": "Metaphor/src/main/java/com/xuanwenchao/metaphor/manager/MetaphorFragmentManager.java", "chunked_list": ["package com.xuanwenchao.metaphor.manager;\n\nimport android.content.Context;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.util.SparseArray;\nimport android.view.View;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;", "import androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.xuanwenchao.metaphor.exception.MetaphorException;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorManager;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorMessage;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor.manager\n * @Description: FragmentManager extens MetaphorManager for manage fragment base on fragment, optional strategy class\n * @date Dec 05,2022", " * @Description: FragmentManager extens MetaphorManager for manage fragment base on fragment, optional strategy class\n * @date Dec 05,2022\n */\nfinal class MetaphorFragmentManager extends MetaphorManager {\n\n    static MetaphorFragmentManager createFragmentManager(@NonNull Fragment fragment) {\n        return new MetaphorFragmentManager(fragment);\n    }\n\n    MetaphorFragmentManager(@NonNull Fragment fragment) {", "\n    MetaphorFragmentManager(@NonNull Fragment fragment) {\n        super(fragment);\n        m_baseObject = fragment;\n        fragment.getFragmentManager().registerFragmentLifecycleCallbacks(new androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks() {\n            @Override\n            public void onFragmentPreAttached(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @NonNull Context context) {\n                super.onFragmentPreAttached(fm, f, context);\n            }\n\n            @Override", "            public void onFragmentAttached(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @NonNull Context context) {\n                super.onFragmentAttached(fm, f, context);\n            }\n\n            @Override\n            public void onFragmentPreCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @Nullable Bundle savedInstanceState) {\n                super.onFragmentPreCreated(fm, f, savedInstanceState);\n            }\n\n            @Override\n            public void onFragmentCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @Nullable Bundle savedInstanceState) {\n                super.onFragmentCreated(fm, f, savedInstanceState);\n            }\n\n            @Override", "            public void onFragmentCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @Nullable Bundle savedInstanceState) {\n                super.onFragmentCreated(fm, f, savedInstanceState);\n            }\n\n            @Override\n            public void onFragmentActivityCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @Nullable Bundle savedInstanceState) {\n                super.onFragmentActivityCreated(fm, f, savedInstanceState);\n            }\n\n            @Override\n            public void onFragmentViewCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @NonNull View v, @Nullable Bundle savedInstanceState) {\n                super.onFragmentViewCreated(fm, f, v, savedInstanceState);\n            }\n\n            @Override", "            public void onFragmentViewCreated(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @NonNull View v, @Nullable Bundle savedInstanceState) {\n                super.onFragmentViewCreated(fm, f, v, savedInstanceState);\n            }\n\n            @Override\n            public void onFragmentStarted(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentStarted(fm, f);\n            }\n\n            @Override\n            public void onFragmentResumed(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentResumed(fm, f);\n            }\n\n            @Override", "            public void onFragmentResumed(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentResumed(fm, f);\n            }\n\n            @Override\n            public void onFragmentPaused(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentPaused(fm, f);\n            }\n\n            @Override\n            public void onFragmentStopped(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentStopped(fm, f);\n            }\n\n            @Override", "            public void onFragmentStopped(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentStopped(fm, f);\n            }\n\n            @Override\n            public void onFragmentSaveInstanceState(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f, @NonNull Bundle outState) {\n                super.onFragmentSaveInstanceState(fm, f, outState);\n            }\n\n            @Override\n            public void onFragmentViewDestroyed(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentViewDestroyed(fm, f);\n            }\n\n            @Override", "            public void onFragmentViewDestroyed(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentViewDestroyed(fm, f);\n            }\n\n            @Override\n            public void onFragmentDestroyed(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentDestroyed(fm, f);\n                OnMetaphorManagerDestroy();\n            }\n\n            @Override", "            public void onFragmentDetached(@NonNull androidx.fragment.app.FragmentManager fm, @NonNull Fragment f) {\n                super.onFragmentDetached(fm, f);\n            }\n        }, false);\n\n        if (m_containerViewIds != null && m_containerViewIds.length > 0) {\n            for (int cvid : m_containerViewIds) {\n                this.addContainerViewID(cvid);\n            }\n        }\n    }\n\n\n    @Override", "    public void addContainerViewID(int containerViewId) {\n        if (m_baseObject == null) {\n            throw new MetaphorException(\"No base fragment or activity be specified!\");\n        }\n\n        if (m_containerViewMap.get(containerViewId) == null) {\n            m_containerViewMap.put(containerViewId, ((Fragment) m_baseObject).getChildFragmentManager());\n        }\n    }\n\n\n}\n\n"]}
{"filename": "Metaphor/src/androidTest/java/com/bangbet/luckybus/ExampleInstrumentedTest.java", "chunked_list": ["package com.bangbet.luckybus;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n\n        assertEquals(\"com.bangbet.luckybus\", appContext.getPackageName());\n    }\n}\n"]}
{"filename": "app/src/test/java/com/xuanwenchao/metaphor_demo/ExampleUnitTest.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/MainActivity.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.TextView;\n\nimport com.xuanwenchao.metaphor.Metaphor;", "\nimport com.xuanwenchao.metaphor.Metaphor;\nimport com.xuanwenchao.metaphor.annotation.MetaphorRes;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorManager;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorMessage;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentA;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentB;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentC;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentX1;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentX2;", "import com.xuanwenchao.metaphor_demo.fragments.FragmentX1;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentX2;\nimport com.xuanwenchao.metaphor_demo.fragments.FragmentX3;\n\n\n/**\n * @author Xuan Wenchao\n * @Package com.xuanwenchao.metaphor_demo\n * @Description: this is a demo of what about Metaphor uses\n * @date May 18,2023", " * @Description: this is a demo of what about Metaphor uses\n * @date May 18,2023\n */\n\n//speecific containers of fragment\n@MetaphorRes(containerViewIDs = {R.id.container_number_one, R.id.container_number_two})\npublic class MainActivity extends AppCompatActivity {\n\n    private static final int CONTAINER_SERIAL_NUMBER_1 = 0;\n    private static final int CONTAINER_SERIAL_NUMBER_2 = 1;\n    public static final int METAPHOR_MESSAGE_TO_SHOW_FA = 11;", "    public static final int METAPHOR_MESSAGE_TO_SHOW_FA = 11;\n    public static final int METAPHOR_MESSAGE_TO_SHOW_FB = 12;\n    public static final int METAPHOR_MESSAGE_TO_SHOW_FC = 13;\n\n    private FragmentX1 m_fx1;\n    private FragmentX2 m_fx2;\n    private FragmentX3 m_fx3;\n    private TextView m_tv_show_fragmentX1;\n    private TextView m_tv_show_fragmentX2;\n    private TextView m_tv_show_fragmentX3;\n    private FragmentA m_fa;\n    private FragmentB m_fb;\n    private FragmentC m_fc;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        m_tv_show_fragmentX1 = findViewById(R.id.tv_show_fragmentX1);\n        m_tv_show_fragmentX2 = findViewById(R.id.tv_show_fragmentX2);\n        m_tv_show_fragmentX3 = findViewById(R.id.tv_show_fragmentX3);\n        initFragments();\n        initClickEvent();\n    }\n\n\n    private void initClickEvent() {\n        m_tv_show_fragmentX1.setOnClickListener(new View.OnClickListener() {\n            @Override", "            public void onClick(View v) {\n                //after executing initFragment you can switch in anywhere\n                Metaphor.with(MainActivity.this).showFragment(m_fx1);\n            }\n        });\n\n        m_tv_show_fragmentX2.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                //after executing initFragment you can switch in anywhere\n                Metaphor.with(MainActivity.this).showFragment(m_fx2);\n            }\n        });\n\n        m_tv_show_fragmentX3.setOnClickListener(new View.OnClickListener() {\n            @Override", "            public void onClick(View v) {\n                //after executing initFragment you can switch in anywhere\n                Metaphor.with(MainActivity.this).showFragment(m_fx2);\n            }\n        });\n\n        m_tv_show_fragmentX3.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                //after executing initFragment you can switch in anywhere\n                Metaphor.with(MainActivity.this).showFragment(m_fx3);\n            }\n        });\n    }\n\n    private void initFragments() {\n        m_fx1 = FragmentX1.newInstance();\n        m_fx2 = FragmentX2.newInstance();\n        m_fx3 = FragmentX3.newInstance();\n", "            public void onClick(View v) {\n                //after executing initFragment you can switch in anywhere\n                Metaphor.with(MainActivity.this).showFragment(m_fx3);\n            }\n        });\n    }\n\n    private void initFragments() {\n        m_fx1 = FragmentX1.newInstance();\n        m_fx2 = FragmentX2.newInstance();\n        m_fx3 = FragmentX3.newInstance();\n", "        IMetaphorManager metaphorManager = Metaphor.with(this);\n\n        //add a set of fragment to specify serial number container (R.id.container_number_two),and show fragment who name is m_fx1\n        metaphorManager.addFragment(CONTAINER_SERIAL_NUMBER_2, m_fx1, m_fx2, m_fx3).showFragment(m_fx1);\n\n        m_fa = FragmentA.newInstance();\n\n        //add and show a fragment who name is m_fa to specify serial number container (R.id.container_number_one)\n        metaphorManager.addFragment(m_fa, \"FA\").showFragment(\"FA\");\n\n        metaphorManager.bindListener(new IMetaphorMessage() {\n            @Override", "            public void OnMessageReceive(Object from, int code, Object msg) {\n                if (from == m_fa || from == m_fb || from == m_fc) {\n                    switch (code) {\n                        case METAPHOR_MESSAGE_TO_SHOW_FA: {\n                            metaphorManager.showFragment(\"FA\");\n                        }\n                        break;\n\n                        case METAPHOR_MESSAGE_TO_SHOW_FB: {\n                            if (false == metaphorManager.isTagExist(\"FB\")) {\n                                //add fragment dynamically if it is necessary\n                                m_fb = FragmentB.newInstance();\n                                metaphorManager.addFragment(m_fb, \"FB\");\n                            }\n                            metaphorManager.showFragment(\"FB\");\n                        }\n                        break;\n\n                        case METAPHOR_MESSAGE_TO_SHOW_FC: {", "                            if (false == metaphorManager.isTagExist(\"FB\")) {\n                                //add fragment dynamically if it is necessary\n                                m_fb = FragmentB.newInstance();\n                                metaphorManager.addFragment(m_fb, \"FB\");\n                            }\n                            metaphorManager.showFragment(\"FB\");\n                        }\n                        break;\n\n                        case METAPHOR_MESSAGE_TO_SHOW_FC: {\n                            if (false == metaphorManager.isTagExist(\"FC\")) {\n                                //add fragment dynamically if it is necessary\n                                m_fc = FragmentC.newInstance();\n                                metaphorManager.addFragment(m_fc, \"FC\");\n                            }\n                            metaphorManager.showFragment(\"FC\");\n                        }\n                        break;\n\n                    }\n                }\n            }\n        });\n    }\n}", "                            if (false == metaphorManager.isTagExist(\"FC\")) {\n                                //add fragment dynamically if it is necessary\n                                m_fc = FragmentC.newInstance();\n                                metaphorManager.addFragment(m_fc, \"FC\");\n                            }\n                            metaphorManager.showFragment(\"FC\");\n                        }\n                        break;\n\n                    }\n                }\n            }\n        });\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentX2.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n", "import android.view.ViewGroup;\n\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentX2#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentX2 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX2() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX2.\n     */\n    // TODO: Rename and change types and number of parameters", " */\npublic class FragmentX2 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX2() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX2.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentX2 newInstance() {\n        FragmentX2 fragment = new FragmentX2();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_x2, container, false);\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentC.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;", "import android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.xuanwenchao.metaphor.Metaphor;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\nimport com.xuanwenchao.metaphor_demo.MainActivity;\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.", "/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentC#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentC extends Fragment {\n    private TextView m_tv_show_fragmenta;\n    private TextView m_tv_show_fragmentb;\n\n    public FragmentC() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     * @return A new instance of fragment FragmentC.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentC newInstance() {\n        FragmentC fragment = new FragmentC();\n\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.fragment_c, container, false);\n\n        m_tv_show_fragmenta = rootView.findViewById(R.id.tv_show_fragmenta);\n        m_tv_show_fragmentb = rootView.findViewById(R.id.tv_show_fragmentb);\n\n        //you can call getManager to get MetaphorManager because it is already created in MainActivity.java\n        IMetaphorSubFragmentManager metaphorSubFragmentManager = Metaphor.getManager(FragmentC.this);\n\n        m_tv_show_fragmenta.setOnClickListener(new View.OnClickListener() {\n            @Override", "            public void onClick(View v) {\n                //there are two ways to implement it\n                //first\n                metaphorSubFragmentManager.sendMessageToBase(MainActivity.METAPHOR_MESSAGE_TO_SHOW_FA,null);\n\n                //second\n                //show fragment who tag name is FB\n//                metaphorSubFragmentManager.showFragment(\"FA\");\n            }\n        });\n\n        m_tv_show_fragmentb.setOnClickListener(new View.OnClickListener() {\n            @Override", "            public void onClick(View v) {\n                //there are two ways to implement it\n                //first\n//                metaphorSubFragmentManager.sendMessageToBase(MainActivity.METAPHOR_MESSAGE_TO_SHOW_FB,null);\n\n                //second\n                //show fragment who tag name is FB\n                metaphorSubFragmentManager.showFragment(\"FB\");\n\n            }\n        });\n\n        return rootView;\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentX3.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n", "import android.view.ViewGroup;\n\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentX3#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentX3 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX3() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX3.\n     */\n    // TODO: Rename and change types and number of parameters", " */\npublic class FragmentX3 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX3() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX3.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentX3 newInstance() {\n        FragmentX3 fragment = new FragmentX3();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_x3, container, false);\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentB.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;", "import android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.xuanwenchao.metaphor.Metaphor;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\nimport com.xuanwenchao.metaphor_demo.MainActivity;\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.", "/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentB#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentB extends Fragment {\n    private TextView m_tv_show_fragmenta;\n    private TextView m_tv_show_fragmentc;\n    private FragmentC m_fc;\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n\n    public FragmentB() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentB.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentB newInstance() {\n        FragmentB fragment = new FragmentB();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.fragment_b, container, false);\n\n        m_tv_show_fragmenta = rootView.findViewById(R.id.tv_show_fragmenta);\n        m_tv_show_fragmentc = rootView.findViewById(R.id.tv_show_fragmentc);\n\n        //you can call getManager to get MetaphorManager because it is already created in MainActivity.java\n        IMetaphorSubFragmentManager metaphorSubFragmentManager = Metaphor.getManager(FragmentB.this);\n\n        m_tv_show_fragmenta.setOnClickListener(new View.OnClickListener() {\n            @Override", "            public void onClick(View v) {\n                //show fragment who tag name is FB\n                metaphorSubFragmentManager.showFragment(\"FA\");\n            }\n        });\n\n        m_tv_show_fragmentc.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                //there are two ways to implement it\n                //first\n                metaphorSubFragmentManager.sendMessageToBase(MainActivity.METAPHOR_MESSAGE_TO_SHOW_FC,null);\n\n                //second", "            public void onClick(View v) {\n                //there are two ways to implement it\n                //first\n                metaphorSubFragmentManager.sendMessageToBase(MainActivity.METAPHOR_MESSAGE_TO_SHOW_FC,null);\n\n                //second\n                //you must use Metaphor.with(this) to create a new MetaphorManager if you want to add a new subfragment to the container in FragmentB\n//                if (false == metaphorSubFragmentManager.isTagExist(\"FC\")) {\n//                    //add fragment dynamically if it is necessary\n//                    m_fc = FragmentC.newInstance();\n//                    metaphorSubFragmentManager.addFragment(m_fc, \"FC\");\n//                }\n                //show fragment who tag name is FC\n//                metaphorSubFragmentManager.showFragment(\"FC\");\n\n            }\n        });\n\n        return rootView;\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentA.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;", "import android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.xuanwenchao.metaphor.Metaphor;\nimport com.xuanwenchao.metaphor.interfaces.IMetaphorSubFragmentManager;\nimport com.xuanwenchao.metaphor_demo.MainActivity;\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.", "/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentA#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentA extends Fragment {\n\n    private TextView m_tv_show_fragmentb;\n    private FragmentB m_fb;\n\n    public FragmentA() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentA.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentA newInstance() {\n        FragmentA fragment = new FragmentA();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.fragment_a, container, false);\n        m_tv_show_fragmentb = rootView.findViewById(R.id.tv_show_fragmentb);\n        m_tv_show_fragmentb.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                IMetaphorSubFragmentManager metaphorSubFragmentManager = Metaphor.getManager(FragmentA.this);\n\n                //there are two ways to implement it\n                //first\n                metaphorSubFragmentManager.sendMessageToBase(MainActivity.METAPHOR_MESSAGE_TO_SHOW_FB,null);\n\n\n                //second\n                //you can call getManager to get MetaphorManager because it is already created in MainActivity.java", "                //you must use Metaphor.with(this) to create a new MetaphorManager if you want to add a new subfragment to the container in FragmentA\n//                if (false == metaphorSubFragmentManager.isTagExist(\"FB\")) {\n//                    //add fragment dynamically if it is necessary\n//                    m_fb = FragmentB.newInstance();\n//                    metaphorSubFragmentManager.addFragment(m_fb, \"FB\");\n//                }\n                //show fragment who tag name is FB\n//                metaphorSubFragmentManager.showFragment(\"FB\");\n\n            }\n        });\n        return rootView;\n    }\n}"]}
{"filename": "app/src/main/java/com/xuanwenchao/metaphor_demo/fragments/FragmentX1.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo.fragments;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n", "import android.view.ViewGroup;\n\nimport com.xuanwenchao.metaphor_demo.R;\n\n/**\n * A simple {@link Fragment} subclass.\n * Use the {@link FragmentX1#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class FragmentX1 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX1() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX1.\n     */\n    // TODO: Rename and change types and number of parameters", " */\npublic class FragmentX1 extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public FragmentX1() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment FragmentX1.\n     */\n    // TODO: Rename and change types and number of parameters", "    public static FragmentX1 newInstance() {\n        FragmentX1 fragment = new FragmentX1();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_x1, container, false);\n    }\n}"]}
{"filename": "app/src/androidTest/java/com/xuanwenchao/metaphor_demo/ExampleInstrumentedTest.java", "chunked_list": ["package com.xuanwenchao.metaphor_demo;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"com.xuanwenchao.metaphor_master\", appContext.getPackageName());\n    }\n}"]}
