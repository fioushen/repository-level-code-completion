{"filename": "Semana 2/Lunes/Primos/src/primos/Primos.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage primos;\n\nimport java.util.Scanner;\n\npublic class Primos {\n\n    public static void main(String[] args) {\n        System.out.println(\"Por favor ingrese un n\u00famero\");\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        int aux = number -1;\n        boolean isPrime = true;\n        ", "public class Primos {\n\n    public static void main(String[] args) {\n        System.out.println(\"Por favor ingrese un n\u00famero\");\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        int aux = number -1;\n        boolean isPrime = true;\n        \n        while (aux > 1) {\n            if (number%aux == 0) {\n                isPrime = false;\n                break;\n            }\n            aux--;\n        }", "        while (aux > 1) {\n            if (number%aux == 0) {\n                isPrime = false;\n                break;\n            }\n            aux--;\n        }\n        if (isPrime){\n            System.out.println(\"Es primo \");\n        } else {\n            System.out.println(\"No es primo\");\n        }\n    }\n    \n}\n"]}
{"filename": "Semana 2/Lunes/Lista/src/lista/Nodo.java", "chunked_list": ["package lista;\n\npublic class Nodo {\n    private int element;\n    private Nodo next;\n\n    public Nodo(int element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public int getElement() {\n        return element;\n    }\n\n    public void setElement(int element) {\n        this.element = element;\n    }\n\n    public Nodo getNext() {\n        return next;\n    }\n", "    public Nodo getNext() {\n        return next;\n    }\n\n    public void setNext(Nodo next) {\n        this.next = next;\n    }\n\n    \n    \n    \n}\n"]}
{"filename": "Semana 2/Lunes/Lista/src/lista/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage lista;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n", " * @author Estudiante\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Nodo nodo = new Nodo(5);\n        Lista list = new Lista();\n        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.printList();\n    }\n    \n}\n"]}
{"filename": "Semana 2/Lunes/Lista/src/lista/Lista.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage lista;\n\n/**\n *\n * @author Estudiante\n */\npublic class Lista {\n    \n    private Nodo head;\n    private int length;\n\n    public Lista() {\n        this.head = null;\n        this.length = 0;\n    }\n", " * @author Estudiante\n */\npublic class Lista {\n    \n    private Nodo head;\n    private int length;\n\n    public Lista() {\n        this.head = null;\n        this.length = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n    \n    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    ", "    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    \n    public void insertBegin(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n    ", "    public void insertFinal(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            Nodo pointer = getHead();\n            while (pointer.getNext() != null) {\n                pointer = pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    ", "    public void insertInIndex(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            Nodo pointer = getHead();\n            while (pointer.getNext() != null) {\n                pointer = pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    ", "    public void printList() {\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = pointer.getNext();\n        }\n    }\n    \n}\n"]}
{"filename": "Semana 2/Miercoles/Lista/src/lista/ILista.java", "chunked_list": ["package lista;\n\n\npublic interface ILista {\n    public void insertBegin(int element);\n    public void insertFinal(int element);\n    public void insertInIndex(int element, int index);\n    public Nodo deleteFinal();\n    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();", "    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();\n    public boolean isEmpty();\n}\n"]}
{"filename": "Semana 2/Miercoles/Lista/src/lista/Nodo.java", "chunked_list": ["package lista;\n\npublic class Nodo {\n    private int element;\n    private Object next;\n\n    public Nodo(int element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public int getElement() {\n        return element;\n    }\n\n    public void setElement(int element) {\n        this.element = element;\n    }\n\n    public Object getNext() {\n        return next;\n    }\n", "    public Object getNext() {\n        return next;\n    }\n\n    public void setNext(Nodo next) {\n        this.next = next;\n    }\n\n    \n    \n    \n}\n"]}
{"filename": "Semana 2/Miercoles/Lista/src/lista/ListaArrays.java", "chunked_list": ["\npackage lista;\n\n\npublic class ListaArrays implements ILista {\n\n    @Override\n    public void insertBegin(int element) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override", "    public void insertFinal(int element) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public void insertInIndex(int element, int index) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public Nodo deleteFinal() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override", "    public Nodo deleteFinal() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public Nodo deleteBegin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public Nodo deleteInIndex(int index) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override", "    public Nodo deleteInIndex(int index) {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public void printList() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public boolean isEmpty() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n    \n}\n", "    public boolean isEmpty() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n    \n}\n"]}
{"filename": "Semana 2/Miercoles/Lista/src/lista/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage lista;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n", " * @author Estudiante\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Nodo nodo = new Nodo(5);\n        Lista list = new Lista();\n        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.insertInIndex(11, 3);\n        list.deleteFinal();\n        list.deleteFinal();\n        list.deleteBegin();\n        list.deleteInIndex(2);\n        list.deleteInIndex(6);\n        list.printList();\n    }\n    \n}\n"]}
{"filename": "Semana 2/Miercoles/Lista/src/lista/Lista.java", "chunked_list": ["package lista;\n\n/**\n *\n * @author Estudiante\n */\npublic class Lista implements ILista{\n    \n    private Nodo head;\n    private int length;\n\n    public Lista() {\n        this.head = null;\n        this.length = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n    \n    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    ", "    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    \n    public void insertBegin(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n    ", "    public void insertFinal(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            Nodo pointer = getHead();\n            while (pointer.getNext() != null) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    ", "    public void insertInIndex(int element, int index) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            if (index == 0){\n                insertBegin(element);\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    int cont = 0;", "                if (index < length) {\n                    Nodo pointer = getHead();\n                    int cont = 0;\n                    while ( cont< index-1 && pointer != null) {\n                        pointer = (Nodo) pointer.getNext();\n                        cont++;\n                    }\n                    node.setNext((Nodo) pointer.getNext());\n                    pointer.setNext(node);\n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n    }\n    ", "    public Nodo deleteFinal(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n            if (length > 1){\n                while (((Nodo) (pointer.getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "                while (((Nodo) (pointer.getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) getHead().getNext());\n            pointer.setNext(null);\n            length--;\n            return pointer;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteInIndex(int index){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            if (index == 0){\n                deleteBegin();\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    Nodo pointer2;\n                    int cont = 0;", "                    while ( cont< index-1 && pointer != null) {\n                        pointer = (Nodo) pointer.getNext();\n                        cont++;\n                    }\n                    pointer2 = (Nodo) pointer.getNext();\n                    pointer.setNext((Nodo) pointer2.getNext());\n                    pointer2.setNext(null);\n                    return pointer2;\n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n        return null;\n    }\n    ", "    public void printList() {\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = (Nodo) pointer.getNext();\n        }\n    }\n\n    \n}\n"]}
{"filename": "Semana 3/ListasDobles/src/listasdobles/ILista.java", "chunked_list": ["package listasdobles;\n\n\npublic interface ILista {\n    public void insertBegin(Object element);\n    public void insertFinal(Object element);\n    public void insertInIndex(Object element, int index);\n    public NodoDoble deleteFinal();\n    public NodoDoble deleteBegin();\n    public NodoDoble deleteInIndex(int index);\n    public void printList();", "    public NodoDoble deleteBegin();\n    public NodoDoble deleteInIndex(int index);\n    public void printList();\n    public boolean isEmpty();\n}\n"]}
{"filename": "Semana 3/ListasDobles/src/listasdobles/NodoDoble.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage listasdobles;\n\npublic class NodoDoble {\n    private NodoDoble next, previous;\n    private Object element;\n\n    public NodoDoble(Object element) {\n        this.next = this.previous = null;\n        this.element = element;\n    }\n", "    public NodoDoble getNext() {\n        return next;\n    }\n\n    public void setNext(NodoDoble next) {\n        this.next = next;\n    }\n\n    public NodoDoble getPrevious() {\n        return previous;\n    }\n", "    public NodoDoble getPrevious() {\n        return previous;\n    }\n\n    public void setPrevious(NodoDoble previous) {\n        this.previous = previous;\n    }\n\n    public Object getElement() {\n        return element;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object element) {\n        this.element = element;\n    }\n    \n    \n}\n"]}
{"filename": "Semana 3/ListasDobles/src/listasdobles/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage listasdobles;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */", " * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        ListaDoble list = new ListaDoble();\n        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.printList();\n        list.deleteInIndex(5);\n        list.printList();\n    }\n    \n}\n", "        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.printList();\n        list.deleteInIndex(5);\n        list.printList();\n    }\n    \n}\n"]}
{"filename": "Semana 3/ListasDobles/src/listasdobles/ListaDoble.java", "chunked_list": ["package listasdobles;\n\npublic class ListaDoble implements ILista{\n    private NodoDoble head, tail;\n    private int size;\n\n    public ListaDoble() {\n        this.head = this.tail = null;\n        this.size = 0;\n    }\n", "    public NodoDoble getHead() {\n        return head;\n    }\n\n    public void setHead(NodoDoble head) {\n        this.head = head;\n    }\n\n    public NodoDoble getTail() {\n        return tail;\n    }\n", "    public NodoDoble getTail() {\n        return tail;\n    }\n\n    public void setTail(NodoDoble tail) {\n        this.tail = tail;\n    }\n\n    public int getSize() {\n        return size;\n    }\n", "    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n\n    @Override\n    public void insertBegin(Object element) {\n        NodoDoble node = new NodoDoble(element);", "    public void insertBegin(Object element) {\n        NodoDoble node = new NodoDoble(element);\n        if (isEmpty()) {\n            setHead(node);\n            setTail(node);\n        } else {\n            getHead().setPrevious(node);\n            node.setNext(getHead());\n            setHead(node);\n        }\n        size++;\n    }\n\n    @Override", "    public void insertFinal(Object element) {\n        NodoDoble node = new NodoDoble(element);\n        if(isEmpty()) {\n            setHead(node);\n            setTail(node);\n        } else {\n            NodoDoble pointer = getTail();\n            node.setPrevious(pointer);\n            pointer.setNext(node);\n            setTail(node);\n        }\n        size++;\n    }\n\n    @Override", "    public void insertInIndex(Object element, int index) {\n        \n    }\n\n    @Override\n    public NodoDoble deleteFinal() {\n        if(isEmpty()) {\n            System.out.println(\"No hay elementos en la lista\");\n        } else {\n            NodoDoble pointer = getTail();\n            if (getSize() == 1) {\n                setHead(null);\n                setTail(null);\n            } else {\n                NodoDoble pointer2 = pointer.getPrevious();\n                pointer.setPrevious(null);\n                pointer2.setNext(null);\n                setTail(pointer2);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }\n\n    @Override", "            if (getSize() == 1) {\n                setHead(null);\n                setTail(null);\n            } else {\n                NodoDoble pointer2 = pointer.getPrevious();\n                pointer.setPrevious(null);\n                pointer2.setNext(null);\n                setTail(pointer2);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }\n\n    @Override", "    public NodoDoble deleteBegin() {\n        if(isEmpty()) {\n            System.out.println(\"No hay elementos en la lista\");\n        } else {\n            NodoDoble pointer = getHead();\n            if (getSize() == 1) {\n                setHead(null);\n                setTail(null);\n            } else {\n                NodoDoble pointer2 = pointer.getNext();\n                pointer.setNext(null);\n                pointer2.setPrevious(null);\n                setHead(pointer2);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }\n\n    @Override", "    public NodoDoble deleteInIndex(int index) {\n        if(isEmpty()) {\n            System.out.println(\"No hay elementos en la lista\");\n        } else if( index >= getSize()){\n            System.out.println(\"Error en indice\");\n        } else {\n            if (index < getSize()/2) {\n                NodoDoble pointer = getHead();\n                if (index == 0){\n                    deleteBegin();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;", "                if (index == 0){\n                    deleteBegin();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< index-1 && pointer != null) {\n                        pointer = (NodoDoble) pointer.getNext();\n                        cont++;\n                    }\n                    pointer2 = pointer.getNext();\n                    pointer.setNext(pointer2.getNext());\n                    pointer2.getNext().setPrevious(pointer);\n                    pointer2.setNext(null);\n                    pointer2.setPrevious(null);\n                    return pointer2;\n                }\n            } else {\n                NodoDoble pointer = getTail();", "                if (index == getSize()-1){\n                    deleteFinal();\n                } else {\n                    NodoDoble pointer2;\n                    int cont = 0;\n                    while ( cont< (getSize()-index) && pointer != null) {\n                        pointer = (NodoDoble) pointer.getPrevious();\n                        cont++;\n                    }\n                    //System.out.println(pointer.getElement());\n                    pointer2 = pointer.getNext();\n                    pointer.setNext(pointer2.getNext());\n                    pointer2.getNext().setPrevious(pointer);\n                    pointer2.setNext(null);\n                    pointer2.setPrevious(null);\n                    return null;\n                }\n            }\n            size--;\n        }\n        return null;\n    }\n\n    @Override", "    public void printList() {\n        NodoDoble pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = pointer.getNext();\n        }\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return getHead() == null && getTail() == null;\n    }\n    \n    \n    \n    \n}\n", "    public boolean isEmpty() {\n        return getHead() == null && getTail() == null;\n    }\n    \n    \n    \n    \n}\n"]}
{"filename": "Semana 3/ListasArrays/ListasArrays/src/listasarrays/ListasArrays.java", "chunked_list": ["package listasarrays;\n\n\npublic class ListasArrays {\n    \n    private NodoArray[] array;\n    private int head;\n    private int maxSize;\n    private int size;\n\n    public ListasArrays(int maxSize) {\n        this.size = 1;\n        this.array = new NodoArray[1];\n        this.maxSize = maxSize;\n        this.head = 0;\n    }\n    ", "    public boolean isEmpty() {\n        return getArray()[getHead()] == null; \n    }\n\n    public NodoArray[] getArray() {\n        return array;\n    }\n\n    public void setArray(NodoArray[] array) {\n        this.array = array;\n    }\n", "    public void setArray(NodoArray[] array) {\n        this.array = array;\n    }\n\n    public int getHead() {\n        return head;\n    }\n\n    public void setHead(int head) {\n        this.head = head;\n    }\n", "    public void setHead(int head) {\n        this.head = head;\n    }\n\n    public int getMaxSize() {\n        return maxSize;\n    }\n\n    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n", "    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n    ", "    public void setSize(int size) {\n        this.size = size;\n    }\n    \n    public int searchSpace() {\n        for (int i = 0; i < getSize(); i++) {\n            if(getArray()[i] == null) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    ", "    public void insertBegin(Object object) {\n        NodoArray node = new NodoArray(object);\n        if (isEmpty()) {\n            getArray()[0] = node;\n        } else {\n            int position = searchSpace();\n            if(position != -1) {\n                getArray()[position] = node;\n                node.setNext(getHead());\n                setHead(position);\n            } else {", "                if (getSize() == getMaxSize()) {\n                    System.out.println(\"No hay espacio disponible\");\n                } else {\n                    NodoArray[] newArray = new NodoArray[getSize()+1];\n                    for (int i = 0; i < getSize(); i++) {\n                        newArray[i] = getArray()[i];\n                    }\n                    node.setNext(getHead());\n                    setHead(getSize());\n                    newArray[getSize()] = node;\n                    setSize(getSize()+1);\n                    setArray(newArray);\n                }\n            }\n        }\n    }\n    ", "    public Object deleteBegin() {\n        NodoArray pointer = getArray()[getHead()];\n        getArray()[getHead()] = null;\n        setHead(pointer.getNext());\n        return pointer.getElement();\n    }\n}\n"]}
{"filename": "Semana 3/ListasArrays/ListasArrays/src/listasarrays/Main.java", "chunked_list": ["\npackage listasarrays;\n\n/**\n *\n * @author anton\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */", "    public static void main(String[] args) {\n        // TODO code application logic here\n    }\n    \n}\n"]}
{"filename": "Semana 3/ListasArrays/ListasArrays/src/listasarrays/NodoArray.java", "chunked_list": ["package listasarrays;\n\npublic class NodoArray {\n    private Object element;\n    private Integer next;\n\n    public NodoArray(Object elemento) {\n        this.element = elemento;\n        this.next = null;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object elemento) {\n        this.element = elemento;\n    }\n\n    public Integer getNext() {\n        return next;\n    }\n", "    public Integer getNext() {\n        return next;\n    }\n\n    public void setNext(Integer siguiente) {\n        this.next = siguiente;\n    }\n    \n    \n    \n    \n}\n"]}
{"filename": "Semana 9/Trees/src/trees/Nodo.java", "chunked_list": ["package trees;\n\n\npublic class Nodo {\n    \n    private Integer element;\n    private Nodo[] sons;\n\n    public Nodo(Integer element) {\n        this.element = element;\n        this.sons = new Nodo[0];\n    }\n", "    public Integer getElement() {\n        return element;\n    }\n\n    public void setElement(Integer element) {\n        this.element = element;\n    }\n\n    public Nodo[] getSons() {\n        return sons;\n    }\n", "    public void setSons(Nodo[] sons) {\n        this.sons = sons;\n    }\n    \n    public boolean isLeaf() {\n        return sons == null || sons.length == 0;\n    }\n    \n}\n"]}
{"filename": "Semana 9/Trees/src/trees/Main.java", "chunked_list": ["package trees;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Tree tree = new Tree();\n        tree.insertRecursive(1, -1, null);\n        tree.insertRecursive(2, tree.getRoot().getElement(), tree.getRoot());\n        tree.insertRecursive(3, tree.getRoot().getElement(), tree.getRoot());\n        tree.insertRecursive(4, tree.getRoot().getElement(), tree.getRoot());\n        tree.insertRecursive(5, tree.getRoot().getElement(), tree.getRoot());\n        tree.insertRecursive(6, tree.getRoot().getElement(), tree.getRoot());\n        tree.printPreOrden(tree.getRoot());\n        System.out.println(\"Este fue u arbol sencillo\");\n        \n        tree.insertRecursive(20, 2, tree.getRoot());\n        tree.insertRecursive(22, 2, tree.getRoot());\n        tree.insertRecursive(24, 2, tree.getRoot());\n        tree.insertRecursive(50, 5, tree.getRoot());\n        tree.insertRecursive(52, 5, tree.getRoot());\n        tree.insertRecursive(54, 5, tree.getRoot());\n        \n        tree.printPreOrden(tree.getRoot());\n    } \n}\n"]}
{"filename": "Semana 9/Trees/src/trees/Tree.java", "chunked_list": ["package trees;\n\n\npublic class Tree {\n    private Nodo root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Nodo getRoot() {\n        return root;\n    }\n", "    public Nodo getRoot() {\n        return root;\n    }\n\n    public void setRoot(Nodo root) {\n        this.root = root;\n    }\n    \n    public boolean isEmpty() {\n        return root == null;\n    }\n    ", "    public boolean isEmpty() {\n        return root == null;\n    }\n    \n    public void insertRecursive(Integer element, int fatherElement, Nodo pointer) {\n        Nodo nodo = new Nodo(element);\n        if (isEmpty()) {\n            setRoot(nodo);\n        } else{\n            if (pointer.getElement() == fatherElement) {\n                // Consegui el padre para asignarle el nuevo nodo como hijo\n                increaseSons(nodo, pointer);\n            } else {", "            if (pointer.getElement() == fatherElement) {\n                // Consegui el padre para asignarle el nuevo nodo como hijo\n                increaseSons(nodo, pointer);\n            } else {\n                for (int i = 0; i < pointer.getSons().length; i++) {\n                    if (pointer.getSons()[i].getElement() == fatherElement) {\n                        increaseSons(nodo, pointer.getSons()[i]);\n                    } else {\n                        insertRecursive(element, fatherElement, pointer.getSons()[i]);\n                    }\n                }\n            }\n        }\n    }\n    ", "    public void increaseSons(Nodo nodo, Nodo father) {\n        Nodo[] newSons = new Nodo[father.getSons().length + 1];\n        for (int i = 0; i < father.getSons().length; i++) {\n            newSons[i] = father.getSons()[i];\n        }\n        newSons[newSons.length - 1] = nodo;\n        father.setSons(newSons);\n    }\n    \n    public void printPreOrden(Nodo raiz) {\n        System.out.println(\"[ \"+raiz.getElement() + \" ]\");", "    public void printPreOrden(Nodo raiz) {\n        System.out.println(\"[ \"+raiz.getElement() + \" ]\");\n        for (int i = 0; i < raiz.getSons().length; i++) {\n            printPreOrden(raiz.getSons()[i]);\n        }\n    }\n}"]}
{"filename": "Semana 5/Stacks/src/stacks/Nodo.java", "chunked_list": ["package stacks;\n\npublic class Nodo {\n    private Object element;\n    private Nodo next;\n\n    public Nodo(Object element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object element) {\n        this.element = element;\n    }\n\n    public Nodo getNext() {\n        return next;\n    }\n", "    public Nodo getNext() {\n        return next;\n    }\n\n    public void setNext(Nodo next) {\n        this.next = next;\n    }\n    \n    \n}\n"]}
{"filename": "Semana 5/Stacks/src/stacks/IPilas.java", "chunked_list": ["package stacks;\n\npublic interface IPilas {\n    public void push(Object element);\n    public void pop();\n    public boolean isEmpty();\n    public Nodo getPeek();\n    public void setPeek(Nodo nodo);\n    public int getLength();\n    public void printStack();\n}\n", "    public int getLength();\n    public void printStack();\n}\n"]}
{"filename": "Semana 5/Stacks/src/stacks/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage stacks;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */", " * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        for (int i = 0; i < 10; i++) {\n            stack.push(i);\n        }\n        stack.printStack();\n        System.out.println(\"Delete\");", "        for (int i = 0; i < 10; i++) {\n            stack.push(i);\n        }\n        stack.printStack();\n        System.out.println(\"Delete\");\n        for (int i = 0; i < 4; i++) {\n            stack.pop();\n        }\n        stack.printStack();\n    }\n    \n}\n"]}
{"filename": "Semana 5/Stacks/src/stacks/Stack.java", "chunked_list": ["package stacks;\n\n\npublic class Stack implements IPilas {\n    private Nodo peek;\n    private int length;\n\n    public Stack() {\n        this.peek = null;\n        this.length = 0;\n    }\n\n\n    @Override", "    public void push(Object element) {\n        Nodo nodo = new Nodo(element);\n        if (isEmpty()) {\n            setPeek(nodo);\n        } else {\n            nodo.setNext(getPeek());\n            setPeek(nodo);\n        }\n        length++;\n    }\n\n    @Override", "    public void pop() {\n        if (isEmpty()) {\n            System.out.println(\"The stack is empty\");\n        } else {\n            Nodo pointer = getPeek();\n            setPeek(getPeek().getNext());\n            pointer.setNext(null);\n            length--;\n        }\n    }\n    \n\n    @Override", "    public boolean isEmpty() {\n        return getPeek() == null;\n    }\n\n    @Override\n    public Nodo getPeek() {\n        return peek;\n    }\n\n    @Override\n    public void setPeek(Nodo nodo) {\n        \n        this.peek = nodo;\n    }\n\n    @Override", "    public void setPeek(Nodo nodo) {\n        \n        this.peek = nodo;\n    }\n\n    @Override\n    public int getLength() {\n        return length;\n    }\n\n    @Override", "    public void printStack() {\n        Nodo pointer = getPeek();\n        while (pointer != null){\n            System.out.println(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = pointer.getNext();\n        }\n    }\n    \n}\n"]}
{"filename": "Semana 5/Ejercicios/src/ejercicios/ILista.java", "chunked_list": ["package ejercicios;\n\n\npublic interface ILista {\n    public void insertBegin(Object element);\n    public void insertFinal(Object element);\n    public void insertInIndex(Object element, int index);\n    public Nodo deleteFinal();\n    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();", "    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();\n    public boolean isEmpty();\n}\n"]}
{"filename": "Semana 5/Ejercicios/src/ejercicios/Nodo.java", "chunked_list": ["package ejercicios;\n\npublic class Nodo {\n    private Object element;\n    private Nodo next;\n\n    public Nodo(Object element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object element) {\n        this.element = element;\n    }\n\n    public Nodo getNext() {\n        return next;\n    }\n", "    public Nodo getNext() {\n        return next;\n    }\n\n    public void setNext(Nodo next) {\n        this.next = next;\n    }\n\n    \n    \n    \n}\n"]}
{"filename": "Semana 5/Ejercicios/src/ejercicios/Ejercicios.java", "chunked_list": ["\npackage ejercicios;\n\n\npublic class Ejercicios {\n\n    public static void main(String[] args) {\n        Lista list = new Lista();\n        Lista list2 = new Lista();\n        Lista list3 = new Lista();\n        \n        //Ejercicio 10\n        /*list.insertFinal(\"a\");\n        list.insertFinal(\"r\");\n        list.insertFinal(\"e\");\n        list.insertFinal(\"p\");\n        list.insertFinal(\"e\");\n        list.insertFinal(\"r\");\n        list.insertFinal(\"a\");\n        list.printList();\n        System.out.println(list.isPalindrome());*/\n        \n        \n        //Ejercicio 14", "        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        \n        for (int i = 0; i < 3; i++) {\n            list2.insertFinal(i);\n        }\n        \n        for (int i = 0; i < 6; i++) {\n            list3.insertFinal(i);\n        }\n        \n        Lista listaFinal = sumaLista(list, list2, list3);\n        listaFinal.printList();\n    }\n    ", "        for (int i = 0; i < 6; i++) {\n            list3.insertFinal(i);\n        }\n        \n        Lista listaFinal = sumaLista(list, list2, list3);\n        listaFinal.printList();\n    }\n    \n    public static Lista sumaLista(Lista lista1,Lista lista2,Lista lista3){\n        Lista list = new Lista();\n        Nodo pointer1 = lista1.getHead();\n        Nodo pointer2 = lista2.getHead();\n        Nodo pointer3 = lista3.getHead();", "    public static Lista sumaLista(Lista lista1,Lista lista2,Lista lista3){\n        Lista list = new Lista();\n        Nodo pointer1 = lista1.getHead();\n        Nodo pointer2 = lista2.getHead();\n        Nodo pointer3 = lista3.getHead();\n        while (\n                pointer1 != null ||\n                pointer2 != null || \n                pointer3 != null\n                ){\n            int value = 0;", "            if (pointer1 != null){\n                value += (int) pointer1.getElement();\n                pointer1 = pointer1.getNext();\n            }\n            if (pointer2 != null){\n                value += (int) pointer2.getElement();\n                pointer2 = pointer2.getNext();\n            }\n            if (pointer3 != null){\n                value += (int) pointer3.getElement();\n                pointer3 = pointer3.getNext();\n            }\n            list.insertFinal(value);\n        }\n        return list;\n    }\n    \n}\n", "            if (pointer3 != null){\n                value += (int) pointer3.getElement();\n                pointer3 = pointer3.getNext();\n            }\n            list.insertFinal(value);\n        }\n        return list;\n    }\n    \n}\n"]}
{"filename": "Semana 5/Ejercicios/src/ejercicios/Lista.java", "chunked_list": ["package ejercicios;\n\npublic class Lista implements ILista{\n    \n    private Nodo head;\n    private int length;\n\n    public Lista() {\n        this.head = null;\n        this.length = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n    \n    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    ", "    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    \n    public void insertBegin(Object element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            node.setNext(getHead());\n            setHead(node);\n        }\n        length++;\n    }\n    ", "    public void insertFinal(Object element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            Nodo pointer = getHead();\n            while (pointer.getNext() != null) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    ", "    public void insertInIndex(Object element, int index) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n        } else {\n            if (index == 0){\n                insertBegin(element);\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    int cont = 0;", "                if (index < length) {\n                    Nodo pointer = getHead();\n                    int cont = 0;\n                    while ( cont< index-1 && pointer != null) {\n                        pointer = (Nodo) pointer.getNext();\n                        cont++;\n                    }\n                    node.setNext((Nodo) pointer.getNext());\n                    pointer.setNext(node);\n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n    }\n    ", "    public Nodo deleteFinal(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n            if (length > 1){\n                while (((Nodo) (pointer.getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "                while (((Nodo) (pointer.getNext())).getNext() != null) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer.setNext(null);\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) getHead().getNext());\n            pointer.setNext(null);\n            length--;\n            return pointer;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteInIndex(int index){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            if (index == 0){\n                deleteBegin();\n            } else {\n                if (index < length) {\n                    Nodo pointer = getHead();\n                    Nodo pointer2;\n                    int cont = 0;", "                    while ( cont< index-1 && pointer != null) {\n                        pointer = (Nodo) pointer.getNext();\n                        cont++;\n                    }\n                    pointer2 = (Nodo) pointer.getNext();\n                    pointer.setNext((Nodo) pointer2.getNext());\n                    pointer2.setNext(null);\n                    return pointer2;\n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n        return null;\n    }\n    ", "    public void printList() {\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = (Nodo) pointer.getNext();\n        }\n    }\n    \n    public boolean isPalindrome(){\n        String aux = \"\";\n        String aux2 =\"\";\n        int cont = length - 1;\n        int cont2 = 0;\n        Nodo pointer = getHead();", "    public boolean isPalindrome(){\n        String aux = \"\";\n        String aux2 =\"\";\n        int cont = length - 1;\n        int cont2 = 0;\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            aux+= pointer.getElement();\n            pointer = pointer.getNext();\n        }\n        while (true) {\n            Nodo pointer2 = getHead();", "        while (true) {\n            Nodo pointer2 = getHead();\n            while (cont2 < cont) {\n                pointer2 = pointer2.getNext();\n                cont2++;\n            }\n            aux2 += pointer2.getElement();\n            cont--;\n            cont2=0;\n            System.out.println(\"aux \"+aux+\" aux2 \"+aux2);\n            if (pointer2 == getHead()) {\n                break;\n            }\n        }\n        return aux.equals(aux2);\n    }\n\n    \n}\n", "            if (pointer2 == getHead()) {\n                break;\n            }\n        }\n        return aux.equals(aux2);\n    }\n\n    \n}\n"]}
{"filename": "Semana 4/Lunes/ListasCirculares/src/listascirculares/ILista.java", "chunked_list": ["package listascirculares;\n\n\npublic interface ILista {\n    public void insertBegin(int element);\n    public void insertFinal(int element);\n    public void insertInIndex(int element, int index);\n    public Nodo deleteFinal();\n    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();", "    public Nodo deleteBegin();\n    public Nodo deleteInIndex(int index);\n    public void printList();\n    public boolean isEmpty();\n}\n"]}
{"filename": "Semana 4/Lunes/ListasCirculares/src/listascirculares/Nodo.java", "chunked_list": ["package listascirculares;\n\npublic class Nodo {\n    private int element;\n    private Object next;\n\n    public Nodo(int element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public int getElement() {\n        return element;\n    }\n\n    public void setElement(int element) {\n        this.element = element;\n    }\n\n    public Object getNext() {\n        return next;\n    }\n", "    public Object getNext() {\n        return next;\n    }\n\n    public void setNext(Nodo next) {\n        this.next = next;\n    }\n\n    \n    \n    \n}\n"]}
{"filename": "Semana 4/Lunes/ListasCirculares/src/listascirculares/ListaCircular.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage listascirculares;\n\n/**\n *\n * @author Estudiante\n */\npublic class ListaCircular implements ILista {\n\n    private Nodo head;\n    private int length;\n\n    public ListaCircular() {\n        this.head = null;\n        this.length = 0;\n    }\n", " * @author Estudiante\n */\npublic class ListaCircular implements ILista {\n\n    private Nodo head;\n    private int length;\n\n    public ListaCircular() {\n        this.head = null;\n        this.length = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n    \n    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    ", "    public boolean isEmpty() {\n        return getHead() == null;\n    }\n    \n    public void insertBegin(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            node.setNext(getHead());\n            setHead(node);", "            while (pointer.getNext() != pointer2) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(getHead());\n        }\n        length++;\n    }\n    \n    public void insertFinal(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            node.setNext(getHead());", "    public void insertFinal(int element) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            Nodo pointer = getHead();\n            node.setNext(getHead());\n            while (pointer.getNext() != getHead()) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    ", "            while (pointer.getNext() != getHead()) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(node);\n        }\n        length++;\n    }\n    \n    public void insertInIndex(int element, int index) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {", "    public void insertInIndex(int element, int index) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setHead(node);\n            getHead().setNext(getHead());\n        } else {\n            if (index == 0){\n                insertBegin(element);\n            } else {\n                if (index < length) {\n                    if(index == length -1 ){\n                        insertFinal(element);\n                    } else {\n                        Nodo pointer = getHead();\n                        int cont = 0;", "                if (index < length) {\n                    if(index == length -1 ){\n                        insertFinal(element);\n                    } else {\n                        Nodo pointer = getHead();\n                        int cont = 0;\n                        while ( cont< index-1) {\n                            pointer = (Nodo) pointer.getNext();\n                            cont++;\n                        }\n                        node.setNext((Nodo) pointer.getNext());\n                        pointer.setNext(node);\n                    }\n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n    }\n    ", "    public Nodo deleteFinal(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2;\n            \n            if (length > 1){\n                while (((Nodo) (pointer.getNext())).getNext() != getHead()) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer2.setNext(null);\n                pointer.setNext(getHead());\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "                while (((Nodo) (pointer.getNext())).getNext() != getHead()) {\n                    pointer = (Nodo) pointer.getNext();\n                }\n                pointer2 = (Nodo) pointer.getNext();\n                pointer2.setNext(null);\n                pointer.setNext(getHead());\n            } else {\n                pointer2 = deleteBegin();\n            }\n            length--;\n            return pointer2;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteBegin(){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            Nodo pointer = getHead();\n            Nodo pointer2 = getHead();\n            setHead((Nodo) getHead().getNext());\n            while (pointer.getNext() != pointer2) {\n                pointer = (Nodo) pointer.getNext();\n            }\n            pointer.setNext(getHead());\n            pointer2.setNext(null);\n            length--;\n            return pointer;\n        }\n        \n        return null;\n    }\n    ", "    public Nodo deleteInIndex(int index){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        } else {\n            if (index == 0){\n                deleteBegin();\n            } else {\n                if (index < length) {\n                    if(index == length-1) {\n                        deleteFinal();\n                    } else {\n                        Nodo pointer = getHead();\n                        Nodo pointer2;\n                        int cont = 0;", "                    if(index == length-1) {\n                        deleteFinal();\n                    } else {\n                        Nodo pointer = getHead();\n                        Nodo pointer2;\n                        int cont = 0;\n                        while ( cont< index-1 ) {\n                            pointer = (Nodo) pointer.getNext();\n                            cont++;\n                        }\n                        pointer2 = (Nodo) pointer.getNext();\n                        pointer.setNext((Nodo) pointer2.getNext());\n                        pointer2.setNext(null);\n                        return pointer2;\n                    }\n                    \n                } else {\n                    System.out.println(\"Error in index\");\n                }\n            }\n        }\n        length++;\n        return null;\n    }\n    ", "    public void printList() {\n        Nodo pointer = getHead();\n        boolean firstTime = true;\n        while (pointer != getHead() || firstTime) {\n            firstTime = false;\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = (Nodo) pointer.getNext();\n        }\n    }\n    \n}\n"]}
{"filename": "Semana 4/Lunes/ListasCirculares/src/listascirculares/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage listascirculares;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */", " * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        ListaCircular list = new ListaCircular();\n        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.printList();\n        list.insertInIndex(25, 6);\n        System.out.println(\"\");\n        list.deleteInIndex(3);\n        list.printList();\n    }\n    \n}\n", "        for (int i = 0; i < 10; i++) {\n            list.insertFinal(i);\n        }\n        list.printList();\n        list.insertInIndex(25, 6);\n        System.out.println(\"\");\n        list.deleteInIndex(3);\n        list.printList();\n    }\n    \n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/Nodo.java", "chunked_list": ["package colas;\n\n\npublic class Nodo {\n    private Object element;\n    private Object next;\n\n    public Nodo(Object element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object element) {\n        this.element = element;\n    }\n\n    public Object getNext() {\n        return next;\n    }\n", "    public Object getNext() {\n        return next;\n    }\n\n    public void setNext(Object next) {\n        this.next = next;\n    }\n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/Main.java", "chunked_list": ["package colas;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Queue queue = new Queue();\n        for (int i = 0; i < 10; i++) {\n            queue.enqueue(i);\n        }\n        //queue.dequeue();\n        //queue.dispatch();\n        Ejercicios ej = new Ejercicios();\n        ej.Ejercicio1(queue);\n        //queue.printQueue();\n    }\n    \n}\n", "        for (int i = 0; i < 10; i++) {\n            queue.enqueue(i);\n        }\n        //queue.dequeue();\n        //queue.dispatch();\n        Ejercicios ej = new Ejercicios();\n        ej.Ejercicio1(queue);\n        //queue.printQueue();\n    }\n    \n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/Ejercicios.java", "chunked_list": ["package colas;\n\npublic class Ejercicios {\n    \n    public void Ejercicio1(Queue queue) {\n        int acum = 0;\n        Nodo pointer = queue.getHead();\n        while (pointer != null) {\n            acum += (int) pointer.getElement();\n            pointer = (Nodo) pointer.getNext();\n        }", "        if (!queue.isEmpty()){\n            System.out.println(\"El promedio es:\"+(double)(acum/queue.getSize()));\n        }\n        \n        Nodo pointer2 = (Nodo) queue.getHead();\n        int cont = queue.getSize()-1;\n        int cont2 = 0;\n        int cont3 =0;\n        boolean firstTime = true;\n        while ((pointer2 != queue.getHead() || firstTime)){\n            firstTime = false;", "        while ((pointer2 != queue.getHead() || firstTime)){\n            firstTime = false;\n            while (cont2 < cont) {\n                pointer2 = (Nodo) pointer2.getNext();\n                cont2++;\n            }\n            System.out.println(pointer2.getElement());\n            cont--;\n            cont2 = 0;\n            pointer2 = (Nodo) queue.getHead().getNext();\n            cont3++;", "            if (cont3 == queue.getSize()){\n                break;\n            }\n        }\n    }\n    \n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/ArrayQueue.java", "chunked_list": ["package colas;\n\npublic class ArrayQueue implements IQueue{\n    \n    private Nodo[] array;\n    private Integer head, tail;\n    private int size, maxSize; \n\n    public ArrayQueue() {\n        this.array = new Nodo[1];\n        this.head = 0;\n        this.tail = 0;\n        this.size = 1;\n        this.maxSize = 10;\n    }\n    ", "    public int searchSpace() {\n        for (int i = 0; i < getSize(); i++) {\n            if (getArray()[i] == null) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    @Override\n    public void enqueue(Object element) {\n         Nodo node = new Nodo(element);", "    public void enqueue(Object element) {\n         Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            getArray()[getHead()] = node;\n            setTail(getHead());\n        } else {\n            if (getSize() >= getMaxSize()) {\n                System.out.println(\"No hay espacio disponible\");\n            } else {\n                int position = searchSpace();\n                if(position == -1) {\n                    Nodo[] newArray = new Nodo[getSize()+1];", "                if(position == -1) {\n                    Nodo[] newArray = new Nodo[getSize()+1];\n                    for (int i = 0; i < getSize(); i++) {\n                        newArray[i] = getArray()[i];\n                    }\n                    newArray[getSize()] = node;\n                    getArray()[getTail()].setNext(getSize());\n                    setTail(getSize());\n                    setSize(getSize()+1);\n                    setArray(newArray);\n                   \n                } else {\n                    getArray()[position] = node;\n                    getArray()[getTail()].setNext(position);\n                    setTail(position);\n                }\n            }\n        }\n    }\n\n    @Override", "    public void dequeue() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public Nodo dispatch() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return getArray()[getHead()] == null;\n    }\n\n    @Override", "    public boolean isEmpty() {\n        return getArray()[getHead()] == null;\n    }\n\n    @Override\n    public void printQueue() {\n        Nodo pointer = getArray()[getHead()];\n        while (pointer.getNext() != null) {\n            System.out.println(\"NODO:\"+pointer.getElement());\n            pointer = getArray()[(int) pointer.getNext()];\n        }\n        System.out.println(\"NODO:\"+ getArray()[getTail()].getElement());\n    }\n\n    public Nodo[] getArray() {\n        return array;\n    }\n", "    public void setArray(Nodo[] array) {\n        this.array = array;\n    }\n\n    public Integer getHead() {\n        return head;\n    }\n\n    public void setHead(Integer head) {\n        this.head = head;\n    }\n", "    public void setHead(Integer head) {\n        this.head = head;\n    }\n\n    public Integer getTail() {\n        return tail;\n    }\n\n    public void setTail(Integer tail) {\n        this.tail = tail;\n    }\n", "    public void setTail(Integer tail) {\n        this.tail = tail;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n", "    public void setSize(int size) {\n        this.size = size;\n    }\n\n    public int getMaxSize() {\n        return maxSize;\n    }\n\n    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n    \n    \n    \n}\n", "    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n    \n    \n    \n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/Queue.java", "chunked_list": ["package colas;\n\n\npublic class Queue implements IQueue {\n    private Nodo head;\n    private Nodo tail;\n    private int size;\n\n    public Queue() {\n        this.head = null;\n        this.tail = null;\n        this.size = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n\n    public Nodo getTail() {\n        return tail;\n    }\n", "    public Nodo getTail() {\n        return tail;\n    }\n\n    public void setTail(Nodo tail) {\n        this.tail = tail;\n    }\n\n    public int getSize() {\n        return size;\n    }\n", "    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n\n    @Override\n    public void enqueue(Object element) {\n        Nodo nodo = new Nodo(element);", "    public void enqueue(Object element) {\n        Nodo nodo = new Nodo(element);\n        if (isEmpty()) {\n            setTail(nodo);\n            setHead(nodo);\n        } else {\n            Nodo pointer = getTail();\n            pointer.setNext(nodo);\n            setTail(nodo);\n        }\n        size++;\n    }\n\n    @Override", "    public void dequeue() {\n        if(isEmpty()) {\n            System.out.println(\"The queue is empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) pointer.getNext());\n            pointer.setNext(null);\n            if (getHead() == null) {\n                setTail(null);\n            }\n            size--;\n        }\n    }\n\n    @Override", "    public Nodo dispatch() {\n        if(isEmpty()) {\n            System.out.println(\"The queue is empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) pointer.getNext());\n            pointer.setNext(null);\n            if (getHead() == null) {\n                setTail(null);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }\n\n    @Override", "    public boolean isEmpty() {\n        return getHead() == null && getTail() == null;\n    }\n\n    @Override\n    public void printQueue() {\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = (Nodo) pointer.getNext();\n        }\n    }\n    \n    \n    \n    \n}\n"]}
{"filename": "Semana 7/Lunes/Colas/src/colas/IQueue.java", "chunked_list": ["\npackage colas;\n\npublic interface IQueue {\n    public void enqueue(Object element); \n    public void dequeue(); \n    public Nodo dispatch(); \n    public boolean isEmpty(); \n    public void printQueue(); \n}\n", "    public void printQueue(); \n}\n"]}
{"filename": "Semana 10/BST/src/bst/Nodo.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template\n */\npackage bst;\n\n/**\n *\n * @author Estudiante\n */\npublic class Nodo {\n    \n    private int element;\n    private Nodo leftSon, rightSon;\n\n    public Nodo(int element) {\n        this.element = element;\n        this.leftSon = null;\n        this.rightSon = null;\n    }\n", " * @author Estudiante\n */\npublic class Nodo {\n    \n    private int element;\n    private Nodo leftSon, rightSon;\n\n    public Nodo(int element) {\n        this.element = element;\n        this.leftSon = null;\n        this.rightSon = null;\n    }\n", "    public int getElement() {\n        return element;\n    }\n\n    public void setElement(int element) {\n        this.element = element;\n    }\n\n    public Nodo getLeftSon() {\n        return leftSon;\n    }\n", "    public Nodo getLeftSon() {\n        return leftSon;\n    }\n\n    public void setLeftSon(Nodo leftSon) {\n        this.leftSon = leftSon;\n    }\n\n    public Nodo getRightSon() {\n        return rightSon;\n    }\n", "    public Nodo getRightSon() {\n        return rightSon;\n    }\n\n    public void setRightSon(Nodo rightSon) {\n        this.rightSon = rightSon;\n    }\n    \n    public boolean isLeaf(){\n        return (leftSon == null && rightSon == null);\n    }\n    ", "    public boolean isLeaf(){\n        return (leftSon == null && rightSon == null);\n    }\n    \n    public boolean hasOnlyRightSon(){\n        return (leftSon == null && rightSon != null);\n    }\n    \n    public boolean hasOnlyLeftSon(){\n        return (leftSon != null && rightSon == null);\n    }\n}\n", "    public boolean hasOnlyLeftSon(){\n        return (leftSon != null && rightSon == null);\n    }\n}\n"]}
{"filename": "Semana 10/BST/src/bst/BinarySearchTree.java", "chunked_list": ["package bst;\n\npublic class BinarySearchTree {\n\n    private Nodo root;\n\n    public BinarySearchTree() {\n        this.root = null;\n    }\n\n    public Nodo getRoot() {\n        return root;\n    }\n", "    public Nodo getRoot() {\n        return root;\n    }\n\n    public void setRoot(Nodo root) {\n        this.root = root;\n    }\n\n    public void insertNodoRecursive(int element, Nodo raiz) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setRoot(node);\n        } else {", "    public void insertNodoRecursive(int element, Nodo raiz) {\n        Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            setRoot(node);\n        } else {\n            if (element < raiz.getElement()) {\n                if (raiz.getLeftSon() == null) {\n                    raiz.setLeftSon(node);\n                } else {\n                    insertNodoRecursive(element, raiz.getLeftSon());\n                }\n            } else {", "                if (raiz.getRightSon() == null) {\n                    raiz.setRightSon(node);\n                } else {\n                    insertNodoRecursive(element, raiz.getRightSon());\n                }\n            }\n        }\n    }\n\n    public void preOrden(Nodo raiz) {\n        if (raiz != null) {\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n            preOrden(raiz.getLeftSon());\n            preOrden(raiz.getRightSon());\n        }\n    }\n", "    public void preOrden(Nodo raiz) {\n        if (raiz != null) {\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n            preOrden(raiz.getLeftSon());\n            preOrden(raiz.getRightSon());\n        }\n    }\n\n    public void inOrden(Nodo raiz) {\n        if (raiz != null) {\n            preOrden(raiz.getLeftSon());\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n            preOrden(raiz.getRightSon());\n        }\n    }\n", "    public void inOrden(Nodo raiz) {\n        if (raiz != null) {\n            preOrden(raiz.getLeftSon());\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n            preOrden(raiz.getRightSon());\n        }\n    }\n\n    public void postOrden(Nodo raiz) {\n        if (raiz != null) {\n            preOrden(raiz.getLeftSon());\n            preOrden(raiz.getRightSon());\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n        }\n    }\n", "    public void postOrden(Nodo raiz) {\n        if (raiz != null) {\n            preOrden(raiz.getLeftSon());\n            preOrden(raiz.getRightSon());\n            System.out.println(\"[ \" + raiz.getElement() + \" ]\");\n        }\n    }\n\n    public void deleteNodo(int element, Nodo raiz, Nodo previousNode) {\n        if (isEmpty()) {\n            System.out.println(\"There are not elements to delete\");\n        } else {", "    public void deleteNodo(int element, Nodo raiz, Nodo previousNode) {\n        if (isEmpty()) {\n            System.out.println(\"There are not elements to delete\");\n        } else {\n            if (element == raiz.getElement()) {\n                if (raiz.isLeaf()) {\n                    // Cuando es una hoja\n                    if (previousNode == null) {\n                        setRoot(null);\n                    } else {\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }", "                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(null);\n                        } else {\n                            previousNode.setRightSon(null);\n                        }\n                    }\n                } else if (raiz.hasOnlyRightSon()) {\n                    // Cuando tiene hijo derecho\n                    if (previousNode == null) {\n                        setRoot(raiz.getRightSon());\n                    } else {", "                    if (previousNode == null) {\n                        setRoot(raiz.getRightSon());\n                    } else {\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(raiz.getRightSon());\n                        } else {\n                            previousNode.setRightSon(raiz.getRightSon());\n                        }\n                    }\n                } else if (raiz.hasOnlyLeftSon()) {\n                    // Cuando tiene hijo izquierdo", "                } else if (raiz.hasOnlyLeftSon()) {\n                    // Cuando tiene hijo izquierdo\n                    if (previousNode == null) {\n                        setRoot(raiz.getLeftSon());\n                    } else {\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(raiz.getLeftSon());\n                        } else {\n                            previousNode.setRightSon(raiz.getLeftSon());\n                        }\n                    }\n                } else {\n                    // Tiene ambos hijos\n                    boolean haveRightSons = validateLeftSon(raiz.getLeftSon());", "                    if (haveRightSons) {\n                        Nodo nodo = searchNodoToReplace(raiz.getLeftSon());\n                        nodo.setLeftSon(raiz.getLeftSon());\n                        nodo.setRightSon(raiz.getRightSon());\n                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(nodo);\n                        } else {\n                            previousNode.setRightSon(nodo);\n                        }\n                    } else {\n                        Nodo nodo = raiz.getLeftSon();\n                        nodo.setRightSon(raiz.getRightSon());", "                        if (element < previousNode.getElement()) {\n                            previousNode.setLeftSon(nodo);\n                        } else {\n                            previousNode.setRightSon(nodo);\n                        }\n                    }\n                }\n            } else if(element < raiz.getElement()) {\n                deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else {\n                deleteNodo(element, raiz.getRightSon(), raiz);\n            }\n        }\n    }\n    ", "    public boolean validateLeftSon(Nodo raiz) {\n        return raiz.getRightSon() != null;\n    }\n    \n    public Nodo searchNodoToReplace(Nodo raiz){\n        while(raiz.getRightSon() != null) {\n            raiz = raiz.getRightSon();\n        }\n        return raiz;\n    }\n", "    public boolean isEmpty() {\n        return getRoot() == null;\n    }\n\n}\n"]}
{"filename": "Semana 10/BST/src/bst/Main.java", "chunked_list": ["/*\n * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license\n * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template\n */\npackage bst;\n\n/**\n *\n * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */", " * @author Estudiante\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        BinarySearchTree bst = new BinarySearchTree();\n        bst.insertNodoRecursive(20, bst.getRoot());\n        bst.insertNodoRecursive(10, bst.getRoot());\n        bst.insertNodoRecursive(30, bst.getRoot());\n        bst.insertNodoRecursive(5, bst.getRoot());\n        bst.insertNodoRecursive(25, bst.getRoot());\n        bst.insertNodoRecursive(40, bst.getRoot());\n        bst.insertNodoRecursive(33, bst.getRoot());\n        bst.preOrden(bst.getRoot());\n        \n        System.out.println(\"Eliminar\");\n        bst.deleteNodo(30, bst.getRoot(), null);\n        bst.preOrden(bst.getRoot());\n    }\n    \n}\n"]}
{"filename": "Semana 6/Colas/src/colas/Nodo.java", "chunked_list": ["package colas;\n\n\npublic class Nodo {\n    private Object element;\n    private Object next;\n\n    public Nodo(Object element) {\n        this.element = element;\n        this.next = null;\n    }\n", "    public Object getElement() {\n        return element;\n    }\n\n    public void setElement(Object element) {\n        this.element = element;\n    }\n\n    public Object getNext() {\n        return next;\n    }\n", "    public Object getNext() {\n        return next;\n    }\n\n    public void setNext(Object next) {\n        this.next = next;\n    }\n}\n"]}
{"filename": "Semana 6/Colas/src/colas/Main.java", "chunked_list": ["package colas;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        ArrayQueue queue = new ArrayQueue();\n        for (int i = 0; i < 10; i++) {\n            queue.enqueue(i);\n        }\n        //queue.dequeue();\n        //queue.dispatch();\n        queue.printQueue();\n    }\n    \n}\n", "        for (int i = 0; i < 10; i++) {\n            queue.enqueue(i);\n        }\n        //queue.dequeue();\n        //queue.dispatch();\n        queue.printQueue();\n    }\n    \n}\n"]}
{"filename": "Semana 6/Colas/src/colas/ArrayQueue.java", "chunked_list": ["package colas;\n\npublic class ArrayQueue implements IQueue{\n    \n    private Nodo[] array;\n    private Integer head, tail;\n    private int size, maxSize; \n\n    public ArrayQueue() {\n        this.array = new Nodo[1];\n        this.head = 0;\n        this.tail = 0;\n        this.size = 1;\n        this.maxSize = 10;\n    }\n    ", "    public int searchSpace() {\n        for (int i = 0; i < getSize(); i++) {\n            if (getArray()[i] == null) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    @Override\n    public void enqueue(Object element) {\n         Nodo node = new Nodo(element);", "    public void enqueue(Object element) {\n         Nodo node = new Nodo(element);\n        if (isEmpty()) {\n            getArray()[getHead()] = node;\n            setTail(getHead());\n        } else {\n            if (getSize() >= getMaxSize()) {\n                System.out.println(\"No hay espacio disponible\");\n            } else {\n                int position = searchSpace();\n                if(position == -1) {\n                    Nodo[] newArray = new Nodo[getSize()+1];", "                if(position == -1) {\n                    Nodo[] newArray = new Nodo[getSize()+1];\n                    for (int i = 0; i < getSize(); i++) {\n                        newArray[i] = getArray()[i];\n                    }\n                    newArray[getSize()] = node;\n                    getArray()[getTail()].setNext(getSize());\n                    setTail(getSize());\n                    setSize(getSize()+1);\n                    setArray(newArray);\n                   \n                } else {\n                    getArray()[position] = node;\n                    getArray()[getTail()].setNext(position);\n                    setTail(position);\n                }\n            }\n        }\n    }\n\n    @Override", "    public void dequeue() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public Nodo dispatch() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return getArray()[getHead()] == null;\n    }\n\n    @Override", "    public boolean isEmpty() {\n        return getArray()[getHead()] == null;\n    }\n\n    @Override\n    public void printQueue() {\n        Nodo pointer = getArray()[getHead()];\n        while (pointer.getNext() != null) {\n            System.out.println(\"NODO:\"+pointer.getElement());\n            pointer = getArray()[(int) pointer.getNext()];\n        }\n        System.out.println(\"NODO:\"+ getArray()[getTail()].getElement());\n    }\n\n    public Nodo[] getArray() {\n        return array;\n    }\n", "    public void setArray(Nodo[] array) {\n        this.array = array;\n    }\n\n    public Integer getHead() {\n        return head;\n    }\n\n    public void setHead(Integer head) {\n        this.head = head;\n    }\n", "    public void setHead(Integer head) {\n        this.head = head;\n    }\n\n    public Integer getTail() {\n        return tail;\n    }\n\n    public void setTail(Integer tail) {\n        this.tail = tail;\n    }\n", "    public void setTail(Integer tail) {\n        this.tail = tail;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n", "    public void setSize(int size) {\n        this.size = size;\n    }\n\n    public int getMaxSize() {\n        return maxSize;\n    }\n\n    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n    \n    \n    \n}\n", "    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n    \n    \n    \n}\n"]}
{"filename": "Semana 6/Colas/src/colas/Queue.java", "chunked_list": ["package colas;\n\n\npublic class Queue implements IQueue {\n    private Nodo head;\n    private Nodo tail;\n    private int size;\n\n    public Queue() {\n        this.head = null;\n        this.tail = null;\n        this.size = 0;\n    }\n", "    public Nodo getHead() {\n        return head;\n    }\n\n    public void setHead(Nodo head) {\n        this.head = head;\n    }\n\n    public Nodo getTail() {\n        return tail;\n    }\n", "    public Nodo getTail() {\n        return tail;\n    }\n\n    public void setTail(Nodo tail) {\n        this.tail = tail;\n    }\n\n    public int getSize() {\n        return size;\n    }\n", "    public int getSize() {\n        return size;\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n\n    @Override\n    public void enqueue(Object element) {\n        Nodo nodo = new Nodo(element);", "    public void enqueue(Object element) {\n        Nodo nodo = new Nodo(element);\n        if (isEmpty()) {\n            setTail(nodo);\n            setHead(nodo);\n        } else {\n            Nodo pointer = getTail();\n            pointer.setNext(nodo);\n            setTail(nodo);\n        }\n        size++;\n    }\n\n    @Override", "    public void dequeue() {\n        if(isEmpty()) {\n            System.out.println(\"The queue is empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) pointer.getNext());\n            pointer.setNext(null);\n            if (getHead() == null) {\n                setTail(null);\n            }\n            size--;\n        }\n    }\n\n    @Override", "    public Nodo dispatch() {\n        if(isEmpty()) {\n            System.out.println(\"The queue is empty\");\n        } else {\n            Nodo pointer = getHead();\n            setHead((Nodo) pointer.getNext());\n            pointer.setNext(null);\n            if (getHead() == null) {\n                setTail(null);\n            }\n            size--;\n            return pointer;\n        }\n        return null;\n    }\n\n    @Override", "    public boolean isEmpty() {\n        return getHead() == null && getTail() == null;\n    }\n\n    @Override\n    public void printQueue() {\n        Nodo pointer = getHead();\n        while (pointer != null) {\n            System.out.print(\"[ \"+pointer.getElement()+\" ]\");\n            pointer = (Nodo) pointer.getNext();\n        }\n    }\n    \n    \n    \n    \n}\n"]}
{"filename": "Semana 6/Colas/src/colas/IQueue.java", "chunked_list": ["\npackage colas;\n\npublic interface IQueue {\n    public void enqueue(Object element); \n    public void dequeue(); \n    public Nodo dispatch(); \n    public boolean isEmpty(); \n    public void printQueue(); \n}\n", "    public void printQueue(); \n}\n"]}
