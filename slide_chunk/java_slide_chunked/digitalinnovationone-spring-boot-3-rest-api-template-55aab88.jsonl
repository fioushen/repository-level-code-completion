{"filename": "src/test/java/me/dio/ApplicationTests.java", "chunked_list": ["package me.dio;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/main/java/me/dio/Application.java", "chunked_list": ["package me.dio;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport io.swagger.v3.oas.annotations.servers.Server;\n\n/**\n * Initializes our RESTful API.", "/**\n * Initializes our RESTful API.\n * \n * <p>\n * The {@link OpenAPIDefinition} annotation was used to enable HTTPS in the Swagger UI.\n * For more details, see the following post on Stack Overflow: \n * https://stackoverflow.com/a/71132608/3072570\n * </p>\n */\n", " */\n\n@OpenAPIDefinition(servers = {@Server(url = \"/\", description = \"Default Server URL\")})\n@SpringBootApplication\npublic class Application {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n"]}
{"filename": "src/main/java/me/dio/repository/HeroRepository.java", "chunked_list": ["package me.dio.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport me.dio.model.Hero;\n\n@Repository\npublic interface HeroRepository extends JpaRepository<Hero, Long> {\n}\n", "public interface HeroRepository extends JpaRepository<Hero, Long> {\n}\n"]}
{"filename": "src/main/java/me/dio/model/Hero.java", "chunked_list": ["package me.dio.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Version;\n\n@Entity(name = \"HEROES\")\npublic class Hero {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private int xp;\n    /*\n     * The version field is marked with the @Version annotation. This means JPA will\n     * automatically take care of versioning for the Hero entity, which helps\n     * prevent concurrent modification conflicts.\n     */\n    @Version\n    private int version;\n", "@Entity(name = \"HEROES\")\npublic class Hero {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private int xp;\n    /*\n     * The version field is marked with the @Version annotation. This means JPA will\n     * automatically take care of versioning for the Hero entity, which helps\n     * prevent concurrent modification conflicts.\n     */\n    @Version\n    private int version;\n", "    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getXp() {\n        return xp;\n    }\n", "    public int getXp() {\n        return xp;\n    }\n\n    public void setXp(int xp) {\n        this.xp = xp;\n    }\n\n    public int getVersion() {\n        return version;\n    }\n", "    public int getVersion() {\n        return version;\n    }\n\n    public void setVersion(int version) {\n        this.version = version;\n    }\n\n}\n"]}
{"filename": "src/main/java/me/dio/controller/HeroController.java", "chunked_list": ["package me.dio.controller;\n\nimport java.net.URI;\nimport java.util.List;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PatchMapping;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.PatchMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport io.swagger.v3.oas.annotations.Operation;", "\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport me.dio.model.Hero;\nimport me.dio.service.HeroService;\n\n@RestController\n@RequestMapping(\"/heroes\")", "@RestController\n@RequestMapping(\"/heroes\")\n@Tag(name = \"Heroes Controller\", description = \"RESTful API for managing heroes.\")\npublic record HeroController(HeroService heroService) {\n\n    @GetMapping\n    @Operation(summary = \"Get all heroes\", description = \"Get a list of all registered heroes\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"200\", description = \"Successful operation\")\n    })\n    public ResponseEntity<List<Hero>> findAll() {\n        return ResponseEntity.ok(heroService.findAll());\n    }\n\n    @GetMapping(\"/{id}\")\n    @Operation(summary = \"Get a hero by ID\", description = \"Get a specific hero based on its ID\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"200\", description = \"Successful operation\"),\n            @ApiResponse(responseCode = \"404\", description = \"Hero not found\")\n    })\n    public ResponseEntity<Hero> findById(@PathVariable Long id) {\n        return ResponseEntity.ok(heroService.findById(id));\n    }\n\n    @PostMapping\n    @Operation(summary = \"Create a new hero\", description = \"Create a new hero and returns the created hero\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"201\", description = \"Hero created successfully\"),\n            @ApiResponse(responseCode = \"422\", description = \"Invalid hero data provided\")\n    })\n    public ResponseEntity<Hero> create(@RequestBody Hero hero) {\n        // TODO: Create a DTO to avoid expose unnecessary Hero model attributes.\n        Hero createdHero = heroService.create(hero);\n        URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n                .path(\"/{id}\")\n                .buildAndExpand(createdHero.getId())\n                .toUri();\n        return ResponseEntity.created(location).body(createdHero);\n    }\n\n    @PutMapping(\"/{id}\")\n    @Operation(summary = \"Update a hero\", description = \"Update an existing hero based on its ID\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"200\", description = \"Hero updated successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"Hero not found\"),\n            @ApiResponse(responseCode = \"422\", description = \"Invalid hero data provided\")\n    })\n    public ResponseEntity<Hero> update(@PathVariable Long id, @RequestBody Hero hero) {\n        // TODO: Create a DTO to avoid expose unnecessary Hero model attributes.\n        return ResponseEntity.ok(heroService.update(id, hero));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @Operation(summary = \"Delete a hero\", description = \"Delete an existing hero based on its ID\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"204\", description = \"Hero deleted successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"Hero not found\")\n    })\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\n        heroService.delete(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @PatchMapping(\"/{id}/up\")\n    @Operation(summary = \"Increase hero XP\", description = \"Up XP to an existing hero based on its ID\")\n    @ApiResponses(value = { \n            @ApiResponse(responseCode = \"204\", description = \"Vote registered successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"Hero not found\")\n    })\n    public ResponseEntity<Void> vote(@PathVariable Long id) {\n        heroService.increaseXp(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n"]}
{"filename": "src/main/java/me/dio/exception/GlobalExceptionHandler.java", "chunked_list": ["package me.dio.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n  @ExceptionHandler(BusinessException.class)\n  public ResponseEntity<String> handleBusinessException(BusinessException ex) {\n    return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNPROCESSABLE_ENTITY);\n  }\n\n  @ExceptionHandler(NotFoundException.class)\n  public ResponseEntity<String> handleNoContentException() {\n    return new ResponseEntity<>(\"Resource ID not found.\", HttpStatus.NOT_FOUND);\n  }\n}\n\n", "@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n  @ExceptionHandler(BusinessException.class)\n  public ResponseEntity<String> handleBusinessException(BusinessException ex) {\n    return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNPROCESSABLE_ENTITY);\n  }\n\n  @ExceptionHandler(NotFoundException.class)\n  public ResponseEntity<String> handleNoContentException() {\n    return new ResponseEntity<>(\"Resource ID not found.\", HttpStatus.NOT_FOUND);\n  }\n}\n\n"]}
{"filename": "src/main/java/me/dio/exception/NotFoundException.java", "chunked_list": ["package me.dio.exception;\n\npublic class NotFoundException extends RuntimeException {\n\n    private static final long serialVersionUID = 1L;\n\n}\n"]}
{"filename": "src/main/java/me/dio/exception/BusinessException.java", "chunked_list": ["package me.dio.exception;\n\npublic class BusinessException extends RuntimeException {\n\n    private static final long serialVersionUID = 1L;\n\n    public BusinessException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "src/main/java/me/dio/service/CrudService.java", "chunked_list": ["package me.dio.service;\n\nimport java.util.List;\n\npublic interface CrudService<ID, T> {\n    List<T> findAll();\n    T findById(ID id);\n    T create(T entity);\n    T update(ID id, T entity);\n    void delete(ID id);\n}\n"]}
{"filename": "src/main/java/me/dio/service/HeroService.java", "chunked_list": ["package me.dio.service;\n\nimport me.dio.model.Hero;\n\npublic interface HeroService extends CrudService<Long, Hero> {\n    void increaseXp(Long id);\n}\n"]}
{"filename": "src/main/java/me/dio/service/impl/HeroServiceImpl.java", "chunked_list": ["package me.dio.service.impl;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport me.dio.exception.BusinessException;", "\nimport me.dio.exception.BusinessException;\nimport me.dio.exception.NotFoundException;\nimport me.dio.model.Hero;\nimport me.dio.repository.HeroRepository;\nimport me.dio.service.HeroService;\n\n@Service\n@Transactional\npublic class HeroServiceImpl implements HeroService {\n\n    @Autowired\n    private HeroRepository heroRepository;\n\n    @Transactional(readOnly = true)\n    public List<Hero> findAll() {\n        // DONE! Sort Heroes by \"xp\" descending.\n        return this.heroRepository.findAll(Sort.by(Sort.Direction.DESC, \"xp\"));\n    }\n\n    @Transactional(readOnly = true)", "@Transactional\npublic class HeroServiceImpl implements HeroService {\n\n    @Autowired\n    private HeroRepository heroRepository;\n\n    @Transactional(readOnly = true)\n    public List<Hero> findAll() {\n        // DONE! Sort Heroes by \"xp\" descending.\n        return this.heroRepository.findAll(Sort.by(Sort.Direction.DESC, \"xp\"));\n    }\n\n    @Transactional(readOnly = true)", "    public Hero findById(Long id) {\n        return this.heroRepository.findById(id).orElseThrow(NotFoundException::new);\n    }\n\n    public Hero create(Hero heroToCreate) {\n        heroToCreate.setXp(0);\n        return this.heroRepository.save(heroToCreate);\n    }\n\n    public Hero update(Long id, Hero heroToUpdate) {\n        Hero dbHero = this.findById(id);", "    public Hero update(Long id, Hero heroToUpdate) {\n        Hero dbHero = this.findById(id);\n        if (!dbHero.getId().equals(heroToUpdate.getId())) {\n            throw new BusinessException(\"Update IDs must be the same.\");\n        }\n        // DONE! Make sure \"xp\" is not changed. In practice, only \"name\" can be changed.\n        dbHero.setName(heroToUpdate.getName());\n        return this.heroRepository.save(dbHero);\n    }\n\n    public void delete(Long id) {\n        Hero dbHero = this.findById(id);\n        this.heroRepository.delete(dbHero);\n    }\n", "    public void delete(Long id) {\n        Hero dbHero = this.findById(id);\n        this.heroRepository.delete(dbHero);\n    }\n\n    public void increaseXp(Long id) {\n        Hero dbHero = this.findById(id);\n        dbHero.setXp(dbHero.getXp() + 2);\n        heroRepository.save(dbHero);\n    }\n}"]}
