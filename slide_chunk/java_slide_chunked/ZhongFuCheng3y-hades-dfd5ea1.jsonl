{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/ApolloExampleApplication.java", "chunked_list": ["package com.java3y.hades;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author 3y\n * apollo \u542f\u52a8\u7c7b\n */\n@SpringBootApplication\npublic class ApolloExampleApplication {\n", " */\n@SpringBootApplication\npublic class ApolloExampleApplication {\n\n    public static void main(String[] args) {\n        // \u6211\u7684apollo\u662fdocker\u90e8\u7f72\uff0c\u8df3\u8fc7meta\u670d\u52a1\u53d1\u73b0\n        System.setProperty(\"apollo.config-service\", \"http://austin-apollo-config:8080\");\n        SpringApplication.run(ApolloExampleApplication.class, args);\n    }\n}\n"]}
{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/example/apollo/demo/SendController.java", "chunked_list": ["package com.java3y.hades.example.apollo.demo;\n\nimport com.java3y.hades.core.HadesClient;\nimport groovy.lang.GroovyObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**", "\n/**\n * @author 3y\n * test\n */\n@RestController\n@Slf4j\npublic class SendController {\n\n    @Autowired\n    private HadesClient hadesClient;\n\n    @RequestMapping(\"/test\")\n    private void test() {\n        // \u83b7\u53d6\u811a\u672c\u5bf9\u8c61\uff0c\u7528\u63a5\u53e3\u63a5\u6536\n        SendSmsService sendSmsService = hadesClient.getInterfaceByName(\"com.java3y.hades.example.apollo.demo.TencentSmsService\");\n        sendSmsService.send();\n\n        // \u83b7\u53d6GroovyObject\u5bf9\u8c61\n        GroovyObject groovyObject = hadesClient.getGroovyObjectByName(\"com.java3y.hades.example.apollo.demo.TencentSmsService\");\n        groovyObject.invokeMethod(\"send\", null);\n        log.info(\"groovy object:{}\", groovyObject);\n\n        // \u76f4\u63a5\u6267\u884c\u811a\u672c\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u8fd4\u56de\u503c\n        Object execute = hadesClient.execute(\"com.java3y.hades.example.apollo.demo.TencentSmsService\", \"send\", null);\n        System.out.println(\"result\" + execute);\n    }\n\n}\n"]}
{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/example/apollo/demo/SendSmsService.java", "chunked_list": ["package com.java3y.hades.example.apollo.demo;\n\n/**\n * \u8c03\u7528\u77ed\u4fe1\u63a5\u53e3\u670d\u52a1\n *\n * @author 3y\n */\npublic interface SendSmsService {\n\n    /**\n     * \u53d1\u9001\n     */\n    void send();\n}\n"]}
{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/example/apollo/demo/TencentSmsService.java", "chunked_list": ["//package com.java3y.hades.example.apollo.demo;\n//\n//import lombok.extern.slf4j.Slf4j;\n//import org.springframework.beans.factory.annotation.Autowired;\n//\n///**\n// * @author 3y\n// */\n//@Slf4j\n//public class TencentSmsService implements SendSmsService {\n//\n//    @Autowired\n//    private DependencyService dependencyService;\n//\n//    @Override", "//@Slf4j\n//public class TencentSmsService implements SendSmsService {\n//\n//    @Autowired\n//    private DependencyService dependencyService;\n//\n//    @Override\n//    public void send() {\n//        System.out.println(dependencyService.getHadesClient());\n//        System.out.println(\"send success\");\n//    }\n//}\n"]}
{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/example/apollo/demo/DependencyService.java", "chunked_list": ["package com.java3y.hades.example.apollo.demo;\n\nimport com.java3y.hades.core.HadesClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author 3y\n * \u6a21\u62df\u6d4b\u8bd5\u7684\u811a\u672c\u4f9d\u8d56\u8be5\u5bf9\u8c61\n */", " * \u6a21\u62df\u6d4b\u8bd5\u7684\u811a\u672c\u4f9d\u8d56\u8be5\u5bf9\u8c61\n */\n@Service\npublic class DependencyService {\n\n    @Autowired\n    private HadesClient hadesClient;\n\n    public HadesClient getHadesClient() {\n        return hadesClient;\n    }\n}\n\n", "    public HadesClient getHadesClient() {\n        return hadesClient;\n    }\n}\n\n"]}
{"filename": "hades-example/hades-apollo-example/src/main/java/com/java3y/hades/example/apollo/service/ApolloExample.java", "chunked_list": ["package com.java3y.hades.example.apollo.service;\n\nimport com.ctrip.framework.apollo.ConfigFileChangeListener;\nimport com.ctrip.framework.apollo.ConfigService;\nimport com.ctrip.framework.apollo.core.enums.ConfigFileFormat;\nimport com.ctrip.framework.apollo.model.ConfigFileChangeEvent;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * @author 3y\n * apollo \u542f\u52a8\u5668\n */\n@Service\n@Slf4j\npublic class ApolloExample extends BaseHadesBaseConfig implements ConfigFileChangeListener {\n\n\n    @Override", "@Service\n@Slf4j\npublic class ApolloExample extends BaseHadesBaseConfig implements ConfigFileChangeListener {\n\n\n    @Override\n    public void addListener() {\n        try {\n            ConfigService.getConfigFile(configProperties.getConfigName(), ConfigFileFormat.TXT).addChangeListener(this);\n            log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e[{}]\u76d1\u542c\u5668\u5df2\u542f\u52a8\", configProperties.getConfigName());\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#refresh key:[{}] fail:{}\", configProperties.getConfigName(), Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override", "    public String getConfigValueByName(String configName) {\n        try {\n            return ConfigService.getConfigFile(configName, ConfigFileFormat.TXT).getContent();\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n\n    @Override", "    public void onChange(ConfigFileChangeEvent changeEvent) {\n        log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u76d1\u542c\u5230[{}]\u6570\u636e\u66f4\u65b0:{}\", configProperties.getConfigName(), changeEvent.getNewValue());\n        bootstrap(changeEvent.getNewValue());\n    }\n\n    @Override\n    public void addOrUpdateProperty(String key, String value) {\n\n    }\n\n    @Override", "    public void removeProperty(String key) {\n\n    }\n}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/NacosExampleApplication.java", "chunked_list": ["package com.java3y.hades;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author 3y\n * Nacos \u542f\u52a8\u7c7b\n */\n@SpringBootApplication\npublic class NacosExampleApplication {\n", " */\n@SpringBootApplication\npublic class NacosExampleApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosExampleApplication.class, args);\n    }\n}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/example/nacos/demo/SendController.java", "chunked_list": ["package com.java3y.hades.example.nacos.demo;\n\nimport com.java3y.hades.core.HadesClient;\nimport groovy.lang.GroovyObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**", "\n/**\n * @author 3y\n * test\n */\n@RestController\n@Slf4j\npublic class SendController {\n\n    @Autowired\n    private HadesClient hadesClient;\n\n    @RequestMapping(\"/test\")\n    private void test() {\n        // \u83b7\u53d6\u811a\u672c\u5bf9\u8c61\uff0c\u7528\u63a5\u53e3\u63a5\u6536\n        SendSmsService sendSmsService = hadesClient.getInterfaceByName(\"com.java3y.hades.example.apollo.demo.TencentSmsService\");\n        sendSmsService.send();\n\n        // \u83b7\u53d6GroovyObject\u5bf9\u8c61\n        GroovyObject groovyObject = hadesClient.getGroovyObjectByName(\"com.java3y.hades.example.apollo.demo.TencentSmsService\");\n        groovyObject.invokeMethod(\"send\", null);\n        log.info(\"groovy object:{}\", groovyObject);\n\n        // \u76f4\u63a5\u6267\u884c\u811a\u672c\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u8fd4\u56de\u503c\n        Object execute = hadesClient.execute(\"com.java3y.hades.example.apollo.demo.TencentSmsService\", \"send\", null);\n        System.out.println(\"result\" + execute);\n    }\n\n}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/example/nacos/demo/SendSmsService.java", "chunked_list": ["package com.java3y.hades.example.nacos.demo;\n\n/**\n * \u8c03\u7528\u77ed\u4fe1\u63a5\u53e3\u670d\u52a1\n *\n * @author 3y\n */\npublic interface SendSmsService {\n\n    /**\n     * \u53d1\u9001\n     */\n    void send();\n}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/example/nacos/demo/TencentSmsService.java", "chunked_list": ["//package com.java3y.hades.example.nacos.demo;\n//\n//import lombok.extern.slf4j.Slf4j;\n//import org.springframework.beans.factory.annotation.Autowired;\n//\n///**\n// * @author 3y\n// */\n//@Slf4j\n//public class TencentSmsService implements SendSmsService {\n//\n//    @Autowired\n//    private DependencyService dependencyService;\n//\n//    @Override", "//@Slf4j\n//public class TencentSmsService implements SendSmsService {\n//\n//    @Autowired\n//    private DependencyService dependencyService;\n//\n//    @Override\n//    public void send() {\n//        System.out.println(dependencyService.getHadesClient());\n//        System.out.println(\"send success\");\n//    }\n//}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/example/nacos/demo/DependencyService.java", "chunked_list": ["package com.java3y.hades.example.nacos.demo;\n\nimport com.java3y.hades.core.HadesClient;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author 3y\n * \u6a21\u62df\u6d4b\u8bd5\u7684\u811a\u672c\u4f9d\u8d56\u8be5\u5bf9\u8c61\n */", " * \u6a21\u62df\u6d4b\u8bd5\u7684\u811a\u672c\u4f9d\u8d56\u8be5\u5bf9\u8c61\n */\n@Service\npublic class DependencyService {\n\n    @Autowired\n    private HadesClient hadesClient;\n\n    public HadesClient getHadesClient() {\n        return hadesClient;\n    }\n}\n", "    public HadesClient getHadesClient() {\n        return hadesClient;\n    }\n}\n"]}
{"filename": "hades-example/hades-nacos-example/src/main/java/com/java3y/hades/example/nacos/service/NacosExample.java", "chunked_list": ["package com.java3y.hades.example.nacos.service;\n\nimport com.alibaba.nacos.api.annotation.NacosInjected;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.config.listener.Listener;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.constant.HadesConstant;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;", "import com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.Executor;\n\n\n/**\n * @author 3y\n * nacos \u542f\u52a8\u5668", " * @author 3y\n * nacos \u542f\u52a8\u5668\n */\n@Service\n@Slf4j\npublic class NacosExample extends BaseHadesBaseConfig implements Listener {\n\n    @NacosInjected\n    private ConfigService configService;\n\n    @Override", "    public void addListener() {\n        try {\n            configService.addListener(configProperties.getConfigName(), HadesConstant.NACOS_DEFAULT_GROUP, this);\n            log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e[{}]\u76d1\u542c\u5668\u5df2\u542f\u52a8\", configProperties.getConfigName());\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#refresh key:[{}] fail:{}\", configProperties.getConfigName(), Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public String getConfigValueByName(String configName) {", "    public String getConfigValueByName(String configName) {\n        try {\n            return configService.getConfig(configName,HadesConstant.NACOS_DEFAULT_GROUP, 3000L);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n\n\n\n    @Override", "    public void receiveConfigInfo(String mainConfig) {\n        log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u76d1\u542c\u5230[{}]\u6570\u636e\u66f4\u65b0:{}\", configProperties.getConfigName(), mainConfig);\n        bootstrap(mainConfig);\n    }\n\n    @Override\n    public Executor getExecutor() {\n        return null;\n    }\n\n    @Override", "    public void addOrUpdateProperty(String key, String value) {\n\n    }\n\n    @Override\n    public void removeProperty(String key)  {\n        try {\n            configService.removeConfig(key, HadesConstant.NACOS_DEFAULT_GROUP);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#removeProperty fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/HadesClient.java", "chunked_list": ["package com.java3y.hades.core;\n\nimport com.google.common.base.Throwables;\nimport groovy.lang.GroovyObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Objects;", "\nimport java.util.Objects;\n\n/**\n * hades\u5ba2\u6237\u7aef\n *\n * @author 3y\n */\n@Slf4j\n@Component\npublic class HadesClient {\n\n    @Autowired\n    private ApplicationContext context;\n\n    /**\n     * \u5f97\u5230Spring IOC \u5bb9\u5668\u91cc\u7684\u5bf9\u8c61(\u8c03\u7528\u65b9\u4ee5\u63a5\u53e3\u63a5\u6536)\n     *\n     * @param instanceName\n     * @param <T>\n     * @return\n     */\n    public <T> T getInterfaceByName(String instanceName) {\n        T bean = null;", "@Slf4j\n@Component\npublic class HadesClient {\n\n    @Autowired\n    private ApplicationContext context;\n\n    /**\n     * \u5f97\u5230Spring IOC \u5bb9\u5668\u91cc\u7684\u5bf9\u8c61(\u8c03\u7528\u65b9\u4ee5\u63a5\u53e3\u63a5\u6536)\n     *\n     * @param instanceName\n     * @param <T>\n     * @return\n     */\n    public <T> T getInterfaceByName(String instanceName) {\n        T bean = null;", "        try {\n            bean = (T) context.getBean(instanceName);\n        } catch (Exception e) {\n            log.error(\"HadesClient#getInterfaceByName get script name {} fail! e:{}\", instanceName, Throwables.getStackTraceAsString(e));\n        }\n        return bean;\n    }\n\n    /**\n     * \u83b7\u53d6 GroovyObject\n     *\n     * @param instanceName\n     * @return\n     */", "    public GroovyObject getGroovyObjectByName(String instanceName) {\n        GroovyObject groovyObject = null;\n        try {\n            groovyObject = (GroovyObject) context.getBean(instanceName);\n        } catch (Exception e) {\n            log.error(\"HadesClient#getGroovyObjectByName get script name {} fail! e:{}\", instanceName, Throwables.getStackTraceAsString(e));\n        }\n        return groovyObject;\n    }\n\n    /**\n     * \u8c03\u7528\u6267\u884c\uff1a xxx\u5bf9\u8c61 \u7684 xxx\u65b9\u6cd5 \u5e76 \u4f20\u5165xxx\u65b9\u6cd5\u7684\u53c2\u6570\n     *\n     * @param instanceName\n     * @param methodName\n     * @param params\n     * @return \u76ee\u6807\u5bf9\u8c61\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\n     */", "    public Object execute(String instanceName, String methodName, Object[] params) {\n        Object resultObj = null;\n        GroovyObject groovyObject = getGroovyObjectByName(instanceName);\n        try {\n            if (Objects.nonNull(groovyObject)) {\n                resultObj = groovyObject.invokeMethod(methodName, params);\n            }\n        } catch (Exception e) {\n            log.error(\"HadesClient#execute fail! instanceName:[{}],methodName:[{}],params:[{}],exception:{}\", instanceName, methodName, params, Throwables.getStackTraceAsString(e));\n        }\n        return resultObj;\n    }\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/domain/MainConfig.java", "chunked_list": ["package com.java3y.hades.core.domain;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * @author 3y\n * \u4e3b\u914d\u7f6e\n * eg\uff1a{\"instanceNames\":[\"com.java3y.hades.core.constant.HadesConstant\"],\"updateTime\":\"2023\u5e743\u670820\u65e510:26:0131\"}\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor", "@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class MainConfig {\n\n    /**\n     * \u5168\u9650\u5b9a\u7c7b\u540d(\u5305\u540d+\u7c7b\u540d)\n     * eg:com.java3y.hades.core.constant.HadesConstant\n     */\n    private List<String> instanceNames;\n\n    /**\n     * \u66f4\u65b0\u65f6\u95f4\n     */\n    private Long updateTime;\n\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/utils/HadesCache.java", "chunked_list": ["package com.java3y.hades.core.utils;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.util.DigestUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;", "import java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author 3y\n * \u672c\u5730\u7f13\u5b58\uff1a{\"instanceName\":\"md5(GroovyCode)\"}\n */\n@Slf4j\npublic class HadesCache {\n    private static final Map<String, String> CODE_CACHE = new HashMap(128);\n", "public class HadesCache {\n    private static final Map<String, String> CODE_CACHE = new HashMap(128);\n\n    public static void put2CodeCache(String key, String value) {\n        CODE_CACHE.put(key, value);\n    }\n\n    public static String get2CodeCache(String key) {\n        return CODE_CACHE.get(key);\n    }\n\n    /**\n     * \u5224\u65ad\u4f20\u5165\u7684key\u662f\u5426\u8ddf\u7f13\u5b58\u7684\u76f8\u7b49\n     *\n     * @return\n     */", "    public static boolean diff(String key, String currentGroovyCode) {\n        String currentGroovyCodeMd5 = DigestUtils.md5DigestAsHex(currentGroovyCode.getBytes(StandardCharsets.UTF_8));\n        String originGroovyCode = get2CodeCache(key);\n        if (StringUtils.hasText(originGroovyCode) && originGroovyCode.equals(currentGroovyCodeMd5)) {\n            log.info(\"Groovy\u811a\u672c[{}]\u672a\u53d1\u751f\u53d8\u66f4,\u4e0d\u7f16\u8bd1\u89e3\u6790\", key);\n            return false;\n        }\n        return true;\n    }\n\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/utils/GroovyUtils.java", "chunked_list": ["package com.java3y.hades.core.utils;\n\nimport com.google.common.base.Throwables;\nimport groovy.lang.GroovyClassLoader;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.util.DigestUtils;\n\nimport java.nio.charset.StandardCharsets;\n\n/**", "\n/**\n * @author 3y\n */\n@Slf4j\npublic class GroovyUtils {\n    private static final GroovyClassLoader GROOVY_CLASS_LOADER = new GroovyClassLoader();\n\n    public static Class parseClass(String instanceName, String groovyCode) {\n        Class groovyClass = null;\n        try {\n            HadesCache.put2CodeCache(instanceName, DigestUtils.md5DigestAsHex(groovyCode.getBytes(StandardCharsets.UTF_8)));\n            groovyClass = GROOVY_CLASS_LOADER.parseClass(groovyCode);\n            log.info(\"Groovy\u89e3\u6790:class=[{}]\u8bed\u6cd5\u901a\u8fc7\", instanceName);\n        } catch (Exception e) {\n            log.info(\"Groovy\u89e3\u6790:class=[{}]\u8bed\u6cd5\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\uff01e:{}\", instanceName, Throwables.getStackTraceAsString(e));\n        }\n        return groovyClass;\n    }\n}\n", "    public static Class parseClass(String instanceName, String groovyCode) {\n        Class groovyClass = null;\n        try {\n            HadesCache.put2CodeCache(instanceName, DigestUtils.md5DigestAsHex(groovyCode.getBytes(StandardCharsets.UTF_8)));\n            groovyClass = GROOVY_CLASS_LOADER.parseClass(groovyCode);\n            log.info(\"Groovy\u89e3\u6790:class=[{}]\u8bed\u6cd5\u901a\u8fc7\", instanceName);\n        } catch (Exception e) {\n            log.info(\"Groovy\u89e3\u6790:class=[{}]\u8bed\u6cd5\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\uff01e:{}\", instanceName, Throwables.getStackTraceAsString(e));\n        }\n        return groovyClass;\n    }\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/constant/HadesConstant.java", "chunked_list": ["package com.java3y.hades.core.constant;\n\n/**\n * @author 3y\n * \u9879\u76ee\u5e38\u91cf\n */\npublic class HadesConstant {\n\n    /**\n     * \u914d\u7f6e\u524d\u7f00\n     */", "    public static final String PROPERTIES_PREFIX = \"hades\";\n\n    /**\n     * \u542f\u7528\u914d\u7f6e\u7684key\n     */\n    public static final String HADES_ENABLED_PROPERTIES = PROPERTIES_PREFIX + \".enabled\";\n\n    /**\n     * nacos\u9ed8\u8ba4group\n     */\n    public static final String NACOS_DEFAULT_GROUP = \"DEFAULT_GROUP\";\n\n\n    /**\n     * Spring\u626b\u63cf\u8def\u5f84\n     */", "    public static final String NACOS_DEFAULT_GROUP = \"DEFAULT_GROUP\";\n\n\n    /**\n     * Spring\u626b\u63cf\u8def\u5f84\n     */\n    public static final String SCAN_PATH = \"com.java3y.hades\";\n\n\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/service/ExecuteCondition.java", "chunked_list": ["package com.java3y.hades.core.service;\n\n\n/**\n * @author 3y\n * \u6761\u4ef6\u63a5\u53e3(\u7ed9\u5230hades-web\u5b9e\u73b0\uff0cRuleType == 20 \u624d\u9700\u8981\u7528\u4e0a\uff09\n */\npublic interface ExecuteCondition {\n    /**\n     * \u6307\u5b9a\u6761\u4ef6\u8fc7\u6ee4\n     *\n     * @param string1 \u5b57\u7b26\u4e32\u53c2\u65701\n     * @param string2 \u5b57\u7b26\u4e32\u53c2\u65702\n     * @param string3 \u5b57\u7b26\u4e32\u53c2\u65703\n     * @param long1   Long\u53c2\u65701\n     * @param long2   Long\u53c2\u65702\n     * @param long3   Long\u53c2\u65703\n     * @return\n     */\n    Boolean execute(String string1, String string2, String string3, Long long1, Long long2, Long long3);\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/service/config/HadesConfigProperties.java", "chunked_list": ["package com.java3y.hades.core.service.config;\n\nimport com.java3y.hades.core.constant.HadesConstant;\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author 3y\n * \u9879\u76ee\u914d\u7f6e\u4fe1\u606f", " * @author 3y\n * \u9879\u76ee\u914d\u7f6e\u4fe1\u606f\n */\n@ConfigurationProperties(prefix = HadesConstant.PROPERTIES_PREFIX)\n@Configuration\n@Data\npublic class HadesConfigProperties {\n    /**\n     * \u662f\u5426\u4f7f\u7528hades\u89c4\u5219\u5f15\u64ce\n     */\n    private Boolean enabled;\n\n    /**\n     * \u4e3b\u914d\u7f6e\u540d\n     */\n    private String configName;\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/service/bootstrap/BaseHadesBaseConfig.java", "chunked_list": ["package com.java3y.hades.core.service.bootstrap;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.domain.MainConfig;\nimport com.java3y.hades.core.service.bean.RegisterBeanService;\nimport com.java3y.hades.core.service.config.HadesConfigProperties;\nimport com.java3y.hades.core.utils.GroovyUtils;\nimport com.java3y.hades.core.utils.HadesCache;\nimport lombok.extern.slf4j.Slf4j;", "import com.java3y.hades.core.utils.HadesCache;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.StringUtils;\n\nimport javax.annotation.PostConstruct;\nimport java.util.ArrayList;\nimport java.util.Objects;\n\n/**", "\n/**\n * @author 3y\n */\n@Slf4j\npublic abstract class BaseHadesBaseConfig implements HadesBaseConfig {\n    @Autowired\n    protected HadesConfigProperties configProperties;\n\n    @Autowired\n    private RegisterBeanService registerBeanService;\n\n    @PostConstruct", "    public void init() {\n\n        // \u9002\u914dhades-web\u7aef(\u521b\u5efa\u51fa\u9ed8\u8ba4\u4e3b\u914d\u7f6e)\n        if (!StringUtils.hasText(getConfigValueByName(configProperties.getConfigName()))) {\n            MainConfig initConfig = MainConfig.builder().instanceNames(new ArrayList<>()).updateTime(System.currentTimeMillis()).build();\n            addOrUpdateProperty(configProperties.getConfigName(), JSON.toJSONString(initConfig));\n        }\n\n        // \u542f\u52a8\u89e3\u6790\u5e76\u6ce8\u518c\u76d1\u542c\u5668 (\u91cd\u70b9)\n        if (StringUtils.hasText(getConfigValueByName(configProperties.getConfigName()))) {\n            bootstrap(getConfigValueByName(configProperties.getConfigName()));\n            addListener();\n        }\n    }\n\n\n    /**\n     * 1\u3001\u89e3\u6790\u4e3b\u914d\u7f6e\n     * 2\u3001\u5f97\u5230\u6bcf\u4e2agroovy\u914d\u7f6e\u5e76\u6bd4\u5bf9\u6709\u65e0\u53d8\u5316\n     * 3\u3001\u6709\u53d8\u5316\u7684groovy\u914d\u7f6e\u91cd\u65b0\u6ce8\u518c\n     *\n     * @param mainConfig {\"instanceNames\":[\"com.java3y.hades.core.constant.HadesConstant\"],\"updateTime\":\"2023\u5e743\u670820\u65e510:26:0131\"}\n     */", "        if (StringUtils.hasText(getConfigValueByName(configProperties.getConfigName()))) {\n            bootstrap(getConfigValueByName(configProperties.getConfigName()));\n            addListener();\n        }\n    }\n\n\n    /**\n     * 1\u3001\u89e3\u6790\u4e3b\u914d\u7f6e\n     * 2\u3001\u5f97\u5230\u6bcf\u4e2agroovy\u914d\u7f6e\u5e76\u6bd4\u5bf9\u6709\u65e0\u53d8\u5316\n     * 3\u3001\u6709\u53d8\u5316\u7684groovy\u914d\u7f6e\u91cd\u65b0\u6ce8\u518c\n     *\n     * @param mainConfig {\"instanceNames\":[\"com.java3y.hades.core.constant.HadesConstant\"],\"updateTime\":\"2023\u5e743\u670820\u65e510:26:0131\"}\n     */", "    public synchronized void bootstrap(String mainConfig) {\n        try {\n            MainConfig config = JSON.parseObject(mainConfig, MainConfig.class);\n            for (String instanceName : config.getInstanceNames()) {\n                String groovyCode = getConfigValueByName(instanceName);\n                if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {\n                    register(instanceName, groovyCode);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"parseConfigAndRegister fail! config:{},exception:{}\", mainConfig, Throwables.getStackTraceAsString(e));\n        }\n\n    }\n\n    /**\n     * 1\u3001\u8c03\u7528groovy\u52a0\u8f7d\u5668\u89e3\u6790\uff0c\u751f\u6210class\u5bf9\u8c61\n     * 2\u3001class\u5bf9\u8c61\u6ce8\u518c\u5230Spring IOC \u5bb9\u5668\u4e2d\n     *\n     * @param instanceName\n     * @param groovyCode\n     */", "    public void register(String instanceName, String groovyCode) {\n        Class clazz = GroovyUtils.parseClass(instanceName, groovyCode);\n        if (Objects.nonNull(clazz)) {\n            Object bean = registerBeanService.registerBean(instanceName, clazz);\n            log.info(\"bean:[{}]\u5df2\u6ce8\u518c\u5230Spring IOC\u4e2d\", bean.getClass().getName());\n        }\n    }\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/service/bootstrap/HadesBaseConfig.java", "chunked_list": ["package com.java3y.hades.core.service.bootstrap;\n\n\n/**\n * @author 3y\n * \u914d\u7f6e\u670d\u52a1\n */\npublic interface HadesBaseConfig {\n\n    /**\n     * \u542f\u52a8\u914d\u7f6e\u53d8\u66f4\u76d1\u542c\u5668\n     */\n    void addListener();\n\n    /**\n     * \u901a\u8fc7\u6587\u4ef6\u540d\u83b7\u53d6\u5f97\u5230\u6587\u4ef6\u5185\u5bb9\n     *\n     * @param configName\n     * @return\n     */\n    String getConfigValueByName(String configName);\n\n    /**\n     * \u8bbe\u7f6e\u914d\u7f6e(nacos/apollo)\n     *\n     * @param key\n     * @param value\n     */\n    void addOrUpdateProperty(String key, String value);\n\n    /**\n     * \u5220\u9664\u914d\u7f6e(nacos/apollo)\n     * @param key\n     */\n    void removeProperty(String key);\n}\n"]}
{"filename": "hades-core/src/main/java/com/java3y/hades/core/service/bean/RegisterBeanService.java", "chunked_list": ["package com.java3y.hades.core.service.bean;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.stereotype.Service;", "import org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author 3y\n * \u5c06groovy class \u6ce8\u518c\u5230 Spring IOC \u5bb9\u5668\u4e2d\n */\n@Service\n@Slf4j\npublic class RegisterBeanService {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public <T> T registerBean(String name, Class<T> clazz, Object... args) {\n        ConfigurableApplicationContext context = (ConfigurableApplicationContext) applicationContext;\n        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(clazz);", "@Slf4j\npublic class RegisterBeanService {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public <T> T registerBean(String name, Class<T> clazz, Object... args) {\n        ConfigurableApplicationContext context = (ConfigurableApplicationContext) applicationContext;\n        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(clazz);\n        for (Object arg : args) {\n            beanDefinitionBuilder.addConstructorArgValue(arg);\n        }\n        BeanDefinition beanDefinition = beanDefinitionBuilder.getRawBeanDefinition();\n        BeanDefinitionRegistry beanFactory = (BeanDefinitionRegistry) context.getBeanFactory();", "        for (Object arg : args) {\n            beanDefinitionBuilder.addConstructorArgValue(arg);\n        }\n        BeanDefinition beanDefinition = beanDefinitionBuilder.getRawBeanDefinition();\n        BeanDefinitionRegistry beanFactory = (BeanDefinitionRegistry) context.getBeanFactory();\n        if (context.containsBean(name)) {\n            log.info(\"bean:[{}]\u5728\u7cfb\u7edf\u4e2d\u5df2\u5b58\u5728,\u63a5\u4e0b\u6765\u5bf9\u5176\u8fdb\u884c\u66ff\u6362\u64cd\u4f5c\", name);\n            beanFactory.removeBeanDefinition(name);\n        }\n        beanFactory.registerBeanDefinition(name, beanDefinition);\n        return applicationContext.getBean(name, clazz);\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/HadesApplication.java", "chunked_list": ["package com.java3y.hades;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author 3y\n * hades Web\u542f\u52a8\u7c7b\n */\n@SpringBootApplication\npublic class HadesApplication {", " */\n@SpringBootApplication\npublic class HadesApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(HadesApplication.class, args);\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/vo/HadesConfigListVo.java", "chunked_list": ["package com.java3y.hades.vo;\n\n\nimport com.java3y.hades.enums.RuleType;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**", "\n/**\n * @author 3y\n * hades\u914d\u7f6e\u8fd4\u56de\u7c7b\n */\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class HadesConfigListVo {\n\n    /**\n     * \u5168\u9650\u5b9a\u7c7b\u540d(\u5305\u540d+\u7c7b\u540d)\n     * eg:com.java3y.hades.core.constant.HadesConstant\n     */\n    private String name;\n\n    /**\n     * \u89c4\u5219\u7c7b\u578b\n     *\n     * @see RuleType\n     */\n    private String ruleType;\n\n    /**\n     * \u89c4\u5219 \u903b\u8f91\u56fe\n     */\n    private String ruleLogicGraph;\n\n    /**\n     * \u89c4\u5219 \u811a\u672c\u4ee3\u7801\n     */\n    private String ruleLogicCode;\n}\n", "@NoArgsConstructor\npublic class HadesConfigListVo {\n\n    /**\n     * \u5168\u9650\u5b9a\u7c7b\u540d(\u5305\u540d+\u7c7b\u540d)\n     * eg:com.java3y.hades.core.constant.HadesConstant\n     */\n    private String name;\n\n    /**\n     * \u89c4\u5219\u7c7b\u578b\n     *\n     * @see RuleType\n     */\n    private String ruleType;\n\n    /**\n     * \u89c4\u5219 \u903b\u8f91\u56fe\n     */\n    private String ruleLogicGraph;\n\n    /**\n     * \u89c4\u5219 \u811a\u672c\u4ee3\u7801\n     */\n    private String ruleLogicCode;\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/vo/basic/BasicResultVO.java", "chunked_list": ["package com.java3y.hades.vo.basic;\n\nimport com.java3y.hades.enums.RespStatusEnum;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\n\n/**\n * @author zzb", "/**\n * @author zzb\n * @since 2021.11.17\n */\n\n@Getter\n@ToString(callSuper = true)\n@AllArgsConstructor\n@NoArgsConstructor\npublic final class BasicResultVO<T> {\n\n    /**\n     * \u54cd\u5e94\u72b6\u6001\n     */\n    private String status;\n\n    /**\n     * \u54cd\u5e94\u7f16\u7801\n     */\n    private String msg;\n\n    /**\n     * \u8fd4\u56de\u6570\u636e\n     */\n    private T data;\n\n    public BasicResultVO(String status, String msg) {\n        this.status = status;\n        this.msg = msg;\n    }\n\n    public BasicResultVO(RespStatusEnum status) {\n        this(status, null);\n    }\n\n    public BasicResultVO(RespStatusEnum status, T data) {\n        this(status, status.getDescription(), data);\n    }\n\n    public BasicResultVO(RespStatusEnum status, String msg, T data) {\n        this.status = status.getCode();\n        this.msg = msg;\n        this.data = data;\n    }\n\n    /**\n     * @return \u9ed8\u8ba4\u6210\u529f\u54cd\u5e94\n     */", "@NoArgsConstructor\npublic final class BasicResultVO<T> {\n\n    /**\n     * \u54cd\u5e94\u72b6\u6001\n     */\n    private String status;\n\n    /**\n     * \u54cd\u5e94\u7f16\u7801\n     */\n    private String msg;\n\n    /**\n     * \u8fd4\u56de\u6570\u636e\n     */\n    private T data;\n\n    public BasicResultVO(String status, String msg) {\n        this.status = status;\n        this.msg = msg;\n    }\n\n    public BasicResultVO(RespStatusEnum status) {\n        this(status, null);\n    }\n\n    public BasicResultVO(RespStatusEnum status, T data) {\n        this(status, status.getDescription(), data);\n    }\n\n    public BasicResultVO(RespStatusEnum status, String msg, T data) {\n        this.status = status.getCode();\n        this.msg = msg;\n        this.data = data;\n    }\n\n    /**\n     * @return \u9ed8\u8ba4\u6210\u529f\u54cd\u5e94\n     */", "    public static BasicResultVO<Void> success() {\n        return new BasicResultVO<>(RespStatusEnum.SUCCESS);\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u4fe1\u606f\u7684\u6210\u529f\u54cd\u5e94\n     * <p>\u901a\u5e38\u7528\u4f5c\u63d2\u5165\u6210\u529f\u7b49\u5e76\u663e\u793a\u5177\u4f53\u64cd\u4f5c\u901a\u77e5\u5982: return BasicResultVO.success(\"\u53d1\u9001\u4fe1\u606f\u6210\u529f\")</p>\n     *\n     * @param msg \u4fe1\u606f\n     * @return \u81ea\u5b9a\u4e49\u4fe1\u606f\u7684\u6210\u529f\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> success(String msg) {\n        return new BasicResultVO<>(RespStatusEnum.SUCCESS, msg, null);\n    }\n\n    /**\n     * \u5e26\u6570\u636e\u7684\u6210\u529f\u54cd\u5e94\n     *\n     * @param data \u6570\u636e\n     * @return \u5e26\u6570\u636e\u7684\u6210\u529f\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> success(T data) {\n        return new BasicResultVO<>(RespStatusEnum.SUCCESS, data);\n    }\n\n    /**\n     * @return \u9ed8\u8ba4\u5931\u8d25\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> fail() {\n        return new BasicResultVO<>(\n                RespStatusEnum.FAIL,\n                RespStatusEnum.FAIL.getDescription(),\n                null\n        );\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u9519\u8bef\u4fe1\u606f\u7684\u5931\u8d25\u54cd\u5e94\n     *\n     * @param msg \u9519\u8bef\u4fe1\u606f\n     * @return \u81ea\u5b9a\u4e49\u9519\u8bef\u4fe1\u606f\u7684\u5931\u8d25\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> fail(String msg) {\n        return fail(RespStatusEnum.FAIL, msg);\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u72b6\u6001\u7684\u5931\u8d25\u54cd\u5e94\n     *\n     * @param status \u72b6\u6001\n     * @return \u81ea\u5b9a\u4e49\u72b6\u6001\u7684\u5931\u8d25\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> fail(RespStatusEnum status) {\n        return fail(status, status.getDescription());\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u72b6\u6001\u548c\u4fe1\u606f\u7684\u5931\u8d25\u54cd\u5e94\n     *\n     * @param status \u72b6\u6001\n     * @param msg    \u4fe1\u606f\n     * @return \u81ea\u5b9a\u4e49\u72b6\u6001\u548c\u4fe1\u606f\u7684\u5931\u8d25\u54cd\u5e94\n     */\n    public static <T> BasicResultVO<T> fail(RespStatusEnum status, String msg) {\n        return new BasicResultVO<>(status, msg, null);\n    }\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/advice/HadesResponseBodyAdvice.java", "chunked_list": ["package com.java3y.hades.advice;\n\n\nimport com.java3y.hades.annotation.HadesResult;\nimport com.java3y.hades.vo.basic.BasicResultVO;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.web.bind.annotation.ControllerAdvice;", "import org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\nimport java.util.Objects;\n\n/**\n * @author kl\n * @version 1.0.0\n * @description \u7edf\u4e00\u8fd4\u56de\u7ed3\u6784", " * @version 1.0.0\n * @description \u7edf\u4e00\u8fd4\u56de\u7ed3\u6784\n * @date 2023/2/9 19:00\n */\n@ControllerAdvice(basePackages = \"com.java3y.austin.web.controller\")\npublic class HadesResponseBodyAdvice implements ResponseBodyAdvice<Object> {\n\n    private static final String RETURN_CLASS = \"BasicResultVO\";\n\n    @Override\n    public boolean supports(MethodParameter methodParameter, Class aClass) {\n        return methodParameter.getContainingClass().isAnnotationPresent(HadesResult.class) || methodParameter.hasMethodAnnotation(HadesResult.class);\n    }\n\n    @Override", "    public boolean supports(MethodParameter methodParameter, Class aClass) {\n        return methodParameter.getContainingClass().isAnnotationPresent(HadesResult.class) || methodParameter.hasMethodAnnotation(HadesResult.class);\n    }\n\n    @Override\n    public Object beforeBodyWrite(Object data, MethodParameter methodParameter, MediaType mediaType, Class aClass,\n                                  ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) {\n        if (Objects.nonNull(data) && Objects.nonNull(data.getClass())) {\n            String simpleName = data.getClass().getSimpleName();\n            if (RETURN_CLASS.equalsIgnoreCase(simpleName)) {\n                return data;\n            }\n        }\n        return BasicResultVO.success(data);\n    }\n}\n", "            if (RETURN_CLASS.equalsIgnoreCase(simpleName)) {\n                return data;\n            }\n        }\n        return BasicResultVO.success(data);\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/domain/HadesParam.java", "chunked_list": ["package com.java3y.hades.domain;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.java3y.hades.enums.RuleType;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * hades web\u5165\u53c2", "/**\n * hades web\u5165\u53c2\n *\n * @author 3y\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class HadesParam {\n\n    /**\n     * \u5168\u9650\u5b9a\u7c7b\u540d(\u5305\u540d+\u7c7b\u540d)\n     * eg:com.java3y.hades.core.constant.HadesConstant\n     */\n    private String name;\n\n    /**\n     * \u89c4\u5219\u7c7b\u578b\n     *\n     * @see RuleType\n     */\n    private String ruleType;\n\n    /**\n     * \u89c4\u5219 \u903b\u8f91\u56fe\n     */\n    private JSONObject ruleLogicGraph;\n\n    /**\n     * \u89c4\u5219 \u811a\u672c\u4ee3\u7801\n     */\n    private String ruleLogicCode;\n\n\n    /**\n     * \u641c\u7d22\u6761\u4ef6\uff1a\u5173\u952e\u8bcd\n     */\n    private String keywords;\n\n\n}\n", "public class HadesParam {\n\n    /**\n     * \u5168\u9650\u5b9a\u7c7b\u540d(\u5305\u540d+\u7c7b\u540d)\n     * eg:com.java3y.hades.core.constant.HadesConstant\n     */\n    private String name;\n\n    /**\n     * \u89c4\u5219\u7c7b\u578b\n     *\n     * @see RuleType\n     */\n    private String ruleType;\n\n    /**\n     * \u89c4\u5219 \u903b\u8f91\u56fe\n     */\n    private JSONObject ruleLogicGraph;\n\n    /**\n     * \u89c4\u5219 \u811a\u672c\u4ee3\u7801\n     */\n    private String ruleLogicCode;\n\n\n    /**\n     * \u641c\u7d22\u6761\u4ef6\uff1a\u5173\u952e\u8bcd\n     */\n    private String keywords;\n\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/config/CrossConfig.java", "chunked_list": ["package com.java3y.hades.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * @author 3y\n * \u8de8\u57df\u914d\u7f6e\n */", " * \u8de8\u57df\u914d\u7f6e\n */\n@Configuration\npublic class CrossConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedMethods(\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                .allowCredentials(true)\n                .maxAge(3600)\n                .allowedHeaders(\"*\");\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/controller/HealthController.java", "chunked_list": ["package com.java3y.hades.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * \u5065\u5eb7\u68c0\u67e5\u63a5\u53e3\n *\n * @author 3y", " *\n * @author 3y\n */\n@RestController\n@Slf4j\npublic class HealthController {\n    @RequestMapping(\"/health\")\n    private String health() {\n        return \"success\";\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/controller/ConfigController.java", "chunked_list": ["package com.java3y.hades.controller;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.java3y.hades.annotation.HadesAspect;\nimport com.java3y.hades.annotation.HadesResult;\nimport com.java3y.hades.core.domain.MainConfig;\nimport com.java3y.hades.core.service.bootstrap.HadesBaseConfig;\nimport com.java3y.hades.core.service.config.HadesConfigProperties;\nimport com.java3y.hades.domain.HadesParam;\nimport com.java3y.hades.enums.RespStatusEnum;", "import com.java3y.hades.domain.HadesParam;\nimport com.java3y.hades.enums.RespStatusEnum;\nimport com.java3y.hades.service.HadesConfigService;\nimport com.java3y.hades.vo.HadesConfigListVo;\nimport com.java3y.hades.vo.basic.BasicResultVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;", "import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n/**\n * \u914d\u7f6e\u63a5\u53e3\n *\n * @author 3y\n */", " * @author 3y\n */\n@RestController\n@Slf4j\n@HadesResult\n@HadesAspect\npublic class ConfigController {\n\n    @Autowired\n    private HadesBaseConfig baseConfigService;\n    @Autowired\n    private HadesConfigService configService;\n    @Autowired\n    protected HadesConfigProperties configProperties;\n\n    @RequestMapping(\"/config/add\")\n    private BasicResultVO addConfig(@RequestBody HadesParam hadesParam) {\n        MainConfig mainConfig = JSON.parseObject(baseConfigService.getConfigValueByName(configProperties.getConfigName()), MainConfig.class);", "        if (mainConfig.getInstanceNames().contains(hadesParam.getName())) {\n            return BasicResultVO.fail(RespStatusEnum.FAIL, \"\u5df2\u5b58\u5728\u76f8\u540c\u540d\u7684\u811a\u672c\uff0c\u7981\u6b62\u6dfb\u52a0\");\n        }\n        configService.addConfig(hadesParam);\n        return BasicResultVO.success();\n    }\n\n    @RequestMapping(\"/config/get\")\n    private List<HadesConfigListVo> getAllConfig(String keywords) {\n        return configService.getAllConfig(keywords);\n    }\n\n    @RequestMapping(\"/config/delete\")\n    private BasicResultVO deleteConfig(String name) {\n        configService.deleteConfig(name);\n        return BasicResultVO.success();\n    }\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/enums/RespStatusEnum.java", "chunked_list": ["package com.java3y.hades.enums;\n\nimport com.java3y.hades.enums.base.PowerfulEnum;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.ToString;\n\n/**\n * \u5168\u5c40\u54cd\u5e94\u72b6\u6001\u679a\u4e3e\n *", " * \u5168\u5c40\u54cd\u5e94\u72b6\u6001\u679a\u4e3e\n *\n * @author zzb\n * @since 2021.11.17\n **/\n@Getter\n@ToString\n@AllArgsConstructor\npublic enum RespStatusEnum  {\n\n    /**\n     * \u9519\u8bef\n     */\n    ERROR_500(\"500\", \"\u670d\u52a1\u5668\u672a\u77e5\u9519\u8bef\"),\n    ERROR_400(\"400\", \"\u9519\u8bef\u8bf7\u6c42\"),\n\n    /**\n     * OK\uff1a\u64cd\u4f5c\u6210\u529f\n     */\n    SUCCESS(\"0\", \"\u64cd\u4f5c\u6210\u529f\"),\n    FAIL(\"-1\", \"\u64cd\u4f5c\u5931\u8d25\"),\n\n\n    /**\n     * \u5ba2\u6237\u7aef\n     */\n    CLIENT_BAD_PARAMETERS(\"A0001\", \"\u5ba2\u6237\u7aef\u53c2\u6570\u9519\u8bef\"),\n    TEMPLATE_NOT_FOUND(\"A0002\", \"\u627e\u4e0d\u5230\u6a21\u677f\u6216\u6a21\u677f\u5df2\u88ab\u5220\u9664\"),\n    TOO_MANY_RECEIVER(\"A0003\", \"\u4f20\u5165\u7684\u63a5\u6536\u8005\u5927\u4e8e100\u4e2a\"),\n    DO_NOT_NEED_LOGIN(\"A0004\", \"\u975e\u6d4b\u8bd5\u73af\u5883\uff0c\u65e0\u987b\u767b\u5f55\"),\n    NO_LOGIN(\"A0005\", \"\u8fd8\u672a\u767b\u5f55\uff0c\u8bf7\u5148\u767b\u5f55\"),\n\n    /**\n     * \u7cfb\u7edf\n     */\n    SERVICE_ERROR(\"B0001\", \"\u670d\u52a1\u6267\u884c\u5f02\u5e38\"),\n    RESOURCE_NOT_FOUND(\"B0404\", \"\u8d44\u6e90\u4e0d\u5b58\u5728\"),\n\n\n    /**\n     * pipeline\n     */\n    CONTEXT_IS_NULL(\"P0001\", \"\u6d41\u7a0b\u4e0a\u4e0b\u6587\u4e3a\u7a7a\"),\n    BUSINESS_CODE_IS_NULL(\"P0002\", \"\u4e1a\u52a1\u4ee3\u7801\u4e3a\u7a7a\"),\n    PROCESS_TEMPLATE_IS_NULL(\"P0003\", \"\u6d41\u7a0b\u6a21\u677f\u914d\u7f6e\u4e3a\u7a7a\"),\n    PROCESS_LIST_IS_NULL(\"P0004\", \"\u4e1a\u52a1\u5904\u7406\u5668\u914d\u7f6e\u4e3a\u7a7a\"),\n\n\n    ;\n\n    /**\n     * \u54cd\u5e94\u72b6\u6001\n     */\n    private final String code;\n    /**\n     * \u54cd\u5e94\u7f16\u7801\n     */\n    private final String description;\n}\n", "public enum RespStatusEnum  {\n\n    /**\n     * \u9519\u8bef\n     */\n    ERROR_500(\"500\", \"\u670d\u52a1\u5668\u672a\u77e5\u9519\u8bef\"),\n    ERROR_400(\"400\", \"\u9519\u8bef\u8bf7\u6c42\"),\n\n    /**\n     * OK\uff1a\u64cd\u4f5c\u6210\u529f\n     */\n    SUCCESS(\"0\", \"\u64cd\u4f5c\u6210\u529f\"),\n    FAIL(\"-1\", \"\u64cd\u4f5c\u5931\u8d25\"),\n\n\n    /**\n     * \u5ba2\u6237\u7aef\n     */\n    CLIENT_BAD_PARAMETERS(\"A0001\", \"\u5ba2\u6237\u7aef\u53c2\u6570\u9519\u8bef\"),\n    TEMPLATE_NOT_FOUND(\"A0002\", \"\u627e\u4e0d\u5230\u6a21\u677f\u6216\u6a21\u677f\u5df2\u88ab\u5220\u9664\"),\n    TOO_MANY_RECEIVER(\"A0003\", \"\u4f20\u5165\u7684\u63a5\u6536\u8005\u5927\u4e8e100\u4e2a\"),\n    DO_NOT_NEED_LOGIN(\"A0004\", \"\u975e\u6d4b\u8bd5\u73af\u5883\uff0c\u65e0\u987b\u767b\u5f55\"),\n    NO_LOGIN(\"A0005\", \"\u8fd8\u672a\u767b\u5f55\uff0c\u8bf7\u5148\u767b\u5f55\"),\n\n    /**\n     * \u7cfb\u7edf\n     */\n    SERVICE_ERROR(\"B0001\", \"\u670d\u52a1\u6267\u884c\u5f02\u5e38\"),\n    RESOURCE_NOT_FOUND(\"B0404\", \"\u8d44\u6e90\u4e0d\u5b58\u5728\"),\n\n\n    /**\n     * pipeline\n     */\n    CONTEXT_IS_NULL(\"P0001\", \"\u6d41\u7a0b\u4e0a\u4e0b\u6587\u4e3a\u7a7a\"),\n    BUSINESS_CODE_IS_NULL(\"P0002\", \"\u4e1a\u52a1\u4ee3\u7801\u4e3a\u7a7a\"),\n    PROCESS_TEMPLATE_IS_NULL(\"P0003\", \"\u6d41\u7a0b\u6a21\u677f\u914d\u7f6e\u4e3a\u7a7a\"),\n    PROCESS_LIST_IS_NULL(\"P0004\", \"\u4e1a\u52a1\u5904\u7406\u5668\u914d\u7f6e\u4e3a\u7a7a\"),\n\n\n    ;\n\n    /**\n     * \u54cd\u5e94\u72b6\u6001\n     */\n    private final String code;\n    /**\n     * \u54cd\u5e94\u7f16\u7801\n     */\n    private final String description;\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/enums/RuleType.java", "chunked_list": ["package com.java3y.hades.enums;\n\nimport com.java3y.hades.enums.base.PowerfulEnum;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.ToString;\n\n\n/**\n * @author 3y", "/**\n * @author 3y\n * \u89c4\u5219\u7c7b\u578b\n */\n@Getter\n@ToString\n@AllArgsConstructor\npublic enum RuleType implements PowerfulEnum {\n\n    /**\n     * 10.Java\u539f\u751f\u4ee3\u7801\n     */\n    CODE(10, \"Java\u539f\u751f\u4ee3\u7801\"),\n    /**\n     * 20.\u9875\u9762\u903b\u8f91\u89c4\u5219\n     */\n    GRAPH(20, \"\u89c4\u5219\u903b\u8f91\u56fe\");\n\n    private final Integer code;\n    private final String description;\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/enums/base/EnumUtil.java", "chunked_list": ["package com.java3y.hades.enums.base;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n/**\n * @author kyw7\n * \u679a\u4e3e\u5de5\u5177\u7c7b\uff08\u83b7\u53d6\u679a\u4e3e\u7684\u63cf\u8ff0\u3001\u83b7\u53d6\u679a\u4e3e\u7684code\u3001\u83b7\u53d6\u679a\u4e3e\u7684code\u5217\u8868\uff09", " * @author kyw7\n * \u679a\u4e3e\u5de5\u5177\u7c7b\uff08\u83b7\u53d6\u679a\u4e3e\u7684\u63cf\u8ff0\u3001\u83b7\u53d6\u679a\u4e3e\u7684code\u3001\u83b7\u53d6\u679a\u4e3e\u7684code\u5217\u8868\uff09\n */\npublic class EnumUtil {\n\n    private EnumUtil() {\n    }\n\n    public static <T extends PowerfulEnum> String getDescriptionByCode(Integer code, Class<T> enumClass) {\n        return Arrays.stream(enumClass.getEnumConstants())\n                .filter(e -> Objects.equals(e.getCode(), code))\n                .findFirst().map(PowerfulEnum::getDescription).orElse(\"\");\n    }\n\n    public static <T extends PowerfulEnum> T getEnumByCode(Integer code, Class<T> enumClass) {\n        return Arrays.stream(enumClass.getEnumConstants())\n                .filter(e -> Objects.equals(e.getCode(), code))\n                .findFirst().orElse(null);\n    }\n\n    public static <T extends PowerfulEnum> List<Integer> getCodeList(Class<T> enumClass) {\n        return Arrays.stream(enumClass.getEnumConstants())\n                .map(PowerfulEnum::getCode)\n                .collect(Collectors.toList());\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/enums/base/PowerfulEnum.java", "chunked_list": ["package com.java3y.hades.enums.base;\n\n/**\n * @author kyw7\n * \u679a\u4e3e\u63a5\u53e3\n */\npublic interface PowerfulEnum {\n\n    /**\n     * \u83b7\u53d6\u679a\u4e3e\u7684code\n     *\n     * @return\n     */\n    Integer getCode();\n\n    /**\n     * \u83b7\u53d6\u679a\u4e3e\u7684\u63cf\u8ff0\n     *\n     * @return\n     */\n    String getDescription();\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/parse/ParseConfig.java", "chunked_list": ["package com.java3y.hades.parse;\n\n/**\n * \u89e3\u6790\u6761\u4ef6\u914d\u7f6e\n *\n * @author 3y\n */\npublic interface ParseConfig {\n\n\n    /**\n     * \u89e3\u6790\n     *\n     * @param config\n     * @return\n     */\n    String parse(String config);\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/parse/impl/ParseJavaConfig.java", "chunked_list": ["package com.java3y.hades.parse.impl;\n\n\nimport com.alibaba.fastjson2.JSON;\nimport com.java3y.hades.parse.ParseConfig;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\n/**\n * \u5c06\u6761\u4ef6\u89e3\u6790\u6210java\u914d\u7f6e\n *\n * @author 3y\n */\n@Component\npublic class ParseJavaConfig implements ParseConfig {\n\n    private static final String IS_NOT_EMPTY = \"is_not_empty\";\n    private static final String EQUAL = \"equal\";\n    private static final String NOT_EQUAL = \"not_equal\";\n    private static final String IS_EMPTY = \"is_empty\";\n    private static final String LIKE = \"like\";\n    private static final String NOT_LIKE = \"not_like\";\n    private static final String STARTS_WITH = \"starts_with\";\n    private static final String ENDS_WITH = \"ends_with\";\n    private static final String LESS = \"less\";\n    private static final String LESS_OR_EQUAL = \"less_or_equal\";\n    private static final String GREATER = \"greater\";\n    private static final String GREATER_OR_EQUAL = \"greater_or_equal\";\n    private static final String BETWEEN = \"between\";\n    private static final String NOT_BETWEEN = \"not_between\";\n    private static final String AND = \"and\";\n    private static final String OR = \"or\";\n\n    @Override", "@Component\npublic class ParseJavaConfig implements ParseConfig {\n\n    private static final String IS_NOT_EMPTY = \"is_not_empty\";\n    private static final String EQUAL = \"equal\";\n    private static final String NOT_EQUAL = \"not_equal\";\n    private static final String IS_EMPTY = \"is_empty\";\n    private static final String LIKE = \"like\";\n    private static final String NOT_LIKE = \"not_like\";\n    private static final String STARTS_WITH = \"starts_with\";\n    private static final String ENDS_WITH = \"ends_with\";\n    private static final String LESS = \"less\";\n    private static final String LESS_OR_EQUAL = \"less_or_equal\";\n    private static final String GREATER = \"greater\";\n    private static final String GREATER_OR_EQUAL = \"greater_or_equal\";\n    private static final String BETWEEN = \"between\";\n    private static final String NOT_BETWEEN = \"not_between\";\n    private static final String AND = \"and\";\n    private static final String OR = \"or\";\n\n    @Override", "    public String parse(String config) {\n        return generateJavaCondition(JSON.parseObject(config, Map.class));\n    }\n\n    private static String generateJavaFieldCondition(String field, String op, Object right) {\n\n        if (op.equals(IS_NOT_EMPTY)) {\n            return field + \" !=null\";\n        } else if (op.equals(EQUAL)) {\n            if (right instanceof String) {\n                return field + \".equals(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n            } else {\n                return field + \" == \" + right + \"L\";\n            }", "        } else if (op.equals(EQUAL)) {\n            if (right instanceof String) {\n                return field + \".equals(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n            } else {\n                return field + \" == \" + right + \"L\";\n            }\n        } else if (op.equals(NOT_EQUAL)) {\n            if (right instanceof String) {\n                return \"!\" + field + \".equals(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n            } else {\n                return field + \" != \" + right + \"L\";\n            }", "        } else if (op.equals(IS_EMPTY)) {\n            return field + \" == null \";\n        } else if (op.equals(LIKE)) {\n            return field + \".contains(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n        } else if (op.equals(NOT_LIKE)) {\n            return \"!\" + field + \".contains(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n        } else if (op.equals(STARTS_WITH)) {\n            return field + \".startsWith(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n        } else if (op.equals(ENDS_WITH)) {\n            return field + \".endsWith(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n        } else if (op.equals(LESS)) {\n            return field + \".longValue()\" + \" < \" + right + \"L\";", "        } else if (op.equals(ENDS_WITH)) {\n            return field + \".endsWith(\" + \"\\\"\" + right + \"\\\"\" + \")\";\n        } else if (op.equals(LESS)) {\n            return field + \".longValue()\" + \" < \" + right + \"L\";\n        } else if (op.equals(LESS_OR_EQUAL)) {\n            return field + \".longValue()\" + \" <= \" + right + \"L\";\n        } else if (op.equals(GREATER)) {\n            return field + \".longValue()\" + \" > \" + right + \"L\";\n        } else if (op.equals(GREATER_OR_EQUAL)) {\n            return field + \".longValue()\" + \" >= \" + right + \"L\";\n        } else if (op.equals(BETWEEN)) {\n            List<Integer> range = (List<Integer>) right;\n            return \"(\" + field + \".longValue()\" + \" >= \" + range.get(0) + \"L\" + \" && \" + field + \".longValue()\" + \" <= \" + range.get(1) + \"L\" + \")\";", "        } else if (op.equals(GREATER_OR_EQUAL)) {\n            return field + \".longValue()\" + \" >= \" + right + \"L\";\n        } else if (op.equals(BETWEEN)) {\n            List<Integer> range = (List<Integer>) right;\n            return \"(\" + field + \".longValue()\" + \" >= \" + range.get(0) + \"L\" + \" && \" + field + \".longValue()\" + \" <= \" + range.get(1) + \"L\" + \")\";\n        } else if (op.equals(NOT_BETWEEN)) {\n            List<Integer> range = (List<Integer>) right;\n            return \"(\" + field + \".longValue()\" + \" < \" + range.get(0) + \"L\" + \" || \" + field + \".longValue()\" + \">\" + range.get(1) + \"L\" + \")\";\n        } else {\n            throw new IllegalArgumentException(\"Unsupported operator: \" + op);\n        }\n    }\n\n    private static String generateJavaCondition(Map<String, Object> config) {\n        String conjunction = (String) config.get(\"conjunction\");", "        if (AND.equals(conjunction)) {\n            conjunction = \"&&\";\n        } else if (OR.equals(conjunction)) {\n            conjunction = \"||\";\n        }\n        List<Map<String, Object>> children = (List<Map<String, Object>>) config.get(\"children\");\n        List<String> childConditions = new ArrayList<>();\n\n        for (Map<String, Object> child : children) {\n            Map<String, Object> left = (Map<String, Object>) child.get(\"left\");\n            if (left == null) {\n                // \u5982\u679cleft\u4e3anull\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                String childCondition = generateJavaCondition(child);\n                childConditions.add(childCondition);\n            } else {\n                String type = (String) left.get(\"type\");\n", "        for (Map<String, Object> child : children) {\n            Map<String, Object> left = (Map<String, Object>) child.get(\"left\");\n            if (left == null) {\n                // \u5982\u679cleft\u4e3anull\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                String childCondition = generateJavaCondition(child);\n                childConditions.add(childCondition);\n            } else {\n                String type = (String) left.get(\"type\");\n\n                if (type != null && type.equals(\"field\")) {\n                    // \u5904\u7406\u5b57\u6bb5\u7c7b\u578b\u7684\u8282\u70b9\n                    String field = (String) left.get(\"field\");\n                    String op = (String) child.get(\"op\");\n                    Object right = child.get(\"right\");\n\n                    String childCondition = generateJavaFieldCondition(field, op, right);\n                    childConditions.add(childCondition);\n                } else {\n                    // \u5904\u7406\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                    String childCondition = generateJavaCondition(child);\n                    childConditions.add(childCondition);\n                }\n            }\n        }\n\n        String condition = String.join(\" \" + conjunction + \" \", childConditions);", "                if (type != null && type.equals(\"field\")) {\n                    // \u5904\u7406\u5b57\u6bb5\u7c7b\u578b\u7684\u8282\u70b9\n                    String field = (String) left.get(\"field\");\n                    String op = (String) child.get(\"op\");\n                    Object right = child.get(\"right\");\n\n                    String childCondition = generateJavaFieldCondition(field, op, right);\n                    childConditions.add(childCondition);\n                } else {\n                    // \u5904\u7406\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                    String childCondition = generateJavaCondition(child);\n                    childConditions.add(childCondition);\n                }\n            }\n        }\n\n        String condition = String.join(\" \" + conjunction + \" \", childConditions);", "        if (children.size() > 1) {\n            condition = \"(\" + condition + \")\";\n        }\n        return condition;\n    }\n}"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/parse/impl/ParseSqlConfig.java", "chunked_list": ["package com.java3y.hades.parse.impl;\n\n\nimport com.alibaba.fastjson2.JSON;\nimport com.java3y.hades.parse.ParseConfig;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n", "import java.util.Map;\n\n/**\n * @author 3y\n * \u5c06\u6761\u4ef6\u89e3\u6790\u6210sql\u914d\u7f6e\n */\n@Deprecated\npublic class ParseSqlConfig implements ParseConfig {\n\n    @Override\n    public String parse(String config) {\n        return generateSqlCondition(JSON.parseObject(config, Map.class));\n    }\n\n    private static String generateSqlCondition(Map<String, Object> config) {\n        String conjunction = (String) config.get(\"conjunction\");\n        List<Map<String, Object>> children = (List<Map<String, Object>>) config.get(\"children\");\n        List<String> childConditions = new ArrayList<>();\n", "    public String parse(String config) {\n        return generateSqlCondition(JSON.parseObject(config, Map.class));\n    }\n\n    private static String generateSqlCondition(Map<String, Object> config) {\n        String conjunction = (String) config.get(\"conjunction\");\n        List<Map<String, Object>> children = (List<Map<String, Object>>) config.get(\"children\");\n        List<String> childConditions = new ArrayList<>();\n\n        for (Map<String, Object> child : children) {\n            Map<String, Object> left = (Map<String, Object>) child.get(\"left\");", "        for (Map<String, Object> child : children) {\n            Map<String, Object> left = (Map<String, Object>) child.get(\"left\");\n            if (left == null) {\n                // \u5982\u679cleft\u4e3anull\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                String childCondition = generateSqlCondition(child);\n                childConditions.add(childCondition);\n            } else {\n                String type = (String) left.get(\"type\");\n\n                if (type != null && type.equals(\"field\")) {\n                    // \u5904\u7406\u5b57\u6bb5\u7c7b\u578b\u7684\u8282\u70b9\n                    String field = (String) left.get(\"field\");\n                    String op = (String) child.get(\"op\");\n                    Object right = child.get(\"right\");\n\n                    String childCondition = generateSqlFieldCondition(field, op, right);\n                    childConditions.add(childCondition);\n                } else {\n                    // \u5904\u7406\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                    String childCondition = generateSqlCondition(child);\n                    childConditions.add(childCondition);\n                }\n            }\n        }\n\n        String condition = String.join(\" \" + conjunction + \" \", childConditions);", "                if (type != null && type.equals(\"field\")) {\n                    // \u5904\u7406\u5b57\u6bb5\u7c7b\u578b\u7684\u8282\u70b9\n                    String field = (String) left.get(\"field\");\n                    String op = (String) child.get(\"op\");\n                    Object right = child.get(\"right\");\n\n                    String childCondition = generateSqlFieldCondition(field, op, right);\n                    childConditions.add(childCondition);\n                } else {\n                    // \u5904\u7406\u7ec4\u5408\u7c7b\u578b\u7684\u8282\u70b9\n                    String childCondition = generateSqlCondition(child);\n                    childConditions.add(childCondition);\n                }\n            }\n        }\n\n        String condition = String.join(\" \" + conjunction + \" \", childConditions);", "        if (children.size() > 1) {\n            condition = \"(\" + condition + \")\";\n        }\n        return condition;\n    }\n\n    private static String generateSqlFieldCondition(String field, String op, Object right) {\n        if (op.equals(\"is_not_empty\")) {\n            return field + \" is not null\";\n        } else if (op.equals(\"equal\")) {\n            if (right instanceof String) {\n                return field + \" = '\" + right + \"'\";\n            } else {\n                return field + \" = \" + right;\n            }", "        } else if (op.equals(\"equal\")) {\n            if (right instanceof String) {\n                return field + \" = '\" + right + \"'\";\n            } else {\n                return field + \" = \" + right;\n            }\n        } else if (op.equals(\"not_equal\")) {\n            if (right instanceof String) {\n                return field + \" <> '\" + right + \"'\";\n            } else {\n                return field + \" <> \" + right;\n            }", "        } else if (op.equals(\"is_empty\")) {\n            return field + \" is null\";\n        } else if (op.equals(\"like\")) {\n            return field + \" like '\" + right + \"'\";\n        } else if (op.equals(\"not_like\")) {\n            return field + \" not like '\" + right + \"'\";\n        } else if (op.equals(\"starts_with\")) {\n            return field + \" like '\" + right + \"%'\";\n        } else if (op.equals(\"ends_with\")) {\n            return field + \" like '%\" + right + \"'\";\n        } else if (op.equals(\"less\")) {\n            return field + \" < \" + right;", "        } else if (op.equals(\"ends_with\")) {\n            return field + \" like '%\" + right + \"'\";\n        } else if (op.equals(\"less\")) {\n            return field + \" < \" + right;\n        } else if (op.equals(\"less_or_equal\")) {\n            return field + \" <= \" + right;\n        } else if (op.equals(\"greater\")) {\n            return field + \" > \" + right;\n        } else if (op.equals(\"greater_or_equal\")) {\n            return field + \" >= \" + right;\n        } else if (op.equals(\"between\")) {\n            List<Integer> range = (List<Integer>) right;\n            return field + \" between \" + range.get(0) + \" and \" + range.get(1);", "        } else if (op.equals(\"greater_or_equal\")) {\n            return field + \" >= \" + right;\n        } else if (op.equals(\"between\")) {\n            List<Integer> range = (List<Integer>) right;\n            return field + \" between \" + range.get(0) + \" and \" + range.get(1);\n        } else if (op.equals(\"not_between\")) {\n            List<Integer> range = (List<Integer>) right;\n            return field + \" not between \" + range.get(0) + \" and \" + range.get(1);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported operator: \" + op);\n        }\n    }\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/service/HadesConfigService.java", "chunked_list": ["package com.java3y.hades.service;\n\n\nimport com.java3y.hades.domain.HadesParam;\nimport com.java3y.hades.vo.HadesConfigListVo;\n\nimport java.util.List;\n\n/**\n * @author 3y", "/**\n * @author 3y\n * \u914d\u7f6e\u670d\u52a1\n */\npublic interface HadesConfigService {\n\n    /**\n     * \u6dfb\u52a0\u914d\u7f6e\n     *\n     * @param hadesParam\n     */\n    void addConfig(HadesParam hadesParam);\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e\u9879(\u53ef\u8f93\u5165\u5173\u952e\u8bcd\u7b5b\u9009)\n     *\n     * @param keywords \u975e\u5fc5\u586b\n     * @return\n     */\n    List<HadesConfigListVo> getAllConfig(String keywords);\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u9879\n     *\n     * @param name \u811a\u672c\u540d\n     */\n    void deleteConfig(String name);\n\n\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/service/base/HadesApolloConfigServiceImpl.java", "chunked_list": ["package com.java3y.hades.service.impl;\n\n\n\nimport com.java3y.hades.core.service.config.HadesConfigProperties;\nimport com.java3y.hades.domain.HadesParam;\nimport com.java3y.hades.service.HadesConfigService;\nimport com.java3y.hades.vo.HadesConfigListVo;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n\n/**", "\n/**\n * @author 3y\n * TODO Apollo\u914d\u7f6e\u5b9e\u73b0\u7c7b\uff08\u672a\u5b8c\u6210\uff09\n */\n@Service\n@Slf4j\n@ConditionalOnProperty(name = \"apollo.bootstrap.enabled\", havingValue = \"true\")\n@Deprecated\npublic class HadesApolloConfigServiceImpl implements HadesConfigService {\n\n    @Autowired\n    protected HadesConfigProperties configProperties;\n    @Value(\"apollo.portal.address\")\n    private String address;\n\n\n    @Override", "@Deprecated\npublic class HadesApolloConfigServiceImpl implements HadesConfigService {\n\n    @Autowired\n    protected HadesConfigProperties configProperties;\n    @Value(\"apollo.portal.address\")\n    private String address;\n\n\n    @Override\n    public void addConfig(HadesParam hadesParam) {\n\n    }\n\n    @Override\n    public List<HadesConfigListVo> getAllConfig(String keywords) {\n        return null;\n    }\n\n    @Override", "    public void addConfig(HadesParam hadesParam) {\n\n    }\n\n    @Override\n    public List<HadesConfigListVo> getAllConfig(String keywords) {\n        return null;\n    }\n\n    @Override\n    public void deleteConfig(String name) {\n\n    }\n}\n", "    public void deleteConfig(String name) {\n\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/service/base/HadesNacosBaseConfigServiceImpl.java", "chunked_list": ["package com.java3y.hades.service.base;\n\n\nimport com.alibaba.nacos.api.annotation.NacosInjected;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.config.listener.Listener;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.constant.HadesConstant;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;", "import com.java3y.hades.core.constant.HadesConstant;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport com.java3y.hades.core.service.config.HadesConfigProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.Executor;\n", "import java.util.concurrent.Executor;\n\n\n/**\n * @author 3y\n * Nacos\u914d\u7f6e\u5b9e\u73b0\u7c7b\n */\n@Service\n@Slf4j\n@ConditionalOnProperty(name = \"nacos.config.enabled\", havingValue = \"true\")\npublic class HadesNacosBaseConfigServiceImpl extends BaseHadesBaseConfig implements Listener {\n    @Autowired\n    protected HadesConfigProperties configProperties;\n\n    @NacosInjected\n    private ConfigService configService;\n\n    @Override", "@Slf4j\n@ConditionalOnProperty(name = \"nacos.config.enabled\", havingValue = \"true\")\npublic class HadesNacosBaseConfigServiceImpl extends BaseHadesBaseConfig implements Listener {\n    @Autowired\n    protected HadesConfigProperties configProperties;\n\n    @NacosInjected\n    private ConfigService configService;\n\n    @Override\n    public void addOrUpdateProperty(String key, String value) {", "    public void addOrUpdateProperty(String key, String value) {\n        try {\n            configService.publishConfig(key, HadesConstant.NACOS_DEFAULT_GROUP, value);\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#addOrUpdateProperty fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public void removeProperty(String key) {\n        try {\n            configService.removeConfig(key, HadesConstant.NACOS_DEFAULT_GROUP);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#removeProperty fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override", "    public void removeProperty(String key) {\n        try {\n            configService.removeConfig(key, HadesConstant.NACOS_DEFAULT_GROUP);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#removeProperty fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public String getConfigValueByName(String configName) {\n        try {\n            return configService.getConfig(configName, HadesConstant.NACOS_DEFAULT_GROUP, 3000L);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n    @Override", "    public String getConfigValueByName(String configName) {\n        try {\n            return configService.getConfig(configName, HadesConstant.NACOS_DEFAULT_GROUP, 3000L);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n    @Override\n    public void receiveConfigInfo(String mainConfig) {\n    }\n\n    @Override", "    public void receiveConfigInfo(String mainConfig) {\n    }\n\n    @Override\n    public void addListener() {\n    }\n\n    @Override\n    public Executor getExecutor() {\n        return null;\n    }\n}\n", "    public Executor getExecutor() {\n        return null;\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/service/impl/HadesConfigServiceImpl.java", "chunked_list": ["package com.java3y.hades.service.impl;\n\n\nimport cn.hutool.core.io.file.FileReader;\nimport com.alibaba.fastjson2.JSON;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.domain.MainConfig;\nimport com.java3y.hades.core.service.bootstrap.HadesBaseConfig;\nimport com.java3y.hades.core.service.config.HadesConfigProperties;\nimport com.java3y.hades.domain.HadesParam;", "import com.java3y.hades.core.service.config.HadesConfigProperties;\nimport com.java3y.hades.domain.HadesParam;\nimport com.java3y.hades.enums.RuleType;\nimport com.java3y.hades.parse.ParseConfig;\nimport com.java3y.hades.service.HadesConfigService;\nimport com.java3y.hades.vo.HadesConfigListVo;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;", "import org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author 3y\n * \u914d\u7f6e\u5b9e\u73b0\u7c7b\n */", " * \u914d\u7f6e\u5b9e\u73b0\u7c7b\n */\n@Service\n@Slf4j\npublic class HadesConfigServiceImpl implements HadesConfigService {\n\n    @Autowired\n    private HadesBaseConfig baseConfigService;\n\n    @Autowired\n    private HadesConfigProperties configProperties;\n\n    @Autowired\n    private ParseConfig parseConfig;\n\n\n    @Override", "    public void addConfig(HadesParam hadesParam) {\n        try {\n            // \u4e3b\u914d\u7f6e\n            MainConfig mainConfig = JSON.parseObject(baseConfigService.getConfigValueByName(configProperties.getConfigName()), MainConfig.class);\n            mainConfig.getInstanceNames().add(hadesParam.getName());\n            mainConfig.setUpdateTime(System.currentTimeMillis());\n            baseConfigService.addOrUpdateProperty(configProperties.getConfigName(), JSON.toJSONString(mainConfig));\n\n            // \u811a\u672c\u914d\u7f6e\n            String resultCode;\n            if (RuleType.CODE.getCode().equals(hadesParam.getRuleType())) {\n                resultCode = hadesParam.getRuleLogicCode();\n            } else {\n                String template = new FileReader(\"generateGroovyCodeTemplate\").readString();\n                resultCode = template.replace(\"_PACKAGE_NAME_\", hadesParam.getName().substring(0, hadesParam.getName().lastIndexOf(\".\")))\n                        .replace(\"_SCRIPT_NAME_\", hadesParam.getName())\n                        .replace(\"_CLASS_NAME_\", hadesParam.getName().substring(hadesParam.getName().lastIndexOf(\".\") + 1))\n                        .replace(\"_CONDITION_\", parseConfig.parse(JSON.toJSONString(hadesParam.getRuleLogicGraph())));\n                baseConfigService.addOrUpdateProperty(hadesParam.getName(), resultCode);\n            }\n            baseConfigService.addOrUpdateProperty(hadesParam.getName(), resultCode);\n\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#addConfig fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public List<HadesConfigListVo> getAllConfig(String keywords) {\n        List<HadesConfigListVo> result = new ArrayList<>();", "            if (RuleType.CODE.getCode().equals(hadesParam.getRuleType())) {\n                resultCode = hadesParam.getRuleLogicCode();\n            } else {\n                String template = new FileReader(\"generateGroovyCodeTemplate\").readString();\n                resultCode = template.replace(\"_PACKAGE_NAME_\", hadesParam.getName().substring(0, hadesParam.getName().lastIndexOf(\".\")))\n                        .replace(\"_SCRIPT_NAME_\", hadesParam.getName())\n                        .replace(\"_CLASS_NAME_\", hadesParam.getName().substring(hadesParam.getName().lastIndexOf(\".\") + 1))\n                        .replace(\"_CONDITION_\", parseConfig.parse(JSON.toJSONString(hadesParam.getRuleLogicGraph())));\n                baseConfigService.addOrUpdateProperty(hadesParam.getName(), resultCode);\n            }\n            baseConfigService.addOrUpdateProperty(hadesParam.getName(), resultCode);\n\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#addConfig fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public List<HadesConfigListVo> getAllConfig(String keywords) {\n        List<HadesConfigListVo> result = new ArrayList<>();", "        try {\n            MainConfig mainConfig = JSON.parseObject(baseConfigService.getConfigValueByName(configProperties.getConfigName()), MainConfig.class);\n            for (String instanceName : mainConfig.getInstanceNames()) {\n                if (StringUtils.hasText(keywords) && !instanceName.contains(keywords)) {\n                    continue;\n                }\n                HadesConfigListVo hadesConfigListVo = HadesConfigListVo.builder().name(instanceName).ruleLogicCode(baseConfigService.getConfigValueByName(instanceName)).build();\n                result.add(hadesConfigListVo);\n            }\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#getAllConfig fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n\n        return result;\n    }\n\n    @Override", "    public void deleteConfig(String name) {\n        try {\n            MainConfig mainConfig = JSON.parseObject(baseConfigService.getConfigValueByName(configProperties.getConfigName()), MainConfig.class);\n            mainConfig.getInstanceNames().remove(name);\n            baseConfigService.addOrUpdateProperty(configProperties.getConfigName(), JSON.toJSONString(mainConfig));\n            baseConfigService.removeProperty(name);\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#deleteConfig fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n}\n"]}
{"filename": "hades-web/src/main/java/com/java3y/hades/annotation/HadesAspect.java", "chunked_list": ["package com.java3y.hades.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * @author kl\n * @version 1.0.0\n * @description \u63a5\u53e3\u5207\u9762\u6ce8\u89e3\n * @date 2023/2/23 9:01\n */", " * @date 2023/2/23 9:01\n */\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface HadesAspect {\n\n}\n", ""]}
{"filename": "hades-web/src/main/java/com/java3y/hades/annotation/HadesResult.java", "chunked_list": ["package com.java3y.hades.annotation;\n\nimport java.lang.annotation.*;\n\n/**\n * @author kl\n * @version 1.0.0\n * @description \u7edf\u4e00\u8fd4\u56de\u6ce8\u89e3\n * @date 2023/2/9 19:00\n */", " * @date 2023/2/9 19:00\n */\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface HadesResult {\n}\n"]}
{"filename": "hades-starter/hades-apollo-starter/src/main/java/com/java3y/hades/starter/autoconfigure/HadesAutoConfiguration.java", "chunked_list": ["package com.java3y.hades.starter.autoconfigure;\n\n\nimport com.java3y.hades.core.constant.HadesConstant;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport static com.ctrip.framework.apollo.spring.config.PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED;", "\nimport static com.ctrip.framework.apollo.spring.config.PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED;\n\n\n/**\n * hades apollo \u81ea\u52a8\u914d\u7f6e\u7c7b\n *\n * @author 3y\n */\n@Configuration", " */\n@Configuration\n@ConditionalOnClass(value = com.ctrip.framework.apollo.ConfigService.class)\n@ConditionalOnProperty(value = {HadesConstant.HADES_ENABLED_PROPERTIES, APOLLO_BOOTSTRAP_ENABLED}, havingValue = \"true\")\n@ComponentScan(HadesConstant.SCAN_PATH)\npublic class HadesAutoConfiguration {\n\n}\n"]}
{"filename": "hades-starter/hades-apollo-starter/src/main/java/com/java3y/hades/starter/config/ApolloStarter.java", "chunked_list": ["package com.java3y.hades.starter.config;\n\nimport com.ctrip.framework.apollo.ConfigFileChangeListener;\nimport com.ctrip.framework.apollo.ConfigService;\nimport com.ctrip.framework.apollo.core.enums.ConfigFileFormat;\nimport com.ctrip.framework.apollo.model.ConfigFileChangeEvent;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * @author 3y\n * apollo \u542f\u52a8\u5668\n */\n@Service\n@Slf4j\npublic class ApolloStarter extends BaseHadesBaseConfig implements ConfigFileChangeListener {\n\n    @Override", "@Service\n@Slf4j\npublic class ApolloStarter extends BaseHadesBaseConfig implements ConfigFileChangeListener {\n\n    @Override\n    public void addListener() {\n        try {\n            ConfigService.getConfigFile(configProperties.getConfigName(), ConfigFileFormat.TXT).addChangeListener(this);\n            log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e[{}]\u76d1\u542c\u5668\u5df2\u542f\u52a8\", configProperties.getConfigName());\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#refresh key:[{}] fail:{}\", configProperties.getConfigName(), Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override", "    public String getConfigValueByName(String configName) {\n        try {\n            return ConfigService.getConfigFile(configName, ConfigFileFormat.TXT).getContent();\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n\n    @Override", "    public void onChange(ConfigFileChangeEvent changeEvent) {\n        log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u76d1\u542c\u5230[{}]\u6570\u636e\u66f4\u65b0:{}\", configProperties.getConfigName(), changeEvent.getNewValue());\n        bootstrap(changeEvent.getNewValue());\n    }\n\n    @Override\n    public void addOrUpdateProperty(String key, String value) {\n\n    }\n\n    @Override", "    public void removeProperty(String key) {\n\n    }\n\n}\n"]}
{"filename": "hades-starter/hades-nacos-starter/src/main/java/com/java3y/hades/starter/autoconfigure/HadesAutoConfiguration.java", "chunked_list": ["package com.java3y.hades.starter.autoconfigure;\n\n\nimport com.java3y.hades.core.constant.HadesConstant;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n", "\n\n/**\n * hades Nacos \u81ea\u52a8\u914d\u7f6e\u7c7b\n *\n * @author 3y\n */\n@Configuration\n@ConditionalOnClass(value = com.alibaba.nacos.api.config.ConfigService.class)\n@ConditionalOnProperty(value = HadesConstant.HADES_ENABLED_PROPERTIES, havingValue = \"true\")", "@ConditionalOnClass(value = com.alibaba.nacos.api.config.ConfigService.class)\n@ConditionalOnProperty(value = HadesConstant.HADES_ENABLED_PROPERTIES, havingValue = \"true\")\n@ComponentScan(HadesConstant.SCAN_PATH)\npublic class HadesAutoConfiguration {\n\n\n}\n"]}
{"filename": "hades-starter/hades-nacos-starter/src/main/java/com/java3y/hades/starter/config/NacosStarter.java", "chunked_list": ["package com.java3y.hades.starter.config;\n\nimport com.alibaba.nacos.api.annotation.NacosInjected;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.config.listener.Listener;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.google.common.base.Throwables;\nimport com.java3y.hades.core.constant.HadesConstant;\nimport com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;", "import com.java3y.hades.core.service.bootstrap.BaseHadesBaseConfig;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.Executor;\n\n\n/**\n * @author 3y\n * nacos \u542f\u52a8\u5668", " * @author 3y\n * nacos \u542f\u52a8\u5668\n */\n@Service\n@Slf4j\npublic class NacosStarter extends BaseHadesBaseConfig implements Listener {\n\n    @NacosInjected\n    private ConfigService configService;\n\n    @Override", "    public void addListener() {\n        try {\n            configService.addListener(configProperties.getConfigName(), HadesConstant.NACOS_DEFAULT_GROUP, this);\n            log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e[{}]\u76d1\u542c\u5668\u5df2\u542f\u52a8\", configProperties.getConfigName());\n        } catch (Exception e) {\n            log.error(\"HadesConfigService#refresh key:[{}] fail:{}\", configProperties.getConfigName(), Throwables.getStackTraceAsString(e));\n        }\n    }\n\n    @Override\n    public String getConfigValueByName(String configName) {", "    public String getConfigValueByName(String configName) {\n        try {\n            return configService.getConfig(configName, HadesConstant.NACOS_DEFAULT_GROUP, 3000L);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#getConfigValueByName key:[{}],fail:{}\", configName, Throwables.getStackTraceAsString(e));\n        }\n        return null;\n    }\n\n\n\n    @Override", "    public void receiveConfigInfo(String mainConfig) {\n        log.info(\"\u5206\u5e03\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u76d1\u542c\u5230[{}]\u6570\u636e\u66f4\u65b0:{}\", configProperties.getConfigName(), mainConfig);\n        bootstrap(mainConfig);\n    }\n\n    @Override\n    public Executor getExecutor() {\n        return null;\n    }\n\n    @Override", "    public void addOrUpdateProperty(String key, String value) {\n\n    }\n\n    @Override\n    public void removeProperty(String key)  {\n        try {\n            configService.removeConfig(key, HadesConstant.NACOS_DEFAULT_GROUP);\n        } catch (NacosException e) {\n            log.error(\"HadesConfigService#removeProperty fail:{}\", Throwables.getStackTraceAsString(e));\n        }\n    }\n\n}\n"]}
