{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/model/BaseFileTest.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.model;\n", "package com.googlecodesamples.cloud.jss.lds.model;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport static com.google.common.truth.Truth.assertThat;\n\npublic class BaseFileTest {\n\n  @Test", "import static com.google.common.truth.Truth.assertThat;\n\npublic class BaseFileTest {\n\n  @Test\n  public void testGetThumbnailPath() {\n    BaseFile file = getTestFiles(1, true).get(0);\n    String expected = \"test-path-1_small\";\n    assertThat(file.genThumbnailPath()).isEqualTo(expected);\n  }\n\n  @Test", "  public void testIsFile() {\n    BaseFile file = getTestFiles(1, false).get(0);\n    assertThat(file.checkImageFileType()).isFalse();\n  }\n\n  @Test\n  public void testIsImage() {\n    BaseFile file = getTestFiles(1, true).get(0);\n    assertThat(file.checkImageFileType()).isTrue();\n  }\n", "  public static List<BaseFile> getTestFiles(int serialNumber, boolean isImage) {\n    List<BaseFile> testFiles = new ArrayList<>();\n    for (int i = 0; i < serialNumber; i++) {\n      BaseFile file = new BaseFile();\n      file.setId(\"test-\" + serialNumber);\n      file.setPath(\"test-path-\" + serialNumber);\n      if (isImage) {\n        file.setName(\"test-filename-\" + serialNumber + \".png\");\n      } else {\n        file.setName(\"test-filename-\" + serialNumber);\n      }\n      file.setUrl(\"resources/test-url-\" + serialNumber);\n      file.setTags(List.of(\"test-tag\"));\n      file.setCreateTime(new Date());\n      file.setUpdateTime(file.getCreateTime());\n      testFiles.add(file);\n    }\n    return testFiles;\n  }\n}\n"]}
{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/util/LdsUtilTest.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.util;\n", "package com.googlecodesamples.cloud.jss.lds.util;\n\nimport org.junit.Test;\n\nimport static com.google.common.truth.Truth.assertThat;\n\n/**\n * Unit test for LdsUtil class\n */\npublic class LdsUtilTest {\n\n  @Test", " */\npublic class LdsUtilTest {\n\n  @Test\n  public void testGetResourceBasePath() {\n    String rootPath = LdsUtil.getResourceBasePath(\"/test/1/2/resource\");\n    assertThat(rootPath).isNotEmpty();\n    assertThat(rootPath).isEqualTo(\"/\");\n\n    rootPath = LdsUtil.getResourceBasePath(\"test/1/2/resource\");\n    assertThat(rootPath).isEmpty();\n\n    rootPath = LdsUtil.getResourceBasePath(\"test\");\n    assertThat(rootPath).isEmpty();\n  }\n\n  @Test", "  public void testGetFileBucketPath() {\n    String basePath = \"192.168.0.1/resource\";\n    String fileId = \"test\";\n    String fileBucketPath = LdsUtil.getFileBucketPath(basePath, fileId);\n    assertThat(fileBucketPath).isEqualTo(\"192.168.0.1/resource/test\");\n  }\n\n  @Test\n  public void testGetPathId() {\n    String id = LdsUtil.getPathId(\"192.168.0.1/resource/test\");\n    assertThat(id).isEqualTo(\"test\");\n\n    id = LdsUtil.getPathId(\"192.168.0.1/resource/1/2/3/test\");\n    assertThat(id).isEqualTo(\"test\");\n\n    id = LdsUtil.getPathId(\"/resource\");\n    assertThat(id).isEqualTo(\"resource\");\n\n    id = LdsUtil.getPathId(\"/resource/test\");\n    assertThat(id).isEqualTo(\"test\");\n  }\n\n  @Test", "  public void testGetPathId() {\n    String id = LdsUtil.getPathId(\"192.168.0.1/resource/test\");\n    assertThat(id).isEqualTo(\"test\");\n\n    id = LdsUtil.getPathId(\"192.168.0.1/resource/1/2/3/test\");\n    assertThat(id).isEqualTo(\"test\");\n\n    id = LdsUtil.getPathId(\"/resource\");\n    assertThat(id).isEqualTo(\"resource\");\n\n    id = LdsUtil.getPathId(\"/resource/test\");\n    assertThat(id).isEqualTo(\"test\");\n  }\n\n  @Test", "  public void testGenerateUuid() {\n    String uuid = LdsUtil.generateUuid();\n    assertThat(uuid.length()).isEqualTo(36);\n  }\n}\n"]}
{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/controller/FileControllerTest.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.controller;\n", "package com.googlecodesamples.cloud.jss.lds.controller;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFileTest;\nimport com.googlecodesamples.cloud.jss.lds.service.FileService;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mockito;", "import org.junit.runner.RunWith;\nimport org.mockito.Mockito;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringRunner;", "import org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport java.util.List;\n\nimport static com.google.common.truth.Truth.assertThat;", "\nimport static com.google.common.truth.Truth.assertThat;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class FileControllerTest {\n  private static final Logger log = LoggerFactory.getLogger(FileControllerTest.class);\n\n  @Autowired\n  MockMvc mockMvc;\n\n  @MockBean\n  FileService fileService;\n\n  @Test", "  public void testHealthCheckReturnsNoContent() throws Exception {\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/api/healthchecker\"))\n            .andExpect(MockMvcResultMatchers.status().isNoContent())\n            .andExpect(MockMvcResultMatchers.content().string(\"\"));\n  }\n\n  @Test\n  public void testGetFilesResponse() throws Exception {\n    List<String> tags = List.of(\"test-tag\");\n    String orderNo = \"\";\n    int size = 2;\n\n    // generate mock object\n    List<BaseFile> expectedResp = BaseFileTest.getTestFiles(size, true);\n\n    // set up mock service response\n    Mockito.when(fileService.getFilesByTag(tags, orderNo, size)).thenReturn(expectedResp);\n\n    // set up simulated HTTP request to the service\n    MockHttpServletRequestBuilder mockHttpReq = MockMvcRequestBuilders.get(\"/api/files\")\n            .accept(MediaType.APPLICATION_JSON)\n            .contentType(MediaType.APPLICATION_JSON)\n            .queryParam(\"tags\", \"test-tag\")\n            .queryParam(\"orderNo\", orderNo)\n            .queryParam(\"size\", String.valueOf(size));\n\n    // generate mock response from the simulated request\n    String mockResp = mockMvc.perform(mockHttpReq)\n            .andExpect(MockMvcResultMatchers.status().isOk())\n            .andReturn().getResponse().getContentAsString();\n    log.info(\"mockResp: \" + mockResp);\n\n    // convert the mock response to JSON object\n    JsonObject convertedObj = new Gson().fromJson(mockResp, JsonObject.class);\n    log.info(\"convertedObj: \" + convertedObj);\n\n    assertThat(convertedObj.isJsonObject()).isTrue();\n    assertThat(mockResp).isEqualTo(convertedObj.toString());\n  }\n\n  @Test", "  public void testDeleteFileReturnsNotFound() throws Exception {\n    mockMvc.perform(MockMvcRequestBuilders.delete(\"/files/unknown-id\"))\n            .andExpect(MockMvcResultMatchers.status().isNotFound())\n            .andExpect(MockMvcResultMatchers.content().string(\"\"));\n  }\n}\n"]}
{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/service/StorageServiceIT.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\nimport com.google.cloud.storage.BucketInfo;\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.testing.RemoteStorageHelper;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;", "import org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class StorageServiceIT {\n\n  private static final String BUCKET_NAME = RemoteStorageHelper.generateBucketName();\n  private static final String FILE_ID = \"test-id\";\n  private static final String CONTENT_TYPE = \"application/octet-stream\";\n  private static final String STRING_CONTENT = \"test\";\n  private static final byte[] CONTENT = STRING_CONTENT.getBytes(UTF_8);\n  private static Storage storage;\n\n  @Autowired\n  StorageService storageService;\n\n  @BeforeClass", "@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class StorageServiceIT {\n\n  private static final String BUCKET_NAME = RemoteStorageHelper.generateBucketName();\n  private static final String FILE_ID = \"test-id\";\n  private static final String CONTENT_TYPE = \"application/octet-stream\";\n  private static final String STRING_CONTENT = \"test\";\n  private static final byte[] CONTENT = STRING_CONTENT.getBytes(UTF_8);\n  private static Storage storage;\n\n  @Autowired\n  StorageService storageService;\n\n  @BeforeClass", "  public static void beforeClass() {\n    RemoteStorageHelper helper = RemoteStorageHelper.create();\n    storage = helper.getOptions().getService();\n    storage.create(BucketInfo.of(BUCKET_NAME));\n  }\n\n  @AfterClass\n  public static void afterClass() {\n    if (storage != null) {\n      RemoteStorageHelper.forceDelete(storage, BUCKET_NAME);\n    }\n  }\n\n  @Test", "    if (storage != null) {\n      RemoteStorageHelper.forceDelete(storage, BUCKET_NAME);\n    }\n  }\n\n  @Test\n  public void testSaveBlob() {\n    try {\n      storageService.save(BUCKET_NAME, FILE_ID, CONTENT_TYPE, CONTENT);\n      assertThat(storage.get(BUCKET_NAME, FILE_ID)).isNotNull();\n    } finally {\n      storage.delete(BUCKET_NAME, FILE_ID);\n    }\n  }\n\n  @Test", "  public void testDeleteBlob() {\n    storageService.save(BUCKET_NAME, FILE_ID, CONTENT_TYPE, CONTENT);\n    storageService.delete(BUCKET_NAME, FILE_ID);\n    assertThat(storage.get(BUCKET_NAME, FILE_ID)).isNull();\n  }\n\n  @Test\n  public void testBatchDeleteBlob() {\n    storageService.save(BUCKET_NAME, FILE_ID, CONTENT_TYPE, CONTENT);\n    storageService.batchDelete(BUCKET_NAME);\n    assertThat(storage.get(BUCKET_NAME, FILE_ID)).isNull();\n  }\n}\n"]}
{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/service/FileServiceTest.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFileTest;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.mock.web.MockMultipartFile;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\n\n@RunWith(SpringRunner.class)", "\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class FileServiceTest {\n\n  private static final Integer LIST_SIZE = 2;\n\n  private static final String ORDER_NUM = \"\";\n\n  private static final String FILE_ID = \"test-id\";\n\n  private static final List<String> TAGS = List.of(\"test-tag\");\n\n  private static final boolean IS_IMAGE = true;\n\n  private List<MultipartFile> mockMultipartFiles;\n\n  private List<BaseFile> mockFiles;\n\n  @Autowired\n  FileService fileService;\n\n  @MockBean\n  FirestoreService firestoreService;\n\n  @MockBean\n  StorageService storageService;\n\n  @Before", "  public void setUpMockService() throws Exception {\n    Resource resource = new ClassPathResource(\"gcp.jpeg\");\n    mockMultipartFiles = new ArrayList<>();\n    mockFiles = new ArrayList<>();\n\n    for (int i = 0; i < LIST_SIZE; i++) {\n      mockMultipartFiles.add(new MockMultipartFile(\"test-image\", resource.getInputStream()));\n    }\n    mockFiles = BaseFileTest.getTestFiles(LIST_SIZE, IS_IMAGE);\n\n    // set up mock service responses\n    Mockito.when(firestoreService.getFileById(any())).thenReturn(mockFiles.get(0));\n    Mockito.when(firestoreService.getFilesByTag(TAGS, ORDER_NUM, LIST_SIZE)).thenReturn(mockFiles);\n    Mockito.doNothing().when(firestoreService).save(any());\n    Mockito.doNothing().when(firestoreService).delete(any());\n    Mockito.doNothing().when(firestoreService).deleteCollection();\n\n    Mockito.doNothing().when(storageService).save(any(), any(), any(), any());\n    Mockito.doNothing().when(storageService).delete(any(), any());\n    Mockito.doNothing().when(storageService).batchDelete(any());\n  }\n\n  @Test", "  public void testUploadFiles() throws InterruptedException, ExecutionException, IOException {\n    List<BaseFile> files = fileService.uploadFiles(mockMultipartFiles, TAGS);\n    assertThat(files).isNotEmpty();\n    assertThat(files.size()).isEqualTo(LIST_SIZE);\n    assertThat(files.get(0).checkImageFileType()).isTrue();\n    assertThat(files.get(0).getTags()).isEqualTo(TAGS);\n  }\n\n  @Test\n  public void testUpdateFile() throws InterruptedException, ExecutionException, IOException {\n    BaseFile file = fileService.updateFile(mockMultipartFiles.get(0), TAGS, mockFiles.get(0));\n    assertThat(file).isNotNull();\n    assertThat(file.checkImageFileType()).isTrue();\n    assertThat(file.getTags()).isEqualTo(TAGS);\n  }\n\n  @Test", "  public void testUpdateFile() throws InterruptedException, ExecutionException, IOException {\n    BaseFile file = fileService.updateFile(mockMultipartFiles.get(0), TAGS, mockFiles.get(0));\n    assertThat(file).isNotNull();\n    assertThat(file.checkImageFileType()).isTrue();\n    assertThat(file.getTags()).isEqualTo(TAGS);\n  }\n\n  @Test\n  public void testGetFilesByTag() throws InterruptedException, ExecutionException {\n    List<BaseFile> files = fileService.getFilesByTag(TAGS, ORDER_NUM, LIST_SIZE);\n    assertThat(files).isNotEmpty();\n    assertThat(files.size()).isEqualTo(LIST_SIZE);\n    assertThat(files.get(0).checkImageFileType()).isTrue();\n    assertThat(files.get(0).getTags()).isEqualTo(TAGS);\n  }\n\n  @Test", "  public void testGetFilesByTag() throws InterruptedException, ExecutionException {\n    List<BaseFile> files = fileService.getFilesByTag(TAGS, ORDER_NUM, LIST_SIZE);\n    assertThat(files).isNotEmpty();\n    assertThat(files.size()).isEqualTo(LIST_SIZE);\n    assertThat(files.get(0).checkImageFileType()).isTrue();\n    assertThat(files.get(0).getTags()).isEqualTo(TAGS);\n  }\n\n  @Test\n  public void testGetFilesByUnknownTag() throws InterruptedException, ExecutionException {\n    List<String> unknownTags = List.of(\"test\", \"tag\");\n    List<BaseFile> files = fileService.getFilesByTag(unknownTags, ORDER_NUM, LIST_SIZE);\n    assertThat(files).isEmpty();\n  }\n\n  @Test", "  public void testGetFilesByUnknownTag() throws InterruptedException, ExecutionException {\n    List<String> unknownTags = List.of(\"test\", \"tag\");\n    List<BaseFile> files = fileService.getFilesByTag(unknownTags, ORDER_NUM, LIST_SIZE);\n    assertThat(files).isEmpty();\n  }\n\n  @Test\n  public void testGetFileById() throws InterruptedException, ExecutionException {\n    BaseFile file = fileService.getFileById(FILE_ID);\n    assertThat(file).isNotNull();\n    assertThat(file.checkImageFileType()).isTrue();\n    assertThat(file.getTags()).isEqualTo(TAGS);\n  }\n}\n"]}
{"filename": "api/src/test/java/com/googlecodesamples/cloud/jss/lds/service/FirestoreServiceIT.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.FileMeta;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;", "import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class FirestoreServiceIT {\n  private static final String FILE_META_ID = \"test-id\";\n  private static final String FILE_META_PATH = \"resource/test-id\";\n  private static final String FILE_META_NAME = \"test\";\n  private static final List<String> FILE_META_TAGS = List.of(\"test-tag\");\n  private static final long FILE_META_SIZE = 100;\n  private static final int LIST_SIZE = 10;\n\n  @Autowired\n  FirestoreService firestoreService;\n\n  @Test", "public class FirestoreServiceIT {\n  private static final String FILE_META_ID = \"test-id\";\n  private static final String FILE_META_PATH = \"resource/test-id\";\n  private static final String FILE_META_NAME = \"test\";\n  private static final List<String> FILE_META_TAGS = List.of(\"test-tag\");\n  private static final long FILE_META_SIZE = 100;\n  private static final int LIST_SIZE = 10;\n\n  @Autowired\n  FirestoreService firestoreService;\n\n  @Test", "  public void testSaveFileMeta() throws InterruptedException, ExecutionException {\n    try {\n      firestoreService.save(createFileMeta());\n      BaseFile testFile = firestoreService.getFileById(FILE_META_ID);\n      assertThat(testFile).isNotNull();\n    } finally {\n      firestoreService.delete(FILE_META_ID);\n    }\n  }\n\n  @Test", "  public void testGetFileById() throws InterruptedException, ExecutionException {\n    try {\n      firestoreService.save(createFileMeta());\n      BaseFile testFile = firestoreService.getFileById(FILE_META_ID);\n      assertThat(testFile.getId()).isEqualTo(FILE_META_ID);\n    } finally {\n      firestoreService.delete(FILE_META_ID);\n    }\n  }\n\n  @Test", "  public void testDeleteDocument() throws InterruptedException, ExecutionException {\n    firestoreService.save(createFileMeta());\n    firestoreService.delete(FILE_META_ID);\n    BaseFile testFile = firestoreService.getFileById(FILE_META_ID);\n    assertThat(testFile).isNull();\n  }\n\n  @Test\n  public void testDeleteCollection() throws InterruptedException, ExecutionException {\n    firestoreService.save(createFileMeta());\n    firestoreService.deleteCollection();\n    BaseFile testFile = firestoreService.getFileById(FILE_META_ID);\n    assertThat(testFile).isNull();\n  }\n\n  private FileMeta createFileMeta() {\n    return new FileMeta(\n        FILE_META_ID, FILE_META_PATH, FILE_META_NAME, FILE_META_TAGS, FILE_META_SIZE);\n  }\n}\n", "  public void testDeleteCollection() throws InterruptedException, ExecutionException {\n    firestoreService.save(createFileMeta());\n    firestoreService.deleteCollection();\n    BaseFile testFile = firestoreService.getFileById(FILE_META_ID);\n    assertThat(testFile).isNull();\n  }\n\n  private FileMeta createFileMeta() {\n    return new FileMeta(\n        FILE_META_ID, FILE_META_PATH, FILE_META_NAME, FILE_META_TAGS, FILE_META_SIZE);\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/LdsApplication.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds;\n", "package com.googlecodesamples.cloud.jss.lds;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * Entrypoint for the large data sharing application on Cloud Run.\n */\n@SpringBootApplication\npublic class LdsApplication {\n", "@SpringBootApplication\npublic class LdsApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(LdsApplication.class, args);\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/config/Config.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.googlecodesamples.cloud.jss.lds.config;\n\nimport com.google.cloud.opentelemetry.trace.TraceExporter;", "\nimport com.google.cloud.opentelemetry.trace.TraceExporter;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\nimport io.opentelemetry.sdk.trace.SdkTracerProvider;\nimport io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.io.IOException;\n", "import java.io.IOException;\n\n@Configuration\npublic class Config {\n\t/**\n\t * Create a distributed tracing system based on the OpenTelemetry\n\t * and uses the Google Cloud Trace Exporter\n\t */\n\t@Bean\n\tpublic OpenTelemetrySdk createOpenTelemetrySdk() throws IOException {\n\t\tTraceExporter googleTraceExporter = TraceExporter.createWithDefaultConfiguration();\n\t\tSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n\t\t\t\t.addSpanProcessor(BatchSpanProcessor.builder(googleTraceExporter).build())\n\t\t\t\t.build();\n\t\treturn OpenTelemetrySdk.builder()\n\t\t\t\t.setTracerProvider(tracerProvider)\n\t\t\t\t.build();\n\t}\n}\n", "\tpublic OpenTelemetrySdk createOpenTelemetrySdk() throws IOException {\n\t\tTraceExporter googleTraceExporter = TraceExporter.createWithDefaultConfiguration();\n\t\tSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n\t\t\t\t.addSpanProcessor(BatchSpanProcessor.builder(googleTraceExporter).build())\n\t\t\t\t.build();\n\t\treturn OpenTelemetrySdk.builder()\n\t\t\t\t.setTracerProvider(tracerProvider)\n\t\t\t\t.build();\n\t}\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/model/BaseFile.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.model;\n", "package com.googlecodesamples.cloud.jss.lds.model;\n\nimport com.google.cloud.firestore.QueryDocumentSnapshot;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport org.springframework.beans.BeanUtils;\n\n/**", "\n/**\n * The BaseFile class represents a file being uploaded by the users\n */\npublic class BaseFile extends FileMeta {\n  private static final List<String> IMG_EXTENSIONS = List.of(\"png\", \"jpeg\", \"jpg\", \"gif\");\n  private static final String THUMBNAIL_EXTENSION = \"_small\";\n  private String url;\n  private String thumbUrl;\n  private Date createTime;\n  private Date updateTime;\n\n  public BaseFile() {\n  }\n\n  public BaseFile(QueryDocumentSnapshot document, String resourceBasePath) {\n    BaseFile file = document.toObject(BaseFile.class);\n    BeanUtils.copyProperties(file, this);\n    this.setUrl(resourceBasePath + file.getPath());\n    this.setThumbUrl(resourceBasePath + file.genThumbnailPath());\n    this.setCreateTime(document.getCreateTime().toDate());\n    this.setUpdateTime(document.getUpdateTime().toDate());\n  }\n", "  public String getUrl() {\n    return url;\n  }\n\n  public void setUrl(String url) {\n    this.url = url;\n  }\n\n  public String getThumbUrl() {\n    return thumbUrl;\n  }\n", "  public String getThumbUrl() {\n    return thumbUrl;\n  }\n\n  public void setThumbUrl(String thumbUrl) {\n    this.thumbUrl = thumbUrl;\n  }\n\n  public Date getCreateTime() {\n    return createTime;\n  }\n", "  public Date getCreateTime() {\n    return createTime;\n  }\n\n  public void setCreateTime(Date createTime) {\n    this.createTime = createTime;\n  }\n\n  public Date getUpdateTime() {\n    return updateTime;\n  }\n", "  public Date getUpdateTime() {\n    return updateTime;\n  }\n\n  public void setUpdateTime(Date updateTime) {\n    this.updateTime = updateTime;\n  }\n\n  public String genThumbnailPath() {\n    return getPath() + THUMBNAIL_EXTENSION;\n  }\n", "  public String genThumbnailPath() {\n    return getPath() + THUMBNAIL_EXTENSION;\n  }\n\n  public boolean checkImageFileType() {\n    return IMG_EXTENSIONS.stream().anyMatch(e -> getName().toLowerCase().endsWith(e));\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/model/FileResponse.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.model;\n", "package com.googlecodesamples.cloud.jss.lds.model;\n\n/**\n * The FileResponse is a wrapper class for the API endpoint that returns a single file as response\n */\npublic class FileResponse {\n  private BaseFile file;\n\n  public FileResponse(BaseFile file) {\n    this.file = file;\n  }\n", "  public BaseFile getFile() {\n    return file;\n  }\n\n  public void setFile(BaseFile file) {\n    this.file = file;\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/model/FileMeta.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.model;\n", "package com.googlecodesamples.cloud.jss.lds.model;\n\nimport com.googlecodesamples.cloud.jss.lds.util.LdsUtil;\n\nimport java.util.List;\n\n/**\n * The FileMeta class represents the file metadata that corresponds to Firestore database schema\n */\npublic class FileMeta {\n  private String id;\n  private String path;\n  private String name;\n  private List<String> tags;\n  private String orderNo;\n  private long size;\n\n  public FileMeta() {\n  }\n\n  public FileMeta(String id, String path, String name, List<String> tags, long size) {\n    this.id = id;\n    this.path = path;\n    this.name = name;\n    this.tags = tags;\n    this.orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);\n    this.size = size;\n  }\n", " */\npublic class FileMeta {\n  private String id;\n  private String path;\n  private String name;\n  private List<String> tags;\n  private String orderNo;\n  private long size;\n\n  public FileMeta() {\n  }\n\n  public FileMeta(String id, String path, String name, List<String> tags, long size) {\n    this.id = id;\n    this.path = path;\n    this.name = name;\n    this.tags = tags;\n    this.orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);\n    this.size = size;\n  }\n", "  public String getId() {\n    return id;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n\n  public String getName() {\n    return name;\n  }\n", "  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public List<String> getTags() {\n    return tags;\n  }\n", "  public void setTags(List<String> tags) {\n    this.tags = tags;\n  }\n\n  public String getPath() {\n    return path;\n  }\n\n  public void setPath(String path) {\n    this.path = path;\n  }\n", "  public void setPath(String path) {\n    this.path = path;\n  }\n\n  public String getOrderNo() {\n    return orderNo;\n  }\n\n  public void setOrderNo(String orderNo) {\n    this.orderNo = orderNo;\n  }\n", "  public void setOrderNo(String orderNo) {\n    this.orderNo = orderNo;\n  }\n\n  public long getSize() {\n    return size;\n  }\n\n  public void setSize(long size) {\n    this.size = size;\n  }\n}\n", "  public void setSize(long size) {\n    this.size = size;\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/model/FileListResponse.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.model;\n", "package com.googlecodesamples.cloud.jss.lds.model;\n\nimport java.util.List;\n\n/**\n * The FileListResponse is a wrapper class for the API endpoint that returns a list of files as response\n */\npublic class FileListResponse {\n  private List<BaseFile> files;\n\n  public FileListResponse(List<BaseFile> files) {\n    this.files = files;\n  }\n\n  public List<BaseFile> getFiles() {\n    return files;\n  }\n", "  public void setFiles(List<BaseFile> files) {\n    this.files = files;\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/util/LdsUtil.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.util;\n", "package com.googlecodesamples.cloud.jss.lds.util;\n\nimport java.util.UUID;\n\nimport org.springframework.util.StringUtils;\n\n/**\n * Reusable utility functions\n */\npublic class LdsUtil {\n  private static final char URL_SLASH = '/';\n\n  /**\n   * Get base path of a file.\n   *\n   * @param basePath the URL without the file ID\n   * @return the base path of the input URL\n   */", " */\npublic class LdsUtil {\n  private static final char URL_SLASH = '/';\n\n  /**\n   * Get base path of a file.\n   *\n   * @param basePath the URL without the file ID\n   * @return the base path of the input URL\n   */\n  public static String getResourceBasePath(String basePath) {\n    String bucketBasePath = StringUtils.trimLeadingCharacter(basePath, URL_SLASH);\n    return basePath.substring(0, basePath.length() - bucketBasePath.length());\n  }\n\n  /**\n   * Get relative path of a file from the base.\n   *\n   * @param basePath the URL without the file ID\n   * @param fileId   the ID of the file\n   * @return the full URL of the file\n   */", "  public static String getResourceBasePath(String basePath) {\n    String bucketBasePath = StringUtils.trimLeadingCharacter(basePath, URL_SLASH);\n    return basePath.substring(0, basePath.length() - bucketBasePath.length());\n  }\n\n  /**\n   * Get relative path of a file from the base.\n   *\n   * @param basePath the URL without the file ID\n   * @param fileId   the ID of the file\n   * @return the full URL of the file\n   */", "  public static String getFileBucketPath(String basePath, String fileId) {\n    String bucketBasePath = StringUtils.trimLeadingCharacter(basePath, URL_SLASH);\n    return StringUtils.trimTrailingCharacter(bucketBasePath, URL_SLASH) + URL_SLASH + fileId;\n  }\n\n  /**\n   * Generate UUID.\n   *\n   * @return the generated UUID\n   */\n  public static String generateUuid() {\n    return UUID.randomUUID().toString();\n  }\n\n  /**\n   * Get file ID from the path.\n   *\n   * @return the ID of the file\n   */", "  public static String generateUuid() {\n    return UUID.randomUUID().toString();\n  }\n\n  /**\n   * Get file ID from the path.\n   *\n   * @return the ID of the file\n   */\n  public static String getPathId(String path) {\n    String[] pathArr = path.split(String.valueOf(URL_SLASH));\n    return pathArr[pathArr.length - 1];\n  }\n}\n", "  public static String getPathId(String path) {\n    String[] pathArr = path.split(String.valueOf(URL_SLASH));\n    return pathArr[pathArr.length - 1];\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/controller/FileController.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.controller;\n", "package com.googlecodesamples.cloud.jss.lds.controller;\n\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.FileListResponse;\nimport com.googlecodesamples.cloud.jss.lds.model.FileResponse;\nimport com.googlecodesamples.cloud.jss.lds.service.FileService;\nimport com.googlecodesamples.cloud.jss.lds.service.OpenTelemetryService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;", "import org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;", "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/** REST API controller of the backend service */\n@RestController\n@RequestMapping(\"/api\")\npublic class FileController {\n  private static final Logger log = LoggerFactory.getLogger(FileController.class);\n  private static final String STRING_SEPARATOR = \"\\\\s+\";\n  private final FileService fileService;\n  private final OpenTelemetryService openTelemetryService;\n\n  public FileController(FileService fileService, OpenTelemetryService openTelemetryService) {\n    this.fileService = fileService;\n    this.openTelemetryService = openTelemetryService;\n  }\n\n  /**\n   * The health check API.\n   *\n   * @return status OK is the service is alive\n   */\n  @GetMapping(\"/healthchecker\")\n  public ResponseEntity<?> healthCheck() throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {\n      log.info(\"entering healthCheck()\");\n      return ResponseEntity.noContent().build();\n    });\n  }\n\n  /**\n   * Upload files with tags.\n   *\n   * @param files list of files upload to the server\n   * @param tags list of tags (separated by space) label the files\n   * @return list of uploaded files\n   */\n  @PostMapping(\"/files\")\n  public ResponseEntity<?> uploadFiles(\n      @RequestParam List<MultipartFile> files, @RequestParam String tags) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"uploadFiles\", () -> {\n      log.info(\"entering uploadFiles()\");\n      List<String> tagList = getTagList(tags);\n      List<BaseFile> fileList = fileService.uploadFiles(files, tagList);\n      return ResponseEntity.status(HttpStatus.CREATED).body(new FileListResponse(fileList));\n    });\n  }\n\n  /**\n   * Search files with the given tags.\n   *\n   * @param tags list of tags (separated by space) label the files\n   * @param orderNo order number of the last file\n   * @param size number of files return\n   * @return list of files with pagination\n   */\n  @GetMapping(\"/files\")\n  public ResponseEntity<?> getFilesByTag(\n      @RequestParam(required = false) String tags,\n      @RequestParam(required = false) String orderNo,\n      @RequestParam(required = false, defaultValue = \"50\") int size) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"getFilesByTag\", () -> {\n      log.info(\"entering getFilesByTag()\");\n      List<String> tagList = getTagList(tags);\n      List<BaseFile> fileList = fileService.getFilesByTag(tagList, orderNo, size);", "public class FileController {\n  private static final Logger log = LoggerFactory.getLogger(FileController.class);\n  private static final String STRING_SEPARATOR = \"\\\\s+\";\n  private final FileService fileService;\n  private final OpenTelemetryService openTelemetryService;\n\n  public FileController(FileService fileService, OpenTelemetryService openTelemetryService) {\n    this.fileService = fileService;\n    this.openTelemetryService = openTelemetryService;\n  }\n\n  /**\n   * The health check API.\n   *\n   * @return status OK is the service is alive\n   */\n  @GetMapping(\"/healthchecker\")\n  public ResponseEntity<?> healthCheck() throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {\n      log.info(\"entering healthCheck()\");\n      return ResponseEntity.noContent().build();\n    });\n  }\n\n  /**\n   * Upload files with tags.\n   *\n   * @param files list of files upload to the server\n   * @param tags list of tags (separated by space) label the files\n   * @return list of uploaded files\n   */\n  @PostMapping(\"/files\")\n  public ResponseEntity<?> uploadFiles(\n      @RequestParam List<MultipartFile> files, @RequestParam String tags) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"uploadFiles\", () -> {\n      log.info(\"entering uploadFiles()\");\n      List<String> tagList = getTagList(tags);\n      List<BaseFile> fileList = fileService.uploadFiles(files, tagList);\n      return ResponseEntity.status(HttpStatus.CREATED).body(new FileListResponse(fileList));\n    });\n  }\n\n  /**\n   * Search files with the given tags.\n   *\n   * @param tags list of tags (separated by space) label the files\n   * @param orderNo order number of the last file\n   * @param size number of files return\n   * @return list of files with pagination\n   */\n  @GetMapping(\"/files\")\n  public ResponseEntity<?> getFilesByTag(\n      @RequestParam(required = false) String tags,\n      @RequestParam(required = false) String orderNo,\n      @RequestParam(required = false, defaultValue = \"50\") int size) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"getFilesByTag\", () -> {\n      log.info(\"entering getFilesByTag()\");\n      List<String> tagList = getTagList(tags);\n      List<BaseFile> fileList = fileService.getFilesByTag(tagList, orderNo, size);", "      if (CollectionUtils.isEmpty(fileList)) {\n        return ResponseEntity.ok().body(new FileListResponse(new ArrayList<>()));\n      }\n      return ResponseEntity.ok().body(new FileListResponse(fileList));\n    });\n  }\n\n  /**\n   * Update an existing file\n   *\n   * @param fileId unique ID of the file\n   * @param file new file to be uploaded to the server\n   * @param tags list of tags (separated by space) label the new file\n   * @return file data\n   */\n  @PutMapping(\"/files/{id}\")\n  public ResponseEntity<?> updateFile(\n      @PathVariable(\"id\") String fileId,\n      @RequestParam(required = false) MultipartFile file,\n      @RequestParam String tags) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"updateFile\", () -> {\n      log.info(\"entering updateFile()\");\n      BaseFile oldFile = fileService.getFileById(fileId);", "      if (oldFile == null) {\n        return ResponseEntity.notFound().build();\n      }\n      List<String> tagList = getTagList(tags);\n      BaseFile newFile = fileService.updateFile(file, tagList, oldFile);\n      return ResponseEntity.ok().body(new FileResponse(newFile));\n    });\n  }\n\n  /**\n   * Delete an existing file\n   *\n   * @param fileId unique ID of the file\n   * @return status NoContent or NotFound\n   */\n  @DeleteMapping(\"/files/{id}\")\n  public ResponseEntity<?> deleteFile(@PathVariable(\"id\") String fileId) throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"deleteFile\", () -> {\n      log.info(\"entering deleteFile()\");\n      BaseFile file = fileService.getFileById(fileId);", "      if (file == null) {\n        return ResponseEntity.notFound().build();\n      }\n      fileService.deleteFile(file);\n      return ResponseEntity.noContent().build();\n    });\n  }\n\n  /**\n   * Delete all files.\n   *\n   * @return status NoContent\n   */\n  @DeleteMapping(\"/reset\")\n  public ResponseEntity<?> resetFile() throws Exception {\n    return openTelemetryService.spanScope(this.getClass().getName(), \"resetFile\", () -> {\n      log.info(\"entering resetFile()\");\n      fileService.resetFile();\n      return ResponseEntity.noContent().build();\n    });\n  }\n\n  /**\n   * Split the string by separator.\n   *\n   * @param tags list of tags in a single string (separated by space)\n   * @return list of tags\n   */\n  private List<String> getTagList(String tags) {", "    if (!StringUtils.hasText(tags)) {\n      return new ArrayList<>();\n    }\n    return Arrays.stream(tags.split(STRING_SEPARATOR))\n        .map(String::trim)\n        .map(String::toLowerCase)\n        .collect(Collectors.toList());\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/service/FirestoreService.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport com.google.api.core.ApiFuture;\nimport com.google.cloud.firestore.DocumentReference;\nimport com.google.cloud.firestore.FieldPath;\nimport com.google.cloud.firestore.Firestore;\nimport com.google.cloud.firestore.FirestoreOptions;\nimport com.google.cloud.firestore.Query;\nimport com.google.cloud.firestore.QueryDocumentSnapshot;\nimport com.google.cloud.firestore.QuerySnapshot;", "import com.google.cloud.firestore.QueryDocumentSnapshot;\nimport com.google.cloud.firestore.QuerySnapshot;\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.FileMeta;\nimport com.googlecodesamples.cloud.jss.lds.util.LdsUtil;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\nimport javax.annotation.PreDestroy;\nimport org.springframework.beans.factory.annotation.Value;", "import javax.annotation.PreDestroy;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\n/** Backend service controller for Firestore */\n@Service\npublic class FirestoreService {\n  private static final String TAGS = \"tags\";\n  private static final String ORDER_NO = \"orderNo\";\n  private final Firestore firestore;\n\n  @Value(\"${firestore.collection.name}\")\n  private String collectionName;\n\n  @Value(\"${resource.path}\")\n  private String basePath;\n\n  public FirestoreService() {\n    this.firestore = FirestoreOptions.getDefaultInstance().getService();\n  }\n\n  /**\n   * Save metadata of a file to Firestore.\n   *\n   * @param fileMeta metadata of the file\n   */", "public class FirestoreService {\n  private static final String TAGS = \"tags\";\n  private static final String ORDER_NO = \"orderNo\";\n  private final Firestore firestore;\n\n  @Value(\"${firestore.collection.name}\")\n  private String collectionName;\n\n  @Value(\"${resource.path}\")\n  private String basePath;\n\n  public FirestoreService() {\n    this.firestore = FirestoreOptions.getDefaultInstance().getService();\n  }\n\n  /**\n   * Save metadata of a file to Firestore.\n   *\n   * @param fileMeta metadata of the file\n   */", "  public void save(FileMeta fileMeta) throws InterruptedException, ExecutionException {\n    DocumentReference docRef = firestore.collection(collectionName).document(fileMeta.getId());\n    docRef.set(fileMeta).get();\n  }\n\n  /**\n   * Search a file with given fileId.\n   *\n   * @param fileId unique id of the file\n   * @return file data\n   */", "  public BaseFile getFileById(String fileId) throws InterruptedException, ExecutionException {\n    ApiFuture<QuerySnapshot> future =\n        firestore.collection(collectionName).whereEqualTo(FieldPath.documentId(), fileId).get();\n    List<QueryDocumentSnapshot> documents = future.get().getDocuments();\n    if (documents.isEmpty()) {\n      return null;\n    }\n    return convertDoc2File(documents).get(0);\n  }\n\n  /**\n   * Search files with given tags.\n   *\n   * @param tags list of tags label the files\n   * @param orderNo application defined column for referencing order\n   * @param size number of files return\n   * @return list of files data\n   */\n  public List<BaseFile> getFilesByTag(List<String> tags, String orderNo, int size)\n      throws InterruptedException, ExecutionException {\n    ApiFuture<QuerySnapshot> future;\n    Query query =\n        firestore.collection(collectionName).orderBy(ORDER_NO, Query.Direction.DESCENDING);", "    if (!CollectionUtils.isEmpty(tags)) {\n      query = query.whereArrayContainsAny(TAGS, tags);\n    }\n    if (StringUtils.hasText(orderNo)) {\n      query = query.startAfter(orderNo);\n    }\n    future = query.limit(size).get();\n    List<QueryDocumentSnapshot> documents = future.get().getDocuments();\n    return convertDoc2File(documents);\n  }\n\n  /**\n   * Delete a file from Firestore with given fileId.\n   *\n   * @param fileId unique id of the file\n   */", "  public void delete(String fileId) throws InterruptedException, ExecutionException {\n    firestore.collection(collectionName).document(fileId).delete().get();\n  }\n\n  /** Delete a collection in Firestore. */\n  public void deleteCollection() throws InterruptedException, ExecutionException {\n    firestore.recursiveDelete(firestore.collection(collectionName)).get();\n  }\n\n  /**\n   * Convert documents retrieved from Firestore to BaseFile object.\n   *\n   * @param documents lis of documents retrieved from Firestore\n   * @return list of files data\n   */\n  private List<BaseFile> convertDoc2File(List<QueryDocumentSnapshot> documents) {\n    String resourceBasePath = LdsUtil.getResourceBasePath(basePath);\n    return documents.stream()\n        .map(doc -> new BaseFile(doc, resourceBasePath))\n        .collect(Collectors.toList());\n  }\n\n  /** Close the channels and release resources. */\n  @PreDestroy", "  public void close() throws Exception {\n    firestore.close();\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/service/FileService.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport com.googlecodesamples.cloud.jss.lds.model.BaseFile;\nimport com.googlecodesamples.cloud.jss.lds.model.FileMeta;\nimport com.googlecodesamples.cloud.jss.lds.util.LdsUtil;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;", "import java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport net.coobird.thumbnailator.Thumbnails;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\n/** Backend service controller for Firestore and CloudStorage */", "\n/** Backend service controller for Firestore and CloudStorage */\n@Service\npublic class FileService {\n  private static final Logger log = LoggerFactory.getLogger(FirestoreService.class);\n  private static final int THUMBNAIL_SIZE = 300;\n  private final FirestoreService firestoreService;\n  private final StorageService storageService;\n\n  @Value(\"${resource.path}\")\n  private String basePath;\n\n  @Value(\"${storage.bucket.name}\")\n  private String bucketName;\n\n  public FileService(FirestoreService firestoreService, StorageService storageService) {\n    this.firestoreService = firestoreService;\n    this.storageService = storageService;\n  }\n\n  /**\n   * Upload files to Firestore and Cloud Storage.\n   *\n   * @param files list of files upload to the server\n   * @param tags list of tags label the files\n   * @return list of uploaded files\n   */\n  public List<BaseFile> uploadFiles(List<MultipartFile> files, List<String> tags)\n      throws InterruptedException, ExecutionException, IOException {\n    log.info(\"entering uploadFiles()\");\n    List<BaseFile> fileList = new ArrayList<>();", "    for (MultipartFile file : files) {\n      String fileId = LdsUtil.generateUuid();\n      BaseFile newFile = createOrUpdateFile(file, tags, fileId, fileId, file.getSize());\n      fileList.add(newFile);\n    }\n    return fileList;\n  }\n\n  /**\n   * Update a file to Firestore and Cloud Storage.\n   *\n   * @param newFile new file upload to the server\n   * @param tags list of tags label the new file\n   * @param file previously uploaded file\n   * @return the updated file\n   */", "  public BaseFile updateFile(MultipartFile newFile, List<String> tags, BaseFile file)\n      throws InterruptedException, ExecutionException, IOException {\n    log.info(\"entering updateFile()\");\n    String fileId = file.getId();\n    if (newFile == null) {\n      String pathId = LdsUtil.getPathId(file.getPath());\n      return createOrUpdateFileMeta(tags, fileId, pathId, file.getName(), file.getSize());\n    }\n    storageService.delete(bucketName, file.getPath());\n    storageService.delete(bucketName, file.genThumbnailPath());\n    String newFileId = LdsUtil.generateUuid();\n    return createOrUpdateFile(newFile, tags, fileId, newFileId, newFile.getSize());\n  }\n\n  /**\n   * Delete a file from Firestore and Cloud Storage.\n   *\n   * @param file the uploaded file\n   */", "  public void deleteFile(BaseFile file) throws InterruptedException, ExecutionException {\n    log.info(\"entering deleteFile()\");\n    firestoreService.delete(file.getId());\n    storageService.delete(bucketName, file.getPath());\n    storageService.delete(bucketName, file.genThumbnailPath());\n  }\n\n  /**\n   * Search files with given tags.\n   *\n   * @param tags list of tags label the files\n   * @param orderNo application defined column for referencing order\n   * @param size number of files return\n   * @return list of uploaded files\n   */\n  public List<BaseFile> getFilesByTag(List<String> tags, String orderNo, int size)\n      throws InterruptedException, ExecutionException {\n    log.info(\"entering getFilesByTag()\");\n    return firestoreService.getFilesByTag(tags, orderNo, size);\n  }\n\n  /**\n   * Search a single file with given fileId.\n   *\n   * @param fileId unique id of the file\n   * @return the uploaded file\n   */", "  public BaseFile getFileById(String fileId) throws InterruptedException, ExecutionException {\n    log.info(\"entering getFileById()\");\n    return firestoreService.getFileById(fileId);\n  }\n\n  /** Delete all files from Firestore and Cloud Storage. */\n  public void resetFile() throws InterruptedException, ExecutionException {\n    log.info(\"entering resetFile()\");\n    firestoreService.deleteCollection();\n    storageService.batchDelete(bucketName);\n  }\n\n  /**\n   * Create or update a file in Cloud Storage with the given fileId.\n   *\n   * @param file file upload to the server\n   * @param tags list of tags label the file\n   * @param fileId unique ID of the file\n   * @param newFileId unique ID of the new file (for referencing Cloud Storage)\n   * @param size size of the file\n   * @return file data\n   */\n  private BaseFile createOrUpdateFile(\n      MultipartFile file, List<String> tags, String fileId, String newFileId, long size)\n      throws InterruptedException, ExecutionException, IOException {\n    BaseFile newFile =\n        createOrUpdateFileMeta(tags, fileId, newFileId, file.getOriginalFilename(), size);\n    storageService.save(bucketName, newFile.getPath(), file.getContentType(), file.getBytes());", "    if (newFile.checkImageFileType()) {\n      createThumbnail(file, newFile.genThumbnailPath());\n    }\n    return newFile;\n  }\n\n  /**\n   * Create or update the metadata of a file in Firestore with the given fileId.\n   *\n   * @param tags list of tags label the file\n   * @param fileId unique id of the file\n   * @param newFileId unique id of the new file (for referencing Cloud Storage)\n   * @param fileName name of the file\n   * @param size size of the file\n   * @return file data\n   */\n  private BaseFile createOrUpdateFileMeta(\n      List<String> tags, String fileId, String newFileId, String fileName, long size)\n      throws InterruptedException, ExecutionException {\n    String fileBucketPath = LdsUtil.getFileBucketPath(basePath, newFileId);\n    FileMeta fileMeta = new FileMeta(fileId, fileBucketPath, fileName, tags, size);\n    firestoreService.save(fileMeta);\n    return getFileById(fileId);\n  }\n\n  /**\n   * Create a thumbnail of the given file.\n   *\n   * @param file file to create thumbnail\n   * @param thumbnailId unique id of the thumbnail file\n   */\n  private void createThumbnail(MultipartFile file, String thumbnailId) throws IOException {\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n    Thumbnails.of(file.getInputStream())\n        .size(THUMBNAIL_SIZE, THUMBNAIL_SIZE)\n        .keepAspectRatio(false)\n        .toOutputStream(byteArrayOutputStream);\n    storageService.save(\n        bucketName, thumbnailId, file.getContentType(), byteArrayOutputStream.toByteArray());\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/service/StorageService.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport com.google.api.gax.paging.Page;\nimport com.google.cloud.storage.Blob;\nimport com.google.cloud.storage.BlobInfo;\nimport com.google.cloud.storage.Storage;\nimport com.google.cloud.storage.StorageBatch;\nimport com.google.cloud.storage.StorageOptions;\nimport javax.annotation.PreDestroy;\nimport org.springframework.stereotype.Service;", "import javax.annotation.PreDestroy;\nimport org.springframework.stereotype.Service;\n\n/** Backend service controller for CloudStorage */\n@Service\npublic class StorageService {\n  private final Storage storage;\n\n  public StorageService() {\n    this.storage = StorageOptions.getDefaultInstance().getService();\n  }\n\n  /**\n   * Save a file to Cloud Storage.\n   *\n   * @param bucketName name of the bucket\n   * @param fileId unique id of the file\n   * @param contentType content type of the file\n   * @param content content of the file\n   */", "  public void save(String bucketName, String fileId, String contentType, byte[] content) {\n    BlobInfo blobInfo = BlobInfo.newBuilder(bucketName, fileId).setContentType(contentType).build();\n    storage.create(blobInfo, content);\n  }\n\n  /**\n   * Delete a file with given fileId.\n   *\n   * @param bucketName name of the bucket\n   * @param fileId unique id of a file\n   */", "  public void delete(String bucketName, String fileId) {\n    storage.delete(bucketName, fileId);\n  }\n\n  /**\n   * Delete all files in the bucket.\n   *\n   * @param bucketName name of the bucket\n   */\n  public void batchDelete(String bucketName) {\n    Page<Blob> blobs = storage.list(bucketName);", "  public void batchDelete(String bucketName) {\n    Page<Blob> blobs = storage.list(bucketName);\n    if (!blobs.getValues().iterator().hasNext()) {\n      return;\n    }\n    StorageBatch batchRequest = storage.batch();\n    for (Blob blob : blobs.iterateAll()) {\n      batchRequest.delete(blob.getBlobId());\n    }\n    batchRequest.submit();\n  }\n\n  /** Close the channels and release resources. */\n  @PreDestroy", "  public void close() throws Exception {\n    storage.close();\n  }\n}\n"]}
{"filename": "api/src/main/java/com/googlecodesamples/cloud/jss/lds/service/OpenTelemetryService.java", "chunked_list": ["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.googlecodesamples.cloud.jss.lds.service;\n", "package com.googlecodesamples.cloud.jss.lds.service;\n\nimport io.opentelemetry.api.trace.Span;\nimport io.opentelemetry.api.trace.Tracer;\nimport io.opentelemetry.context.Scope;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\nimport org.springframework.stereotype.Service;\n\nimport java.util.concurrent.Callable;\n", "import java.util.concurrent.Callable;\n\n@Service\npublic class OpenTelemetryService {\n\tprivate final static String INSTRUMENTATION_SCOPE_VERSION = \"1.0.0\";\n\tprivate final OpenTelemetrySdk openTelemetrySdk;\n\tpublic OpenTelemetryService(OpenTelemetrySdk openTelemetrySdk) {\n\t\tthis.openTelemetrySdk = openTelemetrySdk;\n\t}\n\n\t/**\n\t * create and manage a new span in OpenTelemetry for a given instrumentation scope\n\t * and executes a callable method within it.\n\t *\n\t * @param instrumentationScopeName represents the name of the instrumentation library that is being used.\n\t * @param spanName  represents the name of the span that is being created.\n\t * @param callable is a function that is to be executed within the span.\n\t * @return generic type\n\t */\n\tpublic <T> T spanScope(String instrumentationScopeName, String spanName, Callable<T> callable) throws Exception {\n\t\tTracer tracer = openTelemetrySdk.getTracer(instrumentationScopeName, INSTRUMENTATION_SCOPE_VERSION);\n\t\tSpan span = tracer.spanBuilder(spanName).startSpan();\n\t\ttry (Scope ss = span.makeCurrent()) {\n\t\t\treturn callable.call();\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n"]}
