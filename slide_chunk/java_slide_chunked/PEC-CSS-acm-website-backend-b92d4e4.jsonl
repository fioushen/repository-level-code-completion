{"filename": "src/test/java/com/pecacm/backend/BackendApplicationTests.java", "chunked_list": ["package com.pecacm.backend;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass BackendApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/BackendApplication.java", "chunked_list": ["package com.pecacm.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BackendApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(BackendApplication.class, args);\n    }\n\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(BackendApplication.class, args);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/filters/JwtFilter.java", "chunked_list": ["package com.pecacm.backend.filters;\n\nimport com.pecacm.backend.services.JwtService;\nimport com.pecacm.backend.services.UserService;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.lang.NonNull;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.lang.NonNull;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n", "import org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class JwtFilter extends OncePerRequestFilter {\n\n    private static final String AUTHORIZATION = \"Authorization\";\n    private static final String BEARER = \"Bearer \";\n    private UserService userService;\n    private JwtService jwtService;\n\n    @Autowired\n    public JwtFilter(UserService userService, JwtService jwtService) {\n        this.userService = userService;\n        this.jwtService = jwtService;\n    }\n\n    @Override\n    protected void doFilterInternal(\n            @NonNull HttpServletRequest request,\n            @NonNull HttpServletResponse response,\n            @NonNull FilterChain filterChain\n    ) throws ServletException, IOException {\n        String authHeader = request.getHeader(AUTHORIZATION);", "        if(!StringUtils.startsWithIgnoreCase(authHeader, BEARER)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        String jwtToken = authHeader.substring(BEARER.length());\n        String username = jwtService.extractUsername(jwtToken);\n        if(username != null && SecurityContextHolder.getContext().getAuthentication() == null){\n            UserDetails userDetails = userService.loadUserByUsername(username);\n            if(jwtService.validateToken(jwtToken, userDetails)){\n                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails.getUsername(),\n                                userDetails.getPassword(),\n                                userDetails.getAuthorities()\n                        );\n                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n            }\n        }\n        filterChain.doFilter(request,response);\n    }\n}\n", "            if(jwtService.validateToken(jwtToken, userDetails)){\n                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails.getUsername(),\n                                userDetails.getPassword(),\n                                userDetails.getAuthorities()\n                        );\n                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n            }\n        }\n        filterChain.doFilter(request,response);\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/repository/VerificationTokenRepository.java", "chunked_list": ["package com.pecacm.backend.repository;\n\nimport com.pecacm.backend.entities.VerificationToken;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.UUID;\n\n@Repository\npublic interface VerificationTokenRepository extends JpaRepository<VerificationToken, UUID> {\n\n}\n", "@Repository\npublic interface VerificationTokenRepository extends JpaRepository<VerificationToken, UUID> {\n\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/repository/UserRepository.java", "chunked_list": ["package com.pecacm.backend.repository;\n\nimport com.pecacm.backend.entities.User;\nimport com.pecacm.backend.enums.Role;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Integer> {\n    Boolean existsByEmailOrSid(String email, Integer sid);\n\n    Optional<User> findByEmail(String email);\n\n    @Query(\"SELECT u.designation FROM User u \" +\n           \"WHERE u.email = :email\")\n    Optional<Role> findRoleByEmail(String email);\n\n    @Modifying\n    @Query(\"UPDATE User \" +\n           \"SET designation = :newRole \" +\n           \"WHERE email = :email\")\n    void updateRoleByEmail(String email, Role newRole);\n\n    Long countByXpGreaterThan(Integer xp);\n\n    @Query(\"SELECT u FROM User u ORDER BY u.xp DESC LIMIT 5\")\n    List<User> findAllByByOrderByXpDesc();\n\n\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/repository/AttendanceRepository.java", "chunked_list": ["package com.pecacm.backend.repository;\n\nimport com.pecacm.backend.entities.Attendance;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface AttendanceRepository extends JpaRepository<Attendance, Integer> {\n    List<Attendance> findByUserId(Integer id);\n    List<Attendance> findByUserIdAndRole(Integer id, String role);\n}", "@Repository\npublic interface AttendanceRepository extends JpaRepository<Attendance, Integer> {\n    List<Attendance> findByUserId(Integer id);\n    List<Attendance> findByUserIdAndRole(Integer id, String role);\n}"]}
{"filename": "src/main/java/com/pecacm/backend/repository/EventRepository.java", "chunked_list": ["package com.pecacm.backend.repository;\n\nimport com.pecacm.backend.entities.Event;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface EventRepository extends JpaRepository<Event, Integer> {\n    List<Event> findByBranch(String branch);\n}", "@Repository\npublic interface EventRepository extends JpaRepository<Event, Integer> {\n    List<Event> findByBranch(String branch);\n}"]}
{"filename": "src/main/java/com/pecacm/backend/constants/Constants.java", "chunked_list": ["package com.pecacm.backend.constants;\n\npublic class Constants {\n    public static final String UPDATE_SUCCESS = \"Successfully Updated\";\n\n    /* Authorization Constants */\n    public static final String OR = \" or \";\n    public static final String HAS_ROLE_ADMIN = \"hasRole('Admin')\";\n    public static final String HAS_ROLE_CORE = \"hasRole('Core')\";\n    public static final String HAS_ROLE_EB = \"hasRole('ExecutiveBody')\";\n    public static final String HAS_ROLE_IB = \"hasRole('ImplementationBody')\";", "    public static final String HAS_ROLE_CORE = \"hasRole('Core')\";\n    public static final String HAS_ROLE_EB = \"hasRole('ExecutiveBody')\";\n    public static final String HAS_ROLE_IB = \"hasRole('ImplementationBody')\";\n    public static final String HAS_ROLE_MEMBER = \"hasRole('Member')\";\n    public static final String HAS_ROLE_ANONYMOUS = \"hasRole('ANONYMOUS')\";\n    public static final String HAS_ROLE_CORE_AND_ABOVE = HAS_ROLE_ADMIN + OR + HAS_ROLE_CORE;\n    public static final String HAS_ROLE_EB_AND_ABOVE = HAS_ROLE_CORE_AND_ABOVE + OR + HAS_ROLE_EB;\n    public static final String HAS_ROLE_IB_AND_ABOVE = HAS_ROLE_EB_AND_ABOVE + OR + HAS_ROLE_IB;\n    public static final String HAS_ROLE_MEMBER_AND_ABOVE = HAS_ROLE_IB_AND_ABOVE + OR + HAS_ROLE_MEMBER;\n    public static final String HAS_ANY_ROLE = HAS_ROLE_MEMBER_AND_ABOVE + OR + HAS_ROLE_ANONYMOUS;\n}\n", "    public static final String HAS_ROLE_MEMBER_AND_ABOVE = HAS_ROLE_IB_AND_ABOVE + OR + HAS_ROLE_MEMBER;\n    public static final String HAS_ANY_ROLE = HAS_ROLE_MEMBER_AND_ABOVE + OR + HAS_ROLE_ANONYMOUS;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/constants/ErrorConstants.java", "chunked_list": ["package com.pecacm.backend.constants;\n\npublic class ErrorConstants {\n    public static final String USER_NOT_FOUND = \"User with provided email does not exist\";\n    public static final String USER_UNAUTHORIZED = \"User Unauthorized\";\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/model/AssignRoleRequest.java", "chunked_list": ["package com.pecacm.backend.model;\n\nimport com.pecacm.backend.enums.Role;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class AssignRoleRequest {\n    private String email;\n    private Role newRole;\n}\n", "@Setter\n@AllArgsConstructor\npublic class AssignRoleRequest {\n    private String email;\n    private Role newRole;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/model/AuthenticationRequest.java", "chunked_list": ["package com.pecacm.backend.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class AuthenticationRequest {\n    private String email;\n    private String password;\n}\n", "@AllArgsConstructor\npublic class AuthenticationRequest {\n    private String email;\n    private String password;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/response/AuthenticationResponse.java", "chunked_list": ["package com.pecacm.backend.response;\n\nimport com.pecacm.backend.entities.User;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class AuthenticationResponse {\n    private String jwtToken;\n    private User user;\n}\n", "@Setter\n@AllArgsConstructor\npublic class AuthenticationResponse {\n    private String jwtToken;\n    private User user;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/response/ErrorResponse.java", "chunked_list": ["package com.pecacm.backend.response;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class ErrorResponse {\n    private String code;\n    private String message;\n}\n", "@AllArgsConstructor\npublic class ErrorResponse {\n    private String code;\n    private String message;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/enums/Role.java", "chunked_list": ["package com.pecacm.backend.enums;\n\npublic enum Role {\n    Member,\n    ImplementationBody,\n    ExecutiveBody,\n    Core,\n    Admin\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/exception/AcmException.java", "chunked_list": ["package com.pecacm.backend.exception;\n\nimport com.pecacm.backend.response.ErrorResponse;\nimport org.springframework.http.HttpStatus;\n\npublic class AcmException extends RuntimeException {\n    private HttpStatus status;\n\n    public AcmException(String message, HttpStatus status) {\n        super(message);\n        this.status = status;\n    }\n\n    public AcmException(String message, Throwable cause, HttpStatus status) {\n        super(message, cause);\n        this.status = status;\n    }\n\n    public AcmException(String message) {\n        this(message, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n\n    public AcmException(String message, Throwable cause) {\n        this(message, cause, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n", "    public HttpStatus getStatus() {\n        return status;\n    }\n\n    public ErrorResponse toErrorResponse() {\n        return new ErrorResponse(status.getReasonPhrase(), getMessage());\n    }\n}"]}
{"filename": "src/main/java/com/pecacm/backend/exception/ExceptionResponseHandler.java", "chunked_list": ["package com.pecacm.backend.exception;\n\nimport com.pecacm.backend.response.ErrorResponse;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class ExceptionResponseHandler {\n\n    @ExceptionHandler(AcmException.class)\n    public ResponseEntity<ErrorResponse> handleAcmException(AcmException acmException) {\n        return ResponseEntity.status(acmException.getStatus()).body(new ErrorResponse(acmException.getStatus().getReasonPhrase(), acmException.getMessage()));\n    }\n}\n", "public class ExceptionResponseHandler {\n\n    @ExceptionHandler(AcmException.class)\n    public ResponseEntity<ErrorResponse> handleAcmException(AcmException acmException) {\n        return ResponseEntity.status(acmException.getStatus()).body(new ErrorResponse(acmException.getStatus().getReasonPhrase(), acmException.getMessage()));\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/services/EmailService.java", "chunked_list": ["package com.pecacm.backend.services;\n\nimport com.pecacm.backend.entities.User;\nimport com.pecacm.backend.entities.VerificationToken;\nimport com.pecacm.backend.repository.VerificationTokenRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;", "import org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class EmailService {\n\n    private final JavaMailSender javaMailSender;\n    private final VerificationTokenRepository verificationTokenRepository;\n\n    @Value(\"${verify.base.frontend}\")\n    private String hostname;\n\n    @Autowired\n    public EmailService(JavaMailSender javaMailSender, VerificationTokenRepository verificationTokenRepository) {\n        this.javaMailSender = javaMailSender;\n        this.verificationTokenRepository = verificationTokenRepository;\n    }\n\n    @Transactional", "    public void sendVerificationEmail(User user) {\n        VerificationToken token = verificationTokenRepository.save(\n                VerificationToken.builder().user(user).build()\n        );\n        SimpleMailMessage mailMessage = new SimpleMailMessage();\n        mailMessage.setTo(user.getEmail());\n        mailMessage.setSubject(\"Email verification\");\n        mailMessage.setText(\n                \"Click on the link to verify your email: \" + hostname + \"v1/user/verify?token=\" + token.getToken()\n        );\n        javaMailSender.send(mailMessage);\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/services/JwtService.java", "chunked_list": ["package com.pecacm.backend.services;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;", "\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.function.Function;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${jwt.secret}\")\n    private String secretKey;\n", "    public String generateToken(UserDetails userDetails) {\n        HashMap<String, Object> claims = new HashMap<>();\n        return Jwts.builder().setClaims(claims)\n                .setSubject(userDetails.getUsername())\n                .setIssuedAt(new Date())\n                .setExpiration(new Date(System.currentTimeMillis() + (1000L * 3600 * 24 * 30)))\n                .signWith(SignatureAlgorithm.HS256, secretKey)\n                .compact();\n    }\n\n    public boolean validateToken(String token, UserDetails userDetails) {\n        return extractUsername(token).equals(userDetails.getUsername()) && !isTokenExpired(token);\n    }\n", "    public boolean validateToken(String token, UserDetails userDetails) {\n        return extractUsername(token).equals(userDetails.getUsername()) && !isTokenExpired(token);\n    }\n\n    public boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    public Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n", "    public Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n\n    public String extractUsername(String token) {\n        return extractClaim(token, Claims::getSubject);\n    }\n\n    public <T> T extractClaim(String token, Function<Claims, T> claim) {\n        Claims claims = extractAllClaims(token);\n        return claim.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/services/UserService.java", "chunked_list": ["package com.pecacm.backend.services;\n\nimport com.pecacm.backend.constants.Constants;\nimport com.pecacm.backend.constants.ErrorConstants;\nimport com.pecacm.backend.entities.User;\nimport com.pecacm.backend.entities.VerificationToken;\nimport com.pecacm.backend.enums.Role;\nimport com.pecacm.backend.exception.AcmException;\nimport com.pecacm.backend.model.AssignRoleRequest;\nimport com.pecacm.backend.repository.UserRepository;", "import com.pecacm.backend.model.AssignRoleRequest;\nimport com.pecacm.backend.repository.UserRepository;\nimport com.pecacm.backend.repository.VerificationTokenRepository;\nimport org.apache.logging.log4j.util.Strings;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;", "import org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@Service\npublic class UserService implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    private final VerificationTokenRepository verificationTokenRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository, VerificationTokenRepository verificationTokenRepository) {\n        this.userRepository = userRepository;\n        this.verificationTokenRepository = verificationTokenRepository;\n    }\n", "public class UserService implements UserDetailsService {\n\n    private final UserRepository userRepository;\n\n    private final VerificationTokenRepository verificationTokenRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository, VerificationTokenRepository verificationTokenRepository) {\n        this.userRepository = userRepository;\n        this.verificationTokenRepository = verificationTokenRepository;\n    }\n", "    public User addUser(User user, PasswordEncoder passwordEncoder) {\n        if(userRepository.existsByEmailOrSid(user.getEmail(), user.getSid())) {\n            throw new AcmException(\"User with given email or SID already exists\", HttpStatus.BAD_REQUEST);\n        }\n        if(Strings.isBlank(user.getEmail()) || Strings.isBlank(user.getPassword()) || user.getSid() == null ||\n            Strings.isBlank(user.getBranch())\n        ) {\n            throw new AcmException(\"One or more required fields are empty\", HttpStatus.BAD_REQUEST);\n        }\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        return userRepository.save(user);\n    }\n\n    @Override", "    public User loadUserByUsername(String email) {\n        return userRepository.findByEmail(email).orElseThrow(() ->\n                new AcmException(\"User with provided email does not exist\", HttpStatus.NOT_FOUND)\n        );\n    }\n\n    public User verifyUser(UUID tokenId) {\n        VerificationToken token = verificationTokenRepository.findById(tokenId).orElseThrow(() ->\n            new AcmException(\"Verification token not found\", HttpStatus.NOT_FOUND)\n        );\n        // TODO: check token expiration\n        User user = token.getUser();\n        user.setVerified(true);\n        verificationTokenRepository.deleteById(tokenId);\n        return userRepository.save(user);\n    }\n\n    @Transactional", "    public String changeRole(AssignRoleRequest assignRoleRequest) {\n        String userEmail = SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString();\n        Role requesterRole = userRepository.findRoleByEmail(userEmail)\n            .orElseThrow(() ->\n                new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND)\n            );\n\n        Role requestUserRole = userRepository.findRoleByEmail(assignRoleRequest.getEmail())\n                .orElseThrow(() ->\n                        new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND)\n                );\n\n        Boolean isNewRoleLessThanUserRole = assignRoleRequest.getNewRole().compareTo(requesterRole) < 0;\n        Boolean isUserAuthorizedToChangeRole = requesterRole.equals(Role.Core) || requesterRole.equals(Role.Admin);\n        Boolean isRequestUserRoleLessThanRequester = requestUserRole.compareTo(requesterRole) < 0;\n", "        if (isNewRoleLessThanUserRole && isUserAuthorizedToChangeRole && isRequestUserRoleLessThanRequester)\n        {\n            userRepository.updateRoleByEmail(assignRoleRequest.getEmail(), assignRoleRequest.getNewRole());\n            return Constants.UPDATE_SUCCESS;\n        }\n\n        throw new AcmException(ErrorConstants.USER_UNAUTHORIZED, HttpStatus.UNAUTHORIZED);\n    }\n\n    public User getUserById(Integer userId){\n        return userRepository.findById(userId)\n                .orElseThrow(() ->\n                        new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND)\n                );\n    }\n", "    public User getUserById(Integer userId){\n        return userRepository.findById(userId)\n                .orElseThrow(() ->\n                        new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND)\n                );\n    }\n\n    public Long getRank(Integer score) {\n        return userRepository.countByXpGreaterThan(score) + 1;\n    }\n\n    public List<User> getLeaderboard() {\n        return userRepository.findAllByByOrderByXpDesc();\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/services/EventService.java", "chunked_list": ["package com.pecacm.backend.services;\n\nimport com.pecacm.backend.constants.ErrorConstants;\nimport com.pecacm.backend.entities.Event;\nimport com.pecacm.backend.entities.User;\nimport com.pecacm.backend.exception.AcmException;\nimport com.pecacm.backend.repository.AttendanceRepository;\nimport com.pecacm.backend.repository.EventRepository;\nimport com.pecacm.backend.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;", "import com.pecacm.backend.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n", "import java.util.Optional;\n\n@Service\npublic class EventService {\n\n    private final EventRepository eventRepository;\n    private final AttendanceRepository attendanceRepository;\n    private final UserRepository userRepository;\n\n    @Autowired\n    public EventService(EventRepository eventRepository, AttendanceRepository attendanceRepository, UserRepository userRepository) {\n        this.eventRepository = eventRepository;\n        this.attendanceRepository = attendanceRepository;\n        this.userRepository = userRepository;\n    }\n\n    // TODO : change all GET events to pageable repositories\n\n    public List<Event> getAllEvents() {\n        return new ArrayList<>(eventRepository.findAll());\n    }\n", "    public Event getSingleEvent(Integer eventId) {\n        Optional<Event> event = eventRepository.findById(eventId);\n        if (event.isEmpty()) {\n            throw new AcmException(\"Event doesn't not exist with id :\" + eventId, HttpStatus.NOT_FOUND);\n        }\n        return event.get();\n    }\n\n    public List<Event> getEventsByBranch(String branch) {\n        return eventRepository.findByBranch(branch);\n    }\n\n    public List<Event> getUserEvents(Integer userId) {\n        List<Event> events = new ArrayList<>();\n        attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );\n        return events;\n    }\n\n    public List<Event> getUserEventsByRole(Integer userId, String role) {\n        Optional<User> user = userRepository.findById(userId);\n        List<Event> events = new ArrayList<>();", "        if (user.isEmpty()) {\n            throw new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND);\n        }\n        attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );\n        return events;\n    }\n\n    public Event createEvent(Event event) {\n        try {\n            return eventRepository.save(event);\n        } catch (Exception e) {\n            throw new AcmException(\"Event not created, \" + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n", "    public Event createEvent(Event event) {\n        try {\n            return eventRepository.save(event);\n        } catch (Exception e) {\n            throw new AcmException(\"Event not created, \" + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    public Event updateEvent(Event updatedEvent, Integer eventId) {\n        Optional<Event> event = eventRepository.findById(eventId);\n        if (event.isEmpty() || !Objects.equals(event.get().getId(), eventId)) {\n            throw new AcmException(\"Event cannot be updated\", HttpStatus.BAD_REQUEST);\n        }\n        updatedEvent.setId(eventId);\n        return eventRepository.save(updatedEvent);\n    }\n", "    public Event updateEvent(Event updatedEvent, Integer eventId) {\n        Optional<Event> event = eventRepository.findById(eventId);\n        if (event.isEmpty() || !Objects.equals(event.get().getId(), eventId)) {\n            throw new AcmException(\"Event cannot be updated\", HttpStatus.BAD_REQUEST);\n        }\n        updatedEvent.setId(eventId);\n        return eventRepository.save(updatedEvent);\n    }\n\n    public void deleteEvent(Integer eventId) {\n        try {\n            eventRepository.deleteById(eventId);\n        } catch (Exception ex) {\n            throw new AcmException(\"Event cannot be deleted, eventId=\" + eventId, HttpStatus.BAD_REQUEST);\n        }\n    }\n}\n", "    public void deleteEvent(Integer eventId) {\n        try {\n            eventRepository.deleteById(eventId);\n        } catch (Exception ex) {\n            throw new AcmException(\"Event cannot be deleted, eventId=\" + eventId, HttpStatus.BAD_REQUEST);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/controllers/HealthController.java", "chunked_list": ["package com.pecacm.backend.controllers;\n\nimport com.pecacm.backend.constants.Constants;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HealthController {\n    @GetMapping(\"/health\")\n    @ResponseStatus(HttpStatus.OK)\n    @PreAuthorize(Constants.HAS_ANY_ROLE)", "\n@RestController\npublic class HealthController {\n    @GetMapping(\"/health\")\n    @ResponseStatus(HttpStatus.OK)\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public String health() {\n        return \"Health OK\";\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/controllers/EventsController.java", "chunked_list": ["package com.pecacm.backend.controllers;\n\nimport com.pecacm.backend.constants.Constants;\nimport com.pecacm.backend.entities.Event;\nimport com.pecacm.backend.services.EventService;\nimport jakarta.annotation.Nullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/v1/events\")\npublic class EventsController {\n\n    private final EventService eventService;\n\n    @Autowired\n    public EventsController(EventService eventService) {\n        this.eventService = eventService;\n    }\n\n    @GetMapping\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<List<Event>> getAllEvents() {\n        // TODO : Return pageable response\n        List<Event> events = eventService.getAllEvents();\n        return ResponseEntity.ok(events);\n    }\n\n    @GetMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> getSingleEvent(@PathVariable Integer eventId){\n        // TODO : Return pageable response\n        Event event = eventService.getSingleEvent(eventId);\n        return ResponseEntity.ok(event);\n    }\n\n    @GetMapping(\"/branches/{branch}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<List<Event>> getEventsByBranch(@PathVariable String branch){\n        // TODO : Return pageable response\n        List<Event> events = eventService.getEventsByBranch(branch);\n        return ResponseEntity.ok(events);\n    }\n\n    @GetMapping(\"/user/{userId}\")\n    @PreAuthorize(Constants.HAS_ROLE_MEMBER_AND_ABOVE)\n    public ResponseEntity<List<Event>> getUserEventsByRole(@PathVariable Integer userId, @RequestParam(\"role\") @Nullable String role) {", "public class EventsController {\n\n    private final EventService eventService;\n\n    @Autowired\n    public EventsController(EventService eventService) {\n        this.eventService = eventService;\n    }\n\n    @GetMapping\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<List<Event>> getAllEvents() {\n        // TODO : Return pageable response\n        List<Event> events = eventService.getAllEvents();\n        return ResponseEntity.ok(events);\n    }\n\n    @GetMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<Event> getSingleEvent(@PathVariable Integer eventId){\n        // TODO : Return pageable response\n        Event event = eventService.getSingleEvent(eventId);\n        return ResponseEntity.ok(event);\n    }\n\n    @GetMapping(\"/branches/{branch}\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<List<Event>> getEventsByBranch(@PathVariable String branch){\n        // TODO : Return pageable response\n        List<Event> events = eventService.getEventsByBranch(branch);\n        return ResponseEntity.ok(events);\n    }\n\n    @GetMapping(\"/user/{userId}\")\n    @PreAuthorize(Constants.HAS_ROLE_MEMBER_AND_ABOVE)\n    public ResponseEntity<List<Event>> getUserEventsByRole(@PathVariable Integer userId, @RequestParam(\"role\") @Nullable String role) {", "        if (role == null){\n            return ResponseEntity.ok(eventService.getUserEvents(userId));\n        }\n        return ResponseEntity.ok(eventService.getUserEventsByRole(userId, role));\n    }\n\n    @PostMapping\n    @PreAuthorize(Constants.HAS_ROLE_IB_AND_ABOVE)\n    public ResponseEntity<Event> createEvent(@RequestBody Event event){\n        Event createdEvent = eventService.createEvent(event);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdEvent);\n    }\n\n    @PutMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ROLE_EB_AND_ABOVE)\n    public ResponseEntity<Event> updateEvent(@RequestBody Event event, @PathVariable Integer eventId){\n        Event updatedEvent = eventService.updateEvent(event, eventId);\n        return (updatedEvent == null) ? ResponseEntity.badRequest().build() : ResponseEntity.ok(updatedEvent);\n    }\n\n    @DeleteMapping(\"/{eventId}\")\n    @PreAuthorize(Constants.HAS_ROLE_CORE_AND_ABOVE)\n    public ResponseEntity<Void> deleteEvent(@PathVariable Integer eventId) {\n        eventService.deleteEvent(eventId);\n        return ResponseEntity.status(HttpStatus.OK).build();\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/controllers/UserController.java", "chunked_list": ["package com.pecacm.backend.controllers;\n\nimport com.pecacm.backend.constants.Constants;\nimport com.pecacm.backend.entities.User;\nimport com.pecacm.backend.exception.AcmException;\nimport com.pecacm.backend.model.AssignRoleRequest;\nimport com.pecacm.backend.model.AuthenticationRequest;\nimport com.pecacm.backend.response.AuthenticationResponse;\nimport com.pecacm.backend.services.EmailService;\nimport com.pecacm.backend.services.JwtService;", "import com.pecacm.backend.services.EmailService;\nimport com.pecacm.backend.services.JwtService;\nimport com.pecacm.backend.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.lang.NonNull;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;", "import org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.UUID;\n\n@RestController", "\n@RestController\n@RequestMapping(\"/v1/user\")\npublic class UserController {\n\n    private final EmailService emailService;\n\n    private final UserService userService;\n\n    private final JwtService jwtService;\n\n    private final AuthenticationManager authenticationManager;\n\n    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public UserController(EmailService emailService, UserService userService, JwtService jwtService, AuthenticationManager authenticationManager, PasswordEncoder passwordEncoder) {\n        this.emailService = emailService;\n        this.userService = userService;\n        this.jwtService = jwtService;\n        this.authenticationManager = authenticationManager;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    @PostMapping\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<AuthenticationResponse> registerUser(@RequestBody User user) {\n        User newUser = userService.addUser(user, passwordEncoder);\n        String jwtToken = jwtService.generateToken(user);\n        emailService.sendVerificationEmail(newUser);\n        return ResponseEntity.status(HttpStatus.CREATED).body(new AuthenticationResponse(jwtToken, newUser));\n    }\n\n    @PostMapping(\"/login\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<AuthenticationResponse> loginUser(@RequestBody AuthenticationRequest request) {", "        try {\n            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(\n                    request.getEmail(), request.getPassword()\n            ));\n        }\n        catch (BadCredentialsException e) {\n            throw new AcmException(\"Incorrect email or password\", HttpStatus.UNAUTHORIZED);\n        }\n        User user = userService.loadUserByUsername(request.getEmail());\n        if(!user.getVerified()) {\n            emailService.sendVerificationEmail(user);\n        }\n        String jwtToken = jwtService.generateToken(user);\n        return ResponseEntity.ok(new AuthenticationResponse(jwtToken, user));\n    }\n\n    @GetMapping(\"/verify\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<String> verifyUser(@RequestParam UUID token) {\n        userService.verifyUser(token);\n        return ResponseEntity.ok(\"Verification successful!\");\n    }\n\n    @PostMapping(\"/assign/role\")\n    @PreAuthorize(Constants.HAS_ROLE_CORE_AND_ABOVE)\n    public ResponseEntity<String> assignRole(@RequestBody AssignRoleRequest assignRoleRequest) {\n        return ResponseEntity.ok(userService.changeRole(assignRoleRequest));\n    }\n\n    @GetMapping(\"/{userId}\")\n    @PreAuthorize(Constants.HAS_ROLE_MEMBER_AND_ABOVE)\n    public ResponseEntity<User> getUserById(@PathVariable Integer userId) {\n        return ResponseEntity.ok(userService.getUserById(userId));\n    }\n\n    @GetMapping(\"/rank\")\n    public ResponseEntity<Long> getRank(@RequestParam @NonNull Integer score) {\n        return ResponseEntity.ok(userService.getRank(score));\n    }\n\n    @GetMapping(\"/leaderboard\")\n    public ResponseEntity<List<User>> getLeaderboard() {\n        return ResponseEntity.ok(userService.getLeaderboard());\n    }\n}\n", "        if(!user.getVerified()) {\n            emailService.sendVerificationEmail(user);\n        }\n        String jwtToken = jwtService.generateToken(user);\n        return ResponseEntity.ok(new AuthenticationResponse(jwtToken, user));\n    }\n\n    @GetMapping(\"/verify\")\n    @PreAuthorize(Constants.HAS_ANY_ROLE)\n    public ResponseEntity<String> verifyUser(@RequestParam UUID token) {\n        userService.verifyUser(token);\n        return ResponseEntity.ok(\"Verification successful!\");\n    }\n\n    @PostMapping(\"/assign/role\")\n    @PreAuthorize(Constants.HAS_ROLE_CORE_AND_ABOVE)\n    public ResponseEntity<String> assignRole(@RequestBody AssignRoleRequest assignRoleRequest) {\n        return ResponseEntity.ok(userService.changeRole(assignRoleRequest));\n    }\n\n    @GetMapping(\"/{userId}\")\n    @PreAuthorize(Constants.HAS_ROLE_MEMBER_AND_ABOVE)\n    public ResponseEntity<User> getUserById(@PathVariable Integer userId) {\n        return ResponseEntity.ok(userService.getUserById(userId));\n    }\n\n    @GetMapping(\"/rank\")\n    public ResponseEntity<Long> getRank(@RequestParam @NonNull Integer score) {\n        return ResponseEntity.ok(userService.getRank(score));\n    }\n\n    @GetMapping(\"/leaderboard\")\n    public ResponseEntity<List<User>> getLeaderboard() {\n        return ResponseEntity.ok(userService.getLeaderboard());\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/configuration/SecurityConfiguration.java", "chunked_list": ["package com.pecacm.backend.configuration;\n\nimport com.pecacm.backend.filters.JwtFilter;\nimport com.pecacm.backend.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;", "import org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;", "import org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@EnableWebSecurity\n@EnableMethodSecurity\n@Configuration\npublic class SecurityConfiguration {\n\n    private final UserService userService;\n    private final JwtFilter jwtFilter;\n\n    @Autowired\n    public SecurityConfiguration(UserService userService, JwtFilter jwtFilter) {\n        this.userService = userService;\n        this.jwtFilter = jwtFilter;\n    }\n\n    @Bean", "    public AuthenticationManager authenticationManager(HttpSecurity http, PasswordEncoder passwordEncoder, UserService userService)\n            throws Exception {\n        // TODO: and() is deprecated, replace in future\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\n                .userDetailsService(userService)\n                .passwordEncoder(passwordEncoder)\n                .and().build();\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.cors(Customizer.withDefaults())\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(\n                        a -> a.requestMatchers(\"/error\").anonymous()\n                                .anyRequest().permitAll()\n                )\n                .sessionManagement(\n                        s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                )\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n        return http.build();\n    }\n\n    @Bean", "    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.cors(Customizer.withDefaults())\n                .csrf(AbstractHttpConfigurer::disable)\n                .authorizeHttpRequests(\n                        a -> a.requestMatchers(\"/error\").anonymous()\n                                .anyRequest().permitAll()\n                )\n                .sessionManagement(\n                        s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                )\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n        return http.build();\n    }\n\n    @Bean", "    public PasswordEncoder getPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/configuration/CorsConfig.java", "chunked_list": ["package com.pecacm.backend.configuration;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig {\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override", "public class CorsConfig {\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\");\n            }\n        };\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/User.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.pecacm.backend.enums.Role;\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n", "import org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.List;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name = \"users\", schema = \"public\")\n@Builder\npublic class User implements UserDetails {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Integer id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name=\"email\", unique = true)\n    private String email;\n\n    @Column(name=\"password\")\n    private String password;\n\n    @Column(name=\"batch\")\n    private Integer batch;\n\n    @Column(name = \"branch\")\n    private String branch;\n\n    @Column(name=\"display_picture\")\n    private String dp;\n\n    @Column(name=\"student_id\", unique = true)\n    private Integer sid;\n\n    @Column(name = \"verified\")\n    private Boolean verified = false;\n\n    @Enumerated(EnumType.STRING)\n    private Role designation = Role.Member;\n\n    @Column(name=\"xp_total\", nullable = false)\n    private Integer xp = 0;\n\n    @Override\n    @JsonIgnore\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return List.of(new SimpleGrantedAuthority(\"ROLE_\" + designation.toString()));\n    }\n\n    @Override\n    @JsonIgnore", "    public String getUsername() {\n        return email;\n    }\n\n    @Override\n    @JsonIgnore\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    @JsonIgnore", "    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    @JsonIgnore\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    @JsonIgnore", "    public boolean isEnabled() {\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/VerificationToken.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.time.LocalDateTime;\nimport java.util.UUID;\n\n@Entity", "\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Table(name = \"verification_token\")\npublic class VerificationToken {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"token\")\n    private UUID token;\n\n    @ManyToOne\n    @JoinColumn(name = \"id\")\n    private User user;\n\n    @CreationTimestamp\n    @Column(name = \"created_date\")\n    private LocalDateTime createdDate;\n}\n", "public class VerificationToken {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"token\")\n    private UUID token;\n\n    @ManyToOne\n    @JoinColumn(name = \"id\")\n    private User user;\n\n    @CreationTimestamp\n    @Column(name = \"created_date\")\n    private LocalDateTime createdDate;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Transaction.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name=\"events\", schema = \"public\")\n@Builder\npublic class Transaction {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"event_id\")\n    private Event event;\n\n    @Column(name = \"role\")\n    private String role;\n\n    @Column(name = \"xp_awarded\")\n    private Integer xp;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Attendance.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name=\"attendance\", schema = \"public\")\n@Builder\npublic class Attendance {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name =  \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"eventId\")\n    private Event event;\n\n    @ManyToOne\n    @JoinColumn(name = \"userId\")\n    private User user;\n\n    @Column(name = \"role\")\n    // TODO: Change name\n    private String role;\n\n    @Column(name = \"status\")\n    private String status;\n\n    @Column(name = \"feedback\")\n    private String feedback;\n}"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Organiser.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name = \"organisers\", schema = \"public\")\n@Builder\npublic class Organiser {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"event_id\")\n    private Event event;\n\n    @Column(name = \"work_done\")\n    private String work;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Event.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.sql.Timestamp;\n\n@Entity\n@Getter\n@Setter", "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Table(name=\"events\", schema = \"public\")\n@Builder\npublic class Event {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"branch\")\n    private String branch;\n\n    @Column(name = \"date\")\n    private Timestamp date;\n\n    @Column(name=\"detail\", nullable = false)\n    private String detail;\n\n    @Column(name = \"attendance_sheet\")\n    private String attendance;\n\n    @Column(name = \"event_status\", nullable = false)\n    private String eventStatus;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/News.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name = \"news\", schema = \"public\")\n@Builder\npublic class News {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @Column(name = \"title\")\n    private String title;\n\n    @Column(name = \"description\")\n    private String description;\n\n    @Column(name = \"photo\")\n    private String photo;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Sponsor.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name=\"sponsors\", schema = \"public\")\n@Builder\npublic class Sponsor {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"website\")\n    private String website;\n\n    @Column(name = \"display_logo\")\n    private String logo;\n\n    @Column(name = \"sponsorship\")\n    private String sponsorship;\n}\n"]}
{"filename": "src/main/java/com/pecacm/backend/entities/Winner.java", "chunked_list": ["package com.pecacm.backend.entities;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Table(name=\"winners\", schema = \"public\")\n@Builder\npublic class Winner {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\", unique = true, nullable = false)\n    private Integer id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"event_id\")\n    private Event event;\n\n    @Column(name=\"position\")\n    private String position;\n\n    @Column(name=\"prize\")\n    private String prize;\n\n    @Column(name = \"description\")\n    private String description;\n\n    @Column(name = \"xp_awarded\")\n    private String xp;\n}\n"]}
