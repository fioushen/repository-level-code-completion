{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/Loader.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.BodyException;\nimport lombok.Getter;\nimport org.apache.commons.validator.routines.UrlValidator;\n\nimport java.lang.reflect.Array;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Loader {\n\n    @Getter\n    private static Loader instance;\n\n    public Loader() {\n        instance = this;\n    }\n", "import java.util.Set;\n\npublic class Loader {\n\n    @Getter\n    private static Loader instance;\n\n    public Loader() {\n        instance = this;\n    }\n", "    public Boolean isValidUrl(String url)\n    {\n        UrlValidator urlValidator = new UrlValidator();\n        return urlValidator.isValid(url);\n    }\n\n    public String quote(String string) {\n        return \"\\\"\" + string + \"\\\"\";\n    }\n\n    public String formatToJson(Set<Map.Entry<String, Object>> format) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"{\");\n\n        int i = 0;\n", "    public String formatToJson(Set<Map.Entry<String, Object>> format) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"{\");\n\n        int i = 0;\n\n        for (Map.Entry<String, Object> entry : format) {\n            Object value = entry.getValue();\n            builder.append(quote(entry.getKey())).append(\":\");\n", "            if (value instanceof String) {\n                builder.append(quote(String.valueOf(value)));\n            } else if (value instanceof Integer) {\n                builder.append(Integer.valueOf(String.valueOf(value)));\n            } else if (value instanceof Boolean) {\n                builder.append(value);\n            } else if (value.getClass().isArray()) {\n                builder.append(\"[\");\n\n                int len = Array.getLength(value);\n", "                for (int j = 0; j < len; j++) {\n                    builder.append(Array.get(value, j).toString()).append(j != len - 1 ? \",\" : \"\");\n                }\n\n                builder.append(\"]\");\n            } else {\n                throw new BodyException((Throwable) value);\n            }\n\n            builder.append(++i == format.size() ? \"}\" : \",\");\n        }\n\n        return builder.toString();\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/WebHook.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord;\n\nimport com.ialdrich23xx.libasynwebhook.api.Loader;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.Base;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.BodyException;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.util.concurrent.CompletableFuture;", "import java.net.URL;\nimport java.util.concurrent.CompletableFuture;\n\npublic class WebHook {\n\n    private final String url;\n    private Base body;\n\n    public WebHook(String url, Base body) {\n        this.url = url;\n        this.body = body;\n    }\n", "    public static WebHook make(String url, Base body) {\n        return new WebHook(url, body);\n    }\n\n    public String getUrl() {\n        return this.url;\n    }\n\n    public Base getBody() {\n        return this.body;\n    }\n", "    public Base getBody() {\n        return this.body;\n    }\n\n    public WebHook setBody(Base body) {\n        this.body = body;\n\n        return this;\n    }\n\n    public void send() {", "    public void send() {\n        if (this.getBody() == null) throw new BodyException(\"Body of webhook is null\");\n\n        if (Loader.getInstance().isValidUrl(this.getUrl()) && this.getBody().build()) {\n            CompletableFuture.runAsync(() -> {\n                try {\n                    URL url = new URL(this.url);\n                    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n\n                    connection.addRequestProperty(\"Content-Type\", \"application/json\");\n                    connection.addRequestProperty(\"User-Agent\", \"CloverCube\");\n                    connection.setDoOutput(true);\n                    connection.setRequestMethod(\"POST\");\n\n                    OutputStream stream = connection.getOutputStream();\n                    stream.write(this.getBody().toJson().getBytes());\n                    stream.flush();\n                    stream.close();\n\n                    connection.getInputStream().close(); //I'm not sure why, but it doesn't work without getting the InputStream\n\n                    connection.disconnect();\n                } catch (Exception e) {\n                    System.out.println(e.getMessage());\n                }\n            });\n        } else throw new BodyException(\"Url not valid: \" + this.getUrl());\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/Base.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body;\n\nimport com.ialdrich23xx.libasynwebhook.api.Loader;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.EmbedManager;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\n\nimport java.util.*;\n\npublic class Base extends Structure {\n\n    private String content = null;\n    private String username = null;\n    private String avatar = null;\n    private Boolean textToSpeech = false;\n    private String threadName = null;\n\n    private List<EmbedManager> embeds = new ArrayList<>();\n\n    public Base() {}\n", "public class Base extends Structure {\n\n    private String content = null;\n    private String username = null;\n    private String avatar = null;\n    private Boolean textToSpeech = false;\n    private String threadName = null;\n\n    private List<EmbedManager> embeds = new ArrayList<>();\n\n    public Base() {}\n", "    public static Base make() {\n        return new Base();\n    }\n\n    public Base setContent(String content) {\n        this.content = content;\n\n        return this;\n    }\n\n    public String getContent() {\n        return this.content;\n    }\n", "    public String getContent() {\n        return this.content;\n    }\n\n    public Base setUsername(String username) {\n        this.username = username;\n\n        return this;\n    }\n\n    public String getUsername() {\n        return this.username;\n    }\n", "    public String getUsername() {\n        return this.username;\n    }\n\n    public Base setAvatar(String avatar) {\n        this.avatar = avatar;\n\n        return this;\n    }\n\n    public String getAvatar() {\n        return this.avatar;\n    }\n", "    public String getAvatar() {\n        return this.avatar;\n    }\n\n    public Base setTextToSpeech(Boolean textToSpeech) {\n        this.textToSpeech = textToSpeech;\n\n        return this;\n    }\n\n    public Boolean isTextToSpeech() {\n        return this.textToSpeech;\n    }\n", "    public Boolean isTextToSpeech() {\n        return this.textToSpeech;\n    }\n\n    public Base addEmbed(EmbedManager embed) {\n        this.embeds.add(embed);\n\n        return this;\n    }\n\n    public Base resetEmbeds() {\n        this.embeds = new ArrayList<>();\n\n        return this;\n    }\n\n    public List<EmbedManager> getEmbeds() {\n        return this.embeds;\n    }\n", "    public Base resetEmbeds() {\n        this.embeds = new ArrayList<>();\n\n        return this;\n    }\n\n    public List<EmbedManager> getEmbeds() {\n        return this.embeds;\n    }\n\n    public Base setForumTitle(String forumTitle) {\n        this.threadName = forumTitle;\n\n        return this;\n    }\n", "    public Base setForumTitle(String forumTitle) {\n        this.threadName = forumTitle;\n\n        return this;\n    }\n\n    public String getForumTitle()\n    {\n        return this.threadName;\n    }\n", "    public Boolean isForum()\n    {\n        return this.threadName != null;\n    }\n\n    @Override\n    public Boolean build() {\n        if (this.getAvatar() != null && !Loader.getInstance().isValidUrl(this.getAvatar())) return false;\n        if (this.getContent() == null && this.getEmbeds().isEmpty()) return false;\n        if (this.getContent() != null && this.getContent().length() == 0) return false;\n\n        return true;\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"tts\", this.isTextToSpeech());\n", "        if (this.getContent() == null && this.getEmbeds().isEmpty()) return false;\n        if (this.getContent() != null && this.getContent().length() == 0) return false;\n\n        return true;\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"tts\", this.isTextToSpeech());\n", "        if (this.getContent() != null) result.put(\"content\", this.getContent());\n        if (this.getUsername() != null) result.put(\"username\", this.getUsername());\n        if (this.getAvatar() != null) result.put(\"avatar_url\", this.getAvatar());\n\n        List<Object> embedList = new ArrayList<>();\n\n        this.getEmbeds().forEach(embed -> embedList.add(Loader.getInstance().formatToJson(embed.toArray().entrySet())));\n\n        if (!embedList.isEmpty()) {\n            result.put(\"embeds\", embedList.toArray());\n        }\n", "        if (!embedList.isEmpty()) {\n            result.put(\"embeds\", embedList.toArray());\n        }\n\n        if (this.isForum()) result.put(\"thread_name\", this.getForumTitle());\n\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Base(content=\" + this.getContent() + \",username=\" + this.getUsername() + \",avatar=\" + this.getAvatar() +\n        \";embeds=Array(\" + this.getEmbeds().size() + \")\";\n    }\n", "    public String toString() {\n        return \"Base(content=\" + this.getContent() + \",username=\" + this.getUsername() + \",avatar=\" + this.getAvatar() +\n        \";embeds=Array(\" + this.getEmbeds().size() + \")\";\n    }\n\n    public String toJson() {\n        return Loader.getInstance().formatToJson(this.toArray().entrySet());\n    }\n\n    private String quote(String string) {\n        return \"\\\"\" + string + \"\\\"\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/EmbedManager.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed;\n\nimport com.ialdrich23xx.libasynwebhook.api.Loader;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.BodyException;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;", "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class EmbedManager extends Structure {\n\n    private String title;\n    private String description;\n    private Integer color;\n\n    private Author author = null;\n    private List<Field> fields = new ArrayList<>();\n    private Footer footer = null;\n    private Thumbnail thumbnail = null;\n    private Image image = null;\n    private Timestamp timestamp = null;\n\n    public EmbedManager(String title, String description, Integer color) {\n        this.title = title;\n        this.description = description;\n        this.color = color;\n    }\n", "    public static EmbedManager make(String title, String description, Integer color) {\n        return new EmbedManager(title, description, color);\n    }\n\n    public static EmbedManager make(String title, String description) {\n        return new EmbedManager(title, description, EmbedColors.Default);\n    }\n\n    public EmbedManager setTitle(String title) {\n        this.title = title;\n\n        return this;\n    }\n", "    public EmbedManager setTitle(String title) {\n        this.title = title;\n\n        return this;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public EmbedManager setDescription(String description) {\n        this.description = description;\n\n        return this;\n    }\n", "    public EmbedManager setDescription(String description) {\n        this.description = description;\n\n        return this;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public EmbedManager setColor(Integer color) {\n        this.color = color;\n\n        return this;\n    }\n", "    public EmbedManager setColor(Integer color) {\n        this.color = color;\n\n        return this;\n    }\n\n    public Integer getColor() {\n        return this.color;\n    }\n\n    public EmbedManager setAuthor(Author author) {", "    public EmbedManager setAuthor(Author author) {\n        if (!author.build()) {\n            throw new BodyException( \"Author is invalid: \" + author);\n        } else this.author = author;\n\n        return this;\n    }\n\n    public EmbedManager removeAuthor() {\n        this.author = null;\n\n        return this;\n    }\n", "    public EmbedManager removeAuthor() {\n        this.author = null;\n\n        return this;\n    }\n\n    public Author getAuthor() {\n        return this.author;\n    }\n\n    public EmbedManager addField(Field field) {", "    public EmbedManager addField(Field field) {\n        if (!field.build()) {\n            throw new BodyException(\"Field is invalid: \" + field);\n        } else this.fields.add(field);\n\n        return this;\n    }\n\n    public EmbedManager resetFields() {\n        this.fields = new ArrayList<>();\n\n        return this;\n    }\n\n    public List<Field> getFields()\n    {\n        return this.fields;\n    }\n", "    public EmbedManager resetFields() {\n        this.fields = new ArrayList<>();\n\n        return this;\n    }\n\n    public List<Field> getFields()\n    {\n        return this.fields;\n    }\n", "    public EmbedManager setFooter(Footer footer) {\n        if (!footer.build()) {\n            throw new BodyException(\"Footer is invalid: \" + footer);\n        } else this.footer = footer;\n\n        return this;\n    }\n\n    public EmbedManager removeFooter() {\n        this.footer = null;\n\n        return this;\n    }\n", "    public EmbedManager removeFooter() {\n        this.footer = null;\n\n        return this;\n    }\n\n    public Footer getFooter() {\n        return this.footer;\n    }\n\n    public EmbedManager setThumbnail(Thumbnail thumbnail) {", "    public EmbedManager setThumbnail(Thumbnail thumbnail) {\n        if (!thumbnail.build()) {\n            throw new BodyException(\"Thumbnail is invalid: \" + thumbnail);\n        } else this.thumbnail = thumbnail;\n\n        return this;\n    }\n\n    public EmbedManager removeThumbnail() {\n        this.thumbnail = null;\n\n        return this;\n    }\n", "    public EmbedManager removeThumbnail() {\n        this.thumbnail = null;\n\n        return this;\n    }\n\n    public Thumbnail getThumbnail() {\n        return this.thumbnail;\n    }\n\n    public EmbedManager setImage(Image image) {", "    public EmbedManager setImage(Image image) {\n        if (!image.build()) {\n            throw new BodyException(\"Image is invalid: \" + image);\n        } else this.image = image;\n\n        return this;\n    }\n\n    public EmbedManager removeImage() {\n        this.image = null;\n\n        return this;\n    }\n", "    public EmbedManager removeImage() {\n        this.image = null;\n\n        return this;\n    }\n\n    public Image getImage() {\n        return this.image;\n    }\n\n    public EmbedManager setTimestamp(Timestamp timestamp) {", "    public EmbedManager setTimestamp(Timestamp timestamp) {\n        if (!timestamp.build()) {\n            throw new BodyException(\"Image is invalid: \" + timestamp);\n        } else this.timestamp = timestamp;\n\n        return this;\n    }\n\n    public EmbedManager removeTimestamp() {\n        this.timestamp = null;\n\n        return this;\n    }\n", "    public EmbedManager removeTimestamp() {\n        this.timestamp = null;\n\n        return this;\n    }\n\n    public Timestamp getTimestamp() {\n        return this.timestamp;\n    }\n\n    @Override", "    public Boolean build() {\n        return !this.getTitle().isEmpty() && !this.getDescription().isEmpty() || !this.getFields().isEmpty();\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"title\", this.getTitle());\n        result.put(\"description\", this.getDescription());\n        result.put(\"color\", this.getColor());\n", "        if (this.getAuthor() != null) result.put(\"author\", this.getAuthor().toArray());\n        if (this.getFooter() != null) result.put(\"footer\", this.getFooter().toArray());\n        if (this.getThumbnail() != null) result.put(\"thumbnail\", this.getThumbnail().toArray());\n        if (this.getImage() != null) result.put(\"image\", this.getImage().toArray());\n        if (this.getTimestamp() != null) result.put(\"timestamp\", this.getTimestamp().getFormat().format(this.getTimestamp().getDate()));\n\n        List<Object> fieldList = new ArrayList<>();\n\n        this.getFields().forEach(field -> fieldList.add(Loader.getInstance().formatToJson(field.toArray().entrySet())));\n\n        if (!fieldList.isEmpty()) {\n            result.put(\"fields\", fieldList.toArray());\n        }\n\n        return result;\n    }\n\n    @Override", "        if (!fieldList.isEmpty()) {\n            result.put(\"fields\", fieldList.toArray());\n        }\n\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return null;\n    }\n}\n", "    public String toString() {\n        return null;\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/EmbedColors.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed;\n\npublic @interface EmbedColors {\n\n    Integer Default = 0,\n            Aqua = 1752220,    //#1ABC9C\n            DarkAqua = 1146986, //#11806A\n            Green = 5763719, //#57F287\n            DarkGreen = 2067276, //#1F8B4C\n            Blue = 3447003, //#3498DB", "            DarkGreen = 2067276, //#1F8B4C\n            Blue = 3447003, //#3498DB\n            DarkBlue = 2123412, //#206694\n            Purple = 10181046, //#9B59B6\n            DarkPurple = 7419530, //#71368A\n            LuminousVividPink = 15277667, //#E91E63\n            DarkVividPink = 11342935, //#AD1457\n            Gold = 15844367, //#F1C40F\n            DarkGold = 12745742,//#C27C0E\n            Orange = 15105570, //#E67E22", "            DarkGold = 12745742,//#C27C0E\n            Orange = 15105570, //#E67E22\n            DarkOrange = 11027200, //#A84300\n            Red = 15548997, //#ED4245\n            DarkRed = 10038562, //#992D22\n            Grey = 9807270, //#95A5A6\n            DarkGrey = 9936031, //#979C9F\n            DarkerGrey = 8359053, //#7F8C8D\n            LightGrey = 12370112, //#BCC0C0\n            Navy = 3426654, //#34495E", "            LightGrey = 12370112, //#BCC0C0\n            Navy = 3426654, //#34495E\n            DarkNavy = 2899536, //#2C3E50\n            Yellow = 16776960;    //#FFFF00\n}"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Author.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.IconURL;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Name;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.URL;\n\nimport java.util.Map;\n\npublic class Author extends Structure implements Name, URL, IconURL {\n\n    public Author(String name) {\n        this.setName(name);\n    }\n", "\npublic class Author extends Structure implements Name, URL, IconURL {\n\n    public Author(String name) {\n        this.setName(name);\n    }\n\n    public static Author make(String name) {\n        return new Author(name);\n    }\n\n    @Override", "    public Boolean build() {\n        if (this.getName().isEmpty()) return false;\n\n        if (!this.getUrl().isEmpty() && !this.urlBuild()) return false;\n        if (!this.getIcon().isEmpty() && !this.iconBuild()) return false;\n\n        return true;\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = this.nameToArray();\n", "        if (!this.getUrl().isEmpty()) result.putAll(this.urlToArray());\n        if (!this.getIcon().isEmpty()) result.putAll(this.iconToArray());\n\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Author(\" + this.nameToString() + \",\" + this.urlToString() + \",\" + this.iconToString() + \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Image.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.URL;\n\nimport java.util.Map;\n\npublic class Image extends Structure implements URL {\n\n    public Image(String url) {\n        this.setUrl(url);\n    }\n", "    public static Image make(String url) {\n        return new Image(url);\n    }\n\n    @Override\n    public Boolean build() {\n        return this.urlBuild();\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        return this.urlToArray();\n    }\n\n    @Override", "    public String toString() {\n        return \"Image(\" + this.urlToString() +  \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Footer.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.IconURL;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Footer extends Structure implements IconURL {\n\n    private String text;\n\n    public Footer(String text) {\n        this.text = text;\n    }\n", "public class Footer extends Structure implements IconURL {\n\n    private String text;\n\n    public Footer(String text) {\n        this.text = text;\n    }\n\n    public static Footer make(String text) {\n        return new Footer(text);\n    }\n", "    public static Footer make(String text) {\n        return new Footer(text);\n    }\n\n    public Footer setText(String text)\n    {\n        this.text = text;\n\n        return this;\n    }\n", "    public String getText()\n    {\n        return this.text;\n    }\n\n    @Override\n    public Boolean build() {\n        if (this.getText().isEmpty()) return false;\n        if (!this.getIcon().isEmpty() && !this.iconBuild()) return false;\n\n        return true;\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"text\", this.getText());\n", "        if (!this.getIcon().isEmpty() && !this.iconBuild()) return false;\n\n        return true;\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"text\", this.getText());\n", "        if (!this.getIcon().isEmpty()) result.putAll(this.iconToArray());\n\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Footer(text=\" + this.getText() + \",\" + this.iconToString() + \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Field.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Name;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\n\nimport java.util.Map;\n\npublic class Field extends Structure implements Name {\n\n    private String value;\n    private Boolean inline;\n\n    public Field(String name, String value, Boolean inline) {\n        this.setName(name);\n        this.value = value;\n        this.inline = inline;\n    }\n", "    public static Field make(String name, String value, Boolean inline) {\n        return new Field(name, value, inline);\n    }\n\n    public static Field make(String name, String value) {\n        return new Field(name, value, false);\n    }\n\n    public Field setValue(String value)\n    {\n        this.value = value;\n\n        return this;\n    }\n", "    public Field setValue(String value)\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    public String getValue()\n    {\n        return this.value;\n    }\n", "    public Field setInline(Boolean inLine)\n    {\n        this.inline = inLine;\n\n        return this;\n    }\n\n    public Boolean getInline()\n    {\n        return this.inline;\n    }\n\n    @Override", "    public Boolean build() {\n        return !this.getValue().isEmpty() && !this.getName().isEmpty();\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        Map<String, Object> result = this.nameToArray();\n\n        result.put(\"value\", this.getName());\n        result.put(\"inline\", this.getInline());\n\n        return result;\n    }\n\n    @Override", "    public String toString() {\n        return \"Field(\" + this.nameToString() + \",value=\" + this.getValue() + \",inline=\" + this.getInline().toString() + \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Timestamp.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\n\nimport java.time.OffsetDateTime;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Timestamp extends Structure {\n\n    private DateTimeFormatter date;\n    private OffsetDateTime format;\n\n    public Timestamp(DateTimeFormatter date, OffsetDateTime format) {\n        this.date = date;\n        this.format = format;\n    }\n", "import java.util.Map;\n\npublic class Timestamp extends Structure {\n\n    private DateTimeFormatter date;\n    private OffsetDateTime format;\n\n    public Timestamp(DateTimeFormatter date, OffsetDateTime format) {\n        this.date = date;\n        this.format = format;\n    }\n", "    public static Timestamp make(DateTimeFormatter date, OffsetDateTime format) {\n        return new Timestamp(date, format);\n    }\n\n    public static Timestamp make(DateTimeFormatter date) {\n        return new Timestamp(date, OffsetDateTime.now(ZoneId.of(\"UTC\")));\n    }\n\n    public Timestamp setFormat(OffsetDateTime format) {\n        this.format = format;\n\n        return this;\n    }\n", "    public Timestamp setFormat(OffsetDateTime format) {\n        this.format = format;\n\n        return this;\n    }\n\n    public OffsetDateTime getFormat() {\n        return this.format;\n    }\n\n    public DateTimeFormatter getDate() {\n        return this.date;\n    }\n\n    @Override", "    public DateTimeFormatter getDate() {\n        return this.date;\n    }\n\n    @Override\n    public Boolean build() {\n        return date != null;\n    }\n\n    /**\n     * @no-require\n     */\n    @Override\n    public Map<String, Object> toArray() {\n        return new HashMap<>();\n    }\n\n    @Override", "    public String toString() {\n        return \"Timestamp(data=\" + this.getFormat().format(this.getDate()) + \",timezone=\" + this.getFormat().toString() + \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/components/Thumbnail.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.components;\n\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.Structure;\nimport com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base.URL;\n\nimport java.util.Map;\n\npublic class Thumbnail extends Structure implements URL {\n\n    public Thumbnail(String url) {\n        this.setUrl(url);\n    }\n", "    public static Thumbnail make(String url) {\n        return new Thumbnail(url);\n    }\n\n    @Override\n    public Boolean build() {\n        return this.urlBuild();\n    }\n\n    @Override\n    public Map<String, Object> toArray() {\n        return this.urlToArray();\n    }\n\n    @Override", "    public String toString() {\n        return \"Thumbnail(\" + this.urlToString() +  \")\";\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/base/Structure.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base;\n\nimport com.ialdrich23xx.libasynwebhook.api.Loader;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic abstract class Structure {\n\n    private String name = \"\";\n    private String url = \"\";\n    private String icon = \"\";\n", "    abstract public Boolean build();\n    abstract public Map<String, Object> toArray();\n    abstract public String toString();\n\n    public Structure setName(String newName) {\n        if (!(this instanceof Name)) {\n            throw new BodyException(\"Error this class not implements name\");\n        } else {\n            this.name = newName;\n        }\n\n        return this;\n    }\n", "    public String getName() {\n        if (!(this instanceof Name)) throw new BodyException(\"Error this class not implements name\");\n\n        return this.name;\n    }\n\n    public Map<String, Object> nameToArray() {\n        if (!(this instanceof Name)) throw new BodyException(\"Error this class not implements name\");\n\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"name\", this.getName());\n\n        return result;\n    }\n", "    public String nameToString() {\n        if (!(this instanceof Name)) throw new BodyException(\"Error this class not implements name\");\n\n        return \"name=\" + this.getName();\n    }\n\n    public Structure setUrl(String newUrl) {\n        if (!(this instanceof URL)) {\n            throw new BodyException(\"Error this class not implements URL\");\n        } else {\n            this.url = newUrl;\n        }\n\n        return this;\n    }\n", "    public String getUrl() {\n        if (!(this instanceof URL)) throw new BodyException(\"Error this class not implements URL\");\n\n        return this.url;\n    }\n\n    public Boolean urlBuild() {\n        if (this.getUrl().isEmpty()) return false;\n\n        return Loader.getInstance().isValidUrl(this.getUrl());\n    }\n\n    public Map<String, Object> urlToArray() {", "        if (!(this instanceof URL)) throw new BodyException(\"Error this class not implements URL\");\n\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"url\", this.getUrl());\n\n        return result;\n    }\n\n    public String urlToString() {\n        if (!(this instanceof URL)) throw new BodyException(\"Error this class not implements URL\");\n\n        return \"url=\" + this.getUrl();\n    }\n", "    public String urlToString() {\n        if (!(this instanceof URL)) throw new BodyException(\"Error this class not implements URL\");\n\n        return \"url=\" + this.getUrl();\n    }\n\n    public Structure setIcon(String newIcon) {\n        if (!(this instanceof IconURL)) {\n            throw new BodyException(\"Error this class not implements IconURL\");\n        } else {\n            this.icon = newIcon;\n        }\n\n        return this;\n    }\n", "    public Boolean iconBuild() {\n        if (this.getIcon().isEmpty()) return false;\n\n        return Loader.getInstance().isValidUrl(this.getIcon());\n    }\n\n    public String getIcon() {\n        if (!(this instanceof IconURL)) throw new BodyException(\"Error this class not implements IconURL\");\n\n        return this.icon;\n    }\n\n    public Map<String, Object> iconToArray() {", "        if (!(this instanceof IconURL)) throw new BodyException(\"Error this class not implements IconURL\");\n\n        Map<String, Object> result = new HashMap<>();\n\n        result.put(\"icon_url\", this.getIcon());\n\n        return result;\n    }\n\n    public String iconToString() {\n        if (!(this instanceof IconURL)) throw new BodyException(\"Error this class not implements IconURL\");\n\n        return \"icon=\" + this.getIcon();\n    }\n}\n", "    public String iconToString() {\n        if (!(this instanceof IconURL)) throw new BodyException(\"Error this class not implements IconURL\");\n\n        return \"icon=\" + this.getIcon();\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/base/IconURL.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base;\n\nimport java.util.Map;\n\npublic interface IconURL {\n    Structure setIcon(String icon);\n    String getIcon();\n    Boolean iconBuild();\n    Map<String, Object> iconToArray();\n    String iconToString();\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/base/URL.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base;\n\nimport java.util.Map;\n\npublic interface URL {\n    Structure setUrl(String url);\n    String getUrl();\n    Boolean urlBuild();\n    Map<String, Object> urlToArray();\n    String urlToString();\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/base/BodyException.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base;\n\npublic class BodyException extends RuntimeException\n{\n    private final Throwable cause;\n\n    public BodyException(Throwable throwable)\n    {\n        this.cause = throwable;\n    }\n\n    public BodyException()\n    {\n        this.cause = null;\n    }\n\n    public BodyException(Throwable cause, String message)\n    {\n        super(message);\n        this.cause = cause;\n    }\n\n    public BodyException(String message)\n    {\n        super(message);\n        this.cause = null;\n    }\n}\n"]}
{"filename": "libasynDiscordWebHook-API/src/main/java/com/ialdrich23xx/libasynwebhook/api/discord/body/embed/base/Name.java", "chunked_list": ["package com.ialdrich23xx.libasynwebhook.api.discord.body.embed.base;\n\nimport java.util.Map;\n\npublic interface Name {\n    String getName();\n    Structure setName(String newName);\n    Map<String, Object> nameToArray();\n    String nameToString();\n}\n"]}
