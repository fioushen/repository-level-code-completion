{"filename": "src/main/java/top/sssd/ddns/DynamicDnsApplication.java", "chunked_list": ["package top.sssd.ddns;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author sssd\n * @careate 2023-03-19-1:24\n */", " * @careate 2023-03-19-1:24\n */\n@MapperScan(\"top.sssd.ddns.mapper\")\n@SpringBootApplication\npublic class DynamicDnsApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DynamicDnsApplication.class);\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/task/DynamicDnsJob.java", "chunked_list": ["package top.sssd.ddns.task;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.quartz.Job;\nimport org.quartz.JobExecutionContext;\nimport top.sssd.ddns.factory.DynamicDnsServiceFactory;\nimport top.sssd.ddns.handler.LogWebSocketHandler;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.service.IParsingRecordService;", "import top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.service.IParsingRecordService;\n\nimport javax.annotation.Resource;\n\n/**\n * @author sssd\n * @careate 2023-05-02-11:51\n */\n@Slf4j\npublic class DynamicDnsJob implements Job {\n\n\n    @Resource\n    private IParsingRecordService parsingRecordService;\n\n    @Resource\n    private LogWebSocketHandler logWebSocketHandler;\n\n    @Override", " */\n@Slf4j\npublic class DynamicDnsJob implements Job {\n\n\n    @Resource\n    private IParsingRecordService parsingRecordService;\n\n    @Resource\n    private LogWebSocketHandler logWebSocketHandler;\n\n    @Override", "    public void execute(JobExecutionContext context) {\n        Object executeParams = context.getJobDetail().getJobDataMap().get(\"executeParams\");\n        ParsingRecord parsingRecord = (ParsingRecord) executeParams;\n\n        DynamicDnsService dynamicDnsService = DynamicDnsServiceFactory.getServiceInstance(parsingRecord.getServiceProvider());\n        String dnsIp   = null;\n        try {\n            dnsIp = dynamicDnsService.getIpBySubDomainWithType(parsingRecord);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        String nowIp = parsingRecordService.getIp(parsingRecord);", "        if(nowIp.equals(dnsIp)){\n            log.info(\"\u57df\u540d\u4e3a:{}\u7684\u8bb0\u5f55,\u57df\u540d\u670d\u52a1\u5546\u4e2d\u7684ip:{}\u4e0e\u73b0\u5728\u7684ip:{},\u672a\u53d1\u751f\u6539\u53d8\",parsingRecord.getDomain(),dnsIp,nowIp);\n            logWebSocketHandler.sendToAllSessions(String.format(\"\u57df\u540d\u4e3a:%s\u7684\u8bb0\u5f55,\u57df\u540d\u670d\u52a1\u5546\u4e2d\u7684ip:%s\u4e0e\u73b0\u5728\u7684ip:%s,\u672a\u53d1\u751f\u6539\u53d8\",parsingRecord.getDomain(),dnsIp,nowIp));\n            return;\n        }\n        try {\n            parsingRecordService.modify(parsingRecord);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        log.info(\"\u57df\u540d\u4e3a:{}\u7684\u8bb0\u5f55,\u5df2\u5c06\u57df\u540d\u670d\u52a1\u5546\u4e2d\u7684ip:{},\u4fee\u6539\u4e3a\u73b0\u5728\u7684ip:{},\u66f4\u65b0\u6210\u529f\",parsingRecord.getDomain(),dnsIp,nowIp);\n        logWebSocketHandler.sendToAllSessions(String.format(\"\u57df\u540d\u4e3a:%s\u7684\u8bb0\u5f55,\u5df2\u5c06\u57df\u540d\u670d\u52a1\u5546\u4e2d\u7684ip:%s,\u4fee\u6539\u4e3a\u73b0\u5728\u7684ip:%s,\u66f4\u65b0\u6210\u529f\",parsingRecord.getDomain(),dnsIp,nowIp));\n    }\n\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/utils/CloudflareUtils.java", "chunked_list": ["package top.sssd.ddns.utils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\nimport org.springframework.http.*;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author sssd\n * @careate 2023-08-08-10:57\n */\n\npublic class CloudflareUtils {\n    private CloudflareUtils() {\n    }\n\n    @Data", "\npublic class CloudflareUtils {\n    private CloudflareUtils() {\n    }\n\n    @Data\n    public static class CloudflareQueryResponse {\n        private List<Map> errors;\n        private List<Map> messages;\n        private Boolean success;\n        private List<SimpleContent> result;\n    }\n\n    @Data", "    public static class CloudflareResponse {\n        private List<Map> errors;\n        private List<Map> messages;\n        private Boolean success;\n        private SimpleContent result;\n    }\n\n    @Data\n    @Accessors(chain = true)\n    public static class SimpleContent {\n        private String name;\n        private Boolean proxied = true;\n        private String content;\n        private String type;\n        private String id;\n        private Boolean locked;\n        private Map meta;\n        private List<String> tags;\n    }\n\n    private static RestTemplate restTemplate = new RestTemplate();\n\n    private static final String baseUrl = \"https://api.cloudflare.com/client/v4/zones/\";\n\n    private static final String authHeader = \"Authorization\";\n\n    private static final String bearer = \"Bearer\";\n\n\n    /**\n     * \u6839\u636e\u5b50\u57df\u540d\u548c\u89e3\u6790\u7c7b\u578b\u67e5\u8be2\u57df\u540d\u5217\u8868\n     *\n     * @param zoneId          \u533a\u57dfID\n     * @param accessKeySecret API_TOKEN\n     * @param subDomain       \u5b50\u57df\u540d\n     * @param recordType      \u89e3\u6790\u7c7b\u578b\n     * @return\n     */", "    public static class SimpleContent {\n        private String name;\n        private Boolean proxied = true;\n        private String content;\n        private String type;\n        private String id;\n        private Boolean locked;\n        private Map meta;\n        private List<String> tags;\n    }\n\n    private static RestTemplate restTemplate = new RestTemplate();\n\n    private static final String baseUrl = \"https://api.cloudflare.com/client/v4/zones/\";\n\n    private static final String authHeader = \"Authorization\";\n\n    private static final String bearer = \"Bearer\";\n\n\n    /**\n     * \u6839\u636e\u5b50\u57df\u540d\u548c\u89e3\u6790\u7c7b\u578b\u67e5\u8be2\u57df\u540d\u5217\u8868\n     *\n     * @param zoneId          \u533a\u57dfID\n     * @param accessKeySecret API_TOKEN\n     * @param subDomain       \u5b50\u57df\u540d\n     * @param recordType      \u89e3\u6790\u7c7b\u578b\n     * @return\n     */", "    public static CloudflareQueryResponse getSubDomainParseList(String zoneId, String accessKeySecret, String subDomain, String recordType) {\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u5305\u62ecAuthorization\u548cContent-Type\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(authHeader, bearer + \" \" + accessKeySecret);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // \u6784\u5efaURI\u53c2\u6570\n        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUrl)\n                .path(zoneId + \"/dns_records\")\n                .queryParam(\"type\", recordType)\n                .queryParam(\"name\", subDomain);\n        // \u6784\u5efaRequestEntity\n        RequestEntity<?> requestEntity = new RequestEntity<>(headers, HttpMethod.GET, builder.build().toUri());\n        //\u53d1\u9001\u8bf7\u6c42\n        ResponseEntity<CloudflareQueryResponse> response = restTemplate.exchange(requestEntity, CloudflareQueryResponse.class);\n        return response.getBody();\n    }\n", "    public static CloudflareQueryResponse getSubDomainParseList(String zoneId, String accessKeySecret, String subDomain, String recordType, String ip) {\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u5305\u62ecAuthorization\u548cContent-Type\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(authHeader, bearer + \" \" + accessKeySecret);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // \u6784\u5efaURI\u53c2\u6570\n        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUrl)\n                .path(zoneId + \"/dns_records\")\n                .queryParam(\"type\", recordType)\n                .queryParam(\"name\", subDomain)\n                .queryParam(\"content\", ip);\n        // \u6784\u5efaRequestEntity\n        RequestEntity<?> requestEntity = new RequestEntity<>(headers, HttpMethod.GET, builder.build().toUri());\n        //\u53d1\u9001\u8bf7\u6c42\n        ResponseEntity<CloudflareQueryResponse> response = restTemplate.exchange(requestEntity, CloudflareQueryResponse.class);\n        return response.getBody();\n    }\n\n\n    /**\n     * @param zoneId          \u533a\u57dfID\n     * @param accessKeySecret API_TOKEN\n     * @param domain          \u5b50\u57df\u540d\n     * @param recordType      \u89e3\u6790\u7c7b\u578b\n     * @param ip              \u89e3\u6790IP\n     * @return\n     * @throws JsonProcessingException\n     */", "    public static CloudflareResponse add(String zoneId, String accessKeySecret, String domain, String recordType, String ip) throws JsonProcessingException {\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u5305\u62ecAuthorization\u548cContent-Type\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(authHeader, bearer + \" \" + accessKeySecret);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // \u6784\u5efaURI\u53c2\u6570\n        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUrl).path(zoneId + \"/dns_records\");\n\n        SimpleContent simpleContent = new SimpleContent().setType(recordType).setName(domain).setContent(ip);\n        // \u6784\u5efaRequestEntity\n        RequestEntity<SimpleContent> requestEntity = new RequestEntity<>(simpleContent, headers, HttpMethod.POST, builder.build().toUri());\n        //\u53d1\u9001\u8bf7\u6c42\n        ResponseEntity<CloudflareResponse> response = restTemplate.exchange(requestEntity, CloudflareResponse.class);\n        return response.getBody();\n    }\n\n    /**\n     * \u83b7\u53d6\u8bb0\u5f55ID\n     *\n     * @param zoneId\n     * @param accessKeySecret\n     * @param subDomain\n     * @param recordType\n     * @return\n     */", "    public static String getId(String zoneId, String accessKeySecret, String subDomain, String recordType, String ip) {\n        CloudflareQueryResponse response = getSubDomainParseList(zoneId, accessKeySecret, subDomain, recordType, ip);\n        return response.getResult().get(0).getId();\n    }\n\n\n    /**\n     * @param zoneId\n     * @param accessKeySecret\n     * @param subDomain\n     * @param recordType\n     * @return\n     */", "    public static String getIpBySubDomainWithType(String zoneId, String accessKeySecret, String subDomain, String recordType) {\n        CloudflareQueryResponse cloudflareResponse = getSubDomainParseList(zoneId, accessKeySecret, subDomain, recordType);\n        return cloudflareResponse.getResult().get(0).getContent();\n    }\n\n    /**\n     * \u5220\u9664\u8bb0\u5f55\n     *\n     * @param zoneId\n     * @param accessKeySecret\n     * @param domain\n     * @param recordType\n     * @return\n     */", "    public static CloudflareResponse delete(String zoneId, String accessKeySecret, String domain, String recordType,String ip) {\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u5305\u62ecAuthorization\u548cContent-Type\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(authHeader, bearer + \" \" + accessKeySecret);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // \u6784\u5efaURI\u53c2\u6570\n        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUrl)\n                .path(zoneId + \"/dns_records\")\n                .path(\"/\" + getId(zoneId, accessKeySecret, domain, recordType,ip));\n\n        // \u6784\u5efaRequestEntity\n        RequestEntity<?> requestEntity = new RequestEntity<>(headers, HttpMethod.DELETE, builder.build().toUri());\n        //\u53d1\u9001\u8bf7\u6c42\n        ResponseEntity<CloudflareResponse> response = restTemplate.exchange(requestEntity, CloudflareResponse.class);\n        return response.getBody();\n    }\n\n\n    /**\n     * \u66f4\u65b0\u8bb0\u5f55\n     *\n     * @param zoneId\n     * @param accessKeySecret\n     * @param domain\n     * @param recordType\n     * @param ip\n     * @return\n     */", "    public static CloudflareResponse update(String zoneId, String accessKeySecret, String domain, String recordType, String ip,String recordId) {\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u5305\u62ecAuthorization\u548cContent-Type\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(authHeader, bearer + \" \" + accessKeySecret);\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // \u6784\u5efaURI\u53c2\u6570\n        UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(baseUrl)\n                .path(zoneId + \"/dns_records\")\n                .path(\"/\" + recordId);\n\n        SimpleContent simpleContent = new SimpleContent().setType(recordType).setName(domain).setContent(ip);\n        // \u6784\u5efaRequestEntity\n        RequestEntity<SimpleContent> requestEntity = new RequestEntity<>(simpleContent, headers, HttpMethod.PUT, builder.build().toUri());\n        //\u53d1\u9001\u8bf7\u6c42\n        ResponseEntity<CloudflareResponse> response = restTemplate.exchange(requestEntity, CloudflareResponse.class);\n        return response.getBody();\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/utils/AliDnsUtils.java", "chunked_list": ["package top.sssd.ddns.utils;\n\nimport com.aliyun.alidns20150109.models.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport top.sssd.ddns.common.BizException;\n\nimport java.util.List;\n\n/**", "\n/**\n * @author sssd\n * @update 2022-12-17 23:40\n */\n@Slf4j\npublic class AliDnsUtils {\n\n    private static final String ENDPOINT = \"alidns.cn-hangzhou.aliyuncs.com\";\n\n    private AliDnsUtils() {\n    }\n\n    /**\n     * \u4f7f\u7528AK&SK\u521d\u59cb\u5316\u8d26\u53f7Client\n     *\n     * @param accessKeyId\n     * @param accessKeySecret\n     * @return Client\n     * @throws Exception\n     */", "    public static com.aliyun.alidns20150109.Client createClient(String accessKeyId, String accessKeySecret) throws Exception {\n        com.aliyun.teaopenapi.models.Config config = new com.aliyun.teaopenapi.models.Config()\n                // \u5fc5\u586b\uff0c\u60a8\u7684 AccessKey ID\n                .setAccessKeyId(accessKeyId)\n                // \u5fc5\u586b\uff0c\u60a8\u7684 AccessKey Secret\n                .setAccessKeySecret(accessKeySecret);\n        config.endpoint = ENDPOINT;\n        return new com.aliyun.alidns20150109.Client(config);\n    }\n\n    /**\n     * \u83b7\u53d6\u5b50\u57df\u540d\u7684\u6240\u6709\u89e3\u6790\u8bb0\u5f55\u5217\u8868\n     */", "    public static DescribeSubDomainRecordsResponse getSubDomainParseList(com.aliyun.alidns20150109.Client client, String subDomain, String recordType) throws Exception {\n        DescribeSubDomainRecordsRequest describeSubDomainRecordsRequest = new DescribeSubDomainRecordsRequest()\n                .setSubDomain(subDomain)\n                .setType(recordType);\n        return client.describeSubDomainRecords(describeSubDomainRecordsRequest);\n    }\n\n    /**\n     * \u83b7\u53d6\u4e3b\u57df\u540d\u7684\u6240\u6709\u89e3\u6790\u8bb0\u5f55\u5217\u8868\n     *\n     * @param client\n     * @param domain\n     * @return\n     */", "    public static DescribeDomainRecordsResponse getParseList(com.aliyun.alidns20150109.Client client, String domain) throws Exception {\n        DescribeDomainRecordsRequest describeDomainRecordsRequest = new DescribeDomainRecordsRequest()\n                .setDomainName(domain);\n        return client.describeDomainRecords(describeDomainRecordsRequest);\n    }\n\n    /**\n     * \u6dfb\u52a0\u4e00\u6761\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param client\n     * @param domain\n     * @param Rr\n     * @param recordType\n     * @param ip\n     * @return\n     */", "    public static AddDomainRecordResponse add(com.aliyun.alidns20150109.Client client, String domain, String Rr, String recordType, String ip) throws Exception {\n        AddDomainRecordRequest addDomainRecordRequest = new AddDomainRecordRequest()\n                .setDomainName(domain)\n                .setRR(Rr)\n                .setType(recordType)\n                .setValue(ip);\n        return client.addDomainRecord(addDomainRecordRequest);\n    }\n\n    /**\n     * \u4fee\u6539\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param client\n     * @param recordId\n     * @param Rr\n     * @param recordType\n     * @param ip\n     * @return\n     */", "    public static UpdateDomainRecordResponse update(com.aliyun.alidns20150109.Client client, String recordId, String Rr, String recordType, String ip) throws Exception {\n        UpdateDomainRecordRequest updateDomainRecordRequest = new UpdateDomainRecordRequest()\n                .setRecordId(recordId)\n                .setRR(Rr)\n                .setType(recordType)\n                .setValue(ip);\n        return client.updateDomainRecord(updateDomainRecordRequest);\n    }\n\n\n    /**\n     * \u5220\u9664\u89e3\u6790\u8bb0\u5f55\n     * @param client\n     * @param recordId\n     * @return\n     */", "    public static DeleteDomainRecordResponse delete(com.aliyun.alidns20150109.Client client,String recordId) throws Exception {\n        DeleteDomainRecordRequest deleteDomainRecordRequest = new DeleteDomainRecordRequest()\n                .setRecordId(recordId);\n        return client.deleteDomainRecord(deleteDomainRecordRequest);\n    }\n\n\n    /**\n     * \u67e5\u8be2\u5e76\u8fd4\u56de\u8bb0\u5f55ID\n     *\n     * @param client\n     * @param subDomain\n     * @param recordType\n     * @param ip\n     * @return\n     */", "    public static String getDomainRecordId(com.aliyun.alidns20150109.Client client, String subDomain, String recordType, String ip) throws Exception {\n        DescribeSubDomainRecordsResponse response = getSubDomainParseList(client, subDomain, recordType);\n        if (response.getStatusCode() != HttpStatus.OK.value()) {\n            throw new BizException(\"\u67e5\u8be2\u5e76\u8fd4\u56de\u8bb0\u5f55ID\u65f6,\u8c03\u7528\u963f\u91cc\u4e91DNS\u89e3\u6790\u5931\u8d25,\u8bf7\u68c0\u67e5\u4f20\u5165\u7684serviceProviderId,serviceProviderSecret,\u57df\u540d\u662f\u5426\u6b63\u786e\");\n        }\n\n        for (DescribeSubDomainRecordsResponseBody.DescribeSubDomainRecordsResponseBodyDomainRecordsRecord domainRecordsRecord :  response.getBody().getDomainRecords().getRecord()) {\n            if (ip.equals(domainRecordsRecord.getValue())) {\n                return domainRecordsRecord.getRecordId();\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * \u6839\u636e\u57df\u540d\u548c\u89e3\u6790\u7c7b\u578b\u67e5\u8be2ip\n     * @param client\n     * @param subDomain\n     * @param recordType\n     * @return\n     */", "    public static String getIpBySubDomainWithType(com.aliyun.alidns20150109.Client client,String subDomain, String recordType) throws Exception {\n        DescribeSubDomainRecordsRequest describeSubDomainRecordsRequest = new DescribeSubDomainRecordsRequest()\n                .setSubDomain(subDomain)\n                .setType(recordType);\n        DescribeSubDomainRecordsResponse response = client.describeSubDomainRecords(describeSubDomainRecordsRequest);\n        List<DescribeSubDomainRecordsResponseBody.DescribeSubDomainRecordsResponseBodyDomainRecordsRecord> records = response.getBody().getDomainRecords().getRecord();\n        return records.get(0).getValue();\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/utils/TencentDnsUtils.java", "chunked_list": ["package top.sssd.ddns.utils;\n\nimport com.tencentcloudapi.common.Credential;\nimport com.tencentcloudapi.common.exception.TencentCloudSDKException;\nimport com.tencentcloudapi.common.profile.ClientProfile;\nimport com.tencentcloudapi.common.profile.HttpProfile;\nimport com.tencentcloudapi.dnspod.v20210323.DnspodClient;\nimport com.tencentcloudapi.dnspod.v20210323.models.*;\nimport lombok.extern.slf4j.Slf4j;\n", "import lombok.extern.slf4j.Slf4j;\n\nimport java.util.Objects;\n\n/**\n * @author sssd\n * @careate 2023-05-06-16:13\n */\n@Slf4j\npublic class TencentDnsUtils {\n\n    private TencentDnsUtils() {\n    }\n", "@Slf4j\npublic class TencentDnsUtils {\n\n    private TencentDnsUtils() {\n    }\n\n    public static final String ENDPOINT = \"dnspod.tencentcloudapi.com\";\n\n    public static final String RECORDLINE = \"\u9ed8\u8ba4\";\n\n    /**\n     * \u83b7\u53d6\u89e3\u6790\u8bb0\u5f55ID\n     *\n     * @param domain\n     * @param subDomain\n     * @param recordType\n     * @param secretId\n     * @param secretKey\n     * @return\n     * @throws TencentCloudSDKException\n     */", "    public static final String RECORDLINE = \"\u9ed8\u8ba4\";\n\n    /**\n     * \u83b7\u53d6\u89e3\u6790\u8bb0\u5f55ID\n     *\n     * @param domain\n     * @param subDomain\n     * @param recordType\n     * @param secretId\n     * @param secretKey\n     * @return\n     * @throws TencentCloudSDKException\n     */", "    public static Long getRecordId(String domain, String subDomain, String recordType,\n                                   String secretId, String secretKey) throws TencentCloudSDKException {\n        RecordListItem[] recordList = getRecordList(domain, subDomain, recordType, secretId, secretKey);\n        if (Objects.isNull(recordList)) {\n            return null;\n        }\n        RecordListItem recordListItem = recordList[0];\n        return recordListItem.getRecordId();\n    }\n\n    /**\n     * \u6839\u636e\u57df\u540d\u548c\u89e3\u6790\u8bb0\u5f55\u83b7\u53d6ip\n     *\n     * @param domain\n     * @param subDomain\n     * @param recordType\n     * @param secretId\n     * @param secretKey\n     * @return\n     * @throws TencentCloudSDKException\n     */", "    public static String getIpBySubDomainWithType(String domain, String subDomain, String recordType,\n                                                  String secretId, String secretKey) throws TencentCloudSDKException {\n        RecordListItem[] recordList = getRecordList(domain, subDomain, recordType, secretId, secretKey);\n        if (Objects.isNull(recordList)) {\n            return null;\n        }\n        RecordListItem recordListItem = recordList[0];\n        return recordListItem.getValue();\n    }\n\n    public static RecordListItem[] getRecordList(String domain, String subDomain, String recordType,\n                                                 String secretId, String secretKey) throws TencentCloudSDKException {", "    public static RecordListItem[] getRecordList(String domain, String subDomain, String recordType,\n                                                 String secretId, String secretKey) throws TencentCloudSDKException {\n        try {\n            // \u5bc6\u94a5\u53ef\u524d\u5f80\u5b98\u7f51\u63a7\u5236\u53f0 https://console.cloud.tencent.com/cam/capi \u8fdb\u884c\u83b7\u53d6\n            Credential cred = new Credential(secretId, secretKey);\n            // \u5b9e\u4f8b\u5316\u4e00\u4e2ahttp\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n            HttpProfile httpProfile = new HttpProfile();\n            httpProfile.setEndpoint(ENDPOINT);\n            // \u5b9e\u4f8b\u5316\u4e00\u4e2aclient\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n            ClientProfile clientProfile = new ClientProfile();\n            clientProfile.setHttpProfile(httpProfile);\n            // \u5b9e\u4f8b\u5316\u8981\u8bf7\u6c42\u4ea7\u54c1\u7684client\u5bf9\u8c61,clientProfile\u662f\u53ef\u9009\u7684\n            DnspodClient client = new DnspodClient(cred, \"\", clientProfile);\n            // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61,\u6bcf\u4e2a\u63a5\u53e3\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2arequest\u5bf9\u8c61\n            DescribeRecordListRequest req = new DescribeRecordListRequest();\n            req.setDomain(domain);\n            req.setSubdomain(subDomain);\n            req.setRecordType(recordType);\n            // \u8fd4\u56de\u7684resp\u662f\u4e00\u4e2aDescribeRecordListResponse\u7684\u5b9e\u4f8b\uff0c\u4e0e\u8bf7\u6c42\u5bf9\u8c61\u5bf9\u5e94\n            DescribeRecordListResponse resp = client.DescribeRecordList(req);\n            return resp.getRecordList();\n        } catch (TencentCloudSDKException e) {", "            if (e.getMessage().contains(\"\u8bb0\u5f55\u5217\u8868\u4e3a\u7a7a\")) {\n                return new RecordListItem[]{};\n            }\n            e.printStackTrace();\n        }\n        return new RecordListItem[]{};\n    }\n\n    /**\n     * \u6dfb\u52a0\u4e00\u6761\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param domain\n     * @param subDomain\n     * @param recordType\n     * @param ip\n     * @return\n     * @throws TencentCloudSDKException\n     */", "    public static CreateRecordResponse createRecord(String domain, String subDomain, String recordType,\n                                                    String secretId, String secretKey, String ip) throws TencentCloudSDKException {\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u8ba4\u8bc1\u5bf9\u8c61\uff0c\u5165\u53c2\u9700\u8981\u4f20\u5165\u817e\u8baf\u4e91\u8d26\u6237 SecretId \u548c SecretKey\uff0c\u6b64\u5904\u8fd8\u9700\u6ce8\u610f\u5bc6\u94a5\u5bf9\u7684\u4fdd\u5bc6\n        // \u4ee3\u7801\u6cc4\u9732\u53ef\u80fd\u4f1a\u5bfc\u81f4 SecretId \u548c SecretKey \u6cc4\u9732\uff0c\u5e76\u5a01\u80c1\u8d26\u53f7\u4e0b\u6240\u6709\u8d44\u6e90\u7684\u5b89\u5168\u6027\u3002\u4ee5\u4e0b\u4ee3\u7801\u793a\u4f8b\u4ec5\u4f9b\u53c2\u8003\uff0c\u5efa\u8bae\u91c7\u7528\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u5bc6\u94a5\uff0c\u8bf7\u53c2\u89c1\uff1ahttps://cloud.tencent.com/document/product/1278/85305\n        // \u5bc6\u94a5\u53ef\u524d\u5f80\u5b98\u7f51\u63a7\u5236\u53f0 https://console.cloud.tencent.com/cam/capi \u8fdb\u884c\u83b7\u53d6\n        Credential cred = new Credential(secretId, secretKey);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2ahttp\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        HttpProfile httpProfile = new HttpProfile();\n        httpProfile.setEndpoint(ENDPOINT);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2aclient\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        ClientProfile clientProfile = new ClientProfile();\n        clientProfile.setHttpProfile(httpProfile);\n        // \u5b9e\u4f8b\u5316\u8981\u8bf7\u6c42\u4ea7\u54c1\u7684client\u5bf9\u8c61,clientProfile\u662f\u53ef\u9009\u7684\n        DnspodClient client = new DnspodClient(cred, \"\", clientProfile);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61,\u6bcf\u4e2a\u63a5\u53e3\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2arequest\u5bf9\u8c61\n        CreateRecordRequest req = new CreateRecordRequest();\n        req.setDomain(domain);\n        req.setSubDomain(subDomain);\n        req.setRecordType(recordType);\n        req.setRecordLine(RECORDLINE);\n        req.setValue(ip);\n        // \u8fd4\u56de\u7684resp\u662f\u4e00\u4e2aCreateRecordResponse\u7684\u5b9e\u4f8b\uff0c\u4e0e\u8bf7\u6c42\u5bf9\u8c61\u5bf9\u5e94\n        return client.CreateRecord(req);\n    }\n\n    /**\n     * \u66f4\u65b0\u8bb0\u5f55\n     *\n     * @param domain\n     * @param subDomain\n     * @param recordType\n     * @param secretId\n     * @param secretKey\n     * @param ip\n     * @param recordId\n     * @return\n     * @throws TencentCloudSDKException\n     */", "    public static ModifyRecordResponse updateRecord(String domain, String subDomain, String recordType,\n                                                    String secretId, String secretKey, String ip, Long recordId) throws TencentCloudSDKException {\n        Credential cred = new Credential(secretId, secretKey);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2ahttp\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        HttpProfile httpProfile = new HttpProfile();\n        httpProfile.setEndpoint(ENDPOINT);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2aclient\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        ClientProfile clientProfile = new ClientProfile();\n        clientProfile.setHttpProfile(httpProfile);\n        // \u5b9e\u4f8b\u5316\u8981\u8bf7\u6c42\u4ea7\u54c1\u7684client\u5bf9\u8c61,clientProfile\u662f\u53ef\u9009\u7684\n        DnspodClient client = new DnspodClient(cred, \"\", clientProfile);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61,\u6bcf\u4e2a\u63a5\u53e3\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2arequest\u5bf9\u8c61\n        ModifyRecordRequest req = new ModifyRecordRequest();\n        req.setDomain(domain);\n        req.setSubDomain(subDomain);\n        req.setRecordType(recordType);\n        req.setRecordLine(RECORDLINE);\n        req.setValue(ip);\n        req.setRecordId(recordId);\n        // \u8fd4\u56de\u7684resp\u662f\u4e00\u4e2aModifyRecordResponse\u7684\u5b9e\u4f8b\uff0c\u4e0e\u8bf7\u6c42\u5bf9\u8c61\u5bf9\u5e94\n        return client.ModifyRecord(req);\n    }\n\n    /**\n     * \u5220\u9664\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param domain\n     * @param secretId\n     * @param secretKey\n     * @param recordId\n     * @throws TencentCloudSDKException\n     */", "    public static DeleteRecordResponse deleteRecord(String domain, String secretId, String secretKey, Long recordId) throws TencentCloudSDKException {\n        // \u5bc6\u94a5\u53ef\u524d\u5f80\u5b98\u7f51\u63a7\u5236\u53f0 https://console.cloud.tencent.com/cam/capi \u8fdb\u884c\u83b7\u53d6\n        Credential cred = new Credential(secretId, secretKey);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2ahttp\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        HttpProfile httpProfile = new HttpProfile();\n        httpProfile.setEndpoint(ENDPOINT);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2aclient\u9009\u9879\uff0c\u53ef\u9009\u7684\uff0c\u6ca1\u6709\u7279\u6b8a\u9700\u6c42\u53ef\u4ee5\u8df3\u8fc7\n        ClientProfile clientProfile = new ClientProfile();\n        clientProfile.setHttpProfile(httpProfile);\n        // \u5b9e\u4f8b\u5316\u8981\u8bf7\u6c42\u4ea7\u54c1\u7684client\u5bf9\u8c61,clientProfile\u662f\u53ef\u9009\u7684\n        DnspodClient client = new DnspodClient(cred, \"\", clientProfile);\n        // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u8bf7\u6c42\u5bf9\u8c61,\u6bcf\u4e2a\u63a5\u53e3\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2arequest\u5bf9\u8c61\n        DeleteRecordRequest req = new DeleteRecordRequest();\n        req.setDomain(domain);\n        req.setRecordId(recordId);\n        // \u8fd4\u56de\u7684resp\u662f\u4e00\u4e2aDeleteRecordResponse\u7684\u5b9e\u4f8b\uff0c\u4e0e\u8bf7\u6c42\u5bf9\u8c61\u5bf9\u5e94\n        return client.DeleteRecord(req);\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/Result.java", "chunked_list": ["package top.sssd.ddns.common;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Objects;\n/**\n * @author sssd\n */", " * @author sssd\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Result<T>{\n    /**\n     * \u8fd4\u56de\u7801\n     */\n    private Integer code;\n\n    /**\n     * \u8fd4\u56de\u6d88\u606f\n     */\n    private String message;\n\n    /**\n     * \u8fd4\u56de\u6570\u636e\n     */\n    private T data;\n\n    protected static <T > Result<T> build(T data) {\n        Result<T> result = new Result<>();", "        if (Objects.nonNull(data)) {\n            result.setData(data);\n        }\n        return result;\n    }\n\n    public static <T > Result<T> build(T body, Integer code, String message) {\n        Result<T> result = build(body);\n        result.setCode(code);\n        result.setMessage(message);\n        return result;\n    }\n\n    public static <T > Result<T> build(T body, ResultCodeEnum resultCodeEnum) {\n        Result<T> result = build(body);\n        result.setCode(resultCodeEnum.getCode());\n        result.setMessage(resultCodeEnum.getMessage());\n        return result;\n    }\n\n    public static<T > Result<T> ok(T data){\n        return build(data, ResultCodeEnum.SUCCESS);\n    }\n\n    public static<T > Result<T> ok(){\n        return Result.ok(null);\n    }\n\n    public static<T > Result<T> fail(T data){\n        return build(data, ResultCodeEnum.FAIL);\n    }\n\n    public static<T > Result<T> fail(){\n        return Result.fail(null);\n    }\n\n    public Result<T> message(String msg){\n        this.setMessage(msg);\n        return this;\n    }\n\n    public Result<T> code(Integer code){\n        this.setCode(code);\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/ResultCodeEnum.java", "chunked_list": ["package top.sssd.ddns.common;\n\nimport lombok.Getter;\n\n/**\n * @author sssd\n * \u7edf\u4e00\u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u4fe1\u606f\u7c7b\n */\n@Getter\npublic enum ResultCodeEnum {\n    SUCCESS(200, \"\u6210\u529f\"),\n    FAIL(201, \"\u5931\u8d25\"),\n    SERVICE_ERROR(2012, \"\u670d\u52a1\u5f02\u5e38\"),\n    DATA_ERROR(204, \"\u6570\u636e\u5f02\u5e38\"),\n    ILLEGAL_REQUEST(205, \"\u975e\u6cd5\u8bf7\u6c42\"),\n    REPEAT_SUBMIT(206, \"\u91cd\u590d\u63d0\u4ea4\"),\n    ARGUMENT_VALID_ERROR(210, \"\u53c2\u6570\u6821\u9a8c\u5f02\u5e38\"),\n\n    LOGIN_AUTH(208, \"\u672a\u767b\u9646\"),\n    PERMISSION(209, \"\u6ca1\u6709\u6743\u9650\"),\n    ACCOUNT_ERROR(214, \"\u8d26\u53f7\u4e0d\u6b63\u786e\"),\n    PASSWORD_ERROR(215, \"\u5bc6\u7801\u4e0d\u6b63\u786e\"),\n    LOGIN_MOBLE_ERROR(216, \"\u8d26\u53f7\u4e0d\u6b63\u786e\"),\n    ACCOUNT_STOP(217, \"\u8d26\u53f7\u5df2\u505c\u7528\"),\n    NODE_ERROR(218, \"\u8be5\u8282\u70b9\u4e0b\u6709\u5b50\u8282\u70b9\uff0c\u4e0d\u53ef\u4ee5\u5220\u9664\");\n\n    private Integer code;\n\n    private String message;\n\n    private ResultCodeEnum(Integer code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n}\n", "@Getter\npublic enum ResultCodeEnum {\n    SUCCESS(200, \"\u6210\u529f\"),\n    FAIL(201, \"\u5931\u8d25\"),\n    SERVICE_ERROR(2012, \"\u670d\u52a1\u5f02\u5e38\"),\n    DATA_ERROR(204, \"\u6570\u636e\u5f02\u5e38\"),\n    ILLEGAL_REQUEST(205, \"\u975e\u6cd5\u8bf7\u6c42\"),\n    REPEAT_SUBMIT(206, \"\u91cd\u590d\u63d0\u4ea4\"),\n    ARGUMENT_VALID_ERROR(210, \"\u53c2\u6570\u6821\u9a8c\u5f02\u5e38\"),\n\n    LOGIN_AUTH(208, \"\u672a\u767b\u9646\"),\n    PERMISSION(209, \"\u6ca1\u6709\u6743\u9650\"),\n    ACCOUNT_ERROR(214, \"\u8d26\u53f7\u4e0d\u6b63\u786e\"),\n    PASSWORD_ERROR(215, \"\u5bc6\u7801\u4e0d\u6b63\u786e\"),\n    LOGIN_MOBLE_ERROR(216, \"\u8d26\u53f7\u4e0d\u6b63\u786e\"),\n    ACCOUNT_STOP(217, \"\u8d26\u53f7\u5df2\u505c\u7528\"),\n    NODE_ERROR(218, \"\u8be5\u8282\u70b9\u4e0b\u6709\u5b50\u8282\u70b9\uff0c\u4e0d\u53ef\u4ee5\u5220\u9664\");\n\n    private Integer code;\n\n    private String message;\n\n    private ResultCodeEnum(Integer code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/BizException.java", "chunked_list": ["package top.sssd.ddns.common;\n\nimport lombok.Getter;\n\n/**\n * @author sssd\n */\n@Getter\npublic class BizException extends RuntimeException{\n    private final String message;\n    public BizException(String message) {\n        super(message);\n        this.message = message;\n    }\n}\n", "public class BizException extends RuntimeException{\n    private final String message;\n    public BizException(String message) {\n        super(message);\n        this.message = message;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/SpringContextHolder.java", "chunked_list": ["package top.sssd.ddns.common;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author sssd\n */", " * @author sssd\n */\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n    private ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n    }\n", "    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n    }\n\n    public ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n}\n\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/utils/PageUtils.java", "chunked_list": ["package top.sssd.ddns.common.utils;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * @author xuyang13\n */\npublic class PageUtils<T extends Serializable> implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \u603b\u8bb0\u5f55\u6570\n     */\n    private int totalRecords;\n    /**\n     * \u6bcf\u9875\u8bb0\u5f55\u6570\n     */\n    private int pageSize;\n    /**\n     * \u603b\u9875\u6570\n     */\n    private int totalPage;\n    /**\n     * \u5f53\u524d\u9875\u6570\n     */\n    private int curPage;\n    /**\n     * \u5217\u8868\u6570\u636e\n     */\n    private List<T> data;\n\n    /**\n     *\n     */\n    private String sortDir;\n\n    /**\n     *\n     */\n    private String sortIndx;\n\n    /**\n     * \u5206\u9875\n     */\n    public PageUtils(IPage<T> page) {\n        this.data = page.getRecords();\n        this.totalRecords = (int)page.getTotal();\n        this.pageSize = (int)page.getSize();\n        this.curPage = (int)page.getCurrent();\n        this.totalPage = (int)page.getPages();\n    }\n\n    /**\n     * \u5206\u9875\n     * @param data        \u5217\u8868\u6570\u636e\n     * @param totalRecords  \u603b\u8bb0\u5f55\u6570\n     * @param pageSize    \u6bcf\u9875\u8bb0\u5f55\u6570\n     * @param curPage    \u5f53\u524d\u9875\u6570\n     */\n    public PageUtils(List<T> data, int totalRecords, int pageSize, int curPage) {\n        this.data = data;\n        this.totalRecords = totalRecords;\n        this.pageSize = pageSize;\n        this.curPage = curPage;\n        this.totalPage = (int) Math.ceil((double)totalRecords/pageSize);\n    }\n", " * @author xuyang13\n */\npublic class PageUtils<T extends Serializable> implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \u603b\u8bb0\u5f55\u6570\n     */\n    private int totalRecords;\n    /**\n     * \u6bcf\u9875\u8bb0\u5f55\u6570\n     */\n    private int pageSize;\n    /**\n     * \u603b\u9875\u6570\n     */\n    private int totalPage;\n    /**\n     * \u5f53\u524d\u9875\u6570\n     */\n    private int curPage;\n    /**\n     * \u5217\u8868\u6570\u636e\n     */\n    private List<T> data;\n\n    /**\n     *\n     */\n    private String sortDir;\n\n    /**\n     *\n     */\n    private String sortIndx;\n\n    /**\n     * \u5206\u9875\n     */\n    public PageUtils(IPage<T> page) {\n        this.data = page.getRecords();\n        this.totalRecords = (int)page.getTotal();\n        this.pageSize = (int)page.getSize();\n        this.curPage = (int)page.getCurrent();\n        this.totalPage = (int)page.getPages();\n    }\n\n    /**\n     * \u5206\u9875\n     * @param data        \u5217\u8868\u6570\u636e\n     * @param totalRecords  \u603b\u8bb0\u5f55\u6570\n     * @param pageSize    \u6bcf\u9875\u8bb0\u5f55\u6570\n     * @param curPage    \u5f53\u524d\u9875\u6570\n     */\n    public PageUtils(List<T> data, int totalRecords, int pageSize, int curPage) {\n        this.data = data;\n        this.totalRecords = totalRecords;\n        this.pageSize = pageSize;\n        this.curPage = curPage;\n        this.totalPage = (int) Math.ceil((double)totalRecords/pageSize);\n    }\n", "    public int getTotalRecords() {\n        return totalRecords;\n    }\n\n    public void setTotalRecords(int totalRecords) {\n        this.totalRecords = totalRecords;\n    }\n\n    public int getPageSize() {\n        return pageSize;\n    }\n", "    public int getPageSize() {\n        return pageSize;\n    }\n\n    public void setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n    }\n\n    public int getTotalPage() {\n        return totalPage;\n    }\n", "    public int getTotalPage() {\n        return totalPage;\n    }\n\n    public void setTotalPage(int totalPage) {\n        this.totalPage = totalPage;\n    }\n\n    public int getCurPage() {\n        return curPage;\n    }\n", "    public int getCurPage() {\n        return curPage;\n    }\n\n    public void setCurPage(int curPage) {\n        this.curPage = curPage;\n    }\n\n    public List<T> getData() {\n        return data;\n    }\n", "    public void setData(List<T> data) {\n        this.data = data;\n    }\n\n    public String getSortDir() {\n        return sortDir;\n    }\n\n    public void setSortDir(String sortDir) {\n        this.sortDir = sortDir;\n    }\n", "    public void setSortDir(String sortDir) {\n        this.sortDir = sortDir;\n    }\n\n    public String getSortIndx() {\n        return sortIndx;\n    }\n\n    public void setSortIndx(String sortIndx) {\n        this.sortIndx = sortIndx;\n    }\n}\n", "    public void setSortIndx(String sortIndx) {\n        this.sortIndx = sortIndx;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/utils/DoMainUtil.java", "chunked_list": ["package top.sssd.ddns.common.utils;\n\nimport java.util.Objects;\n\n/**\n * \u57df\u540d\u5de5\u5177\u7c7b\n * @author sssd\n * @careate 2023-03-20-14:58\n */\npublic class DoMainUtil {\n    private DoMainUtil() {\n    }\n", " */\npublic class DoMainUtil {\n    private DoMainUtil() {\n    }\n\n    public static boolean firstLevel(String domain) {\n        if (Objects.isNull(domain) || domain.isEmpty()) {\n            return false;\n        }\n        int count = 0;\n        for (char aChar : domain.toCharArray()) {", "        for (char aChar : domain.toCharArray()) {\n            if (aChar == '.') {\n                count++;\n            }\n        }\n        return count == 1;\n    }\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/enums/UpdateFrequencyEnum.java", "chunked_list": ["package top.sssd.ddns.common.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * @author sssd\n * @careate 2023-05-02-11:37\n */\n@AllArgsConstructor", " */\n@AllArgsConstructor\n@Getter\npublic enum UpdateFrequencyEnum {\n\n    ONE_MINUTE(1, \"1\u5206\u949f\", \"0 */1 * * * ?\"),\n    TWO_MINUTES(2, \"2\u5206\u949f\", \"0 */2 * * * ?\"),\n    FIVE_MINUTES(5, \"5\u5206\u949f\", \"0 */5 * * * ?\"),\n    TEN_MINUTES(10, \"10\u5206\u949f\", \"0 */10 * * * ?\");\n\n    private final Integer code;\n    private final String desc;\n    private final String cronExpression;\n\n    /**\n     *  \u901a\u8fc7 code \u83b7\u53d6 desc\n     * @param code\n     * @return\n     */", "    public static String getDescByCode(Integer code) {\n        for (UpdateFrequencyEnum e : UpdateFrequencyEnum.values()) {\n            if (e.code.equals(code)) {\n                return e.desc;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \u901a\u8fc7 desc \u83b7\u53d6 code\n      * @param desc\n     * @return\n     */", "    public static Integer getCodeByDesc(String desc) {\n        for (UpdateFrequencyEnum e : UpdateFrequencyEnum.values()) {\n            if (e.desc.equals(desc)) {\n                return e.code;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \u901a\u8fc7 code \u83b7\u53d6 cron \u8868\u8fbe\u5f0f\n     * @param code\n     * @return\n     */", "    public static String getCronExpressionByCode(Integer code) {\n        for (UpdateFrequencyEnum e : UpdateFrequencyEnum.values()) {\n            if (e.code.equals(code)) {\n                return e.cronExpression;\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/enums/ServiceProviderEnum.java", "chunked_list": ["package top.sssd.ddns.common.enums;\n\n/**\n * \u670d\u52a1\u5546\u679a\u4e3e\n * @author sssd\n * @careate 2023-03-20-15:10\n */\npublic enum ServiceProviderEnum {\n    ALI_YUN(1,\"\u963f\u91cc\u4e91\"),\n    TENCENT(2,\"\u817e\u8baf\u4e91\"),\n    CLOUD_FLARE(3,\"cloudflare\");\n\n    private Integer index;\n    private String name;\n\n    ServiceProviderEnum(){}\n\n    ServiceProviderEnum(Integer index, String name) {\n        this.index = index;\n        this.name = name;\n    }\n", "    public Integer getIndex() {\n        return index;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public static String getNameByIndex(Integer index) {\n        for (ServiceProviderEnum el : ServiceProviderEnum.values()) {\n            if (el.getIndex().equals(index)) {\n                return el.getName();\n            }\n        }\n        return null;\n    }\n}\n", "    public static String getNameByIndex(Integer index) {\n        for (ServiceProviderEnum el : ServiceProviderEnum.values()) {\n            if (el.getIndex().equals(index)) {\n                return el.getName();\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/enums/RecordTypeEnum.java", "chunked_list": ["package top.sssd.ddns.common.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author sssd\n * @careate 2023-03-20-15:27\n */\npublic enum RecordTypeEnum {\n    IPV6(1,\"AAAA\"),\n    IPV4(2,\"A\");\n\n    private static final Map<Integer,String> map = new HashMap<>();\n\n    static {", " */\npublic enum RecordTypeEnum {\n    IPV6(1,\"AAAA\"),\n    IPV4(2,\"A\");\n\n    private static final Map<Integer,String> map = new HashMap<>();\n\n    static {\n        for (RecordTypeEnum el : RecordTypeEnum.values()) {\n            map.put(el.getIndex(), el.getName());\n        }\n    }\n", "        for (RecordTypeEnum el : RecordTypeEnum.values()) {\n            map.put(el.getIndex(), el.getName());\n        }\n    }\n\n    public static String getNameByIndex(Integer index){\n        return map.get(index);\n    }\n\n\n    private Integer index;\n    private String name;\n\n    RecordTypeEnum() {\n    }\n\n    RecordTypeEnum(Integer index, String name) {\n        this.index = index;\n        this.name = name;\n    }\n", "    public Integer getIndex() {\n        return index;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/constant/DDNSConstant.java", "chunked_list": ["package top.sssd.ddns.common.constant;\n\n/**\n * DDNS\u5e38\u91cf\u7c7b\n *\n * @author sssd\n */\npublic class DDNSConstant {\n    private DDNSConstant(){}\n    public static final String CREATE_DATE = \"createDate\";\n    public static final String UPDATE_DATE = \"updateDate\";", "    public static final String CREATE_DATE = \"createDate\";\n    public static final String UPDATE_DATE = \"updateDate\";\n    public static final String CREATOR = \"creator\";\n    public static final String UPDATER = \"updater\";\n    public static final String IPV4_INTERFACE_VALUE = \"https://myip4.ipip.net, https://ddns.oray.com/checkip, https://ip.3322.net, https://4.ipw.cn\";\n    public static final String IPV6_INTERFACE_VALUE = \"https://speed.neu6.edu.cn/getIP.php, https://v6.ident.me, https://6.ipw.cn\";\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/valid/ValidException.java", "chunked_list": ["package top.sssd.ddns.common.valid;\n\n/**\n * @author sssd\n */\npublic class ValidException extends RuntimeException{\n    public ValidException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/valid/ValidUtil.java", "chunked_list": ["package top.sssd.ddns.common.valid;\n\nimport cn.hutool.json.JSONUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.util.CollectionUtils;\n\nimport javax.validation.Validation;\nimport java.util.List;\nimport java.util.stream.Collectors;\n", "import java.util.stream.Collectors;\n\n\n/**\n * @author sssd\n */\n@Slf4j\npublic class ValidUtil {\n    private ValidUtil(){}\n    public static void serviceValid(Object o) {\n        List<InvalidField> errorList = Validation\n                .buildDefaultValidatorFactory()\n                .getValidator().validate(o).stream()\n                .map(item -> new InvalidField(item.getPropertyPath().toString(), item.getMessage(), item.getInvalidValue()))\n                .collect(Collectors.toList());", "    public static void serviceValid(Object o) {\n        List<InvalidField> errorList = Validation\n                .buildDefaultValidatorFactory()\n                .getValidator().validate(o).stream()\n                .map(item -> new InvalidField(item.getPropertyPath().toString(), item.getMessage(), item.getInvalidValue()))\n                .collect(Collectors.toList());\n        if(CollectionUtils.isEmpty(errorList)){\n            return;\n        }\n        throw new ValidException(JSONUtil.toJsonStr(errorList));\n    }\n\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/valid/ValidGroup.java", "chunked_list": ["package top.sssd.ddns.common.valid;\n\nimport javax.validation.groups.Default;\n\n/**\n * @author sssd\n */\npublic class ValidGroup {\n    public interface SaveGroup extends Default{}\n    public interface UpdateGroup extends Default{}\n    public interface ImportGroup extends Default{}\n}\n", "    public interface SaveGroup extends Default{}\n    public interface UpdateGroup extends Default{}\n    public interface ImportGroup extends Default{}\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/valid/InvalidField.java", "chunked_list": ["package top.sssd.ddns.common.valid;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author sssd\n */\n@NoArgsConstructor", " */\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class InvalidField {\n    private String name;\n    private String message;\n    private Object value;\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/common/valid/ValidList.java", "chunked_list": ["package top.sssd.ddns.common.valid;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Delegate;\n\nimport javax.validation.Valid;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author sssd\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ValidList<E> implements List<E> {\n\n    @Delegate\n    @Valid\n    public List<E> list = new ArrayList<>();\n\n    @Override", "@NoArgsConstructor\npublic class ValidList<E> implements List<E> {\n\n    @Delegate\n    @Valid\n    public List<E> list = new ArrayList<>();\n\n    @Override\n    public String toString() {\n        return list.toString();\n    }\n\n\n}\n", "    public String toString() {\n        return list.toString();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/config/MybatisPlusConfig.java", "chunked_list": ["package top.sssd.ddns.config;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport top.sssd.ddns.handler.EasySqlInjector;\n\n/**", "\n/**\n * @author sssd\n */\n@Configuration\npublic class MybatisPlusConfig {\n    /**\n     * \u65b0\u7684\u5206\u9875\u63d2\u4ef6,\u4e00\u7f13\u548c\u4e8c\u7f13\u9075\u5faamybatis\u7684\u89c4\u5219,\u9700\u8981\u8bbe\u7f6e MybatisConfiguration#useDeprecatedExecutor = false \u907f\u514d\u7f13\u5b58\u51fa\u73b0\u95ee\u9898(\u8be5\u5c5e\u6027\u4f1a\u5728\u65e7\u63d2\u4ef6\u79fb\u9664\u540e\u4e00\u540c\u79fb\u9664)\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n    @Bean", "    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n    @Bean\n    public EasySqlInjector easySqlInjector() {\n        return new EasySqlInjector();\n    }\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/config/QuartzConfig.java", "chunked_list": ["package top.sssd.ddns.config;\n\nimport org.quartz.spi.JobFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\nimport org.springframework.scheduling.quartz.SpringBeanJobFactory;\n\n/**", "\n/**\n * @author sssd\n * @careate 2023-05-02-11:07\n */\npublic class QuartzConfig implements SchedulerFactoryBeanCustomizer {\n    @Autowired\n    private JobFactory jobFactory;\n\n    @Override\n    public void customize(SchedulerFactoryBean schedulerFactoryBean) {\n        schedulerFactoryBean.setJobFactory(jobFactory);\n        schedulerFactoryBean.setStartupDelay(10);\n    }\n\n    @Bean", "    public void customize(SchedulerFactoryBean schedulerFactoryBean) {\n        schedulerFactoryBean.setJobFactory(jobFactory);\n        schedulerFactoryBean.setStartupDelay(10);\n    }\n\n    @Bean\n    public JobFactory jobFactory() {\n        return new SpringBeanJobFactory();\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/config/WebSocketConfig.java", "chunked_list": ["package top.sssd.ddns.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.config.annotation.EnableWebSocket;\nimport org.springframework.web.socket.config.annotation.WebSocketConfigurer;\nimport org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;\nimport top.sssd.ddns.handler.LogWebSocketHandler;\n\nimport javax.annotation.Resource;\n", "import javax.annotation.Resource;\n\n/**\n * @author sssd\n * @careate 2023-05-05-12:57\n */\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n\n    @Resource\n    LogWebSocketHandler logWebSocketHandler;\n\n    @Override", "public class WebSocketConfig implements WebSocketConfigurer {\n\n    @Resource\n    LogWebSocketHandler logWebSocketHandler;\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(logWebSocketHandler, \"/logs\").setAllowedOrigins(\"*\");\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/handler/LogWebSocketHandler.java", "chunked_list": ["package top.sssd.ddns.handler;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.socket.CloseStatus;\nimport org.springframework.web.socket.TextMessage;\nimport org.springframework.web.socket.WebSocketSession;\nimport org.springframework.web.socket.handler.TextWebSocketHandler;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\n/**\n * @author sssd\n * @careate 2023-05-05-12:58\n */\n@Component", " */\n@Component\n@Slf4j\npublic class LogWebSocketHandler extends TextWebSocketHandler {\n\n    /**\n     * \u5b58\u50a8\u8fde\u63a5\u7684WebSocket\u4f1a\u8bdd\u5217\u8868\n     */\n    private static final List<WebSocketSession> sessions = new CopyOnWriteArrayList<>();\n\n    @Override", "    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n        // \u6dfb\u52a0\u65b0\u7684WebSocket\u4f1a\u8bdd\n        sessions.add(session);\n        log.info(\"WebSocket session {} connected\", session.getId());\n    }\n\n    @Override\n    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {\n        // \u79fb\u9664\u5173\u95ed\u7684WebSocket\u4f1a\u8bdd\n        sessions.remove(session);\n        log.info(\"WebSocket session {} closed with status {}\", session.getId(), status);\n    }\n\n    @Override\n    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {\n        // \u5904\u7406\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6d88\u606f\n        log.info(\"Received message '{}' from WebSocket session {}\", message.getPayload(), session.getId());\n    }\n\n    /**\n     * \u53d1\u9001\u6d88\u606f\u5230\u6240\u6709WebSocket\u4f1a\u8bdd\n     * @param message\n     */", "    public void sendToAllSessions(String message) {\n        for (WebSocketSession session : sessions) {\n            try {\n                session.sendMessage(new TextMessage(message));\n            } catch (IOException e) {\n                log.error(\"Failed to send message to WebSocket session {}\", session.getId(), e);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/handler/GobalExceptionHandler.java", "chunked_list": ["package top.sssd.ddns.handler;\n\nimport cn.hutool.core.map.MapUtil;\nimport cn.hutool.json.JSONUtil;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.ConversionNotSupportedException;\nimport org.springframework.beans.TypeMismatchException;\nimport org.springframework.beans.factory.annotation.Autowired;", "import org.springframework.beans.TypeMismatchException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.http.converter.HttpMessageNotWritableException;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.HttpMediaTypeNotAcceptableException;\nimport org.springframework.web.HttpMediaTypeNotSupportedException;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.MethodArgumentNotValidException;", "import org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.MissingPathVariableException;\nimport org.springframework.web.bind.MissingServletRequestParameterException;\nimport org.springframework.web.bind.ServletRequestBindingException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.context.request.async.AsyncRequestTimeoutException;\nimport org.springframework.web.multipart.support.MissingServletRequestPartException;\nimport org.springframework.web.servlet.NoHandlerFoundException;", "import org.springframework.web.multipart.support.MissingServletRequestPartException;\nimport org.springframework.web.servlet.NoHandlerFoundException;\nimport top.sssd.ddns.common.BizException;\nimport top.sssd.ddns.common.Result;\nimport top.sssd.ddns.common.valid.ValidException;\n\nimport javax.validation.ConstraintViolationException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;", "import java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * @author sssd\n */\n@RestControllerAdvice\n@Slf4j\npublic class GobalExceptionHandler {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @ExceptionHandler({ConstraintViolationException.class})\n    public Result<String> constraintViolationExceptionHandler(ConstraintViolationException violationException) throws JsonProcessingException {\n        log.error(\"valid exception info:{}\", violationException.getMessage());\n        return Result.fail(violationException.getMessage());\n    }\n\n    @ExceptionHandler({BindException.class})\n    public Result<Map<String,String>> bindExceptionHandler(BindException e) {\n        return Result.fail(e.getBindingResult().getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage)));\n    }\n\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result<List<FieldError>> methodArgumentNotValidException(MethodArgumentNotValidException e) {\n        return Result.fail(e.getBindingResult().getFieldErrors().stream().collect(Collectors.toList()));\n    }\n\n    @ExceptionHandler(NoHandlerFoundException.class)\n    public Result<String> noHandlerFoundException(NoHandlerFoundException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u4f20\u5165\u7684\u5934\u4fe1\u606f:\", e.getHeaders().toSingleValueMap()).put(\"\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getHttpMethod()).put(\"\u8bf7\u6c42\u7684url:\", e.getRequestURL()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n    public Result<String> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getMethod()).put(\"\u652f\u6301\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getSupportedMethods()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMediaTypeNotSupportedException.class)\n    public Result<String> httpMediaTypeNotSupportedException(HttpMediaTypeNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7684\u6587\u4ef6\u7c7b\u578b:\", e.getContentType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(MissingPathVariableException.class)\n    public Result<String> missingPathVariableException(MissingPathVariableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8def\u5f84\u53c2\u6570\u7684\u540d\u79f0:\", e.getVariableName()).put(\"\u8bf7\u6c42\u53c2\u6570:\", e.getParameter()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(MissingServletRequestParameterException.class)\n    public Result<String> missingServletRequestParameterException(MissingServletRequestParameterException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u53c2\u6570\u7684\u540d\u79f0:\", e.getParameterName()).put(\"\u8bf7\u6c42\u53c2\u6570\u7684\u7c7b\u578b:\", e.getParameterType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(TypeMismatchException.class)\n    public Result<Object> typeMismatchException(TypeMismatchException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8981\u6c42\u7684\u7c7b\u578b:\", e.getRequiredType()).put(\"\u4f20\u5165\u7684\u503c:\", e.getValue()).put(\"\u5c5e\u6027\u540d\u79f0:\", e.getPropertyName()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail().code(Integer.parseInt(e.getErrorCode())).message(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    public Result<String> httpMessageNotReadableException(HttpMessageNotReadableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8f93\u5165\u7684\u6d88\u606f\u6d41\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMessageNotWritableException.class)\n    public Result<String> httpMessageNotWritableException(HttpMessageNotWritableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8f93\u51fa\u7684\u6d88\u606f\u6d41\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)\n    public Result<String> httpMediaTypeNotAcceptableException(HttpMediaTypeNotAcceptableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u5a92\u4f53\u7c7b\u578b\u4e0d\u652f\u6301\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(ServletRequestBindingException.class)\n    public Result<String> servletRequestBindingException(ServletRequestBindingException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7ed1\u5b9a\u5f02\u5e38\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(ConversionNotSupportedException.class)\n    public Result<String> conversionNotSupportedException(ConversionNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u4e0d\u652f\u6301\u8f6c\u6362\u5f02\u5e38\u7684\u5c5e\u6027\u540d\u79f0:\", e.getPropertyName()).put(\"\u4e0d\u652f\u6301\u8f6c\u6362\u5f02\u5e38\u7684\u6240\u9700\u7684\u7c7b\u578b:\", e.getRequiredType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(MissingServletRequestPartException.class)\n    public Result<String> missingServletRequestPartException(MissingServletRequestPartException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u9644\u4ef6\u7684\u540d\u79f0:\", e.getRequestPartName()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(AsyncRequestTimeoutException.class)\n    public Result<String> asyncRequestTimeoutException(AsyncRequestTimeoutException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u5f02\u6b65\u8bf7\u6c42\u8d85\u65f6\u5f02\u5e38\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(BizException.class)\n    public Result<Object> bizException(BizException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(e.getMessage() + \":\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(ValidException.class)\n    public Result<Object> validException(ValidException e) {\n        return Result.fail(JSONUtil.toList(e.getMessage(), List.class));\n    }\n}\n", "public class GobalExceptionHandler {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @ExceptionHandler({ConstraintViolationException.class})\n    public Result<String> constraintViolationExceptionHandler(ConstraintViolationException violationException) throws JsonProcessingException {\n        log.error(\"valid exception info:{}\", violationException.getMessage());\n        return Result.fail(violationException.getMessage());\n    }\n\n    @ExceptionHandler({BindException.class})\n    public Result<Map<String,String>> bindExceptionHandler(BindException e) {\n        return Result.fail(e.getBindingResult().getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage)));\n    }\n\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result<List<FieldError>> methodArgumentNotValidException(MethodArgumentNotValidException e) {\n        return Result.fail(e.getBindingResult().getFieldErrors().stream().collect(Collectors.toList()));\n    }\n\n    @ExceptionHandler(NoHandlerFoundException.class)\n    public Result<String> noHandlerFoundException(NoHandlerFoundException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u4f20\u5165\u7684\u5934\u4fe1\u606f:\", e.getHeaders().toSingleValueMap()).put(\"\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getHttpMethod()).put(\"\u8bf7\u6c42\u7684url:\", e.getRequestURL()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n    public Result<String> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getMethod()).put(\"\u652f\u6301\u8bf7\u6c42\u7684\u65b9\u6cd5:\", e.getSupportedMethods()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMediaTypeNotSupportedException.class)\n    public Result<String> httpMediaTypeNotSupportedException(HttpMediaTypeNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7684\u6587\u4ef6\u7c7b\u578b:\", e.getContentType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(MissingPathVariableException.class)\n    public Result<String> missingPathVariableException(MissingPathVariableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8def\u5f84\u53c2\u6570\u7684\u540d\u79f0:\", e.getVariableName()).put(\"\u8bf7\u6c42\u53c2\u6570:\", e.getParameter()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(MissingServletRequestParameterException.class)\n    public Result<String> missingServletRequestParameterException(MissingServletRequestParameterException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u53c2\u6570\u7684\u540d\u79f0:\", e.getParameterName()).put(\"\u8bf7\u6c42\u53c2\u6570\u7684\u7c7b\u578b:\", e.getParameterType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(TypeMismatchException.class)\n    public Result<Object> typeMismatchException(TypeMismatchException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8981\u6c42\u7684\u7c7b\u578b:\", e.getRequiredType()).put(\"\u4f20\u5165\u7684\u503c:\", e.getValue()).put(\"\u5c5e\u6027\u540d\u79f0:\", e.getPropertyName()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail().code(Integer.parseInt(e.getErrorCode())).message(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMessageNotReadableException.class)\n    public Result<String> httpMessageNotReadableException(HttpMessageNotReadableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8f93\u5165\u7684\u6d88\u606f\u6d41\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMessageNotWritableException.class)\n    public Result<String> httpMessageNotWritableException(HttpMessageNotWritableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8f93\u51fa\u7684\u6d88\u606f\u6d41\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)\n    public Result<String> httpMediaTypeNotAcceptableException(HttpMediaTypeNotAcceptableException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u5a92\u4f53\u7c7b\u578b\u4e0d\u652f\u6301\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(ServletRequestBindingException.class)\n    public Result<String> servletRequestBindingException(ServletRequestBindingException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u7ed1\u5b9a\u5f02\u5e38\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(ConversionNotSupportedException.class)\n    public Result<String> conversionNotSupportedException(ConversionNotSupportedException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u4e0d\u652f\u6301\u8f6c\u6362\u5f02\u5e38\u7684\u5c5e\u6027\u540d\u79f0:\", e.getPropertyName()).put(\"\u4e0d\u652f\u6301\u8f6c\u6362\u5f02\u5e38\u7684\u6240\u9700\u7684\u7c7b\u578b:\", e.getRequiredType()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(MissingServletRequestPartException.class)\n    public Result<String> missingServletRequestPartException(MissingServletRequestPartException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u8bf7\u6c42\u9644\u4ef6\u7684\u540d\u79f0:\", e.getRequestPartName()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n\n    @ExceptionHandler(AsyncRequestTimeoutException.class)\n    public Result<String> asyncRequestTimeoutException(AsyncRequestTimeoutException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(\"\u5f02\u6b65\u8bf7\u6c42\u8d85\u65f6\u5f02\u5e38\u7684\u5806\u6808\u4fe1\u606f:\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(BizException.class)\n    public Result<Object> bizException(BizException e) throws JsonProcessingException {\n        Map<Object, Object> errorMap = MapUtil.builder().put(e.getMessage() + \":\", e.getStackTrace()).map();\n        log.error(objectMapper.writeValueAsString(errorMap));\n        return Result.fail(e.getMessage());\n    }\n\n    @ExceptionHandler(ValidException.class)\n    public Result<Object> validException(ValidException e) {\n        return Result.fail(JSONUtil.toList(e.getMessage(), List.class));\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/handler/MyMetaObjectHandler.java", "chunked_list": ["package top.sssd.ddns.handler;\n\nimport com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\n\nimport static top.sssd.ddns.common.constant.DDNSConstant.*;", "\nimport static top.sssd.ddns.common.constant.DDNSConstant.*;\n\n/**\n * @author sssd\n */\n@Component\n@Slf4j\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    /**\n     * @author sssd\n     */\n\n\n    @Override", "public class MyMetaObjectHandler implements MetaObjectHandler {\n\n    /**\n     * @author sssd\n     */\n\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        this.strictInsertFill(metaObject, CREATE_DATE, LocalDateTime.class, LocalDateTime.now());\n        this.strictInsertFill(metaObject, UPDATE_DATE, LocalDateTime.class, LocalDateTime.now());\n\n        this.strictInsertFill(metaObject, CREATOR, Long.class, 0L);\n        this.strictInsertFill(metaObject, UPDATER, Long.class, 0L);\n\n    }\n\n    @Override", "    public void insertFill(MetaObject metaObject) {\n        this.strictInsertFill(metaObject, CREATE_DATE, LocalDateTime.class, LocalDateTime.now());\n        this.strictInsertFill(metaObject, UPDATE_DATE, LocalDateTime.class, LocalDateTime.now());\n\n        this.strictInsertFill(metaObject, CREATOR, Long.class, 0L);\n        this.strictInsertFill(metaObject, UPDATER, Long.class, 0L);\n\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.strictUpdateFill(metaObject,UPDATE_DATE,LocalDateTime.class, LocalDateTime.now());\n        this.strictUpdateFill(metaObject,UPDATER,Long.class, 0L);\n    }\n}\n", "    public void updateFill(MetaObject metaObject) {\n        this.strictUpdateFill(metaObject,UPDATE_DATE,LocalDateTime.class, LocalDateTime.now());\n        this.strictUpdateFill(metaObject,UPDATER,Long.class, 0L);\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/handler/EasySqlInjector.java", "chunked_list": ["package top.sssd.ddns.handler;\n\nimport com.baomidou.mybatisplus.core.injector.AbstractMethod;\nimport com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;\nimport com.baomidou.mybatisplus.core.metadata.TableInfo;\nimport com.baomidou.mybatisplus.extension.injector.methods.InsertBatchSomeColumn;\n\nimport java.util.List;\n\n/**", "\n/**\n *  \u6570\u636e\u6279\u91cf\u63d2\u5165\u63a5\u53e3\n * @author sssd\n */\npublic class EasySqlInjector extends DefaultSqlInjector {\n    @Override\n    public List<AbstractMethod> getMethodList(Class<?> mapperClass, TableInfo tableInfo) {\n        List<AbstractMethod> methodList = super.getMethodList(mapperClass, tableInfo);\n        // \u6dfb\u52a0InsertBatchSomeColumn\u65b9\u6cd5\n        methodList.add(new InsertBatchSomeColumn());\n        return methodList;\n    }\n}\n\n\n\n\n"]}
{"filename": "src/main/java/top/sssd/ddns/model/entity/PageEntity.java", "chunked_list": ["package top.sssd.ddns.model.entity;\n\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author sssd", "/**\n * @author sssd\n * @careate 2023-04-18-15:13\n */\n@Data\npublic class PageEntity implements Serializable {\n    @TableField(exist = false)\n    @JsonProperty(\"page\")\n    private Long page ;\n    @TableField(exist = false)\n    @JsonProperty(\"pageSize\")\n    private Long pageSize ;\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/model/entity/ParsingRecord.java", "chunked_list": ["package top.sssd.ddns.model.entity;\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport lombok.Data;\nimport top.sssd.ddns.common.valid.ValidGroup;\n\nimport javax.validation.constraints.NotBlank;", "\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * <p>\n * \u89e3\u6790\u8bb0\u5f55\u8868\n * </p>", " * \u89e3\u6790\u8bb0\u5f55\u8868\n * </p>\n *\n * @author sssd\n * @since 2023-03-19\n */\n@TableName(\"parsing_record\")\n@Data\npublic class ParsingRecord extends PageEntity implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @NotNull(groups = ValidGroup.UpdateGroup.class, message = \"id\u4e0d\u80fd\u4e3a\u7a7a\")\n    @TableId(type = IdType.ASSIGN_ID)\n    @JsonSerialize(using = ToStringSerializer.class)\n    private Long id;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 3 cloudflare\")\n    private Integer serviceProvider;\n\n    @TableField(exist = false)\n    private String serviceProviderName;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u5bc6\u94a5key\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 \")\n    private String serviceProviderId;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u5bc6\u94a5value\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 3 cloudflare\")\n    private String serviceProviderSecret;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u89e3\u6790\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a,\u89e3\u6790\u7c7b\u578b:1 AAAA 2 A\")\n    private Integer recordType;\n\n    @TableField(exist = false)\n    private String recordTypeName;\n\n    private String ip;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u83b7\u53d6ip\u65b9\u5f0f\u4e0d\u80fd\u4e3a\u7a7a,\u83b7\u53d6ip\u65b9\u5f0f: 1 interface 2 network 3 cmd\")\n    private Integer getIpMode;\n\n    private String getIpModeValue;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u57df\u540d\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String domain;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u72b6\u6001\u4e0d\u80fd\u4e3a\u7a7a\")\n    private Integer state;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u66f4\u65b0\u9891\u7387\u4e0d\u80fd\u4e3a\u7a7a\")\n    private Integer updateFrequency;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createDate;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateDate;\n\n    @TableField(fill = FieldFill.INSERT)\n    private Long creator;\n\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updater;\n\n\n}\n", "public class ParsingRecord extends PageEntity implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @NotNull(groups = ValidGroup.UpdateGroup.class, message = \"id\u4e0d\u80fd\u4e3a\u7a7a\")\n    @TableId(type = IdType.ASSIGN_ID)\n    @JsonSerialize(using = ToStringSerializer.class)\n    private Long id;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 3 cloudflare\")\n    private Integer serviceProvider;\n\n    @TableField(exist = false)\n    private String serviceProviderName;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u5bc6\u94a5key\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 \")\n    private String serviceProviderId;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u670d\u52a1\u63d0\u4f9b\u5546\u5bc6\u94a5value\u4e0d\u80fd\u4e3a\u7a7a,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91,1 \u963f\u91cc\u4e91 2 \u817e\u8baf\u4e91 3 cloudflare\")\n    private String serviceProviderSecret;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u89e3\u6790\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a,\u89e3\u6790\u7c7b\u578b:1 AAAA 2 A\")\n    private Integer recordType;\n\n    @TableField(exist = false)\n    private String recordTypeName;\n\n    private String ip;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u83b7\u53d6ip\u65b9\u5f0f\u4e0d\u80fd\u4e3a\u7a7a,\u83b7\u53d6ip\u65b9\u5f0f: 1 interface 2 network 3 cmd\")\n    private Integer getIpMode;\n\n    private String getIpModeValue;\n\n    @NotBlank(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u57df\u540d\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String domain;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u72b6\u6001\u4e0d\u80fd\u4e3a\u7a7a\")\n    private Integer state;\n\n    @NotNull(groups = {ValidGroup.SaveGroup.class, ValidGroup.UpdateGroup.class}, message = \"\u66f4\u65b0\u9891\u7387\u4e0d\u80fd\u4e3a\u7a7a\")\n    private Integer updateFrequency;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @TableField(fill = FieldFill.INSERT)\n    private LocalDateTime createDate;\n\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private LocalDateTime updateDate;\n\n    @TableField(fill = FieldFill.INSERT)\n    private Long creator;\n\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Long updater;\n\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/model/entity/JobTask.java", "chunked_list": ["package top.sssd.ddns.model.entity;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\n\n/**\n * @author sssd", "/**\n * @author sssd\n * @careate 2023-05-02-11:01\n */\n@Data\n@TableName(\"job_task\")\npublic class JobTask {\n\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String name;\n\n    @TableField(\"group_name\")\n    private String groupName;\n\n    @TableField(\"cron_expression\")\n    private String cronExpression;\n\n    @TableField(\"class_name\")\n    private String className;\n\n    private String description;\n\n    private Integer status;\n\n    @TableField(exist = false)\n    private Object executeParams;\n}\n\n"]}
{"filename": "src/main/java/top/sssd/ddns/controller/ParsingRecordController.java", "chunked_list": ["package top.sssd.ddns.controller;\n\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport top.sssd.ddns.common.Result;\nimport top.sssd.ddns.common.utils.PageUtils;\nimport top.sssd.ddns.common.valid.ValidGroup;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.IParsingRecordService;\n", "import top.sssd.ddns.service.IParsingRecordService;\n\nimport javax.annotation.Resource;\n\n/**\n * @author sssd\n * @careate 2023-05-02-5:09\n */\n@RestController\n@RequestMapping(\"parsingRecord\")", "@RestController\n@RequestMapping(\"parsingRecord\")\n@Validated\npublic class ParsingRecordController {\n\n    @Resource\n    private IParsingRecordService parsingRecordService;\n\n    @PostMapping(\"page\")\n    public Result<PageUtils<ParsingRecord>> queryPage(@RequestBody ParsingRecord parsingRecord) {\n        PageUtils<ParsingRecord> page = parsingRecordService.queryPage(parsingRecord);\n        return Result.ok(page);\n    }\n\n\n    @GetMapping(\"{id}\")\n    public Result<ParsingRecord> getId(@PathVariable(\"id\") Long id){\n        return Result.ok(parsingRecordService.getById(id));\n    }\n\n    @PostMapping(\"add\")\n    public Result<String> add(@RequestBody\n                      @Validated(ValidGroup.SaveGroup.class) ParsingRecord parsingRecord) throws Exception {\n        parsingRecordService.add(parsingRecord);\n        return Result.ok();\n    }\n\n    @PostMapping(\"modify\")\n    public Result<String> modify(@RequestBody\n                         @Validated(ValidGroup.UpdateGroup.class) ParsingRecord parsingRecord) throws Exception {\n        parsingRecordService.modify(parsingRecord);\n        return Result.ok();\n    }\n\n    @DeleteMapping(\"delete/{id}\")\n    public Result<String> delete(@PathVariable Long id) throws Exception {\n        parsingRecordService.delete(id);\n        return Result.ok();\n    }\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/factory/DynamicDnsServiceFactory.java", "chunked_list": ["package top.sssd.ddns.factory;\n\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.service.impl.AliDynamicDnsServiceImpl;\nimport top.sssd.ddns.service.impl.CloudflareDynamicDnsServiceImpl;\nimport top.sssd.ddns.service.impl.TencentDynamicDnsServiceImpl;\n\n/**\n * @author sssd\n * @careate 2023-05-06-17:07", " * @author sssd\n * @careate 2023-05-06-17:07\n */\npublic class DynamicDnsServiceFactory {\n\n    private DynamicDnsServiceFactory(){}\n\n    public static DynamicDnsService getServiceInstance(Integer serviceProvider) {\n        DynamicDnsService service;\n        switch (serviceProvider) {\n            case 1:\n                service = new AliDynamicDnsServiceImpl();\n                break;\n            case 2:\n                service = new TencentDynamicDnsServiceImpl();\n                break;\n            case 3:\n                service = new CloudflareDynamicDnsServiceImpl();\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unsupported service provider: \" + serviceProvider);\n        }\n        return service;\n    }\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/IJobTaskService.java", "chunked_list": ["package top.sssd.ddns.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport top.sssd.ddns.model.entity.JobTask;\n\nimport java.util.List;\n\n/**\n * @author sssd\n * @careate 2023-05-02-11:05", " * @author sssd\n * @careate 2023-05-02-11:05\n */\npublic interface IJobTaskService extends IService<JobTask> {\n    /**\n     * \u6dfb\u52a0\u4efb\u52a1\n     * @param jobTask \u4efb\u52a1\u5b9e\u4f53\n     * @return boolean\n     */\n    boolean addJobTask(JobTask jobTask);\n\n    /**\n     * \u66f4\u65b0\u4efb\u52a1\n     * @param jobTask \u4efb\u52a1\u5b9e\u4f53\n     * @return boolean\n     */\n    boolean updateJobTask(JobTask jobTask);\n\n    /**\n     * \u5220\u9664\u4efb\u52a1\n     * @param id \u4efb\u52a1ID\n     * @return boolean\n     */\n    boolean deleteJobTask(Integer id);\n\n    /**\n     * \u83b7\u53d6\u6307\u5b9a\u4efb\u52a1\n     * @param id \u4efb\u52a1ID\n     * @return JobTask\n     */\n    JobTask getJobTaskById(Integer id);\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u4efb\u52a1\u5217\u8868\n     * @return List<JobTask>\n     */\n    List<JobTask> listAllJobTasks();\n\n    /**\n     * \u542f\u52a8\u4efb\u52a1\n     * @param id \u4efb\u52a1ID\n     * @return boolean\n     */\n    boolean startJobTask(Integer id);\n\n    /**\n     * \u505c\u6b62\u4efb\u52a1\n     * @param id \u4efb\u52a1ID\n     * @return boolean\n     */\n    boolean stopJobTask(Integer id);\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/IParsingRecordService.java", "chunked_list": ["package top.sssd.ddns.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.tencentcloudapi.common.exception.TencentCloudSDKException;\nimport top.sssd.ddns.common.utils.PageUtils;\nimport top.sssd.ddns.model.entity.ParsingRecord;\n\n/**\n * <p>\n * \u89e3\u6790\u8bb0\u5f55\u8868 \u670d\u52a1\u7c7b", " * <p>\n * \u89e3\u6790\u8bb0\u5f55\u8868 \u670d\u52a1\u7c7b\n * </p>\n *\n * @author sssd\n * @since 2023-03-19\n */\npublic interface IParsingRecordService extends IService<ParsingRecord> {\n\n    /**\n     * \u6dfb\u52a0\u89e3\u6790\u8bb0\u5f55\n     * @param parsingRecord\n     */\n    void add(ParsingRecord parsingRecord) throws Exception;\n\n    void modify(ParsingRecord parsingRecord) throws Exception;\n\n    void delete(Long id) throws Exception;\n\n    PageUtils<ParsingRecord> queryPage(ParsingRecord parsingRecord);\n\n    String getIp(ParsingRecord parsingRecord);\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/DynamicDnsService.java", "chunked_list": ["package top.sssd.ddns.service;\n\nimport top.sssd.ddns.model.entity.ParsingRecord;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\n\n/**\n * @author sssd\n * @careate 2023-03-19-21:43", " * @author sssd\n * @careate 2023-03-19-21:43\n */\npublic interface DynamicDnsService {\n\n    /**\n     * \u901a\u8fc7\u57df\u540d\u53ca\u5bc6\u94a5\u5224\u65ad\u662f\u5426\u5b58\u5728\n     * @param serviceProviderId\n     * @param serviceProviderSecret\n     * @param subDomain\n     * @param recordType\n     * @return\n     */\n    boolean exist(@NotBlank(message = \"\u4f20\u5165\u7684serviceProviderId\u4e0d\u80fd\u4e3a\u7a7a\") String serviceProviderId,\n                  String serviceProviderSecret,@NotBlank(message = \"\u4f20\u5165\u7684\u5b50\u57df\u540d\u4e0d\u80fd\u4e3a\u7a7a\") String subDomain,\n                  @NotBlank(message = \"\u4f20\u5165\u7684\u89e3\u6790\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\") String recordType) throws Exception;\n\n    /**\n     * \u65b0\u589e\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param parsingRecord \u89e3\u6790\u5bf9\u8c61\n     */\n    void add(@NotNull(message = \"\u4f20\u5165\u7684\u89e3\u6790\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\") ParsingRecord parsingRecord,String ip) throws Exception;\n\n    /**\n     * \u66f4\u65b0\u89e3\u6790\u8bb0\u5f55\n     *\n     * @param parsingRecord \u89e3\u6790\u5bf9\u8c61\n     */\n    void update(@NotNull(message = \"\u4f20\u5165\u7684\u89e3\u6790\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\") ParsingRecord parsingRecord,String ip,String recordId) throws Exception;\n\n\n    /**\n     * \u83b7\u53d6\u670d\u52a1\u4e0a\u89e3\u6790\u8bb0\u5f55ID\n     * @param parsingRecord\n     * @param ip\n     * @return\n     */\n    String getRecordId(@NotNull(message = \"\u4f20\u5165\u7684\u89e3\u6790\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\") ParsingRecord parsingRecord,String ip) throws Exception;\n\n    /**\n     * \u6839\u636e\u89e3\u6790\u8bb0\u5f55Id\u5220\u9664\u8bb0\u5f55\n     * @param parsingRecord\n     * @param ip\n     */\n    void remove(@NotNull(message = \"\u4f20\u5165\u7684\u89e3\u6790\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\") ParsingRecord parsingRecord, String ip) throws Exception;\n\n\n    /**\n     * \u6839\u636e\u89e3\u6790\u8bb0\u5f55\u83b7\u53d6\u670d\u52a1\u5546\u4e2d\u7684ip\n     * @param parsingRecord\n     * @return\n     */\n    String getIpBySubDomainWithType(@NotNull(message = \"\u4f20\u5165\u7684\u89e3\u6790\u5bf9\u8c61\u4e0d\u80fd\u4e3a\u7a7a\") ParsingRecord parsingRecord) throws Exception;\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/impl/JobTaskServiceImpl.java", "chunked_list": ["package top.sssd.ddns.service.impl;\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.quartz.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport top.sssd.ddns.common.BizException;\nimport top.sssd.ddns.mapper.JobTaskMapper;\nimport top.sssd.ddns.model.entity.JobTask;", "import top.sssd.ddns.mapper.JobTaskMapper;\nimport top.sssd.ddns.model.entity.JobTask;\nimport top.sssd.ddns.service.IJobTaskService;\n\nimport java.util.List;\n\n/**\n * @author sssd\n * @careate 2023-05-02-11:06\n */", " * @careate 2023-05-02-11:06\n */\n@Service\n@Slf4j\npublic class JobTaskServiceImpl extends ServiceImpl<JobTaskMapper, JobTask> implements IJobTaskService {\n    @Autowired\n    private Scheduler scheduler;\n\n    @Override\n    public boolean addJobTask(JobTask jobTask) {\n        boolean result = this.save(jobTask);", "    public boolean addJobTask(JobTask jobTask) {\n        boolean result = this.save(jobTask);\n        if (result) {\n            JobKey jobKey = new JobKey(jobTask.getName(), jobTask.getGroupName());\n            TriggerKey triggerKey = new TriggerKey(jobTask.getName(), jobTask.getGroupName());\n            try {\n                JobDetail jobDetail = JobBuilder.newJob((Class<? extends Job>) Class.forName(jobTask.getClassName()))\n                        .withIdentity(jobKey)\n                        .build();\n                jobDetail.getJobDataMap().put(\"executeParams\", jobTask.getExecuteParams());\n                CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(jobTask.getCronExpression())\n                        .withMisfireHandlingInstructionDoNothing();\n\n                CronTrigger cronTrigger = TriggerBuilder.newTrigger()\n                        .withIdentity(triggerKey)\n                        .withSchedule(cronScheduleBuilder)\n                        .startNow()\n                        .build();\n\n                scheduler.scheduleJob(jobDetail, cronTrigger);\n            } catch (ClassNotFoundException | SchedulerException e) {\n                log.error(\"addJobTask failed\", e);\n                throw new BizException(\"addJobTask failed\");\n            }\n        }\n        return result;\n    }\n\n    @Override", "    public boolean updateJobTask(JobTask jobTask) {\n        boolean result = this.updateById(jobTask);\n        if (result) {\n            JobKey jobKey = new JobKey(jobTask.getName(), jobTask.getGroupName());\n            TriggerKey triggerKey = new TriggerKey(jobTask.getName(), jobTask.getGroupName());\n            try {\n                CronTrigger cronTrigger = (CronTrigger) scheduler.getTrigger(triggerKey);\n\n                if (cronTrigger == null) {\n                    log.error(\"updateJobTask failed: trigger not found\");\n                    throw new BizException(\"updateJobTask failed: trigger not found\");\n                }\n\n                JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n                jobDetail.getJobDataMap().put(\"executeParams\", jobTask.getExecuteParams());\n\n                CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(jobTask.getCronExpression())\n                        .withMisfireHandlingInstructionDoNothing();\n\n                cronTrigger = cronTrigger.getTriggerBuilder()\n                        .withIdentity(triggerKey)\n                        .withSchedule(cronScheduleBuilder)\n                        .build();\n\n                scheduler.rescheduleJob(triggerKey, cronTrigger);\n            } catch (SchedulerException e) {\n                log.error(\"updateJobTask failed\", e);\n                throw new BizException(\"updateJobTask failed\");\n            }\n        }\n        return result;\n    }\n\n    @Override", "                if (cronTrigger == null) {\n                    log.error(\"updateJobTask failed: trigger not found\");\n                    throw new BizException(\"updateJobTask failed: trigger not found\");\n                }\n\n                JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n                jobDetail.getJobDataMap().put(\"executeParams\", jobTask.getExecuteParams());\n\n                CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(jobTask.getCronExpression())\n                        .withMisfireHandlingInstructionDoNothing();\n\n                cronTrigger = cronTrigger.getTriggerBuilder()\n                        .withIdentity(triggerKey)\n                        .withSchedule(cronScheduleBuilder)\n                        .build();\n\n                scheduler.rescheduleJob(triggerKey, cronTrigger);\n            } catch (SchedulerException e) {\n                log.error(\"updateJobTask failed\", e);\n                throw new BizException(\"updateJobTask failed\");\n            }\n        }\n        return result;\n    }\n\n    @Override", "    public boolean deleteJobTask(Integer id) {\n        JobTask jobTask = this.getById(id);\n        if (jobTask != null) {\n            JobKey jobKey = new JobKey(jobTask.getName(), jobTask.getGroupName());\n            TriggerKey triggerKey = new TriggerKey(jobTask.getName(), jobTask.getGroupName());\n            try {\n                scheduler.pauseTrigger(triggerKey);\n                scheduler.unscheduleJob(triggerKey);\n                scheduler.deleteJob(jobKey);\n            } catch (SchedulerException e) {\n                log.error(\"deleteJobTask failed\", e);\n                throw new BizException(\"deleteJobTask failed\");\n            }\n        }\n        return this.removeById(id);\n    }\n\n    @Override", "    public JobTask getJobTaskById(Integer id) {\n        return this.getById(id);\n    }\n\n    @Override\n    public List<JobTask> listAllJobTasks() {\n        return this.list();\n    }\n\n    @Override\n    public boolean startJobTask(Integer id) {\n        JobTask jobTask = this.getById(id);", "    public boolean startJobTask(Integer id) {\n        JobTask jobTask = this.getById(id);\n        if (jobTask != null) {\n            JobKey jobKey = new JobKey(jobTask.getName(), jobTask.getGroupName());\n            try {\n                scheduler.resumeJob(jobKey);\n            } catch (SchedulerException e) {\n                log.error(\"startJobTask failed\", e);\n                throw new BizException(\"startJobTask failed\");\n            }\n            jobTask.setStatus(1);\n            this.updateById(jobTask);\n            return true;\n        }\n        return false;\n    }\n\n    @Override", "    public boolean stopJobTask(Integer id) {\n        JobTask jobTask = this.getById(id);\n        if (jobTask != null) {\n            JobKey jobKey = new JobKey(jobTask.getName(), jobTask.getGroupName());\n            try {\n                scheduler.pauseJob(jobKey);\n            } catch (SchedulerException e) {\n                log.error(\"stopJobTask failed\", e);\n                throw new BizException(\"stopJobTask failed\");\n            }\n            jobTask.setStatus(0);\n            this.updateById(jobTask);\n            return true;\n        }\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/impl/CloudflareDynamicDnsServiceImpl.java", "chunked_list": ["package top.sssd.ddns.service.impl;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport top.sssd.ddns.common.BizException;\nimport top.sssd.ddns.common.enums.RecordTypeEnum;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.utils.CloudflareUtils;", "import top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.utils.CloudflareUtils;\n\n/**\n * @author sssd\n * @careate 2023-05-06-17:13\n */\n@Service\n@Slf4j\npublic class CloudflareDynamicDnsServiceImpl implements DynamicDnsService {\n\n    @Override", "@Slf4j\npublic class CloudflareDynamicDnsServiceImpl implements DynamicDnsService {\n\n    @Override\n    public boolean exist(String serviceProviderId, String serviceProviderSecret, String subDomain, String recordType) {\n        CloudflareUtils.CloudflareQueryResponse cloudflareResponse = CloudflareUtils.getSubDomainParseList(serviceProviderId, serviceProviderSecret, subDomain, recordType);\n        return cloudflareResponse.getResult().size() > 0;\n    }\n\n    @Override\n    public void add(ParsingRecord parsingRecord, String ip) throws JsonProcessingException {\n        CloudflareUtils.CloudflareResponse cloudflareResponse =\n                CloudflareUtils.add(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), parsingRecord.getDomain(), RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);", "    public void add(ParsingRecord parsingRecord, String ip) throws JsonProcessingException {\n        CloudflareUtils.CloudflareResponse cloudflareResponse =\n                CloudflareUtils.add(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), parsingRecord.getDomain(), RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);\n        if (Boolean.FALSE.equals(cloudflareResponse.getSuccess())) {\n            log.error(\"\u57df\u540d\u6dfb\u52a0\u5931\u8d25:{}\", parsingRecord);\n            throw new BizException(\"\u57df\u540d\u6dfb\u52a0\u5931\u8d25\");\n        }\n\n    }\n\n    @Override", "    public void update(ParsingRecord parsingRecord, String ip, String recordId) {\n        CloudflareUtils.CloudflareResponse cloudflareResponse = CloudflareUtils.update(parsingRecord.getServiceProviderId(),\n                parsingRecord.getServiceProviderSecret(),\n                parsingRecord.getDomain(),\n                RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip,recordId);\n        if (Boolean.FALSE.equals(cloudflareResponse.getSuccess())) {\n            log.error(\"\u57df\u540d\u66f4\u65b0\u5931\u8d25:{}\", parsingRecord);\n            throw new BizException(\"\u57df\u540d\u66f4\u65b0\u5931\u8d25\");\n        }\n    }\n\n    @Override", "    public String getRecordId(ParsingRecord parsingRecord, String ip) {\n        return CloudflareUtils\n                .getId(parsingRecord.getServiceProviderId()\n                        , parsingRecord.getServiceProviderSecret()\n                        , parsingRecord.getDomain()\n                        , RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);\n    }\n\n    @Override\n    public void remove(ParsingRecord parsingRecord, String ip) {\n        CloudflareUtils.CloudflareResponse cloudflareResponse = CloudflareUtils.delete(parsingRecord.getServiceProviderId()\n                , parsingRecord.getServiceProviderSecret()\n                , parsingRecord.getDomain()\n                , RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);", "    public void remove(ParsingRecord parsingRecord, String ip) {\n        CloudflareUtils.CloudflareResponse cloudflareResponse = CloudflareUtils.delete(parsingRecord.getServiceProviderId()\n                , parsingRecord.getServiceProviderSecret()\n                , parsingRecord.getDomain()\n                , RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);\n        if (Boolean.FALSE.equals(cloudflareResponse.getSuccess())) {\n            log.error(\"\u57df\u540d\u5220\u9664\u5931\u8d25:{}\", parsingRecord);\n            throw new BizException(\"\u57df\u540d\u5220\u9664\u5931\u8d25\");\n        }\n    }\n\n    @Override", "    public String getIpBySubDomainWithType(ParsingRecord parsingRecord) {\n        return CloudflareUtils.getIpBySubDomainWithType(parsingRecord.getServiceProviderId()\n                , parsingRecord.getServiceProviderSecret()\n                , parsingRecord.getDomain()\n                , RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()));\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/impl/ParsingRecordServiceImpl.java", "chunked_list": ["package top.sssd.ddns.service.impl;\n\nimport cn.hutool.http.HttpUtil;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.tencentcloudapi.common.exception.TencentCloudSDKException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\nimport top.sssd.ddns.common.BizException;", "import org.springframework.util.StringUtils;\nimport top.sssd.ddns.common.BizException;\nimport top.sssd.ddns.common.enums.RecordTypeEnum;\nimport top.sssd.ddns.common.enums.ServiceProviderEnum;\nimport top.sssd.ddns.common.enums.UpdateFrequencyEnum;\nimport top.sssd.ddns.common.utils.PageUtils;\nimport top.sssd.ddns.factory.DynamicDnsServiceFactory;\nimport top.sssd.ddns.mapper.ParsingRecordMapper;\nimport top.sssd.ddns.model.entity.JobTask;\nimport top.sssd.ddns.model.entity.ParsingRecord;", "import top.sssd.ddns.model.entity.JobTask;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.service.IJobTaskService;\nimport top.sssd.ddns.service.IParsingRecordService;\nimport top.sssd.ddns.task.DynamicDnsJob;\n\nimport javax.annotation.Resource;\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n/**\n * <p>\n * \u89e3\u6790\u8bb0\u5f55\u8868 \u670d\u52a1\u5b9e\u73b0\u7c7b\n * </p>", " * \u89e3\u6790\u8bb0\u5f55\u8868 \u670d\u52a1\u5b9e\u73b0\u7c7b\n * </p>\n *\n * @author sssd\n * @since 2023-03-19\n */\n@Service\n@Slf4j\npublic class ParsingRecordServiceImpl extends ServiceImpl<ParsingRecordMapper, ParsingRecord> implements IParsingRecordService {\n\n    @Resource\n    private IJobTaskService jobTaskService;\n\n    @Override", "public class ParsingRecordServiceImpl extends ServiceImpl<ParsingRecordMapper, ParsingRecord> implements IParsingRecordService {\n\n    @Resource\n    private IJobTaskService jobTaskService;\n\n    @Override\n    public void add(ParsingRecord parsingRecord) throws Exception {\n        DynamicDnsService dynamicDnsService = DynamicDnsServiceFactory.getServiceInstance(parsingRecord.getServiceProvider());\n\n        String ip = getIp(parsingRecord);\n        //\u540e\u7aef\u552f\u4e00\u6027\u6821\u9a8c\n        ParsingRecord checkParsingRecord = this.lambdaQuery()\n                .eq(ParsingRecord::getServiceProvider, parsingRecord.getServiceProvider())\n                .eq(ParsingRecord::getRecordType, parsingRecord.getRecordType())\n                .eq(ParsingRecord::getDomain, parsingRecord.getDomain())\n                .eq(ParsingRecord::getIp, parsingRecord.getIp())\n                .last(\"limit 1\").one();", "        if (Objects.nonNull(checkParsingRecord)) {\n            throw new BizException(\"\u540c\u4e00\u670d\u52a1\u5546,\u540c\u4e00\u89e3\u6790\u7c7b\u578b,\u540c\u4e00ip,\u4e0d\u80fd\u91cd\u590d\u6dfb\u52a0\");\n        }\n\n        if (dynamicDnsService.exist(parsingRecord.getServiceProviderId(),\n                parsingRecord.getServiceProviderSecret(),\n                parsingRecord.getDomain(),\n                RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()))) {\n            throw new BizException(\"\u8be5\u8bb0\u5f55\u5df2\u5728\u57df\u540d\u670d\u52a1\u5546\u4e2d\u5b58\u5728\");\n        }\n        dynamicDnsService.add(parsingRecord, ip);\n        this.save(parsingRecord);\n        //\u6dfb\u52a0\u5e76\u542f\u52a8\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\n        addWithStartTask(parsingRecord);\n    }\n\n    @Override", "    public void modify(ParsingRecord parsingRecord) throws Exception {\n        DynamicDnsService dynamicDnsService = DynamicDnsServiceFactory.getServiceInstance(parsingRecord.getServiceProvider());\n\n        ParsingRecord dbParsingRecord = this.getById(parsingRecord.getId());\n        if (Objects.isNull(dbParsingRecord)) {\n            throw new BizException(\"\u8be5\u8bb0\u5f55\u4e0d\u5b58\u5728\");\n        }\n        //\u540e\u7aef\u552f\u4e00\u6027\u6821\u9a8c\n        ParsingRecord checkParsingRecord = this.lambdaQuery()\n                .eq(ParsingRecord::getServiceProvider, parsingRecord.getServiceProvider())\n                .eq(ParsingRecord::getRecordType, parsingRecord.getRecordType())\n                .eq(ParsingRecord::getIp, parsingRecord.getIp())\n                .eq(ParsingRecord::getDomain, parsingRecord.getDomain())\n                .ne(ParsingRecord::getId, parsingRecord.getId())\n                .last(\"limit 1\").one();", "        if (Objects.nonNull(checkParsingRecord)) {\n            throw new BizException(\"\u540c\u4e00\u670d\u52a1\u5546,\u540c\u4e00\u89e3\u6790\u7c7b\u578b,\u540c\u4e00ip,\u4e0d\u5141\u8bb8\u91cd\u590d\u66f4\u65b0\");\n        }\n\n        // \u5220\u9664\u4e4b\u524d\u7684\u5b9a\u65f6\u4efb\u52a1\n        JobTask one = jobTaskService.lambdaQuery().eq(JobTask::getName, dbParsingRecord.getId().toString()).one();\n        if (Objects.nonNull(one)) {\n            jobTaskService.deleteJobTask(one.getId());\n        }\n\n        if (parsingRecord.getState().equals(0)) {\n            this.updateById(parsingRecord);\n            return;\n        }\n\n        String dnsIp = null;", "        if (parsingRecord.getState().equals(0)) {\n            this.updateById(parsingRecord);\n            return;\n        }\n\n        String dnsIp = null;\n        try {\n            dnsIp = dynamicDnsService.getIpBySubDomainWithType(dbParsingRecord);\n        } catch (TencentCloudSDKException e) {\n            e.printStackTrace();\n        }\n        String recordId = dynamicDnsService.getRecordId(dbParsingRecord, dnsIp);\n\n        String ip = getIp(parsingRecord);\n        dynamicDnsService.update(parsingRecord, ip, recordId);\n        this.updateById(parsingRecord);\n        // \u6dfb\u52a0\u5e76\u542f\u52a8\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\n        addWithStartTask(parsingRecord);\n    }\n\n    private void addWithStartTask(ParsingRecord parsingRecord) {\n        JobTask jobTask = new JobTask();\n        jobTask.setName(parsingRecord.getId().toString());\n        jobTask.setStatus(1);\n        jobTask.setClassName(DynamicDnsJob.class.getName());\n        jobTask.setCronExpression(UpdateFrequencyEnum.getCronExpressionByCode(parsingRecord.getUpdateFrequency()));\n        jobTask.setExecuteParams(parsingRecord);\n        jobTaskService.addJobTask(jobTask);\n    }\n\n    @Override", "    public void delete(Long id) throws Exception {\n        ParsingRecord parsingRecord = this.getById(id);\n        if (Objects.isNull(parsingRecord)) {\n            throw new BizException(\"\u8be5\u8bb0\u5f55\u4e0d\u5b58\u5728\");\n        }\n        DynamicDnsService dynamicDnsService = DynamicDnsServiceFactory.getServiceInstance(parsingRecord.getServiceProvider());\n\n        if (!dynamicDnsService.exist(parsingRecord.getServiceProviderId(),\n                parsingRecord.getServiceProviderSecret(),\n                parsingRecord.getDomain(),\n                RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()))) {\n            throw new BizException(\"\u8be5\u8bb0\u5f55\u5728\u57df\u540d\u670d\u52a1\u5546\u4e2d\u4e0d\u5b58\u5728\");\n        }\n        String ip = getIp(parsingRecord);\n        dynamicDnsService.remove(parsingRecord, ip);\n        this.removeById(id);\n        //  2023/5/2 \u5220\u9664\u5b9a\u65f6\u4efb\u52a1\n        JobTask one = jobTaskService.lambdaQuery().eq(JobTask::getName, parsingRecord.getId()).one();", "        if (Objects.nonNull(one)) {\n            jobTaskService.deleteJobTask(one.getId());\n        }\n    }\n\n    @Override\n    public PageUtils<ParsingRecord> queryPage(ParsingRecord parsingRecord) {\n        Page<ParsingRecord> page = lambdaQuery()\n                .eq(Objects.nonNull(parsingRecord.getServiceProvider()), ParsingRecord::getServiceProvider, parsingRecord.getServiceProvider())\n                .eq(StringUtils.hasText(parsingRecord.getDomain()), ParsingRecord::getDomain, parsingRecord.getDomain())\n                .eq(Objects.nonNull(parsingRecord.getRecordType()), ParsingRecord::getRecordType, parsingRecord.getRecordType())\n                .eq(Objects.nonNull(parsingRecord.getState()), ParsingRecord::getState, parsingRecord.getState())\n                .ge(Objects.nonNull(parsingRecord.getCreateDate()), ParsingRecord::getCreateDate, parsingRecord.getCreateDate())\n                .le(Objects.nonNull(parsingRecord.getUpdateDate()), ParsingRecord::getUpdateDate, parsingRecord.getUpdateDate())\n                .page(new Page<ParsingRecord>(parsingRecord.getPage(), parsingRecord.getPageSize()));\n        List<ParsingRecord> resultList = page.getRecords().stream().map(item -> {\n            String serviceProviderName = ServiceProviderEnum.getNameByIndex(item.getServiceProvider());\n            String recordTypeName = RecordTypeEnum.getNameByIndex(item.getRecordType());\n            item.setServiceProviderName(serviceProviderName);\n            item.setRecordTypeName(recordTypeName);\n            return item;\n        }).collect(Collectors.toList());\n        page.setRecords(resultList);\n        return new PageUtils<ParsingRecord>(page);\n    }\n\n    @Override", "    public String getIp(ParsingRecord parsingRecord) {\n        //\u89e3\u6790\u7c7b\u578b:1 AAAA 2 A\n        Integer getIpMode = parsingRecord.getGetIpMode();\n        //\u83b7\u53d6ip\u65b9\u5f0f: 1 interface 2 network 3 cmd\n        if (getIpMode.equals(1)) {\n            //ipv6\n            List<String> ipInterfaces =\n                    Arrays.asList(\"https://v6.ip.zxinc.org/getip\", \"https://api6.ipify.org\", \"https://api.ip.sb/ip\", \"https://api.myip.la\");\n            Optional<String> any = ipInterfaces.stream().findAny();\n            String ipv6Interface = any.orElse(\"https://v6.ip.zxinc.org/getip\");\n            parsingRecord.setGetIpModeValue(ipv6Interface);\n            parsingRecord.setRecordType(1);\n            String ipv6 = HttpUtil.get(ipv6Interface);\n            parsingRecord.setIp(ipv6);\n            return ipv6;", "        } else if (getIpMode.equals(2)) {\n            //ipv4\n            List<String> ipInterfaces =\n                    Arrays.asList(\"https://ip.3322.net\", \"https://4.ipw.cn\");\n            Optional<String> any = ipInterfaces.stream().findAny();\n            String ipv4Interface = any.orElse(\"https://ip.3322.net\");\n            parsingRecord.setGetIpModeValue(ipv4Interface);\n            parsingRecord.setRecordType(2);\n            String ipv4 = HttpUtil.get(ipv4Interface);\n            parsingRecord.setIp(ipv4);\n            return ipv4;\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/impl/TencentDynamicDnsServiceImpl.java", "chunked_list": ["package top.sssd.ddns.service.impl;\n\nimport com.tencentcloudapi.common.exception.TencentCloudSDKException;\nimport com.tencentcloudapi.dnspod.v20210323.models.RecordListItem;\nimport org.springframework.stereotype.Service;\nimport top.sssd.ddns.common.enums.RecordTypeEnum;\nimport top.sssd.ddns.common.utils.DoMainUtil;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.utils.TencentDnsUtils;", "import top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.utils.TencentDnsUtils;\n\nimport java.util.Objects;\n\n/**\n * @author sssd\n * @careate 2023-05-06-17:11\n */\n@Service\npublic class TencentDynamicDnsServiceImpl implements DynamicDnsService {\n\n\n    @Override", " */\n@Service\npublic class TencentDynamicDnsServiceImpl implements DynamicDnsService {\n\n\n    @Override\n    public boolean exist(String serviceProviderId, String serviceProviderSecret, String domain, String recordType) throws TencentCloudSDKException {\n        String resultDomain = \"\";\n        String subDoMain = \"\";\n        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        RecordListItem[] recordArray = TencentDnsUtils.getRecordList(resultDomain, subDoMain, recordType, serviceProviderId, serviceProviderSecret);\n        return Objects.nonNull(recordArray) && recordArray.length > 0;\n    }\n\n    @Override", "        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        RecordListItem[] recordArray = TencentDnsUtils.getRecordList(resultDomain, subDoMain, recordType, serviceProviderId, serviceProviderSecret);\n        return Objects.nonNull(recordArray) && recordArray.length > 0;\n    }\n\n    @Override", "    public void add(ParsingRecord parsingRecord, String ip) throws TencentCloudSDKException {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = \"\";\n        String subDoMain = \"\";\n        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        TencentDnsUtils.createRecord(resultDomain, subDoMain, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), ip);\n    }\n\n    @Override", "    public void update(ParsingRecord parsingRecord, String ip, String recordId) {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = \"\";\n        String subDoMain = \"\";\n        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        try {\n            TencentDnsUtils.updateRecord(resultDomain, subDoMain, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), ip, Long.parseLong(recordId));\n        } catch (TencentCloudSDKException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override", "        try {\n            TencentDnsUtils.updateRecord(resultDomain, subDoMain, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), ip, Long.parseLong(recordId));\n        } catch (TencentCloudSDKException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public String getRecordId(ParsingRecord parsingRecord, String ip) throws TencentCloudSDKException {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = \"\";\n        String subDoMain = \"\";", "    public String getRecordId(ParsingRecord parsingRecord, String ip) throws TencentCloudSDKException {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = \"\";\n        String subDoMain = \"\";\n        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        Long recordId = TencentDnsUtils.getRecordId(resultDomain, subDoMain, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n        return recordId.toString();\n    }\n\n    @Override", "    public void remove(ParsingRecord parsingRecord, String ip) throws TencentCloudSDKException {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = domain.substring(domain.indexOf('.') + 1);\n        String recordId = getRecordId(parsingRecord, ip);\n        try {\n            TencentDnsUtils.deleteRecord(resultDomain, parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret(), Long.parseLong(recordId));\n        } catch (TencentCloudSDKException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override", "    public String getIpBySubDomainWithType(ParsingRecord parsingRecord) throws TencentCloudSDKException {\n        String domain = parsingRecord.getDomain();\n        String resultDomain = \"\";\n        String subDoMain = \"\";\n        if (DoMainUtil.firstLevel(domain)) {\n            subDoMain = \"@\";\n        } else {\n            resultDomain = domain.substring(domain.indexOf('.') + 1);\n            subDoMain = domain.substring(0, domain.indexOf('.'));\n        }\n        return TencentDnsUtils.getIpBySubDomainWithType(resultDomain, subDoMain, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/service/impl/AliDynamicDnsServiceImpl.java", "chunked_list": ["package top.sssd.ddns.service.impl;\n\nimport com.aliyun.alidns20150109.Client;\nimport com.aliyun.alidns20150109.models.DescribeSubDomainRecordsResponse;\nimport com.aliyun.alidns20150109.models.DescribeSubDomainRecordsResponseBody;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\nimport top.sssd.ddns.common.BizException;", "import org.springframework.util.StringUtils;\nimport top.sssd.ddns.common.BizException;\nimport top.sssd.ddns.common.enums.RecordTypeEnum;\nimport top.sssd.ddns.common.utils.DoMainUtil;\nimport top.sssd.ddns.model.entity.ParsingRecord;\nimport top.sssd.ddns.service.DynamicDnsService;\nimport top.sssd.ddns.utils.AliDnsUtils;\n\n/**\n * @author sssd", "/**\n * @author sssd\n * @careate 2023-03-20-13:41\n */\n@Service\n@Slf4j\npublic class AliDynamicDnsServiceImpl implements DynamicDnsService {\n    @Override\n    public boolean exist(String serviceProviderId, String serviceProviderSecret, String subDomain, String recordType) throws Exception {\n        Client client = AliDnsUtils.createClient(serviceProviderId, serviceProviderSecret);\n        DescribeSubDomainRecordsResponse response = null;", "    public boolean exist(String serviceProviderId, String serviceProviderSecret, String subDomain, String recordType) throws Exception {\n        Client client = AliDnsUtils.createClient(serviceProviderId, serviceProviderSecret);\n        DescribeSubDomainRecordsResponse response = null;\n        try {\n            response = AliDnsUtils.getSubDomainParseList(client, subDomain, recordType);\n        } catch (Exception e) {\n            return false;\n        }\n        if (response.statusCode != HttpStatus.OK.value()) {\n            log.error(\"\u8c03\u7528\u963f\u91cc\u4e91DNS\u89e3\u6790\u5931\u8d25,\u8bf7\u68c0\u67e5\u4f20\u5165\u7684serviceProviderId,serviceProviderSecret,\u57df\u540d\u662f\u5426\u6b63\u786e\");\n            throw new BizException(\"\u8c03\u7528\u963f\u91cc\u4e91DNS\u89e3\u6790\u5931\u8d25,\u8bf7\u68c0\u67e5\u4f20\u5165\u7684serviceProviderId,serviceProviderSecret,\u57df\u540d\u662f\u5426\u6b63\u786e\");\n        }\n        DescribeSubDomainRecordsResponseBody body = response.getBody();\n        return body.getTotalCount() > 0 ;\n    }\n\n    @Override", "        if (response.statusCode != HttpStatus.OK.value()) {\n            log.error(\"\u8c03\u7528\u963f\u91cc\u4e91DNS\u89e3\u6790\u5931\u8d25,\u8bf7\u68c0\u67e5\u4f20\u5165\u7684serviceProviderId,serviceProviderSecret,\u57df\u540d\u662f\u5426\u6b63\u786e\");\n            throw new BizException(\"\u8c03\u7528\u963f\u91cc\u4e91DNS\u89e3\u6790\u5931\u8d25,\u8bf7\u68c0\u67e5\u4f20\u5165\u7684serviceProviderId,serviceProviderSecret,\u57df\u540d\u662f\u5426\u6b63\u786e\");\n        }\n        DescribeSubDomainRecordsResponseBody body = response.getBody();\n        return body.getTotalCount() > 0 ;\n    }\n\n    @Override\n    public void add(ParsingRecord parsingRecord, String ip) throws Exception {\n        //call dns api\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n        String subDoMain = parsingRecord.getDomain();\n        String domain = null;\n        String rr = null;", "    public void add(ParsingRecord parsingRecord, String ip) throws Exception {\n        //call dns api\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n        String subDoMain = parsingRecord.getDomain();\n        String domain = null;\n        String rr = null;\n        if (DoMainUtil.firstLevel(subDoMain)) {\n            domain = subDoMain;\n            rr = \"@\";\n        } else {\n            domain = subDoMain.substring(findNthOccurrence(subDoMain, \".\", 1) + 1);\n            rr = subDoMain.substring(0, findNthOccurrence(subDoMain, \".\", 1));\n        }\n        AliDnsUtils.add(client, domain, rr, RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()), ip);\n    }\n\n", "    public static  int findNthOccurrence(String str, String subStr, int n) {\n        // \u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\n        int count = 0;\n        // \u4ece\u540e\u5f80\u524d\u67e5\u627e\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n        int index = str.lastIndexOf(subStr);\n        // \u5982\u679c\u627e\u5230\u4e86\u5e76\u4e14\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8en\n        while (index != -1 && count < n) {\n            // \u7ee7\u7eed\u5f80\u524d\u67e5\u627e\u4e0b\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n            index = str.lastIndexOf(subStr, index - 1);\n            // \u66f4\u65b0\u51fa\u73b0\u6b21\u6570\n            count++;\n        }\n        // \u8fd4\u56de\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\n        return index;\n    }\n\n\n    @Override", "    public void update(ParsingRecord parsingRecord, String ip,String recordId) throws Exception {\n        //call dns api\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n\n        String subDoMain = parsingRecord.getDomain();\n\n        String rr = null;\n        if (DoMainUtil.firstLevel(subDoMain)) {\n            rr = \"@\";\n        } else {\n            rr = subDoMain.substring(0, findNthOccurrence(subDoMain, \".\", 1));\n        }\n        String recordTypeName = RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType());\n\n        AliDnsUtils.update(client, recordId, rr, recordTypeName, ip);\n    }\n\n    @Override", "    public String getRecordId(ParsingRecord parsingRecord, String ip) throws Exception {\n        //call dns api\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n\n        String subDoMain = parsingRecord.getDomain();\n\n        String recordTypeName = RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType());\n\n        String recordId = AliDnsUtils.getDomainRecordId(client, subDoMain, recordTypeName, ip);;\n        if (StringUtils.isEmpty(recordId)) {\n            throw new BizException(\"\u6ca1\u6709\u8be5\u57df\u540d\u5bf9\u5e94\u7684\u89e3\u6790\u8bb0\u5f55\");\n        }\n        return recordId;\n    }\n\n    @Override", "        if (StringUtils.isEmpty(recordId)) {\n            throw new BizException(\"\u6ca1\u6709\u8be5\u57df\u540d\u5bf9\u5e94\u7684\u89e3\u6790\u8bb0\u5f55\");\n        }\n        return recordId;\n    }\n\n    @Override\n    public void remove(ParsingRecord parsingRecord, String ip) throws Exception {\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n        String recordTypeName = RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType());\n        String recordId = AliDnsUtils.getDomainRecordId(client, parsingRecord.getDomain(), recordTypeName, ip);\n\n        AliDnsUtils.delete(client, recordId);\n    }\n\n    @Override", "    public String getIpBySubDomainWithType(ParsingRecord parsingRecord) throws Exception {\n        Client client = AliDnsUtils.createClient(parsingRecord.getServiceProviderId(), parsingRecord.getServiceProviderSecret());\n        return AliDnsUtils.getIpBySubDomainWithType(client, parsingRecord.getDomain(), RecordTypeEnum.getNameByIndex(parsingRecord.getRecordType()));\n    }\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/mapper/ParsingRecordMapper.java", "chunked_list": ["package top.sssd.ddns.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport top.sssd.ddns.model.entity.ParsingRecord;\n\n/**\n * <p>\n * \u89e3\u6790\u8bb0\u5f55\u8868 Mapper \u63a5\u53e3\n * </p>\n *", " * </p>\n *\n * @author sssd\n * @since 2023-03-19\n */\npublic interface ParsingRecordMapper extends BaseMapper<ParsingRecord> {\n\n}\n"]}
{"filename": "src/main/java/top/sssd/ddns/mapper/JobTaskMapper.java", "chunked_list": ["package top.sssd.ddns.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport top.sssd.ddns.model.entity.JobTask;\n\n/**\n * @author sssd\n * @careate 2023-05-02-11:02\n */\npublic interface JobTaskMapper extends BaseMapper<JobTask> {\n}\n", " */\npublic interface JobTaskMapper extends BaseMapper<JobTask> {\n}\n"]}
