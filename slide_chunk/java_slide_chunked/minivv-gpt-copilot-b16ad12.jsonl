{"filename": "src/main/java/com/minivv/pilot/AppProjectManagerListener.java", "chunked_list": ["package com.minivv.pilot;\n\nimport com.intellij.openapi.diagnostic.Logger;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.project.ProjectManagerListener;\n\npublic class AppProjectManagerListener implements ProjectManagerListener {\n    static final Logger LOG = Logger.getInstance(AppProjectManagerListener.class);\n\n    @Override\n    public void projectOpened(Project project) {\n        LOG.info(\"Project is opened: \" + project.getName());\n        AppConfigurable appConfigurable = new AppConfigurable();\n        appConfigurable.getAppSettingsStorage().registerActions();\n    }\n\n    @Override", "    public void projectOpened(Project project) {\n        LOG.info(\"Project is opened: \" + project.getName());\n        AppConfigurable appConfigurable = new AppConfigurable();\n        appConfigurable.getAppSettingsStorage().registerActions();\n    }\n\n    @Override\n    public void projectClosed(Project project) {\n        LOG.info(\"Project is closed: \" + project.getName());\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/AppConfigurable.java", "chunked_list": ["package com.minivv.pilot;\n\nimport com.intellij.openapi.options.Configurable;\nimport com.intellij.openapi.options.ConfigurationException;\nimport com.minivv.pilot.model.AppSettings;\nimport com.minivv.pilot.state.AppSettingsStorage;\nimport com.minivv.pilot.ui.AppPluginSettingsPage;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.Nullable;\n", "import org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\n\npublic class AppConfigurable implements Configurable {\n\n    private AppPluginSettingsPage form;\n    private AppSettings state;\n\n    private AppSettingsStorage appSettingsStorage;\n\n    public AppConfigurable() {\n        appSettingsStorage = AppSettingsStorage.getInstance();\n        state = appSettingsStorage.getState();\n    }\n\n    @Nls(capitalization = Nls.Capitalization.Title)\n    @Override", "    public String getDisplayName() {\n        return \"gpt-copilot\";\n    }\n\n    @Override\n    public @Nullable JComponent createComponent() {\n        form = new AppPluginSettingsPage(state);\n        return form.getRootPane();\n    }\n\n    @Override", "    public boolean isModified() {\n        return form != null && form.isSettingsModified(state);\n    }\n\n    @Override\n    public void apply() throws ConfigurationException {\n        appSettingsStorage.unregisterActions();\n        state = form.getSettings().clone();\n        appSettingsStorage.loadState(state);\n        appSettingsStorage.registerActions();\n    }\n\n    @Override", "    public void reset() {\n        if (form != null) {\n            form.importForm(state);\n        }\n    }\n\n    @Override\n    public void disposeUIResources() {\n        form = null;\n    }\n\n    @Override\n    public @Nullable JComponent getPreferredFocusedComponent() {\n        return form.getGptKey();\n    }\n", "    public AppSettingsStorage getAppSettingsStorage() {\n        return appSettingsStorage;\n    }\n}\n"]}
{"filename": "src/main/java/com/minivv/pilot/action/BasePilotPluginAction.java", "chunked_list": ["package com.minivv.pilot.action;\n\nimport com.intellij.notification.NotificationType;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.CommonDataKeys;\nimport com.intellij.openapi.actionSystem.DataContext;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.command.CommandProcessor;\nimport com.intellij.openapi.editor.Document;", "import com.intellij.openapi.command.CommandProcessor;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.NlsActions;\nimport com.minivv.pilot.model.AppSettings;\nimport com.minivv.pilot.state.AppSettingsStorage;\nimport com.minivv.pilot.utils.GPTClient;\nimport com.minivv.pilot.utils.NotifyUtils;\nimport com.theokanning.openai.completion.CompletionChoice;", "import com.minivv.pilot.utils.NotifyUtils;\nimport com.theokanning.openai.completion.CompletionChoice;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\npublic abstract class BasePilotPluginAction extends AnAction {\n//    private final int index;\n//    public BasePilotPluginAction(@Nullable @NlsActions.ActionText String text,int index) {\n//        super(text);\n//        this.index = index;\n//    }\n    public BasePilotPluginAction(@Nullable @NlsActions.ActionText String text) {\n        super(text);\n    }\n\n\n    @Override", "    public void update(@NotNull AnActionEvent e) {\n        super.update(e);\n        // \u53ea\u6709\u5f53\u7f16\u8f91\u5668\u4e2d\u6709\u9009\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\u65f6\u624d\u663e\u793a GptCopilotAction \u83dc\u5355\u9009\u9879\n        Editor editor = e.getData(CommonDataKeys.EDITOR);\n        if (editor == null) {\n            e.getPresentation().setEnabled(false);\n            return;\n        }\n        String code = editor.getSelectionModel().getSelectedText();\n        e.getPresentation().setEnabled(code != null && !code.isEmpty());\n    }\n    @Override", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        DataContext dataContext = e.getDataContext();\n        Project project = CommonDataKeys.PROJECT.getData(dataContext);\n        if (project == null) {\n            return;\n        }\n        // \u83b7\u53d6\u7f16\u8f91\u5668\u5bf9\u8c61\n        Editor editor = e.getData(CommonDataKeys.EDITOR);\n        if (editor == null) {\n            return;\n        }\n        // \u83b7\u53d6\u7528\u6237\u9009\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\n        String code = editor.getSelectionModel().getSelectedText();", "        if (editor == null) {\n            return;\n        }\n        // \u83b7\u53d6\u7528\u6237\u9009\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\n        String code = editor.getSelectionModel().getSelectedText();\n        if (code == null || code.isEmpty()) {\n            return;\n        }\n        String statement = addStatement(code);\n        NotifyUtils.notifyMessage(project,\"sending code to gpt..\", NotificationType.INFORMATION);\n        doCommand(statement, editor, project);\n    }\n\n    private void doCommand(String statement, Editor editor, Project project) {\n        AppSettings settings = AppSettingsStorage.getInstance().getState();", "        if(settings == null){\n            NotifyUtils.notifyMessage(project,\"gpt-copilot settings is null, please check!\", NotificationType.ERROR);\n            return;\n        }\n        List<CompletionChoice> choices = GPTClient.callChatGPT(statement, settings);\n        String optimizedCode;\n        if(GPTClient.isSuccessful(choices)){\n            optimizedCode = GPTClient.toString(choices);\n        } else {\n            NotifyUtils.notifyMessage(project,\"gpt-copilot connection failed, please check!\", NotificationType.ERROR);\n            return;\n        }\n        //\u5904\u7406readable\u64cd\u4f5c\n        ApplicationManager.getApplication().runWriteAction(() -> {\n            CommandProcessor.getInstance().executeCommand(\n                    project,\n                    () -> {\n                        // \u5c06\u4f18\u5316\u540e\u7684\u4ee3\u7801\u4f5c\u4e3a\u6ce8\u91ca\u6dfb\u52a0\u5230\u9009\u4e2d\u7684\u4ee3\u7801\u5757\u540e\u9762\n                        insertCommentAfterSelectedText(editor, optimizedCode,settings.isReplace);", "                        if(!settings.isReplace){\n                            // \u5c06\u9009\u4e2d\u7684\u4ee3\u7801\u5757\u6ce8\u91ca\u6389\n                            commentSelectedText(editor);\n                        }\n                        // \u53d6\u6d88\u9009\u4e2d\u72b6\u6001\n                        clearSelection(editor);\n                    },\n                    \"Insert Comment\",\n                    null\n            );\n        });\n    }", "    public abstract String addStatement(String code);\n    private void commentSelectedText(Editor editor) {\n        Document document = editor.getDocument();\n        int selectionStartOffset = editor.getSelectionModel().getSelectionStart();\n        int selectionEndOffset = editor.getSelectionModel().getSelectionEnd();\n        String selectedText = document.getText().substring(selectionStartOffset, selectionEndOffset);\n        document.replaceString(selectionStartOffset, selectionEndOffset, \"/*\" + selectedText + \"*/\");\n    }\n    private void insertCommentAfterSelectedText(Editor editor, String optimizedCode, boolean isReplace) {\n        Document document = editor.getDocument();\n        int selectionStartOffset = editor.getSelectionModel().getSelectionStart();\n        int selectionEndOffset = editor.getSelectionModel().getSelectionEnd();", "        if(isReplace){\n            document.replaceString(selectionStartOffset, selectionEndOffset, optimizedCode);\n            return;\n        }\n        document.insertString(selectionEndOffset, optimizedCode);\n    }\n    private void clearSelection(Editor editor) {\n        editor.getSelectionModel().removeSelection();\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/utils/Donate.java", "chunked_list": ["package com.minivv.pilot.utils;\n\nimport com.intellij.ide.BrowserUtil;\nimport com.intellij.openapi.diagnostic.Logger;\nimport com.intellij.openapi.util.IconLoader;\n\nimport javax.swing.*;\nimport java.awt.image.BufferedImage;\nimport java.net.URL;\n\npublic class Donate {\n\tprivate static final Logger LOG = Logger.getInstance(Donate.class);\n", "import java.net.URL;\n\npublic class Donate {\n\tprivate static final Logger LOG = Logger.getInstance(Donate.class);\n\n\tpublic static final Icon ICON = IconLoader.getIcon(\"com/minivv/pilot/ui/coins_in_hand.png\", Donate.class);\n\n\tpublic static void initUrl(JButton donate, String url) {\n\t\tdonate.setIcon(ICON);\n\t\tdonate.addActionListener(e -> BrowserUtil.browse(url));\n\t}\n", "\tpublic static void initImage(JButton donate, String imgPath) {\n\t\tdonate.setIcon(ICON);\n\t\tdonate.addActionListener(e -> {\n\t\t\t// \u52a0\u8f7d\u56fe\u50cf\u6587\u4ef6\n\t\t\tBufferedImage img = null;\n\t\t\tURL url = Donate.class.getResource(imgPath);\n\t\t\tif (url == null) {\n\t\t\t\tLOG.error(\"Can't find image: \" + imgPath);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tImageIcon icon = new ImageIcon(url);\n\t\t\t// \u521b\u5efa\u4e00\u4e2a\u5bf9\u8bdd\u6846\u6765\u663e\u793a\u56fe\u50cf\n\t\t\tJFrame frame = new JFrame();\n\t\t\tframe.setSize(300,400);\n\t\t\tJDialog dialog = new JDialog(frame, \"Thanks\", true);\n\t\t\tJLabel label = new JLabel(icon);\n\t\t\tdialog.getContentPane().add(label);\n\t\t\tdialog.pack();\n\t\t\tdialog.setLocationRelativeTo(null);\n\t\t\tdialog.setVisible(true);\n\t\t});\n\t}\n}\n"]}
{"filename": "src/main/java/com/minivv/pilot/utils/GPTClient.java", "chunked_list": ["package com.minivv.pilot.utils;\n\n\nimport com.minivv.pilot.model.AppSettings;\nimport com.theokanning.openai.OpenAiApi;\nimport com.theokanning.openai.completion.CompletionChoice;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport com.theokanning.openai.service.OpenAiService;\nimport okhttp3.OkHttpClient;\nimport org.apache.commons.collections.CollectionUtils;", "import okhttp3.OkHttpClient;\nimport org.apache.commons.collections.CollectionUtils;\nimport retrofit2.Retrofit;\n\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;", "import java.util.List;\nimport java.util.Locale;\n\nimport static com.theokanning.openai.service.OpenAiService.*;\n\npublic class GPTClient {\n\n    public static List<CompletionChoice> callChatGPT(String code, AppSettings settings) {\n        try {\n            Locale.setDefault(Locale.getDefault());\n            if (settings.enableProxy) {\n                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(settings.proxyHost, settings.proxyPort));\n                OkHttpClient client = defaultClient(settings.gptKey, Duration.ofSeconds(settings.maxWaitSeconds))\n                        .newBuilder()\n                        .proxy(proxy)\n                        .build();\n                Retrofit retrofit = defaultRetrofit(client, defaultObjectMapper());\n                OpenAiApi api = retrofit.create(OpenAiApi.class);\n                OpenAiService service = new OpenAiService(api);\n                CompletionRequest completionRequest = CompletionRequest.builder()\n                        .prompt(code)\n                        .model(settings.gptModel)\n                        .maxTokens(settings.gptMaxTokens)\n                        .temperature(0.3)\n                        .presencePenalty(0.0)\n                        .frequencyPenalty(0.0)\n                        .bestOf(1)\n                        .stream(false)\n                        .echo(false)\n                        .build();\n                return service.createCompletion(completionRequest).getChoices();\n            } else {\n                OpenAiService service = new OpenAiService(settings.gptKey);\n                CompletionRequest completionRequest = CompletionRequest.builder()\n                        .prompt(code)\n                        .model(settings.gptModel)\n                        .echo(true)\n                        .build();\n                return service.createCompletion(completionRequest).getChoices();\n            }\n        } catch (Exception e) {\n            return new ArrayList<>();\n        }\n    }\n", "        try {\n            Locale.setDefault(Locale.getDefault());\n            if (settings.enableProxy) {\n                Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(settings.proxyHost, settings.proxyPort));\n                OkHttpClient client = defaultClient(settings.gptKey, Duration.ofSeconds(settings.maxWaitSeconds))\n                        .newBuilder()\n                        .proxy(proxy)\n                        .build();\n                Retrofit retrofit = defaultRetrofit(client, defaultObjectMapper());\n                OpenAiApi api = retrofit.create(OpenAiApi.class);\n                OpenAiService service = new OpenAiService(api);\n                CompletionRequest completionRequest = CompletionRequest.builder()\n                        .prompt(code)\n                        .model(settings.gptModel)\n                        .maxTokens(settings.gptMaxTokens)\n                        .temperature(0.3)\n                        .presencePenalty(0.0)\n                        .frequencyPenalty(0.0)\n                        .bestOf(1)\n                        .stream(false)\n                        .echo(false)\n                        .build();\n                return service.createCompletion(completionRequest).getChoices();\n            } else {\n                OpenAiService service = new OpenAiService(settings.gptKey);\n                CompletionRequest completionRequest = CompletionRequest.builder()\n                        .prompt(code)\n                        .model(settings.gptModel)\n                        .echo(true)\n                        .build();\n                return service.createCompletion(completionRequest).getChoices();\n            }\n        } catch (Exception e) {\n            return new ArrayList<>();\n        }\n    }\n", "    public static boolean isSuccessful(List<CompletionChoice> choices) {\n        return CollectionUtils.isNotEmpty(choices) && !choices.get(0).getText().isBlank();\n    }\n\n    public static String toString(List<CompletionChoice> choices) {\n        if (CollectionUtils.isEmpty(choices)) {\n            return \"ChatGPT response is empty,please check your network or config!\";\n        }\n        return choices.get(0).getText();\n    }\n}\n"]}
{"filename": "src/main/java/com/minivv/pilot/utils/ActionLinkUtils.java", "chunked_list": ["package com.minivv.pilot.utils;\n\nimport com.intellij.ide.BrowserUtil;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.ui.components.AnActionLink;\nimport org.jetbrains.annotations.NotNull;\n\n/**\n * \u6784\u9020 \u94fe\u63a5", "/**\n * \u6784\u9020 \u94fe\u63a5\n */\npublic class ActionLinkUtils {\n\n    /**\n     * \u6784\u9020\u94fe\u63a5\u5de5\u5177\u7c7b\n     */\n    public static AnActionLink newActionLink(String linkUrl) {\n        return new AnActionLink(\"\", new AnAction() {\n            @Override", "    public static AnActionLink newActionLink(String linkUrl) {\n        return new AnActionLink(\"\", new AnAction() {\n            @Override\n            public void actionPerformed(@NotNull AnActionEvent anActionEvent) {\n                BrowserUtil.browse(linkUrl);\n            }\n        });\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/utils/NotifyUtils.java", "chunked_list": ["package com.minivv.pilot.utils;\n\nimport com.intellij.notification.*;\nimport com.intellij.openapi.project.Project;\nimport org.jetbrains.annotations.NotNull;\n\n/**\n * \u901a\u77e5\u6d88\u606f\n */\npublic class NotifyUtils {\n\n    private static final NotificationGroup NOTIFICATION = new NotificationGroup(\"gpt-copilot\", NotificationDisplayType.BALLOON, false);\n\n", " */\npublic class NotifyUtils {\n\n    private static final NotificationGroup NOTIFICATION = new NotificationGroup(\"gpt-copilot\", NotificationDisplayType.BALLOON, false);\n\n\n    public static final String COMMAND_COPIED = \"arthas command copied to clipboard,open arthas to execute command\";\n\n    /**\n     * \u901a\u77e5\u6d88\u606f\n     *\n     * @param project\n     */", "    public static void notifyMessageDefault(Project project) {\n        notifyMessage(project, COMMAND_COPIED);\n    }\n\n    /**\n     * \u6d88\u606f\n     *\n     * @param project\n     * @param message\n     */\n    public static void notifyMessage(Project project, String message) {", "    public static void notifyMessage(Project project, String message) {\n        try {\n            Notification currentNotify = NOTIFICATION.createNotification(message, NotificationType.INFORMATION);\n            Notifications.Bus.notify(currentNotify, project);\n        } catch (Exception e) {\n            //\n        }\n    }\n\n    /**\n     * \u63a8\u9001\u6d88\u606f\u54e6\n     *\n     * @param project\n     * @param message\n     * @param type\n     */", "    public static void notifyMessage(Project project, String message, @NotNull NotificationType type) {\n        try {\n            Notification currentNotify = NOTIFICATION.createNotification(\"gpt-copilot notify\",message, type,new NotificationListener.UrlOpeningListener(true));\n            Notifications.Bus.notify(currentNotify, project);\n\n        } catch (Exception e) {\n            //\n        }\n    }\n\n}"]}
{"filename": "src/main/java/com/minivv/pilot/constants/SysConstants.java", "chunked_list": ["package com.minivv.pilot.constants;\n\npublic interface SysConstants {\n    String httpProxyType = \"HTTP\";\n    String socketProxyType = \"SOCKET\";\n    String testConnMsg = \"Hello ChatGPT!\";\n}\n"]}
{"filename": "src/main/java/com/minivv/pilot/model/Prompt.java", "chunked_list": ["package com.minivv.pilot.model;\n\npublic class Prompt extends DomainObject {\n\tprivate String option;\n\tprivate String snippet;\n\n//\tprivate Integer index;\n\n\tpublic Prompt() {\n\t}\n\n//\tpublic Prompt(String option, String snippet,int index) {\n//\t\tthis.option = option;\n//\t\tthis.snippet = snippet;\n//\t\tthis.index = index;\n//\t}\n", "//\tpublic static Prompt of(String name, String value,int index) {\n//\t\treturn new Prompt(name, value,index);\n//\t}\n\tpublic Prompt(String option, String snippet) {\n\t\tthis.option = option;\n\t\tthis.snippet = snippet;\n\t}\n\n\tpublic static Prompt of(String name, String value) {\n\t\treturn new Prompt(name, value);\n\t}\n", "\tpublic static Prompt of(String name, String value) {\n\t\treturn new Prompt(name, value);\n\t}\n\n\tpublic String getOption() {\n\t\treturn option;\n\t}\n\n\tpublic void setOption(String option) {\n\t\tthis.option = option;\n\t}\n", "\tpublic void setOption(String option) {\n\t\tthis.option = option;\n\t}\n\n\tpublic String getSnippet() {\n\t\treturn snippet;\n\t}\n\n\tpublic void setSnippet(String snippet) {\n\t\tthis.snippet = snippet;\n\t}\n", "\tpublic void setSnippet(String snippet) {\n\t\tthis.snippet = snippet;\n\t}\n\n\tpublic String applyTo(String commandLine) {\n\t\tif (option != null && snippet != null) {\n\t\t\treturn commandLine.replace(option, snippet);\n\t\t}\n\t\treturn commandLine;\n\t}\n", "//\tpublic Integer getIndex() {\n//\t\treturn index;\n//\t}\n//\n//\tpublic void setIndex(Integer index) {\n//\t\tthis.index = index;\n//\t}\n}"]}
{"filename": "src/main/java/com/minivv/pilot/model/AppSettings.java", "chunked_list": ["package com.minivv.pilot.model;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.util.xmlb.annotations.Transient;\nimport com.minivv.pilot.state.AppSettingsStorage;\nimport com.minivv.pilot.constants.SysConstants;\nimport com.rits.cloning.Cloner;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;", "\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class AppSettings extends DomainObject implements Cloneable {\n    public boolean enableProxy = false;\n    public String proxyHost = \"127.0.0.1\";\n    public int proxyPort = 1087;\n    public String proxyType = SysConstants.httpProxyType;\n    public String gptKey;", "    public int proxyPort = 1087;\n    public String proxyType = SysConstants.httpProxyType;\n    public String gptKey;\n    public String gptModel = \"text-davinci-003\";\n    public int gptMaxTokens = 2048;\n    public int maxWaitSeconds = 60;\n    public boolean isReplace = false;\n    public String testConnMsg = SysConstants.testConnMsg;\n    public Prompts prompts = new Prompts();\n    public AppSettings() {\n        this.addDefaultPrompts(this.prompts);\n    }\n\n    @NotNull", "    public Prompts prompts = new Prompts();\n    public AppSettings() {\n        this.addDefaultPrompts(this.prompts);\n    }\n\n    @NotNull\n    public static Project getProject() {\n        return AppSettingsStorage.getProject();\n    }\n\n    @NotNull", "    public static AppSettings get() {\n        AppSettingsStorage instance = AppSettingsStorage.getInstance();\n        return instance.getState();\n    }\n\n    @Override\n    public AppSettings clone() {\n        Cloner cloner = new Cloner();\n        cloner.nullInsteadOfClone();\n        return cloner.deepClone(this);\n    }\n", "    public static void resetDefaultPrompts(List<Prompt> _prompts) {\n        Prompts prompts = addDefaultPrompts(new Prompts());\n        Map<String, String> stringStringMap = prompts.asMap();\n        _prompts.removeIf(next -> stringStringMap.containsKey(next.getOption()));\n        _prompts.addAll(prompts.getPrompts());\n    }\n\n    @Transient\n    public static Prompts addDefaultPrompts(Prompts prompts) {\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));\n        return prompts;\n    }\n}", "    public static Prompts addDefaultPrompts(Prompts prompts) {\n        prompts.add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));\n        return prompts;\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/model/Prompts.java", "chunked_list": ["package com.minivv.pilot.model;\n\nimport java.util.*;\n\npublic class Prompts extends DomainObject {\n    private List<Prompt> prompts = new ArrayList<>();\n\n    public Prompts() {\n    }\n\n    public Prompts(List<Prompt> prompts) {\n        this.prompts = prompts;\n    }\n\n    public List<Prompt> getPrompts() {\n        return prompts;\n    }\n", "    public void setPrompts(List<Prompt> prompts) {\n        this.prompts = prompts;\n    }\n\n//    public boolean add(Prompt o) {\n//        if (prompts.stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {\n//            return false;\n//        }\n//        return prompts.add(o);\n//    }\n\n", "//    public void add(String s, String to,int index) {\n//        prompts.add(new Prompt(s, to,index));\n//    }\n\n    public void add(String s, String to) {\n        prompts.add(new Prompt(s, to));\n    }\n\n\n    public boolean add(Prompt o) {\n        if (prompts.stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n", "    public boolean add(Prompt o) {\n        if (prompts.stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {\n            return false;\n        }\n        return prompts.add(o);\n    }\n\n    public int size() {\n        return prompts.size();\n    }\n\n    public Map<String, String> asMap() {\n        HashMap<String, String> stringStringHashMap = new HashMap<>();", "        for (Prompt prompt : prompts) {\n            stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());\n        }\n        return stringStringHashMap;\n    }\n\n    public void clear() {\n        this.prompts = new ArrayList<>();\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/model/DomainObject.java", "chunked_list": ["package com.minivv.pilot.model;\n\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n\npublic abstract class DomainObject {\n\n\t@Override\n\tpublic boolean equals(Object obj) { \n\t\treturn EqualsBuilder.reflectionEquals(this, obj, false);\n\t}\n\n\t@Override", "\tpublic boolean equals(Object obj) { \n\t\treturn EqualsBuilder.reflectionEquals(this, obj, false);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn ReflectionToStringBuilder.toString(this);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn HashCodeBuilder.reflectionHashCode(this);\n\t}\n}", "\tpublic int hashCode() {\n\t\treturn HashCodeBuilder.reflectionHashCode(this);\n\t}\n}"]}
{"filename": "src/main/java/com/minivv/pilot/state/AppSettingsStorage.java", "chunked_list": ["package com.minivv.pilot.state;\n\nimport com.intellij.openapi.actionSystem.ActionManager;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.DefaultActionGroup;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.openapi.project.Project;", "import com.intellij.openapi.components.Storage;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.project.ProjectManager;\nimport com.minivv.pilot.action.BasePilotPluginAction;\nimport com.minivv.pilot.model.Prompt;\nimport com.minivv.pilot.model.AppSettings;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\n", "\n\n@State(\n        name = \"chatGptPilot.idea.plugin\",\n        storages = {@Storage(\"setting.xml\")}\n)\npublic class AppSettingsStorage implements PersistentStateComponent<AppSettings> {\n    private AppSettings settings = new AppSettings();\n    private final String idPrefix = \"chatGptPilot_\";\n    private final DefaultActionGroup actionGroup = new DefaultActionGroup(\"gpt pilot\", true);\n\n    @Nullable\n    @Override", "    public AppSettings getState() {\n        if (settings == null) {\n            settings = new AppSettings();\n        }\n        return settings;\n    }\n\n    @Override\n    public void loadState(@NotNull AppSettings state) {\n        settings = state;\n        if(settings.prompts != null && settings.prompts.getPrompts().isEmpty()) {\n            AppSettings.addDefaultPrompts(settings.prompts);\n        }\n    }\n", "    public void loadState(@NotNull AppSettings state) {\n        settings = state;\n        if(settings.prompts != null && settings.prompts.getPrompts().isEmpty()) {\n            AppSettings.addDefaultPrompts(settings.prompts);\n        }\n    }\n\n    public static AppSettingsStorage getInstance() {\n        return ApplicationManager.getApplication().getService(AppSettingsStorage.class);\n    }\n\n    public static @NotNull Project getProject() {\n        return ApplicationManager.getApplication().getService(ProjectManager.class).getOpenProjects()[0];\n    }\n", "//    public void registerActions() {\n//        ActionManager actionManager = ActionManager.getInstance();\n//        clear(actionGroup);\n//        AnAction popupMenu = actionManager.getAction(\"EditorPopupMenu\");\n//        for (Prompt prompt : this.settings.prompts.getPrompts()) {\n//            BasePilotPluginAction newAction = new BasePilotPluginAction(prompt.getOption(), prompt.getIndex()) {\n//                @Override\n//                public String addStatement(String code) {\n//                    return prompt.getSnippet().replace(\"{query}\", code);\n//                }\n//            };\n//            actionManager.registerAction(idPrefix + prompt.getIndex(), newAction);\n//            actionGroup.add(newAction);\n//        }\n//        ((DefaultActionGroup) popupMenu).add(actionGroup);\n//    }\n", "    public void registerActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n        DefaultActionGroup popupMenu = (DefaultActionGroup) actionManager.getAction(\"EditorPopupMenu\");\n        clear(popupMenu, actionGroup);\n        for (Prompt prompt : this.settings.prompts.getPrompts()) {\n            AnAction oldAction = actionManager.getAction(idPrefix + prompt.getOption());\n            if (oldAction != null) {\n                actionManager.unregisterAction(idPrefix + prompt.getOption());\n            }\n            oldAction = new BasePilotPluginAction(prompt.getOption()) {\n                @Override", "                public String addStatement(String code) {\n                    return prompt.getSnippet().replace(\"{query}\", code);\n                }\n            };\n            actionManager.registerAction(idPrefix + prompt.getOption(), oldAction);\n            actionGroup.add(oldAction);\n        }\n        popupMenu.add(actionGroup);\n    }\n\n    private static void clear(DefaultActionGroup popupMenu, DefaultActionGroup actionGroup) {\n        popupMenu.remove(actionGroup);\n        AnAction[] childActionsOrStubs = actionGroup.getChildActionsOrStubs();", "        for (AnAction childActionsOrStub : childActionsOrStubs) {\n            actionGroup.remove(childActionsOrStub);\n        }\n    }\n\n//    public void unregisterActions() {\n//        ActionManager actionManager = ActionManager.getInstance();\n//        for (Prompt prompt : this.settings.prompts.getPrompts()) {\n//            actionManager.unregisterAction(idPrefix + prompt.getIndex());\n//        }\n//    }\n", "    public void unregisterActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n        for (Prompt prompt : this.settings.prompts.getPrompts()) {\n            actionManager.unregisterAction(idPrefix + prompt.getOption());\n        }\n    }\n}"]}
{"filename": "src/main/java/com/minivv/pilot/ui/AppPluginSettingsPage.java", "chunked_list": ["package com.minivv.pilot.ui;\n\n\nimport com.intellij.icons.AllIcons;\nimport com.intellij.notification.NotificationType;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.ui.AnActionButton;\nimport com.intellij.ui.DoubleClickListener;\nimport com.intellij.ui.ToolbarDecorator;\nimport com.intellij.ui.components.AnActionLink;", "import com.intellij.ui.ToolbarDecorator;\nimport com.intellij.ui.components.AnActionLink;\nimport com.minivv.pilot.constants.SysConstants;\nimport com.minivv.pilot.model.AppSettings;\nimport com.minivv.pilot.model.Prompt;\nimport com.minivv.pilot.model.Prompts;\nimport com.minivv.pilot.utils.ActionLinkUtils;\nimport com.minivv.pilot.utils.Donate;\nimport com.minivv.pilot.utils.GPTClient;\nimport com.minivv.pilot.utils.NotifyUtils;", "import com.minivv.pilot.utils.GPTClient;\nimport com.minivv.pilot.utils.NotifyUtils;\nimport com.theokanning.openai.completion.CompletionChoice;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport javax.swing.*;\nimport java.awt.event.MouseEvent;\nimport java.util.List;\nimport java.util.Objects;", "import java.util.List;\nimport java.util.Objects;\n\n/**\n * todo \u8d85\u65f6\u65f6\u95f4\u914d\u7f6e\n * todo \u66f4\u6362NotifyUtils\n * todo \u9650\u5236\u4ee3\u7801\u91cf\n */\npublic class AppPluginSettingsPage {\n\n\n    private JPanel rootPane;\n    private JTextField gptKey;\n    private JTextField gptModel;\n    private JSpinner gptMaxToken;\n    private JCheckBox isReplace;\n    private JRadioButton enableProxy;\n    private JRadioButton httpProxy;\n    private JRadioButton socketProxy;\n    private JTextField proxyHost;\n    private JSpinner proxyPort;\n    private AnActionLink gptKeyLink;\n    private AnActionLink gptModelsLink;\n    private AnActionLink gptUsageLink;\n    private JTextField testConnMsg;\n    private JButton testConnButton;\n    private JPanel promptsPane;\n    private JSpinner maxWaitSeconds;\n    private JButton donatePaypal;\n    private JButton donateWx;\n    //    private JPanel locale;\n    private AppSettings settings;\n    private final PromptsTable promptsTable;\n\n    public AppPluginSettingsPage(AppSettings original) {\n        this.settings = original.clone();\n        this.promptsTable = new PromptsTable();\n        promptsPane.add(ToolbarDecorator.createDecorator(promptsTable)\n                .setRemoveAction(button -> promptsTable.removeSelectedPrompts())\n                .setAddAction(button -> promptsTable.addPrompt(Prompt.of(\"Option\" + promptsTable.getRowCount(), \"Snippet:{query}\")))\n                .addExtraAction(new AnActionButton(\"Reset Default Prompts\", AllIcons.Actions.Rollback) {\n                    @Override", "public class AppPluginSettingsPage {\n\n\n    private JPanel rootPane;\n    private JTextField gptKey;\n    private JTextField gptModel;\n    private JSpinner gptMaxToken;\n    private JCheckBox isReplace;\n    private JRadioButton enableProxy;\n    private JRadioButton httpProxy;\n    private JRadioButton socketProxy;\n    private JTextField proxyHost;\n    private JSpinner proxyPort;\n    private AnActionLink gptKeyLink;\n    private AnActionLink gptModelsLink;\n    private AnActionLink gptUsageLink;\n    private JTextField testConnMsg;\n    private JButton testConnButton;\n    private JPanel promptsPane;\n    private JSpinner maxWaitSeconds;\n    private JButton donatePaypal;\n    private JButton donateWx;\n    //    private JPanel locale;\n    private AppSettings settings;\n    private final PromptsTable promptsTable;\n\n    public AppPluginSettingsPage(AppSettings original) {\n        this.settings = original.clone();\n        this.promptsTable = new PromptsTable();\n        promptsPane.add(ToolbarDecorator.createDecorator(promptsTable)\n                .setRemoveAction(button -> promptsTable.removeSelectedPrompts())\n                .setAddAction(button -> promptsTable.addPrompt(Prompt.of(\"Option\" + promptsTable.getRowCount(), \"Snippet:{query}\")))\n                .addExtraAction(new AnActionButton(\"Reset Default Prompts\", AllIcons.Actions.Rollback) {\n                    @Override", "                    public void actionPerformed(@NotNull AnActionEvent e) {\n                        promptsTable.resetDefaultAliases();\n                    }\n                })\n                .createPanel());\n\n        new DoubleClickListener() {\n            @Override\n            protected boolean onDoubleClick(MouseEvent e) {\n                return promptsTable.editPrompt();\n            }\n        }.installOn(promptsTable);\n//        ComboBox<Locale> comboBox = new ComboBox<>();\n//        Locale[] locales = Locale.getAvailableLocales();", "//        for (Locale locale : locales) {\n//            comboBox.addItem(locale);\n//        }\n//        locale.add(comboBox);\n        Donate.initUrl(donatePaypal, \"https://www.paypal.me/kuweiguge\");\n//        Donate.initImage(donateWx,\"images/wechat_donate.png\");\n    }\n\n    private void createUIComponents() {\n        gptMaxToken = new JSpinner(new SpinnerNumberModel(2048, 128, 2048, 128));\n        proxyPort = new JSpinner(new SpinnerNumberModel(1087, 1, 65535, 1));\n        maxWaitSeconds = new JSpinner(new SpinnerNumberModel(60, 5, 600, 5));\n        gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");\n        gptModelsLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/docs/models/overview\");\n        gptUsageLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/usage\");\n    }\n", "    public AppSettings getSettings() {\n        promptsTable.commit(settings);\n        getData(settings);\n        return settings;\n    }\n\n    private void getData(AppSettings settings) {\n        settings.gptKey = gptKey.getText();\n        settings.gptModel = gptModel.getText();\n        settings.gptMaxTokens = (int) gptMaxToken.getValue();\n        settings.isReplace = isReplace.isSelected();\n        settings.enableProxy = enableProxy.isSelected();\n        settings.proxyHost = proxyHost.getText();\n        settings.proxyPort = (int) proxyPort.getValue();\n        settings.maxWaitSeconds = (int) maxWaitSeconds.getValue();\n        settings.proxyType = httpProxy.isSelected() ? SysConstants.httpProxyType : SysConstants.socketProxyType;\n        settings.testConnMsg = testConnMsg.getText();\n        settings.prompts = new Prompts(promptsTable.prompts);\n    }\n", "    public void importForm(AppSettings state) {\n        this.settings = state.clone();\n        setData(settings);\n        promptsTable.reset(settings);\n    }\n\n    private void setData(AppSettings settings) {\n        gptKey.setText(settings.gptKey);\n        gptModel.setText(settings.gptModel);\n        gptMaxToken.setValue(settings.gptMaxTokens);\n        isReplace.setSelected(settings.isReplace);\n        testConnMsg.setText(settings.testConnMsg);\n        httpProxy.setSelected(Objects.equals(settings.proxyType, SysConstants.httpProxyType));\n        socketProxy.setSelected(Objects.equals(settings.proxyType, SysConstants.socketProxyType));\n        proxyHost.setText(settings.proxyHost);\n        proxyPort.setValue(settings.proxyPort);\n        maxWaitSeconds.setValue(settings.maxWaitSeconds);\n        enableProxy.addChangeListener(e -> {", "            if (enableProxy.isSelected()) {\n                httpProxy.setEnabled(true);\n                socketProxy.setEnabled(true);\n                proxyHost.setEnabled(true);\n                proxyPort.setEnabled(true);\n            } else {\n                httpProxy.setEnabled(false);\n                socketProxy.setEnabled(false);\n                proxyHost.setEnabled(false);\n                proxyPort.setEnabled(false);\n            }\n        });\n        httpProxy.addChangeListener(e -> {\n            socketProxy.setSelected(!httpProxy.isSelected());\n        });\n        socketProxy.addChangeListener(e -> {\n            httpProxy.setSelected(!socketProxy.isSelected());\n        });\n        enableProxy.setSelected(settings.enableProxy);\n\n        testConnButton.addActionListener(e -> {\n            String msg = StringUtils.isBlank(testConnMsg.getText()) ? SysConstants.testConnMsg : testConnMsg.getText();\n            boolean hasError = checkSettings();", "            if (hasError) {\n                return;\n            }\n            List<CompletionChoice> choices = GPTClient.callChatGPT(msg, settings);\n            if (GPTClient.isSuccessful(choices)) {\n                NotifyUtils.notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);\n            } else {\n                NotifyUtils.notifyMessage(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);\n            }\n        });\n    }\n\n    /**\n     * \u4fdd\u5b58\u8bbe\u7f6e\n     *\n     * @return \u662f\u5426\u6709\u9519\u8bef\n     */\n    private boolean checkSettings() {\n        StringBuilder error = new StringBuilder();", "        if (StringUtils.isBlank(gptKey.getText())) {\n            error.append(\"GPT Key is required.\").append(\"\\n\");\n        }\n        if (StringUtils.isBlank(gptModel.getText())) {\n            error.append(\"GPT Model is required.\").append(\"\\n\");\n        }\n        if (gptMaxToken.getValue() == null || (int) gptMaxToken.getValue() <= 0 || (int) gptMaxToken.getValue() > 2048) {\n            error.append(\"GPT Max Token is required and should be between 1 and 2048.\").append(\"\\n\");\n        }\n        if (enableProxy.isSelected()) {\n            if (StringUtils.isBlank(proxyHost.getText())) {\n                error.append(\"Proxy Host is required.\").append(\"\\n\");\n            }", "        if (enableProxy.isSelected()) {\n            if (StringUtils.isBlank(proxyHost.getText())) {\n                error.append(\"Proxy Host is required.\").append(\"\\n\");\n            }\n            if (proxyPort.getValue() == null || (int) proxyPort.getValue() <= 0 || (int) proxyPort.getValue() > 65535) {\n                error.append(\"Proxy Port is required and should be between 1 and 65535.\").append(\"\\n\");\n            }\n            if (maxWaitSeconds.getValue() == null || (int) maxWaitSeconds.getValue() <= 0 || (int) maxWaitSeconds.getValue() > 600) {\n                error.append(\"Max Wait Seconds is required and should be between 5 and 600.\").append(\"\\n\");\n            }\n        }", "        if (promptsTable.getRowCount() <= 0) {\n            error.append(\"Prompts is required.\").append(\"\\n\");\n        }\n        if (promptsTable.prompts.stream().anyMatch(p -> !StringUtils.contains(p.getSnippet(), \"{query}\"))) {\n            error.append(\"Prompts should contain {query}.\").append(\"\\n\");\n        }\n        if (StringUtils.isNotBlank(error)) {\n            NotifyUtils.notifyMessage(AppSettings.getProject(), error.toString(), NotificationType.ERROR);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n", "    public boolean isSettingsModified(AppSettings state) {\n        if (promptsTable.isModified(state)) return true;\n        return !this.settings.equals(state) || isModified(state);\n    }\n\n    private boolean isModified(AppSettings state) {\n        return !gptKey.getText().equals(state.gptKey) ||\n                !gptModel.getText().equals(state.gptModel) ||\n                !gptMaxToken.getValue().equals(state.gptMaxTokens) ||\n                isReplace.isSelected() != state.isReplace ||\n                enableProxy.isSelected() != state.enableProxy ||\n                !proxyHost.getText().equals(state.proxyHost) ||\n                !proxyPort.getValue().equals(state.proxyPort) ||\n                !maxWaitSeconds.getValue().equals(state.maxWaitSeconds) ||\n                !httpProxy.isSelected() == Objects.equals(state.proxyType, SysConstants.httpProxyType) ||\n                !socketProxy.isSelected() == Objects.equals(state.proxyType, SysConstants.socketProxyType) ||\n                !testConnMsg.getText().equals(state.testConnMsg);\n    }\n", "    public JPanel getRootPane() {\n        return rootPane;\n    }\n\n    public JTextField getGptKey() {\n        return gptKey;\n    }\n}\n"]}
{"filename": "src/main/java/com/minivv/pilot/ui/PromptsTable.java", "chunked_list": ["package com.minivv.pilot.ui;\n\nimport com.intellij.openapi.diagnostic.Logger;\nimport com.minivv.pilot.model.Prompt;\nimport com.minivv.pilot.model.AppSettings;\nimport org.jetbrains.annotations.NotNull;\n\nimport javax.swing.*;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;", "import javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class PromptsTable extends JTable {\n    private static final Logger LOG = Logger.getInstance(PromptsTable.class);\n    private static final int NAME_COLUMN = 0;\n    private static final int VALUE_COLUMN = 1;\n    private final PromptTableModel promptTableModel = new PromptTableModel();\n    public final List<Prompt> prompts = new ArrayList<>();\n\n    public PromptsTable() {\n        setModel(promptTableModel);\n        DefaultCellEditor editor = new DefaultCellEditor(new JTextField());\n        this.setCellEditor(editor);\n        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    }\n", "    public final List<Prompt> prompts = new ArrayList<>();\n\n    public PromptsTable() {\n        setModel(promptTableModel);\n        DefaultCellEditor editor = new DefaultCellEditor(new JTextField());\n        this.setCellEditor(editor);\n        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    }\n\n    public void reset(AppSettings settings) {\n        obtainPrompts(prompts, settings);\n        promptTableModel.fireTableDataChanged();\n    }\n", "    public void reset(AppSettings settings) {\n        obtainPrompts(prompts, settings);\n        promptTableModel.fireTableDataChanged();\n    }\n\n    public boolean isModified(AppSettings settings) {\n        final ArrayList<Prompt> _prompts = new ArrayList<>();\n        obtainPrompts(_prompts, settings);\n        return !_prompts.equals(prompts);\n    }\n\n    private void obtainPrompts(@NotNull List<Prompt> prompts, AppSettings settings) {\n        prompts.clear();\n        prompts.addAll(settings.prompts.getPrompts());\n    }\n", "    public void addPrompt(Prompt prompt) {\n        prompts.add(prompt);\n        promptTableModel.fireTableRowsInserted(prompts.size() - 1, prompts.size() - 1);\n    }\n\n    public void commit(AppSettings settings) {\n        settings.prompts.setPrompts(new ArrayList<>(this.prompts));\n    }\n\n    public void removeSelectedPrompts() {\n        int[] selectedRows = getSelectedRows();", "    public void removeSelectedPrompts() {\n        int[] selectedRows = getSelectedRows();\n        if (selectedRows.length == 0) return;\n        Arrays.sort(selectedRows);\n        final int originalRow = selectedRows[0];\n        for (int i = selectedRows.length - 1; i >= 0; i--) {\n            final int selectedRow = selectedRows[i];\n            if (isValidRow(selectedRow)) {\n                prompts.remove(selectedRow);\n                promptTableModel.fireTableRowsDeleted(selectedRow, selectedRow);\n            }\n        }\n        promptTableModel.fireTableDataChanged();", "        if (originalRow < getRowCount()) {\n            setRowSelectionInterval(originalRow, originalRow);\n        } else if (getRowCount() > 0) {\n            final int index = getRowCount() - 1;\n            setRowSelectionInterval(index, index);\n        }\n    }\n\n    private boolean isValidRow(int selectedRow) {\n        return selectedRow >= 0 && selectedRow < prompts.size();\n    }\n", "    public void resetDefaultAliases() {\n        AppSettings.resetDefaultPrompts(prompts);\n        promptTableModel.fireTableDataChanged();\n    }\n\n    public boolean editPrompt() {\n        if (getSelectedRowCount() != 1) {\n            return false;\n        }\n        //\u8fdb\u5165\u884c\u5185\u7f16\u8f91\u6a21\u5f0f\n        return editCellAt(getSelectedRow(), getSelectedColumn());\n    }\n\n    private class PromptTableModel extends AbstractTableModel {\n\n        @Override", "        public int getColumnCount() {\n            return 2;\n        }\n\n        @Override\n        public int getRowCount() {\n            return prompts.size();\n        }\n\n        @Override\n        public Class getColumnClass(int columnIndex) {\n            return String.class;\n        }\n\n        @Override", "        public Class getColumnClass(int columnIndex) {\n            return String.class;\n        }\n\n        @Override\n        public void setValueAt(Object value, int rowIndex, int columnIndex) {\n            String str = (String) value;\n            if (str.length() != 0) {\n                //\u4fee\u6539prompts\u4e2d\u7684\u503c\n                if (columnIndex == NAME_COLUMN) {\n                    prompts.get(rowIndex).setOption(str);", "                if (columnIndex == NAME_COLUMN) {\n                    prompts.get(rowIndex).setOption(str);\n                } else if (columnIndex == VALUE_COLUMN) {\n                    prompts.get(rowIndex).setSnippet(str);\n                }\n                promptTableModel.fireTableDataChanged();\n            }\n        }\n\n        @Override\n        public Object getValueAt(int rowIndex, int columnIndex) {\n            final Prompt pair = prompts.get(rowIndex);\n            switch (columnIndex) {\n                case NAME_COLUMN:\n                    return pair.getOption();\n                case VALUE_COLUMN:\n                    return pair.getSnippet();\n            }\n            LOG.error(\"Wrong indices\");\n            return null;\n        }\n\n        @Override", "        public Object getValueAt(int rowIndex, int columnIndex) {\n            final Prompt pair = prompts.get(rowIndex);\n            switch (columnIndex) {\n                case NAME_COLUMN:\n                    return pair.getOption();\n                case VALUE_COLUMN:\n                    return pair.getSnippet();\n            }\n            LOG.error(\"Wrong indices\");\n            return null;\n        }\n\n        @Override", "        public String getColumnName(int columnIndex) {\n            switch (columnIndex) {\n                case NAME_COLUMN:\n                    return \"Option\";\n                case VALUE_COLUMN:\n                    return \"Snippet\";\n            }\n            return null;\n        }\n\n        @Override", "        public boolean isCellEditable(int rowIndex, int columnIndex) {\n            return true;\n        }\n    }\n}\n"]}
