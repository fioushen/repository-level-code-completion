{"filename": "hybrid-multitenancy-customer-service/src/test/java/com/github/wenqiglantz/service/customer/CustomerServiceApplicationIntegrationTest.java", "chunked_list": ["package com.github.wenqiglantz.service.customer;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CustomerServiceApplicationIntegrationTest {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/CustomerServiceApplication.java", "chunked_list": ["package com.github.wenqiglantz.service.customer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class, LiquibaseAutoConfiguration.class })", "\n@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class, LiquibaseAutoConfiguration.class })\n@EnableTransactionManagement\npublic class CustomerServiceApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CustomerServiceApplication.class, args);\n    }\n\n}\n\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/persistence/entity/BaseEntity.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.persistence.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreUpdate;\nimport jakarta.persistence.Version;\nimport lombok.Getter;\n", "import lombok.Getter;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\nimport java.util.UUID;\n\nimport static java.time.LocalDateTime.now;\n\n@Getter\n@MappedSuperclass\npublic abstract class BaseEntity implements Serializable {\n\n    @Id\n    @Column(name = \"ID\")\n    private String id;\n\n    @Version\n    @Column(name = \"VERSION\")\n    private Long version;\n\n    @Column(name = \"INSERTED_AT\")\n    private LocalDateTime insertedAt;\n\n    @Column(name = \"INSERTED_BY\")\n    private String insertedBy;\n\n    @Column(name = \"UPDATED_AT\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"UPDATED_BY\")\n    private String updatedBy;\n", "@Getter\n@MappedSuperclass\npublic abstract class BaseEntity implements Serializable {\n\n    @Id\n    @Column(name = \"ID\")\n    private String id;\n\n    @Version\n    @Column(name = \"VERSION\")\n    private Long version;\n\n    @Column(name = \"INSERTED_AT\")\n    private LocalDateTime insertedAt;\n\n    @Column(name = \"INSERTED_BY\")\n    private String insertedBy;\n\n    @Column(name = \"UPDATED_AT\")\n    private LocalDateTime updatedAt;\n\n    @Column(name = \"UPDATED_BY\")\n    private String updatedBy;\n", "    public void setUpdatedAt(LocalDateTime updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        throw new UnsupportedOperationException(\"Should be implemented by subclass.\");\n    }\n\n    @Override\n    public int hashCode() {\n        throw new UnsupportedOperationException(\"Should be implemented by subclass.\");\n    }\n\n    @PrePersist\n    private void onPrePersist() {\n        id = UUID.randomUUID().toString();\n        insertedAt = now();\n        insertedBy = \"System\";\n        updatedAt = insertedAt;\n        updatedBy = insertedBy;\n    }\n\n    @PreUpdate\n    private void onPreUpdate() {\n        updatedAt = now();\n        updatedBy = \"System\";\n    }\n}\n", "    public int hashCode() {\n        throw new UnsupportedOperationException(\"Should be implemented by subclass.\");\n    }\n\n    @PrePersist\n    private void onPrePersist() {\n        id = UUID.randomUUID().toString();\n        insertedAt = now();\n        insertedBy = \"System\";\n        updatedAt = insertedAt;\n        updatedBy = insertedBy;\n    }\n\n    @PreUpdate\n    private void onPreUpdate() {\n        updatedAt = now();\n        updatedBy = \"System\";\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/persistence/entity/Customer.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.persistence.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.TenantId;", "import lombok.NoArgsConstructor;\nimport org.hibernate.annotations.TenantId;\n\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"CUSTOMER\")\npublic class Customer extends BaseEntity {\n\n    @Column(name = \"CUSTOMER_ID\")\n    private String customerId;\n\n    @Column(name = \"FIRST_NAME\")\n    private String firstName;\n\n    @Column(name = \"LAST_NAME\")\n    private String lastName;\n\n    @TenantId\n    private String tenantId;\n}\n", "@Entity\n@Table(name = \"CUSTOMER\")\npublic class Customer extends BaseEntity {\n\n    @Column(name = \"CUSTOMER_ID\")\n    private String customerId;\n\n    @Column(name = \"FIRST_NAME\")\n    private String firstName;\n\n    @Column(name = \"LAST_NAME\")\n    private String lastName;\n\n    @TenantId\n    private String tenantId;\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/persistence/repository/CustomerRepository.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.persistence.repository;\n\nimport com.github.wenqiglantz.service.customer.persistence.entity.Customer;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\npublic interface CustomerRepository extends CrudRepository<Customer, String> {\n    Optional<Customer> findByCustomerId(String customerId);\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/config/LiquibaseConfig.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.config;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseDataSource;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;", "import org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.context.annotation.Profile;\n\nimport javax.sql.DataSource;\n\n@Profile(\"!test\")\n@Lazy(false)", "@Profile(\"!test\")\n@Lazy(false)\n@Configuration\n@EnableConfigurationProperties(LiquibaseProperties.class)\npublic class LiquibaseConfig {\n\n    @Value(\"${multitenancy.master.schema:#{null}}\")\n    private String masterSchema;\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.master.liquibase\")", "    public LiquibaseProperties masterLiquibaseProperties() {\n        return new LiquibaseProperties();\n    }\n\n    @Bean\n    public SpringLiquibase liquibase(@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n        LiquibaseProperties liquibaseProperties = masterLiquibaseProperties();\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setDataSource(liquibaseDataSource.getIfAvailable());\n        liquibase.setChangeLog(liquibaseProperties.getChangeLog());\n        liquibase.setContexts(liquibaseProperties.getContexts());\n        liquibase.setDefaultSchema(this.masterSchema);\n        liquibase.setLiquibaseSchema(liquibaseProperties.getLiquibaseSchema());\n        liquibase.setLiquibaseTablespace(liquibaseProperties.getLiquibaseTablespace());\n        liquibase.setDatabaseChangeLogTable(liquibaseProperties.getDatabaseChangeLogTable());\n        liquibase.setDatabaseChangeLogLockTable(liquibaseProperties.getDatabaseChangeLogLockTable());\n        liquibase.setDropFirst(liquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(liquibaseProperties.isEnabled());\n        liquibase.setLabels(liquibaseProperties.getLabels());\n        liquibase.setChangeLogParameters(liquibaseProperties.getParameters());\n        liquibase.setRollbackFile(liquibaseProperties.getRollbackFile());\n        liquibase.setTestRollbackOnUpdate(liquibaseProperties.isTestRollbackOnUpdate());\n        return liquibase;\n    }\n\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/config/DataSourceConfiguration.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.config;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseDataSource;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\n\n@Slf4j\n@Component\n@Configuration\npublic class DataSourceConfiguration {\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.master.datasource\")", "public class DataSourceConfiguration {\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.master.datasource\")\n    public DataSourceProperties masterDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    @LiquibaseDataSource\n    @ConfigurationProperties(\"multitenancy.master.datasource.hikari\")", "    public DataSource masterDataSource() {\n        HikariDataSource dataSource = masterDataSourceProperties()\n                .initializeDataSourceBuilder()\n                .type(HikariDataSource.class)\n                .build();\n        dataSource.setPoolName(\"masterDataSource\");\n        return dataSource;\n    }\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/config/WebConfiguration.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.config;\n\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfiguration implements WebMvcConfigurer {\n\n    private final TenantInterceptor tenantInterceptor;\n\n    @Autowired\n    public WebConfiguration(TenantInterceptor tenantInterceptor) {\n        this.tenantInterceptor = tenantInterceptor;\n    }\n\n    @Override", "@Configuration\npublic class WebConfiguration implements WebMvcConfigurer {\n\n    private final TenantInterceptor tenantInterceptor;\n\n    @Autowired\n    public WebConfiguration(TenantInterceptor tenantInterceptor) {\n        this.tenantInterceptor = tenantInterceptor;\n    }\n\n    @Override", "    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addWebRequestInterceptor(tenantInterceptor);\n    }\n\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/data/CustomerStatus.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.data;\n\npublic enum CustomerStatus {\n    CREATED,\n    UPDATED,\n    DELETED;\n\n    public String value() {\n        return name();\n    }\n", "    public static CustomerStatus fromValue(String v) {\n        return valueOf(v);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/data/CustomerVO.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.data;\n\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@Builder", "@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonPropertyOrder({\"customerId\", \"firstName\", \"lastName\"})\npublic class CustomerVO {\n\n    private String customerId;\n\n    private String firstName;\n\n    private String lastName;\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/data/error/ErrorResponse.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.data.error;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data", "\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonPropertyOrder({ \"errorCode\", \"errorKey\", \"errorMessage\"})\npublic class ErrorResponse {\n\n    @JsonProperty(\"error-code\")\n    private String errorCode;\n\n    @JsonProperty(\"error-key\")\n    private String errorKey;\n\n    @JsonProperty(\"error-message\")\n    private String errorMessage;\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/data/error/ErrorType.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.data.error;\n\n\npublic enum ErrorType {\n    INVALID_REQUEST_DATA,\n    UNKNOWN_DATA_ITEM,\n    DATA_ALREADY_EXISTS,\n    UNEXPECTED_ERROR,\n    UPSTREAM_SERVICE_ERROR,\n    UNAUTHORIZED_REQUEST,\n    FORBIDDEN_REQUEST;\n", "    public static ErrorType fromValue(String v) {\n        return valueOf(v);\n    }\n}\n\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/data/exception/NotFoundException.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.data.exception;\n\npublic class NotFoundException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n\n    public NotFoundException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/util/EncryptionService.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;", "import javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.security.spec.KeySpec;\nimport java.util.Base64;\n\n@Slf4j\n@Service\npublic class EncryptionService {\n", "@Service\npublic class EncryptionService {\n\n    public static final String HASH_ALGORITHM = \"PBKDF2WithHmacSHA256\";\n    public static final String CIPHER = \"AES/CBC/PKCS5Padding\";\n    public static final String KEY_ALGORITHM = \"AES\";\n    public static final int ITERATION_COUNT = 65536;\n    public static final int KEY_LENGTH = 256;\n\n    public String encrypt(String strToEncrypt, String secret, String salt) {\n        try\n        {\n            byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            IvParameterSpec ivspec = new IvParameterSpec(iv);\n\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(HASH_ALGORITHM);\n            KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), ITERATION_COUNT, KEY_LENGTH);\n            SecretKey tmp = factory.generateSecret(spec);\n            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), KEY_ALGORITHM);\n\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));\n        } catch (Exception e) {\n            log.error(\"Error while encrypting: \", e);\n            return null;\n        }\n    }\n", "    public String encrypt(String strToEncrypt, String secret, String salt) {\n        try\n        {\n            byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            IvParameterSpec ivspec = new IvParameterSpec(iv);\n\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(HASH_ALGORITHM);\n            KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), ITERATION_COUNT, KEY_LENGTH);\n            SecretKey tmp = factory.generateSecret(spec);\n            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), KEY_ALGORITHM);\n\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));\n        } catch (Exception e) {\n            log.error(\"Error while encrypting: \", e);\n            return null;\n        }\n    }\n", "    public String decrypt(String strToDecrypt, String secret, String salt) {\n        try\n        {\n            byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            IvParameterSpec ivspec = new IvParameterSpec(iv);\n\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(HASH_ALGORITHM);\n            KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), ITERATION_COUNT, KEY_LENGTH);\n            SecretKey tmp = factory.generateSecret(spec);\n            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), KEY_ALGORITHM);\n\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);\n            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));\n        } catch (Exception e) {\n            log.error(\"Error while decrypting: \", e);\n            return null;\n        }\n    }\n\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/Tenant.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.Id;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;", "import lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class Tenant {\n\n    @Id\n    @Column(name = \"tenant_id\")\n    private String tenantId;\n\n    @Column(name = \"isolation_type\")\n    @Enumerated(EnumType.STRING)\n    private IsolationType isolationType;\n\n    @Column(name = \"db_or_schema\")\n    private String dbOrSchema;\n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"username\")\n    private String userName;\n\n    @Column(name = \"password\")\n    private String password;\n\n}", "@Builder\npublic class Tenant {\n\n    @Id\n    @Column(name = \"tenant_id\")\n    private String tenantId;\n\n    @Column(name = \"isolation_type\")\n    @Enumerated(EnumType.STRING)\n    private IsolationType isolationType;\n\n    @Column(name = \"db_or_schema\")\n    private String dbOrSchema;\n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"username\")\n    private String userName;\n\n    @Column(name = \"password\")\n    private String password;\n\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/TenantConstants.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\npublic class TenantConstants {\n    public static final String X_TENANT_ID = \"X-TENANT-ID\";\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/IsolationType.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\npublic enum IsolationType {\n    DATABASE,\n    SCHEMA,\n    DISCRIMINATOR;\n\n    public String value() {\n        return name();\n    }\n", "    public static IsolationType fromValue(String v) {\n        return valueOf(v);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/TenantInterceptor.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.lang.NonNull;\nimport org.springframework.stereotype.Component;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.context.request.ServletWebRequest;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.context.request.WebRequestInterceptor;", "import org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.context.request.WebRequestInterceptor;\n\n@Component\npublic class TenantInterceptor implements WebRequestInterceptor {\n\n    private final String defaultTenant;\n\n    @Autowired\n    public TenantInterceptor(\n            @Value(\"${multitenancy.tenant.default-tenant:#{null}}\") String defaultTenant) {\n        this.defaultTenant = defaultTenant;\n    }\n\n    @Override", "    public void preHandle(WebRequest request) {\n        String tenantId;\n        if (request.getHeader(TenantConstants.X_TENANT_ID) != null) {\n            tenantId = request.getHeader(TenantConstants.X_TENANT_ID);\n        } else if (this.defaultTenant != null) {\n            tenantId = this.defaultTenant;\n        } else {\n            tenantId = ((ServletWebRequest)request).getRequest().getServerName().split(\"\\\\.\")[0];\n        }\n        TenantContext.setTenantId(tenantId);\n    }\n\n    @Override", "    public void postHandle(@NonNull WebRequest request, ModelMap model) {\n        TenantContext.clear();\n    }\n\n    @Override\n    public void afterCompletion(@NonNull WebRequest request, Exception ex) {\n        // NOOP\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/TenantRepository.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.Optional;\n\npublic interface TenantRepository extends JpaRepository<Tenant, String> {\n\n    @Query(\"select t from Tenant t where t.tenantId = :tenantId\")\n    Optional<Tenant> findByTenantId(@Param(\"tenantId\") String tenantId);\n}\n", "public interface TenantRepository extends JpaRepository<Tenant, String> {\n\n    @Query(\"select t from Tenant t where t.tenantId = :tenantId\")\n    Optional<Tenant> findByTenantId(@Param(\"tenantId\") String tenantId);\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/TenantService.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class TenantService {\n\n    private final TenantRepository tenantRepository;\n\n    @Autowired\n    public TenantService(TenantRepository tenantRepository) {\n        this.tenantRepository = tenantRepository;\n    }\n", "    public Tenant findByTenantId(String tenantId) {\n        return tenantRepository.findByTenantId(tenantId)\n                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + tenantId));\n    }\n\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/TenantContext.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic final class TenantContext {\n\n    private TenantContext() {}\n\n    private static final InheritableThreadLocal<String> CURRENT_TENANT = new InheritableThreadLocal<>();\n", "    public static void setTenantId(String tenantId) {\n        log.debug(\"Setting tenantId to \" + tenantId);\n        CURRENT_TENANT.set(tenantId);\n    }\n\n    public static String getTenantId() {\n        return CURRENT_TENANT.get();\n    }\n\n    public static void clear(){\n        CURRENT_TENANT.remove();\n    }\n}\n", "    public static void clear(){\n        CURRENT_TENANT.remove();\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/master/MasterHibernateConfig.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.master;\n\nimport jakarta.persistence.EntityManagerFactory;\nimport org.hibernate.cfg.AvailableSettings;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;", "import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.hibernate5.SpringBeanContainer;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;", "import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\n@EnableJpaRepositories(\n        basePackages = { \"${multitenancy.master.repository.packages}\" },", "@EnableJpaRepositories(\n        basePackages = { \"${multitenancy.master.repository.packages}\" },\n        entityManagerFactoryRef = \"masterEntityManagerFactory\",\n        transactionManagerRef = \"masterTransactionManager\"\n)\n@EnableConfigurationProperties(JpaProperties.class)\npublic class MasterHibernateConfig {\n\n    private final ConfigurableListableBeanFactory beanFactory;\n    private final JpaProperties jpaProperties;\n\n    @Value(\"${multitenancy.master.entityManager.packages}\")\n\tprivate String entityPackages;\n\n\t@Autowired\n    public MasterHibernateConfig(ConfigurableListableBeanFactory beanFactory,\n                                 JpaProperties jpaProperties) {\n        this.beanFactory = beanFactory;\n        this.jpaProperties = jpaProperties;\n    }\n\n    @Bean(name = \"masterEntityManagerFactory\")", "    public LocalContainerEntityManagerFactoryBean masterEntityManagerFactory(\n            @Qualifier(\"masterDataSource\") DataSource dataSource) {\n        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n\n        em.setPersistenceUnitName(\"master-persistence-unit\");\n        em.setPackagesToScan(entityPackages);\n        em.setDataSource(dataSource);\n\n        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n        em.setJpaVendorAdapter(vendorAdapter);\n\n        Map<String, Object> properties = new HashMap<>(this.jpaProperties.getProperties());\n        properties.put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(this.beanFactory));\n        em.setJpaPropertyMap(properties);\n\n        return em;\n    }\n\n    @Bean(name = \"masterTransactionManager\")", "    public JpaTransactionManager masterTransactionManager(\n            @Qualifier(\"masterEntityManagerFactory\") EntityManagerFactory emf) {\n        JpaTransactionManager transactionManager = new JpaTransactionManager();\n        transactionManager.setEntityManagerFactory(emf);\n        return transactionManager;\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/tenant/CurrentTenantIdentifierResolverImpl.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.tenant;\n\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantContext;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.logging.log4j.util.Strings;\nimport org.hibernate.cfg.AvailableSettings;\nimport org.hibernate.context.spi.CurrentTenantIdentifierResolver;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;", "import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;\n\n@Slf4j\n@Component(\"currentTenantIdentifierResolver\")\npublic class CurrentTenantIdentifierResolverImpl implements CurrentTenantIdentifierResolver,\n        HibernatePropertiesCustomizer {\n\n    private final String defaultTenant;\n\n    @Autowired\n    public CurrentTenantIdentifierResolverImpl(\n            @Value(\"${multitenancy.master.schema:#{null}}\") String defaultTenant) {\n        this.defaultTenant = defaultTenant;\n    }\n\n    @Override", "public class CurrentTenantIdentifierResolverImpl implements CurrentTenantIdentifierResolver,\n        HibernatePropertiesCustomizer {\n\n    private final String defaultTenant;\n\n    @Autowired\n    public CurrentTenantIdentifierResolverImpl(\n            @Value(\"${multitenancy.master.schema:#{null}}\") String defaultTenant) {\n        this.defaultTenant = defaultTenant;\n    }\n\n    @Override", "    public String resolveCurrentTenantIdentifier() {\n        String tenantId = TenantContext.getTenantId();\n        log.info(\">>> tenantId in resolveCurrentTenantIdentifier \", tenantId);\n        if (!Strings.isEmpty(tenantId)) {\n            return tenantId;\n        } else if (!Strings.isEmpty(this.defaultTenant)) {\n            return this.defaultTenant;\n        } else {\n            throw new IllegalStateException(\"No tenant selected\");\n        }\n    }\n\n    @Override", "    public boolean validateExistingCurrentSessions() {\n        return false;\n    }\n\n    @Override\n    public void customize(Map<String, Object> hibernateProperties) {\n        hibernateProperties.put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, this);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/tenant/TenantLiquibaseConfig.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.tenant;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;", "import org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Lazy;\nimport com.github.wenqiglantz.service.customer.multitenancy.config.tenant.liquibase.HybridMultiTenantSpringLiquibase;\n\n@Slf4j\n@Lazy(false)\n@Configuration", "@Lazy(false)\n@Configuration\n@ConditionalOnProperty(name = \"multitenancy.tenant.liquibase.enabled\", havingValue = \"true\", matchIfMissing = true)\n@EnableConfigurationProperties(LiquibaseProperties.class)\npublic class TenantLiquibaseConfig {\n\n    @Value(\"${multitenancy.tenant.liquibase.changeLog}\")\n    private String tenantLiquibaseChangeLog;\n\n    @Bean\n    @DependsOn(\"liquibase\")", "    public HybridMultiTenantSpringLiquibase hybridcMultiTenantSpringLiquibase(\n            @Qualifier(\"masterLiquibaseProperties\")\n            LiquibaseProperties liquibaseProperties) {\n        HybridMultiTenantSpringLiquibase liquibase = new HybridMultiTenantSpringLiquibase();\n        liquibase.setChangeLog(tenantLiquibaseChangeLog);\n        liquibase.setDropFirst(liquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(liquibaseProperties.isEnabled());\n        return liquibase;\n    }\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.tenant.liquibase\")", "    public LiquibaseProperties tenantLiquibaseProperties() {\n        return new LiquibaseProperties();\n    }\n\n    @Bean\n    public HybridMultiTenantSpringLiquibase tenantLiquibase() {\n        return new HybridMultiTenantSpringLiquibase();\n    }\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/tenant/TenantHibernateConfig.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.tenant;\n\nimport com.github.wenqiglantz.service.customer.multitenancy.Tenant;\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantRepository;\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantContext;\nimport jakarta.persistence.EntityManagerFactory;\nimport lombok.extern.slf4j.Slf4j;\nimport org.hibernate.cfg.AvailableSettings;\nimport org.hibernate.context.spi.CurrentTenantIdentifierResolver;\nimport org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;", "import org.hibernate.context.spi.CurrentTenantIdentifierResolver;\nimport org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;", "import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.hibernate5.SpringBeanContainer;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n", "import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Slf4j\n@Configuration\n@EnableJpaRepositories(\n        basePackages = {\"${multitenancy.tenant.repository.packages}\" },\n        entityManagerFactoryRef = \"tenantEntityManagerFactory\",", "        basePackages = {\"${multitenancy.tenant.repository.packages}\" },\n        entityManagerFactoryRef = \"tenantEntityManagerFactory\",\n        transactionManagerRef = \"tenantTransactionManager\"\n)\n@EnableConfigurationProperties(JpaProperties.class)\npublic class TenantHibernateConfig {\n\n    private final ConfigurableListableBeanFactory beanFactory;\n    private final JpaProperties jpaProperties;\n\n    private final TenantRepository tenantRepository;\n\n    @Value(\"${multitenancy.tenant.entityManager.packages}\")\n    private String entityPackages;\n\n    @Autowired\n    public TenantHibernateConfig(\n            ConfigurableListableBeanFactory beanFactory,\n            JpaProperties jpaProperties, TenantRepository tenantRepository) {\n        this.beanFactory = beanFactory;\n        this.jpaProperties = jpaProperties;\n        this.tenantRepository = tenantRepository;\n    }\n\n    @Primary\n    @Bean(\"tenantEntityManagerFactory\")", "    public LocalContainerEntityManagerFactoryBean tenantEntityManagerFactory(\n            @Qualifier(\"hybridMultiTenantConnectionProvider\")\n            MultiTenantConnectionProvider connectionProvider,\n            @Qualifier(\"currentTenantIdentifierResolver\") CurrentTenantIdentifierResolver tenantResolver) {\n        LocalContainerEntityManagerFactoryBean emfBean = new LocalContainerEntityManagerFactoryBean();\n        emfBean.setPersistenceUnitName(\"tenantdb-persistence-unit\");\n        emfBean.setPackagesToScan(entityPackages);\n\n        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n        emfBean.setJpaVendorAdapter(vendorAdapter);\n\n        Map<String, Object> properties = new HashMap<>(this.jpaProperties.getProperties());\n        properties.put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(this.beanFactory));\n\n        String tenant = TenantContext.getTenantId();", "        if (null == tenant) {\n            properties.remove(AvailableSettings.DEFAULT_SCHEMA);\n        } else {\n            //TODO\n            Tenant dbTenant = tenantRepository.findByTenantId(tenant).get();\n            switch (dbTenant.getIsolationType()) {\n                case DATABASE:\n                    break;\n                case SCHEMA:\n                    properties.remove(AvailableSettings.DEFAULT_SCHEMA);\n                    break;\n            }\n        }\n\n        properties.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, connectionProvider);\n        properties.put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, tenantResolver);\n        emfBean.setJpaPropertyMap(properties);\n\n        log.info(\"tenantEntityManagerFactory set up successfully!\");\n        return emfBean;\n    }\n\n    @Primary\n    @Bean(\"tenantTransactionManager\")", "    public JpaTransactionManager tenantTransactionManager(\n            @Qualifier(\"tenantEntityManagerFactory\") EntityManagerFactory emf) {\n        JpaTransactionManager tenantTransactionManager = new JpaTransactionManager();\n        tenantTransactionManager.setEntityManagerFactory(emf);\n        return tenantTransactionManager;\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/tenant/hibernate/HybridMultiTenantConnectionProvider.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.tenant.hibernate;\n\nimport com.github.wenqiglantz.service.customer.multitenancy.Tenant;\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantRepository;\nimport com.github.wenqiglantz.service.customer.util.EncryptionService;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport com.google.common.cache.RemovalListener;\nimport com.zaxxer.hikari.HikariDataSource;", "import com.google.common.cache.RemovalListener;\nimport com.zaxxer.hikari.HikariDataSource;\nimport jakarta.annotation.PostConstruct;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.hibernate.engine.jdbc.connections.spi.AbstractDataSourceBasedMultiTenantConnectionProviderImpl;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.stereotype.Component;", "import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\n@RequiredArgsConstructor\n@Slf4j\n@Component(\"hybridMultiTenantConnectionProvider\")\npublic class HybridMultiTenantConnectionProvider\n        extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl {\n\n    private static final String TENANT_POOL_NAME_SUFFIX = \"DataSource\";\n\n    private final EncryptionService encryptionService;\n\n    @Qualifier(\"masterDataSource\")\n    private final DataSource masterDataSource;\n\n    @Qualifier(\"masterDataSourceProperties\")\n    private final DataSourceProperties dataSourceProperties;\n\n    private final TenantRepository masterTenantRepository;\n\n    @Value(\"${multitenancy.tenant.datasource.url-prefix}\")\n    private String urlPrefix;\n\n    @Value(\"${multitenancy.datasource-cache.maximumSize:100}\")\n    private Long maximumSize;\n\n    @Value(\"${multitenancy.datasource-cache.expireAfterAccess:10}\")\n    private Integer expireAfterAccess;\n\n    @Value(\"${encryption.secret}\")\n    private String secret;\n\n    @Value(\"${encryption.salt}\")\n    private String salt;\n\n    private LoadingCache<String, DataSource> tenantDataSources;\n\n    @PostConstruct\n    private void createCache() {\n        tenantDataSources = CacheBuilder.newBuilder()\n                .maximumSize(maximumSize)\n                .expireAfterAccess(expireAfterAccess, TimeUnit.MINUTES)\n                .removalListener((RemovalListener<String, DataSource>) removal -> {\n                    HikariDataSource ds = (HikariDataSource) removal.getValue();\n                    ds.close(); // tear down properly\n                    log.info(\"Closed datasource: {}\", ds.getPoolName());\n                })\n                .build(new CacheLoader<String, DataSource>() {", "@Slf4j\n@Component(\"hybridMultiTenantConnectionProvider\")\npublic class HybridMultiTenantConnectionProvider\n        extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl {\n\n    private static final String TENANT_POOL_NAME_SUFFIX = \"DataSource\";\n\n    private final EncryptionService encryptionService;\n\n    @Qualifier(\"masterDataSource\")\n    private final DataSource masterDataSource;\n\n    @Qualifier(\"masterDataSourceProperties\")\n    private final DataSourceProperties dataSourceProperties;\n\n    private final TenantRepository masterTenantRepository;\n\n    @Value(\"${multitenancy.tenant.datasource.url-prefix}\")\n    private String urlPrefix;\n\n    @Value(\"${multitenancy.datasource-cache.maximumSize:100}\")\n    private Long maximumSize;\n\n    @Value(\"${multitenancy.datasource-cache.expireAfterAccess:10}\")\n    private Integer expireAfterAccess;\n\n    @Value(\"${encryption.secret}\")\n    private String secret;\n\n    @Value(\"${encryption.salt}\")\n    private String salt;\n\n    private LoadingCache<String, DataSource> tenantDataSources;\n\n    @PostConstruct\n    private void createCache() {\n        tenantDataSources = CacheBuilder.newBuilder()\n                .maximumSize(maximumSize)\n                .expireAfterAccess(expireAfterAccess, TimeUnit.MINUTES)\n                .removalListener((RemovalListener<String, DataSource>) removal -> {\n                    HikariDataSource ds = (HikariDataSource) removal.getValue();\n                    ds.close(); // tear down properly\n                    log.info(\"Closed datasource: {}\", ds.getPoolName());\n                })\n                .build(new CacheLoader<String, DataSource>() {", "                    public DataSource load(String key) {\n                        Tenant tenant = masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));\n                        return createAndConfigureDataSource(tenant);\n                    }\n                });\n    }\n\n    @Override\n    protected DataSource selectAnyDataSource() {\n        return masterDataSource;\n    }\n\n    @Override\n    protected DataSource selectDataSource(String tenantIdentifier) {", "        try {\n            return tenantDataSources.get(tenantIdentifier);\n        } catch (ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private DataSource createAndConfigureDataSource(Tenant tenant) {\n        String decryptedPassword = encryptionService.decrypt(tenant.getPassword(), secret, salt);\n        HikariDataSource ds = dataSourceProperties.initializeDataSourceBuilder().type(HikariDataSource.class).build();\n        ds.setUsername(tenant.getUserName());\n        ds.setPassword(decryptedPassword);\n        ds.setJdbcUrl(tenant.getUrl());\n        ds.setPoolName(tenant.getTenantId() + TENANT_POOL_NAME_SUFFIX);\n\n        log.info(\"Configured datasource: {}\", ds.getPoolName());\n        log.info(\"ds url \" + ds.getJdbcUrl() + \", user \" + ds.getUsername() + \", isolation \" + tenant.getIsolationType());\n        return ds;\n    }\n\n}"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/multitenancy/config/tenant/liquibase/HybridMultiTenantSpringLiquibase.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.multitenancy.config.tenant.liquibase;\n\nimport com.github.wenqiglantz.service.customer.multitenancy.Tenant;\nimport com.github.wenqiglantz.service.customer.multitenancy.TenantRepository;\nimport com.github.wenqiglantz.service.customer.util.EncryptionService;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.integration.spring.SpringLiquibase;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;", "import lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.SingleConnectionDataSource;", "import org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.SingleConnectionDataSource;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Collection;\n\n/**", "\n/**\n * Based on MultiTenantSpringLiquibase, this class provides Liquibase support for\n * multitenancy based on a hybrid collection of DataSources.\n */\n@Getter\n@Setter\n@Slf4j\npublic class HybridMultiTenantSpringLiquibase implements InitializingBean, ResourceLoaderAware {\n\n    @Autowired\n    private EncryptionService encryptionService;\n\n    @Autowired\n    private TenantRepository masterTenantRepository;\n\n    @Autowired\n    @Qualifier(\"tenantLiquibaseProperties\")\n    private LiquibaseProperties liquibaseProperties;\n\n    @Value(\"${multitenancy.tenant.datasource.url-prefix}\")\n    private String urlPrefix;\n\n    @Value(\"${encryption.secret}\")\n    private String secret;\n\n    @Value(\"${encryption.salt}\")\n    private String salt;\n\n    private ResourceLoader resourceLoader;\n    private String changeLog;\n    private String contexts;\n    private boolean dropFirst = false;\n    private boolean shouldRun = true;\n\n    @Override", "public class HybridMultiTenantSpringLiquibase implements InitializingBean, ResourceLoaderAware {\n\n    @Autowired\n    private EncryptionService encryptionService;\n\n    @Autowired\n    private TenantRepository masterTenantRepository;\n\n    @Autowired\n    @Qualifier(\"tenantLiquibaseProperties\")\n    private LiquibaseProperties liquibaseProperties;\n\n    @Value(\"${multitenancy.tenant.datasource.url-prefix}\")\n    private String urlPrefix;\n\n    @Value(\"${encryption.secret}\")\n    private String secret;\n\n    @Value(\"${encryption.salt}\")\n    private String salt;\n\n    private ResourceLoader resourceLoader;\n    private String changeLog;\n    private String contexts;\n    private boolean dropFirst = false;\n    private boolean shouldRun = true;\n\n    @Override", "    public void afterPropertiesSet() throws Exception {\n        log.info(\"Hybrid multitenancy enabled\");\n        this.runOnAllTenants(masterTenantRepository.findAll());\n    }\n\n    protected void runOnAllTenants(Collection<Tenant> tenants) throws LiquibaseException {\n        for(Tenant tenant : tenants) {\n            String decryptedPassword = encryptionService.decrypt(tenant.getPassword(), secret, salt);\n            log.info(\"Initializing Liquibase for tenant \" + tenant.getTenantId() + \" and password \" + decryptedPassword);\n            switch (tenant.getIsolationType()) {\n                case DATABASE:\n                    try (Connection connection = DriverManager.getConnection(urlPrefix + tenant.getDbOrSchema(),\n                            tenant.getDbOrSchema(), decryptedPassword)) {\n                        DataSource tenantDataSource = new SingleConnectionDataSource(connection, false);\n                        SpringLiquibase liquibase = this.getSpringLiquibase(tenantDataSource);\n                        liquibase.afterPropertiesSet();\n                    } catch (SQLException | LiquibaseException e) {\n                        log.error(\"Failed to run Liquibase for tenant \" + tenant.getTenantId(), e);\n                    }\n                    break;\n                case SCHEMA:\n                    try (Connection connection = DriverManager.getConnection(tenant.getUrl(), tenant.getDbOrSchema(),\n                            decryptedPassword)) {\n                        DataSource tenantDataSource = new SingleConnectionDataSource(connection, false);\n                        SpringLiquibase liquibase = this.getSpringLiquibase(tenantDataSource, tenant.getDbOrSchema());\n                        liquibase.afterPropertiesSet();\n                    } catch (SQLException | LiquibaseException e) {\n                        e.printStackTrace();\n                        throw new RuntimeException(e.getMessage());\n                    }\n                    break;\n            }\n            log.info(\"Liquibase ran for tenant \" + tenant.getTenantId());\n        }\n    }\n\n    protected SpringLiquibase getSpringLiquibase(DataSource dataSource, String schema) {\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setResourceLoader(getResourceLoader());\n        liquibase.setDataSource(dataSource);\n        liquibase.setChangeLog(getChangeLog());\n        liquibase.setContexts(getContexts());\n        liquibase.setDefaultSchema(schema);\n        liquibase.setDropFirst(isDropFirst());\n        liquibase.setShouldRun(isShouldRun());\n        return liquibase;\n    }\n\n    protected SpringLiquibase getSpringLiquibase(DataSource dataSource) {\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setResourceLoader(getResourceLoader());\n        liquibase.setDataSource(dataSource);\n        liquibase.setChangeLog(liquibaseProperties.getChangeLog());\n        liquibase.setContexts(liquibaseProperties.getContexts());\n        liquibase.setLiquibaseSchema(liquibaseProperties.getLiquibaseSchema());\n        liquibase.setLiquibaseTablespace(liquibaseProperties.getLiquibaseTablespace());\n        liquibase.setDatabaseChangeLogTable(liquibaseProperties.getDatabaseChangeLogTable());\n        liquibase.setDatabaseChangeLogLockTable(liquibaseProperties.getDatabaseChangeLogLockTable());\n        liquibase.setDropFirst(liquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(liquibaseProperties.isEnabled());\n        liquibase.setLabels(liquibaseProperties.getLabels());\n        liquibase.setChangeLogParameters(liquibaseProperties.getParameters());\n        liquibase.setRollbackFile(liquibaseProperties.getRollbackFile());\n        liquibase.setTestRollbackOnUpdate(liquibaseProperties.isTestRollbackOnUpdate());\n        return liquibase;\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/services/CustomerService.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.services;\n\nimport com.github.wenqiglantz.service.customer.data.CustomerVO;\nimport com.github.wenqiglantz.service.customer.data.exception.NotFoundException;\nimport com.github.wenqiglantz.service.customer.persistence.entity.Customer;\nimport com.github.wenqiglantz.service.customer.persistence.repository.CustomerRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.logging.log4j.util.Strings;\nimport org.springframework.stereotype.Component;", "import org.apache.logging.log4j.util.Strings;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.UUID;\n\nimport static java.util.stream.Collectors.toList;\n\n@Slf4j\n@Component", "@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class CustomerService {\n\n    private final CustomerRepository customerRepository;\n    \n    public CustomerVO saveCustomer(CustomerVO customerVO) throws Exception {\n        customerVO.setCustomerId(Strings.isBlank(customerVO.getCustomerId()) ? UUID.randomUUID().toString() : customerVO.getCustomerId());\n        Customer customer = Customer.builder()\n                .customerId(customerVO.getCustomerId())\n                .firstName(customerVO.getFirstName())\n                .lastName(customerVO.getLastName())\n                .build();\n        customerRepository.save(customer);\n        return customerVO;\n    }\n", "    public CustomerVO getCustomer(String customerId) {\n        Customer customer =\n                customerRepository.findByCustomerId(customerId).orElseThrow(() ->\n                        new NotFoundException(\"Could not find customer with customerId: \" + customerId));\n\n        CustomerVO customerVO = CustomerVO.builder()\n                .customerId(customerId)\n                .firstName(customer.getFirstName())\n                .lastName(customer.getLastName())\n                .build();\n        return customerVO;\n    }\n\n    public List<CustomerVO> getCustomers() {\n        List<Customer> customers = (List<Customer>) customerRepository.findAll();\n\n        List<CustomerVO> customerVOS = customers.stream()\n                .map(customer -> CustomerVO.builder()\n                        .customerId(customer.getCustomerId())\n                        .firstName(customer.getFirstName())\n                        .lastName(customer.getLastName())\n                        .build())\n                .collect(toList());\n\n        return customerVOS;\n    }\n    ", "    public void updateCustomer(String customerId, CustomerVO customerVO) throws Exception {\n        Customer customer =\n                customerRepository.findByCustomerId(customerId).orElseThrow(() ->\n                        new NotFoundException(\"Could not find customer with customerId: \" + customerId));\n        customer.setFirstName(customerVO.getFirstName());\n        customer.setLastName(customerVO.getLastName());\n        customerRepository.save(customer);\n    }\n\n    public void deleteCustomer(String customerId) throws Exception {\n        Customer customer =\n                customerRepository.findByCustomerId(customerId).orElseThrow(() ->\n                        new NotFoundException(\"Could not find customer with customerId: \" + customerId));\n        customerRepository.delete(customer);\n    }\n}\n", "    public void deleteCustomer(String customerId) throws Exception {\n        Customer customer =\n                customerRepository.findByCustomerId(customerId).orElseThrow(() ->\n                        new NotFoundException(\"Could not find customer with customerId: \" + customerId));\n        customerRepository.delete(customer);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/restcontroller/CustomerController.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.restcontroller;\n\nimport com.github.wenqiglantz.service.customer.data.CustomerVO;\nimport com.github.wenqiglantz.service.customer.services.CustomerService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;", "import org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\n", "import org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\n\n@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(value = \"/customers\",\n        produces = MediaType.APPLICATION_JSON_VALUE)\npublic class CustomerController {\n\n    private static final String JSON = MediaType.APPLICATION_JSON_VALUE;\n\n    private final CustomerService customerService;\n\n    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)", "@RequestMapping(value = \"/customers\",\n        produces = MediaType.APPLICATION_JSON_VALUE)\npublic class CustomerController {\n\n    private static final String JSON = MediaType.APPLICATION_JSON_VALUE;\n\n    private final CustomerService customerService;\n\n    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity createCustomer(@RequestBody CustomerVO customerVO, UriComponentsBuilder uriBuilder)\n        throws Exception {\n        CustomerVO newCustomerVO = customerService.saveCustomer(customerVO);\n        URI location = uriBuilder\n                .path(\"/customers/{customerId}\")\n                .buildAndExpand(newCustomerVO.getCustomerId())\n                .toUri();\n        return ResponseEntity.created(location)\n                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))\n                .body(CustomerVO.builder()\n                        .customerId(newCustomerVO.getCustomerId())\n                        .firstName(newCustomerVO.getFirstName())\n                        .lastName(newCustomerVO.getLastName())\n                        .build());\n    }\n\n    @GetMapping(produces = JSON)\n    public ResponseEntity<List<CustomerVO>> getCustomers() {\n        return ResponseEntity.ok(customerService.getCustomers());\n    }\n\n    @GetMapping(value = \"/{customerId}\")", "    public ResponseEntity createCustomer(@RequestBody CustomerVO customerVO, UriComponentsBuilder uriBuilder)\n        throws Exception {\n        CustomerVO newCustomerVO = customerService.saveCustomer(customerVO);\n        URI location = uriBuilder\n                .path(\"/customers/{customerId}\")\n                .buildAndExpand(newCustomerVO.getCustomerId())\n                .toUri();\n        return ResponseEntity.created(location)\n                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))\n                .body(CustomerVO.builder()\n                        .customerId(newCustomerVO.getCustomerId())\n                        .firstName(newCustomerVO.getFirstName())\n                        .lastName(newCustomerVO.getLastName())\n                        .build());\n    }\n\n    @GetMapping(produces = JSON)\n    public ResponseEntity<List<CustomerVO>> getCustomers() {\n        return ResponseEntity.ok(customerService.getCustomers());\n    }\n\n    @GetMapping(value = \"/{customerId}\")", "    public ResponseEntity getCustomer(@PathVariable String customerId) {\n        return ResponseEntity.ok(customerService.getCustomer(customerId));\n    }\n\n    @PutMapping(value = \"/{customerId}\", consumes = JSON)\n    public ResponseEntity updateCustomer(@PathVariable String customerId, @RequestBody CustomerVO customerVO)\n        throws Exception {\n        customerService.updateCustomer(customerId, customerVO);\n        return ResponseEntity.noContent().build();\n    }\n\n    @DeleteMapping(value = \"/{customerId}\")", "    public ResponseEntity deleteCustomer(@PathVariable String customerId) throws Exception {\n        customerService.deleteCustomer(customerId);\n        return ResponseEntity.noContent().build();\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-customer-service/src/main/java/com/github/wenqiglantz/service/customer/restcontroller/advice/GeneralExceptionControllerAdvice.java", "chunked_list": ["package com.github.wenqiglantz.service.customer.restcontroller.advice;\n\nimport com.github.wenqiglantz.service.customer.data.error.ErrorResponse;\nimport com.github.wenqiglantz.service.customer.data.error.ErrorType;\nimport com.github.wenqiglantz.service.customer.data.exception.NotFoundException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.UUID;\n\n@Slf4j\n@Order", "@Slf4j\n@Order\n@ControllerAdvice\npublic class GeneralExceptionControllerAdvice {\n\n    @ExceptionHandler(NotFoundException.class)\n    @ResponseBody\n    public ResponseEntity<ErrorResponse> handleNotFoundException(NotFoundException exception) {\n        ErrorResponse errorResponse = ErrorResponse.builder()\n                .errorCode(HttpStatus.NOT_FOUND.toString())\n                .errorKey(ErrorType.UNKNOWN_DATA_ITEM.name())\n                .errorMessage(exception.getMessage()).build();\n        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);\n    }\n\n    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n    @ResponseBody\n    public ResponseEntity<ErrorResponse> handleHttpRequestMethodNotSupportedException(\n            HttpRequestMethodNotSupportedException exception) {\n        String errorDescription = exception.getMessage() + \" for this resource\";\n\n        ErrorResponse errorResponse = ErrorResponse.builder()\n                .errorCode(HttpStatus.BAD_REQUEST.toString())\n                .errorKey(ErrorType.INVALID_REQUEST_DATA.name())\n                .errorMessage(errorDescription).build();\n        log.warn(errorDescription, exception);\n        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(RuntimeException.class)\n    @ResponseBody\n    public ResponseEntity<ErrorResponse> handleRuntimeException(RuntimeException exception) {\n        String messageId = UUID.randomUUID().toString();\n        String errorDescription = \"Unexpected system exception ID: \" + messageId;\n\n        ErrorResponse errorResponse = ErrorResponse.builder()\n                .errorCode(HttpStatus.INTERNAL_SERVER_ERROR.toString())\n                .errorKey(ErrorType.UNEXPECTED_ERROR.name())\n                .errorMessage(errorDescription).build();\n        log.warn(errorDescription, exception);\n        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/test/java/com/github/wenqiglantz/service/tenantadmin/TenantAdminServiceApplicationIntegrationTest.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CustomerServiceApplicationIntegrationTest {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/TenantAdminServiceApplication.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration;\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n\n@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class, LiquibaseAutoConfiguration.class })\npublic class TenantAdminServiceApplication extends SpringBootServletInitializer {\n", "@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class, LiquibaseAutoConfiguration.class })\npublic class TenantAdminServiceApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(TenantAdminServiceApplication.class, args);\n    }\n}\n\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/repository/TenantRepository.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.repository;\n\nimport com.github.wenqiglantz.service.tenantadmin.domain.entity.Tenant;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface TenantRepository extends CrudRepository<Tenant, String> {\n}"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/domain/entity/Tenant.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.domain.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;", "import jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.Id;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class Tenant {\n\n    @Id\n    @Column(name = \"tenant_id\")\n    private String tenantId;\n\n    @Column(name = \"isolation_type\")\n    @Enumerated(EnumType.STRING)\n    private IsolationType isolationType;\n\n    @Column(name = \"db_or_schema\")\n    private String dbOrSchema;\n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"username\")\n    private String username;\n\n    @Column(name = \"password\")\n    private String password;\n\n}", "@NoArgsConstructor\n@Builder\npublic class Tenant {\n\n    @Id\n    @Column(name = \"tenant_id\")\n    private String tenantId;\n\n    @Column(name = \"isolation_type\")\n    @Enumerated(EnumType.STRING)\n    private IsolationType isolationType;\n\n    @Column(name = \"db_or_schema\")\n    private String dbOrSchema;\n\n    @Column(name = \"url\")\n    private String url;\n\n    @Column(name = \"username\")\n    private String username;\n\n    @Column(name = \"password\")\n    private String password;\n\n}"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/domain/entity/IsolationType.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.domain.entity;\n\npublic enum IsolationType {\n    DATABASE,\n    SCHEMA,\n    DISCRIMINATOR;\n\n    public String value() {\n        return name();\n    }\n", "    public static IsolationType fromValue(String v) {\n        return valueOf(v);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/config/LiquibaseConfig.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.config;\n\nimport liquibase.integration.spring.SpringLiquibase;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseDataSource;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;", "import org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Lazy;\n\nimport javax.sql.DataSource;\n\n@Lazy(false)\n@Configuration\n@ConditionalOnProperty(name = \"multitenancy.master.liquibase.enabled\", havingValue = \"true\", matchIfMissing = true)", "@Configuration\n@ConditionalOnProperty(name = \"multitenancy.master.liquibase.enabled\", havingValue = \"true\", matchIfMissing = true)\n@EnableConfigurationProperties(LiquibaseProperties.class)\npublic class LiquibaseConfig {\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.master.liquibase\")\n    public LiquibaseProperties masterLiquibaseProperties() {\n        return new LiquibaseProperties();\n    }\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.tenant.liquibase\")", "    public LiquibaseProperties tenantLiquibaseProperties() {\n        return new LiquibaseProperties();\n    }\n\n    @Bean\n    public SpringLiquibase masterLiquibase(@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {\n        LiquibaseProperties liquibaseProperties = masterLiquibaseProperties();\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setDataSource(liquibaseDataSource.getIfAvailable());\n        liquibase.setChangeLog(liquibaseProperties.getChangeLog());\n        liquibase.setContexts(liquibaseProperties.getContexts());\n        liquibase.setDefaultSchema(liquibaseProperties.getDefaultSchema());\n        liquibase.setLiquibaseSchema(liquibaseProperties.getLiquibaseSchema());\n        liquibase.setLiquibaseTablespace(liquibaseProperties.getLiquibaseTablespace());\n        liquibase.setDatabaseChangeLogTable(liquibaseProperties.getDatabaseChangeLogTable());\n        liquibase.setDatabaseChangeLogLockTable(liquibaseProperties.getDatabaseChangeLogLockTable());\n        liquibase.setDropFirst(liquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(liquibaseProperties.isEnabled());\n        liquibase.setLabels(liquibaseProperties.getLabels());\n        liquibase.setChangeLogParameters(liquibaseProperties.getParameters());\n        liquibase.setRollbackFile(liquibaseProperties.getRollbackFile());\n        liquibase.setTestRollbackOnUpdate(liquibaseProperties.isTestRollbackOnUpdate());\n        return liquibase;\n    }\n\n}"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/config/DataSourceConfiguration.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.config;\n\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseDataSource;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\n\n@Component\n@Configuration\npublic class DataSourceConfiguration {\n\n    @Bean\n    @ConfigurationProperties(\"multitenancy.master.datasource\")\n    public DataSourceProperties masterDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    @LiquibaseDataSource\n    @ConfigurationProperties(\"multitenancy.master.datasource.hikari\")", "    public DataSourceProperties masterDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    @LiquibaseDataSource\n    @ConfigurationProperties(\"multitenancy.master.datasource.hikari\")\n    public DataSource masterDataSource() {\n        HikariDataSource dataSource = masterDataSourceProperties()\n                .initializeDataSourceBuilder()\n                .type(HikariDataSource.class)\n                .build();\n        dataSource.setPoolName(\"masterDataSource\");\n        return dataSource;\n    }\n}"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/util/EncryptionService.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.util;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;", "import javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.spec.KeySpec;\nimport java.util.Base64;\n\n@Slf4j\n@Service\npublic class EncryptionService {\n\n    public String encrypt(String strToEncrypt, String secret, String salt) {", "public class EncryptionService {\n\n    public String encrypt(String strToEncrypt, String secret, String salt) {\n        try {\n            byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            IvParameterSpec ivspec = new IvParameterSpec(iv);\n\n            SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n            KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), 65536, 256);\n            SecretKey tmp = factory.generateSecret(spec);\n            SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), \"AES\");\n\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);\n            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\")));\n        } catch (Exception e) {\n            log.error(\"Error while encrypting: \", e);\n            return null;\n        }\n    }\n\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/controller/TenantAdminController.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.controller;\n\nimport com.github.wenqiglantz.service.tenantadmin.domain.entity.IsolationType;\nimport com.github.wenqiglantz.service.tenantadmin.service.TenantAdminService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;", "import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(\"/\")\npublic class TenantAdminController {\n\n    @Autowired\n    private TenantAdminService tenantAdminService;\n\n    @PostMapping(\"/tenants\")\n    public ResponseEntity<Void> createTenant(@RequestParam String tenantId,\n                                             @RequestParam IsolationType isolationType,\n                                             @RequestParam String dbOrSchema,\n                                             @RequestParam String userName,\n                                             @RequestParam String password) {\n        tenantAdminService.createTenant(tenantId, isolationType, dbOrSchema, userName, password);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/service/TenantAdminService.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.service;\n\nimport com.github.wenqiglantz.service.tenantadmin.domain.entity.IsolationType;\nimport com.github.wenqiglantz.service.tenantadmin.util.EncryptionService;\nimport com.github.wenqiglantz.service.tenantadmin.domain.entity.Tenant;\nimport com.github.wenqiglantz.service.tenantadmin.repository.TenantRepository;\nimport liquibase.exception.LiquibaseException;\nimport liquibase.integration.spring.SpringLiquibase;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.StatementCallback;", "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.StatementCallback;\nimport org.springframework.jdbc.datasource.SingleConnectionDataSource;\nimport org.springframework.stereotype.Service;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n", "import java.sql.SQLException;\n\n@Slf4j\n@Service\n@EnableConfigurationProperties(LiquibaseProperties.class)\npublic class TenantAdminService {\n\n    private static final String VALID_DB_SCHEMA_NAME_REGEXP = \"[A-Za-z0-9_]*\";\n    private final EncryptionService encryptionService;\n    private final DataSource dataSource;\n    private final JdbcTemplate jdbcTemplate;\n    private final LiquibaseProperties tenantLiquibaseProperties;\n    private final LiquibaseProperties liquibaseProperties;\n    private final ResourceLoader resourceLoader;\n    private final TenantRepository tenantRepository;\n    private final String databaseName;\n    private final String urlPrefix;\n    private final String liquibaseChangeLog;\n    private final String liquibaseContexts;\n    private final String secret;\n    private final String salt;\n\n    @Autowired\n    public TenantAdminService(EncryptionService encryptionService,\n                              DataSource dataSource,\n                              JdbcTemplate jdbcTemplate,\n                              @Qualifier(\"masterLiquibaseProperties\")\n                                       LiquibaseProperties liquibaseProperties,\n                              @Qualifier(\"tenantLiquibaseProperties\")\n                                       LiquibaseProperties tenantLiquibaseProperties,\n                              ResourceLoader resourceLoader,\n                              TenantRepository tenantRepository,\n                              @Value(\"${databaseName:}\") String databaseName,\n                              @Value(\"${multitenancy.tenant.datasource.url-prefix}\") String urlPrefix,\n                              @Value(\"${multitenancy.tenant.liquibase.changeLog}\") String liquibaseChangeLog,\n                              @Value(\"${multitenancy.tenant.liquibase.contexts:#{null}\") String liquibaseContexts,\n                              @Value(\"${encryption.secret}\") String secret,\n                              @Value(\"${encryption.salt}\") String salt\n    ) {\n        this.encryptionService = encryptionService;\n        this.dataSource = dataSource;\n        this.jdbcTemplate = jdbcTemplate;\n        this.liquibaseProperties = liquibaseProperties;\n        this.tenantLiquibaseProperties = tenantLiquibaseProperties;\n        this.resourceLoader = resourceLoader;\n        this.tenantRepository = tenantRepository;\n        this.databaseName = databaseName;\n        this.urlPrefix = urlPrefix;\n        this.liquibaseChangeLog = liquibaseChangeLog;\n        this.liquibaseContexts = liquibaseContexts;\n        this.secret = secret;\n        this.salt = salt;\n    }\n", "    public void createTenant(String tenantId, IsolationType isolationType, String dbOrSchema, String userName, String password) {\n\n        // Verify db or schema string to prevent SQL injection\n        if (!dbOrSchema.matches(VALID_DB_SCHEMA_NAME_REGEXP)) {\n            throw new TenantCreationException(\"Invalid database or schema name: \" + dbOrSchema);\n        }\n\n        String url = null;\n        String encryptedPassword = encryptionService.encrypt(password, secret, salt);\n\n        switch (isolationType) {\n            case DATABASE:\n                url = urlPrefix + dbOrSchema;", "                try {\n                    createDatabase(dbOrSchema, password);\n                } catch (DataAccessException e) {\n                    throw new TenantCreationException(\"Error when creating db: \" + dbOrSchema, e);\n                }\n                try (Connection connection = DriverManager.getConnection(url, dbOrSchema, password)) {\n                    DataSource tenantDataSource = new SingleConnectionDataSource(connection, false);\n                    runLiquibase(tenantDataSource);\n                } catch (SQLException | LiquibaseException e) {\n                    throw new TenantCreationException(\"Error when populating db: \", e);\n                }\n                break;\n\n            case SCHEMA:\n                url = urlPrefix + databaseName + \"?currentSchema=\" + dbOrSchema;", "                try {\n                    createSchema(dbOrSchema, password);\n                    runLiquibase(dataSource, dbOrSchema);\n                } catch (DataAccessException e) {\n                    throw new TenantCreationException(\"Error when creating schema: \" + dbOrSchema, e);\n                } catch (LiquibaseException e) {\n                    throw new TenantCreationException(\"Error when populating schema: \", e);\n                }\n                break;\n\n            case DISCRIMINATOR:\n                url = urlPrefix + databaseName;", "                try {\n                    runLiquibase(dataSource);\n                } catch (DataAccessException e) {\n                    throw new TenantCreationException(\"Error when creating schema: \" + dbOrSchema, e);\n                } catch (LiquibaseException e) {\n                    throw new TenantCreationException(\"Error when populating schema: \", e);\n                }\n                break;\n        }\n\n        Tenant tenant = Tenant.builder()\n                .tenantId(tenantId)\n                .isolationType(isolationType)\n                .dbOrSchema(dbOrSchema)\n                .url(url)\n                .username(userName)\n                .password(encryptedPassword)\n                .build();\n        tenantRepository.save(tenant);\n    }\n\n    private void createDatabase(String db, String password) {\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"CREATE DATABASE \" + db));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"CREATE USER \" + db + \" WITH ENCRYPTED PASSWORD '\" + password + \"'\"));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"GRANT ALL PRIVILEGES ON DATABASE \" + db + \" TO \" + db));\n    }\n\n    private void runLiquibase(DataSource dataSource) throws LiquibaseException {\n        SpringLiquibase liquibase = getSpringLiquibase(dataSource);\n        liquibase.afterPropertiesSet();\n    }\n\n    private void createSchema(String schema, String password) {\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"CREATE USER \" + schema+ \" WITH ENCRYPTED PASSWORD '\" + password + \"'\"));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"GRANT CONNECT ON DATABASE \" + databaseName + \" TO \" + schema));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"CREATE SCHEMA \" + schema + \" AUTHORIZATION \" + schema));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"ALTER DEFAULT PRIVILEGES IN SCHEMA \" + schema + \" GRANT ALL PRIVILEGES ON TABLES TO \" + schema));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"ALTER DEFAULT PRIVILEGES IN SCHEMA \" + schema + \" GRANT USAGE ON SEQUENCES TO \" + schema));\n        jdbcTemplate.execute((StatementCallback<Boolean>) stmt -> stmt.execute(\"ALTER DEFAULT PRIVILEGES IN SCHEMA \" + schema + \" GRANT EXECUTE ON FUNCTIONS TO \" + schema));\n    }\n\n    private void runLiquibase(DataSource dataSource, String schema) throws LiquibaseException {\n        SpringLiquibase liquibase = getSpringLiquibase(dataSource, schema);\n        liquibase.afterPropertiesSet();\n    }\n\n    protected SpringLiquibase getSpringLiquibase(DataSource dataSource) {\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setResourceLoader(resourceLoader);\n        liquibase.setDataSource(dataSource);\n        liquibase.setChangeLog(tenantLiquibaseProperties.getChangeLog());\n        liquibase.setContexts(tenantLiquibaseProperties.getContexts());\n        liquibase.setDefaultSchema(tenantLiquibaseProperties.getDefaultSchema());\n        liquibase.setLiquibaseSchema(tenantLiquibaseProperties.getLiquibaseSchema());\n        liquibase.setLiquibaseTablespace(tenantLiquibaseProperties.getLiquibaseTablespace());\n        liquibase.setDatabaseChangeLogTable(tenantLiquibaseProperties.getDatabaseChangeLogTable());\n        liquibase.setDatabaseChangeLogLockTable(tenantLiquibaseProperties.getDatabaseChangeLogLockTable());\n        liquibase.setDropFirst(tenantLiquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(tenantLiquibaseProperties.isEnabled());\n        liquibase.setLabels(tenantLiquibaseProperties.getLabels());\n        liquibase.setChangeLogParameters(tenantLiquibaseProperties.getParameters());\n        liquibase.setRollbackFile(tenantLiquibaseProperties.getRollbackFile());\n        liquibase.setTestRollbackOnUpdate(tenantLiquibaseProperties.isTestRollbackOnUpdate());\n        return liquibase;\n    }\n\n    protected SpringLiquibase getSpringLiquibase(DataSource dataSource, String schema) {\n        SpringLiquibase liquibase = new SpringLiquibase();\n        liquibase.setResourceLoader(resourceLoader);\n        liquibase.setDataSource(dataSource);\n        liquibase.setDefaultSchema(schema);\n        liquibase.setChangeLog(liquibaseChangeLog);\n        liquibase.setContexts(liquibaseContexts);\n        liquibase.setDropFirst(liquibaseProperties.isDropFirst());\n        liquibase.setShouldRun(liquibaseProperties.isEnabled());\n        return liquibase;\n    }\n}\n"]}
{"filename": "hybrid-multitenancy-admin-service/src/main/java/com/github/wenqiglantz/service/tenantadmin/service/TenantCreationException.java", "chunked_list": ["package com.github.wenqiglantz.service.tenantadmin.service;\n\npublic class TenantCreationException extends RuntimeException {\n\n    public TenantCreationException(String message) {\n        super(message);\n    }\n\n    public TenantCreationException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public TenantCreationException(Throwable cause) {\n        super(cause);\n    }\n}\n"]}
