{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/SopsNotificationProvider.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin;\n\nimport java.util.function.Function;\n\nimport com.github.daputzy.intellijsopsplugin.handler.EditActionHandler;\nimport com.github.daputzy.intellijsopsplugin.sops.DetectionUtil;\nimport com.intellij.openapi.fileEditor.FileEditor;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.ui.EditorNotificationPanel;", "import com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.ui.EditorNotificationPanel;\nimport com.intellij.ui.EditorNotificationProvider;\nimport javax.swing.*;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class SopsNotificationProvider implements EditorNotificationProvider {\n\n\t@Override\n\tpublic @NotNull Function<? super @NotNull FileEditor, ? extends @Nullable JComponent> collectNotificationData(\n\t\t@NotNull final Project project,\n\t\t@NotNull final VirtualFile file\n\t) {", "\t\tif (!DetectionUtil.getInstance().sopsFileDetected(project, file)) {\n\t\t\treturn __ -> null;\n\t\t}\n\n\t\treturn __ -> {\n\t\t\tfinal EditorNotificationPanel panel = new EditorNotificationPanel();\n\n\t\t\tpanel.setText(\"Sops file detected\");\n\t\t\tpanel.createActionLabel(\"Edit\", new EditActionHandler(project, file)::handle);\n\n\t\t\treturn panel;\n\t\t};\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/SopsFileReadOnlyAction.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin;\n\nimport java.io.IOException;\n\nimport com.github.daputzy.intellijsopsplugin.settings.SettingsState;\nimport com.github.daputzy.intellijsopsplugin.sops.DetectionUtil;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.application.WriteAction;\nimport com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileEditor.FileEditorManagerListener;", "import com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileEditor.FileEditorManagerListener;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport org.jetbrains.annotations.NotNull;\n\npublic class SopsFileReadOnlyAction implements FileEditorManagerListener {\n\n\t@Override\n\tpublic void fileOpened(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n\t\tif (!SettingsState.getInstance().sopsFilesReadOnly) {\n\t\t\treturn;\n\t\t}\n", "\tpublic void fileOpened(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n\t\tif (!SettingsState.getInstance().sopsFilesReadOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (DetectionUtil.getInstance().sopsFileDetected(source.getProject(), file)) {\n\t\t\tApplicationManager.getApplication().invokeAndWait(() -> {\n\t\t\t\ttry {\n\t\t\t\t\tWriteAction.runAndWait(() -> file.setWritable(false));\n\t\t\t\t} catch (final IOException e) {\n\t\t\t\t\tthrow new RuntimeException(\"Could not set file to read only\", e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/SopsEditAction.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin;\n\nimport com.github.daputzy.intellijsopsplugin.handler.EditActionHandler;\nimport com.github.daputzy.intellijsopsplugin.sops.DetectionUtil;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.CommonDataKeys;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport org.jetbrains.annotations.NotNull;", "import com.intellij.openapi.vfs.VirtualFile;\nimport org.jetbrains.annotations.NotNull;\n\npublic class SopsEditAction extends AnAction {\n\n\t@Override\n\tpublic void actionPerformed(@NotNull AnActionEvent e) {\n\t\tfinal Project project = e.getProject();\n\t\tfinal VirtualFile file = e.getData(CommonDataKeys.VIRTUAL_FILE);\n\n\t\tif (project == null || file == null) {\n\t\t\tthrow new IllegalStateException();\n\t\t}\n\n\t\tfinal EditActionHandler actionHandler = new EditActionHandler(project, file);\n\t\tactionHandler.handle();\n\t}\n\n\t@Override", "\t\tif (project == null || file == null) {\n\t\t\tthrow new IllegalStateException();\n\t\t}\n\n\t\tfinal EditActionHandler actionHandler = new EditActionHandler(project, file);\n\t\tactionHandler.handle();\n\t}\n\n\t@Override\n\tpublic void update(@NotNull AnActionEvent e) {\n\t\te.getPresentation().setEnabled(false);\n\n\t\tfinal Project project = e.getProject();\n\t\tfinal VirtualFile file = e.getData(CommonDataKeys.VIRTUAL_FILE);\n", "\tpublic void update(@NotNull AnActionEvent e) {\n\t\te.getPresentation().setEnabled(false);\n\n\t\tfinal Project project = e.getProject();\n\t\tfinal VirtualFile file = e.getData(CommonDataKeys.VIRTUAL_FILE);\n\n\t\tif (project == null || file == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (DetectionUtil.getInstance().sopsFileDetected(project, file)) {\n\t\t\te.getPresentation().setEnabled(true);\n\t\t}\n\t}\n}\n", "\t\tif (DetectionUtil.getInstance().sopsFileDetected(project, file)) {\n\t\t\te.getPresentation().setEnabled(true);\n\t\t}\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/settings/SettingsConfigurable.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.settings;\n\nimport java.util.Objects;\n\nimport com.intellij.openapi.options.Configurable;\nimport javax.swing.*;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.Nullable;\n\npublic class SettingsConfigurable implements Configurable {\n\n\tprivate SettingsComponent settingsComponent;\n\n\t@Override\n\t@Nls(capitalization = Nls.Capitalization.Title)", "\npublic class SettingsConfigurable implements Configurable {\n\n\tprivate SettingsComponent settingsComponent;\n\n\t@Override\n\t@Nls(capitalization = Nls.Capitalization.Title)\n\tpublic String getDisplayName() {\n\t\treturn \"Simple Sops Settings\";\n\t}\n\n\t@Override\n\tpublic @Nullable JComponent getPreferredFocusedComponent() {\n\t\treturn settingsComponent.getPreferredFocusedComponent();\n\t}\n\n\t@Override\n\tpublic @Nullable JComponent createComponent() {\n\t\tsettingsComponent = new SettingsComponent();\n\n\t\treturn settingsComponent.getPanel();\n\t}\n\n\t@Override", "\tpublic boolean isModified() {\n\t\tfinal SettingsState settings = SettingsState.getInstance();\n\n\t\treturn !Objects.equals(settings.sopsEnvironment, settingsComponent.getSopsEnvironment()) ||\n\t\t\t!Objects.equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());\n\t}\n\n\t@Override\n\tpublic void apply() {\n\t\tfinal SettingsState settings = SettingsState.getInstance();\n\n\t\tsettings.sopsEnvironment = settingsComponent.getSopsEnvironment();\n\t\tsettings.sopsExecutable = settingsComponent.getSopsExecutable();\n\t\tsettings.sopsFilesReadOnly = settingsComponent.getSopsFilesReadOnly();\n\t}\n\n\t@Override", "\tpublic void apply() {\n\t\tfinal SettingsState settings = SettingsState.getInstance();\n\n\t\tsettings.sopsEnvironment = settingsComponent.getSopsEnvironment();\n\t\tsettings.sopsExecutable = settingsComponent.getSopsExecutable();\n\t\tsettings.sopsFilesReadOnly = settingsComponent.getSopsFilesReadOnly();\n\t}\n\n\t@Override\n\tpublic void reset() {\n\t\tfinal SettingsState settings = SettingsState.getInstance();\n\n\t\tsettingsComponent.setSopsEnvironment(settings.sopsEnvironment);\n\t\tsettingsComponent.setSopsExecutable(settings.sopsExecutable);\n\t\tsettingsComponent.setSopsFilesReadOnly(settings.sopsFilesReadOnly);\n\t}\n\n\t@Override", "\tpublic void reset() {\n\t\tfinal SettingsState settings = SettingsState.getInstance();\n\n\t\tsettingsComponent.setSopsEnvironment(settings.sopsEnvironment);\n\t\tsettingsComponent.setSopsExecutable(settings.sopsExecutable);\n\t\tsettingsComponent.setSopsFilesReadOnly(settings.sopsFilesReadOnly);\n\t}\n\n\t@Override\n\tpublic void disposeUIResources() {\n\t\tsettingsComponent = null;\n\t}\n}\n", "\tpublic void disposeUIResources() {\n\t\tsettingsComponent = null;\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/settings/SettingsState.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.settings;\n\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.util.xmlb.XmlSerializerUtil;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n", "import org.jetbrains.annotations.Nullable;\n\n@State(\n\tname = \"com.github.daputzy.intellijsopsplugin.settings.SettingsState\",\n\tstorages = @Storage(\"SopsSettingsPlugin.xml\")\n)\npublic class SettingsState implements PersistentStateComponent<SettingsState> {\n\n\tpublic String sopsExecutable = \"sops\";\n\tpublic boolean sopsFilesReadOnly = false;\n\tpublic String sopsEnvironment = \"\";\n", "\tpublic String sopsExecutable = \"sops\";\n\tpublic boolean sopsFilesReadOnly = false;\n\tpublic String sopsEnvironment = \"\";\n\n\tpublic static SettingsState getInstance() {\n\t\treturn ApplicationManager.getApplication().getService(SettingsState.class);\n\t}\n\n\t@Override\n\tpublic @Nullable SettingsState getState() {\n\t\treturn this;\n\t}\n\n\t@Override", "\tpublic void loadState(@NotNull SettingsState state) {\n\t\tXmlSerializerUtil.copyBean(state, this);\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/settings/SettingsComponent.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.settings;\n\nimport com.intellij.icons.AllIcons;\nimport com.intellij.ui.components.JBCheckBox;\nimport com.intellij.ui.components.JBTextField;\nimport com.intellij.util.ui.FormBuilder;\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class SettingsComponent {\n\n\tprivate final JPanel main;\n\tprivate final JBTextField sopsEnvironmentTextField = new JBTextField();\n\tprivate final JBTextField sopsExecutableTextField = new JBTextField();\n\tprivate final JBCheckBox sopsFilesReadOnlyCheckBox = new JBCheckBox();\n\n\tpublic SettingsComponent() {\n\t\tfinal JLabel environmentHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\tenvironmentHint.setToolTipText(\"<html><h2>Here you can set custom environment variables</h2><h3>Make sure you do NOT escape the values</h3><h4>Example:</h4><pre>SOPS_AGE_KEY_FILE=/Users/bockwurst/Documents/sops/age/keys.txt VAULT_ADDR=http://127.0.0.1:8200 VAULT_TOKEN=toor</pre></html>\");\n\n\t\tfinal JPanel environmentLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\tenvironmentLabel.add(new JLabel(\"Sops environment\"));\n\t\tenvironmentLabel.add(environmentHint);\n\n\t\tfinal JLabel executableHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\texecutableHint.setToolTipText(\"<html><h2>Here you can set a custom executable path</h2><h4>Default:</h4><pre>sops</pre><h4>Example:</h4><pre>/Users/bockwurst/bin/sops-wrapper.sh</pre></html>\");\n\n\t\tfinal JPanel executableLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\texecutableLabel.add(new JLabel(\"Sops executable\"));\n\t\texecutableLabel.add(executableHint);\n\n\t\tfinal JLabel readonlyHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\treadonlyHint.setToolTipText(\"<html><h2>Here you can specify if encrypted sops files should be read only</h2><h3>i.e. you can only edit them via the plugin</h3><h4>Default:</h4><pre>false</pre></html>\");\n\n\t\tfinal JPanel readonlyLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\treadonlyLabel.add(new JLabel(\"Sops files read only?\"));\n\t\treadonlyLabel.add(readonlyHint);\n\n\t\tmain = FormBuilder.createFormBuilder()\n\t\t\t.addLabeledComponent(environmentLabel, sopsEnvironmentTextField, 1, false)\n\t\t\t.addLabeledComponent(executableLabel, sopsExecutableTextField, 2, false)\n\t\t\t.addLabeledComponent(readonlyLabel, sopsFilesReadOnlyCheckBox, 3, false)\n\t\t\t.addComponentFillVertically(new JPanel(), 0)\n\t\t\t.getPanel();\n\t}\n", "\npublic class SettingsComponent {\n\n\tprivate final JPanel main;\n\tprivate final JBTextField sopsEnvironmentTextField = new JBTextField();\n\tprivate final JBTextField sopsExecutableTextField = new JBTextField();\n\tprivate final JBCheckBox sopsFilesReadOnlyCheckBox = new JBCheckBox();\n\n\tpublic SettingsComponent() {\n\t\tfinal JLabel environmentHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\tenvironmentHint.setToolTipText(\"<html><h2>Here you can set custom environment variables</h2><h3>Make sure you do NOT escape the values</h3><h4>Example:</h4><pre>SOPS_AGE_KEY_FILE=/Users/bockwurst/Documents/sops/age/keys.txt VAULT_ADDR=http://127.0.0.1:8200 VAULT_TOKEN=toor</pre></html>\");\n\n\t\tfinal JPanel environmentLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\tenvironmentLabel.add(new JLabel(\"Sops environment\"));\n\t\tenvironmentLabel.add(environmentHint);\n\n\t\tfinal JLabel executableHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\texecutableHint.setToolTipText(\"<html><h2>Here you can set a custom executable path</h2><h4>Default:</h4><pre>sops</pre><h4>Example:</h4><pre>/Users/bockwurst/bin/sops-wrapper.sh</pre></html>\");\n\n\t\tfinal JPanel executableLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\texecutableLabel.add(new JLabel(\"Sops executable\"));\n\t\texecutableLabel.add(executableHint);\n\n\t\tfinal JLabel readonlyHint = new JLabel(AllIcons.Actions.IntentionBulbGrey);\n\t\treadonlyHint.setToolTipText(\"<html><h2>Here you can specify if encrypted sops files should be read only</h2><h3>i.e. you can only edit them via the plugin</h3><h4>Default:</h4><pre>false</pre></html>\");\n\n\t\tfinal JPanel readonlyLabel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n\t\treadonlyLabel.add(new JLabel(\"Sops files read only?\"));\n\t\treadonlyLabel.add(readonlyHint);\n\n\t\tmain = FormBuilder.createFormBuilder()\n\t\t\t.addLabeledComponent(environmentLabel, sopsEnvironmentTextField, 1, false)\n\t\t\t.addLabeledComponent(executableLabel, sopsExecutableTextField, 2, false)\n\t\t\t.addLabeledComponent(readonlyLabel, sopsFilesReadOnlyCheckBox, 3, false)\n\t\t\t.addComponentFillVertically(new JPanel(), 0)\n\t\t\t.getPanel();\n\t}\n", "\tpublic JPanel getPanel() {\n\t\treturn main;\n\t}\n\n\tpublic JComponent getPreferredFocusedComponent() {\n\t\treturn sopsEnvironmentTextField;\n\t}\n\n\tpublic String getSopsEnvironment() {\n\t\treturn sopsEnvironmentTextField.getText();\n\t}\n", "\tpublic String getSopsEnvironment() {\n\t\treturn sopsEnvironmentTextField.getText();\n\t}\n\n\tpublic void setSopsEnvironment(final String newText) {\n\t\tsopsEnvironmentTextField.setText(newText);\n\t}\n\n\tpublic String getSopsExecutable() {\n\t\treturn sopsExecutableTextField.getText();\n\t}\n", "\tpublic String getSopsExecutable() {\n\t\treturn sopsExecutableTextField.getText();\n\t}\n\n\tpublic void setSopsExecutable(final String newText) {\n\t\tsopsExecutableTextField.setText(newText);\n\t}\n\n\tpublic boolean getSopsFilesReadOnly() {\n\t\treturn sopsFilesReadOnlyCheckBox.isSelected();\n\t}\n", "\tpublic boolean getSopsFilesReadOnly() {\n\t\treturn sopsFilesReadOnlyCheckBox.isSelected();\n\t}\n\n\tpublic void setSopsFilesReadOnly(final boolean selected) {\n\t\tsopsFilesReadOnlyCheckBox.setSelected(selected);\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/handler/EditActionHandler.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.handler;\n\nimport com.github.daputzy.intellijsopsplugin.file.FileUtil;\nimport com.github.daputzy.intellijsopsplugin.sops.ExecutionUtil;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileEditor.FileEditorManagerListener;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.testFramework.LightVirtualFile;", "import com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.testFramework.LightVirtualFile;\nimport com.intellij.util.messages.MessageBusConnection;\nimport lombok.RequiredArgsConstructor;\nimport org.jetbrains.annotations.NotNull;\n\n@RequiredArgsConstructor\npublic class EditActionHandler {\n\n\t@NotNull\n\tprivate final Project project;\n\n\t@NotNull\n\tprivate final VirtualFile file;\n", "\tpublic void handle() {\n\t\tfinal String originalContent = FileUtil.getInstance().getContent(file);\n\n\t\tExecutionUtil.getInstance().decrypt(project, file, decryptedContent -> {\n\t\t\tfinal VirtualFile inMemoryFile = new LightVirtualFile(\n\t\t\t\tfile.getName(),\n\t\t\t\tFileUtil.getInstance().getFileType(file),\n\t\t\t\tdecryptedContent\n\t\t\t);\n\n\t\t\tApplicationManager.getApplication()\n\t\t\t\t.invokeLater(() -> FileEditorManager.getInstance(project).openFile(inMemoryFile, true));\n\n\t\t\tfinal MessageBusConnection connection = project.getMessageBus().connect();\n\t\t\tconnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, new FileEditorManagerListener() {\n\t\t\t\t@Override", "\t\t\t\tpublic void fileClosed(@NotNull FileEditorManager source, @NotNull VirtualFile closedFile) {\n\t\t\t\t\tif (inMemoryFile.equals(closedFile)) {\n\t\t\t\t\t\t// check if it is our file first, other files may not have a document\n\t\t\t\t\t\tfinal String closedFileContent = FileUtil.getInstance().getDocument(closedFile).getText();\n\n\t\t\t\t\t\tif (!closedFileContent.equals(decryptedContent)) {\n\t\t\t\t\t\t\tFileUtil.getInstance().writeContentBlocking(file, closedFileContent);\n\n\t\t\t\t\t\t\tExecutionUtil.getInstance().encrypt(\n\t\t\t\t\t\t\t\tproject,\n\t\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\t// success\n\t\t\t\t\t\t\t\t() -> file.refresh(true, false),\n\t\t\t\t\t\t\t\t// failure\n\t\t\t\t\t\t\t\t() -> FileUtil.getInstance().writeContentBlocking(file, originalContent)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconnection.disconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/sops/ConfigUtil.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.sops;\n\nimport java.util.stream.Stream;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.project.ProjectUtil;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;", "import lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.NotNull;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class ConfigUtil {\n\n\t@Getter(lazy = true)\n\tprivate static final ConfigUtil instance = new ConfigUtil();\n\n\tprivate static final String SOPS_CONFIG_FILE = \".sops.yaml\";\n", "\tpublic boolean sopsConfigExists(@NotNull final Project project, @NotNull final VirtualFile file) {\n\t\tfinal VirtualFile projectDir = ProjectUtil.guessProjectDir(project);\n\n\t\tif (projectDir != null) {\n\t\t\tVirtualFile current = file;\n\n\t\t\tdo {\n\t\t\t\tcurrent = current.getParent();\n\n\t\t\t\tif (current == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n", "\t\t\t\tif (current == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (Stream.of(current.getChildren()).map(VirtualFile::getName).anyMatch(SOPS_CONFIG_FILE::equals)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} while (!projectDir.equals(current));\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/sops/DetectionUtil.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.sops;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport com.github.daputzy.intellijsopsplugin.file.FileUtil;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport lombok.AccessLevel;\nimport lombok.Getter;", "import lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.NotNull;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class DetectionUtil {\n\n\t@Getter(lazy = true)\n\tprivate static final DetectionUtil instance = new DetectionUtil();\n\n\t// TODO: were all these keywords available in older versions of sops?", "\tpublic static final List<String> SOPS_KEYWORDS = List.of(\n\t\t\"sops\",\n\t\t\"lastmodified\",\n\t\t\"version\"\n\t);\n\n\tpublic boolean sopsFileDetected(@NotNull final Project project, @NotNull final VirtualFile file) {\n\t\treturn Optional.of(file)\n\t\t\t// check if there is a sops config file\n\t\t\t.filter(__ -> ConfigUtil.getInstance().sopsConfigExists(project, file))\n\t\t\t// get content of file\n\t\t\t.map(FileUtil.getInstance()::getContent)\n\t\t\t// check if all keywords exist in content\n\t\t\t.filter(content -> SOPS_KEYWORDS.stream().allMatch(content::contains))\n\t\t\t.isPresent();\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/sops/ExecutionUtil.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.sops;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport com.github.daputzy.intellijsopsplugin.settings.SettingsState;", "\nimport com.github.daputzy.intellijsopsplugin.settings.SettingsState;\nimport com.intellij.execution.ExecutionException;\nimport com.intellij.execution.configurations.GeneralCommandLine;\nimport com.intellij.execution.process.OSProcessHandler;\nimport com.intellij.execution.process.ProcessAdapter;\nimport com.intellij.execution.process.ProcessEvent;\nimport com.intellij.execution.process.ProcessListener;\nimport com.intellij.execution.process.ProcessOutputType;\nimport com.intellij.notification.NotificationGroupManager;", "import com.intellij.execution.process.ProcessOutputType;\nimport com.intellij.notification.NotificationGroupManager;\nimport com.intellij.notification.NotificationType;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Key;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.util.EnvironmentUtil;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;", "import lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.NotNull;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class ExecutionUtil {\n\n\t@Getter(lazy = true)\n\tprivate static final ExecutionUtil instance = new ExecutionUtil();\n\n\tprivate static final String DEPRECATION_WARNING = \"Deprecation Warning\";\n", "\tpublic void decrypt(final Project project, VirtualFile file, final Consumer<String> successHandler) {\n\t\tfinal GeneralCommandLine command = buildCommand(file.getParent().getPath());\n\n\t\tcommand.addParameter(\"-d\");\n\t\tcommand.addParameter(file.getName());\n\n\t\tfinal StringBuffer stdout = new StringBuffer();\n\t\tfinal StringBuffer stderr = new StringBuffer();\n\n\t\trun(command, new ProcessAdapter() {\n\t\t\t@Override", "\t\t\tpublic void processTerminated(@NotNull ProcessEvent event) {\n\t\t\t\tnotifyOnError(project, stderr);\n\n\t\t\t\tif (event.getExitCode() != 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsuccessHandler.accept(stdout.toString());\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onTextAvailable(@NotNull ProcessEvent event, @NotNull Key outputType) {\n\t\t\t\tif (ProcessOutputType.isStderr(outputType) && event.getText() != null) {\n\t\t\t\t\tstderr.append(event.getText());\n\t\t\t\t}\n\n\t\t\t\tif (ProcessOutputType.isStdout(outputType) && event.getText() != null) {\n\t\t\t\t\tstdout.append(event.getText());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n", "\tpublic void encrypt(final Project project, VirtualFile file, final Runnable successHandler, final Runnable failureHandler) {\n\t\tfinal GeneralCommandLine command = buildCommand(file.getParent().getPath());\n\n\t\tcommand.addParameter(\"-e\");\n\t\tcommand.addParameter(\"-i\");\n\t\tcommand.addParameter(file.getName());\n\n\t\tfinal StringBuffer stderr = new StringBuffer();\n\n\t\trun(command, new ProcessAdapter() {\n\t\t\t@Override", "\t\t\tpublic void processTerminated(@NotNull ProcessEvent event) {\n\t\t\t\tnotifyOnError(project, stderr);\n\n\t\t\t\tif (event.getExitCode() != 0) {\n\t\t\t\t\tfailureHandler.run();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsuccessHandler.run();\n\t\t\t}\n\n\t\t\t@Override", "\t\t\tpublic void onTextAvailable(@NotNull ProcessEvent event, @NotNull Key outputType) {\n\t\t\t\tif (\n\t\t\t\t\tProcessOutputType.isStderr(outputType) &&\n\t\t\t\t\tevent.getText() != null &&\n\t\t\t\t\t!event.getText().contains(DEPRECATION_WARNING)\n\t\t\t\t) {\n\t\t\t\t\tstderr.append(event.getText());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void notifyOnError(final Project project, final StringBuffer stderr) {\n\t\tfinal String error = stderr.toString();\n", "\t\tif (!error.isBlank()) {\n\t\t\tNotificationGroupManager.getInstance()\n\t\t\t\t.getNotificationGroup(\"com.github.daputzy.intellijsopsplugin\")\n\t\t\t\t.createNotification(\"Sops error\", error, NotificationType.ERROR)\n\t\t\t\t.notify(project);\n\t\t}\n\t}\n\n\tprivate void run(final GeneralCommandLine command, final ProcessListener listener) {\n\t\tfinal OSProcessHandler processHandler;\n\t\ttry {\n\t\t\tprocessHandler = new OSProcessHandler(command);\n\t\t} catch (final ExecutionException e) {\n\t\t\tthrow new RuntimeException(\"Could not execute sops command\", e);\n\t\t}\n\n\t\tprocessHandler.addProcessListener(listener);\n\t\tprocessHandler.startNotify();\n\t}\n\n\tprivate GeneralCommandLine buildCommand(final String cwd) {\n\t\tfinal GeneralCommandLine command = new GeneralCommandLine(SettingsState.getInstance().sopsExecutable)\n\t\t\t.withParentEnvironmentType(GeneralCommandLine.ParentEnvironmentType.CONSOLE)\n\t\t\t.withCharset(StandardCharsets.UTF_8)\n\t\t\t.withWorkDirectory(cwd);\n\n\t\tfinal String[] environmentString = SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");\n\n\t\tfinal List<String> environmentList = Arrays.stream(environmentString)\n\t\t\t.map(String::trim)\n\t\t\t.filter(Predicate.not(String::isBlank))\n\t\t\t.collect(Collectors.toList());\n\n\t\tcommand.withEnvironment(\n\t\t\tEnvironmentUtil.parseEnv(environmentList.toArray(String[]::new))\n\t\t);\n\n\t\treturn command;\n\t}\n}\n", "\t\ttry {\n\t\t\tprocessHandler = new OSProcessHandler(command);\n\t\t} catch (final ExecutionException e) {\n\t\t\tthrow new RuntimeException(\"Could not execute sops command\", e);\n\t\t}\n\n\t\tprocessHandler.addProcessListener(listener);\n\t\tprocessHandler.startNotify();\n\t}\n\n\tprivate GeneralCommandLine buildCommand(final String cwd) {\n\t\tfinal GeneralCommandLine command = new GeneralCommandLine(SettingsState.getInstance().sopsExecutable)\n\t\t\t.withParentEnvironmentType(GeneralCommandLine.ParentEnvironmentType.CONSOLE)\n\t\t\t.withCharset(StandardCharsets.UTF_8)\n\t\t\t.withWorkDirectory(cwd);\n\n\t\tfinal String[] environmentString = SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");\n\n\t\tfinal List<String> environmentList = Arrays.stream(environmentString)\n\t\t\t.map(String::trim)\n\t\t\t.filter(Predicate.not(String::isBlank))\n\t\t\t.collect(Collectors.toList());\n\n\t\tcommand.withEnvironment(\n\t\t\tEnvironmentUtil.parseEnv(environmentList.toArray(String[]::new))\n\t\t);\n\n\t\treturn command;\n\t}\n}\n"]}
{"filename": "src/main/java/com/github/daputzy/intellijsopsplugin/file/FileUtil.java", "chunked_list": ["package com.github.daputzy.intellijsopsplugin.file;\n\nimport java.io.IOException;\n\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.application.ReadAction;\nimport com.intellij.openapi.application.WriteAction;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.fileEditor.FileDocumentManager;\nimport com.intellij.openapi.fileEditor.impl.LoadTextUtil;", "import com.intellij.openapi.fileEditor.FileDocumentManager;\nimport com.intellij.openapi.fileEditor.impl.LoadTextUtil;\nimport com.intellij.openapi.fileTypes.FileType;\nimport com.intellij.openapi.fileTypes.FileTypeRegistry;\nimport com.intellij.openapi.fileTypes.PlainTextFileType;\nimport com.intellij.openapi.fileTypes.UnknownFileType;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.util.ThrowableRunnable;\nimport lombok.AccessLevel;\nimport lombok.Getter;", "import lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.jetbrains.annotations.NotNull;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class FileUtil {\n\n\t@Getter(lazy = true)\n\tprivate static final FileUtil instance = new FileUtil();\n\n\tpublic @NotNull Document getDocument(final VirtualFile file) {\n\t\tfinal Document document = ReadAction.compute(() -> FileDocumentManager.getInstance().getDocument(file));\n", "\t\tif (document == null) {\n\t\t\tthrow new RuntimeException(\"Could not get document for file\");\n\t\t}\n\n\t\treturn document;\n\t}\n\n\tpublic @NotNull String getContent(final VirtualFile file) {\n\t\treturn ReadAction.compute(() -> LoadTextUtil.loadText(file).toString());\n\t}\n", "\tpublic void writeContentBlocking(final VirtualFile file, final String content) {\n\t\tfinal ThrowableRunnable<IOException> runnable = () -> file.setBinaryContent(content.getBytes(file.getCharset()));\n\n\t\tApplicationManager.getApplication().invokeAndWait(() -> {\n\t\t\ttry {\n\t\t\t\tWriteAction.runAndWait(runnable);\n\t\t\t} catch (final IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Could not write content to file\", e);\n\t\t\t}\n\t\t});\n\t}\n", "\tpublic FileType getFileType(final VirtualFile file) {\n\t\tfinal FileType fileType = FileTypeRegistry.getInstance().getFileTypeByFileName(file.getName());\n\n\t\tif (fileType instanceof UnknownFileType) {\n\t\t\treturn PlainTextFileType.INSTANCE;\n\t\t}\n\n\t\treturn fileType;\n\t}\n}\n"]}
