{"filename": "src/test/java/icu/aicq/ai/open/ai/api/utils/CountTokenUtilsTest.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport icu.aicq.ai.open.ai.api.pojo.dto.OpenAIUsageDTO;\nimport icu.aicq.ai.open.ai.api.pojo.req.ChatCompletionRequest;\nimport icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;", "\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CountTokenUtilsTest {\n\n    @Test\n    void countTokensByRequestAndResponse() {\n        String request = \"{\\\"messages\\\":[{\\\"content\\\":\\\"\u8bf7\u5e2e\u6211\u89e3\u91ca\u4e00\u4e0b\u4ec0\u4e48\u662f java \u7684\u53cd\u5c04\\\",\\\"role\\\":\\\"user\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo\\\",\\\"stream\\\":true}\";\n        String response = \"{\\\"choices\\\":[{\\\"delta\\\":{},\\\"finish_reason\\\":\\\"stop\\\",\\\"index\\\":0,\\\"message\\\":{\\\"content\\\":\\\"Java\u7684\u53cd\u5c04\u662f\u6307\u5728\u8fd0\u884c\u65f6\uff08runtime\uff09\u52a8\u6001\u5730\u83b7\u53d6Java\u5bf9\u8c61\u7684\u4fe1\u606f\u548c\u64cd\u4f5cJava\u5bf9\u8c61\u7684\u80fd\u529b\u3002\u53cd\u5c04\u673a\u5236\u5141\u8bb8\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u52a0\u8f7d\u3001\u68c0\u67e5\u3001\u521b\u5efa\u548c\u64cd\u4f5c\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5c31\u786e\u5b9a\u7c7b\u578b\u3002\u4f7f\u7528\u53cd\u5c04\u673a\u5236\u53ef\u4ee5\u52a8\u6001\u5730\u521b\u5efa\u5bf9\u8c61\u5e76\u53d6\u5f97\u6210\u5458\u53d8\u91cf\u548c\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u83b7\u53d6\u7c7b\u7684\u4fe1\u606f\u3001\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u8c03\u6574\u5bf9\u8c61\u7684\u8d28\u6027\u3002\\\\n\\\\n\u5728Java\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2ajava.lang. Class\u7c7b\u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u83b7\u53d6\u5404\u79cd\u4fe1\u606f\uff0c\u5982\u7c7b\u7684\u540d\u5b57\u3001\u65b9\u6cd5\u3001\u6784\u9020\u5668\u3001\u6210\u5458\u53d8\u91cf\u7b49\u3002\u4f7f\u7528\u53cd\u5c04\u673a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u64cd\u4f5c\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u521b\u5efa\u548c\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5c31\u786e\u5b9a\u7c7b\u578b\u3002\u53cd\u5c04\u673a\u5236\u4f7f\u5f97Java\u7a0b\u5e8f\u66f4\u52a0\u7075\u6d3b\uff0c\u4f46\u662f\u5b83\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u6027\u80fd\u548c\u53ef\u8bfb\u6027\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u9009\u62e9\u3002\\\",\\\"role\\\":\\\"assistant\\\"}}],\\\"created\\\":1681179728,\\\"id\\\":\\\"chatcmpl-73xw00xR3liOFiDIn5vvmV5GfD052\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0301\\\",\\\"object\\\":\\\"chat.completion.chunk\\\",\\\"usage\\\":{\\\"completionTokens\\\":17,\\\"promptTokens\\\":17,\\\"totalTokens\\\":34}}\";\n", "        String response = \"{\\\"choices\\\":[{\\\"delta\\\":{},\\\"finish_reason\\\":\\\"stop\\\",\\\"index\\\":0,\\\"message\\\":{\\\"content\\\":\\\"Java\u7684\u53cd\u5c04\u662f\u6307\u5728\u8fd0\u884c\u65f6\uff08runtime\uff09\u52a8\u6001\u5730\u83b7\u53d6Java\u5bf9\u8c61\u7684\u4fe1\u606f\u548c\u64cd\u4f5cJava\u5bf9\u8c61\u7684\u80fd\u529b\u3002\u53cd\u5c04\u673a\u5236\u5141\u8bb8\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u52a0\u8f7d\u3001\u68c0\u67e5\u3001\u521b\u5efa\u548c\u64cd\u4f5c\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5c31\u786e\u5b9a\u7c7b\u578b\u3002\u4f7f\u7528\u53cd\u5c04\u673a\u5236\u53ef\u4ee5\u52a8\u6001\u5730\u521b\u5efa\u5bf9\u8c61\u5e76\u53d6\u5f97\u6210\u5458\u53d8\u91cf\u548c\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u83b7\u53d6\u7c7b\u7684\u4fe1\u606f\u3001\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\u548c\u8c03\u6574\u5bf9\u8c61\u7684\u8d28\u6027\u3002\\\\n\\\\n\u5728Java\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2ajava.lang. Class\u7c7b\u5bf9\u8c61\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6765\u83b7\u53d6\u5404\u79cd\u4fe1\u606f\uff0c\u5982\u7c7b\u7684\u540d\u5b57\u3001\u65b9\u6cd5\u3001\u6784\u9020\u5668\u3001\u6210\u5458\u53d8\u91cf\u7b49\u3002\u4f7f\u7528\u53cd\u5c04\u673a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u64cd\u4f5c\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u521b\u5efa\u548c\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5c31\u786e\u5b9a\u7c7b\u578b\u3002\u53cd\u5c04\u673a\u5236\u4f7f\u5f97Java\u7a0b\u5e8f\u66f4\u52a0\u7075\u6d3b\uff0c\u4f46\u662f\u5b83\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u6027\u80fd\u548c\u53ef\u8bfb\u6027\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u9009\u62e9\u3002\\\",\\\"role\\\":\\\"assistant\\\"}}],\\\"created\\\":1681179728,\\\"id\\\":\\\"chatcmpl-73xw00xR3liOFiDIn5vvmV5GfD052\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0301\\\",\\\"object\\\":\\\"chat.completion.chunk\\\",\\\"usage\\\":{\\\"completionTokens\\\":17,\\\"promptTokens\\\":17,\\\"totalTokens\\\":34}}\";\n\n\n        ChatCompletionRequest chatCompletionRequest = JSONObject.parseObject(request, ChatCompletionRequest.class);\n        ChatCompletionResponse chatCompletionResponse = JSONObject.parseObject(response, ChatCompletionResponse.class);\n\n        OpenAIUsageDTO dto = CountTokenUtils.countTokensByRequestAndResponse(chatCompletionRequest, chatCompletionResponse);\n        System.out.println(\"dto = \" + JSON.toJSONString(dto));\n    }\n}", "    }\n}"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/redis/RedisOps.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.redis;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\npublic interface RedisOps {\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a value\n     *\n     * @param key \u952e\n     * @return value\n     */\n    String getValue(String key);\n\n    void setValue(String key, String value);\n\n    /**\n     * \u8bbe\u7f6e value\n     *\n     * @param key      \u952e\n     * @param value    \u503c\n     * @param expire   \u8fc7\u671f\u65f6\u95f4\n     * @param timeUnit \u65f6\u95f4\u5355\u4f4d\n     */\n    void setValue(String key, String value, int expire, TimeUnit timeUnit);\n\n    /**\n     * \u83b7\u53d6\u8fc7\u671f\u65f6\u95f4\n     *\n     * @param key \u952e\n     * @return \u8fc7\u671f\u65f6\u95f4\n     */\n    Long getExpire(String key);\n\n    /**\n     * \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n     *\n     * @param key      \u952e\n     * @param expire   \u8fc7\u671f\u65f6\u95f4\n     * @param timeUnit \u65f6\u95f4\u5355\u4f4d\n     */\n    void expire(String key, int expire, TimeUnit timeUnit);\n\n    /**\n     * \u83b7\u53d6\u9501\n     *\n     * @param key \u952e\n     * @return lock\n     */\n    Lock getLock(String key);\n}\n", " */\npublic interface RedisOps {\n\n    /**\n     * \u83b7\u53d6\u4e00\u4e2a value\n     *\n     * @param key \u952e\n     * @return value\n     */\n    String getValue(String key);\n\n    void setValue(String key, String value);\n\n    /**\n     * \u8bbe\u7f6e value\n     *\n     * @param key      \u952e\n     * @param value    \u503c\n     * @param expire   \u8fc7\u671f\u65f6\u95f4\n     * @param timeUnit \u65f6\u95f4\u5355\u4f4d\n     */\n    void setValue(String key, String value, int expire, TimeUnit timeUnit);\n\n    /**\n     * \u83b7\u53d6\u8fc7\u671f\u65f6\u95f4\n     *\n     * @param key \u952e\n     * @return \u8fc7\u671f\u65f6\u95f4\n     */\n    Long getExpire(String key);\n\n    /**\n     * \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n     *\n     * @param key      \u952e\n     * @param expire   \u8fc7\u671f\u65f6\u95f4\n     * @param timeUnit \u65f6\u95f4\u5355\u4f4d\n     */\n    void expire(String key, int expire, TimeUnit timeUnit);\n\n    /**\n     * \u83b7\u53d6\u9501\n     *\n     * @param key \u952e\n     * @return lock\n     */\n    Lock getLock(String key);\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/redis/RedissonRedisOps.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.redis;\n\nimport lombok.RequiredArgsConstructor;\nimport org.redisson.api.RedissonClient;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\n\n/**\n * @author zhiqi", "/**\n * @author zhiqi\n * @date 2023-03-19\n */\n@RequiredArgsConstructor\npublic class RedissonRedisOps implements RedisOps {\n\n    private final RedissonClient redissonClient;\n\n    @Override\n    public String getValue(String key) {\n        Object value = redissonClient.getBucket(key).get();\n        return value == null ? null : value.toString();\n    }\n\n    @Override", "    public String getValue(String key) {\n        Object value = redissonClient.getBucket(key).get();\n        return value == null ? null : value.toString();\n    }\n\n    @Override\n    public void setValue(String key, String value) {\n        redissonClient.getBucket(key).set(value);\n    }\n\n    @Override", "    public void setValue(String key, String value, int expire, TimeUnit timeUnit) {\n        if (expire <= 0) {\n            setValue(key, value);\n        } else {\n            redissonClient.getBucket(key).set(value, expire, timeUnit);\n        }\n    }\n\n    @Override\n    public Long getExpire(String key) {\n        return redissonClient.getBucket(key).remainTimeToLive();\n    }\n\n    @Override", "    public Long getExpire(String key) {\n        return redissonClient.getBucket(key).remainTimeToLive();\n    }\n\n    @Override\n    public void expire(String key, int expire, TimeUnit timeUnit) {\n        redissonClient.getBucket(key).expire(expire, timeUnit);\n    }\n\n    @Override\n    public Lock getLock(String key) {\n        return redissonClient.getLock(key);\n    }\n}\n", "    public Lock getLock(String key) {\n        return redissonClient.getLock(key);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/utils/HandleOpenAIStreamResponseUtils.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\nimport icu.aicq.ai.open.ai.api.common.OpenAIConstant;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Optional;", "\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\n/**\n * @author zhiqi\n * @date 2023-03-24\n */\n@Slf4j\npublic class HandleOpenAIStreamResponseUtils {\n\n", "@Slf4j\npublic class HandleOpenAIStreamResponseUtils {\n\n\n    public static void streamLine2CleanContent(String line, Consumer<String> cleanContent) {\n        if (StringUtils.isNotBlank(line)) {\n            String content = onlyContent(line);\n            if (StringUtils.isNotEmpty(content)) {\n                cleanContent.accept(content);\n            }\n        }\n    }\n", "    public static String onlyContent(String line) {\n        if (StringUtils.isNotBlank(line)) {\n            if (line.startsWith(OpenAIConstant.STREAM_DATA_STARTS_STR_PREFIX)) {\n                line = line.replace(OpenAIConstant.STREAM_DATA_STARTS_STR_PREFIX, \"\");\n            }\n            if (StringUtils.isBlank(line)) {\n                return null;\n            }\n            if (!JSON.isValid(line)) {\n                return null;\n            }", "            if (!JSON.isValid(line)) {\n                return null;\n            }\n            try {\n                JSONObject jsonObject = JSON.parseObject(line);\n                JSONArray choices = EasyJsonUtils.getJSONArrayByRoute(jsonObject, \"choices\");\n                StringBuffer stringBuffer = new StringBuffer();\n                Optional.ofNullable(choices).ifPresent(arr -> {\n                    for (int i = 0; i < choices.size(); i++) {\n                        JSONObject item = arr.getJSONObject(i);\n                        Optional.ofNullable(item).flatMap(obj -> Optional.ofNullable(EasyJsonUtils.getStringByRoute(obj, \"delta.content\"))).ifPresent(stringBuffer::append);\n                    }\n                });\n                return stringBuffer.length() > 0 ? stringBuffer.toString() : null;\n            } catch (Exception e) {\n                log.error(\"json format error: {}\", line);\n            }\n        }\n        return null;\n    }\n}\n", "                    for (int i = 0; i < choices.size(); i++) {\n                        JSONObject item = arr.getJSONObject(i);\n                        Optional.ofNullable(item).flatMap(obj -> Optional.ofNullable(EasyJsonUtils.getStringByRoute(obj, \"delta.content\"))).ifPresent(stringBuffer::append);\n                    }\n                });\n                return stringBuffer.length() > 0 ? stringBuffer.toString() : null;\n            } catch (Exception e) {\n                log.error(\"json format error: {}\", line);\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/utils/ChatStreamResultResolver.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport icu.aicq.ai.open.ai.api.common.OpenAIConstant;\nimport icu.aicq.ai.open.ai.api.common.OpenAIRoleEnum;\nimport icu.aicq.ai.open.ai.api.pojo.dto.MessageDTO;\nimport icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;", "import lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\n", "\n\n/**\n * openAI stream \u7ed3\u679c\u89e3\u6790\u5668\n *\n * @author zhiqi\n * @date 2023-03-28\n */\n@Slf4j\npublic class ChatStreamResultResolver {\n\n", "@Slf4j\npublic class ChatStreamResultResolver {\n\n\n    public static ChatCompletionResponse convertStreamData2ChatCompletionResponse(@NonNull Collection<String> msgList) {\n        ChatCompletionResponse response = null;\n        // \u6d88\u606f\u7684\u5185\u5bb9\n        StringBuilder content = new StringBuilder();\n        MessageDTO assistantMsg = MessageDTO.builder().role(OpenAIRoleEnum.ASSISTANT.getCode()).content(\"\").build();\n        ChatCompletionResponse.Choice assistantChoice = null;\n        for (String line : msgList) {\n            HandleOpenAIStreamResponseUtils.streamLine2CleanContent(line, content::append);\n        }\n", "        for (String line : msgList) {\n            HandleOpenAIStreamResponseUtils.streamLine2CleanContent(line, content::append);\n        }\n\n        for (String line : msgList) {\n            if (line.startsWith(OpenAIConstant.STREAM_DATA_STARTS_STR_PREFIX)) {\n                line = line.replace(OpenAIConstant.STREAM_DATA_STARTS_STR_PREFIX, \"\");\n            }\n            if (StringUtils.isBlank(line)) {\n                continue;\n            }", "            if (StringUtils.isBlank(line)) {\n                continue;\n            }\n            if (!JSON.isValid(line)) {\n                continue;\n            }\n            try {\n                JSONObject jsonObject = JSON.parseObject(line);\n                ChatCompletionResponse source = jsonObject.toJavaObject(ChatCompletionResponse.class);\n                if (Objects.isNull(response)) {\n                    response = source;", "                if (Objects.isNull(response)) {\n                    response = source;\n                    if (Objects.isNull(response.getChoices())) {\n                        ArrayList<ChatCompletionResponse.Choice> choiceList = new ArrayList<>();\n                        assistantChoice = ChatCompletionResponse.Choice.builder().message(assistantMsg).build();\n                        choiceList.add(assistantChoice);\n                        response.setChoices(choiceList);\n                    } else {\n                        assistantChoice = response.getChoices().get(0);\n                        assistantChoice.setMessage(assistantMsg);\n                    }\n                } else {\n                    List<ChatCompletionResponse.Choice> choices = source.getChoices();", "                    if (Objects.nonNull(choices) && Objects.nonNull(assistantChoice)) {\n                        for (ChatCompletionResponse.Choice choice : choices) {\n                            assistantChoice.setFinishReason(choice.getFinishReason());\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.error(\"json format error: {}\", line);\n            }\n        }\n        if (Objects.nonNull(assistantChoice) && Objects.nonNull(assistantMsg)) {\n            assistantMsg.setContent(content.toString());\n        }\n        return response;\n    }\n}\n", "        if (Objects.nonNull(assistantChoice) && Objects.nonNull(assistantMsg)) {\n            assistantMsg.setContent(content.toString());\n        }\n        return response;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/utils/EasyJsonUtils.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/**\n * @author zhiqi\n * @date 2022-05-20\n */\npublic class EasyJsonUtils {\n\n    /**\n     * \u8def\u7531\u5206\u9694\u7b26\n     */", "    public final static String ROUTE_DELIMITER = \".\";\n\n    public static JSONObject getJSONObjectByRoute(JSONObject jsonObject, String route) {\n        LinkedList<String> queue = getQueueByRoute(route);\n        return recursionFetchJSONObject(jsonObject, queue);\n    }\n\n    public static String getStringByRoute(JSONObject jsonObject, String route) {\n        LinkedList<String> queue = getQueueByRoute(route);\n        return recursionFetchString(jsonObject, queue);\n    }\n", "    public static JSONArray getJSONArrayByRoute(JSONObject jsonObject, String route) {\n        LinkedList<String> queue = getQueueByRoute(route);\n        return recursionFetchJSONArray(jsonObject, queue);\n    }\n\n    public static Object getByRoute(JSONObject jsonObject, String route) {\n        LinkedList<String> queue = getQueueByRoute(route);\n        return recursion(jsonObject, queue);\n    }\n\n    private static LinkedList<String> getQueueByRoute(String route) {", "        if (StringUtils.isBlank(route)) {\n            return null;\n        }\n        String[] nodes = route.split(\"\\\\\" + ROUTE_DELIMITER);\n        return new LinkedList<>(Arrays.asList(nodes));\n    }\n\n    public static JSONObject recursionFetchJSONObject(JSONObject jsonObject, LinkedList<String> queue) {\n        if (null == jsonObject) {\n            return null;\n        }", "        if (null == jsonObject) {\n            return null;\n        }\n        if (Objects.isNull(queue) || queue.isEmpty()) {\n            return jsonObject;\n        }\n        if (1 == queue.size()) {\n            return jsonObject.getJSONObject(queue.pop());\n        }\n        return recursionFetchJSONObject(jsonObject.getJSONObject(queue.pop()), queue);\n    }\n\n", "    public static String recursionFetchString(JSONObject jsonObject, LinkedList<String> queue) {\n        if (null == jsonObject) {\n            return null;\n        }\n        if (1 == queue.size()) {\n            return jsonObject.getString(queue.pop());\n        }\n        return recursionFetchString(jsonObject.getJSONObject(queue.pop()), queue);\n    }\n\n    public static JSONArray recursionFetchJSONArray(JSONObject jsonObject, LinkedList<String> queue) {", "    public static JSONArray recursionFetchJSONArray(JSONObject jsonObject, LinkedList<String> queue) {\n        if (null == jsonObject) {\n            return null;\n        }\n        if (1 == queue.size()) {\n            return jsonObject.getJSONArray(queue.pop());\n        }\n        return recursionFetchJSONArray(jsonObject.getJSONObject(queue.pop()), queue);\n    }\n\n    public static Object recursion(JSONObject jsonObject, LinkedList<String> queue) {", "    public static Object recursion(JSONObject jsonObject, LinkedList<String> queue) {\n        if (null == jsonObject) {\n            return null;\n        }\n        if (1 == queue.size()) {\n            return jsonObject.get(queue.pop());\n        }\n        return recursionFetchJSONArray(jsonObject.getJSONObject(queue.pop()), queue);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/utils/CountTokenUtils.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.knuddels.jtokkit.Encodings;\nimport com.knuddels.jtokkit.api.Encoding;\nimport com.knuddels.jtokkit.api.EncodingRegistry;\nimport com.knuddels.jtokkit.api.ModelType;\nimport icu.aicq.ai.open.ai.api.pojo.dto.OpenAIUsageDTO;\nimport icu.aicq.ai.open.ai.api.pojo.req.ChatCompletionRequest;\nimport icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport org.apache.commons.lang3.StringUtils;", "import icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Collections;\nimport java.util.Objects;\nimport java.util.Optional;\n\n/**\n * @author zhiqi\n * @version v1.0 \u7ed3\u5408 jtokkit \u4f5c\u8005\u7684\u56de\u590d, \u4fee\u6b63\u8ba1\u7b97\u7ed3\u679c <a href=\"https://github.com/knuddelsgmbh/jtokkit/issues/5\">Discrepancy in promptTokens count while using jtokkit with OpenAI's GPT-3 API</a>", " * @author zhiqi\n * @version v1.0 \u7ed3\u5408 jtokkit \u4f5c\u8005\u7684\u56de\u590d, \u4fee\u6b63\u8ba1\u7b97\u7ed3\u679c <a href=\"https://github.com/knuddelsgmbh/jtokkit/issues/5\">Discrepancy in promptTokens count while using jtokkit with OpenAI's GPT-3 API</a>\n * @date 2023-04-10\n */\npublic class CountTokenUtils {\n    private final static EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\n\n    /**\n     * \u8ba1\u7b97\n     * ChatCompletionRequest#messages + ChatCompletionResponse#choices#message <br/>\n     * \u4f1a\u6839\u636e\u8bf7\u6c42\u7684 model \u5207\u6362\u8ba1\u7b97\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a gpt-3.5-turbo <br/>\n     * \u5982\u679c\u4f60\u5f53\u524d\u7684\u7ed3\u679c\u4e3a stream \u5efa\u8bae\u4f7f\u7528 {@link ChatStreamResultResolver#convertStreamData2ChatCompletionResponse} \u8fdb\u884c\u8f6c\u6362\n     *\n     * @param request  \u8bf7\u6c42\n     * @param response \u54cd\u5e94\n     * @return \u8ba1\u7b97\u7ed3\u679c\n     * @throws UnsupportedOperationException if the text contains special tokens which are not supported for now\n     */", "    public static OpenAIUsageDTO countTokensByRequestAndResponse(ChatCompletionRequest request, ChatCompletionResponse response) {\n        Encoding secondEnc = registry.getEncodingForModel(ModelType.GPT_3_5_TURBO);\n        int tokensPerMessage = 4; // every message follows <|start|>{role/name}\\n{content}<|end|>\\n\n        int promptTokens = Optional.ofNullable(request)\n                .map(ChatCompletionRequest::getMessages)\n                .orElse(Collections.emptyList())\n                .stream()\n                .mapToInt(message -> {\n                    int count = 0;\n                    count += tokensPerMessage;\n                    // content\n                    count += secondEnc.countTokensOrdinary(message.getContent());\n                    count += secondEnc.countTokensOrdinary(message.getRole());\n                    return count;\n                })\n                .sum();\n\n        int completionTokens = Optional.ofNullable(response)\n                .map(ChatCompletionResponse::getChoices)\n                .orElse(Collections.emptyList())\n                .stream()\n                .filter(choice -> Objects.nonNull(choice.getMessage()) && StringUtils.isNotBlank(choice.getMessage().getContent()))\n                .mapToInt(choice -> secondEnc.countTokensOrdinary(choice.getMessage().getContent()))\n                .sum();\n\n        OpenAIUsageDTO usageDTO = OpenAIUsageDTO.builder().promptTokens(promptTokens).completionTokens(completionTokens).totalTokens(promptTokens + completionTokens).build();\n        // \u5199\u5165\u54cd\u5e94\n        Optional.ofNullable(response).ifPresent(e -> e.setUsage(usageDTO));\n        return usageDTO;\n    }\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/utils/OkHttpClientUtils.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.utils;\n\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport icu.aicq.ai.open.ai.api.exception.AicqException;\nimport icu.aicq.ai.open.ai.api.exception.OpenAINoRouteToHostException;\nimport icu.aicq.ai.open.ai.api.exception.OpenAIResourceException;\nimport icu.aicq.ai.open.ai.api.exception.OpenAIStreamClosedUnexpectedlyException;\nimport icu.aicq.ai.open.ai.api.exception.OpenAIStreamEmptyException;\nimport lombok.NonNull;", "import icu.aicq.ai.open.ai.api.exception.OpenAIStreamEmptyException;\nimport lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;", "import okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport okio.BufferedSource;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.NoRouteToHostException;", "import java.net.InetSocketAddress;\nimport java.net.NoRouteToHostException;\nimport java.net.Proxy;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\n", "import java.util.function.Function;\n\nimport static icu.aicq.ai.open.ai.api.common.OpenAIConstant.STREAM_DATA_STARTS_STR_PREFIX;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\n@Slf4j\npublic class OkHttpClientUtils {\n    private final OkHttpClient client;\n\n    public OkHttpClientUtils() {\n        this.client = new OkHttpClient();\n    }\n\n    public OkHttpClientUtils(OkHttpClient client) {\n        this.client = client;\n    }\n\n    public OkHttpClientUtils(Proxy.Type proxyType, String proxyHost, int proxyPort) {\n        Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n        this.client = new OkHttpClient.Builder()\n                .proxy(proxy)\n                .build();\n    }\n", "@Slf4j\npublic class OkHttpClientUtils {\n    private final OkHttpClient client;\n\n    public OkHttpClientUtils() {\n        this.client = new OkHttpClient();\n    }\n\n    public OkHttpClientUtils(OkHttpClient client) {\n        this.client = client;\n    }\n\n    public OkHttpClientUtils(Proxy.Type proxyType, String proxyHost, int proxyPort) {\n        Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n        this.client = new OkHttpClient.Builder()\n                .proxy(proxy)\n                .build();\n    }\n", "    public OkHttpClient getClient() {\n        return client;\n    }\n\n    public <R> R get(String url, Map<String, String> queryParams, Map<String, String> headerMap, Class<R> clazz) {\n        HttpUrl.Builder urlBuilder = Objects.requireNonNull(HttpUrl.parse(url)).newBuilder();\n        Optional.ofNullable(queryParams).ifPresent(params -> queryParams.forEach(urlBuilder::addQueryParameter));\n        String finalUrl = urlBuilder.build().toString();\n\n        Request.Builder builder = new Request.Builder().url(finalUrl);\n        Optional.ofNullable(headerMap).ifPresent(map -> map.forEach(builder::addHeader));\n        return handlerResponse(builder.build(), clazz);\n    }\n\n    public <R, D> R get(String url, D data, Class<R> clazz) {\n        return get(url, data, null, clazz);\n    }\n\n    public <R, D> R get(String url, D data, Map<String, String> headerMap, Class<R> clazz) {", "        if (Objects.isNull(data)) {\n            return get(url, null, headerMap, clazz);\n        }\n        Map<String, String> queryParams = new HashMap<>(8);\n        JSONObject jsonObject = (JSONObject) JSON.toJSON(data);\n        for (String key : jsonObject.keySet()) {\n            queryParams.put(key, jsonObject.getString(key));\n        }\n        return get(url, queryParams, headerMap, clazz);\n    }\n\n    public <R> R post(String url, RequestBody body, Map<String, String> headerMap, Class<R> clazz) {\n        Request.Builder builder = new Request.Builder().url(url).post(body);\n        Optional.ofNullable(headerMap).ifPresent(map -> map.forEach(builder::addHeader));\n        return handlerResponse(builder.build(), clazz);\n    }\n\n    // todo \u4f18\u5316\u8d85\u65f6\u8bf7\u6c42\n    public <D> void postStream(String url, D body, Map<String, String> headerMap, BiFunction<String, AicqException, Boolean> streamResponse) {\n        RequestBody requestBody = generateRequestBody(body);\n        Request.Builder builder = new Request.Builder().url(url).post(requestBody);\n        Optional.ofNullable(headerMap).ifPresent(map -> map.forEach(builder::addHeader));\n        Request request = builder.build();\n        client.newCall(request).enqueue(new Callback() {\n            @Override", "            public void onFailure(@NonNull Call call, @NonNull IOException e) {\n                streamResponse.apply(null, new OpenAIStreamClosedUnexpectedlyException(e));\n                call.cancel();\n            }\n\n            @Override\n            public void onResponse(@NonNull Call call, @NonNull Response response) {\n                try (ResponseBody responseBody = response.body()) {\n                    successFullCheck(response, request, errorResponse -> {\n                        OpenAIResourceException resourceException = new OpenAIResourceException(errorResponse.code(), errorResponse, \"Unexpected code\");\n                        streamResponse.apply(null, resourceException);\n                        return resourceException;\n                    });", "                    if (Objects.isNull(responseBody)) {\n                        streamResponse.apply(null, new OpenAIStreamEmptyException(\"Response body is null.\"));\n                    }\n                    BufferedSource source = Objects.requireNonNull(responseBody).source();\n                    boolean endFlag = false;\n                    while (!source.exhausted() && !endFlag) {\n                        // \u6309\u884c\u8bfb\u53d6\u6e90\u4e2d\u7684\u6570\u636e\n                        String line = source.readUtf8Line();\n                        log.debug(\"Response line : {}\", line);\n                        if (StringUtils.isNotBlank(line)) {\n                            if (line.startsWith(STREAM_DATA_STARTS_STR_PREFIX)) {\n                                line = line.substring(STREAM_DATA_STARTS_STR_PREFIX.length());\n                            }\n                            endFlag = streamResponse.apply(line, null);\n                        }\n                    }\n                    call.cancel();\n                } catch (IOException e) {\n                    streamResponse.apply(null, new OpenAIStreamClosedUnexpectedlyException());\n                }\n            }\n        });\n    }\n\n    private static <E> void successFullCheck(@NonNull Response response, Request request, Function<Response, RuntimeException> exceptionSupplier) {\n        log.debug(\"HTTP Request: {} {}{}\", request.method(), request.url(), request.body() != null ? \" \" + request.body() : \"\");", "                        if (StringUtils.isNotBlank(line)) {\n                            if (line.startsWith(STREAM_DATA_STARTS_STR_PREFIX)) {\n                                line = line.substring(STREAM_DATA_STARTS_STR_PREFIX.length());\n                            }\n                            endFlag = streamResponse.apply(line, null);\n                        }\n                    }\n                    call.cancel();\n                } catch (IOException e) {\n                    streamResponse.apply(null, new OpenAIStreamClosedUnexpectedlyException());\n                }\n            }\n        });\n    }\n\n    private static <E> void successFullCheck(@NonNull Response response, Request request, Function<Response, RuntimeException> exceptionSupplier) {\n        log.debug(\"HTTP Request: {} {}{}\", request.method(), request.url(), request.body() != null ? \" \" + request.body() : \"\");", "        if (request.headers().size() > 0) {\n            log.debug(\"Request Headers:\");\n            for (String name : request.headers().names()) {\n                log.debug(\"{}: {}\", name, request.headers().get(name));\n            }\n        }\n        if (!response.isSuccessful()) {\n            log.error(\"HTTP Response: Unexpected code {}\", response.code());\n            throw exceptionSupplier.apply(response);\n        }\n    }\n\n    private <R> R handlerResponse(Request request, Class<R> clazz) {\n        try (Response response = client.newCall(request).execute()) {\n            successFullCheck(response, request, errorResponse -> new OpenAIResourceException(errorResponse.code(), errorResponse, \"Unexpected code\"));\n            ResponseBody responseBody = response.body();", "            if (Objects.nonNull(responseBody)) {\n                String jsonString = responseBody.string();\n                log.debug(\"HTTP Response Body: {}\", jsonString);\n                return JSON.parseObject(jsonString, clazz);\n            }\n            return null;\n        } catch (NoRouteToHostException e) {\n            log.error(\"HTTP Request Failed. Please set up the proxy!\", e);\n            throw new OpenAINoRouteToHostException(\"HTTP Request Failed. Please set up the proxy!\", e);\n        } catch (IOException e) {\n            log.error(\"HTTP Request Failed!\", e);\n            throw new OpenAIStreamEmptyException(\"HTTP Request Failed!\", e);\n        }\n    }\n\n    public <R, D> R postJson(String url, D body, Map<String, String> headerMap, Class<R> clazz) {\n        RequestBody requestBody = generateRequestBody(body);\n        return post(url, requestBody, headerMap, clazz);\n    }\n\n    private static <D> RequestBody generateRequestBody(D body) {\n        String requestJson;", "        if (body instanceof String) {\n            requestJson = (String) body;\n        } else {\n            requestJson = JSON.toJSONString(body);\n        }\n        return RequestBody.create(requestJson, MediaType.parse(\"application/json; charset=utf-8\"));\n    }\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/common/OpenAIConstant.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.common;\n\n/**\n * openAI \u76f8\u5173\u5e38\u91cf\n *\n * @author zhiqi\n * @date 2023-03-19\n */\npublic interface OpenAIConstant {\n\n    String DEFAULT_BASE_URL = \"https://api.openai.com\";\n\n    String CHAT_COMPLETIONS_API_PATH = \"/v1/chat/completions\";\n\n    String CHAT_COMPLETIONS_FINISH_FIELD = \"\\\"finish_reason\\\"\";\n\n    String CHAT_COMPLETIONS_UNFINISHED_MARK = \"\\\"finish_reason\\\":null\";\n\n    String STREAM_DATA_STARTS_STR_PREFIX = \"data: \";\n\n    String END_MARK = \"[DONE]\";\n}\n", "public interface OpenAIConstant {\n\n    String DEFAULT_BASE_URL = \"https://api.openai.com\";\n\n    String CHAT_COMPLETIONS_API_PATH = \"/v1/chat/completions\";\n\n    String CHAT_COMPLETIONS_FINISH_FIELD = \"\\\"finish_reason\\\"\";\n\n    String CHAT_COMPLETIONS_UNFINISHED_MARK = \"\\\"finish_reason\\\":null\";\n\n    String STREAM_DATA_STARTS_STR_PREFIX = \"data: \";\n\n    String END_MARK = \"[DONE]\";\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/common/OpenAIRoleEnum.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.common;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * @author zhiqi\n * @date 2023-03-18\n */\n@Getter", " */\n@Getter\n@AllArgsConstructor\npublic enum OpenAIRoleEnum {\n\n    /**\n     * \u7cfb\u7edf\n     */\n    SYSTEM(\"system\"),\n\n    /**\n     * \u7528\u6237\n     */\n    USER(\"user\"),\n\n    /**\n     * \u52a9\u624b\n     */\n    ASSISTANT(\"assistant\");\n\n    private final String code;\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/common/OpenAIFinishReasonEnum.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.common;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * @author zhiqi\n * @date 2023-03-18\n */\n@Getter", " */\n@Getter\n@AllArgsConstructor\npublic enum OpenAIFinishReasonEnum {\n\n    /**\n     * API \u8fd4\u56de\u5b8c\u6574\u7684\u6a21\u578b\u8f93\u51fa\n     */\n    STOP(\"stop\"),\n\n    /**\n     * \u7531\u4e8e\u53c2\u6570\u6216\u4ee4\u724c\u9650\u5236max_tokens\u6a21\u578b\u8f93\u51fa\u4e0d\u5b8c\u6574\n     */\n    LENGTH(\"length\"),\n\n    /**\n     * \u7531\u4e8e\u5185\u5bb9\u8fc7\u6ee4\u5668\u4e2d\u7684\u6807\u5fd7\u800c\u9057\u6f0f\u4e86\u5185\u5bb9\n     */\n    CONTENT_FILTER(\"content_filter\"),\n\n    /**\n     * API \u54cd\u5e94\u4ecd\u5728\u8fdb\u884c\u4e2d\u6216\u4e0d\u5b8c\u6574\n     */\n    NULL(\"null\"),\n    ;\n\n    private final String code;\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/common/OpenAIModelEnum.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.common;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * @author zhiqi\n * @date 2023-03-18\n */\n@Getter", " */\n@Getter\n@AllArgsConstructor\npublic enum OpenAIModelEnum {\n\n    /**\n     * chatGPT\n     */\n    GPT_3_5_TURBO(\"gpt-3.5-turbo\");\n\n    private final String code;\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/config/OpenAIConfigStorage.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.config;\n\nimport icu.aicq.ai.open.ai.api.common.OpenAIConstant;\nimport icu.aicq.ai.open.ai.api.utils.OkHttpClientUtils;\n\n/**\n * openAI \u914d\u7f6e\n *\n * @author zhiqi\n * @date 2023-03-19", " * @author zhiqi\n * @date 2023-03-19\n */\npublic interface OpenAIConfigStorage {\n\n    /**\n     * \u8bbe\u7f6e baseApiUrl\n     *\n     * @param baseApiUrl baseApiUrl\n     * @see OpenAIConstant#DEFAULT_BASE_URL\n     */\n    void setBaseApiUrl(String baseApiUrl);\n\n    /**\n     * \u83b7\u53d6\u5b8c\u6574 url\n     *\n     * @param path \u8def\u5f84\n     * @return \u5b8c\u6574 url\n     */\n    String getApiUrl(String path);\n\n    /**\n     * \u83b7\u53d6 apiKey\n     *\n     * @return apiKey\n     */\n    String getApiKey();\n\n    /**\n     * openAI \u9881\u53d1\u7684 apiKey \u5bf9\u5e94\u7684 id\n     *\n     * @return openAIApiKeyId\n     */\n    String getOpenAIApiKeyId();\n\n    /**\n     * \u83b7\u53d6 okHttpClient\n     *\n     * @return okHttpClient\n     */\n    OkHttpClientUtils getOkHttpClient();\n\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/config/impl/OpenAIRedisConfigStorageImpl.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.config.impl;\n\nimport icu.aicq.ai.open.ai.api.common.OpenAIConstant;\nimport icu.aicq.ai.open.ai.api.config.OpenAIConfigStorage;\nimport icu.aicq.ai.open.ai.api.redis.RedisOps;\nimport icu.aicq.ai.open.ai.api.redis.RedissonRedisOps;\nimport icu.aicq.ai.open.ai.api.utils.OkHttpClientUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.redisson.api.RedissonClient;\n", "import org.redisson.api.RedissonClient;\n\nimport java.io.Serializable;\nimport java.util.Objects;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\npublic class OpenAIRedisConfigStorageImpl implements OpenAIConfigStorage, Serializable {\n\n    private static final long serialVersionUID = 123456789L;\n\n    private final RedisOps redisOps;\n\n    protected static final String OPEN_AI_API_KEY_REDIS_KEY = \"open_ai_api_key:\";\n\n    protected static final String LOCK_REDIS_KEY = \"open_ai_lock:\";\n\n\n    protected volatile String baseApiUrl;\n\n    protected volatile String openAIApiKeyId;\n\n    protected volatile OkHttpClientUtils okHttpClientUtils;\n\n\n    private final String keyPrefix;\n\n    protected volatile String lockRedisKey;\n\n    protected volatile String apiKeyRedisKey;\n\n    /**\n     * \u6784\u9020\u51fd\u6570\n     *\n     * @param redisOps  redisOps\n     * @param keyPrefix redis key \u524d\u7f00\n     */\n    public OpenAIRedisConfigStorageImpl(RedisOps redisOps, String keyPrefix) {\n        this.redisOps = redisOps;\n        this.keyPrefix = keyPrefix;\n    }\n\n    /**\n     * \u6784\u9020\u51fd\u6570\n     *\n     * @param redissonClient redisson \u5ba2\u6237\u7aef\n     * @param keyPrefix      redis key \u524d\u7f00\n     */\n    public OpenAIRedisConfigStorageImpl(RedissonClient redissonClient, String keyPrefix) {\n        this(new RedissonRedisOps(redissonClient), keyPrefix);\n    }\n\n    @Override", " */\npublic class OpenAIRedisConfigStorageImpl implements OpenAIConfigStorage, Serializable {\n\n    private static final long serialVersionUID = 123456789L;\n\n    private final RedisOps redisOps;\n\n    protected static final String OPEN_AI_API_KEY_REDIS_KEY = \"open_ai_api_key:\";\n\n    protected static final String LOCK_REDIS_KEY = \"open_ai_lock:\";\n\n\n    protected volatile String baseApiUrl;\n\n    protected volatile String openAIApiKeyId;\n\n    protected volatile OkHttpClientUtils okHttpClientUtils;\n\n\n    private final String keyPrefix;\n\n    protected volatile String lockRedisKey;\n\n    protected volatile String apiKeyRedisKey;\n\n    /**\n     * \u6784\u9020\u51fd\u6570\n     *\n     * @param redisOps  redisOps\n     * @param keyPrefix redis key \u524d\u7f00\n     */\n    public OpenAIRedisConfigStorageImpl(RedisOps redisOps, String keyPrefix) {\n        this.redisOps = redisOps;\n        this.keyPrefix = keyPrefix;\n    }\n\n    /**\n     * \u6784\u9020\u51fd\u6570\n     *\n     * @param redissonClient redisson \u5ba2\u6237\u7aef\n     * @param keyPrefix      redis key \u524d\u7f00\n     */\n    public OpenAIRedisConfigStorageImpl(RedissonClient redissonClient, String keyPrefix) {\n        this(new RedissonRedisOps(redissonClient), keyPrefix);\n    }\n\n    @Override", "    public void setBaseApiUrl(String baseApiUrl) {\n        this.baseApiUrl = baseApiUrl;\n    }\n\n    @Override\n    public String getApiUrl(String path) {\n        if (StringUtils.isBlank(baseApiUrl)) {\n            baseApiUrl = OpenAIConstant.DEFAULT_BASE_URL;\n        }\n        return baseApiUrl + path;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6b64 Storage \u7684 openAIApiKey\n     *\n     * @param openAIApiKeyId \u552f\u4e00\u6807\u8bc6 (\u81ea\u5efa)\n     * @param openApiKey     openAI \u9881\u53d1\u7684 openApiKey\n     */", "    public void setOpenAIApiKey(String openAIApiKeyId, String openApiKey) {\n        this.openAIApiKeyId = openAIApiKeyId;\n        lockRedisKey = getLockRedisKey();\n        apiKeyRedisKey = getApiKeyRedisKey();\n        redisOps.setValue(apiKeyRedisKey, openApiKey);\n    }\n\n    @Override\n    public String getApiKey() {\n        return redisOps.getValue(getApiKeyRedisKey());\n    }\n", "    public String getApiKey() {\n        return redisOps.getValue(getApiKeyRedisKey());\n    }\n\n    public String getLockRedisKey() {\n        String openAIApiKeyId = getOpenAIApiKeyId();\n        String prefix = StringUtils.isNotBlank(keyPrefix) ?\n                (StringUtils.endsWithIgnoreCase(keyPrefix, \":\") ? keyPrefix : (keyPrefix + \":\")) : \"\";\n        return prefix + LOCK_REDIS_KEY.concat(openAIApiKeyId);\n    }\n", "    public String getApiKeyRedisKey() {\n        String prefix = StringUtils.isNotBlank(keyPrefix) ?\n                (StringUtils.endsWithIgnoreCase(keyPrefix, \":\") ? keyPrefix : (keyPrefix + \":\")) : \"\";\n        return prefix + OPEN_AI_API_KEY_REDIS_KEY.concat(openAIApiKeyId);\n    }\n\n    @Override\n    public String getOpenAIApiKeyId() {\n        return openAIApiKeyId;\n    }\n\n    @Override", "    public OkHttpClientUtils getOkHttpClient() {\n        if (Objects.isNull(okHttpClientUtils)) {\n            okHttpClientUtils = new OkHttpClientUtils();\n            return okHttpClientUtils;\n        }\n        return okHttpClientUtils;\n    }\n\n    public void setOkHttpClient(OkHttpClientUtils okHttpClient) {\n        this.okHttpClientUtils = okHttpClient;\n    }\n}\n", "    public void setOkHttpClient(OkHttpClientUtils okHttpClient) {\n        this.okHttpClientUtils = okHttpClient;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/pojo/req/ChatCompletionRequest.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.pojo.req;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport icu.aicq.ai.open.ai.api.common.OpenAIModelEnum;\nimport icu.aicq.ai.open.ai.api.pojo.dto.MessageDTO;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;", "import lombok.NoArgsConstructor;\nimport lombok.NonNull;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author zhiqi\n * @date 2023-03-18\n */", " * @date 2023-03-18\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class ChatCompletionRequest {\n\n    /**\n     * \u6a21\u578b\n     *\n     * @see OpenAIModelEnum\n     */\n    @NonNull\n    private String model;\n\n    /**\n     * \u6d88\u606f\n     */\n    @NonNull\n    private List<MessageDTO> messages;\n\n    /**\n     * \u91c7\u6837\u6e29\u5ea6\n     * \u8303\u56f4 0-2\n     * \u8f83\u9ad8\u7684\u503c\uff08\u5982 0.8\uff09\u5c06\u4f7f\u8f93\u51fa\u66f4\u52a0\u968f\u673a\n     * \u800c\u8f83\u4f4e\u7684\u503c\uff08\u5982 0.2\uff09\u5c06\u4f7f\u5176\u66f4\u52a0\u96c6\u4e2d\u548c\u786e\u5b9a\n     */\n    private Float temperature;\n\n    /**\n     * \u6838\u5fc3\u91c7\u6837\n     * 0.1 \u610f\u5473\u7740\u53ea\u8003\u8651\u5305\u542b\u524d 10% \u6982\u7387\u8d28\u91cf\u7684 token\n     */\n    @JsonProperty(\"top_p\")\n    private Float topP;\n\n    /**\n     * \u6bcf\u6b21\u804a\u5929\u751f\u6210\u7684\u6761\u6570\n     */\n    private Integer n;\n\n    /**\n     * \u6d41\u5f0f\u4f20\u8f93\n     */\n    private Boolean stream;\n\n    /**\n     * \u6700\u5927\u4ee4\u724c\u6570\n     */\n    @JsonProperty(\"max_tokens\")\n    private Integer maxTokens;\n\n    /**\n     * \u6b63\u53cd\u9988\n     * \u8303\u56f4 [-2, 2]\n     * \u6b63\u503c\u4f1a\u6839\u636e\u65b0\u6807\u8bb0\u5230\u76ee\u524d\u4e3a\u6b62\u662f\u5426\u51fa\u73b0\u5728\u6587\u672c\u4e2d\u6765\u60e9\u7f5a\u5b83\u4eec,\n     * \u4ece\u800c\u589e\u52a0\u6a21\u578b\u8ba8\u8bba\u65b0\u4e3b\u9898\u7684\u53ef\u80fd\u6027\u3002\n     */\n    @JsonProperty(\"presence_penalty\")\n    private Float presencePenalty;\n\n    /**\n     * \u8d1f\u53cd\u9988\n     * \u8303\u56f4 [-2, 2]\n     * \u6b63\u503c\u4f1a\u6839\u636e\u65b0\u6807\u8bb0\u5230\u76ee\u524d\u4e3a\u6b62\u5728\u6587\u672c\u4e2d\u7684\u73b0\u6709\u9891\u7387\u6765\u60e9\u7f5a\u65b0\u6807\u8bb0\n     * \u4ece\u800c\u964d\u4f4e\u6a21\u578b\u9010\u5b57\u91cd\u590d\u540c\u4e00\u884c\u7684\u53ef\u80fd\u6027\u3002\n     */\n    @JsonProperty(\"frequency_penalty\")\n    private Float frequencyPenalty;\n\n    /**\n     * \u5bf9\u6570\u504f\u5dee\n     */\n    @JsonProperty(\"logit_bias\")\n    private Map<String, String> logitBias;\n\n\n    /**\n     * \u6807\u8bb0\u7528\u6237\n     * \u5e2e\u52a9 OpenAI \u76d1\u63a7\u548c\u68c0\u6d4b\u6ee5\u7528\u884c\u4e3a\n     */\n    private String user;\n\n\n    public ChatCompletionRequest(@NonNull String model, @NonNull List<MessageDTO> messages) {\n        this.model = model;\n        this.messages = messages;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/pojo/dto/OpenAIUsageDTO.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.pojo.dto;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author zhiqi", "/**\n * @author zhiqi\n * @date 2023-04-11\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class OpenAIUsageDTO {\n\n    @JsonProperty(\"prompt_tokens\")\n    private Integer promptTokens;\n\n    @JsonProperty(\"completion_tokens\")\n    private Integer completionTokens;\n\n    @JsonProperty(\"total_tokens\")\n    private Integer totalTokens;\n}\n", "public class OpenAIUsageDTO {\n\n    @JsonProperty(\"prompt_tokens\")\n    private Integer promptTokens;\n\n    @JsonProperty(\"completion_tokens\")\n    private Integer completionTokens;\n\n    @JsonProperty(\"total_tokens\")\n    private Integer totalTokens;\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/pojo/dto/MessageDTO.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.pojo.dto;\n\nimport icu.aicq.ai.open.ai.api.common.OpenAIRoleEnum;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n/**\n * @author zhiqi", "/**\n * @author zhiqi\n * @date 2023-03-18\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class MessageDTO {\n\n    /**\n     * \u89d2\u8272\n     *\n     * @see OpenAIRoleEnum\n     */\n    private String role;\n\n    /**\n     * \u5185\u5bb9\n     */\n    private String content;\n\n}\n", "public class MessageDTO {\n\n    /**\n     * \u89d2\u8272\n     *\n     * @see OpenAIRoleEnum\n     */\n    private String role;\n\n    /**\n     * \u5185\u5bb9\n     */\n    private String content;\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/pojo/rsp/ChatCompletionResponse.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.pojo.rsp;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport icu.aicq.ai.open.ai.api.common.OpenAIFinishReasonEnum;\nimport icu.aicq.ai.open.ai.api.common.OpenAIModelEnum;\nimport icu.aicq.ai.open.ai.api.pojo.dto.MessageDTO;\nimport icu.aicq.ai.open.ai.api.pojo.dto.OpenAIUsageDTO;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;", "import lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * @author zhiqi\n * @date 2023-03-18", " * @author zhiqi\n * @date 2023-03-18\n */\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class ChatCompletionResponse {\n\n    private String id;\n\n    /**\n     * \u5bf9\u8c61\n     */\n    private String object;\n\n    /**\n     * \u53d1\u8d77\u65f6\u95f4\n     */\n    private Long created;\n\n    /**\n     * \u6a21\u578b\u7c7b\u578b\n     *\n     * @see OpenAIModelEnum\n     */\n    private String model;\n\n    /**\n     * \u7ed3\u679c\u96c6\n     */\n    private List<Choice> choices;\n\n    /**\n     * \u4f7f\u7528\u91cf\n     */\n    private OpenAIUsageDTO usage;\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    @Builder", "    public static class Choice {\n\n        private Delta delta;\n\n        private Integer index;\n\n        /**\n         * \u6d88\u606f\n         */\n        private MessageDTO message;\n\n        /**\n         * \u54cd\u5e94\u7ec8\u6b62\u7684\u539f\u56e0\n         *\n         * @see OpenAIFinishReasonEnum\n         */\n        @JsonProperty(\"finish_reason\")\n        private String finishReason;\n\n        private String text;\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    @Builder", "    public static class Delta {\n        private String content;\n    }\n\n    public String getOnlyOneAnswer() {\n        if (Objects.nonNull(this.getChoices()) && !this.getChoices().isEmpty()) {\n            return this.getChoices().get(this.getChoices().size() - 1).getMessage().getContent();\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/exception/AicqException.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.exception;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n/**\n * @author zhiqi\n * @date 2023-03-20\n */\n@EqualsAndHashCode(callSuper = true)", " */\n@EqualsAndHashCode(callSuper = true)\n@Data\npublic class AicqException extends RuntimeException {\n    private String message;\n\n    private Throwable throwable;\n\n    public AicqException() {\n\n    }\n\n    public AicqException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public AicqException(String message) {\n        super(message);\n    }\n\n    public AicqException(Throwable throwable) {\n        super(throwable);\n    }\n}"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/exception/OpenAIStreamEmptyException.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.exception;\n\n/**\n * @author zhiqi\n * @date 2023-04-11\n */\npublic class OpenAIStreamEmptyException extends AicqException {\n\n    public OpenAIStreamEmptyException() {\n    }\n\n    public OpenAIStreamEmptyException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public OpenAIStreamEmptyException(String message) {\n        super(message);\n    }\n\n    public OpenAIStreamEmptyException(Throwable throwable) {\n        super(throwable);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/exception/OpenAIResourceException.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.exception;\n\nimport okhttp3.Response;\n\n/**\n * @author zhiqi\n * @date 2023-04-11\n */\npublic class OpenAIResourceException extends AicqException {\n\n    private Integer code;\n\n    private Response response;\n\n    public OpenAIResourceException() {\n    }\n\n    public OpenAIResourceException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public OpenAIResourceException(String message) {\n        super(message);\n    }\n\n    public OpenAIResourceException(Throwable throwable) {\n        super(throwable);\n    }\n\n    public OpenAIResourceException(Integer code, Response response) {\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException(Integer code, Response response, String message, Throwable throwable) {\n        super(message, throwable);\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException(Integer code, Response response, String message) {\n        super(message);\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException( Integer code, Response response, Throwable throwable) {\n        super(throwable);\n        this.code = code;\n        this.response = response;\n    }\n", "public class OpenAIResourceException extends AicqException {\n\n    private Integer code;\n\n    private Response response;\n\n    public OpenAIResourceException() {\n    }\n\n    public OpenAIResourceException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public OpenAIResourceException(String message) {\n        super(message);\n    }\n\n    public OpenAIResourceException(Throwable throwable) {\n        super(throwable);\n    }\n\n    public OpenAIResourceException(Integer code, Response response) {\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException(Integer code, Response response, String message, Throwable throwable) {\n        super(message, throwable);\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException(Integer code, Response response, String message) {\n        super(message);\n        this.code = code;\n        this.response = response;\n    }\n\n    public OpenAIResourceException( Integer code, Response response, Throwable throwable) {\n        super(throwable);\n        this.code = code;\n        this.response = response;\n    }\n", "    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public Response getResponse() {\n        return response;\n    }\n", "    public Response getResponse() {\n        return response;\n    }\n\n    public void setResponse(Response response) {\n        this.response = response;\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/exception/OpenAINoRouteToHostException.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.exception;\n\n/**\n * @author zhiqi\n * @date 2023-04-11\n */\npublic class OpenAINoRouteToHostException extends AicqException {\n\n    public OpenAINoRouteToHostException() {\n    }\n\n    public OpenAINoRouteToHostException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public OpenAINoRouteToHostException(String message) {\n        super(message);\n    }\n\n    public OpenAINoRouteToHostException(Throwable throwable) {\n        super(throwable);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/exception/OpenAIStreamClosedUnexpectedlyException.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.exception;\n\n/**\n * @author zhiqi\n * @date 2023-04-11\n */\npublic class OpenAIStreamClosedUnexpectedlyException extends AicqException {\n\n    public OpenAIStreamClosedUnexpectedlyException() {\n    }\n\n    public OpenAIStreamClosedUnexpectedlyException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n    public OpenAIStreamClosedUnexpectedlyException(String message) {\n        super(message);\n    }\n\n    public OpenAIStreamClosedUnexpectedlyException(Throwable throwable) {\n        super(throwable);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/service/OpenAIService.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.service;\n\nimport icu.aicq.ai.open.ai.api.config.OpenAIConfigStorage;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\npublic interface OpenAIService {\n\n    OpenAIConfigStorage getOpenAIConfigStorage();\n\n    String getOpenAIApiKey();\n\n}\n", "public interface OpenAIService {\n\n    OpenAIConfigStorage getOpenAIConfigStorage();\n\n    String getOpenAIApiKey();\n\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/service/ChatCompletionsService.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.service;\n\nimport icu.aicq.ai.open.ai.api.exception.AicqException;\nimport icu.aicq.ai.open.ai.api.pojo.req.ChatCompletionRequest;\nimport icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport reactor.core.publisher.Flux;\n\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;", "import java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\npublic interface ChatCompletionsService {\n\n    /**\n     * \u804a\u5929\u57fa\u4e8e GPT 3.5\n     *\n     * @param request \u8bf7\u6c42\n     * @return ChatCompletionResponse\n     */\n    ChatCompletionResponse chatCompletions(ChatCompletionRequest request);\n\n    /**\n     * \u804a\u5929\u57fa\u4e8e GPT 3.5 stream\n     *\n     * @param request        \u8bf7\u6c42\n     * @param streamResponse \u51fd\u6570, \u5904\u7406\u6bcf\u4e00\u6761\u7684\u54cd\u5e94, \u5982\u679c streamResponse return true \u5219\u4f1a\u7ec8\u6b62\u76d1\u542c\n     */\n    void chatCompletionsStream(ChatCompletionRequest request, BiFunction<String, AicqException, Boolean> streamResponse);\n\n    /**\n     * \u5904\u7406 stream \u54cd\u5e94\u5230 SSE \u7684\u54cd\u5e94\n     *\n     * @param request \u8bf7\u6c42\n     * @return Flux<String>\n     */\n    default Flux<String> handleStream2SSEResponse(ChatCompletionRequest request) {\n        return handleStream2SSEResponse(request, true, ((list, aicqException) -> {}));\n    }\n\n    /**\n     * \u5904\u7406 stream \u54cd\u5e94\u5230 SSE \u7684\u54cd\u5e94\n     *\n     * @param request                       \u8bf7\u6c42\n     * @param pretreatmentDataToOnlyContent \u662f\u5426\u9884\u5904\u7406 openAI \u54cd\u5e94\u7684\u6570\u636e\n     *                                      true \u4ec5\u8fd4\u56de\u6587\u672c\n     *                                      false \u8fd4\u56de openAI \u539f\u59cb\n     * @return Flux<String>\n     */\n    default Flux<String> handleStream2SSEResponse(ChatCompletionRequest request, boolean pretreatmentDataToOnlyContent) {\n        return handleStream2SSEResponse(request, pretreatmentDataToOnlyContent, ((list, aicqException) -> {}));\n    }\n\n    /**\n     * \u5904\u7406 stream \u54cd\u5e94\u5230 SSE \u7684\u54cd\u5e94\n     *\n     * @param request     \u8bf7\u6c42\n     * @param finalResult \u6700\u7ec8\u7ec4\u88c5\u597d\u7684\u7ed3\u679c\n     *                    \u6bcf\u4e2a line \u6570\u636e CopyOnWriteArrayList<String>\n     *                    \u54cd\u5e94\u4e2d\u53d1\u751f\u7684\u5f02\u5e38 AicqHttpException\n     * @return Flux<String>\n     */\n    default Flux<String> handleStream2SSEResponse(ChatCompletionRequest request, BiConsumer<CopyOnWriteArrayList<String>, AicqException> finalResult) {\n        return handleStream2SSEResponse(request, true, finalResult);\n    }\n\n    /**\n     * \u5904\u7406 stream \u54cd\u5e94\u5230 SSE \u7684\u54cd\u5e94\n     *\n     * @param request                       \u8bf7\u6c42\n     * @param finalResult                   \u6700\u7ec8\u7ec4\u88c5\u597d\u7684\u7ed3\u679c\n     *                                      \u6bcf\u4e2a line \u6570\u636e CopyOnWriteArrayList<String>\n     *                                      \u54cd\u5e94\u4e2d\u53d1\u751f\u7684\u5f02\u5e38 AicqHttpException\n     * @param pretreatmentDataToOnlyContent \u662f\u5426\u9884\u5904\u7406 openAI \u54cd\u5e94\u7684\u6570\u636e\n     *                                      true \u4ec5\u8fd4\u56de\u6587\u672c\n     *                                      false \u8fd4\u56de openAI \u539f\u59cb\n     * @return Flux<String>\n     */\n    Flux<String> handleStream2SSEResponse(ChatCompletionRequest request, boolean pretreatmentDataToOnlyContent, BiConsumer<CopyOnWriteArrayList<String>, AicqException> finalResult);\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/service/impl/OpenAIServiceImpl.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.service.impl;\n\nimport icu.aicq.ai.open.ai.api.config.OpenAIConfigStorage;\nimport icu.aicq.ai.open.ai.api.service.ChatCompletionsService;\nimport icu.aicq.ai.open.ai.api.service.OpenAIService;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\npublic class OpenAIServiceImpl implements OpenAIService {\n", " * @date 2023-03-19\n */\npublic class OpenAIServiceImpl implements OpenAIService {\n\n    public OpenAIConfigStorage openAIConfigStorage;\n\n    public OpenAIServiceImpl(OpenAIConfigStorage openAIConfigStorage) {\n        this.openAIConfigStorage = openAIConfigStorage;\n    }\n\n    @Override", "    public OpenAIConfigStorage getOpenAIConfigStorage() {\n        return openAIConfigStorage;\n    }\n\n    @Override\n    public String getOpenAIApiKey() {\n        return openAIConfigStorage.getApiKey();\n    }\n\n    public ChatCompletionsServiceImpl getChatCompletionsService() {\n        return new ChatCompletionsServiceImpl(this.openAIConfigStorage);\n    }\n}\n", "    public ChatCompletionsServiceImpl getChatCompletionsService() {\n        return new ChatCompletionsServiceImpl(this.openAIConfigStorage);\n    }\n}\n"]}
{"filename": "src/main/java/icu/aicq/ai/open/ai/api/service/impl/ChatCompletionsServiceImpl.java", "chunked_list": ["package icu.aicq.ai.open.ai.api.service.impl;\n\nimport icu.aicq.ai.open.ai.api.common.OpenAIConstant;\nimport icu.aicq.ai.open.ai.api.config.OpenAIConfigStorage;\nimport icu.aicq.ai.open.ai.api.exception.AicqException;\nimport icu.aicq.ai.open.ai.api.exception.OpenAIStreamClosedUnexpectedlyException;\nimport icu.aicq.ai.open.ai.api.pojo.req.ChatCompletionRequest;\nimport icu.aicq.ai.open.ai.api.pojo.rsp.ChatCompletionResponse;\nimport icu.aicq.ai.open.ai.api.service.ChatCompletionsService;\nimport icu.aicq.ai.open.ai.api.utils.HandleOpenAIStreamResponseUtils;", "import icu.aicq.ai.open.ai.api.service.ChatCompletionsService;\nimport icu.aicq.ai.open.ai.api.utils.HandleOpenAIStreamResponseUtils;\nimport icu.aicq.ai.open.ai.api.utils.OkHttpClientUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport reactor.core.publisher.Flux;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.CopyOnWriteArrayList;", "import java.util.Objects;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\n\n/**\n * @author zhiqi\n * @date 2023-03-19\n */\n@Slf4j\npublic class ChatCompletionsServiceImpl extends OpenAIServiceImpl implements ChatCompletionsService {\n    @Override", " */\n@Slf4j\npublic class ChatCompletionsServiceImpl extends OpenAIServiceImpl implements ChatCompletionsService {\n    @Override\n    public ChatCompletionResponse chatCompletions(ChatCompletionRequest chatCompletionRequest) {\n        OkHttpClientUtils okHttpClient = this.getOpenAIConfigStorage().getOkHttpClient();\n\n        Map<String, String> headerMap = new HashMap<>(8);\n        headerMap.put(\"Authorization\", \"Bearer \" + openAIConfigStorage.getApiKey());\n        return okHttpClient.postJson(this.openAIConfigStorage.getApiUrl(OpenAIConstant.CHAT_COMPLETIONS_API_PATH), chatCompletionRequest, headerMap, ChatCompletionResponse.class);\n    }\n\n\n    @Override", "    public void chatCompletionsStream(ChatCompletionRequest request, BiFunction<String, AicqException, Boolean> streamResponse) {\n        OkHttpClientUtils okHttpClientUtils = this.getOpenAIConfigStorage().getOkHttpClient();\n\n        Map<String, String> headerMap = new HashMap<>(8);\n        headerMap.put(\"Authorization\", \"Bearer \" + openAIConfigStorage.getApiKey());\n        request.setStream(true);\n\n        okHttpClientUtils.postStream(this.openAIConfigStorage.getApiUrl(OpenAIConstant.CHAT_COMPLETIONS_API_PATH), request, headerMap, streamResponse);\n    }\n\n    public ChatCompletionsServiceImpl(OpenAIConfigStorage openAIConfigStorage) {\n        super(openAIConfigStorage);\n    }\n\n    @Override\n    public Flux<String> handleStream2SSEResponse(ChatCompletionRequest request, boolean pretreatmentDataToOnlyContent, BiConsumer<CopyOnWriteArrayList<String>, AicqException> finalResult) {\n        // \u8bbe\u7f6e stream \u4f20\u8f93\n        request.setStream(true);\n\n        // \u8bb0\u5f55\u6bcf\u6b21\u4e00\u54cd\u5e94\n        CopyOnWriteArrayList<String> lineList = new CopyOnWriteArrayList<>();\n        return Flux.create(emitter -> {\n            chatCompletionsStream(request, (line, aicqHttpException) -> {\n                log.trace(\"\" +\n                        \"--------------------------------\\n\" +\n                        \"request = {}\\n\" +\n                        \"line = {}\\n\" +\n                        \"aicqHttpException = {}\\n\" +\n                        \"--------------------------------\", request, line, aicqHttpException);", "                try {\n                    // \u54cd\u5e94\u53d1\u751f\u5f02\u5e38\n                    if (Objects.nonNull(aicqHttpException)) {\n                        emitter.error(aicqHttpException);\n                        finalResult.accept(lineList, aicqHttpException);\n                        return true;\n                    }\n                    // \u5982\u679c openAI \u6ca1\u6709\u4e3b\u52a8\u7ec8\u6b62\u54cd\u5e94, \u6301\u7eed\u8fdb\u884c\u76d1\u542c\n                    // If OpenAI does not terminate the response actively, keep listening continuously.\n                    if (line.contains(OpenAIConstant.END_MARK)) {\n                        if (!pretreatmentDataToOnlyContent) {\n                            emitter.next(line);\n                        }\n                        emitter.complete();\n                        finalResult.accept(lineList, null);\n                        return true;\n                    } else {\n                        lineList.add(line);", "                    if (line.contains(OpenAIConstant.END_MARK)) {\n                        if (!pretreatmentDataToOnlyContent) {\n                            emitter.next(line);\n                        }\n                        emitter.complete();\n                        finalResult.accept(lineList, null);\n                        return true;\n                    } else {\n                        lineList.add(line);\n                        if (pretreatmentDataToOnlyContent) {\n                            HandleOpenAIStreamResponseUtils.streamLine2CleanContent(line, emitter::next);\n                        } else {\n                            emitter.next(line);\n                        }\n                        return false;\n                    }\n                } catch (Exception e) {\n                    emitter.error(e);\n                    emitter.complete();\n                    finalResult.accept(lineList, new OpenAIStreamClosedUnexpectedlyException(e.getMessage(), e));\n                    return true;\n                }\n            });\n        });\n    }\n}\n", "                        if (pretreatmentDataToOnlyContent) {\n                            HandleOpenAIStreamResponseUtils.streamLine2CleanContent(line, emitter::next);\n                        } else {\n                            emitter.next(line);\n                        }\n                        return false;\n                    }\n                } catch (Exception e) {\n                    emitter.error(e);\n                    emitter.complete();\n                    finalResult.accept(lineList, new OpenAIStreamClosedUnexpectedlyException(e.getMessage(), e));\n                    return true;\n                }\n            });\n        });\n    }\n}\n"]}
