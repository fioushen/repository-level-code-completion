{"filename": "src/test/java/testrunner/TestRunner.java", "chunked_list": ["package testrunner;\n\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        // Rerun failed tests from rerun.txt file", "@CucumberOptions(\n        // Rerun failed tests from rerun.txt file\n        features = {\"src/test/resources/features/\"},\n        glue = {\"stepdefinitions\", \"hooks\"},\n        plugin = {\"pretty\",\n                \"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:\",\n                \"rerun:target/rerun.txt\"  // Save Failed test scenarios in rerun.txt file\n        }\n)\n\npublic class TestRunner {\n}\n", ")\n\npublic class TestRunner {\n}\n"]}
{"filename": "src/test/java/testrunner/ReRunner.java", "chunked_list": ["package testrunner;\n\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        // Rerun failed tests from rerun.txt file\n        features = {\"@target/rerun.txt\"},", "        // Rerun failed tests from rerun.txt file\n        features = {\"@target/rerun.txt\"},\n        glue = {\"stepdefinitions\", \"hooks\"},\n        plugin = {\"pretty\",\n                \"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:\",\n                \"rerun:target/rerun.txt\"\n        }\n)\n\n\npublic class ReRunner {\n}\n", "\n\npublic class ReRunner {\n}\n"]}
{"filename": "src/test/java/stepdefinitions/WidgetsSteps.java", "chunked_list": ["package stepdefinitions;\n\nimport factory.DriverFactory;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.WidgetsPage;\n\npublic class WidgetsSteps {\n    WidgetsPage widgetsPage = new WidgetsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Widgets page$\")", "public class WidgetsSteps {\n    WidgetsPage widgetsPage = new WidgetsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Widgets page$\")\n    public void clickElementNavBar(String navbarOption) {\n        widgetsPage.clickWidgetsNavBar(navbarOption);\n    }\n\n    @When(\"^user enters \\\"([^\\\"]*)\\\" in Single color name edit box in Auto Complete section in Widgets page$\")\n    public void fillAutocompleteTextField(String textValue) {\n        widgetsPage.fillAutocompleteTextField(textValue);\n    }\n\n    @Then(\"^verify Blue color is selected in Single color name in Auto Complete section in Widgets page$\")", "    public void fillAutocompleteTextField(String textValue) {\n        widgetsPage.fillAutocompleteTextField(textValue);\n    }\n\n    @Then(\"^verify Blue color is selected in Single color name in Auto Complete section in Widgets page$\")\n    public void verifyBlueColourSelected() {\n        Assert.assertTrue(widgetsPage.verifyBlueColourSelected());\n    }\n\n    @When(\"^user hovers over button in Tool Tips section in Widgets page$\")\n    public void hoverOverButton() {\n        widgetsPage.hoverOverButton();\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" tooltip is displayed in Tool Tips section in Widgets page$\")", "    public void hoverOverButton() {\n        widgetsPage.hoverOverButton();\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" tooltip is displayed in Tool Tips section in Widgets page$\")\n    public void verifyTooltip(String toolTip) {\n        Assert.assertTrue(widgetsPage.verifyTooltip(toolTip));\n    }\n\n    @When(\"^user selects \\\"([^\\\"]*)\\\" in Old Style Select Menu in Select Menu section in Widgets page$\")\n    public void oldStyleSelectColour(String colorName) {\n        widgetsPage.oldStyleSelectColour(colorName);\n    }\n\n}\n", "    public void oldStyleSelectColour(String colorName) {\n        widgetsPage.oldStyleSelectColour(colorName);\n    }\n\n}\n"]}
{"filename": "src/test/java/stepdefinitions/InteractionsSteps.java", "chunked_list": ["package stepdefinitions;\n\nimport factory.DriverFactory;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.ElementsPage;\nimport pages.InteractionsPage;\n\npublic class InteractionsSteps {\n    InteractionsPage interactionsPage = new InteractionsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Interactions page$\")", "\npublic class InteractionsSteps {\n    InteractionsPage interactionsPage = new InteractionsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Interactions page$\")\n    public void clickElementNavBar(String navbarOption) {\n        interactionsPage.clickInteractionsNavBar(navbarOption);\n    }\n\n    @When(\"^user performs drag and drop in Droppable section in Interactions page$\")\n    public void performDragAndDrop() {\n        interactionsPage.performDragAndDrop();\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" text is displayed after successful drag and drop in Droppable section in Interactions page$\")", "    public void performDragAndDrop() {\n        interactionsPage.performDragAndDrop();\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" text is displayed after successful drag and drop in Droppable section in Interactions page$\")\n    public void verifyDragAndDrop(String dropText) {\n        Assert.assertTrue(interactionsPage.verifyDragAndDrop(dropText));\n    }\n}\n"]}
{"filename": "src/test/java/stepdefinitions/AlertsFramesWindowsSteps.java", "chunked_list": ["package stepdefinitions;\n\nimport factory.DriverFactory;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.AlertsFramesWindowsPage;\n\npublic class AlertsFramesWindowsSteps {\n    AlertsFramesWindowsPage alertsFramesWindowsPage = new AlertsFramesWindowsPage(DriverFactory.getPage(), DriverFactory.getContext());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Alerts, Frame & Windows page$\")", "public class AlertsFramesWindowsSteps {\n    AlertsFramesWindowsPage alertsFramesWindowsPage = new AlertsFramesWindowsPage(DriverFactory.getPage(), DriverFactory.getContext());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Alerts, Frame & Windows page$\")\n    public void clickAlertFrameWinNavBar(String navbarOption) {\n        alertsFramesWindowsPage.clickAlertFrameWinNavBar(navbarOption);\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" is url of new tab opened in Browser Windows section in Alerts, Frame & Windows page$\")\n    public void verifyNewTabURL(String newTabURL) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyNewTabURL(newTabURL));\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" is url of new window opened in Browser Windows section in Alerts, Frame & Windows page$\")", "    public void verifyNewTabURL(String newTabURL) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyNewTabURL(newTabURL));\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" is url of new window opened in Browser Windows section in Alerts, Frame & Windows page$\")\n    public void verifyNewWinURL(String newWinURL) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyNewWinURL(newWinURL));\n    }\n\n    @When(\"^user enters \\\"([^\\\"]*)\\\" text and accept the alert in Alerts section in Alerts, Frame & Windows page$\")\n    public void enterTextAndAcceptAlert(String alertText) {\n        alertsFramesWindowsPage.enterTextAndAcceptAlert(alertText);\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" text is accepted in alert in Alerts section in Alerts, Frame & Windows page$\")", "    public void enterTextAndAcceptAlert(String alertText) {\n        alertsFramesWindowsPage.enterTextAndAcceptAlert(alertText);\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" text is accepted in alert in Alerts section in Alerts, Frame & Windows page$\")\n    public void verifyAlertText(String alertText) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyAlertText(alertText));\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" as frame content in Frames section in Alerts, Frame & Windows page$\")\n    public void verifyFrameText(String frameText) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyFrameText(frameText));\n    }\n\n    @Then(\"^verify Nested Child frame is displayed in Nested Frames section in Alerts, Frame & Windows page$\")", "    public void verifyFrameText(String frameText) {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyFrameText(frameText));\n    }\n\n    @Then(\"^verify Nested Child frame is displayed in Nested Frames section in Alerts, Frame & Windows page$\")\n    public void verifyNestedFrameChildText() {\n        Assert.assertTrue(alertsFramesWindowsPage.verifyNestedFrameChildText());\n    }\n}\n"]}
{"filename": "src/test/java/stepdefinitions/ElementsSteps.java", "chunked_list": ["package stepdefinitions;\n\nimport factory.DriverFactory;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.ElementsPage;\n\npublic class ElementsSteps {\n    ElementsPage elementsPage = new ElementsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Elements page$\")", "public class ElementsSteps {\n    ElementsPage elementsPage = new ElementsPage(DriverFactory.getPage());\n\n    @When(\"^user clicks \\\"([^\\\"]*)\\\" navbar option in Elements page$\")\n    public void clickElementNavBar(String navbarOption) {\n        elementsPage.clickElementNavBar(navbarOption);\n    }\n\n    @When(\"^user enters \\\"([^\\\"]*)\\\" in Full Name Edit box in Elements page$\")\n    public void enterFullName(String fullName) {\n        elementsPage.enterFullName(fullName);\n    }\n\n    @When(\"^user clicks Submit in Text Box section in Elements page$\")", "    public void enterFullName(String fullName) {\n        elementsPage.enterFullName(fullName);\n    }\n\n    @When(\"^user clicks Submit in Text Box section in Elements page$\")\n    public void clickSubmit() {\n        elementsPage.clickSubmit();\n    }\n\n    @Then(\"^verify submitted text is displayed in Text Box section in Elements page$\")\n    public void verifySubmittedText() {\n        Assert.assertTrue(elementsPage.verifySubmittedText());\n    }\n\n    @When(\"^user clicks on Home checkbox in Check Box section in Elements page$\")", "    public void verifySubmittedText() {\n        Assert.assertTrue(elementsPage.verifySubmittedText());\n    }\n\n    @When(\"^user clicks on Home checkbox in Check Box section in Elements page$\")\n    public void clickHomeCheckBox() {\n        elementsPage.clickHomeCheckBox();\n    }\n\n    @Then(\"^verify that \\\"([^\\\"]*)\\\" checkbox selected text is displayed in Check Box section in Elements page$\")\n    public void verifyCheckboxSelectedText(String checkBoxText) {\n        Assert.assertTrue(elementsPage.verifyCheckboxSelectedText(checkBoxText));\n    }\n\n    @Then(\"^verify that No radio button is disabled in Radio Button section in Elements page$\")", "    public void verifyCheckboxSelectedText(String checkBoxText) {\n        Assert.assertTrue(elementsPage.verifyCheckboxSelectedText(checkBoxText));\n    }\n\n    @Then(\"^verify that No radio button is disabled in Radio Button section in Elements page$\")\n    public void verifyNoRadioButtonDisabled() {\n        Assert.assertTrue(elementsPage.verifyNoRadioButtonDisabled());\n    }\n\n    @Then(\"^verify that \\\"([^\\\"]*)\\\" is first column header in Web Tables section in Elements page$\")\n    public void verifyFirstColumnTableHeader(String headerName) {\n        Assert.assertTrue(elementsPage.verifyFirstColumnTableHeader(headerName));\n    }\n\n    @When(\"^user edits Cierra entry in Web Tables section in Elements page$\")", "    public void verifyFirstColumnTableHeader(String headerName) {\n        Assert.assertTrue(elementsPage.verifyFirstColumnTableHeader(headerName));\n    }\n\n    @When(\"^user edits Cierra entry in Web Tables section in Elements page$\")\n    public void editCierraEntry() {\n        elementsPage.editCierraEntry();\n    }\n\n    @Then(\"^user verifies Registration Form is displayed in Web Tables section in Elements page$\")\n    public void verifyRegistrationForm() {\n        Assert.assertTrue(elementsPage.verifyRegistrationForm());\n    }\n\n    @When(\"^user clicks on Close button in Registration Form in Web Tables section in Elements page$\")", "    public void verifyRegistrationForm() {\n        Assert.assertTrue(elementsPage.verifyRegistrationForm());\n    }\n\n    @When(\"^user clicks on Close button in Registration Form in Web Tables section in Elements page$\")\n    public void registrationFormClose() {\n        elementsPage.registrationFormClose();\n    }\n\n    @When(\"^user performs \\\"([^\\\"]*)\\\" click in Buttons section in Elements page$\")\n    public void performClick(String clickType) {\n        elementsPage.performClick(clickType);\n    }\n\n    @Then(\"^user verifies \\\"([^\\\"]*)\\\" click success message in Buttons section in Elements page$\")", "    public void performClick(String clickType) {\n        elementsPage.performClick(clickType);\n    }\n\n    @Then(\"^user verifies \\\"([^\\\"]*)\\\" click success message in Buttons section in Elements page$\")\n    public void verifyClickSuccessMsg(String clickType) {\n        Assert.assertTrue(elementsPage.verifyClickSuccessMsg(clickType));\n    }\n\n    @Then(\"^verify user is able to download file in Upload and Download section in Elements page$\")\n    public void verifyFileDownload() {\n        elementsPage.verifyFileDownload();\n    }\n\n    @Then(\"^user uploads \\\"([^\\\"]*)\\\" file in Upload and Download section in Elements page$\")", "    public void verifyFileDownload() {\n        elementsPage.verifyFileDownload();\n    }\n\n    @Then(\"^user uploads \\\"([^\\\"]*)\\\" file in Upload and Download section in Elements page$\")\n    public void performFileUpload(String fileName) {\n        elementsPage.performFileUpload(fileName);\n    }\n\n    @Then(\"^verify \\\"([^\\\"]*)\\\" is uploaded successfully in Upload and Download section in Elements page$\")\n    public void verifyFileUpload(String fileName) {\n        Assert.assertTrue(elementsPage.verifyFileUpload(fileName));\n    }\n\n}\n", "    public void verifyFileUpload(String fileName) {\n        Assert.assertTrue(elementsPage.verifyFileUpload(fileName));\n    }\n\n}\n"]}
{"filename": "src/test/java/stepdefinitions/LoginSteps.java", "chunked_list": ["package stepdefinitions;\n\nimport factory.DriverFactory;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.LoginPage;\nimport utils.WebActions;\n\npublic class LoginSteps {\n    LoginPage loginPage = new LoginPage(DriverFactory.getPage());\n\n    @Given(\"^user navigates to \\\"([^\\\"]*)\\\"$\")", "import utils.WebActions;\n\npublic class LoginSteps {\n    LoginPage loginPage = new LoginPage(DriverFactory.getPage());\n\n    @Given(\"^user navigates to \\\"([^\\\"]*)\\\"$\")\n    public void navigateToUrl(String url) {\n        loginPage.navigateToUrl(url);\n    }\n\n    @When(\"^user enters \\\"([^\\\"]*)\\\" username$\")", "    public void enterUsername(String username) {\n        loginPage.enterUsername(username);\n    }\n\n    @When(\"^user enters \\\"([^\\\"]*)\\\" password$\")\n    public void enterPassword(String password) {\n        loginPage.enterPassword(password);\n    }\n\n    @When(\"^user clicks Login button$\")\n    public void clickLogin() {\n        loginPage.clickLogin();\n    }\n\n    @When(\"^user clicks on \\\"([^\\\"]*)\\\" icon in main page\")", "    public void clickLogin() {\n        loginPage.clickLogin();\n    }\n\n    @When(\"^user clicks on \\\"([^\\\"]*)\\\" icon in main page\")\n    public void clickOnIcon(String iconName) {\n        loginPage.clickOnIcon(iconName);\n    }\n\n    @Then(\"verify that user is logged in and navigated to Profile page\")\n    public void verifyProfilePage() {\n        Assert.assertTrue(loginPage.verifyProfilePage());\n    }\n\n    @Then(\"^user verifies data as \\\"([^\\\"]*)\\\" in \\\"([^\\\"]*)\\\" row and \\\"([^\\\"]*)\\\" column from \\\"([^\\\"]*)\\\" sheet in \\\"([^\\\"]*)\\\" file\")", "    public void verifyProfilePage() {\n        Assert.assertTrue(loginPage.verifyProfilePage());\n    }\n\n    @Then(\"^user verifies data as \\\"([^\\\"]*)\\\" in \\\"([^\\\"]*)\\\" row and \\\"([^\\\"]*)\\\" column from \\\"([^\\\"]*)\\\" sheet in \\\"([^\\\"]*)\\\" file\")\n    public void clickOnIcon(String expectedValue, int rowNum, int colNum, String sheetName, String fileName) {\n        String actualValue = WebActions.getRowColValue(fileName, sheetName, rowNum, colNum);\n        Assert.assertEquals(expectedValue, actualValue);\n    }\n}\n"]}
{"filename": "src/test/java/hooks/Hooks.java", "chunked_list": ["package hooks;\n\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.Tracing;\nimport factory.DriverFactory;\nimport io.cucumber.java.After;\nimport io.cucumber.java.Before;\nimport io.cucumber.java.Scenario;\nimport utils.WebActions;\n", "import utils.WebActions;\n\nimport java.nio.file.Paths;\n\npublic class Hooks {\n    public DriverFactory driverFactory;\n    public Page page;\n\n    @Before\n    public void launchBrowser() {\n        String browserName = WebActions.getProperty(\"browser\");  //Fetching browser value from config file\n        driverFactory = new DriverFactory();\n        page = driverFactory.initDriver(browserName); // Passing browser name to launch the browser\n    }\n\n    //After runs in reverse order so order=1 will run first\n    @After(order = 0)", "    public void launchBrowser() {\n        String browserName = WebActions.getProperty(\"browser\");  //Fetching browser value from config file\n        driverFactory = new DriverFactory();\n        page = driverFactory.initDriver(browserName); // Passing browser name to launch the browser\n    }\n\n    //After runs in reverse order so order=1 will run first\n    @After(order = 0)\n    public void quitBrowser() {\n        page.close();\n    }\n\n    @After(order = 1)", "    public void quitBrowser() {\n        page.close();\n    }\n\n    @After(order = 1)\n    public void takeScreenshotAndTrace(Scenario scenario) {\n        if (scenario.isFailed()) {\n            String screenshotName = scenario.getName().replaceAll(\"\", \"_\"); //Replace all space in scenario name with underscore\n            byte[] sourcePath = page.screenshot();\n            scenario.attach(sourcePath, \"image/png\", screenshotName);  //Attach screenshot to report if scenario fails\n            DriverFactory.context.tracing().stop(new Tracing.StopOptions().setPath(Paths.get(\"target/\" + screenshotName + \".zip\")));\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/pages/InteractionsPage.java", "chunked_list": ["package pages;\n\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.options.AriaRole;\n\npublic class InteractionsPage {\n    private Page page;\n    private final Locator DRAGGABLE;\n    private final Locator DROPPABLE;\n\n    public InteractionsPage(Page page) {\n        this.page = page;\n        this.DRAGGABLE = page.getByRole(AriaRole.TABPANEL, new Page.GetByRoleOptions().setName(\"Simple\")).locator(\"#draggable\");\n        this.DROPPABLE = page.getByRole(AriaRole.TABPANEL, new Page.GetByRoleOptions().setName(\"Simple\")).locator(\"#droppable\");\n    }\n", "    public void clickInteractionsNavBar(String navbarOption) {\n        this.page.getByText(navbarOption, new Page.GetByTextOptions().setExact(true)).click();\n    }\n\n    public void performDragAndDrop() {\n        this.DRAGGABLE.hover();\n        this.page.mouse().down();\n        this.DROPPABLE.hover();\n        this.page.mouse().up();\n    }\n", "    public boolean verifyDragAndDrop(String dropText) {\n        return this.DROPPABLE.textContent().contains(dropText);\n    }\n}\n"]}
{"filename": "src/main/java/pages/AlertsFramesWindowsPage.java", "chunked_list": ["package pages;\n\nimport com.microsoft.playwright.BrowserContext;\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\n\npublic class AlertsFramesWindowsPage {\n    private Page page;\n    private BrowserContext context;\n    private final Locator NEW_TAB_BUTTON;\n    private final Locator NEW_WINDOW_BUTTON;\n    private final Locator PROMPT_ALERT_BUTTON;\n    private final Locator PROMPT_RESULT;\n    private final Locator FRAME_LOCATOR;\n    private final Locator NESTED_CHILDFRAME_LOCATOR;\n\n    public AlertsFramesWindowsPage(Page page, BrowserContext context) {\n        this.page = page;\n        this.context = context;\n        this.NEW_TAB_BUTTON = page.getByText(\"New Tab\");\n        this.NEW_WINDOW_BUTTON = page.getByText(\"New Window\", new Page.GetByTextOptions().setExact(true));\n        this.PROMPT_ALERT_BUTTON = page.locator(\"#promtButton\");\n        this.PROMPT_RESULT = page.locator(\"#promptResult\");\n        this.FRAME_LOCATOR = page.frameLocator(\"#frame2\").locator(\"#sampleHeading\");\n        //Nested Iframe Locator\n        this.NESTED_CHILDFRAME_LOCATOR = page.frameLocator(\"#frame1\").frameLocator(\"iframe\").getByText(\"Child Iframe\");\n    }\n\n", "    public void clickAlertFrameWinNavBar(String navbarOption) {\n        this.page.getByText(navbarOption, new Page.GetByTextOptions().setExact(true)).click();\n    }\n\n    public boolean verifyNewTabURL(String newTabURL) {\n        // Get page after a specific action (e.g. clicking a link)\n        Page newPage = this.context.waitForPage(() -> {\n            this.NEW_TAB_BUTTON.click(); // Opens a new tab\n        });\n        newPage.waitForLoadState();\n        String newPageURL = newPage.url();\n        newPage.close();\n        return (newPageURL.equals(newTabURL));\n    }\n", "    public boolean verifyNewWinURL(String newWinURL) {\n        // Get page after a specific action (e.g. clicking a link)\n        Page newPage = this.context.waitForPage(() -> {\n            this.NEW_WINDOW_BUTTON.click(); // Opens a new tab\n        });\n        newPage.waitForLoadState();\n        String newPageURL = newPage.url();\n        newPage.close();\n        return (newPageURL.equals(newWinURL));\n    }\n", "    public void enterTextAndAcceptAlert(String alertText) {\n        this.page.onDialog(dialog -> dialog.accept(alertText));\n        this.PROMPT_ALERT_BUTTON.click();\n    }\n\n    public boolean verifyAlertText(String alertText) {\n        return this.PROMPT_RESULT.textContent().contains(alertText);\n    }\n\n    public boolean verifyFrameText(String frameText) {\n        return this.FRAME_LOCATOR.textContent().contains(frameText);\n    }\n", "    public boolean verifyFrameText(String frameText) {\n        return this.FRAME_LOCATOR.textContent().contains(frameText);\n    }\n\n    public boolean verifyNestedFrameChildText() {\n        return this.NESTED_CHILDFRAME_LOCATOR.isVisible();\n    }\n}\n"]}
{"filename": "src/main/java/pages/LoginPage.java", "chunked_list": ["package pages;\n\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport utils.WebActions;\n\npublic class LoginPage {\n    private Page page;\n    private final Locator USERNAME_EDITBOX;\n    private final Locator PASSWORD_EDITBOX;\n    private final Locator LOGIN_BUTTON;\n    private final Locator BOOKS_SEARCH_BOX;\n\n    public LoginPage(Page page) {\n        this.page = page;\n        this.USERNAME_EDITBOX = page.locator(\"#userName\");\n        this.PASSWORD_EDITBOX = page.locator(\"#password\");\n        this.LOGIN_BUTTON = page.locator(\"#login\");\n        this.BOOKS_SEARCH_BOX = page.getByPlaceholder(\"Type to search\");\n    }\n", "    public void navigateToUrl(String url) {\n        this.page.navigate(WebActions.getProperty(url));\n    }\n\n    public void enterUsername(String username) {\n        USERNAME_EDITBOX.fill(WebActions.getProperty(username));\n    }\n\n    public void enterPassword(String password) {\n        PASSWORD_EDITBOX.fill(WebActions.decrypt(password));\n    }\n", "    public void enterPassword(String password) {\n        PASSWORD_EDITBOX.fill(WebActions.decrypt(password));\n    }\n\n    public void clickLogin() {\n        LOGIN_BUTTON.click();\n    }\n\n    public void clickOnIcon(String iconName) {\n        this.page.getByText(iconName, new Page.GetByTextOptions().setExact(true)).click();  // Clicks on the Exact text\n    }\n", "    public void clickOnIcon(String iconName) {\n        this.page.getByText(iconName, new Page.GetByTextOptions().setExact(true)).click();  // Clicks on the Exact text\n    }\n\n    public boolean verifyProfilePage() {\n        return WebActions.waitUntilElementDisplayed(this.BOOKS_SEARCH_BOX, 60);\n    }\n}\n"]}
{"filename": "src/main/java/pages/ElementsPage.java", "chunked_list": ["package pages;\n\nimport com.microsoft.playwright.Download;\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.options.AriaRole;\nimport com.microsoft.playwright.options.MouseButton;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;", "import java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class ElementsPage {\n    private Page page;\n    private final Locator FULL_NAME_EDITBOX;\n    private final Locator SUBMIT_BUTTON;\n    private final Locator SUBMITTED_TEXT;\n    private final Locator HOME_CHECK_BOX;\n    private final Locator HOME_SELECTED_TEXT;\n    private final Locator NO_RADIO_BUTTON;\n    private final Locator WEB_TABLES_HEADER;\n    private final Locator WEB_TABLES_EDIT_ICON;\n    private final Locator REGISTRATION_FORM_HEADER;\n    private final Locator REGISTRATION_FORM_CLOSE_BUTTON;\n    private final Locator DOUBLE_CLICK_BUTTON;\n    private final Locator DOUBLE_CLICK_TEXT;\n    private final Locator RIGHT_CLICK_BUTTON;\n    private final Locator RIGHT_CLICK_TEXT;\n    private final Locator HOME_LINK;\n    private final Locator DOWNLOAD_BUTTON;\n    private final Locator UPLOAD_BUTTON;\n    private final Locator UPLOADED_FILE_TEXT;\n\n    public ElementsPage(Page page) {\n        this.page = page;\n        this.FULL_NAME_EDITBOX = page.getByPlaceholder(\"Full Name\");\n        this.SUBMIT_BUTTON = page.getByText(\"Submit\");\n        this.SUBMITTED_TEXT = page.getByText(\"Name:AutoTest\", new Page.GetByTextOptions().setExact(true)); // Matches exact text\n        this.HOME_CHECK_BOX = page.getByText(\"Home\");\n        this.HOME_SELECTED_TEXT = page.locator(\".display-result\");\n        this.NO_RADIO_BUTTON = page.locator(\"#noRadio\"); // Using CSS Selector\n        this.WEB_TABLES_HEADER = page.getByRole(AriaRole.COLUMNHEADER);\n        this.WEB_TABLES_EDIT_ICON = page.getByRole(AriaRole.ROW, new Page.GetByRoleOptions().setName(\"Cierra\")).getByTitle(\"Edit\").locator(\"svg\"); // Chaining Locators\n        this.REGISTRATION_FORM_HEADER = page.getByText(\"Registration Form\");\n        this.REGISTRATION_FORM_CLOSE_BUTTON = page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Close\"));\n        this.DOUBLE_CLICK_BUTTON = page.locator(\"#doubleClickBtn\");\n        this.DOUBLE_CLICK_TEXT = page.getByText(\"You have done a double click\");\n        this.RIGHT_CLICK_BUTTON = page.locator(\"#rightClickBtn\");\n        this.RIGHT_CLICK_TEXT = page.getByText(\"You have done a right click\");\n        this.HOME_LINK = page.getByText(\"Home\", new Page.GetByTextOptions().setExact(true));\n        this.DOWNLOAD_BUTTON = page.locator(\"#downloadButton\");\n        this.UPLOAD_BUTTON = page.locator(\"#uploadFile\");\n        this.UPLOADED_FILE_TEXT = page.getByText(\"sampleFile.jpeg\");\n    }\n", "    public void clickElementNavBar(String navbarOption) {\n        this.page.getByText(navbarOption, new Page.GetByTextOptions().setExact(true)).click();\n    }\n\n    public void enterFullName(String fullName) {\n        this.FULL_NAME_EDITBOX.fill(fullName);\n    }\n\n    public void clickSubmit() {\n        this.SUBMIT_BUTTON.click();\n    }\n", "    public void clickSubmit() {\n        this.SUBMIT_BUTTON.click();\n    }\n\n    public boolean verifySubmittedText() {\n        return this.SUBMITTED_TEXT.isVisible();\n    }\n\n    public void clickHomeCheckBox() {\n        this.HOME_CHECK_BOX.click();\n    }\n", "    public void clickHomeCheckBox() {\n        this.HOME_CHECK_BOX.click();\n    }\n\n    public boolean verifyCheckboxSelectedText(String checkBoxText) {\n        return this.HOME_SELECTED_TEXT.textContent().contains(checkBoxText);\n    }\n\n    public boolean verifyNoRadioButtonDisabled() {\n        return this.NO_RADIO_BUTTON.isDisabled();\n    }\n", "    public boolean verifyNoRadioButtonDisabled() {\n        return this.NO_RADIO_BUTTON.isDisabled();\n    }\n\n    public boolean verifyFirstColumnTableHeader(String headerName) {\n        String[] headerTexts = this.WEB_TABLES_HEADER.allTextContents().toArray(new String[0]);\n        return headerTexts[0].equals(headerName);\n    }\n\n    public void editCierraEntry() {\n        this.WEB_TABLES_EDIT_ICON.click();\n    }\n", "    public void editCierraEntry() {\n        this.WEB_TABLES_EDIT_ICON.click();\n    }\n\n    public boolean verifyRegistrationForm() {\n        return this.REGISTRATION_FORM_HEADER.isVisible();\n    }\n\n    public void registrationFormClose() {\n        this.REGISTRATION_FORM_CLOSE_BUTTON.click();\n    }\n", "    public void registrationFormClose() {\n        this.REGISTRATION_FORM_CLOSE_BUTTON.click();\n    }\n\n    public void performClick(String clickType) {\n        switch (clickType.toLowerCase()) {\n            case \"double\":\n                this.DOUBLE_CLICK_BUTTON.dblclick();\n                break;\n            case \"right\":\n                this.RIGHT_CLICK_BUTTON.click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n                break;\n        }\n    }\n", "    public boolean verifyClickSuccessMsg(String clickType) {\n        boolean status = false;\n        switch (clickType.toLowerCase()) {\n            case \"double\":\n                status = this.DOUBLE_CLICK_TEXT.isVisible();\n                break;\n            case \"right\":\n                status = this.RIGHT_CLICK_TEXT.isVisible();\n                break;\n        }\n        return status;\n    }\n", "    public void verifyFileDownload() {\n        //Path for Downloads folder from root of project\n        String downloadsDirectory = System.getProperty(\"user.dir\") + \"/Downloads/\";\n        // Wait for the download to start and perform the action that initiates download Lambda expression\n        Download download = page.waitForDownload(this.DOWNLOAD_BUTTON::click);\n        // Wait for the download process to complete\n        Path path = download.path();\n        // Save downloaded file in Downloads directory\n        download.saveAs(Paths.get(downloadsDirectory + download.suggestedFilename()));\n    }\n", "    public void performFileUpload(String fileName) {\n        String uploadFilePath = System.getProperty(\"user.dir\") + \"/src/main/java/utils/functional/\" + fileName;\n        this.UPLOAD_BUTTON.setInputFiles(Paths.get(uploadFilePath));\n    }\n\n    public boolean verifyFileUpload(String fileName) {\n        return this.page.getByText(fileName).isVisible();\n    }\n}\n"]}
{"filename": "src/main/java/pages/WidgetsPage.java", "chunked_list": ["package pages;\n\nimport com.microsoft.playwright.Locator;\nimport com.microsoft.playwright.Page;\nimport com.microsoft.playwright.options.AriaRole;\n\npublic class WidgetsPage {\n    private Page page;\n    private final Locator AUTOCOMPLETE_EDITBOX;\n    private final Locator BLUE_COLOUR_TEXT;\n    private final Locator HOVER_BUTTON;\n    private final Locator TOOL_TIP_TEXT;\n    private final Locator OLD_SELECT_MENU;\n    private final Locator MULTISELECT_MENU;\n\n    public WidgetsPage(Page page) {\n        this.page = page;\n        this.AUTOCOMPLETE_EDITBOX = page.locator(\"#autoCompleteSingleInput\");\n        this.BLUE_COLOUR_TEXT = page.getByText(\"Blue\", new Page.GetByTextOptions().setExact(true));\n        ; //Used to select Blue colour from Autocomplete editbox\n        this.HOVER_BUTTON = page.locator(\"#toolTipButton\");\n        this.TOOL_TIP_TEXT = page.getByRole(AriaRole.TOOLTIP);\n        this.OLD_SELECT_MENU = page.locator(\"#oldSelectMenu\");\n        this.MULTISELECT_MENU = page.getByText(\"Select...\");\n    }\n", "    public void clickWidgetsNavBar(String navbarOption) {\n        this.page.getByText(navbarOption, new Page.GetByTextOptions().setExact(true)).click();\n    }\n\n    public void fillAutocompleteTextField(String textValue) {\n        this.AUTOCOMPLETE_EDITBOX.fill(textValue);\n        this.BLUE_COLOUR_TEXT.click();\n    }\n\n    public boolean verifyBlueColourSelected() {\n        return this.BLUE_COLOUR_TEXT.isVisible();\n    }\n", "    public boolean verifyBlueColourSelected() {\n        return this.BLUE_COLOUR_TEXT.isVisible();\n    }\n\n    public void hoverOverButton() {\n        this.HOVER_BUTTON.hover();  //Hover over element\n    }\n\n    public boolean verifyTooltip(String toolTip) {\n        return this.TOOL_TIP_TEXT.textContent().equals(toolTip);\n    }\n", "    public boolean verifyTooltip(String toolTip) {\n        return this.TOOL_TIP_TEXT.textContent().equals(toolTip);\n    }\n\n    public void oldStyleSelectColour(String colorName) {\n        this.OLD_SELECT_MENU.selectOption(colorName);\n    }\n}\n"]}
{"filename": "src/main/java/utils/WebActions.java", "chunked_list": ["package utils;\n\nimport com.microsoft.playwright.Locator;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Base64;", "import java.io.IOException;\nimport java.util.Base64;\nimport java.util.Properties;\n\npublic abstract class WebActions {\n\n    public static String getProperty(String key) {\n        ConfigReader configReader = new ConfigReader();\n        Properties properties = configReader.initProp();    // Reading from config properties file\n        return properties.getProperty(key);\n    }\n", "    public static boolean waitUntilElementDisplayed(Locator locator, int timeoutSec) {\n        boolean elementVisible = locator.isVisible();\n        int timer = 0;\n        while (!elementVisible && timer < timeoutSec) {\n            try {\n                Thread.sleep(1000);\n                elementVisible = locator.isVisible();\n                timer++;\n\n            } catch (Exception e) {\n                System.out.println(locator + \"was not visible.\");\n            }\n        }\n        return elementVisible;\n    }\n\n    //base64 encoding: This is used to encrypt the password and save the encrypted value in config.properties file", "    public static void encrypt() {\n        try {\n            byte[] encodedBytes = Base64.getEncoder().encode(\"yourPassword\".getBytes(\"UTF-8\"));\n            String encodedValue = new String(encodedBytes);\n        } catch (Exception e) {\n            System.out.println(\"Password was not Encrypted.\");\n        }\n    }\n\n    //base64 decoding: This is used to decrypt the password from the encrypted value in config.properties file while passing to app\n    public static String decrypt(String passwordField) {\n        String encodedBytes = WebActions.getProperty(passwordField);\n        String decodedString = \"\";", "    public static String decrypt(String passwordField) {\n        String encodedBytes = WebActions.getProperty(passwordField);\n        String decodedString = \"\";\n        try {\n            byte[] decodedBytes = Base64.getDecoder().decode(encodedBytes);\n            decodedString = new String(decodedBytes);\n        } catch (Exception e) {\n            System.out.println(\"Password was nor Decrypted.\");\n        }\n        return decodedString;\n    }\n", "    public static String getRowColValue(String filePath, String sheetName, int rowNum, int colNum) {\n        String fileName = System.getProperty(\"user.dir\") + \"\\\\src\\\\main\\\\java\\\\utils\\\\functional\\\\\" + filePath + \".xlsx\";\n        Workbook workbook = null;\n        try {\n            workbook = WorkbookFactory.create(new File(fileName));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        Sheet sheet = workbook.getSheet(sheetName);\n        return sheet.getRow(rowNum).getCell(colNum).getStringCellValue();\n    }\n}"]}
{"filename": "src/main/java/utils/ConfigReader.java", "chunked_list": ["package utils;\n\nimport java.io.FileInputStream;\nimport java.util.Properties;\n\npublic class ConfigReader {\n    private Properties properties;\n\n    //This is used to raed from properties files and returns properties object\n    public Properties initProp() {\n        properties = new Properties();", "    public Properties initProp() {\n        properties = new Properties();\n        try {\n            FileInputStream fileInputStream = new FileInputStream(\"./src/test/resources/config/config.properties\");\n            properties.load(fileInputStream);\n        } catch (Exception e) {\n            System.out.println(\"Unable to read Properties file.\");\n        }\n        return properties;\n    }\n}"]}
{"filename": "src/main/java/factory/DriverFactory.java", "chunked_list": ["package factory;\n\nimport com.microsoft.playwright.*;\nimport utils.WebActions;\n\npublic class DriverFactory {\n    public Browser browser;\n    public static BrowserContext context;\n    public static Page page;\n\n    public static ThreadLocal<Page> threadLocalDriver = new ThreadLocal<>(); //For Parallel execution", "    public static Page page;\n\n    public static ThreadLocal<Page> threadLocalDriver = new ThreadLocal<>(); //For Parallel execution\n    public static ThreadLocal<BrowserContext> threadLocalContext = new ThreadLocal<>();\n\n    //Launches Browser as set by user in config file\n    public Page initDriver(String browserName) {\n        BrowserType browserType = null;\n        boolean headless = Boolean.valueOf(WebActions.getProperty(\"headless\"));\n        switch (browserName) {\n            case \"firefox\":\n                browserType = Playwright.create().firefox();\n                browser = browserType.launch(new BrowserType.LaunchOptions().setHeadless(headless));\n                break;\n            case \"chrome\":\n                browserType = Playwright.create().chromium();\n                browser = browserType.launch(new BrowserType.LaunchOptions().setChannel(\"chrome\").setHeadless(headless));\n                break;\n            case \"webkit\":\n                browserType = Playwright.create().webkit();\n                browser = browserType.launch(new BrowserType.LaunchOptions().setHeadless(headless));\n                break;\n        }", "        if (browserType == null) throw new IllegalArgumentException(\"Could not Launch Browser for type\" + browserType);\n        context = browser.newContext();\n        //Below line is used to start the trace file\n        context.tracing().start(new Tracing.StartOptions().setScreenshots(true).setSnapshots(true).setSources(false));\n        page = context.newPage();\n        threadLocalDriver.set(page);\n        threadLocalContext.set(context);\n        return page;\n    }\n\n    public static synchronized Page getPage() {\n        return threadLocalDriver.get(); // Will return Initialized Thread Local Driver\n    }\n", "    public static synchronized Page getPage() {\n        return threadLocalDriver.get(); // Will return Initialized Thread Local Driver\n    }\n\n    public static synchronized BrowserContext getContext() {\n        return threadLocalContext.get(); // Will return Initialized Thread Local Context\n    }\n\n}\n"]}
