{"filename": "server/src/main/java/io/delta/store/internal/data/CloseableIterator.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.data;\n", "package io.delta.store.internal.data;\n\nimport java.io.Closeable;\nimport java.util.Iterator;\n\n/*\n * An {@link Iterator} that also implements the {@link Closeable} interface. The\n * caller should call {@link #close()} method to free all resources properly\n * after using the iterator.\n */\npublic interface CloseableIterator<T> extends Iterator<T>, Closeable {\n}\n", " * after using the iterator.\n */\npublic interface CloseableIterator<T> extends Iterator<T>, Closeable {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/DeltaStandaloneException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when a query fails, usually because the query itself is invalid.\n */\npublic class DeltaStandaloneException extends RuntimeException {\n\tpublic DeltaStandaloneException() {\n\t\tsuper();\n\t}\n\n\tpublic DeltaStandaloneException(String message) {\n\t\tsuper(message);\n\t}\n\n\tpublic DeltaStandaloneException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/MetadataChangedException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when the metadata of the Delta table has changed between the time of\n * read and the time of commit.\n */\npublic class MetadataChangedException extends DeltaConcurrentModificationException {\n\tpublic MetadataChangedException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/DeltaConcurrentModificationException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\nimport java.util.ConcurrentModificationException;\n\n/*\n * The basic class for all Delta Standalone commit conflict exceptions.\n */\npublic class DeltaConcurrentModificationException extends ConcurrentModificationException {\n\tpublic DeltaConcurrentModificationException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/ConcurrentTransactionException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when concurrent transaction both attempt to update the same idempotent\n * transaction.\n */\npublic class ConcurrentTransactionException extends DeltaConcurrentModificationException {\n\tpublic ConcurrentTransactionException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/ConcurrentAppendException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when files are added that would have been read by the current\n * transaction.\n */\npublic class ConcurrentAppendException extends DeltaConcurrentModificationException {\n\tpublic ConcurrentAppendException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/ConcurrentDeleteDeleteException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when the current transaction deletes data that was deleted by a\n * concurrent transaction.\n */\npublic class ConcurrentDeleteDeleteException extends DeltaConcurrentModificationException {\n\tpublic ConcurrentDeleteDeleteException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/ProtocolChangedException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when the protocol version has changed between the time of read and the\n * time of commit.\n */\npublic class ProtocolChangedException extends DeltaConcurrentModificationException {\n\tpublic ProtocolChangedException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/exceptions/ConcurrentDeleteReadException.java", "chunked_list": ["/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.exceptions;\n", "package io.delta.store.internal.exceptions;\n\n/*\n * Thrown when the current transaction reads data that was deleted by a\n * concurrent transaction.\n */\npublic class ConcurrentDeleteReadException extends DeltaConcurrentModificationException {\n\tpublic ConcurrentDeleteReadException(String message) {\n\t\tsuper(message);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/FloatType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code float} values.", "/*\n * The data type representing {@code float} values.\n */\npublic final class FloatType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/ByteType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code byte} values.", "/*\n * The data type representing {@code byte} values.\n */\npublic final class ByteType extends DataType {\n\t@Override\n\tpublic String getSimpleString() {\n\t\treturn \"tinyint\";\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/StructType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Arrays;\nimport java.util.HashMap;", "import java.util.Arrays;\nimport java.util.HashMap;\n\nimport io.delta.store.helpers.SchemaUtils;\n\n/*\n * The data type representing a table's schema, consisting of a collection of\n * fields (that is, {@code fieldName} to {@code dataType} pairs).\n *\n * @see StructField StructField", " *\n * @see StructField StructField\n */\npublic final class StructType extends DataType {\n\tprivate final StructField[] fields;\n\tprivate final HashMap<String, StructField> nameToField;\n\n\tpublic StructType() {\n\t\tthis(new StructField[0]);\n\t}\n\n\tpublic StructType(StructField[] fields) {\n\t\tthis.fields = fields;\n\t\tthis.nameToField = new HashMap<>();\n\t\tArrays.stream(fields).forEach(field -> nameToField.put(field.getName(), field));\n\t}\n\n\t/*\n\t * Creates a new {@link StructType} by adding a new field.\n\t *\n\t * <pre> {@code StructType schema = new StructType() .add(new StructField(\"a\",\n\t * new IntegerType(), true)) .add(new StructField(\"b\", new LongType(), false))\n\t * .add(new StructField(\"c\", new StringType(), true)) } </pre>\n\t * \n\t * @param field The new field to add.\n\t * \n\t * @return a {@link StructType} with the added field\n\t */", "\tpublic StructType add(StructField field) {\n\t\tStructField[] newFields = Arrays.copyOf(fields, fields.length + 1);\n\t\tnewFields[newFields.length - 1] = field;\n\t\treturn new StructType(newFields);\n\t}\n\n\t/*\n\t * Creates a new {@link StructType} by adding a new nullable field with no\n\t * metadata.\n\t *\n\t * <pre> {@code StructType schema = new StructType() .add(\"a\", new\n\t * IntegerType()) .add(\"b\", new LongType()) .add(\"c\", new StringType()) } </pre>\n\t * \n\t * @param fieldName The name of the new field.\n\t * \n\t * @param dataType The datatype for the new field.\n\t * \n\t * @return a {@link StructType} with the added field\n\t */", "\tpublic StructType add(String fieldName, DataType dataType) {\n\t\tStructField newField = new StructField(fieldName, dataType, true);\n\t\treturn add(newField);\n\t}\n\n\t/*\n\t * Creates a new {@link StructType} by adding a new field with no metadata.\n\t *\n\t * <pre> {@code StructType schema = new StructType() .add(\"a\", new\n\t * IntegerType(), true) .add(\"b\", new LongType(), false) .add(\"c\", new\n\t * StringType(), true) } </pre>\n\t * \n\t * @param fieldName The name of the new field.\n\t * \n\t * @param dataType The datatype for the new field.\n\t * \n\t * @param nullable Whether or not the new field is nullable.\n\t * \n\t * @return a {@link StructType} with the added field\n\t */", "\tpublic StructType add(String fieldName, DataType dataType, boolean nullable) {\n\t\tStructField newField = new StructField(fieldName, dataType, nullable);\n\t\treturn add(newField);\n\t}\n\n\t/*\n\t * @return array of fields\n\t */\n\tpublic StructField[] getFields() {\n\t\treturn fields.clone();\n\t}\n\n\t/*\n\t * @return array of field names\n\t */\n\tpublic String[] getFieldNames() {\n\t\treturn Arrays.stream(fields).map(StructField::getName).toArray(String[]::new);\n\t}\n\n\t/*\n\t * @return the number of fields\n\t */", "\tpublic int length() {\n\t\treturn fields.length;\n\t}\n\n\t/*\n\t * @param fieldName the name of the desired {@link StructField}, not null\n\t * \n\t * @return the {@code link} with the given name, not null\n\t * \n\t * @throws IllegalArgumentException if a field with the given name does not\n\t * exist\n\t */", "\tpublic StructField get(String fieldName) {\n\t\tif (!nameToField.containsKey(fieldName)) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"Field \\\"%s\\\" does not exist. Available fields: %s\",\n\t\t\t\t\tfieldName, Arrays.toString(getFieldNames())));\n\t\t}\n\n\t\treturn nameToField.get(fieldName);\n\t}\n\n\t/*\n\t * @return a readable indented tree representation of this {@code StructType}\n\t * and all of its nested elements\n\t */", "\tpublic String getTreeString() {\n\t\tfinal String prefix = \" |\";\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuilder.append(\"root\\n\");\n\t\tArrays.stream(fields).forEach(field -> field.buildFormattedString(prefix, builder));\n\t\treturn builder.toString();\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of this {@code StructType}\n\t * and all of its nested elements.\n\t */\n\tprotected void buildFormattedString(String prefix, StringBuilder builder) {\n\t\tArrays.stream(fields).forEach(field -> field.buildFormattedString(prefix, builder));\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tStructType that = (StructType) o;\n\t\treturn Arrays.equals(fields, that.fields);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Arrays.hashCode(fields);\n\t}\n\n\t/*\n\t * Whether a new schema can replace this existing schema in a Delta table\n\t * without rewriting data files in the table. <p> Returns false if the new\n\t * schema: <ul> <li>Drops any column that is present in the current schema</li>\n\t * <li>Converts nullable=true to nullable=false for any column</li> <li>Changes\n\t * any datatype</li> </ul>\n\t *\n\t * @param newSchema the new schema to update the table with\n\t * \n\t * @return whether the new schema is compatible with this existing schema\n\t */", "\tpublic int hashCode() {\n\t\treturn Arrays.hashCode(fields);\n\t}\n\n\t/*\n\t * Whether a new schema can replace this existing schema in a Delta table\n\t * without rewriting data files in the table. <p> Returns false if the new\n\t * schema: <ul> <li>Drops any column that is present in the current schema</li>\n\t * <li>Converts nullable=true to nullable=false for any column</li> <li>Changes\n\t * any datatype</li> </ul>\n\t *\n\t * @param newSchema the new schema to update the table with\n\t * \n\t * @return whether the new schema is compatible with this existing schema\n\t */", "\tpublic boolean isWriteCompatible(StructType newSchema) {\n\t\treturn SchemaUtils.isWriteCompatible(this, newSchema);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/BinaryType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code byte[]} values.", "/*\n * The data type representing {@code byte[]} values.\n */\npublic final class BinaryType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/IntegerType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code int} values.", "/*\n * The data type representing {@code int} values.\n */\npublic final class IntegerType extends DataType {\n\t@Override\n\tpublic String getSimpleString() {\n\t\treturn \"int\";\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/FieldMetadata.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Arrays;\nimport java.util.Collections;", "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/*\n * The metadata for a given {@link StructField}.\n */\npublic final class FieldMetadata {\n\tprivate final Map<String, Object> metadata;\n\n\tprivate FieldMetadata(Map<String, Object> metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\t/*\n\t * @return list of the key-value pairs in this {@link FieldMetadata}\n\t */\n\tpublic Map<String, Object> getEntries() {\n\t\treturn Collections.unmodifiableMap(metadata);\n\t}\n\n\t/*\n\t * @param key the key to check for\n\t * \n\t * @return True if {@code this} contains a mapping for the given key, False\n\t * otherwise\n\t */", " */\npublic final class FieldMetadata {\n\tprivate final Map<String, Object> metadata;\n\n\tprivate FieldMetadata(Map<String, Object> metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\t/*\n\t * @return list of the key-value pairs in this {@link FieldMetadata}\n\t */\n\tpublic Map<String, Object> getEntries() {\n\t\treturn Collections.unmodifiableMap(metadata);\n\t}\n\n\t/*\n\t * @param key the key to check for\n\t * \n\t * @return True if {@code this} contains a mapping for the given key, False\n\t * otherwise\n\t */", "\tpublic boolean contains(String key) {\n\t\treturn metadata.containsKey(key);\n\t}\n\n\t/*\n\t * @param key the key to check for\n\t * \n\t * @return the value to which the specified key is mapped, or null if there is\n\t * no mapping for the given key\n\t */\n\tpublic Object get(String key) {\n\t\treturn metadata.get(key);\n\t}\n\n\t@Override", "\tpublic Object get(String key) {\n\t\treturn metadata.get(key);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn metadata.entrySet().stream()\n\t\t\t\t.map(entry -> entry.getKey() + \"=\"\n\t\t\t\t\t\t+ (entry.getValue().getClass().isArray() ? Arrays.toString((Object[]) entry.getValue())\n\t\t\t\t\t\t\t\t: entry.getValue().toString()))\n\t\t\t\t.collect(Collectors.joining(\", \", \"{\", \"}\"));\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tFieldMetadata that = (FieldMetadata) o;\n\t\tif (this.metadata.size() != that.metadata.size())\n\t\t\treturn false;\n\t\treturn this.metadata.entrySet().stream()\n\t\t\t\t.allMatch(e -> e.getValue().equals(that.metadata.get(e.getKey()))\n\t\t\t\t\t\t|| (e.getValue().getClass().isArray() && that.metadata.get(e.getKey()).getClass().isArray()\n\t\t\t\t\t\t\t\t&& Arrays.equals((Object[]) e.getValue(), (Object[]) that.metadata.get(e.getKey()))));\n\t}\n\n\t@Override", "\tpublic int hashCode() {\n\t\treturn metadata.entrySet().stream()\n\t\t\t\t.mapToInt(\n\t\t\t\t\t\tentry -> (entry.getValue().getClass().isArray()\n\t\t\t\t\t\t\t\t? (entry.getKey() == null ? 0 : entry.getKey().hashCode())\n\t\t\t\t\t\t\t\t\t\t^ Arrays.hashCode((Object[]) entry.getValue())\n\t\t\t\t\t\t\t\t: entry.hashCode()))\n\t\t\t\t.sum();\n\t}\n\n\t/*\n\t * @return a new {@link FieldMetadata.Builder}\n\t */", "\tpublic static Builder builder() {\n\t\treturn new Builder();\n\t}\n\n\t/*\n\t * Builder class for {@link FieldMetadata}.\n\t */\n\tpublic static class Builder {\n\t\tprivate Map<String, Object> metadata = new HashMap<String, Object>();\n\n\t\tpublic Builder putNull(String key) {\n\t\t\tmetadata.put(key, null);\n\t\t\treturn this;\n\t\t}\n", "\t\tpublic Builder putNull(String key) {\n\t\t\tmetadata.put(key, null);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putLong(String key, long value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putDouble(String key, double value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n", "\t\tpublic Builder putDouble(String key, double value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putBoolean(String key, boolean value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putString(String key, String value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n", "\t\tpublic Builder putString(String key, String value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putMetadata(String key, FieldMetadata value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putLongArray(String key, Long[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n", "\t\tpublic Builder putLongArray(String key, Long[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putDoubleArray(String key, Double[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putBooleanArray(String key, Boolean[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n", "\t\tpublic Builder putBooleanArray(String key, Boolean[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putStringArray(String key, String[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Builder putMetadataArray(String key, FieldMetadata[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\t/*\n\t\t * @return a new {@link FieldMetadata} with the mappings added to the builder\n\t\t */", "\t\tpublic Builder putMetadataArray(String key, FieldMetadata[] value) {\n\t\t\tmetadata.put(key, value);\n\t\t\treturn this;\n\t\t}\n\n\t\t/*\n\t\t * @return a new {@link FieldMetadata} with the mappings added to the builder\n\t\t */\n\t\tpublic FieldMetadata build() {\n\t\t\treturn new FieldMetadata(this.metadata);\n\t\t}\n\t}\n}\n", "\t\tpublic FieldMetadata build() {\n\t\t\treturn new FieldMetadata(this.metadata);\n\t\t}\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/TimestampType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code java.sql.Timestamp} values.", "/*\n * The data type representing {@code java.sql.Timestamp} values.\n */\npublic final class TimestampType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/StringType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code String} values.", "/*\n * The data type representing {@code String} values.\n */\npublic final class StringType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/NullType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code null} values.", "/*\n * The data type representing {@code null} values.\n */\npublic final class NullType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/DataType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Locale;\nimport java.util.Objects;", "import java.util.Locale;\nimport java.util.Objects;\n\nimport io.delta.store.helpers.DataTypeParser;\n\n/*\n * The base type of all {@code io.delta.store} data types. Represents a\n * bare-bones Java implementation of the Spark SQL <a href=\n * \"https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/types/DataType.scala\"\n * target=\"_blank\">DataType</a>, allowing Spark SQL schemas to be represented in", " * \"https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/types/DataType.scala\"\n * target=\"_blank\">DataType</a>, allowing Spark SQL schemas to be represented in\n * Java.\n */\npublic abstract class DataType {\n\n\t/*\n\t * Parses the input {@code json} into a {@link DataType}.\n\t *\n\t * @param json the {@link String} json to parse\n\t * \n\t * @return the parsed {@link DataType}\n\t */", "\tpublic static DataType fromJson(String json) {\n\t\treturn DataTypeParser.fromJson(json);\n\t}\n\n\t/*\n\t * @return the name of the type used in JSON serialization\n\t */\n\tpublic String getTypeName() {\n\t\tString tmp = this.getClass().getSimpleName();\n\t\ttmp = stripSuffix(tmp, \"$\");\n\t\ttmp = stripSuffix(tmp, \"Type\");\n\t\ttmp = stripSuffix(tmp, \"UDT\");\n\t\treturn tmp.toLowerCase(Locale.ROOT);\n\t}\n\n\t/*\n\t * @return a readable {@code String} representation for the type\n\t */", "\tpublic String getSimpleString() {\n\t\treturn getTypeName();\n\t}\n\n\t/*\n\t * @return a {@code String} representation for the type saved in external\n\t * catalogs\n\t */\n\tpublic String getCatalogString() {\n\t\treturn getSimpleString();\n\t}\n\n\t/*\n\t * @return a JSON {@code String} representation of the type\n\t */", "\tpublic String getCatalogString() {\n\t\treturn getSimpleString();\n\t}\n\n\t/*\n\t * @return a JSON {@code String} representation of the type\n\t */\n\tpublic String toJson() {\n\t\treturn DataTypeParser.toJson(this);\n\t}\n\n\t/*\n\t * @return a pretty (i.e. indented) JSON {@code String} representation of the\n\t * type\n\t */", "\tpublic String toPrettyJson() {\n\t\treturn DataTypeParser.toPrettyJson(this);\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of the {@code ArrayType}\n\t */\n\tprotected static void buildFormattedString(DataType dataType, String prefix, StringBuilder builder) {\n\t\tif (dataType instanceof ArrayType) {\n\t\t\t((ArrayType) dataType).buildFormattedString(prefix, builder);\n\t\t}", "\t\tif (dataType instanceof ArrayType) {\n\t\t\t((ArrayType) dataType).buildFormattedString(prefix, builder);\n\t\t}\n\t\tif (dataType instanceof StructType) {\n\t\t\t((StructType) dataType).buildFormattedString(prefix, builder);\n\t\t}\n\t\tif (dataType instanceof MapType) {\n\t\t\t((MapType) dataType).buildFormattedString(prefix, builder);\n\t\t}\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tDataType that = (DataType) o;\n\t\treturn getTypeName().equals(that.getTypeName());\n\t}\n\n\tpublic boolean equivalent(DataType dt) {\n\t\treturn this.equals(dt);\n\t}\n\n\t@Override", "\tpublic boolean equivalent(DataType dt) {\n\t\treturn this.equals(dt);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(getTypeName());\n\t}\n\n\tprivate String stripSuffix(String orig, String suffix) {\n\t\tif (null != orig && orig.endsWith(suffix)) {\n\t\t\treturn orig.substring(0, orig.length() - suffix.length());\n\t\t}\n\t\treturn orig;\n\t}\n}\n", "\t\tif (null != orig && orig.endsWith(suffix)) {\n\t\t\treturn orig.substring(0, orig.length() - suffix.length());\n\t\t}\n\t\treturn orig;\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/DecimalType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/*\n * The data type representing {@code java.math.BigDecimal} values. A Decimal\n * that must have fixed precision (the maximum number of digits) and scale (the\n * number of digits on right side of dot).\n *\n * The precision can be up to 38, scale can also be up to 38 (less or equal to\n * precision).\n *", " * precision).\n *\n * The default precision and scale is (10, 0).\n */\npublic final class DecimalType extends DataType {\n\tpublic static final DecimalType USER_DEFAULT = new DecimalType(10, 0);\n\n\tprivate final int precision;\n\tprivate final int scale;\n\n\tpublic DecimalType(int precision, int scale) {\n\t\tthis.precision = precision;\n\t\tthis.scale = scale;\n\t}\n\n\t/*\n\t * @return the maximum number of digits of the decimal\n\t */", "\tpublic int getPrecision() {\n\t\treturn precision;\n\t}\n\n\t/*\n\t * @return the number of digits on the right side of the decimal point (dot)\n\t */\n\tpublic int getScale() {\n\t\treturn scale;\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tDecimalType that = (DecimalType) o;\n\t\treturn precision == that.precision && scale == that.scale;\n\t}\n\n\t@Override\n\tpublic boolean equivalent(DataType dt) {\n\t\treturn dt instanceof DecimalType;\n\t}\n\n\t@Override", "\tpublic boolean equivalent(DataType dt) {\n\t\treturn dt instanceof DecimalType;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(super.hashCode(), precision, scale);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/DateType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * A date type, supporting \"0001-01-01\" through \"9999-12-31\". Internally, this", "/*\n * A date type, supporting \"0001-01-01\" through \"9999-12-31\". Internally, this\n * is represented as the number of days from 1970-01-01.\n */\npublic final class DateType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/MapType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/*\n * The data type for Maps. Keys in a map are not allowed to have {@code null}\n * values.\n */\npublic final class MapType extends DataType {\n\tprivate final DataType keyType;\n\tprivate final DataType valueType;\n\tprivate final boolean valueContainsNull;\n\n\t/*\n\t * @param keyType the data type of map keys\n\t * \n\t * @param valueType the data type of map values\n\t * \n\t * @param valueContainsNull indicates if map values have {@code null} values\n\t */\n\tpublic MapType(DataType keyType, DataType valueType, boolean valueContainsNull) {\n\t\tthis.keyType = keyType;\n\t\tthis.valueType = valueType;\n\t\tthis.valueContainsNull = valueContainsNull;\n\t}\n\n\t/*\n\t * @return the data type of map keys\n\t */", "\tpublic DataType getKeyType() {\n\t\treturn keyType;\n\t}\n\n\t/*\n\t * @return the data type of map values\n\t */\n\tpublic DataType getValueType() {\n\t\treturn valueType;\n\t}\n\n\t/*\n\t * @return {@code true} if this map has null values, else {@code false}\n\t */", "\tpublic boolean valueContainsNull() {\n\t\treturn valueContainsNull;\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of this {@code MapType}.\n\t */\n\tprotected void buildFormattedString(String prefix, StringBuilder builder) {\n\t\tfinal String nextPrefix = prefix + \"    |\";\n\t\tbuilder.append(String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));\n\t\tDataType.buildFormattedString(keyType, nextPrefix, builder);\n\t\tbuilder.append(String.format(\"%s-- value: %s (valueContainsNull = %b)\\n\", prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tMapType mapType = (MapType) o;\n\t\treturn valueContainsNull == mapType.valueContainsNull && Objects.equals(keyType, mapType.keyType)\n\t\t\t\t&& Objects.equals(valueType, mapType.valueType);\n\t}\n\n\t@Override", "\tpublic int hashCode() {\n\t\treturn Objects.hash(keyType, valueType, valueContainsNull);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/StructField.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/*\n * A field inside a {@link StructType}.\n */\npublic final class StructField {\n\tprivate final String name;\n\tprivate final DataType dataType;\n\tprivate final boolean nullable;\n\tprivate final FieldMetadata metadata;\n\n\t/*\n\t * Constructor with default {@code nullable = true}.\n\t *\n\t * @param name the name of this field\n\t * \n\t * @param dataType the data type of this field\n\t */\n\tpublic StructField(String name, DataType dataType) {\n\t\tthis(name, dataType, true);\n\t}\n\n\t/*\n\t * @param name the name of this field\n\t * \n\t * @param dataType the data type of this field\n\t * \n\t * @param nullable indicates if values of this field can be {@code null} values\n\t */\n\tpublic StructField(String name, DataType dataType, boolean nullable) {\n\t\tthis(name, dataType, nullable, FieldMetadata.builder().build());\n\t}\n\n\t/*\n\t * @param name the name of this field\n\t * \n\t * @param dataType the data type of this field\n\t * \n\t * @param nullable indicates if values of this field can be {@code null} values\n\t * \n\t * @param metadata metadata for this field\n\t */\n\tpublic StructField(String name, DataType dataType, boolean nullable, FieldMetadata metadata) {\n\t\tthis.name = name;\n\t\tthis.dataType = dataType;\n\t\tthis.nullable = nullable;\n\t\tthis.metadata = metadata;\n\t}\n\n\t/*\n\t * @return the name of this field\n\t */", "\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t/*\n\t * @return the data type of this field\n\t */\n\tpublic DataType getDataType() {\n\t\treturn dataType;\n\t}\n\n\t/*\n\t * @return whether this field allows to have a {@code null} value.\n\t */", "\tpublic boolean isNullable() {\n\t\treturn nullable;\n\t}\n\n\t/*\n\t * @return the metadata for this field\n\t */\n\tpublic FieldMetadata getMetadata() {\n\t\treturn metadata;\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of this {@code StructField}.\n\t */\n\tprotected void buildFormattedString(String prefix, StringBuilder builder) {\n\t\tfinal String nextPrefix = prefix + \"    |\";\n\t\tbuilder.append(String.format(\"%s-- %s: %s (nullable = %b) (metadata =%s)\\n\", prefix, name,\n\t\t\t\tdataType.getTypeName(), nullable, metadata.toString()));\n\t\tDataType.buildFormattedString(dataType, nextPrefix, builder);\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tStructField that = (StructField) o;\n\t\treturn name.equals(that.name) && dataType.equals(that.dataType) && nullable == that.nullable\n\t\t\t\t&& metadata.equals(that.metadata);\n\t}\n\n\t@Override", "\tpublic int hashCode() {\n\t\treturn Objects.hash(name, dataType, nullable, metadata);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/DoubleType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code double} values.", "/*\n * The data type representing {@code double} values.\n */\npublic final class DoubleType extends DataType {\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/ShortType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code short} values.", "/*\n * The data type representing {@code short} values.\n */\npublic final class ShortType extends DataType {\n\t@Override\n\tpublic String getSimpleString() {\n\t\treturn \"smallint\";\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/LongType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code long} values.", "/*\n * The data type representing {@code long} values.\n */\npublic final class LongType extends DataType {\n\t@Override\n\tpublic String getSimpleString() {\n\t\treturn \"bigint\";\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/ArrayType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/*\n * The data type for collections of multiple values.\n */\npublic final class ArrayType extends DataType {\n\tprivate final DataType elementType;\n\tprivate final boolean containsNull;\n\n\t/*\n\t * @param elementType the data type of values\n\t * \n\t * @param containsNull indicates if values have {@code null} value\n\t */\n\tpublic ArrayType(DataType elementType, boolean containsNull) {\n\t\tthis.elementType = elementType;\n\t\tthis.containsNull = containsNull;\n\t}\n\n\t/*\n\t * @return the type of array elements\n\t */", "\tpublic DataType getElementType() {\n\t\treturn elementType;\n\t}\n\n\t/*\n\t * @return {@code true} if the array has {@code null} values, else {@code false}\n\t */\n\tpublic boolean containsNull() {\n\t\treturn containsNull;\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of this {@code ArrayType}.\n\t */\n\tprotected void buildFormattedString(String prefix, StringBuilder builder) {\n\t\tfinal String nextPrefix = prefix + \"    |\";\n\t\tbuilder.append(String.format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));\n\t\tDataType.buildFormattedString(elementType, nextPrefix, builder);\n\t}\n\n\t@Override", "\tpublic boolean equals(Object o) {\n\t\tif (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tArrayType arrayType = (ArrayType) o;\n\t\treturn containsNull == arrayType.containsNull && Objects.equals(elementType, arrayType.elementType);\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(elementType, containsNull);\n\t}\n}\n", "\tpublic int hashCode() {\n\t\treturn Objects.hash(elementType, containsNull);\n\t}\n}\n"]}
{"filename": "server/src/main/java/io/delta/store/internal/types/BooleanType.java", "chunked_list": ["/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*", "\n/*\n * This file contains code from the Apache Spark project (original license above).\n * It contains modifications, which are licensed as follows:\n */\n\n/*\n * Copyright (2020-present) The Delta Lake Project Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");", " *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.delta.store.internal.types;\n\n/*\n * The data type representing {@code boolean} values.", "/*\n * The data type representing {@code boolean} values.\n */\npublic final class BooleanType extends DataType {\n}\n"]}
