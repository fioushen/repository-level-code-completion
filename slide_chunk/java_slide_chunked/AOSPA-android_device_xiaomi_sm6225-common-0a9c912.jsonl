{"filename": "parts/src/org/lineageos/settings/TileEntryActivity.java", "chunked_list": ["/*\n * Copyright (C) 2021 Chaldeaprjkt\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings;\n", "package org.lineageos.settings;\n\nimport android.app.Activity;\nimport android.content.ActivityNotFoundException;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\n\nimport androidx.annotation.Nullable;", "\nimport androidx.annotation.Nullable;\n\nimport org.lineageos.settings.dirac.DiracActivity;\n\npublic class TileEntryActivity extends Activity {\n    private static final String TAG = \"TileEntryActivity\";\n    private static final String DIRAC_TILE = \"org.lineageos.settings.dirac.DiracTileService\";\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ComponentName sourceClass = getIntent().getParcelableExtra(Intent.EXTRA_COMPONENT_NAME);\n        switch (sourceClass.getClassName()) {\n            case DIRAC_TILE:\n                openActivitySafely(new Intent(this, DiracActivity.class));\n                break;\n            default:\n                finish();\n                break;\n        }\n    }\n\n    private void openActivitySafely(Intent dest) {", "        try {\n            dest.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_TASK_ON_HOME);\n            finish();\n            startActivity(dest);\n        } catch (ActivityNotFoundException e) {\n            Log.e(TAG, \"No activity found for \" + dest);\n            finish();\n        }\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/BootCompletedReceiver.java", "chunked_list": ["/*\n * Copyright (C) 2015 The CyanogenMod Project\n *               2017-2019 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *", " *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings;", "\npackage org.lineageos.settings;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.util.Log;\n\nimport org.lineageos.settings.dirac.DiracUtils;", "\nimport org.lineageos.settings.dirac.DiracUtils;\nimport org.lineageos.settings.utils.FileUtils;\nimport org.lineageos.settings.thermal.ThermalUtils;\n\npublic class BootCompletedReceiver extends BroadcastReceiver {\n    private static final boolean DEBUG = false;\n    private static final String TAG = \"XiaomiParts\";\n\n    @Override\n    public void onReceive(final Context context, Intent intent) {", "    public void onReceive(final Context context, Intent intent) {\n        if (!intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {\n            return;\n        }\n        if (DEBUG)\n            Log.d(TAG, \"Received boot completed intent\");\n        try {\n            DiracUtils.getInstance(context);\n        } catch (Exception e) {\n            Log.d(TAG, \"Dirac is not present in system\");\n        }\n        ThermalUtils.initialize(context);\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/dirac/DiracUtils.java", "chunked_list": ["/*\n * Copyright (C) 2018,2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.dirac;\n", "package org.lineageos.settings.dirac;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Handler;\nimport android.os.UserHandle;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.media.AudioManager;", "import android.view.KeyEvent;\nimport android.media.AudioManager;\nimport android.media.session.MediaController;\nimport android.media.session.MediaSessionManager;\nimport android.media.session.PlaybackState;\nimport android.preference.PreferenceManager;\nimport java.util.List;\n\npublic class DiracUtils {\n\n    private static DiracUtils mInstance;\n    private DiracSound mDiracSound;\n    private MediaSessionManager mMediaSessionManager;\n    private Handler mHandler = new Handler();\n    private Context mContext;\n\n    public DiracUtils(Context context) {\n        mContext = context;\n        mMediaSessionManager = (MediaSessionManager) context.getSystemService(Context.MEDIA_SESSION_SERVICE);\n        mDiracSound = new DiracSound(0, 0);\n\n        // Restore selected scene\n        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n        String scene = sharedPrefs.getString(DiracSettingsFragment.PREF_SCENE, \"4\" /* smart */);\n        setScenario(Integer.parseInt(scene));\n    }\n", "public class DiracUtils {\n\n    private static DiracUtils mInstance;\n    private DiracSound mDiracSound;\n    private MediaSessionManager mMediaSessionManager;\n    private Handler mHandler = new Handler();\n    private Context mContext;\n\n    public DiracUtils(Context context) {\n        mContext = context;\n        mMediaSessionManager = (MediaSessionManager) context.getSystemService(Context.MEDIA_SESSION_SERVICE);\n        mDiracSound = new DiracSound(0, 0);\n\n        // Restore selected scene\n        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n        String scene = sharedPrefs.getString(DiracSettingsFragment.PREF_SCENE, \"4\" /* smart */);\n        setScenario(Integer.parseInt(scene));\n    }\n", "    public static synchronized DiracUtils getInstance(Context context) {\n        if (mInstance == null) {\n            mInstance = new DiracUtils(context);\n        }\n\n        return mInstance;\n    }\n\n    private void triggerPlayPause(MediaController controller) {\n        long when = SystemClock.uptimeMillis();\n        final KeyEvent evDownPause = new KeyEvent(when, when, KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_MEDIA_PAUSE, 0);\n        final KeyEvent evUpPause = KeyEvent.changeAction(evDownPause, KeyEvent.ACTION_UP);\n        final KeyEvent evDownPlay = new KeyEvent(when, when, KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_MEDIA_PLAY, 0);\n        final KeyEvent evUpPlay = KeyEvent.changeAction(evDownPlay, KeyEvent.ACTION_UP);\n        mHandler.post(new Runnable() {\n            @Override", "            public void run() {\n                controller.dispatchMediaButtonEvent(evDownPause);\n            }\n        });\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                controller.dispatchMediaButtonEvent(evUpPause);\n            }\n        }, 20);\n        mHandler.postDelayed(new Runnable() {\n            @Override", "            public void run() {\n                controller.dispatchMediaButtonEvent(evDownPlay);\n            }\n        }, 1000);\n        mHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                controller.dispatchMediaButtonEvent(evUpPlay);\n            }\n        }, 1020);\n    }\n\n    private int getMediaControllerPlaybackState(MediaController controller) {", "        if (controller != null) {\n            final PlaybackState playbackState = controller.getPlaybackState();\n            if (playbackState != null) {\n                return playbackState.getState();\n            }\n        }\n        return PlaybackState.STATE_NONE;\n    }\n\n    private void refreshPlaybackIfNecessary(){\n        if (mMediaSessionManager == null) return;\n\n        final List<MediaController> sessions\n                = mMediaSessionManager.getActiveSessionsForUser(\n                null, UserHandle.ALL);", "        if (mMediaSessionManager == null) return;\n\n        final List<MediaController> sessions\n                = mMediaSessionManager.getActiveSessionsForUser(\n                null, UserHandle.ALL);\n        for (MediaController aController : sessions) {\n            if (PlaybackState.STATE_PLAYING ==\n                    getMediaControllerPlaybackState(aController)) {\n                triggerPlayPause(aController);\n                break;\n            }\n        }\n    }\n", "    public void setEnabled(boolean enable) {\n        mDiracSound.setEnabled(enable);\n        mDiracSound.setMusic(enable ? 1 : 0);\n        if (enable) {\n            refreshPlaybackIfNecessary();\n        }\n    }\n\n    public boolean isDiracEnabled() {\n        return mDiracSound != null && mDiracSound.getMusic() == 1;\n    }\n", "    public boolean isDiracEnabled() {\n        return mDiracSound != null && mDiracSound.getMusic() == 1;\n    }\n\n    public void setLevel(String preset) {\n        String[] level = preset.split(\"\\\\s*,\\\\s*\");\n\n        for (int band = 0; band <= level.length - 1; band++) {\n            mDiracSound.setLevel(band, Float.valueOf(level[band]));\n        }\n    }\n", "    public void setHeadsetType(int paramInt) {\n        mDiracSound.setHeadsetType(paramInt);\n    }\n\n    public boolean getHifiMode() {\n        AudioManager audioManager = mContext.getSystemService(AudioManager.class);\n        return audioManager.getParameters(\"hifi_mode\").contains(\"true\");\n    }\n\n    public void setHifiMode(int paramInt) {\n        AudioManager audioManager = mContext.getSystemService(AudioManager.class);\n        audioManager.setParameters(\"hifi_mode=\" + (paramInt == 1 ? true : false));\n        mDiracSound.setHifiMode(paramInt);\n    }\n", "    public void setHifiMode(int paramInt) {\n        AudioManager audioManager = mContext.getSystemService(AudioManager.class);\n        audioManager.setParameters(\"hifi_mode=\" + (paramInt == 1 ? true : false));\n        mDiracSound.setHifiMode(paramInt);\n    }\n\n    public void setScenario(int sceneInt) {\n        mDiracSound.setScenario(sceneInt);\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/dirac/DiracTileService.java", "chunked_list": ["package org.lineageos.settings.dirac;\n\nimport android.content.Context;\nimport android.service.quicksettings.Tile;\nimport android.service.quicksettings.TileService;\n\nimport org.lineageos.settings.R;\n\npublic class DiracTileService extends TileService {\n\n    private DiracUtils mDiracUtils;\n\n    @Override", "public class DiracTileService extends TileService {\n\n    private DiracUtils mDiracUtils;\n\n    @Override\n    public void onStartListening() {\n        mDiracUtils = DiracUtils.getInstance(getApplicationContext());\n\n        Tile tile = getQsTile();\n        if (mDiracUtils.isDiracEnabled()) {\n            tile.setState(Tile.STATE_ACTIVE);\n        } else {\n            tile.setState(Tile.STATE_INACTIVE);\n        }\n\n        tile.updateTile();\n        super.onStartListening();\n    }\n\n    @Override", "        if (mDiracUtils.isDiracEnabled()) {\n            tile.setState(Tile.STATE_ACTIVE);\n        } else {\n            tile.setState(Tile.STATE_INACTIVE);\n        }\n\n        tile.updateTile();\n        super.onStartListening();\n    }\n\n    @Override", "    public void onClick() {\n        Tile tile = getQsTile();\n        if (mDiracUtils.isDiracEnabled()) {\n            mDiracUtils.setEnabled(false);\n            tile.setState(Tile.STATE_INACTIVE);\n        } else {\n            mDiracUtils.setEnabled(true);\n            tile.setState(Tile.STATE_ACTIVE);\n        }\n        tile.updateTile();\n        super.onClick();\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/dirac/DiracActivity.java", "chunked_list": ["/*\n * Copyright (C) 2018 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.dirac;\n", "package org.lineageos.settings.dirac;\n\nimport android.os.Bundle;\n\nimport com.android.settingslib.collapsingtoolbar.CollapsingToolbarBaseActivity;\nimport com.android.settingslib.widget.R;\n\npublic class DiracActivity extends CollapsingToolbarBaseActivity {\n\n    private static final String TAG_DIRAC = \"dirac\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getFragmentManager().beginTransaction().replace(R.id.content_frame,\n                new DiracSettingsFragment(), TAG_DIRAC).commit();\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/dirac/DiracSettingsFragment.java", "chunked_list": ["/*\n * Copyright (C) 2018,2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.dirac;\n", "package org.lineageos.settings.dirac;\n\nimport android.os.Bundle;\nimport android.widget.Switch;\nimport android.util.Log;\n\nimport androidx.preference.ListPreference;\nimport androidx.preference.Preference;\nimport androidx.preference.Preference.OnPreferenceChangeListener;\nimport androidx.preference.PreferenceFragment;", "import androidx.preference.Preference.OnPreferenceChangeListener;\nimport androidx.preference.PreferenceFragment;\nimport androidx.preference.SwitchPreference;\n\nimport com.android.settingslib.widget.MainSwitchPreference;\nimport com.android.settingslib.widget.OnMainSwitchChangeListener;\n\nimport org.lineageos.settings.R;\n\npublic class DiracSettingsFragment extends PreferenceFragment implements\n        OnPreferenceChangeListener, OnMainSwitchChangeListener {\n\n    private static final String TAG = \"DiracSettingsFragment\";\n    private static final String PREF_ENABLE = \"dirac_enable\";\n    private static final String PREF_HEADSET = \"dirac_headset_pref\";\n    private static final String PREF_HIFI = \"dirac_hifi_pref\";\n    private static final String PREF_PRESET = \"dirac_preset_pref\";\n", "\npublic class DiracSettingsFragment extends PreferenceFragment implements\n        OnPreferenceChangeListener, OnMainSwitchChangeListener {\n\n    private static final String TAG = \"DiracSettingsFragment\";\n    private static final String PREF_ENABLE = \"dirac_enable\";\n    private static final String PREF_HEADSET = \"dirac_headset_pref\";\n    private static final String PREF_HIFI = \"dirac_hifi_pref\";\n    private static final String PREF_PRESET = \"dirac_preset_pref\";\n\n    public static final String PREF_SCENE = \"scenario_selection\";\n\n    private MainSwitchPreference mSwitchBar;\n\n    private ListPreference mHeadsetType;\n    private ListPreference mPreset;\n    private ListPreference mScenes;\n    private SwitchPreference mHifi;\n    private DiracUtils mDiracUtils;\n\n    @Override", "    public static final String PREF_SCENE = \"scenario_selection\";\n\n    private MainSwitchPreference mSwitchBar;\n\n    private ListPreference mHeadsetType;\n    private ListPreference mPreset;\n    private ListPreference mScenes;\n    private SwitchPreference mHifi;\n    private DiracUtils mDiracUtils;\n\n    @Override", "    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n        addPreferencesFromResource(R.xml.dirac_settings);\n\n        try {\n            mDiracUtils = DiracUtils.getInstance(getActivity());\n        } catch (Exception e) {\n            Log.d(TAG, \"Dirac is not present in system\");\n        }\n\n        boolean enhancerEnabled = mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;\n        mSwitchBar = (MainSwitchPreference) findPreference(PREF_ENABLE);\n        mSwitchBar.addOnSwitchChangeListener(this);\n        mSwitchBar.setChecked(enhancerEnabled);\n\n        mHeadsetType = (ListPreference) findPreference(PREF_HEADSET);\n        mHeadsetType.setOnPreferenceChangeListener(this);\n\n        mPreset = (ListPreference) findPreference(PREF_PRESET);\n        mPreset.setOnPreferenceChangeListener(this);\n\n        mHifi = (SwitchPreference) findPreference(PREF_HIFI);\n        mHifi.setOnPreferenceChangeListener(this);\n\n        mScenes = (ListPreference) findPreference(PREF_SCENE);\n        mScenes.setOnPreferenceChangeListener(this);\n\n        mHeadsetType.setEnabled(enhancerEnabled);\n        mPreset.setEnabled(enhancerEnabled);\n        mHifi.setEnabled(enhancerEnabled);\n        mScenes.setEnabled(enhancerEnabled);\n    }\n\n    @Override", "    public boolean onPreferenceChange(Preference preference, Object newValue) {\n        if (mDiracUtils == null) return false;\n        switch (preference.getKey()) {\n            case PREF_HEADSET:\n                mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));\n                return true;\n            case PREF_HIFI:\n                mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);\n                return true;\n            case PREF_PRESET:\n                mDiracUtils.setLevel((String) newValue);\n                return true;\n            case PREF_SCENE:\n                mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    @Override", "    public void onSwitchChanged(Switch switchView, boolean isChecked) {\n        mSwitchBar.setChecked(isChecked);\n\n        if (mDiracUtils == null) return;\n        mDiracUtils.setEnabled(isChecked);\n        mHifi.setEnabled(isChecked);\n        mHeadsetType.setEnabled(isChecked);\n        mPreset.setEnabled(isChecked);\n        mScenes.setEnabled(isChecked);\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/dirac/DiracSound.java", "chunked_list": ["/*\n * Copyright (C) 2018 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.dirac;\n", "package org.lineageos.settings.dirac;\n\nimport android.media.audiofx.AudioEffect;\n\nimport java.util.UUID;\n\npublic class DiracSound extends AudioEffect {\n\n    private static final int DIRACSOUND_PARAM_HEADSET_TYPE = 1;\n    private static final int DIRACSOUND_PARAM_EQ_LEVEL = 2;\n    private static final int DIRACSOUND_PARAM_MUSIC = 4;\n    private static final int DIRACSOUND_PARAM_HIFI = 8;\n    private static final int DIRACSOUND_PARAM_SCENE = 15;\n\n    private static final UUID EFFECT_TYPE_DIRACSOUND =\n            UUID.fromString(\"5b8e36a5-144a-4c38-b1d7-0002a5d5c51b\");\n    private static final String TAG = \"DiracSound\";\n\n    public DiracSound(int priority, int audioSession) {\n        super(EFFECT_TYPE_NULL, EFFECT_TYPE_DIRACSOUND, priority, audioSession);\n    }\n", "    public int getMusic() throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        int[] value = new int[1];\n        checkStatus(getParameter(DIRACSOUND_PARAM_MUSIC, value));\n        return value[0];\n    }\n\n    public void setMusic(int enable) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(DIRACSOUND_PARAM_MUSIC, enable));\n    }\n", "    public void setMusic(int enable) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(DIRACSOUND_PARAM_MUSIC, enable));\n    }\n\n    public void setHeadsetType(int type) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(DIRACSOUND_PARAM_HEADSET_TYPE, type));\n    }\n", "    public void setLevel(int band, float level) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(new int[]{DIRACSOUND_PARAM_EQ_LEVEL, band},\n                String.valueOf(level).getBytes()));\n    }\n\n    public void setHifiMode(int mode) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(DIRACSOUND_PARAM_HIFI, mode));\n    }\n", "    public void setScenario(int scene) throws IllegalStateException,\n            IllegalArgumentException, UnsupportedOperationException,\n            RuntimeException {\n        checkStatus(setParameter(DIRACSOUND_PARAM_SCENE, scene));\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/utils/FileUtils.java", "chunked_list": ["/*\n * Copyright (C) 2016 The CyanogenMod Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.utils;\n", "package org.lineageos.settings.utils;\n\nimport android.util.Log;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;", "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic final class FileUtils {\n    private static final String TAG = \"FileUtils\";\n\n    private FileUtils() {\n        // This class is not supposed to be instantiated\n    }\n\n    /**\n     * Reads the first line of text from the given file.\n     * Reference {@link BufferedReader#readLine()} for clarification on what a line is\n     *\n     * @return the read line contents, or null on failure\n     */", "    public static String readOneLine(String fileName) {\n        String line = null;\n        BufferedReader reader = null;\n\n        try {\n            reader = new BufferedReader(new FileReader(fileName), 512);\n            line = reader.readLine();\n        } catch (FileNotFoundException e) {\n            Log.w(TAG, \"No such file \" + fileName + \" for reading\", e);\n        } catch (IOException e) {\n            Log.e(TAG, \"Could not read from file \" + fileName, e);\n        } finally {", "            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                // Ignored, not much we can do anyway\n            }\n        }\n\n        return line;\n    }\n\n    /**\n     * Writes the given value into the given file\n     *\n     * @return true on success, false on failure\n     */", "    public static boolean writeLine(String fileName, String value) {\n        BufferedWriter writer = null;\n\n        try {\n            writer = new BufferedWriter(new FileWriter(fileName));\n            writer.write(value);\n        } catch (FileNotFoundException e) {\n            Log.w(TAG, \"No such file \" + fileName + \" for writing\", e);\n            return false;\n        } catch (IOException e) {\n            Log.e(TAG, \"Could not write to file \" + fileName, e);\n            return false;\n        } finally {", "            try {\n                if (writer != null) {\n                    writer.close();\n                }\n            } catch (IOException e) {\n                // Ignored, not much we can do anyway\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks whether the given file exists\n     *\n     * @return true if exists, false if not\n     */", "    public static boolean fileExists(String fileName) {\n        final File file = new File(fileName);\n        return file.exists();\n    }\n\n    /**\n     * Checks whether the given file is readable\n     *\n     * @return true if readable, false if not\n     */\n    public static boolean isFileReadable(String fileName) {\n        final File file = new File(fileName);\n        return file.exists() && file.canRead();\n    }\n\n    /**\n     * Checks whether the given file is writable\n     *\n     * @return true if writable, false if not\n     */", "    public static boolean isFileReadable(String fileName) {\n        final File file = new File(fileName);\n        return file.exists() && file.canRead();\n    }\n\n    /**\n     * Checks whether the given file is writable\n     *\n     * @return true if writable, false if not\n     */\n    public static boolean isFileWritable(String fileName) {\n        final File file = new File(fileName);\n        return file.exists() && file.canWrite();\n    }\n\n    /**\n     * Deletes an existing file\n     *\n     * @return true if the delete was successful, false if not\n     */", "    public static boolean isFileWritable(String fileName) {\n        final File file = new File(fileName);\n        return file.exists() && file.canWrite();\n    }\n\n    /**\n     * Deletes an existing file\n     *\n     * @return true if the delete was successful, false if not\n     */\n    public static boolean delete(String fileName) {\n        final File file = new File(fileName);\n        boolean ok = false;", "    public static boolean delete(String fileName) {\n        final File file = new File(fileName);\n        boolean ok = false;\n        try {\n            ok = file.delete();\n        } catch (SecurityException e) {\n            Log.w(TAG, \"SecurityException trying to delete \" + fileName, e);\n        }\n        return ok;\n    }\n\n    /**\n     * Renames an existing file\n     *\n     * @return true if the rename was successful, false if not\n     */", "    public static boolean rename(String srcPath, String dstPath) {\n        final File srcFile = new File(srcPath);\n        final File dstFile = new File(dstPath);\n        boolean ok = false;\n        try {\n            ok = srcFile.renameTo(dstFile);\n        } catch (SecurityException e) {\n            Log.w(TAG, \"SecurityException trying to rename \" + srcPath + \" to \" + dstPath, e);\n        } catch (NullPointerException e) {\n            Log.e(TAG, \"NullPointerException trying to rename \" + srcPath + \" to \" + dstPath, e);\n        }\n        return ok;\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/thermal/ThermalSettingsFragment.java", "chunked_list": ["/**\n * Copyright (C) 2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.lineageos.settings.thermal;\n\nimport android.annotation.Nullable;", "\nimport android.annotation.Nullable;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.TypedValue;", "import android.text.TextUtils;\nimport android.util.TypedValue;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;", "import android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.SectionIndexer;\nimport android.widget.Spinner;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.preference.PreferenceFragment;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.LinearLayoutManager;", "import androidx.recyclerview.widget.RecyclerView;\nimport androidx.recyclerview.widget.LinearLayoutManager;\n\nimport com.android.settingslib.applications.ApplicationsState;\n\nimport org.lineageos.settings.R;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;", "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ThermalSettingsFragment extends PreferenceFragment\n        implements ApplicationsState.Callbacks {\n\n    private AllPackagesAdapter mAllPackagesAdapter;\n    private ApplicationsState mApplicationsState;\n    private ApplicationsState.Session mSession;\n    private ActivityFilter mActivityFilter;\n\n    private ThermalUtils mThermalUtils;\n    private RecyclerView mAppsRecyclerView;\n\n    @Override", "    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mApplicationsState = ApplicationsState.getInstance(getActivity().getApplication());\n        mSession = mApplicationsState.newSession(this);\n        mSession.onResume();\n        mActivityFilter = new ActivityFilter(getActivity().getPackageManager());\n\n        mAllPackagesAdapter = new AllPackagesAdapter(getActivity());\n\n        mThermalUtils = new ThermalUtils(getActivity());\n    }\n\n    @Override", "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.thermal_layout, container, false);\n    }\n\n    @Override\n    public void onViewCreated(final View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        mAppsRecyclerView = view.findViewById(R.id.thermal_rv_view);\n        mAppsRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        mAppsRecyclerView.setAdapter(mAllPackagesAdapter);\n    }\n\n    @Override", "    public void onResume() {\n        super.onResume();\n        rebuild();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n\n        mSession.onPause();\n        mSession.onDestroy();\n    }\n\n    @Override", "    public void onPackageListChanged() {\n        mActivityFilter.updateLauncherInfoList();\n        rebuild();\n    }\n\n    @Override\n    public void onRebuildComplete(ArrayList<ApplicationsState.AppEntry> entries) {\n        if (entries != null) {\n            handleAppEntries(entries);\n            mAllPackagesAdapter.notifyDataSetChanged();\n        }\n    }\n\n    @Override", "    public void onLoadEntriesCompleted() {\n        rebuild();\n    }\n\n    @Override\n    public void onAllSizesComputed() {\n    }\n\n    @Override\n    public void onLauncherInfoChanged() {\n    }\n\n    @Override", "    public void onLauncherInfoChanged() {\n    }\n\n    @Override\n    public void onPackageIconChanged() {\n    }\n\n    @Override\n    public void onPackageSizeChanged(String packageName) {\n    }\n\n    @Override", "    public void onPackageSizeChanged(String packageName) {\n    }\n\n    @Override\n    public void onRunningStateChanged(boolean running) {\n    }\n\n    private void handleAppEntries(List<ApplicationsState.AppEntry> entries) {\n        final ArrayList<String> sections = new ArrayList<String>();\n        final ArrayList<Integer> positions = new ArrayList<Integer>();\n        final PackageManager pm = getActivity().getPackageManager();\n        String lastSectionIndex = null;\n        int offset = 0;\n", "        for (int i = 0; i < entries.size(); i++) {\n            final ApplicationInfo info = entries.get(i).info;\n            final String label = (String) info.loadLabel(pm);\n            final String sectionIndex;\n\n            if (!info.enabled) {\n                sectionIndex = \"--\"; // XXX\n            } else if (TextUtils.isEmpty(label)) {\n                sectionIndex = \"\";\n            } else {\n                sectionIndex = label.substring(0, 1).toUpperCase();\n            }\n", "            if (lastSectionIndex == null ||\n                    !TextUtils.equals(sectionIndex, lastSectionIndex)) {\n                sections.add(sectionIndex);\n                positions.add(offset);\n                lastSectionIndex = sectionIndex;\n            }\n\n            offset++;\n        }\n\n        mAllPackagesAdapter.setEntries(entries, sections, positions);\n    }\n\n    private void rebuild() {\n        mSession.rebuild(mActivityFilter, ApplicationsState.ALPHA_COMPARATOR);\n    }\n\n    private int getStateDrawable(int state) {\n        switch (state) {\n            case ThermalUtils.STATE_BENCHMARK:\n                return R.drawable.ic_thermal_benchmark;\n            case ThermalUtils.STATE_BROWSER:\n                return R.drawable.ic_thermal_browser;\n            case ThermalUtils.STATE_CAMERA:\n                return R.drawable.ic_thermal_camera;\n            case ThermalUtils.STATE_DIALER:\n                return R.drawable.ic_thermal_dialer;\n            case ThermalUtils.STATE_GAMING:\n                return R.drawable.ic_thermal_gaming;\n            case ThermalUtils.STATE_STREAMING:\n                return R.drawable.ic_thermal_streaming;\n            case ThermalUtils.STATE_DEFAULT:\n            default:\n                return R.drawable.ic_thermal_default;\n        }\n    }\n\n    private class ViewHolder extends RecyclerView.ViewHolder {\n        private TextView title;\n        private Spinner mode;\n        private ImageView icon;\n        private View rootView;\n        private ImageView stateIcon;\n\n        private ViewHolder(View view) {\n            super(view);\n            this.title = view.findViewById(R.id.app_name);\n            this.mode = view.findViewById(R.id.app_mode);\n            this.icon = view.findViewById(R.id.app_icon);\n            this.stateIcon = view.findViewById(R.id.state);\n            this.rootView = view;\n\n            view.setTag(this);\n        }\n    }\n\n    private class ModeAdapter extends BaseAdapter {\n\n        private final LayoutInflater inflater;\n        private final int[] items = {\n                R.string.thermal_default,\n                R.string.thermal_benchmark,\n                R.string.thermal_browser,\n                R.string.thermal_camera,\n                R.string.thermal_dialer,\n                R.string.thermal_gaming,\n                R.string.thermal_streaming\n        };\n\n        private ModeAdapter(Context context) {\n            inflater = LayoutInflater.from(context);\n        }\n\n        @Override", "        public int getCount() {\n            return items.length;\n        }\n\n        @Override\n        public Object getItem(int position) {\n            return items[position];\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return 0;\n        }\n\n        @Override", "        public long getItemId(int position) {\n            return 0;\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n            TextView view;\n            if (convertView != null) {\n                view = (TextView) convertView;\n            } else {\n                view = (TextView) inflater.inflate(android.R.layout.simple_spinner_dropdown_item,\n                        parent, false);\n            }\n\n            view.setText(items[position]);\n            view.setTextSize(14f);\n            return view;\n        }\n    }\n\n    private class AllPackagesAdapter extends RecyclerView.Adapter<ViewHolder>\n            implements AdapterView.OnItemSelectedListener, SectionIndexer {\n\n        private List<ApplicationsState.AppEntry> mEntries = new ArrayList<>();\n        private String[] mSections;\n        private int[] mPositions;\n\n        public AllPackagesAdapter(Context context) {\n            mActivityFilter = new ActivityFilter(context.getPackageManager());\n        }\n\n        @Override", "        public int getItemCount() {\n            return mEntries.size();\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return mEntries.get(position).id;\n        }\n\n        @NonNull\n        @Override", "        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n            return new ViewHolder(LayoutInflater.from(parent.getContext())\n                    .inflate(R.layout.thermal_list_item, parent, false));\n        }\n\n        @Override\n        public void onBindViewHolder(ViewHolder holder, int position) {\n            Context context = holder.itemView.getContext();\n            ApplicationsState.AppEntry entry = mEntries.get(position);\n            if (entry == null) {\n                return;\n            }\n\n            holder.mode.setAdapter(new ModeAdapter(context));\n            holder.mode.setOnItemSelectedListener(this);\n            holder.title.setText(entry.label);\n            holder.title.setOnClickListener(v -> holder.mode.performClick());\n            mApplicationsState.ensureIcon(entry);\n            holder.icon.setImageDrawable(entry.icon);\n            int packageState = mThermalUtils.getStateForPackage(entry.info.packageName);\n            holder.mode.setSelection(packageState, false);\n            holder.mode.setTag(entry);\n            holder.stateIcon.setImageResource(getStateDrawable(packageState));\n            holder.stateIcon.setOnClickListener(v -> holder.mode.performClick());\n        }\n\n        private void setEntries(List<ApplicationsState.AppEntry> entries,\n                List<String> sections, List<Integer> positions) {\n            mEntries = entries;\n            mSections = sections.toArray(new String[sections.size()]);\n            mPositions = new int[positions.size()];", "            if (entry == null) {\n                return;\n            }\n\n            holder.mode.setAdapter(new ModeAdapter(context));\n            holder.mode.setOnItemSelectedListener(this);\n            holder.title.setText(entry.label);\n            holder.title.setOnClickListener(v -> holder.mode.performClick());\n            mApplicationsState.ensureIcon(entry);\n            holder.icon.setImageDrawable(entry.icon);\n            int packageState = mThermalUtils.getStateForPackage(entry.info.packageName);\n            holder.mode.setSelection(packageState, false);\n            holder.mode.setTag(entry);\n            holder.stateIcon.setImageResource(getStateDrawable(packageState));\n            holder.stateIcon.setOnClickListener(v -> holder.mode.performClick());\n        }\n\n        private void setEntries(List<ApplicationsState.AppEntry> entries,\n                List<String> sections, List<Integer> positions) {\n            mEntries = entries;\n            mSections = sections.toArray(new String[sections.size()]);\n            mPositions = new int[positions.size()];", "            for (int i = 0; i < positions.size(); i++) {\n                mPositions[i] = positions.get(i);\n            }\n            notifyDataSetChanged();\n        }\n\n\n        @Override\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n            final ApplicationsState.AppEntry entry = (ApplicationsState.AppEntry) parent.getTag();\n            int currentState = mThermalUtils.getStateForPackage(entry.info.packageName);", "        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n            final ApplicationsState.AppEntry entry = (ApplicationsState.AppEntry) parent.getTag();\n            int currentState = mThermalUtils.getStateForPackage(entry.info.packageName);\n            if (currentState != position) {\n                mThermalUtils.writePackage(entry.info.packageName, position);\n                notifyDataSetChanged();\n            }\n        }\n\n        @Override\n        public void onNothingSelected(AdapterView<?> parent) {\n        }\n\n        @Override", "        public void onNothingSelected(AdapterView<?> parent) {\n        }\n\n        @Override\n        public int getPositionForSection(int section) {\n            if (section < 0 || section >= mSections.length) {\n                return -1;\n            }\n\n            return mPositions[section];\n        }\n\n        @Override", "        public int getSectionForPosition(int position) {\n            if (position < 0 || position >= getItemCount()) {\n                return -1;\n            }\n\n            final int index = Arrays.binarySearch(mPositions, position);\n\n            /*\n             * Consider this example: section positions are 0, 3, 5; the supplied\n             * position is 4. The section corresponding to position 4 starts at\n             * position 3, so the expected return value is 1. Binary search will not\n             * find 4 in the array and thus will return -insertPosition-1, i.e. -3.\n             * To get from that number to the expected value of 1 we need to negate\n             * and subtract 2.\n             */\n            return index >= 0 ? index : -index - 2;\n        }\n\n        @Override\n        public Object[] getSections() {\n            return mSections;\n        }\n    }\n\n    private class ActivityFilter implements ApplicationsState.AppFilter {\n\n        private final PackageManager mPackageManager;\n        private final List<String> mLauncherResolveInfoList = new ArrayList<String>();\n\n        private ActivityFilter(PackageManager packageManager) {\n            this.mPackageManager = packageManager;\n\n            updateLauncherInfoList();\n        }\n", "        public void updateLauncherInfoList() {\n            Intent i = new Intent(Intent.ACTION_MAIN);\n            i.addCategory(Intent.CATEGORY_LAUNCHER);\n            List<ResolveInfo> resolveInfoList = mPackageManager.queryIntentActivities(i, 0);\n\n            synchronized (mLauncherResolveInfoList) {\n                mLauncherResolveInfoList.clear();\n                for (ResolveInfo ri : resolveInfoList) {\n                    mLauncherResolveInfoList.add(ri.activityInfo.packageName);\n                }\n            }\n        }\n\n        @Override", "        public void init() {\n        }\n\n        @Override\n        public boolean filterApp(ApplicationsState.AppEntry entry) {\n            boolean show = !mAllPackagesAdapter.mEntries.contains(entry.info.packageName);\n            if (show) {\n                synchronized (mLauncherResolveInfoList) {\n                    show = mLauncherResolveInfoList.contains(entry.info.packageName);\n                }\n            }\n            return show;\n        }\n    }\n\n    @Override", "    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == android.R.id.home) {\n            getActivity().onBackPressed();\n            return true;\n        }\n        return false;\n    }\n}"]}
{"filename": "parts/src/org/lineageos/settings/thermal/ThermalService.java", "chunked_list": ["/*\n * Copyright (C) 2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.thermal;\n", "package org.lineageos.settings.thermal;\n\nimport android.app.ActivityManager;\nimport android.app.ActivityTaskManager;\nimport android.app.ActivityTaskManager.RootTaskInfo;\nimport android.app.IActivityTaskManager;\nimport android.app.Service;\nimport android.app.TaskStackListener;\nimport android.app.TaskStackListener;\nimport android.content.BroadcastReceiver;", "import android.app.TaskStackListener;\nimport android.content.BroadcastReceiver;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.IBinder;\nimport android.os.RemoteException;\nimport android.util.Log;\n\npublic class ThermalService extends Service {\n\n    private static final String TAG = \"ThermalService\";\n    private static final boolean DEBUG = false;\n\n    private String mPreviousApp;\n    private ThermalUtils mThermalUtils;\n\n    private IActivityTaskManager mActivityTaskManager;\n\n    private final TaskStackListener mTaskListener = new TaskStackListener() {\n        @Override", "import android.util.Log;\n\npublic class ThermalService extends Service {\n\n    private static final String TAG = \"ThermalService\";\n    private static final boolean DEBUG = false;\n\n    private String mPreviousApp;\n    private ThermalUtils mThermalUtils;\n\n    private IActivityTaskManager mActivityTaskManager;\n\n    private final TaskStackListener mTaskListener = new TaskStackListener() {\n        @Override", "        public void onTaskStackChanged() {\n            try {\n                final RootTaskInfo info = mActivityTaskManager.getFocusedRootTaskInfo();\n                if (info == null || info.topActivity == null) {\n                    return;\n                }\n\n                String foregroundApp = info.topActivity.getPackageName();\n                if (!foregroundApp.equals(mPreviousApp)) {\n                    mThermalUtils.setThermalProfile(foregroundApp);\n                    mPreviousApp = foregroundApp;\n                }\n            } catch (Exception e) {\n            }\n        }\n    };\n\n    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {\n        @Override", "                if (!foregroundApp.equals(mPreviousApp)) {\n                    mThermalUtils.setThermalProfile(foregroundApp);\n                    mPreviousApp = foregroundApp;\n                }\n            } catch (Exception e) {\n            }\n        }\n    };\n\n    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {\n        @Override", "        public void onReceive(Context context, Intent intent) {\n            mPreviousApp = \"\";\n            mThermalUtils.setDefaultThermalProfile();\n        }\n    };\n\n    @Override\n    public void onCreate() {\n        if (DEBUG) Log.d(TAG, \"Creating service\");\n        mThermalUtils = new ThermalUtils(this);\n        try {\n            mActivityTaskManager = ActivityTaskManager.getService();\n            mActivityTaskManager.registerTaskStackListener(mTaskListener);\n        } catch (RemoteException e) {\n            // Do nothing\n        }\n        registerReceiver();\n        super.onCreate();\n    }\n\n    @Override", "        if (DEBUG) Log.d(TAG, \"Creating service\");\n        mThermalUtils = new ThermalUtils(this);\n        try {\n            mActivityTaskManager = ActivityTaskManager.getService();\n            mActivityTaskManager.registerTaskStackListener(mTaskListener);\n        } catch (RemoteException e) {\n            // Do nothing\n        }\n        registerReceiver();\n        super.onCreate();\n    }\n\n    @Override", "    public void onDestroy() {\n        if (DEBUG) Log.d(TAG, \"Destroying service\");\n        unregisterReceiver();\n        try {\n            ActivityTaskManager.getService().unregisterTaskStackListener(mTaskListener);\n        } catch (RemoteException e) {\n            // Do nothing\n        }\n        mThermalUtils.setDefaultThermalProfile();\n        mThermalUtils = null;\n        super.onDestroy();\n    }\n\n    @Override", "    public int onStartCommand(Intent intent, int flags, int startId) {\n        if (DEBUG) Log.d(TAG, \"Starting service\");\n        return START_STICKY;\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    private void registerReceiver() {\n        IntentFilter filter = new IntentFilter();\n        filter.addAction(Intent.ACTION_SCREEN_OFF);\n        this.registerReceiver(mIntentReceiver, filter);\n    }\n\n    private void unregisterReceiver() {\n        this.unregisterReceiver(mIntentReceiver);\n    }\n}"]}
{"filename": "parts/src/org/lineageos/settings/thermal/ThermalSettingsActivity.java", "chunked_list": ["/*\n * Copyright (C) 2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.thermal;\n", "package org.lineageos.settings.thermal;\n\nimport android.os.Bundle;\n\nimport com.android.settingslib.collapsingtoolbar.CollapsingToolbarBaseActivity;\nimport com.android.settingslib.widget.R;\n\npublic class ThermalSettingsActivity extends CollapsingToolbarBaseActivity {\n\n    private static final String TAG_THERMAL = \"thermal\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getFragmentManager().beginTransaction().replace(R.id.content_frame,\n                new ThermalSettingsFragment(), TAG_THERMAL).commit();\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/thermal/ThermalUtils.java", "chunked_list": ["/*\n * Copyright (C) 2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.thermal;\n", "package org.lineageos.settings.thermal;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.UserHandle;\n\nimport androidx.preference.PreferenceManager;\n\nimport org.lineageos.settings.utils.FileUtils;", "\nimport org.lineageos.settings.utils.FileUtils;\n\npublic final class ThermalUtils {\n\n    private static final String THERMAL_CONTROL = \"thermal_control\";\n    private static final String THERMAL_SERVICE = \"thermal_service\";\n\n    protected static final int STATE_DEFAULT = 0;\n    protected static final int STATE_BENCHMARK = 1;\n    protected static final int STATE_BROWSER = 2;\n    protected static final int STATE_CAMERA = 3;\n    protected static final int STATE_DIALER = 4;\n    protected static final int STATE_GAMING = 5;\n    protected static final int STATE_STREAMING = 6;\n\n    private static final String THERMAL_STATE_DEFAULT = \"0\";\n    private static final String THERMAL_STATE_BENCHMARK = \"10\";\n    private static final String THERMAL_STATE_BROWSER = \"11\";\n    private static final String THERMAL_STATE_CAMERA = \"12\";\n    private static final String THERMAL_STATE_DIALER = \"8\";\n    private static final String THERMAL_STATE_GAMING = \"9\";\n    private static final String THERMAL_STATE_STREAMING = \"14\";\n\n    private static final String THERMAL_BENCHMARK = \"thermal.benchmark=\";\n    private static final String THERMAL_BROWSER = \"thermal.browser=\";\n    private static final String THERMAL_CAMERA = \"thermal.camera=\";\n    private static final String THERMAL_DIALER = \"thermal.dialer=\";\n    private static final String THERMAL_GAMING = \"thermal.gaming=\";\n    private static final String THERMAL_STREAMING = \"thermal.streaming=\";\n\n    private static final String THERMAL_SCONFIG = \"/sys/class/thermal/thermal_message/sconfig\";\n\n    private SharedPreferences mSharedPrefs;\n\n    protected ThermalUtils(Context context) {\n        mSharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n    }\n", "    public static void initialize(Context context) {\n        if (isServiceEnabled(context))\n            startService(context);\n        else\n            setDefaultThermalProfile();\n    }\n\n    protected static void startService(Context context) {\n        context.startServiceAsUser(new Intent(context, ThermalService.class),\n                UserHandle.CURRENT);\n        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(THERMAL_SERVICE, \"true\").apply();\n    }\n\n    protected static void stopService(Context context) {\n        context.stopService(new Intent(context, ThermalService.class));\n        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(THERMAL_SERVICE, \"false\").apply();\n    }\n\n    protected static boolean isServiceEnabled(Context context) {\n        return true;\n    }\n\n    private void writeValue(String profiles) {\n        mSharedPrefs.edit().putString(THERMAL_CONTROL, profiles).apply();\n    }\n\n    private String getValue() {\n        String value = mSharedPrefs.getString(THERMAL_CONTROL, null);\n", "        if (value == null || value.isEmpty()) {\n            value = THERMAL_BENCHMARK + \":\" + THERMAL_BROWSER + \":\" + THERMAL_CAMERA + \":\" +\n                    THERMAL_DIALER + \":\" + THERMAL_GAMING + \":\" + THERMAL_STREAMING;\n            writeValue(value);\n        }\n        return value;\n    }\n\n    protected void writePackage(String packageName, int mode) {\n        String value = getValue();\n        value = value.replace(packageName + \",\", \"\");\n        String[] modes = value.split(\":\");\n        String finalString;\n\n        switch (mode) {\n            case STATE_BENCHMARK:\n                modes[0] = modes[0] + packageName + \",\";\n                break;\n            case STATE_BROWSER:\n                modes[1] = modes[1] + packageName + \",\";\n                break;\n            case STATE_CAMERA:\n                modes[2] = modes[2] + packageName + \",\";\n                break;\n            case STATE_DIALER:\n                modes[3] = modes[3] + packageName + \",\";\n                break;\n            case STATE_GAMING:\n                modes[4] = modes[4] + packageName + \",\";\n                break;\n            case STATE_STREAMING:\n                modes[5] = modes[5] + packageName + \",\";\n                break;\n        }\n\n        finalString = modes[0] + \":\" + modes[1] + \":\" + modes[2] + \":\" + modes[3] + \":\" +\n                modes[4] + \":\" + modes[5];\n\n        writeValue(finalString);\n    }\n\n    protected int getStateForPackage(String packageName) {\n        String value = getValue();\n        String[] modes = value.split(\":\");\n        int state = STATE_DEFAULT;", "        if (modes[0].contains(packageName + \",\")) {\n            state = STATE_BENCHMARK;\n        } else if (modes[1].contains(packageName + \",\")) {\n            state = STATE_BROWSER;\n        } else if (modes[2].contains(packageName + \",\")) {\n            state = STATE_CAMERA;\n        } else if (modes[3].contains(packageName + \",\")) {\n            state = STATE_DIALER;\n        } else if (modes[4].contains(packageName + \",\")) {\n            state = STATE_GAMING;\n        } else if (modes[5].contains(packageName + \",\")) {\n            state = STATE_STREAMING;\n        }\n\n        return state;\n    }\n\n    protected static void setDefaultThermalProfile() {\n        FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);\n    }\n\n    protected void setThermalProfile(String packageName) {\n        String value = getValue();\n        String modes[];\n        String state = THERMAL_STATE_DEFAULT;\n", "        } else if (modes[4].contains(packageName + \",\")) {\n            state = STATE_GAMING;\n        } else if (modes[5].contains(packageName + \",\")) {\n            state = STATE_STREAMING;\n        }\n\n        return state;\n    }\n\n    protected static void setDefaultThermalProfile() {\n        FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);\n    }\n\n    protected void setThermalProfile(String packageName) {\n        String value = getValue();\n        String modes[];\n        String state = THERMAL_STATE_DEFAULT;\n", "        if (value != null) {\n            modes = value.split(\":\");\n\n            if (modes[0].contains(packageName + \",\")) {\n                state = THERMAL_STATE_BENCHMARK;\n            } else if (modes[1].contains(packageName + \",\")) {\n                state = THERMAL_STATE_BROWSER;\n            } else if (modes[2].contains(packageName + \",\")) {\n                state = THERMAL_STATE_CAMERA;\n            } else if (modes[3].contains(packageName + \",\")) {\n                state = THERMAL_STATE_DIALER;", "            } else if (modes[3].contains(packageName + \",\")) {\n                state = THERMAL_STATE_DIALER;\n            } else if (modes[4].contains(packageName + \",\")) {\n                state = THERMAL_STATE_GAMING;\n            } else if (modes[5].contains(packageName + \",\")) {\n                state = THERMAL_STATE_STREAMING;\n            }\n        }\n        FileUtils.writeLine(THERMAL_SCONFIG, state);\n    }\n}"]}
{"filename": "parts/src/org/lineageos/settings/widget/SeekBarPreference.java", "chunked_list": ["/*\n * Copyright (C) 2011 The Android Open Source Project\n *               2017-2020 The LineageOS Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *", " *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.widget;", "\npackage org.lineageos.settings.widget;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.drawable.Drawable;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport android.util.AttributeSet;\nimport android.view.KeyEvent;", "import android.util.AttributeSet;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.SeekBar.OnSeekBarChangeListener;\n\nimport androidx.preference.PreferenceViewHolder;\n\nimport com.android.settingslib.RestrictedPreference;", "\nimport com.android.settingslib.RestrictedPreference;\n\nimport org.lineageos.settings.R;\n\n/**\n * Based on android.preference.SeekBarPreference, but uses support preference as base.\n */\npublic class SeekBarPreference extends RestrictedPreference\n        implements OnSeekBarChangeListener, View.OnKeyListener {\n\n    private int mProgress;\n    private int mMax;\n    private boolean mTrackingTouch;\n\n    private ImageView mIconView;\n    private Drawable mIcon;\n\n    public SeekBarPreference(\n            Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n\n        TypedArray a = context.obtainStyledAttributes(\n                attrs, com.android.internal.R.styleable.ProgressBar, defStyleAttr, defStyleRes);\n        setMax(a.getInt(com.android.internal.R.styleable.ProgressBar_max, mMax));\n        a.recycle();\n\n        a = context.obtainStyledAttributes(attrs,\n                com.android.internal.R.styleable.SeekBarPreference, defStyleAttr, defStyleRes);\n        final int layoutResId = a.getResourceId(\n                com.android.internal.R.styleable.SeekBarPreference_layout,\n                com.android.internal.R.layout.preference_widget_seekbar);\n        a.recycle();\n\n        setLayoutResource(layoutResId);\n    }\n\n    public SeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr) {\n        this(context, attrs, defStyleAttr, 0);\n    }\n\n    public SeekBarPreference(Context context, AttributeSet attrs) {\n        this(context, attrs, com.android.internal.R.attr.seekBarPreferenceStyle);\n    }\n\n    public SeekBarPreference(Context context) {\n        this(context, null);\n    }\n\n    @Override", "public class SeekBarPreference extends RestrictedPreference\n        implements OnSeekBarChangeListener, View.OnKeyListener {\n\n    private int mProgress;\n    private int mMax;\n    private boolean mTrackingTouch;\n\n    private ImageView mIconView;\n    private Drawable mIcon;\n\n    public SeekBarPreference(\n            Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n\n        TypedArray a = context.obtainStyledAttributes(\n                attrs, com.android.internal.R.styleable.ProgressBar, defStyleAttr, defStyleRes);\n        setMax(a.getInt(com.android.internal.R.styleable.ProgressBar_max, mMax));\n        a.recycle();\n\n        a = context.obtainStyledAttributes(attrs,\n                com.android.internal.R.styleable.SeekBarPreference, defStyleAttr, defStyleRes);\n        final int layoutResId = a.getResourceId(\n                com.android.internal.R.styleable.SeekBarPreference_layout,\n                com.android.internal.R.layout.preference_widget_seekbar);\n        a.recycle();\n\n        setLayoutResource(layoutResId);\n    }\n\n    public SeekBarPreference(Context context, AttributeSet attrs, int defStyleAttr) {\n        this(context, attrs, defStyleAttr, 0);\n    }\n\n    public SeekBarPreference(Context context, AttributeSet attrs) {\n        this(context, attrs, com.android.internal.R.attr.seekBarPreferenceStyle);\n    }\n\n    public SeekBarPreference(Context context) {\n        this(context, null);\n    }\n\n    @Override", "    public void onBindViewHolder(PreferenceViewHolder view) {\n        super.onBindViewHolder(view);\n\n        mIconView = (ImageView) view.findViewById(R.id.icon);\n        if (mIcon != null) {\n            mIconView.setImageDrawable(mIcon);\n        }\n\n        view.itemView.setOnKeyListener(this);\n        SeekBar seekBar = (SeekBar) view.findViewById(R.id.seekbar);\n        seekBar.setOnSeekBarChangeListener(this);\n        seekBar.setMax(mMax);\n        seekBar.setProgress(mProgress);\n        seekBar.setEnabled(isEnabled());\n    }\n", "    public ImageView getIconView() {\n        return mIconView;\n    }\n\n    public void setIconDrawable(Drawable drawable) {\n        if (mIconView != null) {\n            mIconView.setImageDrawable(drawable);\n        }\n        mIcon = drawable;\n    }\n    @Override\n    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {\n        setProgress(restoreValue ? getPersistedInt(mProgress)\n                : (Integer) defaultValue);\n    }\n\n    @Override\n    protected Object onGetDefaultValue(TypedArray a, int index) {\n        return a.getInt(index, 0);\n    }\n\n    @Override", "    public boolean onKey(View v, int keyCode, KeyEvent event) {\n        if (event.getAction() != KeyEvent.ACTION_DOWN) {\n            return false;\n        }\n\n        SeekBar seekBar = (SeekBar) v.findViewById(R.id.seekbar);\n        if (seekBar == null) {\n            return false;\n        }\n        return seekBar.onKeyDown(keyCode, event);\n    }\n", "    public void setMax(int max) {\n        if (max != mMax) {\n            mMax = max;\n            notifyChanged();\n        }\n    }\n\n    public void setProgress(int progress) {\n        setProgress(progress, true);\n    }\n\n    private void setProgress(int progress, boolean notifyChanged) {", "        if (progress > mMax) {\n            progress = mMax;\n        }\n        if (progress < 0) {\n            progress = 0;\n        }\n        if (progress != mProgress) {\n            mProgress = progress;\n            persistInt(progress);\n            if (notifyChanged) {\n                notifyChanged();\n            }\n        }\n    }\n", "            if (notifyChanged) {\n                notifyChanged();\n            }\n        }\n    }\n\n    public int getProgress() {\n        return mProgress;\n    }\n\n    /**\n     * Persist the seekBar's progress value if callChangeListener\n     * returns true, otherwise set the seekBar's progress to the stored value\n     */\n    void syncProgress(SeekBar seekBar) {\n        int progress = seekBar.getProgress();", "        if (progress != mProgress) {\n            if (callChangeListener(progress)) {\n                setProgress(progress, false);\n            } else {\n                seekBar.setProgress(mProgress);\n            }\n        }\n    }\n\n    @Override\n    public void onProgressChanged(\n            SeekBar seekBar, int progress, boolean fromUser) {", "    public void onProgressChanged(\n            SeekBar seekBar, int progress, boolean fromUser) {\n        if (fromUser && !mTrackingTouch) {\n            syncProgress(seekBar);\n        }\n    }\n\n    @Override\n    public void onStartTrackingTouch(SeekBar seekBar) {\n        mTrackingTouch = true;\n    }\n\n    @Override", "    public void onStartTrackingTouch(SeekBar seekBar) {\n        mTrackingTouch = true;\n    }\n\n    @Override\n    public void onStopTrackingTouch(SeekBar seekBar) {\n        mTrackingTouch = false;\n        if (seekBar.getProgress() != mProgress) {\n            syncProgress(seekBar);\n        }\n    }\n\n    @Override\n    protected Parcelable onSaveInstanceState() {\n        /*\n         * Suppose a client uses this preference type without persisting. We\n         * must save the instance state so it is able to, for example, survive\n         * orientation changes.\n         */\n\n        final Parcelable superState = super.onSaveInstanceState();", "        if (isPersistent()) {\n            // No need to save instance state since it's persistent\n            return superState;\n        }\n\n        // Save the instance state\n        final SavedState myState = new SavedState(superState);\n        myState.progress = mProgress;\n        myState.max = mMax;\n        return myState;\n    }\n\n    @Override\n    protected void onRestoreInstanceState(Parcelable state) {", "        if (!state.getClass().equals(SavedState.class)) {\n            // Didn't save state for us in onSaveInstanceState\n            super.onRestoreInstanceState(state);\n            return;\n        }\n\n        // Restore the instance state\n        SavedState myState = (SavedState) state;\n        super.onRestoreInstanceState(myState.getSuperState());\n        mProgress = myState.progress;\n        mMax = myState.max;\n        notifyChanged();\n    }\n\n    /**\n     * SavedState, a subclass of {@link BaseSavedState}, will store the state\n     * of MyPreference, a subclass of Preference.\n     * <p>\n     * It is important to always call through to super methods.\n     */\n    private static class SavedState extends BaseSavedState {\n        int progress;\n        int max;\n\n        public SavedState(Parcel source) {\n            super(source);\n\n            // Restore the click counter\n            progress = source.readInt();\n            max = source.readInt();\n        }\n\n        @Override", "        public void writeToParcel(Parcel dest, int flags) {\n            super.writeToParcel(dest, flags);\n\n            // Save the click counter\n            dest.writeInt(progress);\n            dest.writeInt(max);\n        }\n\n        public SavedState(Parcelable superState) {\n            super(superState);\n        }\n\n        @SuppressWarnings(\"unused\")", "        public static final Parcelable.Creator<SavedState> CREATOR =\n                new Parcelable.Creator<SavedState>() {\n            public SavedState createFromParcel(Parcel in) {\n                return new SavedState(in);\n            }\n\n            public SavedState[] newArray(int size) {\n                return new SavedState[size];\n            }\n        };\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/speaker/ClearSpeakerFragment.java", "chunked_list": ["/*\n * Copyright (C) 2020 Paranoid Android\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.speaker;\n", "package org.lineageos.settings.speaker;\n\nimport android.content.Context;\nimport android.content.res.AssetFileDescriptor;\nimport android.media.AudioManager;\nimport android.media.AudioAttributes;\nimport android.media.MediaPlayer;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;", "import android.os.Handler;\nimport android.os.Looper;\nimport android.os.Message;\nimport android.util.Log;\n\nimport androidx.preference.Preference;\nimport androidx.preference.PreferenceFragment;\nimport androidx.preference.SwitchPreference;\n\nimport org.lineageos.settings.R;", "\nimport org.lineageos.settings.R;\n\nimport java.io.IOException;\n\npublic class ClearSpeakerFragment extends PreferenceFragment implements\n        Preference.OnPreferenceChangeListener {\n\n    private static final String TAG = ClearSpeakerFragment.class.getSimpleName();\n\n    private static final String PREF_CLEAR_SPEAKER = \"clear_speaker_pref\";\n\n    private AudioManager mAudioManager;\n    private Handler mHandler;\n    private MediaPlayer mMediaPlayer;\n    private SwitchPreference mClearSpeakerPref;\n\n    @Override", "    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n        addPreferencesFromResource(R.xml.clear_speaker_settings);\n\n        mClearSpeakerPref = (SwitchPreference) findPreference(PREF_CLEAR_SPEAKER);\n        mClearSpeakerPref.setOnPreferenceChangeListener(this);\n\n        mHandler = new Handler();\n        mAudioManager = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);\n    }\n\n    @Override", "    public boolean onPreferenceChange(Preference preference, Object newValue) {\n        if (preference == mClearSpeakerPref) {\n            boolean value = (Boolean) newValue;\n            if (value) {\n                if (startPlaying()) {\n                    mHandler.removeCallbacksAndMessages(null);\n                    mHandler.postDelayed(() -> {\n                        stopPlaying();\n                    }, 30000);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    @Override", "    public void onStop() {\n        super.onStop();\n        stopPlaying();\n    }\n\n    public boolean startPlaying() {\n        mAudioManager.setParameters(\"status_earpiece_clean=on\");\n        mMediaPlayer = new MediaPlayer();\n        getActivity().setVolumeControlStream(AudioManager.STREAM_MUSIC);\n        mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n        mMediaPlayer.setLooping(true);", "        try {\n            AssetFileDescriptor file = getResources().openRawResourceFd(R.raw.clear_speaker_sound);\n            try {\n                mMediaPlayer.setDataSource(file.getFileDescriptor(), file.getStartOffset(), file.getLength());\n            } finally {\n                file.close();\n            }\n            mClearSpeakerPref.setEnabled(false);\n            mMediaPlayer.setVolume(1.0f, 1.0f);\n            mMediaPlayer.prepare();\n            mMediaPlayer.start();\n        } catch (IOException ioe) {\n            Log.e(TAG, \"Failed to play speaker clean sound!\", ioe);\n            return false;\n        }\n        return true;\n    }\n", "    public void stopPlaying() {\n        if (mMediaPlayer != null) {\n            if (mMediaPlayer.isPlaying()) {\n                mMediaPlayer.stop();\n                mMediaPlayer.reset();\n                mMediaPlayer.release();\n                mMediaPlayer = null;\n            }\n        }\n        mAudioManager.setParameters(\"status_earpiece_clean=off\");\n        mClearSpeakerPref.setEnabled(true);\n        mClearSpeakerPref.setChecked(false);\n    }\n}\n"]}
{"filename": "parts/src/org/lineageos/settings/speaker/ClearSpeakerActivity.java", "chunked_list": ["/*\n * Copyright (C) 2020 Paranoid Android\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.lineageos.settings.speaker;\n", "package org.lineageos.settings.speaker;\n\nimport android.os.Bundle;\n\nimport com.android.settingslib.collapsingtoolbar.CollapsingToolbarBaseActivity;\nimport com.android.settingslib.widget.R;\n\npublic class ClearSpeakerActivity extends CollapsingToolbarBaseActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        getFragmentManager().beginTransaction()\n                .replace(R.id.content_frame, new ClearSpeakerFragment())\n                .commit();\n    }\n}\n"]}
