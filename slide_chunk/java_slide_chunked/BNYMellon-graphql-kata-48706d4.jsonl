{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/CoercingDate.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata;\n", "package bnymellon.jpe.graphql.kata;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport graphql.language.StringValue;\nimport graphql.schema.Coercing;\nimport graphql.schema.CoercingParseLiteralException;\nimport graphql.schema.CoercingParseValueException;\nimport graphql.schema.CoercingSerializeException;", "import graphql.schema.CoercingParseValueException;\nimport graphql.schema.CoercingSerializeException;\n\npublic class CoercingDate\n        implements Coercing\n{\n    public static final DateTimeFormatter FORMATTER = DateTimeFormatter.ISO_DATE;\n\n    @Override\n    public Object serialize(Object dataFetcherResult) throws CoercingSerializeException\n    {\n        return FORMATTER.format(((LocalDate) dataFetcherResult));\n    }\n\n    @Override", "    public Object serialize(Object dataFetcherResult) throws CoercingSerializeException\n    {\n        return FORMATTER.format(((LocalDate) dataFetcherResult));\n    }\n\n    @Override\n    public LocalDate parseValue(Object input) throws CoercingParseValueException\n    {\n        return parseDate(input);\n    }\n\n    @Override", "    public LocalDate parseLiteral(Object input) throws CoercingParseLiteralException\n    {\n        return parseDate(input);\n    }\n\n    private LocalDate parseDate(Object dataFetcherResult)\n    {\n        if (dataFetcherResult instanceof StringValue)\n        {\n            return LocalDate.from(FORMATTER.parse(((StringValue) dataFetcherResult).getValue()));\n        }", "        else if (dataFetcherResult instanceof String)\n        {\n            return LocalDate.from(FORMATTER.parse((CharSequence) dataFetcherResult));\n        }\n        return null;\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/ComposersSchema.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata;\n", "package bnymellon.jpe.graphql.kata;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\n\nimport org.eclipse.collections.api.block.predicate.Predicate;\nimport org.eclipse.collections.api.factory.Lists;", "import org.eclipse.collections.api.block.predicate.Predicate;\nimport org.eclipse.collections.api.factory.Lists;\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.impl.list.mutable.ListAdapter;\n\nimport bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.Composition;\nimport bnymellon.jpe.graphql.kata.domain.Concerto;\nimport bnymellon.jpe.graphql.kata.domain.Instrument;\nimport bnymellon.jpe.graphql.kata.domain.Location;", "import bnymellon.jpe.graphql.kata.domain.Instrument;\nimport bnymellon.jpe.graphql.kata.domain.Location;\nimport bnymellon.jpe.graphql.kata.domain.Piece;\nimport bnymellon.jpe.graphql.kata.domain.Song;\nimport graphql.com.google.common.base.Function;\nimport graphql.com.google.common.base.Supplier;\nimport graphql.execution.DataFetcherResult;\nimport graphql.language.SourceLocation;\nimport graphql.schema.DataFetchingEnvironment;\nimport graphql.schema.GraphQLScalarType;", "import graphql.schema.DataFetchingEnvironment;\nimport graphql.schema.GraphQLScalarType;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.idl.RuntimeWiring;\nimport graphql.schema.idl.SchemaGenerator;\nimport graphql.schema.idl.SchemaParser;\nimport graphql.schema.idl.TypeDefinitionRegistry;\nimport graphql.validation.ValidationError;\nimport graphql.validation.ValidationErrorType;\n", "import graphql.validation.ValidationErrorType;\n\nimport static bnymellon.jpe.graphql.kata.domain.InstrumentType.KEYBOARD;\nimport static bnymellon.jpe.graphql.kata.domain.InstrumentType.WOODWIND;\nimport static bnymellon.jpe.graphql.kata.domain.Period.BAROQUE;\nimport static bnymellon.jpe.graphql.kata.domain.Period.CLASSICAL;\nimport static bnymellon.jpe.graphql.kata.domain.Period.MODERN;\nimport static bnymellon.jpe.graphql.kata.domain.Period.POST_MODERN;\nimport static bnymellon.jpe.graphql.kata.domain.Period.RENAISSANCE;\nimport static bnymellon.jpe.graphql.kata.domain.Period.ROMANTIC;", "import static bnymellon.jpe.graphql.kata.domain.Period.RENAISSANCE;\nimport static bnymellon.jpe.graphql.kata.domain.Period.ROMANTIC;\n\npublic class ComposersSchema\n{\n    public static final Instrument ORGAN = new Instrument(\"Organ\", KEYBOARD);\n    public static final Instrument PIANO = new Instrument(\"Piano\", KEYBOARD);\n    public static final Instrument HARPSICHORD = new Instrument(\"Harpsichord\", KEYBOARD);\n    public static final Instrument CLARINET = new Instrument(\"Clarinet\", WOODWIND);\n\n    private final MutableList<Composer> composers = Lists.mutable\n            .of(new Composer(1,\n                             \"Johann\",\n                             \"Bach\",\n                             LocalDate.of(1685, 3, 31),\n                             new Location(\"Leipzig\", \"Germany\"),\n                             ORGAN,\n                             BAROQUE,\n                             Lists.mutable.of(new Piece(\"Toccata and Fugue in D minor\", \"Dm\"),\n                                              new Piece(\"Mass in B minor\", \"Bm\"),\n                                              new Piece(\"Cello Suite No. 1\", \"G\"))),\n                new Composer(2,\n                             \"Ludwig\",\n                             \"Beethoven\",\n                             LocalDate.of(1770, 3, 26),\n                             new Location(\"Vienna\", \"Austria\"),\n                             PIANO,\n                             CLASSICAL,\n                             Lists.mutable.of(new Piece(\"Symphony No. 5\", \"Cm\"),\n                                              new Piece(\"Moonlight Sonata\", \"C#m\"))),\n                new Composer(3,\n                             \"Wolfgang\",\n                             \"Mozart\",\n                             LocalDate.of(1756, 1, 27),\n                             new Location(\"Vienna\", \"Austria\"),\n                             HARPSICHORD,\n                             CLASSICAL,\n                             Lists.mutable.of(new Piece(\"Eine kleine Nachtmusik\", \"G\"),\n                                              new Piece(\"Requiem\", \"Dm\"),\n                                              new Concerto(\"Clarinet Concerto in A Major\", \"A\", CLARINET))),\n                new Composer(4,\n                             \"Clara\",\n                             \"Schumann\",\n                             LocalDate.of(1819, 9, 13),\n                             new Location(\"Frankfurt\", \"Germany\"),\n                             PIANO,\n                             ROMANTIC,\n                             Lists.mutable.of(new Concerto(\"Piano Concerto in A minor\", \"Am\", PIANO),\n                                              new Song(\"Liebesfr\u00fchling\", \"C#\", \"\"\"\n                                                      How often has spring returned\n                                                      For the dead and desolate world!\n                                                      How often was spring greeted on all sides\n                                                      By happy songs in wood and field!\n                                                                                                            \n                                                      How often has spring returned!\n                                                      But no spring burgeoned for me:\n                                                      The songs of my heart are silent,\n                                                      For spring can only be brought by you.\"\"\"))),\n                new Composer(5,\n                             \"Giovanni\",\n                             \"Palestrina\",\n                             LocalDate.of(1594, 2, 2),\n                             new Location(\"Rome\", \"Italy\"),\n                             ORGAN,\n                             RENAISSANCE,\n                             Lists.mutable.of(new Piece(\"Missa Papae Marcelli\", \"C\"))),\n                new Composer(6,\n                             \"Sergei\",\n                             \"Rachmaninoff\",\n                             LocalDate.of(1873, 4, 1),\n                             new Location(\"Moscow\", \"Russia\"),\n                             PIANO,\n                             ROMANTIC,\n                             Lists.mutable.of(new Concerto(\"Piano Concerto No. 2\", \"Cm\", PIANO),\n                                              new Piece(\"Symphony No. 2\", \"Em\"))),\n                new Composer(7,\n                             \"Maurice\",\n                             \"Ravel\",\n                             LocalDate.of(1875, 3, 7),\n                             new Location(\"Paris\", \"France\"),\n                             PIANO,\n                             MODERN,\n                             Lists.mutable.of(new Piece(\"Bolero\", \"C\"),\n                                              new Piece(\"La Valse\", \"D\"))),\n                new Composer(8,\n                             \"John\",\n                             \"Cage\",\n                             LocalDate.of(1912, 9, 5),\n                             new Location(\"New York\", \"America\"),\n                             PIANO,\n                             POST_MODERN,\n                             Lists.mutable.of(new Piece(\"4:33\", null),\n                                              new Piece(\"Organ\u00b2 / ASLSP\", \"Bb\")))\n            );\n", "    public static final Instrument CLARINET = new Instrument(\"Clarinet\", WOODWIND);\n\n    private final MutableList<Composer> composers = Lists.mutable\n            .of(new Composer(1,\n                             \"Johann\",\n                             \"Bach\",\n                             LocalDate.of(1685, 3, 31),\n                             new Location(\"Leipzig\", \"Germany\"),\n                             ORGAN,\n                             BAROQUE,\n                             Lists.mutable.of(new Piece(\"Toccata and Fugue in D minor\", \"Dm\"),\n                                              new Piece(\"Mass in B minor\", \"Bm\"),\n                                              new Piece(\"Cello Suite No. 1\", \"G\"))),\n                new Composer(2,\n                             \"Ludwig\",\n                             \"Beethoven\",\n                             LocalDate.of(1770, 3, 26),\n                             new Location(\"Vienna\", \"Austria\"),\n                             PIANO,\n                             CLASSICAL,\n                             Lists.mutable.of(new Piece(\"Symphony No. 5\", \"Cm\"),\n                                              new Piece(\"Moonlight Sonata\", \"C#m\"))),\n                new Composer(3,\n                             \"Wolfgang\",\n                             \"Mozart\",\n                             LocalDate.of(1756, 1, 27),\n                             new Location(\"Vienna\", \"Austria\"),\n                             HARPSICHORD,\n                             CLASSICAL,\n                             Lists.mutable.of(new Piece(\"Eine kleine Nachtmusik\", \"G\"),\n                                              new Piece(\"Requiem\", \"Dm\"),\n                                              new Concerto(\"Clarinet Concerto in A Major\", \"A\", CLARINET))),\n                new Composer(4,\n                             \"Clara\",\n                             \"Schumann\",\n                             LocalDate.of(1819, 9, 13),\n                             new Location(\"Frankfurt\", \"Germany\"),\n                             PIANO,\n                             ROMANTIC,\n                             Lists.mutable.of(new Concerto(\"Piano Concerto in A minor\", \"Am\", PIANO),\n                                              new Song(\"Liebesfr\u00fchling\", \"C#\", \"\"\"\n                                                      How often has spring returned\n                                                      For the dead and desolate world!\n                                                      How often was spring greeted on all sides\n                                                      By happy songs in wood and field!\n                                                                                                            \n                                                      How often has spring returned!\n                                                      But no spring burgeoned for me:\n                                                      The songs of my heart are silent,\n                                                      For spring can only be brought by you.\"\"\"))),\n                new Composer(5,\n                             \"Giovanni\",\n                             \"Palestrina\",\n                             LocalDate.of(1594, 2, 2),\n                             new Location(\"Rome\", \"Italy\"),\n                             ORGAN,\n                             RENAISSANCE,\n                             Lists.mutable.of(new Piece(\"Missa Papae Marcelli\", \"C\"))),\n                new Composer(6,\n                             \"Sergei\",\n                             \"Rachmaninoff\",\n                             LocalDate.of(1873, 4, 1),\n                             new Location(\"Moscow\", \"Russia\"),\n                             PIANO,\n                             ROMANTIC,\n                             Lists.mutable.of(new Concerto(\"Piano Concerto No. 2\", \"Cm\", PIANO),\n                                              new Piece(\"Symphony No. 2\", \"Em\"))),\n                new Composer(7,\n                             \"Maurice\",\n                             \"Ravel\",\n                             LocalDate.of(1875, 3, 7),\n                             new Location(\"Paris\", \"France\"),\n                             PIANO,\n                             MODERN,\n                             Lists.mutable.of(new Piece(\"Bolero\", \"C\"),\n                                              new Piece(\"La Valse\", \"D\"))),\n                new Composer(8,\n                             \"John\",\n                             \"Cage\",\n                             LocalDate.of(1912, 9, 5),\n                             new Location(\"New York\", \"America\"),\n                             PIANO,\n                             POST_MODERN,\n                             Lists.mutable.of(new Piece(\"4:33\", null),\n                                              new Piece(\"Organ\u00b2 / ASLSP\", \"Bb\")))\n            );\n", "    public GraphQLSchema initSchema()\n    {\n        SchemaParser schemaParser = new SchemaParser();\n        SchemaGenerator schemaGenerator = new SchemaGenerator();\n        TypeDefinitionRegistry typeRegistry = schemaParser.parse(this.getClass()\n                                                                         .getResourceAsStream(\"/graphql/schema.graphqls\"));\n        RuntimeWiring wiring = RuntimeWiring.newRuntimeWiring()\n                .scalar(GraphQLScalarType.newScalar().name(\"Date\").coercing(new CoercingDate()).build())\n                .scalar(GraphQLScalarType.newScalar().name(\"Key\").coercing(new CoercingKey()).build())\n                .type(\"Composition\", builder -> builder\n                        .typeResolver(env -> env.getSchema().getObjectType(env.getObject().getClass().getSimpleName())))\n                .type(\"Composer\", builder -> builder.dataFetcher(\"compositions\", this::getComposerCompositions))\n                .type(\"Query\", builder -> builder\n                        .dataFetcher(\"composer\", this::getComposer)\n                        .dataFetcher(\"composers\", this::getComposers))\n                .type(\"Mutation\", builder -> builder\n                        .dataFetcher(\"createComposer\", this::addComposer)\n                        .dataFetcher(\"updateComposer\", this::updateComposer)\n                        .dataFetcher(\"addCompositions\", this::addCompositions)\n                        .dataFetcher(\"deleteComposition\", this::deleteComposition))\n                .build();\n        return schemaGenerator.makeExecutableSchema(typeRegistry, wiring);\n    }\n\n    private Composer getComposer(DataFetchingEnvironment env)\n    {\n        return composers.select(c -> Integer.parseInt(env.getArgument(\"id\")) == c.id()).getFirstOptional().get();\n    }\n\n    private List<Composer> getComposers(DataFetchingEnvironment env)\n    {\n        return composers.asLazy()\n                .select(comparingIfArg(env.getArgument(\"period\"), c -> c.period().name()))\n                .select(comparingIfArg(env.getArgument(\"country\"), c -> c.location().country()))\n                .select(comparingIfArg(env.getArgument(\"city\"), c -> c.location().city()))\n                .select(comparingIfArg(env.getArgument(\"instrument\"), c -> c.primaryInstrument().name()))\n                .select(comparingIfArg(env.getArgument(\"lastName\"), c -> c.lastName()))\n                .toList();\n    }\n\n    private Predicate<Composer> comparingIfArg(String arg1, Function<Composer, String> function)\n    {\n        return (composer) -> Objects.isNull(arg1) || arg1.isBlank() || arg1.equals(function.apply(composer));\n    }\n\n    private List<Composition> getComposerCompositions(DataFetchingEnvironment environment)\n    {\n        Composer composer = environment.getSource();\n        String type = environment.getArgument(\"subtype\");\n        return Objects.isNull(type) || type.isBlank()\n                ? composer.compositions()\n                : composer.compositions(composition -> type.equals(composition.getClass().getSimpleName()));\n    }\n\n    private Object addComposer(DataFetchingEnvironment environment)\n    {\n        Composer composer = Composer\n                .fromInput(composers.collectInt(Composer::id).max() + 1, environment.getArgument(\"composer\"));\n        composers.add(composer);\n        return composer;\n    }\n\n    private Object updateComposer(DataFetchingEnvironment environment)\n    {\n        int id = Integer.parseInt(environment.getArgument(\"id\"));\n        Composer existing = composers.selectWith(this::matchesId, id).getFirstOptional().get();\n        Composer input = Composer.fromInput(id, environment.getArgument(\"composer\"));\n\n        Composer updated = new Composer(id,\n                                        resolve(input::firstName, existing::firstName),\n                                        resolve(input::lastName, existing::lastName),\n                                        // Only update dateOfBirth if existing is null.\n                                        resolve(existing::dateOfBirth, input::dateOfBirth),\n                                        resolveLocation(input.location(), existing.location()),\n                                        resolveInstrument(input.primaryInstrument(), existing.primaryInstrument()),\n                                        resolve(input::period, existing::period),\n                                        Lists.mutable.empty());\n        composers.removeIfWith(this::matchesId, id);\n        composers.add(updated);\n        DataFetcherResult.Builder<Object> data = DataFetcherResult.newResult().data(updated);", "        if (!input.dateOfBirth().equals(existing.dateOfBirth()))\n        {\n            SourceLocation sourceLocation = environment.getOperationDefinition()\n                    .getVariableDefinitions().get(1).getType().getSourceLocation();\n            return data.error(ValidationError.newValidationError()\n                                      .validationErrorType(ValidationErrorType.UnusedVariable)\n                                      .sourceLocation(sourceLocation)\n                                      .description(\"You cannot change an existing date of birth.\").build()).build();\n        }\n        return data.build();\n    }\n\n    private List<Composition> addCompositions(DataFetchingEnvironment environment)\n    {\n        int composerId = Integer.parseInt(environment.getArgument(\"composerId\"));\n        List<Map> comps = environment.getArgument(\"compositions\");\n        MutableList<Composition> compositions = ListAdapter.adapt(comps).collect(this::mapComposition);\n        composers.detectWith(this::matchesId, composerId).compositions().addAll(compositions);\n        return compositions;\n    }\n\n    private Object deleteComposition(DataFetchingEnvironment environment)\n    {\n        int composerId = Integer.parseInt(environment.getArgument(\"composerId\"));\n        String title = environment.getArgument(\"title\");\n        return composers.detectWith(this::matchesId, composerId).compositions()\n                .removeIf(composition -> title.equals(composition.title()));\n    }\n\n    private Composition mapComposition(Map input)\n    {\n        return switch ((String) input.get(\"subtype\"))\n                {\n                    case \"Piece\" -> Piece.fromInput(input);\n                    case \"Concerto\" -> Concerto.fromInput(input);\n                    case \"Song\" -> Song.fromInput(input);\n                    default -> null;\n                };\n    }\n\n    private boolean matchesId(Composer composer, int id)\n    {\n        return id == composer.id();\n    }\n\n    private <T> T resolve(Supplier<T> update, Supplier<T> existing)\n    {\n        return Optional.ofNullable(update.get()).orElse(existing.get());\n    }\n\n    private Location resolveLocation(Location update, Location existing)\n    {\n        return Objects.nonNull(update)\n                ? new Location(resolve(update::city, existing::city), resolve(update::country, existing::country))\n                : existing;\n    }\n\n    private Instrument resolveInstrument(Instrument update, Instrument existing)\n    {\n        return Objects.nonNull(update)\n                ? new Instrument(resolve(update::name, existing::name), resolve(update::type, existing::type))\n                : existing;\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/CoercingKey.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata;\n", "package bnymellon.jpe.graphql.kata;\n\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport graphql.GraphqlErrorException;\nimport graphql.com.google.common.base.Function;\nimport graphql.language.StringValue;\nimport graphql.schema.Coercing;\nimport graphql.schema.CoercingParseLiteralException;", "import graphql.schema.Coercing;\nimport graphql.schema.CoercingParseLiteralException;\nimport graphql.schema.CoercingParseValueException;\nimport graphql.schema.CoercingSerializeException;\n\npublic class CoercingKey\n        implements Coercing<String, String>\n{\n    private static final Pattern KEY_PATTERN = Pattern.compile(\"[A-G](b|#)?m?\");\n\n    @Override", "    public String serialize(Object dataFetcherResult) throws CoercingSerializeException\n    {\n        return validateKey(dataFetcherResult, CoercingSerializeException::new);\n    }\n\n    @Override\n    public String parseValue(Object input) throws CoercingParseValueException\n    {\n        return validateKey(input, CoercingParseValueException::new);\n    }\n\n    @Override", "    public String parseLiteral(Object input) throws CoercingParseLiteralException\n    {\n        return validateKey(((StringValue) input).getValue(), CoercingParseLiteralException::new);\n    }\n\n    private <T extends GraphqlErrorException> String validateKey(Object dataFetcherResult,\n                                                                 Function<String, T> error) throws T\n    {\n        if (KEY_PATTERN.asPredicate().test(String.valueOf(dataFetcherResult)))\n        {\n            return String.valueOf(dataFetcherResult);\n        }\n        else\n        {\n            throw Objects.requireNonNull(error.apply(\"Key must match the patter: \" + KEY_PATTERN));\n        }\n    }\n}\n", "        if (KEY_PATTERN.asPredicate().test(String.valueOf(dataFetcherResult)))\n        {\n            return String.valueOf(dataFetcherResult);\n        }\n        else\n        {\n            throw Objects.requireNonNull(error.apply(\"Key must match the patter: \" + KEY_PATTERN));\n        }\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Piece.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.util.Map;\n\npublic record Piece(String title, String key)\n        implements Composition\n{\n    public static Piece fromInput(Map<String, String> input)\n    {\n        return new Piece(input.get(\"title\"), input.get(\"key\"));\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/InstrumentType.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n\npublic enum InstrumentType\n{\n    STRING, KEYBOARD, WOODWIND, BRASS, PERCUSSION, VOICE;\n}\n", "package bnymellon.jpe.graphql.kata.domain;\n\npublic enum InstrumentType\n{\n    STRING, KEYBOARD, WOODWIND, BRASS, PERCUSSION, VOICE;\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/CompositionInput.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n\npublic record CompositionInput(String subtype,\n                               String title,\n                               String key,\n                               Instrument soloInstrument,\n                               String lyrics)\n{\n}\n", "package bnymellon.jpe.graphql.kata.domain;\n\npublic record CompositionInput(String subtype,\n                               String title,\n                               String key,\n                               Instrument soloInstrument,\n                               String lyrics)\n{\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Location.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.util.Map;\nimport java.util.Optional;\n\npublic record Location(String city, String country)\n{\n    public static Location fromInput(Map<String, String> input)\n    {\n        return Optional.ofNullable(input).map(in -> new Location(in.get(\"city\"), in.get(\"country\"))).orElse(null);\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Song.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.util.Map;\n\npublic record Song(String title, String key, String lyrics)\n        implements Composition\n{\n    public static Song fromInput(Map<String, String> input)\n    {\n        return new Song(input.get(\"title\"), input.get(\"key\"), input.get(\"lyrics\"));\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Period.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n\npublic enum Period\n{\n    RENAISSANCE, BAROQUE, CLASSICAL, ROMANTIC, MODERN, POST_MODERN;\n}\n", "package bnymellon.jpe.graphql.kata.domain;\n\npublic enum Period\n{\n    RENAISSANCE, BAROQUE, CLASSICAL, ROMANTIC, MODERN, POST_MODERN;\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Instrument.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.util.Map;\nimport java.util.Optional;\n\npublic record Instrument(String name, InstrumentType type)\n{\n    public static Instrument fromInput(Map<String, String> input)\n    {\n        return Optional.ofNullable(input)\n                .map(in -> new Instrument(in.get(\"name\"), InstrumentType.valueOf(in.get(\"type\")))).orElse(null);\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Composition.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\n\n@JsonTypeInfo(\n        use = JsonTypeInfo.Id.DEDUCTION, defaultImpl = Piece.class)\n@JsonSubTypes({\n        @JsonSubTypes.Type(Piece.class),\n        @JsonSubTypes.Type(Concerto.class),", "        @JsonSubTypes.Type(Piece.class),\n        @JsonSubTypes.Type(Concerto.class),\n        @JsonSubTypes.Type(Song.class)})\npublic interface Composition\n{\n    String title();\n\n    String key();\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Concerto.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.util.Map;\n\npublic record Concerto(String title, String key, Instrument soloInstrument)\n        implements Composition\n{\n    public static Concerto fromInput(Map input)\n    {\n        return new Concerto((String) input.get(\"title\"),\n                            (String) input.get(\"key\"),\n                            Instrument.fromInput((Map<String, String>) input.get(\"soloInstrument\")));\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/Composer.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.eclipse.collections.api.block.predicate.Predicate;\nimport org.eclipse.collections.impl.factory.Lists;\n\npublic record Composer(int id,\n                       String firstName,\n                       String lastName,\n                       LocalDate dateOfBirth,\n                       Location location,\n                       Instrument primaryInstrument,\n                       Period period,\n                       List<Composition> compositions)\n{", "import org.eclipse.collections.impl.factory.Lists;\n\npublic record Composer(int id,\n                       String firstName,\n                       String lastName,\n                       LocalDate dateOfBirth,\n                       Location location,\n                       Instrument primaryInstrument,\n                       Period period,\n                       List<Composition> compositions)\n{", "    public static Composer fromInput(int id, Map<String, Object> input)\n    {\n\n        return new Composer(id,\n                            Optional.ofNullable(input.get(\"firstName\")).map(Object::toString).orElse(null),\n                            Optional.ofNullable(input.get(\"lastName\")).map(Object::toString).orElse(null),\n                            ((LocalDate) input.get(\"dateOfBirth\")),\n                            Location.fromInput((Map<String, String>) input.get(\"location\")),\n                            Instrument.fromInput((Map<String, String>) input.get(\"primaryInstrument\")),\n                            Optional.ofNullable(input.get(\"period\")).map(Object::toString)\n                                    .map(Period::valueOf).orElse(null),\n                            List.of());\n    }\n\n    public List<Composition> compositions(Predicate<Composition> predicate)\n    {\n        return Lists.adapt(this.compositions).select(predicate);\n    }\n}\n"]}
{"filename": "graphql-composers-domain/src/main/java/bnymellon/jpe/graphql/kata/domain/ComposerInput.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.domain;\n", "package bnymellon.jpe.graphql.kata.domain;\n\nimport java.time.LocalDate;\n\npublic record ComposerInput(String firstName,\n                            String lastName,\n                            LocalDate dateOfBirth,\n                            Location location,\n                            Instrument primaryInstrument,\n                            Period period)\n{\n}\n"]}
{"filename": "graphql-kata-exercises/src/test/java/bnymellon/jpe/graphql/kata/GraphQLBaseTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata;\n", "package bnymellon.jpe.graphql.kata;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeAll;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.core.util.DefaultIndenter;", "import com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.core.util.DefaultIndenter;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport graphql.ExecutionInput;\nimport graphql.GraphQL;\n\npublic abstract class GraphQLBaseTest\n{\n    protected GraphQL graphQL;\n    private ObjectWriter writer;\n    private ObjectMapper mapper;\n\n    @BeforeAll", "public abstract class GraphQLBaseTest\n{\n    protected GraphQL graphQL;\n    private ObjectWriter writer;\n    private ObjectMapper mapper;\n\n    @BeforeAll\n    public void setUp()\n    {\n        graphQL = GraphQL.newGraphQL(new ComposersSchema().initSchema()).build();\n        DefaultIndenter indenter = new DefaultIndenter().withLinefeed(\"\\n\");\n        mapper = new ObjectMapper().findAndRegisterModules();\n        writer = mapper.writer(new DefaultPrettyPrinter().withObjectIndenter(indenter).withArrayIndenter(indenter));\n    }\n\n    private String getGqlFile(String path) throws IOException\n    {\n        return new String(this.getClass().getResourceAsStream(path).readAllBytes());\n    }\n\n    protected String executeOperation(String gqlResourcePath) throws IOException\n    {\n        return getJSONResponse(ExecutionInput.newExecutionInput(getGqlFile(gqlResourcePath)));\n    }\n\n    protected String executeOperation(String queryResourcePath, String jsonVariables) throws IOException\n    {\n        Map<String, Object> vars = mapper.readValue(jsonVariables, new TypeReference<>()\n        {\n        });\n        return getJSONResponse(ExecutionInput.newExecutionInput(getGqlFile(queryResourcePath)).variables(vars));\n    }\n\n    private String getJSONResponse(ExecutionInput.Builder input) throws JsonProcessingException\n    {\n        return writer.writeValueAsString(graphQL.execute(input.build()).toSpecification());\n    }\n}\n"]}
{"filename": "graphql-kata-exercises/src/test/java/bnymellon/jpe/graphql/kata/query/QueryComposersTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.query;\n", "package bnymellon.jpe.graphql.kata.query;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport bnymellon.jpe.graphql.kata.GraphQLBaseTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;", "\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * For each test, execute a GraphQL query which will return the expected response and make the test pass.\n */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class QueryComposersTest\n        extends GraphQLBaseTest\n{\n    /**\n     * GraphQL allows a client to customize which fields are included in the response data.\n     * View the JSON test output for the query contained in \"src/test/resources/queries/get-all-composers.graphql\".\n     * Try adding or removing some fields to the query and notice how the response changes.\n     * <p>\n     * Hint: See the schema at \"graphql-composers-domain/src/main/resources/schema.graphqls\" for a description of types and their fields\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#fields\">GraphQL Fields</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryAllComposers() throws IOException\n    {\n        // Check the console output to see the JSON response to the query.\n        System.out.println(\"COMPOSERS: \" + executeOperation(\"/queries/get-all-composers.graphql\"));\n    }\n\n\n    /**\n     * A client can also pass arguments in a query to perform server-side filtering.\n     * Add the missing argument in \"src/test/resources/queries/get-modern-composers.graphql\".\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#enumeration-types\">GraphQL Enumerations</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryModernComposers() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Maurice\",\n                                     \"lastName\" : \"Ravel\",\n                                     \"period\" : \"MODERN\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-modern-composers.graphql\"));\n    }\n\n    /**\n     * By using aliases, a client can request data in a single response for the same query with different arguments.\n     * Add the missing aliases in \"src/test/resources/queries/get-period-composers.graphql\".\n     * Remove any duplication in the query by using GraphQL fragments.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#aliases\">GraphQL Query Aliases</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#fragments\">GraphQL Fragments</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#enumeration-types\">GraphQl Enumerations</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryRenaissanceAndBaroqueComposers() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"renaissanceComposers\" : [\n                                   {\n                                     \"firstName\" : \"Giovanni\",\n                                     \"lastName\" : \"Palestrina\",\n                                     \"period\" : \"RENAISSANCE\"\n                                   }\n                                 ],\n                                 \"baroqueComposers\" : [\n                                   {\n                                     \"firstName\" : \"Johann\",\n                                     \"lastName\" : \"Bach\",\n                                     \"period\" : \"BAROQUE\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-period-composers.graphql\"));\n    }\n\n    /**\n     * Query arguments can be passed dynamically as variables by an operation.\n     * Add the missing \"id\" parameter as both an operation variable\n     * and a query argument in \"src/test/resources/queries/get-composer-by-id.graphql\"\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#operation-name\">GraphQL Operation Names</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#variables\">GraphQL Variables</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerById() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composer\" : {\n                                   \"firstName\" : \"Johann\",\n                                   \"lastName\" : \"Bach\",\n                                   \"location\" : {\n                                     \"city\" : \"Leipzig\",\n                                     \"country\" : \"Germany\"\n                                   }\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composer-by-id.graphql\",\n                                      // Notice the variables sent with the query.\n                                      \"\"\"\n                                              {\n                                                \"id\": 1\n                                              }\"\"\"));\n    }\n\n    /**\n     * Directives allow a client to programmatically include fields in a query response.\n     * Add a directive for the composer's birthday in \"src/test/resources/queries/get-composer-by-id.graphql\"\n     * Notice how a query can easily be used to retrieve different results based on dynamic input.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#default-variables\">GraphQL Default Variables</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#directives\">GraphQL Directives</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#scalar-types\">GraphQL Scalar Types</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerBirthday() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composer\" : {\n                                   \"firstName\" : \"Johann\",\n                                   \"lastName\" : \"Bach\",\n                                   \"dateOfBirth\" : \"1685-03-31\",\n                                   \"location\" : {\n                                     \"city\" : \"Leipzig\",\n                                     \"country\" : \"Germany\"\n                                   }\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composer-by-id.graphql\",\n                                      // TODO: Add a \"withBirthday\" variable.\n                                      \"\"\"\n                                              {\n                                                \"id\": 1\n                                              }\"\"\"));\n    }\n\n    /**\n     * GraphQL allows you to add type modifiers to queries to perform server side checks.\n     * It also supports successful query execution with partial results when errors do occur.\n     * Find a non-null field on the Piece type in the composers schema\n     * and add it to the query in \"src/test/resources/queries/get-composers-compositions.graphql\".\n     * Notice how the data and errors are handled in the response when querying for a null value of a non-null field.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/schema/#lists-and-non-null\">GraphQL Non-Null</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#scalar-types\">GraphQL Scalar Types</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposersCompositionsWithNullKey() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"errors\" : [\n                                 {\n                                   \"message\" : \"The field at path '/composers[0]/compositions[0]/key' was declared as a non null type, but the code involved in retrieving data has wrongly returned a null value.  The graphql specification requires that the parent field be set to null, or if that is non nullable that it bubble up null to its parent and so on. The non-nullable type is 'Key' within parent type 'Piece'\",\n                                   \"path\" : [\n                                     \"composers\",\n                                     0,\n                                     \"compositions\",\n                                     0,\n                                     \"key\"\n                                   ],\n                                   \"extensions\" : {\n                                     \"classification\" : \"NullValueInNonNullableField\"\n                                   }\n                                 }\n                               ],\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"John\",\n                                     \"lastName\" : \"Cage\",\n                                     \"compositions\" : [\n                                       null,\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Organ\u00b2 / ASLSP\",\n                                         \"key\" : \"Bb\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Cage\"\n                                              }\"\"\"));\n    }\n\n    /**\n     * GraphQL schemas may have interface types. Clients can use inline fragments to query fields on interface subtypes.\n     * Add the missing inline fragment, as well as the appropriate arguments and variables,\n     * in \"src/test/resources/queries/get-composers-compositions.graphql\"\n     * <p>\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/schema/#interfaces\">GraphQL Interfaces</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#union-types\">GraphQL Union Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#inline-fragments\">GraphQL Inline Fragments</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerCompositionTypes() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Sergei\",\n                                     \"lastName\" : \"Rachmaninoff\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Concerto\",\n                                         \"title\" : \"Piano Concerto No. 2\",\n                                         \"key\" : \"Cm\",\n                                         \"soloInstrument\" : {\n                                           \"name\" : \"Piano\",\n                                           \"type\" : \"KEYBOARD\"\n                                         }\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      // TODO: Add a value for the \"subtype\" variable to fetch Rachmaninoff's concertos.\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Rachmaninoff\"\n                                              }\"\"\"));\n\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Clara\",\n                                     \"lastName\" : \"Schumann\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Song\",\n                                         \"title\" : \"Liebesfr\u00fchling\",\n                                         \"key\" : \"C#\",\n                                         \"lyrics\" : \"How often has spring returned\\\\nFor the dead and desolate world!\\\\nHow often was spring greeted on all sides\\\\nBy happy songs in wood and field!\\\\n\\\\nHow often has spring returned!\\\\nBut no spring burgeoned for me:\\\\nThe songs of my heart are silent,\\\\nFor spring can only be brought by you.\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      // TODO: Add a value for the \"subtype\" variable to fetch Schumann's songs.\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Schumann\"\n                                              }\"\"\"));\n    }\n}\n"]}
{"filename": "graphql-kata-exercises/src/test/java/bnymellon/jpe/graphql/kata/mutation/MutateComposersTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.mutation;\n", "package bnymellon.jpe.graphql.kata.mutation;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestMethodOrder;\n", "import org.junit.jupiter.api.TestMethodOrder;\n\nimport bnymellon.jpe.graphql.kata.GraphQLBaseTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * For each test, execute a GraphQL mutation which will perform the proper update and make the test pass.\n */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)", " */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class MutateComposersTest\n        extends GraphQLBaseTest\n{\n    /**\n     * Just like queries, GraphQL mutations take input arguments and return a customizable response.\n     * The GraphQL type system supports distinct input types which allows validation of arguments against the schema.\n     * Add the missing fields to the inline ComposerInput argument of the mutation in \"src/test/resources/mutations/add-composer.graphql\".\n     * <p>\n     * Hint: See the schema at \"graphql-composers-domain/src/main/resources/schema.graphqls\" for a description of mutations and input types.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#input-types\">GraphQL Input Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(1)", "    public void addComposer() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"createComposer\" : {\n                                   \"id\" : \"9\"\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/add-composer.graphql\"));\n        assertEquals(\n                // TODO: Use this expected query response to fill in the input argument values.\n                \"\"\"\n                        {\n                          \"data\" : {\n                            \"composer\" : {\n                              \"firstName\" : \"Charles\",\n                              \"lastName\" : \"Ives\",\n                              \"dateOfBirth\" : \"1874-10-20\",\n                              \"location\" : {\n                                \"city\" : \"Danbury\",\n                                \"country\" : \"United States\"\n                              }\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/queries/get-composer-by-id.graphql\", \"\"\"\n                        {\n                           \"id\" : \"9\",\n                           \"withBirthday\" : true\n                        }\"\"\"));\n    }\n\n    /**\n     * GraphQL mutations can be used for updates as well as creation/insertion.\n     * Depending on the server-side implementation, mutations can also return partial results with errors.\n     * Add variables to the named operation in \"src/test/resources/mutations/update-composer.graphql\"\n     * and modify the JSON input variables below.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#input-types\">GraphQL Input Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(2)", "    public void updateLocationAndDateOfBirth() throws IOException\n    {\n        assertEquals(\n                // Notice the results.\n                \"\"\"\n                        {\n                          \"errors\" : [\n                            {\n                              \"message\" : \"You cannot change an existing date of birth.\",\n                              \"locations\" : [\n                                {\n                                  \"line\" : 16,\n                                  \"column\" : 46\n                                }\n                              ],\n                              \"extensions\" : {\n                                \"classification\" : \"ValidationError\"\n                              }\n                            }\n                          ],\n                          \"data\" : {\n                            \"updateComposer\" : {\n                              \"id\" : \"9\"\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/mutations/update-composer.graphql\",\n                                 // TODO: Add a location to this update based on the expected response.\n                                 // See what happens when you try to modify an existing dateOfBirth.\n                                 \"\"\"\n                                         {\n                                           \"id\" : \"9\",\n                                           \"composer\" : {\n                                               \"lastName\" : \"Ives\",\n                                               \"dateOfBirth\": \"2021-11-04\"\n                                           }\n                                         }\"\"\"));\n        assertEquals(\n                // TODO: Use this expected query response to fill in the input argument values.\n                // Notice the location and dateOfBirth values after the attempted update.\n                \"\"\"\n                        {\n                          \"data\" : {\n                            \"composer\" : {\n                              \"firstName\" : \"Charles\",\n                              \"lastName\" : \"Ives\",\n                              \"dateOfBirth\" : \"1874-10-20\",\n                              \"location\" : {\n                                \"city\" : \"New York\",\n                                \"country\" : \"United States\"\n                              }\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/queries/get-composer-by-id.graphql\", \"\"\"\n                        {\n                           \"id\" : \"9\",\n                           \"withBirthday\" : true\n                        }\"\"\"));\n    }\n\n    /**\n     * GraphQL Mutations can also be written as named operations with dynamic input variables.\n     * Convert the mutation in \"src/test/resources/mutations/add-compositions.graphql\" to a named operation\n     * and add the missing \"composerId\" and \"compositions\" parameters as both an operation variables\n     * and as mutation arguments.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#operation-name\">GraphQL Operation Names</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(3)", "    public void addCompositions() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"addCompositions\" : [\n                                   {\n                                     \"__typename\" : \"Piece\",\n                                     \"title\" : \"Central Park in the Dark\"\n                                   },\n                                   {\n                                     \"__typename\" : \"Concerto\",\n                                     \"title\" : \"Emerson Concerto\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/add-compositions.graphql\",\n                                      // Notice the input variables already provided to be sent with the mutation.\n                                      \"\"\"\n                                              {\n                                                 \"composerId\" : \"9\",\n                                                 \"compositions\" : [{\n                                                         \"subtype\" : \"Piece\",\n                                                         \"title\" : \"Central Park in the Dark\",\n                                                         \"key\" : \"A#m\"\n                                                     },{\n                                                         \"subtype\" : \"Concerto\",\n                                                         \"title\" : \"Emerson Concerto\",\n                                                         \"key\" : \"F\",\n                                                         \"soloInstrument\" : {\n                                                             \"name\" : \"Piano\",\n                                                             \"type\" : \"KEYBOARD\"\n                                                         }\n                                                     }]\n                                              }\"\"\"));\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Charles\",\n                                     \"lastName\" : \"Ives\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Central Park in the Dark\",\n                                         \"key\" : \"A#m\"\n                                       },\n                                       {\n                                         \"__typename\" : \"Concerto\",\n                                         \"title\" : \"Emerson Concerto\",\n                                         \"key\" : \"F\",\n                                         \"soloInstrument\" : {\n                                           \"name\" : \"Piano\",\n                                           \"type\" : \"KEYBOARD\"\n                                         }\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\", \"\"\"\n                             {\n                                \"lastName\" : \"Ives\"\n                             }\"\"\"));\n    }\n\n    /**\n     * Finally, GraphQL mutations are used for deleting data.\n     * All the principles used in \"create\" and \"update\" mutations apply here as well.\n     * Make the appropriate modifications to \"src/test/resources/mutations/delete-composition.graphql\".\n     * Update the JSON input variables below to delete \"Emerson Concerto\" by Charles Ives.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(4)", "    public void deleteComposition() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"deleteComposition\" : true\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/delete-composition.graphql\",\n                                      // TODO: Add \"composerId\" and \"title\" variables.\n                                      \"\"\"\n                                              {\n                                              }\"\"\"));\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Charles\",\n                                     \"lastName\" : \"Ives\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Central Park in the Dark\",\n                                         \"key\" : \"A#m\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\", \"\"\"\n                             {\n                                \"lastName\" : \"Ives\"\n                             }\"\"\"));\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/test/java/bnymellon/jpe/graphql/example/GraphQLServerTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example;\n", "package bnymellon.jpe.graphql.example;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestMethodOrder;", "import org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestMethodOrder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.graphql.tester.AutoConfigureHttpGraphQlTester;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.ParameterizedTypeReference;\nimport org.springframework.graphql.test.tester.GraphQlTester;\n\nimport bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.ComposerInput;", "import bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.ComposerInput;\nimport bnymellon.jpe.graphql.kata.domain.Composition;\nimport bnymellon.jpe.graphql.kata.domain.CompositionInput;\nimport bnymellon.jpe.graphql.kata.domain.Instrument;\nimport bnymellon.jpe.graphql.kata.domain.InstrumentType;\nimport bnymellon.jpe.graphql.kata.domain.Location;\n\nimport static bnymellon.jpe.graphql.kata.domain.Period.POST_MODERN;\nimport static org.junit.jupiter.api.Assertions.assertEquals;", "import static bnymellon.jpe.graphql.kata.domain.Period.POST_MODERN;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@AutoConfigureHttpGraphQlTester\npublic class GraphQLServerTest\n{\n    @Autowired\n    GraphQlTester tester;\n\n    private Integer addedComposerId;\n\n    @Test\n    @Order(0)", "public class GraphQLServerTest\n{\n    @Autowired\n    GraphQlTester tester;\n\n    private Integer addedComposerId;\n\n    @Test\n    @Order(0)\n    public void getAllComposers()\n    {\n        tester.documentName(\"composers-query\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(8);\n    }\n\n    @Test\n    @Order(0)", "    public void getAllComposers()\n    {\n        tester.documentName(\"composers-query\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(8);\n    }\n\n    @Test\n    @Order(0)\n    public void getComposerById()\n    {\n        tester.documentName(\"get-composer-by-id\").variable(\"id\", \"2\").execute()\n                .path(\"composer\").entity(Composer.class)\n                .satisfies(c -> assertEquals(\"Beethoven\", c.lastName()));\n    }\n\n    @Test\n    @Order(0)", "    public void getComposerById()\n    {\n        tester.documentName(\"get-composer-by-id\").variable(\"id\", \"2\").execute()\n                .path(\"composer\").entity(Composer.class)\n                .satisfies(c -> assertEquals(\"Beethoven\", c.lastName()));\n    }\n\n    @Test\n    @Order(0)\n    public void getPeriodComposers()\n    {\n        tester.documentName(\"composers-query\").variable(\"period\", \"RENAISSANCE\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(1)\n                .matches(l -> l.stream().allMatch(c -> \"Palestrina\".equals(c.lastName())));\n    }\n\n    @Test\n    @Order(0)", "    public void getPeriodComposers()\n    {\n        tester.documentName(\"composers-query\").variable(\"period\", \"RENAISSANCE\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(1)\n                .matches(l -> l.stream().allMatch(c -> \"Palestrina\".equals(c.lastName())));\n    }\n\n    @Test\n    @Order(0)\n    public void getComposersByLocation()\n    {\n        tester.documentName(\"composers-query\").variable(\"city\", \"Vienna\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(2)\n                .matches(l -> l.stream().anyMatch(c -> \"Beethoven\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Mozart\".equals(c.lastName())));\n\n        tester.documentName(\"composers-query\").variable(\"country\", \"Russia\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(1)\n                .matches(l -> l.stream().anyMatch(c -> \"Rachmaninoff\".equals(c.lastName())));\n    }\n\n    @Test\n    @Order(0)", "    public void getComposersByLocation()\n    {\n        tester.documentName(\"composers-query\").variable(\"city\", \"Vienna\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(2)\n                .matches(l -> l.stream().anyMatch(c -> \"Beethoven\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Mozart\".equals(c.lastName())));\n\n        tester.documentName(\"composers-query\").variable(\"country\", \"Russia\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(1)\n                .matches(l -> l.stream().anyMatch(c -> \"Rachmaninoff\".equals(c.lastName())));\n    }\n\n    @Test\n    @Order(0)", "    public void getPianists()\n    {\n        tester.documentName(\"composers-query\").variable(\"instrument\", \"Piano\").execute()\n                .path(\"composers\").entityList(Composer.class)\n                .hasSize(5)\n                .matches(l -> l.stream().anyMatch(c -> \"Beethoven\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Schumann\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Rachmaninoff\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Ravel\".equals(c.lastName())))\n                .matches(l -> l.stream().anyMatch(c -> \"Cage\".equals(c.lastName())));\n    }\n\n    @Test\n    @Order(0)", "    public void getCompositionsInCMinor()\n    {\n        tester.documentName(\"compositions-query\").variable(\"key\", \"Cm\").execute()\n                .path(\"composers[*].compositions\")\n                .entityList(new ParameterizedTypeReference<List<Composition>>()\n                {\n                })\n                .matches(l -> l.stream().flatMap(List::stream).count() == 2)\n                .matches(l -> l.stream().flatMap(List::stream).anyMatch(c -> \"Symphony No. 5\".equals(c.title())))\n                .matches(l -> l.stream().flatMap(List::stream).anyMatch(c -> \"Piano Concerto No. 2\".equals(c.title())));\n    }\n\n    @Test\n    @Order(1)", "    public void addComposer()\n    {\n        ComposerInput input = new ComposerInput(\"Charles\",\n                                                \"Ives\",\n                                                LocalDate.of(1874, 10, 20),\n                                                new Location(\"Danbury\", \"United States\"),\n                                                new Instrument(\"Piano\", InstrumentType.KEYBOARD),\n                                                POST_MODERN);\n\n        addedComposerId = tester.documentName(\"add-composer\")\n                .variable(\"composer\", input)\n                .execute()\n                .path(\"createComposer.id\")\n                .entity(Integer.class)\n                .get();\n\n        tester.documentName(\"get-composer-by-id\")\n                .variable(\"id\", addedComposerId)\n                .execute()\n                .path(\"composer\")\n                .entity(Composer.class)\n                .matches(c -> \"Ives\".equals(c.lastName()))\n                .matches(c -> \"Danbury\".equals(c.location().city()));\n    }\n\n    @Test\n    @Order(2)", "    public void updateComposer()\n    {\n        ComposerInput input = new ComposerInput(null, \"Ives\", null, new Location(\"New York\", \"United States\"), null, null);\n        tester.documentName(\"update-composer\")\n                .variable(\"composer\", input)\n                .variable(\"id\", addedComposerId)\n                .execute()\n                .path(\"updateComposer.id\")\n                .entity(Integer.class)\n                .matches(addedComposerId::equals);\n\n        tester.documentName(\"get-composer-by-id\")\n                .variable(\"id\", addedComposerId)\n                .execute()\n                .path(\"composer\")\n                .entity(Composer.class)\n                .matches(c -> \"Ives\".equals(c.lastName()))\n                .matches(c -> \"New York\".equals(c.location().city()));\n    }\n\n    @Test\n    @Order(3)", "    public void addCompositions()\n    {\n        CompositionInput input = new CompositionInput(\"Piece\", \"Central Park in the Dark\", \"A#m\", null, null);\n\n        tester.documentName(\"add-compositions\")\n                .variable(\"composerId\", addedComposerId)\n                .variable(\"compositions\", List.of(input))\n                .execute()\n                .path(\"addCompositions\")\n                .entityList(Composition.class)\n                .matches(l -> l.stream().anyMatch(c -> \"Central Park in the Dark\".equals(c.title())));\n\n\n        tester.documentName(\"compositions-query\")\n                .variable(\"lastName\", \"Ives\")\n                .execute()\n                .path(\"composers[*].compositions\")\n                .entityList(new ParameterizedTypeReference<List<Composition>>()\n                {\n                })\n                .matches(l -> l.stream().flatMap(List::stream)\n                        .anyMatch(c -> \"Central Park in the Dark\".equals(c.title())));\n    }\n\n    @Test\n    @Order(4)", "    public void deleteComposition()\n    {\n        tester.documentName(\"delete-composition\")\n                .variable(\"composerId\", addedComposerId)\n                .variable(\"title\", \"Central Park in the Dark\")\n                .executeAndVerify();\n\n        tester.documentName(\"compositions-query\")\n                .variable(\"lastName\", \"Ives\")\n                .execute()\n                .path(\"composers[*].compositions\")\n                .entityList(new ParameterizedTypeReference<List<Composition>>()\n                {\n                })\n                .matches(l -> l.stream().mapToLong(List::size).sum() == 0);\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/ComposersGraphQLServer.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example;\n", "package bnymellon.jpe.graphql.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ComposersGraphQLServer\n{\n    public static void main(String[] args)\n    {\n        SpringApplication.run(ComposersGraphQLServer.class, args);\n    }\n}\n", "    public static void main(String[] args)\n    {\n        SpringApplication.run(ComposersGraphQLServer.class, args);\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/ComposersConfig.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example;\n", "package bnymellon.jpe.graphql.example;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.graphql.execution.RuntimeWiringConfigurer;\n\nimport bnymellon.jpe.graphql.kata.CoercingDate;\nimport bnymellon.jpe.graphql.kata.CoercingKey;\nimport graphql.schema.GraphQLScalarType;\n", "import graphql.schema.GraphQLScalarType;\n\n@Configuration\npublic class ComposersConfig\n{\n    @Bean\n    RuntimeWiringConfigurer runtimeWiringConfigurer()\n    {\n        return wiringBuilder -> wiringBuilder\n                .scalar(GraphQLScalarType.newScalar().name(\"Date\").coercing(new CoercingDate()).build())\n                .scalar(GraphQLScalarType.newScalar().name(\"Key\").coercing(new CoercingKey()).build());\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/dao/ComposerRepository.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.dao;\n", "package bnymellon.jpe.graphql.example.dao;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.NoResultException;\nimport javax.persistence.PersistenceContext;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;", "import java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport org.springframework.graphql.data.GraphQlRepository;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport bnymellon.jpe.graphql.example.entities.ComposerEntity;\nimport bnymellon.jpe.graphql.example.entities.CompositionEntity;\nimport bnymellon.jpe.graphql.example.entities.InstrumentEntity;\nimport bnymellon.jpe.graphql.example.entities.LocationEntity;", "import bnymellon.jpe.graphql.example.entities.InstrumentEntity;\nimport bnymellon.jpe.graphql.example.entities.LocationEntity;\nimport bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.ComposerInput;\nimport bnymellon.jpe.graphql.kata.domain.Composition;\nimport bnymellon.jpe.graphql.kata.domain.CompositionInput;\nimport bnymellon.jpe.graphql.kata.domain.Concerto;\nimport bnymellon.jpe.graphql.kata.domain.Instrument;\nimport bnymellon.jpe.graphql.kata.domain.Location;\nimport bnymellon.jpe.graphql.kata.domain.Song;", "import bnymellon.jpe.graphql.kata.domain.Location;\nimport bnymellon.jpe.graphql.kata.domain.Song;\n\n@GraphQlRepository\npublic class ComposerRepository\n{\n    @PersistenceContext\n    private EntityManager manager;\n\n    public List<Composer> allComposers()\n    {\n        List<ComposerEntity> resultList = manager.createQuery(\"\"\"\n                                                                      SELECT DISTINCT c\n                                                                      FROM ComposerEntity c\n                                                                      LEFT JOIN FETCH c.compositions\n                                                                      \"\"\",\n                                                              ComposerEntity.class)\n                .getResultList();\n        return resultList.stream().map(ComposerEntity::toRecord).collect(Collectors.toList());\n    }\n\n    @Transactional", "    public Composer addComposer(ComposerInput composer)\n    {\n        ComposerEntity entity = initializeEntity(new ComposerEntity(), composer);\n        manager.persist(entity);\n        return entity.toRecord();\n    }\n\n    @Transactional\n    public Composer updateComposer(int id, ComposerInput composer)\n    {\n        ComposerEntity entity = initializeEntity(manager.find(ComposerEntity.class, id), composer);\n        manager.persist(entity);\n        return entity.toRecord();\n    }\n\n    @Transactional\n    public List<Composition> addCompositions(int composerId, List<CompositionInput> compositions)\n    {\n        List<CompositionEntity> entities = compositions.stream()\n                .map(c -> insertAsEntity(composerId, c))\n                .collect(Collectors.toList());\n        return entities.stream().map(CompositionEntity::toRecord).collect(Collectors.toList());\n    }\n\n    @Transactional", "    public Composer updateComposer(int id, ComposerInput composer)\n    {\n        ComposerEntity entity = initializeEntity(manager.find(ComposerEntity.class, id), composer);\n        manager.persist(entity);\n        return entity.toRecord();\n    }\n\n    @Transactional\n    public List<Composition> addCompositions(int composerId, List<CompositionInput> compositions)\n    {\n        List<CompositionEntity> entities = compositions.stream()\n                .map(c -> insertAsEntity(composerId, c))\n                .collect(Collectors.toList());\n        return entities.stream().map(CompositionEntity::toRecord).collect(Collectors.toList());\n    }\n\n    @Transactional", "    public boolean deleteComposition(int composerId, String title)\n    {\n        CompositionEntity entity = manager.createQuery(\"\"\"\n                                                               SELECT DISTINCT comp\n                                                               FROM CompositionEntity comp\n                                                               WHERE comp.title = :title\n                                                               AND comp.composer.id = :composerId\"\"\",\n                                                       CompositionEntity.class)\n                .setParameter(\"composerId\", composerId).setParameter(\"title\", title)\n                .getSingleResult();\n        manager.remove(entity);\n        return true;\n    }\n\n    private ComposerEntity initializeEntity(ComposerEntity entity, ComposerInput composer)\n    {\n        Optional.ofNullable(composer.firstName()).ifPresent(fn -> entity.firstName = fn);\n        Optional.ofNullable(composer.lastName()).ifPresent(ln -> entity.lastName = ln);\n        Optional.ofNullable(composer.dateOfBirth()).ifPresent(d -> entity.dateOfBirth = d);\n        Optional.ofNullable(composer.period()).ifPresent(p -> entity.period = p);\n        Optional.ofNullable(composer.location())\n                .ifPresent(l -> entity.location = existingOrNew(l, this::findLocation, this::createLocation));\n        Optional.ofNullable(composer.primaryInstrument())\n                .ifPresent(i -> entity.primaryInstrument = existingOrNew(i,\n                                                                         this::findInstrument,\n                                                                         this::createInstrument));\n        entity.compositions = Collections.emptyList();\n        return entity;\n    }\n\n    private <T, R> R existingOrNew(T entity, Function<T, R> find, Function<T, R> create)\n    {\n        try\n        {\n            return find.apply(entity);\n        }\n        catch (NoResultException e)\n        {\n            return create.apply(entity);\n        }\n    }\n\n    private LocationEntity findLocation(Location location)\n    {\n        return manager.createQuery(\"\"\"\n                                           SELECT DISTINCT loc\n                                           FROM LocationEntity loc\n                                           WHERE loc.city = :city AND loc.country = :country\"\"\",\n                                   LocationEntity.class)\n                .setParameter(\"city\", location.city())\n                .setParameter(\"country\", location.country())\n                .getSingleResult();\n    }\n\n    private InstrumentEntity findInstrument(Instrument instrument)\n    {\n        return manager.createQuery(\"\"\"\n                                           SELECT DISTINCT inst\n                                           FROM InstrumentEntity inst\n                                           WHERE inst.name = :name AND inst.type = :type\"\"\",\n                                   InstrumentEntity.class)\n                .setParameter(\"name\", instrument.name())\n                .setParameter(\"type\", instrument.type())\n                .getSingleResult();\n    }\n\n    private LocationEntity createLocation(Location location)\n    {\n        LocationEntity locEnt = new LocationEntity();\n        locEnt.city = location.city();\n        locEnt.country = location.country();\n        manager.persist(locEnt);\n        return locEnt;\n    }\n\n    private InstrumentEntity createInstrument(Instrument instrument)\n    {\n        InstrumentEntity instrumentEntity = new InstrumentEntity();\n        instrumentEntity.name = instrument.name();\n        instrumentEntity.type = instrument.type();\n        manager.persist(instrumentEntity);\n        return instrumentEntity;\n    }\n\n    private CompositionEntity insertAsEntity(int composerId, CompositionInput comp)\n    {\n        CompositionEntity entity = new CompositionEntity();\n        entity.composer = manager.find(ComposerEntity.class, composerId);\n        entity.subtype = comp.getClass().getSimpleName();\n        entity.title = comp.title();\n        entity.keyCenter = comp.key();\n\n        entity.soloInstrument = Concerto.class.getSimpleName().equals(comp.subtype())\n                ? existingOrNew(comp.soloInstrument(), this::findInstrument, this::createInstrument)\n                : null;\n        entity.lyrics = Song.class.getSimpleName().equals(comp.subtype()) ? comp.lyrics() : null;\n        manager.persist(entity);\n        return entity;\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/controllers/ComposersController.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.controllers;\n", "package bnymellon.jpe.graphql.example.controllers;\n\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.function.Function;\nimport java.util.function.UnaryOperator;\n\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.impl.factory.Lists;\nimport org.eclipse.collections.impl.list.mutable.ListAdapter;", "import org.eclipse.collections.impl.factory.Lists;\nimport org.eclipse.collections.impl.list.mutable.ListAdapter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.graphql.data.method.annotation.Argument;\nimport org.springframework.graphql.data.method.annotation.MutationMapping;\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.graphql.data.method.annotation.SchemaMapping;\nimport org.springframework.stereotype.Controller;\n", "import org.springframework.stereotype.Controller;\n\nimport bnymellon.jpe.graphql.example.dao.ComposerRepository;\nimport bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.ComposerInput;\nimport bnymellon.jpe.graphql.kata.domain.Composition;\nimport bnymellon.jpe.graphql.kata.domain.CompositionInput;\nimport bnymellon.jpe.graphql.kata.domain.Period;\nimport graphql.GraphqlErrorException;\nimport graphql.execution.DataFetcherResult;", "import graphql.GraphqlErrorException;\nimport graphql.execution.DataFetcherResult;\n\n@Controller\npublic class ComposersController\n{\n    private final ComposerRepository dao;\n\n    @Autowired\n    public ComposersController(ComposerRepository dao)\n    {\n        this.dao = dao;\n    }\n\n    @QueryMapping", "    public Composer composer(@Argument int id)\n    {\n        return ListAdapter.adapt(dao.allComposers()).detect(c -> id == c.id());\n    }\n\n    @QueryMapping\n    public List<Composer> composers(@Argument Period period,\n                                    @Argument String country,\n                                    @Argument String city,\n                                    @Argument String instrument,\n                                    @Argument String lastName)\n    {\n        return selectIfPresent(period, Composer::period)\n                .andThen(selectIfPresent(country, c -> c.location().country()))\n                .andThen(selectIfPresent(city, c -> c.location().city()))\n                .andThen(selectIfPresent(instrument, c -> c.primaryInstrument().name()))\n                .andThen(selectIfPresent(lastName, Composer::lastName))\n                .apply(Lists.adapt(dao.allComposers()));\n    }\n\n    @MutationMapping", "    public Composer createComposer(@Argument ComposerInput composer)\n    {\n        return dao.addComposer(composer);\n    }\n\n    @MutationMapping\n    public Composer updateComposer(@Argument int id, @Argument ComposerInput composer)\n    {\n        return dao.updateComposer(id, composer);\n    }\n\n    @MutationMapping\n    public List<Composition> addCompositions(@Argument int composerId, @Argument List<CompositionInput> compositions)\n    {\n        return dao.addCompositions(composerId, compositions);\n    }\n\n    @MutationMapping\n    public DataFetcherResult<Boolean> deleteComposition(@Argument int composerId, @Argument String title)\n    {\n        try\n        {\n            return DataFetcherResult.<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();\n        }\n        catch (EmptyResultDataAccessException e)\n        {\n            return DataFetcherResult.<Boolean>newResult().data(false)\n                    .error(GraphqlErrorException.newErrorException().message(e.getMessage()).build()).build();\n        }\n    }\n\n    private <T, R> UnaryOperator<MutableList<T>> selectIfPresent(R param, Function<T, R> getter)\n    {\n        return list -> Objects.nonNull(param) ? list.select(c -> param.equals(getter.apply(c))) : list;\n    }\n\n    @SchemaMapping\n    public List<Composition> compositions(Composer composer, @Argument String key, @Argument String subtype)\n    {\n        return selectIfPresent(subtype, (Composition comp) -> comp.getClass().getSimpleName())\n                .andThen(selectIfPresent(key, Composition::key))\n                .apply(Lists.adapt(composer.compositions()));\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/entities/InstrumentEntity.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.entities;\n", "package bnymellon.jpe.graphql.example.entities;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\nimport bnymellon.jpe.graphql.kata.domain.Instrument;\nimport bnymellon.jpe.graphql.kata.domain.InstrumentType;\n\n@Entity", "\n@Entity\n@Table(name = \"instrument\")\npublic class InstrumentEntity\n{\n    @Id\n    public int id;\n    public String name;\n    public InstrumentType type;\n\n    public Instrument toRecord()\n    {\n        return new Instrument(this.name, this.type);\n    }\n}\n", "    public InstrumentType type;\n\n    public Instrument toRecord()\n    {\n        return new Instrument(this.name, this.type);\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/entities/CompositionEntity.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.entities;\n", "package bnymellon.jpe.graphql.example.entities;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToOne;\nimport javax.persistence.Table;\n\nimport bnymellon.jpe.graphql.kata.domain.Composition;", "\nimport bnymellon.jpe.graphql.kata.domain.Composition;\nimport bnymellon.jpe.graphql.kata.domain.Concerto;\nimport bnymellon.jpe.graphql.kata.domain.Piece;\nimport bnymellon.jpe.graphql.kata.domain.Song;\n\n@Entity\n@Table(name = \"composition\")\npublic class CompositionEntity\n{\n    @Id", "public class CompositionEntity\n{\n    @Id\n    public int id;\n    @ManyToOne\n    @JoinColumn(name = \"composer_id\")\n    public ComposerEntity composer;\n    public String subtype;\n    public String title;\n    public String keyCenter;\n    @OneToOne", "    public String title;\n    public String keyCenter;\n    @OneToOne\n    public InstrumentEntity soloInstrument;\n    public String lyrics;\n\n    public Composition toRecord()\n    {\n        return switch (this.subtype)\n                {\n                    case \"Concerto\" -> new Concerto(this.title,\n                                                    this.keyCenter,\n                                                    this.soloInstrument.toRecord());\n                    case \"Song\" -> new Song(this.title, this.keyCenter, this.lyrics);\n                    default -> new Piece(this.title, this.keyCenter);\n                };\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/entities/ComposerEntity.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.entities;\n", "package bnymellon.jpe.graphql.example.entities;\n\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.OneToMany;\nimport javax.persistence.OneToOne;\nimport javax.persistence.Table;", "import javax.persistence.OneToOne;\nimport javax.persistence.Table;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\nimport bnymellon.jpe.graphql.kata.domain.Composer;\nimport bnymellon.jpe.graphql.kata.domain.Period;\n", "import bnymellon.jpe.graphql.kata.domain.Period;\n\n@Entity\n@Table(name = \"composer\")\npublic class ComposerEntity\n{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    public int id;\n    public String firstName;\n    public String lastName;", "    public int id;\n    public String firstName;\n    public String lastName;\n    public LocalDate dateOfBirth;\n    @OneToOne\n    public LocationEntity location;\n    @OneToOne\n    public InstrumentEntity primaryInstrument;\n    public Period period;\n    @OneToMany(mappedBy = \"composer\", fetch = FetchType.EAGER)\n    public List<CompositionEntity> compositions;\n", "    public Period period;\n    @OneToMany(mappedBy = \"composer\", fetch = FetchType.EAGER)\n    public List<CompositionEntity> compositions;\n\n    public Composer toRecord()\n    {\n        return new Composer(this.id,\n                            this.firstName,\n                            this.lastName,\n                            this.dateOfBirth,\n                            Optional.ofNullable(this.location).map(LocationEntity::toRecord).orElse(null),\n                            Optional.ofNullable(this.primaryInstrument).map(InstrumentEntity::toRecord).orElse(null),\n                            this.period,\n                            this.compositions.stream().map(CompositionEntity::toRecord).collect(Collectors.toList()));\n    }\n}\n"]}
{"filename": "graphql-spring-boot-example/src/main/java/bnymellon/jpe/graphql/example/entities/LocationEntity.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.example.entities;\n", "package bnymellon.jpe.graphql.example.entities;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\nimport bnymellon.jpe.graphql.kata.domain.Location;\n\n@Entity\n@Table(name = \"location\")\npublic class LocationEntity\n{\n    @Id", "@Entity\n@Table(name = \"location\")\npublic class LocationEntity\n{\n    @Id\n    public int id;\n    public String city;\n    public String country;\n\n    public Location toRecord()\n    {\n        return new Location(this.city, this.country);\n    }\n}\n", "    public Location toRecord()\n    {\n        return new Location(this.city, this.country);\n    }\n}\n"]}
{"filename": "graphql-kata-solutions/src/test/java/bnymellon/jpe/graphql/kata/GraphQLBaseTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata;\n", "package bnymellon.jpe.graphql.kata;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeAll;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.core.util.DefaultIndenter;", "import com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.core.util.DefaultIndenter;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport graphql.ExecutionInput;\nimport graphql.GraphQL;\n\npublic abstract class GraphQLBaseTest\n{\n    protected GraphQL graphQL;\n    private ObjectWriter writer;\n    private ObjectMapper mapper;\n\n    @BeforeAll", "public abstract class GraphQLBaseTest\n{\n    protected GraphQL graphQL;\n    private ObjectWriter writer;\n    private ObjectMapper mapper;\n\n    @BeforeAll\n    public void setUp()\n    {\n        graphQL = GraphQL.newGraphQL(new ComposersSchema().initSchema()).build();\n        DefaultIndenter indenter = new DefaultIndenter().withLinefeed(\"\\n\");\n        mapper = new ObjectMapper().findAndRegisterModules();\n        writer = mapper.writer(new DefaultPrettyPrinter().withObjectIndenter(indenter).withArrayIndenter(indenter));\n    }\n\n    private String getGqlFile(String path) throws IOException\n    {\n        return new String(this.getClass().getResourceAsStream(path).readAllBytes());\n    }\n\n    protected String executeOperation(String gqlResourcePath) throws IOException\n    {\n        return getJSONResponse(ExecutionInput.newExecutionInput(getGqlFile(gqlResourcePath)));\n    }\n\n    protected String executeOperation(String queryResourcePath, String jsonVariables) throws IOException\n    {\n        Map<String, Object> vars = mapper.readValue(jsonVariables, new TypeReference<>()\n        {\n        });\n        return getJSONResponse(ExecutionInput.newExecutionInput(getGqlFile(queryResourcePath)).variables(vars));\n    }\n\n    private String getJSONResponse(ExecutionInput.Builder input) throws JsonProcessingException\n    {\n        return writer.writeValueAsString(graphQL.execute(input.build()).toSpecification());\n    }\n}\n"]}
{"filename": "graphql-kata-solutions/src/test/java/bnymellon/jpe/graphql/kata/query/QueryComposersTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.query;\n", "package bnymellon.jpe.graphql.kata.query;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport bnymellon.jpe.graphql.kata.GraphQLBaseTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;", "\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * For each test, execute a GraphQL query which will return the expected response and make the test pass.\n */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class QueryComposersTest\n        extends GraphQLBaseTest\n{\n    /**\n     * GraphQL allows a client to customize which fields are included in the response data.\n     * View the JSON test output for the query contained in \"src/test/resources/queries/get-all-composers.graphql\".\n     * Try adding or removing some fields to the query and notice how the response changes.\n     * <p>\n     * Hint: See the schema at \"graphql-composers-domain/src/main/resources/schema.graphqls\" for a description of types and their fields\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#fields\">GraphQL Fields</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryAllComposers() throws IOException\n    {\n        // Check the console output to see the JSON response to the query.\n        System.out.println(\"COMPOSERS: \" + executeOperation(\"/queries/get-all-composers.graphql\"));\n    }\n\n\n    /**\n     * A client can also pass arguments in a query to perform server-side filtering.\n     * Add the missing argument in \"src/test/resources/queries/get-modern-composers.graphql\".\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#enumeration-types\">GraphQL Enumerations</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryModernComposers() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Maurice\",\n                                     \"lastName\" : \"Ravel\",\n                                     \"period\" : \"MODERN\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-modern-composers.graphql\"));\n    }\n\n    /**\n     * By using aliases, a client can request data in a single response for the same query with different arguments.\n     * Add the missing aliases in \"src/test/resources/queries/get-period-composers.graphql\".\n     * Remove any duplication in the query by using GraphQL fragments.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#aliases\">GraphQL Query Aliases</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#fragments\">GraphQL Fragments</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#enumeration-types\">GraphQl Enumerations</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryRenaissanceAndBaroqueComposers() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"renaissanceComposers\" : [\n                                   {\n                                     \"firstName\" : \"Giovanni\",\n                                     \"lastName\" : \"Palestrina\",\n                                     \"period\" : \"RENAISSANCE\"\n                                   }\n                                 ],\n                                 \"baroqueComposers\" : [\n                                   {\n                                     \"firstName\" : \"Johann\",\n                                     \"lastName\" : \"Bach\",\n                                     \"period\" : \"BAROQUE\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-period-composers.graphql\"));\n    }\n\n    /**\n     * Query arguments can be passed dynamically as variables by an operation.\n     * Add the missing \"id\" parameter as both an operation variable\n     * and a query argument in \"src/test/resources/queries/get-composer-by-id.graphql\"\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#operation-name\">GraphQL Operation Names</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#variables\">GraphQL Variables</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerById() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composer\" : {\n                                   \"firstName\" : \"Johann\",\n                                   \"lastName\" : \"Bach\",\n                                   \"location\" : {\n                                     \"city\" : \"Leipzig\",\n                                     \"country\" : \"Germany\"\n                                   }\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composer-by-id.graphql\",\n                                      // Notice the variables sent with the query.\n                                      \"\"\"\n                                              {\n                                                \"id\": 1\n                                              }\"\"\"));\n    }\n\n    /**\n     * Directives allow a client to programmatically include fields in a query response.\n     * Add a directive for the composer's birthday in \"src/test/resources/queries/get-composer-by-id.graphql\"\n     * Notice how a query can easily be used to retrieve different results based on dynamic input.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#default-variables\">GraphQL Default Variables</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#directives\">GraphQL Directives</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#scalar-types\">GraphQL Scalar Types</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerBirthday() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composer\" : {\n                                   \"firstName\" : \"Johann\",\n                                   \"lastName\" : \"Bach\",\n                                   \"dateOfBirth\" : \"1685-03-31\",\n                                   \"location\" : {\n                                     \"city\" : \"Leipzig\",\n                                     \"country\" : \"Germany\"\n                                   }\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composer-by-id.graphql\",\n                                      // TODO: Add a \"withBirthday\" variable.\n                                      \"\"\"\n                                              {\n                                                \"id\": 1,\n                                                \"withBirthday\": \"true\"\n                                              }\"\"\"));\n    }\n\n    /**\n     * GraphQL allows you to add type modifiers to queries to perform server side checks.\n     * It also supports successful query execution with partial results when errors do occur.\n     * Find a non-null field on the Piece type in the composers schema\n     * and add it to the query in \"src/test/resources/queries/get-composers-compositions.graphql\".\n     * Notice how the data and errors are handled in the response when querying for a null value of a non-null field.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/schema/#lists-and-non-null\">GraphQL Non-Null</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#scalar-types\">GraphQL Scalar Types</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposersCompositionsWithNullKey() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"errors\" : [\n                                 {\n                                   \"message\" : \"The field at path '/composers[0]/compositions[0]/key' was declared as a non null type, but the code involved in retrieving data has wrongly returned a null value.  The graphql specification requires that the parent field be set to null, or if that is non nullable that it bubble up null to its parent and so on. The non-nullable type is 'Key' within parent type 'Piece'\",\n                                   \"path\" : [\n                                     \"composers\",\n                                     0,\n                                     \"compositions\",\n                                     0,\n                                     \"key\"\n                                   ],\n                                   \"extensions\" : {\n                                     \"classification\" : \"NullValueInNonNullableField\"\n                                   }\n                                 }\n                               ],\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"John\",\n                                     \"lastName\" : \"Cage\",\n                                     \"compositions\" : [\n                                       null,\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Organ\u00b2 / ASLSP\",\n                                         \"key\" : \"Bb\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Cage\"\n                                              }\"\"\"));\n    }\n\n    /**\n     * GraphQL schemas may have interface types. Clients can use inline fragments to query fields on interface subtypes.\n     * Add the missing inline fragment, as well as the appropriate arguments and variables,\n     * in \"src/test/resources/queries/get-composers-compositions.graphql\"\n     * <p>\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/schema/#interfaces\">GraphQL Interfaces</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#union-types\">GraphQL Union Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#inline-fragments\">GraphQL Inline Fragments</a></li>\n     * </ul>\n     */\n    @Test", "    public void queryComposerCompositionTypes() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Sergei\",\n                                     \"lastName\" : \"Rachmaninoff\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Concerto\",\n                                         \"title\" : \"Piano Concerto No. 2\",\n                                         \"key\" : \"Cm\",\n                                         \"soloInstrument\" : {\n                                           \"name\" : \"Piano\",\n                                           \"type\" : \"KEYBOARD\"\n                                         }\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      // TODO: Add a value for the \"subtype\" variable to fetch Rachmaninoff's concertos.\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Rachmaninoff\",\n                                                \"subtype\": \"Concerto\"\n                                              }\"\"\"));\n\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Clara\",\n                                     \"lastName\" : \"Schumann\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Song\",\n                                         \"title\" : \"Liebesfr\u00fchling\",\n                                         \"key\" : \"C#\",\n                                         \"lyrics\" : \"How often has spring returned\\\\nFor the dead and desolate world!\\\\nHow often was spring greeted on all sides\\\\nBy happy songs in wood and field!\\\\n\\\\nHow often has spring returned!\\\\nBut no spring burgeoned for me:\\\\nThe songs of my heart are silent,\\\\nFor spring can only be brought by you.\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\",\n                                      // TODO: Add a value for the \"subtype\" variable to fetch Schumann's songs.\n                                      \"\"\"\n                                              {\n                                                \"lastName\": \"Schumann\",\n                                                \"subtype\": \"Song\"\n                                              }\"\"\"));\n    }\n}\n"]}
{"filename": "graphql-kata-solutions/src/test/java/bnymellon/jpe/graphql/kata/mutation/MutateComposersTest.java", "chunked_list": ["/*\n *   Copyright 2023 The Bank of New York Mellon.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software", " *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage bnymellon.jpe.graphql.kata.mutation;\n", "package bnymellon.jpe.graphql.kata.mutation;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestMethodOrder;\n", "import org.junit.jupiter.api.TestMethodOrder;\n\nimport bnymellon.jpe.graphql.kata.GraphQLBaseTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n * For each test, execute a GraphQL mutation which will perform the proper update and make the test pass.\n */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)", " */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class MutateComposersTest\n        extends GraphQLBaseTest\n{\n    /**\n     * Just like queries, GraphQL mutations take input arguments and return a customizable response.\n     * The GraphQL type system supports distinct input types which allows validation of arguments against the schema.\n     * Add the missing fields to the inline ComposerInput argument of the mutation in \"src/test/resources/mutations/add-composer.graphql\".\n     * <p>\n     * Hint: See the schema at \"graphql-composers-domain/src/main/resources/schema.graphqls\" for a description of mutations and input types.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#input-types\">GraphQL Input Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(1)", "    public void addComposer() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"createComposer\" : {\n                                   \"id\" : \"9\"\n                                 }\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/add-composer.graphql\"));\n        assertEquals(\n                // TODO: Use this expected query response to fill in the input argument values.\n                \"\"\"\n                        {\n                          \"data\" : {\n                            \"composer\" : {\n                              \"firstName\" : \"Charles\",\n                              \"lastName\" : \"Ives\",\n                              \"dateOfBirth\" : \"1874-10-20\",\n                              \"location\" : {\n                                \"city\" : \"Danbury\",\n                                \"country\" : \"United States\"\n                              }\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/queries/get-composer-by-id.graphql\", \"\"\"\n                        {\n                           \"id\" : \"9\",\n                           \"withBirthday\" : true\n                        }\"\"\"));\n    }\n\n    /**\n     * GraphQL mutations can be used for updates as well as creation/insertion.\n     * Depending on the server-side implementation, mutations can also return partial results with errors.\n     * Add variables to the named operation in \"src/test/resources/mutations/update-composer.graphql\"\n     * and modify the JSON input variables below.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * <li><a href=\"https://graphql.org/learn/schema/#input-types\">GraphQL Input Types</a></li>\n     * <li><a href=\"https://graphql.org/learn/queries/#arguments\">GraphQL Arguments</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(2)", "    public void updateLocationAndDateOfBirth() throws IOException\n    {\n        assertEquals(\n                // Notice the results.\n                \"\"\"\n                        {\n                          \"errors\" : [\n                            {\n                              \"message\" : \"You cannot change an existing date of birth.\",\n                              \"locations\" : [\n                                {\n                                  \"line\" : 16,\n                                  \"column\" : 46\n                                }\n                              ],\n                              \"extensions\" : {\n                                \"classification\" : \"ValidationError\"\n                              }\n                            }\n                          ],\n                          \"data\" : {\n                            \"updateComposer\" : {\n                              \"id\" : \"9\"\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/mutations/update-composer.graphql\",\n                                 // TODO: Add a location to this update based on the expected response.\n                                 // See what happens when you try to modify an existing dateOfBirth.\n                                 \"\"\"\n                                         {\n                                           \"id\" : \"9\",\n                                           \"composer\" : {\n                                               \"lastName\" : \"Ives\",\n                                               \"dateOfBirth\": \"2021-11-04\",\n                                               \"location\" : { \"city\" : \"New York\", \"country\" : \"United States\" }\n                                           }\n                                         }\"\"\"));\n        assertEquals(\n                // TODO: Use this expected query response to fill in the input argument values.\n                // Notice the location and dateOfBirth values after the attempted update.\n                \"\"\"\n                        {\n                          \"data\" : {\n                            \"composer\" : {\n                              \"firstName\" : \"Charles\",\n                              \"lastName\" : \"Ives\",\n                              \"dateOfBirth\" : \"1874-10-20\",\n                              \"location\" : {\n                                \"city\" : \"New York\",\n                                \"country\" : \"United States\"\n                              }\n                            }\n                          }\n                        }\"\"\",\n                executeOperation(\"/queries/get-composer-by-id.graphql\", \"\"\"\n                        {\n                           \"id\" : \"9\",\n                           \"withBirthday\" : true\n                        }\"\"\"));\n    }\n\n    /**\n     * GraphQL Mutations can also be written as named operations with dynamic input variables.\n     * Convert the mutation in \"src/test/resources/mutations/add-compositions.graphql\" to a named operation\n     * and add the missing \"composerId\" and \"compositions\" parameters as both an operation variables\n     * and as mutation arguments.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#operation-name\">GraphQL Operation Names</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(3)", "    public void addCompositions() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"addCompositions\" : [\n                                   {\n                                     \"__typename\" : \"Piece\",\n                                     \"title\" : \"Central Park in the Dark\"\n                                   },\n                                   {\n                                     \"__typename\" : \"Concerto\",\n                                     \"title\" : \"Emerson Concerto\"\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/add-compositions.graphql\",\n                                      // Notice the input variables already provided to be sent with the mutation.\n                                      \"\"\"\n                                              {\n                                                 \"composerId\" : \"9\",\n                                                 \"compositions\" : [{\n                                                         \"subtype\" : \"Piece\",\n                                                         \"title\" : \"Central Park in the Dark\",\n                                                         \"key\" : \"A#m\"\n                                                     },{\n                                                         \"subtype\" : \"Concerto\",\n                                                         \"title\" : \"Emerson Concerto\",\n                                                         \"key\" : \"F\",\n                                                         \"soloInstrument\" : {\n                                                             \"name\" : \"Piano\",\n                                                             \"type\" : \"KEYBOARD\"\n                                                         }\n                                                     }]\n                                              }\"\"\"));\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Charles\",\n                                     \"lastName\" : \"Ives\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Central Park in the Dark\",\n                                         \"key\" : \"A#m\"\n                                       },\n                                       {\n                                         \"__typename\" : \"Concerto\",\n                                         \"title\" : \"Emerson Concerto\",\n                                         \"key\" : \"F\",\n                                         \"soloInstrument\" : {\n                                           \"name\" : \"Piano\",\n                                           \"type\" : \"KEYBOARD\"\n                                         }\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\", \"\"\"\n                             {\n                                \"lastName\" : \"Ives\"\n                             }\"\"\"));\n    }\n\n    /**\n     * Finally, GraphQL mutations are used for deleting data.\n     * All the principles used in \"create\" and \"update\" mutations apply here as well.\n     * Make the appropriate modifications to \"src/test/resources/mutations/delete-composition.graphql\".\n     * Update the JSON input variables below to delete \"Emerson Concerto\" by Charles Ives.\n     *\n     * @see <ul>\n     * <li><a href=\"https://graphql.org/learn/queries/#mutations\">GraphQL Mutations</a></li>\n     * </ul>\n     */\n    @Test\n    @Order(4)", "    public void deleteComposition() throws IOException\n    {\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"deleteComposition\" : true\n                               }\n                             }\"\"\",\n                     executeOperation(\"/mutations/delete-composition.graphql\",\n                                      // TODO: Add \"composerId\" and \"title\" variables.\n                                      \"\"\"\n                                              {\n                                                 \"composerId\" : \"9\",\n                                                 \"title\" : \"Emerson Concerto\"\n                                              }\"\"\"));\n        assertEquals(\"\"\"\n                             {\n                               \"data\" : {\n                                 \"composers\" : [\n                                   {\n                                     \"firstName\" : \"Charles\",\n                                     \"lastName\" : \"Ives\",\n                                     \"compositions\" : [\n                                       {\n                                         \"__typename\" : \"Piece\",\n                                         \"title\" : \"Central Park in the Dark\",\n                                         \"key\" : \"A#m\"\n                                       }\n                                     ]\n                                   }\n                                 ]\n                               }\n                             }\"\"\",\n                     executeOperation(\"/queries/get-composers-compositions.graphql\", \"\"\"\n                             {\n                                \"lastName\" : \"Ives\"\n                             }\"\"\"));\n    }\n}\n"]}
