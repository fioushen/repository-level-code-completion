{"filename": "src/main/java/org/example/Application.java", "chunked_list": ["package org.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author zeymo\n */\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n", "@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n"]}
{"filename": "src/main/java/org/example/WebMvcConfigurer.java", "chunked_list": ["package org.example;\n\nimport org.example.controller.interceptor.AuthInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n\n/**\n * @author zeymo\n */", " * @author zeymo\n */\n@Component\npublic class WebMvcConfigurer implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer {\n    private final AuthInterceptor authInterceptor;\n\n    @Autowired\n    public WebMvcConfigurer(AuthInterceptor authInterceptor) {\n        this.authInterceptor = authInterceptor;\n    }\n\n    @Override", "    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(authInterceptor);\n    }\n}\n"]}
{"filename": "src/main/java/org/example/StreamCallbackListener.java", "chunked_list": ["package org.example;\n\nimport org.example.callback.robot.RobotMsgCallbackConsumer;\nimport com.dingtalk.open.app.api.OpenDingTalkClient;\nimport com.dingtalk.open.app.api.OpenDingTalkStreamClientBuilder;\nimport com.dingtalk.open.app.api.security.AuthClientCredential;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * @author zeymo\n */\n@Component\npublic class StreamCallbackListener {\n    @Value(\"${app.appKey}\")\n    private String appKey;\n\n    @Value(\"${app.appSecret}\")\n    private String appSecret;\n\n    @Value(\"${robot.msg.topic}\")\n    private String robotMsgTopic;\n\n    private RobotMsgCallbackConsumer robotMsgCallbackConsumer;\n\n    public StreamCallbackListener(@Autowired RobotMsgCallbackConsumer robotMsgCallbackConsumer) {\n        this.robotMsgCallbackConsumer = robotMsgCallbackConsumer;\n    }\n\n    @PostConstruct", "public class StreamCallbackListener {\n    @Value(\"${app.appKey}\")\n    private String appKey;\n\n    @Value(\"${app.appSecret}\")\n    private String appSecret;\n\n    @Value(\"${robot.msg.topic}\")\n    private String robotMsgTopic;\n\n    private RobotMsgCallbackConsumer robotMsgCallbackConsumer;\n\n    public StreamCallbackListener(@Autowired RobotMsgCallbackConsumer robotMsgCallbackConsumer) {\n        this.robotMsgCallbackConsumer = robotMsgCallbackConsumer;\n    }\n\n    @PostConstruct", "    public void init() throws Exception {\n        // init stream client\n        OpenDingTalkClient client = OpenDingTalkStreamClientBuilder\n                .custom()\n                .credential(new AuthClientCredential(appKey, appSecret))\n                .registerCallbackListener(robotMsgTopic, robotMsgCallbackConsumer)\n                .build();\n        client.start();\n    }\n}\n"]}
{"filename": "src/main/java/org/example/model/AtUser.java", "chunked_list": ["package org.example.model;\n\nimport lombok.Data;\n\n/**\n * @author feiyin\n * @date 2023/6/30\n */\n@Data\npublic class AtUser {\n\n    private String dingtalkId;\n\n    private String staffId;\n\n}\n", "@Data\npublic class AtUser {\n\n    private String dingtalkId;\n\n    private String staffId;\n\n}\n"]}
{"filename": "src/main/java/org/example/model/DingTalkBotMessage.java", "chunked_list": ["package org.example.model;\n\nimport lombok.Data;\n\nimport java.util.List;\n\n/**\n * @author feiyin\n * @date 2023/6/30\n * \u53c2\u8003\u9489\u9489\u673a\u5668\u4eba\u5b98\u65b9\u8bf4\u660e @see <a href=https://open.dingtalk.com/document/orgapp/the-application-robot-in-the-enterprise-sends-group-chat-messages/>", " * @date 2023/6/30\n * \u53c2\u8003\u9489\u9489\u673a\u5668\u4eba\u5b98\u65b9\u8bf4\u660e @see <a href=https://open.dingtalk.com/document/orgapp/the-application-robot-in-the-enterprise-sends-group-chat-messages/>\n */\n@Data\npublic class DingTalkBotMessage {\n\n    private String conversationId;\n\n    private List<AtUser> atUsers;\n\n    private String chatbotCorpId;\n\n\n    private String chatbotUserId;\n\n    private String msgId;\n\n    private String senderNick;\n\n    private String isAdmin;\n\n    private String senderStaffId;\n\n    private Long sessionWebhookExpiredTime;\n\n    private Long createAt;\n\n    private String senderCorpId;\n\n    private String conversationType;\n\n    private String  senderId;\n\n    private String conversationTitle;\n\n    private Boolean isInAtList;\n\n    private Text text;\n\n    private String msgtype;\n\n}\n"]}
{"filename": "src/main/java/org/example/model/Text.java", "chunked_list": ["package org.example.model;\n\nimport lombok.Data;\n\n/**\n * @author feiyin\n * @date 2023/6/30\n */\n@Data\npublic class Text {\n\n    private String content;\n}\n", "@Data\npublic class Text {\n\n    private String content;\n}\n"]}
{"filename": "src/main/java/org/example/callback/robot/RobotMsgCallbackConsumer.java", "chunked_list": ["package org.example.callback.robot;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.example.model.DingTalkBotMessage;\nimport org.example.model.Text;\nimport org.example.service.RobotGroupMessagesService;\nimport com.dingtalk.open.app.api.callback.OpenDingTalkCallbackListener;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author zeymo\n */\n@Slf4j\n@Component\npublic class RobotMsgCallbackConsumer implements OpenDingTalkCallbackListener<DingTalkBotMessage, JSONObject> {\n    private RobotGroupMessagesService robotGroupMessagesService;\n\n    @Autowired\n    public RobotMsgCallbackConsumer(RobotGroupMessagesService robotGroupMessagesService) {\n        this.robotGroupMessagesService = robotGroupMessagesService;\n    }\n\n    /**\n     * https://open.dingtalk.com/document/orgapp/the-application-robot-in-the-enterprise-sends-group-chat-messages\n     *\n     * @param message\n     * @return\n     */\n    @Override", "public class RobotMsgCallbackConsumer implements OpenDingTalkCallbackListener<DingTalkBotMessage, JSONObject> {\n    private RobotGroupMessagesService robotGroupMessagesService;\n\n    @Autowired\n    public RobotMsgCallbackConsumer(RobotGroupMessagesService robotGroupMessagesService) {\n        this.robotGroupMessagesService = robotGroupMessagesService;\n    }\n\n    /**\n     * https://open.dingtalk.com/document/orgapp/the-application-robot-in-the-enterprise-sends-group-chat-messages\n     *\n     * @param message\n     * @return\n     */\n    @Override", "    public JSONObject execute(DingTalkBotMessage message) {\n        try {\n            Text text = message.getText();\n            if (text != null) {\n                String msg = text.getContent();\n                log.info(\"receive bot message from user={}, msg={}\", message.getSenderId(), msg);\n                String openConversationId = message.getConversationId();\n                try {\n                    //\u53d1\u9001\u673a\u5668\u4eba\u6d88\u606f\n                    robotGroupMessagesService.send(openConversationId, \"hello\");\n                } catch (Exception e) {\n                    log.error(\"send group message by robot error:\" + e.getMessage(), e);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"receive group message by robot error:\" + e.getMessage(), e);\n        }\n        return new JSONObject();\n    }\n}\n"]}
{"filename": "src/main/java/org/example/controller/interceptor/AuthInterceptor.java", "chunked_list": ["package org.example.controller.interceptor;\n\nimport org.example.service.AccessTokenService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.lang.reflect.Method;\nimport java.nio.file.Paths;", "import java.lang.reflect.Method;\nimport java.nio.file.Paths;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n * @author zeymo\n */\n@Slf4j\n@Component\npublic class AuthInterceptor implements HandlerInterceptor, BeanPostProcessor {\n    private final AccessTokenService accessTokenService;\n    private final Set<String> needAuthUri = new HashSet<>(100);\n\n    @Autowired\n    public AuthInterceptor(AccessTokenService accessTokenService) {\n        this.accessTokenService = accessTokenService;\n    }\n\n    @Override", "@Slf4j\n@Component\npublic class AuthInterceptor implements HandlerInterceptor, BeanPostProcessor {\n    private final AccessTokenService accessTokenService;\n    private final Set<String> needAuthUri = new HashSet<>(100);\n\n    @Autowired\n    public AuthInterceptor(AccessTokenService accessTokenService) {\n        this.accessTokenService = accessTokenService;\n    }\n\n    @Override", "    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if (!isNeedAuthRequest(request)) {\n            return true;\n        }\n\n        if (accessTokenService.isTokenNearlyExpired()) {\n            // server token expired, not client, so not return 401\n            response.setStatus(500);\n            response.getWriter().write(\"server token is expired, please try later.\");\n            log.info(\"request block by token expired, uri={}.\", request.getRequestURI());\n            return false;\n        }\n\n        return true;\n    }\n\n    private boolean isNeedAuthRequest(HttpServletRequest request) {\n        return needAuthUri.contains(request.getRequestURI());\n    }\n\n    @Override", "    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        Class<?> beanClass = bean.getClass();\n        if (!beanClass.isAnnotationPresent(RestController.class)) {\n            return bean;\n        }\n\n        if (!beanClass.isAnnotationPresent(TokenRequired.class)) {\n            return bean;\n        }\n\n        String root = \"\";", "        if (beanClass.isAnnotationPresent(RequestMapping.class)) {\n            root = beanClass.getAnnotation(RequestMapping.class).value()[0];\n        }\n\n        for (Method method : bean.getClass().getMethods()) {\n            String methodPath;\n            if (method.isAnnotationPresent(PostMapping.class)) {\n                methodPath = method.getAnnotation(PostMapping.class).value()[0];\n            } else if (method.isAnnotationPresent(GetMapping.class)) {\n                methodPath = method.getAnnotation(GetMapping.class).value()[0];\n            } else {\n                continue;\n            }\n\n            String completePath = Paths.get(root, methodPath).toString();\n            needAuthUri.add(completePath);\n            log.info(\"AuthInterceptor add need auth path={}\", completePath);\n        }\n\n        return bean;\n    }\n}\n", "            } else if (method.isAnnotationPresent(GetMapping.class)) {\n                methodPath = method.getAnnotation(GetMapping.class).value()[0];\n            } else {\n                continue;\n            }\n\n            String completePath = Paths.get(root, methodPath).toString();\n            needAuthUri.add(completePath);\n            log.info(\"AuthInterceptor add need auth path={}\", completePath);\n        }\n\n        return bean;\n    }\n}\n"]}
{"filename": "src/main/java/org/example/controller/interceptor/TokenRequired.java", "chunked_list": ["package org.example.controller.interceptor;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author zeymo\n */", " * @author zeymo\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TokenRequired {\n}\n"]}
{"filename": "src/main/java/org/example/service/RobotGroupMessagesService.java", "chunked_list": ["package org.example.service;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.aliyun.dingtalkrobot_1_0.Client;\nimport com.aliyun.dingtalkrobot_1_0.models.OrgGroupSendHeaders;\nimport com.aliyun.dingtalkrobot_1_0.models.OrgGroupSendRequest;\nimport com.aliyun.dingtalkrobot_1_0.models.OrgGroupSendResponse;\nimport com.aliyun.tea.TeaException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.util.Objects;\n\n/**\n * @author zeymo", "/**\n * @author zeymo\n */\n@Slf4j\n@Service\npublic class RobotGroupMessagesService {\n    private Client robotClient;\n    private final AccessTokenService accessTokenService;\n\n    @Value(\"${robot.code}\")\n    private String robotCode;\n\n    @Autowired\n    public RobotGroupMessagesService(AccessTokenService accessTokenService) {\n        this.accessTokenService = accessTokenService;\n    }\n\n    @PostConstruct", "    public void init() throws Exception {\n        com.aliyun.teaopenapi.models.Config config = new com.aliyun.teaopenapi.models.Config();\n        config.protocol = \"https\";\n        config.regionId = \"central\";\n        robotClient = new Client(config);\n    }\n\n    /**\n     * send message to group with openConversationId\n     *\n     * @param openConversationId conversationId\n     * @return messageId\n     * @throws Exception e\n     */", "    public String send(String openConversationId, String text) throws Exception {\n        OrgGroupSendHeaders orgGroupSendHeaders = new OrgGroupSendHeaders();\n        orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());\n\n        OrgGroupSendRequest orgGroupSendRequest = new OrgGroupSendRequest();\n        orgGroupSendRequest.setMsgKey(\"sampleText\");\n        orgGroupSendRequest.setRobotCode(robotCode);\n\n        orgGroupSendRequest.setOpenConversationId(openConversationId);\n\n        JSONObject msgParam = new JSONObject();\n        msgParam.put(\"content\", \"java-getting-start say : \" + text);\n        orgGroupSendRequest.setMsgParam(msgParam.toJSONString());\n", "        try {\n            OrgGroupSendResponse orgGroupSendResponse = robotClient.orgGroupSendWithOptions(orgGroupSendRequest,\n                    orgGroupSendHeaders, new com.aliyun.teautil.models.RuntimeOptions());\n            if (Objects.isNull(orgGroupSendResponse) || Objects.isNull(orgGroupSendResponse.getBody())) {\n                log.error(\"RobotGroupMessagesService_send orgGroupSendWithOptions return error, response={}\",\n                        orgGroupSendResponse);\n                return null;\n            }\n            return orgGroupSendResponse.getBody().getProcessQueryKey();\n        } catch (TeaException e) {\n            log.error(\"RobotGroupMessagesService_send orgGroupSendWithOptions throw TeaException, errCode={}, \" +\n                    \"errorMessage={}\", e.getCode(), e.getMessage(), e);\n            throw e;\n        } catch (Exception e) {\n            log.error(\"RobotGroupMessagesService_send orgGroupSendWithOptions throw Exception\", e);\n            throw e;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/example/service/AccessTokenService.java", "chunked_list": ["package org.example.service;\n\nimport com.aliyun.dingtalkoauth2_1_0.Client;\nimport com.aliyun.dingtalkoauth2_1_0.models.GetAccessTokenRequest;\nimport com.aliyun.dingtalkoauth2_1_0.models.GetAccessTokenResponse;\nimport com.aliyun.dingtalkoauth2_1_0.models.GetAccessTokenResponseBody;\nimport com.aliyun.tea.TeaException;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;", "import lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.util.Objects;\n\n/**", "\n/**\n * @author zeymo\n */\n@Slf4j\n@Service\npublic class AccessTokenService {\n    private Client auth2Client;\n\n    @Value(\"${app.appKey}\")\n    private String appKey;\n\n    @Value(\"${app.appSecret}\")\n    private String appSecret;\n\n    private volatile AccessToken accessToken;\n\n    @Getter\n    @Setter\n    static class AccessToken {\n        private String accessToken;\n        private Long expireTimestamp;\n    }\n\n    /**\n     * init for first accessToken\n     */\n    @PostConstruct", "    public void init() throws Exception {\n        if (Objects.isNull(appKey)) {\n            throw new RuntimeException(\"please set application.properties app.appKey=xxx\");\n        }\n\n        if (Objects.isNull(appSecret)) {\n            throw new RuntimeException(\"please set application.properties app.appSecret=xxx\");\n        }\n\n        com.aliyun.teaopenapi.models.Config config = new com.aliyun.teaopenapi.models.Config();\n        config.protocol = \"https\";\n        config.regionId = \"central\";\n        auth2Client = new Client(config);\n\n        int maxTryTimes = 3;", "        while (maxTryTimes-- > 0) {\n            if (refreshAccessToken()) {\n                break;\n            }\n\n            Thread.sleep(100);\n        }\n\n        if (maxTryTimes <= 0) {\n            throw new RuntimeException(\"fail to get accessToken from remote, try 3 times, please check your appKey\" +\n                    \" and appSecret\");\n        }\n    }\n\n    /**\n     * schedule for refresh token when expired\n     */\n    @Scheduled(fixedRate = 60 * 1000)", "        if (maxTryTimes <= 0) {\n            throw new RuntimeException(\"fail to get accessToken from remote, try 3 times, please check your appKey\" +\n                    \" and appSecret\");\n        }\n    }\n\n    /**\n     * schedule for refresh token when expired\n     */\n    @Scheduled(fixedRate = 60 * 1000)\n    public void checkAccessToken() {", "    public void checkAccessToken() {\n        if (Objects.isNull(accessToken)) {\n            return;\n        }\n\n        // check before expired in 10 minutes\n        long advanceCheckTime = 10 * 60L;\n        if (accessToken.expireTimestamp - System.currentTimeMillis() > advanceCheckTime * 1000L) {\n            return;\n        }\n\n        refreshAccessToken();\n    }\n\n    private Boolean refreshAccessToken() {\n        GetAccessTokenRequest getAccessTokenRequest = new GetAccessTokenRequest()\n                .setAppKey(appKey)\n                .setAppSecret(appSecret);\n", "        try {\n            GetAccessTokenResponse getAccessTokenResponse = auth2Client.getAccessToken(getAccessTokenRequest);\n            if (Objects.isNull(getAccessTokenResponse) || Objects.isNull(getAccessTokenResponse.body)) {\n                log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken return error,\" +\n                        \" response={}\", getAccessTokenResponse);\n                return false;\n            }\n\n            GetAccessTokenResponseBody body = getAccessTokenResponse.body;\n            if (Objects.isNull(body.accessToken) || Objects.isNull(body.expireIn)) {\n                log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken invalid token, token or expireIn\" +\n                        \" maybe null, accessToken={}, expireIn={}\", body.accessToken, body.expireIn);\n                return false;\n            }\n\n            AccessToken accessToken = new AccessToken();\n            accessToken.setAccessToken(body.accessToken);\n            accessToken.setExpireTimestamp(System.currentTimeMillis() + body.expireIn * 1000);\n            this.accessToken = accessToken;\n            log.info(\"refresh access token success, expireIn={}\", body.expireIn);\n            return true;\n        } catch (TeaException e) {\n            log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken throw \" +\n                    \"TeaException, errCode={}, errorMessage={}\", e.getCode(), e.getMessage(), e);\n            return false;\n        } catch (Exception e) {\n            log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken throw Exception\", e);\n            return false;\n        }\n    }\n", "            if (Objects.isNull(body.accessToken) || Objects.isNull(body.expireIn)) {\n                log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken invalid token, token or expireIn\" +\n                        \" maybe null, accessToken={}, expireIn={}\", body.accessToken, body.expireIn);\n                return false;\n            }\n\n            AccessToken accessToken = new AccessToken();\n            accessToken.setAccessToken(body.accessToken);\n            accessToken.setExpireTimestamp(System.currentTimeMillis() + body.expireIn * 1000);\n            this.accessToken = accessToken;\n            log.info(\"refresh access token success, expireIn={}\", body.expireIn);\n            return true;\n        } catch (TeaException e) {\n            log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken throw \" +\n                    \"TeaException, errCode={}, errorMessage={}\", e.getCode(), e.getMessage(), e);\n            return false;\n        } catch (Exception e) {\n            log.error(\"AccessTokenService_getTokenFromRemoteServer getAccessToken throw Exception\", e);\n            return false;\n        }\n    }\n", "    public String getAccessToken() {\n        return accessToken.accessToken;\n    }\n\n    public boolean isTokenNearlyExpired() {\n        // if expired timestamp nearly 5000ms, should not send requests\n        return accessToken.expireTimestamp < System.currentTimeMillis() - 5000L;\n    }\n}\n"]}
