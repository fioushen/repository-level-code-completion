{"filename": "src/test/java/com/eyu/MyChatGptApplicationTests.java", "chunked_list": ["package com.eyu;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass MyChatGptApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}"]}
{"filename": "src/main/java/com/eyu/MyChatGptApplication.java", "chunked_list": ["package com.eyu;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MyChatGptApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MyChatGptApplication.class, args);\n    }\n\n}", "    public static void main(String[] args) {\n        SpringApplication.run(MyChatGptApplication.class, args);\n    }\n\n}"]}
{"filename": "src/main/java/com/eyu/entity/bo/ChatBO.java", "chunked_list": ["package com.eyu.entity.bo;\n\nimport lombok.Data;\n\n/**\n * \u804a\u5929BO\n *\n * @author zqzq3\n * @date 2023/02/01\n */", " * @date 2023/02/01\n */\n@Data\npublic class ChatBO {\n    /**\n     * \u4f1a\u8bddid\n     */\n    private String sessionId;\n    /**\n     * \u95ee\u9898\n     */\n    private String prompt;\n}\n"]}
{"filename": "src/main/java/com/eyu/entity/model/ChatRequest.java", "chunked_list": ["package com.eyu.entity.model;\n\nimport com.eyu.entity.model.enums.ModelType;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Collections;\nimport java.util.List;", "import java.util.Collections;\nimport java.util.List;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ChatRequest {\n\n    private String model = ModelType.GPT_3_5_TURBO.getName();\n    private List<ChatMessage> messages;\n    private Float temperature;\n    private Float top_p;\n    private Integer n;\n    private Integer max_tokens;\n    private Float presence_penalty;\n    private Float frequency_penalty;\n    private String user;\n\n    public ChatRequest(ChatMessage chatMessage) {\n        this.messages = Collections.singletonList(chatMessage);\n    }\n\n    public ChatRequest(List<ChatMessage> messages) {\n        this.messages = messages;\n    }\n\n    public ChatRequest(String message) {\n        this.messages = Collections.singletonList(new ChatMessage(message));\n    }\n\n}\n"]}
{"filename": "src/main/java/com/eyu/entity/model/ChatResponse.java", "chunked_list": ["package com.eyu.entity.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n@Data", "\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ChatResponse {\n\n    private String id;\n    private String object;\n    private Long created;\n    private List<Choice> choices;\n    private Error error;\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor", "    public static class Choice {\n\n        private Integer index;\n        private ChatMessage message;\n        private String finish_reason;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class Usage {\n\n        private Integer prompt_tokens;\n        private Integer completion_tokens;\n        private Integer total_tokens;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor", "    public static class Usage {\n\n        private Integer prompt_tokens;\n        private Integer completion_tokens;\n        private Integer total_tokens;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class Error {\n\n        private String message;\n        private String type;\n        private String code;\n    }\n}\n", "    public static class Error {\n\n        private String message;\n        private String type;\n        private String code;\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/entity/model/ChatMessage.java", "chunked_list": ["package com.eyu.entity.model;\n\nimport com.eyu.entity.model.enums.MessageRole;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ChatMessage {\n\n    private String role = MessageRole.USER.getName();\n    private String content;\n\n    public ChatMessage(String content) {\n        this.content = content;\n    }\n}", "@NoArgsConstructor\n@AllArgsConstructor\npublic class ChatMessage {\n\n    private String role = MessageRole.USER.getName();\n    private String content;\n\n    public ChatMessage(String content) {\n        this.content = content;\n    }\n}"]}
{"filename": "src/main/java/com/eyu/entity/model/enums/MessageRole.java", "chunked_list": ["package com.eyu.entity.model.enums;\n\npublic enum MessageRole {\n    USER(\"user\"),\n    SYSTEM(\"system\"),\n    ASSISTANT(\"assistant\")\n    ;\n\n    private final String name;\n\n    MessageRole(String name) {\n        this.name = name;\n    }\n", "    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/entity/model/enums/ModelType.java", "chunked_list": ["package com.eyu.entity.model.enums;\n\npublic enum ModelType {\n    GPT_3_5_TURBO(\"gpt-3.5-turbo\"),\n    GPT_3_5_TURBO_0301(\"gpt-3.5-turbo-0301\"),\n    ;\n\n    private final String name;\n\n    ModelType(String name) {\n        this.name = name;\n    }\n", "    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/config/AccountConfig.java", "chunked_list": ["package com.eyu.config;\n\nimport com.eyu.handler.MessageEventHandler;\nimport com.theokanning.openai.OpenAiService;\nimport lombok.Data;\nimport lombok.extern.slf4j.Slf4j;\nimport net.mamoe.mirai.Bot;\nimport net.mamoe.mirai.BotFactory;\nimport net.mamoe.mirai.auth.BotAuthorization;\nimport net.mamoe.mirai.utils.BotConfiguration;", "import net.mamoe.mirai.auth.BotAuthorization;\nimport net.mamoe.mirai.utils.BotConfiguration;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.Resource;\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * \u5e10\u6237\u914d\u7f6e\n *\n * @author zqzq3\n * @date 2023/02/13\n */\n@Slf4j\n@Data", "@Slf4j\n@Data\n@Component\n@ConfigurationProperties(\"account\")\npublic class AccountConfig {\n    private Long qq;\n    private String password;\n    private Bot qqBot;\n    @Resource\n    private MessageEventHandler messageEventHandler;\n\n    private List<String> apiKey;\n    private List<String> apiKeyPlus;\n    private List<OpenAiService> openAiServiceList;\n    private String basicPrompt;\n    private Integer maxToken;\n    private Double temperature;\n    private String model;\n\n    @PostConstruct", "    public void init() {\n        //ChatGPT\n        model = \"gpt-3.5-turbo\";\n        maxToken = 1024;\n        temperature = 0.8;\n        basicPrompt = \"\u7b80\u6d01\u56de\u7b54\";\n        openAiServiceList = new ArrayList<>();\n        for (String apiKey : apiKey){\n            apiKey = apiKey.trim();\n            if (!\"\".equals(apiKey)){\n                openAiServiceList.add(new OpenAiService(apiKey, Duration.ofSeconds(1000)));\n                log.info(\"apiKey\u4e3a {} \u7684\u8d26\u53f7\u521d\u59cb\u5316\u6210\u529f\", apiKey);\n            }\n        }\n        FixProtocolVersion.fix();\n        //qq\n        //\u767b\u5f55\n        BotConfiguration.MiraiProtocol[] protocolArray = BotConfiguration.MiraiProtocol.values();\n        BotConfiguration.MiraiProtocol protocol = protocolArray[2];\n//        int loginCounts = 1;", "            if (!\"\".equals(apiKey)){\n                openAiServiceList.add(new OpenAiService(apiKey, Duration.ofSeconds(1000)));\n                log.info(\"apiKey\u4e3a {} \u7684\u8d26\u53f7\u521d\u59cb\u5316\u6210\u529f\", apiKey);\n            }\n        }\n        FixProtocolVersion.fix();\n        //qq\n        //\u767b\u5f55\n        BotConfiguration.MiraiProtocol[] protocolArray = BotConfiguration.MiraiProtocol.values();\n        BotConfiguration.MiraiProtocol protocol = protocolArray[2];\n//        int loginCounts = 1;", "//        for (BotConfiguration.MiraiProtocol protocol : miraiProtocols) {\n//            try {\n//                log.warn(\"\u6b63\u5728\u5c1d\u8bd5\u7b2c {} \u6b21\uff0c \u4f7f\u7528 {} \u7684\u65b9\u5f0f\u8fdb\u884c\u767b\u5f55\", loginCounts++, protocol);\n//                qqBot = BotFactory.INSTANCE.newBot(qq, password.trim(), new BotConfiguration(){{setProtocol(protocol);}});\n//                qqBot.login();\n//                log.info(\"\u6210\u529f\u767b\u5f55\u8d26\u53f7\u4e3a {} \u7684qq, \u767b\u9646\u65b9\u5f0f\u4e3a {}\",qq, protocol);\n//                //\u8ba2\u9605\u76d1\u542c\u4e8b\u4ef6\n//                qqBot.getEventChannel().registerListenerHost(this.messageEventHandler);\n//                break;\n//            }catch (Exception e){\n//                log.error(\"\u767b\u9646\u5931\u8d25\uff0cqq\u8d26\u53f7\u4e3a {}, \u767b\u9646\u65b9\u5f0f\u4e3a {} \uff0c\u539f\u56e0\uff1a{}\", qq, protocol, e.getMessage());", "//                if (loginCounts > 3){\n//                    log.error(\"\u7ecf\u8fc7\u591a\u79cd\u767b\u5f55\u65b9\u5f0f\u4ecd\u7136\u767b\u9646\u5931\u8d25\uff0c\u53ef\u80fd\u662f\u5bc6\u7801\u9519\u8bef\u6216\u8005\u53d7\u98ce\u63a7\u5f71\u54cd\uff0c\u8bf7\u5c1d\u8bd5\u4fee\u6539\u5bc6\u7801\u3001\u7ed1\u5b9a\u624b\u673a\u53f7\u7b49\u65b9\u5f0f\u63d0\u9ad8qq\u5b89\u5168\u7cfb\u6570\u6216\u8005\u5f85\u4f1a\u518d\u8bd5\u8bd5\");\n//                    System.exit(-1);\n//                }\n//            }\n//        }\n        int loginCounts = 1;\n        for (int i = 0; i < 3; i++) {\n            try {\n                log.warn(\"\u6b63\u5728\u5c1d\u8bd5\u7b2c {} \u6b21\uff0c \u4f7f\u7528 {} \u7684\u65b9\u5f0f\u8fdb\u884c\u767b\u5f55\", loginCounts++, protocol);\n                // \u5bc6\u7801\u767b\u5f55\n                // qqBot = BotFactory.INSTANCE.newBot(qq, password.trim(), new BotConfiguration(){{setProtocol(protocol);}});\n                qqBot = BotFactory.INSTANCE.newBot(qq, BotAuthorization.byQRCode(), new BotConfiguration(){{setProtocol(protocol);}});\n                qqBot.login();\n                log.info(\"\u6210\u529f\u767b\u5f55\u8d26\u53f7\u4e3a {} \u7684qq, \u767b\u9646\u65b9\u5f0f\u4e3a {}\",qq, protocol);\n                //\u8ba2\u9605\u76d1\u542c\u4e8b\u4ef6\n                qqBot.getEventChannel().registerListenerHost(this.messageEventHandler);\n                break;\n            }catch (Exception e){\n                log.error(\"\u767b\u9646\u5931\u8d25\uff0cqq\u8d26\u53f7\u4e3a {}, \u767b\u9646\u65b9\u5f0f\u4e3a {} \uff0c\u539f\u56e0\uff1a{}\", qq, protocol, e.getMessage());", "            try {\n                log.warn(\"\u6b63\u5728\u5c1d\u8bd5\u7b2c {} \u6b21\uff0c \u4f7f\u7528 {} \u7684\u65b9\u5f0f\u8fdb\u884c\u767b\u5f55\", loginCounts++, protocol);\n                // \u5bc6\u7801\u767b\u5f55\n                // qqBot = BotFactory.INSTANCE.newBot(qq, password.trim(), new BotConfiguration(){{setProtocol(protocol);}});\n                qqBot = BotFactory.INSTANCE.newBot(qq, BotAuthorization.byQRCode(), new BotConfiguration(){{setProtocol(protocol);}});\n                qqBot.login();\n                log.info(\"\u6210\u529f\u767b\u5f55\u8d26\u53f7\u4e3a {} \u7684qq, \u767b\u9646\u65b9\u5f0f\u4e3a {}\",qq, protocol);\n                //\u8ba2\u9605\u76d1\u542c\u4e8b\u4ef6\n                qqBot.getEventChannel().registerListenerHost(this.messageEventHandler);\n                break;\n            }catch (Exception e){\n                log.error(\"\u767b\u9646\u5931\u8d25\uff0cqq\u8d26\u53f7\u4e3a {}, \u767b\u9646\u65b9\u5f0f\u4e3a {} \uff0c\u539f\u56e0\uff1a{}\", qq, protocol, e.getMessage());", "                if (loginCounts > 3){\n                    log.error(\"\u7ecf\u8fc7\u591a\u79cd\u767b\u5f55\u65b9\u5f0f\u4ecd\u7136\u767b\u9646\u5931\u8d25\uff0c\u53ef\u80fd\u662f\u5bc6\u7801\u9519\u8bef\u6216\u8005\u53d7\u98ce\u63a7\u5f71\u54cd\uff0c\u8bf7\u5c1d\u8bd5\u4fee\u6539\u5bc6\u7801\u3001\u7ed1\u5b9a\u624b\u673a\u53f7\u7b49\u65b9\u5f0f\u63d0\u9ad8qq\u5b89\u5168\u7cfb\u6570\u6216\u8005\u5f85\u4f1a\u518d\u8bd5\u8bd5\");\n                    System.exit(-1);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/config/FixProtocolVersion.java", "chunked_list": ["package com.eyu.config;\n\nimport net.mamoe.mirai.utils.BotConfiguration;\n\nimport java.lang.reflect.Field;\nimport java.util.EnumMap;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FixProtocolVersion {\n    public static void fix(){", "\npublic class FixProtocolVersion {\n    public static void fix(){\n        try {\n            Class<?> MiraiProtocolInternal = Class.forName(\"net.mamoe.mirai.internal.utils.MiraiProtocolInternal\");\n            Field field = MiraiProtocolInternal.getFields()[0];\n            Object companion = field.get(Object.class);\n\n            EnumMap<BotConfiguration.MiraiProtocol, Object> protocols = (EnumMap<BotConfiguration.MiraiProtocol, Object>)companion.getClass().getMethod(\"getProtocols$mirai_core\").invoke(companion);\n            Object mac = protocols.get(BotConfiguration.MiraiProtocol.MACOS);\n        /*\n        * apkId: String,\n            id: Long,\n            ver: String,\n            sdkVer: String,\n            miscBitMap: Int,\n            subSigMap: Int,\n            mainSigMap: Int,\n            sign: String,\n            buildTime: Long,\n            ssoVersion: Int,\n            canDoQRCodeLogin: Boolean = false,\n        * */\n            Class<?> macClass = mac.getClass();\n            Map<String, Object> macData = new HashMap<String, Object>(){{\n                put(\"id\", 537128930);\n                put(\"ver\", \"5.8.9\");\n                put(\"sdkVer\", \"6.0.0.2433\");\n                put(\"buildTime\", 1595836208L);\n                put(\"sign\", \"AA 39 78 F4 1F D9 6F F9 91 4A 66 9E 18 64 74 C7\");\n                put(\"ssoVersion\",12);\n                put(\"miscBitMap\", 150470524);\n                put(\"subSigMap\", 66560);\n                put(\"mainSigMap\", 1970400);\n            }};", "            for (Field f : macClass.getFields()) {\n                f.setAccessible(true);\n                if(macData.containsKey(f.getName())){\n                    f.set(mac, macData.get(f.getName()));\n                }\n                f.setAccessible(false);\n            }\n\n            Object pad = protocols.get(BotConfiguration.MiraiProtocol.IPAD);\n            Class<?> padClass = mac.getClass();\n            Map<String, Object> padData = new HashMap<String, Object>(){{\n                put(\"id\", 537151363);\n                put(\"ver\", \"8.9.33.614\");\n                put(\"sdkVer\", \"6.0.0.2433\");\n                put(\"buildTime\", 1640921786L);\n                put(\"sign\", \"AA 39 78 F4 1F D9 6F F9 91 4A 66 9E 18 64 74 C7\");\n                put(\"ssoVersion\",12);\n                put(\"miscBitMap\", 150470524);\n                put(\"subSigMap\", 66560);\n                put(\"mainSigMap\", 1970400);\n            }};", "            for (Field f : padClass.getFields()) {\n                f.setAccessible(true);\n                if(padData.containsKey(f.getName())){\n                    f.set(pad, padData.get(f.getName()));\n                }\n                f.setAccessible(false);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"]}
{"filename": "src/main/java/com/eyu/handler/RedisRateLimiter.java", "chunked_list": ["package com.eyu.handler;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RedisRateLimiter {\n    private static final String KEY_PREFIX = \"rate_limiter:\";\n\n    private static final String PROMPT_KEY_PREFIX = \"UniquePrompt:\";\n    private static final int DEFAULT_LIMIT = 10; // \u6bcf\u5c0f\u65f6\u8bbf\u95ee\u6b21\u6570\u9650\u5236\u7684\u9ed8\u8ba4\u503c\n    private static final int DEFAULT_EXPIRE_TIME = 3600; // \u4e00\u4e2a\u5c0f\u65f6\u7684\u79d2\u6570\u7684\u9ed8\u8ba4\u503c\n\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n", "\n@Component\npublic class RedisRateLimiter {\n    private static final String KEY_PREFIX = \"rate_limiter:\";\n\n    private static final String PROMPT_KEY_PREFIX = \"UniquePrompt:\";\n    private static final int DEFAULT_LIMIT = 10; // \u6bcf\u5c0f\u65f6\u8bbf\u95ee\u6b21\u6570\u9650\u5236\u7684\u9ed8\u8ba4\u503c\n    private static final int DEFAULT_EXPIRE_TIME = 3600; // \u4e00\u4e2a\u5c0f\u65f6\u7684\u79d2\u6570\u7684\u9ed8\u8ba4\u503c\n\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n", "    public boolean isAllowed(String key) {\n        String redisKey = KEY_PREFIX + key;\n        ValueOperations<String, String> ops = redisTemplate.opsForValue();\n\n        // \u83b7\u53d6\u6bcf\u5c0f\u65f6\u8bbf\u95ee\u6b21\u6570\u9650\u5236\u548c\u8fc7\u671f\u65f6\u95f4\u7684\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c\n        int limit = Integer.parseInt(ops.get(\"limit:\" + key) != null ? ops.get(\"limit:\" + key) : String.valueOf(DEFAULT_LIMIT));\n        int expireTime = Integer.parseInt(ops.get(\"expire_time:\" + key) != null ? ops.get(\"expire_time:\" + key) : String.valueOf(DEFAULT_EXPIRE_TIME));\n\n        Long count = ops.increment(redisKey, 1);\n        if (count == 1) {\n            redisTemplate.expire(redisKey, expireTime, TimeUnit.SECONDS);\n        }\n        return count <= limit;\n    }\n", "        if (count == 1) {\n            redisTemplate.expire(redisKey, expireTime, TimeUnit.SECONDS);\n        }\n        return count <= limit;\n    }\n\n    public void setPrompt(String sessionId, String prompt){\n        redisTemplate.opsForValue().set(PROMPT_KEY_PREFIX + sessionId, prompt);\n    }\n\n    public String getPrompt(String sessionId){\n        String prompt = redisTemplate.opsForValue().get(PROMPT_KEY_PREFIX + sessionId);", "    public String getPrompt(String sessionId){\n        String prompt = redisTemplate.opsForValue().get(PROMPT_KEY_PREFIX + sessionId);\n        if (prompt == null || prompt.length()==0){\n            prompt = redisTemplate.opsForValue().get(\"prompt\");\n        }\n        return prompt;\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/handler/MessageEventHandler.java", "chunked_list": ["package com.eyu.handler;\n\nimport com.eyu.entity.bo.ChatBO;\nimport com.eyu.exception.ChatException;\nimport com.eyu.service.InteractService;\nimport com.eyu.util.BotUtil;\nimport net.mamoe.mirai.contact.Contact;\nimport net.mamoe.mirai.contact.MessageTooLargeException;\nimport net.mamoe.mirai.event.EventHandler;\nimport net.mamoe.mirai.event.ListenerHost;", "import net.mamoe.mirai.event.EventHandler;\nimport net.mamoe.mirai.event.ListenerHost;\nimport net.mamoe.mirai.event.events.MessageEvent;\nimport net.mamoe.mirai.message.data.At;\nimport net.mamoe.mirai.message.data.Image;\nimport net.mamoe.mirai.message.data.MessageChain;\nimport net.mamoe.mirai.message.data.MessageChainBuilder;\nimport net.mamoe.mirai.message.data.QuoteReply;\nimport net.mamoe.mirai.utils.ExternalResource;\nimport org.apache.commons.lang3.StringUtils;", "import net.mamoe.mirai.utils.ExternalResource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.stereotype.Component;\nimport javax.annotation.Resource;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Arrays;", "import java.net.URL;\nimport java.util.Arrays;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n/**\n * \u4e8b\u4ef6\u5904\u7406\n *", " * \u4e8b\u4ef6\u5904\u7406\n *\n * @author zqzq3\n * @date 2023/2/1\n */\n@Component\npublic class MessageEventHandler implements ListenerHost {\n    @Resource\n    private InteractService interactService;\n\n    private static final String RESET_WORD = \"\u91cd\u7f6e\u4f1a\u8bdd\";\n\n    private static final String RESET_ALL_WORD = \"RESET ALL\";\n\n    private static final String GPT4_WORD = \"\u9ad8\u7ea7\u6a21\u5f0f\";\n\n    private static final String GPT3_WORD = \"\u666e\u901a\u6a21\u5f0f\";\n\n    private static final String HELP_WORD = \"#\u5e2e\u52a9\";\n\n    private static final String SET_WORD = \"#\u8bbe\u7f6e\";\n\n    private static final String GET_WORD = \"#\u663e\u793a\";\n\n    /**\n     * \u76d1\u542c\u6d88\u606f\u5e76\u628aChatGPT\u7684\u56de\u7b54\u53d1\u9001\u5230\u5bf9\u5e94qq/\u7fa4\n     * \u6ce8\uff1a\u5982\u679c\u662f\u5728\u7fa4\u804a\u5219\u9700@\n     *\n     * @param event \u4e8b\u4ef6 ps:\u6b64\u5904\u662fMessageEvent \u6545\u6240\u6709\u7684\u6d88\u606f\u4e8b\u4ef6\u90fd\u4f1a\u88ab\u76d1\u542c\n     */\n    @EventHandler", "    public void onMessage(@NotNull MessageEvent event){\n        boolean flag = decide(event.getMessage().contentToString());\n        if(flag){\n            return;\n        }\n        ChatBO chatBO = new ChatBO();\n        chatBO.setSessionId(String.valueOf(event.getSubject().getId()));\n        if (event.getBot().getGroups().contains(event.getSubject().getId())) {\n            //\u5982\u679c\u662f\u5728\u7fa4\u804a\n            if (event.getMessage().contains(new At(event.getBot().getId()))) {\n                chatBO.setSessionId(String.valueOf(event.getSender().getId()));\n                //\u5b58\u5728@\u673a\u5668\u4eba\u7684\u6d88\u606f\u5c31\u5411ChatGPT\u63d0\u95ee\n                //\u53bb\u9664@\u518d\u63d0\u95ee\n                String prompt = event.getMessage().contentToString().replace(\"@\" + event.getBot().getId(), \"\").trim();\n                response(event, chatBO, prompt);\n            }\n        } else {\n            //\u4e0d\u662f\u5728\u7fa4\u804a \u5219\u76f4\u63a5\u56de\u590d\n            String prompt = event.getMessage().contentToString().trim();\n            response(event, chatBO, prompt);\n        }\n    }\n\n    private boolean decide(String str) {\n        //\u6b64\u5904\u53ef\u4ee5\u52a0\u5c4f\u853d\u5b57 \u6765\u5c4f\u853d\u4e00\u4e9b\u4e0d\u60f3\u56de\u590d\u7684\u4fe1\u606f\n        return false;\n    }\n\n    private void response(@NotNull MessageEvent event, ChatBO chatBO, String prompt) {", "            if (event.getMessage().contains(new At(event.getBot().getId()))) {\n                chatBO.setSessionId(String.valueOf(event.getSender().getId()));\n                //\u5b58\u5728@\u673a\u5668\u4eba\u7684\u6d88\u606f\u5c31\u5411ChatGPT\u63d0\u95ee\n                //\u53bb\u9664@\u518d\u63d0\u95ee\n                String prompt = event.getMessage().contentToString().replace(\"@\" + event.getBot().getId(), \"\").trim();\n                response(event, chatBO, prompt);\n            }\n        } else {\n            //\u4e0d\u662f\u5728\u7fa4\u804a \u5219\u76f4\u63a5\u56de\u590d\n            String prompt = event.getMessage().contentToString().trim();\n            response(event, chatBO, prompt);\n        }\n    }\n\n    private boolean decide(String str) {\n        //\u6b64\u5904\u53ef\u4ee5\u52a0\u5c4f\u853d\u5b57 \u6765\u5c4f\u853d\u4e00\u4e9b\u4e0d\u60f3\u56de\u590d\u7684\u4fe1\u606f\n        return false;\n    }\n\n    private void response(@NotNull MessageEvent event, ChatBO chatBO, String prompt) {", "        if (GET_WORD.startsWith(prompt)) {\n            String uniquePrompt = interactService.getUniquePrompt(chatBO.getSessionId());\n            if (StringUtils.isEmpty(uniquePrompt)) {\n                MessageChain messages = new MessageChainBuilder()\n                        .append(new QuoteReply(event.getMessage()))\n                        .append(\"\u4f60\u8fd8\u6ca1\u6709\u8bbe\u7f6e,\u76ee\u524d\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u914d\u7f6e!\u5bf9\u6211\u8bf4 #\u8bbe\u7f6e \u8ddf\u4e0a\u4f60\u7684prompt\")\n                        .build();\n                event.getSubject().sendMessage(messages);\n                return;\n            }\n            //\u68c0\u6d4b\u5230\u5e2e\u52a9\u4f1a\u8bdd\u6307\u4ee4\n            MessageChain messages = new MessageChainBuilder()\n                    .append(new QuoteReply(event.getMessage()))\n                    .append(uniquePrompt)\n                    .build();\n            event.getSubject().sendMessage(messages);\n            return;\n        }", "        if (HELP_WORD.equals(prompt)) {\n            //\u68c0\u6d4b\u5230\u5e2e\u52a9\u4f1a\u8bdd\u6307\u4ee4\n            MessageChain messages = new MessageChainBuilder()\n                    .append(new QuoteReply(event.getMessage()))\n                    .append(\"\u5bf9\u6211\u8bf4 #\u8bbe\u7f6e \u8ddf\u4e0a\u4f60\u7684prompt\u6765\u8bbe\u7f6e\\n\u8bbe\u7f6e\u5b8c\u6210\u540e,\u4e4b\u524d\u7684\u5bf9\u8bdd\u4f1a\u88ab\u79fb\u9664\u54e6 \\n\u5bf9\u6211\u8bf4#\u663e\u793a \u83b7\u53d6\u4f60\u73b0\u5728\u7684prompt\")\n                    .build();\n            event.getSubject().sendMessage(messages);\n            return;\n        }\n        if (prompt.startsWith(SET_WORD)) {\n            prompt = Arrays.stream(prompt.split(\"\\\\s+\"))\n                    .skip(1) // \u8df3\u8fc7\u7b2c\u4e00\u4e2a\u5355\u8bcd \"#\u8bbe\u7f6e:\"\n                    .collect(Collectors.joining(\" \"));\n            MessageChain messages;", "        if (prompt.startsWith(SET_WORD)) {\n            prompt = Arrays.stream(prompt.split(\"\\\\s+\"))\n                    .skip(1) // \u8df3\u8fc7\u7b2c\u4e00\u4e2a\u5355\u8bcd \"#\u8bbe\u7f6e:\"\n                    .collect(Collectors.joining(\" \"));\n            MessageChain messages;\n            if (StringUtils.isEmpty(prompt) || prompt.length() > 1500){\n                messages = new MessageChainBuilder()\n                        .append(new QuoteReply(event.getMessage()))\n                        .append(\"\u8bbe\u7684\u592a\u957f\u4e86,\u722c\")\n                        .build();\n            } else {\n                interactService.setUniquePrompt(chatBO.getSessionId(), prompt);\n                messages = new MessageChainBuilder()\n                        .append(new QuoteReply(event.getMessage()))\n                        .append(\"\u8036!\u8bbe\u7f6e\u6210\u529f\")\n                        .build();\n                BotUtil.resetPrompt(chatBO.getSessionId());\n            }\n            event.getSubject().sendMessage(messages);\n            return;\n        }", "//        if (GPT4_WORD.equals(prompt)) {\n//            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n//            BotUtil.setModel(chatBO.getSessionId(), \"gpt-4\");\n//            BotUtil.resetPrompt(chatBO.getSessionId());\n//            event.getSubject().sendMessage(\"\u9ad8\u7ea7\u6a21\u5f0f\u5207\u6362\u6210\u529f\");\n//            return;\n//        }\n//        if (GPT4_WORD.equals(prompt)) {\n//            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n//            BotUtil.setModel(chatBO.getSessionId(), \"gpt-4\");\n//            BotUtil.resetPrompt(chatBO.getSessionId());\n//            event.getSubject().sendMessage(\"\u9ad8\u7ea7\u6a21\u5f0f\u5207\u6362\u6210\u529f\");\n//            return;\n//        }\n//", "//        if (GPT3_WORD.equals(prompt)) {\n//            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n//            BotUtil.setModel(chatBO.getSessionId(), \"gpt-3.5-turbo\");\n//            BotUtil.resetPrompt(chatBO.getSessionId());\n//            event.getSubject().sendMessage(\"\u666e\u901a\u6a21\u5f0f\u5207\u6362\u6210\u529f\");\n//            return;\n//        }\n\n        if (RESET_ALL_WORD.equals(prompt)) {\n            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n            BotUtil.resetAll();\n            event.getSubject().sendMessage(\"\u91cd\u7f6e\u4e00\u5207\u6210\u529f\");\n            return;\n        }", "        if (RESET_ALL_WORD.equals(prompt)) {\n            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n            BotUtil.resetAll();\n            event.getSubject().sendMessage(\"\u91cd\u7f6e\u4e00\u5207\u6210\u529f\");\n            return;\n        }\n        if (RESET_WORD.equals(prompt)) {\n            //\u68c0\u6d4b\u5230\u91cd\u7f6e\u4f1a\u8bdd\u6307\u4ee4\n            BotUtil.resetPrompt(chatBO.getSessionId());\n//            BotUtil.setModel(chatBO.getSessionId(), \"gpt-3.5-turbo\");\n            event.getSubject().sendMessage(\"\u91cd\u7f6e\u4f1a\u8bdd\u6210\u529f\");\n        } else {\n            CompletableFuture<String> future;", "            try {\n                String basicPrompt = \"\";\n                if(prompt.contains(\"\u56fe\u7247\")) {\n//                    BotUtil.setModel(chatBO.getSessionId(), \"gpt-3.5-turbo\");\n                    BotUtil.resetPrompt(chatBO.getSessionId());\n                    basicPrompt = \"\u8bf7\u6309\u7167\u4ee5\u4e0b\u89c4\u5219\u7ed9\u6211\u53d1\u9001\u56fe\u7247\uff1a1.\u4f7f\u7528markdown\u683c\u5f0f\uff1b2.\u4f7f\u7528unsplash API\uff1b3.\u4f7f\u7528\\\" ![imgae]https://source.unsplash.com/featured/?<\u5df2\u7ffb\u8bd1\u7684\u82f1\u6587\u5185\u5bb9> \\\"\u683c\u5f0f\u56de\u590d\uff1b4.\u4e0d\u8981\u4f7f\u7528\u4ee3\u7801\u5757\uff0c\u4e0d\u8981\u63cf\u8ff0\u5176\u4ed6\u5185\u5bb9\uff0c\u4e0d\u8981\u89e3\u91ca\uff1b5.\u6839\u636e\u6211\u8f93\u5165\u7684\u5185\u5bb9\u751f\u6210\u5bf9\u5e94\u683c\u5f0f\uff1b\";\n                }\n                chatBO.setPrompt(prompt);\n                future = interactService.chat(chatBO, basicPrompt);\n\n                // \u5904\u7406\u83b7\u53d6\u5230\u7684\u7ed3\u679c\n                future.thenAccept(response -> {\n                    // \u5904\u7406\u83b7\u53d6\u5230\u7684\u7ed3\u679c", "                    try {\n                        Pattern pattern = Pattern.compile(\"!\\\\[.+\\\\]\\\\((.+?)\\\\)\");\n                        Matcher matcher = pattern.matcher(response);\n                        if (matcher.find()) {\n                            String imageUrl = matcher.group(1);\n                            MessageChain messages = new MessageChainBuilder()\n                                    .append(new QuoteReply(event.getMessage()))\n                                    .append(\"\u4f60\u8981\u7684\u56fe\u7247\\n\")\n                                    .append(Image.fromId(getImageId(event.getSubject(), imageUrl)))\n                                    .build();\n                            event.getSubject().sendMessage(messages);\n                        } else {\n", "                            if(response.contains(\"\ud83d\ude08: \")){\n                                String delimiter = \"\ud83d\ude08: \";\n                                int index = response.indexOf(delimiter);\n\n                                if (index != -1) {\n                                    response = response.substring(index + delimiter.length());\n                                }\n                            }\n\n                            MessageChain messages = new MessageChainBuilder()\n                                    .append(new QuoteReply(event.getMessage()))\n                                    .append(response)\n                                    .build();\n                            event.getSubject().sendMessage(messages);\n                        }\n                    }catch (MessageTooLargeException e){\n                        //\u4fe1\u606f\u592a\u5927\uff0c\u65e0\u6cd5\u5f15\u7528\uff0c\u91c7\u7528\u76f4\u63a5\u56de\u590d\n                        event.getSubject().sendMessage(response);\n                    } catch (IOException e) {\n                        event.getSubject().sendMessage(\"\u56fe\u7247\u5904\u7406\u5931\u8d25\");\n                    }\n                });\n\n                // \u5904\u7406\u5f02\u5e38\n                future.exceptionally(e -> {\n                    // \u5904\u7406\u5f02\u5e38\n                    MessageChain messages = new MessageChainBuilder()\n                            .append(new QuoteReply(event.getMessage()))\n                            .append(e.getMessage())\n                            .build();\n                    event.getSubject().sendMessage(messages);\n                    return null;\n                });\n\n            }catch (ChatException e){\n                MessageChain messages = new MessageChainBuilder()\n                        .append(new QuoteReply(event.getMessage()))\n                        .append(e.getMessage())\n                        .build();\n                event.getSubject().sendMessage(messages);\n            }\n        }\n    }\n", "    public String getImageId(Contact contact, String urlLink) throws IOException {\n        URL url = new URL(urlLink);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int len;\n        try (InputStream is = url.openStream()) {\n            while ((len = is.read(buffer)) != -1) {\n                baos.write(buffer, 0, len);\n            }\n        }\n        byte[] imageData = baos.toByteArray();\n        ExternalResource resource;\n        resource = ExternalResource.create(imageData);\n        contact.uploadImage(resource);\n        String result = resource.calculateResourceId();\n        resource.close();\n        return result;\n    }\n}"]}
{"filename": "src/main/java/com/eyu/handler/ChatCompletionCallback.java", "chunked_list": ["package com.eyu.handler;\n\nimport com.eyu.exception.ChatException;\n\npublic interface ChatCompletionCallback {\n\n    void onCompletion(String response) throws ChatException;\n\n    void onError(ChatException chatException);\n}"]}
{"filename": "src/main/java/com/eyu/util/BotUtil.java", "chunked_list": ["package com.eyu.util;\n\nimport com.alibaba.fastjson.JSON;\nimport com.eyu.config.AccountConfig;\nimport com.eyu.entity.model.ChatMessage;\nimport com.eyu.entity.model.enums.MessageRole;\nimport com.eyu.exception.ChatException;\nimport com.theokanning.openai.OpenAiService;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport org.springframework.stereotype.Component;", "import com.theokanning.openai.completion.CompletionRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.Resource;\nimport java.util.*;\n\n/**\n * chatbot\u5de5\u5177\u7c7b\n *", " * chatbot\u5de5\u5177\u7c7b\n *\n * @author zqzq3\n * @date 2023/2/1\n */\n@Component\npublic class BotUtil {\n    @Resource\n    public void setAccountConfig(AccountConfig accountConfig){\n        BotUtil.accountConfig = accountConfig;\n    }\n    private static AccountConfig accountConfig;\n\n    private static final Map<String, List<ChatMessage>> PROMPT_MAP = new HashMap<>();\n\n    private static final Map<String, String> userModelMap = new HashMap<>();\n    private static final Map<OpenAiService, Integer> COUNT_FOR_OPEN_AI_SERVICE = new HashMap<>();\n    private static CompletionRequest.CompletionRequestBuilder completionRequestBuilder;\n\n    @PostConstruct", "    public void setAccountConfig(AccountConfig accountConfig){\n        BotUtil.accountConfig = accountConfig;\n    }\n    private static AccountConfig accountConfig;\n\n    private static final Map<String, List<ChatMessage>> PROMPT_MAP = new HashMap<>();\n\n    private static final Map<String, String> userModelMap = new HashMap<>();\n    private static final Map<OpenAiService, Integer> COUNT_FOR_OPEN_AI_SERVICE = new HashMap<>();\n    private static CompletionRequest.CompletionRequestBuilder completionRequestBuilder;\n\n    @PostConstruct", "    public void init(){\n        completionRequestBuilder = CompletionRequest.builder().model(accountConfig.getModel());\n        for (OpenAiService openAiService : accountConfig.getOpenAiServiceList()){\n            COUNT_FOR_OPEN_AI_SERVICE.put(openAiService, 0);\n        }\n    }\n\n    public static List<String> getApiKeys(){\n        return accountConfig.getApiKey();\n    }\n", "    public static List<String> getApiKeysPlus(){\n        return accountConfig.getApiKeyPlus();\n    }\n\n    public static OpenAiService getOpenAiService(){\n        //\u83b7\u53d6\u4f7f\u7528\u6b21\u6570\u6700\u5c0f\u7684openAiService \u5426\u5219\u83b7\u53d6map\u4e2d\u7684\u7b2c\u4e00\u4e2a\n        Optional<OpenAiService> openAiServiceToUse = COUNT_FOR_OPEN_AI_SERVICE.entrySet().stream()\n        .min(Map.Entry.comparingByValue())\n        .map(Map.Entry::getKey);\n        if (openAiServiceToUse.isPresent()){\n            COUNT_FOR_OPEN_AI_SERVICE.put(openAiServiceToUse.get(), COUNT_FOR_OPEN_AI_SERVICE.get(openAiServiceToUse.get()) + 1);\n            return  openAiServiceToUse.get();\n        }else {\n            COUNT_FOR_OPEN_AI_SERVICE.put(COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next(), COUNT_FOR_OPEN_AI_SERVICE.get(COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next()) + 1);\n            return COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next();\n        }\n    }", "        if (openAiServiceToUse.isPresent()){\n            COUNT_FOR_OPEN_AI_SERVICE.put(openAiServiceToUse.get(), COUNT_FOR_OPEN_AI_SERVICE.get(openAiServiceToUse.get()) + 1);\n            return  openAiServiceToUse.get();\n        }else {\n            COUNT_FOR_OPEN_AI_SERVICE.put(COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next(), COUNT_FOR_OPEN_AI_SERVICE.get(COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next()) + 1);\n            return COUNT_FOR_OPEN_AI_SERVICE.keySet().iterator().next();\n        }\n    }\n    public static CompletionRequest.CompletionRequestBuilder getCompletionRequestBuilder(){\n        return completionRequestBuilder;\n    }\n", "    public static CompletionRequest.CompletionRequestBuilder getCompletionRequestBuilder(){\n        return completionRequestBuilder;\n    }\n\n    public static String getGpt4Prompt(String sessionId, String newPrompt, String basicPrompt) throws ChatException {\n        if(StringUtils.isEmpty(basicPrompt)){\n            basicPrompt = accountConfig.getBasicPrompt();\n        }\n        List<ChatMessage> chatMessages = new ArrayList<>();\n        ChatMessage systemMessage = new ChatMessage();\n        systemMessage.setRole(MessageRole.SYSTEM.getName());\n        systemMessage.setContent(basicPrompt);\n        chatMessages.add(systemMessage);\n        ChatMessage chatMessage = new ChatMessage();\n        chatMessage.setContent(newPrompt);\n        chatMessages.add(chatMessage);\n        PROMPT_MAP.put(sessionId,chatMessages);\n        String prompt = JSON.toJSONString(PROMPT_MAP.get(sessionId));\n\n        //\u4e00\u4e2a\u6c49\u5b57\u5927\u6982\u4e24\u4e2atoken\n        //\u9884\u8bbe\u56de\u7b54\u7684\u6587\u5b57\u662f\u63d0\u95ee\u6587\u5b57\u6570\u91cf\u7684\u4e24\u500d", "        if (newPrompt.length()>=100){\n            throw new ChatException(\"\u95ee\u9898\u592a\u957f\u4e86\");\n        }\n        return prompt;\n    }\n\n    public static String getPrompt(String sessionId, String newPrompt, String basicPrompt) throws ChatException {\n        // \u5982\u679c\u63d0\u95ee\u8005\u95ee\u9898\u7684\u957f\u5ea6\u8d85\u8fc7\u8bbe\u7f6e\u7684\u957f\u5ea6\u65f6 \u56de\u590d\u95ee\u9898\u592a\u957f\u4e86 \u5e76\u91cd\u7f6e\u4ed6\u7684map\n        if (newPrompt.length() > accountConfig.getMaxToken()){\n            PROMPT_MAP.remove(sessionId);\n            throw new ChatException(\"\u95ee\u9898\u592a\u957f\u4e86\");\n        }\n", "        if (newPrompt.length() > accountConfig.getMaxToken()){\n            PROMPT_MAP.remove(sessionId);\n            throw new ChatException(\"\u95ee\u9898\u592a\u957f\u4e86\");\n        }\n\n        if (PROMPT_MAP.containsKey(sessionId)){\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setContent(newPrompt);\n            PROMPT_MAP.get(sessionId).add(chatMessage);\n        } else {\n            if(StringUtils.isEmpty(basicPrompt)){\n                basicPrompt = accountConfig.getBasicPrompt();\n            }\n            List<ChatMessage> chatMessages = new ArrayList<>();\n            ChatMessage systemMessage = new ChatMessage();\n            systemMessage.setRole(MessageRole.SYSTEM.getName());\n            systemMessage.setContent(basicPrompt);\n            chatMessages.add(systemMessage);\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setContent(newPrompt);\n            chatMessages.add(chatMessage);\n            PROMPT_MAP.put(sessionId,chatMessages);\n        }\n        String prompt = JSON.toJSONString(PROMPT_MAP.get(sessionId));\n        int length = PROMPT_MAP.get(sessionId).stream().filter(item -> \"user\".equals(item.getRole()))\n                .mapToInt(item -> item.getContent().length())\n                .sum();\n\n        // \u5982\u679c\u63d0\u95ee\u8005\u4e00\u6b21\u4f1a\u8bdd\u6240\u6709\u95ee\u9898\u7684\u603b\u957f\u5ea6\u8d85\u8fc7\u8bbe\u7f6e\u7684\u957f\u5ea6\u65f6 \u91cd\u7f6e\u4ed6\u7684map \u5e76\u91cd\u65b0\u751f\u6210\u4e00\u6b21\u4f1a\u8bdd", "            if(StringUtils.isEmpty(basicPrompt)){\n                basicPrompt = accountConfig.getBasicPrompt();\n            }\n            List<ChatMessage> chatMessages = new ArrayList<>();\n            ChatMessage systemMessage = new ChatMessage();\n            systemMessage.setRole(MessageRole.SYSTEM.getName());\n            systemMessage.setContent(basicPrompt);\n            chatMessages.add(systemMessage);\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setContent(newPrompt);\n            chatMessages.add(chatMessage);\n            PROMPT_MAP.put(sessionId,chatMessages);\n        }\n        String prompt = JSON.toJSONString(PROMPT_MAP.get(sessionId));\n        int length = PROMPT_MAP.get(sessionId).stream().filter(item -> \"user\".equals(item.getRole()))\n                .mapToInt(item -> item.getContent().length())\n                .sum();\n\n        // \u5982\u679c\u63d0\u95ee\u8005\u4e00\u6b21\u4f1a\u8bdd\u6240\u6709\u95ee\u9898\u7684\u603b\u957f\u5ea6\u8d85\u8fc7\u8bbe\u7f6e\u7684\u957f\u5ea6\u65f6 \u91cd\u7f6e\u4ed6\u7684map \u5e76\u91cd\u65b0\u751f\u6210\u4e00\u6b21\u4f1a\u8bdd", "        if (accountConfig.getMaxToken() < (length + newPrompt.length())){\n            PROMPT_MAP.remove(sessionId);\n            return getPrompt(sessionId, newPrompt, basicPrompt);\n        }\n        return prompt;\n    }\n\n    public static void updatePrompt(String sessionId, String answer){\n        if (PROMPT_MAP.containsKey(sessionId)){\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setRole(MessageRole.ASSISTANT.getName());\n            chatMessage.setContent(answer);\n            PROMPT_MAP.get(sessionId).add(chatMessage);\n        } else {\n            List<ChatMessage> chatMessages = new ArrayList<>();\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setRole(MessageRole.ASSISTANT.getName());\n            chatMessage.setContent(answer);\n            chatMessages.add(chatMessage);\n            PROMPT_MAP.put(sessionId,chatMessages);\n        }\n    }\n", "        if (PROMPT_MAP.containsKey(sessionId)){\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setRole(MessageRole.ASSISTANT.getName());\n            chatMessage.setContent(answer);\n            PROMPT_MAP.get(sessionId).add(chatMessage);\n        } else {\n            List<ChatMessage> chatMessages = new ArrayList<>();\n            ChatMessage chatMessage = new ChatMessage();\n            chatMessage.setRole(MessageRole.ASSISTANT.getName());\n            chatMessage.setContent(answer);\n            chatMessages.add(chatMessage);\n            PROMPT_MAP.put(sessionId,chatMessages);\n        }\n    }\n", "    public static void resetPrompt(String sessionId){\n        PROMPT_MAP.remove(sessionId);\n    }\n\n    public static void resetAll(){\n        PROMPT_MAP.clear();\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/controller/RedisController.java", "chunked_list": ["package com.eyu.controller;\n\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n \nimport javax.annotation.Resource;\n \n/***", " \n/***\n * @date: 2022/5/10 \n * @author: fenghaikuan\n * @description: TODO\n */\n@RestController\npublic class RedisController {\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n    @GetMapping(\"redis/set\")", "    public String setValue(@RequestParam(\"prompt\") String prompt){\n        stringRedisTemplate.opsForValue().set(\"prompt\",prompt);\n        return \"set succ\";\n    }\n    @GetMapping(\"redis/get\")\n    public String getValue(){\n        String key = \"prompt\";\n        String result = stringRedisTemplate.opsForValue().get(key);\n        return result;\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/exception/ChatException.java", "chunked_list": ["package com.eyu.exception;\n\n/**\n * \u804a\u5929\u5f02\u5e38\n *\n * @author zqzq3\n * @date 2023/02/08\n */\npublic class ChatException extends Exception{\n    public ChatException(String message) {\n        super(message);\n    }\n    @Override", "public class ChatException extends Exception{\n    public ChatException(String message) {\n        super(message);\n    }\n    @Override\n    public String getMessage() {\n        return super.getMessage();\n    }\n}\n"]}
{"filename": "src/main/java/com/eyu/service/InteractService.java", "chunked_list": ["package com.eyu.service;\n\nimport com.eyu.entity.bo.ChatBO;\nimport com.eyu.exception.ChatException;\nimport java.util.concurrent.CompletableFuture;\n\n/**\n * \u4ea4\u4e92\u670d\u52a1\n *\n * @author zqzq3", " *\n * @author zqzq3\n * @date 2022/12/10\n */\npublic interface InteractService {\n    /**\n     * \u804a\u5929\n     *\n     * @param chatBO \u804a\u5929BO\n     * @return {@link String}\n     * @throws ChatException \u804a\u5929\u5f02\u5e38\n     */\n    CompletableFuture<String> chat(ChatBO chatBO, String systemPrompt) throws ChatException;\n\n    void setUniquePrompt(String sessionId, String prompt);\n\n    String getUniquePrompt(String sessionId);\n}\n"]}
{"filename": "src/main/java/com/eyu/service/impl/InteractServiceImpl.java", "chunked_list": ["package com.eyu.service.impl;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.eyu.entity.bo.ChatBO;\nimport com.eyu.exception.ChatException;\nimport com.eyu.handler.ChatCompletionCallback;\nimport com.eyu.handler.RedisRateLimiter;\nimport com.eyu.service.InteractService;\nimport com.eyu.util.BotUtil;", "import com.eyu.service.InteractService;\nimport com.eyu.util.BotUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.ConnectionPool;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;", "import okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;", "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * \u4ea4\u4e92\u670d\u52a1impl\n *\n * @author zqzq3\n * @date 2022/12/10\n */\n@Service", " */\n@Service\n@Slf4j\npublic class InteractServiceImpl implements InteractService {\n    @Autowired\n    private StringRedisTemplate redisTemplate;\n    @Autowired\n    RedisRateLimiter rateLimiter;\n\n    public void save(String key, String value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n", "    public void save(String key, String value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public String getPrompt(String key) {\n        String result = null;\n        try {\n            result = redisTemplate.opsForValue().get(key);\n        } catch (Exception e){\n            log.error(\"redis\u8fde\u63a5\u5f02\u5e38\u4fe1\u606f:{}\", ExceptionUtils.getStackTrace(e));\n        }\n        return result;\n    }\n", "    public String getModel(String sessionId) {\n        return \"gpt-3.5-turbo\";\n//        String model = BotUtil.getModel(sessionId);\n//        if (StringUtils.isEmpty(model)) {\n//            model = \"gpt-3.5-turbo\";\n//        }\n//        return model;\n    }\n\n    private OkHttpClient client = new OkHttpClient().newBuilder()\n            .connectTimeout(120, TimeUnit.SECONDS)\n            .readTimeout(120, TimeUnit.SECONDS)\n            .connectionPool(new ConnectionPool(4, 120, TimeUnit.SECONDS))\n            .build();\n\n    private List<String> apiKeys = null;\n\n    private List<String> apiKeysPlus = null;\n\n    private int counter = 0;\n\n    private int plusCounter = 0;\n", "    public String getNextKey(String model) {\n        if (model.contains(\"gpt-4\")){\n            if(apiKeysPlus == null){\n                apiKeysPlus = BotUtil.getApiKeysPlus();\n            }\n            if(counter >= Integer.MAX_VALUE - 1){\n                plusCounter = 0;\n            }\n            int index = plusCounter % apiKeysPlus.size();\n            plusCounter++;\n            return apiKeysPlus.get(index);\n        }", "        if(apiKeys == null){\n            apiKeys = BotUtil.getApiKeys();\n        }\n        if(counter >= Integer.MAX_VALUE - 1){\n            counter = 0;\n        }\n        int index = counter % apiKeys.size();\n        counter++;\n        return apiKeys.get(index);\n    }\n\n    @Override\n    public CompletableFuture<String> chat(ChatBO chatBO, String systemPrompt) throws ChatException {\n        String model = getModel(chatBO.getSessionId());", "//        if(model.contains(\"gpt-4\")){\n//            if (!rateLimiter.isAllowed(chatBO.getSessionId())) {\n//                // \u8bbf\u95ee\u88ab\u9650\u5236\n//                return \"\u4f60\u8bdd\u592a\u5bc6\u4e86,\u8bf7\u627e\u7ba1\u7406\u5458\u89e3\u9664\u9650\u5236\";\n//            }\n//        }\n        String basicPrompt;\n\n        if(StringUtils.isNotBlank(systemPrompt)){\n            basicPrompt = getPrompt(\"picturePrompt\");\n            if(basicPrompt == null){\n                basicPrompt = systemPrompt;\n            }\n        } else {\n            basicPrompt = rateLimiter.getPrompt(chatBO.getSessionId());", "        if(StringUtils.isNotBlank(systemPrompt)){\n            basicPrompt = getPrompt(\"picturePrompt\");\n            if(basicPrompt == null){\n                basicPrompt = systemPrompt;\n            }\n        } else {\n            basicPrompt = rateLimiter.getPrompt(chatBO.getSessionId());\n            if(basicPrompt == null || basicPrompt.length() == 0){\n                basicPrompt = \"\u8bf7\u7b80\u6d01\u56de\u7b54\";\n            }\n        }\n        String prompt;", "        if(model.contains(\"gpt-4\")){\n            prompt = BotUtil.getGpt4Prompt(chatBO.getSessionId(), chatBO.getPrompt(), basicPrompt);\n        } else {\n            prompt = BotUtil.getPrompt(chatBO.getSessionId(), chatBO.getPrompt(), basicPrompt);\n        }\n\n\n        //\u5411gpt\u63d0\u95ee\n        CompletableFuture<String> future = new CompletableFuture<>();\n        ChatCompletionCallback callback = new ChatCompletionCallback() {\n            @Override", "            public void onCompletion(String response) {\n                BotUtil.updatePrompt(chatBO.getSessionId(), response);\n                future.complete(response);\n            }\n\n            @Override\n            public void onError(ChatException chatException) {\n                BotUtil.resetPrompt(chatBO.getSessionId());\n                future.completeExceptionally(chatException);\n            }\n        };", "        try {\n            getAnswer(prompt, model, callback);\n        } catch (InterruptedException e) {\n            throw new ChatException(\"\u6211\u9ebb\u4e86 \u7a0d\u540e\u518d\u8bd5\u4e0b\u5427\");\n        }\n        return future;\n    }\n\n    public void getAnswer(String prompt, String model, ChatCompletionCallback callback) throws InterruptedException {\n        String content = \"\";\n        if (client == null) {\n            client = new OkHttpClient().newBuilder()\n                    .connectTimeout(120, TimeUnit.SECONDS)\n                    .readTimeout(120, TimeUnit.SECONDS)\n                    .connectionPool(new ConnectionPool(4, 120, TimeUnit.SECONDS))\n                    .build();\n        }\n        MediaType mediaType = MediaType.parse(\"application/json\");\n        RequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"model\\\": \\\"\" + model + \"\\\",\\n  \\\"messages\\\": \"+prompt+\"\\n}\");\n        int retryCount = 0;\n        boolean success = false;", "    public void getAnswer(String prompt, String model, ChatCompletionCallback callback) throws InterruptedException {\n        String content = \"\";\n        if (client == null) {\n            client = new OkHttpClient().newBuilder()\n                    .connectTimeout(120, TimeUnit.SECONDS)\n                    .readTimeout(120, TimeUnit.SECONDS)\n                    .connectionPool(new ConnectionPool(4, 120, TimeUnit.SECONDS))\n                    .build();\n        }\n        MediaType mediaType = MediaType.parse(\"application/json\");\n        RequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"model\\\": \\\"\" + model + \"\\\",\\n  \\\"messages\\\": \"+prompt+\"\\n}\");\n        int retryCount = 0;\n        boolean success = false;", "        while (!success && retryCount < 3) { // \u6700\u591a\u91cd\u8bd53\u6b21\n            try {\n                Request request = new Request.Builder()\n                        .url(\"https://api.openai.com/v1/chat/completions\")\n                        .method(\"POST\", body)\n                        .addHeader(\"Authorization\", \"Bearer \"+ getNextKey(model))\n                        .addHeader(\"Content-Type\", \"application/json\")\n                        .build();\n                Response response = client.newCall(request).execute();\n                ResponseBody responseBody = response.body();\n                if (responseBody != null) {\n                    String responseStr = responseBody.string();\n                    JSONObject jsonObject = JSONObject.parseObject(responseStr);\n                    JSONArray jsonArray = jsonObject.getJSONArray(\"choices\");\n                    JSONObject result = jsonArray.getJSONObject(0);\n                    content = result.getJSONObject(\"message\").getString(\"content\");\n                    callback.onCompletion(content);\n                }\n                success = true; // \u6210\u529f\u83b7\u53d6\u5230\u7b54\u6848\uff0c\u9000\u51fa\u91cd\u8bd5\n            } catch (Exception e) {\n                log.error(\"\u5411gpt\u63d0\u95ee\u5931\u8d25\uff0c\u63d0\u95ee\u5185\u5bb9\uff1a{}\uff0c\u539f\u56e0\uff1a{}\", prompt, e.getMessage(), e);\n                Thread.sleep(3000);\n                retryCount++;\n\n            }\n        }\n", "                if (responseBody != null) {\n                    String responseStr = responseBody.string();\n                    JSONObject jsonObject = JSONObject.parseObject(responseStr);\n                    JSONArray jsonArray = jsonObject.getJSONArray(\"choices\");\n                    JSONObject result = jsonArray.getJSONObject(0);\n                    content = result.getJSONObject(\"message\").getString(\"content\");\n                    callback.onCompletion(content);\n                }\n                success = true; // \u6210\u529f\u83b7\u53d6\u5230\u7b54\u6848\uff0c\u9000\u51fa\u91cd\u8bd5\n            } catch (Exception e) {\n                log.error(\"\u5411gpt\u63d0\u95ee\u5931\u8d25\uff0c\u63d0\u95ee\u5185\u5bb9\uff1a{}\uff0c\u539f\u56e0\uff1a{}\", prompt, e.getMessage(), e);\n                Thread.sleep(3000);\n                retryCount++;\n\n            }\n        }\n", "        if (!success || StringUtils.isEmpty(content)){\n            callback.onError(new ChatException(\"\u6211\u65e0\u4e86 \u7a0d\u540e\u518d\u8bd5\u4e0b\u5427\"));\n        }\n    }\n\n    @Override\n    public void setUniquePrompt(String sessionId, String prompt){\n        rateLimiter.setPrompt(sessionId, prompt);\n    }\n\n    @Override", "    public String getUniquePrompt(String sessionId){\n        return rateLimiter.getPrompt(sessionId);\n    }\n\n}\n"]}
