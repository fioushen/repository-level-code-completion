{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name='bingbong',\n    version='0.4.2',\n    description='Ping pong is a management library for LLM applied applications.',\n    long_description=long_description,", "    description='Ping pong is a management library for LLM applied applications.',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author='chansung park',\n    author_email='deep.diver.csp@gmail.com',\n    url='https://github.com/deep-diver/PingPong',\n    install_requires=[\n        'chromadb',\n        'torch',\n        'transformers',", "        'torch',\n        'transformers',\n        'bs4'\n    ],\n    packages=['pingpong', 'pingpong.context'],\n    package_dir={'':'src'},\n    keywords=['LLM', 'pingpong', 'prompt', 'context', 'management'],\n    python_requires='>=3.8',\n    package_data={},\n    zip_safe=False,", "    package_data={},\n    zip_safe=False,\n    classifiers=[\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11'\n    ]\n)", "    ]\n)\n"]}
{"filename": "tests/__init__.py", "chunked_list": [""]}
{"filename": "tests/test_pingpong.py", "chunked_list": ["from pingpong import PingPong\nfrom pingpong.dolly import DollyChatPPManager\nfrom pingpong.stablelm import StableLMChatPPManager\nfrom pingpong.gradio import GradioAlpacaChatPPManager\nfrom pingpong.gradio import GradioKoAlpacaChatPPManager\nfrom pingpong.context import CtxLastWindowStrategy\n\nclass TestPingpong():\n    def test_ctx_koalpaca_pingpong(self):\n        pp = PingPong(\"\uc548\ub155\ud558\uc138\uc694\", \"\ubc18\uac11\uc2b5\ub2c8\ub2e4\")\n        pp_manager = GradioKoAlpacaChatPPManager()\n        pp_manager.add_pingpong(pp)        \n\n        prompts = pp_manager.build_prompts()\n        answers = \"\"\"### \uc9c8\ubb38:\n\uc548\ub155\ud558\uc138\uc694\n\n### \uc751\ub2f5:\n\ubc18\uac11\uc2b5\ub2c8\ub2e4\"\"\"\n        assert prompts == answers\n\n        uis = pp_manager.build_uis()\n        answers = [(\"\uc548\ub155\ud558\uc138\uc694\", \"\ubc18\uac11\uc2b5\ub2c8\ub2e4\")]\n        assert uis == answers\n\n        pp_manager.ctx = \"\uc774\uac83\uc740 \ubb38\ub9e5\uc774\uc601\"\n        answers = \"\"\"\uc774\uac83\uc740 \ubb38\ub9e5\uc774\uc601\n\n### \uc9c8\ubb38:\n\uc548\ub155\ud558\uc138\uc694\n\n### \uc751\ub2f5:\n\ubc18\uac11\uc2b5\ub2c8\ub2e4\"\"\"\n        prompts = pp_manager.build_prompts()\n        assert prompts == answers\n\n    def test_context_dolly_pingpong(self):\n        pp_manager = DollyChatPPManager()\n        pp_manager.ctx = \"this is context\"\n        result = pp_manager.add_ping(\"hello\")\n        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nhello\n\n### Input:\nthis is context\n\n\"\"\"\n        print(result)\n        assert result == answers\n\n    def test_simple_dolly_pingpong(self):\n        pp_manager = DollyChatPPManager()\n        result = pp_manager.add_ping(\"hello\")\n        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nhello\n\n\"\"\"\n        assert result == answers\n        assert pp_manager.add_ping(\"hello2\") is None\n\n        pp_manager.add_pong(\"world\")\n        result = pp_manager.add_ping(\"hello2\")\n        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nhello2\n\n\"\"\"\n        assert result == answers\n        assert pp_manager.add_ping(\"hello3\") is None\n\n\n    def test_ctx_alpaca_pingpong(self):\n        pp = PingPong(\"hello\", \"world\")\n        pp_manager = GradioAlpacaChatPPManager()\n        pp_manager.add_pingpong(pp)        \n\n        prompts = pp_manager.build_prompts()\n        answers = \"\"\"### Instruction:\nhello\n\n### Response:\nworld\"\"\"\n        assert prompts == answers\n\n        uis = pp_manager.build_uis()\n        answers = [(\"hello\", \"world\")]\n        assert uis == answers\n\n        pp_manager.ctx = \"this is context\"\n        answers = \"\"\"this is context\n\n### Instruction:\nhello\n\n### Response:\nworld\"\"\"\n        prompts = pp_manager.build_prompts()\n        assert prompts == answers\n\n    def test_single_gradio_alpaca_pingpong(self):\n        pp = PingPong(\"hello\", \"world\")\n        pp_manager = GradioAlpacaChatPPManager()\n        pp_manager.add_pingpong(pp)\n\n        prompts = pp_manager.build_prompts()\n        answers = \"\"\"### Instruction:\nhello\n\n### Response:\nworld\"\"\"\n        assert prompts == answers\n\n        uis = pp_manager.build_uis()\n        answers = [(\"hello\", \"world\")]\n        assert uis == answers\n\n    def test_multi_gradio_pingpong(self):\n        pp_manager = GradioAlpacaChatPPManager()\n\n        for i in range(2):\n            pp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n            pp_manager.add_pingpong(pp)\n\n        prompts = pp_manager.build_prompts()\n        answers = \"\"\"### Instruction:\nping-0\n\n### Response:\npong-0\n\n### Instruction:\nping-1\n\n### Response:\npong-1\"\"\"\n        assert prompts == answers\n\n        uis = pp_manager.build_uis()\n        answers = [(\"ping-0\", \"pong-0\"), (\"ping-1\", \"pong-1\")]\n        assert uis == answers", "            "]}
{"filename": "tests/test_strategy.py", "chunked_list": ["from pingpong import PingPong\nfrom pingpong.gradio import GradioAlpacaChatPPManager\nfrom pingpong.context import CtxAutoSummaryStrategy\nfrom pingpong.context import CtxLastWindowStrategy\nfrom pingpong.context import CtxSearchWindowStrategy\n\n\nclass TestStrategy():\n\tdef test_search_window_strategy(self):\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tstrategy = CtxSearchWindowStrategy(2)\n\n\t\tfor i in range(5):\n\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\tpp_manager.add_pingpong(pp)\n\n\t\tanswer1 = \"\"\"### Instruction:\nping-0\n\n### Response:\npong-0\n\n### Instruction:\nping-1\n\n### Response:\npong-1\"\"\"\n\n\t\tanswer2 = \"\"\"### Instruction:\nping-2\n\n### Response:\npong-2\n\n### Instruction:\nping-3\n\n### Response:\npong-3\"\"\"\n\n\t\tanswer3 = \"\"\"### Instruction:\nping-4\n\n### Response:\npong-4\"\"\"\n\n\t\tfor idx, win in enumerate(strategy(pp_manager)):\n\t\t\tif idx == 0:\n\t\t\t\tassert win == answer1\n\t\t\telif idx == 1:\n\t\t\t\tassert win == answer2\n\t\t\telif idx == 2:\n\t\t\t\tassert win == answer3\n\t\t\telse:\n\t\t\t\tassert True is False\n\n\tdef test_last_window_strategy_w_truncate(self):\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tstrategy = CtxLastWindowStrategy(2)\n\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tfor i in range(3):\n\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\tpp_manager.add_pingpong(pp)\n\n\t\tanswers = \"\"\"### Instruction:\npi\n\n### Response:\npo\n\n### Instruction:\npi\n\n### Response:\npo\"\"\"\n\t\tassert strategy(pp_manager, truncate_size=2) == answers\n\n\tdef test_last_window_strategy(self):\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tstrategy = CtxLastWindowStrategy(2)\n\n\t\tfor i in range(1):\n\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\tpp_manager.add_pingpong(pp)\n\n\t\tanswers = \"\"\"### Instruction:\nping-0\n\n### Response:\npong-0\"\"\"\n\t\tassert strategy(pp_manager) == answers\n\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tfor i in range(3):\n\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\tpp_manager.add_pingpong(pp)\n\n\t\tanswers = \"\"\"### Instruction:\nping-1\n\n### Response:\npong-1\n\n### Instruction:\nping-2\n\n### Response:\npong-2\"\"\"\n\t\tassert strategy(pp_manager) == answers\n\n\n\tdef test_auto_summary_strategy(self):\n\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\tstrategy = CtxAutoSummaryStrategy(2)\n\n\t\tpp = PingPong(\"hello\", \"world\")\n\t\tpp_manager.add_pingpong(pp)\n\n\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\tassert sum_req is False\n\n\t\tpp = PingPong(\"hello2\", \"world2\")\n\t\tpp_manager.add_pingpong(pp)\n\n\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\tto_summarize_answer = \"\"\"### Instruction:\nhello\n\n### Response:\nworld\n\n### Instruction:\nhello2\n\n### Response:\nworld2\"\"\"\n\t\tassert sum_req is True\n\t\tassert to_summarize == to_summarize_answer\n\t\tassert strategy.last_idx == 2\n\n\t\tpp = PingPong(\"hello3\", \"world3\")\n\t\tpp_manager.add_pingpong(pp)\n\n\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\tassert sum_req is False\n\n\t\tpp = PingPong(\"hello4\", \"world4\")\n\t\tpp_manager.add_pingpong(pp)\n\n\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\tto_summarize_answer = \"\"\"### Instruction:\nhello3\n\n### Response:\nworld3\n\n### Instruction:\nhello4\n\n### Response:\nworld4\"\"\"\n\n\t\tassert sum_req is True\n\t\tassert to_summarize == to_summarize_answer\n\t\tassert strategy.last_idx == 4", ""]}
{"filename": "tests/test_scenarios.py", "chunked_list": ["from typing import List\n\nfrom pingpong import PingPong\nfrom pingpong.gradio import GradioAlpacaChatPPManager\nfrom pingpong.context import CtxAutoSummaryStrategy\nfrom pingpong.context import CtxLastWindowStrategy\n\nclass TestScenarios():\n    def test_basic_chat_workflow(self):\n        ppmanager = GradioAlpacaChatPPManager()\n        strategies = [\n            CtxAutoSummaryStrategy(max_pingpongs=3),\n            CtxLastWindowStrategy(max_pingpongs=2)\n        ]\n\n        conv1 = PingPong(\"Hello\", \"Hi, Nice to meet you!\")\n        ppmanager.add_pingpong(conv1)\n\n        for strategy in strategies:\n            if isinstance(strategy, CtxAutoSummaryStrategy):\n                sum_req, _ = strategy(ppmanager)\n                assert sum_req is False\n            elif isinstance(strategy, CtxLastWindowStrategy):\n                answers = \"\"\"### Instruction:\nHello\n\n### Response:\nHi, Nice to meet you!\"\"\"\n                assert strategy(ppmanager) == answers\n\n        conv2 = PingPong(\"How are you?\", \"I am fine. Thank you, and you?\")\n        ppmanager.add_pingpong(conv2)\n\n        for strategy in strategies:\n            if isinstance(strategy, CtxAutoSummaryStrategy):\n                sum_req, _ = strategy(ppmanager)\n                assert sum_req is False\n            elif isinstance(strategy, CtxLastWindowStrategy):\n                answers = \"\"\"### Instruction:\nHello\n\n### Response:\nHi, Nice to meet you!\n\n### Instruction:\nHow are you?\n\n### Response:\nI am fine. Thank you, and you?\"\"\"\n                assert strategy(ppmanager) == answers\n\n        conv3 = PingPong(\"I am doing well.\", \"Good to know :)\")\n        ppmanager.add_pingpong(conv3)\n\n        for strategy in strategies:\n            if isinstance(strategy, CtxAutoSummaryStrategy):\n                answers = \"\"\"### Instruction:\nHello\n\n### Response:\nHi, Nice to meet you!\n\n### Instruction:\nHow are you?\n\n### Response:\nI am fine. Thank you, and you?\n\n### Instruction:\nI am doing well.\n\n### Response:\nGood to know :)\"\"\"\n                sum_req, to_summarize = strategy(ppmanager)\n                assert sum_req is True\n                assert to_summarize == answers\n            elif isinstance(strategy, CtxLastWindowStrategy):\n                answers = \"\"\"### Instruction:\nHow are you?\n\n### Response:\nI am fine. Thank you, and you?\n\n### Instruction:\nI am doing well.\n\n### Response:\nGood to know :)\"\"\"\n                assert strategy(ppmanager) == answers\n\n        conv4 = PingPong(\"What do you want to do today?\", \"I feel like I want to stay at home\")\n        ppmanager.add_pingpong(conv4)\n\n        for strategy in strategies:\n            if isinstance(strategy, CtxAutoSummaryStrategy):\n                sum_req, to_summarize = strategy(ppmanager)\n                assert sum_req is False\n            elif isinstance(strategy, CtxLastWindowStrategy):\n                answers = \"\"\"### Instruction:\nI am doing well.\n\n### Response:\nGood to know :)\n\n### Instruction:\nWhat do you want to do today?\n\n### Response:\nI feel like I want to stay at home\"\"\"\n                assert strategy(ppmanager) == answers"]}
{"filename": "src/pingpong/wizard_falcon.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\nfrom pingpong.utils import build_prompts\n\nclass WizardFalconPromptFmt(PromptFmt):\n\t@classmethod\n\tdef ctx(cls, context):\n\t\tif context is None or context == \"\":\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn f\"\"\"{context}\n\"\"\"\n\t\t\t\n\t@classmethod\n\tdef prompt(cls, pingpong, truncate_size):\n\t\tping = pingpong.ping[:truncate_size]\n\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\treturn f\"\"\"{ping}\n### Response: {pong}\n\n\"\"\"", "  \nclass WizardFalconChatPPManager(PPManager):\n\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=WizardFalconPromptFmt, truncate_size: int=None):\n\t\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/stable_vicuna.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass StableVicunaPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n    return f\"\"\"### Human: {ping}\n### Assistant: {pong}\n\"\"\"", "\nclass StableVicunaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StableVicunaPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results"]}
{"filename": "src/pingpong/vicuna.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass VicunaPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n    return f\"\"\"USER: {ping}\nASSISTANT: {pong}\n\"\"\"", "\nclass VicunaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=VicunaPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results", ""]}
{"filename": "src/pingpong/flan.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass FlanAlpacaPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n=====\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    return f\"\"\"{pingpong.ping[:truncate_size]}\n-----\n{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"", "\nclass FlanAlpacaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=FlanAlpacaPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n      if from_idx+idx != to_idx-1:\n        results += \"\"\"\n-----\n\"\"\"\n\n    return results", "\n"]}
{"filename": "src/pingpong/redpajama.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass RedPajamaChatPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|end|>\\n\"\n    return f\"\"\"<human>: {ping}\n<bot>: {pong}\"\"\"", "\nclass RedPajamaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=RedPajamaChatPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results"]}
{"filename": "src/pingpong/alpaca.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass AlpacaPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    return f\"\"\"### Instruction:\n{pingpong.ping[:truncate_size]}\n\n### Response:\n{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"", "\nclass AlpacaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=AlpacaPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n      if from_idx+idx != to_idx-1:\n        results += \"\"\"\n\n\"\"\"\n\n    return results", "\n"]}
{"filename": "src/pingpong/pingpong.py", "chunked_list": ["import json\n\nclass PingPong:\n  def __init__(self, ping, pong):\n    self.ping = ping\n    self.pong = pong\n\n  def __repr__(self):\n    return json.dumps(self, default=lambda o: o.__dict__)\n\n  @classmethod\n  def from_json(cls, json_dict):\n    return PingPong(json_dict['ping'], json_dict['pong'])", "\nclass PromptFmt:\n  @classmethod\n  def ctx(cls, context):\n    pass\n\n  @classmethod\n  def prompt(cls, pingpong):\n    pass\n\nclass UIFmt:\n  @classmethod\n  def ui(cls, pingpong):\n    pass", "\nclass UIFmt:\n  @classmethod\n  def ui(cls, pingpong):\n    pass\n\nclass PPManager:\n  def __init__(self, ctx: str=\"\"):\n    self.ctx = ctx\n    self.pingpongs = []\n\n  def add_ping(self, ping, fmt: PromptFmt):\n    if len(self.pingpongs) == 0 \\\n      or (len(self.pingpongs) >= 1 and self.pingpongs[-1].pong is not None):\n      self.pingpongs.append(PingPong(ping, None))\n      return True\n    return False\n\n  def add_pong(self, pong):\n    self.replace_last_pong(pong)\n\n  def replace_last_pong(self, pong):\n    self.pingpongs[-1].pong = pong\n\n  def append_pong(self, piece_pong):\n    self.pingpongs[-1].pong += piece_pong\n\n  def add_pingpong(self, pingpong):\n    self.pingpongs.append(pingpong)\n\n  def pop_pingpong(self):\n    return self.pingpongs.pop()\n\n  def build_prompts(self, from_idx: int, to_idx: int, fmt: PromptFmt, truncate_size: int):\n    pass\n\n  def build_uis(self, from_idx: int, to_idx: int, fmt: UIFmt):\n    pass\n\n  def __repr__(self):\n    return json.dumps(self, default=lambda o: o.__dict__)\n\n  @classmethod\n  def from_json(cls, json_str):\n    json_dict = json.loads(json_str)\n\n    new_instance = cls()\n    new_instance.ctx = json_dict['ctx']\n    new_instance.pingpongs = [PingPong.from_json(pingpong) for pingpong in json_dict['pingpongs']]\n    return new_instance  ", "    "]}
{"filename": "src/pingpong/dolly.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass DollyPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"\n### Input:\n{context}\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    return f\"\"\"### Instruction:\n{pingpong.ping[:truncate_size]}\n\n### Response:\n{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"", "\nclass DollyChatPPManager(PPManager):\n  def add_ping(self, ping, fmt: PromptFmt=DollyPromptFmt):\n    allowed = super().add_ping(ping, fmt)\n\n    if allowed:\n      prompts = f\"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n{ping}\n{fmt.ctx(self.ctx)}\n\"\"\"\n      return prompts\n\n    return None\n\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=DollyPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      print(idx)\n      results += fmt.prompt(pingpong)\n\n      if from_idx+idx != to_idx-1:\n        results += \"\"\"\n\n\"\"\"\n\n    return results"]}
{"filename": "src/pingpong/kullm.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\nfrom pingpong.utils import build_prompts\n\nclass KULLMPromptFmt(PromptFmt):\n\t@classmethod\n\tdef ctx(cls, context):\n\t\tif context is None or context == \"\":\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn f\"\"\"{context}\n\"\"\"\n\t\t\t\n\t@classmethod\n\tdef prompt(cls, pingpong, truncate_size):\n\t\tping = pingpong.ping[:truncate_size]\n\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\treturn f\"\"\"### \uba85\ub839\uc5b4:\n{ping}\n### \uc751\ub2f5:\n{pong}\n\"\"\"", "  \nclass KULLMChatPPManager(PPManager):\n\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=KULLMPromptFmt, truncate_size: int=None):\n\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/koalpaca.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass KoAlpacaPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    return f\"\"\"### \uc9c8\ubb38:\n{pingpong.ping[:truncate_size]}\n\n### \uc751\ub2f5:\n{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"", "\nclass KoAlpacaChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=KoAlpacaPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n      if from_idx+idx != to_idx-1:\n        results += \"\"\"\n\n\"\"\"\n\n    return results"]}
{"filename": "src/pingpong/__init__.py", "chunked_list": ["__version__ = '0.4.2'\n\nfrom .pingpong import PingPong\n"]}
{"filename": "src/pingpong/gradio.py", "chunked_list": ["from pingpong.pingpong import PromptFmt, UIFmt\nfrom pingpong.alpaca import AlpacaChatPPManager\nfrom pingpong.koalpaca import KoAlpacaChatPPManager\nfrom pingpong.dolly import DollyChatPPManager\nfrom pingpong.stablelm import StableLMChatPPManager\nfrom pingpong.flan import FlanAlpacaChatPPManager\nfrom pingpong.os_stablelm import OSStableLMChatPPManager\nfrom pingpong.vicuna import VicunaChatPPManager\nfrom pingpong.stable_vicuna import StableVicunaChatPPManager\nfrom pingpong.starchat import StarChatPPManager", "from pingpong.stable_vicuna import StableVicunaChatPPManager\nfrom pingpong.starchat import StarChatPPManager\nfrom pingpong.mpt import MPTChatPPManager\nfrom pingpong.redpajama import RedPajamaChatPPManager\nfrom pingpong.baize import BaizeChatPPManager\nfrom pingpong.xgen import XGenChatPPManager\nfrom pingpong.orca_mini import OrcaMiniChatPPManager\nfrom pingpong.guanaco import GuanacoChatPPManager\nfrom pingpong.wizard_falcon import WizardFalconChatPPManager\nfrom pingpong.kullm import KULLMChatPPManager", "from pingpong.wizard_falcon import WizardFalconChatPPManager\nfrom pingpong.kullm import KULLMChatPPManager\n\nfrom pingpong.utils import gradio_build_uis\n\nclass GradioChatUIFmt(UIFmt):\n  @classmethod\n  def ui(cls, pingpong):\n    return (pingpong.ping, pingpong.pong)\n\nclass GradioAlpacaChatPPManager(AlpacaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioAlpacaChatPPManager(AlpacaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioDollyChatPPManager(DollyChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioStableLMChatPPManager(StableLMChatPPManager):\n    def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n      if to_idx == -1 or to_idx >= len(self.pingpongs):\n        to_idx = len(self.pingpongs)\n\n      results = []\n\n      for pingpong in self.pingpongs[from_idx:to_idx]:\n        results.append(fmt.ui(pingpong))\n\n      return results", "\nclass GradioKoAlpacaChatPPManager(KoAlpacaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioFlanAlpacaChatPPManager(FlanAlpacaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioOSStableLMChatPPManager(OSStableLMChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioVicunaChatPPManager(VicunaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "  \nclass GradioStableVicunaChatPPManager(StableVicunaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results  ", "\nclass GradioStarChatPPManager(StarChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "  \nclass GradioMPTChatPPManager(MPTChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "  \nclass GradioRedPajamaChatPPManager(RedPajamaChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "\nclass GradioBaizeChatPPManager(BaizeChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = []\n\n    for pingpong in self.pingpongs[from_idx:to_idx]:\n      results.append(fmt.ui(pingpong))\n\n    return results", "  \nclass GradioXGenChatPPManager(XGenChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)\n  \nclass GradioOrcaMiniChatPPManager(OrcaMiniChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)\n  \nclass GradioGuanacoChatPPManager(GuanacoChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)", "  \nclass GradioGuanacoChatPPManager(GuanacoChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)\n  \nclass GradioWizardChatPPManager(WizardFalconChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)\n  \nclass GradioKULLMChatPPManager(KULLMChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)", "  \nclass GradioKULLMChatPPManager(KULLMChatPPManager):\n  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n    return gradio_build_uis(self, from_idx, to_idx, fmt)"]}
{"filename": "src/pingpong/starchat.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass StarChatPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|end|>\\n\"\n    return f\"\"\"<|user|>{ping}<|end|>\n<|assistant|>{pong}\"\"\"", "\nclass StarChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StarChatPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results", ""]}
{"filename": "src/pingpong/stablelm.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass StableLMPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n    return f\"<|USER|>{ping}<|ASSISTANT|>{pong}\"", "\nclass StableLMChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StableLMPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results"]}
{"filename": "src/pingpong/utils.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt, UIFmt\n\ndef build_prompts(\n\t\tppm: PPManager=None, \n\t\tfrom_idx: int=0, \n\t\tto_idx: int=-1, \n\t\tfmt: PromptFmt=None, \n\t\ttruncate_size: int=None\n):\n\tif to_idx == -1 or to_idx >= len(ppm.pingpongs):\n\t\t\tto_idx = len(ppm.pingpongs)\n\n\tresults = fmt.ctx(ppm.ctx)\n\n\tfor idx, pingpong in enumerate(ppm.pingpongs[from_idx:to_idx]):\n\t\t\tresults += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n\treturn results", "\ndef gradio_build_uis(\n\t\tppm: PPManager=None, \n\t\tfrom_idx: int=0, \n\t\tto_idx: int=-1, \n\t\tfmt: UIFmt=None\n):\n\tif to_idx == -1 or to_idx >= len(ppm.pingpongs):\n\t\t\tto_idx = len(ppm.pingpongs)\n\t\n\tresults = []\n\t\n\tfor pingpong in ppm.pingpongs[from_idx:to_idx]:\n\t\t\tresults.append(fmt.ui(pingpong))\n\t\t\t\n\treturn results"]}
{"filename": "src/pingpong/orca_mini.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\nfrom pingpong.utils import build_prompts\n\nclass OrcaMiniChatPromptFmt(PromptFmt):\n\t@classmethod\n\tdef ctx(cls, context):\n\t\tif context is None or context == \"\":\n\t\t\t\treturn \"\"\n\t\telse:\n\t\t\t\treturn f\"\"\"### System:\n{context}\n\"\"\"\n\t\n\t@classmethod\n\tdef prompt(cls, pingpong, truncate_size):\n\t\tping = pingpong.ping[:truncate_size]\n\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\treturn f\"\"\"### User:\n{ping}\n### Response:\n{pong}\"\"\"", "\nclass OrcaMiniChatPPManager(PPManager):\n\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=OrcaMiniChatPromptFmt, truncate_size: int=None):\n\t\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/guanaco.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\nfrom pingpong.utils import build_prompts\n\nclass GuanacoPromptFmt(PromptFmt):\n\t@classmethod\n\tdef ctx(cls, context):\n\t\tif context is None or context == \"\":\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn f\"\"\"{context}\n\"\"\"\n\t\t\t\n\t@classmethod\n\tdef prompt(cls, pingpong, truncate_size):\n\t\tping = pingpong.ping[:truncate_size]\n\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\treturn f\"\"\"### Human: {ping}\n### Assistant: {pong}\n\"\"\"", "  \nclass GuanacoChatPPManager(PPManager):\n\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=GuanacoPromptFmt, truncate_size: int=None):\n\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/mpt.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass MPTChatPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|im_end|>\\n\"\n    return f\"\"\"<|im_start|>user\n{ping}<|im_end|>assistant<|im_start|>\n{pong}\"\"\"", "\nclass MPTChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=MPTChatPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results", ""]}
{"filename": "src/pingpong/group.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\nclass MirrorGroupPPManager:\n    def __init__(self, ppms: List[PPManager]):\n        self.ppmanagers = ppms\n\n    def append_pong(self, piece_pong, at=0):\n        self.ppmanagers[at].append_pong(piece_pong)\n\n    def add_pingpong(self, pingpong, at=None):\n        if at == None:\n            for ppm in self.ppmanagers:\n                ppm.add_pingpong(copy.deepcopy(pingpong))\n        else:      \n            self.ppmanagers[at].add_pingpong(copy.deepcopy(pingpong))\n\n    def replace_pong(self, pong, at=None):\n        if at == None:\n            for ppm in self.ppmanagers:\n                ppm.pingpongs[-1].pong = pong\n        else:\n            self.ppmanagers[at].pingpongs[-1].pong = pong\n            \n    def build_prompts(self, from_idx: int=0, to_idx: int=-1, truncate_size: int=None):\n        results = []\n        for ppm in self.ppmanagers:\n            results.append(\n                ppm.build_prompts(\n                    from_idx=from_idx, \n                    to_idx=to_idx, \n                    truncate_size=truncate_size\n                )\n            )\n        return results\n\n    def build_uis(self, from_idx: int=0, to_idx: int=-1):\n        return self.ppmanagers[0].build_uis(\n            from_idx=from_idx, to_idx=to_idx\n        )"]}
{"filename": "src/pingpong/os_stablelm.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass OSStableLMPromptFmt(PromptFmt):\n  @classmethod\n  def ctx(cls, context):\n    if context is None or context == \"\":\n      return \"\"\n    else:\n      return f\"\"\"{context}\n\n\"\"\"\n\n  @classmethod\n  def prompt(cls, pingpong, truncate_size):\n    ping = pingpong.ping[:truncate_size]\n    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n    return f\"<|prompter|>{ping}<|endoftext|><|assistant|>{pong}\"", "\nclass OSStableLMChatPPManager(PPManager):\n  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=OSStableLMPromptFmt, truncate_size: int=None):\n    if to_idx == -1 or to_idx >= len(self.pingpongs):\n      to_idx = len(self.pingpongs)\n\n    results = fmt.ctx(self.ctx)\n\n    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\n    return results"]}
{"filename": "src/pingpong/baize.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\n\nclass BaizePromptFmt(PromptFmt):\n    @classmethod\n    def ctx(cls, context):\n        if context is None or context == \"\":\n            return \"\"\n        else:\n            return f\"\"\"{context}\n\"\"\"\n        \n    @classmethod\n    def prompt(cls, pingpong, truncate_size):\n        ping = pingpong.ping[:truncate_size]\n        pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n        return f\"\"\"[|Human|]: {ping}\n[|AI|]: {pong}\n\"\"\"", "    \nclass BaizeChatPPManager(PPManager):\n    def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=BaizePromptFmt, truncate_size: int=None):\n        if to_idx == -1 or to_idx >= len(self.pingpongs):\n            to_idx = len(self.pingpongs)\n            \n        results = fmt.ctx(self.ctx)\n        \n        for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n            results += fmt.prompt(pingpong, truncate_size=truncate_size)\n            \n        return results"]}
{"filename": "src/pingpong/xgen.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.pingpong import PromptFmt\nfrom pingpong.utils import build_prompts\n\nclass XGenChatPromptFmt(PromptFmt):\n\t@classmethod\n\tdef ctx(cls, context):\n\t\tif context is None or context == \"\":\n\t\t\treturn \"\"\n\t\telse:\n\t\t\treturn f\"\"\"{context}\n\n\"\"\"\n    \n\t@classmethod\n\tdef prompt(cls, pingpong, truncate_size):\n\t\tping = pingpong.ping[:truncate_size]\n\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\treturn f\"\"\"### Human: {ping}\n###{pong}\n\"\"\"", "    \n\nclass XGenChatPPManager(PPManager):\n\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=XGenChatPromptFmt, truncate_size: int=None):\n\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/context/last_window_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.context.strategy import CtxStrategy\n\nclass CtxLastWindowStrategy(CtxStrategy):\n    def __init__(self, max_pingpongs: int):\n        self.max_pingpongs = max_pingpongs\n    \n    def __call__(self, ppmanager: PPManager, build_uis=False, truncate_size=None):\n        pps = ppmanager.pingpongs\n\n        if len(pps) <= self.max_pingpongs:\n            start_idx = 0\n        else:\n            start_idx = len(pps) - self.max_pingpongs\n\n        if build_uis:\n            return (\n                ppmanager.build_prompts(from_idx=start_idx, truncate_size=truncate_size),\n                ppmanager.build_uis(from_idx=start_idx)\n            )\n        else:\n            return ppmanager.build_prompts(from_idx=start_idx, truncate_size=truncate_size)"]}
{"filename": "src/pingpong/context/internet_search_strategy.py", "chunked_list": ["import re\nimport copy\nimport json\nimport random\nimport string\nimport http.client\n\nimport chromadb\nimport torch\nimport torch.nn.functional as F", "import torch\nimport torch.nn.functional as F\n\nfrom urllib.request import urlopen\nfrom urllib.error import HTTPError\nfrom bs4 import BeautifulSoup\nfrom transformers import AutoTokenizer, AutoModel\n\nfrom pingpong import PingPong\nfrom pingpong.pingpong import PPManager", "from pingpong import PingPong\nfrom pingpong.pingpong import PPManager\nfrom pingpong.context.strategy import CtxStrategy\n\ndefault_instruction = \"\"\"Based on the provided texts below, please answer to '{ping}' in your own words. Try to explain in detailed introduction, body, and conclusion structure as much as possible.\n=====================\n\"\"\"\n\nclass SimilaritySearcher:\n    def __init__(\n        self, model, tokenizer, max_length=512, device=\"cpu\"\n    ):\n        self.model = model\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n        self.device = device\n\n    def get_embeddings(self, input_texts):\n        # Tokenize the input texts\n        batch_dict = self.tokenizer(\n            input_texts,\n            max_length=self.max_length,\n            padding=True,\n            truncation=True,\n            return_tensors='pt'\n        ).to(self.device)\n\n        outputs = self.model(**batch_dict)\n        embeddings = self._average_pool(\n            outputs.last_hidden_state, batch_dict['attention_mask']\n        )\n\n        embeddings = F.normalize(embeddings, p=2, dim=1)\n        \n        embeddings_cpu = embeddings.to(\"cpu\")\n        embeddings_list = embeddings_cpu.tolist()\n        \n        if self.device == \"cuda\":\n            del embeddings\n\n            torch.cuda.empty_cache()        \n        \n        return embeddings_cpu, embeddings_list\n    \n    def _average_pool(\n        self,\n        last_hidden_states,\n        attention_mask\n    ):\n        last_hidden = last_hidden_states.masked_fill(~attention_mask[..., None].bool(), 0.0)\n        return last_hidden.sum(dim=1) / attention_mask.sum(dim=1)[..., None]\n\n    @classmethod\n    def from_pretrained(cls, base_name=\"intfloat/e5-large-v2\", max_length=512, device=\"cpu\"):\n        tokenizer = AutoTokenizer.from_pretrained(base_name)\n        model = AutoModel.from_pretrained(base_name).to(device)\n        \n        return SimilaritySearcher(\n            model, tokenizer, max_length, device\n        )", "class SimilaritySearcher:\n    def __init__(\n        self, model, tokenizer, max_length=512, device=\"cpu\"\n    ):\n        self.model = model\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n        self.device = device\n\n    def get_embeddings(self, input_texts):\n        # Tokenize the input texts\n        batch_dict = self.tokenizer(\n            input_texts,\n            max_length=self.max_length,\n            padding=True,\n            truncation=True,\n            return_tensors='pt'\n        ).to(self.device)\n\n        outputs = self.model(**batch_dict)\n        embeddings = self._average_pool(\n            outputs.last_hidden_state, batch_dict['attention_mask']\n        )\n\n        embeddings = F.normalize(embeddings, p=2, dim=1)\n        \n        embeddings_cpu = embeddings.to(\"cpu\")\n        embeddings_list = embeddings_cpu.tolist()\n        \n        if self.device == \"cuda\":\n            del embeddings\n\n            torch.cuda.empty_cache()        \n        \n        return embeddings_cpu, embeddings_list\n    \n    def _average_pool(\n        self,\n        last_hidden_states,\n        attention_mask\n    ):\n        last_hidden = last_hidden_states.masked_fill(~attention_mask[..., None].bool(), 0.0)\n        return last_hidden.sum(dim=1) / attention_mask.sum(dim=1)[..., None]\n\n    @classmethod\n    def from_pretrained(cls, base_name=\"intfloat/e5-large-v2\", max_length=512, device=\"cpu\"):\n        tokenizer = AutoTokenizer.from_pretrained(base_name)\n        model = AutoModel.from_pretrained(base_name).to(device)\n        \n        return SimilaritySearcher(\n            model, tokenizer, max_length, device\n        )", "    \nclass InternetSearchStrategy(CtxStrategy):\n    def __init__(\n        self,\n        similarity_searcher,\n        instruction=default_instruction,\n        serper_api_key=None, \n        db_name=None, chunk_size=1800\n    ):\n        self.searcher = similarity_searcher\n        self.instruction = instruction\n        self.db_name = db_name\n        self.chunk_size = chunk_size\n        self.serper_api_key=serper_api_key\n\n        if self.searcher is None:\n            raise ValueError(\"SimilaritySearcher is not set.\")\n        \n        if self.serper_api_key is None:\n            raise ValueError(\"API Key is not set. Grasp your own at https://serper.dev/\")        \n        \n        if self.db_name is None:\n            self.db_name = InternetSearchStrategy.id_generator()\n        \n    def __call__(self, ppmanager: PPManager, search_query=None, search_top_k=5, top_k=8, keep_original=False):\n        ppm = copy.deepcopy(ppmanager)\n        if search_query is None:\n            search_query = ppm.pingpongs[-1].ping\n        last_ping = ppm.pingpongs[-1].ping\n        \n        # 1st yield\n        ppm.add_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n        ppm.append_pong(\"\u2022 Creating Chroma DB Collection...\")\n        yield ppm, \"\u2022 Creating Chroma DB Collection \u221a\"\n        \n        chroma_client = chromadb.Client()\n        try:\n            chroma_client.delete_collection(self.db_name)\n        except:\n            pass\n        \n        col = chroma_client.create_collection(self.db_name)\n        \n        # 2nd yield\n        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n        ppm.append_pong(\"\u2022 Creating Chroma DB Collection \u221a\\n\")\n        ppm.append_pong(\"\u2022 Google searching...\\n\")\n        yield ppm, \"\u2022 Google searching \u221a\"\n\n        urls = []\n        titles = []\n        search_results = []\n        for search_result, title, url in self._google_search(search_query, search_top_k):\n            search_results.append(search_result)\n            titles.append(title)\n            urls.append(url)\n            \n            ppm.append_pong(f\"    - [{title}]({url}) \u221a\\n\")\n            yield ppm, f\" \u25b7 [{title}]({url}) \u221a\"\n        \n        # 3rd yield\n        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n        ppm.append_pong(\"\u2022 Creating Chroma DB Collection \u221a\\n\")\n        ppm.append_pong(\"\u2022 Google searching \u221a\\n\")\n        for title, url in zip(titles, urls):\n            ppm.append_pong(f\"    - [{title}]({url}) \u221a\\n\")\n        ppm.append_pong(\"\u2022 Creating embeddings...\")\n        yield ppm, \"\u2022 Creating embeddings \u221a\"\n        \n        final_chunks = []\n        for search_result in search_results:\n            chunks = self._create_chunks(\n                search_result, \n                chunk_size=self.searcher.max_length\n            )\n            final_chunks.append(chunks)  \n            \n        self._put_chunks_into_collection(\n            col, final_chunks, docs_per_step=1\n        )\n        \n        query_results = self._query(\n            col, f\"query: {last_ping}\", top_k,\n        )\n\n        # 4th yield\n        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n        ppm.append_pong(\"\u2022 Creating Chroma DB Collection \u221a\\n\")\n        ppm.append_pong(\"\u2022 Google searching \u221a\\n\")\n        for title, url in zip(titles, urls):\n            ppm.append_pong(f\"    - [{title}]({url}) \u221a\\n\")\n        ppm.append_pong(\"\u2022 Creating embeddings \u221a\\n\")\n        ppm.append_pong(\"\u2022 Information retrieval...\")\n        yield ppm, \"\u2022 Information retrieval \u221a\"\n        \n        last_ping = self.instruction.format(ping=last_ping)\n        for doc in query_results['documents'][0]:\n            last_ping = last_ping + doc.replace('passage: ', '') + \"\\n\"\n\n        # 5th yield\n        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n        ppm.append_pong(\"\u2022 Creating Chroma DB Collection \u221a\\n\")\n        ppm.append_pong(\"\u2022 Google searching \u221a\\n\")\n        for title, url in zip(titles, urls):\n            ppm.append_pong(f\"    - [{title}]({url}) \u221a\\n\")\n        ppm.append_pong(\"\u2022 Creating embeddings \u221a\\n\")\n        ppm.append_pong(\"\u2022 Information retrieval \u221a\")\n        yield ppm, \"\u2022 Done \u221a\"\n            \n        ppm.pingpongs[-1].ping = last_ping\n        ppm.replace_last_pong(\"\")\n        yield ppm, \"\u23f3 Wait until LLM generates message for you \u23f3\"\n        \n    def _google_search(self, query, search_top_k):\n        search_results = self.__google_search(query, self.serper_api_key)\n\n        final_results = []\n        titles = []\n        urls = []\n        num_of_searched = 0\n\n        for search_result in search_results:\n            if num_of_searched >= search_top_k:\n                break\n            \n            title = search_result['title']\n            url = search_result['link']\n\n            if url.startswith(\"https://youtube.com\"):\n                continue\n\n            try: \n                page = urlopen(url, timeout=5)\n                html_bytes = page.read()\n                html = html_bytes.decode(\"utf-8\")\n            except:\n                continue \n \n            ps = \"\"\n            soup = BeautifulSoup(html, \"html.parser\")\n\n            for tag in soup.findAll('p'):\n                for string in tag.strings:\n                    ps = ps + string\n\n            ps = self._replace_multiple_newlines(ps)\n            yield ps, title, url\n            # final_results.append(ps)\n            # urls.append(url)\n            # titles.append(title)\n            num_of_searched = num_of_searched+1\n\n        # return final_results, titles, urls\n\n    def __google_search(self, query, serper_key):\n        conn = http.client.HTTPSConnection(\"google.serper.dev\")\n        payload = json.dumps({\n            \"q\": query\n        })\n        headers = {\n            'X-API-KEY': serper_key,\n            'Content-Type': 'application/json'\n        }\n        conn.request(\"POST\", \"/search\", payload, headers)\n        res = conn.getresponse()\n        data = res.read()\n        return json.loads(data)['organic']\n    \n    def _query(\n        self, collection, q, top_k\n    ):\n        _, q_embeddings_list = self.searcher.get_embeddings([q])\n\n        return collection.query(\n            query_embeddings=q_embeddings_list,\n            n_results=top_k\n        )\n    \n    # chunk_size == number of characters\n    def _create_chunks(self, text, chunk_size):\n        chunks = []\n\n        for idx in range(0, len(text), chunk_size):\n            chunks.append(\n                f\"passage: {text[idx:idx+chunk_size]}\"\n            )\n\n        return chunks\n    \n    def _put_chunk_into_collection(\n        self, collection, chunk_id, chunk, docs_per_step=1\n    ):\n        for i in range(0, len(chunk), docs_per_step):\n            cur_texts = chunk[i:i+docs_per_step]\n            _, embeddings_list = self.searcher.get_embeddings(cur_texts)\n            ids = [\n                f\"id-{chunk_id}-{num}\" for num in range(i, i+docs_per_step)\n            ]\n\n            collection.add(\n              embeddings=embeddings_list,\n              documents=cur_texts,\n              ids=ids\n            )\n\n    def _put_chunks_into_collection(\n        self, collection,\n        chunks, docs_per_step=1\n    ):\n        for idx, chunk in enumerate(chunks):\n            self._put_chunk_into_collection(\n                collection, idx, \n                chunk, docs_per_step=docs_per_step\n            )\n\n    def _replace_multiple_newlines(self, text):\n        \"\"\"Replaces multiple newline characters with a single newline character.\"\"\"\n        pattern = re.compile(r\"\\n+\")\n        return pattern.sub(\"\\n\", text)             \n            \n    @classmethod\n    def id_generator(cls, size=10, chars=string.ascii_uppercase + string.digits):\n        return ''.join(random.choice(chars) for _ in range(size))", ""]}
{"filename": "src/pingpong/context/__init__.py", "chunked_list": ["from .auto_summary_strategy import CtxAutoSummaryStrategy\nfrom .last_window_strategy import CtxLastWindowStrategy\nfrom .search_window_strategy import CtxSearchWindowStrategy\nfrom .internet_search_strategy import SimilaritySearcher, InternetSearchStrategy"]}
{"filename": "src/pingpong/context/auto_summary_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.context.strategy import CtxStrategy\n\nclass CtxAutoSummaryStrategy(CtxStrategy):\n    def __init__(self, max_pingpongs: int):\n        self.max_pingpongs = max_pingpongs\n        self.last_idx = 0\n    \n    def __call__(self, ppmanager: PPManager):\n        pps = ppmanager.pingpongs\n        \n        prev_idx = self.last_idx\n        sum_req = False\n\n        if len(pps[self.last_idx:]) >= self.max_pingpongs:\n            sum_req = True\n            self.last_idx = len(pps)\n\n        return sum_req, ppmanager.build_prompts(from_idx=prev_idx)"]}
{"filename": "src/pingpong/context/search_window_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\nfrom pingpong.context.strategy import CtxStrategy\n\nclass CtxSearchWindowStrategy(CtxStrategy):\n    def __init__(self, window_size: int):\n        self.window_size = window_size\n    \n    def __call__(self, ppmanager: PPManager):\n        pps = ppmanager.pingpongs\n        num_wins = len(pps) // self.window_size\n        remainings = True if len(pps) % self.window_size != 0 else False\n\n        for win_idx in range(num_wins):\n            cur_win_start_idx = win_idx * self.window_size\n            cur_win_end_idx = cur_win_start_idx + self.window_size\n            yield ppmanager.build_prompts(from_idx=cur_win_start_idx, to_idx=cur_win_end_idx)\n\n        if remainings:\n            last_win_start_idx = (num_wins) * self.window_size\n            yield ppmanager.build_prompts(from_idx=last_win_start_idx)"]}
{"filename": "src/pingpong/context/strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\nclass CtxStrategy:\n    def __call__(self, ppmanager: PPManager):\n        pass\n"]}
