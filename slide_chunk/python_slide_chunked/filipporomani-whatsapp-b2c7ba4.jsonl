{"filename": "setup.py", "chunked_list": ["from os import path\nfrom setuptools import setup\nfrom pre_dist import update_version\nupdate_version()\nfrom constants import VERSION\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.md\")) as f:\n    long_description = f.read()\n", "\nsetup(\n    name=\"whatsapp-python\",\n    version=VERSION,\n    description=\"Open source Python wrapper for the WhatsApp Cloud API\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/filipporomani/whatsapp\",\n    download_url=\"https://github.com/filipporomani/whatsapp/releases/latest\",\n    author=\"Filippo Romani\",", "    download_url=\"https://github.com/filipporomani/whatsapp/releases/latest\",\n    author=\"Filippo Romani\",\n    author_email=\"mail@filipporomani.it\",\n    license=\"MIT\",\n    packages=[\"whatsapp\"],\n    install_requires=[\"requests\", \"requests-toolbelt\", \"typing\", \"fastapi\"],\n    keywords=[\n        \"whatsapp\",\n        \"whatsapp-libary\",\n        \"WhatsApp Cloud API Wrapper\",", "        \"whatsapp-libary\",\n        \"WhatsApp Cloud API Wrapper\",\n        \"PyWhatsApp\",\n        \"WhatsApp API in Python\",\n    ],\n    python_requires=\">=3.6\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Build Tools\",", "        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Build Tools\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],", "        \"Programming Language :: Python :: 3.11\",\n    ],\n)\n"]}
{"filename": "constants.py", "chunked_list": ["# internal use only\n\nVERSION = \"3.0.0\""]}
{"filename": "pre_dist.py", "chunked_list": ["##\u00a0internal use only\n\ndef update_version():\n    f = open(\"./whatsapp/constants.py\", \"r\")\n    f = f.read()\n\n    with open(\"./constants.py\", \"w+\") as f1:\n        f1.write(f)\n    \n    from constants import VERSION\n    \n    with open(\"./.version\", \"w+\") as f2:\n        f2.write(VERSION)"]}
{"filename": "whatsapp/__init__.py", "chunked_list": ["\"\"\"\nUnofficial Python wrapper for the WhatsApp Cloud API.\n\"\"\"\nfrom __future__ import annotations\n\nimport requests\nimport logging\nfrom fastapi import FastAPI, Request\nfrom constants import VERSION\n", "from constants import VERSION\n\n\n\n\nclass WhatsApp(object):\n    def __init__(self, token: str = \"\", phone_number_id: str = \"\", logger: bool = True, update_check: bool = True):\n        \"\"\"\n        Initialize the WhatsApp Object\n\n        Args:\n            token[str]: Token for the WhatsApp cloud API obtained from the Facebook developer portal\n            phone_number_id[str]: Phone number id for the WhatsApp cloud API obtained from the developer portal\n            logger[bool]: Whether to enable logging or not (default: True)\n        \"\"\"\n\n        # Check if the version is up to date\n        logging.getLogger(__name__).addHandler(logging.NullHandler())\n        \n\n        self.VERSION = VERSION\n        if update_check is True:\n            latest = str(requests.get(\n                \"https://pypi.org/pypi/whatsapp-python/json\").json()[\"info\"][\"version\"])\n            if self.VERSION != latest:\n                version_int = int(self.VERSION.replace(\".\", \"\"))\n                latest_int = int(latest.replace(\".\", \"\"))\n                # this is to avoid the case where the version is 1.0.10 and the latest is 1.0.2 (possible if user is using the github version)\n                if version_int < latest_int:\n                    logging.critical(\n                        f\"Whatsapp-python is out of date. Please update to the latest version {latest}. READ THE CHANGELOG BEFORE UPDATING. NEW VERSIONS MAY BREAK YOUR CODE IF NOT PROPERLY UPDATED.\")\n                if version_int > latest_int:\n                    latest_beta = int(str(requests.get(\n                        \"https://raw.githubusercontent.com/filipporomani/whatsapp/main/.version\").text).replace(\".\", \"\"))\n                    if latest_beta > version_int:\n                        logging.critical(\n                            \"A new beta version is available. Please update to the latest version. READ THE CHANGELOG BEFORE UPDATING. NEW VERSIONS MAY BREAK YOUR CODE IF NOT PROPERLY UPDATED.\")\n                    logging.critical(\n                        f\"You are using a development version of whatsapp-python. Please report any issue on GitHub.\")\n\n        if token == \"\" or phone_number_id == \"\":\n            logging.error(\"Token or phone number id not provided\")\n            raise ValueError(\n                \"Token or phone number ID not provided but is required\")\n        self.token = token\n        self.phone_number_id = phone_number_id\n        self.base_url = \"https://graph.facebook.com/v17.0\"\n        self.url = f\"{self.base_url}/{phone_number_id}/messages\"\n\n        async def base():\n            pass\n        self.message_handler = base\n        self.other_handler = base\n        self.verification_handler = base\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.token}\"\n        }\n        if logger is False:\n            logging.disable(logging.INFO)\n            logging.disable(logging.ERROR)\n\n        self.app = FastAPI()\n\n        # Verification handler has 1 argument: challenge (str | bool): str if verification is successful, False if not\n\n        @self.app.get(\"/\")\n        async def verify_endpoint(r: Request):\n            if r.query_params.get(\"hub.verify_token\") == self.token:\n                logging.info(\"Verified webhook\")\n                challenge = r.query_params.get(\"hub.challenge\")\n                self.verification_handler(challenge)\n                self.other_handler(challenge)\n                return str(challenge)\n            logging.error(\"Webhook Verification failed\")\n            await self.verification_handler(False)\n            await self.other_handler(False)\n            return {\"success\": False}\n\n        @self.app.post(\"/\")\n        async def hook(r: Request):\n            # Handle Webhook Subscriptions\n            data = await r.json()\n            if data is None:\n                return {\"success\": False}\n            logging.info(\"Received webhook data: %s\", data)\n            changed_field = self.instance.changed_field(data)\n            if changed_field == \"messages\":\n                new_message = self.instance.is_message(data)\n                if new_message:\n                    msg = Message(instance=self.instance, data=data)\n                    await self.message_handler(msg)\n                    await self.other_handler(msg)\n            return {\"success\": True}\n\n    # all the files starting with _ are imported here, and should not be imported directly.\n\n    from ext._property import authorized\n    from ext._send_others import send_custom_json, send_contacts\n    from ext._message import send_template\n    from ext._send_media import send_image, send_video, send_audio, send_location, send_sticker, send_document\n    from ext._media import upload_media, query_media_url, download_media, delete_media\n    from ext._buttons import send_button, create_button, send_reply_button\n    from ext._static import is_message, get_mobile, get_author, get_name, get_message, get_message_id, get_message_type, get_message_timestamp, get_audio, get_delivery, get_document, get_image, get_interactive_response, get_location, get_video, changed_field\n    is_message = staticmethod(is_message)\n    get_mobile = staticmethod(get_mobile)\n    get_name = staticmethod(get_name)\n    get_message = staticmethod(get_message)\n    get_message_id = staticmethod(get_message_id)\n    get_message_type = staticmethod(get_message_type)\n    get_message_timestamp = staticmethod(get_message_timestamp)\n    get_audio = staticmethod(get_audio)\n    get_delivery = staticmethod(get_delivery)\n    get_document = staticmethod(get_document)\n    get_image = staticmethod(get_image)\n    get_interactive_response = staticmethod(get_interactive_response)\n    get_location = staticmethod(get_location)\n    get_video = staticmethod(get_video)\n    changed_field = staticmethod(changed_field)\n    get_author = staticmethod(get_author)\n\n    authorized = property(authorized)\n\n    def create_message(self, **kwargs) -> Message:\n        \"\"\"\n        Create a message object\n\n        Args:\n            data[dict]: The message data\n            content[str]: The message content\n            to[str]: The recipient\n            rec_type[str]: The recipient type (individual/group)\n        \"\"\"\n        return Message(**kwargs, instance=self)\n\n    def on_message(self, handler: function):\n        \"\"\"\n        Set the handler for incoming messages\n\n        Args:\n            handler[function]: The handler function\n        \"\"\"\n        self.message_handler = handler\n\n    def on_event(self, handler: function):\n        \"\"\"\n        Set the handler for other events\n\n        Args:\n            handler[function]: The handler function\n        \"\"\"\n        self.other_handler = handler\n\n    def on_verification(self, handler: function):\n        \"\"\"\n        Set the handler for verification\n\n        Args:\n            handler[function]: The handler function\n        \"\"\"\n        self.verification_handler = handler\n\n    def run(self, host: str = \"localhost\", port: int = 5000, debug: bool = False, **options):\n        self.app.run(host=host, port=port, debug=debug, **options)", "\n\nclass Message(object):\n    def __init__(self, data: dict = {}, instance: WhatsApp = None, content: str = \"\", to: str = \"\", rec_type: str = \"individual\"):  # type: ignore\n        try:\n            self.id = instance.get_message_id(data)\n        except:\n            self.id = None\n        try:\n            self.type = self.instance.get_message_type(data)\n        except:\n            self.type = \"text\"\n        self.data = data\n        self.rec = rec_type\n        self.to = to\n        try:\n            self.content = content if content != \"\" else self.instance.get_message(\n                data)\n        except:\n            self.content = content\n        try:\n            self.sender = self.instance.get_mobile(data)\n        except:\n            self.sender = None\n        try:\n            self.name = self.instance.get_name(data)\n        except:\n            self.name = None\n\n        if self.type == \"image\":\n            try:\n                self.image = self.instance.get_image(data)\n            except:\n                self.image = None\n        elif self.type == \"video\":\n            try:\n                self.video = self.instance.get_video(data)\n            except:\n                self.video = None\n        elif self.type == \"audio\":\n            try:\n                self.audio = self.instance.get_audio(data)\n            except:\n                pass\n        elif self.type == \"document\":\n            try:\n                self.document = self.instance.get_document(data)\n            except:\n                pass\n        elif self.type == \"location\":\n            try:\n                self.location = self.instance.get_location(data)\n            except:\n                pass\n        elif self.type == \"interactive\":\n            try:\n                self.interactive = self.instance.get_interactive_response(data)\n            except:\n                pass\n\n        self.instance = instance\n        self.url = self.instance.url\n        self.headers = self.instance.headers\n\n    from ext._message import send, reply, mark_as_read", ""]}
{"filename": "whatsapp/constants.py", "chunked_list": ["# internal use only\n\nVERSION = \"3.0.0\""]}
{"filename": "whatsapp/ext/_send_media.py", "chunked_list": ["import logging\nimport requests\n\n\ndef send_location(self, lat: str, long: str, name: str, address: str, recipient_id: str) -> dict:\n    \"\"\"\n    Sends a location message to a WhatsApp user\n\n    Args:\n        lat[str]: Latitude of the location\n        long[str]: Longitude of the location\n        name[str]: Name of the location\n        address[str]: Address of the location\n        recipient_id[str]: Phone number of the user with country code wihout +\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_location(\"-23.564\", \"-46.654\", \"My Location\", \"Rua dois, 123\", \"5511999999999\")\n    \"\"\"\n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"to\": recipient_id,\n        \"type\": \"location\",\n        \"location\": {\n            \"latitude\": lat,\n            \"longitude\": long,\n            \"name\": name,\n            \"address\": address,\n        },\n    }\n    logging.info(f\"Sending location to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Location sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Location not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(r.json())\n    return r.json()", "\n\ndef send_image(\n    self,\n    image: str,\n    recipient_id: str,\n    recipient_type: str = \"individual\",\n    caption: str = \"\",\n    link: bool = True,\n) -> dict:\n    \"\"\"\n    Sends an image message to a WhatsApp user\n\n    There are two ways to send an image message to a user, either by passing the image id or by passing the image link.\n    Image id is the id of the image uploaded to the cloud api.\n\n    Args:\n        image[str]: Image id or link of the image\n        recipient_id[str]: Phone number of the user with country code wihout +\n        recipient_type[str]: Type of the recipient, either individual or group\n        caption[str]: Caption of the image\n        link[bool]: Whether to send an image id or an image link, True means that the image is an id, False means that the image is a link\n\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_image(\"https://i.imgur.com/Fh7XVYY.jpeg\", \"5511999999999\")\n    \"\"\"\n    if link:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"recipient_type\": recipient_type,\n            \"to\": recipient_id,\n            \"type\": \"image\",\n            \"image\": {\"link\": image, \"caption\": caption},\n        }\n    else:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"recipient_type\": recipient_type,\n            \"to\": recipient_id,\n            \"type\": \"image\",\n            \"image\": {\"id\": image, \"caption\": caption},\n        }\n    logging.info(f\"Sending image to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Image sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Image not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(r.json())\n    return r.json()", "\n\ndef send_sticker(self, sticker: str, recipient_id: str, recipient_type: str = \"individual\", link: bool = True) -> dict:\n    \"\"\"\n    Sends a sticker message to a WhatsApp user\n\n    There are two ways to send a sticker message to a user, either by passing the image id or by passing the sticker link.\n    Sticker id is the id of the sticker uploaded to the cloud api.\n\n    Args:\n        sticker[str]: Sticker id or link of the sticker\n        recipient_id[str]: Phone number of the user with country code wihout +\n        recipient_type[str]: Type of the recipient, either individual or group\n        link[bool]: Whether to send an sticker id or an sticker link, True means that the sticker is an id, False means that the image is a link\n\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_sticker(\"170511049062862\", \"5511999999999\", link=False)\n    \"\"\"\n    if link:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"recipient_type\": recipient_type,\n            \"to\": recipient_id,\n            \"type\": \"sticker\",\n            \"sticker\": {\"link\": sticker},\n        }\n    else:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"recipient_type\": recipient_type,\n            \"to\": recipient_id,\n            \"type\": \"sticker\",\n            \"sticker\": {\"id\": sticker},\n        }\n    logging.info(f\"Sending sticker to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Sticker sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Sticker not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(r.json())\n    return r.json()", "\n\ndef send_audio(self, audio: str, recipient_id: str, link: bool = True) -> dict:\n    \"\"\"\n    Sends an audio message to a WhatsApp user\n    Audio messages can either be sent by passing the audio id or by passing the audio link.\n\n    Args:\n        audio[str]: Audio id or link of the audio\n        recipient_id[str]: Phone number of the user with country code wihout +\n        link[bool]: Whether to send an audio id or an audio link, True means that the audio is an id, False means that the audio is a link\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_audio(\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\", \"5511999999999\")\n    \"\"\"\n    if link:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"audio\",\n            \"audio\": {\"link\": audio},\n        }\n    else:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"audio\",\n            \"audio\": {\"id\": audio},\n        }\n    logging.info(f\"Sending audio to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Audio sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Audio not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", "\n\ndef send_video(\n    self, video: str, recipient_id: str, caption: str = \"\", link: bool = True\n) -> dict:\n    \"\"\" \"\n    Sends a video message to a WhatsApp user\n    Video messages can either be sent by passing the video id or by passing the video link.\n\n    Args:\n        video[str]: Video id or link of the video\n        recipient_id[str]: Phone number of the user with country code wihout +\n        caption[str]: Caption of the video\n        link[bool]: Whether to send a video id or a video link, True means that the video is an id, False means that the video is a link\n\n    example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_video(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\", \"5511999999999\")\n    \"\"\"\n    if link:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"video\",\n            \"video\": {\"link\": video, \"caption\": caption},\n        }\n    else:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"video\",\n            \"video\": {\"id\": video, \"caption\": caption},\n        }\n    logging.info(f\"Sending video to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Video sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Video not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", "\n\ndef send_document(\n    self, document: str, recipient_id: str, caption: str = \"\", link: bool = True\n) -> dict:\n    \"\"\" \"\n    Sends a document message to a WhatsApp user\n    Document messages can either be sent by passing the document id or by passing the document link.\n\n    Args:\n        document[str]: Document id or link of the document\n        recipient_id[str]: Phone number of the user with country code wihout +\n        caption[str]: Caption of the document\n        link[bool]: Whether to send a document id or a document link, True means that the document is an id, False means that the document is a link\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_document(\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\", \"5511999999999\")\n    \"\"\"\n    if link:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"document\",\n            \"document\": {\"link\": document, \"caption\": caption},\n        }\n    else:\n        data = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": recipient_id,\n            \"type\": \"document\",\n            \"document\": {\"id\": document, \"caption\": caption},\n        }\n\n    logging.info(f\"Sending document to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Document sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Document not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", ""]}
{"filename": "whatsapp/ext/_media.py", "chunked_list": ["import logging\nimport requests\nimport os\nimport mimetypes\nfrom requests_toolbelt.multipart.encoder import MultipartEncoder\nfrom typing import Union, Dict, Any\n\n\ndef upload_media(self, media: str) -> Union[Dict[Any, Any], None]:\n    \"\"\"\n    Uploads a media to the cloud api and returns the id of the media\n\n    Args:\n        media[str]: Path of the media to be uploaded\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.upload_media(\"/path/to/media\")\n\n    REFERENCE: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#\n    \"\"\"\n    form_data = {\n        \"file\": (\n            media,\n            open(os.path.realpath(media), \"rb\"),\n            mimetypes.guess_type(media)[0],\n        ),\n        \"messaging_product\": \"whatsapp\",\n        \"type\": mimetypes.guess_type(media)[0],\n    }\n    form_data = MultipartEncoder(fields=form_data)\n    headers = self.headers.copy()\n    headers[\"Content-Type\"] = form_data.content_type\n    logging.info(f\"Content-Type: {form_data.content_type}\")\n    logging.info(f\"Uploading media {media}\")\n    r = requests.post(\n        f\"{self.base_url}/{self.phone_number_id}/media\",\n        headers=headers,\n        data=form_data,\n    )\n    if r.status_code == 200:\n        logging.info(f\"Media {media} uploaded\")\n        return r.json()\n    logging.info(f\"Error uploading media {media}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return None", "def upload_media(self, media: str) -> Union[Dict[Any, Any], None]:\n    \"\"\"\n    Uploads a media to the cloud api and returns the id of the media\n\n    Args:\n        media[str]: Path of the media to be uploaded\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.upload_media(\"/path/to/media\")\n\n    REFERENCE: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#\n    \"\"\"\n    form_data = {\n        \"file\": (\n            media,\n            open(os.path.realpath(media), \"rb\"),\n            mimetypes.guess_type(media)[0],\n        ),\n        \"messaging_product\": \"whatsapp\",\n        \"type\": mimetypes.guess_type(media)[0],\n    }\n    form_data = MultipartEncoder(fields=form_data)\n    headers = self.headers.copy()\n    headers[\"Content-Type\"] = form_data.content_type\n    logging.info(f\"Content-Type: {form_data.content_type}\")\n    logging.info(f\"Uploading media {media}\")\n    r = requests.post(\n        f\"{self.base_url}/{self.phone_number_id}/media\",\n        headers=headers,\n        data=form_data,\n    )\n    if r.status_code == 200:\n        logging.info(f\"Media {media} uploaded\")\n        return r.json()\n    logging.info(f\"Error uploading media {media}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return None", "\n\ndef delete_media(self, media_id: str) -> Union[Dict[Any, Any], None]:\n    \"\"\"\n    Deletes a media from the cloud api\n\n    Args:\n        media_id[str]: Id of the media to be deleted\n    \"\"\"\n    logging.info(f\"Deleting media {media_id}\")\n    r = requests.delete(\n        f\"{self.base_url}/{media_id}\", headers=self.headers)\n    if r.status_code == 200:\n        logging.info(f\"Media {media_id} deleted\")\n        return r.json()\n    logging.info(f\"Error deleting media {media_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return None", "\n\ndef query_media_url(self, media_id: str) -> Union[str, None]:\n    \"\"\"\n    Query media url from media id obtained either by manually uploading media or received media\n\n    Args:\n        media_id[str]: Media id of the media\n\n    Returns:\n        str: Media url\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.query_media_url(\"media_id\")\n    \"\"\"\n\n    logging.info(f\"Querying media url for {media_id}\")\n    r = requests.get(f\"{self.base_url}/{media_id}\", headers=self.headers)\n    if r.status_code == 200:\n        logging.info(f\"Media url queried for {media_id}\")\n        return r.json()[\"url\"]\n    logging.info(f\"Media url not queried for {media_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return None", "\n\ndef download_media(\n    self, media_url: str, mime_type: str, file_path: str = \"temp\"\n) -> Union[str, None]:\n    \"\"\"\n    Download media from media url obtained either by manually uploading media or received media\n\n    Args:\n        media_url[str]: Media url of the media\n        mime_type[str]: Mime type of the media\n        file_path[str]: Path of the file to be downloaded to. Default is \"temp\"\n                        Do not include the file extension. It will be added automatically.\n\n    Returns:\n        str: Media url\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.download_media(\"media_url\", \"image/jpeg\")\n        >>> whatsapp.download_media(\"media_url\", \"video/mp4\", \"path/to/file\") #do not include the file extension\n    \"\"\"\n    r = requests.get(media_url, headers=self.headers)\n    content = r.content\n    extension = mime_type.split(\"/\")[1]\n    save_file_here = None\n    # create a temporary file\n    try:\n\n        save_file_here = (\n            f\"{file_path}.{extension}\" if file_path else f\"temp.{extension}\"\n        )\n        with open(save_file_here, \"wb\") as f:\n            f.write(content)\n        logging.info(f\"Media downloaded to {save_file_here}\")\n        return f.name\n    except Exception as e:\n        logging.info(e)\n        logging.error(f\"Error downloading media to {save_file_here}\")\n        return None", ""]}
{"filename": "whatsapp/ext/_message.py", "chunked_list": ["import logging\nimport requests\n\n\ndef send_template(self, template: str, recipient_id: str, components: str, lang: str = \"en_US\") -> dict:\n    \"\"\"\n    Sends a template message to a WhatsApp user, Template messages can either be;\n        1. Text template\n        2. Media based template\n        3. Interactive template\n    You can customize the template message by passing a dictionary of components.\n    You can find the available components in the documentation.\n    https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-message-templates\n    Args:\n        template[str]: Template name to be sent to the user\n        recipient_id[str]: Phone number of the user with country code wihout +\n        lang[str]: Language of the template message\n        components[list]: List of components to be sent to the user  # \\\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_template(\"hello_world\", \"5511999999999\", lang=\"en_US\"))\n    \"\"\"\n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"to\": recipient_id,\n        \"type\": \"template\",\n        \"template\": {\n            \"name\": template,\n            \"language\": {\"code\": lang},\n            \"components\": components,\n        },\n    }\n    logging.info(f\"Sending template to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Template sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Template not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", "\n\n# MESSAGE()\n\ndef reply(self, reply_text: str = \"\", preview_url: bool = True) -> dict:\n    if self.data == {}:\n        return {\"error\": \"No data provided\"}\n    author = self.instance.get_author(self.data)\n    payload = {\n        \"messaging_product\": \"whatsapp\",\n        \"recipient_type\": \"individual\",\n        \"to\": str(author),\n        \"type\": \"text\",\n        \"context\": {\"message_id\": self.id},\n        \"text\": {\"preview_url\": preview_url, \"body\": reply_text},\n    }\n    logging.info(f\"Replying to {self.id}\")\n    r = requests.post(self.url, headers=self.headers, json=payload)\n    if r.status_code == 200:\n        logging.info(f\"Message sent to {self.instance.get_author(self.data)}\")\n        return r.json()\n    logging.info(f\"Message not sent to {self.instance.get_author(self.data)}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", "\n\ndef mark_as_read(self) -> dict:\n    payload = {\n        \"messaging_product\": \"whatsapp\",\n        \"status\": \"read\",\n        \"message_id\": self.id,\n    }\n\n    response = requests.post(\n        f\"{self.instance.url}\", headers=self.instance.headers, json=payload)\n    if response.status_code == 200:\n        logging.info(response.json())\n        return response.json()\n    else:\n        logging.error(response.json())\n        return response.json()", "\n\ndef send(self, preview_url: bool = True) -> dict:\n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"recipient_type\": self.rec,\n        \"to\": self.to,\n        \"type\": \"text\",\n        \"text\": {\"preview_url\": preview_url, \"body\": self.content},\n    }\n    logging.info(f\"Sending message to {self.to}\")\n    r = requests.post(f\"{self.url}\", headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Message sent to {self.to}\")\n        return r.json()\n    logging.info(f\"Message not sent to {self.to}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", ""]}
{"filename": "whatsapp/ext/_property.py", "chunked_list": ["import requests\n\n\ndef authorized(self) -> bool:\n    return requests.get(self.url, headers=self.headers).status_code != 401\n"]}
{"filename": "whatsapp/ext/_static.py", "chunked_list": ["from typing import Any, Dict, Union\n\n\n@staticmethod\ndef is_message(data: Dict[Any, Any]) -> bool:\n    \"\"\"is_message checks if the data received from the webhook is a message.\n\n    Args:\n        data (Dict[Any, Any]): The data received from the webhook\n\n    Returns:\n        bool: True if the data is a message, False otherwise\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        return True\n    else:\n        return False", "\n\n@staticmethod\ndef get_mobile(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\"\n    Extracts the mobile number of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        str: The mobile number of the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> mobile = whatsapp.get_mobile(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"contacts\" in data:\n        return data[\"contacts\"][0][\"wa_id\"]", "\n\n@staticmethod\ndef get_name(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\"\n    Extracts the name of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        str: The name of the sender\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> mobile = whatsapp.get_name(data)\n    \"\"\"\n    contact = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if contact:\n        return contact[\"contacts\"][0][\"profile\"][\"name\"]", "\n\n@staticmethod\ndef get_message(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\"\n    Extracts the text message of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        str: The text message received from the sender\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> message = message.get_message(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        return data[\"messages\"][0][\"text\"][\"body\"]", "\n\n@staticmethod\ndef get_message_id(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\"\n    Extracts the message id of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        str: The message id of the sender\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> message_id = whatsapp.get_message_id(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        return data[\"messages\"][0][\"id\"]", "\n\n@staticmethod\ndef get_message_timestamp(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\" \"\n    Extracts the timestamp of the message from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        str: The timestamp of the message\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.get_message_timestamp(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        return data[\"messages\"][0][\"timestamp\"]", "\n\n@staticmethod\ndef get_interactive_response(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\"\n        Extracts the response of the interactive message from the data received from the webhook.\n\n        Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        dict: The response of the interactive message\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> response = whatsapp.get_interactive_response(data)\n        >>> interactive_type = response.get(\"type\")\n        >>> message_id = response[interactive_type][\"id\"]\n        >>> message_text = response[interactive_type][\"title\"]\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"interactive\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"interactive\"]", "\n\n@staticmethod\ndef get_location(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\"\n    Extracts the location of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n\n    Returns:\n        dict: The location of the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.get_location(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"location\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"location\"]", "\n\n@staticmethod\ndef get_image(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\" \"\n    Extracts the image of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        dict: The image_id of an image sent by the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> image_id = whatsapp.get_image(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"image\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"image\"]", "\n\n@staticmethod\ndef get_document(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\" \"\n    Extracts the document of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n    Returns:\n        dict: The document_id of an image sent by the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> document_id = whatsapp.get_document(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"document\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"document\"]", "\n\n@staticmethod\ndef get_audio(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\"\n    Extracts the audio of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n\n    Returns:\n        dict: The audio of the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.get_audio(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"audio\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"audio\"]", "\n\n@staticmethod\ndef get_video(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\"\n    Extracts the video of the sender from the data received from the webhook.\n\n    Args:\n        data[dict]: The data received from the webhook\n\n    Returns:\n        dict: Dictionary containing the video details sent by the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.get_video(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        if \"video\" in data[\"messages\"][0]:\n            return data[\"messages\"][0][\"video\"]", "\n\n@staticmethod\ndef get_message_type(data: Dict[Any, Any]) -> Union[str, None]:\n    \"\"\"\n    Gets the type of the message sent by the sender from the data received from the webhook.\n\n\n    Args:\n        data [dict]: The data received from the webhook\n\n    Returns:\n        str: The type of the message sent by the sender\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.get_message_type(data)\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"messages\" in data:\n        return data[\"messages\"][0][\"type\"]", "\n\n@staticmethod\ndef get_delivery(data: Dict[Any, Any]) -> Union[Dict, None]:\n    \"\"\"\n    Extracts the delivery status of the message from the data received from the webhook.\n    Args:\n        data [dict]: The data received from the webhook\n\n    Returns:\n        dict: The delivery status of the message and message id of the message\n    \"\"\"\n    data = data[\"entry\"][0][\"changes\"][0][\"value\"]\n    if \"statuses\" in data:\n        return data[\"statuses\"][0][\"status\"]", "\n\n@staticmethod\ndef changed_field(data: Dict[Any, Any]) -> str:\n    \"\"\"\n    Helper function to check if the field changed in the data received from the webhook.\n\n    Args:\n        data [dict]: The data received from the webhook\n\n    Returns:\n        str: The field changed in the data received from the webhook\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.changed_field(data)\n    \"\"\"\n    return data[\"entry\"][0][\"changes\"][0][\"field\"]", "\n\n@staticmethod\ndef get_author(data: Dict[Any, Any]) -> Union[str, None]:\n    try:\n        return data[\"entry\"][0][\"changes\"][0][\"value\"][\"messages\"][0][\"from\"]\n    except Exception:\n        return None\n", ""]}
{"filename": "whatsapp/ext/_send_others.py", "chunked_list": ["from typing import Any, Dict, List\nimport requests\nimport logging\n\n\ndef send_custom_json(self, data: dict, recipient_id: str = \"\"):\n    \"\"\"\n    Sends a custom json to a WhatsApp user. This can be used to send custom objects to the message endpoint.\n\n    Args:\n        data[dict]: Dictionary that should be send\n        recipient_id[str]: Phone number of the user with country code wihout +\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> whatsapp.send_custom_json({\n                \"messaging_product\": \"whatsapp\",\n                \"type\": \"audio\",\n                \"audio\": {\"id\": audio}}, \"5511999999999\")\n    \"\"\"\n\n    if recipient_id:\n        if \"to\" in data.keys():\n            data_recipient_id = data[\"to\"]\n            logging.info(\n                f\"Recipient Id is defined in data ({data_recipient_id}) and recipient_id parameter ({recipient_id})\")\n        else:\n            data[\"to\"] = recipient_id\n\n    logging.info(f\"Sending custom json to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Custom json sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Custom json not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", "\n\ndef send_contacts(\n    self, contacts: List[Dict[Any, Any]], recipient_id: str\n) -> Dict[Any, Any]:\n    \"\"\"send_contacts\n\n    Send a list of contacts to a user\n\n    Args:\n        contacts(List[Dict[Any, Any]]): List of contacts to send\n        recipient_id(str): Phone number of the user with country code wihout +\n\n    Example:\n        >>> from whatsapp import WhatsApp\n        >>> whatsapp = WhatsApp(token, phone_number_id)\n        >>> contacts = [{\n            \"addresses\": [{\n                \"street\": \"STREET\",\n                \"city\": \"CITY\",\n                \"state\": \"STATE\",\n                \"zip\": \"ZIP\",\n                \"country\": \"COUNTRY\",\n                \"country_code\": \"COUNTRY_CODE\",\n                \"type\": \"HOME\"\n                },\n            ....\n            }\n        ]\n\n    REFERENCE: https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#contacts-object\n    \"\"\"\n\n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"to\": recipient_id,\n        \"type\": \"contacts\",\n        \"contacts\": contacts,\n    }\n    logging.info(f\"Sending contacts to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Contacts sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Contacts not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.error(f\"Response: {r.json()}\")\n    return r.json()", ""]}
{"filename": "whatsapp/ext/_buttons.py", "chunked_list": ["import logging\nimport requests\nfrom typing import Dict, Any\n\n\ndef create_button(self, button: Dict[Any, Any]) -> Dict[Any, Any]:\n    \"\"\"\n    Method to create a button object to be used in the send_message method.\n\n    This is method is designed to only be used internally by the send_button method.\n\n    Args:\n            button[dict]: A dictionary containing the button data\n    \"\"\"\n    data = {\"type\": \"list\", \"action\": button.get(\"action\")}\n    if button.get(\"header\"):\n        data[\"header\"] = {\"type\": \"text\", \"text\": button.get(\"header\")}\n    if button.get(\"body\"):\n        data[\"body\"] = {\"text\": button.get(\"body\")}\n    if button.get(\"footer\"):\n        data[\"footer\"] = {\"text\": button.get(\"footer\")}\n    return data", "\n\ndef send_button(self, button: Dict[Any, Any], recipient_id: str) -> Dict[Any, Any]:\n    \"\"\"\n    Sends an interactive buttons message to a WhatsApp user\n\n    Args:\n        button[dict]: A dictionary containing the button data(rows-title may not exceed 20 characters)\n        recipient_id[str]: Phone number of the user with country code wihout +\n\n    check https://github.com/Neurotech-HQ/whatsapp#sending-interactive-reply-buttons for an example.\n    \"\"\"\n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"to\": recipient_id,\n        \"type\": \"interactive\",\n        \"interactive\": self.create_button(button),\n    }\n    logging.info(f\"Sending buttons to {recipient_id}\")\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Buttons sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Buttons not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return r.json()", "\n\ndef send_reply_button(\n    self, button: Dict[Any, Any], recipient_id: str\n) -> Dict[Any, Any]:\n    \"\"\"\n    Sends an interactive reply buttons[menu] message to a WhatsApp user\n\n    Args:\n        button[dict]: A dictionary containing the button data\n        recipient_id[str]: Phone number of the user with country code wihout +\n\n    Note:\n        The maximum number of buttons is 3, more than 3 buttons will rise an error.\n    \"\"\"\n    if len(button[\"action\"][\"buttons\"]) > 3:\n        raise ValueError(\"The maximum number of buttons is 3.\")\n    \n    data = {\n        \"messaging_product\": \"whatsapp\",\n        \"recipient_type\": \"individual\",\n        \"to\": recipient_id,\n        \"type\": \"interactive\",\n        \"interactive\": button,\n    }\n    r = requests.post(self.url, headers=self.headers, json=data)\n    if r.status_code == 200:\n        logging.info(f\"Reply buttons sent to {recipient_id}\")\n        return r.json()\n    logging.info(f\"Reply buttons not sent to {recipient_id}\")\n    logging.info(f\"Status code: {r.status_code}\")\n    logging.info(f\"Response: {r.json()}\")\n    return r.json()", ""]}
{"filename": "examples/sending_button.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_button(\n        recipient_id=\"255757xxxxxx\",\n        button={\n            \"header\": \"Header Testing\",\n            \"body\": \"Body Testing\",\n            \"footer\": \"Footer Testing\",\n            \"action\": {\n                \"button\": \"Button Testing\",\n                \"sections\": [\n                    {\n                        \"title\": \"iBank\",\n                        \"rows\": [\n                            {\"id\": \"row 1\", \"title\": \"Send Money\", \"description\": \"\"},\n                            {\n                                \"id\": \"row 2\",\n                                \"title\": \"Withdraw money\",\n                                \"description\": \"\",\n                            },\n                        ],\n                    }\n                ],\n            },\n        },\n    )", ""]}
{"filename": "examples/example_hook_obj.py", "chunked_list": ["from whatsapp import Message, Hook, WhatsApp\nfrom flask import Response\nfrom os import getenv\nfrom dotenv import load_dotenv\n\n\ndef handler(msg: Message):\n    message_type = msg.type\n    messenger = msg.instance\n    mobile = msg.sender\n\n    if message_type == \"text\":\n        message = msg.content\n        name = msg.name\n        m = Message(instance=messenger, to=mobile, content=\"Hello World\")\n        m.send()\n\n    elif message_type == \"interactive\":\n        message_response = msg.interactive\n        if message_response is None:\n            return Response(status=400)\n        interactive_type = message_response.get(\"type\")\n        message_id = message_response[interactive_type][\"id\"]\n        message_text = message_response[interactive_type][\"title\"]\n        # Do some action\n\n    elif message_type == \"location\":\n        message_location = msg.location\n        if message_location is None:\n            return Response(status=400)\n        message_latitude = message_location[\"latitude\"]\n        message_longitude = message_location[\"longitude\"]\n        # Do some action\n\n    elif message_type == \"image\":\n        image = msg.image\n        if image is None:\n            return Response(status=400)\n        image_id, mime_type = image[\"id\"], image[\"mime_type\"]\n        image_url = messenger.query_media_url(image_id)\n        if image_url is None:\n            return Response(status=400)\n        image_filename = messenger.download_media(image_url, mime_type)\n        # Do some action\n\n    elif message_type == \"video\":\n        video = msg.video\n        if video is None:\n            return Response(status=400)\n        video_id, mime_type = video[\"id\"], video[\"mime_type\"]\n        video_url = messenger.query_media_url(video_id)\n        if video_url is None:\n            return Response(status=400)\n        video_filename = messenger.download_media(video_url, mime_type)\n        # Do some action\n\n    elif message_type == \"audio\":\n        audio = msg.audio\n        if audio is None:\n            return Response(status=400)\n        audio_id, mime_type = audio[\"id\"], audio[\"mime_type\"]\n        audio_url = messenger.query_media_url(audio_id)\n        if audio_url is None:\n            return Response(status=400)\n        audio_filename = messenger.download_media(audio_url, mime_type)\n        # Do some action\n\n    elif message_type == \"document\":\n        file = msg.document\n        if file is None:\n            return Response(status=400)\n        file_id, mime_type = file[\"id\"], file[\"mime_type\"]\n        file_url = messenger.query_media_url(file_id)\n        if file_url is None:\n            return Response(status=400)\n        file_filename = messenger.download_media(file_url, mime_type)", "        # Do some action\n\n\nmessenger = WhatsApp(token=getenv(\"TOKEN\"),\n                     phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\nhook = Hook(instance=messenger, handler=handler, port=5000,\n            host=\"0.0.0.0\", verify_token=getenv(\"VERIFY_TOKEN\"))\n\nhook.run()\n", "hook.run()\n"]}
{"filename": "examples/sending_video.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_video(\n        video=\"https://www.youtube.com/watch?v=K4TOrB7at0Y\",\n        recipient_id=\"255757xxxxxx\",\n    )\n\n    print(response)", ""]}
{"filename": "examples/sending_message.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp, Message\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    msg = Message(instance=messenger,\n                  content=\"Hello World!\", to=\"919999999999\")\n    response = msg.send()\n\n    print(response)", ""]}
{"filename": "examples/sending_audio.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_audio(\n        audio=\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n        recipient_id=\"255757xxxxxx\",\n    )\n\n    print(response)", ""]}
{"filename": "examples/sending_image.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_image(\n        image=\"https://i.imgur.com/Fh7XVYY.jpeg\",\n        recipient_id=\"255757294146\",\n    )\n\n    print(response)", ""]}
{"filename": "examples/sending_document.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_document(\n        document=\"http://www.africau.edu/images/default/sample.pdf\",\n        recipient_id=\"255757294146\",\n    )\n\n    print(response)", ""]}
{"filename": "examples/reply_to_message_obj.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp, Message\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"), phone_number_id=getenv(\"ID\"))\n\n    data = {\"your\": \"data\"}\n\n    msg = Message(data=data, instance=messenger)\n    msg.reply(\"lol\")\n\n    print(msg)", ""]}
{"filename": "examples/sending_template_message.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_template(\n        \"hello_world\", \"255757xxxxxx\", components=[], lang=\"en_US\")\n\n    print(response)", ""]}
{"filename": "examples/sending_location.py", "chunked_list": ["from os import getenv\nfrom whatsapp import WhatsApp\nfrom dotenv import load_dotenv\n\nif __name__ == \"__main__\":\n    load_dotenv()\n    messenger = WhatsApp(token=getenv(\"TOKEN\"),\n                         phone_number_id=getenv(\"PHONE_NUMBER_ID\"))\n\n    response = messenger.send_location(\n        lat=1.29,\n        long=103.85,\n        name=\"Singapore\",\n        address=\"Singapore\",\n        recipient_id=\"255757294146\",\n    )\n\n    print(response)", ""]}
{"filename": "examples/standalone_hook.py", "chunked_list": ["import os\nimport logging\nfrom whatsapp import WhatsApp, Message\nfrom dotenv import load_dotenv\nfrom flask import Flask, request, Response\n\n# Initialize Flask App\napp = Flask(__name__)\n\n# Load .env file", "\n# Load .env file\nload_dotenv(\"../.env\")\nmessenger = WhatsApp(os.getenv(\"TOKEN\"),\n                     phone_number_id=os.getenv(\"ID\"))\nVERIFY_TOKEN = \"30cca545-3838-48b2-80a7-9e43b1ae8ce4\"\n\n# Logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"", "logging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\n\n\n@app.get(\"/\")\ndef verify_token():\n    if request.args.get(\"hub.verify_token\") == VERIFY_TOKEN:\n        logging.info(\"Verified webhook\")\n        challenge = request.args.get(\"hub.challenge\")\n        return str(challenge)\n    logging.error(\"Webhook Verification failed\")\n    return \"Invalid verification token\"", "\n\n@app.post(\"/\")\ndef hook():\n    # Handle Webhook Subscriptions\n    data = request.get_json()\n    if data is None:\n        return Response(status=200)\n    logging.info(\"Received webhook data: %s\", data)\n    changed_field = messenger.changed_field(data)\n    if changed_field == \"messages\":\n        new_message = messenger.is_message(data)\n        if new_message:\n            msg = Message(instance=messenger, data=data)\n            mobile = msg.sender\n            name = msg.name\n            message_type = msg.type\n            logging.info(\n                f\"New Message; sender:{mobile} name:{name} type:{message_type}\"\n            )\n            if message_type == \"text\":\n                message = msg.content\n                name = msg.name\n                logging.info(\"Message: %s\", message)\n                m = Message(instance=messenger, to=mobile,\n                            content=\"Hello World\")\n                m.send()\n\n            elif message_type == \"interactive\":\n                message_response = msg.interactive\n                if message_response is None:\n                    return Response(status=400)\n                interactive_type = message_response.get(\"type\")\n                message_id = message_response[interactive_type][\"id\"]\n                message_text = message_response[interactive_type][\"title\"]\n                logging.info(\n                    f\"Interactive Message; {message_id}: {message_text}\")\n\n            elif message_type == \"location\":\n                message_location = msg.location\n                if message_location is None:\n                    return Response(status=400)\n                message_latitude = message_location[\"latitude\"]\n                message_longitude = message_location[\"longitude\"]\n                logging.info(\"Location: %s, %s\",\n                             message_latitude, message_longitude)\n\n            elif message_type == \"image\":\n                image = msg.image\n                if image is None:\n                    return Response(status=400)\n                image_id, mime_type = image[\"id\"], image[\"mime_type\"]\n                image_url = messenger.query_media_url(image_id)\n                if image_url is None:\n                    return Response(status=400)\n                image_filename = messenger.download_media(image_url, mime_type)\n                logging.info(f\"{mobile} sent image {image_filename}\")\n\n            elif message_type == \"video\":\n                video = msg.video\n                if video is None:\n                    return Response(status=400)\n                video_id, mime_type = video[\"id\"], video[\"mime_type\"]\n                video_url = messenger.query_media_url(video_id)\n                if video_url is None:\n                    return Response(status=400)\n                video_filename = messenger.download_media(video_url, mime_type)\n                logging.info(f\"{mobile} sent video {video_filename}\")\n\n            elif message_type == \"audio\":\n                audio = msg.audio\n                if audio is None:\n                    return Response(status=400)\n                audio_id, mime_type = audio[\"id\"], audio[\"mime_type\"]\n                audio_url = messenger.query_media_url(audio_id)\n                if audio_url is None:\n                    return Response(status=400)\n                audio_filename = messenger.download_media(audio_url, mime_type)\n                logging.info(f\"{mobile} sent audio {audio_filename}\")\n\n            elif message_type == \"document\":\n                file = msg.document\n                if file is None:\n                    return Response(status=400)\n                file_id, mime_type = file[\"id\"], file[\"mime_type\"]\n                file_url = messenger.query_media_url(file_id)\n                if file_url is None:\n                    return Response(status=400)\n                file_filename = messenger.download_media(file_url, mime_type)\n                logging.info(f\"{mobile} sent file {file_filename}\")\n            else:\n                logging.info(f\"{mobile} sent {message_type} \")\n                logging.info(data)\n        else:\n            delivery = messenger.get_delivery(data)\n            if delivery:\n                logging.info(f\"Message : {delivery}\")\n            else:\n                logging.info(\"No new message\")\n    return \"OK\", 200", "\n\nif __name__ == \"__main__\":\n    app.run(port=6869, debug=False)\n"]}
