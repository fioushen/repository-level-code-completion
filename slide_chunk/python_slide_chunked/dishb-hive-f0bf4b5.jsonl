{"filename": "hive.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom json import dump, load\nfrom sys import exit as sys_exit\nfrom os import mkdir\nfrom os.path import exists, isfile, expanduser\n\nimport customtkinter as ctk\nfrom PIL import ImageTk, Image", "import customtkinter as ctk\nfrom PIL import ImageTk, Image\n\nfrom core import *\n\nclass HiveApp(ctk.CTk):\n    def __init__(self) -> None:\n        \"\"\"\n        Main app class that contains all the widgets and logic. To run, simply create an instance of\n        the class and call the \".mainloop()\" method on the instance.\n        \"\"\"\n\n        # window setup\n        super().__init__()\n        self.title(\"hive\")\n        self.geometry(f\"{WIDTH}x{HEIGHT}\")\n        self.resizable(True, True)\n        self.minsize(200, 200)\n\n        # empty widgets for later use\n        self.goto_popup = None\n        self.info_popup = None\n\n        # create a special dir for user-made themes/fonts\n        create_dir()\n\n        # rows (layout)\n        self.grid_rowconfigure(0, weight = 0)\n        self.grid_rowconfigure(1, weight = 0)\n        self.grid_rowconfigure(2, weight = 0)\n        self.grid_rowconfigure(3, weight = 0)\n        self.grid_rowconfigure(4, weight = 0)\n        self.grid_rowconfigure(5, weight = 0)\n        self.grid_rowconfigure(6, weight = 0)\n        self.grid_rowconfigure(7, weight = 0)\n        self.grid_rowconfigure(8, weight = 0)\n        self.grid_rowconfigure(9, weight = 0)\n        self.grid_rowconfigure(10, weight = 1)\n        self.grid_rowconfigure(11, weight = 0)\n        self.grid_rowconfigure(12, weight = 0)\n\n        # columns (layout)\n        self.grid_columnconfigure(0, weight = 0)\n        self.grid_columnconfigure(1, weight = 1)\n\n        # data\n        self.cwd_var = ctk.StringVar(master = self,\n                                     value = \"/\"\n                                     )\n        self.sys_files_var = ctk.IntVar(master = self,\n                                        value = 0\n                                        )\n\n        # tries to load recent config\n        self.open_recent()\n\n        # appearance widgets\n        self.appearance_label = AppearanceLabel(self, self.font)\n        self.appearance_label.grid(row = 0,\n                                   column = 0,\n                                   padx = PADX,\n                                   pady = PADY,\n                                   sticky = \"w\"\n                                   )\n\n        self.appearance_menu = AppearanceMenu(self, self.font)\n        self.appearance_menu.grid(row = 1,\n                                  column = 0,\n                                  padx = PADX,\n                                  pady = PADY,\n                                  sticky = \"w\"\n                                  )\n\n        # theme widgets\n        self.theme_label = ThemeLabel(self, self.font)\n        self.theme_label.grid(row = 2,\n                              column = 0,\n                              padx = PADX,\n                              pady = PADY,\n                              sticky = \"w\"\n                              )\n\n        # theme widgets\n        self.theme_menu = ThemeMenu(self, self.font)\n        self.theme_menu.grid(row = 3,\n                             column = 0,\n                             padx = PADX,\n                             pady = PADY,\n                             sticky = \"w\"\n                             )\n        self.theme_menu.set(self.theme_name)\n\n        # sys files widgets\n        self.sys_files_label = SysFilesLabel(self, self.font)\n        self.sys_files_label.grid(row = 4,\n                                  column = 0,\n                                  padx = PADX,\n                                  pady = PADY,\n                                  sticky = \"w\"\n                                  )\n\n        self.sys_files_switch = SysFilesSwitch(self, self.sys_files_var)\n        self.sys_files_switch.grid(row = 5,\n                                   column = 0,\n                                   padx = PADX,\n                                   pady = PADY,\n                                   sticky = \"w\"\n                                   )\n\n        # UI scale widgets\n        self.scale_label = ScaleLabel(self, self.font)\n        self.scale_label.grid(row = 6,\n                              column = 0,\n                              padx = PADX,\n                              pady = PADY,\n                              sticky = \"w\"\n                              )\n\n        self.scale_menu = ScaleMenu(self, self.font)\n        self.scale_menu.grid(row = 7,\n                             column = 0,\n                             padx = PADX,\n                             pady = PADY,\n                             sticky = \"w\"\n                             )\n        self.scale_menu.set(self.scale_percent)\n\n        # font widgets\n        self.font_label = FontLabel(self, self.font)\n        self.font_label.grid(row = 8,\n                             column = 0,\n                             padx = PADX,\n                             pady = PADY,\n                             sticky = \"w\"\n                             )\n\n        self.font_menu = FontMenu(self, self.font)\n        self.font_menu.grid(row = 9,\n                            column = 0,\n                            padx = PADX,\n                            pady = PADY,\n                            sticky = \"w\"\n                            )\n        self.font_menu.set(self.font_name)\n\n        # attribute setup\n        self.trash_icon_path = f\"{SCRIPT_DIR}/source/misc/\"\n\n        # trash button widgets\n        self.trash = TrashButton(self,\n                                 self.trash_icon_path,\n                                 self.font\n                                 )\n        self.trash.grid(row = 11,\n                        column = 0,\n                        padx = PADX,\n                        pady = PADY,\n                        sticky = \"sw\"\n                        )\n\n        # path text (breadcrumbs) widgets\n        self.path_text = PathLabel(self,\n                                   self.cwd_var.get(),\n                                   self.font\n                                   )\n\n        self.path_text.grid(row = 11,\n                            column = 1,\n                            padx = PADX,\n                            pady = PADY,\n                            sticky = \"sw\"\n                            )\n\n        # filler widgets\n        self.filler = ctk.CTkButton(self,\n                                    text = \"\",\n                                    state = ctk.DISABLED,\n                                    fg_color = \"transparent\",\n                                    height = 5\n                                    )\n        self.filler.grid(row = 12,\n                         column = 0,\n                         padx = PADX,\n                         pady = PADY,\n                         sticky = \"w\"\n                         )\n\n        # attribute setup\n        self.file_icon_path = f\"{SCRIPT_DIR}/source/file_icons/\"\n\n        # file explorer widgets\n        self.file_explorer = FileExplorer(self,\n                                          self.cwd_var.get(),\n                                          self.cwd_var,\n                                          self.file_icon_path,\n                                          self.font\n                                          )\n        self.file_explorer.grid(row = 0,\n                                rowspan = 11,\n                                column = 1,\n                                columnspan = 1,\n                                padx = PADX,\n                                pady = PADY,\n                                sticky = \"nsew\"\n                                )\n\n        # checks if any variables were updated\n        self.sys_files_var.trace_add(\"write\", self.update_tree)\n        self.cwd_var.trace_add(\"write\", self.update_tree)\n\n        # save the current config\n        self.after(100, self.save_recent)\n\n        # hotkeys and their functionality\n        self.bind(\"<Control-g>\", self.goto)\n        self.bind(\"<space>\", self.info)\n\n    def info(self, event) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        Creates a window displaying infomation about a directory.\n        \"\"\"\n\n        self.info_popup = InfoPopup(self.font, self.cwd_var.get())\n\n    def goto(self, event) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        Creates a popup allowing the user to view a path.\n        \"\"\"\n\n        self.goto_popup = GotoPopup(self.font)\n\n        try:\n            path = self.goto_popup.get_input()\n\n            # only view the path in the explorer if the path is valid\n            if path is not None and path != \"\":\n                path = expanduser(path)\n                if not exists(path):\n                    WarnBox(f\"{SCRIPT_DIR}/source/misc/warning.png\",\n                            \"Error: This is file or\\ndirectory does not\\nexist.\",\n                            self.font\n                            )\n                else:\n                    if isfile(path): # if the path is a file\n                        dir_path = dirname(path)\n                        self.cwd_var.set(dir_path)\n                    else: # a directory\n                        self.cwd_var.set(path)\n\n        except PermissionError:\n            WarnBox(f\"{SCRIPT_DIR}/source/misc/warning.png\",\n                    \"Error: This is a system\\nfile or directory and cannot\\nbe viewed.\",\n                    self.font\n                    )\n\n    def quit_app(self) -> None:\n        \"\"\"\n        Quits the application.\n        \"\"\"\n\n        self.destroy()\n        sys_exit(0)\n\n    def update_tree(self, *args) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        Updates the file explorer tree from the app itself. Could be done with \n        app.file_explorer.fill_tree, but this is a lot cleaner and easier to read.\n        \"\"\"\n\n        self.file_explorer.fill_tree(self.cwd_var.get(),\n                                     self.sys_files_var.get(),\n                                     )\n\n        # clear previous path text widget\n        self.path_text.destroy()\n\n        # path text (breadcrumbs) widgets\n        self.path_text = PathLabel(self,\n                                   self.cwd_var.get(),\n                                   font = self.font\n                                   )\n\n        self.path_text.grid(row = 11,\n                            column = 1,\n                            padx = PADX,\n                            pady = PADY,\n                            sticky = \"sw\"\n                            )\n\n        self.save_recent()\n\n    def open_recent(self) -> None:\n        \"\"\"\n        Opens the configuration file with the most recent user settings.\n        \"\"\"\n\n        if exists(CONFIG_PATH) and exists(CONFIG_PATH.removesuffix(\"/settings.cfg\")):\n            with open(CONFIG_PATH, \"r\", encoding = \"utf-8\") as config_file:\n                settings = load(config_file)\n\n                self.cwd_var.set(settings[\"cwd\"])\n                self.sys_files_var.set(settings[\"sys_files\"])\n\n                ctk.set_appearance_mode(settings[\"appearance_mode\"].lower())\n\n                self.scale_percent = settings[\"ui_scale\"]\n                scale_float = int(self.scale_percent.replace(\"%\", \"\")) / 100\n                ctk.set_widget_scaling(scale_float)\n\n                self.theme_name = settings[\"theme\"]\n                if \" \" in self.theme_name:\n                    no_spaces_theme = self.theme_name.replace(\" \", \"_\")\n                else:\n                    no_spaces_theme = self.theme_name\n\n                self.font_name = settings[\"font\"]\n                if \" \" in self.font_name:\n                    no_spaces_font = self.font_name.replace(\" \", \"_\")\n                else:\n                    no_spaces_font = self.font_name\n\n                ctk.set_default_color_theme(f\"{THEME_PATH}/{no_spaces_theme.lower()}.json\")\n                ctk.FontManager.load_font(f\"{FONT_PATH}/{no_spaces_font.lower()}.ttf\")\n                self.font = (self.font_name, 13)\n\n                size = (settings[\"width\"], settings[\"height\"])\n                self.geometry(f\"{size[0]}x{size[1]}\")\n\n                config_file.close()\n\n        else:\n            # default configurations\n            ctk.set_appearance_mode(\"system\")\n            ctk.set_default_color_theme(f\"{THEME_PATH}/default.json\")\n            ctk.FontManager.load_font(f\"{FONT_PATH}/dm_mono.ttf\")\n            self.font = (\"Dm Mono\", 13)\n\n            # default values\n            self.theme_name = \"Default\"\n            self.font_name =  \"Dm Mono\"\n            self.scale_percent = \"100%\"\n\n        if ctk.get_appearance_mode().lower() == \"light\":\n            icon_image = Image.open(LIGHT_ICON_PATH)\n            self.iconphoto(True, ImageTk.PhotoImage(icon_image))\n        elif ctk.get_appearance_mode().lower() == \"dark\":\n            icon_image = Image.open(DARK_ICON_PATH)\n            self.iconphoto(True, ImageTk.PhotoImage(icon_image))\n\n    def save_recent(self) -> None:\n        \"\"\"\n        Saves the most recent settings to a file. These settings include the current directory,\n        theme, and the system files toggle.\n        \"\"\"\n\n        if not exists(CONFIG_PATH.removesuffix(\"/settings.cfg\")):\n            mkdir(CONFIG_PATH.removesuffix(\"/settings.cfg\"))\n\n        with open(CONFIG_PATH, \"w\", encoding = \"utf-8\") as config_file:\n            settings = {\"cwd\": self.cwd_var.get(),\n                        \"sys_files\": self.sys_files_var.get(),\n                        \"appearance_mode\": self.appearance_menu.get(),\n                        \"theme\": self.theme_menu.get(),\n                        \"ui_scale\": self.scale_menu.get(),\n                        \"width\": self.winfo_width(),\n                        \"height\": self.winfo_height(),\n                        \"font\": self.font_menu.get()\n                        }\n\n            dump(settings, config_file)\n            config_file.close()", "\n# create and run the app\nif __name__ == \"__main__\":\n    hive_app = HiveApp()\n    hive_app.mainloop()\n"]}
{"filename": "utility/build.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom os import remove\nfrom shutil import rmtree\nfrom subprocess import run\nfrom pathlib import Path\n\nfrom PyInstaller.__main__ import run as pkg\n", "from PyInstaller.__main__ import run as pkg\n\n# location of the repository\nREPO_LOC = Path(\"./\").absolute()\n\n# pip\nPIP_CMD = \"pip3\"\n\n# find where customtkinter is located\noutput = run([PIP_CMD, \"show\", \"customtkinter\"], check = True, capture_output = True).stdout", "# find where customtkinter is located\noutput = run([PIP_CMD, \"show\", \"customtkinter\"], check = True, capture_output = True).stdout\noutput = output.split() # split by the newline chars\n\n# convert from bytes to string\nfor index, item in enumerate(output):\n    output[index] = item.decode()\n\n# customtkinter's location\nCTK_LOC = Path(output[24])", "# customtkinter's location\nCTK_LOC = Path(output[24])\nCTK_LOC /= \"customtkinter\"\n\n# location of icon file\nICON_LOC = Path(f\"{REPO_LOC}/source/icons/dark.png\")\n\n# location of other directories that are needed\nCORE_LOC = Path(f\"{REPO_LOC}/core\")\nSRC_LOC = Path(f\"{REPO_LOC}/source\")", "CORE_LOC = Path(f\"{REPO_LOC}/core\")\nSRC_LOC = Path(f\"{REPO_LOC}/source\")\nCFG_LOC = Path(f\"{REPO_LOC}/config\")\nDIST_LOC = Path(f\"{REPO_LOC}/dist\")\nUTIL_LOC = Path(f\"{REPO_LOC}/utility\")\n\n# arguments for pyinstaller; these are command line args\nARGS = [f\"{REPO_LOC}/hive.py\", # file to package\n        \"-n=hive\", # name\n        f\"-i={ICON_LOC}\", # icon", "        \"-n=hive\", # name\n        f\"-i={ICON_LOC}\", # icon\n        \"--clean\", # clear cache\n        \"--windowed\", # no terminal window\n        \"-y\", # no confirmation\n        \"--onedir\", # one directory with all files\n        f\"--distpath={DIST_LOC}\", # location of the build\n        f\"--specpath={UTIL_LOC}\", # location of the .spec file\n        \"--log-level=ERROR\", # verbosity\n        f\"--add-data={CTK_LOC}:customtkinter\", # adds customtkinter module", "        \"--log-level=ERROR\", # verbosity\n        f\"--add-data={CTK_LOC}:customtkinter\", # adds customtkinter module\n        f\"--add-data={CORE_LOC}:core\", # adds core directory\n        f\"--add-data={SRC_LOC}:source\", # adds source directory\n        f\"--add-data={CFG_LOC}:config\" # adds config directory\n        ]\n\nif not CFG_LOC.exists():\n    ARGS.pop(-1)\n", "\n# build the application\npkg(ARGS)\n\n# locations of extra files/dirs\nextras = [Path(f\"{REPO_LOC}/build\"),\n          Path(f\"{REPO_LOC}/dist/hive\"),\n          Path(f\"{REPO_LOC}/utility/hive.spec\")\n          ]\n", "          ]\n\n# remove the extra files and dirs\nrmtree(extras[0])\nrmtree(extras[1])\nremove(extras[2])\n"]}
{"filename": "core/path_text.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nclass PathLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, cwd: str, font: tuple) -> None:\n        \"\"\"\n        Widget to display the path to the current working directory.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = cwd,\n                         font = font\n                         )\n\n    def update_label(self, cwd: str) -> None:\n        \"\"\"\n        Updates the label's text to the current working directory.\n        \"\"\"\n\n        self.configure(text = cwd)", ""]}
{"filename": "core/info.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport os\nfrom subprocess import check_output\n\nimport customtkinter as ctk\n\nfrom .const import PADX, PADY\n\nclass InfoPopup(ctk.CTkToplevel):\n    def __init__(self, font: tuple, cwd: str) -> None:\n        \"\"\"\n        A popup window displaying information about a directory.\n        \"\"\"\n\n        # window setup\n        super().__init__()\n        self.title(\"info\")\n        self.geometry(\"250x150\")\n        self.resizable(False, False)\n\n        # attributes\n        self.cwd = cwd\n        self.font = font\n\n        # grid setup\n        self.grid_rowconfigure(0, weight = 0)\n        self.grid_rowconfigure(1, weight = 0)\n\n        self.grid_columnconfigure(0, weight = 0)\n\n        # Git label widget\n        self.git_repo = GitLabel(self, self.cwd, self.font)\n        self.git_repo.grid(row = 0,\n                           column = 0,\n                           padx = PADX,\n                           pady = PADY,\n                           sticky = \"w\"\n                           )\n\n        # size label widget\n        self.size = SizeLabel(self, self.cwd, self.font)\n        self.size.grid(row = 1,\n                       column = 0,\n                       padx = PADX,\n                       pady = PADY,\n                       sticky = \"w\"\n                       )", "from .const import PADX, PADY\n\nclass InfoPopup(ctk.CTkToplevel):\n    def __init__(self, font: tuple, cwd: str) -> None:\n        \"\"\"\n        A popup window displaying information about a directory.\n        \"\"\"\n\n        # window setup\n        super().__init__()\n        self.title(\"info\")\n        self.geometry(\"250x150\")\n        self.resizable(False, False)\n\n        # attributes\n        self.cwd = cwd\n        self.font = font\n\n        # grid setup\n        self.grid_rowconfigure(0, weight = 0)\n        self.grid_rowconfigure(1, weight = 0)\n\n        self.grid_columnconfigure(0, weight = 0)\n\n        # Git label widget\n        self.git_repo = GitLabel(self, self.cwd, self.font)\n        self.git_repo.grid(row = 0,\n                           column = 0,\n                           padx = PADX,\n                           pady = PADY,\n                           sticky = \"w\"\n                           )\n\n        # size label widget\n        self.size = SizeLabel(self, self.cwd, self.font)\n        self.size.grid(row = 1,\n                       column = 0,\n                       padx = PADX,\n                       pady = PADY,\n                       sticky = \"w\"\n                       )", "\nclass GitLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTkToplevel, cwd: str, font: tuple) -> None:\n        \"\"\"\n        A label to display whether the directory is a Git repository.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         font = font,\n                         text = \"Git Repository: \"\n                         )\n\n        if os.path.exists(f\"{cwd}/.git\"):\n            self.configure(require_redraw = True,\n                           text = self.cget(\"text\") + \"Yes\"\n                           )\n        else:\n            self.configure(require_redraw = True,\n                           text = self.cget(\"text\") + \"No\"\n                           )", "\nclass SizeLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTkToplevel, cwd: str, font: tuple) -> None:\n        \"\"\"\n        A label to display the size of a directory\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         font = font,\n                         text = \"Size: \"\n                         )\n\n        self.get_size(cwd)\n\n    def get_size(self, path: str) -> str:\n        \"\"\"\n        Gets the size of a directory in bytes.\n        \"\"\"\n\n        total_size = check_output(['du','-shx', path]).split()[0].decode('utf-8')\n        total_size = str(total_size)\n\n        # make it human readable\n        if \"K\" in total_size:\n            total_size = total_size.replace(\"K\", \"\") + \" kilo\"\n        elif \"M\" in total_size:\n            total_size = total_size.replace(\"M\", \"\") + \" mega\"\n        elif \"G\" in total_size:\n            total_size = total_size.replace(\"G\", \"\") + \" giga\"\n\n        self.configure(require_redraw = True,\n                       text = self.cget(\"text\") + total_size + \"bytes\"\n                       )", ""]}
{"filename": "core/font.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nfrom .popup import Popup\nfrom .helper import get_all_fonts\nfrom .const import SCRIPT_DIR, FONT_PATH\n\nclass FontLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = \"Font:\",\n                         font = font\n                         )", "\nclass FontLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = \"Font:\",\n                         font = font\n                         )", "\nclass FontMenu(ctk.CTkOptionMenu):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that allows the user to select a theme from several options.\n        \"\"\"\n\n        # font setup\n        self.font = font\n\n        # widget setup\n        self.master = master\n        self.options = get_all_fonts(f\"{SCRIPT_DIR}/source/fonts/\")\n        super().__init__(self.master,\n                         values = self.options,\n                         command = self.change_font,\n                         font = self.font\n                         )\n\n    def change_font(self, new_font: str) -> None:\n        \"\"\"\n        Changes the theme of the app.\n        \"\"\"\n\n        Popup(f\"{SCRIPT_DIR}/source/misc/popup.png\",\n              \"Popup: Please restart\\nfor changes to the\\nfont to take effect.\",\n              self.font\n              )\n\n        if \" \" in new_font:\n            new_font = new_font.replace(\" \", \"_\")\n\n        ctk.FontManager.load_font(f\"{FONT_PATH}/{new_font.lower()}\")\n        self.master.font = (new_font, 13)\n\n        self.master.save_recent()", ""]}
{"filename": "core/goto.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nclass GotoPopup(ctk.CTkInputDialog):\n    def __init__(self, font: tuple) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        A window that allows users to view a specific path.\n        \"\"\"\n\n        # widget setup\n        super().__init__(title = \"go to\",\n                         text = \"View any path in the file explorer:\",\n                         # font = font\n                         )", ""]}
{"filename": "core/theme.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nfrom .const import SCRIPT_DIR, THEME_PATH\nfrom .popup import Popup\nfrom .helper import get_all_themes\n\nclass ThemeLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master,\n                         text = \"Theme:\",\n                         font = font\n                         )", "\nclass ThemeLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master,\n                         text = \"Theme:\",\n                         font = font\n                         )", "\nclass ThemeMenu(ctk.CTkOptionMenu):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that allows the user to select a theme from several options.\n        \"\"\"\n\n        # font setup\n        self.font = font\n\n        # widget setup\n        self.master = master\n        self.options = get_all_themes(f\"{SCRIPT_DIR}/source/themes/\")\n        super().__init__(self.master,\n                         values = self.options,\n                         command = self.change_theme,\n                         font = self.font\n                         )\n\n    def change_theme(self, new_theme: str) -> None:\n        \"\"\"\n        Changes the theme of the app.\n        \"\"\"\n\n        Popup(f\"{SCRIPT_DIR}/source/misc/popup.png\",\n              \"Popup: Please restart\\nfor changes to the\\ntheme to take effect.\",\n              self.font\n              )\n\n        if \" \" in new_theme:\n            new_theme = new_theme.replace(\" \", \"_\")\n\n        ctk.set_default_color_theme(f\"{THEME_PATH}/{new_theme.lower()}.json\")\n\n        self.master.save_recent()", ""]}
{"filename": "core/file_explorer.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport os\nfrom subprocess import run\n\nimport customtkinter as ctk\nfrom PIL import Image\n\nfrom .const import PADX, PADY, SCRIPT_DIR", "\nfrom .const import PADX, PADY, SCRIPT_DIR\nfrom .helper import can_rename, is_hidden\nfrom .warn_box import WarnBox\nfrom .rename import RenamePopup\nfrom .extensions import CTkXYFrame\n\nclass FileExplorer(CTkXYFrame):\n    def __init__(self,\n                 master: ctk.CTk,\n                 cwd: str,\n                 cwd_var: ctk.StringVar,\n                 icon_path: str,\n                 font: tuple\n                 ) -> None:\n        \"\"\"\n        The main file explorer widget. This widget displays all the files and directories in the \n        current working directory.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master\n                         )\n        self.sys_files = 0\n        self.cwd_var = cwd_var\n\n        # create an empty variable for later use\n        self.rename_popup = None\n\n        # font setup\n        self.font = font\n\n        # current directory setup\n        self.cwd = cwd\n        os.chdir(self.cwd)\n\n        # start by filling tree\n        self.icon_path = icon_path\n        self.fill_tree(self.cwd, self.sys_files) # filling the tree with files and dirs\n\n    def fill_tree(self, cwd: str, sys_files: int) -> None:\n        \"\"\"\n        Fills the file explorer tree with all the files and directories in the current working \n        directory. Is supposed to be called every frame.\n        \"\"\"\n\n        # settin up attributes\n        self.sys_files = sys_files\n        self.cwd = cwd\n        os.chdir(self.cwd)\n        entities = os.listdir(self.cwd)\n\n        # sorting our entities to make the file explorer sensible\n        entities.sort()\n\n        # grid setup\n        self.grid_columnconfigure(0, weight = 0)\n        self.grid_columnconfigure(1, weight = 1)\n        self.grid_rowconfigure(0, weight = 0)\n        for num in range(len(entities)):\n            self.grid_rowconfigure(num + 1, weight = 0)\n\n        # clear previous label widgets\n        for widget in self.winfo_children():\n            widget.destroy()\n\n        if not self.cwd == \"/\":\n            # a button to let the user navigate up a directory\n            up_label = ctk.CTkLabel(master = self,\n                                    text = \"\u2190\",\n                                    font = self.font\n                                    )\n            up_label.grid(row = 0,\n                        column = 1,\n                        padx = PADX,\n                        pady = PADY,\n                        sticky = \"w\"\n                        )\n\n            up_label.bind(\"<Double-Button-1>\",\n                        self.up_one_dir\n                        )\n\n            up_icon = ctk.CTkImage(light_image = Image.open(f\"{self.icon_path}folder.png\"))\n            up_button = ctk.CTkButton(master = self,\n                                    text = \"\",\n                                    image = up_icon,\n                                    width = up_icon.cget(\"size\")[0]\n                                    )\n            up_button.grid(row = 0,\n                        column = 0,\n                        padx = PADX,\n                        pady = PADY,\n                        sticky = \"w\"\n                        )\n\n            up_button.bind(\"<Double-Button-1>\",\n                        lambda event: # pylint: disable=unnecessary-lambda\n                            self.up_one_dir(event)\n                        )\n\n        for entity in entities:\n            # create a path to the file/directory\n            if self.cwd.endswith(\"/\"):\n                entity_path = f\"{self.cwd}{entity}\"\n            else:\n                entity_path = f\"{self.cwd}/{entity}\"\n\n            # is the file a hidden system file\n            if is_hidden(entity, entity_path) and self.sys_files == 0:\n                pass\n\n            # is the file a normal, user visible file?\n            else:\n                label = ctk.CTkLabel(master = self,\n                                        text = entity,\n                                        font = self.font\n                                        )\n                label.grid(row = entities.index(entity) + 1,\n                            column = 1,\n                            padx = PADX,\n                            pady = PADY,\n                            sticky = \"w\"\n                            )\n                label.bind(\"<Double-Button-1>\",\n                            lambda event, text = label.cget(\"text\"):\n                                self.open_entity(event, text)\n                            )\n                label.bind(\"<Button-2>\",\n                            lambda event, text = label.cget(\"text\"):\n                                self.rename_entity(event, text)\n                            )\n\n                if os.path.isfile(entity_path):\n                    if self.icon_path.endswith(\"/\"):\n                        icon = ctk.CTkImage(light_image =\n                                            Image.open(f\"{self.icon_path}file.png\")\n                                            )\n                    else:\n                        icon = ctk.CTkImage(light_image =\n                                            Image.open(f\"{self.icon_path}/file.png\")\n                                            )\n                else:\n                    if self.icon_path.endswith(\"/\"):\n                        icon = ctk.CTkImage(light_image =\n                                            Image.open(f\"{self.icon_path}folder.png\")\n                                            )\n                    else:\n                        icon = ctk.CTkImage(light_image =\n                                            Image.open(f\"{self.icon_path}/folder.png\")\n                                            )\n                button = ctk.CTkButton(master = self,\n                                        image = icon,\n                                        text = \"\",\n                                        width = icon.cget(\"size\")[0]\n                                        )\n                button.grid(row = entities.index(entity) + 1,\n                            column = 0,\n                            padx = PADX,\n                            pady = PADY,\n                            sticky = \"w\"\n                            )\n                button.bind(\"<Double-Button-1>\",\n                            lambda event, text = label.cget(\"text\"):\n                                self.open_entity(event, text)\n                            )\n                button.bind(\"<Button-2>\",\n                            lambda event, text = label.cget(\"text\"):\n                                self.rename_entity(event, text)\n                            )\n\n    def open_entity(self, event, text: str) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        An event in the case that the user double clicks a file or directory. Should open the file \n        or directory.\n        \"\"\"\n\n        os.chdir(self.cwd)\n\n        try:\n            if self.cwd.endswith(\"/\"):\n                new_path = f\"{self.cwd}{text}\"\n            else:\n                new_path = f\"{self.cwd}/{text}\"\n\n            if os.path.isfile(new_path) or new_path.endswith(\".app\"): # a file or application\n                run([\"open\", new_path], check = True)\n            else: # a directory\n                new_path += \"/\"\n                self.cwd = new_path\n                os.chdir(self.cwd)\n                self.cwd_var.set(self.cwd)\n\n        except PermissionError:\n            WarnBox(f\"{SCRIPT_DIR}/source/misc/warning.png\",\n                    \"Error: This is a system\\nfile or directory and should\\nnot be modified.\",\n                    self.font\n                    )\n\n    def rename_entity(self, event, text: str) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        Allows the use to rename a file or directory,\n        \"\"\"\n\n        os.chdir(self.cwd)\n\n        try:\n            if self.cwd.endswith(\"/\"):\n                path = f\"{self.cwd}{text}\"\n            else:\n                path = f\"{self.cwd}/{text}\"\n\n            # stop the user from renaming\n            if not can_rename(text, path):\n                raise PermissionError\n\n            if os.path.isfile(path) or path.endswith(\".app\"): # a file or application\n                # rename the file or application\n                self.rename_popup = RenamePopup(self.font)\n\n                new_name = self.rename_popup.get_input()\n\n                # construct a new path\n                if self.cwd.endswith(\"/\"):\n                    new_path = f\"{self.cwd}{new_name}\"\n                else:\n                    new_path = f\"{self.cwd}/{new_name}\"\n\n                # only rename if valid name was entered\n                if new_name is not None and new_name != \"\":\n                    os.rename(path, new_path)\n                    self.fill_tree(self.cwd, self.sys_files)\n            else: # a directory\n                # rename the directory\n                path += \"/\"\n                self.rename_popup = RenamePopup(self.font)\n\n                new_name = self.rename_popup.get_input()\n\n                # construct a new path\n                if self.cwd.endswith(\"/\"):\n                    new_path = f\"{self.cwd}{new_name}/\"\n                else:\n                    new_path = f\"{self.cwd}/{new_name}/\"\n\n                # only rename if valid name was entered\n                if new_name is not None and new_name != \"\":\n                    os.rename(path, new_path)\n                    self.fill_tree(self.cwd, self.sys_files)\n\n        except PermissionError:\n            WarnBox(f\"{SCRIPT_DIR}/source/misc/warning.png\",\n                    \"Error: This is a system\\nfile or directory and should\\nnot be modified.\",\n                    self.font\n                    )\n\n    def up_one_dir(self, event) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        Allow the user to move up one directory. Essential for navigating the file hierarchy.\n        \"\"\"\n\n        os.chdir(self.cwd)\n\n        # use relative paths and os module to move to parent dir\n        new_path = os.path.abspath(\"..\")\n        self.cwd = new_path\n        os.chdir(self.cwd)\n        self.cwd_var.set(self.cwd)", ""]}
{"filename": "core/ui_scale.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nclass ScaleLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        A widget to explain what the menu under it is for.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master,\n                         text = \"UI Scaling:\",\n                         font = font\n                         )", "\nclass ScaleMenu(ctk.CTkOptionMenu):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        A widget allowing the user to customize the scaling/size of the UI.\n        \"\"\"\n\n        # widget setup\n        self.master = master\n        self.options = [\"80%\", \"90%\", \"100%\", \"110%\", \"120%\"]\n\n        super().__init__(self.master,\n                         values = self.options,\n                         command = self.scale_ui,\n                         font = font\n                         )\n\n        self.set(\"100%\")\n\n    def scale_ui(self, scale_percent: str) -> None:\n        \"\"\"\n        Changes the UI scale of the widgets.\n        \"\"\"\n\n        scale_float = int(scale_percent.replace(\"%\", \"\")) / 100\n        ctk.set_widget_scaling(scale_float)\n        self.master.save_recent()", ""]}
{"filename": "core/sys_files.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nclass SysFilesLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the checkbox below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = \"Display system files:\",\n                         font = font\n                         )", "\nclass SysFilesSwitch(ctk.CTkSwitch):\n    def __init__(self, master: ctk.CTk, sys_files: ctk.IntVar) -> None:\n        \"\"\"\n        Widget that allows the user to toggle the visibility of system files.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         onvalue = 1,\n                         offvalue = 0,\n                         variable = sys_files,\n                         text = \"\"\n                        )", ""]}
{"filename": "core/__init__.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom .const import *\n\nfrom .helper import *\n\nfrom .appearance import AppearanceLabel\nfrom .appearance import AppearanceMenu\n", "from .appearance import AppearanceMenu\n\nfrom .file_explorer import FileExplorer\n\nfrom .path_text import PathLabel\n\nfrom .sys_files import SysFilesLabel\nfrom .sys_files import SysFilesSwitch\n\nfrom .theme import ThemeLabel", "\nfrom .theme import ThemeLabel\nfrom .theme import ThemeMenu\n\nfrom .warn_box import WarnBox\n\nfrom .popup import Popup\n\nfrom .ui_scale import ScaleLabel\nfrom .ui_scale import ScaleMenu", "from .ui_scale import ScaleLabel\nfrom .ui_scale import ScaleMenu\n\nfrom .rename import RenamePopup\n\nfrom .goto import GotoPopup\n\nfrom .font import FontMenu\nfrom .font import FontLabel\n", "from .font import FontLabel\n\nfrom .info import InfoPopup\n\nfrom .trash import TrashButton\n"]}
{"filename": "core/appearance.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\nfrom PIL import ImageTk, Image\n\nfrom .const import LIGHT_ICON_PATH, DARK_ICON_PATH\n\nclass AppearanceLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = \"Appearance:\",\n                         font = font\n                         )", "class AppearanceLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that explains what the menu below it is for/does.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = \"Appearance:\",\n                         font = font\n                         )", "\nclass AppearanceMenu(ctk.CTkOptionMenu):\n    def __init__(self, master: ctk.CTk, font: tuple) -> None:\n        \"\"\"\n        Widget that allows the user to select an appearance mode from light, dark, or system\n        default.\n        \"\"\"\n\n        # widget setup\n        self.master = master\n        super().__init__(master = self.master,\n                         values = [\"System\", \"Light\", \"Dark\"],\n                         command = self.change_appearance,\n                         font = font\n                         )\n\n    def change_appearance(self, new_appearance: str) -> None:\n        \"\"\"\n        Changes the appearance mode of the app.\n        \"\"\"\n\n        ctk.set_appearance_mode(new_appearance.lower())\n\n        # change to light icon\n        if ctk.get_appearance_mode().lower() == \"light\":\n            icon_image = Image.open(LIGHT_ICON_PATH)\n            self.master.iconphoto(True, ImageTk.PhotoImage(icon_image, master = self))\n\n        # change to dark icon\n        elif ctk.get_appearance_mode().lower() == \"dark\":\n            icon_image = Image.open(DARK_ICON_PATH)\n            self.master.iconphoto(True, ImageTk.PhotoImage(icon_image, master = self))", ""]}
{"filename": "core/const.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom os import environ\nfrom os.path import dirname\n\n# window size\nWIDTH = 700\nHEIGHT = 600\n", "HEIGHT = 600\n\n# design\nPADX = 15\nPADY = 5\n\n# absolute path to hive.py\nSCRIPT_DIR = dirname(__file__).replace(\"core\", \"\")\nif SCRIPT_DIR.endswith(\"/\"):\n    SCRIPT_DIR = SCRIPT_DIR.removesuffix(\"/\")", "if SCRIPT_DIR.endswith(\"/\"):\n    SCRIPT_DIR = SCRIPT_DIR.removesuffix(\"/\")\n\n# config file path\nCONFIG_PATH = f\"{SCRIPT_DIR}/config/settings.cfg\"\n\n# path to the theme folder\nTHEME_PATH = f\"{SCRIPT_DIR}/source/themes\"\n\n# path to the font folder", "\n# path to the font folder\nFONT_PATH = f\"{SCRIPT_DIR}/source/fonts\"\n\n# the current user\nUSER = environ[\"USER\"]\n\nLIGHT_ICON_PATH = f\"{SCRIPT_DIR}/source/icons/light.png\"\nDARK_ICON_PATH = f\"{SCRIPT_DIR}/source/icons/dark.png\"\n", "DARK_ICON_PATH = f\"{SCRIPT_DIR}/source/icons/dark.png\"\n\n# list of hidden system files/directories\nSYSTEM_FILES = [\"/bin\",\n                \"/cores\",\n                \"/private\",\n                \"/etc\",\n                \"/home\",\n                \"/opt\",\n                \"/sbin\",", "                \"/opt\",\n                \"/sbin\",\n                \"/tmp\",\n                \"/usr\",\n                \"/var\",\n                \"/dev\",\n                \"/Volumes\",\n                \"/Users/Shared/adi\",\n                \"/Users/Shared/SC Info\",\n                f\"/Users/{USER}/Library\",", "                \"/Users/Shared/SC Info\",\n                f\"/Users/{USER}/Library\",\n                f\"/Users/{USER}/Trash\"\n                ]\n\n# list of directories that cannot be renamed\nNO_RENAME = [\"/Applications\",\n             \"/Library\",\n             \"/System\",\n             \"/Users\",", "             \"/System\",\n             \"/Users\",\n             f\"/Users/{USER}\",\n             \"/Users/Shared\",\n             f\"/Users/{USER}/Desktop\",\n             f\"/Users/{USER}/Documents\",\n             f\"/Users/{USER}/Downloads\",\n             f\"/Users/{USER}/Movies\",\n             f\"/Users/{USER}/Music\",\n             f\"/Users/{USER}/Pictures\",", "             f\"/Users/{USER}/Music\",\n             f\"/Users/{USER}/Pictures\",\n             f\"/Users/{USER}/Public\"\n             ]\n"]}
{"filename": "core/popup.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\nfrom PIL import Image\n\nfrom .const import PADX, PADY\n\nclass Popup(ctk.CTkToplevel):\n    def __init__(self, icon_path: str, message: str, font: tuple) -> None:\n        \"\"\"\n        A window that displays a message instructing the user to restart the app after selecting a\n        new theme.\n        \"\"\"\n\n        # setup widget\n        super().__init__()\n        self.title(\"restart\")\n        self.geometry(\"250x150\")\n        self.resizable(False, False)\n        self.rowconfigure(0, weight = 1)\n        self.rowconfigure(1, weight = 1)\n        self.columnconfigure(0, weight = 1)\n\n        # the popup image/icon\n        self.icon = ctk.CTkImage(light_image = Image.open(icon_path),\n                            size = (55, 55)\n                            )\n        button = ctk.CTkButton(master = self,\n                               image = self.icon,\n                               text = \"\",\n                               width = self.icon.cget(\"size\")[0]\n                               )\n        button.grid(row = 0,\n                    column = 0,\n                    padx = PADX,\n                    pady = PADY\n                    )\n\n        # create a text widget\n        warning = PopupLabel(self, message, font)\n        warning.grid(row = 1,\n                     column = 0,\n                     padx = PADX,\n                     pady = PADY\n                     )", "class Popup(ctk.CTkToplevel):\n    def __init__(self, icon_path: str, message: str, font: tuple) -> None:\n        \"\"\"\n        A window that displays a message instructing the user to restart the app after selecting a\n        new theme.\n        \"\"\"\n\n        # setup widget\n        super().__init__()\n        self.title(\"restart\")\n        self.geometry(\"250x150\")\n        self.resizable(False, False)\n        self.rowconfigure(0, weight = 1)\n        self.rowconfigure(1, weight = 1)\n        self.columnconfigure(0, weight = 1)\n\n        # the popup image/icon\n        self.icon = ctk.CTkImage(light_image = Image.open(icon_path),\n                            size = (55, 55)\n                            )\n        button = ctk.CTkButton(master = self,\n                               image = self.icon,\n                               text = \"\",\n                               width = self.icon.cget(\"size\")[0]\n                               )\n        button.grid(row = 0,\n                    column = 0,\n                    padx = PADX,\n                    pady = PADY\n                    )\n\n        # create a text widget\n        warning = PopupLabel(self, message, font)\n        warning.grid(row = 1,\n                     column = 0,\n                     padx = PADX,\n                     pady = PADY\n                     )", "\nclass PopupLabel(ctk.CTkLabel):\n    def __init__(self, master: ctk.CTk, message: str, font: tuple) -> None:\n        \"\"\"\n        The text that goes inside the popup window.\n        \"\"\"\n\n        # widget setup\n        super().__init__(master = master,\n                         text = message,\n                         font = font\n                         )", ""]}
{"filename": "core/trash.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\nfrom PIL import Image\n\nfrom .const import USER\n\nclass TrashButton(ctk.CTkButton):\n    def __init__(self, master: ctk.CTk, icon_path: str, font: tuple) -> None:\n        \"\"\"\n        A button allowing a user to view their trash.\n        \"\"\"\n\n        # attributes\n        self.icon_path = icon_path\n        self.master = master\n        self.icon = ctk.CTkImage(light_image = Image.open(f\"{self.icon_path}trash.png\"))\n\n        # widget setup\n        super().__init__(master = self.master,\n                         text = \"Trash\",\n                         image = self.icon,\n                         font = font,\n                         command = self.view_trash\n                         )\n\n    def view_trash(self) -> None:\n        \"\"\"\n        Views the user's trash in the file explorer.\n        \"\"\"\n\n        self.master.cwd_var.set(f\"/Users/{USER}/.Trash\")", "class TrashButton(ctk.CTkButton):\n    def __init__(self, master: ctk.CTk, icon_path: str, font: tuple) -> None:\n        \"\"\"\n        A button allowing a user to view their trash.\n        \"\"\"\n\n        # attributes\n        self.icon_path = icon_path\n        self.master = master\n        self.icon = ctk.CTkImage(light_image = Image.open(f\"{self.icon_path}trash.png\"))\n\n        # widget setup\n        super().__init__(master = self.master,\n                         text = \"Trash\",\n                         image = self.icon,\n                         font = font,\n                         command = self.view_trash\n                         )\n\n    def view_trash(self) -> None:\n        \"\"\"\n        Views the user's trash in the file explorer.\n        \"\"\"\n\n        self.master.cwd_var.set(f\"/Users/{USER}/.Trash\")", ""]}
{"filename": "core/helper.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom os import listdir, mkdir\nfrom os.path import exists\n\nfrom .const import USER, SYSTEM_FILES, NO_RENAME\n\ndef get_all_fonts(path: str) -> list:\n    \"\"\"\n    Returns a list of all the fonts in the given path.\n    \"\"\"\n\n    # local variables\n    files = listdir(path)\n    files += listdir(f\"/Users/{USER}/.hive/fonts\")\n    fonts = []\n\n    # get all the fonts (.ttf files)\n    for file in files:\n\n        if not file == \".DS_Store\":\n            # call methods on each string to get it ready for user\n            file = file.removesuffix(\".ttf\")\n            file = file.capitalize()\n\n            # removing underscores\n            if \"_\" in file:\n                file = file.replace(\"_\", \" \")\n                file = file.title()\n                # temp = file.split(\" \")\n                # file = \"\"\n                # for index, item in enumerate(temp):\n                #     temp[index] = item.capitalize()\n                #     if not index == 0:\n                #         file += \" \" + temp[index]\n                #     else:\n                #         file += temp[index]\n\n            fonts.append(file)\n\n    fonts.sort()\n\n    # move the default theme to top of list\n    old_index = fonts.index(\"Dm Mono\")\n    fonts.insert(0, fonts.pop(old_index))\n\n    return fonts", "def get_all_fonts(path: str) -> list:\n    \"\"\"\n    Returns a list of all the fonts in the given path.\n    \"\"\"\n\n    # local variables\n    files = listdir(path)\n    files += listdir(f\"/Users/{USER}/.hive/fonts\")\n    fonts = []\n\n    # get all the fonts (.ttf files)\n    for file in files:\n\n        if not file == \".DS_Store\":\n            # call methods on each string to get it ready for user\n            file = file.removesuffix(\".ttf\")\n            file = file.capitalize()\n\n            # removing underscores\n            if \"_\" in file:\n                file = file.replace(\"_\", \" \")\n                file = file.title()\n                # temp = file.split(\" \")\n                # file = \"\"\n                # for index, item in enumerate(temp):\n                #     temp[index] = item.capitalize()\n                #     if not index == 0:\n                #         file += \" \" + temp[index]\n                #     else:\n                #         file += temp[index]\n\n            fonts.append(file)\n\n    fonts.sort()\n\n    # move the default theme to top of list\n    old_index = fonts.index(\"Dm Mono\")\n    fonts.insert(0, fonts.pop(old_index))\n\n    return fonts", "\ndef create_dir() -> None:\n    \"\"\"\n    Creates a special directory for users to put their custom themes in.\n    \"\"\"\n\n    base_path = f\"/Users/{USER}/.hive/\"\n    sub_dirs = [\"\",\n                \"themes\",\n                \"fonts\"\n                ]\n\n    for path in sub_dirs:\n        if not exists(base_path + path):\n            mkdir(base_path + path)", "\ndef get_all_themes(path: str) -> list:\n    \"\"\"\n    Returns a list of all the themes in the given path.\n    \"\"\"\n\n    # local variables\n    files = listdir(path)\n    files += listdir(f\"/Users/{USER}/.hive/themes\")\n    themes = []\n\n    # get all the themes (.json files)\n    for file in files:\n\n        if not file == \".DS_Store\":\n            # call methods on each string to get it ready for user\n            file = file.removesuffix(\".json\")\n            file = file.capitalize()\n\n            # removing underscores\n            if \"_\" in file:\n                file = file.replace(\"_\", \" \")\n                file = file.title()\n                # temp = file.split(\" \")\n                # file = \"\"\n                # for index, item in enumerate(temp):\n                #     temp[index] = item.capitalize()\n                #     if not index == 0:\n                #         file += \" \" + temp[index]\n                #     else:\n                #         file += temp[index]\n\n            themes.append(file)\n\n    themes.sort()\n\n    # move the default theme to top of list\n    old_index = themes.index(\"Default\")\n    themes.insert(0, themes.pop(old_index))\n\n    return themes", "\ndef is_hidden(entity: str, path: str) -> bool:\n    \"\"\"\n    Check if the file/directory at the given path is a hidden system file/directory.\n    \"\"\"\n\n    if entity.startswith(\".\"): # many system files/dirs start with a \".\"\n        return True\n\n    for hidden_path in SYSTEM_FILES:\n        if path.startswith(hidden_path): # if the file/dir is a known system file/dir\n            return True\n\n    return False", "\ndef can_rename(entity: str, path: str) -> bool:\n    \"\"\"\n    Checks if it is possible to rename a file or directory based on some conditions.\n    \"\"\"\n\n    if path in NO_RENAME: # if the file/dir is in our list of no-nos\n        return False\n\n    if path.startswith(\"/Library/\"): # if the file/dir is in the Library dir\n        return False\n\n    if path.startswith(\"/System/\"): # if the file/dir is in the System dir\n        return False\n\n    if is_hidden(entity, path): # if the file/dir is a system file/dir\n        return False\n\n    return True", ""]}
{"filename": "core/warn_box.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom .popup import Popup\n\nclass WarnBox(Popup):\n    def __init__(self, icon_path: str, message: str, font: tuple) -> None:\n        \"\"\"\n        A window that displays a warning explaining to the user why an action could not be \n        performed.\n        \"\"\"\n\n        # setup widget\n        super().__init__(icon_path,\n                         message,\n                         font\n                         )\n        self.title(\"error\")", ""]}
{"filename": "core/rename.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nimport customtkinter as ctk\n\nclass RenamePopup(ctk.CTkInputDialog):\n    def __init__(self, font: tuple) -> None: # pylint: disable=unused-argument\n        \"\"\"\n        A popup window for the user to rename a file or directory.\n        \"\"\"\n\n        # widget setup\n        super().__init__(title = \"rename\",\n                         text = \"Enter a new name (including the file extension):\",\n                         # font = font\n                         )", ""]}
{"filename": "core/extensions/ctk_xyframe.py", "chunked_list": ["#\n#    Advanced scrollable frame for customtkinter.\n#    Author: Akash Bora (@akascape)\n#    License: MIT License\n#    Source: https://github.com/Akascape/CTkXYFrame\n#\n\nimport customtkinter\nfrom tkinter import Canvas\n\nclass CTkXYFrame(customtkinter.CTkFrame):\n    def __init__(self,\n                 master: any,\n                 scrollbar_fg_color = None,\n                 scrollbar_button_color = None,\n                 scrollbar_button_hover_color = None,\n                 **kwargs):\n\n        self.parent_frame = customtkinter.CTkFrame(master=master, **kwargs)\n        self.bg_color = self.parent_frame.cget(\"fg_color\")\n        self.xy_canvas = Canvas(self.parent_frame, bg=self.parent_frame._apply_appearance_mode(self.bg_color), borderwidth=0, highlightthickness=0)\n        self.parent_frame.rowconfigure(0,weight=1)\n        self.parent_frame.columnconfigure(0,weight=1)\n        \n        customtkinter.CTkFrame.__init__(self, master=self.xy_canvas, fg_color=self.parent_frame.cget(\"fg_color\"),\n                                        bg_color=self.parent_frame.cget(\"fg_color\"))\n        self.xy_canvas.create_window((0,0), window=self, anchor=\"nw\")\n        \n        self.vsb = customtkinter.CTkScrollbar(self.parent_frame, orientation=\"vertical\", command=self.xy_canvas.yview,\n                                              fg_color=scrollbar_fg_color, button_color=scrollbar_button_color,\n                                              button_hover_color=scrollbar_button_hover_color)\n        self.hsb = customtkinter.CTkScrollbar(self.parent_frame, orientation=\"horizontal\", command=self.xy_canvas.xview,\n                                              fg_color=scrollbar_fg_color, button_color=scrollbar_button_color,\n                                              button_hover_color=scrollbar_button_hover_color)\n        \n        self.xy_canvas.configure(yscrollcommand=lambda x,y: self.dynamic_scrollbar_vsb(x,y),\n                                 xscrollcommand=lambda x,y: self.dynamic_scrollbar_hsb(x,y))\n        self.xy_canvas.grid(row=0, column=0, sticky=\"nsew\", padx=(7,0), pady=(7,0))\n        \n        self.bind(\"<Configure>\", lambda event, canvas=self.xy_canvas: self.onFrameConfigure(canvas))\n        self.xy_canvas.bind_all(\"<MouseWheel>\", lambda e: self._on_mousewheel(e.delta))\n        self.xy_canvas.bind_all(\"<Shift-MouseWheel>\", lambda e: self._on_mousewheel_shift(e.delta))\n        self.xy_canvas.bind_all(\"<Button-4>\", lambda e: self._on_mousewheel(120))\n        self.xy_canvas.bind_all(\"<Button-5>\", lambda e: self._on_mousewheel(-120))\n        self.xy_canvas.bind_all(\"<Shift-Button-4>\", lambda e: self._on_mousewheel_shift(120))\n        self.xy_canvas.bind_all(\"<Shift-Button-5>\", lambda e: self._on_mousewheel_shift(-120))\n\n    def destroy(self):\n        customtkinter.CTkFrame.destroy(self)\n        self.parent_frame.destroy()\n\n    def _set_appearance_mode(self, mode_string):\n        super()._set_appearance_mode(mode_string)\n        self.xy_canvas.config(bg=self.parent_frame._apply_appearance_mode(self.bg_color))\n        \n    def dynamic_scrollbar_vsb(self, x, y):\n        if float(x)==0.0 and float(y)==1.0:\n            self.vsb.grid_forget()\n        else:\n            self.vsb.grid(row=0, column=1, rowspan=2, sticky=\"nse\", pady=5)\n        self.vsb.set(x,y)\n        \n    def dynamic_scrollbar_hsb(self, x, y):\n        if float(x)==0.0 and float(y)==1.0:\n            self.hsb.grid_forget()\n        else:\n            self.hsb.grid(row=1, column=0, sticky=\"nwe\", padx=(5,0))\n        self.hsb.set(x,y)\n        \n    def onFrameConfigure(self, canvas):\n        canvas.configure(scrollregion=canvas.bbox(\"all\"))\n        \n    def _on_mousewheel(self, event):\n        self.xy_canvas.yview_scroll(int(-1*(event/120)), \"units\")\n        \n    def _on_mousewheel_shift(self, event):\n        self.xy_canvas.xview_scroll(int(-1*(event/120)), \"units\")\n        \n    def pack(self, **kwargs):\n        self.parent_frame.pack(**kwargs)\n\n    def place(self, **kwargs):\n        self.parent_frame.place(**kwargs)\n\n    def grid(self, **kwargs):\n        self.parent_frame.grid(**kwargs)\n\n    def pack_forget(self):\n        self.parent_frame.pack_forget()\n\n    def place_forget(self, **kwargs):\n        self.parent_frame.place_forget()\n\n    def grid_forget(self, **kwargs):\n        self.parent_frame.grid_forget()\n\n    def grid_remove(self, **kwargs):\n        self.parent_frame.grid_remove()\n\n    def grid_propagate(self, **kwargs):\n        self.parent_frame.grid_propagate()\n\n    def grid_info(self, **kwargs):\n        return self.parent_frame.grid_info()\n\n    def lift(self, aboveThis=None):\n        self.parent_frame.lift(aboveThis)\n\n    def lower(self, belowThis=None):\n        self.parent_frame.lower(belowThis)\n        \n    def configure(self, **kwargs):\n        if \"fg_color\" in kwargs:\n            self.bg_color = kwargs[\"fg_color\"]\n            self.xy_canvas.config(bg=self.bg_color)\n            self.configure(fg_color=self.bg_color)\n        self.parent_frame.configure(**kwargs)", "from tkinter import Canvas\n\nclass CTkXYFrame(customtkinter.CTkFrame):\n    def __init__(self,\n                 master: any,\n                 scrollbar_fg_color = None,\n                 scrollbar_button_color = None,\n                 scrollbar_button_hover_color = None,\n                 **kwargs):\n\n        self.parent_frame = customtkinter.CTkFrame(master=master, **kwargs)\n        self.bg_color = self.parent_frame.cget(\"fg_color\")\n        self.xy_canvas = Canvas(self.parent_frame, bg=self.parent_frame._apply_appearance_mode(self.bg_color), borderwidth=0, highlightthickness=0)\n        self.parent_frame.rowconfigure(0,weight=1)\n        self.parent_frame.columnconfigure(0,weight=1)\n        \n        customtkinter.CTkFrame.__init__(self, master=self.xy_canvas, fg_color=self.parent_frame.cget(\"fg_color\"),\n                                        bg_color=self.parent_frame.cget(\"fg_color\"))\n        self.xy_canvas.create_window((0,0), window=self, anchor=\"nw\")\n        \n        self.vsb = customtkinter.CTkScrollbar(self.parent_frame, orientation=\"vertical\", command=self.xy_canvas.yview,\n                                              fg_color=scrollbar_fg_color, button_color=scrollbar_button_color,\n                                              button_hover_color=scrollbar_button_hover_color)\n        self.hsb = customtkinter.CTkScrollbar(self.parent_frame, orientation=\"horizontal\", command=self.xy_canvas.xview,\n                                              fg_color=scrollbar_fg_color, button_color=scrollbar_button_color,\n                                              button_hover_color=scrollbar_button_hover_color)\n        \n        self.xy_canvas.configure(yscrollcommand=lambda x,y: self.dynamic_scrollbar_vsb(x,y),\n                                 xscrollcommand=lambda x,y: self.dynamic_scrollbar_hsb(x,y))\n        self.xy_canvas.grid(row=0, column=0, sticky=\"nsew\", padx=(7,0), pady=(7,0))\n        \n        self.bind(\"<Configure>\", lambda event, canvas=self.xy_canvas: self.onFrameConfigure(canvas))\n        self.xy_canvas.bind_all(\"<MouseWheel>\", lambda e: self._on_mousewheel(e.delta))\n        self.xy_canvas.bind_all(\"<Shift-MouseWheel>\", lambda e: self._on_mousewheel_shift(e.delta))\n        self.xy_canvas.bind_all(\"<Button-4>\", lambda e: self._on_mousewheel(120))\n        self.xy_canvas.bind_all(\"<Button-5>\", lambda e: self._on_mousewheel(-120))\n        self.xy_canvas.bind_all(\"<Shift-Button-4>\", lambda e: self._on_mousewheel_shift(120))\n        self.xy_canvas.bind_all(\"<Shift-Button-5>\", lambda e: self._on_mousewheel_shift(-120))\n\n    def destroy(self):\n        customtkinter.CTkFrame.destroy(self)\n        self.parent_frame.destroy()\n\n    def _set_appearance_mode(self, mode_string):\n        super()._set_appearance_mode(mode_string)\n        self.xy_canvas.config(bg=self.parent_frame._apply_appearance_mode(self.bg_color))\n        \n    def dynamic_scrollbar_vsb(self, x, y):\n        if float(x)==0.0 and float(y)==1.0:\n            self.vsb.grid_forget()\n        else:\n            self.vsb.grid(row=0, column=1, rowspan=2, sticky=\"nse\", pady=5)\n        self.vsb.set(x,y)\n        \n    def dynamic_scrollbar_hsb(self, x, y):\n        if float(x)==0.0 and float(y)==1.0:\n            self.hsb.grid_forget()\n        else:\n            self.hsb.grid(row=1, column=0, sticky=\"nwe\", padx=(5,0))\n        self.hsb.set(x,y)\n        \n    def onFrameConfigure(self, canvas):\n        canvas.configure(scrollregion=canvas.bbox(\"all\"))\n        \n    def _on_mousewheel(self, event):\n        self.xy_canvas.yview_scroll(int(-1*(event/120)), \"units\")\n        \n    def _on_mousewheel_shift(self, event):\n        self.xy_canvas.xview_scroll(int(-1*(event/120)), \"units\")\n        \n    def pack(self, **kwargs):\n        self.parent_frame.pack(**kwargs)\n\n    def place(self, **kwargs):\n        self.parent_frame.place(**kwargs)\n\n    def grid(self, **kwargs):\n        self.parent_frame.grid(**kwargs)\n\n    def pack_forget(self):\n        self.parent_frame.pack_forget()\n\n    def place_forget(self, **kwargs):\n        self.parent_frame.place_forget()\n\n    def grid_forget(self, **kwargs):\n        self.parent_frame.grid_forget()\n\n    def grid_remove(self, **kwargs):\n        self.parent_frame.grid_remove()\n\n    def grid_propagate(self, **kwargs):\n        self.parent_frame.grid_propagate()\n\n    def grid_info(self, **kwargs):\n        return self.parent_frame.grid_info()\n\n    def lift(self, aboveThis=None):\n        self.parent_frame.lift(aboveThis)\n\n    def lower(self, belowThis=None):\n        self.parent_frame.lower(belowThis)\n        \n    def configure(self, **kwargs):\n        if \"fg_color\" in kwargs:\n            self.bg_color = kwargs[\"fg_color\"]\n            self.xy_canvas.config(bg=self.bg_color)\n            self.configure(fg_color=self.bg_color)\n        self.parent_frame.configure(**kwargs)", ""]}
{"filename": "core/extensions/__init__.py", "chunked_list": ["#\n#    A whole new file explorer for macOS. Finder, but better.\n#    Copyright (C) 2023  Dishant B. (@dishb) <code.dishb@gmail.com> and\n#    contributors.\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#", "#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#", "#    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom .ctk_xyframe import CTkXYFrame\n"]}
