{"filename": "main_in_memory_custom.py", "chunked_list": ["from adapters.in_memory_person_repository import InMemoryPersonRepository\nfrom adapters.base_repository import BaseRepository\nfrom adapters.in_memory_order_repository import InMemoryOrderRepository\nfrom adapters.in_memory_connection import InMemoryConnection\nfrom adapters.base_connection import BaseConnection\nfrom use_cases.unit_of_work import UnitOfWork\nfrom domain.person import Person\nfrom domain.order import Order\nfrom use_cases.create_person_and_order_use_case import (\n    CreatePersonAndOrderUseCase)", "from use_cases.create_person_and_order_use_case import (\n    CreatePersonAndOrderUseCase)\n\nfrom custom_di.container import Container\n\ncontainer = Container()\ncontainer.register(BaseConnection, InMemoryConnection)\ncontainer.register(BaseRepository[Person], InMemoryPersonRepository)\ncontainer.register(BaseRepository[Order], InMemoryOrderRepository)\ncontainer.register(UnitOfWork)", "container.register(BaseRepository[Order], InMemoryOrderRepository)\ncontainer.register(UnitOfWork)\ncontainer.register(CreatePersonAndOrderUseCase)\n\ncreate_use_case = container.resolve(CreatePersonAndOrderUseCase)\n\nnew_person = Person(id=1, name=\"John Doe\", age=30)\nnew_order = Order(id=1, order_date=\"2023-04-03\", total_amount=100.0)\n\nperson, order = create_use_case.execute(new_person, new_order)", "\nperson, order = create_use_case.execute(new_person, new_order)\nprint(person, order)\n"]}
{"filename": "main_in_memory_injector.py", "chunked_list": ["from injector import Injector, inject, Module, provider, singleton\nfrom adapters.in_memory_person_repository import InMemoryPersonRepository\nfrom adapters.in_memory_order_repository import InMemoryOrderRepository\nfrom adapters.in_memory_connection import InMemoryConnection\nfrom use_cases.unit_of_work import UnitOfWork\nfrom domain.person import Person\nfrom domain.order import Order\nfrom use_cases.create_person_and_order_use_case import (\n    CreatePersonAndOrderUseCase)\n", "    CreatePersonAndOrderUseCase)\n\n\nclass AppModule(Module):\n    @singleton\n    @provider\n    def provide_connection(self) -> InMemoryConnection:\n        return InMemoryConnection()\n\n    @singleton\n    @provider\n    def provide_person_repository(self) -> InMemoryPersonRepository:\n        return InMemoryPersonRepository()\n\n    @singleton\n    @provider\n    def provide_order_repository(self) -> InMemoryOrderRepository:\n        return InMemoryOrderRepository()\n\n    @inject\n    @singleton\n    @provider\n    def provide_unit_of_work(\n        self,\n        connection: InMemoryConnection,\n        person_repository: InMemoryPersonRepository,\n        order_repository: InMemoryOrderRepository\n    ) -> UnitOfWork:\n        return UnitOfWork(connection, person_repository, order_repository)\n\n    @inject\n    @singleton\n    @provider\n    def provide_create_use_case(\n        self,\n        unit_of_work: UnitOfWork\n    ) -> CreatePersonAndOrderUseCase:\n        return CreatePersonAndOrderUseCase(unit_of_work)", "\n\ninjector = Injector(AppModule())\ncreate_use_case = injector.get(CreatePersonAndOrderUseCase)\n\nnew_person = Person(id=1, name=\"John Doe\", age=30)\nnew_order = Order(id=1, order_date=\"2023-04-03\", total_amount=100.0)\n\nperson, order = create_use_case.execute(new_person, new_order)\nprint(person, order)", "person, order = create_use_case.execute(new_person, new_order)\nprint(person, order)\n"]}
{"filename": "main_in_memory_dependency_injector.py", "chunked_list": ["from dependency_injector import providers, containers\nfrom adapters.in_memory_person_repository import InMemoryPersonRepository\nfrom adapters.in_memory_order_repository import InMemoryOrderRepository\nfrom adapters.in_memory_connection import InMemoryConnection\nfrom use_cases.unit_of_work import UnitOfWork\nfrom domain.person import Person\nfrom domain.order import Order\nfrom use_cases.create_person_and_order_use_case import (\n    CreatePersonAndOrderUseCase)\n", "    CreatePersonAndOrderUseCase)\n\n\nclass Container(containers.DeclarativeContainer):\n    connection = providers.Singleton(\n        InMemoryConnection\n    )\n\n    person_repository = providers.Singleton(\n        InMemoryPersonRepository\n    )\n\n    order_repository = providers.Singleton(\n        InMemoryOrderRepository\n    )\n\n    unit_of_work = providers.Singleton(\n        UnitOfWork,\n        connection=connection,\n        person_repository=person_repository,\n        order_repository=order_repository\n    )\n\n    create_use_case = providers.Factory(\n        CreatePersonAndOrderUseCase,\n        unit_of_work=unit_of_work\n    )", "\n\nif __name__ == '__main__':\n    container = Container()\n    create_use_case = container.create_use_case()\n\n    new_person = Person(id=1, name=\"John Doe\", age=30)\n    new_order = Order(id=1, order_date=\"2023-04-03\", total_amount=100.0)\n\n    person, order = create_use_case.execute(new_person, new_order)\n    print(person, order)", ""]}
{"filename": "adapters/sqlite_person_repository.py", "chunked_list": ["from typing import Optional\n\nfrom adapters.base_repository import BaseRepository\nfrom domain.person import Person\n\n\nclass SQLitePersonRepository(BaseRepository[Person]):\n    def __init__(self, connection):\n        self.connection = connection\n        self._create_table()\n\n    def _create_table(self):\n        cursor = self.connection.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS persons (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT NOT NULL,\n                age INTEGER NOT NULL\n            )\n        \"\"\")\n        self.connection.commit()\n\n    def add(self, person: Person):\n        cursor = self.connection.cursor()\n        cursor.execute(\n            \"INSERT INTO persons (name, age) VALUES (?, ?)\",\n            (person.name, person.age)\n        )\n        person.id = cursor.lastrowid\n\n    def get_by_id(self, person_id: int) -> Optional[Person]:\n        cursor = self.connection.cursor()\n        cursor.execute(\"SELECT id, name, age FROM persons WHERE id=?\",\n                       (person_id,))\n        row = cursor.fetchone()\n        if row:\n            return Person(row[1], row[2], row[0])\n        return None\n\n    def update(self, person: Person):\n        cursor = self.connection.cursor()\n        cursor.execute(\n            \"UPDATE persons SET name=?, age=? WHERE id=?\",\n            (person.name, person.age, person.id)\n        )\n\n    def delete(self, person_id: int):\n        cursor = self.connection.cursor()\n        cursor.execute(\"DELETE FROM persons WHERE id=?\", (person_id,))", ""]}
{"filename": "adapters/sql_alchemy_connection.py", "chunked_list": ["from sqlalchemy.orm import Session\nfrom adapters.base_connection import BaseConnection\n\n\nclass SQLAlchemyConnection(BaseConnection):\n    def __init__(self, session: Session):\n        self.session = session\n\n    def commit(self):\n        self.session.commit()\n\n    def rollback(self):\n        self.session.rollback()", ""]}
{"filename": "adapters/in_memory_person_repository.py", "chunked_list": ["from typing import Optional\nfrom adapters.base_repository import BaseRepository\nfrom domain.person import Person\n\n\nclass InMemoryPersonRepository(BaseRepository[Person]):\n    def __init__(self):\n        self.persons = {}\n\n    def add(self, person: Person):\n        self.persons[person.id] = person\n\n    def get_by_id(self, person_id: int) -> Optional[Person]:\n        return self.persons.get(person_id)\n\n    def update(self, person: Person):\n        self.persons[person.id] = person\n\n    def delete(self, person_id: int):\n        self.persons.pop(person_id, None)", ""]}
{"filename": "adapters/sql_alchemy_mappers.py", "chunked_list": ["from sqlalchemy import Table, Column, Integer, String, Float, ForeignKey\nfrom sqlalchemy.orm import registry\n\nfrom domain.order import Order\nfrom domain.person import Person\n\n\ndef create_tables_and_mappers(metadata):\n    person_table = Table(\n        'person', metadata,\n        Column('id', Integer, primary_key=True),\n        Column('name', String),\n        Column('age', Integer)\n    )\n\n    order_table = Table(\n        'order', metadata,\n        Column('id', Integer, primary_key=True),\n        Column('person_id', Integer, ForeignKey('person.id')),\n        Column('order_date', String),\n        Column('total_amount', Float)\n    )\n\n    mapper_registry = registry()\n    mapper_registry.map_imperatively(Person, person_table)\n    mapper_registry.map_imperatively(Order, order_table)", ""]}
{"filename": "adapters/__init__.py", "chunked_list": [""]}
{"filename": "adapters/sqlite_connection.py", "chunked_list": ["import sqlite3\nfrom adapters.base_connection import BaseConnection\n\n\nclass SQLiteConnection(BaseConnection):\n    def __init__(self, connection: sqlite3.Connection):\n        self.connection = connection\n\n    def commit(self):\n        self.connection.commit()\n\n    def rollback(self):\n        self.connection.rollback()", ""]}
{"filename": "adapters/in_memory_connection.py", "chunked_list": ["\nfrom adapters.base_connection import BaseConnection\n\n\nclass InMemoryConnection(BaseConnection):\n    def commit(self):\n        pass\n\n    def rollback(self):\n        pass", ""]}
{"filename": "adapters/base_connection.py", "chunked_list": ["from abc import ABC, abstractmethod\n\n\nclass BaseConnection(ABC):\n    @abstractmethod\n    def commit(self):\n        raise NotImplementedError()\n\n    @abstractmethod\n    def rollback(self):\n        raise NotImplementedError()", ""]}
{"filename": "adapters/base_repository.py", "chunked_list": ["from typing import TypeVar, Generic, Optional\nfrom abc import ABC, abstractmethod\n\nT = TypeVar('T')\n\n\nclass BaseRepository(ABC, Generic[T]):\n    \"\"\"A base class for repositories\"\"\"\n\n    @abstractmethod\n    def add(self, item: T):\n        \"\"\"Add a new item to a repository\"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    def update(self, item: T):\n        \"\"\"Update an existing item in the repository\"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    def delete(self, item_id: int):\n        \"\"\"Delete an existing item from a repository\"\"\"\n        raise NotImplementedError()\n\n    @abstractmethod\n    def get_by_id(self, item_id: int) -> Optional[T]:\n        \"\"\"Retrieve an item by its id\"\"\"\n        raise NotImplementedError()", ""]}
{"filename": "adapters/in_memory_order_repository.py", "chunked_list": ["from typing import Optional\nfrom adapters.base_repository import BaseRepository\nfrom domain.order import Order\n\n\nclass InMemoryOrderRepository(BaseRepository[Order]):\n    def __init__(self):\n        self.orders = {}\n\n    def add(self, order: Order):\n        self.orders[order.id] = order\n\n    def get_by_id(self, order_id: int) -> Optional[Order]:\n        return self.orders.get(order_id)\n\n    def update(self, order: Order):\n        self.orders[order.id] = order\n\n    def delete(self, order_id: int):\n        self.orders.pop(order_id, None)", ""]}
{"filename": "adapters/sqlite_order_repository.py", "chunked_list": ["from typing import Optional\n\nfrom domain.order import Order\nfrom adapters.base_repository import BaseRepository\n\n\nclass SQLiteOrderRepository(BaseRepository[Order]):\n    def __init__(self, connection):\n        self.connection = connection\n        self._create_table()\n\n    def _create_table(self):\n        cursor = self.connection.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS orders (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                person_id INTEGER NOT NULL,\n                order_date TEXT NOT NULL,\n                total_amount REAL NOT NULL,\n                FOREIGN KEY (person_id) REFERENCES persons (id)\n            )\n        ''')\n        self.connection.commit()\n\n    def add(self, order: Order):\n        query = \"\"\"\n        INSERT INTO orders (person_id, order_date, total_amount)\n        VALUES (?, ?, ?)\n        \"\"\"\n        cursor = self.connection.cursor()\n        cursor.execute(query, (order.person_id, order.order_date,\n                               order.total_amount))\n        order.id = cursor.lastrowid\n\n    def update(self, order: Order):\n        query = \"\"\"\n        UPDATE orders\n        SET person_id = ?, order_date = ?, total_amount = ?\n        WHERE id = ?\n        \"\"\"\n        self.connection.execute(query, (order.person_id, order.order_date,\n                                order.total_amount, order.id))\n\n    def delete(self, order_id: int):\n        query = \"DELETE FROM orders WHERE id = ?\"\n        self.connection.execute(query, (order_id,))\n\n    def get_by_id(self, order_id: int) -> Optional[Order]:\n        query = \"\"\"\n        SELECT id, person_id, order_date, total_amount\n        FROM orders WHERE id = ?\n        \"\"\"\n        cursor = self.connection.execute(query, (order_id,))\n        row = cursor.fetchone()\n        if row:\n            return Order(id=row[0], person_id=row[1], order_date=row[2],\n                         total_amount=row[3])\n        return None", ""]}
{"filename": "adapters/sql_alchemy_order_repository.py", "chunked_list": ["from typing import Optional\nfrom sqlalchemy.orm import Session\n\nfrom adapters.base_repository import BaseRepository\nfrom domain.order import Order\n\n\nclass SQLAlchemyOrderRepository(BaseRepository[Order]):\n    def __init__(self, session: Session):\n        self.session = session\n\n    def add(self, order: Order):\n        self.session.add(order)\n\n    def update(self, order: Order):\n        self.session.merge(order)\n\n    def delete(self, order_id: int):\n        order = self.session.get(Order, order_id)\n        if order:\n            self.session.delete(order)\n\n    def get_by_id(self, order_id: int) -> Optional[Order]:\n        return self.session.get(Order, order_id)", ""]}
{"filename": "adapters/sql_alchemy_person_repository.py", "chunked_list": ["from typing import Optional\nfrom sqlalchemy.orm import Session\n\nfrom adapters.base_repository import BaseRepository\nfrom domain.person import Person\n\n\nclass SQLAlchemyPersonRepository(BaseRepository[Person]):\n    def __init__(self, session: Session):\n        self.session = session\n\n    def add(self, person: Person):\n        self.session.add(person)\n        # flush() is needed to get the id of the person\n        self.session.flush()\n\n    def update(self, person: Person):\n        self.session.merge(person)\n\n    def delete(self, person_id: int):\n        person = self.session.get(Person, person_id)\n        if person:\n            self.session.delete(person)\n\n    def get_by_id(self, person_id: int) -> Optional[Person]:\n        return self.session.get(Person, person_id)", ""]}
{"filename": "domain/__init__.py", "chunked_list": [""]}
{"filename": "domain/order.py", "chunked_list": ["from dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Order:\n    order_date: str\n    total_amount: float\n    person_id: Optional[int] = None\n    id: Optional[int] = None", ""]}
{"filename": "domain/person.py", "chunked_list": ["from dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    id: Optional[int] = None\n", ""]}
{"filename": "tests/test_sqlite_order_repository.py", "chunked_list": ["import sqlite3\nfrom domain.order import Order\nfrom adapters.sqlite_order_repository import SQLiteOrderRepository\nimport pytest\n\n\n@pytest.fixture\ndef connection():\n    conn = sqlite3.connect(\":memory:\")\n    yield conn\n    conn.close()", "\n\n@pytest.fixture\ndef repository(connection):\n    return SQLiteOrderRepository(connection)\n\n\ndef test_add_order(repository):\n    order = Order(person_id=1, order_date=\"2022-01-01\", total_amount=100.0)\n    repository.add(order)\n\n    retrieved_order = repository.get_by_id(order.id)\n    assert retrieved_order is not None\n    assert retrieved_order.person_id == order.person_id\n    assert retrieved_order.order_date == order.order_date\n    assert retrieved_order.total_amount == order.total_amount", "\n\ndef test_update_order(repository):\n    order = Order(person_id=1, order_date=\"2022-01-01\", total_amount=100.0)\n    repository.add(order)\n\n    order.person_id = 2\n    order.order_date = \"2022-01-02\"\n    order.total_amount = 200.0\n    repository.update(order)\n\n    updated_order = repository.get_by_id(order.id)\n    assert updated_order.person_id == 2\n    assert updated_order.order_date == \"2022-01-02\"\n    assert updated_order.total_amount == 200.0", "\n\ndef test_delete_order(repository):\n    order = Order(person_id=1, order_date=\"2022-01-01\", total_amount=100.0)\n    repository.add(order)\n    repository.delete(order.id)\n\n    deleted_order = repository.get_by_id(order.id)\n    assert deleted_order is None\n", "\n\ndef test_get_by_id_order_not_found(repository):\n    non_existent_order = repository.get_by_id(999)\n    assert non_existent_order is None\n"]}
{"filename": "tests/__init__.py", "chunked_list": [""]}
{"filename": "tests/test_in_memory_person_repository.py", "chunked_list": ["import pytest\nfrom domain.person import Person\nfrom adapters.in_memory_person_repository import InMemoryPersonRepository\n\n\n@pytest.fixture\ndef repository():\n    return InMemoryPersonRepository()\n\n\ndef test_add_person(repository):\n    person = Person(name=\"John Doe\", age=30, id=1)\n    repository.add(person)\n\n    retrieved_person = repository.get_by_id(1)\n    assert retrieved_person is not None\n    assert retrieved_person.name == person.name\n    assert retrieved_person.age == person.age", "\n\ndef test_add_person(repository):\n    person = Person(name=\"John Doe\", age=30, id=1)\n    repository.add(person)\n\n    retrieved_person = repository.get_by_id(1)\n    assert retrieved_person is not None\n    assert retrieved_person.name == person.name\n    assert retrieved_person.age == person.age", "\n\ndef test_update_person(repository):\n    person = Person(name=\"John Doe\", age=30, id=1)\n    repository.add(person)\n\n    person.name = \"Jane Doe\"\n    person.age = 28\n    repository.update(person)\n\n    updated_person = repository.get_by_id(1)\n    assert updated_person.name == \"Jane Doe\"\n    assert updated_person.age == 28", "\n\ndef test_delete_person(repository):\n    person = Person(name=\"John Doe\", age=30, id=1)\n    repository.add(person)\n    repository.delete(1)\n\n    deleted_person = repository.get_by_id(1)\n    assert deleted_person is None\n", "\n\ndef test_get_by_id_person_not_found(repository):\n    non_existent_person = repository.get_by_id(999)\n    assert non_existent_person is None\n"]}
{"filename": "tests/test_container.py", "chunked_list": ["import pytest\nfrom custom_di.container import Container\n\n\n# Sample classes for testing\nclass Engine:\n    pass\n\n\nclass DieselEngine(Engine):\n    pass", "\nclass DieselEngine(Engine):\n    pass\n\n\nclass Car:\n    def __init__(self, engine: Engine):\n        self.engine = engine\n\n", "\n\n# Test functions\ndef test_resolve_simple_dependency():\n    container = Container()\n    container.register(Engine, DieselEngine)\n    container.register(Car)\n\n    car_instance = container.resolve(Car)\n    assert isinstance(car_instance, Car)\n    assert isinstance(car_instance.engine, DieselEngine)", "\n\ndef test_resolve_unregistered_dependency():\n    container = Container()\n\n    with pytest.raises(ValueError):\n        container.resolve(Engine)\n\n\ndef test_resolve_base_class_dependency():\n    container = Container()\n    container.register(Engine, DieselEngine)\n    container.register(Car)\n\n    engine_instance = container.resolve(Engine)\n    assert isinstance(engine_instance, DieselEngine)", "\ndef test_resolve_base_class_dependency():\n    container = Container()\n    container.register(Engine, DieselEngine)\n    container.register(Car)\n\n    engine_instance = container.resolve(Engine)\n    assert isinstance(engine_instance, DieselEngine)\n", ""]}
{"filename": "tests/test_sqlite_person_repository.py", "chunked_list": ["import sqlite3\nfrom domain.person import Person\nfrom adapters.sqlite_person_repository import SQLitePersonRepository\nimport pytest\n\n\n@pytest.fixture\ndef connection():\n    conn = sqlite3.connect(\":memory:\")\n    yield conn\n    conn.close()", "\n\n@pytest.fixture\ndef repository(connection):\n    return SQLitePersonRepository(connection)\n\n\ndef test_add_person(repository):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n\n    retrieved_person = repository.get_by_id(person.id)\n    assert retrieved_person is not None\n    assert retrieved_person.name == person.name\n    assert retrieved_person.age == person.age", "\n\ndef test_update_person(repository):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n\n    person.name = \"Jane Doe\"\n    person.age = 28\n    repository.update(person)\n\n    updated_person = repository.get_by_id(person.id)\n    assert updated_person.name == \"Jane Doe\"\n    assert updated_person.age == 28", "\n\ndef test_delete_person(repository):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n    repository.delete(person.id)\n\n    deleted_person = repository.get_by_id(person.id)\n    assert deleted_person is None\n", "\n\ndef test_get_by_id_person_not_found(repository):\n    non_existent_person = repository.get_by_id(999)\n    assert non_existent_person is None\n"]}
{"filename": "tests/test_in_memory_order_repository.py", "chunked_list": ["from domain.order import Order\nfrom adapters.in_memory_order_repository import InMemoryOrderRepository\n\n\ndef test_in_memory_order_repository():\n    repo = InMemoryOrderRepository()\n    order1 = Order(id=1, person_id=1, order_date=\"2022-01-01\",\n                   total_amount=10.0)\n    order2 = Order(id=2, person_id=2, order_date=\"2022-01-02\",\n                   total_amount=20.0)\n\n    # Add orders\n    repo.add(order1)\n    repo.add(order2)\n\n    # Get order by id\n    assert repo.get_by_id(order1.id) == order1\n    assert repo.get_by_id(order2.id) == order2\n\n    # Update order\n    order1.total_amount = 15.0\n    repo.update(order1)\n    assert repo.get_by_id(order1.id).total_amount == 15.0\n\n    # Delete order\n    repo.delete(order2.id)\n    assert repo.get_by_id(order2.id) is None", ""]}
{"filename": "tests/test_sql_alchemy_person_repository.py", "chunked_list": ["import pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, declarative_base\n\nfrom domain.person import Person\nfrom adapters.sql_alchemy_person_repository import SQLAlchemyPersonRepository\nfrom adapters.sql_alchemy_mappers import create_tables_and_mappers\n\n\nBase = declarative_base()", "\nBase = declarative_base()\n\n\n@pytest.fixture(scope=\"module\")\ndef engine():\n    return create_engine(\"sqlite:///:memory:\")\n\n\n@pytest.fixture(scope=\"module\")\ndef connection(engine):\n    with engine.connect() as connection:\n        yield connection", "\n@pytest.fixture(scope=\"module\")\ndef connection(engine):\n    with engine.connect() as connection:\n        yield connection\n\n\n@pytest.fixture(scope=\"module\")\ndef session(engine, connection):\n    Session = sessionmaker(bind=engine)\n    create_tables_and_mappers(Base.metadata)\n    Base.metadata.create_all(bind=engine)\n    session = Session(bind=connection)\n    yield session\n    session.close()", "def session(engine, connection):\n    Session = sessionmaker(bind=engine)\n    create_tables_and_mappers(Base.metadata)\n    Base.metadata.create_all(bind=engine)\n    session = Session(bind=connection)\n    yield session\n    session.close()\n\n\n@pytest.fixture\ndef repository(session):\n    return SQLAlchemyPersonRepository(session)", "\n@pytest.fixture\ndef repository(session):\n    return SQLAlchemyPersonRepository(session)\n\n\ndef test_add_person(repository):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n\n    retrieved_person = repository.get_by_id(person.id)\n    assert retrieved_person is not None\n    assert retrieved_person.name == person.name\n    assert retrieved_person.age == person.age", "\n\ndef test_update_person(repository):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n\n    person.name = \"Jane Doe\"\n    person.age = 28\n    repository.update(person)\n\n    updated_person = repository.get_by_id(person.id)\n    assert updated_person.name == \"Jane Doe\"\n    assert updated_person.age == 28", "\n\ndef test_delete_person(repository, session):\n    person = Person(name=\"John Doe\", age=30)\n    repository.add(person)\n    repository.delete(person.id)\n    session.flush()\n\n    deleted_person = repository.get_by_id(person.id)\n    assert deleted_person is None", "\n\ndef test_get_by_id_person_not_found(repository):\n    non_existent_person = repository.get_by_id(999)\n    assert non_existent_person is None\n"]}
{"filename": "use_cases/unit_of_work.py", "chunked_list": ["from adapters.base_connection import BaseConnection\nfrom adapters.base_repository import BaseRepository\nfrom domain.order import Order\nfrom domain.person import Person\n\n\nclass UnitOfWork:\n    def __init__(self, connection: BaseConnection,\n                 person_repository: BaseRepository[Person],\n                 order_repository: BaseRepository[Order]):\n        self.persons = person_repository\n        self.orders = order_repository\n        self.connection = connection\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type:\n            self.rollback()\n        else:\n            self.commit()\n\n    def commit(self):\n        self.connection.commit()\n\n    def rollback(self):\n        self.connection.rollback()", ""]}
{"filename": "use_cases/create_person_and_order_use_case.py", "chunked_list": ["from typing import Tuple\n\nfrom domain.person import Person\nfrom domain.order import Order\nfrom use_cases.unit_of_work import UnitOfWork\n\n\nclass CreatePersonAndOrderUseCase:\n    def __init__(self, unit_of_work: UnitOfWork):\n        self.unit_of_work = unit_of_work\n\n    def execute(self, person: Person, order: Order) -> Tuple[Person, Order]:\n        with self.unit_of_work as uow:\n            uow.persons.add(person)\n\n            if person.id is not None:\n                order.person_id = int(person.id)\n            else:\n                raise ValueError(\"Person id cannot be None\")\n\n            uow.orders.add(order)\n\n        return person, order", ""]}
{"filename": "use_cases/__init__.py", "chunked_list": [""]}
{"filename": "custom_di/container.py", "chunked_list": ["import inspect\n\n\nclass Container:\n    def __init__(self):\n        self._registry = {}\n\n    def register(self, dependency_type, implementation=None):\n        if not implementation:\n            implementation = dependency_type\n\n        for base in inspect.getmro(implementation):\n            if base not in (object, dependency_type):\n                self._registry[base] = implementation\n\n        self._registry[dependency_type] = implementation\n\n    def resolve(self, dependency_type):\n        if dependency_type not in self._registry:\n            raise ValueError(f\"Dependency {dependency_type} not registered\")\n        implementation = self._registry[dependency_type]\n        constructor_signature = inspect.signature(implementation.__init__)\n        constructor_params = constructor_signature.parameters.values()\n\n        dependencies = [\n            self.resolve(param.annotation)\n            for param in constructor_params\n            if param.annotation is not inspect.Parameter.empty\n        ]\n\n        return implementation(*dependencies)", ""]}
{"filename": "custom_di/__init__.py", "chunked_list": [""]}
