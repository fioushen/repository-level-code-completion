{"filename": "speechai/__init__.py", "chunked_list": ["from speechai.core.speechai import SpeechAI\n"]}
{"filename": "speechai/utils/logger.py", "chunked_list": ["import logging\n\n\nclass Logger:\n    def __init__(self, logger_name=\"speech-ai\", level=logging.INFO):\n        self.logger = logging.getLogger(logger_name)\n        self.logger.setLevel(level)\n\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\"%(asctime)s [%(levelname)s] (%(name)s) - %(message)s\")\n        handler.setFormatter(formatter)\n\n        if not self.logger.handlers:\n            self.logger.addHandler(handler)\n\n    def get_logger(self):\n        return self.logger", "\n\nlogger = Logger().get_logger()\n"]}
{"filename": "speechai/utils/__init__.py", "chunked_list": ["from .directory import create_directory_from_path\n"]}
{"filename": "speechai/utils/directory.py", "chunked_list": ["import os\n\nfrom .logger import logger\n\n\ndef create_directory_from_path(filepath):\n    directory = os.path.dirname(filepath)\n    if not os.path.exists(directory):\n        try:\n            os.makedirs(directory)\n            logger.info(\"Directory '%s' created.\", directory)\n        except OSError as error:\n            logger.error(\"An error occurred while creating directory. Error details: %s\", error)", ""]}
{"filename": "speechai/llm/openai.py", "chunked_list": ["import openai\n\nfrom speechai.llm.abstract_llm import AbstractLLM\n\n\nclass OpenAI(AbstractLLM):\n    def __init__(self, api_key):\n        self.__client = openai\n        self.__client.api_key = api_key\n\n    def generate_text(self, prompt):\n        response = self.__client.Completion.create(\n            engine=\"text-davinci-003\", prompt=prompt, max_tokens=100  # Adjust as per your API version\n        )\n        return response.choices[0].text.strip()", ""]}
{"filename": "speechai/llm/abstract_llm.py", "chunked_list": ["from abc import ABC, abstractmethod\n\n\nclass AbstractLLM(ABC):\n    @abstractmethod\n    def generate_text(self, prompt: str):\n        pass\n"]}
{"filename": "speechai/llm/__init__.py", "chunked_list": ["from .abstract_llm import AbstractLLM\nfrom .cohere import Cohere\nfrom .openai import OpenAI\n"]}
{"filename": "speechai/llm/cohere.py", "chunked_list": ["import cohere\n\nfrom speechai.llm.abstract_llm import AbstractLLM\n\n\nclass Cohere(AbstractLLM):\n    def __init__(self, api_key):\n        self.__client = cohere.Client(api_key)\n\n    def generate_text(self, prompt):\n        response = self.__client.generate(model=\"command\", prompt=prompt, max_tokens=200, temperature=0.750)\n        return response.generations[0].text.strip()", ""]}
{"filename": "speechai/core/__init__.py", "chunked_list": [""]}
{"filename": "speechai/core/speechai.py", "chunked_list": ["from ..llm.abstract_llm import AbstractLLM\nfrom ..tts.abstract_tts import AbstractTTS\nfrom ..utils import create_directory_from_path\n\n\nclass SpeechAI:\n    __llm: AbstractLLM\n    __tts: AbstractTTS\n\n    def __init__(self, llm: AbstractLLM, tts: AbstractTTS):\n        self.set_llm(llm)\n        self.set_tts(tts)\n\n    def synthesize_dialog(self, prompt: str, save_to: str):\n        create_directory_from_path(save_to)\n        text = self.__llm.generate_text(prompt)\n        audio = self.__tts.text_to_speech(text, save_to)\n        return [text, audio]\n\n    def set_llm(self, llm: AbstractLLM):\n        self.__llm = llm\n\n    def set_tts(self, tts: AbstractTTS):\n        self.__tts = tts\n\n    def get_llm(self):\n        return self.__llm\n\n    def get_tts(self):\n        return self.__tts\n\n    def set_language(self, language_code: str):\n        self.__tts.set_language(language_code)", ""]}
{"filename": "speechai/tts/gtts.py", "chunked_list": ["from gtts import gTTS\nfrom gtts.tokenizer.pre_processors import abbreviations, end_of_line\n\nfrom speechai.tts.abstract_tts import AbstractTTS\n\n\nclass GTTS(AbstractTTS):\n    __language: str\n\n    def __init__(self, language_code=\"en\"):\n        self.set_language(language_code)\n\n    def text_to_speech(self, text: str, save_to: str):\n        tts = gTTS(text, lang=self.__language, pre_processor_funcs=[abbreviations, end_of_line])\n        tts.save(save_to)\n        return save_to\n\n    def get_language(self):\n        return self.__language\n\n    def set_language(self, language_code: str):\n        self.__language = language_code", ""]}
{"filename": "speechai/tts/__init__.py", "chunked_list": ["from .abstract_tts import AbstractTTS\nfrom .gtts import GTTS\n"]}
{"filename": "speechai/tts/abstract_tts.py", "chunked_list": ["from abc import ABC, abstractmethod\n\n\nclass AbstractTTS(ABC):\n    @abstractmethod\n    def text_to_speech(self, text: str, save_to: str):\n        pass\n\n    @abstractmethod\n    def set_language(self, language_code: str):\n        pass", ""]}
{"filename": "tests/utils/test_directory.py", "chunked_list": ["import pytest\n\nfrom speechai.utils import create_directory_from_path\n\n\n@pytest.fixture(name=\"mock_os\")\ndef fixture_mock_os(mocker):\n    mock = mocker.patch(\"speechai.utils.directory.os\", autospec=True)\n    return mock\n", "\n\n@pytest.fixture(name=\"mock_logger\")\ndef fixture_mock_logger(mocker):\n    return mocker.patch(\"speechai.utils.directory.logger\", autospec=True)\n\n\ndef test_create_directory_from_path_existing_directory(mock_os, mock_logger):\n    mock_os.path.dirname.return_value = \"/existing/directory\"\n    mock_os.path.exists.return_value = True\n\n    create_directory_from_path(\"/existing/directory/file.txt\")\n\n    mock_logger.info.assert_not_called()\n    mock_os.makedirs.assert_not_called()", "\n\ndef test_create_directory_from_path_new_directory(mock_os, mock_logger):\n    mock_os.path.dirname.return_value = \"/new/directory\"\n    mock_os.path.exists.return_value = False\n\n    create_directory_from_path(\"/new/directory/file.txt\")\n\n    mock_logger.info.assert_called_once_with(\"Directory '%s' created.\", \"/new/directory\")\n    mock_os.makedirs.assert_called_once_with(\"/new/directory\")", "\n\ndef test_create_directory_from_path_os_error(mock_os, mock_logger):\n    mock_os.path.dirname.return_value = \"/new/directory\"\n    mock_os.path.exists.return_value = False\n    mock_os.makedirs.side_effect = OSError(\"Test error\")\n\n    create_directory_from_path(\"/new/directory/file.txt\")\n\n    mock_logger.error.assert_called_once_with(\n        \"An error occurred while creating directory. Error details: %s\", mock_os.makedirs.side_effect\n    )\n    mock_os.makedirs.assert_called_once_with(\"/new/directory\")", ""]}
{"filename": "tests/llm/test_cohere.py", "chunked_list": ["from unittest.mock import Mock, PropertyMock\n\nimport pytest\n\nfrom speechai.llm import Cohere\n\n\n@pytest.fixture(name=\"cohere_api_key\")\ndef fixture_cohere_api_key():\n    return \"mock-api-key\"", "def fixture_cohere_api_key():\n    return \"mock-api-key\"\n\n\n@pytest.fixture(name=\"mock_cohere\")\ndef fixture_mock_cohere(mocker):\n    mock_cohere = mocker.patch(\"speechai.llm.cohere.cohere.Client\", autospec=True)\n    return mock_cohere\n\n\ndef test_cohere_llm_initialization(cohere_api_key, mock_cohere):\n    Cohere(cohere_api_key)\n    mock_cohere.assert_called_once_with(cohere_api_key)", "\n\ndef test_cohere_llm_initialization(cohere_api_key, mock_cohere):\n    Cohere(cohere_api_key)\n    mock_cohere.assert_called_once_with(cohere_api_key)\n\n\ndef test_cohere_llm_generate_text(cohere_api_key, mock_cohere):\n    cohere_llm = Cohere(cohere_api_key)\n\n    prompt = \"Hello\"\n    mock_generation = Mock()\n    type(mock_generation).text = PropertyMock(return_value=\" Hello, World! \")\n    mock_response = Mock()\n    type(mock_response).generations = PropertyMock(return_value=[mock_generation])\n\n    mock_cohere.return_value.generate.return_value = mock_response\n\n    assert cohere_llm.generate_text(prompt) == \"Hello, World!\"\n    mock_cohere.return_value.generate.assert_called_once_with(\n        model=\"command\", prompt=prompt, max_tokens=200, temperature=0.750\n    )", ""]}
{"filename": "tests/llm/test_openai.py", "chunked_list": ["from unittest.mock import Mock, PropertyMock\n\nimport pytest\n\nfrom speechai.llm import OpenAI\n\n\n@pytest.fixture(name=\"openai_api_key\")\ndef fixture_openai_api_key():\n    return \"mock-api-key\"", "def fixture_openai_api_key():\n    return \"mock-api-key\"\n\n\n@pytest.fixture(name=\"mock_openai\")\ndef fixture_mock_openai(mocker):\n    mock_openai = mocker.patch(\"speechai.llm.openai.openai\", autospec=True)\n    return mock_openai\n\n\ndef test_openai_llm_initialization(openai_api_key, mock_openai):\n    OpenAI(openai_api_key)\n    assert mock_openai.api_key == openai_api_key", "\n\ndef test_openai_llm_initialization(openai_api_key, mock_openai):\n    OpenAI(openai_api_key)\n    assert mock_openai.api_key == openai_api_key\n\n\ndef test_openai_llm_generate_text(openai_api_key, mock_openai):\n    openai_llm = OpenAI(openai_api_key)\n\n    prompt = \"Hello\"\n    mock_choice = Mock()\n    type(mock_choice).text = PropertyMock(return_value=\" Hello, World! \")\n    mock_response = Mock()\n    type(mock_response).choices = PropertyMock(return_value=[mock_choice])\n\n    mock_openai.Completion.create.return_value = mock_response\n\n    assert openai_llm.generate_text(prompt) == \"Hello, World!\"\n    mock_openai.Completion.create.assert_called_once_with(engine=\"text-davinci-003\", prompt=prompt, max_tokens=100)", ""]}
{"filename": "tests/core/test_speechai.py", "chunked_list": ["from unittest.mock import Mock\n\nimport pytest\n\nfrom speechai import SpeechAI\nfrom speechai.llm import AbstractLLM\nfrom speechai.tts import AbstractTTS\n\n\n@pytest.fixture(name=\"mock_llm\")\ndef fixture_mock_llm():\n    return Mock(spec=AbstractLLM)", "\n@pytest.fixture(name=\"mock_llm\")\ndef fixture_mock_llm():\n    return Mock(spec=AbstractLLM)\n\n\n@pytest.fixture(name=\"mock_tts\")\ndef fixture_mock_tts():\n    return Mock(spec=AbstractTTS)\n", "\n\n@pytest.fixture(name=\"mock_create_directory_from_path\")\ndef fixture_mock_create_directory_from_path(mocker):\n    return mocker.patch(\"speechai.core.speechai.create_directory_from_path\", autospec=True)\n\n\n@pytest.fixture(name=\"speech_ai\")\ndef fixture_speech_ai(mock_llm, mock_tts):\n    return SpeechAI(mock_llm, mock_tts)", "def fixture_speech_ai(mock_llm, mock_tts):\n    return SpeechAI(mock_llm, mock_tts)\n\n\ndef test_speech_ai_initialization(speech_ai, mock_llm, mock_tts):\n    assert speech_ai.get_llm() == mock_llm\n    assert speech_ai.get_tts() == mock_tts\n\n\ndef test_speech_ai_synthesize_dialog(speech_ai, mock_create_directory_from_path):\n    prompt = \"Hello\"\n    save_to = \"/path/to/save\"\n    text = \"Generated Text\"\n    audio = b\"Audio Bytes\"\n\n    speech_ai.get_llm().generate_text.return_value = text\n    speech_ai.get_tts().text_to_speech.return_value = audio\n\n    assert speech_ai.synthesize_dialog(prompt, save_to) == [text, audio]\n    mock_create_directory_from_path.assert_called_once_with(save_to)\n    speech_ai.get_llm().generate_text.assert_called_once_with(prompt)\n    speech_ai.get_tts().text_to_speech.assert_called_once_with(text, save_to)", "\ndef test_speech_ai_synthesize_dialog(speech_ai, mock_create_directory_from_path):\n    prompt = \"Hello\"\n    save_to = \"/path/to/save\"\n    text = \"Generated Text\"\n    audio = b\"Audio Bytes\"\n\n    speech_ai.get_llm().generate_text.return_value = text\n    speech_ai.get_tts().text_to_speech.return_value = audio\n\n    assert speech_ai.synthesize_dialog(prompt, save_to) == [text, audio]\n    mock_create_directory_from_path.assert_called_once_with(save_to)\n    speech_ai.get_llm().generate_text.assert_called_once_with(prompt)\n    speech_ai.get_tts().text_to_speech.assert_called_once_with(text, save_to)", "\n\ndef test_speech_ai_set_llm(speech_ai):\n    new_llm = Mock(spec=AbstractLLM)\n    speech_ai.set_llm(new_llm)\n    assert speech_ai.get_llm() == new_llm\n\n\ndef test_speech_ai_set_tts(speech_ai):\n    new_tts = Mock(spec=AbstractTTS)\n    speech_ai.set_tts(new_tts)\n    assert speech_ai.get_tts() == new_tts", "def test_speech_ai_set_tts(speech_ai):\n    new_tts = Mock(spec=AbstractTTS)\n    speech_ai.set_tts(new_tts)\n    assert speech_ai.get_tts() == new_tts\n\n\ndef test_speech_ai_set_language(speech_ai, mock_tts):\n    language_code = \"en\"\n    speech_ai.set_language(language_code)\n    mock_tts.set_language.assert_called_once_with(language_code)", ""]}
{"filename": "tests/tts/test_gtts.py", "chunked_list": ["from unittest.mock import Mock\n\nimport pytest\nfrom gtts.tokenizer.pre_processors import abbreviations, end_of_line\n\nfrom speechai.tts.gtts import GTTS\n\n\n@pytest.fixture(name=\"mock_gtts\")\ndef fixture_mock_gtts(mocker):\n    return mocker.patch(\"speechai.tts.gtts.gTTS\", autospec=True)", "@pytest.fixture(name=\"mock_gtts\")\ndef fixture_mock_gtts(mocker):\n    return mocker.patch(\"speechai.tts.gtts.gTTS\", autospec=True)\n\n\ndef test_gtts_initialization():\n    gtts = GTTS()\n    assert gtts.get_language() == \"en\"\n\n\ndef test_gtts_text_to_speech(mock_gtts):\n    gtts = GTTS()\n\n    text = \"Hello\"\n    save_to = \"/path/to/save\"\n    mock_tts_instance = Mock()\n    mock_gtts.return_value = mock_tts_instance\n\n    assert gtts.text_to_speech(text, save_to) == save_to\n    mock_gtts.assert_called_once_with(text, lang=gtts.get_language(), pre_processor_funcs=[abbreviations, end_of_line])\n    mock_tts_instance.save.assert_called_once_with(save_to)", "\n\ndef test_gtts_text_to_speech(mock_gtts):\n    gtts = GTTS()\n\n    text = \"Hello\"\n    save_to = \"/path/to/save\"\n    mock_tts_instance = Mock()\n    mock_gtts.return_value = mock_tts_instance\n\n    assert gtts.text_to_speech(text, save_to) == save_to\n    mock_gtts.assert_called_once_with(text, lang=gtts.get_language(), pre_processor_funcs=[abbreviations, end_of_line])\n    mock_tts_instance.save.assert_called_once_with(save_to)", "\n\ndef test_gtts_set_language():\n    gtts = GTTS()\n    language_code = \"es\"\n    gtts.set_language(language_code)\n    assert gtts.get_language() == language_code\n"]}
{"filename": "examples/openai_example.py", "chunked_list": ["import os\n\nfrom dotenv import load_dotenv\n\nfrom speechai import SpeechAI\nfrom speechai.llm import OpenAI\nfrom speechai.tts import GTTS\n\nload_dotenv()\napi_key = os.getenv(\"OPENAI-KEY\")", "load_dotenv()\napi_key = os.getenv(\"OPENAI-KEY\")\n\nopenai = OpenAI(api_key)\ntts = GTTS(language_code=\"en\")\nsa = SpeechAI(openai, tts)\n\nsa.synthesize_dialog(\"What is the average height of giraffe?\", \"./output/giraffe-openai-en.mp3\")\n[text, audio] = sa.synthesize_dialog(\"Which is the fastest animal on earth?\", \"./output/fastest-openai-en.mp3\")\nprint(text, audio)", "[text, audio] = sa.synthesize_dialog(\"Which is the fastest animal on earth?\", \"./output/fastest-openai-en.mp3\")\nprint(text, audio)\n"]}
{"filename": "examples/cohere_example.py", "chunked_list": ["import os\n\nfrom dotenv import load_dotenv\n\nfrom speechai import SpeechAI\nfrom speechai.llm import Cohere\nfrom speechai.tts import GTTS\n\nload_dotenv()\napi_key = os.getenv(\"COHERE-KEY\")", "load_dotenv()\napi_key = os.getenv(\"COHERE-KEY\")\n\ncohere = Cohere(api_key)\ntts = GTTS(language_code=\"it\")\nsa = SpeechAI(cohere, tts)\n\nsa.synthesize_dialog(\"Quanto sono alte le giraffe in media?\", \"./output/giraffe-cohere-it.mp3\")\n[text, audio] = sa.synthesize_dialog(\"Quale \u00e8 l'animale pi\u00f9 veloce sulla terra?\", \"./output/fastest-cohere-it.mp3\")\nprint(text, audio)", "[text, audio] = sa.synthesize_dialog(\"Quale \u00e8 l'animale pi\u00f9 veloce sulla terra?\", \"./output/fastest-cohere-it.mp3\")\nprint(text, audio)\n"]}
