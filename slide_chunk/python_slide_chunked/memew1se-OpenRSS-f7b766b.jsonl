{"filename": "api/__init__.py", "chunked_list": [""]}
{"filename": "api/manage.py", "chunked_list": ["#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)", "\n\nif __name__ == \"__main__\":\n    main()\n"]}
{"filename": "api/config/urls.py", "chunked_list": ["\"\"\"config URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home", "Class-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import include, path\n", "from django.urls import include, path\n\nurlpatterns = [\n    path(\"api/admin/\", admin.site.urls),\n    path(\"api/\", include(\"apps.rss.urls\")),\n]\n"]}
{"filename": "api/config/__init__.py", "chunked_list": [""]}
{"filename": "api/config/shared.py", "chunked_list": ["from typing import Optional\n\nfrom aiohttp import ClientSession\n\nAIOHTTP_SESSION: Optional[ClientSession] = None\n"]}
{"filename": "api/config/asgi.py", "chunked_list": ["\"\"\"\nASGI config for config project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/howto/deployment/asgi/\n\"\"\"\n\nimport os", "\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n\napplication = get_asgi_application()\n", ""]}
{"filename": "api/config/wsgi.py", "chunked_list": ["\"\"\"\nWSGI config for config project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os", "\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\n\napplication = get_wsgi_application()\n", ""]}
{"filename": "api/config/settings/base.py", "chunked_list": ["\"\"\"\nDjango settings for config project.\n\nGenerated by 'django-admin startproject' using Django 4.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/", "For the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom aiohttp import ClientSession\nfrom dotenv import load_dotenv\n\nfrom .. import shared", "\nfrom .. import shared\n\nload_dotenv()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/", "# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\", \"secret\")\n\n# Application definition\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",", "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # 3rd-party apps\n    \"rest_framework\",\n    \"adrf\",", "    \"rest_framework\",\n    \"adrf\",\n    # Local apps\n    \"apps.rss.apps.RssConfig\",\n]\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",", "    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n\nROOT_URLCONF = \"config.urls\"\n", "ROOT_URLCONF = \"config.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",", "            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n", "]\n\nWSGI_APPLICATION = \"config.wsgi.application\"\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",", "    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"OPTIONS\": {\"options\": f\"-c search_path={os.environ.get('DB_SCHEMA')},public\"},\n        \"NAME\": os.environ.get(\"DB_NAME\", \"database\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"password\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", 5432),\n    }\n}", "    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },", "        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",", "    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = \"en-us\"\n", "LANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/", "# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_ROOT = os.path.join(BASE_DIR, \"assets/static\")\nSTATIC_URL = \"/api/static/\"\n\nMEDIA_ROOT = os.path.join(BASE_DIR, \"assets/media\")\nMEDIA_URL = \"/api/media/\"\n\n# Default primary key field type", "\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\nshared.AIOHTTP_SESSION = ClientSession()\n\nCACHES = {\n    \"default\": {", "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": os.environ.get(\"REDIS_URL\", \"redis://redis:6379\"),\n    }\n}\n"]}
{"filename": "api/config/settings/production.py", "chunked_list": ["from .base import *  # noqa\n\nDEBUG = False\n\n# TODO: change this in prod\nALLOWED_HOSTS = (\"<hostname>\",)\n\nCACHE_MIDDLEWARE_ALIAS = \"default\"\nCACHE_MIDDLEWARE_SECONDS = 60 * 60\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"", "CACHE_MIDDLEWARE_SECONDS = 60 * 60\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\n\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": (\"rest_framework.renderers.JSONRenderer\",)\n}\n"]}
{"filename": "api/config/settings/local.py", "chunked_list": ["from .base import *  # noqa\n\nDEBUG = True\n\nALLOWED_HOSTS = [\"*\"]\nCSRF_TRUSTED_ORIGINS = [\"http://localhost\"]\n\nCACHE_MIDDLEWARE_ALIAS = \"default\"\nCACHE_MIDDLEWARE_SECONDS = 5\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"", "CACHE_MIDDLEWARE_SECONDS = 5\nCACHE_MIDDLEWARE_KEY_PREFIX = \"\"\n\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": (\n        # \"rest_framework.renderers.BrowsableAPIRenderer\",\n        \"rest_framework.renderers.JSONRenderer\",\n    )\n}\n", "}\n"]}
{"filename": "api/config/settings/__init__.py", "chunked_list": [""]}
{"filename": "api/config/settings/test.py", "chunked_list": ["from .base import *  # noqa\n\nDEBUG = True\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # noqa F405\n    }\n}", "    }\n}\n\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.dummy.DummyCache\",\n    }\n}\n\nPASSWORD_HASHERS = (\"django.contrib.auth.hashers.MD5PasswordHasher\",)", "\nPASSWORD_HASHERS = (\"django.contrib.auth.hashers.MD5PasswordHasher\",)\n"]}
{"filename": "api/apps/__init__.py", "chunked_list": [""]}
{"filename": "api/apps/rss/models.py", "chunked_list": ["from django.db import models\n\n\nclass Feed(models.Model):\n    id = models.BigAutoField(primary_key=True)\n    title = models.CharField(\n        max_length=512, verbose_name=\"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\", help_text=\"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a RSS-\u043a\u0430\u043d\u0430\u043b\u0430\"\n    )\n    url = models.URLField(verbose_name=\"\u0421\u0441\u044b\u043b\u043a\u0430\", help_text=\"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 RSS\")\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.title", "\n\nclass MainFeed(Feed):\n    slug = models.SlugField(\n        unique=True, verbose_name=\"\u0421\u043b\u0430\u0433\", help_text=\"\u0421\u043b\u0430\u0433 RSS-\u043a\u0430\u043d\u0430\u043b\u0430\"\n    )\n\n    class Meta:\n        verbose_name = \"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 RSS-\u043a\u0430\u043d\u0430\u043b\"\n        verbose_name_plural = \"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 RSS-\u043a\u0430\u043d\u0430\u043b\u044b\"", ""]}
{"filename": "api/apps/rss/urls.py", "chunked_list": ["from django.urls import re_path\n\nfrom .views import MainFeedListView, MainFeedRetrieveView\n\nurlpatterns = (\n    re_path(r\"^main-feed/?$\", MainFeedListView.as_view(), name=\"rss-main-feed-list\"),\n    re_path(\n        r\"^main-feed/(?P<slug>[\\w-]+)/?$\",\n        MainFeedRetrieveView.as_view(),\n        name=\"rss-main-feed-retrieve\",", "        MainFeedRetrieveView.as_view(),\n        name=\"rss-main-feed-retrieve\",\n    ),\n)\n"]}
{"filename": "api/apps/rss/views.py", "chunked_list": ["import datetime\n\nimport feedparser\nfrom adrf.views import APIView as AsyncAPIView\nfrom django.core.cache import cache\nfrom feedparser import FeedParserDict\nfrom rest_framework.request import Request\nfrom rest_framework.response import Response\n\nfrom config import shared", "\nfrom config import shared\n\nfrom .models import MainFeed\n\n\nclass MainFeedListView(AsyncAPIView):\n    async def get(self, request: Request) -> Response:\n        mf = MainFeed.objects.aiterator()\n        data = [\n            {\"id\": feed.id, \"slug\": feed.slug, \"title\": feed.title, \"url\": feed.url}\n            async for feed in mf\n        ]\n        return Response(data)", "\n\nclass MainFeedRetrieveView(AsyncAPIView):\n    async def get(self, request: Request, **kwargs: dict):\n        # getting parameters\n        slug = kwargs[\"slug\"]\n        date = datetime.datetime.now()\n        minutes_quart = date.minute // 15\n\n        # getting cache\n        feed_key = f\"{slug}-{date.strftime('%d-%m-%Y-%H')}-{minutes_quart}\"\n        cached_rss = await cache.aget(feed_key)\n\n        if cached_rss:\n            return Response(cached_rss)\n        else:\n            # getting and parsing feed\n            feed = await MainFeed.objects.aget(slug=slug)\n            async with shared.AIOHTTP_SESSION.get(feed.url) as resp:\n                text = await resp.text()\n            fd: FeedParserDict = feedparser.parse(text)\n            rss = {\"channel\": fd.channel, \"entries\": fd.entries}\n\n            # setting cache\n            cache_time = 15 * 60 - (date.minute % 15 * 60 + date.second)\n            await cache.aset(feed_key, rss, cache_time)\n\n            return Response(rss)", ""]}
{"filename": "api/apps/rss/__init__.py", "chunked_list": [""]}
{"filename": "api/apps/rss/apps.py", "chunked_list": ["from django.apps import AppConfig\n\n\nclass RssConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.rss\"\n"]}
{"filename": "api/apps/rss/admin.py", "chunked_list": ["from django.contrib import admin\n\nfrom apps.rss.models import MainFeed\n\nadmin.site.register(MainFeed)\n"]}
{"filename": "api/apps/rss/migrations/0001_initial.py", "chunked_list": ["# Generated by Django 4.2 on 2023-04-19 08:26\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name=\"MainFeed\",\n            fields=[\n                (\"id\", models.BigAutoField(primary_key=True, serialize=False)),\n                (\n                    \"title\",\n                    models.CharField(\n                        help_text=\"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a RSS-\u043a\u0430\u043d\u0430\u043b\u0430\",\n                        max_length=512,\n                        verbose_name=\"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\",\n                    ),\n                ),\n                (\n                    \"url\",\n                    models.URLField(help_text=\"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 RSS\", verbose_name=\"\u0421\u0441\u044b\u043b\u043a\u0430\"),\n                ),\n                (\n                    \"slug\",\n                    models.SlugField(help_text=\"\u0421\u043b\u0430\u0433 RSS-\u043a\u0430\u043d\u0430\u043b\u0430\", verbose_name=\"\u0421\u043b\u0430\u0433\"),\n                ),\n            ],\n            options={\n                \"verbose_name\": \"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 RSS-\u043a\u0430\u043d\u0430\u043b\",\n                \"verbose_name_plural\": \"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 RSS-\u043a\u0430\u043d\u0430\u043b\u044b\",\n            },\n        ),\n    ]", ""]}
{"filename": "api/apps/rss/migrations/__init__.py", "chunked_list": [""]}
{"filename": "api/apps/rss/migrations/0002_alter_mainfeed_slug.py", "chunked_list": ["# Generated by Django 4.2 on 2023-04-19 08:35\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"rss\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"mainfeed\",\n            name=\"slug\",\n            field=models.SlugField(\n                help_text=\"\u0421\u043b\u0430\u0433 RSS-\u043a\u0430\u043d\u0430\u043b\u0430\", unique=True, verbose_name=\"\u0421\u043b\u0430\u0433\"\n            ),\n        ),\n    ]", ""]}
