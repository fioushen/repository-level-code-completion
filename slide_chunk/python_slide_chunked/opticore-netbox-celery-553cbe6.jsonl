{"filename": "tasks.py", "chunked_list": ["\"\"\"Invoke tasks.\"\"\"\nimport os\n\nfrom distutils.util import strtobool\nfrom invoke import Collection, task as invoke_task\n\n\nNETBOX_VERSION = \"v3.5.4\"\n\nnamespace = Collection(\"netbox\")", "\nnamespace = Collection(\"netbox\")\nnamespace.configure(\n    {\n        \"netbox\": {\n            \"project_name\": \"netbox-celery\",\n            \"python_ver\": \"3.9\",\n            \"local\": bool(strtobool(os.environ.get(\"INVOKE_NETBOX_LOCAL\", \"false\"))),\n            \"compose_dir\": os.path.join(os.path.dirname(__file__), \"docker/\"),\n            \"local_compose_files\": [", "            \"compose_dir\": os.path.join(os.path.dirname(__file__), \"docker/\"),\n            \"local_compose_files\": [\n                \"docker-compose.local.yml\",\n            ],\n            \"dev_compose_files\": [\n                \"docker-compose.yml\",\n                \"docker-compose.dev.yml\",\n            ],\n            \"prod_compose_files\": [\n                \"docker-compose.yml\",", "            \"prod_compose_files\": [\n                \"docker-compose.yml\",\n                \"docker-compose.prod.yml\",\n            ],\n        }\n    }\n)\n\n\ndef is_truthy(arg):\n    \"\"\"Convert \"truthy\" strings into Booleans.\n\n    Examples:\n        >>> is_truthy('yes')\n        True\n    Args:\n        arg (str): Truthy string (True values are y, yes, t, true, on and 1; false values are n, no,\n        f, false, off and 0. Raises ValueError if val is anything else.\n    \"\"\"\n    if isinstance(arg, bool):\n        return arg\n    return bool(strtobool(arg))", "\ndef is_truthy(arg):\n    \"\"\"Convert \"truthy\" strings into Booleans.\n\n    Examples:\n        >>> is_truthy('yes')\n        True\n    Args:\n        arg (str): Truthy string (True values are y, yes, t, true, on and 1; false values are n, no,\n        f, false, off and 0. Raises ValueError if val is anything else.\n    \"\"\"\n    if isinstance(arg, bool):\n        return arg\n    return bool(strtobool(arg))", "\n\ndef task(function=None, *args, **kwargs):\n    \"\"\"Task decorator to override the default Invoke task decorator.\"\"\"\n\n    def task_wrapper(function=None):\n        \"\"\"Wrapper around invoke.task to add the task to the namespace as well.\"\"\"\n        if args or kwargs:\n            task_func = invoke_task(*args, **kwargs)(function)\n        else:\n            task_func = invoke_task(function)\n        namespace.add_task(task_func)\n        return task_func\n\n    if function:\n        # The decorator was called with no arguments\n        return task_wrapper(function)\n    # The decorator was called with arguments\n    return task_wrapper", "\n\ndef docker_compose(context, command, target=\"dev\", **kwargs):\n    \"\"\"Helper function for running a specific docker compose command with all appropriate parameters and environment.\n\n    Args:\n        context (obj): Used to run specific commands\n        command (str): Command string to append to the \"docker compose ...\" command, such as \"build\", \"up\", etc.\n        **kwargs: Passed through to the context.run() call.\n    \"\"\"\n    compose_command = f'docker compose --project-name {context.netbox.project_name} --project-directory \"{context.netbox.compose_dir}\"'\n\n    for compose_file in getattr(context.netbox, f\"{target}_compose_files\"):\n        compose_file_path = os.path.join(context.netbox.compose_dir, compose_file)\n        compose_command += f' -f \"{compose_file_path}\"'\n\n    compose_command += f\" {command}\"\n\n    # If `service` was passed as a kwarg, add it to the end.\n    service = kwargs.pop(\"service\", None)\n    if service is not None:\n        compose_command += f\" {service}\"\n\n    print(f'Running docker compose command \"{command}\"')\n\n    return context.run(\n        compose_command,\n        env={\"PYTHON_VER\": context.netbox.python_ver},\n        **kwargs,\n    )", "\n\ndef run_cmd(context, command, **kwargs):\n    \"\"\"Run a command locally or inside container.\"\"\"\n    if is_truthy(context.netbox.local):\n        context.run(command, pty=True, **kwargs)\n    else:\n        # Check if netbox is running; no need to start another netbox container to run a command\n        docker_compose_status = \"ps --services --filter status=running\"\n        results = docker_compose(context, docker_compose_status, hide=\"out\")\n        if \"netbox\" in results.stdout:\n            compose_command = f\"exec netbox {command}\"\n        else:\n            compose_command = f\"run --entrypoint '{command}' netbox\"\n        docker_compose(context, compose_command, pty=True)", "\n\n@task(help={\"container\": \"Name of the container to shell into\"})\ndef cli(context, container=\"netbox\"):\n    \"\"\"Launch a bash shell inside the running netbox container.\"\"\"\n    docker_compose(context, f\"exec {container} bash\", pty=True)\n\n\n@task(\n    help={", "@task(\n    help={\n        \"user\": \"Name of the superuser to create. (Default: admin)\",\n    }\n)\ndef createsuperuser(context, user=\"admin\"):\n    \"\"\"Create a new netbox superuser account (default: \"admin\"), will prompt for password.\"\"\"\n    command = \"python manage.py createsuperuser --username admin\"\n    run_cmd(context, command)\n", "\n\n@task(\n    help={\n        \"force_rm\": \"Always remove intermediate containers.\",\n        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n    }\n)\ndef build(\n    context,\n    force_rm=False,\n    cache=True,\n    target=\"dev\",\n    image_name=\"netbox\",\n    tag=\"latest\",\n):\n    \"\"\"Build netbox docker image.\"\"\"\n    command = f\"build --build-arg PYTHON_VER={context.netbox.python_ver}\"\n\n    if not cache:\n        command += \" --no-cache\"\n    if force_rm:\n        command += \" --force-rm\"\n\n    print(f\"Building netbox with Python {context.netbox.python_ver}...\")\n    docker_compose(context, command, target=target)", "def build(\n    context,\n    force_rm=False,\n    cache=True,\n    target=\"dev\",\n    image_name=\"netbox\",\n    tag=\"latest\",\n):\n    \"\"\"Build netbox docker image.\"\"\"\n    command = f\"build --build-arg PYTHON_VER={context.netbox.python_ver}\"\n\n    if not cache:\n        command += \" --no-cache\"\n    if force_rm:\n        command += \" --force-rm\"\n\n    print(f\"Building netbox with Python {context.netbox.python_ver}...\")\n    docker_compose(context, command, target=target)", "\n\n@task(\n    help={\n        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n        \"cache_dir\": \"Directory to use for caching buildx output. (Default: /home/travis/.cache/docker)\",\n        \"platforms\": \"Comma-separated list of strings for which to build. (Default: linux/amd64)\",\n        \"target\": \"Build target from the Dockerfile. (Default: dev)\",\n    }\n)\ndef buildx(\n    context,\n    cache=False,\n    cache_dir=\"\",\n    platforms=\"linux/amd64\",\n    target=\"dev\",\n    image_name=\"netbox\",\n):\n    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n    command = f\"docker buildx build --tag {image_name} --platform {platforms} --load -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n    if not cache:\n        command += \" --no-cache\"\n    else:\n        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\n    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})", "    }\n)\ndef buildx(\n    context,\n    cache=False,\n    cache_dir=\"\",\n    platforms=\"linux/amd64\",\n    target=\"dev\",\n    image_name=\"netbox\",\n):\n    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n    command = f\"docker buildx build --tag {image_name} --platform {platforms} --load -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n    if not cache:\n        command += \" --no-cache\"\n    else:\n        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\n    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})", "\n\n@task(\n    help={\n        \"cache\": \"Whether to use Docker's cache when building the image. (Default: enabled)\",\n        \"cache_dir\": \"Directory to use for caching buildx output. (Default: /home/travis/.cache/docker)\",\n        \"platforms\": \"Comma-separated list of strings for which to build. (Default: linux/amd64)\",\n        \"target\": \"Build target from the Dockerfile. (Default: dev)\",\n    }\n)\ndef docker_build(\n    context,\n    cache=False,\n    cache_dir=\"\",\n    platforms=\"linux/amd64\",\n    target=\"dev\",\n    image_name=\"netbox\",\n):\n    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n    command = f\"docker build --tag {image_name} --platform {platforms} --target {target} -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n    if not cache:\n        command += \" --no-cache\"\n    else:\n        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\n    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})", "    }\n)\ndef docker_build(\n    context,\n    cache=False,\n    cache_dir=\"\",\n    platforms=\"linux/amd64\",\n    target=\"dev\",\n    image_name=\"netbox\",\n):\n    \"\"\"Build netbox docker image using the experimental buildx docker functionality (multi-arch capablility).\"\"\"\n    print(f\"Building netbox with Python {context.netbox.python_ver} for {platforms}...\")\n    command = f\"docker build --tag {image_name} --platform {platforms} --target {target} -f ./docker/Dockerfile --build-arg PYTHON_VER={context.netbox.python_ver} .\"\n    if not cache:\n        command += \" --no-cache\"\n    else:\n        command += f\" --cache-to type=local,dest={cache_dir}/{context.netbox.python_ver} --cache-from type=local,src={cache_dir}/{context.netbox.python_ver}\"\n\n    context.run(command, env={\"PYTHON_VER\": context.netbox.python_ver})", "\n\n@task(help={\"service\": \"If specified, only affect this service.\"})\ndef debug(context, service=None, target=\"dev\"):\n    \"\"\"Start netbox and its dependencies in debug mode.\"\"\"\n    print(\"Starting netbox in debug mode...\")\n    docker_compose(context, \"up\", service=service, target=target)\n\n\n@task(help={\"service\": \"If specified, only affect this service.\"})\ndef start(context, service=None, target=\"dev\"):\n    \"\"\"Start netbox and its dependencies in detached mode.\"\"\"\n    print(\"Starting netbox in detached mode...\")\n    docker_compose(context, \"up --detach\", service=service, target=target)", "\n@task(help={\"service\": \"If specified, only affect this service.\"})\ndef start(context, service=None, target=\"dev\"):\n    \"\"\"Start netbox and its dependencies in detached mode.\"\"\"\n    print(\"Starting netbox in detached mode...\")\n    docker_compose(context, \"up --detach\", service=service, target=target)\n\n\n@task(help={\"service\": \"If specified, only affect this service.\"})\ndef restart(context, service=None, target=\"dev\"):\n    \"\"\"Gracefully restart containers.\"\"\"\n    print(\"Restarting netbox...\")\n    docker_compose(context, \"restart\", service=service, target=target)", "@task(help={\"service\": \"If specified, only affect this service.\"})\ndef restart(context, service=None, target=\"dev\"):\n    \"\"\"Gracefully restart containers.\"\"\"\n    print(\"Restarting netbox...\")\n    docker_compose(context, \"restart\", service=service, target=target)\n\n\n@task(help={\"service\": \"If specified, only affect this service.\"})\ndef stop(context, service=None, target=\"dev\"):\n    \"\"\"Stop netbox and its dependencies.\"\"\"\n    print(\"Stopping netbox...\")\n    if not service:\n        docker_compose(context, \"down\", target=target)\n    else:\n        docker_compose(context, \"stop\", service=service, target=target)", "def stop(context, service=None, target=\"dev\"):\n    \"\"\"Stop netbox and its dependencies.\"\"\"\n    print(\"Stopping netbox...\")\n    if not service:\n        docker_compose(context, \"down\", target=target)\n    else:\n        docker_compose(context, \"stop\", service=service, target=target)\n\n\n@task\ndef destroy(context, target=\"dev\"):\n    \"\"\"Destroy all containers and volumes.\"\"\"\n    print(\"Destroying netbox...\")\n    docker_compose(context, \"down --volumes\", target=target)", "\n@task\ndef destroy(context, target=\"dev\"):\n    \"\"\"Destroy all containers and volumes.\"\"\"\n    print(\"Destroying netbox...\")\n    docker_compose(context, \"down --volumes\", target=target)\n\n\n@task\ndef build_local_env(context):\n    \"\"\"Build local environment for development.\"\"\"\n    print(\"Building local environment...\")\n\n    context.run(\"rm -rf netbox\")\n    context.run(\"mkdir netbox\")\n    context.run(\n        f\"curl -L https://codeload.github.com/netbox-community/netbox/tar.gz/refs/tags/{NETBOX_VERSION} | tar -xz --strip=1 -C ./netbox\"\n    )\n    context.run(\"pip install -r ./netbox/requirements.txt\")\n    context.run(\"poetry install\")\n    if not os.path.isfile(\"./docker/configuration/configuration.py\"):\n        context.run(\n            \"cp $(pwd)/docker/configuration/configuration.example.py $(pwd)/docker/configuration/configuration.py\"\n        )\n    if not os.path.islink(\"./netbox/netbox/netbox/configuration.py\"):\n        context.run(\"rm -f $(pwd)/netbox/netbox/netbox/configuration.py\")\n        context.run(\"ln -s $(pwd)/docker/configuration/configuration.py $(pwd)/netbox/netbox/netbox/\")\n    print(\"To run with containerized db use `invoke debug --target=local` before starting Django process.\")", "@task\ndef build_local_env(context):\n    \"\"\"Build local environment for development.\"\"\"\n    print(\"Building local environment...\")\n\n    context.run(\"rm -rf netbox\")\n    context.run(\"mkdir netbox\")\n    context.run(\n        f\"curl -L https://codeload.github.com/netbox-community/netbox/tar.gz/refs/tags/{NETBOX_VERSION} | tar -xz --strip=1 -C ./netbox\"\n    )\n    context.run(\"pip install -r ./netbox/requirements.txt\")\n    context.run(\"poetry install\")\n    if not os.path.isfile(\"./docker/configuration/configuration.py\"):\n        context.run(\n            \"cp $(pwd)/docker/configuration/configuration.example.py $(pwd)/docker/configuration/configuration.py\"\n        )\n    if not os.path.islink(\"./netbox/netbox/netbox/configuration.py\"):\n        context.run(\"rm -f $(pwd)/netbox/netbox/netbox/configuration.py\")\n        context.run(\"ln -s $(pwd)/docker/configuration/configuration.py $(pwd)/netbox/netbox/netbox/\")\n    print(\"To run with containerized db use `invoke debug --target=local` before starting Django process.\")", "\n\n@task\ndef manage(context, command, target=\"dev\"):\n    \"\"\"Run a Django management command.\"\"\"\n    print(f\"Running Django management command: {command}\")\n    docker_compose(context, f\"run --rm netbox python3 ./manage.py {command}\", target=target)\n\n\n@task(help={\"name\": \"Use this name for migration file(s). If unspecified, a name will be generated.\"})\ndef makemigrations(context, name=\"\"):\n    \"\"\"Perform makemigrations operation in Django.\"\"\"\n    command = \"python manage.py makemigrations\"\n\n    if name:\n        command += f\" --name {name}\"\n\n    run_cmd(context, command)", "\n@task(help={\"name\": \"Use this name for migration file(s). If unspecified, a name will be generated.\"})\ndef makemigrations(context, name=\"\"):\n    \"\"\"Perform makemigrations operation in Django.\"\"\"\n    command = \"python manage.py makemigrations\"\n\n    if name:\n        command += f\" --name {name}\"\n\n    run_cmd(context, command)", "\n\n@task\ndef migrate(context):\n    \"\"\"Perform migrate operation in Django.\"\"\"\n    command = \"python manage.py migrate\"\n\n    run_cmd(context, command)\n\n", "\n\n@task()\ndef pytest(context):\n    \"\"\"Launch pytest for the specified name and Python version.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    # Install python module\n    exec_cmd = \"pytest -vv\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef black(context):\n    \"\"\"Launch black to check that Python files adherence to black standards.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = \"black --exclude ./workspace --check --diff .\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef blacken(context):\n    \"\"\"Launch black to apply black standards to the code.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = \"black .\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef flake8(context):\n    \"\"\"Launch flake8 for the specified name and Python version.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = \"flake8 --exclude=./workspace,./netbox .\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef pylint(context):\n    \"\"\"Launch pylint for the specified name and Python version.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = 'find . -type f -name \"*.py\" | xargs pylint'\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef yamllint(context):\n    \"\"\"Launch yamllint to validate formatting.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = 'yamllint -d \"{ignore: ./workspace}\" .'\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef pydocstyle(context):\n    \"\"\"Launch pydocstyle to validate docstring.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = \"pydocstyle .\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef bandit(context):\n    \"\"\"Launch bandit to validate basic static code security analysis.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    # pty is set to true to properly run the docker commands due to the invocation process of docker\n    # https://docs.pyinvoke.org/en/latest/api/runners.html - Search for pty for more information\n    exec_cmd = \"bandit --recursive ./\"\n    run_cmd(context, exec_cmd)", "\n\n@task()\ndef tests(context):\n    \"\"\"Launch all tests for the specified name and Python version.\n\n    Args:\n        context (obj): Used to run specific commands\n    \"\"\"\n    print(\"Running black...\")\n    black(context)\n    print(\"Running flake8...\")\n    flake8(context)\n    # print(\"Running pylint...\")\n    # pylint(context)\n    print(\"Running yamllint...\")\n    yamllint(context)\n    # print(\"Running pydocstyle...\")\n    # pydocstyle(context)\n    # print(\"Running bandit...\")\n    # bandit(context)\n    # print(\"Running pytest...\")\n    # pytest(context)\n\n    print(\"All tests have passed!\")", ""]}
{"filename": "netbox_celery/tasks.py", "chunked_list": ["\"\"\"Base tasks for Celery.\"\"\"\nimport logging\n\nfrom datetime import datetime\nfrom celery.app.task import Task\nfrom celery import shared_task\n\nfrom netbox_celery.choices import CeleryResultStatusChoices\nfrom netbox_celery.models import CeleryResult\n", "from netbox_celery.models import CeleryResult\n\nlogger = logging.getLogger(\"netbox_celery.tasks\")\n\n\nclass CeleryBaseTask(Task):\n    \"\"\"Celery Base Task.\"\"\"\n\n    name = \"\"\n    description = \"\"\n    ignore_result = False\n    validation_class = \"\"\n    task_id = None\n    task_obj = None\n\n    def __call__(self, task_id, *args, **kwargs):\n        \"\"\"Call task.\"\"\"\n        self.task_id = task_id\n        self.get_result_obj(task_id)\n        self.task_obj.status = CeleryResultStatusChoices.STATUS_RUNNING\n        self.task_obj.save()\n        return super().__call__(task_id, *args, **kwargs)\n\n    def run(self, task_id):  # pylint: disable=arguments-differ\n        \"\"\"Run task.\"\"\"\n        raise NotImplementedError(\"You must implement the run method.\")\n\n    def on_success(self, retval, task_id, args, kwargs):\n        \"\"\"On success.\"\"\"\n        if self.task_obj.status not in [\n            CeleryResultStatusChoices.STATUS_FAILED,\n            CeleryResultStatusChoices.STATUS_ERRORED,\n        ]:\n            self.task_obj.status = CeleryResultStatusChoices.STATUS_COMPLETED\n        self.task_obj.completed = datetime.now()\n        self.task_obj.save()\n\n    def on_failure(self, exc, task_id, args, kwargs, einfo):\n        \"\"\"On failure.\"\"\"\n        if self.task_obj:\n            self.task_obj.status = CeleryResultStatusChoices.STATUS_FAILED\n            self.task_obj.completed = datetime.now()\n            for line in einfo.traceback.splitlines():\n                self.log(logging.ERROR, str(line))\n            self.task_obj.save()\n\n    def get_result_obj(self, primary_key):\n        \"\"\"Get result object.\"\"\"\n        self.task_obj = CeleryResult.objects.get(pk=primary_key)\n        return self.task_obj\n\n    def log(self, message, level_choice=logging.INFO):\n        \"\"\"Log message.\"\"\"\n        self.task_obj.log(level_choice, message)", "\n\ndef netbox_celery_task(*args, base=CeleryBaseTask, bind=True, **kwargs):\n    \"\"\"Netbox Celery Task Decorator.\n\n    This decorator is used to set default values for the Celery task.\n\n    Args:\n        base (CeleryBaseTask): Base task class.\n        bind (bool): Bind task to instance.\n    Returns:\n        shared_task: Shared task.\n    \"\"\"\n    return shared_task(*args, base=base, bind=bind, **kwargs)", ""]}
{"filename": "netbox_celery/choices.py", "chunked_list": ["\"\"\"Netbox Celery choices.\"\"\"\nfrom utilities.choices import ChoiceSet\n\n\nclass CeleryResultStatusChoices(ChoiceSet):\n    \"\"\"Job result status choices.\"\"\"\n\n    STATUS_PENDING = \"pending\"\n    STATUS_RUNNING = \"running\"\n    STATUS_COMPLETED = \"completed\"\n    STATUS_ERRORED = \"errored\"\n    STATUS_FAILED = \"failed\"\n\n    CHOICES = (\n        (STATUS_PENDING, \"Pending\"),\n        (STATUS_RUNNING, \"Running\"),\n        (STATUS_COMPLETED, \"Completed\"),\n        (STATUS_ERRORED, \"Errored\"),\n        (STATUS_FAILED, \"Failed\"),\n    )\n\n    TERMINAL_STATE_CHOICES = (\n        STATUS_COMPLETED,\n        STATUS_ERRORED,\n        STATUS_FAILED,\n    )", "\n\nclass LogLevelChoices(ChoiceSet):\n    \"\"\"Log level choices.\"\"\"\n\n    LOG_DEFAULT = \"default\"\n    LOG_SUCCESS = \"success\"\n    LOG_INFO = \"info\"\n    LOG_WARNING = \"warning\"\n    LOG_FAILURE = \"failure\"\n\n    CHOICES = (\n        (LOG_DEFAULT, \"Default\", \"gray\"),\n        (LOG_SUCCESS, \"Success\", \"green\"),\n        (LOG_INFO, \"Info\", \"cyan\"),\n        (LOG_WARNING, \"Warning\", \"yellow\"),\n        (LOG_FAILURE, \"Failure\", \"red\"),\n    )", "\n\nclass LogLevelIntegerChoices(ChoiceSet):\n    \"\"\"Log level choices.\"\"\"\n\n    LOG_DEFAULT = 20\n    LOG_DEBUG = 10\n    LOG_INFO = 20\n    LOG_SUCCESS = 25\n    LOG_WARNING = 30\n    LOG_FAILURE = 40\n    LOG_ERROR = 40\n    LOG_CRITICAL = 50\n\n    CHOICES = (\n        (LOG_DEFAULT, \"Default\"),\n        (LOG_DEBUG, \"Debug\"),\n        (LOG_INFO, \"Info\"),\n        (LOG_SUCCESS, \"Success\"),\n        (LOG_WARNING, \"Warning\"),\n        (LOG_FAILURE, \"Failure\"),\n        (LOG_ERROR, \"Error\"),\n        (LOG_CRITICAL, \"Critical\"),\n    )", ""]}
{"filename": "netbox_celery/models.py", "chunked_list": ["\"\"\"Netbox Celery Models.\"\"\"\nimport logging\nimport uuid\n\nfrom celery import current_app\nfrom celery.exceptions import NotRegistered\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.utils import timezone", "from django.urls import reverse\nfrom django.utils import timezone\nfrom netbox_celery.choices import CeleryResultStatusChoices, LogLevelIntegerChoices\nfrom users.models import User\nfrom utilities.querysets import RestrictedQuerySet\n\nfrom netbox.models import NetBoxModel\n\nlogger = logging.getLogger(\"netbox_celery.models\")\n", "logger = logging.getLogger(\"netbox_celery.models\")\n\n\nclass CeleryResult(NetBoxModel):\n    \"\"\"Celery Result Class.\n\n    This class is used to store the results of celery tasks.\n\n    Attributes:\n        task_id (UUIDField): The UUID of the task.\n        celery_name (CharField): The name of the celery task.\n        created (DateTimeField): The date and time the task was created.\n        completed (DateTimeField): The date and time the task was completed.\n        user (ForeignKey): The user that created the task.\n        status (CharField): The status of the task.\n        args (JSONField): The args of the task.\n        kwargs (JSONField): The kwargs of the task.\n        job_kwargs (JSONField): The job_kwargs of the task.\n        result (JSONField): The result of the task.\n    \"\"\"\n\n    task_id = models.UUIDField(unique=True)\n    celery_name = models.CharField(max_length=255)\n    created = models.DateTimeField(auto_now_add=True)\n    completed = models.DateTimeField(null=True, blank=True)\n    user = models.ForeignKey(User, on_delete=models.SET_NULL, related_name=\"+\", blank=True, null=True)\n    status = models.CharField(\n        max_length=30,\n        choices=CeleryResultStatusChoices,\n        default=CeleryResultStatusChoices.STATUS_PENDING,\n    )\n    args = models.JSONField(encoder=DjangoJSONEncoder, null=True, blank=True)\n    kwargs = models.JSONField(encoder=DjangoJSONEncoder, null=True, blank=True)\n    job_kwargs = models.JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n    result = models.JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n\n    objects = RestrictedQuerySet.as_manager()\n\n    class Meta:\n        \"\"\"Meta Class.\"\"\"\n\n        verbose_name = \"Celery Result\"\n        verbose_name_plural = \"Celery Results\"\n        ordering = [\"-created\"]\n\n    def __str__(self):\n        \"\"\"String representation.\"\"\"\n        return f\"{self.celery_name} - {self.status}\"\n\n    def get_absolute_url(self):\n        \"\"\"Get absolute url.\"\"\"\n        return reverse(\"plugins:netbox_celery:celeryresult_view\", kwargs={\"pk\": self.pk})\n\n    @classmethod\n    def enqueue_job(  # pylint: disable=dangerous-default-value\n        cls,\n        celery_name,\n        user,\n        celery_kwargs={},\n        task_id=None,\n        args=[],\n        kwargs={},\n    ):\n        \"\"\"Enqueue job.\"\"\"\n\n        if not task_id:\n            task_id = uuid.uuid4()\n\n        celery_result = cls.objects.create(\n            celery_name=celery_name,\n            user=user,\n            task_id=task_id,\n            args=args,\n            kwargs=kwargs,\n        )\n\n        # Prepare args that will be sent to Celery with the CeleryResult pk\n        args = [celery_result.pk] + list(args)\n\n        try:\n            current_app.loader.import_default_modules()\n            func = current_app.tasks[celery_name]\n            func.apply_async(\n                args=args,\n                kwargs=kwargs,\n                task_id=str(celery_result.task_id),\n                **celery_kwargs,\n            )\n        except NotRegistered:\n            logger.error(\"Task %s not registered\", celery_name)\n            celery_result.result(f\"Task {celery_name} not registered\")\n            celery_result.status = CeleryResultStatusChoices.STATUS_FAILED\n            celery_result.save()\n        return celery_result\n\n    def log(self, level_choice, message, grouping=\"main\"):\n        \"\"\"Log message.\"\"\"\n        CeleryLogEntry.objects.create(\n            job_result=self,\n            log_level=level_choice,\n            grouping=grouping,\n            message=message,\n            created=timezone.now().isoformat(),\n        )\n\n    def log_debug(self, message, grouping=\"main\"):\n        \"\"\"Log info message.\"\"\"\n        self.log(LogLevelIntegerChoices.LOG_DEBUG, message, grouping)\n\n    def log_info(self, message, grouping=\"main\"):\n        \"\"\"Log info message.\"\"\"\n        self.log(LogLevelIntegerChoices.LOG_INFO, message, grouping)\n\n    def log_success(self, message, grouping=\"main\"):\n        \"\"\"Log success message.\"\"\"\n        self.log(LogLevelIntegerChoices.LOG_SUCCESS, message, grouping)\n\n    def log_warning(self, message, grouping=\"main\"):\n        \"\"\"Log warning message.\"\"\"\n        self.log(LogLevelIntegerChoices.LOG_WARNING, message, grouping)\n\n    def log_failure(self, message, grouping=\"main\"):\n        \"\"\"Log failure message.\"\"\"\n        self.log(LogLevelIntegerChoices.LOG_FAILURE, message, grouping)", "\n\nclass CeleryLogEntry(models.Model):\n    \"\"\"Stores each log entry for the CeleryResult.\"\"\"\n\n    job_result = models.ForeignKey(CeleryResult, on_delete=models.CASCADE, related_name=\"logs\")\n    log_level = models.CharField(\n        max_length=32,\n        choices=LogLevelIntegerChoices,\n        default=LogLevelIntegerChoices.LOG_DEFAULT,\n        db_index=True,\n    )\n    grouping = models.CharField(max_length=100, default=\"main\")\n    message = models.TextField(blank=True)\n    created = models.DateTimeField(default=timezone.now)\n\n    def __str__(self):\n        return str(self.message)\n\n    class Meta:\n        \"\"\"Meta Class.\"\"\"\n\n        ordering = [\"created\"]\n        get_latest_by = \"created\"\n        verbose_name_plural = \"Celery Log Entries\"", ""]}
{"filename": "netbox_celery/forms.py", "chunked_list": ["\"\"\"Forms for the netbox_celery plugin.\"\"\"\nimport csv\n\nfrom celery import current_app\nfrom django import forms\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext as _\nfrom users.models import User\nfrom utilities.forms.widgets import APISelectMultiple, DateTimePicker\nfrom utilities.forms.fields import DynamicModelMultipleChoiceField, MultipleChoiceField", "from utilities.forms.widgets import APISelectMultiple, DateTimePicker\nfrom utilities.forms.fields import DynamicModelMultipleChoiceField, MultipleChoiceField\n\nfrom netbox.forms import NetBoxModelFilterSetForm\nfrom netbox_celery.choices import CeleryResultStatusChoices\nfrom netbox_celery.models import CeleryResult\n\n\nclass CeleryTaskForm(forms.Form):\n    \"\"\"Base form for Celery tasks.\"\"\"\n\n    class Meta:\n        \"\"\"Meta class for CeleryTaskForm.\"\"\"\n\n        fields = ()\n        task_name = None\n\n    def data_to_kwargs(self, data):\n        \"\"\"Convert the data to kwargs.\"\"\"\n        return data\n\n    def save(self, request):\n        \"\"\"Save the form.\"\"\"\n        return CeleryResult.enqueue_job(\n            self.Meta.task_name,\n            user=request.user,\n            kwargs=self.data_to_kwargs(self.cleaned_data),\n        )", "class CeleryTaskForm(forms.Form):\n    \"\"\"Base form for Celery tasks.\"\"\"\n\n    class Meta:\n        \"\"\"Meta class for CeleryTaskForm.\"\"\"\n\n        fields = ()\n        task_name = None\n\n    def data_to_kwargs(self, data):\n        \"\"\"Convert the data to kwargs.\"\"\"\n        return data\n\n    def save(self, request):\n        \"\"\"Save the form.\"\"\"\n        return CeleryResult.enqueue_job(\n            self.Meta.task_name,\n            user=request.user,\n            kwargs=self.data_to_kwargs(self.cleaned_data),\n        )", "\n\nclass CeleryTaskBulkForm(forms.Form):\n    \"\"\"Base form for bulk Celery tasks.\"\"\"\n\n    csv_file = forms.FileField(\n        label=\"CSV File\",\n        help_text=\"CSV file containing the data for the task\",\n        required=False,\n    )\n    csv_data = forms.CharField(\n        label=\"CSV Data\",\n        widget=forms.Textarea(attrs={\"rows\": \"20\"}),\n        help_text=\"CSV data containing the data for the task\",\n        required=False,\n    )\n\n    class Meta:\n        \"\"\"Meta class for CeleryTaskBulkForm.\"\"\"\n\n        base_form = CeleryTaskForm\n        task_name = None\n        multi_celery_job = False\n\n    def clean(self):\n        if not (self.cleaned_data[\"csv_file\"] or self.cleaned_data[\"csv_data\"]):\n            raise ValidationError(\"Please provide a CSV file or CSV data.\")\n        return self.cleaned_data\n\n    def read_csv(self):\n        \"\"\"Read the CSV file or data.\"\"\"\n        if self.cleaned_data[\"csv_file\"]:\n            reader = csv.DictReader(self.cleaned_data[\"csv_file\"])\n        else:\n            reader = csv.DictReader(self.cleaned_data[\"csv_data\"].splitlines())\n        return list(reader)\n\n    def is_valid(self):\n        \"\"\"Check if the form is valid.\"\"\"\n        super().is_valid()\n        csv_data = self.read_csv()\n        for row in csv_data:\n            form = self.Meta.base_form(row)\n            if not form.is_valid():\n                return False\n        return True\n\n    def data_to_kwargs(self, data):\n        \"\"\"Convert the data to kwargs.\"\"\"\n        return data\n\n    def save(self, request):\n        \"\"\"Save the form.\"\"\"\n        if not getattr(self.Meta, \"task_name\", None):\n            raise ValidationError(\"Please provide a task name in Meta class.\")\n\n        csv_data = self.read_csv()\n\n        if getattr(self.Meta, \"multi_celery_job\", None):\n            jobs = []\n            for data in csv_data:\n                jobs.append(\n                    CeleryResult.enqueue_job(\n                        self.Meta.task_name,\n                        user=request.user,\n                        kwargs=self.data_to_kwargs(data),\n                    )\n                )\n            return jobs\n        return CeleryResult.enqueue_job(\n            self.Meta.task_name,\n            user=request.user,\n            kwargs=self.data_to_kwargs(csv_data),\n        )", "\n\nclass CeleryResultFilterSetForm(NetBoxModelFilterSetForm):\n    \"\"\"Celery result filterset form.\"\"\"\n\n    model = CeleryResult\n\n    celery_name = forms.CharField()  # Added for ordering\n    created__gte = forms.DateTimeField(\n        label=_(\"Created (min)\"),\n        required=False,\n        widget=DateTimePicker(),\n    )\n    created__lte = forms.DateTimeField(\n        label=_(\"Created (max)\"),\n        required=False,\n        widget=DateTimePicker(),\n    )\n    completed__gte = forms.DateTimeField(\n        label=_(\"Completed (min)\"),\n        required=False,\n        widget=DateTimePicker(),\n    )\n    completed__lte = forms.DateTimeField(\n        label=_(\"Completed (max)\"),\n        required=False,\n        widget=DateTimePicker(),\n    )\n    user_id = DynamicModelMultipleChoiceField(\n        queryset=User.objects.all(),\n        required=False,\n        label=_(\"User\"),\n        widget=APISelectMultiple(\n            api_url=\"/api/users/users/\",\n        ),\n    )\n    status = MultipleChoiceField(choices=CeleryResultStatusChoices, required=False)\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Custom celery job name field.\"\"\"\n        super().__init__(*args, **kwargs)\n        current_app.loader.import_default_modules()\n        tasks = []\n        for task in current_app.tasks.keys():\n            if task.startswith(\"celery.\"):\n                continue\n            tasks.append((task, task))\n        self.fields[\"celery_name\"] = MultipleChoiceField(\n            choices=tasks,\n            required=False,\n            label=_(\"Celery Name\"),\n        )", ""]}
{"filename": "netbox_celery/urls.py", "chunked_list": ["\"\"\"Netbox Celery Urls.\"\"\"\nfrom django.urls import path\n\nfrom netbox_celery.views import (\n    CeleryResultDeleteView,\n    CeleryResultListView,\n    CeleryResultView,\n)\n\n", "\n\nurlpatterns = [\n    path(\"celery_results/\", CeleryResultListView.as_view(), name=\"celeryresult_list\"),\n    path(\"celery_result/<int:pk>/\", CeleryResultView.as_view(), name=\"celeryresult_view\"),\n    path(\n        \"celery_result/<int:pk>/delete/\",\n        CeleryResultDeleteView.as_view(),\n        name=\"celeryresult_delete\",\n    ),", "        name=\"celeryresult_delete\",\n    ),\n]\n"]}
{"filename": "netbox_celery/views.py", "chunked_list": ["\"\"\"Views for the netbox_celery plugin.\"\"\"\nimport logging\n\nfrom django.contrib import messages\nfrom django.shortcuts import redirect, render\nfrom extras.signals import clear_webhooks\nfrom netbox_celery.filtersets import CeleryResultFilterSet\nfrom netbox_celery.forms import CeleryResultFilterSetForm, CeleryTaskForm\nfrom netbox_celery.models import CeleryResult\nfrom netbox_celery.tables import CeleryResultTable", "from netbox_celery.models import CeleryResult\nfrom netbox_celery.tables import CeleryResultTable\nfrom utilities.exceptions import AbortRequest, PermissionsViolation\nfrom utilities.forms import restrict_form_fields\n\nfrom netbox.views.generic import ObjectDeleteView, ObjectEditView, ObjectListView, ObjectView\n\n\nclass CeleryResultListView(ObjectListView):\n    \"\"\"Celery Result list view.\"\"\"\n\n    table = CeleryResultTable\n    queryset = CeleryResult.objects.all()\n    filterset = CeleryResultFilterSet\n    filterset_form = CeleryResultFilterSetForm\n    action_buttons = ()", "class CeleryResultListView(ObjectListView):\n    \"\"\"Celery Result list view.\"\"\"\n\n    table = CeleryResultTable\n    queryset = CeleryResult.objects.all()\n    filterset = CeleryResultFilterSet\n    filterset_form = CeleryResultFilterSetForm\n    action_buttons = ()\n\n\nclass CeleryResultView(ObjectView):\n    \"\"\"Celery Result view.\"\"\"\n\n    model = CeleryResult\n    queryset = CeleryResult.objects.all()\n\n    def get_extra_context(self, request, instance):\n        \"\"\"Add extra context to the view.\"\"\"\n        context = {}\n        logs = {}\n        for log in instance.logs.all().exclude(grouping=\"main\"):\n            if log.grouping not in logs:\n                logs[log.grouping] = []\n            logs[log.grouping].append(log)\n        context[\"log_groups\"] = logs\n        context[\"log_main\"] = instance.logs.filter(grouping=\"main\")\n        return context", "\n\nclass CeleryResultView(ObjectView):\n    \"\"\"Celery Result view.\"\"\"\n\n    model = CeleryResult\n    queryset = CeleryResult.objects.all()\n\n    def get_extra_context(self, request, instance):\n        \"\"\"Add extra context to the view.\"\"\"\n        context = {}\n        logs = {}\n        for log in instance.logs.all().exclude(grouping=\"main\"):\n            if log.grouping not in logs:\n                logs[log.grouping] = []\n            logs[log.grouping].append(log)\n        context[\"log_groups\"] = logs\n        context[\"log_main\"] = instance.logs.filter(grouping=\"main\")\n        return context", "\n\nclass CeleryResultDeleteView(ObjectDeleteView):\n    \"\"\"Celery Result delete view.\"\"\"\n\n    model = CeleryResult\n    queryset = CeleryResult.objects.all()\n    default_return_url = \"plugins:netbox_celery:celeryresult_list\"\n\n", "\n\n#\n# Overwritten views\n#\n\n\nclass CeleryTaskAddView(ObjectEditView):\n    \"\"\"Celery Form Task view.\"\"\"\n\n    queryset = CeleryResult.objects.all()\n    template_name = \"netbox_celery/celery_task_form.html\"\n    form = CeleryTaskForm\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        GET request handler.\n\n        Args:\n            request: The current request\n        \"\"\"\n        form = self.form()\n        restrict_form_fields(form, request.user)\n\n        return render(\n            request,\n            self.template_name,\n            {\n                \"form\": form,\n            },\n        )\n\n    def post(self, request, *args, **kwargs):\n        logger = logging.getLogger(\"netbox_celery.views.CeleryFormTaskView\")\n        form = self.form(data=request.POST, files=request.FILES)\n        restrict_form_fields(form, request.user)\n        obj = None\n\n        if form.is_valid():\n            try:\n                obj = form.save(request)\n\n                if obj.status == \"failed\":\n                    messages.error(\n                        request,\n                        f\"Task failed: {obj.logs.latest('created').message}\",\n                    )\n                else:\n                    messages.success(request, \"Job successfully queued.\")\n\n                return redirect(\"plugins:netbox_celery:celeryresult_view\", pk=obj.pk)\n\n            except (AbortRequest, PermissionsViolation) as error:\n                logger.debug(error.message)\n                form.add_error(None, error.message)\n                clear_webhooks.send(sender=self)\n\n        else:\n            logger.debug(\"Form validation failed\")\n\n        return render(\n            request,\n            self.template_name,\n            {\n                \"object\": obj,\n                \"form\": form,\n                \"return_url\": self.get_return_url(request, obj),\n                **self.get_extra_context(request, obj),\n            },\n        )", ""]}
{"filename": "netbox_celery/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Plugin.\"\"\"\nfrom extras.plugins import PluginConfig\nfrom .celery import app as celery_app  # noqa\n\n\n__version__ = \"0.1.0\"\n\n\nclass NetboxCeleryConfig(PluginConfig):\n    \"\"\"Plugin configuration for netbox_awx_runner.\"\"\"\n\n    name = \"netbox_celery\"\n    verbose_name = \"Netbox Celery\"\n    version = __version__\n    author = \"OpticoreIT\"\n    author_email = \"info@opticoreit.com\"\n    description = \"Celery job management for Netbox.\"\n    base_url = \"celery\"\n\n    django_apps = [\n        \"django_celery_beat\",\n    ]", "class NetboxCeleryConfig(PluginConfig):\n    \"\"\"Plugin configuration for netbox_awx_runner.\"\"\"\n\n    name = \"netbox_celery\"\n    verbose_name = \"Netbox Celery\"\n    version = __version__\n    author = \"OpticoreIT\"\n    author_email = \"info@opticoreit.com\"\n    description = \"Celery job management for Netbox.\"\n    base_url = \"celery\"\n\n    django_apps = [\n        \"django_celery_beat\",\n    ]", "\n\nconfig = NetboxCeleryConfig  # pylint: disable=invalid-name\n"]}
{"filename": "netbox_celery/tables.py", "chunked_list": ["\"\"\"Netbox Celery Tables.\"\"\"\nimport django_tables2 as tables\nfrom netbox_celery.models import CeleryResult\n\nfrom netbox.tables import NetBoxTable, columns\n\n\nclass CeleryResultTable(NetBoxTable):\n    \"\"\"Celery result table.\"\"\"\n\n    task_id = tables.Column(linkify=True, verbose_name=\"Task ID\")\n    actions = columns.ActionsColumn(\n        actions=(\"delete\",),\n    )\n\n    class Meta(NetBoxTable.Meta):\n        \"\"\"Meta.\"\"\"\n\n        name = \"celery_results\"\n        model = CeleryResult\n        fields = (\n            \"task_id\",\n            \"celery_name\",\n            \"created\",\n            \"completed\",\n            \"user\",\n            \"status\",\n        )\n        attrs = {\"class\": \"table table-hover table-headings\"}\n        datatable_ordering = [[3, \"desc\"]]", ""]}
{"filename": "netbox_celery/celery.py", "chunked_list": ["\"\"\"Celery configuration.\"\"\"\nimport os\n\nfrom celery import Celery\nfrom django.conf import settings\n\nfrom netbox_celery.settings_funcs import parse_redis_connection\n\n\n# set the default Django settings module for the 'celery' program.", "\n# set the default Django settings module for the 'celery' program.\n# this is also used in manage.py\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"netbox.settings\")\n\n# Get the base REDIS URL, default to redis' default\nBASE_REDIS_URL = parse_redis_connection(redis_database=0)\napp = Celery(\n    \"netbox_celery\",\n    backend=parse_redis_connection(redis_database=0),", "    \"netbox_celery\",\n    backend=parse_redis_connection(redis_database=0),\n)\n\n# Using a string here means the worker don't have to serialize\n# the configuration object to child processes.\n# - namespace='CELERY' means all celery-related configuration keys\n#   should have a `CELERY_` prefix.\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\n", "app.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\n\n# Load task modules from all registered Django app configs.\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS, force=False)\n\napp.conf.broker_url = BASE_REDIS_URL\n\n# this allows you to schedule items in the Django admin.\napp.conf.beat_scheduler = \"django_celery_beat.schedulers.DatabaseScheduler\"\n", "app.conf.beat_scheduler = \"django_celery_beat.schedulers.DatabaseScheduler\"\n"]}
{"filename": "netbox_celery/settings_funcs.py", "chunked_list": ["\"\"\"Functions for Django settings.\"\"\"\nimport os\nfrom distutils.util import strtobool  # pylint: disable=deprecated-module\n\n\ndef is_truthy(arg):\n    \"\"\"\n    Convert \"truthy\" strings into Booleans.\n\n    Examples:\n        >>> is_truthy('yes')\n        True\n\n    Args:\n        arg (str): Truthy string (True values are y, yes, t, true, on and 1; false values are n, no,\n        f, false, off and 0. Raises ValueError if val is anything else.\n    \"\"\"\n    if isinstance(arg, bool):\n        return arg\n    return bool(strtobool(str(arg)))", "\n\ndef parse_redis_connection(redis_database):\n    \"\"\"\n    Parse environment variables to emit a Redis connection URL.\n\n    Args:\n        redis_database (int): Redis database number to use for the connection\n\n    Returns:\n        Redis connection URL (str)\n    \"\"\"\n    # The following `_redis_*` variables are used to generate settings based on\n    # environment variables.\n    redis_scheme = (\n        \"rediss\" if is_truthy(os.getenv(\"REDIS_SSL\", False)) else \"redis\"  # pylint: disable=invalid-envvar-default\n    )\n    redis_host = os.getenv(\"REDIS_HOST\", \"localhost\")\n    redis_port = int(os.getenv(\"REDIS_PORT\", 6379))  # pylint: disable=invalid-envvar-default\n    redis_username = os.getenv(\"REDIS_USERNAME\", \"\")\n    redis_password = os.getenv(\"REDIS_PASSWORD\", \"\")\n\n    # Default Redis credentials to being empty unless a username or password is\n    # provided. Then map it to \"username:password@\". We're not URL-encoding the\n    # password because the Redis Python client already does this.\n    redis_creds = \"\"\n    if redis_username or redis_password:\n        redis_creds = f\"{redis_username}:{redis_password}@\"\n\n    return f\"{redis_scheme}://{redis_creds}{redis_host}:{redis_port}/{redis_database}\"", ""]}
{"filename": "netbox_celery/filtersets.py", "chunked_list": ["\"\"\"Celery result filtersets.\"\"\"\nimport django_filters\nfrom django.utils.translation import gettext as _\nfrom netbox_celery.models import CeleryResult\nfrom users.models import User\n\n\nclass CeleryResultFilterSet(django_filters.FilterSet):\n    \"\"\"Filter for celery results.\"\"\"\n\n    user = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"user__username\",\n        queryset=User.objects.all(),\n        label=_(\"User\"),\n    )\n\n    class Meta:\n        \"\"\"Meta.\"\"\"\n\n        model = CeleryResult\n        fields = [\n            \"task_id\",\n            \"celery_name\",\n            \"created\",\n            \"completed\",\n            \"status\",\n            \"user\",\n        ]", ""]}
{"filename": "netbox_celery/schedule.py", "chunked_list": ["\"\"\"Celery beat scheduler for NetBox.\"\"\"\nimport sys\nfrom celery.beat import (\n    SchedulingError,\n    _evaluate_entry_args,\n    _evaluate_entry_kwargs,\n)\nfrom celery.exceptions import reraise\nfrom django_celery_beat.schedulers import DatabaseScheduler\n", "from django_celery_beat.schedulers import DatabaseScheduler\n\nfrom netbox_celery.models import CeleryResult\n\n\nclass NetboxCeleryDatabaseScheduler(DatabaseScheduler):\n    \"\"\"Custom Celery beat scheduler for NetBox.\"\"\"\n\n    def apply_async(self, entry, producer=None, advance=True, **kwargs):\n        \"\"\"Apply async.\"\"\"\n        # Update time-stamps and run counts before we actually execute,\n        # so we have that done if an exception is raised (doesn't schedule\n        # forever.)\n        entry = self.reserve(entry) if advance else entry\n        task = self.app.tasks.get(entry.task)\n\n        try:\n            entry_args = _evaluate_entry_args(entry.args)\n            entry_kwargs = _evaluate_entry_kwargs(entry.kwargs)\n            if task:\n                return CeleryResult.enqueue_job(\n                    entry.task,\n                    user=None,\n                    args=entry_args,\n                    kwargs=entry_kwargs,\n                )\n            return self.send_task(entry.task, entry_args, entry_kwargs, producer=producer, **entry.options)\n        except Exception as exc:  # pylint: disable=broad-except\n            return reraise(\n                SchedulingError,\n                SchedulingError(f\"Couldn't apply scheduled task {entry.name}: {exc}\"),\n                sys.exc_info()[2],\n            )\n        finally:\n            self._tasks_since_sync += 1\n            if self.should_sync():\n                self._do_sync()", ""]}
{"filename": "netbox_celery/navigation.py", "chunked_list": ["\"\"\"Navigation menu items for netbox_celery.\"\"\"\nfrom extras.plugins import PluginMenuItem\n\n\nmenu_items = (\n    PluginMenuItem(\n        link=\"plugins:netbox_celery:celeryresult_list\",\n        link_text=\"Celery Results\",\n        permissions=[\"netbox_celery.view_celeryresult\"],\n    ),", "        permissions=[\"netbox_celery.view_celeryresult\"],\n    ),\n)\n"]}
{"filename": "netbox_celery/tests/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Testing.\"\"\"\n"]}
{"filename": "netbox_celery/tests/test_views.py", "chunked_list": ["\"\"\"Test cases for the CeleryResult views.\"\"\"\nimport uuid\nfrom netbox_celery.models import CeleryResult\n\nfrom utilities.testing import ViewTestCases, create_tags\n\n\nclass CeleryResultTestCase(\n    ViewTestCases.DeleteObjectViewTestCase,\n    ViewTestCases.GetObjectViewTestCase,\n    ViewTestCases.ListObjectsViewTestCase,\n):\n    \"\"\"Test cases for the CeleryResult views.\"\"\"\n\n    model = CeleryResult\n\n    def _get_base_url(self):\n        \"\"\"Return the base URL for the view.\"\"\"\n        return \"plugins:{}:{}_{{}}\".format(self.model._meta.app_label, self.model._meta.model_name)\n\n    @classmethod\n    def setUpTestData(cls):\n        \"\"\"Create test data.\"\"\"\n        CeleryResult.objects.bulk_create(\n            [\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n            ]\n        )\n\n        tags = create_tags(\"Alpha\", \"Bravo\", \"Charlie\")\n\n        cls.form_data = {\n            \"task_id\": uuid.uuid4(),\n            \"status\": \"SUCCESS\",\n            \"tags\": [t.pk for t in tags],\n        }\n\n        cls.csv_data = (\n            \"task_id,status\",\n            f\"{uuid.uuid4()},SUCCESS\",\n            f\"{uuid.uuid4()},SUCCESS\",\n            f\"{uuid.uuid4()},SUCCESS\",\n        )\n\n        cls.bulk_edit_data = {\n            \"status\": \"SUCCESS\",\n        }", ""]}
{"filename": "netbox_celery/tests/test_api.py", "chunked_list": ["\"\"\"Test the NetBox Celery API.\"\"\"\nimport uuid\n\nfrom django.urls import reverse\nfrom utilities.testing import APITestCase, APIViewTestCases\n\nfrom netbox_celery.models import CeleryResult\n\n\nclass AppTest(APITestCase):\n    def test_root(self):\n        url = reverse(\"plugins-api:netbox_celery-api:api-root\")\n        response = self.client.get(\"{}?format=api\".format(url), **self.header)\n        self.assertEqual(response.status_code, 200)", "\nclass AppTest(APITestCase):\n    def test_root(self):\n        url = reverse(\"plugins-api:netbox_celery-api:api-root\")\n        response = self.client.get(\"{}?format=api\".format(url), **self.header)\n        self.assertEqual(response.status_code, 200)\n\n\nclass CeleryResultTest(\n    APIViewTestCases.GetObjectViewTestCase,\n    APIViewTestCases.ListObjectsViewTestCase,\n):\n    \"\"\"Test the CeleryResult API views.\"\"\"\n\n    model = CeleryResult\n    brief_fields = sorted(\n        [\n            \"task_id\",\n            \"celery_name\",\n            \"created\",\n            \"completed\",\n            \"status\",\n            \"user\",\n            \"args\",\n            \"kwargs\",\n            \"job_kwargs\",\n            \"result\",\n        ]\n    )\n    bulk_update_data = {\n        \"status\": \"SUCCESS\",\n    }\n\n    def _get_detail_url(self, instance):\n        \"\"\"Return the URL for the detail view of the given instance.\"\"\"\n        viewname = f\"plugins-api:{self._get_view_namespace()}:{instance._meta.model_name}-detail\"\n        return reverse(viewname, kwargs={\"pk\": instance.pk})\n\n    def _get_list_url(self):\n        \"\"\"Return the URL for the list view.\"\"\"\n        viewname = f\"plugins-api:{self._get_view_namespace()}:{self.model._meta.model_name}-list\"\n        return reverse(viewname)\n\n    @classmethod\n    def setUpTestData(cls):\n        \"\"\"Create test data.\"\"\"\n        CeleryResult.objects.bulk_create(\n            [\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n            ]\n        )\n\n        cls.create_data = [\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n        ]", "class CeleryResultTest(\n    APIViewTestCases.GetObjectViewTestCase,\n    APIViewTestCases.ListObjectsViewTestCase,\n):\n    \"\"\"Test the CeleryResult API views.\"\"\"\n\n    model = CeleryResult\n    brief_fields = sorted(\n        [\n            \"task_id\",\n            \"celery_name\",\n            \"created\",\n            \"completed\",\n            \"status\",\n            \"user\",\n            \"args\",\n            \"kwargs\",\n            \"job_kwargs\",\n            \"result\",\n        ]\n    )\n    bulk_update_data = {\n        \"status\": \"SUCCESS\",\n    }\n\n    def _get_detail_url(self, instance):\n        \"\"\"Return the URL for the detail view of the given instance.\"\"\"\n        viewname = f\"plugins-api:{self._get_view_namespace()}:{instance._meta.model_name}-detail\"\n        return reverse(viewname, kwargs={\"pk\": instance.pk})\n\n    def _get_list_url(self):\n        \"\"\"Return the URL for the list view.\"\"\"\n        viewname = f\"plugins-api:{self._get_view_namespace()}:{self.model._meta.model_name}-list\"\n        return reverse(viewname)\n\n    @classmethod\n    def setUpTestData(cls):\n        \"\"\"Create test data.\"\"\"\n        CeleryResult.objects.bulk_create(\n            [\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n                CeleryResult(task_id=uuid.uuid4(), status=\"SUCCESS\"),\n            ]\n        )\n\n        cls.create_data = [\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n            {\n                \"task_id\": uuid.uuid4(),\n                \"status\": \"SUCCESS\",\n            },\n        ]", ""]}
{"filename": "netbox_celery/api/urls.py", "chunked_list": ["\"\"\"URLs for the netbox_celery API.\"\"\"\nfrom netbox_celery.api.views import CeleryResultView\n\nfrom netbox.api.routers import NetBoxRouter\n\n\nrouter = NetBoxRouter()\nrouter.register(\"result\", CeleryResultView)\nurlpatterns = router.urls\n", "urlpatterns = router.urls\n\napp_name = \"netbox_celery-api\"  # pylint: disable=invalid-name\n"]}
{"filename": "netbox_celery/api/views.py", "chunked_list": ["\"\"\"API views for the netbox_celery plugin.\"\"\"\nfrom netbox_celery.api.serializers import CeleryResultSerializer\nfrom netbox_celery.filtersets import CeleryResultFilterSet\nfrom netbox_celery.models import CeleryResult\n\nfrom netbox.api.viewsets import NetBoxModelViewSet\n\n#\n# Celery Results\n#", "# Celery Results\n#\n\n\nclass CeleryResultView(NetBoxModelViewSet):\n    \"\"\"CeleryResult view.\"\"\"\n\n    queryset = CeleryResult.objects.all()\n    filterset_class = CeleryResultFilterSet\n    serializer_class = CeleryResultSerializer", ""]}
{"filename": "netbox_celery/api/__init__.py", "chunked_list": ["\"\"\"Netbox Celery API.\"\"\"\n"]}
{"filename": "netbox_celery/api/serializers.py", "chunked_list": ["\"\"\"Netbox Celery API serializers.\"\"\"\nfrom netbox_celery.models import CeleryResult\n\nfrom netbox.api.serializers import NetBoxModelSerializer\n\n\nclass CeleryResultSerializer(NetBoxModelSerializer):\n    \"\"\"CeleryResult serializer.\"\"\"\n\n    class Meta:\n        \"\"\"Meta Class.\"\"\"\n\n        model = CeleryResult\n        fields = [\n            \"task_id\",\n            \"celery_name\",\n            \"created\",\n            \"completed\",\n            \"status\",\n            \"user\",\n            \"args\",\n            \"kwargs\",\n            \"job_kwargs\",\n            \"result\",\n        ]", ""]}
{"filename": "netbox_celery/migrations/0001_initial.py", "chunked_list": ["# Generated by Django 4.1.5 on 2023-01-31 15:01\n\nfrom django.conf import settings\nimport django.core.serializers.json\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\nimport taggit.managers\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"extras\", \"0077_customlink_extend_text_and_url\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"CeleryResult\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n                ),\n                (\"last_updated\", models.DateTimeField(auto_now=True, null=True)),\n                (\n                    \"custom_field_data\",\n                    models.JSONField(\n                        blank=True,\n                        default=dict,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                    ),\n                ),\n                (\"task_id\", models.UUIDField(unique=True)),\n                (\"celery_name\", models.CharField(max_length=255)),\n                (\"created\", models.DateTimeField(auto_now_add=True)),\n                (\"completed\", models.DateTimeField(blank=True, null=True)),\n                (\"status\", models.CharField(default=\"pending\", max_length=30)),\n                (\n                    \"data\",\n                    models.JSONField(\n                        blank=True,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                        null=True,\n                    ),\n                ),\n                (\n                    \"job_kwargs\",\n                    models.JSONField(\n                        blank=True,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                        null=True,\n                    ),\n                ),\n                (\n                    \"tags\",\n                    taggit.managers.TaggableManager(through=\"extras.TaggedItem\", to=\"extras.Tag\"),\n                ),\n                (\n                    \"user\",\n                    models.ForeignKey(\n                        blank=True,\n                        null=True,\n                        on_delete=django.db.models.deletion.SET_NULL,\n                        related_name=\"+\",\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n            options={\n                \"verbose_name\": \"Celery Result\",\n                \"verbose_name_plural\": \"Celery Results\",\n                \"ordering\": [\"-created\"],\n            },\n        ),\n        migrations.CreateModel(\n            name=\"CeleryLogEntry\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n                ),\n                (\n                    \"log_level\",\n                    models.CharField(db_index=True, default=20, max_length=32),\n                ),\n                (\"grouping\", models.CharField(default=\"main\", max_length=100)),\n                (\"message\", models.TextField(blank=True)),\n                (\"created\", models.DateTimeField(default=django.utils.timezone.now)),\n                (\n                    \"job_result\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        related_name=\"logs\",\n                        to=\"netbox_celery.celeryresult\",\n                    ),\n                ),\n            ],\n            options={\n                \"verbose_name_plural\": \"Celery Log Entries\",\n                \"ordering\": [\"created\"],\n                \"get_latest_by\": \"created\",\n            },\n        ),\n    ]", "\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"extras\", \"0077_customlink_extend_text_and_url\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"CeleryResult\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n                ),\n                (\"last_updated\", models.DateTimeField(auto_now=True, null=True)),\n                (\n                    \"custom_field_data\",\n                    models.JSONField(\n                        blank=True,\n                        default=dict,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                    ),\n                ),\n                (\"task_id\", models.UUIDField(unique=True)),\n                (\"celery_name\", models.CharField(max_length=255)),\n                (\"created\", models.DateTimeField(auto_now_add=True)),\n                (\"completed\", models.DateTimeField(blank=True, null=True)),\n                (\"status\", models.CharField(default=\"pending\", max_length=30)),\n                (\n                    \"data\",\n                    models.JSONField(\n                        blank=True,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                        null=True,\n                    ),\n                ),\n                (\n                    \"job_kwargs\",\n                    models.JSONField(\n                        blank=True,\n                        encoder=django.core.serializers.json.DjangoJSONEncoder,\n                        null=True,\n                    ),\n                ),\n                (\n                    \"tags\",\n                    taggit.managers.TaggableManager(through=\"extras.TaggedItem\", to=\"extras.Tag\"),\n                ),\n                (\n                    \"user\",\n                    models.ForeignKey(\n                        blank=True,\n                        null=True,\n                        on_delete=django.db.models.deletion.SET_NULL,\n                        related_name=\"+\",\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n            options={\n                \"verbose_name\": \"Celery Result\",\n                \"verbose_name_plural\": \"Celery Results\",\n                \"ordering\": [\"-created\"],\n            },\n        ),\n        migrations.CreateModel(\n            name=\"CeleryLogEntry\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),\n                ),\n                (\n                    \"log_level\",\n                    models.CharField(db_index=True, default=20, max_length=32),\n                ),\n                (\"grouping\", models.CharField(default=\"main\", max_length=100)),\n                (\"message\", models.TextField(blank=True)),\n                (\"created\", models.DateTimeField(default=django.utils.timezone.now)),\n                (\n                    \"job_result\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        related_name=\"logs\",\n                        to=\"netbox_celery.celeryresult\",\n                    ),\n                ),\n            ],\n            options={\n                \"verbose_name_plural\": \"Celery Log Entries\",\n                \"ordering\": [\"created\"],\n                \"get_latest_by\": \"created\",\n            },\n        ),\n    ]", ""]}
{"filename": "netbox_celery/migrations/0002_rename_data_celeryresult_kwargs_celeryresult_args.py", "chunked_list": ["# Generated by Django 4.1.4 on 2023-01-12 11:20\n\nimport django.core.serializers.json\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"netbox_celery\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name=\"celeryresult\",\n            old_name=\"data\",\n            new_name=\"kwargs\",\n        ),\n        migrations.AddField(\n            model_name=\"celeryresult\",\n            name=\"args\",\n            field=models.JSONField(\n                blank=True,\n                encoder=django.core.serializers.json.DjangoJSONEncoder,\n                null=True,\n            ),\n        ),\n    ]", ""]}
{"filename": "netbox_celery/migrations/0004_alter_celeryresult_custom_field_data.py", "chunked_list": ["# Generated by Django 4.1.7 on 2023-03-23 10:55\n\nfrom django.db import migrations, models\nimport utilities.json\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"netbox_celery\", \"0003_celeryresult_result\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"celeryresult\",\n            name=\"custom_field_data\",\n            field=models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),\n        ),\n    ]", ""]}
{"filename": "netbox_celery/migrations/__init__.py", "chunked_list": [""]}
{"filename": "netbox_celery/migrations/0003_celeryresult_result.py", "chunked_list": ["# Generated by Django 4.1.4 on 2023-01-12 14:48\n\nimport django.core.serializers.json\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"netbox_celery\", \"0002_rename_data_celeryresult_kwargs_celeryresult_args\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"celeryresult\",\n            name=\"result\",\n            field=models.JSONField(\n                blank=True,\n                encoder=django.core.serializers.json.DjangoJSONEncoder,\n                null=True,\n            ),\n        ),\n    ]", ""]}
{"filename": "docker/configuration/configuration.example.py", "chunked_list": ["import re\nfrom os import environ\nfrom os.path import abspath, dirname, join\n\n# For reference see https://netbox.readthedocs.io/en/stable/configuration/\n# Based on https://github.com/netbox-community/netbox/blob/master/netbox/netbox/configuration.example.py\n\n\n# Read secret from file\ndef _read_secret(secret_name, default=None):\n    try:\n        f = open(\"/run/secrets/\" + secret_name, \"r\", encoding=\"utf-8\")\n    except EnvironmentError:\n        return default\n    else:\n        with f:\n            return f.readline().strip()", "# Read secret from file\ndef _read_secret(secret_name, default=None):\n    try:\n        f = open(\"/run/secrets/\" + secret_name, \"r\", encoding=\"utf-8\")\n    except EnvironmentError:\n        return default\n    else:\n        with f:\n            return f.readline().strip()\n", "\n\n_BASE_DIR = dirname(dirname(abspath(__file__)))\n\n#########################\n#                       #\n#   Required settings   #\n#                       #\n#########################\n", "#########################\n\n# This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write\n# access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.\n#\n# Example: ALLOWED_HOSTS = ['netbox.example.com', 'netbox.internal.local']\nALLOWED_HOSTS = environ.get(\"ALLOWED_HOSTS\", \"*\").split(\" \")\n\n# PostgreSQL database configuration. See the Django documentation for a complete list of available parameters:\n#   https://docs.djangoproject.com/en/stable/ref/settings/#databases", "# PostgreSQL database configuration. See the Django documentation for a complete list of available parameters:\n#   https://docs.djangoproject.com/en/stable/ref/settings/#databases\nDATABASE = {\n    \"NAME\": environ.get(\"DB_NAME\", \"netbox\"),  # Database name\n    \"USER\": environ.get(\"DB_USER\", \"\"),  # PostgreSQL username\n    \"PASSWORD\": _read_secret(\"db_password\", environ.get(\"DB_PASSWORD\", \"\")),\n    # PostgreSQL password\n    \"HOST\": environ.get(\"DB_HOST\", \"localhost\"),  # Database server\n    \"PORT\": environ.get(\"DB_PORT\", \"\"),  # Database port (leave blank for default)\n    \"OPTIONS\": {\"sslmode\": environ.get(\"DB_SSLMODE\", \"prefer\")},", "    \"PORT\": environ.get(\"DB_PORT\", \"\"),  # Database port (leave blank for default)\n    \"OPTIONS\": {\"sslmode\": environ.get(\"DB_SSLMODE\", \"prefer\")},\n    # Database connection SSLMODE\n    \"CONN_MAX_AGE\": int(environ.get(\"DB_CONN_MAX_AGE\", \"300\")),\n    # Max database connection age\n    \"DISABLE_SERVER_SIDE_CURSORS\": environ.get(\"DB_DISABLE_SERVER_SIDE_CURSORS\", \"False\").lower() == \"true\",\n    # Disable the use of server-side cursors transaction pooling\n}\n\n# Redis database settings. Redis is used for caching and for queuing background tasks such as webhook events. A separate", "\n# Redis database settings. Redis is used for caching and for queuing background tasks such as webhook events. A separate\n# configuration exists for each. Full connection details are required in both sections, and it is strongly recommended\n# to use two separate database IDs.\nREDIS = {\n    \"tasks\": {\n        \"HOST\": environ.get(\"REDIS_HOST\", \"localhost\"),\n        \"PORT\": int(environ.get(\"REDIS_PORT\", 6379)),\n        \"PASSWORD\": _read_secret(\"redis_password\", environ.get(\"REDIS_PASSWORD\", \"\")),\n        \"DATABASE\": int(environ.get(\"REDIS_DATABASE\", 0)),", "        \"PASSWORD\": _read_secret(\"redis_password\", environ.get(\"REDIS_PASSWORD\", \"\")),\n        \"DATABASE\": int(environ.get(\"REDIS_DATABASE\", 0)),\n        \"SSL\": environ.get(\"REDIS_SSL\", \"False\").lower() == \"true\",\n        \"INSECURE_SKIP_TLS_VERIFY\": environ.get(\"REDIS_INSECURE_SKIP_TLS_VERIFY\", \"False\").lower() == \"true\",\n    },\n    \"caching\": {\n        \"HOST\": environ.get(\"REDIS_CACHE_HOST\", environ.get(\"REDIS_HOST\", \"localhost\")),\n        \"PORT\": int(environ.get(\"REDIS_CACHE_PORT\", environ.get(\"REDIS_PORT\", 6379))),\n        \"PASSWORD\": _read_secret(\n            \"redis_cache_password\",", "        \"PASSWORD\": _read_secret(\n            \"redis_cache_password\",\n            environ.get(\"REDIS_CACHE_PASSWORD\", environ.get(\"REDIS_PASSWORD\", \"\")),\n        ),\n        \"DATABASE\": int(environ.get(\"REDIS_CACHE_DATABASE\", 1)),\n        \"SSL\": environ.get(\"REDIS_CACHE_SSL\", environ.get(\"REDIS_SSL\", \"False\")).lower() == \"true\",\n        \"INSECURE_SKIP_TLS_VERIFY\": environ.get(\n            \"REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY\",\n            environ.get(\"REDIS_INSECURE_SKIP_TLS_VERIFY\", \"False\"),\n        ).lower()", "            environ.get(\"REDIS_INSECURE_SKIP_TLS_VERIFY\", \"False\"),\n        ).lower()\n        == \"true\",\n    },\n}\n\n# This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.\n# For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and\n# symbols. NetBox will not run without this defined. For more information, see\n# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEY", "# symbols. NetBox will not run without this defined. For more information, see\n# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEY\nSECRET_KEY = _read_secret(\"secret_key\", environ.get(\"SECRET_KEY\", \"\"))\n\n\n#########################\n#                       #\n#   Optional settings   #\n#                       #\n#########################", "#                       #\n#########################\n\n# Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of\n# application errors (assuming correct email settings are provided).\nADMINS = [\n    # ['John Doe', 'jdoe@example.com'],\n]\n\n# URL schemes that are allowed within links in NetBox", "\n# URL schemes that are allowed within links in NetBox\nALLOWED_URL_SCHEMES = (\n    \"file\",\n    \"ftp\",\n    \"ftps\",\n    \"http\",\n    \"https\",\n    \"irc\",\n    \"mailto\",", "    \"irc\",\n    \"mailto\",\n    \"sftp\",\n    \"ssh\",\n    \"tel\",\n    \"telnet\",\n    \"tftp\",\n    \"vnc\",\n    \"xmpp\",\n)", "    \"xmpp\",\n)\n\n# Optionally display a persistent banner at the top and/or bottom of every page. HTML is allowed. To display the same\n# content in both banners, define BANNER_TOP and set BANNER_BOTTOM = BANNER_TOP.\nBANNER_TOP = environ.get(\"BANNER_TOP\", \"\")\nBANNER_BOTTOM = environ.get(\"BANNER_BOTTOM\", \"\")\n\n# Text to include on the login page above the login form. HTML is allowed.\nBANNER_LOGIN = environ.get(\"BANNER_LOGIN\", \"\")", "# Text to include on the login page above the login form. HTML is allowed.\nBANNER_LOGIN = environ.get(\"BANNER_LOGIN\", \"\")\n\n# Base URL path if accessing NetBox within a directory. For example, if installed at http://example.com/netbox/, set:\n# BASE_PATH = 'netbox/'\nBASE_PATH = environ.get(\"BASE_PATH\", \"\")\n\n# Maximum number of days to retain logged changes. Set to 0 to retain changes indefinitely. (Default: 90)\nCHANGELOG_RETENTION = int(environ.get(\"CHANGELOG_RETENTION\", 90))\n", "CHANGELOG_RETENTION = int(environ.get(\"CHANGELOG_RETENTION\", 90))\n\n# API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be\n# allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or\n# CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers\nCORS_ORIGIN_ALLOW_ALL = environ.get(\"CORS_ORIGIN_ALLOW_ALL\", \"False\").lower() == \"true\"\nCORS_ORIGIN_WHITELIST = list(filter(None, environ.get(\"CORS_ORIGIN_WHITELIST\", \"https://localhost\").split(\" \")))\nCORS_ORIGIN_REGEX_WHITELIST = [\n    re.compile(r) for r in list(filter(None, environ.get(\"CORS_ORIGIN_REGEX_WHITELIST\", \"\").split(\" \")))\n]", "    re.compile(r) for r in list(filter(None, environ.get(\"CORS_ORIGIN_REGEX_WHITELIST\", \"\").split(\" \")))\n]\n\n# Cross-Site-Request-Forgery-Attack settings. If Netbox is sitting behind a reverse proxy, you might need to set the CSRF_TRUSTED_ORIGINS flag.\n# Django 4.0 requires to specify the URL Scheme in this setting. An example environment variable could be specified like:\n# CSRF_TRUSTED_ORIGINS=https://demo.netbox.dev http://demo.netbox.dev\nCSRF_TRUSTED_ORIGINS = list(filter(None, environ.get(\"CSRF_TRUSTED_ORIGINS\", \"\").split(\" \")))\n\n# Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal\n# sensitive information about your installation. Only enable debugging while performing testing. Never enable debugging", "# Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal\n# sensitive information about your installation. Only enable debugging while performing testing. Never enable debugging\n# on a production system.\nDEBUG = environ.get(\"DEBUG\", \"False\").lower() == \"true\"\nDEVELOPER = True\n\n# Email settings\nEMAIL = {\n    \"SERVER\": environ.get(\"EMAIL_SERVER\", \"localhost\"),\n    \"PORT\": int(environ.get(\"EMAIL_PORT\", 25)),", "    \"SERVER\": environ.get(\"EMAIL_SERVER\", \"localhost\"),\n    \"PORT\": int(environ.get(\"EMAIL_PORT\", 25)),\n    \"USERNAME\": environ.get(\"EMAIL_USERNAME\", \"\"),\n    \"PASSWORD\": _read_secret(\"email_password\", environ.get(\"EMAIL_PASSWORD\", \"\")),\n    \"USE_SSL\": environ.get(\"EMAIL_USE_SSL\", \"False\").lower() == \"true\",\n    \"USE_TLS\": environ.get(\"EMAIL_USE_TLS\", \"False\").lower() == \"true\",\n    \"SSL_CERTFILE\": environ.get(\"EMAIL_SSL_CERTFILE\", \"\"),\n    \"SSL_KEYFILE\": environ.get(\"EMAIL_SSL_KEYFILE\", \"\"),\n    \"TIMEOUT\": int(environ.get(\"EMAIL_TIMEOUT\", 10)),  # seconds\n    \"FROM_EMAIL\": environ.get(\"EMAIL_FROM\", \"\"),", "    \"TIMEOUT\": int(environ.get(\"EMAIL_TIMEOUT\", 10)),  # seconds\n    \"FROM_EMAIL\": environ.get(\"EMAIL_FROM\", \"\"),\n}\n\n# Enforcement of unique IP space can be toggled on a per-VRF basis. To enforce unique IP space within the global table\n# (all prefixes and IP addresses not assigned to a VRF), set ENFORCE_GLOBAL_UNIQUE to True.\nENFORCE_GLOBAL_UNIQUE = environ.get(\"ENFORCE_GLOBAL_UNIQUE\", \"False\").lower() == \"true\"\n\n# Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and\n# by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.", "# Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and\n# by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.\nEXEMPT_VIEW_PERMISSIONS = list(filter(None, environ.get(\"EXEMPT_VIEW_PERMISSIONS\", \"\").split(\" \")))\n\n# Enable GraphQL API.\nGRAPHQL_ENABLED = environ.get(\"GRAPHQL_ENABLED\", \"True\").lower() == \"true\"\n\n# Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:\n#   https://docs.djangoproject.com/en/stable/topics/logging/\nLOGGING = {}", "#   https://docs.djangoproject.com/en/stable/topics/logging/\nLOGGING = {}\n\n# Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users\n# are permitted to access most data in NetBox (excluding secrets) but not make any changes.\nLOGIN_REQUIRED = environ.get(\"LOGIN_REQUIRED\", \"False\").lower() == \"true\"\n\n# The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to\n# re-authenticate. (Default: 1209600 [14 days])\nLOGIN_TIMEOUT = int(environ.get(\"LOGIN_TIMEOUT\", 1209600))", "# re-authenticate. (Default: 1209600 [14 days])\nLOGIN_TIMEOUT = int(environ.get(\"LOGIN_TIMEOUT\", 1209600))\n\n# Setting this to True will display a \"maintenance mode\" banner at the top of every page.\nMAINTENANCE_MODE = environ.get(\"MAINTENANCE_MODE\", \"False\").lower() == \"true\"\n\n# Maps provider\nMAPS_URL = environ.get(\"MAPS_URL\", None)\n\n# An API consumer can request an arbitrary number of objects =by appending the \"limit\" parameter to the URL (e.g.", "\n# An API consumer can request an arbitrary number of objects =by appending the \"limit\" parameter to the URL (e.g.\n# \"?limit=1000\"). This setting defines the maximum limit. Setting it to 0 or None will allow an API consumer to request\n# all objects by specifying \"?limit=0\".\nMAX_PAGE_SIZE = int(environ.get(\"MAX_PAGE_SIZE\", 1000))\n\n# The file path where uploaded media such as image attachments are stored. A trailing slash is not needed. Note that\n# the default value of this setting is derived from the installed location.\nMEDIA_ROOT = environ.get(\"MEDIA_ROOT\", join(_BASE_DIR, \"media\"))\n", "MEDIA_ROOT = environ.get(\"MEDIA_ROOT\", join(_BASE_DIR, \"media\"))\n\n# Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'\nMETRICS_ENABLED = environ.get(\"METRICS_ENABLED\", \"False\").lower() == \"true\"\n\n# Credentials that NetBox will uses to authenticate to devices when connecting via NAPALM.\nNAPALM_USERNAME = environ.get(\"NAPALM_USERNAME\", \"\")\nNAPALM_PASSWORD = _read_secret(\"napalm_password\", environ.get(\"NAPALM_PASSWORD\", \"\"))\n\n# NAPALM timeout (in seconds). (Default: 30)", "\n# NAPALM timeout (in seconds). (Default: 30)\nNAPALM_TIMEOUT = int(environ.get(\"NAPALM_TIMEOUT\", 30))\n\n# NAPALM optional arguments (see http://napalm.readthedocs.io/en/latest/support/#optional-arguments). Arguments must\n# be provided as a dictionary.\nNAPALM_ARGS = {}\n\n# Determine how many objects to display per page within a list. (Default: 50)\nPAGINATE_COUNT = int(environ.get(\"PAGINATE_COUNT\", 50))", "# Determine how many objects to display per page within a list. (Default: 50)\nPAGINATE_COUNT = int(environ.get(\"PAGINATE_COUNT\", 50))\n\n# Enable installed plugins. Add the name of each plugin to the list.\n# configuration.py\nPLUGINS = [\n    \"netbox_celery\",\n    \"example_plugin\",\n]\n", "]\n\n# Plugins configuration settings. These settings are used by various plugins that the user may have installed.\n# Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.\nPLUGINS_CONFIG = {\n    \"netbox_config_backup\": {\n        \"smtp_server\": \"\",\n        \"smtp_port\": 587,\n        \"smtp_username\": \"\",\n        \"smtp_password\": \"\",", "        \"smtp_username\": \"\",\n        \"smtp_password\": \"\",\n    },\n}\n\n# When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to\n# prefer IPv4 instead.\nPREFER_IPV4 = environ.get(\"PREFER_IPV4\", \"False\").lower() == \"true\"\n\n# Rack elevation size defaults, in pixels. For best results, the ratio of width to height should be roughly 10:1.", "\n# Rack elevation size defaults, in pixels. For best results, the ratio of width to height should be roughly 10:1.\nRACK_ELEVATION_DEFAULT_UNIT_HEIGHT = int(environ.get(\"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\", 22))\nRACK_ELEVATION_DEFAULT_UNIT_WIDTH = int(environ.get(\"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\", 220))\n\n# Remote authentication support\nREMOTE_AUTH_ENABLED = environ.get(\"REMOTE_AUTH_ENABLED\", \"False\").lower() == \"true\"\nREMOTE_AUTH_BACKEND = environ.get(\"REMOTE_AUTH_BACKEND\", \"netbox.authentication.RemoteUserBackend\")\nREMOTE_AUTH_HEADER = environ.get(\"REMOTE_AUTH_HEADER\", \"HTTP_REMOTE_USER\")\nREMOTE_AUTH_AUTO_CREATE_USER = environ.get(\"REMOTE_AUTH_AUTO_CREATE_USER\", \"True\").lower() == \"true\"", "REMOTE_AUTH_HEADER = environ.get(\"REMOTE_AUTH_HEADER\", \"HTTP_REMOTE_USER\")\nREMOTE_AUTH_AUTO_CREATE_USER = environ.get(\"REMOTE_AUTH_AUTO_CREATE_USER\", \"True\").lower() == \"true\"\nREMOTE_AUTH_DEFAULT_GROUPS = list(filter(None, environ.get(\"REMOTE_AUTH_DEFAULT_GROUPS\", \"\").split(\" \")))\n\n# This repository is used to check whether there is a new release of NetBox available. Set to None to disable the\n# version check or use the URL below to check for release in the official NetBox repository.\n# https://api.github.com/repos/netbox-community/netbox/releases\nRELEASE_CHECK_URL = environ.get(\"RELEASE_CHECK_URL\", None)\n\n# The file path where custom reports will be stored. A trailing slash is not needed. Note that the default value of", "\n# The file path where custom reports will be stored. A trailing slash is not needed. Note that the default value of\n# this setting is derived from the installed location.\nREPORTS_ROOT = environ.get(\"REPORTS_ROOT\", \"/etc/netbox/reports\")\n\n# Maximum execution time for background tasks, in seconds.\nRQ_DEFAULT_TIMEOUT = int(environ.get(\"RQ_DEFAULT_TIMEOUT\", 300))\n\n# The file path where custom scripts will be stored. A trailing slash is not needed. Note that the default value of\n# this setting is derived from the installed location.", "# The file path where custom scripts will be stored. A trailing slash is not needed. Note that the default value of\n# this setting is derived from the installed location.\nSCRIPTS_ROOT = environ.get(\"SCRIPTS_ROOT\", \"/etc/netbox/scripts\")\n\n# By default, NetBox will store session data in the database. Alternatively, a file path can be specified here to use\n# local file storage instead. (This can be useful for enabling authentication on a standby instance with read-only\n# database access.) Note that the user as which NetBox runs must have read and write permissions to this path.\nSESSION_FILE_PATH = environ.get(\"SESSIONS_ROOT\", None)\n\n# Time zone (default: UTC)", "\n# Time zone (default: UTC)\nTIME_ZONE = environ.get(\"TIME_ZONE\", \"UTC\")\n\n# Date/time formatting. See the following link for supported formats:\n# https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date\nDATE_FORMAT = environ.get(\"DATE_FORMAT\", \"N j, Y\")\nSHORT_DATE_FORMAT = environ.get(\"SHORT_DATE_FORMAT\", \"Y-m-d\")\nTIME_FORMAT = environ.get(\"TIME_FORMAT\", \"g:i a\")\nSHORT_TIME_FORMAT = environ.get(\"SHORT_TIME_FORMAT\", \"H:i:s\")", "TIME_FORMAT = environ.get(\"TIME_FORMAT\", \"g:i a\")\nSHORT_TIME_FORMAT = environ.get(\"SHORT_TIME_FORMAT\", \"H:i:s\")\nDATETIME_FORMAT = environ.get(\"DATETIME_FORMAT\", \"N j, Y g:i a\")\nSHORT_DATETIME_FORMAT = environ.get(\"SHORT_DATETIME_FORMAT\", \"Y-m-d H:i\")\n"]}
{"filename": "docs/example-plugin/example_plugin/tasks.py", "chunked_list": ["\"\"\"Example Tasks File.\"\"\"\nfrom netbox_celery.tasks import netbox_celery_task\n\n\n@netbox_celery_task(name=\"example_plugin:hello_world\")\ndef hello_world(self, task_id, name=\"World\"):  # pylint: disable=unused-argument\n    \"\"\"Example hello world task.\"\"\"\n    self.log(f\"Hello {name}!\")\n", ""]}
{"filename": "docs/example-plugin/example_plugin/forms.py", "chunked_list": ["\"\"\"Netbox Celery Forms.\"\"\"\nfrom django import forms\n\nfrom utilities.forms import BootstrapMixin\n\nfrom netbox_celery.forms import CeleryTaskForm\n\n\nclass ExampleTaskForm(BootstrapMixin, CeleryTaskForm):\n    \"\"\"Form for the ExampleTask.\"\"\"\n\n    name = forms.CharField(\n        label=\"Name\",\n        required=True,\n    )\n\n    class Meta:\n        \"\"\"Meta class for ExampleTaskForm.\"\"\"\n\n        fields = (\"name\",)\n        task_name = \"example_plugin:hello_world\"", "class ExampleTaskForm(BootstrapMixin, CeleryTaskForm):\n    \"\"\"Form for the ExampleTask.\"\"\"\n\n    name = forms.CharField(\n        label=\"Name\",\n        required=True,\n    )\n\n    class Meta:\n        \"\"\"Meta class for ExampleTaskForm.\"\"\"\n\n        fields = (\"name\",)\n        task_name = \"example_plugin:hello_world\"", ""]}
{"filename": "docs/example-plugin/example_plugin/urls.py", "chunked_list": ["\"\"\"URLs for the example_plugin plugin.\"\"\"\nfrom django.urls import path\n\nfrom example_plugin.views import ExampleAddView\n\n\nurlpatterns = [\n    path(\"add/\", ExampleAddView.as_view(), name=\"example_add\"),\n]\n", "]\n"]}
{"filename": "docs/example-plugin/example_plugin/views.py", "chunked_list": ["\"\"\"Views for the example plugin.\"\"\"\nfrom netbox_celery.views import CeleryTaskAddView\nfrom example_plugin.forms import ExampleTaskForm\n\n\nclass ExampleAddView(CeleryTaskAddView):\n    \"\"\"OnboardDevice add view.\"\"\"\n\n    form = ExampleTaskForm\n", ""]}
{"filename": "docs/example-plugin/example_plugin/__init__.py", "chunked_list": ["\"\"\"Netbox Celery Plugin.\"\"\"\nfrom extras.plugins import PluginConfig\n\n\n__version__ = \"0.0.1\"\n\n\nclass ExamplePlugin(PluginConfig):\n    \"\"\"Example Plugin.\"\"\"\n\n    name = \"example_plugin\"\n    verbose_name = \"Example Plugin\"\n    version = __version__\n    author = \"OpticoreIT\"\n    author_email = \"info@opticoreit.com\"\n    description = \"Celery job management for Netbox.\"\n    base_url = \"celery\"", "\n\nconfig = ExamplePlugin  # pylint: disable=invalid-name\n"]}
{"filename": "docs/example-plugin/example_plugin/navigation.py", "chunked_list": ["\"\"\"Navigation menu items for netbox_device_onboarder.\"\"\"\nfrom extras.plugins import PluginMenuItem\n\n\nmenu_items = (\n    PluginMenuItem(\n        link=\"plugins:example_plugin:example_add\",\n        link_text=\"Example Task\",\n    ),\n)", "    ),\n)\n"]}
