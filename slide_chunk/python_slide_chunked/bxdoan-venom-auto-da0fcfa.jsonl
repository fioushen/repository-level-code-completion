{"filename": "wallet/venom/__init__.py", "chunked_list": ["import time\nimport pandas as pd\nfrom app.enums import GasPrice\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport undetected_chromedriver as uc\n\nfrom app import utils\nfrom app.config import get_logger, PASSWORD, CODE_HOME, WIDTH, HEADLESS, EXTENSION_ID, \\", "from app import utils\nfrom app.config import get_logger, PASSWORD, CODE_HOME, WIDTH, HEADLESS, EXTENSION_ID, \\\n    HEIGHT, EXTENSION_META_DIR, DEFAULT_EXTENSION, DEFAULT_WAIT_CONFIRM\n\nlogger = get_logger(__name__)\n\n# download the newest version of keplr extension from:\n# ref. https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap\n# or from  https://github.com/chainapsis/keplr-wallet\n# EXT_URL = f\"chrome-extension://ojggmchlghnjlapmfbnjholfjkiidbch/popup.html\"", "# or from  https://github.com/chainapsis/keplr-wallet\n# EXT_URL = f\"chrome-extension://ojggmchlghnjlapmfbnjholfjkiidbch/popup.html\"\nEXT_URL = f\"chrome-extension://{EXTENSION_ID}/home.html\"\nPOPUP_URL = f\"chrome-extension://{EXTENSION_ID}/popup.html\"\nFILE_NAME = f\"{CODE_HOME}/account.venom2.csv\"\n\n\ndef launchSeleniumWebdriver(with_meta=False, address : str = None) -> webdriver:\n    options = uc.ChromeOptions()\n\n    if with_meta:\n        options.add_argument(f\"--load-extension={DEFAULT_EXTENSION},{EXTENSION_META_DIR}\")\n    else:\n        options.add_argument(f\"--load-extension={DEFAULT_EXTENSION}\")\n\n    user_data_dir = utils.user_data_dir(address=address)\n    if user_data_dir:\n        logger.info(f\"User data dir: {user_data_dir}\")\n        options.add_argument(f\"--user-data-dir={user_data_dir}\")\n\n    options.add_argument(\"--disable-popup-blocking\")\n\n    prefs = {\n        \"extensions.ui.developer_mode\"    : True,\n        \"credentials_enable_service\"      : False,\n        \"profile.password_manager_enabled\": False,\n    }\n    options.add_experimental_option(\"prefs\", prefs)\n\n    # add headless option\n    if utils.force2bool(HEADLESS):\n        logger.info('headless mode')\n        options.add_argument('--disable-gpu')\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument('--disable-gpu')\n        options.add_argument('--headless')\n\n    global driver\n    driver = uc.Chrome(options=options, version_main=115)\n\n    driver.set_window_size(WIDTH, HEIGHT)\n    logger.info(f\"Extension has been loaded successfully \")\n    time.sleep(5)\n    driver.refresh()\n    utils.get_ip()\n    return driver", "\n\ndef walletSetup(recoveryPhrase: 'str', password: str) -> None:\n    logger.info(f\"walletSetup with recoveryPhrase: {recoveryPhrase}\")\n    # switch_to_window(0)\n    # time.sleep(8)\n    driver.execute_script(\"window.open('');\")\n    time.sleep(5)  # wait for the new window to open\n    switch_to_window(0)\n    time.sleep(3)\n    if len(driver.window_handles) > 1:\n        switch_to_window(-1)\n    driver.get(f\"chrome://extensions/?id={EXTENSION_ID}\")\n    time.sleep(5)\n    ext_ma = driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n    toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n    update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n    update_button.click()\n    time.sleep(8)\n\n    if len(driver.window_handles) == 3:\n        switch_to_window(0)\n        time.sleep(2)\n        driver.close()\n        time.sleep(2)\n    elif len(driver.window_handles) == 1:\n        driver.execute_script(\"window.open('');\")\n        time.sleep(3)\n        switch_to_window(-1)\n\n    driver.get(EXT_URL)\n    time.sleep(5)\n\n    if len(driver.window_handles) == 1:\n        switch_to_window(0)\n    try_click(\"//div[contains(text(),'Sign in with seed phrase')]\", 2)\n\n    # fill in recovery seed phrase\n    inputs = try_finds('//input')\n    list_of_recovery_phrase = recoveryPhrase.split(\" \")\n    for i, x in enumerate(list_of_recovery_phrase):\n        phrase = list_of_recovery_phrase[i]\n        inputs[i].send_keys(phrase)\n\n    try_click(\"//div[contains(text(),'Confirm')]\", 2)\n\n    # fill in password\n    inputs = try_finds('//input')\n    inputs[0].send_keys(password)\n    inputs[1].send_keys(password)\n    time.sleep(1)\n    try_click(\"//div[contains(text(),'Sign in the')]\", 10)\n    switch_to_window(0)\n    time.sleep(7)", "\n\ndef try_find(xpath=\"\", by=By.XPATH, print_error=True):\n    try:\n        return driver.find_element(by, xpath)\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Find {xpath} {by} error: {str(_e)}\")\n        return None\n", "\n\ndef try_finds(xpath=\"\", by=By.XPATH, print_error=True):\n    try:\n        return driver.find_elements(by, xpath)\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Finds {xpath} {by} error: {str(_e)}\")\n        return []\n", "\n\ndef try_send_keys(xpath=\"\", msg=\"\", time_to_wait=5, by=By.XPATH, print_error=True) -> None:\n    try:\n        driver.find_element(by, xpath).send_keys(msg)\n        time.sleep(time_to_wait)\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Send key {xpath} {msg} {by} error: {str(_e)}\")\n", "\n\ndef open_new_tab(url, time_to_wait=5):\n    driver.execute_script(\"window.open('');\")\n    switch_to_window(-1)\n    driver.get(url)\n    time.sleep(time_to_wait)\n\n\ndef metamaskSetup(recoveryPhrase : 'str', password : str) -> None:\n    driver.open_new_tab(f\"{EXT_URL}#onboarding/welcome\")\n    time.sleep(4)\n    window_before = driver.window_handles\n    driver.switch_to.window(window_before[-1])\n    click('//button[text()=\"Import an existing wallet\"]')\n\n    click('//button[text()=\"No thanks\"]')\n\n    # fill in recovery seed phrase\n    inputs = driver.find_elements(By.XPATH, '//input')\n    list_of_recovery_phrase = recoveryPhrase.split(\" \")\n    for i, x in enumerate(list_of_recovery_phrase):\n        if i == 0:\n            locate_input = i\n        else:\n            locate_input = i * 2\n        phrase = list_of_recovery_phrase[i]\n        inputs[locate_input].send_keys(phrase)\n\n    click('//button[text()=\"Confirm Secret Recovery Phrase\"]')\n\n    # fill in password\n    inputs = driver.find_elements(By.XPATH, '//input')\n    inputs[0].send_keys(password)\n    inputs[1].send_keys(password)\n\n    click('.create-password__form__terms-label', 1, By.CSS_SELECTOR)\n\n    click('//button[text()=\"Import my wallet\"]')\n\n    click('//button[text()=\"Got it!\"]')\n\n    click('//button[text()=\"Next\"]')\n\n    click('//button[text()=\"Done\"]')\n\n    logger.info(\"Wallet has been imported successfully\")\n\n    # Close the popup\n    click('//*[@id=\"popover-content\"]/div/div/section/div[2]/div/button')\n    driver.switch_to.window(driver.window_handles[0])", "\ndef metamaskSetup(recoveryPhrase : 'str', password : str) -> None:\n    driver.open_new_tab(f\"{EXT_URL}#onboarding/welcome\")\n    time.sleep(4)\n    window_before = driver.window_handles\n    driver.switch_to.window(window_before[-1])\n    click('//button[text()=\"Import an existing wallet\"]')\n\n    click('//button[text()=\"No thanks\"]')\n\n    # fill in recovery seed phrase\n    inputs = driver.find_elements(By.XPATH, '//input')\n    list_of_recovery_phrase = recoveryPhrase.split(\" \")\n    for i, x in enumerate(list_of_recovery_phrase):\n        if i == 0:\n            locate_input = i\n        else:\n            locate_input = i * 2\n        phrase = list_of_recovery_phrase[i]\n        inputs[locate_input].send_keys(phrase)\n\n    click('//button[text()=\"Confirm Secret Recovery Phrase\"]')\n\n    # fill in password\n    inputs = driver.find_elements(By.XPATH, '//input')\n    inputs[0].send_keys(password)\n    inputs[1].send_keys(password)\n\n    click('.create-password__form__terms-label', 1, By.CSS_SELECTOR)\n\n    click('//button[text()=\"Import my wallet\"]')\n\n    click('//button[text()=\"Got it!\"]')\n\n    click('//button[text()=\"Next\"]')\n\n    click('//button[text()=\"Done\"]')\n\n    logger.info(\"Wallet has been imported successfully\")\n\n    # Close the popup\n    click('//*[@id=\"popover-content\"]/div/div/section/div[2]/div/button')\n    driver.switch_to.window(driver.window_handles[0])", "\n\ndef try_click(xpath, time_to_sleep=None, by=By.XPATH, wd=None, print_error=True) -> None:\n    try:\n        click(xpath, time_to_sleep, by, wd)\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Click {xpath} {by} error: {str(_e)}\")\n\n\ndef try_get_text(xpath, by=By.XPATH, print_error=True) -> str:\n    try:\n        return try_find(xpath, by).text\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Get text {xpath} {by} error: {str(_e)}\")\n        return ''", "\n\ndef try_get_text(xpath, by=By.XPATH, print_error=True) -> str:\n    try:\n        return try_find(xpath, by).text\n    except Exception as _e:\n        if print_error:\n            logger.error(f\"Get text {xpath} {by} error: {str(_e)}\")\n        return ''\n", "\n\ndef click(xpath, time_to_sleep=None, by=By.XPATH, wd=None) -> None:\n    if time_to_sleep is None:\n        time_to_sleep = 1\n    if wd is None:\n        wd = driver\n    # Click once.\n    # If click more times, try another method.\n    button = wd.find_element(by, xpath)\n    try:\n        logger.info(f'click on \"{button.text}\"')\n    except:\n        pass\n    clicking = ActionChains(wd).click(button)\n    clicking.perform()\n    time.sleep(time_to_sleep)", "\n\ndef insert_text(xpath, text) -> None:\n    input_text = driver.find_element(By.XPATH, xpath)\n    input_text.send_keys(text)\n    time.sleep(0.5)\n\n\ndef send(receiver : str, amount : str) -> None:\n    open_new_tab(POPUP_URL)\n\n    click(\"//div[contains(text(),'Send')]\", 4)\n    switch_to_window(-1)\n    inputs = try_finds(\"//input\")\n    inputs[1].send_keys(receiver)\n    inputs[2].send_keys(amount)\n    if len(inputs) == 4:\n        # if have password field\n        inputs[3].send_keys(PASSWORD)\n    time.sleep(5)\n    click(\"//div[contains(text(),'Confirm transaction')]\", 15 )\n    switch_to_window(-1)\n    try_click(\"//div[contains(text(),'Ok')]\", 10)\n    logger.info(f\"Send {amount} to {receiver} success\")", "def send(receiver : str, amount : str) -> None:\n    open_new_tab(POPUP_URL)\n\n    click(\"//div[contains(text(),'Send')]\", 4)\n    switch_to_window(-1)\n    inputs = try_finds(\"//input\")\n    inputs[1].send_keys(receiver)\n    inputs[2].send_keys(amount)\n    if len(inputs) == 4:\n        # if have password field\n        inputs[3].send_keys(PASSWORD)\n    time.sleep(5)\n    click(\"//div[contains(text(),'Confirm transaction')]\", 15 )\n    switch_to_window(-1)\n    try_click(\"//div[contains(text(),'Ok')]\", 10)\n    logger.info(f\"Send {amount} to {receiver} success\")", "\n\ndef confirm(password : str = PASSWORD, time_to_sleep : int = DEFAULT_WAIT_CONFIRM) -> bool:\n    switch_to_window(-1)\n    inputs = try_finds(\"//input\")\n    if inputs:\n        inputs[0].send_keys(password)\n        click(\"//span[contains(text(),'Remember')]\", 2)\n    click(\"//div[contains(text(),'Confirm tran')]\", time_to_sleep)\n    return True", "\n\ndef sign(tts : int = DEFAULT_WAIT_CONFIRM) -> bool:\n    switch_to_window(-1)\n    inputs = try_finds(\"//input\")\n    if len(inputs) > 0:\n        inputs[0].send_keys(PASSWORD)\n    switch_to_window(-1)\n    click(\"//button[@type='submit']\", tts)\n    return True", "\n\ndef process_acc(idx):\n    seed_phrase = addr = ''\n    try:\n        # driver.get(f\"chrome://extensions/?id={EXTENSION_ID}\")\n        # time.sleep(5)\n        #\n        # ext_ma = driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n        # toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n        # update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n        # update_button.click()\n        # time.sleep(5)\n        # driver.get(EXT_URL)\n        # time.sleep(8)\n\n        try_click(\"//div[contains(text(),'Create a')]\", 2)\n        try_click('/html/body/div/div[1]/div/div[2]/div/div/div[2]/label/span', 2)\n        try_click(\"//div[contains(text(),'Submit')]\", 2)\n\n        list_li = try_finds(\"//li\")\n        mnemonic = [li.text for li in list_li if li.text != '']\n        seed_phrase = ' '.join(mnemonic)\n        logger.info(f\"seed phrase: {seed_phrase}\")\n        try_click(\"//div[contains(text(),'I wrote it')]\", 2)\n\n        locate_m = try_finds(\"//span\")\n        list_locate = [int(li.text.split('.')[0]) for li in locate_m if li.text != '']\n\n        inputs = try_finds(\"//input\")\n        for i, x in enumerate(list_locate):\n            inputs[i].send_keys(mnemonic[int(x)-1])\n\n        time.sleep(2)\n        try_click(\"//div[contains(text(),'Confirm')]\", 2)\n\n        passes = try_finds(\"//input\")\n        passes[0].send_keys(PASSWORD)\n        passes[1].send_keys(PASSWORD)\n        try_click(\"//div[contains(text(),'Create the wallet')]\", 2)\n\n        switch_to_window(0)\n        driver.get(f\"{POPUP_URL}\")\n        time.sleep(3)\n        try_click(\"//span[contains(text(),'VENOM')]\", 2)\n        try_click(\"//div[contains(text(),'Receive')]\", 4)\n\n        addr = try_get_text(\"//*[@id='root']/div[2]/div[2]/div[2]/div/div[3]/div[2]/div[2]/div/div[3]/div/div[1]/div[2]/div/span\")\n\n    except Exception as _e:\n        logger.error(_e)\n    return seed_phrase, addr", "\n\ndef get_address():\n    addr = ''\n    try:\n        # get address\n        driver.open_new_tab(f\"{EXT_URL}\")\n        time.sleep(4)\n        switch_to_window(1)\n        click(f'//*[@id=\"app\"]/div/div[1]/div[2]/div/div[2]/div/div[1]', 2)\n\n        addr = driver.find_element(By.CLASS_NAME, 'address-tooltip').text\n        driver.close()\n        switch_to_window(0)\n        time.sleep(5)\n    except:\n        pass\n    return addr", "\n\ndef open_window():\n    driver.execute_script(\"window.open('');\")\n    time.sleep(3)\n\n\ndef switch_to_window(window_number : int = 0) -> None:\n    # Switch to another window, start from 0.\n    wh = driver.window_handles\n    try:\n        driver.switch_to.window(wh[window_number])\n    except:\n        pass\n    logger.info(f'window handles: {len(wh)} and switch {str(window_number)}')", "\n\ndef approve(gas : str = GasPrice.Average) -> None:\n    time.sleep(3)\n    switch_to_window(-1)\n\n    if gas in GasPrice.all():\n        try_click(f\"//div[text()='{gas}']\")\n\n    try_click(\"//button[contains(text(),'Approve')]\", 5)", "\n\ndef reject():\n    time.sleep(4)\n    try:\n        switch_to_window(-1)\n        click(\"//button[contains(text(),'Reject')]\", 5)\n    except:\n        pass\n", "\n\ndef create_account(index):\n    mns = pd.DataFrame(columns=[\"Name\", \"Address\", \"Private Key\", \"Seed Phrase\",\n                                \"Password\", \"Status\"])\n    switch_to_window(0)\n    seed_phrase, addr = process_acc(index)\n\n    if seed_phrase:\n        row = [f\"\", addr, \"\", seed_phrase, PASSWORD, '']\n        mns.loc[len(mns)] = row\n        utils.add_to_csv(FILE_NAME, mns.loc[0])\n        logger.info(f\"Create account success with address: {addr} and seed phrase: {seed_phrase}\")\n    else:\n        logger.info(f\"Create account fail\")", "\n\nif __name__ == '__main__':\n    for i in range(0, 150):\n        driver = launchSeleniumWebdriver()\n        try:\n            create_account(index=i)\n        except Exception as e:\n            logger.info(e)\n\n        driver.quit()", ""]}
{"filename": "app/base.py", "chunked_list": ["import shutil\nimport time\nfrom datetime import datetime\nfrom selenium.webdriver.common.by import By\n\nfrom wallet import venom\nfrom app import utils\nfrom app.account import AccountLoader\nfrom app.config import ACC_VENOM_PATH, HOME_TMP, ACC_FILE_NAME, CODE_HOME, get_logger, CHANGE_NETWORK, LIST_FOLLOW, \\\n    EXTENSION_ID", "from app.config import ACC_VENOM_PATH, HOME_TMP, ACC_FILE_NAME, CODE_HOME, get_logger, CHANGE_NETWORK, LIST_FOLLOW, \\\n    EXTENSION_ID\nfrom app.enums import COLUMN_MAPPING, AccountStatus, FOLLOW_XP\nfrom app.chatgpt import tweet\n\nlogger = get_logger(__name__)\n\n\nclass BaseAuto(object):\n\n    def __init__(self, **kwargs):\n        self.list_account = []\n        self.file_report = f\"{HOME_TMP}/report_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n        self.use_uc = kwargs.get('use_uc', True)\n        self.driver = None\n        self.auto = None\n        self.params = kwargs.get('params', {})\n\n        self.list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\n        self.file_report = f\"{HOME_TMP}/report_{ACC_FILE_NAME}_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n\n    def save_report(self, data: dict):\n        list_index = list(COLUMN_MAPPING.values())\n\n        format_data = []\n        for k in list_index:\n            value = data.get(k) if data.get(k) else ''\n            format_data.append(value)\n\n        utils.add_to_csv(self.file_report, format_data)\n        logger.info(f\"Save report: {format_data}\")\n\n    def prepare_file_report(self):\n        file_log_latest = utils.file_latest_in_path()\n        if file_log_latest:\n            index, row = utils.find_latest_row_index_log(file_log_latest)\n            logger.info(f\"Index: {index} - total account: {len(self.list_account)}\")\n            if index < len(self.list_account):\n                # run not finish, use old file\n                self.file_report = file_log_latest\n                return index\n\n        # prepare file report\n        shutil.copyfile(f\"{CODE_HOME}/account.sample.csv\", self.file_report)\n        return 0\n\n    def process_all(self, method='deposit', **kwargs):\n        method = getattr(self, method)\n        if not method:\n            raise Exception(f\"Method {method} not found\")\n\n        # prepare list account\n        index = self.prepare_file_report()\n        list_account = self.list_account\n        if index > 0:\n            # continue from index in existing file report\n            list_account = self.list_account[index:]\n\n        create_driver = True\n        for idx, account in enumerate(list_account):\n            if create_driver:\n                self._try_start_driver(account)\n\n            real_idx = idx + index\n            logger.info(f\"Request for account: {real_idx} - {account['address']}\")\n\n            if account.get('status') != AccountStatus.Inactive:\n                # if account is active, run method\n                try:\n                    kwargs.update({\n                        'account': account,\n                    })\n                    self.params.update({\n                        'account_index': real_idx,\n                    })\n                    method(**kwargs)\n                    account['status'] = AccountStatus.Inactive\n                except Exception as e:\n                    logger.error(e)\n\n                self.driver.quit()\n                create_driver = True\n            else:\n                logger.info(f\"Account {account['address']} is inactive\")\n                create_driver = False\n\n            self.save_report(account)\n            if create_driver:\n                self._change_proxy()\n\n        logger.info(f'Request Success for account len: {len(list_account)}')\n        logger.info(f\"file report: {self.file_report}\")\n\n    def _try_start_driver(self, account):\n        while True:\n            try:\n                self.driver = self.auto.launchSeleniumWebdriver(address=account['address'])\n                if self.driver:\n                    break\n            except Exception as e:\n                logger.error(f\"An error occurred: {e}, retrying in 10 seconds.\")\n                time.sleep(10)\n\n    def _change_proxy(self):\n        if utils.force2bool(CHANGE_NETWORK):\n            # utils.change_network()\n            utils.reboot_reconnect()\n\n    def _tweet(self) -> None:\n        self.auto.switch_to_window(0)\n        self.auto.open_new_tab(\"https://twitter.com/compose/tweet\")\n        time.sleep(3)\n        self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n        self.auto.try_click(\"//div[@aria-label='Tweet text']\")\n        message = tweet().replace('\"', '')\n        self.auto.try_send_keys(\"//div[@aria-label='Tweet text']\", f\"{message}\\n\")\n        self.auto.try_click(\"//span[text()='Tweet']\", 10)\n        self.auto.try_click(\"//span[contains(text(),'Got it')]\", 5)\n        logger.info(f\"Tweet: {message}\")\n        self.driver.close()\n\n    def _follow_list(self, account: dict = None, list_acc = None) -> None:\n        account_index = self.params.get('account_index')\n        # list_fl_index = \"12,13,14,15\".split(',')\n        # list_fl_index = [int(x) for x in list_fl_index]\n\n        # if LIST_FOLLOW:\n        #     list_fl = LIST_FOLLOW.split(',')\n        #     list_fl = [int(x) for x in list_fl]\n        # else:\n        #     list_fl = [x for x in range(account_index + 1, account_index + 4)]\n\n        if account_index < 10:\n            list_fl = \"46,47,48,49\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 20:\n            list_fl = \"50,51,52,53\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 30:\n            list_fl = \"53,54,55,56\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 40:\n            list_fl = \"57,58,59,60\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 50:\n            list_fl = \"61,62,63,64\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 60:\n            list_fl = \"65,66,67,68\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 70:\n            list_fl = \"69,70,71,72\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 80:\n            list_fl = \"73,74,75,76\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 90:\n            list_fl = \"77,78,79,80\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 100:\n            list_fl = \"81,82,83,84\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 110:\n            list_fl = \"85,86,87,88\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 120:\n            list_fl = \"89,90,91,92\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 130:\n            list_fl = \"93,94,95,96\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 140:\n            list_fl = \"97,98,99,100\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 150:\n            list_fl = \"101,102,103,104\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        # else:\n        #     list_fl = [x for x in range(account_index - 5, account_index - 1)]\n\n        logger.info(f\"Follow list: {list_fl=}\")\n        for fli in list_fl:\n            self._follow(account=account, index_user=fli, list_acc=list_acc)\n\n    def _follow(\n            self,\n            account: dict = None,\n            index_user : int = None,\n            user_name : str = None,\n            list_acc : list = None,\n    ) -> None:\n        if index_user is None and not user_name:\n            # if not provide index_user and user_name, skip it\n            return\n        if not list_acc:\n            # if not provide list account, use default self.list_account\n            list_acc = self.list_account\n\n        if index_user is not None:\n            user_name = list_acc[index_user]['tw_acc']\n\n        self.auto.switch_to_window(0)\n        if user_name != account['tw_acc']:\n            url = f\"https://twitter.com/intent/user?screen_name={user_name}\"\n            self.auto.open_new_tab(url)\n            account_suspended = self.auto.try_find(\"//span[contains(text(),'Account suspended')]\", print_error=False)\n            if account_suspended:\n                logger.error(f\"Account {user_name} is suspended\")\n            else:\n                try:\n                    self.auto.click(FOLLOW_XP, 10)\n                except Exception as e:\n                    logger.error(f\"Error for {user_name}: {e}\")\n\n            num_following = self.auto.try_get_text('//*[@id=\"react-root\"]/div/div/div[2]/main/div/div/div/div/div/div[3]/div/div/div/div/div[4]/div[2]/a/span[1]/span', print_error=False)\n            logger.info(f\"Number Following: {num_following}\")\n            self.driver.close()\n        logger.info(f\"Follow: {user_name}\")\n\n    def _retweet_faucet(self, account, tweet_id: str = '1663134038713069570') -> None:\n        self.auto.switch_to_window(0)\n        url = f\"https://twitter.com/intent/tweet?text={account['name']}%20https://twitter.com/\" \\\n              f\"Chaineye_tools/status/{tweet_id}\"\n        logger.info(f\"Retweet: {url}\")\n        self.auto.open_new_tab(url)\n        time.sleep(4)\n        self.auto.try_click(\"//span[text()='Tweet']\", 6)\n        self.driver.close()\n\n    def _get_2fa(self, account: dict):\n        if account.get('tw_fa'):\n            return\n        self.auto.switch_to_window(0)\n        url_2fa = \"https://twitter.com/i/flow/two-factor-auth-app-enrollment\"\n        self.auto.open_new_tab(url_2fa)\n        time.sleep(7)\n        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 5)\n        self.auto.try_click(\"//span[contains(text(), 't scan the QR code')]\", 3)\n\n        text_fa = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div[1]/div/div[2]/span').text\n        logger.info(f\"2fa text: {text_fa}\")\n        account['tw_fa'] = text_fa\n        self.auto.try_click(\"//span[contains(text(), 'Next')]\", 5)\n        otp = utils.totp(text_fa)\n        otp_input = self.auto.try_find('//input')\n        otp_input.send_keys(otp)\n        self.auto.try_click(\"//span[contains(text(), 'Confirm')]\", 5)\n\n        text_b = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div/div/div/div/div[2]/div[1]/div[2]/span/span/span').text\n        text_fa_backup = utils.get_fa_backup(text_b)\n        logger.info(f\"2fa backup text: {text_fa_backup}\")\n        account['tw_fab'] = text_fa_backup\n        self.auto.try_click(\"//span[contains(text(), 'Done')]\", 5)\n\n        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 7)\n        self.auto.try_click(\"//span[contains(text(), 'Got it')]\", 7)\n        logger.info(\"Get 2fa successfully\")\n\n    def login_twitter(self, acc: dict) -> None:\n        url = \"https://twitter.com/i/flow/login\"\n        self.auto.open_new_tab(url)\n        time.sleep(9)\n        # fill in email\n        twemail_or_twacc = self.auto.try_find('//input')\n\n        if acc['tw_fa']:\n            logger.info(f\"Login with 2FA {acc['tw_acc']}\")\n            twemail_or_twacc.send_keys(acc['tw_acc'])\n            self.auto.try_click('//span[text()=\"Next\"]', 6)\n            twpass_or_username = self.auto.try_finds('//input')\n            twpass_or_username[1].send_keys(acc['tw_pass'])\n            self.auto.try_click('//span[text()=\"Log in\"]', 6)\n            self.auto.try_click('//span[text()=\"Next\"]', 6)\n\n            input_totp = self.auto.try_find('//input')\n            input_totp.send_keys(utils.totp(acc['tw_fa']))\n            self.auto.try_click(\"//span[contains(text(), 'Next')]\", 10)\n            input_submit = self.auto.try_find(\"//input[@type='submit']\")\n            if input_submit:\n                input_submit.click()\n                time.sleep(10)\n                self.auto.try_click(\"//input[@type='submit']\", 8)\n\n            self.auto.try_click(\"//span[contains(text(), 'Skip for')]\", 3)\n        else:\n            logger.info('Login with password')\n            twemail_or_twacc.send_keys(acc['tw_email'])\n            self.auto.click('//span[text()=\"Next\"]', 7)\n            twpass_or_username = self.auto.try_finds('//input')\n            if len(twpass_or_username) == 1:\n                if \"gmail\" in acc['tw_email']:\n                    username = acc['tw_email'].split('@')[0]\n                else:\n                    # email with last 3 char of address\n                    username = f\"{acc['tw_email'].split('@')[0]}{acc['address'][:-3]}\"\n                twpass_or_username[0].send_keys(username)\n                self.auto.click('//span[text()=\"Next\"]', 3)\n                twpass = self.auto.try_finds('//input')\n                twpass[1].send_keys(acc['tw_pass'])\n                self.auto.click('//span[text()=\"Log in\"]', 3)\n            else:\n                twpass_or_username[1].send_keys(acc['tw_pass'])\n                self.auto.try_click('//span[text()=\"Log in\"]', 3)\n                self.auto.try_click('//span[text()=\"Next\"]', 3)\n\n        time.sleep(3)\n        logger.info(f\"Login twitter for account: {acc['tw_email']}\")\n\n    def login_discord(self, account: dict) -> None:\n        token = account['dis_token']\n        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n        script = \"\"\"\n                function login(token) {\n                setInterval(() => {\n                document.body.appendChild(document.createElement `iframe`).contentWindow.localStorage.token = `\"${token}\"`\n                }, 50);\n                setTimeout(() => {\n                location.reload();\n                }, 2500);\n                }   \n                \"\"\"\n        if token:\n            logger.info('Login with token')\n            self.driver.execute_script(script + f'\\nlogin(\"{token}\")')\n        else:\n            logger.info('Login with password')\n            twemail = self.auto.try_finds('//input')\n            twemail[0].send_keys(account['dis_email'])\n            twemail[1].send_keys(account['dis_pass'])\n            self.auto.click('//div[text()=\"Log In\"]', 8)\n\n        time.sleep(10)\n        logger.info(f\"Login discord for account: {account['dis_email']}\")\n\n    def _check_logged_in_twitter(self):\n        self.auto.open_new_tab(\"https://twitter.com/home\")\n        time.sleep(8)\n        logged_in_twitter = False\n        if not self.auto.try_find(\"//span[contains(text(),'Sign in to Twitter')]\"):\n            logged_in_twitter = True\n\n        self.driver.close()\n        self.auto.switch_to_window(0)\n        logger.info(f\"Logged in Twitter: {logged_in_twitter}\")\n        return logged_in_twitter\n\n    def _check_logged_in_discord(self):\n        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n        time.sleep(8)\n        logged_in_discord = False\n        if not self.auto.try_find(\"//div[contains(text(),'re so excited to see you again')]\"):\n            logged_in_discord = True\n\n        self.driver.close()\n        self.auto.switch_to_window(0)\n        logger.info(f\"Logged in discord: {logged_in_discord}\")\n        return logged_in_discord\n\n    def _daily_faucet(self, account: dict = None):\n        try:\n            url = f\"https://venom.network/faucet\"\n            self.auto.switch_to_window(-1)\n            self.driver.get(url)\n            time.sleep(5)\n            answer = self.params.get('answer')\n            self.auto.try_click(\"//a[contains(text(), 'Start')]\", 3)\n            self.auto.try_click(f\"//span[contains(text(), '{answer}')]\", 3)\n            self.auto.try_click(\"//button[contains(text(), 'Send')]\", 7)\n            self.auto.try_click(\"//span[contains(text(), 'Claim')]\", 3)\n            self.auto.sign()\n            time.sleep(15)\n            logger.info(f\"Faucet claim successfull for {account['address']}\")\n        except Exception as e:\n            logger.error(e)\n\n    def swap(self, account: dict = None):\n        pass\n\n    def addLiquidity(self, account: dict = None):\n        pass\n\n    def removeLiquidity(self, account: dict = None):\n        pass\n\n    def stake(self, account: dict = None):\n        pass\n\n    def unstake(self, account: dict = None):\n        pass\n\n    def harvest(self, account: dict = None):\n        pass\n\n    def claim(self, account: dict = None):\n        pass\n\n    def farm(self, account: dict = None):\n        pass", "class BaseAuto(object):\n\n    def __init__(self, **kwargs):\n        self.list_account = []\n        self.file_report = f\"{HOME_TMP}/report_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n        self.use_uc = kwargs.get('use_uc', True)\n        self.driver = None\n        self.auto = None\n        self.params = kwargs.get('params', {})\n\n        self.list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n\n        self.file_report = f\"{HOME_TMP}/report_{ACC_FILE_NAME}_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv\"\n\n    def save_report(self, data: dict):\n        list_index = list(COLUMN_MAPPING.values())\n\n        format_data = []\n        for k in list_index:\n            value = data.get(k) if data.get(k) else ''\n            format_data.append(value)\n\n        utils.add_to_csv(self.file_report, format_data)\n        logger.info(f\"Save report: {format_data}\")\n\n    def prepare_file_report(self):\n        file_log_latest = utils.file_latest_in_path()\n        if file_log_latest:\n            index, row = utils.find_latest_row_index_log(file_log_latest)\n            logger.info(f\"Index: {index} - total account: {len(self.list_account)}\")\n            if index < len(self.list_account):\n                # run not finish, use old file\n                self.file_report = file_log_latest\n                return index\n\n        # prepare file report\n        shutil.copyfile(f\"{CODE_HOME}/account.sample.csv\", self.file_report)\n        return 0\n\n    def process_all(self, method='deposit', **kwargs):\n        method = getattr(self, method)\n        if not method:\n            raise Exception(f\"Method {method} not found\")\n\n        # prepare list account\n        index = self.prepare_file_report()\n        list_account = self.list_account\n        if index > 0:\n            # continue from index in existing file report\n            list_account = self.list_account[index:]\n\n        create_driver = True\n        for idx, account in enumerate(list_account):\n            if create_driver:\n                self._try_start_driver(account)\n\n            real_idx = idx + index\n            logger.info(f\"Request for account: {real_idx} - {account['address']}\")\n\n            if account.get('status') != AccountStatus.Inactive:\n                # if account is active, run method\n                try:\n                    kwargs.update({\n                        'account': account,\n                    })\n                    self.params.update({\n                        'account_index': real_idx,\n                    })\n                    method(**kwargs)\n                    account['status'] = AccountStatus.Inactive\n                except Exception as e:\n                    logger.error(e)\n\n                self.driver.quit()\n                create_driver = True\n            else:\n                logger.info(f\"Account {account['address']} is inactive\")\n                create_driver = False\n\n            self.save_report(account)\n            if create_driver:\n                self._change_proxy()\n\n        logger.info(f'Request Success for account len: {len(list_account)}')\n        logger.info(f\"file report: {self.file_report}\")\n\n    def _try_start_driver(self, account):\n        while True:\n            try:\n                self.driver = self.auto.launchSeleniumWebdriver(address=account['address'])\n                if self.driver:\n                    break\n            except Exception as e:\n                logger.error(f\"An error occurred: {e}, retrying in 10 seconds.\")\n                time.sleep(10)\n\n    def _change_proxy(self):\n        if utils.force2bool(CHANGE_NETWORK):\n            # utils.change_network()\n            utils.reboot_reconnect()\n\n    def _tweet(self) -> None:\n        self.auto.switch_to_window(0)\n        self.auto.open_new_tab(\"https://twitter.com/compose/tweet\")\n        time.sleep(3)\n        self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n        self.auto.try_click(\"//div[@aria-label='Tweet text']\")\n        message = tweet().replace('\"', '')\n        self.auto.try_send_keys(\"//div[@aria-label='Tweet text']\", f\"{message}\\n\")\n        self.auto.try_click(\"//span[text()='Tweet']\", 10)\n        self.auto.try_click(\"//span[contains(text(),'Got it')]\", 5)\n        logger.info(f\"Tweet: {message}\")\n        self.driver.close()\n\n    def _follow_list(self, account: dict = None, list_acc = None) -> None:\n        account_index = self.params.get('account_index')\n        # list_fl_index = \"12,13,14,15\".split(',')\n        # list_fl_index = [int(x) for x in list_fl_index]\n\n        # if LIST_FOLLOW:\n        #     list_fl = LIST_FOLLOW.split(',')\n        #     list_fl = [int(x) for x in list_fl]\n        # else:\n        #     list_fl = [x for x in range(account_index + 1, account_index + 4)]\n\n        if account_index < 10:\n            list_fl = \"46,47,48,49\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 20:\n            list_fl = \"50,51,52,53\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 30:\n            list_fl = \"53,54,55,56\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 40:\n            list_fl = \"57,58,59,60\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 50:\n            list_fl = \"61,62,63,64\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 60:\n            list_fl = \"65,66,67,68\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 70:\n            list_fl = \"69,70,71,72\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 80:\n            list_fl = \"73,74,75,76\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 90:\n            list_fl = \"77,78,79,80\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 100:\n            list_fl = \"81,82,83,84\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 110:\n            list_fl = \"85,86,87,88\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 120:\n            list_fl = \"89,90,91,92\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 130:\n            list_fl = \"93,94,95,96\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 140:\n            list_fl = \"97,98,99,100\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        elif account_index < 150:\n            list_fl = \"101,102,103,104\".split(',')\n            list_fl = [int(x) for x in list_fl]\n        # else:\n        #     list_fl = [x for x in range(account_index - 5, account_index - 1)]\n\n        logger.info(f\"Follow list: {list_fl=}\")\n        for fli in list_fl:\n            self._follow(account=account, index_user=fli, list_acc=list_acc)\n\n    def _follow(\n            self,\n            account: dict = None,\n            index_user : int = None,\n            user_name : str = None,\n            list_acc : list = None,\n    ) -> None:\n        if index_user is None and not user_name:\n            # if not provide index_user and user_name, skip it\n            return\n        if not list_acc:\n            # if not provide list account, use default self.list_account\n            list_acc = self.list_account\n\n        if index_user is not None:\n            user_name = list_acc[index_user]['tw_acc']\n\n        self.auto.switch_to_window(0)\n        if user_name != account['tw_acc']:\n            url = f\"https://twitter.com/intent/user?screen_name={user_name}\"\n            self.auto.open_new_tab(url)\n            account_suspended = self.auto.try_find(\"//span[contains(text(),'Account suspended')]\", print_error=False)\n            if account_suspended:\n                logger.error(f\"Account {user_name} is suspended\")\n            else:\n                try:\n                    self.auto.click(FOLLOW_XP, 10)\n                except Exception as e:\n                    logger.error(f\"Error for {user_name}: {e}\")\n\n            num_following = self.auto.try_get_text('//*[@id=\"react-root\"]/div/div/div[2]/main/div/div/div/div/div/div[3]/div/div/div/div/div[4]/div[2]/a/span[1]/span', print_error=False)\n            logger.info(f\"Number Following: {num_following}\")\n            self.driver.close()\n        logger.info(f\"Follow: {user_name}\")\n\n    def _retweet_faucet(self, account, tweet_id: str = '1663134038713069570') -> None:\n        self.auto.switch_to_window(0)\n        url = f\"https://twitter.com/intent/tweet?text={account['name']}%20https://twitter.com/\" \\\n              f\"Chaineye_tools/status/{tweet_id}\"\n        logger.info(f\"Retweet: {url}\")\n        self.auto.open_new_tab(url)\n        time.sleep(4)\n        self.auto.try_click(\"//span[text()='Tweet']\", 6)\n        self.driver.close()\n\n    def _get_2fa(self, account: dict):\n        if account.get('tw_fa'):\n            return\n        self.auto.switch_to_window(0)\n        url_2fa = \"https://twitter.com/i/flow/two-factor-auth-app-enrollment\"\n        self.auto.open_new_tab(url_2fa)\n        time.sleep(7)\n        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 5)\n        self.auto.try_click(\"//span[contains(text(), 't scan the QR code')]\", 3)\n\n        text_fa = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div[1]/div/div[2]/span').text\n        logger.info(f\"2fa text: {text_fa}\")\n        account['tw_fa'] = text_fa\n        self.auto.try_click(\"//span[contains(text(), 'Next')]\", 5)\n        otp = utils.totp(text_fa)\n        otp_input = self.auto.try_find('//input')\n        otp_input.send_keys(otp)\n        self.auto.try_click(\"//span[contains(text(), 'Confirm')]\", 5)\n\n        text_b = self.auto.try_find('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div/div/div/div/div/div[2]/div[1]/div[2]/span/span/span').text\n        text_fa_backup = utils.get_fa_backup(text_b)\n        logger.info(f\"2fa backup text: {text_fa_backup}\")\n        account['tw_fab'] = text_fa_backup\n        self.auto.try_click(\"//span[contains(text(), 'Done')]\", 5)\n\n        self.auto.try_click(\"//span[contains(text(), 'Get start')]\", 7)\n        self.auto.try_click(\"//span[contains(text(), 'Got it')]\", 7)\n        logger.info(\"Get 2fa successfully\")\n\n    def login_twitter(self, acc: dict) -> None:\n        url = \"https://twitter.com/i/flow/login\"\n        self.auto.open_new_tab(url)\n        time.sleep(9)\n        # fill in email\n        twemail_or_twacc = self.auto.try_find('//input')\n\n        if acc['tw_fa']:\n            logger.info(f\"Login with 2FA {acc['tw_acc']}\")\n            twemail_or_twacc.send_keys(acc['tw_acc'])\n            self.auto.try_click('//span[text()=\"Next\"]', 6)\n            twpass_or_username = self.auto.try_finds('//input')\n            twpass_or_username[1].send_keys(acc['tw_pass'])\n            self.auto.try_click('//span[text()=\"Log in\"]', 6)\n            self.auto.try_click('//span[text()=\"Next\"]', 6)\n\n            input_totp = self.auto.try_find('//input')\n            input_totp.send_keys(utils.totp(acc['tw_fa']))\n            self.auto.try_click(\"//span[contains(text(), 'Next')]\", 10)\n            input_submit = self.auto.try_find(\"//input[@type='submit']\")\n            if input_submit:\n                input_submit.click()\n                time.sleep(10)\n                self.auto.try_click(\"//input[@type='submit']\", 8)\n\n            self.auto.try_click(\"//span[contains(text(), 'Skip for')]\", 3)\n        else:\n            logger.info('Login with password')\n            twemail_or_twacc.send_keys(acc['tw_email'])\n            self.auto.click('//span[text()=\"Next\"]', 7)\n            twpass_or_username = self.auto.try_finds('//input')\n            if len(twpass_or_username) == 1:\n                if \"gmail\" in acc['tw_email']:\n                    username = acc['tw_email'].split('@')[0]\n                else:\n                    # email with last 3 char of address\n                    username = f\"{acc['tw_email'].split('@')[0]}{acc['address'][:-3]}\"\n                twpass_or_username[0].send_keys(username)\n                self.auto.click('//span[text()=\"Next\"]', 3)\n                twpass = self.auto.try_finds('//input')\n                twpass[1].send_keys(acc['tw_pass'])\n                self.auto.click('//span[text()=\"Log in\"]', 3)\n            else:\n                twpass_or_username[1].send_keys(acc['tw_pass'])\n                self.auto.try_click('//span[text()=\"Log in\"]', 3)\n                self.auto.try_click('//span[text()=\"Next\"]', 3)\n\n        time.sleep(3)\n        logger.info(f\"Login twitter for account: {acc['tw_email']}\")\n\n    def login_discord(self, account: dict) -> None:\n        token = account['dis_token']\n        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n        script = \"\"\"\n                function login(token) {\n                setInterval(() => {\n                document.body.appendChild(document.createElement `iframe`).contentWindow.localStorage.token = `\"${token}\"`\n                }, 50);\n                setTimeout(() => {\n                location.reload();\n                }, 2500);\n                }   \n                \"\"\"\n        if token:\n            logger.info('Login with token')\n            self.driver.execute_script(script + f'\\nlogin(\"{token}\")')\n        else:\n            logger.info('Login with password')\n            twemail = self.auto.try_finds('//input')\n            twemail[0].send_keys(account['dis_email'])\n            twemail[1].send_keys(account['dis_pass'])\n            self.auto.click('//div[text()=\"Log In\"]', 8)\n\n        time.sleep(10)\n        logger.info(f\"Login discord for account: {account['dis_email']}\")\n\n    def _check_logged_in_twitter(self):\n        self.auto.open_new_tab(\"https://twitter.com/home\")\n        time.sleep(8)\n        logged_in_twitter = False\n        if not self.auto.try_find(\"//span[contains(text(),'Sign in to Twitter')]\"):\n            logged_in_twitter = True\n\n        self.driver.close()\n        self.auto.switch_to_window(0)\n        logger.info(f\"Logged in Twitter: {logged_in_twitter}\")\n        return logged_in_twitter\n\n    def _check_logged_in_discord(self):\n        self.auto.open_new_tab(\"https://discord.com/channels/@me\")\n        time.sleep(8)\n        logged_in_discord = False\n        if not self.auto.try_find(\"//div[contains(text(),'re so excited to see you again')]\"):\n            logged_in_discord = True\n\n        self.driver.close()\n        self.auto.switch_to_window(0)\n        logger.info(f\"Logged in discord: {logged_in_discord}\")\n        return logged_in_discord\n\n    def _daily_faucet(self, account: dict = None):\n        try:\n            url = f\"https://venom.network/faucet\"\n            self.auto.switch_to_window(-1)\n            self.driver.get(url)\n            time.sleep(5)\n            answer = self.params.get('answer')\n            self.auto.try_click(\"//a[contains(text(), 'Start')]\", 3)\n            self.auto.try_click(f\"//span[contains(text(), '{answer}')]\", 3)\n            self.auto.try_click(\"//button[contains(text(), 'Send')]\", 7)\n            self.auto.try_click(\"//span[contains(text(), 'Claim')]\", 3)\n            self.auto.sign()\n            time.sleep(15)\n            logger.info(f\"Faucet claim successfull for {account['address']}\")\n        except Exception as e:\n            logger.error(e)\n\n    def swap(self, account: dict = None):\n        pass\n\n    def addLiquidity(self, account: dict = None):\n        pass\n\n    def removeLiquidity(self, account: dict = None):\n        pass\n\n    def stake(self, account: dict = None):\n        pass\n\n    def unstake(self, account: dict = None):\n        pass\n\n    def harvest(self, account: dict = None):\n        pass\n\n    def claim(self, account: dict = None):\n        pass\n\n    def farm(self, account: dict = None):\n        pass", "\n\nclass VenomAuto(BaseAuto):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.use_uc = kwargs.get('use_uc', True)\n        self.auto = venom\n\n    def _daily_faucet(self, account: dict = None):\n        try:\n            url = f\"https://venom.network/faucet\"\n            self.auto.switch_to_window(-1)\n            self.driver.get(url)\n            time.sleep(10)\n            answer = self.params.get('answer')\n            self.auto.try_click(\"//a[contains(text(), 'Start')]\", 3)\n            self.auto.try_click(f\"//span[contains(text(), '{answer}')]\", 3)\n            self.auto.try_click(\"//button[contains(text(), 'Send')]\", 7)\n            self.auto.try_click(\"//span[contains(text(), 'Claim')]\", 3)\n            self.auto.sign()\n            logger.info(f\"Faucet claim successfull for {account['address']}\")\n        except Exception as e:\n            logger.error(e)\n\n    def _connect_wallet(self):\n        self.driver.refresh()\n        time.sleep(7)\n        connect_wallet = self.auto.try_find(\"//h1[contains(text(),'Complete three tasks and')]\")\n        if connect_wallet:\n            self.auto.click('//*[@id=\"root\"]/div[2]/div[1]/div[2]/div[2]/span', 2)\n            self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n            self.auto.switch_to_window(-1)\n            self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\n    def _check_logged_in_wallet(self):\n        self.auto.open_new_tab(venom.POPUP_URL)\n        logged_in_wallet = False\n        if self.auto.try_find(\"//p[contains(text(),'Account 1')]\"):\n            logged_in_wallet = True\n        self.driver.close()\n        self.auto.switch_to_window(0)\n        logger.info(f\"Logged in wallet: {logged_in_wallet}\")\n        return logged_in_wallet\n\n    def _reload_extension(self):\n        # # setup metamask with seed phrase and password\n        self.auto.open_new_tab(f\"chrome://extensions/?id={EXTENSION_ID}\")\n        time.sleep(5)\n\n        ext_ma = self.driver.find_element(By.CSS_SELECTOR, \"extensions-manager\")\n        toolbar = ext_ma.shadow_root.find_element(By.CSS_SELECTOR, \"extensions-toolbar\")\n        update_button = toolbar.shadow_root.find_element(By.ID, \"updateNow\")\n        update_button.click()\n        time.sleep(5)\n        self.driver.close()", "\n"]}
{"filename": "app/venom_auto.py", "chunked_list": ["import time\nfrom selenium.webdriver.common.by import By\n\nfrom app import utils\nfrom wallet import venom\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.enums import FOLLOW_XP\nfrom app.config import get_logger, ACC_VENOM_PATH, DAILY_ANSWER\n", "from app.config import get_logger, ACC_VENOM_PATH, DAILY_ANSWER\n\nlogger = get_logger(__name__)\n\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {", "    },\n    \"test\": {\n        \"twitter\": {\n            \"venom_network\": \"https://twitter.com/Venom_network_\",\n            \"venom_foundation\": \"https://twitter.com/VenomFoundation\",\n        },\n        \"task\": {\n            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n            \"web3_world\": \"https://venom.network/tasks/web3-world\",", "            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n            \"venom_pad\": \"https://venom.network/tasks/venom-pad\",\n            \"oasis_gallery\": \"https://venom.network/tasks/oasis-gallery\",\n            \"venom_bridge\": \"https://venom.network/tasks/venom-bridge\",\n            \"snipa\": \"https://venom.network/tasks/snipa-finance\",\n        },\n        \"app\": {\n            \"venom_stake\": \"https://testnet.venomstake.com/\",", "        \"app\": {\n            \"venom_stake\": \"https://testnet.venomstake.com/\",\n        }\n    },\n}\nVENOM_ADDRESS = \"0:077873f1453fa67b0f1ce77f1e806675acd19c4694b9738be61fd406618f2f7a\"\n\n\nclass Venom(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def incentive(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n\n        url = f\"https://venom.network/tasks\"\n        self.driver.get(url)\n        time.sleep(2)\n\n        # # setup metamask with seed phrase and password\n        # self.auto.switch_to_window(0)\n        # logged_in_wallet = self._check_logged_in_wallet()\n        # if not logged_in_wallet:\n        #     self.auto.walletSetup(account['seed_phrase'], account['password'])\n        #\n        # # click on the Connect Wallet button\n        # self.auto.switch_to_window(0)\n        # self._connect_wallet()\n        # login twitter and discord\n        self.auto.switch_to_window(0)\n        logged_in_twitter = self._check_logged_in_twitter()\n        if not logged_in_twitter:\n            self.login_twitter(account)\n            self.driver.close()\n        # self._tweet()\n        self._follow_list(account)\n        self._follow(account=account, user_name=\"Chaineye_tools\")\n        self._retweet_faucet(account)\n        # if account['dis_token']:\n        #     self.auto.switch_to_window(0)\n        #     logged_in_discord = self._check_logged_in_discord()\n        #     if not logged_in_discord:\n        #         self.login_discord(account)\n        #         self.driver.close()\n\n        # main incentive\n        # self.auto.switch_to_window(0)\n        # self._venom_pad(account)\n        # self.auto.switch_to_window(0)\n        # self._venom_stake(account)\n        # self.auto.switch_to_window(0)\n        # self._foundation(account)\n        # self.auto.switch_to_window(0)\n        # self._venom_wallet(account)\n        # self.auto.switch_to_window(0)\n        # self._web3_world(account)\n        # self.auto.switch_to_window(0)\n        # self._bridge(account)\n        # self.auto.switch_to_window(0)\n        # self._oasis_gallery(account)\n        # self.auto.switch_to_window(0)\n        # self._daily_faucet(account)\n        # self.auto.switch_to_window(0)\n        # self._snipa_finance(account)\n        # self.auto.switch_to_window(0)\n        # self._snipa(account)\n\n        # self.auto.switch_to_window(0)\n        # self.driver.get(url)\n        # time.sleep(5)\n        # claim = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n        # if claim:\n        #     claim.click()\n        #     time.sleep(4)\n        #     self.auto.sign()\n        # self.auto.switch_to_window(0)\n        # self._check_incentive(account)\n\n        logger.info(f\"Incentive success\")\n\n    def _check_incentive(self, account : dict = None):\n        url = f\"https://venom.network/tasks\"\n        self.driver.get(url)\n        time.sleep(12)\n        element = self.auto.try_find('//*[@id=\"ecosystem\"]/div[1]/a/b')\n        new_nfts = element.text if element else 0\n        if utils.force_int(new_nfts) != 7:\n            logger.info(new_nfts)\n        description = f\"{new_nfts} NFTs\"\n        logger.info(description)\n        account['description'] = description\n\n    def balance(self, account):\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n        self.auto.switch_to_window(0)\n        self.driver.get(venom.POPUP_URL)\n        time.sleep(2)\n        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n        if balance:\n            balance = balance.text.split(\".\")[0]\n            logger.info(f\"Balance: {balance}\")\n            account['balance'] = balance\n\n        logger.info(f\"process account success\")\n\n    def send_wallet(self, account):\n        amount = self.params.get('amount', 1)\n        receiver = VENOM_ADDRESS\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n        self.auto.switch_to_window(0)\n        self.driver.get(venom.POPUP_URL)\n        time.sleep(3)\n\n        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n        if balance:\n            balance = balance.text.split(\".\")[0]\n            logger.info(f\"Balance: {balance}\")\n            account['balance'] = balance\n\n        self._get_address(account)\n\n        self.auto.switch_to_window(0)\n        self.auto.send(receiver=receiver, amount=amount)\n\n        self.auto.switch_to_window(0)\n        time.sleep(1)\n        logger.info(f\"send ${amount} VENOM to {receiver} success\")\n\n    def _get_address(self, account):\n        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div', 2)\n        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div/div/ul/li[2]/button', 7)\n        self.auto.switch_to_window(-1)\n        address = self.auto.try_find('//*[@id=\"root\"]/div/main/div/div[2]/div[2]/div[2]/div/div[1]/div[2]/div[2]/div/div/div/div/div')\n        if address:\n            address = address.text\n            logger.info(f\"Address: {address}\")\n            account['address'] = address\n        self.driver.close()\n\n    def _venom_stake(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_stake'])\n            time.sleep(5)\n\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _venom_pad(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_pad'])\n            time.sleep(5)\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                # job done, move on\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n\n            # they will popup a new window for twitter follow, go to that window\n            self.auto.switch_to_window(-1)\n            tweet_tw = self.auto.try_find(FOLLOW_XP)\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(5)  # must wait for venom to check twitter follow\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            # wait to solve captcha\n            while len(self.driver.window_handles) == 1:\n                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n                time.sleep(20)\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                time.sleep(8)\n                self.auto.try_click(FOLLOW_XP, 4)\n                self.driver.close()\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 6)\n            # they will popup new tab for tweet\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(30)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _first_task(self, acc: dict = None):\n        login_tw = self.auto.try_find(\"//button[contains(text(),'Login with Twitter')]\")\n        if login_tw:\n            login_tw.click()\n            time.sleep(4)\n            self.auto.try_click(\"allow\", time_to_sleep=10, by=By.ID)\n            self.auto.switch_to_window(1)\n\n        follow_btn = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n        if follow_btn:\n            follow_btn.click()\n            time.sleep(4)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span', 10)\n            self.driver.close()\n            self.auto.switch_to_window(0)\n            time.sleep(55)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 5)\n\n        claim_btn = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n        if claim_btn:\n            claim_btn.click()\n            time.sleep(4)\n            self.auto.sign()\n            time.sleep(5)\n\n    def _foundation(self, acc: dict = None):\n        try:\n            self.auto.switch_to_window(-1)\n            self.driver.get(self.config['task']['venom_foundation'])\n            time.sleep(8)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(3)\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                self.auto.try_click(\n                    \"//*[@id='layers']/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span\", 4\n                )\n                self.driver.close()\n\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 4)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _venom_wallet(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_wallet'])\n            time.sleep(8)\n\n            check_button = self.auto.try_find(\"//button[contains(text(),'Check')]\")\n            if check_button:\n                self.auto.send(receiver=VENOM_ADDRESS, amount='1')\n                self.auto.switch_to_window(-1)\n                self.driver.close()\n\n            time.sleep(4)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 10)\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def daily_faucet(self, account: dict = None):\n        url = f\"https://venom.network/faucet\"\n        self.driver.get(url)\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        # click on the Connect Wallet button\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"root\"]/div[1]/div[1]/div[2]/div[2]/span', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n        self._daily_faucet(account)\n        logger.info(f\"Faucet claim successfull for {account['address']}\")\n\n    def _web3_world(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['web3_world'])\n            time.sleep(8)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if follow_tw:\n                follow_tw.click()\n                time.sleep(5)\n            else:\n                self.auto.open_new_tab(\"https://twitter.com/intent/user?screen_name=w3w_exchange\")\n                self.auto.switch_to_window(-1)\n                time.sleep(5)\n\n            self.auto.switch_to_window(-1)\n            fl_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_tw:\n                fl_tw.click()\n                self.driver.close()\n                time.sleep(10)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n            while not mint_button:\n                self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n                mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n\n            mint_button.click()\n            time.sleep(6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _oasis_gallery(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['oasis_gallery'])\n            time.sleep(10)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            while not follow_tw:\n                self.driver.refresh()\n                time.sleep(5)\n                follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\n            follow_tw.click()\n            time.sleep(6)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(6)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(20)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Mint')]\", 6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _snipa(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['snipa'])\n            time.sleep(10)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 15)\n            # they will popup new tab for tweet\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(5)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            # wait to solve captcha\n            try_counter = 0\n            while len(self.driver.window_handles) == 1:\n                mint = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n                if mint:\n                    break\n\n                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n                time.sleep(20)\n                if try_counter > 5:\n                    raise Exception(\"Captcha not solved\")\n                try_counter += 1\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                time.sleep(15)\n                self.auto.try_click(\"//span[contains(text(),'Tweet')]\", 3)\n                self.driver.close()\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Tweet')]\", 20)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _snipa_finance(self, account: dict = None):\n        try:\n            self.auto.switch_to_window(0)\n            self.driver.get(\"https://venom.snipa.finance\")\n            time.sleep(8)\n\n            # connect venom wallet\n            login = self.auto.try_find(\"//span[contains(text(),'ogin via Walle')]\")\n            if login:\n                login.click()\n                time.sleep(3)\n                self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n                self.auto.switch_to_window(-1)\n                self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\n            self.auto.switch_to_window(-1)\n            join = self.auto.try_find(\"//div[contains(text(),'Join Venom Testnet')]\")\n            if join:\n                join.click()\n                time.sleep(3)\n                self.auto.confirm(password=account['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _bridge(self, acc: dict = None):\n        try:\n            self.auto.switch_to_window(-1)\n            self.driver.get(self.config['task']['venom_bridge'])\n            time.sleep(4)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n            self.auto.switch_to_window(-1)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(6)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n        except Exception as e:\n            logger.error(e)", "class Venom(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def incentive(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n\n        url = f\"https://venom.network/tasks\"\n        self.driver.get(url)\n        time.sleep(2)\n\n        # # setup metamask with seed phrase and password\n        # self.auto.switch_to_window(0)\n        # logged_in_wallet = self._check_logged_in_wallet()\n        # if not logged_in_wallet:\n        #     self.auto.walletSetup(account['seed_phrase'], account['password'])\n        #\n        # # click on the Connect Wallet button\n        # self.auto.switch_to_window(0)\n        # self._connect_wallet()\n        # login twitter and discord\n        self.auto.switch_to_window(0)\n        logged_in_twitter = self._check_logged_in_twitter()\n        if not logged_in_twitter:\n            self.login_twitter(account)\n            self.driver.close()\n        # self._tweet()\n        self._follow_list(account)\n        self._follow(account=account, user_name=\"Chaineye_tools\")\n        self._retweet_faucet(account)\n        # if account['dis_token']:\n        #     self.auto.switch_to_window(0)\n        #     logged_in_discord = self._check_logged_in_discord()\n        #     if not logged_in_discord:\n        #         self.login_discord(account)\n        #         self.driver.close()\n\n        # main incentive\n        # self.auto.switch_to_window(0)\n        # self._venom_pad(account)\n        # self.auto.switch_to_window(0)\n        # self._venom_stake(account)\n        # self.auto.switch_to_window(0)\n        # self._foundation(account)\n        # self.auto.switch_to_window(0)\n        # self._venom_wallet(account)\n        # self.auto.switch_to_window(0)\n        # self._web3_world(account)\n        # self.auto.switch_to_window(0)\n        # self._bridge(account)\n        # self.auto.switch_to_window(0)\n        # self._oasis_gallery(account)\n        # self.auto.switch_to_window(0)\n        # self._daily_faucet(account)\n        # self.auto.switch_to_window(0)\n        # self._snipa_finance(account)\n        # self.auto.switch_to_window(0)\n        # self._snipa(account)\n\n        # self.auto.switch_to_window(0)\n        # self.driver.get(url)\n        # time.sleep(5)\n        # claim = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n        # if claim:\n        #     claim.click()\n        #     time.sleep(4)\n        #     self.auto.sign()\n        # self.auto.switch_to_window(0)\n        # self._check_incentive(account)\n\n        logger.info(f\"Incentive success\")\n\n    def _check_incentive(self, account : dict = None):\n        url = f\"https://venom.network/tasks\"\n        self.driver.get(url)\n        time.sleep(12)\n        element = self.auto.try_find('//*[@id=\"ecosystem\"]/div[1]/a/b')\n        new_nfts = element.text if element else 0\n        if utils.force_int(new_nfts) != 7:\n            logger.info(new_nfts)\n        description = f\"{new_nfts} NFTs\"\n        logger.info(description)\n        account['description'] = description\n\n    def balance(self, account):\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n        self.auto.switch_to_window(0)\n        self.driver.get(venom.POPUP_URL)\n        time.sleep(2)\n        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n        if balance:\n            balance = balance.text.split(\".\")[0]\n            logger.info(f\"Balance: {balance}\")\n            account['balance'] = balance\n\n        logger.info(f\"process account success\")\n\n    def send_wallet(self, account):\n        amount = self.params.get('amount', 1)\n        receiver = VENOM_ADDRESS\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n        self.auto.switch_to_window(0)\n        self.driver.get(venom.POPUP_URL)\n        time.sleep(3)\n\n        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n        if balance:\n            balance = balance.text.split(\".\")[0]\n            logger.info(f\"Balance: {balance}\")\n            account['balance'] = balance\n\n        self._get_address(account)\n\n        self.auto.switch_to_window(0)\n        self.auto.send(receiver=receiver, amount=amount)\n\n        self.auto.switch_to_window(0)\n        time.sleep(1)\n        logger.info(f\"send ${amount} VENOM to {receiver} success\")\n\n    def _get_address(self, account):\n        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div', 2)\n        self.auto.try_click('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[1]/div[1]/div/div/ul/li[2]/button', 7)\n        self.auto.switch_to_window(-1)\n        address = self.auto.try_find('//*[@id=\"root\"]/div/main/div/div[2]/div[2]/div[2]/div/div[1]/div[2]/div[2]/div/div/div/div/div')\n        if address:\n            address = address.text\n            logger.info(f\"Address: {address}\")\n            account['address'] = address\n        self.driver.close()\n\n    def _venom_stake(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_stake'])\n            time.sleep(5)\n\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _venom_pad(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_pad'])\n            time.sleep(5)\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                # job done, move on\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n\n            # they will popup a new window for twitter follow, go to that window\n            self.auto.switch_to_window(-1)\n            tweet_tw = self.auto.try_find(FOLLOW_XP)\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(5)  # must wait for venom to check twitter follow\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            # wait to solve captcha\n            while len(self.driver.window_handles) == 1:\n                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n                time.sleep(20)\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                time.sleep(8)\n                self.auto.try_click(FOLLOW_XP, 4)\n                self.driver.close()\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 6)\n            # they will popup new tab for tweet\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(30)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _first_task(self, acc: dict = None):\n        login_tw = self.auto.try_find(\"//button[contains(text(),'Login with Twitter')]\")\n        if login_tw:\n            login_tw.click()\n            time.sleep(4)\n            self.auto.try_click(\"allow\", time_to_sleep=10, by=By.ID)\n            self.auto.switch_to_window(1)\n\n        follow_btn = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n        if follow_btn:\n            follow_btn.click()\n            time.sleep(4)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click('//*[@id=\"layers\"]/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span', 10)\n            self.driver.close()\n            self.auto.switch_to_window(0)\n            time.sleep(55)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 5)\n\n        claim_btn = self.auto.try_find(\"//button[contains(text(),'Claim')]\")\n        if claim_btn:\n            claim_btn.click()\n            time.sleep(4)\n            self.auto.sign()\n            time.sleep(5)\n\n    def _foundation(self, acc: dict = None):\n        try:\n            self.auto.switch_to_window(-1)\n            self.driver.get(self.config['task']['venom_foundation'])\n            time.sleep(8)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(3)\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                self.auto.try_click(\n                    \"//*[@id='layers']/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span\", 4\n                )\n                self.driver.close()\n\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 4)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(20)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 30)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _venom_wallet(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['venom_wallet'])\n            time.sleep(8)\n\n            check_button = self.auto.try_find(\"//button[contains(text(),'Check')]\")\n            if check_button:\n                self.auto.send(receiver=VENOM_ADDRESS, amount='1')\n                self.auto.switch_to_window(-1)\n                self.driver.close()\n\n            time.sleep(4)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 10)\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def daily_faucet(self, account: dict = None):\n        url = f\"https://venom.network/faucet\"\n        self.driver.get(url)\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        # click on the Connect Wallet button\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"root\"]/div[1]/div[1]/div[2]/div[2]/span', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n        self._daily_faucet(account)\n        logger.info(f\"Faucet claim successfull for {account['address']}\")\n\n    def _web3_world(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['web3_world'])\n            time.sleep(8)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if follow_tw:\n                follow_tw.click()\n                time.sleep(5)\n            else:\n                self.auto.open_new_tab(\"https://twitter.com/intent/user?screen_name=w3w_exchange\")\n                self.auto.switch_to_window(-1)\n                time.sleep(5)\n\n            self.auto.switch_to_window(-1)\n            fl_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_tw:\n                fl_tw.click()\n                self.driver.close()\n                time.sleep(10)\n            self.auto.switch_to_window(0)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n            while not mint_button:\n                self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n                mint_button = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n\n            mint_button.click()\n            time.sleep(6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _oasis_gallery(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['oasis_gallery'])\n            time.sleep(10)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            while not follow_tw:\n                self.driver.refresh()\n                time.sleep(5)\n                follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n\n            follow_tw.click()\n            time.sleep(6)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(6)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(20)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Mint')]\", 6)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _snipa(self, acc: dict = None):\n        try:\n            self.driver.get(self.config['task']['snipa'])\n            time.sleep(10)\n\n            self.auto.try_click(\"//a[contains(text(),'Tweet')]\", 15)\n            # they will popup new tab for tweet\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//span[contains(text(),'Maybe later')]\", 4)\n            tweet_tw = self.auto.try_find(\"//span[contains(text(),'Tweet')]\")\n            if tweet_tw:\n                tweet_tw.click()\n                time.sleep(2)\n                self.driver.close()\n                time.sleep(5)\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            # wait to solve captcha\n            try_counter = 0\n            while len(self.driver.window_handles) == 1:\n                mint = self.auto.try_find(\"//button[contains(text(),'Mint')]\")\n                if mint:\n                    break\n\n                self.auto.try_click(\"//button[contains(text(),'Check')]\")\n                time.sleep(20)\n                if try_counter > 5:\n                    raise Exception(\"Captcha not solved\")\n                try_counter += 1\n\n            if len(self.driver.window_handles) > 1:\n                # they may popup a new window for twitter follow again, go to that window and follow it\n                # and then close window\n                self.auto.switch_to_window(-1)\n                time.sleep(15)\n                self.auto.try_click(\"//span[contains(text(),'Tweet')]\", 3)\n                self.driver.close()\n\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Tweet')]\", 20)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 20)\n\n            self.auto.click(\"//button[contains(text(),'Mint')]\", 4)\n            self.auto.confirm(acc['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _snipa_finance(self, account: dict = None):\n        try:\n            self.auto.switch_to_window(0)\n            self.driver.get(\"https://venom.snipa.finance\")\n            time.sleep(8)\n\n            # connect venom wallet\n            login = self.auto.try_find(\"//span[contains(text(),'ogin via Walle')]\")\n            if login:\n                login.click()\n                time.sleep(3)\n                self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n                self.auto.switch_to_window(-1)\n                self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\n            self.auto.switch_to_window(-1)\n            join = self.auto.try_find(\"//div[contains(text(),'Join Venom Testnet')]\")\n            if join:\n                join.click()\n                time.sleep(3)\n                self.auto.confirm(password=account['password'])\n        except Exception as e:\n            logger.error(e)\n\n    def _bridge(self, acc: dict = None):\n        try:\n            self.auto.switch_to_window(-1)\n            self.driver.get(self.config['task']['venom_bridge'])\n            time.sleep(4)\n\n            follow_tw = self.auto.try_find(\"//a[contains(text(),'Follow')]\")\n            if not follow_tw:\n                return\n\n            follow_tw.click()\n            time.sleep(6)\n            self.auto.switch_to_window(-1)\n            fl_again_tw = self.auto.try_find(FOLLOW_XP)\n            if fl_again_tw:\n                fl_again_tw.click()\n                time.sleep(6)\n                self.driver.close()\n            self.auto.switch_to_window(-1)\n            self.auto.try_click(\"//button[contains(text(),'Check')]\", 4)\n        except Exception as e:\n            logger.error(e)", "\n\nif __name__ == '__main__':\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    incentive_params = {\n        \"account\": list_account[0],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"answer\": DAILY_ANSWER,\n        \"amount\": \"1\",\n    }\n    try:\n        vn = Venom(\n            params=params\n        )\n        vn.process_all(method=\"incentive\")\n        # vn.incentive(**incentive_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/config.py", "chunked_list": ["import os\nimport logging\nfrom dotenv import load_dotenv\n\nload_dotenv()\nlogger = logging.getLogger(__name__)\nCODE_HOME = os.path.abspath(os.path.dirname(__file__) + '/..')\nHOME_PACKAGE = os.path.abspath(os.path.dirname(__file__) + '/package')\nPATH_OF_AIRPORT = \"/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport\"\n", "PATH_OF_AIRPORT = \"/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport\"\n\nHOME_TMP = f'{CODE_HOME}/tmp'\nHOME_LOG = f'{CODE_HOME}/log'\nlist_make_dir = [\n    HOME_TMP, HOME_LOG\n]\nfor _dir in list_make_dir:\n    # make sure the folder exists before using it\n    os.makedirs(_dir, exist_ok=True)", "\nACC_PATH = os.environ.get('ACC_PATH')\nACC_VENOM_PATH = os.environ.get('ACC_VENOM_PATH')\ntry:\n    ACC_PATH = os.path.join(os.path.dirname(__file__), os.pardir, os.environ.get('ACC_PATH'))\n    ACC_VENOM_PATH = os.path.join(os.path.dirname(__file__), os.pardir, os.environ.get('ACC_VENOM_PATH'))\nexcept Exception as e:\n    print(f\"{ACC_PATH=} and {ACC_VENOM_PATH} Error: {e}\")\n\nACC_FILE_NAME = ACC_VENOM_PATH.split('/')[-1].replace('.csv', '')", "\nACC_FILE_NAME = ACC_VENOM_PATH.split('/')[-1].replace('.csv', '')\nWAIT_TIME = os.environ.get('WAIT_TIME')\nPASSWORD = os.environ.get('PASSWORD')  # password default for all accounts\n\nHEADLESS = os.environ.get('HEADLESS')      # for headless mode chrome\nWIDTH    = os.environ.get('WIDTH', 1300)   # for which width of chrome\nHEIGHT   = os.environ.get('HEIGHT', 1020)  # for which height of chrome\n\n# download the newest version of keplr extension from:", "\n# download the newest version of keplr extension from:\n# ref. https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap\n# or from  https://github.com/chainapsis/keplr-wallet\n# or get from your local machine\n# /Users/$USER/Library/Application\\ Support/Google/Chrome/Default/Extensions/\nEXTENSION_DIR      = os.environ.get('EXTENSION_DIR')\nEXTENSION_CRX      = os.environ.get('EXTENSION_CRX')\nEXTENSION_ID       = os.environ.get('EXTENSION_ID')\nDRIVER_PATH        = os.environ.get('DRIVER_PATH')", "EXTENSION_ID       = os.environ.get('EXTENSION_ID')\nDRIVER_PATH        = os.environ.get('DRIVER_PATH')\n\nAPI_KEY            = os.environ.get('API_KEY')\nDAILY_ANSWER       = os.environ.get('DAILY_ANSWER')\n\n# usefull extension, add more if you want\nHEKT_CAPTCHA       = os.environ.get('HEKT_CAPTCHA')\nDISCORD_LOGIN      = os.environ.get('DISCORD_LOGIN')\n", "DISCORD_LOGIN      = os.environ.get('DISCORD_LOGIN')\n\nEXTENSION_META_DIR = os.environ.get('EXTENSION_META_DIR')\nEXTENSION_META_ID  = os.environ.get('EXTENSION_META_ID')\n\nUSER_DATA_DIR      = os.environ.get('USER_DATA_DIR')\nALL_USER_DATA_DIR  = os.environ.get('ALL_USER_DATA_DIR')  # for all user data dir\nDEFAULT_WAIT_CONFIRM = int(os.environ.get('DEFAULT_WAIT_CONFIRM')) or 60\n\n", "\n\nDEFAULT_EXTENSION = f\"{EXTENSION_DIR}\"\nfor ex in [HEKT_CAPTCHA, DISCORD_LOGIN]:\n    if ex:\n        DEFAULT_EXTENSION += f\",{ex}\"\n\nNETWORK_PASSWORD = os.environ.get('NETWORK_PASSWORD')\nNETWORK_NAME1    = os.environ.get('NETWORK_NAME1')\nNETWORK_NAME2    = os.environ.get('NETWORK_NAME2')", "NETWORK_NAME1    = os.environ.get('NETWORK_NAME1')\nNETWORK_NAME2    = os.environ.get('NETWORK_NAME2')\nCHANGE_NETWORK   = os.environ.get('CHANGE_NETWORK')\nLIST_NETWORK     = [NETWORK_NAME1, NETWORK_NAME2]\nLIST_FOLLOW      = os.environ.get('LIST_FOLLOW')\nMAIN_INDEX       = int(os.environ.get('MAIN_INDEX')) or 0\n\n\ndef get_logger(name):\n    log = logging.getLogger(name)\n    log.setLevel(\"DEBUG\")\n\n    # Create handlers\n    c_handler = logging.StreamHandler()\n\n    # Create formatters and add it to handlers\n    # Configure the logger\n    simple_format = logging.Formatter(\n        \"%(asctime)s [%(funcName)s() +%(lineno)d]: %(levelname)-8s %(message)s\",\n        datefmt=\"%b-%d %H:%M:%S%Z\"\n    )\n    c_handler.setFormatter(simple_format)\n\n    # Add handlers to the logger\n    log.addHandler(c_handler)\n\n    return log", "def get_logger(name):\n    log = logging.getLogger(name)\n    log.setLevel(\"DEBUG\")\n\n    # Create handlers\n    c_handler = logging.StreamHandler()\n\n    # Create formatters and add it to handlers\n    # Configure the logger\n    simple_format = logging.Formatter(\n        \"%(asctime)s [%(funcName)s() +%(lineno)d]: %(levelname)-8s %(message)s\",\n        datefmt=\"%b-%d %H:%M:%S%Z\"\n    )\n    c_handler.setFormatter(simple_format)\n\n    # Add handlers to the logger\n    log.addHandler(c_handler)\n\n    return log", "\n\n# Use this variable for global project\nlogger = get_logger(__name__)\n"]}
{"filename": "app/sent.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME\nfrom wallet import venom\n\nlogger = get_logger(__name__)\n\n", "\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"ylide\": \"https://testnet.web3.world\",\n        }", "            \"ylide\": \"https://testnet.web3.world\",\n        }\n    },\n}\n\n\nclass Wallet(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def sent(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n        receiver = '0:e78ef3c0d28ec2081050f976afe35d60013e2dd91e749d1ea0e58a81f11820d0'\n        self.driver.get(f\"{self.config['app']['ylide']}\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.driver.get(venom.POPUP_URL)\n        time.sleep(3)\n\n        balance = self.auto.try_find('//*[@id=\"root\"]/div/div[1]/div[2]/div[1]/div/div[1]/div/div/div[2]')\n        if balance:\n            balance = balance.text.split(\".\")[0]\n            logger.info(f\"Balance: {balance}\")\n            if balance and int(balance) > 10:\n                amount = int(balance) - 10\n                self.auto.switch_to_window(0)\n                self.auto.send(receiver=receiver, amount=amount)\n\n        self.auto.switch_to_window(0)\n        time.sleep(1)\n        logger.info(f\"Incentive success\")\n        self.driver.quit()", "\n\nif __name__ == '__main__':\n    fp = f\"{CODE_HOME}/account.venomall.csv\"\n    list_account = AccountLoader(fp=fp).parser_file()\n    swap_params = {\n        \"account\": list_account[0],\n    }\n    params = {\n        \"list_add\": list_account,\n    }\n    try:\n        for account in list_account[21:]:\n            vn = Wallet(params=params)\n            vn.sent(**{\n                \"account\": account,\n            })\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/account.py", "chunked_list": ["from app import utils\nfrom app.config import ACC_PATH\nfrom app.enums import COLUMN_MAPPING\n\n\nclass AccountLoader(object):\n    def __init__(self, fp=None, **kwargs):\n        self.dir = fp or ACC_PATH\n\n    def parser_file(self):\n        parsed_records = []\n\n        # region read file upload\n        if self.dir.lower().endswith('.csv'):\n            raw_v_rows = self._read_csv_file()\n        elif self.dir.lower().endswith('.xlsx'):\n            raw_v_rows = self._read_xlsx_file()\n        else:\n            raise Exception\n        # endregion\n\n        # region covert data\n        parser_all = {\n            'name': lambda v: str(v).strip() if v else None,\n            'address': lambda v: str(v).strip() if v else None,\n            'private_key': lambda v: str(v).strip() if v else None,\n            'seed_phrase': lambda v: str(v).strip() if v else None,\n            'password': lambda v: str(v).strip() if v else None,\n            'status': lambda v: str(v).strip() if v else None,\n            'balance': lambda v: str(v).strip() if v else None,\n            'tw_email': lambda v: str(v).strip() if v else None,\n            'tw_pass': lambda v: str(v).strip() if v else None,\n            'dis_email': lambda v: str(v).strip() if v else None,\n            'dis_pass': lambda v: str(v).strip() if v else None,\n            'description': lambda v: str(v).strip() if v else None,\n        }\n\n        kept_as_is = lambda v: v\n        for rvr in raw_v_rows:\n            pr = dict()  # pr aka parsed_row\n            for k, v in rvr.items():  # :k aka key, :v aka value\n                parser_func = parser_all.get(k, kept_as_is)\n                pr[k] = parser_func(v)\n            parsed_records.append(pr)\n\n        # endregion\n        return parsed_records\n\n    def _read_csv_file(self):\n        return utils.read_csv_file(dir_file=self.dir, column_mapping=COLUMN_MAPPING)\n\n    def _read_xlsx_file(self):\n        return utils.read_xlsx_file(dir_file=self.dir, column_mapping=COLUMN_MAPPING)", "\n"]}
{"filename": "app/enums.py", "chunked_list": ["from enum import Enum, EnumMeta\n\nFOLLOW_XP = \"//*[@id='layers']/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/span\"\n\n\nclass EnumDirectValueMeta(EnumMeta):\n    def __getattribute__(cls, name):\n        value = super().__getattribute__(name)\n        if isinstance(value, cls):\n            value = value.value\n        return value", "\n\nclass BaseEnum(Enum, metaclass=EnumDirectValueMeta):\n    @classmethod\n    def all(cls, except_list=None):\n        if except_list is None:\n            except_list = []\n        return [c.value for c in cls if c.value not in except_list]\n\n    @classmethod\n    def keys(cls):\n        return [k.name for k in cls]\n\n    @classmethod\n    def has_value(cls, value):\n        return value in cls._value2member_map_\n\n    @classmethod\n    def all_element_index(cls, index):\n        # check element is list and len\n        first_element = cls.all()[0]\n        if type(first_element) in (list, tuple):\n            if index > len(first_element) - 1:\n                return []\n\n        e = []\n        for c in cls.all():\n            e.append(c[index])\n\n        return e", "\n\nclass AccountStatus(BaseEnum):\n    Active = '0'\n    Inactive = '1'\n\n\nclass GasPrice(BaseEnum):\n    Low = 'Low'\n    Average = 'Average'\n    High = 'High'", "\n\nCOLUMN_MAPPING = {\n    'Name': 'name',\n    'Address': 'address',\n    'Private Key': 'private_key',\n    \"Seed Phrase\": 'seed_phrase',\n    \"Password\": 'password',\n    \"Status\": 'status',\n    \"Balance\": 'balance',", "    \"Status\": 'status',\n    \"Balance\": 'balance',\n    \"TWACC\": 'tw_acc',\n    \"TWPASS\": 'tw_pass',\n    \"TWFA\": 'tw_fa',\n    \"TWEMAIL\": 'tw_email',\n    \"DISEMAIL\": 'dis_email',\n    \"DISPASS\": 'dis_pass',\n    \"DISTOKEN\": 'dis_token',\n    \"TWFAB\": 'tw_fab',", "    \"DISTOKEN\": 'dis_token',\n    \"TWFAB\": 'tw_fab',\n    'Description': 'description',\n}\n"]}
{"filename": "app/numi.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, EXTENSION_ID\n\nlogger = get_logger(__name__)\n\n\nCONFIG = {", "\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"numi\": \"https://club.numi.net\",\n        }\n    },", "        }\n    },\n}\n\n\nclass Numi(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def buy(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n\n        self.driver.get(f\"{self.config['app']['numi']}\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        logged_in_twitter = self._check_logged_in_twitter()\n        if not logged_in_twitter:\n            self.login_twitter(account)\n            self.driver.close()\n\n        self._tweet()\n        self._follow_list(account=account, list_acc=self.list_tw_follow)\n\n        self.auto.switch_to_window(0)\n        self._reload_extension()\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(10)\n        self.auto.click(\"//div[contains(text(),'Log In')]\", 3)\n\n        # click button Sign up and role tab\n        self.auto.click(\"//button[contains(text(),'Sign up')][@role='tab']\", 3)\n\n        # sign up\n        self.auto.switch_to_window(0)\n        inputs = self.auto.try_finds(\"//input\")\n        inputs[0].send_keys(account['tw_acc'])\n        time.sleep(0.3)\n        inputs[1].send_keys(account['tw_email'])\n        time.sleep(0.3)\n        inputs[2].send_keys(account['password'])\n        time.sleep(0.3)\n        inputs[3].send_keys(account['password'])\n        time.sleep(0.3)\n        inputs[4].click()\n        time.sleep(0.3)\n        inputs[5].click()\n        time.sleep(0.3)\n        self.auto.click(\"//div[contains(text(),'Sign up')]\", 60)\n\n        self.auto.switch_to_window(0)\n        self.auto.click(\"//div[contains(text(),'Connect wallet')]\", 5)\n        self.auto.switch_to_window(-1)\n        self.auto.click(\"//div[contains(text(),'Connect')]\", 5)\n        self.auto.sign()\n\n        # buy\n        self.auto.switch_to_window(0)\n        self.driver.get(f\"{self.config['app']['numi']}/nft/648728d4b0f2b854106cf579\")\n        time.sleep(10)\n        buy_for_btn = self.auto.try_find(\"//div[contains(text(),'Buy for')]\")\n        while not buy_for_btn:\n            time.sleep(10)\n            buy_for_btn = self.auto.try_find(\"//div[contains(text(),'Buy for')]\")\n\n        self.auto.click(\"//div[contains(text(),'Buy for')]\", 6)\n        self.auto.click(\"//input[@type='checkbox']\", 3)\n        buy_for_btn_2 = self.auto.try_finds(\"//div[contains(text(),'Buy for')]\")\n        buy_for_btn_2[-1].click()\n        time.sleep(10)\n        self.auto.confirm()\n\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    list_tw_follow = AccountLoader(fp=f\"{CODE_HOME}/twitter140.csv\").parser_file()\n    swap_params = {\n        \"account\": list_account[7],\n    }\n    params = {\n        \"list_add\": list_account,\n    }\n    try:\n        vn = Numi(\n            use_uc=True,\n            params=params,\n            list_tw_follow=list_tw_follow,\n        )\n        vn.process_all(method=\"buy\")\n        # vn.buy(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/utils.py", "chunked_list": ["import base64\nimport copy\nimport csv\nimport hmac\nimport json\nimport subprocess\nimport time\nimport requests\nimport openpyxl\nimport os", "import openpyxl\nimport os\nimport pandas as pd\nimport random\nimport string\nfrom pywifi import ControlConnection\nfrom dongle_lte_api import Dongle\nfrom app.config import HOME_PACKAGE, HOME_TMP, get_logger, USER_DATA_DIR, ALL_USER_DATA_DIR, NETWORK_PASSWORD, \\\n    LIST_NETWORK, PATH_OF_AIRPORT\n", "    LIST_NETWORK, PATH_OF_AIRPORT\n\nlogger = get_logger(__name__)\n\n\ndef read_xlsx_file(dir_file: str, column_mapping: dict = None, sheet_name: str = None) -> list:\n    wb = openpyxl.load_workbook(dir_file)\n    if not sheet_name:\n        sheet_name = wb.sheetnames[0]\n    ws = wb[sheet_name]  # the 1st sheet at index 0\n\n    max_column = ws.max_column\n    max_row = ws.max_row\n\n    raw_headers = [ws.cell(row=1, column=ci).value for ci in range(1, max_column + 1)]  # ci aka column_index\n    raw_headers = list(filter(None, raw_headers))  # remove None column out of header list\n\n    v_fields = [h and column_mapping.get(h.strip()) for h in\n                raw_headers]  # h aka header, ensure header is not null to strip and no error is thrown\n    raw_v_rows = []  # raw_v_rows aka raw vehicle rows\n    col_count = len(raw_headers)\n    for ri in range(2, max_row + 1):  # ri aka row_index - we skip the 1st row which is the header rows\n        values = [ws.cell(row=ri, column=ci).value for ci in range(1, col_count + 1)]  # ci aka column_index\n        rvr = dict(zip(v_fields, values))  # rvr aka raw_vehicle_row\n        raw_v_rows.append(rvr)\n    return raw_v_rows", "\n\ndef read_csv_file(dir_file: str, column_mapping: dict = None) -> list:\n    raw_v_rows = []  # raw_v_rows aka raw vehicle rows\n    # region read csv\n    csv.register_dialect('PARCEL_dialect',\n                         delimiter=',',\n                         quoting=csv.QUOTE_ALL,\n                         skipinitialspace=True\n                         )\n    with open(dir_file, mode='r') as csv_file:\n        csv_reader = csv.DictReader(csv_file, dialect='PARCEL_dialect')\n        for row in csv_reader:\n            r = dict()  # r aka record\n            for key, value in column_mapping.items():\n                r[value] = row.get(key)\n            raw_v_rows.append(r)\n    return raw_v_rows", "\n\ndef load_abi(file_name):\n    fp = f'{HOME_PACKAGE}/{file_name}'\n    with open(fp, 'r') as f:\n        abi = json.load(f)\n        return abi\n\n\ndef force2bool(input : str or bool) -> bool:\n    if isinstance(input, bool):\n        return input\n\n    elif isinstance(input, str):\n\n        if input.lower().strip() == 'true': return True\n        if input.lower().strip() == 't':    return True\n        if input.lower().strip() == 'True': return True\n        if input.lower().strip() == 'T':    return True\n        if input.lower().strip() == 'yes':  return True\n        if input.lower().strip() == 'Yes':  return True\n        if input.lower().strip() == 'y':    return True\n        return False\n\n    else:\n        return False", "\ndef force2bool(input : str or bool) -> bool:\n    if isinstance(input, bool):\n        return input\n\n    elif isinstance(input, str):\n\n        if input.lower().strip() == 'true': return True\n        if input.lower().strip() == 't':    return True\n        if input.lower().strip() == 'True': return True\n        if input.lower().strip() == 'T':    return True\n        if input.lower().strip() == 'yes':  return True\n        if input.lower().strip() == 'Yes':  return True\n        if input.lower().strip() == 'y':    return True\n        return False\n\n    else:\n        return False", "\n\ndef force_int(value, default=0):\n    try:\n        return int(value)\n    except Exception as _e:\n        return default\n\n\ndef force_float(value, default=0.0):\n    try:\n        return float(value)\n    except Exception as _e:\n        return default", "\ndef force_float(value, default=0.0):\n    try:\n        return float(value)\n    except Exception as _e:\n        return default\n\n\ndef randomword(length):\n   letters = string.ascii_lowercase\n   return ''.join(random.choice(letters) for i in range(length))", "def randomword(length):\n   letters = string.ascii_lowercase\n   return ''.join(random.choice(letters) for i in range(length))\n\n\ndef file_latest_in_path(log_dir: str = None) -> str:\n    if log_dir is None:\n        log_dir = HOME_TMP\n\n    files = os.listdir(log_dir)\n    files.sort(key=lambda x: os.path.getmtime(os.path.join(log_dir, x)))\n    if len(files) == 0:\n        return None\n    return os.path.join(log_dir, files[-1])", "\n\ndef find_latest_row_index_log(file_report) -> tuple:\n    df = pd.read_csv(file_report)\n    # index last row\n    index = df.index[-1]\n    row = df.loc[index]\n    return index, row\n\n\ndef df_to_csv(df, file_path):\n    # Save dataframe as csv.\n    df.to_csv(file_path, index=False)", "\n\ndef df_to_csv(df, file_path):\n    # Save dataframe as csv.\n    df.to_csv(file_path, index=False)\n\n\ndef csv_to_df(file_path):\n    # Read csv to dataframe.\n    df = pd.read_csv(file_path)\n    return df", "\n\ndef add_to_csv(file_path, add_text):\n    # Add a line to file_name.csv\n    # Should be like [xx,xx,xx]\n    df = csv_to_df(file_path)\n    l = len(df)\n    df.loc[l] = add_text\n    df_to_csv(df, file_path)\n", "\n\ndef get_fa_backup(str_fab) -> str:\n    co = str_fab.replace('\\n', ' ').split(' ')\n    fab = ''\n    for text in co:\n        if len(text) == 12:\n            fab = text\n            break\n    return fab", "\n\ndef ip():\n    try:\n        ip = requests.get('https://checkip.amazonaws.com').text.strip()\n    except Exception as _e:\n        ip = \"\"\n    return ip\n\n\ndef get_ip():\n    ip_address_now = ip()\n    # check file exist\n    file_path = f\"{HOME_TMP}/../ip_address.txt\"\n    if not os.path.exists(file_path):\n        with open(file_path, \"w\") as f:\n            f.write(f\"{ip_address_now}|{ip_address_now}\")\n    else:\n        # get last ip from file\n        with open(file_path, \"r\") as f:\n            line = f.read().replace(\"\\n\", \"\")\n            current_ip = line.split(\"|\")[1]\n\n        # compare\n        if current_ip != ip_address_now:\n            logger.info(f\"Last IP Address: {current_ip}\")\n            # write to file\n            with open(file_path, \"w\") as f:\n                f.write(f\"{current_ip}|{ip_address_now}\")\n\n    logger.info(f\"IP Address: {ip_address_now}\")\n    return ip_address_now", "\n\ndef get_ip():\n    ip_address_now = ip()\n    # check file exist\n    file_path = f\"{HOME_TMP}/../ip_address.txt\"\n    if not os.path.exists(file_path):\n        with open(file_path, \"w\") as f:\n            f.write(f\"{ip_address_now}|{ip_address_now}\")\n    else:\n        # get last ip from file\n        with open(file_path, \"r\") as f:\n            line = f.read().replace(\"\\n\", \"\")\n            current_ip = line.split(\"|\")[1]\n\n        # compare\n        if current_ip != ip_address_now:\n            logger.info(f\"Last IP Address: {current_ip}\")\n            # write to file\n            with open(file_path, \"w\") as f:\n                f.write(f\"{current_ip}|{ip_address_now}\")\n\n    logger.info(f\"IP Address: {ip_address_now}\")\n    return ip_address_now", "\n\ndef cook_address(address: str) -> str:\n    \"\"\" Return cooked address \"\"\"\n    address = address.lower().strip().replace(\"0x\", \"\").replace(\"0:\", \"\")\n    return address\n\n\ndef user_data_dir(address: str = None) -> str or None:\n    \"\"\" Return user data dir \"\"\"\n    if address is None and USER_DATA_DIR is None:\n        return None\n\n    address = cook_address(address)  # cook address\n    # specific user data dir if set\n    # create user data dir if not exist by using address of wallet\n    udd = USER_DATA_DIR if USER_DATA_DIR else os.path.join(ALL_USER_DATA_DIR, address)\n\n    if not os.path.exists(udd):\n        os.makedirs(udd)\n\n    return udd", "def user_data_dir(address: str = None) -> str or None:\n    \"\"\" Return user data dir \"\"\"\n    if address is None and USER_DATA_DIR is None:\n        return None\n\n    address = cook_address(address)  # cook address\n    # specific user data dir if set\n    # create user data dir if not exist by using address of wallet\n    udd = USER_DATA_DIR if USER_DATA_DIR else os.path.join(ALL_USER_DATA_DIR, address)\n\n    if not os.path.exists(udd):\n        os.makedirs(udd)\n\n    return udd", "\n\ndef totp(secret: str) -> str:\n    \"\"\" Calculate TOTP using time and key \"\"\"\n    key = base64.b32decode(secret, True)\n    now = int(time.time() // 30)\n    msg = now.to_bytes(8, \"big\")\n    digest = hmac.new(key, msg, \"sha1\").digest()\n    offset = digest[19] & 0xF\n    code = digest[offset : offset + 4]\n    code = int.from_bytes(code, \"big\") & 0x7FFFFFFF\n    code = code % 1000000\n    return \"{:06d}\".format(code)", "\n\ndef reboot():\n    \"\"\" Reboot dongle \"\"\"\n    Dongle().reboot()\n\n\ndef reboot_reconnect():\n    \"\"\" Reboot dongle \"\"\"\n    logger.info(\"Reboot dongle\")\n    current_network = get_ssid()\n    reboot()\n    time.sleep(50)\n    res = None\n    while not res:\n        try:\n            res = ControlConnection(wifi_ssid=current_network, wifi_password=NETWORK_PASSWORD).wifi_connector()\n        except Exception as _e:\n            logger.error(f\"Error connect {current_network}: {_e} retry after 10s\")\n        time.sleep(10)\n    time.sleep(20)\n    logger.info(f\"New IP Address: {ip()}\")", "\n\ndef change_network():\n    \"\"\" Change network \"\"\"\n    try:\n        logger.info(f\"IP Address:     {ip()}\")\n        change_to_network = None\n        while not change_to_network:\n            try:\n                change_to_network = get_network()\n            except Exception as _e:\n                logger.error(f\"Error get network: {_e}, retry after 3s\")\n            time.sleep(3)\n        logger.info(f\"Change from {get_ssid()} to {change_to_network}\")\n\n        reboot()\n\n        res = None\n        while not res:\n            try:\n                res = ControlConnection(wifi_ssid=change_to_network, wifi_password=NETWORK_PASSWORD).wifi_connector()\n            except Exception as _e:\n                logger.error(f\"Error connect {change_to_network}: {_e} retry after 10s\")\n            time.sleep(10)\n\n        logger.info(f\"New IP Address: {ip()}\")\n    except Exception as e:\n        logger.error(f\"Error change network: {e}\")", "\n\ndef get_ssid():\n    \"\"\"Get the SSID of the connected WiFi.\"\"\"\n    process = subprocess.Popen([PATH_OF_AIRPORT, \"-I\"], stdout=subprocess.PIPE)\n    out, err = process.communicate()\n    process.wait()\n    output = {}\n    for line in out.decode(\"utf-8\").split(\"\\n\"):\n        if \": \" in line:\n            key, value = line.split(\": \")\n            key = key.strip()\n            value = value.strip()\n            output[key] = value\n\n    return output[\"SSID\"]", "\n\ndef get_network(exclude_network: str = None) -> str:\n    \"\"\" Get network \"\"\"\n    if exclude_network is None:\n        exclude_network = get_ssid()\n\n    list_network = copy.deepcopy(LIST_NETWORK)\n    if exclude_network in list_network:\n        list_network.remove(exclude_network)\n    logger.info(f\"List network: {list_network}\")\n    network = list_network[0]\n    return network", ""]}
{"filename": "app/ylide.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.chatgpt import tweet\nfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, EXTENSION_ID\n\nlogger = get_logger(__name__)\n\n", "\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n        }", "            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n        }\n    },\n}\n\n\nclass Ylide(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def buy(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n\n        self.driver.get(f\"{self.config['app']['ylide']}\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        logged_in_twitter = self._check_logged_in_twitter()\n        if not logged_in_twitter:\n            self.login_twitter(account)\n            self.driver.close()\n\n        self._follow(account=account, user_name=\"@GradyDuane19821\")\n        self._follow(account=account, user_name=\"BrainBarrows\")\n        self._follow(account=account, user_name=\"HoytGerlach\")\n        self._follow(account=account, user_name=\"LailaFriesen\")\n        # self._tweet()\n        # self._follow_list(account=account, list_acc=self.list_tw_follow)\n\n        self.auto.switch_to_window(0)\n        self._reload_extension()\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(10)\n        self.auto.click(\"//div[contains(text(),'Connect account')]\", 3)\n\n        self.auto.switch_to_window(0)\n        self.auto.click(\"//div[contains(text(),'Venom Wallet')]\", 4)\n        self.auto.switch_to_window(-1)\n        self.auto.click(\"//div[contains(text(),'Connect')]\", 4)\n        self.auto.switch_to_window(0)\n        self.auto.click('//div[text()=\"Sign\"]', 4)\n        self.auto.sign(5)\n        self.auto.confirm(time_to_sleep=60)\n\n        # sign up\n        self.auto.switch_to_window(0)\n        self.auto.try_click('//*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[4]/textarea', 3)\n        message = tweet().replace('\"', '')\n        self.auto.try_send_keys('//*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[4]/textarea', f\"{message}\\n\")\n        self.auto.click(\"//span[contains(text(),'Send via')]\", 5)\n        self.auto.confirm()\n\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    list_tw_follow = AccountLoader(fp=f\"{CODE_HOME}/twitter140.csv\").parser_file()\n    account_index = 3\n    swap_params = {\n        \"account\": list_account[account_index],\n    }\n    params = {\n        \"list_add\": list_account,\n        # 'account_index': account_index,\n    }\n    try:\n        vn = Ylide(\n            use_uc=True,\n            params=params,\n            list_tw_follow=list_tw_follow,\n        )\n        vn.process_all(method=\"buy\")\n        # vn.buy(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/web3_wolrd.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH\n\nlogger = get_logger(__name__)\n\n\nCONFIG = {", "\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"web3_world\": \"https://testnet.web3.world\",\n        }\n    },", "        }\n    },\n}\n\n\nclass Web3World(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def swap(self, account: dict = None):\n        amount     = self.params.get('amount', \"0.01\")\n        from_token = self.params.get('from_token')\n        to_token   = self.params.get('to_token')\n        percent    = self.params.get('percent')\n\n        self.driver.get(f\"{self.config['app']['web3_world']}/swap\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"root\"]/div[1]/header/div/div[2]/div[2]/div/button', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\n        # swap\n        self.auto.switch_to_window(0)\n        inputs = self.auto.try_finds(\"//input\")\n        inputs[0].send_keys(amount)\n        time.sleep(3)\n\n        self.auto.click(\"//button[contains(text(),'Swap')]\", 4)\n        self.auto.click(\"//button[contains(text(),'Confirm')]\", 4)\n        self.auto.confirm(account['password'])\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    # list_account = AccountLoader().parser_file()\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    swap_params = {\n        \"account\": list_account[1],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"amount\": \"1\",\n        \"from_token\": \"VENOM\",\n        \"to_token\": \"USDT\",\n    }\n    try:\n        vn = Web3World(\n            use_uc=True,\n            params=params\n        )\n        vn.process_all(method=\"swap\")\n        # vn.swap(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/oasis_gallery.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH\n\nlogger = get_logger(__name__)\n\n\nCONFIG = {", "\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"oasis_gallery\": \"https://testnet.oasis.gallery\",\n        }\n    },", "        }\n    },\n}\n\n\nclass OasisGallery(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def buy(self, account: dict = None):\n\n        self.driver.get(f\"{self.config['app']['oasis_gallery']}/buy\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"__next\"]/div[1]/div[1]/div[2]/div[3]/button', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\n        # swap\n        self.auto.switch_to_window(0)\n        inputs = self.auto.try_finds(\"//span[contains(text(),'Buy now')]\")\n        inputs[0].click()\n        time.sleep(3)\n\n        self.auto.click(\"//button[contains(text(),'Confirm')]\", 4)\n        self.auto.confirm(account['password'])\n        time.sleep(20)\n        logger.info(f\"Incentive success\")\n\n    def list(self, account: dict = None):\n        self.driver.get(f\"{self.config['app']['oasis_gallery']}/buy\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"__next\"]/div[1]/div[1]/div[2]/div[3]/button', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n\n        # swap\n        self.auto.switch_to_window(0)\n        self.driver.get(f\"{self.config['app']['oasis_gallery']}/profile/{account['address']}\")\n        time.sleep(4)\n        self.auto.click('//*[@id=\"__next\"]/div[1]/div[3]/div[2]/div[2]/a/div/div[1]/div', 4)\n        self.auto.click('//*[@id=\"__next\"]/div[1]/div[2]/div/div[3]/div/div/div[2]/div[2]/button', 4)\n\n        inputs = self.auto.try_finds(\"//input[@placeholder='Amount']\")\n        inputs[0].send_keys(\"5\")\n        time.sleep(2)\n        self.auto.click('//*[@id=\"__next\"]/div[2]/div[2]/div/div/div[5]/button', 4)\n        self.auto.confirm(account['password'])\n        time.sleep(45)\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    # list_account = AccountLoader().parser_file()\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    swap_params = {\n        \"account\": list_account[44],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"amount\": \"1\",\n        \"from_token\": \"VENOM\",\n        \"to_token\": \"USDT\",\n    }\n    try:\n        vn = OasisGallery(\n            use_uc=True,\n            params=params\n        )\n        vn.process_all(method=\"list\")\n        # vn.buy(**swap_params)\n        # vn.list(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/chatgpt.py", "chunked_list": ["import requests\n\nfrom app.config import API_KEY\n\nMODEL = 'gpt-3.5-turbo'\nURL = f\"https://api.openai.com/v1/chat/completions\"\nMAX_TOKENS = 2000\n\n\ndef chat_with_chatgpt(prompt=''):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {API_KEY}\"\n    }\n    json_payload = {\n        \"model\": MODEL,\n        \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n        \"max_tokens\": MAX_TOKENS,\n    }\n    res = requests.post(URL, headers=headers, json=json_payload).json()\n    if \"error\" in res:\n        return res[\"error\"]['message']\n    return res['choices'][0]['message']['content']", "\ndef chat_with_chatgpt(prompt=''):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {API_KEY}\"\n    }\n    json_payload = {\n        \"model\": MODEL,\n        \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n        \"max_tokens\": MAX_TOKENS,\n    }\n    res = requests.post(URL, headers=headers, json=json_payload).json()\n    if \"error\" in res:\n        return res[\"error\"]['message']\n    return res['choices'][0]['message']['content']", "\n\ndef tweet(length : str = 20) -> str:\n    prompt = f\"\"\"\n    Tweet a {length} words, random, make sense and do NOT be the same as the previous one.\n    \"\"\"\n    text = chat_with_chatgpt(prompt)\n    if \"That model is currently overloaded with other requests\" in text:\n        return \"I just found a lucky penny in the street and I feel like today is going to be a great day! #blessed\"\n    return text", ""]}
{"filename": "app/x.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.chatgpt import tweet\nfrom app.config import get_logger, ACC_VENOM_PATH, CODE_HOME, MAIN_INDEX\n\nlogger = get_logger(__name__)\n\n", "\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n        }", "            \"ylide\": \"https://hub.ylide.io/feed/venom\",\n        }\n    },\n}\n\n\nclass X(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.list_tw_follow = kwargs.get('list_tw_follow') or []\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def view(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n        base_url = \"https://twitter.com/bxdoan/status/\"\n        list_status = [\n            \"1694563974845731007\",\n            \"1694563082515996702\",\n            \"1694562757537095965\",\n            \"1694562416150052970\",\n            \"1694562200625860642\",\n            \"1694561970392031297\",\n            \"1694561806893945070\",\n        ]\n\n        self.driver.get(f\"{base_url}{list_status[0]}\")\n        for status_id in list_status[1:]:\n            url = f\"{base_url}{status_id}\"\n            self.driver.execute_script(\"window.open('');\")\n            time.sleep(1)\n            self.auto.switch_to_window(-1)\n            self.driver.get(url)\n\n        time.sleep(3)\n        count = 0\n        number_tab = len(self.driver.window_handles)\n        while True:\n            for i in range(number_tab):\n                self.auto.switch_to_window(i)\n                time.sleep(0.7)\n                self.driver.refresh()\n\n            count += 1\n            logger.info(f\"View {count} times\")", "\n\nif __name__ == '__main__':\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    account_index = MAIN_INDEX\n    swap_params = {\n        \"account\": list_account[account_index],\n    }\n    params = {\n        \"list_add\": list_account,\n    }\n    try:\n        vn = X(\n            use_uc=True,\n            params=params,\n        )\n        vn.view(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/venom_stake.py", "chunked_list": ["import time\nfrom selenium.webdriver.common.by import By\n\nfrom wallet import venom\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH\n\nlogger = get_logger(__name__)\n", "logger = get_logger(__name__)\n\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"task\": {\n            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",", "        \"task\": {\n            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n        },\n        \"app\": {\n            \"venom_stake\": \"https://testnet.venomstake.com/\",\n        }\n    },", "        }\n    },\n}\nVENOM_ADDRESS = \"0:077873f1453fa67b0f1ce77f1e806675acd19c4694b9738be61fd406618f2f7a\"\n\n\nclass VenomStake(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def stake(self, account: dict = None):\n\n        self.driver.get(self.config['app']['venom_stake'])\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.driver.get(\"https://venom.network/faucet\")\n        time.sleep(4)\n        self.auto.try_click('//*[@id=\"root\"]/div[1]/div[1]/div[2]/div[2]/span', 2)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 3)\n        self._daily_faucet()\n\n        # click on the Connect Wallet button\n        self.auto.switch_to_window(0)\n        self.driver.get(self.config['app']['venom_stake'])\n        time.sleep(8)\n        self.auto.try_click(\"//div[contains(text(),'Connect Wallet')]\", 3)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 10)\n\n        # stake\n        self.auto.switch_to_window(0)\n        inputs = self.auto.try_find('//*[@id=\"app-wrapper\"]/div[2]/div[3]/div/div/div[3]/div/div[2]/div[1]/input')\n        inputs.send_keys('3')\n\n        stake_buttons = self.auto.try_finds(\"//div[text()='Stake']\")\n        stake_buttons[2].click()\n        time.sleep(2)\n\n        self.auto.confirm(account['password'])\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    # list_account = AccountLoader().parser_file()\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    swap_params = {\n        \"account\": list_account[2],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"answer\": \"All of the above\",\n    }\n    try:\n        vn = VenomStake(\n            use_uc=True,\n            params=params\n        )\n        vn.process_all(method=\"stake\")\n        # vn.stake(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/snipa.py", "chunked_list": ["import time\n\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH, DAILY_ANSWER\n\nlogger = get_logger(__name__)\n\n\nCONFIG = {", "\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"app\": {\n            \"snipa\": \"https://venom.snipa.finance\",\n        }\n    },", "        }\n    },\n}\n\n\nclass Snipa(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def incentive(self, account: dict = None):\n        if not self.driver:\n            self._try_start_driver(account)\n\n        self.driver.get(f\"{self.config['app']['snipa']}\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        logged_in_wallet = self._check_logged_in_wallet()\n        if not logged_in_wallet:\n            self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        # logged_in_twitter = self._check_logged_in_twitter()\n        # if not logged_in_twitter:\n        #     self.login_twitter(account)\n        #     self.driver.close()\n        # self._tweet()\n        # self._follow(account)\n\n        self.auto.switch_to_window(0)\n        self.driver.get(f\"{self.config['app']['snipa']}\")\n        time.sleep(8)\n\n        # connect venom wallet\n        login = self.auto.try_find(\"//span[contains(text(),'ogin via Walle')]\")\n        if login:\n            login.click()\n            time.sleep(3)\n            self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n            self.auto.switch_to_window(-1)\n            self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\n        self.auto.switch_to_window(-1)\n        join = self.auto.try_find(\"//div[contains(text(),'Join Venom Testnet')]\")\n        if join:\n            join.click()\n            time.sleep(3)\n            self.auto.confirm(password=account['password'])\n\n        self.auto.switch_to_window(-1)\n        url = f\"https://venom.network/tasks\"\n        self.driver.get(url)\n        time.sleep(2)\n        self._connect_wallet()\n        self.auto.switch_to_window(0)\n        self._daily_faucet(account)\n\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    swap_params = {\n        \"account\": list_account[0],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"answer\": DAILY_ANSWER,\n    }\n    try:\n        vn = Snipa(\n            use_uc=True,\n            params=params,\n        )\n        vn.process_all(method=\"incentive\")\n        # vn.incentive(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/venom_bridge.py", "chunked_list": ["import time\nfrom selenium.webdriver.common.by import By\n\nfrom wallet import venom\nfrom app.account import AccountLoader\nfrom app.base import VenomAuto\nfrom app.config import get_logger, ACC_VENOM_PATH\n\nlogger = get_logger(__name__)\n", "logger = get_logger(__name__)\n\n\nCONFIG = {\n    \"environment\": \"test\",\n    \"mainnet\": {\n    },\n    \"test\": {\n        \"task\": {\n            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",", "        \"task\": {\n            \"venom_foundation\": \"https://venom.network/tasks/venom-foundation\",\n            \"venom_wallet\": \"https://venom.network/tasks/venom-wallet\",\n            \"web3_world\": \"https://venom.network/tasks/web3-world\",\n            \"venom_stake\": \"https://venom.network/tasks/venom-stake\",\n        },\n        \"app\": {\n            \"venom_bridge\": \"https://testnet.venombridge.com\",\n        }\n    },", "        }\n    },\n}\n\n\nclass VenomBridge(VenomAuto):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.environment = CONFIG['environment']\n        self.config = CONFIG[self.environment]\n\n    def bridge(self, account: dict = None):\n\n        self.driver.get(f\"{self.config['app']['venom_bridge']}/bridge\")\n        time.sleep(2)\n\n        # setup metamask with seed phrase and password\n        self.auto.switch_to_window(0)\n        self.auto.walletSetup(account['seed_phrase'], account['password'])\n\n        self.auto.switch_to_window(0)\n        self.auto.metamaskSetup()\n\n        self.auto.switch_to_window(0)\n        self.driver.refresh()\n        time.sleep(4)\n\n        # connect venom wallet\n        self.auto.click('//*[@id=\"root\"]/div/header/div[2]/div/div[1]/div/button/span', 2)\n        self.auto.click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.click(\"//div[contains(text(),'Connect')]\", 3)\n\n        # connect metamask wallet\n        self.auto.click('//*[@id=\"root\"]/div/header/div[2]/div/div[2]/div/button/span', 2)\n        self.auto.click(\"//div[contains(text(),'MetaMask')]\", 3)\n\n\n        # click on the Connect Wallet button\n        self.auto.switch_to_window(0)\n        self.driver.get(self.config['app']['venom_stake'])\n        time.sleep(8)\n        self.auto.try_click(\"//div[contains(text(),'Connect Wallet')]\", 3)\n        self.auto.try_click(\"//div[contains(text(),'Venom Chrome')]\", 3)\n        self.auto.switch_to_window(-1)\n        self.auto.try_click(\"//div[contains(text(),'Connect')]\", 10)\n\n        # stake\n        self.auto.switch_to_window(0)\n        inputs = self.auto.try_find('//*[@id=\"app-wrapper\"]/div[2]/div[3]/div/div/div[3]/div/div[2]/div[1]/input')\n        inputs.send_keys('3')\n\n        stake_buttons = self.auto.try_finds(\"//div[text()='Stake']\")\n        stake_buttons[2].click()\n        time.sleep(2)\n\n        self.auto.confirm(account['password'])\n        logger.info(f\"Incentive success\")", "\n\nif __name__ == '__main__':\n    # list_account = AccountLoader().parser_file()\n    list_account = AccountLoader(fp=ACC_VENOM_PATH).parser_file()\n    swap_params = {\n        \"account\": list_account[2],\n    }\n    params = {\n        \"list_add\": list_account,\n        \"answer\": \"All of the above\",\n    }\n    try:\n        vn = VenomBridge(\n            use_uc=True,\n            params=params\n        )\n        vn.process_all(method=\"bridge\")\n        # vn.bridge(**swap_params)\n    except Exception as e:\n        logger.error(e)", ""]}
{"filename": "app/scripts/tweet.py", "chunked_list": ["# Desc: Tweet 20 words from the GPT-3.5 model\nimport textwrap\nfrom app.chatgpt import tweet\n\n\nif __name__ == '__main__':\n    res = textwrap.fill(tweet().replace('\"', ''), 80)\n    print(res)\n", ""]}
{"filename": "app/scripts/reboot.py", "chunked_list": ["\nfrom app import utils\n\nif __name__ == '__main__':\n    utils.change_network()\n"]}
{"filename": "app/scripts/clean_data_user.py", "chunked_list": ["# Desc: Tweet 20 words from the GPT-3.5 model\nimport os\nimport shutil\n\nfrom app.account import AccountLoader\nfrom app.config import ALL_USER_DATA_DIR, CODE_HOME\nfrom app import utils\n\n\nif __name__ == '__main__':\n    dir_name = '049d583a4428d3567541a094de4293e02eb6f2d26ae281583c20357a4f66973f'\n    fp = \"account.venom_dietwt.csv\"\n    list_faucet_acc = AccountLoader(fp=f\"{CODE_HOME}/{fp}\").parser_file()\n    for a in list_faucet_acc:\n        # check dir is exists\n        target_dir = os.path.join(ALL_USER_DATA_DIR, utils.cook_address(a['address']))\n        if os.path.exists(target_dir) and os.path.isdir(target_dir):\n            shutil.rmtree(target_dir)", "\nif __name__ == '__main__':\n    dir_name = '049d583a4428d3567541a094de4293e02eb6f2d26ae281583c20357a4f66973f'\n    fp = \"account.venom_dietwt.csv\"\n    list_faucet_acc = AccountLoader(fp=f\"{CODE_HOME}/{fp}\").parser_file()\n    for a in list_faucet_acc:\n        # check dir is exists\n        target_dir = os.path.join(ALL_USER_DATA_DIR, utils.cook_address(a['address']))\n        if os.path.exists(target_dir) and os.path.isdir(target_dir):\n            shutil.rmtree(target_dir)", "\n"]}
{"filename": "app/scripts/otp.py", "chunked_list": ["import sys\n\nfrom app import utils\n\nif __name__ == '__main__':\n    secret = sys.argv[1]\n    otp = utils.totp(secret)\n    print(otp)\n", ""]}
