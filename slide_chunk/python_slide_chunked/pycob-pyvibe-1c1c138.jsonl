{"filename": "generator/screenshot.py", "chunked_list": ["from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# Get the current directory\nimport os\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(\"dir_path = \", dir_path)\n\n# Remove the last folder from the path\ndir_path = os.path.dirname(dir_path)", "# Remove the last folder from the path\ndir_path = os.path.dirname(dir_path)\nprint(\"dir_path = \", dir_path)\n\nglobal driver\ndriver = None\n\ndef take_screenshot(name: str):\n    global driver\n    if driver is None:\n        options = Options()\n        # options.add_argument(\"--headless\")\n        options.add_argument(\"window-size=1024,768\")\n        options.add_argument(\"--hide-scrollbars\")\n        # Here Chrome will be used\n        driver = webdriver.Chrome('/usr/local/bin/chromedriver', options=options)\n\n    # URL of website\n    url = \"file://\" + dir_path + \"/docs/gallery/\" + name + \".html\"\n\n    # Opening the website\n    driver.get(url)\n    driver.save_screenshot(f\"docs/img/{name}.png\")", "\n# Get all the html files in the dir_path + \"/docs/gallery\" folder\nimport glob\nfiles = glob.glob(dir_path + \"/docs/gallery/*.html\")\nfor file in files:\n    # Get the name of the file\n    name = os.path.basename(file)\n    # Remove the .html extension\n    name = os.path.splitext(name)[0]\n    print(\"screenshotting = \", name)\n    take_screenshot(name)"]}
{"filename": "generator/generate.py", "chunked_list": ["print(\"Generating from Python...\")\nimport pyvibe as pv\nfrom os.path import dirname, basename, isfile, join\nimport glob\nfrom docs.common.components import navbar, footer\n\nmodules = glob.glob(join(dirname(__file__)+\"/docs\", \"*.py\"))\nfiles = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith('__init__.py')]\n\nfor file in files:\n    print(\"Importing file: \" + file)\n    exec(f\"from docs import {file}\")\n\n    # exec(f\"{file}.page.add_header('Python Source')\")\n    # exec(f\"{file}.page.add_text('This is the source code for the current page.')\")\n    # exec(f\"{file}.page.add_emgithub('https://github.com/pycob/pyvibe/blob/main/generator/docs/{file}.py')\")\n    # exec(f\"{file}.page.add_link('View Source', 'https://github.com/pycob/pyvibe/blob/main/generator/docs/{file}.py')\")\n\n    print(f\"Writing to {file}.html\")\n    exec(f\"with open('docs/{file}.html', 'w') as f: f.write({file}.page.to_html())\")    ", "\nfor file in files:\n    print(\"Importing file: \" + file)\n    exec(f\"from docs import {file}\")\n\n    # exec(f\"{file}.page.add_header('Python Source')\")\n    # exec(f\"{file}.page.add_text('This is the source code for the current page.')\")\n    # exec(f\"{file}.page.add_emgithub('https://github.com/pycob/pyvibe/blob/main/generator/docs/{file}.py')\")\n    # exec(f\"{file}.page.add_link('View Source', 'https://github.com/pycob/pyvibe/blob/main/generator/docs/{file}.py')\")\n\n    print(f\"Writing to {file}.html\")\n    exec(f\"with open('docs/{file}.html', 'w') as f: f.write({file}.page.to_html())\")    ", "\ngallery_modules = glob.glob(join(dirname(__file__)+\"/gallery\", \"*.py\"))\ngallery_files = [ basename(f)[:-3] for f in gallery_modules if isfile(f) and not f.endswith('__init__.py')]\n\nfor file in gallery_files:\n    print(\"Importing file: \" + file)\n    exec(f\"from gallery import {file}\")\n\n    exec(f\"{file}.page.add_header('Python Source')\")\n    exec(f\"{file}.page.add_text('This is the source code for the current page.')\")\n    exec(f\"{file}.page.add_emgithub('https://github.com/pycob/pyvibe/blob/main/generator/gallery/{file}.py')\")\n    exec(f\"{file}.page.add_link('View Source', 'https://github.com/pycob/pyvibe/blob/main/generator/gallery/{file}.py')\")\n\n    exec(f'pg = pv.Page({file}.page.title, navbar=navbar, components={file}.page.components)')\n\n    print(f\"Writing to {file}.html\")\n    exec(f\"with open('docs/gallery/{file}.html', 'w') as f: f.write(pg.to_html())\")   "]}
{"filename": "generator/docs/playground.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import navbar, footer\n\npage = pv.Page('Interactive PyVibe Playground', navbar=navbar, footer=footer)\n\npage.add_header(\"Welcome to the PyVibe Playground!\")\npage.add_text(\"This playground uses Pyodide to run Python code in the browser. You can use it to experiment with PyVibe and learn how to use it. Note that this is experimental and may not work in all browsers.\")\n\npage.add_code(\"pip install pyvibe\", header=\"Install PyVibe to run locally\", prefix=\"%\")\n", "page.add_code(\"pip install pyvibe\", header=\"Install PyVibe to run locally\", prefix=\"%\")\n\npage.add_html(\"\"\"\n<script>\ncode_samples = {\n    \"Card\": `\nimport pyvibe as pv\n\npage = pv.Page('Test Page')\n", "page = pv.Page('Test Page')\n\nwith page.add_card() as card:\n    card.add_header(\"Hello World\")\n    card.add_text(\"This content was generated with Python (from the browser)!\")\n`,\n    \"Charts\": `\nimport pyvibe as pv    \nimport plotly.express as px\nimport pandas as pd", "import plotly.express as px\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'First Column': [1, 2, 3, 4],\n    'Second Column': [10, 20, 30, 40]\n})\nfig = px.line(df, x=\"First Column\", y=\"Second Column\", title='Sample Chart')\n\npage = pv.Page('Test Page')", "\npage = pv.Page('Test Page')\npage.add_plotlyfigure(fig)\n`,\n    \"Tables\": `\nimport pyvibe as pv\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'First Column': [1, 2, 3, 4],", "df = pd.DataFrame({\n    'First Column': [1, 2, 3, 4],\n    'Second Column': [10, 20, 30, 40]\n})\n\npage = pv.Page('Test Page')\npage.add_pandastable(df)\n`,\n    \"Forms\": `\nimport pyvibe as pv", "    \"Forms\": `\nimport pyvibe as pv\n\npage = pv.Page('Test Page')\n\nwith page.add_card() as card:\n    card.add_header(\"This is a form\")\n    with card.add_form() as form:\n        form.add_formtext(\"Name\", \"name\")\n        form.add_formemail(\"Email\", \"email\")", "        form.add_formtext(\"Name\", \"name\")\n        form.add_formemail(\"Email\", \"email\")\n        form.add_formtextarea(\"Message\", \"message\")\n        form.add_formselect(\"Options\", \"options\", [\"Option 1\", \"Option 2\"])\n        form.add_formsubmit(\"Send!\")\n`,\n}\n\ne = \"hi\"\nfunction setTab(el) {", "e = \"hi\"\nfunction setTab(el) {\n    e = el;\n    // Set all tabs to inactive\n    document.querySelectorAll('#tablist button').forEach(function(el) {\n        el.classList = \"inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300\"\n    })\n\n    el.classList = \"inline-block p-4 rounded-t-lg text-blue-600 bg-gray-100 active dark:bg-gray-800 dark:text-blue-500\";\n", "    el.classList = \"inline-block p-4 rounded-t-lg text-blue-600 bg-gray-100 active dark:bg-gray-800 dark:text-blue-500\";\n\n    editor.setValue(code_samples[e.innerHTML.trim()], -1);\n}\n</script>\n<ul id='tablist' class=\"flex flex-wrap text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400\">\n    <li class=\"mr-2\">\n        <button onclick=\"setTab(this)\" aria-current=\"page\" class=\"inline-block p-4 rounded-t-lg text-blue-600 bg-gray-100 active dark:bg-gray-800 dark:text-blue-500\">Card</a>\n    </li>\n    <li class=\"mr-2\">", "    </li>\n    <li class=\"mr-2\">\n        <button onclick=\"setTab(this)\" class=\"inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300\">Charts</a>\n    </li>\n    <li class=\"mr-2\">\n        <button onclick=\"setTab(this)\" class=\"inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300\">Tables</a>\n    </li>\n    <li class=\"mr-2\">\n        <button onclick=\"setTab(this)\" class=\"inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300\">Forms</a>\n    </li>", "        <button onclick=\"setTab(this)\" class=\"inline-block p-4 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300\">Forms</a>\n    </li>\n</ul>\n\n\"\"\")\n\npage.add_codeeditor(\"\"\"import pyvibe as pv\n\npage = pv.Page('Test Page')\n", "page = pv.Page('Test Page')\n\nwith page.add_card() as card:\n    card.add_header(\"Hello World\")\n    card.add_text(\"This content was generated with Python (from the browser)!\")\n\n\"\"\")\n\npage.add_html(\"\"\"\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.22.1/full/pyodide.js\"></script>  ", "page.add_html(\"\"\"\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.22.1/full/pyodide.js\"></script>  \n    <script defer type=\"text/javascript\">\n    var loadingButton = `\n        <button disabled class=\"relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800\">\n            <span class=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                Running...\n            </span>\n        </button>`\n", "        </button>`\n\n    var runButton = `\n        <button onclick=\"runCode()\" class=\"relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800\">\n            <span class=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                Run\n            </span>\n        </button>`  \n\n      var pyodide;", "\n      var pyodide;\n\n      async function main(){\n        pyodide = await loadPyodide();\n        await pyodide.loadPackage(\"micropip\");\n        const micropip = pyodide.pyimport(\"micropip\");\n        await micropip.install(\"pyvibe\");\n        await micropip.install(\"plotly\");\n        await micropip.install(\"pandas\");", "        await micropip.install(\"plotly\");\n        await micropip.install(\"pandas\");\n        \n        document.getElementById(\"runButton\").innerHTML = runButton;\n      }\n      main();\n\n      function runCode() {\n        document.getElementById(\"runButton\").innerHTML = loadingButton;\n        pyodide.runPython(editor.getValue());", "        document.getElementById(\"runButton\").innerHTML = loadingButton;\n        pyodide.runPython(editor.getValue());\n\n        pyodide.runPython(`page = pv.ContainerComponent(components=page.components)`);\n        pyodide.runPython(`results = page.to_html()`);\n\n        results = pyodide.globals.get(\"results\");\n\n        // document.getElementById(\"results\").innerHTML = results;\n        setInnerHTML(document.getElementById(\"results\"), results);", "        // document.getElementById(\"results\").innerHTML = results;\n        setInnerHTML(document.getElementById(\"results\"), results);\n\n        document.getElementById(\"runButton\").innerHTML = runButton;\n\n        document.getElementById(\"results\").scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"})\n      }\n      \n      function setInnerHTML(elm, html) {\n  elm.innerHTML = html;", "      function setInnerHTML(elm, html) {\n  elm.innerHTML = html;\n  \n  Array.from(elm.querySelectorAll(\"script\"))\n    .forEach( oldScriptEl => {\n      const newScriptEl = document.createElement(\"script\");\n      \n      Array.from(oldScriptEl.attributes).forEach( attr => {\n        newScriptEl.setAttribute(attr.name, attr.value) \n      });", "        newScriptEl.setAttribute(attr.name, attr.value) \n      });\n      \n      const scriptText = document.createTextNode(oldScriptEl.innerHTML);\n      newScriptEl.appendChild(scriptText);\n      \n      oldScriptEl.parentNode.replaceChild(newScriptEl, oldScriptEl);\n  });\n}\n", "}\n\n    </script>\n\"\"\")\n              \npage.add_html(\"\"\"<span id=\"runButton\">\n<button disabled class=\"relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800\">\n            <span class=\"relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                <svg aria-hidden=\"true\" role=\"status\" class=\"inline w-4 h-4 mr-3 text-gray-200 animate-spin dark:text-gray-600\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/>", "                <svg aria-hidden=\"true\" role=\"status\" class=\"inline w-4 h-4 mr-3 text-gray-200 animate-spin dark:text-gray-600\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/>\n                    <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"#1C64F2\"/>\n                </svg>\n                Preparing Pyodide...\n            </span>\n        </button>\n</span>\"\"\")\n\npage.add_html(\"<div id='results' class='border-dashed border-2 border-sky-500'>A preview will appear here once you click run.</div>\")", "\npage.add_html(\"<div id='results' class='border-dashed border-2 border-sky-500'>A preview will appear here once you click run.</div>\")\n\npage.add_link(\"Learn how to serve from Flask\", \"flask.html\")\n"]}
{"filename": "generator/docs/gallery.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import navbar, footer, marketing_banner, gallery_grid, all_layouts\n\npage = pv.Page(\"Gallery\", navbar=navbar, footer=None)\npage.add_header(\"Gallery\")\n\npage.add_text(\"Here are some examples of what you can create with PyVibe.\")\n\npage.add_component(gallery_grid(all_layouts))\n", "page.add_component(gallery_grid(all_layouts))\n\npage.add_text(\"PyVibe was spun out of Pycob. We are in the process of transitioning Pycob apps to PyVibe.\")\npage.add_link(\"See additional examples on Pycob\", \"https://www.pycob.com/gallery?tag=Featured\")\npage.add_text(\"Note: Some of the examples on Pycob are not yet compatible with PyVibe but should give you some examples of the layout possibilities.\")"]}
{"filename": "generator/docs/component_reference.py", "chunked_list": ["import pyvibe as pv\nimport os\nimport json\nimport pandas as pd\nfrom .common.components import navbar, footer, marketing_banner\n\ndef argument_value_with_quotes(argument_type, argument_value) -> str:\n    if argument_value is None:\n        return 'None'\n\n    if argument_type == 'Untyped':\n        return argument_value\n\n    if isinstance(argument_value, str):\n        return \"\\'\" + argument_value.replace(\"'\", \"\") + \"\\'\"\n\n    return str(argument_value)", "\ndef get_argument_type(name, arguments) -> str:\n    for arg in arguments:\n        if name == arg['name']:\n            return arg['type']\n\n    return None\n\ndef example_to_arguments(example, arguments) -> str:\n    # print(example)\n    if example is None:\n        return ''\n\n    return ', '.join(map(lambda x: x['argumentName'] + ' = ' + argument_value_with_quotes( get_argument_type(x['argumentName'], arguments) , x['argumentValue']), example))", "def example_to_arguments(example, arguments) -> str:\n    # print(example)\n    if example is None:\n        return ''\n\n    return ', '.join(map(lambda x: x['argumentName'] + ' = ' + argument_value_with_quotes( get_argument_type(x['argumentName'], arguments) , x['argumentValue']), example))\n\ndef example_to_pyvibe_code(element_type, example, attachableTo, arguments) -> str:\n    return attachableTo + '.add_' + element_type + '(' + example_to_arguments(example, arguments) + ')'\n", "\n\n# Read spec.json into a dictionary\nwith open(os.path.join(\"./spec/\", 'spec.json')) as f:\n    spec = json.load(f)\n\nsidebar = pv.Sidebar()\n\npage = pv.Page('Component Reference', navbar=navbar, footer=footer, sidebar=sidebar)\n", "page = pv.Page('Component Reference', navbar=navbar, footer=footer, sidebar=sidebar)\n\ncategory_order = [\n    'Page',\n    'Basic HTML',\n    'Layout',\n    'Form',\n    'Table',\n    'Advanced',\n    'Advanced Layout',", "    'Advanced',\n    'Advanced Layout',\n    'Internal',\n]\n\ncategories = {}\n\nfor element in spec:\n    category = element['category']\n\n    if category not in categories:\n        categories[category] = []\n    \n    categories[category].append(element)", "\nfor category in category_order:\n    page.add_section(category, category)\n    sidebar_category = sidebar.add_sidebarcategory(category)\n    page.add_header(category, 5)\n\n    for element in categories[category]:\n        page.add_section(element['elementType'], element['name'], level=2)\n        sidebar_category.add_sidebarlink(element['name'], \"#\"+element['elementType'])\n        if element['elementType'] != 'page':\n            if len(element['attachableTo']) > 0:\n                page.add_header(element['name'] + f\" (<code>.add_{element['elementType']}</code>)\", 4)\n            else:\n                page.add_header(element['name'] + f\" (<code>{element['elementType']} = {element['name']}(...)</code>)\", 4)\n        else:\n            page.add_header(element['name'], 4)\n        page.add_text(element['description'])\n\n        if len(element['attachableTo']) > 0:\n            page.add_header(\"Use With\", 3)\n\n        for attachableTo in element['attachableTo']:\n            page.add_link(attachableTo + f\"<code>.add_{element['elementType']}</code>\", \"#\"+attachableTo)\n\n        page.add_text(\"\")\n        page.add_header('Input', 2)\n\n        table = pv.RawtableComponent()\n\n        tablehead = pv.TableheadComponent()\n        tablehead.add_tablecellheader(\"Name\")\n        tablehead.add_tablecellheader(\"Type\")\n        tablehead.add_tablecellheader(\"Default Value\")\n        tablehead.add_tablecellheader(\"Description\")\n\n        table.add_component(tablehead)\n\n        tablebody = pv.TablebodyComponent()\n\n        for argument in element['arguments']:\n            row = pv.TablerowComponent()\n\n            row.add_tablecellheader(argument['name'])\n            row.add_tablecell(argument['type'])\n            if 'defaultValue' in argument:\n                if argument['type'] == \"String\":\n                    row.add_tablecell(\"'\" + argument['defaultValue'] + \"'\")\n                else:\n                    row.add_tablecell(argument['defaultValue'])\n            else:\n                row.add_tablecell(\"\")\n            row.add_tablecell(argument['description'])\n\n            tablebody.add_component(row)\n\n        table.add_component(tablebody)\n\n        if len(element['arguments']) > 0:\n            page.add_component(table)\n        else:\n            page.add_text(\"No Inputs\")\n        # for argument in element['arguments']:\n        #     if 'defaultValue' in argument:\n        #         page.add_html('<p><code>' + argument['name'] +'</code>: <b>' + argument['type'] + '</b>. Default: ' + argument['defaultValue'] + '. ' + argument['description'] + ' </p>')\n        #     else:\n        #         page.add_html('<p><code>' + argument['name'] +'</code>: <b>' + argument['type'] + '</b>. ' + argument['description'] + ' </p>')\n\n        if element['category'] != 'Internal':\n            if len(element['exampleCode']) > 0:\n                page.add_header('Example', 2)\n\n            for exampleWithSetup in element['exampleCode']:\n                example = exampleWithSetup['arguments']\n\n                if 'card' in element['attachableTo']:\n                    attachableTo = 'card'\n                    page.add_code(example_to_pyvibe_code(element['elementType'], example, attachableTo, element['arguments']).replace('<', '&lt;').replace('>', '&gt;'))\n                    card = pv.CardComponent()\n                    if callable(getattr(card, \"add_\"+ element['elementType'], None)):\n                        setup = \"\"\n\n                        if 'setup' in exampleWithSetup:\n                            setup = '\\n'.join(exampleWithSetup['setup']) + '\\n'                   \n                        \n                        expression = setup + 'card.add_' + element['elementType'] + '(' + example_to_arguments(example, element['arguments']) + ')'\n                        \n                        print(\"Executing = \", expression)\n                        try:\n                            exec(expression)\n                        except Exception as err:\n                            print(\"Error = \", err)\n                        \n                        page.add_component(card)\n                elif 'page' in element['attachableTo']:\n                    attachableTo = 'page'\n                    page.add_code(example_to_pyvibe_code(element['elementType'], example, attachableTo, element['arguments']).replace('<', '&lt;').replace('>', '&gt;'))\n                    if callable(getattr(page, \"add_\"+ element['elementType'], None)):\n                        eval('page.add_' + element['elementType'] + '(' + example_to_arguments(example, element['arguments']) + ')')\n                elif 'form' in element['attachableTo']:\n                    attachableTo = 'form'\n                    card = pv.CardComponent()\n\n                    form = pv.FormComponent(action=\"\")\n\n                    page.add_code(example_to_pyvibe_code(element['elementType'], example, attachableTo, element['arguments']).replace('<', '&lt;').replace('>', '&gt;'))\n                    if callable(getattr(form, \"add_\"+ element['elementType'], None)):\n                        eval('form.add_' + element['elementType'] + '(' + example_to_arguments(example, element['arguments']) + ')')\n\n                    card.add_component(form)\n\n                    page.add_component(card)\n                else:\n                    if len(element['attachableTo']) > 0:\n                        attachableTo = element['attachableTo'][0]\n                        page.add_code(example_to_pyvibe_code(element['elementType'], example, attachableTo, element['arguments']).replace('<', '&lt;').replace('>', '&gt;'))\n                    else:\n                        # TODO: Need a function that doesn't require an attachableTo (i.e. call page = Page(...) etc)\n                        pass\n                        \n\n        page.add_divider()", "\npage.add_html(marketing_banner)"]}
{"filename": "generator/docs/about.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import navbar, footer, marketing_banner, gallery_grid, featured_layouts\n\npage = pv.Page(\"PyVibe\", navbar=navbar, footer=footer, image=\"./img/social.png\")\n\npage.add_header(\"Easily create styled web pages with Python\")\n\npage.add_code(\"\"\"import pyvibe as pv\n\npage = pv.Page()", "\npage = pv.Page()\n\npage.add_header(\"Welcome to PyVibe!\")\n\npage.add_text(\"PyVibe is an open source Python library for creating UI components for web apps without the need to write HTML code.\")\n\"\"\", prefix=\"\", header=\"Example\")\n\nwith page.add_card() as card:\n    card.add_header(\"Welcome to PyVibe!\")\n    card.add_text(\"PyVibe is an open source Python library for creating UI components for web apps without the need to write HTML code.\")", "with page.add_card() as card:\n    card.add_header(\"Welcome to PyVibe!\")\n    card.add_text(\"PyVibe is an open source Python library for creating UI components for web apps without the need to write HTML code.\")\n\npage.add_link(\"See All Components\", \"component_reference.html\")\npage.add_link(\"Interactive Playground\", \"playground.html\")\npage.add_text(\"\")\n\npage.add_header(\"What is PyVibe?\", 3)\npage.add_text(\"PyVibe is a Python library for creating web pages. It is designed to be a quick way for Python developers to build front-ends.\")", "page.add_header(\"What is PyVibe?\", 3)\npage.add_text(\"PyVibe is a Python library for creating web pages. It is designed to be a quick way for Python developers to build front-ends.\")\npage.add_text(\"PyVibe uses a component-based approach to building web pages. This means that you can create a page by combining components together.\")\n\npage.add_header(\"How do I use PyVibe?\", 3)\npage.add_text(\"PyVibe is a Python library that simplifies UI development for web apps by providing semantic Python components that compile into HTML and can be used with any web framework.\")\npage.add_text(\"Fundamentally, PyVibe returns an HTML string that can be used with:\")\n\nwith page.add_list() as list:\n    list.add_listitem(\"<b><a href='https://github.com/pycob/pyvibe/blob/main/generator/docs/about.py'>Static Pages</a></b>: Like the one you're viewing now\", is_checked=True)\n    list.add_listitem(\"<b><a href='flask.html'>Flask</a></b>: Inside a Flask function\", is_checked=True)\n    list.add_listitem(\"<b><a href='https://github.com/pycob/pyvibe/blob/main/generator/docs/playground.py#L124-L151'>Pyodide</a></b>: For dynamic client-side rendered pages\", is_checked=True)", "with page.add_list() as list:\n    list.add_listitem(\"<b><a href='https://github.com/pycob/pyvibe/blob/main/generator/docs/about.py'>Static Pages</a></b>: Like the one you're viewing now\", is_checked=True)\n    list.add_listitem(\"<b><a href='flask.html'>Flask</a></b>: Inside a Flask function\", is_checked=True)\n    list.add_listitem(\"<b><a href='https://github.com/pycob/pyvibe/blob/main/generator/docs/playground.py#L124-L151'>Pyodide</a></b>: For dynamic client-side rendered pages\", is_checked=True)\n\npage.add_text(\"\")\n\npage.add_header(\"What can you build with PyVibe?\", 3)\npage.add_component(gallery_grid(featured_layouts))\npage.add_link(\"See more examples\", \"/gallery.html\")", "page.add_component(gallery_grid(featured_layouts))\npage.add_link(\"See more examples\", \"/gallery.html\")\n\npage.add_header(\"Designed for Autocomplete\", 3)\npage.add_text(\"PyVibe is designed to be used with autocomplete. This means that you can type <code>page.add_</code> and autocomplete will show you all the components that you can add to your page along with documentation about the component.\")\npage.add_html('<img class=\"rounded-lg\" src=\"./img/autocomplete.png\" alt=\"Autocomplete\">')\n\npage.add_header(\"Themes\", 3)\npage.add_text('PyVibe is meant to be a generic framework. While the default theme uses <a href=\"https://flowbite.com/\" class=\"font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline\">Flowbite</a>, which are components that use <a href=\"https://tailwindcss.com/\" class=\"font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline\">TailwindCSS</a>, we envision including many themes and CSS frameworks in the future.')\n", "page.add_text('PyVibe is meant to be a generic framework. While the default theme uses <a href=\"https://flowbite.com/\" class=\"font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline\">Flowbite</a>, which are components that use <a href=\"https://tailwindcss.com/\" class=\"font-medium text-blue-600 underline dark:text-blue-500 hover:no-underline\">TailwindCSS</a>, we envision including many themes and CSS frameworks in the future.')\n\npage.add_header(\"How does PyVibe compare to Streamlit, Plotly Dash, Pynecone, Anvil, NiceGUI, etc?\", 3)\npage.add_text(\"PyVibe is not a web server -- it produces styled HTML that can be used with any web server.\")\n\npage.add_html(marketing_banner)"]}
{"filename": "generator/docs/login.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import navbar, footer\n\npage = pv.Page(\"Login\", navbar=navbar, footer=footer)\n\npage.add_header(\"Login\")\npage.add_text(\"You can create your own login forms or link to third-party auth providers\")"]}
{"filename": "generator/docs/index.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import footer, marketing_banner, gallery_grid, featured_layouts\n\npage = pv.Page(\"PyVibe: Easily create styled web pages with Python\", navbar=None, footer=footer, image=\"https://www.pyvibe.com/img/social.png\")\n\ncontainer_outer = page.add_container(grid_columns=2)\n\ncontainer_inner1 = container_outer.add_container(classes=\"text-center\")\ncontainer_inner1.add_header(\"<span class='gradient-text'>PyVibe</span>\", size=9)\ncontainer_inner1.add_image(\"https://cdn.pycob.com/pyvibe.svg\", 'logo', classes='w-1/2 mx-auto')", "container_inner1.add_header(\"<span class='gradient-text'>PyVibe</span>\", size=9)\ncontainer_inner1.add_image(\"https://cdn.pycob.com/pyvibe.svg\", 'logo', classes='w-1/2 mx-auto')\ncontainer_inner1.add_header(\"Easily create styled web pages with <span class='gradient-text'>Python</span>\")\ncontainer_inner1.add_link(\"Learn more\", \"about.html\")\n\ncontainer_inner2 = container_outer.add_container()\ncontainer_inner2.add_code(\"\"\"import pyvibe as pv\n\npage = pv.Page()\n", "page = pv.Page()\n\npage.add_header(\"Welcome to PyVibe!\")\n\npage.add_text(\"PyVibe is an open source Python library for creating UI components for web apps without the need to write HTML code.\")\n\"\"\", prefix=\"\", header=\"Example\")\n\nwith container_inner2.add_card() as card:\n    card.add_header(\"Welcome to PyVibe!\")\n    card.add_text(\"PyVibe is an open source Python library for creating UI components for web apps without the need to write HTML code.\")", "\npage.add_header(\"Examples\", 2)\npage.add_component(gallery_grid(featured_layouts))\n\npage.add_html(marketing_banner)"]}
{"filename": "generator/docs/flask.py", "chunked_list": ["import pyvibe as pv\nfrom .common.components import navbar, footer, marketing_banner\n\npage = pv.Page(\"Flask\", navbar=navbar, footer=footer)\n\npage.add_header(\"Flask\")\n\npage.add_header(\"Simple Example\", size=4)\npage.add_text(\"PyVibe can be used with Flask. This is a simple example of how to use PyVibe with Flask.\")\n", "page.add_text(\"PyVibe can be used with Flask. This is a simple example of how to use PyVibe with Flask.\")\n\npage.add_text(\"First, create a new file called <code>app.py</code> and add the following code:\")\n\npage.add_code(\"\"\"from flask import Flask\nimport pyvibe as pv\n\napp = Flask(__name__)\n\n@app.route('/')", "\n@app.route('/')\ndef index():\n    page = pv.Page('Home')\n    page.add_header('Hello World')\n    return page.to_html()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\"\"\", prefix=\"\")", "    app.run(debug=True)\n\"\"\", prefix=\"\")\n\npage.add_text(\"Then, run the following command in your terminal:\")\npage.add_code(\"python app.py\", prefix=\"%\")\n\npage.add_section(\"extended-example\", \"Extended Example\")\npage.add_header(\"Extended Example\", size=4)\n\npage.add_image(\"https://storage.googleapis.com/img.pycob.com/screenshot/pypi-analytics.png\", \"PyPi Analytics\", classes=\"shadow-lg w-full md:w-2/5\")", "\npage.add_image(\"https://storage.googleapis.com/img.pycob.com/screenshot/pypi-analytics.png\", \"PyPi Analytics\", classes=\"shadow-lg w-full md:w-2/5\")\npage.add_link(\"Live App\", \"https://pypi-analytics.pycob.app\")\npage.add_link(\"Source Code on GitHub\", \"https://github.com/pycob/pyvibe/blob/main/sample-apps/pypi-analytics/main.py\")\n\npage.add_emgithub(\"https://github.com/pycob/pyvibe/blob/main/sample-apps/pypi-analytics/main.py\")\n\npage.add_html(marketing_banner)"]}
{"filename": "generator/docs/common/components.py", "chunked_list": ["import pyvibe as pv\n\nnavbar = pv.Navbar(\"PyVibe\")\nnavbar.add_navbarlink(\"Gallery\", \"/gallery.html\")\nnavbar.add_navbarlink(\"Flask\", \"/flask.html\")\nnavbar.add_navbarlink(\"Playground\", \"/playground.html\")\nnavbar.add_navbarlink(\"Components\", \"/component_reference.html\")\nnavbar.add_navbarlink('<svg class=\"w-4 h-4 mr-2 -ml-1\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"github\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\"><path fill=\"currentColor\" d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"></path></svg> GitHub', \"https://github.com/pycob/pyvibe\", classes=\"inline-flex items-center\")\n\nfooter = pv.Footer()\nwith footer.add_footercategory(\"About\") as category:\n    category.add_footerlink(\"About PyVibe\", \"/about.html\")\n    category.add_footerlink(\"PyVibe on GitHub\", \"https://github.com/pycob/pyvibe\")\n    category.add_footerlink(\"PyVibe on PyPI\", \"https://pypi.org/project/pyvibe/\")", "\nfooter = pv.Footer()\nwith footer.add_footercategory(\"About\") as category:\n    category.add_footerlink(\"About PyVibe\", \"/about.html\")\n    category.add_footerlink(\"PyVibe on GitHub\", \"https://github.com/pycob/pyvibe\")\n    category.add_footerlink(\"PyVibe on PyPI\", \"https://pypi.org/project/pyvibe/\")\n\nwith footer.add_footercategory(\"Learn\") as category:\n    category.add_footerlink(\"Gallery\", \"/gallery.html\")\n    category.add_footerlink(\"Interactive Playground\", \"/playground.html\")\n    category.add_footerlink(\"Flask\", \"/flask.html\")\n    category.add_footerlink(\"Component Reference\", \"/component_reference.html\")", "\nmarketing_banner = \"\"\"\n<script>\n  function dismissBanner() {\n    document.getElementById('marketing-banner').remove()    \n  }\n</script>\n<div id=\"marketing-banner\" tabindex=\"-1\" class=\"dark fixed z-50 flex flex-col md:flex-row justify-between w-[calc(100%-2rem)] p-4 -translate-x-1/2 border rounded-lg shadow-sm lg:max-w-7xl left-1/2 bottom-6 bg-gray-700 border-gray-600\">\n    <div class=\"flex flex-col items-start mb-3 mr-4 md:items-center md:flex-row md:mb-0\">\n        <a href=\"https://pypi.org/project/pyvibe/\" class=\"flex items-center mb-2 border-gray-200 md:pr-4 md:mr-4 md:border-r md:mb-0 dark:border-gray-600\">", "    <div class=\"flex flex-col items-start mb-3 mr-4 md:items-center md:flex-row md:mb-0\">\n        <a href=\"https://pypi.org/project/pyvibe/\" class=\"flex items-center mb-2 border-gray-200 md:pr-4 md:mr-4 md:border-r md:mb-0 dark:border-gray-600\">\n            <img src=\"https://cdn.pycob.com/pyvibe.svg\" class=\"h-6 mr-2\" alt=\"Pycob Logo\">\n            <span class=\"self-center text-lg font-semibold whitespace-nowrap dark:text-white\">PyVibe</span>\n        </a>\n        <p class=\"flex items-center text-sm font-normal text-gray-500 dark:text-gray-400\">Easily create styled web pages with Python</p>\n    </div>\n    <div class=\"flex items-center flex-shrink-0\">\n        <a href=\"https://discord.gg/uQWPfyP6z4\" class=\"relative inline-flex items-center justify-center p-0.5 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800\">\n            <span class=\"relative inline-flex px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">", "        <a href=\"https://discord.gg/uQWPfyP6z4\" class=\"relative inline-flex items-center justify-center p-0.5 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800\">\n            <span class=\"relative inline-flex px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0\">\n                <svg class=\"w-5 h-5 text-yellow-400 mr-1\" viewBox=\"0 -28.5 256 256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\">\n                    <g>\n                        <path d=\"M216.856339,16.5966031 C200.285002,8.84328665 182.566144,3.2084988 164.041564,0 C161.766523,4.11318106 159.108624,9.64549908 157.276099,14.0464379 C137.583995,11.0849896 118.072967,11.0849896 98.7430163,14.0464379 C96.9108417,9.64549908 94.1925838,4.11318106 91.8971895,0 C73.3526068,3.2084988 55.6133949,8.86399117 39.0420583,16.6376612 C5.61752293,67.146514 -3.4433191,116.400813 1.08711069,164.955721 C23.2560196,181.510915 44.7403634,191.567697 65.8621325,198.148576 C71.0772151,190.971126 75.7283628,183.341335 79.7352139,175.300261 C72.104019,172.400575 64.7949724,168.822202 57.8887866,164.667963 C59.7209612,163.310589 61.5131304,161.891452 63.2445898,160.431257 C105.36741,180.133187 151.134928,180.133187 192.754523,160.431257 C194.506336,161.891452 196.298154,163.310589 198.110326,164.667963 C191.183787,168.842556 183.854737,172.420929 176.223542,175.320965 C180.230393,183.341335 184.861538,190.991831 190.096624,198.16893 C211.238746,191.588051 232.743023,181.531619 254.911949,164.955721 C260.227747,108.668201 245.831087,59.8662432 216.856339,16.5966031 Z M85.4738752,135.09489 C72.8290281,135.09489 62.4592217,123.290155 62.4592217,108.914901 C62.4592217,94.5396472 72.607595,82.7145587 85.4738752,82.7145587 C98.3405064,82.7145587 108.709962,94.5189427 108.488529,108.914901 C108.508531,123.290155 98.3405064,135.09489 85.4738752,135.09489 Z M170.525237,135.09489 C157.88039,135.09489 147.510584,123.290155 147.510584,108.914901 C147.510584,94.5396472 157.658606,82.7145587 170.525237,82.7145587 C183.391518,82.7145587 193.761324,94.5189427 193.539891,108.914901 C193.539891,123.290155 183.391518,135.09489 170.525237,135.09489 Z\" fill=\"#5865F2\" fill-rule=\"nonzero\"></path>\n                    </g>\n                </svg>\n                Get Help on Discord \n            </span>\n        </a>", "            </span>\n        </a>\n      <a href=\"https://github.com/pycob/pyvibe\" type=\"button\" class=\"text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 flex items-center\">\n          <svg aria-hidden=\"true\" class=\"w-5 h-5 text-yellow-400 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><title>First star</title><path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path></svg>\n      Star on GitHub</a>\n        <button onclick=\"dismissBanner()\" data-dismiss-target=\"#marketing-banner\" type=\"button\" class=\"absolute top-2.5 right-2.5 md:relative md:top-auto md:right-auto flex-shrink-0 inline-flex justify-center items-center text-gray-400 hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 dark:hover:bg-gray-600 dark:hover:text-white\">\n            <svg aria-hidden=\"true\" class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n            <span class=\"sr-only\">Close banner</span>\n        </button>\n    </div>", "        </button>\n    </div>\n</div>\n    \"\"\"\n\ndef gallery_item(name: str) -> pv.Component:\n    card = pv.CardComponent()\n\n    card.add_image(f\"./img/{name}.png\", name, classes=\"w-full shadow-lg\")\n    card.add_header(name.replace(\"_\", \" \").title(), size=3, classes=\"mt-1\")\n    card.add_link(\"Preview with Source Code\", f\"/gallery/{name}.html\")\n\n    return card", "\ndef gallery_grid(names: list[str]) -> pv.Component:\n    grid = pv.ContainerComponent(grid_columns=4)\n\n    for name in names:\n        grid.add_component(gallery_item(name))\n\n    return grid\n\nfeatured_layouts = [", "\nfeatured_layouts = [\n    \"card\",\n    \"form\",\n    \"chart\",\n    \"table\",\n]\n\nimport os\ndir_path = os.path.dirname(os.path.realpath(__file__))", "import os\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(\"dir_path = \", dir_path)\n\nall_layouts = []\n\n# Add all files in the ../../gallery directory\nfor file in os.listdir(os.path.dirname(os.path.dirname(dir_path)) + \"/gallery/\"):\n    if file.endswith(\".py\"):\n        all_layouts.append(file[:-3])", ""]}
{"filename": "generator/gallery/card.py", "chunked_list": ["import pyvibe as pv\n\npage = pv.Page(\"Card Example\")\n\npage.add_header(\"Card Example\")\n\nwith page.add_card() as card:\n    card.add_header(\"Card Header\")\n    card.add_text(\"This is a card. You can put most types of content in a card.\")\n    card.add_link(\"Learn more\", \"https://pycob.com\")", "\n"]}
{"filename": "generator/gallery/chart.py", "chunked_list": ["import pyvibe as pv\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\n\npage = pv.Page(\"Chart Example\")\n\npage.add_header(\"Chart Example\")\n\nfig = px.bar(df, x='year', y='pop')", "\nfig = px.bar(df, x='year', y='pop')\n\npage.add_plotlyfigure(fig)"]}
{"filename": "generator/gallery/form.py", "chunked_list": ["import pyvibe as pv\n\npage = pv.Page(\"Form Example\")\n\n\n# Here we put the form inside a card so it is easier to see.\nwith page.add_card() as card:\n    card.add_header(\"Form Example\")\n\n    with card.add_form() as form:\n        form.add_formtext(label=\"Name\", name=\"name\", placeholder=\"Enter your name\")\n        form.add_formemail(label=\"Email\", name=\"email\", placeholder=\"Enter your email\")\n        form.add_formpassword(label=\"Password\", name=\"password\", placeholder=\"Enter your password\")\n        form.add_formtextarea(label=\"Message\", name=\"message\", placeholder=\"Enter your message\")\n        form.add_formsubmit(label=\"Send\")", ""]}
{"filename": "generator/gallery/grid.py", "chunked_list": ["import pyvibe as pv\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\ndf = df.sort_values(by=\"year\")\n\npage = pv.Page(\"Grid Example\")\n\npage.add_header(\"Grid Example\")\n\nwith page.add_container(grid_columns=2) as container:\n    container.add_plotlyfigure(px.bar(df, x='year', y='pop'))\n    container.add_plotlyfigure(px.line(df, x='year', y='lifeExp'))\n    container.add_plotlyfigure(px.bar(df, x='year', y='gdpPercap'))\n    container.add_plotlyfigure(px.bar(df, x='year', y='pop'))", "page.add_header(\"Grid Example\")\n\nwith page.add_container(grid_columns=2) as container:\n    container.add_plotlyfigure(px.bar(df, x='year', y='pop'))\n    container.add_plotlyfigure(px.line(df, x='year', y='lifeExp'))\n    container.add_plotlyfigure(px.bar(df, x='year', y='gdpPercap'))\n    container.add_plotlyfigure(px.bar(df, x='year', y='pop'))"]}
{"filename": "generator/gallery/table.py", "chunked_list": ["import pyvibe as pv\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\n\npage = pv.Page(\"Table Example\")\n\npage.add_header(\"Table Example\")\n\nactions = [", "\nactions = [\n    # This button uses the year for the row as a parameter in the URL\n    pv.Rowaction(\"Edit\", \"#/edit?year={year}\", \"edit\", open_in_new_window=False),\n    # This button uses the country for the row as a parameter in the URL\n    pv.Rowaction(\"{iso_alpha}\", \"#/country?year={year}&country={country}\", open_in_new_window=False)\n]\n\npage.add_pandastable(df, action_buttons=actions)\n", "page.add_pandastable(df, action_buttons=actions)\n"]}
{"filename": "sample-apps/pypi-analytics/main.py", "chunked_list": ["# INITIALIZATION\nfrom flask import Flask, request\nimport pyvibe as pv\n\nimport pycob as cob\nimport plotly.express as px\n\napp = Flask(__name__)\npypi_projects_by_month = cob.fetch_pickle('pypi_projects_by_month.pkl')\n", "pypi_projects_by_month = cob.fetch_pickle('pypi_projects_by_month.pkl')\n\n# PAGE FUNCTIONS\n@app.route('/')\ndef home() -> str:\n    page = pv.Page(\"PyPi Analytics\")\n    page.add_header(\"PyPi Analytics\")\n    page.add_text(\"PyPi analytics enables Python engineers to identify usage trends with Python packages as an input for picking the right package\")\n    page.add_link(\"See the source code for this app\", \"/view_source\")\n    page.add_text(\"\")\n    \n    top_projects = pypi_projects_by_month.groupby('pypi_project').sum().sort_values('avg_downloads_per_day', ascending=False).reset_index().head(50)\n\n    action_buttons = [\n        cob.Rowaction(label=\"Analytics\", url=\"/project_detail?project_name={pypi_project}\", open_in_new_window=True),\n        cob.Rowaction(label=\"Project\", url=\"https://pypi.org/project/{pypi_project}\", open_in_new_window=True),\n    ]\n    \n    with page.add_card() as card:\n        card.add_header(\"Analyze a Project\")\n        with card.add_form(action=\"/project_detail\") as form:\n            form.add_formtext(name=\"project_name\", label=\"Project Name\", placeholder=\"Enter a project name\")\n            form.add_formsubmit(\"Analyze\")\n\n    page.add_text(\"\")\n\n    page.add_header(\"Top 50 Projects by Downloads\", size=4)\n    page.add_pandastable(top_projects, action_buttons=action_buttons)\n    \n    return page.to_html()", "\n@app.route('/project_detail')\ndef project_detail() -> str:\n    page = pv.Page(\"PyPi Analytics\")\n    \n    project_name = request.args['project_name']\n    if 'compare_to' in request.args:\n        compare_to = request.args['compare_to']\n        subtitle = request.args['compare_to']\n    else:\n        compare_to = None\n        subtitle = None\n\n    page.add_header(f\"PyPi Analytics for <code>{project_name}</code>\")\n\n    if not subtitle:\n        with page.add_form(action=\"/project_detail\") as form:\n            form.add_formhidden(name=\"project_name\", value=project_name)\n            form.add_formhidden(name=\"compare_to\", value=compare_to if compare_to else \"\")\n            form.add_formtext(name=\"subtitle\", label=\"Subtitle\", placeholder=\"Enter a subtitle\")\n            form.add_formsubmit(\"Update Subtitle\")\n    else:\n        page.add_header(f\"{subtitle}\", size=4)\n    \n    if compare_to:\n        project_detail = pypi_projects_by_month[pypi_projects_by_month['pypi_project'].isin([project_name, compare_to])]\n    else:\n        project_detail = pypi_projects_by_month[pypi_projects_by_month['pypi_project'] == project_name]\n    \n    fig = px.line(project_detail.sort_values([\"month\", \"pypi_project\"]), x=\"month\", y=\"avg_downloads_per_day\", line_group=\"pypi_project\", color=\"pypi_project\")\n\n    page.add_plotlyfigure(fig)\n    \n    if not compare_to:\n        with page.add_card() as card:\n            with card.add_form(action=\"/project_detail\") as form:\n                form.add_formhidden(name=\"project_name\", value=project_name)\n                form.add_formtext(label=\"Compare To\", name=\"compare_to\", placeholder=\"Enter a project name\")\n                form.add_formsubmit(\"Analyze\")\n\n    return page.to_html()", "\n@app.route('/view_source')\ndef view_source() -> str:\n    page = pv.Page(\"View Source\")\n    page.add_header(\"View Source\")\n\n    # Read the source code\n    with open(__file__, 'r') as f:\n        source = f.read()\n\n    # Add the source code to the page\n    page.add_codeeditor(source, language=\"python\")\n\n    return page.to_html()", "\n# RUN APP\nif __name__ == '__main__':\n    app.run(debug=True)\n"]}
{"filename": "sample-apps/websockets/main.py", "chunked_list": ["import pyvibe as pv\nfrom flask import Flask, render_template\nfrom flask_sock import Sock\n\napp = Flask(__name__)\nsock = Sock(app)\n\nclass WebSocketReceiverComponent(pv.Component):\n    def __init__(self, path_to_websocket: str):    \n        self.path_to_websocket = path_to_websocket\n\n    def to_html(self):\n        return \"\"\"\n        <div id=\"log\"></div>\n        <script>\n            var httpProtocol = 'http://'; \n            var wsProtocol = 'ws://';\n            if (window.location.protocol === 'https:') {\n                httpProtocol = 'http://';\n                wsProtocol = 'wss://';\n            }\n\n            const log = (text, color) => {\n                document.getElementById('log').innerHTML += `<span style=\"color: ${color}\">${text}</span><br>`;\n            };\n\n            const socket = new WebSocket(wsProtocol + location.host + '\"\"\" + self.path_to_websocket + \"\"\"');\n            socket.addEventListener('message', ev => {\n                document.getElementById('log').innerHTML += ev.data;\n            });\n        </script>\n        \"\"\"", " \nclass WebSocketSenderComponent(pv.Component):\n    def __init__(self, path_to_websocket: str):    \n        self.path_to_websocket = path_to_websocket\n\n    def to_html(self):\n        return \"\"\"\n        <form class=\"max-w-full\" style=\"width: 500px\" onsubmit=\"event.preventDefault(); sendWebsocket(this)\" action=\"?\" method=\"GET\">\n            <div class=\"mb-6\">\n                <label for=\"text\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Input</label>\n                <input type=\"text\" name=\"text\" value=\"\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"\" required=\"\">\n            </div>\n            <button type=\"submit\" class=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Send</button> \n        </form>\n        <script>\n            function sendWebsocket(form) {\n                const textField = form.text;\n                socket.send(textField.value);\n                textField.value = '';\n                return false;\n            }\n        </script>\n        \"\"\"", "\n@app.route('/')\ndef index():\n    page = pv.Page('Websocket Test', description='WebSocket proof of concept using Flask-Sock and PyVibe')\n\n    page.add_header(\"Websocket Test\")\n\n    with page.add_container(grid_columns=2) as container:\n        with container.add_card() as card:\n            card.add_header('Send')\n            card.add_component(WebSocketSenderComponent('/echo'))\n        \n        with container.add_card() as card:\n            card.add_header('Receive')\n            card.add_component(WebSocketReceiverComponent('/echo'))\n\n    page.add_header(\"Source Code\")\n    page.add_emgithub(\"https://github.com/pycob/pyvibe/blob/main/sample-apps/websockets/main.py\")\n\n    return page.to_html()", "\nfrom threading import Timer\n\n@sock.route('/echo')\ndef echo(sock):\n    while True:\n        data = sock.receive()\n\n        alert_component = pv.AlertComponent(data, 'Received')\n\n        sock.send(alert_component.to_html())", "\nif __name__ == '__main__':\n    app.run(debug=True)"]}
{"filename": "integration_tests/flask_test.py", "chunked_list": ["from flask import Flask\nimport pyvibe as pv\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    page = pv.Page('Home')\n    page.add_header('Hello World')\n    return page.to_html()", "\nif __name__ == '__main__':\n    app.run(debug=True)"]}
{"filename": "src/pyvibe/component_interface.py", "chunked_list": ["import json\nfrom abc import ABC, abstractmethod\n\n# Base class for all components\nclass Component:\n    @abstractmethod\n    def to_html(self) -> str:\n        pass\n\n    def _repr_html_(self):\n        return self.to_html()\n\n    def to_json(self) -> str:\n        return json.dumps(self, default=lambda o: o.__dict__,\n            sort_keys=True, indent=4)", "\n"]}
{"filename": "src/pyvibe/__init__.py", "chunked_list": ["from __future__ import annotations\nfrom .component_interface import *\nimport uuid\n\n\n\nclass AlertComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_alert` method of the parent component.\n  \"\"\"\n  def __init__(self, text: str, badge: str = '', color: str = 'indigo'):    \n    self.text = text\n    self.badge = badge\n    self.color = color\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"text-center py-4 lg:px-4\">\n<div class=\"p-2 bg-''' + self.color + '''-800 items-center text-''' + self.color + '''-100 leading-none lg:rounded-full flex lg:inline-flex\" role=\"alert\">\n    <span class=\"flex rounded-full bg-''' + self.color + '''-500 uppercase px-2 py-1 text-xs font-bold mr-3\">''' + self.badge + '''</span>\n    <span class=\"font-semibold mr-2 text-left flex-auto\">''' + self.text + '''</span>            \n</div>\n</div>'''", "\nclass CardComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_card` method of the parent component.\n  \"\"\"\n  def __init__(self, center_content: bool = False, classes: str = '', components: list = None):    \n    self.center_content = center_content\n    self.classes = classes\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"block p-6 mb-6 bg-white border border-gray-200 rounded-lg shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 overflow-x-auto max-w-fit mx-auto ''' + self.classes + '''\">\n    <div class=\"flex flex-col h-full \">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </div>\n</div>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_html(self, value: str) -> HtmlComponent:\n    \"\"\"Renders raw HTML. This is meant to be an escape hatch for when you need to render something that isn't supported by PyVibe.\n\n    Args:\n        value (str): Raw HTML code to be rendered\n    \n    Returns:\n        HtmlComponent: The new component\n    \"\"\"\n    new_component = HtmlComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_text(self, value: str) -> TextComponent:\n    \"\"\"Renders a paragraph of text\n\n    Args:\n        value (str): Text to be rendered\n    \n    Returns:\n        TextComponent: The new component\n    \"\"\"\n    new_component = TextComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_link(self, text: str, url: str, classes: str = '') -> LinkComponent:\n    \"\"\"Renders a link\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        LinkComponent: The new component\n    \"\"\"\n    new_component = LinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_plainlink(self, text: str, url: str, classes: str = '') -> PlainlinkComponent:\n    \"\"\"Renders a link without any styling\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        PlainlinkComponent: The new component\n    \"\"\"\n    new_component = PlainlinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_list(self, show_dots: bool = True, classes: str = '', components: list = None) -> ListComponent:\n    \"\"\"Renders a list of items\n\n    Args:\n        show_dots (bool): Optional. Whether or not to show dots\n        classes (str): Optional. Classes to be applied to the list\n        components (list): Items to be rendered\n    \n    Returns:\n        ListComponent: The new component\n    \"\"\"\n    new_component = ListComponent(show_dots, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_image(self, url: str, alt: str, classes: str = '') -> ImageComponent:\n    \"\"\"Renders an image\n\n    Args:\n        url (str): URL of the image\n        alt (str): Alt text for the image\n        classes (str): Optional. Classes to be applied to the image\n    \n    Returns:\n        ImageComponent: The new component\n    \"\"\"\n    new_component = ImageComponent(url, alt, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_header(self, text: str, size: int = 5, classes: str = '') -> HeaderComponent:\n    \"\"\"Renders a header\n\n    Args:\n        text (str): Text to be rendered\n        size (int): Optional. Size of the header. Choose 1-9\n        classes (str): Optional. Classes to be applied to the header\n    \n    Returns:\n        HeaderComponent: The new component\n    \"\"\"\n    new_component = HeaderComponent(text, size, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_card(self, center_content: bool = False, classes: str = '', components: list = None) -> CardComponent:\n    \"\"\"Renders a card\n\n    Args:\n        center_content (bool): Optional. Whether the card contents should be centered\n        classes (str): Optional. Classes to be applied to the card\n        components (list): Components to be rendered inside the card\n    \n    Returns:\n        CardComponent: The new component\n    \"\"\"\n    new_component = CardComponent(center_content, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_container(self, grid_columns: int = None, classes: str = '', components: list = None) -> ContainerComponent:\n    \"\"\"Renders a container to help with layout\n\n    Args:\n        grid_columns (int): Optional. Number of columns (if any) to use. 1-12\n        classes (str): Optional. Classes to be applied to the container\n        components (list): Components to be rendered inside the container\n    \n    Returns:\n        ContainerComponent: The new component\n    \"\"\"\n    new_component = ContainerComponent(grid_columns, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_alert(self, text: str, badge: str = '', color: str = 'indigo') -> AlertComponent:\n    \"\"\"Renders an alert\n\n    Args:\n        text (str): Text to be rendered\n        badge (str): Optional. Text to be rendered inside the badge\n        color (str): Optional. Color of the. Choose 'indigo', 'orange', or 'red'\n    \n    Returns:\n        AlertComponent: The new component\n    \"\"\"\n    new_component = AlertComponent(text, badge, color)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_code(self, value: str, header: str = '', prefix: str = '>>>') -> CodeComponent:\n    \"\"\"Renders a block of code\n\n    Args:\n        value (str): Code to be rendered\n        header (str): Optional. Header to be rendered above the code block\n        prefix (str): Optional. Prefix to be rendered before the code block\n    \n    Returns:\n        CodeComponent: The new component\n    \"\"\"\n    new_component = CodeComponent(value, header, prefix)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_divider(self) -> DividerComponent:\n    \"\"\"Renders a divider\n\n    \n    \n    Returns:\n        DividerComponent: The new component\n    \"\"\"\n    new_component = DividerComponent()    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_form(self, action: str = '?', method: str = 'GET', components: list = None) -> FormComponent:\n    \"\"\"Renders a form\n\n    Args:\n        action (str): Optional. Action for the form. This is the page that the form will submit to. Defaults to the current page\n        method (str): Optional. Method for the form (i.e. GET, POST)\n        components (list): List of Component of the form\n    \n    Returns:\n        FormComponent: The new component\n    \"\"\"\n    new_component = FormComponent(action, method, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtext(self, label: str, name: str, placeholder: str = '', value: str = '') -> FormtextComponent:\n    \"\"\"Renders a form\n\n    Args:\n        label (str): Label for the form text\n        name (str): Name for the form text\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextComponent: The new component\n    \"\"\"\n    new_component = FormtextComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formemail(self, label: str = 'Your E-mail', name: str = 'email', placeholder: str = 'user@example.com') -> FormemailComponent:\n    \"\"\"Renders a form email\n\n    Args:\n        label (str): Optional. Label for the form email\n        name (str): Optional. Name for the form email\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormemailComponent: The new component\n    \"\"\"\n    new_component = FormemailComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formpassword(self, label: str = 'Password', name: str = 'password', placeholder: str = 'password') -> FormpasswordComponent:\n    \"\"\"Renders a form password\n\n    Args:\n        label (str): Optional. Label for the form password\n        name (str): Optional. Name for the form password\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormpasswordComponent: The new component\n    \"\"\"\n    new_component = FormpasswordComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formselect(self, label: str, name: str, options, value: str = '') -> FormselectComponent:\n    \"\"\"Renders a form select\n\n    Args:\n        label (str): Label for the form select\n        name (str): Name for the form select\n        options: Options for the form select\n        value (str): Optional. Selected value\n    \n    Returns:\n        FormselectComponent: The new component\n    \"\"\"\n    new_component = FormselectComponent(label, name, options, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtextarea(self, label: str = 'Your Message', name: str = 'message', placeholder: str = 'Leave a comment...', value: str = '') -> FormtextareaComponent:\n    \"\"\"Renders a text area\n\n    Args:\n        label (str): Optional. Label for the text area\n        name (str): Optional. Name for the text area\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextareaComponent: The new component\n    \"\"\"\n    new_component = FormtextareaComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formsubmit(self, label: str = 'Submit') -> FormsubmitComponent:\n    \"\"\"Renders a form submit button\n\n    Args:\n        label (str): Optional. Label for the form submit button\n    \n    Returns:\n        FormsubmitComponent: The new component\n    \"\"\"\n    new_component = FormsubmitComponent(label)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_rawtable(self, components: list = None) -> RawtableComponent:\n    \"\"\"Renders a table manually by constructing the table header, body, content, etc.. This is useful if you want to customize the table more than what the other table functions allow. Most of the time you'll use the other table functions instead of this one.\n\n    Args:\n        components (list): Components to render in the table\n    \n    Returns:\n        RawtableComponent: The new component\n    \"\"\"\n    new_component = RawtableComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_pandastable(self, dataframe, hide_fields: list = [], action_buttons: list = None):\n    \"\"\"Renders a pandas table\n\n    Args:\n        dataframe: Dataframe to render\n        hide_fields (list): List of fields to hide\n        action_buttons (list): Row actions to render\n    \n    Returns:\n        PandastableComponent: The new component\n    \"\"\"\n    advanced_add_pandastable(self, dataframe, hide_fields, action_buttons)\n    return self\n    \n\n  def add_plotlyfigure(self, fig, id: str = '') -> PlotlyfigureComponent:\n    \"\"\"Renders a plotly figure\n\n    Args:\n        fig: Figure to render\n        id (str): Optional. Unique ID for this element. Will default to a UUID.\n    \n    Returns:\n        PlotlyfigureComponent: The new component\n    \"\"\"\n    new_component = PlotlyfigureComponent(fig, id)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_datagrid(self, dataframe, action_buttons: list = None):\n    \"\"\"Renders a data grid\n\n    Args:\n        dataframe: Dataframe to render\n        action_buttons (list): Row actions to render\n    \n    Returns:\n        DatagridComponent: The new component\n    \"\"\"\n    advanced_add_datagrid(self, dataframe, action_buttons)\n    return self\n    \n\n\n  def add_emgithub(self, url: str):\n    \"\"\"Renders a block of code from a github URL\n\n    Args:\n        url (str): URL of the GitHub file to be rendered\n    \n    Returns:\n        EmgithubComponent: The new component\n    \"\"\"\n    advanced_add_emgithub(self, url)\n    return self\n    \n\n  def add_scriptstatus(self, job_id: str, redirect_url: str) -> ScriptstatusComponent:\n    \"\"\"Shows the status of a script execution and redirects to a new page when complete\n\n    Args:\n        job_id (str): Job id to check the status of\n        redirect_url (str): URL to redirect to when the script is complete\n    \n    Returns:\n        ScriptstatusComponent: The new component\n    \"\"\"\n    new_component = ScriptstatusComponent(job_id, redirect_url)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass CodeComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_code` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str, header: str = '', prefix: str = '>>>'):    \n    self.value = value\n    self.header = header\n    self.prefix = prefix\n    # Replace < and > in prefix:\n    self.prefix = self.prefix.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mx-auto my-10 max-w-3xl\">\n    <div class=\"flex h-11 w-full items-center justify-start space-x-1.5 rounded-t-lg bg-gray-900 px-3\">\n        <span class=\"h-3 w-3 rounded-full bg-red-400\"></span>\n        <span class=\"h-3 w-3 rounded-full bg-yellow-400\"></span>\n        <span class=\"h-3 w-3 rounded-full bg-green-400\"></span>\n        <code class=\"pl-5 text-lime-500\">''' + self.header + '''</code>\n    </div>\n    <div class=\"w-full border-t-0 bg-gray-700 pb-5 rounded-b-lg whitespace-nowrap overflow-x-auto p-2\">\n        <code class=\"text-gray-500\">''' + self.prefix + '''</code>\n        <code class=\"text-white\" style=\"white-space: break-spaces\">''' + self.value + '''</code>\n    </div>\n</div>'''", "\nclass CodeeditorComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_codeeditor` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str, language: str = 'python'):    \n    self.value = value\n    self.language = language\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<style type=\"text/css\" media=\"screen\">\n#editorContainer {\n    // width: calc( 100vw - 40px );\n    height: 500px;\n    max-height: calc( 80vh - 60px );\n    position: relative;\n    background-color: red;\n}\n#editor { \n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n</style>\n\n<div id=\"editorContainer\">\n    <div id=\"editor\">''' + self.value + '''</div> \n</div>\n<script src=\"https://cdn.jsdelivr.net/gh/ajaxorg/ace-builds/src-noconflict/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script>\n    var editor = ace.edit(\"editor\");\n    editor.setTheme(\"ace/theme/monokai\");\n    editor.session.setMode(\"ace/mode/''' + self.language + '''\");\n\n    // const savedCode = localStorage.getItem('code');\n\n    // if (savedCode) {\n    //     editor.setValue(savedCode);\n    // }\n</script>'''", "\nclass ContainerComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_container` method of the parent component.\n  \"\"\"\n  def __init__(self, grid_columns: int = None, classes: str = '', components: list = None):    \n    self.grid_columns = grid_columns\n    self.classes = classes\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    if grid_columns is not None:\n        self.classes += \" grid gap-6 md:grid-cols-\" + str(grid_columns)\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\" ''' + self.classes + '''\">\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</div>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_html(self, value: str) -> HtmlComponent:\n    \"\"\"Renders raw HTML. This is meant to be an escape hatch for when you need to render something that isn't supported by PyVibe.\n\n    Args:\n        value (str): Raw HTML code to be rendered\n    \n    Returns:\n        HtmlComponent: The new component\n    \"\"\"\n    new_component = HtmlComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_text(self, value: str) -> TextComponent:\n    \"\"\"Renders a paragraph of text\n\n    Args:\n        value (str): Text to be rendered\n    \n    Returns:\n        TextComponent: The new component\n    \"\"\"\n    new_component = TextComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_link(self, text: str, url: str, classes: str = '') -> LinkComponent:\n    \"\"\"Renders a link\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        LinkComponent: The new component\n    \"\"\"\n    new_component = LinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_plainlink(self, text: str, url: str, classes: str = '') -> PlainlinkComponent:\n    \"\"\"Renders a link without any styling\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        PlainlinkComponent: The new component\n    \"\"\"\n    new_component = PlainlinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_list(self, show_dots: bool = True, classes: str = '', components: list = None) -> ListComponent:\n    \"\"\"Renders a list of items\n\n    Args:\n        show_dots (bool): Optional. Whether or not to show dots\n        classes (str): Optional. Classes to be applied to the list\n        components (list): Items to be rendered\n    \n    Returns:\n        ListComponent: The new component\n    \"\"\"\n    new_component = ListComponent(show_dots, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_image(self, url: str, alt: str, classes: str = '') -> ImageComponent:\n    \"\"\"Renders an image\n\n    Args:\n        url (str): URL of the image\n        alt (str): Alt text for the image\n        classes (str): Optional. Classes to be applied to the image\n    \n    Returns:\n        ImageComponent: The new component\n    \"\"\"\n    new_component = ImageComponent(url, alt, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_header(self, text: str, size: int = 5, classes: str = '') -> HeaderComponent:\n    \"\"\"Renders a header\n\n    Args:\n        text (str): Text to be rendered\n        size (int): Optional. Size of the header. Choose 1-9\n        classes (str): Optional. Classes to be applied to the header\n    \n    Returns:\n        HeaderComponent: The new component\n    \"\"\"\n    new_component = HeaderComponent(text, size, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_card(self, center_content: bool = False, classes: str = '', components: list = None) -> CardComponent:\n    \"\"\"Renders a card\n\n    Args:\n        center_content (bool): Optional. Whether the card contents should be centered\n        classes (str): Optional. Classes to be applied to the card\n        components (list): Components to be rendered inside the card\n    \n    Returns:\n        CardComponent: The new component\n    \"\"\"\n    new_component = CardComponent(center_content, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_container(self, grid_columns: int = None, classes: str = '', components: list = None) -> ContainerComponent:\n    \"\"\"Renders a container to help with layout\n\n    Args:\n        grid_columns (int): Optional. Number of columns (if any) to use. 1-12\n        classes (str): Optional. Classes to be applied to the container\n        components (list): Components to be rendered inside the container\n    \n    Returns:\n        ContainerComponent: The new component\n    \"\"\"\n    new_component = ContainerComponent(grid_columns, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_alert(self, text: str, badge: str = '', color: str = 'indigo') -> AlertComponent:\n    \"\"\"Renders an alert\n\n    Args:\n        text (str): Text to be rendered\n        badge (str): Optional. Text to be rendered inside the badge\n        color (str): Optional. Color of the. Choose 'indigo', 'orange', or 'red'\n    \n    Returns:\n        AlertComponent: The new component\n    \"\"\"\n    new_component = AlertComponent(text, badge, color)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_code(self, value: str, header: str = '', prefix: str = '>>>') -> CodeComponent:\n    \"\"\"Renders a block of code\n\n    Args:\n        value (str): Code to be rendered\n        header (str): Optional. Header to be rendered above the code block\n        prefix (str): Optional. Prefix to be rendered before the code block\n    \n    Returns:\n        CodeComponent: The new component\n    \"\"\"\n    new_component = CodeComponent(value, header, prefix)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_form(self, action: str = '?', method: str = 'GET', components: list = None) -> FormComponent:\n    \"\"\"Renders a form\n\n    Args:\n        action (str): Optional. Action for the form. This is the page that the form will submit to. Defaults to the current page\n        method (str): Optional. Method for the form (i.e. GET, POST)\n        components (list): List of Component of the form\n    \n    Returns:\n        FormComponent: The new component\n    \"\"\"\n    new_component = FormComponent(action, method, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtext(self, label: str, name: str, placeholder: str = '', value: str = '') -> FormtextComponent:\n    \"\"\"Renders a form\n\n    Args:\n        label (str): Label for the form text\n        name (str): Name for the form text\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextComponent: The new component\n    \"\"\"\n    new_component = FormtextComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formemail(self, label: str = 'Your E-mail', name: str = 'email', placeholder: str = 'user@example.com') -> FormemailComponent:\n    \"\"\"Renders a form email\n\n    Args:\n        label (str): Optional. Label for the form email\n        name (str): Optional. Name for the form email\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormemailComponent: The new component\n    \"\"\"\n    new_component = FormemailComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formpassword(self, label: str = 'Password', name: str = 'password', placeholder: str = 'password') -> FormpasswordComponent:\n    \"\"\"Renders a form password\n\n    Args:\n        label (str): Optional. Label for the form password\n        name (str): Optional. Name for the form password\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormpasswordComponent: The new component\n    \"\"\"\n    new_component = FormpasswordComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formselect(self, label: str, name: str, options, value: str = '') -> FormselectComponent:\n    \"\"\"Renders a form select\n\n    Args:\n        label (str): Label for the form select\n        name (str): Name for the form select\n        options: Options for the form select\n        value (str): Optional. Selected value\n    \n    Returns:\n        FormselectComponent: The new component\n    \"\"\"\n    new_component = FormselectComponent(label, name, options, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtextarea(self, label: str = 'Your Message', name: str = 'message', placeholder: str = 'Leave a comment...', value: str = '') -> FormtextareaComponent:\n    \"\"\"Renders a text area\n\n    Args:\n        label (str): Optional. Label for the text area\n        name (str): Optional. Name for the text area\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextareaComponent: The new component\n    \"\"\"\n    new_component = FormtextareaComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formsubmit(self, label: str = 'Submit') -> FormsubmitComponent:\n    \"\"\"Renders a form submit button\n\n    Args:\n        label (str): Optional. Label for the form submit button\n    \n    Returns:\n        FormsubmitComponent: The new component\n    \"\"\"\n    new_component = FormsubmitComponent(label)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_pandastable(self, dataframe, hide_fields: list = [], action_buttons: list = None):\n    \"\"\"Renders a pandas table\n\n    Args:\n        dataframe: Dataframe to render\n        hide_fields (list): List of fields to hide\n        action_buttons (list): Row actions to render\n    \n    Returns:\n        PandastableComponent: The new component\n    \"\"\"\n    advanced_add_pandastable(self, dataframe, hide_fields, action_buttons)\n    return self\n    \n\n  def add_plotlyfigure(self, fig, id: str = '') -> PlotlyfigureComponent:\n    \"\"\"Renders a plotly figure\n\n    Args:\n        fig: Figure to render\n        id (str): Optional. Unique ID for this element. Will default to a UUID.\n    \n    Returns:\n        PlotlyfigureComponent: The new component\n    \"\"\"\n    new_component = PlotlyfigureComponent(fig, id)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_scriptstatus(self, job_id: str, redirect_url: str) -> ScriptstatusComponent:\n    \"\"\"Shows the status of a script execution and redirects to a new page when complete\n\n    Args:\n        job_id (str): Job id to check the status of\n        redirect_url (str): URL to redirect to when the script is complete\n    \n    Returns:\n        ScriptstatusComponent: The new component\n    \"\"\"\n    new_component = ScriptstatusComponent(job_id, redirect_url)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass DividerComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_divider` method of the parent component.\n  \"\"\"\n  def __init__(self):    \n    pass\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<hr class=\"my-5 border-gray-300 w-full\">'''", "\nclass Footer(Component):\n  \"\"\"Renders a footer\n  \"\"\"\n  def __init__(self, title: str = '', subtitle: str = '', logo: str = '', link: str = '', components: list = None):    \n    self.title = title\n    self.subtitle = subtitle\n    self.logo = logo\n    self.link = link\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<footer class=\"text-gray-600 body-font\">\n    <div class=\"container px-5 mx-auto flex md:items-center lg:items-start md:flex-row md:flex-nowrap flex-wrap flex-col\">\n        <a href=\"''' + self.link + '''\" class=\"w-64 flex-shrink-0 md:mx-0 mx-auto text-center md:text-left\">\n            <span class=\"flex title-font font-medium items-center md:justify-start justify-center text-gray-900 dark:text-white\"><img class=\"object-scale-down h-10\" src=\"''' + self.logo + '''\"><span class=\"ml-3 text-xl\">''' + self.title + '''</span></span>\n            <p class=\"mt-2 text-sm text-gray-500\">''' + self.subtitle + '''</p>\n        </a>\n        <div class=\"flex-grow flex flex-wrap md:pl-20 -mb-10 md:mt-0 mt-10 md:text-left text-center\">\n            ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n        </div>\n    </div>\n</footer>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_footercategory(self, title: str, components: list = None) -> FootercategoryComponent:\n    \"\"\"Renders a category in the footer\n\n    Args:\n        title (str): Title of the category\n        components (list): List of Footer Link in the category\n    \n    Returns:\n        FootercategoryComponent: The new component\n    \"\"\"\n    new_component = FootercategoryComponent(title, components)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass FootercategoryComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_footercategory` method of the parent component.\n  \"\"\"\n  def __init__(self, title: str, components: list = None):    \n    self.title = title\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"lg:w-1/4 md:w-1/2 w-full px-4\">\n    <h2 class=\"title-font font-medium text-gray-900 dark:text-white tracking-widest text-sm mb-3 uppercase\">''' + self.title + '''</h2>\n    <nav class=\"list-none mb-10\">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </nav>\n</div>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_footerlink(self, title: str, url: str) -> FooterlinkComponent:\n    \"\"\"Renders a link in the footer\n\n    Args:\n        title (str): Title of the link\n        url (str): URL of the link\n    \n    Returns:\n        FooterlinkComponent: The new component\n    \"\"\"\n    new_component = FooterlinkComponent(title, url)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass FooterlinkComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_footerlink` method of the parent component.\n  \"\"\"\n  def __init__(self, title: str, url: str):    \n    self.title = title\n    self.url = url\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<li><a href=\"''' + self.url + '''\" class=\"text-gray-600 hover:text-gray-800 dark:hover:text-white\">''' + self.title + '''</a></li>'''", "\nclass FormComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_form` method of the parent component.\n  \"\"\"\n  def __init__(self, action: str = '?', method: str = 'GET', components: list = None):    \n    self.action = action\n    self.method = method\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<form class=\"max-w-full\" style=\"width: 500px\" onsubmit=\"setLoading(this)\" action=\"''' + self.action + '''\" method=\"''' + self.method + '''\">\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</form>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_text(self, value: str) -> TextComponent:\n    \"\"\"Renders a paragraph of text\n\n    Args:\n        value (str): Text to be rendered\n    \n    Returns:\n        TextComponent: The new component\n    \"\"\"\n    new_component = TextComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_link(self, text: str, url: str, classes: str = '') -> LinkComponent:\n    \"\"\"Renders a link\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        LinkComponent: The new component\n    \"\"\"\n    new_component = LinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_list(self, show_dots: bool = True, classes: str = '', components: list = None) -> ListComponent:\n    \"\"\"Renders a list of items\n\n    Args:\n        show_dots (bool): Optional. Whether or not to show dots\n        classes (str): Optional. Classes to be applied to the list\n        components (list): Items to be rendered\n    \n    Returns:\n        ListComponent: The new component\n    \"\"\"\n    new_component = ListComponent(show_dots, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_image(self, url: str, alt: str, classes: str = '') -> ImageComponent:\n    \"\"\"Renders an image\n\n    Args:\n        url (str): URL of the image\n        alt (str): Alt text for the image\n        classes (str): Optional. Classes to be applied to the image\n    \n    Returns:\n        ImageComponent: The new component\n    \"\"\"\n    new_component = ImageComponent(url, alt, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_container(self, grid_columns: int = None, classes: str = '', components: list = None) -> ContainerComponent:\n    \"\"\"Renders a container to help with layout\n\n    Args:\n        grid_columns (int): Optional. Number of columns (if any) to use. 1-12\n        classes (str): Optional. Classes to be applied to the container\n        components (list): Components to be rendered inside the container\n    \n    Returns:\n        ContainerComponent: The new component\n    \"\"\"\n    new_component = ContainerComponent(grid_columns, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_code(self, value: str, header: str = '', prefix: str = '>>>') -> CodeComponent:\n    \"\"\"Renders a block of code\n\n    Args:\n        value (str): Code to be rendered\n        header (str): Optional. Header to be rendered above the code block\n        prefix (str): Optional. Prefix to be rendered before the code block\n    \n    Returns:\n        CodeComponent: The new component\n    \"\"\"\n    new_component = CodeComponent(value, header, prefix)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtext(self, label: str, name: str, placeholder: str = '', value: str = '') -> FormtextComponent:\n    \"\"\"Renders a form\n\n    Args:\n        label (str): Label for the form text\n        name (str): Name for the form text\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextComponent: The new component\n    \"\"\"\n    new_component = FormtextComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formemail(self, label: str = 'Your E-mail', name: str = 'email', placeholder: str = 'user@example.com') -> FormemailComponent:\n    \"\"\"Renders a form email\n\n    Args:\n        label (str): Optional. Label for the form email\n        name (str): Optional. Name for the form email\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormemailComponent: The new component\n    \"\"\"\n    new_component = FormemailComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formpassword(self, label: str = 'Password', name: str = 'password', placeholder: str = 'password') -> FormpasswordComponent:\n    \"\"\"Renders a form password\n\n    Args:\n        label (str): Optional. Label for the form password\n        name (str): Optional. Name for the form password\n        placeholder (str): Optional. Placeholder\n    \n    Returns:\n        FormpasswordComponent: The new component\n    \"\"\"\n    new_component = FormpasswordComponent(label, name, placeholder)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formselect(self, label: str, name: str, options, value: str = '') -> FormselectComponent:\n    \"\"\"Renders a form select\n\n    Args:\n        label (str): Label for the form select\n        name (str): Name for the form select\n        options: Options for the form select\n        value (str): Optional. Selected value\n    \n    Returns:\n        FormselectComponent: The new component\n    \"\"\"\n    new_component = FormselectComponent(label, name, options, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formhidden(self, name: str, value: str) -> FormhiddenComponent:\n    \"\"\"Renders a hidden field on a form. This is useful for carrying state between pages without having to store data in the database.\n\n    Args:\n        name (str): Name for the form hidden\n        value (str): Value for the form hidden\n    \n    Returns:\n        FormhiddenComponent: The new component\n    \"\"\"\n    new_component = FormhiddenComponent(name, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formtextarea(self, label: str = 'Your Message', name: str = 'message', placeholder: str = 'Leave a comment...', value: str = '') -> FormtextareaComponent:\n    \"\"\"Renders a text area\n\n    Args:\n        label (str): Optional. Label for the text area\n        name (str): Optional. Name for the text area\n        placeholder (str): Optional. Placeholder\n        value (str): Optional. Value if you want to pre-populate\n    \n    Returns:\n        FormtextareaComponent: The new component\n    \"\"\"\n    new_component = FormtextareaComponent(label, name, placeholder, value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_formsubmit(self, label: str = 'Submit') -> FormsubmitComponent:\n    \"\"\"Renders a form submit button\n\n    Args:\n        label (str): Optional. Label for the form submit button\n    \n    Returns:\n        FormsubmitComponent: The new component\n    \"\"\"\n    new_component = FormsubmitComponent(label)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_rawtable(self, components: list = None) -> RawtableComponent:\n    \"\"\"Renders a table manually by constructing the table header, body, content, etc.. This is useful if you want to customize the table more than what the other table functions allow. Most of the time you'll use the other table functions instead of this one.\n\n    Args:\n        components (list): Components to render in the table\n    \n    Returns:\n        RawtableComponent: The new component\n    \"\"\"\n    new_component = RawtableComponent(components)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass FormemailComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formemail` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str = 'Your E-mail', name: str = 'email', placeholder: str = 'user@example.com'):    \n    self.label = label\n    self.name = name\n    self.placeholder = placeholder\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-6\">\n    <label for=\"''' + self.name + '''\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">''' + self.label + '''</label>\n    <input type=\"email\" name=\"''' + self.name + '''\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"''' + self.placeholder + '''\" required>\n</div>'''", "\nclass FormhiddenComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formhidden` method of the parent component.\n  \"\"\"\n  def __init__(self, name: str, value: str):    \n    self.name = name\n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<input type=\"hidden\" name=\"''' + self.name + '''\" value=\"''' + self.value + '''\">'''", "\nclass FormpasswordComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formpassword` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str = 'Password', name: str = 'password', placeholder: str = 'password'):    \n    self.label = label\n    self.name = name\n    self.placeholder = placeholder\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-6\">\n    <label for=\"''' + self.name + '''\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">''' + self.label + '''</label>\n    <input type=\"password\" name=\"''' + self.name + '''\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"''' + self.placeholder + '''\" required>\n</div>'''", "\nclass FormselectComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formselect` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str, name: str, options, value: str = ''):    \n    self.label = label\n    self.name = name\n    self.options = options\n    self.value = value\n    self.components = []\n    \n    if value == \"\":\n        self.components.append(HtmlComponent('<option value=\"\" selected disabled hidden>Select an option</option>'))\n    \n    for option in self.options:\n        if isinstance(option, str):\n            if option == value:\n                self.components.append(SelectoptionComponent(label=option, value=option, selected='selected'))\n            else:\n                self.components.append(SelectoptionComponent(label=option, value=option))\n        else:\n            if option['value'] == value:\n                self.components.append(SelectoptionComponent(label=option['label'], value=option['value'], selected='selected'))\n            else:\n                self.components.append(SelectoptionComponent(label=option['label'], value=option['value']))\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-6\">\n    <label for=\"''' + self.name + '''\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">''' + self.label + '''</label>\n    <select id=\"''' + self.name + '''\" name=\"''' + self.name + '''\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </select>\n</div>'''\n\n  def add_selectoption(self, label: str, value: str, selected: str = '') -> SelectoptionComponent:\n    \"\"\"Renders a select option\n\n    Args:\n        label (str): Label for the select option\n        value (str): Value for the select option\n        selected (str): Optional. Use 'selected' if this is selected\n    \n    Returns:\n        SelectoptionComponent: The new component\n    \"\"\"\n    new_component = SelectoptionComponent(label, value, selected)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass FormsubmitComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formsubmit` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str = 'Submit'):    \n    self.label = label\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<button type=\"submit\" class=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">''' + self.label + '''</button>'''", "\nclass FormtextComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formtext` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str, name: str, placeholder: str = '', value: str = ''):    \n    self.label = label\n    self.name = name\n    self.placeholder = placeholder\n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-6\">\n    <label for=\"''' + self.name + '''\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">''' + self.label + '''</label>\n    <input type=\"text\" name=\"''' + self.name + '''\" value=\"''' + self.value + '''\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"''' + self.placeholder + '''\" required>\n</div>'''", "\nclass FormtextareaComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_formtextarea` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str = 'Your Message', name: str = 'message', placeholder: str = 'Leave a comment...', value: str = ''):    \n    self.label = label\n    self.name = name\n    self.placeholder = placeholder\n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-6\">\n    <label for=\"''' + self.name + '''\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">''' + self.label + '''</label>\n    <textarea name=\"''' + self.name + '''\" rows=\"4\" class=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"''' + self.placeholder + '''\">''' + self.value + '''</textarea>\n</div>'''", "\nclass HeaderComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_header` method of the parent component.\n  \"\"\"\n  def __init__(self, text: str, size: int = 5, classes: str = ''):    \n    self.text = text\n    self.size = size\n    self.classes = classes\n    if size == 1:\n        self.classes += \" text-lg sm:text-xl\"\n    elif size == 2:\n        self.classes += \" text-lg sm:text-2xl\"\n    elif size == 3:\n        self.classes += \" text-lg sm:text-3xl\"\n    elif size == 4:\n        self.classes += \" text-lg sm:text-4xl\"\n    elif size == 5:\n        self.classes += \" text-xl sm:text-5xl\"\n    elif size == 6:\n        self.classes += \" text-2xl sm:text-6xl\"\n    elif size == 7:\n        self.classes += \" text-3xl sm:text-7xl\"\n    elif size == 8:\n        self.classes += \" text-4xl sm:text-8xl\"\n    elif size == 9:\n        self.classes += \" text-5xl sm:text-9xl\"\n    else:\n        raise ValueError(\"Header size must be between 1 and 9\")\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<p class=\"mb-4 font-extrabold leading-none tracking-tight text-gray-900 dark:text-white ''' + self.classes + ''' \">''' + self.text + '''</p>'''", "\nclass HtmlComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_html` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str):    \n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''''' + self.value + ''''''", "\nclass ImageComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_image` method of the parent component.\n  \"\"\"\n  def __init__(self, url: str, alt: str, classes: str = ''):    \n    self.url = url\n    self.alt = alt\n    self.classes = classes\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<img class=\"max-w-fit h-auto rounded-lg ''' + self.classes + ''' \" src=\"''' + self.url + '''\" alt=\"''' + self.alt + '''\">'''", "\nclass LinkComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_link` method of the parent component.\n  \"\"\"\n  def __init__(self, text: str, url: str, classes: str = ''):    \n    self.text = text\n    self.url = url\n    self.classes = classes\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<p class=\"text-gray-500 dark:text-gray-400 ''' + self.classes + '''\">\n    <a href=\"''' + self.url + '''\" class=\"inline-flex items-center font-medium text-blue-600 dark:text-blue-500 hover:underline\">\n    ''' + self.text + '''\n    <svg aria-hidden=\"true\" class=\"w-5 h-5 ml-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n    </a>\n</p>'''", "\nclass ListComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_list` method of the parent component.\n  \"\"\"\n  def __init__(self, show_dots: bool = True, classes: str = '', components: list = None):    \n    self.show_dots = show_dots\n    self.classes = classes\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    if self.show_dots:\n        self.classes += \"list-disc\"\n    else:\n        self.classes += \"list-none\"\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<ul class=\"max-w-md space-y-1 text-gray-500 list-inside dark:text-gray-400 ''' + self.classes + '''\">\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</ul>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_listitem(self, value: str, classes: str = '', svg: str = '', is_checked: bool = None) -> ListitemComponent:\n    \"\"\"Renders an item in a list\n\n    Args:\n        value (str): Text to be rendered\n        classes (str): Optional. Classes to be applied to the list item\n        svg (str): Optional. SVG to render inside the list\n        is_checked (bool): Optional. Whether or not the item is checked\n    \n    Returns:\n        ListitemComponent: The new component\n    \"\"\"\n    new_component = ListitemComponent(value, classes, svg, is_checked)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass ListitemComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_listitem` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str, classes: str = '', svg: str = '', is_checked: bool = None):    \n    self.value = value\n    self.classes = classes\n    self.svg = svg\n    self.is_checked = is_checked\n    if self.is_checked is not None:\n        if self.is_checked:\n            self.svg = '''<svg class=\"w-4 h-4 mr-1.5 text-green-500 dark:text-green-400 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path></svg>'''\n        else:\n            self.svg = '''<svg class=\"w-4 h-4 mr-1.5 text-gray-400 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\"></path></svg>'''\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<li class=\"flex items-center ''' + self.classes + '''\">\n    ''' + self.svg + '''\n    ''' + self.value + '''\n</li>'''", "\nclass Navbar(Component):\n  \"\"\"Renders a navbar\n  \"\"\"\n  def __init__(self, title: str, logo: str = 'https://cdn.pycob.com/pyvibe.png', components: list = None):    \n    self.title = title\n    self.logo = logo\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<script>\n    function toggleNav() {\n        var nav = document.getElementById(\"navbar-sticky\");\n        if (nav.classList.contains(\"hidden\")) {\n            nav.classList.remove(\"hidden\");\n        } else {\n            nav.classList.add(\"hidden\");\n        }\n    }\n</script>\n<nav class=\"gradient-background top-0 left-0 z-20 w-full bg-white px-2 py-2.5 dark:border-gray-600 sm:px-4\">\n    <div class=\"container mx-auto flex flex-wrap items-center justify-between\">\n      <a href=\"/\" class=\"flex items-center\">\n        <img src=\"''' + self.logo + '''\" class=\"mr-3 h-6 sm:h-9\" alt=\"Logo\" />\n        <span class=\"self-center whitespace-nowrap md:text-4xl font-semibold text-white\">''' + self.title + '''</span>\n      </a>\n      <div class=\"flex md:order-2\">\n        <button onclick=\"toggleDarkMode()\" type=\"button\" class=\"mx-3 px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 bg-gradient-to-br from-purple-600 to-blue-500 group-hover:from-purple-600 group-hover:to-blue-500\">\n            <svg id=\"sun\" data-toggle-icon=\"sun\" class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"></path></svg>\n            <svg id=\"moon\" data-toggle-icon=\"moon\" class=\"w-4 h-4 hidden\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\"></path></svg>        </button>\n\n        <button onclick=\"toggleNav()\" data-collapse-toggle=\"navbar-sticky\" type=\"button\" class=\"inline-flex items-center rounded-lg p-2 text-sm text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-600 md:hidden\" aria-controls=\"navbar-sticky\" aria-expanded=\"true\">\n          <span class=\"sr-only\">Open main menu</span>\n          <svg class=\"h-6 w-6\" aria-hidden=\"true\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path></svg>\n        </button>\n      </div>\n      <div class=\"w-full items-center justify-between md:order-1 md:flex md:w-auto hidden\" id=\"navbar-sticky\">\n        <ul class=\"mt-4 flex flex-col rounded-lg md:mt-0 md:flex-row md:space-x-8 md:border-0 md:text-sm md:font-medium\">\n          ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n        </ul>\n      </div>\n    </div>\n  </nav>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_link(self, text: str, url: str, classes: str = '') -> LinkComponent:\n    \"\"\"Renders a link\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        LinkComponent: The new component\n    \"\"\"\n    new_component = LinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_plainlink(self, text: str, url: str, classes: str = '') -> PlainlinkComponent:\n    \"\"\"Renders a link without any styling\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        PlainlinkComponent: The new component\n    \"\"\"\n    new_component = PlainlinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_navbarlink(self, text: str, url: str, classes: str = '') -> NavbarlinkComponent:\n    \"\"\"Renders a link in the navbar\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        NavbarlinkComponent: The new component\n    \"\"\"\n    new_component = NavbarlinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass NavbarlinkComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_navbarlink` method of the parent component.\n  \"\"\"\n  def __init__(self, text: str, url: str, classes: str = ''):    \n    self.text = text\n    self.url = url\n    self.classes = classes\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<a class=\"block rounded-lg py-2 pl-3 pr-4 text-white hover:bg-blue-800 md:p-2 ''' + self.classes + '''\" href=\"''' + self.url + '''\">''' + self.text + '''</a>'''", "\nclass Page(Component):\n  \"\"\"A page is the top level component of a website. It contains the navbar, the main content, and the footer.\n  \"\"\"\n  def __init__(self, title: str = '', description: str = '', image: str = '', additional_head: str = '', navbar: Navbar = Navbar(title='PyVibe App'), footer: Footer = Footer(title='Made with PyVibe', logo='https://cdn.pycob.com/pyvibe.png', link='https://www.pyvibe.com'), sidebar: Sidebar = None, components: list = None):    \n    self.title = title\n    self.description = description\n    self.image = image\n    self.additional_head = additional_head\n    self.navbar = navbar\n    self.footer = footer\n    self.sidebar = sidebar\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    if self.sidebar is None:\n        self.sidebar = HtmlComponent('')\n    if self.navbar is None:\n        self.navbar = HtmlComponent('')\n    if self.footer is None:\n        self.footer = HtmlComponent('')\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<!doctype html>\n    <html>\n    <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"https://cdn.pycob.com/pyvibe/apple-touch-icon.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"https://cdn.pycob.com/pyvibe/favicon-32x32.png\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"https://cdn.pycob.com/pyvibe/favicon-16x16.png\">\n    <link rel=\"mask-icon\" href=\"https://cdn.pycob.com/pyvibe/safari-pinned-tab.svg\" color=\"#5bbad5\">\n    <link rel=\"shortcut icon\" href=\"https://cdn.pycob.com/pyvibe/favicon.ico\">\n    <meta name=\"msapplication-TileColor\" content=\"#da532c\">\n    <meta name=\"msapplication-config\" content=\"https://cdn.pycob.com/pyvibe/browserconfig.xml\">\n    <meta name=\"theme-color\" content=\"#ffffff\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>''' + self.title + '''</title>\n    <meta property=\"og:title\" content=\"''' + self.title + '''\">\n    <meta property=\"og:description\" content=\"''' + self.description + '''\">\n    <meta property=\"og:image\" content=\"''' + self.image + '''\">\n    ''' + self.additional_head + '''\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.js\"></script>\n    <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>\n    <script>\n        tailwind.config = {\n            theme: {\n                extend: {\n                    colors: {\n                        clifford: '#da373d',\n                    }\n                }\n            },\n            darkMode: 'class'\n        }\n    </script>\n    <script>\n    function toggleDarkMode() {\n        if (document.documentElement.classList.contains('dark')) {\n            document.documentElement.classList.remove('dark')\n            document.getElementById(\"moon\").classList.add(\"hidden\")\n            document.getElementById(\"sun\").classList.remove(\"hidden\")\n        } else {\n            document.documentElement.classList.add('dark')\n            document.getElementById(\"sun\").classList.add(\"hidden\")\n            document.getElementById(\"moon\").classList.remove(\"hidden\")\n        }\n    }\n\n    function setLoading(el) {\n        el.querySelectorAll(\"button[type=submit]\").forEach((button) => {\n            button.innerHTML = '<svg aria-hidden=\"true\" role=\"status\" class=\"inline w-4 h-4 mr-3 text-white animate-spin\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"#E5E7EB\"/><path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentColor\"/></svg>Loading...';\n            button.disabled = true;\n        });\n    }\n\n    function toggleMore(button) {\n        x = button\n\n        if (x.innerHTML === \"more\") {\n            x.innerHTML = \"less\";\n            text_full = x.getAttribute(\"data-text-full\")\n            text_truncated = x.getAttribute(\"data-text-truncated\")\n\n            x.parentElement.innerHTML = text_full + ' <button data-text-full=\"' + text_full + '\" data-text-truncated=\"' + text_truncated + '\" onclick=\"toggleMore(this)\" class=\"text-blue-500\">less</button>'\n        } else {\n            x.innerHTML = \"more\";\n            text_full = x.getAttribute(\"data-text-full\")\n            text_truncated = x.getAttribute(\"data-text-truncated\")\n\n            x.parentElement.innerHTML = text_truncated + ' <button data-text-full=\"' + text_full + '\" data-text-truncated=\"' + text_truncated + '\" onclick=\"toggleMore(this)\" class=\"text-blue-500\">more</button>'\n        }\n    }\n    </script>\n    <style>\n    .gradient-background {\n        background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n        background-size: 400% 400%;\n        animation: gradient 180s ease infinite;\n    }\n\n    .gradient-text {\n        color: transparent;\n        background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n        background-clip: text;\n        -webkit-background-clip: text;\n        animation: gradient 2s ease infinite;\n    }\n\n    @keyframes gradient {\n        0% {\n            background-position: 0% 50%;\n        }\n        50% {\n            background-position: 100% 50%;\n        }\n        100% {\n            background-position: 0% 50%;\n        }\n    }\n    </style>\n    </head>\n    <body class=\"flex flex-col h-screen dark:bg-gray-900 \">\n        ''' + self.navbar.to_html() + '''\n        <div class=\"flex\">\n            ''' + self.sidebar.to_html() + '''\n            <div id=\"page-container\" class=\"container px-5 my-5 mx-auto\">\n                ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n            </div>\n        </div>\n        ''' + self.footer.to_html() + '''\n    </body>\n</html>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_html(self, value: str) -> HtmlComponent:\n    \"\"\"Renders raw HTML. This is meant to be an escape hatch for when you need to render something that isn't supported by PyVibe.\n\n    Args:\n        value (str): Raw HTML code to be rendered\n    \n    Returns:\n        HtmlComponent: The new component\n    \"\"\"\n    new_component = HtmlComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_text(self, value: str) -> TextComponent:\n    \"\"\"Renders a paragraph of text\n\n    Args:\n        value (str): Text to be rendered\n    \n    Returns:\n        TextComponent: The new component\n    \"\"\"\n    new_component = TextComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_link(self, text: str, url: str, classes: str = '') -> LinkComponent:\n    \"\"\"Renders a link\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        LinkComponent: The new component\n    \"\"\"\n    new_component = LinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_plainlink(self, text: str, url: str, classes: str = '') -> PlainlinkComponent:\n    \"\"\"Renders a link without any styling\n\n    Args:\n        text (str): Text to be rendered\n        url (str): URL to link to\n        classes (str): Optional. Classes to be applied to the link\n    \n    Returns:\n        PlainlinkComponent: The new component\n    \"\"\"\n    new_component = PlainlinkComponent(text, url, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_list(self, show_dots: bool = True, classes: str = '', components: list = None) -> ListComponent:\n    \"\"\"Renders a list of items\n\n    Args:\n        show_dots (bool): Optional. Whether or not to show dots\n        classes (str): Optional. Classes to be applied to the list\n        components (list): Items to be rendered\n    \n    Returns:\n        ListComponent: The new component\n    \"\"\"\n    new_component = ListComponent(show_dots, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_image(self, url: str, alt: str, classes: str = '') -> ImageComponent:\n    \"\"\"Renders an image\n\n    Args:\n        url (str): URL of the image\n        alt (str): Alt text for the image\n        classes (str): Optional. Classes to be applied to the image\n    \n    Returns:\n        ImageComponent: The new component\n    \"\"\"\n    new_component = ImageComponent(url, alt, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_header(self, text: str, size: int = 5, classes: str = '') -> HeaderComponent:\n    \"\"\"Renders a header\n\n    Args:\n        text (str): Text to be rendered\n        size (int): Optional. Size of the header. Choose 1-9\n        classes (str): Optional. Classes to be applied to the header\n    \n    Returns:\n        HeaderComponent: The new component\n    \"\"\"\n    new_component = HeaderComponent(text, size, classes)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_card(self, center_content: bool = False, classes: str = '', components: list = None) -> CardComponent:\n    \"\"\"Renders a card\n\n    Args:\n        center_content (bool): Optional. Whether the card contents should be centered\n        classes (str): Optional. Classes to be applied to the card\n        components (list): Components to be rendered inside the card\n    \n    Returns:\n        CardComponent: The new component\n    \"\"\"\n    new_component = CardComponent(center_content, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_container(self, grid_columns: int = None, classes: str = '', components: list = None) -> ContainerComponent:\n    \"\"\"Renders a container to help with layout\n\n    Args:\n        grid_columns (int): Optional. Number of columns (if any) to use. 1-12\n        classes (str): Optional. Classes to be applied to the container\n        components (list): Components to be rendered inside the container\n    \n    Returns:\n        ContainerComponent: The new component\n    \"\"\"\n    new_component = ContainerComponent(grid_columns, classes, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_alert(self, text: str, badge: str = '', color: str = 'indigo') -> AlertComponent:\n    \"\"\"Renders an alert\n\n    Args:\n        text (str): Text to be rendered\n        badge (str): Optional. Text to be rendered inside the badge\n        color (str): Optional. Color of the. Choose 'indigo', 'orange', or 'red'\n    \n    Returns:\n        AlertComponent: The new component\n    \"\"\"\n    new_component = AlertComponent(text, badge, color)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_code(self, value: str, header: str = '', prefix: str = '>>>') -> CodeComponent:\n    \"\"\"Renders a block of code\n\n    Args:\n        value (str): Code to be rendered\n        header (str): Optional. Header to be rendered above the code block\n        prefix (str): Optional. Prefix to be rendered before the code block\n    \n    Returns:\n        CodeComponent: The new component\n    \"\"\"\n    new_component = CodeComponent(value, header, prefix)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_divider(self) -> DividerComponent:\n    \"\"\"Renders a divider\n\n    \n    \n    Returns:\n        DividerComponent: The new component\n    \"\"\"\n    new_component = DividerComponent()    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_section(self, id: str, name: str, level: int = 1) -> SectionComponent:\n    \"\"\"Creates an invisible element that can be used to link to in the sidebar\n\n    Args:\n        id (str): ID for the section. This is what will appear in the link as /page#id\n        name (str): Name of the section. This is what will appear in the navigation bar\n        level (int): Optional. Level of the section. This is the indentation that will appear in the navigation bar\n    \n    Returns:\n        SectionComponent: The new component\n    \"\"\"\n    new_component = SectionComponent(id, name, level)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_form(self, action: str = '?', method: str = 'GET', components: list = None) -> FormComponent:\n    \"\"\"Renders a form\n\n    Args:\n        action (str): Optional. Action for the form. This is the page that the form will submit to. Defaults to the current page\n        method (str): Optional. Method for the form (i.e. GET, POST)\n        components (list): List of Component of the form\n    \n    Returns:\n        FormComponent: The new component\n    \"\"\"\n    new_component = FormComponent(action, method, components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_rawtable(self, components: list = None) -> RawtableComponent:\n    \"\"\"Renders a table manually by constructing the table header, body, content, etc.. This is useful if you want to customize the table more than what the other table functions allow. Most of the time you'll use the other table functions instead of this one.\n\n    Args:\n        components (list): Components to render in the table\n    \n    Returns:\n        RawtableComponent: The new component\n    \"\"\"\n    new_component = RawtableComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_pandastable(self, dataframe, hide_fields: list = [], action_buttons: list = None):\n    \"\"\"Renders a pandas table\n\n    Args:\n        dataframe: Dataframe to render\n        hide_fields (list): List of fields to hide\n        action_buttons (list): Row actions to render\n    \n    Returns:\n        PandastableComponent: The new component\n    \"\"\"\n    advanced_add_pandastable(self, dataframe, hide_fields, action_buttons)\n    return self\n    \n\n  def add_plotlyfigure(self, fig, id: str = '') -> PlotlyfigureComponent:\n    \"\"\"Renders a plotly figure\n\n    Args:\n        fig: Figure to render\n        id (str): Optional. Unique ID for this element. Will default to a UUID.\n    \n    Returns:\n        PlotlyfigureComponent: The new component\n    \"\"\"\n    new_component = PlotlyfigureComponent(fig, id)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_datagrid(self, dataframe, action_buttons: list = None):\n    \"\"\"Renders a data grid\n\n    Args:\n        dataframe: Dataframe to render\n        action_buttons (list): Row actions to render\n    \n    Returns:\n        DatagridComponent: The new component\n    \"\"\"\n    advanced_add_datagrid(self, dataframe, action_buttons)\n    return self\n    \n\n  def add_codeeditor(self, value: str, language: str = 'python') -> CodeeditorComponent:\n    \"\"\"Renders a code editor\n\n    Args:\n        value (str): Code to be rendered\n        language (str): Optional. Language mode for syntax highlighting\n    \n    Returns:\n        CodeeditorComponent: The new component\n    \"\"\"\n    new_component = CodeeditorComponent(value, language)    \n    self.components.append(new_component)\n    return new_component\n    \n\n\n  def add_emgithub(self, url: str):\n    \"\"\"Renders a block of code from a github URL\n\n    Args:\n        url (str): URL of the GitHub file to be rendered\n    \n    Returns:\n        EmgithubComponent: The new component\n    \"\"\"\n    advanced_add_emgithub(self, url)\n    return self\n    \n\n  def add_scriptstatus(self, job_id: str, redirect_url: str) -> ScriptstatusComponent:\n    \"\"\"Shows the status of a script execution and redirects to a new page when complete\n\n    Args:\n        job_id (str): Job id to check the status of\n        redirect_url (str): URL to redirect to when the script is complete\n    \n    Returns:\n        ScriptstatusComponent: The new component\n    \"\"\"\n    new_component = ScriptstatusComponent(job_id, redirect_url)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass PlainlinkComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_plainlink` method of the parent component.\n  \"\"\"\n  def __init__(self, text: str, url: str, classes: str = ''):    \n    self.text = text\n    self.url = url\n    self.classes = classes\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<a class=\"''' + self.classes + '''\" href=\"''' + self.url + '''\">''' + self.text + '''</a>'''", "\nclass PlotlyfigureComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_plotlyfigure` method of the parent component.\n  \"\"\"\n  def __init__(self, fig, id: str = ''):    \n    self.fig = fig\n    self.id = id\n    if id == \"\":\n        self.id = str(uuid.uuid4())\n    self.fig = fig.to_json()\n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div id=\"''' + self.id + '''\"></div>\n<script>\n    config = ''' + self.fig + '''\n    Plotly.newPlot( document.getElementById(\"''' + self.id + '''\"), config, {responsive: true} );\n</script>'''", "\nclass RawtableComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_rawtable` method of the parent component.\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"relative overflow-x-auto shadow-md mb-5 sm:rounded-lg\">\n    <table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </table>\n</div>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_tablehead(self, components: list = None) -> TableheadComponent:\n    \"\"\"Renders a table head\n\n    Args:\n        components (list): Components to render in the table head\n    \n    Returns:\n        TableheadComponent: The new component\n    \"\"\"\n    new_component = TableheadComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablerow(self, components: list = None) -> TablerowComponent:\n    \"\"\"Renders a table row\n\n    Args:\n        components (list): Components to render in the table row\n    \n    Returns:\n        TablerowComponent: The new component\n    \"\"\"\n    new_component = TablerowComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablebody(self, components: list = None) -> TablebodyComponent:\n    \"\"\"Renders a table body\n\n    Args:\n        components (list): Components to render in the table body\n    \n    Returns:\n        TablebodyComponent: The new component\n    \"\"\"\n    new_component = TablebodyComponent(components)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass Rowaction(Component):\n  \"\"\"Renders a row action\n  \"\"\"\n  def __init__(self, label: str, url: str, classes: str = '', open_in_new_window: bool = True):    \n    self.label = label\n    self.url = url\n    self.classes = classes\n    self.open_in_new_window = open_in_new_window\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''TODO: Internal Component'''", "\nclass ScriptstatusComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_scriptstatus` method of the parent component.\n  \"\"\"\n  def __init__(self, job_id: str, redirect_url: str):    \n    self.job_id = job_id\n    self.redirect_url = redirect_url\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<script type=\"module\">\n    import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.17.1/firebase-app.js'\n        \n    import { getFirestore, doc, onSnapshot } from 'https://www.gstatic.com/firebasejs/9.17.1/firebase-firestore.js'\n\n    // TODO: Replace the following with your app's Firebase project configuration\n    const firebaseConfig = {\n        projectId: \"pycob-prod\"\n    };\n\n    // Initialize Firebase\n    const app = initializeApp(firebaseConfig);\n\n    let db = getFirestore();\n\n    const unsub = onSnapshot(doc(db, \"users\", \"test\", \"_jobs\", \"''' + self.job_id + '''\"), (doc) => {\n        console.log(\"Current data: \", doc.data());\n        document.getElementById(\"''' + self.job_id + '''\").innerHTML = doc.data().status;\n\n        if (doc.data().status == \"complete\") {\n            unsub();\n            window.location.href = \"''' + self.redirect_url + '''\";\n        }\n    });\n</script>\n<div class=\"flex items-center justify-center p-5 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700\">\n    <svg aria-hidden=\"true\" class=\"w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/><path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentFill\"/></svg>\n    <div id=\"''' + self.job_id + '''\" class=\"px-3 py-1 text-xs font-medium leading-none text-center text-blue-800 bg-blue-200 rounded-full animate-pulse dark:bg-blue-900 dark:text-blue-200\">waiting...</div>\n</div>'''", "\nclass SectionComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_section` method of the parent component.\n  \"\"\"\n  def __init__(self, id: str, name: str, level: int = 1):    \n    self.id = id\n    self.name = name\n    self.level = level\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<span id=''' + self.id + '''></span>'''", "\nclass SelectoptionComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_selectoption` method of the parent component.\n  \"\"\"\n  def __init__(self, label: str, value: str, selected: str = ''):    \n    self.label = label\n    self.value = value\n    self.selected = selected\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<option value=\"''' + self.value + '''\" ''' + self.selected + '''>''' + self.label + '''</option>'''", "\nclass Sidebar(Component):\n  \"\"\"Renders a sidebar\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<style>\n@media (min-width: 1024px) {\n    #page-container {\n        max-width: calc( 100vw - 320px );\n    }\n}\n</style>\n<script>\n    function smoothScrollTo(link) {\n        console.log(link);\n        var hashUrl = link.href;\n        console.log(hashUrl);\n        var hash = hashUrl.substring(hashUrl.indexOf(\"#\") + 1);\n        console.log(hash);\n        var element = document.getElementById(hash);\n        console.log(element);\n        if (element) {\n            element.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"nearest\"})\n        }\n        return true;\n    }\n</script>\n<aside style=\"min-width: 300px\" class=\"hidden lg:block overflow-y-auto flex w-72 flex-col space-y-2 bg-gray-50 dark:bg-gray-800 p-2 h-screen sticky top-0\">\n    <div class=\"sticky top-0\">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </div>\n</aside>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_sidebarcategory(self, title: str, components: list = None) -> SidebarcategoryComponent:\n    \"\"\"Renders a category in the sidebar\n\n    Args:\n        title (str): Title of the category\n        components (list): List of Sidebar Link in the category\n    \n    Returns:\n        SidebarcategoryComponent: The new component\n    \"\"\"\n    new_component = SidebarcategoryComponent(title, components)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass SidebarcategoryComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_sidebarcategory` method of the parent component.\n  \"\"\"\n  def __init__(self, title: str, components: list = None):    \n    self.title = title\n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<div class=\"mb-8\">\n    <h2 class=\"text-lg font-medium text-gray-500 dark:text-gray-400 tracking-wider uppercase mb-3\">''' + self.title + '''</h2>\n    <ul class=\"ml-5 list-none\">\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </ul>\n</div>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_sidebarlink(self, title: str, url: str) -> SidebarlinkComponent:\n    \"\"\"Renders a link in the sidebar\n\n    Args:\n        title (str): Title of the link\n        url (str): URL of the link\n    \n    Returns:\n        SidebarlinkComponent: The new component\n    \"\"\"\n    new_component = SidebarlinkComponent(title, url)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass SidebarlinkComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_sidebarlink` method of the parent component.\n  \"\"\"\n  def __init__(self, title: str, url: str):    \n    self.title = title\n    self.url = url\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<li><a href=\"''' + self.url + '''\" onclick=\"event.preventDefault(); smoothScrollTo(this)\" class=\"text-gray-900 dark:text-white hover:text-gray-800\">''' + self.title + '''</a></li>'''", "\nclass TablebodyComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablebody` method of the parent component.\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<tbody>\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</tbody>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_tablerow(self, components: list = None) -> TablerowComponent:\n    \"\"\"Renders a table row\n\n    Args:\n        components (list): Components to render in the table row\n    \n    Returns:\n        TablerowComponent: The new component\n    \"\"\"\n    new_component = TablerowComponent(components)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass TablecellComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablecell` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str):    \n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<td class=\"px-6 py-4 whitespace-nowrap\">\n    ''' + self.value + '''\n</td>'''", "\nclass TablecellheaderComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablecellheader` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str):    \n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n    ''' + self.value + '''\n</th>'''", "\nclass TablecolComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablecol` method of the parent component.\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<td class=\"px-6 py-4 whitespace-nowrap\">\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</td>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self", "class TableheadComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablehead` method of the parent component.\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<thead class=\"bg-gray-50 dark:bg-gray-800\">\n    <tr>\n        ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n    </tr>\n</thead>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_tablerow(self, components: list = None) -> TablerowComponent:\n    \"\"\"Renders a table row\n\n    Args:\n        components (list): Components to render in the table row\n    \n    Returns:\n        TablerowComponent: The new component\n    \"\"\"\n    new_component = TablerowComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablecol(self, components: list = None) -> TablecolComponent:\n    \"\"\"Renders a table column\n\n    Args:\n        components (list): Components to render in the table column\n    \n    Returns:\n        TablecolComponent: The new component\n    \"\"\"\n    new_component = TablecolComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablecell(self, value: str) -> TablecellComponent:\n    \"\"\"Renders a table cell\n\n    Args:\n        value (str): String to render in the table cell\n    \n    Returns:\n        TablecellComponent: The new component\n    \"\"\"\n    new_component = TablecellComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablecellheader(self, value: str) -> TablecellheaderComponent:\n    \"\"\"Renders a table cell header\n\n    Args:\n        value (str): String to render in the table cell header\n    \n    Returns:\n        TablecellheaderComponent: The new component\n    \"\"\"\n    new_component = TablecellheaderComponent(value)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass TablerowComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_tablerow` method of the parent component.\n  \"\"\"\n  def __init__(self, components: list = None):    \n    # https://stackoverflow.com/questions/4841782/python-constructor-and-default-value\n    self.components = components or []\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<tr class=\"border-t border-gray-200 dark:border-gray-700\">\n    ''' + '\\n'.join(map(lambda x: x.to_html(), self.components)) + ''' \n</tr>'''\n\n  def add(self, component):\n    self.components.append(component)\n    return self\n\n  def add_component(self, component):\n    self.components.append(component)\n    return self\n  def add_tablecol(self, components: list = None) -> TablecolComponent:\n    \"\"\"Renders a table column\n\n    Args:\n        components (list): Components to render in the table column\n    \n    Returns:\n        TablecolComponent: The new component\n    \"\"\"\n    new_component = TablecolComponent(components)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablecell(self, value: str) -> TablecellComponent:\n    \"\"\"Renders a table cell\n\n    Args:\n        value (str): String to render in the table cell\n    \n    Returns:\n        TablecellComponent: The new component\n    \"\"\"\n    new_component = TablecellComponent(value)    \n    self.components.append(new_component)\n    return new_component\n    \n\n  def add_tablecellheader(self, value: str) -> TablecellheaderComponent:\n    \"\"\"Renders a table cell header\n\n    Args:\n        value (str): String to render in the table cell header\n    \n    Returns:\n        TablecellheaderComponent: The new component\n    \"\"\"\n    new_component = TablecellheaderComponent(value)    \n    self.components.append(new_component)\n    return new_component", "    \n\nclass TextComponent(Component):\n  \"\"\"You don't normally need to invoke this constructor directly. Instead, use the `.add_text` method of the parent component.\n  \"\"\"\n  def __init__(self, value: str):    \n    self.value = value\n    \n\n  def __enter__(self):\n    return self\n\n  def __exit__(self, exc_type, exc_value, traceback):\n    pass\n\n  def to_html(self):\n    return '''<p class=\"mb-6 text-lg font-normal text-gray-500 lg:text-xl dark:text-gray-400\">''' + self.value + '''</p>'''", "\n\n#\n#\n# Begin Manual Code\n#\n#\n#\nfrom urllib.parse import quote\nimport re", "from urllib.parse import quote\nimport re\nimport json\n\ndef advanced_add_pandastable(self, df, hide_fields, action_buttons):\n    cols_to_show = []\n    show_actions = False\n\n    if action_buttons is None:\n        action_buttons = []\n\n    if len(__get_action_buttons_to_add(action_buttons)) > 0:\n        show_actions = True\n\n    for col in df.columns:\n        if col not in hide_fields:\n            cols_to_show.append(col)\n\n    # Pandas dataframe to html\n    html = '''<div class=\"p-8\">'''\n\n    html += '''<div class=\"relative overflow-x-auto shadow-md sm:rounded-lg\">'''\n\n    html += '''<table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">'''\n\n    # Pandas DataFrame columns to \n    html += '''<thead class=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">'''\n\n    html += \"<tr>\"\n\n    # Get df index name\n    if df.index.name is not None:\n        html += '''<th scope=\"col\" class=\"px-6 py-3\">''' + df.index.name +  \"</th>\"\n\n    if show_actions:\n        html += '''<th scope=\"col\" class=\"px-6 py-3\">Actions</th>'''\n\n    for column in df.columns:\n        if column in cols_to_show:\n            html += '''<th scope=\"col\" class=\"px-6 py-3\">''' + column + \"</th>\"\n\n    html += \"</tr>\"\n\n    html += \"</thead>\"\n\n    # Pandas DataFrame rows to html\n    html += \"<tbody>\"\n    i = 0\n    for index, row in df.iterrows():\n        record = row.to_dict()\n\n        if i % 2 == 0:\n            html += '''<tr class=\"bg-white border-b dark:bg-gray-900 dark:border-gray-700\">'''\n        else:\n            html += '''<tr class=\"bg-gray-50 border-b dark:bg-gray-800 dark:border-gray-700\">'''\n\n        if show_actions:\n            html += '''<td class=\"px-6 py-4\">'''\n        \n            action_buttons_to_add = __get_action_buttons_to_add(action_buttons)\n            \n            for button_to_add in action_buttons_to_add:\n                hydrated_label = button_to_add.label.format(**record)\n                hydrated_url = button_to_add.url.format(**record)\n\n                if button_to_add.open_in_new_window:\n                    html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n                else:\n                    html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n\n\n            html += '''</td>'''\n\n        for column in df.columns:\n            key = column\n            if column in cols_to_show:\n                action_button = __find_key_in_action_buttons(key, action_buttons)\n\n                value = __format_python_object_for_json(record[key])\n\n                if action_button is not None:\n                    hydrated_label = action_button.label.format(**record)\n                    hydrated_url = action_button.url.format(**record)\n                    if action_button.open_in_new_window:\n                        html += \"\"\"<td class=\"px-6 py-4\"><a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button></td>\"\"\"\n                    else:\n                        html += \"\"\"<td class=\"px-6 py-4\"><a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button></td>\"\"\"\n                else:\n                    html += '''<td class=\"px-6 py-4\">''' + format_input(row[column]) + \"</td>\"\n\n        html += \"</tr>\"\n        i += 1\n\n    html += \"</tbody>\"\n\n    html += \"</table>\"\n\n    html += \"</div>\"\n\n    html += \"</div>\"\n\n    self.components.append(HtmlComponent(html))\n    return self", "\n\n\"\"\"\nA function that formats input into a human-readable string:\nInput: An arbitrary type that could be string, integer, floating point, a numpy object, a pandas datetime, or something else\nOutput: String\n\nDates should be formatted using ISO-8601. Numbers below 10 should include 2 decimal places. Numbers between 10 and 100 should have 1 decimal place. Numbers between 100 and 1000 should have 0 decimal places. Numbers between 1000 and 1000000 should have 0 decimal places and be formatted with a comma for the thousands separator. Numbers between 1000000 and 1000000000 should be formatted as X.Y million. Numbers above 1000000000 should be formatted as X.Y billion\n\"\"\"\n", "\"\"\"\n\n\ndef format_input(input):\n    is_int = \"int\" in type(input).__name__\n    is_float = \"float\" in type(input).__name__\n\n    if is_float or is_int:\n        if input < 10:\n            if is_float:\n                return '{:.2f}'.format(input)\n            else:\n                return string_format_with_more(str(input), 10)\n        elif input < 100:\n            if is_float:\n                return '{:.1f}'.format(input)\n            else:\n                return string_format_with_more(str(input), 10)\n        elif input < 1000:\n            return '{:.0f}'.format(input)\n        elif input < 1000000:\n            return '{:,.0f}'.format(input)\n        elif input < 1000000000:\n            return '{:.1f} million'.format(input / 1000000)\n        # Check if it's nan\n        elif input != input:\n            return \"N/A\"\n        else:\n            return '{:.1f} billion'.format(input / 1000000000)\n    elif callable(getattr(input, \"isoformat\", None)):\n        iso = input.isoformat()\n\n        if \"T00:00:00\" in iso:\n            return iso[0:10]\n\n        return iso\n    else:\n        formatted_string = str(input)\n        return string_format_with_more(formatted_string, 100)", "\ndef string_format_with_more(text: str, max_length: int) -> str:\n    if len(text) > max_length:\n        return text[0:max_length] + f'... <button data-text-full=\"{text}\" data-text-truncated=\"{text[0:max_length]}...\" onclick=\"toggleMore(this)\" class=\"text-blue-500\">more</button>'\n    else:\n        return text\n\ndef __format_python_object_for_json(t):\n    if callable(getattr(t, \"isoformat\", None)):\n        iso = t.isoformat()\n\n        if \"T00:00:00\" in iso:\n            return iso[0:10]\n\n        return iso\n    \n    return t", "\ndef advanced_add_emgithub(self, url):\n    quoted_url = quote(url)\n\n    emgithub = '''\n    <script src=\"https://emgithub.com/embed-v2.js?target=''' + quoted_url +  '''&style=vs2015&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on&fetchFromJsDelivr=on\"></script>\n    '''\n\n    self.components.append(HtmlComponent(emgithub))\n\ndef __format_column_header(x: str) -> str:\n    # Insert undersore between camel case\n    x = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', x)\n\n    # Capitalize the beginning of each word\n    x = x.title()\n\n    # Replace underscores with spaces\n    x = x.replace('_', ' ')\n\n    return x", "\ndef __format_column_header(x: str) -> str:\n    # Insert undersore between camel case\n    x = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', x)\n\n    # Capitalize the beginning of each word\n    x = x.title()\n\n    # Replace underscores with spaces\n    x = x.replace('_', ' ')\n\n    return x", "\ndef __get_action_buttons_to_add(action_buttons):\n    action_buttons_to_add = []\n\n    for action_button in action_buttons:\n        # If the label is not of the form \"{key}\", then add it to the list of action buttons to add\n        if action_button.label[0] != '{' or action_button.label[-1] != '}' and '{' not in action_button.label[1:-1]:        \n            action_buttons_to_add.append(action_button)\n\n    return action_buttons_to_add", "\ndef __find_key_in_action_buttons(key: str, action_buttons):\n    for action_button in action_buttons:\n        if action_button.label == '{' + key + '}' :\n            return action_button\n\n    return None\n\ndef __replace_text_with_button(record: dict, action_buttons) -> dict:\n    new_record = {}\n\n    for key in record.keys():\n        action_button = __find_key_in_action_buttons(key, action_buttons)\n\n        value = __format_python_object_for_json(record[key])\n\n        if action_button is not None:\n            hydrated_label = action_button.label.format(**record)\n            hydrated_url = action_button.url.format(**record)\n            if action_button.open_in_new_window:\n                new_record[key] = \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n            else:\n                new_record[key] = \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n        else:\n            new_record[key] = value\n    \n    action_buttons_html = ''\n\n    action_buttons_to_add = __get_action_buttons_to_add(action_buttons)\n    for button_to_add in action_buttons_to_add:\n        hydrated_label = button_to_add.label.format(**record)\n        hydrated_url = button_to_add.url.format(**record)\n\n        if button_to_add.open_in_new_window:\n            action_buttons_html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n        else:\n            action_buttons_html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n\n    new_record['Actions'] = action_buttons_html\n\n    return new_record", "def __replace_text_with_button(record: dict, action_buttons) -> dict:\n    new_record = {}\n\n    for key in record.keys():\n        action_button = __find_key_in_action_buttons(key, action_buttons)\n\n        value = __format_python_object_for_json(record[key])\n\n        if action_button is not None:\n            hydrated_label = action_button.label.format(**record)\n            hydrated_url = action_button.url.format(**record)\n            if action_button.open_in_new_window:\n                new_record[key] = \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n            else:\n                new_record[key] = \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap mr-1\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n        else:\n            new_record[key] = value\n    \n    action_buttons_html = ''\n\n    action_buttons_to_add = __get_action_buttons_to_add(action_buttons)\n    for button_to_add in action_buttons_to_add:\n        hydrated_label = button_to_add.label.format(**record)\n        hydrated_url = button_to_add.url.format(**record)\n\n        if button_to_add.open_in_new_window:\n            action_buttons_html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' target=\"_blank\" class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n        else:\n            action_buttons_html += \"\"\"<a href='\"\"\" + hydrated_url + \"\"\"' class=\"px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 whitespace-nowrap\">\"\"\" + hydrated_label + \"\"\"</button>\"\"\"\n\n    new_record['Actions'] = action_buttons_html\n\n    return new_record", "\ndef advanced_add_datagrid(page, dataframe, action_buttons):\n    if action_buttons is None:\n        action_buttons = []\n\n    cols = list(map(lambda x: {'headerName': __format_column_header(x), 'field': x} , dataframe.columns.to_list()))\n\n    if len(__get_action_buttons_to_add(action_buttons)) > 0:\n        cols.append({'headerName': 'Actions', 'field': 'Actions'})\n\n    datagridHtml = '''\n        <script>\n        var columnDefsasdf = {columns};\n        '''.format(columns = cols)\n\n    records = list (map(lambda x: __replace_text_with_button(x, action_buttons=action_buttons), dataframe.to_dict(orient='records')))\n\n    datagridHtml += '''\n    columnDefsasdf.forEach( (x) => { x.cellRenderer = function(params) { return params.value ? params.value : '' } } )\n    '''\n\n    datagridHtml += '''\n        var rowDataasdf = {records};\n        '''.format(records = json.dumps( records ) )\n\n    datagridHtml += '''\n        var gridOptionsasdf = {\n            columnDefs: columnDefsasdf,\n            rowData: rowDataasdf,\n            defaultColDef: {\n                sortable: true,\n                filter: true,\n                resizable: true,\n                floatingFilter: true,\n                autoHeight: true,\n                wrapText: true,\n                autoSizePadding: 10,\n                cellStyle: {\n                    'white-space': 'normal'\n                },\n            },\n            pagination: true\n        };\n        document.addEventListener('DOMContentLoaded', function() {\n            var gridDivasdf = document.querySelector('#divid_aggrid_asdf');\n            new agGrid.Grid(gridDivasdf, gridOptionsasdf);\n        });\n\n        function expand(e) {\n            e.parentElement.children[1].style.height = 'calc( 100vh )';\n            e.scrollIntoView();\n        }\n        </script>\n        <div>\n            <button onclick=\"expand(this)\" class=\"mb-4 px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Expand</button>\n            <div id=\"divid_aggrid_asdf\" style=\"height: 500px; max-height: calc( 100vh - 60px ); \" class=\"data-grid ag-theme-alpine-dark \"></div>\n        </div>\n    '''\n\n    page.components.append(HtmlComponent(datagridHtml))", "\n"]}
