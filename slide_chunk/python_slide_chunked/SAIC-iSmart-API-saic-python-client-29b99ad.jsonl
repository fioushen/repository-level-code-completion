{"filename": "tests/test_abrp_api.py", "chunked_list": ["import json\nfrom unittest import TestCase\nfrom unittest.mock import patch, PropertyMock\n\nimport requests\nfrom saic_ismart_client.abrp_api import AbrpApi\nfrom saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsWayPoint, \\\n    RvsWgs84Point, Timestamp4Short, RvsBasicStatus25857\nfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp\n", "from saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp\n\nTLM_URL = 'https://api.iternio.com/1/tlm/send'\nABRP_API_KEY = '8cfc314b-03cd-4efe-ab7d-4431cd8f2e2d'\nABRP_USER_TOKEN = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\n\ndef get_mocked_vehicle_status() -> OtaRvmVehicleStatusResp25857:\n    vehicle_status = OtaRvmVehicleStatusResp25857()\n    vehicle_status.gps_position = RvsPosition()\n    vehicle_status.gps_position.way_point = RvsWayPoint()\n    vehicle_status.gps_position.way_point.position = RvsWgs84Point()\n    vehicle_status.gps_position.way_point.position.latitude = 10000000\n    vehicle_status.gps_position.way_point.position.longitude = 10000000\n    vehicle_status.gps_position.way_point.position.altitude = 100\n    vehicle_status.gps_position.timestamp_4_short = Timestamp4Short()\n    vehicle_status.gps_position.timestamp_4_short.seconds = 1000000000\n    vehicle_status.gps_position.way_point.speed = 100\n    vehicle_status.gps_position.way_point.heading = 90\n    vehicle_status.basic_vehicle_status = RvsBasicStatus25857()\n    # is charging\n    vehicle_status.basic_vehicle_status.extended_data2 = 0\n    # is parked\n    vehicle_status.basic_vehicle_status.engine_status = 0\n    vehicle_status.basic_vehicle_status.hand_brake = False\n    # temperature\n    vehicle_status.basic_vehicle_status.exterior_temperature = 10\n    vehicle_status.basic_vehicle_status.mileage = 1000\n    vehicle_status.basic_vehicle_status.fuel_range_elec = 32000\n    return vehicle_status", "\n\ndef get_mocked_charge_status() -> OtaChrgMangDataResp:\n    charge_status = OtaChrgMangDataResp()\n    charge_status.bmsPackSOCDsp = 841\n    charge_status.bmsPackCrnt = 20000\n    charge_status.bmsPackVol = 1602\n    return charge_status\n\n\ndef mock_post(mocked_post):\n    def res():\n        r = requests.Response()\n        r.status_code = 200\n        return r\n\n    mocked_post.return_value = res()\n    type(mocked_post.return_value).content = PropertyMock(return_value=json.dumps({'status': 'ok'}).encode())", "\n\ndef mock_post(mocked_post):\n    def res():\n        r = requests.Response()\n        r.status_code = 200\n        return r\n\n    mocked_post.return_value = res()\n    type(mocked_post.return_value).content = PropertyMock(return_value=json.dumps({'status': 'ok'}).encode())", "\n\nclass TestAbrpApi(TestCase):\n    def setUp(self) -> None:\n        self.abrp_api = AbrpApi(ABRP_API_KEY, ABRP_USER_TOKEN)\n\n    @patch.object(requests, 'post')\n    def test_update_abrp(self, mocked_post):\n        vehicle_status = get_mocked_vehicle_status()\n        charge_status = get_mocked_charge_status()\n\n        mock_post(mocked_post)\n\n        self.abrp_api.update_abrp(vehicle_status, charge_status)\n        self.assertEqual(TLM_URL, mocked_post.call_args.kwargs['url'])\n        header_dict = mocked_post.call_args.kwargs['headers']\n        self.check_dict_value(header_dict, 'Authorization', f'APIKEY {ABRP_API_KEY}')\n        params_dict = mocked_post.call_args.kwargs['params']\n        self.check_dict_value(params_dict, 'token', ABRP_USER_TOKEN)\n        tlm_value = params_dict['tlm']\n        tlm_json = json.loads(tlm_value)\n        self.check_dict_value(tlm_json, 'utc', 1000000000)\n        self.check_dict_value(tlm_json, 'soc', 84.1)\n        self.check_dict_value(tlm_json, 'power', 0.0)\n        self.check_dict_value(tlm_json, 'speed', 10.0)\n        self.check_dict_value(tlm_json, 'lat', 10.00000000)\n        self.check_dict_value(tlm_json, 'lon', 10.00000000)\n        self.check_dict_value(tlm_json, 'is_charging', 0)\n        self.check_dict_value(tlm_json, 'is_parked', 1)\n        self.check_dict_value(tlm_json, 'heading', 90)\n        self.check_dict_value(tlm_json, 'elevation', 100)\n        self.check_dict_value(tlm_json, 'voltage', 400.5)\n        self.check_dict_value(tlm_json, 'current', 0.0)\n        self.check_dict_value(tlm_json, 'ext_temp', 10)\n        self.check_dict_value(tlm_json, 'odometer', 100.0)\n        self.check_dict_value(tlm_json, 'est_battery_range', 3200.0)\n\n    def check_dict_value(self, data: dict, key: str, expected_value):\n        if key in data:\n            self.assertEqual(expected_value, data[key])\n        else:\n            self.fail(f'{key} missing')", ""]}
{"filename": "tests/test_Message_v1_1.py", "chunked_list": ["import calendar\nimport time\nfrom typing import cast\nfrom unittest import TestCase\n\nfrom saic_ismart_client.common_model import DataEncodingType, MessageCounter, BasicPosition, NetworkInfo, Header\nfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\nfrom saic_ismart_client.ota_v1_1.data_model import MpUserLoggingInReq, MessageBodyV11, MessageV11, MessageListReq,\\\n    StartEndNumber\n", "    StartEndNumber\n\n\nclass TestMessageCoderV11(TestCase):\n    def setUp(self) -> None:\n        self.message_coder = MessageCoderV11()\n\n    def test_encode_login_request(self):\n        expected_hex = '01F5111005600882CB162C58B162C58B162C58B162C58B162C58B162C58B162C58B162C58B162C58'\\\n                       + 'B162C58B162C58B162C58B161AB062C66C8240020200468ACF1343530ECA864468ACF1342468ACF1'\\\n                       + '342000001440100A08952A54A952A54AABAC30B162C586162C58B161858B162C30B162C587562C58'\\\n                       + '60C2C58B162FD8B162C58B0C1858B162C58B162C58BF62C586162C58B162C58B0B6C306161858B16'\\\n                       + '1830B162C30B162C58B162C586162C58B162C58617EFD8B162C586162C58B162C30B162C30B16183'\\\n                       + '0B162C58B162C58B162C58B162C306161858B162C58B162C58B161858B162C58B162C586162C58B0'\\\n                       + '8D1A3CBD796FE1971E1E4'\n        header = Header()\n        header.protocol_version = 17\n        expected_message = MessageV11(header, MessageBodyV11(), MpUserLoggingInReq())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        body = MessageBodyV11()\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 162\n        body.application_data_protocol_version = 513\n        body.application_id = '501'\n        body.event_creation_time = calendar.timegm(time.strptime('2022-09-30 01:06:40', '%Y-%m-%d %H:%M:%S'))\n        body.icc_id = '12345678901234567890'\n        body.message_counter = MessageCounter()\n        body.message_counter.downlink_counter = 0\n        body.message_counter.uplink_counter = 1\n        body.message_id = 1\n        body.sim_info = '1234567890987654321'\n        body.test_flag = 2\n        body.uid = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n\n        user_login_req = MpUserLoggingInReq()\n        user_login_req.device_id = 'X0XXXX0XXXXX0XXXX0XXXX:XXX00XXXX_XXXXXX00XXXXXXXXX_XXX0XXXXXXXX-X00X0XXX00XXX0XX'\\\n                                   + 'XXXXXX0XXXXXXX0__XXXXX0XXXXXX0XXX0XX00XXXXXXXXXXXXXXX00X0XXXXXXXXXXX0XXXXXXXXX0X'\\\n                                   + 'XXX###europecar'\n        user_login_req.password = '********'\n\n        actual_message = MessageV11(header, body, user_login_req)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message_body(cast(MessageBodyV11, expected_message.body),\n                                   cast(MessageBodyV11, actual_message.body))\n        self.assertEqual(expected_hex, actual_hex)\n\n    def test_encode_message_list_request(self):\n        expected_hex = '011B112007900C82C60C183060C183060C183060C183060C183060C183060C183060C183060C183'\\\n                       + '072C183060C183060E5CB972E5CB9B0E5CB973616B96162C2D72E6C395AE5CD872B5CD8B0E6C586'\\\n                       + '161CD87362C587361AB362C6A67E00020200468ACF134468ACF1342468ACF1342468ACF13420000'\\\n                       + '00240100A080000000000080000000000A120CC834A680'\n        header = Header()\n        header.protocol_version = 18\n        expected_message = MessageV11(header, MessageBodyV11(), MessageListReq())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        body = MessageBodyV11()\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 18\n        body.application_data_protocol_version = 513\n        body.application_id = '531'\n        body.event_creation_time = calendar.timegm(time.strptime('2022-10-22 00:53:20', '%Y-%m-%d %H:%M:%S'))\n        body.icc_id = '12345678901234567890'\n        body.message_counter = MessageCounter()\n        body.message_counter.downlink_counter = 0\n        body.message_counter.uplink_counter = 1\n        body.message_id = 1\n        body.sim_info = '1234567891234567890'\n        body.test_flag = 2\n        body.token = '99X9999X-90XX-99X9-99X9-9XX9XX0X9X9XXX9X'\n        body.uid = '00000000000000000000000000000000000090000000099999'\n\n        message_list_req = MessageListReq()\n        message_list_req.message_group = \"ALARM\"\n        message_list_req.start_end_number = StartEndNumber()\n        message_list_req.start_end_number.end_number = 20\n        message_list_req.start_end_number.start_number = 1\n\n        actual_message = MessageV11(header, body, message_list_req)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message_body(cast(MessageBodyV11, expected_message.body),\n                                   cast(MessageBodyV11, actual_message.body))\n        self.assertEqual(expected_hex, actual_hex)\n\n    def validate_message_body(self, expected: MessageBodyV11, actual: MessageBodyV11) -> None:\n        self.assertEqual(expected.message_id, actual.message_id)\n        self.assertEqual(expected.event_creation_time, actual.event_creation_time)\n        self.assertEqual(expected.application_id, actual.application_id)\n        self.assertEqual(expected.application_data_protocol_version, actual.application_data_protocol_version)\n        self.assertEqual(expected.test_flag, actual.test_flag)\n        self.assertEqual(expected.uid, actual.uid)\n        self.assertEqual(expected.token, actual.token)\n        self.assertEqual(expected.event_id, actual.event_id)\n        self.assertEqual(expected.application_data_encoding, actual.application_data_encoding)\n        self.assertEqual(expected.application_data_length, actual.application_data_length)\n        self.assertEqual(expected.vin, actual.vin)\n        self.assertEqual(expected.ack_required, actual.ack_required)\n        self.assertEqual(expected.result, actual.result)\n        self.assertEqual(expected.error_message, actual.error_message)\n        if expected.message_counter is not None:\n            self.validate_message_counter(expected.message_counter, actual.message_counter)\n        else:\n            self.assertIsNone(actual.message_counter)\n        self.assertEqual(expected.icc_id, actual.icc_id)\n        self.assertEqual(expected.sim_info, actual.sim_info)\n        self.assertEqual(expected.stateless_dispatcher_message, actual.stateless_dispatcher_message)\n        self.assertEqual(expected.crqm_request, actual.crqm_request)\n        if expected.basic_position is not None:\n            self.validate_basic_position(expected.basic_position, actual.basic_position)\n        else:\n            self.assertIsNone(actual.basic_position)\n        if expected.network_info is not None:\n            self.validate_network_info(expected.network_info, actual.network_info)\n        else:\n            self.assertIsNone(actual.network_info)\n        self.assertEqual(expected.hmi_language, actual.hmi_language)\n\n    def validate_message_counter(self, expected: MessageCounter, actual: MessageCounter) -> None:\n        self.assertEqual(expected.downlink_counter, actual.downlink_counter)\n        self.assertEqual(expected.uplink_counter, actual.uplink_counter)\n\n    def validate_basic_position(self, expected: BasicPosition, actual: BasicPosition) -> None:\n        self.assertEqual(expected.latitude, actual.latitude)\n        self.assertEqual(expected.longitude, actual.longitude)\n\n    def validate_network_info(self, expected: NetworkInfo, actual: NetworkInfo) -> None:\n        self.assertEqual(expected.mcc_network, actual.mcc_network)\n        self.assertEqual(expected.mnc_network, actual.mnc_network)\n        self.assertEqual(expected.mcc_sim, actual.mcc_sim)\n        self.assertEqual(expected.mnc_sim, actual.mnc_sim)\n        self.assertEqual(expected.signal_strength, actual.signal_strength)", ""]}
{"filename": "tests/test_saic_api.py", "chunked_list": ["from typing import cast\nfrom unittest import TestCase\nfrom unittest.mock import patch, PropertyMock\n\nimport requests\nimport saic_ismart_client.saic_api\n\nfrom saic_ismart_client.common_model import Header, MessageV2, MessageBodyV2\nfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\nfrom saic_ismart_client.ota_v1_1.data_model import MessageV11, MpUserLoggingInRsp, MessageBodyV11, VinInfo, \\", "from saic_ismart_client.ota_v1_1.Message import MessageCoderV11\nfrom saic_ismart_client.ota_v1_1.data_model import MessageV11, MpUserLoggingInRsp, MessageBodyV11, VinInfo, \\\n    MpAlarmSettingType\nfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\nfrom saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsWayPoint, \\\n    RvsWgs84Point, Timestamp4Short, RvsBasicStatus25857, OtaRvcStatus25857\nfrom saic_ismart_client.ota_v3_0.Message import MessageBodyV30, MessageV30, MessageCoderV30\nfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp, RvsChargingStatus\n\nfrom saic_ismart_client.saic_api import SaicApi, SaicApiException", "\nfrom saic_ismart_client.saic_api import SaicApi, SaicApiException\n\nTOKEN = '99X9999X-90XX-99X9-99X9-9XX9XX0X9X9XXX9X'\nUID = '00000000000000000000000000000000000090000000099999'\nVIN = 'vin10000000000000'\n\n\ndef mock_login_response_hex(message_coder: MessageCoderV11) -> str:\n    app_data = MpUserLoggingInRsp()\n    app_data.user_name = 'user_name'\n    app_data.vin_list.append(create_vin_info(VIN))\n    app_data.vin_list.append(create_vin_info('vin20000000000000'))\n    app_data.vin_list.append(create_vin_info('vin30000000000000'))\n    header = Header()\n    header.protocol_version = 17\n    login_rsp_message = MessageV11(header, MessageBodyV11(), app_data)\n    message_coder.initialize_message(\n        UID,\n        TOKEN,\n        '501',\n        513,\n        1,\n        login_rsp_message)\n    return message_coder.encode_request(login_rsp_message)", "def mock_login_response_hex(message_coder: MessageCoderV11) -> str:\n    app_data = MpUserLoggingInRsp()\n    app_data.user_name = 'user_name'\n    app_data.vin_list.append(create_vin_info(VIN))\n    app_data.vin_list.append(create_vin_info('vin20000000000000'))\n    app_data.vin_list.append(create_vin_info('vin30000000000000'))\n    header = Header()\n    header.protocol_version = 17\n    login_rsp_message = MessageV11(header, MessageBodyV11(), app_data)\n    message_coder.initialize_message(\n        UID,\n        TOKEN,\n        '501',\n        513,\n        1,\n        login_rsp_message)\n    return message_coder.encode_request(login_rsp_message)", "\n\ndef create_vin_info(vin: str) -> VinInfo:\n    vin_info = VinInfo()\n    vin_info.vin = vin\n    vin_info.series = 'series'\n    vin_info.brand_name = b'brandName'\n    vin_info.model_name = b'modelName'\n    vin_info.active = True\n    vin_info.model_configuration_json_str = 'name:Tire pressure monitoring system,code:J17,value:1;' \\\n                                            + 'name:Regular airbags,code:Q00,value:1;' \\\n                                            + 'name:Front-seat airbags,code:Q01,value:1;' \\\n                                            + 'name:Airbag switch,code:Q09,value:1;' \\\n                                            + 'name:Sun Roof,code:S35,value:0;' \\\n                                            + 'name:Remote control,code:S61,value:1;' \\\n                                            + 'name:Air conditioning,code:T11,value:1;' \\\n                                            + 'name:Electric Power Steering,code:EPS,value:1;' \\\n                                            + 'name:Security alert,code:SA64,value:0111110000000000001000000100101000000010100000000000000000000110;' \\\n                                            + 'name:Bonnut Status,code:BONNUT,value:1;' \\\n                                            + 'name:Door Status,code:DOOR,value:1111;' \\\n                                            + 'name:Boot Status,code:BOOT,value:1;' \\\n                                            + 'name:Engine Status,code:ENGINE,value:1;' \\\n                                            + 'name:Electric Vehicle,code:EV,value:0;' \\\n                                            + 'name:HeatedSeat,code:HeatedSeat,value:0;' \\\n                                            + 'name:Key Position,code:KEYPOS,value:1;' \\\n                                            + 'name:Energy state,code:ENERGY,value:0;' \\\n                                            + 'name:Battery Voltage,code:BATTERY,value:1;' \\\n                                            + 'name:Interior Temperature,code:INTEMP,value:1;' \\\n                                            + 'name:Exterior Temperature,code:EXTEMP,value:1;' \\\n                                            + 'name:Window Status,code:WINDOW,value:0000;' \\\n                                            + 'name:Left-Right Driving,code:LRD,value:0;' \\\n                                            + 'name:Bluetooth Key,code:BTKEY,value:0;' \\\n                                            + 'name:Battery Type,code:BType,value:2'\n    return vin_info", "\n\ndef mock_alarm_switch_response_hex(message_coder: MessageCoderV11) -> str:\n    header = Header()\n    header.protocol_version = 17\n    alarm_switch_rsp_message = MessageV11(header, MessageBodyV11())\n    message_coder.initialize_message(\n        UID,\n        TOKEN,\n        '521',\n        513,\n        1,\n        alarm_switch_rsp_message)\n    return message_coder.encode_request(alarm_switch_rsp_message)", "\n\ndef mock_vehicle_status_response(message_v2_1_coder: MessageCoderV21, uid: str, token: str, vin_info: VinInfo) -> str:\n    vehicle_status_response = OtaRvmVehicleStatusResp25857()\n    vehicle_status_response.status_time = 1000000000\n    vehicle_status_response.gps_position = RvsPosition()\n    vehicle_status_response.gps_position.way_point = RvsWayPoint()\n    vehicle_status_response.gps_position.way_point.position = RvsWgs84Point()\n    vehicle_status_response.gps_position.way_point.position.latitude = 10000000\n    vehicle_status_response.gps_position.way_point.position.longitude = 10000000\n    vehicle_status_response.gps_position.way_point.position.altitude = 100\n    vehicle_status_response.gps_position.way_point.heading = 90\n    vehicle_status_response.gps_position.way_point.speed = 100\n    vehicle_status_response.gps_position.way_point.hdop = 10\n    vehicle_status_response.gps_position.way_point.satellites = 3\n    vehicle_status_response.gps_position.timestamp_4_short = Timestamp4Short()\n    vehicle_status_response.gps_position.timestamp_4_short.seconds = 1000000000\n    vehicle_status_response.gps_position.gps_status = 'fix3D'\n    vehicle_status_response.basic_vehicle_status = RvsBasicStatus25857()\n    vehicle_status_response.basic_vehicle_status.driver_door = False\n    vehicle_status_response.basic_vehicle_status.passenger_door = False\n    vehicle_status_response.basic_vehicle_status.rear_left_door = False\n    vehicle_status_response.basic_vehicle_status.rear_right_door = False\n    vehicle_status_response.basic_vehicle_status.boot_status = True\n    vehicle_status_response.basic_vehicle_status.bonnet_status = False\n    vehicle_status_response.basic_vehicle_status.lock_status = True\n    vehicle_status_response.basic_vehicle_status.side_light_status = False\n    vehicle_status_response.basic_vehicle_status.dipped_beam_status = False\n    vehicle_status_response.basic_vehicle_status.main_beam_status = False\n    vehicle_status_response.basic_vehicle_status.power_mode = 1\n    vehicle_status_response.basic_vehicle_status.last_key_seen = 32000\n    vehicle_status_response.basic_vehicle_status.current_journey_distance = 7\n    vehicle_status_response.basic_vehicle_status.current_journey_id = 42\n    vehicle_status_response.basic_vehicle_status.interior_temperature = 22\n    vehicle_status_response.basic_vehicle_status.exterior_temperature = 10\n    vehicle_status_response.basic_vehicle_status.fuel_level_prc = 125\n    vehicle_status_response.basic_vehicle_status.fuel_range = 32000\n    vehicle_status_response.basic_vehicle_status.remote_climate_status = 7\n    vehicle_status_response.basic_vehicle_status.can_bus_active = False\n    vehicle_status_response.basic_vehicle_status.time_of_last_canbus_activity = 1000000000\n    vehicle_status_response.basic_vehicle_status.clstr_dspd_fuel_lvl_sgmt = 125\n    vehicle_status_response.basic_vehicle_status.mileage = 1000\n    vehicle_status_response.basic_vehicle_status.battery_voltage = 32000\n    vehicle_status_response.basic_vehicle_status.hand_brake = True\n    vehicle_status_response.basic_vehicle_status.veh_elec_rng_dsp = 125\n    vehicle_status_response.basic_vehicle_status.rmt_htd_rr_wnd_st = 125\n    vehicle_status_response.basic_vehicle_status.engine_status = 0\n    vehicle_status_response.basic_vehicle_status.extended_data2 = 0  # is charging\n    vehicle_status_response.basic_vehicle_status.fuel_range_elec = 32000\n    message = MessageV2(MessageBodyV2(), vehicle_status_response)\n    message_v2_1_coder.initialize_message(\n        uid,\n        token,\n        vin_info.vin,\n        \"511\",\n        25857,\n        1,\n        message)\n    return message_v2_1_coder.encode_request(message)", "\n\ndef mock_chrg_mgmt_data_rsp(message_v3_0_coder: MessageCoderV30, uid: str, token: str, vin_info: VinInfo) -> str:\n    chrg_mgmt_data_rsp = OtaChrgMangDataResp()\n    chrg_mgmt_data_rsp.bmsAdpPubChrgSttnDspCmd = 0\n    chrg_mgmt_data_rsp.bmsAltngChrgCrntDspCmd = 0\n    chrg_mgmt_data_rsp.bmsChrgCtrlDspCmd = 2\n    chrg_mgmt_data_rsp.bmsChrgOtptCrntReq = 1023\n    chrg_mgmt_data_rsp.bmsChrgSpRsn = 0\n    chrg_mgmt_data_rsp.bmsChrgSts = 0\n    chrg_mgmt_data_rsp.bms_estd_elec_rng = 290\n    chrg_mgmt_data_rsp.bmsOnBdChrgTrgtSOCDspCmd = 7\n    chrg_mgmt_data_rsp.bmsPackCrnt = 20000\n    chrg_mgmt_data_rsp.bmsPackSOCDsp = 841\n    chrg_mgmt_data_rsp.bmsPackVol = 1602\n    chrg_mgmt_data_rsp.bmsPTCHeatReqDspCmd = 0\n    chrg_mgmt_data_rsp.bmsPTCHeatSpRsn = 0\n    chrg_mgmt_data_rsp.bmsReserCtrlDspCmd = 0\n    chrg_mgmt_data_rsp.bmsReserSpHourDspCmd = 0\n    chrg_mgmt_data_rsp.bmsReserStHourDspCmd = 0\n    chrg_mgmt_data_rsp.bmsReserStMintueDspCmd = 0\n    chrg_mgmt_data_rsp.bmsReserSpMintueDspCmd = 0\n    chrg_mgmt_data_rsp.chrgngRmnngTime = 1023\n    chrg_mgmt_data_rsp.chrgngRmnngTimeV = 1\n    chrg_mgmt_data_rsp.clstrElecRngToEPT = 243\n\n    chrg_mgmt_data_rsp.chargeStatus = RvsChargingStatus()\n    chrg_mgmt_data_rsp.chargeStatus.charging_duration = 0\n    chrg_mgmt_data_rsp.chargeStatus.charging_gun_state = False\n    chrg_mgmt_data_rsp.chargeStatus.fuel_Range_elec = 2430\n    chrg_mgmt_data_rsp.chargeStatus.charging_type = 0\n    chrg_mgmt_data_rsp.chargeStatus.mileage = 19320\n    chrg_mgmt_data_rsp.chargeStatus.end_time = 1664974510\n    chrg_mgmt_data_rsp.chargeStatus.last_charge_ending_power = 631\n    chrg_mgmt_data_rsp.chargeStatus.mileage_of_day = 0\n    chrg_mgmt_data_rsp.chargeStatus.mileage_since_last_charge = 120\n    chrg_mgmt_data_rsp.chargeStatus.power_usage_of_day = 0\n    chrg_mgmt_data_rsp.chargeStatus.power_usage_since_last_charge = 21\n    chrg_mgmt_data_rsp.chargeStatus.real_time_power = 610\n    chrg_mgmt_data_rsp.chargeStatus.start_time = 1664962716\n    chrg_mgmt_data_rsp.chargeStatus.total_battery_capacity = 725\n    chrg_mgmt_data_rsp.chargeStatus.working_current = 20000\n    chrg_mgmt_data_rsp.chargeStatus.working_voltage = 1602\n\n    chrg_mgmt_data_rsp_msg = MessageV30(MessageBodyV30(), chrg_mgmt_data_rsp)\n    message_v3_0_coder.initialize_message(uid, token, vin_info.vin, '516', 768, 5, chrg_mgmt_data_rsp_msg)\n    return message_v3_0_coder.encode_request(chrg_mgmt_data_rsp_msg)", "\n\ndef mock_start_ac_rsp_msg(message_coder_v2_1: MessageCoderV21, uid: str, token: str, vin_info: VinInfo):\n    start_ac_rsp = OtaRvcStatus25857()\n    start_ac_rsp.rvcReqType = b'\\x06'\n    start_ac_rsp.rvcReqSts = b'\\x01'\n    start_ac_rsp.failureType = 0\n    start_ac_rsp.gpsPosition = RvsPosition()\n    start_ac_rsp.gpsPosition.way_point = RvsWayPoint()\n    start_ac_rsp.gpsPosition.way_point.position = RvsWgs84Point()\n    start_ac_rsp.gpsPosition.way_point.position.latitude = 10000000\n    start_ac_rsp.gpsPosition.way_point.position.longitude = 10000000\n    start_ac_rsp.gpsPosition.way_point.position.altitude = 100\n    start_ac_rsp.gpsPosition.way_point.heading = 90\n    start_ac_rsp.gpsPosition.way_point.speed = 100\n    start_ac_rsp.gpsPosition.way_point.hdop = 10\n    start_ac_rsp.gpsPosition.way_point.satellites = 3\n    start_ac_rsp.gpsPosition.timestamp_4_short = Timestamp4Short()\n    start_ac_rsp.gpsPosition.timestamp_4_short.seconds = 1000000000\n    start_ac_rsp.gpsPosition.gps_status = 'fix3D'\n    start_ac_rsp.basicVehicleStatus = RvsBasicStatus25857()\n    start_ac_rsp.basicVehicleStatus.driver_door = False\n    start_ac_rsp.basicVehicleStatus.passenger_door = False\n    start_ac_rsp.basicVehicleStatus.rear_left_door = False\n    start_ac_rsp.basicVehicleStatus.rear_right_door = False\n    start_ac_rsp.basicVehicleStatus.boot_status = True\n    start_ac_rsp.basicVehicleStatus.bonnet_status = False\n    start_ac_rsp.basicVehicleStatus.lock_status = True\n    start_ac_rsp.basicVehicleStatus.side_light_status = False\n    start_ac_rsp.basicVehicleStatus.dipped_beam_status = False\n    start_ac_rsp.basicVehicleStatus.main_beam_status = False\n    start_ac_rsp.basicVehicleStatus.power_mode = 1\n    start_ac_rsp.basicVehicleStatus.last_key_seen = 32000\n    start_ac_rsp.basicVehicleStatus.current_journey_distance = 7\n    start_ac_rsp.basicVehicleStatus.current_journey_id = 42\n    start_ac_rsp.basicVehicleStatus.interior_temperature = 22\n    start_ac_rsp.basicVehicleStatus.exterior_temperature = 10\n    start_ac_rsp.basicVehicleStatus.fuel_level_prc = 125\n    start_ac_rsp.basicVehicleStatus.fuel_range = 32000\n    start_ac_rsp.basicVehicleStatus.remote_climate_status = 7\n    start_ac_rsp.basicVehicleStatus.can_bus_active = False\n    start_ac_rsp.basicVehicleStatus.time_of_last_canbus_activity = 1000000000\n    start_ac_rsp.basicVehicleStatus.clstr_dspd_fuel_lvl_sgmt = 125\n    start_ac_rsp.basicVehicleStatus.mileage = 1000\n    start_ac_rsp.basicVehicleStatus.battery_voltage = 32000\n    start_ac_rsp.basicVehicleStatus.hand_brake = True\n    start_ac_rsp.basicVehicleStatus.veh_elec_rng_dsp = 125\n    start_ac_rsp.basicVehicleStatus.rmt_htd_rr_wnd_st = 125\n    start_ac_rsp.basicVehicleStatus.engine_status = 0\n    start_ac_rsp.basicVehicleStatus.extended_data2 = 0  # is charging\n    start_ac_rsp.basicVehicleStatus.fuel_range_elec = 32000\n    start_ac_rsp_msg = MessageV2(MessageBodyV2(), start_ac_rsp)\n    message_coder_v2_1.initialize_message(uid, token, vin_info.vin, '510', 25857, 1, start_ac_rsp_msg)\n    start_ac_rsp_msg.body.ack_required = False\n    return message_coder_v2_1.encode_request(start_ac_rsp_msg)", "\n\ndef mock_response(mocked_post, hex_value: str):\n    def res():\n        r = requests.Response()\n        r.status_code = 200\n        return r\n\n    mocked_post.return_value = res()\n    type(mocked_post.return_value).content = PropertyMock(return_value=hex_value.encode())", "\n\nclass TestSaicApi(TestCase):\n    def setUp(self) -> None:\n        self.saic_api = SaicApi('https://tap-eu.soimt.com', 'https://gateway-eu.soimt.com', 'user@home.de', 'secret')\n        self.message_coder_v1_1 = MessageCoderV11()\n        self.message_coder_v2_1 = MessageCoderV21()\n        self.message_coder_v3_0 = MessageCoderV30()\n\n    @patch.object(requests, 'post')\n    def test_login(self, mocked_post):\n        mock_response(mocked_post, mock_login_response_hex(self.message_coder_v1_1))\n\n        login_response_message = self.saic_api.login()\n        self.assertIsNotNone(login_response_message.application_data)\n        app_data = cast(MpUserLoggingInRsp, login_response_message.application_data)\n        self.assertEqual('user_name', app_data.user_name)\n\n    @patch.object(requests, 'post')\n    def test_set_alarm_switches(self, mocked_post):\n        mock_response(mocked_post, mock_alarm_switch_response_hex(self.message_coder_v1_1))\n\n        try:\n            alarm_switches = []\n            for alarm_setting_type in MpAlarmSettingType:\n                alarm_switches.append(saic_ismart_client.saic_api.create_alarm_switch(alarm_setting_type))\n            self.saic_api.set_alarm_switches(alarm_switches)\n        except SaicApiException:\n            self.fail()\n\n    @patch.object(requests, 'post')\n    def test_get_vehicle_status(self, mocked_post):\n        vin_info = create_vin_info(VIN)\n        mock_response(mocked_post, mock_vehicle_status_response(self.message_coder_v2_1, UID, TOKEN, vin_info))\n\n        vehicle_status_rsp_msg = self.saic_api.get_vehicle_status_with_retry(vin_info)\n        app_data = cast(OtaRvmVehicleStatusResp25857, vehicle_status_rsp_msg.application_data)\n        self.assertEqual(1000000000, app_data.status_time)\n\n    @patch.object(requests, 'post')\n    def test_get_charging_status(self, mocked_post):\n        vin_info = create_vin_info(VIN)\n        mock_response(mocked_post, mock_chrg_mgmt_data_rsp(self.message_coder_v3_0, UID, TOKEN, vin_info))\n\n        chrg_mgmt_data_rsp_msg = self.saic_api.get_charging_status_with_retry(vin_info)\n        app_data = cast(OtaChrgMangDataResp, chrg_mgmt_data_rsp_msg.application_data)\n        self.assertEqual(1023, app_data.bmsChrgOtptCrntReq)\n\n    @patch.object(requests, 'post')\n    def test_start_ac(self, mocked_post):\n        vin_info = create_vin_info(VIN)\n        mock_response(mocked_post, mock_start_ac_rsp_msg(self.message_coder_v2_1, UID, TOKEN, vin_info))\n\n        start_ac_rsp_msg = self.saic_api.start_ac(vin_info)\n        app_data = cast(OtaRvcStatus25857, start_ac_rsp_msg.application_data)\n        self.assertEqual(app_data.rvcReqType, b'\\x06')\n        self.assertEqual(start_ac_rsp_msg.body.ack_required, False)", ""]}
{"filename": "tests/test_Message_v3_0.py", "chunked_list": ["import calendar\nimport time\nfrom typing import cast\nfrom unittest import TestCase\n\nfrom saic_ismart_client.common_model import DataEncodingType\nfrom saic_ismart_client.ota_v3_0.Message import MessageCoderV30, MessageBodyV30, MessageV30\nfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp, RvsChargingStatus\n\n\nclass TestMessageCoderV30(TestCase):\n    def setUp(self):\n        self.message_coder = MessageCoderV30()\n\n    def test_encode_chrg_mgmt_data(self):\n        expected_hex = '100CF30750000000000000000000000000000000000F0F983060C183060C183060C183060C18306'\\\n                       + '0C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB972E5CB95AC2C39B0B'\\\n                       + '5CB073616B972E5CAD72E6C5872E6C39B0E6C5872E5CB96AC5B58B162C3972C1CB9B16183972E5C'\\\n                       + 'B906C67BC48000009C3C011C03004000000800000000000000070122000203FF0103FF4E2006420'\\\n                       + '349000000F30000CFCE0026204BF00633D509CC67AFD5C9C400C8400F0002A00000000000000000'\\\n                       + '9DC0B5400025BC0000'\n        expected_message = MessageV30(MessageBodyV30(), OtaChrgMangDataResp())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        reserved = bytes().fromhex('00000000000000000000000000000000')\n        body = MessageBodyV30()\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 71\n        body.application_data_protocol_version = 768\n        body.application_id = '516'\n        body.event_creation_time = calendar.timegm(time.strptime('2022-10-05 20:00:00', '%Y-%m-%d %H:%M:%S'))\n        body.event_id = 9999\n        body.message_id = 6\n        body.result = 0\n        body.test_flag = 2\n        body.token = '9X999999-0X9X-909X-9999-99XX99X9X9XX9999'\n        body.uid = '00000000000000000000000000000000000090000000099999'\n        body.vin = 'XXXX99099XX099999'\n\n        chrg_mgmt_data_rsp = get_chrg_mgmt_data_rsp_test_data()\n\n        actual_message = MessageV30(body, chrg_mgmt_data_rsp, reserved)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message(expected_message, actual_message)\n        self.assertEqual(expected_hex, actual_hex)\n\n    def validate_message(self, expected: MessageV30, actual: MessageV30) -> None:\n        self.assertEqual(expected.body.application_data_encoding, actual.body.application_data_encoding)\n        self.assertEqual(expected.body.application_data_length, actual.body.application_data_length)\n        self.assertEqual(expected.body.application_data_protocol_version, actual.body.application_data_protocol_version)\n        self.assertEqual(expected.body.application_id, actual.body.application_id)\n        self.assertEqual(expected.body.event_creation_time, actual.body.event_creation_time)\n        self.assertEqual(expected.body.event_id, actual.body.event_id)\n        self.assertEqual(expected.body.message_id, actual.body.message_id)\n        self.assertEqual(expected.body.test_flag, actual.body.test_flag)\n        self.assertEqual(expected.body.token, actual.body.token)\n        self.assertEqual(expected.body.uid, actual.body.uid)\n        self.assertEqual(expected.body.vin, actual.body.vin)\n\n        self.validate_chrg_mgmt_data(cast(OtaChrgMangDataResp, expected.application_data),\n                                     cast(OtaChrgMangDataResp, actual.application_data))\n\n    def validate_chrg_mgmt_data(self, expected: OtaChrgMangDataResp, actual: OtaChrgMangDataResp):\n        self.assertEqual(expected.bmsAdpPubChrgSttnDspCmd, actual.bmsAdpPubChrgSttnDspCmd)\n        self.assertEqual(expected.bmsAltngChrgCrntDspCmd, actual.bmsAltngChrgCrntDspCmd)\n        self.assertEqual(expected.bmsChrgCtrlDspCmd, actual.bmsChrgCtrlDspCmd)\n        self.assertEqual(expected.bmsChrgOtptCrntReq, actual.bmsChrgOtptCrntReq)\n        self.assertEqual(expected.bmsChrgSpRsn, actual.bmsChrgSpRsn)\n        self.assertEqual(expected.bmsChrgSts, actual.bmsChrgSts)\n        self.assertEqual(expected.bms_estd_elec_rng, actual.bms_estd_elec_rng)\n        self.assertEqual(expected.bmsOnBdChrgTrgtSOCDspCmd, actual.bmsOnBdChrgTrgtSOCDspCmd)\n        self.assertEqual(expected.bmsPackCrnt, actual.bmsPackCrnt)\n        self.assertEqual(expected.bmsPackSOCDsp, actual.bmsPackSOCDsp)\n        self.assertEqual(expected.bmsPackVol, actual.bmsPackVol)\n        self.assertEqual(expected.bmsPTCHeatReqDspCmd, actual.bmsPTCHeatReqDspCmd)\n        self.assertEqual(expected.bmsPTCHeatSpRsn, actual.bmsPTCHeatSpRsn)\n        self.assertEqual(expected.bmsReserCtrlDspCmd, actual.bmsReserCtrlDspCmd)\n        self.assertEqual(expected.bmsReserSpHourDspCmd, actual.bmsReserSpHourDspCmd)\n        self.assertEqual(expected.bmsReserStHourDspCmd, actual.bmsReserStHourDspCmd)\n        self.assertEqual(expected.bmsReserStMintueDspCmd, actual.bmsReserStMintueDspCmd)\n        self.assertEqual(expected.bmsReserSpMintueDspCmd, actual.bmsReserSpMintueDspCmd)\n        self.assertEqual(expected.chrgngRmnngTime, actual.chrgngRmnngTime)\n        self.assertEqual(expected.chrgngRmnngTimeV, actual.chrgngRmnngTimeV)\n        self.assertEqual(expected.clstrElecRngToEPT, actual.clstrElecRngToEPT)\n        self.validate_chrg_status(expected.chargeStatus, actual.chargeStatus)\n\n    def validate_chrg_status(self, expected: RvsChargingStatus, actual: RvsChargingStatus):\n        self.assertEqual(expected.charging_duration, actual.charging_duration)\n        self.assertEqual(expected.charging_gun_state, actual.charging_gun_state)\n        self.assertEqual(expected.fuel_Range_elec, actual.fuel_Range_elec)\n        self.assertEqual(expected.charging_type, actual.charging_type)\n        self.assertEqual(expected.mileage, actual.mileage)\n        self.assertEqual(expected.end_time, actual.end_time)\n        self.assertEqual(expected.last_charge_ending_power, actual.last_charge_ending_power)\n        self.assertEqual(expected.mileage_of_day, actual.mileage_of_day)\n        self.assertEqual(expected.mileage_since_last_charge, actual.mileage_since_last_charge)\n        self.assertEqual(expected.power_usage_of_day, actual.power_usage_of_day)\n        self.assertEqual(expected.power_usage_since_last_charge, actual.power_usage_since_last_charge)\n        self.assertEqual(expected.real_time_power, actual.real_time_power)\n        self.assertEqual(expected.start_time, actual.start_time)\n        self.assertEqual(expected.total_battery_capacity, actual.total_battery_capacity)\n        self.assertEqual(expected.working_current, actual.working_current)\n        self.assertEqual(expected.working_voltage, actual.working_voltage)", "\n\nclass TestMessageCoderV30(TestCase):\n    def setUp(self):\n        self.message_coder = MessageCoderV30()\n\n    def test_encode_chrg_mgmt_data(self):\n        expected_hex = '100CF30750000000000000000000000000000000000F0F983060C183060C183060C183060C18306'\\\n                       + '0C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB972E5CB95AC2C39B0B'\\\n                       + '5CB073616B972E5CAD72E6C5872E6C39B0E6C5872E5CB96AC5B58B162C3972C1CB9B16183972E5C'\\\n                       + 'B906C67BC48000009C3C011C03004000000800000000000000070122000203FF0103FF4E2006420'\\\n                       + '349000000F30000CFCE0026204BF00633D509CC67AFD5C9C400C8400F0002A00000000000000000'\\\n                       + '9DC0B5400025BC0000'\n        expected_message = MessageV30(MessageBodyV30(), OtaChrgMangDataResp())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        reserved = bytes().fromhex('00000000000000000000000000000000')\n        body = MessageBodyV30()\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 71\n        body.application_data_protocol_version = 768\n        body.application_id = '516'\n        body.event_creation_time = calendar.timegm(time.strptime('2022-10-05 20:00:00', '%Y-%m-%d %H:%M:%S'))\n        body.event_id = 9999\n        body.message_id = 6\n        body.result = 0\n        body.test_flag = 2\n        body.token = '9X999999-0X9X-909X-9999-99XX99X9X9XX9999'\n        body.uid = '00000000000000000000000000000000000090000000099999'\n        body.vin = 'XXXX99099XX099999'\n\n        chrg_mgmt_data_rsp = get_chrg_mgmt_data_rsp_test_data()\n\n        actual_message = MessageV30(body, chrg_mgmt_data_rsp, reserved)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message(expected_message, actual_message)\n        self.assertEqual(expected_hex, actual_hex)\n\n    def validate_message(self, expected: MessageV30, actual: MessageV30) -> None:\n        self.assertEqual(expected.body.application_data_encoding, actual.body.application_data_encoding)\n        self.assertEqual(expected.body.application_data_length, actual.body.application_data_length)\n        self.assertEqual(expected.body.application_data_protocol_version, actual.body.application_data_protocol_version)\n        self.assertEqual(expected.body.application_id, actual.body.application_id)\n        self.assertEqual(expected.body.event_creation_time, actual.body.event_creation_time)\n        self.assertEqual(expected.body.event_id, actual.body.event_id)\n        self.assertEqual(expected.body.message_id, actual.body.message_id)\n        self.assertEqual(expected.body.test_flag, actual.body.test_flag)\n        self.assertEqual(expected.body.token, actual.body.token)\n        self.assertEqual(expected.body.uid, actual.body.uid)\n        self.assertEqual(expected.body.vin, actual.body.vin)\n\n        self.validate_chrg_mgmt_data(cast(OtaChrgMangDataResp, expected.application_data),\n                                     cast(OtaChrgMangDataResp, actual.application_data))\n\n    def validate_chrg_mgmt_data(self, expected: OtaChrgMangDataResp, actual: OtaChrgMangDataResp):\n        self.assertEqual(expected.bmsAdpPubChrgSttnDspCmd, actual.bmsAdpPubChrgSttnDspCmd)\n        self.assertEqual(expected.bmsAltngChrgCrntDspCmd, actual.bmsAltngChrgCrntDspCmd)\n        self.assertEqual(expected.bmsChrgCtrlDspCmd, actual.bmsChrgCtrlDspCmd)\n        self.assertEqual(expected.bmsChrgOtptCrntReq, actual.bmsChrgOtptCrntReq)\n        self.assertEqual(expected.bmsChrgSpRsn, actual.bmsChrgSpRsn)\n        self.assertEqual(expected.bmsChrgSts, actual.bmsChrgSts)\n        self.assertEqual(expected.bms_estd_elec_rng, actual.bms_estd_elec_rng)\n        self.assertEqual(expected.bmsOnBdChrgTrgtSOCDspCmd, actual.bmsOnBdChrgTrgtSOCDspCmd)\n        self.assertEqual(expected.bmsPackCrnt, actual.bmsPackCrnt)\n        self.assertEqual(expected.bmsPackSOCDsp, actual.bmsPackSOCDsp)\n        self.assertEqual(expected.bmsPackVol, actual.bmsPackVol)\n        self.assertEqual(expected.bmsPTCHeatReqDspCmd, actual.bmsPTCHeatReqDspCmd)\n        self.assertEqual(expected.bmsPTCHeatSpRsn, actual.bmsPTCHeatSpRsn)\n        self.assertEqual(expected.bmsReserCtrlDspCmd, actual.bmsReserCtrlDspCmd)\n        self.assertEqual(expected.bmsReserSpHourDspCmd, actual.bmsReserSpHourDspCmd)\n        self.assertEqual(expected.bmsReserStHourDspCmd, actual.bmsReserStHourDspCmd)\n        self.assertEqual(expected.bmsReserStMintueDspCmd, actual.bmsReserStMintueDspCmd)\n        self.assertEqual(expected.bmsReserSpMintueDspCmd, actual.bmsReserSpMintueDspCmd)\n        self.assertEqual(expected.chrgngRmnngTime, actual.chrgngRmnngTime)\n        self.assertEqual(expected.chrgngRmnngTimeV, actual.chrgngRmnngTimeV)\n        self.assertEqual(expected.clstrElecRngToEPT, actual.clstrElecRngToEPT)\n        self.validate_chrg_status(expected.chargeStatus, actual.chargeStatus)\n\n    def validate_chrg_status(self, expected: RvsChargingStatus, actual: RvsChargingStatus):\n        self.assertEqual(expected.charging_duration, actual.charging_duration)\n        self.assertEqual(expected.charging_gun_state, actual.charging_gun_state)\n        self.assertEqual(expected.fuel_Range_elec, actual.fuel_Range_elec)\n        self.assertEqual(expected.charging_type, actual.charging_type)\n        self.assertEqual(expected.mileage, actual.mileage)\n        self.assertEqual(expected.end_time, actual.end_time)\n        self.assertEqual(expected.last_charge_ending_power, actual.last_charge_ending_power)\n        self.assertEqual(expected.mileage_of_day, actual.mileage_of_day)\n        self.assertEqual(expected.mileage_since_last_charge, actual.mileage_since_last_charge)\n        self.assertEqual(expected.power_usage_of_day, actual.power_usage_of_day)\n        self.assertEqual(expected.power_usage_since_last_charge, actual.power_usage_since_last_charge)\n        self.assertEqual(expected.real_time_power, actual.real_time_power)\n        self.assertEqual(expected.start_time, actual.start_time)\n        self.assertEqual(expected.total_battery_capacity, actual.total_battery_capacity)\n        self.assertEqual(expected.working_current, actual.working_current)\n        self.assertEqual(expected.working_voltage, actual.working_voltage)", "\n\ndef get_chrg_mgmt_data_rsp_test_data() -> OtaChrgMangDataResp:\n    chrg_mgmt_data = OtaChrgMangDataResp()\n    chrg_mgmt_data.bmsAdpPubChrgSttnDspCmd = 0\n    chrg_mgmt_data.bmsAltngChrgCrntDspCmd = 0\n    chrg_mgmt_data.bmsChrgCtrlDspCmd = 2\n    chrg_mgmt_data.bmsChrgOtptCrntReq = 1023\n    chrg_mgmt_data.bmsChrgSpRsn = 0\n    chrg_mgmt_data.bmsChrgSts = 0\n    chrg_mgmt_data.bms_estd_elec_rng = 290\n    chrg_mgmt_data.bmsOnBdChrgTrgtSOCDspCmd = 7\n    chrg_mgmt_data.bmsPackCrnt = 20000\n    chrg_mgmt_data.bmsPackSOCDsp = 841\n    chrg_mgmt_data.bmsPackVol = 1602\n    chrg_mgmt_data.bmsPTCHeatReqDspCmd = 0\n    chrg_mgmt_data.bmsPTCHeatSpRsn = 0\n    chrg_mgmt_data.bmsReserCtrlDspCmd = 0\n    chrg_mgmt_data.bmsReserSpHourDspCmd = 0\n    chrg_mgmt_data.bmsReserStHourDspCmd = 0\n    chrg_mgmt_data.bmsReserStMintueDspCmd = 0\n    chrg_mgmt_data.bmsReserSpMintueDspCmd = 0\n    chrg_mgmt_data.chrgngRmnngTime = 1023\n    chrg_mgmt_data.chrgngRmnngTimeV = 1\n    chrg_mgmt_data.clstrElecRngToEPT = 243\n\n    chrg_mgmt_data.chargeStatus = RvsChargingStatus()\n    chrg_mgmt_data.chargeStatus.charging_duration = 0\n    chrg_mgmt_data.chargeStatus.charging_gun_state = False\n    chrg_mgmt_data.chargeStatus.fuel_Range_elec = 2430\n    chrg_mgmt_data.chargeStatus.charging_type = 0\n    chrg_mgmt_data.chargeStatus.mileage = 19320\n    chrg_mgmt_data.chargeStatus.end_time = 1664974510\n    chrg_mgmt_data.chargeStatus.last_charge_ending_power = 631\n    chrg_mgmt_data.chargeStatus.mileage_of_day = 0\n    chrg_mgmt_data.chargeStatus.mileage_since_last_charge = 120\n    chrg_mgmt_data.chargeStatus.power_usage_of_day = 0\n    chrg_mgmt_data.chargeStatus.power_usage_since_last_charge = 21\n    chrg_mgmt_data.chargeStatus.real_time_power = 610\n    chrg_mgmt_data.chargeStatus.start_time = 1664962716\n    chrg_mgmt_data.chargeStatus.total_battery_capacity = 725\n    chrg_mgmt_data.chargeStatus.working_current = 20000\n    chrg_mgmt_data.chargeStatus.working_voltage = 1602\n\n    return chrg_mgmt_data", ""]}
{"filename": "tests/test_Message_v2_1.py", "chunked_list": ["import calendar\nimport time\nfrom typing import cast\nfrom unittest import TestCase\n\nfrom saic_ismart_client.common_model import DataEncodingType, MessageBodyV2, MessageV2\nfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\nfrom saic_ismart_client.ota_v2_1.data_model import OtaRvcReq, RvcReqParam\n\n\nclass TestMessageCoderV21(TestCase):\n    def setUp(self) -> None:\n        self.message_coder = MessageCoderV21()\n\n    def test_encode_ota_rvc_request(self):\n        expected_hex = '1009E21790000000000000000000000000000000000FFF183060C183060C183060C183060C183060'\\\n                       + 'C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB9B0E5CD85B62C39B0B5C'\\\n                       + 'B9B1616B9B16182D72E5CD8B161CB97362C5872C1CB96AC5858B162C3972C1CB9B16183972E5CB90'\\\n                       + '1C6F2C94000009C3C00000000000000243280A0801800080008001000080018000807F80000'\n        expected_message = MessageV2(MessageBodyV2(), OtaRvcReq())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        reserved = bytes().fromhex('00000000000000000000000000000000')\n        body = MessageBodyV2()\n        body.ack_message_counter = 0\n        body.ack_required = False\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 18\n        body.application_data_protocol_version = 25857\n        body.application_id = '510'\n        body.dl_message_counter = 0\n        body.event_creation_time = calendar.timegm(time.strptime('2022-11-19 23:20:00', '%Y-%m-%d %H:%M:%S'))\n        body.event_id = 9999\n        body.message_id = 1\n        body.test_flag = 2\n        body.token = '9X99X99X-XX9X-99XX-9XX0-999XXX999XXX9099'\n        body.uid = '00000000000000000000000000000000000090000000099999'\n        body.ul_message_counter = 0\n        body.vin = 'XXXX99099XX099999'\n\n        ota_rvc_req = get_ota_rvc_req_test_data()\n\n        actual_message = MessageV2(body, ota_rvc_req, reserved)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message_body(cast(MessageBodyV2, expected_message.body),\n                                   cast(MessageBodyV2, actual_message.body))\n        self.assertEqual(expected_hex, actual_hex)\n\n    def validate_message_body(self, expected: MessageBodyV2, actual: MessageBodyV2) -> None:\n        self.assertEqual(expected.message_id, actual.message_id)\n        self.assertEqual(expected.ul_message_counter, actual.ul_message_counter)\n        self.assertEqual(expected.dl_message_counter, actual.dl_message_counter)\n        self.assertEqual(expected.ack_message_counter, actual.ack_message_counter)\n        self.assertEqual(expected.event_creation_time, actual.event_creation_time)\n        self.assertEqual(expected.application_id, actual.application_id)\n        self.assertEqual(expected.application_data_protocol_version, actual.application_data_protocol_version)\n        self.assertEqual(expected.test_flag, actual.test_flag)\n        self.assertEqual(expected.uid, actual.uid)\n        self.assertEqual(expected.token, actual.token)\n        self.assertEqual(expected.event_id, actual.event_id)\n        self.assertEqual(expected.application_data_encoding, actual.application_data_encoding)\n        self.assertEqual(expected.application_data_length, actual.application_data_length)\n        self.assertEqual(expected.vin, actual.vin)\n        self.assertEqual(expected.ack_required, actual.ack_required)\n        self.assertEqual(expected.result, actual.result)\n        self.assertEqual(expected.error_message, actual.error_message)", "\n\nclass TestMessageCoderV21(TestCase):\n    def setUp(self) -> None:\n        self.message_coder = MessageCoderV21()\n\n    def test_encode_ota_rvc_request(self):\n        expected_hex = '1009E21790000000000000000000000000000000000FFF183060C183060C183060C183060C183060'\\\n                       + 'C183060C183060C183060C183060C1CB060C183060C183972E5CB97361CB9B0E5CD85B62C39B0B5C'\\\n                       + 'B9B1616B9B16182D72E5CD8B161CB97362C5872C1CB96AC5858B162C3972C1CB9B16183972E5CB90'\\\n                       + '1C6F2C94000009C3C00000000000000243280A0801800080008001000080018000807F80000'\n        expected_message = MessageV2(MessageBodyV2(), OtaRvcReq())\n        self.message_coder.decode_response(expected_hex, expected_message)\n\n        reserved = bytes().fromhex('00000000000000000000000000000000')\n        body = MessageBodyV2()\n        body.ack_message_counter = 0\n        body.ack_required = False\n        body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        body.application_data_length = 18\n        body.application_data_protocol_version = 25857\n        body.application_id = '510'\n        body.dl_message_counter = 0\n        body.event_creation_time = calendar.timegm(time.strptime('2022-11-19 23:20:00', '%Y-%m-%d %H:%M:%S'))\n        body.event_id = 9999\n        body.message_id = 1\n        body.test_flag = 2\n        body.token = '9X99X99X-XX9X-99XX-9XX0-999XXX999XXX9099'\n        body.uid = '00000000000000000000000000000000000090000000099999'\n        body.ul_message_counter = 0\n        body.vin = 'XXXX99099XX099999'\n\n        ota_rvc_req = get_ota_rvc_req_test_data()\n\n        actual_message = MessageV2(body, ota_rvc_req, reserved)\n        actual_hex = self.message_coder.encode_request(actual_message)\n        self.validate_message_body(cast(MessageBodyV2, expected_message.body),\n                                   cast(MessageBodyV2, actual_message.body))\n        self.assertEqual(expected_hex, actual_hex)\n\n    def validate_message_body(self, expected: MessageBodyV2, actual: MessageBodyV2) -> None:\n        self.assertEqual(expected.message_id, actual.message_id)\n        self.assertEqual(expected.ul_message_counter, actual.ul_message_counter)\n        self.assertEqual(expected.dl_message_counter, actual.dl_message_counter)\n        self.assertEqual(expected.ack_message_counter, actual.ack_message_counter)\n        self.assertEqual(expected.event_creation_time, actual.event_creation_time)\n        self.assertEqual(expected.application_id, actual.application_id)\n        self.assertEqual(expected.application_data_protocol_version, actual.application_data_protocol_version)\n        self.assertEqual(expected.test_flag, actual.test_flag)\n        self.assertEqual(expected.uid, actual.uid)\n        self.assertEqual(expected.token, actual.token)\n        self.assertEqual(expected.event_id, actual.event_id)\n        self.assertEqual(expected.application_data_encoding, actual.application_data_encoding)\n        self.assertEqual(expected.application_data_length, actual.application_data_length)\n        self.assertEqual(expected.vin, actual.vin)\n        self.assertEqual(expected.ack_required, actual.ack_required)\n        self.assertEqual(expected.result, actual.result)\n        self.assertEqual(expected.error_message, actual.error_message)", "\n\ndef get_ota_rvc_req_test_data() -> OtaRvcReq:\n    ota_rvc_req = OtaRvcReq()\n    ota_rvc_req.rvc_req_type = b'\\x00'\n\n    param1 = RvcReqParam()\n    param1.param_id = 1\n    param1.param_value = b'\\x01'\n    ota_rvc_req.rvc_params.append(param1)\n\n    param2 = RvcReqParam()\n    param2.param_id = 2\n    param2.param_value = b'\\x01'\n    ota_rvc_req.rvc_params.append(param2)\n\n    param3 = RvcReqParam()\n    param3.param_id = 3\n    param3.param_value = b'\\x01'\n    ota_rvc_req.rvc_params.append(param3)\n\n    param4 = RvcReqParam()\n    param4.param_id = 255\n    param4.param_value = b'\\x00'\n    ota_rvc_req.rvc_params.append(param4)\n\n    return ota_rvc_req", ""]}
{"filename": "src/saic_ismart_client/saic_api.py", "chunked_list": ["import datetime\nimport functools\nimport hashlib\nimport logging\nimport os\nimport time\nimport urllib.parse\nfrom typing import cast\n\nimport requests as requests", "\nimport requests as requests\n\nfrom saic_ismart_client.common_model import AbstractMessage, AbstractMessageBody, Header, MessageBodyV2, MessageV2, \\\n    ScheduledChargingMode, TargetBatteryCode, ChargeCurrentLimitCode\nfrom saic_ismart_client.exceptions import SaicApiException\nfrom saic_ismart_client.ota_v1_1.Message import MessageCoderV11\nfrom saic_ismart_client.ota_v1_1.data_model import AbortSendMessageReq, AlarmSwitch, AlarmSwitchReq, Message, \\\n    MessageBodyV11, MessageListReq, MessageListResp, MessageV11, MpAlarmSettingType, MpUserLoggingInReq, \\\n    MpUserLoggingInRsp, StartEndNumber, Timestamp, VinInfo", "    MessageBodyV11, MessageListReq, MessageListResp, MessageV11, MpAlarmSettingType, MpUserLoggingInReq, \\\n    MpUserLoggingInRsp, StartEndNumber, Timestamp, VinInfo\nfrom saic_ismart_client.ota_v2_1.Message import MessageCoderV21\nfrom saic_ismart_client.ota_v2_1.data_model import OtaRvcReq, OtaRvcStatus25857, OtaRvmVehicleStatusReq, \\\n    OtaRvmVehicleStatusResp25857, RvcReqParam\nfrom saic_ismart_client.ota_v3_0.Message import MessageBodyV30, MessageCoderV30, MessageV30\nfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgCtrlReq, OtaChrgCtrlStsResp, OtaChrgHeatReq, \\\n    OtaChrgHeatResp, OtaChrgMangDataResp, OtaChrgRsvanReq, OtaChrgSetngReq, OtaChrgSetngResp, OtaChrgRsvanResp\nfrom saic_ismart_client.rest_v2.api import SaicRestV2Api\nfrom saic_ismart_client.rest_v2.model import TimeZoneEntity", "from saic_ismart_client.rest_v2.api import SaicRestV2Api\nfrom saic_ismart_client.rest_v2.model import TimeZoneEntity\n\nUID_INIT = '0000000000000000000000000000000000000000000000000#'\nAVG_SMS_DELIVERY_TIME = 15\nlogging.basicConfig(format='%(asctime)s %(message)s')\nLOG = logging.getLogger(__name__)\nLOG.setLevel(level=os.getenv('LOG_LEVEL', 'INFO').upper())\n\n\nclass SaicMessage:\n    def __init__(self, message_id: int, message_type: str, title: str, message_time: datetime, sender: str,\n                 content: str, read_status: int, vin: str):\n        self.message_id = message_id\n        self.message_type = message_type\n        self.title = title\n        self.message_time = message_time\n        self.sender = sender\n        self.content = content\n        self.read_status = read_status\n        self.vin = vin\n\n    def get_read_status_str(self) -> str:\n        if self.read_status is None:\n            return 'unknown'\n        elif self.read_status == 0:\n            return 'unread'\n        else:\n            return 'read'\n\n    def get_details(self) -> str:\n        return f'ID: {self.message_id}, Time: {self.message_time}, Type: {self.message_type}, Title: {self.title}, ' \\\n            + f'Content: {self.content}, Status: {self.get_read_status_str()}, Sender: {self.sender}, VIN: {self.vin}'", "\n\nclass SaicMessage:\n    def __init__(self, message_id: int, message_type: str, title: str, message_time: datetime, sender: str,\n                 content: str, read_status: int, vin: str):\n        self.message_id = message_id\n        self.message_type = message_type\n        self.title = title\n        self.message_time = message_time\n        self.sender = sender\n        self.content = content\n        self.read_status = read_status\n        self.vin = vin\n\n    def get_read_status_str(self) -> str:\n        if self.read_status is None:\n            return 'unknown'\n        elif self.read_status == 0:\n            return 'unread'\n        else:\n            return 'read'\n\n    def get_details(self) -> str:\n        return f'ID: {self.message_id}, Time: {self.message_time}, Type: {self.message_type}, Title: {self.title}, ' \\\n            + f'Content: {self.content}, Status: {self.get_read_status_str()}, Sender: {self.sender}, VIN: {self.vin}'", "\n\ndef convert(message: Message) -> SaicMessage:\n    if message.content is not None:\n        content = message.content.decode()\n    else:\n        content = None\n    return SaicMessage(message.message_id, message.message_type, message.title.decode(),\n                       message.message_time.get_timestamp(), message.sender.decode(), content, message.read_status,\n                       message.vin)", "\n\nclass SaicApi:\n    def __init__(\n            self,\n            saic_uri: str,\n            saic_rest_uri: str,\n            saic_user: str,\n            saic_password: str,\n            relogin_delay: int = None\n    ):\n        self.saic_uri = saic_uri\n        self.saic_user = saic_user\n        self.saic_password = saic_password\n        if relogin_delay is None:\n            self.relogin_delay = 0\n        else:\n            self.relogin_delay = relogin_delay\n        self.message_v1_1_coder = MessageCoderV11()\n        self.message_V2_1_coder = MessageCoderV21()\n        self.message_V3_0_coder = MessageCoderV30()\n        self.rest_v2_api = SaicRestV2Api(saic_rest_uri)\n        self.cookies = None\n        self.uid = ''\n        self.token = ''\n        self.token_expiration = None\n        self.on_publish_raw_value = None\n        self.on_publish_json_value = None\n\n    def login(self) -> MessageV11:\n        application_data = MpUserLoggingInReq()\n        application_data.password = self.saic_password\n        header = Header()\n        header.protocol_version = 17\n        login_request_message = MessageV11(header, MessageBodyV11(), application_data)\n        application_id = '501'\n        application_data_protocol_version = 513\n        self.message_v1_1_coder.initialize_message(\n            UID_INIT[len(self.saic_user):] + self.saic_user,\n            cast(str, None),\n            application_id,\n            application_data_protocol_version,\n            1,\n            login_request_message)\n        self.publish_json_request(application_id, application_data_protocol_version, login_request_message.get_data())\n        login_request_hex = self.message_v1_1_coder.encode_request(login_request_message)\n        self.publish_raw_request(application_id, application_data_protocol_version, login_request_hex)\n        login_response_hex = self.send_request(login_request_hex,\n                                               urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n        self.publish_raw_response(application_id, application_data_protocol_version, login_response_hex)\n        logging_in_rsp = MpUserLoggingInRsp()\n        login_response_message = MessageV11(header, MessageBodyV11(), logging_in_rsp)\n        self.message_v1_1_coder.decode_response(login_response_hex, login_response_message)\n        self.publish_json_response(application_id, application_data_protocol_version, login_response_message.get_data())\n        if login_response_message.body.error_message is not None:\n            raise SaicApiException(login_response_message.body.error_message.decode(),\n                                   login_response_message.body.result)\n        else:\n            self.uid = login_response_message.body.uid\n            self.token = logging_in_rsp.token\n            if logging_in_rsp.token_expiration is not None:\n                self.token_expiration = logging_in_rsp.token_expiration\n        return login_response_message\n\n    def set_geofence_alarm_switch(self) -> None:\n        return self.set_alarm_switches(\n            [create_alarm_switch(MpAlarmSettingType.REGION)],\n            pin='22222222222222222222222222222222'\n        )\n\n    def set_alarm_switches(self, alarm_switches: list, pin: str = None) -> None:\n        alarm_switch_req = AlarmSwitchReq()\n        alarm_switch_req.alarm_switch_list = alarm_switches\n        alarm_switch_req.pin = hash_md5('123456') if pin is None else pin\n\n        header = Header()\n        header.protocol_version = 17\n        alarm_switch_req_message = MessageV11(header, MessageBodyV11(), alarm_switch_req)\n        application_id = '521'\n        application_data_protocol_version = 513\n        self.message_v1_1_coder.initialize_message(\n            self.uid,\n            self.get_token(),\n            application_id,\n            application_data_protocol_version,\n            1,\n            alarm_switch_req_message)\n        self.publish_json_request(application_id, application_data_protocol_version,\n                                  alarm_switch_req_message.get_data())\n        alarm_switch_request_hex = self.message_v1_1_coder.encode_request(alarm_switch_req_message)\n        self.publish_raw_request(application_id, application_data_protocol_version, alarm_switch_request_hex)\n        alarm_switch_response_hex = self.send_request(alarm_switch_request_hex,\n                                                      urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n        self.publish_raw_response(application_id, application_data_protocol_version, alarm_switch_response_hex)\n        alarm_switch_response_message = MessageV11(header, MessageBodyV11())\n        self.message_v1_1_coder.decode_response(alarm_switch_response_hex, alarm_switch_response_message)\n        self.publish_json_response(application_id, application_data_protocol_version,\n                                   alarm_switch_response_message.get_data())\n\n        if alarm_switch_response_message.body.error_message is not None:\n            raise SaicApiException(alarm_switch_response_message.body.error_message.decode(),\n                                   alarm_switch_response_message.body.result)\n\n    def get_vehicle_status(self, vin_info: VinInfo, event_id: str = None) -> MessageV2:\n        vehicle_status_req = OtaRvmVehicleStatusReq()\n        vehicle_status_req.veh_status_req_type = 2\n        vehicle_status_req_msg = MessageV2(MessageBodyV2(), vehicle_status_req)\n        application_id = '511'\n        application_data_protocol_version = 25857\n        self.message_V2_1_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 1, vehicle_status_req_msg)\n        vehicle_status_req_msg.body.ack_required = False\n        if event_id is not None:\n            vehicle_status_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, vehicle_status_req_msg.get_data())\n        vehicle_status_req_hex = self.message_V2_1_coder.encode_request(vehicle_status_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, vehicle_status_req_hex)\n        vehicle_status_rsp_hex = self.send_request(vehicle_status_req_hex,\n                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv21'))\n        self.publish_raw_response(application_id, application_data_protocol_version, vehicle_status_rsp_hex)\n        vehicle_status_rsp_msg = MessageV2(MessageBodyV2(), OtaRvmVehicleStatusResp25857())\n        self.message_V2_1_coder.decode_response(vehicle_status_rsp_hex, vehicle_status_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, vehicle_status_rsp_msg.get_data())\n        return vehicle_status_rsp_msg\n\n    def get_vehicle_status_with_retry(self, vin_info: VinInfo) -> MessageV2:\n        return self.handle_retry(self.get_vehicle_status, vin_info)\n\n    def unknown_engine_control(self, vin_info: VinInfo) -> MessageV2:\n        rvc_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 16\n        param1.param_value = b'\\x01'\n        rvc_params.append(param1)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x11', rvc_params, True)\n\n    def lock_vehicle(self, vin_info: VinInfo) -> MessageV2:\n        rvc_params = []\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x01', rvc_params, False)\n\n    def unlock_vehicle(self, vin_info: VinInfo) -> MessageV2:\n        rvc_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 4\n        param1.param_value = b'\\x00'\n        rvc_params.append(param1)\n\n        param2 = RvcReqParam()\n        param2.param_id = 5\n        param2.param_value = b'\\x00'\n        rvc_params.append(param2)\n\n        param3 = RvcReqParam()\n        param3.param_id = 6\n        param3.param_value = b'\\x00'\n        rvc_params.append(param3)\n\n        param4 = RvcReqParam()\n        param4.param_id = 7\n        param4.param_value = b'\\x03'\n        rvc_params.append(param4)\n\n        param5 = RvcReqParam()\n        param5.param_id = 255\n        param5.param_value = b'\\x00'\n        rvc_params.append(param5)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x02', rvc_params, False)\n\n    def start_rear_window_heat(self, vin_info: VinInfo) -> MessageV2:\n        return self.__control_rear_window_heat(vin_info, True)\n\n    def stop_rear_window_heat(self, vin_info: VinInfo) -> MessageV2:\n        return self.__control_rear_window_heat(vin_info, False)\n\n    def __control_rear_window_heat(self, vin_info: VinInfo, enable: bool) -> MessageV2:\n        rvc_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 23\n        param1.param_value = bool_to_bit(enable)\n        rvc_params.append(param1)\n\n        param2 = RvcReqParam()\n        param2.param_id = 255\n        param2.param_value = b'\\x00'\n        rvc_params.append(param2)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x20', rvc_params, False)\n\n    def control_heated_seats(self, vin_info: VinInfo, driver_side=True, passenger_side=True):\n        rcv_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 17\n        param1.param_value = bool_to_bit(driver_side)\n        rcv_params.append(param1)\n\n        param2 = RvcReqParam()\n        param2.param_id = 18\n        param2.param_value = bool_to_bit(passenger_side)\n        rcv_params.append(param2)\n\n        param3 = RvcReqParam()\n        param3.param_id = 255\n        param3.param_value = b'\\x00'\n        rcv_params.append(param3)\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x05', rcv_params, True)\n\n    def start_ac(self, vin_info: VinInfo, temperature_idx=8) -> MessageV2:\n        return self.control_climate(vin_info, fan_speed=2, ac_on=None, temperature_idx=temperature_idx)\n\n    def stop_ac(self, vin_info: VinInfo) -> MessageV2:\n        return self.control_climate(vin_info, fan_speed=0, ac_on=False, temperature_idx=0)\n\n    def start_ac_blowing(self, vin_info: VinInfo) -> MessageV2:\n        return self.control_climate(vin_info, fan_speed=1, ac_on=False, temperature_idx=0)\n\n    def start_front_defrost(self, vin_info: VinInfo) -> MessageV2:\n        return self.control_climate(vin_info, fan_speed=5, ac_on=True, temperature_idx=8)\n\n    def stop_front_defrost(self, vin_info: VinInfo) -> MessageV2:\n        rcv_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 19\n        param1.param_value = b'\\x00'\n        rcv_params.append(param1)\n\n        param2 = RvcReqParam()\n        param2.param_id = 20\n        param2.param_value = b'\\x08'\n        rcv_params.append(param2)\n\n        param3 = RvcReqParam()\n        param3.param_id = 22\n        param3.param_value = b'\\x00'\n        rcv_params.append(param3)\n\n        param4 = RvcReqParam()\n        param4.param_id = 255\n        param4.param_value = b'\\x00'\n        rcv_params.append(param4)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x06', rcv_params, True)\n\n    def control_climate(\n            self,\n            vin_info: VinInfo,\n            fan_speed: int = 5,\n            ac_on: bool | None = True,\n            temperature_idx: int = 8\n    ) -> MessageV2:\n\n        if fan_speed < 0 or fan_speed > 5:\n            raise Exception('fan_speed must be between 0 and 5')\n\n        if temperature_idx < 0 or temperature_idx > 14:\n            raise Exception('temperature_idx must be between 0 and 14')\n\n        if fan_speed == 0:\n            ac_on = False\n            temperature_idx = 8\n\n        rcv_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 19\n        param1.param_value = fan_speed.to_bytes(1, 'big')\n        rcv_params.append(param1)\n\n        if fan_speed > 0 or temperature_idx == 0:\n            param2 = RvcReqParam()\n            param2.param_id = 20\n            param2.param_value = temperature_idx.to_bytes(1, 'big')\n            rcv_params.append(param2)\n\n        if ac_on is not None:\n            param3 = RvcReqParam()\n            param3.param_id = 22\n            param3.param_value = bool_to_bit(ac_on)\n            rcv_params.append(param3)\n\n        param4 = RvcReqParam()\n        param4.param_id = 255\n        param4.param_value = b'\\x00'\n        rcv_params.append(param4)\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x06', rcv_params, True)\n\n    def close_driver_window(self, vin_info: VinInfo) -> MessageV2:\n        rcv_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 9\n        param1.param_value = b'\\x01'\n        rcv_params.append(param1)\n\n        for i in [10, 11, 12, 13, 255]:\n            param = RvcReqParam()\n            param.param_id = i\n            param.param_value = b'\\x00'\n            rcv_params.append(param)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x03', rcv_params, False)\n\n    def control_sunroof(self, should_open: bool, vin_info: VinInfo) -> MessageV2:\n        rcv_params = []\n        param1 = RvcReqParam()\n        param1.param_id = 8\n        param1.param_value = b'\\x01'\n        rcv_params.append(param1)\n\n        for i in [9, 10, 11, 12, 255]:\n            param = RvcReqParam()\n            param.param_id = i\n            param.param_value = b'\\x00'\n            rcv_params.append(param)\n\n        param = RvcReqParam()\n        param.param_id = 13\n        param.param_value = b'\\x03' if should_open else b'\\x00'\n        rcv_params.append(param)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x03', rcv_params, True)\n\n    def open_door_locks(self, vin_info: VinInfo) -> MessageV2:\n        return self.__open_vehicle_lock(vin_info, 3)\n\n    def open_tailgate(self, vin_info: VinInfo) -> MessageV2:\n        return self.__open_vehicle_lock(vin_info, 2)\n\n    def __open_vehicle_lock(self, vin_info: VinInfo, lock_id: int) -> MessageV2:\n        rcv_params = []\n\n        for i in [4, 5, 6, 255]:\n            param = RvcReqParam()\n            param.param_id = i\n            param.param_value = b'\\x00'\n            rcv_params.append(param)\n\n        param1 = RvcReqParam()\n        param1.param_id = 7\n        param1.param_value = lock_id.to_bytes(1, 'big')\n        rcv_params.append(param1)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x02', rcv_params, False)\n\n    def find_my_car(self, vin_info: VinInfo, with_horn: bool = True, with_lights: bool = True) -> MessageV2:\n        rcv_params = []\n\n        param = RvcReqParam()\n        param.param_id = 1\n        param.param_value = b'\\x01'\n        rcv_params.append(param)\n\n        param = RvcReqParam()\n        param.param_id = 2\n        param.param_value = bool_to_bit(with_horn)\n        rcv_params.append(param)\n\n        param = RvcReqParam()\n        param.param_id = 3\n        param.param_value = bool_to_bit(with_lights)\n        rcv_params.append(param)\n\n        param = RvcReqParam()\n        param.param_id = 255\n        param.param_value = b'\\x00'\n        rcv_params.append(param)\n\n        return self.send_vehicle_ctrl_cmd_with_retry(vin_info, b'\\x00', rcv_params, True)\n\n    def send_vehicle_ctrl_cmd_with_retry(self, vin_info: VinInfo, rvc_req_type: bytes, rvc_params: list,\n                                         has_app_data: bool, max_retries=3) -> MessageV2:\n\n        return self.handle_retry(\n            functools.partial(self.__send_vehicle_control_command, rvc_req_type, rvc_params),\n            vin_info=vin_info,\n            has_app_data=has_app_data,\n            max_retries=max_retries\n        )\n\n    def get_message_list_with_retry(self) -> list:\n        message_list_rsp_msg = self.handle_retry(self.get_message_list)\n\n        result = []\n        if message_list_rsp_msg.application_data is not None:\n            message_list_rsp = cast(MessageListResp, message_list_rsp_msg.application_data)\n            for message in message_list_rsp.messages:\n                result.append(convert(message))\n        return result\n\n    def handle_retry(self, func, vin_info: VinInfo = None, has_app_data: bool = True, max_retries: int = 3):\n        if has_app_data:\n            return self.__handle_retry_with_app_data(func, vin_info=vin_info, max_retries=max_retries)\n        else:\n            return self.__handle_retry_without_app_data(func, vin_info=vin_info, max_retries=max_retries)\n\n    def __handle_retry_without_app_data(self, func, vin_info: VinInfo, max_retries: int):\n        if vin_info:\n            rsp = func(vin_info)\n        else:\n            rsp = func()\n        rsp_msg = cast(AbstractMessage, rsp)\n\n        retry = 1\n        while (\n                rsp_msg.body.error_message is not None\n                and retry <= max_retries\n        ):\n            self.handle_error(rsp_msg.body, retry)\n\n            if vin_info:\n                rsp_msg = func(vin_info, rsp_msg.body.event_id)\n            else:\n                rsp_msg = func(rsp_msg.body.event_id)\n\n            retry += 1\n        if rsp_msg.body.error_message is not None:\n            raise SaicApiException(rsp_msg.body.error_message.decode(),\n                                   rsp_msg.body.result)\n        return rsp_msg\n\n    def __handle_retry_with_app_data(self, func, vin_info: VinInfo, max_retries: int):\n        if vin_info:\n            rsp = func(vin_info)\n        else:\n            rsp = func()\n        rsp_msg = cast(AbstractMessage, rsp)\n        iteration = 1\n        while rsp_msg.application_data is None:\n            error_message = rsp_msg.body.error_message\n            if iteration > max_retries:\n                additional_info = '.'\n                if error_message is not None:\n                    additional_info = f', error message: {error_message.decode()}'\n                raise SaicApiException(f'API request failed after {iteration} retries{additional_info}')\n            elif error_message is not None:\n                self.handle_error(rsp_msg.body, iteration)\n            else:\n                LOG.debug('API request returned no application data and no error message.')\n                time.sleep(float(AVG_SMS_DELIVERY_TIME))\n\n            iteration += 1\n\n            if vin_info:\n                rsp_msg = func(vin_info, rsp_msg.body.event_id)\n            else:\n                rsp_msg = func(rsp_msg.body.event_id)\n        return rsp_msg\n\n    def __send_vehicle_control_command(self, rvc_req_type: bytes, rvc_params: list,\n                                       vin_info: VinInfo, event_id: str = None) -> MessageV2:\n        vehicle_control_req = OtaRvcReq()\n        vehicle_control_req.rvc_req_type = rvc_req_type\n        for p in rvc_params:\n            param = cast(RvcReqParam, p)\n            vehicle_control_req.rvc_params.append(param)\n\n        vehicle_control_cmd_req_msg = MessageV2(MessageBodyV2(), vehicle_control_req)\n        application_id = '510'\n        application_data_protocol_version = 25857\n        self.message_V2_1_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 1, vehicle_control_cmd_req_msg)\n        vehicle_control_cmd_req_msg.body.ack_required = False\n        if event_id is not None:\n            vehicle_control_cmd_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version,\n                                  vehicle_control_cmd_req_msg.get_data())\n        vehicle_control_cmd_req_msg_hex = self.message_V2_1_coder.encode_request(vehicle_control_cmd_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, vehicle_control_cmd_req_msg_hex)\n        vehicle_control_cmd_rsp_msg_hex = self.send_request(vehicle_control_cmd_req_msg_hex,\n                                                            urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv21'))\n        self.publish_raw_response(application_id, application_data_protocol_version, vehicle_control_cmd_rsp_msg_hex)\n        vehicle_control_cmd_rsp_msg = MessageV2(MessageBodyV2(), OtaRvcStatus25857())\n        self.message_V2_1_coder.decode_response(vehicle_control_cmd_rsp_msg_hex, vehicle_control_cmd_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version,\n                                   vehicle_control_cmd_rsp_msg.get_data())\n        return vehicle_control_cmd_rsp_msg\n\n    # CHARGING MANAGEMENT\n\n    def get_charging_status(self, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n        chrg_mgmt_data_req_msg = MessageV30(MessageBodyV30())\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 5, chrg_mgmt_data_req_msg)\n        chrg_mgmt_data_req_msg.body.ack_required = False\n        if event_id is not None:\n            chrg_mgmt_data_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_mgmt_data_req_msg.get_data())\n        chrg_mgmt_data_req_hex = self.message_V3_0_coder.encode_request(chrg_mgmt_data_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_mgmt_data_req_hex)\n        chrg_mgmt_data_rsp_hex = self.send_request(chrg_mgmt_data_req_hex,\n                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_mgmt_data_rsp_hex)\n        chrg_mgmt_data_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgMangDataResp())\n        self.message_V3_0_coder.decode_response(chrg_mgmt_data_rsp_hex, chrg_mgmt_data_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_mgmt_data_rsp_msg.get_data())\n        return chrg_mgmt_data_rsp_msg\n\n    def get_charging_status_with_retry(self, vin_info: VinInfo) -> MessageV30:\n        return self.handle_retry(self.get_charging_status, vin_info)\n\n    def control_battery_heating(self, enable: bool, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n        chrg_heat_req = OtaChrgHeatReq()\n        chrg_heat_req.ptcHeatReq = bool_to_int(enable)\n        chrg_heat_req_msg = MessageV30(MessageBodyV30(), chrg_heat_req)\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 9, chrg_heat_req_msg)\n        if event_id is not None:\n            chrg_heat_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_heat_req_msg.get_data())\n        chrg_heat_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_heat_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_heat_req_msg_hex)\n        chrg_heat_rsp_msg_hex = self.send_request(chrg_heat_req_msg_hex,\n                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_heat_rsp_msg_hex)\n        chrg_heat_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgHeatResp())\n        self.message_V3_0_coder.decode_response(chrg_heat_rsp_msg_hex, chrg_heat_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_heat_rsp_msg.get_data())\n        return chrg_heat_rsp_msg\n\n    def control_charging_port_lock(self, unlock: bool, vin_info: VinInfo, event_id: str = None):\n        chrg_ctrl_req = OtaChrgCtrlReq()\n        chrg_ctrl_req.chrgCtrlReq = 0\n        chrg_ctrl_req.tboxV2XReq = 0\n        chrg_ctrl_req.tboxEleccLckCtrlReq = 2 if unlock else 1\n        chrg_ctrl_req_msg = MessageV30(MessageBodyV30(), chrg_ctrl_req)\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 7, chrg_ctrl_req_msg)\n        if event_id is not None:\n            chrg_ctrl_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg.get_data())\n        chrg_ctrl_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_ctrl_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg_hex)\n        chrg_ctrl_rsp_msg_hex = self.send_request(chrg_ctrl_req_msg_hex,\n                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg_hex)\n        chrg_ctrl_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgCtrlStsResp())\n        self.message_V3_0_coder.decode_response(chrg_ctrl_rsp_msg_hex, chrg_ctrl_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg.get_data())\n        return chrg_ctrl_rsp_msg\n\n    def control_charging(self, stop_charging: bool, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n        chrg_ctrl_req = OtaChrgCtrlReq()\n        chrg_ctrl_req.chrgCtrlReq = 2 if stop_charging else 1\n        chrg_ctrl_req.tboxV2XReq = 0\n        chrg_ctrl_req.tboxEleccLckCtrlReq = 0\n        chrg_ctrl_req_msg = MessageV30(MessageBodyV30(), chrg_ctrl_req)\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 7, chrg_ctrl_req_msg)\n        if event_id is not None:\n            chrg_ctrl_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg.get_data())\n        chrg_ctrl_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_ctrl_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_ctrl_req_msg_hex)\n        chrg_ctrl_rsp_msg_hex = self.send_request(chrg_ctrl_req_msg_hex,\n                                                  urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg_hex)\n        chrg_ctrl_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgCtrlStsResp())\n        self.message_V3_0_coder.decode_response(chrg_ctrl_rsp_msg_hex, chrg_ctrl_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_ctrl_rsp_msg.get_data())\n        return chrg_ctrl_rsp_msg\n\n    def start_charging(self, vin_info: VinInfo, event_id: str = None) -> MessageV30:\n        return self.control_charging(False, vin_info, event_id)\n\n    def start_charging_with_retry(self, vin_info: VinInfo) -> MessageV30:\n        return self.handle_retry(self.start_charging, vin_info)\n\n    def set_target_battery_soc(\n            self,\n            target_soc: TargetBatteryCode,\n            vin_info: VinInfo,\n            charge_current_limit: ChargeCurrentLimitCode = ChargeCurrentLimitCode.C_IGNORE,\n            event_id: str = None\n    ):\n        chrg_setng_req = OtaChrgSetngReq()\n        chrg_setng_req.onBdChrgTrgtSOCReq = target_soc.value\n        chrg_setng_req.altngChrgCrntReq = charge_current_limit.value\n        chrg_setng_req.tboxV2XSpSOCReq = 0\n        chrg_setng_req_msg = MessageV30(MessageBodyV30(), chrg_setng_req)\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 3, chrg_setng_req_msg)\n        if event_id is not None:\n            chrg_setng_req_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_setng_req_msg.get_data())\n        chrg_setng_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_setng_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_setng_req_msg_hex)\n        chrg_setng_rsp_msg_hex = self.send_request(chrg_setng_req_msg_hex,\n                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_setng_rsp_msg_hex)\n        chrg_setng_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgSetngResp())\n        self.message_V3_0_coder.decode_response(chrg_setng_rsp_msg_hex, chrg_setng_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_setng_rsp_msg.get_data())\n        return chrg_setng_rsp_msg\n\n    def set_schedule_charging(self, start_time: datetime.time, end_time: datetime.time,\n                              mode: ScheduledChargingMode,\n                              vin_info: VinInfo,\n                              event_id: str = None):\n        start_hour = start_time.hour\n        start_minute = start_time.minute\n        end_hour = end_time.hour\n        end_minute = end_time.minute\n        mode_value = mode.value\n        chrg_rsvan_req = OtaChrgRsvanReq()\n        chrg_rsvan_req.rsvanStHour = start_hour\n        chrg_rsvan_req.rsvanStMintu = start_minute\n        chrg_rsvan_req.rsvanSpHour = end_hour\n        chrg_rsvan_req.rsvanSpMintu = end_minute\n        chrg_rsvan_req.tboxAdpPubChrgSttnReq = 1\n        chrg_rsvan_req.tboxReserCtrlReq = mode_value\n        chrg_rsvan_msg = MessageV30(MessageBodyV30(), chrg_rsvan_req)\n        application_id = '516'\n        application_data_protocol_version = 768\n        self.message_V3_0_coder.initialize_message(self.uid, self.get_token(), vin_info.vin, application_id,\n                                                   application_data_protocol_version, 1, chrg_rsvan_msg)\n        if event_id is not None:\n            chrg_rsvan_msg.body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, chrg_rsvan_msg.get_data())\n        chrg_rsvan_req_msg_hex = self.message_V3_0_coder.encode_request(chrg_rsvan_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, chrg_rsvan_req_msg_hex)\n        chrg_rsvan_rsp_msg_hex = self.send_request(chrg_rsvan_req_msg_hex,\n                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mpv30'))\n        self.publish_raw_response(application_id, application_data_protocol_version, chrg_rsvan_rsp_msg_hex)\n        chrg_rsvan_rsp_msg = MessageV30(MessageBodyV30(), OtaChrgRsvanResp())\n        self.message_V3_0_coder.decode_response(chrg_rsvan_rsp_msg_hex, chrg_rsvan_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, chrg_rsvan_rsp_msg.get_data())\n        return chrg_rsvan_rsp_msg\n\n    # Messages\n    def get_message_list(self, event_id: str = None) -> MessageV11:\n        return self.get_alarm_list(1, 5, event_id)\n\n    def get_alarm_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n        return self.__get_message_list_of_group(start, end, 'ALARM', event_id)\n\n    def get_command_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n        return self.__get_message_list_of_group(start, end, 'COMMAND', event_id)\n\n    def get_news_list(self, start: int, end: int, event_id: str = None) -> MessageV11:\n        return self.__get_message_list_of_group(start, end, 'NEWS', event_id)\n\n    def __get_message_list_of_group(self, start: int, end: int, message_group: str, event_id: str = None) -> MessageV11:\n        message_list_request = MessageListReq()\n        message_list_request.start_end_number = StartEndNumber()\n        message_list_request.start_end_number.start_number = start\n        message_list_request.start_end_number.end_number = end\n        message_list_request.message_group = message_group\n\n        header = Header()\n        header.protocol_version = 18\n        message_body = MessageBodyV11()\n        message_list_req_msg = MessageV11(header, message_body, message_list_request)\n        application_id = '531'\n        application_data_protocol_version = 513\n        self.message_v1_1_coder.initialize_message(self.uid, self.get_token(), application_id,\n                                                   application_data_protocol_version, 1, message_list_req_msg)\n        if event_id is not None:\n            message_body.event_id = event_id\n        self.publish_json_request(application_id, application_data_protocol_version, message_list_req_msg.get_data())\n        message_list_req_hex = self.message_v1_1_coder.encode_request(message_list_req_msg)\n        self.publish_raw_request(application_id, application_data_protocol_version, message_list_req_hex)\n        message_list_rsp_hex = self.send_request(message_list_req_hex,\n                                                 urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n        self.publish_raw_response(application_id, application_data_protocol_version, message_list_rsp_hex)\n        message_list_rsp_msg = MessageV11(header, MessageBodyV11(), MessageListResp())\n        self.message_v1_1_coder.decode_response(message_list_rsp_hex, message_list_rsp_msg)\n        self.publish_json_response(application_id, application_data_protocol_version, message_list_rsp_msg.get_data())\n        return message_list_rsp_msg\n\n    def delete_all_alarms(self, event_id: str = None):\n        self.__change_message_status(None, 'DELETE_ALARM', event_id)\n\n    def delete_all_commands(self, event_id: str = None):\n        self.__change_message_status(None, 'DELETE_COMMAND', event_id)\n\n    def delete_all_news(self, event_id: str = None):\n        self.__change_message_status(None, 'DELETE_NEWS', event_id)\n\n    def read_message(self, message_id: int, event_id: str = None):\n        self.__change_message_status(message_id, 'READ', event_id)\n\n    def delete_message(self, message_id: int, event_id: str = None):\n        self.__change_message_status(message_id, 'DELETE', event_id)\n\n    def __change_message_status(self, message_id: int | None, action_type: str, event_id: str = None):\n        abort_send_msg_req = AbortSendMessageReq()\n        abort_send_msg_req.action_type = action_type\n        if message_id is not None:\n            abort_send_msg_req.message_id = message_id\n\n        header = Header()\n        header.protocol_version = 17\n        message_body = MessageBodyV11()\n        message_delete_req_msg = MessageV11(header, message_body, abort_send_msg_req)\n        application_id = '615'\n        application_protocol_version = 513\n        self.message_v1_1_coder.initialize_message(self.uid, self.get_token(), application_id,\n                                                   application_protocol_version, 1, message_delete_req_msg)\n        if event_id is not None:\n            message_body.event_id = event_id\n        self.publish_json_request(application_id, application_protocol_version, abort_send_msg_req.get_data())\n        message_delete_req_hex = self.message_v1_1_coder.encode_request(message_delete_req_msg)\n        self.publish_raw_request(application_id, application_protocol_version, message_delete_req_hex)\n        message_delete_rsp_hex = self.send_request(message_delete_req_hex,\n                                                   urllib.parse.urljoin(self.saic_uri, '/TAP.Web/ota.mp'))\n        self.publish_raw_response(application_id, application_protocol_version, message_delete_rsp_hex)\n        message_delete_rsp_msg = MessageV11(header, MessageBodyV11())\n        self.message_v1_1_coder.decode_response(message_delete_rsp_hex, message_delete_rsp_msg)\n        self.publish_json_response(application_id, application_protocol_version, message_delete_rsp_msg.get_data())\n        if message_delete_rsp_msg.body.error_message is not None:\n            raise SaicApiException(message_delete_rsp_msg.body.error_message.decode(),\n                                   message_delete_rsp_msg.body.result)\n\n    def publish_raw_value(self, key: str, raw: str):\n        if self.on_publish_raw_value is not None:\n            self.on_publish_raw_value(key, raw)\n        else:\n            LOG.debug(f'{key}: {raw}')\n\n    def publish_raw_request(self, application_id: str, application_data_protocol_version: int, raw: str):\n        key = f'{application_id}_{application_data_protocol_version}/raw/request'\n        self.publish_raw_value(key, raw)\n\n    def publish_raw_response(self, application_id: str, application_data_protocol_version: int, raw: str):\n        key = f'{application_id}_{application_data_protocol_version}/raw/response'\n        self.publish_raw_value(key, raw)\n\n    def publish_json_request(self, application_id: str, application_data_protocol_version: int, data: dict):\n        key = f'{application_id}_{application_data_protocol_version}/json/request'\n        self.publish_json(key, data)\n\n    def publish_json_response(self, application_id: str, application_data_protocol_version: int, data: dict):\n        key = f'{application_id}_{application_data_protocol_version}/json/response'\n        self.publish_json(key, data)\n\n    def publish_json(self, key: str, data: dict):\n        if self.on_publish_json_value is not None:\n            self.on_publish_json_value(key, data)\n        else:\n            LOG.debug(f'{key}: {data}')\n\n    def send_request(self, hex_message: str, endpoint) -> str:\n        headers = {\n            'Accept': '*/*',\n            'Content-Type': 'text/html',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'User-Agent': 'MG iSMART/1.1.1 (iPhone; iOS 16.3; Scale/3.00)',\n            'Accept-Language': 'de-DE;q=1, en-DE;q=0.9, lu-DE;q=0.8, fr-DE;q=0.7',\n            'Content-Length': str(len(hex_message))\n        }\n        try:\n            response = requests.post(url=endpoint, data=hex_message, headers=headers, cookies=self.cookies)\n            self.cookies = response.cookies\n            return response.content.decode()\n        except requests.exceptions.ConnectionError as ece:\n            raise SaicApiException(f'Connection error: {ece}')\n        except requests.exceptions.Timeout as et:\n            raise SaicApiException(f'Timeout error: {et}')\n        except requests.exceptions.HTTPError as ehttp:\n            status_code = ehttp.response.status_code\n            raise SaicApiException(f'HTTP error. HTTP status: {status_code}, {ehttp}')\n        except requests.exceptions.RequestException as e:\n            raise SaicApiException(f'{e}')\n\n    def get_token(self):\n        if self.token_expiration is not None:\n            token_expiration = cast(Timestamp, self.token_expiration)\n            if token_expiration.get_timestamp() < datetime.datetime.now():\n                self.login()\n        return self.token\n\n    def get_user_timezone(self):\n        return self.rest_v2_api.get_user_timezone(self.get_token(), self.uid)\n\n    def handle_error(self, message_body: AbstractMessageBody, iteration: int):\n        if iteration > 0:\n            waiting_time = AVG_SMS_DELIVERY_TIME * iteration\n        else:\n            waiting_time = AVG_SMS_DELIVERY_TIME\n        message = f'application ID: {message_body.application_id},' \\\n                  + f' protocol version: {message_body.application_data_protocol_version},' \\\n                  + f' message: {message_body.error_message.decode()}' \\\n                  + f' result code: {message_body.result}'\n\n        if message_body.result == 2:\n            # re-login\n            LOG.debug(message)\n            if self.relogin_delay > 0:\n                LOG.warning(f'The SAIC user has been logged out. '\n                            + f'Waiting {self.relogin_delay} seconds before attempting another login')\n                time.sleep(float(self.relogin_delay))\n            self.login()\n        elif message_body.result == 4:\n            # The remote control instruction failed, please try again later.\n            LOG.debug(message)\n            time.sleep(float(waiting_time))\n        elif message_body.result == 6:\n            # The service is not available,please try again later\n            LOG.debug(message)\n            time.sleep(float(waiting_time))\n        elif message_body.result == -1:\n            LOG.warning(message)\n        else:\n            LOG.error(message)\n            raise SaicApiException(message_body.error_message.decode(), message_body.result)", "\n\ndef bool_to_bit(flag):\n    return b'\\x01' if flag else b'\\x00'\n\n\ndef bool_to_int(flag):\n    return 1 if flag else 0\n\n\ndef hash_md5(password: str) -> str:\n    return hashlib.md5(password.encode('utf-8')).hexdigest()", "\n\ndef hash_md5(password: str) -> str:\n    return hashlib.md5(password.encode('utf-8')).hexdigest()\n\n\ndef create_alarm_switch(alarm_setting_type: MpAlarmSettingType) -> AlarmSwitch:\n    alarm_switch = AlarmSwitch()\n    alarm_switch.alarm_setting_type = alarm_setting_type.value\n    alarm_switch.alarm_switch = True\n    alarm_switch.function_switch = True\n    return alarm_switch", ""]}
{"filename": "src/saic_ismart_client/__init__.py", "chunked_list": [""]}
{"filename": "src/saic_ismart_client/abrp_api.py", "chunked_list": ["import json\nimport time\n\nimport requests\nfrom saic_ismart_client.ota_v2_1.data_model import OtaRvmVehicleStatusResp25857, RvsPosition, RvsBasicStatus25857\nfrom saic_ismart_client.ota_v3_0.data_model import OtaChrgMangDataResp\n\n\nclass AbrpApiException(Exception):\n    def __init__(self, msg: str):\n        self.message = msg\n\n    def __str__(self):\n        return self.message", "class AbrpApiException(Exception):\n    def __init__(self, msg: str):\n        self.message = msg\n\n    def __str__(self):\n        return self.message\n\n\nclass AbrpApi:\n    def __init__(self, abrp_api_key: str, abrp_user_token: str) -> None:\n        self.abrp_api_key = abrp_api_key\n        self.abrp_user_token = abrp_user_token\n\n    def update_abrp(self, vehicle_status: OtaRvmVehicleStatusResp25857, charge_status: OtaChrgMangDataResp) -> str:\n        if (\n                self.abrp_api_key is not None\n                and self.abrp_user_token is not None\n                and vehicle_status is not None\n                and charge_status is not None\n        ):\n            # Request\n            tlm_send_url = 'https://api.iternio.com/1/tlm/send'\n            data = {\n                'utc': int(time.time()), # We assume the timestamp is now, we will update it later from GPS if available\n                'soc': (charge_status.bmsPackSOCDsp / 10.0),\n                'power': charge_status.get_power(),\n                'voltage': charge_status.get_voltage(),\n                'current': charge_status.get_current(),\n                'is_charging': vehicle_status.is_charging(),\n                'is_parked': vehicle_status.is_parked(),\n            }\n\n            basic_vehicle_status = vehicle_status.get_basic_vehicle_status()\n            if basic_vehicle_status is not None:\n                data.update(self.__extract_basic_vehicle_status(basic_vehicle_status))\n\n            gps_position = vehicle_status.get_gps_position()\n            if gps_position is not None:\n                data.update(self.__extract_gps_position(gps_position))\n\n            headers = {\n                'Authorization': f'APIKEY {self.abrp_api_key}'\n            }\n\n            try:\n                response = requests.post(url=tlm_send_url, headers=headers, params={\n                    'token': self.abrp_user_token,\n                    'tlm': json.dumps(data)\n                })\n                return response.content.decode()\n            except requests.exceptions.ConnectionError as ece:\n                raise AbrpApiException(f'Connection error: {ece}')\n            except requests.exceptions.Timeout as et:\n                raise AbrpApiException(f'Timeout error {et}')\n            except requests.exceptions.HTTPError as ehttp:\n                raise AbrpApiException(f'HTTP error {ehttp}')\n            except requests.exceptions.RequestException as e:\n                raise AbrpApiException(f'{e}')\n        else:\n            return 'ABRP request skipped because of missing configuration'\n\n    @staticmethod\n    def __extract_basic_vehicle_status(basic_vehicle_status: RvsBasicStatus25857) -> dict:\n        data = {}\n\n        exterior_temperature = basic_vehicle_status.exterior_temperature\n        if exterior_temperature is not None and exterior_temperature != -128:\n            data['ext_temp'] = exterior_temperature\n        mileage = basic_vehicle_status.mileage\n        if mileage is not None and mileage > 0:\n            data['odometer'] = mileage / 10.0\n        range_elec = basic_vehicle_status.fuel_range_elec\n        if range_elec is not None and range_elec > 0:\n            data['est_battery_range'] = float(range_elec) / 10.0\n\n        return data\n\n    @staticmethod\n    def __extract_gps_position(gps_position: RvsPosition) -> dict:\n\n        # Do not transmit GPS data if we have no timestamp\n        if gps_position.timestamp_4_short is None:\n            return {}\n\n        way_point = gps_position.get_way_point()\n\n        # Do not transmit GPS data if we have no speed info\n        if way_point is None:\n            return {}\n\n        data = {\n            'utc': gps_position.timestamp_4_short.seconds,\n            'speed': (way_point.speed / 10.0),\n            'heading': way_point.heading,\n        }\n\n        position = way_point.get_position()\n\n        if position is None or position.latitude <= 0 or position.longitude <= 0:\n            return data\n\n        data.update({\n            'lat': (position.latitude / 1000000.0),\n            'lon': (position.longitude / 1000000.0),\n            'elevation': position.altitude,\n        })\n\n        return data", "class AbrpApi:\n    def __init__(self, abrp_api_key: str, abrp_user_token: str) -> None:\n        self.abrp_api_key = abrp_api_key\n        self.abrp_user_token = abrp_user_token\n\n    def update_abrp(self, vehicle_status: OtaRvmVehicleStatusResp25857, charge_status: OtaChrgMangDataResp) -> str:\n        if (\n                self.abrp_api_key is not None\n                and self.abrp_user_token is not None\n                and vehicle_status is not None\n                and charge_status is not None\n        ):\n            # Request\n            tlm_send_url = 'https://api.iternio.com/1/tlm/send'\n            data = {\n                'utc': int(time.time()), # We assume the timestamp is now, we will update it later from GPS if available\n                'soc': (charge_status.bmsPackSOCDsp / 10.0),\n                'power': charge_status.get_power(),\n                'voltage': charge_status.get_voltage(),\n                'current': charge_status.get_current(),\n                'is_charging': vehicle_status.is_charging(),\n                'is_parked': vehicle_status.is_parked(),\n            }\n\n            basic_vehicle_status = vehicle_status.get_basic_vehicle_status()\n            if basic_vehicle_status is not None:\n                data.update(self.__extract_basic_vehicle_status(basic_vehicle_status))\n\n            gps_position = vehicle_status.get_gps_position()\n            if gps_position is not None:\n                data.update(self.__extract_gps_position(gps_position))\n\n            headers = {\n                'Authorization': f'APIKEY {self.abrp_api_key}'\n            }\n\n            try:\n                response = requests.post(url=tlm_send_url, headers=headers, params={\n                    'token': self.abrp_user_token,\n                    'tlm': json.dumps(data)\n                })\n                return response.content.decode()\n            except requests.exceptions.ConnectionError as ece:\n                raise AbrpApiException(f'Connection error: {ece}')\n            except requests.exceptions.Timeout as et:\n                raise AbrpApiException(f'Timeout error {et}')\n            except requests.exceptions.HTTPError as ehttp:\n                raise AbrpApiException(f'HTTP error {ehttp}')\n            except requests.exceptions.RequestException as e:\n                raise AbrpApiException(f'{e}')\n        else:\n            return 'ABRP request skipped because of missing configuration'\n\n    @staticmethod\n    def __extract_basic_vehicle_status(basic_vehicle_status: RvsBasicStatus25857) -> dict:\n        data = {}\n\n        exterior_temperature = basic_vehicle_status.exterior_temperature\n        if exterior_temperature is not None and exterior_temperature != -128:\n            data['ext_temp'] = exterior_temperature\n        mileage = basic_vehicle_status.mileage\n        if mileage is not None and mileage > 0:\n            data['odometer'] = mileage / 10.0\n        range_elec = basic_vehicle_status.fuel_range_elec\n        if range_elec is not None and range_elec > 0:\n            data['est_battery_range'] = float(range_elec) / 10.0\n\n        return data\n\n    @staticmethod\n    def __extract_gps_position(gps_position: RvsPosition) -> dict:\n\n        # Do not transmit GPS data if we have no timestamp\n        if gps_position.timestamp_4_short is None:\n            return {}\n\n        way_point = gps_position.get_way_point()\n\n        # Do not transmit GPS data if we have no speed info\n        if way_point is None:\n            return {}\n\n        data = {\n            'utc': gps_position.timestamp_4_short.seconds,\n            'speed': (way_point.speed / 10.0),\n            'heading': way_point.heading,\n        }\n\n        position = way_point.get_position()\n\n        if position is None or position.latitude <= 0 or position.longitude <= 0:\n            return data\n\n        data.update({\n            'lat': (position.latitude / 1000000.0),\n            'lon': (position.longitude / 1000000.0),\n            'elevation': position.altitude,\n        })\n\n        return data", "\n\n"]}
{"filename": "src/saic_ismart_client/common_model.py", "chunked_list": ["import io\nimport os\nimport pathlib\nimport time\nfrom enum import Enum\n\nimport asn1tools\nfrom asn1tools.compiler import Specification\n\nFIELD_ERROR_MESSAGE = 'errorMessage'", "\nFIELD_ERROR_MESSAGE = 'errorMessage'\nFIELD_RESULT = 'result'\nFIELD_TEST_FLAG = 'testFlag'\nFIELD_APPLICATION_DATA_ENCODING = 'applicationDataEncoding'\nFIELD_ACK_REQUIRED = 'ackRequired'\nFIELD_EVENT_ID = 'eventID'\nFIELD_VIN = 'vin'\nFIELD_TOKEN = 'token'\nFIELD_UID = 'uid'", "FIELD_TOKEN = 'token'\nFIELD_UID = 'uid'\nFIELD_APPLICATION_DATA_PROTOCOL_VERSION = 'applicationDataProtocolVersion'\nFIELD_APPLICATION_DATA_LENGTH = 'applicationDataLength'\nFIELD_MESSAGE_ID = 'messageID'\nFIELD_EVENT_CREATION_TIME = 'eventCreationTime'\nFIELD_APPLICATION_ID = 'applicationID'\nFIELD_ACK_MESSAGE_COUNTER = 'ackMessageCounter'\nFIELD_DL_MESSAGE_COUNTER = 'dlMessageCounter'\nFIELD_UL_MESSAGE_COUNTER = 'ulMessageCounter'", "FIELD_DL_MESSAGE_COUNTER = 'dlMessageCounter'\nFIELD_UL_MESSAGE_COUNTER = 'ulMessageCounter'\nFIELD_ICC_ID = 'iccID'\nFIELD_HMI_LANGUAGE = 'hmiLanguage'\nFIELD_NETWORK_INFO = 'networkInfo'\nFIELD_BASIC_POSITION = 'basicPosition'\nFIELD_CRQM_REQUEST = 'crqmRequest'\nFIELD_STATE_LESS_DISPATCHER_MESSAGE = 'statelessDispatcherMessage'\nFIELD_SIM_INFO = 'simInfo'\nFIELD_MESSAGE_COUNTER = 'messageCounter'", "FIELD_SIM_INFO = 'simInfo'\nFIELD_MESSAGE_COUNTER = 'messageCounter'\nFIELD_DOWNLINK_COUNTER = 'downlinkCounter'\nFIELD_UPLINK_COUNTER = 'uplinkCounter'\nFIELD_LONGITUDE = 'longitude'\nFIELD_LATITUDE = 'latitude'\nFIELD_MNC_SIM = 'mncSim'\nFIELD_MCC_SIM = 'mccSim'\nFIELD_MNC_NETWORK = 'mncNetwork'\nFIELD_MCC_NETWORK = 'mccNetwork'", "FIELD_MNC_NETWORK = 'mncNetwork'\nFIELD_MCC_NETWORK = 'mccNetwork'\nFIELD_SIGNAL_STRENGTH = 'signalStrength'\n\n\nclass ScheduledChargingMode(Enum):\n    DISABLED = 2\n    UNTIL_CONFIGURED_SOC = 3\n    UNTIL_CONFIGURED_TIME = 1\n", "    UNTIL_CONFIGURED_TIME = 1\n\n\nclass ChargeCurrentLimitCode(Enum):\n    C_IGNORE = 0\n    C_6A = 1\n    C_8A = 2\n    C_16A = 3\n    C_MAX = 4\n", "    C_MAX = 4\n\n    @staticmethod\n    def to_code(limit: str):\n        match limit.upper():\n            case \"6A\":\n                return ChargeCurrentLimitCode.C_6A\n            case \"8A\":\n                return ChargeCurrentLimitCode.C_8A\n            case \"16A\":", "                return ChargeCurrentLimitCode.C_8A\n            case \"16A\":\n                return ChargeCurrentLimitCode.C_16A\n            case \"MAX\":\n                return ChargeCurrentLimitCode.C_MAX\n            case _:\n                raise ValueError(f'Unknown charge current limit: {limit}')\n\n    def get_limit(self) -> str:\n        match self:", "    def get_limit(self) -> str:\n        match self:\n            case ChargeCurrentLimitCode.C_6A:\n                return \"6A\"\n            case ChargeCurrentLimitCode.C_8A:\n                return \"8A\"\n            case ChargeCurrentLimitCode.C_16A:\n                return \"16A\"\n            case ChargeCurrentLimitCode.C_MAX:\n                return \"Max\"", "            case ChargeCurrentLimitCode.C_MAX:\n                return \"Max\"\n            case _:\n                raise ValueError(f'Unknown charge current limit code: {self}')\n\n\n\nclass TargetBatteryCode(Enum):\n    P_40 = 1\n    P_50 = 2", "    P_40 = 1\n    P_50 = 2\n    P_60 = 3\n    P_70 = 4\n    P_80 = 5\n    P_90 = 6\n    P_100 = 7\n\n    def get_percentage(self) -> int:\n        match self:", "    def get_percentage(self) -> int:\n        match self:\n            case TargetBatteryCode.P_40:\n                return 40\n            case TargetBatteryCode.P_50:\n                return 50\n            case TargetBatteryCode.P_60:\n                return 60\n            case TargetBatteryCode.P_70:\n                return 70", "            case TargetBatteryCode.P_70:\n                return 70\n            case TargetBatteryCode.P_80:\n                return 80\n            case TargetBatteryCode.P_90:\n                return 90\n            case TargetBatteryCode.P_100:\n                return 100\n            case _:\n                raise ValueError(f'Unknown target battery code: {self}')", "            case _:\n                raise ValueError(f'Unknown target battery code: {self}')\n\n    @staticmethod\n    def from_percentage(percentage: int):\n        match percentage:\n            case 40:\n                return TargetBatteryCode.P_40\n            case 50:\n                return TargetBatteryCode.P_50", "            case 50:\n                return TargetBatteryCode.P_50\n            case 60:\n                return TargetBatteryCode.P_60\n            case 70:\n                return TargetBatteryCode.P_70\n            case 80:\n                return TargetBatteryCode.P_80\n            case 90:\n                return TargetBatteryCode.P_90", "            case 90:\n                return TargetBatteryCode.P_90\n            case 100:\n                return TargetBatteryCode.P_100\n            case _:  # default\n                raise ValueError(f'Unknown target battery percentage: {percentage}')\n\n\nclass Header:\n    def __init__(self):", "class Header:\n    def __init__(self):\n        self.protocol_version = None\n        self.security_context = None\n        self.dispatcher_message_length = None\n        self.dispatcher_body_encoding = None\n\n    def get_body_encoding_int_value(self) -> int:\n        if self.dispatcher_body_encoding == DataEncodingType.PER_UNALIGNED:\n            return 0", "        if self.dispatcher_body_encoding == DataEncodingType.PER_UNALIGNED:\n            return 0\n        elif self.dispatcher_body_encoding == DataEncodingType.DER:\n            return 1\n        elif self.dispatcher_body_encoding == DataEncodingType.BER:\n            return 1\n        else:\n            return -1\n\n    def get_data(self) -> dict:", "\n    def get_data(self) -> dict:\n        data = {\n            'protocolVersion': self.protocol_version,\n            'dispatcherMessageLength': self.dispatcher_message_length\n        }\n        if self.dispatcher_body_encoding is not None:\n            data['dispatcherBodyEncoding'] = self.dispatcher_body_encoding\n        if self.security_context is not None:\n            data['securityContext'] = self.security_context", "        if self.security_context is not None:\n            data['securityContext'] = self.security_context\n        return data\n\n\nclass Asn1Type:\n    def __init__(self, asn_type: str):\n        self.asn_type = asn_type\n\n    def get_data(self) -> dict:", "\n    def get_data(self) -> dict:\n        pass\n\n    def init_from_dict(self, data: dict):\n        pass\n\n    def add_optional_field_to_data(self, data: dict, key: str, value) -> None:\n        if value is not None:\n            data[key] = value", "        if value is not None:\n            data[key] = value\n\n\nclass AbstractMessageBody(Asn1Type):\n    def __init__(self, asn_type: str):\n        super().__init__(asn_type)\n        self.message_id = None\n        self.event_creation_time = None\n        self.application_id = None", "        self.event_creation_time = None\n        self.application_id = None\n        self.application_data_protocol_version = None\n        self.test_flag = None\n        self.uid = None\n        self.token = None\n        self.event_id = None\n        self.application_data_encoding = None\n        self.application_data_length = None\n        self.vin = None", "        self.application_data_length = None\n        self.vin = None\n        self.ack_required = None\n        self.result = None\n        self.error_message = None\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_APPLICATION_ID: self.application_id,\n            FIELD_EVENT_CREATION_TIME: self.event_creation_time,", "            FIELD_APPLICATION_ID: self.application_id,\n            FIELD_EVENT_CREATION_TIME: self.event_creation_time,\n            FIELD_MESSAGE_ID: self.message_id,\n            FIELD_APPLICATION_DATA_LENGTH: self.application_data_length,\n            FIELD_APPLICATION_DATA_PROTOCOL_VERSION: self.application_data_protocol_version\n        }\n        self.add_optional_field_to_data(data, FIELD_UID, self.uid)\n        self.add_optional_field_to_data(data, FIELD_TOKEN, self.token)\n        self.add_optional_field_to_data(data, FIELD_VIN, self.vin)\n        self.add_optional_field_to_data(data, FIELD_EVENT_ID, self.event_id)", "        self.add_optional_field_to_data(data, FIELD_VIN, self.vin)\n        self.add_optional_field_to_data(data, FIELD_EVENT_ID, self.event_id)\n        self.add_optional_field_to_data(data, FIELD_ACK_REQUIRED, self.ack_required)\n        if self.application_data_encoding is not None:\n            data[FIELD_APPLICATION_DATA_ENCODING] = self.application_data_encoding\n        self.add_optional_field_to_data(data, FIELD_TEST_FLAG, self.test_flag)\n        self.add_optional_field_to_data(data, FIELD_RESULT, self.result)\n        self.add_optional_field_to_data(data, FIELD_ERROR_MESSAGE, self.error_message)\n\n        return data", "\n        return data\n\n    def init_from_dict(self, data: dict):\n        if FIELD_UID in data:\n            self.uid = data.get(FIELD_UID)\n        if FIELD_TOKEN in data:\n            self.token = data.get(FIELD_TOKEN)\n        self.application_id = data.get(FIELD_APPLICATION_ID)\n        if FIELD_VIN in data:", "        self.application_id = data.get(FIELD_APPLICATION_ID)\n        if FIELD_VIN in data:\n            self.vin = data.get(FIELD_VIN)\n        self.event_creation_time = data.get(FIELD_EVENT_CREATION_TIME)\n        if FIELD_EVENT_ID in data:\n            self.event_id = data.get(FIELD_EVENT_ID)\n        self.message_id = data.get(FIELD_MESSAGE_ID)\n        if FIELD_ACK_REQUIRED in data:\n            self.ack_required = data.get(FIELD_ACK_REQUIRED)\n        self.application_data_length = data.get(FIELD_APPLICATION_DATA_LENGTH)", "            self.ack_required = data.get(FIELD_ACK_REQUIRED)\n        self.application_data_length = data.get(FIELD_APPLICATION_DATA_LENGTH)\n        if FIELD_APPLICATION_DATA_ENCODING in data:\n            self.application_data_encoding = data.get(FIELD_APPLICATION_DATA_ENCODING)\n        self.application_data_protocol_version = data.get(FIELD_APPLICATION_DATA_PROTOCOL_VERSION)\n        if FIELD_TEST_FLAG in data:\n            self.test_flag = data.get(FIELD_TEST_FLAG)\n        if FIELD_RESULT in data:\n            self.result = data.get(FIELD_RESULT)\n        if FIELD_ERROR_MESSAGE in data:", "            self.result = data.get(FIELD_RESULT)\n        if FIELD_ERROR_MESSAGE in data:\n            self.error_message = data.get(FIELD_ERROR_MESSAGE)\n\n\nclass MessageBodyV1(AbstractMessageBody):\n    def __init__(self, asn_type: str):\n        super().__init__(asn_type)\n        self.message_counter = None\n        self.icc_id = None", "        self.message_counter = None\n        self.icc_id = None\n        self.sim_info = None\n        self.stateless_dispatcher_message = None\n        self.crqm_request = None\n        self.basic_position = None\n        self.network_info = None\n        self.hmi_language = None\n\n    def get_data(self) -> dict:", "\n    def get_data(self) -> dict:\n        data = super().get_data()\n        data[FIELD_ICC_ID] = self.icc_id\n        self.add_optional_field_to_data(data, FIELD_STATE_LESS_DISPATCHER_MESSAGE, self.stateless_dispatcher_message)\n        self.add_optional_field_to_data(data, FIELD_CRQM_REQUEST, self.crqm_request)\n        if self.basic_position is not None:\n            data[FIELD_BASIC_POSITION] = self.basic_position.get_data()\n        if self.network_info is not None:\n            data[FIELD_NETWORK_INFO] = self.network_info.get_data()", "        if self.network_info is not None:\n            data[FIELD_NETWORK_INFO] = self.network_info.get_data()\n        self.add_optional_field_to_data(data, FIELD_SIM_INFO, self.sim_info)\n        if self.hmi_language is not None:\n            data[FIELD_HMI_LANGUAGE] = self.hmi_language.get_data()\n        if self.message_counter is not None:\n            data[FIELD_MESSAGE_COUNTER] = self.message_counter.get_data()\n        return data\n\n    def init_from_dict(self, data: dict):", "\n    def init_from_dict(self, data: dict):\n        super().init_from_dict(data)\n        if FIELD_MESSAGE_COUNTER in data:\n            self.message_counter = MessageCounter()\n            self.message_counter.init_from_dict(data.get(FIELD_MESSAGE_COUNTER))\n        self.stateless_dispatcher_message = data.get(FIELD_STATE_LESS_DISPATCHER_MESSAGE)\n        self.crqm_request = data.get(FIELD_CRQM_REQUEST)\n        if FIELD_BASIC_POSITION in data:\n            self.basic_position = BasicPosition()", "        if FIELD_BASIC_POSITION in data:\n            self.basic_position = BasicPosition()\n            self.basic_position.init_from_dict(data.get(FIELD_BASIC_POSITION))\n        if FIELD_NETWORK_INFO in data:\n            self.network_info = NetworkInfo()\n            self.network_info.init_from_dict(data.get(FIELD_NETWORK_INFO))\n        self.sim_info = data.get(FIELD_SIM_INFO)\n        if FIELD_HMI_LANGUAGE in data:\n            self.hmi_language = data.get(FIELD_HMI_LANGUAGE)\n        self.icc_id = data.get(FIELD_ICC_ID)", "            self.hmi_language = data.get(FIELD_HMI_LANGUAGE)\n        self.icc_id = data.get(FIELD_ICC_ID)\n\n\nclass MessageBodyV2(AbstractMessageBody):\n    def __init__(self):\n        super().__init__('MPDispatcherBody')\n        self.ul_message_counter = None\n        self.dl_message_counter = None\n        self.ack_message_counter = None", "        self.dl_message_counter = None\n        self.ack_message_counter = None\n\n    def get_data(self) -> dict:\n        data = super().get_data()\n        self.add_optional_field_to_data(data, FIELD_UL_MESSAGE_COUNTER, self.ul_message_counter)\n        self.add_optional_field_to_data(data, FIELD_DL_MESSAGE_COUNTER, self.dl_message_counter)\n        self.add_optional_field_to_data(data, FIELD_ACK_MESSAGE_COUNTER, self.ack_message_counter)\n        return data\n", "        return data\n\n    def init_from_dict(self, data: dict):\n        super().init_from_dict(data)\n        self.ul_message_counter = data.get(FIELD_UL_MESSAGE_COUNTER)\n        self.dl_message_counter = data.get(FIELD_DL_MESSAGE_COUNTER)\n        self.ack_message_counter = data.get(FIELD_ACK_MESSAGE_COUNTER)\n\n\nclass ApplicationData(Asn1Type):", "\nclass ApplicationData(Asn1Type):\n    def __init__(self, asn_type: str):\n        super().__init__(asn_type)\n\n\nclass AbstractMessage:\n    def __init__(self, header: Header, body: AbstractMessageBody, application_data: ApplicationData):\n        self.header = header\n        self.body = body", "        self.header = header\n        self.body = body\n        self.application_data = application_data\n\n    def get_version(self) -> str:\n        pass\n\n    def get_data(self) -> dict:\n        app_data = None\n        if (", "        app_data = None\n        if (\n                self.application_data is not None\n                and self.application_data.get_data()\n        ):\n            app_data = self.application_data.get_data()\n        return {\n            'applicationData': app_data,\n            'body': self.body.get_data(),\n            'header': self.header.get_data()", "            'body': self.body.get_data(),\n            'header': self.header.get_data()\n        }\n\n\nclass MessageV1(AbstractMessage):\n    def __init__(self, header: Header, body: MessageBodyV1, application_data: ApplicationData = None):\n        super().__init__(header, body, application_data)\n\n", "\n\nclass MessageV2(AbstractMessage):\n    def __init__(self, body: MessageBodyV2, application_data: ApplicationData = None,\n                 reserved: bytes = None):\n        super().__init__(Header(), body, application_data)\n        self.reserved = reserved\n\n\nclass AbstractMessageCoder:", "\nclass AbstractMessageCoder:\n    def __init__(self, asn_files_dir: str):\n        self.asn_files = []\n        self.asn_files_dir = pathlib.Path(__file__).parent / asn_files_dir\n        self.load_asn_files()\n\n    def load_asn_files(self):\n        for f in os.listdir(self.asn_files_dir):\n            if f.endswith('.asn1'):", "        for f in os.listdir(self.asn_files_dir):\n            if f.endswith('.asn1'):\n                self.asn_files.append(str(self.asn_files_dir) + '/' + f)\n\n    def encode_request(self, message: AbstractMessage) -> str:\n        pass\n\n    def decode_response(self, message: str, decoded_message: AbstractMessage) -> None:\n        pass\n", "        pass\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: AbstractMessage) -> None:\n        pass\n\n    def get_current_time(self) -> int:\n        return int(time.time())\n\n    def get_application_data_bytes(self, application_data: ApplicationData, asn1_tool: Specification) -> bytes:", "\n    def get_application_data_bytes(self, application_data: ApplicationData, asn1_tool: Specification) -> bytes:\n        if application_data is not None:\n            application_data_bytes = asn1_tool.encode(application_data.asn_type, application_data.get_data())\n        else:\n            application_data_bytes = bytes()\n        return application_data_bytes\n\n\nclass MessageCoderV1(AbstractMessageCoder):", "\nclass MessageCoderV1(AbstractMessageCoder):\n    def __init__(self, asn_files_dir: str):\n        super().__init__(asn_files_dir)\n        self.asn1_tool_uper = asn1tools.compile_files(self.asn_files, 'uper')\n        self.header_length = 4\n\n    def encode_request(self, message: MessageV1) -> str:\n        application_data_bytes = self.get_application_data_bytes(message.application_data, self.asn1_tool_uper)\n", "        application_data_bytes = self.get_application_data_bytes(message.application_data, self.asn1_tool_uper)\n\n        message_body = message.body\n        message_body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        message_body.application_data_length = len(application_data_bytes)\n\n        message_body_bytes = self.asn1_tool_uper.encode(message_body.asn_type, message_body.get_data())\n\n        message_header = message.header\n        if message_header.protocol_version is None:", "        message_header = message.header\n        if message_header.protocol_version is None:\n            raise ValueError('Protocol version in header missing')\n        message_header.security_context = 0\n        message_header.dispatcher_message_length = len(message_body_bytes) + self.header_length\n        message_header.dispatcher_body_encoding = DataEncodingType.PER_UNALIGNED\n\n        buffered_message_bytes = io.BytesIO()\n        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, \"little\"))\n        buffered_message_bytes.write(message_header.security_context.to_bytes(1, \"little\"))", "        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, \"little\"))\n        buffered_message_bytes.write(message_header.security_context.to_bytes(1, \"little\"))\n        buffered_message_bytes.write(message_header.dispatcher_message_length.to_bytes(1, \"little\"))\n        buffered_message_bytes.write(message_header.get_body_encoding_int_value().to_bytes(1, \"little\"))\n\n        buffered_message_bytes.write(message_body_bytes)\n\n        buffered_message_bytes.write(application_data_bytes)\n\n        message_bytes = buffered_message_bytes.getvalue()", "\n        message_bytes = buffered_message_bytes.getvalue()\n\n        length_hex = \"{:04x}\".format(len(message_bytes) * 2 + 5)\n        result = length_hex + \"1\" + message_bytes.hex()\n        return result.upper()\n\n    def decode_response(self, message: str, decoded_message: MessageV1) -> None:\n        buffered_message_bytes = io.BytesIO(bytes.fromhex(message[5:]))\n", "        buffered_message_bytes = io.BytesIO(bytes.fromhex(message[5:]))\n\n        header_bytes = buffered_message_bytes.read(self.header_length)\n        decoded_message.header.protocol_version = int(header_bytes[0])\n        decoded_message.header.security_context = int(header_bytes[1])\n        decoded_message.header.dispatcher_message_length = int(header_bytes[2])\n        decoded_message.header.dispatcher_body_encoding = int(header_bytes[3])\n\n        dispatcher_message_bytes = buffered_message_bytes.read(\n            decoded_message.header.dispatcher_message_length - self.header_length)", "        dispatcher_message_bytes = buffered_message_bytes.read(\n            decoded_message.header.dispatcher_message_length - self.header_length)\n        message_body = decoded_message.body\n        message_body_dict = self.asn1_tool_uper.decode(message_body.asn_type, dispatcher_message_bytes)\n        message_body.init_from_dict(message_body_dict)\n\n        if decoded_message.body.application_data_length > 0:\n            application_data_bytes = buffered_message_bytes.read(decoded_message.body.application_data_length)\n            application_data_dict = self.asn1_tool_uper.decode(decoded_message.application_data.asn_type,\n                                                               application_data_bytes)", "            application_data_dict = self.asn1_tool_uper.decode(decoded_message.application_data.asn_type,\n                                                               application_data_bytes)\n            decoded_message.application_data.init_from_dict(application_data_dict)\n        else:\n            decoded_message.application_data = None\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV1):\n        message_counter = MessageCounter()\n        message_counter.downlink_counter = 0", "        message_counter = MessageCounter()\n        message_counter.downlink_counter = 0\n        message_counter.uplink_counter = 1\n\n        body = message.body\n        body.message_counter = message_counter\n        body.message_id = message_id\n        body.icc_id = '12345678901234567890'\n        body.sim_info = '1234567890987654321'\n        body.event_creation_time = self.get_current_time()", "        body.sim_info = '1234567890987654321'\n        body.event_creation_time = self.get_current_time()\n        body.application_id = application_id\n        body.application_data_protocol_version = application_data_protocol_version\n        body.test_flag = 2\n        body.uid = uid\n        body.token = token\n        body.vin = vin\n        body.event_id = 0\n", "        body.event_id = 0\n\n\nclass MessageCoderV2(AbstractMessageCoder):\n    def __init__(self, asn_files_dir: str):\n        super().__init__(asn_files_dir)\n        self.asn1_tool_uper = asn1tools.compile_files(self.asn_files, 'uper')\n        self.header_length = 3\n        self.reserved_size = 16\n", "        self.reserved_size = 16\n\n    def encode_request(self, message: MessageV2) -> str:\n        application_data_bytes = self.get_application_data_bytes(message.application_data, self.asn1_tool_uper)\n\n        message_body = message.body\n        message_body.application_data_encoding = DataEncodingType.PER_UNALIGNED.value\n        message_body.application_data_length = len(application_data_bytes)\n\n        message_body_bytes = self.asn1_tool_uper.encode(message_body.asn_type, message_body.get_data())", "\n        message_body_bytes = self.asn1_tool_uper.encode(message_body.asn_type, message_body.get_data())\n\n        message_header = message.header\n        message_header.protocol_version = self.get_protocol_version()\n        message_header.dispatcher_message_length = len(message_body_bytes) + self.header_length\n        message_header.dispatcher_body_encoding = DataEncodingType.PER_UNALIGNED\n\n        buffered_message_bytes = io.BytesIO()\n        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, 'little'))", "        buffered_message_bytes = io.BytesIO()\n        buffered_message_bytes.write(message_header.protocol_version.to_bytes(1, 'little'))\n        buffered_message_bytes.write(message_header.dispatcher_message_length.to_bytes(1, 'little'))\n        buffered_message_bytes.write(message_header.get_body_encoding_int_value().to_bytes(1, 'little'))\n\n        buffered_message_bytes.write(message.reserved)\n\n        buffered_message_bytes.write(message_body_bytes)\n\n        buffered_message_bytes.write(application_data_bytes)", "\n        buffered_message_bytes.write(application_data_bytes)\n\n        message_bytes = buffered_message_bytes.getvalue()\n\n        length_hex = \"{:04x}\".format(len(message_bytes) + self.header_length)\n        result = \"1\" + length_hex + message_bytes.hex()\n        return result.upper()\n\n    def decode_response(self, message: str, decoded_message: MessageV2) -> None:", "\n    def decode_response(self, message: str, decoded_message: MessageV2) -> None:\n        buffered_message_bytes = io.BytesIO(bytes.fromhex(message[5:]))\n\n        header = decoded_message.header\n        header_bytes = buffered_message_bytes.read(self.header_length)\n        header.protocol_version = int(header_bytes[0])\n        header.dispatcher_message_length = int(header_bytes[1])\n        header.dispatcher_body_encoding = int(header_bytes[2])\n", "        header.dispatcher_body_encoding = int(header_bytes[2])\n\n        decoded_message.reserved = buffered_message_bytes.read(self.reserved_size)\n\n        dispatcher_message_bytes = buffered_message_bytes.read(header.dispatcher_message_length - self.header_length)\n        message_body_dict = self.asn1_tool_uper.decode('MPDispatcherBody', dispatcher_message_bytes)\n        message_body = decoded_message.body\n        message_body.init_from_dict(message_body_dict)\n        if(\n            message_body.application_data_length > 0", "        if(\n            message_body.application_data_length > 0\n            and decoded_message.application_data is not None\n        ):\n            application_data_bytes = buffered_message_bytes.read(message_body.application_data_length)\n            application_data_dict = self.asn1_tool_uper.decode(decoded_message.application_data.asn_type,\n                                                               application_data_bytes)\n            decoded_message.application_data.init_from_dict(application_data_dict)\n        else:\n            decoded_message.application_data = None", "        else:\n            decoded_message.application_data = None\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV2) -> None:\n        message.body.message_id = message_id\n        message.body.ul_message_counter = 0\n        message.body.dl_message_counter = 0\n        message.body.ack_message_counter = 0\n        message.body.event_creation_time = self.get_current_time()", "        message.body.ack_message_counter = 0\n        message.body.event_creation_time = self.get_current_time()\n        message.body.application_id = application_id\n        message.body.application_data_protocol_version = application_data_protocol_version\n        message.body.test_flag = 2\n        message.body.uid = uid\n        message.body.token = token\n        message.body.vin = vin\n        message.body.event_id = 0\n        message.body.result = 0", "        message.body.event_id = 0\n        message.body.result = 0\n\n        message.reserved = bytes(self.reserved_size)\n\n    def get_protocol_version(self) -> int:\n        pass\n\n\nclass DataEncodingType(Enum):", "\nclass DataEncodingType(Enum):\n    PER_UNALIGNED = 'perUnaligned'\n    DER = 'der'\n    BER = 'ber'\n\n\nclass MessageCounter(Asn1Type):\n    def __init__(self):\n        super().__init__('MessageCounter')", "    def __init__(self):\n        super().__init__('MessageCounter')\n        self.downlink_counter = None\n        self.uplink_counter = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_UPLINK_COUNTER: self.uplink_counter,\n            FIELD_DOWNLINK_COUNTER: self.downlink_counter\n        }", "            FIELD_DOWNLINK_COUNTER: self.downlink_counter\n        }\n\n    def init_from_dict(self, data: dict):\n        self.uplink_counter = data.get(FIELD_UPLINK_COUNTER)\n        self.downlink_counter = data.get(FIELD_DOWNLINK_COUNTER)\n\n\nclass BasicPosition(Asn1Type):\n    def __init__(self):", "class BasicPosition(Asn1Type):\n    def __init__(self):\n        super().__init__('BasicPosition')\n        self.latitude = None\n        self.longitude = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_LATITUDE: self.latitude,\n            FIELD_LONGITUDE: self.longitude", "            FIELD_LATITUDE: self.latitude,\n            FIELD_LONGITUDE: self.longitude\n        }\n\n    def init_from_dict(self, data: dict):\n        self.latitude = data.get(FIELD_LATITUDE)\n        self.longitude = data.get(FIELD_LONGITUDE)\n\n\nclass NetworkInfo(Asn1Type):", "\nclass NetworkInfo(Asn1Type):\n    def __init__(self):\n        super().__init__('NetworkInfo')\n        self.mcc_network = None\n        self.mnc_network = None\n        self.mcc_sim = None\n        self.mnc_sim = None\n        self.signal_strength = None\n", "        self.signal_strength = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_MCC_NETWORK: self.mcc_network,\n            FIELD_MNC_NETWORK: self.mnc_network,\n            FIELD_MCC_SIM: self.mcc_sim,\n            FIELD_MNC_SIM: self.mnc_sim,\n            FIELD_SIGNAL_STRENGTH: self.signal_strength\n        }", "            FIELD_SIGNAL_STRENGTH: self.signal_strength\n        }\n\n    def init_from_dict(self, data: dict):\n        self.mcc_network = data.get(FIELD_MCC_NETWORK)\n        self.mnc_network = data.get(FIELD_MNC_NETWORK)\n        self.mcc_sim = data.get(FIELD_MCC_SIM)\n        self.mnc_sim = data.get(FIELD_MNC_SIM)\n        self.signal_strength = data.get(FIELD_SIGNAL_STRENGTH)\n", "        self.signal_strength = data.get(FIELD_SIGNAL_STRENGTH)\n\n\nclass TargetBatteryCode(Enum):\n    P_40 = 1\n    P_50 = 2\n    P_60 = 3\n    P_70 = 4\n    P_80 = 5\n    P_90 = 6", "    P_80 = 5\n    P_90 = 6\n    P_100 = 7\n\n    def get_percentage(self) -> int:\n        match self:\n            case TargetBatteryCode.P_40:\n                return 40\n            case TargetBatteryCode.P_50:\n                return 50", "            case TargetBatteryCode.P_50:\n                return 50\n            case TargetBatteryCode.P_60:\n                return 60\n            case TargetBatteryCode.P_70:\n                return 70\n            case TargetBatteryCode.P_80:\n                return 80\n            case TargetBatteryCode.P_90:\n                return 90", "            case TargetBatteryCode.P_90:\n                return 90\n            case TargetBatteryCode.P_100:\n                return 100\n            case _:\n                raise ValueError(f'Unknown target battery code: {self}')\n\n    @staticmethod\n    def from_percentage(percentage: int):\n        match percentage:", "    def from_percentage(percentage: int):\n        match percentage:\n            case 40:\n                return TargetBatteryCode.P_40\n            case 50:\n                return TargetBatteryCode.P_50\n            case 60:\n                return TargetBatteryCode.P_60\n            case 70:\n                return TargetBatteryCode.P_70", "            case 70:\n                return TargetBatteryCode.P_70\n            case 80:\n                return TargetBatteryCode.P_80\n            case 90:\n                return TargetBatteryCode.P_90\n            case 100:\n                return TargetBatteryCode.P_100\n            case _:  # default\n                raise ValueError(f'Unknown target battery percentage: {percentage}')", "            case _:  # default\n                raise ValueError(f'Unknown target battery percentage: {percentage}')\n"]}
{"filename": "src/saic_ismart_client/message_decoder.py", "chunked_list": ["import argparse\nimport json\n\nfrom common_model import MessageV2, MessageBodyV2, Header\nfrom ota_v1_1.Message import MessageCoderV11\nfrom ota_v1_1.data_model import MessageV11, MessageBodyV11\nfrom ota_v2_1.Message import MessageCoderV21\nfrom ota_v2_1.data_model import OtaRvmVehicleStatusReq, OtaRvmVehicleStatusResp25857\nfrom ota_v3_0.Message import MessageV30, MessageBodyV30, MessageCoderV30\nfrom ota_v3_0.data_model import OtaChrgMangDataResp", "from ota_v3_0.Message import MessageV30, MessageBodyV30, MessageCoderV30\nfrom ota_v3_0.data_model import OtaChrgMangDataResp\n\n\ndef process_arguments():\n    parser = argparse.ArgumentParser(description='Decode your SAIC ASN.1 messages')\n    parser.add_argument('-m', '--message', help='ASN.1 message to decode', dest='message', required=True)\n    parser.add_argument('-t', '--type', help='Message type', choices=['request', 'response'], dest='message_type',\n                        required=True)\n    parser.add_argument('-v', '--message-version', help='Message version', choices=['V1', 'V2', 'V3'],\n                        dest='message_version', required=True)\n    return parser.parse_args()", "\n\ndef handle_message_v1(message_coder: MessageCoderV11, message: str, message_type: str,\n                      decoded_message: MessageV11) -> None:\n    application_id = decoded_message.body.application_id\n    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\n\ndef handle_message_v2(message_coder: MessageCoderV21, message: str, message_type: str,\n                      decoded_message: MessageV2) -> None:\n    application_id = decoded_message.body.application_id\n    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\n    if (\n            application_id == '511'\n            and application_data_protocol_version == 25857\n    ):\n        if message_type == 'request':\n            decoded_message.application_data = OtaRvmVehicleStatusReq()\n            message_coder.decode_response(message, decoded_message)\n        else:\n            decoded_message.application_data = OtaRvmVehicleStatusResp25857()\n            message_coder.decode_response(message, decoded_message)", "def handle_message_v2(message_coder: MessageCoderV21, message: str, message_type: str,\n                      decoded_message: MessageV2) -> None:\n    application_id = decoded_message.body.application_id\n    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\n    if (\n            application_id == '511'\n            and application_data_protocol_version == 25857\n    ):\n        if message_type == 'request':\n            decoded_message.application_data = OtaRvmVehicleStatusReq()\n            message_coder.decode_response(message, decoded_message)\n        else:\n            decoded_message.application_data = OtaRvmVehicleStatusResp25857()\n            message_coder.decode_response(message, decoded_message)", "\n\ndef handle_message_v3(message_coder: MessageCoderV30, message: str, message_type: str,\n                      decoded_message: MessageV30) -> None:\n    application_id = decoded_message.body.application_id\n    application_data_protocol_version = decoded_message.body.application_data_protocol_version\n\n    if (\n            application_id == '516'\n            and application_data_protocol_version == 768\n    ):\n        if message_type == 'request':\n            message_coder.decode_response(message, decoded_message)\n        else:\n            decoded_message.application_data = OtaChrgMangDataResp()\n            message_coder.decode_response(message, decoded_message)", "\n\ndef main():\n    args = process_arguments()\n    message = args.message\n    message_type = args.message_type\n    message_version = args.message_version.upper()\n    decoded_message = None\n\n    if message_version == 'V1':\n        message_v1_1_coder = MessageCoderV11()\n        decoded_message = MessageV11(Header(), MessageBodyV11())\n        message_v1_1_coder.decode_response(message, decoded_message)\n        handle_message_v1(message_v1_1_coder, message, message_type, decoded_message)\n    elif message_version == 'V2':\n        message_v2_1_coder = MessageCoderV21()\n        decoded_message = MessageV2(MessageBodyV2())\n        message_v2_1_coder.decode_response(message, decoded_message)\n        handle_message_v2(message_v2_1_coder, message, message_type, decoded_message)\n    elif message_version == 'V3':\n        message_v3_0_coder = MessageCoderV30()\n        decoded_message = MessageV30(MessageBodyV30())\n        message_v3_0_coder.decode_response(message, decoded_message)\n        handle_message_v3(message_v3_0_coder, message, message_type, decoded_message)\n\n    if decoded_message:\n        json_object = json.dumps(decoded_message.get_data(), indent=4)\n        print(json_object)\n    else:\n        print('No decoded message')", "\n\nif __name__ == '__main__':\n    main()\n"]}
{"filename": "src/saic_ismart_client/exceptions.py", "chunked_list": ["class SaicApiException(Exception):\n    def __init__(self, msg: str, return_code: int = None):\n        if return_code is not None:\n            self.message = f'return code: {return_code}, message: {msg}'\n        else:\n            self.message = msg\n\n    def __str__(self):\n        return self.message\n", ""]}
{"filename": "src/saic_ismart_client/ota_v2_1/Message.py", "chunked_list": ["from saic_ismart_client.common_model import MessageCoderV2, MessageV2\n\n\nclass MessageCoderV21(MessageCoderV2):\n    def __init__(self):\n        super().__init__('ASN.1_schema/v2_1/')\n\n    def encode_request(self, message: MessageV2) -> str:\n        return super().encode_request(message)\n\n    def decode_response(self, message: str, decoded_message: MessageV2) -> None:\n        return super().decode_response(message, decoded_message)\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV2) -> None:\n        return super().initialize_message(uid, token, vin, application_id, application_data_protocol_version,\n                                          message_id, message)\n\n    def get_protocol_version(self) -> int:\n        return 33", ""]}
{"filename": "src/saic_ismart_client/ota_v2_1/__init__.py", "chunked_list": [""]}
{"filename": "src/saic_ismart_client/ota_v2_1/data_model.py", "chunked_list": ["from typing import cast\n\nfrom saic_ismart_client.common_model import Asn1Type, ApplicationData\n\nFIELD_FAILURE_TYPE = 'failureType'\nFIELD_RVC_REQ_STS = 'rvcReqSts'\nFIELD_VALUE = 'value'\nFIELD_ID = 'id'\nFIELD_VEHICLE_ALERTS = 'vehicleAlerts'\nFIELD_SECONDS = 'seconds'", "FIELD_VEHICLE_ALERTS = 'vehicleAlerts'\nFIELD_SECONDS = 'seconds'\nFIELD_ALTITUDE = 'altitude'\nFIELD_LONGITUDE = 'longitude'\nFIELD_LATITUDE = 'latitude'\nFIELD_SATELLITES = 'satellites'\nFIELD_HDOP = 'hdop'\nFIELD_SPEED = 'speed'\nFIELD_HEADING = 'heading'\nFIELD_POSITION = 'position'", "FIELD_HEADING = 'heading'\nFIELD_POSITION = 'position'\nFIELD_GPS_STATUS = 'gpsStatus'\nFIELD_TIMESTAMP_4_SHORT = 'timestamp4Short'\nFIELD_WAY_POINT = 'wayPoint'\nFIELD_EXTENDED_VEHICLE_STATUS = 'extendedVehicleStatus'\nFIELD_BASIC_VEHICLE_STATUS = 'basicVehicleStatus'\nFIELD_GPS_POSITION = 'gpsPosition'\nFIELD_STATUS_TIME = 'statusTime'\nFIELD_PARAM_VALUE = 'paramValue'", "FIELD_STATUS_TIME = 'statusTime'\nFIELD_PARAM_VALUE = 'paramValue'\nFIELD_PARAM_ID = 'paramId'\nFIELD_RVC_PARAMS = 'rvcParams'\nFIELD_RVC_REQ_TYPE = 'rvcReqType'\nFIELD_VEH_STATUS_REQ_TYPE = 'vehStatusReqType'\n\n\nclass OtaRvmVehicleStatusReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTARVMVehicleStatusReq')\n        self.veh_status_req_type = None\n\n    def get_data(self) -> dict:\n        return {FIELD_VEH_STATUS_REQ_TYPE: self.veh_status_req_type}\n\n    def init_from_dict(self, data: dict):\n        self.veh_status_req_type = data.get(FIELD_VEH_STATUS_REQ_TYPE)", "class OtaRvmVehicleStatusReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTARVMVehicleStatusReq')\n        self.veh_status_req_type = None\n\n    def get_data(self) -> dict:\n        return {FIELD_VEH_STATUS_REQ_TYPE: self.veh_status_req_type}\n\n    def init_from_dict(self, data: dict):\n        self.veh_status_req_type = data.get(FIELD_VEH_STATUS_REQ_TYPE)", "\n\nclass RvsWgs84Point(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsWGS84Point')\n        self.latitude = None\n        self.longitude = None\n        self.altitude = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_LATITUDE: self.latitude,\n            FIELD_LONGITUDE: self.longitude,\n            FIELD_ALTITUDE: self.altitude\n        }\n\n    def init_from_dict(self, data: dict):\n        self.latitude = data.get(FIELD_LATITUDE)\n        self.longitude = data.get(FIELD_LONGITUDE)\n        self.altitude = data.get(FIELD_ALTITUDE)", "\n\nclass RvsWayPoint(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsWayPoint')\n        self.position = None\n        self.heading = None\n        self.speed = None\n        self.hdop = None\n        self.satellites = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_POSITION: self.position.get_data(),\n            FIELD_HEADING: self.heading,\n            FIELD_SPEED: self.speed,\n            FIELD_HDOP: self.hdop,\n            FIELD_SATELLITES: self.satellites\n        }\n\n    def init_from_dict(self, data: dict):\n        self.position = RvsWgs84Point()\n        self.position.init_from_dict(data.get(FIELD_POSITION))\n        self.heading = data.get(FIELD_HEADING)\n        self.speed = data.get(FIELD_SPEED)\n        self.hdop = data.get(FIELD_HDOP)\n        self.satellites = data.get(FIELD_SATELLITES)\n\n    def get_position(self) -> RvsWgs84Point:\n        return cast(RvsWgs84Point, self.position)", "\n\nclass RvsPosition(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsPosition')\n        self.way_point = None\n        self.timestamp_4_short = None\n        self.gps_status = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_WAY_POINT: self.way_point.get_data(),\n            FIELD_TIMESTAMP_4_SHORT: self.timestamp_4_short.get_data(),\n            FIELD_GPS_STATUS: self.gps_status\n        }\n\n    def init_from_dict(self, data: dict):\n        self.way_point = RvsWayPoint()\n        self.way_point.init_from_dict(data.get(FIELD_WAY_POINT))\n        self.timestamp_4_short = Timestamp4Short()\n        self.timestamp_4_short.init_from_dict(data.get(FIELD_TIMESTAMP_4_SHORT))\n        self.gps_status = data.get(FIELD_GPS_STATUS)\n\n    def get_way_point(self) -> RvsWayPoint:\n        return cast(RvsWayPoint, self.way_point)", "\n\nclass Timestamp4Short(Asn1Type):\n    def __init__(self):\n        super().__init__('Timestamp4Short')\n        self.seconds = None\n        \n    def get_data(self) -> dict:\n        return {\n            FIELD_SECONDS: self.seconds\n        }\n    \n    def init_from_dict(self, data: dict):\n        self.seconds = data.get(FIELD_SECONDS)", "        \n\nclass RvsBasicStatus25857(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsBasicStatus25857')\n        self.driver_door = None  # BOOLEAN\n        self.passenger_door = None  # BOOLEAN\n        self.rear_left_door = None  # BOOLEAN\n        self.rear_right_door = None  # BOOLEAN\n        self.boot_status = None  # BOOLEAN\n        self.bonnet_status = None  # BOOLEAN\n        self.lock_status = None  # BOOLEAN\n        self.driver_window = None  # BOOLEAN OPTIONAL\n        self.passenger_window = None  # BOOLEAN OPTIONAL,\n        self.rear_left_window = None  # BOOLEAN OPTIONAL,\n        self.rear_right_window = None  # BOOLEAN OPTIONAL,\n        self.sun_roof_status = None  # BOOLEAN OPTIONAL,\n        self.front_right_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n        self.front_left_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n        self.rear_right_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n        self.rear_left_tyre_pressure = None  # INTEGER(0..255) OPTIONAL,\n        self.wheel_tyre_monitor_status = None  # INTEGER(0..255) OPTIONAL,\n        self.side_light_status = None  # BOOLEAN,\n        self.dipped_beam_status = None  # BOOLEAN,\n        self.main_beam_status = None  # BOOLEAN,\n        self.vehicle_alarm_status = None  # INTEGER(0..255) OPTIONAL,\n        self.engine_status = None  # INTEGER(0..255),\n        self.power_mode = None  # INTEGER(0..255),\n        self.last_key_seen = None  # INTEGER(0..65535),\n        self.current_journey_distance = None  # INTEGER(0..65535),\n        self.current_journey_id = None  # INTEGER(0..2147483647),\n        self.interior_temperature = None  # INTEGER(-128..127),\n        self.exterior_temperature = None  # INTEGER(-128..127),\n        self.fuel_level_prc = None  # INTEGER(0..255),\n        self.fuel_range = None  # INTEGER(0..65535),\n        self.remote_climate_status = None  # INTEGER(0..255),\n        self.front_left_seat_heat_level = None  # INTEGER(0..255) OPTIONAL,\n        self.front_right_seat_heat_level = None  # INTEGER(0..255) OPTIONAL,\n        self.can_bus_active = None  # BOOLEAN,\n        self.time_of_last_canbus_activity = None  # INTEGER(0..2147483647),\n        self.clstr_dspd_fuel_lvl_sgmt = None  # INTEGER(0..255),\n        self.mileage = None  # INTEGER(0..2147483647),\n        self.battery_voltage = None  # INTEGER(0..65535),\n        self.hand_brake = None  # BOOLEAN,\n        self.veh_elec_rng_dsp = None  # INTEGER(0..255),\n        self.fuel_range_elec = None  # INTEGER(0..65535) OPTIONAL,\n        self.rmt_htd_rr_wnd_st = None  # INTEGER(0..255),\n        self.extended_data1 = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.extended_data2 = None  # INTEGER(0..2147483647) OPTIONAL\n\n    def get_data(self) -> dict:\n        data = {\n            'driverDoor': self.driver_door,\n            'passengerDoor': self.passenger_door,\n            'rearLeftDoor': self.rear_left_door,\n            'rearRightDoor': self.rear_right_door,\n            'bootStatus': self.boot_status,\n            'bonnetStatus': self.bonnet_status,\n            'lockStatus': self.lock_status,\n            'sideLightStatus': self.side_light_status,\n            'dippedBeamStatus': self.dipped_beam_status,\n            'mainBeamStatus': self.main_beam_status,\n            'engineStatus': self.engine_status,\n            'powerMode': self.power_mode,\n            'lastKeySeen': self.last_key_seen,\n            'currentjourneyDistance': self.current_journey_distance,\n            'currentJourneyID': self.current_journey_id,\n            'interiorTemperature': self.interior_temperature,\n            'exteriorTemperature': self.exterior_temperature,\n            'fuelLevelPrc': self.fuel_level_prc,\n            'fuelRange': self.fuel_range,\n            'remoteClimateStatus': self.remote_climate_status,\n            'canBusActive': self.can_bus_active,\n            'timeOfLastCANBUSActivity': self.time_of_last_canbus_activity,\n            'clstrDspdFuelLvlSgmt': self.clstr_dspd_fuel_lvl_sgmt,\n            'mileage': self.mileage,\n            'batteryVoltage': self.battery_voltage,\n            'handBrake': self.hand_brake,\n            'vehElecRngDsp': self.veh_elec_rng_dsp,\n            'rmtHtdRrWndSt': self.rmt_htd_rr_wnd_st\n        }\n        self.add_optional_field_to_data(data, 'driverWindow', self.driver_window)\n        self.add_optional_field_to_data(data, 'passengerWindow', self.passenger_window)\n        self.add_optional_field_to_data(data, 'rearLeftWindow', self.rear_left_window)\n        self.add_optional_field_to_data(data, 'rearRightWindow', self.rear_right_window)\n        self.add_optional_field_to_data(data, 'sunroofStatus', self.sun_roof_status)\n        self.add_optional_field_to_data(data, 'frontRrightTyrePressure', self.front_right_tyre_pressure)\n        self.add_optional_field_to_data(data, 'frontLeftTyrePressure', self.front_left_tyre_pressure)\n        self.add_optional_field_to_data(data, 'rearRightTyrePressure', self.rear_right_tyre_pressure)\n        self.add_optional_field_to_data(data, 'rearLeftTyrePressure', self.rear_left_tyre_pressure)\n        self.add_optional_field_to_data(data, 'wheelTyreMonitorStatus', self.wheel_tyre_monitor_status)\n        self.add_optional_field_to_data(data, 'vehicleAlarmStatus', self.vehicle_alarm_status)\n        self.add_optional_field_to_data(data, 'frontLeftSeatHeatLevel', self.front_left_seat_heat_level)\n        self.add_optional_field_to_data(data, 'frontRightSeatHeatLevel', self.front_right_seat_heat_level)\n        self.add_optional_field_to_data(data, 'fuelRangeElec', self.fuel_range_elec)\n        self.add_optional_field_to_data(data, 'extendedData1', self.extended_data1)\n        self.add_optional_field_to_data(data, 'extendedData2', self.extended_data2)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.driver_door = data.get('driverDoor')\n        self.passenger_door = data.get('passengerDoor')\n        self.rear_left_door = data.get('rearLeftDoor')\n        self.rear_right_door = data.get('rearRightDoor')\n        self.boot_status = data.get('bootStatus')\n        self.bonnet_status = data.get('bonnetStatus')\n        self.lock_status = data.get('lockStatus')\n        self.side_light_status = data.get('sideLightStatus')\n        self.dipped_beam_status = data.get('dippedBeamStatus')\n        self.main_beam_status = data.get('mainBeamStatus')\n        self.engine_status = data.get('engineStatus')\n        self.power_mode = data.get('powerMode')\n        self.last_key_seen = data.get('lastKeySeen')\n        self.current_journey_distance = data.get('currentjourneyDistance')\n        self.current_journey_id = data.get('currentJourneyID')\n        self.interior_temperature = data.get('interiorTemperature')\n        self.exterior_temperature = data.get('exteriorTemperature')\n        self.fuel_level_prc = data.get('fuelLevelPrc')\n        self.fuel_range = data.get('fuelRange')\n        self.remote_climate_status = data.get('remoteClimateStatus')\n        self.can_bus_active = data.get('canBusActive')\n        self.time_of_last_canbus_activity = data.get('timeOfLastCANBUSActivity')\n        self.clstr_dspd_fuel_lvl_sgmt = data.get('clstrDspdFuelLvlSgmt')\n        self.mileage = data.get('mileage')\n        self.battery_voltage = data.get('batteryVoltage')\n        self.hand_brake = data.get('handBrake')\n        self.veh_elec_rng_dsp = data.get('vehElecRngDsp')\n        self.rmt_htd_rr_wnd_st = data.get('rmtHtdRrWndSt')\n        self.driver_window = data.get('driverWindow')\n        self.passenger_window = data.get('passengerWindow')\n        self.rear_left_window = data.get('rearLeftWindow')\n        self.rear_right_window = data.get('rearRightWindow')\n        self.sun_roof_status = data.get('sunroofStatus')\n        self.front_right_tyre_pressure = data.get('frontRrightTyrePressure')\n        self.front_left_tyre_pressure = data.get('frontLeftTyrePressure')\n        self.rear_right_tyre_pressure = data.get('rearRightTyrePressure')\n        self.rear_left_tyre_pressure = data.get('rearLeftTyrePressure')\n        self.wheel_tyre_monitor_status = data.get('wheelTyreMonitorStatus')\n        self.vehicle_alarm_status = data.get('vehicleAlarmStatus')\n        self.front_left_seat_heat_level = data.get('frontLeftSeatHeatLevel')\n        self.front_right_seat_heat_level = data.get('frontRightSeatHeatLevel')\n        self.fuel_range_elec = data.get('fuelRangeElec')\n        self.extended_data1 = data.get('extendedData1')\n        self.extended_data2 = data.get('extendedData2')\n\n    def extended_data_2_present(self) -> bool:\n        return self.extended_data2 is not None", "\n\nclass RvsExtStatus(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsExtStatus')\n        self.vehicle_alerts = []\n\n    def get_data(self) -> dict:\n        vehicle_alerts = []\n        for alert in self.vehicle_alerts:\n            vehicle_alerts.append(alert.get_data())\n        return {\n            FIELD_VEHICLE_ALERTS: vehicle_alerts\n        }\n\n    def init_from_dict(self, data: dict):\n        vehicle_alerts = data.get(FIELD_VEHICLE_ALERTS)\n        for alert in vehicle_alerts:\n            a = VehicleAlertInfo()\n            a.init_from_dict(alert)\n            self.vehicle_alerts.append(a)", "\n\nclass VehicleAlertInfo(Asn1Type):\n    def __init__(self):\n        super().__init__('VehicleAlertInfo')\n        self.id = None\n        self.value = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_ID: self.id,\n            FIELD_VALUE: self.value\n        }\n\n    def init_from_dict(self, data: dict):\n        self.id = data.get(FIELD_ID)\n        self.value = data.get(FIELD_VALUE)", "\n\nclass OtaRvcReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTARVCReq')\n        self.rvc_req_type = None\n        self.rvc_params = []\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_RVC_REQ_TYPE: self.rvc_req_type\n        }\n        param_list = []\n        for param in self.rvc_params:\n            param_list.append(param.get_data())\n        data[FIELD_RVC_PARAMS] = param_list\n\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.rvc_req_type = data.get(FIELD_RVC_REQ_TYPE)\n        if FIELD_RVC_PARAMS in data:\n            rvc_params_list = data.get(FIELD_RVC_PARAMS)\n            for item in rvc_params_list:\n                param = RvcReqParam()\n                param.init_from_dict(item)\n                self.rvc_params.append(param)", "\n\nclass RvcReqParam(Asn1Type):\n    def __init__(self):\n        super().__init__('RvcReqParam')\n        self.param_id = None\n        self.param_value = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_PARAM_ID: self.param_id,\n            FIELD_PARAM_VALUE: self.param_value\n        }\n\n    def init_from_dict(self, data: dict):\n        self.param_id = data.get(FIELD_PARAM_ID)\n        self.param_value = data.get(FIELD_PARAM_VALUE)", "\n\nclass OtaRvmVehicleStatusResp25857(ApplicationData):\n    def __init__(self):\n        super().__init__('OTARVMVehicleStatusResp25857')\n        self.status_time = None\n        self.gps_position = None\n        self.basic_vehicle_status = None\n        self.extended_vehicle_status = None\n\n    def get_data(self) -> dict:\n        if (\n                self.status_time is not None\n                and self.gps_position is not None\n                and self.basic_vehicle_status is not None\n        ):\n            data = {\n                FIELD_STATUS_TIME: self.status_time,\n                FIELD_GPS_POSITION: self.gps_position.get_data(),\n                FIELD_BASIC_VEHICLE_STATUS: self.basic_vehicle_status.get_data()\n            }\n            if FIELD_EXTENDED_VEHICLE_STATUS in data:\n                data[FIELD_EXTENDED_VEHICLE_STATUS] = self.extended_vehicle_status.get_data()\n            return data\n        else:\n            return {}\n\n    def init_from_dict(self, data: dict):\n        self.status_time = data.get(FIELD_STATUS_TIME)\n        self.gps_position = RvsPosition()\n        self.gps_position.init_from_dict(data.get(FIELD_GPS_POSITION))\n        self.basic_vehicle_status = RvsBasicStatus25857()\n        self.basic_vehicle_status.init_from_dict(data.get(FIELD_BASIC_VEHICLE_STATUS))\n        if FIELD_EXTENDED_VEHICLE_STATUS in data:\n            self.extended_vehicle_status = RvsExtStatus()\n            self.extended_vehicle_status.init_from_dict(data.get(FIELD_EXTENDED_VEHICLE_STATUS))\n\n    def get_basic_vehicle_status(self) -> RvsBasicStatus25857:\n        return cast(RvsBasicStatus25857, self.basic_vehicle_status)\n\n    def get_gps_position(self) -> RvsPosition:\n        return cast(RvsPosition, self.gps_position)\n\n    def is_charging(self) -> bool:\n        return (\n                self.get_basic_vehicle_status().extended_data_2_present()\n                and self.get_basic_vehicle_status().extended_data2 >= 1\n        )\n\n    def is_parked(self) -> bool:\n        return (\n                self.get_basic_vehicle_status().engine_status != 1\n                or self.get_basic_vehicle_status().hand_brake\n        )\n\n    def is_engine_running(self) -> bool:\n        return self.get_basic_vehicle_status().engine_status == 1", "\n\nclass OtaRvcStatus25857(ApplicationData):\n    def __init__(self):\n        super().__init__('OTARVCStatus25857')\n        self.rvcReqType = None  # OCTET STRING(SIZE(1)),\n        self.rvcReqSts = None  # OCTET STRING(SIZE(1)),\n        self.failureType = None  # INTEGER(0..255) OPTIONAL,\n        self.gpsPosition = None  # RvsPosition(1),\n        self.basicVehicleStatus = None  # RvsBasicStatus25857(1)\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_RVC_REQ_TYPE: self.rvcReqType,\n            FIELD_RVC_REQ_STS: self.rvcReqSts,\n            FIELD_GPS_POSITION: self.gpsPosition.get_data(),\n            FIELD_BASIC_VEHICLE_STATUS: self.basicVehicleStatus.get_data()\n        }\n        self.add_optional_field_to_data(data, FIELD_FAILURE_TYPE, self.failureType)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.rvcReqType = data.get(FIELD_RVC_REQ_TYPE)\n        self.rvcReqSts = data.get(FIELD_RVC_REQ_STS)\n        self.gpsPosition = RvsPosition()\n        self.gpsPosition.init_from_dict(data.get(FIELD_GPS_POSITION))\n        self.basicVehicleStatus = RvsBasicStatus25857()\n        self.basicVehicleStatus.init_from_dict(data.get(FIELD_BASIC_VEHICLE_STATUS))\n        if FIELD_FAILURE_TYPE in data:\n            self.failureType = data.get(FIELD_FAILURE_TYPE)", ""]}
{"filename": "src/saic_ismart_client/ota_v3_0/Message.py", "chunked_list": ["from saic_ismart_client.common_model import ApplicationData, MessageV2, MessageCoderV2, MessageBodyV2\n\n\nclass MessageBodyV30(MessageBodyV2):\n    def __init__(self):\n        super().__init__()\n\n    def ack_message_counter_present(self) -> bool:\n        return self.ack_message_counter is not None\n\n    def ack_required_present(self) -> bool:\n        return self.ack_required is not None\n\n    def application_data_encoding_present(self) -> bool:\n        return self.application_data_encoding is not None\n\n    def application_data_length_present(self) -> bool:\n        return self.application_data_length is not None\n\n    def application_data_protocol_version_present(self) -> bool:\n        return self.application_data_protocol_version is not None\n\n    def dl_message_counter_present(self) -> bool:\n        return self.dl_message_counter is not None\n\n    def ul_message_counter_present(self) -> bool:\n        return self.ul_message_counter is not None\n\n    def error_message_present(self) -> bool:\n        return self.error_message is not None\n\n    def event_id_present(self) -> bool:\n        return self.event_id is not None\n\n    def test_flag_present(self) -> bool:\n        return self.test_flag is not None\n\n    def token_present(self) -> bool:\n        return self.token is not None\n\n    def uid_present(self) -> bool:\n        return self.uid is not None\n\n    def vin_present(self) -> bool:\n        return self.vin is not None", "\n\nclass MessageV30(MessageV2):\n    def __init__(self, body: MessageBodyV30, application_data: ApplicationData = None,\n                 reserved: bytes = None):\n        super().__init__(body, application_data, reserved)\n\n\nclass MessageCoderV30(MessageCoderV2):\n    def __init__(self):\n        super().__init__('ASN.1_schema/v3_0/')\n\n    def encode_request(self, message: MessageV30) -> str:\n        return super().encode_request(message)\n\n    def decode_response(self, message: str, decoded_message: MessageV30) -> None:\n        super().decode_response(message, decoded_message)\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV30) -> None:\n        return super().initialize_message(uid, token, vin, application_id, application_data_protocol_version,\n                                          message_id, message)\n\n    def get_protocol_version(self) -> int:\n        return 48", "class MessageCoderV30(MessageCoderV2):\n    def __init__(self):\n        super().__init__('ASN.1_schema/v3_0/')\n\n    def encode_request(self, message: MessageV30) -> str:\n        return super().encode_request(message)\n\n    def decode_response(self, message: str, decoded_message: MessageV30) -> None:\n        super().decode_response(message, decoded_message)\n\n    def initialize_message(self, uid: str, token: str, vin: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV30) -> None:\n        return super().initialize_message(uid, token, vin, application_id, application_data_protocol_version,\n                                          message_id, message)\n\n    def get_protocol_version(self) -> int:\n        return 48", ""]}
{"filename": "src/saic_ismart_client/ota_v3_0/__init__.py", "chunked_list": [""]}
{"filename": "src/saic_ismart_client/ota_v3_0/data_model.py", "chunked_list": ["from saic_ismart_client.common_model import ApplicationData, Asn1Type, TargetBatteryCode\n\n\nclass OtaChrgMangDataResp(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgMangDataResp')\n        self.bmsReserCtrlDspCmd = None  # INTEGER(0..255),\n        self.bmsReserStHourDspCmd = None  # INTEGER(0..255),\n        self.bmsReserStMintueDspCmd = None  # INTEGER(0..255),\n        self.bmsReserSpHourDspCmd = None  # INTEGER(0..255),\n        self.bmsReserSpMintueDspCmd = None  # INTEGER(0..255),\n        self.bmsOnBdChrgTrgtSOCDspCmd = None  # INTEGER(0..255),\n        self.bms_estd_elec_rng = None  # INTEGER(0..65535),\n        self.bmsAltngChrgCrntDspCmd = None  # INTEGER(0..255),\n        self.bmsChrgCtrlDspCmd = None  # INTEGER(0..255),\n        self.chrgngRmnngTime = None  # INTEGER(0..65535),\n        self.chrgngRmnngTimeV = None  # INTEGER(0..255),\n        self.bmsChrgOtptCrntReq = None  # INTEGER(0..65535),\n        self.bmsChrgOtptCrntReqV = None  # INTEGER(0..255) OPTIONAL,\n        self.bmsPackCrnt = None  # INTEGER(0..65535),\n        self.bmsPackCrntV = None  # INTEGER(0..255) OPTIONAL,\n        self.bmsPackVol = None  # INTEGER(0..65535),\n        self.bmsPackSOCDsp = None  # INTEGER(0..65535),\n        self.bmsChrgSts = None  # INTEGER(0..255),\n        self.bmsChrgSpRsn = None  # INTEGER(0..255),\n        self.clstrElecRngToEPT = None  # INTEGER(0..65535),\n        self.bmsPTCHeatReqDspCmd = None  # INTEGER(0..255),\n        self.bmsPTCHeatResp = None  # INTEGER(0..255) OPTIONAL,\n        self.ccuEleccLckCtrlDspCmd = None  # INTEGER(0..255) OPTIONAL,\n        self.bmsPTCHeatSpRsn = None  # INTEGER(0..255) OPTIONAL,\n        self.bmsDsChrgSpRsn = None  # INTEGER(0..255) OPTIONAL,\n        self.disChrgngRmnngTime = None  # INTEGER(0..65535) OPTIONAL,\n        self.disChrgngRmnngTimeV = None  # INTEGER(0..255) OPTIONAL,\n        self.imcuVehElecRng = None  # INTEGER(0..65535) OPTIONAL,\n        self.imcuVehElecRngV = None  # INTEGER(0..255) OPTIONAL,\n        self.imcuChrgngEstdElecRng = None  # INTEGER(0..65535) OPTIONAL,\n        self.imcuChrgngEstdElecRngV = None  # INTEGER(0..255) OPTIONAL,\n        self.imcuDschrgngEstdElecRng = None  # INTEGER(0..65535) OPTIONAL,\n        self.imcuDschrgngEstdElecRngV = None  # INTEGER(0..255) OPTIONAL,\n        self.chrgngSpdngTime = None  # INTEGER(0..65535) OPTIONAL,\n        self.chrgngSpdngTimeV = None  # INTEGER(0..255) OPTIONAL,\n        self.chrgngAddedElecRng = None  # INTEGER(0..65535) OPTIONAL,\n        self.chrgngAddedElecRngV = None  # INTEGER(0..255) OPTIONAL,\n        self.onBdChrgrAltrCrntInptCrnt = None  # INTEGER(0..255) OPTIONAL,\n        self.onBdChrgrAltrCrntInptVol = None  # INTEGER(0..255) OPTIONAL,\n        self.ccuOnbdChrgrPlugOn = None  # INTEGER(0..255) OPTIONAL,\n        self.ccuOffBdChrgrPlugOn = None  # INTEGER(0..255) OPTIONAL,\n        self.chrgngDoorPosSts = None  # INTEGER(0..255) OPTIONAL,\n        self.chrgngDoorOpenCnd = None  # INTEGER(0..255) OPTIONAL,\n        self.chargeStatus = None  # RvsChargingStatus(1),\n        self.bmsAdpPubChrgSttnDspCmd = None  # INTEGER(0..255)\n\n    def get_data(self) -> dict:\n        data = {\n            'bmsReserCtrlDspCmd': self.bmsReserCtrlDspCmd,\n            'bmsReserStHourDspCmd': self.bmsReserStHourDspCmd,\n            'bmsReserStMintueDspCmd': self.bmsReserStMintueDspCmd,\n            'bmsReserSpHourDspCmd': self.bmsReserSpHourDspCmd,\n            'bmsReserSpMintueDspCmd': self.bmsReserSpMintueDspCmd,\n            'bmsOnBdChrgTrgtSOCDspCmd': self.bmsOnBdChrgTrgtSOCDspCmd,\n            'bmsEstdElecRng': self.bms_estd_elec_rng,\n            'bmsAltngChrgCrntDspCmd': self.bmsAltngChrgCrntDspCmd,\n            'bmsChrgCtrlDspCmd': self.bmsChrgCtrlDspCmd,\n            'chrgngRmnngTime': self.chrgngRmnngTime,\n            'chrgngRmnngTimeV': self.chrgngRmnngTimeV,\n            'bmsChrgOtptCrntReq': self.bmsChrgOtptCrntReq,\n            'bmsPackCrnt': self.bmsPackCrnt,\n            'bmsPackVol': self.bmsPackVol,\n            'bmsPackSOCDsp': self.bmsPackSOCDsp,\n            'bmsChrgSts': self.bmsChrgSts,\n            'bmsChrgSpRsn': self.bmsChrgSpRsn,\n            'clstrElecRngToEPT': self.clstrElecRngToEPT,\n            'bmsPTCHeatReqDspCmd': self.bmsPTCHeatReqDspCmd,\n            'chargeStatus': self.chargeStatus.get_data(),\n            'bmsAdpPubChrgSttnDspCmd': self.bmsAdpPubChrgSttnDspCmd\n        }\n        self.add_optional_field_to_data(data, 'bmsChrgOtptCrntReqV', self.bmsChrgOtptCrntReqV)\n        self.add_optional_field_to_data(data, 'bmsPackCrntV', self.bmsPackCrntV)\n        self.add_optional_field_to_data(data, 'bmsPTCHeatResp', self.bmsPTCHeatResp)\n        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlDspCmd', self.ccuEleccLckCtrlDspCmd)\n        self.add_optional_field_to_data(data, 'bmsPTCHeatSpRsn', self.bmsPTCHeatSpRsn)\n        self.add_optional_field_to_data(data, 'bmsDsChrgSpRsn', self.bmsDsChrgSpRsn)\n        self.add_optional_field_to_data(data, 'disChrgngRmnngTime', self.disChrgngRmnngTime)\n        self.add_optional_field_to_data(data, 'disChrgngRmnngTimeV', self.disChrgngRmnngTimeV)\n        self.add_optional_field_to_data(data, 'imcuVehElecRng', self.imcuVehElecRng)\n        self.add_optional_field_to_data(data, 'imcuVehElecRngV', self.imcuVehElecRngV)\n        self.add_optional_field_to_data(data, 'imcuChrgngEstdElecRng', self.imcuChrgngEstdElecRng)\n        self.add_optional_field_to_data(data, 'imcuChrgngEstdElecRngV', self.imcuChrgngEstdElecRngV)\n        self.add_optional_field_to_data(data, 'imcuDschrgngEstdElecRng', self.imcuDschrgngEstdElecRng)\n        self.add_optional_field_to_data(data, 'imcuDschrgngEstdElecRngV', self.imcuDschrgngEstdElecRngV)\n        self.add_optional_field_to_data(data, 'chrgngSpdngTime', self.chrgngSpdngTime)\n        self.add_optional_field_to_data(data, 'chrgngSpdngTimeV', self.chrgngSpdngTimeV)\n        self.add_optional_field_to_data(data, 'chrgngAddedElecRng', self.chrgngAddedElecRng)\n        self.add_optional_field_to_data(data, 'chrgngAddedElecRngV', self.chrgngAddedElecRngV)\n        self.add_optional_field_to_data(data, 'onBdChrgrAltrCrntInptCrnt', self.onBdChrgrAltrCrntInptCrnt)\n        self.add_optional_field_to_data(data, 'onBdChrgrAltrCrntInptVol', self.onBdChrgrAltrCrntInptVol)\n        self.add_optional_field_to_data(data, 'ccuOnbdChrgrPlugOn', self.ccuOnbdChrgrPlugOn)\n        self.add_optional_field_to_data(data, 'ccuOffBdChrgrPlugOn', self.ccuOffBdChrgrPlugOn)\n        self.add_optional_field_to_data(data, 'chrgngDoorPosSts', self.chrgngDoorPosSts)\n        self.add_optional_field_to_data(data, 'chrgngDoorOpenCnd', self.chrgngDoorOpenCnd)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.bmsReserCtrlDspCmd = data.get('bmsReserCtrlDspCmd')\n        self.bmsReserStHourDspCmd = data.get('bmsReserStHourDspCmd')\n        self.bmsReserStMintueDspCmd = data.get('bmsReserStMintueDspCmd')\n        self.bmsReserSpHourDspCmd = data.get('bmsReserSpHourDspCmd')\n        self.bmsReserSpMintueDspCmd = data.get('bmsReserSpMintueDspCmd')\n        self.bmsOnBdChrgTrgtSOCDspCmd = data.get('bmsOnBdChrgTrgtSOCDspCmd')\n        self.bms_estd_elec_rng = data.get('bmsEstdElecRng')\n        self.bmsAltngChrgCrntDspCmd = data.get('bmsAltngChrgCrntDspCmd')\n        self.bmsChrgCtrlDspCmd = data.get('bmsChrgCtrlDspCmd')\n        self.chrgngRmnngTime = data.get('chrgngRmnngTime')\n        self.chrgngRmnngTimeV = data.get('chrgngRmnngTimeV')\n        self.bmsChrgOtptCrntReq = data.get('bmsChrgOtptCrntReq')\n        self.bmsChrgOtptCrntReqV = data.get('bmsChrgOtptCrntReqV')\n        self.bmsPackCrnt = data.get('bmsPackCrnt')\n        self.bmsPackCrntV = data.get('bmsPackCrntV')\n        self.bmsPackVol = data.get('bmsPackVol')\n        self.bmsPackSOCDsp = data.get('bmsPackSOCDsp')\n        self.bmsChrgSts = data.get('bmsChrgSts')\n        self.bmsChrgSpRsn = data.get('bmsChrgSpRsn')\n        self.clstrElecRngToEPT = data.get('clstrElecRngToEPT')\n        self.bmsPTCHeatReqDspCmd = data.get('bmsPTCHeatReqDspCmd')\n        self.bmsPTCHeatResp = data.get('bmsPTCHeatResp')\n        self.ccuEleccLckCtrlDspCmd = data.get('ccuEleccLckCtrlDspCmd')\n        self.bmsPTCHeatSpRsn = data.get('bmsPTCHeatSpRsn')\n        self.bmsDsChrgSpRsn = data.get('bmsDsChrgSpRsn')\n        self.disChrgngRmnngTime = data.get('disChrgngRmnngTime')\n        self.disChrgngRmnngTimeV = data.get('disChrgngRmnngTimeV')\n        self.imcuVehElecRng = data.get('imcuVehElecRng')\n        self.imcuVehElecRngV = data.get('imcuVehElecRngV')\n        self.imcuChrgngEstdElecRng = data.get('imcuChrgngEstdElecRng')\n        self.imcuChrgngEstdElecRngV = data.get('imcuChrgngEstdElecRngV')\n        self.imcuDschrgngEstdElecRng = data.get('imcuDschrgngEstdElecRng')\n        self.imcuDschrgngEstdElecRngV = data.get('imcuDschrgngEstdElecRngV')\n        self.chrgngSpdngTime = data.get('chrgngSpdngTime')\n        self.chrgngSpdngTimeV = data.get('chrgngSpdngTimeV')\n        self.chrgngAddedElecRng = data.get('chrgngAddedElecRng')\n        self.chrgngAddedElecRngV = data.get('chrgngAddedElecRngV')\n        self.onBdChrgrAltrCrntInptCrnt = data.get('onBdChrgrAltrCrntInptCrnt')\n        self.onBdChrgrAltrCrntInptVol = data.get('onBdChrgrAltrCrntInptVol')\n        self.ccuOnbdChrgrPlugOn = data.get('ccuOnbdChrgrPlugOn')\n        self.ccuOffBdChrgrPlugOn = data.get('ccuOffBdChrgrPlugOn')\n        self.chrgngDoorPosSts = data.get('chrgngDoorPosSts')\n        self.chrgngDoorOpenCnd = data.get('chrgngDoorOpenCnd')\n        self.chargeStatus = RvsChargingStatus()\n        self.chargeStatus.init_from_dict(data.get('chargeStatus'))\n        self.bmsAdpPubChrgSttnDspCmd = data.get('bmsAdpPubChrgSttnDspCmd')\n\n    def get_current(self) -> float:\n        return self.bmsPackCrnt * 0.05 - 1000.0\n\n    def get_voltage(self) -> float:\n        return self.bmsPackVol * 0.25\n\n    def get_power(self) -> float:\n        return self.get_current() * self.get_voltage() / 1000.0\n\n    def get_charge_target_soc(self) -> TargetBatteryCode | None:\n        raw_target_soc = self.bmsOnBdChrgTrgtSOCDspCmd\n        try:\n            return TargetBatteryCode(raw_target_soc)\n        except ValueError:\n            return None", "\n\nclass RvsChargingStatus(Asn1Type):\n    def __init__(self):\n        super().__init__('RvsChargingStatus')\n        self.real_time_power = None  # INTEGER(0..65535),\n        self.charging_gun_state = None  # BOOLEAN,\n        self.fuel_Range_elec = None  # INTEGER(0..65535),\n        self.charging_type = None  # INTEGER(0..255),\n        self.start_time = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.end_time = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.charging_pile_id = None  # IA5String(SIZE(0..64)) OPTIONAL,\n        self.charging_pile_supplier = None  # IA5String(SIZE(0..64)) OPTIONAL,\n        self.working_current = None  # INTEGER(0..65535) OPTIONAL,\n        self.working_voltage = None  # INTEGER(0..65535) OPTIONAL,\n        self.mileage_since_last_charge = None  # INTEGER(0..65535) OPTIONAL,\n        self.power_usage_since_last_charge = None  # INTEGER(0..65535) OPTIONAL,\n        self.mileage_of_day = None  # INTEGER(0..65535) OPTIONAL,\n        self.power_usage_of_day = None  # INTEGER(0..65535) OPTIONAL,\n        self.static_energy_consumption = None  # INTEGER(0..65535) OPTIONAL,\n        self.charging_electricity_phase = None  # INTEGER(0..255) OPTIONAL,\n        self.charging_duration = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.last_charge_ending_power = None  # INTEGER(0..65535) OPTIONAL,\n        self.total_battery_capacity = None  # INTEGER(0..65535) OPTIONAL,\n        self.fota_lowest_voltage = None  # INTEGER(0..255) OPTIONAL,\n        self.mileage = None  # INTEGER(0..2147483647),\n        self.extended_data1 = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.extended_data2 = None  # INTEGER(0..2147483647) OPTIONAL,\n        self.extended_data3 = None  # IA5String(SIZE(0..1024)) OPTIONAL,\n        self.extended_data4 = None  # IA5String(SIZE(0..1024)) OPTIONAL\n\n    def get_data(self) -> dict:\n        data = {\n            'realtimePower': self.real_time_power,\n            'chargingGunState': self.charging_gun_state,\n            'fuelRangeElec': self.fuel_Range_elec,\n            'chargingType': self.charging_type,\n            'mileage': self.mileage\n        }\n        self.add_optional_field_to_data(data, 'startTime', self.start_time)\n        self.add_optional_field_to_data(data, 'endTime', self.end_time)\n        self.add_optional_field_to_data(data, 'chargingPileID', self.charging_pile_id)\n        self.add_optional_field_to_data(data, 'chargingPileSupplier', self.charging_pile_supplier)\n        self.add_optional_field_to_data(data, 'workingCurrent', self.working_current)\n        self.add_optional_field_to_data(data, 'workingVoltage', self.working_voltage)\n        self.add_optional_field_to_data(data, 'mileageSinceLastCharge', self.mileage_since_last_charge)\n        self.add_optional_field_to_data(data, 'powerUsageSinceLastCharge', self.power_usage_since_last_charge)\n        self.add_optional_field_to_data(data, 'mileageOfDay', self.mileage_of_day)\n        self.add_optional_field_to_data(data, 'powerUsageOfDay', self.power_usage_of_day)\n        self.add_optional_field_to_data(data, 'staticEnergyConsumption', self.static_energy_consumption)\n        self.add_optional_field_to_data(data, 'chargingElectricityPhase', self.charging_electricity_phase)\n        self.add_optional_field_to_data(data, 'chargingDuration', self.charging_duration)\n        self.add_optional_field_to_data(data, 'lastChargeEndingPower', self.last_charge_ending_power)\n        self.add_optional_field_to_data(data, 'totalBatteryCapacity', self.total_battery_capacity)\n        self.add_optional_field_to_data(data, 'fotaLowestVoltage', self.fota_lowest_voltage)\n        self.add_optional_field_to_data(data, 'extendedData1', self.extended_data1)\n        self.add_optional_field_to_data(data, 'extendedData2', self.extended_data2)\n        self.add_optional_field_to_data(data, 'extendedData3', self.extended_data3)\n        self.add_optional_field_to_data(data, 'extendedData4', self.extended_data4)\n        return data\n\n    def init_from_dict(self, data: dict) -> None:\n        self.real_time_power = data.get('realtimePower')\n        self.charging_gun_state = data.get('chargingGunState')\n        self.fuel_Range_elec = data.get('fuelRangeElec')\n        self.charging_type = data.get('chargingType')\n        self.start_time = data.get('startTime')\n        self.end_time = data.get('endTime')\n        self.charging_pile_id = data.get('chargingPileID')\n        self.charging_pile_supplier = data.get('chargingPileSupplier')\n        self.working_current = data.get('workingCurrent')\n        self.working_voltage = data.get('workingVoltage')\n        self.mileage_since_last_charge = data.get('mileageSinceLastCharge')\n        self.power_usage_since_last_charge = data.get('powerUsageSinceLastCharge')\n        self.mileage_of_day = data.get('mileageOfDay')\n        self.power_usage_of_day = data.get('powerUsageOfDay')\n        self.static_energy_consumption = data.get('staticEnergyConsumption')\n        self.charging_electricity_phase = data.get('chargingElectricityPhase')\n        self.charging_duration = data.get('chargingDuration')\n        self.last_charge_ending_power = data.get('lastChargeEndingPower')\n        self.total_battery_capacity = data.get('totalBatteryCapacity')\n        self.fota_lowest_voltage = data.get('fotaLowestVoltage')\n        self.mileage = data.get('mileage')\n        self.extended_data1 = data.get('extendedData1')\n        self.extended_data2 = data.get('extendedData2')\n        self.extended_data3 = data.get('extendedData3')\n        self.extended_data4 = data.get('extendedData4')", "\n\nclass OtaChrgCtrlReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgCtrlReq')\n        self.chrgCtrlReq = None\n        self.tboxV2XReq = None\n        self.tboxEleccLckCtrlReq = None\n\n    def get_data(self) -> dict:\n        data = {\n            'chrgCtrlReq': self.chrgCtrlReq,\n            'tboxV2XReq': self.tboxV2XReq,\n            'tboxEleccLckCtrlReq': self.tboxEleccLckCtrlReq,\n        }\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.chrgCtrlReq = data.get('chrgCtrlReq')\n        self.tboxV2XReq = data.get('tboxV2XReq')\n        self.tboxEleccLckCtrlReq = data.get('tboxEleccLckCtrlReq')", "\n\nclass OtaChrgCtrlStsResp(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgCtrlStsResp')\n        self.chrgCtrlDspCmd = None\n        self.chrgCtrlResp = None\n        self.bmsDsChrgCtrlDspCmd = None\n        self.bmsDsChrgCtrlResp = None\n        self.ccuEleccLckCtrlDspCmd = None\n        self.ccuEleccLckCtrlResp = None\n        self.rvcReqSts = None\n\n    def get_data(self) -> dict:\n        data = {\n            'chrgCtrlDspCmd': self.chrgCtrlDspCmd,\n            'chrgCtrlResp': self.chrgCtrlResp,\n        }\n        self.add_optional_field_to_data(data, 'bmsDsChrgCtrlDspCmd', self.bmsDsChrgCtrlDspCmd)\n        self.add_optional_field_to_data(data, 'bmsDsChrgCtrlResp', self.bmsDsChrgCtrlResp)\n        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlDspCmd', self.ccuEleccLckCtrlDspCmd)\n        self.add_optional_field_to_data(data, 'ccuEleccLckCtrlResp', self.ccuEleccLckCtrlResp)\n        self.add_optional_field_to_data(data, 'rvcReqSts', self.rvcReqSts)\n        return data", "\n\nclass OtaChrgRsvanReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgRsvanReq')\n        self.rsvanStHour = None\n        self.rsvanStMintu = None\n        self.rsvanSpHour = None\n        self.rsvanSpMintu = None\n        self.tboxReserCtrlReq = None\n        self.tboxAdpPubChrgSttnReq = None\n\n    def get_data(self) -> dict:\n        data = {\n            'rsvanStHour': self.rsvanStHour,\n            'rsvanStMintu': self.rsvanStMintu,\n            'rsvanSpHour': self.rsvanSpHour,\n            'rsvanSpMintu': self.rsvanSpMintu,\n            'tboxReserCtrlReq': self.tboxReserCtrlReq,\n            'tboxAdpPubChrgSttnReq': self.tboxAdpPubChrgSttnReq\n        }\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.rsvanStHour = data.get('rsvanStHour')\n        self.rsvanStMintu = data.get('rsvanStMintu')\n        self.rsvanSpHour = data.get('rsvanSpHour')\n        self.rsvanSpMintu = data.get('rsvanSpMintu')\n        self.tboxReserCtrlReq = data.get('tboxReserCtrlReq')\n        self.tboxAdpPubChrgSttnReq = data.get('tboxAdpPubChrgSttnReq')", "\n\nclass OtaChrgRsvanResp(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgRsvanResp')\n        self.rvcReqSts = None\n        self.bmsReserCtrlDspCmd = None\n        self.bmsReserStHourDspCmd = None\n        self.bmsReserStMintueDspCmd = None\n        self.bmsReserSpHourDspCmd = None\n        self.bmsReserSpMintueDspCmd = None\n        self.bmsAdpPubChrgSttnDspCmd = None\n        self.bmsReserChrCtrlResp = None\n\n    def get_data(self) -> dict:\n        data = {\n            'rvcReqSts': self.rvcReqSts,\n            'bmsReserCtrlDspCmd': self.bmsReserCtrlDspCmd,\n            'bmsReserStHourDspCmd': self.bmsReserStHourDspCmd,\n            'bmsReserStMintueDspCmd': self.bmsReserStMintueDspCmd,\n            'bmsReserSpHourDspCmd': self.bmsReserSpHourDspCmd,\n            'bmsReserSpMintueDspCmd': self.bmsReserSpMintueDspCmd,\n            'bmsAdpPubChrgSttnDspCmd': self.bmsAdpPubChrgSttnDspCmd,\n        }\n        self.add_optional_field_to_data(data, 'bmsReserChrCtrlResp', self.bmsReserChrCtrlResp)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.rvcReqSts = data.get('rvcReqSts')\n        self.bmsReserCtrlDspCmd = data.get('bmsReserCtrlDspCmd')\n        self.bmsReserStHourDspCmd = data.get('bmsReserStHourDspCmd')\n        self.bmsReserStMintueDspCmd = data.get('bmsReserStMintueDspCmd')\n        self.bmsReserSpHourDspCmd = data.get('bmsReserSpHourDspCmd')\n        self.bmsReserSpMintueDspCmd = data.get('bmsReserSpMintueDspCmd')\n        self.bmsAdpPubChrgSttnDspCmd = data.get('bmsAdpPubChrgSttnDspCmd')\n        self.bmsReserChrCtrlResp = data.get('bmsReserChrCtrlResp')", "\n\nclass OtaChrgSetngReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgSetngReq')\n        self.onBdChrgTrgtSOCReq = None\n        self.altngChrgCrntReq = None\n        self.tboxV2XSpSOCReq = None\n\n    def get_data(self) -> dict:\n        data = {\n            'onBdChrgTrgtSOCReq': self.onBdChrgTrgtSOCReq,\n            'altngChrgCrntReq': self.altngChrgCrntReq,\n            'tboxV2XSpSOCReq': self.tboxV2XSpSOCReq\n        }\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.onBdChrgTrgtSOCReq = data.get('onBdChrgTrgtSOCReq')\n        self.altngChrgCrntReq = data.get('altngChrgCrntReq')\n        self.tboxV2XSpSOCReq = data.get('tboxV2XSpSOCReq')", "\n\nclass OtaChrgSetngResp(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgSetngResp')\n        self.rvcReqSts = None\n        self.bmsOnBdChrgTrgtSOCDspCmd = None\n        self.bmsChrgTrgtSOCResp = None\n        self.bmsEstdElecRng = None\n        self.bmsAltngChrgCrntDspCmd = None\n        self.bmsPackCrnt = None\n        self.bmsAltngChrgCrntResp = None\n        self.imcuDschrgTrgtSOCDspCmd = None\n        self.imcuDschrgTrgtSOCResp = None\n\n    def get_data(self) -> dict:\n        data = {\n            'rvcReqSts': self.rvcReqSts,\n            'bmsOnBdChrgTrgtSOCDspCmd': self.bmsOnBdChrgTrgtSOCDspCmd,\n            'bmsChrgTrgtSOCResp': self.bmsChrgTrgtSOCResp,\n            'bmsEstdElecRng': self.bmsEstdElecRng,\n            'bmsAltngChrgCrntDspCmd': self.bmsAltngChrgCrntDspCmd,\n            'bmsPackCrnt': self.bmsPackCrnt,\n            'bmsAltngChrgCrntResp': self.bmsAltngChrgCrntResp\n        }\n        self.add_optional_field_to_data(data, 'imcuDschrgTrgtSOCDspCmd', self.imcuDschrgTrgtSOCDspCmd)\n        self.add_optional_field_to_data(data, 'imcuDschrgTrgtSOCResp', self.imcuDschrgTrgtSOCResp)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.rvcReqSts = data.get('rvcReqSts')\n        self.bmsOnBdChrgTrgtSOCDspCmd = data.get('bmsOnBdChrgTrgtSOCDspCmd')\n        self.bmsChrgTrgtSOCResp = data.get('bmsChrgTrgtSOCResp')\n        self.bmsEstdElecRng = data.get('bmsEstdElecRng')\n        self.bmsAltngChrgCrntDspCmd = data.get('bmsAltngChrgCrntDspCmd')\n        self.bmsPackCrnt = data.get('bmsPackCrnt')\n        self.bmsAltngChrgCrntResp = data.get('bmsAltngChrgCrntResp')\n        self.imcuDschrgTrgtSOCDspCmd = data.get('imcuDschrgTrgtSOCDspCmd')\n        self.imcuDschrgTrgtSOCResp = data.get('imcuDschrgTrgtSOCResp')", "\n\nclass OtaChrgHeatReq(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgHeatReq')\n        self.ptcHeatReq = None\n\n    def get_data(self) -> dict:\n        data = {\n            'ptcHeatReq': self.ptcHeatReq\n        }\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.ptcHeatReq = data.get('ptcHeatReq')", "\n\nclass OtaChrgHeatResp(ApplicationData):\n    def __init__(self):\n        super().__init__('OTAChrgHeatResp')\n        self.ptcHeatReqDspCmd = None\n        self.ptcHeatResp = None\n        self.rvcReqSts = None\n\n    def get_data(self) -> dict:\n        data = {\n            'ptcHeatReqDspCmd': self.ptcHeatReqDspCmd,\n            'ptcHeatResp': self.ptcHeatResp,\n            'rvcReqSts': self.rvcReqSts\n        }\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.ptcHeatReqDspCmd = data.get('ptcHeatReqDspCmd')\n        self.ptcHeatResp = data.get('ptcHeatResp')\n        self.rvcReqSts = data.get('rvcReqSts')", ""]}
{"filename": "src/saic_ismart_client/ota_v1_1/Message.py", "chunked_list": ["from saic_ismart_client.common_model import MessageCoderV1\nfrom saic_ismart_client.ota_v1_1.data_model import MessageV11\n\n\nclass MessageCoderV11(MessageCoderV1):\n    def __init__(self):\n        super().__init__('ASN.1_schema/v1_1/')\n\n    def encode_request(self, message: MessageV11) -> str:\n        return super().encode_request(message)\n\n    def decode_response(self, message: str, decoded_message: MessageV11) -> None:\n        super().decode_response(message, decoded_message)\n\n    def initialize_message(self, uid: str, token: str, application_id: str,\n                           application_data_protocol_version: int, message_id: int, message: MessageV11,\n                           vin: str = None):\n        super().initialize_message(uid, token, vin, application_id, application_data_protocol_version, message_id,\n                                   message)", ""]}
{"filename": "src/saic_ismart_client/ota_v1_1/__init__.py", "chunked_list": [""]}
{"filename": "src/saic_ismart_client/ota_v1_1/data_model.py", "chunked_list": ["import datetime\nfrom enum import Enum\n\nfrom saic_ismart_client.common_model import Asn1Type, ApplicationData, MessageBodyV1, MessageV1, Header\n\nFIELD_ACTION_TYPE = 'actionType'\nFIELD_SECONDS = 'seconds'\nFIELD_MESSAGE_TIME = 'messageTime'\nFIELD_FUNCTION_SWITCH = 'functionSwitch'\nFIELD_ALARM_SWITCH = 'alarmSwitch'", "FIELD_FUNCTION_SWITCH = 'functionSwitch'\nFIELD_ALARM_SWITCH = 'alarmSwitch'\nFIELD_ALARM_SETTING_TYPE = 'alarmSettingType'\nFIELD_DESCRIPTION = 'description'\nFIELD_ALARM_SWITCH_LIST = 'alarmSwitchList'\nFIELD_PIN = 'pin'\nFIELD_TBOX_SIM_NO = 'tboxSimNo'\nFIELD_MODEL_CONF_JSON = 'modelConfigurationJsonStr'\nFIELD_COLOR_NAME = 'colorName'\nFIELD_MODEL_YEAR = 'modelYear'", "FIELD_COLOR_NAME = 'colorName'\nFIELD_MODEL_YEAR = 'modelYear'\nFIELD_CURRENT_VEHICLE = 'isCurrentVehicle'\nFIELD_VEHICLE_PHOTO = 'vehiclePhoto'\nFIELD_BIND_TIME = 'bindTime'\nFIELD_ACTIVE = 'isAcivate'\nFIELD_MODEL_NAME = 'modelName'\nFIELD_BRAND_NAME = 'brandName'\nFIELD_SERIES = 'series'\nFIELD_NAME = 'name'", "FIELD_SERIES = 'series'\nFIELD_NAME = 'name'\nFIELD_VIN = 'vin'\nFIELD_LANGUAGE_TYPE = 'languageType'\nFIELD_USER_NAME = 'userName'\nFIELD_USER_PHOTO = 'userPhoto'\nFIELD_VIN_LIST = 'vinList'\nFIELD_TOKEN_EXPIRATION = 'tokenExpiration'\nFIELD_REFRESH_TOKEN = 'refreshToken'\nFIELD_TOKEN = 'token'", "FIELD_REFRESH_TOKEN = 'refreshToken'\nFIELD_TOKEN = 'token'\nFIELD_DEVICE_ID = 'deviceId'\nFIELD_PASSWORD = 'password'\nFIELD_READ_STATUS = 'readStatus'\nFIELD_MESSAGE_GROUP = 'messageGroup'\nFIELD_CONTENT_ID = 'contentId'\nFIELD_END_NUMBER = 'endNumber'\nFIELD_START_NUMBER = 'startNumber'\nFIELD_CONTENT = 'content'", "FIELD_START_NUMBER = 'startNumber'\nFIELD_CONTENT = 'content'\nFIELD_CONTENT_ID_LIST = 'contentIdList'\nFIELD_SENDER = 'sender'\nFIELD_TITLE = 'title'\nFIELD_MESSAGE_TYPE = 'messageType'\nFIELD_MESSAGE_ID = 'messageId'\nFIELD_MESSAGES = 'messages'\nFIELD_RECORDS_NUMBER = 'recordsNumber'\nFIELD_START_END_NUMBER = 'startEndNumber'", "FIELD_RECORDS_NUMBER = 'recordsNumber'\nFIELD_START_END_NUMBER = 'startEndNumber'\n\n\nclass MessageBodyV11(MessageBodyV1):\n    def __init__(self):\n        super().__init__('MPDispatcherBody')\n\n    def get_data(self) -> dict:\n        return super().get_data()\n\n    def init_from_dict(self, data: dict):\n        super().init_from_dict(data)", "\n\nclass AlarmSwitchReq(ApplicationData):\n    def __init__(self):\n        super().__init__('AlarmSwitchReq')\n        self.pin = None\n        self.alarm_switch_list = []\n        self.description = None\n\n    def get_data(self) -> dict:\n        alarm_switch_list = []\n        for alarm_switch in self.alarm_switch_list:\n            alarm_switch_list.append(alarm_switch.get_data())\n        data = {\n            FIELD_PIN: self.pin,\n            FIELD_ALARM_SWITCH_LIST: alarm_switch_list\n        }\n        self.add_optional_field_to_data(data, FIELD_DESCRIPTION, self.description)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.pin = data.get(FIELD_PIN)\n        alarm_switch_list = data.get(FIELD_ALARM_SWITCH_LIST)\n        for item in alarm_switch_list:\n            alarm_switch = AlarmSwitch()\n            alarm_switch.init_from_dict(item)\n            self.alarm_switch_list.append(alarm_switch)\n        self.description = data.get(FIELD_DESCRIPTION)", "\n\nclass AlarmSwitch(Asn1Type):\n    def __init__(self):\n        super().__init__('AlarmSwitch')\n        self.alarm_setting_type = None\n        self.alarm_switch = None\n        self.function_switch = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_ALARM_SETTING_TYPE: self.alarm_setting_type,\n            FIELD_ALARM_SWITCH: self.alarm_switch,\n            FIELD_FUNCTION_SWITCH: self.function_switch\n        }\n\n    def init_from_dict(self, data: dict):\n        self.alarm_setting_type = data.get(FIELD_ALARM_SETTING_TYPE)\n        self.alarm_switch = data.get(FIELD_ALARM_SWITCH)\n        self.function_switch = data.get(FIELD_FUNCTION_SWITCH)", "\n\nclass MpUserInfoRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('MPUserInfoResp')\n        self.nick_name = None\n        self.address = None\n        self.mobile_phone = None\n        self.emergency_name = None\n        self.emergency_mobile = None\n        self.user_photo = None\n        self.gender = None\n        self.birthday = None\n        self.language_type = None\n        self.real_name = None\n        self.the_second_level_country_code = None\n        self.the_third_level_country_code = None\n        self.the_second_level_country_name = None\n        self.the_third_level_country_name = None\n        self.email = None", "\n\nclass MpUserLoggingInReq(ApplicationData):\n    def __init__(self):\n        super().__init__('MPUserLoggingInReq')\n        self.password = None\n        self.device_id = None\n\n    def get_data(self) -> dict:\n        data = {FIELD_PASSWORD: self.password}\n        if self.device_id is not None:\n            data[FIELD_DEVICE_ID] = self.device_id\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.password = data.get(FIELD_PASSWORD)\n        self.device_id = data.get(FIELD_DEVICE_ID)", "\n\nclass MpUserLoggingInRsp(ApplicationData):\n    def __init__(self):\n        super().__init__('MPUserLoggingInResp')\n        self.token = None\n        self.refresh_token = None\n        self.token_expiration = None\n        self.vin_list = []\n        self.user_photo = None\n        self.user_name = None\n        self.language_type = None\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_USER_NAME: self.user_name\n        }\n        self.add_optional_field_to_data(data, FIELD_TOKEN, self.token)\n        self.add_optional_field_to_data(data, FIELD_REFRESH_TOKEN, self.refresh_token)\n        if self.token_expiration is not None:\n            data[FIELD_TOKEN_EXPIRATION] = self.token_expiration.get_data()\n        if self.vin_list is not None:\n            vin_list = []\n            for item in self.vin_list:\n                vin_list.append(item.get_data())\n            data[FIELD_VIN_LIST] = vin_list\n        self.add_optional_field_to_data(data, FIELD_USER_PHOTO, self.user_photo)\n        if self.language_type is not None:\n            data[FIELD_LANGUAGE_TYPE] = self.language_type\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.token = data.get(FIELD_TOKEN)\n        self.refresh_token = data.get(FIELD_REFRESH_TOKEN)\n        if FIELD_TOKEN_EXPIRATION in data:\n            self.token_expiration = Timestamp()\n            self.token_expiration.init_from_dict(data.get(FIELD_TOKEN_EXPIRATION))\n        if FIELD_VIN_LIST in data:\n            vin_list = data.get(FIELD_VIN_LIST)\n            for item in vin_list:\n                vin_info = VinInfo()\n                vin_info.init_from_dict(item)\n                self.vin_list.append(vin_info)\n        self.user_photo = data.get(FIELD_USER_PHOTO)\n        self.user_name = data.get(FIELD_USER_NAME)\n        self.language_type = data.get(FIELD_LANGUAGE_TYPE)", "\n\nclass Timestamp(Asn1Type):\n    def __init__(self):\n        super().__init__('Timestamp')\n        self.seconds = -1\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_SECONDS: self.seconds\n        }\n\n    def init_from_dict(self, data: dict):\n        self.seconds = data.get(FIELD_SECONDS)\n\n    def get_timestamp(self) -> datetime:\n        return datetime.datetime.fromtimestamp(self.seconds)", "\n\nclass AppUpgradeInfoReq(Asn1Type):\n    def __init__(self):\n        super().__init__('APPUpgradeInfoReq')\n        self.app_type = None\n        self.app_version = None\n\n\nclass AppUpgradeInfoRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('APPUpgradeInfoResp')\n        self.has_new_version = None\n        self.app_version = None\n        self.force_update = None\n        self.update_url = None\n        self.update_info_en = None\n        self.update_info_th = None", "\nclass AppUpgradeInfoRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('APPUpgradeInfoResp')\n        self.has_new_version = None\n        self.app_version = None\n        self.force_update = None\n        self.update_url = None\n        self.update_info_en = None\n        self.update_info_th = None", "\n\nclass MpAppAttributeRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('MPAppAttributeResp')\n        self.data_app_attribute = None\n\n\nclass AdvertiseRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('AdvertiseResp')\n        self.advertise_version = None\n        self.advertises = []", "class AdvertiseRsp(Asn1Type):\n    def __init__(self):\n        super().__init__('AdvertiseResp')\n        self.advertise_version = None\n        self.advertises = []\n\n\nclass VinInfo(Asn1Type):\n    def __init__(self):\n        super().__init__('VinInfo')\n        self.vin = None\n        self.name = None\n        self.series = None\n        self.brand_name = None\n        self.model_name = None\n        self.vehicle_photo = None\n        self.active = None\n        self.current_vehicle = None\n        self.model_year = None\n        self.color_name = None\n        self.model_configuration_json_str = None\n        self.bind_time = None\n        self.tbox_sim_no = None\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_VIN: self.vin,\n            FIELD_SERIES: self.series,\n            FIELD_BRAND_NAME: self.brand_name,\n            FIELD_MODEL_NAME: self.model_name,\n            FIELD_ACTIVE: self.active\n        }\n        self.add_optional_field_to_data(data, FIELD_NAME, self.name)\n        self.add_optional_field_to_data(data, FIELD_VEHICLE_PHOTO, self.vehicle_photo)\n        self.add_optional_field_to_data(data, FIELD_CURRENT_VEHICLE, self.current_vehicle)\n        self.add_optional_field_to_data(data, FIELD_MODEL_YEAR, self.model_year)\n        self.add_optional_field_to_data(data, FIELD_COLOR_NAME, self.color_name)\n        self.add_optional_field_to_data(data, FIELD_MODEL_CONF_JSON, self.model_configuration_json_str)\n        self.add_optional_field_to_data(data, FIELD_BIND_TIME, self.bind_time)\n        self.add_optional_field_to_data(data, FIELD_TBOX_SIM_NO, self.tbox_sim_no)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.vin = data.get(FIELD_VIN)\n        self.name = data.get(FIELD_NAME)\n        self.series = data.get(FIELD_SERIES)\n        self.brand_name = data.get(FIELD_BRAND_NAME)\n        self.model_name = data.get(FIELD_MODEL_NAME)\n        self.vehicle_photo = data.get(FIELD_VEHICLE_PHOTO)\n        self.active = data.get(FIELD_ACTIVE)\n        self.current_vehicle = data.get(FIELD_CURRENT_VEHICLE)\n        self.model_year = data.get(FIELD_MODEL_YEAR)\n        self.color_name = data.get(FIELD_COLOR_NAME)\n        self.model_configuration_json_str = data.get(FIELD_MODEL_CONF_JSON)\n        self.bind_time = data.get(FIELD_BIND_TIME)\n        self.tbox_sim_no = data.get(FIELD_TBOX_SIM_NO)", "\n\nclass MpAlarmSettingType(Enum):\n    ABNORMAL = 'abnormal'\n    MOVING = 'moving'\n    REGION = 'region'\n    ENGINE_START = 'engineStart'\n    START_VEHICLE_STATUS = 'startVehicleStatus'\n    OFF_CAR = 'offCar'\n    SPEEDING = 'speeding'", "\n\nclass MessageListReq(ApplicationData):\n    def __init__(self):\n        super().__init__('MessageListReq')\n        self.start_end_number = None\n        self.message_group = None\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_START_END_NUMBER: self.start_end_number.get_data()\n        }\n        self.add_optional_field_to_data(data, FIELD_MESSAGE_GROUP, self.message_group)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.start_end_number = StartEndNumber()\n        self.start_end_number.init_from_dict(data.get(FIELD_START_END_NUMBER))", "\n\nclass AbortSendMessageReq(ApplicationData):\n    def __init__(self):\n        super().__init__('AbortSendMessageReq')\n        self.messages = []  # SEQUENCE SIZE(1..256) OF Message OPTIONAL\n        self.message_id = -1  # INTEGER(0..281474976710655) OPTIONAL\n        self.action_type = ''  # IA5String(SIZE(1..20)) OPTIONAL\n\n    def get_data(self) -> dict:\n        data = {}\n        if len(self.messages) > 0:\n            message_list = []\n            for message in self.messages:\n                message_list.append(message.get_data())\n            data[FIELD_MESSAGES] = message_list\n        if self.message_id != -1:\n            data[FIELD_MESSAGE_ID] = self.message_id\n        if len(self.action_type) > 0:\n            data[FIELD_ACTION_TYPE] = self.action_type\n        return data\n\n    def init_from_dict(self, data: dict):\n        if FIELD_MESSAGES in data:\n            for msg in data[FIELD_MESSAGES]:\n                message = Message()\n                message.init_from_dict(msg)\n                self.messages.append(message)\n        if FIELD_MESSAGE_ID in data:\n            self.message_id = data[FIELD_MESSAGE_ID]\n        if FIELD_ACTION_TYPE in data:\n            self.action_type = data[FIELD_ACTION_TYPE]", "\n\nclass Message(Asn1Type):\n    def __init__(self):\n        super().__init__('Message')\n        self.message_id = None\n        self.message_type = None\n        self.title = None\n        self.message_time = None\n        self.sender = None\n        self.content_id_list = None\n        self.content = None\n        self.read_status = None\n        self.vin = None\n\n    def get_data(self) -> dict:\n        data = {\n            FIELD_MESSAGE_ID: self.message_id,\n            FIELD_MESSAGE_TYPE: self.message_type,\n            FIELD_TITLE: self.title.decode(),\n            FIELD_MESSAGE_TIME: self.message_time.get_data(),\n            FIELD_SENDER: self.sender\n        }\n        if self.content_id_list is not None:\n            content_id_list = []\n            for item in self.content_id_list:\n                content_id_list.append(item.get_data())\n            data[FIELD_CONTENT_ID] = content_id_list\n        self.add_optional_field_to_data(data, FIELD_CONTENT, self.content)\n        self.add_optional_field_to_data(data, FIELD_READ_STATUS, self.read_status)\n        self.add_optional_field_to_data(data, FIELD_VIN, self.vin)\n        return data\n\n    def init_from_dict(self, data: dict):\n        self.message_id = data.get(FIELD_MESSAGE_ID)\n        self.message_type = data.get(FIELD_MESSAGE_TYPE)\n        self.title = data.get(FIELD_TITLE)\n        self.message_time = Timestamp()\n        self.message_time.init_from_dict(data.get(FIELD_MESSAGE_TIME))\n        self.sender = data.get(FIELD_SENDER)\n        if FIELD_CONTENT_ID in data:\n            self.content_id_list = []\n            for item in data.get(FIELD_CONTENT_ID):\n                content_id = ContentId()\n                content_id.init_from_dict(item)\n                self.content_id_list.append(content_id)\n        self.read_status = data.get(FIELD_READ_STATUS)\n        self.vin = data.get(FIELD_VIN)", "\n\nclass MessageListResp(ApplicationData):\n    def __init__(self):\n        super().__init__('MessageListResp')\n        self.records_number = 0\n        self.messages = []\n\n    def get_data(self) -> dict:\n        messages = []\n        for item in self.messages:\n            messages.append(item.get_data())\n        return {\n            FIELD_RECORDS_NUMBER: self.records_number,\n            FIELD_MESSAGES: messages\n        }\n\n    def init_from_dict(self, data: dict):\n        records_number = data.get(FIELD_RECORDS_NUMBER)\n        if records_number > 0:\n            messages = data.get(FIELD_MESSAGES)\n            for item in messages:\n                message = Message()\n                message.init_from_dict(item)\n                self.add_message(message)\n\n    def add_message(self, message: Message):\n        self.messages.append(message)\n        self.records_number += 1", "\n\nclass StartEndNumber(Asn1Type):\n    def __init__(self):\n        super().__init__('StartEndNumber')\n        self.start_number = None\n        self.end_number = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_START_NUMBER: self.start_number,\n            FIELD_END_NUMBER: self.end_number\n        }\n\n    def init_from_dict(self, data: dict):\n        self.start_number = data.get(FIELD_START_NUMBER)\n        self.end_number = data.get(FIELD_END_NUMBER)", "\n\nclass ContentId(Asn1Type):\n    def __init__(self):\n        super().__init__('ContentId')\n        self.content_id = None\n\n    def get_data(self) -> dict:\n        return {\n            FIELD_CONTENT_ID: self.content_id\n        }\n\n    def init_from_dict(self, data: dict):\n        self.content_id = data.get(FIELD_CONTENT_ID)", "\n\nclass MessageV11(MessageV1):\n    def __init__(self, header: Header, body: MessageBodyV11, application_data: ApplicationData = None):\n        super().__init__(header, body, application_data)\n"]}
{"filename": "src/saic_ismart_client/rest_v2/model.py", "chunked_list": ["import abc\nimport datetime\nimport re\n\n\nclass BaseData(abc.ABC):\n    def __init__(self):\n        self.code: int | None = None\n        self.message: str | None = None\n\n    def init_from_dict(self, data: dict):\n        self.code = int(data.get('code'))\n        self.message = data.get('message')\n        return self", "\n\nTZ_REGEX = re.compile(r'^(?P<base>GMT|UTC)(?P<sign>[+-])(?P<hour>\\d{1,2})(:(?P<minute>\\d{2}))?$')\n\n\nclass TimeZoneEntity():\n    def __init__(self):\n        self.timezone = None\n\n    def init_from_dict(self, data: dict):\n        self.timezone = data.get('timezone')\n        return self\n\n    def __str__(self):\n        return f'{{\"timezone\": \"{self.timezone}\"}}'\n\n    def get_timezone_offset(self):\n        m = TZ_REGEX.match(self.timezone)\n        if m is not None:\n            sign = m.group('sign')\n            hours = int(m.group('hour'))\n            minutes = int(m.group('minute')) if m.group('minute') is not None else 0\n            if sign == '+':\n                offset = datetime.timedelta(hours=hours, minutes=minutes)\n            else:\n                offset = -datetime.timedelta(hours=hours, minutes=minutes)\n            return datetime.timezone(offset=offset, name=self.timezone)\n        else:\n            raise ValueError(f'Invalid timezone: {self.timezone}')", "\n\nclass TimeZoneResponse(BaseData):\n    def __init__(self):\n        super().__init__()\n        self.data: TimeZoneEntity | None = None\n\n    def init_from_dict(self, data: dict):\n        super().init_from_dict(data)\n        self.data = TimeZoneEntity().init_from_dict(data.get('data'))\n        return self\n\n    def __str__(self):\n        return f'{{\"code\": {self.code}, \"message\": \"{self.message}\", \"data\": {self.data}}}'", ""]}
{"filename": "src/saic_ismart_client/rest_v2/api.py", "chunked_list": ["from datetime import datetime, timezone\n\nimport requests\n\nfrom saic_ismart_client.exceptions import SaicApiException\nfrom saic_ismart_client.rest_v2.model import TimeZoneResponse\n\n\nclass SaicRestV2Api():\n\n    def __init__(self, base_uri: str):\n        self.__base_uri = base_uri\n\n    def get_user_timezone(self, token: str, uid: str):\n        response = TimeZoneResponse()\n        self.__execute_get('api.app/v1/user/timezone', token, uid=uid, response_holder=response)\n        return response\n\n    def __execute_get(self, endpoint: str, token: str, uid=None, response_holder=None):\n        headers = self.__get_headers(token, uid)\n        try:\n            response = requests.get(url=f'{self.__base_uri}/{endpoint}', headers=headers)\n            if response_holder is None:\n                return response.content.decode()\n            else:\n                return response_holder.init_from_dict(response.json())\n        except requests.exceptions.ConnectionError as ece:\n            raise SaicApiException(f'Connection error: {ece}')\n        except requests.exceptions.Timeout as et:\n            raise SaicApiException(f'Timeout error: {et}')\n        except requests.exceptions.HTTPError as ehttp:\n            status_code = ehttp.response.status_code\n            raise SaicApiException(f'HTTP error. HTTP status: {status_code}, {ehttp}')\n        except requests.exceptions.RequestException as e:\n            raise SaicApiException(f'{e}')\n\n    def __get_headers(self, token, uid=None):\n        headers = {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'APP-SEND-DATE': str(datetime.now().replace(tzinfo=timezone.utc).timestamp() * 1000),\n            'APP-CONTENT-ENCRYPTED': '0',\n            'APP-LANGUAGE-TYPE': 'en',\n            'APP-LOGIN-TOKEN': token,\n        }\n        if uid:\n            headers['APP-USER-ID'] = uid\n        return headers", "class SaicRestV2Api():\n\n    def __init__(self, base_uri: str):\n        self.__base_uri = base_uri\n\n    def get_user_timezone(self, token: str, uid: str):\n        response = TimeZoneResponse()\n        self.__execute_get('api.app/v1/user/timezone', token, uid=uid, response_holder=response)\n        return response\n\n    def __execute_get(self, endpoint: str, token: str, uid=None, response_holder=None):\n        headers = self.__get_headers(token, uid)\n        try:\n            response = requests.get(url=f'{self.__base_uri}/{endpoint}', headers=headers)\n            if response_holder is None:\n                return response.content.decode()\n            else:\n                return response_holder.init_from_dict(response.json())\n        except requests.exceptions.ConnectionError as ece:\n            raise SaicApiException(f'Connection error: {ece}')\n        except requests.exceptions.Timeout as et:\n            raise SaicApiException(f'Timeout error: {et}')\n        except requests.exceptions.HTTPError as ehttp:\n            status_code = ehttp.response.status_code\n            raise SaicApiException(f'HTTP error. HTTP status: {status_code}, {ehttp}')\n        except requests.exceptions.RequestException as e:\n            raise SaicApiException(f'{e}')\n\n    def __get_headers(self, token, uid=None):\n        headers = {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'APP-SEND-DATE': str(datetime.now().replace(tzinfo=timezone.utc).timestamp() * 1000),\n            'APP-CONTENT-ENCRYPTED': '0',\n            'APP-LANGUAGE-TYPE': 'en',\n            'APP-LOGIN-TOKEN': token,\n        }\n        if uid:\n            headers['APP-USER-ID'] = uid\n        return headers", ""]}
{"filename": "src/saic_ismart_client/rest_v2/__init__.py", "chunked_list": [""]}
