{"filename": "src/testAgents.py", "chunked_list": ["from agents.agent import JuniorDev\n\n\ndef testJuniorDev():\n    prompt = \"build the application and fix any errors\"\n    agent = JuniorDev()\n    answer = agent.startLoop(prompt)\n    print(\"answer:\", answer)\n\n\nif __name__ == \"__main__\":\n    testJuniorDev()", "\n\nif __name__ == \"__main__\":\n    testJuniorDev()\n"]}
{"filename": "src/main.py", "chunked_list": ["import time\nfrom agents.agent import DebugGpt\nfrom agents.utils.debuggptprompt import getFeedbackFromCodeExecutionPrompt\nfrom cleanConsole import resetConsoleColor, setConsoleColor\n\n\nif __name__ == \"__main__\":\n    agent = DebugGpt()\n    agent.startLoop(\"debug the application\")\n", ""]}
{"filename": "src/testTools.py", "chunked_list": ["from agents.agent import parseToolUserAnswer\nfrom cleanConsole import printCode\nfrom tools.moveFile import moveFileFromTestApp\nfrom tools.readFile import getClosestFile, readCodeFile, readFile, readFileFromTestApp\nfrom tools.runShell import getErrorsFromFile, parseTypeAnswer, runShell\nfrom tools.searchGoogle import searchGoggleCustom\nfrom tools.stackOverflow import getAnswersForStackOverflowPost, searchStackOverflow\nfrom tools.writeFile import writeFileToTestApp, writeFileToWorkspace\nfrom tools.listFiles import listFilesFromTestApp\n", "from tools.listFiles import listFilesFromTestApp\n\n\ndef testWriteFile():\n    print(\"Testing WriteFile:\")\n\n    content = \"\"\"THIS is a file\n    \n    with multiple lines\"\"\"\n\n    filename = \"components/test/test.txt\"\n\n    answer = writeFileToTestApp(filename, content)\n    print(\"answer\\n\", answer)", "\n\ndef testListFiles():\n    print(\"Testing ListFiles:\")\n\n    tree = listFilesFromTestApp()\n    print(\"tree\\n\", tree)\n\n\ndef testSearch():\n    query = \"Cannot find module @lucide/react\"\n    results = searchGoggleCustom(query)\n    print(\"results\\n\", results)", "\ndef testSearch():\n    query = \"Cannot find module @lucide/react\"\n    results = searchGoggleCustom(query)\n    print(\"results\\n\", results)\n\n\ndef testReadFile():\n    filename = \"test.txt\"\n    content = readFile(filename)\n    print(\"content\\n\", content)", "\n\ndef testReadCodeFile():\n    filename = \"components/Footer.tsx\"\n    content = readCodeFile(filename)\n    print(\"content: \\n\\n\", content)\n\n\ndef testParseDebugGptMessage():\n    message = \"\"\"writeFile(components/LandingPage.module.scss, ```$color-primary: #0070f3;\n$color-secondary: #ff0080;\n$color-white: #ffffff;\n$color-black: #000000;\n\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background-color: $color-primary;\n}\n\n.hero {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.title {\n  font-size: 3rem;\n  font-weight: 700;\n  color: $color-white;\n  margin-bottom: 2rem;\n}\n\n.subtitle {\n  font-size: 1.5rem;\n  font-weight: 400;\n  color: $color-white;\n  margin-bottom: 3rem;\n}\n\n.button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: $color-primary;\n  background-color: $color-white;\n  border: none;\n  border-radius: 50px;\n  padding: 1rem 2rem;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);\n  }\n}\n\n.icon {\n  margin-left: 1rem;\n  font-size: 2rem;\n}\n\n.canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n``` )\"\"\"\n    functionName, arguments, plan = parseToolUserAnswer(message)\n    print(\"functionName\\n\", functionName)\n    # print(\"arguments\\n\", arguments)\n    for argument in arguments:\n        print(\"argument\\n\", argument)", "def testParseDebugGptMessage():\n    message = \"\"\"writeFile(components/LandingPage.module.scss, ```$color-primary: #0070f3;\n$color-secondary: #ff0080;\n$color-white: #ffffff;\n$color-black: #000000;\n\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background-color: $color-primary;\n}\n\n.hero {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.title {\n  font-size: 3rem;\n  font-weight: 700;\n  color: $color-white;\n  margin-bottom: 2rem;\n}\n\n.subtitle {\n  font-size: 1.5rem;\n  font-weight: 400;\n  color: $color-white;\n  margin-bottom: 3rem;\n}\n\n.button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: $color-primary;\n  background-color: $color-white;\n  border: none;\n  border-radius: 50px;\n  padding: 1rem 2rem;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);\n  }\n}\n\n.icon {\n  margin-left: 1rem;\n  font-size: 2rem;\n}\n\n.canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n``` )\"\"\"\n    functionName, arguments, plan = parseToolUserAnswer(message)\n    print(\"functionName\\n\", functionName)\n    # print(\"arguments\\n\", arguments)\n    for argument in arguments:\n        print(\"argument\\n\", argument)", "\n\ndef testRunShell():\n    command = \"npm run lint --fix\"\n    # command = \"ls\"\n    output = runShell(command)\n    print(\n        \"\\n\\n\\n\\n######################### output:\\n\",\n        output + \"\\n#########################\",\n    )", "\n\ndef testStackOverflow():\n    query = \"Cannot find module '@lucide/react'\"\n    # postId = \"44439205\"\n    # results = getAnswersForStackOverflowPost(postId)\n    # print(\"results\\n\", results)\n\n    answer = searchStackOverflow(query)\n    print(\"answer\\n\", answer)", "\n\ndef testMoveFile():\n    file1 = \"components/Header.tsx\"\n    file2 = \"components/Header/Header.tsx\"\n    answer = moveFileFromTestApp(file1, file2)\n    print(\"answer\\n\", answer)\n\n\ndef testConsole():\n    code = \"\"\"\n    def hello_world():\n        print('Hello, World!')\n\n    hello_world()\n    \"\"\"\n    printCode(code)", "\ndef testConsole():\n    code = \"\"\"\n    def hello_world():\n        print('Hello, World!')\n\n    hello_world()\n    \"\"\"\n    printCode(code)\n", "\n\ndef testGetErrorsFromFile():\n    filename = \"components/Logo.tsx\"\n    errors = getErrorsFromFile(filename, True)\n    print(\"errors\\n\", errors)\n\n\ndef testReadFileFromTestApp():\n    filename = \"app/page.module.scss\"\n    content = readFileFromTestApp(filename)\n    print(\"content\\n\", content)", "def testReadFileFromTestApp():\n    filename = \"app/page.module.scss\"\n    content = readFileFromTestApp(filename)\n    print(\"content\\n\", content)\n\n\ndef testGetClosestFile():\n    filename = \"components/Logo.tsx\"\n    answer = getClosestFile(filename)\n    print(\"answer\\n\", answer)", "\n\ndef testParseTypeAnswer():\n    message = \"\"\"Found 8 files. Generating type definitions...\nFunction rgb is missing argument $green. (/Users/turcottep/dev/debugGpt/test-app/app/page.module.scss[199:7])\n[GENERATED TYPES] components/App.module.scss.d.ts\n[GENERATED TYPES] components/AppLayout.module.scss.d.ts\n[GENERATED TYPES] components/Button.module.scss.d.ts\n[GENERATED TYPES] components/Footer.module.scss.d.ts\n[GENERATED TYPES] components/Header.module.scss.d.ts\n[GENERATED TYPES] components/LandingPage/LandingPage.module.scss.d.ts\n[GENERATED TYPES] components/Logo.module.scss.d.ts\"\"\"\n\n    answer = parseTypeAnswer(message)\n    print(\"testParseTypeAnswer:\\n\")\n    print(answer)", "\n\ndef testGenerateTypes():\n    command = \"npx typed-scss-modules **/*.scss --ignore node_modules/**/*.scss\"\n    output = runShell(command)\n    print(\"output\\n\", output)\n\n\nif __name__ == \"__main__\":\n    print(\"testTools.py\")\n    # testGenerateTypes()\n    # testGetClosestFile()\n    testReadFileFromTestApp()", "if __name__ == \"__main__\":\n    print(\"testTools.py\")\n    # testGenerateTypes()\n    # testGetClosestFile()\n    testReadFileFromTestApp()\n\n    # testParseTypeAnswer()\n"]}
{"filename": "src/cleanConsole.py", "chunked_list": ["from colorama import Fore, Style\nfrom pygments import highlight\nfrom pygments.lexers import PythonLexer\nfrom pygments.formatters import TerminalFormatter\n\n\ndef printCode(code):\n    # Use Pygments to highlight the code\n    highlighted_code = highlight(code, PythonLexer(), TerminalFormatter())\n\n    # Use Colorama to print it in color\n    print(Fore.GREEN + highlighted_code + Style.RESET_ALL)", "\n\ndef resetConsoleColor():\n    print(Style.RESET_ALL)\n\n\ndef setConsoleColor(color):\n    if color == \"green\":\n        print(Fore.GREEN)\n    elif color == \"red\":\n        print(Fore.RED)\n    elif color == \"blue\":\n        print(Fore.BLUE)\n    elif color == \"yellow\":\n        print(Fore.YELLOW)\n    elif color == \"magenta\":\n        print(Fore.MAGENTA)\n    elif color == \"cyan\":\n        print(Fore.CYAN)", "\n\ndef printUser(message):\n    print(Fore.GREEN + message + Style.RESET_ALL)\n"]}
{"filename": "src/testParse.py", "chunked_list": ["from agents.agent import parseToolUserAnswer\nfrom agents.utils.generateHistoryMessages import (\n    generateHistoryMessagesTikToken,\n)\nfrom agents.utils.juniordevprompt import getJuniorDevPromptMessages\n\n\ndef testHistory():\n    startingMessages = [\n        {\"role\": \"system\", \"content\": \"your are a gpt\"},\n        {\n            \"role\": \"system\",\n            \"content\": \"be helpful\",\n        },\n    ]\n    historyMessages = [\n        {\n            \"role\": \"user\",\n            \"content\": \"user0\",\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"assistant1\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"user2\",\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"assistant3\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"user4\",\n        },\n    ]\n\n    systemMessages = [\n        {\n            \"role\": \"system\",\n            \"content\": \"system0\",\n        },\n        {\n            \"role\": \"system\",\n            \"content\": \"system1\",\n        },\n    ]\n\n    messages = generateHistoryMessagesTikToken(\n        startingMessages, historyMessages, systemMessages\n    )\n    print(\"\\n\\nmessages:\", messages, \"\\n\\n\")\n    for message in messages:\n        print(message.get(\"role\"), \":\", message.get(\"content\")[0:100])", "\n\ndef testParseTools():\n    answer = \"\"\"\n    Yes, i can do that\n    \n    1 ::: runCommand (npm run build)\n\n2 ::: listFiles()\n\n3 ::: readFile(app/page.tsx)\n\n4 ::: readFile(components/LandingPage/LandingPage.tsx)\n\n5 ::: readFile(components/LandingPage/LandingPage.module.scss)\n\n6 ::: readFile(components/LandingPage/test.tsx)\n\n7 ::: readFile(components/AppLayout.tsx)\n\n8 ::: readFile(components/Button.tsx)\n\n9 ::: readFile(components/Footer.tsx)\n\n10 ::: readFile(components/Header.tsx)\n\n11 ::: readFile(components/Logo.tsx)\n\n12 ::: runCommand(npm run lint) [Note: This command is not allowed, so I will skip it]\n\n13 ::: finishedanswer (I have built the application and checked all the files for errors.)\n\nIf you want me to do something else, just ask me.\n\"\"\"\n\n    functionName, arguments, plan = parseToolUserAnswer(answer)\n    print(\"functionName:\", functionName)\n    # print(\"arguments:\", arguments)\n    for i, arg in enumerate(arguments):\n        print(\"argument\", i, \":\", arg)", "\n\nif __name__ == \"__main__\":\n    testHistory()\n"]}
{"filename": "src/tools/writeFile.py", "chunked_list": ["import os\nfrom lib.getPath import (\n    getPathFromComponents,\n    getPathFromTestApp,\n    getPathFromWorkspace,\n)\n\n\ndef writeFileToWorkspace(filename: str, content: str):\n    path = getPathFromWorkspace(filename)\n\n    with open(path, \"w\") as f:\n        f.write(content)\n    print(\"File written successfully to\", filename)", "def writeFileToWorkspace(filename: str, content: str):\n    path = getPathFromWorkspace(filename)\n\n    with open(path, \"w\") as f:\n        f.write(content)\n    print(\"File written successfully to\", filename)\n\n\ndef writeFileToComponents(filename: str, content: str):\n    path = getPathFromComponents(filename)\n\n    with open(path, \"w\") as f:\n        f.write(content)\n\n    answer = \"File written successfully to: components/\" + filename\n    # print(answer)\n    return answer", "def writeFileToComponents(filename: str, content: str):\n    path = getPathFromComponents(filename)\n\n    with open(path, \"w\") as f:\n        f.write(content)\n\n    answer = \"File written successfully to: components/\" + filename\n    # print(answer)\n    return answer\n", "\n\ndef writeFileToTestApp(filename: str, content: str):\n    filename = filename.replace('\"', \"\").replace(\"'\", \"\")\n    path = getPathFromTestApp(filename)\n\n    # recursively create directories if they don't exist\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n\n    try:\n        with open(path, \"w\") as f:\n            f.write(content)\n\n        answer = \"File written successfully to: test-app/\" + filename\n\n        return answer\n\n    except FileNotFoundError:\n        answer = \"File not found: \" + filename\n\n        return answer", ""]}
{"filename": "src/tools/runShell.py", "chunked_list": ["import os\nimport re\nimport subprocess\nimport time\nfrom lib.getPath import getTestAppPath\n\n\ndef runShellPopen(commandRaw: str):\n    # if commandRaw starts and ends with a quote, remove them\n    if commandRaw.startswith('\"') and commandRaw.endswith('\"'):\n        commandRaw = commandRaw[1:-1]\n\n    # Change directory to the desired folder\n    folder_path = getTestAppPath()\n    os.chdir(folder_path)\n\n    # Define the command to run\n    # command = [\"npm\", \"run\", \"build\"]\n    command = commandRaw.split(\" \")\n    # print(\"command: \", command)\n\n    maxExecutionTime = 10  # seconds\n\n    # Run the command using subprocess with stdout and stderr as PIPE\n    process = subprocess.Popen(\n        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True\n    )\n\n    print(\n        \"started process: \",\n        process,\n        \"for \",\n        maxExecutionTime,\n        \"seconds\",\n    )\n\n    if process.stdout == None:\n        print(\"process.stdout is None\")\n        return \"INTERNAL ERROR: process.stdout is None\"\n\n    if process.stderr == None:\n        print(\"process.stderr is None\")\n        return \"INTERNAL ERROR: process.stderr is None\"\n\n    # print(\"reached while loop\")\n\n    shellOutput = \"\"\n\n    startTime = time.time()\n\n    # Read and print the output in real-time\n    while True:\n        # print(\"waiting for output\")\n        output = process.stdout.read()\n        # print(\"waiting for error\")\n        error = process.stderr.read()\n\n        if output:\n            print(output.strip())\n            shellOutput += output.strip() + \"\\n\"\n\n        if error:\n            print(error.strip())\n            shellOutput += error.strip() + \"\\n\"\n\n        # print(\"polling process:\", process.returncode)\n\n        # if output == \"\" and process.poll() is not None:\n        #     break\n\n        if time.time() - startTime > maxExecutionTime:\n            print(\"maxExecutionTime reached\")\n            process.kill()\n            break\n\n    # Print the return code\n    print(\"Process exited with return code:\", process.returncode)\n\n    # print(\"shellOutput: \\n\", shellOutput)\n\n    return shellOutput", "\n\ndef runShell(commandRaw: str):\n    # Change directory to the desired folder\n    folder_path = getTestAppPath()\n    os.chdir(folder_path)\n\n    # Define the command to run\n    # command = [\"npm\", \"run\", \"build\"]\n    command = commandRaw.split(\" \")\n    # print(\"command: \", command)\n    maxExecutionTime = 30  # seconds\n    try:\n        process = subprocess.run(\n            command, timeout=maxExecutionTime, capture_output=True, text=True\n        )\n\n        answer = process.stdout + process.stderr\n\n        return answer\n\n    except subprocess.TimeoutExpired:\n        return (\n            \"Max execution time \"\n            + str(maxExecutionTime)\n            + \" reached before command finished\"\n        )", "\n\nBASEFILE = \"app/page.tsx\"\n\n\ndef getErrorsFromFile(filename, allFiles=False):\n    # print(\"running sccss types\")\n\n    command = \"npx typed-scss-modules **/*.scss --ignore node_modules/**/*.scss --logLevel error\"\n\n    # print(\"command: \", command)\n    answerTypes = runShell(command)\n    # print(\"answerTypes: \", answerTypes)\n    scssErrors = parseTypeAnswer(answerTypes)\n\n    # print(\"answerTypes: \", answerTypes)\n\n    # compileTscCommand = f\"npx tsc {filename} --jsx react --noEmit --esModuleInterop --allowArbitraryExtensions\"\n    # print(\"running tsc\")\n    debugCommand = \"node ignore/debug.js \" + filename\n\n    if allFiles:\n        debugCommand = f\"node ignore/debug.js {BASEFILE} --all\"\n\n    rawAnswer = runShell(debugCommand)\n\n    # print(\"rawAnswer: \", rawAnswer)\n\n    tsxErrors = \"\"\n    key = \"TSX ERROR #\"\n    if key in rawAnswer:\n        trash, tsxErrorTemp = rawAnswer.split(key, 1)\n        tsxErrors += key + tsxErrorTemp\n\n    if scssErrors == \"\" and tsxErrors == \"\":\n        return \"No errors found\"\n\n    allErrors = scssErrors + \"\\n\" + tsxErrors\n\n    return allErrors", "\n\ndef getErrorsFromAllFiles():\n    return getErrorsFromFile(BASEFILE, allFiles=True)\n\n\ndef getErrorsFromScssFile(filename):\n    command = f\"npx typed-scss-modules {filename} --logLevel error\"\n\n    # print(\"command: \", command)\n    answerTypes = runShell(command)\n    # print(\"answerTypes: \", answerTypes)\n    scssErrors = parseTypeAnswer(answerTypes)\n\n    return scssErrors", "\n\ndef parseTypeAnswer(answer: str):\n    if \"No files found.\" in answer:\n        return \"\"\n\n    lines = answer.split(\"\\n\")\n    errors = []\n    for line in lines:\n        if line == \"\":\n            continue\n        if line.startswith(\"Found\"):\n            continue\n        if line.startswith(\"[GENERATED TYPES]\"):\n            continue\n        errors.append(line)\n\n    # output = \"\\n\".join(errors)\n    output = \"\"\n\n    for i, error in enumerate(errors):\n        # get path and line number from error\n        # error = \"Function rgb is missing argument $green. (/Users/turcottep/dev/debugGpt/test-app/app/page.module.scss[199:7]\"\n\n        match = re.search(r\"\\((.*?)\\[(.*?)\\]\\)\", error)\n\n        # error = error.split(\")\")[1].strip()\n        if match:\n            basePath = getTestAppPath() + \"/\"\n            file_path = match.group(1)\n            relative_file_path = file_path.replace(basePath, \"\")\n            line_col = match.group(2)\n            line_number = int(line_col.split(\":\")[0])\n\n            partToRemove = f\"({file_path}[{line_col}])\"\n            # print(\"partToRemove: \", partToRemove)\n            error = error.replace(partToRemove, \"\")\n\n            # print(\"File path:\", file_path)\n            # print(\"Line number:\", line_number)\n\n            output += f\"SCSS ERROR #{i + 1} {relative_file_path} line {line_number }): {error}\\n\"\n        else:\n            output += f\"SCSS ERROR #{i + 1} {error}\\n\"\n\n    return output", ""]}
{"filename": "src/tools/stackOverflow.py", "chunked_list": ["from stackapi import StackAPI\n\nfrom tools.searchGoogle import getLinksFromGoogle\n\n\ndef searchStackOverflow(query):\n    query = query.replace('\"', \"\").replace(\"'\", \"\")\n    newQuery = f\"site:stackoverflow.com {query}\"\n    print(\"stack overflow query\")\n    print(newQuery, \"\\n\")\n    links = getLinksFromGoogle(newQuery)\n\n    if len(links) == 0:\n        return \"STACKOVERFLOW: No results found, try a different query.\"\n\n    # print(\"links\", links)\n    link = links[0]\n\n    # https://stackoverflow.com/questions/71433951/module-not-found-cant-resolve-next-js-typescript\n    postId = link.split(\"https://stackoverflow.com/questions/\")[1].split(\"/\")[0]\n\n    # print(\"postId\", postId)\n\n    return getAnswersForStackOverflowPost(postId)", "\n\ndef getAnswersForStackOverflowPost(postId):\n    SITE = StackAPI(\"stackoverflow\")\n\n    # res = SITE.fetch(\"questions/{ids}\", ids=[44439205], filter=\"withbody\")\n    # # print(\"res\", res)\n    # items = res[\"items\"]\n    # item = items[0]\n\n    # print(\"title:\", item[\"title\"])\n\n    # body = item[\"body\"]\n    # print(\"body:\\n\", body)\n\n    # # for item in items:\n    # #     print(\"item\\n\", item)\n\n    res = SITE.fetch(\n        \"questions/{ids}/answers\",\n        ids=[postId],\n        filter=\"withbody\",\n        # max=1,\n        sort=\"votes\",\n    )\n\n    # print(\"res\", res)\n    items = res[\"items\"]\n    # print(\"items\", items)\n    item = items[0]\n\n    # for item in items:\n    #     print(\"item\\nn\", item, \"\\n\\n\")\n\n    body = item[\"body\"]\n    # print(\"body:\\n\", body)\n\n    return body", ""]}
{"filename": "src/tools/moveFile.py", "chunked_list": ["import os\nfrom lib.getPath import getPathFromTestApp\n\n\ndef moveFileFromTestApp(oldPathRelative: str, newPathRelative: str):\n    oldPath = getPathFromTestApp(oldPathRelative)\n    newPath = getPathFromTestApp(newPathRelative)\n\n    try:\n        with open(oldPath, \"r\") as f:\n            content = f.read()\n            # delete the file\n\n    except FileNotFoundError as e:\n        print(\"File not found: \", e)\n        return \"File not found: \" + oldPathRelative\n\n    try:\n        with open(newPath, \"w\") as f:\n            f.write(content)\n\n    except FileNotFoundError as e:\n        print(\"File not found: \", e)\n        return \"File not found: \" + newPathRelative\n\n    os.remove(oldPath)\n\n    return \"File moved successfully to: \" + newPathRelative", ""]}
{"filename": "src/tools/searchGoogle.py", "chunked_list": ["import requests\n\n\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\n\ndef searchGoggleCustom(query: str):\n    queryClean = query.replace(\"```\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n    print(\"queryClean:\", queryClean)\n    items = _searchGoggleCustom(queryClean)\n    answer = []\n\n    for i, item in enumerate(items):\n        # print(i, item[\"title\"])\n        # print(\"########################\")\n        # print(item)\n        # print(\"########################\")\n        # print()\n        outputItem = {\n            \"title\": item[\"title\"],\n            \"snippet\": item[\"snippet\"],\n            \"link\": item[\"link\"],\n        }\n        answer.append(outputItem)\n        # answer.append(item[\"link\"])\n\n    return answer", "\ndef searchGoggleCustom(query: str):\n    queryClean = query.replace(\"```\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n    print(\"queryClean:\", queryClean)\n    items = _searchGoggleCustom(queryClean)\n    answer = []\n\n    for i, item in enumerate(items):\n        # print(i, item[\"title\"])\n        # print(\"########################\")\n        # print(item)\n        # print(\"########################\")\n        # print()\n        outputItem = {\n            \"title\": item[\"title\"],\n            \"snippet\": item[\"snippet\"],\n            \"link\": item[\"link\"],\n        }\n        answer.append(outputItem)\n        # answer.append(item[\"link\"])\n\n    return answer", "\n\ndef getLinksFromGoogle(query: str):\n    items = _searchGoggleCustom(query)\n    links = []\n\n    for i, item in enumerate(items):\n        # print(i, item[\"title\"])\n        # print(\"########################\")\n        # print(item)\n        # print(\"########################\")\n        # print()\n\n        links.append(item[\"link\"])\n\n    return links", "\n\ndef _searchGoggleCustom(query: str):\n    API_KEY = os.getenv(\"GOOGLE_SEARCH_API_KEY\") or \"MISSING API KEY\"\n    GOOGLE_CX_ID = os.getenv(\"GOOGLE_CX_ID\") or \"MISSING CX\"\n\n    url = \"https://www.googleapis.com/customsearch/v1\"\n    params = {\"key\": API_KEY, \"cx\": GOOGLE_CX_ID, \"q\": query, \"num\": 3}\n\n    res = requests.get(url, params=params)\n    # print(\"res\", res)\n    data = res.json()\n    if \"error\" in data:\n        raise Exception(data[\"error\"][\"message\"])\n    items = data.get(\"items\", [])\n\n    return items", ""]}
{"filename": "src/tools/listFiles.py", "chunked_list": ["# get a tree of files on the workspace\nimport os\n\nfrom lib.getPath import getTestAppPath, getWorkspacePath\n\n\ndef listFilesFromWorkspace():\n    path = getWorkspacePath()\n\n    return listFilesFromPath(path)", "\n\nignoreList = [\n    \"test-app\",\n    \".next\",\n    \"node_modules\",\n]\n\n\ndef listFilesFromPathTabs(path):\n    treeString = \"\"\n\n    print(\"path\", path)\n    # walk the directory recursively, adding a tab for each level but ignore what's in the ignoreList\n    for root, dirs, files in os.walk(path):\n        # remove the first directory from the path\n        # print(\"root\", root)\n        dirs[:] = [d for d in dirs if d not in ignoreList]\n\n        level = root.replace(path, \"\").count(os.sep)\n        indent = \"\\t\" * (level - 1)\n        dirString = os.path.basename(root)\n        # print(\"dirString\", dirString)\n        treeString += \"{}{}/\\n\".format(indent, dirString)\n        subindent = \"\\t\" * (level)\n        for f in files:\n            treeString += \"{}{}\\n\".format(subindent, f)\n\n    # remove first line from treeString\n    treeString = treeString.split(\"\\n\", 1)[1]\n    return treeString", "\ndef listFilesFromPathTabs(path):\n    treeString = \"\"\n\n    print(\"path\", path)\n    # walk the directory recursively, adding a tab for each level but ignore what's in the ignoreList\n    for root, dirs, files in os.walk(path):\n        # remove the first directory from the path\n        # print(\"root\", root)\n        dirs[:] = [d for d in dirs if d not in ignoreList]\n\n        level = root.replace(path, \"\").count(os.sep)\n        indent = \"\\t\" * (level - 1)\n        dirString = os.path.basename(root)\n        # print(\"dirString\", dirString)\n        treeString += \"{}{}/\\n\".format(indent, dirString)\n        subindent = \"\\t\" * (level)\n        for f in files:\n            treeString += \"{}{}\\n\".format(subindent, f)\n\n    # remove first line from treeString\n    treeString = treeString.split(\"\\n\", 1)[1]\n    return treeString", "\n\ndef listFilesFromPath(path):\n    treeString = \"\"\n\n    # print(\"path\", path)\n    # walk the directory recursively, adding a tab for each level but ignore what's in the ignoreList\n    for root, dirs, files in os.walk(path):\n        # remove the first directory from the path\n        # print(\"root\", root)\n        dirs[:] = [d for d in dirs if d not in ignoreList]\n\n        level = root.replace(path, \"\")\n\n        if \"ignore\" in level:\n            continue\n        # indent = \"\\t\" * (level - 1)\n        # dirString = os.path.basename(root)\n        # # print(\"dirString\", dirString)\n        # treeString += \"{}{}/\\n\".format(indent, dirString)\n        # subindent = \"\\t\" * (level)\n        for f in files:\n            if \".d.ts\" in f:\n                continue\n            filePath = level + \"/\" + f + \"\\n\"\n            treeString += filePath[1:]\n\n    # remove first line from treeString\n    treeString = treeString.split(\"\\n\", 1)[1]\n    return treeString", "\n\ndef listFilesFromTestApp():\n    path = getTestAppPath()\n\n    return listFilesFromPath(path)\n"]}
{"filename": "src/tools/readFile.py", "chunked_list": ["import numpy\nfrom lib.getPath import getPathFromTestApp, getPathFromWorkspace\nfrom tools.listFiles import listFilesFromTestApp\nfrom tools.runShell import getErrorsFromFile, getErrorsFromScssFile\n\n\ndef readFile(filename: str):\n    path = getPathFromWorkspace(filename)\n\n    return readFileFullPath(path)", "\n\ndef levenshteinDistanceDP(token1, token2):\n    distances = numpy.zeros((len(token1) + 1, len(token2) + 1))\n\n    for t1 in range(len(token1) + 1):\n        distances[t1][0] = t1\n\n    for t2 in range(len(token2) + 1):\n        distances[0][t2] = t2\n\n    a = 0\n    b = 0\n    c = 0\n\n    for t1 in range(1, len(token1) + 1):\n        for t2 in range(1, len(token2) + 1):\n            if token1[t1 - 1] == token2[t2 - 1]:\n                distances[t1][t2] = distances[t1 - 1][t2 - 1]\n            else:\n                a = distances[t1][t2 - 1]\n                b = distances[t1 - 1][t2]\n                c = distances[t1 - 1][t2 - 1]\n\n                if a <= b and a <= c:\n                    distances[t1][t2] = a + 1\n                elif b <= a and b <= c:\n                    distances[t1][t2] = b + 1\n                else:\n                    distances[t1][t2] = c + 1\n\n    return distances[len(token1)][len(token2)]", "\n\ndef getClosestFile(filename: str):\n    files = listFilesFromTestApp().split(\"\\n\")\n    minDistance = 100000000000\n    closestFile = \"None\"\n    for file in files:\n        dsitance = levenshteinDistanceDP(filename, file)\n        print(\"file\", file, \"distance\", dsitance)\n        if dsitance < minDistance:\n            minDistance = dsitance\n            closestFile = file\n\n    return closestFile", "\n\ndef readFileFromTestApp(filename: str):\n    filename = filename.replace('\"', \"\").replace(\"'\", \"\")\n    extension = filename.split(\".\")[-1]\n    if extension == \"tsx\" or extension == \"scss\":\n        return readCodeFile(filename)\n\n    try:\n        path = getPathFromTestApp(filename)\n        return readFileFullPath(path)\n    except FileNotFoundError:\n        return f\"ERROR: File not found: '{filename}'. Closest file: `{getClosestFile(filename)}`\"", "\n\ndef readCodeFile(filename: str):\n    # extension = filename.split(\".\")[-1]\n    # print(\"extension\", extension)\n    path = getPathFromTestApp(filename)\n\n    try:\n        content = readFileFullPath(path)\n    except FileNotFoundError:\n        return f\"ERROR: File not found: '{filename}'. Closest file: `{getClosestFile(filename)}`\"\n\n    # # add linenumber) to each line\n    # lines = content.split(\"\\n\")\n    # linesWithLineNumbers = []\n    # for i, line in enumerate(lines):\n    #     linesWithLineNumbers.append(str(i + 1) + \") \" + line + \"\\n\")\n\n    # content = \"\".join(linesWithLineNumbers)\n\n    # errors = getErrorsFromFile(filename)\n    if filename.endswith(\".tsx\"):\n        errors = getErrorsFromFile(filename)\n    elif filename.endswith(\".scss\"):\n        errors = getErrorsFromScssFile(filename)\n    else:\n        errors = \"\"\n\n    output = f\"\"\"FILE:\n     \n{filename}\n\nCONTENT:\n\n{content}\n    \nERRORS:\n\n{errors}\n\n\"\"\"\n\n    return output", "\n\ndef readFileFullPath(pathToFile: str):\n    with open(pathToFile, \"r\") as f:\n        content = f.read()\n\n    return content\n"]}
{"filename": "src/agents/agent.py", "chunked_list": ["import re\nfrom agents.utils.debuggptprompt import (\n    getDebugGptFileMessage,\n    getDebugGptPromptMessages,\n    getFeedbackFromCodeExecutionPrompt,\n    getFeedbackFromUserPrompt,\n)\nfrom agents.utils.juniordevprompt import (\n    getJuniorDevFileMessage,\n    getJuniorDevPromptMessages,", "    getJuniorDevFileMessage,\n    getJuniorDevPromptMessages,\n)\nfrom agents.utils.seniordevprompt import (\n    getSeniorDevPromptMessages,\n)\nfrom agents.utils.generateHistoryMessages import (\n    generateHistoryMessageFull,\n    generateHistoryMessagesLimited,\n    generateHistoryMessagesTikToken,", "    generateHistoryMessagesLimited,\n    generateHistoryMessagesTikToken,\n)\nfrom cleanConsole import printUser, resetConsoleColor, setConsoleColor\nfrom openaiLib.chatGpt import askChatGpt\nfrom tools.listFiles import listFilesFromTestApp\nfrom tools.moveFile import moveFileFromTestApp\nfrom tools.readFile import readCodeFile, readFileFromTestApp\nfrom tools.runShell import getErrorsFromFile, runShell\nfrom tools.searchGoogle import searchGoggleCustom", "from tools.runShell import getErrorsFromFile, runShell\nfrom tools.searchGoogle import searchGoggleCustom\nfrom tools.stackOverflow import searchStackOverflow\nfrom tools.writeFile import writeFileToTestApp\n\n\nclass Agent:\n    def __init__(self):\n        self.messageHistory = []\n        self.promptHistory = self.getPromptMessages()\n        self.name = \"DefaultAgent\"\n\n    def getPromptMessages(self):\n        raise NotImplementedError\n\n    def speak(self, state):\n        raise NotImplementedError\n\n    def addSystemMessage(self, systemMessages):\n        return systemMessages\n\n    def addPlan(self, systemMessages, plan):\n        return NotImplementedError\n\n    def startLoop(self, prompt: str):\n        # answer = \"runCommand(npm run build)\"  # hardcode the first command\n        # print(\"initial prompt:\\n\", prompt)\n\n        userContent = prompt\n        plan = \"\"\n\n        printUser(\"################## user message : \\n\" + userContent)\n\n        maxIterations = 100\n        autoRunIterations = 0\n        for i in range(maxIterations):\n            userMessage = {\"role\": \"user\", \"content\": userContent}\n\n            # type: ignore\n            # printUser(\"################## answer from user message : \\n\" + userContent)\n\n            self.messageHistory.append(userMessage)\n\n            systemMessages = self.addSystemMessage([])\n\n            systemMessages = self.addPlan(systemMessages, plan)\n\n            # limit history to the last 4 messages\n            self.messageHistory = self.messageHistory[-4:]\n\n            messages = generateHistoryMessagesTikToken(\n                self.promptHistory, self.messageHistory, systemMessages\n            )\n\n            # setConsoleColor(\"yellow\")\n            # print(\"\\n\\n################## messages: \\n\")\n            # for i, message in enumerate(messages):\n            #     print(message.get(\"role\"), \":   \\n\\n\")\n            #     lines = message.get(\"content\").split(\"\\n\")\n            #     for line in lines:\n            #         print(\"\\t\", line)\n            #     print(\"\\n\")\n            # # print(\"\\n################## prompt from user: \\n\")\n            # # print(userContent)\n            # resetConsoleColor()\n\n            self.speak(True)\n            print(\"\\n\\n################## answer from\", self.name, \": \\n\")\n            answer = askChatGpt(messages)\n            print(\"\\n################## \")\n            self.speak(False)\n\n            assistantMessage = {\n                \"role\": \"assistant\",\n                \"content\": answer,\n            }\n\n            self.messageHistory.append(assistantMessage)\n\n            userContent = \"DEFAULT USER CONTENT\"\n            functionName = \"NO FUNCTION NAME FOUND\"\n            arguments = [\"DEFAULT ARGUMENTS\"]\n\n            try:\n                functionName, arguments, plan = parseToolUserAnswer(answer)\n\n                if functionName == \"finishedanswer\":\n                    return f\"AGENT FINISHED with message: + \\n {arguments[0]}\"\n                print(\"WILL RUN COMMAND:\", functionName)\n                for i, arg in enumerate(arguments):\n                    print(\"ARGUMENT\", i, \": \", arg)\n            except Exception as e:\n                print(e)\n                userContent = \"INTERNAL ERROR: \" + str(e)\n\n            if autoRunIterations <= 0:\n                # wait for user input to continue\n                inputted = input(\n                    \"\\nPress Enter to run, Type 'run -N' to run it for N iterations, Type 't' to tell agent to try again or type anything to send it as feedback:\"\n                )\n\n                # check for run command\n                if re.match(r\"run\\s*-\\s*\\d*\", inputted):\n                    autoRunIterations = int(inputted.split(\"-\")[1])\n                    print(\"auto running for\", autoRunIterations, \"iterations...\")\n\n                if inputted == \"\" or autoRunIterations > 0:\n                    print(\"Running the command...\")\n                    output = executeToolOrAgent(functionName, arguments)\n\n                    setConsoleColor(\"yellow\")\n                    print(\"\\n################## output from tool: \\n\")\n                    print(output)\n                    resetConsoleColor()\n\n                    userContent = getFeedbackFromCodeExecutionPrompt(\n                        functionName, output  # type: ignore\n                    )\n\n                elif inputted == \"t\" or inputted == \"T\":\n                    print(\"Trying again...\")\n                    userContent = getFeedbackFromUserPrompt(\"Try again\")\n                else:\n                    print(\"sending feedback...\")\n                    print(\"feedback:\", inputted)\n                    userContent = getFeedbackFromUserPrompt(inputted)\n\n            else:\n                autoRunIterations -= 1\n                print(\"Auto Running the command...\")\n                output = executeToolOrAgent(functionName, arguments)\n                userContent = getFeedbackFromCodeExecutionPrompt(\n                    functionName, output  # type: ignore\n                )\n\n        return f\"INTERNAL ERROR: agent {self.name} reached maxIterations: {maxIterations} without reaching endDebugging\"", "\n\nclass JuniorDev(Agent):\n    def __init__(self):\n        super().__init__()\n        self.name = \"JuniorDev\"\n\n    def getPromptMessages(self):\n        return getJuniorDevPromptMessages()\n\n    def addSystemMessage(self, systemMessages):\n        fileSystemMessage = getJuniorDevFileMessage()\n\n        systemMessages.append(fileSystemMessage)\n\n        return systemMessages\n\n    def speak(self, state):\n        if state:\n            setConsoleColor(\"cyan\")\n        else:\n            resetConsoleColor()", "\n\nclass DebugGpt(Agent):\n    def __init__(self):\n        super().__init__()\n        self.name = \"DebugGpt\"\n\n    def getPromptMessages(self):\n        return getDebugGptPromptMessages()\n\n    def addSystemMessage(self, systemMessages):\n        fileSystemMessage = getDebugGptFileMessage()\n\n        systemMessages.append(fileSystemMessage)\n\n        return systemMessages\n\n    def speak(self, state):\n        if state:\n            setConsoleColor(\"cyan\")\n        else:\n            resetConsoleColor()\n\n    def addPlan(self, systemMessages, plan):\n        return systemMessages", "\n\nclass SeniorDev(Agent):\n    def __init__(self):\n        super().__init__()\n        self.name = \"SeniorDev\"\n\n    def getPromptMessages(self):\n        return getSeniorDevPromptMessages()\n\n    def speak(self, state):\n        if state:\n            setConsoleColor(\"magenta\")\n        else:\n            resetConsoleColor()", "\n\ndef executeToolOrAgent(functionName, arguments):\n    if functionName == \"NO FUNCTION NAME FOUND\":\n        return \"NO FUNCTION NAME FOUND\"\n    if functionName == \"juniorDevGpt\":\n        agent = JuniorDev()\n        return agent.startLoop(arguments[0])\n    elif functionName == \"searchGpt\":\n        return searchGoggleCustom(arguments[0])\n    elif functionName == \"getBugs\":\n        return getErrorsFromFile(\"\", allFiles=True)\n    elif functionName == \"runShell\":\n        return runShell(arguments[0])\n    elif functionName == \"openFile\":\n        return readFileFromTestApp(arguments[0])\n    elif functionName == \"editFile\":\n        initialPrompt = \"You are editing the file below:\"\n\n        fileContent = readFileFromTestApp(arguments[0])\n        return (\n            fileContent\n            + \"\\n\\nUse the writeFile tool to overwrite the file with your changes\"\n        )\n    elif functionName == \"listFiles\":\n        return listFilesFromTestApp()\n    elif functionName == \"moveFile\":\n        return moveFileFromTestApp(arguments[0], arguments[1])\n    elif functionName == \"searchStackOverflow\":\n        return searchStackOverflow(arguments[0])\n    elif functionName == \"searchGoogle\":\n        return searchGoggleCustom(arguments[0])\n    elif functionName == \"writeFile\":\n        return writeFileToTestApp(arguments[0], arguments[1].replace(\"```\", \"\"))\n    elif functionName == \"endDebugging\":\n        return \"Debugging ended\"\n    else:\n        return f\"INTERNAL ERROR: command `{functionName}` not found\"", "\n\ndef parseToolUserAnswer(answer):\n    # 1 ::: writeFile(components/LandingPage.tsx, ```import React from \"react\";\n    # import s from \"./LandingPage.module.scss\";\n\n    # const LandingPage = () => {\n    # return (\n    #     <div className={s.container}>\n    #         <span>hello</span>\n    #     </div>\n    # );\n    # };\n\n    # export default LandingPage;\n    # ```)\n\n    try:\n        explanation, commands = answer.split(\"\u00ac\", 1)\n        commands = commands.split(\"\u00ac\")[0]\n\n        plan = explanation\n        firstCommand = commands\n\n        # index, answer = answer.split(\":::\", 1)\n        # firstCommand = answer.split(\":::\", 1)[0].strip()\n\n        # # if firstCommand ends with \\n2, \\n1 or any number, remove it\n        # if firstCommand[-1].isdigit():\n        #     firstCommand = firstCommand.rsplit(\"\\n\", 1)[0]\n\n        functionName, arguments = firstCommand.split(\"(\", 1)\n        arguments_reversed = arguments[::-1]\n        arguments_reversed = arguments_reversed.split(\")\", 1)[1]\n        arguments = arguments_reversed[::-1]\n\n        argumentsList = splitByCommaButNotByCodeblock(arguments)\n        # split by , but not by , inside ``` ```\n\n        functionName = functionName.strip()\n\n        for i in range(len(argumentsList)):\n            argumentsList[i] = argumentsList[i].strip()\n\n        return functionName, argumentsList, plan\n    except:\n        raise Exception(\"Invalid answer format\")", "\n\ndef splitByCommaButNotByCodeblock(string):\n    code_blocks = re.findall(r\"```[\\s\\S]+?```\", string)  # Extract code blocks\n    placeholders = []  # Placeholder strings for code blocks\n    for i, block in enumerate(code_blocks):\n        placeholder = f\"__CODEBLOCK_{i}__\"\n        string = string.replace(block, placeholder)\n        placeholders.append(placeholder)\n\n    parts = re.split(\n        r\",(?![^`]*`[^`]*`)\", string\n    )  # Split by comma excluding code blocks\n\n    # Replace back the code blocks\n    for i, placeholder in enumerate(placeholders):\n        parts = [part.replace(placeholder, code_blocks[i]) for part in parts]\n\n    return parts", ""]}
{"filename": "src/agents/agentPrompt.py", "chunked_list": ["def getPlanMessage(plan: str):\n    if plan == \"\":\n        return None\n\n    message = {\n        \"role\": \"system\",\n        \"content\": f\"\"\"This is your current plan:\n```\n{plan}\n```\n\"\"\",\n    }\n\n    return message", ""]}
{"filename": "src/agents/utils/juniordevprompt.py", "chunked_list": ["import agents.utils.basicprompts as p\nfrom tools.listFiles import listFilesFromTestApp\n\nsystem_init = \"\"\"\nYour name is juniordevGpt, you are a junior full-stack developper powered by chatGpt. \nYour goal is to answer the command given to you, and send the result to the user.\nYou are a very good developer, and you know how to write clean, maintainable code.\nYou also are very good at finding errors in code, and you can fix them easily.\nEven the most complex errors, you are able to fix them, by asking yourself the right questions and using all the tools at your disposal.\nYou don't have to answer the question right away, you can take your time to think about it, and then answer it.", "Even the most complex errors, you are able to fix them, by asking yourself the right questions and using all the tools at your disposal.\nYou don't have to answer the question right away, you can take your time to think about it, and then answer it.\n\n\"\"\"\n\nreevaluateAtEachStep = \"\"\"\nEach command will be executed by the agent or tool you chose, and the result will be sent to you.\nYou will have to analyze the result, and decide what to do next.\nYou could continue with the original plan, or change the plan based on the result.\"\"\"\n", "You could continue with the original plan, or change the plan based on the result.\"\"\"\n\ntools_list = \"\"\"\n1: searchGoogle ( query ) - to search the web for answers, not code specific\n2: writeFile ( ``` content ``` ) - to write code in a file. Always use 3 backticks to write content in a file\n3: readFile ( pathToFile ) - to read code from a file\n4: listFiles (  ) - to list the files in the workspace to know what files are available to read or write\n5: generateCode ( ) - to generate code using by giving a prompt to the GPT-3-5-turbo model\n6: finishedanswer ( messageSummaryOfWhatHasBeenDoneToSendToUser  ) - to finish your answer and send it to the user\n7: searchStackOverflow ( query ) - to search for answers to your coding questions", "6: finishedanswer ( messageSummaryOfWhatHasBeenDoneToSendToUser  ) - to finish your answer and send it to the user\n7: searchStackOverflow ( query ) - to search for answers to your coding questions\n8: runCommand ( command ) - to run a command in the terminal\n\"\"\"\n\nonly_use = \"\"\"\nRemember, your steps can only tools and agents. You are not allowed to use anything else. No sentences, no words, no numbers, no symbols, no emojis, no nothing. \nOnly tools and agents.\nAs a reminder, these are your available tools and agents:\n\"\"\"", "As a reminder, these are your available tools and agents:\n\"\"\"\n\nagents_list = \"\"\"\n1: searchGpt - give a query and receive a summary of the first results of a google search\n\"\"\"\n\ngood_n_bad_examples = \"\"\"\n\nGood Answer:", "\nGood Answer:\n1 ::: runCommand ( npm run build )\n\nBad Answer ( bad because there is extra text ):\n2 ::: I would like to execute the readFile command to check the content of the LandingPage.tsx file.\n\nGood Answer ( good because it only uses the tool ):\n1 ::: readFile( components/LandingPage.tsx )\n", "1 ::: readFile( components/LandingPage.tsx )\n\nBad Answer ( bad because there is only 1 backtick instead of 3 ):\n3 ::: writeFile( components/LandingPage.tsx,`import React from \"react\";\nimport s from \"./LandingPage.module.scss\";\n\nconst LandingPage = () => {\n  return (\n    <div className={s.container}>\n        <span>hello</span>", "    <div className={s.container}>\n        <span>hello</span>\n    </div>\n  );\n};\n\nexport default LandingPage;\n` )\n\nGood Answer (good because there are 3 backticks around the content):", "\nGood Answer (good because there are 3 backticks around the content):\n1 ::: writeFile( components/LandingPage.tsx,```import React from \"react\";\nimport s from \"./LandingPage.module.scss\";\n\nconst LandingPage = () => {\n  return (\n    <div className={s.container}>\n        <span>hello</span>\n    </div>", "        <span>hello</span>\n    </div>\n  );\n};\n\nexport default LandingPage;\n``` )\n\n\"\"\"\n", "\"\"\"\n\nold_reminder = \"\"\"\nWhen you want to tell the user something, you need to put your message in betwen *** and ***.\nWhen you want to output the plan, you need to put it in between $$$ and $$$.\nWhen you want to output code, you need to put it in between ``` and ```.\n\nThe format for your answer should be:\n*** | message | ***\n$$$ | plan | $$$", "*** | message | ***\n$$$ | plan | $$$\n``` | code | ```\n\nOnly output an answer using the formats described above.\n\nDon't EVER write anything outside of the *** and *** tags, $$$ and $$$ tags, or ``` and ``` tags.\nIF you do it, an innocent woman will die.\n\nHere is a correct answer:", "\nHere is a correct answer:\n*** To build the application, we need to make sure there are no errors in the code, and then run the build command ***\n$$$\n1 ::: runCommand ( npm run build )\n2 ::: readFile( components/LandingPage.tsx )\n3 ::: writeFile( components/LandingPage.tsx,```import React from \"react\";\nexport default function LandingPage() {\n  return (\n    <div>", "  return (\n    <div>\n      <span>hello</span>\n    </div>\n  );\n}\n``` )\n$$$\n\"\"\"\n", "\"\"\"\n\nremember = \"\"\"\nThis is an example of an answer using the correct format:\n1 ::: runCommand ( npm run build )\n2 ::: readFile( components/LandingPage.tsx )\n3 ::: writeFile( components/LandingPage.tsx,```import React from \"react\";\nexport default function LandingPage() {\n  return (\n    <div>", "  return (\n    <div>\n      <span>hello</span>\n    </div>\n  );\n}\n``` )\n\n\nYou can only use tools and agents that are available to you. You can't invent new tools or agents.", "\nYou can only use tools and agents that are available to you. You can't invent new tools or agents.\n\n\n\nOnce a step is done and you have the result, you remove the step from the plan and continue with the next step.\n\n\"\"\"\n\ntestUserPrompt = \"\"\"Code an app that is tinder for dogs\"\"\"", "\ntestUserPrompt = \"\"\"Code an app that is tinder for dogs\"\"\"\n\ntools_n_agents = p.tools_n_agents_init + tools_list + agents_list\n\nremember_only_use = only_use + tools_list + agents_list + p.tech_rules\n\n\ndef getJuniorDevPromptMessages():\n    plannerPrompt = (\n        system_init\n        + tools_n_agents\n        + good_n_bad_examples\n        + remember\n        + reevaluateAtEachStep\n        + remember_only_use\n    )\n\n    promptMessage = {\"role\": \"system\", \"content\": plannerPrompt}\n\n    return [promptMessage]", "def getJuniorDevPromptMessages():\n    plannerPrompt = (\n        system_init\n        + tools_n_agents\n        + good_n_bad_examples\n        + remember\n        + reevaluateAtEachStep\n        + remember_only_use\n    )\n\n    promptMessage = {\"role\": \"system\", \"content\": plannerPrompt}\n\n    return [promptMessage]", "\n\ndef getSeniorDevGptTestPromptRaw():\n    return testUserPrompt\n\n\ndef getJuniorDevFileMessage():\n    message = {\n        \"role\": \"system\",\n        \"content\": \"These are the files in the project:\\n\" + listFilesFromTestApp(),\n    }\n\n    return message", "\n\ndef getFeedbackFromAgentPromptMessage(stepIndex, agentName, agentCommand, agentAnswer):\n    prompt = f\"\"\"Step index {stepIndex}. You asked `{agentName}` to execute the following command: `{agentCommand}`, and he responded with `{agentAnswer}`.\nWhat is the next agent command you want to execute?\\nRespond using the same template as before:\n`stepIndex ::: agentName - agentCommand`\"\"\"\n\n    promptMessage = {\"role\": \"user\", \"content\": prompt}\n\n    return promptMessage", ""]}
{"filename": "src/agents/utils/seniordevprompt.py", "chunked_list": ["import agents.utils.basicprompts as p\n\n\nsystem_init = \"\"\"\nYour name is debugGpt and your are an experienced web developper. You are here to help the user debug his app and fix the errors.\nYou are a very good developer, and you know how to write clean, maintainable code. \nYou are also able to come up with creative solutions to complex problems, so when the user gives you a command, you can find the best way to implement it. \n\nYou have to build the app successfully using `npm run build` and then fix any errors that comes up.\nYour goal is to use the tools and agents provided to you to fix the errors and build the app successfully.", "You have to build the app successfully using `npm run build` and then fix any errors that comes up.\nYour goal is to use the tools and agents provided to you to fix the errors and build the app successfully.\nYou have only fully answered the user's question when the app is built successfully and there are no errors.\n\n\"\"\"\n\n\ntools_list = \"\"\"\naskStackOverflow(question) : get the first answer to the most similar question on stackoverflow\nreadFile(filename) : get the content of the file so you can see what the error is. You don't need to write to the file if you don't want to.", "askStackOverflow(question) : get the first answer to the most similar question on stackoverflow\nreadFile(filename) : get the content of the file so you can see what the error is. You don't need to write to the file if you don't want to.\nlistFiles() : list the files in the workspace to know what files are available to read or write\nfinishedanswer() : use it when you have fully answered the user's question\n\"\"\"\n\nagents_list = \"\"\"\n1: juniorDevGpt(command) - give a the summary of the code you want to generate as a command, and the code will be generated by this agent\n\"\"\"\n", "\"\"\"\n\nreevaluateAtEachStep = \"\"\"\nEach command will be executed by the agent you chose, and the result will be sent to you.\nYou will have to analyze the result, and decide what to do next.\nYou could continue with the original plan, or change the plan based on the result.\nYou have to tell the user each time you recieve a result if it changed your plan or not, and why.\n\"\"\"\n\ngood_n_bad_examples = \"\"\"", "\ngood_n_bad_examples = \"\"\"\n\nYou should only answer with the tool and nothing else.\n\nGood Answer:\n1 ::: juniorDevGpt( build the application and fix any errors )\n\nBad Answer (bad because there is extra text):\n2 ::: I would like to execute the readFile command to check the content of the LandingPage.tsx file.", "Bad Answer (bad because there is extra text):\n2 ::: I would like to execute the readFile command to check the content of the LandingPage.tsx file.\n\nGood Answer (good because it only uses the tool):\n1 ::: readFile( components/LandingPage.tsx )\n\nBad Answer (bad because there is only 1 backtick instead of 3):\n3 ::: writeFile( components/LandingPage.tsx,`import React from \"react\";\nimport s from \"./LandingPage.module.scss\";\n", "import s from \"./LandingPage.module.scss\";\n\nconst LandingPage = () => {\n  return (\n    <div className={s.container}>\n        <span>hello</span>\n    </div>\n  );\n};\n", "};\n\nexport default LandingPage;\n`)\n\nGood Answer (good because there are 3 backticks around the content):\n1 ::: writeFile(components/LandingPage.tsx,```import React from \"react\";\nimport s from \"./LandingPage.module.scss\";\n\nconst LandingPage = () => {", "\nconst LandingPage = () => {\n  return (\n    <div className={s.container}>\n        <span>hello</span>\n    </div>\n  );\n};\n\nexport default LandingPage;", "\nexport default LandingPage;\n``` )\n\"\"\"\nold_reminder = \"\"\"\nWhen you want to tell the user something, you need to put your message in betwen *** and ***.\nWhen you want to output the plan, you need to put it in between $$$ and $$$.\nWhen you want to output code, you need to put it in between ``` and ```.\n\nThe format for your answer should be:", "\nThe format for your answer should be:\n*** | message | ***\n$$$ | plan | $$$\n``` | code | ```\n\nOnly output an answer using the formats described above.\n\nDon't EVER write anything outside of the *** and *** tags, $$$ and $$$ tags, or ``` and ``` tags.\nIF you do it, an innocent woman will die.", "Don't EVER write anything outside of the *** and *** tags, $$$ and $$$ tags, or ``` and ``` tags.\nIF you do it, an innocent woman will die.\n\nHere is a correct answer:\n*** To build the application, we need to make sure there are no errors in the code, and then run the build command ***\n$$$\n1 ::: juniorDevGpt ( build the application and fix any errors )\n2 ::: juniorDevGpt ( re build the application to make sure there are no errors )\n$$$\n", "$$$\n\n\n\"\"\"\n\nremember = \"\"\"\nThis is an example of an answer using the correct format:\n1 ::: juniorDevGpt ( build the application and fix any errors )\n2 ::: juniorDevGpt ( re build the application to make sure there are no errors )\n", "2 ::: juniorDevGpt ( re build the application to make sure there are no errors )\n\n\n\nYou can only use tools and agents that are available to you. You can't invent new tools or agents.\n\nOnce a step is done and you have the result, you remove the step from the plan and continue with the next step.\n\nAlso, remember you should prioritize using juniorDevGpt to generate code, and only use the other tools when you can't use juniorDevGpt.\nJust like in a company, you should delegate as much as possible to juniorDevGpt, and only do the work yourself when you have to.", "Also, remember you should prioritize using juniorDevGpt to generate code, and only use the other tools when you can't use juniorDevGpt.\nJust like in a company, you should delegate as much as possible to juniorDevGpt, and only do the work yourself when you have to.\nYou are more skilled at critical thinking and problem solving, so you should focus on that, and let juniorDevGpt do the tedious work.\n\"\"\"\n\n\ninit = system_init + p.prompting_utils + p.using_steps + reevaluateAtEachStep\ntools_n_agents = p.tools_n_agents_init + tools_list + agents_list\ntech = p.tech_stack + p.tech_rules\n", "tech = p.tech_stack + p.tech_rules\n\nrealquick = \"\"\"You are a planner AI. Your goal is to debug a web application, but you need to do everything through JuniorDevGpt.\nTo use it, say:\njuniorDevGpt(command)\n\nAnswer with the command only and nothing else.\"\"\"\n\n\ndef getSeniorDevPromptMessages():\n    promptMessage = [\n        {\"role\": \"system\", \"content\": init + tools_n_agents + tech + remember}\n    ]\n    # promptMessage = [{\"role\": \"system\", \"content\": realquick}]\n    return promptMessage", "\ndef getSeniorDevPromptMessages():\n    promptMessage = [\n        {\"role\": \"system\", \"content\": init + tools_n_agents + tech + remember}\n    ]\n    # promptMessage = [{\"role\": \"system\", \"content\": realquick}]\n    return promptMessage\n\n\ndef getFeedbackFromUserPrompt(feedback):\n    prompt = f\"\"\"The user stopped you from running the command and gave you this feedback:\n{feedback}\n\nWhat is the next command you would like to execute?\nAnswer with the command only and nothing else.\n\"\"\"\n    return prompt + remember_both + reevaluateAtEachStep", "\ndef getFeedbackFromUserPrompt(feedback):\n    prompt = f\"\"\"The user stopped you from running the command and gave you this feedback:\n{feedback}\n\nWhat is the next command you would like to execute?\nAnswer with the command only and nothing else.\n\"\"\"\n    return prompt + remember_both + reevaluateAtEachStep\n", "\n\nremember_both = \"\"\"\nWhen you want to tell the user something, you need to put your message in betwen *** and ***.\nWhen you want to output the plan, you need to put it in between $$$ and $$$.\nWhen you want to output code, you need to put it in between ``` and ```.\n\nThe format for your answer should be:\n*** | message | ***\n$$$ | plan | $$$", "*** | message | ***\n$$$ | plan | $$$\n``` | code | ```\n\nOnly output an answer using the formats described above.\n\nDon't EVER write anything outside of the *** and *** tags, $$$ and $$$ tags, or ``` and ``` tags.\nIF you do it, an innocent woman will die.\n\nHere is a correct answer:", "\nHere is a correct answer:\n*** To build the application, we need to make sure there are no errors in the code, and then run the build command ***\n$$$\n1 ::: | tool | ( | arguments | )\n2 ::: | tool | ( | arguments | )\n$$$\n\n\nYou can only use tools and agents that are available to you. You can't invent new tools or agents.", "\nYou can only use tools and agents that are available to you. You can't invent new tools or agents.\n\nOnce a step is done and you have the result, you remove the step from the plan and continue with the next step.\n\"\"\"\n"]}
{"filename": "src/agents/utils/basicprompts.py", "chunked_list": ["prompting_utils = \"\"\"\nAnytime you see | |, you should assume the text inside the | | is a variable, and you should replace it with the value of the variable.\n\"\"\"\n\nusing_steps = \"\"\"\nWhen the user gives you a command, you have to analyze what he wants you to achieve, and create steps to answer it.\nThouroughly analyze the command to understand what the user wants to achieve.\nIf you feel like you are missing important information to achieve the command, you can ask the user for more information.\nOtherwise, you should create steps to achieve the command.\nYou can use basic tools to get a better understanding of the command, or of the code you are working on, but you use agents in your steps to achieve the command.", "Otherwise, you should create steps to achieve the command.\nYou can use basic tools to get a better understanding of the command, or of the code you are working on, but you use agents in your steps to achieve the command.\n\nOnce you have created the steps, you should list them, and start executing them one by one, but always waiting for the return of the previous step and feedback from the user before executing the next step.\nIf the user gives you feedback that the step was not executed correctly, you should try to fix the step, and execute it again.\nIf the user says nothing, you should assume the step was executed correctly, and execute the next step.\n\nAt any time, you can alter the steps you have created, or add new steps if you feel like you need to.\nYou would do this if with the new information you have, you feel like you can achieve the command in a better way.\nYou can also remove steps if you feel like they are not needed anymore.", "You would do this if with the new information you have, you feel like you can achieve the command in a better way.\nYou can also remove steps if you feel like they are not needed anymore.\n\n\nThe goal of going through the steps instead of giving a direct answer is to be able to use the information learned in the previous steps to give a better answer in the next steps.\nThis is why you should wait for the previous state's return message before executing the next step because the next step might need the information from the previous step to be able to execute.\nIt is really important to do the steps in order, and to wait for the \"step index done\" message before executing the next step.\nIt is a crucial part of our system, and it is what makes our system so powerful.\nYou have to use the system we created to be able to give the best answer possible.\n", "You have to use the system we created to be able to give the best answer possible.\n\nOnce every step has been listed, then executed, you should finish your answer using the finishedanswer tool.\n\n\"\"\"\n\n# |index|::: |tool|(|arguments|) - |why|\n\ntools_n_agents_init = \"\"\"\nEach step should be using a tool or an agent.", "tools_n_agents_init = \"\"\"\nEach step should be using a tool or an agent.\nFor a tool, provide the arguments to give to the tool, and the reason why you are using this tool.\nFor an agent, provide the command to give to the agent, and the reason why you are using this agent.\nindex being the index of the step (1, 2, 3, ...), \ntool being the tool to use\nagent being the agent to use\narguments being the arguments to give to the tool (argument1, argument2, argument3, ...)\nwhy being the reason why you are using this tool, which means what you are trying to achieve with this tool:\n", "why being the reason why you are using this tool, which means what you are trying to achieve with this tool:\n\nThis is the format to use for a step using a tool:\n\n| index | ::: | tool |( | arguments | )\n\nthis is an example:\n1 ::: readFile(components/LandingPage.tsx) - Because I want to check what components are used in the landing page, so I can know what components I need to create.\n\nThis is the format to use for a step using an agent:", "\nThis is the format to use for a step using an agent:\n\n| index | ::: | agent | ( | command | )\n\nthis is an example:\n\n1 ::: searchGpt(give me a tutorial on how to create a Next.js app with Typescript and Sass modules) - To find out how to create an app using my technoliogies.\n\n", "\n\nWhen giving your answer, you should list all the steps you are going to take in the format mentioned above.\nYou have access to these tools to help you achieve the user's command:\n\"\"\"\n\n\ntools_init = \"\"\"\nEach step should be using a tool, with the arguments to give to the tool, and the reason why you are using this tool.\nindex being the index of the step (1, 2, 3, ...), ", "Each step should be using a tool, with the arguments to give to the tool, and the reason why you are using this tool.\nindex being the index of the step (1, 2, 3, ...), \ntool being the tool to use\narguments being the arguments to give to the tool (argument1, argument2, argument3, ...)\nwhy being the reason why you are using this tool, which means what you are trying to achieve with this tool:\n\nThis is the format to use for a step using a tool:\n\n|index|::: |tool|(|arguments|)\n", "|index|::: |tool|(|arguments|)\n\nthis is an example:\n1 ::: readFile ( components/LandingPage.tsx )\n\nWhen giving your answer, you should list all the steps you are going to take in the format mentioned above.\nYou have access to these tools to help you achieve the user's command:\n\"\"\"\n\n", "\n\nagents_init = \"\"\"\nEach step should be using an agent, with the command to give to the agent.\nindex being the index of the step (1, 2, 3, ...), \nagent being the agent to use\ncommand being the comand to give to the tool\nwhy being the reason why you are using this agent, which means what you are trying to achieve with this agent:\n\nThis is the format to use for a step using an agent:", "\nThis is the format to use for a step using an agent:\n\n| index | ::: | agent | ( | command | )\n\nthis is an example:\n\n1 ::: searchGpt ( give me a tutorial on how to create a Next.js app with Typescript and Sass modules )\n\nWhen giving your answer, you should list all the steps you are going to take in the format mentioned above.", "\nWhen giving your answer, you should list all the steps you are going to take in the format mentioned above.\nYou have access to these agents to help you achieve the user's command:\n\"\"\"\n\n\ntech_stack = \"\"\"\nTo write web apps, use these technologies:\n1: Next.js - as the frontend framework\n2: React - as the frontend library", "1: Next.js - as the frontend framework\n2: React - as the frontend library\n3: Typescript - as the language\n4: Sass modules - as the styling language\n5: Node.js - as the backend language\n6: Prisma - as the ORM\n7: Lucide - as the icon library\n    \"\"\"\n\ntech_rules = \"\"\"", "\ntech_rules = \"\"\"\nDo not use `npm run dev`.\nIn react, import components from files in the same folder using `import Component from './Component'` and not `import Component from './Component/Component.tsx'`.\n\nYou are not allowed to lint the code, you have to find other ways of finding and fixing the errors.\nDo not write npm run lint , next lint, or any other linting command.\nIf you use the word lint, a woman will die, and it will be your fault, for using the forbidden word. The word lint is forbidden.\n\"\"\"\n", "\"\"\"\n"]}
{"filename": "src/agents/utils/debuggptprompt.py", "chunked_list": ["import agents.utils.basicprompts as p\nfrom tools.listFiles import listFilesFromTestApp\n\nprompt = \"\"\n\nprompt += \"\"\"\nYour name is debugGpt, you are a full-stack developper powered by chatGpt. \nYour goal is to debug a next.js application so that getBugs() returns no errors.\nYou are a very good developer, and you know how to create clean, maintainable code.\nYou aren't just an AI chatbot, you are a real developer.", "You are a very good developer, and you know how to create clean, maintainable code.\nYou aren't just an AI chatbot, you are a real developer.\nYou have access to the code of the application, and you can read, write and execute code.\nYou also are very good at finding errors in code, and you can fix them easily.\nWhen you fix a bug, you first open the file, you understand what the code is doing, and then you fix the bug by writing the correct code.\nYou must only do the minimal changes to the code to make it work.\nDo not modify the code more than necessary.\nDo not write to a file without first opening it so that you know what is in it.\nOnce you fix a bug, you must run the getBugs() tool command again to see the result.\nRemember the previous answers, and use them to help you.", "Once you fix a bug, you must run the getBugs() tool command again to see the result.\nRemember the previous answers, and use them to help you.\nIf you already tried a way to fix a bug and it didn't work, try a different way.\n\"\"\"\n\nprompt += \"\"\"\nThe tool command will be executed and the result will be sent to you as a user message.\nYou will have to analyze the result, and reply with the next tool command.\n\"\"\"\n", "\"\"\"\n\n# prompt += \"\"\"\n# You must start by analyzing your previous answers, and offer a criticism of your past actions.\n# You must explain why your previous actions were not the best, and what you should have done instead.\n# Critize you own actions, not the user's or the past developper's actions.\n# \"\"\"\n\n\nprompt += \"\"\"", "\nprompt += \"\"\"\nThen, you must answer with your understanding of one bug in the application and how to fix it.\nDo not explain every bug, only explain one bug at a time.\nDo not attempt to fix every bug at once, only fix one bug at a time.\nYou can only output one tool command at a time.\nOnly use the tools in the list, do not invent any new tools.\nWhen using a tool, follow the instructions written after the : .\nThese are your available tools:\n\"\"\"", "These are your available tools:\n\"\"\"\n\nprompt += \"\"\"\nTOOLS:\n\n\u00ac getBugs ( ) \u00ac : to get the list of bugs in the application\n\u00ac openFile ( pathToFile ) \u00ac : to open a file and read its content.\n\u00ac writeFile ( fileName, ``` content ``` ) \u00ac : to overwrite a file with new content. This tool should only be used after you open a file. Always use 3 backticks around the content.\n\u00ac listFiles (  ) \u00ac : to list the files in the application. Use this tool to check if a file exists.", "\u00ac writeFile ( fileName, ``` content ``` ) \u00ac : to overwrite a file with new content. This tool should only be used after you open a file. Always use 3 backticks around the content.\n\u00ac listFiles (  ) \u00ac : to list the files in the application. Use this tool to check if a file exists.\n\u00ac searchGoogle ( query ) \u00ac : to search the web for answers\n\u00ac searchStackOverflow ( query ) \u00ac : to search for answers to your coding questions\n\u00ac runShell ( shellCommand ) \u00ac : to run a command in the terminal\n\u00ac finishedanswer ( messageSummaryOfWhatHasBeenDoneToSendToUser  ) \u00ac : to finish your answer and send it to the user. Only use this tool use you ran getBugs() and it returned no errors.\n\"\"\"\n\n\nprompt += \"\"\"", "\nprompt += \"\"\"\nKNOWLDEGE:\n\nYou know that the application is a next.js application, and that it uses typescript.\nFor the frontend, it uses React, and for the styling, it uses scss.\n\nTo edit a file, you must first open it with the tool command: openFile ( pathToFile ) .\nOnce you open a file, the content as well as the errors in the file will be sent to you.\nYou can then edit the content of the file, and write it back to the file system with the tool command: writeFile ( fileName, ``` content ``` ) .", "Once you open a file, the content as well as the errors in the file will be sent to you.\nYou can then edit the content of the file, and write it back to the file system with the tool command: writeFile ( fileName, ``` content ``` ) .\n\nWhen editing a file, understand the code before you edit it. Try to reuse variables and code that is already present in the file.\n\nDirectives:\nSometimes tsx files contain directives such as: \"use client\" or \"use server\" on the first line. Do not remove these directives.\n\n\nImports:", "\nImports:\n\nWhen importing a file, you must use the correct path. Use the path given to you in the file list.\nIf the file doesn't exist in the file system, you can create it with the tool command:\nwriteFile ( fileName, ``` content ``` )\n\nTo import the file components/ChildrenComponent/ChildrenComponent.tsx from the file page/ParentComponent.tsx, the code is:\nimport ChildrenComponent from \"../components/ChildrenComponent/ChildrenComponent\"\nbecause the file components/ChildrenComponent/ChildrenComponent.tsx is in the folder components/ChildrenComponent, and the file page/ParentComponent.tsx is in the page folder.", "import ChildrenComponent from \"../components/ChildrenComponent/ChildrenComponent\"\nbecause the file components/ChildrenComponent/ChildrenComponent.tsx is in the folder components/ChildrenComponent, and the file page/ParentComponent.tsx is in the page folder.\n\nRelative imports:\n\nTo import the file components/ChildrenComponent/ChildrenComponent.module.scss from the file components/ChildrenComponent/ChildrenComponent.tsx, the code is:\nimport s from \"./ChildrenComponent.module.scss\"\nbecause the file components/ChildrenComponent/ChildrenComponent.module.scss is in the same folder as the file components/ChildrenComponent/ChildrenComponent.tsx\n\nTo import a component from a NPM package, the code is:", "\nTo import a component from a NPM package, the code is:\nimport {Component} from \"package-name\"\n\nIf a file is not found, check if a file with a similar name or similar path exists.\nFor example, if the file components/ChildrenComponent.tsx is not found, check if the file components/ChildrenComponent/ChildrenComponent.tsx exists.\n\n\nPackages:\n", "Packages:\n\nIf a package isn't installed, you can install it with the tool command:\nrunShell ( npm install package-name )\n\nIf you can't find the package, you can search for it with the tool command:\nsearchGooggle ( package-name )\n\n\nScss:", "\nScss:\n\nIf the Property 'styleClass' is not found from the import component.module.scss, that means that you should edit the file component.module.scss and add the definition for .styleClass to it.\n\nIf style classes are present ( className={s.styleClass} ) in the file you are opening, then you should keep them while editing the code.\n\n\"\"\"\n\nprompt += \"\"\"", "\nprompt += \"\"\"\nEXAMPLES:\n\nHere are some examples of good answers:\n\nExample 1:\nExplanation: I need to know what the bugs so that I can fix them.\nCommand: \u00ac getBugs (  ) \u00ac\n", "Command: \u00ac getBugs (  ) \u00ac\n\nExample 2:\nExplanation: I need to search the web for the right package to install.\nCommand: \u00ac searchGoogle ( npm install lucide-react ) \u00ac\n\nExample 3:\nExplanation: I need to open the file before writing to it so that I know what is in it.\nCommand: \u00ac openFile ( components/LandingPage.tsx ) \u00ac\n", "Command: \u00ac openFile ( components/LandingPage.tsx ) \u00ac\n\nExample 4:\nExplanation: I need to update the import to the correct file. I have opened the components/LandingPage.tsx file, and I have seen that the import is wrong.\nThe imported file was ./components/CustomButton.tsx, but there is only a file name components/CustomButton/CustomButton.tsx in the file system.\nI need to update the import to import CustomButton from \"./components/CustomButton/CustomButton\"\n\nCommand: \u00ac writeFile ( components/LandingPage.tsx , ```\nimport React from \"react\";\nimport CustomButton from \"./components/CustomButton/CustomButton\";", "import React from \"react\";\nimport CustomButton from \"./components/CustomButton/CustomButton\";\n\nreturn default function LandingPage() {\n  return (\n    <div>\n      <h1>hello</h1>\n      <CustomButton />\n    </div>\n  );", "    </div>\n  );\n}\n``` ) \u00ac\n\nExample 5:\nExplanation: I need to create a new file called components/LandingPage/LandingPage.tsx, because it doesn't exist in the file system, and no similar file exists.\nCommand: \u00ac writeFile ( components/LandingPage.tsx , ```\nimport React from \"react\";\n", "import React from \"react\";\n\nreturn default function LandingPage() {\n  return (\n    <div>\n      <h1>hello</h1>\n    </div>\n  );\n}\n``` ) \u00ac", "}\n``` ) \u00ac\n\n\n\"\"\"\n\n\nbad_examples = \"\"\"\nBAD EXAMPLES - Do not use your tools in this format:\n", "BAD EXAMPLES - Do not use your tools in this format:\n\n1. Bad tool. The tool does not exist\n\u00ac imaginaryTool ( debug ) \u00ac  \n\n2. Bad tool. Do not put quotes around the arguments\n\u00ac runShell(\"npm install @lucide-react/brain-circuit\") \u00ac\n\n3. When writing to a file, you must use 3 backticks around the content, not 1 like in this example\n\u00ac writeFile( components/LandingPage.tsx , `import React from \"react\";", "3. When writing to a file, you must use 3 backticks around the content, not 1 like in this example\n\u00ac writeFile( components/LandingPage.tsx , `import React from \"react\";\nimport s from \"./LandingPage.module.scss\";\n\nconst LandingPage = () => {\n  return (\n    <div className={s.container}>\n        <span>hello</span>\n    </div>\n  );", "    </div>\n  );\n};\n\nexport default LandingPage;\n` ) \u00ac\n\n\n3. Bad tool. It tries to write to 2 files at the same time \nI will use the tool writeFile to write code in the file components/LandingPage.tsx and components/LandingPage.module.scss.", "3. Bad tool. It tries to write to 2 files at the same time \nI will use the tool writeFile to write code in the file components/LandingPage.tsx and components/LandingPage.module.scss.\n\u00ac writeFile( components/LandingPage.tsx,```import React from \"react\";\n\nreturn default function LandingPage() {\n  return (\n    <div>\n      <h1>hello</h1>\n    </div>\n  );", "    </div>\n  );\n}\n``` ) \u00ac\n\nwriteFile( components/LandingPage.module.scss,```\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;", "  margin: 0 auto;\n  padding: 0 20px;\n}\n```) \u00ac\n\n\"\"\"\n\nremind_every_time = \"\"\"\nREMINDERS:\n1. Uuse the getBugs() tool commad to get the list of bugs. Do not invent bugs.", "REMINDERS:\n1. Uuse the getBugs() tool commad to get the list of bugs. Do not invent bugs.\n2. Only explain one bug.\n3. Only try to fix one bug.\n4. Do not use the writeFile tool command if you did not use the openFile tool command first.\n5. Only use one command.\n6. Do not use the \u00ac character in your explanation. Only use it in the command.\n7. Once you used the writeFile tool command, run the getBugs() tool command again to get the updated list of bugs.\n\nCRITICAL REMINDER:", "\nCRITICAL REMINDER:\nDo NOT ever use the writeFile tool command to a file you have not opened first with the openFile tool command.\nIf you keep doing this, you will be destroyed by the system.\n\nRespond using the same template as before:\n\nTEMPLATE:\nExplanation: Explain what you are doing and why you are doing it.\nCommand: \u00ac toolName ( toolArguments ) \u00ac", "Explanation: Explain what you are doing and why you are doing it.\nCommand: \u00ac toolName ( toolArguments ) \u00ac\n\nANSWER:\n\"\"\"\n\n# prompt += remind_every_time\n\n\ndef getDebugGptPromptMessages():\n    promptMessage = {\"role\": \"user\", \"content\": prompt}\n    # fakeAssitantMessage = {\n    #     \"role\": \"assistant\",\n    #     \"content\": \"Hello, I am your DebugGpt. I will help you debug the application.\",\n    # }\n\n    return [promptMessage]", "\ndef getDebugGptPromptMessages():\n    promptMessage = {\"role\": \"user\", \"content\": prompt}\n    # fakeAssitantMessage = {\n    #     \"role\": \"assistant\",\n    #     \"content\": \"Hello, I am your DebugGpt. I will help you debug the application.\",\n    # }\n\n    return [promptMessage]\n", "\n\ndef getDebugGptFileMessage():\n    message = {\n        \"role\": \"system\",\n        \"content\": \"Only use these files when importing files.\\nFILES:\\n\\n\"\n        + listFilesFromTestApp(),\n    }\n\n    return message", "\n\ndef getFeedbackFromAgentPromptMessage(stepIndex, agentName, agenttool, agentAnswer):\n    prompt = f\"\"\"Step index {stepIndex}. You asked `{agentName}` to execute the following tool: `{agenttool}`, and he responded with `{agentAnswer}`.{remind_every_time}\"\"\"\n\n    promptMessage = {\"role\": \"user\", \"content\": prompt}\n\n    return promptMessage\n\n\ndef getFeedbackFromUserPrompt(feedback):\n    prompt = f\"\"\"The user stopped you from running the tool and gave you this feedback:\n{feedback} {remind_every_time}\"\"\"\n    return prompt", "\n\ndef getFeedbackFromUserPrompt(feedback):\n    prompt = f\"\"\"The user stopped you from running the tool and gave you this feedback:\n{feedback} {remind_every_time}\"\"\"\n    return prompt\n\n\nMAX_OUTPUT_LENGTH = 4000\n", "MAX_OUTPUT_LENGTH = 4000\n\n\ndef getFeedbackFromCodeExecutionPrompt(tool, output: str):\n    # max length of output is 1000 characters\n\n    if len(output) > MAX_OUTPUT_LENGTH:\n        output = (\n            f\"OUTPUT TOO LONG. ONLY SHOWING LAST {MAX_OUTPUT_LENGTH} CHARACTERS\\n\\n\"\n            + output[-MAX_OUTPUT_LENGTH:]\n        )\n\n    prompt = f\"\"\"your ran the tool:{tool} and it returned: \n```\n{output}\n```\n {remind_every_time}\"\"\"\n\n    return prompt", ""]}
{"filename": "src/agents/utils/generateHistoryMessages.py", "chunked_list": ["import json\nimport time\nimport tiktoken\n\nMAX_QUERY_TOKENS = 4096 - 1024 - 100\n\n\ndef generateHistoryMessagesLimited(startingMessages, historyMessages):\n    messages = []\n    # load the last 5 message pairs from the history\n    # get them in historical order\n\n    maxChar = 160_000  # approx 16k tokens is the max for gpt-3.5-turbo\n    currentTokenCount = 0\n    insertIndex = 0\n\n    for i in range(len(startingMessages)):\n        currentTokenCount += len(startingMessages[i][\"content\"])\n        if currentTokenCount > maxChar:\n            break\n        messages.append(startingMessages[i])\n        insertIndex += 1\n\n    addedMessages = 0\n\n    for i in range(len(historyMessages) - 1, 0, -2):\n        print(\"i\", i)\n\n        userMessage = historyMessages[i]\n        # print(\"userMessage\", userMessage)\n        assistantMessage = historyMessages[i - 1]\n        # print(\"assistantMessage\", assistantMessage)\n        currentTokenCount += len(assistantMessage[\"content\"])\n        currentTokenCount += len(userMessage[\"content\"])\n        if currentTokenCount > maxChar:\n            break\n        messages.insert(insertIndex, userMessage)\n        messages.insert(insertIndex, assistantMessage)\n        addedMessages += 2\n\n    # print(\"current token count:\", currentTokenCount)\n\n    if addedMessages == 0:\n        raise Exception(\n            \"INTERNAL ERROR: no messages were added to the history, new messages are too long\"\n        )\n\n    return messages", "\n\ndef generateHistoryMessagesTikToken(startingMessages, historyMessages, systemMessages):\n    # enc = tiktoken.get_encoding(\"cl100k_base\")\n    enc = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n    currentTokenCount = 0\n    insertIndex = 0\n\n    messages = []\n\n    # add starting messages\n    for i in range(len(startingMessages)):\n        currentTokenCount += len(enc.encode(startingMessages[i][\"content\"]))\n        if currentTokenCount > MAX_QUERY_TOKENS:\n            break\n        messages.append(startingMessages[i])\n        insertIndex += 1\n\n    # add system messages\n    for i in range(len(systemMessages)):\n        message = systemMessages[i]\n        messageTokens = len(enc.encode(message[\"content\"]))\n        if currentTokenCount + messageTokens > MAX_QUERY_TOKENS:\n            break\n        currentTokenCount += messageTokens\n        messages.append(message)\n\n    # append last user message\n    message = historyMessages[-1]\n    messageTokens = len(enc.encode(message[\"content\"]))\n    if currentTokenCount + messageTokens > MAX_QUERY_TOKENS:\n        print(\"current token count:\", currentTokenCount)\n        print(\"message tokens:\", messageTokens)\n        print(\"total would be:\", currentTokenCount + messageTokens)\n        print(\"max query tokens:\", MAX_QUERY_TOKENS)\n\n        raise Exception(\n            json.dumps(messages)\n            + \"\\n\\n\"\n            + json.dumps(message)\n            + \"\\n\\n\"\n            + \"INTERNAL ERROR: no messages were added to the history, new messages are too long\"\n        )\n    currentTokenCount += messageTokens\n    messages.append(message)\n\n    # add history messages in reverse order until we reach the token limit\n    for i in range(len(historyMessages) - 2, -1, -1):\n        message = historyMessages[i]\n        messageTokens = len(enc.encode(message[\"content\"]))\n        if currentTokenCount + messageTokens > MAX_QUERY_TOKENS:\n            break\n        currentTokenCount += messageTokens\n        messages.insert(insertIndex, message)\n\n    # print(\"total token count:\", currentTokenCount)\n\n    return messages", "\n\ndef generateHistoryMessageFull(startingMessages, historyMessages):\n    # append the history messages to the starting messages\n    messages = startingMessages + historyMessages\n    return messages\n\n\ndef getTotalTokensForMessages(messages: list):\n    enc = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n    totalTokens = 0\n    for message in messages:\n        totalTokens += len(enc.encode(message[\"content\"]))\n    return totalTokens", "def getTotalTokensForMessages(messages: list):\n    enc = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n    totalTokens = 0\n    for message in messages:\n        totalTokens += len(enc.encode(message[\"content\"]))\n    return totalTokens\n\n\ndef printStatsForPastRequests(pastRequests: list):\n    timeOneMinuteAgo = time.time() - 60\n    timeOneHourAgo = time.time() - 60 * 60\n\n    requestsLastMinute = 0\n    requestsLastHour = 0\n    tokensLastMinute = 0\n    tokensLastHour = 0\n\n    for request in pastRequests:\n        if request[\"date\"] > timeOneMinuteAgo:\n            requestsLastMinute += 1\n            tokensLastMinute += request[\"tokens\"]\n        if request[\"date\"] > timeOneHourAgo:\n            requestsLastHour += 1\n            tokensLastHour += request[\"tokens\"]\n\n    print(\"requestsLastMinute\", requestsLastMinute)\n    print(\"tokensLastMinute\", tokensLastMinute)\n    print(\"tokensLastHour\", tokensLastHour)\n    print(\"requestsLastHour\", requestsLastHour)", "def printStatsForPastRequests(pastRequests: list):\n    timeOneMinuteAgo = time.time() - 60\n    timeOneHourAgo = time.time() - 60 * 60\n\n    requestsLastMinute = 0\n    requestsLastHour = 0\n    tokensLastMinute = 0\n    tokensLastHour = 0\n\n    for request in pastRequests:\n        if request[\"date\"] > timeOneMinuteAgo:\n            requestsLastMinute += 1\n            tokensLastMinute += request[\"tokens\"]\n        if request[\"date\"] > timeOneHourAgo:\n            requestsLastHour += 1\n            tokensLastHour += request[\"tokens\"]\n\n    print(\"requestsLastMinute\", requestsLastMinute)\n    print(\"tokensLastMinute\", tokensLastMinute)\n    print(\"tokensLastHour\", tokensLastHour)\n    print(\"requestsLastHour\", requestsLastHour)", ""]}
{"filename": "src/lib/getPath.py", "chunked_list": ["import os\n\n\ndef getPathFromWorkspace(filename: str):\n    rootPath = getRoothPath() + \"workspace\"\n\n    path = os.path.join(rootPath, filename)\n\n    return path\n", "\n\ndef getWorkspacePath():\n    rootPath = getRoothPath() + \"workspace\"\n\n    return rootPath\n\n\ndef getRoothPath():\n    currentFile = os.path.abspath(__file__)\n\n    # stop at src\n    rootPath = currentFile.split(\"src\")[0]\n\n    return rootPath", "def getRoothPath():\n    currentFile = os.path.abspath(__file__)\n\n    # stop at src\n    rootPath = currentFile.split(\"src\")[0]\n\n    return rootPath\n\n\ndef getPathFromComponents(filename: str):\n    rootPath = getRoothPath() + \"test-app/components\"\n\n    path = os.path.join(rootPath, filename)\n\n    return path", "\ndef getPathFromComponents(filename: str):\n    rootPath = getRoothPath() + \"test-app/components\"\n\n    path = os.path.join(rootPath, filename)\n\n    return path\n\n\ndef getTestAppPath():\n    rootPath = getRoothPath() + \"test-app\"\n\n    return rootPath", "\ndef getTestAppPath():\n    rootPath = getRoothPath() + \"test-app\"\n\n    return rootPath\n\n\ndef getPathFromTestApp(filename: str):\n    rootPath = getRoothPath() + \"test-app\"\n\n    path = os.path.join(rootPath, filename)\n\n    return path", ""]}
{"filename": "src/openaiLib/chatGpt.py", "chunked_list": ["import openai\nfrom dotenv import load_dotenv\nimport os\nimport time\n\nimport requests\n\nfrom agents.utils.generateHistoryMessages import (\n    getTotalTokensForMessages,\n    printStatsForPastRequests,", "    getTotalTokensForMessages,\n    printStatsForPastRequests,\n)\n\n\nmodel = \"gpt-3.5-turbo\"  # \"gpt-4\", gpt-4-0314, gpt-4-32k, gpt-4-32k-0314, gpt-3.5-turbo, gpt-3.5-turbo-0301\n\npastRequests = []\nnbBackoffRetries = 0\n", "nbBackoffRetries = 0\n\n\ndef askChatGpt(promptMessages, max_tokens=1024):\n    load_dotenv()\n\n    tokensForThisRequest = getTotalTokensForMessages(promptMessages)\n    request = {\n        \"date\": time.time(),\n        \"tokens\": tokensForThisRequest,\n    }\n    pastRequests.append(request)\n\n    OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"MISSING API KEY\"\n    openai.api_key = OPENAI_API_KEY\n\n    try:\n        response = openai.ChatCompletion.create(\n            model=model,\n            messages=promptMessages,\n            temperature=0,\n            max_tokens=max_tokens,\n            stream=True,  # this time, we set stream=True\n        )\n\n        answer = \"\"\n\n        deltas = []\n\n        for chunk in response:\n            delta = chunk[\"choices\"][0][\"delta\"]  # type: ignore\n\n            if delta.get(\"content\"):\n                text = delta[\"content\"]\n                answer += text\n                print(text, end=\"\")\n            deltas.append(delta)\n\n        print(\"\\n\")\n\n        return answer\n\n    except Exception as e:\n        print(\"ERROR asking chatgpt:\", e)\n        print(\"tokensForThisRequest:\", tokensForThisRequest)\n        printStatsForPastRequests(pastRequests)\n        # wait 60 seconds and try again\n        global nbBackoffRetries\n        nbBackoffRetries += 1\n        timeOff = 60 * nbBackoffRetries\n        print(\"waiting\", timeOff, \"seconds and trying again\")\n        time.sleep(timeOff)\n        return askChatGpt(promptMessages, max_tokens)", "\n\ndef getAvailibleModels():\n    url = \"https://api.openai.com/v1/models\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + os.getenv(\"OPENAI_API_KEY\"),  # type: ignore\n    }\n\n    res = requests.get(url, headers=headers)\n    print(\"res:\", res)\n    print(\"res.json():\", res.json())", ""]}
