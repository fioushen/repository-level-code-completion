{"filename": "setup.py", "chunked_list": ["# setup.py\nfrom setuptools import setup\n\nPROJECT_NAME = 'suger'\n\nPROJECT_VERSION = '0.2.2'\n\nsetup(\n    name=PROJECT_NAME,\n    version=PROJECT_VERSION,", "    name=PROJECT_NAME,\n    version=PROJECT_VERSION,\n    install_requires=[\n        'openpyxl',\n        'paramiko',\n    ],\n    author='SolarisNeko',\n    author_email='1417015340@qq.com',\n    description='simple utils'\n)", "    description='simple utils'\n)\n"]}
{"filename": "tests/test_string_decorator.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger import string\n\n\n@string\nclass MockData:\n    def __init__(self, age):\n        self.age = age\n", "\n\nclass Test(TestCase):\n    def test_string(self):\n        data = MockData(18)\n\n        target_str = \"MockData(age=18)\"\n\n        printStr = data.__str__()\n        print(printStr)\n\n\n        self.assertEqual(printStr, target_str, \"not equals string\")", ""]}
{"filename": "tests/test_ExcelUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.data_operator.ExcelUtils import ExcelUtils\n\n\nclass TestExcelUtils(TestCase):\n\n    def test_serialize(self):\n        # \u8bfb\u53d6 Excel \u6587\u4ef6\n        workbook = ExcelUtils.load_workbook(\"example.xlsx\")\n\n        # \u83b7\u53d6\u6307\u5b9a\u540d\u79f0\u7684 sheet \u5bf9\u8c61\n        sheet = ExcelUtils.get_sheet_by_name(workbook, \"Sheet1\")\n\n        # \u5c06 sheet \u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5217\u8868\n        data = ExcelUtils.serialize(sheet, skip_rows=1)\n\n        # \u5bf9\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\n\n        # \u53cd\u5e8f\u5217\u5316\u5217\u8868\u5230\u6307\u5b9a\u7684 sheet \u5bf9\u8c61\n        ExcelUtils.deserialize(sheet, data, skip_rows=1)\n\n        # \u4fdd\u5b58 Excel \u6587\u4ef6\n        ExcelUtils.save_workbook(workbook, \"example.xlsx\")", ""]}
{"filename": "tests/test_ObjectUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.common import ObjectUtils\n\n\nclass TestObjectUtils(TestCase):\n    def test_is_null(self):\n        self.assertTrue(ObjectUtils.isNull(None), 'ok')\n\n    def test_is_not_null(self):\n        self.assertTrue(ObjectUtils.isNotNull(self), 'ok')", ""]}
{"filename": "tests/__init__.py", "chunked_list": [""]}
{"filename": "tests/test_FileUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.common import FileUtils\n\n\nclass TestFileUtils(TestCase):\n    def test_scan_dir(self):\n        fileArray = FileUtils.scanDir('C:/Users/14170/Documents/WeChat Files', 'png')\n        print(fileArray)\n\n    pass", ""]}
{"filename": "tests/test_JsonUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.data_operator import JsonUtils\n\n\nclass TestJsonUtils(TestCase):\n    def test_serialize(self):\n        user = User('neko233')\n        json = JsonUtils.serialize(user)\n        print(json)\n\n    def test_deserialize(self):\n        user = User('neko233')\n        json = JsonUtils.serialize(user)\n        userClone = JsonUtils.deserialize(json, User)\n        if userClone.name == 'neko':\n            print('ok')", "\n\nclass User:\n    def __init__(self, name, age=18):\n        self.name = name\n        self.age = age\n"]}
{"filename": "tests/test_csv_decorator.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger import csv\n\n\n@csv\nclass MockData:\n    def __init__(self, id, name, age):\n        self.id = id\n        self.name = name\n        self.age = age\n        self.email = \"qq.com\"", "\n\nclass Test(TestCase):\n    def test_csv(self):\n        data = MockData(id=1, name='neko', age=18)\n\n        # print(\"{},{},{}\".format(data.id, data.name, data.age))\n\n        print(data.csv_format())\n        print(data.csv_str())", ""]}
{"filename": "tests/test_Stream.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.stream.Stream import Stream\n\nglobalData = [1, 2, 3, 3, 4, 5]\n\n\nclass TestStream(TestCase):\n\n    def test_demo(self):\n        data = [1, 2, 3, 3, 4, 5]\n\n        result = Stream(data)\\\n            .filter(lambda x: x % 2 == 0) \\\n            .sort(reverse=True) \\\n            .map(lambda x: x * 2) \\\n            .toSet()\n        self.assertEqual(result, {8, 4})\n\n    def test_sort_numeric(self):\n        data = [5, 2, 8, 3, 1, 7, 4, 6]\n        result = Stream(data).sort(sortedFunc=lambda x: x).toList()\n        self.assertEqual(result, [1, 2, 3, 4, 5, 6, 7, 8])\n\n    def test_sort_numeric_reverse(self):\n        data = [5, 2, 8, 3, 1, 7, 4, 6]\n        result = Stream(data).sort(sortedFunc=lambda x: x, reverse=True).toList()\n        self.assertEqual(result, [8, 7, 6, 5, 4, 3, 2, 1])\n\n    def test_sort(self):\n        data = [5, 2, 8, 3, 1, 7, 4, 6]\n        result = Stream(data).sort().toList()\n        self.assertEqual(result, [1, 2, 3, 4, 5, 6, 7, 8])\n\n    def test_sort_reverse(self):\n        data = [5, 2, 8, 3, 1, 7, 4, 6]\n        result = Stream(data).sort(reverse=True).toList()\n        self.assertEqual(result, [8, 7, 6, 5, 4, 3, 2, 1])\n\n    def test_sort_key(self):\n        data = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n        result = Stream(data).sort(sortedFunc=len).toList()\n        self.assertEqual(result, ['date', 'apple', 'banana', 'cherry', 'elderberry'])\n\n    def test_map(self):\n        # \u4f7f\u7528map\u64cd\u4f5c\u5c06\u6bcf\u4e2a\u5143\u7d20\u52a0\u500d\n        result = Stream(globalData).map(lambda x: x * 2).toList()\n        self.assertEqual(result, [2, 4, 6, 6, 8, 10])\n\n    def test_flat_map(self):\n        # \u4e00\u7ef4\u6570\u7ec4\u77e9\u9635\u53c9\u79ef\n        result = Stream(globalData).flatMap(lambda x: [x, x]).toList()\n        self.assertEqual(result, [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5])\n\n        # \u4e8c\u7ef4\u6570\u7ec4\u5e73\u94fa\n        data2 = [[1, 2, 3], [3, 4, 5]]\n        result2 = Stream(data2).flatMap(lambda x: x).toList()\n        self.assertEqual(result2, [1, 2, 3, 3, 4, 5])\n\n    def test_filter(self):\n        result = Stream(globalData).filter(lambda x: x % 2 == 0).toList()\n        self.assertEqual(result, [2, 4])\n\n    def test_first(self):\n        result = Stream(globalData).first()\n        self.assertEqual(result, 1)\n\n    def test_count(self):\n        result = Stream(globalData).count()\n        self.assertEqual(result, 6)\n\n    def test_to_list(self):\n        result = Stream(globalData).toList()\n        self.assertEqual(result, [1, 2, 3, 3, 4, 5])\n\n    def test_to_dictionary(self):\n        result = Stream(globalData).toDictionary(lambda x: x, lambda x: x * 2)\n        self.assertEqual(result, {1: 2, 2: 4, 3: 6, 4: 8, 5: 10})\n\n    def test_to_set(self):\n        result = Stream(globalData).toSet()\n        self.assertEqual(result, {1, 2, 3, 4, 5})\n\n\n\n    def test_reduce(self):\n        stream = Stream([1, 2, 3, 4, 5])\n        result = stream.reduce(lambda x, y: x + y, 0)\n        self.assertEqual(result, 15)\n\n    def test_reduce_with_initial_value(self):\n        stream = Stream([1, 2, 3, 4, 5])\n        result = stream.reduce(lambda x, y: x + y, 10)\n        self.assertEqual(result, 25)\n\n    def test_group_by(self):\n        stream = Stream(['apple', 'banana', 'cherry', 'date'])\n        result = stream.groupBy(lambda x: len(x))\n        expected = {4: ['date'], 5: ['apple'], 6: ['banana', 'cherry']}\n        self.assertEqual(result, expected)\n\n    def test_group_by_multiple_keys(self):\n        stream = Stream(['apple', 'banana', 'cherry', 'date'])\n        result = stream.groupBy(lambda x: x[0])\n        expected = {'a': ['apple'], 'b': ['banana'], 'c': ['cherry'], 'd': ['date']}\n        self.assertEqual(result, expected)", ""]}
{"filename": "tests/test_CsvUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.data_operator.CsvUtils import CsvUtils\n\n\nclass TestCsvUtils(TestCase):\n    def test_serialize(self):\n        person1 = Person(\"Alice\", 25)\n        person2 = Person(\"Bob\", 30)\n        persons = [person1, person2]\n\n        # Serialize list of objects\n        csv_str = CsvUtils.serialize(persons)\n        print(csv_str)\n\n        # Deserialize list of objects\n        persons_deserialized = CsvUtils.deserialize(csv_str, Person)\n        for person in persons_deserialized:\n            print(person.name, person.age)\n\n        # Serialize single object\n        csv_str = CsvUtils.serialize(person1)\n        print(csv_str)\n\n        # Deserialize single object\n        person_deserialized = CsvUtils.deserialize(csv_str, Person)\n        print(person_deserialized.name, person_deserialized.age)", "\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n"]}
{"filename": "tests/test_XmlUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.data_operator import XmlUtils, ElementTree\n\nclass TestXmlUtils(TestCase):\n    def test_find_element(self):\n\n        # \u8bfb\u53d6 XML \u6587\u4ef6\n        xml = XmlUtils('temp/example.xml')\n\n        # \u67e5\u8be2\u8282\u70b9\n        node = xml.find_element('.//book[@id=\"123\"]')\n        print(node.text)\n\n        # \u4fee\u6539\u8282\u70b9\u503c\n        xml.set_element_value('.//book[@id=\"123\"]/name', 'New Book Title')\n\n        # \u6dfb\u52a0\u8282\u70b9\n        new_element = ElementTree.Element('book', {'id': '456'})\n        sub_element1 = ElementTree.SubElement(new_element, 'name')\n        sub_element1.text = 'New Book'\n        sub_element2 = ElementTree.SubElement(new_element, 'author')\n        sub_element2.text = 'New Author'\n\n        xml.add_element('.//books', new_element)\n\n        # \u5220\u9664\u8282\u70b9\n        xml.remove_element('.//book[@id=\"123\"]')\n\n        # \u5199\u5165\u6587\u4ef6\n        xml.write_file('temp/new_example.xml')", "\n"]}
{"filename": "tests/test_SSH.py", "chunked_list": ["# from unittest import TestCase\n#\n# from suger.terminal import SSH\n#\n#\n# class TestSSH(TestCase):\n#     def test_connect(self):\n#         ssh = SSH(host='localhost', password='root')\n#         ssh.connect()\n#         output, err = ssh.execute_command('ls .')", "#         ssh.connect()\n#         output, err = ssh.execute_command('ls .')\n#         print(output)\n"]}
{"filename": "tests/test_TerminalUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.terminal.TerminalUtils import TerminalUtils\n\n\nclass TestTerminalUtils(TestCase):\n    def test_run_command(self):\n        code, output, err = TerminalUtils.run_command('tree .')\n        print(output)\n", ""]}
{"filename": "tests/test_StringUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.common import StringUtils\n\n\nclass TestStringUtils(TestCase):\n\n    def test_readBooleanTrue(self):\n        # Test true values\n        self.assertTrue(StringUtils.readBooleanTrue(\"ok\"))\n        self.assertTrue(StringUtils.readBooleanTrue(\"success\"))\n        self.assertTrue(StringUtils.readBooleanTrue(\"1\"))\n        self.assertTrue(StringUtils.readBooleanTrue(\"yes\"))\n        # Test false values\n        self.assertFalse(StringUtils.readBooleanTrue(\"no\"))\n        self.assertFalse(StringUtils.readBooleanTrue(\"false\"))\n        self.assertFalse(StringUtils.readBooleanTrue(\"0\"))\n        self.assertFalse(StringUtils.readBooleanTrue(\"\"))\n\n    def test_readBooleanFalse(self):\n        # Test true values\n        self.assertFalse(StringUtils.readBooleanFalse(\"ok\"))\n        self.assertFalse(StringUtils.readBooleanFalse(\"success\"))\n        self.assertFalse(StringUtils.readBooleanFalse(\"1\"))\n        self.assertFalse(StringUtils.readBooleanFalse(\"yes\"))\n        # Test false values\n        self.assertTrue(StringUtils.readBooleanFalse(\"no\"))\n        self.assertTrue(StringUtils.readBooleanFalse(\"false\"))\n        self.assertTrue(StringUtils.readBooleanFalse(\"0\"))\n        self.assertTrue(StringUtils.readBooleanFalse(\"\"))\n\n    def test_trim(self):\n        string = \"   Hello, World!   \"\n        expected_result = \"Hello, World!\"\n        result = StringUtils.trim(string)\n        self.assertEqual(result, expected_result)\n\n        # Test with None\n        result = StringUtils.trim(None)\n        self.assertEqual(result, \"\")\n\n    def test_is_blank(self):\n        str = \"   \"\n        isBlank = StringUtils.isBlank(str)\n\n        self.assertEqual(True, isBlank)\n\n    def test_coverByteToHexString(self):\n        byte_array = b'\\x01\\x02\\x03\\x04'\n        expected_result = \"01020304\"\n        result = StringUtils.coverByteToHexString(byte_array)\n        self.assertEqual(result, expected_result)\n\n        # Test with None\n        result = StringUtils.coverByteToHexString(None)\n        self.assertEqual(result, \"\")\n\n    def test_coverStringToByteString(self):\n        string = \"Hello, World!\"\n        expected_result = \"48656c6c6f2c20576f726c6421\"\n        result = StringUtils.coverStringToByteString(string)\n        self.assertEqual(result, expected_result)\n\n        # Test with None\n        result = StringUtils.coverStringToByteString(None)\n        self.assertEqual(result, \"\")\n\n    def test_coverHexStringToByte(self):\n        hex_string = \"01020304\"\n        expected_result = b'\\x01\\x02\\x03\\x04'\n        result = StringUtils.coverHexStringToByte(hex_string)\n        self.assertEqual(result, expected_result)\n\n        # Test with None\n        result = StringUtils.coverHexStringToByte(None)\n        self.assertEqual(result, b'')\n\n    def test_coverByteStringToString(self):\n        byte_string = \"48656c6c6f2c20576f726c6421\"\n        expected_result = \"Hello, World!\"\n        result = StringUtils.coverByteStringToString(byte_string)\n        self.assertEqual(result, expected_result)", ""]}
{"filename": "tests/test_FileCompareUtils.py", "chunked_list": ["from unittest import TestCase\n\nfrom suger.common import FileCompareUtils\n\n\nclass TestFileCompareUtils(TestCase):\n    def test_write_compare_info(self):\n        FileCompareUtils.writeFileVersionInfo(input_scan_directory='./',\n                                              isNeedMd5=True)\n\n    def test_compare(self):\n        FileCompareUtils.writeCompareFileVersionInfo(input_scan_directory='./',\n                                                     isNeedMd5=True)", ""]}
{"filename": "tests/decorator/__init__.py", "chunked_list": [""]}
{"filename": "suger/__init__.py", "chunked_list": ["from suger.decorator.csv_decorator import csv\nfrom suger.decorator.string_decorator import string\n"]}
{"filename": "suger/terminal/TerminalUtils.py", "chunked_list": ["import locale\nimport subprocess\n\n\nclass TerminalUtils:\n    \"\"\"\n    \u672c\u5730\u547d\u4ee4\u884c\u5de5\u5177\n    \"\"\"\n\n    @staticmethod\n    def run_command(command: str):\n        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = process.communicate()\n\n        osEncode = locale.getpreferredencoding()\n\n        code = process.returncode\n        output = output.decode(osEncode)\n        err = error.decode(osEncode)\n\n        return code, output, err", ""]}
{"filename": "suger/terminal/SSH.py", "chunked_list": ["import paramiko\n\n\nclass SSH:\n    def __init__(self, host, username='root', password='root', key_filename=None, port=22):\n        \"\"\"\n        :param host: SSH \u4e3b\u673a\u540d\u6216 IP\n        :param username: SSH \u7528\u6237\u540d\n        :param password: SSH \u5bc6\u7801\n        :param key_filename: SSH \u5bc6\u94a5\u6587\u4ef6\u8def\u5f84 (\u4e00\u822c '~/.ssh/id_rsa')\n        :param port: SSH \u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a 22\n        \"\"\"\n        self.host = host\n        self.username = username\n        self.password = password\n        self.key_filename = key_filename\n        self.port = port\n        self.ssh = None\n\n    def connect(self):\n        \"\"\"\u8fde\u63a5 SSH \u4e3b\u673a\"\"\"\n        self.ssh = paramiko.SSHClient()\n        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        if self.password:\n            self.ssh.connect(self.host, port=self.port, username=self.username, password=self.password)\n        elif self.key_filename:\n            key = paramiko.RSAKey.from_private_key_file(self.key_filename)\n            self.ssh.connect(self.host, port=self.port, username=self.username, pkey=key)\n\n    def disconnect(self):\n        \"\"\"\u65ad\u5f00 SSH \u8fde\u63a5\"\"\"\n        self.ssh.close()\n\n    def execute_command(self, command):\n        \"\"\"\u6267\u884c\u547d\u4ee4\"\"\"\n        stdin, stdout, stderr = self.ssh.exec_command(command)\n        output = stdout.read().decode()\n        error = stderr.read().decode()\n        return output, error\n\n    def upload_file(self, local_file_path, remote_file_path):\n        \"\"\"\u4e0a\u4f20\u6587\u4ef6\"\"\"\n        sftp = self.ssh.open_sftp()\n        sftp.put(local_file_path, remote_file_path)\n        sftp.close()\n\n    def download_file(self, remote_file_path, local_file_path):\n        \"\"\"\u4e0b\u8f7d\u6587\u4ef6\"\"\"\n        sftp = self.ssh.open_sftp()\n        sftp.get(remote_file_path, local_file_path)\n        sftp.close()", ""]}
{"filename": "suger/terminal/__init__.py", "chunked_list": ["from suger.terminal.TerminalUtils import TerminalUtils\nfrom suger.terminal.SSH import SSH\n"]}
{"filename": "suger/decorator/string_decorator.py", "chunked_list": ["def string(clazz):\n    '''\n    \u6839\u7edd field \u81ea\u52a8\u751f\u6210 class \u7684 __str__\n    :param clazz: \u7c7b\n    :return: clazz\n    '''\n    def __str__(self):\n        return '%s(%s)' % (\n            type(self).__name__,\n            ', '.join('%s=%s' % item for item in vars(self).items())\n        )\n    clazz.__str__ = __str__\n    return clazz", "\n"]}
{"filename": "suger/decorator/__init__.py", "chunked_list": [""]}
{"filename": "suger/decorator/csv_decorator.py", "chunked_list": ["def csv(clazz):\n    '''\n    \u6839\u7edd field \u81ea\u52a8\u751f\u6210 csv, \u8d4b\u503c\u5230 class \u7684 __str__ \u6765\u8f93\u51fa\n    :param clazz: \u7c7b\n    :return: clazz\n    '''\n\n    def csv_str(self):\n        return '%s' % (\n            ','.join(\n                # \u5143\u7ec4 (key, value)\n                '%s' % item[1] for item in vars(self).items()\n            )\n        )\n\n    def csv_format(self):\n        return '%s' % (\n            ','.join(\n                '%s' % item[0] for item in vars(self).items()\n            )\n        )\n\n    clazz.csv_str = csv_str\n    clazz.csv_format = csv_format\n\n    return clazz", ""]}
{"filename": "suger/stream/__init__.py", "chunked_list": [""]}
{"filename": "suger/stream/Stream.py", "chunked_list": ["from functools import reduce\nfrom typing import Callable, Iterable, Dict, Any, Set\n\n\nclass Stream:\n    def __init__(self, data: Iterable) -> None:\n        self.data = data\n\n    def sort(self, sortedFunc=None, reverse=False):\n        return Stream(sorted(self.data, key=sortedFunc, reverse=reverse))\n\n    def map(self, func: Callable) -> \"Stream\":\n        return Stream(func(item) for item in self.data)\n\n    def flatMap(self, func: Callable) -> \"Stream\":\n        return Stream(item for sublist in self.data for item in func(sublist))\n\n    def filter(self, func: Callable) -> \"Stream\":\n        return Stream(item for item in self.data if func(item))\n\n    def reduce(self, func: Callable, initial_value: Any = None) -> Any:\n        return reduce(func, self.data, initial_value)\n\n    def groupBy(self, key_func: Callable) -> Dict:\n        groups = {}\n        for item in self.data:\n            key = key_func(item)\n            if key not in groups:\n                groups[key] = []\n            groups[key].append(item)\n        return groups\n\n    def first(self) -> Any:\n        return next(iter(self.data), None)\n\n    def count(self) -> int:\n        return sum(1 for _ in self.data)\n\n    def toList(self) -> list:\n        return list(self.data)\n\n    def toDictionary(self, key_func: Callable, value_func: Callable) -> Dict:\n        return {key_func(item): value_func(item) for item in self.data}\n\n    def toSet(self) -> Set:\n        return set(self.data)", ""]}
{"filename": "suger/common/FileCompareUtils.py", "chunked_list": ["import hashlib\nimport os\nimport string\nimport time\nfrom typing import List\n\nfrom suger.common import StringUtils, FileUtils\nfrom suger.data_operator.CsvUtils import CsvUtils\n\n#", "\n#\nDEFAULT_FILE_VERSION_OUTPUT_PATH = 'file_use_metadata.csv'\n# \u5bf9\u6bd4\u7ed3\u679c\nDEFAULT_COMPARE_FILE_OUTPUT_PATH = 'FileCompareUtils_compare_results.output'\n\n\nclass FileCompareUtils:\n\n    @staticmethod\n    def writeCompareFileVersionInfo(result_output_file=DEFAULT_COMPARE_FILE_OUTPUT_PATH,\n                                    isSplitOutput=True,\n                                    input_scan_directory: string = './',\n                                    isNeedMd5: bool = True,\n                                    history_data_file_full_path: string = DEFAULT_FILE_VERSION_OUTPUT_PATH,\n                                    ):\n        same_changed_objs, only_in_list1_objs, only_in_list2_objs \\\n            = FileCompareUtils.compareFileVersion(filterFileName=result_output_file,\n                                                  input_scan_directory=input_scan_directory,\n                                                  isNeedMd5=isNeedMd5,\n                                                  history_data_file_full_path=history_data_file_full_path,\n                                                  )\n\n        isDeleteFile = result_output_file + '.deleted'\n        isChangedFile = result_output_file + '.changed'\n        isCreatedFile = result_output_file + '.created'\n\n        if not isSplitOutput:\n            FileUtils.writeStringToFile(result_output_file, '[is deleted]\\n')\n            FileUtils.writeStringToFile(result_output_file, CsvUtils.serialize(only_in_list1_objs), isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, '\\n---\\n', isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, '[is changed]\\n', isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, CsvUtils.serialize(same_changed_objs), isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, '\\n---\\n', isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, '[is created]\\n', isAppend=True)\n            FileUtils.writeStringToFile(result_output_file, CsvUtils.serialize(only_in_list2_objs), isAppend=True)\n            return;\n\n        FileUtils.writeStringToFile(isDeleteFile, CsvUtils.serialize(only_in_list1_objs))\n\n        FileUtils.writeStringToFile(isChangedFile, CsvUtils.serialize(same_changed_objs))\n\n        FileUtils.writeStringToFile(isCreatedFile, CsvUtils.serialize(only_in_list2_objs))\n\n    @staticmethod\n    def compareFileVersion(filterFileName: string,\n                           input_scan_directory: string = './',\n                           isNeedMd5: bool = True,\n                           history_data_file_full_path: string = DEFAULT_FILE_VERSION_OUTPUT_PATH,\n                           ):\n        originalNewDtoList, output_file_name = FileCompareUtils.getFileVersionInfo(input_scan_directory,\n                                                                                   isNeedMd5,\n                                                                                   history_data_file_full_path)\n\n        # filter output file name\n        newDtoList = [dto for dto in originalNewDtoList if filterFileName not in dto.fullpath]\n\n        old_csv_str = FileUtils.readFileToString(history_data_file_full_path)\n        oldDtoList = CsvUtils.deserialize(old_csv_str, FileCompareDto)\n\n        same_changed_objs, only_in_list1_objs, only_in_list2_objs \\\n            = FileCompareUtils.compare_dto_lists(oldDtoList, newDtoList, FileCompareDto.PK_FIELD)\n\n        return same_changed_objs, only_in_list1_objs, only_in_list2_objs\n\n    @staticmethod\n    def compare_dto_lists(list1: List[object], list2: List[object], field: str):\n        # \u76f8\u540c\u7684\u5bf9\u8c61\n        same_pk_but_change_objs = []\n        # list1 \u72ec\u6709\u7684\u5bf9\u8c61\n        only_in_list1_objs = []\n        # list2 \u72ec\u6709\u7684\u5bf9\u8c61\n        only_in_list2_objs = []\n        # \u5c06 list1 \u548c list2 \u7684\u6240\u6709\u5bf9\u8c61\u6309\u7167 field \u7684\u503c\u8fdb\u884c\u6392\u5e8f\n        sorted_list1 = sorted(list1, key=lambda obj: getattr(obj, field))\n        sorted_list2 = sorted(list2, key=lambda obj: getattr(obj, field))\n        # \u5bf9\u6bd4\u4e24\u4e2a\u5217\u8868\n        i = j = 0\n        while i < len(sorted_list1) and j < len(sorted_list2):\n            obj1 = sorted_list1[i]\n            obj2 = sorted_list2[j]\n            if getattr(obj1, field) < getattr(obj2, field):\n                only_in_list1_objs.append(obj1)\n                i += 1\n            elif getattr(obj1, field) > getattr(obj2, field):\n                only_in_list2_objs.append(obj2)\n                j += 1\n            else:\n                # \u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u7684 field \u76f8\u540c\uff0c\u4f46\u5176\u4f59\u5185\u5bb9\u4e0d\u540c\uff0c\u5219\u52a0\u5165 same_objs \u5217\u8868\n                if obj1 != obj2:\n                    # same_pk_but_change_objs.append((obj1, obj2))\n                    # \u53ea\u53cd\u56de\u65b0\u5bf9\u8c61\n                    same_pk_but_change_objs.append((obj2))\n                i += 1\n                j += 1\n\n        # \u5c06 list1 \u5269\u4f59\u7684\u5bf9\u8c61\u52a0\u5165 only_in_list1_objs \u5217\u8868\n        while i < len(sorted_list1):\n            only_in_list1_objs.append(sorted_list1[i])\n            i += 1\n\n        # \u5c06 list2 \u5269\u4f59\u7684\u5bf9\u8c61\u52a0\u5165 only_in_list2_objs \u5217\u8868\n        while j < len(sorted_list2):\n            only_in_list2_objs.append(sorted_list2[j])\n            j += 1\n\n        return same_pk_but_change_objs, only_in_list1_objs, only_in_list2_objs\n\n    @staticmethod\n    def writeFileVersionInfo(input_scan_directory: string,\n                             your_output_file_name: string = DEFAULT_FILE_VERSION_OUTPUT_PATH,\n                             isNeedMd5: bool = True\n                             ):\n        dataList, output_file_name = FileCompareUtils.getFileVersionInfo(input_scan_directory,\n                                                                         isNeedMd5,\n                                                                         your_output_file_name)\n\n        # Create a new file to store the file map\n        with open(output_file_name, 'w') as f:\n            # output\n            csvList = CsvUtils.serialize(dataList)\n            f.write(f'{csvList}')\n\n    @staticmethod\n    def getFileVersionInfo(input_scan_directory, isNeedMd5, your_output_file_name):\n        if StringUtils.isBlank(input_scan_directory):\n            raise Exception(f'your scan_directory is blank')\n        if StringUtils.isBlank(your_output_file_name):\n            raise Exception(f'your output_directory is blank')\n\n        # handle\n        scan_directory = os.path.normpath(input_scan_directory.strip())\n        output_file_name = os.path.normpath(your_output_file_name.strip())\n        output_file_full_path = FileUtils.getFullPath(os.path.normpath(f'{output_file_name}'))\n\n        print(f'output file full path = {output_file_full_path}')\n        # Create an empty dictionary to store file paths and update times\n        file_map = {}\n        fileList = FileUtils.scanDir(scan_directory)\n        # Loop through each file in the directory\n        for filename in fileList:\n            # Get the full path of the file\n            to_handle_full_path = os.path.join(scan_directory, filename)\n            # Get the update time of the file and convert it to a readable format\n            update_time = time.strftime(\n                '%Y-%m-%d %H:%M:%S', time.localtime(os.path.getmtime(to_handle_full_path)))\n            # Add the file path and update time to the dictionary\n            file_map[to_handle_full_path] = update_time\n\n        dataList = []\n        # Loop through each file path and update time in the dictionary\n        for to_handle_full_path, update_time in file_map.items():\n\n            temp_path = os.path.normpath(to_handle_full_path)\n            # \u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\n            linux_full_path = os.path.abspath(temp_path)\n\n            if FileUtils.isNotFileExists(linux_full_path):\n                continue\n\n            if output_file_full_path == linux_full_path:\n                continue\n\n            md5_hash = None\n            if isNeedMd5:\n                # Open the file in read-only binary mode\n                with open(linux_full_path, 'rb') as read_file:\n                    # Read the contents of the file\n                    contents = read_file.read()\n                    # Calculate the MD5 hash of the contents\n                    md5_hash = hashlib.md5(contents).hexdigest()\n\n            # Write the file path and update time to the file\n            dto = FileCompareDto(\n                fullpath=linux_full_path,\n                update_time=update_time,\n                md5_hash=md5_hash,\n            )\n\n            dataList.append(dto)\n        return dataList, output_file_name", "\n\nclass FileCompareDto:\n    PK_FIELD = 'fullpath'\n\n    def __init__(self,\n                 fullpath: string,\n                 update_time: string,\n                 md5_hash: string\n                 ):\n        self.fullpath = fullpath\n        self.update_time = update_time\n        self.md5_hash = md5_hash", ""]}
{"filename": "suger/common/__init__.py", "chunked_list": ["# Common\nfrom suger.common.ObjectUtils import ObjectUtils\nfrom suger.common.StringUtils import StringUtils\n\n# File\nfrom suger.common.FileUtils import FileUtils\nfrom suger.common.FileCompareUtils import FileCompareUtils\n\n# Server\n", "# Server\n\n"]}
{"filename": "suger/common/ObjectUtils.py", "chunked_list": ["# @author SolarisNeko\nfrom collections import namedtuple\n\n\nclass ObjectUtils:\n\n    @staticmethod\n    def isNull(obj) -> bool:\n        return obj is None\n\n    @staticmethod\n    def isNotNull(obj) -> bool:\n        return not (obj is None)\n\n    @staticmethod\n    def defaultIfNull(obj, defaultObj) -> object:\n        \"\"\"\n        \u5982\u679c obj \u4e3a None\uff0c\u5219\u8fd4\u56de default\uff1b\u5426\u5219\u8fd4\u56de obj\u3002\n        \"\"\"\n        return defaultObj if obj is None else obj\n\n    @staticmethod\n    def equals(obj1, obj2) -> bool:\n        \"\"\"\n        \u5224\u65ad obj1 \u662f\u5426\u7b49\u4e8e obj2\uff0c\u5982\u679c obj1 \u548c obj2 \u5747\u4e3a None\uff0c\u5219\u8fd4\u56de True\u3002\n        \"\"\"\n        if obj1 is None and obj2 is None:\n            return True\n        elif obj1 is None or obj2 is None:\n            return False\n        else:\n            return obj1 == obj2\n\n    @staticmethod\n    def hashCode(obj) -> int:\n        \"\"\"\n        \u8fd4\u56de obj \u7684\u54c8\u5e0c\u503c\uff0c\u5982\u679c obj \u4e3a None\uff0c\u5219\u8fd4\u56de 0\u3002\n        \"\"\"\n        return 0 if obj is None else hash(obj)\n\n    @staticmethod\n    def is_class(obj):\n        return isinstance(obj, type)\n\n    @staticmethod\n    def dict_to_class(dictory_obj, clazz: type):\n        \"\"\"\n        dict -> object\n        :param dictory_obj: \u5b57\u5178\u5bf9\u8c61 {}\n        :param clazz: \u7c7b\n        :return: \u5bf9\u8c61\n        \"\"\"\n        classname = clazz\n        if ObjectUtils.is_class(clazz):\n            classname = clazz.__name__\n        # if typeName\n        return namedtuple(classname, dictory_obj.keys())(*dictory_obj.values())", ""]}
{"filename": "suger/common/FileUtils.py", "chunked_list": ["import os\nimport shutil\n\nfrom suger.common.StringUtils import StringUtils\n\n\n# @author SolarisNeko\nclass FileUtils:\n\n    @staticmethod\n    def getFullPath(your_path):\n        return os.path.abspath(your_path)\n\n    @staticmethod\n    def scanDir(dirPath, suffix=\"\"):\n        \"\"\"\n        \u9012\u5f52\u626b\u63cf\u6307\u5b9a\u76ee\u5f55\u4e0b\u6307\u5b9a\u540e\u7f00\u7684\u6240\u6709\u6587\u4ef6\u540d\u3002\n        \"\"\"\n        fileNames = []\n        for root, dirs, files in os.walk(dirPath):\n            for name in files:\n                if (StringUtils.isNotBlank(suffix)):\n                    if name.endswith(suffix):\n                        fileNames.append(os.path.join(root, name))\n                        continue\n                    else:\n                        continue\n                fileNames.append(os.path.join(root, name))\n        return list(map(FileUtils.getFullPath, fileNames))\n\n    @staticmethod\n    def deleteQuietly(fileOrDir):\n        \"\"\"\n        \u5c1d\u8bd5\u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u5982\u679c\u5220\u9664\u5931\u8d25\u5219\u4e0d\u62a5\u9519\u3002\n        \"\"\"\n        try:\n            if os.path.exists(fileOrDir):\n                if os.path.isfile(fileOrDir):\n                    os.remove(fileOrDir)\n                elif os.path.isdir(fileOrDir):\n                    shutil.rmtree(fileOrDir)\n        except Exception as e:\n            pass\n\n    @staticmethod\n    def forceMkdir(dirPath):\n        \"\"\"\n        \u521b\u5efa\u76ee\u5f55\uff0c\u5982\u679c\u76ee\u5f55\u5df2\u7ecf\u5b58\u5728\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002\n        \"\"\"\n        try:\n            os.makedirs(dirPath, exist_ok=True)\n        except Exception as e:\n            pass\n\n    @staticmethod\n    def readFileToString(file, encoding=\"utf-8\"):\n        \"\"\"\n        \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u8fd4\u56de\u5b57\u7b26\u4e32\u3002\n        \"\"\"\n        with open(file, \"r\", encoding=encoding) as f:\n            return f.read()\n\n    @staticmethod\n    def writeStringToFile(file, data, encoding=\"utf-8\", isAppend: bool = False):\n        if (isAppend):\n            with open(file, \"a\", encoding=encoding) as f:\n                f.write(data)\n            return\n\n        \"\"\"\n        \u5c06\u5b57\u7b26\u4e32\u5199\u5165\u6587\u4ef6\u3002\n        \"\"\"\n        with open(file, \"w\", encoding=encoding) as f:\n            f.write(data)\n\n    @classmethod\n    def isNotFileExists(cls, path):\n        return not FileUtils.isFileExists(path)\n\n    @classmethod\n    def isFileExists(cls, path):\n        if os.path.exists(path):\n            return True\n        return False", ""]}
{"filename": "suger/common/StringUtils.py", "chunked_list": ["# @author SolarisNeko\n\n\nclass StringUtils:\n\n    @staticmethod\n    def trim(string: str) -> str:\n        \"\"\"\n        \u5b89\u5168 trim string\n        \"\"\"\n        if string is None:\n            return \"\"\n        return string.strip()\n\n    @staticmethod\n    def strip(string: str) -> str:\n        return StringUtils.trim(string)\n\n    @staticmethod\n    def readBooleanTrue(string: str) -> bool:\n        \"\"\"\n        \u5c06 string \u8f6c\u6362\u4e3a\u5e03\u5c14\u503c True\n        \"\"\"\n        true_values = [\"ok\", \"success\", \"1\", \"yes\"]\n        return string.lower() in true_values\n\n    @staticmethod\n    def readBooleanFalse(string: str) -> bool:\n        \"\"\"\n        \u5c06 string \u8f6c\u6362\u4e3a\u5e03\u5c14\u503c False\n        \"\"\"\n        return not StringUtils.readBooleanTrue(string)\n\n    @staticmethod\n    def isBlank(str: str) -> bool:\n        \"\"\"\n        \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u767d\uff0c\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\u3001\u7eaf\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u7b49\u3002\n        \"\"\"\n        return str is None or len(str.strip()) == 0\n\n    @staticmethod\n    def isNotBlank(str: str) -> bool:\n        \"\"\"\n        \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e0d\u4e3a\u7a7a\u767d\u3002\n        \"\"\"\n        return not StringUtils.isBlank(str)\n\n    @staticmethod\n    def defaultIfBlank(str: str, default):\n        \"\"\"\n        \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\u767d\uff0c\u5219\u8fd4\u56de default\uff1b\u5426\u5219\u8fd4\u56de\u5b57\u7b26\u4e32\u672c\u8eab\u3002\n        \"\"\"\n        return default if StringUtils.isBlank(str) else str\n\n    @staticmethod\n    def join(separator, *strs: str):\n        \"\"\"\n        \u4f7f\u7528\u6307\u5b9a\u7684\u5206\u9694\u7b26\u8fde\u63a5\u591a\u4e2a\u5b57\u7b26\u4e32\u3002\n        \"\"\"\n        return separator.join(strs)\n\n    @staticmethod\n    def abbreviate(str: str, maxWidth):\n        \"\"\"\n        \u5c06\u5b57\u7b26\u4e32\u7f29\u77ed\u5230\u6307\u5b9a\u7684\u6700\u5927\u5bbd\u5ea6\uff08\u5305\u62ec\u7701\u7565\u53f7\uff09\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u672c\u8eab\u5df2\u7ecf\u4e0d\u8d85\u8fc7\u6700\u5927\u5bbd\u5ea6\uff0c\u5219\u8fd4\u56de\u539f\u5b57\u7b26\u4e32\u3002\n        \"\"\"\n        if len(str) <= maxWidth:\n            return str\n        else:\n            return str[:maxWidth - 3] + \"...\"\n\n    @staticmethod\n    def coverByteToHexString(byteArray: bytes) -> str:\n        if byteArray is None:\n            return \"\"\n        \"\"\"\n        \u5c06\u6bd4\u7279\u6d41\u53d8\u6210Hex\u5b57\u7b26\u4e32\n        \"\"\"\n        return ''.join(['%02X' % b for b in byteArray])\n\n    @staticmethod\n    def coverStringToByteString(string: str):\n        if string is None:\n            return \"\"\n        \"\"\"\n        \u5c06\u5b57\u7b26\u4e32\u53d8\u6210ASCII\u6bd4\u7279\u6d41\u5b57\u7b26\u4e32\n        \"\"\"\n        return string.encode().hex()\n\n    @staticmethod\n    def coverHexStringToByte(hex_string: str) -> bytes:\n        \"\"\"\n        \u5c06\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32, \u8f6c\u6362\u4e3a bytes\n        \"\"\"\n        if hex_string is None:\n            return bytes([])\n        return bytes.fromhex(hex_string)\n\n    @staticmethod\n    def coverByteStringToString(byte_string: str) -> str:\n        \"\"\"\n        \u5c06ASCII\u7f16\u7801\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32, \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n        \"\"\"\n        return bytes.fromhex(byte_string).decode()", ""]}
{"filename": "suger/data_operator/JsonUtils.py", "chunked_list": ["import json\n\nfrom suger.common import ObjectUtils\n\n\nclass JsonUtils:\n    @staticmethod\n    def serialize(obj):\n        \"\"\"Serialize a Python object to a JSON string.\"\"\"\n        if isinstance(obj, (str, int, float, bool, type(None))):\n            return json.dumps(obj)\n        elif isinstance(obj, (list, tuple)):\n            return json.dumps([JsonUtils.serialize(e) for e in obj])\n        elif isinstance(obj, dict):\n            return json.dumps({k: JsonUtils.serialize(v) for k, v in obj.items()})\n        else:\n            return json.dumps(vars(obj))\n\n    @staticmethod\n    def deserialize(json_str, clazz: type = None):\n        \"\"\"Deserialize a JSON string to a Python object.\"\"\"\n        obj = json.loads(json_str)\n        if (ObjectUtils.isNull(clazz)):\n            return obj\n        return ObjectUtils.dict_to_class(obj, clazz)", ""]}
{"filename": "suger/data_operator/XmlUtils.py", "chunked_list": ["import xml.etree.ElementTree as ElementTree\n\n\nclass XmlUtils:\n\n    def __init__(self, file_path):\n        self.file_path = file_path\n        self.tree = ElementTree.parse(self.file_path)\n        self.root = self.tree.getroot()\n\n    def find_element(self, element_path):\n        return self.root.find(element_path)\n\n    def find_elements(self, element_path):\n        return self.root.findall(element_path)\n\n    def set_element_value(self, element_path, value):\n        element = self.find_element(element_path)\n        element.text = str(value)\n        self.tree.write(self.file_path)\n\n    def add_element(self, element_path, element):\n        parent = self.find_element(element_path)\n        parent.append(element)\n        self.tree.write(self.file_path)\n\n    def remove_element(self, element_path):\n        parent = self.find_element(element_path)\n        parent.clear()\n        self.tree.write(self.file_path)\n\n    def write_file(self, file_path=None):\n        if file_path:\n            self.tree.write(file_path)\n        else:\n            self.tree.write(self.file_path)", ""]}
{"filename": "suger/data_operator/__init__.py", "chunked_list": ["# JSON\nfrom suger.data_operator.JsonUtils import JsonUtils\n# CSV\nfrom suger.data_operator.CsvUtils import CsvUtils\n# Excel\nfrom suger.data_operator.ExcelUtils import ExcelUtils\n\n# XML\nfrom suger.data_operator.XmlUtils import XmlUtils\nfrom xml.etree import ElementTree", "from suger.data_operator.XmlUtils import XmlUtils\nfrom xml.etree import ElementTree\n\n"]}
{"filename": "suger/data_operator/CsvUtils.py", "chunked_list": ["import csv\nimport io\n\nclass CsvUtils:\n    @staticmethod\n    def serialize(obj):\n        \"\"\"Serialize a Python object to a CSV string.\"\"\"\n        if isinstance(obj, list):\n            if len(obj) == 0:\n                return ''\n            csv_file = io.StringIO()\n            writer = csv.writer(csv_file)\n            writer.writerow(obj[0].__dict__.keys())\n            for item in obj:\n                writer.writerow(item.__dict__.values())\n            return csv_file.getvalue()\n        else:\n            fieldnames = obj.__dict__.keys()\n            csv_file = io.StringIO()\n            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)\n            writer.writeheader()\n            writer.writerow(obj.__dict__)\n            return csv_file.getvalue()\n\n    @staticmethod\n    def deserialize(csv_str, obj_class):\n        \"\"\"Deserialize a CSV string to a Python object.\"\"\"\n        if not csv_str:\n            return None\n        if '\\n' in csv_str:\n            reader = csv.DictReader(io.StringIO(csv_str))\n            result = []\n            for row in reader:\n                result.append(obj_class(**row))\n            return result\n        else:\n            reader = csv.DictReader(io.StringIO(csv_str))\n            obj_dict = next(reader)\n            obj = obj_class(**obj_dict)\n            return obj", ""]}
{"filename": "suger/data_operator/ExcelUtils.py", "chunked_list": ["import openpyxl\n\n\nclass ExcelUtils:\n    @staticmethod\n    def serialize(sheet, skip_rows=0) -> list:\n        \"\"\"\n        \u5c06\u6307\u5b9a\u7684 sheet \u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5217\u8868\u3002\n        skip_rows: \u8df3\u8fc7\u7684\u884c\u6570\u3002\n        \"\"\"\n        result = []\n        for row in sheet.iter_rows(min_row=skip_rows + 1, values_only=True):\n            result.append(list(row))\n        return result\n\n    @staticmethod\n    def deserialize(sheet, dataList, skip_rows=0) -> None:\n        \"\"\"\n        \u5c06\u4e00\u4e2a data \u5217\u8868\u53cd\u5e8f\u5217\u5316\u4e3a\u6307\u5b9a\u7684 sheet \u5bf9\u8c61\u3002\n        sheet: \u76ee\u6807 sheet \u5bf9\u8c61\u3002\n        data: \u7528\u4e8e\u53cd\u5e8f\u5217\u5316\u7684 ${\u4f60\u7684\u6570\u636e\u5217\u8868}\n        skip_rows: \u8df3\u8fc7\u7684\u884c\u6570\u3002\n        \"\"\"\n        for i, row in enumerate(dataList):\n            if i < skip_rows:\n                continue\n            sheet.append(row)\n\n    @staticmethod\n    def load_workbook(file_path):\n        \"\"\"\n        \u52a0\u8f7d\u6307\u5b9a\u7684 Excel \u6587\u4ef6\u3002\n        \"\"\"\n        return openpyxl.load_workbook(file_path)\n\n    @staticmethod\n    def save_workbook(workbook, file_path):\n        \"\"\"\n        \u4fdd\u5b58\u6307\u5b9a\u7684 Excel \u6587\u4ef6\u3002\n        \"\"\"\n        workbook.save(file_path)\n\n    @staticmethod\n    def get_sheet_by_name(workbook, sheet_name):\n        \"\"\"\n        \u83b7\u53d6\u6307\u5b9a\u540d\u79f0\u7684 sheet \u5bf9\u8c61\u3002\n        \"\"\"\n        return workbook[sheet_name]\n\n    @staticmethod\n    def create_sheet(workbook, sheet_name):\n        \"\"\"\n        \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 sheet \u5bf9\u8c61\u3002\n        \"\"\"\n        return workbook.create_sheet(title=sheet_name)", ""]}
