{"filename": "hello-helper-service/tests/__init__.py", "chunked_list": [""]}
{"filename": "hello-helper-service/app/main.py", "chunked_list": ["import os\nimport signal\n\nimport paho.mqtt.client as mqtt\nfrom customer_name_db import CustomerNameDb\nfrom loguru import logger\nfrom message_parser import MessageParser\nfrom mqtt_topic_helper import MqttTopicHelper\n\n\ndef on_connect(client, userdata, flags, rc):\n    logger.info(f\"Connected with result code: {rc}\") \n    topic_helper = MqttTopicHelper('spectrum-grocers', 'fresh-frontier')\n    client.subscribe(topic_helper.customer_arrival())", "\n\ndef on_connect(client, userdata, flags, rc):\n    logger.info(f\"Connected with result code: {rc}\") \n    topic_helper = MqttTopicHelper('spectrum-grocers', 'fresh-frontier')\n    client.subscribe(topic_helper.customer_arrival())\n\n\ndef on_message(client, userdata, msg):\n    parser = MessageParser()\n    customer_id = parser.get_customer_id(msg.payload)\n    customer_name = CustomerNameDb().get_name(customer_id)\n    logger.info(f\"Welcome, {customer_name}\")", "def on_message(client, userdata, msg):\n    parser = MessageParser()\n    customer_id = parser.get_customer_id(msg.payload)\n    customer_name = CustomerNameDb().get_name(customer_id)\n    logger.info(f\"Welcome, {customer_name}\")\n\n\ndef on_signal(signum, frame):\n    logger.info(\"Received termination signal, disconnecting...\")\n    client.disconnect()", "\n\ndef main():\n    global client\n    client = mqtt.Client(client_id=\"hello-helper-service\")\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    # Register the signal handlers\n    signal.signal(signal.SIGINT, on_signal)\n    signal.signal(signal.SIGTERM, on_signal)\n\n    message_broker_host = os.environ.get(\"BROKER_ADDRESS\", \"localhost\")\n    client.connect(message_broker_host, 1883, 60)\n    client.loop_forever()", "\n\nif __name__ == '__main__':\n    main()\n"]}
{"filename": "hello-helper-service/app/customer_name_db.py", "chunked_list": ["class CustomerNameDb:\n    def __init__(self):\n        self._name_map = {\n            1: \"Astra Nova\",\n            2: \"Baxter Quantum\",\n            3: \"Cassiopeia Starlight\",\n            4: \"Draco Cosmos\",\n            5: \"Echo Nebula\",\n            6: \"Falcon Orion\",\n            7: \"Galaxy Pulsar\",\n            8: \"Halley Comet\",\n            9: \"Ignis Solaris\",\n            10: \"Jupiter Zenith\"\n        }\n\n    def get_name(self, id):\n        return self._name_map.get(id, \"Unknown\")", ""]}
{"filename": "hello-helper-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n    def __init__(self, chain_name, store_name):\n        self.chain_name = chain_name\n        self.store_name = store_name\n\n    def customer_arrival(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\n    def customer_departure(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\n    def display_welcome(self):\n        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\n    def purchase_complete(self):\n        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\n    def stock_update(self):\n        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\n    def restock_alert(self):\n        return f\"{self.chain_name}/{self.store_name}/restock-alert\"", ""]}
{"filename": "hello-helper-service/app/__init__.py", "chunked_list": [""]}
{"filename": "hello-helper-service/app/message_parser.py", "chunked_list": ["import json\n\n\nclass MessageParser:\n    def parse_message(self, message):\n        return json.loads(message)\n\n    def get_customer_id(self, message):\n        msg_dict = self.parse_message(message)\n        return msg_dict.get('customer_id', None)\n\n    def get_items(self, message):\n        msg_dict = self.parse_message(message)\n        return msg_dict.get('items', None)\n\n    def get_item_id(self, message):\n        msg_dict = self.parse_message(message)\n        return msg_dict.get('item_id', None)\n\n    def get_quantity(self, message):\n        msg_dict = self.parse_message(message)\n        return msg_dict.get('quantity', None)\n\n    def get_timestamp(self, message):\n        msg_dict = self.parse_message(message)\n        return msg_dict.get('timestamp', None)", ""]}
{"filename": "gateway-guardian-service/tests/__init__.py", "chunked_list": [""]}
{"filename": "gateway-guardian-service/app/message_helper.py", "chunked_list": ["import json\nfrom datetime import datetime\n\n\nclass MessageHelper:\n    def _current_datetime(self):\n        return datetime.now().isoformat()\n\n    def customer_arrival(self, customer_id):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id})\n\n    def purchase_complete(self, customer_id, items):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id, \"items\": items})\n\n    def stock_update(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})\n\n    def restock_alert(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})", ""]}
{"filename": "gateway-guardian-service/app/main.py", "chunked_list": ["import os\nimport random\nimport signal\nfrom threading import Event\n\nfrom loguru import logger\nfrom message_helper import MessageHelper\nfrom mqtt_topic_helper import MqttTopicHelper\nfrom paho.mqtt import client as mqtt_client\n", "from paho.mqtt import client as mqtt_client\n\nbroker = os.getenv('BROKER_ADDRESS', 'localhost')\nport = 1883\nclient_id = \"gateway-guardian-service\"\nrunning = Event()  # Event object to replace the running flag\n\n\ndef connect_mqtt():\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n        else:\n            print(\"Failed to connect, return code %d\\n\", rc)\n\n    client = mqtt_client.Client(client_id)\n    client.on_connect = on_connect\n    client.connect(broker, port)\n    return client", "def connect_mqtt():\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n        else:\n            print(\"Failed to connect, return code %d\\n\", rc)\n\n    client = mqtt_client.Client(client_id)\n    client.on_connect = on_connect\n    client.connect(broker, port)\n    return client", "\n\ndef publish(client):\n    topic_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\n    message_helper = MessageHelper()\n\n    while not running.is_set():\n        customer_id = random.randint(1, 10)\n        topic = topic_helper.customer_arrival()\n        message = message_helper.customer_arrival(customer_id)\n\n        logger.info(f\"Pub to {topic}: {message}\")\n        client.publish(topic, message)\n\n        running.wait(random.randint(2, 20))\n\n    client.disconnect()", "\n\n# Handle Signals for Graceful Shutdown\ndef handle_signal(signum, frame):\n    running.set()\n    print(\"Gracefully shutting down...\")\n\n\nsignal.signal(signal.SIGINT, handle_signal)\nsignal.signal(signal.SIGTERM, handle_signal)", "signal.signal(signal.SIGINT, handle_signal)\nsignal.signal(signal.SIGTERM, handle_signal)\n\nif __name__ == \"__main__\":\n    client = connect_mqtt()\n    client.loop_start()\n    publish(client)\n"]}
{"filename": "gateway-guardian-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n    def __init__(self, chain_name, store_name):\n        self.chain_name = chain_name\n        self.store_name = store_name\n\n    def customer_arrival(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\n    def display_welcome(self):\n        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\n    def purchase_complete(self):\n        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\n    def stock_update(self):\n        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\n    def restock_alert(self):\n        return f\"{self.chain_name}/{self.store_name}/restock-alert\"", ""]}
{"filename": "gateway-guardian-service/app/__init__.py", "chunked_list": [""]}
{"filename": "fastlane-finale-service/tests/__init__.py", "chunked_list": [""]}
{"filename": "fastlane-finale-service/app/message_helper.py", "chunked_list": ["import json\nfrom datetime import datetime\n\n\nclass MessageHelper:\n    def _current_datetime(self):\n        return datetime.now().isoformat()\n\n    def customer_arrival(self, customer_id):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id})\n\n    def customer_departure(self, customer_id, product_ids):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id,\n                           \"product_ids\": product_ids})\n\n    def purchase_complete(self, customer_id, items):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id,\n                           \"items\": items})\n\n    def stock_update(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})\n\n    def restock_alert(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})\n\n    def payment_due(self, customer_id, amount):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id, \"amount\": amount})", ""]}
{"filename": "fastlane-finale-service/app/main.py", "chunked_list": ["import os\nimport random\nimport signal\nimport sys\nimport time\n\nfrom loguru import logger\nfrom message_helper import MessageHelper\nfrom message_parser import MessageParser\nfrom mqtt_topic_helper import MqttTopicHelper", "from message_parser import MessageParser\nfrom mqtt_topic_helper import MqttTopicHelper\nfrom paho.mqtt import client as mqtt_client\n\n\nclass ProductPricing:\n    def __init__(self):\n        self.prices = {i: round(random.uniform(1, 20), 2) for i in range(1, 101)}\n\n    def get_price(self, product_id):\n        return self.prices.get(product_id, 0)", "\n\nbroker = os.getenv('BROKER_ADDRESS', 'localhost')\nport = 1883\nclient_id = \"fastlane_finale_service\"\ntopic_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\nmessage_helper = MessageHelper()\nmessage_parser = MessageParser()\nproduct_pricing = ProductPricing()\n", "product_pricing = ProductPricing()\n\n\ndef connect_mqtt():\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            logger.info(\"Connected to MQTT Broker!\")\n        else:\n            logger.error(\"Failed to connect, return code %d\\n\", rc)\n\n    client = mqtt_client.Client(client_id)\n    client.on_connect = on_connect\n    client.connect(broker, port)\n    return client", "\n\ndef subscribe(client):\n    def on_message(client, userdata, msg):\n        customer_departure = message_parser.customer_departure(msg.payload)\n        total_price = 0\n        for product_id in customer_departure['product_ids']:\n            total_price += product_pricing.get_price(product_id)\n        payment_message = message_helper.payment_due(customer_departure['customer_id'],\n                                                     total_price)\n        client.publish(topic_helper.payment_due(), payment_message)\n\n        logger.info(f\"Payment due for customer {customer_departure['customer_id']}:\" +\n                    f\" ${total_price:.2f}\")\n\n    client.subscribe(topic_helper.customer_departure())\n    client.on_message = on_message", "\n\ndef handle_signal(signum, frame):\n    logger.info(\"Gracefully shutting down...\")\n    client.disconnect()\n    sys.exit(0)\n\n\ndef run():\n    client = connect_mqtt()\n    subscribe(client)\n    client.loop_start()\n    while True:\n        time.sleep(1)  # just to prevent the script from ending", "def run():\n    client = connect_mqtt()\n    subscribe(client)\n    client.loop_start()\n    while True:\n        time.sleep(1)  # just to prevent the script from ending\n\n\nsignal.signal(signal.SIGINT, handle_signal)\nsignal.signal(signal.SIGTERM, handle_signal)", "signal.signal(signal.SIGINT, handle_signal)\nsignal.signal(signal.SIGTERM, handle_signal)\n\n\nif __name__ == \"__main__\":\n    run()\n"]}
{"filename": "fastlane-finale-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n    def __init__(self, chain_name, store_name):\n        self.chain_name = chain_name\n        self.store_name = store_name\n\n    def customer_arrival(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\n    def customer_departure(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\n    def display_welcome(self):\n        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\n    def purchase_complete(self):\n        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\n    def stock_update(self):\n        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\n    def restock_alert(self):\n        return f\"{self.chain_name}/{self.store_name}/restock-alert\"\n\n    def payment_due(self):\n        return f\"{self.chain_name}/{self.store_name}/payment-due\"", ""]}
{"filename": "fastlane-finale-service/app/__init__.py", "chunked_list": [""]}
{"filename": "fastlane-finale-service/app/message_parser.py", "chunked_list": ["import json\n\n\nclass MessageParser:\n    def customer_arrival(self, message):\n        data = json.loads(message)\n        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id']}\n\n    def customer_departure(self, message):\n        data = json.loads(message)\n        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id'],\n                'product_ids': data['product_ids']}", ""]}
{"filename": "gateexit-guardian-service/tests/__init__.py", "chunked_list": [""]}
{"filename": "gateexit-guardian-service/app/message_helper.py", "chunked_list": ["import json\nfrom datetime import datetime\n\n\nclass MessageHelper:\n    def _current_datetime(self):\n        return datetime.now().isoformat()\n\n    def customer_arrival(self, customer_id):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id})\n\n    def customer_departure(self, customer_id, product_ids):\n        return json.dumps({\n            \"timestamp\": self._current_datetime(),\n            \"customer_id\": customer_id,\n            \"product_ids\": product_ids\n        })\n\n    def purchase_complete(self, customer_id, items):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"customer_id\": customer_id, \"items\": items})\n\n    def stock_update(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})\n\n    def restock_alert(self, item_id, quantity):\n        return json.dumps({\"timestamp\": self._current_datetime(),\n                           \"item_id\": item_id, \"quantity\": quantity})", ""]}
{"filename": "gateexit-guardian-service/app/main.py", "chunked_list": ["import os\nimport random\nimport signal\nimport sys\nimport time\n\nfrom loguru import logger\nfrom message_helper import MessageHelper\nfrom mqtt_topic_helper import MqttTopicHelper\nfrom paho.mqtt import client as mqtt_client", "from mqtt_topic_helper import MqttTopicHelper\nfrom paho.mqtt import client as mqtt_client\n\nbroker = os.getenv('BROKER_ADDRESS', 'localhost')\nport = 1883\nclient_id = \"gateexit-guardian-service\"\n\ntopic_helper = MqttTopicHelper('spectrum-grocers', 'fresh-frontier')\nexit_topic = topic_helper.customer_departure()\n", "exit_topic = topic_helper.customer_departure()\n\nmessage_helper = MessageHelper()\n\n\ndef connect_mqtt():\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            logger.info(f\"Connected with result code: {rc}\")\n        else:\n            logger.info(f\"Failed to connect, return code: {rc}\")\n\n    client = mqtt_client.Client(client_id)\n    client.on_connect = on_connect\n    client.connect(broker, port)\n    return client", "\n\ndef publish(client):\n    while True:\n        time.sleep(random.randint(2, 20))\n        customer_id = random.randint(1, 10)\n        product_ids = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        message = message_helper.customer_departure(customer_id, product_ids)\n        result = client.publish(exit_topic, message)\n        status = result[0]\n        if status == 0:\n            logger.info(f\"Published message to topic {exit_topic}\")\n        else:\n            logger.info(f\"Failed to publish message to topic {exit_topic}\")", "\n\ndef handle_exit(signum, frame):\n    client.disconnect()\n    logger.info(\"Gracefully shutting down...\")\n    sys.exit(0)\n\n\nsignal.signal(signal.SIGINT, handle_exit)\nsignal.signal(signal.SIGTERM, handle_exit)", "signal.signal(signal.SIGINT, handle_exit)\nsignal.signal(signal.SIGTERM, handle_exit)\n\n\nif __name__ == '__main__':\n    client = connect_mqtt()\n    client.loop_start()\n    publish(client)\n", ""]}
{"filename": "gateexit-guardian-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n    def __init__(self, chain_name, store_name):\n        self.chain_name = chain_name\n        self.store_name = store_name\n\n    def customer_departure(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\n    def display_welcome(self):\n        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\n    def purchase_complete(self):\n        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\n    def stock_update(self):\n        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\n    def restock_alert(self):\n        return f\"{self.chain_name}/{self.store_name}/restock-alert\"", ""]}
{"filename": "gateexit-guardian-service/app/__init__.py", "chunked_list": [""]}
{"filename": "inventory-intel-service/tests/__init__.py", "chunked_list": [""]}
{"filename": "inventory-intel-service/app/main.py", "chunked_list": ["import os\nimport signal\nimport time\n\nimport paho.mqtt.client as mqtt\nfrom inventory import Inventory\nfrom loguru import logger\nfrom message_parser import MessageParser\nfrom mqtt_topic_helper import MqttTopicHelper\n", "from mqtt_topic_helper import MqttTopicHelper\n\n# Define MQTT client ID and Broker Address\nclient_id = \"inventory-intel-service\"\nmessage_broker_host = os.environ.get(\"BROKER_ADDRESS\", \"localhost\")\n\n# Initialize MQTT Helper\nmqtt_helper = MqttTopicHelper(\"spectrum-grocers\", \"fresh-frontier\")\n\n# Initialize Message Parser", "\n# Initialize Message Parser\nmessage_parser = MessageParser()\n\n# Define Inventory\ninventory = Inventory()\n\n\ndef on_connect(client, userdata, flags, rc):\n    logger.info(f\"Connected to MQTT Broker: {message_broker_host} with result code: {rc}\")\n    client.subscribe(mqtt_helper.customer_departure())", "def on_connect(client, userdata, flags, rc):\n    logger.info(f\"Connected to MQTT Broker: {message_broker_host} with result code: {rc}\")\n    client.subscribe(mqtt_helper.customer_departure())\n\n\ndef on_message(client, userdata, msg):\n    message = message_parser.customer_departure(msg.payload)\n    customer_id = message['customer_id']\n    product_ids = message['product_ids']\n    for product_id in product_ids:\n        inventory.inventory[product_id]['stock'] -= 1\n    logger.info(f\"Inventory updated for customer {customer_id}.\")", "\n\ndef log_inventory():\n    while True:\n        logger.info(\"Inventory Check:\")\n        for product_id, product_info in inventory.inventory.items():\n            if int(product_info['stock']) < 100:\n                logger.info(f\"Id: {product_id}, Pr: {product_info['name']},\" +\n                            f\"St: {product_info['stock']}\")\n        time.sleep(60)", "\n\ndef on_exit(signum, frame):\n    logger.info(\"Received Exit Signal...Disconnecting from Broker\")\n    client.disconnect()\n    exit(0)\n\n\n# MQTT client\nclient = mqtt.Client(client_id)", "# MQTT client\nclient = mqtt.Client(client_id)\nclient.on_connect = on_connect\nclient.on_message = on_message\n\n# Connect to MQTT Broker\nclient.connect(message_broker_host)\n\n# Handle exit signals\nsignal.signal(signal.SIGINT, on_exit)", "# Handle exit signals\nsignal.signal(signal.SIGINT, on_exit)\nsignal.signal(signal.SIGTERM, on_exit)\n\n# Start MQTT client loop\nclient.loop_start()\n\n# Log inventory every 30 seconds\nlog_inventory()\n", "log_inventory()\n"]}
{"filename": "inventory-intel-service/app/mqtt_topic_helper.py", "chunked_list": ["class MqttTopicHelper:\n    def __init__(self, chain_name, store_name):\n        self.chain_name = chain_name\n        self.store_name = store_name\n\n    def customer_arrival(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-arrival\"\n\n    def customer_departure(self):\n        return f\"{self.chain_name}/{self.store_name}/customer-departure\"\n\n    def display_welcome(self):\n        return f\"{self.chain_name}/{self.store_name}/display-welcome\"\n\n    def purchase_complete(self):\n        return f\"{self.chain_name}/{self.store_name}/purchase-complete\"\n\n    def stock_update(self):\n        return f\"{self.chain_name}/{self.store_name}/stock-update\"\n\n    def restock_alert(self):\n        return f\"{self.chain_name}/{self.store_name}/restock-alert\"", ""]}
{"filename": "inventory-intel-service/app/__init__.py", "chunked_list": [""]}
{"filename": "inventory-intel-service/app/inventory.py", "chunked_list": ["from faker import Faker\n\n\nclass Inventory:\n    def __init__(self):\n        self.fake = Faker()\n        self.inventory = self._generate_inventory()\n\n    def _generate_inventory(self):\n        inventory = {}\n        for i in range(1, 101):  # generate 100 products\n            inventory[i] = {'name': self.fake.commerce.product(), 'stock': 100}\n        return inventory", ""]}
{"filename": "inventory-intel-service/app/message_parser.py", "chunked_list": ["import json\n\n\nclass MessageParser:\n    def customer_arrival(self, message):\n        data = json.loads(message)\n        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id']}\n\n    def customer_departure(self, message):\n        data = json.loads(message)\n        return {'timestamp': data['timestamp'], 'customer_id': data['customer_id'],\n                'product_ids': data['product_ids']}", ""]}
