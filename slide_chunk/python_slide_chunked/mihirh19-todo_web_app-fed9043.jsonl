{"filename": "backend/main.py", "chunked_list": ["import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app:app\", host=\"0.0.0.0\", port=8000, reload=True)\n"]}
{"filename": "backend/__init__.py", "chunked_list": [""]}
{"filename": "backend/app/app.py", "chunked_list": ["from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom .core import settings\nfrom beanie import init_beanie\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom .models import User, Todo\nfrom .api.api_v1 import router\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,", "app = FastAPI(\n    title=settings.PROJECT_NAME,\n    openapi_url=f\"{settings.API_V1_STR}/openapi.json\"\n)\n\norigins = ['*']\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,", "    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n\n)\n\n\n@app.on_event(\"startup\")\nasync def app_init():", "@app.on_event(\"startup\")\nasync def app_init():\n    \"\"\"\n        Initialize crucial application services\n    \"\"\"\n    db_client = AsyncIOMotorClient(settings.MONGO_CONNECTION_STRING).fodolist\n    await init_beanie(\n        database=db_client,\n        document_models=[\n            User,", "        document_models=[\n            User,\n            Todo\n        ]\n    )\n\n\napp.include_router(router, prefix=settings.API_V1_STR)\n\n", "\n\n@app.get('/')\ndef index():\n    return {'message': \"server is running\", \"documents\": \"http://localhost:8000/docs\",\n            \"postman Documentation\": \"https://documenter.getpostman.com/view/22926184/2s93RUtBH8\"}\n"]}
{"filename": "backend/app/__init__.py", "chunked_list": ["from .app import app\n\n__all__ = ['app']"]}
{"filename": "backend/app/schemas/user_schema.py", "chunked_list": ["from uuid import UUID\nfrom typing import Optional\n\nfrom pydantic import BaseModel, EmailStr, Field\n\n\nclass UserAuth(BaseModel):\n    email: EmailStr = Field(..., description=\"user email\")\n    username: str = Field(..., min_length=5, max_length=50, description=\"user username\")\n    password: str = Field(..., min_length=5, max_length=25)", "\n\nclass UserOut(BaseModel):\n    user_id: UUID\n    username: str\n    email: EmailStr\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    disabled:Optional[bool] = False\n", ""]}
{"filename": "backend/app/schemas/__init__.py", "chunked_list": ["from .auth_schema import TokenSchema, TokenPayload\nfrom .todo_schema import TodoCreate, TodoUpdate, TodoOut\nfrom .user_schema import UserAuth, UserOut\n\n__all__ = ['TokenSchema', 'TokenPayload', 'TodoOut', 'TodoUpdate', 'TodoCreate', 'UserOut', 'UserAuth']\n"]}
{"filename": "backend/app/schemas/auth_schema.py", "chunked_list": ["from uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass TokenSchema(BaseModel):\n    access_token: str\n    refresh_token: str\n\n\nclass TokenPayload(BaseModel):\n    sub: UUID = None\n    exp: int", "\n\nclass TokenPayload(BaseModel):\n    sub: UUID = None\n    exp: int\n"]}
{"filename": "backend/app/schemas/todo_schema.py", "chunked_list": ["from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, Field\n\n\nclass TodoCreate(BaseModel):\n    title: str = Field(..., title=\"Title\", max_length=55, min_length=1)\n    description: str = Field(..., title=\"Description\", max_length=7555, min_length=1)\n    status: Optional[bool] = False", "\n\nclass TodoUpdate(BaseModel):\n    title: Optional[str] = Field(..., title=\"Title\", max_length=55, min_length=1)\n    description: Optional[str] = Field(..., title=\"Description\", max_length=7555, min_length=1)\n    status: Optional[bool] = False\n\n\nclass TodoOut(BaseModel):\n    todo_id: UUID\n    status: bool\n    title: str\n    description: str\n    created_at: datetime\n    updated_at: datetime", "class TodoOut(BaseModel):\n    todo_id: UUID\n    status: bool\n    title: str\n    description: str\n    created_at: datetime\n    updated_at: datetime\n"]}
{"filename": "backend/app/models/user_model.py", "chunked_list": ["from datetime import datetime\nfrom uuid import UUID, uuid4\nfrom typing import Optional\nfrom beanie import Document, Indexed\nfrom pydantic import Field, EmailStr\n\n\nclass User(Document):\n    user_id: UUID = Field(default_factory=uuid4)\n    username: Indexed(str, unique=True)\n    email: Indexed(EmailStr, unique=True)\n    hashed_password: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    disabled: Optional[bool] = False\n\n    def __repr__(self) -> str:\n        return f\"<User> {self.email}\"\n\n    def __str__(self) -> str:\n        return self.email\n\n    def __hash__(self) -> int:\n        return hash(self.email)\n\n    def __eq__(self, other: object) -> bool:\n        if isinstance(other, User):\n            return self.email == other.email\n        return False\n\n    @property\n    def create(self) -> datetime:\n        return self.id.generation_time\n\n    @classmethod\n    async def by_email(self, email: str) -> \"User\":\n        return await self.find_one(self.email == email)\n\n    class Settings:\n        name = 'users'", ""]}
{"filename": "backend/app/models/__init__.py", "chunked_list": ["from .todo_model import Todo\nfrom .user_model import User\n\n__all__ =['User', 'Todo']"]}
{"filename": "backend/app/models/todo_model.py", "chunked_list": ["from datetime import datetime\nfrom uuid import UUID, uuid4\nfrom typing import Optional\nfrom beanie import Document, Indexed, Link, before_event, Replace, Insert\nfrom pydantic import Field, EmailStr\nfrom ..models.user_model import User\n\n\n# from .user_model import User\n\nclass Todo(Document):\n    todo_id: UUID = Field(default_factory=uuid4, unique=True)\n    status: bool = False\n    title: Indexed(str)\n    description: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    owner: Link[User]\n\n    def __repr__(self) -> str:\n        return f\"<User> {self.title}\"\n\n    def __str__(self) -> str:\n        return self.title\n\n    def __hash__(self) -> int:\n        return hash(self.title)\n\n    def __eq__(self, other: object) -> bool:\n        if isinstance(other, Todo):\n            return self.todo_id == other.todo_id\n        return False\n\n    @before_event(Replace, Insert)\n    def update_update_at(self):\n        self.updated_at = datetime.utcnow()\n\n    class Settings:\n        name = \"todos\"", "# from .user_model import User\n\nclass Todo(Document):\n    todo_id: UUID = Field(default_factory=uuid4, unique=True)\n    status: bool = False\n    title: Indexed(str)\n    description: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    owner: Link[User]\n\n    def __repr__(self) -> str:\n        return f\"<User> {self.title}\"\n\n    def __str__(self) -> str:\n        return self.title\n\n    def __hash__(self) -> int:\n        return hash(self.title)\n\n    def __eq__(self, other: object) -> bool:\n        if isinstance(other, Todo):\n            return self.todo_id == other.todo_id\n        return False\n\n    @before_event(Replace, Insert)\n    def update_update_at(self):\n        self.updated_at = datetime.utcnow()\n\n    class Settings:\n        name = \"todos\""]}
{"filename": "backend/app/core/security.py", "chunked_list": ["from passlib.context import CryptContext\nfrom typing import Any, Union\nfrom datetime import datetime, timedelta\nfrom .config import settings\nfrom jose import jwt\n\npassword_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef create_access_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode = {\"exp\": expires_delta, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm=settings.ALGORITHM)\n    return encoded_jwt", "\ndef create_access_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode = {\"exp\": expires_delta, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET_KEY, algorithm=settings.ALGORITHM)\n    return encoded_jwt", "\n\ndef create_refresh_token(subject: Union[str, Any], expires_delta: int = None) -> str:\n    if expires_delta is not None:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(minutes=settings.REFRESH_TOKEN_EXPIRE_MINUTES)\n\n    to_encode = {\"exp\": expires_delta, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.JWT_REFRESH_SECRET_KEY, algorithm=settings.ALGORITHM)\n    return encoded_jwt", "1\n\ndef get_password(password: str) -> str:\n    return password_context.hash(password)\n\n\ndef verify_password(password: str, hashed_password: str) -> bool:\n    return password_context.verify(password, hashed_password)\n", ""]}
{"filename": "backend/app/core/config.py", "chunked_list": ["from pydantic import BaseSettings, AnyHttpUrl\nfrom decouple import config\nfrom typing import List\n\n\nclass Settings(BaseSettings):\n    API_V1_STR: str = \"/api/v1\"\n    JWT_SECRET_KEY: str = config('JWT_SECRET_KEY', cast=str)\n    JWT_REFRESH_SECRET_KEY: str = config('JWT_REFRESH_SECRET_KEY', cast=str)\n    ALGORITHM = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 15\n    REFRESH_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 7\n    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = []\n    PROJECT_NAME: str = \"TODOLIST\"\n\n    # Database\n    MONGO_CONNECTION_STRING: str = config(\"MONGO_CONNECTION_STRING\", cast=str)\n\n    class Config:\n        case_sensitive = True", "\n\nsettings = Settings()\n"]}
{"filename": "backend/app/core/__init__.py", "chunked_list": ["from .config import settings\nfrom .security import create_access_token, create_refresh_token, get_password,verify_password\n\n__all__ = ['settings', 'create_refresh_token', 'create_access_token', 'get_password', 'verify_password']"]}
{"filename": "backend/app/api/__init__.py", "chunked_list": [""]}
{"filename": "backend/app/api/deps/__init__.py", "chunked_list": ["from .user_deps import get_current_user\n\n__all__ = ['get_current_user']"]}
{"filename": "backend/app/api/deps/user_deps.py", "chunked_list": ["from fastapi.security import OAuth2PasswordBearer\nfrom fastapi import Depends, HTTPException, status\nfrom ...core import settings\nfrom ...models import User\nfrom ...services import UserService\nfrom jose import jwt\nfrom datetime import datetime\nfrom pydantic import ValidationError\nfrom ...schemas import TokenPayload\n", "from ...schemas import TokenPayload\n\nreuseble_oauth = OAuth2PasswordBearer(\n    tokenUrl=f\"{settings.API_V1_STR}/auth/login\",\n    scheme_name=\"JWT\"\n)\n\n\nasync def get_current_user(token: str = Depends(reuseble_oauth)) -> User:\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.ALGORITHM])\n        token_data = TokenPayload(**payload)\n        if datetime.fromtimestamp(token_data.exp) < datetime.now():\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Token expired\",\n                                headers={\"WWW-Authenticate\": \"Bearer\"})\n    except(jwt.JWTError, ValidationError):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Could not validate credentials\",\n                            headers={\"WWW-Authenticate\": \"Bearer\"})", "async def get_current_user(token: str = Depends(reuseble_oauth)) -> User:\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.ALGORITHM])\n        token_data = TokenPayload(**payload)\n        if datetime.fromtimestamp(token_data.exp) < datetime.now():\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Token expired\",\n                                headers={\"WWW-Authenticate\": \"Bearer\"})\n    except(jwt.JWTError, ValidationError):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Could not validate credentials\",\n                            headers={\"WWW-Authenticate\": \"Bearer\"})", "\n    user = await UserService.get_user_by_id(token_data.sub)\n\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Could not find user\")\n\n    return user\n"]}
{"filename": "backend/app/api/auth/jwt.py", "chunked_list": ["from datetime import datetime\n\nfrom fastapi import APIRouter, Depends, HTTPException, status, Body\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom typing import Any\n\nfrom jose import jwt\nfrom pydantic import ValidationError\n\nfrom ..deps import get_current_user", "\nfrom ..deps import get_current_user\nfrom ...core import settings, create_access_token, create_refresh_token\nfrom ...models import User\n# from ...services.user_services import UserService\nfrom ...services import UserService\n# from ...core.security import create_refresh_token, create_access_token\nfrom ...schemas import TokenSchema, TokenPayload, UserOut\n\nauth_router = APIRouter()", "\nauth_router = APIRouter()\n\n\n@auth_router.post('/login', summary=\"Create access and refresh token\", response_model=TokenSchema)\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()) -> Any:\n    user = await UserService.authenticate(email=form_data.username, password=form_data.password)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"incorrect email or password\")\n", "\n    # create a access and refresh token\n    return {\n        \"access_token\": create_access_token(user.user_id),\n        \"refresh_token\": create_refresh_token(user.user_id)\n    }\n\n\n@auth_router.post('/test-token', summary=\"test if the access token is vaild\", response_model=UserOut)\nasync def tset_token(user: User = Depends(get_current_user)):", "@auth_router.post('/test-token', summary=\"test if the access token is vaild\", response_model=UserOut)\nasync def tset_token(user: User = Depends(get_current_user)):\n    return user\n\n\n@auth_router.post('/refresh', summary=\"refresh token\", response_model=TokenSchema)\nasync def refresh_token(refresh_token:str = Body(...)):\n    try:\n        payload = jwt.decode(refresh_token, settings.JWT_REFRESH_SECRET_KEY, algorithms=[settings.ALGORITHM])\n        token_data = TokenPayload(**payload)\n        if datetime.fromtimestamp(token_data.exp) < datetime.now():\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Token expired\",\n                                headers={\"WWW-Authenticate\": \"Bearer\"})\n    except(jwt.JWTError, ValidationError):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Could not validate credentials\",\n                            headers={\"WWW-Authenticate\": \"Bearer\"})", "\n    user = await UserService.get_user_by_id(token_data.sub)\n\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Could not find user\")\n\n    return {\n        \"access_token\":create_access_token(user.user_id),\n        \"refresh_token\": create_refresh_token(user.user_id)\n    }", "        \"refresh_token\": create_refresh_token(user.user_id)\n    }\n"]}
{"filename": "backend/app/api/auth/__init__.py", "chunked_list": ["from .jwt import auth_router\n\n__all__= ['auth_router']"]}
{"filename": "backend/app/api/api_v1/router.py", "chunked_list": ["from fastapi import APIRouter\nfrom .handlers import user_router, todo_router\nfrom ..auth import auth_router\n\nrouter = APIRouter()\n\nrouter.include_router(user_router, prefix='/users', tags=['users'])\nrouter.include_router(auth_router, prefix='/auth', tags=['auth'])\nrouter.include_router(todo_router, prefix='/todo', tags=['todo'])\n", "router.include_router(todo_router, prefix='/todo', tags=['todo'])\n\n"]}
{"filename": "backend/app/api/api_v1/__init__.py", "chunked_list": ["from .router import router\n\n__all__ =['router']"]}
{"filename": "backend/app/api/api_v1/handlers/__init__.py", "chunked_list": ["from .todo import todo_router\nfrom .user import user_router\n\n__all__ =['todo_router', 'user_router']"]}
{"filename": "backend/app/api/api_v1/handlers/user.py", "chunked_list": ["from fastapi import APIRouter, HTTPException, status\nfrom ....schemas import UserAuth, UserOut\nfrom ....services import UserService\nimport pymongo\n\nuser_router = APIRouter()\n\n\n@user_router.post('/create', summary=\"create new user\", response_model=UserOut)\nasync def create_user(data: UserAuth):\n    try:\n        return await UserService.create_user(data)\n    except pymongo.errors.DuplicateKeyError:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='user will this email or username already exits')", "@user_router.post('/create', summary=\"create new user\", response_model=UserOut)\nasync def create_user(data: UserAuth):\n    try:\n        return await UserService.create_user(data)\n    except pymongo.errors.DuplicateKeyError:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,\n                            detail='user will this email or username already exits')\n"]}
{"filename": "backend/app/api/api_v1/handlers/todo.py", "chunked_list": ["from uuid import UUID\nfrom typing import List\nfrom fastapi import APIRouter, Depends\nfrom ....schemas import TodoOut, TodoUpdate, TodoCreate\nfrom ....models import User, Todo\nfrom ...deps import get_current_user\n\nfrom ....services.todo_services import TodoService\n\ntodo_router = APIRouter()", "\ntodo_router = APIRouter()\n\n\n@todo_router.get('/', summary=\"Get all todos of user\", response_model=List[TodoOut])\nasync def list(current_user: User = Depends(get_current_user)):\n    return await TodoService.list_todos(current_user)\n\n\n@todo_router.post('/create', summary=\"create todo\", response_model=Todo)", "\n@todo_router.post('/create', summary=\"create todo\", response_model=Todo)\nasync def create_todo(data: TodoCreate, current_user: User = Depends(get_current_user)):\n    return await TodoService.create_todo(current_user, data)\n\n\n@todo_router.get('/{todo_id}', summary=\"get a todo by todo_id\", response_model=TodoOut)\nasync def retrieve(todo_id: UUID, current_user: User = Depends(get_current_user)):\n    return await TodoService.retrieve_todo(current_user, todo_id)\n", "    return await TodoService.retrieve_todo(current_user, todo_id)\n\n\n@todo_router.put('/{todo_id}', summary=\"Update todo by todo_id\", response_model=TodoOut)\nasync def update(todo_id: UUID, data: TodoUpdate, current_user: User = Depends(get_current_user)):\n    return await TodoService.update_todo(current_user, todo_id, data)\n\n\n@todo_router.delete('/{todo_id}', summary=\"delete todo by todo_id\")\nasync def delete(todo_id: UUID, current_user: User = Depends(get_current_user)):", "@todo_router.delete('/{todo_id}', summary=\"delete todo by todo_id\")\nasync def delete(todo_id: UUID, current_user: User = Depends(get_current_user)):\n    await TodoService.delete_todo(current_user, todo_id)\n    return None\n"]}
{"filename": "backend/app/services/__init__.py", "chunked_list": ["from .todo_services import TodoService\nfrom .user_services import UserService\n\n\n__all__ = ['TodoService', 'UserService']"]}
{"filename": "backend/app/services/user_services.py", "chunked_list": ["from typing import Optional\nfrom uuid import UUID\n\nfrom ..schemas import UserAuth\nfrom ..models import User\nfrom ..core import get_password, verify_password\n\n\nclass UserService:\n    @staticmethod\n    async def create_user(user: UserAuth):\n        user_in = User(\n            username=user.username,\n            email=user.email,\n            hashed_password=get_password(user.password)\n        )\n        await user_in.save()\n        return user_in\n\n    @staticmethod\n    async def authenticate(email: str, password: str) -> Optional[User]:\n        user = await UserService.get_user_by_email(email)\n        if not user:\n            return None\n        if not verify_password(password=password, hashed_password=user.hashed_password):\n            return None\n        return user\n\n    @staticmethod\n    async def get_user_by_email(email: str) -> Optional[User]:\n        user = await User.find_one(User.email == email)\n        return user\n\n    async def get_user_by_id(id: UUID) -> Optional[User]:\n        user = await User.find_one(User.user_id == id)\n        return user", "class UserService:\n    @staticmethod\n    async def create_user(user: UserAuth):\n        user_in = User(\n            username=user.username,\n            email=user.email,\n            hashed_password=get_password(user.password)\n        )\n        await user_in.save()\n        return user_in\n\n    @staticmethod\n    async def authenticate(email: str, password: str) -> Optional[User]:\n        user = await UserService.get_user_by_email(email)\n        if not user:\n            return None\n        if not verify_password(password=password, hashed_password=user.hashed_password):\n            return None\n        return user\n\n    @staticmethod\n    async def get_user_by_email(email: str) -> Optional[User]:\n        user = await User.find_one(User.email == email)\n        return user\n\n    async def get_user_by_id(id: UUID) -> Optional[User]:\n        user = await User.find_one(User.user_id == id)\n        return user", ""]}
{"filename": "backend/app/services/todo_services.py", "chunked_list": ["from uuid import UUID\n\nfrom ..models import Todo,User\n# from ..schemas.todo_schema import TodoCreate, TodoUpdate\nfrom ..schemas import TodoCreate,TodoUpdate\n\n\nclass TodoService:\n    @staticmethod\n    async def list_todos(user: User):\n        todos = await Todo.find(Todo.owner.id == user.id).to_list()\n        return todos\n\n    @staticmethod\n    async def create_todo(user: User, data: TodoCreate) -> Todo:\n        todo = Todo(**data.dict(), owner=user)\n        return await todo.insert()\n\n    @staticmethod\n    async def retrieve_todo(current_user: User, todo_id: UUID):\n        todo = await Todo.find_one(Todo.todo_id == todo_id, Todo.owner.id == current_user.id)\n        return todo\n\n    @staticmethod\n    async def update_todo(current_user: User, todo_id: UUID, data: TodoUpdate):\n        todo = await TodoService.retrieve_todo(current_user, todo_id)\n        await todo.update({\"$set\": data.dict(exclude_unset=True)})\n        await todo.save()\n        return todo\n\n    @staticmethod\n    async def delete_todo(current_user: User, todo_id: UUID):\n        todo = await TodoService.retrieve_todo(current_user, todo_id)\n        if todo:\n            await todo.delete()\n\n        return None", ""]}
