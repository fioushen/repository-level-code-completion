{"filename": "setup.py", "chunked_list": ["from setuptools import setup\n\nsetup(\n    name=\"flet-material\",\n    version=\"0.3.3\",\n    author=\"S. Ahmad P. Hakimi\",\n    author_email=\"pourhakimi@pm.me\",\n    description=\"Material UI Library for Flet\",\n    long_description=\"\",\n    long_description_content_type=\"text/markdown\",", "    long_description=\"\",\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/LineIndent/material_design_flet\",\n    packages=[\"flet_material\", \"styles\"],\n    install_requires=[\"click>=8.1.3\", \"flet>=0.8.1\"],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],", "        \"Operating System :: OS Independent\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"flet_material_init=flet_material.command.new_project:init_code\"\n        ],\n    },\n    keywords=[\"material design\", \"UI library\", \"Flet\"],\n)\n", ")\n"]}
{"filename": "flet_material/alert.py", "chunked_list": ["import flet as ft\nfrom styles import alert_dimension, alert_settings\nfrom flet_material.base import Theme\n\n\nclass Alerts(ft.Container, Theme):\n    def __init__(\n        self,\n        type_: str,\n        size: str,\n        title: str,\n        comment: str,\n        *args,\n        **kwargs,\n    ):\n        # get alert dimensions\n        width = alert_dimension.get(size).get(\"width\")\n        height = alert_dimension.get(size).get(\"height\")\n\n        # get alert properties\n        bgcolor = alert_settings.get(type_).get(\"bgcolor\")\n        icon = alert_settings.get(type_).get(\"icon\")\n\n        # props for inner row\n        self.box1: ft.Control = ft.Container(\n            width=5,\n            border_radius=20,\n            bgcolor=bgcolor,\n            margin=ft.margin.only(left=5, right=5, top=5, bottom=5),\n        )\n        self.box2: ft.Control = ft.Container(\n            expand=1,\n            alignment=ft.alignment.center,\n            content=ft.Icon(name=icon, size=30, color=bgcolor),\n        )\n        self.box3: ft.Control = ft.Container(\n            expand=5,\n            content=ft.Row(\n                alignment=\"start\",\n                controls=[\n                    ft.Column(\n                        spacing=2,\n                        alignment=\"center\",\n                        controls=[\n                            ft.Text(title, size=13, color=\"black\", weight=\"bold\"),\n                            ft.Text(\n                                comment,\n                                size=10,\n                                color=ft.colors.with_opacity(0.85, \"black\"),\n                            ),\n                        ],\n                    )\n                ],\n            ),\n        )\n        self.box4: ft.Control = ft.Container(\n            width=45,\n            alignment=ft.alignment.center,\n            ink=True,\n            content=ft.Text(\"\u00d7\", color=ft.colors.with_opacity(0.5, \"black\")),\n        )\n\n        #\n        kwargs.setdefault(\n            \"shadow\",\n            ft.BoxShadow(\n                spread_radius=8,\n                blur_radius=15,\n                color=ft.colors.with_opacity(0.25, \"black\"),\n                offset=ft.Offset(4, 0),\n            ),\n        )\n        kwargs.setdefault(\"width\", width)\n        kwargs.setdefault(\"height\", height)\n        kwargs.setdefault(\"bgcolor\", ft.colors.with_opacity(0.90, \"white\"))\n        kwargs.setdefault(\"border_radius\", 6)\n        kwargs.setdefault(\n            \"content\",\n            ft.Row(\n                spacing=0,\n                alignment=\"center\",\n                controls=[self.box1, self.box2, self.box3, self.box4],\n            ),\n        )\n\n        super().__init__(*args, **kwargs)", ""]}
{"filename": "flet_material/button.py", "chunked_list": ["import flet as ft\nfrom flet_material.base import Theme\n\n\nclass Buttons(ft.Container, Theme):\n    def __init__(self, width, height, title: str, *args, **kwargs):\n        #\n        self.title = title\n        #\n        self.text = ft.Text(\n            self.title,\n            weight=\"bold\",\n            color=ft.colors.with_opacity(0.85, Theme.primary_theme),\n        )\n        #\n        kwargs.setdefault(\"width\", width)\n        kwargs.setdefault(\"height\", height)\n        kwargs.setdefault(\"ink\", True)\n        kwargs.setdefault(\"bgcolor\", \"#2e2f3e\")\n        kwargs.setdefault(\"shape\", ft.BoxShape(\"rectangle\"))\n        kwargs.setdefault(\n            \"border\",\n            ft.border.all(2, ft.colors.with_opacity(0.85, Theme.primary_theme)),\n        )\n        kwargs.setdefault(\"border_radius\", 4)\n        kwargs.setdefault(\"on_hover\", lambda e: self.animate_button(e))\n        kwargs.setdefault(\"alignment\", ft.alignment.center)\n        kwargs.setdefault(\"animate\", ft.Animation(500, \"ease\"))\n        kwargs.setdefault(\"content\", self.text)\n\n        super().__init__(*args, **kwargs)\n\n    def animate_button(self, e):\n        if self.bgcolor == \"#2e2f3e\":\n            self.bgcolor = Theme.primary_theme\n            self.text.color = ft.colors.with_opacity(0.95, \"white\")\n        else:\n            self.bgcolor = \"#2e2f3e\"\n            self.text.color = ft.colors.with_opacity(0.85, Theme.primary_theme)\n\n        self.update()", ""]}
{"filename": "flet_material/annotation.py", "chunked_list": ["from flet_material.base import Theme\nimport flet as ft\n\n\nclass Annotations(ft.Container, Theme):\n    def __init__(\n        self,\n        annotations_msg: str,\n        *args,\n        **kwargs,\n    ):\n        self.annotations_msg = annotations_msg\n\n        self.annotation = ft.Tooltip(\n            padding=10,\n            vertical_offset=20,\n            message=self.annotations_msg,\n            bgcolor=\"#20222c\",\n            text_style=ft.TextStyle(color=\"white\"),\n            content=ft.Icon(\n                name=ft.icons.ADD,\n                size=15,\n                rotate=ft.Rotate(0, ft.alignment.center),\n                animate_rotation=ft.Animation(400, \"easeOutBack\"),\n            ),\n        )\n\n        kwargs.setdefault(\"width\", 21)\n        kwargs.setdefault(\"height\", 21)\n        kwargs.setdefault(\"bgcolor\", \"white24\")\n        kwargs.setdefault(\"shape\", ft.BoxShape(\"circle\"))\n        kwargs.setdefault(\"alignment\", ft.alignment.center)\n        kwargs.setdefault(\"content\", self.annotation)\n        kwargs.setdefault(\"animate\", 400)\n        kwargs.setdefault(\"on_hover\", lambda e: self.change_rotation(e))\n        super().__init__(*args, **kwargs)\n\n    def change_rotation(self, e):\n        if e.data == \"true\":\n            self.bgcolor = Theme.primary_theme\n            self.content.content.rotate = ft.Rotate(0.75, ft.alignment.center)\n\n        else:\n            self.bgcolor = \"white24\"\n            self.content.content.rotate = ft.Rotate(0, ft.alignment.center)\n\n        self.update()", ""]}
{"filename": "flet_material/base.py", "chunked_list": ["from styles.theme import flet_material_theme\n\n\nclass Theme:\n    primary_theme: str = None\n    accent_theme: str = None\n\n    bgcolor: str = \"#2e2f3e\"\n\n    @classmethod\n    def set_theme(cls, theme: str):\n        app_theme = flet_material_theme.get(theme)\n        cls.primary_theme = app_theme.get(\"primary\")\n        cls.accent_theme = app_theme.get(\"accent\")", ""]}
{"filename": "flet_material/checkbox.py", "chunked_list": ["import flet as ft\nfrom flet_material.base import Theme\nimport time\n\n\nclass CheckBox(ft.Container, Theme):\n    def __init__(self, shape: str, value: bool, disabled: bool, *args, **kwargs):\n        self.checkbox: ft.Control = ft.Checkbox(\n            fill_color=Theme.primary_theme,\n            check_color=\"white\",\n            scale=ft.Scale(0.95),\n            value=value,\n            disabled=disabled,\n            on_change=lambda e: self.animate_checkbox(e),\n        )\n\n        kwargs.setdefault(\"width\", 25)\n        kwargs.setdefault(\"height\", 25)\n        kwargs.setdefault(\"shape\", ft.BoxShape(shape))\n        kwargs.setdefault(\"bgcolor\", Theme.primary_theme)\n        kwargs.setdefault(\"content\", self.checkbox)\n        kwargs.setdefault(\"scale\", 0.8)\n        kwargs.setdefault(\"animate_scale\", ft.Animation(500, \"bounceOut\"))\n        kwargs.setdefault(\"on_click\", lambda e: self.animate_checkbox(e))\n\n        super().__init__(*args, **kwargs)\n\n    def animate_checkbox(self, e):\n        self.scale = ft.Scale(0.65)\n        self.update()\n        time.sleep(0.15)\n        self.scale = ft.Scale(0.8)\n        self.update()", ""]}
{"filename": "flet_material/switch.py", "chunked_list": ["import flet as ft\nfrom flet_material.base import Theme\n\n\nclass Switchs(ft.Container, Theme):\n    def __init__(self, animation: ft.Animation = \"easeInOutBack\", *args, **kwargs):\n        self.toggle = ft.Container(\n            bgcolor=\"white\",\n            shape=ft.BoxShape(\"circle\"),\n            offset=ft.transform.Offset(-0.25, 0),\n            animate_offset=ft.Animation(600, animation),\n            on_click=lambda e: self.toggle_switch(e),\n        )\n\n        kwargs.setdefault(\"width\", 54)\n        kwargs.setdefault(\"height\", 25)\n        kwargs.setdefault(\"border_radius\", 25)\n        kwargs.setdefault(\"bgcolor\", \"white10\")\n        kwargs.setdefault(\"padding\", 4)\n        kwargs.setdefault(\"clip_behavior\", ft.ClipBehavior.HARD_EDGE)\n        kwargs.setdefault(\"content\", self.toggle)\n        kwargs.setdefault(\"animate\", 400)\n        kwargs.setdefault(\"on_click\", lambda e: self.toggle_switch(e))\n\n        super().__init__(*args, **kwargs)\n\n    def toggle_switch(self, e):\n        if self.toggle.offset == ft.transform.Offset(-0.25, 0):\n            self.toggle.offset = ft.transform.Offset(0.25, 0)\n            self.bgcolor = Theme.primary_theme\n            self.update()\n        elif self.toggle.offset == ft.transform.Offset(0.25, 0):\n            self.toggle.offset = ft.transform.Offset(-0.25, 0)\n            self.bgcolor = \"white10\"\n            self.update()\n        else:\n            pass", ""]}
{"filename": "flet_material/__init__.py", "chunked_list": ["from flet_material.base import Theme\nfrom flet_material.admonition import Admonitions, FixedAdmonitions\nfrom flet_material.annotation import Annotations\nfrom flet_material.checkbox import CheckBox\nfrom flet_material.button import Buttons\nfrom flet_material.chip import FilterChip\nfrom flet_material.badge import NotificationBadge, IconBadge\nfrom flet_material.switch import Switchs\nfrom flet_material.alert import Alerts\nfrom flet_material.code_block import Code", "from flet_material.alert import Alerts\nfrom flet_material.code_block import Code\n"]}
{"filename": "flet_material/chip.py", "chunked_list": ["import flet as ft\nfrom flet_material.base import Theme\n\n\nclass FilterChip(ft.Container, Theme):\n    def __init__(\n        self,\n        title: str,\n        chip_width: int,\n        *args,\n        **kwargs,\n    ):\n        #\n        self.title = title\n        self.chip_width = chip_width\n\n        #\n        self.tick = ft.Control = ft.Checkbox(\n            width=2,\n            height=2,\n            scale=ft.Scale(0.7),\n            fill_color=\"#2e2f3e\",\n            check_color=\"white\",\n            disabled=True,\n            value=False,\n        )\n\n        kwargs.setdefault(\"width\", self.chip_width)\n        kwargs.setdefault(\"bgcolor\", \"#2e2f3e\")\n        kwargs.setdefault(\"border\", ft.border.all(1, Theme.primary_theme))\n        kwargs.setdefault(\"padding\", 8)\n        kwargs.setdefault(\"ink\", True)\n        kwargs.setdefault(\"border_radius\", 6)\n        kwargs.setdefault(\"alignment\", ft.alignment.center)\n        kwargs.setdefault(\"on_click\", lambda e: self.toggle_filter_chip(e))\n        kwargs.setdefault(\n            \"content\",\n            ft.Row(\n                spacing=0,\n                alignment=ft.MainAxisAlignment.SPACE_AROUND,\n                vertical_alignment=\"center\",\n                controls=[self.tick, ft.Text(self.title, size=11, weight=\"bold\")],\n            ),\n        )\n\n        super().__init__(*args, **kwargs)\n\n    def toggle_filter_chip(self, e):\n        if self.tick.value == False:\n            self.tick.value = True\n        else:\n            self.tick.value = False\n\n        self.tick.update()", ""]}
{"filename": "flet_material/code_block.py", "chunked_list": ["import flet as ft\nimport asyncio\n\n\nclass Code(ft.UserControl):\n    def __init__(self, title):\n        #\n        self.title = title\n\n        #\n        self._hovered: bool | None = None\n\n        self.copy_box = ft.Container(\n            width=28,\n            height=28,\n            border=ft.border.all(1, \"transparent\"),\n            right=1,\n            top=1,\n            border_radius=7,\n            scale=ft.Scale(1),\n            animate=ft.Animation(400, \"ease\"),\n            alignment=ft.alignment.center,\n            content=ft.Icon(\n                name=ft.icons.COPY,\n                size=14,\n                color=\"white12\",\n                opacity=0,\n                animate_opacity=ft.Animation(420, \"ease\"),\n            ),\n            on_click=lambda e: asyncio.run(self.get_copy_box_content(e)),\n        )\n\n        super().__init__()\n\n    async def get_copy_box_content(self, e):\n        self.title = self.title.replace(\"`\", \"\")\n        self.title = self.title.replace(\"python\", \"\")\n        e.page.set_clipboard(self.title)\n\n        while self._hovered:\n            self.copy_box.disabled = True\n            self.copy_box.update()\n\n            self.copy_box.content.opacity = 0\n            self.copy_box.content.name = ft.icons.CHECK\n            self.copy_box.update()\n\n            await asyncio.sleep(0.25)\n\n            self.copy_box.content.opacity = 1\n            self.copy_box.content.color = \"teal\"\n            self.copy_box.update()\n\n            await asyncio.sleep(1)\n\n            self.copy_box.content.opacity = 0\n            self.copy_box.content.name = ft.icons.COPY\n            self.copy_box.content.color = \"white12\"\n            self.copy_box.update()\n\n            self.copy_box.disabled = False\n            self.copy_box.update()\n\n            break\n\n        if self._hovered == True:\n            self.copy_box.content.opacity = 1\n\n        else:\n            self.copy_box.content.opacity = 0\n\n        self.copy_box.content.update()\n\n    def show_copy_box(self, e):\n        if e.data == \"true\":\n            self.copy_box.border = ft.border.all(0.95, \"white10\")\n            self.copy_box.content.opacity = 1\n            self._hovered = True\n\n        else:\n            self.copy_box.content.opacity = 0\n            self.copy_box.border = ft.border.all(0.95, \"transparent\")\n            self._hovered = False\n\n        self.copy_box.update()\n\n    def build(self):\n        return ft.Row(\n            alignment=\"start\",\n            vertical_alignment=\"center\",\n            controls=[\n                ft.Container(\n                    expand=True,\n                    padding=8,\n                    border_radius=7,\n                    bgcolor=\"#282b33\",\n                    on_hover=lambda e: self.show_copy_box(e),\n                    content=ft.Stack(\n                        controls=[\n                            ft.Markdown(\n                                value=self.title,\n                                selectable=True,\n                                extension_set=\"gitHubWeb\",\n                                code_theme=\"atom-one-dark-reasonable\",\n                                code_style=ft.TextStyle(size=12),\n                            ),\n                            self.copy_box,\n                        ],\n                    ),\n                )\n            ],\n        )", ""]}
{"filename": "flet_material/badge.py", "chunked_list": ["import flet as ft\nfrom flet_material.base import Theme\nfrom styles import badge_size_dimensions, badge_icon\nimport time\n\n\nclass NotificationBadge(ft.Stack, Theme):\n    def __init__(\n        self,\n        title: str,\n        size: str,\n        notification: int,\n        *args,\n        **kwargs,\n    ):\n        # set the start notification counter\n        self.notification = notification\n\n        # get the wdiget dimension\n        size = badge_size_dimensions.get(size, {})\n        width = size.get(\"width\", 55)\n        height = size.get(\"height\", 45)\n\n        #\n        self.notification_text = ft.Text(\n            value=notification, weight=\"bold\", size=9, text_align=\"center\"\n        )\n\n        self.notification_box: ft.Control = ft.Container(\n            width=22,\n            height=22,\n            shape=ft.BoxShape(\"circle\"),\n            top=0,\n            right=0,\n            bgcolor=\"red800\",\n            border_radius=4,\n            offset=ft.transform.Offset(0, -0.25),\n            animate_offset=ft.Animation(50, \"linear\"),\n            alignment=ft.alignment.center,\n            content=self.notification_text,\n        )\n\n        #\n        kwargs.setdefault(\"width\", width)\n        kwargs.setdefault(\"height\", height)\n        kwargs.setdefault(\n            \"controls\",\n            [\n                ft.Container(\n                    width=width * 0.9,\n                    height=height * 0.9,\n                    bgcolor=Theme.primary_theme,\n                    top=1,\n                    border_radius=6,\n                    alignment=ft.alignment.center,\n                    content=ft.Text(\n                        title,\n                        weight=\"bold\",\n                        size=12,\n                        text_align=\"center\",\n                        font_family=\"Roboto\",\n                    ),\n                ),\n                ft.Container(\n                    width=25,\n                    height=25,\n                    top=0,\n                    right=0,\n                    padding=10,\n                    shape=ft.BoxShape(\"circle\"),\n                    offset=ft.transform.Offset(0, -0.25),\n                    bgcolor=\"#2e2f3e\",\n                    alignment=ft.alignment.center,\n                ),\n                self.notification_box,\n            ],\n        )\n\n        super().__init__(*args, **kwargs)\n\n    def add_notification(self, current):\n        self.notification_text.value = current\n        self.notification_box.offset = ft.transform.Offset(0.05, -0.25)\n        self.notification_box.update()\n        time.sleep(0.05)\n        self.notification_box.offset = ft.transform.Offset(-0.05, -0.25)\n        self.notification_box.update()\n        time.sleep(0.05)\n        self.notification_box.offset = ft.transform.Offset(0, -0.25)\n        self.notification_box.update()", "\n\nclass IconBadge(ft.Stack, Theme):\n    def __init__(\n        self,\n        bagde_icon: str,\n        notification: int,\n        *args,\n        **kwargs,\n    ):\n        #\n        icon = badge_icon.get(bagde_icon)\n        self.notification = notification\n\n        #\n        self.notification_text = ft.Text(\n            value=notification, weight=\"bold\", size=9, text_align=\"center\"\n        )\n\n        self.notification_box: ft.Control = ft.Container(\n            width=22,\n            height=18,\n            top=0,\n            right=0,\n            bgcolor=\"red800\",\n            border_radius=4,\n            offset=ft.transform.Offset(-0.30, 0.35),\n            animate_offset=ft.Animation(50, \"linear\"),\n            shape=ft.BoxShape(\"rectangle\"),\n            alignment=ft.alignment.center,\n            content=self.notification_text,\n        )\n\n        #\n        kwargs.setdefault(\"width\", 64)\n        kwargs.setdefault(\"height\", 64)\n        kwargs.setdefault(\n            \"controls\",\n            [\n                self.notification_box,\n                ft.Container(\n                    width=64 * 0.9,\n                    height=64 * 0.9,\n                    bgcolor=\"transparent\",\n                    top=1,\n                    border_radius=6,\n                    alignment=ft.alignment.center,\n                    content=ft.Icon(name=icon, size=24),\n                ),\n            ],\n        )\n\n        super().__init__(*args, **kwargs)\n\n    def add_notification(self, current):\n        self.notification_text.value = current\n        self.notification_box.offset = ft.transform.Offset(-0.35, 0.35)\n        self.notification_box.update()\n        time.sleep(0.05)\n        self.notification_box.offset = ft.transform.Offset(-0.25, 0.35)\n        self.notification_box.update()\n        time.sleep(0.05)\n        self.notification_box.offset = ft.transform.Offset(-0.3, 0.35)\n        self.notification_box.update()", ""]}
{"filename": "flet_material/admonition.py", "chunked_list": ["import flet as ft\nfrom styles import admon_style, font_scheme\n\n\nclass Admonitions(ft.Container):\n    def __init__(\n        self,\n        type_: str,\n        expanded_height: int,\n        expand: bool,\n        components: list,\n        height=60,\n        padding=0,\n        border_radius=6,\n        animate=ft.Animation(300, \"decelerate\"),\n        clip_behavior=ft.ClipBehavior.HARD_EDGE,\n        shadow=ft.BoxShadow(\n            spread_radius=8,\n            blur_radius=15,\n            color=ft.colors.with_opacity(0.35, \"black\"),\n            offset=ft.Offset(4, 4),\n        ),\n    ):\n        self.type_ = type_\n        self.expanded_height = expanded_height\n        self.components = components\n        self.column = ft.Column(\n            controls=self.components,\n        )\n\n        # define admonition title properties\n        bgcolor = admon_style.get(self.type_, {}).get(\"bgcolor\", \"#20222c\")\n        border_color = admon_style.get(self.type_, {}).get(\"border_color\", \"white24\")\n        icon = admon_style.get(self.type_, {}).get(\"icon\", \"white24\")\n\n        self.container = ft.Container(\n            height=58,\n            bgcolor=ft.colors.with_opacity(0.95, bgcolor),\n            border_radius=6,\n            padding=10,\n            content=ft.Row(\n                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                controls=[\n                    ft.Row(\n                        vertical_alignment=\"center\",\n                        spacing=10,\n                        controls=[\n                            ft.Icon(\n                                name=icon,\n                                color=border_color,\n                                size=18,\n                            ),\n                            ft.Text(\n                                self.type_.capitalize(),\n                                size=12,\n                                weight=\"w700\",\n                            ),\n                        ],\n                    ),\n                    ft.IconButton(\n                        icon=ft.icons.ADD,\n                        icon_size=15,\n                        icon_color=border_color,\n                        rotate=ft.Rotate(0, ft.alignment.center),\n                        animate_rotation=ft.Animation(400, \"easeOutBack\"),\n                        on_click=lambda e: self.resize_admonition(e),\n                    ),\n                ],\n            ),\n        )\n\n        super().__init__(\n            expand=expand,\n            height=height,\n            padding=padding,\n            border_radius=border_radius,\n            animate=animate,\n            clip_behavior=clip_behavior,\n            border=ft.border.all(0.85, border_color),\n            shadow=shadow,\n            content=ft.Column(\n                alignment=\"start\",\n                spacing=0,\n                controls=[\n                    self.container,\n                    self.column,\n                ],\n            ),\n        )\n\n    # method: expand and retract admonition control + animation set\n    def resize_admonition(self, e):\n        if self.height != self.expanded_height:\n            self.height = self.expanded_height\n            self.container.border_radius = ft.border_radius.only(topLeft=6, topRight=6)\n            e.control.rotate = ft.Rotate(0.75, ft.alignment.center)\n        else:\n            self.height = 60\n            e.control.rotate = ft.Rotate(0, ft.alignment.center)\n            self.container.border_radius = 6\n\n        self.update()", "\n\nclass FixedAdmonitions(ft.Container):\n    def __init__(\n        self,\n        type_: str,\n        expanded: bool,\n        title: str,\n        *args,\n        **kwargs,\n    ):\n        self.title = title\n        # define admonition title properties\n        bgcolor = admon_style.get(type_, {}).get(\"bgcolor\", \"#20222c\")\n        border_color = admon_style.get(type_, {}).get(\"border_color\", \"white24\")\n        icon = admon_style.get(type_, {}).get(\"icon\", \"white24\")\n\n        fonts = font_scheme.get(\"admonitions_title\", {})\n        title_font = fonts.get(\"font_family\")\n        title_size = fonts.get(\"size\")\n\n        self.container = ft.Container(\n            height=58,\n            bgcolor=ft.colors.with_opacity(0.95, bgcolor),\n            border_radius=6,\n            padding=10,\n            content=ft.Row(\n                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,\n                controls=[\n                    ft.Row(\n                        vertical_alignment=\"center\",\n                        spacing=10,\n                        controls=[\n                            ft.Icon(\n                                name=icon,\n                                color=border_color,\n                                size=18,\n                            ),\n                            ft.Text(\n                                type_.capitalize(),\n                                size=title_size,\n                                font_family=title_font,\n                                weight=\"w700\",\n                            ),\n                            ft.Text(\n                                self.title,\n                                size=13,\n                                font_family=title_font,\n                                weight=\"w400\",\n                            ),\n                        ],\n                    ),\n                ],\n            ),\n        )\n\n        # define self instance properties\n        kwargs.setdefault(\n            \"shadow\",\n            ft.BoxShadow(\n                spread_radius=8,\n                blur_radius=15,\n                color=ft.colors.with_opacity(0.35, \"black\"),\n                offset=ft.Offset(4, 4),\n            ),\n        )\n        kwargs.setdefault(\"border\", ft.border.all(0.85, border_color))\n        kwargs.setdefault(\"clip_behavior\", ft.ClipBehavior.HARD_EDGE)\n        kwargs.setdefault(\"animate\", ft.Animation(300, \"decelerate\"))\n        kwargs.setdefault(\"expand\", expanded)\n        kwargs.setdefault(\"border_radius\", 6)\n        kwargs.setdefault(\"height\", 60)\n        kwargs.setdefault(\"padding\", 0)\n        kwargs.setdefault(\n            \"content\",\n            ft.Column(\n                alignment=\"start\",\n                spacing=0,\n                controls=[\n                    self.container,\n                ],\n            ),\n        )\n\n        super().__init__(*args, **kwargs)", ""]}
{"filename": "styles/theme.py", "chunked_list": ["\"\"\"\n\n\n\"\"\"\nflet_material_theme: dict = {\n    \"red\": {\n        \"primary\": \"#dd6058\",\n        \"accent\": \"#dc2626\",\n    },\n    \"pink\": {", "    },\n    \"pink\": {\n        \"primary\": \"#d63863\",\n        \"accent\": \"#9f1239\",\n    },\n    \"purple\": {\n        \"primary\": \"#a855f7\",\n        \"accent\": \"#7e22ce\",\n    },\n    \"indigo\": {", "    },\n    \"indigo\": {\n        \"primary\": \"#4f46e5\",\n        \"accent\": \"#3730a3\",\n    },\n    \"blue\": {\n        \"primary\": \"#3b82f6\",\n        \"accent\": \"#1d4ed8\",\n    },\n    \"light blue\": {", "    },\n    \"light blue\": {\n        \"primary\": \"#0ea5e9\",\n        \"accent\": \"#0369a1\",\n    },\n    \"cyan\": {\n        \"primary\": \"#06b6d4\",\n        \"accent\": \"#0e7490\",\n    },\n    \"teal\": {", "    },\n    \"teal\": {\n        \"primary\": \"#14b8a6\",\n        \"accent\": \"#0f766e\",\n    },\n    \"green\": {\n        \"primary\": \"#22c55e\",\n        \"accent\": \"#15803d\",\n    },\n    \"lime\": {", "    },\n    \"lime\": {\n        \"primary\": \"#84cc16\",\n        \"accent\": \"#4d7c0f\",\n    },\n    \"yellow\": {\n        \"primary\": \"#eab308\",\n        \"accent\": \"#a16207\",\n    },\n    \"amber\": {", "    },\n    \"amber\": {\n        \"primary\": \"#f59e0b\",\n        \"accent\": \"#b45309\",\n    },\n    \"orange\": {\n        \"primary\": \"#f97316\",\n        \"accent\": \"#c2410c\",\n    },\n    \"earth\": {", "    },\n    \"earth\": {\n        \"primary\": \"#78716c\",\n        \"accent\": \"#44403c\",\n    },\n    \"slate\": {\n        \"primary\": \"#64748b\",\n        \"accent\": \"#334155\",\n    },\n    \"black\": {", "    },\n    \"black\": {\n        \"primary\": \"#000000\",\n        \"accent\": \"#000000\",\n    },\n    \"white\": {\n        \"primary\": \"#ffffff\",\n        \"accent\": \"#ffffff\",\n    },\n}", "    },\n}\n"]}
{"filename": "styles/fonts.py", "chunked_list": ["font_scheme: dict = {\n    \"admonitions_title\": {\"font_family\": \"Roboto\", \"size\": \"12\"},\n}\n"]}
{"filename": "styles/__init__.py", "chunked_list": ["from styles.theme import flet_material_theme\nfrom styles.fonts import font_scheme\nfrom styles.admonition_style import admon_style\nfrom styles.badge_style import badge_size_dimensions, badge_icon\nfrom styles.alert_style import alert_dimension, alert_settings\n"]}
{"filename": "styles/badge_style.py", "chunked_list": ["badge_size_dimensions: dict = {\n    \"sm\": {\"width\": 55, \"height\": 45},\n    \"md\": {\"width\": 90, \"height\": 45},\n    \"lg\": {\"width\": 135, \"height\": 45},\n    \"xl\": {\"width\": 165, \"height\": 45},\n}\n\n\nbadge_icon: dict = {\n    \"email\": \"email_rounded\",", "badge_icon: dict = {\n    \"email\": \"email_rounded\",\n    \"facebook\": \"facebook_rounded\",\n    \"notification\": \"notifications_sharp\",\n    \"cart\": \"shopping_cart_sharp\",\n}\n"]}
{"filename": "styles/alert_style.py", "chunked_list": ["alert_dimension: dict = {\n    \"sm\": {\"width\": 250, \"height\": 75},\n    \"md\": {\"width\": 300, \"height\": 75},\n    \"lg\": {\"width\": 350, \"height\": 75},\n}\n\n\nalert_settings: dict = {\n    \"info\": {\"bgcolor\": \"blue800\", \"icon\": \"info_sharp\"},\n    \"warn\": {\"bgcolor\": \"yellow600\", \"icon\": \"priority_high_sharp\"},", "    \"info\": {\"bgcolor\": \"blue800\", \"icon\": \"info_sharp\"},\n    \"warn\": {\"bgcolor\": \"yellow600\", \"icon\": \"priority_high_sharp\"},\n    \"question\": {\"bgcolor\": \"green700\", \"icon\": \"question_mark_rounded\"},\n}\n"]}
{"filename": "styles/admonition_style.py", "chunked_list": ["admon_style: dict = {\n    \"note\": {\n        \"bgcolor\": \"#2f3851\",\n        \"border_color\": \"#448afe\",\n        \"icon\": \"event_note_rounded\",\n    },\n    \"abstract\": {\n        \"bgcolor\": \"#293c51\",\n        \"border_color\": \"#1eb0fe\",\n        \"icon\": \"insert_drive_file_rounded\",", "        \"border_color\": \"#1eb0fe\",\n        \"icon\": \"insert_drive_file_rounded\",\n    },\n    \"info\": {\n        \"bgcolor\": \"#293d4d\",\n        \"border_color\": \"#24b7d4\",\n        \"icon\": \"info_rounded\",\n    },\n    \"tip\": {\n        \"bgcolor\": \"#293f48\",", "    \"tip\": {\n        \"bgcolor\": \"#293f48\",\n        \"border_color\": \"#2abfa4\",\n        \"icon\": \"tips_and_updates_rounded\",\n    },\n    \"success\": {\n        \"bgcolor\": \"#293e40\",\n        \"border_color\": \"#2fc852\",\n        \"icon\": \"check_sharp\",\n    },", "        \"icon\": \"check_sharp\",\n    },\n    \"warning\": {\n        \"bgcolor\": \"#423a37\",\n        \"border_color\": \"#fb9100\",\n        \"icon\": \"warning_sharp\",\n    },\n    \"danger\": {\n        \"bgcolor\": \"#432d3f\",\n        \"border_color\": \"#fa1744\",", "        \"bgcolor\": \"#432d3f\",\n        \"border_color\": \"#fa1744\",\n        \"icon\": \"dangerous_sharp\",\n    },\n}\n"]}
{"filename": "tests/test_buttons.py", "chunked_list": ["import flet_material as fm\nimport unittest\n\n\nbutton = fm.Buttons(width=220, height=55, title=\"Give this repo a star!\")\n\n\nclass TestButtons(unittest.TestCase):\n    def test_parameter_types(self):\n        self.assertIsInstance(button.width, int)\n        self.assertIsInstance(button.height, int)\n        self.assertIsInstance(button.title, str)", "\n\nif __name__ == \"__main__\":\n    unittest.main()\n"]}
{"filename": "tests/test_switch.py", "chunked_list": ["import flet as ft\nimport flet_material as fm\nimport unittest\n\n\nswitch = fm.Switchs()\n\n\nclass TestButtons(unittest.TestCase):\n    def test_attributes(self):\n        self.assertEqual(switch.width, 54)\n        self.assertEqual(switch.height, 25)\n        self.assertEqual(switch.border_radius, 25)\n        self.assertEqual(switch.bgcolor, \"white10\")\n        self.assertEqual(switch.padding, 4)\n        self.assertEqual(switch.clip_behavior, ft.ClipBehavior.HARD_EDGE)\n\n    def test_parameter_types(self):\n        # Test if switch is an instance of the Switchs class:\n        self.assertIsInstance(switch, fm.Switchs)", "class TestButtons(unittest.TestCase):\n    def test_attributes(self):\n        self.assertEqual(switch.width, 54)\n        self.assertEqual(switch.height, 25)\n        self.assertEqual(switch.border_radius, 25)\n        self.assertEqual(switch.bgcolor, \"white10\")\n        self.assertEqual(switch.padding, 4)\n        self.assertEqual(switch.clip_behavior, ft.ClipBehavior.HARD_EDGE)\n\n    def test_parameter_types(self):\n        # Test if switch is an instance of the Switchs class:\n        self.assertIsInstance(switch, fm.Switchs)", "\n\nif __name__ == \"__main__\":\n    unittest.main()\n"]}
{"filename": "tests/test_admonitions.py", "chunked_list": ["import flet_material as fm\nimport unittest\n\n\ndropdown = fm.Admonitions(\n    type_=\"note\", expanded_height=300, expand=False, components=None\n)\n\n\nclass TestButtons(unittest.TestCase):\n    def test_parameter_types(self):\n        self.assertIsInstance(dropdown.type_, str)\n        self.assertIsInstance(dropdown.expanded_height, int)\n        self.assertIsInstance(dropdown.components, (list, type(None)))", "\nclass TestButtons(unittest.TestCase):\n    def test_parameter_types(self):\n        self.assertIsInstance(dropdown.type_, str)\n        self.assertIsInstance(dropdown.expanded_height, int)\n        self.assertIsInstance(dropdown.components, (list, type(None)))\n\n\nif __name__ == \"__main__\":\n    unittest.main()", "if __name__ == \"__main__\":\n    unittest.main()\n"]}
{"filename": "command/new_project.py", "chunked_list": ["import click\n\n\n@click.command()\n@click.argument(\"project_name\")\ndef init_code(project_name):\n    \"\"\"\n    Create a new Flet Material project with a main.py file.\n    \"\"\"\n    template_code = \"\"\"import flet as ft\nimport flet_material as fm\n\n# begin by changing your app theme color here ...\nfm.Theme.set_theme(theme=\"blue\")\n\ndef main(page:ft.Page):\n    page.bgcolor = fm.Theme.bgcolor\n    page.update()\n\nif __name__ == \"__main__\":\n    ft.flet.app(target=main)\n\"\"\"\n\n    with open(f\"{project_name}/main.py\", \"w\") as f:\n        f.write(template_code)\n\n    click.echo(f\"Created {project_name}/main.py\")", "\n\nif __name__ == \"__main__\":\n    init_code()\n"]}
{"filename": "command/__init__.py", "chunked_list": ["from command.new_project import init_code\n"]}
{"filename": "api/data/style.py", "chunked_list": ["style_sheet = {\n    \"admonitions\": [\n        {\n            \"name\": \"note\",\n            \"bgcolor\": \"#2f3851\",\n            \"border_color\": \"#448afe\",\n            \"icon\": \"event_note_rounded\",\n        },\n        {\n            \"name\": \"abstract\",", "        {\n            \"name\": \"abstract\",\n            \"bgcolor\": \"#293c51\",\n            \"border_color\": \"#1eb0fe\",\n            \"icon\": \"insert_drive_file_rounded\",\n        },\n        {\n            \"name\": \"info\",\n            \"bgcolor\": \"#293d4d\",\n            \"border_color\": \"#24b7d4\",", "            \"bgcolor\": \"#293d4d\",\n            \"border_color\": \"#24b7d4\",\n            \"icon\": \"info_rounded\",\n        },\n        {\n            \"name\": \"tip\",\n            \"bgcolor\": \"#293f48\",\n            \"border_color\": \"#2abfa4\",\n            \"icon\": \"tips_and_updates_rounded\",\n        },", "            \"icon\": \"tips_and_updates_rounded\",\n        },\n        {\n            \"name\": \"success\",\n            \"bgcolor\": \"#293e40\",\n            \"border_color\": \"#2fc852\",\n            \"icon\": \"check_sharp\",\n        },\n        {\n            \"name\": \"warning\",", "        {\n            \"name\": \"warning\",\n            \"bgcolor\": \"#423a37\",\n            \"border_color\": \"#fb9100\",\n            \"icon\": \"warning_sharp\",\n        },\n        {\n            \"name\": \"danger\",\n            \"bgcolor\": \"#432d3f\",\n            \"border_color\": \"#fa1744\",", "            \"bgcolor\": \"#432d3f\",\n            \"border_color\": \"#fa1744\",\n            \"icon\": \"dangerous_sharp\",\n        },\n    ],\n}\n"]}
{"filename": "api/api/index.py", "chunked_list": ["from flask import Flask, jsonify\nimport os\nimport sys\n\n\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nparent_dir = os.path.join(current_dir, \"..\")\nsys.path.append(parent_dir)\n\nfrom data.style import style_sheet", "\nfrom data.style import style_sheet\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef home():\n    return jsonify(style_sheet)\n", ""]}
