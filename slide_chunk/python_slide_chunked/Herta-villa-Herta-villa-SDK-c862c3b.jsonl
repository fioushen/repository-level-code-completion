{"filename": "hertavilla/exception.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import Any\n\ncall_api_exceptions: dict[int, type[_ExceptionWithRetcode]] = {}\n\n\nclass PubkeyNoneWarning(Warning):\n    ...\n", "\n\nclass SDKException(Exception):\n    ...\n\n\nclass HTTPStatusError(SDKException):\n    def __init__(\n        self,\n        /,\n        status: int,\n    ) -> None:\n        self.status = status\n\n    def __repr__(self) -> str:\n        return \"<HTTPStatusError status={self.status}\"", "\n\nclass _ExceptionWithRetcode(SDKException):\n    def __init__(self, /, retcode: int, message: str) -> None:\n        self.retcode = retcode\n        self.message = message\n\n    def to_dict(self):\n        return {\"retcode\": self.retcode, \"message\": self.message}\n", "\n\nclass CallingApiException(_ExceptionWithRetcode):\n    def __repr__(self) -> str:\n        return (\n            \"<CallingApiException \"\n            f\"retcode={self.retcode}, message={self.message!r}>\"\n        )\n\n    def __init_subclass__(cls, retcode: int) -> None:\n        call_api_exceptions[retcode] = cls\n        return super().__init_subclass__()\n\n    def __str__(self) -> str:\n        return repr(self)", "\n\nclass UnknownServerError(CallingApiException, retcode=-502):\n    ...\n\n\nclass InvalidRequest(CallingApiException, retcode=-1):\n    ...\n\n\nclass InsufficientPermission(CallingApiException, retcode=10318001):\n    ...", "\n\nclass InsufficientPermission(CallingApiException, retcode=10318001):\n    ...\n\n\nclass BotNotAdded(CallingApiException, retcode=10322002):\n    ...\n\n\nclass PermissionDenied(CallingApiException, retcode=10322003):\n    ...", "\n\nclass PermissionDenied(CallingApiException, retcode=10322003):\n    ...\n\n\nclass InvalidMemberBotAccessToken(CallingApiException, retcode=10322004):\n    ...\n\n\nclass InvalidBotAuthInfo(CallingApiException, retcode=10322005):\n    ...", "\n\nclass InvalidBotAuthInfo(CallingApiException, retcode=10322005):\n    ...\n\n\nclass UnsupportedMsgType(CallingApiException, retcode=10322006):\n    ...\n\n\ndef raise_exception(payload: dict[str, Any]):\n    if payload[\"retcode\"] != 0:\n        retcode = payload[\"retcode\"]\n        raise call_api_exceptions.get(retcode, CallingApiException)(\n            retcode,\n            payload[\"message\"],\n        )", "\n\ndef raise_exception(payload: dict[str, Any]):\n    if payload[\"retcode\"] != 0:\n        retcode = payload[\"retcode\"]\n        raise call_api_exceptions.get(retcode, CallingApiException)(\n            retcode,\n            payload[\"message\"],\n        )\n", ""]}
{"filename": "hertavilla/version.py", "chunked_list": ["from __future__ import annotations\n\n__version__ = \"0.8.3\"\n"]}
{"filename": "hertavilla/match.py", "chunked_list": ["from __future__ import annotations\n\nimport abc\nfrom contextvars import ContextVar\nfrom dataclasses import dataclass\nimport re\n\nfrom hertavilla.message.chain import MessageChain\n\ncurrent_match_result: ContextVar[MatchResult] = ContextVar(", "\ncurrent_match_result: ContextVar[MatchResult] = ContextVar(\n    \"currect_match_result\",\n)\n\n\nclass Match(abc.ABC):\n    @abc.abstractmethod\n    def check(self, chain: MessageChain) -> bool:\n        raise NotImplementedError", "\n\nclass Regex(Match):\n    def __init__(self, pattern: str | re.Pattern) -> None:\n        if isinstance(pattern, str):\n            pattern = re.compile(pattern)\n        self.pattern = pattern\n\n    def __repr__(self) -> str:\n        return f\"<Match:Regex pattern={self.pattern!r}>\"\n\n    def check(self, chain: MessageChain) -> bool:\n        match = re.match(self.pattern, chain.plaintext)\n        if match is not None:\n            current_match_result.set(RegexResult(match=self, re_match=match))\n            return True\n        return False", "\n\nclass Startswith(Match):\n    def __init__(self, prefix: str) -> None:\n        self.prefix = prefix\n\n    def check(self, chain: MessageChain) -> bool:\n        plain = chain.plaintext\n        if plain.startswith(self.prefix):\n            current_match_result.set(\n                StartswithResult(match=self, text=plain[len(self.prefix) :]),\n            )\n            return True\n        return False\n\n    def __repr__(self) -> str:\n        return f\"<Match:Startswith prefix={self.prefix!r}>\"", "\n\nclass Endswith(Match):\n    def __init__(self, suffix: str) -> None:\n        self.suffix = suffix\n\n    def check(self, chain: MessageChain) -> bool:\n        plain = chain.plaintext\n        if plain.endswith(self.suffix):\n            current_match_result.set(\n                EndswithResult(match=self, text=plain[: len(self.suffix)]),\n            )\n            return True\n        return False\n\n    def __repr__(self) -> str:\n        return f\"<Match:Endswith suffix={self.suffix!r}>\"", "\n\nclass Keywords(Regex):\n    def __init__(self, *keywords: str) -> None:\n        self.keywords = keywords\n        self.pattern = re.compile(\"|\".join(keywords))\n\n    def __repr__(self) -> str:\n        return f\"<Match:Keywords words={self.keywords!r}>\"\n\n    def check(self, chain: MessageChain) -> bool:\n        match = re.match(self.pattern, chain.plaintext)\n        if match is not None:\n            matches = re.findall(self.pattern, chain.plaintext)\n            current_match_result.set(\n                KeywordsResult(match=self, matched_keywords=set(matches)),\n            )\n            return True\n        return False", "\n\n@dataclass\nclass MatchResult:\n    match: Match\n\n\n@dataclass\nclass RegexResult(MatchResult):\n    match: Regex\n    re_match: re.Match\n\n    @property\n    def pattern(self) -> re.Pattern:\n        return self.match.pattern", "class RegexResult(MatchResult):\n    match: Regex\n    re_match: re.Match\n\n    @property\n    def pattern(self) -> re.Pattern:\n        return self.match.pattern\n\n\n@dataclass\nclass StartswithResult(MatchResult):\n    match: Startswith\n    text: str\n\n    @property\n    def prefix(self) -> str:\n        return self.match.prefix", "\n@dataclass\nclass StartswithResult(MatchResult):\n    match: Startswith\n    text: str\n\n    @property\n    def prefix(self) -> str:\n        return self.match.prefix\n", "\n\n@dataclass\nclass EndswithResult(MatchResult):\n    match: Endswith\n    text: str\n\n    @property\n    def suffix(self) -> str:\n        return self.match.suffix", "\n\n@dataclass\nclass KeywordsResult(MatchResult):\n    match: Keywords\n    matched_keywords: set[str]\n\n    @property\n    def keywords(self) -> tuple[str]:\n        return self.match.keywords", ""]}
{"filename": "hertavilla/model.py", "chunked_list": ["# ruff: noqa: A003\nfrom __future__ import annotations\n\nfrom enum import Enum\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass _BotMemberAccess(BaseModel):\n    uid: int\n    \"\"\"\u7528\u6237 id\"\"\"\n\n    villa_id: int\n    \"\"\"\u5927\u522b\u91ce id\"\"\"\n\n    member_access_token: str\n    \"\"\"\u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\"\"\"\n\n    bot_tpl_id: str\n    \"\"\"\u673a\u5668\u4eba\u6a21\u677f id\"\"\"", "\nclass _BotMemberAccess(BaseModel):\n    uid: int\n    \"\"\"\u7528\u6237 id\"\"\"\n\n    villa_id: int\n    \"\"\"\u5927\u522b\u91ce id\"\"\"\n\n    member_access_token: str\n    \"\"\"\u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\"\"\"\n\n    bot_tpl_id: str\n    \"\"\"\u673a\u5668\u4eba\u6a21\u677f id\"\"\"", "\n\nclass MemberRoleType(str, Enum):\n    ALL_MEMBER = \"MEMBER_ROLE_TYPE_ALL_MEMBER\"\n    \"\"\"\u6240\u6709\u4eba\u8eab\u4efd\u7ec4\"\"\"\n\n    ADMIN = \"MEMBER_ROLE_TYPE_ADMIN\"\n    \"\"\"\u7ba1\u7406\u5458\u8eab\u4efd\u7ec4\"\"\"\n\n    OWNER = \"MEMBER_ROLE_TYPE_OWNER\"\n    \"\"\"\u5927\u522b\u91ce\u623f\u4e3b\u8eab\u4efd\u7ec4\"\"\"\n\n    CUSTOM = \"MEMBER_ROLE_TYPE_CUSTOM\"\n    \"\"\"\u5176\u4ed6\u81ea\u5b9a\u4e49\u8eab\u4efd\u7ec4\"\"\"\n\n    UNKNOWN = \"MEMBER_ROLE_TYPE_UNKNOWN\"\n    \"\"\"\u672a\u77e5\"\"\"", "\n\nclass RolePermissionDetail(BaseModel):\n    key: str\n    \"\"\"\u6743\u9650 key \u5b57\u7b26\u4e32\"\"\"\n\n    name: str\n    \"\"\"\u6743\u9650\u540d\u79f0\"\"\"\n\n    describe: str\n    \"\"\"\u6743\u9650\u63cf\u8ff0\"\"\"", "\n\nclass Role(BaseModel):\n    id: str\n    \"\"\"\u8eab\u4efd\u7ec4 id\"\"\"\n\n    name: str\n    \"\"\"\u8eab\u4efd\u7ec4\u540d\u79f0\"\"\"\n\n    color: str\n    \"\"\"\u989c\u8272\"\"\"\n\n    villa_id: str\n    \"\"\"\u6240\u5c5e\u5927\u522b\u91ce id\"\"\"\n\n    role_type: MemberRoleType\n    \"\"\"\u8eab\u4efd\u7ec4\u7c7b\u578b\"\"\"\n\n    member_num: str\n    \"\"\"\u8eab\u4efd\u7ec4\u4e0b\u6210\u5458\u6570\u91cf\"\"\"\n\n    permissions: Optional[List[RolePermissionDetail]] = None\n    \"\"\"\u8eab\u4efd\u7ec4\u62e5\u6709\u7684\u6743\u9650\u5217\u8868\"\"\"\n\n    web_color: str\n    \"\"\"\u5728\u7f51\u9875\u7aef\u663e\u793a\u7684\u989c\u8272\"\"\"\n    font_color: str\n    \"\"\"\u5b57\u4f53\u989c\u8272\uff08\u672a\u77e5\uff09\"\"\"\n    bg_color: str\n    \"\"\"\u80cc\u666f\u989c\u8272\uff08\u672a\u77e5\uff09\"\"\"\n    is_all_room: bool\n    \"\"\"\u662f\u5426\u53ef\u4ee5\u7ba1\u7406\u6240\u6709\u53ef\u89c1\u623f\u95f4\"\"\"\n    room_ids: List[int]\n    \"\"\"\u53ef\u7ba1\u7406\u623f\u95f4 id\"\"\"\n    color_scheme_id: int", "\n\nclass MemberBasic(BaseModel):\n    uid: int\n    \"\"\"\u7528\u6237 uid\"\"\"\n\n    nickname: str\n    \"\"\"\u6635\u79f0\"\"\"\n\n    introduce: str\n    \"\"\"\u4e2a\u6027\u7b7e\u540d\"\"\"\n\n    avatar: str\n    \"\"\"\u5934\u50cf\"\"\"\n    avatar_url: str\n    \"\"\"\"\"\"", "\n\nclass Member(BaseModel):\n    basic: MemberBasic\n    \"\"\"\u7528\u6237\u57fa\u672c\u4fe1\u606f\"\"\"\n\n    role_id_list: List[int]\n    \"\"\"\u7528\u6237\u52a0\u5165\u7684\u8eab\u4efd\u7ec4 id \u5217\u8868\"\"\"\n\n    joined_at: str\n    \"\"\"\u7528\u6237\u52a0\u5165\u65f6\u95f4 (ISO8601 timestamp)\"\"\"\n    role_list: List[Role]", "\n\nclass BotMemberAccessInfo(BaseModel):\n    access_info: _BotMemberAccess\n    \"\"\"token \u89e3\u6790\u7684\u7528\u6237\u4fe1\u606f\"\"\"\n    member: Member\n    \"\"\"\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\"\"\"\n\n\nclass Villa(BaseModel):\n    villa_id: int\n    \"\"\"\u5927\u522b\u91ce id\"\"\"\n\n    name: str\n    \"\"\"\u540d\u79f0\"\"\"\n\n    villa_avatar_url: str\n    \"\"\"\u522b\u91ce\u5934\u50cf\u94fe\u63a5\"\"\"\n\n    owner_uid: int\n    \"\"\"\u522b\u91ce\u4e3b\u4eba id\"\"\"\n\n    is_official: bool\n    \"\"\"\u662f\u5426\u662f\u5b98\u65b9\u522b\u91ce\"\"\"\n\n    introduce: str\n    \"\"\"\u4ecb\u7ecd\"\"\"\n\n    category_id: int\n    \"\"\"\"\"\"\n\n    tags: List[str]\n    \"\"\"\u6807\u7b7e\"\"\"", "\nclass Villa(BaseModel):\n    villa_id: int\n    \"\"\"\u5927\u522b\u91ce id\"\"\"\n\n    name: str\n    \"\"\"\u540d\u79f0\"\"\"\n\n    villa_avatar_url: str\n    \"\"\"\u522b\u91ce\u5934\u50cf\u94fe\u63a5\"\"\"\n\n    owner_uid: int\n    \"\"\"\u522b\u91ce\u4e3b\u4eba id\"\"\"\n\n    is_official: bool\n    \"\"\"\u662f\u5426\u662f\u5b98\u65b9\u522b\u91ce\"\"\"\n\n    introduce: str\n    \"\"\"\u4ecb\u7ecd\"\"\"\n\n    category_id: int\n    \"\"\"\"\"\"\n\n    tags: List[str]\n    \"\"\"\u6807\u7b7e\"\"\"", "\n\nclass RoomType(str, Enum):\n    CHAT_ROOM = \"BOT_PLATFORM_ROOM_TYPE_CHAT_ROOM\"\n    \"\"\"\u804a\u5929\u623f\u95f4\"\"\"\n    POST_ROOM = \"BOT_PLATFORM_ROOM_TYPE_POST_ROOM\"\n    \"\"\"\u5e16\u5b50\u623f\u95f4\"\"\"\n    SCENE_ROOM = \"BOT_PLATFORM_ROOM_TYPE_SCENE_ROOM\"\n    \"\"\"\u573a\u666f\u623f\u95f4\"\"\"\n    INVALID = \"BOT_PLATFORM_ROOM_TYPE_INVALID\"\n    \"\"\"\u65e0\u6548\"\"\"\n    LIVE_ROOM = \"BOT_PLATFORM_ROOM_TYPE_LIVE_ROOM\"\n    \"\"\"\u76f4\u64ad\u623f\u95f4\"\"\"", "\n\nclass SendMsgAuthRange(BaseModel):\n    is_all_send_msg: bool\n    \"\"\"\u662f\u5426\u5168\u5c40\u53ef\u53d1\u9001\"\"\"\n\n    roles: List[int]\n    \"\"\"\u53ef\u53d1\u6d88\u606f\u7684\u8eab\u4efd\u7ec4 id\"\"\"\n\n\nclass Group(BaseModel):\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"\n\n    group_name: str\n    \"\"\"\u5206\u7ec4\u540d\u79f0\"\"\"", "\n\nclass Group(BaseModel):\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"\n\n    group_name: str\n    \"\"\"\u5206\u7ec4\u540d\u79f0\"\"\"\n\n\nclass Room(BaseModel):\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n\n    room_name: str\n    \"\"\"\u623f\u95f4\u540d\u79f0\"\"\"\n\n    room_type: RoomType\n    \"\"\"\u623f\u95f4\u7c7b\u578b\"\"\"\n\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"\n\n    room_default_notify_type: str\n    \"\"\"\u623f\u95f4\u9ed8\u8ba4\u901a\u77e5\u7c7b\u578b\"\"\"\n\n    send_msg_auth_range: SendMsgAuthRange\n    \"\"\"\u623f\u95f4\u6d88\u606f\u53d1\u9001\u6743\u9650\u8303\u56f4\u8bbe\u7f6e\"\"\"", "\n\nclass Room(BaseModel):\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n\n    room_name: str\n    \"\"\"\u623f\u95f4\u540d\u79f0\"\"\"\n\n    room_type: RoomType\n    \"\"\"\u623f\u95f4\u7c7b\u578b\"\"\"\n\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"\n\n    room_default_notify_type: str\n    \"\"\"\u623f\u95f4\u9ed8\u8ba4\u901a\u77e5\u7c7b\u578b\"\"\"\n\n    send_msg_auth_range: SendMsgAuthRange\n    \"\"\"\u623f\u95f4\u6d88\u606f\u53d1\u9001\u6743\u9650\u8303\u56f4\u8bbe\u7f6e\"\"\"", "\n\nclass ListRoom(BaseModel):\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n\n    room_name: str\n    \"\"\"\u623f\u95f4\u540d\u79f0\"\"\"\n\n    room_type: RoomType\n    \"\"\"\u623f\u95f4\u7c7b\u578b\"\"\"\n\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"", "\n\nclass GroupRoom(BaseModel):\n    group_id: int\n    \"\"\"\u5206\u7ec4 id\"\"\"\n\n    group_name: str\n    \"\"\"\u5206\u7ec4\u540d\u79f0\"\"\"\n\n    room_list: List[ListRoom]\n    \"\"\"\u623f\u95f4\u4fe1\u606f\"\"\"", "\n\nclass RoleColor(str, Enum):\n    BLUE = \"#6173AB\"\n    PINK = \"#F485D8\"\n    RED = \"#F47884\"\n    ORANGE = \"#FFA54B\"\n    GREEN = \"#7BC26F\"\n    SKY_BLUE = \"#59A1EA\"\n    PURPLE = \"#977EE1\"\n    # \u6b64\u989c\u8272\u4e3a\u6240\u6709\u4eba\u8eab\u4efd\u7ec4\u989c\u8272\uff0c\u65e0\u6cd5\u4f5c\u4e3a\u521b\u5efa\u548c\u7f16\u8f91\u8eab\u4efd\u7ec4\u7684\u989c\u8272\n    LIGHT_BLUE = \"#8F9BBF\"", "\n\nclass RolePermission(str, Enum):\n    MENTION_ALL = \"mention_all\"\n    \"\"\"@\u5168\u4f53\u5168\u5458 - \u5141\u8bb8\u6210\u5458\u80fd\u591f @\u5168\u4f53\u6210\u5458\"\"\"\n\n    RECALL_MESSAGE = \"recall_message\"\n    \"\"\"\u64a4\u56de\u6d88\u606f - \u5141\u8bb8\u6210\u5458\u80fd\u591f\u5728\u804a\u5929\u623f\u95f4\u4e2d\u64a4\u56de\u4efb\u4f55\u4eba\u7684\u6d88\u606f\"\"\"\n\n    PIN_MESSAGE = \"pin_message\"\n    \"\"\"\u7f6e\u9876\u6d88\u606f - \u5141\u8bb8\u6210\u5458\u80fd\u591f\u5728\u804a\u5929\u623f\u95f4\u4e2d\u7f6e\u9876\u6d88\u606f\"\"\"\n\n    MANAGE_MEMBER_ROLE = \"manage_member_role\"\n    \"\"\"\u8eab\u4efd\u7ec4\u7ba1\u7406 - \u5141\u8bb8\u6210\u5458\u6dfb\u52a0\u3001\u5220\u9664\u8eab\u4efd\u7ec4\uff0c\u7ba1\u7406\u8eab\u4efd\u7ec4\u6210\u5458\uff0c\u4fee\u6539\u8eab\u4efd\u7ec4\u7684\u6743\u9650\"\"\"  # noqa: E501\n\n    EDIT_VILLA_INFO = \"edit_villa_info\"\n    \"\"\"\u7f16\u8f91\u5927\u522b\u91ce\u8be6\u60c5 - \u5141\u8bb8\u6210\u5458\u7f16\u8f91\u5927\u522b\u91ce\u7684\u7b80\u4ecb\u3001\u6807\u7b7e\u3001\u8bbe\u7f6e\u5927\u522b\u91ce\u52a0\u5165\u6761\u4ef6\u7b49\"\"\"\n\n    MANAGE_GROUP_AND_ROOM = \"manage_group_and_room\"\n    \"\"\"\u623f\u95f4\u53ca\u5206\u7ec4\u7ba1\u7406 - \u5141\u8bb8\u6210\u5458\u65b0\u5efa\u623f\u95f4\uff0c\u65b0\u5efa/\u5220\u9664\u623f\u95f4\u5206\u7ec4\uff0c\u8c03\u6574\u623f\u95f4\u53ca\u623f\u95f4\u5206\u7ec4\u7684\u6392\u5e8f\"\"\"  # noqa: E501\n\n    VILLA_SILENCE = \"villa_silence\"\n    \"\"\"\u7981\u8a00 - \u5141\u8bb8\u6210\u5458\u80fd\u591f\u5728\u623f\u95f4\u91cc\u7981\u8a00\u5176\u4ed6\u4eba\"\"\"\n\n    BLACK_OUT = \"black_out\"\n    \"\"\"\u62c9\u9ed1 - \u5141\u8bb8\u6210\u5458\u80fd\u591f\u62c9\u9ed1\u548c\u5c06\u5176\u4ed6\u4eba\u79fb\u51fa\u5927\u522b\u91ce\"\"\"\n\n    HANDLE_APPLY = \"handle_apply\"\n    \"\"\"\u52a0\u5165\u5ba1\u6838 - \u5141\u8bb8\u6210\u5458\u5ba1\u6838\u5927\u522b\u91ce\u7684\u52a0\u5165\u7533\u8bf7\"\"\"\n\n    MANAGE_CHAT_ROOM = \"manage_chat_room\"\n    \"\"\"\u804a\u5929\u623f\u95f4\u7ba1\u7406 - \u5141\u8bb8\u6210\u5458\u7f16\u8f91\u623f\u95f4\u4fe1\u606f\u53ca\u8bbe\u7f6e\u53ef\u89c1\u3001\u53d1\u8a00\u6743\u9650\"\"\"\n\n    VIEW_DATA_BOARD = \"view_data_board\"\n    \"\"\"\u67e5\u770b\u5927\u522b\u91ce\u6570\u636e - \u5141\u8bb8\u6210\u5458\u67e5\u770b\u5927\u522b\u91ce\u6570\u636e\u770b\u677f\"\"\"\n\n    MANAGE_CUSTOM_EVENT = \"manage_custom_event\"\n    \"\"\"\u7ec4\u7ec7\u6d3b\u52a8 - \u5141\u8bb8\u6210\u5458\u521b\u5efa\u6d3b\u52a8\uff0c\u7f16\u8f91\u6d3b\u52a8\u4fe1\u606f\"\"\"\n\n    LIVE_ROOM_ORDER = \"live_room_order\"\n    \"\"\"\u70b9\u64ad\u623f\u95f4\u8282\u76ee - \u5141\u8bb8\u6210\u5458\u5728\u76f4\u64ad\u623f\u95f4\u4e2d\u70b9\u64ad\u8282\u76ee\u53ca\u63a7\u5236\u8282\u76ee\u64ad\u653e\"\"\"\n\n    MANAGE_SPOTLIGHT_COLLECTION = \"manage_spotlight_collection\"\n    \"\"\"\u8bbe\u7f6e\u7cbe\u9009\u6d88\u606f - \u5141\u8bb8\u6210\u5458\u8bbe\u7f6e\u3001\u79fb\u9664\u7cbe\u9009\u6d88\u606f\"\"\"", "\n\nclass Emoticon(BaseModel):\n    emoticon_id: int\n    \"\"\"\u8868\u60c5 id\"\"\"\n\n    describe_text: str\n    \"\"\"\u63cf\u8ff0\u6587\u672c\"\"\"\n\n    icon: str\n    \"\"\"\u8868\u60c5\u56fe\u7247\u94fe\u63a5\"\"\"", "\n\nclass AuditContentType(str, Enum):\n    TEXT = \"AuditContentTypeText\"\n    IMAGE = \"AuditContentTypeImage\"\n"]}
{"filename": "hertavilla/bot.py", "chunked_list": ["from __future__ import annotations\n\nimport asyncio\nimport base64\nfrom dataclasses import dataclass\nimport logging\nimport re\nfrom typing import (\n    TYPE_CHECKING,\n    Any,", "    TYPE_CHECKING,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Generic,\n    TypeVar,\n)\nimport urllib.parse\n", "import urllib.parse\n\nfrom hertavilla.apis.audit import AuditAPIMixin\nfrom hertavilla.apis.auth import AuthAPIMixin\nfrom hertavilla.apis.img import ImgAPIMixin\nfrom hertavilla.apis.member import MemberAPIMixin\nfrom hertavilla.apis.message import MessageAPIMixin\nfrom hertavilla.apis.role import RoleAPIMixin\nfrom hertavilla.apis.room import RoomAPIMixin\nfrom hertavilla.apis.villa import VillaAPIMixin", "from hertavilla.apis.room import RoomAPIMixin\nfrom hertavilla.apis.villa import VillaAPIMixin\nfrom hertavilla.match import (\n    Endswith,\n    EndswithResult,\n    Keywords,\n    KeywordsResult,\n    Match,\n    MatchResult,\n    Regex,", "    MatchResult,\n    Regex,\n    RegexResult,\n    Startswith,\n    StartswithResult,\n    current_match_result,\n)\n\nimport rsa\n\nif TYPE_CHECKING:\n    from hertavilla.event import Command, Event, SendMessageEvent, Template\n    from hertavilla.message import MessageChain", "import rsa\n\nif TYPE_CHECKING:\n    from hertavilla.event import Command, Event, SendMessageEvent, Template\n    from hertavilla.message import MessageChain\n\n\nTE = TypeVar(\"TE\", bound=\"Event\")\nTR = TypeVar(\"TR\", bound=\"MatchResult\")\n", "TR = TypeVar(\"TR\", bound=\"MatchResult\")\n\n\nlogger = logging.getLogger(\"hertavilla.bot\")\n\n\n@dataclass\nclass Handler(Generic[TE]):\n    event: type[TE]\n    func: Callable[[TE, VillaBot], Coroutine[Any, Any, None]]\n    temp: bool = False\n\n    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        return self.func(*args, **kwargs)\n\n    def __eq__(self, __value: Event) -> bool:\n        return isinstance(__value, self.event)", "\n\n@dataclass\nclass MessageHandler(Generic[TR]):\n    match: Match\n    func: Callable[[\"SendMessageEvent\", \"VillaBot\", TR], Awaitable[Any]]\n    temp: bool = False\n\n    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        return self.func(*args, **kwargs)\n\n    def check(self, chain: MessageChain) -> bool:\n        return self.match.check(chain)", "\n\nRegexHandlerFunc = Callable[\n    [\"SendMessageEvent\", \"VillaBot\", RegexResult],\n    Awaitable[Any],\n]\n\nStartswithHandlerFunc = Callable[\n    [\"SendMessageEvent\", \"VillaBot\", StartswithResult],\n    Awaitable[Any],", "    [\"SendMessageEvent\", \"VillaBot\", StartswithResult],\n    Awaitable[Any],\n]\n\nEndswithHandlerFunc = Callable[\n    [\"SendMessageEvent\", \"VillaBot\", EndswithResult],\n    Awaitable[Any],\n]\n\nKeywordsHandlerFunc = Callable[", "\nKeywordsHandlerFunc = Callable[\n    [\"SendMessageEvent\", \"VillaBot\", KeywordsResult],\n    Awaitable[Any],\n]\n\n\nclass VillaBot(\n    AuthAPIMixin,\n    MemberAPIMixin,\n    MessageAPIMixin,\n    RoomAPIMixin,\n    VillaAPIMixin,\n    RoleAPIMixin,\n    ImgAPIMixin,\n    AuditAPIMixin,\n):\n    def __init__(\n        self,\n        bot_id: str,\n        secret: str,\n        callback_endpoint: str,\n        pub_key: str,\n        bot_info: \"Template\" | None = None,\n    ) -> None:\n        from hertavilla.event import SendMessageEvent\n\n        super().__init__(bot_id, secret, pub_key)\n        self.rsa_pub_key = rsa.PublicKey.load_pkcs1_openssl_pem(\n            pub_key.encode(),\n        )\n        self._bot_info = bot_info\n        self.callback_endpoint = callback_endpoint\n        self.handlers: list[Handler] = []\n        self.message_handlers: list[MessageHandler] = []\n        self.register_handler(SendMessageEvent, self.message_handler)\n\n    @property\n    def bot_info(self) -> \"Template\":\n        assert (\n            self._bot_info is not None\n        ), f\"No bot info, maybe bot {self.bot_id} not connected\"\n        return self._bot_info\n\n    @bot_info.setter\n    def bot_info(self, value: \"Template\") -> None:\n        self._bot_info = value\n\n    @property\n    def name(self) -> str:\n        \"\"\"Bot \u6635\u79f0\"\"\"\n        return self.bot_info.name\n\n    @property\n    def avatar(self) -> str:\n        \"\"\"Bot \u5934\u50cf\u5730\u5740\"\"\"\n        return self.bot_info.icon\n\n    @property\n    def commands(self) -> list[\"Command\"]:\n        \"\"\"Bot \u9884\u8bbe\u547d\u4ee4\u5217\u8868\"\"\"\n        return self.bot_info.commands\n\n    @property\n    def description(self) -> str | None:\n        \"\"\"Bot \u4ecb\u7ecd\"\"\"\n        return self.bot_info.desc\n\n    def __repr__(self) -> str:\n        return f\"<VillaBot id={self.bot_id!r}>\"\n\n    def __eq__(self, __value: str | VillaBot) -> bool:\n        if isinstance(__value, VillaBot):\n            return (\n                self.bot_id == __value.bot_id and self.secret == __value.secret\n            )\n        return self.bot_id == __value\n\n    def __hash__(self) -> int:\n        return hash(self.bot_id)\n\n    def verify(\n        self,\n        sign: str,\n        body: str,\n    ) -> bool:\n        sign_ = base64.b64decode(sign)\n        sign_msg = urllib.parse.urlencode(\n            {\"body\": body, \"secret\": self.secret},\n        ).encode()\n        try:\n            rsa.verify(sign_msg, sign_, self.rsa_pub_key)\n        except rsa.VerificationError:\n            return False\n        else:\n            return True\n\n    async def send(\n        self,\n        villa_id: int,\n        room_id: int,\n        chain: \"MessageChain\",\n    ) -> str:\n        \"\"\"\u901a\u7528\u53d1\u9001\u6d88\u606f\u65b9\u6cd5\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n            chain (MessageChain): \u6d88\u606f\u94fe\n\n        Returns:\n            str: bot_msg_id \u673a\u5668\u4eba\u6240\u53d1\u9001\u6d88\u606f\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n        \"\"\"\n        return await self.send_message(\n            villa_id,\n            room_id,\n            *(await chain.to_content_json(self)),\n        )\n\n    # event handle\n\n    def register_handler(\n        self,\n        event: type[TE],\n        func: Callable[[TE, VillaBot], Coroutine[Any, Any, None]],\n        temp: bool = False,\n    ):\n        self.handlers.append(Handler[TE](event, func, temp))\n        logger.info(\n            f\"Registered the handler {func} \"\n            f\"for {event.__name__} (temp: {temp})\",\n        )\n        return func\n\n    def listen(\n        self,\n        event: type[TE],\n        temp: bool = False,\n    ) -> Callable[\n        [Callable[[TE, VillaBot], Coroutine[Any, Any, None]]],\n        Callable[[TE, VillaBot], Coroutine[Any, Any, None]],\n    ]:\n        def wrapper(\n            func: Callable[[TE, VillaBot], Coroutine[Any, Any, None]],\n        ) -> Callable[[TE, VillaBot], Coroutine[Any, Any, None]]:\n            self.register_handler(event, func, temp)\n            return func\n\n        return wrapper\n\n    async def handle_event(self, event: Event) -> None:\n        handlers = list(filter(lambda x: x == event, self.handlers))\n        logger.info(f\"Handling event {event.__class__.__name__}\")\n        need_remove_handlers = filter(lambda x: x.temp, handlers)\n        try:\n            await asyncio.gather(\n                *[handler(event, self) for handler in handlers],\n            )\n        except Exception:\n            logger.exception(\"Raised exceptions while handling event.\")\n        for handler in need_remove_handlers:\n            self.handlers.remove(handler)\n            logger.debug(f\"Removed handler for {event.__class__.__name__}\")\n\n    # message handle\n    @staticmethod\n    async def message_handler(event: \"SendMessageEvent\", bot: \"VillaBot\"):\n        await asyncio.gather(\n            *[\n                bot._run_message_handler(event, bot, handler)  # noqa: SLF001\n                for handler in bot.message_handlers\n            ],\n        )\n\n    @staticmethod\n    async def _run_message_handler(\n        event: \"SendMessageEvent\",\n        bot: \"VillaBot\",\n        handler: MessageHandler,\n    ):\n        if not handler.check(event.message):\n            return\n        result = current_match_result.get()\n        await handler(event, bot, result)\n        if handler.temp:\n            bot.message_handlers.remove(handler)\n            logger.debug(f\"Removed message handler with {handler.match}\")\n\n    def register_msg_handler(\n        self,\n        match: Match,\n        func: Callable[[\"SendMessageEvent\", \"VillaBot\", TR], Awaitable[Any]],\n        temp: bool = False,\n    ):\n        self.message_handlers.append(MessageHandler[TR](match, func, temp))\n        logger.info(\n            f\"Registered the handler {func} with {match} (temp: {temp})\",\n        )\n        return func\n\n    def match(\n        self,\n        match: Match,\n        temp: bool = False,\n    ) -> Callable[\n        [Callable[[\"SendMessageEvent\", \"VillaBot\", TR], Awaitable[Any]]],\n        Callable[[\"SendMessageEvent\", \"VillaBot\", TR], Awaitable[Any]],\n    ]:\n        def wrapper(\n            func: Callable[\n                [\"SendMessageEvent\", \"VillaBot\", TR],\n                Awaitable[Any],\n            ],\n        ) -> Callable[[\"SendMessageEvent\", \"VillaBot\", TR], Awaitable[Any]]:\n            self.register_msg_handler(match, func, temp)\n            return func\n\n        return wrapper\n\n    def regex(\n        self,\n        pattern: str | re.Pattern,\n        temp: bool = False,\n    ) -> Callable[[RegexHandlerFunc], RegexHandlerFunc]:\n        def wrapper(\n            func: RegexHandlerFunc,\n        ) -> RegexHandlerFunc:\n            self.register_msg_handler(Regex(pattern), func, temp)\n            return func\n\n        return wrapper\n\n    def startswith(\n        self,\n        prefix: str,\n        temp: bool = False,\n    ) -> Callable[[StartswithHandlerFunc], StartswithHandlerFunc]:\n        def wrapper(\n            func: StartswithHandlerFunc,\n        ) -> StartswithHandlerFunc:\n            self.register_msg_handler(Startswith(prefix), func, temp)\n            return func\n\n        return wrapper\n\n    def endswith(\n        self,\n        suffix: str,\n        temp: bool = False,\n    ) -> Callable[[EndswithHandlerFunc], EndswithHandlerFunc]:\n        def wrapper(\n            func: EndswithHandlerFunc,\n        ) -> EndswithHandlerFunc:\n            self.register_msg_handler(Endswith(suffix), func, temp)\n            return func\n\n        return wrapper\n\n    def keyword(\n        self,\n        *keywords: str,\n        temp: bool = False,\n    ) -> Callable[[KeywordsHandlerFunc], KeywordsHandlerFunc]:\n        def wrapper(\n            func: KeywordsHandlerFunc,\n        ) -> KeywordsHandlerFunc:\n            self.register_msg_handler(Keywords(*keywords), func, temp)\n            return func\n\n        return wrapper", ""]}
{"filename": "hertavilla/__init__.py", "chunked_list": ["from __future__ import annotations\n\nfrom .bot import VillaBot as VillaBot\nfrom .event import (\n    AddQuickEmoticonEvent as AddQuickEmoticonEvent,\n    AuditCallbackEvent as AuditCallbackEvent,\n    CreateRobotEvent as CreateRobotEvent,\n    DeleteRobotEvent as DeleteRobotEvent,\n    Event as Event,\n    JoinVillaEvent as JoinVillaEvent,", "    Event as Event,\n    JoinVillaEvent as JoinVillaEvent,\n    SendMessageEvent as SendMessageEvent,\n)\nfrom .match import (\n    EndswithResult as EndswithResult,\n    KeywordsResult as KeywordsResult,\n    RegexResult as RegexResult,\n    StartswithResult as StartswithResult,\n)", "    StartswithResult as StartswithResult,\n)\nfrom .message import (\n    Image as Image,\n    Link as Link,\n    MentionedAll as MentionedAll,\n    MentionedRobot as MentionedRobot,\n    MentionedUser as MentionedUser,\n    MessageChain as MessageChain,\n    Post as Post,", "    MessageChain as MessageChain,\n    Post as Post,\n    Quote as Quote,\n    VillaRoomLink as VillaRoomLink,\n)\nfrom .server import (\n    AIOHTTPBackend as AIOHTTPBackend,\n    get_backend as get_backend,\n    init_backend as init_backend,\n    run as run,", "    init_backend as init_backend,\n    run as run,\n)\nfrom .version import __version__ as __version__\n"]}
{"filename": "hertavilla/utils.py", "chunked_list": ["from __future__ import annotations\n\nimport json\n\n\nclass MsgEncoder(json.JSONEncoder):\n    def default(self, obj):\n        from hertavilla.message.internal import MsgContent\n\n        if isinstance(obj, MsgContent):\n            data = obj.dict()\n            for k in data.copy().keys():\n                if k.startswith(\"_\"):\n                    data.pop(k)\n            return data\n        return json.JSONEncoder.default(self, obj)", "\n\ndef _c(text: str) -> int:\n    return (len(text.encode(\"utf-16\")) // 2) - 1\n\n\ndef _rc(length: int) -> int:\n    return (length + 1) * 2\n", ""]}
{"filename": "hertavilla/typing.py", "chunked_list": ["from __future__ import annotations\n\nimport sys\n\n# Because of pydantic's exception\n# Herta SDK provides this `TypedDict`\n# Import it by this:\n# from hertavilla.typing import TypedDict\n\n# Pydantic exception:", "\n# Pydantic exception:\n#   TypeError: You should use `typing_extensions.TypedDict`\n#   instead of `typing.TypedDict` with Python < 3.9.2.\n#   Without it, there is no way to differentiate\n#   required and optional fields when subclassed.\n\nif sys.version_info >= (3, 9, 2):\n    from typing import TypedDict as TypedDict\nelse:\n    from typing_extensions import TypedDict as TypedDict", ""]}
{"filename": "hertavilla/event.py", "chunked_list": ["# ruff: noqa: A003\nfrom __future__ import annotations\n\nfrom enum import IntEnum\nimport json\nimport sys\nfrom typing import Any, List, Literal, Optional, Type\n\nfrom hertavilla.message import (\n    MessageChain,", "from hertavilla.message import (\n    MessageChain,\n)\nfrom hertavilla.message.text import (\n    EntityDict,\n    MentionedInfo,\n    QuoteInfo,\n    Text,\n    entity_types,\n)", "    entity_types,\n)\nfrom hertavilla.utils import _rc\n\nfrom pydantic import BaseModel, Field, create_model_from_typeddict, validator\n\nif sys.version_info >= (3, 11):\n    from typing import Self\nelse:\n    from typing_extensions import Self", "\nevents: dict[int, tuple[Type[\"Event\"], str]] = {}\n\n\nclass Command(BaseModel):\n    name: str\n    desc: Optional[str] = None\n\n\nclass Template(BaseModel):\n    id: str\n    name: str\n    desc: Optional[str] = None\n    icon: str\n    commands: List[Command]", "\nclass Template(BaseModel):\n    id: str\n    name: str\n    desc: Optional[str] = None\n    icon: str\n    commands: List[Command]\n\n\nclass Robot(BaseModel):\n    \"\"\"\u673a\u5668\u4eba\u76f8\u5173\u4fe1\u606f\"\"\"\n\n    template: Template\n    \"\"\"\u673a\u5668\u4eba\u6a21\u677f\u4fe1\u606f\"\"\"\n    villa_id: int\n    \"\"\"\u4e8b\u4ef6\u6240\u5c5e\u7684\u5927\u522b\u91ce id\"\"\"", "\nclass Robot(BaseModel):\n    \"\"\"\u673a\u5668\u4eba\u76f8\u5173\u4fe1\u606f\"\"\"\n\n    template: Template\n    \"\"\"\u673a\u5668\u4eba\u6a21\u677f\u4fe1\u606f\"\"\"\n    villa_id: int\n    \"\"\"\u4e8b\u4ef6\u6240\u5c5e\u7684\u5927\u522b\u91ce id\"\"\"\n\n\nclass Event(BaseModel):\n    robot: Robot\n    \"\"\"\u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\"\"\"\n    type: int\n    \"\"\"\u4e8b\u4ef6\u7c7b\u578b\"\"\"\n    created_at: int\n    \"\"\"\u4e8b\u4ef6\u521b\u5efa\u65f6\u95f4\"\"\"\n    id: str\n    \"\"\"\u4e8b\u4ef6 id\"\"\"\n    send_at: int\n    \"\"\"\u4e8b\u4ef6\u56de\u8c03\u65f6\u95f4\"\"\"\n\n    @property\n    def villa_id(self) -> int:\n        return self.robot.villa_id\n\n    def __init_subclass__(cls: Type[Self]) -> None:\n        super().__init_subclass__()\n        literal = cls.__annotations__[\"type\"]\n        type_: int = (\n            eval(cls.__annotations__[\"type\"])\n            if isinstance(literal, str)\n            else literal\n        ).__args__[\n            0\n        ]  # \u83b7\u53d6\u7c7b\u578b\n        name = cls.__name__.replace(\"Event\", \"\")  # \u83b7\u53d6\u540d\u79f0\n        events[type_] = cls, name", "\n\nclass Event(BaseModel):\n    robot: Robot\n    \"\"\"\u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\"\"\"\n    type: int\n    \"\"\"\u4e8b\u4ef6\u7c7b\u578b\"\"\"\n    created_at: int\n    \"\"\"\u4e8b\u4ef6\u521b\u5efa\u65f6\u95f4\"\"\"\n    id: str\n    \"\"\"\u4e8b\u4ef6 id\"\"\"\n    send_at: int\n    \"\"\"\u4e8b\u4ef6\u56de\u8c03\u65f6\u95f4\"\"\"\n\n    @property\n    def villa_id(self) -> int:\n        return self.robot.villa_id\n\n    def __init_subclass__(cls: Type[Self]) -> None:\n        super().__init_subclass__()\n        literal = cls.__annotations__[\"type\"]\n        type_: int = (\n            eval(cls.__annotations__[\"type\"])\n            if isinstance(literal, str)\n            else literal\n        ).__args__[\n            0\n        ]  # \u83b7\u53d6\u7c7b\u578b\n        name = cls.__name__.replace(\"Event\", \"\")  # \u83b7\u53d6\u540d\u79f0\n        events[type_] = cls, name", "\n\n# JoinVilla\n\n\nclass JoinVillaEvent(Event):\n    type: Literal[1]\n\n    join_uid: int\n    \"\"\"\u7528\u6237 id\"\"\"\n    join_user_nickname: str\n    \"\"\"\u7528\u6237\u6635\u79f0\"\"\"\n    join_at: int\n    \"\"\"\u7528\u6237\u52a0\u5165\u65f6\u95f4\"\"\"", "\n\n# SendMessage\n\n# why ignore type: https://github.com/pydantic/pydantic/issues/5953\nMentionedInfoModel = create_model_from_typeddict(MentionedInfo)  # type: ignore\nQuoteInfoModel = create_model_from_typeddict(QuoteInfo)  # type: ignore\n\n\nclass User(BaseModel):\n    portrait_uri: str = Field(alias=\"portraitUri\")\n    extra: dict\n    name: str\n    alias: str\n    id: str\n    portrait: str\n\n    @validator(\"extra\", pre=True)\n    def extra_str_to_dict(cls, v: Any):\n        return json.loads(v) if isinstance(v, str) else v", "\nclass User(BaseModel):\n    portrait_uri: str = Field(alias=\"portraitUri\")\n    extra: dict\n    name: str\n    alias: str\n    id: str\n    portrait: str\n\n    @validator(\"extra\", pre=True)\n    def extra_str_to_dict(cls, v: Any):\n        return json.loads(v) if isinstance(v, str) else v", "\n\nclass Trace(BaseModel):\n    visual_room_version: str\n    app_version: str\n    action_type: int\n    bot_msg_id: str\n    client: str\n    rong_sdk_version: str\n", "\n\nclass MessageContent(BaseModel):\n    content: MessageChain\n    mentioned_info: Optional[MentionedInfoModel] = Field(  # type: ignore\n        None,\n        alias=\"mentionedInfo\",\n    )\n    quote: Optional[QuoteInfoModel] = None  # type: ignore\n    user: Optional[User] = None\n    trace: Optional[Trace] = None\n\n    @validator(\"content\", pre=True)\n    def parse_content(cls, v: Any):\n        chain = MessageChain()\n        text = v[\"text\"].encode(\"utf-16\")\n        entities = v[\"entities\"]\n        last_offset = 0\n        last_length = 0\n        end_offset = 0\n        for entity in entities:\n            entity: EntityDict\n            offset = entity[\"offset\"]\n            body = entity[\"entity\"]\n            type_ = body.pop(\"type\")\n            if offset != end_offset:\n                # \u4e24\u4e2a Entity \u504f\u79fb\u76f8\u5dee\u4e3a\u6587\u5b57\n                chain.append(\n                    Text(text[_rc(end_offset) : _rc(offset)].decode(\"utf-16\")),\n                )\n            chain.append(entity_types[type_](**body))\n            last_offset = offset\n            last_length = entity[\"length\"]\n            end_offset = last_offset + last_length\n        if _rc(end_offset) != len(text):\n            # \u6700\u540e\u4e00\u4e2a Entity \u4e4b\u540e\u662f\u6587\u5b57\n            chain.append(\n                Text(text[_rc(end_offset) :].decode(\"utf-16\")),\n            )\n        return chain", "\n\nclass SendMessageEvent(Event):\n    type: Literal[2]\n\n    content: MessageContent\n    \"\"\"\u6d88\u606f\u5185\u5bb9\"\"\"\n    from_user_id: int\n    \"\"\"\u53d1\u9001\u8005 id\"\"\"\n    send_at: int\n    \"\"\"\u53d1\u9001\u65f6\u95f4\u7684\u65f6\u95f4\u6233\"\"\"\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n    object_name: int\n    \"\"\"\u76ee\u524d\u53ea\u652f\u6301\u6587\u672c\u7c7b\u578b\u6d88\u606f\"\"\"\n    nickname: str\n    \"\"\"\u7528\u6237\u6635\u79f0\"\"\"\n    msg_uid: str\n    \"\"\"\u6d88\u606f id\"\"\"\n    bot_msg_id: Optional[str]\n    \"\"\"\u5982\u679c\u88ab\u56de\u590d\u7684\u6d88\u606f\u4ece\u5c5e\u4e8e\u673a\u5668\u4eba\uff0c\u5219\u8be5\u5b57\u6bb5\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\"\"\n\n    @validator(\"content\", pre=True)\n    def str_to_json(cls, v: Any):\n        return json.loads(v)\n\n    @property\n    def message(self) -> MessageChain:\n        return self.content.content", "\n\nclass CreateRobotEvent(Event):\n    type: Literal[3]\n\n\nclass DeleteRobotEvent(Event):\n    type: Literal[4]\n\n\nclass AddQuickEmoticonEvent(Event):\n    type: Literal[5]\n\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n\n    uid: int\n    \"\"\"\u53d1\u9001\u8868\u60c5\u7684\u7528\u6237 id\"\"\"\n\n    emoticon_id: int\n    \"\"\"\u8868\u60c5 id\"\"\"\n\n    emoticon: str\n    \"\"\"\u8868\u60c5\u5185\u5bb9\"\"\"\n\n    msg_uid: str\n    \"\"\"\u88ab\u56de\u590d\u7684\u6d88\u606f id\"\"\"\n\n    bot_msg_id: str\n    \"\"\"\u5982\u679c\u88ab\u56de\u590d\u7684\u6d88\u606f\u4ece\u5c5e\u4e8e\u673a\u5668\u4eba\uff0c\u5219\u8be5\u5b57\u6bb5\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\"\"\n\n    is_cancel: bool = False\n    \"\"\"\u662f\u5426\u662f\u53d6\u6d88\u8868\u60c5\"\"\"", "\n\nclass AddQuickEmoticonEvent(Event):\n    type: Literal[5]\n\n    room_id: int\n    \"\"\"\u623f\u95f4 id\"\"\"\n\n    uid: int\n    \"\"\"\u53d1\u9001\u8868\u60c5\u7684\u7528\u6237 id\"\"\"\n\n    emoticon_id: int\n    \"\"\"\u8868\u60c5 id\"\"\"\n\n    emoticon: str\n    \"\"\"\u8868\u60c5\u5185\u5bb9\"\"\"\n\n    msg_uid: str\n    \"\"\"\u88ab\u56de\u590d\u7684\u6d88\u606f id\"\"\"\n\n    bot_msg_id: str\n    \"\"\"\u5982\u679c\u88ab\u56de\u590d\u7684\u6d88\u606f\u4ece\u5c5e\u4e8e\u673a\u5668\u4eba\uff0c\u5219\u8be5\u5b57\u6bb5\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\"\"\n\n    is_cancel: bool = False\n    \"\"\"\u662f\u5426\u662f\u53d6\u6d88\u8868\u60c5\"\"\"", "\n\nclass AuditResult(IntEnum):\n    COMPATIBLE = 0\n    APPROVED = 1\n    REJECTED = 2\n\n\nclass AuditCallbackEvent(Event):\n    type: Literal[6]\n\n    audit_id: str\n    \"\"\"\u5ba1\u6838\u4e8b\u4ef6 id\"\"\"\n\n    bot_tpl_id: str\n    \"\"\"\u673a\u5668\u4eba id\"\"\"\n\n    room_id: int\n    \"\"\"\u623f\u95f4 id\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    user_id: int\n    \"\"\"\u7528\u6237 id\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    pass_through: Optional[str] = None\n    \"\"\"\u900f\u4f20\u6570\u636e\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    audit_result: AuditResult\n    \"\"\"\u5ba1\u6838\u7ed3\u679c\uff0c0\u4f5c\u517c\u5bb9\uff0c1\u5ba1\u6838\u901a\u8fc7\uff0c2\u5ba1\u6838\u9a73\u56de\"\"\"\n\n    def __bool__(self) -> bool:\n        return self.audit_result != AuditResult.REJECTED\n\n    def compare(self, audit_id: str, pass_through: str | None = None) -> bool:\n        return self.audit_id == audit_id and self.pass_through == pass_through", "class AuditCallbackEvent(Event):\n    type: Literal[6]\n\n    audit_id: str\n    \"\"\"\u5ba1\u6838\u4e8b\u4ef6 id\"\"\"\n\n    bot_tpl_id: str\n    \"\"\"\u673a\u5668\u4eba id\"\"\"\n\n    room_id: int\n    \"\"\"\u623f\u95f4 id\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    user_id: int\n    \"\"\"\u7528\u6237 id\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    pass_through: Optional[str] = None\n    \"\"\"\u900f\u4f20\u6570\u636e\uff08\u548c\u5ba1\u6838\u63a5\u53e3\u8c03\u7528\u65b9\u4f20\u5165\u7684\u503c\u4e00\u81f4\uff09\"\"\"\n\n    audit_result: AuditResult\n    \"\"\"\u5ba1\u6838\u7ed3\u679c\uff0c0\u4f5c\u517c\u5bb9\uff0c1\u5ba1\u6838\u901a\u8fc7\uff0c2\u5ba1\u6838\u9a73\u56de\"\"\"\n\n    def __bool__(self) -> bool:\n        return self.audit_result != AuditResult.REJECTED\n\n    def compare(self, audit_id: str, pass_through: str | None = None) -> bool:\n        return self.audit_id == audit_id and self.pass_through == pass_through", "\n\ndef parse_event(payload: dict[str, Any]) -> Event:\n    type_: int = payload[\"type\"]\n    cls_, name = events[type_]\n    data = payload[\"extend_data\"][\"EventData\"][name]\n    payload.pop(\"extend_data\")\n    payload |= data\n    return cls_.parse_obj(payload)\n", ""]}
{"filename": "hertavilla/apis/role.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import List, Sequence\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import Role, RoleColor, RolePermission\n\nfrom pydantic import parse_obj_as\n\n\nclass RoleAPIMixin(_BaseAPIMixin):\n    async def operate_member_to_role(\n        self,\n        villa_id: int,\n        role_id: int,\n        uid: int,\n        is_add: bool = True,\n    ) -> None:\n        \"\"\"\u5411\u8eab\u4efd\u7ec4\u64cd\u4f5c\u7528\u6237\uff0c\u5305\u62ec\u628a\u7528\u6237\u6dfb\u52a0\u5230\u8eab\u4efd\u7ec4\u6216\u8005\u4ece\u8eab\u4efd\u7ec4\u5220\u9664\u7528\u6237\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            role_id (int): \u8eab\u4efd\u7ec4 id\n            uid (int): \u7528\u6237 id\n            is_add (bool, optional): \u662f\u5426\u662f\u6dfb\u52a0\u7528\u6237. Defaults to True.\n        \"\"\"\n        await self.base_request(\n            \"/operateMemberToRole\",\n            \"POST\",\n            villa_id,\n            data={\"role_id\": role_id, \"uid\": uid, \"is_add\": is_add},\n        )\n\n    async def create_member_role(\n        self,\n        villa_id: int,\n        name: str,\n        color: RoleColor,\n        permissions: Sequence[RolePermission],\n    ) -> int:\n        \"\"\"\u4e3a\u5927\u522b\u91ce\u521b\u5efa\u65b0\u7684\u8eab\u4efd\u7ec4\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8be5\u8eab\u4efd\u7ec4\u62e5\u6709\u7684\u6743\u9650\uff0c\u5e76\u4e3a\u8eab\u4efd\u7ec4\u6dfb\u52a0\u7528\u6237\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            name (str): \u8eab\u4efd\u7ec4\u540d\u79f0\n            color (RoleColor): \u8eab\u4efd\u7ec4\u989c\u8272\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RoleColor``\n            permissions (Sequence[RolePermission]): \u6743\u9650\u5217\u8868\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RolePermission``\n\n        Returns:\n            int: \u8eab\u4efd\u7ec4 id\n        \"\"\"  # noqa: E501\n        return int(\n            (\n                await self.base_request(\n                    \"/createMemberRole\",\n                    \"POST\",\n                    villa_id,\n                    data={\n                        \"name\": name,\n                        \"color\": color.value,\n                        \"permissions\": [perm.value for perm in permissions],\n                    },\n                )\n            )[\"id\"],\n        )\n\n    async def edit_member_role(\n        self,\n        villa_id: int,\n        id_: int,\n        name: str,\n        color: RoleColor,\n        permissions: Sequence[RolePermission],\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u8eab\u4efd\u7ec4\uff0c\u53ef\u4ee5\u4fee\u6539\u8eab\u4efd\u7ec4\u7684\u540d\u79f0\u3001\u989c\u8272\u548c\u6743\u9650\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            id_ (int): \u8eab\u4efd\u7ec4 id\n            name (str): \u8eab\u4efd\u7ec4\u540d\u79f0\n            color (RoleColor): \u8eab\u4efd\u7ec4\u989c\u8272\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RoleColor``\n            permissions (Sequence[RolePermission]): \u6743\u9650\u5217\u8868\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RolePermission``\n        \"\"\"  # noqa: E501\n        await self.base_request(\n            \"/editMemberRole\",\n            \"POST\",\n            villa_id,\n            data={\n                \"id\": id_,\n                \"name\": name,\n                \"color\": color.value,\n                \"permissions\": [perm.value for perm in permissions],\n            },\n        )\n\n    async def delete_member_role(self, villa_id: int, id_: int) -> None:\n        \"\"\"\u5220\u9664\u8eab\u4efd\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            id_ (int): \u8eab\u4efd\u7ec4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteMemberRole\",\n            \"POST\",\n            villa_id,\n            data={\"id\": id_},\n        )\n\n    async def get_member_role_info(self, villa_id: int, role_id: int) -> Role:\n        \"\"\"\u83b7\u53d6\u8eab\u4efd\u7ec4\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            role_id (int): \u8eab\u4efd\u7ec4 id\n\n        Returns:\n            Role: \u8eab\u4efd\u7ec4\u4fe1\u606f\n        \"\"\"\n        return Role.parse_obj(\n            (\n                await self.base_request(\n                    \"/getMemberRoleInfo\",\n                    \"GET\",\n                    villa_id,\n                    params={\"role_id\": role_id},\n                )\n            )[\"role\"],\n        )\n\n    async def get_villa_member_roles(self, villa_id: int) -> list[Role]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u6240\u6709\u8eab\u4efd\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[Role]: \u8eab\u4efd\u7ec4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Role],\n            (\n                await self.base_request(\n                    \"/getVillaMemberRoles\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )", "\n\nclass RoleAPIMixin(_BaseAPIMixin):\n    async def operate_member_to_role(\n        self,\n        villa_id: int,\n        role_id: int,\n        uid: int,\n        is_add: bool = True,\n    ) -> None:\n        \"\"\"\u5411\u8eab\u4efd\u7ec4\u64cd\u4f5c\u7528\u6237\uff0c\u5305\u62ec\u628a\u7528\u6237\u6dfb\u52a0\u5230\u8eab\u4efd\u7ec4\u6216\u8005\u4ece\u8eab\u4efd\u7ec4\u5220\u9664\u7528\u6237\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            role_id (int): \u8eab\u4efd\u7ec4 id\n            uid (int): \u7528\u6237 id\n            is_add (bool, optional): \u662f\u5426\u662f\u6dfb\u52a0\u7528\u6237. Defaults to True.\n        \"\"\"\n        await self.base_request(\n            \"/operateMemberToRole\",\n            \"POST\",\n            villa_id,\n            data={\"role_id\": role_id, \"uid\": uid, \"is_add\": is_add},\n        )\n\n    async def create_member_role(\n        self,\n        villa_id: int,\n        name: str,\n        color: RoleColor,\n        permissions: Sequence[RolePermission],\n    ) -> int:\n        \"\"\"\u4e3a\u5927\u522b\u91ce\u521b\u5efa\u65b0\u7684\u8eab\u4efd\u7ec4\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8be5\u8eab\u4efd\u7ec4\u62e5\u6709\u7684\u6743\u9650\uff0c\u5e76\u4e3a\u8eab\u4efd\u7ec4\u6dfb\u52a0\u7528\u6237\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            name (str): \u8eab\u4efd\u7ec4\u540d\u79f0\n            color (RoleColor): \u8eab\u4efd\u7ec4\u989c\u8272\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RoleColor``\n            permissions (Sequence[RolePermission]): \u6743\u9650\u5217\u8868\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RolePermission``\n\n        Returns:\n            int: \u8eab\u4efd\u7ec4 id\n        \"\"\"  # noqa: E501\n        return int(\n            (\n                await self.base_request(\n                    \"/createMemberRole\",\n                    \"POST\",\n                    villa_id,\n                    data={\n                        \"name\": name,\n                        \"color\": color.value,\n                        \"permissions\": [perm.value for perm in permissions],\n                    },\n                )\n            )[\"id\"],\n        )\n\n    async def edit_member_role(\n        self,\n        villa_id: int,\n        id_: int,\n        name: str,\n        color: RoleColor,\n        permissions: Sequence[RolePermission],\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u8eab\u4efd\u7ec4\uff0c\u53ef\u4ee5\u4fee\u6539\u8eab\u4efd\u7ec4\u7684\u540d\u79f0\u3001\u989c\u8272\u548c\u6743\u9650\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            id_ (int): \u8eab\u4efd\u7ec4 id\n            name (str): \u8eab\u4efd\u7ec4\u540d\u79f0\n            color (RoleColor): \u8eab\u4efd\u7ec4\u989c\u8272\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RoleColor``\n            permissions (Sequence[RolePermission]): \u6743\u9650\u5217\u8868\uff0c\u53ef\u9009\u9879\u89c1 ``hertavilla.model.RolePermission``\n        \"\"\"  # noqa: E501\n        await self.base_request(\n            \"/editMemberRole\",\n            \"POST\",\n            villa_id,\n            data={\n                \"id\": id_,\n                \"name\": name,\n                \"color\": color.value,\n                \"permissions\": [perm.value for perm in permissions],\n            },\n        )\n\n    async def delete_member_role(self, villa_id: int, id_: int) -> None:\n        \"\"\"\u5220\u9664\u8eab\u4efd\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            id_ (int): \u8eab\u4efd\u7ec4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteMemberRole\",\n            \"POST\",\n            villa_id,\n            data={\"id\": id_},\n        )\n\n    async def get_member_role_info(self, villa_id: int, role_id: int) -> Role:\n        \"\"\"\u83b7\u53d6\u8eab\u4efd\u7ec4\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            role_id (int): \u8eab\u4efd\u7ec4 id\n\n        Returns:\n            Role: \u8eab\u4efd\u7ec4\u4fe1\u606f\n        \"\"\"\n        return Role.parse_obj(\n            (\n                await self.base_request(\n                    \"/getMemberRoleInfo\",\n                    \"GET\",\n                    villa_id,\n                    params={\"role_id\": role_id},\n                )\n            )[\"role\"],\n        )\n\n    async def get_villa_member_roles(self, villa_id: int) -> list[Role]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u6240\u6709\u8eab\u4efd\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[Role]: \u8eab\u4efd\u7ec4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Role],\n            (\n                await self.base_request(\n                    \"/getVillaMemberRoles\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )", ""]}
{"filename": "hertavilla/apis/auth.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import BotMemberAccessInfo\n\n\nclass AuthAPIMixin(_BaseAPIMixin):\n    async def check_member_bot_access_token(\n        self,\n        token: str,\n    ) -> BotMemberAccessInfo:\n        \"\"\"\u6821\u9a8c\u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\uff0c\u5e76\u8fd4\u56de\u7528\u6237\u4fe1\u606f\n\n        Args:\n            token (str): \u7528\u6237\u673a\u5668\u4eba\u8bbf\u95ee\u51ed\u8bc1\n\n        Returns:\n            BotMemberAccessInfo: \u8fd4\u56de\u6570\u636e\uff0c\u5305\u542b token \u89e3\u6790\u7684\u7528\u6237\u4fe1\u606f \u548c \u7528\u6237\u8be6\u7ec6\u4fe1\u606f\n        \"\"\"  # noqa: E501\n        return BotMemberAccessInfo.parse_obj(\n            await self.base_request(\n                \"/checkMemberBotAccessToken\",\n                \"POST\",\n                data={\"token\": token},\n            ),\n        )", ""]}
{"filename": "hertavilla/apis/internal.py", "chunked_list": ["from __future__ import annotations\n\nimport hashlib\nimport hmac\nimport logging\nfrom typing import Any, Literal\n\nfrom hertavilla.exception import (\n    HTTPStatusError,\n    raise_exception,", "    HTTPStatusError,\n    raise_exception,\n)\n\nfrom aiohttp import ClientSession\n\nlogger = logging.getLogger(\"hertavilla.api\")\nBASE_API = \"https://bbs-api.miyoushe.com/vila/api/bot/platform\"\n\n\nclass _BaseAPIMixin:\n    def __init__(\n        self,\n        bot_id: str,\n        secret: str,\n        pub_key: str,\n    ):\n        self.bot_id = bot_id\n        self.secret = secret\n        self.pub_key = pub_key\n\n    def _make_header(self, villa_id: int) -> dict[str, str]:\n        secret = hmac.new(\n            self.pub_key.encode(),\n            self.secret.encode(),\n            hashlib.sha256,\n        ).hexdigest()\n        return {\n            \"x-rpc-bot_id\": self.bot_id,\n            \"x-rpc-bot_secret\": secret,\n            \"x-rpc-bot_villa_id\": str(villa_id),\n        }\n\n    async def base_request(\n        self,\n        api: str,\n        method: Literal[\"POST\"] | Literal[\"GET\"],\n        /,\n        villa_id: int | None = None,\n        *,\n        data: dict[str, Any] | None = None,\n        params: dict[str, Any] | None = None,\n    ):\n        logger.info(f\"Calling API {api}.\")\n        async with ClientSession() as session:\n            async with session.request(\n                method,\n                f\"{BASE_API}{api}\",\n                json=data,\n                params=params,\n                headers=self._make_header(villa_id) if villa_id else None,\n            ) as resp:\n                if not resp.ok:\n                    raise HTTPStatusError(resp.status)\n                payload = await resp.json()\n                raise_exception(payload)\n                return payload[\"data\"]", "\n\nclass _BaseAPIMixin:\n    def __init__(\n        self,\n        bot_id: str,\n        secret: str,\n        pub_key: str,\n    ):\n        self.bot_id = bot_id\n        self.secret = secret\n        self.pub_key = pub_key\n\n    def _make_header(self, villa_id: int) -> dict[str, str]:\n        secret = hmac.new(\n            self.pub_key.encode(),\n            self.secret.encode(),\n            hashlib.sha256,\n        ).hexdigest()\n        return {\n            \"x-rpc-bot_id\": self.bot_id,\n            \"x-rpc-bot_secret\": secret,\n            \"x-rpc-bot_villa_id\": str(villa_id),\n        }\n\n    async def base_request(\n        self,\n        api: str,\n        method: Literal[\"POST\"] | Literal[\"GET\"],\n        /,\n        villa_id: int | None = None,\n        *,\n        data: dict[str, Any] | None = None,\n        params: dict[str, Any] | None = None,\n    ):\n        logger.info(f\"Calling API {api}.\")\n        async with ClientSession() as session:\n            async with session.request(\n                method,\n                f\"{BASE_API}{api}\",\n                json=data,\n                params=params,\n                headers=self._make_header(villa_id) if villa_id else None,\n            ) as resp:\n                if not resp.ok:\n                    raise HTTPStatusError(resp.status)\n                payload = await resp.json()\n                raise_exception(payload)\n                return payload[\"data\"]", ""]}
{"filename": "hertavilla/apis/room.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import List\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import Group, GroupRoom, Room\n\nfrom pydantic import parse_obj_as\n\n\nclass RoomAPIMixin(_BaseAPIMixin):\n    async def create_group(self, villa_id: int, group_name: str) -> int:\n        \"\"\"\u521b\u5efa\u5206\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_name (str): \u5206\u7ec4\u540d\u79f0\n\n        Returns:\n            int: \u5206\u7ec4 id\n        \"\"\"\n        return int(\n            (\n                await self.base_request(\n                    \"/createGroup\",\n                    \"POST\",\n                    villa_id,\n                    data={\n                        \"group_name\": group_name,\n                    },\n                )\n            )[\"group_id\"],\n        )\n\n    async def edit_group(\n        self,\n        villa_id: int,\n        group_id: int,\n        group_name: str,\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u5206\u7ec4\uff0c\u53ea\u5141\u8bb8\u7f16\u8f91\u5206\u7ec4\u7684\u540d\u79f0\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_id (int): \u5206\u7ec4 id\n            group_name (str): \u5206\u7ec4\u540d\u79f0\n        \"\"\"\n        await self.base_request(\n            \"/editGroup\",\n            \"POST\",\n            villa_id,\n            data={\"group_id\": group_id, \"group_name\": group_name},\n        )\n\n    async def delete_group(self, villa_id: int, group_id: int) -> None:\n        \"\"\"\u5220\u9664\u5206\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_id (int): \u5206\u7ec4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteGroup\",\n            \"POST\",\n            villa_id,\n            data={\"group_id\": group_id},\n        )\n\n    async def get_group_list(self, villa_id: int) -> list[Group]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u7684\u6240\u6709\u5206\u7ec4\u7684\u5217\u8868\uff0c\u53ea\u8fd4\u56de\u5206\u7ec4\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u5206\u7ec4\u5185\u7684\u623f\u95f4\u4fe1\u606f\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[Group]: \u5206\u7ec4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Group],\n            (\n                await self.base_request(\n                    \"/getGroupList\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )\n\n    async def edit_room(\n        self,\n        villa_id: int,\n        room_id: int,\n        room_name: str,\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u623f\u95f4\uff0c\u53ea\u5141\u8bb8\u7f16\u8f91\u623f\u95f4\u7684\u540d\u79f0\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n            room_name (str): \u623f\u95f4\u540d\u79f0\n        \"\"\"\n        await self.base_request(\n            \"/editRoom\",\n            \"POST\",\n            villa_id,\n            data={\"room_id\": room_id, \"room_name\": room_name},\n        )\n\n    async def delete_room(self, villa_id: int, room_id: int) -> None:\n        \"\"\"\u5220\u9664\u623f\u95f4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteRoom\",\n            \"POST\",\n            villa_id,\n            data={\"room_id\": room_id},\n        )\n\n    async def get_room(self, villa_id: int, room_id: int) -> Room:\n        \"\"\"\u83b7\u53d6\u623f\u95f4\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n\n        Returns:\n            Room: \u623f\u95f4\u4fe1\u606f\n        \"\"\"\n        return Room.parse_obj(\n            (\n                await self.base_request(\n                    \"/getRoom\",\n                    \"GET\",\n                    villa_id,\n                    params={\"room_id\": room_id},\n                )\n            )[\"room\"],\n        )\n\n    async def get_villa_group_room_list(\n        self,\n        villa_id: int,\n    ) -> list[GroupRoom]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u7684\u6240\u6709\u5206\u7ec4\u548c\u623f\u95f4\u7684\u5217\u8868\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[GroupRoom]: \u623f\u95f4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[GroupRoom],\n            (\n                await self.base_request(\n                    \"/getVillaGroupRoomList\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )", "\n\nclass RoomAPIMixin(_BaseAPIMixin):\n    async def create_group(self, villa_id: int, group_name: str) -> int:\n        \"\"\"\u521b\u5efa\u5206\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_name (str): \u5206\u7ec4\u540d\u79f0\n\n        Returns:\n            int: \u5206\u7ec4 id\n        \"\"\"\n        return int(\n            (\n                await self.base_request(\n                    \"/createGroup\",\n                    \"POST\",\n                    villa_id,\n                    data={\n                        \"group_name\": group_name,\n                    },\n                )\n            )[\"group_id\"],\n        )\n\n    async def edit_group(\n        self,\n        villa_id: int,\n        group_id: int,\n        group_name: str,\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u5206\u7ec4\uff0c\u53ea\u5141\u8bb8\u7f16\u8f91\u5206\u7ec4\u7684\u540d\u79f0\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_id (int): \u5206\u7ec4 id\n            group_name (str): \u5206\u7ec4\u540d\u79f0\n        \"\"\"\n        await self.base_request(\n            \"/editGroup\",\n            \"POST\",\n            villa_id,\n            data={\"group_id\": group_id, \"group_name\": group_name},\n        )\n\n    async def delete_group(self, villa_id: int, group_id: int) -> None:\n        \"\"\"\u5220\u9664\u5206\u7ec4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            group_id (int): \u5206\u7ec4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteGroup\",\n            \"POST\",\n            villa_id,\n            data={\"group_id\": group_id},\n        )\n\n    async def get_group_list(self, villa_id: int) -> list[Group]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u7684\u6240\u6709\u5206\u7ec4\u7684\u5217\u8868\uff0c\u53ea\u8fd4\u56de\u5206\u7ec4\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u5206\u7ec4\u5185\u7684\u623f\u95f4\u4fe1\u606f\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[Group]: \u5206\u7ec4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Group],\n            (\n                await self.base_request(\n                    \"/getGroupList\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )\n\n    async def edit_room(\n        self,\n        villa_id: int,\n        room_id: int,\n        room_name: str,\n    ) -> None:\n        \"\"\"\u7f16\u8f91\u623f\u95f4\uff0c\u53ea\u5141\u8bb8\u7f16\u8f91\u623f\u95f4\u7684\u540d\u79f0\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n            room_name (str): \u623f\u95f4\u540d\u79f0\n        \"\"\"\n        await self.base_request(\n            \"/editRoom\",\n            \"POST\",\n            villa_id,\n            data={\"room_id\": room_id, \"room_name\": room_name},\n        )\n\n    async def delete_room(self, villa_id: int, room_id: int) -> None:\n        \"\"\"\u5220\u9664\u623f\u95f4\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteRoom\",\n            \"POST\",\n            villa_id,\n            data={\"room_id\": room_id},\n        )\n\n    async def get_room(self, villa_id: int, room_id: int) -> Room:\n        \"\"\"\u83b7\u53d6\u623f\u95f4\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n\n        Returns:\n            Room: \u623f\u95f4\u4fe1\u606f\n        \"\"\"\n        return Room.parse_obj(\n            (\n                await self.base_request(\n                    \"/getRoom\",\n                    \"GET\",\n                    villa_id,\n                    params={\"room_id\": room_id},\n                )\n            )[\"room\"],\n        )\n\n    async def get_villa_group_room_list(\n        self,\n        villa_id: int,\n    ) -> list[GroupRoom]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4e0b\u7684\u6240\u6709\u5206\u7ec4\u548c\u623f\u95f4\u7684\u5217\u8868\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            list[GroupRoom]: \u623f\u95f4\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[GroupRoom],\n            (\n                await self.base_request(\n                    \"/getVillaGroupRoomList\",\n                    \"GET\",\n                    villa_id,\n                )\n            )[\"list\"],\n        )", ""]}
{"filename": "hertavilla/apis/message.py", "chunked_list": ["from __future__ import annotations\n\nimport json\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.message.internal import MsgContentInfo\nfrom hertavilla.utils import MsgEncoder\n\n\nclass MessageAPIMixin(_BaseAPIMixin):\n    async def send_message(\n        self,\n        villa_id: int,\n        room_id: int,\n        msg_content_info: MsgContentInfo,\n        object_name: str = \"MHY:Text\",\n    ) -> str:\n        \"\"\"\u53d1\u9001\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n            msg_content_info (MsgContentInfo): \u6d88\u606f\u4fe1\u606f\n            object_name (str, optional): \u6d88\u606f\u7c7b\u578b\uff0c\u76ee\u524d\u652f\u6301: MHY:Text \u6587\u672c\u7c7b\u578b. Defaults to \"MHY:Text\".\n\n        Returns:\n            str: bot_msg_id \u673a\u5668\u4eba\u6240\u53d1\u9001\u6d88\u606f\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n        \"\"\"  # noqa: E501\n        return (\n            await self.base_request(\n                \"/sendMessage\",\n                \"POST\",\n                villa_id,\n                data={\n                    \"room_id\": room_id,\n                    \"object_name\": object_name,\n                    \"msg_content\": json.dumps(\n                        msg_content_info,\n                        ensure_ascii=False,\n                        cls=MsgEncoder,\n                    ),\n                },\n            )\n        )[\"bot_msg_id\"]\n\n    async def pin_message(\n        self,\n        villa_id: int,\n        msg_uid: str,\n        room_id: int,\n        send_at: int,\n        is_cancel: bool = False,\n    ) -> None:\n        \"\"\"\u7f6e\u9876\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            msg_uid (str): \u6d88\u606f id\n            room_id (int): \u623f\u95f4 id\n            send_at (int): \u53d1\u9001\u65f6\u95f4\n            is_cancel (bool, optional): \u662f\u5426\u53d6\u6d88\u7f6e\u9876. Defaults to False.\n        \"\"\"\n        await self.base_request(\n            \"/pinMessage\",\n            \"POST\",\n            villa_id,\n            data={\n                \"msg_uid\": msg_uid,\n                \"room_id\": room_id,\n                \"send_at\": send_at,\n                \"is_cancel\": is_cancel,\n            },\n        )\n\n    async def recall_message(\n        self,\n        villa_id: int,\n        msg_uid: str,\n        room_id: int,\n        msg_time: int,\n    ) -> None:\n        \"\"\"\u64a4\u56de\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            msg_uid (str): \u6d88\u606f id\n            room_id (int): \u623f\u95f4 id\n            msg_time (int): \u53d1\u9001\u65f6\u95f4\n        \"\"\"\n        await self.base_request(\n            \"/recallMessage\",\n            \"POST\",\n            villa_id,\n            data={\n                \"msg_uid\": msg_uid,\n                \"room_id\": room_id,\n                \"msg_time\": msg_time,\n            },\n        )", "\nclass MessageAPIMixin(_BaseAPIMixin):\n    async def send_message(\n        self,\n        villa_id: int,\n        room_id: int,\n        msg_content_info: MsgContentInfo,\n        object_name: str = \"MHY:Text\",\n    ) -> str:\n        \"\"\"\u53d1\u9001\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            room_id (int): \u623f\u95f4 id\n            msg_content_info (MsgContentInfo): \u6d88\u606f\u4fe1\u606f\n            object_name (str, optional): \u6d88\u606f\u7c7b\u578b\uff0c\u76ee\u524d\u652f\u6301: MHY:Text \u6587\u672c\u7c7b\u578b. Defaults to \"MHY:Text\".\n\n        Returns:\n            str: bot_msg_id \u673a\u5668\u4eba\u6240\u53d1\u9001\u6d88\u606f\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n        \"\"\"  # noqa: E501\n        return (\n            await self.base_request(\n                \"/sendMessage\",\n                \"POST\",\n                villa_id,\n                data={\n                    \"room_id\": room_id,\n                    \"object_name\": object_name,\n                    \"msg_content\": json.dumps(\n                        msg_content_info,\n                        ensure_ascii=False,\n                        cls=MsgEncoder,\n                    ),\n                },\n            )\n        )[\"bot_msg_id\"]\n\n    async def pin_message(\n        self,\n        villa_id: int,\n        msg_uid: str,\n        room_id: int,\n        send_at: int,\n        is_cancel: bool = False,\n    ) -> None:\n        \"\"\"\u7f6e\u9876\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            msg_uid (str): \u6d88\u606f id\n            room_id (int): \u623f\u95f4 id\n            send_at (int): \u53d1\u9001\u65f6\u95f4\n            is_cancel (bool, optional): \u662f\u5426\u53d6\u6d88\u7f6e\u9876. Defaults to False.\n        \"\"\"\n        await self.base_request(\n            \"/pinMessage\",\n            \"POST\",\n            villa_id,\n            data={\n                \"msg_uid\": msg_uid,\n                \"room_id\": room_id,\n                \"send_at\": send_at,\n                \"is_cancel\": is_cancel,\n            },\n        )\n\n    async def recall_message(\n        self,\n        villa_id: int,\n        msg_uid: str,\n        room_id: int,\n        msg_time: int,\n    ) -> None:\n        \"\"\"\u64a4\u56de\u6d88\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            msg_uid (str): \u6d88\u606f id\n            room_id (int): \u623f\u95f4 id\n            msg_time (int): \u53d1\u9001\u65f6\u95f4\n        \"\"\"\n        await self.base_request(\n            \"/recallMessage\",\n            \"POST\",\n            villa_id,\n            data={\n                \"msg_uid\": msg_uid,\n                \"room_id\": room_id,\n                \"msg_time\": msg_time,\n            },\n        )", ""]}
{"filename": "hertavilla/apis/__init__.py", "chunked_list": [""]}
{"filename": "hertavilla/apis/audit.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import AuditContentType\n\n\nclass AuditAPIMixin(_BaseAPIMixin):\n    async def audit(\n        self,\n        villa_id: int,\n        audit_content: str,\n        room_id: int,\n        uid: int,\n        pass_through: str | None = None,\n        content_type: AuditContentType = AuditContentType.TEXT,\n    ) -> str:\n        \"\"\"\u5ba1\u6838\u7528\u6237\u914d\u7f6e\u5185\u5bb9\u662f\u5426\u5408\u89c4\uff0c\u8c03\u7528\u6210\u529f\u540e\u4f1a\u8fd4\u56de\u5ba1\u6838\u4e8b\u4ef6id(audit_id)\u3002\u5ba1\u6838\u7ed3\u679c\u4f1a\u901a\u8fc7\u56de\u8c03\u63a5\u53e3\u5f02\u6b65\u901a\u77e5 (`AuditCallback`)\u3002\n        \u5982\u679c\u673a\u5668\u4eba\u5b58\u5728\u5927\u522b\u91ce\u7528\u6237\u81ea\u5b9a\u4e49\u5185\u5bb9\uff0c\u5c31\u8981\u8c03\u7528\u5ba1\u6838\u63a5\u53e3\uff0c\u5224\u65ad\u5185\u5bb9\u662f\u5426\u5408\u89c4\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            audit_content (str): \u5f85\u5ba1\u6838\u5185\u5bb9\n            room_id (int): \u623f\u95f4 id\n            uid (int): \u7528\u6237 id\n            pass_through (str | None, optional): \u900f\u4f20\u4fe1\u606f\uff0c\u8be5\u5b57\u6bb5\u4f1a\u5728\u5ba1\u6838\u7ed3\u679c\u56de\u8c03\u65f6\u643a\u5e26\u7ed9\u5f00\u53d1\u8005\uff0c\u9009\u586b. Defaults to None.\n            content_type (AuditContentType, optional): \u5ba1\u6838\u5185\u5bb9\u7684\u7c7b\u578b. Defaults to AuditContentType.TEXT.\n\n        Returns:\n            str: \u5ba1\u6838\u4e8b\u4ef6 id\n        \"\"\"  # noqa: E501\n        # FIXME: \u6587\u6863\u6240\u8bf4 room_id \u548c uid \u4e3a\u9009\u586b\n        # \u4f46\u662f\u4e0d\u586b\u4f1a -1\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u6210\u4e86\u5fc5\u586b\n        return (\n            await self.base_request(\n                \"/audit\",\n                \"POST\",\n                villa_id,\n                data={\n                    \"audit_content\": audit_content,\n                    \"room_id\": room_id,\n                    \"uid\": uid,\n                    \"pass_through\": pass_through,\n                    \"content_type\": content_type.value,\n                },\n            )\n        )[\"audit_id\"]", ""]}
{"filename": "hertavilla/apis/emoticon.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import List\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import Emoticon\n\nfrom pydantic import parse_obj_as\n\n\nclass EmoticonAPIMixin(_BaseAPIMixin):\n    async def get_all_emoticon(self) -> list[Emoticon]:\n        \"\"\"\u83b7\u53d6\u5168\u91cf\u8868\u60c5\n\n        Returns:\n            list[Emoticon]: \u8868\u60c5\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Emoticon],\n            (await self.base_request(\"/getAllEmoticons\", \"GET\"))[\"list\"],\n        )", "\n\nclass EmoticonAPIMixin(_BaseAPIMixin):\n    async def get_all_emoticon(self) -> list[Emoticon]:\n        \"\"\"\u83b7\u53d6\u5168\u91cf\u8868\u60c5\n\n        Returns:\n            list[Emoticon]: \u8868\u60c5\u5217\u8868\n        \"\"\"\n        return parse_obj_as(\n            List[Emoticon],\n            (await self.base_request(\"/getAllEmoticons\", \"GET\"))[\"list\"],\n        )", ""]}
{"filename": "hertavilla/apis/img.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\n\n\nclass ImgAPIMixin(_BaseAPIMixin):\n    async def transfer_image(\n        self,\n        villa_id: int,\n        url: str,\n    ) -> str:\n        \"\"\"\u5c06\u975e\u7c73\u6e38\u793e\u7684\u4e09\u65b9\u56fe\u5e8a\u56fe\u7247\u8f6c\u5b58\u5230\u7c73\u6e38\u793e\u5b98\u65b9\u56fe\u5e8a\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            url (str): \u4e09\u65b9\u56fe\u5e8a\u7684\u56fe\u7247\u94fe\u63a5\n\n        Returns:\n            str: \u65b0\u7684\u7c73\u6e38\u793e\u5b98\u65b9\u56fe\u5e8a\u7684\u56fe\u7247\u94fe\u63a5\n        \"\"\"\n        return (\n            await self.base_request(\n                \"/transferImage\",\n                \"POST\",\n                villa_id,\n                data={\"url\": url},\n            )\n        )[\"new_url\"]", ""]}
{"filename": "hertavilla/apis/member.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import List\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import Member\n\nfrom pydantic import parse_obj_as\n\n\nclass MemberAPIMixin(_BaseAPIMixin):\n    async def get_member(self, villa_id: int, uid: int) -> Member:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            uid (int): \u7528\u6237 id\n\n        Returns:\n            Member: \u7528\u6237\u8be6\u60c5\n        \"\"\"\n        return Member.parse_obj(\n            (\n                await self.base_request(\n                    \"/getMember\",\n                    \"GET\",\n                    villa_id,\n                    params={\"uid\": uid},\n                )\n            )[\"member\"],\n        )\n\n    async def get_villa_members(\n        self,\n        villa_id: int,\n        offset_str: str = \"0\",\n        size: int = 10,\n    ) -> tuple[list[Member], str]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u6210\u5458\u5217\u8868\u3002\n        \u5f53 offset_str \u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u7b2c\u4e00\u9875\u7684\u6210\u5458\u5217\u8868\u4fe1\u606f\uff1b\n        \u5f53\u4f7f\u7528\u672c\u6b21\u8bf7\u6c42\u8fd4\u56de\u503c\u4e2d\u7684`\u4e0b\u4e00\u9875\u7684\u504f\u79fb\u91cf\u8d77\u59cb\u4f4d\u7f6e`\u4f5c\u4e3a\u4e0b\u6b21\u8bf7\u6c42\u4e2d\u7684 offset_str \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0b\u4e00\u9875\u7684\u6210\u5458\u5217\u8868\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            offset_str (str, optional): \u8d77\u59cb\u4f4d\u7f6e\u504f\u79fb\u91cf. Defaults to \"0\".\n            size (int, optional): \u5206\u9875\u5927\u5c0f. Defaults to 10.\n\n        Returns:\n            tuple[list[Member], str]: \u7528\u6237\u4fe1\u606f\u5217\u8868\u4e0e\u4e0b\u4e00\u9875\u7684\u504f\u79fb\u91cf\u8d77\u59cb\u4f4d\u7f6e\n        \"\"\"  # noqa: E501\n        data = await self.base_request(\n            \"/getVillaMembers\",\n            \"GET\",\n            villa_id,\n            params={\"offset_str\": offset_str, \"size\": size},\n        )\n        return (\n            parse_obj_as(List[Member], data[\"list\"]),\n            data[\"next_offset_str\"],\n        )\n\n    async def delete_villa_member(self, villa_id: int, uid: int) -> None:\n        \"\"\"\u8e22\u51fa\u5927\u522b\u91ce\u7528\u6237\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            uid (int): \u7528\u6237 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteVillaMember\",\n            \"POST\",\n            villa_id,\n            data={\"uid\": uid},\n        )", "\n\nclass MemberAPIMixin(_BaseAPIMixin):\n    async def get_member(self, villa_id: int, uid: int) -> Member:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            uid (int): \u7528\u6237 id\n\n        Returns:\n            Member: \u7528\u6237\u8be6\u60c5\n        \"\"\"\n        return Member.parse_obj(\n            (\n                await self.base_request(\n                    \"/getMember\",\n                    \"GET\",\n                    villa_id,\n                    params={\"uid\": uid},\n                )\n            )[\"member\"],\n        )\n\n    async def get_villa_members(\n        self,\n        villa_id: int,\n        offset_str: str = \"0\",\n        size: int = 10,\n    ) -> tuple[list[Member], str]:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u6210\u5458\u5217\u8868\u3002\n        \u5f53 offset_str \u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u7b2c\u4e00\u9875\u7684\u6210\u5458\u5217\u8868\u4fe1\u606f\uff1b\n        \u5f53\u4f7f\u7528\u672c\u6b21\u8bf7\u6c42\u8fd4\u56de\u503c\u4e2d\u7684`\u4e0b\u4e00\u9875\u7684\u504f\u79fb\u91cf\u8d77\u59cb\u4f4d\u7f6e`\u4f5c\u4e3a\u4e0b\u6b21\u8bf7\u6c42\u4e2d\u7684 offset_str \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0b\u4e00\u9875\u7684\u6210\u5458\u5217\u8868\u3002\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            offset_str (str, optional): \u8d77\u59cb\u4f4d\u7f6e\u504f\u79fb\u91cf. Defaults to \"0\".\n            size (int, optional): \u5206\u9875\u5927\u5c0f. Defaults to 10.\n\n        Returns:\n            tuple[list[Member], str]: \u7528\u6237\u4fe1\u606f\u5217\u8868\u4e0e\u4e0b\u4e00\u9875\u7684\u504f\u79fb\u91cf\u8d77\u59cb\u4f4d\u7f6e\n        \"\"\"  # noqa: E501\n        data = await self.base_request(\n            \"/getVillaMembers\",\n            \"GET\",\n            villa_id,\n            params={\"offset_str\": offset_str, \"size\": size},\n        )\n        return (\n            parse_obj_as(List[Member], data[\"list\"]),\n            data[\"next_offset_str\"],\n        )\n\n    async def delete_villa_member(self, villa_id: int, uid: int) -> None:\n        \"\"\"\u8e22\u51fa\u5927\u522b\u91ce\u7528\u6237\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n            uid (int): \u7528\u6237 id\n        \"\"\"\n        await self.base_request(\n            \"/deleteVillaMember\",\n            \"POST\",\n            villa_id,\n            data={\"uid\": uid},\n        )", ""]}
{"filename": "hertavilla/apis/villa.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla.apis.internal import _BaseAPIMixin\nfrom hertavilla.model import Villa\n\n\nclass VillaAPIMixin(_BaseAPIMixin):\n    async def get_villa(self, villa_id: int) -> Villa:\n        \"\"\"\u83b7\u53d6\u5927\u522b\u91ce\u4fe1\u606f\n\n        Args:\n            villa_id (int): \u5927\u522b\u91ce id\n\n        Returns:\n            Villa: \u5927\u522b\u91ce\u4fe1\u606f\n        \"\"\"\n        return Villa.parse_obj(\n            (\n                await self.base_request(\n                    \"/getVilla\",\n                    \"GET\",\n                    villa_id,\n                    params={\"villa_id\": villa_id},\n                )\n            )[\"villa\"],\n        )", ""]}
{"filename": "hertavilla/message/internal.py", "chunked_list": ["from __future__ import annotations\n\nimport abc\nfrom typing import TYPE_CHECKING\n\nfrom hertavilla.typing import TypedDict\n\nfrom pydantic import BaseModel\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot", "\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot\n\n\nclass _Segment(abc.ABC):\n    ...\n\n    @abc.abstractmethod\n    async def get_text(self, bot: \"VillaBot\") -> str:\n        raise NotImplementedError", "\n\nclass MsgContentInfo(TypedDict):\n    ...\n\n\nclass MsgContent(BaseModel):\n    ...\n", ""]}
{"filename": "hertavilla/message/text.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, List, Literal, Optional, cast\n\nfrom hertavilla.message.image import ImageMsgContent\nfrom hertavilla.message.internal import MsgContent, MsgContentInfo, _Segment\nfrom hertavilla.typing import TypedDict\nfrom hertavilla.utils import _c\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot", "\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot\n\nentity_types: dict[str, type[\"_TextEntity\"]] = {}\n\n# MsgContentInfo for text\n\n\nclass TextMsgContentInfo(MsgContentInfo):\n    content: TextMsgContent\n    mentionedInfo: Optional[MentionedInfo]\n    quote: Optional[QuoteInfo]", "\nclass TextMsgContentInfo(MsgContentInfo):\n    content: TextMsgContent\n    mentionedInfo: Optional[MentionedInfo]\n    quote: Optional[QuoteInfo]\n\n\nclass QuoteInfo(TypedDict):\n    quoted_message_id: str\n    \"\"\"\u5f15\u7528\u6d88\u606f id\"\"\"\n\n    quoted_message_send_time: str\n    \"\"\"\u5f15\u7528\u6d88\u606f\u53d1\u9001\u65f6\u95f4\u6233\"\"\"\n\n    original_message_id: str\n    \"\"\"\u5f15\u7528\u6811\u521d\u59cb\u6d88\u606f id\uff0c\u548c quoted_message_id \u4fdd\u6301\u4e00\u81f4\u5373\u53ef\"\"\"\n\n    original_message_send_time: str\n    \"\"\"\u5f15\u7528\u6811\u521d\u59cb\u6d88\u606f\u53d1\u9001\u65f6\u95f4\u6233\uff0c\u548c quoted_message_send_time \u4fdd\u6301\u4e00\u81f4\u5373\u53ef\"\"\"", "\n\nclass MentionedInfo(TypedDict):\n    type: Literal[1, 2]  # noqa: A003\n    \"\"\"\u63d0\u53ca\u7c7b\u578b:\n    \u503c\u4e3a1: @\u5168\u5458\n    \u503c\u4e3a2: @\u90e8\u5206\u6210\u5458\"\"\"\n\n    userIdList: List[str]\n    \"\"\"\u5982\u679c\u4e0d\u662f\u63d0\u53ca\u5168\u5458\uff0c\u5e94\u8be5\u586b\u5199\u88ab\u63d0\u53ca\u7684\u7528\u6237 id \u5217\u8868\"\"\"", "\n\nclass EntityDict(TypedDict):\n    entity: Any\n    length: int\n    offset: int\n\n\n# Segment for text\n", "# Segment for text\n\n\nclass _TextEntity(_Segment):\n    type_: str\n\n    def __init__(self, **kwargs) -> None:\n        ...\n\n    def get_mention(self) -> tuple[Literal[1, 2], str] | None:\n        return None\n\n    def __init_subclass__(cls) -> None:\n        if cls.__name__ not in {\"Text\", \"Quote\"}:\n            entity_types[cls.type_] = cls\n        return super().__init_subclass__()", "\n\nclass Text(_TextEntity):\n    def __init__(self, text: str) -> None:\n        self.text = text\n\n    async def get_text(self, _: VillaBot) -> str:\n        return self.text\n\n    def __str__(self) -> str:\n        return self.text", "\n\nclass VillaRoomLink(_TextEntity):\n    type_ = \"villa_room_link\"\n\n    def __init__(self, villa_id: int, room_id: int) -> None:\n        self.villa_id = str(villa_id)\n        self.room_id = str(room_id)\n\n    async def get_text(self, bot: VillaBot) -> str:\n        room = await bot.get_room(self.villa_id, self.room_id)  # type: ignore\n        return f\"#{room.room_name}\"", "\n\nclass Link(_TextEntity):\n    type_ = \"link\"\n\n    def __init__(\n        self,\n        url: str,\n        requires_bot_access_token: bool = False,\n    ) -> None:\n        self.url = url\n        self.requires_bot_access_token = requires_bot_access_token\n\n    async def get_text(self, _: VillaBot) -> str:\n        return self.url", "\n\nclass MentionedRobot(_TextEntity):\n    type_ = \"mentioned_robot\"\n\n    def __init__(self, bot_id: str) -> None:\n        self.bot_id = bot_id\n\n    async def get_text(self, bot: VillaBot) -> str:\n        # \u76ee\u524d\u53ea\u80fd @ \u673a\u5668\u4eba\u81ea\u8eab\uff0c\u6545\u76f4\u63a5\u4ece bot \u5904\u83b7\u53d6\u540d\u79f0\n        return f\"@{bot.name}\"\n\n    def get_mention(self) -> tuple[Literal[1, 2], str] | None:\n        return 2, self.bot_id", "\n\nclass MentionedUser(_TextEntity):\n    type_ = \"mentioned_user\"\n\n    def __init__(\n        self,\n        user_id: str,\n        _villa_id: int = 0,\n    ) -> None:\n        self.user_id = user_id\n        self._villa_id = _villa_id\n\n    async def get_text(self, bot: VillaBot) -> str:\n        member = await bot.get_member(self._villa_id, int(self.user_id))\n        return f\"@{member.basic.nickname}\"\n\n    def get_mention(self) -> tuple[Literal[1, 2], str] | None:\n        return 2, self.user_id", "\n\nclass MentionedAll(_TextEntity):\n    type_ = \"mentioned_all\"\n\n    async def get_text(self, _: VillaBot) -> str:\n        return \"@\u5168\u4f53\u6210\u5458\"\n\n    def get_mention(self) -> tuple[Literal[1, 2], str] | None:\n        return 1, \"\"", "\n\nclass Quote(_TextEntity):\n    def __init__(self, message_id: str, time: int) -> None:\n        self.message_id = message_id\n        self.time = time\n\n    async def get_text(self, bot: VillaBot) -> str:\n        raise NotImplementedError\n", "\n\n# MsgContent for text\n\n\nclass TextMsgContent(MsgContent):\n    text: str\n    entities: List[EntityDict]\n    images: Optional[List[ImageMsgContent]] = None\n", "\n\nasync def text_to_content(\n    text_entities: list[_TextEntity],\n    bot: VillaBot,\n    image: list[ImageMsgContent] | None = None,\n) -> TextMsgContentInfo:\n    texts: list[str] = []\n    entities: list[EntityDict] = []\n    mentioned_info: MentionedInfo | None = None", "    entities: list[EntityDict] = []\n    mentioned_info: MentionedInfo | None = None\n    quote: QuoteInfo | None = None\n    offset = 0\n    for i, entity in enumerate(text_entities):\n        if isinstance(entity, Quote):\n            # \u5b58\u5728 Quote Entity \u8f6c\u6362\u6210 quote\n            message_id = entity.message_id\n            time = entity.time\n            quote = cast(\n                QuoteInfo,\n                {\n                    \"original_message_id\": message_id,\n                    \"original_message_send_time\": time,\n                    \"quoted_message_id\": message_id,\n                    \"quoted_message_send_time\": time,\n                },\n            )\n            continue\n        # \u975e\u6587\u5b57 entity \u5c3e\u968f\u7a7a\u683c\uff0c\u6700\u672b\u9664\u5916\n        space = \"\" if i == len(text_entities) - 1 else \" \"\n        if isinstance(entity, Text):\n            text = str(entity)\n            length = len(text)\n        else:\n            text = f\"{await entity.get_text(bot)}{space}\"\n            length = _c(text)\n            entities.append(\n                {\n                    \"entity\": {\"type\": entity.type_, **entity.__dict__},\n                    \"length\": length,\n                    \"offset\": offset,\n                },\n            )\n            if mention := entity.get_mention():\n                type_, id_ = mention\n                if mentioned_info is None:\n                    user_id_list = []\n                    mentioned_info = cast(\n                        MentionedInfo,\n                        {\"type\": type_, \"userIdList\": user_id_list},\n                    )\n                else:\n                    if mentioned_info[\"type\"] != 1:\n                        mentioned_info[\"type\"] = type_\n                    user_id_list = mentioned_info[\"userIdList\"]\n                if type_ != 1:\n                    user_id_list.append(id_)\n        offset += len(text)\n        texts.append(text)", "    return {\n        \"content\": TextMsgContent(\n            text=\"\".join(texts),\n            entities=entities,\n            images=image,\n        ),\n        \"quote\": quote,\n        \"mentionedInfo\": mentioned_info,\n    }\n", "    }\n"]}
{"filename": "hertavilla/message/chain.py", "chunked_list": ["from __future__ import annotations\n\nfrom copy import deepcopy\nimport logging\nimport sys\nfrom typing import TYPE_CHECKING, Iterable, List\n\nfrom hertavilla.message.image import (\n    Image,\n    ImageMsgContentInfo,", "    Image,\n    ImageMsgContentInfo,\n    image_to_content,\n)\nfrom hertavilla.message.internal import MsgContentInfo, _Segment\nfrom hertavilla.message.post import Post, post_to_content\nfrom hertavilla.message.text import Text, text_to_content\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot", "if TYPE_CHECKING:\n    from hertavilla.bot import VillaBot\n\nif sys.version_info >= (3, 11):\n    from typing import Self\nelse:\n    from typing_extensions import Self\n\nlogger = logging.getLogger(\"hertavilla.message\")\n", "logger = logging.getLogger(\"hertavilla.message\")\n\n\nclass MessageChain(List[_Segment]):\n    def __init__(\n        self,\n        message: str | _Segment | Iterable[_Segment] | None = None,\n    ) -> None:\n        super().__init__()\n        if message is None:\n            return\n        if isinstance(message, (_Segment, str)):\n            self.append(message)\n        else:\n            self.extend(message)\n\n    def append(self, __object: str | _Segment) -> None:\n        if isinstance(__object, str):\n            __object = Text(__object)\n        super().append(__object)\n\n    def copy(self) -> Self:\n        return deepcopy(self)\n\n    def __add__(self, other: str | _Segment | Iterable[_Segment]) -> Self:\n        result = self.copy()\n        result += other\n        return result\n\n    def __radd__(self, other: str | _Segment | Iterable[_Segment]) -> Self:\n        result = self.__class__(other)\n        return result + self\n\n    def __iadd__(self, other: str | _Segment | Iterable[_Segment]) -> Self:\n        if isinstance(other, str):\n            self.append(Text(other))\n        elif isinstance(other, _Segment):\n            self.append(other)\n        elif isinstance(other, Iterable):\n            self.extend(other)\n        else:\n            raise TypeError(f\"Unsupported type {type(other)!r}\")\n        return self\n\n    def extend(self, obj: Iterable[_Segment]) -> Self:\n        for segment in obj:\n            self.append(segment)\n        return self\n\n    async def to_content_json(\n        self,\n        bot: VillaBot,\n    ) -> tuple[MsgContentInfo, str]:\n        text_entities = []\n        image = []\n        posts = []\n\n        for segment in self:\n            if isinstance(segment, Image):\n                image.append(image_to_content(segment))\n            elif isinstance(segment, Post):\n                posts.append(post_to_content(segment))\n            else:\n                text_entities.append(segment)\n\n        if not text_entities:\n            if image:\n                if posts:\n                    logger.warn(\n                        \"Both Image and Post in the message is not allowed, \"\n                        \"Image has been selected\",\n                    )\n                if len(image) <= 1:\n                    return ImageMsgContentInfo(content=image[0]), \"MHY:Image\"\n                logger.warn(\n                    \"Multiple images will be sent using MHY:Text, \"\n                    \"which will cause the \"\n                    \"images to not be displayed on the web side\",\n                )\n                logger.warn(\n                    \"Recommend to send the images using multiple times\",\n                )\n                return (\n                    await text_to_content([Text(\"\\u200B\")], bot, image),\n                    \"MHY:Text\",\n                )\n            if posts:\n                if len(posts) > 1:\n                    logger.warn(\n                        \"Only support one post in one message, \"\n                        \"so use the last one\",\n                    )\n                return posts[-1], \"MHY:Post\"\n            raise ValueError(\"Message is empty\")\n        if image:\n            logger.warn(\n                \"When the image and text exist at the same time, \"\n                \"the message will be sent as MHY:Text, \"\n                \"and the image will not be displayed on the web side\",\n            )\n        if posts:\n            logger.warn(\n                \"When post and text are present at the same time, \"\n                \"the post will not be displayed\",\n            )\n        return await text_to_content(text_entities, bot, image), \"MHY:Text\"\n\n    async def get_text(\n        self,\n        bot: \"VillaBot\",\n    ) -> str:\n        \"\"\"\u83b7\u53d6\u6587\u672c\uff08\u6bcf\u6bb5\u6d88\u606f\u7684\u6587\u672c\u5f62\u5f0f\uff09\u3002\n        \u9700\u8981\u6ce8\u610f\u6b64\u51fd\u6570\u4e0e plaintext \u4e0d\u540c\u3002\n\n        Args:\n            bot (VillaBot): \u5927\u522b\u91ce Bot\n\n        Returns:\n            str: \u6587\u672c\u5185\u5bb9\n        \"\"\"\n        texts: list[str] = []\n        for i, x in enumerate(self):\n            space = \"\" if i == len(self) - 1 else \" \"\n            text = await x.get_text(bot)\n            if not isinstance(x, (Text, Image, Post)):\n                text += space\n            texts.append(text)\n        return \"\".join(texts)\n\n    @property\n    def plaintext(self) -> str:\n        \"\"\"\u83b7\u53d6\u7eaf\u6587\u672c\u3002\n        \u9700\u8981\u6ce8\u610f\u6b64\u5c5e\u6027\u4e0e get_text() \u4e0d\u540c\u3002\n\n        Returns:\n            str: \u7eaf\u6587\u672c\u5185\u5bb9\n        \"\"\"\n        return \"\".join(map(str, filter(lambda x: isinstance(x, Text), self)))\n\n    def __str__(self) -> str:\n        return self.plaintext", ""]}
{"filename": "hertavilla/message/post.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nfrom hertavilla.message.internal import (\n    MsgContent,\n    MsgContentInfo,\n    _Segment,\n)\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot", ")\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot\n\n\n# MsgContentInfo for post\nclass PostMsgContentInfo(MsgContentInfo):\n    content: PostMsgContent\n", "\n\n# Segment for post\n\n\nclass Post(_Segment):\n    def __init__(self, post_id: str) -> None:\n        self.post_id = post_id\n\n    async def get_text(self, _: VillaBot) -> str:\n        # TODO: \u5e16\u5b50\u540d\n        # \u7c73\u6e38\u793e\u7684 API \u53ef\u4ee5\u83b7\u53d6\u5230\uff0c\u4f46\u662f\u9700\u8981 DS\n        # \u611f\u89c9\u52a0\u5230\u8fd9\u91cc\u6709\u70b9\u81c3\u80bf\u4e86\n        #\n        # https://bbs-api.miyoushe.com/post/wapi/semPosts?gids=6&post_id={}\n        return \"[\u5e16\u5b50]\"", "\n\n# MsgContent for post\nclass PostMsgContent(MsgContent):\n    post_id: str\n\n\ndef post_to_content(post: Post) -> PostMsgContentInfo:\n    return {\"content\": PostMsgContent(post_id=post.post_id)}\n", ""]}
{"filename": "hertavilla/message/__init__.py", "chunked_list": ["from __future__ import annotations\n\nfrom .chain import MessageChain as MessageChain\nfrom .image import Image as Image\nfrom .post import Post as Post\nfrom .text import (\n    Link as Link,\n    MentionedAll as MentionedAll,\n    MentionedRobot as MentionedRobot,\n    MentionedUser as MentionedUser,", "    MentionedRobot as MentionedRobot,\n    MentionedUser as MentionedUser,\n    Quote as Quote,\n    VillaRoomLink as VillaRoomLink,\n)\n"]}
{"filename": "hertavilla/message/image.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Optional, cast\n\nfrom hertavilla.message.internal import MsgContent, MsgContentInfo, _Segment\nfrom hertavilla.typing import TypedDict\n\nif TYPE_CHECKING:\n    from hertavilla.bot import VillaBot\n", "\n\n# MsgContentInfo for image\nclass ImageMsgContentInfo(MsgContentInfo):\n    content: ImageMsgContent\n\n\n# Segment for image\nclass Size(TypedDict):\n    width: int\n    height: int", "class Size(TypedDict):\n    width: int\n    height: int\n\n\nclass Image(_Segment):\n    def __init__(\n        self,\n        url: str,\n        width: int | None = None,\n        height: int | None = None,\n        file_size: int | None = None,\n    ) -> None:\n        if width is None and height is None:\n            self.size = None\n        elif width and height:\n            self.size = {\"width\": width, \"height\": height}\n        else:\n            raise ValueError(\n                \"Parameter width and height are not both None or int\",\n            )\n        self.url = url\n        self.file_size = file_size\n\n    async def get_text(self, _: VillaBot) -> str:\n        return \"[\u56fe\u7247]\"", "\n\n# MsgContent for image\nclass ImageMsgContent(MsgContent):\n    url: str\n    size: Optional[Size] = None\n    file_size: Optional[int] = None\n\n\ndef image_to_content(image: Image) -> ImageMsgContent:\n    return ImageMsgContent(\n        url=image.url,\n        size=cast(Optional[Size], image.size),\n        file_size=image.file_size,\n    )", "\ndef image_to_content(image: Image) -> ImageMsgContent:\n    return ImageMsgContent(\n        url=image.url,\n        size=cast(Optional[Size], image.size),\n        file_size=image.file_size,\n    )\n"]}
{"filename": "hertavilla/server/_lifespan.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import Any, Awaitable, Callable\n\nL_FUNC = Callable[[], Awaitable[Any]]\n\n\nclass LifespanManager:\n    def __init__(self) -> None:\n        self._startup_funcs: list[L_FUNC] = []\n        self._shutdown_funcs: list[L_FUNC] = []\n\n    def on_startup(self, func: L_FUNC) -> L_FUNC:\n        self._startup_funcs.append(func)\n        return func\n\n    def on_shutdown(self, func: L_FUNC) -> L_FUNC:\n        self._shutdown_funcs.append(func)\n        return func\n\n    async def startup(self) -> None:\n        if self._startup_funcs:\n            for func in self._startup_funcs:\n                await func()\n\n    async def shutdown(self) -> None:\n        if self._shutdown_funcs:\n            for func in self._shutdown_funcs:\n                await func()", ""]}
{"filename": "hertavilla/server/aiohttp.py", "chunked_list": ["from __future__ import annotations\n\nimport functools\nfrom typing import Any\n\nfrom hertavilla.bot import VillaBot\nfrom hertavilla.server.internal import BaseBackend\n\nfrom ._lifespan import L_FUNC, LifespanManager\n", "from ._lifespan import L_FUNC, LifespanManager\n\nfrom aiohttp import web\n\n\nclass AIOHTTPBackend(BaseBackend):\n    def __init__(self, host: str = \"0.0.0.0\", port: int = 8080, **kwargs: Any):\n        super().__init__(host, port, **kwargs)\n        self._app = web.Application()\n        self._lifespan_manager = LifespanManager()\n\n    @property\n    def app(self) -> web.Application:\n        return self._app\n\n    @property\n    def name(self) -> str:\n        return \"AIOHTTP\"\n\n    async def _run_startup(self, _: web.Application):\n        await self._lifespan_manager.startup()\n\n    async def _run_shutdown(self, _: web.Application):\n        await self._lifespan_manager.shutdown()\n\n    def run(\n        self,\n        *bots_: VillaBot,\n        host: str | None = None,\n        port: int | None = None,\n    ):\n        async def http_handle(request: web.Request):\n            resp = await self._run_handles(\n                request.headers.get(\"x-rpc-bot_sign\"),\n                (await request.text()).strip(),\n            )\n            return web.json_response(\n                {\"retcode\": resp.retcode, \"message\": resp.message},\n                status=resp.status_code,\n            )\n\n        self._register_bots(\n            bots_,\n            functools.partial(\n                self.app.router.add_post,\n                handler=http_handle,\n            ),\n        )\n        self.app.on_startup.append(self._run_startup)\n        self.app.on_cleanup.append(self._run_shutdown)\n        web.run_app(\n            self.app,\n            host=host or self.host,\n            port=port or self.port,\n            print=self.logger.info,\n        )\n\n    def on_startup(self, func: L_FUNC):\n        self._lifespan_manager.on_startup(func)\n\n    def on_shutdown(self, func: L_FUNC):\n        self._lifespan_manager.on_shutdown(func)", ""]}
{"filename": "hertavilla/server/internal.py", "chunked_list": ["from __future__ import annotations\n\nimport abc\nimport asyncio\nfrom dataclasses import dataclass\nimport json\nimport logging\nfrom typing import Any, Callable, Sequence\n\nfrom hertavilla.bot import VillaBot", "\nfrom hertavilla.bot import VillaBot\nfrom hertavilla.event import parse_event\n\nfrom ._lifespan import L_FUNC\n\nbackground_tasks = set()\n\n\n@dataclass\nclass ResponseData:\n    status_code: int = 200\n    retcode: int = 0\n    message: str = \"\"", "\n@dataclass\nclass ResponseData:\n    status_code: int = 200\n    retcode: int = 0\n    message: str = \"\"\n\n\nINVALID_EVENT = ResponseData(400, -1, \"event body is invalid\")\nVERIFY_FAILED = ResponseData(401, -2, \"verify failed\")", "INVALID_EVENT = ResponseData(400, -1, \"event body is invalid\")\nVERIFY_FAILED = ResponseData(401, -2, \"verify failed\")\nNO_BOT = ResponseData(404, 1, \"no bot with this id\")\n\n\nclass BaseBackend(abc.ABC):\n    def __init__(self, host: str = \"0.0.0.0\", port: int = 8080, **kwargs: Any):\n        self.host = host\n        self.port = port\n        self.backend_extra_config = kwargs\n        self.bots: dict[str, VillaBot] = {}\n        self.logger = logging.getLogger(\n            f\"hertavilla.backend.{self.name.lower()}\",\n        )\n\n    @abc.abstractproperty\n    def name(self) -> str:\n        raise NotImplementedError\n\n    @abc.abstractproperty\n    def app(self) -> Any:\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def run(\n        self,\n        *bots_: VillaBot,\n        host: str | None = None,\n        port: int | None = None,\n    ):\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def on_startup(self, func: L_FUNC):\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def on_shutdown(self, func: L_FUNC):\n        raise NotImplementedError\n\n    def _register_bots(\n        self,\n        bots: Sequence[VillaBot],\n        add_router_callback: Callable[[str], Any],\n    ) -> None:\n        for bot in bots:\n            self.bots[bot.bot_id] = bot\n            endpoint = bot.callback_endpoint\n            add_router_callback(endpoint)\n            self.logger.info(\n                f\"Register endpoint {endpoint} for bot {bot.bot_id}\",\n            )\n\n    async def _run_handles(\n        self,\n        sign: str | None,\n        body: str,\n    ) -> ResponseData:\n        payload = json.loads(body)\n        if not (event_payload := payload.get(\"event\")):\n            self.logger.warning(\"Event is invalid\")\n            return INVALID_EVENT\n        try:\n            event = parse_event(event_payload)\n        except ValueError:\n            self.logger.warning(\"Event is invalid\")\n            return INVALID_EVENT\n\n        if bot := self.bots.get(event.robot.template.id):\n            if sign is None or not bot.verify(sign, body):\n                logging.warn(\"Event verify check is failed. Reject handling.\")\n                return VERIFY_FAILED\n\n            self.logger.info(\n                (\n                    f\"[RECV] {event.__class__.__name__} \"\n                    f\"on bot {event.robot.template.name}\"\n                    f\"({event.robot.template.id}) \"\n                    f\"in villa {event.robot.villa_id}\"\n                ),\n            )\n            if bot._bot_info is None:  # noqa: SLF001\n                bot.bot_info = event.robot.template\n            task = asyncio.create_task(bot.handle_event(event))\n            background_tasks.add(task)\n            task.add_done_callback(background_tasks.discard)\n            return ResponseData()\n        self.logger.warning(\n            f\"Received event but no bot with id {event.robot.template.id}\",\n        )\n        return NO_BOT", ""]}
{"filename": "hertavilla/server/__init__.py", "chunked_list": ["from __future__ import annotations\n\nfrom typing import Any\n\nfrom hertavilla.bot import VillaBot\nfrom hertavilla.server.aiohttp import AIOHTTPBackend\nfrom hertavilla.server.internal import BaseBackend\n\nDEFAULT_BACKEND = AIOHTTPBackend\n_backend: BaseBackend | None = None", "DEFAULT_BACKEND = AIOHTTPBackend\n_backend: BaseBackend | None = None\n\n\ndef run(\n    *bots_: VillaBot,\n    host: str = \"0.0.0.0\",\n    port: int = 8080,\n    **kwargs: Any,\n):\n    backend = get_backend()\n    backend.run(*bots_, host=host, port=port, **kwargs)", "\n\ndef init_backend(\n    backend_class: type[BaseBackend] = DEFAULT_BACKEND,\n    host: str = \"0.0.0.0\",\n    port: int = 8080,\n) -> None:\n    global _backend  # noqa: PLW0603\n    if _backend is not None:\n        raise RuntimeError(\n            \"Backend has already been initialized\",\n        )\n    _backend = backend_class(host, port)", "\n\ndef get_backend() -> BaseBackend:\n    if _backend is None:\n        raise RuntimeError(\"Backend isn't initialized\")\n    return _backend\n"]}
{"filename": "hertavilla/server/fastapi.py", "chunked_list": ["from __future__ import annotations\n\nfrom contextlib import asynccontextmanager\nimport functools\nfrom typing import Any\n\nfrom hertavilla.bot import VillaBot\nfrom hertavilla.server.internal import BaseBackend\n\nfrom ._lifespan import L_FUNC, LifespanManager", "\nfrom ._lifespan import L_FUNC, LifespanManager\n\ntry:\n    from fastapi import FastAPI, Request\n    from fastapi.responses import JSONResponse\n    import uvicorn\nexcept ImportError as e:\n    raise ImportError(\n        \"FastAPI Backend isn't installed. Please install extra `fastapi`\",\n    ) from e", "\n\nclass FastAPIBackend(BaseBackend):\n    def __init__(self, host: str = \"0.0.0.0\", port: int = 8080, **kwargs: Any):\n        super().__init__(host, port, **kwargs)\n        self._lifespan_manager = LifespanManager()\n        self._app = FastAPI(\n            lifespan=self.lifespan,\n            openapi_url=None,\n            docs_url=None,\n            include_in_schema=False,\n            redoc_url=None,\n        )\n\n    @property\n    def app(self) -> FastAPI:\n        return self._app\n\n    @property\n    def name(self) -> str:\n        return \"FastAPI\"\n\n    @asynccontextmanager\n    async def lifespan(self, _: FastAPI):\n        await self._lifespan_manager.startup()\n        try:\n            yield\n        finally:\n            await self._lifespan_manager.shutdown()\n\n    def run(\n        self,\n        *bots_: VillaBot,\n        host: str | None = None,\n        port: int | None = None,\n    ):\n        async def http_handle(request: Request) -> JSONResponse:\n            resp = await self._run_handles(\n                request.headers.get(\"x-rpc-bot_sign\"),\n                (await request.body()).decode().strip(),\n            )\n            return JSONResponse(\n                {\"retcode\": resp.retcode, \"message\": resp.message},\n                status_code=resp.status_code,\n            )\n\n        self._register_bots(\n            bots_,\n            functools.partial(\n                self.app.add_api_route,\n                endpoint=http_handle,\n                methods=[\"POST\"],\n            ),\n        )\n        uvicorn.run(\n            self.app,\n            host=host or self.host,\n            port=port or self.port,\n            log_config=None,\n        )\n\n    def on_startup(self, func: L_FUNC):\n        self._lifespan_manager.on_startup(func)\n\n    def on_shutdown(self, func: L_FUNC):\n        self._lifespan_manager.on_shutdown(func)", ""]}
{"filename": "tests/test_utils.py", "chunked_list": ["# ruff: noqa: PLR2004\nfrom __future__ import annotations\n\n\ndef test_utf16_cal():\n    from hertavilla.utils import _c, _rc\n\n    assert _c(\"\u4f60\u597d\") == 2\n    assert _c(\"\ud83d\ude0a\") == 2\n\n    assert _rc(2) == 6", "\n\ndef test_msg_encoder():\n    import json\n\n    from hertavilla.message.internal import MsgContent\n    from hertavilla.utils import MsgEncoder\n\n    class TestMsgContent(MsgContent):\n        test: int = 1\n        _private: int = 0\n\n    assert json.loads(json.dumps(TestMsgContent(), cls=MsgEncoder)) == {\n        \"test\": 1,\n    }", ""]}
{"filename": "examples/message_segments.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla import (\n    Image,\n    Link,\n    MentionedAll,\n    MentionedRobot,\n    MentionedUser,\n    MessageChain,\n    Post,", "    MessageChain,\n    Post,\n    SendMessageEvent,\n    VillaBot,\n    VillaRoomLink,\n    run,\n)\nfrom hertavilla.message.text import Text\nfrom hertavilla.server import init_backend\n", "from hertavilla.server import init_backend\n\nbot = VillaBot(\n    \"bot_id\",\n    \"bot_secret\",\n    \"/\",\n    \"pub_key\",\n)\n\n", "\n\n@bot.listen(SendMessageEvent)  # \u6ce8\u518c\u4e00\u4e2a\u6d88\u606f\u5339\u914d\u5668\nasync def _(event: SendMessageEvent, bot: VillaBot):\n    # \u6d88\u606f\u94fe\n    # \u9700\u8981\u901a\u8fc7\u5bf9\u8fd9\u4e2a\u94fe\u62fc\u63a5\u6784\u6210\u6d88\u606f\n    chain = MessageChain()\n\n    # Text: \u6587\u5b57\u7c7b\u578b\n    # https://webstatic.mihoyo.com/vila/bot/doc/message_api/msg_define/text_msg_content.html#textentity", "    # Text: \u6587\u5b57\u7c7b\u578b\n    # https://webstatic.mihoyo.com/vila/bot/doc/message_api/msg_define/text_msg_content.html#textentity\n    # \u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0 str\uff0cSDK \u4f1a\u81ea\u52a8\u8f6c\u6210 Text\n    # \u4ee5\u4e0b\u4e24\u884c\u4ee3\u7801\u7b49\u4ef7\n    chain.append(\"hello\")\n    chain.append(Text(\"hello\"))\n\n    # Mention*: \u63d0\u53ca\u7c7b\u578b\n\n    # @\u6307\u5b9a\u6210\u5458", "\n    # @\u6307\u5b9a\u6210\u5458\n    # \u6ce8\u610f\u9700\u8981\u586b\u5199\u5927\u522b\u91ce ID\n    chain.append(MentionedUser(str(event.from_user_id), event.villa_id))\n    # @\u5168\u4f53\u6210\u5458\n    chain.append(MentionedAll())\n    # @\u673a\u5668\u4eba\uff08\u76ee\u524d\u53ea\u80fd@\u81ea\u8eab\uff09\n    chain.append(MentionedRobot(bot.bot_id))\n\n    # VillaRoomLink: \u94fe\u63a5\u623f\u95f4\uff08#\u623f\u95f4\uff09", "\n    # VillaRoomLink: \u94fe\u63a5\u623f\u95f4\uff08#\u623f\u95f4\uff09\n    chain.append(VillaRoomLink(event.villa_id, event.room_id))\n\n    # Link: \u94fe\u63a5\n    chain.append(Link(\"https://www.miyoushe.com/\"))\n\n    # Image: \u56fe\u7247\n    # https://webstatic.mihoyo.com/vila/bot/doc/message_api/msg_define/img_msg_content.html\n    chain.append(Image(url=\"\"))", "    # https://webstatic.mihoyo.com/vila/bot/doc/message_api/msg_define/img_msg_content.html\n    chain.append(Image(url=\"\"))\n\n    # Post: \u5e16\u5b50\u8f6c\u53d1\n    # https://webstatic.mihoyo.com/vila/bot/doc/message_api/msg_define/post_msg_content.html\n    chain.append(\n        Post(\"40569017\"),\n    )  # https://www.miyoushe.com/sr/article/40569017\n\n    # \u8bf7\u6ce8\u610f", "\n    # \u8bf7\u6ce8\u610f\n    # Post:\n    #   \u5982\u679c\u5b58\u5728\u591a\u4e2a Post\uff0cSDK \u4f1a\u9009\u62e9\u6700\u540e\u4e00\u4e2a Post \u53d1\u9001\n    #   \u5982\u679c\u5b58\u5728 Text\uff0cSDK \u4e0d\u4f1a\u53d1\u9001 Post\n    # Image:\n    #   \u5982\u679c\u5b58\u5728 Text\uff0c\u5219\u5c06\u4f7f\u7528 MHY:Text \u53d1\u9001\uff0cWeb \u7aef\u65e0\u6cd5\u67e5\u770b\u56fe\u7247\uff08\u4e0d\u53d7\u652f\u6301\uff09\n    #   \u5982\u679c\u5b58\u5728\u591a\u5f20\u56fe\u7247\uff0c\u5219\u5c06\u4f7f\u7528 MHY:Text \u53d1\u9001\uff0cWeb \u7aef\u65e0\u6cd5\u67e5\u770b\uff08\u4e0d\u53d7\u652f\u6301\uff09\n\n", "\n\ninit_backend()\nrun(bot)\n"]}
{"filename": "examples/event_handle.py", "chunked_list": ["from __future__ import annotations\n\nfrom hertavilla import Event, SendMessageEvent, VillaBot, run\nfrom hertavilla.match import MatchResult, Regex\nfrom hertavilla.server import init_backend\n\nbot = VillaBot(\n    \"bot_id\",\n    \"bot_secret\",\n    \"/\",", "    \"bot_secret\",\n    \"/\",\n    \"pub_key\",\n)\n\n\n# bot.listen \u88c5\u9970\u5668\u7528\u6765\u76d1\u542c\u6307\u5b9a\u7c7b\u578b\u7684\u4e8b\u4ef6\n@bot.listen(Event)\nasync def _(event: Event, bot: VillaBot):\n    ...", "async def _(event: Event, bot: VillaBot):\n    ...\n\n\n# \u624b\u52a8\u6ce8\u518c\uff08\u4e0d\u5efa\u8bae\uff09\nasync def handler(event: Event, bot: VillaBot):\n    ...\n\n\nbot.register_handler(Event, handler)", "\nbot.register_handler(Event, handler)\n\n\n# @bot.regex(\"a|b|c\")  # \u6b63\u5219\u5339\u914d -- RegexResult\n# @bot.startswith(\"/\")  # \u524d\u7f00\u5339\u914d -- StartswithResult\n# @bot.endswith(\".\")  # \u540e\u7f00\u5339\u914d -- EndswithResult\n# @bot.keyword(\"a\", \"b\")  # \u5173\u952e\u8bcd\u5339\u914d -- KeywordsResult\n\n", "\n\n# bot.match \u4f1a\u8981\u6c42\u586b\u5165\u4e00\u4e2a Match \u8fdb\u884c\u5339\u914d\n# \u4e0a\u9762\u7684\u56db\u4e2a\u65b9\u6cd5\u5206\u522b\u662f Regex\u3001Startswith\u3001Endswith\u3001Keywords \u7684\u8bed\u6cd5\u7cd6\n@bot.match(Regex(\"a|b|c\"))  # \u7b49\u4ef7\u4e8e @bot.regex(\"a|b|c\")\nasync def _(event: SendMessageEvent, bot: VillaBot, match_result: MatchResult):\n    # match_result \u53c2\u6570\u7528\u4e8e\u83b7\u53d6\u4ece\u5339\u914d\u5668\u83b7\u5f97\u7684\u5339\u914d\u4fe1\u606f\n    ...\n\n", "\n\ninit_backend()\nrun(bot)\n"]}
