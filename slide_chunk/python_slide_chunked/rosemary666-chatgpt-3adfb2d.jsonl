{"filename": "doc/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/setup.py", "chunked_list": ["from __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport setuptools\nfrom setuptools import find_packages\nimport os\n\ndef _process_requirements():\n    packages = open('requirements.txt').read().strip().split('\\n')\n    requires = []\n    for pkg in packages:\n        if pkg.startswith('git+ssh'):\n            return_code = os.system('pip install {}'.format(pkg))\n            assert return_code == 0, 'error, status_code is: {}, exit!'.format(return_code)\n        else:\n            requires.append(pkg)\n    return requires", "def _process_requirements():\n    packages = open('requirements.txt').read().strip().split('\\n')\n    requires = []\n    for pkg in packages:\n        if pkg.startswith('git+ssh'):\n            return_code = os.system('pip install {}'.format(pkg))\n            assert return_code == 0, 'error, status_code is: {}, exit!'.format(return_code)\n        else:\n            requires.append(pkg)\n    return requires", "\nwith open(\"../README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"py-chatgpt-plus\",\n    version=\"0.2.0\",\n    author=\"rosemary666\",\n    author_email=\"\",\n    description=\"Python chatgpt api\",", "    author_email=\"\",\n    description=\"Python chatgpt api\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/rosemary666/chatgpt\",\n    packages=[\n        package for package in find_packages()\n        if package.startswith('py_chatgpt_plus')\n    ],\n    install_requires=_process_requirements(),", "    ],\n    install_requires=_process_requirements(),\n    setup_requires=[],\n    license=\"Apache License 2.0\",\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",", "        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",", "        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    python_requires='>=3.7',\n)\n"]}
{"filename": "python/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/main.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom py_chatgpt_plus.routes import main\n\nif __name__ == '__main__':\n    main()", "if __name__ == '__main__':\n    main()\n\n\n\n"]}
{"filename": "python/py_chatgpt_plus/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/utils/base_utils.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\ndef Singleton(cls):\n    _instance = {}\n\n    def _singleton(*args, **kargs):\n        if cls not in _instance:\n            _instance[cls] = cls(*args, **kargs)\n        return _instance[cls]\n\n    return _singleton"]}
{"filename": "python/py_chatgpt_plus/utils/conf.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom typing import Any\nimport os\n\nimport yaml", "\nimport yaml\n\nfrom py_chatgpt_plus.utils.base_utils import Singleton\n\ndef read_yaml(path: str) -> Any:\n    with open(path, \"rb\") as f:\n        cf = f.read()\n    cf = yaml.load(cf, Loader=yaml.SafeLoader)\n    return cf", "\n@Singleton\nclass ConfParse(object):\n    def __init__(self):\n        self._local_ip: str = \"0.0.0.1\"\n        self._local_port: int = 32675\n        self._chatgpt_api_key: str = None\n        self._chatgpt_proxy: str = None\n        self._log_file: str = None\n\n    def __call__(self, path: str):\n        cf = read_yaml(path)\n        server_conf = cf.get(\"server\")\n        chatgpt_conf = cf.get(\"chatgpt\")\n        log_conf = cf.get(\"log\")\n        self._local_ip = server_conf.get(\"ip\", \"0.0.0.0\")\n        self._local_port = server_conf.get(\"port\", 32675)\n        self._chatgpt_api_key = chatgpt_conf.get(\"api_key\", \"\")\n        self._chatgpt_proxy = chatgpt_conf.get(\"proxy\", \"\")\n        self._log_file = log_conf.get(\"log_file\", \"service.log\")\n        self._log_level = log_conf.get(\"level\", \"DEBUG\")\n\n    @property\n    def local_ip(self) -> str:\n        return self._local_ip\n\n    @property\n    def local_port(self) -> int:\n        return self._local_port\n\n    @property\n    def chatgpt_api_key(self) -> str:\n        return self._chatgpt_api_key\n\n    @property\n    def chatgpt_proxy(self) -> str:\n        return self._chatgpt_proxy\n\n    @property\n    def log_file(self) -> str:\n        return self._log_file\n\n    @property\n    def log_level(self) -> str:\n        return self._log_level", "\n\nconf_inst = ConfParse()\nconf_inst(\n    path=os.getenv(\"SERVICE_C0NF\", default=\"../conf/service.yaml\")\n)"]}
{"filename": "python/py_chatgpt_plus/utils/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/utils/http_call.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nimport requests\nfrom typing import Any, Optional, Generator\n\n\nclass HttpCall(object):\n    def __init__(self, proxy_addr: str):\n        self._session = requests.Session()\n        if proxy_addr is not None or not proxy_addr:\n            self._session.proxies.update({\n                \"http\": proxy_addr,\n                \"https\": proxy_addr,\n            })\n\n    def post_once(self, url: str,\n                  header: dict = {\"Content-Type\": \"application/json\"},\n                  json: Optional[Any] = None,\n                  data=None,\n                  files=None):\n        \"\"\"\n        Non-streaming post interface.\n        \"\"\"\n        if json is not None:\n            header[\"Content-Type\"] = \"application/json\"\n        rsp = self._session.post(\n            url=url,\n            headers=header,\n            data=data,\n            json=json,\n            files=files,\n            stream=False,\n        )\n        rsp.raise_for_status()\n        return rsp.json()\n\n    def post_stream(self, url: str,\n                    header: dict = {\"Content-Type\": \"application/json\"},\n                    json: Optional[Any] = None,\n                    data=None,\n                    files=None) -> Generator:\n        \"\"\"\n        Streaming post interface\n        \"\"\"\n        if json is not None:\n            header[\"Content-Type\"] = \"application/json\"\n        rsp = self._session.post(\n            url=url,\n            headers=header,\n            data=data,\n            files=files,\n            json=json,\n            stream=True,\n        )\n        rsp.raise_for_status()\n        for line in rsp.iter_lines():\n            if not line:\n                continue\n            yield line", "\n\nclass HttpCall(object):\n    def __init__(self, proxy_addr: str):\n        self._session = requests.Session()\n        if proxy_addr is not None or not proxy_addr:\n            self._session.proxies.update({\n                \"http\": proxy_addr,\n                \"https\": proxy_addr,\n            })\n\n    def post_once(self, url: str,\n                  header: dict = {\"Content-Type\": \"application/json\"},\n                  json: Optional[Any] = None,\n                  data=None,\n                  files=None):\n        \"\"\"\n        Non-streaming post interface.\n        \"\"\"\n        if json is not None:\n            header[\"Content-Type\"] = \"application/json\"\n        rsp = self._session.post(\n            url=url,\n            headers=header,\n            data=data,\n            json=json,\n            files=files,\n            stream=False,\n        )\n        rsp.raise_for_status()\n        return rsp.json()\n\n    def post_stream(self, url: str,\n                    header: dict = {\"Content-Type\": \"application/json\"},\n                    json: Optional[Any] = None,\n                    data=None,\n                    files=None) -> Generator:\n        \"\"\"\n        Streaming post interface\n        \"\"\"\n        if json is not None:\n            header[\"Content-Type\"] = \"application/json\"\n        rsp = self._session.post(\n            url=url,\n            headers=header,\n            data=data,\n            files=files,\n            json=json,\n            stream=True,\n        )\n        rsp.raise_for_status()\n        for line in rsp.iter_lines():\n            if not line:\n                continue\n            yield line", ""]}
{"filename": "python/py_chatgpt_plus/core/chat_base.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom abc import ABC, abstractmethod\nfrom typing import Generator\n\n\nclass ChatAbc(ABC):\n    \"\"\"\n    The chat abstract class encapsulated by calling the chatGpt interface.\n    \"\"\"\n    @abstractmethod\n    def chat_once(self, prompt: str) -> str:\n        \"\"\"\n        Return results all at once, non-streaming return.\n        Args:\n            prompt(str): Typed prompt.\n\n        Returns:\n            str: The reply.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def chat_stream(self, prompt: str) -> Generator:\n        \"\"\"\n        Return result by stream.\n        Args:\n            prompt(str): Typed prompt.\n\n        Returns:\n            The reply stream.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def save_conversations(self, file_path: str):\n        \"\"\"\n        Save the conversations to a specified file.\n        Args:\n            file_path(str): The path of file.\n\n        Returns:\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def load_conversations(self, file_path: str):\n        \"\"\"\n        Load the conversations from a specified file.\n        Returns:\n\n        \"\"\"\n        pass", "\n\nclass ChatAbc(ABC):\n    \"\"\"\n    The chat abstract class encapsulated by calling the chatGpt interface.\n    \"\"\"\n    @abstractmethod\n    def chat_once(self, prompt: str) -> str:\n        \"\"\"\n        Return results all at once, non-streaming return.\n        Args:\n            prompt(str): Typed prompt.\n\n        Returns:\n            str: The reply.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def chat_stream(self, prompt: str) -> Generator:\n        \"\"\"\n        Return result by stream.\n        Args:\n            prompt(str): Typed prompt.\n\n        Returns:\n            The reply stream.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def save_conversations(self, file_path: str):\n        \"\"\"\n        Save the conversations to a specified file.\n        Args:\n            file_path(str): The path of file.\n\n        Returns:\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def load_conversations(self, file_path: str):\n        \"\"\"\n        Load the conversations from a specified file.\n        Returns:\n\n        \"\"\"\n        pass", ""]}
{"filename": "python/py_chatgpt_plus/core/image_gpt.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom typing import List\nimport base64\n\nfrom py_chatgpt_plus.utils.http_call import HttpCall", "\nfrom py_chatgpt_plus.utils.http_call import HttpCall\n\n\nclass ImageGpt(object):\n    _image_gpt_url = \"https://api.openai.com/v1/images/generations\"\n    _image_variations_url = \"https://api.openai.com/v1/images/variations\"\n\n    def __init__(self,\n                 api_key: str,\n                 proxy_address: str = None,\n                 ):\n        \"\"\"\n        Creates an image given a prompt\n        Args:\n            api_key(str): The chatGpt api key, please refer https://platform.openai.com/account/api-keys.\n            proxy_address(str): The address of proxy.\n        \"\"\"\n        self._api_key = api_key\n        self._proxy_address = proxy_address\n        self._http_call = HttpCall(proxy_addr=proxy_address)\n\n    def generate_url(self, prompt: str,\n                     n: int = 1,\n                     size: str = \"1024x1024\") -> List[str]:\n        \"\"\"\n        Generate Image url.\n        Args:\n            prompt(str): Type prompt.\n            n(int): The number of images to generate. Must be between 1 and 10.\n            size(str): The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.\n        Returns:\n            List[str]: The list of generate image url.\n        \"\"\"\n        content = self._http_call.post_once(\n            url=self._image_gpt_url,\n            header={\n                \"Authorization\": f\"Bearer {self._api_key}\"\n            },\n            json={\n                \"prompt\": prompt,\n                \"n\": n,\n                \"size\": size,\n                \"response_format\": \"url\",\n            }\n        )\n        urls = []\n        for d in content[\"data\"]:\n            urls.append(d[\"url\"])\n        return urls\n\n    def generate_content(self, prompt: str,\n                         n: int = 1,\n                         size: str = \"1024x1024\") -> List[bytes]:\n        \"\"\"\n        Generate Image content, can be save to a file.\n        Args:\n            prompt(str): Type prompt.\n            n(int): The number of images to generate. Must be between 1 and 10.\n            size(str): The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.\n        Returns:\n            List[str]: The list of generate image content.\n        \"\"\"\n        content = self._http_call.post_once(\n            url=self._image_gpt_url,\n            header={\n                \"Authorization\": f\"Bearer {self._api_key}\"\n            },\n            json={\n                \"prompt\": prompt,\n                \"n\": n,\n                \"size\": size,\n                \"response_format\": \"b64_json\",\n            }\n        )\n        b64_list = []\n        for d in content[\"data\"]:\n            b64_list.append(base64.b64decode(d[\"b64_json\"]))\n        return b64_list\n\n    def generate_variations_url(self,\n                                image_path: str,\n                                ) -> List[bytes]:\n        \"\"\"\n        Generate a variation image url of a given image.\n        Args:\n            image_path(str): The image to use as the basis for the variation(s).\n             Must be a valid PNG file, less than 4MB, and square.\n        Returns:\n            List[str]: The list of generate image content.\n        \"\"\"\n        content = self._http_call.post_once(\n            url=self._image_variations_url,\n            header={\n                \"Authorization\": f\"Bearer {self._api_key}\"\n            },\n            files={\n                    \"image\": (\"gpt_image.png\", open(image_path, 'rb'), \"image/png\"),\n                  }\n        )\n        urls = []\n        for d in content[\"data\"]:\n            urls.append(base64.b64decode(d[\"url\"]))\n        return urls"]}
{"filename": "python/py_chatgpt_plus/core/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/core/chat_gpt_3.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nimport json\nfrom typing import List, Generator\n\nfrom py_chatgpt_plus.core.chat_base import ChatAbc", "\nfrom py_chatgpt_plus.core.chat_base import ChatAbc\nfrom py_chatgpt_plus.utils.http_call import HttpCall\n\n\nclass ChatGptV3(ChatAbc):\n    def __init__(self,\n                 api_key: str,\n                 model: str = \"gpt-3.5-turbo\",\n                 chatgpt_url: str = \"https://api.openai.com/v1/chat/completions\",\n                 system_prompt: str = \"You are ChatGPT, a large language model trained by OpenAI. Respond conversationally\",\n                 proxy_address: str = None,\n                 temperature: float = 0.6,\n                 top_p: float = 1.0,\n                 max_tokens: int = 2048,\n                 ):\n        \"\"\"\n        Call Official chatGpt interface.\n        Args:\n            api_key(str): The chatGpt api key, please refer https://platform.openai.com/account/api-keys.\n            model(str): The model of chatGpt v3, default to 'gpt-3.5-turbo'.\n            proxy_address(str): The address of proxy.\n            system_prompt(str): You are a\n            temperature(float): What sampling temperature to use, between 0 and 2.\\\n                  Higher values like 0.8 will make the output more random, while lower values like 0.2 will \\\n                  make it more focused and deterministic.\n            top_p(float): An alternative to sampling with temperature, called nucleus sampling, where the model\n                 considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens \\\n                 comprising the top 10% probability mass are considered.\n            max_tokens(int): The maximum number of tokens to generate in the completion.The token count of your \\\n                 prompt plus max_tokens cannot exceed the model's context length. Most models have a context length \\\n                 of 2048 tokens (except for the newest models, which support 4096).\n        \"\"\"\n        self._api_key = api_key\n        self._model = model\n        self._proxy_address = proxy_address\n        self._temperature = temperature\n        self._top_p = top_p\n        self._max_tokens = max_tokens\n        self._http_call = HttpCall(proxy_addr=proxy_address)\n        self._system_prompt = system_prompt\n        self._conversations: List[dict] = [\n            {\n                \"role\": \"system\",\n                \"content\": self._system_prompt,\n            }\n        ]\n        self._chatgpt_url = chatgpt_url\n\n    def _add_to_conversations(self, content: str, role: str = \"user\"):\n        self._conversations.append(\n            {\n                \"role\": role,\n                \"content\": content,\n            }\n        )\n\n    def chat_once(self, prompt: str) -> str:\n        all_rsp: str = \"\"\n        for stream in self.chat_stream(prompt):\n            all_rsp += stream\n        return all_rsp\n\n    def chat_stream(self, prompt: str) -> Generator:\n        self._add_to_conversations(prompt, \"user\")\n        streams = self._http_call.post_stream(\n            url=self._chatgpt_url,\n            header={\n                \"Authorization\": f\"Bearer {self._api_key}\"\n            },\n            json={\n                \"model\": self._model,\n                \"messages\": self._conversations,\n                \"stream\": True,\n                \"temperature\": self._temperature,\n                \"top_p\": self._top_p,\n                \"user\": \"user\",\n                \"max_tokens\": self._max_tokens,\n            }\n        )\n        all_stream_content = \"\"\n        rsp_role: str = None\n        for stream in streams:\n            stream = stream.decode(\"utf-8\")[6:]\n            if stream == \"[DONE]\":\n                break\n            rsp: dict = json.loads(stream)\n            choices = rsp.get(\"choices\")\n            if not choices:\n                continue\n            delta = choices[0].get(\"delta\")\n            if not delta:\n                continue\n            if \"role\" in delta:\n                rsp_role = delta[\"role\"]\n            if \"content\" in delta:\n                content = delta[\"content\"]\n                all_stream_content += content\n                yield content\n        self._add_to_conversations(all_stream_content, rsp_role)\n\n    def save_conversations(self, file_path: str):\n        conversations_json = json.dumps(self._conversations, indent=4, ensure_ascii=False)\n        with open(file_path, \"w\") as f:\n            f.write(conversations_json)\n\n    def load_conversations(self, file_path: str):\n        with open(file_path, \"r\") as f:\n            content = f.read()\n        self._conversations = json.loads(content)"]}
{"filename": "python/py_chatgpt_plus/core/tests/image_gpt.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom py_chatgpt_plus.core.image_gpt import ImageGpt\n\napi_key = \"****\"\n", "api_key = \"****\"\n\n\ndef test_image_generate_url():\n    ig = ImageGpt(\n        api_key=api_key\n    )\n    urls = ig.generate_url('Draw a white cat. it is a real cat, not a cartoon cat')\n    print(urls)\n", "\n\ndef test_image_generate_content():\n    ig = ImageGpt(\n        api_key=api_key\n    )\n    contents = ig.generate_content('Draw a white cat. it is a real cat, not a cartoon cat')\n    for i, content in enumerate(contents):\n        with open(f\"image_{i}.png\", \"wb\") as f:\n            f.write(content)", "\n\ndef test_image_generate_variations_url(image_path: str):\n    ig = ImageGpt(\n        api_key=api_key\n    )\n    urls = ig.generate_variations_url(image_path)\n    print(urls)\n\n\nif __name__ == \"__main__\":\n    # test_image_generate_url()\n    # test_image_generate_content()\n    test_image_generate_variations_url(\"image_0.png\")", "\n\nif __name__ == \"__main__\":\n    # test_image_generate_url()\n    # test_image_generate_content()\n    test_image_generate_variations_url(\"image_0.png\")\n"]}
{"filename": "python/py_chatgpt_plus/core/tests/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/core/tests/chat_gpt_v3.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\napi_key = \"*******\"\n", "api_key = \"*******\"\n\n\ndef test_stream():\n    cg = ChatGptV3(\n        api_key=api_key\n    )\n    streams = cg.chat_stream(\"\u8bf7\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0b\u4f60\u81ea\u5df1\")\n    for stream in streams:\n        print(stream)", "\n\ndef test_once():\n    cg = ChatGptV3(\n        api_key=api_key,\n        system_prompt=\"\u8bf7\u5e2e\u6211\u628a\u4ee5\u4e0b\u7684\u5de5\u4f5c\u5185\u5bb9\u586b\u5145\u4e3a\u5de5\u4f5c\u5468\u62a5\uff0c\u7528markdown\u683c\u5f0f\u4ee5\u5206\u70b9\u53d9\u8ff0\u7684\u65b9\u5f0f\u8f93\u51fa:\",\n    )\n    answer = cg.chat_once(\"\u4e3b\u8981\u5f00\u5c55\u4e86\u4e09\u4ef6\u4e8b\u60c5, \u7b2c\u4e00\u662f\u5b8c\u6210\u529f\u80fd1\u7684\u5f00\u53d1\uff0c\u7b2c\u4e8c\u662f\u5b8c\u6210\u4e86xx\u7684\u9700\u6c42\u8bc4\u5ba1\uff0c\u7b2c\u4e09\u662f\u63a5\u5f85\u4e86xx\u5ba2\u6237\")\n    print(answer)\n    cg.save_conversations(\"./conversations.json\")", "\n\nif __name__ == \"__main__\":\n    # test_stream()\n    test_once()"]}
{"filename": "python/py_chatgpt_plus/services/chat_ws.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nimport asyncio\nimport websockets\n\nfrom loguru import logger", "\nfrom loguru import logger\n\nfrom py_chatgpt_plus.utils.conf import conf_inst\nfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\ncg = ChatGptV3(\n    api_key=conf_inst.chatgpt_api_key,\n    proxy_address=conf_inst.chatgpt_proxy)\n", "    proxy_address=conf_inst.chatgpt_proxy)\n\n\nasync def chat_stream(websocket):\n    async for message in websocket:\n        logger.debug(f\"chat_stream | receive prompt:{message}\")\n        streams = cg.chat_stream(prompt=message)\n        all_stream_content = \"\"\n        for stream in streams:\n            all_stream_content += stream\n            await websocket.send(stream)", "        for stream in streams:\n            all_stream_content += stream\n            await websocket.send(stream)\n        logger.debug(f\"chat_stream | send rsp:{all_stream_content}\")\n\n\nasync def chat_once(websocket):\n    async for message in websocket:\n        logger.debug(f\"chat_once | receive prompt:{message}\")\n        rsp = cg.chat_once(prompt=message)", "        logger.debug(f\"chat_once | receive prompt:{message}\")\n        rsp = cg.chat_once(prompt=message)\n        logger.debug(f\"chat_once | send rsp:{rsp}\")\n        await websocket.send(rsp)\n\n\nasync def handle(websocket, path):\n    if path == \"/chat_once\":\n        await chat_once(websocket)\n    elif path == \"/chat_stream\":\n        await chat_stream(websocket)\n    else:\n        raise ValueError(f\"not support path:{path}\")", "\n\nasync def main():\n    logger.debug(f\"service will listen on:{conf_inst.local_ip}:{conf_inst.local_port}\")\n    async with websockets.serve(handle, conf_inst.local_ip, conf_inst.local_port):\n        await asyncio.Future()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n", ""]}
{"filename": "python/py_chatgpt_plus/services/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/services/chat.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom typing import Generator\nfrom py_chatgpt_plus.core.chat_gpt_3 import ChatGptV3\n\n\nclass ChatService(object):\n    def __init__(self, api_key: str):\n        self._api_key = api_key\n\n    def chat_once(self, prompt: str, system_prompt: str) -> str:\n        cg = ChatGptV3(api_key=self._api_key,\n                       system_prompt=system_prompt)\n        return cg.chat_once(prompt=prompt)\n\n    def chat_stream(self, prompt: str, system_prompt: str) -> Generator:\n        cg = ChatGptV3(api_key=self._api_key)\n        return cg.chat_stream(prompt=prompt,\n                              system_prompt=system_prompt)", "\n\nclass ChatService(object):\n    def __init__(self, api_key: str):\n        self._api_key = api_key\n\n    def chat_once(self, prompt: str, system_prompt: str) -> str:\n        cg = ChatGptV3(api_key=self._api_key,\n                       system_prompt=system_prompt)\n        return cg.chat_once(prompt=prompt)\n\n    def chat_stream(self, prompt: str, system_prompt: str) -> Generator:\n        cg = ChatGptV3(api_key=self._api_key)\n        return cg.chat_stream(prompt=prompt,\n                              system_prompt=system_prompt)"]}
{"filename": "python/py_chatgpt_plus/routes/chat_route.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom flask import Response, request\nfrom flask_restx import Resource, fields\n\nfrom loguru import logger", "\nfrom loguru import logger\n\nfrom py_chatgpt_plus.services.chat import ChatService\nfrom py_chatgpt_plus.routes.api import api, custom_response, get_json_result\nfrom py_chatgpt_plus.utils.conf import conf_inst\n\nns = api.namespace(\"chat\", description=\"Chat  API\")\n\nchat_service = ChatService(api_key=conf_inst.chatgpt_api_key)", "\nchat_service = ChatService(api_key=conf_inst.chatgpt_api_key)\n\nchat_base_request_fields = api.clone(\n    \"ChatBaseRequest\",\n    {\n        \"prompt\": fields.String(required=True, description=\"Type prompt.\"),\n        \"system_prompt\": fields.String(required=True,\n                                       description=\"System prompt\",\n                                       default=\"You are ChatGPT, a large language model trained by OpenAI. Respond conversationally\"),", "                                       description=\"System prompt\",\n                                       default=\"You are ChatGPT, a large language model trained by OpenAI. Respond conversationally\"),\n    }\n)\n\nchat_base_once_response_fields = api.model(\n     \"ChatBaseOnceResponseFields\",\n     {\n        \"answer\": fields.String(required=True, description=\"The id of mpc job.\"),\n     }", "        \"answer\": fields.String(required=True, description=\"The id of mpc job.\"),\n     }\n)\n\n\n@ns.route(\"/once\")\nclass ChatOnce(Resource):\n    @ns.expect(chat_base_request_fields)\n    @ns.marshal_with(custom_response(chat_base_once_response_fields))\n    def post(self):\n        \"\"\"chat once, no stream!\"\"\"\n        req_json = request.json\n        logger.debug(f\"receive chat once post request:{req_json}\")\n        answer = chat_service.chat_once(prompt=req_json.get(\"prompt\", \"\"),\n                                        system_prompt=req_json.get(\"system_prompt\"))\n        return get_json_result(data={\"answer\": answer})", "\n\n@ns.route(\"/stream\")\nclass ChatStream(Resource):\n    @api.doc(responses={200: \"Stream SSE data in text/event-stream format\"})\n    @api.representation(\"text/event-stream\")\n    @ns.expect(chat_base_request_fields)\n    def post(self):\n        \"\"\"chat stream.\"\"\"\n        req_json = request.json\n        logger.debug(f\"receive chat stream post request:{req_json}\")\n        return Response(chat_service.chat_stream(prompt=req_json.get(\"prompt\", \"\"),\n                                                 system_prompt=req_json.get(\"system_prompt\")),\n                                                 mimetype=\"text/event-stream\")"]}
{"filename": "python/py_chatgpt_plus/routes/api.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nimport uuid\nfrom typing import Any\n\nfrom flask import Flask, Blueprint", "\nfrom flask import Flask, Blueprint\nfrom flask_restx import Api, fields\n\nfrom py_chatgpt_plus.errors.error import ChatGptError, Success\n\napp = Flask(__name__)\n\napp.config.SWAGGER_UI_OPERATION_ID = True  # type: ignore\napp.config.SWAGGER_UI_REQUEST_DURATION = True  # type: ignore", "app.config.SWAGGER_UI_OPERATION_ID = True  # type: ignore\napp.config.SWAGGER_UI_REQUEST_DURATION = True  # type: ignore\napp.url_map.strict_slashes = False\napp.config[\"JSON_AS_ASCII\"] = False\napp.config[\"ERROR_INCLUDE_MESSAGE\"] = False  # \u5fc5\u987b\u8bbe\u7f6e\u4e3aFalse\napp.config[\"SECRET_KEY\"] = \"@&^&N908jksd#\"\n\napi_blue = Blueprint(\"api\", __name__, url_prefix=\"/api/v1\")\n\napi = Api(", "\napi = Api(\n    api_blue,\n    version=\"1.0\",\n    title=\"ChatGpt service!\",\n    description=\"ChatGpt service!\",\n    doc=\"/doc\",\n)\n\n", "\n\n@api.errorhandler(ChatGptError)\ndef chat_gpt_error_response(e):\n    return get_json_result(e), 200\n\n\n@api.errorhandler(Exception)\ndef server_internal_err_response(e):\n    return \"internal server error\", 500", "def server_internal_err_response(e):\n    return \"internal server error\", 500\n\n\ndef get_json_result(\n    custom_err: ChatGptError = Success.SuccessResponse, data=None\n):\n    \"\"\"Get API json result.\n\n    Args:\n        custom_err (ChatGptError): The Error class include ret_msg and ret_code.\n        data (Any): The custom result data.\n\n    Returns:\n    \"\"\"\n    result_dict = {\"ret_code\": custom_err.ret_code(), \"ret_msg\": custom_err.ret_msg()}\n    if data is not None:\n        result_dict[\"data\"] = data\n    return result_dict", "\n\ndef custom_response(data: Any = None) -> Any:\n    if data is not None:\n        custom_model = api.model(\n            \"CustomResponse\" + str(uuid.uuid4()),\n            {\n                \"ret_code\": fields.Integer(description=\"The code of result\", default=0),\n                \"ret_msg\": fields.String(\n                    description=\"The message of result\", default=\"success\"\n                ),\n                \"data\": fields.Nested(data),\n            },\n        )\n    else:\n        custom_model = api.model(\n            \"CustomResponse\",\n            {\n                \"ret_code\": fields.Integer(description=\"The code of result\", default=0),\n                \"ret_msg\": fields.String(\n                    description=\"The message of result\", default=\"success\"\n                ),\n            },\n        )\n    return custom_model", ""]}
{"filename": "python/py_chatgpt_plus/routes/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom loguru import logger\nfrom pathlib import Path\nimport importlib\nimport re", "import importlib\nimport re\n\nfrom flask import Blueprint\n\nfrom py_chatgpt_plus.routes.api import app, api_blue\nfrom py_chatgpt_plus.utils.conf import conf_inst\n\n\ndef auto_register_blue_print(app):\n    for path in Path(__file__).parent.glob(\"*_route.py\"):\n        page_name = re.sub(\"$%s\" % \"_route\", \"\", path.stem)\n        module_name = \".\".join(\n            path.parts[path.parts.index(\"py_chatgpt_plus\"): -1] + (page_name,)\n        )\n        auto_blueprint = importlib.import_module(module_name)\n        print(module_name)\n        print(page_name)\n        auto_blueprint.blue_route = Blueprint(page_name, module_name)\n        app.register_blueprint(auto_blueprint.blue_route, url_prefix=f\"/{page_name}\")", "\ndef auto_register_blue_print(app):\n    for path in Path(__file__).parent.glob(\"*_route.py\"):\n        page_name = re.sub(\"$%s\" % \"_route\", \"\", path.stem)\n        module_name = \".\".join(\n            path.parts[path.parts.index(\"py_chatgpt_plus\"): -1] + (page_name,)\n        )\n        auto_blueprint = importlib.import_module(module_name)\n        print(module_name)\n        print(page_name)\n        auto_blueprint.blue_route = Blueprint(page_name, module_name)\n        app.register_blueprint(auto_blueprint.blue_route, url_prefix=f\"/{page_name}\")", "\n\nauto_register_blue_print(app)\napp.register_blueprint(api_blue)\n\n\ndef main():\n    logger.add(conf_inst.log_file, level=conf_inst.log_level, enqueue=True, serialize=False, rotation=\"100 MB\")\n    logger.info(f\"service will listen on:{conf_inst.local_ip}:{conf_inst.local_port}\")\n    app.run(host=conf_inst.local_ip, port=conf_inst.local_port)"]}
{"filename": "python/py_chatgpt_plus/routes/image_route.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
{"filename": "python/py_chatgpt_plus/routes/export.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n\"\"\"Export swagger schema.\"\"\"\nimport argparse\nimport json\n", "import json\n\nfrom py_chatgpt_plus.routes.api import api, app\n\ndef export_schema_to_swagger(dst_file: str):\n    \"\"\"Export schema to swagger json file.\n\n    Args:\n        dst_file: The output file.\n\n    Returns:\n    \"\"\"\n    app.config[\"SERVER_NAME\"] = \"localhost\"\n    app.app_context().__enter__()\n    with open(dst_file, \"w\") as json_file:\n        json.dump(api.__schema__, json_file, indent=4)", "\n\ndef export_schema_to_postman_collection(dst_file: str):\n    \"\"\"Export API schema as a Postman collection.\n\n    Args:\n        dst_file: The output file.\n\n    Returns:\n    \"\"\"\n    app.config[\"SERVER_NAME\"] = \"localhost\"\n    app.app_context().__enter__()\n    urlvars = False  # Build query strings in URLs\n    swagger = True  # Export Swagger specifications\n    data = api.as_postman(urlvars=urlvars, swagger=swagger)\n    with open(dst_file, \"w\") as json_file:\n        json.dump(data, json_file, indent=2)", "\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Export swagger schema\")\n    parser.add_argument(\n        \"-t\",\n        \"--type\",\n        type=int,\n        default=0,\n        choices=[0, 1],\n        help=\"export as swagger or postman collection, 0 for swagger, 1 for postman collection\",\n    )\n    parser.add_argument(\"-f\", \"--dst_file\", type=str, required=True, help=\"output file\")\n    args = parser.parse_args()\n\n    if args.type == 0:\n        export_schema_to_swagger(args.dst_file)\n    elif args.type == 1:\n        export_schema_to_postman_collection(args.dst_file)\n    else:\n        raise Exception(\"unsupported export type.\")", ""]}
{"filename": "python/py_chatgpt_plus/errors/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nclass ChatGptError(Exception):\n    def __init__(self, ret_code: int = 0, ret_msg: str = \"success\"):\n        \"\"\"Define base error.\n\n        Args:\n            ret_code (int): The code of ret, default to 0.\n            ret_msg: The description of ret, default to success.\n        \"\"\"\n        self._ret_code = ret_code\n        self._ret_msg = ret_msg\n\n    def ret_code(self) -> int:\n        return self._ret_code\n\n    def ret_msg(self) -> str:\n        return self._ret_msg\n\n    def set_ret_msg(self, msg: str):\n        self._ret_msg = msg\n        return self"]}
{"filename": "python/py_chatgpt_plus/errors/export.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nimport argparse\nimport importlib\nimport inspect\nimport sys", "import inspect\nimport sys\nfrom typing import Dict, List, Union\n\nfrom py_chatgpt_plus.errors import ChatGptError\nfrom pytablewriter import MarkdownTableWriter\n\nmodule_paths = [\"py_chatgpt_plus.errors.error\"]\n\n\ndef dynamic_import(module):\n    return importlib.import_module(module)", "\n\ndef dynamic_import(module):\n    return importlib.import_module(module)\n\n\ndef get_module_attributes(module_path: str):\n    errcode_dict: Dict[str, List[Dict[str, Union[str, int]]]] = {}\n    module = dynamic_import(module_path)\n    for class_name, class_ in inspect.getmembers(\n        sys.modules[module.__name__], inspect.isclass\n    ):\n        attributes = inspect.getmembers(class_, lambda a: not (inspect.isroutine(a)))\n        attr_list = [\n            a for a in attributes if not (a[0].startswith(\"__\") and a[0].endswith(\"__\"))\n        ]\n        for attr in attr_list:\n            if isinstance(attr[1], ChatGptError):\n                module_name = attr[0]\n                ret_code = attr[1].__dict__[\"_ret_code\"]\n                ret_msg = attr[1].__dict__[\"_ret_msg\"]\n                if class_name not in errcode_dict:\n                    errcode_dict[class_name] = [\n                        {\n                            \"ret_code\": ret_code,\n                            \"ret_msg\": ret_msg,\n                            \"ret_module\": module_name,\n                        }\n                    ]\n                else:\n                    errcode_dict[class_name].append(\n                        {\n                            \"ret_code\": ret_code,\n                            \"ret_msg\": ret_msg,\n                            \"ret_module\": module_name,\n                        }\n                    )\n    return errcode_dict", "\n\ndef export(dst_file: str):\n    errcode_api_md_content = \"# Server Errcode API    \\n\"\n    for module_path in module_paths:\n        errcode_dict = get_module_attributes(module_path)\n        for className, code_info_lists in errcode_dict.items():\n            writer = MarkdownTableWriter(\n                table_name=className,\n                headers=[\"ret_module\", \"ret_code\", \"ret_msg\"],\n                value_matrix=[],\n                margin=1,  # add a whitespace for both sides of each cell\n            )\n            value_matrix = []\n            for code_info_dict in code_info_lists:\n                value_matrix.append(\n                    [\n                        code_info_dict[\"ret_module\"],\n                        code_info_dict[\"ret_code\"],\n                        code_info_dict[\"ret_msg\"],\n                    ]\n                )\n            writer.value_matrix = value_matrix\n            content = writer.dumps()\n            errcode_api_md_content += str(content) + \"    \\n\"\n    with open(dst_file, \"w\") as md_file:\n        md_file.write(errcode_api_md_content)", "\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Export errcode\")\n    parser.add_argument(\"-f\", \"--dst_file\", type=str, required=True, help=\"output file\")\n    args = parser.parse_args()\n\n    export(dst_file=args.dst_file)\n", ""]}
{"filename": "python/py_chatgpt_plus/errors/error.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\nfrom py_chatgpt_plus.errors import ChatGptError\n\n\nclass Success(object):\n    SuccessResponse = ChatGptError()", "\nclass Success(object):\n    SuccessResponse = ChatGptError()\n\n\nclass CommonError(object):\n    Err_RequestParam = ChatGptError(\n        ret_code=100, ret_msg=\"request param invalid\"\n    )"]}
{"filename": "dev/__init__.py", "chunked_list": ["#  Copyright 2023 github.com/rosemary666. All Rights Reserved.\n#  #\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  #\n#      http://www.apache.org/licenses/LICENSE-2.0\n#  #\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,", "#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ==============================================================================\n"]}
