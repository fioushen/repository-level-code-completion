{"filename": "src/sign_language_tools/__init__.py", "chunked_list": ["from sign_language_tools.pose import *\nfrom sign_language_tools.visualization import *\n"]}
{"filename": "src/sign_language_tools/pose/__init__.py", "chunked_list": ["from sign_language_tools.pose.mediapipe import *\nfrom sign_language_tools.pose.openpose import *\nfrom sign_language_tools.pose.transform import *\n"]}
{"filename": "src/sign_language_tools/pose/openpose/edges.py", "chunked_list": ["HAND_EDGES = (\n    (0, 1), (1, 2), (2, 3), (3, 4), (0, 5),\n    (5, 6), (6, 7), (7, 8), (0, 9), (9, 10),\n    (10, 11), (11, 12), (0, 13), (13, 14),\n    (14, 15), (15, 16), (0, 17), (17, 18),\n    (18, 19), (19, 20),\n)\n\nFACE_EDGES = (\n    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6),", "FACE_EDGES = (\n    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6),\n    (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13),\n    (13, 14), (14, 15), (15, 16),\n    (17, 18), (18, 19), (19, 20), (20, 21),\n    (22, 23), (23, 24), (24, 25), (25, 26),\n    (27, 28), (28, 29), (29, 30),\n    (31, 32), (32, 33), (33, 34), (34, 35),\n    (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 36),\n    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 42),", "    (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 36),\n    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 42),\n    (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54),\n    (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 48),\n    (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),\n    (66, 67), (67, 60),\n)\n\nUPPER_POSE_EDGES = (\n    (17, 15), (15, 0), (0, 16), (16, 18),", "UPPER_POSE_EDGES = (\n    (17, 15), (15, 0), (0, 16), (16, 18),\n    (0, 1), (1, 8),\n    (1, 2), (2, 3), (3, 4),\n    (1, 5), (5, 6), (6, 7),\n)\n\nLOWER_POSE_EDGES = (\n    (8, 9), (9, 10), (10, 11), (11, 22), (11, 24), (22, 23),\n    (8, 12), (12, 13), (13, 14), (14, 19), (14, 21), (19, 20),", "    (8, 9), (9, 10), (10, 11), (11, 22), (11, 24), (22, 23),\n    (8, 12), (12, 13), (13, 14), (14, 19), (14, 21), (19, 20),\n)\n\nPOSE_EDGES = UPPER_POSE_EDGES + LOWER_POSE_EDGES\n"]}
{"filename": "src/sign_language_tools/pose/openpose/__init__.py", "chunked_list": [""]}
{"filename": "src/sign_language_tools/pose/openpose/utils.py", "chunked_list": ["import numpy as np\n\n\ndef from_json_to_np(pose_data: dict, dtype='float16') -> dict[str, np.ndarray]:\n    \"\"\" Convert OpenPose JSON data to a Numpy array.\n    Caution! This function does not handle multiple signers nor 3D landmarks.\n    Tested on OpenPose 1.3 2D features.\n\n    Args:\n        pose_data: dictionary containing OpenPose JSON data.\n        dtype: type used for each coordinate value (default=float16).\n\n    Returns:\n        pose_array: dictionary of numpy arrays of shape (N, D),\n            where N is the number of landmarks and D=2 the coordinates dimension.\n            Keys of the dictionary correspond to:\n                - pose -> 25 landmarks\n                - face -> 70 landmarks\n                - left_hand -> 21 landmarks\n                - right_hand -> 21 landmarks\n    \"\"\"\n    pose_arrays = {\n        'pose': np.full((25, 2), fill_value=np.nan, dtype=dtype),\n        'face': np.full((70, 2), fill_value=np.nan, dtype=dtype),\n        'left_hand': np.full((21, 2), fill_value=np.nan, dtype=dtype),\n        'right_hand': np.full((21, 2), fill_value=np.nan, dtype=dtype),\n    }\n\n    # Check if there is not any signer\n    if len(pose_data['people']) < 1:\n        return pose_arrays\n    pose_data = pose_data['people'][0]\n\n    # our key -> open pose key\n    key_matching = {\n        'pose': 'pose_keypoints_2d',\n        'face': 'face_keypoints_2d',\n        'left_hand': 'hand_left_keypoints_2d',\n        'right_hand': 'hand_right_keypoints_2d',\n    }\n    for key in key_matching:\n        data = pose_data[key_matching[key]]\n        if len(data) > 0:\n            pose_arrays[key] = np.array(data).reshape(-1, 3)[:, :2]\n\n    return pose_arrays", ""]}
{"filename": "src/sign_language_tools/pose/io/__init__.py", "chunked_list": [""]}
{"filename": "src/sign_language_tools/pose/io/read.py", "chunked_list": ["import pandas as pd\n\n\ndef read_landmarks_from_parquet(pq_path: str):\n    df = pd.read_parquet(pq_path)\n    return df.loc[:, ('x', 'y', 'z')].astype('float32').values.reshape(-1, 543, 3)\n"]}
{"filename": "src/sign_language_tools/pose/transform/compose.py", "chunked_list": ["\n\nclass Compose:\n    def __init__(self, transforms: list[callable]):\n        self.transforms = transforms\n\n    def __call__(self, x):\n        for t in self.transforms:\n            x = t(x)\n        return x", ""]}
{"filename": "src/sign_language_tools/pose/transform/resample.py", "chunked_list": ["import numpy as np\nimport sign_language_tools.pose.transform.functional as F\n\n\nclass Resample:\n    \"\"\"Resample a sequence of landmarks to a given length.\n\n    Interpolation is used to compute new landmarks. See `interpolation.get_landmark_interpolation_function`.\n\n    Args:\n        new_length: The new length to resample.\n        method: The method used to interpolate landmarks.\n\n    Returns:\n        resampled_landmarks: The sequence of landmarks that has been resampled to `new_length`.\n    \"\"\"\n\n    def __init__(self, new_length: int, method: str = 'linear'):\n        self.new_length = new_length\n        self.method = method\n\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        # landmarks shape (T, N, C)\n        t = pose_sequence.shape[0]\n        x = np.linspace(0, t - 1, self.new_length)\n        f = F.get_landmark_interpolation_function(pose_sequence, self.method)\n        return f(x)", ""]}
{"filename": "src/sign_language_tools/pose/transform/normalize.py", "chunked_list": ["import numpy as np\n\n\nclass Standardization:\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        mean = np.nanmean(pose_sequence)\n        std = np.nanstd(pose_sequence)\n        return (pose_sequence - mean) / std\n\n\nclass MinMaxNormalization:\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        min_val = np.nanmin(pose_sequence)\n        max_val = np.nanmax(pose_sequence)\n        return (pose_sequence - min_val) / (max_val - min_val)", "\n\nclass MinMaxNormalization:\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        min_val = np.nanmin(pose_sequence)\n        max_val = np.nanmax(pose_sequence)\n        return (pose_sequence - min_val) / (max_val - min_val)\n"]}
{"filename": "src/sign_language_tools/pose/transform/filter.py", "chunked_list": ["import numpy as np\n\n\nclass FilterEmpty:\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        return pose_sequence[~np.isnan(pose_sequence).all(axis=1).any(axis=1)]\n"]}
{"filename": "src/sign_language_tools/pose/transform/__init__.py", "chunked_list": ["from sign_language_tools.pose.transform.compose import *\nfrom sign_language_tools.pose.transform.filter import *\nfrom sign_language_tools.pose.transform.flip import *\nfrom sign_language_tools.pose.transform.interpolate import *\nfrom sign_language_tools.pose.transform.noise import *\nfrom sign_language_tools.pose.transform.normalize import *\nfrom sign_language_tools.pose.transform.resample import *\nfrom sign_language_tools.pose.transform.rotate import *\nfrom sign_language_tools.pose.transform.scale import *\nfrom sign_language_tools.pose.transform.smooth import *", "from sign_language_tools.pose.transform.scale import *\nfrom sign_language_tools.pose.transform.smooth import *\nfrom sign_language_tools.pose.transform.translation import *\n"]}
{"filename": "src/sign_language_tools/pose/transform/smooth.py", "chunked_list": ["import numpy as np\nfrom scipy.signal import savgol_filter\n\n\nclass SavitchyGolayFiltering:\n    def __init__(self, window_length: int, polynom_order: int):\n        self.window_length = window_length\n        self.polynom_order = polynom_order\n\n    def __call__(self, pose_sequence: np.ndarray):\n        return np.apply_along_axis(\n            lambda seq: savgol_filter(seq, self.window_length, self.polynom_order),\n            axis=0,\n            arr=pose_sequence,\n        )", ""]}
{"filename": "src/sign_language_tools/pose/transform/interpolate.py", "chunked_list": ["import numpy as np\n\nimport sign_language_tools.pose.transform.functional as F\n\n\nclass InterpolateMissing:\n    \"\"\"\n    Compute missing landmarks (NaN coordinates) in a pose sequence using an interpolation function.\n    See `get_landmark_interpolation_function` for more information about the interpolation.\n\n    Args:\n        method: Specify the method used to compute the interpolated landmarks.\n            - `linear`\n            - `nearest`\n            - `previous`\n            - `next`\n\n    Returns:\n        interpolated_landmarks: Tensor containing observed and interpolated landmarks.\n\n    Author:\n        ppoitier (v1 03.04.2023)\n    \"\"\"\n    def __init__(self, method: str = 'linear'):\n        self.method = method\n\n    def __call__(self, pose_sequence: np.ndarray):\n        \"\"\"\n        Args:\n            pose_sequence: Pose sequence containing observed and missing landmarks (NaN values).\n\n        Returns:\n            Pose sequence where missing landmarks have been replaced by interpolated landmarks.\n        \"\"\"\n        f = F.get_landmark_interpolation_function(pose_sequence, self.method)\n        return f(np.arange(pose_sequence.shape[0]))", ""]}
{"filename": "src/sign_language_tools/pose/transform/noise.py", "chunked_list": ["import numpy as np\n\n\nclass GaussianNoise:\n    def __init__(self, scale: float):\n        self.scale = scale\n\n    def __call__(self, landmarks: np.ndarray):\n        noise = np.random.normal(scale=self.scale, size=landmarks.shape)\n        return landmarks + noise", ""]}
{"filename": "src/sign_language_tools/pose/transform/padding.py", "chunked_list": ["import numpy as np\n\n\nclass Padding:\n    def __init__(\n            self,\n            min_length: int,\n            location='right',\n            mode: str = 'constant',\n            constant_value: float = 0.0,\n    ):\n        self.min_length = min_length\n        self.location = location\n        self.mode = mode\n        self.constant_value = constant_value\n\n    def __call__(self, pose_sequence: np.ndarray) -> np.ndarray:\n        if pose_sequence.shape[0] >= self.location:\n            return pose_sequence\n\n        padding = self.min_length - pose_sequence.shape[0]\n        if self.location == 'right':\n            pad_width = ((0, padding), (0, 0), (0, 0))\n        else:\n            pad_width = ((padding, 0), (0, 0), (0, 0))\n\n        return np.pad(pose_sequence, pad_width, mode=self.mode, constant_values=self.constant_value)", ""]}
{"filename": "src/sign_language_tools/pose/transform/flip.py", "chunked_list": ["import numpy as np\n\n\nclass HorizontalFlip:\n\n    def __call__(self, landmarks: np.ndarray):\n        landmarks[:, :, 0] = 1 - landmarks[:, :, 0]\n        return landmarks\n", ""]}
{"filename": "src/sign_language_tools/pose/transform/rotate.py", "chunked_list": ["import numpy as np\nimport random\nfrom math import cos, sin, pi\n\n\nclass Rotation2D:\n\n    def __init__(self, angle: float, center=(0.5, 0.5)):\n        self.center = center\n        self.angle = angle\n\n    def __call__(self, landmarks: np.ndarray):\n        cx, cy = self.center\n        r = self.angle\n        x = landmarks[:, :, 0].copy() - cx\n        y = landmarks[:, :, 1].copy() - cy\n        landmarks[:, :, 0] = x * cos(r) - y * sin(r) + cx\n        landmarks[:, :, 1] = x * sin(r) + y * cos(r) + cy\n        return landmarks", "\n\nclass RandomRotation2D(Rotation2D):\n    def __init__(self, angle_range=(0, 2*pi), center=(0.5, 0.5)):\n        r0, r1 = angle_range\n        angle = random.uniform(r0, r1)\n        super().__init__(angle, center)\n"]}
{"filename": "src/sign_language_tools/pose/transform/translation.py", "chunked_list": ["import numpy as np\nimport random\n\n\nclass Translation:\n    def __init__(self, dx: float, dy: float):\n        self.dx = dx\n        self.dy = dy\n\n    def __call__(self, landmarks: np.ndarray):\n        landmarks[:, :, 0] += self.dx\n        landmarks[:, :, 1] += self.dy\n        return landmarks", "\n\nclass RandomTranslation(Translation):\n    def __init__(self, dx_range=(-0.2, 0.2), dy_range=(-0.2, 0.2)):\n        dx = random.uniform(*dx_range)\n        dy = random.uniform(*dy_range)\n        super().__init__(dx, dy)\n"]}
{"filename": "src/sign_language_tools/pose/transform/scale.py", "chunked_list": ["import numpy as np\n\n\nclass Scale:\n    def __init__(self, scaling_factor: float, center=(0.5, 0.5)):\n        self.dx = (scaling_factor * center[0]) - center[0]\n        self.dy = (scaling_factor * center[1]) - center[1]\n        self.scaling_factor = scaling_factor\n\n    def __call__(self, landmarks: np.ndarray):\n        landmarks[:, :, :] *= self.scaling_factor\n        landmarks[:, :, 0] -= self.dx\n        landmarks[:, :, 1] -= self.dy\n        return landmarks", "\n"]}
{"filename": "src/sign_language_tools/pose/transform/functional/__init__.py", "chunked_list": ["from sign_language_tools.pose.transform.functional.interpolation import *\n"]}
{"filename": "src/sign_language_tools/pose/transform/functional/interpolation.py", "chunked_list": ["import numpy as np\nfrom scipy.interpolate import interp1d\n\n\ndef get_landmark_interpolation_function(landmarks: np.ndarray, method: str = 'linear') -> callable:\n    \"\"\"Return an approximation of the function f(t) = Y_t where t is any instant and Y the landmarks\n    corresponding to it. For any given t, the function f uses interpolation to compute the resulting Y_t\n    given the observed data.\n\n    Example:\n        ```\n        # We have landmarks of shape (T, N, D)\n        f = get_landmark_interpolation_function(landmarks)\n        interpolated_landmark = f(7.32)\n        ```\n\n    Args:\n        landmarks: Observed landmarks used to compute the interpolation when needed.\n        method: Specify the method used to compute the interpolated landmarks:\n            - `linear`\n            - `nearest`\n            - `previous`\n            - `next`\n    Returns:\n        interp_func: the interpolation function\n\n    Author:\n        ppoitier (v1 03.04.2023)\n    \"\"\"\n    # landmarks shape (T, N, C)\n    t = landmarks.shape[0]\n    x = np.argwhere(~np.isnan(landmarks.reshape(t, -1)).any(axis=1)).reshape(-1)\n    y = landmarks[x]\n\n    if len(y) < 2:\n        method = 'nearest'\n\n    return interp1d(\n        x,\n        y,\n        kind=method,\n        axis=0,\n        assume_sorted=True,\n        bounds_error=False,\n        fill_value='extrapolate',\n    )", "\n\ndef fill_empty_landmark_sequences(landmarks: np.ndarray, fill_values: float):\n    landmarks[:, np.isnan(landmarks).all(axis=0).all(axis=1), :] = fill_values\n    return landmarks\n"]}
{"filename": "src/sign_language_tools/pose/mediapipe/edges.py", "chunked_list": ["from sign_language_tools.pose.mediapipe.facemesh import FACEMESH_CONTOURS\n\n\n__all__ = [\n    'LIPS_EDGES',\n    'HAND_EDGES',\n    'UPPER_POSE_EDGES',\n    'LOWER_POSE_EDGES',\n    'POSE_EDGES',\n    'FACE_EDGES',", "    'POSE_EDGES',\n    'FACE_EDGES',\n]\n\n\nLIPS_EDGES = (\n    (0, 11), (11, 12), (12, 13), (13, 14), (14, 15),\n    (15, 16), (16, 17), (17, 18), (18, 19), (19, 10),\n    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5),\n    (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),", "    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5),\n    (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),\n    (20, 30), (30, 31), (31, 32), (32, 33), (33, 34),\n    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39),\n    (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),\n    (25, 26), (26, 27), (27, 28), (28, 29), (29, 39)\n)\n\nHAND_EDGES = (\n    (3, 4), (0, 5), (17, 18), (0, 17),", "HAND_EDGES = (\n    (3, 4), (0, 5), (17, 18), (0, 17),\n    (13, 14), (13, 17), (18, 19), (5, 6),\n    (5, 9), (14, 15), (0, 1), (9, 10),\n    (1, 2), (9, 13), (10, 11), (19, 20),\n    (6, 7), (15, 16), (2, 3), (11, 12),\n    (7, 8),\n)\n\nUPPER_POSE_EDGES = (", "\nUPPER_POSE_EDGES = (\n    (15, 21), (16, 20), (18, 20), (3, 7),\n    (14, 16), (6, 8), (15, 17), (16, 22),\n    (4, 5), (5, 6), (0, 1), (9, 10),\n    (1, 2), (0, 4), (11, 13), (15, 19),\n    (16, 18), (12, 14), (17, 19), (2, 3),\n    (11, 12), (13, 15),\n)\n", ")\n\nLOWER_POSE_EDGES = (\n    (11, 23), (12, 24), (23, 24), (23, 25),\n    (24, 26), (25, 27), (26, 28), (27, 29),\n    (28, 30), (29, 31), (30, 32), (27, 31),\n    (28, 32),\n)\n\nPOSE_EDGES = LOWER_POSE_EDGES + UPPER_POSE_EDGES", "\nPOSE_EDGES = LOWER_POSE_EDGES + UPPER_POSE_EDGES\n\nFACE_EDGES = FACEMESH_CONTOURS\n"]}
{"filename": "src/sign_language_tools/pose/mediapipe/extraction.py", "chunked_list": ["import numpy as np\nimport os\nimport sign_language_tools.pose.mediapipe.utils as utils\n\n\ndef extract_landmarks(video_path: str, **kwargs):\n    results = utils.extract_landmarks_from_video_file(video_path, **kwargs)\n\n    face = np.stack([utils.landmarks_to_np(frame_result.face_landmarks, 478) for frame_result in results])\n    pose = np.stack([utils.landmarks_to_np(frame_result.pose_landmarks, 33) for frame_result in results])\n    left_hand = np.stack([utils.landmarks_to_np(frame_result.left_hand_landmarks, 21) for frame_result in results])\n    right_hand = np.stack([utils.landmarks_to_np(frame_result.right_hand_landmarks, 21) for frame_result in results])\n\n    return face, pose, left_hand, right_hand", "\n\ndef extract_and_save_landmarks(video_path: str, video_id: str, dest_path: str = './', **kwargs):\n    face, pose, left_hand, right_hand = extract_landmarks(video_path, **kwargs)\n    np.save(os.path.join(dest_path, 'face', video_id), face)\n    np.save(os.path.join(dest_path, 'pose', video_id), pose)\n    np.save(os.path.join(dest_path, 'left_hand', video_id), left_hand)\n    np.save(os.path.join(dest_path, 'right_hand', video_id), right_hand)\n", ""]}
{"filename": "src/sign_language_tools/pose/mediapipe/__init__.py", "chunked_list": [""]}
{"filename": "src/sign_language_tools/pose/mediapipe/utils.py", "chunked_list": ["from typing import Optional\n\nimport cv2\nimport mediapipe as mp\nimport numpy as np\nfrom tqdm import tqdm\n\nmp_holistic = mp.solutions.holistic\n\n\ndef extract_landmarks_from_video_file(\n        video_path: str,\n        options: Optional[dict] = None,\n        show_progress: bool = False,\n        frame_range: Optional[tuple[int, int]] = None,\n):\n    if options is None:\n        options = {\n            'static_image_mode': False,\n            'model_complexity': 2,\n            'refine_face_landmarks': True,\n            'smooth_landmarks': True,\n            'min_detection_confidence': 0.5,\n            'min_tracking_confidence': 0.5,\n            'enable_segmentation': False,\n            'smooth_segmentation': False,\n        }\n\n    cap = cv2.VideoCapture(video_path)\n    n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    if frame_range is None:\n        frame_range = range(n_frames)\n    else:\n        start, end = frame_range\n        cap.set(cv2.CAP_PROP_POS_FRAMES, start)\n        frame_range = range(start, end)\n\n    results = []\n    with mp_holistic.Holistic(**options) as holistic:\n        for frame_idx in tqdm(frame_range, disable=(not show_progress), unit='frame'):\n            success, image = cap.read()\n            if not success:\n                tqdm.write(f'Could not read frame #{frame_idx}')\n                break\n            image.flags.writeable = False\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image_results = holistic.process(image)\n            results.append(image_results)\n\n    cap.release()\n    return results", "\n\ndef extract_landmarks_from_video_file(\n        video_path: str,\n        options: Optional[dict] = None,\n        show_progress: bool = False,\n        frame_range: Optional[tuple[int, int]] = None,\n):\n    if options is None:\n        options = {\n            'static_image_mode': False,\n            'model_complexity': 2,\n            'refine_face_landmarks': True,\n            'smooth_landmarks': True,\n            'min_detection_confidence': 0.5,\n            'min_tracking_confidence': 0.5,\n            'enable_segmentation': False,\n            'smooth_segmentation': False,\n        }\n\n    cap = cv2.VideoCapture(video_path)\n    n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    if frame_range is None:\n        frame_range = range(n_frames)\n    else:\n        start, end = frame_range\n        cap.set(cv2.CAP_PROP_POS_FRAMES, start)\n        frame_range = range(start, end)\n\n    results = []\n    with mp_holistic.Holistic(**options) as holistic:\n        for frame_idx in tqdm(frame_range, disable=(not show_progress), unit='frame'):\n            success, image = cap.read()\n            if not success:\n                tqdm.write(f'Could not read frame #{frame_idx}')\n                break\n            image.flags.writeable = False\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image_results = holistic.process(image)\n            results.append(image_results)\n\n    cap.release()\n    return results", "\n\ndef landmarks_to_np(landmarks, n_landmarks: int, dtype='float16', fill_value=np.nan):\n    if landmarks is None:\n        return np.full((n_landmarks, 3), fill_value=fill_value, dtype=dtype)\n    return np.array([(lm.x, lm.y, lm.z) for lm in landmarks.landmark], dtype=dtype)\n"]}
{"filename": "src/sign_language_tools/pose/mediapipe/facemesh.py", "chunked_list": ["\nFACEMESH_TESSELATION = (\n    (127, 34),  (34, 139),  (139, 127), (11, 0),    (0, 37),    (37, 11),\n    (232, 231), (231, 120), (120, 232), (72, 37),   (37, 39),   (39, 72),\n    (128, 121), (121, 47),  (47, 128),  (232, 121), (121, 128), (128, 232),\n    (104, 69),  (69, 67),   (67, 104),  (175, 171), (171, 148), (148, 175),\n    (118, 50),  (50, 101),  (101, 118), (73, 39),   (39, 40),   (40, 73),\n    (9, 151),   (151, 108), (108, 9),   (48, 115),  (115, 131), (131, 48),\n    (194, 204), (204, 211), (211, 194), (74, 40),   (40, 185),  (185, 74),\n    (80, 42),   (42, 183),  (183, 80),  (40, 92),   (92, 186),  (186, 40),", "    (194, 204), (204, 211), (211, 194), (74, 40),   (40, 185),  (185, 74),\n    (80, 42),   (42, 183),  (183, 80),  (40, 92),   (92, 186),  (186, 40),\n    (230, 229), (229, 118), (118, 230), (202, 212), (212, 214), (214, 202),\n    (83, 18),   (18, 17),   (17, 83),   (76, 61),   (61, 146),  (146, 76),\n    (160, 29),  (29, 30),   (30, 160),  (56, 157),  (157, 173), (173, 56),\n    (106, 204), (204, 194), (194, 106), (135, 214), (214, 192), (192, 135),\n    (203, 165), (165, 98),  (98, 203),  (21, 71),   (71, 68),   (68, 21),\n    (51, 45),   (45, 4),    (4, 51),    (144, 24),  (24, 23),   (23, 144),\n    (77, 146),  (146, 91),  (91, 77),   (205, 50),  (50, 187),  (187, 205),\n    (201, 200), (200, 18),  (18, 201),  (91, 106),  (106, 182), (182, 91),", "    (77, 146),  (146, 91),  (91, 77),   (205, 50),  (50, 187),  (187, 205),\n    (201, 200), (200, 18),  (18, 201),  (91, 106),  (106, 182), (182, 91),\n    (90, 91),   (91, 181),  (181, 90),  (85, 84),   (84, 17),   (17, 85),\n    (206, 203), (203, 36),  (36, 206),  (148, 171), (171, 140), (140, 148),\n    (92, 40),   (40, 39),   (39, 92),   (193, 189), (189, 244), (244, 193),\n    (159, 158), (158, 28),  (28, 159),  (247, 246), (246, 161), (161, 247),\n    (236, 3),   (3, 196),   (196, 236), (54, 68),   (68, 104),  (104, 54),\n    (193, 168), (168, 8),   (8, 193),   (117, 228), (228, 31),  (31, 117),\n    (189, 193), (193, 55),  (55, 189),  (98, 97),   (97, 99),   (99, 98),\n    (126, 47),  (47, 100),  (100, 126), (166, 79),  (79, 218),  (218, 166),", "    (189, 193), (193, 55),  (55, 189),  (98, 97),   (97, 99),   (99, 98),\n    (126, 47),  (47, 100),  (100, 126), (166, 79),  (79, 218),  (218, 166),\n    (155, 154), (154, 26),  (26, 155),  (209, 49),  (49, 131),  (131, 209),\n    (135, 136), (136, 150), (150, 135), (47, 126),  (126, 217), (217, 47),\n    (223, 52),  (52, 53),   (53, 223),  (45, 51),   (51, 134),  (134, 45),\n    (211, 170), (170, 140), (140, 211), (67, 69),   (69, 108),  (108, 67),\n    (43, 106),  (106, 91),  (91, 43),   (230, 119), (119, 120), (120, 230),\n    (226, 130), (130, 247), (247, 226), (63, 53),   (53, 52),   (52, 63),\n    (238, 20),  (20, 242),  (242, 238), (46, 70),   (70, 156),  (156, 46),\n    (78, 62),   (62, 96),   (96, 78),   (46, 53),   (53, 63),   (63, 46),", "    (238, 20),  (20, 242),  (242, 238), (46, 70),   (70, 156),  (156, 46),\n    (78, 62),   (62, 96),   (96, 78),   (46, 53),   (53, 63),   (63, 46),\n    (143, 34),  (34, 227),  (227, 143), (123, 117), (117, 111), (111, 123),\n    (44, 125),  (125, 19),  (19, 44),   (236, 134), (134, 51),  (51, 236),\n    (216, 206), (206, 205), (205, 216), (154, 153), (153, 22),  (22, 154),\n    (39, 37),   (37, 167),  (167, 39),  (200, 201), (201, 208), (208, 200),\n    (36, 142),  (142, 100), (100, 36),  (57, 212),  (212, 202), (202, 57),\n    (20, 60),   (60, 99),   (99, 20),   (28, 158),  (158, 157), (157, 28),\n    (35, 226),  (226, 113), (113, 35),  (160, 159), (159, 27),  (27, 160),\n    (204, 202), (202, 210), (210, 204), (113, 225), (225, 46),  (46, 113),", "    (35, 226),  (226, 113), (113, 35),  (160, 159), (159, 27),  (27, 160),\n    (204, 202), (202, 210), (210, 204), (113, 225), (225, 46),  (46, 113),\n    (43, 202),  (202, 204), (204, 43),  (62, 76),   (76, 77),   (77, 62),\n    (137, 123), (123, 116), (116, 137), (41, 38),   (38, 72),   (72, 41),\n    (203, 129), (129, 142), (142, 203), (64, 98),   (98, 240),  (240, 64),\n    (49, 102),  (102, 64),  (64, 49),   (41, 73),   (73, 74),   (74, 41),\n    (212, 216), (216, 207), (207, 212), (42, 74),   (74, 184),  (184, 42),\n    (169, 170), (170, 211), (211, 169), (170, 149), (149, 176), (176, 170),\n    (105, 66),  (66, 69),   (69, 105),  (122, 6),   (6, 168),   (168, 122),\n    (123, 147), (147, 187), (187, 123), (96, 77),   (77, 90),   (90, 96),", "    (105, 66),  (66, 69),   (69, 105),  (122, 6),   (6, 168),   (168, 122),\n    (123, 147), (147, 187), (187, 123), (96, 77),   (77, 90),   (90, 96),\n    (65, 55),   (55, 107),  (107, 65),  (89, 90),   (90, 180),  (180, 89),\n    (101, 100), (100, 120), (120, 101), (63, 105),  (105, 104), (104, 63),\n    (93, 137),  (137, 227), (227, 93),  (15, 86),   (86, 85),   (85, 15),\n    (129, 102), (102, 49),  (49, 129),  (14, 87),   (87, 86),   (86, 14),\n    (55, 8),    (8, 9),     (9, 55),    (100, 47),  (47, 121),  (121, 100),\n    (145, 23),  (23, 22),   (22, 145),  (88, 89),   (89, 179),  (179, 88),\n    (6, 122),   (122, 196), (196, 6),   (88, 95),   (95, 96),   (96, 88),\n    (138, 172), (172, 136), (136, 138), (215, 58),  (58, 172),  (172, 215),", "    (6, 122),   (122, 196), (196, 6),   (88, 95),   (95, 96),   (96, 88),\n    (138, 172), (172, 136), (136, 138), (215, 58),  (58, 172),  (172, 215),\n    (115, 48),  (48, 219),  (219, 115), (42, 80),   (80, 81),   (81, 42),\n    (195, 3),   (3, 51),    (51, 195),  (43, 146),  (146, 61),  (61, 43),\n    (171, 175), (175, 199), (199, 171), (81, 82),   (82, 38),   (38, 81),\n    (53, 46),   (46, 225),  (225, 53),  (144, 163), (163, 110), (110, 144),\n    (52, 65),   (65, 66),   (66, 52),   (229, 228), (228, 117), (117, 229),\n    (34, 127),  (127, 234), (234, 34),  (107, 108), (108, 69),  (69, 107),\n    (109, 108), (108, 151), (151, 109), (48, 64),   (64, 235),  (235, 48),\n    (62, 78),   (78, 191),  (191, 62),  (129, 209), (209, 126), (126, 129),", "    (109, 108), (108, 151), (151, 109), (48, 64),   (64, 235),  (235, 48),\n    (62, 78),   (78, 191),  (191, 62),  (129, 209), (209, 126), (126, 129),\n    (111, 35),  (35, 143),  (143, 111), (117, 123), (123, 50),  (50, 117),\n    (222, 65),  (65, 52),   (52, 222),  (19, 125),  (125, 141), (141, 19),\n    (221, 55),  (55, 65),   (65, 221),  (3, 195),   (195, 197), (197, 3),\n    (25, 7),    (7, 33),    (33, 25),   (220, 237), (237, 44),  (44, 220),\n    (70, 71),   (71, 139),  (139, 70),  (122, 193), (193, 245), (245, 122),\n    (247, 130), (130, 33),  (33, 247),  (71, 21),   (21, 162),  (162, 71),\n    (170, 169), (169, 150), (150, 170), (188, 174), (174, 196), (196, 188),\n    (216, 186), (186, 92),  (92, 216),  (2, 97),    (97, 167),  (167, 2),", "    (170, 169), (169, 150), (150, 170), (188, 174), (174, 196), (196, 188),\n    (216, 186), (186, 92),  (92, 216),  (2, 97),    (97, 167),  (167, 2),\n    (141, 125), (125, 241), (241, 141), (164, 167), (167, 37),  (37, 164),\n    (72, 38),   (38, 12),   (12, 72),   (38, 82),   (82, 13),   (13, 38),\n    (63, 68),   (68, 71),   (71, 63),   (226, 35),  (35, 111),  (111, 226),\n    (101, 50),  (50, 205),  (205, 101), (206, 92),  (92, 165),  (165, 206),\n    (209, 198), (198, 217), (217, 209), (165, 167), (167, 97),  (97, 165),\n    (220, 115), (115, 218), (218, 220), (133, 112), (112, 243), (243, 133),\n    (239, 238), (238, 241), (241, 239), (214, 135), (135, 169), (169, 214),\n    (190, 173), (173, 133), (133, 190), (171, 208), (208, 32),  (32, 171),", "    (239, 238), (238, 241), (241, 239), (214, 135), (135, 169), (169, 214),\n    (190, 173), (173, 133), (133, 190), (171, 208), (208, 32),  (32, 171),\n    (125, 44),  (44, 237),  (237, 125), (86, 87),   (87, 178),  (178, 86),\n    (85, 86),   (86, 179),  (179, 85),  (84, 85),   (85, 180),  (180, 84),\n    (83, 84),   (84, 181),  (181, 83),  (201, 83),  (83, 182),  (182, 201),\n    (137, 93),  (93, 132),  (132, 137), (76, 62),   (62, 183),  (183, 76),\n    (61, 76),   (76, 184),  (184, 61),  (57, 61),   (61, 185),  (185, 57),\n    (212, 57),  (57, 186),  (186, 212), (214, 207), (207, 187), (187, 214),\n    (34, 143),  (143, 156), (156, 34),  (79, 239),  (239, 237), (237, 79),\n    (123, 137), (137, 177), (177, 123), (44, 1),    (1, 4),     (4, 44),", "    (34, 143),  (143, 156), (156, 34),  (79, 239),  (239, 237), (237, 79),\n    (123, 137), (137, 177), (177, 123), (44, 1),    (1, 4),     (4, 44),\n    (201, 194), (194, 32),  (32, 201),  (64, 102),  (102, 129), (129, 64),\n    (213, 215), (215, 138), (138, 213), (59, 166),  (166, 219), (219, 59),\n    (242, 99),  (99, 97),   (97, 242),  (2, 94),    (94, 141),  (141, 2),\n    (75, 59),   (59, 235),  (235, 75),  (24, 110),  (110, 228), (228, 24),\n    (25, 130),  (130, 226), (226, 25),  (23, 24),   (24, 229),  (229, 23),\n    (22, 23),   (23, 230),  (230, 22),  (26, 22),   (22, 231),  (231, 26),\n    (112, 26),  (26, 232),  (232, 112), (189, 190), (190, 243), (243, 189),\n    (221, 56),  (56, 190),  (190, 221), (28, 56),   (56, 221),  (221, 28),", "    (112, 26),  (26, 232),  (232, 112), (189, 190), (190, 243), (243, 189),\n    (221, 56),  (56, 190),  (190, 221), (28, 56),   (56, 221),  (221, 28),\n    (27, 28),   (28, 222),  (222, 27),  (29, 27),   (27, 223),  (223, 29),\n    (30, 29),   (29, 224),  (224, 30),  (247, 30),  (30, 225),  (225, 247),\n    (238, 79),  (79, 20),   (20, 238),  (166, 59),  (59, 75),   (75, 166),\n    (60, 75),   (75, 240),  (240, 60),  (147, 177), (177, 215), (215, 147),\n    (20, 79),   (79, 166),  (166, 20),  (187, 147), (147, 213), (213, 187),\n    (112, 233), (233, 244), (244, 112), (233, 128), (128, 245), (245, 233),\n    (128, 114), (114, 188), (188, 128), (114, 217), (217, 174), (174, 114),\n    (131, 115), (115, 220), (220, 131), (217, 198), (198, 236), (236, 217),", "    (128, 114), (114, 188), (188, 128), (114, 217), (217, 174), (174, 114),\n    (131, 115), (115, 220), (220, 131), (217, 198), (198, 236), (236, 217),\n    (198, 131), (131, 134), (134, 198), (177, 132), (132, 58),  (58, 177),\n    (143, 35),  (35, 124),  (124, 143), (110, 163), (163, 7),   (7, 110),\n    (228, 110), (110, 25),  (25, 228),  (356, 389), (389, 368), (368, 356),\n    (11, 302),  (302, 267), (267, 11),  (452, 350), (350, 349), (349, 452),\n    (302, 303), (303, 269), (269, 302), (357, 343), (343, 277), (277, 357),\n    (452, 453), (453, 357), (357, 452), (333, 332), (332, 297), (297, 333),\n    (175, 152), (152, 377), (377, 175), (347, 348), (348, 330), (330, 347),\n    (303, 304), (304, 270), (270, 303), (9, 336),   (336, 337), (337, 9),", "    (175, 152), (152, 377), (377, 175), (347, 348), (348, 330), (330, 347),\n    (303, 304), (304, 270), (270, 303), (9, 336),   (336, 337), (337, 9),\n    (278, 279), (279, 360), (360, 278), (418, 262), (262, 431), (431, 418),\n    (304, 408), (408, 409), (409, 304), (310, 415), (415, 407), (407, 310),\n    (270, 409), (409, 410), (410, 270), (450, 348), (348, 347), (347, 450),\n    (422, 430), (430, 434), (434, 422), (313, 314), (314, 17),  (17, 313),\n    (306, 307), (307, 375), (375, 306), (387, 388), (388, 260), (260, 387),\n    (286, 414), (414, 398), (398, 286), (335, 406), (406, 418), (418, 335),\n    (364, 367), (367, 416), (416, 364), (423, 358), (358, 327), (327, 423),\n    (251, 284), (284, 298), (298, 251), (281, 5),   (5, 4),     (4, 281),", "    (364, 367), (367, 416), (416, 364), (423, 358), (358, 327), (327, 423),\n    (251, 284), (284, 298), (298, 251), (281, 5),   (5, 4),     (4, 281),\n    (373, 374), (374, 253), (253, 373), (307, 320), (320, 321), (321, 307),\n    (425, 427), (427, 411), (411, 425), (421, 313), (313, 18),  (18, 421),\n    (321, 405), (405, 406), (406, 321), (320, 404), (404, 405), (405, 320),\n    (315, 16),  (16, 17),   (17, 315),  (426, 425), (425, 266), (266, 426),\n    (377, 400), (400, 369), (369, 377), (322, 391), (391, 269), (269, 322),\n    (417, 465), (465, 464), (464, 417), (386, 257), (257, 258), (258, 386),\n    (466, 260), (260, 388), (388, 466), (456, 399), (399, 419), (419, 456),\n    (284, 332), (332, 333), (333, 284), (417, 285), (285, 8),   (8, 417),", "    (466, 260), (260, 388), (388, 466), (456, 399), (399, 419), (419, 456),\n    (284, 332), (332, 333), (333, 284), (417, 285), (285, 8),   (8, 417),\n    (346, 340), (340, 261), (261, 346), (413, 441), (441, 285), (285, 413),\n    (327, 460), (460, 328), (328, 327), (355, 371), (371, 329), (329, 355),\n    (392, 439), (439, 438), (438, 392), (382, 341), (341, 256), (256, 382),\n    (429, 420), (420, 360), (360, 429), (364, 394), (394, 379), (379, 364),\n    (277, 343), (343, 437), (437, 277), (443, 444), (444, 283), (283, 443),\n    (275, 440), (440, 363), (363, 275), (431, 262), (262, 369), (369, 431),\n    (297, 338), (338, 337), (337, 297), (273, 375), (375, 321), (321, 273),\n    (450, 451), (451, 349), (349, 450), (446, 342), (342, 467), (467, 446),", "    (297, 338), (338, 337), (337, 297), (273, 375), (375, 321), (321, 273),\n    (450, 451), (451, 349), (349, 450), (446, 342), (342, 467), (467, 446),\n    (293, 334), (334, 282), (282, 293), (458, 461), (461, 462), (462, 458),\n    (276, 353), (353, 383), (383, 276), (308, 324), (324, 325), (325, 308),\n    (276, 300), (300, 293), (293, 276), (372, 345), (345, 447), (447, 372),\n    (352, 345), (345, 340), (340, 352), (274, 1),   (1, 19),    (19, 274),\n    (456, 248), (248, 281), (281, 456), (436, 427), (427, 425), (425, 436),\n    (381, 256), (256, 252), (252, 381), (269, 391), (391, 393), (393, 269),\n    (200, 199), (199, 428), (428, 200), (266, 330), (330, 329), (329, 266),\n    (287, 273), (273, 422), (422, 287), (250, 462), (462, 328), (328, 250),", "    (200, 199), (199, 428), (428, 200), (266, 330), (330, 329), (329, 266),\n    (287, 273), (273, 422), (422, 287), (250, 462), (462, 328), (328, 250),\n    (258, 286), (286, 384), (384, 258), (265, 353), (353, 342), (342, 265),\n    (387, 259), (259, 257), (257, 387), (424, 431), (431, 430), (430, 424),\n    (342, 353), (353, 276), (276, 342), (273, 335), (335, 424), (424, 273),\n    (292, 325), (325, 307), (307, 292), (366, 447), (447, 345), (345, 366),\n    (271, 303), (303, 302), (302, 271), (423, 266), (266, 371), (371, 423),\n    (294, 455), (455, 460), (460, 294), (279, 278), (278, 294), (294, 279),\n    (271, 272), (272, 304), (304, 271), (432, 434), (434, 427), (427, 432),\n    (272, 407), (407, 408), (408, 272), (394, 430), (430, 431), (431, 394),", "    (271, 272), (272, 304), (304, 271), (432, 434), (434, 427), (427, 432),\n    (272, 407), (407, 408), (408, 272), (394, 430), (430, 431), (431, 394),\n    (395, 369), (369, 400), (400, 395), (334, 333), (333, 299), (299, 334),\n    (351, 417), (417, 168), (168, 351), (352, 280), (280, 411), (411, 352),\n    (325, 319), (319, 320), (320, 325), (295, 296), (296, 336), (336, 295),\n    (319, 403), (403, 404), (404, 319), (330, 348), (348, 349), (349, 330),\n    (293, 298), (298, 333), (333, 293), (323, 454), (454, 447), (447, 323),\n    (15, 16),   (16, 315),  (315, 15),  (358, 429), (429, 279), (279, 358),\n    (14, 15),   (15, 316),  (316, 14),  (285, 336), (336, 9),   (9, 285),\n    (329, 349), (349, 350), (350, 329), (374, 380), (380, 252), (252, 374),", "    (14, 15),   (15, 316),  (316, 14),  (285, 336), (336, 9),   (9, 285),\n    (329, 349), (349, 350), (350, 329), (374, 380), (380, 252), (252, 374),\n    (318, 402), (402, 403), (403, 318), (6, 197),   (197, 419), (419, 6),\n    (318, 319), (319, 325), (325, 318), (367, 364), (364, 365), (365, 367),\n    (435, 367), (367, 397), (397, 435), (344, 438), (438, 439), (439, 344),\n    (272, 271), (271, 311), (311, 272), (195, 5),   (5, 281),   (281, 195),\n    (273, 287), (287, 291), (291, 273), (396, 428), (428, 199), (199, 396),\n    (311, 271), (271, 268), (268, 311), (283, 444), (444, 445), (445, 283),\n    (373, 254), (254, 339), (339, 373), (282, 334), (334, 296), (296, 282),\n    (449, 347), (347, 346), (346, 449), (264, 447), (447, 454), (454, 264),", "    (373, 254), (254, 339), (339, 373), (282, 334), (334, 296), (296, 282),\n    (449, 347), (347, 346), (346, 449), (264, 447), (447, 454), (454, 264),\n    (336, 296), (296, 299), (299, 336), (338, 10),  (10, 151),  (151, 338),\n    (278, 439), (439, 455), (455, 278), (292, 407), (407, 415), (415, 292),\n    (358, 371), (371, 355), (355, 358), (340, 345), (345, 372), (372, 340),\n    (346, 347), (347, 280), (280, 346), (442, 443), (443, 282), (282, 442),\n    (19, 94),   (94, 370),  (370, 19),  (441, 442), (442, 295), (295, 441),\n    (248, 419), (419, 197), (197, 248), (263, 255), (255, 359), (359, 263),\n    (440, 275), (275, 274), (274, 440), (300, 383), (383, 368), (368, 300),\n    (351, 412), (412, 465), (465, 351), (263, 467), (467, 466), (466, 263),", "    (440, 275), (275, 274), (274, 440), (300, 383), (383, 368), (368, 300),\n    (351, 412), (412, 465), (465, 351), (263, 467), (467, 466), (466, 263),\n    (301, 368), (368, 389), (389, 301), (395, 378), (378, 379), (379, 395),\n    (412, 351), (351, 419), (419, 412), (436, 426), (426, 322), (322, 436),\n    (2, 164),   (164, 393), (393, 2),   (370, 462), (462, 461), (461, 370),\n    (164, 0),   (0, 267),   (267, 164), (302, 11),  (11, 12),   (12, 302),\n    (268, 12),  (12, 13),   (13, 268),  (293, 300), (300, 301), (301, 293),\n    (446, 261), (261, 340), (340, 446), (330, 266), (266, 425), (425, 330),\n    (426, 423), (423, 391), (391, 426), (429, 355), (355, 437), (437, 429),\n    (391, 327), (327, 326), (326, 391), (440, 457), (457, 438), (438, 440),", "    (426, 423), (423, 391), (391, 426), (429, 355), (355, 437), (437, 429),\n    (391, 327), (327, 326), (326, 391), (440, 457), (457, 438), (438, 440),\n    (341, 382), (382, 362), (362, 341), (459, 457), (457, 461), (461, 459),\n    (434, 430), (430, 394), (394, 434), (414, 463), (463, 362), (362, 414),\n    (396, 369), (369, 262), (262, 396), (354, 461), (461, 457), (457, 354),\n    (316, 403), (403, 402), (402, 316), (315, 404), (404, 403), (403, 315),\n    (314, 405), (405, 404), (404, 314), (313, 406), (406, 405), (405, 313),\n    (421, 418), (418, 406), (406, 421), (366, 401), (401, 361), (361, 366),\n    (306, 408), (408, 407), (407, 306), (291, 409), (409, 408), (408, 291),\n    (287, 410), (410, 409), (409, 287), (432, 436), (436, 410), (410, 432),", "    (306, 408), (408, 407), (407, 306), (291, 409), (409, 408), (408, 291),\n    (287, 410), (410, 409), (409, 287), (432, 436), (436, 410), (410, 432),\n    (434, 416), (416, 411), (411, 434), (264, 368), (368, 383), (383, 264),\n    (309, 438), (438, 457), (457, 309), (352, 376), (376, 401), (401, 352),\n    (274, 275), (275, 4),   (4, 274),   (421, 428), (428, 262), (262, 421),\n    (294, 327), (327, 358), (358, 294), (433, 416), (416, 367), (367, 433),\n    (289, 455), (455, 439), (439, 289), (462, 370), (370, 326), (326, 462),\n    (2, 326),   (326, 370), (370, 2),   (305, 460), (460, 455), (455, 305),\n    (254, 449), (449, 448), (448, 254), (255, 261), (261, 446), (446, 255),\n    (253, 450), (450, 449), (449, 253), (252, 451), (451, 450), (450, 252),", "    (254, 449), (449, 448), (448, 254), (255, 261), (261, 446), (446, 255),\n    (253, 450), (450, 449), (449, 253), (252, 451), (451, 450), (450, 252),\n    (256, 452), (452, 451), (451, 256), (341, 453), (453, 452), (452, 341),\n    (413, 464), (464, 463), (463, 413), (441, 413), (413, 414), (414, 441),\n    (258, 442), (442, 441), (441, 258), (257, 443), (443, 442), (442, 257),\n    (259, 444), (444, 443), (443, 259), (260, 445), (445, 444), (444, 260),\n    (467, 342), (342, 445), (445, 467), (459, 458), (458, 250), (250, 459),\n    (289, 392), (392, 290), (290, 289), (290, 328), (328, 460), (460, 290),\n    (376, 433), (433, 435), (435, 376), (250, 290), (290, 392), (392, 250),\n    (411, 416), (416, 433), (433, 411), (341, 463), (463, 464), (464, 341),", "    (376, 433), (433, 435), (435, 376), (250, 290), (290, 392), (392, 250),\n    (411, 416), (416, 433), (433, 411), (341, 463), (463, 464), (464, 341),\n    (453, 464), (464, 465), (465, 453), (357, 465), (465, 412), (412, 357),\n    (343, 412), (412, 399), (399, 343), (360, 363), (363, 440), (440, 360),\n    (437, 399), (399, 456), (456, 437), (420, 456), (456, 363), (363, 420),\n    (401, 435), (435, 288), (288, 401), (372, 383), (383, 353), (353, 372),\n    (339, 255), (255, 249), (249, 339), (448, 261), (261, 255), (255, 448),\n    (133, 243), (243, 190), (190, 133), (133, 155), (155, 112), (112, 133),\n    (33, 246),  (246, 247), (247, 33),  (33, 130),  (130, 25),  (25, 33),\n    (398, 384), (384, 286), (286, 398), (362, 398), (398, 414), (414, 362),", "    (33, 246),  (246, 247), (247, 33),  (33, 130),  (130, 25),  (25, 33),\n    (398, 384), (384, 286), (286, 398), (362, 398), (398, 414), (414, 362),\n    (362, 463), (463, 341), (341, 362), (263, 359), (359, 467), (467, 263),\n    (263, 249), (249, 255), (255, 263), (466, 467), (467, 260), (260, 466),\n    (75, 60),   (60, 166),  (166, 75),  (238, 239), (239, 79),  (79, 238),\n    (162, 127), (127, 139), (139, 162), (72, 11),   (11, 37),   (37, 72),\n    (121, 232), (232, 120), (120, 121), (73, 72),   (72, 39),   (39, 73),\n    (114, 128), (128, 47),  (47, 114),  (233, 232), (232, 128), (128, 233),\n    (103, 104), (104, 67),  (67, 103),  (152, 175), (175, 148), (148, 152),\n    (119, 118), (118, 101), (101, 119), (74, 73),   (73, 40),   (40, 74),", "    (103, 104), (104, 67),  (67, 103),  (152, 175), (175, 148), (148, 152),\n    (119, 118), (118, 101), (101, 119), (74, 73),   (73, 40),   (40, 74),\n    (107, 9),   (9, 108),   (108, 107), (49, 48),   (48, 131),  (131, 49),\n    (32, 194),  (194, 211), (211, 32),  (184, 74),  (74, 185),  (185, 184),\n    (191, 80),  (80, 183),  (183, 191), (185, 40),  (40, 186),  (186, 185),\n    (119, 230), (230, 118), (118, 119), (210, 202), (202, 214), (214, 210),\n    (84, 83),   (83, 17),   (17, 84),   (77, 76),   (76, 146),  (146, 77),\n    (161, 160), (160, 30),  (30, 161),  (190, 56),  (56, 173),  (173, 190),\n    (182, 106), (106, 194), (194, 182), (138, 135), (135, 192), (192, 138),\n    (129, 203), (203, 98),  (98, 129),  (54, 21),   (21, 68),   (68, 54),", "    (182, 106), (106, 194), (194, 182), (138, 135), (135, 192), (192, 138),\n    (129, 203), (203, 98),  (98, 129),  (54, 21),   (21, 68),   (68, 54),\n    (5, 51),    (51, 4),    (4, 5),     (145, 144), (144, 23),  (23, 145),\n    (90, 77),   (77, 91),   (91, 90),   (207, 205), (205, 187), (187, 207),\n    (83, 201),  (201, 18),  (18, 83),   (181, 91),  (91, 182),  (182, 181),\n    (180, 90),  (90, 181),  (181, 180), (16, 85),   (85, 17),   (17, 16),\n    (205, 206), (206, 36),  (36, 205),  (176, 148), (148, 140), (140, 176),\n    (165, 92),  (92, 39),   (39, 165),  (245, 193), (193, 244), (244, 245),\n    (27, 159),  (159, 28),  (28, 27),   (30, 247),  (247, 161), (161, 30),\n    (174, 236), (236, 196), (196, 174), (103, 54),  (54, 104),  (104, 103),", "    (27, 159),  (159, 28),  (28, 27),   (30, 247),  (247, 161), (161, 30),\n    (174, 236), (236, 196), (196, 174), (103, 54),  (54, 104),  (104, 103),\n    (55, 193),  (193, 8),   (8, 55),    (111, 117), (117, 31),  (31, 111),\n    (221, 189), (189, 55),  (55, 221),  (240, 98),  (98, 99),   (99, 240),\n    (142, 126), (126, 100), (100, 142), (219, 166), (166, 218), (218, 219),\n    (112, 155), (155, 26),  (26, 112),  (198, 209), (209, 131), (131, 198),\n    (169, 135), (135, 150), (150, 169), (114, 47),  (47, 217),  (217, 114),\n    (224, 223), (223, 53),  (53, 224),  (220, 45),  (45, 134),  (134, 220),\n    (32, 211),  (211, 140), (140, 32),  (109, 67),  (67, 108),  (108, 109),\n    (146, 43),  (43, 91),   (91, 146),  (231, 230), (230, 120), (120, 231),", "    (32, 211),  (211, 140), (140, 32),  (109, 67),  (67, 108),  (108, 109),\n    (146, 43),  (43, 91),   (91, 146),  (231, 230), (230, 120), (120, 231),\n    (113, 226), (226, 247), (247, 113), (105, 63),  (63, 52),   (52, 105),\n    (241, 238), (238, 242), (242, 241), (124, 46),  (46, 156),  (156, 124),\n    (95, 78),   (78, 96),   (96, 95),   (70, 46),   (46, 63),   (63, 70),\n    (116, 143), (143, 227), (227, 116), (116, 123), (123, 111), (111, 116),\n    (1, 44),    (44, 19),   (19, 1),    (3, 236),   (236, 51),  (51, 3),\n    (207, 216), (216, 205), (205, 207), (26, 154),  (154, 22),  (22, 26),\n    (165, 39),  (39, 167),  (167, 165), (199, 200), (200, 208), (208, 199),\n    (101, 36),  (36, 100),  (100, 101), (43, 57),   (57, 202),  (202, 43),", "    (165, 39),  (39, 167),  (167, 165), (199, 200), (200, 208), (208, 199),\n    (101, 36),  (36, 100),  (100, 101), (43, 57),   (57, 202),  (202, 43),\n    (242, 20),  (20, 99),   (99, 242),  (56, 28),   (28, 157),  (157, 56),\n    (124, 35),  (35, 113),  (113, 124), (29, 160),  (160, 27),  (27, 29),\n    (211, 204), (204, 210), (210, 211), (124, 113), (113, 46),  (46, 124),\n    (106, 43),  (43, 204),  (204, 106), (96, 62),   (62, 77),   (77, 96),\n    (227, 137), (137, 116), (116, 227), (73, 41),   (41, 72),   (72, 73),\n    (36, 203),  (203, 142), (142, 36),  (235, 64),  (64, 240),  (240, 235),\n    (48, 49),   (49, 64),   (64, 48),   (42, 41),   (41, 74),   (74, 42),\n    (214, 212), (212, 207), (207, 214), (183, 42),  (42, 184),  (184, 183),", "    (48, 49),   (49, 64),   (64, 48),   (42, 41),   (41, 74),   (74, 42),\n    (214, 212), (212, 207), (207, 214), (183, 42),  (42, 184),  (184, 183),\n    (210, 169), (169, 211), (211, 210), (140, 170), (170, 176), (176, 140),\n    (104, 105), (105, 69),  (69, 104),  (193, 122), (122, 168), (168, 193),\n    (50, 123),  (123, 187), (187, 50),  (89, 96),   (96, 90),   (90, 89),\n    (66, 65),   (65, 107),  (107, 66),  (179, 89),  (89, 180),  (180, 179),\n    (119, 101), (101, 120), (120, 119), (68, 63),   (63, 104),  (104, 68),\n    (234, 93),  (93, 227),  (227, 234), (16, 15),   (15, 85),   (85, 16),\n    (209, 129), (129, 49),  (49, 209),  (15, 14),   (14, 86),   (86, 15),\n    (107, 55),  (55, 9),    (9, 107),   (120, 100), (100, 121), (121, 120),", "    (209, 129), (129, 49),  (49, 209),  (15, 14),   (14, 86),   (86, 15),\n    (107, 55),  (55, 9),    (9, 107),   (120, 100), (100, 121), (121, 120),\n    (153, 145), (145, 22),  (22, 153),  (178, 88),  (88, 179),  (179, 178),\n    (197, 6),   (6, 196),   (196, 197), (89, 88),   (88, 96),   (96, 89),\n    (135, 138), (138, 136), (136, 135), (138, 215), (215, 172), (172, 138),\n    (218, 115), (115, 219), (219, 218), (41, 42),   (42, 81),   (81, 41),\n    (5, 195),   (195, 51),  (51, 5),    (57, 43),   (43, 61),   (61, 57),\n    (208, 171), (171, 199), (199, 208), (41, 81),   (81, 38),   (38, 41),\n    (224, 53),  (53, 225),  (225, 224), (24, 144),  (144, 110), (110, 24),\n    (105, 52),  (52, 66),   (66, 105),  (118, 229), (229, 117), (117, 118),", "    (224, 53),  (53, 225),  (225, 224), (24, 144),  (144, 110), (110, 24),\n    (105, 52),  (52, 66),   (66, 105),  (118, 229), (229, 117), (117, 118),\n    (227, 34),  (34, 234),  (234, 227), (66, 107),  (107, 69),  (69, 66),\n    (10, 109),  (109, 151), (151, 10),  (219, 48),  (48, 235),  (235, 219),\n    (183, 62),  (62, 191),  (191, 183), (142, 129), (129, 126), (126, 142),\n    (116, 111), (111, 143), (143, 116), (118, 117), (117, 50),  (50, 118),\n    (223, 222), (222, 52),  (52, 223),  (94, 19),   (19, 141),  (141, 94),\n    (222, 221), (221, 65),  (65, 222),  (196, 3),   (3, 197),   (197, 196),\n    (45, 220),  (220, 44),  (44, 45),   (156, 70),  (70, 139),  (139, 156),\n    (188, 122), (122, 245), (245, 188), (139, 71),  (71, 162),  (162, 139),", "    (45, 220),  (220, 44),  (44, 45),   (156, 70),  (70, 139),  (139, 156),\n    (188, 122), (122, 245), (245, 188), (139, 71),  (71, 162),  (162, 139),\n    (149, 170), (170, 150), (150, 149), (122, 188), (188, 196), (196, 122),\n    (206, 216), (216, 92),  (92, 206),  (164, 2),   (2, 167),   (167, 164),\n    (242, 141), (141, 241), (241, 242), (0, 164),   (164, 37),  (37, 0),\n    (11, 72),   (72, 12),   (12, 11),   (12, 38),   (38, 13),   (13, 12),\n    (70, 63),   (63, 71),   (71, 70),   (31, 226),  (226, 111), (111, 31),\n    (36, 101),  (101, 205), (205, 36),  (203, 206), (206, 165), (165, 203),\n    (126, 209), (209, 217), (217, 126), (98, 165),  (165, 97),  (97, 98),\n    (237, 220), (220, 218), (218, 237), (237, 239), (239, 241), (241, 237),", "    (126, 209), (209, 217), (217, 126), (98, 165),  (165, 97),  (97, 98),\n    (237, 220), (220, 218), (218, 237), (237, 239), (239, 241), (241, 237),\n    (210, 214), (214, 169), (169, 210), (140, 171), (171, 32),  (32, 140),\n    (241, 125), (125, 237), (237, 241), (179, 86),  (86, 178),  (178, 179),\n    (180, 85),  (85, 179),  (179, 180), (181, 84),  (84, 180),  (180, 181),\n    (182, 83),  (83, 181),  (181, 182), (194, 201), (201, 182), (182, 194),\n    (177, 137), (137, 132), (132, 177), (184, 76),  (76, 183),  (183, 184),\n    (185, 61),  (61, 184),  (184, 185), (186, 57),  (57, 185),  (185, 186),\n    (216, 212), (212, 186), (186, 216), (192, 214), (214, 187), (187, 192),\n    (139, 34),  (34, 156),  (156, 139), (218, 79),  (79, 237),  (237, 218),", "    (216, 212), (212, 186), (186, 216), (192, 214), (214, 187), (187, 192),\n    (139, 34),  (34, 156),  (156, 139), (218, 79),  (79, 237),  (237, 218),\n    (147, 123), (123, 177), (177, 147), (45, 44),   (44, 4),    (4, 45),\n    (208, 201), (201, 32),  (32, 208),  (98, 64),   (64, 129),  (129, 98),\n    (192, 213), (213, 138), (138, 192), (235, 59),  (59, 219),  (219, 235),\n    (141, 242), (242, 97),  (97, 141),  (97, 2),    (2, 141),   (141, 97),\n    (240, 75),  (75, 235),  (235, 240), (229, 24),  (24, 228),  (228, 229),\n    (31, 25),   (25, 226),  (226, 31),  (230, 23),  (23, 229),  (229, 230),\n    (231, 22),  (22, 230),  (230, 231), (232, 26),  (26, 231),  (231, 232),\n    (233, 112), (112, 232), (232, 233), (244, 189), (189, 243), (243, 244),", "    (231, 22),  (22, 230),  (230, 231), (232, 26),  (26, 231),  (231, 232),\n    (233, 112), (112, 232), (232, 233), (244, 189), (189, 243), (243, 244),\n    (189, 221), (221, 190), (190, 189), (222, 28),  (28, 221),  (221, 222),\n    (223, 27),  (27, 222),  (222, 223), (224, 29),  (29, 223),  (223, 224),\n    (225, 30),  (30, 224),  (224, 225), (113, 247), (247, 225), (225, 113),\n    (99, 60),   (60, 240),  (240, 99),  (213, 147), (147, 215), (215, 213),\n    (60, 20),   (20, 166),  (166, 60),  (192, 187), (187, 213), (213, 192),\n    (243, 112), (112, 244), (244, 243), (244, 233), (233, 245), (245, 244),\n    (245, 128), (128, 188), (188, 245), (188, 114), (114, 174), (174, 188),\n    (134, 131), (131, 220), (220, 134), (174, 217), (217, 236), (236, 174),", "    (245, 128), (128, 188), (188, 245), (188, 114), (114, 174), (174, 188),\n    (134, 131), (131, 220), (220, 134), (174, 217), (217, 236), (236, 174),\n    (236, 198), (198, 134), (134, 236), (215, 177), (177, 58),  (58, 215),\n    (156, 143), (143, 124), (124, 156), (25, 110),  (110, 7),   (7, 25),\n    (31, 228),  (228, 25),  (25, 31),   (264, 356), (356, 368), (368, 264),\n    (0, 11),    (11, 267),  (267, 0),   (451, 452), (452, 349), (349, 451),\n    (267, 302), (302, 269), (269, 267), (350, 357), (357, 277), (277, 350),\n    (350, 452), (452, 357), (357, 350), (299, 333), (333, 297), (297, 299),\n    (396, 175), (175, 377), (377, 396), (280, 347), (347, 330), (330, 280),\n    (269, 303), (303, 270), (270, 269), (151, 9),   (9, 337),   (337, 151),", "    (396, 175), (175, 377), (377, 396), (280, 347), (347, 330), (330, 280),\n    (269, 303), (303, 270), (270, 269), (151, 9),   (9, 337),   (337, 151),\n    (344, 278), (278, 360), (360, 344), (424, 418), (418, 431), (431, 424),\n    (270, 304), (304, 409), (409, 270), (272, 310), (310, 407), (407, 272),\n    (322, 270), (270, 410), (410, 322), (449, 450), (450, 347), (347, 449),\n    (432, 422), (422, 434), (434, 432), (18, 313),  (313, 17),  (17, 18),\n    (291, 306), (306, 375), (375, 291), (259, 387), (387, 260), (260, 259),\n    (424, 335), (335, 418), (418, 424), (434, 364), (364, 416), (416, 434),\n    (391, 423), (423, 327), (327, 391), (301, 251), (251, 298), (298, 301),\n    (275, 281), (281, 4),   (4, 275),   (254, 373), (373, 253), (253, 254),", "    (391, 423), (423, 327), (327, 391), (301, 251), (251, 298), (298, 301),\n    (275, 281), (281, 4),   (4, 275),   (254, 373), (373, 253), (253, 254),\n    (375, 307), (307, 321), (321, 375), (280, 425), (425, 411), (411, 280),\n    (200, 421), (421, 18),  (18, 200),  (335, 321), (321, 406), (406, 335),\n    (321, 320), (320, 405), (405, 321), (314, 315), (315, 17),  (17, 314),\n    (423, 426), (426, 266), (266, 423), (396, 377), (377, 369), (369, 396),\n    (270, 322), (322, 269), (269, 270), (413, 417), (417, 464), (464, 413),\n    (385, 386), (386, 258), (258, 385), (248, 456), (456, 419), (419, 248),\n    (298, 284), (284, 333), (333, 298), (168, 417), (417, 8),   (8, 168),\n    (448, 346), (346, 261), (261, 448), (417, 413), (413, 285), (285, 417),", "    (298, 284), (284, 333), (333, 298), (168, 417), (417, 8),   (8, 168),\n    (448, 346), (346, 261), (261, 448), (417, 413), (413, 285), (285, 417),\n    (326, 327), (327, 328), (328, 326), (277, 355), (355, 329), (329, 277),\n    (309, 392), (392, 438), (438, 309), (381, 382), (382, 256), (256, 381),\n    (279, 429), (429, 360), (360, 279), (365, 364), (364, 379), (379, 365),\n    (355, 277), (277, 437), (437, 355), (282, 443), (443, 283), (283, 282),\n    (281, 275), (275, 363), (363, 281), (395, 431), (431, 369), (369, 395),\n    (299, 297), (297, 337), (337, 299), (335, 273), (273, 321), (321, 335),\n    (348, 450), (450, 349), (349, 348), (359, 446), (446, 467), (467, 359),\n    (283, 293), (293, 282), (282, 283), (250, 458), (458, 462), (462, 250),", "    (348, 450), (450, 349), (349, 348), (359, 446), (446, 467), (467, 359),\n    (283, 293), (293, 282), (282, 283), (250, 458), (458, 462), (462, 250),\n    (300, 276), (276, 383), (383, 300), (292, 308), (308, 325), (325, 292),\n    (283, 276), (276, 293), (293, 283), (264, 372), (372, 447), (447, 264),\n    (346, 352), (352, 340), (340, 346), (354, 274), (274, 19),  (19, 354),\n    (363, 456), (456, 281), (281, 363), (426, 436), (436, 425), (425, 426),\n    (380, 381), (381, 252), (252, 380), (267, 269), (269, 393), (393, 267),\n    (421, 200), (200, 428), (428, 421), (371, 266), (266, 329), (329, 371),\n    (432, 287), (287, 422), (422, 432), (290, 250), (250, 328), (328, 290),\n    (385, 258), (258, 384), (384, 385), (446, 265), (265, 342), (342, 446),", "    (432, 287), (287, 422), (422, 432), (290, 250), (250, 328), (328, 290),\n    (385, 258), (258, 384), (384, 385), (446, 265), (265, 342), (342, 446),\n    (386, 387), (387, 257), (257, 386), (422, 424), (424, 430), (430, 422),\n    (445, 342), (342, 276), (276, 445), (422, 273), (273, 424), (424, 422),\n    (306, 292), (292, 307), (307, 306), (352, 366), (366, 345), (345, 352),\n    (268, 271), (271, 302), (302, 268), (358, 423), (423, 371), (371, 358),\n    (327, 294), (294, 460), (460, 327), (331, 279), (279, 294), (294, 331),\n    (303, 271), (271, 304), (304, 303), (436, 432), (432, 427), (427, 436),\n    (304, 272), (272, 408), (408, 304), (395, 394), (394, 431), (431, 395),\n    (378, 395), (395, 400), (400, 378), (296, 334), (334, 299), (299, 296),", "    (304, 272), (272, 408), (408, 304), (395, 394), (394, 431), (431, 395),\n    (378, 395), (395, 400), (400, 378), (296, 334), (334, 299), (299, 296),\n    (6, 351),   (351, 168), (168, 6),   (376, 352), (352, 411), (411, 376),\n    (307, 325), (325, 320), (320, 307), (285, 295), (295, 336), (336, 285),\n    (320, 319), (319, 404), (404, 320), (329, 330), (330, 349), (349, 329),\n    (334, 293), (293, 333), (333, 334), (366, 323), (323, 447), (447, 366),\n    (316, 15),  (15, 315),  (315, 316), (331, 358), (358, 279), (279, 331),\n    (317, 14),  (14, 316),  (316, 317), (8, 285),   (285, 9),   (9, 8),\n    (277, 329), (329, 350), (350, 277), (253, 374), (374, 252), (252, 253),\n    (319, 318), (318, 403), (403, 319), (351, 6),   (6, 419),   (419, 351),", "    (277, 329), (329, 350), (350, 277), (253, 374), (374, 252), (252, 253),\n    (319, 318), (318, 403), (403, 319), (351, 6),   (6, 419),   (419, 351),\n    (324, 318), (318, 325), (325, 324), (397, 367), (367, 365), (365, 397),\n    (288, 435), (435, 397), (397, 288), (278, 344), (344, 439), (439, 278),\n    (310, 272), (272, 311), (311, 310), (248, 195), (195, 281), (281, 248),\n    (375, 273), (273, 291), (291, 375), (175, 396), (396, 199), (199, 175),\n    (312, 311), (311, 268), (268, 312), (276, 283), (283, 445), (445, 276),\n    (390, 373), (373, 339), (339, 390), (295, 282), (282, 296), (296, 295),\n    (448, 449), (449, 346), (346, 448), (356, 264), (264, 454), (454, 356),\n    (337, 336), (336, 299), (299, 337), (337, 338), (338, 151), (151, 337),", "    (448, 449), (449, 346), (346, 448), (356, 264), (264, 454), (454, 356),\n    (337, 336), (336, 299), (299, 337), (337, 338), (338, 151), (151, 337),\n    (294, 278), (278, 455), (455, 294), (308, 292), (292, 415), (415, 308),\n    (429, 358), (358, 355), (355, 429), (265, 340), (340, 372), (372, 265),\n    (352, 346), (346, 280), (280, 352), (295, 442), (442, 282), (282, 295),\n    (354, 19),  (19, 370),  (370, 354), (285, 441), (441, 295), (295, 285),\n    (195, 248), (248, 197), (197, 195), (457, 440), (440, 274), (274, 457),\n    (301, 300), (300, 368), (368, 301), (417, 351), (351, 465), (465, 417),\n    (251, 301), (301, 389), (389, 251), (394, 395), (395, 379), (379, 394),\n    (399, 412), (412, 419), (419, 399), (410, 436), (436, 322), (322, 410),", "    (251, 301), (301, 389), (389, 251), (394, 395), (395, 379), (379, 394),\n    (399, 412), (412, 419), (419, 399), (410, 436), (436, 322), (322, 410),\n    (326, 2),   (2, 393),   (393, 326), (354, 370), (370, 461), (461, 354),\n    (393, 164), (164, 267), (267, 393), (268, 302), (302, 12),  (12, 268),\n    (312, 268), (268, 13),  (13, 312),  (298, 293), (293, 301), (301, 298),\n    (265, 446), (446, 340), (340, 265), (280, 330), (330, 425), (425, 280),\n    (322, 426), (426, 391), (391, 322), (420, 429), (429, 437), (437, 420),\n    (393, 391), (391, 326), (326, 393), (344, 440), (440, 438), (438, 344),\n    (458, 459), (459, 461), (461, 458), (364, 434), (434, 394), (394, 364),\n    (428, 396), (396, 262), (262, 428), (274, 354), (354, 457), (457, 274),", "    (458, 459), (459, 461), (461, 458), (364, 434), (434, 394), (394, 364),\n    (428, 396), (396, 262), (262, 428), (274, 354), (354, 457), (457, 274),\n    (317, 316), (316, 402), (402, 317), (316, 315), (315, 403), (403, 316),\n    (315, 314), (314, 404), (404, 315), (314, 313), (313, 405), (405, 314),\n    (313, 421), (421, 406), (406, 313), (323, 366), (366, 361), (361, 323),\n    (292, 306), (306, 407), (407, 292), (306, 291), (291, 408), (408, 306),\n    (291, 287), (287, 409), (409, 291), (287, 432), (432, 410), (410, 287),\n    (427, 434), (434, 411), (411, 427), (372, 264), (264, 383), (383, 372),\n    (459, 309), (309, 457), (457, 459), (366, 352), (352, 401), (401, 366),\n    (1, 274),   (274, 4),   (4, 1),     (418, 421), (421, 262), (262, 418),", "    (459, 309), (309, 457), (457, 459), (366, 352), (352, 401), (401, 366),\n    (1, 274),   (274, 4),   (4, 1),     (418, 421), (421, 262), (262, 418),\n    (331, 294), (294, 358), (358, 331), (435, 433), (433, 367), (367, 435),\n    (392, 289), (289, 439), (439, 392), (328, 462), (462, 326), (326, 328),\n    (94, 2),    (2, 370),   (370, 94),  (289, 305), (305, 455), (455, 289),\n    (339, 254), (254, 448), (448, 339), (359, 255), (255, 446), (446, 359),\n    (254, 253), (253, 449), (449, 254), (253, 252), (252, 450), (450, 253),\n    (252, 256), (256, 451), (451, 252), (256, 341), (341, 452), (452, 256),\n    (414, 413), (413, 463), (463, 414), (286, 441), (441, 414), (414, 286),\n    (286, 258), (258, 441), (441, 286), (258, 257), (257, 442), (442, 258),", "    (414, 413), (413, 463), (463, 414), (286, 441), (441, 414), (414, 286),\n    (286, 258), (258, 441), (441, 286), (258, 257), (257, 442), (442, 258),\n    (257, 259), (259, 443), (443, 257), (259, 260), (260, 444), (444, 259),\n    (260, 467), (467, 445), (445, 260), (309, 459), (459, 250), (250, 309),\n    (305, 289), (289, 290), (290, 305), (305, 290), (290, 460), (460, 305),\n    (401, 376), (376, 435), (435, 401), (309, 250), (250, 392), (392, 309),\n    (376, 411), (411, 433), (433, 376), (453, 341), (341, 464), (464, 453),\n    (357, 453), (453, 465), (465, 357), (343, 357), (357, 412), (412, 343),\n    (437, 343), (343, 399), (399, 437), (344, 360), (360, 440), (440, 344),\n    (420, 437), (437, 456), (456, 420), (360, 420), (420, 363), (363, 360),", "    (437, 343), (343, 399), (399, 437), (344, 360), (360, 440), (440, 344),\n    (420, 437), (437, 456), (456, 420), (360, 420), (420, 363), (363, 360),\n    (361, 401), (401, 288), (288, 361), (265, 372), (372, 353), (353, 265),\n    (390, 339), (339, 249), (249, 390), (339, 448), (448, 255), (255, 339)\n)\n\nFACEMESH_LIPS = (\n    (61, 146), (146, 91), (91, 181), (181, 84), (84, 17),\n    (17, 314), (314, 405), (405, 321), (321, 375),\n    (375, 291), (61, 185), (185, 40), (40, 39), (39, 37),", "    (17, 314), (314, 405), (405, 321), (321, 375),\n    (375, 291), (61, 185), (185, 40), (40, 39), (39, 37),\n    (37, 0), (0, 267),\n    (267, 269), (269, 270), (270, 409), (409, 291),\n    (78, 95), (95, 88), (88, 178), (178, 87), (87, 14),\n    (14, 317), (317, 402), (402, 318), (318, 324),\n    (324, 308), (78, 191), (191, 80), (80, 81), (81, 82),\n    (82, 13), (13, 312), (312, 311), (311, 310),\n    (310, 415), (415, 308)\n)", "    (310, 415), (415, 308)\n)\n\nFACEMESH_LEFT_EYE = (\n    (263, 249), (249, 390), (390, 373), (373, 374),\n    (374, 380), (380, 381), (381, 382), (382, 362),\n    (263, 466), (466, 388), (388, 387), (387, 386),\n    (386, 385), (385, 384), (384, 398), (398, 362)\n)\n", ")\n\nFACEMESH_LEFT_IRIS = (\n    (474, 475), (475, 476), (476, 477), (477, 474)\n)\n\nFACEMESH_LEFT_EYEBROW = (\n    (276, 283), (283, 282), (282, 295),\n    (295, 285), (300, 293), (293, 334),\n    (334, 296), (296, 336)", "    (295, 285), (300, 293), (293, 334),\n    (334, 296), (296, 336)\n)\n\nFACEMESH_RIGHT_EYE = (\n    (33, 7), (7, 163), (163, 144), (144, 145),\n    (145, 153), (153, 154), (154, 155), (155, 133),\n    (33, 246), (246, 161), (161, 160), (160, 159),\n    (159, 158), (158, 157), (157, 173), (173, 133)\n)", "    (159, 158), (158, 157), (157, 173), (173, 133)\n)\n\nFACEMESH_RIGHT_EYEBROW = (\n    (46, 53), (53, 52), (52, 65), (65, 55),\n    (70, 63), (63, 105), (105, 66), (66, 107)\n)\n\nFACEMESH_RIGHT_IRIS = (\n    (469, 470), (470, 471), (471, 472), (472, 469)", "FACEMESH_RIGHT_IRIS = (\n    (469, 470), (470, 471), (471, 472), (472, 469)\n)\n\nFACEMESH_FACE_OVAL = (\n    (10, 338), (338, 297), (297, 332), (332, 284),\n    (284, 251), (251, 389), (389, 356), (356, 454),\n    (454, 323), (323, 361), (361, 288), (288, 397),\n    (397, 365), (365, 379), (379, 378), (378, 400),\n    (400, 377), (377, 152), (152, 148), (148, 176),", "    (397, 365), (365, 379), (379, 378), (378, 400),\n    (400, 377), (377, 152), (152, 148), (148, 176),\n    (176, 149), (149, 150), (150, 136), (136, 172),\n    (172, 58), (58, 132), (132, 93), (93, 234),\n    (234, 127), (127, 162), (162, 21), (21, 54),\n    (54, 103), (103, 67), (67, 109), (109, 10)\n)\n\nFACEMESH_CONTOURS = FACEMESH_LIPS + FACEMESH_LEFT_EYE + FACEMESH_LEFT_EYEBROW + FACEMESH_RIGHT_EYE + \\\n                    FACEMESH_RIGHT_EYEBROW + FACEMESH_FACE_OVAL", "FACEMESH_CONTOURS = FACEMESH_LIPS + FACEMESH_LEFT_EYE + FACEMESH_LEFT_EYEBROW + FACEMESH_RIGHT_EYE + \\\n                    FACEMESH_RIGHT_EYEBROW + FACEMESH_FACE_OVAL\n"]}
{"filename": "src/sign_language_tools/visualization/__init__.py", "chunked_list": ["\n__all__ = [\n    'VideoPlayer',\n]\n\nfrom sign_language_tools.visualization.video.video_player import VideoPlayer\n"]}
{"filename": "src/sign_language_tools/visualization/plot/segments.py", "chunked_list": ["import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef plot_segments(segments: np.ndarray, x_lim=None):\n    fig, ax = plt.subplots(1, 1, figsize=(30, 2))\n\n    if x_lim is not None:\n        ax.set_xlim(*x_lim)\n\n    for seg in segments[:, :2].astype('float32'):\n        ax.axvspan(seg[0], seg[1], alpha=.5)\n\n    fig.show()", ""]}
{"filename": "src/sign_language_tools/visualization/plot/__init__.py", "chunked_list": [""]}
{"filename": "src/sign_language_tools/visualization/plot/landmarks.py", "chunked_list": ["from typing import Optional, Tuple\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.lines import Line2D\n\n\n__all__ = [\n    'plot_landmarks',", "__all__ = [\n    'plot_landmarks',\n]\n\nEdge = Tuple[int, int]\n\n\ndef plot_landmarks(\n        landmarks: np.ndarray,\n        connections: Optional[Tuple[Edge, ...]] = None,\n        *,\n        ax=None,\n        vertex_size: float = 0.01,\n        vertex_color='lime',\n        edge_color='white',\n        background_color='black',\n        text_color='red',\n        aspect_ratio: float = 1,\n        show_axis: bool = False,\n        show_indices: bool = False,\n        x_lim: Optional[tuple[float, float]] = None,\n        y_lim: Optional[tuple[float, float]] = None,\n        refocus: bool = False,\n        focus_pad: float = 0.02,\n):\n    \"\"\"\n    Plot landmarks on a figure using matplotlib.\n    Landmarks have to be a Numpy array of shape (L, 2) or (L, 3) where L is the number of different landmarks.\n\n    Args:\n        landmarks: The set of landmarks (L, 2) or (L, 3) to plot. Each landmark is represented as a vertex.\n        connections: An optional tuple of edges to draw between vertices.\n        ax: If specified, this matplotlib axis will be used. Otherwise, global axis are used.\n        vertex_size: Size of all vertices. Default=0.01\n        vertex_color: Color of all vertices. Default='lime'\n        edge_color: Color of all edges. Default='white'\n        background_color: Color of the background. Default='black'\n        text_color: Color of the text, if present. Default='red'\n        aspect_ratio: Aspect ratio used to display the landmarks. Default=1.0\n        show_axis: If true, draw axis. Default=False\n        show_indices: If true, draw indices of landmarks. Default=False\n        x_lim: If specified, override computed x_lim. Default=None\n        y_lim: If specified, override computed x_lim. Default=None\n        refocus: If true, compute x- and y-lim to refocus on landmarks. Default=False\n        focus_pad: Specify padding used if refocus is true. Otherwise, it is ignored.\n\n    Author:\n        v0.0.1 - ppoitier\n    \"\"\"\n    x = landmarks[:, 0]\n    y = landmarks[:, 1]\n\n    x_lim, y_lim, aspect_ratio = _compute_xy_lim(\n        landmarks,\n        aspect_ratio=aspect_ratio,\n        x_lim=x_lim,\n        y_lim=y_lim,\n        refocus=refocus,\n        focus_pad=focus_pad,\n    )\n\n    if ax is None:\n        ax = plt.gca()\n    ax.set_facecolor(background_color)\n    ax.axes.xaxis.set_visible(show_axis)\n    ax.axes.yaxis.set_visible(show_axis)\n    ax.set_box_aspect(1/aspect_ratio)\n    ax.set_xlim(*x_lim)\n    ax.set_ylim(*y_lim)\n\n    _draw_vertices(landmarks, ax=ax, vertex_size=vertex_size, vertex_color=vertex_color)\n    if show_indices:\n        _draw_indices(landmarks, ax=ax, color=text_color)\n    if connections is not None:\n        _draw_edges(x, y, ax=ax, connections=connections, edge_color=edge_color)\n\n    return ax", "\n\n# ---- Helpers\n\n\ndef _compute_refocus(\n        landmarks: np.ndarray,\n        focus_pad: float,\n) -> Tuple[Tuple[float, float], Tuple[float, float]]:\n    \"\"\"\n    Calculate axis limits to refocus the figure on landmarks, with configurable padding.\n\n    Args:\n        landmarks: Set of landmarks (L, 2) or (L, 3) on which to refocus the figure.\n        focus_pad: The padding used for the refocus.\n\n    Returns:\n        x_lim, y_lim : Boundaries of the refocused frame.\n    \"\"\"\n    x = landmarks[:, 0]\n    y = landmarks[:, 1]\n\n    x_min = np.min(x)\n    x_max = np.max(x)\n\n    y_min = np.min(y)\n    y_max = np.max(y)\n\n    x_lim = (x_min - focus_pad, x_max + focus_pad)\n    y_lim = (y_max + focus_pad, y_min - focus_pad)\n\n    return x_lim, y_lim", "\n\ndef _compute_xy_lim(\n        landmarks: np.ndarray,\n        aspect_ratio: float,\n        *,\n        x_lim: Optional[float] = None,\n        y_lim: Optional[float] = None,\n        refocus: bool = False,\n        focus_pad: float = 0.02,\n):\n    if refocus:\n        refocus_x, refocus_y = _compute_refocus(landmarks, focus_pad)\n    else:\n        refocus_x, refocus_y = (0, 1), (1, 0)\n\n    if x_lim is None:\n        x_lim = refocus_x\n    if y_lim is None:\n        y_lim = refocus_y\n\n    x_size = x_lim[1] - x_lim[0]\n    y_size = y_lim[0] - y_lim[1]\n    aspect_ratio = (x_size * aspect_ratio / y_size)\n\n    return x_lim, y_lim, aspect_ratio", "\n\ndef _draw_edges(x, y, *, ax, connections, edge_color):\n    for v0, v1 in connections:\n        line = Line2D(\n            [x[v0], x[v1]],\n            [y[v0], y[v1]],\n            color=edge_color,\n            zorder=1,\n        )\n        ax.add_line(line)", "\n\ndef _draw_vertices(landmarks: np.ndarray, ax, vertex_size, vertex_color):\n    for coords in landmarks:\n        ax.add_patch(Circle(\n            (coords[0], coords[1]),\n            radius=vertex_size/2,\n            facecolor=vertex_color,\n            zorder=2,\n        ))", "\n\ndef _draw_indices(landmarks: np.ndarray, ax, color):\n    for index, coords in enumerate(landmarks):\n        ax.text(coords[0], coords[1], str(index), color=color, clip_on=True)\n"]}
{"filename": "src/sign_language_tools/visualization/video/segments.py", "chunked_list": ["import numpy as np\nimport pandas as pd\nfrom sign_language_tools.visualization.video.displayable import Displayable\nfrom sign_language_tools.visualization.video.cv.annotations import draw_segments\n\n\ndef get_segments_in_range(segments: pd.DataFrame, full_range: tuple[int, int]) -> pd.DataFrame:\n    start, end = full_range\n    return segments.loc[(segments['start'] <= end) & (segments['end'] >= start)]\n", "\n\nclass Segments(Displayable):\n\n    def __init__(\n            self,\n            segments: pd.DataFrame,\n            name: str,\n            unit: str,\n            resolution: tuple[int, int] = (512, 256),\n            time_range: int = 3000,\n            fps: int = 50,\n    ):\n        self.name = name\n\n        self.segments = segments.copy()\n        self.resolution = resolution\n        self.offset = resolution[0]//2\n        self.time_range = time_range\n\n        self.frame_duration = round(1000/fps)\n        self.frame_offset = round(time_range/self.frame_duration)\n        self.frame_px = self.offset/self.frame_offset\n\n        self.panel = None\n        self.panel_nb = -1\n        self.unit = unit\n\n        if self.unit == 'ms':\n            self.segments.loc[:, ['start', 'end']] //= self.frame_duration\n        self._load_panel(0)\n\n    def get_img(self, frame_number: int) -> np.ndarray:\n        panel_nb = frame_number // self.frame_offset\n        if panel_nb != self.panel_nb:\n            self._load_panel(frame_number)\n        img = np.zeros((self.resolution[1], self.resolution[0], 3), dtype='uint8')\n        frame_offset = frame_number % self.frame_offset\n        px_offset = round(frame_offset * self.frame_px)\n        img[:, :] = self.panel[:, px_offset:self.resolution[0]+px_offset]\n        img[:, self.offset-2:self.offset+2, :] = (0, 0, 255)\n        return img\n\n    def _load_panel(self, frame_number: int):\n        self.panel = np.zeros((self.resolution[1], 3 * self.offset, 3), dtype='uint8')\n        self.panel_nb = frame_number // self.frame_offset\n\n        panel_start_frame = self.panel_nb * self.frame_offset - self.frame_offset\n        panel_end_frame = panel_start_frame + 3 * self.frame_offset\n        panel_segments = get_segments_in_range(self.segments, (panel_start_frame, panel_end_frame))\n\n        draw_segments(self.panel, panel_segments, panel_start_frame, panel_end_frame)", ""]}
{"filename": "src/sign_language_tools/visualization/video/images.py", "chunked_list": ["import numpy as np\nimport cv2\nimport glob\nimport os\nfrom .displayable import Displayable\n\n\nclass Images(Displayable):\n\n    def __init__(self, dir_path: str, extension: str = 'png'):\n        super(Images, self).__init__()\n\n        self.dir_path = dir_path\n        self.frames = [cv2.imread(filepath) for filepath in glob.glob(os.path.join(dir_path, f'*.{extension}'))]\n\n        self.frame_count = len(self.frames)\n        self.width = self.frames[0].shape[1]\n        self.height = self.frames[0].shape[0]\n\n        self.last_frame_nb = 0\n\n    def get_img(self, frame_number: int) -> np.ndarray:\n        frame_number = max(0, min(frame_number, self.frame_count-1))\n\n        return self.frames[frame_number]", ""]}
{"filename": "src/sign_language_tools/visualization/video/video_player.py", "chunked_list": ["import os\nfrom typing import Optional, Literal, Union\n\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nfrom sign_language_tools.visualization.video.video import Video\nfrom sign_language_tools.visualization.video.images import Images\nfrom sign_language_tools.visualization.video.poses import Poses", "from sign_language_tools.visualization.video.images import Images\nfrom sign_language_tools.visualization.video.poses import Poses\nfrom sign_language_tools.visualization.video.segments import Segments\n\n\nclass VideoPlayer:\n    \"\"\"\n    The video player is a versatile video player that allows to visualise sign language landmarks\n    along with a video stream and annotations.\n    Landmarks must be in the Mediapipe or OpenPose format.\n\n    Controls:\n    - Q or Escape: quit the player\n    - Space: pause\n    - S: Screenshot\n    - Left-arrow: 10 seconds forward\n    - Right-arrow: 10 seconds backward\n\n    Author:\n        v0.0.1 - ppoitier\n    \"\"\"\n    def __init__(\n            self,\n            root: Optional[str] = None,\n            screenshot_dir: Optional[str] = None,\n            fps: int = 24,\n    ):\n        \"\"\"\n        Creation of a new video player.\n\n        Args:\n            root: An optional root path prepended to all paths.\n            screenshot_dir: An optional folder path in which screenshot should be saved.\n            fps: The framerate of the video player (default = 24).\n                This is automatically changed if a video is attached to the video player.\n                Therefore, we recommend you to only manually specify it when no video stream is used.\n        \"\"\"\n        self.resolution = (756, 512)\n        self.current_frame = 0\n        self.frame_count = 0\n        self.fps = fps\n        self.speed = 1.0\n\n        self.root = root\n        self.screenshot_dir = screenshot_dir\n        self.video: Optional[Union[Video, Images]] = None\n        self.poses: Optional[Poses] = None\n        self.segmentations: list[Segments] = []\n\n        self.stop = False\n        self.pause = False\n        self.last_images = {}\n\n        self.isolate_video = False\n        self.isolate_pose = False\n        self.crop = (0.0, 1.0, 0.0, 1.0)\n\n    def attach_video(self, video_path: str):\n        \"\"\"\n        Attach a video file to the video player.\n\n        Only one video could be attached to a video player. The player use\n        `opencv-python` to render the video.\n\n        Args:\n            video_path: The path of the video file to attach.\n        \"\"\"\n\n        self.video = Video(self._get_path(video_path))\n        self.resolution = (self.video.width, self.video.height)\n        self.frame_count = self.video.frame_count\n        self.fps = self.video.fps\n\n    def attach_image_dir(self, dir_path: str, extension: str = 'png', fps: Optional[int] = None):\n        \"\"\"\n        Attach an image folder to the video player.\n\n        The images in the folder are used as video frames in the video player. They are\n        displayed in alphabetical order.\n\n        Only one video could be attached to a video player. The player use\n        `opencv-python` to render the video.\n\n        Args:\n            dir_path: The path of the folder containing the images.\n            extension: The file extension of the images (default = 'png').\n            fps: If specified, change the framerate of the video player. Default=None\n        \"\"\"\n        self.video = Images(self._get_path(dir_path), extension=extension)\n        self.frame_count = self.video.frame_count\n        if fps is not None:\n            self.fps = fps\n\n    def attach_pose(\n            self,\n            name: str,\n            pose_sequence: np.ndarray,\n            connections=None,\n            show_vertices: bool = True,\n            vertex_color=(0, 0, 255),\n            edge_color=(0, 255, 0),\n    ):\n        \"\"\"\n        Attach a set of landmarks to the video player.\n\n        Each set of landmark is identified by its name.\n        The video player is able to display multiple sets of landmarks in the same video.\n        However, they must have different names. Otherwise, the previous landmarks are replaced.\n\n        Args:\n            name: The name of the set of landmarks.\n            pose_sequence: The tensor containing the signal values of each landmark.\n                Must be of shape (T, L, 2) or (T, L, 3) where T is the number of frames and L the number of landmarks.\n            connections: An optional set of connections between the landmarks. Default=None\n            show_vertices: If true, the vertices of the landmarks are displayed.\n                Otherwise, they are hidden. Default=True\n            vertex_color: The color of each vertex in the BGR format (0 <= color <= 255) of OpenCV.\n            edge_color: The color of each edge in the BGR format (0 <= color <= 255) of OpenCV.\n\n        Shape:\n            landmarks: of the shape (T, L, D) where T is the number of frames, L the number of landmarks (vertices)\n            and D the dimension of each coordinate (only the two first coordinates are shown). Typically, D=2 or D=3.\n        \"\"\"\n        self._add_pose(name, pose_sequence, connections, show_vertices, vertex_color, edge_color)\n\n    def attach_segments(self, name: str, segments: Union[pd.DataFrame, np.ndarray], unit: str = 'ms'):\n        if isinstance(segments, np.ndarray):\n            segments = pd.DataFrame({\n                'start': pd.Series(segments[:, 0], dtype='int32'),\n                'end': pd.Series(segments[:, 1], dtype='int32'),\n                'label': pd.Series(segments[:, 2]),\n            })\n        self.segmentations.append(Segments(segments, name, fps=self.fps, unit=unit))\n\n    def set_crop(self, x: tuple[float, float] = (0, 1), y: tuple[float, float] = (0, 1)):\n        \"\"\"\n        Crop the viewport of the video player.\n\n        Default viewport is x=(0, 1) and y=(0, 1).\n        x: left -> right\n        y: top -> bottom\n\n        Args:\n            x: The relative x-axis range (start, end) to use. Example: `x=(0.4, 0.7)`.\n            y: The relative y-axis range (start, end) to use. Example: `y=(0.2, 0.5)`.\n        \"\"\"\n        assert 0 <= x[0] <= 1\n        assert 0 <= x[1] <= 1\n        assert 0 <= y[0] <= 1\n        assert 0 <= y[1] <= 1\n        self.crop = (x[0], x[1], y[0], y[1])\n\n    def isolate(self, element: Literal['video', 'pose']):\n        \"\"\"\n        Isolate an element out of the main window, into a new window.\n\n        Args:\n            element: The element that is isolated:\n                - `video` to isolate the original video.\n                - `pose` to isolate the landmarks.\n        \"\"\"\n        if element == 'video':\n            self.isolate_video = True\n        elif element == 'pose':\n            self.isolate_pose = True\n\n    def set_speed(self, new_speed: float):\n        \"\"\"\n        Change the playback speed of the video player.\n\n        Example:\n            ```\n            set_speed(2.0)  # Double the original playback speed of the video player\n            ```\n\n        Args:\n            new_speed: New relative playback speed (must be positive).\n        \"\"\"\n        assert 0 < new_speed, 'Speed must be positive.'\n        self.speed = new_speed\n\n    def play(self):\n        \"\"\"\n        Start the video player and display all the attached elements.\n        The player use `opencv-python` to render the video.\n        \"\"\"\n        self.current_frame = 0\n        frame_duration = round(1000/self.fps)\n        delay = round(frame_duration / self.speed)\n\n        while (self.current_frame < self.frame_count) and not self.stop:\n            if not self.pause:\n                self._next_frame(self.current_frame)\n                self.current_frame = self.current_frame + 1\n\n            key_code = cv2.waitKeyEx(delay)\n            self._user_action(key_code)\n\n        self._stop()\n\n    # ---- Private methods\n\n    def _next_frame(self, frame_nb: int):\n        self.last_images = {}\n        if self.video is not None:\n            img = self.video.get_img(frame_nb)\n            if self.isolate_video:\n                self._show_frame('Video (isolated)', img.copy(), frame_nb)\n\n            if self.poses is not None:\n                self.poses.draw(img, frame_nb)\n                if self.isolate_pose:\n                    self._show_frame('Pose (isolated)', self.poses.get_img(frame_nb), frame_nb)\n        elif self.poses is not None:\n            img = self.poses.get_img(frame_nb)\n        else:\n            img = np.zeros((512, 756, 3), dtype='uint8')\n\n        self._show_frame('Video Player', img, frame_nb)\n\n        for segments in self.segmentations:\n            cv2.imshow(segments.name, segments.get_img(frame_nb))\n\n    def _show_frame(self, window_title: str, frame: np.ndarray, frame_nb: int):\n        if self.crop is not None:\n            x_start, x_end, y_start, y_end = self.crop\n            x_start = int(x_start * frame.shape[1])\n            x_end = int(x_end * frame.shape[1])\n            y_start = int(y_start * frame.shape[0])\n            y_end = int(y_end * frame.shape[0])\n            frame = frame[y_start:y_end, x_start:x_end]\n        cv2.imshow(window_title, frame)\n        self.last_images[window_title] = (frame_nb, frame)\n\n    def _user_action(self, key_code):\n        if key_code == ord('q'):\n            self._stop()\n        elif key_code == ord('s'):\n            self._screenshot()\n        # Escape\n        elif key_code == 27:\n            self._stop()\n        # Left arrow\n        elif key_code == 65361 or key_code == 2424832:\n            self._goto(self.current_frame - self.fps * 10)\n        # Right arrow\n        elif key_code == 65363 or key_code == 2555904:\n            self._goto(self.current_frame + self.fps * 10)\n        # Space bar\n        elif key_code == 32:\n            self.pause = not self.pause\n\n    def _goto(self, frame_nb: int):\n        frame_nb = max(0, min(frame_nb, self.frame_count))\n        self.current_frame = frame_nb\n\n    def _stop(self):\n        self.stop = True\n\n        if self.video is not None:\n            self.video.release()\n\n        cv2.destroyAllWindows()\n\n    def _screenshot(self):\n        if self.screenshot_dir is None:\n            return\n\n        _dir = self.screenshot_dir\n        if os.path.isdir(os.path.join(self.root, _dir)):\n            _dir = os.path.join(self.root, _dir)\n\n        if not os.path.isdir(_dir):\n            print('Could not save frames. Directory not found:', _dir)\n            return\n\n        for window_title in self.last_images:\n            frame_nb, frame = self.last_images[window_title]\n            filepath = os.path.normpath(os.path.join(_dir, f'{frame_nb}_{window_title}.jpg'))\n            cv2.imwrite(filepath, frame)\n            print('Saved:', filepath)\n\n    def _add_pose(\n            self,\n            name: str,\n            landmarks: np.ndarray,\n            connections,\n            show_vertices: bool,\n            vertex_color: tuple[int, int, int],\n            edge_color: tuple[int, int, int],\n    ):\n        if self.poses is None:\n            self.poses = Poses(resolution=self.resolution)\n        self.poses.add_pose(name, landmarks, connections, show_vertices, vertex_color, edge_color)\n\n        n_poses = self.poses.n_poses\n        if self.video is not None:\n            assert self.frame_count == n_poses, \\\n                f'Different number of frames ({self.frame_count}) and poses ({n_poses}).'\n        else:\n            self.frame_count = n_poses\n\n    def _get_path(self, path: str):\n        if self.root is not None:\n            return os.path.join(self.root, path)\n        return path", ""]}
{"filename": "src/sign_language_tools/visualization/video/__init__.py", "chunked_list": ["\n__all__ = [\n    'VideoPlayer',\n]\n\nfrom sign_language_tools.visualization.video.video_player import VideoPlayer\n"]}
{"filename": "src/sign_language_tools/visualization/video/poses.py", "chunked_list": ["import numpy as np\nfrom sign_language_tools.visualization.video.displayable import Displayable\nfrom sign_language_tools.visualization.video.cv.landmarks import draw_pose\n\n\nclass Poses(Displayable):\n\n    def __init__(\n            self,\n            resolution: tuple[int, int],\n    ):\n        self.resolution = resolution\n        self.n_poses = 0\n        self.poses = {}\n\n    def add_pose(\n            self,\n            name: str,\n            pose_sequence: np.ndarray,\n            edges: tuple[tuple[int, int]],\n            show_vertices: bool,\n            vertex_color: tuple[int, int, int],\n            edge_color: tuple[int, int, int],\n    ):\n        # (T, V, D) or (T, VxD)\n        if len(pose_sequence.shape) == 2:\n            pose_sequence = pose_sequence.reshape((pose_sequence.shape[0], -1, 2))\n\n        self.n_poses = pose_sequence.shape[0]\n        self.poses[name] = {\n            'vertices': pose_sequence,\n            'edges': edges,\n            'show_vertices': show_vertices,\n            'vertex_color': vertex_color,\n            'edge_color': edge_color,\n        }\n\n    def get_img(self, frame_number: int) -> np.ndarray:\n        width, height = self.resolution\n        img = np.zeros((height, width, 3), dtype='uint8')\n        self.draw(img, frame_number)\n        return img\n\n    def draw(self, img: np.ndarray, frame_number: int):\n        for name in self.poses:\n            pose = self.poses[name]\n            draw_pose(\n                img,\n                pose['vertices'][frame_number],\n                pose['edges'],\n                show_vertices=pose['show_vertices'],\n                vertex_color=pose['vertex_color'],\n                edge_color=pose['edge_color'],\n            )", ""]}
{"filename": "src/sign_language_tools/visualization/video/video.py", "chunked_list": ["import numpy as np\nimport cv2\nfrom .displayable import Displayable\n\n\nclass Video(Displayable):\n\n    def __init__(self, filepath: str):\n        super(Video, self).__init__()\n\n        self.cap = cv2.VideoCapture(filepath)\n        self.filepath = filepath\n\n        if not self.cap.isOpened():\n            raise RuntimeError(f'Cannot open video file: {filepath}')\n\n        self.fps = int(self.cap.get(cv2.CAP_PROP_FPS))\n        self.frame_count = int(self.cap.get(cv2.CAP_PROP_FRAME_COUNT))\n        self.width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n        self.height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n\n        self.last_frame_nb = 0\n\n    def get_img(self, frame_number: int) -> np.ndarray:\n        frame_number = max(0, min(frame_number, self.frame_count-1))\n\n        if self.last_frame_nb != frame_number-1:\n            self.cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number)\n        self.last_frame_nb = frame_number\n\n        success, frame = self.cap.read()\n        if not success:\n            raise RuntimeError(f'Cannot read frame ({frame_number}) of video: {self.filepath}')\n\n        return frame\n\n    def release(self):\n        self.cap.release()", ""]}
{"filename": "src/sign_language_tools/visualization/video/displayable.py", "chunked_list": ["import abc\nimport numpy as np\n\n\nclass Displayable(object):\n\n    @abc.abstractmethod\n    def get_img(self, frame_number: int) -> np.ndarray:\n        pass\n\n    def release(self):\n        pass", ""]}
{"filename": "src/sign_language_tools/visualization/video/cv/annotations.py", "chunked_list": ["import cv2\nimport numpy as np\nimport pandas as pd\n\n\ndef to_img_x(f: int, panel_start: int, panel_end: int, width: int):\n    x = (f - panel_start) * width / (panel_end - panel_start)\n    return min(width, max(0, round(x)))\n\n\ndef draw_segment(img: np.ndarray, index: int, segment, panel_start: int, panel_end: int):\n    width = img.shape[1]\n    height = img.shape[0]\n\n    x0 = to_img_x(segment[0], panel_start, panel_end, width)\n    x1 = to_img_x(segment[1], panel_start, panel_end, width)\n\n    color = (0, 255, 0)\n    if 'color' in segment:\n        r, g, b = segment[['r', 'g', 'b']]\n        color = (b, g, r)\n\n    img[-100:, x0:x1, :] = color\n\n    if segment.shape[0] > 2:\n        text_x = x0 + 2\n        text_y0 = height - (100 + (1 + index % 4) * 30)\n        text_y1 = height - 100\n\n        cv2.line(img, (text_x, text_y0), (text_x, text_y1), color=(0, 255, 0), thickness=1)\n        cv2.putText(img, str(segment[2]), (text_x + 2, text_y0), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1, 2)", "\n\ndef draw_segment(img: np.ndarray, index: int, segment, panel_start: int, panel_end: int):\n    width = img.shape[1]\n    height = img.shape[0]\n\n    x0 = to_img_x(segment[0], panel_start, panel_end, width)\n    x1 = to_img_x(segment[1], panel_start, panel_end, width)\n\n    color = (0, 255, 0)\n    if 'color' in segment:\n        r, g, b = segment[['r', 'g', 'b']]\n        color = (b, g, r)\n\n    img[-100:, x0:x1, :] = color\n\n    if segment.shape[0] > 2:\n        text_x = x0 + 2\n        text_y0 = height - (100 + (1 + index % 4) * 30)\n        text_y1 = height - 100\n\n        cv2.line(img, (text_x, text_y0), (text_x, text_y1), color=(0, 255, 0), thickness=1)\n        cv2.putText(img, str(segment[2]), (text_x + 2, text_y0), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1, 2)", "\n\ndef draw_segments(img: np.ndarray, segments: pd.DataFrame, panel_start: int, panel_end: int):\n    for index, segment in segments.iterrows():\n        index: int\n        draw_segment(img, index, segment, panel_start, panel_end)\n"]}
{"filename": "src/sign_language_tools/visualization/video/cv/__init__.py", "chunked_list": [""]}
{"filename": "src/sign_language_tools/visualization/video/cv/utils.py", "chunked_list": ["import cv2\n\n\ndef absolute_position(img, pos):\n    w = int(img.shape[1])\n    h = int(img.shape[0])\n    return int(max(0, min(w, w * pos[0]))), int(max(0, min(h, h * pos[1])))\n\n\ndef draw_connections(img, positions, connections, color=(255, 0, 0), thickness=2):\n    pos_nb = len(positions)\n    for i, j in connections:\n        if i < pos_nb and j < pos_nb:\n            x1, y1 = absolute_position(img, positions[i])\n            x2, y2 = absolute_position(img, positions[j])\n            cv2.line(img, (x1, y1), (x2, y2), color, thickness)", "\ndef draw_connections(img, positions, connections, color=(255, 0, 0), thickness=2):\n    pos_nb = len(positions)\n    for i, j in connections:\n        if i < pos_nb and j < pos_nb:\n            x1, y1 = absolute_position(img, positions[i])\n            x2, y2 = absolute_position(img, positions[j])\n            cv2.line(img, (x1, y1), (x2, y2), color, thickness)\n\n\ndef draw_points(img, positions, color=(0, 0, 255), thickness=cv2.FILLED, radius=3):\n    for pos in positions:\n        x, y = absolute_position(img, pos)\n        cv2.circle(img, (x, y), radius, color, thickness)", "\n\ndef draw_points(img, positions, color=(0, 0, 255), thickness=cv2.FILLED, radius=3):\n    for pos in positions:\n        x, y = absolute_position(img, pos)\n        cv2.circle(img, (x, y), radius, color, thickness)\n\n\ndef draw_rect(img, pos1, pos2, color=(255, 255, 255), thickness=cv2.FILLED):\n    cv2.rectangle(img, absolute_position(img, pos1), absolute_position(img, pos2), color=color, thickness=thickness)", "def draw_rect(img, pos1, pos2, color=(255, 255, 255), thickness=cv2.FILLED):\n    cv2.rectangle(img, absolute_position(img, pos1), absolute_position(img, pos2), color=color, thickness=thickness)\n"]}
{"filename": "src/sign_language_tools/visualization/video/cv/landmarks.py", "chunked_list": ["from sign_language_tools.visualization.video.cv.utils import draw_connections, draw_points\n\n\ndef draw_pose(\n        img,\n        landmarks,\n        connections=None,\n        edge_color=(0, 255, 0),\n        vertex_color=(0, 0, 255),\n        show_vertices: bool = True,\n):\n    if connections is not None:\n        draw_connections(img, landmarks, connections, edge_color)\n    if show_vertices:\n        draw_points(img, landmarks, vertex_color)", ""]}
