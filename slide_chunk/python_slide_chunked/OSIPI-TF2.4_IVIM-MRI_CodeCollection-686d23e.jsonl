{"filename": "utils/__init__.py", "chunked_list": [""]}
{"filename": "utils/ivim/forward_model.py", "chunked_list": ["import torch\n\n\ndef ivim_parameters_to_signal(D, Dp, f, S0, bvalues):\n    \"\"\"\n    converts ivim parameters to predicted signal at specified bvalues\n    Args:\n        D: diffusion coefficient\n        Dp: pseudo diffusion coefficient\n        f: perfusion fraction\n        S0: signal at b=0\n        bvalues: b-values (measures of diffusion weighting)\n\n    Returns:\n        relative signal: relative (when S0 = 1) signal at specified b-values\n        signal: signal at specified b-values\n\n    \"\"\"\n    # Calculate signal based on estimated parameters\n    relative_signal = f * torch.exp(-bvalues * Dp) + (1 - f) * torch.exp(-bvalues * D)\n    signal = S0 * relative_signal\n    return signal", ""]}
{"filename": "utils/data_simulation/ivim_simulation.py", "chunked_list": ["import torch\nimport numpy as np\n\nfrom utils.ivim.forward_model import ivim_parameters_to_signal\n\n\ndef simulate_ivim_signal(D, Dp, f, S0, bvalues, SNR_array, rg):\n    \"\"\"\n    simulate ivim signal\n\n    Args:\n        D: diffusion coefficient\n        Dp: pseudo diffusion coefficient\n        f: perfusion fraction\n        S0: signal without diffusion weighting\n        bvalues: b-values (measure of diffusion weighting)\n        SNR_array: noise to be added to the simulated data\n        rg: random number generator\n\n    Returns:\n        simulated_data: simulated ivim signal\n\n    \"\"\"\n    bvalues.sort()\n    b0_bool = np.array(bvalues) == 0\n    simulated_data = ivim_parameters_to_signal(torch.tensor(D), torch.tensor(Dp), torch.tensor(f), torch.tensor(S0),\n                                               torch.tensor(np.asarray(bvalues)))\n    simulated_data = simulated_data.cpu().detach().numpy()\n\n    # create 2 signal arrays filled with gaussian noise\n    noise_real = rg.normal(0, 1 / SNR, (1, len(bvalues)))\n    noise_imag = rg.normal(0, 1 / SNR, (1, len(bvalues)))\n\n    # add Rician noise to the simulated data\n    simulated_data = np.sqrt(np.power(simulated_data + noise_real, 2) + np.power(noise_imag, 2)).squeeze()\n\n    # renormalize simulated data to noisy S0\n    S0_noisy = np.mean(simulated_data[b0_bool])\n    simulated_data /= S0_noisy\n    return simulated_data", "\n"]}
{"filename": "utils/data_simulation/GenerateData.py", "chunked_list": ["import numpy as np\n\nclass GenerateData:\n    \"\"\"\n    Generate exponential and linear data\n    \"\"\"\n    def __init__(self, operator=None):\n        \"\"\"\n        Parameters\n        ----------\n        operator : numpy or torch\n            Must provide mathematical operators\n        \"\"\"\n        if operator is None:\n            self._op = np\n        else:\n            self._op = operator\n\n    def ivim_signal(self, D, Dp, f, S0, bvalues, snr=None):\n        \"\"\"\n        Generates IVIM (biexponential) signal\n\n        Parameters\n        ----------\n        D : float\n            The tissue diffusion value\n        Dp : float\n            The pseudo perfusion value\n        f : float\n            The fraction of the signal from perfusion\n        S0 : float\n            The baseline signal (magnitude at no diffusion)\n        bvalues : list or array of float\n            The diffusion (b-values)\n        \"\"\"\n        signal = self.multiexponential_signal([D, Dp], [1 - f, f], S0, self._op.asarray(bvalues, dtype='float64'))\n        return self.add_rician_noise(signal, snr)\n\n    def exponential_signal(self, D, bvalues):\n        \"\"\"\n        Generates exponential signal\n\n        Parameters\n        ----------\n        D : float\n            The tissue diffusion value\n        bvalues : list or array of float\n            The diffusion (b-values)\n        \"\"\"\n        assert D >= 0, 'D must be >= 0'\n        return self._op.exp(-self._op.asarray(bvalues, dtype='float64') * D)\n\n    def multiexponential_signal(self, D, F, S0, bvalues):\n        \"\"\"\n        Generates multiexponential signal\n        The combination of exponential signals\n\n        Parameters\n        ----------\n        D : list or arrray of float\n            The tissue diffusion value\n        F : list or array of float\n            The fraction of the signal from perfusion\n        S0 : list or array of float\n            The baseline signal (magnitude at no diffusion)\n        bvalues : list or array of float\n            The diffusion (b-values)\n        \"\"\"\n        assert len(D) == len(F), 'D and F must be the same length'\n        signal = self._op.zeros_like(bvalues)\n        for [d, f] in zip(D, F):\n            signal += f * self.exponential_signal(d, bvalues)\n        signal *= S0\n        return signal\n\n    def add_rician_noise(self, real_signal, snr=None, imag_signal=None):\n        \"\"\"\n        Adds Rician noise to a real or complex signal\n\n        Parameters\n        ----------\n        real_signal : list or array of float\n            The real channel float\n        snr : float\n            The signal to noise ratio\n        imag_signal : list or array of float\n            The imaginary channel float\n        \"\"\"\n        if imag_signal is None:\n            imag_signal = self._op.zeros_like(real_signal)\n        if snr is None:\n            noisy_data = self._op.sqrt(self._op.power(real_signal, 2) + self._op.power(imag_signal, 2))\n        else:\n            real_noise = self._op.random.normal(0, 1 / snr, real_signal.shape)\n            imag_noise = self._op.random.normal(0, 1 / snr, imag_signal.shape)\n            noisy_data = self._op.sqrt(self._op.power(real_signal + real_noise, 2) + self._op.power(imag_signal + imag_noise, 2))\n        return noisy_data\n\n    def linear_signal(self, D, bvalues, offset=0):\n        \"\"\"\n        Generates linear signal\n\n        Parameters\n        ----------\n        D : float\n            The tissue diffusion value\n        bvalues : list or array of float\n            The diffusion (b-values)\n        offset : float\n            The signal offset\n        \"\"\"\n        assert D >= 0, 'D must be >= 0'\n        data = -D * np.asarray(bvalues)\n        return data + offset\n\n    def multilinear_signal(self, D, F, S0, bvalues, offset=0):\n        \"\"\"\n        Generates multilinear signal\n        The combination of multiple linear signals\n\n        Parameters\n        ----------\n        D : list or arrray of float\n            The tissue diffusion value\n        F : list or array of float\n            The fraction of the signal from perfusion\n        S0 : list or array of float\n            The baseline signal (magnitude at no diffusion)\n        bvalues : list or array of float\n            The diffusion (b-values)\n        offset : float\n            The signal offset\n        \"\"\"\n        assert len(D) == len(F), 'D and F must be the same length'\n        signal = self._op.zeros_like(bvalues)\n        for [d, f] in zip(D, F):\n            signal += f * self.linear_signal(d, bvalues)\n        signal *= S0\n        signal += offset\n        return signal"]}
{"filename": "tests/__init__.py", "chunked_list": [""]}
{"filename": "tests/IVIMmodels/data/test_GenerateData.py", "chunked_list": ["import numpy as np\nimport numpy.testing as npt\nimport pytest\nimport torch\n\nfrom utils.data_simulation.GenerateData import GenerateData\n\n#run using python -m pytest from the root folder\n\ntest_monoexponential_data = [", "\ntest_monoexponential_data = [\n    pytest.param(0, np.linspace(0, 1000, 11), id='0'),\n    pytest.param(0.1, np.linspace(0, 1000, 11), id='0.1'),\n    pytest.param(0.2, np.linspace(0, 1000, 11), id='0.2'),\n    pytest.param(0.3, np.linspace(0, 1000, 11), id='0.3'),\n    pytest.param(0.4, np.linspace(0, 1000, 11), id='0.4'),\n    pytest.param(0.5, np.linspace(0, 1000, 11), id='0.5'),\n    pytest.param(0.8, np.linspace(0, 1000, 11), id='0.8'),\n    pytest.param(1, np.linspace(0, 1000, 11), id='1'),", "    pytest.param(0.8, np.linspace(0, 1000, 11), id='0.8'),\n    pytest.param(1, np.linspace(0, 1000, 11), id='1'),\n]\n@pytest.mark.parametrize(\"D, bvals\", test_monoexponential_data)\ndef test_monoexponential(D, bvals):\n    gd = GenerateData()\n    gd_signal = gd.exponential_signal(D, bvals)\n    testing_signal = np.exp(-D * np.asarray(bvals, dtype='float64'))\n    npt.assert_allclose(gd_signal, testing_signal)\n    assert(gd_signal[0] >= testing_signal[0])", "\ntest_ivim_data = [\n    pytest.param(0.01, 0.0, 1, 1, np.linspace(0, 1000, 11), None),\n    pytest.param(0.01, 0.1, 0.05, 1, np.linspace(0, 1000, 11), None),\n    pytest.param(0.05, 0.2, 0.1, 1, np.linspace(0, 800, 11), None),\n    pytest.param(0.04, 0.15, 0.25, 1.5, np.linspace(0, 1000, 2), 10),\n    pytest.param(0.1, 0.5, 0.5, 0.5, np.linspace(0, 1500, 5), 100),\n    pytest.param(0.01, 0.2, 0.1, 1, np.linspace(10, 1500, 11), 100),\n    pytest.param(0.1, 0.15, 0.05, 1, np.linspace(10, 1000, 8), 5)\n]", "    pytest.param(0.1, 0.15, 0.05, 1, np.linspace(10, 1000, 8), 5)\n]\n@pytest.mark.parametrize('D, Dp, f, S0, bvals, snr', test_ivim_data)\ndef test_ivim(D, Dp, f, S0, bvals, snr):\n    gd = GenerateData()\n    gd_signal = gd.ivim_signal(D, Dp, f, S0, bvals, snr)\n    testing_signal = S0 * ((1 - f) * np.exp(-D * bvals) + f * np.exp(-Dp * bvals))\n    atol = 0.0\n    if snr is not None:\n        atol = 4 / snr\n    npt.assert_allclose(gd_signal, testing_signal, atol=atol)", "\n\ntest_linear_data = [\n    pytest.param(0, np.linspace(0, 1000, 11), 0, id='0'),\n    pytest.param(0.1, np.linspace(0, 1000, 11), 10, id='0.1'),\n    pytest.param(0.2, np.linspace(0, 1000, 11), -10, id='0.2'),\n    pytest.param(0.3, np.linspace(0, 1000, 11), 0, id='0.3'),\n    pytest.param(0.4, np.linspace(0, 1000, 11), 0, id='0.4'),\n    pytest.param(0.5, np.linspace(0, 1000, 11), 0, id='0.5'),\n    pytest.param(0.8, np.linspace(0, 1000, 11), 0, id='0.8'),", "    pytest.param(0.5, np.linspace(0, 1000, 11), 0, id='0.5'),\n    pytest.param(0.8, np.linspace(0, 1000, 11), 0, id='0.8'),\n    pytest.param(1, np.linspace(0, 1000, 11), 0, id='1'),\n]\n@pytest.mark.parametrize(\"D, bvals, offset\", test_linear_data)\ndef test_linear(D, bvals, offset):\n    gd = GenerateData()\n    gd_signal = gd.linear_signal(D, bvals, offset)\n    testing_signal = -D * np.asarray(bvals, dtype='float64')\n    testing_signal += offset\n    npt.assert_allclose(gd_signal, testing_signal)\n    assert(gd_signal[0] >= testing_signal[0])\n        \n    gd_exponential = gd.exponential_signal(D, bvals)\n    gd_log_exponential = np.log(gd_exponential) + offset\n    real_mask = np.isfinite(gd_log_exponential)\n    \n    npt.assert_allclose(gd_log_exponential[real_mask], gd_signal[real_mask])", ""]}
{"filename": "tests/IVIMmodels/data/__init__.py", "chunked_list": [""]}
{"filename": "tests/IVIMmodels/unit_tests/test_ivim_fit_4D.py", "chunked_list": [""]}
{"filename": "tests/IVIMmodels/unit_tests/test_ivim_fit_linear.py", "chunked_list": ["import numpy as np\nimport numpy.testing as npt\nimport pytest\nimport torch\n\nfrom utils.data_simulation.GenerateData import GenerateData\nfrom src.original.ETP_SRI.LinearFitting import LinearFit\n\n\n#run using python -m pytest from the root folder", "\n#run using python -m pytest from the root folder\n\ntest_linear_data = [\n    pytest.param(0, np.linspace(0, 1000, 11), id='0'),\n    pytest.param(0.01, np.linspace(0, 1000, 11), id='0.1'),\n    pytest.param(0.02, np.linspace(0, 1000, 11), id='0.2'),\n    pytest.param(0.03, np.linspace(0, 1000, 11), id='0.3'),\n    pytest.param(0.04, np.linspace(0, 1000, 11), id='0.4'),\n    pytest.param(0.05, np.linspace(0, 1000, 11), id='0.5'),", "    pytest.param(0.04, np.linspace(0, 1000, 11), id='0.4'),\n    pytest.param(0.05, np.linspace(0, 1000, 11), id='0.5'),\n    pytest.param(0.08, np.linspace(0, 1000, 11), id='0.8'),\n    pytest.param(0.1, np.linspace(0, 1000, 11), id='1'),\n]\n@pytest.mark.parametrize(\"D, bvals\", test_linear_data)\ndef test_linear_fit(D, bvals):\n    gd = GenerateData()\n    gd_signal = gd.exponential_signal(D, bvals)\n    print(gd_signal)\n    fit = LinearFit()\n    D_fit = fit.linear_fit(bvals, np.log(gd_signal))\n    npt.assert_allclose([1, D], D_fit)", "\ntest_ivim_data = [\n    pytest.param(0, 0.01, 0.05, np.linspace(0, 1000, 11), id='0'),\n    pytest.param(0.1, 0.01, 0.05, np.linspace(0, 1000, 11), id='0.1'),\n    pytest.param(0.2, 0.01, 0.05, np.linspace(0, 1000, 11), id='0.2'),\n    pytest.param(0.1, 0.05, 0.1, np.linspace(0, 1000, 11), id='0.3'),\n    pytest.param(0.4, 0.001, 0.05, np.linspace(0, 1000, 11), id='0.4'),\n    pytest.param(0.5, 0.001, 0.05, np.linspace(0, 1000, 11), id='0.5'),\n]\n@pytest.mark.parametrize(\"f, D, Dp, bvals\", test_ivim_data)\ndef test_ivim_fit(f, D, Dp, bvals):\n    gd = GenerateData()\n    gd_signal = gd.ivim_signal(D, Dp, f, 1, bvals)\n    fit = LinearFit()\n    [f_fit, D_fit, Dp_fit] = fit.ivim_fit(bvals, gd_signal)\n    npt.assert_allclose([f, D], [f_fit, D_fit], atol=1e-5)\n    if not np.allclose(f, 0):\n        npt.assert_allclose(Dp, Dp_fit, rtol=1e-2, atol=1e-3)", "]\n@pytest.mark.parametrize(\"f, D, Dp, bvals\", test_ivim_data)\ndef test_ivim_fit(f, D, Dp, bvals):\n    gd = GenerateData()\n    gd_signal = gd.ivim_signal(D, Dp, f, 1, bvals)\n    fit = LinearFit()\n    [f_fit, D_fit, Dp_fit] = fit.ivim_fit(bvals, gd_signal)\n    npt.assert_allclose([f, D], [f_fit, D_fit], atol=1e-5)\n    if not np.allclose(f, 0):\n        npt.assert_allclose(Dp, Dp_fit, rtol=1e-2, atol=1e-3)", ""]}
{"filename": "tests/IVIMmodels/unit_tests/test_ivim_fit_2D.py", "chunked_list": ["import numpy as np\n\n\nclass TestIVIMFit2D:\n\n    def __init__(self):\n        self.b_values = None\n        self.signals = None\n        self.supervision = {'D': None,\n                            'Dp': None,\n                            'f': None,\n                            'S0': None}\n\n    @staticmethod\n    def estimation_method(b_values, signals):\n        D = 0.003\n        Dp = 0.02\n        f = 0.3\n        S0 = 1\n        return D, Dp, f, S0\n\n    def test_ivim_fit_2D(self):\n        D, Dp, f, S0 = self.estimation_method(self.b_values, self.signals)\n        assert np.allclose(D, self.supervision['D'])\n        assert np.allclose(Dp, self.supervision['Dp'])\n        assert np.allclose(f, self.supervision['f'])\n        assert np.allclose(S0, self.supervision['S0'])", "\n"]}
{"filename": "src/__init__.py", "chunked_list": [""]}
{"filename": "src/wrappers/ivim_fit.py", "chunked_list": ["# Non-osipi dependencies\n\n# osipi utilities\n\n# osipi implementations\n\n\ndef ivim_fit(author, signals=None, bvalues=None, data=None, initial_guess=None, bounds=None):\n    \"\"\"\n    wrapper function to use OSIPI code contributions for IVIM fit\n    :param author: str, can be one of []\n    :param signals: numpy array containing signal intensities\n    :param bvalues: numpy array containing corresponding b-values\n    :param data: object containing signals and bvalues\n    :param initial_guess: list of initial parameter estimates\n    :param bounds: list containing list of lower parameter bounds and list of upper parameter bounds\n    :return: numpy array of shape (signals.size, 4) with the D, Dp, f, S0 per voxel.\n    \"\"\"\n\n    # Unpack variables if data object is given\n    if not data == None:\n        bvalues = data.bvalues\n        signals = data.signals\n\n\n    # Some implementations can only fit a voxel at a time (i.e. all inputs must be 2-dimensional)\n    requires_2D = True if author in [] else False\n    requires_4D = True if author in [] else False\n\n    # Bounds and initial guess for parameters\n    initial_guess = []\n    bounds = []\n\n    # Create a fitting function for the chosen author/implementation\n    if author == \"\":\n        pass", "\n"]}
{"filename": "src/original/__init__.py", "chunked_list": [""]}
{"filename": "src/original/PV_MUMC/two_step_IVIM_fit.py", "chunked_list": ["\"\"\"\nJanuary 2022 by Paulien Voorter\np.voorter@maastrichtuniversity.nl \nhttps://www.github.com/paulienvoorter\n\nrequirements:\nnumpy\ntqdm\nscipy\njoblib", "scipy\njoblib\n\"\"\"\n\n# load relevant libraries\nfrom scipy.optimize import curve_fit, nnls\nimport numpy as np\nfrom joblib import Parallel, delayed\nimport tqdm\n", "import tqdm\n\n\n\n\ndef two_exp_noS0(bvalues, Dpar, Fmv, Dmv):\n    \"\"\" tri-exponential IVIM function, and S0 set to 1\"\"\"\n    return Fmv * np.exp(-bvalues * Dmv) + (1 - Fmv ) * np.exp(-bvalues * Dpar)\n       \ndef two_exp(bvalues, S0, Dpar, Fmv, Dmv):\n    \"\"\" tri-exponential IVIM function\"\"\"\n    return S0 * (Fmv * np.exp(-bvalues * Dmv) + (1 - Fmv ) * np.exp(-bvalues * Dpar))", "       \ndef two_exp(bvalues, S0, Dpar, Fmv, Dmv):\n    \"\"\" tri-exponential IVIM function\"\"\"\n    return S0 * (Fmv * np.exp(-bvalues * Dmv) + (1 - Fmv ) * np.exp(-bvalues * Dpar))\n   \n\n\ndef fit_least_squares_array(bvalues, dw_data, fitS0=True, bounds=([0.9, 0.0001, 0.0, 0.0025], [1.1, 0.0025, 0.2, 0.2]), cutoff=200):\n    \"\"\"\n    This is the LSQ implementation, in which we first estimate Dpar using a curve fit to b-values>=cutoff;\n    Second, we fit the other parameters using all b-values, while fixing Dpar from step 1. This fit\n    is done on an array.\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param bounds: Array with fit bounds ([S0min, Dparmin, Fintmin, Dintmin, Fmvmin, Dmvmin],[S0max, Dparmax, Fintmax, Dintmax, Fmvmax, Dmvmax]). default: ([0.9, 0.0001, 0.0, 0.0015, 0.0, 0.004], [1.1, 0.0015, 0.4, 0.004, 0.2, 0.2])\n    :param cutoff: cutoff b-value used in step 1 \n    :return Dpar: 1D Array with Dpar in each voxel\n    :return Fmv: 1D Array with Fmv in each voxel\n    :return Dmv: 1D Array with Dmv in each voxel\n    :return S0: 1D Array with S0 in each voxel\n    \"\"\"\n    # initialize empty arrays\n    Dpar = np.zeros(len(dw_data))\n    S0 = np.zeros(len(dw_data))\n    Dmv = np.zeros(len(dw_data))\n    Fmv = np.zeros(len(dw_data))\n    for i in tqdm.tqdm(range(len(dw_data)), position=0, leave=True):\n        # fill arrays with fit results on a per voxel base:\n        Dpar[i], Fmv[i], Dmv[i], S0[i] = fit_least_squares(bvalues, dw_data[i, :], S0_output=True, fitS0=fitS0, bounds=bounds)\n    return [Dpar, Fmv, Dmv, S0]", "\n\ndef fit_least_squares(bvalues, dw_data, IR=True, S0_output=False, fitS0=True,\n                      bounds=([0.9, 0.0001, 0.0, 0.0025], [1.1, 0.0025, 0.2, 0.2]), cutoff=200):\n    \"\"\"\n   This is the LSQ implementation, in which we first estimate Dpar using a curve fit to b-values>=cutoff;\n   Second, we fit the other parameters using all b-values, while fixing Dpar from step 1. This fit\n   is done on an array. It fits a single curve\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 1D Array with diffusion-weighted signal in different voxels at different b-values\n    :param IR: Boolean; True will fit the IVIM accounting for inversion recovery, False will fit IVIM without IR; default = True\n    :param S0_output: Boolean determining whether to output (often a dummy) variable S0; default = False\n    :param fix_S0: Boolean determining whether to fix S0 to 1; default = True\n    :param bounds: Array with fit bounds ([S0min, Dparmin, Fintmin, Dintmin, Fmvmin, Dmvmin],[S0max, Dparmax, Fintmax, Dintmax, Fmvmax, Dmvmax]). Default: ([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])\n    :param cutoff: cutoff b-value used in step 1 \n    :return S0: optional 1D Array with S0 in each voxel\n    :return Dpar: scalar with Dpar of the specific voxel\n    :return Fint: scalar with Fint of the specific voxel\n    :return Dint: scalar with Dint of the specific voxel\n    :return Fmv: scalar with Fmv of the specific voxel\n    :return Dmv: scalar with Dmv of the specific voxel\n    \"\"\"\n     \n    try:\n        def monofit(bvalues, Dpar):\n             return np.exp(-bvalues * Dpar)\n        \n        high_b = bvalues[bvalues >= cutoff]\n        high_dw_data = dw_data[bvalues >= cutoff]\n        boundspar = ([bounds[0][1]], [bounds[1][1]])\n        params, _ = curve_fit(monofit, high_b, high_dw_data, p0=[(bounds[1][1]-bounds[0][1])/2], bounds=boundspar)\n        Dpar1 = params[0]\n\n        if not fitS0:\n            boundsupdated=([Dpar1 , bounds[0][2] , bounds[0][3] ],\n                      [Dpar1 , bounds[1][2] , bounds[1][3] ])    \n            params, _ = curve_fit(two_exp_noS0, bvalues, dw_data, p0=[Dpar1, (bounds[0][2]+bounds[1][2])/2, (bounds[0][3]+bounds[1][3])/2], bounds=boundsupdated)\n            Dpar, Fmv, Dmv = params[0], params[1], params[2]\n            #when the fraction of a compartment equals zero (or very very small), the corresponding diffusivity is non-existing (=NaN)\n            if Fmv < 1e-4:\n                Dmv = float(\"NaN\")\n            \n        else: \n            boundsupdated = ([bounds[0][0] , Dpar1 , bounds[0][2] , bounds[0][3] ],\n                      [bounds[1][0] , Dpar1, bounds[1][2] , bounds[1][3] ])   \n            params, _ = curve_fit(two_exp, bvalues, dw_data, p0=[1, Dpar1, (bounds[0][2]+bounds[1][2])/2, (bounds[0][3]+bounds[1][3])/2], bounds=boundsupdated)\n            S0 = params[0]\n            Dpar, Fmv, Dmv = params[1] , params[2] , params[3]\n            #when the fraction of a compartment equals zero (or very very small), the corresponding diffusivity is non-existing (=NaN)\n            if Fmv < 1e-4:\n                Dmv = float(\"NaN\")     \n                \n        if S0_output:\n            return Dpar, Fmv, Dmv, S0\n        else:\n            return Dpar, Fmv, Dmv\n    except:\n\n        if S0_output:\n            return 0, 0, 0, 0, 0, 0\n        else:\n            return 0, 0, 0, 0, 0", "\n\n        \n"]}
{"filename": "src/original/OGC_AmsterdamUMC/LSQ_fitting.py", "chunked_list": ["\"\"\"\nSeptember 2020 by Oliver Gurney-Champion\noliver.gurney.champion@gmail.com / o.j.gurney-champion@amsterdamumc.nl\nhttps://www.github.com/ochampion\n\nrequirements:\nnumpy\ntqdm\nmatplotlib\nscipy", "matplotlib\nscipy\njoblib\n\"\"\"\n\n# load relevant libraries\nfrom scipy.optimize import curve_fit, minimize\nimport numpy as np\nfrom scipy import stats\nfrom joblib import Parallel, delayed", "from scipy import stats\nfrom joblib import Parallel, delayed\nimport sys\nif sys.stderr.isatty():\n    from tqdm import tqdm\nelse:\n    def tqdm(iterable, **kwargs):\n        return iterable\nimport warnings\n", "import warnings\n\n\ndef ivimN(bvalues, Dt, Fp, Dp, S0):\n    # IVIM function in which we try to have equal variance in the different IVIM parameters; equal variance helps with certain fitting algorithms\n    return S0 * ivimN_noS0(bvalues, Dt, Fp, Dp)\n\n\ndef ivimN_noS0(bvalues, Dt, Fp, Dp):\n    # IVIM function in which we try to have equal variance in the different IVIM parameters and S0=1\n    return (Fp / 10 * np.exp(-bvalues * Dp / 10) + (1 - Fp / 10) * np.exp(-bvalues * Dt / 1000))", "def ivimN_noS0(bvalues, Dt, Fp, Dp):\n    # IVIM function in which we try to have equal variance in the different IVIM parameters and S0=1\n    return (Fp / 10 * np.exp(-bvalues * Dp / 10) + (1 - Fp / 10) * np.exp(-bvalues * Dt / 1000))\n\n\ndef ivim(bvalues, Dt, Fp, Dp, S0):\n    # regular IVIM function\n    return (S0 * (Fp * np.exp(-bvalues * Dp) + (1 - Fp) * np.exp(-bvalues * Dt)))\n\n\ndef tri_expN(bvalues, Fp0, Dt, Fp1, Dp1, Fp2, Dp2):\n    # tri-exp function in which we try to have equal variance in the different IVIM parameters; equal variance helps with certain fitting algorithms\n    return (Fp1 / 10 * np.exp(-bvalues * Dp1 / 100) + Fp2 / 10 * np.exp(-bvalues * Dp2 / 10) + (Fp0 / 10) * np.exp(-bvalues * Dt / 1000))", "\n\ndef tri_expN(bvalues, Fp0, Dt, Fp1, Dp1, Fp2, Dp2):\n    # tri-exp function in which we try to have equal variance in the different IVIM parameters; equal variance helps with certain fitting algorithms\n    return (Fp1 / 10 * np.exp(-bvalues * Dp1 / 100) + Fp2 / 10 * np.exp(-bvalues * Dp2 / 10) + (Fp0 / 10) * np.exp(-bvalues * Dt / 1000))\n\n\ndef tri_expN_noS0(bvalues, Dt, Fp1, Dp1, Fp2, Dp2):\n    # tri-exp function in which we try to have equal variance in the different IVIM parameters and S0=1\n    return (Fp1 / 10 * np.exp(-bvalues * Dp1 / 100) + Fp2 / 10 * np.exp(-bvalues * Dp2 / 10) + (1 - Fp1 / 10 - Fp2 / 10) * np.exp(-bvalues * Dt / 1000))", "\n\ndef tri_exp(bvalues, Fp0, Dt, Fp1, Dp1, Fp2, Dp2):\n    # tri-exp function in which we try to have equal variance in the different IVIM parameters; equal variance helps with certain fitting algorithms\n    return (Fp1 * np.exp(-bvalues * Dp1) + Fp2 * np.exp(-bvalues * Dp2) + (Fp0) * np.exp(-bvalues * Dt))\n\n\ndef order(Dt, Fp, Dp, S0=None):\n    # function to reorder D* and D in case they were swapped during unconstraint fitting. Forces D* > D (Dp>Dt)\n    if Dp < Dt:\n        Dp, Dt = Dt, Dp\n        Fp = 1 - Fp\n    if S0 is None:\n        return Dt, Fp, Dp\n    else:\n        return Dt, Fp, Dp, S0", "\n\ndef fit_segmented_array(bvalues, dw_data, njobs=4, bounds=([0, 0, 0.005],[0.005, 0.7, 0.2]), cutoff=75):\n    \"\"\"\n    This is an implementation of the segmented fit, in which we first estimate D using a curve fit to b-values>cutoff;\n    then estimate f from the fitted S0 and the measured S0 and finally estimate D* while fixing D and f. This fit\n    is done on an array.\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param njobs: Integer determining the number of parallel processes; default = 4\n    :param bounds: 2D Array with fit bounds ([Dtmin, Fpmin, Dpmin, S0min],[Dtmax, Fpmax, Dpmax, S0max]). Default: ([0.005, 0, 0, 0.8], [0.2, 0.7, 0.005, 1.2])\n    :param cutoff: cutoff value for determining which data is taken along in fitting D\n    :return Dt: 1D Array with D in each voxel\n    :return Fp: 1D Array with f in each voxel\n    :return Dp: 1D Array with Dp in each voxel\n    :return S0: 1D Array with S0 in each voxel\n    \"\"\"\n    # first we normalise the signal to S0\n    S0 = np.mean(dw_data[:, bvalues == 0], axis=1)\n    dw_data = dw_data / S0[:, None]\n    # here we try parallel computing, but if fails, go back to computing one single core.\n    single = False\n    if njobs > 2:\n        try:\n            # define the parallel function\n            def parfun(i):\n                return fit_segmented(bvalues, dw_data[i, :], bounds=bounds, cutoff=cutoff)\n\n            output = Parallel(n_jobs=njobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0, leave=True))\n            Dt, Fp, Dp = np.transpose(output)\n        except:\n            # if fails, retry using single core\n            single = True\n    else:\n        # or, if specified, immediately go to single core\n        single = True\n    if single:\n        # initialize empty arrays\n        Dp = np.zeros(len(dw_data))\n        Dt = np.zeros(len(dw_data))\n        Fp = np.zeros(len(dw_data))\n        for i in tqdm(range(len(dw_data)), position=0, leave=True):\n            # fill arrays with fit results on a per voxel base:\n            Dt[i], Fp[i], Dp[i] = fit_segmented(bvalues, dw_data[i, :], bounds=bounds, cutoff=cutoff)\n    return [Dt, Fp, Dp, S0]", "\n\ndef fit_segmented(bvalues, dw_data, bounds=([0, 0, 0.005],[0.005, 0.7, 0.2]), cutoff=75):\n    \"\"\"\n    This is an implementation of the segmented fit, in which we first estimate D using a curve fit to b-values>cutoff;\n    then estimate f from the fitted S0 and the measured S0 and finally estimate D* while fixing D and f.\n    :param bvalues: Array with the b-values\n    :param dw_data: Array with diffusion-weighted signal at different b-values\n    :param bounds: Array with fit bounds ([Dtmin, Fpmin, Dpmin, S0min],[Dtmax, Fpmax, Dpmax, S0max]). Default: ([0.005, 0, 0, 0.8], [0.2, 0.7, 0.005, 1.2])\n    :param cutoff: cutoff value for determining which data is taken along in fitting D\n    :return Dt: Fitted D\n    :return Fp: Fitted f\n    :return Dp: Fitted Dp\n    :return S0: Fitted S0\n    \"\"\"\n    try:\n        # determine high b-values and data for D\n        high_b = bvalues[bvalues >= cutoff]\n        high_dw_data = dw_data[bvalues >= cutoff]\n        # correct the bounds. Note that S0 bounds determine the max and min of f\n        bounds1 = ([bounds[0][0] * 1000., 1 - bounds[1][1]], [bounds[1][0] * 1000., 1. - bounds[0][\n            1]])  # By bounding S0 like this, we effectively insert the boundaries of f\n        # fit for S0' and D\n        params, _ = curve_fit(lambda b, Dt, int: int * np.exp(-b * Dt / 1000), high_b, high_dw_data,\n                              p0=(1, 1),\n                              bounds=bounds1)\n        Dt, Fp = params[0] / 1000, 1 - params[1]\n        # remove the diffusion part to only keep the pseudo-diffusion\n        dw_data_remaining = dw_data - (1 - Fp) * np.exp(-bvalues * Dt)\n        bounds2 = (bounds[0][2], bounds[1][2])\n        # fit for D*\n        params, _ = curve_fit(lambda b, Dp: Fp * np.exp(-b * Dp), bvalues, dw_data_remaining, p0=(0.1), bounds=bounds2)\n        Dp = params[0]\n        return Dt, Fp, Dp\n    except:\n        # if fit fails, return zeros\n        # print('segnetned fit failed')\n        return 0., 0., 0.", "\n\ndef fit_least_squares_array(bvalues, dw_data, S0_output=True, fitS0=True, njobs=4,\n                            bounds=([0, 0, 0.005, 0.7],[0.005, 0.7, 0.2, 1.3])):\n    \"\"\"\n    This is an implementation of the conventional IVIM fit. It is fitted in array form.\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param S0_output: Boolean determining whether to output (often a dummy) variable S0; default = True\n    :param fix_S0: Boolean determining whether to fix S0 to 1; default = False\n    :param njobs: Integer determining the number of parallel processes; default = 4\n    :param bounds: Array with fit bounds ([Dtmin, Fpmin, Dpmin, S0min],[Dtmax, Fpmax, Dpmax, S0max]). Default: ([0.005, 0, 0, 0.8], [0.2, 0.7, 0.005, 1.2])\n    :return Dt: 1D Array with D in each voxel\n    :return Fp: 1D Array with f in each voxel\n    :return Dp: 1D Array with Dp in each voxel\n    :return S0: 1D Array with S0 in each voxel\n    \"\"\"\n    # normalise the data to S(value=0)\n    S0 = np.mean(dw_data[:, bvalues == 0], axis=1)\n    dw_data = dw_data / S0[:, None]\n    single = False\n    # split up on whether we want S0 as output\n    if S0_output:\n        # check if parallel is desired\n        if njobs > 1:\n            try:\n                # defining parallel function\n                def parfun(i):\n                    return fit_least_squares(bvalues, dw_data[i, :], S0_output=S0_output, fitS0=fitS0, bounds=bounds)\n\n                output = Parallel(n_jobs=njobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0, leave=True))\n                Dt, Fp, Dp, S0 = np.transpose(output)\n            except:\n                single = True\n        else:\n            single = True\n        if single:\n            # run on single core, instead. Defining empty arrays\n            Dp = np.zeros(len(dw_data))\n            Dt = np.zeros(len(dw_data))\n            Fp = np.zeros(len(dw_data))\n            S0 = np.zeros(len(dw_data))\n            # running in a single loop and filling arrays\n            for i in tqdm(range(len(dw_data)), position=0, leave=True):\n                Dt[i], Fp[i], Dp[i], S0[i] = fit_least_squares(bvalues, dw_data[i, :], S0_output=S0_output, fitS0=fitS0,\n                                                               bounds=bounds)\n        return [Dt, Fp, Dp, S0]\n    else:\n        # if S0 is not exported\n        if njobs > 1:\n            try:\n                def parfun(i):\n                    return fit_least_squares(bvalues, dw_data[i, :], fitS0=fitS0, bounds=bounds)\n\n                output = Parallel(n_jobs=njobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0, leave=True))\n                Dt, Fp, Dp = np.transpose(output)\n            except:\n                single = True\n        else:\n            single = True\n        if single:\n            Dp = np.zeros(len(dw_data))\n            Dt = np.zeros(len(dw_data))\n            Fp = np.zeros(len(dw_data))\n            for i in range(len(dw_data)):\n                Dt[i], Fp[i], Dp[i] = fit_least_squares(bvalues, dw_data[i, :], S0_output=S0_output, fitS0=fitS0,\n                                                        bounds=bounds)\n        return [Dt, Fp, Dp]", "\n\ndef fit_least_squares(bvalues, dw_data, S0_output=False, fitS0=True,\n                      bounds=([0, 0, 0.005, 0.7],[0.005, 0.7, 0.2, 1.3])):\n    \"\"\"\n    This is an implementation of the conventional IVIM fit. It fits a single curve\n    :param bvalues: Array with the b-values\n    :param dw_data: Array with diffusion-weighted signal at different b-values\n    :param S0_output: Boolean determining whether to output (often a dummy) variable S0; default = True\n    :param fix_S0: Boolean determining whether to fix S0 to 1; default = False\n    :param bounds: Array with fit bounds ([Dtmin, Fpmin, Dpmin, S0min],[Dtmax, Fpmax, Dpmax, S0max]). Default: ([0.005, 0, 0, 0.8], [0.2, 0.7, 0.005, 1.2])\n    :return Dt: Array with D in each voxel\n    :return Fp: Array with f in each voxel\n    :return Dp: Array with Dp in each voxel\n    :return S0: Array with S0 in each voxel\n    \"\"\"\n    try:\n        if not fitS0:\n            # bounds are rescaled such that each parameter changes at roughly the same rate to help fitting.\n            bounds = ([bounds[0][0] * 1000, bounds[0][1] * 10, bounds[0][2] * 10],\n                      [bounds[1][0] * 1000, bounds[1][1] * 10, bounds[1][2] * 10])\n            params, _ = curve_fit(ivimN_noS0, bvalues, dw_data, p0=[1, 1, 0.1], bounds=bounds)\n            S0 = 1\n        else:\n            # bounds are rescaled such that each parameter changes at roughly the same rate to help fitting.\n            bounds = ([bounds[0][0] * 1000, bounds[0][1] * 10, bounds[0][2] * 10, bounds[0][3]],\n                      [bounds[1][0] * 1000, bounds[1][1] * 10, bounds[1][2] * 10, bounds[1][3]])\n            params, _ = curve_fit(ivimN, bvalues, dw_data, p0=[1, 1, 0.1, 1], bounds=bounds)\n            S0 = params[3]\n        # correct for the rescaling of parameters\n        Dt, Fp, Dp = params[0] / 1000, params[1] / 10, params[2] / 10\n        # reorder output in case Dp<Dt\n        if S0_output:\n            return order(Dt, Fp, Dp, S0)\n        else:\n            return order(Dt, Fp, Dp)\n    except:\n        # if fit fails, then do a segmented fit instead\n        # print('lsq fit failed, trying segmented')\n        if S0_output:\n            Dt, Fp, Dp = fit_segmented(bvalues, dw_data, bounds=bounds)\n            return Dt, Fp, Dp, 1\n        else:\n            return fit_segmented(bvalues, dw_data)", "\n\ndef fit_least_squares_array_tri_exp(bvalues, dw_data, S0_output=True, fitS0=True, njobs=4,\n                            bounds=([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])):\n    \"\"\"\n    This is an implementation of a tri-exponential fit. It is fitted in array form.\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param S0_output: Boolean determining whether to output (often a dummy) variable S0; default = True\n    :param fix_S0: Boolean determining whether to fix S0 to 1; default = False\n    :param njobs: Integer determining the number of parallel processes; default = 4\n    :param bounds: Array with fit bounds ([fp0min, Dtmin, Fp1min, Dp1min, Fp2min, Dp2min],[fp0max, Dtmax, Fp1max, Dp1max, Fp2max, Dp2max]). Default: ([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])\n    :return S0: optional 1D Array with S0 in each voxel\n    :return Dt: 1D Array with D in each voxel\n    :return Fp1: 1D Array with Fp1 in each voxel\n    :return Dp1: 1D Array with Dp1 in each voxel\n    :return Fp2: 1D Array with Fp2 in each voxel\n    :return Dp2: 1D Array with Dp2 in each voxel\n    \"\"\"\n    # normalise the data to S(value=0)\n    S0 = np.mean(dw_data[:, bvalues == 0], axis=1)\n    dw_data = dw_data / S0[:, None]\n    single = False\n    # check if parallel is desired\n    if njobs > 1:\n        try:\n            # defining parallel function\n            def parfun(i):\n                return fit_least_squares_tri_exp(bvalues, dw_data[i, :], S0_output=S0_output, fitS0=fitS0, bounds=bounds)\n\n            output = Parallel(n_jobs=njobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0, leave=True))\n            Fp0, Dt, Fp1, Dp1, Fp2, Dp2 = np.transpose(output)\n        except:\n            single = True\n    else:\n        single = True\n    if single:\n        # run on single core, instead. Defining empty arrays\n        Dp1 = np.zeros(len(dw_data))\n        Dt = np.zeros(len(dw_data))\n        Fp1 = np.zeros(len(dw_data))\n        Fp0 = np.zeros(len(dw_data))\n        Fp2 = np.zeros(len(dw_data))\n        Dp2 = np.zeros(len(dw_data))\n        # running in a single loop and filling arrays\n        for i in tqdm(range(len(dw_data)), position=0, leave=True):\n            Fp0[i], Dt[i], Fp1[i], Dp1[i], Fp2[i], Dp2[i] = fit_least_squares_tri_exp(bvalues, dw_data[i, :], S0_output=S0_output, fitS0=fitS0,\n                                                           bounds=bounds)\n    if S0_output:\n        return [Fp0+Fp1+Fp2, Dt, Fp1/(Fp0+Fp1+Fp2), Dp1, Fp2/(Fp0+Fp1+Fp2), Dp2]\n    else:\n        return [Dt, Fp1/(Fp0+Fp1+Fp2), Dp1, Fp2/(Fp0+Fp1+Fp2), Dp2]", "\n\ndef fit_least_squares_tri_exp(bvalues, dw_data, S0_output=False, fitS0=True,\n                      bounds=([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])):\n    \"\"\"\n    This is an implementation of the tri-exponential fit. It fits a single curve\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param S0_output: Boolean determining whether to output (often a dummy) variable S0; default = True\n    :param fix_S0: Boolean determining whether to fix S0 to 1; default = False\n    :param bounds: Array with fit bounds ([fp0min, Dtmin, Fp1min, Dp1min, Fp2min, Dp2min],[fp0max, Dtmax, Fp1max, Dp1max, Fp2max, Dp2max]). Default: ([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])\n    :return Fp0: optional 1D Array with f0 in each voxel\n    :return Dt: 1D Array with D in each voxel\n    :return Fp1: 1D Array with fp1 in each voxel\n    :return Dp1: 1D Array with Dp1 in each voxel\n    :return Fp2: 1D Array with the fraciton of signal for Dp2 in each voxel\n    :return Dp2: 1D Array with Dp2 in each voxel\n    \"\"\"\n    try:\n        if not fitS0:\n            # bounds are rescaled such that each parameter changes at roughly the same rate to help fitting.\n            bounds = ([bounds[0][1] * 1000, bounds[0][2] * 10, bounds[0][3] * 100, bounds[0][4] * 10, bounds[0][5] * 10],\n                      [bounds[1][1] * 1000, bounds[1][2] * 10, bounds[1][3] * 100, bounds[1][4] * 10, bounds[1][5] * 10])\n            params, _ = curve_fit(tri_expN_noS0, bvalues, dw_data, p0=[1.5, 1, 3, 1, 1.5], bounds=bounds)\n            Fp0 = 1 - params[1] / 10 - params[3] / 10\n            Dt, Fp1, Dp1, Fp2, Dp2 = params[0] / 1000, params[1] / 10, params[2] / 100, params[3] / 10, params[4] / 10\n        else:\n            # bounds are rescaled such that each parameter changes at roughly the same rate to help fitting.\n            bounds = ([bounds[0][0] * 10, bounds[0][1] * 1000, bounds[0][2] * 10, bounds[0][3] * 100, bounds[0][4] * 10, bounds[0][5] * 10],\n                      [bounds[1][0] * 10, bounds[1][1] * 1000, bounds[1][2] * 10, bounds[1][3] * 100, bounds[1][4] * 10, bounds[1][5] * 10])\n            params, _ = curve_fit(tri_expN, bvalues, dw_data, p0=[8, 1.0, 1, 3, 1, 1.5], bounds=bounds)\n            Fp0 = params[0]/10\n            Dt, Fp1, Dp1, Fp2, Dp2 = params[1] / 1000, params[2] / 10, params[3] / 100, params[4] / 10, params[5] / 10\n        # correct for the rescaling of parameters\n        # reorder output in case Dp<Dt\n        if S0_output:\n            #Dt, Fp, Dp, Fp2, Dp2 = order_tri(Dt, Fp, Dp, Fp2, Dp2)\n            return Fp0, Dt, Fp1, Dp1, Fp2, Dp2\n        else:\n            return Dt, Fp1, Dp1, Fp2, Dp2\n    except:\n        # if fit fails, then do a segmented fit instead\n        # print('lsq fit failed, trying segmented')\n        if S0_output:\n            return 0, 0, 0, 0, 0, 0\n        else:\n            return 0, 0, 0, 0, 0", "\n\ndef fit_segmented_array_tri_exp(bvalues, dw_data, njobs=4, bounds=([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5]), cutoff=[15, 120]):\n    \"\"\"\n    This is an implementation of the segmented fit for a tri-exp model, in which we first estimate D using a curve fit to b-values>cutoff;\n    then estimate f from the fitted S0 and the measured S0 and finally estimate D* while fixing D and f. This fit\n    is done on an array.\n    :param bvalues: 1D Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param njobs: Integer determining the number of parallel processes; default = 4\n    :param bounds: Array with fit bounds ([fp0min, Dtmin, Fp1min, Dp1min, Fp2min, Dp2min],[fp0max, Dtmax, Fp1max, Dp1max, Fp2max, Dp2max]). Default: ([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])\n    :param cutoff: 2 cutoff values for determining which data is taken along in fitting D, and subsequently D* and F\n    :return S0: 1D Array with S0 in each voxel\n    :return Dt: 1D Array with D in each voxel\n    :return Fp1: 1D Array with Fp1 in each voxel\n    :return Dp1: 1D Array with Dp1 in each voxel\n    :return Fp2: 1D Array with Fp2 in each voxel\n    :return Dp2: 1D Array with Dp2 in each voxel\n    \"\"\"\n    # first we normalise the signal to S0\n    S0 = np.mean(dw_data[:, bvalues == 0], axis=1)\n    dw_data = dw_data / S0[:, None]\n    # here we try parallel computing, but if fails, go back to computing one single core.\n    single = False\n    if njobs > 2:\n        try:\n            # define the parallel function\n            def parfun(i):\n                return fit_segmented(bvalues, dw_data[i, :], bounds=bounds, cutoff=cutoff)\n\n            output = Parallel(n_jobs=njobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0, leave=True))\n            Dt, Fp, Dp, Fp0, Fp2, Dp2 = np.transpose(output)\n        except:\n            # if fails, retry using single core\n            single = True\n    else:\n        # or, if specified, immediately go to single core\n        single = True\n    if single:\n        # initialize empty arrays\n        Dp1 = np.zeros(len(dw_data))\n        Dt = np.zeros(len(dw_data))\n        Fp0 = np.zeros(len(dw_data))\n        Fp1 = np.zeros(len(dw_data))\n        Dp2 = np.zeros(len(dw_data))\n        Fp2 = np.zeros(len(dw_data))\n        for i in tqdm(range(len(dw_data)), position=0, leave=True):\n            # fill arrays with fit results on a per voxel base:\n            Fp0[i], Dt[i], Fp1[i], Dp1[i], Fp2[i], Dp2[i] = fit_segmented_tri_exp(bvalues, dw_data[i, :], bounds=bounds, cutoff=cutoff)\n    return [Fp0+Fp1+Fp2, Dt, Fp1/(Fp0+Fp1+Fp2), Dp1, Fp2/(Fp0+Fp1+Fp2), Dp2]", "\n\ndef fit_segmented_tri_exp(bvalues, dw_data, bounds=([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5]), cutoff=[15, 120]):\n    \"\"\"\n    This is an implementation of the segmented fit, in which we first estimate D using a curve fit to b-values>cutoff;\n    then estimate f from the fitted S0 and the measured S0 and finally estimate D* while fixing D and f.\n    :param bvalues: Array with the b-values\n    :param dw_data: Array with diffusion-weighted signal at different b-values\n    :param bounds: Array with fit bounds ([fp0min, Dtmin, Fp1min, Dp1min, Fp2min, Dp2min],[fp0max, Dtmax, Fp1max, Dp1max, Fp2max, Dp2max]). Default: ([0, 0, 0, 0.005, 0, 0.06], [2.5, 0.005, 1, 0.06, 1, 0.5])\n    :param cutoff: 2 cutoff values for determining which data is taken along in fitting D, and subsequently D* and F\n    :return Fp0: 1D Array with Fp1 in each voxel\n    :return Dt: Fitted D\n    :return Fp1: Fitted f\n    :return Dp1: Fitted Dp\n    :return Fp2: Fitted Fp2\n    :return Dp2: Fitted Dp2\n    \"\"\"\n    try:\n        # determine high b-values and data for D\n        high_b = bvalues[bvalues >= cutoff[1]]\n        high_dw_data = dw_data[bvalues >= cutoff[1]]\n        bounds1 = ([bounds[0][1] * 1000., 0], [bounds[1][1] * 1000., 1])\n        # fit for S0' and D\n        params, _ = curve_fit(lambda b, Dt, int: int * np.exp(-b * Dt / 1000), high_b, high_dw_data,\n                              p0=(1, 1),\n                              bounds=bounds1)\n        Dt, Fp0 = params[0] / 1000, params[1]\n        # remove the diffusion part to only keep the pseudo-diffusion\n        dw_data = dw_data - Fp0 * np.exp(-bvalues * Dt)\n        # for another round:\n        high_b = bvalues[bvalues >= cutoff[0]]\n        high_dw_data = dw_data[bvalues >= cutoff[0]]\n        high_b2 = high_b[high_b <= cutoff[1]*1.5]\n        high_dw_data = high_dw_data[high_b <= cutoff[1]*1.5]\n        bounds1 = ([bounds[0][3] * 10., bounds[0][2]], [bounds[1][3] * 10., bounds[1][2]])\n        # fit for f0' and Dp1\n        params, _ = curve_fit(lambda b, Dt, int: int * np.exp(-b * Dt / 10), high_b2, high_dw_data,\n                              p0=(0.1, min(0.1)), bounds=bounds1)\n        Dp, Fp = params[0] / 10, params[1]\n        # remove the diffusion part to only keep the pseudo-diffusion\n        dw_data = dw_data - Fp * np.exp(-bvalues * Dp)\n        dw_data = dw_data[bvalues <= cutoff[0]*2]\n        bvalueslow = bvalues[bvalues <= cutoff[0]*2]\n        bounds1 = (bounds[0][5], bounds[1][5])\n        # fit for D*\n        Fp2 = 1 - Fp0 - Fp\n        params, _ = curve_fit(lambda b, Dp: Fp2 * np.exp(-b * Dp), bvalueslow, dw_data, p0=(0.1), bounds=bounds1)\n        Dp2 = params[0]\n        return Fp0, Dt, Fp, Dp, Fp2, Dp2\n    except:\n        # if fit fails, return zeros\n        # print('segnetned fit failed')\n        return 0., 0., 0., 0., 0., 0.", "\n\ndef empirical_neg_log_prior(Dt0, Fp0, Dp0, S00=None):\n    \"\"\"\n    This function determines the negative of the log of the empirical prior probability of the IVIM parameters\n    :param Dt0: 1D Array with the initial D estimates\n    :param Dt0: 1D Array with the initial f estimates\n    :param Dt0: 1D Array with the initial D* estimates\n    :param Dt0: 1D Array with the initial S0 estimates (optional)\n    \"\"\"\n    # Dp0, Dt0, Fp0 are flattened arrays\n    # only take valid voxels along, in which the initial estimates were sensible and successful\n    Dp_valid = (1e-8 < np.nan_to_num(Dp0)) & (np.nan_to_num(Dp0) < 1 - 1e-8)\n    Dt_valid = (1e-8 < np.nan_to_num(Dt0)) & (np.nan_to_num(Dt0) < 1 - 1e-8)\n    Fp_valid = (1e-8 < np.nan_to_num(Fp0)) & (np.nan_to_num(Fp0) < 1 - 1e-8)\n    # determine whether we fit S0\n    if S00 is not None:\n        S0_valid = (1e-8 < np.nan_to_num(S00)) & (np.nan_to_num(S00) < 2 - 1e-8)\n        valid = Dp_valid & Dt_valid & Fp_valid & S0_valid\n        Dp0, Dt0, Fp0, S00 = Dp0[valid], Dt0[valid], Fp0[valid], S00[valid]\n    else:\n        valid = Dp_valid & Dt_valid & Fp_valid\n        Dp0, Dt0, Fp0 = Dp0[valid], Dt0[valid], Fp0[valid]\n    # determine prior's shape. Note that D, D* and S0 are shaped as lognorm distributions whereas f is a beta distribution\n    Dp_shape, _, Dp_scale = stats.lognorm.fit(Dp0, floc=0)\n    Dt_shape, _, Dt_scale = stats.lognorm.fit(Dt0, floc=0)\n    Fp_a, Fp_b, _, _ = stats.beta.fit(Fp0, floc=0, fscale=1)\n    if S00 is not None:\n        S0_a, S0_b, _, _ = stats.beta.fit(S00, floc=0, fscale=2)\n\n    # define the prior\n    def neg_log_prior(p):\n        # depends on whether S0 is fitted or not\n        if len(p) == 4:\n            Dt, Fp, Dp, S0 = p[0], p[1], p[2], p[3]\n        else:\n            Dt, Fp, Dp = p[0], p[1], p[2]\n        # make D*<D very unlikely\n        if (Dp < Dt):\n            return 1e8\n        else:\n            eps = 1e-8\n            Dp_prior = stats.lognorm.pdf(Dp, Dp_shape, scale=Dp_scale)\n            Dt_prior = stats.lognorm.pdf(Dt, Dt_shape, scale=Dt_scale)\n            Fp_prior = stats.beta.pdf(Fp, Fp_a, Fp_b)\n            # determine and return the prior for D, f and D* (and S0)\n            if len(p) == 4:\n                S0_prior = stats.beta.pdf(S0 / 2, S0_a, S0_b)\n                return -np.log(Dp_prior + eps) - np.log(Dt_prior + eps) - np.log(Fp_prior + eps) - np.log(\n                    S0_prior + eps)\n            else:\n                return -np.log(Dp_prior + eps) - np.log(Dt_prior + eps) - np.log(Fp_prior + eps)\n\n    return neg_log_prior", "\n\ndef neg_log_likelihood(p, bvalues, dw_data):\n    \"\"\"\n    This function determines the negative of the log of the likelihood of parameters p, given the data dw_data for the Bayesian fit\n    :param p: 1D Array with the estimates of D, f, D* and (optionally) S0\n    :param bvalues: 1D array with b-values\n    :param dw_data: 1D Array diffusion-weighted data\n    :returns: the log-likelihood of the parameters given the data\n    \"\"\"\n    if len(p) == 4:\n        return 0.5 * (len(bvalues) + 1) * np.log(\n            np.sum((ivim(bvalues, p[0], p[1], p[2], p[3]) - dw_data) ** 2))  # 0.5*sum simplified\n    else:\n        return 0.5 * (len(bvalues) + 1) * np.log(\n            np.sum((ivim(bvalues, p[0], p[1], p[2], 1) - dw_data) ** 2))  # 0.5*sum simplified", "\n\ndef neg_log_posterior(p, bvalues, dw_data, neg_log_prior):\n    \"\"\"\n    This function determines the negative of the log of the likelihood of parameters p, given the prior likelihood and the data\n    :param p: 1D Array with the estimates of D, f, D* and (optionally) S0\n    :param bvalues: 1D array with b-values\n    :param dw_data: 1D Array diffusion-weighted data\n    :param neg_log_prior: prior likelihood function (created with empirical_neg_log_prior)\n    :returns: the posterior probability given the data and the prior\n    \"\"\"\n    return neg_log_likelihood(p, bvalues, dw_data) + neg_log_prior(p)", "\n\ndef fit_bayesian_array(bvalues, dw_data, paramslsq, arg):\n    \"\"\"\n    This is an implementation of the Bayesian IVIM fit for arrays. The fit is taken from Barbieri et al. which was\n    initially introduced in http://arxiv.org/10.1002/mrm.25765 and later further improved in\n    http://arxiv.org/abs/1903.00095. If found useful, please cite those papers.\n    :param bvalues: Array with the b-values\n    :param dw_data: 2D Array with diffusion-weighted signal in different voxels at different b-values\n    :param paramslsq: 2D Array with initial estimates for the parameters. These form the base for the Bayesian prior\n    distribution and are typically obtained by least squares fitting of the data\n    :param arg: an object with fit options, with attributes:\n    arg.fitS0 --> Boolean; False fixes S0 to 1, True fits S0\n    arg.jobs --> Integer specifying the number of parallel processes used in fitting. If <2, regular fitting is used instead\n    arg.bounds --> 2D Array of fit bounds ([Dtmin, Fpmin, Dpmin, S0min],[Dtmax, Fpmax, Dpmax, S0max])\n    :return Dt: Array with D in each voxel\n    :return Fp: Array with f in each voxel\n    :return Dp: Array with Dp in each voxel\n    :return S0: Array with S0 in each voxel\n    \"\"\"\n    arg = checkarg_lsq(arg)\n    # fill out missing args\n    Dt0, Fp0, Dp0, S00 = paramslsq\n    # determine prior\n    if arg.fitS0:\n        neg_log_prior = empirical_neg_log_prior(Dt0, Fp0, Dp0, S00)\n    else:\n        neg_log_prior = empirical_neg_log_prior(Dt0, Fp0, Dp0)\n    single = False\n    # determine whether we fit parallel or not\n    if arg.jobs > 1:\n        try:\n            # do parallel bayesian fit\n            def parfun(i):\n                # starting point\n                x0 = [Dt0[i], Fp0[i], Dp0[i], S00[i]]\n                return fit_bayesian(bvalues, dw_data[i, :], neg_log_prior, x0, fitS0=arg.fitS0)\n\n            output = Parallel(n_jobs=arg.jobs)(delayed(parfun)(i) for i in tqdm(range(len(dw_data)), position=0,\n                                                                                     leave=True))\n            Dt_pred, Fp_pred, Dp_pred, S0_pred = np.transpose(output)\n        except:\n            single = True\n    else:\n        single = True\n    if single:\n        # do serial; intialising arrays\n        Dp_pred = np.zeros(len(dw_data))\n        Dt_pred = np.zeros(len(dw_data))\n        Fp_pred = np.zeros(len(dw_data))\n        S0_pred = np.zeros(len(dw_data))\n        # fill in array while looping over voxels\n        for i in tqdm(range(len(dw_data)), position=0, leave=True):\n            # starting point\n            x0 = [Dt0[i], Fp0[i], Dp0[i], S00[i]]\n            Dt, Fp, Dp, S0 = fit_bayesian(bvalues, dw_data[i, :], neg_log_prior, x0, fitS0=arg.fitS0)\n            Dp_pred[i] = Dp\n            Dt_pred[i] = Dt\n            Fp_pred[i] = Fp\n            S0_pred[i] = S0\n    return Dt_pred, Fp_pred, Dp_pred, S0_pred", "\n\ndef fit_bayesian(bvalues, dw_data, neg_log_prior, x0=[0.001, 0.2, 0.05], fitS0=True):\n    '''\n    This is an implementation of the Bayesian IVIM fit. It returns the Maximum a posterior probability.\n    The fit is taken from Barbieri et al. which was initially introduced in http://arxiv.org/10.1002/mrm.25765 and\n    later further improved in http://arxiv.org/abs/1903.00095. If found useful, please cite those papers.\n    :param bvalues: Array with the b-values\n    :param dw_data: 1D Array with diffusion-weighted signal at different b-values\n    :param neg_log_prior: the prior\n    :param x0: 1D array with initial parameter guess\n    :param fitS0: boolean, if set to False, S0 is not fitted\n    :return Dt: estimated D\n    :return Fp: estimated f\n    :return Dp: estimated D*\n    :return S0: estimated S0 (optional)\n    '''\n    try:\n        # define fit bounds\n        bounds = [(0, 0.005), (0, 0.7), (0.005, 0.2), (0, 2.5)]\n        # Find the Maximum a posterior probability (MAP) by minimising the negative log of the posterior\n        if fitS0:\n            params = minimize(neg_log_posterior, x0=x0, args=(bvalues, dw_data, neg_log_prior), bounds=bounds)\n        else:\n            params = minimize(neg_log_posterior, x0=x0[:3], args=(bvalues, dw_data, neg_log_prior), bounds=bounds[:3])\n        if not params.success:\n            raise (params.message)\n        if fitS0:\n            Dt, Fp, Dp, S0 = params.x[0], params.x[1], params.x[2], params.x[3]\n        else:\n            Dt, Fp, Dp = params.x[0], params.x[1], params.x[2]\n            S0 = 1\n        return order(Dt, Fp, Dp, S0)\n    except:\n        # if fit fails, return regular lsq-fit result\n        # print('a bayes fit fialed')\n        return fit_least_squares(bvalues, dw_data, S0_output=True)", "\ndef goodness_of_fit(bvalues, Dt, Fp, Dp, S0, dw_data, Fp2=None, Dp2=None):\n    \"\"\"\n    Calculates the R-squared as a measure for goodness of fit.\n    input parameters are\n    :param b: 1D Array b-values\n    :param Dt: 1D Array with fitted D\n    :param Fp: 1D Array with fitted f\n    :param Dp: 1D Array with fitted D*\n    :param S0: 1D Array with fitted S0 (or ones)\n    :param dw_data: 2D array containing data, as voxels x b-values\n    :return R2: 1D Array with the R-squared for each voxel\n    \"\"\"\n    # simulate the IVIM signal given the D, f, D* and S0\n    try:\n        if Fp2 is None:\n            datasim = ivim(np.tile(np.expand_dims(bvalues, axis=0), (len(Dt), 1)),\n                           np.tile(np.expand_dims(Dt, axis=1), (1, len(bvalues))),\n                           np.tile(np.expand_dims(Fp, axis=1), (1, len(bvalues))),\n                           np.tile(np.expand_dims(Dp, axis=1), (1, len(bvalues))),\n                           np.tile(np.expand_dims(S0, axis=1), (1, len(bvalues)))).astype('f')\n        else:\n            datasim = tri_exp(np.tile(np.expand_dims(bvalues, axis=0), (len(Dt), 1)),\n                              np.tile(np.expand_dims(S0 * (1 - Fp - Fp2), axis=1), (1, len(bvalues))),\n                              np.tile(np.expand_dims(Dt, axis=1), (1, len(bvalues))),\n                              np.tile(np.expand_dims(Fp * S0, axis=1), (1, len(bvalues))),\n                              np.tile(np.expand_dims(Dp, axis=1), (1, len(bvalues))),\n                              np.tile(np.expand_dims(Fp2 * S0, axis=1), (1, len(bvalues))),\n                              np.tile(np.expand_dims(Dp2, axis=1), (1, len(bvalues))),\n                              ).astype('f')\n        # calculate R-squared given the estimated IVIM signal and the data\n        norm = np.mean(dw_data, axis=1)\n        ss_tot = np.sum(np.square(dw_data - norm[:, None]), axis=1)\n        ss_res = np.sum(np.square(dw_data - datasim), axis=1)\n        R2 = 1 - (ss_res / ss_tot)  # R-squared\n        if Fp2 is None:\n            adjusted_R2 = 1 - ((1 - R2) * (len(bvalues)) / (len(bvalues) - 4 - 1))\n        else:\n            adjusted_R2 = 1 - ((1 - R2) * (len(bvalues)) / (len(bvalues) - 6 - 1))\n        R2[R2 < 0] = 0\n        adjusted_R2[adjusted_R2 < 0] = 0\n    except:\n        if Fp2 is None:\n            datasim = ivim(bvalues, Dt, Fp, Dp, S0)\n        else:\n            datasim = tri_exp(bvalues, S0 * (1 - Fp - Fp2), Dt, Fp * S0, Dp, Fp2 * S0, Dp2)\n        norm = np.mean(dw_data)\n        ss_tot = np.sum(np.square(dw_data - norm))\n        ss_res = np.sum(np.square(dw_data - datasim))\n        R2 = 1 - (ss_res / ss_tot)  # R-squared\n        if Fp2 is None:\n            adjusted_R2 = 1 - ((1 - R2) * (len(bvalues)) / (len(bvalues) - 4 - 1))\n        else:\n            adjusted_R2 = 1 - ((1 - R2) * (len(bvalues)) / (len(bvalues) - 6 - 1))\n        # from matplotlib import pyplot as plt\n        # plt.figure(1)\n        # vox=58885\n        # plt.clf()\n        # plt.plot(bvalues, datasim[vox], 'rx', markersize=5)\n        # plt.plot(bvalues, dw_data[vox], 'bx', markersize=5)\n        # plt.ion()\n        # plt.show()\n        # print(R2[vox])\n    return R2, adjust", "# ed_R2\n\ndef MSE(bvalues, Dt, Fp, Dp, S0, dw_data):\n    \"\"\"\n    Calculates the MSE as a measure for goodness of fit.\n    input parameters are\n    :param b: 1D Array b-values\n    :param Dt: 1D Array with fitted D\n    :param Fp: 1D Array with fitted f\n    :param Dp: 1D Array with fitted D*\n    :param S0: 1D Array with fitted S0 (or ones)\n    :param dw_data: 2D array containing data, as voxels x b-values\n    :return MSError: 1D Array with the R-squared for each voxel\n    \"\"\"\n    # simulate the IVIM signal given the D, f, D* and S0\n    datasim = ivim(np.tile(np.expand_dims(bvalues, axis=0), (len(Dt), 1)),\n                   np.tile(np.expand_dims(Dt, axis=1), (1, len(bvalues))),\n                   np.tile(np.expand_dims(Fp, axis=1), (1, len(bvalues))),\n                   np.tile(np.expand_dims(Dp, axis=1), (1, len(bvalues))),\n                   np.tile(np.expand_dims(S0, axis=1), (1, len(bvalues)))).astype('f')\n\n    # calculate R-squared given the estimated IVIM signal and the data\n    MSError = np.mean(np.square(dw_data - datasim), axis=1)  # R-squared\n    return MSError"]}
{"filename": "src/original/IAR_LundUniversity/simple_test_of_fits.py", "chunked_list": ["import numpy as np\nfrom dipy.core.gradients import gradient_table\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport scienceplots\nimport ivim_fit_method_biexp\nimport ivim_fit_method_subtracted\nimport ivim_fit_method_sivim\nimport ivim_fit_method_linear\nimport ivim_fit_method_segmented_3step", "import ivim_fit_method_linear\nimport ivim_fit_method_segmented_3step\nimport ivim_fit_method_segmented_2step\nimport ivim_fit_method_modified_mix\nimport ivim_fit_method_modified_topopro\n\nplt.style.use([\"science\", \"ieee\"])\n\ndef ivim_signal(b, S0, f, D_star, D):\n    return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))", "def ivim_signal(b, S0, f, D_star, D):\n    return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n\ndef diffusion_signal(b, S0, f, D):\n    return S0*(1-f)*np.exp(-b*D)\n\ndef generate_noise(loc, sigma):\n    real_component = norm.rvs(loc=loc, scale=sigma/loc)\n    imaginary_component = norm.rvs(loc=loc, scale=sigma/loc)\n    return np.absolute(complex(real_component, imaginary_component))", "\ndef add_rician_noise(signal, SNR):\n    sigma = signal[-1]/SNR\n    # Sample real and imaginary noise components from gaussian distributions\n    # Use the last b-value as the SNR baseline in order to avoid the noise floor\n    noise = np.array([generate_noise(signal_value, sigma) for signal_value in signal])\n    \n    # Add the two components to the signal and take the magniutde of the result\n    noised_signal = signal + noise\n    noised_signal = np.absolute(noised_signal)\n\n    return noised_signal", "\n# Ground truth\nfactor = 1\nS0 = 1\nf = 0.1\nD_star = 30e-3\nD = 1e-3\nrescale_units = False\n\n# Settings", "\n# Settings\nlower_bounds = (0, 5, 0)\nupper_bounds = (1, 100, 4)\nbounds_um = (lower_bounds, upper_bounds)\n\nlower_bounds = (0, 0.005, 0)\nupper_bounds = (1, 0.1, 0.004)\nbounds_mm = (lower_bounds, upper_bounds)\ninitial_guess_mm = (1, 0.2, 0.03, 0.001)", "bounds_mm = (lower_bounds, upper_bounds)\ninitial_guess_mm = (1, 0.2, 0.03, 0.001)\n\n# Create gtab containing b-value informations\nbvals = np.array([0, 50, 240, 800])/factor\nbvals = np.array([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, \\\n    150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800])\nbvals = np.array([0, 20, 40, 60, 80, 100, 150, 200, 300, 400, 500, 600, 700, 800])\n#bvals = np.array([0, 50, 240, 800])\nbvec = np.zeros((bvals.size, 3))", "#bvals = np.array([0, 50, 240, 800])\nbvec = np.zeros((bvals.size, 3))\nbvec[:,2] = 1\ngtab = gradient_table(bvals, bvec, b0_threshold=0)\n\n# Signal\nsignal = ivim_signal(bvals, S0, f, D_star, D)\nnoised_signal = add_rician_noise(signal, 3)\nnoised_signal /= noised_signal[0]\n", "noised_signal /= noised_signal[0]\n\nnoised_signal6 = add_rician_noise(signal, 6)\nnoised_signal6 /= noised_signal6[0]\n\n\n\n\n\n", "\n\n# biexp fit\nbiexp_model = ivim_fit_method_biexp.IvimModelBiExp(gtab, bounds=bounds_mm, initial_guess=initial_guess_mm, rescale_units=rescale_units)\nbiexp_fit = biexp_model.fit(noised_signal)\n\n# sIVIM fit\nlower_bounds_sivim = (0, 0)\nupper_bounds_sivim = (1, 4/factor)\nbounds_mm_sivim = (lower_bounds_sivim, upper_bounds_sivim)", "upper_bounds_sivim = (1, 4/factor)\nbounds_mm_sivim = (lower_bounds_sivim, upper_bounds_sivim)\ninitial_guess_mm_sivim = (1, 0.2, 0.001)\nsivim_model = ivim_fit_method_sivim.IvimModelsIVIM(gtab, b_threshold=0.2, bounds=bounds_mm_sivim, initial_guess=initial_guess_mm_sivim, rescale_units=rescale_units)\nsivim_fit = sivim_model.fit(noised_signal)\n\n# linear fit\nlinear_model = ivim_fit_method_linear.IvimModelLinear(gtab, b_threshold=0.2, bounds=bounds_mm_sivim, rescale_units=rescale_units)\nlinear_fit = linear_model.fit(noised_signal)\n", "linear_fit = linear_model.fit(noised_signal)\n\n# Subtracted fit (Le Bihan 2019)\nsubtracted_model = ivim_fit_method_subtracted.IvimModelSubtracted(gtab, bounds=bounds_mm, initial_guess=initial_guess_mm, rescale_units=rescale_units)#, b_threshold_lower=0.2, b_threshold_upper=0.1)\nsubtracted_fit = subtracted_model.fit(noised_signal)\n\n# Segmented fit (3 step) (DIPY)\nsegmented_3step_model = ivim_fit_method_segmented_3step.IvimModelSegmented3Step(gtab, bounds=bounds_mm, initial_guess=initial_guess_mm, rescale_units=rescale_units)#, b_threshold_lower=0.2, b_threshold_upper=0.1)\nsegmented_3step_fit = segmented_3step_model.fit(noised_signal)\n", "segmented_3step_fit = segmented_3step_model.fit(noised_signal)\n\n# Segmented fit (2 step) (Conventional method)\nsegmented_2step_model = ivim_fit_method_segmented_2step.IvimModelSegmented2Step(gtab, bounds=bounds_mm, initial_guess=initial_guess_mm, rescale_units=rescale_units)#, b_threshold_lower=0.2)\nsegmented_2step_fit = segmented_2step_model.fit(noised_signal)\nsegmented_2step_fit6 = segmented_2step_model.fit(noised_signal6)\n\n# MIX (Farooq et al.)\nmix_model = ivim_fit_method_modified_mix.IvimModelVP(gtab, bounds=bounds_mm, rescale_units=rescale_units, rescale_results_to_mm2_s=True)\nmix_fit = mix_model.fit(noised_signal)", "mix_model = ivim_fit_method_modified_mix.IvimModelVP(gtab, bounds=bounds_mm, rescale_units=rescale_units, rescale_results_to_mm2_s=True)\nmix_fit = mix_model.fit(noised_signal)\nmix_fit6 = mix_model.fit(noised_signal6)\n\n# TopoPro (Fadnavis et al.)\ntopopro_model = ivim_fit_method_modified_topopro.IvimModelTopoPro(gtab, bounds=bounds_mm, rescale_units=rescale_units, rescale_results_to_mm2_s=True)\ntopopro_fit = topopro_model.fit(noised_signal)\ntopopro_fit6 = topopro_model.fit(noised_signal6)\n\n# Print estimates", "\n# Print estimates\nprint(f\"Bi-exponential: {biexp_fit.model_params}\")\nprint(f\"Linear: {linear_fit.model_params}\")\nprint(f\"sIVIM: {sivim_fit.model_params}\")\nprint(f\"Subtracted: {subtracted_fit.model_params}\")\nprint(f\"3-step segmented: {segmented_3step_fit.model_params}\")\nprint(f\"2-step segmented: {segmented_2step_fit.model_params}\")\nprint(f\"MIX: {mix_fit.model_params}\")\nprint(f\"TopoPro: {topopro_fit.model_params}\")", "print(f\"MIX: {mix_fit.model_params}\")\nprint(f\"TopoPro: {topopro_fit.model_params}\")\n\n\n"]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_subtracted.py", "chunked_list": ["\n\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\n\n\nclass IvimModelSubtracted(ReconstModel):\n\n    def __init__(self, gtab, b_threshold_upper=100, b_threshold_lower=200, \\\n        initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The subtracted method described by Le Bihan in\n        What can we see with IVIM MRI? NeuroImage. 2019 Feb 15;187:56\u201367. \n\n        Args:\n            gtab (DIPY gtab class): \n                Object that holds the b-values.\n            b_threshold_upper (int, optional): \n                The upper threshold for the D* fit. Defaults to 100.\n            b_threshold_lower (int, optional): \n                The lower threshold of the D fit. Defaults to 200.\n            initial_guess (array-like, optional): \n                Initial guesses for f, D*, D repsectively. Defaults to None.\n            bounds (array-like, optional): \n                Tupple of (lower bounds, upper bounds) for f, D*, D respectively. \n                Defaults to None.\n            rescale_units (bool, optional): \n                Rescales the guesses and bounds to units of um2/ms. Make sure\n                the b-values are already in these units if used. \n                Defaults to False.\n        \"\"\"\n        \n        \n        self.bvals = gtab.bvals\n        self.perf_b_threshold_upper = b_threshold_upper\n        self.diff_b_threshold_lower = b_threshold_lower\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        \n        ### Fit the perfusion signal to bvals <= perf_b_threshold_upper\n        perf_bounds = [(self.bounds[0][0], self.bounds[0][2]), \\\n            (self.bounds[1][0], self.bounds[1][2])] # Bounds for S0 and D*\n        \n        perf_bvals = self.bvals[self.bvals <= self.perf_b_threshold_upper]\n        diff_data_to_be_removed = self.diffusion_signal(perf_bvals, S0_diff_est, D_est)\n        perf_bval_indices = np.where(self.bvals <= self.perf_b_threshold_upper)[0]\n        perf_bvals = self.bvals[perf_bval_indices]\n        perf_data = data[perf_bval_indices] - diff_data_to_be_removed # Subtract the diffusion signal from the total to get the perfusion signal\n        \n        S0_perf_est, D_star_est = curve_fit(self.perfusion_signal, perf_bvals, perf_data, \\\n            bounds=perf_bounds, p0=np.take(self.initial_guess, [0, 2]), maxfev=10000)[0]\n        \n        # Calculate the estimation of f based on the two S0 estimates\n        f_est = S0_perf_est/(S0_perf_est + S0_diff_est)\n        \n        # Set the results and rescale S0\n        result = np.array([S0_perf_est+S0_diff_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimModelSubtracted(ReconstModel):\n\n    def __init__(self, gtab, b_threshold_upper=100, b_threshold_lower=200, \\\n        initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The subtracted method described by Le Bihan in\n        What can we see with IVIM MRI? NeuroImage. 2019 Feb 15;187:56\u201367. \n\n        Args:\n            gtab (DIPY gtab class): \n                Object that holds the b-values.\n            b_threshold_upper (int, optional): \n                The upper threshold for the D* fit. Defaults to 100.\n            b_threshold_lower (int, optional): \n                The lower threshold of the D fit. Defaults to 200.\n            initial_guess (array-like, optional): \n                Initial guesses for f, D*, D repsectively. Defaults to None.\n            bounds (array-like, optional): \n                Tupple of (lower bounds, upper bounds) for f, D*, D respectively. \n                Defaults to None.\n            rescale_units (bool, optional): \n                Rescales the guesses and bounds to units of um2/ms. Make sure\n                the b-values are already in these units if used. \n                Defaults to False.\n        \"\"\"\n        \n        \n        self.bvals = gtab.bvals\n        self.perf_b_threshold_upper = b_threshold_upper\n        self.diff_b_threshold_lower = b_threshold_lower\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        \n        ### Fit the perfusion signal to bvals <= perf_b_threshold_upper\n        perf_bounds = [(self.bounds[0][0], self.bounds[0][2]), \\\n            (self.bounds[1][0], self.bounds[1][2])] # Bounds for S0 and D*\n        \n        perf_bvals = self.bvals[self.bvals <= self.perf_b_threshold_upper]\n        diff_data_to_be_removed = self.diffusion_signal(perf_bvals, S0_diff_est, D_est)\n        perf_bval_indices = np.where(self.bvals <= self.perf_b_threshold_upper)[0]\n        perf_bvals = self.bvals[perf_bval_indices]\n        perf_data = data[perf_bval_indices] - diff_data_to_be_removed # Subtract the diffusion signal from the total to get the perfusion signal\n        \n        S0_perf_est, D_star_est = curve_fit(self.perfusion_signal, perf_bvals, perf_data, \\\n            bounds=perf_bounds, p0=np.take(self.initial_guess, [0, 2]), maxfev=10000)[0]\n        \n        # Calculate the estimation of f based on the two S0 estimates\n        f_est = S0_perf_est/(S0_perf_est + S0_diff_est)\n        \n        # Set the results and rescale S0\n        result = np.array([S0_perf_est+S0_diff_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_modified_mix.py", "chunked_list": ["import numpy as np\nfrom scipy.optimize import least_squares, differential_evolution\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\ncvxpy, have_cvxpy, _ = optional_package(\"cvxpy\")\n\nclass IvimModelVP(ReconstModel):\n\n    def __init__(self, gtab, bounds=None, maxiter=10, xtol=1e-8, rescale_units=False, rescale_results_to_mm2_s=False):\n        r\"\"\" Initialize an IvimModelVP class.\n        This particular script was modified as the DIPY version has stringent \n        hard-coded bounds for the first optimizer that do not work well.\n        Note that he returned values are in units of \u00b5m2/ms!\n        \n        The IVIM model assumes that biological tissue includes a volume\n        fraction 'f' of water flowing with a pseudo-diffusion coefficient\n        D* and a fraction (1-f: treated as a separate fraction in the variable\n        projection method) of static (diffusion only), intra and\n        extracellular water, with a diffusion coefficient D. In this model\n        the echo attenuation of a signal in a single voxel can be written as\n            .. math::\n            S(b) = S_0*[f*e^{(-b*D\\*)} + (1-f)e^{(-b*D)}]\n            Where:\n            .. math::\n            S_0, f, D\\* and D are the IVIM parameters.\n            \n        gtab : DIPY gtab class containing the b-values\n            These are automatically scaled to units of ms/\u00b5m2 if given in s/mm2.\n        bounds : array-like, optional\n            Specify the bounds as [(lower f, lower D*, lower D), (upper f, upper D*, upper D)].\n            Default : None, default bounds are set.\n        maxiter: int, optional\n            Maximum number of iterations for the Differential Evolution in\n            SciPy.\n            default : 10\n        xtol : float, optional\n            Tolerance for convergence of minimization.\n            default : 1e-8\n        rescale_units : bool, optional\n            Set to True if you are inputting in units of mm2/s and want the\n            values automatically rescaled to \u00b5m2/ms. The latter is the best\n            for this fitting method.\n            Default : False\n        rescale_results_to_mm2_s : bool, optional\n            Set to True if you have used um2/ms but want the results in mm2/s. \n            Default : False.\n        \n        References\n        ----------\n        .. [1] Le Bihan, Denis, et al. \"Separation of diffusion and perfusion\n               in intravoxel incoherent motion MR imaging.\" Radiology 168.2\n               (1988): 497-505.\n        .. [2] Federau, Christian, et al. \"Quantitative measurement of brain\n               perfusion with intravoxel incoherent motion MR imaging.\"\n               Radiology 265.3 (2012): 874-881.\n        .. [3] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        \"\"\"\n\n        self.maxiter = maxiter\n        self.xtol = xtol\n        self.bvals = gtab.bvals\n        self.yhat_perfusion = np.zeros(self.bvals.shape[0])\n        self.yhat_diffusion = np.zeros(self.bvals.shape[0])\n        self.exp_phi1 = np.zeros((self.bvals.shape[0], 2))\n        self.bounds = bounds\n        self.rescale_results_to_mm2_s = rescale_results_to_mm2_s\n        \n        # This method works best in units of \u00b5m2/ms\n        # Something weird happends when values are as small as they are\n        # expressed in mm2/s.\n        \n        # The conversion is accomplished by dividing the b-value with 1000\n        # and multiplying the parameter values with 1000.\n        if gtab.bvals[-1] >= 10:\n            self.bvals = gtab.bvals/1000\n            \n        if bounds == None:\n            # Bounds expressed as (lower bound, upper bound) for [f, D*, D].\n            self.bounds = np.array([(0, 1), (5, 100), (0, 4)])\n        elif (bounds[0][1] <= 1) or rescale_units: # Realistically, if mm2/s units are used, D* bound is <= 1\n            self.bounds = np.array([(bounds[0][0], bounds[1][0]), \\\n                                    (bounds[0][1]*1000, bounds[1][1]*1000), \\\n                                    (bounds[0][2]*1000, bounds[1][2]*1000)])\n        else: # Finally, if units if \u00b5m2/ms are already used\n            self.bounds = np.array([(bounds[0][0], bounds[1][0], \\\n                                    (bounds[0][1], bounds[1][1]), \\\n                                    (bounds[0][2], bounds[1][2]))])\n            \n    @multi_voxel_fit\n    def fit(self, data, bounds_de=None):\n        r\"\"\" Fit method of the IvimModelVP model class\n        MicroLearn framework (VarPro)[1]_.\n        The VarPro computes the IVIM parameters using the MIX approach.\n        This algorithm uses three different optimizers. It starts with a\n        differential evolution algorithm and fits the parameters in the\n        power of exponentials. Then the fitted parameters in the first step are\n        utilized to make a linear convex problem. Using a convex optimization,\n        the volume fractions are determined. Then the last step is non linear\n        least square fitting on all the parameters. The results of the first\n        and second step are utilized as the initial values for the last step\n        of the algorithm. (see [1]_ and [2]_ for a comparison and a through\n        discussion).\n        References\n        ----------\n        .. [1] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [2] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n        \"\"\"\n        data_max = data.max()\n        data = data / data_max\n        b = self.bvals\n\n        # Setting up the bounds for differential_evolution\n        bounds_de = np.array([self.bounds[1], self.bounds[2]])\n\n\n        # Optimizer #1: Differential Evolution\n        res_one = differential_evolution(self.stoc_search_cost, bounds_de,\n                                         maxiter=self.maxiter, args=(data,),\n                                         disp=False, polish=True, popsize=28) #28\n        x = res_one.x\n        phi = self.phi(x)\n\n        # Optimizer #2: Convex Optimizer\n        f = self.cvx_fit(data, phi)\n        x_f = self.x_and_f_to_x_f(x, f)\n\n        # Setting up the bounds for least_squares\n        bounds_lower = (self.bounds[0][0], self.bounds[1][0], self.bounds[2][0])\n        bounds_upper = (self.bounds[0][1], self.bounds[1][1], self.bounds[2][1])\n        bounds = (bounds_lower, bounds_upper)\n\n        # Optimizer #3: Nonlinear-Least Squares\n        res = least_squares(self.nlls_cost, x_f, bounds=bounds,\n                            xtol=self.xtol, args=(data,))\n        result = res.x\n        f_est = result[0]\n        D_star_est = result[1]\n        D_est = result[2]\n\n        S0 = data / (f_est * np.exp(-b * D_star_est) + (1 - f_est) *\n                     np.exp(-b * D_est))\n        S0_est = S0 * data_max\n        \n        \n        if self.rescale_results_to_mm2_s:\n            result = np.array([np.mean(S0_est), f_est, D_star_est*1e-3, D_est*1e-3])\n        else:\n            result = np.insert(result, 0, np.mean(S0_est), axis=0)\n\n        # final result containing the four fit parameters: S0, f, D* and D\n        #result = np.insert(result, 0, np.mean(S0_est), axis=0)\n        return IvimFit(self, result)\n\n    def stoc_search_cost(self, x, signal):\n        \"\"\"\n        Cost function for differential evolution algorithm. Performs a\n        stochastic search for the non-linear parameters 'x'. The objective\n        function is calculated in the :func: `ivim_mix_cost_one`. The function\n        constructs the parameters using :func: `phi`.\n        Parameters\n        ----------\n        x : array\n            input from the Differential Evolution optimizer.\n        signal : array\n            The signal values measured for this model.\n        Returns\n        -------\n        :func: `ivim_mix_cost_one`\n        \"\"\"\n        phi = self.phi(x)\n        return self.ivim_mix_cost_one(phi, signal)\n\n    def ivim_mix_cost_one(self, phi, signal):\n        \"\"\"\n        Constructs the objective for the :func: `stoc_search_cost`.\n        First calculates the Moore-Penrose inverse of the input `phi` and takes\n        a dot product with the measured signal. The result obtained is again\n        multiplied with `phi` to complete the projection of the variable into\n        a transformed space. (see [1]_ and [2]_ for thorough discussion on\n        Variable Projections and relevant cost functions).\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `Phi`.\n        signal : array\n            The signal values measured for this model.\n        Returns\n        -------\n        (signal -  S)^T(signal -  S)\n        Notes\n        -----\n        to make cost function for Differential Evolution algorithm:\n        .. math::\n            (signal -  S)^T(signal -  S)\n        References\n        ----------\n        .. [1] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [2] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n        \"\"\"\n        # Moore-Penrose\n        phi_mp = np.dot(np.linalg.inv(np.dot(phi.T, phi)), phi.T)\n        f = np.dot(phi_mp, signal)\n        yhat = np.dot(phi, f)  # - sigma\n        return np.dot((signal - yhat).T, signal - yhat)\n\n    def cvx_fit(self, signal, phi):\n        \"\"\"\n        Performs the constrained search for the linear parameters `f` after\n        the estimation of `x` is done. Estimation of the linear parameters `f`\n        is a constrained linear least-squares optimization problem solved by\n        using a convex optimizer from cvxpy. The IVIM equation contains two\n        parameters that depend on the same volume fraction. Both are estimated\n        as separately in the convex optimizer.\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `phi`.\n        signal : array\n            The signal values measured for this model.\n        Returns\n        -------\n        f1, f2 (volume fractions)\n        Notes\n        -----\n        cost function for differential evolution algorithm:\n        .. math::\n            minimize(norm((signal)- (phi*f)))\n        \"\"\"\n\n        # Create four scalar optimization variables.\n        f = cvxpy.Variable(2)\n        # Constraints have been set similar to the MIX paper's\n        # Supplementary Note 2: Synthetic Data Experiments, experiment 2\n        constraints = [cvxpy.sum(f) == 1,\n                       f[0] >= 0.011,\n                       f[1] >= 0.011,\n                       f[0] <= self.bounds[1][0],\n                       f[1] <= 0.89]\n\n        # Form objective.\n        obj = cvxpy.Minimize(cvxpy.sum(cvxpy.square(phi @ f - signal)))\n\n        # Form and solve problem.\n        prob = cvxpy.Problem(obj, constraints)\n        prob.solve()  # Returns the optimal value.\n        return np.array(f.value)\n\n    def nlls_cost(self, x_f, signal):\n        \"\"\"\n        Cost function for the least square problem. The cost function is used\n        in the Least Squares function of SciPy in :func: `fit`. It guarantees\n        that stopping point of the algorithm is at least a stationary point\n        with reduction in the the number of iterations required by the\n        differential evolution optimizer.\n        Parameters\n        ----------\n        x_f : array\n            Contains the parameters 'x' and 'f' combines in the same array.\n        signal : array\n            The signal values measured for this model.\n        Returns\n        -------\n        sum{(signal -  phi*f)^2}\n        Notes\n        -----\n        cost function for the least square problem.\n        .. math::\n            sum{(signal -  phi*f)^2}\n        \"\"\"\n\n        x, f = self.x_f_to_x_and_f(x_f)\n        f1 = np.array([f, 1 - f])\n        phi = self.phi(x)\n        return np.sum((np.dot(phi, f1) - signal) ** 2)\n\n    def x_f_to_x_and_f(self, x_f):\n        \"\"\"\n        Splits the array of parameters in x_f to 'x' and 'f' for performing\n        a search on the both of them independently using the Trust Region\n        Method.\n        Parameters\n        ----------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n        Returns\n        -------\n        x, f : array\n            Split parameters into two separate arrays\n        \"\"\"\n        x = np.zeros(2)\n        f = x_f[0]\n        x = x_f[1:3]\n        return x, f\n\n    def x_and_f_to_x_f(self, x, f):\n        \"\"\"\n        Combines the array of parameters 'x' and 'f' into x_f for performing\n        NLLS on the final stage of optimization.\n        Parameters\n        ----------\n         x, f : array\n            Split parameters into two separate arrays\n        Returns\n        -------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n        \"\"\"\n        x_f = np.zeros(3)\n        x_f[0] = f[0]\n        x_f[1:3] = x\n        return x_f\n\n    def phi(self, x):\n        \"\"\"\n        Creates a structure for the combining the diffusion and pseudo-\n        diffusion by multiplying with the bvals and then exponentiating each of\n        the two components for fitting as per the IVIM- two compartment model.\n        Parameters\n        ----------\n         x : array\n            input from the Differential Evolution optimizer.\n        Returns\n        -------\n        exp_phi1 : array\n            Combined array of parameters perfusion/pseudo-diffusion\n            and diffusion parameters.\n        \"\"\"\n        self.yhat_perfusion = self.bvals * x[0]\n        self.yhat_diffusion = self.bvals * x[1]\n        self.exp_phi1[:, 0] = np.exp(-self.yhat_perfusion)\n        self.exp_phi1[:, 1] = np.exp(-self.yhat_diffusion)\n        return self.exp_phi1", "\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]"]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_biexp.py", "chunked_list": ["\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\n\n\nclass IvimModelBiExp(ReconstModel):\n\n    def __init__(self, gtab, bounds=None, initial_guess=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.set_initial_guess(initial_guess) # Sets the initial guess if the fit requires it\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        # Perform the fit\n        popt, pcov = curve_fit(self.ivim_model, self.bvals, data, p0=self.initial_guess,\\\n            bounds=self.bounds, maxfev=10000)\n        \n        # Set the results and rescale S0\n        result = popt\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def ivim_model(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "class IvimModelBiExp(ReconstModel):\n\n    def __init__(self, gtab, bounds=None, initial_guess=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.set_initial_guess(initial_guess) # Sets the initial guess if the fit requires it\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        # Perform the fit\n        popt, pcov = curve_fit(self.ivim_model, self.bvals, data, p0=self.initial_guess,\\\n            bounds=self.bounds, maxfev=10000)\n        \n        # Set the results and rescale S0\n        result = popt\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def ivim_model(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "        \n        \n\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_segmented_3step.py", "chunked_list": ["\n\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\n\n\nclass IvimModelSegmented3Step(ReconstModel):\n\n    def __init__(self, gtab, b_threshold_upper=100, b_threshold_lower=200, \\\n        initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The 3-step segmented fit as described in the DIPY documentation.\n        https://dipy.org/documentation/1.0.0./examples_built/reconst_ivim/\n\n        Args:\n            gtab (DIPY gradient table):\n                Object that holds the diffusion encoding information. In this\n                case, the b-values.\n            b_threshold_upper (float, optional): \n                The upper b-value threshold of the perfusion fit. \n                Defaults to 100.\n            b_threshold_lower (float, optional): \n                The lower b-value threshold of the diffusion fit. \n                Defaults to 200.\n            initial_guess (tuple, optional): \n                The intial guess for the parameters. Defaults to None.\n            bounds (tuple, optional): \n                The bounds input as a tuple of lower bounds and upper bounds,\n                specified in the order f, D*, D. Defaults to None.\n            rescale_units (bool, optional): \n                Set to True if the units are to be scaled to \u00b5m2/ms. Make sure\n                that the b-values are already specified in these units.\n                Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.perf_b_threshold_upper = b_threshold_upper\n        self.diff_b_threshold_lower = b_threshold_lower\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        \n        ### Fit the perfusion signal to bvals <= perf_b_threshold_upper\n        perf_bounds = [(self.bounds[0][0], self.bounds[0][2]), \\\n            (self.bounds[1][0], self.bounds[1][2])] # Bounds for S0 and D*\n        \n        perf_bval_indices = np.where(self.bvals <= self.perf_b_threshold_upper)[0]\n        perf_bvals = self.bvals[perf_bval_indices]\n        perf_data = data[perf_bval_indices]\n        \n        S0_perf_est, D_star_est = curve_fit(self.perfusion_signal, perf_bvals, perf_data, \\\n            bounds=perf_bounds, p0=np.take(self.initial_guess, [0, 2]), maxfev=10000)[0]\n        \n        # Calculate the estimation of f based on the two S0 estimates\n        f_est = S0_perf_est/(S0_perf_est + S0_diff_est)\n        \n        # Fit to the full bi-exponential, f estimate as initial guess, D fixed\n        full_initial_guess = np.array([self.initial_guess[0], f_est, self.initial_guess[2]])\n        \n        full_bounds_lower = self.bounds[0][:-1]\n        full_bounds_upper = self.bounds[1][:-1]\n        full_bounds = (full_bounds_lower, full_bounds_upper)\n        \n        S0_est, f_est, D_star_est = curve_fit(lambda b, S0, f, D_star: self.ivim_signal(b, S0, f, D_star, D_est), self.bvals, data, bounds=full_bounds, p0=full_initial_guess, maxfev=10000)[0]\n        \n        # Set the results and rescale S0\n        result = np.array([S0_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def ivim_signal(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimModelSegmented3Step(ReconstModel):\n\n    def __init__(self, gtab, b_threshold_upper=100, b_threshold_lower=200, \\\n        initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The 3-step segmented fit as described in the DIPY documentation.\n        https://dipy.org/documentation/1.0.0./examples_built/reconst_ivim/\n\n        Args:\n            gtab (DIPY gradient table):\n                Object that holds the diffusion encoding information. In this\n                case, the b-values.\n            b_threshold_upper (float, optional): \n                The upper b-value threshold of the perfusion fit. \n                Defaults to 100.\n            b_threshold_lower (float, optional): \n                The lower b-value threshold of the diffusion fit. \n                Defaults to 200.\n            initial_guess (tuple, optional): \n                The intial guess for the parameters. Defaults to None.\n            bounds (tuple, optional): \n                The bounds input as a tuple of lower bounds and upper bounds,\n                specified in the order f, D*, D. Defaults to None.\n            rescale_units (bool, optional): \n                Set to True if the units are to be scaled to \u00b5m2/ms. Make sure\n                that the b-values are already specified in these units.\n                Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.perf_b_threshold_upper = b_threshold_upper\n        self.diff_b_threshold_lower = b_threshold_lower\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        \n        ### Fit the perfusion signal to bvals <= perf_b_threshold_upper\n        perf_bounds = [(self.bounds[0][0], self.bounds[0][2]), \\\n            (self.bounds[1][0], self.bounds[1][2])] # Bounds for S0 and D*\n        \n        perf_bval_indices = np.where(self.bvals <= self.perf_b_threshold_upper)[0]\n        perf_bvals = self.bvals[perf_bval_indices]\n        perf_data = data[perf_bval_indices]\n        \n        S0_perf_est, D_star_est = curve_fit(self.perfusion_signal, perf_bvals, perf_data, \\\n            bounds=perf_bounds, p0=np.take(self.initial_guess, [0, 2]), maxfev=10000)[0]\n        \n        # Calculate the estimation of f based on the two S0 estimates\n        f_est = S0_perf_est/(S0_perf_est + S0_diff_est)\n        \n        # Fit to the full bi-exponential, f estimate as initial guess, D fixed\n        full_initial_guess = np.array([self.initial_guess[0], f_est, self.initial_guess[2]])\n        \n        full_bounds_lower = self.bounds[0][:-1]\n        full_bounds_upper = self.bounds[1][:-1]\n        full_bounds = (full_bounds_lower, full_bounds_upper)\n        \n        S0_est, f_est, D_star_est = curve_fit(lambda b, S0, f, D_star: self.ivim_signal(b, S0, f, D_star, D_est), self.bvals, data, bounds=full_bounds, p0=full_initial_guess, maxfev=10000)[0]\n        \n        # Set the results and rescale S0\n        result = np.array([S0_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def ivim_signal(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_linear.py", "chunked_list": ["\n\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import lsq_linear\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\nfrom scipy.signal import unit_impulse\n\n\nclass IvimModelLinear(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, bounds=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.b_threshold = b_threshold\n        self.bvals = gtab.bvals[gtab.bvals >= self.b_threshold]\n        \n        # Get the indices for the b-values that fulfils the condition.\n        # Will be used to get the corresponding signals.\n        b_threshold_idx = np.where(self.bvals >= self.b_threshold)[0][1]\n        self.signal_indices = list(np.where(gtab.bvals >= self.b_threshold)[0])\n        \n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data and move to the logarithmic space\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data_log = np.log(data / data_max)\n        \n        # Sort out the signals from non-zero b-values < b-threshold\n        ydata = data_log[self.signal_indices]\n        \n        # Define the design matrix\n        A = np.vstack([self.bvals, np.ones(len(self.bvals))]).T\n        \n        # Get the bounds for D and f\n        lsq_bounds_lower = (-self.bounds[1][2], -self.bounds[1][1])\n        lsq_bounds_upper = (-self.bounds[0][2], -self.bounds[0][1])\n        lsq_bounds = (lsq_bounds_lower, lsq_bounds_upper)\n        \n        # Perform the fit\n        popt = lsq_linear(A, ydata, bounds=lsq_bounds).x\n        D, f = -popt # f is estimated as the negative of the intercept\n        \n        \n        # Set the results and rescale S0\n        result = np.array([data[0], f, D])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def sivim_model(self, b, S0, f, D):\n        delta = unit_impulse(b.shape, idx=0)\n        res = S0*(f*delta + (1-f)*np.exp(-b*D))\n        return res\n            \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0), (np.inf, 1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\n\nclass IvimModelLinear(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, bounds=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.b_threshold = b_threshold\n        self.bvals = gtab.bvals[gtab.bvals >= self.b_threshold]\n        \n        # Get the indices for the b-values that fulfils the condition.\n        # Will be used to get the corresponding signals.\n        b_threshold_idx = np.where(self.bvals >= self.b_threshold)[0][1]\n        self.signal_indices = list(np.where(gtab.bvals >= self.b_threshold)[0])\n        \n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data and move to the logarithmic space\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data_log = np.log(data / data_max)\n        \n        # Sort out the signals from non-zero b-values < b-threshold\n        ydata = data_log[self.signal_indices]\n        \n        # Define the design matrix\n        A = np.vstack([self.bvals, np.ones(len(self.bvals))]).T\n        \n        # Get the bounds for D and f\n        lsq_bounds_lower = (-self.bounds[1][2], -self.bounds[1][1])\n        lsq_bounds_upper = (-self.bounds[0][2], -self.bounds[0][1])\n        lsq_bounds = (lsq_bounds_lower, lsq_bounds_upper)\n        \n        # Perform the fit\n        popt = lsq_linear(A, ydata, bounds=lsq_bounds).x\n        D, f = -popt # f is estimated as the negative of the intercept\n        \n        \n        # Set the results and rescale S0\n        result = np.array([data[0], f, D])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def sivim_model(self, b, S0, f, D):\n        delta = unit_impulse(b.shape, idx=0)\n        res = S0*(f*delta + (1-f)*np.exp(-b*D))\n        return res\n            \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0), (np.inf, 1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "        \n        \n\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    #@property\n    #def D_star(self):\n        #return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_modified_topopro.py", "chunked_list": ["\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import shgo\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\ncvxpy, have_cvxpy, _ = optional_package(\"cvxpy\")\n\nclass IvimModelTopoPro(ReconstModel):\n\n    def __init__(self, gtab, bounds=[[0,1], [0.005, 0.1], [1e-5, 0.004]], \\\n        rescale_units=False, shgo_iters=5, rescale_results_to_mm2_s=False):\n        r\"\"\" Initialize an IvimModelTP class.\n        This particular script was modified as the DIPY version has stringent \n        hard-coded bounds for the first optimizer that do not work well.\n        Note that he returned values are in units of \u00b5m2/ms!\n        \n        gtab : DIPY gtab class containing the b-values\n            These are automatically scaled to units of ms/\u00b5m2 if given in s/mm2.\n        shgo_iters : int, optional\n            The number of iterations done by the SHGO optimizer. 5 is recommended.\n            Default : 5.\n        rescale_units : bool, optional\n            Set to True if you are inputting in units of mm2/s and want the\n            values automatically rescaled to \u00b5m2/ms. The latter is the best\n            for this fitting method.\n            Default : False\n        rescale_results_to_mm2_s : bool, optional\n            Set to True if you have used um2/ms but want the results in mm2shgo_iters : int, optional\n            The number of iterations done by the SHGO optimizer. 5 is recommended.\n            Default : False.\n        \n        The original script can be found in the authours GitHub\n        https://github.com/ShreyasFadnavis/topopro\n\n        The IVIM model assumes that biological tissue includes a volume\n        fraction 'f' of water flowing with a pseudo-diffusion coefficient\n        D* and a fraction (1-f: treated as a separate fraction in the variable\n        projection method) of static (diffusion only), intra and\n        extracellular water, with a diffusion coefficient D. In this model\n        the echo attenuation of a signal in a single voxel can be written as\n\n            .. math::\n\n            S(b) = S_0*[f*e^{(-b*D\\*)} + (1-f)e^{(-b*D)}]\n\n            Where:\n            .. math::\n\n            S_0, f, D\\* and D are the IVIM parameters.\n\n        References\n        ----------\n        .. [1] Le Bihan, Denis, et al. \"Separation of diffusion and perfusion\n               in intravoxel incoherent motion MR imaging.\" Radiology 168.2\n               (1988): 497-505.\n        .. [2] Federau, Christian, et al. \"Quantitative measurement of brain\n               perfusion with intravoxel incoherent motion MR imaging.\"\n               Radiology 265.3 (2012): 874-881.\n        .. [3] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        \"\"\"\n\n        self.bvals = gtab.bvals\n        self.yhat_perfusion = np.zeros(self.bvals.shape[0])\n        self.yhat_diffusion = np.zeros(self.bvals.shape[0])\n        self.exp_phi = np.zeros((self.bvals.shape[0], 2))\n        self.shgo_iters = shgo_iters\n        self.rescale_results_to_mm2_s = rescale_results_to_mm2_s\n        \n        # The rescaled units arguement converts the bounds for D* and D from\n        # mm2/s to \u00b5m2/ms.\n        # It is assumed that the b-vales are given in the corresponding units\n        # and are thus not changed.\n        if gtab.bvals[-1] >= 10:\n            self.bvals = gtab.bvals/1000\n        if bounds == None:\n            # Bounds expressed as (lower bound, upper bound) for [f, D*, D].\n            self.bounds = np.array([(0, 1), (5, 100), (0, 4)])\n        elif (bounds[0][1] <= 1) or rescale_units: # Realistically, if mm2/s units are used, D* bound is <= 1\n            self.bounds = np.array([(bounds[0][0], bounds[1][0]), \\\n                                    (bounds[0][1]*1000, bounds[1][1]*1000), \\\n                                    (bounds[0][2]*1000, bounds[1][2]*1000)])\n        else: # Finally, if units if \u00b5m2/ms are already used\n            self.bounds = np.array([(bounds[0][0], bounds[1][0], \\\n                                    (bounds[0][1], bounds[1][1]), \\\n                                    (bounds[0][2], bounds[1][2]))])\n\n    @multi_voxel_fit\n    def fit(self, data):\n        r\"\"\" Fit method of the IvimModelTopoPro model class\n\n        Separable Homological Optimization for IVIM [1]_.\n\n        The TopoPro computes the IVIM parameters using the a bi-level\n        topological approach. This algorithm uses three different optimizers.\n        Level 1: It starts with a Simplicial Homolgy Optimization algorithm and\n        fits the parameters in the power of exponentials. Then the fitted\n        parameters in the first step are utilized to make a linear convex\n        problem. Using a convex optimization, the volume fractions are\n        determined.\n\n        Level 2: Simplicial Homolgy Optimization fitting on all the\n        parameters. The results of `Level 1` are utilized as\n        the initial values for the `Level 2` of the algorithm.\n\n        References\n        ----------\n        .. [1] Endres, Stefan et.al. \"A simplicial homology algorithm for\n               Lipschitz optimisation\", Journal of Global Optimization, 2018.\n        .. [2] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [3] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n\n        \"\"\"\n\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        b = self.bvals\n\n        # Setting up the bounds for level-1 SHGO\n        bounds_sh = np.array(self.bounds[1:])\n\n        # Optimizer #1: SHGO\n        minimizer_kwargs_pre = {'options': {f'ftol': 1e-4},\n                                'method': 'SLSQP'}\n        res_one = shgo(self.stoc_search_cost, bounds_sh, iters=self.shgo_iters,\n                       sampling_method='simplicial', args=(data,))\n        x = res_one.x\n        phi = self.phi(x)\n\n        # Optimizer #2: Convex Optimizer\n        f = self.cvx_fit(data, phi)\n        x_f = self.x_and_f_to_x_f(x, f)\n\n        # Setting up the bounds for level-2 SHGO\n        bounds_simpl = [(x_f[0] - x_f[0]*.99, x_f[0] + x_f[0]*.99),\n                        (x_f[1] - x_f[1]*.7, x_f[1] + x_f[1]*.7),\n                        (x_f[2] - x_f[2]*.7, x_f[2] + x_f[2]*.7)]\n\n        # build simplex around x_f (bounds must be symmetric)\n        minimizer_kwargs = {'options': {f'ftol': 1e-4}}\n        res = shgo(self.nlls_cost, bounds_simpl, iters=self.shgo_iters,\n                   minimizer_kwargs=minimizer_kwargs,\n                   sampling_method='simplicial',\n                   args=(data,))\n\n        result = res.x\n        f_est = result[0]\n        D_star_est = result[1]\n        D_est = result[2]\n\n        S0 = data / (f_est * np.exp(-b * D_star_est) + (1 - f_est) *\n                     np.exp(-b * D_est))\n        S0_est = S0 * data_max\n\n        # final result containing the four fit parameters: S0, f, D* and D\n        if self.rescale_results_to_mm2_s:\n            result = np.array([np.mean(S0_est), f_est, D_star_est*1e-3, D_est*1e-3])\n        else:\n            result = np.insert(result, 0, np.mean(S0_est), axis=0)\n            \n        return IvimFit(self, result)\n    \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)\n            \n    def stoc_search_cost(self, x, signal):\n        \"\"\"\n        Cost function for SHGO algorithm. Performs an approximation of the\n        homology groups of a complex built on a hypersurface homeomorphic to a\n        complex on the objective function for the non-linear parameters 'x'.\n        The objective funtion is calculated in the :func: `ivim_shgo`.\n        The function constructs the parameters using :func: `phi`.\n\n        Parameters\n        ----------\n        x : array\n            input from the Simplicial Homology optimizer.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        :func: `ivim_shgo`\n\n        \"\"\"\n        phi = self.phi(x)\n\n        return self.ivim_shgo(phi, signal)\n\n    def ivim_shgo(self, phi, signal):\n        \"\"\"\n        Constructs the objective for the :func: `stoc_search_cost`.\n\n        First calculates the Moore-Penrose inverse of the input `phi` and takes\n        a dot product with the measured signal. The result obtained is again\n        multiplied with `phi` to complete the projection of the variable into\n        a transformed space. (see [1]_ and [2]_ for thorough discussion on\n        Variable Projections and relevant cost functions).\n\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `Phi`.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        (signal -  S)^T(signal -  S)\n\n        Notes\n        --------\n        to make cost function for Differential Evolution algorithm:\n        .. math::\n\n            (signal -  S)^T(signal -  S)\n\n        References\n        ----------\n        .. [1] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [2] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n\n        \"\"\"\n        # Moore-Penrose\n        phi_mp = np.dot(np.linalg.inv(np.dot(phi.T, phi)), phi.T)\n        f = np.dot(phi_mp, signal)\n        yhat = np.dot(phi, f)\n        return np.dot((signal - yhat).T, signal - yhat)\n\n    def cvx_fit(self, signal, phi):\n        \"\"\"\n        Performs the constrained search for the linear parameters `f` after\n        the estimation of `x` is done. Estimation of the linear parameters `f`\n        is a constrained linear least-squares optimization problem solved by\n        using a convex optimizer from cvxpy. The IVIM equation contains two\n        parameters that depend on the same volume fraction. Both are estimated\n        as separately in the convex optimizer.\n\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `phi`.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        f1, f2 (volume fractions)\n\n        Notes\n        --------\n        cost function for differential evolution algorithm:\n\n        .. math::\n\n            minimize(norm((signal)- (phi*f)))\n        \"\"\"\n        # Create four scalar optimization variables.\n        f = cvxpy.Variable(2)\n        constraints = [cvxpy.sum(f) == 1,\n                       f[0] >= 1e-7,\n                       f[1] >= 1e-7,\n                       f[0] <= 0.9,\n                       f[1] <= 0.9]\n\n        # Form objective.\n        obj = cvxpy.Minimize(cvxpy.sum(cvxpy.square(phi @ f - signal)))\n\n        # Form and solve problem.\n        prob = cvxpy.Problem(obj, constraints)\n        prob.solve()  # Returns the optimal value.\n        return np.array(f.value)\n\n    def nlls_cost(self, x_f, signal):\n        \"\"\"\n        Cost function for the least square problem. The cost function is used\n        in the `Level 2` of TopoPro algorithm :func: `fit`.\n\n        Parameters\n        ----------\n        x_f : array\n            Contains the parameters 'x' and 'f' combines in the same array.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        sum{(signal -  phi*f)^2}\n\n        Notes\n        --------\n        cost function for the least square problem.\n\n        .. math::\n\n            sum{(signal -  phi*f)^2}\n        \"\"\"\n        x, f = self.x_f_to_x_and_f(x_f)\n        f1 = np.array([f, 1 - f])\n        phi = self.phi(x)\n\n        return np.sum((np.dot(phi, f1) - signal) ** 2)\n\n    def x_f_to_x_and_f(self, x_f):\n        \"\"\"\n        Splits the array of parameters in x_f to 'x' and 'f' for performing\n        a search on the both of them independently using the simplicial\n        homology optimizer (SHGO).\n\n        Parameters\n        ----------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n\n        Returns\n        -------\n        x, f : array\n            Splitted parameters into two separate arrays\n\n        \"\"\"\n        x = np.zeros(2)\n        f = x_f[0]\n        x = x_f[1:3]\n        return x, f\n\n    def x_and_f_to_x_f(self, x, f):\n        \"\"\"\n        Combines the array of parameters 'x' and 'f' into x_f for performing\n        SHGO on the `Level 2` of the optimization process.\n\n        Parameters\n        ----------\n         x, f : array\n            Splitted parameters into two separate arrays\n\n        Returns\n        -------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n\n        \"\"\"\n        x_f = np.zeros(3)\n        x_f[0] = f[0]\n        x_f[1:3] = x\n        return x_f\n\n    def phi(self, x):\n        \"\"\"\n        Creates a structure for the combining the diffusion and pseudo-\n        diffusion by multipling with the bvals and then exponentiating each of\n        the two components for fitting as per the IVIM- two compartment model.\n\n        Parameters\n        ----------\n         x : array\n            input from the Differential Evolution optimizer.\n\n        Returns\n        -------\n        exp_phi1 : array\n            Combined array of parameters perfusion/pseudo-diffusion\n            and diffusion parameters.\n\n        \"\"\"\n        self.yhat_perfusion = self.bvals * x[0]\n        self.yhat_diffusion = self.bvals * x[1]\n        self.exp_phi[:, 0] = np.exp(-self.yhat_perfusion)\n        self.exp_phi[:, 1] = np.exp(-self.yhat_diffusion)\n        return self.exp_phi", "class IvimModelTopoPro(ReconstModel):\n\n    def __init__(self, gtab, bounds=[[0,1], [0.005, 0.1], [1e-5, 0.004]], \\\n        rescale_units=False, shgo_iters=5, rescale_results_to_mm2_s=False):\n        r\"\"\" Initialize an IvimModelTP class.\n        This particular script was modified as the DIPY version has stringent \n        hard-coded bounds for the first optimizer that do not work well.\n        Note that he returned values are in units of \u00b5m2/ms!\n        \n        gtab : DIPY gtab class containing the b-values\n            These are automatically scaled to units of ms/\u00b5m2 if given in s/mm2.\n        shgo_iters : int, optional\n            The number of iterations done by the SHGO optimizer. 5 is recommended.\n            Default : 5.\n        rescale_units : bool, optional\n            Set to True if you are inputting in units of mm2/s and want the\n            values automatically rescaled to \u00b5m2/ms. The latter is the best\n            for this fitting method.\n            Default : False\n        rescale_results_to_mm2_s : bool, optional\n            Set to True if you have used um2/ms but want the results in mm2shgo_iters : int, optional\n            The number of iterations done by the SHGO optimizer. 5 is recommended.\n            Default : False.\n        \n        The original script can be found in the authours GitHub\n        https://github.com/ShreyasFadnavis/topopro\n\n        The IVIM model assumes that biological tissue includes a volume\n        fraction 'f' of water flowing with a pseudo-diffusion coefficient\n        D* and a fraction (1-f: treated as a separate fraction in the variable\n        projection method) of static (diffusion only), intra and\n        extracellular water, with a diffusion coefficient D. In this model\n        the echo attenuation of a signal in a single voxel can be written as\n\n            .. math::\n\n            S(b) = S_0*[f*e^{(-b*D\\*)} + (1-f)e^{(-b*D)}]\n\n            Where:\n            .. math::\n\n            S_0, f, D\\* and D are the IVIM parameters.\n\n        References\n        ----------\n        .. [1] Le Bihan, Denis, et al. \"Separation of diffusion and perfusion\n               in intravoxel incoherent motion MR imaging.\" Radiology 168.2\n               (1988): 497-505.\n        .. [2] Federau, Christian, et al. \"Quantitative measurement of brain\n               perfusion with intravoxel incoherent motion MR imaging.\"\n               Radiology 265.3 (2012): 874-881.\n        .. [3] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        \"\"\"\n\n        self.bvals = gtab.bvals\n        self.yhat_perfusion = np.zeros(self.bvals.shape[0])\n        self.yhat_diffusion = np.zeros(self.bvals.shape[0])\n        self.exp_phi = np.zeros((self.bvals.shape[0], 2))\n        self.shgo_iters = shgo_iters\n        self.rescale_results_to_mm2_s = rescale_results_to_mm2_s\n        \n        # The rescaled units arguement converts the bounds for D* and D from\n        # mm2/s to \u00b5m2/ms.\n        # It is assumed that the b-vales are given in the corresponding units\n        # and are thus not changed.\n        if gtab.bvals[-1] >= 10:\n            self.bvals = gtab.bvals/1000\n        if bounds == None:\n            # Bounds expressed as (lower bound, upper bound) for [f, D*, D].\n            self.bounds = np.array([(0, 1), (5, 100), (0, 4)])\n        elif (bounds[0][1] <= 1) or rescale_units: # Realistically, if mm2/s units are used, D* bound is <= 1\n            self.bounds = np.array([(bounds[0][0], bounds[1][0]), \\\n                                    (bounds[0][1]*1000, bounds[1][1]*1000), \\\n                                    (bounds[0][2]*1000, bounds[1][2]*1000)])\n        else: # Finally, if units if \u00b5m2/ms are already used\n            self.bounds = np.array([(bounds[0][0], bounds[1][0], \\\n                                    (bounds[0][1], bounds[1][1]), \\\n                                    (bounds[0][2], bounds[1][2]))])\n\n    @multi_voxel_fit\n    def fit(self, data):\n        r\"\"\" Fit method of the IvimModelTopoPro model class\n\n        Separable Homological Optimization for IVIM [1]_.\n\n        The TopoPro computes the IVIM parameters using the a bi-level\n        topological approach. This algorithm uses three different optimizers.\n        Level 1: It starts with a Simplicial Homolgy Optimization algorithm and\n        fits the parameters in the power of exponentials. Then the fitted\n        parameters in the first step are utilized to make a linear convex\n        problem. Using a convex optimization, the volume fractions are\n        determined.\n\n        Level 2: Simplicial Homolgy Optimization fitting on all the\n        parameters. The results of `Level 1` are utilized as\n        the initial values for the `Level 2` of the algorithm.\n\n        References\n        ----------\n        .. [1] Endres, Stefan et.al. \"A simplicial homology algorithm for\n               Lipschitz optimisation\", Journal of Global Optimization, 2018.\n        .. [2] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [3] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n\n        \"\"\"\n\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        b = self.bvals\n\n        # Setting up the bounds for level-1 SHGO\n        bounds_sh = np.array(self.bounds[1:])\n\n        # Optimizer #1: SHGO\n        minimizer_kwargs_pre = {'options': {f'ftol': 1e-4},\n                                'method': 'SLSQP'}\n        res_one = shgo(self.stoc_search_cost, bounds_sh, iters=self.shgo_iters,\n                       sampling_method='simplicial', args=(data,))\n        x = res_one.x\n        phi = self.phi(x)\n\n        # Optimizer #2: Convex Optimizer\n        f = self.cvx_fit(data, phi)\n        x_f = self.x_and_f_to_x_f(x, f)\n\n        # Setting up the bounds for level-2 SHGO\n        bounds_simpl = [(x_f[0] - x_f[0]*.99, x_f[0] + x_f[0]*.99),\n                        (x_f[1] - x_f[1]*.7, x_f[1] + x_f[1]*.7),\n                        (x_f[2] - x_f[2]*.7, x_f[2] + x_f[2]*.7)]\n\n        # build simplex around x_f (bounds must be symmetric)\n        minimizer_kwargs = {'options': {f'ftol': 1e-4}}\n        res = shgo(self.nlls_cost, bounds_simpl, iters=self.shgo_iters,\n                   minimizer_kwargs=minimizer_kwargs,\n                   sampling_method='simplicial',\n                   args=(data,))\n\n        result = res.x\n        f_est = result[0]\n        D_star_est = result[1]\n        D_est = result[2]\n\n        S0 = data / (f_est * np.exp(-b * D_star_est) + (1 - f_est) *\n                     np.exp(-b * D_est))\n        S0_est = S0 * data_max\n\n        # final result containing the four fit parameters: S0, f, D* and D\n        if self.rescale_results_to_mm2_s:\n            result = np.array([np.mean(S0_est), f_est, D_star_est*1e-3, D_est*1e-3])\n        else:\n            result = np.insert(result, 0, np.mean(S0_est), axis=0)\n            \n        return IvimFit(self, result)\n    \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)\n            \n    def stoc_search_cost(self, x, signal):\n        \"\"\"\n        Cost function for SHGO algorithm. Performs an approximation of the\n        homology groups of a complex built on a hypersurface homeomorphic to a\n        complex on the objective function for the non-linear parameters 'x'.\n        The objective funtion is calculated in the :func: `ivim_shgo`.\n        The function constructs the parameters using :func: `phi`.\n\n        Parameters\n        ----------\n        x : array\n            input from the Simplicial Homology optimizer.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        :func: `ivim_shgo`\n\n        \"\"\"\n        phi = self.phi(x)\n\n        return self.ivim_shgo(phi, signal)\n\n    def ivim_shgo(self, phi, signal):\n        \"\"\"\n        Constructs the objective for the :func: `stoc_search_cost`.\n\n        First calculates the Moore-Penrose inverse of the input `phi` and takes\n        a dot product with the measured signal. The result obtained is again\n        multiplied with `phi` to complete the projection of the variable into\n        a transformed space. (see [1]_ and [2]_ for thorough discussion on\n        Variable Projections and relevant cost functions).\n\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `Phi`.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        (signal -  S)^T(signal -  S)\n\n        Notes\n        --------\n        to make cost function for Differential Evolution algorithm:\n        .. math::\n\n            (signal -  S)^T(signal -  S)\n\n        References\n        ----------\n        .. [1] Fadnavis, Shreyas et.al. \"MicroLearn: Framework for machine\n               learning, reconstruction, optimization and microstructure\n               modeling, Proceedings of: International Society of Magnetic\n               Resonance in Medicine (ISMRM), Montreal, Canada, 2019.\n        .. [2] Farooq, Hamza, et al. \"Microstructure Imaging of Crossing (MIX)\n               White Matter Fibers from diffusion MRI.\" Scientific reports 6\n               (2016).\n\n        \"\"\"\n        # Moore-Penrose\n        phi_mp = np.dot(np.linalg.inv(np.dot(phi.T, phi)), phi.T)\n        f = np.dot(phi_mp, signal)\n        yhat = np.dot(phi, f)\n        return np.dot((signal - yhat).T, signal - yhat)\n\n    def cvx_fit(self, signal, phi):\n        \"\"\"\n        Performs the constrained search for the linear parameters `f` after\n        the estimation of `x` is done. Estimation of the linear parameters `f`\n        is a constrained linear least-squares optimization problem solved by\n        using a convex optimizer from cvxpy. The IVIM equation contains two\n        parameters that depend on the same volume fraction. Both are estimated\n        as separately in the convex optimizer.\n\n        Parameters\n        ----------\n        phi : array\n            Returns an array calculated from :func: `phi`.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        f1, f2 (volume fractions)\n\n        Notes\n        --------\n        cost function for differential evolution algorithm:\n\n        .. math::\n\n            minimize(norm((signal)- (phi*f)))\n        \"\"\"\n        # Create four scalar optimization variables.\n        f = cvxpy.Variable(2)\n        constraints = [cvxpy.sum(f) == 1,\n                       f[0] >= 1e-7,\n                       f[1] >= 1e-7,\n                       f[0] <= 0.9,\n                       f[1] <= 0.9]\n\n        # Form objective.\n        obj = cvxpy.Minimize(cvxpy.sum(cvxpy.square(phi @ f - signal)))\n\n        # Form and solve problem.\n        prob = cvxpy.Problem(obj, constraints)\n        prob.solve()  # Returns the optimal value.\n        return np.array(f.value)\n\n    def nlls_cost(self, x_f, signal):\n        \"\"\"\n        Cost function for the least square problem. The cost function is used\n        in the `Level 2` of TopoPro algorithm :func: `fit`.\n\n        Parameters\n        ----------\n        x_f : array\n            Contains the parameters 'x' and 'f' combines in the same array.\n\n        signal : array\n            The signal values measured for this model.\n\n        Returns\n        -------\n        sum{(signal -  phi*f)^2}\n\n        Notes\n        --------\n        cost function for the least square problem.\n\n        .. math::\n\n            sum{(signal -  phi*f)^2}\n        \"\"\"\n        x, f = self.x_f_to_x_and_f(x_f)\n        f1 = np.array([f, 1 - f])\n        phi = self.phi(x)\n\n        return np.sum((np.dot(phi, f1) - signal) ** 2)\n\n    def x_f_to_x_and_f(self, x_f):\n        \"\"\"\n        Splits the array of parameters in x_f to 'x' and 'f' for performing\n        a search on the both of them independently using the simplicial\n        homology optimizer (SHGO).\n\n        Parameters\n        ----------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n\n        Returns\n        -------\n        x, f : array\n            Splitted parameters into two separate arrays\n\n        \"\"\"\n        x = np.zeros(2)\n        f = x_f[0]\n        x = x_f[1:3]\n        return x, f\n\n    def x_and_f_to_x_f(self, x, f):\n        \"\"\"\n        Combines the array of parameters 'x' and 'f' into x_f for performing\n        SHGO on the `Level 2` of the optimization process.\n\n        Parameters\n        ----------\n         x, f : array\n            Splitted parameters into two separate arrays\n\n        Returns\n        -------\n        x_f : array\n            Combined array of parameters 'x' and 'f' parameters.\n\n        \"\"\"\n        x_f = np.zeros(3)\n        x_f[0] = f[0]\n        x_f[1:3] = x\n        return x_f\n\n    def phi(self, x):\n        \"\"\"\n        Creates a structure for the combining the diffusion and pseudo-\n        diffusion by multipling with the bvals and then exponentiating each of\n        the two components for fitting as per the IVIM- two compartment model.\n\n        Parameters\n        ----------\n         x : array\n            input from the Differential Evolution optimizer.\n\n        Returns\n        -------\n        exp_phi1 : array\n            Combined array of parameters perfusion/pseudo-diffusion\n            and diffusion parameters.\n\n        \"\"\"\n        self.yhat_perfusion = self.bvals * x[0]\n        self.yhat_diffusion = self.bvals * x[1]\n        self.exp_phi[:, 0] = np.exp(-self.yhat_perfusion)\n        self.exp_phi[:, 1] = np.exp(-self.yhat_diffusion)\n        return self.exp_phi", "\n\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_sivim.py", "chunked_list": ["\n\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\nfrom scipy.signal import unit_impulse\n\n\nclass IvimModelsIVIM(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, bounds=None, initial_guess=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.b_threshold = b_threshold\n        self.bvals = gtab.bvals[gtab.bvals >= self.b_threshold]\n        self.bvals = np.insert(self.bvals, 0, 0)\n        \n        # Get the indices for the b-values that fulfils the condition.\n        # Will be used to get the corresponding signals.\n        b_threshold_idx = np.where(self.bvals >= self.b_threshold)[0][1]\n        self.signal_indices = [0] + list(np.where(gtab.bvals >= self.b_threshold)[0])\n        \n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.set_initial_guess(initial_guess) # Sets the initial guess if the fit requires it\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        # Sort out the signals from non-zero b-values < b-threshold\n        ydata = data[self.signal_indices]\n        \n        \n        # Perform the fit\n        popt, pcov = curve_fit(self.sivim_model, self.bvals, ydata, p0=self.initial_guess,\\\n            bounds=self.bounds, maxfev=10000)\n        \n        # Set the results and rescale S0\n        result = popt\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def sivim_model(self, b, S0, f, D):\n        delta = unit_impulse(b.shape, idx=0)\n        res = S0*(f*delta + (1-f)*np.exp(-b*D))\n        return res\n            \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0), (np.inf, 1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\n\nclass IvimModelsIVIM(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, bounds=None, initial_guess=None, rescale_units=False):\n        \"\"\"A simple nlls fit to the bi-exponential IVIM model. No segmentations\n        are performed.\n\n        Args:\n            gtab (DIPY gradient table): \n            DIPY gradient table object containing\n            information of the diffusion gradients, b-values, etc.\n            \n            bounds (array-like, optional): \n            Bounds expressed as [lower bounds, upper bounds] for S0, f, D*, and\n            D respectively. Defaults to None.\n            \n            initial_guess (array-like, optional):\n            The initial guess for the parameters. Defaults to None.\n            \n            rescale_units (bool, optional): \n            Set to True if parameters are to be returned in units of \u00b5m2/ms. \n            The conversion only works in one direction, from mm2/s to \u00b5m2/ms.\n            Make sure the b-values in the gtab object are already in units of\n            \u00b5m2/ms if this is used. Defaults to False.\n        \"\"\"\n        \n        self.b_threshold = b_threshold\n        self.bvals = gtab.bvals[gtab.bvals >= self.b_threshold]\n        self.bvals = np.insert(self.bvals, 0, 0)\n        \n        # Get the indices for the b-values that fulfils the condition.\n        # Will be used to get the corresponding signals.\n        b_threshold_idx = np.where(self.bvals >= self.b_threshold)[0][1]\n        self.signal_indices = [0] + list(np.where(gtab.bvals >= self.b_threshold)[0])\n        \n        self.set_bounds(bounds) # Sets the bounds according to the requirements of the fits\n        self.set_initial_guess(initial_guess) # Sets the initial guess if the fit requires it\n        self.rescale_bounds_and_initial_guess(rescale_units) # Rescales the units of D* and D to \u00b5m2/ms if set to True\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        # Sort out the signals from non-zero b-values < b-threshold\n        ydata = data[self.signal_indices]\n        \n        \n        # Perform the fit\n        popt, pcov = curve_fit(self.sivim_model, self.bvals, ydata, p0=self.initial_guess,\\\n            bounds=self.bounds, maxfev=10000)\n        \n        # Set the results and rescale S0\n        result = popt\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def sivim_model(self, b, S0, f, D):\n        delta = unit_impulse(b.shape, idx=0)\n        res = S0*(f*delta + (1-f)*np.exp(-b*D))\n        return res\n            \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0), (np.inf, 1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "        \n        \n\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    #@property\n    #def D_star(self):\n        #return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/IAR_LundUniversity/ivim_fit_method_segmented_2step.py", "chunked_list": ["\n\"\"\" Classes and functions for fitting ivim model \"\"\"\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom dipy.reconst.base import ReconstModel\nfrom dipy.reconst.multi_voxel import multi_voxel_fit\nfrom dipy.utils.optpkg import optional_package\n\n\nclass IvimModelSegmented2Step(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, \\\n        initial_guess=None, perf_initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The conventional 2-step segmented fit.\n            1. Fit mono-expoential to large b-values above a b-threshold\n            2. Fix D in a NLLS fit to the diffusive bi-exponential IVIM model.\n\n        Args:\n            gtab (DIPY gtab class): \n                Object that holds the diffusion encoding information. In this\n                case, the b-values.\n            b_threshold (float, optional): \n                The threshold for the 2-step fit. Defaults to 200.\n            perf_initial_guess (array-like, optional): \n                The initial guess for the fit. Defaults to None.\n            bounds (array-like, optional): \n                Bounds for f, D*, and D (in that order), input as a tuple of \n                lower bounds and upper bounds. Defaults to None.\n            rescale_units (bool, optional): Set to true if you are inputting\n            bounds and initial guesses in mm2/s but want the returned values to\n            be in units of \u00b5m2/ms. Make sure the b-values are already in the\n            latter units if set to True. Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.diff_b_threshold_lower = b_threshold\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        # Fit to the full bi-exponential, D fixed\n        full_initial_guess = np.array(self.initial_guess[:-1])\n        \n        full_bounds_lower = self.bounds[0][:-1]\n        full_bounds_upper = self.bounds[1][:-1]\n        full_bounds = (full_bounds_lower, full_bounds_upper)\n        \n        S0_est, f_est, D_star_est = curve_fit(lambda b, S0, f, D_star: self.ivim_signal(b, S0, f, D_star, D_est), self.bvals, data, bounds=full_bounds, p0=full_initial_guess, maxfev=10000)[0]\n        \n        # Set the results and rescale S0\n        result = np.array([S0_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def ivim_signal(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimModelSegmented2Step(ReconstModel):\n\n    def __init__(self, gtab, b_threshold=200, \\\n        initial_guess=None, perf_initial_guess=None, bounds=None, rescale_units=False):\n        \"\"\"The conventional 2-step segmented fit.\n            1. Fit mono-expoential to large b-values above a b-threshold\n            2. Fix D in a NLLS fit to the diffusive bi-exponential IVIM model.\n\n        Args:\n            gtab (DIPY gtab class): \n                Object that holds the diffusion encoding information. In this\n                case, the b-values.\n            b_threshold (float, optional): \n                The threshold for the 2-step fit. Defaults to 200.\n            perf_initial_guess (array-like, optional): \n                The initial guess for the fit. Defaults to None.\n            bounds (array-like, optional): \n                Bounds for f, D*, and D (in that order), input as a tuple of \n                lower bounds and upper bounds. Defaults to None.\n            rescale_units (bool, optional): Set to true if you are inputting\n            bounds and initial guesses in mm2/s but want the returned values to\n            be in units of \u00b5m2/ms. Make sure the b-values are already in the\n            latter units if set to True. Defaults to False.\n        \"\"\"\n        \n        self.bvals = gtab.bvals\n        self.diff_b_threshold_lower = b_threshold\n        \n        self.set_bounds(bounds)\n        self.set_initial_guess(initial_guess)\n        self.rescale_bounds_and_initial_guess(rescale_units)\n        \n\n    @multi_voxel_fit\n    def fit(self, data):\n        # Normalize the data\n        data_max = data.max()\n        if data_max == 0:\n            pass\n        else:\n            data = data / data_max\n        \n        ### Fit the diffusion signal to bvals >= diff_b_threshold_lower\n        diff_bounds = [(self.bounds[0][0], self.bounds[0][3]), \\\n            (self.bounds[1][0], self.bounds[1][3])] # Bounds for S0 and D\n        \n        diff_bval_indices = np.where(self.bvals >= self.diff_b_threshold_lower)[0]\n        diff_bvals = self.bvals[diff_bval_indices]\n        diff_data = data[diff_bval_indices]\n        \n        S0_diff_est, D_est = curve_fit(self.diffusion_signal, diff_bvals, diff_data, \\\n            bounds=diff_bounds, p0=np.take(self.initial_guess, [0, 3]), maxfev=10000)[0]\n        \n        # Fit to the full bi-exponential, D fixed\n        full_initial_guess = np.array(self.initial_guess[:-1])\n        \n        full_bounds_lower = self.bounds[0][:-1]\n        full_bounds_upper = self.bounds[1][:-1]\n        full_bounds = (full_bounds_lower, full_bounds_upper)\n        \n        S0_est, f_est, D_star_est = curve_fit(lambda b, S0, f, D_star: self.ivim_signal(b, S0, f, D_star, D_est), self.bvals, data, bounds=full_bounds, p0=full_initial_guess, maxfev=10000)[0]\n        \n        # Set the results and rescale S0\n        result = np.array([S0_est, f_est, D_star_est, D_est])\n        result[0] *= data_max\n\n        return IvimFit(self, result)\n\n    def diffusion_signal(self, b, S0, D):\n        return S0*np.exp(-b*D)\n    \n    def perfusion_signal(self, b, S0, D_star):\n        return S0*np.exp(-b*D_star)\n    \n    def ivim_signal(self, b, S0, f, D_star, D):\n        return S0*(f*np.exp(-b*D_star) + (1-f)*np.exp(-b*D))\n    \n    def set_bounds(self, bounds):\n        # Use this function for fits that uses curve_fit\n        if bounds == None:\n            self.bounds = np.array([(0, 0, 0.005, 0), (np.inf, 1, 0.1, 0.004)])\n        else:\n            self.bounds = np.array([(0, *bounds[0]), (np.inf, *bounds[1])])\n            \n    def set_initial_guess(self, initial_guess):\n        if initial_guess == None:\n            self.initial_guess = (1, 0.2, 0.03, 0.001)\n        else:\n            self.initial_guess = initial_guess\n            \n    def rescale_bounds_and_initial_guess(self, rescale_units):\n        if rescale_units:\n            # Rescale the guess\n            self.initial_guess = (self.initial_guess[0], self.initial_guess[1], \\\n                self.initial_guess[2]*1000, self.initial_guess[3]*1000)\n            \n            # Rescale the bounds\n            lower_bounds = (self.bounds[0][0], self.bounds[0][1], \\\n                self.bounds[0][2]*1000, self.bounds[0][3]*1000)\n            upper_bounds = (self.bounds[1][0], self.bounds[1][1], \\\n                self.bounds[1][2]*1000, self.bounds[1][3]*1000)\n            self.bounds = (lower_bounds, upper_bounds)", "\nclass IvimFit(object):\n\n    def __init__(self, model, model_params):\n        \"\"\" Initialize a IvimFit class instance.\n            Parameters\n            ----------\n            model : Model class\n            model_params : array\n            The parameters of the model. In this case it is an\n            array of ivim parameters. If the fitting is done\n            for multi_voxel data, the multi_voxel decorator will\n            run the fitting on all the voxels and model_params\n            will be an array of the dimensions (data[:-1], 4),\n            i.e., there will be 4 parameters for each of the voxels.\n        \"\"\"\n        self.model = model\n        self.model_params = model_params\n\n    def __getitem__(self, index):\n        model_params = self.model_params\n        N = model_params.ndim\n        if type(index) is not tuple:\n            index = (index,)\n        elif len(index) >= model_params.ndim:\n            raise IndexError(\"IndexError: invalid index\")\n        index = index + (slice(None),) * (N - len(index))\n        return type(self)(self.model, model_params[index])\n\n    @property\n    def S0_predicted(self):\n        return self.model_params[..., 0]\n\n    @property\n    def perfusion_fraction(self):\n        return self.model_params[..., 1]\n\n    @property\n    def D_star(self):\n        return self.model_params[..., 2]\n\n    @property\n    def D(self):\n        return self.model_params[..., 3]\n\n    @property\n    def shape(self):\n        return self.model_params.shape[:-1]", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/__init__.py", "chunked_list": [""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/__init__.py", "chunked_list": [""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_loading/load_ivim_subject.py", "chunked_list": ["import os\nimport logging\nimport torch\nimport numpy as np\nimport torchio as tio\n\n\ndef load_ivim_subject(study_subject_path):\n    \"\"\"\n    loads torchio subject with IVIM data (signals and bvalues)\n    Args:\n        study_subject_path: path in which subject data is located\n\n    Returns:\n\n    \"\"\"\n    subject_dict = {}\n\n    # find all files that match study path and subject id\n    for file in os.listdir(study_subject_path):\n        file_path = os.path.join(study_subject_path, file)\n        logging.info(f'start loading data from {file_path}')\n\n        # Check file extension for image file\n        if file_path[-2:] == \"gz\" or file_path[-2:] == \"ii\":\n\n            # load nifti image\n            image = tio.Image(file_path)\n            image.set_data(image.data.to(dtype=torch.float32))\n            subject_dict['signals'] = image\n\n        # Check if file contains bvalues\n        elif file_path[-2:] == \"al\":\n            text_file = np.genfromtxt(file_path)\n            bvals = np.array(text_file)\n            subject_dict[\"xvals\"] = tio.Image(tensor=torch.Tensor(np.reshape(bvals, (bvals.shape[0], 1, 1, 1))))\n\n        else:\n            logging.info(f'skipping loading of file {file_path}, no appropriate file extension. ')\n\n        # Create subject\n    if 'xvals' in subject_dict.keys() and 'signals' in subject_dict.keys():\n        return tio.Subject(subject_dict)", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_loading/__init__.py", "chunked_list": [""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/__init__.py", "chunked_list": [""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/AverageSignalsOfEqualXvals.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass AverageSignalsOfEqualXvals(Transform):\n\n    def __init__(self,  **kwargs):\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        normalize signals\n        Args:\n            signals: signals array to normalize\n            xvals: xval array\n\n        Returns:\n            normalized_signals: normalized signals array\n\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        signals = images_dict['signals'].numpy()\n        xvals = np.squeeze(images_dict['xvals'].numpy())\n        signals, xvals = self.average_signal_of_equal_xvals(signals, xvals)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(signals)), 'signals')\n        subject.add_image(torchio.Image(tensor=torch.Tensor(np.reshape(xvals, (xvals.shape[0], 1, 1, 1)))), 'xvals')\n        return subject\n\n    @staticmethod\n    def average_signal_of_equal_xvals(signals, xvals):\n        \"\"\"\n        average the signal of equal xvals\n        Args:\n            signals: signal matrix [signals X xvals]\n            xvals: array of xvals\n\n        Returns:\n            averaged_signal_matrix: averaged signal matrix [signals X unique_xvals]\n            unique_xval_arrays: unique xvals in averaged signal matrix\n\n        \"\"\"\n        unique_xvals = np.unique(xvals)\n        averaged_signals = np.zeros((unique_xvals.shape[0], *signals.shape[1:]))\n        for xval_idx, unique_xval in enumerate(unique_xvals):\n            averaged_signals[xval_idx, ...] = np.squeeze(np.mean(signals[np.where(xvals == unique_xval), ...], axis=1))\n        return averaged_signals, unique_xvals", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/SortSignalOnXval.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass SortSignalOnXval(Transform):\n\n    def __init__(self,  **kwargs):\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        Sorts signals and xvals on ascending xvals\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        signals = images_dict['signals'].numpy()\n        xvals = np.squeeze(images_dict['xvals'].numpy())\n        signals, xvals = self.sort_signals_on_xval_array(signals, xvals)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(signals)), 'signals')\n        subject.add_image(torchio.Image(tensor=torch.Tensor(np.reshape(xvals, (xvals.shape[0], 1, 1, 1)))), 'xvals')\n        return subject\n\n    @staticmethod\n    def sort_signals_on_xval_array(signals, xvals):\n        \"\"\"\n        Sorts signals and xvals on ascending xvals\n        Args:\n            signals: signals to sort\n            bval: bvalues to use for sorting\n\n        Returns:\n            sorted_signals: sorted signals\n            sorted_bvals: sorted bvals\n\n        \"\"\"\n        sorted_xval_idcs = np.argsort(xvals)\n        sorted_xvals = xvals[sorted_xval_idcs]\n        sorted_signals = signals[sorted_xval_idcs, ...]\n        return sorted_signals, sorted_xvals"]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/NormalizeSignals.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass NormalizeSignals(Transform):\n\n    def __init__(self, xval_threshold, **kwargs):\n        self.xval_threshold = xval_threshold\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        normalize xvals Image of subject\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        signals = images_dict['signals'].numpy()\n        xvals = np.squeeze(images_dict['xvals'].numpy())\n        signals = self.normalize_signals(signals, xvals, self.xval_threshold)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(signals)), 'signals')\n        return subject\n\n    @staticmethod\n    def normalize_signals(signals, xvals, xval_threshold):\n        \"\"\"\n         normalize signals\n         Args:\n             signals: signals array to normalize\n             xvals: xval array\n             xval_threshold: threshold below which bvals are considered b0\n\n         Returns:\n             normalized_signals: normalized signals array\n\n         \"\"\"\n        # get average b0 signals and set signals with S0 of 0 to nan\n        mean_S0 = np.nanmean(signals[xvals <= xval_threshold, :, :, :], axis=0)\n        signals[:, mean_S0 == 0] = np.nan\n\n        # normalize signals to S0 intensity\n        normalized_signals = signals / mean_S0\n        normalized_signals[np.isnan(normalized_signals)] = 0\n\n        return normalized_signals", "\n\n"]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/SignalMask.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass SignalMask(Transform):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        curates signals Image of subject\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        signals = images_dict['signals'].numpy()\n        signal_mask = self.signal_mask(signals)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(np.expand_dims(signal_mask, 0))), 'signal_mask')\n        return subject\n\n    @staticmethod\n    def signal_mask(signals):\n        \"\"\"\n        returns mask with nonzero element for signal vectors with nonzero entries\n        Args:\n            signals: signals\n\n        Returns:\n            masked_signals: signals containing nonzero elements\n        \"\"\"\n\n        return np.sum(signals, axis=0) > 0", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/SignalCuration.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass SignalCuration(Transform):\n\n    def __init__(self, qmri_application, **kwargs):\n        self.qmri_application = qmri_application\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        curates signals Image of subject\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        if self.qmri_application == 'IVIM' or 'ivim':\n            signals = images_dict['signals'].numpy()\n            xvals = np.squeeze(images_dict['xvals'].numpy())\n            valid_mask = self.ivim_selection(signals, xvals)\n            subject.add_image(torchio.Image(tensor=torch.Tensor(np.expand_dims(valid_mask, 0))), 'valid_mask')\n            return subject\n        else:\n            raise NotImplementedError\n\n    @staticmethod\n    def ivim_selection(signals, xvals):\n        \"\"\"\n        returns only those signals exhibiting ivim decay\n        Args:\n            signals: signals for corresponding xvals\n            xvals: xvals\n\n        Returns:\n            normalized_valid_signals: normalized_valid_signals that exhibit ivim-like decay\n            masked_signals: normalized_signals where signals not exhibiting ivim-like decay are set to 0\n        \"\"\"\n\n        # get average b0 signals and set signals with S0 of 0 to nan\n        mean_S0 = np.nanmean(signals[xvals <= 0.0001, ...], axis=0)\n\n        # select only those voxels with average S0 larger than half of median S0 of voxels with S0 larger than 0\n        valid_idcs_median_value = mean_S0 > (0.5 * np.nanmedian(mean_S0[mean_S0 > 0]))\n\n        # check if signal is ivim like\n        signals[signals > 1.5] = 1.5\n        valid_idcs_ivim_curve1 = np.percentile(signals[xvals * 100 < 50, ...], 95,\n                                               axis=0) < 1.3\n        valid_idcs_ivim_curve2 = np.percentile(signals[xvals * 100 > 50, ...], 95,\n                                               axis=0) < 1.2\n        valid_idcs_ivim_curve3 = np.percentile(signals[xvals * 100 > 150, ...], 95,\n                                               axis=0) < 1.0\n        mask_signals = valid_idcs_median_value & valid_idcs_ivim_curve1 & valid_idcs_ivim_curve2 & valid_idcs_ivim_curve3\n\n        return mask_signals", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/NormalizeXvals.py", "chunked_list": ["import torch\nimport torchio\nimport numpy as np\n\nfrom torchio.transforms import Transform\n\n\nclass NormalizeXvals(Transform):\n\n    def __init__(self, normalization_factor, **kwargs):\n        self.normalization_factor = normalization_factor\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        normalize xvals Image of subject\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        xvals = np.squeeze(images_dict['xvals'].numpy())\n        xvals = self.normalize_xvals(xvals, self.normalization_factor)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(np.reshape(xvals, (xvals.shape[0], 1, 1, 1)))), 'xvals')\n        return subject\n\n    @staticmethod\n    def normalize_xvals(xvals, normalization_factor):\n        \"\"\"\n        normalize signals\n        Args:\n            xvals: xvalue array\n            normalization_factor: factor to multiply xvals with\n\n        Returns:\n            normalized_xvals: normalized signals array\n        \"\"\"\n        normalized_xvals = xvals * normalization_factor\n        return normalized_xvals", ""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/NormalizeMaxSignal.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\nfrom torchio.transforms import Transform\n\n\nclass NormalizeMaxSignal(Transform):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        normalize signals Image of subject\n        Args:\n            subject: Subject\n\n        Returns:\n            subject: Subject\n        \"\"\"\n        images_dict = subject.get_images_dict()\n        signals = images_dict['signals'].numpy()\n        signals = self.normalize_signals(signals)\n        subject.add_image(torchio.Image(tensor=torch.Tensor(signals)), 'signals')\n        return subject\n\n    @staticmethod\n    def normalize_signals(signals):\n        \"\"\"\n         normalize signals\n         Args:\n             signals: signals array to normalize\n\n         Returns:\n             normalized_signals: normalized signals array\n\n         \"\"\"\n        maxsignal = np.nanmax(signals, axis=0)\n        signals /= maxsignal\n\n        return signals", "\n\n"]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/__init__.py", "chunked_list": [""]}
{"filename": "src/original/DK_OGC_AmsterdamUMC/utils/data_processing/processors/FlattenImageData.py", "chunked_list": ["import numpy as np\nimport torch\nimport torchio\n\nfrom torchio.transforms import Transform\n\n\nclass FlattenImageData(Transform):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def apply_transform(self, subject):\n        \"\"\"\n        flattens image data of signals image of subject\n        Args:\n            signals: signals array to normalize\n            xvals: xval array\n\n        Returns:\n            normalized_signals: normalized signals array\n\n        \"\"\"\n        images_dict = subject.get_images_dict(include=self.include, exclude=self.exclude)\n        for image_key, image in images_dict.items():\n            flattened_array = self.flatten_image_data(image.numpy())\n            subject.add_image(torchio.Image(tensor=torch.Tensor(np.reshape(flattened_array,\n                                                                           (flattened_array.shape[0],\n                                                                            flattened_array.shape[1], 1, 1)))),\n                              image_key)\n        return subject\n\n    @staticmethod\n    def flatten_image_data(signals):\n        \"\"\"\n        Flattens 4D array into 2D array\n        Args:\n            signals: signals array to normalize\n\n        Returns:\n            normalized_signals: normalized signals array\n        \"\"\"\n        bvals, x, y, z = signals.shape\n        signals_array = np.reshape(signals, (bvals, x * y * z))\n        return signals_array", "\n"]}
{"filename": "src/original/ETP_SRI/__init__.py", "chunked_list": [""]}
{"filename": "src/original/ETP_SRI/LinearFitting.py", "chunked_list": ["import numpy as np\nimport numpy.polynomial.polynomial as poly\n\nfrom utils.data_simulation.GenerateData import GenerateData\n\n\n\nclass LinearFit:\n    \"\"\"\n    Performs linear fits of exponential data\n    \"\"\"\n    def __init__(self, linear_cutoff=500):\n        \"\"\"\n        Parameters\n        ----------\n        linear_cutoff : float\n            The b-value after which it can be assumed that the perfusion value is negligible\n        \"\"\"\n        self.linear_cutoff = linear_cutoff\n    \n    def linear_fit(self, bvalues, signal, weighting=None, stats=False):\n        \"\"\"\n        Fit a single line\n\n        Parameters\n        ----------\n        bvalues : list or array of float\n            The diffusion (b-values)\n        signal : list or array of float\n            The acquired signal to fit. It is assumed to be linearized at this point.\n        weighting : list or array fo float\n            Weights to pass into polyfit. None is no weighting.\n        stats : boolean\n            If true, return the polyfit statistics\n        \"\"\"\n        assert bvalues.size == signal.size, \"Signal and b-values don't have the same number of values\"\n        if stats:\n            D, stats = poly.polyfit(np.asarray(bvalues), signal, 1, full=True, w=weighting)\n            return [np.exp(D[0]), *-D[1:]], stats\n        else:\n            D = poly.polyfit(np.asarray(bvalues), signal, 1, w=weighting)\n            return [np.exp(D[0]), *-D[1:]]\n\n    def ivim_fit(self, bvalues, signal):\n        \"\"\"\n        Fit an IVIM curve\n        This fits a bi-exponential curve using linear fitting only\n\n\n        Parameters\n        ----------\n        bvalues : list or array of float\n            The diffusion (b-values)\n        signal : list or array of float\n            The acquired signal to fit. It is assumed to be exponential at this point\n        \"\"\"\n        bvalues = np.asarray(bvalues)\n        assert bvalues.size > 1, 'Too few b-values'\n        signal = np.asarray(signal)\n        assert bvalues.size == signal.size, \"Signal and b-values don't have the same number of values\"\n        gd = GenerateData()\n        lt_cutoff = bvalues <= self.linear_cutoff\n        gt_cutoff = bvalues >= self.linear_cutoff\n        linear_signal = np.log(signal)\n        D = self.linear_fit(bvalues[gt_cutoff], linear_signal[gt_cutoff])\n        \n        if lt_cutoff.sum() > 0:\n            signal_Dp = linear_signal[lt_cutoff] - gd.linear_signal(D[1], bvalues[lt_cutoff], np.log(D[0]))\n            \n            Dp_prime = self.linear_fit(bvalues[lt_cutoff], np.log(signal_Dp))\n            \n            if np.any(np.asarray(Dp_prime) < 0) or not np.all(np.isfinite(Dp_prime)):\n                print('Perfusion fit failed')\n                Dp_prime = [0, 0]\n            f = signal[0] - D[0]\n        else:\n            print(\"This doesn't seem to be an IVIM set of b-values\")\n            f = 1\n            Dp_prime = [0, 0]\n        D = D[1]\n        Dp = D + Dp_prime[1]\n        if np.allclose(f, 0):\n            Dp = 0\n        elif np.allclose(f, 1):\n            D = 0\n        return [f, D, Dp]", ""]}
