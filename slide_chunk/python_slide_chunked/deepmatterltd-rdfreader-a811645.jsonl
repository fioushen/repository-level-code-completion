{"filename": "test/test_parse_mol_block.py", "chunked_list": ["from rdfreader.parse.molblock import _parse_large_regno, get_mol_block_metadata\n\n\ndef test_parse_large_regno():\n    assert _parse_large_regno([\"\", \"M  REG     0123456    \\n\", \"\"]) == \"0123456\"\n\n\ndef test_get_mol_block_metadata(sample_mol_block, sample_molecule_metadata):\n    \"\"\"Components of this function are tested seperately, only need to test the\n    once for integration.\"\"\"\n    expected_result = sample_molecule_metadata\n    test_result = get_mol_block_metadata(sample_mol_block)\n\n    assert test_result == expected_result", ""]}
{"filename": "test/test_molecule.py", "chunked_list": ["from rdkit.Chem import Mol, MolFromMolBlock, MolToSmiles\n\nfrom rdfreader.chem.mol import Molecule\n\n\ndef assert_molecule_from_mol_block(mol: Molecule, mol_block: str):\n    \"\"\"Assert that a molecule object created from a mol block string has the\n    correct properties.\"\"\"\n    assert mol.rd_mol is not None\n    assert mol.mol_block == mol_block", "\n\ndef test_molecule_from_mol_block(sample_mol_block):\n    \"\"\"Test that the Molecule.from_mol_block method works, creating a Molecule\n    object from a mol block string and correctly creates class attributes.\"\"\"\n    mol = Molecule.from_mol_block(sample_mol_block)\n    assert_molecule_from_mol_block(mol, sample_mol_block)\n\n\ndef test_molecule_init_from_mol_block(sample_mol_block):\n    \"\"\"Test we can init a molecule object directly by passing a mol block\n    string.\"\"\"\n    mol = Molecule(sample_mol_block)\n    assert_molecule_from_mol_block(mol, sample_mol_block)", "\ndef test_molecule_init_from_mol_block(sample_mol_block):\n    \"\"\"Test we can init a molecule object directly by passing a mol block\n    string.\"\"\"\n    mol = Molecule(sample_mol_block)\n    assert_molecule_from_mol_block(mol, sample_mol_block)\n\n\ndef test_create_empty_molecule():\n    \"\"\"Test that a Molecule object can be created without a mol block\n    string.\"\"\"\n    mol = Molecule()\n    assert mol.mol_block is None", "def test_create_empty_molecule():\n    \"\"\"Test that a Molecule object can be created without a mol block\n    string.\"\"\"\n    mol = Molecule()\n    assert mol.mol_block is None\n\n\ndef test_molecule_to_rdkit_mol(sample_molecule, sample_mol_block):\n    \"\"\"Test the Molecule.rd_mol property.\"\"\"\n    rd_mol: Mol = sample_molecule.rd_mol\n    # can't directly compare Mol objects, so we'll just check that it is of\n    # the right type and is not None\n    assert rd_mol is not None\n    assert isinstance(rd_mol, Mol)", "\n\ndef test_molecule_to_smiles(sample_molecule, sample_mol_block):\n    \"\"\"Test the output of the Molecule.smiles property.\n\n    Verifies the smiles matches that output by RDKit.\n    \"\"\"\n    rd_mol: Mol = MolFromMolBlock(sample_mol_block)\n    rd_smiles: str = MolToSmiles(rd_mol)\n    assert sample_molecule.smiles == rd_smiles", "\n\ndef test_molecule_metadata(sample_molecule, sample_molecule_metadata):\n    \"\"\"Test the Molecule.metadata property.\"\"\"\n    assert sample_molecule.metadata == sample_molecule_metadata\n\n\ndef test_molecule_from_smiles():\n    \"\"\"Test the Molecule.from_smiles method.\"\"\"\n    smiles = \"OCO\"\n    mol = Molecule.from_smiles(smiles)\n    assert mol.rd_mol is not None\n    assert mol.smiles == smiles", ""]}
{"filename": "test/test_write.py", "chunked_list": ["from tempfile import NamedTemporaryFile\n\nfrom rdfreader.write import write_rdf\n\n\ndef test_write_rdf(first_sample_rxn):\n    with NamedTemporaryFile(\"w+\", suffix=\"rdf\") as f:\n        rxn_blocks = [first_sample_rxn] * 3\n\n        write_rdf(f, rxn_blocks, [0, 1, 2])\n\n        f.seek(0)\n\n        rdf_text = f.read()\n\n        # $RXN should occur once for each reaction block\n        assert rdf_text.count(\"$RXN\") == len(rxn_blocks)\n\n        # first line should start with $RDFILE\n        assert rdf_text.startswith(\"$RDFILE\")", ""]}
{"filename": "test/test_reaction.py", "chunked_list": ["# Typing\nfrom unittest.mock import MagicMock\n\nimport pytest\n\nfrom rdfreader.chem.reaction import Reaction\n\n\ndef test_reaction_from_rxn_block(sample_rxn_block, sample_rxn_block_metadata):\n    reaction = Reaction(sample_rxn_block)\n\n    assert isinstance(reaction, Reaction)\n    assert reaction.metadata == sample_rxn_block_metadata\n    assert reaction.rxn_block == sample_rxn_block\n    assert reaction.rd_rxn is not None", "def test_reaction_from_rxn_block(sample_rxn_block, sample_rxn_block_metadata):\n    reaction = Reaction(sample_rxn_block)\n\n    assert isinstance(reaction, Reaction)\n    assert reaction.metadata == sample_rxn_block_metadata\n    assert reaction.rxn_block == sample_rxn_block\n    assert reaction.rd_rxn is not None\n    # TODO: check reaction properties match\n\n\ndef test_reaction_from_rxn_block_invalid_raises():\n    with pytest.raises(ValueError):\n        Reaction(\"invalid rxn block\")", "\n\ndef test_reaction_from_rxn_block_invalid_raises():\n    with pytest.raises(ValueError):\n        Reaction(\"invalid rxn block\")\n\n\ndef test_reaction_from_rxn_block_empty_raises():\n    with pytest.raises(ValueError):\n        Reaction(\"\")", "\n\ndef test_reaction_to_smiles(mocker, sample_rxn_block):\n    \"\"\"Test that the reaction_to_smiles function gets called.\"\"\"\n    reaction_smiles_patch: MagicMock = mocker.patch(\"rdfreader.chem.reaction.reaction_smiles\", return_value=\"CC>>CC\")\n    # give a dummy smiles just so the validation check within\n    # Reaction.from_rxn_block() passes\n    reaction: Reaction = Reaction(sample_rxn_block)\n    reaction.smiles\n    reaction_smiles_patch.assert_called()", "    # not _once because the reaction_to_smiles function is also called when\n    # the Reaction object is instantiated\n\n\ndef test_reaction_to_smiles_no_reagents(mocker, sample_rxn_block):\n    \"\"\"Test that the reaction_to_smiles function gets called.\"\"\"\n    reaction_smiles_patch: MagicMock = mocker.patch(\"rdfreader.chem.reaction.reaction_smiles\", return_value=\"CC>>CC\")\n    # give a dummy smiles just so the validation check within\n    # Reaction.from_rxn_block() passes\n    reaction: Reaction = Reaction(sample_rxn_block)\n    reaction.smiles_no_reagents\n    reaction_smiles_patch.assert_called()", ""]}
{"filename": "test/test_rdf.py", "chunked_list": ["from unittest.mock import MagicMock\n\nimport pytest\nfrom pytest_mock import MockerFixture\n\nfrom rdfreader.chem.reaction import Reaction\nfrom rdfreader.exceptions import InvalidReactionError\nfrom rdfreader.rdf import RDFParser, parse_rdf_reg_num\n\n", "\n\n@pytest.fixture\ndef sample_rdf_file() -> str:\n    return \"test/resources/spresi-100.rdf\"\n\n\ndef test_parse_rdf_reg_num():\n    reg_num = parse_rdf_reg_num(\"$RFMT $RIREG 4620744\")\n    assert reg_num == \"4620744\"", "\n\ndef test_parse_rdf(sample_rdf_file: str):\n    with open(sample_rdf_file, \"r\") as f:\n        rdf_parser = RDFParser(f)\n        reactions = [reaction for reaction in rdf_parser]\n\n    assert len(reactions) == 100\n\n    # we can't test all 100 reactions in all this detail, so we'll just check the first two\n    expected_reaction_ids = [\"1274842\", \"808226\"]\n    expected_line_numbers = [3, 212]\n    expected_product_counts = [1, 1]\n    expected_reactant_counts = [3, 2]\n    expected_catalyst_counts = [1, 1]\n    expected_solvent_counts = [0, 0]\n    expected_other_reagent_counts = [0, 0]\n\n    for reaction, eid, lineno, product_count, reactant_count, catalyst_count, solvent_count, other_count in zip(\n        reactions,\n        expected_reaction_ids,\n        expected_line_numbers,\n        expected_product_counts,\n        expected_reactant_counts,\n        expected_catalyst_counts,\n        expected_solvent_counts,\n        expected_other_reagent_counts,\n    ):\n        assert reaction.id == eid\n        assert reaction.lineno == lineno\n        assert reaction.rdf_metadata == {\n            \"version\": \"1\",\n            \"date_stamp\": \"02/12/04 11:58\",\n        }\n        assert len(reaction.products) == product_count\n        assert len(reaction.reactants) == reactant_count\n        assert len(reaction.catalysts) == catalyst_count\n        assert len(reaction.solvents) == solvent_count\n        assert len(reaction.other_reagents) == other_count", "\n\n@pytest.fixture\ndef reaction_raise_exception(mocker: MockerFixture) -> MagicMock:\n    mocker.patch.object(Reaction, \"__init__\", side_effect=InvalidReactionError(\"Test exception\"))\n\n\ndef test_parse_rdf_catches(reaction_raise_exception: MagicMock, sample_rdf_file: str):\n    with open(sample_rdf_file, \"r\") as f:\n        rdf_parser = RDFParser(f, except_on_invalid_reaction=False)\n        reactions = [reaction for reaction in rdf_parser]\n\n    for reaction in reactions:\n        assert reaction is None", "\n\ndef test_parse_rdf_raises(reaction_raise_exception: MagicMock, sample_rdf_file: str):\n    with pytest.raises(InvalidReactionError):\n        with open(sample_rdf_file, \"r\") as f:\n            rdf_parser = RDFParser(f)\n            [reaction for reaction in rdf_parser]\n"]}
{"filename": "test/test_parse_utils.py", "chunked_list": ["import datetime\n\nimport pytest\n\nfrom rdfreader.parse.utils import (\n    CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING,\n    CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n    _default_line_item,\n    _parse_block_header_line,", "    _default_line_item,\n    _parse_block_header_line,\n    dict_elements_to_datetime,\n    get_line_item,\n    get_whole_line_item,\n    make_string_python_safe,\n    parse_format_string,\n    parse_yield,\n)\n", ")\n\n\ndef test_default_line_item_string():\n    assert _default_line_item(str) == \"\"\n\n\ndef test_default_line_item_string_non_default():\n    assert _default_line_item(str, \"default\") == \"default\"\n", "\n\ndef test_default_line_item_int():\n    assert _default_line_item(int) == 0\n\n\ndef test_default_line_item_int_non_default():\n    assert _default_line_item(int, 10) == 10\n\n\ndef test_default_line_item_float():\n    assert _default_line_item(float) == 0.0", "\n\ndef test_default_line_item_float():\n    assert _default_line_item(float) == 0.0\n\n\ndef test_default_line_item_floa_non_default():\n    assert _default_line_item(float, 0.1) == 0.1\n\n\ndef test_default_line_item_other():\n    \"\"\"Test that None is returned when not using string, int, or float.\"\"\"\n    assert _default_line_item(list, None) is None", "\n\ndef test_default_line_item_other():\n    \"\"\"Test that None is returned when not using string, int, or float.\"\"\"\n    assert _default_line_item(list, None) is None\n\n\ndef test_get_line_item_string():\n    assert get_line_item(\"line      \\n\", (0, 2)) == \"li\"\n", "\n\ndef test_get_line_item_empty_string():\n    assert get_line_item(\"\") == \"\"\n\n\ndef test_get_line_item_empty_string_default():\n    assert get_line_item(\"\", default=\"default\") == \"default\"\n\n\ndef test_get_line_item_int():\n    assert get_line_item(\"12      \\n\", (0, 2), int) == 12", "\n\ndef test_get_line_item_int():\n    assert get_line_item(\"12      \\n\", (0, 2), int) == 12\n\n\ndef test_get_line_item_empty_int():\n    assert get_line_item(\"\", cast_type=int) == 0\n\n\ndef test_get_line_item_empty_int_default():\n    assert get_line_item(\"\", cast_type=int, default=12) == 12", "\n\ndef test_get_line_item_empty_int_default():\n    assert get_line_item(\"\", cast_type=int, default=12) == 12\n\n\ndef test_get_line_item_float():\n    assert get_line_item(\"12      \\n\", (0, 2), float) == 12\n\n\ndef test_get_line_item_empty_float():\n    assert get_line_item(\"\", cast_type=float) == 0.0", "\n\ndef test_get_line_item_empty_float():\n    assert get_line_item(\"\", cast_type=float) == 0.0\n\n\ndef test_get_line_item_empty_float_default():\n    assert get_line_item(\"\", cast_type=float, default=12.0) == 12.0\n\n\ndef test_get_line_item_casting_exceptions_thrown():\n    with pytest.raises(ValueError):\n        get_line_item(\"12.0\", cast_type=int, catch_casting_exceptions=False)", "\n\ndef test_get_line_item_casting_exceptions_thrown():\n    with pytest.raises(ValueError):\n        get_line_item(\"12.0\", cast_type=int, catch_casting_exceptions=False)\n\n\ndef test_get_line_item_casting_exceptions_caught():\n    assert (\n        get_line_item(\n            \"12.0\",\n            cast_type=int,\n            catch_casting_exceptions=True,\n            default=\"default\",\n        )\n        == \"default\"\n    )", "\n\ndef test_parse_format_string():\n    format_string = \"IIIIIIPPPPPPPPPMMDDYYYYHHmmRRRRRRR\"\n\n    expected_result = {\n        \"I\": (0, 6),\n        \"P\": (6, 15),\n        \"M\": (15, 17),\n        \"D\": (17, 19),\n        \"Y\": (19, 23),\n        \"H\": (23, 25),\n        \"m\": (25, 27),\n        \"R\": (27, 34),\n    }\n\n    assert parse_format_string(format_string) == expected_result", "\n\ndef test_dict_elements_to_datetime():\n    \"\"\"Test that a dictionary of elements can be converted to a datetime\n    object.\"\"\"\n    elements = {\n        \"month\": 1,\n        \"day\": 2,\n        \"year\": 3,\n        \"hour\": 4,\n        \"minute\": 5,\n        \"test\": \"test\",\n    }\n\n    expected_result = {\n        \"test\": \"test\",  # ensure non-datetime elements are not modified\n        \"date_time\": datetime.datetime(\n            year=3,\n            month=1,\n            day=2,\n            hour=4,\n            minute=5,\n        ),\n    }\n\n    assert dict_elements_to_datetime(elements) == expected_result", "\n\ndef test_parse_block_header_line_with_molblock(sample_mol_block_lines, sample_molecule_metadata):\n    expected_result = sample_molecule_metadata\n    expected_result[\"registry_number\"] = \"RRRRRR\"\n    # This is the only thing that is different from the\n    # sample_molecule_metadata as the large regno is parsed seperately.\n    # comment and name are held elsewhere, delete them from the dict\n    del expected_result[\"comment\"]\n    del expected_result[\"molecule_name\"]\n    test_result = _parse_block_header_line(\n        sample_mol_block_lines[1],\n        CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING,\n        CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    )\n\n    assert test_result == expected_result", "\n\ndef test_parse_block_header_line_with_molblock_defaults():\n    expected_result = dict(\n        user_initials=\"\",\n        program_name=\"\",\n        date_time=None,\n        dimensional_codes=\"\",\n        scaling_factor_1=0,\n        scaling_factor_2=0.0,\n        energy=0.0,\n        registry_number=\"\",\n    )\n\n    test_result = _parse_block_header_line(\n        \"\",\n        CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING,\n        CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    )\n\n    assert test_result == expected_result", "\n\ndef test_parse_block_header_line_with_rxnblock(sample_rxn_block_lines, sample_rxn_block_metadata):\n    expected_result = sample_rxn_block_metadata\n    for absent_key in [\n        \"comment\",\n        \"reaction_name\",\n        \"reactant_count\",\n        \"product_count\",\n    ]:\n        del expected_result[absent_key]  # not present in this line\n\n    test_result = _parse_block_header_line(\n        sample_rxn_block_lines[2],\n        CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n        CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    )\n\n    assert test_result == expected_result", "\n\ndef test_parse_block_header_line_with_rxnblock_defaults():\n    expected_result = dict(\n        user_initials=\"\",\n        program_name=\"\",\n        date_time=None,\n        registry_number=\"\",\n    )\n\n    test_result = _parse_block_header_line(\n        \"\",\n        CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n        CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    )\n\n    assert test_result == expected_result", "\n\ndef test_get_whole_line_item():\n    \"\"\"Test that a line item can be retrieved from a line.\"\"\"\n    line = \"line      \\n\"\n    assert get_whole_line_item(line) == \"line\"\n\n\n@pytest.mark.parametrize(\n    \"test_string,expected_result\",", "@pytest.mark.parametrize(\n    \"test_string,expected_result\",\n    [\n        (\"\", None),\n        (\" \", None),\n        (\" \\n\\r1_:;'/test`string\\n __\", \"_1_test_string\"),\n    ],\n)\ndef test_make_string_python_safe(test_string, expected_result):\n    test_result = make_string_python_safe(test_string)\n    assert test_result == expected_result", "def test_make_string_python_safe(test_string, expected_result):\n    test_result = make_string_python_safe(test_string)\n    assert test_result == expected_result\n\n\ndef test_parse_yield():\n    test_strings = [\n        \"17.0-17.0\",\n        \"17\",\n        \"17-17\",\n        \"17.0 -- 17.0\",\n        \"17 - 17\",\n        \"17 -17\",\n        \"17- 17\",\n        \"17.0\",\n        \"17  17\",\n        \"17;17\",\n        \"17:17\",\n        \"17,17\",\n        \"16-18\",\n    ]\n\n    expected_result = 17.0\n\n    for test_string in test_strings:\n        assert parse_yield(test_string) == expected_result", "\n\ndef test_parse_yield_none():\n    \"\"\"Test that None is returned if the yield cannot be parsed.\"\"\"\n    test_strings = [\"some text\", \"-1\"]\n\n    for test_string in test_strings:\n        assert parse_yield(test_string) is None\n", ""]}
{"filename": "test/test_chem_utils.py", "chunked_list": ["import pytest\n\nfrom rdfreader.chem.mol import Molecule\nfrom rdfreader.chem.utils import mol_list_to_smiles, reaction_smiles\n\n\n@pytest.fixture\ndef molecule_list() -> list[Molecule]:\n    return [\n        Molecule.from_smiles(\"C\"),\n        Molecule.from_smiles(\"CO\"),\n        Molecule.from_smiles(\"OCO\"),\n    ]", "\n\n@pytest.fixture\ndef molecule_list_smiles() -> str:\n    return \"C.CO.OCO\"\n\n\ndef test_mol_list_to_smiles(molecule_list, molecule_list_smiles):\n    assert mol_list_to_smiles(molecule_list) == molecule_list_smiles\n", "\n\ndef test_reaction_to_smiles(molecule_list, molecule_list_smiles):\n    assert (\n        reaction_smiles(molecule_list, molecule_list, molecule_list)\n        == f\"{molecule_list_smiles}>{molecule_list_smiles}>{molecule_list_smiles}\"  # noqa: E501\n    )\n\n\ndef test_reaction_to_smiles_no_reagents(molecule_list, molecule_list_smiles):\n    assert reaction_smiles(molecule_list, molecule_list) == f\"{molecule_list_smiles}>>{molecule_list_smiles}\"", "\ndef test_reaction_to_smiles_no_reagents(molecule_list, molecule_list_smiles):\n    assert reaction_smiles(molecule_list, molecule_list) == f\"{molecule_list_smiles}>>{molecule_list_smiles}\"\n"]}
{"filename": "test/__init__.py", "chunked_list": [""]}
{"filename": "test/test_parse_rxn_block.py", "chunked_list": ["import pytest\nfrom rdkit.Chem import MolFromMolBlock\n\nfrom rdfreader.chem.mol import Molecule\nfrom rdfreader.parse.rxnblock import (\n    DatumParser,\n    get_rxn_block_metadata,\n    mol_blocks_from_rxn_block,\n    parse_dtype_string,\n    preprocess_datum_string,", "    parse_dtype_string,\n    preprocess_datum_string,\n    validate_rxn_block,\n)\n\n\ndef test_get_rxn_block_metadata(sample_rxn_block, sample_rxn_block_metadata):\n    \"\"\"Test that the get_rxn_block_metadata function correctly parses the\n    sample rxn block metadata.\"\"\"\n    assert sample_rxn_block_metadata == get_rxn_block_metadata(sample_rxn_block)", "\n\n@pytest.mark.parametrize(\n    \"sample_dtype_string, expected_dtype_string\",\n    [\n        (\"$DTYPE RXN:VARIATION:STEPNO:SOLVENT(1):MOL:SYMBOL\", \"rxn_variation_stepno_solvent_1_mol_symbol\"),\n        (\"$DTYPE RXN:VARIATION:PRODUCT:YIELD\", \"rxn_variation_product_yield\"),\n        (\"$DTYPE RXN:CLASSIFICATION(1):MEDIUM\", \"rxn_classification_1_medium\"),\n        (\"$DTYPE RXN:VARIATION:LITREF:JOURNAL_ISSN\", \"rxn_variation_litref_journal_issn\"),\n    ],", "        (\"$DTYPE RXN:VARIATION:LITREF:JOURNAL_ISSN\", \"rxn_variation_litref_journal_issn\"),\n    ],\n)\ndef test_parse_dtype_string(sample_dtype_string, expected_dtype_string):\n    assert expected_dtype_string == parse_dtype_string(sample_dtype_string)\n\n\ndef test_datum_parser_rxnblock(sample_rxn_block):\n    \"\"\"Test that the DatumParser parses the sample rxn block.\"\"\"\n    datum_parser = DatumParser(sample_rxn_block)\n\n    for parsed_dtype, datum in datum_parser:\n        # difficult to test this as there's such a range of datatypes and\n        # functions used in the parsing\n        # but we can at least test that what we get is the right types\n        assert isinstance(parsed_dtype, str)\n        assert isinstance(datum, (str, Molecule))", "\n\n@pytest.mark.parametrize(\n    \"expected_datum_string, sample_datum_string\",\n    [\n        (\"methanol\", \"$DATUM methanol\"),\n        (\"87.0-87.0\", \"$DATUM 87.0-87.0\"),\n        (\"384991457334703\", \"$DATUM 384991457334703\"),\n        (\"0040-4039\", \"$DATUM 0040-4039\"),\n        (\"a\\nmultiline\\nstring\", \"$DATUM a\\nmultiline\\nstring\"),", "        (\"0040-4039\", \"$DATUM 0040-4039\"),\n        (\"a\\nmultiline\\nstring\", \"$DATUM a\\nmultiline\\nstring\"),\n    ],\n)\ndef test_preprocess_datum_string(expected_datum_string, sample_datum_string):\n    result = preprocess_datum_string(sample_datum_string)\n    assert expected_datum_string == result\n\n\ndef test_validate_rxn_block(sample_rxn_block):\n    \"\"\"Test that the validate_rxn_block function correctly validates the sample\n    rxn block.\"\"\"\n    assert validate_rxn_block(sample_rxn_block)", "\ndef test_validate_rxn_block(sample_rxn_block):\n    \"\"\"Test that the validate_rxn_block function correctly validates the sample\n    rxn block.\"\"\"\n    assert validate_rxn_block(sample_rxn_block)\n\n\ndef test_validate_rxn_block_invalid():\n    \"\"\"Test that the validate_rxn_block function correctly validates the sample\n    rxn block.\"\"\"\n    assert not validate_rxn_block(\"invalid rxn block\")", "\n\ndef test_mol_blocks_from_rxn_block(sample_rxn_block):\n    \"\"\"Test that the mol_blocks_from_rxn_block function correctly parses the\n    sample rxn block.\"\"\"\n    reactant_count: int = 3\n    product_count: int = 1\n\n    reactants, products = mol_blocks_from_rxn_block(sample_rxn_block, reactant_count, product_count)\n\n    # verify that the correct number of mol_blocks are returned\n    assert len(products) == product_count\n    assert len(reactants) == reactant_count\n\n    # verify that the mol_blocks can be parsed\n    for molecules in [reactants, products]:\n        for mol_block in molecules:\n            rd_mol = MolFromMolBlock(mol_block)\n            assert rd_mol is not None", ""]}
{"filename": "test/conftest.py", "chunked_list": ["import datetime\nfrom pathlib import Path\nfrom typing import Any\n\nimport pytest\nfrom pytest_mock import MockerFixture\nfrom pytest_mock import mocker as mocker_fixture  # noqa: F401\n\nfrom rdfreader.chem.mol import Molecule\n", "from rdfreader.chem.mol import Molecule\n\n\n@pytest.fixture\ndef mocker(mocker_fixture) -> MockerFixture:  # noqa: F811\n    \"\"\"Wraps pytest_mock.mocker fixture to allow for easier importing.\"\"\"\n    return mocker_fixture\n\n\ndef get_sample_mol_block() -> str:\n    \"\"\"Load the sample mol block as a string from the test resources.\"\"\"\n    sample_mol_block_path = \"test/resources/sample_mol_block.txt\"\n    with open(sample_mol_block_path, \"r\") as f:\n        sample_mol_block = f.read()\n    return sample_mol_block", "\ndef get_sample_mol_block() -> str:\n    \"\"\"Load the sample mol block as a string from the test resources.\"\"\"\n    sample_mol_block_path = \"test/resources/sample_mol_block.txt\"\n    with open(sample_mol_block_path, \"r\") as f:\n        sample_mol_block = f.read()\n    return sample_mol_block\n\n\ndef get_rdf_path() -> Path:\n    \"\"\"Load the sample rdf as a string from the test resources.\"\"\"\n    rdf_path = Path(\"test/resources/sample_rdf.rdf\")\n    return rdf_path", "\ndef get_rdf_path() -> Path:\n    \"\"\"Load the sample rdf as a string from the test resources.\"\"\"\n    rdf_path = Path(\"test/resources/sample_rdf.rdf\")\n    return rdf_path\n\n\n@pytest.fixture\ndef rdf_path() -> Path:\n    return get_rdf_path()", "def rdf_path() -> Path:\n    return get_rdf_path()\n\n\n@pytest.fixture\ndef first_sample_rxn() -> str:\n    \"\"\"Return the first rxn block from the sample rdf.\"\"\"\n    with open(\"test/resources/sample_rdf_first_rxn.rxn\", \"r\") as f:\n        first_sample_rxn = f.read()\n    return first_sample_rxn", "\n\ndef get_sample_rdf_string() -> str:\n    \"\"\"Load the sample rdf as a string from the test resources.\"\"\"\n    sample_rdf_string_path = get_rdf_path()\n    with open(sample_rdf_string_path, \"r\") as f:\n        sample_rdf_string = f.read()\n    return sample_rdf_string\n\n\ndef get_sample_rxn_block() -> str:\n    \"\"\"Load the sample rxn block as a string from the test resources.\"\"\"\n    sample_rxn_block_path = \"test/resources/sample_rxn_block.txt\"\n    with open(sample_rxn_block_path, \"r\") as f:\n        sample_rxn_block = f.read()\n    return sample_rxn_block", "\n\ndef get_sample_rxn_block() -> str:\n    \"\"\"Load the sample rxn block as a string from the test resources.\"\"\"\n    sample_rxn_block_path = \"test/resources/sample_rxn_block.txt\"\n    with open(sample_rxn_block_path, \"r\") as f:\n        sample_rxn_block = f.read()\n    return sample_rxn_block\n\n", "\n\n@pytest.fixture\ndef sample_mol_block() -> str:\n    return get_sample_mol_block()\n\n\n@pytest.fixture\ndef sample_mol_block_lines() -> str:\n    \"\"\"Return the sample mol block split into a list of lines.\"\"\"\n    return get_sample_mol_block().split(\"\\n\")", "def sample_mol_block_lines() -> str:\n    \"\"\"Return the sample mol block split into a list of lines.\"\"\"\n    return get_sample_mol_block().split(\"\\n\")\n\n\n@pytest.fixture\ndef sample_rxn_block() -> str:\n    return get_sample_rxn_block()\n\n", "\n\n@pytest.fixture\ndef sample_rxn_block_lines() -> str:\n    \"\"\"Return the sample rxn block split into a list of lines.\"\"\"\n    return get_sample_rxn_block().split(\"\\n\")\n\n\n@pytest.fixture\ndef sample_molecule() -> Molecule:\n    \"\"\"Create a test molecule.\"\"\"\n    mol = Molecule()\n    mol.mol_block = get_sample_mol_block()\n    return mol", "@pytest.fixture\ndef sample_molecule() -> Molecule:\n    \"\"\"Create a test molecule.\"\"\"\n    mol = Molecule()\n    mol.mol_block = get_sample_mol_block()\n    return mol\n\n\n@pytest.fixture\ndef sample_molecule_metadata() -> dict[str, Any]:\n    \"\"\"Return the sample mol block metadata.\"\"\"\n    return dict(\n        molecule_name=\"sample name\",\n        user_initials=\"II\",\n        program_name=\"PPPPPPPP\",\n        date_time=datetime.datetime(22, 5, 24, 14, 23),\n        dimensional_codes=\"dd\",\n        scaling_factor_1=12,\n        scaling_factor_2=1.12345678,\n        energy=1.2345678912,\n        registry_number=\"overflowing reg number\",\n        comment=\"sample comment\",\n    )", "@pytest.fixture\ndef sample_molecule_metadata() -> dict[str, Any]:\n    \"\"\"Return the sample mol block metadata.\"\"\"\n    return dict(\n        molecule_name=\"sample name\",\n        user_initials=\"II\",\n        program_name=\"PPPPPPPP\",\n        date_time=datetime.datetime(22, 5, 24, 14, 23),\n        dimensional_codes=\"dd\",\n        scaling_factor_1=12,\n        scaling_factor_2=1.12345678,\n        energy=1.2345678912,\n        registry_number=\"overflowing reg number\",\n        comment=\"sample comment\",\n    )", "\n\n@pytest.fixture\ndef sample_rxn_block_metadata() -> str:\n    \"\"\"Return sample rxn block metadata.\"\"\"\n    return dict(\n        reaction_name=\"sample reaction name\",\n        user_initials=\"IIIIII\",\n        program_name=\"PPPPPPPPP\",\n        date_time=datetime.datetime(2022, 5, 24, 14, 55),\n        registry_number=\"RRRRRRR\",\n        comment=\"sample reaction comment\",\n        product_count=1,\n        reactant_count=3,\n    )", ""]}
{"filename": "rdfreader/write.py", "chunked_list": ["from datetime import datetime\nfrom io import TextIOWrapper\n\n\ndef write_rdf(\n    f: TextIOWrapper,\n    rxn_blocks: list[str],\n    rxn_ids: list[str] = None,\n):\n    \"\"\"Write a RDF file from a list of reaction blocks.\n\n    Parameters\n    ----------\n    f : TextIOWrapper\n        The file to write to.\n    rxn_blocks : list[str]\n        The reaction blocks to write.\n    rxn_ids : list[str], optional\n        The reaction IDs to use. Defaults to None. If None, sequential 5 digit\n        numbers are used.\n    \"\"\"\n    # current date and time as DD/MM/YY HH:MM\n    datm = datetime.now().strftime(\"%d/%m/%y %H:%M\")\n\n    rdf_header = f\"$RDFILE 1\\n$DATM {datm}\\n\"\n    rxn_header = \"$RFMT $RIREG {}\\n\"\n\n    if rxn_ids is None:\n        # generate sequential 5 digit numbers\n        rxn_ids = [f\"{i:05d}\" for i in range(1, len(rxn_blocks) + 1)]\n\n    f.write(rdf_header)\n\n    for rxn_id, rxn_block in zip(rxn_ids, rxn_blocks):\n        f.write(rxn_header.format(rxn_id))\n        f.write(rxn_block)", ""]}
{"filename": "rdfreader/rdf.py", "chunked_list": ["# typing\nfrom io import TextIOWrapper\nfrom pathlib import Path\n\nfrom rdfreader.chem.reaction import Reaction\nfrom rdfreader.parse.utils import CTF_RXNBLOCK_HEADER_FORMAT_STRING\n\n\ndef parse_rdf_reg_num(line: str):\n    return line.replace(\"$RFMT $RIREG \", \"\").strip()", "def parse_rdf_reg_num(line: str):\n    return line.replace(\"$RFMT $RIREG \", \"\").strip()\n\n\nclass RDFParser:\n    _header_retrieved: bool = False\n    lineno: int = 1\n    rdf_metadata: dict[str, str] = {}\n\n    def __init__(\n        self,\n        f: TextIOWrapper,\n        header_format_string: str = CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n        except_on_invalid_molecule: bool = True,\n        except_on_invalid_reaction: bool = True,\n        parse_conditions: bool = True,\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        f : TextIOWrapper\n            The file to parse.\n        header_format_string : str, optional\n            The format string to use to parse the header of each rxn block.\n        except_on_invalid_molecule : bool, optional\n            If True, raise an exception if a molecule is invalid.\n        except_on_invalid_reaction : bool, optional\n            If True, raise an exception if a reaction is invalid.\n        rdf_file_name : str, optional\n            The name of the rdf file.\n        parse_conditions : bool, optional\n            Whether to parse the conditions of the reaction.\n        \"\"\"\n\n        self.f = f\n        self.header_format_string = header_format_string\n        self.except_on_invalid_molecule = except_on_invalid_molecule\n        self.except_on_invalid_reaction = except_on_invalid_reaction\n        self.rdf_file_name = Path(f.name).name\n        self.parse_conditions = parse_conditions\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        return self.next_reaction()\n\n    def next_reaction(self):\n        \"\"\"Returns the next rxn block from a rdf file.\n\n        Parameters\n        ----------\n        f : TextIOWrapper\n            The file to parse.\n\n        Returns\n        -------\n        tuple[str, str, int]\n            The rxn block, the rxn id, and the line number of the start of the\n            rxn block.\n        \"\"\"\n\n        # get the next rxn block\n        reaction = None\n        rxn_block, rxn_id, start_lineno = self._next_rxn_block()\n        try:\n            reaction = Reaction(\n                rxn_block=rxn_block,\n                id=rxn_id,\n                rdf_metadata=self.rdf_metadata,\n                header_format_string=self.header_format_string,\n                except_on_invalid_molecule=self.except_on_invalid_molecule,\n                lineno=start_lineno,\n                rdf_file=self.rdf_file_name,\n            )\n\n        except Exception as e:\n            if self.except_on_invalid_reaction:\n                raise e\n\n        return reaction\n\n    def _header(self):\n        \"\"\"Parse the header of a RDF file.\n\n        Parameters\n        ----------\n        f : TextIOWrapper\n            The file to parse.\n\n        Returns\n        -------\n        dict[str, str]\n            The version and date of the RDF file. These are just treated as\n            strings as they are typically ignored and the structure of the\n            datetime field is not defined in the specification.\n        \"\"\"\n        if not self._header_retrieved:\n            self._header_retrieved = True\n            version = self._readline()[8:].strip()\n            date_stamp = self._readline()[6:].strip()\n            self.rdf_metadata = {\"version\": version, \"date_stamp\": date_stamp}\n\n    def _next_rxn_block(self) -> tuple[str, str, int]:\n        \"\"\"Returns the next rxn block from a rdf file. If the end.\n\n        Returns\n        -------\n        tuple[str, str, int]\n            The rxn block, the rxn id, and the line number of the start of the\n            rxn block.\n        \"\"\"\n\n        self._header()\n        start_lineno: int = self.lineno\n        line: str = self._readline()\n        if line == \"\":\n            raise StopIteration\n        # parse the rxn block deliminators\n        if line.startswith(\"$RFMT\"):\n            # capture the reg number\n            reg_no: str = parse_rdf_reg_num(line)\n            line: str = self._readline()\n        else:\n            #  there is a problem with the file format, raise an exception\n            raise Exception(f\"Invalid RDF file format. Expected $RFMT, got {line} \" f\"at line {self.lineno}\")\n\n        # capture the rxn block\n        rxn_block: str = \"\"\n        f_last_pos = self.f.tell()  # ensure f_last_pos is defined\n        while not line.startswith(\"$RFMT\") and not line == \"\":\n            f_last_pos = self.f.tell()\n            rxn_block += line\n            line: str = self._readline()\n\n        # send the file pointer back one line so it is at the start of the\n        # next rxn block\n        self.f.seek(f_last_pos)\n        self.lineno -= 1\n\n        return rxn_block, reg_no, start_lineno\n\n    def _readline(self):\n        \"\"\"Wraps f.read and increments the line number.\"\"\"\n        self.lineno += 1\n        return self.f.readline()", ""]}
{"filename": "rdfreader/__init__.py", "chunked_list": ["from rdfreader.rdf import RDFParser  # noqa F401\n"]}
{"filename": "rdfreader/exceptions.py", "chunked_list": ["class InvalidMoleculeError(Exception):\n    \"\"\"Raised when the mol block string is not a valid mol block string.\"\"\"\n\n\nclass InvalidReactionError(Exception):\n    \"\"\"Raised when the reaction block string is not a valid reaction block\n    string.\"\"\"\n"]}
{"filename": "rdfreader/chem/mol.py", "chunked_list": ["from typing import Any\n\nfrom rdkit.Chem import Mol, MolFromMolBlock, MolFromSmiles, MolToMolBlock, MolToSmiles\n\nfrom rdfreader.exceptions import InvalidMoleculeError\nfrom rdfreader.parse.molblock import get_mol_block_metadata\n\n\nclass Molecule:\n    def __init__(\n        self,\n        mol_block: str = None,\n        properties: dict[str, Any] = dict(),\n        except_on_invalid_molecule: bool = True,\n        component_type: str = None,\n    ):\n        \"\"\"Create a molecule object.\n\n        If a mol_block is provided, the molecule will be initialized with that,\n        otherwise the molecule will be initialized empty.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        properties : dict[str, Any]\n            A dictionary of properties.\n        \"\"\"\n\n        self.except_on_invalid_molecule: bool = except_on_invalid_molecule\n        self.properties: dict[str, Any] = properties\n        self.mol_block: str = mol_block  # calls mol_block setter\n        self.component_type: str = component_type\n\n    @property\n    def mol_block(self) -> str:\n        \"\"\"Returns the mol block string of the molecule.\n\n        Returns\n        -------\n        str\n            The mol block string of the molecule.\n        \"\"\"\n        return self._mol_block\n\n    @mol_block.setter\n    def mol_block(self, mol_block: str):\n        \"\"\"Set the mol block string of the molecule.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        \"\"\"\n        if not mol_block:\n            self._mol_block = None\n        else:\n            self._from_mol_block(mol_block)\n\n    @property\n    def rd_mol(self) -> Mol:\n        \"\"\"Return the RDKit molecule object.\"\"\"\n        return MolFromMolBlock(\n            self.mol_block,\n        )\n\n    @property\n    def smiles(self) -> str:\n        \"\"\"Returns the SMILES string of the molecule using RDKit.\n\n        Returns:\n            str: SMILES string of the molecule.\n        \"\"\"\n        try:\n            return MolToSmiles(self.rd_mol)\n        except Exception:\n            return None\n\n    @property\n    def metadata(self) -> dict[str, Any]:\n        \"\"\"Returns the metadata of the molecule from the mol block string.\n\n        Returns:\n            dict[str, Any]: The metadata of the molecule.\n        \"\"\"\n        return get_mol_block_metadata(self.mol_block)\n\n    def _from_mol_block(self, mol_block: str, properties: dict[str, Any] = dict()) -> None:\n        \"\"\"Initialize the molecule object with a mol block string.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        \"\"\"\n        self.properties.update(properties)\n        self._mol_block = mol_block\n\n        if self.except_on_invalid_molecule:\n            try:\n                assert self.rd_mol is not None\n            except AssertionError:\n                raise InvalidMoleculeError(\"mol_block is not a valid mol block string.\")\n\n    @classmethod\n    def from_mol_block(cls, mol_block: str, properties: dict[str, Any] = {}) -> \"Molecule\":\n        \"\"\"Create a Molecule object from a mol block string.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n\n        Returns\n        -------\n        Molecule\n            A Molecule object.\n        \"\"\"\n\n        mol = cls()\n        mol._from_mol_block(mol_block, properties)\n        return mol\n\n    def __eq__(self, __o: object) -> bool:\n        \"\"\"Returns True if the molecules are equal.\n\n        Returns\n        -------\n        bool\n            True if the molecules are equal.\n        \"\"\"\n        if not isinstance(__o, Molecule):\n            return False\n        return self.mol_block == __o.mol_block\n\n    def __str__(self) -> str:\n        \"\"\"Returns the smiles string of the molecule.\n\n        Returns\n        -------\n        str\n            The smiles string of the molecule.\n        \"\"\"\n        return self.smiles\n\n    def __repr__(self) -> str:\n        return f\"Molecule(smiles={self.smiles})\"\n\n    @classmethod\n    def from_smiles(cls, smiles: str) -> \"Molecule\":\n        \"\"\"Create a Molecule object from a smiles string.\n\n        Parameters\n        ----------\n        smiles : str\n            A smiles string.\n\n        Returns\n        -------\n        Molecule\n            A Molecule object.\n        \"\"\"\n        mol_block = MolToMolBlock(MolFromSmiles(smiles))\n        mol = cls()\n        mol._from_mol_block(mol_block)\n        return mol", "class Molecule:\n    def __init__(\n        self,\n        mol_block: str = None,\n        properties: dict[str, Any] = dict(),\n        except_on_invalid_molecule: bool = True,\n        component_type: str = None,\n    ):\n        \"\"\"Create a molecule object.\n\n        If a mol_block is provided, the molecule will be initialized with that,\n        otherwise the molecule will be initialized empty.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        properties : dict[str, Any]\n            A dictionary of properties.\n        \"\"\"\n\n        self.except_on_invalid_molecule: bool = except_on_invalid_molecule\n        self.properties: dict[str, Any] = properties\n        self.mol_block: str = mol_block  # calls mol_block setter\n        self.component_type: str = component_type\n\n    @property\n    def mol_block(self) -> str:\n        \"\"\"Returns the mol block string of the molecule.\n\n        Returns\n        -------\n        str\n            The mol block string of the molecule.\n        \"\"\"\n        return self._mol_block\n\n    @mol_block.setter\n    def mol_block(self, mol_block: str):\n        \"\"\"Set the mol block string of the molecule.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        \"\"\"\n        if not mol_block:\n            self._mol_block = None\n        else:\n            self._from_mol_block(mol_block)\n\n    @property\n    def rd_mol(self) -> Mol:\n        \"\"\"Return the RDKit molecule object.\"\"\"\n        return MolFromMolBlock(\n            self.mol_block,\n        )\n\n    @property\n    def smiles(self) -> str:\n        \"\"\"Returns the SMILES string of the molecule using RDKit.\n\n        Returns:\n            str: SMILES string of the molecule.\n        \"\"\"\n        try:\n            return MolToSmiles(self.rd_mol)\n        except Exception:\n            return None\n\n    @property\n    def metadata(self) -> dict[str, Any]:\n        \"\"\"Returns the metadata of the molecule from the mol block string.\n\n        Returns:\n            dict[str, Any]: The metadata of the molecule.\n        \"\"\"\n        return get_mol_block_metadata(self.mol_block)\n\n    def _from_mol_block(self, mol_block: str, properties: dict[str, Any] = dict()) -> None:\n        \"\"\"Initialize the molecule object with a mol block string.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n        \"\"\"\n        self.properties.update(properties)\n        self._mol_block = mol_block\n\n        if self.except_on_invalid_molecule:\n            try:\n                assert self.rd_mol is not None\n            except AssertionError:\n                raise InvalidMoleculeError(\"mol_block is not a valid mol block string.\")\n\n    @classmethod\n    def from_mol_block(cls, mol_block: str, properties: dict[str, Any] = {}) -> \"Molecule\":\n        \"\"\"Create a Molecule object from a mol block string.\n\n        Parameters\n        ----------\n        mol_block : str\n            A mol block string.\n\n        Returns\n        -------\n        Molecule\n            A Molecule object.\n        \"\"\"\n\n        mol = cls()\n        mol._from_mol_block(mol_block, properties)\n        return mol\n\n    def __eq__(self, __o: object) -> bool:\n        \"\"\"Returns True if the molecules are equal.\n\n        Returns\n        -------\n        bool\n            True if the molecules are equal.\n        \"\"\"\n        if not isinstance(__o, Molecule):\n            return False\n        return self.mol_block == __o.mol_block\n\n    def __str__(self) -> str:\n        \"\"\"Returns the smiles string of the molecule.\n\n        Returns\n        -------\n        str\n            The smiles string of the molecule.\n        \"\"\"\n        return self.smiles\n\n    def __repr__(self) -> str:\n        return f\"Molecule(smiles={self.smiles})\"\n\n    @classmethod\n    def from_smiles(cls, smiles: str) -> \"Molecule\":\n        \"\"\"Create a Molecule object from a smiles string.\n\n        Parameters\n        ----------\n        smiles : str\n            A smiles string.\n\n        Returns\n        -------\n        Molecule\n            A Molecule object.\n        \"\"\"\n        mol_block = MolToMolBlock(MolFromSmiles(smiles))\n        mol = cls()\n        mol._from_mol_block(mol_block)\n        return mol", "\n\nclass Reactant(Molecule):\n    def __init__(*args, **kwargs):\n        super().__init__(**args, **kwargs, component_type=\"reactant\")\n\n\nclass Product(Molecule):\n    def __init__(*args, **kwargs):\n        super().__init__(**args, **kwargs, component_type=\"product\")", "\n\nclass Solvent(Molecule):\n    def __init__(*args, **kwargs):\n        super().__init__(**args, **kwargs, component_type=\"solvent\")\n\n\nclass Catalyst(Molecule):\n    def __init__(*args, **kwargs):\n        super().__init__(**args, **kwargs, component_type=\"catalyst\")", ""]}
{"filename": "rdfreader/chem/reaction.py", "chunked_list": ["import logging\nfrom typing import Any, Optional\n\nfrom rdkit.Chem.rdChemReactions import ChemicalReaction, ReactionFromSmarts\n\nfrom rdfreader.chem.mol import Molecule\nfrom rdfreader.chem.utils import reaction_smiles\nfrom rdfreader.exceptions import InvalidReactionError\nfrom rdfreader.parse.rxnblock import DatumParser, get_rxn_block_metadata, mol_blocks_from_rxn_block, validate_rxn_block\nfrom rdfreader.parse.utils import CTF_RXNBLOCK_HEADER_FORMAT_STRING", "from rdfreader.parse.rxnblock import DatumParser, get_rxn_block_metadata, mol_blocks_from_rxn_block, validate_rxn_block\nfrom rdfreader.parse.utils import CTF_RXNBLOCK_HEADER_FORMAT_STRING\n\nlogger = logging.getLogger(__name__)\n\n\nclass Reaction:\n    def __init__(\n        self,\n        rxn_block: str = None,\n        id: str = None,\n        rdf_metadata: Optional[dict[str, Any]] = None,  # metadata from the rdf file the block was contained in,\n        except_on_invalid_molecule: bool = True,\n        header_format_string: str = CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n        lineno: Optional[int] = None,\n        rdf_file: Optional[str] = None,\n    ):\n        \"\"\"Create a reaction object.\n\n        If a reaction block is provided, the reaction will be\n        initialized with that, otherwise the reaction will be\n        initialized empty.\n        \"\"\"\n\n        self.rxn_block = rxn_block\n        self.rdf_metadata = rdf_metadata\n        self.id = id\n        self.lineno = lineno\n        self.rdf_file = rdf_file\n\n        self.products: list[Molecule] = list()\n        self.reactants: list[Molecule] = list()\n        self.catalysts: list[Molecule] = list()\n        self.solvents: list[Molecule] = list()\n        self.other_reagents: list[Molecule] = list()\n\n        self.properties: dict[str, str] = dict()\n        self.metadata: dict[str, Any] = dict()\n\n        if self.rxn_block is not None:\n            self._from_rxn_block(\n                header_format_string=header_format_string,\n                except_on_invalid_molecule=except_on_invalid_molecule,\n            )\n\n    def __str__(self) -> str:\n        return f\"Reaction({self.id}, {self.smiles})\"\n\n    def _from_rxn_block(\n        self,\n        header_format_string: str = CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n        except_on_invalid_molecule: bool = True,\n    ) -> None:\n        \"\"\"Initialize the reaction object from a reaction block.\n\n        Parameters\n        ----------\n        rdf_path : Path\n            A path to a rdf file.\n        \"\"\"\n\n        if not validate_rxn_block(self.rxn_block):\n            raise ValueError(\"Reaction block is invalid.\")\n\n        # get the headers from the rxn block.\n        self.metadata.update(get_rxn_block_metadata(self.rxn_block, header_format_string=header_format_string))\n\n        # get the reactants and product mol_blocks, create a molecule object\n        # for each, and add it to the reaction.\n        reactant_mol_blocks, product_mol_blocks = mol_blocks_from_rxn_block(\n            self.rxn_block,\n            self.metadata[\"reactant_count\"],\n            self.metadata[\"product_count\"],\n        )\n        for mol_block in reactant_mol_blocks:\n            self.reactants.append(\n                Molecule(\n                    mol_block,\n                    except_on_invalid_molecule=except_on_invalid_molecule,\n                )\n            )\n\n        for mol_block in product_mol_blocks:\n            self.products.append(\n                Molecule(\n                    mol_block,\n                    except_on_invalid_molecule=except_on_invalid_molecule,\n                )\n            )\n\n        # use functions in rdfreader/parse/rdf.py to pull out dtype/datum\n        # pairs from the rxn block\n        datum_parser = DatumParser(\n            self.rxn_block,\n        )\n\n        for dtype, datum in datum_parser:\n            if not isinstance(datum, Molecule):\n                self.properties[dtype] = datum\n            else:\n                # add to the appropriate molecule list\n                getattr(self, f\"{datum.component_type}s\").append(datum)\n\n        if self.rd_rxn is None:\n            raise ValueError(\"Invalid reaction: couldn't parse in rdkit.\")\n\n    @property\n    def smiles(self) -> str:\n        return reaction_smiles(\n            self.reactants,\n            self.products,\n            self.reagents,\n        )\n\n    @property\n    def smiles_no_reagents(self) -> str:\n        return reaction_smiles(\n            self.reactants,\n            self.products,\n        )\n\n    @property\n    def rd_rxn(self) -> ChemicalReaction:\n        try:\n            return ReactionFromSmarts(self.smiles, useSmiles=True)\n        except ValueError as e:\n            raise InvalidReactionError(f\"Invalid reaction: {e}\") from e\n\n    @property\n    def reagents(self) -> list[Molecule]:\n        \"\"\"Return a single list of all reagents.\n\n        Returns\n        -------\n        list[Molecule]\n            A list of all reagents.\n        \"\"\"\n        return self.catalysts + self.solvents + self.other_reagents", ""]}
{"filename": "rdfreader/chem/__init__.py", "chunked_list": [""]}
{"filename": "rdfreader/chem/utils.py", "chunked_list": ["from rdfreader.chem.mol import Molecule\n\n\ndef mol_list_to_smiles(mol_list: list[Molecule]) -> str:\n    \"\"\"Convert a list of molecules to a SMILES string.\n\n    Parameters\n    ----------\n    mol_list : list[Molecule]\n        The list of molecules to convert to a SMILES string.\n\n    Returns\n    -------\n    str\n        The SMILES string.\n    \"\"\"\n\n    return \".\".join([mol.smiles for mol in mol_list if mol.smiles is not None])", "\n\ndef reaction_smiles(\n    reactants: list[Molecule],\n    products: list[Molecule],\n    reagents: list[Molecule] = [],\n) -> str:\n    \"\"\"Create a reaction smiles string from lists of product, reactant, and\n    reagent molecules.\"\"\"\n\n    product_smiles = mol_list_to_smiles(products)\n    reactant_smiles = mol_list_to_smiles(reactants)\n    reagent_smiles = mol_list_to_smiles(reagents)\n\n    return \">\".join([reactant_smiles, reagent_smiles, product_smiles])", ""]}
{"filename": "rdfreader/parse/utils.py", "chunked_list": ["import datetime\nimport logging\nimport re\nfrom typing import Any, Callable, Optional\n\nlogger = logging.getLogger(__name__)\n\n# http://c4.cabrillo.edu/404/ctfile.pdf\nCTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING: str = \"IIPPPPPPPPMMDDYYHHmmddSSssssssssssEEEEEEEEEEEERRRRRR\"\nCTF_RXNBLOCK_HEADER_FORMAT_STRING: str = \"IIIIIIPPPPPPPPPMMDDYYYYHHmmRRRRRRR\"", "CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING: str = \"IIPPPPPPPPMMDDYYHHmmddSSssssssssssEEEEEEEEEEEERRRRRR\"\nCTF_RXNBLOCK_HEADER_FORMAT_STRING: str = \"IIIIIIPPPPPPPPPMMDDYYYYHHmmRRRRRRR\"\nSPRESI_RXNBLOCK_HEADER_FORMAT_STRING: str = \"IIIIIIPPPPPPPPPPMMDDYYHHmmRRRRRRR\"\nCTF_COMPONENT_COUNT_FORMAT_STRING: str = \"rrrppp\"\n# default mapping of letter to field. This is used to map the letter in the\n# mol block header to the field in the metadata.\n# key: letter, value: tuple containing the field name, the field type and a\n# default value (if the field is empty). Field typle should be a castable data\n# type.\n# If the field is empty, the default value will be used.", "# type.\n# If the field is empty, the default value will be used.\nCTF_DEFAULT_LETTER_TO_FIELD_MAPPING: dict[str, tuple[str, Callable, Any]] = {\n    \"I\": (\"user_initials\", str, \"\"),\n    \"P\": (\"program_name\", str, \"\"),\n    \"M\": (\"month\", int, 0),\n    \"D\": (\"day\", int, 0),\n    \"Y\": (\"year\", int, 0),\n    \"H\": (\"hour\", int, 0),\n    \"m\": (\"minute\", int, 0),", "    \"H\": (\"hour\", int, 0),\n    \"m\": (\"minute\", int, 0),\n    \"d\": (\"dimensional_codes\", str, \"\"),\n    \"S\": (\"scaling_factor_1\", int, 0),\n    \"s\": (\"scaling_factor_2\", float, 0.0),\n    \"E\": (\"energy\", float, 0.0),\n    \"R\": (\"registry_number\", str, \"\"),\n    \"r\": (\"reactant_count\", int, 0),\n    \"p\": (\"product_count\", int, 0),\n}", "    \"p\": (\"product_count\", int, 0),\n}\n\n\ndef _default_line_item(cast_type: Callable = str, default: Any = None) -> Any:\n    \"\"\"Return a default value for a line item.\"\"\"\n    if default is not None:\n        return default\n\n    if cast_type in (int, float):\n        return cast_type(0)\n    if cast_type == str:\n        return \"\"\n    else:\n        return default", "\n\ndef get_line_item(\n    line: str,\n    character_index: Optional[tuple[Optional[int], Optional[int]]] = None,\n    cast_type: Callable = str,\n    default: Any = None,\n    catch_casting_exceptions: bool = False,\n) -> Any:\n    \"\"\"Process a line from an rdf/mol file or block.\n\n    If character_index is provided, then the characters within that slice will\n    be returned.\n    If cast_type is provided, then the characters will be cast to that type.\n    If the line is empty a default will be provided. For numeric types (as set\n    by cast_type), the default will be 0, for strings it will be an empty\n    string. For other types, the default will be None. This can be overridden\n    by providing a default.\n    If catch_casting_exceptions is True, then any casting exceptions will be\n    caught and the default will be returned.\n\n    Strips whitespace and newlines.\n\n    Parameters\n    ----------\n    line : str\n        A line.\n    character_index : tuple[int, int]\n        A tuple of the start and end character index.\n\n    Returns\n    -------\n    str\n        The line item.\n    \"\"\"\n\n    line = line[slice(*character_index)] if character_index else line\n    line = line.strip(\"\\n\")  # remove newline\n    line = line.strip()  # remove whitespace\n\n    if not line:\n        # return a default value if the line is empty\n        return _default_line_item(cast_type, default)\n\n    if cast_type:\n        try:\n            # attempt to cast the line to the specified type\n            line = cast_type(line)\n        except ValueError:\n            if catch_casting_exceptions:\n                # return a default value if the line cannot be cast\n                return _default_line_item(cast_type, default)\n            else:\n                raise\n\n    return line", "\n\ndef get_whole_line_item(line: str) -> str:\n    \"\"\"Return a data item that is from a whole line. Item must be a string.\n\n    Parameters\n    ----------\n    line : str\n        A line.\n\n    Returns\n    -------\n    str\n        The data item.\n    \"\"\"\n    return get_line_item(line, (0, len(line)), str, \"\")", "\n\ndef parse_format_string(format_string) -> dict[str, tuple]:\n    \"\"\"Parses a CTF format string (http://c4.cabrillo.edu/404/ctfile.pdf) and\n    returns a dictionary where the key is the letter in the format string and\n    the value is a tuple of the start and end character index.\n\n    Parameters\n    ----------\n    format_string : str\n        A CTF format string.\n\n    Returns\n    -------\n    dict[str, tuple]\n        A dictionary of the letter in the format string and the start and end\n        character index as a tuple.\n    \"\"\"\n    format_string_dict = {}\n\n    last_letter = format_string[0]\n    current_letter_start_index = 0  # the index where the current letter started\n    for ii, letter in enumerate(format_string):\n        if letter != last_letter:\n            # if the letter has changed add the previous letter to the\n            # dictionary\n            format_string_dict[last_letter] = (current_letter_start_index, ii)\n            current_letter_start_index = ii\n\n        last_letter = letter\n\n    # add the last letter to the dictionary\n    format_string_dict[last_letter] = (current_letter_start_index, ii + 1)\n\n    return format_string_dict", "\n\ndef dict_elements_to_datetime(\n    dd: dict[str, Any],\n    date_time_key: str = \"date_time\",\n    delete_initial_keys: bool = True,\n    catch_datetime_exceptions: bool = True,\n) -> dict[str, Any]:\n    \"\"\"Search a dictionary for datetime elements and adds a a new key to the\n    dictionary with a datetime object.\n\n    Searches for datetime keys called: \"hour\", \"minute\", \"second\", \"day\",\n    \"month\", \"year\" and adds a new key called <date_time_key> with a datetime\n    object.\n\n    If delete_initial_keys is set, the original keys will be deleted.\n\n    If the datetime is not parseable, None will be added to the dictionary.\n\n    Parameters\n    ----------\n    dd : dict[str, Any]\n        A dictionary.\n    date_time_key : str\n        The key to add to the dictionary.\n    delete_initial_keys : bool\n        If True, the keys \"hour\", \"minute\", \"second\", \"day\", \"month\", \"year\"\n        will be deleted from the dictionary.\n    catch_datetime_exceptions\n        If True, parsing exceptions from datetime.datetime will be caught and\n        None will be added to the dictionary.\n\n    Returns\n    -------\n    dict[str, Any]\n        A dictionary with the new key added.\n    \"\"\"\n\n    date_time_args = {k: dd[k] for k in [\"hour\", \"minute\", \"second\", \"day\", \"month\", \"year\"] if k in dd}\n\n    if not date_time_args:\n        # if no datetime keys are found, return the dictionary as is\n        return dd\n\n    try:\n        dd[date_time_key] = datetime.datetime(**date_time_args)\n    except (ValueError, TypeError):\n        if catch_datetime_exceptions:\n            logger.warning(f\"Could not parse datetime from {dd}\")\n            dd[date_time_key] = None\n        else:\n            raise\n\n    if delete_initial_keys:\n        [dd.pop(key, None) for key in [\"hour\", \"minute\", \"second\", \"day\", \"month\", \"year\"]]\n\n    return dd", "\n\ndef _parse_block_header_line(\n    header_line: str,\n    header_format_string: str,\n    header_field_mapping: dict[str, tuple[str, Callable, Any]],\n) -> dict[str, Any]:\n    \"\"\"Parse the header line of a rxn or mol block.\n\n    Parameters\n    ----------\n    header_line : list[str]\n        A single line from the header.\n    header_format_string : str\n        See get_mol_block_metadata for more information.\n    header_field_mapping : dict[str, tuple(str, Callable, Any)]\n        See get_mol_block_metadata for more information.\n\n\n    Returns\n    -------\n    dict\n        A dictionary of metadata.\n    \"\"\"\n\n    format_string_dict = parse_format_string(header_format_string)\n\n    metadata = {}\n    for letter, character_index in format_string_dict.items():\n        if letter in header_field_mapping:\n            field_name = header_field_mapping[letter][0]\n            data_type = header_field_mapping[letter][1]\n            try:\n                default_value = header_field_mapping[letter][2]\n            except IndexError:\n                default_value = None\n            metadata[field_name] = get_line_item(header_line, character_index, data_type, default_value)\n        else:\n            raise ValueError(f\"The letter {letter} does not appear in the format field mapping.\")  # noqa: E501\n\n    metadata = dict_elements_to_datetime(metadata)\n\n    return metadata", "\n\ndef make_string_python_safe(string: str) -> str:\n    \"\"\"Remove/replace characters that are not allowed in python\n    variable/function names.\n\n    Parameters\n    ----------\n    string : str\n        A string.\n\n    Returns\n    -------\n    str\n        The python safe string.\n    \"\"\"\n\n    if string is None:\n        return None\n\n    string = string.strip()\n    string = string.strip(\"\\n\")\n    string = string.strip(\"\\r\")\n\n    if string == \"\":\n        return None\n\n    # remove existing underscores\n    # string = string.replace(\"_\", \"\")\n\n    # add a leading underscore if string starts with a number\n    if string[0].isdigit():\n        string = f\"_{string}\"\n\n    # replace all non-alphanumeric characters with an underscore\n    string = re.sub(r\"[^a-zA-Z0-9_]\", \"_\", string)\n\n    # replace multiple underscores with a single underscore\n    string = re.sub(r\"_{2,}\", \"_\", string)\n\n    # lower case the string\n    string = string.lower()\n\n    # remove trailing underscores\n    string = string.rstrip(\"_\")\n\n    return string", "\n\ndef parse_yield(yield_string: str) -> float:\n    \"\"\"Attempts to parse the yield string into a float.\n\n    If muliple numbers are detected, will return the average.\n\n    If no numbers are detected, will return None.\n\n    Parameters\n    ----------\n    yield_string : str\n\n    Returns\n    -------\n    float\n        Yield as a float.\n    \"\"\"\n    re_patterns = [\n        r\"^([0-9]+\\.?[0-9]?)$\",  # matches a single int or float\n        r\"^([0-9]+\\.?[0-9]?)\\s{0,}[-,;:]{0,}\\s{0,}([0-9]+\\.?[0-9]?)$\",  # matches two ints or floats separated by a dash, comma, semicolon, colon or space  # noqa: E501\n    ]\n\n    for re_pattern in re_patterns:\n        match = re.search(re_pattern, yield_string)\n        if match:\n            # get the match groups as a list\n            # (first match group is the whole string)\n            match_groups = match.groups()\n            # convert the match groups to floats\n            match_groups = [float(group) for group in match_groups]\n            # average the match groups\n            return sum(match_groups) / len(match_groups)\n\n    # if we get here, then we didn't find a match\n    logger.warning(f\"Could not parse yield from '{yield_string}'. Returning None.\")\n\n    return None", ""]}
{"filename": "rdfreader/parse/molblock.py", "chunked_list": ["import logging\nfrom typing import Any, Callable\n\nfrom rdfreader.parse.utils import (\n    CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING,\n    _parse_block_header_line,\n    get_line_item,\n    get_whole_line_item,\n)", "    get_whole_line_item,\n)\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_mol_block_metadata(\n    mol_block: str,\n    header_format_string: str = CTF_DEFAULT_MOLBLOCK_HEADER_FORMAT_STRING,\n    header_field_mapping: dict[str, tuple[str, Callable, Any]] = CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n) -> dict[str, Any]:\n    \"\"\"Extract metadata from a mol block string.\n\n    Parameters\n    ----------\n    mol_block : str\n        A mol block string.\n    header_format_string : str\n        The format string for the line 2 of the mol_block header. Default\n        value is according to the mol_block spec at\n        http://c4.cabrillo.edu/404/ctfile.pdf. The letters must appear in the\n        spec, but the order can be changed.\n    header_field_mapping : dict[str, tuple(str, Callable, Any)]\n        A dictionary which maps a letter in the header format string to a\n        field name. The field name is the key and the letter is the value. The\n        default mapping is according to the mol_block spec at\n        http://c4.cabrillo.edu/404/ctfile.pdf.\n        key: letter, value: tuple containing the field name, the field type\n        and a default value (if the field is empty). Field typle should be a\n        castable data type.\n        If the field is empty, the default value will be used.\n\n    Returns\n    -------\n    dict\n        A dictionary of metadata.\n    \"\"\"\n\n    metadata = {}\n    mol_block_lines = mol_block.split(\"\\n\")\n    metadata[\"molecule_name\"] = get_whole_line_item(mol_block_lines[0])\n    metadata.update(_parse_block_header_line(mol_block_lines[1], header_format_string, header_field_mapping))\n    metadata[\"comment\"] = get_whole_line_item(mol_block_lines[2])\n    large_regno: str = _parse_large_regno(mol_block_lines)\n    if large_regno is not None:\n        # overwrite the registry number from the header with the large\n        # registry number if it is present\n        metadata[\"registry_number\"] = large_regno\n\n    return metadata", "\n\ndef _parse_large_regno(mol_block_lines: list[str]) -> str:\n    \"\"\"Searches the molblock a line beginning with M REG and returns the value\n    of it if present.\n\n    Parameters\n    ----------\n    mol_block_lines : list[str]\n        A molblock string that has been split into a list of lines.\n\n    Returns\n    -------\n    Optional[str]\n        The registry number. If None is returned, the registry number is not\n        present.\n    \"\"\"\n\n    for line in mol_block_lines:\n        if line.startswith(\"M  REG \"):\n            return get_line_item(line, [7, len(line)])\n\n    return None", ""]}
{"filename": "rdfreader/parse/rxnblock.py", "chunked_list": ["from __future__ import annotations\n\nimport logging\nimport re\nfrom typing import Any, Callable, Iterator\n\nfrom rdfreader.chem.mol import Molecule\nfrom rdfreader.parse.utils import (\n    CTF_COMPONENT_COUNT_FORMAT_STRING,\n    CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,", "    CTF_COMPONENT_COUNT_FORMAT_STRING,\n    CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n    _parse_block_header_line,\n    get_whole_line_item,\n    make_string_python_safe,\n)\n\nlogger = logging.getLogger(__name__)\n", "logger = logging.getLogger(__name__)\n\n\ndef get_rxn_block_metadata(\n    rxn_block: str,\n    header_format_string: str = CTF_RXNBLOCK_HEADER_FORMAT_STRING,\n    header_field_mapping: dict[str, tuple[str, Callable, Any]] = CTF_DEFAULT_LETTER_TO_FIELD_MAPPING,\n    reactant_product_count_format_string: str = CTF_COMPONENT_COUNT_FORMAT_STRING,  # noqa F401\n) -> dict[str, Any]:\n    \"\"\"Get the metadata from a reaction block.\n\n    Parameters\n    ----------\n    rxn_block : str\n        A reaction block string.\n\n    Returns\n    -------\n    dict\n        A dictionary of metadata.\n    \"\"\"\n\n    metadata = {}\n    rxn_block_lines: list[str] = rxn_block.split(\"\\n\")\n    metadata[\"reaction_name\"] = get_whole_line_item(rxn_block_lines[1])\n    metadata.update(_parse_block_header_line(rxn_block_lines[2], header_format_string, header_field_mapping))\n    metadata[\"comment\"] = get_whole_line_item(rxn_block_lines[3])\n    metadata.update(\n        _parse_block_header_line(\n            rxn_block_lines[4],\n            reactant_product_count_format_string,\n            header_field_mapping,\n        )\n    )\n\n    return metadata", "\n\nclass DatumParser:\n    \"\"\"Process dtype/datum pairs.\n\n    The class processes the dtype string into a callable method name and then\n    calls that method with the datum string to process the data.\n\n    To use: instantiate the class and then call the class as a function with\n    the dtype and datum strings.\n\n    Example:\n    >>> dp = DatumParser()\n    >>> dp(\"$DATUM\", \"RXNVARIATION:STEPNO:SOLVENT:MOLSYMBOL\")\n    \"\"\"\n\n    def __init__(self, rxn_block: str, except_on_invalid_molecule: bool = True):\n        self.rxn_block = rxn_block\n        self.except_on_invalid_molecule = except_on_invalid_molecule\n\n    def __iter__(self) -> Iterator[tuple[Any, int, str]]:\n        \"\"\"Iterate over the lines in the reaction block, identifying\n        dtype/datum pairs and returning them as a tuple.\"\"\"\n\n        dtype_string_identifier = \"$DTYPE \"\n\n        lines = self.rxn_block.split(\"\\n\")\n\n        for line_idx, line in enumerate(lines):\n            if line.startswith(dtype_string_identifier):\n                dtype_string = line\n                datum_string = \"\"\n                # capture all the following lines until we find a line that\n                # starts with $DTYPE again\n                for datum_line in lines[line_idx + 1 :]:\n                    if datum_line.startswith(dtype_string_identifier):\n                        break\n\n                    if datum_line.endswith(\"+\"):\n                        # if the line ends with a plus sign, it is a\n                        # continuation of the previous line\n                        datum_string += datum_line[:-1]\n                    else:\n                        datum_string += datum_line + \"\\n\"\n\n                yield self.parse_datum(dtype_string, datum_string)\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"Wraps parse_datum method.\"\"\"\n        return self.parse_datum(*args, **kwargs)\n\n    def parse_datum(self, dtype: str, datum: str) -> tuple[str, str | Molecule]:\n        \"\"\"Process the $DATUM datum.\n\n        Parameters\n        ----------\n        dtype : str\n            The $DTYPE string from the reaction block.\n        datum : str\n            The corresponding datum string from the reaction block.\n\n        Returns\n        -------\n        tuple[Any, str]\n            A tuple of the processed datum and the parsed\n            dtype string.\n        \"\"\"\n\n        parsed_dtype = parse_dtype_string(dtype)\n        datum = preprocess_datum_string(datum)\n\n        # if the datum_string is a molblock:\n        if detect_molblock_from_datum(datum):\n            datum = preprocess_datum_molblock(datum)\n            # try and infer the type from the dtype string, etc.)\n            reagent_type = \"other_reagent\"\n            for _reagent_type in [\"catalyst\", \"solvent\"]:\n                if _reagent_type in parsed_dtype or _reagent_type.upper() in parsed_dtype:\n                    reagent_type = _reagent_type\n\n            datum = Molecule(\n                mol_block=datum, component_type=reagent_type, except_on_invalid_molecule=self.except_on_invalid_molecule\n            )\n        else:\n            datum = datum.strip()\n\n        return parsed_dtype, datum", "\n\ndef detect_molblock_from_datum(datum: str) -> bool:\n    \"\"\"Tries to detect whether a datum string is a molblock.\"\"\"\n\n    if datum.startswith(\"$MFMT\"):\n        return True\n    return False\n\n\ndef preprocess_datum_molblock(datum: str) -> str:\n    \"\"\"Strips the datum down to just the molblock.\"\"\"\n\n    return \"\\n\".join(datum.splitlines()[1:])  # remove the $MFMT line", "\n\ndef preprocess_datum_molblock(datum: str) -> str:\n    \"\"\"Strips the datum down to just the molblock.\"\"\"\n\n    return \"\\n\".join(datum.splitlines()[1:])  # remove the $MFMT line\n\n\ndef preprocess_datum_string(datum: str) -> str:\n    \"\"\"Preprocess the datum string.\n\n    Parameters\n    ----------\n    datum_str : str\n        The datum string.\n\n    Returns\n    -------\n    str\n        The preprocessed datum string.\n    \"\"\"\n    re_pattern = r\"^\\$DATUM\\s?\"\n    datum = re.sub(re_pattern, \"\", datum)\n    return datum", "def preprocess_datum_string(datum: str) -> str:\n    \"\"\"Preprocess the datum string.\n\n    Parameters\n    ----------\n    datum_str : str\n        The datum string.\n\n    Returns\n    -------\n    str\n        The preprocessed datum string.\n    \"\"\"\n    re_pattern = r\"^\\$DATUM\\s?\"\n    datum = re.sub(re_pattern, \"\", datum)\n    return datum", "\n\ndef parse_dtype_string(dtype_string: str) -> str:\n    \"\"\"Parse a $dtype line from a reaction block.\n\n    Returns the contents of the dtype line, with the prefix \"$DTYPE \" removed.\n\n    Parameters\n    ----------\n    dtype_string : str\n        A string containing a $dtype line.\n\n    Returns\n    -------\n    str\n        The contents of the $dtype line.\n    \"\"\"\n\n    dtype_string = dtype_string.strip()  # Remove leading and trailing whitespace.\n    dtype_string = dtype_string.replace(\"$DTYPE \", \"\")  # Remove the $dtype tag.\n    dtype_string = make_string_python_safe(dtype_string)\n    return dtype_string", "\n\ndef validate_rxn_block(rxn_block: str) -> bool:\n    \"\"\"Validates a rxn block.\n\n    Parameters\n    ----------\n    rxn_block : str\n        The rxn block.\n\n    Returns\n    -------\n    bool\n        True if the rxn block is valid.\n    \"\"\"\n\n    if rxn_block.startswith(\"$RXN\"):\n        return True\n    else:\n        return False", "\n\ndef mol_blocks_from_rxn_block(rxn_block: str, reactant_count: int, product_count: int) -> tuple[list[str], list[str]]:\n    \"\"\"Get the mol blocks corresponding to reactants and products from the rxn\n    block.\n\n    Params\n    ------\n    rxn_block : str\n        A reaction block string.\n    reactant_count : int\n        The number of reactants in the reaction.\n    product_count : int\n        The number of products in the reaction.\n\n    Returns\n    -------\n    reactants : list[str]\n        The mol blocks corresponding to reactants.\n    products : list[str]\n        The mol blocks corresponding to products.\n    \"\"\"\n    reactants: list[str] = []\n    products: list[str] = []\n\n    start_string = \"$MOL\\n\"\n    end_string = \"M  END\\n\"\n\n    # mol_blocks start with \"$MOL\" and end with \"M  END\"\n    # so we can just split on these and get the reactants and products.\n    # reactants are first, then products.\n    mol_blocks: list[str] = rxn_block.split(start_string)\n\n    # remove the first element as it is not a molblock\n    mol_blocks.pop(0)\n\n    if len(mol_blocks) > reactant_count + product_count:\n        raise ValueError(\n            \"The number of mol blocks in the rxn block is greater than the number of reactants and products.\"  # noqa: E501\n        )\n\n    # if any element does not end with \"M END\", then remove all lines \"M END\".\n    # This is important to capture the end of the last molblock correctly and\n    # not include reaction data\n    for ii, mol_block in enumerate(mol_blocks):\n        if not mol_block.endswith(end_string):\n            mol_blocks[ii] = mol_block.split(end_string)[0] + end_string  # add the end string back on\n\n    # now we have the molblocks, we can split them into reactants and products\n    reactants = mol_blocks[:reactant_count]\n    products = mol_blocks[reactant_count:]\n\n    return reactants, products", ""]}
{"filename": "docs/conf.py", "chunked_list": ["# Configuration file for the Sphinx documentation builder.\n#\n# For the full list of built-in configuration values, see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Project information -----------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\n\nproject = \"rdfreader\"\ncopyright = \"2023, Adam Hardy\"", "project = \"rdfreader\"\ncopyright = \"2023, Adam Hardy\"\nauthor = \"Adam Hardy\"\nrelease = \"0.5.1\"\n\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\n\nextensions = []\n", "extensions = []\n\ntemplates_path = [\"_templates\"]\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n\n\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n\nhtml_theme = \"alabaster\"", "\nhtml_theme = \"alabaster\"\nhtml_static_path = [\"_static\"]\n\nextensions = [\"sphinx.ext.autodoc\"]\n"]}
