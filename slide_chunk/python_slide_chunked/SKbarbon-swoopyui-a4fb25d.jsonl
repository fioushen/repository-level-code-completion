{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\nwith open(\"README.md\", encoding=\"utf-8\") as f:\n    long_des = str(f.read())\n\nsetup(\n    name='swoopyui',\n    version='2.0',\n    author='SKbarbon',\n    description='A python library that allow you to build swiftUI apps using python.',", "    author='SKbarbon',\n    description='A python library that allow you to build swiftUI apps using python.',\n    long_description=long_des,\n    long_description_content_type='text/markdown',\n    url='https://github.com/SKbarbon/swoopyui',\n    install_requires=[\"flask\", \"requests\"],\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: MacOS :: MacOS X\"", "        \"Programming Language :: Python :: 3\",\n        \"Operating System :: MacOS :: MacOS X\"\n    ],\n    include_dirs=[\"assets\"],\n    package_data={\"assets\": [\"swoopyui.zip\"]},\n    include_package_data=True\n)\n"]}
{"filename": "__init__.py", "chunked_list": [""]}
{"filename": "swoopyui/protocol.py", "chunked_list": ["from .views.subview import SubView\n\n\n\nclass onAddNewSubViewRequest:\n    def __init__(self, subview:SubView) -> None:\n        if subview.parent_view == None: return\n\n        to_id = \"\"\n        if subview.parent_view == subview.main_view:\n            to_id = \"main\"\n        else:\n            to_id = str(subview.parent_view.id)\n\n        self.raw = {\n            \"action\" : \"add_subview\",\n            \"to_id\" : to_id,\n            \"subview_data\" : subview.vdata\n        }", "\n\nclass onUpdateSubviewProps:\n    def __init__(self, subview:SubView) -> None:\n        self.raw = {\n            \"action\" : \"update_subview\",\n            \"subview_data\" : subview.vdata\n        }\n    ", "    "]}
{"filename": "swoopyui/swoopyui.py", "chunked_list": ["from .tools.swoopyui_host import swoopyui_host_setup\nfrom .tools.check_platform import is_device_a_ios, is_device_a_mac\nfrom .tools.run_target import run_the_target\nfrom .tools.run_swiftUI_ios import prepare_swiftUI_for_ios\nfrom .tools.run_swiftUI import run_swiftUI_app\nfrom .tools.get_free_port import get_free_port\nfrom .view import View\nfrom flask import Flask, request\nimport logging, threading, tempfile, time\n", "import logging, threading, tempfile, time\n\n\n\nclass app:\n    def __init__(self, target, base_name=\"__main__\", debug:bool=False, for_preview=False) -> None:\n        self.target_function = target\n        self.base_name = base_name\n        self.debug = debug\n        self.for_preview = for_preview\n\n        self.host_port = get_free_port()\n        self.next_get_updates_responses = []\n\n        self.client_view = View(host_port=self.host_port, host_app_class=self)\n\n        # start the host\n        print(\"Host started..\")\n        self.host()\n\n    def host (self):\n        self.flask_app = Flask(self.base_name)\n        flask_app = self.flask_app\n\n        # Set the logging level to ignore warnings\n        if self.debug == False and self.for_preview == False:\n            log = logging.getLogger('werkzeug')\n            log.setLevel(logging.ERROR)\n        \n        @flask_app.route(\"/start_target_function\")\n        def start_target_function ():\n            print(\"A swiftUI client connected..\")\n            threading.Thread(target=run_the_target, args=[self.target_function, [self.client_view]]).start()\n            return '{\"ok\":true}'\n        \n        @flask_app.route(\"/get_updates\")\n        def get_updates():\n            updts = list(self.next_get_updates_responses)\n            self.next_get_updates_responses.clear()\n            return {\n                \"updts\" : updts\n            }\n        \n        @flask_app.route(\"/push_update\", methods=['POST'])\n        def push_update():\n            self.client_view.process_client_events(request.json)\n            return \"\"\n\n\n        if is_device_a_ios() and self.for_preview == False:\n            prepare_swiftUI_for_ios(port=self.host_port)\n        \n        elif is_device_a_mac() and self.for_preview == False:\n            tmp_dir = tempfile.mkdtemp()\n            threading.Thread(target=run_swiftUI_app, args=[self.host_port, tmp_dir], daemon=True).start()\n\n        if self.for_preview:\n            print(\"Your preview host ready, this is the host data:\\n\\n\")\n            threading.Thread(target=self.no_logging_after_3_sec).start()\n            flask_app.run(host=\"0.0.0.0\", port=self.host_port)\n        else:\n            flask_app.run(host=\"localhost\", port=self.host_port)\n    \n    def no_logging_after_3_sec (self):\n        time.sleep(3)\n        log = logging.getLogger('werkzeug')\n        log.setLevel(logging.ERROR)"]}
{"filename": "swoopyui/view.py", "chunked_list": ["from .views.subview import SubView\nfrom .protocol import onAddNewSubViewRequest, onUpdateSubviewProps\n\n\nclass View (object):\n    def __init__(self, host_port, host_app_class) -> None:\n        self.__host_app_class = host_app_class\n        self.host_port = host_port\n\n        self.platform = None #? The platform that running swiftUI.\n        self.theme_mode = None #? The theme mode of the app, like light mode or dark mode.\n\n        self.__subviews_history = [] #? All the subviews that have been added directly or not directly on currently connected swiftUI app.\n        self.__last_id = 0\n        self.__last_update_id = 0\n        \n        self.subviews = []\n    \n    def add (self, subview:SubView):\n        \"\"\"Add a new subview to the main view.\"\"\"\n        subview.respown(\n            new_id=self.get_new_subview_id(),\n            update_id=self.get_new_subview_update_id(),\n            parent_view=self,\n            main_view=self\n        )\n        self.subviews.append(subview)\n        self.__subviews_history.append(subview)\n        \n        self.__add_to_next_update_requests(onAddNewSubViewRequest(subview=subview).raw)\n        subview.update()\n    \n    def remove (self, subview:SubView):\n        \"\"\"Remove a subview from the swiftUI app.\"\"\"\n    \n    def get_subview_by_id (self, subview_id:int):\n        \"\"\"This function will search for the subviewID in the subviews history.\n        \n        If there is no result it will return `None`.\n        \"\"\"\n        for sbv in self.__subviews_history:\n            if sbv.id == subview_id:\n                return sbv\n        return None\n    \n\n    def get_new_subview_id (self):\n        self.__last_id = self.__last_id + 1\n        return self.__last_id\n    \n    def get_new_subview_update_id (self):\n        self.__last_update_id = self.__last_update_id + 1\n        return self.__last_update_id\n\n    \n    def update (self, subview:SubView=None):\n        if subview == None:\n            pass\n        else:\n            subview.update_id = self.get_new_subview_update_id()\n            subview.vdata['update_id'] = subview.update_id\n            self.__add_to_next_update_requests(update_dict=onUpdateSubviewProps(subview=subview).raw)\n    \n\n    def add_to_subviews_history (self, subv:SubView):\n        self.__subviews_history.append(subv)\n    \n    \n    def process_client_events (self, event_dict:dict):\n        if event_dict['action'] == \"view_event\":\n            subview_id = int(event_dict['view_id'])\n            subview_class = None\n            for sbv in self.__subviews_history:\n                sbv : SubView = sbv\n                if int(sbv.id) == int(subview_id):\n                    subview_class = sbv\n                    break\n            subview_class.on_event(event_dict['event_content'])\n        \n        elif event_dict['action'] == \"startup_app_info\":\n            self.platform = event_dict['content']['platform']\n\n\n    def __add_to_next_update_requests(self, update_dict):\n        \"\"\"Add an update request to the client.\"\"\"\n        # print(update_dict)\n        self.__host_app_class.next_get_updates_responses.append(update_dict)\n    \n\n    @property\n    def next_updates (self):\n        return self.__next_updates"]}
{"filename": "swoopyui/__init__.py", "chunked_list": ["from .tools.check_platform import is_device_a_ios, is_device_a_mac\nif is_device_a_mac() or is_device_a_ios():\n    pass\nelse:\n    raise Exception (\"Your device is not a mac. So cannot use this library.\")\n\nfrom .swoopyui import app\n\nfrom .view import View\n", "from .view import View\n\nfrom .views.text import Text\nfrom .views.vstack import VStack\nfrom .views.hstack import HStack\nfrom .views.navigationsplitview import NavigationSplitView\nfrom .views.button import Button\nfrom .views.navigationlink import NavigationLink\nfrom .views.textfield import TextField\nfrom .views.scrollview import ScrollView, ScrollModeHorizontal, ScrollModeVertical", "from .views.textfield import TextField\nfrom .views.scrollview import ScrollView, ScrollModeHorizontal, ScrollModeVertical\nfrom .views.colorview import ColorView\nfrom .views.spacer import Spacer\nfrom .views.list import List\nfrom .views.sheet import Sheet\nfrom .views.elevatedbutton import ElevatedButton\nfrom .views.textbutton import TextButton\nfrom .views.label import Label\nfrom .views.icon import Icon", "from .views.label import Label\nfrom .views.icon import Icon\nfrom .views.contextmenu import ContextMenu\nfrom .views.labeledbutton import LabeledButton\nfrom .views.menu import Menu\nfrom .views.scrollingtabview import ScrollingTabView\n# from .views.navigationstack import NavigationStack\n# from .views.image import Image\n# from .views.webview import WebView\n# from .views.animatedview import AnimatedView", "# from .views.webview import WebView\n# from .views.animatedview import AnimatedView\n\n# shapes views\nfrom .views.shapes.roundedrectangleshape import RoundedRectangleShape\n"]}
{"filename": "swoopyui/tools/check_if_mac.py", "chunked_list": ["import sys\n\n\n\ndef is_device_a_mac ():\n    if \"darwin\" in str(sys.platform):\n        return True\n    else:\n        return False"]}
{"filename": "swoopyui/tools/check_platform.py", "chunked_list": ["import sys\n\n\n\ndef is_device_a_mac ():\n    if \"darwin\" in str(sys.platform):\n        return True\n    else:\n        return False\n", "\n\ndef is_device_a_ios ():\n    if \"ios\" in str(sys.platform):\n        return True\n    else:\n        return False"]}
{"filename": "swoopyui/tools/swoopyui_host.py", "chunked_list": ["from flask import request, Flask\n\n\n\ndef swoopyui_host_setup (flask_app:Flask, target_function, client_view):\n    @flask_app.route(\"/start_target_function\")\n    def start_target_function ():\n        target_function(client_view)\n        return '{\"ok\":true}'\n    \n    @flask_app.route(\"/get_updates\")\n    def get_updates():\n        updts = list(client_view.next_updates)\n        client_view.next_updates.clear()\n        print(updts)\n        return {\n            \"updts\" : updts\n        }\n    \n    @flask_app.route(\"/push_update\")\n    def push_update():\n        return \"\""]}
{"filename": "swoopyui/tools/run_swiftUI.py", "chunked_list": ["import subprocess\nimport os\nimport shutil\nimport requests\nfrom .unzip_assets import unzip_file\nfrom .pyinstaller_check import is_run_on_pyinstaller\n\ndef run_swiftUI_app(port, tmp_dir):\n    # get the current temporary folder.\n    temp_dir = tmp_dir\n\n    # Prepare paths\n    zip_path = str(__file__).replace(\"tools/run_swiftUI.py\", \"assets/swoopyui.zip\")\n    new_app_path = os.path.join(temp_dir, \"swoopyui.app/\")\n\n    if is_run_on_pyinstaller():\n        # install the zip file from github\n        url = \"https://raw.githubusercontent.com/SKbarbon/swoopyui/main/swoopyui/assets/swoopyui.zip\"\n        path_of_installed_zip = os.path.join(temp_dir, \"app_zip_file\")\n        with open(path_of_installed_zip, \"wb\") as f:\n            f.write(requests.get(url).content)\n        zip_path = path_of_installed_zip\n\n    # unzip the app on the temporary folder\n    unzip_file(zip_path=zip_path, destination_path=temp_dir)\n\n    # prepare the commands\n    executable_of_the_app = os.path.join(new_app_path, \"Contents/MacOS/swoopyui\")\n    chmod_command = [\"chmod\", \"+x\", executable_of_the_app]\n\n    # run the `chmod` command\n    subprocess.run(chmod_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n    # run the command the will start the swiftUI app\n    run_command = [executable_of_the_app, str(port)]\n    subprocess.run(run_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n    # Remove the temporary dir.\n    if os.path.isdir (temp_dir):\n        shutil.rmtree(temp_dir)"]}
{"filename": "swoopyui/tools/run_target.py", "chunked_list": ["import traceback\n\n\n\n\n\ndef run_the_target (target_function, function_args):\n    try:\n        target_function(*function_args)\n    except Exception as e:\n        traceback.print_exc()\n        raise Exception(e)"]}
{"filename": "swoopyui/tools/get_free_port.py", "chunked_list": ["import socketserver\n\n\ndef get_free_port () -> int:\n    with socketserver.TCPServer((\"localhost\", 0), None) as s:\n        free_port = s.server_address[1]\n    \n    return free_port"]}
{"filename": "swoopyui/tools/run_swiftUI_ios.py", "chunked_list": ["import os, tempfile\n\n\n\ndef prepare_swiftUI_for_ios (port):\n    documents_dir_path = os.path.expanduser('~/Documents')\n    \n    if not os.path.isdir(os.path.join(documents_dir_path, \"swoopyui_temp\")):\n        os.mkdir(os.path.join(documents_dir_path, \"swoopyui_temp\"))\n    \n    swoopyui_connect_file_path = os.path.join(documents_dir_path, \"swoopyui_temp\", \"swoopyui_connect.txt\")\n    open(swoopyui_connect_file_path, \"w+\", encoding=\"utf-8\").write(f\"{port}\")"]}
{"filename": "swoopyui/tools/unzip_assets.py", "chunked_list": ["import zipfile\n\n\ndef unzip_file(zip_path, destination_path):\n    try:\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(destination_path)\n    except FileNotFoundError:\n        print(\"The specified file does not exist.\")\n    except zipfile.BadZipFile:\n        print(\"The specified file is not a valid ZIP archive.\")"]}
{"filename": "swoopyui/tools/on_action.py", "chunked_list": ["from .check_platform import is_device_a_ios\nimport threading\n\n\n\ndef on_view_action (function, args):\n    if function == None: return\n    threading.Thread(target=function, args=[*args]).start()"]}
{"filename": "swoopyui/tools/__init__.py", "chunked_list": [""]}
{"filename": "swoopyui/tools/pyinstaller_check.py", "chunked_list": ["\n\n\n\ndef is_run_on_pyinstaller ():\n    import sys\n\n    if getattr(sys, 'frozen', False):\n        # Running from a PyInstaller executable\n        return True\n    else:\n        # Running the script directly\n        return False"]}
{"filename": "swoopyui/views/hstack.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass HStack (SubViewParent):\n    \"\"\"Align the subviews in a parent stack horizontaly.\"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"HStack\"\n        })"]}
{"filename": "swoopyui/views/textfield.py", "chunked_list": ["from .subview import SubView\nfrom ..tools.on_action import on_view_action\n\n\n\nclass TextField (SubView):\n    def __init__(self, placeholder:str=\"\", content:str=\"\", resizeable:bool=False, width:int=100, height:int=40, color:str=\"primery\", on_change=None) -> None:\n        super().__init__()\n\n        self.placeholder = placeholder\n        self.content : str = content\n        self.resizeable : bool = resizeable\n        self.width : int = width\n        self.height : int = height\n        self.color : int = color\n        self.on_change = on_change\n\n        self.vdata.update({\n            \"name\" : \"TextField\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"placeholder\" : self.placeholder,\n                \"resizeable\" : self.resizeable,\n                \"width\" : width,\n                \"height\" : height,\n                \"color\" : self.color\n            }\n        })\n    \n    \n    def on_event (self, event_content:dict):\n        if event_content['name'] == \"on_change\":\n            self.content = str(event_content['content'])\n            on_view_action(self.on_change, [self])\n\n    def update (self):\n        self.vdata.update({\n            \"name\" : \"TextField\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"placeholder\" : self.placeholder,\n                \"resizeable\" : self.resizeable,\n                \"width\" : self.width,\n                \"height\" : self.height,\n                \"color\" : self.color\n            }\n        })\n        super().update()"]}
{"filename": "swoopyui/views/scrollview.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nScrollModeVertical = \"vertical\"\nScrollModeHorizontal = \"horizontal\"\n\n\nclass ScrollView (SubViewParent):\n    \"\"\"\"\"\"\n    def __init__(self, scrollMode:ScrollModeVertical=\"vertical\") -> None:\n        super().__init__()\n\n        self.scrollMode = scrollMode\n\n        self.vdata.update({\n            \"name\" : \"ScrollView\"\n        })\n\n        self.vdata['props'].update({\n            \"scrollMode\" : self.scrollMode\n        })\n    \n\n    def update(self):\n        self.vdata['props'].update({\n            \"scrollMode\" : self.scrollMode\n        })\n        return super().update()", "class ScrollView (SubViewParent):\n    \"\"\"\"\"\"\n    def __init__(self, scrollMode:ScrollModeVertical=\"vertical\") -> None:\n        super().__init__()\n\n        self.scrollMode = scrollMode\n\n        self.vdata.update({\n            \"name\" : \"ScrollView\"\n        })\n\n        self.vdata['props'].update({\n            \"scrollMode\" : self.scrollMode\n        })\n    \n\n    def update(self):\n        self.vdata['props'].update({\n            \"scrollMode\" : self.scrollMode\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/spacer.py", "chunked_list": ["from .subview import SubView\n\n\n\n\nclass Spacer (SubView):\n    def __init__(self) -> None:\n        super().__init__()\n\n\n        self.vdata.update({\n            \"name\" : \"Spacer\"\n        })"]}
{"filename": "swoopyui/views/button.py", "chunked_list": ["from .subviewparent import SubViewParent\nfrom ..tools.on_action import on_view_action\n\n\nclass Button (SubViewParent):\n    def __init__(self, width:float=100, height:float=40, corner_radius:float=12, on_click=None) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"Button\"\n        })\n\n        self.width : float = width\n        self.height : float = height\n        self.corner_radius : float = corner_radius\n        self.on_click = on_click\n\n        self.vdata['props'].update({\n            \"width\" : self.width,\n            \"height\" : self.height,\n            \"corner_radius\" : self.corner_radius\n        })\n    \n\n    def on_event (self, event_content:dict):\n        if event_content['name'] == \"on_click\":\n            on_view_action(self.on_click, [self])\n\n    def update(self):\n        self.vdata['props'].update({\n            \"width\" : self.width,\n            \"height\" : self.height,\n            \"corner_radius\" : self.corner_radius\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/text.py", "chunked_list": ["from .subview import SubView\n\n\n\nclass Text (SubView):\n    def __init__ (self, content:str, color:str=\"primery\",  size:int=18):\n        super().__init__()\n\n        self.content : str = content\n        self.color : str = color\n        self.size : str = size\n\n        self.vdata.update({\n            \"name\" : \"Text\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"color\" : self.color,\n                \"size\" : self.size\n            }\n        })\n\n    \n    def update (self):\n        self.vdata.update({\n            \"name\" : \"Text\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"color\" : self.color,\n                \"size\" : self.size\n            }\n        })\n        super().update()"]}
{"filename": "swoopyui/views/navigationsplitview.py", "chunked_list": ["from .subviewparent import SubViewParent\nfrom .subview import SubView\n\n\n\nclass NavigationSplitView (SubViewParent):\n    \"\"\"A view that presents views in two or three columns, where selections in \n    leading columns control presentations in subsequent columns.\"\"\"\n    def __init__(self, title:str, detail_title:str=\"\") -> None:\n        super().__init__()\n\n        self.title : str = title\n        self.detail_title : str = detail_title\n\n        self.vdata.update({\n            \"name\" : \"NavigationSplitView\",\n            \"sub_views2\" : [],\n            \"sub_views3\" : [],\n            \"sub_views4\" : []\n        })\n\n        self.vdata['props'].update({\n            \"title\" : title,\n            \"detail_title\" : detail_title\n        })\n    \n    def add_to_detail (self, subviews:list):\n        \"\"\"Add new subview to the second column of the navigationview.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views2'].append(subview.vdata)\n            self.main_view.add_to_subviews_history(subview)\n        self.update()\n    \n    def add_to_toolbar (self, subviews:list):\n        \"\"\"Add subviews in toolbar.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views3'].append(subview.vdata)\n            self.main_view.add_to_subviews_history(subview)\n        self.update()\n    \n\n    def add_to_detail_toolbar (self, subviews:list):\n        \"\"\"Add to detail page toolbar.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views4'].append(subview.vdata)\n            self.main_view.add_to_subviews_history(subview)\n        self.update()\n    \n    def update(self):\n        self.vdata['props'].update({\n            \"title\" : self.title,\n            \"detail_title\" : self.detail_title\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/navigationlink.py", "chunked_list": ["from .subviewparent import SubViewParent\nfrom .subview import SubView\n\n\nclass NavigationLink (SubViewParent):\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"NavigationLink\",\n            \"sub_views2\": []\n        })\n    \n    def add_to_destination (self, subviews:list):\n        \"\"\"Add new subview to the navigated destination.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views2'].append(subview.vdata)\n            self.main_view.add_to_subviews_history(subview)\n            self.update()"]}
{"filename": "swoopyui/views/sheet.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass Sheet (SubViewParent):\n    \"\"\"A \"\"\"\n    def __init__(self, presented:bool=False) -> None:\n        super().__init__()\n\n        self.presented = presented\n\n        self.vdata.update({\n            \"name\" : \"Sheet\",\n            \"props\" : {\n                \"presented\" : presented\n            }\n        })\n    \n\n    def update(self):\n        self.vdata.update({\n            \"name\" : \"Sheet\",\n            \"props\" : {\n                \"presented\" : self.presented\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/textbutton.py", "chunked_list": ["from ..tools.on_action import on_view_action\nfrom .subview import SubView\n\n\nclass TextButton (SubView):\n    def __init__(self, content:str, on_click=None) -> None:\n        super().__init__()\n\n        self.content : str = content\n        self.on_click = on_click\n\n        self.vdata.update({\n            \"name\" : \"TextButton\",\n            \"props\" : {\n                \"content\" : self.content\n            }\n        })\n    \n\n    def on_event (self, event_content:dict):\n        if event_content['name'] == \"on_click\":\n            on_view_action(self.on_click, [self])\n    \n\n    def update(self):\n        self.vdata.update({\n            \"name\" : \"TextButton\",\n            \"props\" : {\n                \"content\" : self.content\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/__init__.py", "chunked_list": [""]}
{"filename": "swoopyui/views/scrollingtabview.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\n\nclass ScrollingTabView (SubViewParent):\n    \"\"\"A scrolling tabview for multi-page on scroll\"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n\n        self.vdata.update({\n            \"name\" : \"ScrollingTabView\"\n        })"]}
{"filename": "swoopyui/views/label.py", "chunked_list": ["from .subview import SubView\n\n\n\n\nclass Label (SubView):\n    \"\"\"\n    A standard label for user interface items, consisting of an icon with a title.\n    \n    You can browse all the available icons on:\n    [Apple SF symbols](https://developer.apple.com/sf-symbols/)\n    \"\"\"\n    def __init__(self, content:str=\"Hello, label!\", icon_name:str=\"globe.europe.africa\", color:str=\"primery\", icon_color:str=\"primery\", size:int=18, icon_size:int=18) -> None:\n        super().__init__()\n\n        self.content : str = content\n        self.icon_name : str = icon_name\n        self.color : str = color\n        self.icon_color : str = icon_color\n        self.size : int = size\n        self.icon_size : int = icon_size\n\n        self.vdata.update({\n            \"name\" : \"TheLabelView\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"icon_name\" : self.icon_name,\n                \"color\" : self.color,\n                \"icon_color\" : self.icon_color,\n                \"size\" : self.size,\n                \"icon_size\" : self.icon_size\n            }\n        })\n    \n    def update(self):\n        self.vdata.update({\n            \"name\" : \"TheLabelView\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"icon_name\" : self.icon_name,\n                \"color\" : self.color,\n                \"icon_color\" : self.icon_color,\n                \"size\" : self.size,\n                \"icon_size\" : self.icon_size\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/list.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass List (SubViewParent):\n    \"\"\"Align the subviews in a parent stack verticaly.\"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"TheListView\"\n        })"]}
{"filename": "swoopyui/views/subviewparent.py", "chunked_list": ["from .subview import SubView\n\n\n\n\nclass SubViewParent (SubView):\n    \"\"\"The `SubViewParent` is a subview that have the abiliy to add another subviews inside it.\"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.subviews = []\n        self.vdata.update({\n            \"sub_views\" : [],\n            \"sub_views2\" : [],\n            \"sub_views3\" : [],\n            \"sub_views4\" : []\n        })\n    \n\n    def add (self, subviews:list):\n        \"\"\"Add a new subview to this view.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views'].append(subview.vdata)\n\n            self.main_view.add_to_subviews_history(subview)\n        self.update()\n\n    def update(self):\n        return super().update()"]}
{"filename": "swoopyui/views/colorview.py", "chunked_list": ["from .subview import SubView\n\n\n\nclass ColorView (SubView):\n    def __init__(self, corner_radius:int=5, color:str=\"primery\", width:int=100, height:int=100) -> None:\n        super().__init__()\n\n        self.corner_radius : int = corner_radius\n        self.color : str = color\n        self.width : int = width\n        self.height : int = height\n        \n        self.vdata.update({\n            \"name\" : \" ColorView\",\n            \"props\" : {\n                \"corner_radius\" : self.corner_radius,\n                \"color\" : color,\n                \"width\" : width,\n                \"height\" : height\n            }\n        })\n    \n\n    def update(self):\n        self.vdata.update({\n            \"name\" : \" ColorView\",\n            \"props\" : {\n                \"corner_radius\" : self.corner_radius,\n                \"color\" : self.color,\n                \"width\" : self.width,\n                \"height\" : self.height\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/elevatedbutton.py", "chunked_list": ["from .subview import SubView\nfrom ..tools.on_action import on_view_action\n\n\nclass ElevatedButton (SubView):\n    \"\"\"A button with a text and background color.\"\"\"\n    def __init__(self, content:str, color:str=\"white\", bgcolor:str=\"blue\", width:int=80, height:int=40, corner_radius:int=12, on_click=None) -> None:\n        super().__init__()\n\n        self.content : str = content\n        self.color : str = color\n        self.bgcolor : str = bgcolor\n        self.width : int = width\n        self.height : int = height\n        self.corner_radius : int = corner_radius\n        self.on_click = on_click\n\n        self.vdata.update({\n            \"name\" : \"ElevatedButton\"\n        })\n\n        self.vdata['props'].update({\n            \"content\" : self.content,\n            \"color\" : self.color,\n            \"bgcolor\" : self.bgcolor,\n            \"width\" : self.width,\n            \"height\" : self.height,\n            \"corner_radius\" : self.corner_radius\n        })\n    \n\n    def on_event (self, event_content:dict):\n        if event_content['name'] == \"on_click\":\n            on_view_action(self.on_click, [self])\n\n    \n    def update(self):\n        self.vdata['props'].update({\n            \"content\" : self.content,\n            \"color\" : self.color,\n            \"bgcolor\" : self.bgcolor,\n            \"width\" : self.width,\n            \"height\" : self.height,\n            \"corner_radius\" : self.corner_radius\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/menu.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass Menu (SubViewParent):\n    \"\"\"A control for presenting a menu of actions.\"\"\"\n    def __init__(self, title:str=\"\") -> None:\n        super().__init__()\n\n\n        self.title : str = title\n\n        self.vdata.update({\n            \"name\" : \"Menu\",\n            \"props\" : {\n                \"title\" : self.title\n            }\n        })\n    \n    def update(self):\n        self.vdata.update({\n            \"name\" : \"Menu\",\n            \"props\" : {\n                \"title\" : self.title\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/icon.py", "chunked_list": ["from .subview import SubView\n\n\n\n\nclass Icon (SubView):\n    \"\"\"\n    A standard label for user interface items, consisting of an icon with a title.\n    \n    You can browse all the available icons on:\n    [Apple SF symbols](https://developer.apple.com/sf-symbols/)\n    \"\"\"\n    def __init__(self, icon_name:str=\"globe.europe.africa\", icon_color:str=\"primery\", icon_size:int=18) -> None:\n        super().__init__()\n\n        self.icon_name : str = icon_name\n        self.icon_color : str = icon_color\n        self.icon_size : int = icon_size\n\n        self.vdata.update({\n            \"name\" : \"Icon\",\n            \"props\" : {\n                \"icon_name\" : self.icon_name,\n                \"icon_color\" : self.icon_color,\n                \"icon_size\" : self.icon_size\n            }\n        })\n    \n    def update(self):\n        self.vdata.update({\n            \"name\" : \"Icon\",\n            \"props\" : {\n                \"icon_name\" : self.icon_name,\n                \"icon_color\" : self.icon_color,\n                \"icon_size\" : self.icon_size\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/subview.py", "chunked_list": ["\n\n\n\nclass SubView (object):\n    \"\"\"The parent class of all subview's subclassess.\"\"\"\n    def __init__(self) -> None:\n        self.__id = -1\n        self.__parent_view = None\n        self.__main_view = None\n\n        self.update_id = -1\n\n        self.vdata = {\n            \"ID\" : self.__id,\n            \"update_id\" : self.update_id,\n            \"name\" : \"None\",\n            \"props\" : {},\n            \"sub_views\" : []\n        }\n\n    \n    def respown (self, new_id:int, update_id:int, parent_view, main_view):\n        self.__id = new_id\n        self.update_id = update_id\n        self.__parent_view = parent_view\n        self.__main_view = main_view\n\n        self.vdata['ID'] = new_id\n        self.vdata['update_id'] = update_id\n    \n    def update (self):\n        if self.parent_view == None or self.main_view == None:\n            raise Exception(\"You must add this subview to the UI first.\")\n        self.vdata['ID'] = self.__id\n        self.vdata['update_id'] = self.update_id\n\n        self.main_view.update(self)\n\n\n    @property\n    def id (self):\n        return self.__id\n    \n    @property\n    def parent_view (self):\n        return self.__parent_view\n    \n    @property\n    def main_view(self):\n        return self.__main_view"]}
{"filename": "swoopyui/views/labeledbutton.py", "chunked_list": ["from .subview import SubView\nfrom ..tools.on_action import on_view_action\n\n\n\nclass LabeledButton (SubView):\n    \"\"\"\n    A standard button with a label for user interface items, consisting of an icon with a title.\n    \n    You can browse all the available icons on:\n    [Apple SF symbols](https://developer.apple.com/sf-symbols/)\n    \"\"\"\n    def __init__(self, content:str=\"Hello, label!\", icon_name:str=\"globe.europe.africa\", color:str=\"primery\", icon_color:str=\"primery\", size:int=18, icon_size:int=18, on_click=None) -> None:\n        super().__init__()\n\n        self.content : str = content\n        self.icon_name : str = icon_name\n        self.color : str = color\n        self.icon_color : str = icon_color\n        self.size : int = size\n        self.icon_size : int = icon_size\n        self.on_click = on_click\n\n        self.vdata.update({\n            \"name\" : \"LabeledButton\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"icon_name\" : self.icon_name,\n                \"color\" : self.color,\n                \"icon_color\" : self.icon_color,\n                \"size\" : self.size,\n                \"icon_size\" : self.icon_size\n            }\n        })\n    \n    def on_event (self, event_content:dict):\n        if event_content['name'] == \"on_click\":\n            on_view_action(self.on_click, [self])\n    \n    def update(self):\n        self.vdata.update({\n            \"name\" : \"LabeledButton\",\n            \"props\" : {\n                \"content\" : self.content,\n                \"icon_name\" : self.icon_name,\n                \"color\" : self.color,\n                \"icon_color\" : self.icon_color,\n                \"size\" : self.size,\n                \"icon_size\" : self.icon_size\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/views/contextmenu.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass ContextMenu (SubViewParent):\n    \"\"\"A \"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"ContextMenu\"\n        })\n\n    \n    def add_to_context_menu (self, subviews:list):\n        \"\"\"Add a new subview to the context menu.\"\"\"\n        if self.parent_view == None or self.main_view == None: return\n\n        for subview in subviews:\n            subview.respown(\n                new_id=self.main_view.get_new_subview_id(),\n                update_id=self.main_view.get_new_subview_update_id(),\n                parent_view=self,\n                main_view=self.main_view\n            )\n            self.subviews.append(subview)\n            self.vdata['sub_views2'].append(subview.vdata)\n\n            self.main_view.add_to_subviews_history(subview)\n        self.update()"]}
{"filename": "swoopyui/views/vstack.py", "chunked_list": ["from .subviewparent import SubViewParent\n\n\n\nclass VStack (SubViewParent):\n    \"\"\"Align the subviews in a parent stack verticaly.\"\"\"\n    def __init__(self) -> None:\n        super().__init__()\n\n        self.vdata.update({\n            \"name\" : \"VStack\"\n        })"]}
{"filename": "swoopyui/views/shapes/__init__.py", "chunked_list": [""]}
{"filename": "swoopyui/views/shapes/roundedrectangleshape.py", "chunked_list": ["from ..subview import SubView\n\n\n\nclass RoundedRectangleShape (SubView):\n    def __init__(self, corner_radius:int=5, color:str=\"primery\", width:int=100, height:int=100) -> None:\n        super().__init__()\n\n        self.corner_radius : int = corner_radius\n        self.color : str = color\n        self.width : int = width\n        self.height : int = height\n        \n        self.vdata.update({\n            \"name\" : \" RoundedRectangleShape\",\n            \"props\" : {\n                \"corner_radius\" : self.corner_radius,\n                \"color\" : color,\n                \"width\" : width,\n                \"height\" : height\n            }\n        })\n    \n\n    def update(self):\n        self.vdata.update({\n            \"name\" : \" RoundedRectangleShape\",\n            \"props\" : {\n                \"corner_radius\" : self.corner_radius,\n                \"color\" : self.color,\n                \"width\" : self.width,\n                \"height\" : self.height\n            }\n        })\n        return super().update()"]}
{"filename": "swoopyui/UIkits/__init__.py", "chunked_list": [""]}
{"filename": "swoopyui/assets/__init__.py", "chunked_list": [""]}
{"filename": "examples/counter.py", "chunked_list": ["import swoopyui\n\n\ndef main (view:swoopyui.View):\n    def on_p(cls):\n        number.content = str(int(number.content)+1)\n        number.update()\n\n    def on_m (cls):\n        number.content = str(int(number.content)-1)\n        number.update()\n\n    \n    hstack = swoopyui.HStack()\n    view.add(hstack)\n\n    plus_btn = swoopyui.ElevatedButton(\"+\", on_click=on_p)\n    number = swoopyui.Text(\"0\")\n    minus_btn = swoopyui.ElevatedButton(\"-\", on_click=on_m)\n\n    hstack.add([\n        plus_btn,\n        number,\n        minus_btn\n    ])", "\n\nswoopyui.app(target=main)"]}
{"filename": "examples/to_do.py", "chunked_list": ["import swoopyui\n\n\n\ndef main (view:swoopyui.View):\n    def on_add_new_task (cls):\n        task = tf.content\n        scroll_view.add([swoopyui.Text(f\"{task}\")])\n        tf.content = \"\"\n        tf.update()\n    \n    nav = swoopyui.NavigationSplitView(\"To-do\")\n    view.add(nav)\n\n    top_hsatck = swoopyui.HStack()\n    nav.add([top_hsatck])\n\n    tf = swoopyui.TextField(\"What is your next task?\")\n    top_hsatck.add([\n        swoopyui.Text(\" \"),\n        tf,\n        swoopyui.ElevatedButton(\"+\", on_click=on_add_new_task),\n        swoopyui.Text(\" \")\n    ])\n\n    scroll_view = swoopyui.ScrollView()\n    nav.add([scroll_view])", "\n\nswoopyui.app(target=main)"]}
{"filename": "examples/calculator.py", "chunked_list": ["import swoopyui\n\ndef main(view:swoopyui.View):\n    def on_add_num (cls):\n        number.content = str(number.content) + cls.content\n        number.update()\n\n    def on_operation (cls):\n        number.content = str(eval(number.content))\n        number.update()\n\n    nav = swoopyui.NavigationSplitView(\"Calculator\")\n    view.add(nav)\n\n\n    number = swoopyui.Text(\"1\", size=24)\n    nav.add([number])\n\n    tool_stk = swoopyui.HStack()\n    row1 = swoopyui.HStack()\n    row2 = swoopyui.HStack()\n    row3 = swoopyui.HStack()\n    row4 = swoopyui.HStack()\n\n    nav.add([\n        tool_stk,\n        row1,\n        row2,\n        row3,\n        row4\n    ])\n\n    for t in [\"+\", \"-\", \"*\"]:\n        tool_stk.add([swoopyui.ElevatedButton(f\"{t}\", on_click=on_add_num, width=50, height=50, bgcolor=\"orange\")])\n\n    for r1 in [1, 2, 3]:\n        row1.add([swoopyui.ElevatedButton(f\"{r1}\", on_click=on_add_num, width=50, height=50)])\n    \n\n    for r2 in [4, 5, 6]:\n        row2.add([swoopyui.ElevatedButton(f\"{r2}\", on_click=on_add_num, width=50, height=50)])\n\n    for r3 in [7, 8, 9]:\n        row3.add([swoopyui.ElevatedButton(f\"{r3}\", on_click=on_add_num, width=50, height=50)])\n    \n    row4.add([\n        swoopyui.ElevatedButton(f\"0\", on_click=on_add_num, width=50, height=50),\n        swoopyui.ElevatedButton(f\"=\", on_click=on_operation, width=50, height=50, bgcolor=\"orange\"),\n        swoopyui.ElevatedButton(f\".\", on_click=on_add_num, width=50, height=50)\n    ])", "    \n\n    \n\nswoopyui.app(target=main)"]}
{"filename": "swoopyui_app/main.py", "chunked_list": ["import swoopyui\n\n\ndef main (view:swoopyui.View):\n    def on_add_number (cls:swoopyui.ElevatedButton):\n        number_label.content = str(number_label.content) + str(cls.content)\n        number_label.update()\n\n    def on_opration (cls:swoopyui.ElevatedButton):\n        number_label.content = str(eval(number_label.content))\n        number_label.update()\n\n    nav = swoopyui.NavigationSplitView(\"Calculator\")\n    view.add(nav)\n\n    number_label = swoopyui.Text(\"1\", size=28)\n    nav.add([number_label])\n\n    tool_row = swoopyui.HStack()\n    nav.add([tool_row])\n\n    plus_btn = swoopyui.ElevatedButton(\"+\", width=40, bgcolor=\"orange\", on_click=on_add_number)\n    minus_btn = swoopyui.ElevatedButton(\"-\", width=40, bgcolor=\"orange\", on_click=on_add_number)\n    multiply_btn = swoopyui.ElevatedButton(\"*\", width=40, bgcolor=\"orange\", on_click=on_add_number)\n\n    tool_row.add([\n        plus_btn,\n        minus_btn,\n        multiply_btn\n    ])\n\n    row_one = swoopyui.HStack()\n    row_two = swoopyui.HStack()\n    row_three = swoopyui.HStack()\n\n    nav.add([\n        row_one,\n        row_two,\n        row_three\n    ])\n\n    for r1 in [1, 2, 3]:\n        row_one.add([swoopyui.ElevatedButton(f\"{r1}\", width=40, on_click=on_add_number)])\n    \n    for r2 in [4, 5, 6]:\n        row_two.add([swoopyui.ElevatedButton(f\"{r2}\", width=40, on_click=on_add_number)])\n    \n    for r3 in [7, 8, 9]:\n        row_three.add([swoopyui.ElevatedButton(f\"{r3}\", width=40, on_click=on_add_number)])\n    \n    nav.add([swoopyui.ElevatedButton(\"=\", on_click=on_opration, bgcolor=\"pink\")])"]}
{"filename": "swoopyui_app/__init__.py", "chunked_list": ["from .main import main\nimport swoopyui\n\n\nswoopyui.app(main)"]}
