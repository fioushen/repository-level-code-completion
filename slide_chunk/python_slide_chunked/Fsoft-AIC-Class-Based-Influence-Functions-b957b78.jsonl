{"filename": "ner_build_stest.py", "chunked_list": ["import os\nimport numpy as np\nimport torch\nimport tqdm\nfrom models.BertSequence import load_bert_sequence_model\nfrom dataloaders.ner_conll2003 import get_labels, conll2003_get_dataloader\nimport torch\nfrom torch.autograd import grad\n\ndef ner_hvp(y, w, v):\n    \"\"\" Multiply the Hessians of y and w by v.\n    Uses a backprop-like approach to compute the product between the Hessian\n    and another vector efficiently, which even works for large Hessians.\n    Example: if: y = 0.5 * w^T A x then hvp(y, w, v) returns and expression\n    which evaluates to the same values as (A + A.t) v.\n    Arguments:\n        y: scalar/tensor, for example the output of the loss function\n        w: list of torch tensors, tensors over which the Hessian\n            should be constructed\n        v: list of torch tensors, same shape as w,\n            will be multiplied with the Hessian\n    Returns:\n        return_grads: list of torch tensors, contains product of Hessian and v.\n    Raises:\n        ValueError: `y` and `w` have a different length.\n    \"\"\"\n    if len(w) != len(v):\n        raise(ValueError(\"w and v must have the same length\"))\n    \n    first_grads = grad(y, w, retain_graph=True, create_graph=True)\n\n    # Elementwise products\n    elementwise_products = 0\n    for grad_elem, v_elem in zip(first_grads, v):\n        elementwise_products += torch.sum(grad_elem * v_elem)\n\n    # second grad\n    return_grads = grad(elementwise_products, w, create_graph=False, retain_graph=True)\n\n    return return_grads", "\ndef ner_hvp(y, w, v):\n    \"\"\" Multiply the Hessians of y and w by v.\n    Uses a backprop-like approach to compute the product between the Hessian\n    and another vector efficiently, which even works for large Hessians.\n    Example: if: y = 0.5 * w^T A x then hvp(y, w, v) returns and expression\n    which evaluates to the same values as (A + A.t) v.\n    Arguments:\n        y: scalar/tensor, for example the output of the loss function\n        w: list of torch tensors, tensors over which the Hessian\n            should be constructed\n        v: list of torch tensors, same shape as w,\n            will be multiplied with the Hessian\n    Returns:\n        return_grads: list of torch tensors, contains product of Hessian and v.\n    Raises:\n        ValueError: `y` and `w` have a different length.\n    \"\"\"\n    if len(w) != len(v):\n        raise(ValueError(\"w and v must have the same length\"))\n    \n    first_grads = grad(y, w, retain_graph=True, create_graph=True)\n\n    # Elementwise products\n    elementwise_products = 0\n    for grad_elem, v_elem in zip(first_grads, v):\n        elementwise_products += torch.sum(grad_elem * v_elem)\n\n    # second grad\n    return_grads = grad(elementwise_products, w, create_graph=False, retain_graph=True)\n\n    return return_grads", "\ndef ner_stest(params, zt, dataloader, num_sample = 1, damp=0.01, scale=25.0):\n    ids = zt['input_ids'].to(device, dtype = torch.long)\n    mask = zt['attention_mask'].to(device, dtype = torch.long)\n    labels = zt['labels'].to(device, dtype = torch.long)\n    loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels, reduction_loss = 'none')\n    # [list]: (128,)\n    v_sentence = [grad(l, params, create_graph=False, retain_graph=True) for l in loss.view(-1)]\n    \n    stest_of_sentence = []\n    for v in tqdm.tqdm(v_sentence):\n        h_estimate = list(v).copy() # h_estimate ~ H(-1)v\n        # Skip if all of gradients is zeros\n        if torch.count_nonzero(v[0]).item() == 0 and torch.count_nonzero(v[1]).item() == 0:\n            stest_of_sentence.append(h_estimate)\n            continue\n        \n        for i, data in enumerate(dataloader):\n            ids = data['input_ids'].to(device, dtype = torch.long)\n            mask = data['attention_mask'].to(device, dtype = torch.long)\n            labels = data['labels'].to(device, dtype = torch.long)\n            loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels, reduction_loss = 'none')\n            for l in loss:\n                hv = ner_hvp(l, params, h_estimate)\n                h_estimate = [_v + (1 - damp) * _he - _hv/scale for _v, _he, _hv in zip(v, h_estimate, hv)]\n            \n            if i == num_sample:\n                break\n\n        stest_of_sentence.append(h_estimate)\n    \n    return stest_of_sentence", "\nif __name__ == '__main__':\n    # configs\n    dir_checkpoint = os.path.join('checkpoints', 'conll2003', 'SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok')\n    noise_file = os.path.join('data', 'conll2003', 'ner', 'noise_BItags_30sen_30tok.txt')\n    test_file = os.path.join('data', 'conll2003', 'ner', 'test.txt')\n    folder_save = os.path.join(dir_checkpoint, \"stest_gradients\")\n    num_labels = len(get_labels())\n    num_iteration=300\n    scale = 25.0\n\n    SEED = 4\n    device = 'cuda'\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    if not torch.cuda.is_available() and device == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n\n    # Build model\n    model = load_bert_sequence_model(os.path.join(dir_checkpoint, 'best.pt'),num_labels=num_labels,device=device)\n    \n    # Params to get gradients\n    params = [p for p in model.parameters() if p.requires_grad][-2:]\n\n    # dataloader\n    noise_dataloader = conll2003_get_dataloader(\n        file_name=noise_file,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    test_dataloader = conll2003_get_dataloader(\n        file_name=test_file,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n    \n\n    for i, zt in enumerate(test_dataloader):\n        print(\"Sample: {}/{}\".format(i+1, len(test_dataloader)))\n        inverse_hvp = [torch.zeros_like(p, dtype=torch.float) for p in params]\n        stest_of_sentence = ner_stest(params, zt, noise_dataloader)\n        g_sentence = []\n        for cur_estimate in stest_of_sentence:\n            if torch.count_nonzero(cur_estimate[0]).item() == 0 and torch.count_nonzero(cur_estimate[1]).item() == 0:\n                weight = cur_estimate[0].cpu().detach().numpy()\n                bias = cur_estimate[1].cpu().detach().numpy()\n                gt = [weight, bias]\n                g_sentence.append(gt)\n                continue\n\n            for r in range(num_iteration):\n                with torch.no_grad():\n                    inverse_hvp = [old + (cur/scale) for old, cur in zip(inverse_hvp, cur_estimate)]\n            with torch.no_grad():\n                inverse_hvp = [j / num_iteration for j in inverse_hvp]\n            weight, bias = inverse_hvp\n            weight = weight.to('cpu')\n            bias = bias.to('cpu')\n            gt = [weight, bias]\n            g_sentence.append(gt)\n        \n        # save gradient\n        torch.save(g_sentence, os.path.join(folder_save, f'stest_{i}'))"]}
{"filename": "train.py", "chunked_list": ["import yaml\nimport os\nimport argparse\nimport torch\nimport wandb\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nimport torch.optim as optim\nfrom baseline import ModelBase, DataBase", "import torch.optim as optim\nfrom baseline import ModelBase, DataBase\nfrom utils.run_train import run_train\n\ndef BinaryCrossEntropy(preds, labels):\n    probs = torch.sigmoid(preds)\n    labels = labels.float()\n    loss = torch.log(probs[:,0]+1e-10)*labels+torch.log((1-probs)[:,0]+1e-10)*(1-labels)\n    loss = -loss.mean()\n    return loss", "\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cfg', type=str, required=True, help='config yaml path')\n    parser.add_argument('--seed', type=int, default=0)\n    parser.add_argument('--project', default='ClassTracing')\n    opt = parser.parse_args()\n    \n    SEED = opt.seed\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    with open(opt.cfg, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    print(\"Config training:\")\n    for key, value in cfg.items():\n        print(\"{}: {}\".format(key, value))\n\n    if not os.path.isdir(cfg['dir_checkpoint']):\n        print(f\"Directory {cfg['dir_checkpoint']} does not exist\")\n        os.makedirs(cfg['dir_checkpoint'])\n        print(f\"Created {cfg['dir_checkpoint']}\")\n\n    if not torch.cuda.is_available() and cfg['device'] == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if cfg['device'] == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n\n    # Build model\n    model_base = ModelBase(cfg['model'],\n                           cfg['number_classes'],\n                           device=cfg['device'])\n    model_base.build_model()\n\n    # Load data\n    df_train = pd.read_csv(cfg['df_train'])\n    df_val = pd.read_csv(cfg['df_val'])\n\n    data_base = DataBase(cfg['data'])\n\n    train_loader = data_base.get_dataloader(\n        df=df_train,\n        batch_size=cfg['batch_size'],\n        mode='train',\n        num_workers=cfg['num_worker']\n    )\n\n    val_loader = data_base.get_dataloader(\n        df=df_val,\n        batch_size=cfg['batch_size'],\n        mode='test',\n        num_workers=cfg['num_worker']\n    )\n\n    # Loss function and optimizer\n    if cfg['number_classes'] > 1:\n        loss_fn = nn.CrossEntropyLoss()\n    else:\n        loss_fn = BinaryCrossEntropy\n    \n    optimizer = optim.AdamW(model_base.model.parameters(), lr=float(cfg['learning_rate']), betas=(0.9, 0.999))\n\n    wandb.init(project=opt.project, name=cfg['name_project'])\n    best_valid_acc = (-1.0) * float(\"Inf\")\n    best_epoch = 0\n\n    for epoch in range(cfg['epoch']):\n        print(f\"Epoch: {epoch+1}/{cfg['epoch']}\")\n        train_metrics = run_train(\n            model=model_base.model,\n            dataloader=train_loader,\n            optimizer=optimizer,\n            criterion=loss_fn,\n            func_inference=model_base.inference,\n            mode='train'\n        )\n        val_metrics = run_train(\n            model=model_base.model,\n            dataloader=val_loader,\n            optimizer=optimizer,\n            criterion=loss_fn,\n            func_inference=model_base.inference,\n            mode='val'\n        )\n\n        print(\"Train metricc:\", train_metrics)\n        print(\"Val metrics\", val_metrics)\n\n        if cfg['save_each_epoch']:\n            torch.save(model_base.model.state_dict(),\n                       cfg['dir_checkpoint'] + '/epoch_{}.pt'.format(epoch))\n\n        if best_valid_acc < val_metrics[\"val_acc\"]:\n            best_valid_acc = val_metrics[\"val_acc\"]\n            torch.save(model_base.model.state_dict(), cfg['dir_checkpoint'] + '/best.pt')\n            f = open(cfg['dir_checkpoint'] + '/best_epoch.txt', \"w\")\n            f.write(str(epoch))\n            print(f\"Model saved to ==> {cfg['dir_checkpoint'] + '/best.pt'} at epoch {epoch}\")\n        \n        train_metrics.update(val_metrics)\n        wandb.log(train_metrics)\n\n    print(f'Finished training')", ""]}
{"filename": "baseline.py", "chunked_list": ["import torch\nfrom models.BertClassifier import load_bert_model, build_bert_model\nfrom models.BigClone import load_BigClone_model, build_BigClone_model\n\nfrom dataloaders.bigclone import bigClone_get_dataloader\nfrom dataloaders.imdb import imdb_get_dataloader\nfrom dataloaders.snli import snli_get_dataloader\n\nclass ModelBase():\n    def __init__(self, model_type, number_classes, device='cuda'):\n        self.model_type = model_type\n        self.number_classes = number_classes\n        self.device = device\n\n    def build_model(self):\n        if self.model_type == 'bert':\n            self.model = build_bert_model(self.number_classes, self.device)\n        elif self.model_type == 'BigCloneModel':\n            self.model = build_BigClone_model(2, self.device)\n            \n        \n    def load_model(self, path_pretrain):\n        if self.model_type == 'bert':\n            self.model = load_bert_model(path_pretrain, self.number_classes, self.device)\n        elif self.model_type == 'BigCloneModel':\n            self.model = load_BigClone_model(path_pretrain, 2, self.device)\n\n    def inference(self, data):\n        if self.model_type == 'bert':\n            ids = data['ids'].to(self.device)\n            attention_mask = data['attention_mask'].to(self.device)\n            token_type_ids = data['token_type_ids'].to(self.device)\n            labels = data['label'].to(self.device)\n            predictions = self.model(ids, attention_mask, token_type_ids)\n\n        elif self.model_type == 'BigCloneModel':\n            sample, labels = data\n            sample = sample.to(self.device)\n            labels = labels.to(self.device)\n            predictions = self.model(sample)\n\n        return predictions, labels", "class ModelBase():\n    def __init__(self, model_type, number_classes, device='cuda'):\n        self.model_type = model_type\n        self.number_classes = number_classes\n        self.device = device\n\n    def build_model(self):\n        if self.model_type == 'bert':\n            self.model = build_bert_model(self.number_classes, self.device)\n        elif self.model_type == 'BigCloneModel':\n            self.model = build_BigClone_model(2, self.device)\n            \n        \n    def load_model(self, path_pretrain):\n        if self.model_type == 'bert':\n            self.model = load_bert_model(path_pretrain, self.number_classes, self.device)\n        elif self.model_type == 'BigCloneModel':\n            self.model = load_BigClone_model(path_pretrain, 2, self.device)\n\n    def inference(self, data):\n        if self.model_type == 'bert':\n            ids = data['ids'].to(self.device)\n            attention_mask = data['attention_mask'].to(self.device)\n            token_type_ids = data['token_type_ids'].to(self.device)\n            labels = data['label'].to(self.device)\n            predictions = self.model(ids, attention_mask, token_type_ids)\n\n        elif self.model_type == 'BigCloneModel':\n            sample, labels = data\n            sample = sample.to(self.device)\n            labels = labels.to(self.device)\n            predictions = self.model(sample)\n\n        return predictions, labels", "\n\nclass DataBase():\n    def __init__(self, type_data):\n        self.type_data = type_data\n\n    def get_dataloader(self, df, batch_size, mode, num_workers=0):\n        if self.type_data == 'bigclone':\n            return bigClone_get_dataloader(\n                df=df,\n                batch_size=batch_size,\n                mode=mode,\n                num_workers=num_workers\n            )\n        elif self.type_data == 'imdb':\n            return imdb_get_dataloader(\n                df=df,\n                batch_size=batch_size,\n                mode=mode,\n                num_workers=num_workers\n            )\n        elif self.type_data == 'snli':\n            return snli_get_dataloader(\n                df=df,\n                batch_size=batch_size,\n                mode=mode,\n                num_workers=num_workers\n            )"]}
{"filename": "plot.py", "chunked_list": ["import matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom numpy import load\nimport torch\nimport glob\nimport os\nimport random\nimport tqdm", "import random\nimport tqdm\nimport torch.nn as nn\ncos = nn.CosineSimilarity(dim=-1, eps=1e-6)\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nif __name__ == '__main__':\n    data = 'bigclone'\n    model = 'codebert'\n    percent = '20'\n    train_gradient = torch.load(os.path.join('checkpoints', f'{data}', f'{data}_{model}_train_noise_{percent}%', f'noise{percent}%.grad'))\n    # train_features = load(os.path.join('checkpoints', f'{data}', f'{data}_{model}_train_random_noise', 'train_features.npy'))\n    pd_data = pd.read_csv(f'data/{data}/processed/noise/noise{percent}%.csv')\n    \n    min_class = min(set(pd_data['label']))\n    max_class = max(set(pd_data['label']))\n    \n    # gradient Dot all\n    samples = random.sample(train_gradient, 1000)\n    results = torch.zeros(len(samples), len(samples), dtype=float)\n        \n    for p, gt in enumerate(tqdm.tqdm(samples)):\n        for q, g in enumerate(samples):\n            influence = sum([torch.sum(k * j).data for k, j in zip(gt, g)])\n            influence = float(influence.cpu().detach().numpy())\n            results[p][q] = influence\n    results = results.cpu().detach().numpy()\n\n    values = []\n    for i in range(1000-1):\n        for j in range(i+1, 1000):\n            values.append(results[i][j])\n\n    fig, ax = plt.subplots(1, 1)\n    ax.hist(values, bins=100)\n    plt.savefig(f'figures/{data}/dot/{data}_all_grad_dot.pdf')\n\n    #  Gradient Cos all\n    results = torch.zeros(len(samples), len(samples), dtype=float)\n        \n    for p, gt in enumerate(tqdm.tqdm(samples)):\n        gt = torch.cat([x.view(-1) for x in gt])\n        for q, g in enumerate(samples):\n            g = torch.cat([x.view(-1) for x in g])\n            influence = cos(gt, g).item()\n            results[p][q] = influence\n    results = results.cpu().detach().numpy()\n\n    values = []\n    for i in range(1000-1):\n        for j in range(i+1, 1000):\n            values.append(results[i][j])\n\n    fig, ax = plt.subplots(1, 1)\n    ax.hist(values, bins=100)\n    plt.savefig(f'figures/{data}/cos/{data}_all_grad_cos.pdf')\n\n    # gradient dot of a class\n    for c in range(min_class, max_class + 1):\n        data_class = pd_data[pd_data['label']==c][:1000] # lay 1000 samples moi class\n        n = len(data_class.index)\n        results =  np.zeros((n,n))\n        for p, gt in enumerate(tqdm.tqdm(range(n))):\n            gt = train_gradient[data_class.index[p]]\n            for q, g in enumerate(range(n)):\n                g = train_gradient[data_class.index[q]]\n                influence = sum([torch.sum(k * j).data for k, j in zip(gt, g)])\n                influence = float(influence.cpu().detach().numpy())\n                results[p][q] = influence \n        values = []\n        for i in range(n-1):\n            for j in range(i+1, n):\n                values.append(results[i][j])\n        fig, ax = plt.subplots(1, 1)\n        ax.hist(values, bins=100)\n        plt.savefig(f'figures/{data}/dot/{data}_grad_dot_class_{c}.pdf')\n    \n    # Ve cos tung class theo gradient\n    for c in range(min_class, max_class + 1):\n        data_class = pd_data[pd_data['label']==c][:1000] # lay 1000 samples\n        n = len(data_class.index)\n        results =  np.zeros((n,n))\n        for p, gt in enumerate(tqdm.tqdm(range(n))):\n            gt = train_gradient[data_class.index[p]]\n            gt = torch.cat([x.view(-1) for x in gt])\n            for q, g in enumerate(range(n)):\n                g = train_gradient[data_class.index[q]]\n                g = torch.cat([x.view(-1) for x in g])\n                influence = cos(gt, g).item()\n                results[p][q] = influence \n        values = []\n        for i in range(n-1):\n            for j in range(i+1, n):\n                values.append(results[i][j])\n        fig, ax = plt.subplots(1, 1)\n        ax.hist(values, bins=100)\n        plt.savefig(f'figures/{data}/cos/{data}_grad_cos_class_{c}.pdf')"]}
{"filename": "gradients.py", "chunked_list": ["import os\nimport yaml\nimport torch\nimport argparse\nimport tqdm\nimport pandas as pd\nimport numpy as np\nimport torch.nn as nn\nfrom numpy import save\nfrom baseline import ModelBase, DataBase", "from numpy import save\nfrom baseline import ModelBase, DataBase\nfrom influencer.IF import IF\nfrom influencer.TracIn import TracIn\nfrom influencer.buildGradient import build_gradient\nfrom influencer.GD import GD\nfrom influencer.GC import GC\nfrom influencer.RIF import RIF\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cfg', type=str, required=True, help='config yaml path')\n    parser.add_argument('--seed', type=int, default=0)\n    opt = parser.parse_args()\n\n    SEED = opt.seed\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    with open(opt.cfg, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    if not torch.cuda.is_available() and cfg['device'] == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if cfg['device'] == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n    # get name\n    name_train = cfg['df_train'].split('/')[-1].split('.')[0]\n    name_test = cfg['df_test'].split('/')[-1].split('.')[0]\n    print(\"Name train: {}, Name test: {}\".format(name_train, name_test))\n    print(\"Directory: {}\".format(cfg['dir_checkpoint']))\n\n    # Load data\n    df_train = pd.read_csv(cfg['df_train'])\n    df_test = pd.read_csv(cfg['df_test'])\n\n    data_base = DataBase(cfg['data'])\n\n    train_loader = data_base.get_dataloader(\n        df=df_train,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    test_loader = data_base.get_dataloader(\n        df=df_test,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    # Config model\n    model_base = ModelBase(\n        model_type=cfg['model'],\n        number_classes=cfg['number_classes'],\n        device=cfg['device']\n    )\n    model_base.load_model(os.path.join(cfg['dir_checkpoint'],'best.pt'))\n    loss_fn = nn.CrossEntropyLoss()\n    params = [p for p in model_base.model.parameters() if p.requires_grad][-2:]\n    \n    # Build gradient\n    if not os.path.exists(os.path.join(cfg['dir_checkpoint'],f'{name_train}.grad')):\n        train_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn = loss_fn,\n            params = params,\n            dataloader = train_loader\n        )\n        torch.save(train_gradients, os.path.join(cfg['dir_checkpoint'],f'{name_train}.grad'))\n    else:\n        train_gradients = torch.load(os.path.join(cfg['dir_checkpoint'], f'{name_train}.grad'))\n    \n    if not os.path.exists(os.path.join(cfg['dir_checkpoint'],f'{name_test}.grad')):\n        test_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn = loss_fn,\n            params = params,\n            dataloader = test_loader\n        )\n        torch.save(test_gradients, os.path.join(cfg['dir_checkpoint'], f'{name_test}.grad'))\n    else:\n        test_gradients = torch.load(os.path.join(cfg['dir_checkpoint'], f'{name_test}.grad'))\n    \n    # Run methods\n    if 'IF' in cfg['methods']:\n        print(\"Run Influence Function:\")\n        results = IF(\n            test_loader=test_loader,\n            train_loader=train_loader,\n            test_gradients=test_gradients,\n            train_gradients=train_gradients,\n            inference_fn=model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            use_exact_hessian=cfg['use_exact_hessian']\n        )\n        if cfg['use_exact_hessian']:\n            save(os.path.join(cfg['dir_checkpoint'],f'IF_exact_{name_train}_{name_test}'), results)\n        else:\n            save(os.path.join(cfg['dir_checkpoint'],f'IF_approximate_{name_train}_{name_test}'), results)\n\n    if 'GD' in cfg['methods']:\n        print(\"Run Grad-Dot:\")\n        results = GD(train_gradients, test_gradients)\n        save(os.path.join(cfg['dir_checkpoint'],f'GD_{name_train}_{name_test}'), results)\n\n    if 'GC' in cfg['methods']:\n        print(\"Run Grad-Cos:\")\n        results = GC(train_gradients, test_gradients)\n        save(os.path.join(cfg['dir_checkpoint'],f'GC_{name_train}_{name_test}'), results)\n\n    if 'RIF' in cfg['methods']:\n        print(\"Run RelatIF:\")\n        results = RIF(\n            test_loader=test_loader,\n            train_loader=train_loader,\n            test_gradients=test_gradients,\n            train_gradients=train_gradients,\n            inference_fn=model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            use_exact_hessian=cfg['use_exact_hessian']\n        )\n        if cfg['use_exact_hessian']:\n            save(os.path.join(cfg['dir_checkpoint'],f'RIF_exact_{name_train}_{name_test}'), results)\n        else:\n            save(os.path.join(cfg['dir_checkpoint'],f'RIF_approximate_{name_train}_{name_test}'), results)\n\n    if 'TracIn' in cfg['methods']:\n        start = 0\n        f = open(os.path.join(cfg['dir_checkpoint'],'best_epoch.txt'))\n        end = int(f.readline())\n        print(\"Run Tracin from epoch {} to epoch {}\".format(start, end))\n        results = TracIn(\n            dir_checkpoint=cfg['dir_checkpoint'],\n            model_base=model_base,\n            train_loader=train_loader,\n            test_loader=test_loader,\n            loss_fn=loss_fn,\n            start=start,\n            end=end\n        )\n        save(os.path.join(cfg['dir_checkpoint'],f'TracIn_{name_train}_{name_test}'), results)", "\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cfg', type=str, required=True, help='config yaml path')\n    parser.add_argument('--seed', type=int, default=0)\n    opt = parser.parse_args()\n\n    SEED = opt.seed\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    with open(opt.cfg, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    if not torch.cuda.is_available() and cfg['device'] == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if cfg['device'] == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n    # get name\n    name_train = cfg['df_train'].split('/')[-1].split('.')[0]\n    name_test = cfg['df_test'].split('/')[-1].split('.')[0]\n    print(\"Name train: {}, Name test: {}\".format(name_train, name_test))\n    print(\"Directory: {}\".format(cfg['dir_checkpoint']))\n\n    # Load data\n    df_train = pd.read_csv(cfg['df_train'])\n    df_test = pd.read_csv(cfg['df_test'])\n\n    data_base = DataBase(cfg['data'])\n\n    train_loader = data_base.get_dataloader(\n        df=df_train,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    test_loader = data_base.get_dataloader(\n        df=df_test,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    # Config model\n    model_base = ModelBase(\n        model_type=cfg['model'],\n        number_classes=cfg['number_classes'],\n        device=cfg['device']\n    )\n    model_base.load_model(os.path.join(cfg['dir_checkpoint'],'best.pt'))\n    loss_fn = nn.CrossEntropyLoss()\n    params = [p for p in model_base.model.parameters() if p.requires_grad][-2:]\n    \n    # Build gradient\n    if not os.path.exists(os.path.join(cfg['dir_checkpoint'],f'{name_train}.grad')):\n        train_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn = loss_fn,\n            params = params,\n            dataloader = train_loader\n        )\n        torch.save(train_gradients, os.path.join(cfg['dir_checkpoint'],f'{name_train}.grad'))\n    else:\n        train_gradients = torch.load(os.path.join(cfg['dir_checkpoint'], f'{name_train}.grad'))\n    \n    if not os.path.exists(os.path.join(cfg['dir_checkpoint'],f'{name_test}.grad')):\n        test_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn = loss_fn,\n            params = params,\n            dataloader = test_loader\n        )\n        torch.save(test_gradients, os.path.join(cfg['dir_checkpoint'], f'{name_test}.grad'))\n    else:\n        test_gradients = torch.load(os.path.join(cfg['dir_checkpoint'], f'{name_test}.grad'))\n    \n    # Run methods\n    if 'IF' in cfg['methods']:\n        print(\"Run Influence Function:\")\n        results = IF(\n            test_loader=test_loader,\n            train_loader=train_loader,\n            test_gradients=test_gradients,\n            train_gradients=train_gradients,\n            inference_fn=model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            use_exact_hessian=cfg['use_exact_hessian']\n        )\n        if cfg['use_exact_hessian']:\n            save(os.path.join(cfg['dir_checkpoint'],f'IF_exact_{name_train}_{name_test}'), results)\n        else:\n            save(os.path.join(cfg['dir_checkpoint'],f'IF_approximate_{name_train}_{name_test}'), results)\n\n    if 'GD' in cfg['methods']:\n        print(\"Run Grad-Dot:\")\n        results = GD(train_gradients, test_gradients)\n        save(os.path.join(cfg['dir_checkpoint'],f'GD_{name_train}_{name_test}'), results)\n\n    if 'GC' in cfg['methods']:\n        print(\"Run Grad-Cos:\")\n        results = GC(train_gradients, test_gradients)\n        save(os.path.join(cfg['dir_checkpoint'],f'GC_{name_train}_{name_test}'), results)\n\n    if 'RIF' in cfg['methods']:\n        print(\"Run RelatIF:\")\n        results = RIF(\n            test_loader=test_loader,\n            train_loader=train_loader,\n            test_gradients=test_gradients,\n            train_gradients=train_gradients,\n            inference_fn=model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            use_exact_hessian=cfg['use_exact_hessian']\n        )\n        if cfg['use_exact_hessian']:\n            save(os.path.join(cfg['dir_checkpoint'],f'RIF_exact_{name_train}_{name_test}'), results)\n        else:\n            save(os.path.join(cfg['dir_checkpoint'],f'RIF_approximate_{name_train}_{name_test}'), results)\n\n    if 'TracIn' in cfg['methods']:\n        start = 0\n        f = open(os.path.join(cfg['dir_checkpoint'],'best_epoch.txt'))\n        end = int(f.readline())\n        print(\"Run Tracin from epoch {} to epoch {}\".format(start, end))\n        results = TracIn(\n            dir_checkpoint=cfg['dir_checkpoint'],\n            model_base=model_base,\n            train_loader=train_loader,\n            test_loader=test_loader,\n            loss_fn=loss_fn,\n            start=start,\n            end=end\n        )\n        save(os.path.join(cfg['dir_checkpoint'],f'TracIn_{name_train}_{name_test}'), results)", "        \n"]}
{"filename": "ner_gradients.py", "chunked_list": ["import os\nimport numpy as np\nimport torch\nimport tqdm\nfrom numpy import save\nfrom dataloaders.ner_conll2003 import get_labels, conll2003_get_dataloader\nfrom models.BertSequence import load_bert_sequence_model\nfrom influencer.GD import GD\nfrom torch.autograd import grad\n\ndef build_gradient(model, params, dataloader, type_data = None):\n    for i, data in enumerate(tqdm.tqdm(dataloader)):\n        # if os.path.exists(os.path.join(dir_checkpoint, f\"ck2_{type_data}_gradients\", f'grad_{type_data}_{i}')):\n        #     continue\n        \n        ids = data['input_ids'].to(device, dtype = torch.long)\n        mask = data['attention_mask'].to(device, dtype = torch.long)\n        labels = data['labels'].to(device, dtype = torch.long)\n                \n        loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels, reduction_loss = 'none')\n        \n        sentence_gradient = [grad(l, params, create_graph=False, retain_graph=True) for l in loss.view(-1)]\n        lst_gradient_of_sentence = []\n\n        for word_gradient in sentence_gradient:\n            weight, bias = word_gradient\n            weight = weight.cpu().detach().numpy()\n            bias = bias.cpu().detach().numpy()\n            word_gradient_numpy = [weight, bias]\n            lst_gradient_of_sentence.append(word_gradient_numpy)\n        \n        # save gradient\n        torch.save(lst_gradient_of_sentence, os.path.join(dir_checkpoint, f\"ck2_{type_data}_gradients\", f'grad_{type_data}_{i}'))", "from torch.autograd import grad\n\ndef build_gradient(model, params, dataloader, type_data = None):\n    for i, data in enumerate(tqdm.tqdm(dataloader)):\n        # if os.path.exists(os.path.join(dir_checkpoint, f\"ck2_{type_data}_gradients\", f'grad_{type_data}_{i}')):\n        #     continue\n        \n        ids = data['input_ids'].to(device, dtype = torch.long)\n        mask = data['attention_mask'].to(device, dtype = torch.long)\n        labels = data['labels'].to(device, dtype = torch.long)\n                \n        loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels, reduction_loss = 'none')\n        \n        sentence_gradient = [grad(l, params, create_graph=False, retain_graph=True) for l in loss.view(-1)]\n        lst_gradient_of_sentence = []\n\n        for word_gradient in sentence_gradient:\n            weight, bias = word_gradient\n            weight = weight.cpu().detach().numpy()\n            bias = bias.cpu().detach().numpy()\n            word_gradient_numpy = [weight, bias]\n            lst_gradient_of_sentence.append(word_gradient_numpy)\n        \n        # save gradient\n        torch.save(lst_gradient_of_sentence, os.path.join(dir_checkpoint, f\"ck2_{type_data}_gradients\", f'grad_{type_data}_{i}'))", "\n\nif __name__ == '__main__':\n    # noise_BItags_30sen_30tok\n    noise_file = os.path.join('data', 'conll2003', 'ner', 'noise_BItags_30sen_30tok.txt')\n    dir_checkpoint = os.path.join('checkpoints', 'conll2003', 'SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok')\n    device = 'cuda'\n    num_labels = len(get_labels())\n    type_data = \"noise\"\n    SEED = 4\n    name_checkpoint = 'epoch_2.pt' # best.pt\n\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    if not torch.cuda.is_available() and device == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if device == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n\n\n    # Load data\n    noise_dataloader = conll2003_get_dataloader(\n        file_name=noise_file,\n        batch_size=1,\n        mode='test',\n        num_workers=0\n    )\n\n    # Build model\n    model = load_bert_sequence_model(os.path.join(dir_checkpoint, name_checkpoint),num_labels=num_labels,device=device)\n    \n    # Params to get gradients\n    params = [p for p in model.parameters() if p.requires_grad][-2:]\n\n    # get gradients\n    build_gradient(\n        model = model,\n        params = params,\n        dataloader = noise_dataloader,\n        type_data = type_data\n    )"]}
{"filename": "ner_inference.py", "chunked_list": ["import torch\nimport os\nfrom models.BertSequence import load_bert_sequence_model\nfrom transformers import BertTokenizerFast\nfrom dataloaders.ner_conll2003 import get_labels\n\ndef inference_ner(sentence, path_checkpoint, num_labels, device='cuda'):\n    model = load_bert_sequence_model(path_checkpoint, num_labels, device)\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n    ids_to_labels = {i: label for i, label in enumerate(get_labels())}\n    \n    inputs = tokenizer(sentence.split(),\n                        is_split_into_words=True,\n                        return_offsets_mapping=True,\n                        padding='max_length',\n                        truncation=True,\n                        max_length=128,\n                        return_tensors=\"pt\"\n                    )\n    ids = inputs[\"input_ids\"].to(device)\n    mask = inputs[\"attention_mask\"].to(device)\n\n    outputs = model.module.predict(input_ids=ids, attention_mask=mask)\n\n    logits = outputs[0]\n    \n    active_logits = logits.view(-1, model.module.num_labels) # shape (batch_size * seq_len, num_labels)\n    flattened_predictions = torch.argmax(active_logits, axis=1) # shape (batch_size*seq_len,) - predictions at the token level\n\n    tokens = tokenizer.convert_ids_to_tokens(ids.squeeze().tolist())\n    token_predictions = [ids_to_labels[i] for i in flattened_predictions.cpu().numpy()]\n    wp_preds = list(zip(tokens, token_predictions)) # list of tuples. Each tuple = (wordpiece, prediction)\n\n    prediction = []\n    for token_pred, mapping in zip(wp_preds, inputs[\"offset_mapping\"].squeeze().tolist()):\n        #only predictions on first word pieces are important\n        if mapping[0] == 0 and mapping[1] != 0:\n            prediction.append(token_pred[1])\n        else:\n            continue\n\n    print(sentence.split())\n    print(prediction)", "\nif __name__ =='__main__':\n    sentence = \"@HuggingFace is a company based in New York, but is also has employees working in Paris\"\n    path_checkpoint = os.path.join('checkpoints', 'conll2003', 'SEED0_NER_CoNLL2003_clean_data', 'best.pt')\n    num_labels = len(get_labels())\n    inference_ner(sentence, path_checkpoint, num_labels)\n    \"\"\"\n    Result:\n    ['@HuggingFace', 'is', 'a', 'company', 'based', 'in', 'New', 'York,', 'but', 'is', 'also', 'has', 'employees', 'working', 'in', 'Paris']\n    ['B-ORG', 'O', 'O', 'O', 'O', 'O', 'B-LOC', 'I-LOC', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-LOC']\n    \"\"\""]}
{"filename": "convert_result.py", "chunked_list": ["import argparse\nimport pandas as pd\nimport numpy as np\nfrom numpy import load\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--path', required=True, help='path of result file')\n    # parser.add_argument('--data', type=str, required=True, help=\"name of dataset\")\n    parser.add_argument('--step', type=int, required=True, help=\"step of class in test data\")\n    parser.add_argument('--train', required=True, help='path of train data')\n    parser.add_argument('--test', required=True, help='path of test data')\n    opt = parser.parse_args()\n    result = load(opt.path)\n    result = pd.DataFrame(result)\n    # print(result)\n    # train_path = f\"data/{opt.data}/processed/random_noise.csv\"\n    # test_path = f\"data/{opt.data}/processed/subclass.csv\"\n    df_train = pd.read_csv(opt.train)\n    df_test = pd.read_csv(opt.test)\n    # df_train = pd.read_csv(train_path)\n    # df_test = pd.read_csv(test_path)\n    start_class = min(set(df_train['label']))\n    end_class = max(set(df_train['label']))\n    num_class = len(set(df_train['label']))\n\n    results1 = []\n    top = [0.05, 0.1, 0.15, 0.2]\n    # top = np.arange(0.05, 0.21, 0.01)\n    # top = [0.05]\n    top = [int(len(df_train) * i) for i in top]\n    n = len(df_train)\n    # print(\"Calculate by all samples\")\n    for t in top:\n        first = (df_train.iloc[np.argsort(result.sum().values)]['isFlipped'][:t] == 1).sum()\n        last = (df_train.iloc[np.argsort(result.sum().values)]['isFlipped'][-t:] == 1).sum()\n        results1.append(first/t*100)\n        # print(first/t*100, last/t*100)\n\n    print(\"OLD:\")\n    print(results1)\n    # print(\"Calculate by class\")\n    # create score for each sample\n    df_class = pd.DataFrame()\n    i = 0\n    while i< num_class:\n        class_scores = result.iloc[i*opt.step:(i+1)*opt.step + 1].sum()\n        # pd.concat([df_class, class_scores], axis=1)\n        df_class[i] = class_scores.values\n        i+=1\n    # print(df_class)\n    scores = df_class.min(axis=1).values\n    # print(scores)\n    results2 = []\n    for t in top:\n        first = (df_train.iloc[np.argsort(scores)]['isFlipped'][:t] == 1).sum()\n        last = (df_train.iloc[np.argsort(scores)]['isFlipped'][-t:] == 1).sum()\n        results2.append(first/t*100)\n        # print(first/t*100, last/t*10)\n\n    # print(results)\n    # for item in results1:\n    #     print(\"{:.2f}\".format(item), end='\\t')\n    # print()\n    # for item in results2:\n    #     print(\"{:.2f}\".format(item), end='\\t')\n    # print()\n    print(\"NEW:\")\n    print(results2)"]}
{"filename": "ner_influence.py", "chunked_list": ["import os\nimport torch\nimport tqdm\nimport numpy as np\nfrom dataloaders.ner_conll2003 import conll2003_get_dataloader, get_labels\nfrom transformers import BertTokenizerFast\nfrom torch import linalg as LA\n\nif __name__ == '__main__':\n    noise_data_path = './data/conll2003/ner/noise_BItags_30sen_30tok.txt'\n    noise_gradient_path = './checkpoints/conll2003/SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok/noise_gradients'\n\n\n    test_data_path = './data/conll2003/ner/test.txt'\n    test_gradient_path = './checkpoints/conll2003/SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok/stest_gradients'\n\n    file_result = 'results/ner_IF_SEED4_BItags_noise_dataset.txt'\n\n    batch_size = 128\n    number_of_each_class = 10\n\n    train_loader = conll2003_get_dataloader(\n        file_name=noise_data_path,\n        batch_size=batch_size,\n        mode='test',\n        num_workers=os.cpu_count(),\n        read_flipped_features=True,\n        path_gradient=noise_gradient_path\n    )\n\n    test_loader = conll2003_get_dataloader(\n        file_name=test_data_path,\n        batch_size=1,\n        mode='test',\n        num_workers=os.cpu_count(),\n        read_flipped_features=False,\n        path_gradient=test_gradient_path\n    )\n\n    # Build clean token\n    print(\"Getting clean token...\")\n    lst_gradients_clean_data = []\n    for ids_label in range(len(get_labels())):\n        print(\"Find gradient of ids label\", ids_label)\n        number_samples = 0\n        for i, sample in enumerate(test_loader):\n            # print(sample)\n            gradients = torch.as_tensor(sample[\"gradients\"][0]) # (128, 6921)\n            labels = sample[\"labels\"][0] # (128,)\n            for j, tag in enumerate(labels):\n                if tag == ids_label and number_samples < number_of_each_class:\n                    lst_gradients_clean_data.append(np.array(gradients[j]))\n                    number_samples += 1\n            if number_samples >= number_of_each_class:\n                break\n\n    # (num_of_each_class x number_class, 6921) = (num_token_clean, 6921)\n    clean_gradients = torch.as_tensor(np.array(lst_gradients_clean_data))\n        \n    f = open(file_result, \"w\")\n    # f.write(\"TOKEN,LABEL,FLIPPED,SCORE,SCORE_CLASS\\n\\n\")\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n    ids_to_labels = {i: label for i, label in enumerate(get_labels())}\n\n    for item in tqdm.tqdm(train_loader):\n        g_item = item[\"gradients\"] # (bs, 128, 6921)\n        scores = torch.tensordot(g_item, clean_gradients, dims = [[2], [1]]) #(bs, 128, num_token_clean)\n        # norm_1 = LA.norm(g_item, dim=2) # (bs, 128)\n        # norm_2 = LA.norm(clean_gradients, dim=1) # (num_token_clean)\n        # scores = scores/torch.tensordot(norm_1.unsqueeze(-1), norm_2.unsqueeze(-1), dims=[[-1], [-1]])\n\n        GD_normal = torch.sum(scores, dim=2)\n        GD_class = torch.min(torch.as_tensor(np.array([np.array(torch.sum(scores[:,:,k:(k+1)*10], dim=2)) for k in range(len(get_labels()))])), dim=0).values\n        tokens = [tokenizer.convert_ids_to_tokens(ids.tolist()) for ids in item['input_ids']]\n        \n        for token_sentence, mapping_sentence, label_sentence, flipped_sentence, score_sentence, score_class_sentence in zip(tokens, item[\"offset_mapping\"].tolist(), item['labels'].tolist(), item['flipped'].tolist(), GD_normal.tolist(), GD_class.tolist()):\n            #only predictions on first word pieces are important\n            for token, mapping, label, flipped, score, score_class in zip(token_sentence, mapping_sentence, label_sentence, flipped_sentence, score_sentence, score_class_sentence):\n                if mapping[0] == 0 and mapping[1] != 0:\n                    f.write(\"{}\\t{}\\t{}\\t{}\\t{}\\n\".format(token, ids_to_labels[label], flipped, score, score_class))\n                else:\n                    continue\n            f.write(\"\\n\")\n\n    f.close()", "if __name__ == '__main__':\n    noise_data_path = './data/conll2003/ner/noise_BItags_30sen_30tok.txt'\n    noise_gradient_path = './checkpoints/conll2003/SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok/noise_gradients'\n\n\n    test_data_path = './data/conll2003/ner/test.txt'\n    test_gradient_path = './checkpoints/conll2003/SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok/stest_gradients'\n\n    file_result = 'results/ner_IF_SEED4_BItags_noise_dataset.txt'\n\n    batch_size = 128\n    number_of_each_class = 10\n\n    train_loader = conll2003_get_dataloader(\n        file_name=noise_data_path,\n        batch_size=batch_size,\n        mode='test',\n        num_workers=os.cpu_count(),\n        read_flipped_features=True,\n        path_gradient=noise_gradient_path\n    )\n\n    test_loader = conll2003_get_dataloader(\n        file_name=test_data_path,\n        batch_size=1,\n        mode='test',\n        num_workers=os.cpu_count(),\n        read_flipped_features=False,\n        path_gradient=test_gradient_path\n    )\n\n    # Build clean token\n    print(\"Getting clean token...\")\n    lst_gradients_clean_data = []\n    for ids_label in range(len(get_labels())):\n        print(\"Find gradient of ids label\", ids_label)\n        number_samples = 0\n        for i, sample in enumerate(test_loader):\n            # print(sample)\n            gradients = torch.as_tensor(sample[\"gradients\"][0]) # (128, 6921)\n            labels = sample[\"labels\"][0] # (128,)\n            for j, tag in enumerate(labels):\n                if tag == ids_label and number_samples < number_of_each_class:\n                    lst_gradients_clean_data.append(np.array(gradients[j]))\n                    number_samples += 1\n            if number_samples >= number_of_each_class:\n                break\n\n    # (num_of_each_class x number_class, 6921) = (num_token_clean, 6921)\n    clean_gradients = torch.as_tensor(np.array(lst_gradients_clean_data))\n        \n    f = open(file_result, \"w\")\n    # f.write(\"TOKEN,LABEL,FLIPPED,SCORE,SCORE_CLASS\\n\\n\")\n    tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n    ids_to_labels = {i: label for i, label in enumerate(get_labels())}\n\n    for item in tqdm.tqdm(train_loader):\n        g_item = item[\"gradients\"] # (bs, 128, 6921)\n        scores = torch.tensordot(g_item, clean_gradients, dims = [[2], [1]]) #(bs, 128, num_token_clean)\n        # norm_1 = LA.norm(g_item, dim=2) # (bs, 128)\n        # norm_2 = LA.norm(clean_gradients, dim=1) # (num_token_clean)\n        # scores = scores/torch.tensordot(norm_1.unsqueeze(-1), norm_2.unsqueeze(-1), dims=[[-1], [-1]])\n\n        GD_normal = torch.sum(scores, dim=2)\n        GD_class = torch.min(torch.as_tensor(np.array([np.array(torch.sum(scores[:,:,k:(k+1)*10], dim=2)) for k in range(len(get_labels()))])), dim=0).values\n        tokens = [tokenizer.convert_ids_to_tokens(ids.tolist()) for ids in item['input_ids']]\n        \n        for token_sentence, mapping_sentence, label_sentence, flipped_sentence, score_sentence, score_class_sentence in zip(tokens, item[\"offset_mapping\"].tolist(), item['labels'].tolist(), item['flipped'].tolist(), GD_normal.tolist(), GD_class.tolist()):\n            #only predictions on first word pieces are important\n            for token, mapping, label, flipped, score, score_class in zip(token_sentence, mapping_sentence, label_sentence, flipped_sentence, score_sentence, score_class_sentence):\n                if mapping[0] == 0 and mapping[1] != 0:\n                    f.write(\"{}\\t{}\\t{}\\t{}\\t{}\\n\".format(token, ids_to_labels[label], flipped, score, score_class))\n                else:\n                    continue\n            f.write(\"\\n\")\n\n    f.close()", "\n\n    # for item in tqdm.tqdm(train_loader):\n    #     g_item = item[\"gradients\"] # (bs, 128, 6921)\n    #     scores = torch.tensordot(g_item, clean_gradients, dims = [[2], [1]]) #(bs, 128, num_token_clean)\n    #     GD_normal = torch.sum(scores, dim=2)\n    #     GD_class = torch.min(torch.as_tensor(np.array([np.array(torch.sum(scores[:,:,k:(k+1)*10], dim=2)) for k in range(len(get_labels()))])), dim=0).values\n    #     tokens = [tokenizer.convert_ids_to_tokens(ids.tolist()) for ids in item['input_ids']]\n        \n    #     for token_sentence, mapping_sentence, label_sentence, score_sentence, score_class_sentence in zip(tokens, item[\"offset_mapping\"].tolist(), item['labels'].tolist(), GD_normal.tolist(), GD_class.tolist()):", "        \n    #     for token_sentence, mapping_sentence, label_sentence, score_sentence, score_class_sentence in zip(tokens, item[\"offset_mapping\"].tolist(), item['labels'].tolist(), GD_normal.tolist(), GD_class.tolist()):\n    #         #only predictions on first word pieces are important\n    #         for token, mapping, label, score, score_class in zip(token_sentence, mapping_sentence, label_sentence, score_sentence, score_class_sentence):\n    #             if mapping[0] == 0 and mapping[1] != 0:\n    #                 f.write(\"{}\\t{}\\t{}\\t{}\\n\".format(token, ids_to_labels[label], score, score_class))\n    #             else:\n    #                 continue\n    #         f.write(\"\\n\")\n", "    #         f.write(\"\\n\")\n\n    # f.close()"]}
{"filename": "test.py", "chunked_list": ["import torch\nimport argparse\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nfrom baseline import ModelBase, DataBase\nfrom utils.run_train import run_train\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--model', default='cifar10net') \n    parser.add_argument('--number-classes', type=int, default=10) \n    parser.add_argument('--device', default='cuda')\n    parser.add_argument('--batch-size', type=int, default=128)\n    parser.add_argument('--num-worker', default=0)\n    parser.add_argument('--df', default='data/cifar10/processed/test.csv') \n    parser.add_argument('--type-data', default='cifar10') \n    parser.add_argument('--checkpoint', default='checkpoints/cifar10/SEED0_cifar10_cifar10net_train_knn_noise/best.pt')\n    parser.add_argument('--seed', type=int, default=0) \n    \n    opt = parser.parse_args()\n\n    SEED = opt.seed\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    if not torch.cuda.is_available() and opt.device == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if opt.device == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    # Restone model\n    model_base = ModelBase(opt.model,\n                           opt.number_classes,\n                           opt.device)\n    model_base.load_model(opt.checkpoint)\n    loss_fn = nn.CrossEntropyLoss()\n\n    # Load data\n    df = pd.read_csv(opt.df)\n    print(\"Number of samples:\", len(df))\n    data_base = DataBase(opt.type_data)\n    dataloader = data_base.get_dataloader(\n        df=df,\n        batch_size=opt.batch_size,\n        mode='test',\n        num_workers=opt.num_worker\n    )\n\n    metrics = run_train(\n            model=model_base.model,\n            dataloader=dataloader,\n            optimizer=None,\n            criterion=loss_fn,\n            func_inference=model_base.inference,\n            mode='test'\n        )\n    print(\"Metrics: {}\".format(metrics))", "\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--model', default='cifar10net') \n    parser.add_argument('--number-classes', type=int, default=10) \n    parser.add_argument('--device', default='cuda')\n    parser.add_argument('--batch-size', type=int, default=128)\n    parser.add_argument('--num-worker', default=0)\n    parser.add_argument('--df', default='data/cifar10/processed/test.csv') \n    parser.add_argument('--type-data', default='cifar10') \n    parser.add_argument('--checkpoint', default='checkpoints/cifar10/SEED0_cifar10_cifar10net_train_knn_noise/best.pt')\n    parser.add_argument('--seed', type=int, default=0) \n    \n    opt = parser.parse_args()\n\n    SEED = opt.seed\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n\n    if not torch.cuda.is_available() and opt.device == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if opt.device == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    # Restone model\n    model_base = ModelBase(opt.model,\n                           opt.number_classes,\n                           opt.device)\n    model_base.load_model(opt.checkpoint)\n    loss_fn = nn.CrossEntropyLoss()\n\n    # Load data\n    df = pd.read_csv(opt.df)\n    print(\"Number of samples:\", len(df))\n    data_base = DataBase(opt.type_data)\n    dataloader = data_base.get_dataloader(\n        df=df,\n        batch_size=opt.batch_size,\n        mode='test',\n        num_workers=opt.num_worker\n    )\n\n    metrics = run_train(\n            model=model_base.model,\n            dataloader=dataloader,\n            optimizer=None,\n            criterion=loss_fn,\n            func_inference=model_base.inference,\n            mode='test'\n        )\n    print(\"Metrics: {}\".format(metrics))"]}
{"filename": "ner_train.py", "chunked_list": ["import yaml\nimport os\nimport argparse\nimport torch\nimport wandb\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nimport torch.optim as optim\nimport tqdm", "import torch.optim as optim\nimport tqdm\nfrom models.BertSequence import build_bert_sequence_model, load_bert_sequence_model\nfrom dataloaders.ner_conll2003 import conll2003_get_dataloader\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score\nfrom dataloaders.ner_conll2003 import get_labels\n\ndef train(model, dataloader, optimizer, mode='train'):\n    epoch_loss = 0.0\n    preds, labs = [], []\n    \n    if mode == 'train':\n        model.train()\n        optimizer.zero_grad()\n    else:\n        model.eval()\n\n    for batch in tqdm.tqdm(dataloader):\n        ids = batch['input_ids'].to(device, dtype = torch.long)\n        mask = batch['attention_mask'].to(device, dtype = torch.long)\n        labels = batch['labels'].to(device, dtype = torch.long)\n\n        loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels)\n        \n        # gradient clipping\n        # torch.nn.utils.clip_grad_norm_(\n        #     parameters=model.parameters(), max_norm=MAX_GRAD_NORM\n        # )\n        \n        # backward pass\n        if mode == 'train':\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n\n        epoch_loss += loss.item()\n        # compute training accuracy\n        flattened_targets = labels.view(-1) # shape (batch_size * seq_len,)\n        active_logits = tr_logits.view(-1, model.module.num_labels) # shape (batch_size * seq_len, num_labels)\n        flattened_predictions = torch.argmax(active_logits, axis=1) # shape (batch_size * seq_len,)\n        # only compute accuracy at active labels\n        active_accuracy = labels.view(-1) != -100 # shape (batch_size, seq_len)\n        labels = torch.masked_select(flattened_targets, active_accuracy)\n        predictions = torch.masked_select(flattened_predictions, active_accuracy)\n\n        labels = labels.cpu().detach().numpy()\n        predictions = predictions.cpu().detach().numpy()\n\n        preds.extend(predictions)\n        labs.extend(labels)\n\n    # print(classification_report(labs, preds))\n    metrics = {\"{}_acc\".format(mode): accuracy_score(labs, preds),\n               \"{}_f1\".format(mode): f1_score(labs, preds, average=\"weighted\"),\n               \"{}_precision\".format(mode):  precision_score(labs, preds, average=\"weighted\"),\n               \"{}_recall\".format(mode): recall_score(labs, preds, average=\"weighted\"),\n               \"{}_loss\".format(mode): epoch_loss/len(dataloader)}\n\n    return metrics, preds, labs", "def train(model, dataloader, optimizer, mode='train'):\n    epoch_loss = 0.0\n    preds, labs = [], []\n    \n    if mode == 'train':\n        model.train()\n        optimizer.zero_grad()\n    else:\n        model.eval()\n\n    for batch in tqdm.tqdm(dataloader):\n        ids = batch['input_ids'].to(device, dtype = torch.long)\n        mask = batch['attention_mask'].to(device, dtype = torch.long)\n        labels = batch['labels'].to(device, dtype = torch.long)\n\n        loss, tr_logits = model(input_ids=ids, attention_mask=mask, labels=labels)\n        \n        # gradient clipping\n        # torch.nn.utils.clip_grad_norm_(\n        #     parameters=model.parameters(), max_norm=MAX_GRAD_NORM\n        # )\n        \n        # backward pass\n        if mode == 'train':\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n\n        epoch_loss += loss.item()\n        # compute training accuracy\n        flattened_targets = labels.view(-1) # shape (batch_size * seq_len,)\n        active_logits = tr_logits.view(-1, model.module.num_labels) # shape (batch_size * seq_len, num_labels)\n        flattened_predictions = torch.argmax(active_logits, axis=1) # shape (batch_size * seq_len,)\n        # only compute accuracy at active labels\n        active_accuracy = labels.view(-1) != -100 # shape (batch_size, seq_len)\n        labels = torch.masked_select(flattened_targets, active_accuracy)\n        predictions = torch.masked_select(flattened_predictions, active_accuracy)\n\n        labels = labels.cpu().detach().numpy()\n        predictions = predictions.cpu().detach().numpy()\n\n        preds.extend(predictions)\n        labs.extend(labels)\n\n    # print(classification_report(labs, preds))\n    metrics = {\"{}_acc\".format(mode): accuracy_score(labs, preds),\n               \"{}_f1\".format(mode): f1_score(labs, preds, average=\"weighted\"),\n               \"{}_precision\".format(mode):  precision_score(labs, preds, average=\"weighted\"),\n               \"{}_recall\".format(mode): recall_score(labs, preds, average=\"weighted\"),\n               \"{}_loss\".format(mode): epoch_loss/len(dataloader)}\n\n    return metrics, preds, labs", "\n\nif __name__ == '__main__':\n    train_file = os.path.join('data', 'conll2003', 'ner', 'noise_BItags_30sen_30tok.txt')\n    val_file = os.path.join('data', 'conll2003', 'ner', 'valid.txt')\n    dir_checkpoint = os.path.join('checkpoints', 'conll2003', 'SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok')\n    run_name = 'SEED4_NER_CoNLL2003_noise_BItags_30sen_30tok'\n    batch_size = 64\n    device = 'cuda'\n    num_labels = len(get_labels())\n    num_epochs = 20\n    SEED = 4\n    name_project = \"NER-CoNLL2003\"\n    learning_rate = 5e-5\n\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    torch.cuda.manual_seed(SEED)\n    \n    if not os.path.isdir(dir_checkpoint):\n        print(f\"Directory {dir_checkpoint} does not exist\")\n        os.makedirs(dir_checkpoint)\n        print(f\"Created {dir_checkpoint}\")\n\n    if not torch.cuda.is_available() and device == 'cuda':\n        print('Your device don\\'t have cuda, please check or select cpu and retraining')\n        exit(0)\n\n    if device == 'cuda':\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n    if torch.cuda.device_count() > 1:\n        print(\"Let's use\", torch.cuda.device_count(), \"GPUs!\")\n\n\n    # Load data\n    train_dataloader = conll2003_get_dataloader(\n        file_name=train_file,\n        batch_size=batch_size,\n        mode='train',\n        num_workers=32\n    )\n    val_dataloader = conll2003_get_dataloader(\n        file_name=val_file,\n        batch_size=batch_size,\n        mode='test',\n        num_workers=32\n    )\n    # Build model\n    model = build_bert_sequence_model(num_labels=num_labels,device=device)\n\n    optimizer = optim.AdamW(model.parameters(), lr=learning_rate, betas=(0.9, 0.999))\n\n    # config best\n    wandb.init(project=name_project, name= run_name)\n    wandb.config = {\n        \"seed\": SEED,\n        \"train_file\": train_file,\n        \"val_file\": val_file,\n        \"num_labels\": num_labels,\n        \"learning_rate\": learning_rate,\n        \"epochs\": num_epochs,\n        \"batch_size\": batch_size\n    }\n\n    best_valid_f1 = (-1.0) * float(\"Inf\")\n    best_epoch = 0\n\n    for epoch in range(num_epochs):\n        print(f\"Epoch: {epoch+1}/{num_epochs}\")\n        train_metrics, train_preds, train_labs = train(model, train_dataloader, optimizer, mode='train')\n        val_metrics, val_preds, val_labs = train(model, val_dataloader, optimizer, mode='val')\n\n        print(\"Train metricc:\", train_metrics)\n        print(\"Val metrics\", val_metrics)\n\n        torch.save(model.state_dict(), os.path.join(dir_checkpoint, f'epoch_{epoch+1}.pt'))\n\n        if best_valid_f1 < val_metrics[\"val_f1\"]:\n            best_valid_f1 = val_metrics[\"val_f1\"]\n            torch.save(model.state_dict(), os.path.join(dir_checkpoint, f'best.pt'))\n            f = open(os.path.join(dir_checkpoint, f'best_epoch.txt'), \"w\")\n            f.write(str(epoch+1))\n            f.close()\n            print(f\"Best model saved at epoch {epoch+1}\")\n\n            print(\"Classification Report on Train Dataset:\")\n            print(classification_report(train_labs, train_preds))\n            print(\"Classification Report on Valid Dataset:\")\n            print(classification_report(val_labs, val_preds))\n        \n        train_metrics.update(val_metrics)\n        wandb.log(train_metrics)\n        wandb.watch(model)\n\n    print(f'Finished training')", "        \n"]}
{"filename": "dataloaders/imdb.py", "chunked_list": ["import torch\nfrom torch.utils.data import Dataset\nfrom transformers import BertTokenizer\nfrom torch.utils.data import DataLoader\nfrom logging import raiseExceptions\n\nclass IMDBDataset(Dataset):\n    def __init__(self, df, max_len=256):\n        super().__init__()\n        self.df = df\n        self.max_len = max_len\n        self.tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\n    def __len__(self):\n        return len(self.df)\n\n    def _get_input_data(self, row):\n        text = row['review']\n        \n        tokens_text = self.tokenizer.tokenize(text)\n\n        encode = self.tokenizer.convert_tokens_to_ids(tokens_text)\n        if len(encode) > self.max_len - 2:\n            encode = encode[:self.max_len - 2]\n        # build ids\n        ids = [self.tokenizer.cls_token_id] + encode + [self.tokenizer.sep_token_id]\n        # token type ids\n        token_type_ids = [0] + [0] * len(encode) + [0]\n        # adding PAD token\n        pad_len = self.max_len - len(ids)\n        if pad_len > 0:\n            ids += [self.tokenizer.pad_token_id] * pad_len\n            token_type_ids += [self.tokenizer.pad_token_id] * pad_len\n        # convert to tensor\n        ids = torch.tensor(ids)\n        token_type_ids = torch.tensor(token_type_ids)\n        # Attention mask\n        attention_mask = torch.where(ids!=0, torch.tensor(1), torch.tensor(0))\n\n        return ids, attention_mask, token_type_ids\n    \n    def __getitem__(self, index):\n        data = {}\n        row = self.df.iloc[index]\n        ids, attention_mask, token_type_ids = self._get_input_data(row)\n        label = int(row['label'])\n\n        data['ids'] = ids\n        data['attention_mask'] = attention_mask\n        data['token_type_ids'] = token_type_ids\n        data['label'] = label\n\n        return data", "\n\n\ndef imdb_get_dataloader(df, batch_size, mode='train', num_workers=0):\n    \"\"\" Get dataloader of pandas dataframe\n    Args:\n        df: Pandas Dataframe\n        batch_size: batch size for dataloader\n        mode (str, optional): ['train', 'test']. Defaults to 'train'.\n        num_worker: number of worker for dataloader\n    \n    Return:\n        dataloader: of DataFrame df\n    \"\"\"\n    if mode == 'train':\n        loader = DataLoader(\n            IMDBDataset(df),\n            batch_size=batch_size,\n            shuffle=True,\n            num_workers=num_workers\n        )\n        return loader\n\n    elif mode == 'test':\n        loader = DataLoader(\n            IMDBDataset(df),\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers\n        )\n        return loader\n\n    else:\n        return raiseExceptions(\"Mode does not support\")", "\n"]}
{"filename": "dataloaders/snli.py", "chunked_list": ["import torch\nimport pandas as pd\nfrom torch.utils.data import Dataset\nfrom transformers import BertTokenizer\nfrom torch.utils.data import DataLoader\nfrom logging import raiseExceptions\n\nclass SNLIDataset(Dataset):\n    def __init__(self, df, max_len = 128):\n        super().__init__()\n        self.df = df\n        self.max_len = max_len\n        # self.label = {'entailment': 0, 'contradiction': 1, 'neutral': 2}\n        self.tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n        \n\n    def __len__(self):\n        return len(self.df)\n\n    def _get_input_data(self, row):\n        \"\"\"\n        T\u1ea1o sample input cho 1 d\u00f2ng d\u1eef li\u1ec7u\n        [CLS] Sentence 1 [SEP] Sentence2 [SEP] [PAD] ...\n        \n        --> Example:\n        Input tokens: [ \u2018[CLS]\u2019,  \u2018Man\u2019,  \u2018is\u2019,  \u2018wearing\u2019,  \u2018blue\u2019,  \u2018jeans\u2019,  \u2018.\u2019,  \u2018[SEP]\u2019,  \u2018Man\u2019,  \u2018is\u2019,  \u2018wearing\u2019,  \u2018red\u2019,  \u2018jeans\u2019, \u2018.\u2019,   \u2018[SEP]\u2019 ]\n        Attention_mask: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        Token type ids: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\n        \"\"\"\n\n        tokens_sentence1 = self.tokenizer.tokenize(row['sentence1'])\n        tokens_sentence2 = self.tokenizer.tokenize(row['sentence2'])\n\n        encode1 = self.tokenizer.convert_tokens_to_ids(tokens_sentence1)\n        encode2 = self.tokenizer.convert_tokens_to_ids(tokens_sentence2)\n\n        # build ids\n        ids = [self.tokenizer.cls_token_id] + encode1 + [self.tokenizer.sep_token_id] + encode2 + [self.tokenizer.sep_token_id]\n\n        # Token type ids\n        token_type_ids = [0] + [0]*len(encode1) + [0] + [1]*len(encode2) + [1]\n        \n        # Th\u00eam c\u00e1c token PAD\n        pad_len = self.max_len - len(ids)\n        if pad_len > 0:\n            ids += [self.tokenizer.pad_token_id] * pad_len\n            token_type_ids += [self.tokenizer.pad_token_id] * pad_len\n\n        # Convert to tensor\n        ids = torch.tensor(ids)\n        token_type_ids = torch.tensor(token_type_ids)\n        # Attention mask\n        attention_mask = torch.where(ids!=0, torch.tensor(1), torch.tensor(0))\n\n        return ids, attention_mask, token_type_ids\n\n\n    def __getitem__(self, index):\n        data = {}\n        row = self.df.iloc[index]\n        ids, attention_mask, token_type_ids = self._get_input_data(row)\n        label = int(row['label'])\n\n        data['ids'] = ids\n        data['attention_mask'] = attention_mask\n        data['token_type_ids'] = token_type_ids\n        data['label'] = label\n\n        return data", "\ndef snli_get_dataloader(df, batch_size, mode='train', num_workers=0):\n    \"\"\" Get dataloader of pandas dataframe\n\n    Args:\n        df: Pandas Dataframe\n        batch_size: batch size for dataloader\n        mode (str, optional): ['train', 'test']. Defaults to 'train'.\n        num_worker: number of worker for dataloader\n    \n    Return:\n        dataloader: of DataFrame df\n    \"\"\"\n    if mode == 'train':\n        loader = DataLoader(\n            SNLIDataset(df),\n            batch_size=batch_size,\n            shuffle=True,\n            num_workers=num_workers\n        )\n        return loader\n    elif mode == 'test':\n        loader = DataLoader(\n            SNLIDataset(df),\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers\n        )\n        return loader\n    else:\n        return raiseExceptions(\"Mode does not support\")"]}
{"filename": "dataloaders/ner_conll2003.py", "chunked_list": ["import torch\nfrom torch.utils.data import Dataset\nfrom transformers import BertTokenizerFast\nimport numpy as np\nfrom torch.utils.data import DataLoader\nfrom logging import raiseExceptions\nimport os\nimport glob\n\ndef get_labels():\n    return [\"O\", \"B-MISC\", \"I-MISC\",  \"B-PER\", \"I-PER\", \"B-ORG\", \"I-ORG\", \"B-LOC\", \"I-LOC\"]", "\ndef get_labels():\n    return [\"O\", \"B-MISC\", \"I-MISC\",  \"B-PER\", \"I-PER\", \"B-ORG\", \"I-ORG\", \"B-LOC\", \"I-LOC\"]\n\n\ndef load_data_from_file(file_name, read_flipped_features):\n    # you need create a file dataset as follow in a line: [required]Word [option]tag_POS_1 [option]tag_POS_2 [option]is_flip_label [option]tag_NER_origin [required]tag_NER\n    f = open(file_name, \"r\")\n    examples = []\n    sentence = []\n    label = []\n    flipped = []\n    for line in f:\n        if len(line) == 0 or line.startswith('-DOCSTART') or line[0] == \"\\n\":\n            # if the end of sentence, we append this sentence to examples and reset all of lists\n            if len(sentence) > 0:\n                examples.append((sentence, label, flipped))\n                sentence = []\n                label = []\n                flipped = []\n            continue\n        splits = line.split(' ')\n        sentence.append(splits[0])\n        # label.append(convert_label_to_single(splits[-1][:-1])) # convert label\n        label.append(splits[-1][:-1])\n        if read_flipped_features:\n            flipped.append(splits[-2])\n    \n    if len(sentence) > 0:\n        # convert example to InputFeature object\n        examples.append((sentence, label, flipped))\n        sentence = []\n        label = []\n\n    return examples", "\n\nclass CoNLL2003(Dataset):\n    def __init__(self, file_name = None, read_flipped_features = False, max_len=128, path_gradient=None):\n        super().__init__()\n        self.read_flipped_features = read_flipped_features\n        self.examples = load_data_from_file(file_name, read_flipped_features)\n        self.max_len = max_len\n        self.tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n        self.labels_to_ids = {label: i for i, label in enumerate(get_labels())}\n        self.ids_to_labels = {i: label for i, label in enumerate(get_labels())}\n        self.path_gradient = path_gradient\n\n    def __len__(self):\n        return len(self.examples)\n\n    def __getitem__(self, index):\n        # step 1: get the sentence and word labels\n        sentence = self.examples[index][0]\n        word_labels = self.examples[index][1]\n        flipped = self.examples[index][2]\n        # print(sentence, word_labels)\n\n        if self.path_gradient != None:\n            g_i = torch.load(glob.glob(os.path.join(self.path_gradient + f'/*_{index}'))[0]) # g_i [list]: (128,)\n            g_i = np.array([np.concatenate([np.reshape(w, -1) for w in token]) for token in g_i]) # np.narray (128, 6921)\n\n        # step 2: use tokenizer to encode sentence (includes padding/truncation up to max length)\n        # BertTokenizerFast provides a handy \"return_offsets_mapping\" functionality for individual tokens\n        encoding = self.tokenizer(sentence,\n                                  is_split_into_words=True,\n                                  return_offsets_mapping=True,\n                                  padding='max_length',\n                                  truncation=True,\n                                  max_length=self.max_len\n                                  )\n\n        # step 3: create token labels only for first word pieces of each tokenized word\n        labels = [self.labels_to_ids[label] for label in word_labels]\n\n        # code based on https://huggingface.co/transformers/custom_datasets.html#tok-ner\n        # create an empty array of -100 of length max_length\n        # Word pieces that should be ignored have a label of -100 (which is the default ignore_index of PyTorch's CrossEntropyLoss).\n        encoded_labels = np.ones(len(encoding[\"offset_mapping\"]), dtype=int) * -100\n        if self.read_flipped_features:\n            encoded_flipped = np.ones(len(encoding[\"offset_mapping\"]), dtype=int) * -100\n\n        # set only labels whose first offset position is 0 and the second is not 0\n        i = 0\n        for idx, mapping in enumerate(encoding[\"offset_mapping\"]):\n            if mapping[0] == 0 and mapping[1] != 0:\n                # overwrite label\n                encoded_labels[idx] = labels[i]\n                if self.read_flipped_features:\n                    encoded_flipped[idx] = flipped[i]\n                i += 1\n\n        # step 4: turn everything into PyTorch tensors\n        item = {key: torch.as_tensor(val) for key, val in encoding.items()}\n        item['labels'] = torch.as_tensor(encoded_labels) #(bs, 128)\n        if self.read_flipped_features:\n            item['flipped'] = torch.as_tensor(encoded_flipped)\n        if self.path_gradient != None:\n            item['gradients'] = torch.as_tensor(g_i) # (bs, 128, 6921)\n        # print(item)\n\n        return item", "\n\n\ndef conll2003_get_dataloader(file_name, batch_size, mode='train', read_flipped_features = False, num_workers=0, path_gradient=None):\n    if mode == 'train':\n        loader = DataLoader(\n            CoNLL2003(file_name, read_flipped_features, path_gradient=path_gradient),\n            batch_size=batch_size,\n            shuffle=True,\n            num_workers=num_workers,\n            pin_memory=True\n        )\n        return loader\n\n    elif mode == 'test':\n        loader = DataLoader(\n            CoNLL2003(file_name, read_flipped_features, path_gradient=path_gradient),\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers,\n            pin_memory=True\n        )\n        return loader\n\n    else:\n        return raiseExceptions(\"Mode does not support\")", "\n\nif __name__ == '__main__':\n    file_name = './data/conll2003/ner/noise_30sentence_30token.txt'\n    path_gradient = 'checkpoints/conll2003/SEED0_NER_CoNLL2003_noise_data_30sentence_30token/noise_gradients'\n    dataloader = conll2003_get_dataloader(file_name, batch_size=1, mode='test', read_flipped_features = True, path_gradient=path_gradient)\n    for i, data in enumerate(dataloader):\n        # print(data[\"flipped\"])\n        # print(data[\"labels\"])15756MiB\n        print(data)\n        print(data['gradients'].size())\n        print(data['labels'].size())\n        print('-'*50)\n        if  i == 3:\n            break", "    # data = CoNLL2003(file_name)\n    # # data[1]\n    # tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')\n    # for i in [4]:\n    #     for token, label in zip(tokenizer.convert_ids_to_tokens(data[i][\"input_ids\"]), data[i][\"labels\"]):\n    #         print('{0:10}  {1}'.format(token, label))\n    #     print('-'*20)\n    # # pass\n", ""]}
{"filename": "dataloaders/bigclone.py", "chunked_list": ["import random\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nfrom transformers import RobertaTokenizer\nimport json\nimport torch\nimport tqdm\nfrom logging import raiseExceptions\nimport multiprocessing\n", "import multiprocessing\n\n\ndef get_example(item):\n    url1, url2, label, tokenizer, block_size, cache, url_to_code = item\n    if url1 in cache:\n        code1 = cache[url1].copy()\n    else:\n        try:\n            code = ' '.join(url_to_code[url1].split())\n        except:\n            code = \"\"\n        code1 = tokenizer.tokenize(code)\n    if url2 in cache:\n        code2 = cache[url2].copy()\n    else:\n        try:\n            code = ' '.join(url_to_code[url2].split())\n        except:\n            code = \"\"\n        code2 = tokenizer.tokenize(code)\n\n    return convert_examples_to_features(code1, code2, label, url1, url2, tokenizer, block_size)", "\n\nclass InputFeatures(object):\n    \"\"\"A single training/test features for a example.\"\"\"\n\n    def __init__(self,\n                 input_tokens,\n                 input_ids,\n                 label,\n                 url1,\n                 url2\n\n                 ):\n        self.input_tokens = input_tokens\n        self.input_ids = input_ids\n        self.label = label\n        self.url1 = url1\n        self.url2 = url2", "\n\ndef convert_examples_to_features(code1_tokens, code2_tokens, label, url1, url2, tokenizer, block_size):\n    # source\n    code1_tokens = code1_tokens[:block_size-2]\n    code1_tokens = [tokenizer.cls_token]+code1_tokens+[tokenizer.sep_token]\n    code2_tokens = code2_tokens[:block_size-2]\n    code2_tokens = [tokenizer.cls_token]+code2_tokens+[tokenizer.sep_token]\n\n    code1_ids = tokenizer.convert_tokens_to_ids(code1_tokens)\n    padding_length = block_size - len(code1_ids)\n    code1_ids += [tokenizer.pad_token_id]*padding_length\n\n    code2_ids = tokenizer.convert_tokens_to_ids(code2_tokens)\n    padding_length = block_size - len(code2_ids)\n    code2_ids += [tokenizer.pad_token_id]*padding_length\n\n    source_tokens = code1_tokens+code2_tokens\n    source_ids = code1_ids+code2_ids\n    return InputFeatures(source_tokens, source_ids, label, url1, url2)", "\nclass BigCloneDataset(Dataset):\n    def __init__(self, df, file_data_json, block_size = 400):\n        tokenizer = RobertaTokenizer.from_pretrained(\"roberta-base\",\n                                                     do_lower_case=False,\n                                                     cache_dir=None)\n        self.examples = []\n        url_to_code = {}\n        with open(file_data_json) as f:\n            for line in f:\n                line = line.strip()\n                js = json.loads(line)\n                url_to_code[js['idx']] = js['func']\n        data = []\n        cache = {}\n        for index, line in df.iterrows():\n            url1, url2, label = str(line['url1']), str(line['url2']), line['label']\n            if url1 not in url_to_code or url2 not in url_to_code:\n                continue\n            if label == '0':\n                label = 0\n            if label == '1':\n                label == 1\n            data.append((url1, url2, label, tokenizer, block_size, cache, url_to_code))\n        with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:\n            self.examples = pool.map(get_example, tqdm.tqdm(data, total=len(data)))\n        \n    def __len__(self):\n        return len(self.examples)\n\n    def __getitem__(self, item):\n        return torch.tensor(self.examples[item].input_ids), torch.tensor(self.examples[item].label)", "\ndef bigClone_get_dataloader(df, batch_size, mode='train', num_workers=0):\n    \"\"\" Get dataloader of pandas dataframe\n    Args:\n        df: Pandas Dataframe\n        batch_size: batch size for dataloader\n        mode (str, optional): ['train', 'test']. Defaults to 'train'.\n        num_worker: number of worker for dataloader\n\n    Return:\n        dataloader: of DataFrame df\n    \"\"\"\n    file_data_json = 'data/bigclone/dataset/data.jsonl'\n    if mode == 'train':\n        loader = DataLoader(\n            BigCloneDataset(df, file_data_json),\n            batch_size=batch_size,\n            shuffle=True,\n            num_workers=num_workers,\n            pin_memory=True\n        )\n        return loader\n\n    elif mode == 'test':\n        loader = DataLoader(\n            BigCloneDataset(df, file_data_json),\n            batch_size=batch_size,\n            shuffle=False,\n            num_workers=num_workers,\n            pin_memory=True\n        )\n        return loader\n\n    else:\n        return raiseExceptions(\"Mode does not support\")", ""]}
{"filename": "utils/predict.py", "chunked_list": ["import torch\nimport tqdm\n\n\ndef predict(model, dataloader, func_inference):\n    \"\"\" Predict and return a list of results on a data\n\n    Args:\n        model: Pytorch model\n        dataloader: Dataloader of data\n        func_inference (function): funtions that inference of model\n\n    Returns:\n        y_true: label of samples\n        y_pred: prediction of model on dataloader\n    \"\"\"\n    y_pred = []\n    y_true = []\n    model.eval()\n    with torch.no_grad():\n        for data in tqdm.tqdm(dataloader):\n            predictions, labels = func_inference(data)\n            y_pred.extend(predictions.tolist())\n            y_true.extend(labels.tolist())\n    return y_true, y_pred", ""]}
{"filename": "utils/create_unbalance_noise.py", "chunked_list": ["import pandas as pd\nimport numpy as np\nimport argparse\nimport random\n\n# create noise to a class\nchoose_label = 0\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--percent', type=float, default=0.2)\n    parser.add_argument('--data', required=True, help=\"Name of dataset\")\n    parser.add_argument('--seed', type=int, default=0)\n    parser.add_argument('--filename', type=str, default='unbalance_noise')\n    opt = parser.parse_args()\n\n    np.random.seed(opt.seed)\n    random.seed(opt.seed)\n\n    df = pd.read_csv(f\"data/{opt.data}/processed/train.csv\")\n    start_label = min(set(df['label']))\n    end_label = max(set(df['label']))\n    df['isFlipped'] = [0] * len(df)\n    df['originLabel'] = df['label']\n    number_change = int(len(df)*opt.percent)\n    indexes_change = []\n\n    while len(indexes_change) < number_change:\n        ind = random.choice(np.arange(0, len(df)))\n        if ind not in indexes_change and df.iloc[ind]['label'] != choose_label:\n            indexes_change.append(ind)\n\n    label_origin = df.loc[indexes_change, 'originLabel'].tolist()\n\n    df.loc[indexes_change, 'label'] = choose_label\n    df.loc[indexes_change, 'isFlipped'] = 1\n\n    print(\"Flipped: {}/{} samples\".format(len(indexes_change), len(df)))\n    df.to_csv(f\"data/{opt.data}/processed/{opt.filename}.csv\", index=False)", "if __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--percent', type=float, default=0.2)\n    parser.add_argument('--data', required=True, help=\"Name of dataset\")\n    parser.add_argument('--seed', type=int, default=0)\n    parser.add_argument('--filename', type=str, default='unbalance_noise')\n    opt = parser.parse_args()\n\n    np.random.seed(opt.seed)\n    random.seed(opt.seed)\n\n    df = pd.read_csv(f\"data/{opt.data}/processed/train.csv\")\n    start_label = min(set(df['label']))\n    end_label = max(set(df['label']))\n    df['isFlipped'] = [0] * len(df)\n    df['originLabel'] = df['label']\n    number_change = int(len(df)*opt.percent)\n    indexes_change = []\n\n    while len(indexes_change) < number_change:\n        ind = random.choice(np.arange(0, len(df)))\n        if ind not in indexes_change and df.iloc[ind]['label'] != choose_label:\n            indexes_change.append(ind)\n\n    label_origin = df.loc[indexes_change, 'originLabel'].tolist()\n\n    df.loc[indexes_change, 'label'] = choose_label\n    df.loc[indexes_change, 'isFlipped'] = 1\n\n    print(\"Flipped: {}/{} samples\".format(len(indexes_change), len(df)))\n    df.to_csv(f\"data/{opt.data}/processed/{opt.filename}.csv\", index=False)", ""]}
{"filename": "utils/create_subclass.py", "chunked_list": ["import pandas as pd\nimport argparse\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data', type=str, required=True, help='name of dataset')\n    parser.add_argument('--samples', type=int, default=10)\n    parser.add_argument('--seed', type=int, default=0)\n    parser.add_argument('--filename', type=str, default='subclass')\n    opt = parser.parse_args()\n\n    data = pd.read_csv(f\"data/{opt.data}/processed/val.csv\")\n    min_label = min(set(data['label']))\n    max_label = max(set(data['label']))\n    result = pd.DataFrame()\n    for label in range(min_label, max_label + 1):\n        label_data = data[data['label'] == label]\n        result = result.append(label_data.sample(n=opt.samples, random_state=opt.seed))\n    result.reset_index(inplace=True, drop=True)\n    print(result)\n    result.to_csv(f\"data/{opt.data}/processed/subclass/{opt.filename}.csv\", index=False)", ""]}
{"filename": "utils/create_random_noise.py", "chunked_list": ["import pandas as pd\nimport numpy as np\nimport argparse\nimport random\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--percent', type=float, default=0.2)\n    parser.add_argument('--data', required=True, help=\"Name of dataset\")\n    parser.add_argument('--seed', type=int, default=0)\n    parser.add_argument('--filename', type=str, default='random_noise')\n    opt = parser.parse_args()\n\n    np.random.seed(opt.seed)\n    random.seed(opt.seed)\n\n    df = pd.read_csv(f\"data/{opt.data}/processed/train.csv\")\n    start_label = min(set(df['label']))\n    end_label = max(set(df['label']))\n    df['isFlipped'] = [0] * len(df)\n    df['originLabel'] = df['label']\n    number_change = int(len(df)*opt.percent)\n    indexes_change = []\n\n    while len(indexes_change) < number_change:\n        ind = random.choice(np.arange(0, len(df)))\n        if ind not in indexes_change:\n            indexes_change.append(ind)\n\n    label_origin = df.loc[indexes_change, 'originLabel'].tolist()\n\n    label_new = np.random.randint(start_label, end_label + 1, size=int((len(df)*opt.percent)),)\n\n    for i in range(len(label_origin)):\n        if label_origin[i] == label_new[i]:\n            l = label_origin[i]\n            while l == label_origin[i]:\n                l = np.random.randint(start_label, end_label+1)\n            label_new[i] = l\n\n    df.loc[indexes_change, 'label'] = label_new\n    df.loc[indexes_change, 'isFlipped'] = 1\n\n    print(\"Flipped: {}/{} samples\".format(len(indexes_change), len(df)))\n    df.to_csv(f\"data/{opt.data}/processed/{opt.filename}.csv\", index=False)", ""]}
{"filename": "utils/run_train.py", "chunked_list": ["import tqdm\nimport torch\nfrom sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score\n\n\ndef run_train(model, dataloader, optimizer, criterion, func_inference, mode='train'):\n    \"\"\" Train function for model\n\n    Args:\n        model: model of ModelBase\n        dataloader: dataloader of data\n        optimizer: optimizer to optimization\n        criterion: Cross entropy loss function\n        func_inference (function): funtions that inference of model\n        mode (str, optional): ['train', 'val']. Defaults to 'train'.\n\n    Returns:\n        epoch_loss: average loss of epoch\n        epoch_acc: average accuracy of epoch\n    \"\"\"\n\n    epoch_loss = 0.0\n    preds, labs = [], []\n    \n    if mode == 'train':\n        model.train()\n        optimizer.zero_grad()\n    else:\n        model.eval()\n\n    for data in tqdm.tqdm(dataloader):\n        predictions, labels = func_inference(data)\n        loss = criterion(predictions, labels)\n\n        if mode == 'train':\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n\n        epoch_loss += loss.item()\n\n        predictions = torch.max(torch.softmax(\n            predictions, dim=1), dim=1).indices\n        labels = labels.cpu().detach().numpy()\n        predictions = predictions.cpu().detach().numpy()\n        preds.extend(predictions)\n        labs.extend(labels)\n\n    # print(classification_report(labs, preds))\n    metrics = {\"{}_acc\".format(mode): accuracy_score(labs, preds),\n               \"{}_f1\".format(mode): f1_score(labs, preds, average=\"weighted\"),\n               \"{}_precision\".format(mode):  precision_score(labs, preds, average=\"weighted\"),\n               \"{}_recall\".format(mode): recall_score(labs, preds, average=\"weighted\"),\n               \"{}_loss\".format(mode): epoch_loss/len(dataloader)}\n\n    return metrics", ""]}
{"filename": "models/BertClassifier.py", "chunked_list": ["import torch.nn as nn\nfrom transformers import BertConfig, BertModel\nimport torch\n\nclass BertClassifier(nn.Module):\n    def __init__(self, output):\n        super().__init__()\n        config = BertConfig.from_pretrained(\"bert-base-uncased\")\n        self.bert = BertModel.from_pretrained(\n            'bert-base-uncased',\n            config=config\n        )\n        self.dropout = nn.Dropout(0.5)\n        self.fc = nn.Linear(config.hidden_size, output)\n        nn.init.normal_(self.fc.weight, std=0.2)\n        nn.init.normal_(self.fc.bias, 0)\n\n    def forward(self, input_ids, attention_mask, token_type_ids):\n        _, embedded = self.bert(input_ids, attention_mask, token_type_ids)\n        x = self.dropout(embedded)\n        out = self.fc(x)\n        return out\n\n    def _get_feature(self, input_ids, attention_mask, token_type_ids):\n        _, embedded = self.bert(input_ids, attention_mask, token_type_ids)\n        return embedded.squeeze(0) # (B, 512) --> (512)", "\n\ndef load_bert_model(path, number_classes, device):\n    model = BertClassifier(output=number_classes)\n    model = nn.DataParallel(model)\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    return model\n\ndef build_bert_model(number_classes, device):\n    model = BertClassifier(output=number_classes)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model", "\ndef build_bert_model(number_classes, device):\n    model = BertClassifier(output=number_classes)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model\n"]}
{"filename": "models/sequence_modeling_bert.py", "chunked_list": ["# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.\n# Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#", "#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"PyTorch BERT model.\"\"\"\n\n", "\n\nimport math\nimport os\nimport warnings\nfrom dataclasses import dataclass\nfrom typing import List, Optional, Tuple, Union\n\nimport torch\nimport torch.utils.checkpoint", "import torch\nimport torch.utils.checkpoint\nfrom torch import nn\nfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss\n\nfrom transformers.activations import ACT2FN\nfrom transformers.modeling_outputs import (\n    BaseModelOutputWithPastAndCrossAttentions,\n    BaseModelOutputWithPoolingAndCrossAttentions,\n    CausalLMOutputWithCrossAttentions,", "    BaseModelOutputWithPoolingAndCrossAttentions,\n    CausalLMOutputWithCrossAttentions,\n    MaskedLMOutput,\n    MultipleChoiceModelOutput,\n    NextSentencePredictorOutput,\n    QuestionAnsweringModelOutput,\n    SequenceClassifierOutput,\n    TokenClassifierOutput,\n)\nfrom transformers.modeling_utils import PreTrainedModel", ")\nfrom transformers.modeling_utils import PreTrainedModel\nfrom transformers.pytorch_utils import (\n    apply_chunking_to_forward,\n    find_pruneable_heads_and_indices,\n    is_torch_greater_than_1_6,\n    prune_linear_layer,\n)\nfrom transformers.utils import (\n    ModelOutput,", "from transformers.utils import (\n    ModelOutput,\n    add_code_sample_docstrings,\n    add_start_docstrings,\n    add_start_docstrings_to_model_forward,\n    logging,\n    replace_return_docstrings,\n)\nfrom transformers.models.bert.configuration_bert import BertConfig\n", "from transformers.models.bert.configuration_bert import BertConfig\n\n\nlogger = logging.get_logger(__name__)\n\n_CHECKPOINT_FOR_DOC = \"bert-base-uncased\"\n_CONFIG_FOR_DOC = \"BertConfig\"\n_TOKENIZER_FOR_DOC = \"BertTokenizer\"\n\n# TokenClassification docstring", "\n# TokenClassification docstring\n_CHECKPOINT_FOR_TOKEN_CLASSIFICATION = \"dbmdz/bert-large-cased-finetuned-conll03-english\"\n_TOKEN_CLASS_EXPECTED_OUTPUT = (\n    \"['O', 'I-ORG', 'I-ORG', 'I-ORG', 'O', 'O', 'O', 'O', 'O', 'I-LOC', 'O', 'I-LOC', 'I-LOC'] \"\n)\n_TOKEN_CLASS_EXPECTED_LOSS = 0.01\n\n# QuestionAnswering docstring\n_CHECKPOINT_FOR_QA = \"deepset/bert-base-cased-squad2\"", "# QuestionAnswering docstring\n_CHECKPOINT_FOR_QA = \"deepset/bert-base-cased-squad2\"\n_QA_EXPECTED_OUTPUT = \"'a nice puppet'\"\n_QA_EXPECTED_LOSS = 7.41\n_QA_TARGET_START_INDEX = 14\n_QA_TARGET_END_INDEX = 15\n\n# SequenceClassification docstring\n_CHECKPOINT_FOR_SEQUENCE_CLASSIFICATION = \"textattack/bert-base-uncased-yelp-polarity\"\n_SEQ_CLASS_EXPECTED_OUTPUT = \"'LABEL_1'\"", "_CHECKPOINT_FOR_SEQUENCE_CLASSIFICATION = \"textattack/bert-base-uncased-yelp-polarity\"\n_SEQ_CLASS_EXPECTED_OUTPUT = \"'LABEL_1'\"\n_SEQ_CLASS_EXPECTED_LOSS = 0.01\n\n\nBERT_PRETRAINED_MODEL_ARCHIVE_LIST = [\n    \"bert-base-uncased\",\n    \"bert-large-uncased\",\n    \"bert-base-cased\",\n    \"bert-large-cased\",", "    \"bert-base-cased\",\n    \"bert-large-cased\",\n    \"bert-base-multilingual-uncased\",\n    \"bert-base-multilingual-cased\",\n    \"bert-base-chinese\",\n    \"bert-base-german-cased\",\n    \"bert-large-uncased-whole-word-masking\",\n    \"bert-large-cased-whole-word-masking\",\n    \"bert-large-uncased-whole-word-masking-finetuned-squad\",\n    \"bert-large-cased-whole-word-masking-finetuned-squad\",", "    \"bert-large-uncased-whole-word-masking-finetuned-squad\",\n    \"bert-large-cased-whole-word-masking-finetuned-squad\",\n    \"bert-base-cased-finetuned-mrpc\",\n    \"bert-base-german-dbmdz-cased\",\n    \"bert-base-german-dbmdz-uncased\",\n    \"cl-tohoku/bert-base-japanese\",\n    \"cl-tohoku/bert-base-japanese-whole-word-masking\",\n    \"cl-tohoku/bert-base-japanese-char\",\n    \"cl-tohoku/bert-base-japanese-char-whole-word-masking\",\n    \"TurkuNLP/bert-base-finnish-cased-v1\",", "    \"cl-tohoku/bert-base-japanese-char-whole-word-masking\",\n    \"TurkuNLP/bert-base-finnish-cased-v1\",\n    \"TurkuNLP/bert-base-finnish-uncased-v1\",\n    \"wietsedv/bert-base-dutch-cased\",\n    # See all BERT models at https://huggingface.co/models?filter=bert\n]\n\n\ndef load_tf_weights_in_bert(model, config, tf_checkpoint_path):\n    \"\"\"Load tf checkpoints in a pytorch model.\"\"\"\n    try:\n        import re\n\n        import numpy as np\n        import tensorflow as tf\n    except ImportError:\n        logger.error(\n            \"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"\n            \"https://www.tensorflow.org/install/ for installation instructions.\"\n        )\n        raise\n    tf_path = os.path.abspath(tf_checkpoint_path)\n    logger.info(f\"Converting TensorFlow checkpoint from {tf_path}\")\n    # Load weights from TF model\n    init_vars = tf.train.list_variables(tf_path)\n    names = []\n    arrays = []\n    for name, shape in init_vars:\n        logger.info(f\"Loading TF weight {name} with shape {shape}\")\n        array = tf.train.load_variable(tf_path, name)\n        names.append(name)\n        arrays.append(array)\n\n    for name, array in zip(names, arrays):\n        name = name.split(\"/\")\n        # adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v\n        # which are not required for using pretrained model\n        if any(\n            n in [\"adam_v\", \"adam_m\", \"AdamWeightDecayOptimizer\", \"AdamWeightDecayOptimizer_1\", \"global_step\"]\n            for n in name\n        ):\n            logger.info(f\"Skipping {'/'.join(name)}\")\n            continue\n        pointer = model\n        for m_name in name:\n            if re.fullmatch(r\"[A-Za-z]+_\\d+\", m_name):\n                scope_names = re.split(r\"_(\\d+)\", m_name)\n            else:\n                scope_names = [m_name]\n            if scope_names[0] == \"kernel\" or scope_names[0] == \"gamma\":\n                pointer = getattr(pointer, \"weight\")\n            elif scope_names[0] == \"output_bias\" or scope_names[0] == \"beta\":\n                pointer = getattr(pointer, \"bias\")\n            elif scope_names[0] == \"output_weights\":\n                pointer = getattr(pointer, \"weight\")\n            elif scope_names[0] == \"squad\":\n                pointer = getattr(pointer, \"classifier\")\n            else:\n                try:\n                    pointer = getattr(pointer, scope_names[0])\n                except AttributeError:\n                    logger.info(f\"Skipping {'/'.join(name)}\")\n                    continue\n            if len(scope_names) >= 2:\n                num = int(scope_names[1])\n                pointer = pointer[num]\n        if m_name[-11:] == \"_embeddings\":\n            pointer = getattr(pointer, \"weight\")\n        elif m_name == \"kernel\":\n            array = np.transpose(array)\n        try:\n            if pointer.shape != array.shape:\n                raise ValueError(f\"Pointer shape {pointer.shape} and array shape {array.shape} mismatched\")\n        except AssertionError as e:\n            e.args += (pointer.shape, array.shape)\n            raise\n        logger.info(f\"Initialize PyTorch weight {name}\")\n        pointer.data = torch.from_numpy(array)\n    return model", "def load_tf_weights_in_bert(model, config, tf_checkpoint_path):\n    \"\"\"Load tf checkpoints in a pytorch model.\"\"\"\n    try:\n        import re\n\n        import numpy as np\n        import tensorflow as tf\n    except ImportError:\n        logger.error(\n            \"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"\n            \"https://www.tensorflow.org/install/ for installation instructions.\"\n        )\n        raise\n    tf_path = os.path.abspath(tf_checkpoint_path)\n    logger.info(f\"Converting TensorFlow checkpoint from {tf_path}\")\n    # Load weights from TF model\n    init_vars = tf.train.list_variables(tf_path)\n    names = []\n    arrays = []\n    for name, shape in init_vars:\n        logger.info(f\"Loading TF weight {name} with shape {shape}\")\n        array = tf.train.load_variable(tf_path, name)\n        names.append(name)\n        arrays.append(array)\n\n    for name, array in zip(names, arrays):\n        name = name.split(\"/\")\n        # adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v\n        # which are not required for using pretrained model\n        if any(\n            n in [\"adam_v\", \"adam_m\", \"AdamWeightDecayOptimizer\", \"AdamWeightDecayOptimizer_1\", \"global_step\"]\n            for n in name\n        ):\n            logger.info(f\"Skipping {'/'.join(name)}\")\n            continue\n        pointer = model\n        for m_name in name:\n            if re.fullmatch(r\"[A-Za-z]+_\\d+\", m_name):\n                scope_names = re.split(r\"_(\\d+)\", m_name)\n            else:\n                scope_names = [m_name]\n            if scope_names[0] == \"kernel\" or scope_names[0] == \"gamma\":\n                pointer = getattr(pointer, \"weight\")\n            elif scope_names[0] == \"output_bias\" or scope_names[0] == \"beta\":\n                pointer = getattr(pointer, \"bias\")\n            elif scope_names[0] == \"output_weights\":\n                pointer = getattr(pointer, \"weight\")\n            elif scope_names[0] == \"squad\":\n                pointer = getattr(pointer, \"classifier\")\n            else:\n                try:\n                    pointer = getattr(pointer, scope_names[0])\n                except AttributeError:\n                    logger.info(f\"Skipping {'/'.join(name)}\")\n                    continue\n            if len(scope_names) >= 2:\n                num = int(scope_names[1])\n                pointer = pointer[num]\n        if m_name[-11:] == \"_embeddings\":\n            pointer = getattr(pointer, \"weight\")\n        elif m_name == \"kernel\":\n            array = np.transpose(array)\n        try:\n            if pointer.shape != array.shape:\n                raise ValueError(f\"Pointer shape {pointer.shape} and array shape {array.shape} mismatched\")\n        except AssertionError as e:\n            e.args += (pointer.shape, array.shape)\n            raise\n        logger.info(f\"Initialize PyTorch weight {name}\")\n        pointer.data = torch.from_numpy(array)\n    return model", "\n\nclass BertEmbeddings(nn.Module):\n    \"\"\"Construct the embeddings from word, position and token_type embeddings.\"\"\"\n\n    def __init__(self, config):\n        super().__init__()\n        self.word_embeddings = nn.Embedding(config.vocab_size, config.hidden_size, padding_idx=config.pad_token_id)\n        self.position_embeddings = nn.Embedding(config.max_position_embeddings, config.hidden_size)\n        self.token_type_embeddings = nn.Embedding(config.type_vocab_size, config.hidden_size)\n\n        # self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load\n        # any TensorFlow checkpoint file\n        self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        # position_ids (1, len position emb) is contiguous in memory and exported when serialized\n        self.position_embedding_type = getattr(config, \"position_embedding_type\", \"absolute\")\n        self.register_buffer(\"position_ids\", torch.arange(config.max_position_embeddings).expand((1, -1)))\n        if is_torch_greater_than_1_6:\n            self.register_buffer(\n                \"token_type_ids\",\n                torch.zeros(self.position_ids.size(), dtype=torch.long),\n                persistent=False,\n            )\n\n    def forward(\n        self,\n        input_ids: Optional[torch.LongTensor] = None,\n        token_type_ids: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        past_key_values_length: int = 0,\n    ) -> torch.Tensor:\n        if input_ids is not None:\n            input_shape = input_ids.size()\n        else:\n            input_shape = inputs_embeds.size()[:-1]\n\n        seq_length = input_shape[1]\n\n        if position_ids is None:\n            position_ids = self.position_ids[:, past_key_values_length : seq_length + past_key_values_length]\n\n        # Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs\n        # when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves\n        # issue #5664\n        if token_type_ids is None:\n            if hasattr(self, \"token_type_ids\"):\n                buffered_token_type_ids = self.token_type_ids[:, :seq_length]\n                buffered_token_type_ids_expanded = buffered_token_type_ids.expand(input_shape[0], seq_length)\n                token_type_ids = buffered_token_type_ids_expanded\n            else:\n                token_type_ids = torch.zeros(input_shape, dtype=torch.long, device=self.position_ids.device)\n\n        if inputs_embeds is None:\n            inputs_embeds = self.word_embeddings(input_ids)\n        token_type_embeddings = self.token_type_embeddings(token_type_ids)\n\n        embeddings = inputs_embeds + token_type_embeddings\n        if self.position_embedding_type == \"absolute\":\n            position_embeddings = self.position_embeddings(position_ids)\n            embeddings += position_embeddings\n        embeddings = self.LayerNorm(embeddings)\n        embeddings = self.dropout(embeddings)\n        return embeddings", "\n\nclass BertSelfAttention(nn.Module):\n    def __init__(self, config, position_embedding_type=None):\n        super().__init__()\n        if config.hidden_size % config.num_attention_heads != 0 and not hasattr(config, \"embedding_size\"):\n            raise ValueError(\n                f\"The hidden size ({config.hidden_size}) is not a multiple of the number of attention \"\n                f\"heads ({config.num_attention_heads})\"\n            )\n\n        self.num_attention_heads = config.num_attention_heads\n        self.attention_head_size = int(config.hidden_size / config.num_attention_heads)\n        self.all_head_size = self.num_attention_heads * self.attention_head_size\n\n        self.query = nn.Linear(config.hidden_size, self.all_head_size)\n        self.key = nn.Linear(config.hidden_size, self.all_head_size)\n        self.value = nn.Linear(config.hidden_size, self.all_head_size)\n\n        self.dropout = nn.Dropout(config.attention_probs_dropout_prob)\n        self.position_embedding_type = position_embedding_type or getattr(\n            config, \"position_embedding_type\", \"absolute\"\n        )\n        if self.position_embedding_type == \"relative_key\" or self.position_embedding_type == \"relative_key_query\":\n            self.max_position_embeddings = config.max_position_embeddings\n            self.distance_embedding = nn.Embedding(2 * config.max_position_embeddings - 1, self.attention_head_size)\n\n        self.is_decoder = config.is_decoder\n\n    def transpose_for_scores(self, x: torch.Tensor) -> torch.Tensor:\n        new_x_shape = x.size()[:-1] + (self.num_attention_heads, self.attention_head_size)\n        x = x.view(new_x_shape)\n        return x.permute(0, 2, 1, 3)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.FloatTensor] = None,\n        head_mask: Optional[torch.FloatTensor] = None,\n        encoder_hidden_states: Optional[torch.FloatTensor] = None,\n        encoder_attention_mask: Optional[torch.FloatTensor] = None,\n        past_key_value: Optional[Tuple[Tuple[torch.FloatTensor]]] = None,\n        output_attentions: Optional[bool] = False,\n    ) -> Tuple[torch.Tensor]:\n        mixed_query_layer = self.query(hidden_states)\n\n        # If this is instantiated as a cross-attention module, the keys\n        # and values come from an encoder; the attention mask needs to be\n        # such that the encoder's padding tokens are not attended to.\n        is_cross_attention = encoder_hidden_states is not None\n\n        if is_cross_attention and past_key_value is not None:\n            # reuse k,v, cross_attentions\n            key_layer = past_key_value[0]\n            value_layer = past_key_value[1]\n            attention_mask = encoder_attention_mask\n        elif is_cross_attention:\n            key_layer = self.transpose_for_scores(self.key(encoder_hidden_states))\n            value_layer = self.transpose_for_scores(self.value(encoder_hidden_states))\n            attention_mask = encoder_attention_mask\n        elif past_key_value is not None:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n            key_layer = torch.cat([past_key_value[0], key_layer], dim=2)\n            value_layer = torch.cat([past_key_value[1], value_layer], dim=2)\n        else:\n            key_layer = self.transpose_for_scores(self.key(hidden_states))\n            value_layer = self.transpose_for_scores(self.value(hidden_states))\n\n        query_layer = self.transpose_for_scores(mixed_query_layer)\n\n        if self.is_decoder:\n            # if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.\n            # Further calls to cross_attention layer can then reuse all cross-attention\n            # key/value_states (first \"if\" case)\n            # if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of\n            # all previous decoder key/value_states. Further calls to uni-directional self-attention\n            # can concat previous decoder key/value_states to current projected key/value_states (third \"elif\" case)\n            # if encoder bi-directional self-attention `past_key_value` is always `None`\n            past_key_value = (key_layer, value_layer)\n\n        # Take the dot product between \"query\" and \"key\" to get the raw attention scores.\n        attention_scores = torch.matmul(query_layer, key_layer.transpose(-1, -2))\n\n        if self.position_embedding_type == \"relative_key\" or self.position_embedding_type == \"relative_key_query\":\n            seq_length = hidden_states.size()[1]\n            position_ids_l = torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(-1, 1)\n            position_ids_r = torch.arange(seq_length, dtype=torch.long, device=hidden_states.device).view(1, -1)\n            distance = position_ids_l - position_ids_r\n            positional_embedding = self.distance_embedding(distance + self.max_position_embeddings - 1)\n            positional_embedding = positional_embedding.to(dtype=query_layer.dtype)  # fp16 compatibility\n\n            if self.position_embedding_type == \"relative_key\":\n                relative_position_scores = torch.einsum(\"bhld,lrd->bhlr\", query_layer, positional_embedding)\n                attention_scores = attention_scores + relative_position_scores\n            elif self.position_embedding_type == \"relative_key_query\":\n                relative_position_scores_query = torch.einsum(\"bhld,lrd->bhlr\", query_layer, positional_embedding)\n                relative_position_scores_key = torch.einsum(\"bhrd,lrd->bhlr\", key_layer, positional_embedding)\n                attention_scores = attention_scores + relative_position_scores_query + relative_position_scores_key\n\n        attention_scores = attention_scores / math.sqrt(self.attention_head_size)\n        if attention_mask is not None:\n            # Apply the attention mask is (precomputed for all layers in BertModel forward() function)\n            attention_scores = attention_scores + attention_mask\n\n        # Normalize the attention scores to probabilities.\n        attention_probs = nn.functional.softmax(attention_scores, dim=-1)\n\n        # This is actually dropping out entire tokens to attend to, which might\n        # seem a bit unusual, but is taken from the original Transformer paper.\n        attention_probs = self.dropout(attention_probs)\n\n        # Mask heads if we want to\n        if head_mask is not None:\n            attention_probs = attention_probs * head_mask\n\n        context_layer = torch.matmul(attention_probs, value_layer)\n\n        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()\n        new_context_layer_shape = context_layer.size()[:-2] + (self.all_head_size,)\n        context_layer = context_layer.view(new_context_layer_shape)\n\n        outputs = (context_layer, attention_probs) if output_attentions else (context_layer,)\n\n        if self.is_decoder:\n            outputs = outputs + (past_key_value,)\n        return outputs", "\n\nclass BertSelfOutput(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.hidden_size, config.hidden_size)\n        self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, hidden_states: torch.Tensor, input_tensor: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = self.LayerNorm(hidden_states + input_tensor)\n        return hidden_states", "\n\nclass BertAttention(nn.Module):\n    def __init__(self, config, position_embedding_type=None):\n        super().__init__()\n        self.self = BertSelfAttention(config, position_embedding_type=position_embedding_type)\n        self.output = BertSelfOutput(config)\n        self.pruned_heads = set()\n\n    def prune_heads(self, heads):\n        if len(heads) == 0:\n            return\n        heads, index = find_pruneable_heads_and_indices(\n            heads, self.self.num_attention_heads, self.self.attention_head_size, self.pruned_heads\n        )\n\n        # Prune linear layers\n        self.self.query = prune_linear_layer(self.self.query, index)\n        self.self.key = prune_linear_layer(self.self.key, index)\n        self.self.value = prune_linear_layer(self.self.value, index)\n        self.output.dense = prune_linear_layer(self.output.dense, index, dim=1)\n\n        # Update hyper params and store pruned heads\n        self.self.num_attention_heads = self.self.num_attention_heads - len(heads)\n        self.self.all_head_size = self.self.attention_head_size * self.self.num_attention_heads\n        self.pruned_heads = self.pruned_heads.union(heads)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.FloatTensor] = None,\n        head_mask: Optional[torch.FloatTensor] = None,\n        encoder_hidden_states: Optional[torch.FloatTensor] = None,\n        encoder_attention_mask: Optional[torch.FloatTensor] = None,\n        past_key_value: Optional[Tuple[Tuple[torch.FloatTensor]]] = None,\n        output_attentions: Optional[bool] = False,\n    ) -> Tuple[torch.Tensor]:\n        self_outputs = self.self(\n            hidden_states,\n            attention_mask,\n            head_mask,\n            encoder_hidden_states,\n            encoder_attention_mask,\n            past_key_value,\n            output_attentions,\n        )\n        attention_output = self.output(self_outputs[0], hidden_states)\n        outputs = (attention_output,) + self_outputs[1:]  # add attentions if we output them\n        return outputs", "\n\nclass BertIntermediate(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.hidden_size, config.intermediate_size)\n        if isinstance(config.hidden_act, str):\n            self.intermediate_act_fn = ACT2FN[config.hidden_act]\n        else:\n            self.intermediate_act_fn = config.hidden_act\n\n    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.intermediate_act_fn(hidden_states)\n        return hidden_states", "\n\nclass BertOutput(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.intermediate_size, config.hidden_size)\n        self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n\n    def forward(self, hidden_states: torch.Tensor, input_tensor: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = self.LayerNorm(hidden_states + input_tensor)\n        return hidden_states", "\n\nclass BertLayer(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.chunk_size_feed_forward = config.chunk_size_feed_forward\n        self.seq_len_dim = 1\n        self.attention = BertAttention(config)\n        self.is_decoder = config.is_decoder\n        self.add_cross_attention = config.add_cross_attention\n        if self.add_cross_attention:\n            if not self.is_decoder:\n                raise ValueError(f\"{self} should be used as a decoder model if cross attention is added\")\n            self.crossattention = BertAttention(config, position_embedding_type=\"absolute\")\n        self.intermediate = BertIntermediate(config)\n        self.output = BertOutput(config)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.FloatTensor] = None,\n        head_mask: Optional[torch.FloatTensor] = None,\n        encoder_hidden_states: Optional[torch.FloatTensor] = None,\n        encoder_attention_mask: Optional[torch.FloatTensor] = None,\n        past_key_value: Optional[Tuple[Tuple[torch.FloatTensor]]] = None,\n        output_attentions: Optional[bool] = False,\n    ) -> Tuple[torch.Tensor]:\n        # decoder uni-directional self-attention cached key/values tuple is at positions 1,2\n        self_attn_past_key_value = past_key_value[:2] if past_key_value is not None else None\n        self_attention_outputs = self.attention(\n            hidden_states,\n            attention_mask,\n            head_mask,\n            output_attentions=output_attentions,\n            past_key_value=self_attn_past_key_value,\n        )\n        attention_output = self_attention_outputs[0]\n\n        # if decoder, the last output is tuple of self-attn cache\n        if self.is_decoder:\n            outputs = self_attention_outputs[1:-1]\n            present_key_value = self_attention_outputs[-1]\n        else:\n            outputs = self_attention_outputs[1:]  # add self attentions if we output attention weights\n\n        cross_attn_present_key_value = None\n        if self.is_decoder and encoder_hidden_states is not None:\n            if not hasattr(self, \"crossattention\"):\n                raise ValueError(\n                    f\"If `encoder_hidden_states` are passed, {self} has to be instantiated with cross-attention layers\"\n                    \" by setting `config.add_cross_attention=True`\"\n                )\n\n            # cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple\n            cross_attn_past_key_value = past_key_value[-2:] if past_key_value is not None else None\n            cross_attention_outputs = self.crossattention(\n                attention_output,\n                attention_mask,\n                head_mask,\n                encoder_hidden_states,\n                encoder_attention_mask,\n                cross_attn_past_key_value,\n                output_attentions,\n            )\n            attention_output = cross_attention_outputs[0]\n            outputs = outputs + cross_attention_outputs[1:-1]  # add cross attentions if we output attention weights\n\n            # add cross-attn cache to positions 3,4 of present_key_value tuple\n            cross_attn_present_key_value = cross_attention_outputs[-1]\n            present_key_value = present_key_value + cross_attn_present_key_value\n\n        layer_output = apply_chunking_to_forward(\n            self.feed_forward_chunk, self.chunk_size_feed_forward, self.seq_len_dim, attention_output\n        )\n        outputs = (layer_output,) + outputs\n\n        # if decoder, return the attn key/values as the last output\n        if self.is_decoder:\n            outputs = outputs + (present_key_value,)\n\n        return outputs\n\n    def feed_forward_chunk(self, attention_output):\n        intermediate_output = self.intermediate(attention_output)\n        layer_output = self.output(intermediate_output, attention_output)\n        return layer_output", "\n\nclass BertEncoder(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.config = config\n        self.layer = nn.ModuleList([BertLayer(config) for _ in range(config.num_hidden_layers)])\n        self.gradient_checkpointing = False\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.FloatTensor] = None,\n        head_mask: Optional[torch.FloatTensor] = None,\n        encoder_hidden_states: Optional[torch.FloatTensor] = None,\n        encoder_attention_mask: Optional[torch.FloatTensor] = None,\n        past_key_values: Optional[Tuple[Tuple[torch.FloatTensor]]] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = False,\n        output_hidden_states: Optional[bool] = False,\n        return_dict: Optional[bool] = True,\n    ) -> Union[Tuple[torch.Tensor], BaseModelOutputWithPastAndCrossAttentions]:\n        all_hidden_states = () if output_hidden_states else None\n        all_self_attentions = () if output_attentions else None\n        all_cross_attentions = () if output_attentions and self.config.add_cross_attention else None\n\n        next_decoder_cache = () if use_cache else None\n        for i, layer_module in enumerate(self.layer):\n            if output_hidden_states:\n                all_hidden_states = all_hidden_states + (hidden_states,)\n\n            layer_head_mask = head_mask[i] if head_mask is not None else None\n            past_key_value = past_key_values[i] if past_key_values is not None else None\n\n            if self.gradient_checkpointing and self.training:\n\n                if use_cache:\n                    logger.warning(\n                        \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n                    )\n                    use_cache = False\n\n                def create_custom_forward(module):\n                    def custom_forward(*inputs):\n                        return module(*inputs, past_key_value, output_attentions)\n\n                    return custom_forward\n\n                layer_outputs = torch.utils.checkpoint.checkpoint(\n                    create_custom_forward(layer_module),\n                    hidden_states,\n                    attention_mask,\n                    layer_head_mask,\n                    encoder_hidden_states,\n                    encoder_attention_mask,\n                )\n            else:\n                layer_outputs = layer_module(\n                    hidden_states,\n                    attention_mask,\n                    layer_head_mask,\n                    encoder_hidden_states,\n                    encoder_attention_mask,\n                    past_key_value,\n                    output_attentions,\n                )\n\n            hidden_states = layer_outputs[0]\n            if use_cache:\n                next_decoder_cache += (layer_outputs[-1],)\n            if output_attentions:\n                all_self_attentions = all_self_attentions + (layer_outputs[1],)\n                if self.config.add_cross_attention:\n                    all_cross_attentions = all_cross_attentions + (layer_outputs[2],)\n\n        if output_hidden_states:\n            all_hidden_states = all_hidden_states + (hidden_states,)\n\n        if not return_dict:\n            return tuple(\n                v\n                for v in [\n                    hidden_states,\n                    next_decoder_cache,\n                    all_hidden_states,\n                    all_self_attentions,\n                    all_cross_attentions,\n                ]\n                if v is not None\n            )\n        return BaseModelOutputWithPastAndCrossAttentions(\n            last_hidden_state=hidden_states,\n            past_key_values=next_decoder_cache,\n            hidden_states=all_hidden_states,\n            attentions=all_self_attentions,\n            cross_attentions=all_cross_attentions,\n        )", "\n\nclass BertPooler(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.hidden_size, config.hidden_size)\n        self.activation = nn.Tanh()\n\n    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token.\n        first_token_tensor = hidden_states[:, 0]\n        pooled_output = self.dense(first_token_tensor)\n        pooled_output = self.activation(pooled_output)\n        return pooled_output", "\n\nclass BertPredictionHeadTransform(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.hidden_size, config.hidden_size)\n        if isinstance(config.hidden_act, str):\n            self.transform_act_fn = ACT2FN[config.hidden_act]\n        else:\n            self.transform_act_fn = config.hidden_act\n        self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)\n\n    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:\n        hidden_states = self.dense(hidden_states)\n        hidden_states = self.transform_act_fn(hidden_states)\n        hidden_states = self.LayerNorm(hidden_states)\n        return hidden_states", "\n\nclass BertLMPredictionHead(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.transform = BertPredictionHeadTransform(config)\n\n        # The output weights are the same as the input embeddings, but there is\n        # an output-only bias for each token.\n        self.decoder = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\n        self.bias = nn.Parameter(torch.zeros(config.vocab_size))\n\n        # Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`\n        self.decoder.bias = self.bias\n\n    def forward(self, hidden_states):\n        hidden_states = self.transform(hidden_states)\n        hidden_states = self.decoder(hidden_states)\n        return hidden_states", "\n\nclass BertOnlyMLMHead(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.predictions = BertLMPredictionHead(config)\n\n    def forward(self, sequence_output: torch.Tensor) -> torch.Tensor:\n        prediction_scores = self.predictions(sequence_output)\n        return prediction_scores", "\n\nclass BertOnlyNSPHead(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.seq_relationship = nn.Linear(config.hidden_size, 2)\n\n    def forward(self, pooled_output):\n        seq_relationship_score = self.seq_relationship(pooled_output)\n        return seq_relationship_score", "\n\nclass BertPreTrainingHeads(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.predictions = BertLMPredictionHead(config)\n        self.seq_relationship = nn.Linear(config.hidden_size, 2)\n\n    def forward(self, sequence_output, pooled_output):\n        prediction_scores = self.predictions(sequence_output)\n        seq_relationship_score = self.seq_relationship(pooled_output)\n        return prediction_scores, seq_relationship_score", "\n\nclass BertPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = BertConfig\n    load_tf_weights = load_tf_weights_in_bert\n    base_model_prefix = \"bert\"\n    supports_gradient_checkpointing = True\n    _keys_to_ignore_on_load_missing = [r\"position_ids\"]\n\n    def _init_weights(self, module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n\n    def _set_gradient_checkpointing(self, module, value=False):\n        if isinstance(module, BertEncoder):\n            module.gradient_checkpointing = value", "\n\n@dataclass\nclass BertForPreTrainingOutput(ModelOutput):\n    \"\"\"\n    Output type of [`BertForPreTraining`].\n\n    Args:\n        loss (*optional*, returned when `labels` is provided, `torch.FloatTensor` of shape `(1,)`):\n            Total loss as the sum of the masked language modeling loss and the next sequence prediction\n            (classification) loss.\n        prediction_logits (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`):\n            Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).\n        seq_relationship_logits (`torch.FloatTensor` of shape `(batch_size, 2)`):\n            Prediction scores of the next sequence prediction (classification) head (scores of True/False continuation\n            before SoftMax).\n        hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):\n            Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer) of\n            shape `(batch_size, sequence_length, hidden_size)`.\n\n            Hidden-states of the model at the output of each layer plus the initial embedding outputs.\n        attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):\n            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n            sequence_length)`.\n\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    \"\"\"\n\n    loss: Optional[torch.FloatTensor] = None\n    prediction_logits: torch.FloatTensor = None\n    seq_relationship_logits: torch.FloatTensor = None\n    hidden_states: Optional[Tuple[torch.FloatTensor]] = None\n    attentions: Optional[Tuple[torch.FloatTensor]] = None", "\n\nBERT_START_DOCSTRING = r\"\"\"\n\n    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n    etc.)\n\n    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage", "    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n    and behavior.\n\n    Parameters:\n        config ([`BertConfig`]): Model configuration class with all the parameters of the model.\n            Initializing with a config file does not load the weights associated with the model, only the\n            configuration. Check out the [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\"\"\"\n", "\"\"\"\n\nBERT_INPUTS_DOCSTRING = r\"\"\"\n    Args:\n        input_ids (`torch.LongTensor` of shape `({0})`):\n            Indices of input sequence tokens in the vocabulary.\n\n            Indices can be obtained using [`BertTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n", "            [`PreTrainedTokenizer.__call__`] for details.\n\n            [What are input IDs?](../glossary#input-ids)\n        attention_mask (`torch.FloatTensor` of shape `({0})`, *optional*):\n            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n\n            [What are attention masks?](../glossary#attention-mask)", "\n            [What are attention masks?](../glossary#attention-mask)\n        token_type_ids (`torch.LongTensor` of shape `({0})`, *optional*):\n            Segment token indices to indicate first and second portions of the inputs. Indices are selected in `[0,\n            1]`:\n\n            - 0 corresponds to a *sentence A* token,\n            - 1 corresponds to a *sentence B* token.\n\n            [What are token type IDs?](../glossary#token-type-ids)", "\n            [What are token type IDs?](../glossary#token-type-ids)\n        position_ids (`torch.LongTensor` of shape `({0})`, *optional*):\n            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n            config.max_position_embeddings - 1]`.\n\n            [What are position IDs?](../glossary#position-ids)\n        head_mask (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`, *optional*):\n            Mask to nullify selected heads of the self-attention modules. Mask values selected in `[0, 1]`:\n", "            Mask to nullify selected heads of the self-attention modules. Mask values selected in `[0, 1]`:\n\n            - 1 indicates the head is **not masked**,\n            - 0 indicates the head is **masked**.\n\n        inputs_embeds (`torch.FloatTensor` of shape `({0}, hidden_size)`, *optional*):\n            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n            model's internal embedding lookup matrix.\n        output_attentions (`bool`, *optional*):", "            model's internal embedding lookup matrix.\n        output_attentions (`bool`, *optional*):\n            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n            tensors for more detail.\n        output_hidden_states (`bool`, *optional*):\n            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n            more detail.\n        return_dict (`bool`, *optional*):\n            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\"\"\"", "            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare Bert Model transformer outputting raw hidden-states without any specific head on top.\",\n    BERT_START_DOCSTRING,\n)\nclass BertModel(BertPreTrainedModel):\n    \"\"\"\n\n    The model can behave as an encoder (with only self-attention) as well as a decoder, in which case a layer of\n    cross-attention is added between the self-attention layers, following the architecture described in [Attention is\n    all you need](https://arxiv.org/abs/1706.03762) by Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit,\n    Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\n    To behave as an decoder the model needs to be initialized with the `is_decoder` argument of the configuration set\n    to `True`. To be used in a Seq2Seq model, the model needs to initialized with both `is_decoder` argument and\n    `add_cross_attention` set to `True`; an `encoder_hidden_states` is then expected as an input to the forward pass.\n    \"\"\"\n\n    def __init__(self, config, add_pooling_layer=True):\n        super().__init__(config)\n        self.config = config\n\n        self.embeddings = BertEmbeddings(config)\n        self.encoder = BertEncoder(config)\n\n        self.pooler = BertPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=BaseModelOutputWithPoolingAndCrossAttentions,\n        config_class=_CONFIG_FOR_DOC,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        encoder_hidden_states: Optional[torch.Tensor] = None,\n        encoder_attention_mask: Optional[torch.Tensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], BaseModelOutputWithPoolingAndCrossAttentions]:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        elif input_ids is not None:\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n\n        if token_type_ids is None:\n            if hasattr(self.embeddings, \"token_type_ids\"):\n                buffered_token_type_ids = self.embeddings.token_type_ids[:, :seq_length]\n                buffered_token_type_ids_expanded = buffered_token_type_ids.expand(batch_size, seq_length)\n                token_type_ids = buffered_token_type_ids_expanded\n            else:\n                token_type_ids = torch.zeros(input_shape, dtype=torch.long, device=device)\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: torch.Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            token_type_ids=token_type_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )", "class BertModel(BertPreTrainedModel):\n    \"\"\"\n\n    The model can behave as an encoder (with only self-attention) as well as a decoder, in which case a layer of\n    cross-attention is added between the self-attention layers, following the architecture described in [Attention is\n    all you need](https://arxiv.org/abs/1706.03762) by Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit,\n    Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\n    To behave as an decoder the model needs to be initialized with the `is_decoder` argument of the configuration set\n    to `True`. To be used in a Seq2Seq model, the model needs to initialized with both `is_decoder` argument and\n    `add_cross_attention` set to `True`; an `encoder_hidden_states` is then expected as an input to the forward pass.\n    \"\"\"\n\n    def __init__(self, config, add_pooling_layer=True):\n        super().__init__(config)\n        self.config = config\n\n        self.embeddings = BertEmbeddings(config)\n        self.encoder = BertEncoder(config)\n\n        self.pooler = BertPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=BaseModelOutputWithPoolingAndCrossAttentions,\n        config_class=_CONFIG_FOR_DOC,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        encoder_hidden_states: Optional[torch.Tensor] = None,\n        encoder_attention_mask: Optional[torch.Tensor] = None,\n        past_key_values: Optional[List[torch.FloatTensor]] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], BaseModelOutputWithPoolingAndCrossAttentions]:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        elif input_ids is not None:\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n\n        if token_type_ids is None:\n            if hasattr(self.embeddings, \"token_type_ids\"):\n                buffered_token_type_ids = self.embeddings.token_type_ids[:, :seq_length]\n                buffered_token_type_ids_expanded = buffered_token_type_ids.expand(batch_size, seq_length)\n                token_type_ids = buffered_token_type_ids_expanded\n            else:\n                token_type_ids = torch.zeros(input_shape, dtype=torch.long, device=device)\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: torch.Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            token_type_ids=token_type_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"\n    Bert Model with two heads on top as done during the pretraining: a `masked language modeling` head and a `next\n    sentence prediction (classification)` head.\n    \"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForPreTraining(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n\n        self.bert = BertModel(config)\n        self.cls = BertPreTrainingHeads(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.cls.predictions.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.cls.predictions.decoder = new_embeddings\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @replace_return_docstrings(output_type=BertForPreTrainingOutput, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        next_sentence_label: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], BertForPreTrainingOutput]:\n        r\"\"\"\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should be in `[-100, 0, ...,\n                config.vocab_size]` (see `input_ids` docstring) Tokens with indices set to `-100` are ignored (masked),\n                the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`\n            next_sentence_label (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n                Labels for computing the next sequence prediction (classification) loss. Input should be a sequence\n                pair (see `input_ids` docstring) Indices should be in `[0, 1]`:\n\n                - 0 indicates sequence B is a continuation of sequence A,\n                - 1 indicates sequence B is a random sequence.\n            kwargs (`Dict[str, any]`, optional, defaults to *{}*):\n                Used to hide legacy arguments that have been deprecated.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import BertTokenizer, BertForPreTraining\n        >>> import torch\n\n        >>> tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n        >>> model = BertForPreTraining.from_pretrained(\"bert-base-uncased\")\n\n        >>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n        >>> outputs = model(**inputs)\n\n        >>> prediction_logits = outputs.prediction_logits\n        >>> seq_relationship_logits = outputs.seq_relationship_logits\n        ```\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output, pooled_output = outputs[:2]\n        prediction_scores, seq_relationship_score = self.cls(sequence_output, pooled_output)\n\n        total_loss = None\n        if labels is not None and next_sentence_label is not None:\n            loss_fct = CrossEntropyLoss()\n            masked_lm_loss = loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))\n            next_sentence_loss = loss_fct(seq_relationship_score.view(-1, 2), next_sentence_label.view(-1))\n            total_loss = masked_lm_loss + next_sentence_loss\n\n        if not return_dict:\n            output = (prediction_scores, seq_relationship_score) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return BertForPreTrainingOutput(\n            loss=total_loss,\n            prediction_logits=prediction_scores,\n            seq_relationship_logits=seq_relationship_score,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ")\nclass BertForPreTraining(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n\n        self.bert = BertModel(config)\n        self.cls = BertPreTrainingHeads(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.cls.predictions.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.cls.predictions.decoder = new_embeddings\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @replace_return_docstrings(output_type=BertForPreTrainingOutput, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        next_sentence_label: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], BertForPreTrainingOutput]:\n        r\"\"\"\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should be in `[-100, 0, ...,\n                config.vocab_size]` (see `input_ids` docstring) Tokens with indices set to `-100` are ignored (masked),\n                the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`\n            next_sentence_label (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n                Labels for computing the next sequence prediction (classification) loss. Input should be a sequence\n                pair (see `input_ids` docstring) Indices should be in `[0, 1]`:\n\n                - 0 indicates sequence B is a continuation of sequence A,\n                - 1 indicates sequence B is a random sequence.\n            kwargs (`Dict[str, any]`, optional, defaults to *{}*):\n                Used to hide legacy arguments that have been deprecated.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import BertTokenizer, BertForPreTraining\n        >>> import torch\n\n        >>> tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n        >>> model = BertForPreTraining.from_pretrained(\"bert-base-uncased\")\n\n        >>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n        >>> outputs = model(**inputs)\n\n        >>> prediction_logits = outputs.prediction_logits\n        >>> seq_relationship_logits = outputs.seq_relationship_logits\n        ```\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output, pooled_output = outputs[:2]\n        prediction_scores, seq_relationship_score = self.cls(sequence_output, pooled_output)\n\n        total_loss = None\n        if labels is not None and next_sentence_label is not None:\n            loss_fct = CrossEntropyLoss()\n            masked_lm_loss = loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))\n            next_sentence_loss = loss_fct(seq_relationship_score.view(-1, 2), next_sentence_label.view(-1))\n            total_loss = masked_lm_loss + next_sentence_loss\n\n        if not return_dict:\n            output = (prediction_scores, seq_relationship_score) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return BertForPreTrainingOutput(\n            loss=total_loss,\n            prediction_logits=prediction_scores,\n            seq_relationship_logits=seq_relationship_score,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"Bert Model with a `language modeling` head on top for CLM fine-tuning.\"\"\", BERT_START_DOCSTRING\n)\nclass BertLMHeadModel(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n    _keys_to_ignore_on_load_missing = [r\"position_ids\", r\"predictions.decoder.bias\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n\n        if not config.is_decoder:\n            logger.warning(\"If you want to use `BertLMHeadModel` as a standalone, add `is_decoder=True.`\")\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        self.cls = BertOnlyMLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.cls.predictions.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.cls.predictions.decoder = new_embeddings\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=CausalLMOutputWithCrossAttentions,\n        config_class=_CONFIG_FOR_DOC,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        encoder_hidden_states: Optional[torch.Tensor] = None,\n        encoder_attention_mask: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        past_key_values: Optional[List[torch.Tensor]] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], CausalLMOutputWithCrossAttentions]:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Labels for computing the left-to-right language modeling loss (next word prediction). Indices should be in\n            `[-100, 0, ..., config.vocab_size]` (see `input_ids` docstring) Tokens with indices set to `-100` are\n            ignored (masked), the loss is only computed for the tokens with labels n `[0, ..., config.vocab_size]`\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        if labels is not None:\n            use_cache = False\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n        prediction_scores = self.cls(sequence_output)\n\n        lm_loss = None\n        if labels is not None:\n            # we are doing next-token prediction; shift prediction scores and input ids by one\n            shifted_prediction_scores = prediction_scores[:, :-1, :].contiguous()\n            labels = labels[:, 1:].contiguous()\n            loss_fct = CrossEntropyLoss()\n            lm_loss = loss_fct(shifted_prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))\n\n        if not return_dict:\n            output = (prediction_scores,) + outputs[2:]\n            return ((lm_loss,) + output) if lm_loss is not None else output\n\n        return CausalLMOutputWithCrossAttentions(\n            loss=lm_loss,\n            logits=prediction_scores,\n            past_key_values=outputs.past_key_values,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n            cross_attentions=outputs.cross_attentions,\n        )\n\n    def prepare_inputs_for_generation(self, input_ids, past=None, attention_mask=None, **model_kwargs):\n        input_shape = input_ids.shape\n        # if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly\n        if attention_mask is None:\n            attention_mask = input_ids.new_ones(input_shape)\n\n        # cut decoder_input_ids if past is used\n        if past is not None:\n            input_ids = input_ids[:, -1:]\n\n        return {\"input_ids\": input_ids, \"attention_mask\": attention_mask, \"past_key_values\": past}\n\n    def _reorder_cache(self, past, beam_idx):\n        reordered_past = ()\n        for layer_past in past:\n            reordered_past += (tuple(past_state.index_select(0, beam_idx) for past_state in layer_past),)\n        return reordered_past", "\n\n@add_start_docstrings(\"\"\"Bert Model with a `language modeling` head on top.\"\"\", BERT_START_DOCSTRING)\nclass BertForMaskedLM(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n    _keys_to_ignore_on_load_missing = [r\"position_ids\", r\"predictions.decoder.bias\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        self.cls = BertOnlyMLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.cls.predictions.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.cls.predictions.decoder = new_embeddings\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=MaskedLMOutput,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=\"'paris'\",\n        expected_loss=0.88,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        encoder_hidden_states: Optional[torch.Tensor] = None,\n        encoder_attention_mask: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], MaskedLMOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Labels for computing the masked language modeling loss. Indices should be in `[-100, 0, ...,\n            config.vocab_size]` (see `input_ids` docstring) Tokens with indices set to `-100` are ignored (masked), the\n            loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`\n        \"\"\"\n\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n        prediction_scores = self.cls(sequence_output)\n\n        masked_lm_loss = None\n        if labels is not None:\n            loss_fct = CrossEntropyLoss()  # -100 index = padding token\n            masked_lm_loss = loss_fct(prediction_scores.view(-1, self.config.vocab_size), labels.view(-1))\n\n        if not return_dict:\n            output = (prediction_scores,) + outputs[2:]\n            return ((masked_lm_loss,) + output) if masked_lm_loss is not None else output\n\n        return MaskedLMOutput(\n            loss=masked_lm_loss,\n            logits=prediction_scores,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n\n    def prepare_inputs_for_generation(self, input_ids, attention_mask=None, **model_kwargs):\n        input_shape = input_ids.shape\n        effective_batch_size = input_shape[0]\n\n        #  add a dummy token\n        if self.config.pad_token_id is None:\n            raise ValueError(\"The PAD token should be defined for generation\")\n\n        attention_mask = torch.cat([attention_mask, attention_mask.new_zeros((attention_mask.shape[0], 1))], dim=-1)\n        dummy_token = torch.full(\n            (effective_batch_size, 1), self.config.pad_token_id, dtype=torch.long, device=input_ids.device\n        )\n        input_ids = torch.cat([input_ids, dummy_token], dim=1)\n\n        return {\"input_ids\": input_ids, \"attention_mask\": attention_mask}", "\n\n@add_start_docstrings(\n    \"\"\"Bert Model with a `next sentence prediction (classification)` head on top.\"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForNextSentencePrediction(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n\n        self.bert = BertModel(config)\n        self.cls = BertOnlyNSPHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @replace_return_docstrings(output_type=NextSentencePredictorOutput, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        **kwargs,\n    ) -> Union[Tuple[torch.Tensor], NextSentencePredictorOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the next sequence prediction (classification) loss. Input should be a sequence pair\n            (see `input_ids` docstring). Indices should be in `[0, 1]`:\n\n            - 0 indicates sequence B is a continuation of sequence A,\n            - 1 indicates sequence B is a random sequence.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import BertTokenizer, BertForNextSentencePrediction\n        >>> import torch\n\n        >>> tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n        >>> model = BertForNextSentencePrediction.from_pretrained(\"bert-base-uncased\")\n\n        >>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n        >>> next_sentence = \"The sky is blue due to the shorter wavelength of blue light.\"\n        >>> encoding = tokenizer(prompt, next_sentence, return_tensors=\"pt\")\n\n        >>> outputs = model(**encoding, labels=torch.LongTensor([1]))\n        >>> logits = outputs.logits\n        >>> assert logits[0, 0] < logits[0, 1]  # next sentence was random\n        ```\n        \"\"\"\n\n        if \"next_sentence_label\" in kwargs:\n            warnings.warn(\n                \"The `next_sentence_label` argument is deprecated and will be removed in a future version, use\"\n                \" `labels` instead.\",\n                FutureWarning,\n            )\n            labels = kwargs.pop(\"next_sentence_label\")\n\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        pooled_output = outputs[1]\n\n        seq_relationship_scores = self.cls(pooled_output)\n\n        next_sentence_loss = None\n        if labels is not None:\n            loss_fct = CrossEntropyLoss()\n            next_sentence_loss = loss_fct(seq_relationship_scores.view(-1, 2), labels.view(-1))\n\n        if not return_dict:\n            output = (seq_relationship_scores,) + outputs[2:]\n            return ((next_sentence_loss,) + output) if next_sentence_loss is not None else output\n\n        return NextSentencePredictorOutput(\n            loss=next_sentence_loss,\n            logits=seq_relationship_scores,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"\n    Bert Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled\n    output) e.g. for GLUE tasks.\n    \"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForSequenceClassification(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.config = config\n\n        self.bert = BertModel(config)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_SEQUENCE_CLASSIFICATION,\n        output_type=SequenceClassifierOutput,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=_SEQ_CLASS_EXPECTED_OUTPUT,\n        expected_loss=_SEQ_CLASS_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], SequenceClassifierOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        pooled_output = outputs[1]\n\n        pooled_output = self.dropout(pooled_output)\n        logits = self.classifier(pooled_output)\n\n        loss = None\n        if labels is not None:\n            if self.config.problem_type is None:\n                if self.num_labels == 1:\n                    self.config.problem_type = \"regression\"\n                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n                    self.config.problem_type = \"single_label_classification\"\n                else:\n                    self.config.problem_type = \"multi_label_classification\"\n\n            if self.config.problem_type == \"regression\":\n                loss_fct = MSELoss()\n                if self.num_labels == 1:\n                    loss = loss_fct(logits.squeeze(), labels.squeeze())\n                else:\n                    loss = loss_fct(logits, labels)\n            elif self.config.problem_type == \"single_label_classification\":\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))\n            elif self.config.problem_type == \"multi_label_classification\":\n                loss_fct = BCEWithLogitsLoss()\n                loss = loss_fct(logits, labels)\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequenceClassifierOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ")\nclass BertForSequenceClassification(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.config = config\n\n        self.bert = BertModel(config)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_SEQUENCE_CLASSIFICATION,\n        output_type=SequenceClassifierOutput,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=_SEQ_CLASS_EXPECTED_OUTPUT,\n        expected_loss=_SEQ_CLASS_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], SequenceClassifierOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the sequence classification/regression loss. Indices should be in `[0, ...,\n            config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is computed (Mean-Square loss), If\n            `config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        pooled_output = outputs[1]\n\n        pooled_output = self.dropout(pooled_output)\n        logits = self.classifier(pooled_output)\n\n        loss = None\n        if labels is not None:\n            if self.config.problem_type is None:\n                if self.num_labels == 1:\n                    self.config.problem_type = \"regression\"\n                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):\n                    self.config.problem_type = \"single_label_classification\"\n                else:\n                    self.config.problem_type = \"multi_label_classification\"\n\n            if self.config.problem_type == \"regression\":\n                loss_fct = MSELoss()\n                if self.num_labels == 1:\n                    loss = loss_fct(logits.squeeze(), labels.squeeze())\n                else:\n                    loss = loss_fct(logits, labels)\n            elif self.config.problem_type == \"single_label_classification\":\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))\n            elif self.config.problem_type == \"multi_label_classification\":\n                loss_fct = BCEWithLogitsLoss()\n                loss = loss_fct(logits, labels)\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequenceClassifierOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"\n    Bert Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a\n    softmax) e.g. for RocStories/SWAG tasks.\n    \"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForMultipleChoice(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n\n        self.bert = BertModel(config)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, 1)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, num_choices, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=MultipleChoiceModelOutput,\n        config_class=_CONFIG_FOR_DOC,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], MultipleChoiceModelOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the multiple choice classification loss. Indices should be in `[0, ...,\n            num_choices-1]` where `num_choices` is the size of the second dimension of the input tensors. (See\n            `input_ids` above)\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        num_choices = input_ids.shape[1] if input_ids is not None else inputs_embeds.shape[1]\n\n        input_ids = input_ids.view(-1, input_ids.size(-1)) if input_ids is not None else None\n        attention_mask = attention_mask.view(-1, attention_mask.size(-1)) if attention_mask is not None else None\n        token_type_ids = token_type_ids.view(-1, token_type_ids.size(-1)) if token_type_ids is not None else None\n        position_ids = position_ids.view(-1, position_ids.size(-1)) if position_ids is not None else None\n        inputs_embeds = (\n            inputs_embeds.view(-1, inputs_embeds.size(-2), inputs_embeds.size(-1))\n            if inputs_embeds is not None\n            else None\n        )\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        pooled_output = outputs[1]\n\n        pooled_output = self.dropout(pooled_output)\n        logits = self.classifier(pooled_output)\n        reshaped_logits = logits.view(-1, num_choices)\n\n        loss = None\n        if labels is not None:\n            loss_fct = CrossEntropyLoss()\n            loss = loss_fct(reshaped_logits, labels)\n\n        if not return_dict:\n            output = (reshaped_logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MultipleChoiceModelOutput(\n            loss=loss,\n            logits=reshaped_logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ")\nclass BertForMultipleChoice(BertPreTrainedModel):\n    def __init__(self, config):\n        super().__init__(config)\n\n        self.bert = BertModel(config)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, 1)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, num_choices, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=MultipleChoiceModelOutput,\n        config_class=_CONFIG_FOR_DOC,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], MultipleChoiceModelOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for computing the multiple choice classification loss. Indices should be in `[0, ...,\n            num_choices-1]` where `num_choices` is the size of the second dimension of the input tensors. (See\n            `input_ids` above)\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        num_choices = input_ids.shape[1] if input_ids is not None else inputs_embeds.shape[1]\n\n        input_ids = input_ids.view(-1, input_ids.size(-1)) if input_ids is not None else None\n        attention_mask = attention_mask.view(-1, attention_mask.size(-1)) if attention_mask is not None else None\n        token_type_ids = token_type_ids.view(-1, token_type_ids.size(-1)) if token_type_ids is not None else None\n        position_ids = position_ids.view(-1, position_ids.size(-1)) if position_ids is not None else None\n        inputs_embeds = (\n            inputs_embeds.view(-1, inputs_embeds.size(-2), inputs_embeds.size(-1))\n            if inputs_embeds is not None\n            else None\n        )\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        pooled_output = outputs[1]\n\n        pooled_output = self.dropout(pooled_output)\n        logits = self.classifier(pooled_output)\n        reshaped_logits = logits.view(-1, num_choices)\n\n        loss = None\n        if labels is not None:\n            loss_fct = CrossEntropyLoss()\n            loss = loss_fct(reshaped_logits, labels)\n\n        if not return_dict:\n            output = (reshaped_logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MultipleChoiceModelOutput(\n            loss=loss,\n            logits=reshaped_logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"\n    Bert Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for\n    Named-Entity-Recognition (NER) tasks.\n    \"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForTokenClassification(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_TOKEN_CLASSIFICATION,\n        output_type=TokenClassifierOutput,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=_TOKEN_CLASS_EXPECTED_OUTPUT,\n        expected_loss=_TOKEN_CLASS_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        reduction_loss = None, # We add reduction to get loss of each token\n    ) -> Union[Tuple[torch.Tensor], TokenClassifierOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Labels for computing the token classification loss. Indices should be in `[0, ..., config.num_labels - 1]`.\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n\n        sequence_output = self.dropout(sequence_output)\n        logits = self.classifier(sequence_output)\n\n        loss = None\n        if labels is not None:\n            # Only keep active parts of the loss\n            if attention_mask is not None and reduction_loss is not None:\n                loss_fct = CrossEntropyLoss(reduction=reduction_loss)\n                active_loss = attention_mask.view(-1) == 1\n                active_logits = logits.view(-1, self.num_labels)\n                active_labels = torch.where(\n                    active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels)\n                )\n                loss = loss_fct(active_logits, active_labels)\n            else:\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenClassifierOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ")\nclass BertForTokenClassification(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        classifier_dropout = (\n            config.classifier_dropout if config.classifier_dropout is not None else config.hidden_dropout_prob\n        )\n        self.dropout = nn.Dropout(classifier_dropout)\n        self.classifier = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_TOKEN_CLASSIFICATION,\n        output_type=TokenClassifierOutput,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=_TOKEN_CLASS_EXPECTED_OUTPUT,\n        expected_loss=_TOKEN_CLASS_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        labels: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        reduction_loss = None, # We add reduction to get loss of each token\n    ) -> Union[Tuple[torch.Tensor], TokenClassifierOutput]:\n        r\"\"\"\n        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Labels for computing the token classification loss. Indices should be in `[0, ..., config.num_labels - 1]`.\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n\n        sequence_output = self.dropout(sequence_output)\n        logits = self.classifier(sequence_output)\n\n        loss = None\n        if labels is not None:\n            # Only keep active parts of the loss\n            if attention_mask is not None and reduction_loss is not None:\n                loss_fct = CrossEntropyLoss(reduction=reduction_loss)\n                active_loss = attention_mask.view(-1) == 1\n                active_logits = logits.view(-1, self.num_labels)\n                active_labels = torch.where(\n                    active_loss, labels.view(-1), torch.tensor(loss_fct.ignore_index).type_as(labels)\n                )\n                loss = loss_fct(active_logits, active_labels)\n            else:\n                loss_fct = CrossEntropyLoss()\n                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenClassifierOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", "\n\n@add_start_docstrings(\n    \"\"\"\n    Bert Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear\n    layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n    \"\"\",\n    BERT_START_DOCSTRING,\n)\nclass BertForQuestionAnswering(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        self.qa_outputs = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_QA,\n        output_type=QuestionAnsweringModelOutput,\n        config_class=_CONFIG_FOR_DOC,\n        qa_target_start_index=_QA_TARGET_START_INDEX,\n        qa_target_end_index=_QA_TARGET_END_INDEX,\n        expected_output=_QA_EXPECTED_OUTPUT,\n        expected_loss=_QA_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        start_positions: Optional[torch.Tensor] = None,\n        end_positions: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], QuestionAnsweringModelOutput]:\n        r\"\"\"\n        start_positions (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for position (index) of the start of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`). Position outside of the sequence\n            are not taken into account for computing the loss.\n        end_positions (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for position (index) of the end of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`). Position outside of the sequence\n            are not taken into account for computing the loss.\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n\n        logits = self.qa_outputs(sequence_output)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1).contiguous()\n        end_logits = end_logits.squeeze(-1).contiguous()\n\n        total_loss = None\n        if start_positions is not None and end_positions is not None:\n            # If we are on multi-GPU, split add a dimension\n            if len(start_positions.size()) > 1:\n                start_positions = start_positions.squeeze(-1)\n            if len(end_positions.size()) > 1:\n                end_positions = end_positions.squeeze(-1)\n            # sometimes the start/end positions are outside our model inputs, we ignore these terms\n            ignored_index = start_logits.size(1)\n            start_positions = start_positions.clamp(0, ignored_index)\n            end_positions = end_positions.clamp(0, ignored_index)\n\n            loss_fct = CrossEntropyLoss(ignore_index=ignored_index)\n            start_loss = loss_fct(start_logits, start_positions)\n            end_loss = loss_fct(end_logits, end_positions)\n            total_loss = (start_loss + end_loss) / 2\n\n        if not return_dict:\n            output = (start_logits, end_logits) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return QuestionAnsweringModelOutput(\n            loss=total_loss,\n            start_logits=start_logits,\n            end_logits=end_logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ")\nclass BertForQuestionAnswering(BertPreTrainedModel):\n\n    _keys_to_ignore_on_load_unexpected = [r\"pooler\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n\n        self.bert = BertModel(config, add_pooling_layer=False)\n        self.qa_outputs = nn.Linear(config.hidden_size, config.num_labels)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    @add_start_docstrings_to_model_forward(BERT_INPUTS_DOCSTRING.format(\"batch_size, sequence_length\"))\n    @add_code_sample_docstrings(\n        processor_class=_TOKENIZER_FOR_DOC,\n        checkpoint=_CHECKPOINT_FOR_QA,\n        output_type=QuestionAnsweringModelOutput,\n        config_class=_CONFIG_FOR_DOC,\n        qa_target_start_index=_QA_TARGET_START_INDEX,\n        qa_target_end_index=_QA_TARGET_END_INDEX,\n        expected_output=_QA_EXPECTED_OUTPUT,\n        expected_loss=_QA_EXPECTED_LOSS,\n    )\n    def forward(\n        self,\n        input_ids: Optional[torch.Tensor] = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        token_type_ids: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.Tensor] = None,\n        head_mask: Optional[torch.Tensor] = None,\n        inputs_embeds: Optional[torch.Tensor] = None,\n        start_positions: Optional[torch.Tensor] = None,\n        end_positions: Optional[torch.Tensor] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.Tensor], QuestionAnsweringModelOutput]:\n        r\"\"\"\n        start_positions (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for position (index) of the start of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`). Position outside of the sequence\n            are not taken into account for computing the loss.\n        end_positions (`torch.LongTensor` of shape `(batch_size,)`, *optional*):\n            Labels for position (index) of the end of the labelled span for computing the token classification loss.\n            Positions are clamped to the length of the sequence (`sequence_length`). Position outside of the sequence\n            are not taken into account for computing the loss.\n        \"\"\"\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        outputs = self.bert(\n            input_ids,\n            attention_mask=attention_mask,\n            token_type_ids=token_type_ids,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = outputs[0]\n\n        logits = self.qa_outputs(sequence_output)\n        start_logits, end_logits = logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1).contiguous()\n        end_logits = end_logits.squeeze(-1).contiguous()\n\n        total_loss = None\n        if start_positions is not None and end_positions is not None:\n            # If we are on multi-GPU, split add a dimension\n            if len(start_positions.size()) > 1:\n                start_positions = start_positions.squeeze(-1)\n            if len(end_positions.size()) > 1:\n                end_positions = end_positions.squeeze(-1)\n            # sometimes the start/end positions are outside our model inputs, we ignore these terms\n            ignored_index = start_logits.size(1)\n            start_positions = start_positions.clamp(0, ignored_index)\n            end_positions = end_positions.clamp(0, ignored_index)\n\n            loss_fct = CrossEntropyLoss(ignore_index=ignored_index)\n            start_loss = loss_fct(start_logits, start_positions)\n            end_loss = loss_fct(end_logits, end_positions)\n            total_loss = (start_loss + end_loss) / 2\n\n        if not return_dict:\n            output = (start_logits, end_logits) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return QuestionAnsweringModelOutput(\n            loss=total_loss,\n            start_logits=start_logits,\n            end_logits=end_logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )", ""]}
{"filename": "models/BertSequence.py", "chunked_list": ["import torch.nn as nn\nimport torch\n# from transformers import BertForTokenClassification\nfrom models.sequence_modeling_bert import BertForTokenClassification\n\nclass BertSequence(nn.Module):\n    def __init__(self, num_labels):\n        super().__init__()\n        self.num_labels = num_labels\n        self.bert = BertForTokenClassification.from_pretrained(\n            'bert-base-uncased',\n            num_labels = num_labels,\n            return_dict=False\n        )\n\n    def forward(self, input_ids, attention_mask, labels, reduction_loss=None): \n        # assign reduction_loss = mean to get loss of each token\n        loss, tr_logits = self.bert(\n            input_ids=input_ids, \n            attention_mask=attention_mask, \n            labels=labels, \n            reduction_loss=reduction_loss\n        )\n        return loss, tr_logits\n    \n    def predict(self, input_ids, attention_mask):\n        outputs = self.bert(input_ids, attention_mask=attention_mask)\n        return outputs", "\n\n\ndef load_bert_sequence_model(path, num_labels, device):\n    model = BertSequence(num_labels=num_labels)\n    model = nn.DataParallel(model)\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    return model\n\ndef build_bert_sequence_model(num_labels, device):\n    model = BertSequence(num_labels=num_labels)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model", "\ndef build_bert_sequence_model(num_labels, device):\n    model = BertSequence(num_labels=num_labels)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model"]}
{"filename": "models/BigClone.py", "chunked_list": ["# Copyright (c) Microsoft Corporation. \n# Licensed under the MIT license.\nimport torch\nimport torch.nn as nn\nimport torch\nfrom torch.autograd import Variable\nimport copy\nimport torch.nn.functional as F\nfrom torch.nn import CrossEntropyLoss, MSELoss\nfrom transformers import RobertaConfig, RobertaModel, RobertaTokenizer", "from torch.nn import CrossEntropyLoss, MSELoss\nfrom transformers import RobertaConfig, RobertaModel, RobertaTokenizer\n\n\nclass RobertaClassificationHead(nn.Module):\n    \"\"\"Head for sentence-level classification tasks.\"\"\"\n\n    def __init__(self, config):\n        super().__init__()\n        self.dense = nn.Linear(config.hidden_size*2, config.hidden_size)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self.out_proj = nn.Linear(config.hidden_size, 2)\n\n    def forward(self, features, **kwargs):\n        x = features[:, 0, :]  # take <s> token (equiv. to [CLS])\n        x = x.reshape(-1,x.size(-1)*2)\n        x = self.dropout(x)\n        x = self.dense(x)\n        x = torch.tanh(x)\n        x = self.dropout(x)\n        x = self.out_proj(x)\n        return x", "        \nclass BigClone(nn.Module):   \n    def __init__(self, number_classes=2):\n        super(BigClone, self).__init__()\n        encoder, tokenizer, configer, block_size = config()\n        self.encoder = encoder\n        self.tokenizer=tokenizer\n        self.classifier=RobertaClassificationHead(configer)\n        self.block_size = block_size\n    \n        \n    def forward(self, input_ids=None): \n        input_ids=input_ids.view(-1,self.block_size)\n        outputs = self.encoder(input_ids=input_ids,attention_mask=input_ids.ne(1))[0]\n        logits=self.classifier(outputs)\n        return logits", "\ndef load_BigClone_model(path, number_classes, device):\n    model = BigClone(number_classes=number_classes)\n    model = nn.DataParallel(model)\n    model.load_state_dict(torch.load(path))\n    model.to(device)\n    return model\n\ndef build_BigClone_model(number_classes, device):\n    model = BigClone(number_classes=number_classes)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model", "def build_BigClone_model(number_classes, device):\n    model = BigClone(number_classes=number_classes)\n    model = nn.DataParallel(model)\n    model.to(device)\n    return model\n\n\ndef config():\n    config_class, model_class, tokenizer_class = RobertaConfig, RobertaModel, RobertaTokenizer\n    config = config_class.from_pretrained(\"microsoft/codebert-base\",\n                                          cache_dir=None)\n    config.num_labels=2 \n    tokenizer = tokenizer_class.from_pretrained(\"roberta-base\",\n                                                do_lower_case=False,\n                                                cache_dir= None)\n    encoder = model_class.from_pretrained(\"microsoft/codebert-base\",\n                                            from_tf=bool('.ckpt' in \"microsoft/codebert-base\"),\n                                            config=config,\n                                            cache_dir=None) \n    block_size = min(400, tokenizer.max_len_single_sentence)\n    return encoder, tokenizer, config, block_size      ", "        \n \n        \n\n\n"]}
{"filename": "influencer/IF.py", "chunked_list": ["import torch\nfrom tqdm import tqdm\nfrom influencer.hessian import exact_hessian\nfrom influencer.stest import build_stest\n\ndef IF(test_loader, train_loader, test_gradients, train_gradients, inference_fn, loss_fn, params, use_exact_hessian = True, eps=0.1, device='cuda'):\n    results = torch.zeros(len(test_gradients), len(train_gradients), dtype=float)\n    for p, zt in enumerate(tqdm(test_loader)):\n        if use_exact_hessian:\n            gt = test_gradients[p]\n            gt = torch.cat([x.view(-1) for x in gt])\n            gt = gt.view(-1, 1).to(device)\n            H = exact_hessian(zt, inference_fn, params, loss_fn).to(device)\n            H += torch.eye(H.shape[0]).to(device) * eps\n            inverse_hessian = torch.inverse(H)\n            for q, g in enumerate(train_gradients):\n                g = torch.cat([x.view(-1) for x in g])\n                g = g.view(-1, 1).to(device)\n                influence = gt.T @ inverse_hessian @ g\n                results[p][q] = influence.item()\n        else:\n            gt = build_stest(zt, inference_fn, loss_fn, params, train_loader)\n            for q, g in enumerate(train_gradients):\n                influence = sum([torch.sum(k * j).data for k, j in zip(gt, g)])\n                influence = float(influence.cpu().detach().numpy())\n                results[p][q] = influence\n    results = results.cpu().detach().numpy()\n    return results"]}
{"filename": "influencer/hessian.py", "chunked_list": ["import torch\nimport tqdm\nfrom torch.autograd import grad\n\ndef exact_hessian(sample, inference_fn, params, loss_fn):\n    preds, labels = inference_fn(sample)\n    loss = loss_fn(preds, labels)\n    loss_grad = grad(loss, params, retain_graph=True, create_graph=True)\n\n    cnt = 0\n    for g in loss_grad:\n        g_vector = g.contiguous().view(-1) if cnt == 0 else torch.cat([g_vector, g.contiguous().view(-1)])\n        cnt = 1\n\n    l = g_vector.size(0)\n    hessian = torch.zeros(l,l)\n\n    for idx in range(l):\n        grad2rd = grad(g_vector[idx], params, retain_graph=True, create_graph=False)\n        cnt = 0\n        for g in grad2rd:\n            g2 = g.contiguous(\n            ).view(-1) if cnt == 0 else torch.cat([g2, g.contiguous().view(-1)])\n            cnt = 1\n        hessian[idx] = g2\n\n    return hessian"]}
{"filename": "influencer/GD.py", "chunked_list": ["import torch\nimport tqdm\n\ndef GD(train_gradients, test_gradients):\n    results = torch.zeros(len(test_gradients), len(train_gradients), dtype=float)\n    for p, gt in enumerate(tqdm.tqdm(test_gradients)):\n        for q, g in enumerate(train_gradients):\n            influence = sum([torch.sum(k * j).data for k, j in zip(gt, g)])\n            influence = float(influence.cpu().detach().numpy())\n            results[p][q] = influence\n    results = results.cpu().detach().numpy()\n    return results"]}
{"filename": "influencer/GC.py", "chunked_list": ["import torch\nimport tqdm\nimport torch.nn as nn\n\ncos = nn.CosineSimilarity(dim=-1, eps=1e-6)\n\ndef GC(train_gradients, test_gradients):\n    results = torch.zeros(len(test_gradients), len(train_gradients), dtype=float)\n    \n    for p, gt in enumerate(tqdm.tqdm(test_gradients)):\n        gt = torch.cat([x.view(-1) for x in gt])\n        for q, g in enumerate(train_gradients):\n            g = torch.cat([x.view(-1) for x in g])\n            influence = cos(gt, g).item()\n            results[p][q] = influence\n    results = results.cpu().detach().numpy()\n    return results"]}
{"filename": "influencer/gradz.py", "chunked_list": ["from torch.autograd import grad\n\ndef grad_z(inference_fn, loss_fn, params, data, create_graph=False):\n    prediction, label = inference_fn(data)\n    loss = loss_fn(prediction, label)\n    return list(grad(loss, params, create_graph=create_graph))"]}
{"filename": "influencer/buildGradient.py", "chunked_list": ["import torch\nimport tqdm\nfrom influencer.gradz import grad_z\n\ndef build_gradient(inference_fn, loss_fn, params, dataloader):\n    gradients = []\n    for data in tqdm.tqdm(dataloader):\n        z_grad = grad_z(inference_fn, loss_fn, params, data, create_graph=False)\n        # Send to cpu to Reduce memory\n        weight, bias = z_grad\n        weight = weight.to('cpu')\n        bias = bias.to('cpu')\n        gradients.append([weight, bias])\n    return gradients"]}
{"filename": "influencer/hvp.py", "chunked_list": ["from torch.autograd import grad\nimport torch\n\ndef hvp(y, w, v):\n    \"\"\" Multiply the Hessians of y and w by v.\n    Uses a backprop-like approach to compute the product between the Hessian\n    and another vector efficiently, which even works for large Hessians.\n    Example: if: y = 0.5 * w^T A x then hvp(y, w, v) returns and expression\n    which evaluates to the same values as (A + A.t) v.\n    Arguments:\n        y: scalar/tensor, for example the output of the loss function\n        w: list of torch tensors, tensors over which the Hessian\n            should be constructed\n        v: list of torch tensors, same shape as w,\n            will be multiplied with the Hessian\n    Returns:\n        return_grads: list of torch tensors, contains product of Hessian and v.\n    Raises:\n        ValueError: `y` and `w` have a different length.\n    \"\"\"\n    if len(w) != len(v):\n        raise(ValueError(\"w and v must have the same length\"))\n    \n    first_grads = grad(y, w, retain_graph=True, create_graph=True)\n\n    # Elementwise products\n    elementwise_products = 0\n    for grad_elem, v_elem in zip(first_grads, v):\n        elementwise_products += torch.sum(grad_elem * v_elem)\n\n    # second grad\n    return_grads = grad(elementwise_products, w, create_graph=False)\n\n    return return_grads"]}
{"filename": "influencer/RIF.py", "chunked_list": ["import imp\nimport torch\nimport math\nfrom tqdm import tqdm\nfrom influencer.hessian import exact_hessian\nfrom influencer.stest import build_stest\n\ndef RIF(test_loader, train_loader, test_gradients, train_gradients, inference_fn, loss_fn, params, use_exact_hessian = True, eps=0.1, device='cuda'):\n    results = torch.zeros(len(test_gradients), len(train_gradients), dtype=float)\n    for q, z in enumerate(tqdm(train_loader)):\n        if use_exact_hessian:\n            g = train_gradients[q]\n            g = torch.cat([x.view(-1) for x in g])\n            g = g.view(-1, 1).to(device)\n            H = exact_hessian(z, inference_fn, params, loss_fn).to(device)\n            H += torch.eye(H.shape[0]).to(device) * eps\n            inverse_hessian = torch.inverse(H)\n            sqrt_denominator = math.sqrt((g.T @ inverse_hessian @ g).item())\n            for p, zt in enumerate(test_loader):\n                gt = test_gradients[p]\n                gt = torch.cat([x.view(-1) for x in gt])\n                gt = gt.view(-1, 1).to(device)\n                H_t = exact_hessian(zt, inference_fn, params, loss_fn).to(device)\n                H_t += torch.eye(H_t.shape[0]).to(device) * eps\n                inverse_hessian_t = torch.inverse(H_t)\n                numerator = gt.T @ inverse_hessian_t @ gt\n                numerator = numerator.item()\n                results[p][q] = numerator/sqrt_denominator\n        else:\n            g = train_gradients[q]\n            s = build_stest(z, inference_fn, loss_fn, params, train_loader, num_iteration=50)\n            sqrt_denominator = math.sqrt(float(sum([torch.sum(k*j).data for k, j in zip(s, g)]).cpu().detach().numpy()))\n            for p, zt in enumerate(test_loader):\n                st = build_stest(zt, inference_fn, loss_fn, params, train_loader, num_iteration=50)\n                numerator = sum([torch.sum(k * j).data for k, j in zip(st, g)])\n                numerator = float(numerator.cpu().detach().numpy())\n                results[p][q] = numerator/sqrt_denominator\n    \n    results = results.cpu().detach().numpy()\n    return results"]}
{"filename": "influencer/TracIn.py", "chunked_list": ["import torch\nimport tqdm\nfrom influencer.buildGradient import build_gradient\n\ndef TracIn(dir_checkpoint, model_base, train_loader, test_loader, loss_fn, start, end):\n    results = torch.zeros(len(test_loader), len(train_loader), dtype=float) \n    for epoch in range(start, end+1):\n        model_base.load_model(dir_checkpoint + '/epoch_' + str(epoch) + '.pt')\n        params = [p for p in model_base.model.parameters() if p.requires_grad][-2:]\n        \n        train_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            dataloader=train_loader\n        )\n        test_gradients = build_gradient(\n            inference_fn = model_base.inference,\n            loss_fn=loss_fn,\n            params=params,\n            dataloader=test_loader\n        )\n        for p, gt in enumerate(tqdm.tqdm(test_gradients)):\n            for q, g in enumerate(train_gradients):\n                influence = sum([torch.sum(k * j).data for k, j in zip(gt, g)])\n                influence = float(influence.cpu().detach().numpy())\n                results[p][q] += influence\n        \n        train_gradients, test_gradients = None, None\n    results = results.cpu().detach().numpy()\n    return results", ""]}
{"filename": "influencer/stest.py", "chunked_list": ["import torch\nfrom influencer.gradz import grad_z\nfrom influencer.hvp import hvp\n\ndef s_test(inference_fn, loss_fn, params, zt, dataloader, num_sample = 1, damp=0.01, scale=25.0):\n    v = grad_z(inference_fn, loss_fn, params, zt, create_graph=False)\n    h_estimate = v.copy() # h_estimate ~ H(-1)v\n    for i, data in enumerate(dataloader):\n        predictions, labels = inference_fn(data)\n        loss = loss_fn(predictions, labels)\n        hv = hvp(loss, params, h_estimate)\n        h_estimate = [_v + (1 - damp) * _he - _hv/scale for _v, _he, _hv in zip(v, h_estimate, hv)]\n        if i == num_sample:\n            break\n\n    return h_estimate", "\ndef build_stest(zt, inference_fn, loss_fn, params, train_loader, num_iteration=300, scale=25.0):\n    inverse_hvp = [torch.zeros_like(p, dtype=torch.float) for p in params]\n    cur_estimate = s_test(inference_fn, loss_fn, params, zt, train_loader)\n    for r in range(num_iteration):\n        with torch.no_grad():\n            inverse_hvp = [old + (cur/scale) for old, cur in zip(inverse_hvp, cur_estimate)]\n    with torch.no_grad():\n        inverse_hvp = [j / num_iteration for j in inverse_hvp]\n    weight, bias = inverse_hvp\n    weight = weight.to('cpu')\n    bias = bias.to('cpu')\n    gt = [weight, bias]\n    return gt"]}
