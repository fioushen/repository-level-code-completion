{"filename": "src/nautobot_device_resources/template_content.py", "chunked_list": ["from nautobot.extras.plugins import TemplateExtension\n\nfrom .consts import PLUGIN_NAME\nfrom .models import CPU\nfrom .models import DeviceResource\n\n\n# pylint: disable-next=abstract-method\nclass CPUTemplateExtension(TemplateExtension):\n    \"\"\"Extend Manufacturer detail view to show CPU details\"\"\"\n\n    model = \"dcim.manufacturer\"\n\n    def right_page(self):\n        \"\"\"Plugin content to add to the right column.\"\"\"\n\n        cpu_count = CPU.objects.filter(manufacturer=self.context[\"object\"]).count\n\n        return self.render(\n            f\"{PLUGIN_NAME}/cpu_manufacturer_extension.html\",\n            extra_context={\n                \"cpu_count\": cpu_count,\n            },\n        )", "class CPUTemplateExtension(TemplateExtension):\n    \"\"\"Extend Manufacturer detail view to show CPU details\"\"\"\n\n    model = \"dcim.manufacturer\"\n\n    def right_page(self):\n        \"\"\"Plugin content to add to the right column.\"\"\"\n\n        cpu_count = CPU.objects.filter(manufacturer=self.context[\"object\"]).count\n\n        return self.render(\n            f\"{PLUGIN_NAME}/cpu_manufacturer_extension.html\",\n            extra_context={\n                \"cpu_count\": cpu_count,\n            },\n        )", "\n\n# pylint: disable-next=abstract-method\nclass DeviceResourceTemplateExtension(TemplateExtension):\n    \"\"\"Template to show device resources on its detail page.\"\"\"\n\n    model = \"dcim.device\"\n\n    def right_page(self):\n        \"\"\"Plugin content to add to the right column.\"\"\"\n        try:\n            resources = DeviceResource.objects.get(device=self.context[\"object\"])\n        except DeviceResource.DoesNotExist:\n            resources = DeviceResource()\n\n        return self.render(\n            f\"{PLUGIN_NAME}/device_resources.html\",\n            extra_context={\n                \"resources\": resources,\n            },\n        )", "\n\ntemplate_extensions = [CPUTemplateExtension, DeviceResourceTemplateExtension]\n"]}
{"filename": "src/nautobot_device_resources/consts.py", "chunked_list": ["PLUGIN_NAME = \"nautobot_device_resources\"\n"]}
{"filename": "src/nautobot_device_resources/models.py", "chunked_list": ["from django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.shortcuts import reverse\nfrom nautobot.core.fields import AutoSlugField\nfrom nautobot.core.models.generics import OrganizationalModel\nfrom nautobot.extras.utils import extras_features\n\nfrom .consts import PLUGIN_NAME\n\n", "\n\n@extras_features(\n    \"export_templates\",\n    \"graphql\",\n)\n# pylint: disable-next=too-many-ancestors\nclass DeviceResource(OrganizationalModel):\n    \"\"\"Single record of device resources.\"\"\"\n\n    device = models.OneToOneField(\n        to=\"dcim.Device\",\n        on_delete=models.CASCADE,\n        related_name=\"resources\",\n        null=False,\n        unique=True,\n    )\n    cpu = models.ForeignKey(\n        to=f\"{PLUGIN_NAME}.CPU\",\n        verbose_name=\"CPU\",\n        on_delete=models.PROTECT,\n        related_name=\"instances\",\n        blank=True,\n        null=True,\n    )\n    cpu_count = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name=\"CPU count\")\n    gpu = models.CharField(max_length=200, blank=True, verbose_name=\"GPU\")\n    ram = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name=\"RAM\", help_text=\"Value in GB\")\n    disks = models.CharField(max_length=200, blank=True)\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        ordering = [\"device\"]\n        verbose_name = \"Device Resource\"\n        verbose_name_plural = \"Device Resources\"\n\n    def __str__(self) -> str:\n        \"\"\"Overwrite __str__ method to return correct item.\"\"\"\n        return str(self.device) or super().__str__()\n\n    @property\n    def label(self) -> str:\n        \"\"\"Set label so pynautobot has string representation of the object.\"\"\"\n        return str(self)\n\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n\n    @property\n    def cpu_threads(self) -> int | None:\n        \"\"\"Calculate total number of CPU threads.\"\"\"\n        if not self.cpu:\n            return None\n        return self.cpu.threads * self.cpu_count\n\n    def clean(self):\n        super().clean()\n        # remove cores when removing CPU\n        if self.cpu is None and self.present_in_database and DeviceResource.objects.get(id=self.id).cpu_count:\n            self.cpu_count = None\n\n        if self.cpu and not self.cpu_count:\n            raise ValidationError(\n                {\n                    \"cpu_count\": \"Please set number of CPUs when setting 'CPU'.\",\n                }\n            )\n        if self.cpu_count and not self.cpu:\n            raise ValidationError(\n                {\n                    \"cpu_count\": \"Cannot set 'CPU count' without setting 'CPU'.\",\n                }\n            )", "\n\n@extras_features(\n    \"export_templates\",\n    \"graphql\",\n)\n# pylint: disable-next=too-many-ancestors\nclass CPU(OrganizationalModel):\n    \"\"\"Single record of device CPU.\"\"\"\n\n    manufacturer = models.ForeignKey(to=\"dcim.Manufacturer\", on_delete=models.PROTECT, related_name=\"cpus\")\n    name = models.CharField(max_length=200, blank=False, verbose_name=\"CPU\")\n    slug = AutoSlugField(populate_from=\"name\", unique=True, db_index=True)\n    cores = models.PositiveSmallIntegerField(blank=False, verbose_name=\"CPU cores\", help_text=\"Number of cores\")\n    threads_per_core = models.PositiveSmallIntegerField(\n        blank=False, null=False, verbose_name=\"Threads per Core\", help_text=\"Number of threads per core.\", default=2\n    )\n\n    csv_headers = [\"name\", \"slug\", \"manufacturer\", \"cores\", \"threads_per_core\"]\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        ordering = [\"name\"]\n        verbose_name = \"CPU\"\n        verbose_name_plural = \"CPUs\"\n\n    def __str__(self) -> str:\n        \"\"\"Overwrite __str__ method to return correct item.\"\"\"\n        return str(self.name)\n\n    @property\n    def label(self) -> str:\n        \"\"\"Set label so pynautobot has string representation of the object.\"\"\"\n        return str(self)\n\n    @property\n    def threads(self) -> int | None:\n        \"\"\"Calculate number of CPU threads from cores.\"\"\"\n        return self.cores * self.threads_per_core\n\n    def clean(self):\n        super().clean()\n\n        # make sure threads_per_core is power of 2 (including 1)\n        if self.threads_per_core and not (self.threads_per_core & (self.threads_per_core - 1) == 0):\n            raise ValidationError(\n                {\n                    \"threads_per_core\": f\"Invalid value {self.cores}, must be power of 2,\",\n                }\n            )\n\n    def get_absolute_url(self):\n        return reverse(f\"plugins:{PLUGIN_NAME}:cpu\", args=[self.slug])\n\n    def to_csv(self):\n        return (\n            self.name,\n            self.slug,\n            self.manufacturer.name,\n            self.cores,\n            self.threads_per_core,\n        )", ""]}
{"filename": "src/nautobot_device_resources/forms.py", "chunked_list": ["from django import forms\nfrom nautobot.dcim.forms import DeviceCSVForm as NautobotDeviceCSVForm\nfrom nautobot.dcim.forms import DeviceFilterForm\nfrom nautobot.dcim.forms import DeviceForm\nfrom nautobot.dcim.models import Manufacturer\nfrom nautobot.extras.forms import NautobotBulkEditForm\nfrom nautobot.extras.forms import NautobotFilterForm\nfrom nautobot.extras.forms import NautobotModelForm\nfrom nautobot.utilities.forms import BootstrapMixin\nfrom nautobot.utilities.forms import CSVModelChoiceField", "from nautobot.utilities.forms import BootstrapMixin\nfrom nautobot.utilities.forms import CSVModelChoiceField\nfrom nautobot.utilities.forms import CSVModelForm\nfrom nautobot.utilities.forms import DynamicModelChoiceField\nfrom nautobot.utilities.forms import DynamicModelMultipleChoiceField\nfrom nautobot.utilities.forms import SlugField\n\nfrom .generic.forms import MixedCSVFormMixin\nfrom .generic.forms import MixedFormMixin\nfrom .models import CPU", "from .generic.forms import MixedFormMixin\nfrom .models import CPU\nfrom .models import DeviceResource\n\n\nclass DeviceResourceForm(BootstrapMixin, forms.ModelForm):\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = DeviceResource\n        fields = [\"cpu\", \"cpu_count\", \"gpu\", \"ram\", \"disks\"]", "\n\nclass DeviceResourceCSVForm(DeviceResourceForm):\n    cpu = CSVModelChoiceField(\n        required=False,\n        queryset=CPU.objects.all(),\n        to_field_name=\"name\",\n        label=\"CPU\",\n    )\n", "\n\n# pylint: disable=too-many-ancestors\nclass DeviceCSVForm(NautobotDeviceCSVForm, MixedCSVFormMixin):\n    child_model = DeviceResource\n    child_foreign_link = \"resources\"\n    child_foreign_field = \"device\"\n    child_form = DeviceResourceCSVForm\n\n", "\n\n# pylint: disable-next=too-many-ancestors\nclass DeviceMixedForm(DeviceForm, MixedFormMixin):\n    child_model = DeviceResource\n    child_foreign_link = \"resources\"\n    child_foreign_field = \"device\"\n    child_form = DeviceResourceForm\n\n", "\n\n# pylint: disable-next=too-many-ancestors\nclass DeviceListFilterForm(DeviceFilterForm):\n    cpu = DynamicModelMultipleChoiceField(\n        required=False,\n        queryset=CPU.objects.all(),\n        to_field_name=\"name\",\n        display_field=\"CPU\",\n        label=\"CPU\",\n    )\n    cpu_count = forms.IntegerField(\n        min_value=1,\n        required=False,\n        label=\"CPU count\",\n    )\n    gpu = forms.CharField(\n        required=False,\n        label=\"GPU\",\n    )\n    ram = forms.IntegerField(\n        min_value=1,\n        required=False,\n        label=\"RAM (GB)\",\n    )\n    disks = forms.CharField(\n        required=False,\n        label=\"Disks\",\n    )", "\n\n# pylint: disable-next=too-many-ancestors\nclass CPUForm(NautobotModelForm):\n    manufacturer = DynamicModelChoiceField(queryset=Manufacturer.objects.all())\n    slug = SlugField(slug_source=\"name\")\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU\n        fields = [\n            \"manufacturer\",\n            \"name\",\n            \"slug\",\n            \"cores\",\n            \"threads_per_core\",\n        ]", "\n\nclass CPUFilterForm(NautobotFilterForm):\n    model = CPU\n    field_order = [\n        \"q\",\n        \"manufacturer\",\n        \"cores\",\n        \"threads_per_core\",\n    ]\n    q = forms.CharField(required=False, label=\"Search\")\n    manufacturer = DynamicModelMultipleChoiceField(\n        queryset=Manufacturer.objects.all(), to_field_name=\"name\", required=False\n    )\n    cores = forms.IntegerField(min_value=0, required=False, label=\"Cores\")\n    threads_per_core = forms.IntegerField(min_value=0, required=False, label=\"Threads per Core\")", "\n\n# pylint: disable-next=too-many-ancestors\nclass CPUBulkEditForm(NautobotBulkEditForm):\n    pk = forms.ModelMultipleChoiceField(queryset=CPU.objects.all(), widget=forms.MultipleHiddenInput())\n    manufacturer = DynamicModelChoiceField(queryset=Manufacturer.objects.all(), required=False)\n    cores = forms.IntegerField(min_value=0, required=False, label=\"Cores\")\n    threads_per_core = forms.IntegerField(min_value=0, required=False, label=\"Threads per Core\")\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU", "\n\nclass CPUCSVForm(CSVModelForm):\n    manufacturer = CSVModelChoiceField(queryset=Manufacturer.objects.all(), to_field_name=\"name\")\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU\n        fields = [\n            \"name\",\n            \"slug\",\n            \"manufacturer\",\n            \"cores\",\n            \"threads_per_core\",\n        ]", ""]}
{"filename": "src/nautobot_device_resources/urls.py", "chunked_list": ["from django.urls import path\nfrom nautobot.extras.views import ObjectNotesView\n\nfrom . import views\nfrom .models import CPU\n\nurlpatterns = [\n    path(\"cpus/\", views.CPUListView.as_view(), name=\"cpu_list\"),\n    path(\"cpus/add\", views.CPUEditView.as_view(), name=\"cpu_add\"),\n    path(\"cpus/edit/\", views.CPUBulkEditView.as_view(), name=\"cpu_bulk_edit\"),", "    path(\"cpus/add\", views.CPUEditView.as_view(), name=\"cpu_add\"),\n    path(\"cpus/edit/\", views.CPUBulkEditView.as_view(), name=\"cpu_bulk_edit\"),\n    path(\"cpus/import/\", views.CPUBulkImportView.as_view(), name=\"cpu_import\"),\n    path(\"cpus/delete/\", views.CPUBulkDeleteView.as_view(), name=\"cpu_bulk_delete\"),\n    path(\"cpus/<slug:slug>/\", views.CPUView.as_view(), name=\"cpu\"),\n    path(\"cpus/<slug:slug>/edit\", views.CPUEditView.as_view(), name=\"cpu_edit\"),\n    path(\"cpus/<slug:slug>/changelog/\", views.CPUChangeLogView.as_view(), name=\"cpu_changelog\", kwargs={\"model\": CPU}),\n    path(\"cpus/<slug:slug>/delete/\", views.CPUDeleteView.as_view(), name=\"cpu_delete\"),\n    path(\"cpus/<slug:slug>/notes/\", ObjectNotesView.as_view(), name=\"cpu_notes\", kwargs={\"model\": CPU}),\n]", "    path(\"cpus/<slug:slug>/notes/\", ObjectNotesView.as_view(), name=\"cpu_notes\", kwargs={\"model\": CPU}),\n]\n"]}
{"filename": "src/nautobot_device_resources/views.py", "chunked_list": ["from django.contrib.contenttypes.models import ContentType\nfrom django.forms import formset_factory\nfrom nautobot.core.views import generic\nfrom nautobot.dcim.models import Device\nfrom nautobot.dcim.views import DeviceBulkImportView\nfrom nautobot.dcim.views import DeviceEditView\nfrom nautobot.dcim.views import DeviceListView\nfrom nautobot.extras.models import ObjectChange\nfrom nautobot.extras.views import ObjectChangeLogView\nfrom nautobot.extras.views import ObjectChangeView", "from nautobot.extras.views import ObjectChangeLogView\nfrom nautobot.extras.views import ObjectChangeView\nfrom nautobot.utilities.forms.forms import DynamicFilterForm\nfrom nautobot.utilities.utils import (\n    convert_querydict_to_factory_formset_acceptable_querydict,\n)\nfrom nautobot.utilities.utils import count_related\n\nfrom . import filters\nfrom . import forms", "from . import filters\nfrom . import forms\nfrom . import tables\nfrom .consts import PLUGIN_NAME\nfrom .generic.views import EditViewMixin\nfrom .models import CPU\nfrom .models import DeviceResource\n\n\nclass DeviceResourceEditView(DeviceEditView, EditViewMixin):\n    model_form = forms.DeviceMixedForm\n    template_name = f\"{PLUGIN_NAME}/device_resources_edit.html\"", "\nclass DeviceResourceEditView(DeviceEditView, EditViewMixin):\n    model_form = forms.DeviceMixedForm\n    template_name = f\"{PLUGIN_NAME}/device_resources_edit.html\"\n\n\nclass FixedDynamicFilterForm(DynamicFilterForm):\n    \"\"\"Fix advanced filters\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # correct contenttype on the dynamic widget in advanced search to be able to search for Device fields\n        # BUG: DeviceResource fields in advanced filters cannot be searched in UI, has to be manually typed to URL\n        self.fields[\"lookup_type\"].widget.attrs[\"data-contenttype\"] = \"dcim.device\"", "\n\n# This is taken from nautobot.utilities.forms.forms with replaced `filter_form`\ndef dynamic_formset_factory(filterset_class, data=None, **kwargs):\n    filter_form = FixedDynamicFilterForm\n    filter_form.filterset_class = filterset_class\n\n    params = {\n        \"can_delete_extra\": True,\n        \"can_delete\": True,\n        \"extra\": 3,\n    }\n    kwargs.update(params)\n    form = formset_factory(form=filter_form, **kwargs)\n    if data:\n        form = form(data=data)\n\n    return form", "\n\nclass DeviceResourceListView(DeviceListView):\n    filterset = filters.DeviceFilterSet\n    filterset_form = forms.DeviceListFilterForm\n    table = tables.DeviceListTable\n\n    def extra_context(self):\n        \"\"\"Provide extra context to GET request of Device list view.\"\"\"\n        # first get instance of fixed DynamicFilterFormSet\n        if self.request.GET:\n            factory_formset_params = convert_querydict_to_factory_formset_acceptable_querydict(\n                self.request.GET, self.filterset\n            )\n            dynamic_filter_form = dynamic_formset_factory(filterset_class=self.filterset, data=factory_formset_params)\n        else:\n            dynamic_filter_form = dynamic_formset_factory(filterset_class=self.filterset)\n        # Now replace `dynamic_filter_form` in original context with our patched one\n        extra_context = super().extra_context()\n        extra_context.update(\n            {\n                \"dynamic_filter_form\": dynamic_filter_form,\n            }\n        )\n        return extra_context", "\n\nclass DeviceResourceBulkImportView(DeviceBulkImportView):\n    model_form = forms.DeviceCSVForm\n    table = tables.DeviceImportTable\n    template_name = \"dcim/device_import.html\"\n\n\nclass CPUView(generic.ObjectView):\n    queryset = CPU.objects.select_related(\"manufacturer\")\n\n    def get_extra_context(self, request, instance):\n        instance_count = DeviceResource.objects.filter(cpu=instance).count()\n        return {\n            \"instance_count\": instance_count,\n        }", "class CPUView(generic.ObjectView):\n    queryset = CPU.objects.select_related(\"manufacturer\")\n\n    def get_extra_context(self, request, instance):\n        instance_count = DeviceResource.objects.filter(cpu=instance).count()\n        return {\n            \"instance_count\": instance_count,\n        }\n\n\nclass CPUListView(generic.ObjectListView):\n    queryset = CPU.objects.select_related(\"manufacturer\").annotate(\n        instance_count=count_related(Device, \"resources__cpu\")\n    )\n    filterset = filters.CPUFilterSet\n    filterset_form = forms.CPUFilterForm\n    table = tables.CPUTable", "\n\nclass CPUListView(generic.ObjectListView):\n    queryset = CPU.objects.select_related(\"manufacturer\").annotate(\n        instance_count=count_related(Device, \"resources__cpu\")\n    )\n    filterset = filters.CPUFilterSet\n    filterset_form = forms.CPUFilterForm\n    table = tables.CPUTable\n", "\n\nclass CPUDeleteView(generic.ObjectDeleteView):\n    queryset = CPU.objects.all()\n\n\nclass CPUEditView(generic.ObjectEditView):\n    queryset = CPU.objects.all()\n    model_form = forms.CPUForm\n    template_name = f\"{PLUGIN_NAME}/cpu_edit.html\"", "\n\nclass CPUChangeLogView(ObjectChangeLogView):\n    base_template = f\"{PLUGIN_NAME}/cpu.html\"\n\n\nclass CPUBulkImportView(generic.BulkImportView):\n    queryset = CPU.objects.all()\n    model_form = forms.CPUCSVForm\n    table = tables.CPUImportTable", "\n\nclass CPUBulkEditView(generic.BulkEditView):\n    queryset = CPU.objects.select_related(\"manufacturer\")\n    filterset = filters.CPUFilterSet\n    table = tables.CPUTable\n    form = forms.CPUBulkEditForm\n\n\nclass CPUBulkDeleteView(generic.BulkDeleteView):\n    queryset = CPU.objects.select_related(\"manufacturer\")\n    filterset = filters.CPUFilterSet\n    table = tables.CPUTable", "\nclass CPUBulkDeleteView(generic.BulkDeleteView):\n    queryset = CPU.objects.select_related(\"manufacturer\")\n    filterset = filters.CPUFilterSet\n    table = tables.CPUTable\n\n\nclass DeviceChangeLogView(ObjectChangeView):\n    @staticmethod\n    def get_resource_change(device_change: ObjectChange) -> ObjectChange | None:\n        \"\"\"Get change of related DeviceResource for this Device change.\"\"\"\n        resource_changes = ObjectChange.objects.filter(\n            request_id=device_change.request_id,\n            changed_object_type_id=ContentType.objects.get(\n                app_label=\"nautobot_device_resources\",\n                model=\"deviceresource\",\n            ).id,\n        )\n        if resource_changes.count() == 1:\n            return resource_changes[0]\n        if resource_changes.count() > 1:\n            for change in resource_changes:\n                if change.object_data[\"device\"] == str(device_change.changed_object_id):\n                    return change\n        return None\n\n    def get_extra_context(self, request, instance):\n        \"\"\"Add change data of DeviceResource to change of Device\"\"\"\n        extra_context = super().get_extra_context(request, instance)\n        if instance.changed_object_type != ContentType.objects.get(app_label=\"dcim\", model=\"device\"):\n            return extra_context\n        resource_change = self.get_resource_change(instance)\n        if resource_change is None:\n            return extra_context\n        snapshots = resource_change.get_snapshots()\n        for diff_type in [\"diff_added\", \"diff_removed\"]:\n            diff = extra_context[diff_type]\n            filtered_resource_diff = {\n                k: v\n                for k, v in (snapshots[\"differences\"][diff_type.split(\"_\")[1]] or {}).items()\n                if k in [\"cpu\", \"cpu_count\", \"gpu\", \"disks\", \"ram\"]\n            }\n            if diff is None:\n                extra_context[diff_type] = filtered_resource_diff\n            else:\n                extra_context[diff_type].update(filtered_resource_diff)\n\n        resource_data = resource_change.object_data\n        instance.object_data.update(\n            {\n                \"cpu\": CPU.objects.get(id=resource_data[\"cpu\"]).name if resource_data[\"cpu\"] else resource_data[\"cpu\"],\n                \"cpu_count\": resource_data[\"cpu_count\"],\n                \"gpu\": resource_data[\"gpu\"],\n                \"disks\": resource_data[\"disks\"],\n                \"ram\": resource_data[\"ram\"],\n            }\n        )\n        return extra_context", "\n\noverride_views = {\n    \"dcim:device_add\": DeviceResourceEditView.as_view(),\n    \"dcim:device_edit\": DeviceResourceEditView.as_view(),\n    \"dcim:device_list\": DeviceResourceListView.as_view(),\n    \"dcim:device_import\": DeviceResourceBulkImportView.as_view(),\n    \"extras:objectchange\": DeviceChangeLogView.as_view(),\n}\n", "}\n"]}
{"filename": "src/nautobot_device_resources/__init__.py", "chunked_list": ["from importlib.metadata import PackageNotFoundError\nfrom importlib.metadata import version\n\nfrom nautobot.extras.plugins import NautobotAppConfig\n\nfrom .consts import PLUGIN_NAME\n\ntry:\n    __version__ = version(PLUGIN_NAME)\nexcept PackageNotFoundError:\n    __version__ = \"package not installed\"", "\n\nclass NautobotDeviceResources(NautobotAppConfig):\n    \"\"\"Nautobot plugin to provide device resources info to device.\"\"\"\n\n    name = PLUGIN_NAME\n    verbose_name = \"Nautobot Device Resources\"\n    description = \"Provides resources to Device\"\n    version = __version__\n    author = \"Jakub Krysl\"\n    author_email = \"jakub.krysl@gmail.com\"", "\n\n# pylint: disable-next=invalid-name\nconfig = NautobotDeviceResources\n"]}
{"filename": "src/nautobot_device_resources/tables.py", "chunked_list": ["import django_tables2 as tables\nfrom django_tables2.utils import Accessor\nfrom nautobot.dcim.tables import DeviceImportTable as NautobotDeviceImportTable\nfrom nautobot.dcim.tables import DeviceTable\nfrom nautobot.utilities.tables import BaseTable\nfrom nautobot.utilities.tables import LinkedCountColumn\nfrom nautobot.utilities.tables import ToggleColumn\n\nfrom .filters import Device\nfrom .models import CPU", "from .filters import Device\nfrom .models import CPU\n\n\ndef cpu_text(record):\n    cpu_string = f\"{record.resources.cpu.manufacturer} {record.resources.cpu}\"\n    cpu_count = record.resources.cpu_count\n    if cpu_count > 1:\n        cpu_string = cpu_string + f\" ({cpu_count}x)\"\n    return cpu_string", "\n\nclass DeviceListTable(DeviceTable):\n    cpu = tables.LinkColumn(\n        viewname=\"plugins:nautobot_device_resources:cpu\",\n        accessor=\"resources__cpu\",\n        kwargs={\"slug\": tables.A(\"resources__cpu__slug\")},\n        verbose_name=\"CPU\",\n        text=cpu_text,\n    )\n    gpu = tables.Column(\n        accessor=\"resources__gpu\",\n        verbose_name=\"GPU\",\n    )\n    ram = tables.Column(\n        accessor=\"resources__ram\",\n        verbose_name=\"RAM\",\n    )\n    disks = tables.Column(\n        accessor=\"resources__disks\",\n        verbose_name=\"Disks\",\n    )\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta(DeviceTable.Meta):\n        fields = DeviceTable.Meta.fields + (\n            \"cpu\",\n            \"gpu\",\n            \"ram\",\n            \"disks\",\n        )", "\n\nclass DeviceImportTable(NautobotDeviceImportTable):\n    cpu = tables.LinkColumn(\n        viewname=\"plugins:nautobot_device_resources:cpu\",\n        accessor=\"resources__cpu\",\n        kwargs={\"slug\": tables.A(\"resources__cpu__slug\")},\n        verbose_name=\"CPU\",\n        text=cpu_text,\n    )\n    cpu_count = tables.Column(\n        accessor=\"resources__cpu_count\",\n        verbose_name=\"CPU count\",\n    )\n    gpu = tables.Column(\n        accessor=\"resources__gpu\",\n        verbose_name=\"GPU\",\n    )\n    ram = tables.Column(\n        accessor=\"resources__ram\",\n        verbose_name=\"RAM\",\n    )\n    disks = tables.Column(\n        accessor=\"resources__disks\",\n        verbose_name=\"Disks\",\n    )\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta(NautobotDeviceImportTable.Meta):\n        model = Device\n        fields = NautobotDeviceImportTable.Meta.fields + (\n            \"cpu\",\n            \"cpu_count\",\n            \"gpu\",\n            \"ram\",\n            \"disks\",\n        )", "\n\nclass CPUTable(BaseTable):\n    pk = ToggleColumn()\n    manufacturer = tables.LinkColumn(\n        viewname=\"dcim:manufacturer\",\n        args=[Accessor(\"manufacturer__slug\")],\n        verbose_name=\"Manufacturer\",\n        text=lambda record: record.manufacturer.name,\n    )\n    name = tables.Column(linkify=True, verbose_name=\"CPU\")\n    cores = tables.Column(verbose_name=\"Cores\")\n    threads_per_core = tables.Column(verbose_name=\"Threads per Core\")\n    instance_count = LinkedCountColumn(\n        viewname=\"dcim:device_list\",\n        url_params={\"cpu\": \"slug\"},\n        verbose_name=\"Instances\",\n    )\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta(BaseTable.Meta):\n        model = CPU\n        fields = (\n            \"pk\",\n            \"name\",\n            \"manufacturer\",\n            \"cores\",\n            \"threads_per_core\",\n            \"instance_count\",\n        )\n        default_columns = (\n            \"pk\",\n            \"name\",\n            \"manufacturer\",\n            \"cores\",\n            \"threads_per_core\",\n            \"instance_count\",\n        )", "\n\nclass CPUImportTable(BaseTable):\n    # pylint: disable-next=too-few-public-methods\n    class Meta(BaseTable.Meta):\n        model = CPU\n        fields = (\n            \"slug\",\n            \"name\",\n            \"manufacturer\",\n            \"cores\",\n            \"threads_per_core\",\n        )\n        empty_text = False", ""]}
{"filename": "src/nautobot_device_resources/filters.py", "chunked_list": ["import django_filters\nfrom django.db.models import F\nfrom nautobot.dcim.filters import DeviceFilterSet as NautobotDeviceFilterSet\nfrom nautobot.dcim.filters.mixins import DeviceComponentModelFilterSetMixin\nfrom nautobot.dcim.models import Device as NautobotDevice\nfrom nautobot.dcim.models import Manufacturer\nfrom nautobot.extras.filters import NautobotFilterSet\nfrom nautobot.extras.filters.mixins import CustomFieldModelFilterSetMixin\nfrom nautobot.extras.filters.mixins import RelationshipModelFilterSetMixin\nfrom nautobot.utilities.filters import BaseFilterSet", "from nautobot.extras.filters.mixins import RelationshipModelFilterSetMixin\nfrom nautobot.utilities.filters import BaseFilterSet\nfrom nautobot.utilities.filters import NameSlugSearchFilterSet\nfrom nautobot.utilities.filters import NaturalKeyOrPKMultipleChoiceFilter\nfrom nautobot.utilities.filters import SearchFilter\n\nfrom .models import CPU\nfrom .models import DeviceResource\n\n# Caution: All filter classes are expected to be '{Model}FilterSet' in Nautobot internal logic.", "\n# Caution: All filter classes are expected to be '{Model}FilterSet' in Nautobot internal logic.\n\n\nclass DeviceResourceFilterSet(BaseFilterSet, DeviceComponentModelFilterSetMixin):\n    \"\"\"Filter capabilities for DeviceResource instances.\"\"\"\n\n    q = SearchFilter(filter_predicates={})\n\n    device = NaturalKeyOrPKMultipleChoiceFilter(\n        field_name=\"device\",\n        to_field_name=\"name\",\n        queryset=NautobotDevice.objects.all(),\n        label=\"Device (name or ID)\",\n    )\n\n    cpu = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"cpu__slug\",\n        queryset=CPU.objects.all(),\n        to_field_name=\"slug\",\n        label=\"CPU (slug)\",\n    )\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = DeviceResource\n        fields = [\"id\", \"device\", \"cpu\", \"cpu_count\", \"gpu\", \"ram\", \"disks\"]", "\n\n# pylint: disable-next=too-many-ancestors\nclass Device(NautobotDevice):\n    \"\"\"Add DeviceResource fields to Device model for filtering purposes\"\"\"\n\n    cpu = DeviceResource.cpu\n    cpu_count = DeviceResource.cpu_count\n    gpu = DeviceResource.gpu\n    ram = DeviceResource.ram\n    disks = DeviceResource.disks\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta(NautobotDevice.Meta):\n        # This makes sure there are no migrations created\n        abstract = True", "\n\n# pylint: disable-next=too-many-ancestors\nclass DeviceFilterSet(NautobotDeviceFilterSet):\n    \"\"\"Add DeviceResource filters to original DeviceFilterSet\"\"\"\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta(NautobotDeviceFilterSet.Meta):\n        # replace original model in (Nautobot)DeviceFilterSet with one with DeviceResource fields\n        # This allows to filter using predefined form (see nautobot_device_resources.forms.DeviceListFilterForm)\n        model = Device\n\n    def __init__(self, *args, **kwargs):\n        # We need to initialize with the new model to add Resources filters\n        super().__init__(*args, **kwargs)\n        # This adds filters which get added based on the model content type\n        self._meta.model = NautobotDevice\n        CustomFieldModelFilterSetMixin.__init__(self, *args, **kwargs)\n        RelationshipModelFilterSetMixin.__init__(self, *args, **kwargs)\n        self._meta.model = Device\n\n    cpu = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"resources__cpu__slug\",\n        queryset=CPU.objects.all(),\n        to_field_name=\"slug\",\n        label=\"CPU (slug)\",\n    )\n    cpu_count = django_filters.NumberFilter(\n        field_name=\"resources__cpu_count\",\n        min_value=1,\n        label=\"CPU count\",\n    )\n    cpu_count__gt = django_filters.NumberFilter(\n        field_name=\"resources__cpu_count\",\n        lookup_expr=\"gt\",\n    )\n    cpu_count__lt = django_filters.NumberFilter(\n        field_name=\"resources__cpu_count\",\n        lookup_expr=\"lt\",\n    )\n    gpu = django_filters.CharFilter(\n        field_name=\"resources__gpu\",\n        label=\"GPU\",\n    )\n    ram = django_filters.NumberFilter(\n        field_name=\"resources__ram\",\n        min_value=1,\n        label=\"RAM (GB)\",\n    )\n    disks = django_filters.CharFilter(\n        field_name=\"resources__disks\",\n        label=\"Disks\",\n    )", "\n\n# pylint: disable-next=too-many-ancestors\nclass CPUFilterSet(NautobotFilterSet, NameSlugSearchFilterSet):\n    \"\"\"Filter capabilities for DeviceResource instances.\"\"\"\n\n    manufacturer = NaturalKeyOrPKMultipleChoiceFilter(\n        field_name=\"manufacturer\",\n        to_field_name=\"name\",\n        queryset=Manufacturer.objects.all(),\n        label=\"Manufacturer (name or ID)\",\n    )\n\n    threads = django_filters.NumberFilter(\n        field_name=\"threads_number\",\n        min_value=1,\n        label=\"Threads\",\n    )\n    threads__gt = django_filters.NumberFilter(\n        field_name=\"threads_number\",\n        lookup_expr=\"gt\",\n    )\n    threads__lt = django_filters.NumberFilter(\n        field_name=\"threads_number\",\n        lookup_expr=\"lt\",\n    )\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU\n        fields = [\"id\", \"name\", \"cores\", \"threads\", \"threads_per_core\"]\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = self.queryset.annotate(threads_number=(F(\"cores\") * F(\"threads_per_core\")))", ""]}
{"filename": "src/nautobot_device_resources/navigation.py", "chunked_list": ["from nautobot.core.apps import NavMenuAddButton\nfrom nautobot.core.apps import NavMenuGroup\nfrom nautobot.core.apps import NavMenuImportButton\nfrom nautobot.core.apps import NavMenuItem\nfrom nautobot.core.apps import NavMenuTab\n\nfrom .consts import PLUGIN_NAME\n\nmenu_items = (\n    NavMenuTab(", "menu_items = (\n    NavMenuTab(\n        name=\"Devices\",\n        groups=(\n            NavMenuGroup(\n                name=\"Device Components\",\n                items=(\n                    NavMenuItem(\n                        link=f\"plugins:{PLUGIN_NAME}:cpu_list\",\n                        name=\"CPUs\",", "                        link=f\"plugins:{PLUGIN_NAME}:cpu_list\",\n                        name=\"CPUs\",\n                        weight=40,\n                        permissions=[f\"{PLUGIN_NAME}.view_cpu\"],\n                        buttons=(\n                            NavMenuAddButton(\n                                link=f\"plugins:{PLUGIN_NAME}:cpu_add\",\n                                permissions=[\n                                    f\"{PLUGIN_NAME}.add_cpu\",\n                                ],", "                                    f\"{PLUGIN_NAME}.add_cpu\",\n                                ],\n                            ),\n                            NavMenuImportButton(\n                                link=f\"plugins:{PLUGIN_NAME}:cpu_import\",\n                                permissions=[f\"{PLUGIN_NAME}.add_cpu\"],\n                            ),\n                        ),\n                    ),\n                ),", "                    ),\n                ),\n            ),\n        ),\n    ),\n)\n"]}
{"filename": "src/nautobot_device_resources/tests/test_models.py", "chunked_list": ["from django.core.exceptions import ValidationError\nfrom django.test import TestCase\n\nfrom nautobot_device_resources.models import CPU\nfrom nautobot_device_resources.models import DeviceResource\n\nfrom .setups import CPUSetUp\nfrom .setups import DeviceResourceSetUp\n\n\nclass DeviceResourceTestCase(DeviceResourceSetUp, TestCase):\n    def test_resource_created(self):\n        \"\"\"Make sure DeviceResource can be correctly created\"\"\"\n        self.assertTrue(hasattr(self, \"resources\"))\n        self.assertIsInstance(self.resources, DeviceResource)\n        self.assertIsNone(self.resources.full_clean())\n        self.assertTrue(hasattr(self.resources, \"device\"))\n        self.assertTrue(hasattr(self.device, \"resources\"))\n        self.assertEqual(self.resources.device, self.device)\n        self.assertIsInstance(str(self.resources), str)\n        self.assertTrue(hasattr(self.resources, \"label\"))\n        self.assertIsInstance(self.resources.label, str)\n\n    def test_cpu_without_count(self):\n        \"\"\"Make sure we raise ValidationError when having CPU without count\"\"\"\n        self.resources.cpu_count = None\n        with self.assertRaises(ValidationError) as err:\n            self.resources.validated_save()\n        self.assertIn(\"cpu_count\", err.exception.message_dict)\n\n    def test_count_without_cpu(self):\n        \"\"\"Make sure we raise ValidationError when having CPU without count\"\"\"\n        # first we need to reset CPU\n        self.resources.cpu = None\n        self.resources.validated_save()\n        self.resources.cpu_count = 10\n        with self.assertRaises(ValidationError) as err:\n            self.resources.validated_save()\n        self.assertIn(\"cpu_count\", err.exception.message_dict)\n\n    def test_threads_without_cpu(self):\n        \"\"\"Make sure we don't fail on cpu_threads when we have no cpu\"\"\"\n        self.assertIsNotNone(self.resources.cpu)\n        self.resources.cpu = None\n        self.resources.validated_save()\n        self.assertIsNone(self.resources.cpu_threads)", "\n\nclass DeviceResourceTestCase(DeviceResourceSetUp, TestCase):\n    def test_resource_created(self):\n        \"\"\"Make sure DeviceResource can be correctly created\"\"\"\n        self.assertTrue(hasattr(self, \"resources\"))\n        self.assertIsInstance(self.resources, DeviceResource)\n        self.assertIsNone(self.resources.full_clean())\n        self.assertTrue(hasattr(self.resources, \"device\"))\n        self.assertTrue(hasattr(self.device, \"resources\"))\n        self.assertEqual(self.resources.device, self.device)\n        self.assertIsInstance(str(self.resources), str)\n        self.assertTrue(hasattr(self.resources, \"label\"))\n        self.assertIsInstance(self.resources.label, str)\n\n    def test_cpu_without_count(self):\n        \"\"\"Make sure we raise ValidationError when having CPU without count\"\"\"\n        self.resources.cpu_count = None\n        with self.assertRaises(ValidationError) as err:\n            self.resources.validated_save()\n        self.assertIn(\"cpu_count\", err.exception.message_dict)\n\n    def test_count_without_cpu(self):\n        \"\"\"Make sure we raise ValidationError when having CPU without count\"\"\"\n        # first we need to reset CPU\n        self.resources.cpu = None\n        self.resources.validated_save()\n        self.resources.cpu_count = 10\n        with self.assertRaises(ValidationError) as err:\n            self.resources.validated_save()\n        self.assertIn(\"cpu_count\", err.exception.message_dict)\n\n    def test_threads_without_cpu(self):\n        \"\"\"Make sure we don't fail on cpu_threads when we have no cpu\"\"\"\n        self.assertIsNotNone(self.resources.cpu)\n        self.resources.cpu = None\n        self.resources.validated_save()\n        self.assertIsNone(self.resources.cpu_threads)", "\n\nclass CPUTestCase(CPUSetUp, TestCase):\n    def test_cpu_created(self):\n        self.assertTrue(hasattr(self, \"cpu\"))\n        self.assertIsInstance(self.cpu, CPU)\n        self.assertIsNone(self.cpu.full_clean())\n        self.assertTrue(hasattr(self.cpu_manufacturer, \"cpus\"))\n        self.assertIn(self.cpu, self.cpu_manufacturer.cpus.all())\n        self.assertIsInstance(str(self.cpu), str)\n        self.assertTrue(hasattr(self.cpu, \"label\"))\n        self.assertIsInstance(self.cpu.label, str)\n\n    def test_wrong_treads_per_core(self):\n        \"\"\"Check failing on threads per core not being power of 2\"\"\"\n        self.cpu.threads_per_core = 3\n        with self.assertRaises(ValidationError) as err:\n            self.cpu.validated_save()\n        self.assertIn(\"threads_per_core\", err.exception.message_dict)\n        self.cpu.threads_per_core = 1\n        self.cpu.validated_save()", ""]}
{"filename": "src/nautobot_device_resources/tests/setups.py", "chunked_list": ["from django.test import TestCase\nfrom nautobot.dcim.models import Device\nfrom nautobot.dcim.models import DeviceRole\nfrom nautobot.dcim.models import DeviceType\nfrom nautobot.dcim.models import Manufacturer\nfrom nautobot.dcim.models import Site\nfrom nautobot.extras.models import Status\nfrom nautobot.tenancy.models import Tenant\n\nfrom nautobot_device_resources.models import CPU", "\nfrom nautobot_device_resources.models import CPU\nfrom nautobot_device_resources.models import DeviceResource\n\n\nclass DeviceSetUp(TestCase):\n    \"\"\"Provide test Device instance\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self.device, _ = Device.objects.get_or_create(**self.device_data)\n\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n        cls.tenant, _ = Tenant.objects.get_or_create(\n            slug=\"dirty\",\n            defaults={\n                \"name\": \"DIRTY\",\n            },\n        )\n        cls.site, _ = Site.objects.get_or_create(\n            name=\"Test Site 1\",\n            defaults={\n                \"status\": Status.objects.get_for_model(Site).get(slug=\"active\"),\n                \"tenant\": cls.tenant,\n            },\n        )\n        manufacturer, _ = Manufacturer.objects.get_or_create(name=\"Test Manufacturer 1\", slug=\"test-manufacturer-1\")\n        cls.device_type, _ = DeviceType.objects.get_or_create(\n            manufacturer=manufacturer,\n            model=\"Test Device Type 1\",\n            slug=\"test-device-type-1\",\n        )\n        cls.device_role, _ = DeviceRole.objects.get_or_create(name=\"Test Device Role 1\", slug=\"test-device-role-1\")\n        cls.status = Status.objects.get_for_model(Device).get(slug=\"active\")\n        cls.device_data = {\n            \"name\": \"Test Device 1\",\n            \"site\": cls.site,\n            \"tenant\": cls.tenant,\n            \"status\": cls.status,\n            \"device_type\": cls.device_type,\n            \"device_role\": cls.device_role,\n        }", "\n\nclass CPUSetUp(DeviceSetUp, TestCase):\n    \"\"\"Provide test CPU instance\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self.cpu, _ = CPU.objects.get_or_create(**self.cpu_data)\n\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n        cls.cpu_manufacturer, _ = Manufacturer.objects.get_or_create(\n            slug=\"intel\",\n            defaults={\n                \"name\": \"Intel\",\n            },\n        )\n        cls.cpu_data = {\n            \"manufacturer\": cls.cpu_manufacturer,\n            \"name\": \"Test CPU 1\",\n            \"cores\": 8,\n        }", "\n\nclass DeviceResourceSetUp(CPUSetUp, TestCase):\n    \"\"\"Provide test DeviceResource instance\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self.resources, _ = DeviceResource.objects.get_or_create(\n            device=self.device,\n            cpu=self.cpu,\n            cpu_count=\"5\",\n            gpu=\"Test GPU 1\",\n            ram=\"256\",\n            disks=\"2x512 GB SSD, 24x4 TB SAS SSD (2xRAID 5 with 12 discs)\",\n        )", ""]}
{"filename": "src/nautobot_device_resources/tests/__init__.py", "chunked_list": [""]}
{"filename": "src/nautobot_device_resources/tests/test_forms.py", "chunked_list": ["# pylint: disable=protected-access\nfrom django.test import TestCase\n\nfrom nautobot_device_resources.forms import DeviceMixedForm\nfrom nautobot_device_resources.forms import DeviceResourceForm\n\nfrom .setups import CPUSetUp\n\n\nclass DeviceResourceTestCase(CPUSetUp, TestCase):\n    def test_separate_form_validation(self):\n        form = DeviceResourceForm(\n            data={\n                \"device\": self.device,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            }\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        # DeviceResourceForm is not a ModelForm, it is not meant to be saved separately from DeviceForm\n\n    def test_mixed_form_failed_child_validation(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": \"wrong\",\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertFalse(form.is_valid(), form.errors)\n        self.assertIn(\"cpu\", form.errors)\n\n    def test_mixed_form_failed_parent_validation(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"status\": None,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertFalse(form.is_valid(), form.errors)\n        self.assertIn(\"status\", form.errors)\n\n    def test_mixed_form_create(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"name\": \"Test Device 2\",\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            }\n        )\n        self.assertIsNone(form.child_form_instance._errors)\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertIsNotNone(form.child_form_instance._errors)\n        self.assertTrue(all(field in form.fields for field in form.child_fields()))\n        self.assertTrue(form[\"cpu\"].value() == self.cpu.id)\n        self.assertTrue(form.save())\n\n    def test_mixed_form_create_child(self):\n        self.assertEqual(DeviceMixedForm.child_model.objects.all().count(), 0)\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertTrue(form.save())\n\n    def test_mixed_form_update_child(self):\n        resources = DeviceMixedForm.child_model.objects.create(\n            device=self.device,\n            cpu=self.cpu,\n            cpu_count=1,\n        )\n        self.assertIsNone(resources.clean())\n        self.assertIsNone(resources.validated_save())\n        self.assertEqual(DeviceMixedForm.child_model.objects.all().count(), 1)\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 10,\n            },\n            instance=self.device,\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertTrue(form.save())", "\nclass DeviceResourceTestCase(CPUSetUp, TestCase):\n    def test_separate_form_validation(self):\n        form = DeviceResourceForm(\n            data={\n                \"device\": self.device,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            }\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        # DeviceResourceForm is not a ModelForm, it is not meant to be saved separately from DeviceForm\n\n    def test_mixed_form_failed_child_validation(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": \"wrong\",\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertFalse(form.is_valid(), form.errors)\n        self.assertIn(\"cpu\", form.errors)\n\n    def test_mixed_form_failed_parent_validation(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"status\": None,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertFalse(form.is_valid(), form.errors)\n        self.assertIn(\"status\", form.errors)\n\n    def test_mixed_form_create(self):\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"name\": \"Test Device 2\",\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            }\n        )\n        self.assertIsNone(form.child_form_instance._errors)\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertIsNotNone(form.child_form_instance._errors)\n        self.assertTrue(all(field in form.fields for field in form.child_fields()))\n        self.assertTrue(form[\"cpu\"].value() == self.cpu.id)\n        self.assertTrue(form.save())\n\n    def test_mixed_form_create_child(self):\n        self.assertEqual(DeviceMixedForm.child_model.objects.all().count(), 0)\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 1,\n            },\n            instance=self.device,\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertTrue(form.save())\n\n    def test_mixed_form_update_child(self):\n        resources = DeviceMixedForm.child_model.objects.create(\n            device=self.device,\n            cpu=self.cpu,\n            cpu_count=1,\n        )\n        self.assertIsNone(resources.clean())\n        self.assertIsNone(resources.validated_save())\n        self.assertEqual(DeviceMixedForm.child_model.objects.all().count(), 1)\n        form = DeviceMixedForm(\n            data={\n                **self.device_data,\n                \"cpu\": self.cpu,\n                \"cpu_count\": 10,\n            },\n            instance=self.device,\n        )\n        self.assertTrue(form.is_valid(), form.errors)\n        self.assertTrue(form.save())", ""]}
{"filename": "src/nautobot_device_resources/tests/test_views.py", "chunked_list": ["import uuid\n\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.test import override_settings\nfrom nautobot.dcim.models import Device\nfrom nautobot.dcim.models import Manufacturer\nfrom nautobot.dcim.tests.test_views import DeviceTestCase\nfrom nautobot.extras.models import ObjectChange\nfrom nautobot.extras.tests.test_views import ObjectChangeTestCase\nfrom nautobot.users.models import ObjectPermission", "from nautobot.extras.tests.test_views import ObjectChangeTestCase\nfrom nautobot.users.models import ObjectPermission\nfrom nautobot.utilities.testing.utils import post_data\nfrom nautobot.utilities.testing.views import ViewTestCases\n\nfrom nautobot_device_resources.models import CPU\nfrom nautobot_device_resources.models import DeviceResource\n\nfrom . import setups\n", "from . import setups\n\n# All tests must have decorator `@override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])`!\n# This is because they need to find objects by UUID from the form.\n\n\n# pylint: disable-next=too-many-ancestors\nclass ExtendedDeviceTestCase(DeviceTestCase):\n    \"\"\"Make sure Device views work with existing DeviceResources\"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n\n        cls.manufacturer = Manufacturer.objects.first()\n\n        cpus = (\n            CPU.objects.create(manufacturer=cls.manufacturer, name=\"CPU 1\", cores=1, threads_per_core=2),\n            CPU.objects.create(manufacturer=cls.manufacturer, name=\"CPU 2\", cores=2, threads_per_core=4),\n            CPU.objects.create(manufacturer=cls.manufacturer, name=\"CPU 3\", cores=4, threads_per_core=8),\n        )\n\n        devices = Device.objects.all()[:3]\n\n        DeviceResource.objects.create(\n            device=devices[0], cpu=cpus[0], cpu_count=1, gpu=\"GPU 1\", ram=128, disks=\"2x200GB SSD\"\n        )\n        DeviceResource.objects.create(\n            device=devices[1], cpu=cpus[1], cpu_count=2, gpu=\"GPU 2\", ram=256, disks=\"2x400GB SSD\"\n        )\n        DeviceResource.objects.create(\n            device=devices[2], cpu=cpus[2], cpu_count=4, gpu=\"GPU 3\", ram=512, disks=\"8x100GB HDD\"\n        )\n\n        cls.form_data.update(\n            {\n                \"cpu\": cpus[0].pk,\n                \"cpu_count\": 2,\n                \"gpu\": \"GPU 0\",\n                \"ram\": 128,\n                \"disks\": \"10x 100GB SSD\",\n            }\n        )\n\n        cls.csv_data = list(cls.csv_data)\n        cls.csv_data[0] = cls.csv_data[0] + \",cpu,cpu_count,gpu,ram,disks\"\n        line_data = f\",{cpus[1].name},8,GPU 2,512,10x 200GB HDD\"\n        for line_number in [1, 2, 3]:\n            cls.csv_data[line_number] = cls.csv_data[line_number] + line_data\n\n        cls.bulk_edit_data.update(\n            {\n                \"cpu\": cpus[1].pk,\n                \"cpu_count\": 4,\n                \"gpu\": \"GPU 1\",\n                \"ram\": 256,\n                \"disks\": \"5x 100GB SSD\",\n            }\n        )\n\n    def setUp(self):\n        super().setUp()\n        # add resources columns to list view\n        self.user.set_config(\n            \"tables.DeviceListTable.columns\",\n            [\n                \"name\",\n                \"status\",\n                \"tenant\",\n                \"device_role\",\n                \"device_type\",\n                \"site\",\n                \"location\",\n                \"rack\",\n                \"primary_ip\",\n                \"cpu\",\n                \"gpu\",\n                \"ram\",\n                \"disks\",\n            ],\n        )\n        self.user.validated_save()\n\n    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n    def test_list_resources(self):\n        response = self.client.get(self._get_url(\"list\"))\n        self.assertHttpStatus(response, 200)\n        response_body = response.content.decode(response.charset)\n\n        # Check CPU label is correct\n        self.assertIn(\n            f\"{self.manufacturer} CPU 3 (4x)\",\n            response_body,\n        )", "\n\n# pylint: disable-next=too-many-ancestors\nclass TestCPUViewsTestCase(setups.CPUSetUp, ViewTestCases.OrganizationalObjectViewTestCase):\n    model = CPU\n\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n        cls.cpu, _ = CPU.objects.get_or_create(**cls.cpu_data)\n        another_cpu_data = {\n            **cls.cpu_data,\n            \"name\": \"Test CPU 2\",\n        }\n        CPU.objects.get_or_create(**another_cpu_data)\n\n        cls.form_data = {\n            \"name\": \"Another Test CPU\",\n            \"slug\": \"another-test-cpu\",\n            \"manufacturer\": cls.cpu_manufacturer.pk,\n            \"cores\": 4,\n            \"threads_per_core\": 4,\n        }\n\n        cls.csv_data = (\n            \"name,slug,manufacturer,cores,threads_per_core\",\n            \"CPU 1,cpu-1,Intel,16,2\",\n            \"CPU 2,cpu-2,Intel,2,4\",\n            \"CPU X,cpu-x,Intel,8,2\",\n        )\n        cls.slug_source = \"name\"\n        cls.slug_test_object = cls.cpu\n\n    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n    def test_filter_threads(self):\n        \"\"\"Make sure we can filter by total number of threads of CPU\"\"\"\n        cpu = CPU.objects.first()\n        self.assertEqual(cpu.threads, cpu.cores * cpu.threads_per_core)\n\n        response = self.client.get(self._get_url(\"list\") + f\"?threads={cpu.threads}\")\n        self.assertHttpStatus(response, 200)\n        response_body = response.content.decode(response.charset)\n        self.assertIn(cpu.name, response_body)\n\n        response = self.client.get(self._get_url(\"list\") + f\"?threads__gt={cpu.threads - 1}\")\n        self.assertHttpStatus(response, 200)\n        response_body = response.content.decode(response.charset)\n        self.assertIn(cpu.name, response_body)\n\n        response = self.client.get(self._get_url(\"list\") + f\"?threads__lt={cpu.threads + 1}\")\n        self.assertHttpStatus(response, 200)\n        response_body = response.content.decode(response.charset)\n        self.assertIn(cpu.name, response_body)", "\n\n# pylint: disable-next=too-many-ancestors\nclass TestObjectChangeDetailTestCase(setups.DeviceResourceSetUp, ObjectChangeTestCase):\n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n\n        cls.form_data = {\n            \"device_type\": cls.device_type.pk,\n            \"device_role\": cls.device_role.pk,\n            \"tenant\": cls.tenant.pk,\n            \"name\": cls.device_data[\"name\"],\n            \"site\": cls.site.pk,\n            \"status\": cls.status.pk,\n        }\n\n    def _set_permissions(self):\n        # Assign model-level permission\n        obj_perm = ObjectPermission(name=\"Test permission\", actions=[\"change\"])\n        obj_perm.save()\n        obj_perm.users.add(self.user)\n        obj_perm.object_types.add(ContentType.objects.get_for_model(DeviceResource))\n        obj_perm.object_types.add(ContentType.objects.get_for_model(Device))\n\n    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n    def test_device_update(self):\n        \"\"\"Check there are DeviceResource changes in Device change view\"\"\"\n        self._set_permissions()\n\n        # Make sure we can get the Device\n        response = self.client.get(self.device.get_absolute_url())\n        self.assertHttpStatus(response, 200)\n\n        another_cpu_data = {\n            **self.cpu_data,\n            \"name\": \"Test CPU 2\",\n        }\n        another_cpu = CPU.objects.create(**another_cpu_data)\n\n        # Try POST with model-level permission\n        new_device_data = {\n            **self.form_data,\n            \"name\": \"New test name\",\n            \"cpu\": another_cpu.pk,\n            \"cpu_count\": 32,\n            \"gpu\": \"Another GPU\",\n            \"ram\": 1234,\n            \"disks\": \"test disks 100GB\",\n        }\n        request = {\n            \"path\": f\"{self.device.get_absolute_url()}edit/\",\n            \"data\": post_data(new_device_data),\n        }\n        self.assertHttpStatus(self.client.post(**request), 302)\n        self.assertIsNotNone(\n            Device.objects.get(name=new_device_data[\"name\"], resources__cpu__id=new_device_data[\"cpu\"])\n        )\n        request = {\n            \"path\": f\"{self.device.get_absolute_url()}edit/\",\n            \"data\": post_data(self.form_data),\n        }\n        self.assertHttpStatus(self.client.post(**request), 302)\n\n        # Check the changed data is there\n        objectchange = ObjectChange.objects.filter(changed_object_id=self.resources.device.id).order_by(\"time\").first()\n        response = self.client.get(objectchange.get_absolute_url())\n        self.assertHttpStatus(response, 200)\n        response_body = response.content.decode(response.charset)\n        self.assertIn(f\"{self.form_data['name']}\", response_body)\n        self.assertIn(f\"{new_device_data['name']}\", response_body)\n        self.assertIn(f\"{new_device_data['cpu']}\", response_body)\n        self.assertIn(f\"{new_device_data['cpu_count']}\", response_body)\n        self.assertIn(f\"{new_device_data['gpu']}\", response_body)\n        self.assertIn(f\"{new_device_data['ram']}\", response_body)\n        self.assertIn(f\"{new_device_data['ram']}\", response_body)\n\n        # Check empty data is OK too\n        request = {\n            \"path\": f\"{self.device.get_absolute_url()}edit/\",\n            \"data\": post_data(self.form_data),\n        }\n        self.assertHttpStatus(self.client.post(**request), 302)\n        objectchange = ObjectChange.objects.filter(changed_object_id=self.resources.device.id).order_by(\"time\").first()\n        response = self.client.get(objectchange.get_absolute_url())\n        self.assertHttpStatus(response, 200)\n\n    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n    def test_device_without_resource(self):\n        \"\"\"This should not happen, but make sure we can show the changes anyway\"\"\"\n        self._set_permissions()\n        request = {\n            \"path\": f\"{self.device.get_absolute_url()}edit/\",\n            \"data\": post_data(self.form_data),\n        }\n        self.assertHttpStatus(self.client.post(**request), 302)\n        resource_change = ObjectChange.objects.get(changed_object_id=self.resources.id)\n        resource_change.delete()\n\n        self.assertEqual(\n            ObjectChange.objects.filter(changed_object_type_id=ContentType.objects.get_for_model(Device)).count(), 1\n        )\n        self.assertEqual(\n            ObjectChange.objects.filter(\n                changed_object_type_id=ContentType.objects.get_for_model(DeviceResource)\n            ).count(),\n            0,\n        )\n\n        objectchange = ObjectChange.objects.get(changed_object_id=self.resources.device.id)\n        response = self.client.get(objectchange.get_absolute_url())\n        self.assertHttpStatus(response, 200)\n\n    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n    def test_device_multiple_resource_changes(self):\n        \"\"\"Make sure we get correct change if there are multiple one with same request_id\"\"\"\n        self._set_permissions()\n        request = {\n            \"path\": f\"{self.device.get_absolute_url()}edit/\",\n            \"data\": post_data(self.form_data),\n        }\n        self.assertHttpStatus(self.client.post(**request), 302)\n        resource_change = ObjectChange.objects.get(changed_object_id=self.resources.id)\n        resource_change.id = uuid.uuid4()\n        resource_change.save()\n\n        self.assertEqual(\n            ObjectChange.objects.filter(changed_object_type_id=ContentType.objects.get_for_model(Device)).count(), 1\n        )\n        self.assertEqual(\n            ObjectChange.objects.filter(\n                changed_object_type_id=ContentType.objects.get_for_model(DeviceResource)\n            ).count(),\n            2,\n        )\n\n        objectchange = ObjectChange.objects.get(changed_object_id=self.resources.device.id)\n        response = self.client.get(objectchange.get_absolute_url())\n        self.assertHttpStatus(response, 200)", ""]}
{"filename": "src/nautobot_device_resources/tests/test_template_content.py", "chunked_list": ["from django.test import TestCase\nfrom django.utils.safestring import SafeString\n\nfrom nautobot_device_resources.models import CPU\nfrom nautobot_device_resources.models import DeviceResource\nfrom nautobot_device_resources.template_content import CPUTemplateExtension\nfrom nautobot_device_resources.template_content import DeviceResourceTemplateExtension\n\nfrom .setups import CPUSetUp\n", "from .setups import CPUSetUp\n\n\nclass DeviceResourceTemplateExtensionTestCase(CPUSetUp, TestCase):\n    def test_without_resources(self):\n        fake_context = {\n            \"object\": self.device,\n        }\n        template = DeviceResourceTemplateExtension(context=fake_context)\n        right_page = template.right_page()\n        self.assertIsInstance(right_page, SafeString)\n\n    def test_with_resources(self):\n        self.assertEqual(DeviceResource.objects.all().count(), 0)\n        DeviceResource.objects.create(\n            device=self.device,\n            cpu=self.cpu,\n            cpu_count=1,\n        )\n        self.assertEqual(DeviceResource.objects.all().count(), 1)\n        fake_context = {\n            \"object\": self.device,\n        }\n        template = DeviceResourceTemplateExtension(context=fake_context)\n        right_page = template.right_page()\n        self.assertIsInstance(right_page, SafeString)", "\n\nclass CPUTemplateExtensionTestCase(CPUSetUp, TestCase):\n    def test_without_cpu(self):\n        fake_context = {\n            \"object\": self.cpu_manufacturer,\n        }\n        template = CPUTemplateExtension(context=fake_context)\n        right_page = template.right_page()\n        self.assertIsInstance(right_page, SafeString)\n\n    def test_with_cpu(self):\n        self.assertEqual(CPU.objects.all().count(), 1)\n        fake_context = {\n            \"object\": self.cpu_manufacturer,\n        }\n        template = CPUTemplateExtension(context=fake_context)\n        right_page = template.right_page()\n        self.assertIsInstance(right_page, SafeString)", ""]}
{"filename": "src/nautobot_device_resources/generic/forms.py", "chunked_list": ["from django.db import transaction\nfrom django.db.models import Model\nfrom django.forms import ModelForm\n\n\nclass MixedFormMixin(ModelForm):\n    \"\"\"Edit form to replace core form with another enhanced by custom form, supports both create and edit\"\"\"\n\n    child_model = Model\n    child_foreign_link = \"\"\n    child_foreign_field = \"\"\n    child_form = ModelForm\n\n    @classmethod\n    def child_fields(cls):\n        # pylint: disable-next=protected-access\n        return cls.child_form._meta.fields\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if \"instance\" in kwargs:\n            if hasattr(kwargs[\"instance\"], self.child_foreign_link):\n                kwargs[\"instance\"] = getattr(kwargs[\"instance\"], self.child_foreign_link)\n            else:\n                kwargs[\"instance\"] = self.child_model(device=kwargs[\"instance\"])\n        self.child_form_instance = self.child_form(*args, **kwargs)\n        self.fields.update(self.child_form_instance.fields)\n        self.initial.update(self.child_form_instance.initial)\n\n    def is_valid(self) -> bool:\n        is_valid = True\n        if not self.child_form_instance.is_valid():\n            is_valid = False\n        # is_valid will trigger clean method\n        # so it should be called after all other forms is_valid are called\n        # otherwise clean_data will be empty\n        if not super().is_valid():\n            is_valid = False\n        self.errors.update(self.child_form_instance.errors)\n        return is_valid", "\n\nclass MixedCSVFormMixin(MixedFormMixin):\n    \"\"\"Support import for MixedFormMixin\"\"\"\n\n    def save(self, commit=True):\n        with transaction.atomic():\n            parent = super().save()\n            child_fields = {child_field: self.cleaned_data[child_field] for child_field in self.child_fields()}\n            self.child_model.objects.create(\n                **{self.child_foreign_field: parent},\n                **child_fields,\n            )\n            return parent", ""]}
{"filename": "src/nautobot_device_resources/generic/views.py", "chunked_list": ["from django.db import transaction\nfrom django.http.response import HttpResponseRedirect\nfrom nautobot.core.views.generic import ObjectEditView\n\nfrom .forms import MixedFormMixin\n\n\nclass EditViewMixin(ObjectEditView):\n    \"\"\"View capable of mending core model with custom one together\"\"\"\n\n    model_form = MixedFormMixin\n    template_name = \"\"\n\n    def post(self, request, *args, **kwargs):\n        # this makes sure we won't create parent Device when there is an issue with Resources\n        with transaction.atomic():\n            out = super().post(request, **kwargs)\n            # Form validation validated both parent and child forms at once, no need to repeat it\n            # But we cannot access current form instance to check the validation result, so instead of constructing\n            # it from scratch and validating we check the return object type.\n            # success: HttpResponseRedirect\n            # fail: HttpResponse\n            if isinstance(out, HttpResponseRedirect):\n                created_obj_pk = out.url.split(\"/\")[-2]\n                obj = self.get_object({\"pk\": created_obj_pk})\n                if hasattr(obj, self.model_form.child_foreign_link):\n                    # update\n                    child_obj = getattr(self.alter_obj(obj, request, args, kwargs), self.model_form.child_foreign_link)\n                else:\n                    # create\n                    child_obj = self.model_form.child_model(**{self.model_form.child_foreign_field: obj})\n                data = {k: v for k, v in request.POST.items() if k in self.model_form.child_fields()}\n                child_form = self.model_form.child_form(data=data, instance=child_obj)\n                child_form.save()\n        return out", ""]}
{"filename": "src/nautobot_device_resources/generic/__init__.py", "chunked_list": [""]}
{"filename": "src/nautobot_device_resources/api/urls.py", "chunked_list": ["from nautobot.core.api import OrderedDefaultRouter\n\nfrom . import views\n\nrouter = OrderedDefaultRouter()\n\nrouter.register(\"resources\", views.DeviceResourceViewSet)\nrouter.register(\"cpus\", views.CPUViewSet)\n\nurlpatterns = router.urls", "\nurlpatterns = router.urls\n"]}
{"filename": "src/nautobot_device_resources/api/views.py", "chunked_list": ["from rest_framework.viewsets import ModelViewSet\n\nfrom ..filters import CPUFilterSet\nfrom ..filters import DeviceResourceFilterSet\nfrom ..models import CPU\nfrom ..models import DeviceResource\nfrom .serializers import CPUSerializer\nfrom .serializers import DeviceResourceSerializer\n\n", "\n\n# pylint: disable-next=too-many-ancestors\nclass DeviceResourceViewSet(ModelViewSet):\n    \"\"\"API viewset for interacting with DeviceResource objects.\"\"\"\n\n    queryset = DeviceResource.objects.all()\n    filterset_class = DeviceResourceFilterSet\n    serializer_class = DeviceResourceSerializer\n", "\n\n# pylint: disable-next=too-many-ancestors\nclass CPUViewSet(ModelViewSet):\n    \"\"\"API viewset for interacting with CPU objects.\"\"\"\n\n    queryset = CPU.objects.all()\n    filterset_class = CPUFilterSet\n    serializer_class = CPUSerializer\n", ""]}
{"filename": "src/nautobot_device_resources/api/__init__.py", "chunked_list": [""]}
{"filename": "src/nautobot_device_resources/api/serializers.py", "chunked_list": ["from nautobot.core.api import ValidatedModelSerializer\nfrom nautobot.core.api import WritableNestedSerializer\nfrom nautobot.dcim.api.nested_serializers import NestedDeviceSerializer\nfrom nautobot.dcim.api.nested_serializers import NestedManufacturerSerializer\nfrom rest_framework import serializers\n\nfrom ..consts import PLUGIN_NAME\nfrom ..models import CPU\nfrom ..models import DeviceResource\n", "from ..models import DeviceResource\n\n\nclass NestedCPUSerializer(WritableNestedSerializer):\n    \"\"\"Nested field for CPU.\"\"\"\n\n    url = serializers.HyperlinkedIdentityField(view_name=f\"plugins-api:{PLUGIN_NAME}-api:cpu-detail\")\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU\n        fields = [\"id\", \"url\", \"name\"]", "\n\nclass DeviceResourceSerializer(ValidatedModelSerializer):\n    \"\"\"API serializer for interacting with DeviceResource objects.\"\"\"\n\n    device = NestedDeviceSerializer()\n    cpu = NestedDeviceSerializer()\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = DeviceResource\n        fields = (\"id\", \"label\", \"device\", \"cpu\", \"cpu_count\", \"gpu\", \"ram\", \"disks\")", "\n\nclass CPUSerializer(ValidatedModelSerializer):\n    \"\"\"API serializer for interacting with CPU objects.\"\"\"\n\n    url = serializers.HyperlinkedIdentityField(view_name=f\"plugins-api:{PLUGIN_NAME}-api:cpu-detail\")\n    manufacturer = NestedManufacturerSerializer()\n\n    # pylint: disable-next=too-few-public-methods\n    class Meta:\n        model = CPU\n        fields = (\"id\", \"url\", \"label\", \"name\", \"slug\", \"manufacturer\", \"cores\", \"threads_per_core\", \"threads\")", ""]}
{"filename": "src/nautobot_device_resources/migrations/0001_initial.py", "chunked_list": ["# pylint: disable=invalid-name\n# Generated by Django 3.2.16 on 2023-02-17 11:32\n\nimport uuid\n\nimport django.core.serializers.json\nimport django.db.models.deletion\nimport nautobot.extras.models.mixins\nfrom django.db import migrations\nfrom django.db import models", "from django.db import migrations\nfrom django.db import models\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"dcim\", \"0019_device_redundancy_group_data_migration\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"DeviceResource\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(\n                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True\n                    ),\n                ),\n                (\"created\", models.DateField(auto_now_add=True, null=True)),\n                (\"last_updated\", models.DateTimeField(auto_now=True, null=True)),\n                (\n                    \"_custom_field_data\",\n                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),\n                ),\n                (\"cpu\", models.CharField(blank=True, max_length=200)),\n                (\"cpu_cores\", models.CharField(blank=True, max_length=20)),\n                (\"gpu\", models.CharField(blank=True, max_length=200)),\n                (\"ram\", models.IntegerField(blank=True, null=True)),\n                (\"disks\", models.CharField(blank=True, max_length=200)),\n                (\n                    \"device\",\n                    models.OneToOneField(\n                        on_delete=django.db.models.deletion.CASCADE, related_name=\"resources\", to=\"dcim.device\"\n                    ),\n                ),\n            ],\n            options={\n                \"ordering\": [\"device\"],\n                \"verbose_name\": \"Device Resource\",\n                \"verbose_name_plural\": \"Device Resources\",\n            },\n            bases=(\n                models.Model,\n                nautobot.extras.models.mixins.DynamicGroupMixin,\n                nautobot.extras.models.mixins.NotesMixin,\n            ),\n        ),\n    ]", ""]}
{"filename": "src/nautobot_device_resources/migrations/0002_cpu_separate_model.py", "chunked_list": ["# pylint: disable=invalid-name\n# Generated by Django 3.2.16 on 2023-02-20 11:41\n\nimport uuid\n\nimport django.core.serializers.json\nimport django.db.models.deletion\nimport nautobot.core.fields\nimport nautobot.extras.models.mixins\nfrom django.db import migrations", "import nautobot.extras.models.mixins\nfrom django.db import migrations\nfrom django.db import models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"dcim\", \"0019_device_redundancy_group_data_migration\"),\n        (\"nautobot_device_resources\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name=\"deviceresource\",\n            name=\"cpu_cores\",\n        ),\n        migrations.AddField(\n            model_name=\"deviceresource\",\n            name=\"cpu_count\",\n            field=models.PositiveSmallIntegerField(blank=True, null=True),\n        ),\n        migrations.AlterField(\n            model_name=\"deviceresource\",\n            name=\"ram\",\n            field=models.PositiveSmallIntegerField(blank=True, null=True),\n        ),\n        migrations.CreateModel(\n            name=\"CPU\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(\n                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True\n                    ),\n                ),\n                (\"created\", models.DateField(auto_now_add=True, null=True)),\n                (\"last_updated\", models.DateTimeField(auto_now=True, null=True)),\n                (\n                    \"_custom_field_data\",\n                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),\n                ),\n                (\"name\", models.CharField(max_length=200)),\n                (\n                    \"slug\",\n                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from=\"name\", unique=True),\n                ),\n                (\"cores\", models.PositiveSmallIntegerField()),\n                (\"threads_per_core\", models.PositiveSmallIntegerField(default=2)),\n                (\n                    \"manufacturer\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.PROTECT, related_name=\"cpus\", to=\"dcim.manufacturer\"\n                    ),\n                ),\n            ],\n            options={\n                \"ordering\": [\"name\"],\n                \"verbose_name\": \"CPU\",\n                \"verbose_name_plural\": \"CPUs\",\n            },\n            bases=(\n                models.Model,\n                nautobot.extras.models.mixins.DynamicGroupMixin,\n                nautobot.extras.models.mixins.NotesMixin,\n            ),\n        ),\n        migrations.AlterField(\n            model_name=\"deviceresource\",\n            name=\"cpu\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.PROTECT,\n                related_name=\"instances\",\n                to=\"nautobot_device_resources.cpu\",\n            ),\n        ),\n    ]", ""]}
{"filename": "src/nautobot_device_resources/migrations/0003_create_resources.py", "chunked_list": ["# pylint: disable=invalid-name\n# Generated by Django 3.2.16 on 2023-02-17 11:33\n\nfrom django.db import migrations\n\n\ndef create_device_resources(apps, schema_editor):\n    \"\"\"Create DeviceResource instance for all existing Devices\"\"\"\n    Device = apps.get_model(\"dcim\", \"Device\")\n    DeviceResource = apps.get_model(\"nautobot_device_resources\", \"DeviceResource\")\n\n    db_alias = schema_editor.connection.alias\n\n    for device in Device.objects.using(db_alias).all():\n        resource = DeviceResource(device=device)\n        resource.save()", "\n\ndef clear_device_resources(apps, schema_editor):\n    \"\"\"Clear all DeviceResource instances in DB\"\"\"\n    DeviceResource = apps.get_model(\"nautobot_device_resources\", \"DeviceResource\")\n\n    db_alias = schema_editor.connection.alias\n\n    for resource in DeviceResource.objects.using(db_alias).all():\n        resource.delete()", "\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"nautobot_device_resources\", \"0002_cpu_separate_model\"),\n    ]\n\n    operations = [migrations.RunPython(create_device_resources, clear_device_resources)]\n", ""]}
{"filename": "src/nautobot_device_resources/migrations/__init__.py", "chunked_list": [""]}
