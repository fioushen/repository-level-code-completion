{"filename": "tests/__init__.py", "chunked_list": [""]}
{"filename": "example/04_decompiled_example_loops.py", "chunked_list": ["fruits = ('apple', 'banana', 'orange', 'grape')\nfor fruit in fruits:\n    print('Current fruit: {}'.format(fruit))\nfor i in range(5):\n    print('Current value of i: {}'.format(i))\ncount = 0\nwhile count < 5:\n    print('Current count: {}'.format(count))\n    count += 1\nfor i in range(3):\n    print('Outer loop, i: {}'.format(i))\n    for j in range(2):\n        print('  Inner loop, j: {}'.format(j))", "    count += 1\nfor i in range(3):\n    print('Outer loop, i: {}'.format(i))\n    for j in range(2):\n        print('  Inner loop, j: {}'.format(j))"]}
{"filename": "example/05_example_list_comprehensions.py", "chunked_list": ["# Basic list comprehension\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)  # Output: [1, 4, 9, 16, 25]\n\n# List comprehension with a condition\neven_squares = [x**2 for x in range(1, 6) if x % 2 == 0]\nprint(even_squares)  # Output: [4, 16]\n\n# Nested list comprehension\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "# Nested list comprehension\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntranspose = [[row[i] for row in matrix] for i in range(len(matrix))]\nprint(transpose)  # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n"]}
{"filename": "example/08_decompiled_example_modules_packages.py", "chunked_list": ["from animals.mammals import get_mammals, get_mammal_info\n\ndef main():\n    mammals = get_mammals()\n    print('Mammals:')\n    for mammal in mammals:\n        print(mammal)\n    print('\\nMammal info:')\n    for mammal in mammals:\n        print(get_mammal_info(mammal))", "\nif __name__ == '__main__':\n    main()"]}
{"filename": "example/01_example_variables.py", "chunked_list": ["# Assigning values to variables\nname = \"John Doe\"\nage = 30\nheight = 6.1  # in feet\n\n# Performing operations with variables\nage_next_year = age + 1\nhalf_height = height / 2\n\n# Printing variables and their values", "\n# Printing variables and their values\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"Height:\", height, \"feet\")\nprint(\"Age next year:\", age_next_year)\nprint(\"Half height:\", half_height, \"feet\")\n"]}
{"filename": "example/04_example_loops.py", "chunked_list": ["# Using a for loop to iterate through a list\nfruits = [\"apple\", \"banana\", \"orange\", \"grape\"]\nfor fruit in fruits:\n    print(f\"Current fruit: {fruit}\")\n\n# Using a for loop with the range function\nfor i in range(5):\n    print(f\"Current value of i: {i}\")\n\n# Using a while loop", "\n# Using a while loop\ncount = 0\nwhile count < 5:\n    print(f\"Current count: {count}\")\n    count += 1\n\n# Using a nested loop\nfor i in range(3):\n    print(f\"Outer loop, i: {i}\")\n    for j in range(2):\n        print(f\"  Inner loop, j: {j}\")", "for i in range(3):\n    print(f\"Outer loop, i: {i}\")\n    for j in range(2):\n        print(f\"  Inner loop, j: {j}\")\n"]}
{"filename": "example/09_example_exceptioins.py", "chunked_list": ["def divide(a, b):\n    try:\n        result = a / b\n        print(f\"{a} divided by {b} is {result}\")\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero.\")\n\n\ndivide(10, 2)\ndivide(10, 0)", "divide(10, 2)\ndivide(10, 0)\n\n\ndef safe_conversion(value, to_int=True):\n    try:\n        if to_int:\n            converted = int(value)\n        else:\n            converted = float(value)\n        print(f\"Converted {value} to {converted}\")\n    except ValueError:\n        print(f\"Invalid value: {value}\")\n    except TypeError:\n        print(f\"Unsupported type: {type(value).__name__}\")", "\n\nsafe_conversion(\"42\")\nsafe_conversion(\"3.14\", False)\nsafe_conversion(\"abc\")\nsafe_conversion(None)\n\n\ndef read_file(file_name):\n    try:\n        file = open(file_name, \"r\")\n        content = file.read()\n        print(f\"File content:\\n{content}\")\n    except FileNotFoundError:\n        print(\"File not found.\")\n    finally:\n        if \"file\" in locals() and not file.closed:\n            file.close()\n            print(\"File closed.\")", "def read_file(file_name):\n    try:\n        file = open(file_name, \"r\")\n        content = file.read()\n        print(f\"File content:\\n{content}\")\n    except FileNotFoundError:\n        print(\"File not found.\")\n    finally:\n        if \"file\" in locals() and not file.closed:\n            file.close()\n            print(\"File closed.\")", "\n\nread_file(\"example.txt\")\n\n\nclass InvalidAgeError(ValueError):\n    pass\n\n\ndef check_age(age):\n    if age < 0:\n        raise InvalidAgeError(\"Age cannot be negative.\")\n    elif age > 120:\n        raise InvalidAgeError(\"Age is too high.\")\n    else:\n        print(\"Age is valid.\")", "\ndef check_age(age):\n    if age < 0:\n        raise InvalidAgeError(\"Age cannot be negative.\")\n    elif age > 120:\n        raise InvalidAgeError(\"Age is too high.\")\n    else:\n        print(\"Age is valid.\")\n\n\ntry:\n    check_age(25)\n    check_age(-5)\nexcept InvalidAgeError as e:\n    print(e)", "\n\ntry:\n    check_age(25)\n    check_age(-5)\nexcept InvalidAgeError as e:\n    print(e)\n"]}
{"filename": "example/03_decompiled_example_if_else.py", "chunked_list": ["age = 25\ncountry = 'USA'\njob_status = 'employed'\nfavorite_color = 'blue'\n\nif age < 18 or (country == 'USA' and favorite_color == 'blue'):\n    if job_status == 'employed':\n        print('Minor or USA + blue, employed.')\n    else:\n        print('Minor or USA + blue, unemployed.')\nelse:\n    if job_status == 'employed':\n        if country != 'USA' or favorite_color != 'blue':\n            print('Not minor, not USA + blue, employed.')\n    else:\n        if country != 'USA' or favorite_color != 'blue':\n            print('Not minor, not USA + blue, unemployed.')\n        else:\n            print('Not minor, not USA + blue, other status.')"]}
{"filename": "example/09_decompiled_example_exceptioins.py", "chunked_list": ["def divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print('Cannot divide by zero.')\n    else:\n        print(f'{a} divided by {b} is {result}')\n\ndef safe_conversion(value, to_int=True):\n    try:\n        if to_int:\n            converted = int(value)\n        else:\n            converted = float(value)\n    except ValueError:\n        print(f'Invalid value: {value}')\n    except TypeError:\n        print(f'Unsupported type: {type(value).__name__}')\n    else:\n        print(f'Converted {value} to {converted}')", "def safe_conversion(value, to_int=True):\n    try:\n        if to_int:\n            converted = int(value)\n        else:\n            converted = float(value)\n    except ValueError:\n        print(f'Invalid value: {value}')\n    except TypeError:\n        print(f'Unsupported type: {type(value).__name__}')\n    else:\n        print(f'Converted {value} to {converted}')", "\ndef read_file(file_name):\n    try:\n        file = open(file_name, 'r')\n    except FileNotFoundError:\n        print('File not found.')\n    else:\n        content = file.read()\n        print(f'File content:\\n{content}')\n        try:\n            locals()['file']\n        except KeyError:\n            pass\n        else:\n            if not file.closed:\n                file.close()\n                print('File closed.')\n            raise", "\nclass InvalidAgeError(ValueError):\n    pass\n\ndef check_age(age):\n    if age < 0:\n        raise InvalidAgeError('Age cannot be negative.')\n    elif age > 120:\n        raise InvalidAgeError('Age is too high.')\n    else:\n        print('Age is valid.')"]}
{"filename": "example/02_decompiled_example_data_types.py", "chunked_list": ["integer_example = 42\nfloat_example = 3.14\nstring_example = 'Hello, World!'\nlist_example = [1, 2, 3, 4, 5]\ntuple_example = (1, 'apple', 3.14)\ndict_example = {'name': 'John Doe', 'age': 30, 'city': 'New York'}\nset_example = {1, 2, 3, 4, 5}.union(frozenset({1, 2, 3, 4, 5}))\nbool_example = True\n\nprint('Integer:', integer_example)", "\nprint('Integer:', integer_example)\nprint('Float:', float_example)\nprint('String:', string_example)\nprint('List:', list_example)\nprint('Tuple:', tuple_example)\nprint('Dictionary:', dict_example)\nprint('Set:', set_example)\nprint('Boolean:', bool_example)", "print('Boolean:', bool_example)"]}
{"filename": "example/10_example_file_io.py", "chunked_list": ["file_name = \"example.txt\"\n\nwith open(file_name, \"r\") as file:\n    content = file.read()\n    print(f\"File content:\\n{content}\")\nfile_name = \"output.txt\"\ncontent = \"Hello, World!\"\n\nwith open(file_name, \"w\") as file:\n    file.write(content)\n    print(f\"Wrote content to {file_name}\")", "with open(file_name, \"w\") as file:\n    file.write(content)\n    print(f\"Wrote content to {file_name}\")\nfile_name = \"log.txt\"\nlog_entry = \"This is a log entry.\"\n\nwith open(file_name, \"a\") as file:\n    file.write(f\"{log_entry}\\n\")\n    print(f\"Appended log entry to {file_name}\")\nfile_name = \"example.txt\"", "file_name = \"example.txt\"\n\nwith open(file_name, \"r\") as file:\n    print(f\"Reading {file_name} line by line:\")\n    for line in file:\n        print(line.strip())\nimport json\n\nfile_name = \"data.json\"\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "file_name = \"data.json\"\ndata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n# Writing JSON data to a file\nwith open(file_name, \"w\") as file:\n    json.dump(data, file)\n    print(f\"Wrote JSON data to {file_name}\")\n\n# Reading JSON data from a file\nwith open(file_name, \"r\") as file:\n    loaded_data = json.load(file)\n    print(f\"Read JSON data from {file_name}:\")\n    print(loaded_data)", "# Reading JSON data from a file\nwith open(file_name, \"r\") as file:\n    loaded_data = json.load(file)\n    print(f\"Read JSON data from {file_name}:\")\n    print(loaded_data)\n"]}
{"filename": "example/01_decompiled_example_variables.py", "chunked_list": ["name = 'John Doe'\nage = 30\nheight = 6.1\nage_next_year = age + 1\nhalf_height = height / 2\n\nprint('Name:', name)\nprint('Age:', age)\nprint('Height:', height, 'feet')\nprint('Age next year:', age_next_year)", "print('Height:', height, 'feet')\nprint('Age next year:', age_next_year)\nprint('Half height:', half_height, 'feet')"]}
{"filename": "example/11_decompiled_example_std_library.py", "chunked_list": ["import os\nimport shutil\nimport glob\nimport tempfile\n\ncwd = os.getcwd()\nprint('Current working directory: {0}'.format(cwd))\n\nprint('Files and directories in the current directory:')\nfor item in os.listdir(cwd):\n    print(item)", "print('Files and directories in the current directory:')\nfor item in os.listdir(cwd):\n    print(item)\n\nnew_dir = 'example_directory'\nos.makedirs(new_dir, exist_ok=True)\nprint('Created new directory: {0}'.format(new_dir))\n\nnew_name = 'renamed_directory'\nos.rename(new_dir, new_name)", "new_name = 'renamed_directory'\nos.rename(new_dir, new_name)\nprint('Renamed directory from {0} to {1}'.format(new_dir, new_name))\n\nos.rmdir(new_name)\nprint('Removed directory: {0}'.format(new_name))\n\nsrc_file = 'source.txt'\ndst_file = 'destination.txt'\nshutil.copy(src_file, dst_file)", "dst_file = 'destination.txt'\nshutil.copy(src_file, dst_file)\nprint('Copied {0} to {1}'.format(src_file, dst_file))\n\nnew_location = 'moved.txt'\nshutil.move(dst_file, new_location)\nprint('Moved {0} to {1}'.format(dst_file, new_location))\n\nos.remove(new_location)\nprint('Removed file: {0}'.format(new_location))", "os.remove(new_location)\nprint('Removed file: {0}'.format(new_location))\n\nprint('Python files in the current directory:')\nfor py_file in glob.glob('*.py'):\n    print(py_file)\n\nwith tempfile.NamedTemporaryFile('w+t', delete=False) as temp_file:\n    temp_file.write('Hello, World!')\n    temp_path = temp_file.name\n    print('Created temporary file: {0}'.format(temp_path))", "\nwith open(temp_path, 'r') as temp_file:\n    content = temp_file.read()\n    print('Content of the temporary file: {0}'.format(content))\n\nos.remove(temp_path)\nprint('Removed temporary file: {0}'.format(temp_path))"]}
{"filename": "example/02_example_data_types.py", "chunked_list": ["# Integer\ninteger_example = 42\n\n# Float\nfloat_example = 3.14\n\n# String\nstring_example = \"Hello, World!\"\n\n# List", "\n# List\nlist_example = [1, 2, 3, 4, 5]\n\n# Tuple\ntuple_example = (1, \"apple\", 3.14)\n\n# Dictionary\ndict_example = {\n    \"name\": \"John Doe\",", "dict_example = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Set\nset_example = {1, 2, 3, 4, 5}\n\n# Boolean", "\n# Boolean\nbool_example = True\n\n# Printing the examples\nprint(\"Integer:\", integer_example)\nprint(\"Float:\", float_example)\nprint(\"String:\", string_example)\nprint(\"List:\", list_example)\nprint(\"Tuple:\", tuple_example)", "print(\"List:\", list_example)\nprint(\"Tuple:\", tuple_example)\nprint(\"Dictionary:\", dict_example)\nprint(\"Set:\", set_example)\nprint(\"Boolean:\", bool_example)\n"]}
{"filename": "example/05_decompiled_example_list_comprehensions.py", "chunked_list": ["squares = [x**2 for x in range(1, 6)]\nprint(squares)\n\neven_squares = [x**2 for x in range(1, 6) if x**2 % 2 == 0]\nprint(even_squares)\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntranspose = [[row[i] for row in matrix] for i in range(len(matrix))]\nprint(transpose)", "print(transpose)"]}
{"filename": "example/10_decompiled_example_file_io.py", "chunked_list": ["file_name = 'example.txt'\n\nwith open(file_name, 'r') as file:\n    content = file.read()\n\nprint('File content:\\n{}'.format(content))\n\ntry:\n    with open('output.txt', 'w') as file:\n        content = 'Hello, World!'\n        file.write(content)\n\n    print('Wrote content to {}'.format(file_name))\nexcept:\n    pass", "\ntry:\n    with open('log.txt', 'a') as file:\n        log_entry = 'This is a log entry.'\n        file.write('{}\\n'.format(log_entry))\n\n    print('Appended log entry to {}'.format(file_name))\nexcept:\n    pass\n", "\nfile_name = 'example.txt'\n\nprint('Reading {} line by line:'.format(file_name))\nwith open(file_name, 'r') as file:\n    for line in file:\n        print(line.strip())\n\nimport json\n", "import json\n\nfile_name = 'data.json'\ndata = {'name': 'John', 'age': 30, 'city': 'New York'}\n\nwith open(file_name, 'w') as file:\n    json.dump(data, file)\n\nprint('Wrote JSON data to {}'.format(file_name))\n\nwith open(file_name, 'r') as file:\n    loaded_data = json.load(file)", "print('Wrote JSON data to {}'.format(file_name))\n\nwith open(file_name, 'r') as file:\n    loaded_data = json.load(file)\n\nprint('Read JSON data from {}:'.format(file_name))\nprint(loaded_data)"]}
{"filename": "example/11_example_std_library.py", "chunked_list": ["import os\n\n# Get the current working directory\ncwd = os.getcwd()\nprint(f\"Current working directory: {cwd}\")\n\n# List files and directories in the current directory\nprint(\"Files and directories in the current directory:\")\nfor item in os.listdir(cwd):\n    print(item)", "for item in os.listdir(cwd):\n    print(item)\n\n# Create a new directory\nnew_dir = \"example_directory\"\nos.makedirs(new_dir, exist_ok=True)\nprint(f\"Created new directory: {new_dir}\")\n\n# Rename the directory\nnew_name = \"renamed_directory\"", "# Rename the directory\nnew_name = \"renamed_directory\"\nos.rename(new_dir, new_name)\nprint(f\"Renamed directory from {new_dir} to {new_name}\")\n\n# Remove the directory\nos.rmdir(new_name)\nprint(f\"Removed directory: {new_name}\")\nimport shutil\n", "import shutil\n\nsrc_file = \"source.txt\"\ndst_file = \"destination.txt\"\n\n# Copy a file\nshutil.copy(src_file, dst_file)\nprint(f\"Copied {src_file} to {dst_file}\")\n\n# Move a file", "\n# Move a file\nnew_location = \"moved.txt\"\nshutil.move(dst_file, new_location)\nprint(f\"Moved {dst_file} to {new_location}\")\n\n# Remove a file\nos.remove(new_location)\nprint(f\"Removed file: {new_location}\")\nimport glob", "print(f\"Removed file: {new_location}\")\nimport glob\n\n# Find all Python files in the current directory\nprint(\"Python files in the current directory:\")\nfor py_file in glob.glob(\"*.py\"):\n    print(py_file)\nimport tempfile\n\n# Create a temporary file and write content to it\nwith tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as temp_file:\n    temp_file.write(\"Hello, World!\")\n    temp_path = temp_file.name\n    print(f\"Created temporary file: {temp_path}\")", "\n# Create a temporary file and write content to it\nwith tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as temp_file:\n    temp_file.write(\"Hello, World!\")\n    temp_path = temp_file.name\n    print(f\"Created temporary file: {temp_path}\")\n\n# Read the content of the temporary file\nwith open(temp_path, \"r\") as temp_file:\n    content = temp_file.read()\n    print(f\"Content of the temporary file: {content}\")", "with open(temp_path, \"r\") as temp_file:\n    content = temp_file.read()\n    print(f\"Content of the temporary file: {content}\")\n\n# Remove the temporary file\nos.remove(temp_path)\nprint(f\"Removed temporary file: {temp_path}\")\n"]}
{"filename": "example/08_example_modules_packages.py", "chunked_list": ["from animals.mammals import get_mammals, get_mammal_info\n\ndef main():\n    mammals = get_mammals()\n    print(\"Mammals:\")\n    for mammal in mammals:\n        print(mammal)\n\n    print(\"\\nMammal info:\")\n    for mammal in mammals:\n        print(get_mammal_info(mammal))", "\nif __name__ == \"__main__\":\n    main()\n"]}
{"filename": "example/07_decompiled_example_classes_objects.py", "chunked_list": ["class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def speak(self):\n        print(f\"{self.name} makes a generic animal sound.\")\n\n    def describe(self):\n        print(f\"{self.name} is {self.age} years old.\")", "\n\nclass Dog(Animal):\n    def __init__(self, name, age, breed):\n        super().__init__(name, age)\n        self.breed = breed\n\n    def speak(self):\n        print(f\"{self.name} barks!\")\n\n    def describe_breed(self):\n        print(f\"{self.name} is a {self.breed}.\")", "\n\nclass Cat(Animal):\n    def __init__(self, name, age, color):\n        super().__init__(name, age)\n        self.color = color\n\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\n    def describe_color(self):\n        print(f\"{self.name} has a {self.color} coat.\")", "\n\nanimal = Animal(\"Generic animal\", 3)\ndog = Dog(\"Buddy\", 5, \"Golden Retriever\")\ncat = Cat(\"Whiskers\", 7, \"black\")\n\nanimal.speak()\nanimal.describe()\n\ndog.speak()", "\ndog.speak()\ndog.describe()\ndog.describe_breed()\n\ncat.speak()\ncat.describe()\ncat.describe_color()"]}
{"filename": "example/06_decompiled_example_functions.py", "chunked_list": ["global_var = \"I'm a global variable\"\n\ndef outer_function():\n    outer_local_var = \"I'm a local variable in the outer function\"\n\n    def inner_function():\n        inner_local_var = \"I'm a local variable in the inner function\"\n        print(\"Inner function: \", inner_local_var)\n        print(\"Inner function: \", outer_local_var)\n        print(\"Inner function: \", global_var)\n\n    print(\"Outer function: \", outer_local_var)\n    print(\"Outer function: \", global_var)\n    inner_function()", "\ndef calculate(operation, a, b):\n    if operation == 'add':\n        return a + b\n    elif operation == 'subtract':\n        return a - b\n    elif operation == 'multiply':\n        return a * b\n    elif operation == 'divide':\n        return a / b\n    else:\n        return None", "\nmultiply = lambda x, y: x * y\n\nprint(calculate('add', 4, 5))\nprint(multiply(3, 4))"]}
{"filename": "example/03_example_if_else.py", "chunked_list": ["age = 25\ncountry = \"USA\"\njob_status = \"employed\"\nfavorite_color = \"blue\"\n\nif age < 18 or (country == \"USA\" and favorite_color == \"blue\"):\n    if job_status == \"employed\":\n        print(\"Minor or USA + blue, employed.\")\n    elif job_status == \"unemployed\":\n        print(\"Minor or USA + blue, unemployed.\")\n    else:\n        print(\"Minor or USA + blue, other status.\")\nelse:\n    if job_status == \"employed\":\n        if country != \"USA\" or favorite_color != \"blue\":\n            print(\"Not minor, not USA + blue, employed.\")\n    elif job_status == \"unemployed\":\n        if (country != \"USA\") ^ (favorite_color != \"blue\"):\n            print(\"Not minor, not USA + blue, unemployed.\")\n    else:\n        print(\"Not minor, not USA + blue, other status.\")", ""]}
{"filename": "example/06_example_functions.py", "chunked_list": ["global_var = \"I'm a global variable\"\n\ndef outer_function():\n    outer_local_var = \"I'm a local variable in the outer function\"\n\n    def inner_function():\n        nonlocal outer_local_var\n        inner_local_var = \"I'm a local variable in the inner function\"\n        print(f\"Inner function: {inner_local_var}\")\n        print(f\"Inner function: {outer_local_var}\")\n        print(f\"Inner function: {global_var}\")\n\n    print(f\"Outer function: {outer_local_var}\")\n    print(f\"Outer function: {global_var}\")\n\n    inner_function()", "\ndef calculate(operation, a, b):\n    if operation == \"add\":\n        return a + b\n    elif operation == \"subtract\":\n        return a - b\n    elif operation == \"multiply\":\n        return a * b\n    elif operation == \"divide\":\n        return a / b\n    else:\n        return None", "\n# Test the outer_function\nouter_function()\n\n# Test the calculate function\nprint(calculate(\"add\", 4, 5))\n\n# Lambda function example\nmultiply = lambda x, y: x * y\nprint(multiply(3, 4))", "multiply = lambda x, y: x * y\nprint(multiply(3, 4))\n"]}
{"filename": "example/07_example_classes_objects.py", "chunked_list": ["class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def speak(self):\n        print(f\"{self.name} makes a generic animal sound.\")\n\n    def describe(self):\n        print(f\"{self.name} is {self.age} years old.\")", "\n\nclass Dog(Animal):\n    def __init__(self, name, age, breed):\n        super().__init__(name, age)\n        self.breed = breed\n\n    def speak(self):\n        print(f\"{self.name} barks!\")\n\n    def describe_breed(self):\n        print(f\"{self.name} is a {self.breed}.\")", "\n\nclass Cat(Animal):\n    def __init__(self, name, age, color):\n        super().__init__(name, age)\n        self.color = color\n\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\n    def describe_color(self):\n        print(f\"{self.name} has a {self.color} coat.\")", "\n\n# Creating objects\nanimal = Animal(\"Generic animal\", 3)\ndog = Dog(\"Buddy\", 5, \"Golden Retriever\")\ncat = Cat(\"Whiskers\", 7, \"black\")\n\n# Calling methods on objects\nanimal.speak()\nanimal.describe()", "animal.speak()\nanimal.describe()\n\ndog.speak()\ndog.describe()\ndog.describe_breed()\n\ncat.speak()\ncat.describe()\ncat.describe_color()", "cat.describe()\ncat.describe_color()\n"]}
{"filename": "src/pychd/main.py", "chunked_list": ["import argparse\nimport logging\nfrom logging.config import fileConfig\nfrom pathlib import Path\n\nfrom . import compile, decompile\n\n\ndef parse_args() -> argparse.Namespace:\n    # create the top-level parser\n    parser = argparse.ArgumentParser(\n        description=\"Decompile|Compile Python source files into bytecode.\"\n    )\n    subparsers = parser.add_subparsers(dest=\"command\", required=True)\n\n    # create the parser for the \"decompile\" command\n    parser_decompile = subparsers.add_parser(\n        \"decompile\", help=\"Decompile Python source files into bytecode.\"\n    )\n    parser_decompile.add_argument(\"path\", help=\"Path to decompile\", type=str)\n    parser_decompile.add_argument(\n        \"-o\", \"--output\", help=\"Output path\", type=str, required=False\n    )\n\n    # create the parser for the \"compile\" command\n    parser_compile = subparsers.add_parser(\n        \"compile\", help=\"Compile Python source files into bytecode.\"\n    )\n    parser_compile.add_argument(\"path\", help=\"Path to compile\", type=str)\n\n    return parser.parse_args()", "def parse_args() -> argparse.Namespace:\n    # create the top-level parser\n    parser = argparse.ArgumentParser(\n        description=\"Decompile|Compile Python source files into bytecode.\"\n    )\n    subparsers = parser.add_subparsers(dest=\"command\", required=True)\n\n    # create the parser for the \"decompile\" command\n    parser_decompile = subparsers.add_parser(\n        \"decompile\", help=\"Decompile Python source files into bytecode.\"\n    )\n    parser_decompile.add_argument(\"path\", help=\"Path to decompile\", type=str)\n    parser_decompile.add_argument(\n        \"-o\", \"--output\", help=\"Output path\", type=str, required=False\n    )\n\n    # create the parser for the \"compile\" command\n    parser_compile = subparsers.add_parser(\n        \"compile\", help=\"Compile Python source files into bytecode.\"\n    )\n    parser_compile.add_argument(\"path\", help=\"Path to compile\", type=str)\n\n    return parser.parse_args()", "\n\ndef setup(logging_path: Path) -> None:\n    fileConfig(logging_path)\n\n\ndef cli() -> None:\n    logging_config = Path(__file__).parent / \"logging.conf\"\n    if logging_config.exists():\n        setup(logging_config)\n    args = parse_args()\n    logging.info(args)\n    if args.command == \"compile\":\n        to_compile = Path(args.path)\n        compile.compile(to_compile=to_compile)\n    elif args.command == \"decompile\":\n        to_decompile = Path(args.path)\n        output_path = Path(args.output) if args.output else None\n        decompile.decompile(to_decompile=to_decompile, output_path=output_path)", "\n\ndef main() -> None:\n    cli()\n\n\nif __name__ == \"__main__\":\n    main()\n", ""]}
{"filename": "src/pychd/__init__.py", "chunked_list": [""]}
{"filename": "src/pychd/compile.py", "chunked_list": ["import argparse\nimport compileall\nimport logging\nimport py_compile\nfrom pathlib import Path\n\n\ndef parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser(\n        description=\"Compile Python source files into bytecode.\",\n        epilog=\"Example: python generate_bytecode.py\",\n    )\n    parser.add_argument(\"directory\", help=\"Directory to compile\", type=str)\n    return parser.parse_args()", "\n\ndef compile(to_compile: Path) -> None:\n    if to_compile.is_dir():\n        logging.info(\"Compiling Python source files...\")\n        compileall.compile_dir(to_compile)\n    else:\n        logging.info(\"Compiling Python source file...\")\n        py_compile.compile(str(to_compile))\n", ""]}
{"filename": "src/pychd/decompile.py", "chunked_list": ["import dis\nimport io\nimport logging\nimport marshal\nimport sys\nimport textwrap\nfrom pathlib import Path\nfrom typing import Optional\n\nimport openai", "\nimport openai\nfrom pytype.pyc.magic import magic_word_to_version\n\n\ndef disassemble_pyc_file(pyc_file: Path) -> str:\n    with open(pyc_file, \"rb\") as f:\n        # Read the first 16 bytes, which contain the magic number, timestamp, and size\n        _header = f.read(16)\n        magic_word = _header[:2]\n        pyc_major_version, pyc_minor_version = magic_word_to_version(magic_word)\n        py_major_version, py_minor_version, _, _, _ = sys.version_info\n        if not (\n            pyc_major_version == py_major_version\n            and pyc_minor_version == py_minor_version\n        ):\n            print(\"Python bytecode uses and your Python version are incompatible\")\n            sys.exit(1)\n        logging.info(\n            f\"Python bytecode uses Python {py_major_version}.{py_minor_version}\"\n        )\n        # Read the remaining bytecode\n        bytecode = marshal.load(f)\n    original_stdout = sys.stdout\n    string_output = io.StringIO()\n    sys.stdout = string_output\n    dis.dis(bytecode)\n    sys.stdout = original_stdout\n    disassembled_pyc = string_output.getvalue()\n\n    logging.info(\n        textwrap.dedent(\n            f\"\"\"\\\n      \ufe0f\u2b50\u2b50\u2b50Disassembled Python bytecode\u2b50\u2b50\u2b50\\n{disassembled_pyc}\n      \"\"\"\n        )\n    )\n    return str(disassembled_pyc)", "\n\ndef decompile_disassembled_pyc(disassembled_pyc: str) -> str:\n    model = \"gpt-3.5-turbo\"\n    temperature = 0.7\n    user_prompt = textwrap.dedent(\n        f\"\"\"\\\n        You are a Python decompiler.\n        You will be given a disassembled Python bytecode.\n        Decompile it into the original source code.\n        Output only the original full source code.\n        Do not the natural language description.\n        Do not surround the code with triple quotes such as '```' or '```python'.\n        ```\n        {disassembled_pyc}\n        ```\n        \"\"\"\n    )\n    response = openai.ChatCompletion.create(\n        model=model,\n        temperature=temperature,\n        messages=[{\"role\": \"user\", \"content\": user_prompt}],\n    )\n    logging.info(f\"{response=}\")\n    generated_text: str = response.choices[0].message.content\n    logging.info(f\"{generated_text=}\")\n    return generated_text", "\n\ndef decompile(to_decompile: Path, output_path: Optional[Path]) -> None:\n    logging.info(\"Disassembling Python bytecode file...\")\n    input_pyc_file = to_decompile\n    logging.info(f\"Input Python bytecode file: {input_pyc_file}\")\n    disassembled_pyc = disassemble_pyc_file(input_pyc_file)\n    logging.info(\"Decompiling disassembled Python bytecode...\")\n    decompiled_py = decompile_disassembled_pyc(disassembled_pyc)\n    # if no path is specified, print to stdout\n    if not output_path:\n        logging.info(\"No output path specified. Printing to stdout...\")\n        print(decompiled_py)\n        return\n    # if path is specified, write to file\n    with open(output_path, \"w\") as f:\n        f.write(decompiled_py)\n    logging.info(f\"Decompiled Python source code written to: {output_path}\")", ""]}
