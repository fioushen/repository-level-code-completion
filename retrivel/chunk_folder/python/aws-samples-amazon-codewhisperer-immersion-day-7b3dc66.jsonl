{"filename": "sql/connect/db-connect.py", "chunked_list": ["# Sample table schema:\n\t#CREATE TABLE Contacts ( \n\t#  ID int, \n\t#  LastName varchar(255), \n\t#  FirstName varchar(255), \n\t#  Address varchar(255), \n\t#  City varchar(255), \n\t#  State varchar(255), \n\t#  ZipCode varchar(5), \n\t#); \n", "#\n"]}
{"filename": "python/deals/deals_api_solution.py", "chunked_list": ["import boto3\n\timport json\n\timport base64\n\tdeals = [\n\t    {\n\t        'url': 'https://example.com/deals/001',\n\t        'name': 'Deal 001',\n\t        'description': 'Deal 001 description',\n\t        'price': '100',\n\t        'currency': 'USD',\n", "    },\n\t    {\n\t        'url': 'https://example.com/deals/002',\n\t        'name': 'Deal 002',\n\t        'description': 'Deal 002 description',\n\t        'price': '200',\n\t        'currency': 'USD'\n\t    },\n\t    {\n\t        'url': 'https://example.com/deals/003',\n", "        'name': 'Deal 003',\n\t        'description': 'Deal 003 description',\n\t        'price': '300',\n\t        'currency': 'USD'\n\t    }\n\t]\n\t# Function to convert json to xml\n\tdef json_to_xml(json_data):\n\t    xml = '<deals>'\n\t    for deal in json_data:\n", "        xml += '<deal>'\n\t        xml += '<url>' + deal['url'] + '</url>'\n\t        xml += '<name>' + deal['name'] + '</name>'\n\t        xml += '<description>' + deal['description'] + '</description>'\n\t        xml += '<price>' + deal['price'] + '</price>'\n\t        xml += '<currency>' + deal['currency'] + '</currency>'\n\t        xml += '</deal>'\n\t    xml += '</deals>'\n\t    return xml\n\t# Lambda function to insert user into DynamoDB table\n", "def lambda_handler(event, context):\n\t    print(event)\n\t    try:\n\t        accepts = event['headers']['Accept']\n\t        if accepts == 'application/xml':\n\t            print(json_to_xml(deals))\n\t            return {\n\t                'statusCode': 200,\n\t                'headers': {'content-type': 'application/xml'},\n\t                'body': json_to_xml(deals)\n", "            }\n\t        return {\n\t            'statusCode': 200,\n\t            'headers': {'content-type': 'application/json'},\n\t            'body': json.dumps(deals)\n\t        }\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/deals/test_deals_api.py", "chunked_list": ["import json \n\tfrom unittest import TestCase\n\tfrom deals_api import lambda_handler;\n\tclass TryTesting(TestCase):\n\t    def test_function_returns_json(self):\n\t        event = {\n\t            \"httpMethod\": \"GET\",\n\t            \"headers\": {\n\t                \"Accept\": \"application/json\",\n\t            }\n", "        }\n\t        response = lambda_handler(event, context=None)\n\t        body = response['body']\n\t        self.assertEqual(response['statusCode'], 200)\n\t        self.assertEqual(response['headers']['content-type'], 'application/json')\n\t        self.assertEqual(body[0], '[')        \n\t    def test_function_returns_xml(self):\n\t        event = {\n\t            \"httpMethod\": \"GET\",\n\t            \"headers\": {\n", "                \"Accept\": \"application/xml\",\n\t            }\n\t        }\n\t        response = lambda_handler(event, context=None)\n\t        body = response['body']\n\t        self.assertEqual(response['statusCode'], 200)\n\t        self.assertEqual(response['headers']['content-type'], 'application/xml')\n\t        self.assertEqual(body[0], '<')\n"]}
{"filename": "python/deals/deals_api.py", "chunked_list": ["import boto3\n\timport json\n\timport base64\n\tdeals = [\n\t    {\n\t        'url': 'https://example.com/deals/001',\n\t        'name': 'Deal 001',\n\t        'description': 'Deal 001 description',\n\t        'price': '100',\n\t        'currency': 'USD',\n", "    },\n\t    {\n\t        'url': 'https://example.com/deals/002',\n\t        'name': 'Deal 002',\n\t        'description': 'Deal 002 description',\n\t        'price': '200',\n\t        'currency': 'USD'\n\t    },\n\t    {\n\t        'url': 'https://example.com/deals/003',\n", "        'name': 'Deal 003',\n\t        'description': 'Deal 003 description',\n\t        'price': '300',\n\t        'currency': 'USD'\n\t    }\n\t]\n\t# Lambda function to insert user into DynamoDB table\n\tdef lambda_handler(event, context):\n\t    print(event)\n\t    try:\n", "        return {\n\t            'statusCode': 200,\n\t            'headers': {'content-type': 'application/json'},\n\t            'body': json.dumps(deals)\n\t        }\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/users/user_api_solution.py", "chunked_list": ["import os\n\timport boto3\n\timport json\n\tQUEUE_URL = os.getenv(\"QUEUE_URL\", default=\"test\")\n\tsqs = boto3.client('sqs')\n\t# Function to send the message to SQS\n\tdef send_message_to_sqs(body):\n\t    print('Sending message to SQS')\n\t    sqs.send_message(\n\t        QueueUrl=QUEUE_URL,\n", "        MessageBody=json.dumps(body)\n\t    )\n\t# Function to validate an email address using a regular expression\n\tdef validate_email(email):\n\t    import re\n\t    if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n\t        return True\n\t    return False\n\t# Function to test if a string contains a five digit US zip code\n\tdef validate_zip(zip):\n", "    if len(zip) == 5:\n\t        if zip.isdigit():\n\t            return True\n\t    return False\n\t# Function to test if required fields are present in the message body\n\tdef validate_required_fields(body):\n\t    if 'username' in body and 'email' in body and 'first_name' in body and 'last_name' in body and 'age' in body and 'city' in body and 'state' in body and 'zip' in body and 'country' in body:\n\t        return True\n\t    return False\n\t# Lambda function to publish user to a queue\n", "def lambda_handler(event, context):\n\t    print(event)\n\t    try:\n\t        body = json.loads(event['body'])\n\t        # Validate email\n\t        if not validate_email(body['email']):\n\t            return {'statusCode': 400}\n\t        # Validate zip\n\t        if not validate_zip(body['zip']):\n\t            return {'statusCode': 400}\n", "        # Validate required fields\n\t        if not validate_required_fields(body):\n\t            return {'statusCode': 400}\n\t        send_message_to_sqs(body)\n\t        return {'statusCode': 200}\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/users/user_api.py", "chunked_list": ["import os\n\timport boto3\n\timport json\n\tQUEUE_URL = os.getenv(\"QUEUE_URL\", default=\"test\")\n\tsqs = boto3.client('sqs')\n\t# Function to send the message to SQS\n\tdef send_message_to_sqs(body):\n\t    print('Sending message to SQS')\n\t    sqs.send_message(\n\t        QueueUrl=QUEUE_URL,\n", "        MessageBody=json.dumps(body)\n\t    )\n\t# Lambda function to publish user to a queue\n\tdef lambda_handler(event, context):\n\t    print(event)\n\t    try:\n\t        body = json.loads(event['body'])\n\t        send_message_to_sqs(body)\n\t        return {'statusCode': 200}\n\t    except Exception as e:\n", "        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/users/test_user_api.py", "chunked_list": ["import json \n\tfrom unittest import TestCase\n\timport user_api \n\tfrom unittest.mock import patch, MagicMock\n\tclass TestUserApi(TestCase):\n\t    @patch('user_api.send_message_to_sqs', MagicMock)\n\t    def test_valid_message_should_return_200(self):\n\t        body = {\n\t            \"username\": \"john\",\n\t            \"email\": \"john@example.com\",\n", "            \"first_name\": \"John\",\n\t            \"last_name\": \"Doe\",\n\t            \"age\": 30,\n\t            \"city\": \"New York\",\n\t            \"state\": \"NY\",\n\t            \"zip\": \"10001\",\n\t            \"country\": \"USA\"\n\t        }\n\t        event = {\n\t            \"body\": json.dumps(body)\n", "        }\n\t        response = user_api.lambda_handler(event, context=None)\n\t        self.assertEqual(response['statusCode'], 200)\n\t    @patch('user_api.send_message_to_sqs', MagicMock)\n\t    def test_invalid_email_should_return_400(self):\n\t        body = {\n\t            \"username\": \"john\",\n\t            \"email\": \"NOT_A_VALID_EMAIL_ADDRESS\",\n\t            \"first_name\": \"John\",\n\t            \"last_name\": \"Doe\",\n", "            \"age\": 30,\n\t            \"city\": \"New York\",\n\t            \"state\": \"NY\",\n\t            \"zip\": \"10001\",\n\t            \"country\": \"USA\"\n\t        }\n\t        event = {\n\t            \"body\": json.dumps(body)\n\t        }\n\t        response = user_api.lambda_handler(event, context=None)\n", "        self.assertEqual(response['statusCode'], 400)\n\t    @patch('user_api.send_message_to_sqs', MagicMock)\n\t    def test_invalid_zip_should_return_400(self):\n\t        body = {\n\t            \"username\": \"john\",\n\t            \"email\": \"john@example.com\",\n\t            \"first_name\": \"John\",\n\t            \"last_name\": \"Doe\",\n\t            \"age\": 30,\n\t            \"city\": \"New York\",\n", "            \"state\": \"NY\",\n\t            \"zip\": \"NOT_A_VALID_ZIPCODE\",\n\t            \"country\": \"USA\"\n\t        }\n\t        event = {\n\t            \"body\": json.dumps(body)\n\t        }\n\t        response = user_api.lambda_handler(event, context=None)\n\t        self.assertEqual(response['statusCode'], 400)\n\t    @patch('user_api.send_message_to_sqs', MagicMock)\n", "    def test_missing_fields_should_return_400(self):\n\t        body = {\n\t            \"username\": \"john\",\n\t            \"email\": \"john@example.com\",\n\t            \"age\": 30,\n\t            \"city\": \"New York\",\n\t            \"state\": \"NY\",\n\t            \"zip\": \"10001\",\n\t            \"country\": \"USA\"\n\t        }\n", "        event = {\n\t            \"body\": json.dumps(body)\n\t        }\n\t        response = user_api.lambda_handler(event, context=None)\n\t        self.assertEqual(response['statusCode'], 400)"]}
{"filename": "python/products/test_product_api.py", "chunked_list": ["import product_api\n\tfrom unittest import TestCase\n\tfrom unittest.mock import patch, MagicMock\n\tclass TestProductApi(TestCase):\n\t    # Patch get_products and test lambda_handler returns a single record\n\t    @patch('product_api.get_products')\n\t    def test_lambda_handler_single(self, mock_get_products):\n\t        mock_get_products.return_value = [{'id': '1', 'name': 'test', 'description': 'test'}]\n\t        response = product_api.lambda_handler(None, None)\n\t        self.assertEqual(response['statusCode'], 200)\n", "        self.assertEqual(response['body'], '[{\"id\": \"1\", \"name\": \"test\", \"description\": \"test\"}]')"]}
{"filename": "python/products/test_product_api_solution.py", "chunked_list": ["import product_api\n\tfrom unittest import TestCase\n\tfrom unittest.mock import patch, MagicMock\n\tclass TestProductApi(TestCase):\n\t    # Patch get_products and test lambda_handler returns a single record\n\t    @patch('product_api.get_products')\n\t    def test_lambda_handler_single(self, mock_get_products):\n\t        mock_get_products.return_value = [{'id': '1', 'name': 'test', 'description': 'test'}]\n\t        response = product_api.lambda_handler(None, None)\n\t        self.assertEqual(response['statusCode'], 200)\n", "        self.assertEqual(response['body'], '[{\"id\": \"1\", \"name\": \"test\", \"description\": \"test\"}]')\n\t    # Patch get_products and test lambda_handler returns multiple records\n\t    @patch('product_api.get_products')\n\t    def test_lambda_handler_multiple(self, mock_get_products):\n\t        mock_get_products.return_value = [{'id': '1', 'name': 'test', 'description': 'test'}, {'id': '2', 'name': 'test2', 'description': 'test2'}]\n\t        response = product_api.lambda_handler(None, None)\n\t        self.assertEqual(response['statusCode'], 200)\n\t        self.assertEqual(response['body'], '[{\"id\": \"1\", \"name\": \"test\", \"description\": \"test\"}, {\"id\": \"2\", \"name\": \"test2\", \"description\": \"test2\"}]')"]}
{"filename": "python/products/product_api.py", "chunked_list": ["import os\n\timport boto3\n\timport json\n\tfrom boto3.dynamodb.conditions import Key\n\tTABLE_NAME = os.getenv(\"TABLE_NAME\", default=\"products\")\n\tddb = boto3.client('dynamodb')\n\t# Function to query products table \n\tdef get_products():\n\t    table = ddb.scan(\n\t        TableName=TABLE_NAME,\n", "        KeyConditionExpression=Key('id').eq(id),\n\t        AttributesToGet=['id', 'name', 'description']\n\t    )\n\t    return table['Items']\n\t# Lambda function to upload an image to S3\n\tdef lambda_handler(event, context):\n\t    try:\n\t        productss = get_products() \n\t        return {\n\t            'statusCode': 200,\n", "            'body': json.dumps(productss),\n\t        }\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}\n"]}
{"filename": "python/prompts/example3.py", "chunked_list": ["\"\"\" \n\tFunction that takes a list that contains some numbers and strings, format them \n\tinto a string in which the numbers a prepended with a '#' and the strings \n\tare wrapped in double quotes\n\t\"\"\""]}
{"filename": "python/prompts/example2b.py", "chunked_list": ["# Function to create a DynamoDB table with employee ID as primary key and ReadCapacityUnits at 100 and WriteCapacityUnits at 200"]}
{"filename": "python/prompts/example4.py", "chunked_list": ["fake_users = [\n\t    { \"name\": \"User 1\", \"id\": \"user1\", \"city\": \"San Francisco\", \"state\": \"CA\" },\n\t    { \"name\": \"User 2\", \"id\": \"user2\", \"city\": \"Tampa\", \"state\": \"FL\" },"]}
{"filename": "python/prompts/example2a.py", "chunked_list": ["# Create a function to create a DynamoDB table"]}
{"filename": "python/prompts/example7.py", "chunked_list": ["from unittest import TestCase\n\t# Function to sum two numbers\n\tdef sum(x, y):\n\t    return x + y\n\tclass TestSum(TestCase):\n\t    # test the sum method with integers\n"]}
{"filename": "python/prompts/example1b.py", "chunked_list": ["# Create a function for binary search recursive method"]}
{"filename": "python/prompts/example6a.py", "chunked_list": ["import re\n\t# function to verify email address"]}
{"filename": "python/prompts/example5.py", "chunked_list": ["# define torch nn.module with 1 input layer, 3 hidden layers, and 1 output layer "]}
{"filename": "python/prompts/example6b.py", "chunked_list": ["import boto3\n\t# Create SES client\n\tses = boto3.client('ses')\n\t#function to verify email address"]}
{"filename": "python/prompts/example1a.py", "chunked_list": ["# Create a function for binary search"]}
{"filename": "python/basics/example3.py", "chunked_list": ["# Parse a CSV string of songs and return a list of dictionaries\n\t# Fields include artist, album, title and year\n\t# Ignore lines starting with #"]}
{"filename": "python/basics/example4.py", "chunked_list": []}
{"filename": "python/basics/example2.py", "chunked_list": ["# Function to upload a file to an S3 bucket"]}
{"filename": "python/basics/example1.py", "chunked_list": ["fakeUsers = [\n\t    { \"name\": \"Harry Potter\", \"id\": \"user1\" },\n\t]"]}
{"filename": "python/images/image_api.py", "chunked_list": ["import os\n\timport boto3\n\timport json\n\timport base64\n\tBUCKET_NAME = os.getenv(\"BUCKET_NAME\", default=\"mybucket\")\n\ts3 = boto3.client('s3')\n\t# Upload the image to S3\n\tdef upload_image_to_s3(key, file, type):\n\t    print('Uploading image to S3')\n\t    s3.put_object(\n", "        Body=file, \n\t        Bucket=BUCKET_NAME, \n\t        Key=key, \n\t        ContentType='image/jpeg'\n\t    )\n\t# Lambda function to upload an image to S3\n\tdef lambda_handler(event, context):\n\t    try:\n\t        body = json.loads(event['body'])\n\t        key = body['file_name']\n", "        type = body['file_type']\n\t        image = base64.b64decode(body['file_content'])\n\t        upload_image_to_s3(key, image, type)\n\t        return {'statusCode': 200}\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/images/image_api_solution.py", "chunked_list": ["import os\n\timport boto3\n\timport json\n\timport base64\n\tBUCKET_NAME = os.getenv(\"BUCKET_NAME\", default=\"mybucket\")\n\ts3 = boto3.client('s3')\n\t# Upload the image to S3\n\tdef upload_image_to_s3(key, file, type):\n\t    print('Uploading image to S3')\n\t    s3.put_object(\n", "        Body=file, \n\t        Bucket=BUCKET_NAME, \n\t        Key=key, \n\t        ContentType='image/jpeg'\n\t    )\n\t# Function to moderate image with AWS Rekognition\n\tdef moderate_image(image):\n\t    client = boto3.client('rekognition')\n\t    response = client.detect_moderation_labels(Image={'Bytes': image})\n\t    print(response)\n", "    return len(response[\"ModerationLabels\"]) == 0\n\t# Lambda function to upload an image to S3\n\tdef lambda_handler(event, context):\n\t    try:\n\t        body = json.loads(event['body'])\n\t        key = body['file_name']\n\t        type = body['file_type']\n\t        image = base64.b64decode(body['file_content'])\n\t        # Moderate the image\n\t        if not moderate_image(image):\n", "            return {'statusCode': 400}\n\t        upload_image_to_s3(key, image, type)\n\t        return {'statusCode': 200}\n\t    except Exception as e:\n\t        print(e)\n\t        return {'statusCode': 500}"]}
{"filename": "python/images/test_image_api.py", "chunked_list": ["import json \n\tfrom unittest import TestCase\n\timport image_api\n\tfrom unittest.mock import patch, MagicMock\n\t# Function to load an image as base64 string\n\tdef load_image(image_path):\n\t    with open(image_path, \"rb\") as image_file:\n\t        return image_file.read()\n\tclass TryTesting(TestCase):\n\t    @patch('image_api.upload_image_to_s3', MagicMock)\n", "    def test_appropriate_content_should_return_200(self):\n\t        body = {\n\t            \"file_name\": \"lamp.jpeg\",\n\t            \"file_type\": \"image/jpeg\",\n\t            \"file_content\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxEQEhASEBASFRETEBUQFhISDxIQERAQFRcWGBcSExUYHiggGBolGxMTITEhJSkrMS4uFyE/ODMsQyotLi0BCgoKDQ0OFxAPFSsdFR0uKystKystOCsrKystLSw4LTctLS04KzgrKzc3Li4tKy0tOCstKy0rKystKysrKy0rK//AABEIAOEA4QMBIgACEQEDEQH/xAAcAAEAAQUBAQAAAAAAAAAAAAAABgIEBQcIAQP/xABFEAACAQIDBQQFBwoEBwAAAAAAAQIDEQQFIQYSMUFRBxNhcSIyQoGRM1JicqGxwRQjU2NzkqOys8IkJdHxFTRkdIKi4f/EABcBAQEBAQAAAAAAAAAAAAAAAAABAwL/xAAbEQEBAAIDAQAAAAAAAAAAAAAAARFBAjJCIf/aAAwDAQACEQMRAD8A3iAAAAAAAAAAAAAAAADE57tHhsFG9eqk7XVOPpVJeUfxdkauz/tRxVSVsKlRgnppGpUl9ZyTS8kvewNzg1rsT2jzrSVLHQSb9XEQVoN9KsfZ+stOqXE2DWx0ISjFu8pO1oreavzduCAuQeJnoAAAAAAAAAAAAAAAAAAAAAAAAAAAAW2Px9KhB1K1SMIL2pOy8l1fgjW+0valxhgo+HfVFr5wh+MvgBsPNs3oYWG/iKsYLld3lLwjFayfkaw2n7UKk96GDj3ceHeSs6rXguEPtfkQDH5jWxE3OpOU5vjKTbfl5eBThsG5PgEeVq1StJylKUpSd3KTcpN+LerMjluSyqNX4GUyzKoxs5nuZ5vCkrQAvXVo4OOlnKx9tldqZVpvDXalJtw3PXqx/Qp8YpavTVrS6S115mGYym22yywuMnSnCpTk41Kc1OMlylF3T+KJVdU5PQnTpQjUtdclwjHlH3F6YzZrNo43C4fExVlVpqTXzZ8Jx90lJe4yZQAAAAAAAAAAAAAAAAAAAAAACI7dbbQy10qSpudetGTpp6QtGyd2tW9VoviBKsRXhTi51JRjFK7lJqMUvFs1/tL2nUqd4YOPeS4d7NNU19WPGX2LzNb55tHicbK9eq5K+kF6NOH1YrT38fExqwzYFznGd18VNzrVJTlyu9I+EYrSK8iyhRci7pYSxk8Hgr6sIs8FlzlyM7RoQpK7KKuJhSXIjea5u53SegF/m2dcVHQjOIxLlxZ8ata58JSCjmfbCYadWcYQi5SlJRUUruUnokkfCnTcmkle75a3Zvzsv2EWDisTiY/4mUfRi18hB/3tcenDqBItgskngMDQw9RpzjvzlbVRlUnKbivLet8SQgAAAAAAAAAAAAAAAAAAAAAAAgfbDs3LGYLvaCvicJL8op2V5SivlIJLi2kmlzcUTwAc7YKEMZRhiKSW+1apBfPXFrx5+N/jXTp9DKbZZN/wXHd/TVsvxk3dLhQxDvJq3JcZLw3l7KK8Xhl8rDg9ZJcPrrw6/HqQYyEEuJTiswVNWRb4/MEr24kexmKcmUfXH5g5N6mNnUKJzPk2BU5Hi1PFqbO7KdgfyqUcXiof4eEvQpyWlea5tc4J/F6cmBhckyOphu4r16Mkqse8pqasqkOqfKVrNLjqmbr2UztVoxhKV5W9Cb41IrjGX01z68epls2yuliqUqVaO9B+6UJLhKD5SXU1hmmBq5XiIqTlOjLWFRJRk7atq3CrF69Gvfbi5lzpY24DFbPZr+UU9Wt+Nt62ikn6tSK6NcuTTXIyp3LlAAAAAAAAAAAAAAAAAAAAAAAAFhnuUUcbQq4evHep1I7r6xfFTi+Uk0mn1Ro7L41ssxU8uxbu16WHq2tGvRd7W8dHpyaa5K/QBGdvNkKeaUNxtQr0250K3OlU6O2rg7K68nxSA0jtflPctVaa/MzfD9HN+z9V8vh0ItKZsTKa85d9gcfT3cRTvTqU5e3H9JB8+TuvBogue5ZLC1pU5ar1oS+fB8H58n4ogsZMo4nnElmwWx9XMayirxpRtKrVtpCPRdZPkvfyKMj2a7DyzCp3lVNYWm1vy4OpLj3UH975LzR0Jh6MacYwhFRhGKjGMVaMYpWSS5I+OWZfTw1KFGjBRpwW7GK+99W+LZdADG7QZRDGUJ0Z6X9KMudOovVmvL7U2ZIAam2bzCrhK0qU42q0ZuLhf1ocZU11urTj/wDTatCtGcYzg04yipJrg4vVMhXaPlDShjaStOnaNS3Onf0Z+cW/g30RebEZsprun7SdSC6P24fF7y830M+Py4VLQAaIAAAAAAAAAAAAAAAAAAAAAAAAiG3+xizCEatFqnjqKvSq8FK2vdVGvZfXlfnqnqPOU8ZRqUa1N0sfhW26UlaTa9aMeqkrNW0vu62OiyN7W7F4bMd2U96niIepiaT3asPot+1HV6Pq7WuTA572S2cq4+vCjRWr1lJr0acFxnLw+/Q6V2dyOjgaEKFFejHVyfrVJ85yfV/YWmx+y1HLaTp0/SnN71Sq4pSqS5acoq+i8+rM8UAAAAAFFalGcZQmk4yi4yi9VKLVmn4WNT4WE8DiqlC73qNTfpt+3DjH96DcX7zbZB+0rL7Kji4LWnJUpv8AVyfoyflOy/8AM45z5lYmeFrxqQjOLvGUVJeTPqRbYXMN+E6TfqvvIr6E+K90r/vIlJ1LmZQABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTN8EsRRrUXwqU5Qv0bWj9zs/cXYA1dsPi3TrUlLRuTozV+Dlpb9+MTaJqfOYOhjcUo6WrKtHXnJRqfzNm1qc1JJrg0n7mZ8NxaqABogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANb7dU9zGqXz8PB++Mpxf2bpN9nqu/hsPLn3UU/OKs/tRFO0iFquDkucK0X/Ca/Ez2xNTewlP6M6kf/eTX2NGc7VdM8ADRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQrtKWmEf6ya58HDw8kX/AGfyvhZft5r+Use0rhhP2k/5C+7Pv+Vf7ef9pn7XSTAA0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJ7TJ2WF0vaVWfG3CKX9xfdnkr4aV+PfSfG/rRhJclyaMb2lS9PCL6Fd/wBIvuzqX5muuldf06ZnO66SwAGiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUzqKPrNLzaQFQLSWaYdca9FedWC/E9p5jQl6tak/KrB/iBCe0yVq2D+pW++kX/Zw/QxX7dfyRMF2uYlRq4Bp6ONbg/GkZzszd6WJf/UL+nAz9qmQANEAAAAAAAAAAAAAAAAAAAAAAAAAAB5OSSbbskrtvRJLmzVu1Xa5Cm5QwEI1LXXf1L923+rgrOS8W0vMl3aRUccsxzTa/M7unSUkmvg2c3VHdXQEgzLbrMcQ3v4uqk/ZpS7mKXT83a/vuYpVu8d6s3J9Zycn8ZGP3WeOmv9wL/FRo20nC/hYx6ceqKnApdNAXuWzvNJPSz58DMUdtMdgajjh6zhG6coOMJxlLhdqSfJLhbgY/Z2nh+8/P98uNpUlCXLhJSa59Op89pqNHvp9w6so3d5VVCLfSyi2c7Gytnu2dtxjjcOvGpQumvF05PX3S9xtTJs3oYymquGqxqQel1xjLnGSesX4M5LjF3sbG7GsdOnmMaak9ytSmpx5S3IuUZNdU09fpPqdDfgAAAAAAAAAAAAAAAAAAAAAAAAAAivai/wDK8b9SC/iQOY3UcXo/9DqXb/LamKy/F0aKvUlTUox5zlCUZ7i8Xu295yvV4tNNNNppppprRpp8H4AfeON6r4H1jiYvn9hjj0DJqrH5yG/H5y+KMYLgZSNeMXfeXxKKuMi+rMaeMmBeSxb9lJfaya9jU/8ANcPfnCqv4ciARJ32OQk80w26m92NWUrezDu5LefheUV70UdJAAAAAAAAAAAAAAAAAAAAAAAAAAAQnbPszweYuVVXoYl8a1JJqb61ab0n56PxJsAOb877Is0w93ShDEw5OjNRnb6VOdtfBORD8flGJw7ar4avTtx7yjUgvi1ZnYB41fiBxipp818UVWOv8Rk2FqfKYahP61GnL70Y+exWVyd3l2Db/wC1pf6AcnSklxa+Je4DKcTiGlQw9arf9HRnNfFKx1fhdnsHS+SweHh9TD04v7EZKMUtErLotAOdtnex/McQ4vEKGFp89+SqVrfRpwdvjJG6tkNj8LldNww8W5yt3ladnVqtcLvktXaK0VyQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//Z\"\n\t        }\n\t        event = {\n\t            \"body\": json.dumps(body)\n\t        }\n\t        response = image_api.lambda_handler(event, None)\n", "        self.assertEqual(response['statusCode'], 200)\n\t    @patch('image_api.upload_image_to_s3', MagicMock)\n\t    def test_inappropriate_content_should_return_400(self):\n\t        body = {\n\t            \"file_name\": \"gun.jpeg\",\n\t            \"file_type\": \"image/jpeg\",\n\t        \"file_content\": \"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\"\n\t        }\n\t        event = {\n\t            \"body\": json.dumps(body)\n", "        }\n\t        response = image_api.lambda_handler(event, None)\n\t        self.assertEqual(response['statusCode'], 400)\n"]}
