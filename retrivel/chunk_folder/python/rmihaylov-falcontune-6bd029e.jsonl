{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\tsetup(\n\t    name='falcontune',\n\t    version='0.1.0',\n\t    packages=find_packages(include=['falcontune', 'falcontune.*']),\n\t    entry_points={\n\t        'console_scripts': ['falcontune=falcontune.run:main']\n\t    }\n\t)\n"]}
{"filename": "setup_cuda.py", "chunked_list": ["from setuptools import setup\n\tfrom torch.utils import cpp_extension\n\tsetup(\n\t    name='quant_cuda',\n\t    ext_modules=[cpp_extension.CUDAExtension(\n\t        'quant_cuda',\n\t        [\n\t            'falcontune/backend/cuda/quant_cuda.cpp',\n\t            'falcontune/backend/cuda/quant_cuda_kernel.cu'\n\t        ]\n", "    )],\n\t    cmdclass={'build_ext': cpp_extension.BuildExtension}\n\t)\n"]}
{"filename": "falcontune/finetune.py", "chunked_list": ["import os\n\timport torch\n\timport wandb\n\timport transformers\n\tfrom transformers.utils import logging\n\tfrom peft import LoraConfig, get_peft_model_state_dict, set_peft_model_state_dict\n\tfrom falcontune.data import load_data\n\tfrom falcontune.model import load_model\n\tfrom falcontune.model.lora import load_adapter\n\tfrom falcontune.model.utils import model_to_half\n", "logger = logging.get_logger(\"transformers\")\n\tclass FinetuneConfig:\n\t    def __init__(self, args):\n\t        self.__dict__.update(args.__dict__)\n\t        self.target_modules = eval(self.target_modules)\n\t        self.gradient_accumulation_steps = self.batch_size // self.mbatch_size\n\t        self.lora_dropout = 0 if self.gradient_checkpointing else self.lora_dropout  # should be 0 if gradient checkpointing is on\n\t        self.val_set_size = int(self.val_set_size) if self.val_set_size > 1.0 else float(self.val_set_size)\n\t        self.world_size = int(os.environ.get(\"WORLD_SIZE\", 1))\n\t        self.local_rank = int(os.environ.get(\"LOCAL_RANK\", self.local_rank))\n", "        self.ddp = self.world_size != 1\n\t        self.device_map = \"auto\" if not self.ddp else {\"\": self.local_rank}\n\t        if self.ddp:\n\t            self.gradient_accumulation_steps = self.gradient_accumulation_steps // self.world_size\n\t    def __str__(self) -> str:\n\t        s = f\"\\nParameters:\\n{'config':-^20}\\n{self.dataset=}\\n{self.data_type=}\\n{self.lora_out_dir=}\\n{self.lora_apply_dir=}\" + \\\n\t            f\"\\n{self.weights=}\\n{self.target_modules=}\\n\\n\" + \\\n\t            f\"{'training':-^20}\\n\" + \\\n\t            f\"{self.mbatch_size=}\\n{self.batch_size=}\\n{self.gradient_accumulation_steps=}\\n{self.epochs=}\\n{self.lr=}\\n{self.cutoff_len=}\\n\" + \\\n\t            f\"{self.lora_r=}\\n{self.lora_alpha=}\\n{self.lora_dropout=}\\n{self.val_set_size=}\\n\" + \\\n", "            f\"{self.gradient_checkpointing=}\\n{self.gradient_checkpointing_ratio=}\\n\" + \\\n\t            f\"{self.warmup_steps=}\\n{self.save_steps=}\\n{self.save_total_limit=}\\n\" + \\\n\t            f\"{self.logging_steps=}\\n\" + \\\n\t            f\"{self.checkpoint=}\\n{self.skip=}\\n\" + \\\n\t            f\"{self.world_size=}\\n{self.ddp=}\\n{self.device_map=}\\n\"\n\t        return s.replace(\"self.\", \"\")\n\tdef finetune(args):\n\t    llm, tokenizer = load_model(args.model, args.weights, backend=args.backend)\n\t    tune_config = FinetuneConfig(args)\n\t    transformers.logging.set_verbosity_info()\n", "    # * Show loaded parameters\n\t    if tune_config.local_rank == 0:\n\t        logger.info(f\"{tune_config}\\n\")\n\t    if tune_config.gradient_checkpointing:\n\t        logger.info('Disable Dropout.')\n\t    if tune_config.mbatch_size > tune_config.batch_size:\n\t        raise Exception('batch_size need to be larger than mbatch_size.')\n\t    lora_config = LoraConfig(\n\t        r=tune_config.lora_r,\n\t        lora_alpha=tune_config.lora_alpha,\n", "        target_modules=tune_config.target_modules,\n\t        lora_dropout=tune_config.lora_dropout,\n\t        bias=\"none\",\n\t        task_type=\"CAUSAL_LM\",\n\t    )\n\t    model = load_adapter(\n\t        llm,\n\t        lora_apply_dir=tune_config.lora_apply_dir,\n\t        lora_config=lora_config,\n\t        ddp=tune_config.ddp\n", "    )\n\t    if getattr(model, 'loaded_in_4bit', False):\n\t        model_to_half(model, cast_model=False)\n\t    model.print_trainable_parameters()\n\t    if not tune_config.skip:\n\t        # Load Data\n\t        data = load_data(tune_config, tokenizer)\n\t        # Use gradient checkpointing\n\t        if tune_config.gradient_checkpointing:\n\t            logger.info('Applying gradient checkpointing ...')\n", "            from falcontune.model.gradient_checkpointing import apply_gradient_checkpointing\n\t            from falcontune.model.falcon.model import get_decoder_layer\n\t            apply_gradient_checkpointing(\n\t                model,\n\t                decoder_layer_class=get_decoder_layer(num_heads=llm.config.n_head),\n\t                checkpoint_ratio=tune_config.gradient_checkpointing_ratio)\n\t        # Disable Trainer's DataParallel for multigpu\n\t        if not tune_config.ddp and torch.cuda.device_count() > 1:\n\t            model.is_parallelizable = True\n\t            model.model_parallel = True\n", "        # Count eval count for wandb\n\t        if tune_config.val_set_size > 0:\n\t            eval_count = 10\n\t            eval_steps = max(\n\t                tune_config.logging_steps,\n\t                (len(data.train_data) + len(data.val_data)) // (eval_count * tune_config.mbatch_size)\n\t            )\n\t            logger.info(f\"Run eval every {eval_steps} steps\")\n\t        else:\n\t            eval_steps = 0\n", "        training_arguments = transformers.TrainingArguments(\n\t            per_device_train_batch_size=tune_config.mbatch_size,\n\t            gradient_accumulation_steps=tune_config.gradient_accumulation_steps,\n\t            warmup_steps=tune_config.warmup_steps,\n\t            optim=\"adamw_torch\",\n\t            num_train_epochs=tune_config.epochs,\n\t            learning_rate=tune_config.lr,\n\t            fp16=True,\n\t            logging_steps=tune_config.logging_steps,\n\t            evaluation_strategy=\"steps\" if eval_steps != 0 else \"no\",\n", "            save_strategy=\"steps\",\n\t            eval_steps=eval_steps if eval_steps != 0 else None,\n\t            save_steps=tune_config.save_steps,\n\t            output_dir=tune_config.lora_out_dir,\n\t            save_total_limit=tune_config.save_total_limit,\n\t            load_best_model_at_end=False,\n\t            ddp_find_unused_parameters=False if tune_config.ddp else None,\n\t        )\n\t        trainer = transformers.Trainer(\n\t            model=model,\n", "            train_dataset=data.train_data,\n\t            eval_dataset=data.val_data,\n\t            args=training_arguments,\n\t            data_collator=transformers.DataCollatorForLanguageModeling(tokenizer, mlm=False),\n\t        )\n\t        model.config.use_cache = False\n\t        # Set Model dict\n\t        old_state_dict = model.state_dict\n\t        model.state_dict = (\n\t            lambda self, *_, **__: get_peft_model_state_dict(self, old_state_dict())\n", "        ).__get__(model, type(model))\n\t        # Set Verbose\n\t        if tune_config.verbose:\n\t            transformers.logging.set_verbosity_info()\n\t        # Run Trainer\n\t        with wandb.init(project=\"alpaca_lora_4bit\") as run:\n\t            if tune_config.resume_checkpoint:\n\t                logger.info('Resuming from {} ...'.format(tune_config.resume_checkpoint))\n\t                state_dict_peft = torch.load(os.path.join(tune_config.resume_checkpoint, 'pytorch_model.bin'), map_location='cpu')\n\t                set_peft_model_state_dict(model, state_dict_peft)\n", "                trainer.train(tune_config.resume_checkpoint)\n\t            else:\n\t                trainer.train()\n\t        # Restore old model state dict\n\t        model.state_dict = old_state_dict\n\t        logger.info('Train completed.')\n\t    # Save Model\n\t    model.save_pretrained(tune_config.lora_out_dir)\n\t    if tune_config.checkpoint:\n\t        logger.info(\"Warning: Merge model + LoRA and save the whole checkpoint not implemented yet.\")\n", "    logger.info('Model Saved.')\n"]}
{"filename": "falcontune/run.py", "chunked_list": ["import os\n\timport argparse\n\tfrom falcontune.finetune import finetune\n\tfrom falcontune.generate import generate\n\tfrom falcontune.model import MODEL_CONFIGS\n\tfrom falcontune.backend import BACKENDS\n\tfrom falcontune.data import DATA_TYPES\n\tdef get_args():\n\t    parser = argparse.ArgumentParser(\n\t        prog=__file__.split(os.path.sep)[-1],\n", "        description=\"Produce FALCON in 4-bit training\"\n\t    )\n\t    parser.set_defaults(func=lambda args: parser.print_help())\n\t    subparsers = parser.add_subparsers(title='Commands')\n\t    # GENERATE\n\t    gen_parser = subparsers.add_parser('generate')\n\t    gen_parser.set_defaults(func=generate)\n\t    gen_parser.add_argument('--model', choices=MODEL_CONFIGS, required=True, help='Type of model to load')\n\t    gen_parser.add_argument('--weights', type=str, required=True, help='Path to the base model weights.')\n\t    gen_parser.add_argument(\"--lora_apply_dir\", default=None, required=False, help=\"Path to directory from which LoRA has to be applied before training. Default: %(default)s\")\n", "    gen_parser.add_argument('--prompt', type=str, default='', help='Text used to initialize generation')\n\t    gen_parser.add_argument('--instruction', type=str, default='', help='Instruction for an alpaca-style model')\n\t    gen_parser.add_argument('--input', type=str, default='', help='Input for an alpaca-style model')\n\t    gen_parser.add_argument('--max_new_tokens', type=int, default=400, help='Maximum new tokens of the sequence to be generated.')\n\t    gen_parser.add_argument('--top_p', type=float, default=.95, help='Top p sampling parameter.')\n\t    gen_parser.add_argument('--top_k', type=int, default=40, help='Top p sampling parameter.')\n\t    gen_parser.add_argument('--temperature', type=float, default=0.8, help='Sampling temperature.')\n\t    gen_parser.add_argument('--use_cache', action=\"store_true\", help='Use cache when generating.')\n\t    gen_parser.add_argument('--do_sample', action=\"store_true\", help='Sampling when generating.')\n\t    gen_parser.add_argument('--num_beams', type=int, default=1, help='Number of beams.')\n", "    gen_parser.add_argument('--interactive', action=\"store_true\", help='Enter prompts interactively.')\n\t    gen_parser.add_argument('--backend', type=str, default='triton', choices=BACKENDS, required=False, help='Change the default backend.')\n\t    # FINETUNE\n\t    tune_parser = subparsers.add_parser('finetune')\n\t    tune_parser.set_defaults(func=finetune)\n\t    # Model args group\n\t    tune_parser.add_argument('--model', choices=MODEL_CONFIGS, required=True, help='Type of model to load')\n\t    tune_parser.add_argument('--weights', type=str, required=True, help=\"Path to the quantized model in huggingface format. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--data_type\", choices=DATA_TYPES, help=\"Dataset format\", default=\"alpaca\")\n\t    tune_parser.add_argument(\"--dataset\", required=False, help=\"Path to local dataset file.\")\n", "    tune_parser.add_argument(\"--lora_out_dir\", default=\"alpaca_lora\", required=False, help=\"Directory to place new LoRA. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--lora_apply_dir\", default=None, required=False, help=\"Path to directory from which LoRA has to be applied before training. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--resume_checkpoint\", default=None, type=str, required=False, help=\"Path to checkpoint to resume training from. Default: %(default)s\")\n\t    # Training args group\n\t    tune_parser.add_argument(\"--mbatch_size\", default=1, type=int, help=\"Micro-batch size. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--batch_size\", default=2, type=int, help=\"Batch size. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--epochs\", default=3, type=int, help=\"Epochs. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--lr\", default=2e-4, type=float, help=\"Learning rate. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--cutoff_len\", default=256, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--lora_r\", default=8, type=int, help=\"Default: %(default)s\")\n", "    tune_parser.add_argument(\"--lora_alpha\", default=16, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--lora_dropout\", default=0.05, type=float, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--gradient_checkpointing\", action=\"store_true\", required=False, help=\"Use gradient checkpoint. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--gradient_checkpointing_ratio\", default=1, type=float, help=\"Gradient checkpoint ratio. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--val_set_size\", default=0.2, type=float, help=\"Validation set size. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--warmup_steps\", default=50, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--save_steps\", default=50, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--save_total_limit\", default=3, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"--logging_steps\", default=10, type=int, help=\"Default: %(default)s\")\n\t    tune_parser.add_argument(\"-c\", \"--checkpoint\", action=\"store_true\", help=\"Produce checkpoint instead of LoRA. Default: %(default)s\")\n", "    tune_parser.add_argument(\"--skip\", action=\"store_true\", help=\"Don't train model. Can be useful to produce checkpoint from existing LoRA. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--verbose\", action=\"store_true\", help=\"If output log of training. Default: %(default)s\")\n\t    tune_parser.add_argument(\"--target_modules\", default=\"['q_proj', 'v_proj']\", type=str, help=\"Target modules for LoRA.\")\n\t    # Backend\n\t    tune_parser.add_argument('--backend', type=str, default='triton', choices=BACKENDS, required=False, help='Change the default backend.')\n\t    # Data args\n\t    tune_parser.add_argument(\"--use_eos_token\", default=1, type=int, help=\"Use eos token instead if padding with 0. enable with 1, disable with 0.\")\n\t    # Multi GPU Support\n\t    tune_parser.add_argument(\"--local_rank\", type=int, default=0, help=\"local rank if using torch.distributed.launch\")\n\t    return parser.parse_args()\n", "def main():\n\t    args = get_args()\n\t    args.func(args)\n\tif __name__ == '__main__':\n\t    main()\n"]}
{"filename": "falcontune/__init__.py", "chunked_list": ["from falcontune.model.lora import replace_peft_model_with_gptq_lora_model\n\treplace_peft_model_with_gptq_lora_model()\n"]}
{"filename": "falcontune/data.py", "chunked_list": ["from abc import ABC, abstractmethod\n\tfrom typing import Dict, Any\n\timport torch\n\tfrom datasets import Dataset, load_dataset\n\tfrom transformers.utils import logging\n\tlogger = logging.get_logger(\"transformers\")\n\tclass TrainDataBase(ABC):\n\t    \"\"\"\n\t    \"\"\"\n\t    @abstractmethod\n", "    def __init__(self, dataset: str, val_set_size: int, tokenizer, cutoff_len: int) -> None:\n\t        \"\"\"\n\t        Args:\n\t            dataset (str): Path to dataset\n\t            val_set_size (int) : Size of validation set\n\t            tokenizer (_type_): Tokenizer\n\t        \"\"\"\n\t        self.tokenizer = tokenizer\n\t        self.dataset = dataset\n\t        self.val_set_size = val_set_size\n", "        self.cutoff_len = cutoff_len\n\t        self.train_data = None\n\t        self.val_data = None\n\t    @abstractmethod\n\t    def tokenize(self, prompt: str) -> Dict[str, Any]:\n\t        pass\n\t    @abstractmethod\n\t    def prepare_data(self) -> None:\n\t        \"\"\"Loads dataset from file and prepares train_data for trainer.\"\"\"\n\t        pass\n", "class TrainGPT4All(TrainDataBase):\n\t    def __init__(self, dataset: str, val_set_size: int, tokenizer, cutoff_len) -> None:\n\t        super().__init__(dataset, val_set_size, tokenizer, cutoff_len)\n\t    def tokenize(self, prompt: str, use_eos_token=True, **kwargs) -> Dict[str, Any]:\n\t        pass\n\t    def tokenize_inputs(self, examples):\n\t        max_length = self.cutoff_len\n\t        input_ids = torch.full((len(examples[\"prompt\"]), max_length), self.tokenizer.pad_token_id)\n\t        # ignore bos\n\t        newline_tokens = self.tokenizer(\"\\n\", return_tensors=\"pt\")[\"input_ids\"][0, 1:]\n", "        out = {\"labels\": [], \"attention_mask\": []}\n\t        for i, (prompt, response) in enumerate(zip(examples[\"prompt\"], examples[\"response\"])):\n\t            input_tokens = self.tokenizer(prompt, truncation=True, max_length=max_length // 2, return_tensors=\"pt\")[\"input_ids\"].squeeze()\n\t            if input_tokens.dim() == 0:\n\t                input_tokens = input_tokens.unsqueeze(0)\n\t            input_len = len(input_tokens)\n\t            # plus one since we remove bos from response\n\t            # but we subtract one since we want to add eos token\n\t            remaining_tokens = max_length - input_len - len(newline_tokens) + 1\n\t            # remove bos\n", "            target_tokens = self.tokenizer(response, truncation=True, max_length=remaining_tokens, return_tensors=\"pt\")[\"input_ids\"].squeeze()[1:]\n\t            input_ids[i, :input_len] = input_tokens\n\t            # add newline between prompt and response\n\t            newline_plus_inputs = input_len + len(newline_tokens)\n\t            input_ids[i, input_len: newline_plus_inputs] = newline_tokens\n\t            # add target tokens, remove bos\n\t            input_ids[i, newline_plus_inputs: newline_plus_inputs + len(target_tokens)] = target_tokens\n\t            # add eos token, enforce stopping if we don't truncate\n\t            # we don't want long code to stop generating if truncated during training\n\t            if newline_plus_inputs + len(target_tokens) < max_length:\n", "                input_ids[i, newline_plus_inputs + len(target_tokens)] = self.tokenizer.eos_token_id\n\t            labels = input_ids[i].clone()\n\t            labels[: newline_plus_inputs] = -100\n\t            labels[labels == self.tokenizer.pad_token_id] = -100\n\t            # to debug this, can set all values == -100 to the pad token, then assert that tokenizer.decode(labels, skip_special_tokens=True).strip() == response\n\t            attention_mask = input_ids[i].ne(self.tokenizer.pad_token_id).int()\n\t            out[\"labels\"].append(labels)\n\t            out[\"attention_mask\"].append(attention_mask)\n\t        out[\"input_ids\"] = input_ids\n\t        out = {k: torch.stack(v) if isinstance(v, list) else v for k, v in out.items()}\n", "        return out\n\t    def prepare_data(self, **kwargs) -> None:\n\t        dataset = load_dataset(\"json\", data_files=self.dataset)\n\t        self.val_data = None\n\t        if self.val_set_size > 0:\n\t            dataset = dataset[\"train\"].train_test_split(\n\t                test_size=self.val_set_size, shuffle=True, seed=42  # ! Seed = 42 (?)\n\t            )\n\t            train_dataset, val_dataset = dataset[\"train\"], dataset[\"test\"]\n\t            # tokenize inputs and return labels and attention mask\n", "            val_dataset = val_dataset.map(\n\t                lambda ele: self.tokenize_inputs(ele),\n\t                batched=True,\n\t                remove_columns=[\"source\", \"prompt\"],\n\t            )\n\t            self.val_data = val_dataset.with_format(\"torch\")\n\t        else:\n\t            train_dataset = dataset[\"train\"]\n\t        train_dataset = train_dataset.map(\n\t            lambda ele: self.tokenize_inputs(ele),\n", "            batched=True,\n\t            remove_columns=[\"source\", \"prompt\"],\n\t        )\n\t        self.train_data = train_dataset.with_format(\"torch\")\n\tclass TrainSAD(TrainDataBase):\n\t    def __init__(self, dataset: str, val_set_size: int, tokenizer, cutoff_len) -> None:\n\t        super().__init__(dataset, val_set_size, tokenizer, cutoff_len)\n\t    def tokenize(self, prompt: str, use_eos_token=True, **kwargs) -> Dict[str, Any]:\n\t        # there's probably a way to do this with the tokenizer settings\n\t        # but again, gotta move fast\n", "        if use_eos_token:\n\t            result = self.tokenizer(\n\t                prompt + self.tokenizer.eos_token,\n\t                truncation=True,\n\t                max_length=self.cutoff_len,\n\t                padding=False,\n\t            )\n\t            if (\n\t                result[\"input_ids\"][-1] != self.tokenizer.eos_token_id\n\t                and len(result[\"input_ids\"]) < self.cutoff_len\n", "            ):\n\t                result[\"input_ids\"].append(self.tokenizer.eos_token_id)\n\t                result[\"attention_mask\"].append(1)\n\t            return result\n\t        else:\n\t            result = self.tokenizer(\n\t                prompt,\n\t                truncation=True,\n\t                max_length=self.cutoff_len + 1,\n\t                padding=\"max_length\",\n", "            )\n\t            return {\n\t                \"input_ids\": result[\"input_ids\"][:-1],\n\t                \"attention_mask\": result[\"attention_mask\"][:-1],\n\t            }\n\t    def prepare_data(self, use_eos_token=True, **kwargs) -> None:\n\t        data = load_dataset(\"json\", data_files=self.dataset)\n\t        if self.val_set_size > 0:\n\t            train_val = data[\"train\"].train_test_split(test_size=self.val_set_size, shuffle=True, seed=42)\n\t            self.train_data = train_val[\"train\"].shuffle().map(lambda x: self.generate_and_tokenize_prompt(x, use_eos_token=use_eos_token))\n", "            self.val_data = train_val[\"test\"].shuffle().map(lambda x: self.generate_and_tokenize_prompt(x, use_eos_token=use_eos_token))\n\t        else:\n\t            self.train_data = data[\"train\"].shuffle().map(lambda x: self.generate_and_tokenize_prompt(x, use_eos_token=use_eos_token))\n\t            self.val_data = None\n\t    # Auxiliary methods\n\t    def generate_prompt(self, data_point, **kwargs):\n\t        return make_prompt(\n\t            data_point[\"instruction\"],\n\t            data_point[\"input\"],\n\t            data_point[\"output\"]\n", "        )\n\t    def generate_and_tokenize_prompt(self, data_point, **kwargs):\n\t        prompt = self.generate_prompt(data_point, **kwargs)\n\t        return self.tokenize(prompt, **kwargs)\n\tdef make_prompt(instruction, input_, output=\"\"):\n\t    return \"{0}\\n\\n{1}\\n{2}\\n\\n{3}\\n{4}\\n\\n{5}\\n{6}\".format(\n\t        \"Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\",\n\t        \"### Instruction:\",\n\t        instruction,\n\t        \"### Input:\",\n", "        input_,\n\t        \"### Response:\",\n\t        output\n\t    )\n\tdef load_data(config, tokenizer):\n\t    if config.data_type == \"alpaca\":\n\t        data = TrainSAD(\n\t            config.dataset,\n\t            config.val_set_size,\n\t            tokenizer,\n", "            config.cutoff_len)\n\t    elif config.data_type == \"gpt4all\":\n\t        data = TrainGPT4All(\n\t            config.dataset,\n\t            config.val_set_size,\n\t            tokenizer,\n\t            config.cutoff_len)\n\t    else:\n\t        raise ValueError(f\"Invalid data name: {config.data_type}\")\n\t    data.prepare_data(use_eos_token=config.use_eos_token)\n", "    return data\n\tDATA_TYPES = [\n\t    \"alpaca\",\n\t    \"gpt4all\",\n\t]\n"]}
{"filename": "falcontune/generate.py", "chunked_list": ["import time\n\timport torch\n\tfrom transformers.utils import logging\n\tfrom falcontune.data import make_prompt\n\tfrom falcontune.model import load_model\n\tfrom falcontune.model.lora import load_adapter\n\tfrom falcontune.model.utils import model_to_half\n\tlogger = logging.get_logger(\"transformers\")\n\tclass AMPWrapper:\n\t    def __init__(self, model, options=None):\n", "        self.model = model\n\t        self.options = options\n\t        if self.options is None:\n\t            self.options = {'enabled': True, 'device_type': 'cuda'}\n\t    def autocast_forward(self, *args, **kwargs):\n\t        with torch.amp.autocast(**self.options):\n\t            return self.model.non_autocast_forward(*args, **kwargs)\n\t    def autocast_generate(self, *args, **kwargs):\n\t        with torch.amp.autocast(**self.options):\n\t            return self.model.non_autocast_generate(*args, **kwargs)\n", "    def apply_forward(self):\n\t        self.model.non_autocast_forward = self.model.forward\n\t        self.model.forward = self.autocast_forward\n\t    def apply_generate(self):\n\t        self.model.non_autocast_generate = self.model.generate\n\t        self.model.generate = self.autocast_generate\n\tdef format_output(raw_output):\n\t    return raw_output.split(\"### Response:\")[1].strip()\n\tdef generate(args):\n\t    model, tokenizer = load_model(\n", "        args.model,\n\t        args.weights,\n\t        backend=args.backend)\n\t    if args.lora_apply_dir is not None:\n\t        model = load_adapter(model, lora_apply_dir=args.lora_apply_dir)\n\t    if getattr(model, 'loaded_in_4bit', False):\n\t        model_to_half(model)\n\t    logger.debug('Apply AMP Wrapper ...')\n\t    wrapper = AMPWrapper(model)\n\t    wrapper.apply_generate()\n", "    if args.prompt and args.instruction:\n\t        raise Exception('Cannot specify both prompt and instruction')\n\t    prompt, instruction, input_ = args.prompt, args.instruction, args.input\n\t    while True:\n\t        prompt = make_prompt(instruction, input_=input_) \\\n\t            if args.instruction else prompt\n\t        input_ids = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\n\t        start_time = time.time()\n\t        with torch.no_grad():\n\t            generated_ids = model.generate(\n", "                inputs=input_ids,\n\t                do_sample=args.do_sample,\n\t                max_new_tokens=args.max_new_tokens,\n\t                top_p=args.top_p,\n\t                top_k=args.top_k,\n\t                temperature=args.temperature,\n\t                use_cache=args.use_cache,\n\t                eos_token_id=tokenizer.eos_token_id,\n\t                bos_token_id=tokenizer.bos_token_id,\n\t                pad_token_id=tokenizer.eos_token_id,\n", "                num_beams=args.num_beams\n\t            )\n\t        end_time = time.time()\n\t        output = tokenizer.decode(generated_ids.cpu().tolist()[0], skip_special_tokens=True)\n\t        if args.instruction:\n\t            output = format_output(output)\n\t        print('\\n\\n\\n')\n\t        print(output)\n\t        print(f'\\nTook {round(end_time - start_time, 3)} s\\n\\n\\n\\n')\n\t        if not args.interactive:\n", "            break\n\t        if args.instruction:\n\t            instruction = input(\"Enter new instruction: \")\n\t        else:\n\t            prompt = input(\"Enter new prompt: \")\n"]}
{"filename": "falcontune/backend/base.py", "chunked_list": ["import math\n\timport numpy as np\n\timport torch\n\timport torch.nn as nn\n\tdef replace_4bit_linear(module, names, bits, groupsize, quantlinear_class, name=''):\n\t    if isinstance(module, quantlinear_class):\n\t        return\n\t    for attr in dir(module):\n\t        tmp = getattr(module, attr)\n\t        name1 = name + '.' + attr if name != '' else attr\n", "        if name1 in names:\n\t            delattr(module, attr)\n\t            setattr(module, attr, quantlinear_class(bits, groupsize, tmp.in_features, tmp.out_features))\n\t    for name1, child in module.named_children():\n\t        replace_4bit_linear(child, names, bits, groupsize, quantlinear_class, name + '.' + name1 if name != '' else name1)\n\tdef find_layers(module, layers=[nn.Linear], name=''):\n\t    if type(module) in layers:\n\t        return {name: module}\n\t    res = {}\n\t    for name1, child in module.named_children():\n", "        res.update(find_layers(child, layers=layers, name=name + '.' + name1 if name != '' else name1))\n\t    return res\n\tclass QuantLinearBase(nn.Module):\n\t    framework = ''\n\t    def __init__(self, bits, groupsize, infeatures, outfeatures):\n\t        super().__init__()\n\t        if bits not in [2, 3, 4, 8]:\n\t            raise NotImplementedError(\"Only 2,3,4,8 bits are supported.\")\n\t        self.infeatures = infeatures\n\t        self.outfeatures = outfeatures\n", "        self.bits = bits\n\t        self.groupsize = groupsize if groupsize != -1 else infeatures\n\t        self.maxq = 2 ** self.bits - 1\n\t        self.register_buffer('qweight', torch.zeros((infeatures // 32 * self.bits, outfeatures), dtype=torch.int32))\n\t        self.register_buffer('qzeros', torch.zeros((math.ceil(infeatures / self.groupsize), outfeatures // 32 * self.bits), dtype=torch.int32))\n\t        self.register_buffer('scales', torch.zeros((math.ceil(infeatures / self.groupsize), outfeatures), dtype=torch.float16))\n\t        self.register_buffer('g_idx', torch.tensor([i // self.groupsize for i in range(infeatures)], dtype=torch.int32))\n\t        self.register_buffer('bias', torch.zeros((outfeatures), dtype=torch.float16))\n\t        # is performed by unpacking the weights and using torch.matmul\n\t        if self.bits in [2, 4, 8]:\n", "            self.wf = torch.tensor(list(range(0, 32, self.bits)), dtype=torch.int32).unsqueeze(0)\n\t        elif self.bits == 3:\n\t            self.wf = torch.tensor([[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 0],\n\t                                    [0, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31],\n\t                                    [0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 0], ],\n\t                                   dtype=torch.int32).reshape(1, 3, 12)\n\t    def pack(self, linear, scales, zeros, g_idx=None):\n\t        self.g_idx = g_idx.clone() if g_idx is not None else self.g_idx\n\t        scales = scales.t().contiguous()\n\t        zeros = zeros.t().contiguous()\n", "        scale_zeros = zeros * scales\n\t        self.scales = scales.clone().half()\n\t        if linear.bias is not None:\n\t            self.bias = linear.bias.clone().half()\n\t        intweight = []\n\t        for idx in range(self.infeatures):\n\t            intweight.append(torch.round(\n\t                (linear.weight.data[:, idx] + scale_zeros[self.g_idx[idx]]) / self.scales[self.g_idx[idx]]).to(\n\t                torch.int)[:, None])\n\t        intweight = torch.cat(intweight, dim=1)\n", "        intweight = intweight.t().contiguous()\n\t        intweight = intweight.numpy().astype(np.uint32)\n\t        qweight = np.zeros(\n\t            (intweight.shape[0] // 32 * self.bits, intweight.shape[1]), dtype=np.uint32\n\t        )\n\t        i = 0\n\t        row = 0\n\t        while row < qweight.shape[0]:\n\t            if self.bits in [2, 4, 8]:\n\t                for j in range(i, i + (32 // self.bits)):\n", "                    qweight[row] |= intweight[j] << (self.bits * (j - i))\n\t                i += 32 // self.bits\n\t                row += 1\n\t            elif self.bits == 3:\n\t                for j in range(i, i + 10):\n\t                    qweight[row] |= intweight[j] << (3 * (j - i))\n\t                i += 10\n\t                qweight[row] |= intweight[i] << 30\n\t                row += 1\n\t                qweight[row] |= (intweight[i] >> 2) & 1\n", "                i += 1\n\t                for j in range(i, i + 10):\n\t                    qweight[row] |= intweight[j] << (3 * (j - i) + 1)\n\t                i += 10\n\t                qweight[row] |= intweight[i] << 31\n\t                row += 1\n\t                qweight[row] |= (intweight[i] >> 1) & 0x3\n\t                i += 1\n\t                for j in range(i, i + 10):\n\t                    qweight[row] |= intweight[j] << (3 * (j - i) + 2)\n", "                i += 10\n\t                row += 1\n\t            else:\n\t                raise NotImplementedError(\"Only 2,3,4,8 bits are supported.\")\n\t        qweight = qweight.astype(np.int32)\n\t        self.qweight = torch.from_numpy(qweight)\n\t        zeros -= 1;\n\t        zeros = zeros.numpy().astype(np.uint32)\n\t        qzeros = np.zeros((zeros.shape[0], zeros.shape[1] // 32 * self.bits), dtype=np.uint32)\n\t        i = 0\n", "        col = 0\n\t        while col < qzeros.shape[1]:\n\t            if self.bits in [2, 4, 8]:\n\t                for j in range(i, i + (32 // self.bits)):\n\t                    qzeros[:, col] |= zeros[:, j] << (self.bits * (j - i))\n\t                i += 32 // self.bits\n\t                col += 1\n\t            elif self.bits == 3:\n\t                for j in range(i, i + 10):\n\t                    qzeros[:, col] |= zeros[:, j] << (3 * (j - i))\n", "                i += 10\n\t                qzeros[:, col] |= zeros[:, i] << 30\n\t                col += 1\n\t                qzeros[:, col] |= (zeros[:, i] >> 2) & 1\n\t                i += 1\n\t                for j in range(i, i + 10):\n\t                    qzeros[:, col] |= zeros[:, j] << (3 * (j - i) + 1)\n\t                i += 10\n\t                qzeros[:, col] |= zeros[:, i] << 31\n\t                col += 1\n", "                qzeros[:, col] |= (zeros[:, i] >> 1) & 0x3\n\t                i += 1\n\t                for j in range(i, i + 10):\n\t                    qzeros[:, col] |= zeros[:, j] << (3 * (j - i) + 2)\n\t                i += 10\n\t                col += 1\n\t            else:\n\t                raise NotImplementedError(\"Only 2,3,4,8 bits are supported.\")\n\t        qzeros = qzeros.astype(np.int32)\n\t        self.qzeros = torch.from_numpy(qzeros)\n", "    def forward(self, x):\n\t        raise NotImplementedError\n"]}
{"filename": "falcontune/backend/__init__.py", "chunked_list": ["BACKENDS = [\n\t    'torch',\n\t    'cuda',\n\t    'triton'\n\t]\n"]}
{"filename": "falcontune/backend/cuda/quantlinear.py", "chunked_list": ["import torch\n\timport quant_cuda\n\tfrom falcontune.backend.base import QuantLinearBase\n\tfrom falcontune.backend.cuda.autograd import AutogradMatmul\n\tclass QuantLinear(QuantLinearBase):\n\t    framework = 'cuda'\n\t    def forward(self, x):\n\t        if torch.is_grad_enabled():\n\t            out = AutogradMatmul.apply(\n\t                x, self.qweight, self.scales,\n", "                self.qzeros, self.g_idx, self.bits, self.maxq)\n\t        else:\n\t            out_shape = x.shape[:-1] + (self.outfeatures,)\n\t            x = x.reshape(-1, x.shape[-1])\n\t            out = torch.zeros((x.shape[0], self.outfeatures), device=x.device, dtype=torch.float32)\n\t            if self.bits == 2:\n\t                quant_cuda.vecquant2matmul(x.float(), self.qweight, out, self.scales.float(), self.qzeros, self.g_idx)\n\t            elif self.bits == 3:\n\t                quant_cuda.vecquant3matmul(x.float(), self.qweight, out, self.scales.float(), self.qzeros, self.g_idx)\n\t            elif self.bits == 4:\n", "                quant_cuda.vecquant4matmul(x.float(), self.qweight, out, self.scales.float(), self.qzeros, self.g_idx)\n\t            elif self.bits == 8:\n\t                quant_cuda.vecquant8matmul(x.float(), self.qweight, out, self.scales.float(), self.qzeros, self.g_idx)\n\t            else:\n\t                raise NotImplemented('bits in [2, 3, 4, 8]')\n\t            out = out.half()\n\t            out = out.reshape(out_shape)\n\t        if self.bias is not None:\n\t            out += self.bias\n\t        return out\n"]}
{"filename": "falcontune/backend/cuda/autograd.py", "chunked_list": ["import torch\n\tfrom torch.cuda.amp import custom_bwd, custom_fwd\n\timport quant_cuda\n\t# Global Buffer\n\tbuffer_mat_dic = {}\n\tcache_buffer = True\n\tdef get_buffer(shape_of_qweight, dtype=torch.float16, device='cuda'):\n\t    if not cache_buffer:\n\t        return torch.zeros((shape_of_qweight[0] * 8, shape_of_qweight[1]), dtype=dtype, device=device)\n\t    if shape_of_qweight not in buffer_mat_dic.keys():\n", "        buffer_mat_dic[shape_of_qweight] = torch.zeros((shape_of_qweight[0] * 8, shape_of_qweight[1]), dtype=dtype, device=device)\n\t    else:\n\t        if buffer_mat_dic[shape_of_qweight].device != device:\n\t            buffer_mat_dic[shape_of_qweight] = buffer_mat_dic[shape_of_qweight].to(device)\n\t        if buffer_mat_dic[shape_of_qweight].dtype != dtype:\n\t            buffer_mat_dic[shape_of_qweight] = buffer_mat_dic[shape_of_qweight].to(dtype=dtype)\n\t    return buffer_mat_dic[shape_of_qweight]\n\tdef matmul4bit_recons(x, qweight, scales, zeros, g_idx, transpose=False):\n\t    buffer = get_buffer(qweight.shape, dtype=scales.dtype, device=qweight.device)\n\t    quant_cuda.vecquant4recons(qweight, buffer, scales, zeros, g_idx)\n", "    output = torch.matmul(x, buffer) if not transpose else torch.matmul(x, buffer.T)\n\t    return output\n\tclass AutogradMatmul(torch.autograd.Function):\n\t    @staticmethod\n\t    @custom_fwd(cast_inputs=torch.float16)\n\t    def forward(ctx, x, qweight, scales, zeros, g_idx, bits, maxq):\n\t        if bits not in [4]:\n\t            raise NotImplemented('bits in [4]')\n\t        ctx.save_for_backward(qweight, scales, zeros, g_idx, bits)\n\t        output = matmul4bit_recons(x, qweight, scales, zeros, g_idx)\n", "        output = output.clone()\n\t        return output\n\t    @staticmethod\n\t    @custom_bwd\n\t    def backward(ctx, grad_output):\n\t        qweight, scales, zeros, g_idx, bits = ctx.saved_tensors\n\t        grad_input = None\n\t        if ctx.needs_input_grad[0]:\n\t            grad_input = matmul4bit_recons(grad_output, qweight, scales, zeros, g_idx, transpose=True)\n\t        return grad_input, None, None, None, None, None, None\n"]}
{"filename": "falcontune/backend/cuda/__init__.py", "chunked_list": []}
{"filename": "falcontune/backend/triton/custom_autotune.py", "chunked_list": ["# https://github.com/fpgaminer/GPTQ-triton\n\t\"\"\"\n\tMostly the same as the autotuner in Triton, but with a few changes like using 40 runs instead of 100.\n\t\"\"\"\n\timport builtins\n\timport math\n\timport time\n\tfrom packaging import version\n\tfrom typing import Dict\n\timport triton\n", "class Autotuner(triton.KernelInterface):\n\t    def __init__(self, fn, arg_names, configs, key, reset_to_zero, prune_configs_by: Dict = None,\n\t                 nearest_power_of_two: bool = False):\n\t        '''\n\t        :param prune_configs_by: a dict of functions that are used to prune configs, fields:\n\t            'perf_model': performance model used to predicate running time with different configs, returns running time\n\t            'top_k': number of configs to bench\n\t            'prune_num_stages_by'(optional): a function used to prune num_stages. It take configs:List[Config] as its input, and returns pruned configs.\n\t            'nearest_power_of_two'(optional): whether to round key arguments to the nearest power of two when caching tuning results\n\t        '''\n", "        if not configs:\n\t            self.configs = [triton.Config({}, num_warps=4, num_stages=2)]\n\t        else:\n\t            self.configs = configs\n\t        self.key_idx = [arg_names.index(k) for k in key]\n\t        self.nearest_power_of_two = nearest_power_of_two\n\t        self.cache = {}\n\t        # hook to reset all required tensor to zeros before relaunching a kernel\n\t        self.hook = lambda args: 0\n\t        if reset_to_zero is not None:\n", "            self.reset_idx = [arg_names.index(k) for k in reset_to_zero]\n\t            def _hook(args):\n\t                for i in self.reset_idx:\n\t                    args[i].zero_()\n\t            self.hook = _hook\n\t        self.arg_names = arg_names\n\t        # prune configs\n\t        if prune_configs_by:\n\t            perf_model, top_k = prune_configs_by['perf_model'], prune_configs_by['top_k']\n\t            if 'early_config_prune' in prune_configs_by:\n", "                early_config_prune = prune_configs_by['early_config_prune']\n\t        else:\n\t            perf_model, top_k, early_config_prune = None, None, None\n\t        self.perf_model, self.configs_top_k = perf_model, top_k\n\t        self.early_config_prune = early_config_prune\n\t        self.fn = fn\n\t    def _bench(self, *args, config, **meta):\n\t        # check for conflicts, i.e. meta-parameters both provided\n\t        # as kwargs and by the autotuner\n\t        conflicts = meta.keys() & config.kwargs.keys()\n", "        if conflicts:\n\t            raise ValueError(\n\t                f\"Conflicting meta-parameters: {', '.join(conflicts)}.\"\n\t                \" Make sure that you don't re-define auto-tuned symbols.\"\n\t            )\n\t        # augment meta-parameters with tunable ones\n\t        current = dict(meta, **config.kwargs)\n\t        def kernel_call():\n\t            if config.pre_hook:\n\t                config.pre_hook(self.nargs)\n", "            self.hook(args)\n\t            self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **current)\n\t        try:\n\t            # In testings using only 40 reps seems to be close enough and it appears to be what PyTorch uses\n\t            # PyTorch also sets fast_flush to True, but I didn't see any speedup so I'll leave the default\n\t            if version.parse(triton.__version__) > version.parse(\"2.0.0.post1\"):\n\t                bench_kwargs = {\"quantiles\": None}\n\t            else:\n\t                bench_kwargs = {\"percentiles\": None}\n\t            return triton.testing.do_bench(kernel_call, rep=40, **bench_kwargs)\n", "        except triton.compiler.OutOfResources:\n\t            return float('inf')\n\t    def run(self, *args, **kwargs):\n\t        self.nargs = dict(zip(self.arg_names, args))\n\t        if len(self.configs) > 1:\n\t            key = tuple(args[i] for i in self.key_idx)\n\t            # This reduces the amount of autotuning by rounding the keys to the nearest power of two\n\t            # In my testing this gives decent results, and greatly reduces the amount of tuning required\n\t            if self.nearest_power_of_two:\n\t                key = tuple([2 ** int(math.log2(x) + 0.5) for x in key])\n", "            if key not in self.cache:\n\t                # prune configs\n\t                pruned_configs = self.prune_configs(kwargs)\n\t                bench_start = time.time()\n\t                timings = {config: self._bench(*args, config=config, **kwargs)\n\t                           for config in pruned_configs}\n\t                bench_end = time.time()\n\t                self.bench_time = bench_end - bench_start\n\t                self.cache[key] = builtins.min(timings, key=timings.get)\n\t                self.hook(args)\n", "                self.configs_timings = timings\n\t            config = self.cache[key]\n\t        else:\n\t            config = self.configs[0]\n\t        self.best_config = config\n\t        if config.pre_hook is not None:\n\t            config.pre_hook(self.nargs)\n\t        return self.fn.run(*args, num_warps=config.num_warps, num_stages=config.num_stages, **kwargs, **config.kwargs)\n\t    def prune_configs(self, kwargs):\n\t        pruned_configs = self.configs\n", "        if self.early_config_prune:\n\t            pruned_configs = self.early_config_prune(self.configs, self.nargs)\n\t        if self.perf_model:\n\t            top_k = self.configs_top_k\n\t            if isinstance(top_k, float) and top_k <= 1.0:\n\t                top_k = int(len(self.configs) * top_k)\n\t            if len(pruned_configs) > top_k:\n\t                est_timing = {\n\t                    config: self.perf_model(**self.nargs, **kwargs, **config.kwargs, num_stages=config.num_stages,\n\t                                            num_warps=config.num_warps)\n", "                    for config in pruned_configs\n\t                }\n\t                pruned_configs = sorted(est_timing.keys(), key=lambda x: est_timing[x])[:top_k]\n\t        return pruned_configs\n\t    def warmup(self, *args, **kwargs):\n\t        self.nargs = dict(zip(self.arg_names, args))\n\t        for config in self.prune_configs(kwargs):\n\t            self.fn.warmup(\n\t                *args,\n\t                num_warps=config.num_warps,\n", "                num_stages=config.num_stages,\n\t                **kwargs,\n\t                **config.kwargs,\n\t            )\n\t        self.nargs = None\n\tdef autotune(configs, key, prune_configs_by=None, reset_to_zero=None, nearest_power_of_two=False):\n\t    \"\"\"\n\t    Decorator for auto-tuning a :code:`triton.jit`'d function.\n\t    .. highlight:: python\n\t    .. code-block:: python\n", "        @triton.autotune(configs=[\n\t            triton.Config(meta={'BLOCK_SIZE': 128}, num_warps=4),\n\t            triton.Config(meta={'BLOCK_SIZE': 1024}, num_warps=8),\n\t            ],\n\t            key=['x_size'] # the two above configs will be evaluated anytime\n\t                            # the value of x_size changes\n\t        )\n\t        @triton.jit\n\t        def kernel(x_ptr, x_size, **META):\n\t            BLOCK_SIZE = META['BLOCK_SIZE']\n", "    :note: When all the configurations are evaluated, the kernel will run multiple time.\n\t            This means that whatever value the kernel updates will be updated multiple times.\n\t            To avoid this undesired behavior, you can use the `reset_to_zero` argument, which\n\t            reset the value of the provided tensor to `zero` before running any configuration.\n\t    :param configs: a list of :code:`triton.Config` objects\n\t    :type configs: list[triton.Config]\n\t    :param key: a list of argument names whose change in value will trigger the evaluation of all provided configs.\n\t    :type key: list[str]\n\t    :param prune_configs_by: a dict of functions that are used to prune configs, fields:\n\t        'perf_model': performance model used to predicate running time with different configs, returns running time\n", "        'top_k': number of configs to bench\n\t        'early_config_prune'(optional): a function used to do early prune (eg, num_stages). It take configs:List[Config] as its input, and returns pruned configs.\n\t    :param reset_to_zero: a list of argument names whose value will be reset to zero before evaluating any configs.\n\t    :type reset_to_zero: list[str]\n\t    \"\"\"\n\t    def decorator(fn):\n\t        return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, prune_configs_by, nearest_power_of_two)\n\t    return decorator\n"]}
{"filename": "falcontune/backend/triton/quantlinear.py", "chunked_list": ["import torch\n\tfrom falcontune.backend.base import QuantLinearBase\n\timport falcontune.backend.triton.triton_utils as tu\n\tfrom falcontune.backend.triton.autograd import AutogradMatmul\n\tclass QuantLinear(QuantLinearBase):\n\t    framework = 'triton'\n\t    def forward(self, x):\n\t        if torch.is_grad_enabled():\n\t            out = AutogradMatmul.apply(\n\t                x, self.qweight, self.scales,\n", "                self.qzeros, self.g_idx, self.bits, self.maxq)\n\t        else:\n\t            assert self.qzeros.dtype == torch.int32\n\t            out = tu.triton_matmul(x, self.qweight, self.scales, self.qzeros, self.g_idx, self.bits, self.maxq)\n\t        if self.bias is not None:\n\t            out += self.bias\n\t        return out\n"]}
{"filename": "falcontune/backend/triton/triton_utils.py", "chunked_list": ["import torch\n\timport triton\n\timport triton.language as tl\n\tfrom falcontune.backend.triton import custom_autotune\n\t# code based https://github.com/fpgaminer/GPTQ-triton\n\t@custom_autotune.autotune(\n\t    configs=[\n\t        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n", "                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        # These provided a benefit on a 3090\n", "        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n", "        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 32, 'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 128, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t    ],\n\t    key=['M', 'N'],\n\t    nearest_power_of_two=True,\n\t)\n\t@triton.jit\n\tdef matmul_248_kernel(a_ptr, b_ptr, c_ptr,\n", "                      scales_ptr, zeros_ptr, g_ptr,\n\t                      M, N, K, bits, maxq,\n\t                      stride_am, stride_ak,\n\t                      stride_bk, stride_bn,\n\t                      stride_cm, stride_cn,\n\t                      stride_scales, stride_zeros,\n\t                      BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n\t                      GROUP_SIZE_M: tl.constexpr):\n\t    \"\"\"\n\t    Compute the matrix multiplication C = A x B.\n", "    A is of shape (M, K) float16\n\t    B is of shape (K//8, N) int32\n\t    C is of shape (M, N) float16\n\t    scales is of shape (G, N) float16\n\t    zeros is of shape (G, N) float16\n\t    g_ptr is of shape (K) int32\n\t    \"\"\"\n\t    infearure_per_bits = 32 // bits\n\t    pid = tl.program_id(axis=0)\n\t    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n", "    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n\t    num_pid_k = tl.cdiv(K, BLOCK_SIZE_K)\n\t    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n\t    group_id = pid // num_pid_in_group\n\t    first_pid_m = group_id * GROUP_SIZE_M\n\t    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n\t    pid_m = first_pid_m + (pid % group_size_m)\n\t    pid_n = (pid % num_pid_in_group) // group_size_m\n\t    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n\t    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n", "    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\t    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)  # (BLOCK_SIZE_M, BLOCK_SIZE_K)\n\t    a_mask = (offs_am[:, None] < M)\n\t    # b_ptrs is set up such that it repeats elements along the K axis 8 times\n\t    b_ptrs = b_ptr + ((offs_k[:, None] // infearure_per_bits) * stride_bk + offs_bn[None,\n\t                                                                            :] * stride_bn)  # (BLOCK_SIZE_K, BLOCK_SIZE_N)\n\t    g_ptrs = g_ptr + offs_k\n\t    # shifter is used to extract the N bits of each element in the 32-bit word from B\n\t    scales_ptrs = scales_ptr + offs_bn[None, :]\n\t    zeros_ptrs = zeros_ptr + (offs_bn[None, :] // infearure_per_bits)\n", "    shifter = (offs_k % infearure_per_bits) * bits\n\t    zeros_shifter = (offs_bn % infearure_per_bits) * bits\n\t    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\t    for k in range(0, num_pid_k):\n\t        g_idx = tl.load(g_ptrs)\n\t        # Fetch scales and zeros; these are per-outfeature and thus reused in the inner loop\n\t        scales = tl.load(scales_ptrs + g_idx[:, None] * stride_scales)  # (BLOCK_SIZE_K, BLOCK_SIZE_N,)\n\t        zeros = tl.load(zeros_ptrs + g_idx[:, None] * stride_zeros)  # (BLOCK_SIZE_K, BLOCK_SIZE_N,)\n\t        zeros = (zeros >> zeros_shifter[None, :]) & maxq\n\t        zeros = (zeros + 1)\n", "        a = tl.load(a_ptrs, mask=a_mask, other=0.0)  # (BLOCK_SIZE_M, BLOCK_SIZE_K)\n\t        b = tl.load(b_ptrs)  # (BLOCK_SIZE_K, BLOCK_SIZE_N), but repeated\n\t        # Now we need to unpack b (which is N-bit values) into 32-bit values\n\t        b = (b >> shifter[:, None]) & maxq  # Extract the N-bit values\n\t        b = (b - zeros) * scales  # Scale and shift\n\t        # ! Convert to fp16\n\t        b = b.to(tl.float16)\n\t        a = a.to(tl.float16)\n\t        accumulator += tl.dot(a, b)\n\t        a_ptrs += BLOCK_SIZE_K\n", "        b_ptrs += (BLOCK_SIZE_K // infearure_per_bits) * stride_bk\n\t        g_ptrs += BLOCK_SIZE_K\n\t    c = accumulator.to(tl.float16)\n\t    c_ptrs = c_ptr + stride_cm * offs_am[:, None] + stride_cn * offs_bn[None, :]\n\t    c_mask = (offs_am[:, None] < M) & (offs_bn[None, :] < N)\n\t    tl.store(c_ptrs, c, mask=c_mask)\n\t# code based https://github.com/fpgaminer/GPTQ-triton\n\t@custom_autotune.autotune(\n\t    configs=[\n\t        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n", "                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 256, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_K': 128, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 128, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_K': 32, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n", "                      num_warps=4),\n\t        # These provided a benefit on a 3090\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 32, 'BLOCK_SIZE_N': 32, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n", "        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_K': 32, 'BLOCK_SIZE_N': 64, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t        triton.Config({'BLOCK_SIZE_M': 32, 'BLOCK_SIZE_K': 64, 'BLOCK_SIZE_N': 128, 'GROUP_SIZE_M': 8}, num_stages=4,\n\t                      num_warps=4),\n\t    ],\n\t    key=['M', 'K'],\n\t    nearest_power_of_two=True,\n\t)\n", "@triton.jit\n\tdef trans_matmul_248_kernel(a_ptr, b_ptr, c_ptr,\n\t                            scales_ptr, zeros_ptr, g_ptr,\n\t                            M, N, K, bits, maxq,\n\t                            stride_am, stride_ak,\n\t                            stride_bk, stride_bn,\n\t                            stride_cm, stride_cn,\n\t                            stride_scales, stride_zeros,\n\t                            BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,\n\t                            GROUP_SIZE_M: tl.constexpr):\n", "    \"\"\"\n\t    Compute the matrix multiplication C = A x B.\n\t    A is of shape (M, N) float16\n\t    B is of shape (K//8, N) int32\n\t    C is of shape (M, K) float16\n\t    scales is of shape (G, N) float16\n\t    zeros is of shape (G, N) float16\n\t    g_ptr is of shape (K) int32\n\t    \"\"\"\n\t    infearure_per_bits = 32 // bits\n", "    pid = tl.program_id(axis=0)\n\t    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n\t    num_pid_k = tl.cdiv(K, BLOCK_SIZE_K)\n\t    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n\t    num_pid_in_group = GROUP_SIZE_M * num_pid_k\n\t    group_id = pid // num_pid_in_group\n\t    first_pid_m = group_id * GROUP_SIZE_M\n\t    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n\t    pid_m = first_pid_m + (pid % group_size_m)\n\t    pid_k = (pid % num_pid_in_group) // group_size_m\n", "    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n\t    offs_bk = pid_k * BLOCK_SIZE_K + tl.arange(0, BLOCK_SIZE_K)\n\t    offs_n = tl.arange(0, BLOCK_SIZE_N)\n\t    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_n[None, :] * stride_ak)  # (BLOCK_SIZE_M, BLOCK_SIZE_N)\n\t    a_mask = (offs_am[:, None] < M)\n\t    # b_ptrs is set up such that it repeats elements along the K axis 8 times\n\t    b_ptrs = b_ptr + ((offs_bk[:, None] // infearure_per_bits) * stride_bk + offs_n[None,\n\t                                                                             :] * stride_bn)  # (BLOCK_SIZE_K, BLOCK_SIZE_N)\n\t    g_ptrs = g_ptr + offs_bk\n\t    g_idx = tl.load(g_ptrs)\n", "    # shifter is used to extract the N bits of each element in the 32-bit word from B\n\t    scales_ptrs = scales_ptr + offs_n[None, :] + g_idx[:, None] * stride_scales\n\t    zeros_ptrs = zeros_ptr + (offs_n[None, :] // infearure_per_bits) + g_idx[:, None] * stride_zeros\n\t    shifter = (offs_bk % infearure_per_bits) * bits\n\t    zeros_shifter = (offs_n % infearure_per_bits) * bits\n\t    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_K), dtype=tl.float32)\n\t    for k in range(0, num_pid_n):\n\t        # Fetch scales and zeros; these are per-outfeature and thus reused in the inner loop\n\t        scales = tl.load(scales_ptrs)  # (BLOCK_SIZE_K, BLOCK_SIZE_N,)\n\t        zeros = tl.load(zeros_ptrs)  # (BLOCK_SIZE_K, BLOCK_SIZE_N,)\n", "        zeros = (zeros >> zeros_shifter[None, :]) & maxq\n\t        zeros = (zeros + 1)\n\t        a = tl.load(a_ptrs, mask=a_mask, other=0.)  # (BLOCK_SIZE_M, BLOCK_SIZE_N)\n\t        b = tl.load(b_ptrs)  # (BLOCK_SIZE_K, BLOCK_SIZE_N), but repeated\n\t        # Now we need to unpack b (which is N-bit values) into 32-bit values\n\t        b = (b >> shifter[:, None]) & maxq  # Extract the N-bit values\n\t        b = (b - zeros) * scales  # Scale and shift\n\t        b = tl.trans(b)\n\t        # ! Convert to fp16\n\t        b = b.to(tl.float16)\n", "        a = a.to(tl.float16)\n\t        accumulator += tl.dot(a, b)\n\t        a_ptrs += BLOCK_SIZE_N\n\t        b_ptrs += BLOCK_SIZE_N\n\t        scales_ptrs += BLOCK_SIZE_N\n\t        zeros_ptrs += (BLOCK_SIZE_N // infearure_per_bits)\n\t    c = accumulator.to(tl.float16)\n\t    c_ptrs = c_ptr + stride_cm * offs_am[:, None] + stride_cn * offs_bk[None, :]\n\t    c_mask = (offs_am[:, None] < M) & (offs_bk[None, :] < K)\n\t    tl.store(c_ptrs, c, mask=c_mask)\n", "def triton_matmul(input, qweight, scales, qzeros, g_idx, bits, maxq):\n\t    assert input.shape[-1] == qweight.shape[0] * 32 // bits\n\t    outshape = input.shape[:-1] + (qweight.shape[1],)\n\t    input = input.reshape(-1, input.shape[-1])\n\t    output = torch.empty((input.shape[0], qweight.shape[1]), device=scales.device, dtype=torch.float16)\n\t    grid = lambda META: (\n\t    triton.cdiv(input.shape[0], META['BLOCK_SIZE_M']) * triton.cdiv(qweight.shape[1], META['BLOCK_SIZE_N']),)\n\t    matmul_248_kernel[grid](input, qweight, output,\n\t                            scales, qzeros, g_idx,\n\t                            input.shape[0], qweight.shape[1], input.shape[1], bits, maxq,\n", "                            input.stride(0), input.stride(1),\n\t                            qweight.stride(0), qweight.stride(1),\n\t                            output.stride(0), output.stride(1),\n\t                            scales.stride(0), qzeros.stride(0))\n\t    output = output.reshape(outshape)\n\t    return output\n\tdef triton_matmul_transpose(input, qweight, scales, qzeros, g_idx, bits, maxq):\n\t    assert input.shape[-1] == qweight.shape[1]\n\t    out_dim = qweight.shape[0] * 32 // bits\n\t    outshape = input.shape[:-1] + (out_dim,)\n", "    input = input.reshape(-1, input.shape[-1])\n\t    output_shape_mid = (input.shape[0], out_dim)\n\t    output = torch.empty((output_shape_mid[0], output_shape_mid[1]), device=scales.device, dtype=torch.float16)\n\t    grid = lambda META: (\n\t    triton.cdiv(input.shape[0], META['BLOCK_SIZE_M']) * triton.cdiv(output_shape_mid[1], META['BLOCK_SIZE_K']),)\n\t    trans_matmul_248_kernel[grid](input, qweight, output,\n\t                                  scales, qzeros, g_idx,\n\t                                  input.shape[0], qweight.shape[1], output_shape_mid[1], bits, maxq,\n\t                                  input.stride(0), input.stride(1),\n\t                                  qweight.stride(0), qweight.stride(1),\n", "                                  output.stride(0), output.stride(1),\n\t                                  scales.stride(0), qzeros.stride(0))\n\t    output = output.reshape(outshape)\n\t    return output\n"]}
{"filename": "falcontune/backend/triton/autograd.py", "chunked_list": ["import torch\n\tfrom torch.cuda.amp import custom_bwd, custom_fwd\n\timport falcontune.backend.triton.triton_utils as tu\n\tclass AutogradMatmul(torch.autograd.Function):\n\t    @staticmethod\n\t    @custom_fwd(cast_inputs=torch.float16)\n\t    def forward(ctx, x, qweight, scales, qzeros, g_idx, bits, maxq):\n\t        output = tu.triton_matmul(x, qweight, scales, qzeros, g_idx, bits, maxq)\n\t        ctx.save_for_backward(qweight, scales, qzeros, g_idx)\n\t        ctx.bits, ctx.maxq = bits, maxq\n", "        output = output.clone()\n\t        return output\n\t    @staticmethod\n\t    @custom_bwd\n\t    def backward(ctx, grad_output):\n\t        qweight, scales, qzeros, g_idx = ctx.saved_tensors\n\t        bits, maxq = ctx.bits, ctx.maxq\n\t        grad_input = None\n\t        if ctx.needs_input_grad[0]:\n\t            grad_input = tu.triton_matmul_transpose(grad_output, qweight, scales, qzeros, g_idx, bits, maxq)\n", "        return grad_input, None, None, None, None, None, None\n"]}
{"filename": "falcontune/backend/triton/__init__.py", "chunked_list": []}
{"filename": "falcontune/backend/triton/flash_attn_triton.py", "chunked_list": ["\"\"\"\n\t*Experimental* implementation of FlashAttention in Triton.\n\tTested with triton==2.0.0.dev20221202.\n\tTriton 2.0 has a new backend (MLIR) but seems like it doesn't yet work for head dimensions\n\tother than 64:\n\thttps://github.com/openai/triton/blob/d376020f90002757eea3ea9475d4f7cfc2ec5ead/python/triton/ops/flash_attention.py#L207\n\tWe'll update this implementation with the new Triton backend once this is fixed.\n\tWe use the FlashAttention implementation from Phil Tillet a starting point.\n\thttps://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.py\n\tChanges:\n", "- Implement both causal and non-causal attention.\n\t- Implement both self-attention and cross-attention.\n\t- Support arbitrary seqlens (not just multiples of 128), for both forward and backward.\n\t- Support all head dimensions up to 128 (not just 16, 32, 64, 128), for both forward and backward.\n\t- Support attention bias.\n\t- Speed up the forward pass a bit, and only store the LSE instead of m and l.\n\t- Make the backward for d=128 much faster by reducing register spilling.\n\t- Optionally parallelize the backward pass across seqlen_k, to deal with the case of\n\tsmall batch size * nheads.\n\tCaution:\n", "- This is an *experimental* implementation. The forward pass should be quite robust but\n\tI'm not 100% sure that the backward pass doesn't have race conditions (due to the Triton compiler).\n\t- This implementation has only been tested on A100.\n\t- If you plan to use headdim other than 64 and 128, you should test for race conditions\n\t(due to the Triton compiler), as done in tests/test_flash_attn.py\n\t\"test_flash_attn_triton_race_condition\". I've tested and fixed many race conditions\n\tfor different head dimensions (40, 48, 64, 128, 80, 88, 96), but I'm still not 100% confident\n\tthat there are none left for other head dimensions.\n\tDifferences between this Triton version and the CUDA version:\n\t- Triton version doesn't support dropout.\n", "- Triton forward is generally faster than CUDA forward, while Triton backward is\n\tgenerally slower than CUDA backward. Overall Triton forward + backward is slightly slower\n\tthan CUDA forward + backward.\n\t- Triton version doesn't support different sequence lengths in a batch (i.e., RaggedTensor/NestedTensor).\n\t- Triton version supports attention bias, while CUDA version doesn't.\n\t\"\"\"\n\timport math\n\timport torch\n\timport triton\n\timport triton.language as tl\n", "# Disabling autotune for now, set num_warps=4 if headdim=64 and num_warps=8 if headdim=128\n\t# @triton.autotune(\n\t#     configs=[\n\t#         triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 128}, num_warps=4, num_stages=1),\n\t#         # This config has a race condition when EVEN_M == False, disabling it for now.\n\t#         # triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 64}, num_warps=4, num_stages=1),\n\t#     ],\n\t#     key=['CACHE_KEY_SEQLEN_Q', 'CACHE_KEY_SEQLEN_K', 'BIAS_TYPE', 'IS_CAUSAL', 'BLOCK_HEADDIM']\n\t# )\n\t@triton.heuristics(\n", "    {\n\t        \"EVEN_M\": lambda args: args[\"seqlen_q\"] % args[\"BLOCK_M\"] == 0,\n\t        \"EVEN_N\": lambda args: args[\"seqlen_k\"] % args[\"BLOCK_N\"] == 0,\n\t        \"EVEN_HEADDIM\": lambda args: args[\"headdim\"] == args[\"BLOCK_HEADDIM\"],\n\t    }\n\t)\n\t@triton.jit\n\tdef _fwd_kernel(\n\t    Q, K, V, Bias, Out,\n\t    Lse, TMP,  # NOTE: TMP is a scratchpad buffer to workaround a compiler bug\n", "    softmax_scale,\n\t    stride_qb, stride_qh, stride_qm,\n\t    stride_kb, stride_kh, stride_kn,\n\t    stride_vb, stride_vh, stride_vn,\n\t    stride_bb, stride_bh, stride_bm,\n\t    stride_ob, stride_oh, stride_om,\n\t    nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim,\n\t    CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K,\n\t    BIAS_TYPE: tl.constexpr,\n\t    IS_CAUSAL: tl.constexpr,\n", "    BLOCK_HEADDIM: tl.constexpr,\n\t    EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr,\n\t    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr,\n\t):\n\t    start_m = tl.program_id(0)\n\t    off_hb = tl.program_id(1)\n\t    off_b = off_hb // nheads\n\t    off_h = off_hb % nheads\n\t    # off_b = tl.program_id(1)\n\t    # off_h = tl.program_id(2)\n", "    # off_hb = off_b * nheads + off_h\n\t    # initialize offsets\n\t    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n\t    offs_n = tl.arange(0, BLOCK_N)\n\t    offs_d = tl.arange(0, BLOCK_HEADDIM)\n\t    # Initialize pointers to Q, K, V\n\t    # Adding parenthesis around indexing might use int32 math instead of int64 math?\n\t    # https://github.com/openai/triton/issues/741\n\t    # I'm seeing a tiny bit of difference (5-7us)\n\t    q_ptrs = Q + off_b * stride_qb + off_h * stride_qh + (offs_m[:, None] * stride_qm + offs_d[None, :])\n", "    k_ptrs = K + off_b * stride_kb + off_h * stride_kh + (offs_n[:, None] * stride_kn + offs_d[None, :])\n\t    v_ptrs = V + off_b * stride_vb + off_h * stride_vh + (offs_n[:, None] * stride_vn + offs_d[None, :])\n\t    if BIAS_TYPE == 'vector':\n\t        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + offs_n\n\t    elif BIAS_TYPE == 'matrix':\n\t        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + (offs_m[:, None] * stride_bm + offs_n[None, :])\n\t    # initialize pointer to m and l\n\t    t_ptrs = TMP + off_hb * seqlen_q_rounded + offs_m\n\t    lse_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n\t    m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float(\"inf\")\n", "    acc_o = tl.zeros([BLOCK_M, BLOCK_HEADDIM], dtype=tl.float32)\n\t    # load q: it will stay in SRAM throughout\n\t    # [2022-10-30] TD: Triton bug - in the case of EVEN_M=True and EVEN_N=False, if we just call\n\t    # tl.load(q_ptrs), we get the wrong output!\n\t    if EVEN_M & EVEN_N:\n\t        if EVEN_HEADDIM:\n\t            q = tl.load(q_ptrs)\n\t        else:\n\t            q = tl.load(q_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n\t    else:\n", "        if EVEN_HEADDIM:\n\t            q = tl.load(q_ptrs, mask=offs_m[:, None] < seqlen_q, other=0.0)\n\t        else:\n\t            q = tl.load(q_ptrs, mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim),\n\t                        other=0.0)\n\t    # loop over k, v and update accumulator\n\t    end_n = seqlen_k if not IS_CAUSAL else tl.minimum((start_m + 1) * BLOCK_M, seqlen_k)\n\t    for start_n in range(0, end_n, BLOCK_N):\n\t        start_n = tl.multiple_of(start_n, BLOCK_N)\n\t        # -- compute qk ----\n", "        if EVEN_N & EVEN_M:  # If we just do \"if EVEN_N\", there seems to be some race condition\n\t            if EVEN_HEADDIM:\n\t                k = tl.load(k_ptrs + start_n * stride_kn)\n\t            else:\n\t                k = tl.load(k_ptrs + start_n * stride_kn, mask=offs_d[None, :] < headdim, other=0.0)\n\t        else:\n\t            if EVEN_HEADDIM:\n\t                k = tl.load(k_ptrs + start_n * stride_kn, mask=(start_n + offs_n)[:, None] < seqlen_k,\n\t                            other=0.0)\n\t            else:\n", "                k = tl.load(k_ptrs + start_n * stride_kn,\n\t                            mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim),\n\t                            other=0.0)\n\t        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n\t        qk += tl.dot(q, k, trans_b=True)\n\t        # Trying to combine the two masks seem to make the result wrong\n\t        if not EVEN_N:  # Need to mask out otherwise the softmax is wrong\n\t            qk += tl.where((start_n + offs_n)[None, :] < seqlen_k, 0, float(\"-inf\"))\n\t        if IS_CAUSAL:\n\t            qk += tl.where(offs_m[:, None] >= (start_n + offs_n)[None, :], 0, float(\"-inf\"))\n", "        if BIAS_TYPE != 'none':\n\t            if BIAS_TYPE == 'vector':\n\t                if EVEN_N:\n\t                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n\t                else:\n\t                    bias = tl.load(b_ptrs + start_n, mask=(start_n + offs_n) < seqlen_k, other=0.0).to(tl.float32)\n\t                bias = bias[None, :]\n\t            elif BIAS_TYPE == 'matrix':\n\t                if EVEN_M & EVEN_N:\n\t                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n", "                else:\n\t                    bias = tl.load(b_ptrs + start_n,\n\t                                   mask=(offs_m[:, None] < seqlen_q)\n\t                                        & ((start_n + offs_n)[None, :] < seqlen_k),\n\t                                   other=0.0).to(tl.float32)\n\t            # Slightly faster to multiply the softmax_scale in the tl.exp below since the compiler\n\t            # can then fuse the mult and add into an fma instruction. But if we have bias we need to\n\t            # to multiply with softmax_scale here.\n\t            qk = qk * softmax_scale + bias\n\t            m_ij = tl.maximum(tl.max(qk, 1), lse_i)\n", "            p = tl.exp(qk - m_ij[:, None])\n\t        else:\n\t            m_ij = tl.maximum(tl.max(qk, 1) * softmax_scale, lse_i)\n\t            p = tl.exp(qk * softmax_scale - m_ij[:, None])\n\t        l_ij = tl.sum(p, 1)\n\t        # scale acc_o\n\t        acc_o_scale = tl.exp(m_i - m_ij)\n\t        # # -- update output accumulator --\n\t        # BUG: have to store and immediately load\n\t        tl.store(t_ptrs, acc_o_scale)\n", "        acc_o_scale = tl.load(t_ptrs)\n\t        acc_o = acc_o * acc_o_scale[:, None]\n\t        # update acc_o\n\t        if EVEN_N & EVEN_M:  # If we just do \"if EVEN_N\", there seems to be some race condition\n\t            if EVEN_HEADDIM:\n\t                v = tl.load(v_ptrs + start_n * stride_vn)\n\t            else:\n\t                v = tl.load(v_ptrs + start_n * stride_vn, mask=offs_d[None, :] < headdim, other=0.0)\n\t        else:\n\t            if EVEN_HEADDIM:\n", "                v = tl.load(v_ptrs + start_n * stride_vn, mask=(start_n + offs_n)[:, None] < seqlen_k,\n\t                            other=0.0)\n\t            else:\n\t                v = tl.load(v_ptrs + start_n * stride_vn,\n\t                            mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim),\n\t                            other=0.0)\n\t        p = p.to(v.dtype)\n\t        acc_o += tl.dot(p, v)\n\t        # -- update statistics\n\t        m_i = m_ij\n", "        l_i_new = tl.exp(lse_i - m_ij) + l_ij\n\t        lse_i = m_ij + tl.log(l_i_new)\n\t    o_scale = tl.exp(m_i - lse_i)\n\t    # BUG: have to store and immediately load\n\t    tl.store(t_ptrs, o_scale)\n\t    o_scale = tl.load(t_ptrs)\n\t    acc_o = acc_o * o_scale[:, None]\n\t    # rematerialize offsets to save registers\n\t    start_m = tl.program_id(0)\n\t    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n", "    # write back l and m\n\t    lse_ptrs = Lse + off_hb * seqlen_q_rounded + offs_m\n\t    tl.store(lse_ptrs, lse_i)\n\t    # initialize pointers to output\n\t    offs_d = tl.arange(0, BLOCK_HEADDIM)\n\t    out_ptrs = Out + off_b * stride_ob + off_h * stride_oh + (offs_m[:, None] * stride_om + offs_d[None, :])\n\t    if EVEN_M:\n\t        if EVEN_HEADDIM:\n\t            tl.store(out_ptrs, acc_o)\n\t        else:\n", "            tl.store(out_ptrs, acc_o, mask=offs_d[None, :] < headdim)\n\t    else:\n\t        if EVEN_HEADDIM:\n\t            tl.store(out_ptrs, acc_o, mask=offs_m[:, None] < seqlen_q)\n\t        else:\n\t            tl.store(out_ptrs, acc_o,\n\t                     mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n\t@triton.jit\n\tdef _bwd_preprocess_do_o_dot(\n\t    Out, DO, Delta,\n", "    stride_ob, stride_oh, stride_om,\n\t    stride_dob, stride_doh, stride_dom,\n\t    nheads, seqlen_q, seqlen_q_rounded, headdim,\n\t    BLOCK_M: tl.constexpr, BLOCK_HEADDIM: tl.constexpr,\n\t):\n\t    start_m = tl.program_id(0)\n\t    off_hb = tl.program_id(1)\n\t    off_b = off_hb // nheads\n\t    off_h = off_hb % nheads\n\t    # initialize offsets\n", "    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n\t    offs_d = tl.arange(0, BLOCK_HEADDIM)\n\t    # load\n\t    o = tl.load(Out + off_b * stride_ob + off_h * stride_oh + offs_m[:, None] * stride_om + offs_d[None, :],\n\t                mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n\t    do = tl.load(DO + off_b * stride_dob + off_h * stride_doh + offs_m[:, None] * stride_dom + offs_d[None, :],\n\t                 mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n\t    delta = tl.sum(o * do, axis=1)\n\t    # write-back\n\t    tl.store(Delta + off_hb * seqlen_q_rounded + offs_m, delta)\n", "@triton.jit\n\tdef _bwd_store_dk_dv(\n\t    dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim,\n\t    EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr,\n\t):\n\t    # [2022-11-01] TD: Same bug. In the case of EVEN_N=True and EVEN_M=False,\n\t    # if we just call tl.store(dv_ptrs), there's a race condition\n\t    if EVEN_N & EVEN_M:\n\t        if EVEN_HEADDIM:\n\t            tl.store(dv_ptrs, dv)\n", "            tl.store(dk_ptrs, dk)\n\t        else:\n\t            tl.store(dv_ptrs, dv, mask=offs_d[None, :] < headdim)\n\t            tl.store(dk_ptrs, dk, mask=offs_d[None, :] < headdim)\n\t    else:\n\t        if EVEN_HEADDIM:\n\t            tl.store(dv_ptrs, dv, mask=offs_n[:, None] < seqlen_k)\n\t            tl.store(dk_ptrs, dk, mask=offs_n[:, None] < seqlen_k)\n\t        else:\n\t            tl.store(dv_ptrs, dv, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n", "            tl.store(dk_ptrs, dk, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n\t@triton.jit\n\tdef _bwd_kernel_one_col_block(\n\t    start_n,\n\t    Q, K, V, Bias,\n\t    DO, DQ, DK, DV,\n\t    LSE, D,\n\t    softmax_scale,\n\t    stride_qm, stride_kn, stride_vn, stride_bm,\n\t    stride_dom, stride_dqm, stride_dkn, stride_dvn,\n", "    seqlen_q, seqlen_k, headdim,\n\t    ATOMIC_ADD: tl.constexpr,\n\t    BIAS_TYPE: tl.constexpr,\n\t    IS_CAUSAL: tl.constexpr,\n\t    BLOCK_HEADDIM: tl.constexpr,\n\t    EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr,\n\t    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr,\n\t):\n\t    # We need to make sure begin_m is a multiple of BLOCK_M (not BLOCK_N)\n\t    begin_m = 0 if not IS_CAUSAL else ((start_n * BLOCK_N) // BLOCK_M) * BLOCK_M\n", "    # initialize row/col offsets\n\t    offs_qm = begin_m + tl.arange(0, BLOCK_M)\n\t    offs_n = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n\t    offs_m = tl.arange(0, BLOCK_M)\n\t    offs_d = tl.arange(0, BLOCK_HEADDIM)\n\t    # initialize pointers to value-like data\n\t    q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_d[None, :])\n\t    k_ptrs = K + (offs_n[:, None] * stride_kn + offs_d[None, :])\n\t    v_ptrs = V + (offs_n[:, None] * stride_vn + offs_d[None, :])\n\t    do_ptrs = DO + (offs_qm[:, None] * stride_dom + offs_d[None, :])\n", "    dq_ptrs = DQ + (offs_qm[:, None] * stride_dqm + offs_d[None, :])\n\t    if BIAS_TYPE == 'vector':\n\t        b_ptrs = Bias + offs_n\n\t    elif BIAS_TYPE == 'matrix':\n\t        b_ptrs = Bias + (offs_qm[:, None] * stride_bm + offs_n[None, :])\n\t    # initialize dv and dk\n\t    dv = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n\t    dk = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n\t    # There seems to be some problem with Triton pipelining that makes results wrong for\n\t    # headdim=64, seqlen=(113, 255), bias_type='matrix'. In this case the for loop\n", "    # may have zero step, and pipelining with the bias matrix could screw it up.\n\t    # So we just exit early.\n\t    if begin_m >= seqlen_q:\n\t        dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n\t        dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n\t        _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim,\n\t                         EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n\t        return\n\t    # k and v stay in SRAM throughout\n\t    # [2022-10-30] TD: Same bug as the fwd. In the case of EVEN_N=True and EVEN_M=False,\n", "    # if we just call tl.load(k_ptrs), we get the wrong output!\n\t    if EVEN_N & EVEN_M:\n\t        if EVEN_HEADDIM:\n\t            k = tl.load(k_ptrs)\n\t            v = tl.load(v_ptrs)\n\t        else:\n\t            k = tl.load(k_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n\t            v = tl.load(v_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n\t    else:\n\t        if EVEN_HEADDIM:\n", "            k = tl.load(k_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n\t            v = tl.load(v_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n\t        else:\n\t            k = tl.load(k_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim),\n\t                        other=0.0)\n\t            v = tl.load(v_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim),\n\t                        other=0.0)\n\t    # loop over rows\n\t    num_block_m = tl.cdiv(seqlen_q, BLOCK_M)\n\t    for start_m in range(begin_m, num_block_m * BLOCK_M, BLOCK_M):\n", "        start_m = tl.multiple_of(start_m, BLOCK_M)\n\t        offs_m_curr = start_m + offs_m\n\t        # load q, k, v, do on-chip\n\t        # Same bug as below. Otherwise gives wrong result for headdim=40, seqlen=(128, 117)\n\t        if EVEN_M & EVEN_HEADDIM:\n\t            q = tl.load(q_ptrs)\n\t        else:\n\t            if EVEN_HEADDIM:\n\t                q = tl.load(q_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0)\n\t            else:\n", "                q = tl.load(q_ptrs, mask=(offs_m_curr[:, None] < seqlen_q)\n\t                                         & (offs_d[None, :] < headdim), other=0.0)\n\t        # recompute p = softmax(qk, dim=-1).T\n\t        qk = tl.dot(q, k, trans_b=True)\n\t        # Trying to combine the two masks seem to make the result wrong\n\t        if not EVEN_N:  # Need to mask out otherwise the softmax is wrong\n\t            qk = tl.where(offs_n[None, :] < seqlen_k, qk, float(\"-inf\"))\n\t        if IS_CAUSAL:\n\t            qk = tl.where(offs_m_curr[:, None] >= (offs_n[None, :]), qk, float(\"-inf\"))\n\t        if BIAS_TYPE != 'none':\n", "            tl.debug_barrier()  # Race condition otherwise\n\t            if BIAS_TYPE == 'vector':\n\t                if EVEN_N:\n\t                    bias = tl.load(b_ptrs).to(tl.float32)\n\t                else:\n\t                    bias = tl.load(b_ptrs, mask=offs_n < seqlen_k, other=0.0).to(tl.float32)\n\t                bias = bias[None, :]\n\t            elif BIAS_TYPE == 'matrix':\n\t                if EVEN_M & EVEN_N:\n\t                    bias = tl.load(b_ptrs).to(tl.float32)\n", "                else:\n\t                    bias = tl.load(b_ptrs,\n\t                                   mask=(offs_m_curr[:, None] < seqlen_q)\n\t                                        & (offs_n[None, :] < seqlen_k),\n\t                                   other=0.0).to(tl.float32)\n\t            qk = qk * softmax_scale + bias\n\t        # There seems to be a race condition when headdim=48/96, and dq, dk, dv are wrong.\n\t        # Also wrong for headdim=64.\n\t        if not (EVEN_M & EVEN_HEADDIM):\n\t            tl.debug_barrier()\n", "        lse_i = tl.load(LSE + offs_m_curr)\n\t        if BIAS_TYPE == 'none':\n\t            p = tl.exp(qk * softmax_scale - lse_i[:, None])\n\t        else:\n\t            p = tl.exp(qk - lse_i[:, None])\n\t        # compute dv\n\t        # [2022-10-30] TD: A Triton bug: if EVEN_M=True and EVEN_HEADDIM=False, if we call\n\t        # do = tl.load(do_ptrs, mask=offs_d[None, :] < headdim, other=0.0), we get wrong outputs\n\t        # in the case of headdim=48/96, seqlen_q & seqlen_k >= 512. If headdim=40 or seqlen < 512,\n\t        # the output is correct.\n", "        if EVEN_M & EVEN_HEADDIM:\n\t            do = tl.load(do_ptrs)\n\t        else:\n\t            # [2022-11-01] TD: Triton bug, there's a race condition if we just use m_mask and not d_mask.\n\t            do = tl.load(do_ptrs, mask=(offs_m_curr[:, None] < seqlen_q)\n\t                                        & (offs_d[None, :] < headdim), other=0.0)\n\t        # if EVEN_M:\n\t        #     if EVEN_HEADDIM:\n\t        #         do = tl.load(do_ptrs)\n\t        #     else:\n", "        #         do = tl.load(do_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n\t        # else:\n\t        #     if EVEN_HEADDIM:\n\t        #         do = tl.load(do_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0)\n\t        #     else:\n\t        #         do = tl.load(do_ptrs, mask=(offs_m_curr[:, None] < seqlen_q)\n\t        #                                    & (offs_d[None, :] < headdim), other=0.0)\n\t        dv += tl.dot(p.to(do.dtype), do, trans_a=True)\n\t        # compute dp = dot(v, do)\n\t        # There seems to be a race condition when headdim=48/96, and dq, dk are wrong.\n", "        # Also wrong for headdim=128, seqlen=(108, 256), and ATOMIC_ADD=True\n\t        # Also wrong for headdim=64, seqlen=(1023, 1024), and ATOMIC_ADD=False\n\t        if not (EVEN_M & EVEN_HEADDIM):\n\t            tl.debug_barrier()\n\t        dp = tl.dot(do, v, trans_b=True)\n\t        # There's a race condition for headdim=48\n\t        if not EVEN_HEADDIM:\n\t            tl.debug_barrier()\n\t        # compute ds = p * (dp - delta[:, None])\n\t        # Putting the subtraction after the dp matmul (instead of before) is slightly faster\n", "        Di = tl.load(D + offs_m_curr)\n\t        # Converting ds to q.dtype here reduces register pressure and makes it much faster\n\t        # for BLOCK_HEADDIM=128\n\t        ds = (p * (dp - Di[:, None]) * softmax_scale).to(q.dtype)\n\t        # compute dk = dot(ds.T, q)\n\t        dk += tl.dot(ds, q, trans_a=True)\n\t        # compute dq\n\t        if not (EVEN_M & EVEN_HEADDIM):  # Otherewise there's a race condition when BIAS_TYPE='matrix'\n\t            tl.debug_barrier()\n\t        if not ATOMIC_ADD:\n", "            if EVEN_M & EVEN_HEADDIM:  # Race condition if we just do EVEN_M\n\t                dq = tl.load(dq_ptrs, eviction_policy=\"evict_last\")\n\t                dq += tl.dot(ds, k)\n\t                tl.store(dq_ptrs, dq, eviction_policy=\"evict_last\")\n\t            else:\n\t                if EVEN_HEADDIM:\n\t                    dq = tl.load(dq_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0,\n\t                                eviction_policy=\"evict_last\")\n\t                    dq += tl.dot(ds, k)\n\t                    tl.store(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q,\n", "                            eviction_policy=\"evict_last\")\n\t                else:\n\t                    dq = tl.load(dq_ptrs,\n\t                                 mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim),\n\t                                 other=0.0, eviction_policy=\"evict_last\")\n\t                    dq += tl.dot(ds, k)\n\t                    tl.store(dq_ptrs, dq,\n\t                             mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim),\n\t                             eviction_policy=\"evict_last\")\n\t        else:  # If we're parallelizing across the seqlen_k dimension\n", "            dq = tl.dot(ds, k)\n\t            if EVEN_M & EVEN_HEADDIM:  # Race condition if we just do EVEN_M\n\t                tl.atomic_add(dq_ptrs, dq)\n\t            else:\n\t                if EVEN_HEADDIM:\n\t                    tl.atomic_add(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q)\n\t                else:\n\t                    tl.atomic_add(dq_ptrs, dq,\n\t                                  mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n\t        # increment pointers\n", "        dq_ptrs += BLOCK_M * stride_dqm\n\t        q_ptrs += BLOCK_M * stride_qm\n\t        do_ptrs += BLOCK_M * stride_dom\n\t        if BIAS_TYPE == 'matrix':\n\t            b_ptrs += BLOCK_M * stride_bm\n\t    # write-back\n\t    dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n\t    dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n\t    _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim,\n\t                     EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n", "def init_to_zero(name):\n\t    return lambda nargs: nargs[name].zero_()\n\t@triton.autotune(\n\t    configs=[\n\t        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"SEQUENCE_PARALLEL\": False}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')),\n\t        triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 128, \"SEQUENCE_PARALLEL\": True}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')),\n\t        # Other configs seem to give wrong results when seqlen_q % 128 != 0, disabling them for now\n\t        # # Kernel is buggy (give wrong result) if we set BLOCK_m=128, BLOCK_n=64, num_warps=*4*\n\t        # triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 64, \"SEQUENCE_PARALLEL\": False}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')),\n\t        # triton.Config({\"BLOCK_M\": 128, \"BLOCK_N\": 64, \"SEQUENCE_PARALLEL\": True}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')),\n", "        # triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 64, \"SEQUENCE_PARALLEL\": False}, num_warps=4, num_stages=1, pre_hook=init_to_zero('DQ')),\n\t        # triton.Config({\"BLOCK_M\": 64, \"BLOCK_N\": 64, \"SEQUENCE_PARALLEL\": True}, num_warps=4, num_stages=1, pre_hook=init_to_zero('DQ')),\n\t    ],\n\t    key=['CACHE_KEY_SEQLEN_Q', 'CACHE_KEY_SEQLEN_K', 'BIAS_TYPE', 'IS_CAUSAL', 'BLOCK_HEADDIM'],\n\t)\n\t@triton.heuristics(\n\t    {\n\t        \"EVEN_M\": lambda args: args[\"seqlen_q\"] % args[\"BLOCK_M\"] == 0,\n\t        \"EVEN_N\": lambda args: args[\"seqlen_k\"] % args[\"BLOCK_N\"] == 0,\n\t        \"EVEN_HEADDIM\": lambda args: args[\"headdim\"] == args[\"BLOCK_HEADDIM\"],\n", "    }\n\t)\n\t@triton.jit\n\tdef _bwd_kernel(\n\t    Q, K, V, Bias,\n\t    DO, DQ, DK, DV,\n\t    LSE, D,\n\t    softmax_scale,\n\t    stride_qb, stride_qh, stride_qm,\n\t    stride_kb, stride_kh, stride_kn,\n", "    stride_vb, stride_vh, stride_vn,\n\t    stride_bb, stride_bh, stride_bm,\n\t    stride_dob, stride_doh, stride_dom,\n\t    stride_dqb, stride_dqh, stride_dqm,\n\t    stride_dkb, stride_dkh, stride_dkn,\n\t    stride_dvb, stride_dvh, stride_dvn,\n\t    nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim,\n\t    CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K,\n\t    BIAS_TYPE: tl.constexpr,\n\t    IS_CAUSAL: tl.constexpr,\n", "    BLOCK_HEADDIM: tl.constexpr,\n\t    SEQUENCE_PARALLEL: tl.constexpr,\n\t    EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr,\n\t    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr,\n\t):\n\t    off_hb = tl.program_id(1)\n\t    off_b = off_hb // nheads\n\t    off_h = off_hb % nheads\n\t    # offset pointers for batch/head\n\t    Q += off_b * stride_qb + off_h * stride_qh\n", "    K += off_b * stride_kb + off_h * stride_kh\n\t    V += off_b * stride_vb + off_h * stride_vh\n\t    DO += off_b * stride_dob + off_h * stride_doh\n\t    DQ += off_b * stride_dqb + off_h * stride_dqh\n\t    DK += off_b * stride_dkb + off_h * stride_dkh\n\t    DV += off_b * stride_dvb + off_h * stride_dvh\n\t    if BIAS_TYPE != 'none':\n\t        Bias += off_b * stride_bb + off_h * stride_bh\n\t    # pointer to row-wise quantities in value-like data\n\t    D += off_hb * seqlen_q_rounded\n", "    LSE += off_hb * seqlen_q_rounded\n\t    if not SEQUENCE_PARALLEL:\n\t        num_block_n = tl.cdiv(seqlen_k, BLOCK_N)\n\t        for start_n in range(0, num_block_n):\n\t            _bwd_kernel_one_col_block(\n\t                start_n,\n\t                Q, K, V, Bias,\n\t                DO, DQ, DK, DV,\n\t                LSE, D,\n\t                softmax_scale,\n", "                stride_qm, stride_kn, stride_vn, stride_bm,\n\t                stride_dom, stride_dqm, stride_dkn, stride_dvn,\n\t                seqlen_q, seqlen_k, headdim,\n\t                ATOMIC_ADD=False,\n\t                BIAS_TYPE=BIAS_TYPE,\n\t                IS_CAUSAL=IS_CAUSAL,\n\t                BLOCK_HEADDIM=BLOCK_HEADDIM,\n\t                EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM,\n\t                BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N\n\t            )\n", "    else:\n\t        start_n = tl.program_id(0)\n\t        _bwd_kernel_one_col_block(\n\t            start_n,\n\t            Q, K, V, Bias,\n\t            DO, DQ, DK, DV,\n\t            LSE, D,\n\t            softmax_scale,\n\t            stride_qm, stride_kn, stride_vn, stride_bm,\n\t            stride_dom, stride_dqm, stride_dkn, stride_dvn,\n", "            seqlen_q, seqlen_k, headdim,\n\t            ATOMIC_ADD=True,\n\t            BIAS_TYPE=BIAS_TYPE,\n\t            IS_CAUSAL=IS_CAUSAL,\n\t            BLOCK_HEADDIM=BLOCK_HEADDIM,\n\t            EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM,\n\t            BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N\n\t        )\n\tdef _flash_attn_forward(q, k, v, bias=None, causal=False, softmax_scale=None):\n\t    # shape constraints\n", "    batch, seqlen_q, nheads, d = q.shape\n\t    _, seqlen_k, _, _ = k.shape\n\t    assert k.shape == (batch, seqlen_k, nheads, d)\n\t    assert v.shape == (batch, seqlen_k, nheads, d)\n\t    assert d <= 128, 'FlashAttention only support head dimensions up to 128'\n\t    assert q.dtype == k.dtype == v.dtype, 'All tensors must have the same type'\n\t    assert q.dtype in [torch.float16, torch.bfloat16], 'Only support fp16 and bf16'\n\t    assert q.is_cuda and k.is_cuda and v.is_cuda\n\t    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n\t    has_bias = bias is not None\n", "    bias_type = 'none'\n\t    if has_bias:\n\t        assert bias.dtype in [q.dtype, torch.float]\n\t        assert bias.is_cuda\n\t        assert bias.dim() == 4\n\t        if bias.stride(-1) != 1:\n\t            bias = bias.contiguous()\n\t        if bias.shape[2:] == (1, seqlen_k):\n\t            bias_type = 'vector'\n\t        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n", "            bias_type = 'matrix'\n\t        else:\n\t            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k)'\n\t                               ' or (seqlen_q, seqlen_k)')\n\t        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n\t    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n\t    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n\t    lse = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n\t    tmp = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n\t    o = torch.empty_like(q)\n", "    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n\t    BLOCK = 128\n\t    num_warps = 4 if d <= 64 else 8\n\t    grid = lambda META: (triton.cdiv(seqlen_q, META[\"BLOCK_M\"]), batch * nheads)\n\t    _fwd_kernel[grid](\n\t        q, k, v, bias, o,\n\t        lse, tmp,\n\t        softmax_scale,\n\t        q.stride(0), q.stride(2), q.stride(1),\n\t        k.stride(0), k.stride(2), k.stride(1),\n", "        v.stride(0), v.stride(2), v.stride(1),\n\t        *bias_strides,\n\t        o.stride(0), o.stride(2), o.stride(1),\n\t        nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d,\n\t        seqlen_q // 32,  seqlen_k // 32, # key for triton cache (limit number of compilations)\n\t        # Can't use kwargs here because triton autotune expects key to be args, not kwargs\n\t        # IS_CAUSAL=causal, BLOCK_HEADDIM=d,\n\t        bias_type, causal, BLOCK_HEADDIM,\n\t        BLOCK_M=BLOCK, BLOCK_N=BLOCK,\n\t        num_warps=num_warps,\n", "        num_stages=1,\n\t    )\n\t    return o, lse, softmax_scale  # softmax_scale could have been updated\n\tdef _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv, bias=None, causal=False, softmax_scale=None):\n\t    # Make sure that the last dimension is contiguous\n\t    if do.stride(-1) != 1:\n\t        do = do.contiguous()\n\t    batch, seqlen_q, nheads, d = q.shape\n\t    _, seqlen_k, _, _ = k.shape\n\t    # assert d in {16, 32, 64, 128}\n", "    assert d <= 128\n\t    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n\t    assert lse.shape == (batch, nheads, seqlen_q_rounded)\n\t    assert q.stride(-1) == k.stride(-1) == v.stride(-1) == o.stride(-1) == 1\n\t    assert dq.stride(-1) == dk.stride(-1) == dv.stride(-1) == 1\n\t    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n\t    # dq_accum = torch.zeros_like(q, dtype=torch.float32)\n\t    dq_accum = torch.empty_like(q, dtype=torch.float32)\n\t    delta = torch.empty_like(lse)\n\t    # delta = torch.zeros_like(lse)\n", "    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n\t    grid = lambda META: (triton.cdiv(seqlen_q, META[\"BLOCK_M\"]), batch * nheads)\n\t    _bwd_preprocess_do_o_dot[grid](\n\t        o, do, delta,\n\t        o.stride(0), o.stride(2), o.stride(1),\n\t        do.stride(0), do.stride(2), do.stride(1),\n\t        nheads, seqlen_q, seqlen_q_rounded, d,\n\t        BLOCK_M=128, BLOCK_HEADDIM=BLOCK_HEADDIM,\n\t    )\n\t    has_bias = bias is not None\n", "    bias_type = 'none'\n\t    if has_bias:\n\t        assert bias.dtype in [q.dtype, torch.float]\n\t        assert bias.is_cuda\n\t        assert bias.dim() == 4\n\t        assert bias.stride(-1) == 1\n\t        if bias.shape[2:] == (1, seqlen_k):\n\t            bias_type = 'vector'\n\t        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n\t            bias_type = 'matrix'\n", "        else:\n\t            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k)'\n\t                               ' or (seqlen_q, seqlen_k)')\n\t        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n\t    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n\t    # BLOCK_M = 128\n\t    # BLOCK_N = 64\n\t    # num_warps = 4\n\t    grid = lambda META: (triton.cdiv(seqlen_k, META[\"BLOCK_N\"]) if META[\"SEQUENCE_PARALLEL\"] else 1,\n\t                    batch * nheads)\n", "    _bwd_kernel[grid](\n\t        q, k, v, bias,\n\t        do, dq_accum, dk, dv,\n\t        lse, delta,\n\t        softmax_scale,\n\t        q.stride(0), q.stride(2), q.stride(1),\n\t        k.stride(0), k.stride(2), k.stride(1),\n\t        v.stride(0), v.stride(2), v.stride(1),\n\t        *bias_strides,\n\t        do.stride(0), do.stride(2), do.stride(1),\n", "        dq_accum.stride(0), dq_accum.stride(2), dq_accum.stride(1),\n\t        dk.stride(0), dk.stride(2), dk.stride(1),\n\t        dv.stride(0), dv.stride(2), dv.stride(1),\n\t        nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d,\n\t        seqlen_q // 32,  seqlen_k // 32, # key for triton cache (limit number of compilations)\n\t        # Can't use kwargs here because triton autotune expects key to be args, not kwargs\n\t        # IS_CAUSAL=causal, BLOCK_HEADDIM=d,\n\t        bias_type, causal, BLOCK_HEADDIM,\n\t        # SEQUENCE_PARALLEL=False,\n\t        # BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N,\n", "        # num_warps=num_warps,\n\t        # num_stages=1,\n\t    )\n\t    dq.copy_(dq_accum)\n\tclass FlashAttnQKVPackedFunc(torch.autograd.Function):\n\t    @staticmethod\n\t    def forward(ctx, qkv, bias=None, causal=False, softmax_scale=None):\n\t        \"\"\"\n\t            qkv: (batch, seqlen, 3, nheads, headdim)\n\t            bias: optional, shape broadcastible to (batch, nheads, seqlen, seqlen).\n", "                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen).\n\t                ALiBi mask for non-causal would have shape (1, nheads, seqlen, seqlen)\n\t        \"\"\"\n\t        # Make sure that the last dimension is contiguous\n\t        if qkv.stride(-1) != 1:\n\t            qkv = qkv.contiguous()\n\t        o, lse, ctx.softmax_scale = _flash_attn_forward(\n\t            qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], bias=bias, causal=causal,\n\t            softmax_scale=softmax_scale\n\t        )\n", "        ctx.save_for_backward(qkv, o, lse, bias)\n\t        ctx.causal = causal\n\t        return o\n\t    @staticmethod\n\t    def backward(ctx, do):\n\t        qkv, o, lse, bias = ctx.saved_tensors\n\t        assert not ctx.needs_input_grad[1], 'FlashAttention does not support bias gradient yet'\n\t        # Triton's autotune causes the Tensor._version to change, and so Pytorch autograd\n\t        # does a memcpy. To avoid this we run in inference_mode, which doesn't track the version.\n\t        with torch.inference_mode():\n", "            dqkv = torch.empty_like(qkv)\n\t            _flash_attn_backward(do, qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], o, lse,\n\t                                 dqkv[:, :, 0], dqkv[:, :, 1], dqkv[:, :, 2],\n\t                                 bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n\t        return dqkv, None, None, None\n\tflash_attn_qkvpacked_func = FlashAttnQKVPackedFunc.apply\n\tclass FlashAttnKVPackedFunc(torch.autograd.Function):\n\t    @staticmethod\n\t    def forward(ctx, q, kv, bias=None, causal=False, softmax_scale=None):\n\t        \"\"\"\n", "            q: (batch, seqlen_q, nheads, headdim)\n\t            kv: (batch, seqlen_k, 2, nheads, headdim)\n\t            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n\t                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n\t                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n\t        \"\"\"\n\t        # Make sure that the last dimension is contiguous\n\t        q, kv = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, kv]]\n\t        o, lse, ctx.softmax_scale = _flash_attn_forward(\n\t            q, kv[:, :, 0], kv[:, :, 1], bias=bias, causal=causal, softmax_scale=softmax_scale\n", "        )\n\t        ctx.save_for_backward(q, kv, o, lse, bias)\n\t        ctx.causal = causal\n\t        return o\n\t    @staticmethod\n\t    def backward(ctx, do):\n\t        q, kv, o, lse, bias = ctx.saved_tensors\n\t        if len(ctx.needs_input_grad) >= 3:\n\t            assert not ctx.needs_input_grad[2], 'FlashAttention does not support bias gradient yet'\n\t        # Triton's autotune causes the Tensor._version to change, and so Pytorch autograd\n", "        # does a memcpy. To avoid this we run in inference_mode, which doesn't track the version.\n\t        with torch.inference_mode():\n\t            dq = torch.empty_like(q)\n\t            dkv = torch.empty_like(kv)\n\t            _flash_attn_backward(do, q, kv[:, :, 0], kv[:, :, 1], o, lse,\n\t                                 dq, dkv[:, :, 0], dkv[:, :, 1],\n\t                                 bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n\t        return dq, dkv, None, None, None\n\tflash_attn_kvpacked_func = FlashAttnKVPackedFunc.apply\n\tclass FlashAttnFunc(torch.autograd.Function):\n", "    @staticmethod\n\t    def forward(ctx, q, k, v, bias=None, causal=False, softmax_scale=None):\n\t        \"\"\"\n\t            q: (batch_size, seqlen_q, nheads, headdim)\n\t            k, v: (batch_size, seqlen_k, nheads, headdim)\n\t            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n\t                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n\t                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n\t        \"\"\"\n\t        # Make sure that the last dimension is contiguous\n", "        q, k, v = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, k, v]]\n\t        o, lse, ctx.softmax_scale = _flash_attn_forward(q, k, v, bias=bias, causal=causal, softmax_scale=softmax_scale)\n\t        ctx.save_for_backward(q, k, v, o, lse, bias)\n\t        ctx.causal = causal\n\t        return o\n\t    @staticmethod\n\t    def backward(ctx, do):\n\t        q, k, v, o, lse, bias = ctx.saved_tensors\n\t        assert not ctx.needs_input_grad[3], 'FlashAttention does not support bias gradient yet'\n\t        # Triton's autotune causes the Tensor._version to change, and so Pytorch autograd\n", "        # does a memcpy. To avoid this we run in inference_mode, which doesn't track the version.\n\t        with torch.inference_mode():\n\t            dq = torch.empty_like(q)\n\t            dk = torch.empty_like(k)\n\t            dv = torch.empty_like(v)\n\t            _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv,\n\t                                 bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n\t        return dq, dk, dv, None, None, None\n\tflash_attn_func = FlashAttnFunc.apply\n"]}
{"filename": "falcontune/backend/torch/quantlinear.py", "chunked_list": ["import torch\n\tfrom falcontune.backend.base import QuantLinearBase\n\tclass QuantLinear(QuantLinearBase):\n\t    framework = 'torch'\n\t    def forward(self, x):\n\t        out_shape = x.shape[:-1] + (self.outfeatures,)\n\t        x = x.reshape(-1, x.shape[-1])\n\t        if self.bits in [2, 4, 8]:\n\t            zeros = torch.bitwise_right_shift(torch.unsqueeze(self.qzeros, 2).expand(-1, -1, 32 // self.bits),\n\t                                              self.wf.unsqueeze(0)).to(\n", "                torch.int16 if self.bits == 8 else torch.int8)\n\t            torch.bitwise_and(zeros, (2 ** self.bits) - 1, out=zeros)\n\t            zeros = zeros + 1\n\t            zeros = zeros.reshape(self.scales.shape)\n\t            weight = torch.bitwise_right_shift(torch.unsqueeze(self.qweight, 1).expand(-1, 32 // self.bits, -1),\n\t                                               self.wf.unsqueeze(-1)).to(\n\t                torch.int16 if self.bits == 8 else torch.int8)\n\t            torch.bitwise_and(weight, (2 ** self.bits) - 1, out=weight)\n\t        elif self.bits == 3:\n\t            zeros = self.qzeros.reshape(self.qzeros.shape[0], self.qzeros.shape[1] // 3, 3, 1).expand(-1, -1, -1,\n", "                                                                                                      12)\n\t            zeros = (zeros >> self.wf.unsqueeze(0))\n\t            zeros[:, :, 0, 10] = (zeros[:, :, 0, 10] & 0x3) | ((zeros[:, :, 1, 0] << 2) & 0x4)\n\t            zeros[:, :, 1, 11] = (zeros[:, :, 1, 11] & 0x1) | ((zeros[:, :, 2, 0] << 1) & 0x6)\n\t            zeros = zeros & 0x7\n\t            zeros = torch.cat([zeros[:, :, 0, :11], zeros[:, :, 1, 1:12], zeros[:, :, 2, 1:11]], dim=2)\n\t            zeros = zeros + 1\n\t            zeros = zeros.reshape(self.scales.shape)\n\t            weight = self.qweight.reshape(self.qweight.shape[0] // 3, 3, 1, self.qweight.shape[1]).expand(-1, -1,\n\t                                                                                                          12, -1)\n", "            weight = (weight >> self.wf.unsqueeze(-1)) & 0x7\n\t            weight[:, 0, 10] = (weight[:, 0, 10] & 0x3) | ((weight[:, 1, 0] << 2) & 0x4)\n\t            weight[:, 1, 11] = (weight[:, 1, 11] & 0x1) | ((weight[:, 2, 0] << 1) & 0x6)\n\t            weight = weight & 0x7\n\t            weight = torch.cat([weight[:, 0, :11], weight[:, 1, 1:12], weight[:, 2, 1:11]], dim=1)\n\t        else:\n\t            raise NotImplemented('bits in [2, 3, 4, 8]')\n\t        weight = weight.reshape(weight.shape[0] * weight.shape[1], weight.shape[2])\n\t        num_itr = self.g_idx.shape[0] // x.shape[-1]\n\t        if num_itr == 1:\n", "            weights = (self.scales[self.g_idx.long()] * (weight - zeros[self.g_idx.long()]))\n\t        else:\n\t            num_dim = self.g_idx.shape[0] // num_itr\n\t            weights = []\n\t            for i in range(num_itr):\n\t                scale_i = self.scales[:, i * num_dim:(i + 1) * num_dim]\n\t                weight_i = weight[:, i * num_dim:(i + 1) * num_dim]\n\t                zeros_i = zeros[:, i * num_dim:(i + 1) * num_dim]\n\t                g_idx_i = self.g_idx[i * num_dim:(i + 1) * num_dim]\n\t                weights.append(scale_i[g_idx_i.long()] * (weight_i - zeros_i[g_idx_i.long()]))\n", "            weights = torch.cat(weights, dim=1)\n\t        out = torch.matmul(x.half(), weights)\n\t        out = out.reshape(out_shape)\n\t        out = (out + self.bias) if (self.bias is not None) else out\n\t        return out\n"]}
{"filename": "falcontune/backend/torch/__init__.py", "chunked_list": []}
{"filename": "falcontune/model/__init__.py", "chunked_list": ["from falcontune.model.falcon.config import (\n\t    FALCON7B8bitConfig,\n\t    FALCON7BRW8bitConfig,\n\t    FALCON7BInstruct8bitConfig,\n\t    FALCON40B8bitConfig,\n\t    FALCON40BInstruct8bitConfig,\n\t    FALCON1BRW8bitConfig,\n\t    FALCON7B4bitConfig,\n\t    FALCON40B4bitConfig,\n\t)\n", "MODEL_CONFIGS = {\n\t    FALCON7B8bitConfig.name: FALCON7B8bitConfig,\n\t    FALCON7BRW8bitConfig.name: FALCON7BRW8bitConfig,\n\t    FALCON7BInstruct8bitConfig.name: FALCON7BInstruct8bitConfig,\n\t    FALCON40B8bitConfig.name: FALCON40B8bitConfig,\n\t    FALCON40BInstruct8bitConfig.name: FALCON40BInstruct8bitConfig,\n\t    FALCON1BRW8bitConfig.name: FALCON1BRW8bitConfig,\n\t    FALCON7B4bitConfig.name: FALCON7B4bitConfig,\n\t    FALCON40B4bitConfig.name: FALCON40B4bitConfig,\n\t}\n", "def load_model(model_name: str, weights, half=False, backend='triton'):\n\t    if model_name not in MODEL_CONFIGS:\n\t        raise ValueError(f\"Invalid model name: {model_name}\")\n\t    model_config = MODEL_CONFIGS[model_name]\n\t    if model_name in MODEL_CONFIGS:\n\t        from falcontune.model.falcon.model import load_model\n\t        model, tokenizer = load_model(model_config, weights, half=half, backend=backend)\n\t    else:\n\t        raise ValueError(f\"Invalid model name: {model_name}\")\n\t    model.eval()\n", "    return model, tokenizer\n"]}
{"filename": "falcontune/model/utils.py", "chunked_list": ["from transformers.utils import logging\n\tlogger = logging.get_logger(\"transformers\")\n\tdef model_to_half(model, cast_model=True):\n\t    if cast_model:\n\t        model.half()\n\t    for n, m in model.named_modules():\n\t        if m.__class__.__name__ == 'QuantLinear':\n\t            logger.debug(f'Converting to half {n}.')\n\t            m.scales = m.scales.half()\n\t            m.bias = m.bias.half() if (m.bias is not None) else None\n", "    logger.info('Converted as Half.')\n"]}
{"filename": "falcontune/model/lora.py", "chunked_list": ["import re\n\timport torch\n\timport warnings\n\tfrom peft.tuners import lora\n\tfrom peft.tuners.lora import Linear, LoraLayer\n\tfrom peft import PeftModel, get_peft_model\n\tfrom peft.utils import _get_submodules, PeftType\n\tfrom transformers.pytorch_utils import Conv1D\n\tfrom falcontune.backend.base import QuantLinearBase\n\tclass Linear4bitLt(QuantLinearBase, LoraLayer):\n", "    # Lora implemented in a dense layer\n\t    def __init__(\n\t            self,\n\t            adapter_name,\n\t            in_features,\n\t            out_features,\n\t            groupsize: int = -1,\n\t            r: int = 0,\n\t            lora_alpha: int = 1,\n\t            lora_dropout: float = 0.0,\n", "            bits: int = 4,\n\t            framework: str = 'torch',\n\t            **kwargs,\n\t    ):\n\t        QuantLinearBase.__init__(\n\t            self,\n\t            bits,\n\t            groupsize,\n\t            in_features,\n\t            out_features\n", "        )\n\t        LoraLayer.__init__(self, in_features=in_features, out_features=out_features)\n\t        self.quant_class = get_quant_class(framework)\n\t        # Freezing the pre-trained weight matrix\n\t        self.qweight.requires_grad = False\n\t        self.scales.requires_grad = False\n\t        self.qzeros.requires_grad = False\n\t        self.g_idx.requires_grad = False\n\t        self.bias.requires_grad = False\n\t        init_lora_weights = kwargs.pop(\"init_lora_weights\", True)\n", "        self.update_layer(adapter_name, r, lora_alpha, lora_dropout, init_lora_weights)\n\t        self.active_adapter = adapter_name\n\t    def forward(self, x: torch.Tensor):\n\t        result = self.quant_class.forward(self, x)\n\t        if self.disable_adapters or self.active_adapter not in self.lora_A.keys():\n\t            return result\n\t        elif self.r[self.active_adapter] > 0:\n\t            if not torch.is_autocast_enabled():\n\t                expected_dtype = result.dtype\n\t                if x.dtype != torch.float32:\n", "                    x = x.float()\n\t                output = (\n\t                        self.lora_B[self.active_adapter](\n\t                            self.lora_A[self.active_adapter](self.lora_dropout[self.active_adapter](x))\n\t                        ).to(expected_dtype)\n\t                        * self.scaling[self.active_adapter]\n\t                )\n\t            else:\n\t                output = (\n\t                        self.lora_B[self.active_adapter](\n", "                            self.lora_A[self.active_adapter](self.lora_dropout[self.active_adapter](x))\n\t                        )\n\t                        * self.scaling[self.active_adapter]\n\t                )\n\t            result += output\n\t        return result\n\t    @property\n\t    def weight(self):\n\t        class WeightDeviceClass:\n\t            device = self.qweight.device\n", "        return WeightDeviceClass()\n\tclass GPTQLoraModel(lora.LoraModel):\n\t    def _find_and_replace(self, adapter_name):\n\t        lora_config = self.peft_config[adapter_name]\n\t        loaded_in_8bit = getattr(self.model, \"is_loaded_in_8bit\", False)\n\t        is_target_modules_in_base_model = False\n\t        kwargs = {\n\t            \"r\": lora_config.r,\n\t            \"lora_alpha\": lora_config.lora_alpha,\n\t            \"lora_dropout\": lora_config.lora_dropout,\n", "            \"fan_in_fan_out\": lora_config.fan_in_fan_out,\n\t            \"init_lora_weights\": lora_config.init_lora_weights,\n\t        }\n\t        key_list = [key for key, _ in self.model.named_modules()]\n\t        for key in key_list:\n\t            if isinstance(lora_config.target_modules, str):\n\t                target_module_found = re.fullmatch(lora_config.target_modules, key)\n\t            else:\n\t                target_module_found = any(key.endswith(target_key) for target_key in lora_config.target_modules)\n\t            if target_module_found:\n", "                if not is_target_modules_in_base_model:\n\t                    is_target_modules_in_base_model = True\n\t                parent, target, target_name = _get_submodules(self.model, key)\n\t                bias = target.bias is not None\n\t                if isinstance(target, LoraLayer):\n\t                    target.update_layer(\n\t                        adapter_name,\n\t                        lora_config.r,\n\t                        lora_config.lora_alpha,\n\t                        lora_config.lora_dropout,\n", "                        lora_config.init_lora_weights,\n\t                    )\n\t                else:\n\t                    if loaded_in_8bit:\n\t                        import bitsandbytes as bnb\n\t                        from peft.tuners.lora import Linear8bitLt\n\t                        if isinstance(target, bnb.nn.Linear8bitLt):\n\t                            kwargs.update(\n\t                                {\n\t                                    \"has_fp16_weights\": target.state.has_fp16_weights,\n", "                                    \"memory_efficient_backward\": target.state.memory_efficient_backward,\n\t                                    \"threshold\": target.state.threshold,\n\t                                    \"index\": target.index,\n\t                                }\n\t                            )\n\t                            new_module = Linear8bitLt(\n\t                                adapter_name, target.in_features, target.out_features, bias=bias, **kwargs\n\t                            )\n\t                    elif isinstance(target, QuantLinearBase):\n\t                        assert not loaded_in_8bit\n", "                        new_module = Linear4bitLt(\n\t                            adapter_name=adapter_name,\n\t                            in_features=target.infeatures,\n\t                            out_features=target.outfeatures,\n\t                            groupsize=target.groupsize,\n\t                            bits=target.bits,\n\t                            framework=target.framework,\n\t                            bias=bias, **kwargs)\n\t                    else:\n\t                        if isinstance(target, torch.nn.Linear):\n", "                            in_features, out_features = target.in_features, target.out_features\n\t                            if kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n\t                                    \"fan_in_fan_out is set to True but the target module is `torch.nn.Linear`. \"\n\t                                    \"Setting fan_in_fan_out to False.\"\n\t                                )\n\t                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = False\n\t                        elif isinstance(target, Conv1D):\n\t                            in_features, out_features = (\n\t                                target.weight.ds_shape if hasattr(target.weight, \"ds_shape\") else target.weight.shape\n", "                            )\n\t                            if not kwargs[\"fan_in_fan_out\"]:\n\t                                warnings.warn(\n\t                                    \"fan_in_fan_out is set to False but the target module is `Conv1D`. \"\n\t                                    \"Setting fan_in_fan_out to True.\"\n\t                                )\n\t                                kwargs[\"fan_in_fan_out\"] = lora_config.fan_in_fan_out = True\n\t                        else:\n\t                            raise ValueError(\n\t                                f\"Target module {target} is not supported. \"\n", "                                f\"Currently, only `torch.nn.Linear` and `Conv1D` are supported.\"\n\t                            )\n\t                        new_module = Linear(adapter_name, in_features, out_features, bias=bias, **kwargs)\n\t                    self._replace_module(parent, target_name, new_module, target)\n\t        if not is_target_modules_in_base_model:\n\t            raise ValueError(\n\t                f\"Target modules {lora_config.target_modules} not found in the base model. \"\n\t                f\"Please check the target modules and try again.\"\n\t            )\n\t    def _replace_module(self, parent_module, child_name, new_module, old_module):\n", "        setattr(parent_module, child_name, new_module)\n\t        if isinstance(old_module, QuantLinearBase) and isinstance(new_module, Linear4bitLt):\n\t            new_module.qweight = old_module.qweight\n\t            new_module.scales = old_module.scales\n\t            new_module.qzeros = old_module.qzeros\n\t            new_module.g_idx = old_module.g_idx\n\t            new_module.bias = old_module.bias\n\t            if getattr(old_module, \"state\", None) is not None:\n\t                new_module.state = old_module.state\n\t                new_module.to(old_module.qweight.device)\n", "            # dispatch to correct device\n\t            for name, module in new_module.named_modules():\n\t                if \"lora_\" in name:\n\t                    module.to(old_module.qweight.device)\n\t        else:\n\t            new_module.weight = old_module.weight\n\t            if old_module.bias is not None:\n\t                new_module.bias = old_module.bias\n\t            if getattr(old_module, \"state\", None) is not None:\n\t                new_module.state = old_module.state\n", "                new_module.to(old_module.weight.device)\n\t            # dispatch to correct device\n\t            for name, module in new_module.named_modules():\n\t                if \"lora_\" in name:\n\t                    module.to(old_module.weight.device)\n\tdef replace_peft_model_with_gptq_lora_model():\n\t    import peft.peft_model\n\t    peft.peft_model.PEFT_TYPE_TO_MODEL_MAPPING[PeftType.LORA] = GPTQLoraModel\n\tdef get_quant_class(framework: str):\n\t    QuantClass = None\n", "    if framework == 'torch':\n\t        from falcontune.backend.torch.quantlinear import QuantLinear as QuantClass\n\t    elif framework == 'cuda':\n\t        from falcontune.backend.cuda.quantlinear import QuantLinear as QuantClass\n\t    elif framework == 'triton':\n\t        from falcontune.backend.triton.quantlinear import QuantLinear as QuantClass\n\t    else:\n\t        raise NotImplementedError(f'{framework} is not supported')\n\t    return QuantClass\n\tdef load_adapter(falcon, lora_apply_dir=None, lora_config=None, ddp=None):\n", "    if lora_apply_dir is None:\n\t        model = get_peft_model(falcon, lora_config)\n\t    else:\n\t        if ddp:\n\t            device_map = {'': 0}\n\t        else:\n\t            if torch.cuda.device_count() > 1:\n\t                device_map = \"auto\"\n\t            else:\n\t                device_map = {'': 0}\n", "        print('Device map for lora:', device_map)\n\t        model = PeftModel.from_pretrained(\n\t            falcon, lora_apply_dir, device_map=device_map,\n\t            torch_dtype=torch.float32, is_trainable=True)\n\t        model.to(falcon.device)\n\t        print(lora_apply_dir, 'loaded')\n\t    return model\n"]}
{"filename": "falcontune/model/gradient_checkpointing.py", "chunked_list": ["import numpy as np\n\timport torch\n\tfrom torch.utils.checkpoint import checkpoint\n\tfrom torch.autograd import Variable\n\tclass NewForward:\n\t    def __init__(self, layer):\n\t        self.layer = layer\n\t        self.apply_patch()\n\t    def apply_patch(self):\n\t        self.layer.old_forward_for_cp = self.layer.forward\n", "        self.layer.forward = self.new_forward\n\t    def new_forward(self, *args, **kwargs):\n\t        def func(*args):\n\t            return self.layer.old_forward_for_cp(*args, **kwargs)\n\t        output = checkpoint(func, *args)\n\t        return output\n\tclass VarWrapper:\n\t    def __init__(self, model):\n\t        self.model = model\n\t        self.apply_patch()\n", "        print('Var Wrapper Patch Applied')\n\t    def apply_patch(self):\n\t        self.model.old_forward_for_cp = self.model.forward\n\t        self.model.forward = self.new_forward\n\t    def new_forward(self, *args, **kwargs):\n\t        out = self.model.old_forward_for_cp(*args, **kwargs)\n\t        out = Variable(out.data, requires_grad=True)\n\t        return out\n\tdef apply_gradient_checkpointing(model, decoder_layer_class, checkpoint_ratio=1):\n\t    new_forwards = []\n", "    modules = []\n\t    for n, m in model.named_modules():\n\t        if isinstance(m, decoder_layer_class):\n\t            modules.append(m)\n\t    if checkpoint_ratio < 1 and checkpoint_ratio > 0:\n\t        checkpoint_locs = np.array((np.linspace(0, 1, int(len(modules) * checkpoint_ratio)) * (len(modules)-1)).round(), dtype=int)\n\t    else:\n\t        checkpoint_locs = np.arange(len(modules))\n\t    for i in checkpoint_locs:\n\t        m = modules[i]\n", "        new_forwards.append(NewForward(m))\n\t        print('Forward Patch Applied For Block {}'.format(i))\n\t    for n, m in model.named_modules():\n\t        if isinstance(m, torch.nn.Embedding):\n\t            wrapper = VarWrapper(m)\n\t            break\n\t    return new_forwards, wrapper\n"]}
{"filename": "falcontune/model/falcon/model.py", "chunked_list": ["import math\n\timport warnings\n\timport importlib\n\tfrom typing import Optional, Tuple, Union\n\timport torch\n\timport torch.utils.checkpoint\n\tfrom torch import nn\n\tfrom torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, LayerNorm, MSELoss\n\tfrom torch.nn import functional as F\n\tfrom einops import rearrange\n", "import accelerate\n\timport transformers\n\tfrom transformers.modeling_outputs import (\n\t    BaseModelOutputWithPastAndCrossAttentions,\n\t    CausalLMOutputWithCrossAttentions,\n\t    QuestionAnsweringModelOutput,\n\t    SequenceClassifierOutputWithPast,\n\t    TokenClassifierOutput)\n\tfrom transformers.modeling_utils import PreTrainedModel\n\tfrom transformers.configuration_utils import PretrainedConfig\n", "from transformers.utils import logging\n\tfrom peft import PeftModel\n\tfrom falcontune.backend.base import replace_4bit_linear, find_layers\n\tfrom falcontune.model.lora import Linear4bitLt\n\tlogger = logging.get_logger(\"transformers\")\n\tdef get_decoder_layer(num_heads: int):\n\t    assert num_heads in [71, 128]\n\t    return DecoderLayer7B if num_heads == 71 else DecoderLayer40B\n\tclass RWConfig(PretrainedConfig):\n\t    model_type = \"RefinedWebModel\"\n", "    keys_to_ignore_at_inference = [\"past_key_values\"]\n\t    attribute_map = {\n\t        \"num_hidden_layers\": \"n_layer\",\n\t        \"num_attention_heads\": \"n_head\",\n\t    }\n\t    def __init__(\n\t        self,\n\t        vocab_size=250880,\n\t        hidden_size=64,\n\t        n_layer=2,\n", "        n_head=8,\n\t        layer_norm_epsilon=1e-5,\n\t        initializer_range=0.02,\n\t        use_cache=True,\n\t        bos_token_id=1,\n\t        eos_token_id=2,\n\t        apply_residual_connection_post_layernorm=False,\n\t        hidden_dropout=0.0,\n\t        attention_dropout=0.0,\n\t        multi_query=False,\n", "        alibi=False,\n\t        bias=False,\n\t        parallel_attn=False,\n\t        **kwargs,\n\t    ):\n\t        self.vocab_size = vocab_size\n\t        # Backward compatibility with n_embed kwarg\n\t        n_embed = kwargs.pop(\"n_embed\", None)\n\t        self.hidden_size = hidden_size if n_embed is None else n_embed\n\t        self.n_layer = n_layer\n", "        self.n_head = n_head\n\t        self.layer_norm_epsilon = layer_norm_epsilon\n\t        self.initializer_range = initializer_range\n\t        self.use_cache = use_cache\n\t        self.apply_residual_connection_post_layernorm = apply_residual_connection_post_layernorm\n\t        self.hidden_dropout = hidden_dropout\n\t        self.attention_dropout = attention_dropout\n\t        self.bos_token_id = bos_token_id\n\t        self.eos_token_id = eos_token_id\n\t        self.multi_query = multi_query\n", "        self.alibi = alibi\n\t        self.bias = bias\n\t        self.parallel_attn = parallel_attn\n\t        super().__init__(bos_token_id=bos_token_id, eos_token_id=eos_token_id, **kwargs)\n\t    @property\n\t    def head_dim(self):\n\t        return self.hidden_size // self.n_head\n\t    @property\n\t    def rotary(self):\n\t        return not self.alibi\n", "# rotary pos emb helpers (torch.jit.script does not seem to support staticmethod...)\n\tdef rotate_half(x):\n\t    x1, x2 = x[..., : x.shape[-1] // 2], x[..., x.shape[-1] // 2:]\n\t    return torch.cat((-x2, x1), dim=x1.ndim - 1)  # dim=-1 triggers a bug in torch < 1.8.0\n\tclass RotaryEmbedding(torch.nn.Module):\n\t    \"\"\"Implementation of RotaryEmbedding from GPT-NeoX.\n\t    This implementation is design to operate on queries and keys that are compatible with\n\t    [batch_size, n_heads_per_partition, seq_len, head_dim] (e.g. MinGPTAttention format).\n\t    \"\"\"\n\t    def __init__(\n", "            self,\n\t            head_dim: int,\n\t            base=10000,\n\t    ):\n\t        super().__init__()\n\t        self.inv_freq = 1.0 / (base ** (torch.arange(0, head_dim, 2).float() / head_dim))\n\t        self.head_dim = head_dim\n\t        self.seq_len_cached = None\n\t        self.batch_size_cached = None\n\t        self.cos_cached: torch.Tensor | None = None\n", "        self.sin_cached: torch.Tensor | None = None\n\t    def cos_sin(\n\t            self,\n\t            seq_len: int,\n\t            device=\"cuda\",\n\t            dtype=torch.bfloat16,\n\t    ) -> torch.Tensor:\n\t        if seq_len != self.seq_len_cached:\n\t            self.seq_len_cached = seq_len\n\t            t = torch.arange(seq_len, device=device).type_as(self.inv_freq)\n", "            freqs = torch.einsum(\"i,j->ij\", t, self.inv_freq)\n\t            emb = torch.cat((freqs, freqs), dim=-1).to(device)\n\t            if dtype in [torch.float16, torch.bfloat16]:\n\t                emb = emb.float()\n\t            self.cos_cached = emb.cos()[None, :, :]\n\t            self.sin_cached = emb.sin()[None, :, :]\n\t            self.cos_cached = self.cos_cached.type(dtype)\n\t            self.sin_cached = self.sin_cached.type(dtype)\n\t        return self.cos_cached, self.sin_cached\n\t    def forward(self, q, k):\n", "        batch, seq_len, head_dim = q.shape\n\t        cos, sin = self.cos_sin(seq_len, q.device)\n\t        return (q * cos) + (rotate_half(q) * sin), (k * cos) + (rotate_half(k) * sin)\n\tdef _make_causal_mask(input_ids_shape: torch.Size, device: torch.device,\n\t                      past_key_values_length: int) -> torch.BoolTensor:\n\t    batch_size, target_length = input_ids_shape\n\t    mask = torch.empty((target_length, target_length + past_key_values_length), dtype=torch.bool, device=device)\n\t    # ONNX doesn't support `torch.Tensor.triu` properly, thus we use this workaround\n\t    seq_ids = torch.arange(target_length, device=device)\n\t    mask[:, past_key_values_length:] = seq_ids[:, None] < seq_ids[None, :]\n", "    if past_key_values_length > 0:\n\t        mask[:, :past_key_values_length] = False\n\t    expanded_mask = mask[None, None, :, :].expand(batch_size, 1, target_length, target_length + past_key_values_length)\n\t    return expanded_mask\n\tdef _expand_mask(mask: torch.Tensor, tgt_length: int) -> torch.BoolTensor:\n\t    batch_size, src_length = mask.shape\n\t    tgt_length = tgt_length if tgt_length is not None else src_length\n\t    expanded_mask = ~(mask[:, None, None, :].to(torch.bool))\n\t    return expanded_mask.expand(batch_size, 1, tgt_length, src_length)\n\tdef build_alibi_tensor(attention_mask: torch.Tensor, num_heads: int, dtype: torch.dtype) -> torch.Tensor:\n", "    batch_size, seq_length = attention_mask.shape\n\t    closest_power_of_2 = 2 ** math.floor(math.log2(num_heads))\n\t    base = torch.tensor(\n\t        2 ** (-(2 ** -(math.log2(closest_power_of_2) - 3))), device=attention_mask.device, dtype=torch.float32\n\t    )\n\t    powers = torch.arange(1, 1 + closest_power_of_2, device=attention_mask.device, dtype=torch.int32)\n\t    slopes = torch.pow(base, powers)\n\t    if closest_power_of_2 != num_heads:\n\t        extra_base = torch.tensor(\n\t            2 ** (-(2 ** -(math.log2(2 * closest_power_of_2) - 3))), device=attention_mask.device, dtype=torch.float32\n", "        )\n\t        num_remaining_heads = min(closest_power_of_2, num_heads - closest_power_of_2)\n\t        extra_powers = torch.arange(1, 1 + 2 * num_remaining_heads, 2, device=attention_mask.device, dtype=torch.int32)\n\t        slopes = torch.cat([slopes, torch.pow(extra_base, extra_powers)], dim=0)\n\t    # Note: alibi will added to the attention bias that will be applied to the query, key product of attention\n\t    # => therefore alibi will have to be of shape (batch_size, num_heads, query_length, key_length)\n\t    # => here we set (batch_size=1, num_heads=num_heads, query_length=1, key_length=max_length)\n\t    # => the query_length dimension will then be broadcasted correctly\n\t    # This is more or less identical to T5's relative position bias:\n\t    # https://github.com/huggingface/transformers/blob/f681437203baa7671de3174b0fa583c349d9d5e1/src/transformers/models/t5/modeling_t5.py#L527\n", "    arange_tensor = ((attention_mask.cumsum(dim=-1) - 1) * attention_mask)[:, None, :]\n\t    alibi = slopes[..., None].bfloat16() * arange_tensor\n\t    return alibi.reshape(batch_size * num_heads, 1, seq_length).to(dtype)\n\tdef dropout_add(x: torch.Tensor, residual: torch.Tensor, prob: float, training: bool) -> torch.Tensor:\n\t    out = F.dropout(x, p=prob, training=training)\n\t    out = residual + out\n\t    return out\n\tclass Attention7B(nn.Module):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__()\n", "        self.hidden_size = config.hidden_size\n\t        self.num_heads = config.n_head\n\t        self.head_dim = self.hidden_size // self.num_heads\n\t        self.split_size = self.hidden_size\n\t        self.hidden_dropout = config.hidden_dropout\n\t        if self.head_dim * self.num_heads != self.hidden_size:\n\t            raise ValueError(\n\t                f\"`hidden_size` must be divisible by num_heads (got `hidden_size`: {self.hidden_size} and `num_heads`:\"\n\t                f\" {self.num_heads}).\"\n\t            )\n", "        self.maybe_rotary = RotaryEmbedding(config.head_dim) if config.rotary else lambda q, k: (q, k)\n\t        # Layer-wise attention scaling\n\t        self.inv_norm_factor = 1.0 / math.sqrt(self.head_dim)\n\t        self.beta = self.inv_norm_factor\n\t        self.query_key_value = nn.Linear(\n\t            self.hidden_size,\n\t            3 * self.hidden_size if not config.multi_query else (self.hidden_size + 2 * self.head_dim),\n\t            bias=config.bias,\n\t        )\n\t        self.multi_query = config.multi_query\n", "        self.dense = nn.Linear(self.hidden_size, self.hidden_size, bias=config.bias)\n\t        self.attention_dropout = nn.Dropout(config.attention_dropout)\n\t        self.num_kv = config.n_head if not self.multi_query else 1\n\t    def _split_heads(self, fused_qkv: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n\t        \"\"\"\n\t        Split the last dimension into (num_heads, head_dim) without making any copies, results share same memory\n\t        storage as `fused_qkv`\n\t        Args:\n\t            fused_qkv (`torch.tensor`, *required*): [batch_size, seq_length, num_heads * 3 * head_dim]\n\t        Returns:\n", "            query: [batch_size, seq_length, num_heads, head_dim] key: [batch_size, seq_length, num_heads, head_dim]\n\t            value: [batch_size, seq_length, num_heads, head_dim]\n\t        \"\"\"\n\t        if not self.multi_query:\n\t            batch_size, seq_length, three_times_hidden_size = fused_qkv.shape\n\t            fused_qkv = fused_qkv.view(batch_size, seq_length, self.num_heads, 3, self.head_dim)\n\t            return fused_qkv[..., 0, :], fused_qkv[..., 1, :], fused_qkv[..., 2, :]\n\t        else:\n\t            batch_size, seq_length, three_times_hidden_size = fused_qkv.shape\n\t            fused_qkv = fused_qkv.view(batch_size, seq_length, self.num_heads + 2, self.head_dim)\n", "            return fused_qkv[..., :-2, :], fused_qkv[..., [-2], :], fused_qkv[..., [-1], :]\n\t    def _merge_heads(self, x: torch.Tensor) -> torch.Tensor:\n\t        \"\"\"\n\t        Merge heads together over the last dimenstion\n\t        Args:\n\t            x: (`torch.tensor`, *required*): [batch_size * num_heads, seq_length, head_dim]\n\t        Returns:\n\t            torch.tensor: [batch_size, seq_length, num_heads * head_dim]\n\t        \"\"\"\n\t        # What we want to achieve is:\n", "        # batch_size * num_heads, seq_length, head_dim -> batch_size, seq_length, num_heads * head_dim\n\t        batch_size_and_num_heads, seq_length, _ = x.shape\n\t        batch_size = batch_size_and_num_heads // self.num_heads\n\t        # First view to decompose the batch size\n\t        # batch_size * num_heads, seq_length, head_dim -> batch_size, num_heads, seq_length, head_dim\n\t        x = x.view(batch_size, self.num_heads, seq_length, self.head_dim)\n\t        # batch_size, num_heads, seq_length, head_dim -> batch_size, seq_length, num_heads, head_dim\n\t        x = x.permute(0, 2, 1, 3)\n\t        # batch_size, seq_length, num_heads, head_dim -> batch_size, seq_length, num_heads * head_dim\n\t        return x.reshape(batch_size, seq_length, self.num_heads * self.head_dim)\n", "    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        alibi: torch.Tensor,\n\t        attention_mask: torch.Tensor,\n\t        layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n\t        head_mask: Optional[torch.Tensor] = None,\n\t        use_cache: bool = False,\n\t        output_attentions: bool = False,\n\t    ):\n", "        fused_qkv = self.query_key_value(hidden_states)  # [batch_size, seq_length, 3 x hidden_size]\n\t        # 3 x [batch_size, seq_length, num_heads, head_dim]\n\t        (query_layer, key_layer, value_layer) = self._split_heads(fused_qkv)\n\t        batch_size, q_length, _, _ = query_layer.shape\n\t        query_layer = query_layer.transpose(1, 2).reshape(batch_size * self.num_heads, q_length, self.head_dim)\n\t        key_layer = key_layer.transpose(1, 2).reshape(\n\t            batch_size * self.num_kv,\n\t            q_length,\n\t            self.head_dim,\n\t        )\n", "        value_layer = value_layer.transpose(1, 2).reshape(batch_size * self.num_kv, q_length, self.head_dim)\n\t        query_layer, key_layer = self.maybe_rotary(query_layer, key_layer)\n\t        query_layer = query_layer.to(value_layer.dtype)\n\t        key_layer = key_layer.to(value_layer.dtype)\n\t        if layer_past is not None:\n\t            past_key, past_value = layer_past\n\t            # concatenate along seq_length dimension:\n\t            #  - key: [batch_size * self.num_heads, head_dim, kv_length]\n\t            #  - value: [batch_size * self.num_heads, kv_length, head_dim]\n\t            key_layer = torch.cat((past_key, key_layer), dim=1)\n", "            value_layer = torch.cat((past_value, value_layer), dim=1)\n\t        _, kv_length, _ = key_layer.shape\n\t        if use_cache is True:\n\t            present = (key_layer, value_layer)\n\t        else:\n\t            present = None\n\t        if alibi is None:\n\t            query_layer_ = query_layer.reshape(batch_size, self.num_heads, -1, self.head_dim)\n\t            key_layer_ = key_layer.reshape(batch_size, self.num_kv, -1, self.head_dim)\n\t            value_layer_ = value_layer.reshape(batch_size, self.num_kv, -1, self.head_dim)\n", "            if self.multi_query:\n\t                key_layer_ = key_layer_.expand(batch_size, self.num_heads, key_layer_.size(-2), key_layer_.size(-1))\n\t                value_layer_ = value_layer_.expand(batch_size, self.num_heads, value_layer_.size(-2),\n\t                                                   value_layer_.size(-1))\n\t            with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False, enable_mem_efficient=False):\n\t                attn_output = F.scaled_dot_product_attention(\n\t                    query_layer_, key_layer_, value_layer_, None, 0.0, is_causal=True\n\t                )\n\t            x = attn_output.view(batch_size, self.num_heads, q_length, self.head_dim)\n\t            x = x.permute(0, 2, 1, 3)\n", "            attn_output = x.reshape(batch_size, q_length, self.num_heads * self.head_dim)\n\t            output_tensor = self.dense(attn_output)\n\t            outputs = (output_tensor, present)\n\t            assert not output_attentions  # not supported.\n\t            return outputs\n\t        else:\n\t            attention_mask_float = (attention_mask * 1.0).masked_fill(attention_mask, -1e9).to(torch.bfloat16)\n\t            matmul_result = query_layer @ key_layer.transpose(-1, -2)\n\t            # change view to [batch_size, num_heads, q_length, kv_length]\n\t            attention_scores = matmul_result.view(batch_size, self.num_heads, q_length, kv_length)\n", "            # cast attention scores to fp32, compute scaled softmax and cast back to initial dtype - [batch_size, num_heads, q_length, kv_length]\n\t            input_dtype = attention_scores.dtype\n\t            # `float16` has a minimum value of -65504.0, whereas `bfloat16` and `float32` have a minimum value of `-3.4e+38`\n\t            if input_dtype == torch.float16 or input_dtype == torch.bfloat16:\n\t                attention_scores = attention_scores.to(torch.float32)\n\t            # attn_weights = torch.masked_fill(attention_scores, attention_mask, torch.finfo(attention_scores.dtype).min)\n\t            attention_probs = F.softmax(\n\t                (attention_scores + alibi) * self.inv_norm_factor + attention_mask_float,\n\t                dim=-1,\n\t                dtype=hidden_states.dtype,\n", "            )\n\t            # [batch_size, num_heads, q_length, kv_length]\n\t            attention_probs = self.attention_dropout(attention_probs)\n\t            if head_mask is not None:\n\t                attention_probs = attention_probs * head_mask\n\t            # change view [batch_size x num_heads, q_length, kv_length]\n\t            attention_probs_reshaped = attention_probs.view(batch_size * self.num_heads, q_length, kv_length)\n\t            # matmul: [batch_size * num_heads, q_length, head_dim]\n\t            context_layer = attention_probs_reshaped @ value_layer\n\t            # change view [batch_size, num_heads, q_length, head_dim]\n", "            context_layer = self._merge_heads(context_layer)\n\t            output_tensor = self.dense(context_layer)\n\t            outputs = (output_tensor, present)\n\t            if output_attentions:\n\t                outputs += (attention_probs,)\n\t            return outputs\n\tclass Attention40B(nn.Module):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__()\n\t        self.hidden_size = config.hidden_size\n", "        self.num_heads = config.n_head\n\t        self.head_dim = self.hidden_size // self.num_heads\n\t        self.split_size = self.hidden_size\n\t        self.hidden_dropout = config.hidden_dropout\n\t        if self.head_dim * self.num_heads != self.hidden_size:\n\t            raise ValueError(\n\t                f\"`hidden_size` must be divisible by num_heads (got `hidden_size`: {self.hidden_size} and `num_heads`:\"\n\t                f\" {self.num_heads}).\"\n\t            )\n\t        self.maybe_rotary = RotaryEmbedding(config.head_dim) if config.rotary else lambda q, k: (q, k)\n", "        # Layer-wise attention scaling\n\t        self.inv_norm_factor = 1.0 / math.sqrt(self.head_dim)\n\t        self.beta = self.inv_norm_factor\n\t        self.query_key_value = nn.Linear(\n\t            self.hidden_size,\n\t            (config.n_head_kv * 2 + config.n_head) * self.head_dim,\n\t            bias=config.bias,\n\t        )\n\t        self.dense = nn.Linear(self.hidden_size, self.hidden_size, bias=config.bias)\n\t        self.attention_dropout = nn.Dropout(config.attention_dropout)\n", "        self.num_kv = config.n_head_kv\n\t    def _split_heads(self, fused_qkv: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n\t        \"\"\"\n\t        Split the last dimension into (num_heads, head_dim), results share same memory\n\t        storage as `fused_qkv`\n\t        Args:\n\t            fused_qkv (`torch.tensor`, *required*): [batch_size, seq_length, num_heads * 3 * head_dim]\n\t        Returns:\n\t            query: [batch_size, seq_length, num_heads, head_dim]\n\t            key: [batch_size, seq_length, num_heads, head_dim]\n", "            value: [batch_size, seq_length, num_heads, head_dim]\n\t        \"\"\"\n\t        batch, seq_len, _ = fused_qkv.shape\n\t        qkv = fused_qkv.view(batch, seq_len, -1, self.num_heads // self.num_kv + 2, 64)\n\t        q = qkv[:, :, :, :-2]\n\t        k = qkv[:, :, :, [-2]]\n\t        v = qkv[:, :, :, [-1]]\n\t        k = torch.broadcast_to(k, q.shape)\n\t        v = torch.broadcast_to(v, q.shape)\n\t        q, k, v = [\n", "            rearrange(\n\t                x,\n\t                \"batch seq_len group num_heads head_dim ->\\\n\t                batch seq_len (group num_heads) head_dim\",\n\t                head_dim=self.head_dim,\n\t            )\n\t            for x in [q, k, v]\n\t        ]\n\t        return q, k, v\n\t    def _merge_heads(self, x: torch.Tensor) -> torch.Tensor:\n", "        \"\"\"\n\t        Merge heads together over the last dimenstion\n\t        Args:\n\t            x: (`torch.tensor`, *required*): [batch_size * num_heads, seq_length, head_dim]\n\t        Returns:\n\t            torch.tensor: [batch_size, seq_length, num_heads * head_dim]\n\t        \"\"\"\n\t        # What we want to achieve is:\n\t        # batch_size * num_heads, seq_length, head_dim -> batch_size, seq_length, num_heads * head_dim\n\t        batch_size_and_num_heads, seq_length, _ = x.shape\n", "        batch_size = batch_size_and_num_heads // self.num_heads\n\t        # First view to decompose the batch size\n\t        # batch_size * num_heads, seq_length, head_dim -> batch_size, num_heads, seq_length, head_dim\n\t        x = x.view(batch_size, self.num_heads, seq_length, self.head_dim)\n\t        # batch_size, num_heads, seq_length, head_dim -> batch_size, seq_length, num_heads, head_dim\n\t        x = x.permute(0, 2, 1, 3)\n\t        # batch_size, seq_length, num_heads, head_dim -> batch_size, seq_length, num_heads * head_dim\n\t        return x.reshape(batch_size, seq_length, self.num_heads * self.head_dim)\n\t    def forward(\n\t        self,\n", "        hidden_states: torch.Tensor,\n\t        alibi: torch.Tensor,\n\t        attention_mask: torch.Tensor,\n\t        layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n\t        head_mask: Optional[torch.Tensor] = None,\n\t        use_cache: bool = False,\n\t        output_attentions: bool = False,\n\t    ):\n\t        fused_qkv = self.query_key_value(hidden_states)  # [batch_size, seq_length, 3 x hidden_size]\n\t        # 3 x [batch_size, seq_length, num_heads, head_dim]\n", "        (query_layer, key_layer, value_layer) = self._split_heads(fused_qkv)\n\t        batch_size, q_length, _, _ = query_layer.shape\n\t        query_layer = query_layer.transpose(1, 2).reshape(batch_size * self.num_heads, q_length, self.head_dim)\n\t        key_layer = key_layer.transpose(1, 2).reshape(\n\t            batch_size * self.num_heads,\n\t            q_length,\n\t            self.head_dim,\n\t        )\n\t        value_layer = value_layer.transpose(1, 2).reshape(batch_size * self.num_heads, q_length, self.head_dim)\n\t        query_layer, key_layer = self.maybe_rotary(query_layer, key_layer)\n", "        query_layer = query_layer.to(value_layer.dtype)\n\t        key_layer = key_layer.to(value_layer.dtype)\n\t        if layer_past is not None:\n\t            past_key, past_value = layer_past\n\t            # concatenate along seq_length dimension:\n\t            #  - key: [batch_size * self.num_heads, head_dim, kv_length]\n\t            #  - value: [batch_size * self.num_heads, kv_length, head_dim]\n\t            key_layer = torch.cat((past_key, key_layer), dim=1)\n\t            value_layer = torch.cat((past_value, value_layer), dim=1)\n\t        _, kv_length, _ = key_layer.shape\n", "        if use_cache is True:\n\t            present = (key_layer, value_layer)\n\t        else:\n\t            present = None\n\t        if alibi is None:\n\t            query_layer_ = query_layer.reshape(batch_size, self.num_heads, -1, self.head_dim)\n\t            key_layer_ = key_layer.reshape(batch_size, self.num_heads, -1, self.head_dim)\n\t            value_layer_ = value_layer.reshape(batch_size, self.num_heads, -1, self.head_dim)\n\t            with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False, enable_mem_efficient=False):\n\t                attn_output = F.scaled_dot_product_attention(\n", "                    query_layer_, key_layer_, value_layer_, None, 0.0, is_causal=True\n\t                )\n\t            x = attn_output.view(batch_size, self.num_heads, q_length, self.head_dim)\n\t            x = x.permute(0, 2, 1, 3)\n\t            attn_output = x.reshape(batch_size, q_length, self.num_heads * self.head_dim)\n\t            output_tensor = self.dense(attn_output)\n\t            outputs = (output_tensor, present)\n\t            assert not output_attentions  # not supported.\n\t            return outputs\n\t        else:\n", "            attention_mask_float = (attention_mask * 1.0).masked_fill(attention_mask, -1e9).to(torch.bfloat16)\n\t            matmul_result = query_layer @ key_layer.transpose(-1, -2)\n\t            # change view to [batch_size, num_heads, q_length, kv_length]\n\t            attention_scores = matmul_result.view(batch_size, self.num_heads, q_length, kv_length)\n\t            # cast attention scores to fp32, compute scaled softmax and cast back to initial dtype - [batch_size, num_heads, q_length, kv_length]\n\t            input_dtype = attention_scores.dtype\n\t            # `float16` has a minimum value of -65504.0, whereas `bfloat16` and `float32` have a minimum value of `-3.4e+38`\n\t            if input_dtype == torch.float16 or input_dtype == torch.bfloat16:\n\t                attention_scores = attention_scores.to(torch.float32)\n\t            # attn_weights = torch.masked_fill(attention_scores, attention_mask, torch.finfo(attention_scores.dtype).min)\n", "            attention_probs = F.softmax(\n\t                (attention_scores + alibi.view(batch_size, self.num_heads, 1, -1)) * self.inv_norm_factor\n\t                + attention_mask_float,\n\t                dim=-1,\n\t                dtype=hidden_states.dtype,\n\t            )\n\t            # [batch_size, num_heads, q_length, kv_length]\n\t            attention_probs = self.attention_dropout(attention_probs)\n\t            if head_mask is not None:\n\t                attention_probs = attention_probs * head_mask\n", "            # change view [batch_size x num_heads, q_length, kv_length]\n\t            attention_probs_reshaped = attention_probs.view(batch_size * self.num_heads, q_length, kv_length)\n\t            # matmul: [batch_size * num_heads, q_length, head_dim]\n\t            context_layer = attention_probs_reshaped @ value_layer\n\t            # change view [batch_size, num_heads, q_length, head_dim]\n\t            context_layer = self._merge_heads(context_layer)\n\t            output_tensor = self.dense(context_layer)\n\t            outputs = (output_tensor, present)\n\t            if output_attentions:\n\t                outputs += (attention_probs,)\n", "            return outputs\n\tclass MLP(nn.Module):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__()\n\t        hidden_size = config.hidden_size\n\t        self.dense_h_to_4h = nn.Linear(hidden_size, 4 * hidden_size, bias=config.bias)\n\t        self.act = nn.GELU()\n\t        self.dense_4h_to_h = nn.Linear(4 * hidden_size, hidden_size, bias=config.bias)\n\t        self.hidden_dropout = config.hidden_dropout\n\t    def forward(self, x: torch.Tensor) -> torch.Tensor:\n", "        x = self.act(self.dense_h_to_4h(x))\n\t        x = self.dense_4h_to_h(x)\n\t        return x\n\tclass DecoderLayer40B(nn.Module):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__()\n\t        hidden_size = config.hidden_size\n\t        self.ln_attn = LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n\t        self.ln_mlp = LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n\t        self.num_heads = config.n_head\n", "        self.self_attention = Attention40B(config)\n\t        self.mlp = MLP(config)\n\t        self.apply_residual_connection_post_layernorm = config.apply_residual_connection_post_layernorm\n\t        self.hidden_dropout = config.hidden_dropout\n\t        self.config = config\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        alibi: torch.Tensor,\n\t        attention_mask: torch.Tensor,\n", "        layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n\t        head_mask: Optional[torch.Tensor] = None,\n\t        use_cache: bool = False,\n\t        output_attentions: bool = False,\n\t    ):\n\t        ln_attn = self.ln_attn(hidden_states)\n\t        ln_mlp = self.ln_mlp(hidden_states)\n\t        residual = hidden_states\n\t        # Self attention.\n\t        attn_outputs = self.self_attention(\n", "            ln_attn,\n\t            layer_past=layer_past,\n\t            attention_mask=attention_mask,\n\t            alibi=alibi,\n\t            head_mask=head_mask,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t        )\n\t        attention_output = attn_outputs[0]\n\t        outputs = attn_outputs[1:]\n", "        # MLP.\n\t        mlp_output = self.mlp(ln_mlp)\n\t        output = dropout_add(\n\t            mlp_output + attention_output, residual, self.config.hidden_dropout, training=self.training\n\t        )\n\t        if use_cache:\n\t            outputs = (output,) + outputs\n\t        else:\n\t            outputs = (output,) + outputs[1:]\n\t        return outputs  # hidden_states, present, attentions\n", "class DecoderLayer7B(nn.Module):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__()\n\t        hidden_size = config.hidden_size\n\t        self.input_layernorm = LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n\t        self.num_heads = config.n_head\n\t        self.self_attention = Attention7B(config)\n\t        if not config.parallel_attn:\n\t            # unused if parallel attn\n\t            self.post_attention_layernorm = LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n", "        self.mlp = MLP(config)\n\t        self.apply_residual_connection_post_layernorm = config.apply_residual_connection_post_layernorm\n\t        self.hidden_dropout = config.hidden_dropout\n\t        self.config = config\n\t    def forward(\n\t        self,\n\t        hidden_states: torch.Tensor,\n\t        alibi: torch.Tensor,\n\t        attention_mask: torch.Tensor,\n\t        layer_past: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,\n", "        head_mask: Optional[torch.Tensor] = None,\n\t        use_cache: bool = False,\n\t        output_attentions: bool = False,\n\t    ):\n\t        layernorm_output = self.input_layernorm(hidden_states)\n\t        residual = hidden_states\n\t        # Self attention.\n\t        attn_outputs = self.self_attention(\n\t            layernorm_output,\n\t            layer_past=layer_past,\n", "            attention_mask=attention_mask,\n\t            alibi=alibi,\n\t            head_mask=head_mask,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t        )\n\t        attention_output = attn_outputs[0]\n\t        if not self.config.parallel_attn:\n\t            residual = dropout_add(attention_output, residual, self.config.attention_dropout, training=self.training)\n\t            layernorm_output = self.post_attention_layernorm(residual)\n", "        outputs = attn_outputs[1:]\n\t        # MLP.\n\t        mlp_output = self.mlp(layernorm_output)\n\t        if self.config.parallel_attn:\n\t            mlp_output += attention_output\n\t        output = dropout_add(mlp_output, residual, self.config.hidden_dropout, training=self.training)\n\t        if use_cache:\n\t            outputs = (output,) + outputs\n\t        else:\n\t            outputs = (output,) + outputs[1:]\n", "        return outputs  # hidden_states, present, attentions\n\tclass RWPreTrainedModel(PreTrainedModel):\n\t    _keys_to_ignore_on_load_missing = [r\"h.*.self_attention.scale_mask_softmax.causal_mask\", r\"lm_head.weight\"]\n\t    \"\"\"\n\t    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n\t    models.\n\t    \"\"\"\n\t    config_class = RWConfig\n\t    base_model_prefix = \"transformer\"\n\t    supports_gradient_checkpointing = True\n", "    _no_split_modules = [\"DecoderLayer\"]\n\t    def __init__(self, *inputs, **kwargs):\n\t        super().__init__(*inputs, **kwargs)\n\t    def _init_weights(self, module: nn.Module):\n\t        \"\"\"Initialize the weights.\"\"\"\n\t        if isinstance(module, nn.Linear):\n\t            # Slightly different from the TF version which uses truncated_normal for initialization\n\t            # cf https://github.com/pytorch/pytorch/pull/5617\n\t            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n\t            if module.bias is not None:\n", "                module.bias.data.zero_()\n\t        elif isinstance(module, nn.Embedding):\n\t            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n\t            if module.padding_idx is not None:\n\t                module.weight.data[module.padding_idx].zero_()\n\t        elif isinstance(module, LayerNorm):\n\t            module.bias.data.zero_()\n\t            module.weight.data.fill_(1.0)\n\t    def _set_gradient_checkpointing(self, module: nn.Module, value: bool = False):\n\t        if isinstance(module, RWModel):\n", "            module.gradient_checkpointing = value\n\t    @staticmethod\n\t    def _convert_to_standard_cache(\n\t            past_key_value: Tuple[Tuple[torch.Tensor, torch.Tensor]], batch_size: int\n\t    ) -> Tuple[Tuple[torch.Tensor, torch.Tensor]]:\n\t        \"\"\"\n\t        Standardizes the format of the cache so as to match most implementations, i.e. to tuple(tuple([batch_size,\n\t        num_heads, ...]))\n\t        \"\"\"\n\t        batch_size_times_num_heads, head_dim, seq_length = past_key_value[0][0].shape\n", "        num_heads = batch_size_times_num_heads // batch_size\n\t        # key: [batch_size * num_heads, head_dim, seq_length] -> [batch_size, num_heads, head_dim, seq_length]\n\t        # value: [batch_size * num_heads, seq_length, head_dim] -> [batch_size, num_heads, seq_length, head_dim]\n\t        return tuple(\n\t            (\n\t                layer_past[0].view(batch_size, num_heads, head_dim, seq_length),\n\t                layer_past[1].view(batch_size, num_heads, seq_length, head_dim),\n\t            )\n\t            for layer_past in past_key_value\n\t        )\n", "    @staticmethod\n\t    def _convert_to_rw_cache(\n\t            past_key_value: Tuple[Tuple[torch.Tensor, torch.Tensor]]\n\t    ) -> Tuple[Tuple[torch.Tensor, torch.Tensor]]:\n\t        batch_size, num_heads, head_dim, seq_length = past_key_value[0][0].shape\n\t        batch_size_times_num_heads = batch_size * num_heads\n\t        # key:  [batch_size, num_heads, head_dim, seq_length] -> [batch_size * num_heads, head_dim, seq_length]\n\t        # value: [batch_size, num_heads, seq_length, head_dim] -> [batch_size * num_heads, seq_length, head_dim]\n\t        return tuple(\n\t            (\n", "                layer_past[0].view(batch_size_times_num_heads, head_dim, seq_length),\n\t                layer_past[1].view(batch_size_times_num_heads, seq_length, head_dim),\n\t            )\n\t            for layer_past in past_key_value\n\t        )\n\tclass RWModel(RWPreTrainedModel):\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__(config)\n\t        self.embed_dim = config.hidden_size\n\t        self.num_heads = config.n_head\n", "        self.alibi = config.alibi\n\t        # Embedding + LN Embedding\n\t        self.word_embeddings = nn.Embedding(config.vocab_size, self.embed_dim)\n\t        DecoderLayer = get_decoder_layer(self.num_heads)\n\t        # Transformer blocks\n\t        self.h = nn.ModuleList([\n\t            DecoderLayer(config) for _ in range(config.num_hidden_layers)\n\t        ])\n\t        # Final Layer Norm\n\t        self.ln_f = LayerNorm(self.embed_dim, eps=config.layer_norm_epsilon)\n", "        self.gradient_checkpointing = False\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_input_embeddings(self):\n\t        return self.word_embeddings\n\t    def _prepare_attn_mask(\n\t            self, attention_mask: torch.Tensor, input_shape: Tuple[int, int], past_key_values_length: int\n\t    ) -> torch.BoolTensor:\n\t        # create causal mask\n\t        # [batch_size, seq_length] -> [batch_size, 1, tgt_length, src_length]\n", "        combined_attention_mask = None\n\t        device = attention_mask.device\n\t        _, src_length = input_shape\n\t        if src_length > 1:\n\t            combined_attention_mask = _make_causal_mask(\n\t                input_shape, device=device, past_key_values_length=past_key_values_length\n\t            )\n\t        # [batch_size, seq_length] -> [batch_size, 1, tgt_length, src_length]\n\t        expanded_attn_mask = _expand_mask(attention_mask, tgt_length=src_length)\n\t        combined_attention_mask = (\n", "            expanded_attn_mask if combined_attention_mask is None else expanded_attn_mask | combined_attention_mask\n\t        )\n\t        return combined_attention_mask\n\t    def set_input_embeddings(self, new_embeddings: torch.Tensor):\n\t        self.word_embeddings = new_embeddings\n\t    def forward(\n\t            self,\n\t            input_ids: Optional[torch.LongTensor] = None,\n\t            past_key_values: Optional[Tuple[Tuple[torch.Tensor, torch.Tensor], ...]] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n", "            head_mask: Optional[torch.LongTensor] = None,\n\t            inputs_embeds: Optional[torch.LongTensor] = None,\n\t            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n\t            return_dict: Optional[bool] = None,\n\t            **deprecated_arguments,\n\t    ) -> Union[Tuple[torch.Tensor, ...], BaseModelOutputWithPastAndCrossAttentions]:\n\t        if deprecated_arguments.pop(\"position_ids\", False) is not False:\n\t            # `position_ids` could have been `torch.Tensor` or `None` so defaulting pop to `False` allows to detect if users were passing explicitly `None`\n", "            warnings.warn(\n\t                \"`position_ids` have no functionality in BLOOM and will be removed in v5.0.0. You can safely ignore\"\n\t                \" passing `position_ids`.\",\n\t                FutureWarning,\n\t            )\n\t        if len(deprecated_arguments) > 0:\n\t            raise ValueError(f\"Got unexpected arguments: {deprecated_arguments}\")\n\t        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n\t        output_hidden_states = (\n\t            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n", "        )\n\t        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        if input_ids is not None and inputs_embeds is not None:\n\t            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n\t        elif input_ids is not None:\n\t            batch_size, seq_length = input_ids.shape\n\t        elif inputs_embeds is not None:\n\t            batch_size, seq_length, _ = inputs_embeds.shape\n\t        else:\n", "            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\t        if past_key_values is None:\n\t            past_key_values = tuple([None] * len(self.h))\n\t        # Prepare head mask if needed\n\t        # 1.0 in head_mask indicate we keep the head\n\t        # attention_probs has shape batch_size x num_heads x N x N\n\t        # head_mask has shape n_layer x batch x num_heads x N x N\n\t        head_mask = self.get_head_mask(head_mask, self.config.n_layer)\n\t        if inputs_embeds is None:\n\t            inputs_embeds = self.word_embeddings(input_ids)\n", "        hidden_states = inputs_embeds\n\t        presents = () if use_cache else None\n\t        all_self_attentions = () if output_attentions else None\n\t        all_hidden_states = () if output_hidden_states else None\n\t        # Compute alibi tensor: check build_alibi_tensor documentation\n\t        seq_length_with_past = seq_length\n\t        past_key_values_length = 0\n\t        if past_key_values[0] is not None:\n\t            past_key_values_length = past_key_values[0][0].shape[2]\n\t            seq_length_with_past = seq_length_with_past + past_key_values_length\n", "        if attention_mask is None:\n\t            attention_mask = torch.ones((batch_size, seq_length_with_past), device=hidden_states.device)\n\t        else:\n\t            attention_mask = attention_mask.to(hidden_states.device)\n\t        if self.alibi:\n\t            alibi = build_alibi_tensor(attention_mask, self.num_heads, dtype=hidden_states.dtype)\n\t        else:\n\t            alibi = None\n\t        causal_mask = self._prepare_attn_mask(\n\t            attention_mask,\n", "            input_shape=(batch_size, seq_length),\n\t            past_key_values_length=past_key_values_length,\n\t        )\n\t        for i, (block, layer_past) in enumerate(zip(self.h, past_key_values)):\n\t            if output_hidden_states:\n\t                all_hidden_states = all_hidden_states + (hidden_states,)\n\t            if self.gradient_checkpointing and self.training:\n\t                if use_cache:\n\t                    logger.warning(\n\t                        \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n", "                    )\n\t                    use_cache = False\n\t                def create_custom_forward(module):\n\t                    def custom_forward(*inputs):\n\t                        # None for past_key_value\n\t                        return module(*inputs, use_cache=use_cache, output_attentions=output_attentions)\n\t                    return custom_forward\n\t                outputs = torch.utils.checkpoint.checkpoint(\n\t                    create_custom_forward(block),\n\t                    hidden_states,\n", "                    alibi,\n\t                    causal_mask,\n\t                    head_mask[i],\n\t                )\n\t            else:\n\t                outputs = block(\n\t                    hidden_states,\n\t                    layer_past=layer_past,\n\t                    attention_mask=causal_mask,\n\t                    head_mask=head_mask[i],\n", "                    use_cache=use_cache,\n\t                    output_attentions=output_attentions,\n\t                    alibi=alibi,\n\t                )\n\t            hidden_states = outputs[0]\n\t            if use_cache is True:\n\t                presents = presents + (outputs[1],)\n\t            if output_attentions:\n\t                all_self_attentions = all_self_attentions + (outputs[2 if use_cache else 1],)\n\t        # Add last hidden state\n", "        hidden_states = self.ln_f(hidden_states)\n\t        if output_hidden_states:\n\t            all_hidden_states = all_hidden_states + (hidden_states,)\n\t        if not return_dict:\n\t            return tuple(v for v in [hidden_states, presents, all_hidden_states, all_self_attentions] if v is not None)\n\t        return BaseModelOutputWithPastAndCrossAttentions(\n\t            last_hidden_state=hidden_states,\n\t            past_key_values=presents,\n\t            hidden_states=all_hidden_states,\n\t            attentions=all_self_attentions,\n", "        )\n\tclass RWForCausalLM(RWPreTrainedModel):\n\t    _keys_to_ignore_on_load_missing = [r\"h.*.self_attention.scale_mask_softmax.causal_mask\", r\"lm_head.weight\"]\n\t    def __init__(self, config: RWConfig):\n\t        super().__init__(config)\n\t        self.transformer = RWModel(config)\n\t        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\t        # Initialize weights and apply final processing\n\t        self.post_init()\n\t    def get_output_embeddings(self):\n", "        return self.lm_head\n\t    def set_output_embeddings(self, new_embeddings: torch.Tensor):\n\t        self.lm_head = new_embeddings\n\t    def prepare_inputs_for_generation(\n\t            self,\n\t            input_ids: torch.LongTensor,\n\t            past: Optional[torch.Tensor] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            **kwargs,\n\t    ) -> dict:\n", "        # only last token for input_ids if past is not None\n\t        if past:\n\t            input_ids = input_ids[:, -1].unsqueeze(-1)\n\t            # the cache may be in the stardard format (e.g. in contrastive search), convert to our's format if needed\n\t            if past[0][0].shape[0] == input_ids.shape[0]:\n\t                past = self._convert_to_rw_cache(past)\n\t        return {\n\t            \"input_ids\": input_ids,\n\t            \"past_key_values\": past,\n\t            \"use_cache\": kwargs.get(\"use_cache\"),\n", "            \"attention_mask\": attention_mask,\n\t        }\n\t    def forward(\n\t            self,\n\t            input_ids: Optional[torch.LongTensor] = None,\n\t            past_key_values: Optional[Tuple[Tuple[torch.Tensor, torch.Tensor], ...]] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            head_mask: Optional[torch.Tensor] = None,\n\t            inputs_embeds: Optional[torch.Tensor] = None,\n\t            labels: Optional[torch.Tensor] = None,\n", "            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n\t            return_dict: Optional[bool] = None,\n\t            **deprecated_arguments,\n\t    ) -> Union[Tuple[torch.Tensor], CausalLMOutputWithCrossAttentions]:\n\t        r\"\"\"\n\t        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n\t            Labels for language modeling. Note that the labels **are shifted** inside the model, i.e. you can set\n\t            `labels = input_ids` Indices are selected in `[-100, 0, ..., config.vocab_size]` All labels set to `-100`\n", "            are ignored (masked), the loss is only computed for labels in `[0, ..., config.vocab_size]`\n\t        \"\"\"\n\t        if deprecated_arguments.pop(\"position_ids\", False) is not False:\n\t            # `position_ids` could have been `torch.Tensor` or `None` so defaulting pop to `False` allows to detect if users were passing explicitly `None`\n\t            warnings.warn(\n\t                \"`position_ids` have no functionality in BLOOM and will be removed in v5.0.0. You can safely ignore\"\n\t                \" passing `position_ids`.\",\n\t                FutureWarning,\n\t            )\n\t        if len(deprecated_arguments) > 0:\n", "            raise ValueError(f\"Got unexpected arguments: {deprecated_arguments}\")\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        transformer_outputs = self.transformer(\n\t            input_ids,\n\t            past_key_values=past_key_values,\n\t            attention_mask=attention_mask,\n\t            head_mask=head_mask,\n\t            inputs_embeds=inputs_embeds,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n", "            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n\t        hidden_states = transformer_outputs[0]\n\t        lm_logits = self.lm_head(hidden_states)\n\t        loss = None\n\t        if labels is not None:\n\t            # Shift so that tokens < n predict n\n\t            shift_logits = lm_logits[..., :-1, :].contiguous()\n\t            shift_labels = labels[..., 1:].contiguous()\n", "            batch_size, seq_length, vocab_size = shift_logits.shape\n\t            # Flatten the tokens\n\t            loss_fct = CrossEntropyLoss()\n\t            loss = loss_fct(\n\t                shift_logits.view(batch_size * seq_length, vocab_size), shift_labels.view(batch_size * seq_length)\n\t            )\n\t        if not return_dict:\n\t            output = (lm_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n\t        return CausalLMOutputWithCrossAttentions(\n", "            loss=loss,\n\t            logits=lm_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n\t            hidden_states=transformer_outputs.hidden_states,\n\t            attentions=transformer_outputs.attentions,\n\t        )\n\t    def _reorder_cache(\n\t            self, past: Tuple[Tuple[torch.Tensor, torch.Tensor], ...], beam_idx: torch.LongTensor\n\t    ) -> Tuple[Tuple[torch.Tensor, torch.Tensor], ...]:\n\t        \"\"\"\n", "        This function is used to re-order the `past_key_values` cache if [`~PreTrainedModel.beam_search`] or\n\t        [`~PreTrainedModel.beam_sample`] is called. This is required to match `past_key_values` with the correct\n\t        beam_idx at every generation step.\n\t        Output shares the same memory storage as `past`.\n\t        \"\"\"\n\t        standardized_past = self._convert_to_standard_cache(past, batch_size=len(beam_idx))\n\t        # Get a copy of `beam_idx` on all the devices where we need those indices.\n\t        device_to_beam_idx = {\n\t            past_state.device: beam_idx.to(past_state.device) for layer_past in past for past_state in layer_past\n\t        }\n", "        reordered_past = tuple(\n\t            (\n\t                layer_past[0].index_select(0, device_to_beam_idx[layer_past[0].device]),\n\t                layer_past[1].index_select(0, device_to_beam_idx[layer_past[0].device]),\n\t            )\n\t            for layer_past in standardized_past\n\t        )\n\t        return self._convert_to_rw_cache(reordered_past)\n\tdef load_model(llm_config, checkpoint, half=False, backend='triton'):\n\t    config = RWConfig.from_pretrained(llm_config.hf_config_name)\n", "    config.max_seq_len = llm_config.max_seq_len\n\t    assert config.alibi is False\n\t    assert config.bias is False\n\t    if half:\n\t        torch.set_default_dtype(torch.half)\n\t    if (llm_config.bits == 4) and (llm_config.groupsize is not None):\n\t        with accelerate.init_empty_weights():\n\t            ql = importlib.import_module(f'falcontune.backend.{backend}.quantlinear')\n\t            model = RWForCausalLM(config)\n\t            model = model.eval()\n", "            layers = find_layers(model)\n\t            del layers['lm_head']\n\t            replace_4bit_linear(\n\t                model,\n\t                layers,\n\t                llm_config.bits,\n\t                llm_config.groupsize,\n\t                quantlinear_class=ql.QuantLinear\n\t            )\n\t        model = accelerate.load_checkpoint_and_dispatch(\n", "            model=model, checkpoint=checkpoint, device_map=llm_config.device_map,\n\t            no_split_module_classes=[\"DecoderLayer\"]\n\t        )\n\t        model.loaded_in_4bit = True\n\t    elif llm_config.bits == 8:\n\t        model = RWForCausalLM.from_pretrained(\n\t            checkpoint,\n\t            config=config,\n\t            load_in_8bit=True,\n\t            device_map=llm_config.device_map\n", "        )\n\t        model.loaded_in_8bit = True\n\t    else:\n\t        model = RWForCausalLM.from_pretrained(\n\t            checkpoint,\n\t            config=config,\n\t            torch_dtype=torch.bfloat16,\n\t            device_map=llm_config.device_map\n\t        )\n\t        model.loaded_in_bf16 = True\n", "    model.seqlen = llm_config.max_seq_len\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(llm_config.hf_tokenizer_config)\n\t    tokenizer.truncation_side = 'left'\n\t    tokenizer.bos_token_id = None\n\t    tokenizer.eos_token_id = tokenizer.vocab[\"<|endoftext|>\"]\n\t    tokenizer.pad_token_id = tokenizer.vocab[\"<|endoftext|>\"]\n\t    return model, tokenizer\n\tdef load_model_and_offload(llm_config, checkpoint, half=False, backend='triton', lora_path=None, max_memory=None):\n\t    if max_memory is None:\n\t        max_memory = {0: '13Gib', 'cpu': '25Gib'}\n", "    config = RWConfig.from_pretrained(llm_config.hf_config_name)\n\t    config.max_seq_len = llm_config.max_seq_len\n\t    assert config.alibi is False\n\t    if half:\n\t        torch.set_default_dtype(torch.half)\n\t    with accelerate.init_empty_weights():\n\t        ql = importlib.import_module(f'falcontune.backend.{backend}.quantlinear')\n\t        model = RWForCausalLM(config)\n\t        model = model.eval()\n\t        layers = find_layers(model)\n", "        for name in ['lm_head']:\n\t            if name in layers:\n\t                del layers[name]\n\t        replace_4bit_linear(\n\t            model,\n\t            layers,\n\t            llm_config.bits,\n\t            llm_config.groupsize,\n\t            quantlinear_class=ql.QuantLinear\n\t        )\n", "    accelerate.load_checkpoint_in_model(model, checkpoint=checkpoint, device_map={'': 'cpu'})\n\t    model.loaded_in_4bit = True\n\t    if lora_path is not None:\n\t        model = PeftModel.from_pretrained(\n\t            model, lora_path,\n\t            device_map={'': 'cpu'},\n\t            torch_dtype=torch.float32,\n\t            is_trainable=True)\n\t        logger.info('{} Lora Applied.'.format(lora_path))\n\t    model.seqlen = llm_config.max_seq_len\n", "    for n, m in model.named_modules():\n\t        if isinstance(m, ql.QuantLinear) or isinstance(m, Linear4bitLt):\n\t            m.scales = m.scales.half()\n\t            m.bias = m.bias.half()\n\t    device_map = accelerate.infer_auto_device_map(\n\t        model, max_memory=max_memory,\n\t        no_split_module_classes=[\"DecoderLayer\"])\n\t    model = accelerate.dispatch_model(\n\t        model, device_map=device_map,\n\t        offload_buffers=True, main_device=0)\n", "    torch.cuda.empty_cache()\n\t    logger.info('Total {:.2f} Gib VRAM used.'.format(torch.cuda.memory_allocated() / 1024 / 1024))\n\t    tokenizer = transformers.AutoTokenizer.from_pretrained(llm_config.hf_config_name)\n\t    tokenizer.truncation_side = 'left'\n\t    tokenizer.bos_token_id = None\n\t    tokenizer.eos_token_id = tokenizer.vocab[\"<|endoftext|>\"]\n\t    tokenizer.pad_token_id = tokenizer.vocab[\"<|endoftext|>\"]\n\t    return model, tokenizer\n"]}
{"filename": "falcontune/model/falcon/config.py", "chunked_list": ["class FALCON7B4bitConfig:\n\t    name = 'falcon-7b-instruct-4bit'\n\t    hf_config_name = \"TheBloke/falcon-7b-instruct-GPTQ\"\n\t    hf_tokenizer_config = \"TheBloke/falcon-7b-instruct-GPTQ\"\n\t    bits = 4\n\t    groupsize = 64\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON40B4bitConfig:\n\t    name = 'falcon-40b-instruct-4bit'\n", "    hf_config_name = \"TheBloke/falcon-40b-instruct-GPTQ\"\n\t    hf_tokenizer_config = \"TheBloke/falcon-40b-instruct-GPTQ\"\n\t    bits = 4\n\t    groupsize = -1\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON7B8bitConfig:\n\t    name = 'falcon-7b'\n\t    hf_config_name = \"tiiuae/falcon-7b\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-7b\"\n", "    bits = 8\n\t    groupsize = None\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON7BInstruct8bitConfig:\n\t    name = 'falcon-7b-instruct'\n\t    hf_config_name = \"tiiuae/falcon-7b-instruct\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-7b-instruct\"\n\t    bits = 8\n\t    groupsize = None\n", "    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON7BRW8bitConfig:\n\t    name = 'falcon-rw-7b'\n\t    hf_config_name = \"tiiuae/falcon-rw-7b\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-rw-7b\"\n\t    bits = 8\n\t    groupsize = None\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n", "class FALCON1BRW8bitConfig:\n\t    name = 'falcon-rw-1b'\n\t    hf_config_name = \"tiiuae/falcon-rw-1b\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-rw-1b\"\n\t    bits = 8\n\t    groupsize = None\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON40B8bitConfig:\n\t    name = 'falcon-40b'\n", "    hf_config_name = \"tiiuae/falcon-40b\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-40b\"\n\t    bits = 8\n\t    groupsize = None\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n\tclass FALCON40BInstruct8bitConfig:\n\t    name = 'falcon-40b-instruct'\n\t    hf_config_name = \"tiiuae/falcon-40b-instruct\"\n\t    hf_tokenizer_config = \"tiiuae/falcon-7b-instruct\"\n", "    bits = 8\n\t    groupsize = None\n\t    max_seq_len = 2048\n\t    device_map = \"auto\"\n"]}
{"filename": "falcontune/model/falcon/__init__.py", "chunked_list": []}
