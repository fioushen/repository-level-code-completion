{"filename": "setup.py", "chunked_list": ["import setuptools\n\tRELEASE_VERSION = 'v0.2.0'\n\twith open('requirements.txt', 'r') as fh:\n\t    requirements = fh.read().splitlines()\n\twith open(\"README.md\", \"r\") as fh:\n\t    long_description = fh.read()\n\tsetuptools.setup(\n\t    name=\"autocontrastive-gen\",\n\t    version=f\"{RELEASE_VERSION}\".replace('v', ''),\n\t    author=\"IBM Research\",\n", "    author_email=\"ariel.gera1@ibm.com\",\n\t    url=\"https://github.com/IBM/auto-contrastive-generation\",\n\t    description=\"Auto-Contrastive Text Generation\",\n\t    long_description=long_description,\n\t    long_description_content_type=\"text/markdown\",\n\t    install_requires=requirements,\n\t    packages=setuptools.find_packages(),\n\t    license='Apache License 2.0',\n\t    python_requires='>=3.9',\n\t    classifiers=[\n", "        \"Programming Language :: Python :: 3\",\n\t        \"License :: OSI Approved :: Apache Software License\",\n\t        \"Operating System :: OS Independent\",\n\t        \"Topic :: Scientific/Engineering\",\n\t    ],\n\t    package_data={\"\": [\"LICENSE\", \"requirements.txt\"]},\n\t    include_package_data=True\n\t)\n"]}
{"filename": "autocontrastive_gen/run_inference.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport ast\n\timport json\n\timport os\n\timport random\n\tfrom argparse import ArgumentParser\n\timport pandas as pd\n", "from tqdm.auto import tqdm\n\tfrom autocontrastive_gen.data_processing.dataset_catalog import DatasetsCatalog\n\tfrom autocontrastive_gen.evaluation.auto_metrics import calc_metrics\n\tfrom autocontrastive_gen.modeling.configuration import MultiExitConfiguration\n\tfrom autocontrastive_gen.utils import get_model, get_tokenizer, device\n\tdef prepare_texts(dataset, num_samples, dataset_split):\n\t    dataset = getattr(DatasetsCatalog, dataset)\n\t    dataset_dict = dataset.load()\n\t    texts = dataset_dict[dataset_split]['source_text']\n\t    is_seq2seq_task = dataset.is_seq2seq_task()\n", "    if is_seq2seq_task:\n\t        targets = dataset_dict[dataset_split]['target_text']\n\t    else:\n\t        targets = ['dummy_target'] * len(texts)\n\t    if num_samples is not None and num_samples < len(texts):\n\t        sample_ids = random.Random(0).sample(list(range(len(texts))), k=num_samples)\n\t        texts = [texts[i] for i in sample_ids]\n\t        targets = [targets[i] for i in sample_ids]\n\t    return is_seq2seq_task, texts, targets\n\tdef run(args):\n", "    is_seq2seq_task, texts, targets = prepare_texts(args.dataset, args.number_of_samples, args.dataset_split)\n\t    lm_config = MultiExitConfiguration(\n\t        use_original_head=args.use_original_head,\n\t        output_layer_index=args.output_layer_index,\n\t        contrast_layer_indices=args.contrast_layer_indices,\n\t    )\n\t    tokenizer = get_tokenizer(args.model_name_or_path, max_seq_length=args.max_seq_length)\n\t    model = get_model(args.model_name_or_path, lm_config, args.vanilla_model)\n\t    modus = 'top_k' if args.use_top_k else ('top_p' if args.use_top_p else f'beam_{args.beam_search}')\n\t    desc = f'{args.model_name_or_path.replace(\"/\", \"_\")}_{lm_config.get_description()}_{modus}_{args.additional_desc}'\n", "    all_results = []\n\t    print(f'generating texts from {len(texts)} prompts')\n\t    for i, (text, target) in tqdm(enumerate(zip(texts, targets)), total=len(texts)):\n\t        if not is_seq2seq_task:\n\t            prompt_text = ' '.join(text.split()[:args.num_prompt_tokens])\n\t        else:\n\t            prompt_text = text\n\t        prompt = tokenizer(prompt_text, return_tensors='pt', truncation=True).input_ids.to(device)\n\t        generated_ids = model.generate(prompt,\n\t                                       pad_token_id=tokenizer.pad_token_id, bos_token_id=tokenizer.bos_token_id,\n", "                                       eos_token_id=tokenizer.eos_token_id,\n\t                                       max_new_tokens=args.max_new_tokens,\n\t                                       num_beams=args.beam_search,\n\t                                       do_sample=args.use_top_k or args.use_top_p,\n\t                                       top_p=0.95 if args.use_top_p else 1.0,\n\t                                       top_k=50 if args.use_top_k else 0.0,\n\t                                       output_hidden_states=True)\n\t        if not model.config.is_encoder_decoder:  # keep only the newly-generated tokens\n\t            generated_ids = generated_ids[:, prompt.shape[1]:]\n\t        generated_text = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]\n", "        example_metrics = calc_metrics(prompt_text, generated_text)\n\t        all_results.append({'text_id': i, 'model_description': desc, 'prompt': prompt_text,\n\t                            'generated_text': generated_text, **example_metrics})\n\t    if args.output_dir:\n\t        output_dir = os.path.join(args.output_dir, desc)\n\t    else:\n\t        output_dir = os.path.join('output', desc)\n\t    os.makedirs(output_dir, exist_ok=True)\n\t    df = pd.DataFrame(all_results)\n\t    df.to_csv(os.path.join(output_dir, f'{desc}_{args.dataset}_output.csv'))\n", "    print(f'csv with generation results written to {os.path.abspath(output_dir)}')\n\t    metrics = {'diversity': df['diversity'].mean(), 'coherence': df['coherence'].mean(),\n\t               'num_examples': len(df)}\n\t    print(metrics)\n\t    with open(os.path.join(output_dir, f'metrics_{args.dataset}{args.additional_desc}.json'), 'w') as f:\n\t        f.write(json.dumps(metrics))\n\t    return metrics\n\tif __name__ == '__main__':\n\t    parser = ArgumentParser()\n\t    parser.add_argument('--model_name_or_path', type=str, required=True)\n", "    parser.add_argument('--dataset', type=str, required=True, choices=DatasetsCatalog.all_datasets())\n\t    parser.add_argument('--max_seq_length', type=int, default=512)\n\t    parser.add_argument('--use_original_head', type=ast.literal_eval, required=True)\n\t    parser.add_argument('--output_layer_index', type=int, default=24)\n\t    parser.add_argument('--contrast_layer_indices', type=str, default=None)\n\t    parser.add_argument('--vanilla-model', action='store_true', default=False)\n\t    parser.add_argument('--max_new_tokens', type=int, default=100)\n\t    parser.add_argument('--num_prompt_tokens', type=int, default=32)                                               \n\t    parser.add_argument('--beam_search', type=int, default=1)\n\t    parser.add_argument('--use_top_k', type=ast.literal_eval, default=False)\n", "    parser.add_argument('--use_top_p', type=ast.literal_eval, default=False)\n\t    parser.add_argument('--dataset_split', type=str, default='validation')\n\t    parser.add_argument('--number_of_samples', type=int, default=None)\n\t    parser.add_argument('--additional_desc', type=str, default='')\n\t    parser.add_argument('--output_dir', '-o', type=str, required=False)\n\t    args = parser.parse_args()\n\t    run(args)\n"]}
{"filename": "autocontrastive_gen/contrast_calculation.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport torch\n\tdef expand_tensor(t, desired_shape):\n\t    while len(t.shape) < len(desired_shape):\n\t        t = t.unsqueeze(-1)\n\t    t = t.expand(desired_shape)\n\t    return t\n", "def calculate_contrasted_logits(upper_layer_logits, lower_layer_logits, minimum_candidates=1, alpha=0.1):\n\t    from autocontrastive_gen.utils import device\n\t    lm_logits_upper = upper_layer_logits.softmax(dim=-1)\n\t    lm_logits_lower = lower_layer_logits.softmax(dim=-1)\n\t    # we set a probability threshold relative to the top candidate probability\n\t    plausible_token_probability_threshold = \\\n\t        lm_logits_upper.max(-1).values.squeeze(-1) * torch.tensor(alpha)\n\t    # when minimum_candidates=1, min_threshold will simply equal the plausible_token_probability_threshold\n\t    min_threshold = torch.min(plausible_token_probability_threshold,\n\t                              lm_logits_upper.sort(descending=True).values.squeeze()[..., minimum_candidates - 1])\n", "    zero = torch.tensor(0.0).to(device)\n\t    minus_inf = torch.tensor(-torch.inf).to(device)\n\t    # for tokens above the threshold, calculate softmax of contrast score between lm_logits_upper and lm_logits_lower\n\t    min_threshold_expanded = expand_tensor(min_threshold, lm_logits_upper.shape)\n\t    contrasted_logits = torch.where(lm_logits_upper >= min_threshold_expanded,\n\t                                    torch.log(lm_logits_upper) - torch.log(lm_logits_lower),\n\t                                    lm_logits_upper)\n\t    softmax_for_included_new = torch.where(lm_logits_upper >= min_threshold_expanded,\n\t                                           contrasted_logits, minus_inf).softmax(-1)\n\t    # calculate the total probability mass of tokens above the threshold\n", "    sum_for_included_orig = torch.where(lm_logits_upper >= min_threshold_expanded,\n\t                                        lm_logits_upper, zero).sum(-1)\n\t    # redistribute this probability mass using the contrastive softmax scores\n\t    sum_for_included_orig_expanded = expand_tensor(sum_for_included_orig, softmax_for_included_new.shape)\n\t    adjusted_contrasted_logits = softmax_for_included_new * sum_for_included_orig_expanded\n\t    contrasted_logits = torch.where(lm_logits_upper >= min_threshold_expanded,\n\t                                    adjusted_contrasted_logits, lm_logits_upper)\n\t    contrasted_logits = torch.log(contrasted_logits)\n\t    return contrasted_logits\n"]}
{"filename": "autocontrastive_gen/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/utils.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport torch\n\tfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM, AutoModelForCausalLM, AutoConfig, T5Config\n\tfrom autocontrastive_gen.modeling.auto_model import AutoMultiExitModel\n\tdevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\tdef get_model(model_name_or_path, multi_exit_config, vanilla_model: bool = False):\n\t    if vanilla_model:\n", "        if type(AutoConfig.from_pretrained(model_name_or_path)) == T5Config:\n\t            model = AutoModelForSeq2SeqLM.from_pretrained(model_name_or_path).to(device)\n\t        else:\n\t            model = AutoModelForCausalLM.from_pretrained(model_name_or_path).to(device)\n\t    else:\n\t        model = AutoMultiExitModel.from_pretrained(model_name_or_path, multi_exit_config=multi_exit_config).to(device)\n\t    return model\n\tdef get_tokenizer(model_name, max_seq_length=512):\n\t    tokenizer_params = {'pad_token': '<|endoftext|>'} if 'gpt' in model_name else {}\n\t    tokenizer = AutoTokenizer.from_pretrained(model_name, model_max_length=max_seq_length, **tokenizer_params)\n", "    return tokenizer\n"]}
{"filename": "autocontrastive_gen/run_training.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport ast\n\tfrom argparse import ArgumentParser\n\tfrom autocontrastive_gen.data_processing.dataset_catalog import DatasetsCatalog\n\tfrom autocontrastive_gen.head_training.head_training_utils import get_head_training_function\n\tfrom autocontrastive_gen.modeling.configuration import MultiExitConfiguration\n\tfrom autocontrastive_gen.utils import get_model, get_tokenizer\n", "if __name__ == '__main__':\n\t    parser = ArgumentParser()\n\t    parser.add_argument('--model_name_or_path', type=str, required=True)\n\t    parser.add_argument('--output-dir', type=str, required=True)\n\t    parser.add_argument('--dataset', type=str, required=True, choices=DatasetsCatalog.all_datasets())\n\t    parser.add_argument('--max_seq_length', type=int, default=512)\n\t    parser.add_argument('--lm_head_layer_indices', type=ast.literal_eval, default=(24, 22, 18, 12))\n\t    parser.add_argument('--max-train-instance', type=int, default=None)\n\t    args = parser.parse_args()\n\t    print(args)\n", "    dataset = getattr(DatasetsCatalog, args.dataset)\n\t    dataset_dict = dataset.load()\n\t    tokenizer = get_tokenizer(args.model_name_or_path, max_seq_length=args.max_seq_length)\n\t    # for training, we can mostly use the default generation params of *MultiExitConfiguration* as we only care\n\t    # about the loss, and not about which specific exit layer or decoding approach is used for generation outputs\n\t    lm_config = MultiExitConfiguration(\n\t        freeze_parameters=not dataset.is_seq2seq_task(),\n\t        lm_head_layer_indices=args.lm_head_layer_indices,\n\t    )\n\t    model = get_model(args.model_name_or_path, lm_config)\n", "    head_training_function = get_head_training_function(model_config=model.config,\n\t                                                        is_seq2seq_task=dataset.is_seq2seq_task())\n\t    print(f'***** Training LM heads using {head_training_function} *****')\n\t    head_training_function(dataset_dict, model, tokenizer, args.max_seq_length,\n\t                           output_dir=f'{args.output_dir}', debug=False, max_train_instance=args.max_train_instance)\n"]}
{"filename": "autocontrastive_gen/modeling/gpt2_multi_head.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import Optional, Tuple, Union\n\timport torch\n\tfrom torch import nn\n\tfrom torch.nn.modules.loss import CrossEntropyLoss\n\tfrom transformers import GPT2LMHeadModel\n\tfrom transformers.modeling_outputs import CausalLMOutputWithCrossAttentions\n", "class MultiHeadGPT2(GPT2LMHeadModel):\n\t    def __init__(self, config, use_original_head=False, output_layer_index=24, contrast_layer_indices=None,\n\t                 contrast_function=None, freeze_parameters=True):\n\t        super().__init__(config)\n\t        if not hasattr(config, 'lm_head_layer_indices'):\n\t            raise Exception(f\"LM exit head indices must be specified when initializing {self.__class__.__name__}\")\n\t        if freeze_parameters:\n\t            for param in self.parameters():\n\t                param.requires_grad = False  # freeze all standard parameters and heads\n\t        # initialize the linear exit heads\n", "        self.lm_head_name_prefix = 'lm_head_'\n\t        self.name_to_lm_exit_head = nn.ModuleDict(\n\t            {self.lm_head_name_prefix + str(layer): self.lm_head if isinstance(layer, str) and layer == 'original'\n\t                else nn.Linear(config.n_embd, config.vocab_size, bias=False)\n\t             for layer in config.lm_head_layer_indices})\n\t        # set inference-time generation parameters\n\t        self.use_original_head = use_original_head\n\t        self.output_layer_index = output_layer_index\n\t        self.contrast_layer_indices = contrast_layer_indices\n\t        self.contrast_function = contrast_function\n", "        desc = 'original head' if self.use_original_head else (\n\t            f'output layer {self.output_layer_index}' if not self.contrast_layer_indices else f'contrast between layers {self.contrast_layer_indices}')\n\t        print(f'********* Using {desc} for generation ***********')\n\t        if freeze_parameters:\n\t            for name, param in self.named_parameters():\n\t                if param.requires_grad:\n\t                    print(name)\n\t    def forward(\n\t            self,\n\t            input_ids: Optional[torch.LongTensor] = None,\n", "            past_key_values: Optional[Tuple[Tuple[torch.Tensor]]] = None,\n\t            attention_mask: Optional[torch.FloatTensor] = None,\n\t            token_type_ids: Optional[torch.LongTensor] = None,\n\t            position_ids: Optional[torch.LongTensor] = None,\n\t            head_mask: Optional[torch.FloatTensor] = None,\n\t            inputs_embeds: Optional[torch.FloatTensor] = None,\n\t            encoder_hidden_states: Optional[torch.Tensor] = None,\n\t            encoder_attention_mask: Optional[torch.FloatTensor] = None,\n\t            labels: Optional[torch.LongTensor] = None,\n\t            use_cache: Optional[bool] = None,\n", "            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n\t            return_dict: Optional[bool] = None,\n\t    ) -> Union[Tuple, CausalLMOutputWithCrossAttentions]:\n\t        \"\"\"\n\t        Based on the original forward() method of GPT2LMHeadModel (transformers v4.26), with adaptations for\n\t        multi-head loss and using self.contrast_function to calculate the logits\n\t        \"\"\"\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        transformer_outputs = self.transformer(\n", "            input_ids,\n\t            past_key_values=past_key_values,\n\t            attention_mask=attention_mask,\n\t            token_type_ids=token_type_ids,\n\t            position_ids=position_ids,\n\t            head_mask=head_mask,\n\t            inputs_embeds=inputs_embeds,\n\t            encoder_hidden_states=encoder_hidden_states,\n\t            encoder_attention_mask=encoder_attention_mask,\n\t            use_cache=use_cache,\n", "            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n\t        hidden_states = transformer_outputs[0]\n\t        # Set device for model parallelism\n\t        if self.model_parallel:\n\t            torch.cuda.set_device(self.transformer.first_device)\n\t            hidden_states = hidden_states.to(self.lm_head.weight.device)\n\t        # index 0 of transformer_outputs.hidden_states are the decoder input embeddings, index 1 is the 1st layer,\n", "        # index 2 is the 2nd, etc.\n\t        index_to_layer_lm_head_logits = {}\n\t        for head_name, layer_lm_head in self.name_to_lm_exit_head.items():\n\t            if head_name == 'lm_head_original':\n\t                index_to_layer_lm_head_logits['original'] = layer_lm_head(hidden_states)\n\t            else:\n\t                layer_index = int(head_name.split(self.lm_head_name_prefix)[-1])\n\t                is_top_layer = layer_index == self.config.num_hidden_layers\n\t                layer_outputs = transformer_outputs.hidden_states[layer_index]\n\t                if not is_top_layer:  # layer norm for top layer is already applied within the GPT2 code\n", "                    layer_outputs = self.transformer.ln_f(layer_outputs)\n\t                layer_lm_logits = layer_lm_head.to(self.transformer.device)(layer_outputs)\n\t                index_to_layer_lm_head_logits[layer_index] = layer_lm_logits\n\t        # loss calculation for all the lm heads\n\t        loss = None\n\t        if labels is not None:\n\t            loss_fct = CrossEntropyLoss()\n\t            loss = 0\n\t            for idx, lm_logits in index_to_layer_lm_head_logits.items():\n\t                # Shift so that tokens < n predict n\n", "                shift_logits = lm_logits[..., :-1, :].contiguous()\n\t                shift_labels = labels[..., 1:].contiguous()\n\t                # Flatten the tokens\n\t                layer_loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))\n\t                loss += layer_loss\n\t        # according to the initialization, we decide which head(s) are used for generating outputs at inference time\n\t        if self.use_original_head:\n\t            output_logits = self.lm_head(hidden_states)\n\t        elif not self.contrast_layer_indices:\n\t            output_logits = index_to_layer_lm_head_logits[self.output_layer_index]\n", "        else:\n\t            lm_logits_upper = self.lm_head(hidden_states) if self.contrast_layer_indices[0] == 'original' \\\n\t                else index_to_layer_lm_head_logits[self.contrast_layer_indices[0]]\n\t            lm_logits_lower = index_to_layer_lm_head_logits[self.contrast_layer_indices[1]]\n\t            contrasted = self.contrast_function(lm_logits_upper, lm_logits_lower)\n\t            output_logits = contrasted\n\t        if not return_dict:\n\t            output = (output_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n\t        return CausalLMOutputWithCrossAttentions(\n", "            loss=loss,\n\t            logits=output_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n\t            hidden_states=transformer_outputs.hidden_states,\n\t            attentions=transformer_outputs.attentions,\n\t            cross_attentions=transformer_outputs.cross_attentions,\n\t        )\n"]}
{"filename": "autocontrastive_gen/modeling/auto_model.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom transformers import AutoConfig, GPTNeoConfig, GPT2Config, T5Config\n\tfrom autocontrastive_gen.modeling.configuration import MultiExitConfiguration\n\tfrom autocontrastive_gen.modeling.gpt2_multi_head import MultiHeadGPT2\n\tfrom autocontrastive_gen.modeling.gpt_neo_multi_head import MultiHeadGPTNeo\n\tfrom autocontrastive_gen.modeling.t5_multi_head import MultiHeadT5\n\tclass AutoMultiExitModel:\n", "    @staticmethod\n\t    def from_pretrained(model_name_or_path, multi_exit_config: MultiExitConfiguration, **extra_kwargs):\n\t        # Determine the appropriate multi-head model class according to the standard model config it is based on\n\t        model_config = AutoConfig.from_pretrained(model_name_or_path)\n\t        if type(model_config) == GPTNeoConfig:\n\t            model_class = MultiHeadGPTNeo\n\t        elif type(model_config) == GPT2Config:\n\t            model_class = MultiHeadGPT2\n\t        elif type(model_config) == T5Config:\n\t            model_class = MultiHeadT5\n", "        else:\n\t            raise Exception(f'Model {model_name_or_path} of type {type(model_config)} is not supported')\n\t        model_config.output_hidden_states = True\n\t        if multi_exit_config.lm_head_layer_indices is not None:\n\t            # If loading a standard single-exit model checkpoint (or, alternatively, if you wish to fine-tune a\n\t            # specific subset of heads in an existing multi-exit checkpoint), here we set the desired exit layers.\n\t            # This parameter should be set only at training time; at inference it is loaded from the model config file\n\t            model_config.lm_head_layer_indices = multi_exit_config.lm_head_layer_indices\n\t        if multi_exit_config.use_original_head is False:\n\t            # validate multi-exit config is compatible with the model checkpoint\n", "            multi_exit_config_layers = multi_exit_config.contrast_layer_indices \\\n\t                if multi_exit_config.contrast_layer_indices is not None else [multi_exit_config.output_layer_index]\n\t            for layer in multi_exit_config_layers:\n\t                if layer not in {*model_config.lm_head_layer_indices, 'original'}:\n\t                    raise Exception(f'Exit layer {layer} in the MultiExitConfiguration does not match the exit heads '\n\t                                    f'in the pre-trained model checkpoint ({model_config.lm_head_layer_indices})')\n\t        multi_exit_kwargs = multi_exit_config.get_runtime_kwargs()\n\t        return model_class.from_pretrained(model_name_or_path, config=model_config, **multi_exit_kwargs, **extra_kwargs)\n"]}
{"filename": "autocontrastive_gen/modeling/t5_multi_head.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import Optional, Tuple, Union\n\timport torch\n\tfrom torch import nn\n\tfrom torch.nn.modules.loss import CrossEntropyLoss\n\tfrom transformers import T5ForConditionalGeneration\n\tfrom transformers.modeling_outputs import BaseModelOutput, Seq2SeqLMOutput\n", "class MultiHeadT5(T5ForConditionalGeneration):\n\t    def __init__(self, config, use_original_head=False, output_layer_index=24, contrast_layer_indices=None,\n\t                 contrast_function=None, freeze_parameters=True):\n\t        super().__init__(config)\n\t        if not hasattr(config, 'lm_head_layer_indices'):\n\t            raise Exception(f\"LM exit head indices must be specified when initializing {self.__class__.__name__}\")\n\t        if freeze_parameters:\n\t            for param in self.parameters():\n\t                param.requires_grad = False  # freeze all standard parameters and heads\n\t        # initialize the linear exit heads\n", "        self.lm_head_name_prefix = 'lm_head_'\n\t        self.name_to_lm_exit_head = nn.ModuleDict(\n\t            {self.lm_head_name_prefix + str(layer): self.lm_head if isinstance(layer, str) and layer == 'original'\n\t                else nn.Linear(config.d_model, config.vocab_size, bias=False)\n\t             for layer in config.lm_head_layer_indices})\n\t        # set inference-time generation parameters\n\t        self.use_original_head = use_original_head\n\t        self.output_layer_index = output_layer_index\n\t        self.contrast_layer_indices = contrast_layer_indices\n\t        self.contrast_function = contrast_function\n", "        desc = 'original head' if self.use_original_head else (\n\t            f'output layer {self.output_layer_index}' if not self.contrast_layer_indices else f'contrast between layers {self.contrast_layer_indices}')\n\t        print(f'********* Using {desc} for generation ***********')\n\t        if freeze_parameters:\n\t            for name, param in self.named_parameters():\n\t                if param.requires_grad:\n\t                    print(name)\n\t    def forward(\n\t            self,\n\t            input_ids: Optional[torch.LongTensor] = None,\n", "            attention_mask: Optional[torch.FloatTensor] = None,\n\t            decoder_input_ids: Optional[torch.LongTensor] = None,\n\t            decoder_attention_mask: Optional[torch.BoolTensor] = None,\n\t            head_mask: Optional[torch.FloatTensor] = None,\n\t            decoder_head_mask: Optional[torch.FloatTensor] = None,\n\t            cross_attn_head_mask: Optional[torch.Tensor] = None,\n\t            encoder_outputs: Optional[Tuple[Tuple[torch.Tensor]]] = None,\n\t            past_key_values: Optional[Tuple[Tuple[torch.Tensor]]] = None,\n\t            inputs_embeds: Optional[torch.FloatTensor] = None,\n\t            decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n", "            labels: Optional[torch.LongTensor] = None,\n\t            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n\t            return_dict: Optional[bool] = None,\n\t    ) -> Union[Tuple[torch.FloatTensor], Seq2SeqLMOutput]:\n\t        \"\"\"\n\t        Based on the original forward() method of T5ForConditionalGeneration (transformers v4.26), with adaptations for\n\t        multi-head loss and using self.contrast_function to calculate the logits\n\t        \"\"\"\n", "        use_cache = use_cache if use_cache is not None else self.config.use_cache\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        # Encode if needed (training, first prediction pass)\n\t        if encoder_outputs is None:\n\t            # Convert encoder inputs in embeddings if needed\n\t            encoder_outputs = self.encoder(\n\t                input_ids=input_ids,\n\t                attention_mask=attention_mask,\n\t                inputs_embeds=inputs_embeds,\n\t                head_mask=head_mask,\n", "                output_attentions=output_attentions,\n\t                output_hidden_states=output_hidden_states,\n\t                return_dict=return_dict,\n\t            )\n\t        elif return_dict and not isinstance(encoder_outputs, BaseModelOutput):\n\t            encoder_outputs = BaseModelOutput(\n\t                last_hidden_state=encoder_outputs[0],\n\t                hidden_states=encoder_outputs[1] if len(encoder_outputs) > 1 else None,\n\t                attentions=encoder_outputs[2] if len(encoder_outputs) > 2 else None,\n\t            )\n", "        hidden_states = encoder_outputs[0]\n\t        if self.model_parallel:\n\t            torch.cuda.set_device(self.decoder.first_device)\n\t        if labels is not None and decoder_input_ids is None and decoder_inputs_embeds is None:\n\t            # get decoder inputs from shifting lm labels to the right\n\t            decoder_input_ids = self._shift_right(labels)\n\t        # Set device for model parallelism\n\t        if self.model_parallel:\n\t            torch.cuda.set_device(self.decoder.first_device)\n\t            hidden_states = hidden_states.to(self.decoder.first_device)\n", "            if decoder_input_ids is not None:\n\t                decoder_input_ids = decoder_input_ids.to(self.decoder.first_device)\n\t            if attention_mask is not None:\n\t                attention_mask = attention_mask.to(self.decoder.first_device)\n\t            if decoder_attention_mask is not None:\n\t                decoder_attention_mask = decoder_attention_mask.to(self.decoder.first_device)\n\t        # Decode\n\t        decoder_outputs = self.decoder(\n\t            input_ids=decoder_input_ids,\n\t            attention_mask=decoder_attention_mask,\n", "            inputs_embeds=decoder_inputs_embeds,\n\t            past_key_values=past_key_values,\n\t            encoder_hidden_states=hidden_states,\n\t            encoder_attention_mask=attention_mask,\n\t            head_mask=decoder_head_mask,\n\t            cross_attn_head_mask=cross_attn_head_mask,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n", "        )\n\t        sequence_output = decoder_outputs[0]\n\t        # Set device for model parallelism\n\t        if self.model_parallel:\n\t            torch.cuda.set_device(self.encoder.first_device)\n\t            self.lm_head = self.lm_head.to(self.encoder.first_device)\n\t            sequence_output = sequence_output.to(self.lm_head.weight.device)\n\t        def normalize_and_rescale(hidden_layer, is_top_layer):\n\t            if not is_top_layer:  # layer norm and dropout for top layer are already applied within the T5 decoder\n\t                normalized_hidden_layer = self.decoder.final_layer_norm(hidden_layer)\n", "                hidden_layer = self.decoder.dropout(normalized_hidden_layer)\n\t            if self.config.tie_word_embeddings:\n\t                # Rescale output before projecting on vocab\n\t                hidden_layer = hidden_layer * (self.model_dim ** -0.5)\n\t            return hidden_layer\n\t        # index 0 of decoder_outputs.hidden_states are the decoder input embeddings, index 1 is the 1st layer,\n\t        # index 2 is the 2nd, etc.\n\t        index_to_layer_lm_head_logits = {}\n\t        for head_name, layer_lm_head in self.name_to_lm_exit_head.items():\n\t            if head_name == 'lm_head_original':\n", "                index_to_layer_lm_head_logits['original'] = layer_lm_head(normalize_and_rescale(sequence_output, True))\n\t            else:\n\t                layer_index = int(head_name.split(self.lm_head_name_prefix)[-1])\n\t                is_top_layer = layer_index == self.config.num_decoder_layers\n\t                layer_decoder_outputs = normalize_and_rescale(decoder_outputs.hidden_states[layer_index], is_top_layer)\n\t                layer_lm_logits = layer_lm_head.to(self.decoder.device)(layer_decoder_outputs)\n\t                index_to_layer_lm_head_logits[layer_index] = layer_lm_logits\n\t        # loss calculation for all the lm heads\n\t        loss = None\n\t        if labels is not None:\n", "            loss_fct = CrossEntropyLoss(ignore_index=-100)\n\t            loss = 0\n\t            for idx, lm_logits in index_to_layer_lm_head_logits.items():\n\t                layer_loss = loss_fct(lm_logits.view(-1, lm_logits.size(-1)), labels.view(-1))\n\t                loss += layer_loss\n\t        # according to the initialization, we decide which head(s) are used for generating outputs at inference time\n\t        if self.use_original_head:\n\t            output_logits = self.lm_head(normalize_and_rescale(sequence_output, True))\n\t        elif not self.contrast_layer_indices:\n\t            output_logits = index_to_layer_lm_head_logits[self.output_layer_index]\n", "        else:\n\t            lm_logits_upper = self.lm_head(normalize_and_rescale(sequence_output, True)) if self.contrast_layer_indices[0] == 'original' \\\n\t                else index_to_layer_lm_head_logits[self.contrast_layer_indices[0]]\n\t            lm_logits_lower = index_to_layer_lm_head_logits[self.contrast_layer_indices[1]]\n\t            output_logits = self.contrast_function(lm_logits_upper, lm_logits_lower)\n\t        if not return_dict:\n\t            output = (output_logits,) + decoder_outputs[1:] + encoder_outputs\n\t            return ((loss,) + output) if loss is not None else output\n\t        return Seq2SeqLMOutput(\n\t            loss=loss,\n", "            logits=output_logits,\n\t            past_key_values=decoder_outputs.past_key_values,\n\t            decoder_hidden_states=decoder_outputs.hidden_states,\n\t            decoder_attentions=decoder_outputs.attentions,\n\t            cross_attentions=decoder_outputs.cross_attentions,\n\t            encoder_last_hidden_state=encoder_outputs.last_hidden_state,\n\t            encoder_hidden_states=encoder_outputs.hidden_states,\n\t            encoder_attentions=encoder_outputs.attentions,\n\t        )\n"]}
{"filename": "autocontrastive_gen/modeling/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/modeling/gpt_neo_multi_head.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import Optional, Tuple, Union\n\timport torch\n\tfrom torch import nn\n\tfrom torch.nn.modules.loss import CrossEntropyLoss\n\tfrom transformers import GPTNeoForCausalLM\n\tfrom transformers.modeling_outputs import CausalLMOutputWithCrossAttentions, CausalLMOutputWithPast\n", "class MultiHeadGPTNeo(GPTNeoForCausalLM):\n\t    def __init__(self, config, use_original_head=False, output_layer_index=24, contrast_layer_indices=None,\n\t                 contrast_function=None, freeze_parameters=True):\n\t        super().__init__(config)\n\t        if not hasattr(config, 'lm_head_layer_indices'):\n\t            raise Exception(f\"LM exit head indices must be specified when initializing {self.__class__.__name__}\")\n\t        if freeze_parameters:\n\t            for param in self.parameters():\n\t                param.requires_grad = False  # freeze all standard parameters and heads\n\t        # initialize the linear exit heads\n", "        self.lm_head_name_prefix = 'lm_head_'\n\t        self.name_to_lm_exit_head = nn.ModuleDict(\n\t            {self.lm_head_name_prefix + str(layer): self.lm_head if isinstance(layer, str) and layer == 'original'\n\t                else nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\t             for layer in config.lm_head_layer_indices})\n\t        # set inference-time generation parameters\n\t        self.use_original_head = use_original_head\n\t        self.output_layer_index = output_layer_index\n\t        self.contrast_layer_indices = contrast_layer_indices\n\t        self.contrast_function = contrast_function\n", "        desc = 'original head' if self.use_original_head else (\n\t            f'output layer {self.output_layer_index}' if not self.contrast_layer_indices else f'contrast between layers {self.contrast_layer_indices}')\n\t        print(f'********* Using {desc} for generation ***********')\n\t        if freeze_parameters:\n\t            for name, param in self.named_parameters():\n\t                if param.requires_grad:\n\t                    print(name)\n\t    def forward(\n\t            self,\n\t            input_ids: Optional[torch.Tensor] = None,\n", "            past_key_values: Optional[Tuple[torch.FloatTensor]] = None,\n\t            attention_mask: Optional[torch.Tensor] = None,\n\t            token_type_ids: Optional[torch.Tensor] = None,\n\t            position_ids: Optional[torch.Tensor] = None,\n\t            head_mask: Optional[torch.Tensor] = None,\n\t            inputs_embeds: Optional[torch.Tensor] = None,\n\t            labels: Optional[torch.Tensor] = None,\n\t            use_cache: Optional[bool] = None,\n\t            output_attentions: Optional[bool] = None,\n\t            output_hidden_states: Optional[bool] = None,\n", "            return_dict: Optional[bool] = None,\n\t    ) -> Union[Tuple[torch.Tensor], CausalLMOutputWithCrossAttentions]:\n\t        \"\"\"\n\t        Based on the original forward() method of GPTNeoForCausalLM (transformers v4.26), with adaptations for\n\t        multi-head loss and using self.contrast_function to calculate the logits\n\t        \"\"\"\n\t        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\t        transformer_outputs = self.transformer(\n\t            input_ids,\n\t            past_key_values=past_key_values,\n", "            attention_mask=attention_mask,\n\t            token_type_ids=token_type_ids,\n\t            position_ids=position_ids,\n\t            head_mask=head_mask,\n\t            inputs_embeds=inputs_embeds,\n\t            use_cache=use_cache,\n\t            output_attentions=output_attentions,\n\t            output_hidden_states=output_hidden_states,\n\t            return_dict=return_dict,\n\t        )\n", "        hidden_states = transformer_outputs[0]\n\t        # index 0 of transformer_outputs.hidden_states are the decoder input embeddings, index 1 is the 1st layer,\n\t        # index 2 is the 2nd, etc.\n\t        index_to_layer_lm_head_logits = {}\n\t        for head_name, layer_lm_head in self.name_to_lm_exit_head.items():\n\t            if head_name == 'lm_head_original':\n\t                index_to_layer_lm_head_logits['original'] = layer_lm_head(hidden_states)\n\t            else:\n\t                layer_index = int(head_name.split(self.lm_head_name_prefix)[-1])\n\t                is_top_layer = layer_index == self.config.num_hidden_layers\n", "                layer_outputs = transformer_outputs.hidden_states[layer_index]\n\t                if not is_top_layer:  # layer norm for top layer is already applied within the GPT2 code\n\t                    layer_outputs = self.transformer.ln_f(layer_outputs)\n\t                layer_lm_logits = layer_lm_head.to(self.transformer.device)(layer_outputs)\n\t                index_to_layer_lm_head_logits[layer_index] = layer_lm_logits\n\t        # loss calculation for all the lm heads\n\t        loss = None\n\t        if labels is not None:\n\t            loss_fct = CrossEntropyLoss()\n\t            loss = 0\n", "            for idx, lm_logits in index_to_layer_lm_head_logits.items():\n\t                # Compute loss in fp32 to match with mesh-tf version\n\t                # https://github.com/EleutherAI/gpt-neo/blob/89ce74164da2fb16179106f54e2269b5da8db333/models/gpt2/gpt2.py#L179\n\t                lm_logits = lm_logits.to(torch.float32)\n\t                # Shift so that tokens < n predict n\n\t                shift_logits = lm_logits[..., :-1, :].contiguous()\n\t                shift_labels = labels[..., 1:].contiguous()\n\t                # Flatten the tokens\n\t                layer_loss = loss_fct(shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1))\n\t                loss += layer_loss\n", "            loss = loss.to(hidden_states.dtype)\n\t        # according to the initialization, we decide which head(s) are used for generating outputs at inference time\n\t        if self.use_original_head:\n\t            output_logits = self.lm_head(hidden_states)\n\t        elif not self.contrast_layer_indices:\n\t            output_logits = index_to_layer_lm_head_logits[self.output_layer_index]\n\t        else:\n\t            lm_logits_upper = self.lm_head(hidden_states) if self.contrast_layer_indices[0] == 'original' \\\n\t                else index_to_layer_lm_head_logits[self.contrast_layer_indices[0]]\n\t            lm_logits_lower = index_to_layer_lm_head_logits[self.contrast_layer_indices[1]]\n", "            contrasted = self.contrast_function(lm_logits_upper, lm_logits_lower)\n\t            output_logits = contrasted\n\t        if not return_dict:\n\t            output = (output_logits,) + transformer_outputs[1:]\n\t            return ((loss,) + output) if loss is not None else output\n\t        return CausalLMOutputWithPast(\n\t            loss=loss,\n\t            logits=output_logits,\n\t            past_key_values=transformer_outputs.past_key_values,\n\t            hidden_states=transformer_outputs.hidden_states,\n", "            attentions=transformer_outputs.attentions,\n\t        )\n"]}
{"filename": "autocontrastive_gen/modeling/configuration.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport ast\n\timport dataclasses\n\tfrom dataclasses import dataclass\n\tfrom typing import Tuple, Callable, Union\n\tfrom autocontrastive_gen.contrast_calculation import calculate_contrasted_logits\n\t@dataclass\n", "class MultiExitConfiguration:\n\t    # training\n\t    lm_head_layer_indices: Tuple[int, ...] = None\n\t    freeze_parameters: bool = False\n\t    # inference\n\t    use_original_head: bool = True\n\t    output_layer_index: int = None\n\t    contrast_layer_indices: Tuple[Union[int, str], int] = None\n\t    contrast_function: Callable = lambda upper, lower: calculate_contrasted_logits(upper, lower, minimum_candidates=1,\n\t                                                                                   alpha=0.1)\n", "    def __post_init__(self):\n\t        if type(self.contrast_layer_indices) == str:\n\t            self.contrast_layer_indices = tuple(int(idx) if idx != 'original' else 'original'\n\t                                                for idx in self.contrast_layer_indices.split(';'))\n\t        if type(self.lm_head_layer_indices) == str:\n\t            self.lm_head_layer_indices = tuple(int(idx) for idx in self.lm_head_layer_indices.split(';'))\n\t        if type(self.output_layer_index) == str:\n\t            self.output_layer_index = int(self.output_layer_index)\n\t        if type(self.use_original_head) == str:\n\t            self.use_original_head = ast.literal_eval(self.use_original_head)\n", "        # validate the generation parameters\n\t        if self.contrast_layer_indices is not None:\n\t            if self.use_original_head:\n\t                raise Exception(f'Contradiction in model configuration: trying to use the original LM head '\n\t                                f'but also to calculate contrast between layers {self.contrast_layer_indices}')\n\t    def get_description(self):\n\t        if self.use_original_head:\n\t            return 'original_head'\n\t        elif self.contrast_layer_indices:\n\t            return f'{self.contrast_layer_indices[0]}_vs_{self.contrast_layer_indices[1]}'\n", "        else:\n\t            return f'layer_{self.output_layer_index}'\n\t    def get_runtime_kwargs(self):\n\t        \"\"\"\n\t        Returns the extra runtime arguments that are passed to the multi-exit model class, i.e., excluding the LM exit\n\t        head indices, which are a property of the given model and are stored in the model config\n\t        \"\"\"\n\t        kwargs = dataclasses.asdict(self)\n\t        kwargs.pop('lm_head_layer_indices')\n\t        return kwargs\n"]}
{"filename": "autocontrastive_gen/evaluation/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/evaluation/auto_metrics.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import Mapping\n\tfrom simctg.evaluation import measure_repetition_and_diversity\n\tfrom simcse import SimCSE\n\tsimcse_model = SimCSE(\"princeton-nlp/sup-simcse-bert-base-uncased\")\n\tdef calc_metrics(prompt_text, generated_text) -> Mapping:\n\t    try:\n", "        rep_2, rep_3, rep_4, diversity = measure_repetition_and_diversity([generated_text])\n\t    except ZeroDivisionError:  # text is too short\n\t        diversity = 0\n\t    coherence = simcse_model.similarity(generated_text, prompt_text)\n\t    return {'diversity': diversity,\n\t            'coherence': coherence}\n"]}
{"filename": "autocontrastive_gen/evaluation/lm_eval_harness/run_lm_eval.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport argparse\n\timport json\n\timport logging\n\timport fnmatch\n\tfrom lm_eval import tasks, evaluator\n\t\"\"\"\n", "This script is taken from the Language Model Evaluation Harness repository (v0.3.0)\n\t(https://github.com/EleutherAI/lm-evaluation-harness/blob/master/main.py)\n\t\"\"\"\n\tlogging.getLogger(\"openai\").setLevel(logging.WARNING)\n\tclass MultiChoice:\n\t    def __init__(self, choices):\n\t        self.choices = choices\n\t    # Simple wildcard support (linux filename patterns)\n\t    def __contains__(self, values):\n\t        for value in values.split(\",\"):\n", "            if len(fnmatch.filter(self.choices, value)) == 0:\n\t                return False\n\t        return True\n\t    def __iter__(self):\n\t        for choice in self.choices:\n\t            yield choice\n\tdef parse_args():\n\t    parser = argparse.ArgumentParser()\n\t    parser.add_argument(\"--model\", required=True)\n\t    parser.add_argument(\"--model_args\", default=\"\")\n", "    parser.add_argument(\"--tasks\", default=None, choices=MultiChoice(tasks.ALL_TASKS))\n\t    parser.add_argument(\"--provide_description\", action=\"store_true\")\n\t    parser.add_argument(\"--num_fewshot\", type=int, default=0)\n\t    parser.add_argument(\"--batch_size\", type=int, default=None)\n\t    parser.add_argument(\"--device\", type=str, default=None)\n\t    parser.add_argument(\"--output_path\", default=None)\n\t    parser.add_argument(\"--limit\", type=int, default=None)\n\t    parser.add_argument(\"--no_cache\", action=\"store_true\")\n\t    parser.add_argument(\"--decontamination_ngrams_path\", default=None)\n\t    parser.add_argument(\"--description_dict_path\", default=None)\n", "    parser.add_argument(\"--check_integrity\", action=\"store_true\")\n\t    return parser.parse_args()\n\t# Returns a list containing all values of the source_list that\n\t# match at least one of the patterns\n\tdef pattern_match(patterns, source_list):\n\t    task_names = set()\n\t    for pattern in patterns:\n\t        for matching in fnmatch.filter(source_list, pattern):\n\t            task_names.add(matching)\n\t    return list(task_names)\n", "def main():\n\t    args = parse_args()\n\t    assert not args.provide_description  # not implemented\n\t    if args.limit:\n\t        print(\n\t            \"WARNING: --limit SHOULD ONLY BE USED FOR TESTING. REAL METRICS SHOULD NOT BE COMPUTED USING LIMIT.\"\n\t        )\n\t    if args.tasks is None:\n\t        task_names = tasks.ALL_TASKS\n\t    else:\n", "        task_names = pattern_match(args.tasks.split(\",\"), tasks.ALL_TASKS)\n\t    print(f\"Selected Tasks: {task_names}\")\n\t    description_dict = {}\n\t    if args.description_dict_path:\n\t        with open(args.description_dict_path, \"r\") as f:\n\t            description_dict = json.load(f)\n\t    results = evaluator.simple_evaluate(\n\t        model=args.model,\n\t        model_args=args.model_args,\n\t        tasks=task_names,\n", "        num_fewshot=args.num_fewshot,\n\t        batch_size=args.batch_size,\n\t        device=args.device,\n\t        no_cache=args.no_cache,\n\t        limit=args.limit,\n\t        description_dict=description_dict,\n\t        decontamination_ngrams_path=args.decontamination_ngrams_path,\n\t        check_integrity=args.check_integrity,\n\t    )\n\t    dumped = json.dumps(results, indent=2)\n", "    print(dumped)\n\t    if args.output_path:\n\t        with open(args.output_path, \"w\") as f:\n\t            f.write(dumped)\n\t    print(\n\t        f\"{args.model} ({args.model_args}), limit: {args.limit}, provide_description: {args.provide_description}, \"\n\t        f\"num_fewshot: {args.num_fewshot}, batch_size: {args.batch_size}\"\n\t    )\n\t    print(evaluator.make_table(results))\n\tif __name__ == \"__main__\":\n", "    import lm_eval\n\t    from autocontrastive_gen.evaluation.lm_eval_harness.lm_eval_multi_head_gpt import HFLMMultiExit\n\t    lm_eval.models.MODEL_REGISTRY['multi_exit_gpt'] = HFLMMultiExit\n\t    main()\n"]}
{"filename": "autocontrastive_gen/evaluation/lm_eval_harness/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/evaluation/lm_eval_harness/lm_eval_multi_head_gpt.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\timport torch\n\timport transformers\n\tfrom lm_eval.models import gpt2\n\tfrom autocontrastive_gen.modeling.auto_model import AutoMultiExitModel\n\tfrom autocontrastive_gen.modeling.configuration import MultiExitConfiguration\n\tclass HFLMMultiExit(gpt2.HFLM):\n", "    \"\"\"\n\t    Overrides the init() method from lm_eval.models.gpt2.HFLM (v0.3.0), with slight modifications so that the model\n\t    will be initialized with a multi-exit model class rather than using the transformers AutoModelForCausalLM\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        device=\"cuda\",\n\t        pretrained=\"gpt2-medium\",\n\t        revision=\"main\",\n\t        subfolder=None,\n", "        tokenizer=None,\n\t        batch_size=1,\n\t        **multi_args\n\t    ):\n\t        super(gpt2.HFLM, self).__init__()\n\t        assert isinstance(device, str)\n\t        assert isinstance(pretrained, str)\n\t        assert isinstance(batch_size, int)\n\t        if device:\n\t            if device not in [\"cuda\", \"cpu\"]:\n", "                device = int(device)\n\t            self._device = torch.device(device)\n\t            print(f\"Using device '{device}'\")\n\t        else:\n\t            print(\"Device not specified\")\n\t            print(f\"Cuda Available? {torch.cuda.is_available()}\")\n\t            self._device = (\n\t                torch.device(\"cuda\")\n\t                if torch.cuda.is_available()\n\t                else torch.device(\"cpu\")\n", "            )\n\t        revision = revision + (\"/\" + subfolder if subfolder is not None else \"\")\n\t        multi_exit_config = MultiExitConfiguration(**multi_args)\n\t        self.gpt2 = AutoMultiExitModel.from_pretrained(\n\t            pretrained,\n\t            multi_exit_config=multi_exit_config,\n\t            revision=revision,\n\t        ).to(self.device)\n\t        self.gpt2.eval()\n\t        self.tokenizer = transformers.AutoTokenizer.from_pretrained(\n", "            pretrained if tokenizer is None else tokenizer,\n\t            revision=revision,\n\t        )\n\t        assert isinstance(\n\t            self.tokenizer,\n\t            (\n\t                transformers.GPT2Tokenizer,\n\t                transformers.GPT2TokenizerFast,\n\t                transformers.T5Tokenizer,\n\t                transformers.T5TokenizerFast,\n", "            ),\n\t        ), \"this tokenizer has not been checked for compatibility yet!\"\n\t        self.vocab_size = self.tokenizer.vocab_size\n\t        if isinstance(\n\t            self.tokenizer, (transformers.GPT2Tokenizer, transformers.GPT2TokenizerFast)\n\t        ):\n\t            assert self.tokenizer.encode(\"hello\\n\\nhello\") == [\n\t                31373,\n\t                198,\n\t                198,\n", "                31373,\n\t            ], self.tokenizer.encode(\"hello\\n\\nhello\")\n\t        # multithreading and batching\n\t        self.batch_size_per_gpu = batch_size\n"]}
{"filename": "autocontrastive_gen/head_training/gpt2_training.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import Optional\n\tfrom datasets import DatasetDict\n\tfrom autocontrastive_gen.head_training.head_training_utils import group_texts, pretrain_tokenize_function, train\n\tdef gpt_preprocess_func(examples, ignore_input_in_loss, pad_token_id=50256):\n\t    # for autoregressive generation, the concatenated source and target also serve as the label, and we can choose\n\t    # whether to include the input tokens in the loss calculation\n", "    if ignore_input_in_loss:\n\t        # in the labels we replace the source input ids and the padding with -100 so that they won't be included in the loss\n\t        labels = []\n\t        for concatenated, target in zip(examples['input_ids'], examples['target_input_ids']):\n\t            target_end_idx = concatenated.index(pad_token_id) if concatenated[-1] == pad_token_id else len(concatenated)\n\t            target_start_idx = target_end_idx - len(target)\n\t            labels.append([-100]*target_start_idx + concatenated[target_start_idx:target_end_idx] + [-100]*(len(concatenated)-target_end_idx))\n\t        examples['labels'] = labels\n\t    else:\n\t        # in the labels we replace the padding ids with -100 so that they won't be included in the loss\n", "        labels = [[input_id if input_id != pad_token_id else -100 for input_id in example_input_ids] \n\t                  for example_input_ids in examples['input_ids']]\n\t        examples['labels'] = labels\n\t    return examples\n\tdef run_gpt2_pretraining(dataset_dict: DatasetDict, model, tokenizer, max_seq_length, output_dir, debug=False,\n\t                         max_train_instance: Optional[int] = None):\n\t    column_names = dataset_dict[\"train\"].column_names\n\t    if debug:\n\t        dataset_dict['train'] = dataset_dict['train'].select(range(1000))\n\t    if max_train_instance:\n", "        dataset_dict['train'] = dataset_dict['train'].select(range(max_train_instance))\n\t    dataset_dict = dataset_dict.map(lambda examples: pretrain_tokenize_function(examples, tokenizer),\n\t                                    batched=True, remove_columns=column_names)\n\t    print(f\"train dataset size before chunking: {len(dataset_dict['train'])}\")\n\t    # chunk different examples together up to max_seq_length\n\t    dataset_dict = dataset_dict.map(lambda examples: group_texts(examples, max_seq_length), batched=True)\n\t    dataset_dict = dataset_dict.map(lambda examples: gpt_preprocess_func(examples, ignore_input_in_loss=False),\n\t                                    batched=True)\n\t    print(f\"final train dataset size: {len(dataset_dict['train'])}\")\n\t    train(model, tokenizer, train_dataset=dataset_dict['train'], output_dir=output_dir,\n", "          optimizer_name='adamw_hf', learning_rate=2e-4, lr_scheduler_type='linear', data_collator=None,\n\t          debug=debug)\n\tdef gpt_finetune_tokenize_function(examples, tokenizer, max_seq_length, ignore_input_in_loss):\n\t    # tokenization for downstream task fine-tuning with a source and a target (label);\n\t    # the source and target are concatenated to a single input sequence\n\t    tokenized_dict = \\\n\t        tokenizer.batch_encode_plus(list(zip(examples['source_text'], examples['target_text'])),\n\t                                    max_length=max_seq_length, padding='max_length', truncation='only_first',\n\t                                    return_attention_mask=True, add_special_tokens=False)\n\t    if ignore_input_in_loss:\n", "        # we also tokenize the targets separately so we will know how to mask the sources in gpt_preprocess_func()\n\t        target_tokenized = tokenizer.batch_encode_plus(examples['target_text'],\n\t                                                       truncation=False,\n\t                                                       return_attention_mask=False, add_special_tokens=False)\n\t        tokenized_dict['target_input_ids'] = target_tokenized['input_ids']\n\t    return tokenized_dict\n\tdef run_gpt2_downstream_training(dataset_dict: DatasetDict, model, tokenizer, max_seq_length, output_dir, debug=False,\n\t                                 max_train_instance: Optional[int] = None):\n\t    column_names = dataset_dict[\"train\"].column_names\n\t    if max_train_instance is not None:\n", "        dataset_dict['train'] = dataset_dict['train'].select(range(max_train_instance))\n\t    dataset_dict = dataset_dict.map(lambda examples:\n\t                                    gpt_finetune_tokenize_function(examples, tokenizer, max_seq_length,\n\t                                                                   ignore_input_in_loss=True),\n\t                                    batched=True, remove_columns=column_names)\n\t    dataset_dict = dataset_dict.map(lambda examples: gpt_preprocess_func(examples, ignore_input_in_loss=True),\n\t                                    batched=True)\n\t    train(model, tokenizer, train_dataset=dataset_dict['train'], output_dir=output_dir,\n\t          optimizer_name='adamw_hf', learning_rate=5e-4, lr_scheduler_type='linear', data_collator=None)\n"]}
{"filename": "autocontrastive_gen/head_training/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/head_training/t5_training.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom typing import List, Dict, Optional\n\timport numpy as np\n\timport torch\n\tfrom transformers import PreTrainedTokenizerBase, BatchEncoding, DataCollatorForSeq2Seq\n\tfrom transformers.models.t5.modeling_flax_t5 import shift_tokens_right\n\tfrom autocontrastive_gen.head_training.head_training_utils import group_texts, pretrain_tokenize_function, train\n", "\"\"\"\n\tThe T5 pre-training code below is adapted from \n\thttps://github.com/huggingface/transformers/blob/main/examples/flax/language-modeling/run_t5_mlm_flax.py,\n\twith minor modifications for Pytorch\n\t\"\"\"\n\tclass DataCollatorForT5MLM:\n\t    \"\"\"\n\t    Data collator used for T5 span-masked language modeling.\n\t    It is made sure that after masking the inputs are of length `data_args.max_seq_length` and targets are also of fixed length.\n\t    For more information on how T5 span-masked language modeling works, one can take a look\n", "    at the `official paper <https://arxiv.org/pdf/1910.10683.pdf>`__\n\t    or the `official code for preprocessing <https://github.com/google-research/text-to-text-transfer-transformer/blob/master/t5/data/preprocessors.py>`__ .\n\t    Args:\n\t        tokenizer (:class:`~transformers.PreTrainedTokenizer` or :class:`~transformers.PreTrainedTokenizerFast`):\n\t            The tokenizer used for encoding the data.\n\t        noise_density (:obj:`float`):\n\t            The probability with which to (randomly) mask tokens in the input.\n\t        mean_noise_span_length (:obj:`float`):\n\t            The average span length of the masked tokens.\n\t        input_length (:obj:`int`):\n", "            The expected input length after masking.\n\t        target_length (:obj:`int`):\n\t            The expected target length after masking.\n\t        pad_token_id: (:obj:`int`):\n\t            The pad token id of the model\n\t        decoder_start_token_id: (:obj:`int):\n\t            The decoder start token id of the model\n\t    \"\"\"\n\t    def __init__(self, tokenizer: PreTrainedTokenizerBase, noise_density: float, mean_noise_span_length: float,\n\t                 input_length: int, target_length: int, pad_token_id: int, decoder_start_token_id: int):\n", "        self.tokenizer = tokenizer\n\t        self.noise_density = noise_density\n\t        self.mean_noise_span_length = mean_noise_span_length\n\t        self.input_length = input_length\n\t        self.target_length = target_length\n\t        self.pad_token_id = pad_token_id\n\t        self.decoder_start_token_id = decoder_start_token_id\n\t    def __call__(self, examples: List[Dict[str, np.ndarray]]) -> BatchEncoding:\n\t        # convert list to dict and tensorize input\n\t        batch = BatchEncoding(\n", "            {k: np.array([examples[i][k] for i in range(len(examples))]) for k, v in examples[0].items()}\n\t        )\n\t        input_ids = batch[\"input_ids\"]\n\t        batch_size, expandend_input_length = input_ids.shape\n\t        mask_indices = np.asarray([self.random_spans_noise_mask(expandend_input_length) for i in range(batch_size)])\n\t        labels_mask = ~mask_indices\n\t        input_ids_sentinel = self.create_sentinel_ids(mask_indices.astype(np.int8))\n\t        labels_sentinel = self.create_sentinel_ids(labels_mask.astype(np.int8))\n\t        batch[\"input_ids\"] = torch.tensor(self.filter_input_ids(input_ids, input_ids_sentinel))\n\t        batch[\"labels\"] = torch.tensor(self.filter_input_ids(input_ids, labels_sentinel))\n", "        if batch[\"input_ids\"].shape[-1] != self.input_length:\n\t            raise ValueError(\n\t                f\"`input_ids` are incorrectly preprocessed. `input_ids` length is {batch['input_ids'].shape[-1]}, but\"\n\t                f\" should be {self.input_length}.\"\n\t            )\n\t        if batch[\"labels\"].shape[-1] != self.target_length:\n\t            raise ValueError(\n\t                f\"`labels` are incorrectly preprocessed. `labels` length is {batch['labels'].shape[-1]}, but should be\"\n\t                f\" {self.target_length}.\"\n\t            )\n", "        # to check that tokens are correctly preprocessed, one can run `self.tokenizer.batch_decode(input_ids)` and `self.tokenizer.batch_decode(labels)` here...\n\t        batch[\"decoder_input_ids\"] = torch.tensor(shift_tokens_right(\n\t            batch[\"labels\"], self.pad_token_id, self.decoder_start_token_id\n\t        ))\n\t        return batch\n\t    def create_sentinel_ids(self, mask_indices):\n\t        \"\"\"\n\t        Sentinel ids creation given the indices that should be masked.\n\t        The start indices of each mask are replaced by the sentinel ids in increasing\n\t        order. Consecutive mask indices to be deleted are replaced with `-1`.\n", "        \"\"\"\n\t        start_indices = mask_indices - np.roll(mask_indices, 1, axis=-1) * mask_indices\n\t        start_indices[:, 0] = mask_indices[:, 0]\n\t        sentinel_ids = np.where(start_indices != 0, np.cumsum(start_indices, axis=-1), start_indices)\n\t        sentinel_ids = np.where(sentinel_ids != 0, (len(self.tokenizer) - sentinel_ids), 0)\n\t        sentinel_ids -= mask_indices - start_indices\n\t        return sentinel_ids\n\t    def filter_input_ids(self, input_ids, sentinel_ids):\n\t        \"\"\"\n\t        Puts sentinel mask on `input_ids` and fuse consecutive mask tokens into a single mask token by deleting.\n", "        This will reduce the sequence length from `expanded_inputs_length` to `input_length`.\n\t        \"\"\"\n\t        batch_size = input_ids.shape[0]\n\t        input_ids_full = np.where(sentinel_ids != 0, sentinel_ids, input_ids)\n\t        # input_ids tokens and sentinel tokens are >= 0, tokens < 0 are\n\t        # masked tokens coming after sentinel tokens and should be removed\n\t        input_ids = input_ids_full[input_ids_full >= 0].reshape((batch_size, -1))\n\t        input_ids = np.concatenate(\n\t            [input_ids, np.full((batch_size, 1), self.tokenizer.eos_token_id, dtype=np.int32)], axis=-1\n\t        )\n", "        return input_ids\n\t    def random_spans_noise_mask(self, length):\n\t        \"\"\"This function is copy of `random_spans_helper <https://github.com/google-research/text-to-text-transfer-transformer/blob/84f8bcc14b5f2c03de51bd3587609ba8f6bbd1cd/t5/data/preprocessors.py#L2682>`__ .\n\t        Noise mask consisting of random spans of noise tokens.\n\t        The number of noise tokens and the number of noise spans and non-noise spans\n\t        are determined deterministically as follows:\n\t        num_noise_tokens = round(length * noise_density)\n\t        num_nonnoise_spans = num_noise_spans = round(num_noise_tokens / mean_noise_span_length)\n\t        Spans alternate between non-noise and noise, beginning with non-noise.\n\t        Subject to the above restrictions, all masks are equally likely.\n", "        Args:\n\t            length: an int32 scalar (length of the incoming token sequence)\n\t            noise_density: a float - approximate density of output mask\n\t            mean_noise_span_length: a number\n\t        Returns:\n\t            a boolean tensor with shape [length]\n\t        \"\"\"\n\t        orig_length = length\n\t        num_noise_tokens = int(np.round(length * self.noise_density))\n\t        # avoid degeneracy by ensuring positive numbers of noise and nonnoise tokens.\n", "        num_noise_tokens = min(max(num_noise_tokens, 1), length - 1)\n\t        num_noise_spans = int(np.round(num_noise_tokens / self.mean_noise_span_length))\n\t        # avoid degeneracy by ensuring positive number of noise spans\n\t        num_noise_spans = max(num_noise_spans, 1)\n\t        num_nonnoise_tokens = length - num_noise_tokens\n\t        # pick the lengths of the noise spans and the non-noise spans\n\t        def _random_segmentation(num_items, num_segments):\n\t            \"\"\"Partition a sequence of items randomly into non-empty segments.\n\t            Args:\n\t                num_items: an integer scalar > 0\n", "                num_segments: an integer scalar in [1, num_items]\n\t            Returns:\n\t                a Tensor with shape [num_segments] containing positive integers that add\n\t                up to num_items\n\t            \"\"\"\n\t            mask_indices = np.arange(num_items - 1) < (num_segments - 1)\n\t            np.random.shuffle(mask_indices)\n\t            first_in_segment = np.pad(mask_indices, [[1, 0]])\n\t            segment_id = np.cumsum(first_in_segment)\n\t            # count length of sub segments assuming that list is sorted\n", "            _, segment_length = np.unique(segment_id, return_counts=True)\n\t            return segment_length\n\t        noise_span_lengths = _random_segmentation(num_noise_tokens, num_noise_spans)\n\t        nonnoise_span_lengths = _random_segmentation(num_nonnoise_tokens, num_noise_spans)\n\t        interleaved_span_lengths = np.reshape(\n\t            np.stack([nonnoise_span_lengths, noise_span_lengths], axis=1), [num_noise_spans * 2]\n\t        )\n\t        span_starts = np.cumsum(interleaved_span_lengths)[:-1]\n\t        span_start_indicator = np.zeros((length,), dtype=np.int8)\n\t        span_start_indicator[span_starts] = True\n", "        span_num = np.cumsum(span_start_indicator)\n\t        is_noise = np.equal(span_num % 2, 1)\n\t        return is_noise[:orig_length]\n\tdef compute_input_and_target_lengths(inputs_length, noise_density, mean_noise_span_length):\n\t    \"\"\"This function is copy of `random_spans_helper <https://github.com/google-research/text-to-text-transfer-transformer/blob/84f8bcc14b5f2c03de51bd3587609ba8f6bbd1cd/t5/data/preprocessors.py#L2466>`__ .\n\t    Training parameters to avoid padding with random_spans_noise_mask.\n\t    When training a model with random_spans_noise_mask, we would like to set the other\n\t    training hyperparmeters in a way that avoids padding.\n\t    This function helps us compute these hyperparameters.\n\t    We assume that each noise span in the input is replaced by extra_tokens_per_span_inputs sentinel tokens,\n", "    and each non-noise span in the targets is replaced by extra_tokens_per_span_targets sentinel tokens.\n\t    This function tells us the required number of tokens in the raw example (for split_tokens())\n\t    as well as the length of the encoded targets. Note that this function assumes\n\t    the inputs and targets will have EOS appended and includes that in the reported length.\n\t    Args:\n\t        inputs_length: an integer - desired length of the tokenized inputs sequence\n\t        noise_density: a float\n\t        mean_noise_span_length: a float\n\t    Returns:\n\t        tokens_length: length of original text in tokens\n", "        targets_length: an integer - length in tokens of encoded targets sequence\n\t    \"\"\"\n\t    def _tokens_length_to_inputs_length_targets_length(tokens_length):\n\t        num_noise_tokens = int(round(tokens_length * noise_density))\n\t        num_nonnoise_tokens = tokens_length - num_noise_tokens\n\t        num_noise_spans = int(round(num_noise_tokens / mean_noise_span_length))\n\t        # inputs contain all nonnoise tokens, sentinels for all noise spans\n\t        # and one EOS token.\n\t        _input_length = num_nonnoise_tokens + num_noise_spans + 1\n\t        _output_length = num_noise_tokens + num_noise_spans + 1\n", "        return _input_length, _output_length\n\t    tokens_length = inputs_length\n\t    while _tokens_length_to_inputs_length_targets_length(tokens_length + 1)[0] <= inputs_length:\n\t        tokens_length += 1\n\t    inputs_length, targets_length = _tokens_length_to_inputs_length_targets_length(tokens_length)\n\t    # minor hack to get the targets length to be equal to inputs length\n\t    # which is more likely to have been set to a nice round number.\n\t    if noise_density == 0.5 and targets_length > inputs_length:\n\t        tokens_length -= 1\n\t        targets_length -= 1\n", "    return tokens_length, targets_length\n\tdef run_t5_pretraining(datasets, model, tokenizer, max_seq_length, output_dir, debug=False,\n\t                       max_train_instance: Optional[int] = None):\n\t    column_names = datasets[\"train\"].column_names\n\t    if debug:\n\t        datasets['train'] = datasets['train'].select(range(100))\n\t    # We tokenize every text, then concatenate them together before splitting them in smaller parts.\n\t    # Since we make sure that all sequences are of the same length, no attention_mask is needed.\n\t    datasets = datasets.map(lambda examples: pretrain_tokenize_function(examples, tokenizer),\n\t                            batched=True, remove_columns=column_names)\n", "    # T5-like span masked language modeling will fuse consecutively masked tokens to a single sentinel token.\n\t    # To ensure that the input length is `max_seq_length`, we need to increase the maximum length\n\t    # according to `mlm_probability` and `mean_noise_span_length`. We can also define the label length accordingly.\n\t    expanded_inputs_length, targets_length = compute_input_and_target_lengths(\n\t        inputs_length=max_seq_length,\n\t        noise_density=0.15,\n\t        mean_noise_span_length=3.0,\n\t    )\n\t    datasets = datasets.map(lambda examples: group_texts(examples, expanded_inputs_length), batched=True)\n\t    # This one will take care of randomly masking the tokens.\n", "    data_collator = DataCollatorForT5MLM(\n\t        tokenizer=tokenizer,\n\t        noise_density=0.15,\n\t        mean_noise_span_length=3.0,\n\t        input_length=max_seq_length,\n\t        target_length=targets_length,\n\t        pad_token_id=model.config.pad_token_id,\n\t        decoder_start_token_id=model.config.decoder_start_token_id,\n\t    )\n\t    train(model, tokenizer, train_dataset=datasets['train'], output_dir=output_dir,\n", "          optimizer_name='adafactor', learning_rate=0.01, lr_scheduler_type='constant', data_collator=data_collator,\n\t          debug=debug)\n\tdef seq2seq_preprocess_dataset(examples,\n\t                               tokenizer: PreTrainedTokenizerBase,\n\t                               text_column: str,\n\t                               target_column: str,\n\t                               max_source_length: int,\n\t                               max_target_length: int):\n\t    padding = False\n\t    # remove pairs where at least one record is None\n", "    inputs, targets = [], []\n\t    for i in range(len(examples[text_column])):\n\t        if examples[text_column][i] is not None and examples[target_column][i] is not None:\n\t            inputs.append(examples[text_column][i])\n\t            targets.append(examples[target_column][i])\n\t    model_inputs = tokenizer(inputs, max_length=max_source_length, padding=padding, truncation=True)\n\t    # Setup the tokenizer for targets\n\t    with tokenizer.as_target_tokenizer():\n\t        labels = tokenizer(targets, max_length=max_target_length, padding=padding, truncation=True)\n\t    # If we are padding here, replace all tokenizer.pad_token_id in the labels by -100 when we want to ignore\n", "    # padding in the loss.\n\t    if padding == \"max_length\":\n\t        labels[\"input_ids\"] = [\n\t            [(l if l != tokenizer.pad_token_id else -100) for l in label] for label in labels[\"input_ids\"]\n\t        ]\n\t    model_inputs[\"labels\"] = labels[\"input_ids\"]\n\t    return model_inputs\n\tdef run_t5_seq2seq(datasets, model, tokenizer, max_seq_length, output_dir, debug=False,\n\t                   max_train_instance: Optional[int] = None):\n\t    column_names = datasets[\"train\"].column_names\n", "    if debug:\n\t        datasets['train'] = datasets['train'].select(range(100))\n\t    datasets = datasets.map(lambda examples: seq2seq_preprocess_dataset(examples, tokenizer, text_column=\"source_text\",\n\t                                                                        target_column=\"target_text\",\n\t                                                                        max_source_length=max_seq_length,\n\t                                                                        max_target_length=max_seq_length),\n\t                            batched=True, remove_columns=column_names)\n\t    if max_train_instance is not None:\n\t        datasets['train'] = datasets['train'].select(range(max_train_instance))\n\t    label_pad_token_id = tokenizer.pad_token_id if tokenizer.pad_token_id else -100\n", "    data_collator = DataCollatorForSeq2Seq(\n\t        tokenizer=tokenizer,\n\t        model=model,\n\t        label_pad_token_id=label_pad_token_id,\n\t    )\n\t    train(model, tokenizer, train_dataset=datasets['train'], output_dir=output_dir,\n\t          optimizer_name='adafactor', learning_rate=0.0001, lr_scheduler_type='constant', data_collator=data_collator,\n\t          debug=debug)\n"]}
{"filename": "autocontrastive_gen/head_training/head_training_utils.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom transformers import Trainer, TrainingArguments\n\tdef pretrain_tokenize_function(examples, tokenizer):\n\t    # tokenization for pretraining-like fine-tuning, where the texts are chunked and we do not need\n\t    # padding/truncation/attention mask\n\t    return tokenizer([t for t in examples['source_text']], return_attention_mask=False, return_tensors='np')\n\tdef group_texts(examples, inputs_length):\n", "    \"\"\"\n\t    Based on https://github.com/huggingface/transformers/blob/main/examples/flax/language-modeling/run_t5_mlm_flax.py\n\t    \"\"\"\n\t    # Concatenate all texts.\n\t    concatenated_examples = {'input_ids': sum(examples['input_ids'], [])}\n\t    total_length = len(concatenated_examples['input_ids'])\n\t    # We drop the small remainder\n\t    if total_length >= inputs_length:\n\t        total_length = (total_length // inputs_length) * inputs_length\n\t    # Split by chunks of max_len.\n", "    result = {\n\t        k: [t[i: i + inputs_length] for i in range(0, total_length, inputs_length)]\n\t        for k, t in concatenated_examples.items()\n\t    }\n\t    return result\n\tdef train(model, tokenizer, train_dataset, output_dir, optimizer_name, learning_rate, lr_scheduler_type, data_collator,\n\t          debug=False):\n\t    training_args = TrainingArguments(\n\t        output_dir=output_dir,\n\t        num_train_epochs=3, per_device_train_batch_size=16, per_device_eval_batch_size=8,\n", "        evaluation_strategy='steps', eval_steps=1000, save_strategy='epoch',\n\t        optim=optimizer_name,\n\t        lr_scheduler_type=lr_scheduler_type,\n\t        learning_rate=learning_rate,\n\t    )\n\t    trainer = Trainer(\n\t        model=model,\n\t        args=training_args,\n\t        train_dataset=train_dataset,\n\t        eval_dataset=train_dataset.select(range(50)) if not debug else train_dataset,\n", "        tokenizer=tokenizer,\n\t        data_collator=data_collator,\n\t    )\n\t    trainer.train()\n\tdef get_head_training_function(model_config, is_seq2seq_task):\n\t    from autocontrastive_gen.head_training.gpt2_training import run_gpt2_pretraining, run_gpt2_downstream_training\n\t    from autocontrastive_gen.head_training.t5_training import run_t5_pretraining, run_t5_seq2seq\n\t    if model_config.is_encoder_decoder:  # T5\n\t        if is_seq2seq_task:\n\t            return run_t5_seq2seq\n", "        else:\n\t            return run_t5_pretraining\n\t    else:\n\t        if is_seq2seq_task:\n\t            return run_gpt2_downstream_training\n\t        else:\n\t            return run_gpt2_pretraining\n"]}
{"filename": "autocontrastive_gen/data_processing/preprocessing_functions.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tdef wikitext_dataset_preprocess(examples):\n\t    def preprocess_wikitext(text):\n\t        wikitext_replacements = [(\" 's \", \"'s \"), (\"s ' \", \"s' \"), (' , ', ', '), (' ( ', ' ('), (' )', ')'),\n\t                                 (' : ', ': '), (' ; ', '; '), (' . ', '. '), (' %', '%'),\n\t                                 (' @-@ ', '-'), (' @.@ ', '.'), (' @,@ ', ',')]\n\t        for original, replacement in wikitext_replacements:\n", "            text = text.replace(original, replacement)\n\t        return text\n\t    def filter_wikitext(source_text):\n\t        return len(source_text.split()) > 50\n\t    source_column = 'text'\n\t    sources = []\n\t    for i in range(len(examples[source_column])):\n\t        source = examples[source_column][i]\n\t        if source is not None and filter_wikitext(source):\n\t            sources.append(preprocess_wikitext(source))\n", "    new_examples = {\n\t        source_column: sources,\n\t    }\n\t    return new_examples\n\tdef wikinews_dataset_preprocess(examples):\n\t    def get_main_text(news_text):\n\t        return sorted(news_text.split(\":\"), key=len)[-1].strip()\n\t    def filter_wikinews(source_text):\n\t        text = get_main_text(source_text)\n\t        return len(text.split()) > 50\n", "    def preprocess_wikinews(text):\n\t        main_text = get_main_text(text)\n\t        main_text = main_text.replace('Pillars of Wikinews writing Writing an article ', '')\n\t        return main_text\n\t    source_column = 'text'\n\t    sources = []\n\t    for source_text in examples[source_column]:\n\t        if source_text is not None and filter_wikinews(source_text):\n\t            sources.append(preprocess_wikinews(source_text))\n\t    new_examples = {\n", "        source_column: sources,\n\t    }\n\t    return new_examples\n\tdef bookcorpus_dataset_preprocess(examples):\n\t    def preprocess_bookcorpus(text):\n\t        bookcorpus_replacements = [(\" '\", \"'\"), (' , ', ', '), (' .', '.'), (' ?', '?'), (\" n't\", \"n't\"),\n\t                                   (' : ', ': '), (' ; ', '; '), (' ( ', ' ('), (' )', ')'), (' %', '%')]\n\t        for original, replacement in bookcorpus_replacements:\n\t            text = text.replace(original, replacement)\n\t        return text\n", "    def filter_bookcorpus(source_text):\n\t        return len(source_text.split()) > 50\n\t    source_column = 'text'\n\t    sources = []\n\t    for source_text in examples[source_column]:\n\t        if source_text is not None and filter_bookcorpus(source_text):\n\t            sources.append(preprocess_bookcorpus(source_text))\n\t    new_examples = {\n\t        source_column: sources,\n\t    }\n", "    return new_examples\n"]}
{"filename": "autocontrastive_gen/data_processing/__init__.py", "chunked_list": []}
{"filename": "autocontrastive_gen/data_processing/dataset_catalog.py", "chunked_list": ["#\n\t#  Copyright (c) 2023 IBM Corp.\n\t#  Licensed under the Apache License, Version 2.0 (the \"License\");\n\t#  you may not use this file except in compliance with the License.\n\t#  You may obtain a copy of the License at\n\t#\n\t#  http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t#  Unless required by applicable law or agreed to in writing, software\n\t#  distributed under the License is distributed on an \"AS IS\" BASIS,\n", "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t#  See the License for the specific language governing permissions and\n\t#  limitations under the License.\n\t#\n\tfrom dataclasses import dataclass, field\n\tfrom typing import Callable, Mapping\n\tfrom datasets import load_dataset, DatasetDict\n\tfrom autocontrastive_gen.data_processing.preprocessing_functions import wikitext_dataset_preprocess, \\\n\t    wikinews_dataset_preprocess, bookcorpus_dataset_preprocess\n\t@dataclass\n", "class Dataset:\n\t    hf_dataset_name: str\n\t    source_column: str\n\t    target_column: str = None\n\t    hf_subset_name: str = None\n\t    dataset_preprocessing_func: Callable = None\n\t    extra_kwargs: Mapping = field(default_factory=dict)\n\t    def load(self) -> DatasetDict:\n\t        dataset_dict = load_dataset(self.hf_dataset_name, self.hf_subset_name, **self.extra_kwargs)\n\t        if self.dataset_preprocessing_func is not None:\n", "            dataset_dict = dataset_dict.map(self.dataset_preprocessing_func,\n\t                                            batched=True, remove_columns=list(dataset_dict['train'].column_names))\n\t        dataset_dict = dataset_dict.rename_column(self.source_column, 'source_text')\n\t        if self.target_column:\n\t            dataset_dict = dataset_dict.rename_column(self.target_column, 'target_text')\n\t        if 'validation' not in dataset_dict:\n\t            dataset_dict['validation'] = dataset_dict['train']\n\t        return dataset_dict\n\t    def is_seq2seq_task(self):\n\t        return self.target_column is not None\n", "\"\"\"\n\tTo create an auth token generate a token in https://huggingface.co/settings/tokens; This is required for loading the\n\tWikiNews dataset.\n\t\"\"\"\n\tHF_AUTH_TOKEN = None\n\tclass DatasetsCatalog:\n\t    wikitext_103 = Dataset('wikitext', hf_subset_name='wikitext-103-raw-v1', source_column='text',\n\t                           dataset_preprocessing_func=wikitext_dataset_preprocess)\n\t    wikinews = Dataset('bigscience-data/roots_en_wikinews', source_column='text',\n\t                       dataset_preprocessing_func=wikinews_dataset_preprocess,\n", "                       extra_kwargs={'use_auth_token': HF_AUTH_TOKEN})  # Note: requires setting HF_AUTH_TOKEN\n\t    bookcorpus = Dataset('bookcorpus', source_column='text', dataset_preprocessing_func=bookcorpus_dataset_preprocess)\n\t    cc_en = Dataset('cc100', source_column='text', extra_kwargs={'lang': 'en'})\n\t    @staticmethod\n\t    def all_datasets():\n\t        return [var for var in vars(DatasetsCatalog)\n\t                if not var.startswith('__') and not callable(getattr(DatasetsCatalog, var))]\n"]}
