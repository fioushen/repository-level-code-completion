{"filename": "mmsdk/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/__init__.py", "chunked_list": ["from mmsdk.mmdatasdk.computational_sequence.computational_sequence import computational_sequence as computational_sequence\n\tfrom mmsdk.mmdatasdk.dataset.dataset import mmdataset as mmdataset\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets import CMU_MOSEI as cmu_mosei\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets import CMU_MOSI as cmu_mosi\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets import POM as pom\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets import SocialIQ as socialiq\n"]}
{"filename": "mmsdk/mmdatasdk/configurations/metadataconfigs.py", "chunked_list": ["featuresetMetadataTemplate=\t[\n\t\t\t\t\"root name\",#name of the featureset\n\t\t\t\t\"computational sequence description\",#name of the featureset\n\t\t\t\t\"dimension names\"\n\t\t\t\t\"computational sequence version\",#the version of featureset\n\t\t\t\t\"alignment compatible\",#name of the featureset\n\t\t\t\t\"dataset name\",#featureset belongs to which dataset\n\t\t\t\t\"dataset version\",#the version of dataset\n\t\t\t\t\"creator\",#the author of the featureset\n\t\t\t\t\"contact\",#the contact of the featureset\n", "\t\t\t\"featureset bib citation\",#citation for the paper related to this featureset\n\t\t\t\t\"dataset bib citation\"#citation for the dataset\n\t\t\t\t]\n"]}
{"filename": "mmsdk/mmdatasdk/configurations/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/dataset/dataset.py", "chunked_list": ["from mmsdk.mmdatasdk import log, computational_sequence\n\timport sys\n\timport numpy\n\timport time\n\tfrom tqdm import tqdm\n\timport os\n\t#specified for numerical inconsistencies within floating points - if abs l1 distance two numbers is less than this, then they are the same. \n\t#only use for interval comparison.\n\tepsilon=10e-6\n\tclass mmdataset:\n", "\tdef __init__(self,recipe,destination=None):\n\t\t\tself.computational_sequences={}\n\t\t\tif type(recipe) is str:\n\t\t\t\tif os.path.isdir(recipe) is False:\n\t\t\t\t\tlog.error(\"Dataset folder does not exist ...\",error=True)\n\t\t\t\tfrom os import listdir\n\t\t\t\tfrom os.path import isfile, join\n\t\t\t\tcomputational_sequence_list = [f for f in listdir(recipe) if isfile(join(recipe, f)) and f[-4:]=='.csd']\n\t\t\t\tfor computational_sequence_fname in computational_sequence_list:\n\t\t\t\t\tthis_sequence=computational_sequence(join(recipe,computational_sequence_fname))\n", "\t\t\t\tself.computational_sequences[this_sequence.metadata[\"root name\"]]=this_sequence\n\t\t\telif type(recipe) is dict:\n\t\t\t\tfor entry, address in recipe.items():\n\t\t\t\t\tself.computational_sequences[entry]=computational_sequence(address,destination)\n\t\t\telif type(recipe) is list:\n\t\t\t\t#TODO: computational sequence with uuid\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tlog.error(\"Cannot create a dataset with the given recipe. Exiting ...!\",error=True)\n\t\t\tif len(self.computational_sequences.keys())==0:\n", "\t\t\tlog.error(\"Dataset failed to initialize ...\", error=True)\n\t\t\tlog.success(\"Dataset initialized successfully ... \")\n\t\tdef __getitem__(self,key):\n\t\t\tif key not in list(self.computational_sequences.keys()):\n\t\t\t\tlog.error(\"Computational sequence does not exist ...\",error=True)\n\t\t\treturn self.computational_sequences[key]\n\t\tdef keys(self):\n\t\t\treturn self.computational_sequences.keys()\n\t\tdef add_computational_sequences(self,recipe,destination):\n\t\t\tfor entry, address in recipe.items():\n", "\t\t\tif entry in self.computational_sequences:\n\t\t\t\t\tlog.error(\"Dataset already contains <%s> computational sequence ...\"%entry)\n\t\t\t\tself.computational_sequences[entry]=computational_sequence(address,destination)\n\t\tdef bib_citations(self,outfile=None):\n\t\t\toutfile=sys.stdout if outfile is None else outfile\n\t\t\tsdkbib='@article{zadeh2018multi, title={Multi-attention recurrent network for human communication comprehension}, author={Zadeh, Amir and Liang, Paul Pu and Poria, Soujanya and Vij, Prateek and Cambria, Erik and Morency, Louis-Philippe}, journal={arXiv preprint arXiv:1802.00923}, year={2018}}'\n\t\t\toutfile.write('mmsdk bib: '+sdkbib+'\\n\\n')\n\t\t\tfor entry,compseq in self.computational_sequences.items():\n\t\t\t\tcompseq.bib_citations(outfile)\n\t\tdef unify(self,active=True):\n", "\t\tlog.status(\"Unify was called ...\")\n\t\t\tall_vidids={}\n\t\t\tviolators=[]\n\t\t\tall_keys={}\n\t\t\tfor seq_key in list(self.computational_sequences.keys()):\n\t\t\t\tall_keys[seq_key]=[vidid.split(\"[\")[0] for vidid in self.computational_sequences[seq_key].data.keys()]\n\t\t\tvalids=set.intersection(*[set(all_keys[x]) for x in all_keys])\n\t\t\tviolators=set()\n\t\t\tfor seq_key in list(self.computational_sequences.keys()):\n\t\t\t\tviolators=violators.union(set([vidid.split(\"[\")[0] for vidid in self.computational_sequences[seq_key].data.keys()])-valids)\n", "\t\tif len(violators) >0 :\n\t\t\t\tfor violator in violators:\n\t\t\t\t\tlog.error(\"%s entry is not shared among all sequences, removing it ...\"%violator,error=False)\n\t\t\t\t\tif active==True:\n\t\t\t\t\t\tself.remove_id(violator,purge=True)\n\t\t\tif active==False and len(violators)>0:\n\t\t\t\tlog.error(\"%d violators remain, alignment will fail if called ...\"%len(violators),error=True)\n\t\t\tlog.success(\"Unify completed ...\")\n\t\tdef hard_unify(self,active=True):\n\t\t\tlog.status(\"Hard unify was called ...\")\n", "\t\tall_vidids={}\n\t\t\tviolators=[]\n\t\t\tall_keys={}\n\t\t\tfor seq_key in list(self.computational_sequences.keys()):\n\t\t\t\tall_keys[seq_key]=[vidid for vidid in self.computational_sequences[seq_key].data.keys()]\n\t\t\tvalids=set.intersection(*[set(all_keys[x]) for x in all_keys])\n\t\t\tfor seq_key in list(self.computational_sequences.keys()):\n\t\t\t\thard_unify_compatible=all([\"[\" in vidid for vidid in self.computational_sequences[seq_key].data.keys()])\n\t\t\t\tif hard_unify_compatible is False:\n\t\t\t\t\tlog.error(\"Hard unify can only be done on aligned computational sequences, %s violated this ... Exiting ...\"%seq_key)\n", "\t\t\tviolators=set([vidid for vidid in self.computational_sequences[seq_key].data.keys()])-valids\n\t\t\t\tfor violator in violators:\n\t\t\t\t\tif active==True:\n\t\t\t\t\t\tlog.error(\"%s entry is not shared among all sequences, removing it ...\"%violator,error=False)\n\t\t\t\t\t\tself[seq_key]._remove_id(violator,purge=False)\n\t\t\t\tif active==False and len(violators)>0:\n\t\t\t\t\tlog.error(\"%d violators remain, alignment will fail if called ...\"%len(violators),error=True)\n\t\t\tlog.success(\"Hard unify completed ...\")\n\t\tdef remove_id(self,entry_id,purge=False):\n\t\t\tfor key,compseq in self.computational_sequences.items():\n", "\t\t\tcompseq._remove_id(entry_id,purge=purge)\n\t\tdef align(self,reference,collapse_functions=None,replace=True):\n\t\t\taligned_output={}\n\t\t\tfor sequence_name in self.computational_sequences.keys():\n\t\t\t\taligned_output[sequence_name]={}\n\t\t\tif reference not in self.computational_sequences.keys():\n\t\t\t\tlog.error(\"Computational sequence <%s> does not exist in dataset\"%reference,error=True)\n\t\t\trefseq=self.computational_sequences[reference].data\n\t\t\t#unifying the dataset, removing any entries that are not in the reference computational sequence\n\t\t\tself.unify()\n", "\t\t#building the relevant entries to the reference - what we do in this section is simply removing all the [] from the entry ids and populating them into a new dictionary\n\t\t\tlog.status(\"Pre-alignment based on <%s> computational sequence started ...\"%reference)\n\t\t\trelevant_entries=self.__get_relevant_entries(reference)\n\t\t\tlog.status(\"Alignment starting ...\")\n\t\t\tpbar = log.progress_bar(total=len(refseq.keys()),unit=\" Computational Sequence Entries\",leave=False)\n\t\t\tpbar.set_description(\"Overall Progress\")\n\t\t\tfor entry_key in list(refseq.keys()):\n\t\t\t\tpbar_small=log.progress_bar(total=refseq[entry_key]['intervals'].shape[0],unit=\" Segments\",leave=False)\n\t\t\t\tpbar_small.set_description(\"Aligning %s\"%entry_key)\n\t\t\t\tfor i in range(refseq[entry_key]['intervals'].shape[0]):\n", "\t\t\t\t#interval for the reference sequence\n\t\t\t\t\tref_time=refseq[entry_key]['intervals'][i,:]\n\t\t\t\t\t#we drop zero or very small sequence lengths - no align for those\n\t\t\t\t\tif (abs(ref_time[0]-ref_time[1])<epsilon):\n\t\t\t\t\t\tpbar_small.update(1)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t#aligning all sequences (including ref sequence) to ref sequence\n\t\t\t\t\tfor otherseq_key in list(self.computational_sequences.keys()):\n\t\t\t\t\t\tif otherseq_key != reference:\n\t\t\t\t\t\t\tintersects,intersects_features=self.__intersect_and_copy(ref_time,relevant_entries[otherseq_key][entry_key],epsilon)\n", "\t\t\t\t\telse:\n\t\t\t\t\t\t\tintersects,intersects_features=refseq[entry_key]['intervals'][i,:][None,:],refseq[entry_key]['features'][i,:][None,:]\n\t\t\t\t\t\t#there were no intersections between reference and subject computational sequences for the entry\n\t\t\t\t\t\tif intersects.shape[0] == 0:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t#collapsing according to the provided functions\n\t\t\t\t\t\tif type(collapse_functions) is list:\n\t\t\t\t\t\t\tintersects,intersects_features=self.__collapse(intersects,intersects_features,collapse_functions)\n\t\t\t\t\t\tif(intersects.shape[0]!=intersects_features.shape[0]):\n\t\t\t\t\t\t\tlog.error(\"Dimension mismatch between intervals and features when aligning <%s> computational sequences to <%s> computational sequence\"%(otherseq_key,reference),error=True)\n", "\t\t\t\t\taligned_output[otherseq_key][entry_key+\"[%d]\"%i]={}\n\t\t\t\t\t\taligned_output[otherseq_key][entry_key+\"[%d]\"%i][\"intervals\"]=intersects\n\t\t\t\t\t\taligned_output[otherseq_key][entry_key+\"[%d]\"%i][\"features\"]=intersects_features\n\t\t\t\t\tpbar_small.update(1)\n\t\t\t\tpbar_small.close()\n\t\t\t\tpbar.update(1)\n\t\t\tpbar.close()\n\t\t\tlog.success(\"Alignment to <%s> complete.\"%reference)\n\t\t\tif replace is True:\n\t\t\t\tlog.status(\"Replacing dataset content with aligned computational sequences\")\n", "\t\t\tself.__set_computational_sequences(aligned_output)\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\tlog.status(\"Creating new dataset with aligned computational sequences\")\n\t\t\t\tnewdataset=mmdataset({})\n\t\t\t\tnewdataset.__set_computational_sequences(aligned_output,metadata_copy=False)\n\t\t\t\treturn newdataset\n\t\tdef __collapse(self,intervals,features,functions):\n\t\t\t#we simply collapse the intervals to (1,2) matrix\n\t\t\tnew_interval=numpy.array([[intervals.min(),intervals.max()]])\n", "\t\ttry:\n\t\t\t\tnew_features=numpy.concatenate([function(intervals,features) for function in functions],axis=0)\n\t\t\t\tif len(new_features.shape)==1:\n\t\t\t\t\tnew_features=new_features[None,:]\n\t\t\texcept:\n\t\t\t\tlog.error(\"Cannot collapse given the set of functions. Please check for exceptions in your functions ...\", error=True)\n\t\t\treturn new_interval,new_features\n\t\t#TODO: This is not passive-align safe\n\t\tdef revert(self,replace=True):\n\t\t\treverted_dataset={x:{} for x in self.keys()}\n", "\t\tlog.status(\"Revert was called ...\")\n\t\t\tif len(self.keys())==0:\n\t\t\t\tlog.error(\"The dataset contains no computational sequences ... Exiting!\",error=True)\n\t\t\tself.hard_unify()\n\t\t\tall_keys=list(self[list(self.keys())[0]].keys())\n\t\t\tif len(all_keys)==0:\n\t\t\t\tlog.error(\"No entries in computational sequences or removed during unify ... Exiting!\")\n\t\t\tunique_unnumbered_entries={}\n\t\t\tfor key in all_keys:\n\t\t\t\tif key.split('[')[0] not in unique_unnumbered_entries:\n", "\t\t\t\tunique_unnumbered_entries[key.split('[')[0]]=[]\n\t\t\t\tunique_unnumbered_entries[key.split('[')[0]].append(int(key.split('[')[1][:-1]))\n\t\t\tpbar = tqdm(total=len(unique_unnumbered_entries.keys()),unit=\" Unique Sequence Entries\",leave=False)\n\t\t\tpbar.set_description(\"Reversion Progress\")\n\t\t\tfor key in unique_unnumbered_entries.keys():\n\t\t\t\tunique_unnumbered_entries[key].sort()\n\t\t\t\tfor cs_key in reverted_dataset.keys():\n\t\t\t\t\tintervals=numpy.concatenate([self[cs_key][str('%s[%d]'%(key,i))][\"intervals\"] for i in unique_unnumbered_entries[key]],axis=0)\n\t\t\t\t\tfeatures=numpy.concatenate([self[cs_key][str('%s[%d]'%(key,i))][\"features\"] for i in unique_unnumbered_entries[key]],axis=0)\n\t\t\t\t\treverted_dataset[cs_key][key]={\"intervals\":intervals,\"features\":features}\n", "\t\t\tpbar.update(1)\n\t\t\tpbar.close()\n\t\t\tlog.success(\"Reversion completed ...\")\n\t\t\tif replace is True:\n\t\t\t\tlog.status(\"Replacing dataset content with reverted computational sequences\")\n\t\t\t\tself.__set_computational_sequences(reverted_dataset)\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\tlog.status(\"Creating new dataset with reverted computational sequences\")\n\t\t\t\tnewdataset=mmdataset({})\n", "\t\t\tnewdataset.__set_computational_sequences(reverted_dataset,metadata_copy=False)\n\t\t\t\treturn newdataset\t\n\t\tdef impute(self,ref_key,imputation_fn=numpy.zeros):\n\t\t\tlog.status(\"Imputation called with function: %s ...\"%str(imputation_fn.__name__))\n\t\t\tother_keys=list(self.keys())\n\t\t\tother_keys.remove(ref_key)\n\t\t\tother_keys_dims={x:list(self[x][list(self[x].keys())[0]][\"features\"].shape[1:]) for x in other_keys}\n\t\t\tpbar = tqdm(total=len(self[ref_key].keys()),unit=\" Reference Computational Sequence Entries\",leave=False)\n\t\t\tpbar.set_description(\"Imputation Progress\")\n\t\t\tfor seg_key in self[ref_key].keys():\n", "\t\t\tfor other_key in other_keys:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tself[other_key][seg_key]\n\t\t\t\t\texcept:\n\t\t\t\t\t\tnum_entries=self[ref_key][seg_key][\"intervals\"].shape[0]\n\t\t\t\t\t\tself[other_key][seg_key]={\"intervals\":self[ref_key][seg_key][\"intervals\"],\"features\":imputation_fn([num_entries]+other_keys_dims[other_key])}\n\t\t\t\t\t\t#log.status(\"Imputing %s,%s with function %s\"%(other_key,seg_key,str(imputation_fn.__name__)))\n\t\t\t\tpbar.update(1)\n\t\t\tpbar.close()\n\t\t\tlog.success(\"Imputation completed ...\")\n", "\t#setting the computational sequences in the dataset based on a given new_computational_sequence_data - may copy the metadata if there is already one\n\t\tdef __set_computational_sequences(self,new_computational_sequences_data,metadata_copy=True):\n\t\t\t#getting the old metadata from the sequence before replacing it. Even if this is a new computational sequence this will not cause an issue since old_metadat will just be empty\n\t\t\told_metadata={m:self.computational_sequences[m].metadata for m in list(self.computational_sequences.keys())}\n\t\t\tself.computational_sequences={}\n\t\t\tfor sequence_name in list(new_computational_sequences_data.keys()):\n\t\t\t\tself.computational_sequences[sequence_name]=computational_sequence(sequence_name)\n\t\t\t\tself.computational_sequences[sequence_name].setData(new_computational_sequences_data[sequence_name],sequence_name)\n\t\t\t\tif metadata_copy:\n\t\t\t\t\t#if there is no metadata for this computational sequences from the previous one or no previous computational sequenece\n", "\t\t\t\tif sequence_name not in list(old_metadata.keys()):\n\t\t\t\t\t\tlog.error (\"Metadata not available to copy ..., please provide metadata before writing to disk later\", error =False)\n\t\t\t\t\tself.computational_sequences[sequence_name].setMetadata(old_metadata[sequence_name],sequence_name)\n\t\t\t\tself.computational_sequences[sequence_name].rootName=sequence_name\n\t\tdef deploy(self,destination,filenames):\n\t\t\tif os.path.isdir(destination) is False:\n\t\t\t\tos.mkdir(destination)\n\t\t\tfor seq_key in list(self.computational_sequences.keys()):\n\t\t\t\tif seq_key not in list(filenames.keys()):\n\t\t\t\t\tlog.error(\"Filename for %s computational sequences not specified\"%seq_key)\n", "\t\t\tfilename=filenames[seq_key]\n\t\t\t\tif filename [:-4] != '.csd':\n\t\t\t\t\tfilename+='.csd'\n\t\t\t\tself.computational_sequences[seq_key].deploy(os.path.join(destination,filename))\n\t\tdef sort(self,sort_function=sorted):\n\t\t\t\"\"\" Sorts the computational sequence data based on the start time in intervals \n\t\t\t#Arguments\n\t\t\t\tself: The dataset object.\n\t\t\t\tsort_function: The function passed for sorting. This function will receive the intervals one by one for each key \n\t\t\t#Returns\n", "\t\t\tDoes not return any values - replaces in place\n\t\t\t\"\"\"\n\t\t\tfor key in list(self.keys()):\n\t\t\t\tfor csd in list(self[key].keys()):\n\t\t\t\t\tthis_intervals_np=numpy.array(self[key][csd][\"intervals\"])\n\t\t\t\t\tthis_features_np=numpy.array(self[key][csd][\"features\"])\n\t\t\t\t\tsorted_indices=sort_function(range(this_intervals_np.shape[0]),key=lambda x: this_intervals_np[x,0])\n\t\t\t\t\tsorted_this_intervals_np=this_intervals_np[sorted_indices,:]\n\t\t\t\t\tsorted_this_features_np=this_features_np[sorted_indices,:]\n\t\t\t\t\tself[key][csd][\"intervals\"]=sorted_this_intervals_np\n", "\t\t\t\tself[key][csd][\"features\"]=sorted_this_features_np\n\t\t#TODO: Add folds to this function\n\t\tdef get_tensors(self,seq_len,non_sequences=[],direction=False,folds=None):\n\t\t\t\"\"\" Returns trainable tensor from computational sequence data\n\t\t\t#Arguments\n\t\t\t\tself: The dataset object.\n\t\t\t\tseq_len: The maximum sequence length for the computational sequence entries, e.g. sentence length in words.\n\t\t\t\tdirection: True for right padding and False for left padding.\n\t\t\t\tfolds: The folds in which the dataset should be split.\n\t\t\t#Returns\n", "\t\t\tDictionary of numpy arrays with the same data type as computational sequences. Dictionaries include the same keys as the dataset\n\t\t\t\"\"\"\n\t\t\tcsds=list(self.keys())\n\t\t\tdef handle_none_folds():\n\t\t\t\treturn_folds={}\n\t\t\t\tfor key in list(self[csds[0]].keys()):\n\t\t\t\t\treturn_folds[key.split(\"[\")[0]]=None\n\t\t\t\treturn [list(return_folds.keys())]\n\t\t\tif folds==None:\n\t\t\t\tlog.error(\"No fold specified for get_tensors, defaulting to the first computational sequence ids\",error=False)\n", "\t\t\tfolds=handle_none_folds()\n\t\t\tself.hard_unify()\n\t\t\tdata=[]\n\t\t\toutput=[]\n\t\t\tfor i in range (len(folds)):\n\t\t\t\tdata.append({})\n\t\t\t\toutput.append({})\n\t\t\tdef lpad(this_array,direction):\n\t\t\t\tif direction==False:\n\t\t\t\t\ttemp_array=numpy.concatenate([numpy.zeros([seq_len]+list(this_array.shape[1:])),this_array],axis=0)[-seq_len:,...]\n", "\t\t\telse:\n\t\t\t\t\ttemp_array=numpy.concatenate([this_array,numpy.zeros([seq_len]+list(this_array.shape[1:]))],axis=0)[:seq_len,...]\n\t\t\t\treturn temp_array\n\t\t\tdef detect_entry_fold(entry,folds):\n\t\t\t\tentry_id=entry.split(\"[\")[0]\n\t\t\t\tfor i in range(len(folds)):\n\t\t\t\t\tif entry_id in folds[i]: return i\n\t\t\t\treturn None\n\t\t\tif len(csds)==0:\n\t\t\t\tlog.error(\"Dataset is empty, cannot get tensors. Exiting ...!\",error=True)\n", "\t\tfor i in range (len(folds)):\n\t\t\t\tfor csd in csds:\n\t\t\t\t\tdata[i][csd]=[]\n\t\t\tfor key in list(self[csds[0]].keys()):\n\t\t\t\twhich_fold=detect_entry_fold(key,folds)\n\t\t\t\tif which_fold==None:\n\t\t\t\t\tlog.error(\"Key %s doesn't belong to any fold ... \"%str(key),error=False)\n\t\t\t\t\tcontinue\n\t\t\t\tfor csd in list(self.keys()):\n\t\t\t\t\tthis_array=self[csd][key][\"features\"]\n", "\t\t\t\tif csd in non_sequences:\n\t\t\t\t\t\tdata[which_fold][csd].append(this_array)\n\t\t\t\t\telse:\n\t\t\t\t\t\tdata[which_fold][csd].append(lpad(this_array,direction))\n\t\t\tfor i in range(len(folds)):\n\t\t\t\tfor csd in csds:\n\t\t\t\t\toutput[i][csd]=numpy.array(data[i][csd])\n\t\t\treturn output\n\t\tdef __intersect_and_copy(self,ref,relevant_entry,epsilon):\n\t\t\tsub=relevant_entry[\"intervals\"]\n", "\t\tfeatures=relevant_entry[\"features\"]\n\t\t\t#copying and inverting the ref\n\t\t\tref_copy=ref.copy()\n\t\t\tref_copy[1]=-ref_copy[1]\n\t\t\tref_copy=ref_copy[::-1]\n\t\t\tsub_copy=sub.copy()\n\t\t\tsub_copy[:,0]=-sub_copy[:,0]\n\t\t\t#finding where intersect happens\n\t\t\twhere_intersect=(numpy.all((sub_copy-ref_copy)>(-epsilon),axis=1)==True)\n\t\t\tintersectors=sub[where_intersect,:]\n", "\t\tintersectors=numpy.concatenate([numpy.maximum(intersectors[:,0],ref[0])[:,None],numpy.minimum(intersectors[:,1],ref[1])[:,None]],axis=1)\n\t\t\tintersectors_features=features[where_intersect,:]\n\t\t\t#checking for boundary cases and also zero length\n\t\t\twhere_nonzero_len=numpy.where(abs(intersectors[:,0]-intersectors[:,1])>epsilon)\n\t\t\tintersectors_final=intersectors[where_nonzero_len]\n\t\t\tintersectors_features_final=intersectors_features[where_nonzero_len]\n\t\t\treturn intersectors_final,intersectors_features_final\n\t\t#TODO: Need tqdm bar for this as well\n\t\tdef __get_relevant_entries(self,reference):\n\t\t\trelevant_entries={}\n", "\t\trelevant_entries_np={}\n\t\t\t#pbar = tqdm(total=count,unit=\" Computational Sequence Entries\",leave=False)\n\t\t\tfor otherseq_key in set(list(self.computational_sequences.keys()))-set([reference]):\n\t\t\t\trelevant_entries[otherseq_key]={}\n\t\t\t\trelevant_entries_np[otherseq_key]={}\n\t\t\t\tsub_compseq=self.computational_sequences[otherseq_key] \n\t\t\t\tfor key in list(sub_compseq.data.keys()):              \n\t\t\t\t\tkeystripped=key.split('[')[0]                  \n\t\t\t\t\tif keystripped not in relevant_entries[otherseq_key]:                           \n\t\t\t\t\t\trelevant_entries[otherseq_key][keystripped]={}\n", "\t\t\t\t\trelevant_entries[otherseq_key][keystripped][\"intervals\"]=[]                     \n\t\t\t\t\t\trelevant_entries[otherseq_key][keystripped][\"features\"]=[]                                                            \n\t\t\t\t\trelev_intervals=self.computational_sequences[otherseq_key].data[key][\"intervals\"]                                             \n\t\t\t\t\trelev_features=self.computational_sequences[otherseq_key].data[key][\"features\"]         \n\t\t\t\t\tif len(relev_intervals.shape)<2:\n\t\t\t\t\t\trelev_intervals=relev_intervals[None,:]\n\t\t\t\t\t\trelev_features=relev_features[None,:]\n\t\t\t\t\trelevant_entries[otherseq_key][keystripped][\"intervals\"].append(relev_intervals)\n\t\t\t\t\trelevant_entries[otherseq_key][keystripped][\"features\"].append(relev_features)\n\t\t\t\tfor key in list(relevant_entries[otherseq_key].keys()):\n", "\t\t\t\trelev_intervals_np=numpy.concatenate(relevant_entries[otherseq_key][key][\"intervals\"],axis=0)                                 \n\t\t\t\t\trelev_features_np=numpy.concatenate(relevant_entries[otherseq_key][key][\"features\"],axis=0)\n\t\t\t\t\tsorted_indices=sorted(range(relev_intervals_np.shape[0]),key=lambda x: relev_intervals_np[x,0])                               \n\t\t\t\t\trelev_intervals_np=relev_intervals_np[sorted_indices,:]                         \n\t\t\t\t\trelev_features_np=relev_features_np[sorted_indices,:]\n\t\t\t\t\trelevant_entries_np[otherseq_key][key]={}\n\t\t\t\t\trelevant_entries_np[otherseq_key][key][\"intervals\"]=relev_intervals_np\n\t\t\t\t\trelevant_entries_np[otherseq_key][key][\"features\"]=relev_features_np\n\t\t\t\tlog.status(\"Pre-alignment done for <%s> ...\"%otherseq_key)\n\t\t\treturn relevant_entries_np\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/POM/pom.py", "chunked_list": ["raw={}\n\traw[\"words\"]='http://immortal.multicomp.cs.cmu.edu/POM/language/POM_TimestampedWords.csd'\n\traw[\"phonemes\"]='http://immortal.multicomp.cs.cmu.edu/POM/language/POM_TimestampedPhones.csd'\n\thighlevel={}\n\thighlevel[\"glove_vectors\"]='http://immortal.multicomp.cs.cmu.edu/POM/language/POM_TimestampedWordVectors.csd'\n\thighlevel[\"FACET 4.2\"]='http://immortal.multicomp.cs.cmu.edu/POM/visual/POM_Facet_42.csd'\n\thighlevel[\"OpenFace\"]='http://immortal.multicomp.cs.cmu.edu/POM/visual/POM_OpenFace2.csd'\n\thighlevel[\"COVAREP\"]='http://immortal.multicomp.cs.cmu.edu/POM/acoustic/POM_COVAREP.csd'\n\tlabels={}\n\tlabels[\"labels\"]=\"http://immortal.multicomp.cs.cmu.edu/POM/labels/POM_Labels.csd\"\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/POM/__init__.py", "chunked_list": ["from mmsdk.mmdatasdk.dataset.standard_datasets.POM import pom_std_folds as standard_folds\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets.POM.pom import raw, highlevel, labels\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/POM/pom_std_folds.py", "chunked_list": ["standard_train_fold=['202990', '116221', '110003', '265302', '33089', '286943', '122439', '126872', '43371', '81406', '246216', '41381', '118639', '121759', '193894', '106077', '193291', '100367', '79356', '241172', '112604', '202431', '127470', '241178', '193093', '52067', '112172', '264418', '238060', '238063', '214095', '127490', '270254', '71987', '16145', '266366', '237363', '342407', '29751', '81538', '29758', '243797', '230422', '223883', '276217', '137827', '223885', '102184', '224772', '113265', '275267', '57294', '25522', '243341', '272838', '136647', '94983', '98505', '135623', '194625', '17622', '74532', '97908', '22719', '245276', '270665', '233939', '57598', '86494', '229296', '42426', '57618', '58554', '78752', '238100', '19573', '89951', '72017', '233366', '34989', '220548', '218757', '327283', '216857', '270449', '139006', '270444', '187033', '98187', '224599', '238683', '22901', '93843', '133888', '230692', '128752', '47797', '119397', '204085', '38387', '208322', '15138', '252177', '48300', '254298', '192799', '105537', '92291', '88245', '90008', '126831', '203466', '130426', '239572', '53609', '49264', '273207', '46860', '247382', '190726', '342197', '87434', '209775', '106037', '21727', '232464', '224292', '234046', '22305', '28142', '210259', '33170', '35694', '128059', '251417', '31392', '40181', '16530', '272624', '84670', '41692', '120363', '96194', '188004', '49417', '132476', '263889', '114006', '257277', '140293', '201005', '224370', '65939', '223926', '247318', '223431', '275603', '7156', '22880', '100232', '112223', '241629', '113491', '62438', '187775', '119348', '216097', '248837', '257247', '26808', '251826', '231025', '116461', '128949', '75938', '220200', '270628', '213207', '255852', '81371', '134298', '139032', '299754', '255226', '194299', '238023', '306700', '74870', '226601', '189966', '56006', '172048', '267092', '46615', '284673', '68828', '201980', '288766', '236306', '118371', '75892', '225770', '236696', '102408', '219350', '301321', '301320', '80627', '197778', '80620', '233356', '240915', '69707', '125868', '205268', '11650', '188343', '61557', '207867', '17769', '37459', '31197', '272375', '213327', '181978', '208592', '111734', '227173', '261326', '211611', '188815', '224622', '215343', '181504', '245322', '66505', '267799', '42946', '23656', '128763', '221274', '35934', '72385', '92496', '49903', '110766', '110543', '221740', '113369', '193924', '56276', '59712', '193921', '229903', '96099', '136234', '43342', '49358', '244623', '244817', '121584', '84176', '187566', '89266', '121427', '273250', '88791', '70280', '88792', '33436', '100178', '88797', '206148', '33439', '198112', '105906', '22798', '224631', '265959', '112169', '30162', '233389', '223338', '123986', '111881', '265811', '223333', '107182', '210618', '25271', '125676', '43469', '229090', '33312', '255343', '237009', '224325', '19664', '243646', '101787', '233171', '273531', '26690', '46495', '56989', '46497', '49073', '273539', '132570', '76124', '17874', '179797', '24202', '103114', '206051', '124190', '251646', '75441', '81615', '28006', '256174', '154449', '271598', '129728', '83310', '96642', '136211', '106941', '29920', '270439', '288714', '81668', '31544', '122602', '45175', '274073', '60405', '116202', '131650', '118573', '57295', '225343', '106973', '108146', '206606', '50453', '210098', '90396', '102534', '21844', '66623', '204792', '30858', '38154', '128600', '125344', '204378', '274219', '259470', '206585', '21285', '212532', '130366', '248024', '10397', '110690', '193322', '107551', '245582', '191616', '102389', '58096', '197232', '110983', '21735', '228561', '225768', '22335', '292277', '224263', '274917', '210240', '245207', '27863', '223377', '257534', '70420', '257531', '25640', '201582', '238889', '136205', '282560', '130448', '101708', '114016', '262165', '22689', '40247', '271366', '260011', '82666', '18938', '90172', '210433', '279373', '244829', '290088', '190740', '44780', '202826', '206179', '222510', '109524', '75393', '131871', '251839', '88077', '48724', '21137', '230252', '97076', '219460', '61277', '244180', '96179', '112433', '102168', '69234', '98562', '52068', '96700', '178163', '208299', '263444', '121358', '298736', '275248', '215259', '100961', '97289', '208416', '258654', '283495', '219605', '219600', '245926', '128258', '116481', '341763', '236442', '22373', '63956', '125708', '238645', '63951', '94481', '34640', '45186', '45184', '228925', '262341', '24196', '31474', '262226', '34984', '107456', '101880', '93821', '190599', '273314', '93828', '243338', '84140', '95205', '101513', '92521', '89787', '105553', '79203', '23289', '224472', '209354', '108793', '53766', '199215', '252912', '112903', '112674', '245243', '122842', '58795', '58097', '69870', '22649', '112425', '239180', '125895', '295793', '190743', '267466', '80566', '274185', '247108', '107585', '100499', '22360', '50103', '207958', '261900', '102213', '261902', '63841', '59673', '22785', '33272', '30171', '186643', '80914', '219775', '239235', '278474', '27857', '80855', '231412', '238039', '70299', '323217', '227426', '101635', '43456', '200941', '188825', '282586', '73447', '61531', '221137', '15837', '176266', '24602', '73449', '206049', '19850', '188122', '56853', '71736', '46618', '28182', '109909', '255408', '40266', '180923', '216831', '110203', '74101', '244261', '130149', '19915', '73360', '87163', '87161', '220809', '114624', '290546', '96350', '24351', '266861', '94525', '290062', '208148', '46604', '183364', '231453', '10223', '252998', '243981', '104739', '79644', '89184', '110754', '116213', '21638', '266396', '36098', '89747', '192978', '210555', '102424', '24508', '106514', '24504', '50444', '79934', '255224', '24814', '213619', '125730', '222247', '259260', '370050']\n\tstandard_valid_fold=['46663', '37117', '218708', '140315', '32459', '267255', '267252', '23343', '113162', '45860', '241164', '341983', '273032', '341382', '83859', '12812', '101851', '268836', '209758', '8404', '247538', '206507', '105963', '280951', '95887', '172044', '84772', '222605', '34684', '184784', '90986', '122581', '90667', '283935', '26110', '41032', '291121', '78398', '211875', '120342', '97992', '136215', '266938', '247764', '88881', '114419', '130456', '250430', '88888', '127908', '222116', '210238', '298459', '110824', '69824', '273171', '255338', '84924', '112631', '218912', '96361', '244836', '275620', '179875', '44457', '195575', '94215', '215318', '266791', '58151', '97095', '91166', '367506', '225416', '367576', '207964', '55156', '10219', '112509', '216007', '256935', '137920', '186631', '208465', '234406', '270956', '203806', '255205', '40260', '71459', '30763', '30762', '272817', '111104', '76104', '126542', '36164', '234587', '91292', '256976']\n\tstandard_test_fold=['102858', '277991', '118354', '79935', '219614', '114845', '180971', '302220', '191941', '49029', '57231', '236021', '98155', '238858', '226602', '125845', '140317', '252097', '130633', '89835', '111363', '121128', '233880', '32681', '60037', '238567', '294178', '207812', '254427', '60428', '84133', '206621', '38374', '266852', '257771', '50479', '219310', '245497', '327282', '92533', '59302', '267354', '91844', '129733', '167521', '193514', '298774', '22277', '241638', '188062', '45676', '65068', '127539', '110565', '236399', '29044', '267694', '121400', '52839', '280584', '271594', '201497', '229967', '136196', '21696', '92331', '220134', '36116', '273237', '127622', '83400', '27798', '535523', '234053', '241124', '35684', '7155', '80866', '267278', '196665', '74184', '98442', '81563', '48019', '172060', '47939', '239242', '96337', '234641', '270993', '69268', '252919', '38019', '227416', '99501', '43444', '95147', '253709', '268258', '93119', '221104', '96694', '41026', '136416', '243056', '40129', '93116', '51224', '78577', '110788', '133201', '209869', '30646', '273510', '224869', '47472', '74447', '368460', '131936', '94532', '199227', '70710', '221153', '226640', '227556', '94439', '260199', '88119', '115134', '264446', '40970', '92221', '268536', '112029', '216030', '93839', '99331', '217395', '224817', '100446', '10124', '52160', '104741', '24157', '248400', '83119', '134252', '224648', '224649', '370404', '92578', '258672', '207118', '135658', '280794', '34346', '110794', '50302', '50307', '50306', '261267', '79925', '26113', '238624', '26115', '125726', '202810', '126505', '116219', '81707', '46503', '258802', '105507', '22344', '207977', '112148', '229808', '93807', '87400', '137455', '172050', '224498', '294226', '121117', '22821', '282985', '91574', '132028', '103311', '59333', '206376', '118583', '91996', '28191', '79858', '53742', '270416', '204519', '95388', '50478', '257045', '91276', '29771']\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSI/__init__.py", "chunked_list": ["from mmsdk.mmdatasdk.dataset.standard_datasets.CMU_MOSI import cmu_mosi_std_folds as standard_folds\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets.CMU_MOSI.cmu_mosi import raw,highlevel,labels\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSI/cmu_mosi.py", "chunked_list": ["raw={}\n\traw[\"words\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/language/CMU_MOSI_TimestampedWords.csd'\n\traw[\"phonemes\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/language/CMU_MOSI_TimestampedPhones.csd'\n\thighlevel={}\n\thighlevel[\"glove_vectors\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/language/CMU_MOSI_TimestampedWordVectors.csd'\n\thighlevel[\"FACET_4.1\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/visual/CMU_MOSI_Visual_Facet_41.csd'\n\thighlevel[\"FACET_4.2\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/visual/CMU_MOSI_Visual_Facet_42.csd'\n\thighlevel[\"OpenSmile-emobase2010\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/acoustic/CMU_MOSI_OpenSmile_EB10.csd'\n\thighlevel[\"OpenSMILE\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/acoustic/CMU_MOSI_openSMILE_IS09.csd'\n\thighlevel[\"OpenFace_1\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/visual/CMU_MOSI_Visual_OpenFace_1.csd'\n", "highlevel[\"OpenFace_2\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/visual/CMU_MOSI_Visual_OpenFace_2.csd'\n\thighlevel[\"COVAREP\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/acoustic/CMU_MOSI_COVAREP.csd'\n\tlabels={}\n\tlabels[\"Opinion Segment Labels\"]=\"http://immortal.multicomp.cs.cmu.edu/CMU-MOSI/labels/CMU_MOSI_Opinion_Labels.csd\"\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSI/cmu_mosi_std_folds.py", "chunked_list": ["standard_train_fold=['2iD-tVS8NPw', '8d-gEyoeBzc', 'Qr1Ca94K55A', 'Ci-AH39fi3Y', '8qrpnFRGt2A', 'Bfr499ggo-0', 'QN9ZIUWUXsY', '9T9Hf74oK10', '7JsX8y1ysxY', '1iG0909rllw', 'Oz06ZWiO20M', 'BioHAh1qJAQ', '9c67fiY0wGQ', 'Iu2PFX3z_1s', 'Nzq88NnDkEk', 'Clx4VXItLTE', '9J25DZhivz8', 'Af8D0E4ZXaw', 'TvyZBvOMOTc', 'W8NXH0Djyww', '8OtFthrtaJM', '0h-zjBukYpk', 'Vj1wYRQjB-o', 'GWuJjcEuzt8', 'BI97DNYfe5I', 'PZ-lDQFboO8', '1DmNV9C1hbY', 'OQvJTdtJ2H4', 'I5y0__X72p0', '9qR7uwkblbs', 'G6GlGvlkxAQ', '6_0THN4chvY', 'Njd1F0vZSm4', 'BvYR0L6f2Ig', '03bSnISJMiM', 'Dg_0XKD0Mf4', '5W7Z1C_fDaE', 'VbQk4H8hgr0', 'G-xst2euQUc', 'MLal-t_vJPM', 'BXuRRbG0Ugk', 'LSi-o-IrDMs', 'Jkswaaud0hk', '2WGyTLYerpo', '6Egk_28TtTM', 'Sqr0AcuoNnk', 'POKffnXeBds', '73jzhE8R1TQ', 'OtBXNcAL_lE', 'HEsqda8_d0Q', 'VCslbP0mgZI', 'IumbAb8q2dM']\n\tstandard_valid_fold=['WKA5OygbEKI', 'c5xsKMxpXnc', 'atnd_PF-Lbs', 'bvLlb-M3UXU', 'bOL9jKpeJRs', '_dI--eQ6qVU', 'ZAIRrfG22O0', 'X3j2zQgwYgE', 'aiEXnCPZubE', 'ZUXBRvtny7o']\n\tstandard_test_fold=['tmZoasNr4rU', 'zhpQhgha_KU', 'lXPQBPVc5Cw', 'iiK8YX8oH1E', 'tStelxIAHjw', 'nzpVDcQ0ywM', 'etzxEpPuc6I', 'cW1FSBF59ik', 'd6hH302o4v8', 'k5Y_838nuGo', 'pLTX3ipuDJI', 'jUzDDGyPkXU', 'f_pcplsH_V0', 'yvsjCA6Y5Fc', 'nbWiPyCm4g0', 'rnaNMUZpvvg', 'wMbj6ajWbic', 'cM3Yna7AavY', 'yDtzw_Y-7RU', 'vyB00TXsimI', 'dq3Nf_lMPnE', 'phBUpBr1hSo', 'd3_k5Xpfmik', 'v0zCBqDeKcE', 'tIrG4oNLFzE', 'fvVhgmXxadc', 'ob23OKe5a9Q', 'cXypl4FnoZo', 'vvZ4IcEtiZc', 'f9O3YtZ2VfI', 'c7UH_rxdZv4']\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/SocialIQ/socialiq_std_folds.py", "chunked_list": ["standard_train_fold=['W_GrHtwZez8','3wIejfT9l30','gcDnKQul_c8','qr69jLeQdRA','lo0R1mvjDT8','vKkpvQlHEG8','B6p6X1LSjiA','8m_3eBsy22Y','gfA1xa-BMCg','EqXKrS3gPN4','LTUojzYVUUI','FJF56lmDqQo','QC_4iR0tyvE','E0TBOKN8J2E','g67e0hDT1oQ','s3Czwcz3E-o','D56yCIgqqgk','QQpIBRLlJzo','4pYqIEQow2s','72ltfGTYqpQ','ofvOXABptcY','YlVkBzXo0YM','4VA4kqMnEqA','OWsT2rkqCk8','YIZpD3fEfgs','qh8JWHlIgcE','DW2umNQrQU0','vC63_bemI2I','g8cyMIFcC_g','n6-ef_YHeJU','vqFmKLl2hq4','k5bk1efKBSI','xpXCQkb4LUI','4yr_etbfZtQ','zYeBxnAm2wI','JW2HHfQiGVs','o6DEc3OYQfU','SJSmbF9W9PQ','gKuBUQVcDJM','P8YRuxu8dQU','KBj3TocgvOA','FWBCTZiijEM','lC8nM75AqUk','dU7L1hvMx9Y','Q25kn317a2M','_tBXwqueWcg','ipnGPeRIy2k','97AUfvzQ_1E','WVnNoiQKhPc','pc3__b1uF4Q','ooUw7Hq8YLg','uivjORoSW0k','G3xzem7HSME','CoMz3JOnZFo','cGU1Pepn1hU','yRtPan09Ek0','mNcdlLIOdNw','3udl28R3yIA','-99aZZhUgRk','RgGLnaS7smE','nzj7Wg4DAbs','0SuGC2ifkIA','Iu6_k2ok00U','zzWaf1z9kgk','T1icdxz0TNs','pZCz9-b5Grs','kIfsmKj42XE','EC77tcJZIdU','ixQbCXLUUj8','kYnmc_AVfMs','QtANwxed36M','xWjiz7ZrHkA','bBRWF0wju-c','kmgsC68hIL8','e6ppqFNBkLo','AiIrjf-s128','eKQKEi2-0Ws','FkLblGfWAvY','DClIawJYpHs','lcmI9_aypI0','zT-1nFMmt9Q','kGoON1J872w','C2PneBztZ3g','-QQ0Lv4_--4','1akNUksCpRU','XZn3wQhEXWQ','QQKG6cd-sBI','58DqoE56OWc','xwQBg9pVxrQ','UwPd_D3y3Pk','QUd09jZIQEk','DiaDblUd-lw','jvpj4qdPRE0','QHeNKMxsqYE','XE4ifwZqvEs','tfVvLs379Oo','h9hAaQOanZY','A6Pz9V6LzcU','-nO3dBeh5n0','a80o4DGxt7Q','QqWrqHC8wjs','Bg_tJvCA8zw','4oh_PsdY-W0','GGEXxniRfWQ','VIVkYG31Oas','mJwWxbSR6r0','PnqJALSs6so','vLS1o1F6KqE','_LUX70mXcEE','WLBB9CqfMCk','6qNawyzVGbc','4An2AF2rWGk','hjGsGtihBpc','-VNNzqqnaew','7GRWqlKfgmg','L9U9hvUf42g','EWUfDU8TWn4','B5ltukfhtw8','B2V9PFGQBH4','B-gHVjv4_c4','i3itBKdwE7M','nEpJaJyeRy8','DelU5tQ4grw','Va54WZgPTdY','hkAFdIrTR00','ZeYarFkvoGw','9eqze5JWNjY','h7YTPuEMgaE','G4heS2754l4','8Kv4F0D210A','Bd_vAawM9LA','Cv4Xj4fIkRo','-daGjyKKNio','ON45DvDMSk4','T8JwNZBJ_wI','4W192A7g5KY','nCQB2AaVgOY','spdhjKK6zCo','shL1gWm9qdg','D1Cil5n_-zs','hKfNp8NU82o','9cFEh0aaOOo','eS9U1QO0F7M','Z_FMSWtuU6A','YnqZfVCUSiA','7bc_qfRmPK0','-8GAQpsV4Qo','cq1er8IWz1U','wDgVPV_t0AE','cXTjL-f-msU','lTk5zkc0i8M','Wo1RxRjXyYw','NFKdaj1Qsek','o4CKGkaTn-A','i5YckMkwmm4','ilotZqzaZgU','kztkcj-WAvw','IXbAYg5pp9M','qRM1D4jE09w','2XFVnzr4Vho','gjX78p5tvfo','lKPRa_4hnlE','nblf7Yw4jys','eDqEcrIRxgQ','11BN2alqrFU','uk0Ntd8lJ98','B7Nbbxh3m1Q','caOaW604Tqc','Ilf38Achvzk','LmCJIBsQjOY','X9BE2oUSOXM','HSEi0RXGVq8','tv-hgegVq0k','mN1Z5xEOy10','ykTHGJLCstU','WczPTuyEt5c','HFPGeaEPy9o','2ZkzLAQszHA','tvcrwTcA5iw','HCgv_HNoJrY','SBp5KuQC_lA','0a2lv4IwZFY','br0mu7r-ak0','4HHR_3HJdEQ','uJUP839M2WM','vsNVU7y6dUE','nqY3tv-y62A','GHBKZZuA314','sqDIGuzt38w','EeClqsYITso','HzH0cBmHg5k','lmcuesVvLf0','ZoInHw_M_H4','9QdaNUrq1EQ','5_uSZcXMV7s','t-dmFuH7TyM','hd8bXHCvZME','jiMUoVjQ5uI','Qf2fBuiddNI','qDpGgd4oTQ8','YVHJpAROBvQ','YZR6LEk3doM','_Ice5RkbWUY','DXyaQVlRVkY','fZuk-TaECZo','Xs1sMqpc1oM','1GJqfyzfCWU','2a01Rg2g2Z8','KoH4OKx4x1Y','wRMF9hqdcTI','CggDN9EIuNY','F0wIBTfLnE8','AHXwnFvqYDk','1A7dqFxx8wU','jrv2BW_c8jA','Nra5F1tQQww','-2NF882DbaM','47U9SVOiw4o','VNM7Z7hir_I','x9lr8OomuJ4','SzCgZK1KMio','ecALuiFDRT0','XwUcQU9BFDI','WR0hwJp9AOA','8-Hi9NmF4rM','2c_nei61mQQ','PR0y7IlMEOs','zVrWAxxLuA0','PR04klFMPYQ','yDDRstyk9Dg','XjAmvLVbE3E','0B9VJfzqwhM','DWmUHNpOJxI','p6CRBNmX_gY','R4QbJL80Ri4','HMkOO15nye8','qzCjToACNrU','qXG69NfiePE','zWaV_PTlCxk','ZVR5lhbmGw0','MdG9Lkk8VWo','pK1WAx4jJzE','sQ3pkACdX84','uH5JkfBKD9M','Jp_KHLvQcuw','_s42gOg2WSU','3EwNcTzx-Bs','-sp3Q524oO4','C08WmKiwcSs','bMuoPr5-Yt4','9qK9VQDELpc','bb08nFwfoxA','ap9vRY_Vdwc','rB6WmWvvyxg','Eg307HcpbJE','APshm-9gPgI','Tfw2mq2wJls','4AmVjblOvy4','fpxPstb2DAU','02A2a-aEvmI','i7JGn06gsnA','rq-7zoXQ69Y','RFcuAhpQdXU','dONZkRDs4k4','PjBxYw4SJVg','YTwEFUfX4zA','gbVOyKifrAo','MlteErDn4to','DB7de4nC2rc','5NHofFOpsDU','KHgGasfOFPg','US7hym404bQ','o6hMDs4rBmw','GzPIbX1pzDg','5BLjOCK2SlM','AQ7wbfX_av0','6rkV4QRcVnk','OMkfujDPpwc','badtXoOJaf8','nLu13aVrNcQ','GCZ5aagOddY','JNGcJEZ6rwA','R-xtt7w9Do4','3yovMKR__4Q','n5V7TVYiVas','xNxw4rbwh68','mxa4KXSz9rw','xs8O-MFu4yU','rVWZuXDkc4A','_T3uHSwRgdU','31ktAMJocw8','a6Ke1YThz4o','iFgOoTRflnw','SrMN3rwvCsE','8_Av3cDcoR8','SxtSW5HFkvg','nmWplIQhvoA','fC_Z5HlK9Pw','AciwXaRfh3k','Z86hdiW6l6c','3nUKwvFsjA4','kf9RtsXQPWU','MM0YOB-cSWA','tXG-qPZJj-8','O24d_rJ4uDo','tafBLziHJ0g','hL2u93brqiA','s_y9h4hK2PM','2NE4KCCfutk','P3QEOJWxXI8','QoIsjc4-GIg','H-q0zh-XGVc','MsjnLoTKAXo','ajFmgmUSYAc','teg6qTE9Hjs','B1VB7vVQNQg','ngHnomR-114','N4fvzhsdTio','1j1C3dlwh7E','LcHtLypALog','KB_p2QvvLGw','ukn4Yw4mB1Y','TyFWoohX0bo','luJceOt47UM','3xdQIW24aj0','zHqGiZQTxfw','U4r9ePA6RkQ','2GRzO0p9uVU','Vlh0sMMjU04','zXbortaLKDE','N3QuD26DuCI','b9aeM__20E8','kRh1zXFKC_o','k-kyKv_kKGU','nQqY3j8btbI','XHBZkek8OSU','Bks4JX95dD8','3_-Bjqs6AxA','RZPBl5-cu3c','fhqu7ve9MA4','U_JrsRlieNQ','XYBx__4iAUw','A3WbCRfad-w','xWRNBOXoLf8','iovKlisBCzU','SAgYiERRDPY','DK8s_btC8F8','1CjUHNYzW1E','cOlibbx5sx0','4vPrTC5qMh0','bCWEOlvi5fY','vjZDdaFTubE','h-H1LddWxo8','Y7eYfHIyn3M','sheEL099ADM','L3uDQ0S1Iis','IsgFVkMnqJc','3qp3AeWmt38','7doQf8xjFVg','8y-N6UDxTxQ','d43n4njmxcE','Yzq6fNeXf6w','AZCs9VoHeBo','PsOnuG1EBjQ','n_mTiDeQvWg','RZzaa_PqNJI','29rvfxBQBQA','D0a2KWuL4S0','D1FXpqUivtU','_tYPnaK5gkI','0B7UgDEzcUM','64mWOoj68qo','gAPPzmRb4r0','XYviM5xevC8','yDrkv0iVtsk','Q5YJ7mh8zWc','Zx7c8huezqY','IlLFTI24Qkw','6W77wcXg2no','fHW461eiQp8','9l2W_GDiNyE','HwIRCeUCyxw','XFP-qBKzDBY','ElghrCC2Rbs','tmkqp3VpDCE','jYSuKn09_e4','_oqc_t0mbsQ','n5_HdNzf03Q','FybhAns3or8','8i0Vr6DiBCQ','rZLwPui5TQk','utkUkvYq-zM','GMidefrr1MM','bLVm1vfXRw8','2Wk9JY6ic0k','5RS1CKa3JVg','oY6BfHkNFPY','0_8zVtd5VLY','rnbtRiLamsw','_KE_-EdMhDI','1B_swZA4Hqk','oW3UPfXHSUs','mVnqP-vLpuo','FiLWlqVE9Fg','hRkl5WhbQLc','grTg3dzQDZI','YNmgvI44N5Q','OLw7cIJApMI','3m-54UiEqzg','HN75tPziZAo','jYL4gMsGZgE','2SIhhPzrjVA','hcu4zY2HUQY','2MrFWB__GIA','QRRzvOvG21E','UzzPYlIeSvo','AKAtC7easns','muuW2EU8nrA','0djStqAuc_E','vlnKSMw5v1o','VOHCh8U9XQY','9PJb4cFWOfY','ullXTZ0jjZw','RsqRaVYQ6Cc','DZsBei4nCkU','_xChA_vIuxE','XKyumlBmix8','bT_DEZz99VQ','I0izJOlMJiM','3eCZ8haia58','b0yONlMjxjs','QytntXWJIe8','_0at8kXKWSw','ogIbkhMeJFI','rFJIgAmT8dE','F2Xul-ihUVc','L49M8C4wjVU','srWtQnseRyE','fDe50VbOU44','ZuBzOV1ADkk','deKPBy_uLkg','p9GrpGa8Uys','8SGQ0VdXvAg','tbwPN9fZb2Q','eTnuG394AcY','pXvVnvQOMQ0','STbJ8hJFMAg','4_BudcPRi7E','N188QSyfmeQ','ZKTIOHRjlHM','4HxgOizA2Ow','NZtIGzAzJZM','4iw1jTY-X3A','COYJC6dvB8I','c2pwnHLaYTQ','Kjlt_FgKPgA','-ZOjNsOHtOU','47lUTksozNI','g8D-LyfTrRs','hezHSFSwa08','WQxM_EK5aiM','56EbHWYK_q0','UUuXfyfCaL4','UCW_UH-k-ec','jfKDozXX_Uo','fz0q7YKjp48','LtxWWUBt7ro','GI8LoYEYKI0','oxZYBldwpP4','cuR-l2qCxBc','hnfkZx4jmpA','Me-A3eOhgXs','8xFtIsyRvNE','ory7fcHYXhQ','8fN6D1VOHlo','QFTvmsHgFYM','LBd5x_fe4Jc','x6YzIqb6Cas','8Rk4sGEBJlM','aRQLU3IwNYs','V-qtKSEGAac','2jMvc5VoavE','nGah7qST1dI','q45sJ2n2XPg','1a4Gx6UHdI8','aS01LwpC23g','g7OMgsD7T74','y1Y02_oZP8U','8MK9frCMoWA','2gy8H-wYzic','LTEiibVnRgI','BEOdicifuqM','CY2D1L1JtKU','KWS6OcNbvLA','6V0UfejAo_E','WV1ncOsZjog','_UJNNySGM6Q','aNOuoSVlunM','VP4rHzYyuL0','ZP8ACbJ677I','Sir2QeCh4B0','-jDIwv4wCsU','RJnquSNVuuw','NR9v3PBJw8g','EGK2P1cOJJc','GK4_G33fXFU','RtjJBtFXJaI','wZoXjg1x4Yg','Cn_Mlwouwng','lacVKwbsE7Q','kzhJb5jcH58','f-BbAnnQVtY','TDxlMelzl10','CwanEycyH_8','rmZGPAXE0oA','NysITFb_Wbs','0hCihQ5Kep0','_zuODgCQ6O8','No6mB6V1wL4','yK1RQv3S8KE','sGAj25JPwcg','x6yr8W3mc38','66ojfophGys','9m0d0RaWpfY','zqgqVF6lWB0','F2mIH0vlI9c','ncHMwblapdI','fmuEMg2fh_8','AQX2Q-V2Uh8','LchHXKL6xZY','Mek_AQ5DbUs','8NL5jXoa-Jc','EJdboFptQ3o','6kYu7-5EyU8','jE1tmy-g6tw','s5ak_9z3Cp8','b3I1tK1Iyzc','e4mvg9r6_cI','f3Ch2aIlXWo','s5jrdHASx04','L75hdqt98nw','q0r-dKImVLk','17PtS1Qx8kU','sjzVFt59eds','jP2HuCwfKFA','Fy6BOTB4sXw','urYGhhMOToU','uB3FdWmnFZU','VeV7vvfipA0','4wdeBJ39Cuw','YsBSR_z9BR8','6I7Ktp4dV_s','6AzXxhPKh8U','VsSGubvfPiA','jdrVAQrzt9Y','UJLb8PfQYl8','SsuLW2JpjEA','jKguXsNkJ4w','SQ8aRKG9660','D2VcClclMbs','vTLkSpY_aYg','hBdsfj0YPO8','ASqnnZpsX1M','-0REX0yx4QA','nyqh7vhU3X0','0DBfvvIVmqY','EUIIWsgDpZY','25Qq8k7V83g','jbHKeVsI35M','HDhwReMUBsA','ziwYbVx_-qg','uXlJ3ezSZpg','C6RMS4F6LDc','1iH8ajlHJ1M','BDEUrfqlwcg','BiV9eJU8Gsw','VPTjROKYhlU','jK08J1811uA','kOIWYXDRR7s','WSqbeVe4jXo','afXewnGZXKs','YgfaKTH9RbY','yIhH-_BXPr8','3zjz6ryPvIg','FgnO3muvvoM','WhsZxUWSHaQ','S63inYNCsCM','LD1RAPiT_7A','XFGAQrEUaeU','xdiFzcpmmJc','09j-Mg5guGg','wA4i3eHKsTQ','lB0mkAa1vfM','N-6zVmVuTs0','IsEykad2V9U','IE6r8Pk91T0','U-Y_HkD_0O4','atEkAkPfpUY','mPAESQEQoms','IHU9Jc_NUuk','3d--LpVQxDo','xITR-FIi_oA','ZYzql-Y1sP4','VxS7HHz0mRI','5slZuaphzVs','aai7dDBNXBs','OTdFPlXfFj4','7Oum_c5Seis','o92pxWhZomM','lickge5rPdc','c67D5bP0Hg4','Wg7ppxAgcuw','gImYPbTTZko','KCbXRRvnFj8','w_WAB7TXtXQ','xaQYLAM1LHE','abOuBvUfQk4','-bSM6iswghE','PQW7zw2URes','wz3nVBPVgIA','1YOzwKKbuPo','2YGrrsKs-Xg','xWLmbDdg9tY','Z7MknXjNJSg','O_xHNbx5jqI','VTPz9z7M6B8','2G-B5upjLjM','tVvGairu3Hs','sqIR2N5izHo','Ob3hr2H3VD4','qe--y0apjcU','Nck6BZga7TQ','gDVmHsYgJUA','hRcSU9-krNU','MBDZbACupsc','96YOZOU7ggo','Hv0PyGfxbpw','iwCdv9iR8P8','aDJJBMXiwiI','Obde542xA9I','ON0rtQyNS20','gBs-CkxGXy8','bCKOVlsSluU','G7bkiEh7_AM','zzERcgFrTrA','SjrMprYa608','E4MUXs4IHtY','Y6fVeuHTx0w','awpHn196aVs','NcHQjL_WlxQ','TCCYCSACA2Y','ktdgC1dJkOA','vSQvk9P1dus','kVh1Jw2D9NY','B7XIUxyTi_8','7grGUUPbEbo','lJ83ILGA8yI','0LDAgvbRtk4','rnj_bAv7Hyo','j7cUdCFEpeU','hqzF4IDaIYE','QCR7uyowjhM','0aNFS1cLs4k','dACF-Mz-X8M','Op2e8_JURSQ','N1fVL4AQEW8','dvisqlHIKpM','cHpER0dG1o8','RAUSVB_Nu9k','d89i7OY2yTw','wbmW_Z1oPJw','BC0dD13bwEw','r7rpWLLPQSA','M4blAdS6r3Q','Xbx0Dl90wO0','kmi_liqBsdU','b1OedrPQ464','qow_n-oNEt8','5OUcvUDMMWE','nAkqWGO1T-c','YuU1QV7N9yo','W-V0sdbQA-M','oYM9bFGb8B8','AHiA9hohKr8','kU6YY2z7z0I','fce2RtEvPr8','E2IdU5lgaH4','dVJAvMbb8H4','ZuYTtKZUkJc','epy3Dy2FUOI','-9NhaKWMtWU','4Ry2bE-WRqA','vE0R-Gw_GEA','9jRkACywckE','tNami65DCyE','LiqyOoGW-I8','sty54JE9DHw','A4gVxvYFA3M','gDUFvLWl-Oc','ApExci9PnNM','MIFz86h5nEA','tth90qiKXgY','h35dZhHkuFM','j1CTHVQ8Z3k','ucYhn366lts','ICBNX0i855Q','noHN3H3gWPQ','F2YbeTjcpfs','MHVrwCEWLPI','D2g3gTRkv0U','6xQv6ozrz90','iOdEJMNEzyI','KaIzZrMb2og','DE5S7W8ZfnI','PVD-SzVd_UQ','43fC9xuQRCY','ndsKiHu63oM','cwoR3fkcJ9g','Yz4NWtsQm1w','Nqf15ViHSmQ','5fy7S3jCyAg','ggLOXOiq7WE','T3cwJlY8OYk','1YFLBjR-swo','cQREa5Y-jqk','wYLmgQy6zq8','licUm-aEaCY','l1jW3OMXUzs','yMC03qoBlE0','OT3MVRv0TT4','EwAb8ZW5Eiw','iDgaqD7CWXU','Fy3Mi8rOB3U','0gcuigYJ2cw','2ihOXaU0I8o','m075kb3aV04','VopLr9b_IgM','erOpqmubBL4','KWSDwS4S6Ss','gf5mfpSDFKM','pMGhqE76kQA','TpH0DD3MCUQ','ifxLhziWjm0','LoMhBo8ATBM','7_lpdZhf28E','K25zmgYg5s4','1Za8BtLgKv8','oRBPxefAHTY','PR2fDvbCoAU','DpTB4TDKIa0','YI5l5ltMl8g','zoE6RKgvBlI','13tG38-Ojn4','lUyKpfbB9M8','lkeVfgI0eEk','mr88Ud5V9uE','e6zn4UlO0fU','ztlOyCk5pcg','29vnZjb39u0','N7K5DQvMWXM','bwzH7ceQX8Y','uNU6H62jNxA','90P3VEbzUK0','2DTwXdqmRiM','aXiMaioTUkg','KpljzfIVBDM','fV1o_g6uzuI','A48AJ_5nWsc','1mHjMNZZvFo','MDQTH8WkAvQ','OFia3dWgaoI','xpIFaKnNvco','p6IwwFevo7o','dI5D3aTgjZk','3esHlM0cBx4','X0jMZoxUL2A','cGTFuTIgc88','_AuZO31q62g','ZfZhi8nnnLI','8w41NfRyWqE','nZiIVvEJ8m0','HPszYa77CkM','iBL0FcUTFT8','ALbnaCezgdM','kefqa4xre2I','KBMAUGQpHBU','Nx5VK6DUUEY','FAaWqJLCCd0','O8iOYngEUBU','_Z1tcdf6qkI','WXuRTQPKwqY','NgPP6UXVkYU','q53HUAKB9oU','7FYHA728nBI','qQPl5ySv3Fk','xbhXd8lj2s0','onbBEbC24SQ','sZ9gSPUdZIA','o7Ax6SRTGks','YAYfMkxhRiQ','4HN0caXjW3s','Ot1aZoxt9PU','3eaASCCJB4U','bJ-G8xiLB6o','sJR9QjezRGg','QR43TImr0dQ','YIJ0mZYi1O4','Ham3IQQzoU8','6dCClwMqJK8','13HM_96pUIo','WBOT0Tqpbag','jMZLrPxp31E','dZPwXsbohK4','fL3_AauvjJ4','I4mItsGR3uI','Q3PJuGz0Njs','4tLBy9FGS5A','qhlmvp3VDzI','rMRWJEvKopk','Vwn_QS9vB1g','KvbeKlGeNRU','waE2GdoBW68','UUukBV82P9A','VX671ftXpMU','iiDdvLrSUG4','5WgFDQUjg5s','2K09qUoN1Oo','9L1tM3fOb80','GcImUUGmZ3I','9hn6Z1o-IYI','4KAvDyGzz4E','ajVTImleJlk','alg7qHta0Sk','TewPhK6CZ-Q','4_jXi0nzuow','BH8FUBW4IIE','xXIq7YPkdUQ','-RpZEe4w4fY','MqiOBIxouw4','87yBSfgwoUI','Ate-1815RNA','7wLDCFduiLY','qN-ZCqaSHHk','34XCuNsQ7O8','eS8SpCRASr0','3vjA8sDxDuQ','P5ZOwNK6n9U','ujj3zYdBd0k','Mf76yyTY7Ss','QHGeDg6XX6U','ytEgqN-BdKA','8TDAP0KNIIw','yq1cX1lAyQg','im_uLJKzs-4','iNr9xdc6cVA','pFUXcA1fp6g','ZMJw752P7z8','PfwwCpAy0-0','8ACAI_Z7aLM','imUigBNF-TE','79I7_vkwaeg','OPdbdjctx2I','KzN6XWDEmXI','b-FX9NOVQOM','J94uO-urSTg','Vbp7qtUXQFA','I7GvG0WYfOo','1IHDvzYwqgE','T6x-kDiQsWM','JxbV5wGpXc8','C0g5RjQ7cRE','P3UP62l7g6Q','NTpj7quCIqQ','ctHj7R35dL0','SWNXZbasPvQ','RHRPK2O9R4w','PIqmZBVVH0c','TA3Xy53hMMY','zf2tZ0HIiPQ','T86T9wMn77s','HEke6Dlhqtw','EEDZjwA1wM8','CXmRmrBPDII','jtl5XK7QP38','e8v9i_ksUyY','t4-ZulW5np4','mO8TK-QaIf8','NmWjnYUkT_s']\n\tstandard_valid_fold=['PiYhxJzWLzo','ZyIQkgixS_o','4Vic0qKl64Y','4EZxURAhU6U','yKGfDlxvR_Y','K-bZQJ3P9N0','SstGaYWCNoQ','B6PpxrnttDg','H0Qdz8bSkv0','44MVdpDEQJs','G1wsCworwWk','40mpZRU47T4','3uk6rKXbG1M','5XEQ8rYl1qs','LcMBahfo0NA','pawEXwLjTlo','_yHLgEDXZbI','mA402F5K47o','n8Cn_KhcR7o','MCAH-zHLTLE','NnhpG0nEC84','G4ROcoq32rQ','aSZ_eLxuLAs','ahcAFnY6iAY','bgczomH1kLk','n71IBjXHnrQ','Md4QnipNYqM','00m9ssEAnU4','WI9QnhX7vcI','ks66e-O4YCQ','Csy2RxzkbaM','K6v2QYiMdCE','aw-fKJhcQE4','jh5PklItWjA','8wLCmDtCDAM','u_pE5O64Q9I','6b1QbKtmaZ0','-DTqvzmUw74','egw67gXKK3A','GeZIBgX7vkg','P2rLv-vjSOs','kpMLnFxvi6Y','DuXGDE6tolY','ACPPfJtYCVc','wB_hjqZQ1UY','t7qDtNdJAlk','2nDh8MQuS-Y','uANIooMR9a0','a0tn33wZGVo','F4rSKCXqEw0','xQwrPjLUwmo','igH3ixpts2g','7GRTyxc4uMU','4LGe265pwvU','izCiPuiGe9E','PFA-RmV_wG0','BUumpYIgVg4','j5SKmUoL9Tg','sPxoGNvnVzg','j3pLDghHKyc','IbkyL0pDtEc','CNHBsxOZd80','3oj7mCSydoM','1MwN5nDajWs','G22mJGndp14','460_-P8pK8E','JMzilFvwNXE','tjogri9eYzs','NTySVAtrdQc','iEENyD0JiRE','CbMVjQV9b40','5h-SslT--8E','FaLaPEnjeqY','lTfsqoo-jKg','YRmjALBdTdE','OsQdzsIMFPQ','mpHoYhIFKNI','nRfU_c4QlaQ','KWnV1Aa6VQ8','O951zoCuU7Q','VPoNcAeOycw','S0xTq15pzJU','fsBzpr4k3rY','wf1LTMcVFEc','S8vC5FNRDTU','JRYjFh_hHBs','TTY4WKXoPac','ThpV4osXuCk','GxYimeaoea0','GbYGoWvJpwI','ocg0MbBfCS0','PCVvpS7w-2w','2hLcCnZzRtY','EaPaLCuXjT8','O5rTU5EA1C8','wu9D9hdwOQ8','-hnBHBN8p5A','Ddbyb8zVKG0','qAs7UWhTyaE','N5sGxcAJFCA','z6qavchy4Ho','2im0kvBEIrg','aqGNOsZFdBU','bC9hc4cqHGY','lpAMi2lwjo0','geaSpx-R4Kc','pG8zAQGgL1o','Am6NHDbj6XA','FositxHjuUk','TyR3GMJJVhA','dKxXtOyMmYc','hrhX40bQYY0','ihP926ccYDw','-Lp96hoSUC8','JW3OfSCZlhc','otna1VHHCow','eTph1-CG280','JXYyQamYw84','vVaZzurwxeI','RS5x5GW5bEE','vaHpVjqCnNE','T0jM37coZPo','6tAfdCTnToY','OqL_u-uGIi0','Wp0xufdpjqc','SADub7W22Zg','9kLNVTm3Z90']\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/SocialIQ/__init__.py", "chunked_list": ["from mmsdk.mmdatasdk.dataset.standard_datasets.SocialIQ import socialiq_std_folds as standard_folds\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets.SocialIQ.socialiq import highlevel\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/SocialIQ/socialiq.py", "chunked_list": ["highlevel={}\n\thighlevel[\"SOCIAL_IQ_COVAREP\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/acoustic/SOCIAL_IQ_COVAREP.csd\"\n\thighlevel[\"SOCIAL-IQ_QA_BERT_LASTLAYER_BINARY_CHOICE\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/qa/SOCIAL-IQ_QA_BERT_LASTLAYER_BINARY_CHOICE.csd\"\n\thighlevel[\"SOCIAL-IQ_QA_BERT_MULTIPLE_CHOICE\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/qa/SOCIAL-IQ_QA_BERT_MULTIPLE_CHOICE.csd\"\n\thighlevel[\"SOCIAL_IQ_TRANSCRIPT_RAW_CHUNKS_BERT\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/transcript/SOCIAL_IQ_TRANSCRIPT_RAW_CHUNKS_BERT.csd\"\n\thighlevel[\"SOCIAL_IQ_DENSENET161_1FPS\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/vision/SOCIAL_IQ_DENSENET161_1FPS.csd\"\n\thighlevel[\"SOCIAL_IQ_VGG_1FPS\"]=\"http://immortal.multicomp.cs.cmu.edu/Social-IQ/vision/SOCIAL_IQ_VGG_1FPS.csd\"\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSEI/cmu_mosei.py", "chunked_list": ["raw={}\n\traw[\"words\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/language/CMU_MOSEI_TimestampedWords.csd'\n\traw[\"phones\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/language/CMU_MOSEI_TimestampedPhones.csd'\n\thighlevel={}\n\thighlevel[\"glove_vectors\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/language/CMU_MOSEI_TimestampedWordVectors.csd'\n\thighlevel[\"COVAREP\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/acoustic/CMU_MOSEI_COVAREP.csd'\n\thighlevel[\"OpenFace_2\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/visual/CMU_MOSEI_VisualOpenFace2.csd'\n\t#highlevel[\"OpenSMILE\"]=\"http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/acoustic/CMU_MOSEI_openSMILE_IS09.csd\"\n\thighlevel[\"FACET 4.2\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/visual/CMU_MOSEI_VisualFacet42.csd'\n\tlabels={}\n", "labels[\"All Labels\"]=\"http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/labels/CMU_MOSEI_Labels.csd\"\n\textra={}\n\textra[\"glove_vectors_with_sp\"]='http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/language/CMU_MOSEI_TimestampedGloveVectors_with_SP.csd'\n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSEI/__init__.py", "chunked_list": ["from mmsdk.mmdatasdk.dataset.standard_datasets.CMU_MOSEI import cmu_mosei_std_folds as standard_folds\n\tfrom mmsdk.mmdatasdk.dataset.standard_datasets.CMU_MOSEI.cmu_mosei import raw, highlevel, labels, extra \n"]}
{"filename": "mmsdk/mmdatasdk/dataset/standard_datasets/CMU_MOSEI/cmu_mosei_std_folds.py", "chunked_list": ["standard_train_fold=['hh04W3xXa5s', 'GdFP_p4eQX0', '4iG0ffmnCOw', '81406', 'qyJiDgtj6YE', 'KI2sU-mhM44', 'qXisb7w9LjM', 'CLkTjujFVKU', 'aMtFBGh2wKI', '2OLVF-KEaZU', 'Or-9Nc_GAq8', '72tXTrSXoMk', 'hSgKOKK3L8M', 'YVHJpAROBvQ', 'pVzHaakhKAw', '127470', 'wY8JbFOsp5E', '-iRBcNs9oI8', 'sLaTZtL0ZIk', 'txjqbr6FoZs', 'jVayR0VClxQ', 'gZF-YNQHqwI', '214095', 'Z3fcd1wdzr0', 'kjQAkrdbREk', '81538', 'mpfSRGHFY0g', 'pqAGD3ijMPw', 'jQ3EmbRIe58', 'CHh6hWo1AFE', 'zqkawTdHN5s', '-ZgjBOA1Yhw', 'rz4Ax6xfZHQ', 'sw-smuVRByI', 'UTNP1roJV3I', 'flGZteJUNYU', '273531', 'QNxiqu1y1N0', '270665', '_iRAn6feOmw', '57618', 'vYOr36tdcpc', '6T1GHj7qwYs', 'wLJohZMqR-g', '220548', 'Sb2xMPwNKPo', 'qaoSn1eEyq0', 'omHQ68k50XY', '270444', 'FNbULlE9RKg', 'cKxNJY7sA8s', 'mzTHW2dtbs4', '3gA34VxBijI', '6TKaGMkO69E', 'YmGfjU5PGyE', 'Zr3psuFQoDY', '3f6xCzKx9CA', 'T4e4Ba1sRg0', 'ogGweZUAVtU', 'cyOSDKOxb1o', '19k6sEC7814', 'YrPXbGBvqGo', 'LQnXVd-PR_Y', 'hGRRlXfH0BY', '254298', '192799', '70710', 'CIqRibqChDQ', 'AIPqRuTjI4E', 'dSax_7klbfE', 'gcGZp9JX_qE', 'zoPOeViAdOo', '3B1zIUj-k3o', 'MmJD4KBT0nk', 'RadU51t1kL0', 'T1icdxz0TNs', 'iREkcXde5ds', '40181', 'k1ca_xbhohk', 'wLrgvSYLPUI', '41692', '8Lmqsakmw3M', 'PHJ8eybXJdw', 'CuFLRnu4FQ8', 'a7HHg_JygJo', 'dqragS38hCk', 'FMif4HMBZjo', 'N188QSyfmeQ', 'f49boM5fb8U', 'NYuY6HVjMZQ', '112223', '3DgOMTs3A1E', 'VA6lVHlj5d0', 'PohW-isYMK0', '248837', 'IKXWSNf4m2k', 'bhPB19tr-JY', '251826', 'omBcvw7izuM', 'IB0lGIxP8YY', '07Z16yRBFUQ', 'yNiJGh7JpLM', '0vXaXWx7Rvo', '5FbzKjx3Lho', 'NG7QLq4XlWo', 'kf3fZcx8nIo', 'n5MU2-GFjo8', '189966', '4qjz4BQCZyM', 'lTfsqoo-jKg', 'ejDe6hQWZOk', 'jV6qzF2YROc', 'Sir2QeCh4B0', 'kZfcQ4a0kx4', 'UK_IXtJ2BqI', 'xsiHAO0gq74', 'CT7QOWbhfv4', 'wd-LTpCtAzw', 'qEkFReBuwxc', 'v3l56fl6aJM', 'bYt4wybVLRQ', '233356', 'afCsKTHteg4', 'wrQVnClcNPM', '2mWPHvbKzL8', 'mud6tEqFiEM', '_MGd6t9eZP8', '267278', '34-ogj6rh6w', 'yZWH2P-h0jo', 'DGeBPk1op3E', 'J3-NEG8uoiE', '272375', 'sU40irMa-so', 'Z-26eyME6Co', '-lzEya4AM_4', '227173', 'C3lDRFu1ZcI', 'pu1C7tmYHxI', 'fhY2vbnjuWY', '210238', '245322', '-wny0OAz3g8', 'LAj3rqJvS3s', 'XsEPZydHWdo', 'wVdoIjg3ZFQ', '72385', 'lbx3eu8LUl8', 'zR62DCEMWgs', '7oFimEZJQ_A', 'liJO1yIFsJs', 'FOMXt3lStco', 'FWBCTZiijEM', 'bUFAN2TgPaU', '96099', 'S8yP6lBOdKo', '244817', '84176', 'bVhWpCvpSs4', 'Wo1RxRjXyYw', '131871', 'jcQi90n008o', 'qed3medhsj4', 'rsQRiALH5FU', 'hfvmQuhqMmY', 'iWBx0CP9JqA', 'SMr2DprlLu4', 'r8OPmbZZlpE', 'JF-5nlUNx_g', '08d4NTXkSxw', '0SfejBuLgFo', 'pbFwuNCQlH8', 'IAmZ5iWHxw4', 'Q8naC1qriIU', 'gXuiIWRxrw4', 'R8Kw_4Y9E0s', 'ytXVSpPfKwA', 'SH0wXyhsx9s', 'yALhl-lMBxk', '3QcqpwQiiLs', 'vM7m581tHn0', '46497', '4CKhrjuuofk', 'aNOuoSVlunM', 'jZTe5cbwwEE', '9Jyr5laC8mg', 'JvLMNXW7B10', 'HD17J-FvROQ', '81615', 'x7ZR70cTa84', 'kRs39SO-neY', 'Te-vgmYgGM4', 'Drhrzj1yhVs', '154449', '220200', 'Xq7zLxYHxd8', 'I_r2CP56toU', '_HanACduNJk', 'f-ZNjqLlrm4', '122602', '9zWeMrfr-l0', 'JvgofTcCSEc', 'OPXmk49KyiU', '4poXF3xo6Z8', '208416', 'SqtZGF_f63s', 'HUOMbK1x7MI', 'w8TXP0iz29A', '5OLO6zEbrVw', 'ai7G98thPpk', 'It6xg0WcqJ0', '44780', 'xn9_4n4NpEw', 'olcPEN9x5VY', 'wgCSuviySwg', 'fnFoRPqkQeo', 'BXqnWuDA3H4', 'G8p4QMjLUXI', 'CE9yV4SearE', 'c7xUcM68IFE', 'BDCFV4EqHjY', 'npIVLL_fTf0', 'RIAEgUKtzxw', 'Gbg8qiKQkhM', 'nTBKtwqPIYw', '278474', '3u_Joh0WJdw', 'w1MxXu5D7ho', 'jlCFLG6rKKY', 'Ta_IgA3XJ3s', '257531', 'NDMAVMZyISM', '5eA5HpyFsIk', 'JkHxzOWOLfs', '238889', 'QDRtKv8PvFs', 'RdOc70IrjJo', '5VKMctXBN9M', '44MVdpDEQJs', '3w9I5SBhHNc', 'DZIFCYOhosQ', 'hIQhkTjNaQc', 'mxFU6TrHChY', 'Va54WZgPTdY', 'Y6s_vuUUsJM', 'kmAisuAFckw', 'mI50zj8cTNw', 'YcyHQQXGXWA', 'OEMSGahoCmM', 'Nd55vByy2F8', 'ipLoS44xfO4', 'io85pRFj_dw', '54CM1_GA-uw', 'JAbFsRxxnFo', 'eY64P27khzk', 'nHMHePX9WoU', '230252', 'OwYfPi9St0w', '1bzS0YF5hfs', 'n2BuwHbdilY', 'kiR5zVo2zvU', 'p18PVgfxook', '9-K1CXCXui4', '102168', 'KF5wgQPp2yc', '7ifnoHhrMtA', 'fI9KptYFZeg', 'rBWeo_rEdcU', 'fbHlBmq7Ipo', '298736', '275248', 'R0uRDh-engU', '9pzn93kdP_g', 'cXu56oK462o', 'K9-KyChw8RM', 'QMAztkqnvws', 'o4b7hjQwpv0', 'ERnYvxojeu0', 'faXGVcVcVsE', 'OAV6KKf60bQ', 'x5xF4yu9Bos', 'ggbV7YeSl7k', '238645', 'RqOgkJbqFXg', '_K0okiLaF9I', 'Gmhi58erY6k', 'GICVzJMDfv0', '129733', 'h7p5URoookk', 'nhD9WSEIspQ', 'frNJdG0GkYw', 'gZDyk95Xob4', 'TahiuVpcROM', 'mgpoY1-110U', 'dYyg91d7zjY', 'xyOa9ivNrg4', '7EWOMjaKlus', 'niX_m3aMxhQ', 'e7_2U4lm6TE', '1ZjIX9AK860', '0hCOCt6fWas', 'N3QuD26DuCI', 'U8Ewftg_8CI', '8F1mj-XT6KA', '3aIQUQgawaI', 'qdeQg5dZb2E', '92521', '6UV6ktwbLoo', '90wZz0thye4', 'zFuRNvfC4So', 'IgenXuE4qIM', 'g9rNhtFG9aU', 'jT3FSTBA8Us', 'nNFDj9fRAqE', '23YlZoucbyM', '245243', 'BZOB3r5AoKE', 'jgNu58Da9cs', '7rMLN0KKE5k', 'nxksB2kDJ6o', '6rkV4QRcVnk', 'asWraTfIqq0', '7R70kKqtGh0', 'BvvttuYysvg', '270449', 'So3bPzg2bq0', 'Wnw1IAEDwDM', 'UUukBV82P9A', 'xP81rX2ATLI', 'y-nEcwAyQos', 'zi0a6r52ZlY', '100499', '7fPYpqzw1iY', '261900', '261902', '-3nNcZdcdvU', '256976', 'KEUVzxC7T3E', 'KUVGWCTT5DU', 'rVG8gOAY0JE', 'p19Hsjx2xgI', '244261', 'qDIh6YNbIMU', 'N7IerkWUClI', '43456', 'pfCPogxnUfw', '282586', '73447', '4ZhIx2ozUIE', 'ZltpfWh2aIw', '266938', '73449', 'QoIsjc4-GIg', '8X5tGQLBqPo', 'Tiq67-bAV3M', 'B1B71X_SmwY', 'UjT8pHMN8Q8', '98442', 'iceSGs0MXaA', '110203', '74101', 'A8plGi4rbxM', 'grePRQ8zonA', '9K4aWWoXuyU', 'Zo8jCDGMWjw', 'I8MM8y1XVjs', 'L0WUuWYNeCo', 'aIUF3QJJOF4', 'K1VeXZxR24U', '259260', '708sewcSXVY', 'Wfn7XvSEwUA', 'l-nM_U1qpko', '128752', 'gm4l099casQ', 't7a3zECpT4k', '9BceQC_SdTM', 'trQLgl6ncmk', '266396', 'oHV99Y_EWfI', 'L382XZ6iZmM', 'X0jMZoxUL2A', 'D1I-Z8jaby8', 'z-bupzylxEc', '125730', 'K62NK2KYhws', 'jYT3-RQFy1U', 'A2E78CGi5TU', '7hSWYI99-24', 'eeN7l4R3nPc', 'nmWplIQhvoA', 'UtuTyW9pUN8', '83859', '101851', 'G3RPgs_7l3U', '5R5fDxZUL8M', '5PqwxUYIe3c', 'd3EeIRaMbbk', 'qbIajpM7U3Y', 'Nmd50Uzyybs', 'Jh1uDYOJMwk', 'AjgDuPEp9sI', 'iMG962Rj3Vw', 'Ua4g9q0r-dI', 'kU6YY2z7z0I', 'X7-Gbk8gAD0', '856LGms_0s0', '9cSJglGi9Pg', 'rZqWAnrJ1Nc', 'gEgcpVY8WK4', 'Bg-PA5KTjNs', 'SWHmteF5Rlk', 'gr8mzv2xZ2s', 'i6UngvEEuNs', 'yuwvVTnsDjc', 'ULtBuI6nMaY', 'sIGAq2J4KKI', '4EEru3cZwXo', 'qlDiE1d45Bc', 'Xx7Y2YIbleA', '225416', 'xomMHflvVDw', 'ahcAFnY6iAY', 'Gvg_80PlAAs', '216007', '3DOrdP4H8SA', '186631', 'zaTyjiyrHnk', 'AGM-hNupJik', '270956', 'OiMkqEH5WeE', 'vM3YB7LmMq4', 'M2Pb2kx77ww', 'lVj6ZdyW9pI', 'Dws8ZrzF7xQ', 'taCchyi5h68', '30763', 'SuKnUzid-1g', 'E8L1Z71vKG8', '9zBj8VkRBpE', 'Q_py5n2fQXw', 'VUrTT7xsrec', 'ZdX9sUd3bAI', 'GpRDC-S88dM', 'hmjfBZGGZR8', 'wj3ur4fsiN4', 'DbAppk7xT0Y', 'ABSC1JNdpTw', 'cnllFPRyBFs', 'fbSxct2JcKU', 's1Yo_MCiMPc', 'EoC83JhkCAw', '1olbQVO_C-8', '0p9XKC_J3hU', 'rv1gp0wEhI0', 'HByf7qiO-Kg', 'aFjMWlR1QAY', '424vOT3Nnyk', 'jXp595jj734', 'GxWLhv-Vt78', '110788', 'TxJjAK0WrOY', 'rLHJ_ebXCHQ', 'v2DFe9X-jCY', 'tRSPfPlNbMU', '1fqNb8cfLFE', 'ZUqTWOx9jYU', 'PN3ApHIGopo', '_KGd7IpX3B4', '38374', '266852', 'R0o37yJ1PP0', '245497', '92533', 'RKP6j28FCWE', 'PQYmOknHA4c', 'q4hP2j7oewo', 'XVSDfgstFUQ', 'W-ptEZFARVo', '127539', 'CqFt3_uka14', 'I--8nRKCkJI', 'bMuoPr5-Yt4', '52839', 'gAMbkJk6gnE', 'hlYDicOj2m0', 'XPoY4LD-A1I', '9sAoeFTKILY', 't2U7w3K2qac', 'VgqI1KRnDSw', '92331', '220134', 'LppEvM60-xo', '1ESU5ONMMxs', 'FJgO-FICHlA', 'KLy4aBLqwCk', '256935', 'GTGtVdAuyRc', 'JzydLJw6y6o', 'flBtk736di4', '69NtV79qgOg', 'q-0gu48ClF4', 'm7SJs73SF8w', 'L8VjQM9HQfs', '5oEuiBPUTYc', '4qVvLLFEYnk', 'cWN1bibicHc', 'b7DK08bWU6c', 'zKNAu2CCeRs', 'YfxtwXXkCmc', 'DR9Hhpy8aA8', 'kcIGTPHEsNo', 'fzuTEKwNS94', 'v45zoIrjoTo', 'GOj7TBcEA8E', '1RBT_QoSkIU', '245276', '9K5mYSaoBL4', '-aNfi7CP8vM', '292277', 'ymPQOY2O_nw', '21137', '208148', 'aDvgbBqTWWE', '6PLlauWxF5E', 'bCDfIJ12oqM', 'MbpPBLUjpV4', 'hawztAtYHCE', '45c3QQzGakM', '5XX0csik6VQ', 'bI3DTH2yTbM', 'k8NgVOCDYKM', 'WBCRTcMJZZc', 'k5-3KuvCFms', 'w44JDB1NmqM', 'SaNXCez-9iQ', 'YcJ5RJYUr7Y', 'AepwIhSbAws', 'y5JdqGL5DRc', '261267', 'BseI8-TYWm8', 'e1E5W_ZefmY', '125895', 'AGFgaKPzjMQ', '1A-aRhYx-GQ', '_8pvMpMdGM4', 'TfBVq9oWBmM', '_Vp4SDp_knI', 'TM7cHOHfF70', 'n-sgVVTE9Io', 'HWLpH3NMtFs', '22821', 'SGsiGz2fdpo', 'uITHY4LORDs', '2h9VVQUZjK0', 'jZnFr-Mzj9M', 'GJyzeK-Cn-0', '270416', 'QEG_hkJsaYc', '2w7rpDe-HoA', 'TWf0XFpXwfs', 'JYdfUNjyYxo', 'mNurUl_Q2UY', 'TNwwVWA-oAE', 'G1Z_JUTgZqo', 'bfy28AlY-TQ', 'mL2v-sODUZ8', 'jjbOD6u7V34', '0Xs8wJrAmxs', 'uyeQsv2tq44', '208299', 'wtCKzu8eVJ0', '87MsiC3E2-w', 'mxa4KXSz9rw', '264418', 'SYnygYs-fAg', 'YJJoYkFPmds', 'wvMA0r3esw8', '238060', 'Uw1nWfSuyo8', 'Jz9nlw15QZo', 'WSjlhBDxNW8', 'Zg9DKOHJdw8', '244836', '102184', '3paDwuRQP1w', 'MZoLQD83R-4', 'IiGzuoblKSM', '215259', '_26JmJnPKfM', 'RST6PgpsLws', '0BVed2nBq1g', '2YwgSmmLibs', 'JGZb_ygtB0g', 'dbpGH5iP0GE', 'U4-u5NZLA_w', 'Zae-zQ3VBpY', '89951', 'GSnt_fW8qjI', '233366', 'ULkFbie8g-I', 'PbyI-sUzLZY', 'SCXp4l0CO4s', '216857', 'AHU3PUztC_M', 'RdExUaEIWIk', 'zwTrXwi54us', 'damyXH7mBic', '224599', '238683', '22880', 'Cb8ay6WtJuM', 'zrFZAofNGi4', 'Rt9rN1ntS3E', 'uBgRo9tnv-I', '202810', '_4K620KW_Is', '252177', 'rApOTQgFW6Y', 'Rugd2NMu4bA', 'ssH8WQF4eN0', 'IlgnbEdOhmI', 'HS-2vVP95u8', '0zl_GDVzykw', '126831', '130426', '60Qw70Rd9Yg', 'kY64gXOapYk', 'MpuWcGn2Lcg', '119348', 'sKwPCpFtUUI', 'YRmjALBdTdE', 'FylhSeozvG8', 'cSrM5mHACmA', 'wOKWTFYYMuk', '209775', 'jzNIU-w0MVo', 'znNt--6itO4', 'RE-LIPOFnrE', 'RvIohowRPAk', 'ACOlIiRdDyE', 'Y9fvHRNz2Bs', '2-4autDbHVQ', 's53UAEi7JEY', 'r_vjlTcrI-U', 'EpadyoYlAjQ', 'VjAvqFXEmmk', '96194', 'GkoBk5K-FH0', 'gv43BPYYxKQ', '0WIwQgH4lKg', '140293', '7sgAWvbLtiM', 'q7BxnIM2_z0', 'B1PzCwfgXyU', '6ng8CZ0ULK4', '0OXeN3MhFeA', 'JW2HHfQiGVs', 'uQds2dN1AiM', '_ZlF5Q9W1DM', 'icIS9VfbzMw', '231025', 'HgDdU_RB9UA', '128949', 'qFsGMA75-oQ', '270628', '2vX-ZRQQDwo', '95mDHiLeDCM', '18QjfdhJEM4', 'Tdw0fJt0lco', '74870', 'LX2rT5C3sJs', 'iex7I7iVnLk', '33ueXDUn3mA', 'G4HMKRdIva0', 'tw2xFbfgV4U', 't4-ZulW5np4', '236696', 'zURYO3k8lW0', 'wfLrS6CdFs4', '219310', 'L6pg3DQKoH4', '80627', '80620', 'oj7A8mpuBeQ', 'xNYsfeSgDCQ', '11650', 'afDJvn5nmtY', 'YY2yjEEoB3U', 'pFh-SLxltms', 'ZLCK8WX6qFQ', '1F0qH0EEBfo', 'VzDXgBOe5iI', 'L2uC4_Co9uw', 'UPghCarcnMc', '3ZmLhK_YHl8', 'DaXkixKFEvE', 'Kpe5fISxRTg', 'QXPOQW2tRBs', 'ZW4Oe_fKJM0', 'We5nTulz1Vs', 'j7fRIGphgtk', '261326', 'oecQ9yDtfx0', '255224', '6vbd4o5rIjM', '4VA4kqMnEqA', 'XCyngF93SmU', 'zWfDRPy4lXQ', 'ZXHX_e6HCI0', 'tdIZZ9v0IGA', 'OSyKmOye5Uo', 'iR1Os7FVGHs', 'Nzh2KkaGwrE', 'ysGFcG_PI5I', 'oZkWWCQw2Js', 'iM3wSwoAtwk', 'Lxs_6Tvq12E', 'erBIIKA6r5Y', 'sK9_de5Jx4U', 'VoETCD8fBLI', 'DQ7QKE3hzVg', 'IawsOlEKRf0', 'pf6HYOOwfGE', 'z8bWG2z-bMM', 'ZZ1IyZaMTWQ', '33439', 'MRU65o1odI4', 'V5lfNohNlEg', '4hEWns7JBg0', 'qrI7XCKRFNk', '92tWNUhG9DY', '265959', '30162', 'SWhfaL7AdEc', 'hhK7q30p0Jk', 'RAiO_rChmdU', 'BRzjQHYWbSs', 'nKiC9sEP2vM', 'AlmUwZgY6bs', 'etPDgRjrnJ8', 'qP4uuMI-JSk', '255343', 'Bf5owLv3X98', 'LZl9Sj1safM', '137827', '233171', 'wxxqXK9x-64', 'otna1VHHCow', 'GMjQUrlMa50', 'wlrb0HyIs-Q', 'q1_knonj0Lw', 'o8OZGBDPD8M', 'YF3mDOuF46M', '271594', '-vxjVxOeScU', '8ovb-GaZ3QE', '6MloL1gIccs', 'OxyQSJMvWBo', 'W-pA0lOGLR0', 'fjE2EZKgQm8', '271598', 'oyHKiX5YGDE', 'c5-L8vC6_sk', 'F5SGdvSRJmo', 'R-HKj8Yn06k', '288714', 'zj4PzGtFwJM', '3aD0xAgxxyw', 'PYylJk8R9Ak', '110766', 'JdFaSggG58c', 'T-vqHR989bM', 'Q2uHXKA8cq8', '3GyEnzE1NTQ', '131650', 'mRnEJOLkhp8', 'lzyVWNrkgbQ', '225343', 'sPxoGNvnVzg', 'jPf0LjZAS14', '206606', 'Rse6laKf1i8', '50453', '8-Hi9NmF4rM', 'yDIFWzOBjXc', 'S_tGoxSEh5Y', 'dsob2MgUPpA', 'OFBc3z99bIc', 'ta26Z2YEVMQ', 'TVhXqAI9gyA', 'FX87sfrE47w', 'E_oqbJatW3E', '0FA32bEZ6xI', 'gzZ8NTeTzRs', 'FvoZgWvc3gc', 'XyBU_gZtU0M', 'UKVwc6I06x8', '2QOf2wSu0j0', '225768', 'AVScVfLgNmw', 'dLzsNc_hzkQ', 'o2miCpS7Hwo', 'MnFRVJtHAeo', 'fdK_tsvBXJ8', 'x9E8yaFCX0Y', '2f6ZHqJ76EU', 'iS91daVpH2E', 'FSGL5K2EEdo', '136205', '282560', '271366', 'JCg26b8EO48', '5qxZFmIaynE', 'GUffC7vu9zA', '257045', '7U_z0JfleAw', 'QQVRIGEUa_Q', 'StgqrTr0JqU', 'ATfnMuJJDkk', 'uea5xJZygsc', 'RfKxYiFd-fs', 'gC_wF3uKFW0', 'e0ltF8zpEcw', 'GjCUDqWSI6c', '9Un1O2ypJmI', '_JcML8u5Wes', '6Vg10LxmWUY', 'cZDAM6NjBzE', '6q5uKCgairk', 'eo8L7lCTjDQ', '244180', 'xRJXYUZVdas', '_iy7ftq27xE', 'YQUutkMdLj0', 'avW2m6VHTyg', 'ZMAoUt0SD7E', 'i5of7ZTkyfw', 'icehEYAiimM', '2RC_DXV_dPQ', 'tvE_DucE0_k', 'FP3o75bpi8k', 'W40BaML7mzc', '121358', 'skp_SpnIOCM', '224817', 'r917wP1qsL4', 'N7tS7A0WWpM', '3oHPsYc8bmw', 'WHUHTmtBJWU', '0nJrksJ7azM', 'c_FJuhSte8Q', 'plsot5mFAtQ', 'Az3e1Opu0LE', '2c2fhh_Dsoo', 'GAY5ICoVnA8', '125708', 'nErOMpqvcRg', '45186', '45184', 'REkPZ77s3Vc', 'HQ2LwfRcrVc', 'a5FKWiI90hk', '93821', 'OEesmAnTpeA', 'AmGocfFQfVE', 'khw3YCTFLfs', 'K_5u2Wh_wGk', 'cZVM4svwE90', '210618', 'JX-mwjSw0dk', 'g99kISQbyuI', '209354', 'hj1ph17-0jE', 'ep3IasggD3k', '0rE8jEvQW_I', 'XEZ7e4pf1xE', 'rexJoy4RMdY', '122842', 'IW7IssCKgmI', 'pttwIaJmfcU', 'tXQQ0joMq1Q', 'Ob8vPQCPDX0', 'sFLTjqVS7AE', '295793', 'hdLC4Ro977Q', '_WkXQNVLQXs', '190740', 'WovurMxG2Aw', 'Sglx7douG_4', '984VkHzXl8w', 'JwzxqrD8tIo', 'XQxnAPleuCE', 'obnOnuzb-Xw', 'wI7DDCRh4Nw', 'mXdvCxLbpuY', 'nZEPf7a8GbI', 'v5AAvrZuR2U', 'pf-78LF4ORE', 'L_XttWZBKss', 'Yi6Qyn4X8is', 'fTNOAssiTYk', 'aFhT0px8AMw', 'kh6eynD9OIk', 't0Wi5Nb6kbI', 'kM6wo2bb3nw', 'Ry2NJPd4N3s', '10223', 'v0a8N7Y-Vfc', '1JQ9UCBEmCU', 'vop7tN_K64I', '15837', 'VN1IPN1TL3Q', 'wCbQxI_-GKU', 'gPWyANEm0eE', 'FfavRdRKsAQ', '40260', '80914', 'O8IJh_L0EfM', '180923', 'zcG0ms7CdBE', '12812', 'Cj7R36s4dbM', '219775', 'dyZdiWNflko', '298774', '38019', '4wuug3-5cWo', 'VDjnKdFxuBE', 'uYzZB4ccG1Q', 'WxYb2x_irTM', 'XXvSLz8QmGk', 'EEUGfVTyTQM', 'emtvrtk-jsU', 'xPhlDO-2Foc', 'c805Td8A_Ek', 'N0Y7x_fJ0Nw', 'kkaX3okuvjI', 'rWjPSlzUc-8', 'TJelZLbfT2A', 'krHZuqfXrPU', 'gRAmIaSlm80', 'QMEgjkpyVzQ', '110754', 'uN0d3ZOkDp8', 'jakiZQd4boM', 'cyu1HhakSaQ', 'VVZLA2neYyw', 'MPRqaQqrd9Y', 'SMzV26l6iA0', '106514', '224772', '1tQOvm5eQOA', 'X2leyjuolDM', '218708', '239572', 'vXABB4tBBUU', 'mRPIse3OO74', 'HqtvFTa29L8', '241164', '6YNAmRjpxlA', 'VhKJm_jiciU', '8404', '206507', 'LUKIYWa0UGA', 'VAFdgtqZz4g', '6TDXQtGUNEs', 'TUzD45ghy4k', 'tQk-eoA7JyE', 'nDXKvarLEOM', 'WAXJRnJXmOA', 'a8WV5KEMKSw', 'ItnyexqXR_U', '136215', '136211', 'JMzilFvwNXE', 'bEXCrGIOoWU', 'xwNQ7QuXaps', '88888', 'SSNrLu-eZiM', '83_N43pvgHI', 'PUIsiLk8etk', 'KSyX-lejDcc', 'ou6S6fbfBWU', 'wQkNqbrAlB4', 'bcns0Gu66D8', 'NSihgq4R8Z0', 'jNdvceZ4etc', 'YgyqX4aZ4tE', 'AggyS1coOb8', '3HRnhUin-5g', 'Olx-sTx7HTk', 'lEsFI5YJGDo', 'KD0w4BrNXQg', 'gjEYmdWrBLM', 'I5cS_TlV5B8', '88245', 'BnWvk0YRgE4', '-aqamKhZ1Ec', 'L3b9wwZ8vRQ', 'ZfQYEa2fHGo', 'oNCvb0F-c88', 'o7vcTMAX9fQ', 'ieWQdiQAh4M', 'ZbVa-a2tNFM', 'SLi2gT5H6m8', 'd7Dz34-cZ74', '3kNPvhdF1NA', 'mHIvH6Nnrls', '7wiaDbpiAQ8', 'H-AJ-grXvgQ', '277991', 'a4vRa-_nuJw', '4wdeBJ39Cuw', 'rCQYq4T8SEI', '1YEgMQ1xxzQ', 'CuF-UOcAFG8', 'mHEtr7PHxoA', 'oGnKsroR0R0', '125845', 'tXxXhGD1aMo', '4GYfmpEEtl4', 'jhb6SV2dQzg', 'qjMyjLSORY4', 'mSWwz7dXUP8', '93839', 'iFj9wJaJSPE', 'hOp6I4jGvu4', '_bIJOxiIJFk', 'lWvaIexY2WU', '327283', 'kCQqLNiO0mk', 'KPeos6f4HuQ', 'm8tzdtrgFUA', '2HP4KedfmSc', '8VP1qxX9mh4', '113265', 'XAazxiP6tP0', 'sRex0-9yFFc', 'o2bNnLOEEC0', 'YLA7h1RTa9w', 'QYp0lGhyL6A', 'rwe-hBNpzH8', 'QWaUvAL-yiA', 'jbJF3aphcP0', 'f5k5cF80aUE', '663uRzFOfrg', 'OdKp0hYomgs', 'AKofHsmxa1I', 'uyOrVTq8Tjk', 'Zs8x712Y-CM', '80866', '94ULum9MYX0', '_tBaGXNwlp0', 'AuPCZlKBzq8', 'qYJtbgLqizk', 'm0-DH0k115I', 'yyToAEoUuek', 'veHYwR7ge6Y', 'nsLACXjD4KU', 'ypZhKsR-9iI', 'sqADHmnM164', 'wRKVNiABc0w', 'tgrxA3CiBv0', 'RLHZ6xtIWSM', '4qoB5a6dR3w', '9pdyTplXwM4', 'cMUS4nhcKCQ', 'kSooCdVTI6E', '78577', '65kkuNV921k', 'po5jCjnxW1w', 'nM5S3xxNOlQ', '31tcuDMQ_H8', '47472', 'ZQuGizjoCTY', 'xXIq7YPkdUQ', 'K9faaGel838', 'sFxUNO2HOKY', 'yt9GpittX4U', 'kddCewAsxfA', 'YjNYBBs1AZw', '108793', 'UgTM9y2rD38', 'TO5HjoK8Iu8', 'pkH2TfFN-6s', '-3g5yACwYnA', '264446', '238039', 'cEXJ2zFbC9I', 'Kmtib-wZ0jM', 'FmE9BtTmxnE', 'CVx494kExvc', 'fSOVk2cS-sY', '3n44IP3tCVE', '1k7br8xXMSU', '53742', 'mMeGgB9-hSE', '206376', '27ubp7CLLKQ', 'qFppeQvdfxI', '4Q7OkrJLzAc', 'YWxvIFmYnNU', '4oeKDFIaL7o', 'BMhG11CXgww', '7eJqqvvziQo', 'i714Xt6eb1Y', 'bzPFUVGPS3c', '2PgJok07td4', '3ocpWAmSNUE', 'QLEOYF7Mju0', 'XzhRYIeczg4', '4iw1jTY-X3A', '78Ncka6CY70', '9bAgEmihzLs', 'xgAwddSkrOo', 'ce1ObTPlI38', 'hntnelpiyl8', '8XODJwsvBa0', 'A8c7q_P4jQg', '8u5aet7s9_w', '3FpmKxZgihw', '202990', 'Rw2pzFGosmw', '43371', 'ZzL2sHtTWRc', 'VbSsGRXIwjc', '2HmBM3GGTlg', 'hkGN5q3OOCE', 'eOU_40p9RpA', 'vttEPA6Xffk', 'Wn8nz8GPKkI', '193291', '0EAAfLCQabY', 'MBDZbACupsc', 'oW1OEsP7Dds', 'JY-krIuEUm4', 'rzsk_IvI7bQ', '241172', 'yG3wpvLUQcg', 'XDVkhOziCkg', 'yrIXBklJ5YQ', 'K_K3wpxkRc8', '75938', 'DiOw-w5LDJ0', 'wOjnqud5GBA', 'kx544gnOZB0', '266366', '6slq62RwH3Q', '6WDchK7TuL8', 'n4xRx0J3rYQ', 'oK951Y2N_k0', 'izFBeXMTgds', '276217', '8Cp8c-eQELQ', 'hfK8QtTd7fo', 'auTpzciNgls', 'xge9aYTxxOA', 'mw_ZwML0SbY', '25522', 'Y6zyM1nDhN0', 'QkMTYY69JYQ', 'hjBQmIWiWgw', 'C2xNDBU2Z0s', 'wR3zalLV_6c', '-tANM6ETl_M', 'C74-of1rjg4', 'kzmaKnujN64', '2Wo-0trLBjU', 'lzVA--tIse0', '2cwNG0YuwtQ', 'z6E-ocntPo4', 'd89Z_olwc2Y', 'iEOBNT0HFtU', 'ePiz4zU6crI', 'P35dyIit1yM', '106077', 'ADYia28RrFU', 'YD5vqR15nco', 'XFGHTk_3hGg', '98187', '5OXuBO5buF8', 'MroQfGehC84', '2LpVvLemgvw', 'cjgq9d8Zn9g', 'oWAyEzyp2xQ', 'w4xIyGs-3wc', 'dzSv6GwfF-0', 'S_mxvk4LEh0', 'KQ86HmgwUns', 'rNXM3avNBKk', 'aI1tdJPHz2I', 'axQ5CDRawO0', 'sC1NvtirijU', 'c5AJbOd794U', 'F6Ci45lP5aA', '0jtdrsmVzYQ', 'EOkdFMw0pmk', 'D-DqVICJXBU', 'r1erb5PSm1A', 'dLmtsRyRH4s', '247382', 'Q7nhtfkIPN4', 'LityRNuQihc', '5Fs_7A_V2kA', 'OEOkmrKvTUo', 'dZK01jhM27k', '4Fw9TbWIVJI', 'N3vSaV8Ztrg', '251417', 'hSEfYcIjIr4', 'TksWzxo81Mk', '9XCmrHbU-rU', 'IiX1k0oYW_w', 'zx4W0Vuus-I', 'lKTeLK8nq8w', 'e-2QlzFeyNU', 'RTzDzj4NxIM', '7UlSX-syPeo', '6E-yr6nPxGA', 'pIMByitigYI', 'ZDz8Qr-sJ3E', 'L5a2ijeWpUI', 'MKShLlJ7X7g', '223926', 'IDVbPEket6U', 'G38DwNDQ8Cc', 'JW3OfSCZlhc', '2lj0BaPsJpM', '0JuRmhhgMw8', '25t8nrkUfRY', 'qlDT-bmIzQI', 'MJnc4GUhUuY', '197778', 'ixZAEncExWI', '5QXHyL3BMto', '255226', '238023', 'babuyKl7EAw', 'qo2reupzUE0', 'oDznO5w3v0U', '284673', 'jEQoBvc7V1o', '288766', '8x81fzwcJko', 'mQTaEIrNxnQ', 'yEtfjJOMMCs', 'Vv2DTPyyw90', 'Gg9ZcRlwnbc', 'pAclBdj20ZU', 'CXojk-oSaEw', 'efLrpnuLwyU', '87161', 'C8Fhlk-eczU', 'pjWLxORDDP4', 'YVBsDJtAbk4', 'VcZffwwL0bw', '4Vl6AeEkAg4', 'JLqBVj6f5gI', '31197', 'k0cGUNUHuyY', '03X1FwF6udc', 'N0GhVkCwrqw', 'xbl7bU5PGBs', 'K7KEtrgBkz4', '4H9RfQuqsvg', 'l8LTcZJ-_8k', 'BBSVLGf7zPI', '267799', 'nHP7l5zAwGA', 'mziQcFSsdRI', 'UXvMaHD9kmA', 'ptgBkE_e5js', '4HazSkYihtw', 'PGBrZLC15yA', 'jFNgOznarMo', 'X3p50qqFW_w', 'BuPhjBayua8', '229903', 'jbKDW9URnvM', 'Xo6-V2RlWss', 'DNzA2UIkRZk', 'jfSGWBfVNBI', 'MFrwi-RibUk', 'kwkhYpCHWPw', '1cyUKHOvdYY', 'qrSW93EtuMc', 'TBwetweXRb4', 'hCFV5VLgS0A', '_BMdEKNF5Js', '88797', 'IwQWibE8EOM', 'eW1vgHE6FRM', '1sJjdaXXuJg', 'wUf6AvCMHbQ', 'O0Nn-5UkfoA', '1CjUHNYzW1E', '_PJ26YwqRJE', 'tUTf9R5u6r0', 'Ve-mmCM8TI0', 'kuQWPuhnlHs', 'XAT2IfFFAU0', '8M0AlvtMrv8', 'FLyWn2DCci4', 'WaaSYRPwQBw', 'QbJiphIpzYc', 'H4w9mU8B3Mc', 'oCsrnIomHos', 'TxRS6vJ9ak0', 'VugBIVwSmaI', 'HObh42PhOfw', '_4PNh8dIILI', '251646', '_PKP676ez2c', 'gjSyl6evrWk', '3OuNMjZo5wg', 'cRFiXLzcCOA', 'cAA2mONG98w', 'NZtIGzAzJZM', 'xnNZyfhusAk', 'gfHrSg3BwiQ', 'PANWQeBKStk', '4Z47qIrVil4', '45175', 'IkvL4IAiZog', 'MyDLelMxt-A', 'ZmAIDJ_gcXM', 'JlmpDdm1A1Y', 'soqnBdPOwoo', 'ge071m9bGeY', 'hThsntvCk2s', 'cfX_iuhCbRY', 'ouhCx4TgHlE', 'NuRvTWhELqs', 'x92920ole0w', 'CZigX1ntOsI', 'QWzIJuhLLrc', '94983', 'mN1Z5xEOy10', 'OoOD_VBL0i0', '274219', 'MvFFYObY9A8', 'mKP6TVuixWg', 'UuR4Rw38v_U', '0cBmQ_ItVUc', 'iMss8xBhFiI', '107551', 'dbH51F5Zqi4', 'kRsA87VU6EQ', 'S6S2XL0-ZpM', 'gvrfI9e5xHQ', 'dXMAS2tIknw', 'muOYAxkG-Zo', 'MOfEl_1dh-g', 'CL4hDu95Eqw', 'K9U2TAF9DDY', 'ITQTVfk9Iqo', 'McnbZjgCPLw', '70420', '5qQs9Cfydo4', 'DEFDuYyc-Xw', 'opHUZsc2WO8', '_BtdwH6mfWg', 'zwRBZisdpQ0', 'GMnoxaqqReQ', 'CK31s0kfp-k', 'GRFXnnrQaB4', '260011', 'SRP5FYP71Ng', 'X6-jJO00DMg', 'q3QUybiOYeU', 'EZkOWskJl20', 'FmIS69vB12I', '8UH0aPUf7sQ', '_2u0MkRqpjA', 'd99mfGIenCo', 'RS5WM3q2ZZQ', '1rVly2oeBJg', 'dJ5MXl66-UQ', '2Vtv2gPzM7w', 'kKkZihSbxF4', 'n5J1ZkGUGnU', 'W-q9bPlMIVI', 'EHbZ2EeVags', 'qvIhzmujTi8', '32j1yMF37hA', 'cOcNe3L4VAg', 'bU6CgE_kMRY', '5JMpMKAO-Mk', '9JqwFRCTKOM', 'wNx1ZnQ0MDQ', '283495', '7eWclVCXOtk', 'GMHW6XEO1ms', '4BoE-woHtwA', 'RImmdklTOW0', 'ap465Tlzf88', '37117', 'dDFyJp_OkeA', 'fTKe7E_4OCQ', 'BRdw-_dbJXc', 'Rdf0Psjyrwc', 'w_qYZSVx2dM', 'yHtR71rx16I', '262226', 'yOQHOiswVjc', 'QUpI5kMw_nA', '273314', '97095', 'WYSomBHdl4c', 'fW1pK2L6RgM', '243338', 'N0pKIn6VhOw', 'he475nnmMi0', 'YodtMIsjM0c', 'HUH9BXVmAig', '89787', 'Mw4EZYZAd9c', 'Itqbc2TBXWY', 'Vw4-ae-ucHE', 'dEBug0QYayY', '106941', 'mOnyMWhb5Ac', 'OIJr0voCvVQ', 'EfQoSpEZa0o', 'zPskvGHHQtE', 'MNLG4-diuYM', 'PtH_8O__EAY', 'xTBBDx3DkXQ', 'd38u9n5GOLM', 'aEaM_LOI-BM', 'xfP0bm6Z-7E', 'BAi3ZJo5Vwg', '5Tqu1IXJjGY', '8VB6pdJTpX4', 'aZjCq_hv2Pk', 'PMH4mdJeojE', 'WMzvDL7b4sM', '7Vp6Lvin1rA', '-egA8-b7-3M', '239235', 'MMaEsDdBsvM', 'Ns_h5IVcZ9k', 'Ha7DMd_iKyM', '1A7dqFxx8wU', 'xBsrNFxnnuY', 'HLFaW4oVP9E', 'QE0pAVSPsKQ', 'eTCnM472-cQ', '_xjBqNfiEY4', '2RDubrUjI-k', '206049', 'MFXQH7ZlBJI', '3Wi0if_L6Ug', 'VZqkWIPmH6w', 'XbolrpSc0KU', 'uU_3tbZ1zG8', 'bge5PUG3G4A', '130633', '0r8KVXUCV6c', '130149', 'H26MMmrHTlQ', '114624', 'bJI7-LnKPH4', 'qd6YuFGcBGk', 'KR4MpF0YtgE', 'FX-YgVKC1AI', 'YITXOmhQhYE', 'Wh6sht7xwqQ', 'SxbTZjZD0vU', 'TWMFQED1Myk', 'UtjenieM1Ak', 't80DGfWJ3fI', 'CZVmxwrWv34', '36098', 'ZiM_gkdFGJk', 'sMnbpyFqrlE', 'FphtHpVV-7w', '-tPCytz4rww', '79935', '79934', 'VAr7gJydnys', 'CdB8QBhFccs', 'Oj3XwBBrzXc', 'kxcCxbsKx3w', 'cM1Zuji24dI', 'fGYbbP8RDLQ', 'caLWajc18Y4', 'ltA1VF_DUSc', 'lo0R1mvjDT8', 'FdTczBnXtYU', 'WTF9xgqLIvI', 'owT0_Xfu8a0', 'NCJTV5KaJJc', 'MyfRrTjglm8', '2Crezdbre6I', 'i5bmKlHv-SA', 'aFZIvp3SgHY', 'fDYZINwIs_A', 'cR_KQlNhoNE', 'sn1fEo72gJM', 'TZXcQemh8n8', '184784', 'jUKH63mltLE', 'cSraseCDilY', 'Cd0JH1AreDw', '291121', 'cmJW6mkspkI', 'E_ocLuUw-1I', 'eSHOcLD5T58', 'vrgwwihTxVQ', 'SrMN3rwvCsE', 'PJlDO21zl88', '1o8Gy4J6WSs', '222116', 'vbVLgaP5IYU', 'Wx9nThz5z_Y', 'Ctc23Icfzvg', '255338', 'mW8eL4e7Wrg', '112631', 'uxHBEfIhY-E', 'Gljee9uq_Rc', '275620', 'qszy_WSRFUM', 'lpF-yBYou0s', '4lKz4xyCmkk', 'xw-Blnej8EA', '367506', '-lqc32Zpr7M', 'A0aE2Gzym-M', '90172', 'eTn2P4wmFr4', '1RxliidxXyQ', 'ICeSewdyf34', 'XwOdPYlyqXA', 'assx_NKo-L8', 'ky7Q5onqxGw', 'b_SffSbPVJM', 'ctMCSUT2LlQ', '126542', '234587', 'vlnKSMw5v1o', '290088', 'ShgrdU9WAJE', '4HAC00EAdno', 'Q5YU2sLKVL4', 'u94VPxEIJPg', 'fB816aeHRFk', '4Yxe1_ohz7Y', 'hp3nsb_eIc0', 'vNID-RVhWcQ', 'K7FiMf-Dmwo', '29044', 'oO61Ma17tRA', '3OMgvtWNHp4', 'xvnFF0FiyS4', 'GtRxTvuF6J0', 'vx8j_4DMqh4', '_XWUKMkxa-Q', 'vRhj2bLo1ho', 'JWG_MUy7EWQ', 'rFHIApgUtoI', '257771', 'J6zbBfzW7a0', '6xvVFYR5di0', 'ooGB4BLK9PM', 'APYv5s4ucd0', '241638', 'MhojeOmmjC8', 'esnOE1LefKA', 'wEs7pJH2mqQ', '6IUj6jyoTl0', '367576', 'wb7CfuiIZFQ', 'xlNDpmKgSIc', 'UkqTwAuA8jI', 'xPN38lYBQv4', 'xAApNMTj3as', 'TbZPa_keawc', '229967', 'SmftC-VAfYQ', 'tnhRxo-g3Xw', 'wXuBJvzeC1Q', 'OcqJx_cRc3Y', '273237', 'tL8RzwWSmAE', '27798', 'xaSf1d13WoY', 'S_ISgjJR1bc', '234053', 'N_dNuV-4iAo', 'YB9EUgrzCCo', 'UF9OlX-QNHU', 'xiRUWSUrGSg', 'LUf9vbe0TcQ', '251839', '221740', '74184', 'p5LEk2u8tXk', 'VybXjsmsjAY', 'o1cRmT9qnOc', '6J_yzh1LNAE', 'dCDAcBR505Q', '26WrTHLJJIU', '227416', 'GeSTiDe1hG0', '206051', '3J3Thmd_vks', 'vRydHjRzDX0', '2JY5HXBWO84', 'vA68fTqDars', 'DgO5O-oDeX8', 'YQanVofsHoE', 'BdqoZ5qpz0E', '51224', '6aoTjlvo0js', 'C03473pYcRM', 'xu53lk4dhSc', 'ZQaGGpcIPHM', '3lkn8MS3n8Q', 'KgXuILFtgJQ', '224869', 'A4dzxgHDhF0', 'bZ2ytqPtyK4', 'WGfGxoI05ew', 'CzstrpOTtgo', '55156', 'WJ2QF4Kw9Y8', '60037', '88119', 'HOCsiS0pmf0', '5F-KEGK9eXo', 'xXGEkDhu94E', 'qJBQH14qtHc', '4Q95Lg3Icho', 'pzUplbeH_fg', 'dH0FmwvOzs0', 'gLdRUsLw4CA', 'kj63uF0RhW8', '4kF0U8kIMp4', 'zv0Jl4TIQDc', 'gr9YU-UTJzQ', '0EphpADwdPg', 'l5_DDqck4Rs', '134252', 'xfeASyC6PPg', 'Emi9cw9xa00', '81668', 'sRMdbZVjhis', 'j6R1NTrosuM', 'oaC1UATdtAg', 'Bo5IDtP8_Fk', '7xiu1tAJ2d8', '46604', 'OUjzDchhkIA', '244623', 'pvlmYjQdRmA', 'nz2vkMyqfeE', 'OOh1_ffKOKk', 'SzJf6viBWBg', '2c6Gb73nx4E', 'MCRCXXPqFOI', 'vqBRkjHWjXM', 'fOxg1NstCHA', 'Q5uYByRyswI', '4lro65JwQdc', '122439', 'PybuzkS31J4', '1tuMFJnlXJc', 'pYUTSG9frAk', 'vwUBtNvjrU4', 'Uiq0lf9ibF8', 'MNXBOeiPhec', 'JMb18N7lQ0A', 'EGA6iulTr00', 'kPch8YhNfPE', 'taGs3-SMoYM', 'uTWeng4h5eM', 'kyPepNmxaj8', 'PmemTgQHagk', 'jnG9zog4NCs', '112604', '202431', '6-0bcijTR8k', '97992', 'aE-X_QdDaqQ', 'aiUq5xksJy0', 'nw6Kf3AtCz4', '88S1BjwMfdw', 'rC7qKZMKa0U', 'werKCgZ5dFE', 'ku-dtUqCm2o', 'HxyfY7hsjOg', '15Wu4U2VPLw', '-THoVjtIkeU', '8YsIvz4qnk4', 's2oX3zxWuEI', 'jlW4Iep4mmE', 'xZ1FrxU6hcg', 'SNBqe_JpZC4', 'JYsAacFmXEo', 'dcUlt6zk_S0', 'A6R6J8SJtBc', '243341', '-wMB_hJL-3o', 'CBYQDIqucxE', '7SsmaZZ7mz0', '6zjv1TLqfF0', 'ak7N0BqMluI', 'Kep_mLLXsqk', 'gjGL6YY6oMs', 'faMq0C_wTpU', 'mgovo8VYtvk', '238100', 'cS3BDGNDu_8', 'FCMbWx2JpZ0', '72017', 'cHrOisasWLU', 'Ceu9AkIjuLY', 'lWXjdWvB0VI', 'fi7g4GoK-z4', '_qVgNLJCYdA', '96o9hxy64wI', 'IsAtAzltJNM', '8qCNtqjygW8', 'RXcI6PK37lM', 'XQOUZhWI1B0', '9cxlcpbmrH0', 'qkWdc-E6jGI', 'UeOIb6s0pVM', 'pnSRLB6anIM', '213619', 'G_M3lYn6hAA', 'JP95Fby6qLE', 'n7K5SpMrQt0', 'esR-tOjT6KM', 'ZtuTCuh9C1M', '-a55Q6RWvTA', 'v73dbqOUoXQ', 'qpht9L3s9G4', '5HjbZAbB-Lg', 'QOxIdbNwpx0', '_UNQDdiAbWI', 'OGXUtVG0Y9w', '76sN4tvbPGk', 'O_fTDhCtAhw', 'DhXBaBOB4E8', 'jjb1cWmkhI8', '92221', 'oPvUDLhTrjI', 'G8aL3bM39co', 'DXQGngge7vU', '6G8JJ69aN6o', 'gvjQ1XfMA_g', '7vJy1zbopJ8', 'ySfHPyaDbqY', 'xUz5cCA-oTo', '6hp1SGhVYfY', 'b1Il3Nf6BrU', 'QJCDZCllSYQ', 'P0WaXnH37uI', 'JSlTJsUulH0', 'S0ecaAi_CJo', 'wz3nVBPVgIA', 'TBCjKGYBNIo', '2-EJz4RG4g4', 'AsrhHuCfvF4', 'qJh6x4wmmh8', '6c7vAwDSVGc', 'puum3vabpb4', '255852', 'WANirpnKa4w', 'mjQfQx2K__8', '207812', 'mjYeEikLR8I', 'Y4izAQYtGEw', 'wHQYmMZzyJY', 'hyazktfsZew', '2qKajMu7Vhc', 'lp9vkkimXqg', 'JHW3nD6flgU', 'll10nEjTvGE', 'LL02UFLfQKo', 'HhpziYYP2Vg', '46618', '5wpCKY2U1NE', 'MWCNzYUCys0', 'zg-ZIxVsBbQ', 'YWjTWl0oNLk', '-UuX1xuaiiE', '1dWsw38VDjY', 'yKdIZR5xfcc', '7pZPQbMKGkY', '48BD8qjClfE', 'a5CSKvCAhbs', 'y1gL_MuokI8', '5sDBK-lP8Pg', 'nQ7txb1MtG0', '4Ry6M_ZfJQc', '240915', '69707', '1W38PnuWIkM', 'juI9KoLA87A', 'JcmqmLaL_MQ', 'f47bnEUrOvA', 'mkkoJ2iVbGs', 'j9mRv472dq0', 'Iz_PDdyXr-8', 'aKPfbyW-Qxw', 'F2M7WbPXRps', 'srbrWyZRMCI', 'Uc-0G7RRxoY', 'jPGDFrQLD4I', 'bQcJVJcpgAs', 'Hkt_kncJGVM', '88oSn21TFcA', 'N4WOBzpZtWM', 'QP2CjKap818', 'p4IeTRNcxc4', 'Dq7V30WhOJQ', '56276', 'wMggOhhVouA', 'gFAOKuqpUq4', '6MYUY5tC2Us', 'XblL7mcdDdg', '112903', '49358', 'HjLpXXFoAQw', '5tV5rZZJDCE', 'KJyz9fCt7Is', 'UmB5c_QqUPs', 'HQ9NnDQcxD4', 'JGEEA_JVriE', '7CLe7PZtna4', '56006', '112169', 'S2znq3iRPwE', 'zuc7vUhZNfY', 'ddix4XuaUlY', 'SI39azgVUR8', '9tX18DNC74w', 'Q5fZk_jPjBI', 'EULEL3QhKD0', '25271', 'eJwZfdtlks8', 'MsjnLoTKAXo', 'BLFUj7_uy_0', 'oANUXY3xXKM', 'F59hwsm4Ld0', '33312', 'EJT25p7JahU', 'D5cQWqYcBAE', 'guRD0zQC6Q0', 'e0hYEr848TE', '2Zx4huY-KN8', 'hASTLbFHrEs', 'dEXSb0CfodU', 'rB6WmWvvyxg', '34346', '76124', '3fhCxePBuZY', 'uXYAfpQUYVE', '24202', '2-5hH_k2VFk', 'URP2YlSNuZ4', 'bBJ0BxmIocQ', '8wdxczYf1jI', '5hXC8JbiLd8', 'dZolFNqR-hA', 'PRZ4VhESz1A', '256174', 'Dnhxm6sHQpc', '83310', '-mJ2ud6oKI8', 'pU-MjERGTUk', 'tv8IhQZQuJI', '_t8ETpf2LnM', 'BBoe8-HWPSw', 'U2Ydtq6qvL0', 'BNaRO9g8ugQ', 'iYtD_ArCdKw', 'ELtbrO8FbuI', 'S21ApRNQ9Ko', 'hlBOP5NskhM', 'pwj9YeMJC08', 'FRKwvmrwrZA', 'cKldvZeyRDA', 'EK2bnbzmJs4', 'c6wuh0NRG1s', 'pY4ovojS4rk', 'zknhrUs7-lI', 'slLRsFFiiRc', 'OJwO6g01qO8', 'dOSyvhYsfFo', 'K5cGfs3i-tk', '212532', '-mqbVkbCndg', '0mXv97u2OCM', 'KmYG8zaRmOA', 'hUBQrLjm4M4', 'aWwjhcYLbRw', 'lksy-At0vxc', 'rEWQW_ibDwg', 'E05bA058vts', '3sUS8vXbRwg', 'EiG3r8hAVeY', 'zR-kKDaSDmE', '201582', 'z7FicxE_pMU', 'badtXoOJaf8', '130448', '262165', 'UfLMdSGGQVw', 'HAid0IEUoFQ', '0tkWa2skSmA', 'u6H0sVuY1ac', 'FGnHDWGYsA8', '3y2YInNUmHY', 'kz7ahNfXFsk', '9f6A3ucYArQ', '244829', 'FaHosBIr0xY', '_YzIvwvyIq4', '96350', 'bh4_Kd4hhd4', 'Op3CnqRLD9w', 'Ja7phs8EbWk', 'WygyVNL_qdE', 'aqmRPNfeOy8', 'Vx8npmcFxak', '0AkGtPzl7D8', 'gcpsSao7kHM', '8f_lBxZgDb0', 'Jg2okZn6Ut8', 'DtwbwyfajnI', 'cKUPgzZu-Fk', '8EHEEXex5D8', 'wLj_gnNON7A', 'zFTuwjr3xq0', '96179', 'eZVcshSUD3Q', 'gXDRWhJbfFU', 'w-PFjo89Dpw', 'jqKzaEniiKo', '9ceYD_OzPz8', '52068', 'k4T6GaDrcjs', '8aZbX-xMdgI', 'hF6kFQPdBjY', 'olVQZV_1rdA', 'IHv_yBn83P8', 'Yn8vNC41UMg', 'ARNWtLCbfW4', '128258', '1J9Fa995Ojs', '2iukwQJjGHE', 'oOhxCwkZsUI', 'XcHLB-qfv5M', 'CQnwOZRgQXs', '5IhAgV0Bf_4', 'pC0zFF8CXXk', 'bkP-BNW4oMg', 'dQ56b0bqmc8', 'aiJg0jtIHOM', 'MIuJDn_0yVU', 'O2CEvvYWWbU', '6qmReTSoz0E', '37459', 'P4qxfjZlIrY', '9Nhoi1jfDbY', 'eYCiRWf2NHE', 'QzdEjKQFisQ', '5RVF_3YBUVI', 'uWW1ejwFURI', 'RwcTz-tOIeo', 'gJdSxPhf85M', 'JDgqyOkzXHw', 'OKSx1zxHGpQ', 'c9jD33baJ60', 'ZZzdvUdOTww', '9dFEGb_RfwE', 'BaX10vbFhuU', '8xfW_azeNPk', 'cMsTvqU_-rc', 'gU7McujYYPY', '0bsTzavb-AE', '4Kh5N9W-Jr4', '48u68AzcWvE', '3sDL7mwosP0', '0DBfvvIVmqY', '_HabvL0VnrQ', '139006', 'GxcOSmJAyYQ', 'HXuRR2eBHHQ', 'rvQ2cRnroOU', 'snVkfJKvjwk', 'ixQbCXLUUj8', 'o63doZKEIds', 'HIsJqphLCyw', 'NzpymNJaFjo', 'LpbSYaPRTqI', 'E0g6nae4Ae4', 'ngp7s5Wvde0', 'nAhn8-kZpM8', 'ALlKbGE6BH0', 'yBGuxyO-ElM', 'zOHZDq2BvGo', 'vCWpKubBbcw', 'hfVXx8hfKak', 'P3QEOJWxXI8', 'WUeSV0Z23Kg', 'H9zVQlzit8Y', 'raQ9Pcgo-II', 'aE7sckIAWuw', 'oVqBUyKvgdU', 'hnSdAbnHDy4', '188122', 'YAYfMkxhRiQ', 'Na6170hd8po', 'F8KE2ZhoUe4', 'ZjsQqd6KZIg', 'SZRxuS6fn9s', 'nD1R4UedEDo', 'nGah7qST1dI', 'TSDC7CCyeGY', '0OC3wf9x3zQ', 'v1GKBjohgHc', 'v9GshyXtiWg', 'EO_SN04Xef0', 'O3whFU2lAAk', 'kPn-t6NSxfQ', 'XFJQJb0yaKY', 'aXla94xd_AQ', '79644', '91y7nPEWdmQ', '4WTVL5bNybU', 'yp6Gd2NPwOU', 'vM9AH4EqCaA', '0YdYFtVdlWE', 'd0QNH2vcDgU', '89747', 'FHlzZ2VxuGQ', 'CbQxC1iPyS8', '2ahFSMFvs_c', '227426', 'J_DtcW86D9c', '194625', '4AQC7_uCuEE', '267255', '267252', 'cHBRDdSXLtU', 'PoKZEKOf1dA', 'eMa6gbD7id0', '268836', 'r4ul1wl_1T8', 'zsRTbbKlsEg', 'kqXpf26EL-s', 'g8NBNtY3cpU', 'iH04VOkbof0', 'uy9MGhVqCp8', '39lcRCFvV-s', 'PtdK-TLOuD0', '120vnZnmhq4', 'qCUg4ek1PPE', 'E7ZLz3tSwNM', '6_k3cw9_k-Y', 'mrQIrm6hYMQ', 'zJWmmDk9fCE', '-WXXTNIJcVM', 'HfLVQZLvcH8', 'FMW6diQ9rMo', 'LHC7ZKJy4Zw', 'd3I7Ug-_3L0', 'YEOU4KFDjZo', 'xYtNgq9eTlg', '250430', 'cl1DNRGX578', 'sWsDAG6x9n0', 'Qe4AT670hq4', 'Q7OvlYjNt9w', 'fEm9AdLNrjk', 'L1gXZVU6AE4', 'Gv0kKbfwPpI', '273171', 'GcfETVXgtg0', 'tXxf6-CilNI', '0Svu5BldR5A', '7ZzbemE4QEE', '96361', 'R9ypacCuEZo', 'jFpRdhl3fgw', '_BXmhCPTQmA', 'yxZydS2qHzs', '94215', 'ZSBoSJaD2tQ', 'Emjv2cDzW1E', 'S9PDgK7fpJI', '-HwX2H8Z4hY', 'VCIe-4p0xoM', 'pKXaKinzTmY', '55T4QNcdpOk', 'nF0AMbTH4VM', 'ExDLNkDVsxY', '1mHjMNZZvFo', '0AA-wmk8WdA', 'GCOFujDHDx0', 'ZJGzEeDXbyM', 'lUNNDDsm7R8', '0W4WsjhDgUI', 'LKAEv8x9jKI', 'TFKgo5JlPro', 'D02PT0bl88A', 'qtI3CB1jslQ', '1x7kf9vArjU', 'R8leu0tEJ4o', 'RaTQZrdICKo', '_v8c7iWkYz0', 'OHWyYVux-yw', 'IAubgwEiCcY', 'ZRic9ygn9f8', 'bD0FqMn1KXw', 'zeQKU2L173M', 'I3SPlbTGuNc', '15ktF-6wutk', 'NOl0v54DaXo', 'NKindd5Xn3s', 'RgubFcmvgDE', '9-EO2oCAGA4', 'TwTLsgfpKvA', 'xqcqieV0Rn8', 'dWfgSGnd9zM', 'DatH-ra0VKY', 'F4OhXQTMOEc', 'aYdMtEO0cbI', 'zU2_X9lIcUM', 'FcAgbLF6__s', 'uAExKaLeOl8', 'eaXDCknxPrU', '140317', 'iO34hER47xA', '-t217m2on-s', 'qmx0nQZYHIo', 'amem5EmRG3s', 'J3JU1zBQ4RM', 'mn8_HvzbN5c', 'VWik5oKP6IU', 'OBaMn1-x7jQ', '294178', 'j4MpQ6CKoDE', 'YRbtXb9fWmI', 't-wXEPHHtME', '9VZ4cpoTFbo', '84133', 'HVksxaUzv9Y', 'laxadgca3Fo', 'MTU_thei3-c', 'ihuGFUrzD30', 'jD3iIEsc_K4', '18JTkk8JbeU', 'qJZlp9uxoTU', 'WtiBpLt2wuA', 'TUY83eDK5jc', 'R5a3TP-l_n4', '45676', 'iFGoQUh81as', '236399', 'sjoArVtU8-o', 'bhFK-xy76U4', 'bdtwQxwySN0', 'f6S2XNPIiFk', '0hCihQ5Kep0', 'kDyK9VGfLW8', '36o2cux9kfQ', 'Ea_Huc2-lwo', 'wj4snKbUWZA', 'kKMfsWrigTE', '139032', 'WXKgBIiP8IA', '87400', '21Kxt5L9OBE', 'XAgD-xoil40', 's1tVE8g6JBc', '112148', '3VsrcbjPwZY', 'cUm0TN3vXRc', 'aCwLQrJz4Bo', 'Zj_4YmbMWtg', '233389', 'YGeVGXXK3ao', 'BmDybDBTe7o', 'xk4C4p5vHDk', '13JpsLvddoY', 'ueCWy7aTmyo', 'WZVfvgTeFPo', 'ygb8Cfxghbs', '4jTUcNlxlYA', 'MSmTFZ_-THM', 'F9NruwaEmA8', 'FsmNLTdE2p0', 'CvW0Mh1EWFA', 'XgT2WWcXip4', 'FR0B64ID-hA', 's0PUurm1ONo', 'maO6KmmgcB8', 'nISNBD3I95A', 'W53uRqITk2I', 'u8ViR4L2cVk', '229090', '24xayGF5yYA', 'YqHEmUKUy-E', 'wCtZdAdoIm8', '-dxfTGcXJoc', 'H4RysMUSQD8', '6qPjYvdZiLA', 'ePtlUYCdrNM', 'DVvJoMt9o80', 'h4LrwMn94ss', 'wdU-0bttAkc', 'luQfWSfb1s0', 'atxoi7pB5TM', '48nifdN2vSI', 'RRKez9BR-94', 'kk4gr5A6_Uw', 'J7UduuBfnrE', 'R-17BoOk4kc', '5YnYGjrhzF4', 'DfTMoqwMHVE', '8P0zm2oYDyY', 'b8xmgi4VV0M', 'Xe-keAcLge0', '131936', 'DZBpdzrMelA', 'T-8TvJcS78w', 'QI-TTqj0KnA', 'BB_VwJSg3AI', 'STeqtJLakQQ', 'C-UUQju3bXo', 'HuIKyKkEL0Q', 'NkbRuTJaj_M', 'Fmwc7wkIc4Q', '59333', 'VbmSzYg_lmg', 'pI5Kng_GuLE', '21638', '1pvK0_9SQns', 'CfWxp5bRt2A', 'mO4H5S_Q7aU', '91276']\n\tstandard_test_fold=['7l3BNtSE0xc', 'dZFV0lyedX4', '286943', '126872', 'qgC8_emxSIU', 'kld9r0iFkWM', 'rC29Qub0U7A', '4YfyP0uIqw0', 'FMenDv3y8jc', '4wLP4elp1uM', 'KYQTwFVBzME', '27v7Blr0vjw', 'DnBHq5I52LM', 'HR18U0yAlTc', 'x266rUJQC_8', 'd1CDP6sMuLA', 'xSCvspXYU9k', '4EDblUpJieU', '4o4ilPK9rl8', '53609', 'SZ7HK5ns6mE', '243981', 'ySblgk7T7eQ', 'MYEyQUpMe3k', 'EujJ0SwiCRE', '3HyAaqre_Fk', 'iQDB_OkAQWs', 'gE7kUqMqQ9g', 'eFV7iFPYZB4', 'IRSxo_XXArg', '3hOlJf_JQDs', 'BRSyH6yfDLk', '1jogeKX0wGw', '3At-BKm9eYk', 'NVLPURuAVLU', 'pZye4zFzk3o', 'l1jW3OMXUzs', 'XKyumlBmix8', 'eKQKEi2-0Ws', 'WgI8IbJtXHw', 'tnWmVXZ87h0', 'YCEllKyaCrc', 'W1CWpktWtTs', '8wQhzezNcUY', '0bxhZ-LIfZY', 'lrjm6F3JJgg', 'Vdf1McvE9ao', 'eQc5uI7FKCU', '2QXHdu2zlQY', 'YCI-ZzclIPQ', '2Ky9DBSl49w', 'SKTyBOhDX6U', 'b86B3hP8ARM', '23656', 'kpS4BXif_Sw', 'dR68gbeOWOc', 'tC2KicUHB9Q', 'absh1hsZeF0', 'c5zxqITn3ZM', 'uogwnZGb-iE', '46495', 'Sq6DIhFxPqQ', 'PexNiFbPTYM', 'z441aDJvAcU', 'OORklkFql3k', 'WbtsuXkaGeg', 'grsV1YN1z5s', 'Gc_zIjqqUys', '424SXFTCFsA', 'P17tYiqMGRU', 'UweZVaFqruU', 'mzAu5gxjE-w', '8TDAP0KNIIw', 'u9ZV8jb_-U0', 'iPPp6MCythU', 'lwL4hjhkid4', '102389', 'frCWtiam4tE', 'pSxte-ms0t8', 'c9hE1ghElrM', 'WfNiQBXmPw8', '_q7DM8WkzAQ', '257534', 'fU5AYkq0m9k', 'q17gSr9kNww', 'AgH84SNRx5s', '206585', 'yzCHa2qchpg', 'GmpDbIstUdc', 'eREud0qYR3s', 'NoOt0oU843M', 'svsbGQn389o', 'ZsLrKF7_Oos', 'Kyz32PTyP4I', '7idU7rR77Ss', '8lfS97s2AKc', 'X2Hs89fZ2-c', '5vwXp27bCLw', 'tZDNinnrGf8', 'KB5hSnV1emg', 'TxRtSItpGMo', 'eJfT7-dDqzA', 'x2n19Cn96aw', 'XDVit9ASVUg', '6brtMLkjjYk', '-rxZxtG0xmY', 'JATMzuV6sUE', 'LueQT0vY1zI', '267466', 'm-7yRWZLwLY', 'OWWHjP3pX9o', 'QnYlpSeVOYo', 'V7OFSHYcQD0', 'GK-Pprzh0t0', 'yLo-Jl8nBXU', '200941', '61531', 'ezuWKsxPRSM', 'ehZrOdw6PhA', '-6rXp3zJ3kc', 'Z4iYSMMMycQ', 'MtIklGnIMGo', '116213', '3XShFTBsp_Q', 'YQZPnHZRp1w', 'fsd1qPLA3kY', '208322', 'uVM4JWjfGgQ', 'QWll4lS1qqI', 'Vlas-mPydcg', 'teQqaAmqqx0', 'AQ4Pktv4-Gc', 'yCpHmPSshKY', 'pDRdCSIyjkA', 'sIusv36VoBY', '8jY_RhOS89o', 'GKsjv42t284', 'HA2AiTz-qxc', 'GXIfrEUJ5d4', '0Fqav67TDEw', '10219', 'wHeZHLv9wGI', 'qDfSYz0PX9g', '180971', 'qBanrqkzobg', 'NgENhhXf0LE', 'SH0OYx3fR7s', 'lc5bSoGlQwY', 'XrNaL-MTjXg', '8i7u3fl-hP8', 'N-NnCI6U52c', 'r46amqjpWgg', 'QVyxySAaehE', 'JKueLneBoik', '110565', 'TqQgIxR7thU', '267694', 'ZKErPftd--w', 'GMa0cIAltnw', 'MSHBEntSDjU', 'AB1PbMaW03s', 'oBS-IW-BO00', '5fKPJPFqPho', '8NPaDkOiXw4', '104741', '2ItiGjefTRA', 'LFOwCSiGOvw', 'YLK58srjhNI', '233939', '5xa0Ac2krGs', 'CbRexsp1HKw', '112425', 'bCBMKwafZKY', '_0efYOjQYRc', 'O2ShYliS3CU', 'Oa2xVjzAMFc', 'bnzVR2ETQQ8', 'yBtMwyQFXwA', 'TtAyUQtmTLk', 'yXE_XZUb8qE', '3wHE78v9zr4', 'cml9rShionM', 'rePYTlT5_AY', '9TAGpMywQyE', 'ryE9VBiR3p8', '238063', 'NlrCjfHELLE', 'oGFDE-6nd7Q', 'bWmrrWQOVCM', '29751', '11UtTaDYgII', 'jZe-2w7pkd8', '275267', 'tymso_pAxhk', 'PcqKFt1p3UQ', 'sfaWfZ2-4c0', 'kLAXmTx2xOA', '3OYY5Tsz_2k', 'wk5lFk5kFjY', 'hE-sA5umuCk', '3IUVpwx23cY', '92291', '102213', '236442', 'nbru7qLot04', 'zhNksSReaQk', '8VhVf0TbjDA', '35694', '20LfN8ENbhM', '257277', 'VsXGwSZazwA', 'EyoMU2yoJPY', 'E1r0FrFyNTw', 'CO2YoTZbUr0', 'wC_1M7KIv9s', '24196', '194299', 'R9xTBw3MCWI', 'cY8DcaHXNNs', 'SwT0gh0V8fI', 'UiurP5k-f1A', 'N0d2JL7JC1s', '208592', 'GAVpYuhMZAw', 'pvIQWWiT4-0', 'namehdJxRIM', 'tNd3--lvSXE', 'NaWmaHwjElo', 'mfpR4CN9LZo', 'U6IqFbpM-VM', 'XLjpZUsFEXo', 'YUNxD04EvfE', 'hI7ObFqn9Bg', 'CO6n-skQJss', 'RsE2gYghZ2s', '2ze94yo2aPo', '254427', 'MHyW857u_X8', 'Xa086gxLJ3Y', 'Uu_XyXyKHAk', 'TsfyeZ8hgwE', 'vI5JH0daNsM', 'mmg_eTDHjkk', 'lD4xtQ6NpDY', 'XWIp0zH3qDM', '259470', '0eTibWQdO5M', 'fcxbB7ybUfs', '5pxFqJ5hKMU', '245582', 'WQFRctNL8AA', '2m58ShI1QSI', 'cn0WZ8-0Z1Y', '25640', 'huzEsVEJPaY', 'UTErYLpdAY0', 'F2hc2FLOdhI', 'vGxqVh_kJdo', 'F_YaG_pvZrA', 'UNLD7eYPzfQ', '0K7dCp80n9c', 'xBE9YWYGjtk', 'nTZSH0EwpnY', 'mZ_8em_-CGc', 'fdc7iyzKvFQ', '221137', 'QBc7X5jj8oA', 'pnpFPX34Agk', '63951', 'veA6ECsGFxI', 'XbkYA-iXUwA', '1LkYxsqRPZM', 'qAip3lZRj-g', 'gR3igiwaeyc', 'pIaEcqnzI-s', 'oHff2W51wZ8', 'XlTYSOaZ_vM', '3WZ6R9B0PcU', 'IOpWjKAHG8Q', '53766', '190743', '107585', 'SYQ_zv8dWng', 'hBzw4r0kfjA', '0uftSGdwo0Q', 'jj8aSNPHMw8', '86c2OkQ3_U8', 'rhQB8e999-Q', 'qyqVc352g3Q', '1zXAYdPdzy8', 'nZFPKP9kBkw', 'A1lFJXUpxZo', '-cEhr0cQcDM', 'Kn5eKHlPD0k', '255408', 'eD5cScqaf6c', 'FHDVQkU-nGI', '24351', 'NOGhjdK-rDI', 'fz-MzQcOBwQ', 'DjcZrtcBZi4', '1HS2HcN2LDo', '209758', '2o2ljA0QD7g', '211875', '5lrDS7LluCA', 'ybK5wRaaUyE', 'M6HKUzJNlsE', 'QIonRUsCqBs', 'k8yDywC4gt8', 'jPtaz1rN6lc', '69824', 'kI6jzM_aLGs', 'x8UZQkN52o4', 'ZKZ8UjaQQT4', 'obGF3RfWQKE', '221153', 'YgyeyooSz0g', 'faUvT7zfsyk', 'ddWHTdJz2O8', 'OKJPFisBoPY', 'HAnQVHOd3hg', 'EO_5o9Gup6g', 'F7zQPzwFToE', '273250', '1pl2FVdQWj0', '91844', 'bvycs3BXtx0', 'hbJfSyJKBEA', 'ZHUFlEgKk-w', 'OyK86reBnJE', 'xwvSYhQrHoA', 'H-74k5vclCU', 'Sb6ftNgzz9M', 'Hq3cHc6X8BM', 'jscKL5jS-SQ', '2vsgDSlJ9pU', 'DtbT85s3i94', 'LcfubBagG6Q', 'f-VdKweez2U', 'a8UMRrUjavI', 'MvEw24PU2Ac', 'MZUr1DfYNNw', 'UcV-bpksJi0', '2W-U94hXuK0', 'OctOcfI4KSs', 'NocexkPXja8', 'eUwbRLhV1vs', 'bdFCD-3BCRg', 'TXiOSZdaLJ8', 'XadAy93f1P8', '136196', 'gJjkCPO7iXg', '210433', 'oH9fMma8jiQ', 'd-Uw_uZyUys', 'oQizLbmte0c', 'X6N7UEFJLNY', '0PlQc98SccA', '3REPHw7oLWo', 'vB_kZocHtYo', '2BuFtglEcaY', 'HMRqR-P68Ws', 'V27mmEkN80g', 'Y2F51I-dzAg', 'dTcz1am1eUw', 'gL8h7lOPv1Q', 'WoL4fCxGd8Q', '135623', '41381', 'IHp8hd1jm6k', 'dHk--ExZbHs', 'o2XbNJDpOlc', 'V2X1NU5RkwY', '9orb0lQnVW4', 'fsBzpr4k3rY', '2fbBrB1nJEQ', 'um8WVjZMLUc', 'eE8Qr9fOvVA', 'fVCDn6SdtVM', '83400', 'an_GzG40hcE', 'xkEK17UUyi4', 'y3r2kk8zvl0', 'KanWhGY33Hk', '210259', 'DR65no1jCbg', 'lkIe41StoGI', 'RB3HA-ZMtFw', 'qEuJj4uW93E', 'ydzNAuqUAnc', 'GO0V4ZGSF28', '9PzZSheh10U', '6RFVsOWK1m4', '-s9qJ7ATP7w', 'ey1lr8wFFDc', 'oZxMx8e0x2U', 'UjqA6KVW2m8', 'OaWYjsS02fk', '79356', '34cU3HO_hEA', 'KZzFCrEyKF0', 'c5VEvmutmVg', 'O4UkHVJlIs8', '22373', 'v_8QeoNc4QY', 'BR2pkk3TK-0', 'EMS14J0odIE', '221274', '92496', 'DMtFQjrY7Hg', 'h1ZZHUU4j0k', 'gpn71-aKWwQ', 'tW5xAWDnbGU', '88791', 'vJDDEuE-FlY', 'kaudsLIvYC8', 'x0rLwBIocuI', 'wnL3ld9bM2o', '8wNr-NQImFg', '37NMbnd7r20', '56989', 'ctAZf4sMBUQ', '7npCA0zoQ8Q', 'u9I5WD3Nglk', 'IIPYcCii7Sg', 'JNhqI4JtPXA', 'Bpy61RdLAvo', 'C5-cY1nPQ20', 'ihPjsliqz5o', '4t5k_yILGJM', 'mgsvwAVQAQo', 'Ie6sDptjAsU', 'lkeVfgI0eEk', 'O-b3DQg0QmA', 'PzI6yY9Y2xQ', 'lYwgLa4R5XQ', 'NIpuKcoJhGM', 'LpTbjgELALo', '0YiAKqU36KE', 'ZznoGQVwTtw', 'QCR7uyowjhM', 'ossKC1VrusE', 'p4WmcxrXkc4', 'ZS1Nb0OWYNE', 'P0UHzR4CmYg', 'qTkazqluJ_I', '252097', '0JaYazphxfM', 'zvZd3V5D5Ik', '-RfYyzHpjk4', 'l0vCKpk6Aes', 'ktblaVOnFVE', 'KRje7su4I5U', 'FqEekswKPWE', '130366', 'HFPGeaEPy9o', '-HeZS2-Prhc', '93iGT5oueTA', 'L-7oRnbi9-w', 'pQpy7RSfWzM', 'YsMM_1R1vtw', 'SBFnCNzlynQ', '4dAYMzRyndc', 'CU6U-gS76K4', 'NiAjz4ciA60', '-9y-fZ3swSY', 'LD3HYOwk1Bc', 'QXXexH-ow_k', '-UUCSKoHeMA', 'RVC8l5hf2Eg', '89ZmOPOilu4', 'xobMRm5Vs44', 'xmLJHru6Z1M', 'zfZUOvZZTuk', 'LJGL2sGvSS0', 'Pbu6oAKFCvo', 'nFTo-Lz4Fr8', 'CwF97vXPYX4', 'WJM8u2I2rQ4', '8XZszYrUSCQ', 'fT6SrlsWV7M', 'fWAKek8jA5M', 'jXQmVFcOiUI', 'KrmVX-HANew', 'kXhJ3hHK9hQ', 'oPlnhc0DkcU', 'OFia3dWgaoI', 'VVtx4IDsHZA', 'VIVkYG31Oas', 'I9iV9q3ePhI', 'ZeH7gZw94k0', 'wznRBN1fWj4', '226601', 'TcTGCIh6e5s', '1S6ji_d4OLI', 'mRqqH_gx7Q0', 'Zb7bdrjWyEY', 'VDkBM0ZG4q8', 'BJS5KCSowgU', '3UOqbf_B_Yc', 'LyOq9mOEPuk', '-MeTTeMJBNc', 'QLI-OnegxFM', '3odZe3AGilc', 'VXy21GwGs8o', '7deoh0NoMs4', 'DzdPl68gV5o', 'VS7xSvno7NA', 'H_x5O9GdknI', '67uKYi7mslE', 'Kn99u05vlpA', 'gKojBrXHhUc', 'AHiA9hohKr8', 'kmgsC68hIL8', 'XVWiAArXYpE', 'X_TusmBIlC0', 'dlE05KC95uk', 'KXsjl0DKgL0', 'b92iw0OAnI4', 'j1m6ctAgjsM', '6EDoVEm16fU', 'jE3gYsxr_5s', '6EJHA6IDLNk', 'xXXcgb9eZ9Y', 'rcfnqiD0y8o', '224370', '237363', '7IxmlIwqigw', '6gtfeIqGasE', '9GzFQBljNIY', 'vGkIaClHKDg', 'iXiMifHNKPI', 'BTjV5dU_rfY', 'g6VJg6ycUk0', 'Y8dI1GTWCk4', 'y5Jpf48SUX8', 'iFxFTtCQ6zA', 'ZKKNd0zR8Io', 'U8VYG_g6yVE', 'GNP0PFas12Y', 'ussfmzwftQ8', 'jLN6B0aSrW0', 'OXsTIPdytiw', '121400', 'CKqDDh50gcU', 'HJTxq72GuMs', '273207', 'lxBKEPIUSgc', '234046', '59673', 'USkMa4Evv7U', '213327', 'kXiBdruxTvE', '201005', '94481', 'ChhZna-aBK4', 'a4PHWxILDp0', 'SqAiJrvHXNA', 'kg-W6-hP2Do', '9Lr4i7bIB6w', 'fhADeWE5VgU', '-yRb-Jum7EQ', 'DVAY-u_cJWU', 'wd8VQ5E7o7o', 'N2nCB34Am-E', 'f8Puta8k8fU', '272838', 'Qfa1fY_07bQ', 'WBA79Q3e_PU', 'ozA7pRW4gFM', 'WuaoxGAKue0', '-AUZQgSxyPQ', 'l4oMbKDuW3Y', '198112', 'H9BNzzxlscA', '224631', '111881', 'U-KihZeIfKI', 'JXYot3NDQn0', '7f3ndBCx_JE', 'F8eQI8E-6q4', '112509', '46615', 'p1zqEGwRMI8', 'Wu-wQTmxRgo', 'V0SvSPkiJUY', '28006', 'cia8OM3Oe7Q', '_aJghSQmxD8', '97ENTofrmNo', '252912', 'bkX5FOX22Tw', '108146', 'Iemw8vqt-54', 'vTAV6FThy30', '_WA0HtVEe8U', '132028', 'nXWNHVZtV9A', 'MLegxOZBGUc', '224263', 'q5M1God4M6Y', '9cYNT_YSo8o', '22689', 'SD6wphlw72U', 'SqofxdeEcjg', '_on_E-ZWy0I', '222247', 'cX8FScpsfLE', 'k1BrzX5bc7U', 'Rb1uzHNcYcA', 'RChkXDS8ulE', '7mb8Y2AhXIY', '226640', 'MM2qPdnRmQ8', 'unOeTDc2rlY', 'ROC2YI3tDsk', 'AlJX3Jw3xKk', 'MHVrwCEWLPI', 'bNQOeiAotbk', 'TLPlduck5II', 'An8x4UfwZ7k', 'JHJOK6cdW-0', 'xU3N7ujUB-g', 'RvmTZVNAAuQ', 'LtlL-03S79Q', 'Xy57UpKRNEo', 'lO6N9dyvPTA', 'cW-aX4dPVfk', 'VwGPIUNayKM', 'p7zuPEZgtY4', 'ZtocGyL3Tfc', '24504', '5eY4S1F62Z4', 'ttfaZ8IIWCo', 'z0y1ZxH1f74', 'VLQgw-88v4Q', '1Gp4l-ZTCVk', 'QJBQIOmG1CA', 'jqutn5ou8_0', 'gcFECfN4BCU', 'Dm8AL84e11w', 'tO68uTk-T_E', '215318', 'DlX-WyVe-D0', 'gLTxaEcx41E', 'RmX9t_HY_dU', 'HbaycY0VuZk', 'dxsPkcG-Q30', 'ZcFzcd4ZoMg', 'yUqNp-poh9M', 'yoDMh8FlHR8', '167521', 'kbRtSmJM5aU', 'skRqBxLLJkE', '100178', '-ri04Z7vwnc', 'mVnqP-vLpuo', 'B9oeT0K92wU', '_OmWVs0-6UM', 'DebbnL-_rnI', 'GlShH_ua_GU', 'Jz1oMq6l-ZM', 'L-a4Sh6iAcw', 'LDKWr94J0wM', 'aa0J1AXSseY', '173CpFb3clw', '202826', 'Wmhif6hmPTQ', '283935', 'naZi9AusrW4', 'wO8fUOC4OSE', '_1nvuNk7EFY', 'PHZIx22aFhU', 'ex-dKshlXoY', '6uoM8-9d0zA', 'ahG9c_uaf8s', 'vR90Pdx9wxs']\n\tstandard_valid_fold=['188343', 'VAXhC2U9-2A', 'AxNy9TeTLq8', 'EmmuWoCUgXs', 'icbUzboLcDQ', 'KkKWFZZmmCM', '2Xt31_d0XEE', 'uooIiW6dEyg', 'JAnRCQ9A0vI', 'NzvNW7vP-Co', 'Zvisaa77Cng', 'JOK1SSmPtFw', 'Y7h-S3cJ52o', '_gr7o5ynhnw', '70280', 'ZaoFHcbRM9g', '258654', '--qXJuDtHPw', 'RArhIHk4Qs4', 'TWszOxkOV0w', 'K8gp7ncdUl8', 'uacdDoBtT1k', 'Fy0Uid9afM8', 'r8Jyl2Bfl14', 'UiPmjKggv1s', 'vU0a4F36Ksw', '9QI-9w_VdB4', '6_ZT8beQXq8', 'UvniNGPyeBc', '117tQqLjza4', 'xjsaS-LeZ14', 'zhE_68GMJIk', 'lO87-4Kf0cQ', 'EEjCkc82oyk', '-uywlfIYOS8', 'mjpCK2Edsv8', 'XzVapdEr_GY', '31474', 'x-zGBp7axao', 'TXCXFYIc3Yo', 'SuIcJvERiFk', 'kvUb78Rdzdc', '102858', 'XIGpuL-Kkyk', 'b-FX9NOVQOM', 'ViyQVpGW05w', '0y022OlZ3W0', '3V2qm0rw920', '75RGHaxmUK8', 'YbuG8xyUO-o', 'IRY4D_-mx3Q', 'nyzIL6YAonY', 'PboaYD5hlG8', 'JVpF99zuQhA', '84140', 'Nrurc5sMUOE', '2J4zrDn7K4s', '11j7EfglCAs', 'HGicRLwgtkM', 'OrYBtyO0aPI', 'hqzF4IDaIYE', '76PsKs4kPXE', 'VwvptdTkwEE', 'DdUJojoFU_c', '0utROiKxejc', 'goMtnNHQ_z4', 'y8HXGm1-Ecw', 'c1a1y9ytHH0', '5B0PQx3Ep3k', 'mLW-jn67gRE', 'IUmxJNs2zaY', 'r9tgDqXEcuc', 'Wrcf2xtqbkQ', 'bWunvAd96zI', 'JGzFUzPeAA8', '89835', 'evAswZ6m3hg', '121128', '6hFiTU77Sm0', 'SO53x_pbou8', '32681', 'MoQmPA7Q07Q', 'dBWvtPeHpWM', 'OwE-7MwzfYI', 'Arh2TKRi_mg', 'Q4WzApjaCNI', 'v9gjg7TDlTA', 'vC9oWzTU71s', 'lilHOUfWrIA', 'NoZsdSGnNpI', 'Z7L3V5bwzI0', 'f_ZJ7L14oYQ', 'mHGaQ_nv9UY', 'RzOFxDk26p0', 'nUZYqTRSGDw', 'gR4gM_WXesQ', 'ioupaiAuRr0', 'xivYoEUQ5sk', 'eOiC1kb17P4', '6uPGcKTpC4I', 'jICmfLeFymA', 'MjaaudUc5-4', 'g8Cl74tS3oY', '237009', '50103', 'pVs1daijYTw', 'j0br-fFy160', '243646', '101787', 'Baz0VVQ-E9E', 'qY1sXq-YCHs', 'Pt-D0LUHDSc', '6KvG5VbLalY', '273539', 'K0m1tO3Ybyc', '125344', 'Uc_6d-fkZEc', 'KpMCvUyQCXg', '4dV3slGSc60', 'Qa6Yz62V-Yc', '5kaCGzjYukM', 'iUXqlrui25c', '6ZA8I83x-oY', 'x2lOwQaAn4g', 'vHzbn_YW76s', 'ewBrNsyY82Q', '-UacrmKiTn4', '3j94B0pzSVs', '80855', 'SHa756SwGJQ', 'r5ijC2W9ddk', 'Q7S0tX4FUNA', 'wvLEIxt-_V0', 'bNQkb4K5DX0', 'bAkUEnPoucg', 'b1LEcg6z66g', '96642', 'DlbYiwOnTyk', '8eaYvALnJ0o', 'Ezn3p5FWF_U', '8x_nCOh6Wmc', '5i6AgQSjXO4', 'ooAF6I-fmTg', 'H1DpVwktfDQ', 'fPsy1co_nuw', 'MD6Tq_4VlGc', 'jPrEKz1rAno', 'HmXXW45eZL4', '1HK7Nea0PFo', 'bpvYdXVlgvc', 'qmMSumMloAs', '06st0Ez_E_I', 'AG5EY8ZaFj4', 'eKRWfaizBO0', 'k5ZOshC2LP4', 'MMpo2bDk-DU', 'rojyUp4FPSg', 'AbNmF4RTzOI', 'kfsO4c0Ekes', '5O1W39o56gg', 'zjYEBwXGD8I', 'xUgAP84vsg4', '290546', 'KDjl2exStlI', 'q9yDL81QppI', 'PyQrAYl1bFs', '_BvNNdEkhZA', 'Lh8r-5eHX6Q', 'r91csZc6AXE', '4cFeG2ydm9A', 'E8MuzHUhUHk', 'unNY4zIk8MM', 'zk2jTlAtvSU', 'XaVYxIW0FDg', '128059', 'c5cB7AfVgcE', 'QjcQx8_PQfw', 'tXQpm-nKxNA', '99501', 'sPremsknoLM', 'Es9MkKsMsjU', 'PORCNDRKtko', 'ip8xwAr4MRE', 'QxU625Hn370', '-I_e4mIh0yE', 'F4yFRROWtdE', 'VbV9S4svrTg', '102408', 'ffrJ91swyq0', 'd8BR6hsvzoY', 'v2Rr-EsJda8', '128763', 'rwNlqh0k1j4', 'kbGhEJ4W44o', '70HptJgAhZM', 'rf0yDSeVEUA', 'pRdxEaLB8r4', '2S00zYaVrtc', 'C864zaWmEd0', '33170', 'KB73TD4xQ8Y', 'jrDqduyQrfo', 'XytBlo2R5Yg', 'ssqiwP19JhM', '-qDkUB0GgYY', '247318', '223431', '80566', 'F6JV-K840EY', 'FB_b1dm0SRY', 'wF8980oGklk', 'WmQF5RmbsVQ', '_gzYkdjNvPc', '830KzUc6CbU', 'QpchvHpGFc8', 'vySKXq0ZOb0', 'Y7qkyMyanjU', '241629', 'Viz5vDE39y8', 'CJGuudyvA0Y', 'TYJzg5IJN8o', 'vo_JbAFAD68', 'PwapK9d8IGk', '266791', '216097', 'Gz2qsCqWNUY', 'aFhc2ddipoM', 'Tpdqfpuumg4', '_7HVhnSYX1Y', '270254', 'dEDbm2ubVRQ', '257247', 'R7IkQVUuLew', 'XyP8bVmGX6M', 'r13W4H8ZhqI', '252998', 'WxajvjGKz7Y', '9iRncKVM2PA', 'gVqs4TzqySw', 'u6PL_7Z9QlU', '272624', 'sC16n1k66io', 'ROcTx5VEn7o', 'IM6HW1HwHhM', 'KqFarHUGjSc', 'OLP0nCKwU6k', '125676', 'BSKAHXFYF_I', 'erNDEjQeox8', '3MFNIag0wNE', '7_K3F-lAv1k', '_aZDaIfGfPo', 'bQ8QteHvrEk', 'fWOIAxzBQFY', 'TH32jop4FiI', 'L1eFHRQGFeg', 'vbr3EA8cJTI', 'ly3QDQDJzzQ', 'N5xfBtD6rLY', 'qK77ZmbqmOM', '236021', '225770', 'hrLoOAh_8LY', 'szic2IB9HB4', 'VinxKpWioTo', 'wosolsrH3sM', 'a-WihYDk6vc', 'CPjbogfLHR4', 'bj9e8w4vNxo', 'TqMh7U3J4D4', 'wgca4dZnnVQ', 'y9FyTEyGy5Y', 'F1U26PLiXjM', '-hnBHBN8p5A', 'FxxJB8hBpyQ', 'EQxkXiWAm08', 'DpZGnuj-BA8', 'H6ci6Myq8uI', 'JPT38CA3sGI', 'tQ-CIfgj-Js', '130456', 'ET1cU5_A2YM', 'fe2CWCpdTF8', 'uu1FqsR7JV0', 'UlTJmndbGHM', 'N1X63d_jgmw', 'lWf5hHRHIDs', 'lawHYX5eB20', 'HetCe0lLacc', '7r4vRxKLFCA', '-571d8cVauQ', 'MCsvw5-7lVE', 'H9mSft9YGuk', '112433', 'aK5tRCXjUvU', 'hvfaYsv7p8E', 'RrGpzInAwCg', 'pOrk7fl1AYo', 'dt641WxonBI', 'Vuay0mVKkik']\n"]}
{"filename": "mmsdk/mmdatasdk/log/log.py", "chunked_list": ["import sys\n\tfrom datetime import datetime\n\tfrom colorama import Fore\n\tfrom tqdm import tqdm\n\tclass bcolors:\n\t    HEADER = '\\033[95m'\n\t    OKBLUE = '\\033[94m'\n\t    OKGREEN = '\\033[92m'\n\t    OKPURPLE = '\\033[0;35m'\n\t    OKADVISORY = '\\033[1;36m'\n", "    WARNING = '\\033[93m'\n\t    FAIL = '\\033[91m'\n\t    ENDC = '\\033[0m'\n\t    BOLD = '\\033[1m'\n\t    UNDERLINE = '\\033[4m'\n\tdef success(msgstring,destination=sys.stdout,verbose=True):\n\t\tnow=datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\t\tif type(destination) is not list:\n\t\t\tdestination=[destination]\n\t\tif verbose==False:\n", "\t\treturn\n\t\tfor dest in destination:\n\t\t\tprint(bcolors.OKGREEN+bcolors.BOLD+\"[%s] | Success | \"%now+ bcolors.ENDC+msgstring,file=dest)\n\tdef status(msgstring,destination=sys.stdout,verbose=True,end=None,require_input=False):\n\t\tnow=datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\t\tif type(destination) is not list:\n\t\t\tdestination=[destination]\n\t\tif verbose==False:\n\t\t\treturn\n\t\tinput_from_user=None\n", "\tfor dest in destination:\n\t\t\tif end is None:\n\t\t\t\tif require_input:\n\t\t\t\t\tif dest==sys.stdout:\n\t\t\t\t\t\tinp_f=raw_input if sys.version_info[0]<3 else input\n\t\t\t\t\t\tinput_from_user=inp_f(bcolors.OKBLUE +bcolors.BOLD+\"[%s] | Input   | \"%now+bcolors.ENDC + msgstring)\n\t\t\t\t\telse:\n\t\t\t\t\t\tprint (bcolors.OKBLUE +bcolors.BOLD+\"[%s] | Status  | \"%now+bcolors.ENDC + msgstring,file=dest)\n\t\t\t\telse:\n\t\t\t\t\tprint (bcolors.OKBLUE +bcolors.BOLD+\"[%s] | Status  | \"%now+bcolors.ENDC + msgstring,file=dest)\n", "\t\telse:\n\t\t\t\tprint (bcolors.OKBLUE +bcolors.BOLD+\"[%s] | Status  | \"%now+bcolors.ENDC + msgstring,file=dest,end=\"\\r\")\n\t\tif input_from_user!=None:\n\t\t\treturn input_from_user\n\tdef advisory(msgstring,destination=sys.stdout,verbose=True):\n\t\tnow=datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\t\tif type(destination) is not list:\n\t\t\tdestination=[destination]\n\t\tif verbose==False:\n\t\t\treturn\n", "\tfor dest in destination:\n\t\t\tprint (bcolors.OKADVISORY +bcolors.BOLD+\"[%s] | Advise  | \"%now+bcolors.ENDC + msgstring,file=dest)\n\tadvise=advisory\n\tdef progress_bar(total,data=None,unit=\"iters\",postfix=\"\",leave=False):\n\t\tif data is None:\n\t\t\treturn tqdm(total=total , postfix=postfix,unit=unit, leave=leave)\n\t\t#TQDM has issue with the formatting and {bar}\n\t\t\t#return tqdm(total=total , postfix=postfix,unit=unit, leave=leave,bar_format=\"%s{l_bar}%s{bar}%s{r_bar}%s\" % (Fore.YELLOW,Fore.GREEN,Fore.YELLOW,Fore.RESET))\n\t\telse:\n\t\t\treturn tqdm(data, total=total , postfix=postfix,unit=unit, leave=leave)\n", "\t\t#return tqdm(data, total=total , postfix=postfix,unit=unit, leave=leave,bar_format=\"%s{l_bar}%s{bar}%s{r_bar}%s\" % (Fore.YELLOW,Fore.GREEN,Fore.YELLOW,Fore.RESET))\n\tdef error(msgstring,error=False,errorType=RuntimeError,destination=sys.stdout,verbose=True):\n\t\tnow=datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n\t\tif type(destination) is not list:\n\t\t\tdestination=[destination]\n\t\tif verbose==False:\n\t\t\tif error:\n\t\t\t\traise errorType(msgstring)\n\t\t\telse:\n\t\t\t\treturn\n", "\tif error:\n\t\t\tfor dest in destination:\n\t\t\t\tprint (bcolors.FAIL +bcolors.BOLD+\"[%s] | Error   | \"%now+bcolors.ENDC + msgstring,file=dest)\n\t\t\traise errorType(msgstring)\n\t\telse:\n\t\t\tfor dest in destination:\n\t\t\t\tprint (bcolors.WARNING +bcolors.BOLD+\"[%s] | Warning | \"%now+bcolors.ENDC + msgstring,file=dest)\n\tdef warning(msgstring,destination=sys.stdout,verbose=True):\n\t\terror(msgstring=msgstring,destination=destination,verbose=verbose)\n\tdef progress_spinner(message,progress,speed=1./5000):\n", "\tspeed=float(speed)\n\t\tstatus (\"%s%s\"%(message,'/-\\|'[int(progress*speed)%4]),end=\"\\r\")\n\tspinner=progress_spinner\n"]}
{"filename": "mmsdk/mmdatasdk/log/__init__.py", "chunked_list": ["from .log import *\n"]}
{"filename": "mmsdk/mmdatasdk/computational_sequence/download_ops.py", "chunked_list": ["import h5py\n\timport time\n\timport requests\n\tfrom tqdm import tqdm \n\timport os\n\timport math\n\timport sys\n\tfrom mmsdk.mmdatasdk import log\n\tdef read_URL(url,destination):\n\t\tif destination is None:\n", "\t\tlog.error(\"Destination is not specified when downloading data\",error=True)\n\t\tif os.path.isdir(destination.rsplit(os.sep,1)[-2]) is False:\n\t\t\tos.mkdir(destination.rsplit(os.sep,1)[-2])\n\t\tif(os.path.isfile(destination)):\n\t\t\tlog.error(\"%s file already exists ...\"%destination,error=True)\n\t\tr = requests.get(url, stream=True)\n\t\tif r.status_code != 200:\n\t\t\tlog.error('URL: %s does not exist'%url,error=True) \n\t\t# Total size in bytes.\n\t\ttotal_size = int(r.headers.get('content-length', 0)); \n", "\tblock_size = 1024\n\t\tunit=total_size/block_size\n\t\twrote = 0 \n\t\twith open(destination, 'wb') as f:\n\t\t\tlog.status(\"Downloading from %s to %s...\"%(url,destination))\n\t\t\tpbar=log.progress_bar(total=math.ceil(total_size//block_size),data=r.iter_content(block_size),postfix=\"Total in kBs\",unit='kB', leave=False)\n\t\t\tfor data in pbar:#unit_scale=True,\n\t\t\t\twrote = wrote  + len(data)\n\t\t\t\tf.write(data)\n\t\tpbar.close()\n", "\tif total_size != 0 and wrote != total_size:\n\t\t\tlog.error(\"Error downloading the data to %s ...\"%destination,error=True)\n\t\tlog.success(\"Download complete!\")\n\t\treturn True\n\tif __name__==\"__main__\":\n\t\treadURL(\"http://immortal.multicomp.cs.cmu.edu/CMU-MOSEI/acoustic/CMU_MOSEI_COVAREP.csd\",\"./hi.csd\")\n"]}
{"filename": "mmsdk/mmdatasdk/computational_sequence/integrity_check.py", "chunked_list": ["from mmsdk.mmdatasdk import log\n\tfrom mmsdk.mmdatasdk.configurations.metadataconfigs import *\n\tfrom tqdm import tqdm\n\t#this function checks the heirarchy format of a given computatioanl sequence data. This will crash the program if data is in wrong format. If in correct format the return value is simply True \n\tdef validate_data_format(data,root_name,verbose=True):\n\t\tlog.status(\"Checking the format of the data in <%s> computational sequence ...\"%root_name)\n\t\tpbar = log.progress_bar(total=len(data.keys()),unit=\" Computational Sequence Entries\",leave=False)\n\t\tfailure=False\n\t\tif (type(data) is not dict):\n\t\t\t#this will cause the rest of the pipeline to crash - RuntimeError\n", "\t\tlog.error(\"%s computational sequence data is not in heirarchy format ...\",error=True)\n\t\ttry:\n\t\t\t#for each video check the shapes of the intervals and features\n\t\t\tfor vid in data.keys():\n\t\t\t\t#check the intervals first - if failure simply show a warning - no exit since we want to identify all the cases\n\t\t\t\tif len(data[vid][\"intervals\"].shape) != 2 :\n\t\t\t\t\tif verbose: log.error(\"Video <%s> in  <%s> computational sequence has wrong intervals array shape. \"%(vid,root_name),error=False)\n\t\t\t\t\tfailure=True\n\t\t\t\t#check the features next\n\t\t\t\tif len(data[vid][\"features\"].shape) < 2 :\n", "\t\t\t\tif verbose: log.error(\"Video <%s> in  <%s> computational sequence has wrong features array shape. \"%(vid,root_name),error=False)\n\t\t\t\t\tfailure=True\n\t\t\t\t#if the first dimension of intervals and features doesn't match\n\t\t\t\tif data[vid][\"features\"].shape[0] != data[vid][\"intervals\"].shape[0]:\n\t\t\t\t\tif verbose: log.error(\"Video <%s> in <%s> computational sequence - features and intervals have different first dimensions. \"%(vid,root_name),error=False)\n\t\t\t\t\tfailure=True\n\t\t\t\tpbar.update(1)\n\t\t#some other thing has happened! - RuntimeError\n\t\texcept:\n\t\t\tif verbose:\n", "\t\t\tlog.error(\"<%s> computational sequence data format could not be checked. \"%root_name,error=True)\n\t\t\tpbar.close()\n\t\tpbar.close()\n\t\t#failure during intervals and features check\n\t\tif failure:\n\t\t\tlog.error(\"<%s> computational sequence data integrity check failed due to inconsistency in intervals and features. \"%root_name,error=True)\n\t\telse:\n\t\t\tlog.success(\"<%s> computational sequence data in correct format.\" %root_name)\n\t\treturn True\n\t#this function checks the computatioanl sequence metadata. This will not crash the program if metadata is missing. If metadata is there the return value is simply True \n", "def validate_metadata_format(metadata,root_name,verbose=True):\n\t\tlog.status(\"Checking the format of the metadata in <%s> computational sequence ...\"%root_name)\n\t\tfailure=False\n\t\tif type(metadata) is not dict:\n\t\t\tlog.error(\"<%s> computational sequence metadata is not key-value pairs!\", error=True)\n\t\tpresenceFlag=[mtd in metadata.keys() for mtd in featuresetMetadataTemplate]\n\t\t#check if all the metadata is set\n\t\tif all (presenceFlag) is False:\n\t\t\t#verbose one is not set\n\t\t\tif verbose:\n", "\t\t\tmissings=[x for (x,y) in zip (featuresetMetadataTemplate,presenceFlag) if y is False]\n\t\t\t\tlog.error(\"Missing metadata in <%s> computational sequence: %s\"%(root_name,str(missings)),error=False)\n\t\t\tfailure=True\n\t\tif failure:\n\t\t\tlog.error(msgstring=\"<%s> computational sequence does not have all the required metadata ... continuing \"%root_name,error=False)\n\t\t\treturn False\n\t\telse:\n\t\t\tlog.success(\"<%s> computational sequence metadata in correct format.\"%root_name)\n\t\t\treturn True\n"]}
{"filename": "mmsdk/mmdatasdk/computational_sequence/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/computational_sequence/blank.py", "chunked_list": []}
{"filename": "mmsdk/mmdatasdk/computational_sequence/file_ops.py", "chunked_list": ["import sys\n\timport h5py\n\timport os\n\timport json\n\tfrom tqdm import tqdm\n\tfrom mmsdk.mmdatasdk import log\n\tfrom mmsdk.mmdatasdk.configurations.metadataconfigs import *\n\tfrom mmsdk.mmdatasdk.computational_sequence.integrity_check import *\n\tdef read_CSD(resource,destination=None):\n\t\tif (resource is None): raise log.error(\"No resource specified for computational sequence!\",error=True)\t\n", "\tif os.path.isfile(resource) is False:\n\t\t\tlog.error(\"%s file not found, please check the path ...\"%resource,error=True)\t\n\t\ttry:\n\t\t\th5handle=h5py.File('%s'%resource,'r')\n\t\texcept: \n\t\t\traise log.error(\"%s resource is not a valid hdf5 computational sequence format ...\"%resource,error=True)\n\t\tlog.success (\"Computational sequence read from file %s ...\"%resource)\n\t\treturn h5handle,dict(h5handle[list(h5handle.keys())[0]][\"data\"]),metadata_to_dict(h5handle[list(h5handle.keys())[0]][\"metadata\"])\n\t#writing CSD files to disk\n\tdef write_CSD(data,metadata,rootName,destination,compression,compression_opts,full_chunk_shape):\n", "\tlog.status(\"Writing the <%s> computational sequence data to %s\"%(rootName,destination))\n\t\tif compression is not None:\n\t\t\tlog.advise(\"Compression with %s and opts -%d\"%(compression,compression_opts))\n\t\t#opening the file\n\t\twriteh5Handle=h5py.File(destination,'w')\n\t\t#creating the root handle\n\t\trootHandle=writeh5Handle.create_group(rootName)\n\t\t#writing the data\n\t\tdataHandle=rootHandle.create_group(\"data\")\n\t\tpbar = log.progress_bar(total=len(data.keys()),unit=\" Computational Sequence Entries\",leave=False)\n", "\tfor vid in data:\n\t\t\tvidHandle=dataHandle.create_group(vid)\n\t\t\tif compression is not None:\n\t\t\t\tvidHandle.create_dataset(\"features\",data=data[vid][\"features\"],compression=compression,compression_opts=compression_opts)\n\t\t\t\tvidHandle.create_dataset(\"intervals\",data=data[vid][\"intervals\"],compression=compression,compression_opts=compression_opts)\n\t\t\telse:\n\t\t\t\tvidHandle.create_dataset(\"features\",data=data[vid][\"features\"])\n\t\t\t\tvidHandle.create_dataset(\"intervals\",data=data[vid][\"intervals\"])\n\t\t\tpbar.update(1)\n\t\tpbar.close()\n", "\tlog.success(\"<%s> computational sequence data successfully wrote to %s\"%(rootName,destination))\n\t\tlog.status(\"Writing the <%s> computational sequence metadata to %s\"%(rootName,destination))\n\t\t#writing the metadata\n\t\tmetadataHandle=rootHandle.create_group(\"metadata\")\n\t\tfor metadataKey in metadata.keys():\n\t\t\tmetadataHandle.create_dataset(metadataKey,(1,),dtype=h5py.special_dtype(vlen=unicode) if sys.version_info.major is 2 else h5py.special_dtype(vlen=str))\n\t\t\tcast_operator=unicode if sys.version_info.major is 2 else str\n\t\t\tmetadataHandle[metadataKey][0]=cast_operator(json.dumps(metadata[metadataKey]))\n\t\twriteh5Handle.close()\n\t\tlog.success(\"<%s> computational sequence metadata successfully wrote to %s\"%(rootName,destination))\n", "\tlog.success(\"<%s> computational sequence successfully wrote to %s ...\"%(rootName,destination))\n\tdef metadata_to_dict(metadata_):\n\t\tif (type(metadata_) is dict): \n\t\t\treturn metadata_\n\t\telse:\n\t\t\tmetadata={}\n\t\t\tfor key in metadata_.keys(): \n\t\t\t\ttry:\n\t\t\t\t\tmetadata[key]=json.loads(metadata_[key][0])\n\t\t\t\texcept:\n", "\t\t\t\ttry:\n\t\t\t\t\t\tmetadata[key]=str(metadata_[key][0])\n\t\t\t\t\texcept:\n\t\t\t\t\t\tlog.error(\"Metadata %s is in wrong format. Exiting ...!\"%key)\n\t\t\treturn metadata\n"]}
{"filename": "mmsdk/mmdatasdk/computational_sequence/computational_sequence.py", "chunked_list": ["import h5py\n\timport hashlib\n\timport validators\n\timport json\n\timport sys\n\timport os \n\timport time\n\timport uuid\n\t#log is the same as standard_sdks log\n\tfrom mmsdk.mmdatasdk import log \n", "from mmsdk.mmdatasdk.configurations.metadataconfigs import *\n\tfrom mmsdk.mmdatasdk.computational_sequence.integrity_check import *\n\tfrom mmsdk.mmdatasdk.computational_sequence.blank import *\n\tfrom mmsdk.mmdatasdk.computational_sequence.file_ops import *\n\tfrom mmsdk.mmdatasdk.computational_sequence.download_ops import *\n\t#computational sequence class\n\t#main attributes:\n\t#       main_file: where the location of the heirarchical data binary file is\n\t#       resource: where the heirarchical data comes from (i.e. a URL)\n\t#       h5handle: handle to the file\n", "#       data: the data in a dictionary format\n\t#       metadata: the metadata in a dictionary format\n\t#       \n\t#main function:\n\t#       completeAllMissingMetadata: a helper to complete all the missing metadata\n\t#       deploy: deploy the computational sequence - you can also notify multicomp about your computational sequence \n\tclass computational_sequence():\n\t\tdef __init__(self,resource, destination=None, validate=True):\n\t\t\t#initializing the featureset\n\t\t\tself.__initialize(resource,destination,validate)\n", "\t\t#BACKWARD: backward compatibility\n\t\t\tself.rootName=self.root_name\n\t\tdef _compare_entries(self,entry1,entry2):\n\t\t\treturn entry1.split('[')[0]==entry2.split('[')[0]\n\t\tdef __getitem__(self, key):\n\t\t\treturn self.data[key]\n\t\tdef __setitem__(self,key,value):\n\t\t\tself.data[key]={}\n\t\t\tself.data[key][\"intervals\"]=value[\"intervals\"]\n\t\t\tself.data[key][\"features\"]=value[\"features\"]\n", "\tdef keys(self):\n\t\t\treturn self.data.keys()\n\t\tdef _remove_id(self,entry_id,purge=False):\n\t\t\tif purge==False:\n\t\t\t\tif entry_id in list(self.data.keys()):\n\t\t\t\t\tdel self.data[entry_id]\n\t\t\telif purge==True:\n\t\t\t\tkeys_to_del=[key for key in list(self.keys()) if key[:len(entry_id)]==entry_id]\n\t\t\t\tfor key_to_del in keys_to_del:\n\t\t\t\t\tdel self.data[key_to_del]\n", "\t\telse:\n\t\t\t\tlog.error(\"Purge received wrong argument type. Exiting ...!\",error=True)\n\t\tdef __initialize_from_csd(self,resource,destination,validate):\n\t\t\tif validators.url(resource):\n\t\t\t\t#user would like to store to the current directory\n\t\t\t\tif destination is None or destination == '':\n\t\t\t\t\tdestination=os.path.join('./',resource.split(os.sep)[-1])\n\t\t\t\t#user has chosen a different directory\n\t\t\t\telif '.csd' not in destination:\n\t\t\t\t\tdestination=os.path.join(destination,resource.split(os.sep)[-1])\n", "\t\t\t#.csd cannot be in the destination as we don't allow name changes when downloading\n\t\t\t\telse:\n\t\t\t\t\tlog.error(\"Destination needs to be a folder where the downloaded computational sequence is stored. Exiting ...!\",error=True)\n\t\t\t\tread_URL(resource,destination)\n\t\t\t\tself.resource=resource\n\t\t\t\tself.main_file=destination\n\t\t\telse:\n\t\t\t\tself.main_file=resource\n\t\t\th5handle,data,metadata=read_CSD(self.main_file)\n\t\t\tif type(metadata) is not dict:\n", "\t\t\tlog.error(\"Metadata not in correct format for %s. Exiting ...!\"%destination,error=True)\n\t\t\tself.data=data\n\t\t\tself.metadata=metadata\n\t\t\tself.root_name=self.metadata[\"root name\"]\n\t\t\tself.h5handle=h5handle\n\t\t\tif validate:\n\t\t\t\tself.__check_format()\n\t\t\telse:\n\t\t\t\tlog.warning(\"Validation of the computational sequence skipped by user request.\")\n\t\tdef __initialize_blank(self,root_name):\n", "\t\tself.main_file=None\n\t\t\tself.h5handle=None\n\t\t\tself.root_name=root_name\n\t\t\tself.data={}\n\t\t\tself.metadata={}\n\t\t\tself.metadata[\"root name\"]=root_name\n\t\t\tlog.success(\"Initialized empty <%s> computational sequence.\"%self.metadata[\"root name\"])\n\t\t#TODO: try and excepts to be added to this code\n\t\tdef __initialize(self,resource,destination,validate):\n\t\t\t#computational sequence is already initialized\n", "\t\tif hasattr(self,'h5handle'): log.error(\"<%s> computational sequence already initialized ...\"%self.metadata[\"root name\"],error=True)\n\t\t\t#initializing blank - main_file is where to initialize the data and resource is None since the data comes from nowhere\n\t\t\tif '.csd' not in resource:\n\t\t\t\tself.__initialize_blank(resource)\n\t\t\t#reading from url or folder - main_file is where the data should go and resource is the url\n\t\t\telse:\n\t\t\t\tself.__initialize_from_csd(resource,destination,validate)\n\t\t#checking if the data and metadata are in correct format\n\t\t#stops the program if the integrity is not ok\n\t\tdef __check_format(self,error=True):\n", "\t\tif not hasattr(self,'metadata') or not hasattr(self,'data'):\n\t\t\t\tlog.error(\"computational sequence is blank (data or metadata is missing)\")\n\t\t\tlog.status(\"Checking the integrity of the <%s> computational sequence ...\"%self.metadata[\"root name\"])\n\t\t\t#TODO: hash check not implemented yet\n\t\t\tdatavalid=validate_data_format(self.data,self.metadata[\"root name\"],verbose=False)\n\t\t\tmetadatavalid=validate_metadata_format(self.metadata,self.metadata[\"root name\"],verbose=False)\n\t\t\tif datavalid and metadatavalid:\n\t\t\t\tlog.success(\"<%s> computational sequence is valid!\"%self.metadata[\"root name\"])\n\t\t#set the metadata for all the missing information in the metadata. If the key is not set then the assumption is that metadata is not available. Note that if the metadata is set to a dummy variable like None then it is still considered set.\n\t\tdef complete_all_missing_metadata(self):\n", "\t\tmissings=[x for (x,y) in zip(featuresetMetadataTemplate,[metadata in self.metadata.keys() for metadata in featuresetMetadataTemplate]) if y is False]\n\t\t\t#python2 vs python 3\n\t\t\t#TODO: Add read from file\n\t\t\troot_name_ext=''\n\t\t\tif hasattr(self,\"root_name\"):\n\t\t\t\troot_name_ext=\" for <%s> computational sequence\"%self.root_name\n\t\t\tfor missing in missings:\n\t\t\t\tself.metadata[missing]=log.status(\"Please input %s%s: \"%(missing,root_name_ext),require_input=True)\n\t\t#BACKWARD: _ for backward compability\n\t\tdef set_data(self,data,_=None,__=None):\n", "\t\tvalidate_data_format(data,self.root_name,verbose=True)\n\t\t\tself.data=data\n\t\t#BACKWARD: _ for backward compability\n\t\tdef set_metadata(self,metadata,_=None,__=None):\n\t\t\tvalidate_metadata_format(metadata,self.root_name,verbose=False)\n\t\t\tself.metadata=metadata\n\t\t#writing the file to the output\n\t\tdef deploy(self,destination,compression=\"gzip\",compression_opts=9,full_chunk_shape=True):\n\t\t\tself.complete_all_missing_metadata()\n\t\t\tself.__check_format()\n", "\t\tlog.status(\"Deploying the <%s> computational sequence to %s\"%(destination,self.metadata['root name']))\n\t\t\t#generating the unique identifiers\n\t\t\tself.metadata['uuid']=str(uuid.uuid4())\n\t\t\t#TODO: add SHA256 check + midification should not be possible without private key\n\t\t\tself.metadata['md5']=None\n\t\t\tlog.status(\"Your unique identifier for <%s> computational sequence is %s\"%(self.metadata[\"root name\"],self.metadata['uuid']))\n\t\t\twrite_CSD(self.data,self.metadata,self.metadata[\"root name\"],destination,compression=compression,compression_opts=compression_opts,full_chunk_shape=full_chunk_shape)\n\t\t\tself.main_file=destination\n\t\tdef _get_entries_stripped(self):\n\t\t\treturn list(set([entry.split('[')[0] for entry in list(self.data.keys())]))\n", "\tdef bib_citations(self,outfile=None):\n\t\t\toutfile=sys.stdout if outfile is None else outfile\n\t\t\tif self.metadata is None or self.metadata=={}:\n\t\t\t\tlog.error(\"Metadata is not set for <%s> computational sequence\"%self.root_name)\n\t\t\toutfile.write('Computational Sequence <%s> bib: '%self.root_name+self.metadata['featureset bib citation']+'\\n\\n')\n\t\t\toutfile.write('Dataset <%s> bib: '%self.metadata[\"dataset name\"]+self.metadata['dataset bib citation']+'\\n\\n')\n\t#some backward compatibility stuff.\n\tcomputational_sequence.setData=computational_sequence.set_data\n\tcomputational_sequence.setMetadata=computational_sequence.set_metadata  \n\tcomputational_sequence.completeAllMissingMetadata=computational_sequence.complete_all_missing_metadata\n"]}
{"filename": "mmsdk/mmmodelsdk/__init__.py", "chunked_list": ["import fusion as fusion\n\timport modules as modules \n"]}
{"filename": "mmsdk/mmmodelsdk/modules/__init__.py", "chunked_list": ["from LSTHM.LSTHM import LSTHM as LSTHM\n"]}
{"filename": "mmsdk/mmmodelsdk/modules/LSTHM/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmmodelsdk/modules/LSTHM/LSTHM.py", "chunked_list": ["import torch\n\timport time\n\tfrom torch import nn\n\timport torch.nn.functional as F\n\tclass LSTHM(nn.Module):\n\t\tdef __init__(self,cell_size,in_size,hybrid_in_size):\n\t\t\tsuper(LSTHM, self).__init__()\n\t\t\tself.cell_size=cell_size\n\t\t\tself.in_size=in_size\n\t\t\tself.W=nn.Linear(in_size,4*self.cell_size)\n", "\t\tself.U=nn.Linear(cell_size,4*self.cell_size)\n\t\t\tself.V=nn.Linear(hybrid_in_size,4*self.cell_size)\n\t\tdef step(self,x,ctm1,htm1,ztm1):\n\t\t\tinput_affine=self.W(x)\n\t\t\toutput_affine=self.U(htm1)\n\t\t\thybrid_affine=self.V(ztm1)\n\t\t\tsums=input_affine+output_affine+hybrid_affine\n\t\t\t#biases are already part of W and U and V\n\t\t\tf_t=F.sigmoid(sums[:,:self.cell_size])\n\t\t\ti_t=F.sigmoid(sums[:,self.cell_size:2*self.cell_size])\n", "\t\to_t=F.sigmoid(sums[:,2*self.cell_size:3*self.cell_size])\n\t\t\tch_t=F.tanh(sums[:,3*self.cell_size:])\n\t\t\tc_t=f_t*ctm1+i_t*ch_t\n\t\t\th_t=F.tanh(c_t)*o_t\n\t\t\treturn c_t,h_t\n"]}
{"filename": "mmsdk/mmmodelsdk/modules/LSTHM/test.py", "chunked_list": ["import torch\n\tfrom torch import nn\n\tfrom torch.autograd import Variable\n\timport torch.nn.functional as F\n\tfrom LSTHM import LSTHM\n\timport numpy\n\t#in=40, 3 modalities,4 attentions\n\tfull_in=numpy.array(numpy.zeros([32,40]))\n\tinputx=Variable(torch.Tensor(full_in),requires_grad=True)\n\tfull_in=numpy.array(numpy.zeros([32,12]))\n", "inputy=Variable(torch.Tensor(full_in),requires_grad=True)\n\tfull_in=numpy.array(numpy.zeros([32,12]))\n\tinputc=Variable(torch.Tensor(full_in),requires_grad=True)\n\tfull_in=numpy.array(numpy.zeros([32,20]))\n\tinputz=Variable(torch.Tensor(full_in),requires_grad=True)\n\tfmodel=LSTHM(12,40,20)\n\tc,h=fmodel.step(inputx,inputc,inputy,inputz)\n\tprint(c.shape,h.shape)\n\t#a=numpy.array([[1,2,3],[4,5,6]])\n\t#b=Variable(torch.Tensor(a))\n", "#c=b.repeat(1,2)\n\t#print(c.shape)\n\t#print(F.softmax(c,dim=1))\n\t#print(c.view(2,2,3)[0,1,:])\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/__init__.py", "chunked_list": ["from dynamic_fusion_graph.model import DynamicFusionGraph as DynamicFusionGraph\n\tfrom recurrent_fusion.model import RecurrentFusion as RecurrentFusion\n\tfrom tensor_fusion.model import TensorFusion as TensorFusion\n\tfrom multiple_attention.model import MultipleAttentionFusion as MultipleAttentionFusion\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/dynamic_fusion_graph/model.py", "chunked_list": ["#CMU Multimodal SDK, CMU Multimodal Model SDK\n\t#Multimodal Language Analysis in the Wild: CMU-MOSEI Dataset and Interpretable Dynamic Fusion Graph, Amir Zadeh, Paul Pu Liang, Jonathan Vanbriesen, Soujanya Poria, Edmund Tong, Erik Cambria, Minghai Chen, Louis-Philippe Morency - http://www.aclweb.org/anthology/P18-1208\n\t#pattern_model: a nn.Sequential model which will be used as core of the models inside the DFG\n\t#in_dimensions: input dimensions of each modality\n\t#out_dimension: output dimension of the pattern models\n\t#efficacy_model: the core of the efficacy model\n\t#in_modalities: inputs from each modality, the same order as in_dimensions\n\timport torch\n\timport time\n\tfrom torch import nn\n", "import torch.nn.functional as F\n\timport copy\n\tfrom six.moves import reduce\n\tfrom itertools import chain,combinations\n\tfrom collections import OrderedDict\n\tclass DynamicFusionGraph(nn.Module):\n\t\tdef __init__(self,pattern_model,in_dimensions,out_dimension,efficacy_model):\n\t\t\tsuper(DynamicFusionGraph, self).__init__()\n\t\t\tself.num_modalities=len(in_dimensions)\n\t\t\tself.in_dimensions=in_dimensions\n", "\t\tself.out_dimension=out_dimension\n\t\t\t#in this part we sort out number of connections, how they will be connected etc.\n\t\t\tself.powerset=list(chain.from_iterable(combinations(range(self.num_modalities), r) for r in range(self.num_modalities+1)))[1:]\n\t\t\t#initializing the models inside the DFG\n\t\t\tself.input_shapes={tuple([key]):value for key,value in zip(range(self.num_modalities),in_dimensions)}\n\t\t\tself.networks={}\n\t\t\tself.total_input_efficacies=0\n\t\t\tfor key in self.powerset[self.num_modalities:]:\n\t\t\t\t#connections coming from the unimodal components\n\t\t\t\tunimodal_dims=0\n", "\t\t\tfor modality in key:\n\t\t\t\t\tunimodal_dims+=in_dimensions[modality]\n\t\t\t\tmultimodal_dims=((2**len(key)-2)-len(key))*out_dimension\n\t\t\t\tself.total_input_efficacies+=2**len(key)-2\n\t\t\t\t#for the network that outputs key component, what is the input dimension\n\t\t\t\tfinal_dims=unimodal_dims+multimodal_dims\n\t\t\t\tself.input_shapes[key]=final_dims\n\t\t\t\tpattern_copy=copy.deepcopy(pattern_model)\n\t\t\t\tfinal_model=nn.Sequential(*[nn.Linear(self.input_shapes[key],list(pattern_copy.children())[0].in_features),pattern_copy])\n\t\t\t\tself.networks[key]=final_model\n", "\t\t#finished construction weights, now onto the t_network which summarizes the graph\n\t\t\tself.total_input_efficacies+=2**self.num_modalities-1\n\t\t\tself.t_in_dimension=unimodal_dims+(2**self.num_modalities-(self.num_modalities)-1)*out_dimension\n\t\t\tpattern_copy=copy.deepcopy(pattern_model)\n\t\t\tself.t_network=nn.Sequential(*[nn.Linear(self.t_in_dimension,list(pattern_copy.children())[0].in_features),pattern_copy])\n\t\t\tself.efficacy_model=nn.Sequential(*[nn.Linear(sum(in_dimensions),list(efficacy_model.children())[0].in_features),efficacy_model,nn.Linear(list(efficacy_model.children())[-1].out_features,self.total_input_efficacies)])\n\t\tdef __call__(self,in_modalities):\n\t\t\treturn self.fusion(in_modalities)\t\n\t\tdef fusion(self,in_modalities):\n\t\t\tbs=in_modalities[0].shape[0]\n", "\t\toutputs={}\n\t\t\tfor modality,index in zip(in_modalities,range(len(in_modalities))):\n\t\t\t\toutputs[tuple([index])]=modality\n\t\t\tefficacies=self.efficacy_model(torch.cat([x for x in in_modalities],dim=1))\n\t\t\tefficacy_index=0\n\t\t\tfor key in self.powerset[self.num_modalities:]:\n\t\t\t\tsmall_power_set=list(chain.from_iterable(combinations(key, r) for r in range(len(key)+1)))[1:-1]\n\t\t\t\tthis_input=torch.cat([outputs[x]*efficacies[:,efficacy_index+y].view(-1,1) for x,y in zip(small_power_set,range(len(small_power_set)))],dim=1)\n\t\t\t\toutputs[key]=self.networks[key](this_input)\n\t\t\t\tefficacy_index+=len(small_power_set)\n", "\t\tsmall_power_set.append(tuple(range(self.num_modalities)))\n\t\t\tt_input=torch.cat([outputs[x]*efficacies[:,efficacy_index+y].view(-1,1) for x,y in zip(small_power_set,range(len(small_power_set)))],dim=1)\n\t\t\tt_output=self.t_network(t_input)\n\t\t\treturn t_output,outputs,efficacies\n\t\tdef forward(self, x):\n\t\t\tprint(\"Not yet implemented for nn.Sequential\")\n\t\t\texit(-1)\n\tif __name__==\"__main__\":\n\t\tprint(\"This is a module and hence cannot be called directly ...\")\n\t\tprint(\"A toy sample will now run ...\")\n", "\tfrom torch.autograd import Variable\n\t\timport torch.nn.functional as F\n\t\timport numpy\n\t\tinputx=Variable(torch.Tensor(numpy.array(numpy.zeros([32,40]))),requires_grad=True)\n\t\tinputy=Variable(torch.Tensor(numpy.array(numpy.zeros([32,12]))),requires_grad=True)\n\t\tinputz=Variable(torch.Tensor(numpy.array(numpy.zeros([32,20]))),requires_grad=True)\n\t\tinputw=Variable(torch.Tensor(numpy.array(numpy.zeros([32,25]))),requires_grad=True)\n\t\tmodalities=[inputx,inputy,inputz,inputw]\n\t\t#a simple linear function without any activations\n\t\tpattern_model=nn.Sequential(nn.Linear(100,20))\n", "\tefficacy_model=nn.Sequential(nn.Linear(100,20))\n\t\tfmodel=DynamicFusionGraph(pattern_model,[40,12,20,25],20,efficacy_model)\n\t\tout=fmodel(modalities)\n\t\tprint(\"Output\")\n\t\tprint(out[0].shape,out[2].shape)\n\t\tprint(\"Toy sample finished ...\")\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/dynamic_fusion_graph/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmmodelsdk/fusion/recurrent_fusion/model.py", "chunked_list": ["#CMU Multimodal SDK, CMU Multimodal Model SDK\n\t#Multimodal Language Analysis with Recurrent Multistage Fusion, Paul Pu Liang, Ziyin Liu, Amir Zadeh, Louis-Philippe Morency - https://arxiv.org/abs/1808.03920 \n\t#in_dimensions: the list of dimensionalities of each modality \n\t#cell_size: lstm cell size\n\t#in_modalities: is a list of inputs from each modality - the first dimension of all the modality inputs must be the same, it will be the batch size. The second dimension is the feature dimension. There are a total of n modalities.\n\t#steps: number of iterations for the recurrent fusion\n\timport torch\n\timport time\n\tfrom torch import nn\n\timport torch.nn.functional as F\n", "from six.moves import reduce\n\tclass RecurrentFusion(nn.Module):\n\t\tdef __init__(self,in_dimensions,cell_size):\n\t\t\tsuper(RecurrentFusion, self).__init__()\n\t\t\tself.in_dimensions=in_dimensions\n\t\t\tself.cell_size=cell_size\n\t\t\tself.model=nn.LSTM(sum(in_dimensions),cell_size)\n\t\tdef __call__(self,in_modalities,steps=1):\n\t\t\treturn self.fusion(in_modalities,steps)\n\t\tdef fusion(self,in_modalities,steps=1):\n", "\t\tbs=in_modalities[0].shape[0]\n\t\t\tmodel_input=torch.cat(in_modalities,dim=1).view(1,bs,-1).repeat([steps,1,1])\n\t\t\thidden,cell = (torch.zeros(1, bs, self.cell_size),torch.zeros(1, bs, self.cell_size))\n\t\t\tfor i in range(steps):\n\t\t\t\toutputs,last_states=self.model(model_input,[hidden,cell])\n\t\t\treturn outputs,last_states[0],last_states[1]\n\t\tdef forward(self, x):\n\t\t\tprint(\"Not yet implemented for nn.Sequential\")\n\t\t\texit(-1)\n\tif __name__==\"__main__\":\n", "\tprint(\"This is a module and hence cannot be called directly ...\")\n\t\tprint(\"A toy sample will now run ...\")\n\t\tfrom torch.autograd import Variable\n\t\timport torch.nn.functional as F\n\t\timport numpy\n\t\tinputx=Variable(torch.Tensor(numpy.zeros([32,40])),requires_grad=True)\n\t\tinputy=Variable(torch.Tensor(numpy.array(numpy.zeros([32,12]))),requires_grad=True)\n\t\tinputz=Variable(torch.Tensor(numpy.array(numpy.zeros([32,20]))),requires_grad=True)\n\t\tmodalities=[inputx,inputy,inputz]\n\t\tfmodel=RecurrentFusion([40,12,20],100)\n", "\tout=fmodel(modalities,steps=5)\n\t\tprint(\"Output\")\n\t\tprint(out[0])\n\t\tprint(\"Toy sample finished ...\")\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/recurrent_fusion/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmmodelsdk/fusion/tensor_fusion/model.py", "chunked_list": ["#CMU Multimodal SDK, CMU Multimodal Model SDK\n\t#Tensor Fusion Network for Multimodal Sentiment Analysis, Amir Zadeh, Minghai Chen, Soujanya Poria, Erik Cambria, Louis-Philippe Morency - https://arxiv.org/pdf/1707.07250.pdf\n\t#in_modalities: is a list of inputs from each modality - the first dimension of all the modality inputs must be the same, it will be the batch size. The second dimension is the feature dimension. There are a total of n modalities.\n\t#out_dimension: the output of the tensor fusion\n\timport torch\n\timport time\n\tfrom torch import nn\n\timport torch.nn.functional as F\n\tfrom six.moves import reduce\n\tclass TensorFusion(nn.Module):\n", "\tdef __init__(self,in_dimensions,out_dimension):\n\t\t\tsuper(TensorFusion, self).__init__()\n\t\t\tself.tensor_size=reduce(lambda x, y: x*y, in_dimensions)\n\t\t\tself.linear_layer=nn.Linear(self.tensor_size,out_dimension)\n\t\t\tself.in_dimensions=in_dimensions\n\t\t\tself.out_dimension=out_dimension\n\t\tdef __call__(self,in_modalities):\n\t\t\treturn self.fusion(in_modalities)\n\t\tdef fusion(self,in_modalities):\n\t\t\tbs=in_modalities[0].shape[0]\n", "\t\ttensor_product=in_modalities[0]\n\t\t\t#calculating the tensor product\n\t\t\tfor in_modality in in_modalities[1:]:\n\t\t\t\ttensor_product=torch.bmm(tensor_product.unsqueeze(2),in_modality.unsqueeze(1))\n\t\t\t\ttensor_product=tensor_product.view(bs,-1)\n\t\t\treturn self.linear_layer(tensor_product)\n\t\tdef forward(self, x):\n\t\t\tprint(\"Not yet implemented for nn.Sequential\")\n\t\t\texit(-1)\n\tif __name__==\"__main__\":\n", "\tprint(\"This is a module and hence cannot be called directly ...\")\n\t\tprint(\"A toy sample will now run ...\")\n\t\tfrom torch.autograd import Variable\n\t\timport torch.nn.functional as F\n\t\timport numpy\n\t\tinputx=Variable(torch.Tensor(numpy.zeros([32,40])),requires_grad=True)\n\t\tinputy=Variable(torch.Tensor(numpy.array(numpy.zeros([32,12]))),requires_grad=True)\n\t\tinputz=Variable(torch.Tensor(numpy.array(numpy.zeros([32,20]))),requires_grad=True)\n\t\tmodalities=[inputx,inputy,inputz]\n\t\tfmodel=TensorFusion([40,12,20],100)\n", "\tout=fmodel(modalities)\n\t\tprint(\"Output\")\n\t\tprint(out[0])\n\t\tprint(\"Toy sample finished ...\")\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/tensor_fusion/__init__.py", "chunked_list": []}
{"filename": "mmsdk/mmmodelsdk/fusion/multiple_attention/model.py", "chunked_list": ["#CMU Multimodal SDK, CMU Multimodal Model SDK\n\t#Multi-attention Recurrent Network for Human Communication Comprehension, Amir Zadeh, Paul Pu Liang, Soujanya Poria, Erik Cambria, Prateek Vij, Louis-Philippe Morency - https://arxiv.org/pdf/1802.00923.pdf\n\t#in_modalities: is a list of inputs from each modality - the first dimension of all the modality inputs must be the same, it will be the batch size. The second dimension is the feature dimension. There are a total of n modalities.\n\t#attention_model: is a pytorch nn.Sequential which takes in an input with size (bs * m0+...+mn) with m_i being the dimensionality of the features in modality i. Output is the (bs * (m0+...+mn)*num_atts).\n\t#dim_reduce_nets: is a list of pytorch nn.Sequential which takes in an input with size (bs*(mi*num_atts))\n\t#num_atts is the number of attentions\n\t#num_atts: number of attentions\n\timport torch\n\timport time\n\tfrom torch import nn\n", "import torch.nn.functional as F\n\tclass MultipleAttentionFusion(nn.Module):\n\t\tdef __init__(self,attention_model,dim_reduce_nets,num_atts):\n\t\t\tsuper(MultipleAttentionFusion, self).__init__()\n\t\t\tself.attention_model=attention_model\n\t\t\tself.dim_reduce_nets=dim_reduce_nets\n\t\t\tself.num_atts=num_atts\n\t\tdef __call__(self,in_modalities):\n\t\t\treturn self.fusion(in_modalities)\n\t\tdef fusion(self,in_modalities):\n", "\t\t#getting some simple integers out\n\t\t\tnum_modalities=len(in_modalities)\n\t\t\t#simply the tensor that goes into attention_model\n\t\t\tin_tensor=torch.cat(in_modalities,dim=1)\n\t\t\t#calculating attentions\n\t\t\tatts=F.softmax(self.attention_model(in_tensor),dim=1)\n\t\t\t#calculating the tensor that will be multiplied with the attention\n\t\t\tout_tensor=torch.cat([in_modalities[i].repeat(1,self.num_atts) for i in range(num_modalities)],dim=1)\n\t\t\t#calculating the attention\n\t\t\tatt_out=atts*out_tensor\n", "\t\t#now to apply the dim_reduce networks\n\t\t\t#first back to however modalities were in the problem\n\t\t\tstart=0\n\t\t\tout_modalities=[]\n\t\t\tfor i in range(num_modalities):\n\t\t\t\tmodality_length=in_modalities[i].shape[1]*self.num_atts\n\t\t\t\tout_modalities.append(att_out[:,start:start+modality_length])\n\t\t\t\tstart=start+modality_length\n\t\t\t#apply the dim_reduce\n\t\t\tdim_reduced=[self.dim_reduce_nets[i](out_modalities[i]) for i in range(num_modalities)]\n", "\t\t#multiple attention done :)\n\t\t\treturn dim_reduced,out_modalities\n\t\tdef forward(self, x):\n\t\t\tprint(\"Not yet implemented for nn.Sequential\")\n\t\t\texit(-1)\n\tif __name__==\"__main__\":\n\t\tprint(\"This is a module and hence cannot be called directly ...\")\n\t\tprint(\"A toy sample will now run ...\")\n\t\tfrom torch.autograd import Variable\n\t\timport torch.nn.functional as F\n", "\timport numpy\n\t\tinputx=Variable(torch.Tensor(numpy.array(numpy.zeros([32,40]))),requires_grad=True)\n\t\tinputy=Variable(torch.Tensor(numpy.array(numpy.zeros([32,12]))),requires_grad=True)\n\t\tinputz=Variable(torch.Tensor(numpy.array(numpy.zeros([32,20]))),requires_grad=True)\n\t\tmodalities=[inputx,inputy,inputz]\n\t\t#simple functions for toy example, 4 times extract attentions hence 72*4\n\t\tmy_attention =\tnn.Sequential(nn.Linear(72,72*4))\n\t\tsmall_netx =\tnn.Sequential(nn.Linear(160,10))\n\t\tsmall_nety =\tnn.Sequential(nn.Linear(48,20))\n\t\tsmall_netz =\tnn.Sequential(nn.Linear(80,30))\n", "\tsmalls_nets=[small_netx,small_nety,small_netz]\n\t\tfmodel=MultipleAttentionFusion(my_attention,smalls_nets,4)\t\n\t\tout=fmodel(modalities)\n\t\tprint(\"Output\")\n\t\tprint(out[0])\n\t\tprint(\"Toy sample finished ...\")\n"]}
{"filename": "mmsdk/mmmodelsdk/fusion/multiple_attention/__init__.py", "chunked_list": []}
{"filename": "examples/sdk_diagnostics/scenario1.py", "chunked_list": ["#scenario1.py\n\t#performs imputations and unifies to make sure they remain functional after changes.\n\timport mmsdk\n\tfrom mmsdk import mmdatasdk\n\timport numpy\n\timport sys\n\t#uncomment all the ==> lines together\n\t#A simple averaging technique. More advanced methods can be built based on intervals.\n\tdef myavg(intervals,features):\n\t        return numpy.average(features,axis=0)\n", "def impute_and_unify_diagnostics():\n\t\tcmumosi_highlevel=mmdatasdk.mmdataset(mmdatasdk.cmu_mosi.highlevel,'cmumosi/')\n\t\t#removing one video to check the unify()\n\t\tsome_video=list(cmumosi_highlevel[\"glove_vectors\"].data.keys())[0]\n\t\tcmumosi_highlevel[\"glove_vectors\"]._remove_id(some_video)\n\t\tcmumosi_highlevel.unify()\n\t\t#Aligning to the words to get word-level alignments\n\t\tcmumosi_highlevel.align('glove_vectors',collapse_functions=[myavg])\n\t\t#removing one segment to check the unify()\n\t\tsome_word=list(cmumosi_highlevel[\"glove_vectors\"].data.keys())[0]\n", "\tsome_word_video=some_word.split(\"[\")[0]\n\t\tcmumosi_highlevel[\"glove_vectors\"]._remove_id(some_word)\n\t\tcmumosi_highlevel.impute('glove_vectors')\n\t\t#removing an entire video using purge to check unify\n\t\tcmumosi_highlevel[\"glove_vectors\"]._remove_id(some_word_video,purge=True)\n\t\tcmumosi_highlevel.revert()\n\t\treturn True\n\tif __name__=='__main__':\n\t\timpute_and_unify_diagnostics()\n\t\tprint (\"Test finished with python version %s\"%str(sys.version_info))\n"]}
{"filename": "examples/mmdatasdk_examples/basics/read_dataset_by_files.py", "chunked_list": ["#read_dataset_by_folder.py\n\t#reads a dataset from a dataset folder\n\timport mmsdk\n\timport os\n\timport argparse\n\tfrom mmsdk import mmdatasdk\n\tfrom os import listdir\n\tfrom os.path import isfile, join\n\tparser = argparse.ArgumentParser(description='Reading dataset by files')\n\tparser.add_argument('path', metavar='path', type=str, \n", "                    help='the folder path to read dataset from')\n\targs = parser.parse_args()\n\tdataset_dictionary={}\n\tif os.path.isdir(args.path) is False:\n\t\tprint (\"Folder does not exist ...\")\n\t\texit(-1)\n\tcsdfiles = [f for f in listdir(args.path) if isfile(join(args.path, f)) and f[-4:]=='.csd']\n\tif len(csdfiles)==0:\n\t\tprint(\"No csd files in the given folder\")\n\t\texit(-2)\n", "print(\"%d csd files found\"%len(csdfiles))\n\tfor csdfile in csdfiles:\n\t\tdataset_dictionary[csdfile]=os.path.join(args.path,csdfile)\n\tdataset=mmdatasdk.mmdataset(dataset_dictionary)\n\tprint (\"List of the computational sequences\")\n\tprint (dataset.computational_sequences.keys())\n"]}
{"filename": "examples/mmdatasdk_examples/basics/read_dataset_by_folder.py", "chunked_list": ["#read_dataset_by_folder.py\n\t#reads a dataset from a dataset folder\n\timport mmsdk\n\tfrom mmsdk import mmdatasdk\n\timport argparse\n\tparser = argparse.ArgumentParser(description='Reading dataset from a folder')\n\tparser.add_argument('path', metavar='path', type=str, \n\t                    help='the folder path to read dataset from')\n\targs = parser.parse_args()\n\tdataset=mmdatasdk.mmdataset(args.path)\n", "print (\"List of the computational sequences\")\n\tprint (dataset.computational_sequences.keys())\n"]}
{"filename": "examples/mmdatasdk_examples/basics/create_toy_computational_sequence.py", "chunked_list": ["#create_toy_computational_sequence.py\n\t#this example shows how to create two toy computational sequences and put them together in a dataset\n\timport mmsdk\n\tfrom mmsdk import mmdatasdk\n\timport numpy\n\tdef random_init(compseq,feat_dim):\n\t\tfor vid_key in vid_keys:\n\t\t\tnum_entries=numpy.random.randint(low=5,high=100,size=1)\n\t\t\tcompseq[vid_key]={}\n\t\t\tcompseq[vid_key][\"features\"]=numpy.random.uniform(low=0,high=1,size=[num_entries,feat_dim])\n", "\t\t#let's assume each video is one minute, hence 60 seconds. \n\t\t\tcompseq[vid_key][\"intervals\"]=numpy.arange(start=0,stop=60+0.000001,step=60./((2*num_entries)-1)).reshape([num_entries,2])\n\tif __name__==\"__main__\":\n\t\tvid_keys=[\"video1\",\"video2\",\"video3\",\"video4\",\"video5\",\"Hello\",\"World\",\"UG3sfZKtCQI\"]\n\t\t#let's assume compseq_1 is some modality with a random feature dimension\n\t\tcompseq_1_data={}\n\t\tcompseq_1_feature_dim=numpy.random.randint(low=20,high=100,size=1)\n\t\trandom_init(compseq_1_data,compseq_1_feature_dim)\n\t\tcompseq_1=mmdatasdk.computational_sequence(\"my_compseq_1\")\n\t\tcompseq_1.setData(compseq_1_data,\"my_compseq_1\")\n", "\t#let's assume compseq_1 is some other  modality with a random feature dimension\n\t\tcompseq_2_data={}\n\t\tcompseq_2_feature_dim=numpy.random.randint(low=20,high=100,size=1)\n\t\trandom_init(compseq_2_data,compseq_2_feature_dim)\n\t\tcompseq_2=mmdatasdk.computational_sequence(\"my_compseq_2\")\n\t\tcompseq_2.setData(compseq_2_data,\"my_compseq_2\")\n\t\t#NOTE: if you don't want to manually input the metdata, set it by creating a metdata key-value dictionary based on mmsdk/mmdatasdk/configurations/metadataconfigs.py\n\t\tcompseq_1.deploy(\"compseq_1.csd\")\n\t\tcompseq_2.deploy(\"compseq_2.csd\")\n\t\t#now creating a toy dataset from the toy compseqs\n", "\tmydataset_recipe={\"compseq_1\":\"compseq_1.csd\",\"compseq_2\":\"compseq_2.csd\"}\n\t\tmydataset=mmdatasdk.mmdataset(mydataset_recipe)\n\t\t#let's also see if we can align to compseq_1\n\t\tmydataset.align(\"compseq_1\")\n"]}
{"filename": "examples/mmdatasdk_examples/basics/download_dataset.py", "chunked_list": ["#download_dataset.py\n\t#downloads a standard dataset from multicomp servers\n\timport mmsdk\n\tfrom mmsdk import mmdatasdk\n\timport argparse\n\tparser = argparse.ArgumentParser(description='Downloads a dataset from web')\n\tparser.add_argument('dataset',\n\t                    metavar='dataset',\n\t                    default='cmu_mosei',\n\t                    choices=['cmu_mosei', 'cmu_mosi', 'pom'],\n", "                    help='download a standard dataset (cmu_mosei,cmu_mosi,pom)')\n\targs = parser.parse_args()\n\tchoice={\"cmu_mosei\":mmdatasdk.cmu_mosei.highlevel,\"cmu_mosi\":mmdatasdk.cmu_mosi.highlevel,\"pom\":mmdatasdk.pom.highlevel}\n\tlabels={\"cmu_mosei\":mmdatasdk.cmu_mosei.labels,\"cmu_mosi\":mmdatasdk.cmu_mosi.labels,\"pom\":mmdatasdk.pom.labels}\n\tdataset=mmdatasdk.mmdataset(choice[args.dataset],'./downloaded_dataset')\n\tdataset.add_computational_sequences(labels[args.dataset],'./downloaded_dataset')\n\tprint (\"List of the computational sequences in the downloaded dataset\")\n\tprint (dataset.computational_sequences.keys())\n"]}
{"filename": "examples/mmdatasdk_examples/basics/justin_github.py", "chunked_list": ["print (\"Some of the content in this tutorial may be outdated, however it is an amazing tutorial nonetheless: https://github.com/Justin1904/CMU-MultimodalSDK-Tutorials\")\n\tprint (\"Special thanks to Zhun Liu @ justin1904\")\n"]}
{"filename": "examples/mmdatasdk_examples/full_examples/process_mosi.py", "chunked_list": ["#word_level_align.py\n\t#first aligns a dataset to the words vectors and collapses other modalities (by taking average of them for the duration of the word). After this operation every modality will have the same frequency (same as word vectors). Then the code aligns based on opinion labels (note that collapse does not happen for this step.\n\timport mmsdk\n\tfrom mmsdk import mmdatasdk\n\timport numpy\n\t#uncomment all the ==> lines together\n\t#A simple averaging technique. More advanced methods can be built based on intervals.\n\tdef myavg(intervals,features):\n\t        return numpy.average(features,axis=0)\n\t#Downloading the dataset\n", "cmumosi_highlevel=mmdatasdk.mmdataset(mmdatasdk.cmu_mosi.highlevel,'cmumosi/')\n\t#cmumosi_highlevel=mmdatasdk.mmdataset('cmumosi/')\n\t#some random video from cmumosi_highlevel\n\t#==>some_video=list(cmumosi_highlevel[\"glove_vectors\"].data.keys())[0]\n\t#The next line is not needed for standard datasets as they are all sorted based on intervals in computational sequence entries\n\t#cmumosi_highlevel.sort()\n\t#Aligning to the words to get word-level alignments\n\tcmumosi_highlevel.align('glove_vectors',collapse_functions=[myavg])\n\tcmumosi_highlevel.impute('glove_vectors')\n\t#get the intervals and features accompanying the 100th word in the some_video\n", "#==>some_video_100th_word=some_video+'[100]'\n\t#==>for compseq_name in list(cmumosi_highlevel.computational_sequences.keys()):\n\t#==>\tcompseq=cmumosi_highlevel[compseq_name]\n\t#==>\tprint (compseq_name)\n\t#==>\tprint (numpy.array(compseq.data[some_video_100th_word][\"intervals\"]).shape,numpy.array(compseq.data[some_video_100th_word][\"features\"]).shape)\n\t#==>\tprint (\"-------\")\n\t#Aligning to the computational labels, thus removing the unsupervised components of CMU-MOSI\n\tcmumosi_highlevel.add_computational_sequences(mmdatasdk.cmu_mosi.labels,'cmumosi/')\n\tcmumosi_highlevel.align('Opinion Segment Labels')\n\tcmumosi_highlevel.hard_unify()\n", "#get the intervals and features accompanying the 2nd in some_video\n\t#==>some_video_2nd_segment=some_video+'[2]'\n\t#==>for compseq_name in list(cmumosi_highlevel.computational_sequences.keys()):\n\t#==>\tcompseq=cmumosi_highlevel[compseq_name]\n\t#==>\tprint (compseq_name)\n\t#==>\tprint (numpy.array(compseq.data[some_video_2nd_segment][\"intervals\"]).shape,numpy.array(compseq.data[some_video_2nd_segment][\"features\"]).shape)\n\t#==>\tprint (\"-------\")\n\t#Deploying the files to the disk and reading them again - Building machine learning models start right after this. No need to do alignment multiple times since aligned files can be deployed and used again.\n\tdeploy_files={x:x for x in cmumosi_highlevel.computational_sequences.keys()}\n\tcmumosi_highlevel.deploy(\"./deployed\",deploy_files)\n", "#Reading the dumped file can be as easy as just calling the mmdataset on the deployed folder\n\taligned_cmumosi_highlevel=mmdatasdk.mmdataset('./deployed')\n\t#Now let's get the tensor ready for ML - right here we just get everything into ML ready tensors. But you should split the aligned_cmumosi_highlevel based on the standard CMU MOSI folds\n\t#get the standard folds using mmsdk.mmdatasdk.cmu_mosi.standard_folds.standard_x_fold for x={train,test,valid}\n\ttensors=cmumosi_highlevel.get_tensors(seq_len=25,non_sequences=[\"Opinion Segment Labels\"],direction=False,folds=[mmdatasdk.cmu_mosi.standard_folds.standard_train_fold,mmdatasdk.cmu_mosi.standard_folds.standard_valid_fold,mmdatasdk.cmu_mosi.standard_folds.standard_test_fold])\n\tfold_names=[\"train\",\"valid\",\"test\"]\n\tfor i in range(3):\n\t\tfor csd in list(cmumosi_highlevel.keys()):\n\t\t\tprint (\"Shape of the %s computational sequence for %s fold is %s\"%(csd,fold_names[i],tensors[i][csd].shape))\n"]}
{"filename": "examples/mmdatasdk_examples/full_examples/process_mosei.py", "chunked_list": ["import mmsdk\n\tfrom mmsdk import mmdatasdk\n\tfrom mmsdk.mmdatasdk import log\n\timport numpy\n\tdef myavg(intervals,features):\n\t        return numpy.average(features,axis=0)\n\tdef deploy(in_dataset,destination):\n\t\tdeploy_files={x:x for x in in_dataset.keys()}\n\t\tin_dataset.deploy(destination,deploy_files)\n\tdef download_data():\n", "\tsource={\"raw\":mmdatasdk.cmu_mosei.raw,\"highlevel\":mmdatasdk.cmu_mosei.highlevel,\"labels\":mmdatasdk.cmu_mosei.labels}\n\t\tcmumosei_dataset={}\n\t\tfor key in source:\n\t\t\tcmumosei_dataset[key]=mmdatasdk.mmdataset(source[key],'cmumosei_%s/'%key)\n\t\treturn cmumosei_dataset\n\tdef process_data(folders=[\"cmumosei_highlevel\",\"cmumosei_labels\"]):\n\t\tlog.status(\"You can also download all the outputs of this code from here: http://immortal.multicomp.cs.cmu.edu/ACL20Challenge/\")\n\t\tcmumosei_dataset={}\n\t\tfor folder in folders:\n\t\t\tcmumosei_dataset[folder.split(\"_\")[1]]=mmdatasdk.mmdataset(folder)\n", "\t#performs word alignment. Labels are not part of the word alignment process.\n\t\tcmumosei_dataset[\"highlevel\"].align(\"glove_vectors\")\n\t\t#replacing missing modality information for words - some words may experience failed COVAREP, etc.\n\t\tcmumosei_dataset[\"highlevel\"].impute('glove_vectors')\n\t\t#this writes the word aligned computational sequences to the disk\n\t\tdeploy(cmumosei_dataset[\"highlevel\"],\"word_aligned_highlevel\")\n\t\t#if you want to load the word aligned from the disk, comment out the lines for align and impute, and uncomment the line below.\n\t\t#cmumosei_dataset[\"highlevel\"]=mmdatasdk.mmdataset(\"word_aligned_highlevel\")\n\t\t#now aligning to the labels - first adding labels to the dataset\n\t\tcmumosei_dataset[\"highlevel\"].computational_sequences[\"All Labels\"]=cmumosei_dataset[\"labels\"][\"All Labels\"]\n", "\t#the actual alignment without collapse function this time\n\t\tcmumosei_dataset[\"highlevel\"].align(\"All Labels\")\n\t\t#removing sentences which have missing modality information\n\t\tcmumosei_dataset[\"highlevel\"].hard_unify()\n\t\t#writing the final aligned to disk\n\t\tdeploy(cmumosei_dataset[\"highlevel\"],\"final_aligned\")\n\t\t#reading from the disk - if the above process is done. \n\t\t#cmumosei_dataset[\"highlevel\"]=mmdatasdk.mmdataset(\"final_aligned\")\n\t\t#getting the final tensors for machine learning - pass the folds to this function to get data based on tr,va,te folds.\n\t\ttensors=cmumosei_dataset[\"highlevel\"].get_tensors(seq_len=50,non_sequences=[\"All Labels\"],direction=False,folds=[mmdatasdk.cmu_mosei.standard_folds.standard_train_fold,mmdatasdk.cmu_mosei.standard_folds.standard_valid_fold,mmdatasdk.cmu_mosei.standard_folds.standard_test_fold])\n", "\tfold_names=[\"train\",\"valid\",\"test\"]\n\t\tfor i in range(3):\t\n\t\t\t#output the shape of the tensors\n\t\t\tfor csd in list(cmumosei_dataset[\"highlevel\"].keys()):\n\t\t\t\tprint (\"Shape of the %s computational sequence for %s fold is %s\"%(csd,fold_names[i],tensors[i][csd].shape))\n\tif __name__==\"__main__\":\n\t\tprint (\"You only need to download the data once!\")\n\t\tcmumosei_dataset=download_data()\n\t\tprocess_data()\n\t\tlog.success(\"Dataset processed\")\n"]}
