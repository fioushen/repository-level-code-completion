{"filename": "setup.py", "chunked_list": ["from setuptools import setup, find_packages\n\twith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n\t    long_description = f.read()\n\tsetup(\n\t    name='bingbong',\n\t    version='0.4.2',\n\t    description='Ping pong is a management library for LLM applied applications.',\n\t    long_description=long_description,\n\t    long_description_content_type=\"text/markdown\",\n\t    author='chansung park',\n", "    author_email='deep.diver.csp@gmail.com',\n\t    url='https://github.com/deep-diver/PingPong',\n\t    install_requires=[\n\t        'chromadb',\n\t        'torch',\n\t        'transformers',\n\t        'bs4'\n\t    ],\n\t    packages=['pingpong', 'pingpong.context'],\n\t    package_dir={'':'src'},\n", "    keywords=['LLM', 'pingpong', 'prompt', 'context', 'management'],\n\t    python_requires='>=3.8',\n\t    package_data={},\n\t    zip_safe=False,\n\t    classifiers=[\n\t        'License :: OSI Approved :: Apache Software License',\n\t        'Programming Language :: Python :: 3.8',\n\t        'Programming Language :: Python :: 3.9',\n\t        'Programming Language :: Python :: 3.10',\n\t        'Programming Language :: Python :: 3.11'\n", "    ]\n\t)\n"]}
{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "tests/test_pingpong.py", "chunked_list": ["from pingpong import PingPong\n\tfrom pingpong.dolly import DollyChatPPManager\n\tfrom pingpong.stablelm import StableLMChatPPManager\n\tfrom pingpong.gradio import GradioAlpacaChatPPManager\n\tfrom pingpong.gradio import GradioKoAlpacaChatPPManager\n\tfrom pingpong.context import CtxLastWindowStrategy\n\tclass TestPingpong():\n\t    def test_ctx_koalpaca_pingpong(self):\n\t        pp = PingPong(\"안녕하세요\", \"반갑습니다\")\n\t        pp_manager = GradioKoAlpacaChatPPManager()\n", "        pp_manager.add_pingpong(pp)        \n\t        prompts = pp_manager.build_prompts()\n\t        answers = \"\"\"### 질문:\n\t안녕하세요\n\t### 응답:\n\t반갑습니다\"\"\"\n\t        assert prompts == answers\n\t        uis = pp_manager.build_uis()\n\t        answers = [(\"안녕하세요\", \"반갑습니다\")]\n\t        assert uis == answers\n", "        pp_manager.ctx = \"이것은 문맥이영\"\n\t        answers = \"\"\"이것은 문맥이영\n\t### 질문:\n\t안녕하세요\n\t### 응답:\n\t반갑습니다\"\"\"\n\t        prompts = pp_manager.build_prompts()\n\t        assert prompts == answers\n\t    def test_context_dolly_pingpong(self):\n\t        pp_manager = DollyChatPPManager()\n", "        pp_manager.ctx = \"this is context\"\n\t        result = pp_manager.add_ping(\"hello\")\n\t        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\t### Instruction:\n\thello\n\t### Input:\n\tthis is context\n\t\"\"\"\n\t        print(result)\n\t        assert result == answers\n", "    def test_simple_dolly_pingpong(self):\n\t        pp_manager = DollyChatPPManager()\n\t        result = pp_manager.add_ping(\"hello\")\n\t        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\t### Instruction:\n\thello\n\t\"\"\"\n\t        assert result == answers\n\t        assert pp_manager.add_ping(\"hello2\") is None\n\t        pp_manager.add_pong(\"world\")\n", "        result = pp_manager.add_ping(\"hello2\")\n\t        answers = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\t### Instruction:\n\thello2\n\t\"\"\"\n\t        assert result == answers\n\t        assert pp_manager.add_ping(\"hello3\") is None\n\t    def test_ctx_alpaca_pingpong(self):\n\t        pp = PingPong(\"hello\", \"world\")\n\t        pp_manager = GradioAlpacaChatPPManager()\n", "        pp_manager.add_pingpong(pp)        \n\t        prompts = pp_manager.build_prompts()\n\t        answers = \"\"\"### Instruction:\n\thello\n\t### Response:\n\tworld\"\"\"\n\t        assert prompts == answers\n\t        uis = pp_manager.build_uis()\n\t        answers = [(\"hello\", \"world\")]\n\t        assert uis == answers\n", "        pp_manager.ctx = \"this is context\"\n\t        answers = \"\"\"this is context\n\t### Instruction:\n\thello\n\t### Response:\n\tworld\"\"\"\n\t        prompts = pp_manager.build_prompts()\n\t        assert prompts == answers\n\t    def test_single_gradio_alpaca_pingpong(self):\n\t        pp = PingPong(\"hello\", \"world\")\n", "        pp_manager = GradioAlpacaChatPPManager()\n\t        pp_manager.add_pingpong(pp)\n\t        prompts = pp_manager.build_prompts()\n\t        answers = \"\"\"### Instruction:\n\thello\n\t### Response:\n\tworld\"\"\"\n\t        assert prompts == answers\n\t        uis = pp_manager.build_uis()\n\t        answers = [(\"hello\", \"world\")]\n", "        assert uis == answers\n\t    def test_multi_gradio_pingpong(self):\n\t        pp_manager = GradioAlpacaChatPPManager()\n\t        for i in range(2):\n\t            pp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t            pp_manager.add_pingpong(pp)\n\t        prompts = pp_manager.build_prompts()\n\t        answers = \"\"\"### Instruction:\n\tping-0\n\t### Response:\n", "pong-0\n\t### Instruction:\n\tping-1\n\t### Response:\n\tpong-1\"\"\"\n\t        assert prompts == answers\n\t        uis = pp_manager.build_uis()\n\t        answers = [(\"ping-0\", \"pong-0\"), (\"ping-1\", \"pong-1\")]\n\t        assert uis == answers\n"]}
{"filename": "tests/test_strategy.py", "chunked_list": ["from pingpong import PingPong\n\tfrom pingpong.gradio import GradioAlpacaChatPPManager\n\tfrom pingpong.context import CtxAutoSummaryStrategy\n\tfrom pingpong.context import CtxLastWindowStrategy\n\tfrom pingpong.context import CtxSearchWindowStrategy\n\tclass TestStrategy():\n\t\tdef test_search_window_strategy(self):\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tstrategy = CtxSearchWindowStrategy(2)\n\t\t\tfor i in range(5):\n", "\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tanswer1 = \"\"\"### Instruction:\n\tping-0\n\t### Response:\n\tpong-0\n\t### Instruction:\n\tping-1\n\t### Response:\n\tpong-1\"\"\"\n", "\t\tanswer2 = \"\"\"### Instruction:\n\tping-2\n\t### Response:\n\tpong-2\n\t### Instruction:\n\tping-3\n\t### Response:\n\tpong-3\"\"\"\n\t\t\tanswer3 = \"\"\"### Instruction:\n\tping-4\n", "### Response:\n\tpong-4\"\"\"\n\t\t\tfor idx, win in enumerate(strategy(pp_manager)):\n\t\t\t\tif idx == 0:\n\t\t\t\t\tassert win == answer1\n\t\t\t\telif idx == 1:\n\t\t\t\t\tassert win == answer2\n\t\t\t\telif idx == 2:\n\t\t\t\t\tassert win == answer3\n\t\t\t\telse:\n", "\t\t\t\tassert True is False\n\t\tdef test_last_window_strategy_w_truncate(self):\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tstrategy = CtxLastWindowStrategy(2)\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tfor i in range(3):\n\t\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tanswers = \"\"\"### Instruction:\n\tpi\n", "### Response:\n\tpo\n\t### Instruction:\n\tpi\n\t### Response:\n\tpo\"\"\"\n\t\t\tassert strategy(pp_manager, truncate_size=2) == answers\n\t\tdef test_last_window_strategy(self):\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tstrategy = CtxLastWindowStrategy(2)\n", "\t\tfor i in range(1):\n\t\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tanswers = \"\"\"### Instruction:\n\tping-0\n\t### Response:\n\tpong-0\"\"\"\n\t\t\tassert strategy(pp_manager) == answers\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tfor i in range(3):\n", "\t\t\tpp = PingPong(f\"ping-{i}\", f\"pong-{i}\")\n\t\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tanswers = \"\"\"### Instruction:\n\tping-1\n\t### Response:\n\tpong-1\n\t### Instruction:\n\tping-2\n\t### Response:\n\tpong-2\"\"\"\n", "\t\tassert strategy(pp_manager) == answers\n\t\tdef test_auto_summary_strategy(self):\n\t\t\tpp_manager = GradioAlpacaChatPPManager()\n\t\t\tstrategy = CtxAutoSummaryStrategy(2)\n\t\t\tpp = PingPong(\"hello\", \"world\")\n\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\t\tassert sum_req is False\n\t\t\tpp = PingPong(\"hello2\", \"world2\")\n\t\t\tpp_manager.add_pingpong(pp)\n", "\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\t\tto_summarize_answer = \"\"\"### Instruction:\n\thello\n\t### Response:\n\tworld\n\t### Instruction:\n\thello2\n\t### Response:\n\tworld2\"\"\"\n\t\t\tassert sum_req is True\n", "\t\tassert to_summarize == to_summarize_answer\n\t\t\tassert strategy.last_idx == 2\n\t\t\tpp = PingPong(\"hello3\", \"world3\")\n\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\t\tassert sum_req is False\n\t\t\tpp = PingPong(\"hello4\", \"world4\")\n\t\t\tpp_manager.add_pingpong(pp)\n\t\t\tsum_req, to_summarize = strategy(pp_manager)\n\t\t\tto_summarize_answer = \"\"\"### Instruction:\n", "hello3\n\t### Response:\n\tworld3\n\t### Instruction:\n\thello4\n\t### Response:\n\tworld4\"\"\"\n\t\t\tassert sum_req is True\n\t\t\tassert to_summarize == to_summarize_answer\n\t\t\tassert strategy.last_idx == 4\n"]}
{"filename": "tests/test_scenarios.py", "chunked_list": ["from typing import List\n\tfrom pingpong import PingPong\n\tfrom pingpong.gradio import GradioAlpacaChatPPManager\n\tfrom pingpong.context import CtxAutoSummaryStrategy\n\tfrom pingpong.context import CtxLastWindowStrategy\n\tclass TestScenarios():\n\t    def test_basic_chat_workflow(self):\n\t        ppmanager = GradioAlpacaChatPPManager()\n\t        strategies = [\n\t            CtxAutoSummaryStrategy(max_pingpongs=3),\n", "            CtxLastWindowStrategy(max_pingpongs=2)\n\t        ]\n\t        conv1 = PingPong(\"Hello\", \"Hi, Nice to meet you!\")\n\t        ppmanager.add_pingpong(conv1)\n\t        for strategy in strategies:\n\t            if isinstance(strategy, CtxAutoSummaryStrategy):\n\t                sum_req, _ = strategy(ppmanager)\n\t                assert sum_req is False\n\t            elif isinstance(strategy, CtxLastWindowStrategy):\n\t                answers = \"\"\"### Instruction:\n", "Hello\n\t### Response:\n\tHi, Nice to meet you!\"\"\"\n\t                assert strategy(ppmanager) == answers\n\t        conv2 = PingPong(\"How are you?\", \"I am fine. Thank you, and you?\")\n\t        ppmanager.add_pingpong(conv2)\n\t        for strategy in strategies:\n\t            if isinstance(strategy, CtxAutoSummaryStrategy):\n\t                sum_req, _ = strategy(ppmanager)\n\t                assert sum_req is False\n", "            elif isinstance(strategy, CtxLastWindowStrategy):\n\t                answers = \"\"\"### Instruction:\n\tHello\n\t### Response:\n\tHi, Nice to meet you!\n\t### Instruction:\n\tHow are you?\n\t### Response:\n\tI am fine. Thank you, and you?\"\"\"\n\t                assert strategy(ppmanager) == answers\n", "        conv3 = PingPong(\"I am doing well.\", \"Good to know :)\")\n\t        ppmanager.add_pingpong(conv3)\n\t        for strategy in strategies:\n\t            if isinstance(strategy, CtxAutoSummaryStrategy):\n\t                answers = \"\"\"### Instruction:\n\tHello\n\t### Response:\n\tHi, Nice to meet you!\n\t### Instruction:\n\tHow are you?\n", "### Response:\n\tI am fine. Thank you, and you?\n\t### Instruction:\n\tI am doing well.\n\t### Response:\n\tGood to know :)\"\"\"\n\t                sum_req, to_summarize = strategy(ppmanager)\n\t                assert sum_req is True\n\t                assert to_summarize == answers\n\t            elif isinstance(strategy, CtxLastWindowStrategy):\n", "                answers = \"\"\"### Instruction:\n\tHow are you?\n\t### Response:\n\tI am fine. Thank you, and you?\n\t### Instruction:\n\tI am doing well.\n\t### Response:\n\tGood to know :)\"\"\"\n\t                assert strategy(ppmanager) == answers\n\t        conv4 = PingPong(\"What do you want to do today?\", \"I feel like I want to stay at home\")\n", "        ppmanager.add_pingpong(conv4)\n\t        for strategy in strategies:\n\t            if isinstance(strategy, CtxAutoSummaryStrategy):\n\t                sum_req, to_summarize = strategy(ppmanager)\n\t                assert sum_req is False\n\t            elif isinstance(strategy, CtxLastWindowStrategy):\n\t                answers = \"\"\"### Instruction:\n\tI am doing well.\n\t### Response:\n\tGood to know :)\n", "### Instruction:\n\tWhat do you want to do today?\n\t### Response:\n\tI feel like I want to stay at home\"\"\"\n\t                assert strategy(ppmanager) == answers"]}
{"filename": "src/pingpong/wizard_falcon.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tfrom pingpong.utils import build_prompts\n\tclass WizardFalconPromptFmt(PromptFmt):\n\t\t@classmethod\n\t\tdef ctx(cls, context):\n\t\t\tif context is None or context == \"\":\n\t\t\t\treturn \"\"\n\t\t\telse:\n\t\t\t\treturn f\"\"\"{context}\n", "\"\"\"\n\t\t@classmethod\n\t\tdef prompt(cls, pingpong, truncate_size):\n\t\t\tping = pingpong.ping[:truncate_size]\n\t\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\t\treturn f\"\"\"{ping}\n\t### Response: {pong}\n\t\"\"\"\n\tclass WizardFalconChatPPManager(PPManager):\n\t\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=WizardFalconPromptFmt, truncate_size: int=None):\n", "\t\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/stable_vicuna.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass StableVicunaPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t    return f\"\"\"### Human: {ping}\n\t### Assistant: {pong}\n\t\"\"\"\n\tclass StableVicunaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StableVicunaPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results"]}
{"filename": "src/pingpong/vicuna.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass VicunaPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t    return f\"\"\"USER: {ping}\n\tASSISTANT: {pong}\n\t\"\"\"\n\tclass VicunaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=VicunaPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results\n"]}
{"filename": "src/pingpong/flan.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass FlanAlpacaPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t=====\n", "\"\"\"\n\t  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    return f\"\"\"{pingpong.ping[:truncate_size]}\n\t-----\n\t{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"\n\tclass FlanAlpacaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=FlanAlpacaPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n", "    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t      if from_idx+idx != to_idx-1:\n\t        results += \"\"\"\n\t-----\n\t\"\"\"\n\t    return results\n"]}
{"filename": "src/pingpong/redpajama.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass RedPajamaChatPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|end|>\\n\"\n\t    return f\"\"\"<human>: {ping}\n\t<bot>: {pong}\"\"\"\n\tclass RedPajamaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=RedPajamaChatPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n", "    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results"]}
{"filename": "src/pingpong/alpaca.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass AlpacaPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    return f\"\"\"### Instruction:\n\t{pingpong.ping[:truncate_size]}\n\t### Response:\n\t{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"\n\tclass AlpacaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=AlpacaPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n", "    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t      if from_idx+idx != to_idx-1:\n\t        results += \"\"\"\n\t\"\"\"\n\t    return results\n"]}
{"filename": "src/pingpong/pingpong.py", "chunked_list": ["import json\n\tclass PingPong:\n\t  def __init__(self, ping, pong):\n\t    self.ping = ping\n\t    self.pong = pong\n\t  def __repr__(self):\n\t    return json.dumps(self, default=lambda o: o.__dict__)\n\t  @classmethod\n\t  def from_json(cls, json_dict):\n\t    return PingPong(json_dict['ping'], json_dict['pong'])\n", "class PromptFmt:\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    pass\n\t  @classmethod\n\t  def prompt(cls, pingpong):\n\t    pass\n\tclass UIFmt:\n\t  @classmethod\n\t  def ui(cls, pingpong):\n", "    pass\n\tclass PPManager:\n\t  def __init__(self, ctx: str=\"\"):\n\t    self.ctx = ctx\n\t    self.pingpongs = []\n\t  def add_ping(self, ping, fmt: PromptFmt):\n\t    if len(self.pingpongs) == 0 \\\n\t      or (len(self.pingpongs) >= 1 and self.pingpongs[-1].pong is not None):\n\t      self.pingpongs.append(PingPong(ping, None))\n\t      return True\n", "    return False\n\t  def add_pong(self, pong):\n\t    self.replace_last_pong(pong)\n\t  def replace_last_pong(self, pong):\n\t    self.pingpongs[-1].pong = pong\n\t  def append_pong(self, piece_pong):\n\t    self.pingpongs[-1].pong += piece_pong\n\t  def add_pingpong(self, pingpong):\n\t    self.pingpongs.append(pingpong)\n\t  def pop_pingpong(self):\n", "    return self.pingpongs.pop()\n\t  def build_prompts(self, from_idx: int, to_idx: int, fmt: PromptFmt, truncate_size: int):\n\t    pass\n\t  def build_uis(self, from_idx: int, to_idx: int, fmt: UIFmt):\n\t    pass\n\t  def __repr__(self):\n\t    return json.dumps(self, default=lambda o: o.__dict__)\n\t  @classmethod\n\t  def from_json(cls, json_str):\n\t    json_dict = json.loads(json_str)\n", "    new_instance = cls()\n\t    new_instance.ctx = json_dict['ctx']\n\t    new_instance.pingpongs = [PingPong.from_json(pingpong) for pingpong in json_dict['pingpongs']]\n\t    return new_instance  \n"]}
{"filename": "src/pingpong/dolly.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass DollyPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"\n\t### Input:\n", "{context}\n\t\"\"\"\n\t  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    return f\"\"\"### Instruction:\n\t{pingpong.ping[:truncate_size]}\n\t### Response:\n\t{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"\n\tclass DollyChatPPManager(PPManager):\n\t  def add_ping(self, ping, fmt: PromptFmt=DollyPromptFmt):\n", "    allowed = super().add_ping(ping, fmt)\n\t    if allowed:\n\t      prompts = f\"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\t### Instruction:\n\t{ping}\n\t{fmt.ctx(self.ctx)}\n\t\"\"\"\n\t      return prompts\n\t    return None\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=DollyPromptFmt, truncate_size: int=None):\n", "    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      print(idx)\n\t      results += fmt.prompt(pingpong)\n\t      if from_idx+idx != to_idx-1:\n\t        results += \"\"\"\n\t\"\"\"\n\t    return results"]}
{"filename": "src/pingpong/kullm.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tfrom pingpong.utils import build_prompts\n\tclass KULLMPromptFmt(PromptFmt):\n\t\t@classmethod\n\t\tdef ctx(cls, context):\n\t\t\tif context is None or context == \"\":\n\t\t\t\treturn \"\"\n\t\t\telse:\n\t\t\t\treturn f\"\"\"{context}\n", "\"\"\"\n\t\t@classmethod\n\t\tdef prompt(cls, pingpong, truncate_size):\n\t\t\tping = pingpong.ping[:truncate_size]\n\t\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\t\treturn f\"\"\"### 명령어:\n\t{ping}\n\t### 응답:\n\t{pong}\n\t\"\"\"\n", "class KULLMChatPPManager(PPManager):\n\t\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=KULLMPromptFmt, truncate_size: int=None):\n\t\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/koalpaca.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass KoAlpacaPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    return f\"\"\"### 질문:\n\t{pingpong.ping[:truncate_size]}\n\t### 응답:\n\t{\"\" if pingpong.pong is None else pingpong.pong[:truncate_size]}\"\"\"\n\tclass KoAlpacaChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=KoAlpacaPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n", "    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t      if from_idx+idx != to_idx-1:\n\t        results += \"\"\"\n\t\"\"\"\n\t    return results"]}
{"filename": "src/pingpong/__init__.py", "chunked_list": ["__version__ = '0.4.2'\n\tfrom .pingpong import PingPong\n"]}
{"filename": "src/pingpong/gradio.py", "chunked_list": ["from pingpong.pingpong import PromptFmt, UIFmt\n\tfrom pingpong.alpaca import AlpacaChatPPManager\n\tfrom pingpong.koalpaca import KoAlpacaChatPPManager\n\tfrom pingpong.dolly import DollyChatPPManager\n\tfrom pingpong.stablelm import StableLMChatPPManager\n\tfrom pingpong.flan import FlanAlpacaChatPPManager\n\tfrom pingpong.os_stablelm import OSStableLMChatPPManager\n\tfrom pingpong.vicuna import VicunaChatPPManager\n\tfrom pingpong.stable_vicuna import StableVicunaChatPPManager\n\tfrom pingpong.starchat import StarChatPPManager\n", "from pingpong.mpt import MPTChatPPManager\n\tfrom pingpong.redpajama import RedPajamaChatPPManager\n\tfrom pingpong.baize import BaizeChatPPManager\n\tfrom pingpong.xgen import XGenChatPPManager\n\tfrom pingpong.orca_mini import OrcaMiniChatPPManager\n\tfrom pingpong.guanaco import GuanacoChatPPManager\n\tfrom pingpong.wizard_falcon import WizardFalconChatPPManager\n\tfrom pingpong.kullm import KULLMChatPPManager\n\tfrom pingpong.utils import gradio_build_uis\n\tclass GradioChatUIFmt(UIFmt):\n", "  @classmethod\n\t  def ui(cls, pingpong):\n\t    return (pingpong.ping, pingpong.pong)\n\tclass GradioAlpacaChatPPManager(AlpacaChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n", "    return results\n\tclass GradioDollyChatPPManager(DollyChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioStableLMChatPPManager(StableLMChatPPManager):\n", "    def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t      if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t        to_idx = len(self.pingpongs)\n\t      results = []\n\t      for pingpong in self.pingpongs[from_idx:to_idx]:\n\t        results.append(fmt.ui(pingpong))\n\t      return results\n\tclass GradioKoAlpacaChatPPManager(KoAlpacaChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioFlanAlpacaChatPPManager(FlanAlpacaChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n", "    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioOSStableLMChatPPManager(OSStableLMChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n", "    return results\n\tclass GradioVicunaChatPPManager(VicunaChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioStableVicunaChatPPManager(StableVicunaChatPPManager):\n", "  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results  \n\tclass GradioStarChatPPManager(StarChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioMPTChatPPManager(MPTChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n", "    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioRedPajamaChatPPManager(RedPajamaChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n", "    return results\n\tclass GradioBaizeChatPPManager(BaizeChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = []\n\t    for pingpong in self.pingpongs[from_idx:to_idx]:\n\t      results.append(fmt.ui(pingpong))\n\t    return results\n\tclass GradioXGenChatPPManager(XGenChatPPManager):\n", "  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    return gradio_build_uis(self, from_idx, to_idx, fmt)\n\tclass GradioOrcaMiniChatPPManager(OrcaMiniChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    return gradio_build_uis(self, from_idx, to_idx, fmt)\n\tclass GradioGuanacoChatPPManager(GuanacoChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    return gradio_build_uis(self, from_idx, to_idx, fmt)\n\tclass GradioWizardChatPPManager(WizardFalconChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n", "    return gradio_build_uis(self, from_idx, to_idx, fmt)\n\tclass GradioKULLMChatPPManager(KULLMChatPPManager):\n\t  def build_uis(self, from_idx: int=0, to_idx: int=-1, fmt: UIFmt=GradioChatUIFmt):\n\t    return gradio_build_uis(self, from_idx, to_idx, fmt)"]}
{"filename": "src/pingpong/starchat.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass StarChatPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|end|>\\n\"\n\t    return f\"\"\"<|user|>{ping}<|end|>\n\t<|assistant|>{pong}\"\"\"\n\tclass StarChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StarChatPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n", "    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results\n"]}
{"filename": "src/pingpong/stablelm.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass StableLMPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t    return f\"<|USER|>{ping}<|ASSISTANT|>{pong}\"\n\tclass StableLMChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=StableLMPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n", "    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results"]}
{"filename": "src/pingpong/utils.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt, UIFmt\n\tdef build_prompts(\n\t\t\tppm: PPManager=None, \n\t\t\tfrom_idx: int=0, \n\t\t\tto_idx: int=-1, \n\t\t\tfmt: PromptFmt=None, \n\t\t\ttruncate_size: int=None\n\t):\n\t\tif to_idx == -1 or to_idx >= len(ppm.pingpongs):\n", "\t\t\tto_idx = len(ppm.pingpongs)\n\t\tresults = fmt.ctx(ppm.ctx)\n\t\tfor idx, pingpong in enumerate(ppm.pingpongs[from_idx:to_idx]):\n\t\t\t\tresults += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t\treturn results\n\tdef gradio_build_uis(\n\t\t\tppm: PPManager=None, \n\t\t\tfrom_idx: int=0, \n\t\t\tto_idx: int=-1, \n\t\t\tfmt: UIFmt=None\n", "):\n\t\tif to_idx == -1 or to_idx >= len(ppm.pingpongs):\n\t\t\t\tto_idx = len(ppm.pingpongs)\n\t\tresults = []\n\t\tfor pingpong in ppm.pingpongs[from_idx:to_idx]:\n\t\t\t\tresults.append(fmt.ui(pingpong))\n\t\treturn results"]}
{"filename": "src/pingpong/orca_mini.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tfrom pingpong.utils import build_prompts\n\tclass OrcaMiniChatPromptFmt(PromptFmt):\n\t\t@classmethod\n\t\tdef ctx(cls, context):\n\t\t\tif context is None or context == \"\":\n\t\t\t\t\treturn \"\"\n\t\t\telse:\n\t\t\t\t\treturn f\"\"\"### System:\n", "{context}\n\t\"\"\"\n\t\t@classmethod\n\t\tdef prompt(cls, pingpong, truncate_size):\n\t\t\tping = pingpong.ping[:truncate_size]\n\t\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\t\treturn f\"\"\"### User:\n\t{ping}\n\t### Response:\n\t{pong}\"\"\"\n", "class OrcaMiniChatPPManager(PPManager):\n\t\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=OrcaMiniChatPromptFmt, truncate_size: int=None):\n\t\t\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/guanaco.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tfrom pingpong.utils import build_prompts\n\tclass GuanacoPromptFmt(PromptFmt):\n\t\t@classmethod\n\t\tdef ctx(cls, context):\n\t\t\tif context is None or context == \"\":\n\t\t\t\treturn \"\"\n\t\t\telse:\n\t\t\t\treturn f\"\"\"{context}\n", "\"\"\"\n\t\t@classmethod\n\t\tdef prompt(cls, pingpong, truncate_size):\n\t\t\tping = pingpong.ping[:truncate_size]\n\t\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\t\treturn f\"\"\"### Human: {ping}\n\t### Assistant: {pong}\n\t\"\"\"\n\tclass GuanacoChatPPManager(PPManager):\n\t\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=GuanacoPromptFmt, truncate_size: int=None):\n", "\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/mpt.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass MPTChatPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None or pingpong.pong == \"\" else f\"{pingpong.pong[:truncate_size]}<|im_end|>\\n\"\n\t    return f\"\"\"<|im_start|>user\n\t{ping}<|im_end|>assistant<|im_start|>\n\t{pong}\"\"\"\n\tclass MPTChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=MPTChatPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n\t    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results\n"]}
{"filename": "src/pingpong/group.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tclass MirrorGroupPPManager:\n\t    def __init__(self, ppms: List[PPManager]):\n\t        self.ppmanagers = ppms\n\t    def append_pong(self, piece_pong, at=0):\n\t        self.ppmanagers[at].append_pong(piece_pong)\n\t    def add_pingpong(self, pingpong, at=None):\n\t        if at == None:\n\t            for ppm in self.ppmanagers:\n\t                ppm.add_pingpong(copy.deepcopy(pingpong))\n", "        else:      \n\t            self.ppmanagers[at].add_pingpong(copy.deepcopy(pingpong))\n\t    def replace_pong(self, pong, at=None):\n\t        if at == None:\n\t            for ppm in self.ppmanagers:\n\t                ppm.pingpongs[-1].pong = pong\n\t        else:\n\t            self.ppmanagers[at].pingpongs[-1].pong = pong\n\t    def build_prompts(self, from_idx: int=0, to_idx: int=-1, truncate_size: int=None):\n\t        results = []\n", "        for ppm in self.ppmanagers:\n\t            results.append(\n\t                ppm.build_prompts(\n\t                    from_idx=from_idx, \n\t                    to_idx=to_idx, \n\t                    truncate_size=truncate_size\n\t                )\n\t            )\n\t        return results\n\t    def build_uis(self, from_idx: int=0, to_idx: int=-1):\n", "        return self.ppmanagers[0].build_uis(\n\t            from_idx=from_idx, to_idx=to_idx\n\t        )"]}
{"filename": "src/pingpong/os_stablelm.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass OSStableLMPromptFmt(PromptFmt):\n\t  @classmethod\n\t  def ctx(cls, context):\n\t    if context is None or context == \"\":\n\t      return \"\"\n\t    else:\n\t      return f\"\"\"{context}\n\t\"\"\"\n", "  @classmethod\n\t  def prompt(cls, pingpong, truncate_size):\n\t    ping = pingpong.ping[:truncate_size]\n\t    pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t    return f\"<|prompter|>{ping}<|endoftext|><|assistant|>{pong}\"\n\tclass OSStableLMChatPPManager(PPManager):\n\t  def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=OSStableLMPromptFmt, truncate_size: int=None):\n\t    if to_idx == -1 or to_idx >= len(self.pingpongs):\n\t      to_idx = len(self.pingpongs)\n\t    results = fmt.ctx(self.ctx)\n", "    for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t      results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t    return results"]}
{"filename": "src/pingpong/baize.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tclass BaizePromptFmt(PromptFmt):\n\t    @classmethod\n\t    def ctx(cls, context):\n\t        if context is None or context == \"\":\n\t            return \"\"\n\t        else:\n\t            return f\"\"\"{context}\n\t\"\"\"\n", "    @classmethod\n\t    def prompt(cls, pingpong, truncate_size):\n\t        ping = pingpong.ping[:truncate_size]\n\t        pong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t        return f\"\"\"[|Human|]: {ping}\n\t[|AI|]: {pong}\n\t\"\"\"\n\tclass BaizeChatPPManager(PPManager):\n\t    def build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=BaizePromptFmt, truncate_size: int=None):\n\t        if to_idx == -1 or to_idx >= len(self.pingpongs):\n", "            to_idx = len(self.pingpongs)\n\t        results = fmt.ctx(self.ctx)\n\t        for idx, pingpong in enumerate(self.pingpongs[from_idx:to_idx]):\n\t            results += fmt.prompt(pingpong, truncate_size=truncate_size)\n\t        return results"]}
{"filename": "src/pingpong/xgen.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.pingpong import PromptFmt\n\tfrom pingpong.utils import build_prompts\n\tclass XGenChatPromptFmt(PromptFmt):\n\t\t@classmethod\n\t\tdef ctx(cls, context):\n\t\t\tif context is None or context == \"\":\n\t\t\t\treturn \"\"\n\t\t\telse:\n\t\t\t\treturn f\"\"\"{context}\n", "\"\"\"\n\t\t@classmethod\n\t\tdef prompt(cls, pingpong, truncate_size):\n\t\t\tping = pingpong.ping[:truncate_size]\n\t\t\tpong = \"\" if pingpong.pong is None else pingpong.pong[:truncate_size]\n\t\t\treturn f\"\"\"### Human: {ping}\n\t###{pong}\n\t\"\"\"\n\tclass XGenChatPPManager(PPManager):\n\t\tdef build_prompts(self, from_idx: int=0, to_idx: int=-1, fmt: PromptFmt=XGenChatPromptFmt, truncate_size: int=None):\n", "\t\treturn build_prompts(self, from_idx, to_idx, fmt, truncate_size)"]}
{"filename": "src/pingpong/context/last_window_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.context.strategy import CtxStrategy\n\tclass CtxLastWindowStrategy(CtxStrategy):\n\t    def __init__(self, max_pingpongs: int):\n\t        self.max_pingpongs = max_pingpongs\n\t    def __call__(self, ppmanager: PPManager, build_uis=False, truncate_size=None):\n\t        pps = ppmanager.pingpongs\n\t        if len(pps) <= self.max_pingpongs:\n\t            start_idx = 0\n\t        else:\n", "            start_idx = len(pps) - self.max_pingpongs\n\t        if build_uis:\n\t            return (\n\t                ppmanager.build_prompts(from_idx=start_idx, truncate_size=truncate_size),\n\t                ppmanager.build_uis(from_idx=start_idx)\n\t            )\n\t        else:\n\t            return ppmanager.build_prompts(from_idx=start_idx, truncate_size=truncate_size)"]}
{"filename": "src/pingpong/context/internet_search_strategy.py", "chunked_list": ["import re\n\timport copy\n\timport json\n\timport random\n\timport string\n\timport http.client\n\timport chromadb\n\timport torch\n\timport torch.nn.functional as F\n\tfrom urllib.request import urlopen\n", "from urllib.error import HTTPError\n\tfrom bs4 import BeautifulSoup\n\tfrom transformers import AutoTokenizer, AutoModel\n\tfrom pingpong import PingPong\n\tfrom pingpong.pingpong import PPManager\n\tfrom pingpong.context.strategy import CtxStrategy\n\tdefault_instruction = \"\"\"Based on the provided texts below, please answer to '{ping}' in your own words. Try to explain in detailed introduction, body, and conclusion structure as much as possible.\n\t=====================\n\t\"\"\"\n\tclass SimilaritySearcher:\n", "    def __init__(\n\t        self, model, tokenizer, max_length=512, device=\"cpu\"\n\t    ):\n\t        self.model = model\n\t        self.tokenizer = tokenizer\n\t        self.max_length = max_length\n\t        self.device = device\n\t    def get_embeddings(self, input_texts):\n\t        # Tokenize the input texts\n\t        batch_dict = self.tokenizer(\n", "            input_texts,\n\t            max_length=self.max_length,\n\t            padding=True,\n\t            truncation=True,\n\t            return_tensors='pt'\n\t        ).to(self.device)\n\t        outputs = self.model(**batch_dict)\n\t        embeddings = self._average_pool(\n\t            outputs.last_hidden_state, batch_dict['attention_mask']\n\t        )\n", "        embeddings = F.normalize(embeddings, p=2, dim=1)\n\t        embeddings_cpu = embeddings.to(\"cpu\")\n\t        embeddings_list = embeddings_cpu.tolist()\n\t        if self.device == \"cuda\":\n\t            del embeddings\n\t            torch.cuda.empty_cache()        \n\t        return embeddings_cpu, embeddings_list\n\t    def _average_pool(\n\t        self,\n\t        last_hidden_states,\n", "        attention_mask\n\t    ):\n\t        last_hidden = last_hidden_states.masked_fill(~attention_mask[..., None].bool(), 0.0)\n\t        return last_hidden.sum(dim=1) / attention_mask.sum(dim=1)[..., None]\n\t    @classmethod\n\t    def from_pretrained(cls, base_name=\"intfloat/e5-large-v2\", max_length=512, device=\"cpu\"):\n\t        tokenizer = AutoTokenizer.from_pretrained(base_name)\n\t        model = AutoModel.from_pretrained(base_name).to(device)\n\t        return SimilaritySearcher(\n\t            model, tokenizer, max_length, device\n", "        )\n\tclass InternetSearchStrategy(CtxStrategy):\n\t    def __init__(\n\t        self,\n\t        similarity_searcher,\n\t        instruction=default_instruction,\n\t        serper_api_key=None, \n\t        db_name=None, chunk_size=1800\n\t    ):\n\t        self.searcher = similarity_searcher\n", "        self.instruction = instruction\n\t        self.db_name = db_name\n\t        self.chunk_size = chunk_size\n\t        self.serper_api_key=serper_api_key\n\t        if self.searcher is None:\n\t            raise ValueError(\"SimilaritySearcher is not set.\")\n\t        if self.serper_api_key is None:\n\t            raise ValueError(\"API Key is not set. Grasp your own at https://serper.dev/\")        \n\t        if self.db_name is None:\n\t            self.db_name = InternetSearchStrategy.id_generator()\n", "    def __call__(self, ppmanager: PPManager, search_query=None, search_top_k=5, top_k=8, keep_original=False):\n\t        ppm = copy.deepcopy(ppmanager)\n\t        if search_query is None:\n\t            search_query = ppm.pingpongs[-1].ping\n\t        last_ping = ppm.pingpongs[-1].ping\n\t        # 1st yield\n\t        ppm.add_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n\t        ppm.append_pong(\"• Creating Chroma DB Collection...\")\n\t        yield ppm, \"• Creating Chroma DB Collection √\"\n\t        chroma_client = chromadb.Client()\n", "        try:\n\t            chroma_client.delete_collection(self.db_name)\n\t        except:\n\t            pass\n\t        col = chroma_client.create_collection(self.db_name)\n\t        # 2nd yield\n\t        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n\t        ppm.append_pong(\"• Creating Chroma DB Collection √\\n\")\n\t        ppm.append_pong(\"• Google searching...\\n\")\n\t        yield ppm, \"• Google searching √\"\n", "        urls = []\n\t        titles = []\n\t        search_results = []\n\t        for search_result, title, url in self._google_search(search_query, search_top_k):\n\t            search_results.append(search_result)\n\t            titles.append(title)\n\t            urls.append(url)\n\t            ppm.append_pong(f\"    - [{title}]({url}) √\\n\")\n\t            yield ppm, f\" ▷ [{title}]({url}) √\"\n\t        # 3rd yield\n", "        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n\t        ppm.append_pong(\"• Creating Chroma DB Collection √\\n\")\n\t        ppm.append_pong(\"• Google searching √\\n\")\n\t        for title, url in zip(titles, urls):\n\t            ppm.append_pong(f\"    - [{title}]({url}) √\\n\")\n\t        ppm.append_pong(\"• Creating embeddings...\")\n\t        yield ppm, \"• Creating embeddings √\"\n\t        final_chunks = []\n\t        for search_result in search_results:\n\t            chunks = self._create_chunks(\n", "                search_result, \n\t                chunk_size=self.searcher.max_length\n\t            )\n\t            final_chunks.append(chunks)  \n\t        self._put_chunks_into_collection(\n\t            col, final_chunks, docs_per_step=1\n\t        )\n\t        query_results = self._query(\n\t            col, f\"query: {last_ping}\", top_k,\n\t        )\n", "        # 4th yield\n\t        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n\t        ppm.append_pong(\"• Creating Chroma DB Collection √\\n\")\n\t        ppm.append_pong(\"• Google searching √\\n\")\n\t        for title, url in zip(titles, urls):\n\t            ppm.append_pong(f\"    - [{title}]({url}) √\\n\")\n\t        ppm.append_pong(\"• Creating embeddings √\\n\")\n\t        ppm.append_pong(\"• Information retrieval...\")\n\t        yield ppm, \"• Information retrieval √\"\n\t        last_ping = self.instruction.format(ping=last_ping)\n", "        for doc in query_results['documents'][0]:\n\t            last_ping = last_ping + doc.replace('passage: ', '') + \"\\n\"\n\t        # 5th yield\n\t        ppm.replace_last_pong(\"![loading](https://i.ibb.co/RPSPL5F/loading.gif)\\n\")\n\t        ppm.append_pong(\"• Creating Chroma DB Collection √\\n\")\n\t        ppm.append_pong(\"• Google searching √\\n\")\n\t        for title, url in zip(titles, urls):\n\t            ppm.append_pong(f\"    - [{title}]({url}) √\\n\")\n\t        ppm.append_pong(\"• Creating embeddings √\\n\")\n\t        ppm.append_pong(\"• Information retrieval √\")\n", "        yield ppm, \"• Done √\"\n\t        ppm.pingpongs[-1].ping = last_ping\n\t        ppm.replace_last_pong(\"\")\n\t        yield ppm, \"⏳ Wait until LLM generates message for you ⏳\"\n\t    def _google_search(self, query, search_top_k):\n\t        search_results = self.__google_search(query, self.serper_api_key)\n\t        final_results = []\n\t        titles = []\n\t        urls = []\n\t        num_of_searched = 0\n", "        for search_result in search_results:\n\t            if num_of_searched >= search_top_k:\n\t                break\n\t            title = search_result['title']\n\t            url = search_result['link']\n\t            if url.startswith(\"https://youtube.com\"):\n\t                continue\n\t            try: \n\t                page = urlopen(url, timeout=5)\n\t                html_bytes = page.read()\n", "                html = html_bytes.decode(\"utf-8\")\n\t            except:\n\t                continue \n\t            ps = \"\"\n\t            soup = BeautifulSoup(html, \"html.parser\")\n\t            for tag in soup.findAll('p'):\n\t                for string in tag.strings:\n\t                    ps = ps + string\n\t            ps = self._replace_multiple_newlines(ps)\n\t            yield ps, title, url\n", "            # final_results.append(ps)\n\t            # urls.append(url)\n\t            # titles.append(title)\n\t            num_of_searched = num_of_searched+1\n\t        # return final_results, titles, urls\n\t    def __google_search(self, query, serper_key):\n\t        conn = http.client.HTTPSConnection(\"google.serper.dev\")\n\t        payload = json.dumps({\n\t            \"q\": query\n\t        })\n", "        headers = {\n\t            'X-API-KEY': serper_key,\n\t            'Content-Type': 'application/json'\n\t        }\n\t        conn.request(\"POST\", \"/search\", payload, headers)\n\t        res = conn.getresponse()\n\t        data = res.read()\n\t        return json.loads(data)['organic']\n\t    def _query(\n\t        self, collection, q, top_k\n", "    ):\n\t        _, q_embeddings_list = self.searcher.get_embeddings([q])\n\t        return collection.query(\n\t            query_embeddings=q_embeddings_list,\n\t            n_results=top_k\n\t        )\n\t    # chunk_size == number of characters\n\t    def _create_chunks(self, text, chunk_size):\n\t        chunks = []\n\t        for idx in range(0, len(text), chunk_size):\n", "            chunks.append(\n\t                f\"passage: {text[idx:idx+chunk_size]}\"\n\t            )\n\t        return chunks\n\t    def _put_chunk_into_collection(\n\t        self, collection, chunk_id, chunk, docs_per_step=1\n\t    ):\n\t        for i in range(0, len(chunk), docs_per_step):\n\t            cur_texts = chunk[i:i+docs_per_step]\n\t            _, embeddings_list = self.searcher.get_embeddings(cur_texts)\n", "            ids = [\n\t                f\"id-{chunk_id}-{num}\" for num in range(i, i+docs_per_step)\n\t            ]\n\t            collection.add(\n\t              embeddings=embeddings_list,\n\t              documents=cur_texts,\n\t              ids=ids\n\t            )\n\t    def _put_chunks_into_collection(\n\t        self, collection,\n", "        chunks, docs_per_step=1\n\t    ):\n\t        for idx, chunk in enumerate(chunks):\n\t            self._put_chunk_into_collection(\n\t                collection, idx, \n\t                chunk, docs_per_step=docs_per_step\n\t            )\n\t    def _replace_multiple_newlines(self, text):\n\t        \"\"\"Replaces multiple newline characters with a single newline character.\"\"\"\n\t        pattern = re.compile(r\"\\n+\")\n", "        return pattern.sub(\"\\n\", text)             \n\t    @classmethod\n\t    def id_generator(cls, size=10, chars=string.ascii_uppercase + string.digits):\n\t        return ''.join(random.choice(chars) for _ in range(size))\n"]}
{"filename": "src/pingpong/context/__init__.py", "chunked_list": ["from .auto_summary_strategy import CtxAutoSummaryStrategy\n\tfrom .last_window_strategy import CtxLastWindowStrategy\n\tfrom .search_window_strategy import CtxSearchWindowStrategy\n\tfrom .internet_search_strategy import SimilaritySearcher, InternetSearchStrategy"]}
{"filename": "src/pingpong/context/auto_summary_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.context.strategy import CtxStrategy\n\tclass CtxAutoSummaryStrategy(CtxStrategy):\n\t    def __init__(self, max_pingpongs: int):\n\t        self.max_pingpongs = max_pingpongs\n\t        self.last_idx = 0\n\t    def __call__(self, ppmanager: PPManager):\n\t        pps = ppmanager.pingpongs\n\t        prev_idx = self.last_idx\n\t        sum_req = False\n", "        if len(pps[self.last_idx:]) >= self.max_pingpongs:\n\t            sum_req = True\n\t            self.last_idx = len(pps)\n\t        return sum_req, ppmanager.build_prompts(from_idx=prev_idx)"]}
{"filename": "src/pingpong/context/search_window_strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tfrom pingpong.context.strategy import CtxStrategy\n\tclass CtxSearchWindowStrategy(CtxStrategy):\n\t    def __init__(self, window_size: int):\n\t        self.window_size = window_size\n\t    def __call__(self, ppmanager: PPManager):\n\t        pps = ppmanager.pingpongs\n\t        num_wins = len(pps) // self.window_size\n\t        remainings = True if len(pps) % self.window_size != 0 else False\n\t        for win_idx in range(num_wins):\n", "            cur_win_start_idx = win_idx * self.window_size\n\t            cur_win_end_idx = cur_win_start_idx + self.window_size\n\t            yield ppmanager.build_prompts(from_idx=cur_win_start_idx, to_idx=cur_win_end_idx)\n\t        if remainings:\n\t            last_win_start_idx = (num_wins) * self.window_size\n\t            yield ppmanager.build_prompts(from_idx=last_win_start_idx)"]}
{"filename": "src/pingpong/context/strategy.py", "chunked_list": ["from pingpong.pingpong import PPManager\n\tclass CtxStrategy:\n\t    def __call__(self, ppmanager: PPManager):\n\t        pass\n"]}
