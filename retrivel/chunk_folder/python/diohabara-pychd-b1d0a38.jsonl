{"filename": "tests/__init__.py", "chunked_list": []}
{"filename": "example/04_decompiled_example_loops.py", "chunked_list": ["fruits = ('apple', 'banana', 'orange', 'grape')\n\tfor fruit in fruits:\n\t    print('Current fruit: {}'.format(fruit))\n\tfor i in range(5):\n\t    print('Current value of i: {}'.format(i))\n\tcount = 0\n\twhile count < 5:\n\t    print('Current count: {}'.format(count))\n\t    count += 1\n\tfor i in range(3):\n", "    print('Outer loop, i: {}'.format(i))\n\t    for j in range(2):\n\t        print('  Inner loop, j: {}'.format(j))"]}
{"filename": "example/05_example_list_comprehensions.py", "chunked_list": ["# Basic list comprehension\n\tsquares = [x**2 for x in range(1, 6)]\n\tprint(squares)  # Output: [1, 4, 9, 16, 25]\n\t# List comprehension with a condition\n\teven_squares = [x**2 for x in range(1, 6) if x % 2 == 0]\n\tprint(even_squares)  # Output: [4, 16]\n\t# Nested list comprehension\n\tmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ttranspose = [[row[i] for row in matrix] for i in range(len(matrix))]\n\tprint(transpose)  # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n"]}
{"filename": "example/08_decompiled_example_modules_packages.py", "chunked_list": ["from animals.mammals import get_mammals, get_mammal_info\n\tdef main():\n\t    mammals = get_mammals()\n\t    print('Mammals:')\n\t    for mammal in mammals:\n\t        print(mammal)\n\t    print('\\nMammal info:')\n\t    for mammal in mammals:\n\t        print(get_mammal_info(mammal))\n\tif __name__ == '__main__':\n", "    main()"]}
{"filename": "example/01_example_variables.py", "chunked_list": ["# Assigning values to variables\n\tname = \"John Doe\"\n\tage = 30\n\theight = 6.1  # in feet\n\t# Performing operations with variables\n\tage_next_year = age + 1\n\thalf_height = height / 2\n\t# Printing variables and their values\n\tprint(\"Name:\", name)\n\tprint(\"Age:\", age)\n", "print(\"Height:\", height, \"feet\")\n\tprint(\"Age next year:\", age_next_year)\n\tprint(\"Half height:\", half_height, \"feet\")\n"]}
{"filename": "example/04_example_loops.py", "chunked_list": ["# Using a for loop to iterate through a list\n\tfruits = [\"apple\", \"banana\", \"orange\", \"grape\"]\n\tfor fruit in fruits:\n\t    print(f\"Current fruit: {fruit}\")\n\t# Using a for loop with the range function\n\tfor i in range(5):\n\t    print(f\"Current value of i: {i}\")\n\t# Using a while loop\n\tcount = 0\n\twhile count < 5:\n", "    print(f\"Current count: {count}\")\n\t    count += 1\n\t# Using a nested loop\n\tfor i in range(3):\n\t    print(f\"Outer loop, i: {i}\")\n\t    for j in range(2):\n\t        print(f\"  Inner loop, j: {j}\")\n"]}
{"filename": "example/09_example_exceptioins.py", "chunked_list": ["def divide(a, b):\n\t    try:\n\t        result = a / b\n\t        print(f\"{a} divided by {b} is {result}\")\n\t    except ZeroDivisionError:\n\t        print(\"Cannot divide by zero.\")\n\tdivide(10, 2)\n\tdivide(10, 0)\n\tdef safe_conversion(value, to_int=True):\n\t    try:\n", "        if to_int:\n\t            converted = int(value)\n\t        else:\n\t            converted = float(value)\n\t        print(f\"Converted {value} to {converted}\")\n\t    except ValueError:\n\t        print(f\"Invalid value: {value}\")\n\t    except TypeError:\n\t        print(f\"Unsupported type: {type(value).__name__}\")\n\tsafe_conversion(\"42\")\n", "safe_conversion(\"3.14\", False)\n\tsafe_conversion(\"abc\")\n\tsafe_conversion(None)\n\tdef read_file(file_name):\n\t    try:\n\t        file = open(file_name, \"r\")\n\t        content = file.read()\n\t        print(f\"File content:\\n{content}\")\n\t    except FileNotFoundError:\n\t        print(\"File not found.\")\n", "    finally:\n\t        if \"file\" in locals() and not file.closed:\n\t            file.close()\n\t            print(\"File closed.\")\n\tread_file(\"example.txt\")\n\tclass InvalidAgeError(ValueError):\n\t    pass\n\tdef check_age(age):\n\t    if age < 0:\n\t        raise InvalidAgeError(\"Age cannot be negative.\")\n", "    elif age > 120:\n\t        raise InvalidAgeError(\"Age is too high.\")\n\t    else:\n\t        print(\"Age is valid.\")\n\ttry:\n\t    check_age(25)\n\t    check_age(-5)\n\texcept InvalidAgeError as e:\n\t    print(e)\n"]}
{"filename": "example/03_decompiled_example_if_else.py", "chunked_list": ["age = 25\n\tcountry = 'USA'\n\tjob_status = 'employed'\n\tfavorite_color = 'blue'\n\tif age < 18 or (country == 'USA' and favorite_color == 'blue'):\n\t    if job_status == 'employed':\n\t        print('Minor or USA + blue, employed.')\n\t    else:\n\t        print('Minor or USA + blue, unemployed.')\n\telse:\n", "    if job_status == 'employed':\n\t        if country != 'USA' or favorite_color != 'blue':\n\t            print('Not minor, not USA + blue, employed.')\n\t    else:\n\t        if country != 'USA' or favorite_color != 'blue':\n\t            print('Not minor, not USA + blue, unemployed.')\n\t        else:\n\t            print('Not minor, not USA + blue, other status.')"]}
{"filename": "example/09_decompiled_example_exceptioins.py", "chunked_list": ["def divide(a, b):\n\t    try:\n\t        result = a / b\n\t    except ZeroDivisionError:\n\t        print('Cannot divide by zero.')\n\t    else:\n\t        print(f'{a} divided by {b} is {result}')\n\tdef safe_conversion(value, to_int=True):\n\t    try:\n\t        if to_int:\n", "            converted = int(value)\n\t        else:\n\t            converted = float(value)\n\t    except ValueError:\n\t        print(f'Invalid value: {value}')\n\t    except TypeError:\n\t        print(f'Unsupported type: {type(value).__name__}')\n\t    else:\n\t        print(f'Converted {value} to {converted}')\n\tdef read_file(file_name):\n", "    try:\n\t        file = open(file_name, 'r')\n\t    except FileNotFoundError:\n\t        print('File not found.')\n\t    else:\n\t        content = file.read()\n\t        print(f'File content:\\n{content}')\n\t        try:\n\t            locals()['file']\n\t        except KeyError:\n", "            pass\n\t        else:\n\t            if not file.closed:\n\t                file.close()\n\t                print('File closed.')\n\t            raise\n\tclass InvalidAgeError(ValueError):\n\t    pass\n\tdef check_age(age):\n\t    if age < 0:\n", "        raise InvalidAgeError('Age cannot be negative.')\n\t    elif age > 120:\n\t        raise InvalidAgeError('Age is too high.')\n\t    else:\n\t        print('Age is valid.')"]}
{"filename": "example/02_decompiled_example_data_types.py", "chunked_list": ["integer_example = 42\n\tfloat_example = 3.14\n\tstring_example = 'Hello, World!'\n\tlist_example = [1, 2, 3, 4, 5]\n\ttuple_example = (1, 'apple', 3.14)\n\tdict_example = {'name': 'John Doe', 'age': 30, 'city': 'New York'}\n\tset_example = {1, 2, 3, 4, 5}.union(frozenset({1, 2, 3, 4, 5}))\n\tbool_example = True\n\tprint('Integer:', integer_example)\n\tprint('Float:', float_example)\n", "print('String:', string_example)\n\tprint('List:', list_example)\n\tprint('Tuple:', tuple_example)\n\tprint('Dictionary:', dict_example)\n\tprint('Set:', set_example)\n\tprint('Boolean:', bool_example)"]}
{"filename": "example/10_example_file_io.py", "chunked_list": ["file_name = \"example.txt\"\n\twith open(file_name, \"r\") as file:\n\t    content = file.read()\n\t    print(f\"File content:\\n{content}\")\n\tfile_name = \"output.txt\"\n\tcontent = \"Hello, World!\"\n\twith open(file_name, \"w\") as file:\n\t    file.write(content)\n\t    print(f\"Wrote content to {file_name}\")\n\tfile_name = \"log.txt\"\n", "log_entry = \"This is a log entry.\"\n\twith open(file_name, \"a\") as file:\n\t    file.write(f\"{log_entry}\\n\")\n\t    print(f\"Appended log entry to {file_name}\")\n\tfile_name = \"example.txt\"\n\twith open(file_name, \"r\") as file:\n\t    print(f\"Reading {file_name} line by line:\")\n\t    for line in file:\n\t        print(line.strip())\n\timport json\n", "file_name = \"data.json\"\n\tdata = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\t# Writing JSON data to a file\n\twith open(file_name, \"w\") as file:\n\t    json.dump(data, file)\n\t    print(f\"Wrote JSON data to {file_name}\")\n\t# Reading JSON data from a file\n\twith open(file_name, \"r\") as file:\n\t    loaded_data = json.load(file)\n\t    print(f\"Read JSON data from {file_name}:\")\n", "    print(loaded_data)\n"]}
{"filename": "example/01_decompiled_example_variables.py", "chunked_list": ["name = 'John Doe'\n\tage = 30\n\theight = 6.1\n\tage_next_year = age + 1\n\thalf_height = height / 2\n\tprint('Name:', name)\n\tprint('Age:', age)\n\tprint('Height:', height, 'feet')\n\tprint('Age next year:', age_next_year)\n\tprint('Half height:', half_height, 'feet')"]}
{"filename": "example/11_decompiled_example_std_library.py", "chunked_list": ["import os\n\timport shutil\n\timport glob\n\timport tempfile\n\tcwd = os.getcwd()\n\tprint('Current working directory: {0}'.format(cwd))\n\tprint('Files and directories in the current directory:')\n\tfor item in os.listdir(cwd):\n\t    print(item)\n\tnew_dir = 'example_directory'\n", "os.makedirs(new_dir, exist_ok=True)\n\tprint('Created new directory: {0}'.format(new_dir))\n\tnew_name = 'renamed_directory'\n\tos.rename(new_dir, new_name)\n\tprint('Renamed directory from {0} to {1}'.format(new_dir, new_name))\n\tos.rmdir(new_name)\n\tprint('Removed directory: {0}'.format(new_name))\n\tsrc_file = 'source.txt'\n\tdst_file = 'destination.txt'\n\tshutil.copy(src_file, dst_file)\n", "print('Copied {0} to {1}'.format(src_file, dst_file))\n\tnew_location = 'moved.txt'\n\tshutil.move(dst_file, new_location)\n\tprint('Moved {0} to {1}'.format(dst_file, new_location))\n\tos.remove(new_location)\n\tprint('Removed file: {0}'.format(new_location))\n\tprint('Python files in the current directory:')\n\tfor py_file in glob.glob('*.py'):\n\t    print(py_file)\n\twith tempfile.NamedTemporaryFile('w+t', delete=False) as temp_file:\n", "    temp_file.write('Hello, World!')\n\t    temp_path = temp_file.name\n\t    print('Created temporary file: {0}'.format(temp_path))\n\twith open(temp_path, 'r') as temp_file:\n\t    content = temp_file.read()\n\t    print('Content of the temporary file: {0}'.format(content))\n\tos.remove(temp_path)\n\tprint('Removed temporary file: {0}'.format(temp_path))"]}
{"filename": "example/02_example_data_types.py", "chunked_list": ["# Integer\n\tinteger_example = 42\n\t# Float\n\tfloat_example = 3.14\n\t# String\n\tstring_example = \"Hello, World!\"\n\t# List\n\tlist_example = [1, 2, 3, 4, 5]\n\t# Tuple\n\ttuple_example = (1, \"apple\", 3.14)\n", "# Dictionary\n\tdict_example = {\n\t    \"name\": \"John Doe\",\n\t    \"age\": 30,\n\t    \"city\": \"New York\"\n\t}\n\t# Set\n\tset_example = {1, 2, 3, 4, 5}\n\t# Boolean\n\tbool_example = True\n", "# Printing the examples\n\tprint(\"Integer:\", integer_example)\n\tprint(\"Float:\", float_example)\n\tprint(\"String:\", string_example)\n\tprint(\"List:\", list_example)\n\tprint(\"Tuple:\", tuple_example)\n\tprint(\"Dictionary:\", dict_example)\n\tprint(\"Set:\", set_example)\n\tprint(\"Boolean:\", bool_example)\n"]}
{"filename": "example/05_decompiled_example_list_comprehensions.py", "chunked_list": ["squares = [x**2 for x in range(1, 6)]\n\tprint(squares)\n\teven_squares = [x**2 for x in range(1, 6) if x**2 % 2 == 0]\n\tprint(even_squares)\n\tmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ttranspose = [[row[i] for row in matrix] for i in range(len(matrix))]\n\tprint(transpose)"]}
{"filename": "example/10_decompiled_example_file_io.py", "chunked_list": ["file_name = 'example.txt'\n\twith open(file_name, 'r') as file:\n\t    content = file.read()\n\tprint('File content:\\n{}'.format(content))\n\ttry:\n\t    with open('output.txt', 'w') as file:\n\t        content = 'Hello, World!'\n\t        file.write(content)\n\t    print('Wrote content to {}'.format(file_name))\n\texcept:\n", "    pass\n\ttry:\n\t    with open('log.txt', 'a') as file:\n\t        log_entry = 'This is a log entry.'\n\t        file.write('{}\\n'.format(log_entry))\n\t    print('Appended log entry to {}'.format(file_name))\n\texcept:\n\t    pass\n\tfile_name = 'example.txt'\n\tprint('Reading {} line by line:'.format(file_name))\n", "with open(file_name, 'r') as file:\n\t    for line in file:\n\t        print(line.strip())\n\timport json\n\tfile_name = 'data.json'\n\tdata = {'name': 'John', 'age': 30, 'city': 'New York'}\n\twith open(file_name, 'w') as file:\n\t    json.dump(data, file)\n\tprint('Wrote JSON data to {}'.format(file_name))\n\twith open(file_name, 'r') as file:\n", "    loaded_data = json.load(file)\n\tprint('Read JSON data from {}:'.format(file_name))\n\tprint(loaded_data)"]}
{"filename": "example/11_example_std_library.py", "chunked_list": ["import os\n\t# Get the current working directory\n\tcwd = os.getcwd()\n\tprint(f\"Current working directory: {cwd}\")\n\t# List files and directories in the current directory\n\tprint(\"Files and directories in the current directory:\")\n\tfor item in os.listdir(cwd):\n\t    print(item)\n\t# Create a new directory\n\tnew_dir = \"example_directory\"\n", "os.makedirs(new_dir, exist_ok=True)\n\tprint(f\"Created new directory: {new_dir}\")\n\t# Rename the directory\n\tnew_name = \"renamed_directory\"\n\tos.rename(new_dir, new_name)\n\tprint(f\"Renamed directory from {new_dir} to {new_name}\")\n\t# Remove the directory\n\tos.rmdir(new_name)\n\tprint(f\"Removed directory: {new_name}\")\n\timport shutil\n", "src_file = \"source.txt\"\n\tdst_file = \"destination.txt\"\n\t# Copy a file\n\tshutil.copy(src_file, dst_file)\n\tprint(f\"Copied {src_file} to {dst_file}\")\n\t# Move a file\n\tnew_location = \"moved.txt\"\n\tshutil.move(dst_file, new_location)\n\tprint(f\"Moved {dst_file} to {new_location}\")\n\t# Remove a file\n", "os.remove(new_location)\n\tprint(f\"Removed file: {new_location}\")\n\timport glob\n\t# Find all Python files in the current directory\n\tprint(\"Python files in the current directory:\")\n\tfor py_file in glob.glob(\"*.py\"):\n\t    print(py_file)\n\timport tempfile\n\t# Create a temporary file and write content to it\n\twith tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as temp_file:\n", "    temp_file.write(\"Hello, World!\")\n\t    temp_path = temp_file.name\n\t    print(f\"Created temporary file: {temp_path}\")\n\t# Read the content of the temporary file\n\twith open(temp_path, \"r\") as temp_file:\n\t    content = temp_file.read()\n\t    print(f\"Content of the temporary file: {content}\")\n\t# Remove the temporary file\n\tos.remove(temp_path)\n\tprint(f\"Removed temporary file: {temp_path}\")\n"]}
{"filename": "example/08_example_modules_packages.py", "chunked_list": ["from animals.mammals import get_mammals, get_mammal_info\n\tdef main():\n\t    mammals = get_mammals()\n\t    print(\"Mammals:\")\n\t    for mammal in mammals:\n\t        print(mammal)\n\t    print(\"\\nMammal info:\")\n\t    for mammal in mammals:\n\t        print(get_mammal_info(mammal))\n\tif __name__ == \"__main__\":\n", "    main()\n"]}
{"filename": "example/07_decompiled_example_classes_objects.py", "chunked_list": ["class Animal:\n\t    def __init__(self, name, age):\n\t        self.name = name\n\t        self.age = age\n\t    def speak(self):\n\t        print(f\"{self.name} makes a generic animal sound.\")\n\t    def describe(self):\n\t        print(f\"{self.name} is {self.age} years old.\")\n\tclass Dog(Animal):\n\t    def __init__(self, name, age, breed):\n", "        super().__init__(name, age)\n\t        self.breed = breed\n\t    def speak(self):\n\t        print(f\"{self.name} barks!\")\n\t    def describe_breed(self):\n\t        print(f\"{self.name} is a {self.breed}.\")\n\tclass Cat(Animal):\n\t    def __init__(self, name, age, color):\n\t        super().__init__(name, age)\n\t        self.color = color\n", "    def speak(self):\n\t        print(f\"{self.name} meows!\")\n\t    def describe_color(self):\n\t        print(f\"{self.name} has a {self.color} coat.\")\n\tanimal = Animal(\"Generic animal\", 3)\n\tdog = Dog(\"Buddy\", 5, \"Golden Retriever\")\n\tcat = Cat(\"Whiskers\", 7, \"black\")\n\tanimal.speak()\n\tanimal.describe()\n\tdog.speak()\n", "dog.describe()\n\tdog.describe_breed()\n\tcat.speak()\n\tcat.describe()\n\tcat.describe_color()"]}
{"filename": "example/06_decompiled_example_functions.py", "chunked_list": ["global_var = \"I'm a global variable\"\n\tdef outer_function():\n\t    outer_local_var = \"I'm a local variable in the outer function\"\n\t    def inner_function():\n\t        inner_local_var = \"I'm a local variable in the inner function\"\n\t        print(\"Inner function: \", inner_local_var)\n\t        print(\"Inner function: \", outer_local_var)\n\t        print(\"Inner function: \", global_var)\n\t    print(\"Outer function: \", outer_local_var)\n\t    print(\"Outer function: \", global_var)\n", "    inner_function()\n\tdef calculate(operation, a, b):\n\t    if operation == 'add':\n\t        return a + b\n\t    elif operation == 'subtract':\n\t        return a - b\n\t    elif operation == 'multiply':\n\t        return a * b\n\t    elif operation == 'divide':\n\t        return a / b\n", "    else:\n\t        return None\n\tmultiply = lambda x, y: x * y\n\tprint(calculate('add', 4, 5))\n\tprint(multiply(3, 4))"]}
{"filename": "example/03_example_if_else.py", "chunked_list": ["age = 25\n\tcountry = \"USA\"\n\tjob_status = \"employed\"\n\tfavorite_color = \"blue\"\n\tif age < 18 or (country == \"USA\" and favorite_color == \"blue\"):\n\t    if job_status == \"employed\":\n\t        print(\"Minor or USA + blue, employed.\")\n\t    elif job_status == \"unemployed\":\n\t        print(\"Minor or USA + blue, unemployed.\")\n\t    else:\n", "        print(\"Minor or USA + blue, other status.\")\n\telse:\n\t    if job_status == \"employed\":\n\t        if country != \"USA\" or favorite_color != \"blue\":\n\t            print(\"Not minor, not USA + blue, employed.\")\n\t    elif job_status == \"unemployed\":\n\t        if (country != \"USA\") ^ (favorite_color != \"blue\"):\n\t            print(\"Not minor, not USA + blue, unemployed.\")\n\t    else:\n\t        print(\"Not minor, not USA + blue, other status.\")\n"]}
{"filename": "example/06_example_functions.py", "chunked_list": ["global_var = \"I'm a global variable\"\n\tdef outer_function():\n\t    outer_local_var = \"I'm a local variable in the outer function\"\n\t    def inner_function():\n\t        nonlocal outer_local_var\n\t        inner_local_var = \"I'm a local variable in the inner function\"\n\t        print(f\"Inner function: {inner_local_var}\")\n\t        print(f\"Inner function: {outer_local_var}\")\n\t        print(f\"Inner function: {global_var}\")\n\t    print(f\"Outer function: {outer_local_var}\")\n", "    print(f\"Outer function: {global_var}\")\n\t    inner_function()\n\tdef calculate(operation, a, b):\n\t    if operation == \"add\":\n\t        return a + b\n\t    elif operation == \"subtract\":\n\t        return a - b\n\t    elif operation == \"multiply\":\n\t        return a * b\n\t    elif operation == \"divide\":\n", "        return a / b\n\t    else:\n\t        return None\n\t# Test the outer_function\n\touter_function()\n\t# Test the calculate function\n\tprint(calculate(\"add\", 4, 5))\n\t# Lambda function example\n\tmultiply = lambda x, y: x * y\n\tprint(multiply(3, 4))\n"]}
{"filename": "example/07_example_classes_objects.py", "chunked_list": ["class Animal:\n\t    def __init__(self, name, age):\n\t        self.name = name\n\t        self.age = age\n\t    def speak(self):\n\t        print(f\"{self.name} makes a generic animal sound.\")\n\t    def describe(self):\n\t        print(f\"{self.name} is {self.age} years old.\")\n\tclass Dog(Animal):\n\t    def __init__(self, name, age, breed):\n", "        super().__init__(name, age)\n\t        self.breed = breed\n\t    def speak(self):\n\t        print(f\"{self.name} barks!\")\n\t    def describe_breed(self):\n\t        print(f\"{self.name} is a {self.breed}.\")\n\tclass Cat(Animal):\n\t    def __init__(self, name, age, color):\n\t        super().__init__(name, age)\n\t        self.color = color\n", "    def speak(self):\n\t        print(f\"{self.name} meows!\")\n\t    def describe_color(self):\n\t        print(f\"{self.name} has a {self.color} coat.\")\n\t# Creating objects\n\tanimal = Animal(\"Generic animal\", 3)\n\tdog = Dog(\"Buddy\", 5, \"Golden Retriever\")\n\tcat = Cat(\"Whiskers\", 7, \"black\")\n\t# Calling methods on objects\n\tanimal.speak()\n", "animal.describe()\n\tdog.speak()\n\tdog.describe()\n\tdog.describe_breed()\n\tcat.speak()\n\tcat.describe()\n\tcat.describe_color()\n"]}
{"filename": "src/pychd/main.py", "chunked_list": ["import argparse\n\timport logging\n\tfrom logging.config import fileConfig\n\tfrom pathlib import Path\n\tfrom . import compile, decompile\n\tdef parse_args() -> argparse.Namespace:\n\t    # create the top-level parser\n\t    parser = argparse.ArgumentParser(\n\t        description=\"Decompile|Compile Python source files into bytecode.\"\n\t    )\n", "    subparsers = parser.add_subparsers(dest=\"command\", required=True)\n\t    # create the parser for the \"decompile\" command\n\t    parser_decompile = subparsers.add_parser(\n\t        \"decompile\", help=\"Decompile Python source files into bytecode.\"\n\t    )\n\t    parser_decompile.add_argument(\"path\", help=\"Path to decompile\", type=str)\n\t    parser_decompile.add_argument(\n\t        \"-o\", \"--output\", help=\"Output path\", type=str, required=False\n\t    )\n\t    # create the parser for the \"compile\" command\n", "    parser_compile = subparsers.add_parser(\n\t        \"compile\", help=\"Compile Python source files into bytecode.\"\n\t    )\n\t    parser_compile.add_argument(\"path\", help=\"Path to compile\", type=str)\n\t    return parser.parse_args()\n\tdef setup(logging_path: Path) -> None:\n\t    fileConfig(logging_path)\n\tdef cli() -> None:\n\t    logging_config = Path(__file__).parent / \"logging.conf\"\n\t    if logging_config.exists():\n", "        setup(logging_config)\n\t    args = parse_args()\n\t    logging.info(args)\n\t    if args.command == \"compile\":\n\t        to_compile = Path(args.path)\n\t        compile.compile(to_compile=to_compile)\n\t    elif args.command == \"decompile\":\n\t        to_decompile = Path(args.path)\n\t        output_path = Path(args.output) if args.output else None\n\t        decompile.decompile(to_decompile=to_decompile, output_path=output_path)\n", "def main() -> None:\n\t    cli()\n\tif __name__ == \"__main__\":\n\t    main()\n"]}
{"filename": "src/pychd/__init__.py", "chunked_list": []}
{"filename": "src/pychd/compile.py", "chunked_list": ["import argparse\n\timport compileall\n\timport logging\n\timport py_compile\n\tfrom pathlib import Path\n\tdef parse_args() -> argparse.Namespace:\n\t    parser = argparse.ArgumentParser(\n\t        description=\"Compile Python source files into bytecode.\",\n\t        epilog=\"Example: python generate_bytecode.py\",\n\t    )\n", "    parser.add_argument(\"directory\", help=\"Directory to compile\", type=str)\n\t    return parser.parse_args()\n\tdef compile(to_compile: Path) -> None:\n\t    if to_compile.is_dir():\n\t        logging.info(\"Compiling Python source files...\")\n\t        compileall.compile_dir(to_compile)\n\t    else:\n\t        logging.info(\"Compiling Python source file...\")\n\t        py_compile.compile(str(to_compile))\n"]}
{"filename": "src/pychd/decompile.py", "chunked_list": ["import dis\n\timport io\n\timport logging\n\timport marshal\n\timport sys\n\timport textwrap\n\tfrom pathlib import Path\n\tfrom typing import Optional\n\timport openai\n\tfrom pytype.pyc.magic import magic_word_to_version\n", "def disassemble_pyc_file(pyc_file: Path) -> str:\n\t    with open(pyc_file, \"rb\") as f:\n\t        # Read the first 16 bytes, which contain the magic number, timestamp, and size\n\t        _header = f.read(16)\n\t        magic_word = _header[:2]\n\t        pyc_major_version, pyc_minor_version = magic_word_to_version(magic_word)\n\t        py_major_version, py_minor_version, _, _, _ = sys.version_info\n\t        if not (\n\t            pyc_major_version == py_major_version\n\t            and pyc_minor_version == py_minor_version\n", "        ):\n\t            print(\"Python bytecode uses and your Python version are incompatible\")\n\t            sys.exit(1)\n\t        logging.info(\n\t            f\"Python bytecode uses Python {py_major_version}.{py_minor_version}\"\n\t        )\n\t        # Read the remaining bytecode\n\t        bytecode = marshal.load(f)\n\t    original_stdout = sys.stdout\n\t    string_output = io.StringIO()\n", "    sys.stdout = string_output\n\t    dis.dis(bytecode)\n\t    sys.stdout = original_stdout\n\t    disassembled_pyc = string_output.getvalue()\n\t    logging.info(\n\t        textwrap.dedent(\n\t            f\"\"\"\\\n\t      ️⭐⭐⭐Disassembled Python bytecode⭐⭐⭐\\n{disassembled_pyc}\n\t      \"\"\"\n\t        )\n", "    )\n\t    return str(disassembled_pyc)\n\tdef decompile_disassembled_pyc(disassembled_pyc: str) -> str:\n\t    model = \"gpt-3.5-turbo\"\n\t    temperature = 0.7\n\t    user_prompt = textwrap.dedent(\n\t        f\"\"\"\\\n\t        You are a Python decompiler.\n\t        You will be given a disassembled Python bytecode.\n\t        Decompile it into the original source code.\n", "        Output only the original full source code.\n\t        Do not the natural language description.\n\t        Do not surround the code with triple quotes such as '```' or '```python'.\n\t        ```\n\t        {disassembled_pyc}\n\t        ```\n\t        \"\"\"\n\t    )\n\t    response = openai.ChatCompletion.create(\n\t        model=model,\n", "        temperature=temperature,\n\t        messages=[{\"role\": \"user\", \"content\": user_prompt}],\n\t    )\n\t    logging.info(f\"{response=}\")\n\t    generated_text: str = response.choices[0].message.content\n\t    logging.info(f\"{generated_text=}\")\n\t    return generated_text\n\tdef decompile(to_decompile: Path, output_path: Optional[Path]) -> None:\n\t    logging.info(\"Disassembling Python bytecode file...\")\n\t    input_pyc_file = to_decompile\n", "    logging.info(f\"Input Python bytecode file: {input_pyc_file}\")\n\t    disassembled_pyc = disassemble_pyc_file(input_pyc_file)\n\t    logging.info(\"Decompiling disassembled Python bytecode...\")\n\t    decompiled_py = decompile_disassembled_pyc(disassembled_pyc)\n\t    # if no path is specified, print to stdout\n\t    if not output_path:\n\t        logging.info(\"No output path specified. Printing to stdout...\")\n\t        print(decompiled_py)\n\t        return\n\t    # if path is specified, write to file\n", "    with open(output_path, \"w\") as f:\n\t        f.write(decompiled_py)\n\t    logging.info(f\"Decompiled Python source code written to: {output_path}\")\n"]}
