{"filename": "SynLens/import_lenses.py", "chunked_list": ["import xmltodict\n\timport os, math\n\tfrom renderer import process_mesh\n\tfrom matplotlib import cm\n\timport matplotlib.pyplot as plt\n\tfrom PIL import Image\n\timport numpy as np\n\tdef parse_lenses_xml(xml_path):\n\t    with open(xml_path, 'r', encoding='utf-8') as file:\n\t        my_xml = file.read()\n", "    # Use xmltodict to parse and convert the XML document\n\t    lens_dict = xmltodict.parse(my_xml)\n\t    lenses = lens_dict.get(\"lensdatabase\", {}).get(\"lens\", [])\n\t    lenses_data = []\n\t    for i, lens_model in enumerate(lenses):\n\t        if \"calibration\" not in lens_model or not lens_model[\"calibration\"]:\n\t            continue\n\t        calibration = lens_model[\"calibration\"]\n\t        sensor_width = 36.0 / float(lens_model.get(\"cropfactor\", 1.0))\n\t        focal_length = None\n", "        fov = None\n\t        if \"distortion\" in calibration:\n\t            distortions = calibration[\"distortion\"]\n\t            if not isinstance(distortions, list):\n\t                distortions = [distortions]\n\t            for distortion in distortions:\n\t                if \"@model\" not in distortion:\n\t                    continue\n\t                if distortion[\"@model\"] == \"poly3\":\n\t                    if \"@k1\" not in distortion:\n", "                        continue\n\t                    coeffs = [0., float(distortion[\"@k1\"]), 0.]\n\t                    lens_type = \"brown\"\n\t                elif distortion[\"@model\"] == \"ptlens\":\n\t                    if \"@a\" not in distortion or \"@b\" not in distortion or \"@c\" not in distortion:\n\t                        continue\n\t                    coeffs = [float(distortion[\"@a\"]), float(distortion[\"@b\"]), float(distortion[\"@c\"])]\n\t                    lens_type = \"abc\"\n\t                elif distortion[\"@model\"] == \"poly5\":\n\t                    if \"@k1\" not in distortion or \"@k2\" not in distortion:\n", "                        continue\n\t                    coeffs = [float(distortion[\"@k1\"]), float(distortion[\"@k2\"]), 0.]\n\t                    lens_type = \"brown\"\n\t                else:\n\t                    continue\n\t                focal_length = float(distortion[\"@focal\"])\n\t                fov = 2 * math.atan(sensor_width / (2 * focal_length)) * (180 / math.pi)\n\t                if fov is not None and 60 <= fov <= 80:\n\t                    lens_model_dict = {\n\t                        \"sensor_width\": sensor_width,\n", "                        \"model_name\": str(i),\n\t                        \"focal\": fov,\n\t                        \"coeffs\": coeffs,\n\t                        \"lens_type\": lens_type\n\t                    }\n\t                    lenses_data.append(lens_model_dict)\n\t                    break\n\t        elif \"vignetting\" in calibration:\n\t            vignetting = calibration[\"vignetting\"]\n\t    return lenses_data\n", "def visualize(k1, k2, k3, lens_name):\n\t    cmap = cm.get_cmap('hsv')\n\t    H, W = 15, 15\n\t    radial = np.array([[(j + 0.5, i + 0.5) for j in range(W * 20)] for i in range(H * 20)])\n\t    radial_dist = (radial - np.array([[W * 10, H * 10]])) / np.array([[W * 10, H * 10]])\n\t    r2 = radial_dist ** 2\n\t    r2 = r2[:, :, 0] + r2[:, :, 1]\n\t    vis = r2*(1 + k1*r2**2 + k2*r2**4 + k3*r2**6)\n\t    norm = vis / np.abs(vis).max()\n\t    ori = np.array([[-(np.arctan(radial_dist[i,j,1] / radial_dist[i,j,0]) ) for j in range(W*20)] for i in range(H*20)])\n", "    ori[:, 0:W*10] = np.pi + ori[:, 0:W*10]\n\t    ori[H*10:H*20, W*10:W*20] = 2 * np.pi + ori[H*10:H*20, W*10:W*20]\n\t    ori = ori / ori.max()\n\t    color = np.array([[cmap(ori[i][j]) for j in range(W*20)]for i in range(H * 20)])\n\t    norm = norm ** 0.7\n\t    color_dist = color * norm[:, :, None]\n\t    img = Image.fromarray((color_dist[:, :, :3] * 255).astype(np.uint8))\n\t    img.save(\"db_frames_vis/\" + lens_name + \"_colordist.png\")\n\tif __name__ == \"__main__\":\n\t    db_dir = 'db/'\n", "    lens_type = 'abc'\n\t    num_views = 50\n\t    image_size = 512\n\t    render_rgb = True\n\t    out_fd = \"db_output\"\n\t    for xml_path in os.listdir(db_dir):\n\t        if xml_path.endswith(\".xml\"):\n\t            lens_name = xml_path.split(\"/\")[-1][:-4]\n\t            lenses_data = parse_lenses_xml(os.path.join(db_dir,xml_path))\n\t            for i in range(len(lenses_data)):\n", "                if lenses_data[i][\"lens_type\"] == lens_type:\n\t                    process_mesh(lenses_data[i], lens_name, num_views, image_size, render_rgb, out_fd)\n"]}
{"filename": "SynLens/lens_distortion.py", "chunked_list": ["import numpy as np\n\timport json\n\timport torch\n\timport torch.nn.functional as F\n\timport matplotlib.pyplot as plt\n\tdef invert_function(x, func):\n\t    from scipy import interpolate\n\t    from scipy.interpolate import dfitpack\n\t    y = func(x)\n\t    dy = np.concatenate(([0], np.diff(y)))\n", "    y = y[dy>=0]\n\t    x = x[dy>=0]\n\t    try:\n\t        inter = interpolate.InterpolatedUnivariateSpline(y, x)\n\t    # dfitpack.error\n\t    except Exception: # pragma: no cover\n\t        inter = lambda x: x\n\t    return inter\n\tclass LensDistortion():  # pragma: no cover\n\t    def __init__(self):\n", "        offset = np.array([0, 0])\n\t        scale = 1\n\t    def imageFromDistorted(self, points):\n\t        # return the points as they are\n\t        return points\n\t    def distortedFromImage(self, points):\n\t        # return the points as they are\n\t        return points\n\t    def undistortImage(self, image):\n\t        return image\n", "class NoDistortion(LensDistortion):\n\t    \"\"\"\n\t    The default model for the lens distortion which does nothing.\n\t    \"\"\"\n\t    pass\n\tclass Vignetting(LensDistortion):\n\t    def __init__(self, k1=None, k2=None, k3=None, projection=None):\n\t        self.k1 = k1\n\t        self.k2 = k2\n\t        self.k3 = k3\n", "        self.projection = projection\n\t        if projection is not None:\n\t            self.image_width_px = projection['image_width_px']\n\t            self.image_height_px = projection['image_height_px']\n\t            self.center_x_px = projection['center_x_px']\n\t            self.center_y_px = projection['center_y_px']\n\t            self.scale = np.min([self.image_width_px, self.image_height_px]) / 2\n\t            self.offset = np.array([self.center_x_px, self.center_y_px])\n\t    def _convert_radius(self, r):\n\t        return 1 + self.k1*r**2 + self.k2*r**4 + self.k3*r**6\n", "    def compute_intensity(self, points, intensity):\n\t        # ensure that the points are provided as an array\n\t        # and rescale the points to that the center is at 0 and the border at 1\n\t        points = (np.array(points)-self.offset)/self.scale\n\t        # calculate the radius form the center\n\t        r = np.linalg.norm(points, axis=-1)[..., None]\n\t        r = r / r.max()\n\t        # scale the intensities\n\t        r_t =  torch.from_numpy(self._convert_radius(r)).T\n\t        intensity = intensity * r_t\n", "        return intensity\n\t    def vignet(self, image):\n\t        x, y = torch.meshgrid([torch.arange(0, self.image_width_px),\n\t                    torch.arange(0, self.image_height_px)], indexing='ij')\n\t        x = x.float() + 0.5\n\t        y = y.float() + 0.5\n\t        coord = torch.cat((y.unsqueeze(-1), x.unsqueeze(-1)), 2).view(-1, 2)\n\t        image = image.permute(2,0,1)\n\t        vignet_image = self.compute_intensity(coord, image.view(3, -1)).reshape(3, self.image_width_px, self.image_height_px)\n\t        return vignet_image.permute(1,2,0)\n", "class BrownLensDistortion(LensDistortion):\n\t    r\"\"\"\n\t    The most common distortion model is the Brown's distortion model. In CameraTransform, we only consider the radial part\n\t    of the model, as this covers all common cases and the merit of tangential components is disputed. This model relies on\n\t    transforming the radius with even polynomial powers in the coefficients :math:`k_1, k_2, k_3`. This distortion model is\n\t    e.g. also used by OpenCV or AgiSoft PhotoScan.\n\t    Adjust scale and offset of x and y to be relative to the center:\n\t    .. math::\n\t        x' &= \\frac{x-c_x}{f_x}\\\\\n\t        y' &= \\frac{y-c_y}{f_y}\n", "    Transform the radius from the center with the distortion:\n\t    .. math::\n\t        r &= \\sqrt{x'^2 + y'^2}\\\\\n\t        r' &= r \\cdot (1 + k_1 \\cdot r^2 + k_2 \\cdot r^4 + k_3 \\cdot r^6)\\\\\n\t        x_\\mathrm{distorted}' &= x' / r \\cdot r'\\\\\n\t        y_\\mathrm{distorted}' &= y' / r \\cdot r'\n\t    Readjust scale and offset to obtain again pixel coordinates:\n\t    .. math::\n\t        x_\\mathrm{distorted} &= x_\\mathrm{distorted}' \\cdot f_x + c_x\\\\\n\t        y_\\mathrm{distorted} &= y_\\mathrm{distorted}' \\cdot f_y + c_y\n", "    \"\"\"\n\t    projection = None\n\t    def __init__(self, k1=None, k2=None, k3=None, projection=None):\n\t        self.k1 = k1\n\t        self.k2 = k2\n\t        self.k3 = k3\n\t        self.projection = projection\n\t        if projection is not None:\n\t            self.image_width_px = projection['image_width_px']\n\t            self.image_height_px = projection['image_height_px']\n", "            self.center_x_px = projection['center_x_px']\n\t            self.center_y_px = projection['center_y_px']\n\t        self._init_inverse()\n\t    def _init_inverse(self):\n\t        r = np.arange(0, 2, 0.1)\n\t        self._convert_radius_inverse = invert_function(r, self._convert_radius)\n\t        if self.projection is not None:\n\t            self.scale = np.min([self.image_width_px, self.image_height_px]) / 2\n\t            self.offset = np.array([self.center_x_px, self.center_y_px])\n\t        else:\n", "            self.scale = 1\n\t            self.offset = np.array([0, 0])\n\t    def _convert_radius(self, r):\n\t        return r*(1 + self.k1*r**2 + self.k2*r**4 + self.k3*r**6)\n\t    def imageFromDistorted(self, points):\n\t        # ensure that the points are provided as an array\n\t        # and rescale the points to that the center is at 0 and the border at 1\n\t        points = (np.array(points)-self.offset)/self.scale\n\t        # calculate the radius form the center\n\t        r = np.linalg.norm(points, axis=-1)[..., None]\n", "        # transform the points\n\t        points = points / r * self._convert_radius_inverse(r)\n\t        # rescale back to the image\n\t        return points * self.scale + self.offset\n\t    def distortedFromImage(self, points):\n\t        # ensure that the points are provided as an array\n\t        # and rescale the points to that the center is at 0 and the border at 1\n\t        points = (np.array(points)-self.offset)/self.scale\n\t        # calculate the radius form the center\n\t        r = np.linalg.norm(points, axis=-1)[..., None]\n", "        # transform the points\n\t        points = points / r * self._convert_radius(r)\n\t        # rescale back to the image\n\t        return points * self.scale + self.offset\n\t    def distortImage(self, image):\n\t        x, y = torch.meshgrid([torch.arange(0, self.image_width_px),\n\t                    torch.arange(0, self.image_height_px)], indexing='ij')\n\t        x = x.float() + 0.5\n\t        y = y.float() + 0.5\n\t        coord = torch.cat((y.unsqueeze(-1), x.unsqueeze(-1)), 2).view(-1, 2)\n", "        grid = self.imageFromDistorted(coord).reshape(self.image_width_px, self.image_height_px, 2)\n\t        image_size_xy = torch.tensor([self.image_height_px, self.image_width_px])\n\t        grid = (grid / image_size_xy.view(1, 1, 2)) * 2 - 1\n\t        image = image.permute(2,0,1)\n\t        distort_image = F.grid_sample(image.float().unsqueeze(0), grid.float().unsqueeze(0), align_corners=False, padding_mode=\"border\")[0]\n\t        distort_image = distort_image.permute(1,2,0)\n\t        return distort_image\n\tclass ABCDistortion(LensDistortion):\n\t    r\"\"\"\n\t    The ABC model is a less common distortion model, that just implements radial distortions. Here the radius is transformed\n", "    using a polynomial of 4th order. It is used e.g. in PTGui.\n\t    Adjust scale and offset of x and y to be relative to the center:\n\t    .. math::\n\t        s &= 0.5 \\cdot \\mathrm{min}(\\mathrm{im}_\\mathrm{width}, \\mathrm{im}_\\mathrm{height})\\\\\n\t        x' &= \\frac{x-c_x}{s}\\\\\n\t        y' &= \\frac{y-c_y}{s}\n\t    Transform the radius from the center with the distortion:\n\t    .. math::\n\t        r &= \\sqrt{x^2 + y^2}\\\\\n\t        r' &= d \\cdot r + c \\cdot r^2 + b \\cdot r^3 + a \\cdot r^4\\\\\n", "        d &= 1 - a - b - c\n\t    Readjust scale and offset to obtain again pixel coordinates:\n\t    .. math::\n\t        x_\\mathrm{distorted} &= x_\\mathrm{distorted}' \\cdot s + c_x\\\\\n\t        y_\\mathrm{distorted} &= y_\\mathrm{distorted}' \\cdot s + c_y\n\t    \"\"\"\n\t    projection = None\n\t    def __init__(self, a=None, b=None, c=None, projection=None):\n\t        self.a = a\n\t        self.b = b\n", "        self.c = c\n\t        self.projection = projection\n\t        if projection is not None:\n\t            self.image_width_px = projection['image_width_px']\n\t            self.image_height_px = projection['image_height_px']\n\t            self.center_x_px = projection['center_x_px']\n\t            self.center_y_px = projection['center_y_px']\n\t        self._init_inverse()\n\t    def _init_inverse(self):\n\t        self.d = 1 - self.a - self.b - self.c\n", "        r = np.arange(0, 2, 0.1)\n\t        self._convert_radius_inverse = invert_function(r, self._convert_radius)\n\t        if self.projection is not None:\n\t            self.scale = np.min([self.image_width_px, self.image_height_px]) / 2\n\t            self.offset = np.array([self.center_x_px, self.center_y_px])\n\t        else:\n\t            self.scale = 1\n\t            self.offset = np.array([0, 0])\n\t    def _convert_radius(self, r):\n\t        return self.d * r + self.c * r**2 + self.b * r**3 + self.a * r**4\n", "    def imageFromDistorted(self, points):\n\t        # ensure that the points are provided as an array\n\t        # and rescale the points to that the center is at 0 and the border at 1\n\t        points = (np.array(points)-self.offset)/self.scale\n\t        # calculate the radius form the center\n\t        r = np.linalg.norm(points, axis=-1)[..., None]\n\t        # transform the points\n\t        points = points / r * self._convert_radius_inverse(r)\n\t        # rescale back to the image\n\t        return points * self.scale + self.offset\n", "    def distortedFromImage(self, points):\n\t        # ensure that the points are provided as an array\n\t        # and rescale the points to that the center is at 0 and the border at 1\n\t        points = (np.array(points)-self.offset)/self.scale\n\t        # calculate the radius form the center\n\t        r = np.linalg.norm(points, axis=-1)[..., None]\n\t        # transform the points\n\t        points = points / r * self._convert_radius(r)\n\t        # rescale back to the image\n\t        return points * self.scale + self.offset\n", "    def distortImage(self, image):\n\t        x, y = torch.meshgrid([torch.arange(0, self.image_width_px),\n\t                    torch.arange(0, self.image_height_px)], indexing='ij')\n\t        x = x.float() + 0.5\n\t        y = y.float() + 0.5\n\t        coord = torch.cat((y.unsqueeze(-1), x.unsqueeze(-1)), 2).view(-1, 2)\n\t        grid = self.imageFromDistorted(coord).reshape(self.image_width_px, self.image_height_px, 2)\n\t        image_size_xy = torch.tensor([self.image_height_px, self.image_width_px])\n\t        grid = (grid / image_size_xy.view(1, 1, 2)) * 2 - 1\n\t        image = image.permute(2,0,1)\n", "        distort_image = F.grid_sample(image.float().unsqueeze(0), grid.float().unsqueeze(0), align_corners=False, padding_mode=\"border\")[0]\n\t        distort_image = distort_image.permute(1,2,0)\n\t        return distort_image\n"]}
{"filename": "SynLens/renderer.py", "chunked_list": ["import os\n\timport torch\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\timport json\n\timport imageio\n\timport math\n\t# Util function for loading meshes\n\tfrom pytorch3d.io import load_objs_as_meshes, save_obj\n\tfrom pytorch3d.loss import (\n", "    chamfer_distance,\n\t    mesh_edge_loss,\n\t    mesh_laplacian_smoothing,\n\t    mesh_normal_consistency,\n\t)\n\timport torch.nn.functional as F\n\t# Data structures and functions for rendering\n\tfrom pytorch3d.structures import Meshes\n\tfrom pytorch3d.renderer import (\n\t    look_at_view_transform,\n", "    FoVPerspectiveCameras,\n\t    PointLights,\n\t    TexturesUV,\n\t    DirectionalLights,\n\t    Materials,\n\t    RasterizationSettings,\n\t    MeshRenderer,\n\t    MeshRasterizer,\n\t    SoftPhongShader,\n\t    SoftSilhouetteShader,\n", "    SoftPhongShader,\n\t    TexturesVertex,\n\t    HardPhongShader\n\t)\n\t# add path for demo utils functions\n\timport sys\n\timport os\n\tsys.path.append(os.path.abspath(''))\n\t# Setup\n\tif torch.cuda.is_available():\n", "    device = torch.device(\"cuda:0\")\n\t    torch.cuda.set_device(device)\n\t    print(\"cuda is available.\")\n\telse:\n\t    device = torch.device(\"cpu\")\n\tclass NumpyEncoder(json.JSONEncoder):\n\t    \"\"\"Special json encoder for numpy types\"\"\"\n\t    def default(self, obj):\n\t        if isinstance(obj, np.integer):\n\t            return int(obj)\n", "        elif isinstance(obj, np.floating):\n\t            return float(obj)\n\t        elif isinstance(obj, np.ndarray):\n\t            return obj.tolist()\n\t        return json.JSONEncoder.default(self, obj)\n\tdef camera_arrays(target_cameras, image_size):\n\t    n_sample = 24\n\t    i, j = np.meshgrid(\n\t        np.linspace(-1, 1, n_sample),\n\t        np.linspace(-1, 1, n_sample),\n", "        indexing=\"ij\",\n\t    )\n\t    i = i.T\n\t    j = j.T\n\t    P_sensor = torch.from_numpy(np.stack((i, j), axis=-1)).float()\n\t    P_sensor_flat = P_sensor.reshape((-1, 2))\n\t    P_world = torch.cat((P_sensor_flat, torch.ones((P_sensor_flat.shape[0], 1))), dim=1)\n\t    world_coords = torch.cat((P_sensor_flat, torch.zeros((P_sensor_flat.shape[0], 1))), dim=1)\n\t    world_coords = world_coords.reshape((-1, 3)).numpy()\n\t    x_coords = []\n", "    y_coords = []\n\t    for cameras in target_cameras:\n\t        ndc_points = cameras.transform_points_ndc(P_world)\n\t        camera_points = cameras.transform_points(P_world)\n\t        screen_points = cameras.transform_points_screen(P_world, image_size=(image_size, image_size))\n\t        x_coords.append(screen_points[:,0])\n\t        y_coords.append(screen_points[:,1])\n\t    x_coords = torch.stack(x_coords).cpu().numpy()\n\t    y_coords = torch.stack(y_coords).cpu().numpy()\n\t    return (x_coords, y_coords, world_coords)\n", "def image_grid(\n\t    images,\n\t    rows=None,\n\t    cols=None,\n\t    fill: bool = True,\n\t    show_axes: bool = False,\n\t    rgb: bool = True,\n\t):\n\t    \"\"\"\n\t    A util function for plotting a grid of images.\n", "    Args:\n\t        images: (N, H, W, 4) array of RGBA images\n\t        rows: number of rows in the grid\n\t        cols: number of columns in the grid\n\t        fill: boolean indicating if the space between images should be filled\n\t        show_axes: boolean indicating if the axes of the plots should be visible\n\t        rgb: boolean, If True, only RGB channels are plotted.\n\t            If False, only the alpha channel is plotted.\n\t    Returns:\n\t        None\n", "    \"\"\"\n\t    if (rows is None) != (cols is None):\n\t        raise ValueError(\"Specify either both rows and cols or neither.\")\n\t    if rows is None:\n\t        rows = len(images)\n\t        cols = 1\n\t    gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0} if fill else {}\n\t    fig, axarr = plt.subplots(rows, cols, gridspec_kw=gridspec_kw, figsize=(15, 9))\n\t    bleed = 0\n\t    fig.subplots_adjust(left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed))\n", "    for ax, im in zip(axarr.ravel(), images):\n\t        if rgb:\n\t            # only render RGB channels\n\t            ax.imshow(im[..., :3])\n\t        else:\n\t            # only render Alpha channel\n\t            ax.imshow(im[..., 3])\n\t        if not show_axes:\n\t            ax.set_axis_off()\n\tdef image_grid_vis(\n", "    images,\n\t    x_coords,\n\t    y_coords,\n\t    rows=None,\n\t    cols=None,\n\t    fill: bool = True,\n\t    show_axes: bool = False,\n\t    rgb: bool = True,\n\t):\n\t    \"\"\"\n", "    A util function for plotting a grid of images.\n\t    Args:\n\t        images: (N, H, W, 4) array of RGBA images\n\t        rows: number of rows in the grid\n\t        cols: number of columns in the grid\n\t        fill: boolean indicating if the space between images should be filled\n\t        show_axes: boolean indicating if the axes of the plots should be visible\n\t        rgb: boolean, If True, only RGB channels are plotted.\n\t            If False, only the alpha channel is plotted.\n\t    Returns:\n", "        None\n\t    \"\"\"\n\t    if (rows is None) != (cols is None):\n\t        raise ValueError(\"Specify either both rows and cols or neither.\")\n\t    if rows is None:\n\t        rows = len(images)\n\t        cols = 1\n\t    gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0} if fill else {}\n\t    fig, axarr = plt.subplots(rows, cols, gridspec_kw=gridspec_kw, figsize=(15, 9))\n\t    bleed = 0\n", "    fig.subplots_adjust(left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed))\n\t    for ax, im, coord_x, coord_y in zip(axarr.ravel(), images, x_coords, y_coords):\n\t        ax.imshow(im[..., :3])\n\t        ax.scatter(coord_x, coord_y, marker='o', s=8, color='red')\n\t        if not show_axes:\n\t            ax.set_axis_off()\n\tdef render_plane():\n\t    # Define the texture and create a TexturesVertex object\n\t    texture_image = plt.imread('target_mesh/target.png')\n\t    texture_image = texture_image[:, :, :3]  # remove alpha channel\n", "    texture_image = torch.from_numpy(texture_image)\n\t    texture_image = texture_image.permute(2, 0, 1).float() / 255.0\n\t    texture_image = torch.unsqueeze(texture_image, dim=0)\n\t    verts_uvs = torch.tensor([\n\t        [0.0, 0.0],\n\t        [1.0, 0.0],\n\t        [1.0, 1.0],\n\t        [0.0, 1.0],\n\t    ], dtype=torch.float32)\n\t    faces_uvs = torch.tensor([\n", "        [0, 1, 2],\n\t        [0, 2, 3],\n\t    ], dtype=torch.int64)\n\t    # Create a TexturesUV object\n\t    textures = TexturesUV(\n\t        maps=texture_image,\n\t        faces_uvs=faces_uvs.unsqueeze(0),\n\t        verts_uvs=verts_uvs.unsqueeze(0),\n\t    )\n\t    # Create a square mesh with UV coordinates\n", "    vertices = torch.tensor([    [-1.0, -1.0, 0.0],  # bottom left\n\t        [ 1.0, -1.0, 0.0],  # bottom right\n\t        [ 1.0,  1.0, 0.0],  # top right\n\t        [-1.0,  1.0, 0.0],  # top left\n\t    ], dtype=torch.float32)\n\t    faces = torch.tensor([    [0, 1, 2],\n\t        [0, 2, 3],\n\t    ], dtype=torch.int64)\n\t    mesh = Meshes(\n\t        verts=[vertices],\n", "        faces=[faces],\n\t        textures=textures,\n\t    )\n\t    # Move the mesh to the center of the scene\n\t    verts = mesh.verts_packed()\n\t    N = verts.shape[0]\n\t    center = verts.mean(0)\n\t    scale = max((verts - center).abs().max(0)[0])\n\t    mesh.offset_verts_(-center)\n\t    mesh.scale_verts_((1.0 / float(scale)))\n", "    num_views = 10\n\t    # Define the camera and rasterization settings\n\t    # Get a batch of viewing angles.\n\t    elev = torch.linspace(0, 0, num_views)\n\t    azim = torch.linspace(-20, 20, num_views)\n\t    # Place a point light in front of the object. As mentioned above, the front of\n\t    # the cow is facing the -z direction.\n\t    lights = PointLights(device=device, location=[[0.0, 0.0, -3.0]])\n\t    # Initialize an OpenGL perspective camera that represents a batch of different\n\t    # viewing angles. All the cameras helper methods support mixed type inputs and\n", "    # broadcasting. So we can view the camera from the a distance of dist=2.7, and\n\t    # then specify elevation and azimuth angles for each viewpoint as tensors.\n\t    at = np.array([[np.cos(t) * 0.5, np.sin(t) * 0.5, 0] for t in np.linspace(-np.pi, np.pi, num_views)])\n\t    R, T = look_at_view_transform(dist=3.6, elev=elev, azim=azim) #, at=at)\n\t    fov = lens_model[\"focal\"]\n\t    cameras = FoVPerspectiveCameras(device=device, fov=fov, R=R, T=T)\n\t    raster_settings = RasterizationSettings(image_size=595, blur_radius=0.0, faces_per_pixel=1)\n\t    # Create a MeshRasterizer and MeshRenderer object\n\t    rasterizer = MeshRasterizer(cameras=cameras, raster_settings=raster_settings)\n\t    shader = HardPhongShader(device=torch.device(\"cpu\"), lights=None)\n", "    # Render the mesh from different camera perspectives\n\t    # Display the rendered images\n\t    fig, axs = plt.subplots(1, len(images), figsize=(20, 5))\n\t    for i, image in enumerate(images):\n\t        axs[i].imshow(image.squeeze().cpu().numpy())\n\t    plt.show()\n\tdef render_mesh(obj_filename, num_views, image_size, render_rgb, lens_model):\n\t    # the number of different viewpoints from which we want to render the mesh.\n\t    # num_views = 200\n\t    # Set paths\n", "    # obj_filename = \"schops_mesh/cube.obj\"\n\t    # Load obj file\n\t    # mesh = load_objs_as_meshes([obj_filename], device=device)\n\t    # Define the texture and create a TexturesVertex object\n\t    texture_image = plt.imread('target_mesh/target.png')\n\t    texture_image = texture_image[:, :, :3]  # remove alpha channel\n\t    texture_image = torch.from_numpy(texture_image)\n\t    texture_image = texture_image.permute(2, 0, 1).float() / 255.0\n\t    texture_image = torch.unsqueeze(texture_image, dim=0)\n\t    verts_uvs = torch.tensor([\n", "        [0.0, 0.0],\n\t        [1.0, 0.0],\n\t        [1.0, 1.0],\n\t        [0.0, 1.0],\n\t    ], dtype=torch.float32)\n\t    faces_uvs = torch.tensor([\n\t        [0, 1, 2],\n\t        [0, 2, 3],\n\t    ], dtype=torch.int64)\n\t    # Create a TexturesUV object\n", "    textures = TexturesUV(\n\t        maps=texture_image,\n\t        faces_uvs=faces_uvs.unsqueeze(0),\n\t        verts_uvs=verts_uvs.unsqueeze(0),\n\t    )\n\t    # Create a square mesh with UV coordinates\n\t    vertices = torch.tensor([    [-1.0, -1.0, 0.0],  # bottom left\n\t        [ 1.0, -1.0, 0.0],  # bottom right\n\t        [ 1.0,  1.0, 0.0],  # top right\n\t        [-1.0,  1.0, 0.0],  # top left\n", "    ], dtype=torch.float32)\n\t    faces = torch.tensor([    [0, 1, 2],\n\t        [0, 2, 3],\n\t    ], dtype=torch.int64)\n\t    mesh = Meshes(\n\t        verts=[vertices],\n\t        faces=[faces],\n\t        textures=textures,\n\t    )\n\t    # We scale normalize and center the target mesh to fit in a sphere of radius 1\n", "    # centered at (0,0,0). (scale, center) will be used to bring the predicted mesh\n\t    # to its original center and scale.  Note that normalizing the target mesh,\n\t    # speeds up the optimization but is not necessary!\n\t    verts = mesh.verts_packed()\n\t    N = verts.shape[0]\n\t    center = verts.mean(0)\n\t    scale = max((verts - center).abs().max(0)[0])\n\t    mesh.offset_verts_(-center)\n\t    mesh.scale_verts_((1.0 / float(scale)))\n\t    # Get a batch of viewing angles.\n", "    elev = torch.linspace(0, 0, num_views)\n\t    azim = torch.linspace(-20, 20, num_views)\n\t    # Place a point light in front of the object. As mentioned above, the front of\n\t    # the cow is facing the -z direction.\n\t    lights = PointLights(device=device, location=[[0.0, 0.0, -3.0]])\n\t    # Initialize an OpenGL perspective camera that represents a batch of different\n\t    # viewing angles. All the cameras helper methods support mixed type inputs and\n\t    # broadcasting. So we can view the camera from the a distance of dist=2.7, and\n\t    # then specify elevation and azimuth angles for each viewpoint as tensors.\n\t    at = np.array([[np.cos(t) * 0.5, np.sin(t) * 0.5, 0] for t in np.linspace(-np.pi, np.pi, num_views)])\n", "    R, T = look_at_view_transform(dist=3.6, elev=elev, azim=azim) #, at=at)\n\t    fov = lens_model[\"focal\"]\n\t    cameras = FoVPerspectiveCameras(device=device, fov=fov, R=R, T=T)\n\t    target_cameras = [FoVPerspectiveCameras(device=device, fov=fov, R=R[None, i, ...],\n\t                                            T=T[None, i, ...]) for i in range(num_views)]\n\t    if render_rgb:\n\t        # Define the settings for rasterization and shading. Here we set the output\n\t        # image to be of size 512X512. As we are rendering images for visualization\n\t        # purposes only we will set faces_per_pixel=1 and blur_radius=0.0. Refer to\n\t        # rasterize_meshes.py for explanations of these parameters.  We also leave\n", "        # bin_size and max_faces_per_bin to their default values of None, which sets\n\t        # their values using heuristics and ensures that the faster coarse-to-fine\n\t        # rasterization method is used.  Refer to docs/notes/renderer.md for an\n\t        # explanation of the difference between naive and coarse-to-fine rasterization.\n\t        raster_settings = RasterizationSettings(\n\t            image_size=image_size,\n\t            blur_radius=0.0,\n\t            faces_per_pixel=1,\n\t        )\n\t        # Create a Phong renderer by composing a rasterizer and a shader. The textured\n", "        # Phong shader will interpolate the texture uv coordinates for each vertex,\n\t        # sample from a texture image and apply the Phong lighting model\n\t        renderer = MeshRenderer(\n\t            rasterizer=MeshRasterizer(\n\t                cameras=cameras,\n\t                raster_settings=raster_settings\n\t            ),\n\t            shader=SoftPhongShader(\n\t                device=device,\n\t                cameras=cameras,\n", "                lights=lights\n\t            )\n\t        )\n\t        # Create a batch of meshes by repeating the mesh and associated textures.\n\t        # Meshes has a useful `extend` method which allows us do this very easily.\n\t        # This also extends the textures.\n\t        meshes = mesh.extend(num_views)\n\t        # Render the mesh from each viewing angle\n\t        target_images = renderer(meshes, cameras=cameras, lights=lights)\n\t        # Our multi-view cow dataset will be represented by these 2 lists of tensors,\n", "        # each of length num_views.\n\t        target_rgb = [target_images[i, ..., :3] for i in range(num_views)]\n\t    else:\n\t        target_rgb = None\n\t    return (target_cameras, target_rgb)\n\tdef process_mesh(lens_model, lens_name, num_views, image_size, render_rgb, out_fd):\n\t    # print(lens_model)\n\t    obj_filename = \"target_mesh/cube.obj\"\n\t    if not os.path.exists(out_fd):\n\t        os.mkdir(out_fd)\n", "    # render_plane()\n\t    # sys.exit()\n\t    target_cameras, target_rgb = render_mesh(obj_filename, num_views, image_size, render_rgb, lens_model)\n\t    x_coords, y_coords, world_coords = camera_arrays(target_cameras, image_size)\n\t    screen_coords = np.array([x_coords, y_coords]).T\n\t    from lens_distortion import BrownLensDistortion, ABCDistortion\n\t    projection = {}\n\t    projection['image_width_px'] = image_size\n\t    projection['image_height_px'] = image_size\n\t    projection['center_x_px'] = image_size / 2\n", "    projection['center_y_px'] = image_size / 2\n\t    coeffs = lens_model[\"coeffs\"]\n\t    lens_type = lens_model[\"lens_type\"]\n\t    if lens_type == \"abc\":\n\t        lens = ABCDistortion(a=coeffs[0], b=coeffs[1]*4, c=coeffs[2], projection=projection)\n\t        cam_coords = lens.distortedFromImage(screen_coords)\n\t    elif lens_type == \"brown\":\n\t        lens = BrownLensDistortion(k1=coeffs[0], k2=coeffs[1], k3=coeffs[2], projection=projection)\n\t        cam_coords = lens.distortedFromImage(screen_coords)\n\t    board_coords = []\n", "    frame_coords = []\n\t    for i in range(len(target_cameras)):\n\t        frame_coords.append(cam_coords[:, i, :])\n\t        board_coords.append(world_coords)\n\t    with open(\"{}/{}_{:02d}_points.json\".format(out_fd, lens_name, int(lens_model[\"model_name\"])), \"w\") as outf:\n\t            json.dump(\n\t                {\n\t                    \"frame_coordinates_xy\": frame_coords,\n\t                    \"board_coordinates_xyz\": board_coords,\n\t                    \"resolution_wh\": (image_size, image_size),\n", "                },\n\t                outf,\n\t                cls=NumpyEncoder,\n\t                indent=4,\n\t                sort_keys=False,\n\t            )\n\t    if target_rgb is not None:\n\t        from lens_distortion import Vignetting\n\t        image_grid_vis(target_rgb[:10], x_coords[:10], y_coords[:10], rows=2, cols=5, rgb=True)\n\t        # image_grid(target_rgb[:10], rows=2, cols=5, rgb=True)\n", "        # plt.show()\n\t        vig = Vignetting(k1=-0.19, k2=0.09, k3=-0.39, projection=projection)\n\t        vig_rgb = [vig.vignet(lens.distortImage(target_rgb[i])) for i in range(num_views)]\n\t        vig_rgb = np.stack(vig_rgb, 0)\n\t        image_grid(vig_rgb, rows=2, cols=5, rgb=True)\n\t        undist_rgb = [lens.distortImage(target_rgb[i]) for i in range(num_views)]\n\t        brown_undist_rgb = np.stack(undist_rgb, 0)\n\t        image_grid_vis(brown_undist_rgb, cam_coords.T[0, :], cam_coords.T[1, :], rows=2, cols=5, rgb=True)\n\t        # plt.show()\n\t        # image_grid(brown_undist_rgb, rows=2, cols=5, rgb=True)\n", "        # plt.show()\n\t        output_dir = \"{}/{}_{:02d}_frames\".format(out_fd, lens_name, int(lens_model[\"model_name\"]))\n\t        if not os.path.exists(output_dir):\n\t            os.makedirs(output_dir)\n\t        vig_output_dir = \"{}/{}_{:02d}_vig_frames\".format(out_fd, lens_name, int(lens_model[\"model_name\"]))\n\t        if not os.path.exists(vig_output_dir):\n\t            os.makedirs(vig_output_dir)\n\t        for i in range(len(target_cameras)):\n\t            imageio.imwrite(\n\t                '{}/frame_{:05d}.png'.format(vig_output_dir, i), np.uint8(vig_rgb[i] * 255))\n", "            imageio.imwrite(\n\t                '{}/frame_{:05d}.png'.format(output_dir, i), np.uint8(brown_undist_rgb[i] * 255))\n"]}
{"filename": "calibration/networks.py", "chunked_list": ["import FrEIA.framework as Ff\n\timport FrEIA.modules as Fm\n\timport numpy as np\n\timport pytorch_lightning as pl\n\timport torch\n\tfrom toolz import curry\n\tfrom torch import nn\n\tdef init_weights_zero(m):\n\t    if isinstance(m, nn.Linear):\n\t        m.weight.data.fill_(0.0)\n", "        m.bias.data.fill_(0.0)\n\t@curry\n\tdef subnet_fc(c_in, c_out, zero_init=False):\n\t    seq_block = nn.Sequential(nn.Linear(c_in, 256), nn.ELU(), nn.Linear(256, c_out))\n\t    if zero_init:\n\t        seq_block.apply(init_weights_zero)\n\t    return seq_block\n\tclass LensNet(pl.LightningModule):\n\t    def __init__(self):\n\t        super().__init__()\n", "        # self.save_hyperparameters()\n\t        self.bidirectional_lens = Ff.SequenceINN(2)\n\t        depth = 12\n\t        for k in range(depth):\n\t            self.bidirectional_lens.append(\n\t                Fm.AllInOneBlock,\n\t                subnet_constructor=subnet_fc(zero_init=(k == (depth - 1))),\n\t                permute_soft=True,\n\t            )\n\t    def forward(self, rays, sensor_to_frustum=True):\n", "        if sensor_to_frustum:\n\t            return self.bidirectional_lens(rays)[0]\n\t        else:\n\t            return self.bidirectional_lens(rays, rev=True)[0]\n\tclass iResNet(pl.LightningModule):\n\t    def __init__(self):\n\t        super().__init__()\n\t        self.batch_size = 16\n\t        self.tol = 1e-6\n\t        self.inp_size_linear = (2,)\n", "        torch.manual_seed(0)\n\t        nodes = [Ff.graph_inn.InputNode(*self.inp_size_linear, name=\"input\")]\n\t        for i in range(5):\n\t            nodes.append(\n\t                Ff.graph_inn.Node(\n\t                    nodes[-1],\n\t                    Fm.IResNetLayer,\n\t                    {\n\t                        \"hutchinson_samples\": 1, \n\t                        \"internal_size\": 1024, \n", "                        \"n_internal_layers\": 4, \n\t                    },\n\t                    conditions=[],\n\t                    name=f\"i_resnet_{i}\",\n\t                )\n\t            )\n\t        nodes.append(Ff.graph_inn.OutputNode(nodes[-1], name=\"output\"))\n\t        self.i_resnet_linear = Ff.GraphINN(nodes, verbose=False)\n\t        for node in self.i_resnet_linear.node_list:\n\t            if isinstance(node.module, Fm.IResNetLayer):\n", "                node.module.lipschitz_correction()\n\t    def forward(self, rays, sensor_to_frustum=True):\n\t        if sensor_to_frustum:\n\t            return self.i_resnet_linear(rays, jac=False)[0]\n\t        else:\n\t            return self.i_resnet_linear(rays, rev=True, jac=False)[0]\n\t    def test_inverse(self):\n\t        x = torch.randn(self.batch_size, *self.inp_size_linear)\n\t        x = x * torch.randn_like(x)\n\t        x = x + torch.randn_like(x)\n", "        y = self.i_resnet_linear(x, jac=False)[0]\n\t        x_hat = self.i_resnet_linear(y, rev=True, jac=False)[0]\n\t        print(\"Check that inverse is close to input\")\n\t        assert torch.allclose(x, x_hat, atol=self.tol)\n\tclass LipBoundedPosEnc(nn.Module):\n\t    def __init__(self, inp_features, n_freq, cat_inp=True):\n\t        super().__init__()\n\t        self.inp_feat = inp_features\n\t        self.n_freq = n_freq\n\t        self.cat_inp = cat_inp\n", "        self.out_dim = 2 * self.n_freq * self.inp_feat\n\t        if self.cat_inp:\n\t            self.out_dim += self.inp_feat\n\t    def forward(self, x):\n\t        \"\"\"\n\t        :param x: (bs, npoints, inp_features)\n\t        :return: (bs, npoints, 2 * out_features + inp_features)\n\t        \"\"\"\n\t        assert len(x.size()) == 3\n\t        bs, npts = x.size(0), x.size(1)\n", "        const = (2 ** torch.arange(self.n_freq) * np.pi).view(1, 1, 1, -1)\n\t        const = const.to(x)\n\t        # Out shape : (bs, npoints, out_feat)\n\t        cos_feat = torch.cos(const * x.unsqueeze(-1)).view(bs, npts, self.inp_feat, -1)\n\t        sin_feat = torch.sin(const * x.unsqueeze(-1)).view(bs, npts, self.inp_feat, -1)\n\t        out = torch.cat([sin_feat, cos_feat], dim=-1).view(\n\t            bs, npts, 2 * self.inp_feat * self.n_freq\n\t        )\n\t        const_norm = (\n\t            torch.cat([const, const], dim=-1)\n", "            .view(1, 1, 1, self.n_freq * 2)\n\t            .expand(-1, -1, self.inp_feat, -1)\n\t            .reshape(1, 1, 2 * self.inp_feat * self.n_freq)\n\t        )\n\t        if self.cat_inp:\n\t            out = torch.cat([out, x], dim=-1)\n\t            const_norm = torch.cat(\n\t                [const_norm, torch.ones(1, 1, self.inp_feat).to(x)], dim=-1\n\t            )\n\t            return out / const_norm / np.sqrt(self.n_freq * 2 + 2)\n", "        else:\n\t            return out / const_norm / np.sqrt(self.n_freq * 2)\n\tclass InvertibleResBlockLinear(nn.Module):\n\t    def __init__(\n\t        self, inp_dim, hid_dim, nblocks=1, nonlin=\"leaky_relu\", pos_enc_freq=None\n\t    ):\n\t        super().__init__()\n\t        self.dim = inp_dim\n\t        self.nblocks = nblocks\n\t        self.pos_enc_freq = pos_enc_freq\n", "        if self.pos_enc_freq is not None:\n\t            inp_dim_af_pe = self.dim * (self.pos_enc_freq * 2 + 1)\n\t            self.pos_enc = LipBoundedPosEnc(self.dim, self.pos_enc_freq)\n\t        else:\n\t            self.pos_enc = lambda x: x\n\t            inp_dim_af_pe = inp_dim\n\t        self.blocks = nn.ModuleList()\n\t        self.blocks.append(nn.utils.spectral_norm(nn.Linear(inp_dim_af_pe, hid_dim)))\n\t        for _ in range(self.nblocks):\n\t            self.blocks.append(\n", "                nn.utils.spectral_norm(\n\t                    nn.Linear(hid_dim, hid_dim),\n\t                )\n\t            )\n\t        self.blocks.append(\n\t            nn.utils.spectral_norm(\n\t                nn.Linear(hid_dim, self.dim),\n\t            )\n\t        )\n\t        self.nonlin = nonlin.lower()\n", "        if self.nonlin == \"leaky_relu\":\n\t            self.act = nn.LeakyReLU()\n\t        elif self.nonlin == \"relu\":\n\t            self.act = nn.ReLU()\n\t        elif self.nonlin == \"elu\":\n\t            self.act = nn.ELU()\n\t        elif self.nonlin == \"softplus\":\n\t            self.act = nn.Softplus()\n\t        else:\n\t            raise NotImplementedError\n", "    def forward_g(self, x):\n\t        orig_dim = len(x.size())\n\t        if orig_dim == 2:\n\t            x = x.unsqueeze(0)\n\t        y = self.pos_enc(x)\n\t        for block in self.blocks[:-1]:\n\t            y = self.act(block(y))\n\t        y = self.blocks[-1](y)\n\t        if orig_dim == 2:\n\t            y = y.squeeze(0)\n", "        return y\n\t    def forward(self, x):\n\t        return x + self.forward_g(x)\n\t    def invert(self, y, verbose=False, iters=35):\n\t        return self.fixed_point_invert(\n\t            lambda x: self.forward_g(x), y, iters=iters, verbose=verbose\n\t        )\n\t    def fixed_point_invert(self, g, y, iters=35, verbose=False):\n\t        with torch.no_grad():\n\t            x = y\n", "            dim = x.size(-1)\n\t            for i in range(iters):\n\t                x = y - g(x)\n\t                if verbose:\n\t                    err = (y - (x + g(x))).view(-1, dim).norm(dim=-1).mean()\n\t                    err = err.detach().cpu().item()\n\t                    print(\"iter:%d err:%s\" % (i, err))\n\t        return x\n\tclass Net(nn.Module):\n\t    def __init__(self):\n", "        super().__init__()\n\t        self.dim = 2\n\t        self.out_dim = 2\n\t        self.hidden_size = 512\n\t        self.n_blocks = 5\n\t        self.n_g_blocks = 5\n\t        self.tol = 1e-6\n\t        # Network modules\n\t        self.blocks = nn.ModuleList()\n\t        for _ in range(self.n_blocks):\n", "            self.blocks.append(\n\t                InvertibleResBlockLinear(\n\t                    self.dim,\n\t                    self.hidden_size,\n\t                    nblocks=self.n_g_blocks,\n\t                    nonlin=\"elu\",\n\t                    pos_enc_freq=5,\n\t                )\n\t            )\n\t    def forward(self, rays, sensor_to_frustum=True):\n", "        if sensor_to_frustum:\n\t            rays = rays.unsqueeze(0)\n\t            out = rays\n\t            for block in self.blocks:\n\t                out = block(out)\n\t            return out[0]\n\t        else:\n\t            rays = rays.unsqueeze(0)\n\t            x = rays\n\t            for block in self.blocks[::-1]:\n", "                x = block.invert(x, verbose=False, iters=35)\n\t            return x[0]\n\t    def test_inverse(self):\n\t        x = torch.rand(7, self.dim) * 2 - 1\n\t        y = self.forward(x)\n\t        print(y.max(dim=0), y.min(dim=0))\n"]}
{"filename": "calibration/model.py", "chunked_list": ["from typing import Optional\n\timport torch\n\tfrom torch import nn\n\timport pytorch_lightning as pl\n\timport time\n\tfrom collections import deque\n\tfrom ray import tune\n\tfrom hydra.utils import instantiate\n\tfrom . import standard_models\n\tfrom .config import ConfigMarker, ConfigImageFormation\n", "from .marker import Marker\n\tclass Model(pl.LightningModule):\n\t    \"\"\"\n\t    This model represents the entire process from marker creation to recording to point detection.\n\t    If called without an already detected and extracted marker, it will randomly project\n\t    the marker and simulate the entire image formation pipeline, then run it through\n\t    the center point detection and return the results (true center points and predicted center\n\t    points) to enable optimization of the entire model.\n\t    If a detection is provided, it uses the existing detection and provides the estimated\n\t    marker center point.\n", "    \"\"\"\n\t    def __init__(\n\t        self,\n\t        marker: ConfigMarker,\n\t        image_formation: Optional[ConfigImageFormation] = None,\n\t        batch_size=4,\n\t        log_every=-1,\n\t        lr=1e-2,\n\t        lr_fcn_fac=1.0,\n\t        lr_marker_fac=100.0,\n", "        n_latent=200,\n\t        n_hidden=2,\n\t        reg_weight=0.0,\n\t    ):\n\t        super().__init__()\n\t        self.save_hyperparameters()\n\t        self.marker = instantiate(marker)\n\t        if image_formation is not None:\n\t            self.image_formation = instantiate(image_formation)\n\t        else:\n", "            self.image_formation = None\n\t        self.batch_size = batch_size\n\t        # Use an efficient predictor to create a compact, latent representation.\n\t        self.predictor = standard_models.mobilenet_v3_small(\n\t            pretrained=True, progress=True\n\t        )\n\t        # Use an FCN to find the center coordinate.\n\t        self.fcn = nn.Sequential(\n\t            *(\n\t                [\n", "                    nn.Linear(1000, n_latent, True),\n\t                    nn.ReLU(),\n\t                ]\n\t                + [nn.Linear(n_latent, n_latent, True), nn.ReLU()] * (n_hidden - 1)\n\t                + [\n\t                    nn.Linear(n_latent, 3),\n\t                ]\n\t            )\n\t        )\n\t        self._last_log_written = 0\n", "        self.log_every = log_every\n\t        self.lr = lr\n\t        self.lr_fcn_fac = lr_fcn_fac\n\t        self.lr_marker_fac = lr_marker_fac\n\t        self.loss_deque = deque(maxlen=50)\n\t        self.reg_weight = reg_weight\n\t        self.gnllloss = nn.GaussianNLLLoss(reduction=\"sum\")\n\t    def forward(self, detection=None):\n\t        if detection is None:\n\t            # Go through the image formation process.\n", "            self._marker, self._marker_center = self.marker(self.batch_size)\n\t            self._detection, self._detection_center = self.image_formation(\n\t                self._marker, self._marker_center\n\t            )\n\t        else:\n\t            # Test time, we're looking for detections with unknown center.\n\t            self._detection_center = None\n\t            self._detection = detection\n\t        clres = self.predictor(self._detection)\n\t        fcnres = self.fcn(clres)\n", "        coords = torch.sigmoid(fcnres[:, :2]) * self.marker.working_size\n\t        # We are predicting the standard deviation and are limiting\n\t        # it to a reasonable size to stabilize the optimization.\n\t        sds = torch.sigmoid(fcnres[:, 2:3]) * (self.marker.working_size / 2)\n\t        variances = torch.square(sds)\n\t        return coords, variances\n\t    def configure_optimizers(self):\n\t        optimizer = torch.optim.Adam(\n\t            [\n\t                {\"params\": self.predictor.parameters(), \"lr\": self.lr},\n", "                {\"params\": self.fcn.parameters(), \"lr\": self.lr * self.lr_fcn_fac},\n\t                {\n\t                    \"params\": self.marker.parameters(),\n\t                    \"lr\": self.lr * self.lr_marker_fac,\n\t                },\n\t            ]\n\t        )\n\t        return optimizer\n\t    def training_step(self, train_batch, batch_idx):\n\t        coords, variances = self.forward()\n", "        # L1 loss.\n\t        # self._loss = torch.sum((coords - self._detection_center).abs())\n\t        # Gaussian negative log likelihood, homoscedastic.\n\t        self._loss = self.gnllloss(coords, self._detection_center, variances)\n\t        distances = torch.linalg.vector_norm(coords - self._detection_center, dim=1)\n\t        if self.reg_weight > 0.0:\n\t            self._regularizer = torch.sum((1.0 - self._marker).abs()) * self.reg_weight\n\t        else:\n\t            self._regularizer = 0.0\n\t        self.maybe_log(\n", "            coords, self._loss, self._regularizer, distances, variances, batch_idx\n\t        )\n\t        self.loss_deque.append(self._loss.item())\n\t        if len(self.loss_deque) >= 50:\n\t            self.loss_deque.popleft()\n\t        if tune.is_session_enabled():\n\t            tune.report(iterations=batch_idx, accuracy=self._loss.item())\n\t        return self._loss + self._regularizer\n\t    def maybe_log(self, coords, loss, regularizer, distances, variances, batch_idx):\n\t        if time.time() - self._last_log_written > self.log_every:\n", "            # Scalars.\n\t            self.log(\"max/distance\", distances.max())\n\t            self.log(\"max/variance\", variances.max())\n\t            self.log(\"average/distance\", distances.mean())\n\t            self.log(\"average/variance\", variances.mean())\n\t            self.log(\"average/95perc_conf_dist\", 2.0 * torch.sqrt(variances).mean())\n\t            self.log(\"train/loss\", loss)\n\t            self.log(\"train/regularizer\", regularizer)\n\t            if hasattr(self, \"_marker_grad\") and self._marker_grad is not None:\n\t                self.logger.experiment.add_histogram(\n", "                    \"grad/marker\", self.marker.marker_mem.grad, batch_idx\n\t                )\n\t            # Histograms.\n\t            self.logger.experiment.add_histogram(\n\t                \"val/marker\", self.marker.marker_mem, batch_idx\n\t            )\n\t            self.logger.experiment.add_histogram(\"val/distances\", distances, batch_idx)\n\t            self.logger.experiment.add_histogram(\"val/variances\", variances, batch_idx)\n\t            # Add images.\n\t            self.logger.experiment.add_image(\n", "                f\"images/marker\",\n\t                (self._marker[0] * 255.0).to(torch.uint8),\n\t                batch_idx,\n\t                dataformats=\"CWH\",\n\t            )\n\t            self.logger.experiment.add_image(\n\t                f\"images/detections\",\n\t                (self._detection * 255.0).to(torch.uint8),\n\t                batch_idx,\n\t                dataformats=\"NCHW\",\n", "            )\n\t            center_vis = self._detection.clone()\n\t            for idx in range(self._detection.shape[0]):\n\t                center_vis[\n\t                    idx,\n\t                    :,\n\t                    self._detection_center[idx, 0].long()\n\t                    - 3 : self._detection_center[idx, 0].long()\n\t                    + 3,\n\t                    self._detection_center[idx, 1].long()\n", "                    - 3 : self._detection_center[idx, 1].long()\n\t                    + 3,\n\t                ] = 0.0\n\t                resize_fac = self.marker.working_size / self.marker.size\n\t                center_vis[\n\t                    idx,\n\t                    :,\n\t                    (self._marker_center[idx, 0] * resize_fac).long()\n\t                    - 3 : (self._marker_center[idx, 0] * resize_fac).long()\n\t                    + 3,\n", "                    (self._marker_center[idx, 1] * resize_fac).long()\n\t                    - 3 : (self._marker_center[idx, 1] * resize_fac).long()\n\t                    + 3,\n\t                ] = 0.0\n\t                center_vis[\n\t                    idx,\n\t                    :,\n\t                    coords[idx, 0].long() - 3 : coords[idx, 0].long() + 3,\n\t                    coords[idx, 1].long() - 3 : coords[idx, 1].long() + 3,\n\t                ] = 0.0\n", "                # red detection center.\n\t                center_vis[\n\t                    idx,\n\t                    0,\n\t                    self._detection_center[idx, 0].long()\n\t                    - 3 : self._detection_center[idx, 0].long()\n\t                    + 3,\n\t                    self._detection_center[idx, 1].long()\n\t                    - 3 : self._detection_center[idx, 1].long()\n\t                    + 3,\n", "                ] = 1.0\n\t                # green: original marker center.\n\t                center_vis[\n\t                    idx,\n\t                    1,\n\t                    (self._marker_center[idx, 0] * resize_fac).long()\n\t                    - 3 : (self._marker_center[idx, 0] * resize_fac).long()\n\t                    + 3,\n\t                    (self._marker_center[idx, 1] * resize_fac).long()\n\t                    - 3 : (self._marker_center[idx, 1] * resize_fac).long()\n", "                    + 3,\n\t                ] = 1.0\n\t                # blue: model estimation for the center.\n\t                center_vis[\n\t                    idx,\n\t                    2,\n\t                    coords[idx, 0].long() - 3 : coords[idx, 0].long() + 3,\n\t                    coords[idx, 1].long() - 3 : coords[idx, 1].long() + 3,\n\t                ] = 1.0\n\t            self.logger.experiment.add_image(\n", "                f\"images/centers\",\n\t                (center_vis * 255.0).to(torch.uint8),\n\t                batch_idx,\n\t                dataformats=\"NCHW\",\n\t            )\n\t            self._last_log_written = time.time()\n\t    def backward(self, loss, optimizer, optimizer_idx):\n\t        loss.backward()\n\t        self._marker_grad = self.marker.marker_mem.grad\n"]}
{"filename": "calibration/keypoint_detection.py", "chunked_list": ["import logging\n\tfrom os import path\n\timport cv2\n\timport math\n\timport numpy as np\n\timport torch\n\tfrom .target import calculate_parameters\n\tfrom .model import Model\n\tfrom .config import Config, get_latest_checkpoint, ARUCO_DICT\n\tLOGGER = logging.getLogger(__name__)\n", "MODEL = None\n\tARUCO_PS = None\n\tTARGET_PS = None\n\tdef process_frame(frame, cfg: Config):\n\t    \"\"\"\n\t    Process a frame and run the keypoint detector over it.\n\t    First locates the ArUco markers. Then infers a rough position\n\t    for all keypoints. Runs the keypoint detector on all of these\n\t    areas and returns their centers, the validity, coordinates\n\t    and a visualization.\n", "    Returns centers_found, centers_valid, centers_coords, vis_frame.\n\t    \"\"\"\n\t    global MODEL, ARUCO_PS, TARGET_PS\n\t    if MODEL is None:\n\t        LOGGER.info(f\"Loading model from experiment `{cfg.target.exp_name}`...\")\n\t        latest_checkpoint = get_latest_checkpoint(cfg.target.exp_name, cfg)\n\t        MODEL = Model.load_from_checkpoint(latest_checkpoint).cuda()\n\t        LOGGER.info(\"Loading successful.\")\n\t    if ARUCO_PS is None:\n\t        LOGGER.info(\n", "            f\"Setting up ArUco parameters for marker `{cfg.target.aruco_id}`...\"\n\t        )\n\t        ARUCO_PS = (\n\t            cv2.aruco.Dictionary_get(ARUCO_DICT[cfg.target.aruco_id]),\n\t            cv2.aruco.DetectorParameters_create(),\n\t        )\n\t        ARUCO_PS[1].cornerRefinementMethod = cv2.aruco.CORNER_REFINE_APRILTAG\n\t        LOGGER.info(\"Setup successful.\")\n\t    if TARGET_PS is None:\n\t        LOGGER.info(\"Calculating target parameters...\")\n", "        TARGET_PS = calculate_parameters(cfg)\n\t        LOGGER.info(\"Done.\")\n\t    centers_found = []\n\t    centers_valid = []\n\t    centers_coords = []\n\t    # TODO: resize frame before detection?\n\t    (corners, ids, _) = cv2.aruco.detectMarkers(\n\t        frame, ARUCO_PS[0], parameters=ARUCO_PS[1]\n\t    )\n\t    vis_frame = frame.copy()\n", "    corners_marker = np.array(\n\t        [\n\t            [0.0, 0.0],  # tl\n\t            [cfg.model.marker.working_size, 0.0],  # tr\n\t            [cfg.model.marker.working_size, cfg.model.marker.working_size],  # br\n\t            [0.0, cfg.model.marker.working_size],  # bl\n\t        ],\n\t        dtype=np.float32,\n\t    )\n\t    if len(corners) > 0:\n", "        if cfg.dbg:\n\t            cv2.namedWindow(\"[dbg] markers\")\n\t            dbg_frame = frame.copy()\n\t            cv2.aruco.drawDetectedMarkers(dbg_frame, corners)\n\t            cv2.imshow(\"[dbg] markers\", dbg_frame)\n\t            cv2.waitKey(0)\n\t            cv2.destroyWindow(\"[dbg] markers\")\n\t        cv2.aruco.drawDetectedMarkers(vis_frame, corners, ids)\n\t        ids = ids.flatten()\n\t        for (markerCorner, markerID) in zip(corners, ids):\n", "            if markerID not in [23, 24, 25, 26]:\n\t                continue\n\t            corners = markerCorner.reshape((4, 2))\n\t            # The marker is printed upside-down (that's why tl-tr-br-bl is swapped\n\t            # to bl-br-tr-tl).\n\t            corners_grid = np.array(\n\t                [\n\t                    [\n\t                        TARGET_PS.tag_x_grid[markerID - 23],\n\t                        TARGET_PS.tag_y_grid[markerID - 23]\n", "                        + cfg.target.aruco_length_in_squares,\n\t                    ],  # bl\n\t                    [\n\t                        TARGET_PS.tag_x_grid[markerID - 23]\n\t                        + cfg.target.aruco_length_in_squares,\n\t                        TARGET_PS.tag_y_grid[markerID - 23]\n\t                        + cfg.target.aruco_length_in_squares,\n\t                    ],  # br\n\t                    [\n\t                        TARGET_PS.tag_x_grid[markerID - 23]\n", "                        + cfg.target.aruco_length_in_squares,\n\t                        TARGET_PS.tag_y_grid[markerID - 23],\n\t                    ],  # tr\n\t                    [\n\t                        TARGET_PS.tag_x_grid[markerID - 23],\n\t                        TARGET_PS.tag_y_grid[markerID - 23],\n\t                    ],  # tl\n\t                ],\n\t                dtype=np.float32,\n\t            )\n", "            LOGGER.debug(f\"ArUco marker grid position: {corners_grid}.\")\n\t            # Define a grid coordinate system over the target as:\n\t            # +------+------+------+------+\n\t            # |      |      |      |      |\n\t            # +------X------+------X------+\n\t            # |      |      |      |      |\n\t            # +------+------+------+------+\n\t            # |      |      |      |      |\n\t            # +------X------+------X------+\n\t            # |      |      |      |      |\n", "            # +------+------+------+------+\n\t            # with the four X's marking the corners of the ArUco\n\t            # marker.\n\t            hom_grid_frame, _ = cv2.findHomography(corners_grid, corners)\n\t            # debugging:\n\t            # corners_grid_hom = np.array(\n\t            #     [\n\t            #         [TARGET_PS.tag_x_grid, TARGET_PS.tag_y_grid, 1],  # tl\n\t            #         [TARGET_PS.tag_x_grid + 1, TARGET_PS.tag_y_grid, 1],  # tr\n\t            #         [TARGET_PS.tag_x_grid + 1, TARGET_PS.tag_y_grid + 1, 1],  # br\n", "            #         [TARGET_PS.tag_x_grid, TARGET_PS.tag_y_grid + 1, 1],  # bl\n\t            #     ],\n\t            #     dtype=np.float32,\n\t            # )\n\t            # corners_hom = (hom_grid_frame @ corners_grid_hom.T).T\n\t            # corners_calc = corners_hom[:, :2] / corners_hom[:, 2:3]\n\t            with BatchedKeypointDetector(\n\t                centers_found, centers_valid, centers_coords, cfg\n\t            ) as bkd:\n\t                for x in range(\n", "                    max(\n\t                        0,\n\t                        TARGET_PS.tag_x_grid[markerID - 23]\n\t                        - TARGET_PS.x_part_length_grid,\n\t                    ),\n\t                    min(\n\t                        TARGET_PS.n_squares_x,\n\t                        TARGET_PS.tag_x_grid[markerID - 23]\n\t                        + cfg.target.aruco_length_in_squares\n\t                        + TARGET_PS.x_part_length_grid,\n", "                    ),\n\t                ):\n\t                    for y in range(\n\t                        max(\n\t                            0,\n\t                            TARGET_PS.tag_y_grid[markerID - 23]\n\t                            - TARGET_PS.y_part_length_grid,\n\t                        ),\n\t                        min(\n\t                            TARGET_PS.n_squares_y,\n", "                            TARGET_PS.tag_y_grid[markerID - 23]\n\t                            + cfg.target.aruco_length_in_squares\n\t                            + TARGET_PS.y_part_length_grid,\n\t                        ),\n\t                    ):\n\t                        if (\n\t                            x >= TARGET_PS.tag_x_grid[markerID - 23]\n\t                            and x\n\t                            < TARGET_PS.tag_x_grid[markerID - 23]\n\t                            + cfg.target.aruco_length_in_squares\n", "                            and y >= TARGET_PS.tag_y_grid[markerID - 23]\n\t                            and y\n\t                            < TARGET_PS.tag_y_grid[markerID - 23]\n\t                            + cfg.target.aruco_length_in_squares\n\t                        ):\n\t                            # This is the ArUco marker section.\n\t                            continue\n\t                        corners_grid_hom = np.array(\n\t                            [\n\t                                [x, y, 1.0],  # tl\n", "                                [x + 1, y, 1.0],  # tr\n\t                                [x + 1, y + 1, 1.0],  # br\n\t                                [x, y + 1, 1.0],  # bl\n\t                            ],\n\t                            dtype=np.float32,\n\t                        )\n\t                        corners_frame_hom = (hom_grid_frame @ corners_grid_hom.T).T\n\t                        corners_frame = (\n\t                            corners_frame_hom[:, :2] / corners_frame_hom[:, 2:3]\n\t                        )\n", "                        valid = True\n\t                        for corner_x, corner_y in corners_frame:\n\t                            if (\n\t                                corner_x < 0\n\t                                or corner_y < 0\n\t                                or corner_x > frame.shape[1]\n\t                                or corner_y > frame.shape[0]\n\t                            ):\n\t                                valid = False\n\t                                break\n", "                        line_thickness = 2\n\t                        cv2.line(\n\t                            vis_frame,\n\t                            tuple(corners_frame[0].astype(np.int32)),\n\t                            tuple(corners_frame[1].astype(np.int32)),\n\t                            (0, 255, 0),\n\t                            thickness=line_thickness,\n\t                        )\n\t                        cv2.line(\n\t                            vis_frame,\n", "                            tuple(corners_frame[1].astype(np.int32)),\n\t                            tuple(corners_frame[2].astype(np.int32)),\n\t                            (0, 255, 0),\n\t                            thickness=line_thickness,\n\t                        )\n\t                        cv2.line(\n\t                            vis_frame,\n\t                            tuple(corners_frame[2].astype(np.int32)),\n\t                            tuple(corners_frame[3].astype(np.int32)),\n\t                            (0, 255, 0),\n", "                            thickness=line_thickness,\n\t                        )\n\t                        cv2.line(\n\t                            vis_frame,\n\t                            tuple(corners_frame[3].astype(np.int32)),\n\t                            tuple(corners_frame[0].astype(np.int32)),\n\t                            (0, 255, 0),\n\t                            thickness=line_thickness,\n\t                        )\n\t                        if not valid:\n", "                            LOGGER.debug(\n\t                                f\"Marker at position {x}, {y} (x, y) not fully visible: {corners_frame}.\"\n\t                            )\n\t                            continue\n\t                        hom_boxframe_marker, _ = cv2.findHomography(\n\t                            corners_frame, corners_marker\n\t                        )\n\t                        # We're not using `np.linalg.inv(hom_boxframe_marker)` here,\n\t                        # which would be an option but is less numerically stable and\n\t                        # accurate than optimizing for the new homography.\n", "                        hom_marker_boxframe, _ = cv2.findHomography(\n\t                            corners_marker, corners_frame\n\t                        )\n\t                        flat_marker = cv2.warpPerspective(\n\t                            frame,\n\t                            hom_boxframe_marker,\n\t                            (\n\t                                cfg.model.marker.working_size,\n\t                                cfg.model.marker.working_size,\n\t                            ),\n", "                            flags=cv2.INTER_NEAREST,\n\t                        )\n\t                        flat_marker_pt = (\n\t                            torch.from_numpy(flat_marker)\n\t                            .cuda()\n\t                            .permute(2, 0, 1)[None, ...]\n\t                            / 255.0\n\t                        )\n\t                        bkd.process_marker(flat_marker_pt, hom_marker_boxframe, x, y)\n\t        for center_coord, center_valid in zip(centers_found, centers_valid):\n", "            clr = (255, 0, 0) if center_valid else (0, 0, 255)\n\t            vis_frame[\n\t                int(center_coord[1]) - 3 : int(center_coord[1]) + 3,\n\t                int(center_coord[0]) - 3 : int(center_coord[0]) + 3,\n\t                :,\n\t            ] = clr\n\t        if cfg.dbg:\n\t            # Plot all detections in the frame.\n\t            frame_dbg = frame.copy()\n\t            for center_coord, center_valid in zip(centers_found, centers_valid):\n", "                clr = (255, 0, 0) if center_valid else (0, 0, 255)\n\t                frame_dbg[\n\t                    int(center_coord[1]) - 3 : int(center_coord[1]) + 3,\n\t                    int(center_coord[0]) - 3 : int(center_coord[0]) + 3,\n\t                    :,\n\t                ] = clr\n\t            cv2.namedWindow(\"[dbg] frame with centers\")\n\t            cv2.imshow(\"[dbg] frame with centers\", frame_dbg)\n\t            cv2.waitKey(0)\n\t            cv2.destroyWindow(\"[dbg] frame with centers\")\n", "    return centers_found, centers_valid, centers_coords, vis_frame\n\tclass BatchedKeypointDetector:\n\t    def __init__(self, center_list, valid_list, centers_board_coords, cfg):\n\t        self._markers_flat = []\n\t        self._homographies = []\n\t        self._coordinates = []\n\t        self.center_list = center_list\n\t        self.valid_list = valid_list\n\t        self.centers_board_coords = centers_board_coords\n\t        self.cfg = cfg\n", "    def process_marker(self, marker_pt, hom_marker_boxframe, x, y):\n\t        self._markers_flat.append(marker_pt)\n\t        self._homographies.append(hom_marker_boxframe)\n\t        self._coordinates.append([x, y, 0])\n\t        if len(self._markers_flat) >= MODEL.batch_size:\n\t            self.run_forward()\n\t    def run_forward(self):\n\t        marker_batch = torch.cat(self._markers_flat, dim=0)\n\t        model_centers, model_vars = MODEL.forward(detection=marker_batch)\n\t        center_coords = model_centers.cpu().detach().numpy()\n", "        variances = model_vars.cpu().detach().numpy()\n\t        LOGGER.debug(f\"Center coordinates: {center_coords}.\")\n\t        # if cfg.dbg and False:\n\t        #     flat_marker_dbg = flat_marker.copy()\n\t        #     flat_marker_dbg[\n\t        #         int(center_coords[0]) - 3 : int(center_coords[0]) + 3,\n\t        #         int(center_coords[1]) - 3 : int(center_coords[1]) + 3,\n\t        #         :,\n\t        #     ] = (255, 0, 0)\n\t        #     LOGGER.info(f\"[dbg] Variance: {variance}.\")\n", "        #     cv2.namedWindow(\"[dbg] normalized marker\")\n\t        #     cv2.imshow(\"[dbg] normalized marker\", flat_marker_dbg)\n\t        #     cv2.waitKey(0)\n\t        #     cv2.destroyWindow(\"[dbg] normalized marker\")\n\t        for center_coord, variance, hom_marker_boxframe, board_coord in zip(\n\t            center_coords, variances, self._homographies, self._coordinates\n\t        ):\n\t            # Check for reliability.\n\t            reliable = not (\n\t                center_coord[0] < 0.0\n", "                or center_coord[0] >= self.cfg.model.marker.working_size\n\t                or center_coord[1] < 0.0\n\t                or center_coord[1] > self.cfg.model.marker.working_size\n\t                or math.sqrt(variance) > self.cfg.model.marker.std_thresh\n\t            )\n\t            center_coords_hom = np.array(\n\t                [[center_coord[1], center_coord[0], 1.0]], dtype=np.float32\n\t            )\n\t            center_coords_frame_hom = (hom_marker_boxframe @ center_coords_hom.T).T\n\t            center_coords_frame = (\n", "                center_coords_frame_hom[0, :2] / center_coords_frame_hom[0, 2:3]\n\t            )\n\t            self.center_list.append(center_coords_frame)\n\t            self.valid_list.append(reliable)\n\t            self.centers_board_coords.append(board_coord)\n\t        self._homographies = []\n\t        self._markers_flat = []\n\t        self._coordinates = []\n\t    def __enter__(self):\n\t        return self\n", "    def __exit__(self, type, value, traceback):\n\t        if len(self._markers_flat) > 0:\n\t            self.run_forward()\n"]}
{"filename": "calibration/config.py", "chunked_list": ["from dataclasses import dataclass, field\n\tfrom enum import Enum\n\tfrom os import path\n\tfrom glob import glob\n\tfrom natsort import natsorted\n\tfrom typing import List, Optional, Dict, Tuple, Union\n\timport cv2\n\tfrom hydra.core.config_store import ConfigStore\n\tfrom omegaconf import MISSING\n\tARUCO_DICT = {\n", "    \"DICT_4X4_50\": cv2.aruco.DICT_4X4_50,\n\t    \"DICT_4X4_100\": cv2.aruco.DICT_4X4_100,\n\t    \"DICT_4X4_250\": cv2.aruco.DICT_4X4_250,\n\t    \"DICT_4X4_1000\": cv2.aruco.DICT_4X4_1000,\n\t    \"DICT_5X5_50\": cv2.aruco.DICT_5X5_50,\n\t    \"DICT_5X5_100\": cv2.aruco.DICT_5X5_100,\n\t    \"DICT_5X5_250\": cv2.aruco.DICT_5X5_250,\n\t    \"DICT_5X5_1000\": cv2.aruco.DICT_5X5_1000,\n\t    \"DICT_6X6_50\": cv2.aruco.DICT_6X6_50,\n\t    \"DICT_6X6_100\": cv2.aruco.DICT_6X6_100,\n", "    \"DICT_6X6_250\": cv2.aruco.DICT_6X6_250,\n\t    \"DICT_6X6_1000\": cv2.aruco.DICT_6X6_1000,\n\t    \"DICT_7X7_50\": cv2.aruco.DICT_7X7_50,\n\t    \"DICT_7X7_100\": cv2.aruco.DICT_7X7_100,\n\t    \"DICT_7X7_250\": cv2.aruco.DICT_7X7_250,\n\t    \"DICT_7X7_1000\": cv2.aruco.DICT_7X7_1000,\n\t    \"DICT_ARUCO_ORIGINAL\": cv2.aruco.DICT_ARUCO_ORIGINAL,\n\t    \"DICT_APRILTAG_16h5\": cv2.aruco.DICT_APRILTAG_16h5,\n\t    \"DICT_APRILTAG_25h9\": cv2.aruco.DICT_APRILTAG_25h9,\n\t    \"DICT_APRILTAG_36h10\": cv2.aruco.DICT_APRILTAG_36h10,\n", "    \"DICT_APRILTAG_36h11\": cv2.aruco.DICT_APRILTAG_36h11,\n\t}\n\t@dataclass\n\tclass ConfigCalibration:\n\t    subs_fac: int = 5\n\t@dataclass\n\tclass ConfigMarker:\n\t    _target_: str = \"calibration.marker.Marker\"\n\t    size: int = MISSING\n\t    working_size: int = MISSING\n", "    seed: int = 1\n\t    # 95% of points are within 2 * std_thresh.\n\t    std_thresh: float = 0.20\n\t    # std_thresh: float = 0.0\n\t@dataclass\n\tclass ConfigRandomMotionBlur:\n\t    _target_: str = \"kornia.augmentation.RandomMotionBlur\"\n\t    p: float = 0.0\n\t    kernel_size: int = 5\n\t    angle: float = 90.0\n", "    direction: float = 1.0\n\t    border_type: str = \"reflect\"\n\t@dataclass\n\tclass ConfigRandomAffine:\n\t    _target_: str = \"kornia.augmentation.RandomAffine\"\n\t    p: float = 0.0\n\t    degrees: float = 180.0\n\t    translate: Tuple[float, float] = (0.05, 0.05)\n\t    scale: Tuple[float, float, float, float] = (0.95, 1.05, 0.95, 1.05)\n\t    shear: float = 0.02\n", "    return_transform: bool = True\n\t    padding_mode: str = \"reflection\"\n\t@dataclass\n\tclass ConfigRandomGaussianBlur:\n\t    _target_: str = \"kornia.augmentation.RandomGaussianBlur\"\n\t    p: float = 0.3\n\t    # We aim to find a model that can reliably detect the marker\n\t    # up to 1/2 it's size (in pixels).\n\t    # For down-scaling by factor two, σ=3.3 is a good value.\n\t    # The half filter size should be\n", "    # around 3σ, so we need a full filter size of 2*3*3.3, so around\n\t    # 19.\n\t    # Must be an odd, positive integer.\n\t    kernel_size: int = (11, 11)\n\t    # sigma: Tuple[float, float] = (3.3, 3.3)\n\t    sigma: Tuple[float, float] = (1.6, 1.6)\n\t    border_type: str = \"reflect\"\n\t@dataclass\n\tclass ConfigColorJitter:\n\t    _target_: str = \"kornia.augmentation.ColorJitter\"\n", "    brightness: float = 0.1\n\t    contrast: float = 0.1\n\t    saturation: float = 0.1\n\t    hue: float = 0.1\n\t    return_transform: bool = False\n\t    same_on_batch: bool = False\n\t    p: float = 0.0\n\t@dataclass\n\tclass ConfigRandomElasticTransform:\n\t    _target_: str = \"calibration.transformations.RandomElasticTransform\"\n", "    # Reactivate once a fix or mitigation is found:\n\t    # https://fb.workplace.com/groups/349226332644221/permalink/949543442612504/\n\t    kernel_size: Tuple[int, int] = (63, 63)\n\t    sigma: Tuple[float, float] = (32.0, 32.0)\n\t    alpha: Tuple[float, float] = (1.0, 1.0)\n\t    align_corners: bool = False\n\t    mode: str = \"bilinear\"\n\t    padding_mode: str = \"mirror\"\n\t    return_transform: bool = True\n\t    same_on_batch: bool = False\n", "    p: float = 0.0\n\t@dataclass\n\tclass ConfigRandomGaussianNoise:\n\t    _target_: str = \"kornia.augmentation.RandomGaussianNoise\"\n\t    mean: float = 0.0\n\t    std: float = 0.1\n\t    p: float = 1.0\n\t@dataclass\n\tclass ConfigImageFormation:\n\t    _target_: str = \"calibration.image_formation.ImageFormation\"\n", "    # print_dist: ConfigRandomElasticTransform = ConfigRandomElasticTransform()\n\t    motion_dist: ConfigRandomMotionBlur = ConfigRandomMotionBlur()\n\t    affine_dist: ConfigRandomAffine = ConfigRandomAffine()\n\t    blur_dist: ConfigRandomGaussianBlur = ConfigRandomGaussianBlur()\n\t    color_dist: ConfigColorJitter = ConfigColorJitter()\n\t    noise_dist: ConfigRandomGaussianNoise = ConfigRandomGaussianNoise()\n\t    working_size: int = MISSING\n\t@dataclass\n\tclass ConfigModel:\n\t    _target_: str = \"calibration.model.Model\"\n", "    marker: ConfigMarker = MISSING\n\t    image_formation: ConfigImageFormation = ConfigImageFormation()\n\t    batch_size: int = 20\n\t    log_every: float = 30.0\n\t    lr: float = 1e-3\n\t    lr_fcn_fac: float = 1.0\n\t    lr_marker_fac: float = 100.0\n\t    n_latent: int = 200\n\t    n_hidden: int = 2\n\t    reg_weight: float = 0.0\n", "@dataclass\n\tclass ConfigTrainer:\n\t    _target_: str = \"pytorch_lightning.Trainer\"\n\t    logger: bool = True\n\t    enable_checkpointing: bool = True\n\t    default_root_dir: str = \"\"\n\t    max_steps: int = 100000\n\t    log_every_n_steps: int = 50\n\t    enable_model_summary: bool = True\n\t    accelerator: str = \"gpu\"\n", "    gpus: Tuple[int] = (0,)\n\t    auto_select_gpus: bool = True\n\t@dataclass\n\tclass ConfigTarget:\n\t    exp_name: str = MISSING\n\t    aruco_id: str = \"DICT_4X4_1000\"\n\t    margin_in_cm: float = 0.4\n\t    approx_square_length_in_cm: float = 1.25\n\t    aruco_length_in_squares: int = 4\n\t    page_size_pt: Tuple[float, float] = (595.2755905511812, 841.8897637795277)\n", "@dataclass\n\tclass Config:\n\t    gpus: int = MISSING\n\t    disable_tqdm: bool = MISSING\n\t    model: ConfigModel = MISSING\n\t    calibration: ConfigCalibration = ConfigCalibration()\n\t    trainer: ConfigTrainer = ConfigTrainer()\n\t    exp_name: str = MISSING\n\t    target: ConfigTarget = ConfigTarget()\n\t    dbg: bool = False\n", "    vis: bool = False\n\t    video_fp: Optional[str] = None\n\tcs = ConfigStore.instance()\n\tcs.store(name=\"calibration_base_config\", node=Config)\n\tdef get_latest_checkpoint(exp_name: str, cfg: Config):\n\t    return path.abspath(\n\t        natsorted(\n\t            glob(\n\t                path.join(\n\t                    path.dirname(__file__),\n", "                    \"..\",\n\t                    \"experiments\",\n\t                    cfg.target.exp_name,\n\t                    \"lightning_logs\",\n\t                    \"version_0\",\n\t                    \"checkpoints\",\n\t                    \"*.ckpt\",\n\t                )\n\t            )\n\t        )[-1]\n", "    )\n"]}
{"filename": "calibration/persistence.py", "chunked_list": ["import json\n\timport numpy as np\n\tclass NumpyEncoder(json.JSONEncoder):\n\t    \"\"\"Special json encoder for numpy types\"\"\"\n\t    def default(self, obj):\n\t        if isinstance(obj, np.integer):\n\t            return int(obj)\n\t        elif isinstance(obj, np.floating):\n\t            return float(obj)\n\t        elif isinstance(obj, np.ndarray):\n", "            return obj.tolist()\n\t        return json.JSONEncoder.default(self, obj)\n"]}
{"filename": "calibration/target.py", "chunked_list": ["import math\n\timport logging\n\tfrom collections import namedtuple\n\tfrom reportlab.lib.units import cm\n\tfrom .config import Config\n\ttarget_params = namedtuple(\n\t    \"TargetParams\",\n\t    \"n_squares_x, n_squares_y, pattern_start_x_pt, pattern_start_y_pt, \"\n\t    \"square_length_pt, tag_start_x_pt, tag_start_y_pt, tag_x_grid, tag_y_grid, \"\n\t    \"tag_square_length_pt, x_part_length_grid, y_part_length_grid\",\n", ")\n\tLOGGER = logging.getLogger(__name__)\n\tdef calculate_parameters(cfg: Config):\n\t    width_pt, height_pt = cfg.target.page_size_pt\n\t    margin_size_pt = cfg.target.margin_in_cm * cm\n\t    start_x_pt = margin_size_pt\n\t    end_x_pt = width_pt - margin_size_pt\n\t    start_y_pt = margin_size_pt\n\t    end_y_pt = height_pt - margin_size_pt\n\t    print_area_width_pt = abs(end_x_pt - start_x_pt)\n", "    print_area_height_pt = abs(end_y_pt - start_y_pt)\n\t    LOGGER.info(\n\t        f\"Print area size: {print_area_width_pt}pt X {print_area_height_pt}pt (width X height).\"\n\t    )\n\t    approx_square_length_pt = cfg.target.approx_square_length_in_cm * cm\n\t    squares_length_width_rounded_pt = print_area_width_pt / round(\n\t        print_area_width_pt / approx_square_length_pt\n\t    )\n\t    squares_length_height_rounded_pt = print_area_height_pt / round(\n\t        print_area_height_pt / approx_square_length_pt\n", "    )\n\t    square_length_pt = min(\n\t        squares_length_width_rounded_pt, squares_length_height_rounded_pt\n\t    )\n\t    n_squares_x = int(math.floor(print_area_width_pt / square_length_pt))\n\t    n_squares_y = int(math.floor(print_area_height_pt / square_length_pt))\n\t    unused_x_pt = print_area_width_pt - n_squares_x * square_length_pt\n\t    pattern_start_x_pt = start_x_pt + 0.5 * unused_x_pt\n\t    unused_y_pt = print_area_height_pt - n_squares_y * square_length_pt\n\t    pattern_start_y_pt = start_y_pt + 0.5 * unused_y_pt  # - square_length_pt\n", "    assert cfg.target.aruco_length_in_squares % 2 == 0\n\t    tag_start_x_pt = []\n\t    tag_start_y_pt = []\n\t    tag_x_grid = []\n\t    tag_y_grid = []\n\t    x_part_length_grid = int(\n\t        round((n_squares_x - 2 * cfg.target.aruco_length_in_squares) // 4)\n\t    )\n\t    y_part_length_grid = int(\n\t        round((n_squares_y - 2 * cfg.target.aruco_length_in_squares) / 4)\n", "    )\n\t    for id_x in range(2):\n\t        for id_y in range(2):\n\t            tag_x_grid.append(\n\t                x_part_length_grid\n\t                + (cfg.target.aruco_length_in_squares + 2 * x_part_length_grid) * id_x\n\t            )\n\t            tag_start_x_pt.append(\n\t                pattern_start_x_pt + tag_x_grid[-1] * square_length_pt\n\t            )\n", "            tag_y_grid.append(\n\t                y_part_length_grid\n\t                + (cfg.target.aruco_length_in_squares + 2 * y_part_length_grid) * id_y\n\t            )\n\t            tag_start_y_pt.append(\n\t                pattern_start_y_pt + tag_y_grid[-1] * square_length_pt\n\t            )\n\t    tag_square_length_pt = cfg.target.aruco_length_in_squares * square_length_pt\n\t    return target_params(\n\t        n_squares_x,\n", "        n_squares_y,\n\t        pattern_start_x_pt,\n\t        pattern_start_y_pt,\n\t        square_length_pt,\n\t        tag_start_x_pt,\n\t        tag_start_y_pt,\n\t        tag_x_grid,\n\t        tag_y_grid,\n\t        tag_square_length_pt,\n\t        x_part_length_grid,\n", "        y_part_length_grid,\n\t    )\n"]}
{"filename": "calibration/marker.py", "chunked_list": ["import torch\n\timport pytorch_lightning as pl\n\tclass Marker(pl.LightningModule):\n\t    \"\"\"\n\t    This represents one keypoint marker on a calibration target pattern.\n\t    \"\"\"\n\t    def __init__(self, size, working_size, seed, std_thresh=0.0):\n\t        super().__init__()\n\t        assert (\n\t            size % 2 == 1\n", "        ), \"marker size must be an odd number to have a well-defined center.\"\n\t        self.size = size\n\t        self.working_size = working_size\n\t        torch.random.manual_seed(seed)\n\t        # We assume the pixel 'coordinate' to point to the center of the pixel. Hence,\n\t        # the center of the pattern is axactly the coordinate of its center pixel.\n\t        self.register_buffer(\n\t            \"center\",\n\t            torch.tensor(\n\t                [size // 2, size // 2],\n", "                dtype=torch.float32,\n\t                requires_grad=False,\n\t            ),\n\t            persistent=True,\n\t        )\n\t        # This *is* the actual marker, ready to be optimized through back-propagation.\n\t        # We initialize the memory with values in [-4, 4[ (which means that the values\n\t        # range from close to 0 to 1 when run through a sigmoid) - we use the sigmoid\n\t        # function to guarantee the bounds for the parameters even after gradient\n\t        # updates.\n", "        init = (\n\t            torch.rand((3, size, size), dtype=torch.float32, requires_grad=True) * 8.0\n\t            - 4.0\n\t        )\n\t        self.marker_mem = torch.nn.Parameter(\n\t            data=init,\n\t            requires_grad=True,\n\t        )\n\t        # Standard-deviation threshold for detection.\n\t        self.std_thresh = std_thresh\n", "    def forward(self, batch_size):\n\t        return (\n\t            torch.sigmoid(self.marker_mem)[None, ...].expand(\n\t                batch_size,\n\t                self.marker_mem.shape[0],\n\t                self.marker_mem.shape[1],\n\t                self.marker_mem.shape[2],\n\t            ),\n\t            self.center[None, ...].expand(batch_size, 2),\n\t        )\n"]}
{"filename": "calibration/image_formation.py", "chunked_list": ["import torch\n\timport pytorch_lightning as pl\n\timport kornia.augmentation as K\n\t# from .transformations import RandomElasticTransform\n\tclass ImageFormation(pl.LightningModule):\n\t    \"\"\"\n\t    This models the image formation process, including printing of the pattern.\n\t    This transformation must randomly distort the input images with valid\n\t    distortions and at the same time provide the position of the marker\n\t    center (given those distortions).\n", "    \"\"\"\n\t    def __init__(\n\t        self,\n\t        # print_dist: RandomElasticTransform,\n\t        motion_dist: K.RandomMotionBlur,\n\t        affine_dist: K.RandomAffine,\n\t        blur_dist: K.RandomGaussianBlur,\n\t        color_dist: K.ColorJitter,\n\t        noise_dist: K.RandomGaussianNoise,\n\t        working_size: int,\n", "    ):\n\t        \"\"\"\n\t        print_dist: K.RandomElasticTransform; model distortion of the\n\t            pattern through printing.\n\t        motion_dist: K.RandomMotionBlur; model motion blur during\n\t            recording of the pattern.\n\t        affine_dist: K.RandomAffine; model imperfect retrieval of the\n\t            pattern.\n\t        color_dist: K.ColorJitter; model color distortion of the recording.\n\t        \"\"\"\n", "        super().__init__()\n\t        # self.print_dist = print_dist\n\t        self.motion_dist = motion_dist\n\t        self.affine_dist = affine_dist\n\t        self.blur_dist = blur_dist\n\t        self.color_dist = color_dist\n\t        self.noise_dist = noise_dist\n\t        self.working_size = working_size\n\t        self.resizer = K.Resize(self.working_size)\n\t    def _affine_mul(self, mat1, mat2):\n", "        # Pad mat2.\n\t        mat2 = torch.cat(\n\t            (\n\t                mat2[:, 1:2],\n\t                mat2[:, 0:1],\n\t                torch.ones((mat2.shape[0], 1), dtype=mat2.dtype, device=mat2.device),\n\t            ),\n\t            dim=1,\n\t        )\n\t        multiplied = torch.matmul(mat1, mat2[:, :, None])\n", "        normalized = multiplied[:, :2, 0] / multiplied[:, 2:3, 0]\n\t        return torch.cat((normalized[:, 1:2], normalized[:, 0:1]), dim=1)\n\t    def forward(self, pattern, center):\n\t        # Assume the pattern is used in a grid.\n\t        pattern_grid = pattern.repeat(1, 1, 3, 3)\n\t        center = (\n\t            center\n\t            + torch.tensor(\n\t                pattern.shape[2:4], dtype=torch.float32, device=pattern.device\n\t            )[None, ...]\n", "        )\n\t        # print the pattern.\n\t        # printed, transform = self.print_dist(pattern_grid)\n\t        # # Apply shift to\n\t        # center = self.print_dist.apply_to_coordinates(center)\n\t        # Now we get to the recording stage.\n\t        # We assume the pattern is moving, so it could have a\n\t        # certain amount of motion blur.\n\t        recorded = self.motion_dist(pattern_grid)\n\t        # We assume the pattern is recorded using an arbitrary\n", "        # affine transform; however we can normalize that away using\n\t        # the AprilTag. Hence, we drop the homography for now.\n\t        # However, we assume that we can't retrieve the pattern perfectly.\n\t        # That's why we add a random affine transformation.\n\t        recorded, transform = self.affine_dist(recorded)\n\t        center = self._affine_mul(transform, center)\n\t        # Add sensor noise.\n\t        noised = self.noise_dist(recorded)\n\t        # We simulate that this could have been recorded from further\n\t        # away and later resized, so we have quite a bit of loss\n", "        # of detail.\n\t        # Rule of thumb for Gauss filter: filter half-width should be\n\t        # about 3σ.\n\t        # Convolving two times with Gaussian kernel of width σ is\n\t        # same as convolving once with kernel of width σ√2.\n\t        blurred = self.blur_dist(noised)\n\t        # We assume that we don't have color-calibrated cameras (at this\n\t        # stage), so we have to be robust to all kinds of color-shifts.\n\t        color_distorted = self.color_dist(blurred)\n\t        # Get only the center crop.\n", "        cropped = color_distorted[\n\t            :,\n\t            :,\n\t            pattern.shape[2] : -pattern.shape[2],\n\t            pattern.shape[3] : -pattern.shape[3],\n\t        ]\n\t        center = (\n\t            center\n\t            - torch.tensor(\n\t                pattern.shape[2:4], dtype=torch.float32, device=center.device\n", "            )[None, ...]\n\t        )\n\t        if self.working_size != cropped.shape[2]:\n\t            center *= self.working_size / cropped.shape[2]\n\t            cropped = self.resizer(cropped)\n\t        return cropped, center\n"]}
{"filename": "calibration/util.py", "chunked_list": ["from typing import Callable\n\timport torch\n\tdef batched_func(func: Callable, tensor: torch.Tensor, batch_size: int):\n\t    return torch.cat(tuple(func(batch) for batch in batched(tensor, batch_size)), dim=0)\n\tclass batched(object):\n\t    def __init__(self, tensor: torch.Tensor, batch_size: int):\n\t        self.tensor = tensor\n\t        self.batch_size = batch_size\n\t        self._position = -1\n\t    def __iter__(self):\n", "        return self\n\t    def __next__(self):\n\t        if self._position + 1 >= self.tensor.shape[0]:\n\t            raise StopIteration()\n\t        next_batch = self.tensor[\n\t            self._position + 1 : self._position + 1 + self.batch_size\n\t        ]\n\t        self._position += self.batch_size\n\t        return next_batch\n"]}
{"filename": "calibration/transformations.py", "chunked_list": ["\"\"\"\n\tTransformations adapted from Kornia (https://kornia.readthedocs.io/)\n\tto incorporate a coordinate transformation.\n\tOriginal license:\n\t                                 Apache License\n\t                           Version 2.0, January 2004\n\t                        http://www.apache.org/licenses/\n\t   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\t   1. Definitions.\n\t      \"License\" shall mean the terms and conditions for use, reproduction,\n", "      and distribution as defined by Sections 1 through 9 of this document.\n\t      \"Licensor\" shall mean the copyright owner or entity authorized by\n\t      the copyright owner that is granting the License.\n\t      \"Legal Entity\" shall mean the union of the acting entity and all\n\t      other entities that control, are controlled by, or are under common\n\t      control with that entity. For the purposes of this definition,\n\t      \"control\" means (i) the power, direct or indirect, to cause the\n\t      direction or management of such entity, whether by contract or\n\t      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n\t      outstanding shares, or (iii) beneficial ownership of such entity.\n", "      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n\t      exercising permissions granted by this License.\n\t      \"Source\" form shall mean the preferred form for making modifications,\n\t      including but not limited to software source code, documentation\n\t      source, and configuration files.\n\t      \"Object\" form shall mean any form resulting from mechanical\n\t      transformation or translation of a Source form, including but\n\t      not limited to compiled object code, generated documentation,\n\t      and conversions to other media types.\n\t      \"Work\" shall mean the work of authorship, whether in Source or\n", "      Object form, made available under the License, as indicated by a\n\t      copyright notice that is included in or attached to the work\n\t      (an example is provided in the Appendix below).\n\t      \"Derivative Works\" shall mean any work, whether in Source or Object\n\t      form, that is based on (or derived from) the Work and for which the\n\t      editorial revisions, annotations, elaborations, or other modifications\n\t      represent, as a whole, an original work of authorship. For the purposes\n\t      of this License, Derivative Works shall not include works that remain\n\t      separable from, or merely link (or bind by name) to the interfaces of,\n\t      the Work and Derivative Works thereof.\n", "      \"Contribution\" shall mean any work of authorship, including\n\t      the original version of the Work and any modifications or additions\n\t      to that Work or Derivative Works thereof, that is intentionally\n\t      submitted to Licensor for inclusion in the Work by the copyright owner\n\t      or by an individual or Legal Entity authorized to submit on behalf of\n\t      the copyright owner. For the purposes of this definition, \"submitted\"\n\t      means any form of electronic, verbal, or written communication sent\n\t      to the Licensor or its representatives, including but not limited to\n\t      communication on electronic mailing lists, source code control systems,\n\t      and issue tracking systems that are managed by, or on behalf of, the\n", "      Licensor for the purpose of discussing and improving the Work, but\n\t      excluding communication that is conspicuously marked or otherwise\n\t      designated in writing by the copyright owner as \"Not a Contribution.\"\n\t      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n\t      on behalf of whom a Contribution has been received by Licensor and\n\t      subsequently incorporated within the Work.\n\t   2. Grant of Copyright License. Subject to the terms and conditions of\n\t      this License, each Contributor hereby grants to You a perpetual,\n\t      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n\t      copyright license to reproduce, prepare Derivative Works of,\n", "      publicly display, publicly perform, sublicense, and distribute the\n\t      Work and such Derivative Works in Source or Object form.\n\t   3. Grant of Patent License. Subject to the terms and conditions of\n\t      this License, each Contributor hereby grants to You a perpetual,\n\t      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n\t      (except as stated in this section) patent license to make, have made,\n\t      use, offer to sell, sell, import, and otherwise transfer the Work,\n\t      where such license applies only to those patent claims licensable\n\t      by such Contributor that are necessarily infringed by their\n\t      Contribution(s) alone or by combination of their Contribution(s)\n", "      with the Work to which such Contribution(s) was submitted. If You\n\t      institute patent litigation against any entity (including a\n\t      cross-claim or counterclaim in a lawsuit) alleging that the Work\n\t      or a Contribution incorporated within the Work constitutes direct\n\t      or contributory patent infringement, then any patent licenses\n\t      granted to You under this License for that Work shall terminate\n\t      as of the date such litigation is filed.\n\t   4. Redistribution. You may reproduce and distribute copies of the\n\t      Work or Derivative Works thereof in any medium, with or without\n\t      modifications, and in Source or Object form, provided that You\n", "      meet the following conditions:\n\t      (a) You must give any other recipients of the Work or\n\t          Derivative Works a copy of this License; and\n\t      (b) You must cause any modified files to carry prominent notices\n\t          stating that You changed the files; and\n\t      (c) You must retain, in the Source form of any Derivative Works\n\t          that You distribute, all copyright, patent, trademark, and\n\t          attribution notices from the Source form of the Work,\n\t          excluding those notices that do not pertain to any part of\n\t          the Derivative Works; and\n", "      (d) If the Work includes a \"NOTICE\" text file as part of its\n\t          distribution, then any Derivative Works that You distribute must\n\t          include a readable copy of the attribution notices contained\n\t          within such NOTICE file, excluding those notices that do not\n\t          pertain to any part of the Derivative Works, in at least one\n\t          of the following places: within a NOTICE text file distributed\n\t          as part of the Derivative Works; within the Source form or\n\t          documentation, if provided along with the Derivative Works; or,\n\t          within a display generated by the Derivative Works, if and\n\t          wherever such third-party notices normally appear. The contents\n", "          of the NOTICE file are for informational purposes only and\n\t          do not modify the License. You may add Your own attribution\n\t          notices within Derivative Works that You distribute, alongside\n\t          or as an addendum to the NOTICE text from the Work, provided\n\t          that such additional attribution notices cannot be construed\n\t          as modifying the License.\n\t      You may add Your own copyright statement to Your modifications and\n\t      may provide additional or different license terms and conditions\n\t      for use, reproduction, or distribution of Your modifications, or\n\t      for any such Derivative Works as a whole, provided Your use,\n", "      reproduction, and distribution of the Work otherwise complies with\n\t      the conditions stated in this License.\n\t   5. Submission of Contributions. Unless You explicitly state otherwise,\n\t      any Contribution intentionally submitted for inclusion in the Work\n\t      by You to the Licensor shall be under the terms and conditions of\n\t      this License, without any additional terms or conditions.\n\t      Notwithstanding the above, nothing herein shall supersede or modify\n\t      the terms of any separate license agreement you may have executed\n\t      with Licensor regarding such Contributions.\n\t   6. Trademarks. This License does not grant permission to use the trade\n", "      names, trademarks, service marks, or product names of the Licensor,\n\t      except as required for reasonable and customary use in describing the\n\t      origin of the Work and reproducing the content of the NOTICE file.\n\t   7. Disclaimer of Warranty. Unless required by applicable law or\n\t      agreed to in writing, Licensor provides the Work (and each\n\t      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n\t      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n\t      implied, including, without limitation, any warranties or conditions\n\t      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n\t      PARTICULAR PURPOSE. You are solely responsible for determining the\n", "      appropriateness of using or redistributing the Work and assume any\n\t      risks associated with Your exercise of permissions under this License.\n\t   8. Limitation of Liability. In no event and under no legal theory,\n\t      whether in tort (including negligence), contract, or otherwise,\n\t      unless required by applicable law (such as deliberate and grossly\n\t      negligent acts) or agreed to in writing, shall any Contributor be\n\t      liable to You for damages, including any direct, indirect, special,\n\t      incidental, or consequential damages of any character arising as a\n\t      result of this License or out of the use or inability to use the\n\t      Work (including but not limited to damages for loss of goodwill,\n", "      work stoppage, computer failure or malfunction, or any and all\n\t      other commercial damages or losses), even if such Contributor\n\t      has been advised of the possibility of such damages.\n\t   9. Accepting Warranty or Additional Liability. While redistributing\n\t      the Work or Derivative Works thereof, You may choose to offer,\n\t      and charge a fee for, acceptance of support, warranty, indemnity,\n\t      or other liability obligations and/or rights consistent with this\n\t      License. However, in accepting such obligations, You may act only\n\t      on Your own behalf and on Your sole responsibility, not on behalf\n\t      of any other Contributor, and only if You agree to indemnify,\n", "      defend, and hold each Contributor harmless for any liability\n\t      incurred by, or claims asserted against, such Contributor by reason\n\t      of your accepting any such warranty or additional liability.\n\t   END OF TERMS AND CONDITIONS\n\t\"\"\"\n\tfrom typing import Tuple, Dict, Optional\n\timport torch\n\timport torch.nn.functional as F\n\tfrom kornia.filters import filter2d, get_gaussian_kernel2d\n\tfrom kornia.utils import create_meshgrid\n", "from kornia.augmentation.base import GeometricAugmentationBase2D\n\tclass RandomElasticTransform(GeometricAugmentationBase2D):\n\t    r\"\"\"Add random elastic transformation to a tensor image.\n\t    .. image:: _static/img/RandomElasticTransform.png\n\t    Args:\n\t        kernel_size: the size of the Gaussian kernel.\n\t        sigma: The standard deviation of the Gaussian in the y and x directions,\n\t          respectively. Larger sigma results in smaller pixel displacements.\n\t        alpha: The scaling factor that controls the intensity of the deformation\n\t          in the y and x directions, respectively.\n", "        align_corners: Interpolation flag used by `grid_sample`.\n\t        mode: Interpolation mode used by `grid_sample`. Either 'bilinear' or 'nearest'.\n\t        padding_mode: The padding used by ```grid_sample```. Either 'zeros', 'border' or 'refection'.\n\t        return_transform: if ``True`` return the matrix describing the transformation applied to each\n\t            input tensor. If ``False`` and the input is a tuple the applied transformation won't be concatenated.\n\t        same_on_batch: apply the same transformation across the batch.\n\t        p: probability of applying the transformation.\n\t    .. note::\n\t        This function internally uses :func:`kornia.geometry.transform.elastic_transform2d`.\n\t    Examples:\n", "        >>> img = torch.ones(1, 1, 2, 2)\n\t        >>> out = RandomElasticTransform()(img)\n\t        >>> out.shape\n\t        torch.Size([1, 1, 2, 2])\n\t    To apply the exact augmenation again, you may take the advantage of the previous parameter state:\n\t        >>> input = torch.randn(1, 3, 32, 32)\n\t        >>> aug = RandomElasticTransform(p=1.)\n\t        >>> (aug(input) == aug(input, params=aug._params)).all()\n\t        tensor(True)\n\t    \"\"\"\n", "    def __init__(\n\t        self,\n\t        kernel_size: Tuple[int, int] = (63, 63),\n\t        sigma: Tuple[float, float] = (32.0, 32.0),\n\t        alpha: Tuple[float, float] = (1.0, 1.0),\n\t        align_corners: bool = False,\n\t        mode: str = \"bilinear\",\n\t        padding_mode: str = \"zeros\",\n\t        return_transform: bool = False,\n\t        same_on_batch: bool = False,\n", "        p: float = 0.5,\n\t        keepdim: bool = False,\n\t    ) -> None:\n\t        super().__init__(\n\t            p=p,\n\t            return_transform=return_transform,\n\t            same_on_batch=same_on_batch,\n\t            p_batch=1.0,\n\t            keepdim=keepdim,\n\t        )\n", "        self.flags = dict(\n\t            kernel_size=tuple(kernel_size),\n\t            sigma=tuple(sigma),\n\t            alpha=tuple(alpha),\n\t            align_corners=align_corners,\n\t            mode=mode,\n\t            padding_mode=padding_mode,\n\t        )\n\t    def generate_parameters(self, shape: torch.Size) -> Dict[str, torch.Tensor]:\n\t        B, _, H, W = shape\n", "        if self.same_on_batch:\n\t            noise = torch.rand(1, 2, H, W, device=self.device, dtype=self.dtype).repeat(\n\t                B, 1, 1, 1\n\t            )\n\t        else:\n\t            noise = torch.rand(B, 2, H, W, device=self.device, dtype=self.dtype)\n\t        return dict(noise=noise * 2 - 1)\n\t    # TODO: It is incorrect to return identity\n\t    def compute_transformation(\n\t        self, input: torch.Tensor, params: Dict[str, torch.Tensor]\n", "    ) -> torch.Tensor:\n\t        return self.identity_matrix(input)\n\t    def apply_transform(\n\t        self,\n\t        input: torch.Tensor,\n\t        params: Dict[str, torch.Tensor],\n\t        transform: Optional[torch.Tensor] = None,\n\t    ) -> torch.Tensor:\n\t        return elastic_transform2d(\n\t            input,\n", "            params[\"noise\"].to(input),\n\t            self.flags[\"kernel_size\"],\n\t            self.flags[\"sigma\"],\n\t            self.flags[\"alpha\"],\n\t            self.flags[\"align_corners\"],\n\t            self.flags[\"mode\"],\n\t            self.flags[\"padding_mode\"],\n\t        )\n\t    def apply_to_coordinates(self, coords):\n\t        assert self._params is not None and \"noise\" in self._params\n", "        # noise shape is Bx2xHxW and the two offsets are in order x, y.\n\t        noise = self._params[\"noise\"]\n\t        result = torch.empty_like(coords)\n\t        assert torch.all(coords >= 0.0)\n\t        assert torch.all(coords[:, 0] < self._params[\"forward_input_shape\"][2])\n\t        assert torch.all(coords[:, 1] < self._params[\"forward_input_shape\"][3])\n\t        # These are automatically all in-bounds given the above checks.\n\t        coords_floor = coords.floor()\n\t        # These have to be made in-bounds.\n\t        coords_ceil = coords.ceil()\n", "        coords_ceil[:, 0] = coords_ceil[:, 0].clamp(\n\t            0, self._params[\"forward_input_shape\"][2]\n\t        )\n\t        coords_ceil[:, 1] = coords_ceil[:, 1].clamp(\n\t            1, self._params[\"forward_input_shape\"][3]\n\t        )\n\t        # This is automatically in [0., 1.[\n\t        coords_rem = coords - coords_floor\n\t        x_offs_floor = self._params[\"noise\"][\n\t            range(self._params[\"forward_input_shape\"][0]),\n", "            0,\n\t            coords_floor[:, 0].long(),\n\t            coords_floor[:, 1].long(),\n\t        ].to(coords.device)\n\t        x_offs_ceil = self._params[\"noise\"][\n\t            range(self._params[\"forward_input_shape\"][0]),\n\t            0,\n\t            coords_ceil[:, 0].long(),\n\t            coords_ceil[:, 1].long(),\n\t        ].to(coords.device)\n", "        offset_x = (\n\t            x_offs_floor * (1.0 - coords_rem[:, 1]) + x_offs_ceil * coords_rem[:, 1]\n\t        )\n\t        offset_x *= self._params[\"forward_input_shape\"][3]\n\t        y_offs_floor = self._params[\"noise\"][\n\t            range(self._params[\"forward_input_shape\"][0]),\n\t            1,\n\t            coords_floor[:, 0].long(),\n\t            coords_floor[:, 1].long(),\n\t        ].to(coords.device)\n", "        y_offs_ceil = self._params[\"noise\"][\n\t            range(self._params[\"forward_input_shape\"][0]),\n\t            1,\n\t            coords_ceil[:, 0].long(),\n\t            coords_ceil[:, 1].long(),\n\t        ].to(coords.device)\n\t        offset_y = (\n\t            y_offs_floor * (1.0 - coords_rem[:, 0]) + y_offs_ceil * coords_rem[:, 0]\n\t        )\n\t        offset_y *= self._params[\"forward_input_shape\"][2]\n", "        result[:, 0] = coords[:, 0] + offset_y\n\t        result[:, 1] = coords[:, 1] + offset_x\n\t        # Clamp (as is done in the deformation code, too).\n\t        result[:, 0] = result[:, 0].clamp(0, self._params[\"forward_input_shape\"][2])\n\t        result[:, 1] = result[:, 1].clamp(0, self._params[\"forward_input_shape\"][3])\n\t        return result\n\tdef elastic_transform2d(\n\t    image: torch.Tensor,\n\t    noise: torch.Tensor,\n\t    kernel_size: Tuple[int, int] = (63, 63),\n", "    sigma: Tuple[float, float] = (32.0, 32.0),\n\t    alpha: Tuple[float, float] = (1.0, 1.0),\n\t    align_corners: bool = False,\n\t    mode: str = \"bilinear\",\n\t    padding_mode: str = \"zeros\",\n\t) -> torch.Tensor:\n\t    r\"\"\"Apply elastic transform of images as described in :cite:`Simard2003BestPF`.\n\t    .. image:: _static/img/elastic_transform2d.png\n\t    Args:\n\t        image: Input image to be transformed with shape :math:`(B, C, H, W)`.\n", "        noise: Noise image used to spatially transform the input image. Same\n\t          resolution as the input image with shape :math:`(B, 2, H, W)`. The coordinates order\n\t          it is expected to be in x-y.\n\t        kernel_size: the size of the Gaussian kernel.\n\t        sigma: The standard deviation of the Gaussian in the y and x directions,\n\t          respectively. Larger sigma results in smaller pixel displacements.\n\t        alpha : The scaling factor that controls the intensity of the deformation\n\t          in the y and x directions, respectively.\n\t        align_corners: Interpolation flag used by ```grid_sample```.\n\t        mode: Interpolation mode used by ```grid_sample```. Either ``'bilinear'`` or ``'nearest'``.\n", "        padding_mode: The padding used by ```grid_sample```. Either ``'zeros'``, ``'border'`` or ``'refection'``.\n\t    .. note:\n\t        ```sigma``` and ```alpha``` can also be a ``torch.Tensor``. However, you could not torchscript\n\t         this function with tensor until PyTorch 1.8 is released.\n\t    Returns:\n\t        the elastically transformed input image with shape :math:`(B,C,H,W)`.\n\t    Example:\n\t        >>> image = torch.rand(1, 3, 5, 5)\n\t        >>> noise = torch.rand(1, 2, 5, 5, requires_grad=True)\n\t        >>> image_hat = elastic_transform2d(image, noise, (3, 3))\n", "        >>> image_hat.mean().backward()\n\t        >>> image = torch.rand(1, 3, 5, 5)\n\t        >>> noise = torch.rand(1, 2, 5, 5)\n\t        >>> sigma = torch.tensor([4., 4.], requires_grad=True)\n\t        >>> image_hat = elastic_transform2d(image, noise, (3, 3), sigma)\n\t        >>> image_hat.mean().backward()\n\t        >>> image = torch.rand(1, 3, 5, 5)\n\t        >>> noise = torch.rand(1, 2, 5, 5)\n\t        >>> alpha = torch.tensor([16., 32.], requires_grad=True)\n\t        >>> image_hat = elastic_transform2d(image, noise, (3, 3), alpha=alpha)\n", "        >>> image_hat.mean().backward()\n\t    \"\"\"\n\t    if not isinstance(image, torch.Tensor):\n\t        raise TypeError(f\"Input image is not torch.Tensor. Got {type(image)}\")\n\t    if not isinstance(noise, torch.Tensor):\n\t        raise TypeError(f\"Input noise is not torch.Tensor. Got {type(noise)}\")\n\t    if not len(image.shape) == 4:\n\t        raise ValueError(f\"Invalid image shape, we expect BxCxHxW. Got: {image.shape}\")\n\t    if not len(noise.shape) == 4 or noise.shape[1] != 2:\n\t        raise ValueError(f\"Invalid noise shape, we expect Bx2xHxW. Got: {noise.shape}\")\n", "    # Get Gaussian kernel for 'y' and 'x' displacement\n\t    kernel_x: torch.Tensor = get_gaussian_kernel2d(kernel_size, (sigma[0], sigma[0]))[\n\t        None\n\t    ]\n\t    kernel_y: torch.Tensor = get_gaussian_kernel2d(kernel_size, (sigma[1], sigma[1]))[\n\t        None\n\t    ]\n\t    # Convolve over a random displacement matrix and scale them with 'alpha'\n\t    disp_x: torch.Tensor = noise[:, :1]\n\t    disp_y: torch.Tensor = noise[:, 1:]\n", "    disp_x = filter2d(disp_x, kernel=kernel_y, border_type=\"constant\") * alpha[0]\n\t    disp_y = filter2d(disp_y, kernel=kernel_x, border_type=\"constant\") * alpha[1]\n\t    # stack and normalize displacement\n\t    disp = torch.cat([disp_x, disp_y], dim=1).permute(0, 2, 3, 1)\n\t    # Warp image based on displacement matrix\n\t    _, _, h, w = image.shape\n\t    grid = create_meshgrid(h, w, device=image.device).to(image.dtype)\n\t    warped = F.grid_sample(\n\t        image,\n\t        (grid + disp).clamp(-1, 1),\n", "        align_corners=align_corners,\n\t        mode=mode,\n\t        padding_mode=padding_mode,\n\t    )\n\t    return warped\n"]}
{"filename": "calibration/camera.py", "chunked_list": ["from typing import Optional, Tuple\n\timport numpy as np\n\timport torch\n\timport torch.nn.functional as F\n\tfrom .networks import LensNet\n\t# The following methods (rotation_6d_to_matrix and matrix_to_rotation_6d) fall under the PyTorch3D license.\n\tdef rotation_6d_to_matrix(d6: torch.Tensor) -> torch.Tensor:\n\t    \"\"\"\n\t    Converts 6D rotation representation by Zhou et al. [1] to rotation matrix\n\t    using Gram--Schmidt orthogonalization per Section B of [1].\n", "    Args:\n\t        d6: 6D rotation representation, of size (*, 6)\n\t    Returns:\n\t        batch of rotation matrices of size (*, 3, 3)\n\t    [1] Zhou, Y., Barnes, C., Lu, J., Yang, J., & Li, H.\n\t    On the Continuity of Rotation Representations in Neural Networks.\n\t    IEEE Conference on Computer Vision and Pattern Recognition, 2019.\n\t    Retrieved from http://arxiv.org/abs/1812.07035\n\t    \"\"\"\n\t    a1, a2 = d6[..., :3], d6[..., 3:]\n", "    b1 = F.normalize(a1, dim=-1)\n\t    b2 = a2 - (b1 * a2).sum(-1, keepdim=True) * b1\n\t    b2 = F.normalize(b2, dim=-1)\n\t    b3 = torch.cross(b1, b2, dim=-1)\n\t    return torch.stack((b1, b2, b3), dim=-2)\n\tdef matrix_to_rotation_6d(matrix: torch.Tensor) -> torch.Tensor:\n\t    \"\"\"\n\t    Converts rotation matrices to 6D rotation representation by Zhou et al. [1]\n\t    by dropping the last row. Note that 6D representation is not unique.\n\t    Args:\n", "        matrix: batch of rotation matrices of size (*, 3, 3)\n\t    Returns:\n\t        6D rotation representation, of size (*, 6)\n\t    [1] Zhou, Y., Barnes, C., Lu, J., Yang, J., & Li, H.\n\t    On the Continuity of Rotation Representations in Neural Networks.\n\t    IEEE Conference on Computer Vision and Pattern Recognition, 2019.\n\t    Retrieved from http://arxiv.org/abs/1812.07035\n\t    \"\"\"\n\t    batch_dim = matrix.size()[:-2]\n\t    return matrix[..., :2, :].clone().reshape(batch_dim + (6,))\n", "def zero_K_gradient(grad: torch.Tensor):\n\t    # We zero the gradients for regions that we want to keep fixed.\n\t    grad[0, 1] = 0.0\n\t    grad[1, 0] = 0.0\n\t    grad[2, :] = 0.0\n\tclass Camera:\n\t    def __init__(\n\t        self,\n\t        resolution_w_h: Tuple[int, int],\n\t        K: torch.Tensor,\n", "        lensnet: Optional[LensNet] = None,\n\t        RT=None,\n\t    ):\n\t        \"\"\"\n\t        Parameters\n\t        ==========\n\t        resolution_w_h: (int, int). Resolution width and height.\n\t        K: torch.tensor. Intrinsic matrix of the form\n\t            f_x  0   c_x\n\t             0  f_y  c_y\n", "             0   0    1\n\t        lensnet: LensNet. Distortion model. Can be None\n\t            if not existent (pinhole model).\n\t        RT: torch.tensor. Extrinsic w2c matrix of the form\n\t            r11 r12 r13 t1\n\t            r21 r22 r23 t2\n\t            r31 r32 r33 t3\n\t        \"\"\"\n\t        assert resolution_w_h[0] > 0\n\t        assert resolution_w_h[1] > 0\n", "        assert len(resolution_w_h) == 2\n\t        self.resolution_w_h = resolution_w_h\n\t        assert isinstance(K, torch.Tensor)\n\t        assert K.ndim == 2\n\t        assert K.shape[0] == 3\n\t        assert K.shape[1] == 3\n\t        assert K[0, 0] > 0.0\n\t        assert K[0, 1] == 0.0\n\t        assert K[1, 0] == 0.0\n\t        assert K[1, 1] > 0.0\n", "        assert K[2, 0] == 0.0\n\t        assert K[2, 1] == 0.0\n\t        assert K[2, 2] == 1.0\n\t        self.K = K\n\t        self.K.register_hook(zero_K_gradient)\n\t        assert lensnet is None or isinstance(lensnet, LensNet)\n\t        self.lensnet = lensnet\n\t        assert RT is None or isinstance(RT, torch.Tensor)\n\t        if RT is None:\n\t            self.RT = torch.eye(3, 4, dtype=torch.float32, device=K.device)\n", "        else:\n\t            assert RT.ndim == 2\n\t            assert RT.shape[0] == 3\n\t            assert RT.shape[1] == 4\n\t            self.RT = RT\n\t    @property\n\t    def RT(self):\n\t        rot_mat = rotation_6d_to_matrix(self.R[None, ...])[0]\n\t        return torch.cat((rot_mat, self.T), dim=1)\n\t    @RT.setter\n", "    def RT(self, value):\n\t        self.R = matrix_to_rotation_6d(value[:, :3])\n\t        self.T = value[:, 3:4]\n\t    @staticmethod\n\t    def homogenize(X: torch.Tensor):\n\t        assert X.ndim == 2\n\t        assert X.shape[1] in (2, 3)\n\t        return torch.cat(\n\t            (X, torch.ones((X.shape[0], 1), dtype=X.dtype, device=X.device)), dim=1\n\t        )\n", "    @staticmethod\n\t    def dehomogenize(X: torch.Tensor):\n\t        assert X.ndim == 2\n\t        assert X.shape[1] in (3, 4)\n\t        return X[:, :-1] / X[:, -1:]\n\t    def world_to_view(self, P_world: torch.Tensor):\n\t        assert P_world.ndim == 2\n\t        assert P_world.shape[1] == 3\n\t        P_world_hom = self.homogenize(P_world)\n\t        P_view = (self.RT @ P_world_hom.T).T\n", "        return P_view\n\t    def view_to_world(self, P_view: torch.Tensor):\n\t        assert P_view.ndim == 2\n\t        assert P_view.shape[1] == 3\n\t        P_view_shifted = P_view - self.RT[:, 3][None, ...]\n\t        P_world = (self.RT[:, :3].T @ P_view_shifted.T).T\n\t        return P_world\n\t    def view_to_sensor(self, P_view: torch.Tensor):\n\t        P_view_outsidelens_direction = self.dehomogenize(P_view)  # x' = x/z, y' = y/z\n\t        if self.lensnet is not None:\n", "            P_view_insidelens_direction = self.lensnet.forward(\n\t                P_view_outsidelens_direction, sensor_to_frustum=False\n\t            )\n\t        else:\n\t            P_view_insidelens_direction = P_view_outsidelens_direction\n\t        P_view_insidelens_direction_hom = self.homogenize(P_view_insidelens_direction)\n\t        P_sensor = self.dehomogenize((self.K @ P_view_insidelens_direction_hom.T).T)\n\t        return P_sensor\n\t    def get_rays_view(self, P_sensor: torch.Tensor):\n\t        assert P_sensor.ndim == 2\n", "        assert P_sensor.shape[1] == 2\n\t        P_sensor_hom = self.homogenize(P_sensor)\n\t        P_view_insidelens_direction_hom = (torch.inverse(self.K) @ P_sensor_hom.T).T\n\t        P_view_insidelens_direction = self.dehomogenize(P_view_insidelens_direction_hom)\n\t        if self.lensnet is not None:\n\t            P_view_outsidelens_direction = self.lensnet.forward(\n\t                P_view_insidelens_direction, sensor_to_frustum=True\n\t            )\n\t        else:\n\t            P_view_outsidelens_direction = P_view_insidelens_direction\n", "        return self.homogenize(P_view_outsidelens_direction)\n\t    def get_rays_world(self, P_sensor: torch.tensor):\n\t        rays_view = self.get_rays_view(P_sensor)\n\t        origins_view = torch.zeros_like(rays_view)\n\t        origins_world = self.view_to_world(origins_view)\n\t        rays_world = (self.RT[:, :3].T @ rays_view.T).T\n\t        return origins_world, rays_world\n\t    def sensor_to_view(self, P_sensor_and_depth: torch.Tensor):\n\t        assert P_sensor_and_depth.ndim == 2\n\t        assert P_sensor_and_depth.shape[1] == 3\n", "        P_sensor, P_depth = P_sensor_and_depth[:, :2], P_sensor_and_depth[:, 2:3]\n\t        rays = self.get_rays_view(P_sensor)\n\t        P_view = rays * P_depth\n\t        return P_view\n\t    def project_points(self, P_world: torch.Tensor):\n\t        P_view_outsidelens = self.world_to_view(P_world)\n\t        P_sensor = self.view_to_sensor(P_view_outsidelens)\n\t        return P_sensor\n\t    def unproject_points(self, P_sensor: torch.Tensor):\n\t        P_view_outsidelens = self.sensor_to_view(P_sensor)\n", "        P_world = self.view_to_world(P_view_outsidelens)\n\t        return P_world\n"]}
{"filename": "calibration/scripts/calibrate.py", "chunked_list": ["import json\n\timport logging\n\tfrom os import path\n\timport cv2\n\timport hydra\n\timport imageio\n\timport numpy as np\n\timport torch\n\timport torchvision.transforms as transforms\n\timport tqdm\n", "from matplotlib import pyplot as plt\n\tfrom torch.nn import functional as F\n\tfrom torch.utils.tensorboard import SummaryWriter\n\tfrom ..camera import Camera\n\tfrom ..config import Config\n\tfrom ..networks import iResNet, LensNet \n\tfrom ..util import batched_func\n\tLOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n", "def cli(cfg: Config):\n\t    \"\"\"\n\t    Calibrate a lens using previously acquired data in `data/live`.\n\t    Uses gradient-descent based optimization with RLS to be robust w.r.t.\n\t    outliers to calibrate the lens. Does an automatic comparison with the\n\t    OpenCV model.\n\t    \"\"\"\n\t    LOGGER.info(\"Loading detection data...\")\n\t    storage_fp = path.join(\"..\", \"..\", \"data/target\")\n\t    with open(path.join(storage_fp, \"points.json\"), \"r\") as inf:\n", "        cam_info = json.load(inf)\n\t    n_points = 0\n\t    n_frames = 0\n\t    board_coords_val = []\n\t    frame_coords_val = []\n\t    subs_fac = cfg.calibration.subs_fac\n\t    LOGGER.info(\n\t        \"Converting representation for initialization (subsampling every %dth frame)...\",\n\t        subs_fac,\n\t    )\n", "    for idx, (im_board_coords, im_frame_coords) in enumerate(\n\t        zip(cam_info[\"board_coordinates_xyz\"], cam_info[\"frame_coordinates_xy\"])\n\t    ):\n\t        if idx % subs_fac == 0 and len(im_board_coords) >= 6:\n\t            board_coords_val.append(np.array(im_board_coords, dtype=np.float32))\n\t            frame_coords_val.append(np.array(im_frame_coords, dtype=np.float32))\n\t            n_points += frame_coords_val[-1].shape[0]\n\t            n_frames += 1\n\t    LOGGER.info(f\"Using {n_points} points from {n_frames} frames.\")\n\t    LOGGER.info(\"Finding initialization...\")\n", "    (\n\t        retval,\n\t        camera_matrix,\n\t        dist_coeffs,\n\t        r_vecs_obj_to_cam,\n\t        t_vecs_obj_to_cam,\n\t        _,  # stdDeviationsIntrinsics,\n\t        _,  # stdDeviationsExtrinsics,\n\t        _,  # perViewErrors,\n\t    ) = cv2.calibrateCameraExtended(\n", "        board_coords_val,\n\t        frame_coords_val,\n\t        tuple(cam_info[\"resolution_wh\"]),\n\t        None,\n\t        None,\n\t        flags=cv2.CALIB_RATIONAL_MODEL,\n\t    )\n\t    LOGGER.info(f\"Overall RMS reprojection error after initialization: {retval}.\")\n\t    LOGGER.info(\"Initializing lens net...\")\n\t    RTs_val = []\n", "    dev = torch.device(\"cuda\")\n\t    lens_net = iResNet().to(dev)\n\t    iResNet().test_inverse()\n\t    K = torch.from_numpy(camera_matrix).to(torch.float32).to(dev).requires_grad_()\n\t    cams_val = []\n\t    residuals_val = []\n\t    LOGGER.info(\"Preparing validation data...\")\n\t    for cam_idx, (r_vecs, t_vecs) in enumerate(\n\t        zip(r_vecs_obj_to_cam, t_vecs_obj_to_cam)\n\t    ):\n", "        RT = (\n\t            torch.from_numpy(\n\t                np.hstack((cv2.Rodrigues(r_vecs)[0], t_vecs)),\n\t            )\n\t            .to(torch.float32)\n\t            .to(dev)\n\t        ).requires_grad_()\n\t        RTs_val.append(RT)\n\t        cams_val.append(Camera(cam_info[\"resolution_wh\"], K, lens_net, RT))\n\t        proj_opencv = cv2.projectPoints(\n", "            board_coords_val[cam_idx],\n\t            r_vecs_obj_to_cam[cam_idx],\n\t            t_vecs_obj_to_cam[cam_idx],\n\t            camera_matrix,\n\t            dist_coeffs,\n\t        )[0][:, 0, :]\n\t        residuals_val.append(\n\t            np.square(np.linalg.norm(frame_coords_val[cam_idx] - proj_opencv, axis=1))\n\t        )\n\t    RMSE_opencv_val = np.sqrt(np.mean(np.concatenate(residuals_val, axis=0)))\n", "    LOGGER.info(f\"RMSE OpenCV: {RMSE_opencv_val}\")\n\t    LOGGER.info(\"Assembling training set...\")\n\t    RTs_train = []\n\t    cams_train = []\n\t    board_coords_train = []\n\t    frame_coords_train = []\n\t    n_points_train = 0\n\t    n_frames_train = 0\n\t    for idx, (im_board_coords, im_frame_coords) in enumerate(\n\t        zip(cam_info[\"board_coordinates_xyz\"], cam_info[\"frame_coordinates_xy\"])\n", "    ):\n\t        if idx % subs_fac != 0 and len(im_board_coords) >= 6:\n\t            board_coords_train.append(np.array(im_board_coords, dtype=np.float32))\n\t            frame_coords_train.append(np.array(im_frame_coords, dtype=np.float32))\n\t            n_points_train += frame_coords_train[-1].shape[0]\n\t            n_frames_train += 1\n\t            _, r_vecs, t_vecs = cv2.solvePnP(\n\t                board_coords_train[-1],\n\t                frame_coords_train[-1],\n\t                camera_matrix,\n", "                dist_coeffs,\n\t            )\n\t            RT = (\n\t                torch.from_numpy(\n\t                    np.hstack((cv2.Rodrigues(r_vecs)[0], t_vecs)),\n\t                )\n\t                .to(torch.float32)\n\t                .to(dev)\n\t            ).requires_grad_()\n\t            RTs_train.append(RT)\n", "            cams_train.append(Camera(cam_info[\"resolution_wh\"], K, lens_net, RT))\n\t            board_coords_train[-1] = (\n\t                torch.from_numpy(board_coords_train[-1]).to(torch.float32).to(dev)\n\t            )\n\t            frame_coords_train[-1] = (\n\t                torch.from_numpy(frame_coords_train[-1]).to(torch.float32).to(dev)\n\t            )\n\t    LOGGER.info(\n\t        f\"Using {n_points_train} points for training from {n_frames_train} frames.\"\n\t    )\n", "    LOGGER.info(\"Setting up optimizer...\")\n\t    scale = torch.nn.Parameter(torch.tensor(1.305)).requires_grad_()\n\t    optimizer_train = torch.optim.Adam(\n\t        [\n\t            K,\n\t        ]\n\t        + list(lens_net.parameters())\n\t        + RTs_train\n\t        + [scale],\n\t        lr=1e-4,\n", "    )\n\t    optimizer_val_RT = torch.optim.Adam(\n\t        RTs_val,\n\t        lr=1e-4,\n\t    )\n\t    if is_eval:\n\t        PATH = log_dir + \"/lensnet_latest.pt\"\n\t        checkpoint = torch.load(PATH)\n\t        lens_net.load_state_dict(checkpoint[\"model_state_dict\"])\n\t        optimizer_train.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n", "        RTs_train = checkpoint[\"RTs_train\"]\n\t        RTs_val = checkpoint[\"RTs_train\"]\n\t        K = checkpoint[\"K\"]\n\t        loss_vals = []\n\t        rows, cols = 3, 4\n\t        gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0}\n\t        fig, axarr = plt.subplots(rows, cols, gridspec_kw=gridspec_kw, figsize=(12, 9))\n\t        bleed = 0\n\t        fig.subplots_adjust(\n\t            left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed)\n", "        )\n\t        for cam_idx, (cam, board_coord_mat, frame_coord_mat, ax) in enumerate(\n\t            zip(cams_val, board_coords_val, frame_coords_val, axarr.ravel())\n\t        ):\n\t            board_coord_mat = (\n\t                torch.from_numpy(board_coord_mat).to(torch.float32).to(dev)\n\t            )\n\t            frame_coord_mat = (\n\t                torch.from_numpy(frame_coord_mat).to(torch.float32).to(dev)\n\t            )\n", "            projected = cam.project_points(board_coord_mat)\n\t            val_error = torch.square(\n\t                torch.linalg.norm(projected - frame_coord_mat, dim=1)\n\t            )  # RMSE\n\t            loss_vals.append(val_error.detach().clone())\n\t            # visualize keypoints\n\t            vis, camera_directions_w_lens = vis_lens(cam)\n\t            # ax.imshow(vis[..., :3])\n\t            ax.scatter(\n\t                projected.detach().cpu().numpy()[:, 0],\n", "                projected.detach().cpu().numpy()[:, 1],\n\t                marker=\"o\",\n\t                s=5,\n\t            )\n\t            ax.scatter(\n\t                frame_coord_mat.detach().cpu().numpy()[:, 0],\n\t                frame_coord_mat.detach().cpu().numpy()[:, 1],\n\t                marker=\"o\",\n\t                s=5,\n\t            )\n", "            ax.set_xlim((0, 512))\n\t            ax.set_ylim((0, 512))\n\t            ax.set_axis_off()\n\t        fig.savefig(log_dir + \"/vis_eval.png\")\n\t        plt.close(fig)\n\t        rows, cols = 1, 4\n\t        gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0}\n\t        fig, axarr = plt.subplots(rows, cols, gridspec_kw=gridspec_kw, figsize=(12, 3))\n\t        bleed = 0\n\t        fig.subplots_adjust(\n", "            left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed)\n\t        )\n\t        vis, camera_directions_w_lens = vis_lens(cams_val[0])\n\t        target_board_ABC = (\n\t            imageio.imread(path.join(storage_fp, \"target_rainbow_ABC.png\"))[..., :3]\n\t            / 255.0\n\t        )\n\t        target_board_path = path.join(storage_fp, \"target_rainbow.png\")\n\t        target_board = imageio.imread(target_board_path)[..., :3]\n\t        transform = transforms.ToTensor()\n", "        image = transform(target_board).unsqueeze(0).to(dev)\n\t        flow = camera_directions_w_lens.unsqueeze(0).to(dev) * 1.305\n\t        output = F.grid_sample(\n\t            image, flow, mode=\"bilinear\", padding_mode=\"zeros\", align_corners=False\n\t        )\n\t        output_img = output[0].permute(1, 2, 0).cpu().numpy()\n\t        axarr[0].imshow(target_board)\n\t        axarr[1].imshow(output_img)\n\t        axarr[2].imshow(target_board_ABC)\n\t        def rgb2gray(rgb):\n", "            return np.dot(rgb[..., :3], [0.2989, 0.5870, 0.1140])\n\t        emap = abs(target_board_ABC - output_img)\n\t        axarr[3].imshow(rgb2gray(emap), cmap=plt.get_cmap(\"gray\"))\n\t        for ax in axarr:\n\t            ax.set_axis_off()\n\t        fig.savefig(log_dir + \"/img_eval.png\")\n\t        plt.close(fig)\n\t        rmse = torch.sqrt(torch.cat(loss_vals, dim=0).mean())\n\t        print(\"rmse lensnet: \", rmse.item())\n\t    scheduler_type = \"super\"\n", "    if scheduler_type == \"linear\":\n\t        step_size = 20000  # 15000\n\t        final_ratio = 0.01  # 0.05\n\t        start_ratio = 0.15\n\t        duration_ratio = 0.6\n\t        def lambda_rule(ep):\n\t            lr_l = 1.0 - min(\n\t                1,\n\t                max(0, ep - start_ratio * step_size)\n\t                / float(duration_ratio * step_size),\n", "            ) * (1 - final_ratio)\n\t            return lr_l\n\t        scheduler = torch.optim.lr_scheduler.LambdaLR(\n\t            optimizer_train, lr_lambda=lambda_rule\n\t        )\n\t        LOGGER.info(\n\t            f\"LR scheduler has step size {step_size}, final ratio {final_ratio}, start ratio {start_ratio}, duration ratio {duration_ratio}.\"\n\t        )\n\t    elif scheduler_type == \"super\":\n\t        step_size = 12000\n", "        max_lr = 1e-4\n\t        pct_start = 0.05\n\t        scheduler = torch.optim.lr_scheduler.OneCycleLR(\n\t            optimizer_train,\n\t            max_lr=max_lr,\n\t            total_steps=step_size,\n\t            pct_start=pct_start,\n\t        )\n\t        LOGGER.info(\n\t            f\"LR scheduler has step size {step_size}, max lr {max_lr}, pct_start {pct_start}\"\n", "        )\n\t    LOGGER.info(f\"Lens has {sum(p.numel() for p in lens_net.parameters())} parameters.\")\n\t    writer = SummaryWriter(log_dir=log_dir)\n\t    LOGGER.info(f\"Writing logs and tensorboard to `{log_dir}`.\")\n\t    LOGGER.info(\"Optimizing...\")\n\t    start_epoch = 0\n\t    if is_eval:\n\t        start_epoch = checkpoint[\"epoch\"]\n\t    rnge = tqdm.trange(start_epoch, 500)\n\t    # load data\n", "    dense_matching = False\n\t    if dense_matching:\n\t        target_board_ABC = (\n\t            imageio.imread(path.join(storage_fp, \"target.png\"))[..., :3]\n\t            / 255.0\n\t        )\n\t        target_board_path = path.join(storage_fp, \"target.png\")\n\t        target_board = imageio.imread(target_board_path)[..., :3]\n\t        transform = transforms.ToTensor()\n\t        image = transform(target_board).unsqueeze(0).to(dev)\n", "        image_ABC = transform(target_board_ABC).unsqueeze(0).to(dev)\n\t        l1_loss = torch.nn.L1Loss()\n\t    for epoch_idx in rnge:\n\t        loss_vals = []\n\t        loss_vals_train = []\n\t        loss_train = []\n\t        for _, (cam, board_coord_mat, frame_coord_mat) in tqdm.tqdm(\n\t            enumerate(zip(cams_train, board_coords_train, frame_coords_train)),\n\t            total=len(cams_train),\n\t        ):\n", "            optimizer_train.zero_grad()\n\t            projected = cam.project_points(board_coord_mat)\n\t            loss = torch.linalg.norm(projected - frame_coord_mat, dim=1).mean()\n\t            loss_vals_train.append(loss.item())\n\t            proj_error = torch.square(\n\t                torch.linalg.norm(projected - frame_coord_mat, dim=1)\n\t            )\n\t            loss_train.append(proj_error)\n\t            # dense match loss\n\t            if dense_matching:\n", "                camera_directions_w_lens = cam.project_lens()\n\t                flow = camera_directions_w_lens.unsqueeze(0) * scale\n\t                output = F.grid_sample(\n\t                    image[..., ::2, ::2],\n\t                    flow,\n\t                    mode=\"bilinear\",\n\t                    padding_mode=\"zeros\",\n\t                    align_corners=False,\n\t                )\n\t                dense_loss = l1_loss(image_ABC[..., ::2, ::2], output)\n", "                loss += dense_loss * 50\n\t            loss.backward()\n\t            optimizer_train.step()\n\t            scheduler.step()\n\t        avg_loss = np.array(loss_vals_train).mean()\n\t        if dense_matching:\n\t            writer.add_scalar(\"dense_loss\", dense_loss, epoch_idx)\n\t        writer.add_scalar(\"reproj_loss\", avg_loss, epoch_idx)\n\t        for cam_idx, (cam, board_coord_mat, frame_coord_mat) in enumerate(\n\t            zip(cams_val, board_coords_val, frame_coords_val)\n", "        ):\n\t            optimizer_val_RT.zero_grad()\n\t            board_coord_mat = (\n\t                torch.from_numpy(board_coord_mat).to(torch.float32).to(dev)\n\t            )\n\t            frame_coord_mat = (\n\t                torch.from_numpy(frame_coord_mat).to(torch.float32).to(dev)\n\t            )\n\t            projected = cam.project_points(board_coord_mat)\n\t            val_error = torch.square(\n", "                torch.linalg.norm(projected - frame_coord_mat, dim=1)\n\t            )  # RMSE\n\t            loss_vals.append(val_error.detach().clone())\n\t            loss = torch.linalg.norm(projected - frame_coord_mat, dim=1).mean()\n\t            # dense match loss\n\t            if dense_matching:\n\t                camera_directions_w_lens = cam.project_lens()\n\t                flow = camera_directions_w_lens.unsqueeze(0) * scale\n\t                output = F.grid_sample(\n\t                    image[..., ::2, ::2],\n", "                    flow,\n\t                    mode=\"bilinear\",\n\t                    padding_mode=\"zeros\",\n\t                    align_corners=False,\n\t                )\n\t                dense_loss = l1_loss(image_ABC[..., ::2, ::2], output)\n\t                loss += dense_loss * 50\n\t            loss.backward()\n\t            optimizer_val_RT.step()\n\t            if epoch_idx % 10 == 0 and cam_idx % 100 == 0 and dense_matching:\n", "                def rgb2gray(rgb):\n\t                    return np.dot(rgb[..., :3], [0.2989, 0.5870, 0.1140])\n\t                rows, cols = 1, 4\n\t                gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0}\n\t                fig, axarr = plt.subplots(\n\t                    rows, cols, gridspec_kw=gridspec_kw, figsize=(12, 3)\n\t                )\n\t                bleed = 0\n\t                fig.subplots_adjust(\n\t                    left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed)\n", "                )\n\t                axarr[0].imshow(target_board)\n\t                output_img = output[0].permute(1, 2, 0).detach().cpu().numpy()\n\t                axarr[1].imshow(output_img)\n\t                axarr[2].imshow(target_board_ABC[::2, ::2, :])\n\t                emap = abs(target_board_ABC[::2, ::2, :] - output_img)\n\t                axarr[3].imshow(rgb2gray(emap), cmap=plt.get_cmap(\"gray\"))\n\t                for ax in axarr:\n\t                    ax.set_axis_off()\n\t                fig.savefig(log_dir + f\"/dense_match_{epoch_idx // 10}.png\")\n", "                plt.close(fig)\n\t        if epoch_idx % 10 == 0:\n\t            # visualize keypoints\n\t            rows, cols = 3, 4\n\t            gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0}\n\t            fig, axarr = plt.subplots(\n\t                rows, cols, gridspec_kw=gridspec_kw, figsize=(12, 9)\n\t            )\n\t            bleed = 0\n\t            fig.subplots_adjust(\n", "                left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed)\n\t            )\n\t            for cam_idx, (cam, board_coord_mat, frame_coord_mat, ax) in enumerate(\n\t                zip(cams_val, board_coords_val, frame_coords_val, axarr.ravel())\n\t            ):\n\t                board_coord_mat = (\n\t                    torch.from_numpy(board_coord_mat).to(torch.float32).to(dev)\n\t                )\n\t                frame_coord_mat = (\n\t                    torch.from_numpy(frame_coord_mat).to(torch.float32).to(dev)\n", "                )\n\t                projected = cam.project_points(board_coord_mat)\n\t                # vis, _ = vis_lens(cam)\n\t                # ax.imshow(vis[..., :3])\n\t                ax.scatter(\n\t                    frame_coord_mat.detach().cpu().numpy()[:, 0],\n\t                    frame_coord_mat.detach().cpu().numpy()[:, 1],\n\t                    marker=\"o\",\n\t                    s=5,\n\t                )\n", "                ax.scatter(\n\t                    projected.detach().cpu().numpy()[:, 0],\n\t                    projected.detach().cpu().numpy()[:, 1],\n\t                    marker=\"o\",\n\t                    s=5,\n\t                )\n\t                ax.set_axis_off()\n\t                ax.grid(False)\n\t                plt.tight_layout()\n\t            fig.savefig(log_dir + f\"/vis_{epoch_idx // 10}.png\")\n", "            vis, _ = vis_lens(cam)\n\t            writer.add_image(\n\t                \"vis/lens\", vis, global_step=epoch_idx, walltime=None, dataformats=\"HWC\"\n\t            )\n\t            plt.close(fig)\n\t        train_rmse = torch.sqrt(torch.cat(loss_train, dim=0).mean())\n\t        writer.add_scalar(\"train_rmse\", train_rmse.detach(), epoch_idx)\n\t        rmse = torch.sqrt(torch.cat(loss_vals, dim=0).mean())\n\t        writer.add_scalar(\"val_rmse\", rmse, epoch_idx)\n\t        lr = optimizer_train.param_groups[0][\"lr\"]\n", "        writer.add_scalar(\"lr\", lr, epoch_idx)\n\t        print(f\"RMSE (train): {train_rmse}, RMSE (val): {rmse}, lr: {lr}\")\n\t        if dense_matching:\n\t            print(\n\t                f\"Epoch {epoch_idx}, reproj loss: {avg_loss}, dense loss: {dense_loss}\"\n\t            )\n\t        else:\n\t            print(f\"Epoch {epoch_idx}, reproj loss: {avg_loss}\")\n\t        if epoch_idx > 0 and epoch_idx % 25 == 0 and not is_eval:\n\t            PATH = log_dir + \"/lensnet_latest.pt\"\n", "            torch.save(\n\t                {\n\t                    \"epoch\": epoch_idx,\n\t                    \"model_state_dict\": lens_net.state_dict(),\n\t                    \"optimizer_state_dict\": optimizer_train.state_dict(),\n\t                    \"K\": K,\n\t                    \"RTs_train\": RTs_train,\n\t                    \"RTs_val\": RTs_val,\n\t                    \"loss\": loss,\n\t                },\n", "                PATH,\n\t            )\n\tdef colorize(uv_im, max_mag=None):\n\t    hsv = np.zeros((uv_im.shape[0], uv_im.shape[1], 3), dtype=np.uint8)\n\t    hsv[..., 1] = 255\n\t    mag, ang = cv2.cartToPolar(uv_im[..., 0], uv_im[..., 1])\n\t    hsv[..., 0] = ang * 180 / np.pi / 2\n\t    # print(mag.max())\n\t    if max_mag is None:\n\t        hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)\n", "    else:\n\t        mag = np.clip(mag, 0.0, max_mag)\n\t        mag = mag / max_mag * 255.0\n\t        hsv[..., 2] = mag.astype(np.uint8)\n\t    rgb = cv2.cvtColor(hsv, cv2.COLOR_HSV2RGB)\n\t    return rgb\n\tdef image_grid_vis(\n\t    coords_x,\n\t    coords_y,\n\t    rows=None,\n", "    cols=None,\n\t    fill: bool = True,\n\t    show_axes: bool = False,\n\t    rgb: bool = True,\n\t):\n\t    \"\"\"\n\t    A util function for plotting a grid of images.\n\t    Args:\n\t        images: (N, H, W, 4) array of RGBA images\n\t        rows: number of rows in the grid\n", "        cols: number of columns in the grid\n\t        fill: boolean indicating if the space between images should be filled\n\t        show_axes: boolean indicating if the axes of the plots should be visible\n\t        rgb: boolean, If True, only RGB channels are plotted.\n\t            If False, only the alpha channel is plotted.\n\t    Returns:\n\t        None\n\t    \"\"\"\n\t    if (rows is None) != (cols is None):\n\t        raise ValueError(\"Specify either both rows and cols or neither.\")\n", "    gridspec_kw = {\"wspace\": 0.0, \"hspace\": 0.0} if fill else {}\n\t    fig, axarr = plt.subplots(rows, cols, gridspec_kw=gridspec_kw, figsize=(15, 9))\n\t    bleed = 0\n\t    fig.subplots_adjust(left=bleed, bottom=bleed, right=(1 - bleed), top=(1 - bleed))\n\t    for ax, coord_x, coord_y in zip(axarr.ravel(), coords_x, coords_y):\n\t        ax.scatter(coord_x, coord_y, marker=\"o\")\n\t        if not show_axes:\n\t            ax.set_axis_off()\n\t    plt.close(fig)\n\tdef project_lens(camera: Camera):\n", "    i, j = np.meshgrid(\n\t        np.linspace(0, camera.resolution_w_h[0] - 1, camera.resolution_w_h[0]),\n\t        np.linspace(0, camera.resolution_w_h[1] - 1, camera.resolution_w_h[1]),\n\t        indexing=\"ij\",\n\t    )\n\t    i = i.T\n\t    j = j.T\n\t    P_sensor = (\n\t        torch.from_numpy(np.stack((i, j), axis=-1))\n\t        .to(torch.float32)\n", "        .to(camera.K.device)\n\t    )\n\t    # camera_directions_w_lens = batched_func(\n\t    #     camera.get_rays_view, P_sensor.reshape((-1, 2)), 10000\n\t    # )\n\t    camera_directions_w_lens = camera.get_rays_view(P_sensor.reshape((-1, 2)))\n\t    camera_directions_w_lens = camera_directions_w_lens.reshape(\n\t        (P_sensor.shape[0], P_sensor.shape[1], 3)\n\t    )[:, :, :2]\n\t    return camera_directions_w_lens\n", "def vis_lens(camera: Camera):\n\t    i, j = np.meshgrid(\n\t        np.linspace(0, camera.resolution_w_h[0] - 1, camera.resolution_w_h[0]),\n\t        np.linspace(0, camera.resolution_w_h[1] - 1, camera.resolution_w_h[1]),\n\t        indexing=\"ij\",\n\t    )\n\t    i = i.T\n\t    j = j.T\n\t    P_sensor = (\n\t        torch.from_numpy(np.stack((i, j), axis=-1))\n", "        .to(torch.float32)\n\t        .to(camera.K.device)\n\t    )\n\t    with torch.no_grad():\n\t        camera_directions_w_lens = batched_func(\n\t            camera.get_rays_view, P_sensor.reshape((-1, 2)), 10000\n\t        )\n\t        camera_directions_w_lens = camera_directions_w_lens.reshape(\n\t            (P_sensor.shape[0], P_sensor.shape[1], 3)\n\t        )[:, :, :2]\n", "        camera_no_lens = Camera(camera.resolution_w_h, camera.K)\n\t        camera_directions_wo_lens = batched_func(\n\t            camera_no_lens.get_rays_view, P_sensor.reshape((-1, 2)), 10000\n\t        ).reshape((P_sensor.shape[0], P_sensor.shape[1], 3))[:, :, :2]\n\t        direction_diff = camera_directions_w_lens - camera_directions_wo_lens\n\t        flow_color = colorize(\n\t            direction_diff.detach().cpu().numpy(),\n\t            max_mag=0.1,\n\t        )\n\t    return flow_color, camera_directions_w_lens\n", "if __name__ == \"__main__\":\n\t    cli()\n"]}
{"filename": "calibration/scripts/project.py", "chunked_list": ["import torch\n\tfrom ..camera import Camera\n\tfrom ..networks import LensNet\n\tdef cli():\n\t    RT = torch.eye(3, 4)\n\t    RT[0, 3] = 5.0\n\t    cam = Camera(torch.eye(3), lensnet=LensNet(), RT=RT)\n\t    # import pdb\n\t    # pdb.set_trace()\n\t    pt = torch.tensor([[1.0, 4.0, 5.0]], dtype=torch.float32)\n", "    proj = cam.project_points(pt)\n\t    print(f\"proj: {proj}\")\n\t    unproj = cam.unproject_points(torch.tensor([[proj[0, 0], proj[0, 1], 5.0]]))\n\t    print(f\"unproj: {unproj}\")\n\t    ray = cam.get_rays_view(torch.tensor([[0.2, 0.8]]))\n\t    print(f\"ray: {ray}\")\n"]}
{"filename": "calibration/scripts/optimize_marker.py", "chunked_list": ["from os import path\n\tfrom datetime import timedelta\n\timport logging\n\timport hydra\n\tfrom torch.utils.data import Dataset, DataLoader\n\tfrom hydra.utils import instantiate\n\tfrom calibration.config import Config\n\timport pytorch_lightning as pl\n\tfrom pytorch_lightning.callbacks import ModelCheckpoint\n\timport numpy as np\n", "LOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\tclass EmptyDataset(Dataset):\n\t    \"\"\"\n\t    Dummy dataset object.\n\t    Since the training data is generated on the fly, no\n\t    actual data loader is required. This dataset type\n\t    makes this training paradigm compatible with PyTorch\n\t    lightning.\n\t    \"\"\"\n", "    def __init__(self, size):\n\t        self.size = size\n\t    def __len__(self):\n\t        return self.size\n\t    def __getitem__(self, idx):\n\t        return []\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n\tdef cli(cfg: Config):\n\t    \"\"\"\n\t    Optimize the marker appearance and keypoint detector.\n", "    See README.md for further information. Example call:\n\t    `pdm run optimize_marker -- exp_name=[your experiment name]`.\n\t    \"\"\"\n\t    LOGGER.info(\n\t        f\"Optimizing marker of size {cfg.model.marker.size}x{cfg.model.marker.size}.\"\n\t    )\n\t    LOGGER.info(\"Instantiating model...\")\n\t    model = instantiate(cfg.model, _recursive_=False)\n\t    log_dir = path.join(\n\t        path.abspath(path.dirname(__file__)), \"..\", \"..\", \"experiments\", cfg.exp_name\n", "    )\n\t    LOGGER.info(f\"Writing logs and tensorboard to `{log_dir}`.\")\n\t    train_loader = DataLoader(\n\t        EmptyDataset(cfg.model.batch_size * cfg.trainer.max_steps),\n\t        batch_size=cfg.model.batch_size,\n\t    )\n\t    trainer = instantiate(\n\t        cfg.trainer,\n\t        default_root_dir=log_dir,\n\t        callbacks=[ModelCheckpoint(train_time_interval=timedelta(minutes=10.0))],\n", "    )\n\t    trainer.fit(model, train_dataloaders=train_loader)\n\t    return np.mean(model.loss_deque)\n\tif __name__ == \"__main__\":\n\t    cli()\n"]}
{"filename": "calibration/scripts/dbg_process_frame.py", "chunked_list": ["import cv2\n\timport logging\n\tfrom os import path\n\timport hydra\n\timport imageio\n\tfrom ..config import Config, ARUCO_DICT\n\tfrom ..keypoint_detection import process_frame\n\tLOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n", "def cli(cfg: Config):\n\t    \"\"\"\n\t    Process a single frame for debugging purposes.\n\t    Uses `tmp.png` in the project folder. Enable debugging visualizations\n\t    by adding `dbg=true`. Example call:\n\t    `pdm run dbg_process_frame -- target.exp_name=[your experiment name] dbg=true`.\n\t    \"\"\"\n\t    frame = imageio.imread(path.join(path.dirname(__file__), \"..\", \"..\", \"tmp.png\"))[\n\t        :, :, ::-1\n\t    ]\n", "    process_frame(frame, cfg)\n"]}
{"filename": "calibration/scripts/assemble_pattern.py", "chunked_list": ["import logging\n\timport numpy as np\n\tfrom os import path\n\tfrom calibration.target import calculate_parameters\n\timport hydra\n\timport cv2\n\tfrom reportlab.pdfgen import canvas\n\tfrom reportlab.lib.utils import ImageReader as RLImageReader\n\timport imageio\n\timport tempfile\n", "from ..model import Model\n\tfrom ..config import Config, ARUCO_DICT, get_latest_checkpoint\n\tLOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n\tdef cli(cfg: Config):\n\t    \"\"\"\n\t    Assemble a calibration pattern using an optimized marker.\n\t    For more information, please see README.md. Example run:\n\t    `pdm run assemble_pattern -- target.exp_name=[your experiment name]`.\n", "    \"\"\"\n\t    LOGGER.info(\n\t        f\"Assembling calibration target with section from experiment `{cfg.target.exp_name}`.\"\n\t    )\n\t    latest_checkpoint = get_latest_checkpoint(cfg.target.exp_name, cfg)\n\t    with tempfile.TemporaryDirectory() as tmp_dir:\n\t        LOGGER.info(f\"Loading optimized marker from `{latest_checkpoint}`...\")\n\t        model = Model.load_from_checkpoint(latest_checkpoint)\n\t        marker, center = model.marker(1)\n\t        marker = (marker[0].cpu().detach().numpy().transpose(1, 2, 0) * 255.0).astype(\n", "            np.uint8\n\t        )\n\t        assert center[0, 0] == marker.shape[1] // 2\n\t        assert center[0, 1] == marker.shape[0] // 2\n\t        imageio.imsave(path.join(tmp_dir, \"marker.png\"), marker)\n\t        marker_im = RLImageReader(path.join(tmp_dir, \"marker.png\"))\n\t        if cfg.dbg:\n\t            cv2.namedWindow(\"[dbg] Optimized Marker\")\n\t            cv2.imshow(\"[dbg] Optimized Marker\", marker)\n\t            cv2.waitKey(0)\n", "            cv2.destroyWindow(\"[dbg] Optimized Marker\")\n\t        LOGGER.info(f\"Loading ArUco marker with ID `{cfg.target.aruco_id}`...\")\n\t        ar_markers = [\n\t            cv2.aruco.drawMarker(\n\t                cv2.aruco.getPredefinedDictionary(ARUCO_DICT[cfg.target.aruco_id]),\n\t                idx,\n\t                200,\n\t            )\n\t            for idx in range(23, 27)\n\t        ]\n", "        for marker_idx, ar_marker in enumerate(ar_markers):\n\t            imageio.imsave(\n\t                path.join(tmp_dir, \"ar_marker_%d.png\" % (marker_idx)), ar_marker\n\t            )\n\t        ar_marker_ims = [\n\t            RLImageReader(path.join(tmp_dir, \"ar_marker_%d.png\" % (idx)))\n\t            for idx in range(4)\n\t        ]\n\t        if cfg.dbg:\n\t            cv2.namedWindow(\"[dbg] ArUco Marker\")\n", "            cv2.imshow(\"[dbg] ArUco Marker\", ar_marker)\n\t            cv2.waitKey(0)\n\t            cv2.destroyWindow(\"[dbg] ArUco Marker\")\n\t        pdf_path = path.abspath(\n\t            path.join(\n\t                path.dirname(__file__),\n\t                \"..\",\n\t                \"..\",\n\t                \"experiments\",\n\t                cfg.target.exp_name,\n", "                \"target.pdf\",\n\t            )\n\t        )\n\t        LOGGER.info(f\"Generating PDF at `{pdf_path}`...\")\n\t        canv = canvas.Canvas(pdf_path, pagesize=cfg.target.page_size_pt)\n\t        params = calculate_parameters(cfg)\n\t        LOGGER.info(\n\t            f\"Squares printed: {params.n_squares_x} X {params.n_squares_y} (x X y).\"\n\t        )\n\t        LOGGER.info(\"Drawing markers...\")\n", "        for x in range(0, params.n_squares_x):\n\t            for y in range(0, params.n_squares_y):\n\t                corner_coord_x = params.pattern_start_x_pt + x * params.square_length_pt\n\t                corner_coord_y = params.pattern_start_y_pt + y * params.square_length_pt\n\t                canv.drawImage(\n\t                    marker_im,\n\t                    corner_coord_x,\n\t                    corner_coord_y,\n\t                    width=params.square_length_pt,\n\t                    height=params.square_length_pt,\n", "                )\n\t        LOGGER.info(\"Drawing ArUco tags...\")\n\t        for marker_idx, marker_im in enumerate(ar_marker_ims):\n\t            tag_width_px = ar_marker.shape[1]\n\t            tag_height_px = ar_marker.shape[0]\n\t            assert tag_width_px == tag_height_px, \"Non-square markers not supported!\"\n\t            canv.drawImage(\n\t                marker_im,\n\t                params.tag_start_x_pt[marker_idx],\n\t                params.tag_start_y_pt[marker_idx],\n", "                width=params.tag_square_length_pt,\n\t                height=params.tag_square_length_pt,\n\t            )\n\t        canv.showPage()\n\t        canv.save()\n\t        LOGGER.info(\"Done.\")\n\t        import time\n\t        time.sleep(2)\n\tif __name__ == \"__main__\":\n\t    cli()\n"]}
{"filename": "calibration/scripts/hyperopt.py", "chunked_list": ["import ray\n\timport time\n\timport logging\n\timport coloredlogs\n\tfrom ray import tune\n\tfrom ray.tune.schedulers import AsyncHyperBandScheduler\n\timport click\n\tfrom hydra.experimental import initialize, compose\n\tfrom .optimize_marker import cli as opcli\n\tLOGGER = logging.getLogger(__name__)\n", "@click.command()\n\t@click.option(\n\t    \"--smoke\",\n\t    type=click.BOOL,\n\t    is_flag=True,\n\t    default=False,\n\t    help=\"Finish quickly for testing.\",\n\t)\n\t@click.option(\n\t    \"--max_epochs\",\n", "    type=click.INT,\n\t    default=10000,\n\t    help=\"Maximum number of steps per experiment.\",\n\t)\n\tdef cli(smoke=False, max_epochs=10000):\n\t    \"\"\"\n\t    Optimize hyperparameters for pattern and detector optimization.\n\t    Run as `pdm run hyperopt`.\n\t    \"\"\"\n\t    LOGGER.info(\"Running hyperparameter search.\")\n", "    ray.init(num_gpus=1)\n\t    LOGGER.info(\"Creating HyperBand scheduler...\")\n\t    scheduler = AsyncHyperBandScheduler(\n\t        time_attr=\"training_iteration\",\n\t        max_t=max_epochs,\n\t        grace_period=1000,\n\t    )\n\t    # 'training_iteration' is incremented every time `trainable.step` is called\n\t    stopping_criteria = {\"training_iteration\": 10 if smoke else max_epochs}\n\t    LOGGER.info(\"Stopping criteria: %s.\", stopping_criteria)\n", "    LOGGER.info(\"Starting search...\")\n\t    analysis = tune.run(\n\t        optimize_pattern_objective,\n\t        name=\"optimize_pattern_asha\",\n\t        scheduler=scheduler,\n\t        metric=\"accuracy\",\n\t        mode=\"min\",\n\t        stop=stopping_criteria,\n\t        num_samples=20,\n\t        verbose=1,\n", "        resources_per_trial={\"cpu\": 1, \"gpu\": 1},\n\t        config={  # Hyperparameter space\n\t            \"model.lr\": tune.loguniform(1e-4, 1e-1),\n\t            \"model.lr_fcn_fac\": tune.loguniform(1e-2, 1e2),\n\t            \"model.lr_marker_fac\": tune.loguniform(1e0, 1e4),\n\t            \"model.n_latent\": tune.randint(20, 400),\n\t            \"model.n_hidden\": tune.randint(1, 3),\n\t        },\n\t    )\n\t    LOGGER.info(\"Best hyperparameters found were: \", analysis.best_config)\n", "def optimize_pattern_objective(config):\n\t    overrides = [f\"{key}={val}\" for key, val in config.items()]\n\t    overrides.append(f\"exp_name=hyperopt_{time.time()}\")\n\t    overrides.append(f\"trainer.max_steps=10000\")\n\t    with initialize(config_path=\"../../conf\"):\n\t        cfg = compose(config_name=\"calibration_config\", overrides=overrides)\n\t    opcli(cfg)\n\tif __name__ == \"__main__\":\n\t    coloredlogs.install(level=logging.INFO)\n\t    cli()\n"]}
{"filename": "calibration/scripts/record.py", "chunked_list": ["import sys\n\timport cv2\n\timport numpy as np\n\timport logging\n\timport os\n\tfrom os import path\n\tfrom calibration.persistence import NumpyEncoder\n\timport hydra\n\timport imageio\n\timport json\n", "import shutil\n\timport click\n\tfrom ..persistence import NumpyEncoder\n\tfrom ..config import Config\n\tfrom ..keypoint_detection import process_frame\n\tLOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n\tdef cli(cfg: Config):\n\t    \"\"\"\n", "    Run target detection live or for a video and store the results in `data/live`.\n\t    By default uses the video camera 0. You can also specify a pre-recorded video\n\t    by using the parameter `video_fp=[path to your.mp4]`. Example call:\n\t    `pdm run record -- target.exp_name=[your experiment name] [video_fp=[path to .mp4]]`.\n\t    Add `vis=true` to see a live visualization of the detections.\n\t    \"\"\"\n\t    LOGGER.info(\n\t        f\"Starting live detection for board with marker `{cfg.target.aruco_id}`...\"\n\t    )\n\t    storage_fp = path.abspath(path.join(CONF_FP, \"..\", \"..\", \"data\", \"live\"))\n", "    if path.exists(storage_fp):\n\t        LOGGER.info(f\"Data collection path exists ({storage_fp}).\")\n\t        if click.confirm(\"Do you want to delete it to collect new data?\"):\n\t            shutil.rmtree(storage_fp)\n\t        else:\n\t            LOGGER.error(\"Can't continue. Aborting...\")\n\t            sys.exit(1)\n\t    os.makedirs(storage_fp)\n\t    LOGGER.info(\"Starting live view...\")\n\t    if cfg.video_fp is not None:\n", "        cap = cv2.VideoCapture(path.abspath(\"../../../testcap.mp4\"))\n\t    else:\n\t        cap = cv2.VideoCapture(0)\n\t    if not cap.isOpened():\n\t        raise Exception(\"Cannot open camera!\")\n\t    if cfg.vis:\n\t        LOGGER.info(\"Starting witness view...\")\n\t        cv2.namedWindow(\"coverage\")\n\t    coverage_vis = None\n\t    LOGGER.info(\"Live view running!\")\n", "    frame_coords = []\n\t    board_coords = []\n\t    # TODO: make robust w.r.t. inaccurate marker detections / improve marker accuracy.\n\t    # TODO: reject detections where the center is too far from expected.\n\t    while True:\n\t        ret, frame = cap.read()\n\t        if coverage_vis is None:\n\t            coverage_vis = np.zeros_like(frame)\n\t        if not ret:\n\t            LOGGER.error(\"Can't read frame (stream end?). Exiting ...\")\n", "            break\n\t        frame_orig = frame.copy()\n\t        try:\n\t            (\n\t                keypoint_coords_xy,\n\t                keypoints_valid,\n\t                keypoint_board_coords,\n\t                vis_frame,\n\t            ) = process_frame(frame, cfg)\n\t        except Exception as ex:\n", "            LOGGER.error(ex)\n\t            continue\n\t        this_frame_coords = []\n\t        this_board_coords = []\n\t        resize_fac = 3\n\t        frame = cv2.resize(\n\t            frame, None, fx=resize_fac, fy=resize_fac, interpolation=cv2.INTER_LINEAR\n\t        )\n\t        for center_coord, valid, board_coord in zip(\n\t            keypoint_coords_xy, keypoints_valid, keypoint_board_coords\n", "        ):\n\t            clr = (0, 255, 0) if valid else (0, 0, 255)\n\t            frame[\n\t                int(center_coord[1] * resize_fac)\n\t                - 3 : int(center_coord[1] * resize_fac)\n\t                + 3,\n\t                int(center_coord[0] * resize_fac)\n\t                - 3 : int(center_coord[0] * resize_fac)\n\t                + 3,\n\t                :,\n", "            ] = clr\n\t            text = str(\"(%d, %d)\" % (int(board_coord[0]), int(board_coord[1])))\n\t            text_width, text_height = cv2.getTextSize(\n\t                text, cv2.FONT_HERSHEY_SIMPLEX, 0.3, 1\n\t            )[0]\n\t            cv2.putText(\n\t                frame,\n\t                text,\n\t                (\n\t                    int(center_coord[0] * resize_fac),\n", "                    int(center_coord[1] * resize_fac) - text_height,\n\t                ),\n\t                cv2.FONT_HERSHEY_SIMPLEX,\n\t                0.3,\n\t                (0, 255, 0),\n\t                1,\n\t            )\n\t            if valid:\n\t                coverage_vis[int(center_coord[1]), int(center_coord[0]), 1] = min(\n\t                    255,\n", "                    50 + coverage_vis[int(center_coord[1]), int(center_coord[0]), 1],\n\t                )\n\t                this_frame_coords.append(center_coord)\n\t                this_board_coords.append(board_coord)\n\t        if len(this_frame_coords) > 0:\n\t            frame_coords.append(this_frame_coords)\n\t            board_coords.append(this_board_coords)\n\t            cv2.imwrite(\n\t                path.join(storage_fp, \"%05d.png\" % (len(board_coords) - 1)), frame_orig\n\t            )\n", "            cv2.imwrite(\n\t                path.join(storage_fp, \"vis-%05d.png\" % (len(board_coords) - 1)),\n\t                vis_frame,\n\t            )\n\t        # Display the resulting frame and update coverage.\n\t        if cfg.vis:\n\t            cv2.imshow(\"frame\", frame)\n\t            cv2.imshow(\"coverage\", coverage_vis)\n\t            key_code = cv2.waitKey(1)\n\t            if key_code == ord(\"q\"):\n", "                break\n\t            elif key_code == ord(\"s\"):\n\t                imageio.imsave(\n\t                    path.join(path.dirname(__file__), \"..\", \"..\", \"tmp.png\"),\n\t                    frame_orig[:, :, ::-1],\n\t                )\n\t    LOGGER.info(\"Shutting down...\")\n\t    cap.release()\n\t    if cfg.vis:\n\t        cv2.destroyAllWindows()\n", "    LOGGER.info(\"Writing results...\")\n\t    imageio.imwrite(path.join(storage_fp, \"coverage.png\"), coverage_vis)\n\t    with open(path.join(storage_fp, \"points.json\"), \"w\") as outf:\n\t        json.dump(\n\t            {\n\t                \"frame_coordinates_xy\": frame_coords,\n\t                \"board_coordinates_xyz\": board_coords,\n\t                \"resolution_wh\": (coverage_vis.shape[1], coverage_vis.shape[0]),\n\t            },\n\t            outf,\n", "            cls=NumpyEncoder,\n\t            indent=4,\n\t            sort_keys=False,\n\t        )\n"]}
{"filename": "calibration/scripts/dbg_live_detect.py", "chunked_list": ["import cv2\n\timport logging\n\tfrom os import path\n\timport hydra\n\timport imageio\n\tfrom ..config import Config, ARUCO_DICT\n\tfrom ..keypoint_detection import process_frame\n\tLOGGER = logging.getLogger(__name__)\n\tCONF_FP: str = path.join(\"..\", \"..\", \"conf\")\n\t@hydra.main(config_path=CONF_FP, config_name=\"calibration_config\")\n", "def cli(cfg: Config):\n\t    \"\"\"\n\t    [debugging] Script to detect a board live and show markers.\n\t    Press `s` to save a frame to `tmp.png` for later processing, press\n\t    `q` to exit. Example run:\n\t    `pdm run dbg_live_detect -- target.exp_name=[your experiment name]`.\n\t    You can also read a pre-recorded video using the option\n\t    `video_fp=[path to video]`.\n\t    \"\"\"\n\t    LOGGER.info(\n", "        f\"Starting live detection for board with marker `{cfg.target.aruco_id}`...\"\n\t    )\n\t    LOGGER.info(\"Loading marker...\")\n\t    arucoDict = cv2.aruco.Dictionary_get(ARUCO_DICT[cfg.target.aruco_id])\n\t    arucoParams = cv2.aruco.DetectorParameters_create()\n\t    arucoParams.cornerRefinementMethod = cv2.aruco.CORNER_REFINE_APRILTAG\n\t    LOGGER.info(\"Starting live view...\")\n\t    if cfg.video_fp is not None:\n\t        print(path.abspath(cfg.video_fp))\n\t        cap = cv2.VideoCapture(path.abspath(cfg.video_fp))\n", "    else:\n\t        cap = cv2.VideoCapture(0)\n\t    if not cap.isOpened():\n\t        raise Exception(\"Cannot open camera!\")\n\t    LOGGER.info(\"Live view running!\")\n\t    while True:\n\t        ret, frame = cap.read()\n\t        if not ret:\n\t            raise Exception(\"Can't read frame (stream end?). Exiting ...\")\n\t        frame_orig = frame.copy()\n", "        (corners, ids, rejected) = cv2.aruco.detectMarkers(\n\t            frame, arucoDict, parameters=arucoParams\n\t        )\n\t        if len(corners) > 0:\n\t            keypoint_coords_xy, keypoints_valid, _, frame = process_frame(frame, cfg)\n\t        # Display the resulting frame\n\t        cv2.imshow(\"frame\", frame)\n\t        key_code = cv2.waitKey(1)\n\t        if key_code == ord(\"q\"):\n\t            break\n", "        elif key_code == ord(\"s\"):\n\t            imageio.imsave(\n\t                path.join(path.dirname(__file__), \"..\", \"..\", \"tmp.png\"),\n\t                frame_orig[:, :, ::-1],\n\t            )\n\t    LOGGER.info(\"Shutting down...\")\n\t    cap.release()\n\t    cv2.destroyAllWindows()\n"]}
{"filename": "calibration/standard_models/mobilenetv3.py", "chunked_list": ["import warnings\n\tfrom functools import partial\n\tfrom typing import Any, Callable, List, Optional, Sequence\n\tfrom types import FunctionType\n\timport torch\n\tfrom torch import nn, Tensor\n\ttry:\n\t    from torch.hub import load_state_dict_from_url  # noqa: 401\n\texcept ImportError:\n\t    from torch.utils.model_zoo import load_url as load_state_dict_from_url  # noqa: 401\n", "__all__ = [\"MobileNetV3\", \"mobilenet_v3_large\", \"mobilenet_v3_small\"]\n\tmodel_urls = {\n\t    \"mobilenet_v3_large\": \"https://download.pytorch.org/models/mobilenet_v3_large-8738ca79.pth\",\n\t    \"mobilenet_v3_small\": \"https://download.pytorch.org/models/mobilenet_v3_small-047dcff4.pth\",\n\t}\n\tclass ConvNormActivation(torch.nn.Sequential):\n\t    \"\"\"\n\t    Configurable block used for Convolution-Normalzation-Activation blocks.\n\t    Args:\n\t        in_channels (int): Number of channels in the input image\n", "        out_channels (int): Number of channels produced by the Convolution-Normalzation-Activation block\n\t        kernel_size: (int, optional): Size of the convolving kernel. Default: 3\n\t        stride (int, optional): Stride of the convolution. Default: 1\n\t        padding (int, tuple or str, optional): Padding added to all four sides of the input. Default: None, in wich case it will calculated as ``padding = (kernel_size - 1) // 2 * dilation``\n\t        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1\n\t        norm_layer (Callable[..., torch.nn.Module], optional): Norm layer that will be stacked on top of the convolutiuon layer. If ``None`` this layer wont be used. Default: ``torch.nn.BatchNorm2d``\n\t        activation_layer (Callable[..., torch.nn.Module], optinal): Activation function which will be stacked on top of the normalization layer (if not None), otherwise on top of the conv layer. If ``None`` this layer wont be used. Default: ``torch.nn.ReLU``\n\t        dilation (int): Spacing between kernel elements. Default: 1\n\t        inplace (bool): Parameter for the activation layer, which can optionally do the operation in-place. Default ``True``\n\t        bias (bool, optional): Whether to use bias in the convolution layer. By default, biases are included if ``norm_layer is None``.\n", "    \"\"\"\n\t    def __init__(\n\t        self,\n\t        in_channels: int,\n\t        out_channels: int,\n\t        kernel_size: int = 3,\n\t        stride: int = 1,\n\t        padding: Optional[int] = None,\n\t        groups: int = 1,\n\t        norm_layer: Optional[Callable[..., torch.nn.Module]] = torch.nn.BatchNorm2d,\n", "        activation_layer: Optional[Callable[..., torch.nn.Module]] = torch.nn.ReLU,\n\t        dilation: int = 1,\n\t        inplace: Optional[bool] = True,\n\t        bias: Optional[bool] = None,\n\t    ) -> None:\n\t        if padding is None:\n\t            padding = (kernel_size - 1) // 2 * dilation\n\t        if bias is None:\n\t            bias = norm_layer is None\n\t        layers = [\n", "            torch.nn.Conv2d(\n\t                in_channels,\n\t                out_channels,\n\t                kernel_size,\n\t                stride,\n\t                padding,\n\t                dilation=dilation,\n\t                groups=groups,\n\t                bias=bias,\n\t            )\n", "        ]\n\t        if norm_layer is not None:\n\t            layers.append(norm_layer(out_channels))\n\t        if activation_layer is not None:\n\t            params = {} if inplace is None else {\"inplace\": inplace}\n\t            layers.append(activation_layer(**params))\n\t        super().__init__(*layers)\n\t        _log_api_usage_once(self)\n\t        self.out_channels = out_channels\n\tclass SElayer(torch.nn.Module):\n", "    \"\"\"\n\t    This block implements the Squeeze-and-Excitation block from https://arxiv.org/abs/1709.01507 (see Fig. 1).\n\t    Parameters ``activation``, and ``scale_activation`` correspond to ``delta`` and ``sigma`` in in eq. 3.\n\t    Args:\n\t        input_channels (int): Number of channels in the input image\n\t        squeeze_channels (int): Number of squeeze channels\n\t        activation (Callable[..., torch.nn.Module], optional): ``delta`` activation. Default: ``torch.nn.ReLU``\n\t        scale_activation (Callable[..., torch.nn.Module]): ``sigma`` activation. Default: ``torch.nn.Sigmoid``\n\t    \"\"\"\n\t    def __init__(\n", "        self,\n\t        input_channels: int,\n\t        squeeze_channels: int,\n\t        activation: Callable[..., torch.nn.Module] = torch.nn.ReLU,\n\t        scale_activation: Callable[..., torch.nn.Module] = torch.nn.Sigmoid,\n\t    ) -> None:\n\t        super().__init__()\n\t        _log_api_usage_once(self)\n\t        self.avgpool = torch.nn.AdaptiveAvgPool2d(1)\n\t        self.fc1 = torch.nn.Conv2d(input_channels, squeeze_channels, 1)\n", "        self.fc2 = torch.nn.Conv2d(squeeze_channels, input_channels, 1)\n\t        self.activation = activation()\n\t        self.scale_activation = scale_activation()\n\t    def _scale(self, input: Tensor) -> Tensor:\n\t        scale = self.avgpool(input)\n\t        scale = self.fc1(scale)\n\t        scale = self.activation(scale)\n\t        scale = self.fc2(scale)\n\t        return self.scale_activation(scale)\n\t    def forward(self, input: Tensor) -> Tensor:\n", "        scale = self._scale(input)\n\t        return scale * input\n\tdef _log_api_usage_once(obj: Any) -> None:\n\t    \"\"\"\n\t    Logs API usage(module and name) within an organization.\n\t    In a large ecosystem, it's often useful to track the PyTorch and\n\t    TorchVision APIs usage. This API provides the similar functionality to the\n\t    logging module in the Python stdlib. It can be used for debugging purpose\n\t    to log which methods are used and by default it is inactive, unless the user\n\t    manually subscribes a logger via the `SetAPIUsageLogger method <https://github.com/pytorch/pytorch/blob/eb3b9fe719b21fae13c7a7cf3253f970290a573e/c10/util/Logging.cpp#L114>`_.\n", "    Please note it is triggered only once for the same API call within a process.\n\t    It does not collect any data from open-source users since it is no-op by default.\n\t    For more information, please refer to\n\t    * PyTorch note: https://pytorch.org/docs/stable/notes/large_scale_deployments.html#api-usage-logging;\n\t    * Logging policy: https://github.com/pytorch/vision/issues/5052;\n\t    Args:\n\t        obj (class instance or method): an object to extract info from.\n\t    \"\"\"\n\t    if not obj.__module__.startswith(\"torchvision\"):\n\t        return\n", "    name = obj.__class__.__name__\n\t    if isinstance(obj, FunctionType):\n\t        name = obj.__name__\n\t    torch._C._log_api_usage_once(f\"{obj.__module__}.{name}\")\n\tdef _make_divisible(v: float, divisor: int, min_value: Optional[int] = None) -> int:\n\t    \"\"\"\n\t    This function is taken from the original tf repo.\n\t    It ensures that all layers have a channel number that is divisible by 8\n\t    It can be seen here:\n\t    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n", "    \"\"\"\n\t    if min_value is None:\n\t        min_value = divisor\n\t    new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)\n\t    # Make sure that round down does not go down by more than 10%.\n\t    if new_v < 0.9 * v:\n\t        new_v += divisor\n\t    return new_v\n\tclass SqueezeExcitation(SElayer):\n\t    \"\"\"DEPRECATED\"\"\"\n", "    def __init__(self, input_channels: int, squeeze_factor: int = 4):\n\t        squeeze_channels = _make_divisible(input_channels // squeeze_factor, 8)\n\t        super().__init__(\n\t            input_channels, squeeze_channels, scale_activation=nn.Hardsigmoid\n\t        )\n\t        self.relu = self.activation\n\t        delattr(self, \"activation\")\n\t        warnings.warn(\n\t            \"This SqueezeExcitation class is deprecated and will be removed in future versions. \"\n\t            \"Use torchvision.ops.misc.SqueezeExcitation instead.\",\n", "            FutureWarning,\n\t        )\n\tclass InvertedResidualConfig:\n\t    # Stores information listed at Tables 1 and 2 of the MobileNetV3 paper\n\t    def __init__(\n\t        self,\n\t        input_channels: int,\n\t        kernel: int,\n\t        expanded_channels: int,\n\t        out_channels: int,\n", "        use_se: bool,\n\t        activation: str,\n\t        stride: int,\n\t        dilation: int,\n\t        width_mult: float,\n\t    ):\n\t        self.input_channels = self.adjust_channels(input_channels, width_mult)\n\t        self.kernel = kernel\n\t        self.expanded_channels = self.adjust_channels(expanded_channels, width_mult)\n\t        self.out_channels = self.adjust_channels(out_channels, width_mult)\n", "        self.use_se = use_se\n\t        self.use_hs = activation == \"HS\"\n\t        self.stride = stride\n\t        self.dilation = dilation\n\t    @staticmethod\n\t    def adjust_channels(channels: int, width_mult: float):\n\t        return _make_divisible(channels * width_mult, 8)\n\tclass InvertedResidual(nn.Module):\n\t    # Implemented as described at section 5 of MobileNetV3 paper\n\t    def __init__(\n", "        self,\n\t        cnf: InvertedResidualConfig,\n\t        norm_layer: Callable[..., nn.Module],\n\t        se_layer: Callable[..., nn.Module] = partial(\n\t            SElayer, scale_activation=nn.Hardsigmoid\n\t        ),\n\t    ):\n\t        super().__init__()\n\t        if not (1 <= cnf.stride <= 2):\n\t            raise ValueError(\"illegal stride value\")\n", "        self.use_res_connect = (\n\t            cnf.stride == 1 and cnf.input_channels == cnf.out_channels\n\t        )\n\t        layers: List[nn.Module] = []\n\t        activation_layer = nn.Hardswish if cnf.use_hs else nn.ReLU\n\t        # expand\n\t        if cnf.expanded_channels != cnf.input_channels:\n\t            layers.append(\n\t                ConvNormActivation(\n\t                    cnf.input_channels,\n", "                    cnf.expanded_channels,\n\t                    kernel_size=1,\n\t                    norm_layer=norm_layer,\n\t                    activation_layer=activation_layer,\n\t                )\n\t            )\n\t        # depthwise\n\t        stride = 1 if cnf.dilation > 1 else cnf.stride\n\t        layers.append(\n\t            ConvNormActivation(\n", "                cnf.expanded_channels,\n\t                cnf.expanded_channels,\n\t                kernel_size=cnf.kernel,\n\t                stride=stride,\n\t                dilation=cnf.dilation,\n\t                groups=cnf.expanded_channels,\n\t                norm_layer=norm_layer,\n\t                activation_layer=activation_layer,\n\t            )\n\t        )\n", "        if cnf.use_se:\n\t            squeeze_channels = _make_divisible(cnf.expanded_channels // 4, 8)\n\t            layers.append(se_layer(cnf.expanded_channels, squeeze_channels))\n\t        # project\n\t        layers.append(\n\t            ConvNormActivation(\n\t                cnf.expanded_channels,\n\t                cnf.out_channels,\n\t                kernel_size=1,\n\t                norm_layer=norm_layer,\n", "                activation_layer=None,\n\t            )\n\t        )\n\t        self.block = nn.Sequential(*layers)\n\t        self.out_channels = cnf.out_channels\n\t        self._is_cn = cnf.stride > 1\n\t    def forward(self, input: Tensor) -> Tensor:\n\t        result = self.block(input)\n\t        if self.use_res_connect:\n\t            result += input\n", "        return result\n\tclass MobileNetV3(nn.Module):\n\t    def __init__(\n\t        self,\n\t        inverted_residual_setting: List[InvertedResidualConfig],\n\t        last_channel: int,\n\t        num_classes: int = 1000,\n\t        block: Optional[Callable[..., nn.Module]] = None,\n\t        norm_layer: Optional[Callable[..., nn.Module]] = None,\n\t        dropout: float = 0.2,\n", "        **kwargs: Any,\n\t    ) -> None:\n\t        \"\"\"\n\t        MobileNet V3 main class\n\t        Args:\n\t            inverted_residual_setting (List[InvertedResidualConfig]): Network structure\n\t            last_channel (int): The number of channels on the penultimate layer\n\t            num_classes (int): Number of classes\n\t            block (Optional[Callable[..., nn.Module]]): Module specifying inverted residual building block for mobilenet\n\t            norm_layer (Optional[Callable[..., nn.Module]]): Module specifying the normalization layer to use\n", "            dropout (float): The droupout probability\n\t        \"\"\"\n\t        super().__init__()\n\t        _log_api_usage_once(self)\n\t        if not inverted_residual_setting:\n\t            raise ValueError(\"The inverted_residual_setting should not be empty\")\n\t        elif not (\n\t            isinstance(inverted_residual_setting, Sequence)\n\t            and all(\n\t                [\n", "                    isinstance(s, InvertedResidualConfig)\n\t                    for s in inverted_residual_setting\n\t                ]\n\t            )\n\t        ):\n\t            raise TypeError(\n\t                \"The inverted_residual_setting should be List[InvertedResidualConfig]\"\n\t            )\n\t        if block is None:\n\t            block = InvertedResidual\n", "        if norm_layer is None:\n\t            norm_layer = partial(nn.BatchNorm2d, eps=0.001, momentum=0.01)\n\t        layers: List[nn.Module] = []\n\t        # building first layer\n\t        firstconv_output_channels = inverted_residual_setting[0].input_channels\n\t        layers.append(\n\t            ConvNormActivation(\n\t                3,\n\t                firstconv_output_channels,\n\t                kernel_size=3,\n", "                stride=2,\n\t                norm_layer=norm_layer,\n\t                activation_layer=nn.Hardswish,\n\t            )\n\t        )\n\t        # building inverted residual blocks\n\t        for cnf in inverted_residual_setting:\n\t            layers.append(block(cnf, norm_layer))\n\t        # building last several layers\n\t        lastconv_input_channels = inverted_residual_setting[-1].out_channels\n", "        lastconv_output_channels = 6 * lastconv_input_channels\n\t        layers.append(\n\t            ConvNormActivation(\n\t                lastconv_input_channels,\n\t                lastconv_output_channels,\n\t                kernel_size=1,\n\t                norm_layer=norm_layer,\n\t                activation_layer=nn.Hardswish,\n\t            )\n\t        )\n", "        self.features = nn.Sequential(*layers)\n\t        self.avgpool = nn.AdaptiveAvgPool2d(1)\n\t        self.classifier = nn.Sequential(\n\t            nn.Linear(lastconv_output_channels, last_channel),\n\t            nn.Hardswish(inplace=True),\n\t            nn.Dropout(p=dropout, inplace=True),\n\t            nn.Linear(last_channel, num_classes),\n\t        )\n\t        for m in self.modules():\n\t            if isinstance(m, nn.Conv2d):\n", "                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\")\n\t                if m.bias is not None:\n\t                    nn.init.zeros_(m.bias)\n\t            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n\t                nn.init.ones_(m.weight)\n\t                nn.init.zeros_(m.bias)\n\t            elif isinstance(m, nn.Linear):\n\t                nn.init.normal_(m.weight, 0, 0.01)\n\t                nn.init.zeros_(m.bias)\n\t    def _forward_impl(self, x: Tensor) -> Tensor:\n", "        x = self.features(x)\n\t        x = self.avgpool(x)\n\t        x = torch.flatten(x, 1)\n\t        x = self.classifier(x)\n\t        return x\n\t    def forward(self, x: Tensor) -> Tensor:\n\t        return self._forward_impl(x)\n\tdef _mobilenet_v3_conf(\n\t    arch: str,\n\t    width_mult: float = 1.0,\n", "    reduced_tail: bool = False,\n\t    dilated: bool = False,\n\t    **kwargs: Any,\n\t):\n\t    reduce_divider = 2 if reduced_tail else 1\n\t    dilation = 2 if dilated else 1\n\t    bneck_conf = partial(InvertedResidualConfig, width_mult=width_mult)\n\t    adjust_channels = partial(\n\t        InvertedResidualConfig.adjust_channels, width_mult=width_mult\n\t    )\n", "    if arch == \"mobilenet_v3_large\":\n\t        inverted_residual_setting = [\n\t            bneck_conf(16, 3, 16, 16, False, \"RE\", 1, 1),\n\t            bneck_conf(16, 3, 64, 24, False, \"RE\", 2, 1),  # C1\n\t            bneck_conf(24, 3, 72, 24, False, \"RE\", 1, 1),\n\t            bneck_conf(24, 5, 72, 40, True, \"RE\", 2, 1),  # C2\n\t            bneck_conf(40, 5, 120, 40, True, \"RE\", 1, 1),\n\t            bneck_conf(40, 5, 120, 40, True, \"RE\", 1, 1),\n\t            bneck_conf(40, 3, 240, 80, False, \"HS\", 2, 1),  # C3\n\t            bneck_conf(80, 3, 200, 80, False, \"HS\", 1, 1),\n", "            bneck_conf(80, 3, 184, 80, False, \"HS\", 1, 1),\n\t            bneck_conf(80, 3, 184, 80, False, \"HS\", 1, 1),\n\t            bneck_conf(80, 3, 480, 112, True, \"HS\", 1, 1),\n\t            bneck_conf(112, 3, 672, 112, True, \"HS\", 1, 1),\n\t            bneck_conf(\n\t                112, 5, 672, 160 // reduce_divider, True, \"HS\", 2, dilation\n\t            ),  # C4\n\t            bneck_conf(\n\t                160 // reduce_divider,\n\t                5,\n", "                960 // reduce_divider,\n\t                160 // reduce_divider,\n\t                True,\n\t                \"HS\",\n\t                1,\n\t                dilation,\n\t            ),\n\t            bneck_conf(\n\t                160 // reduce_divider,\n\t                5,\n", "                960 // reduce_divider,\n\t                160 // reduce_divider,\n\t                True,\n\t                \"HS\",\n\t                1,\n\t                dilation,\n\t            ),\n\t        ]\n\t        last_channel = adjust_channels(1280 // reduce_divider)  # C5\n\t    elif arch == \"mobilenet_v3_small\":\n", "        inverted_residual_setting = [\n\t            bneck_conf(16, 3, 16, 16, True, \"RE\", 2, 1),  # C1\n\t            bneck_conf(16, 3, 72, 24, False, \"RE\", 2, 1),  # C2\n\t            bneck_conf(24, 3, 88, 24, False, \"RE\", 1, 1),\n\t            bneck_conf(24, 5, 96, 40, True, \"HS\", 2, 1),  # C3\n\t            bneck_conf(40, 5, 240, 40, True, \"HS\", 1, 1),\n\t            bneck_conf(40, 5, 240, 40, True, \"HS\", 1, 1),\n\t            bneck_conf(40, 5, 120, 48, True, \"HS\", 1, 1),\n\t            bneck_conf(48, 5, 144, 48, True, \"HS\", 1, 1),\n\t            bneck_conf(48, 5, 288, 96 // reduce_divider, True, \"HS\", 2, dilation),  # C4\n", "            bneck_conf(\n\t                96 // reduce_divider,\n\t                5,\n\t                576 // reduce_divider,\n\t                96 // reduce_divider,\n\t                True,\n\t                \"HS\",\n\t                1,\n\t                dilation,\n\t            ),\n", "            bneck_conf(\n\t                96 // reduce_divider,\n\t                5,\n\t                576 // reduce_divider,\n\t                96 // reduce_divider,\n\t                True,\n\t                \"HS\",\n\t                1,\n\t                dilation,\n\t            ),\n", "        ]\n\t        last_channel = adjust_channels(1024 // reduce_divider)  # C5\n\t    else:\n\t        raise ValueError(f\"Unsupported model type {arch}\")\n\t    return inverted_residual_setting, last_channel\n\tdef _mobilenet_v3(\n\t    arch: str,\n\t    inverted_residual_setting: List[InvertedResidualConfig],\n\t    last_channel: int,\n\t    pretrained: bool,\n", "    progress: bool,\n\t    **kwargs: Any,\n\t):\n\t    model = MobileNetV3(inverted_residual_setting, last_channel, **kwargs)\n\t    if pretrained:\n\t        if model_urls.get(arch, None) is None:\n\t            raise ValueError(f\"No checkpoint is available for model type {arch}\")\n\t        state_dict = load_state_dict_from_url(model_urls[arch], progress=progress)\n\t        model.load_state_dict(state_dict)\n\t    return model\n", "def mobilenet_v3_large(\n\t    pretrained: bool = False, progress: bool = True, **kwargs: Any\n\t) -> MobileNetV3:\n\t    \"\"\"\n\t    Constructs a large MobileNetV3 architecture from\n\t    `\"Searching for MobileNetV3\" <https://arxiv.org/abs/1905.02244>`_.\n\t    Args:\n\t        pretrained (bool): If True, returns a model pre-trained on ImageNet\n\t        progress (bool): If True, displays a progress bar of the download to stderr\n\t    \"\"\"\n", "    arch = \"mobilenet_v3_large\"\n\t    inverted_residual_setting, last_channel = _mobilenet_v3_conf(arch, **kwargs)\n\t    return _mobilenet_v3(\n\t        arch, inverted_residual_setting, last_channel, pretrained, progress, **kwargs\n\t    )\n\tdef mobilenet_v3_small(\n\t    pretrained: bool = False, progress: bool = True, **kwargs: Any\n\t) -> MobileNetV3:\n\t    \"\"\"\n\t    Constructs a small MobileNetV3 architecture from\n", "    `\"Searching for MobileNetV3\" <https://arxiv.org/abs/1905.02244>`_.\n\t    Args:\n\t        pretrained (bool): If True, returns a model pre-trained on ImageNet\n\t        progress (bool): If True, displays a progress bar of the download to stderr\n\t    \"\"\"\n\t    arch = \"mobilenet_v3_small\"\n\t    inverted_residual_setting, last_channel = _mobilenet_v3_conf(arch, **kwargs)\n\t    return _mobilenet_v3(\n\t        arch, inverted_residual_setting, last_channel, pretrained, progress, **kwargs\n\t    )\n"]}
{"filename": "calibration/standard_models/__init__.py", "chunked_list": ["from .mobilenetv3 import MobileNetV3, mobilenet_v3_large, mobilenet_v3_small\n"]}
{"filename": "conf/__init__.py", "chunked_list": []}
