{"filename": "train.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tmajor actions here: fine-tune the features and evaluate different settings\n\t\"\"\"\n\timport os\n\timport torch\n\timport warnings\n\timport numpy as np\n\timport random\n\tfrom time import sleep\n", "from random import randint\n\timport src.utils.logging as logging\n\tfrom src.configs.config import get_cfg\n\tfrom src.data import loader as data_loader\n\tfrom src.engine.evaluator import Evaluator\n\tfrom src.engine.trainer import Trainer\n\tfrom src.models.build_model import build_model\n\tfrom src.utils.file_io import PathManager\n\tfrom launch import default_argument_parser, logging_train_setup\n\twarnings.filterwarnings(\"ignore\")\n", "torch.set_num_threads(4)\n\tdef setup(args):\n\t    \"\"\"\n\t    Create configs and perform basic setups.\n\t    \"\"\"\n\t    cfg = get_cfg()\n\t    cfg.merge_from_file(args.config_file)\n\t    cfg.merge_from_list(args.opts)\n\t    # setup dist\n\t    # cfg.DIST_INIT_PATH = \"tcp://{}:12399\".format(os.environ[\"SLURMD_NODENAME\"])\n", "    # setup output dir\n\t    # output_dir / data_name / feature_name / lr_wd / run1\n\t    output_dir = cfg.OUTPUT_DIR\n\t    lr = cfg.SOLVER.BASE_LR\n\t    wd = cfg.SOLVER.WEIGHT_DECAY\n\t    output_folder = os.path.join(\n\t        cfg.DATA.NAME, cfg.DATA.FEATURE, f\"{args.id}_lr{lr}_wd{wd}\")\n\t    # train cfg.RUN_N_TIMES times\n\t    count = 1\n\t    while count <= cfg.RUN_N_TIMES:\n", "        output_path = os.path.join(output_dir, output_folder, f\"run{count}\")\n\t        # pause for a random time, so concurrent process with same setting won't interfere with each other. # noqa\n\t        sleep(randint(3, 30))\n\t        if not PathManager.exists(output_path):\n\t            PathManager.mkdirs(output_path)\n\t            cfg.OUTPUT_DIR = output_path\n\t            break\n\t        else:\n\t            count += 1\n\t    if count > cfg.RUN_N_TIMES:\n", "        raise ValueError(\n\t            f\"Already run {cfg.RUN_N_TIMES} times for {output_folder}, no need to run more\")\n\t    cfg.freeze()\n\t    return cfg\n\tdef get_loaders(cfg, logger):\n\t    logger.info(\"Loading training data (final training data for vtab)...\")\n\t    if cfg.DATA.NAME.startswith(\"vtab-\"):\n\t        train_loader = data_loader.construct_trainval_loader(cfg)\n\t    else:\n\t        train_loader = data_loader.construct_train_loader(cfg)\n", "    logger.info(\"Loading validation data...\")\n\t    # not really needed for vtab\n\t    val_loader = data_loader.construct_val_loader(cfg)\n\t    logger.info(\"Loading test data...\")\n\t    if cfg.DATA.NO_TEST:\n\t        logger.info(\"...no test data is constructed\")\n\t        test_loader = None\n\t    else:\n\t        test_loader = data_loader.construct_test_loader(cfg)\n\t    return train_loader,  val_loader, test_loader\n", "def train(cfg, args):\n\t    # clear up residual cache from previous runs\n\t    if torch.cuda.is_available():\n\t        torch.cuda.empty_cache()\n\t    # main training / eval actions here\n\t    # fix the seed for reproducibility\n\t    if cfg.SEED is not None:\n\t        torch.manual_seed(cfg.SEED)\n\t        np.random.seed(cfg.SEED)\n\t        random.seed(0)\n", "    # setup training env including loggers\n\t    logging_train_setup(args, cfg)\n\t    logger = logging.get_logger(\"visual_prompt\")\n\t    train_loader, val_loader, test_loader = get_loaders(cfg, logger)\n\t    logger.info(\"Constructing models...\")\n\t    model, cur_device = build_model(cfg)\n\t    trainable_params = [name for name, p in model.named_parameters() if p.requires_grad]\n\t    print(trainable_params)\n\t    logger.info(\"Setting up Evalutator...\")\n\t    evaluator = Evaluator()\n", "    logger.info(\"Setting up Trainer...\")\n\t    trainer = Trainer(cfg, model, evaluator, cur_device)\n\t    if train_loader:\n\t        trainer.train_classifier(train_loader, val_loader, test_loader)\n\t    else:\n\t        print(\"No train loader presented. Exit\")\n\t    if cfg.SOLVER.TOTAL_EPOCH == 0:\n\t        trainer.eval_classifier(test_loader, \"test\", 0)\n\tdef main(args):\n\t    \"\"\"main function to call from workflow\"\"\"\n", "    # set up cfg and args\n\t    cfg = setup(args)\n\t    with open(os.path.join(cfg.OUTPUT_DIR, 'configs.yaml'), 'w') as f:\n\t        f.write(cfg.dump())\n\t    # Perform training.\n\t    train(cfg, args)\n\tif __name__ == '__main__':\n\t    args = default_argument_parser().parse_args()\n\t    main(args)\n"]}
{"filename": "launch.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tlaunch helper functions\n\t\"\"\"\n\timport argparse\n\timport os\n\timport sys\n\timport pprint\n\timport PIL\n\tfrom collections import defaultdict\n", "from tabulate import tabulate\n\tfrom typing import Tuple\n\timport torch\n\tfrom src.utils.file_io import PathManager\n\tfrom src.utils import logging\n\tfrom src.utils.distributed import get_rank, get_world_size\n\tdef collect_torch_env() -> str:\n\t    try:\n\t        import torch.__config__\n\t        return torch.__config__.show()\n", "    except ImportError:\n\t        # compatible with older versions of pytorch\n\t        from torch.utils.collect_env import get_pretty_env_info\n\t        return get_pretty_env_info()\n\tdef get_env_module() -> Tuple[str]:\n\t    var_name = \"ENV_MODULE\"\n\t    return var_name, os.environ.get(var_name, \"<not set>\")\n\tdef collect_env_info() -> str:\n\t    data = []\n\t    data.append((\"Python\", sys.version.replace(\"\\n\", \"\")))\n", "    data.append(get_env_module())\n\t    data.append((\"PyTorch\", torch.__version__))\n\t    data.append((\"PyTorch Debug Build\", torch.version.debug))\n\t    has_cuda = torch.cuda.is_available()\n\t    data.append((\"CUDA available\", has_cuda))\n\t    if has_cuda:\n\t        data.append((\"CUDA ID\", os.environ[\"CUDA_VISIBLE_DEVICES\"]))\n\t        devices = defaultdict(list)\n\t        for k in range(torch.cuda.device_count()):\n\t            devices[torch.cuda.get_device_name(k)].append(str(k))\n", "        for name, devids in devices.items():\n\t            data.append((\"GPU \" + \",\".join(devids), name))\n\t    data.append((\"Pillow\", PIL.__version__))\n\t    try:\n\t        import cv2\n\t        data.append((\"cv2\", cv2.__version__))\n\t    except ImportError:\n\t        pass\n\t    env_str = tabulate(data) + \"\\n\"\n\t    env_str += collect_torch_env()\n", "    return env_str\n\tdef default_argument_parser():\n\t    \"\"\"\n\t    create a simple parser to wrap around config file\n\t    \"\"\"\n\t    parser = argparse.ArgumentParser(description=\"visual-prompt\")\n\t    parser.add_argument(\n\t        \"--config-file\", default=\"\", metavar=\"FILE\", help=\"path to config file\")\n\t    parser.add_argument(\n\t        \"--train-type\", default=\"\", help=\"training types\")\n", "    parser.add_argument(\n\t        \"opts\",\n\t        help=\"Modify config options using the command-line\",\n\t        default=None,\n\t        nargs=argparse.REMAINDER,\n\t    )\n\t    from datetime import datetime\n\t    time_fmt = datetime.now().strftime(\"%y%m%d-%H-%M-%S\")\n\t    parser.add_argument('--id', default=time_fmt)\n\t    return parser\n", "def logging_train_setup(args, cfg) -> None:\n\t    output_dir = cfg.OUTPUT_DIR\n\t    if output_dir:\n\t        PathManager.mkdirs(output_dir)\n\t    logger = logging.setup_logging(\n\t        cfg.NUM_GPUS, get_world_size(), output_dir, name=\"visual_prompt\")\n\t    # Log basic information about environment, cmdline arguments, and config\n\t    rank = get_rank()\n\t    logger.info(\n\t        f\"Rank of current process: {rank}. World size: {get_world_size()}\")\n", "    logger.info(\"Environment info:\\n\" + collect_env_info())\n\t    logger.info(\"Command line arguments: \" + str(args))\n\t    if hasattr(args, \"config_file\") and args.config_file != \"\":\n\t        logger.info(\n\t            \"Contents of args.config_file={}:\\n{}\".format(\n\t                args.config_file,\n\t                PathManager.open(args.config_file, \"r\").read()\n\t            )\n\t        )\n\t    # Show the config\n", "    logger.info(\"Training with config:\")\n\t    logger.info(pprint.pformat(cfg))\n\t    # cudnn benchmark has large overhead.\n\t    # It shouldn't be used considering the small size of typical val set.\n\t    if not (hasattr(args, \"eval_only\") and args.eval_only):\n\t        torch.backends.cudnn.benchmark = cfg.CUDNN_BENCHMARK\n"]}
{"filename": "src/configs/vit_configs.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tCopyright (c) Meta Platforms, Inc. All Rights Reserved\n\thttps://github.com/jeonsworld/ViT-pytorch/blob/main/models/configs.py\n\t\"\"\"\n\timport ml_collections\n\tdef get_testing():\n\t    \"\"\"Returns a minimal configuration for testing.\"\"\"\n\t    config = ml_collections.ConfigDict()\n\t    config.patches = ml_collections.ConfigDict({'size': (16, 16)})\n", "    config.hidden_size = 1\n\t    config.transformer = ml_collections.ConfigDict()\n\t    config.transformer.mlp_dim = 1\n\t    config.transformer.num_heads = 1\n\t    config.transformer.num_layers = 1\n\t    config.transformer.attention_dropout_rate = 0.0\n\t    config.transformer.dropout_rate = 0.1\n\t    config.classifier = 'token'\n\t    config.representation_size = None\n\t    return config\n", "def get_b16_config():\n\t    \"\"\"Returns the ViT-B/16 configuration.\"\"\"\n\t    config = ml_collections.ConfigDict()\n\t    config.patches = ml_collections.ConfigDict({'size': (16, 16)})\n\t    config.hidden_size = 768\n\t    config.transformer = ml_collections.ConfigDict()\n\t    config.transformer.mlp_dim = 3072\n\t    config.transformer.num_heads = 12\n\t    config.transformer.num_layers = 12\n\t    config.transformer.attention_dropout_rate = 0.0\n", "    config.transformer.dropout_rate = 0.1\n\t    config.classifier = 'token'\n\t    config.representation_size = None\n\t    return config\n\tdef get_r50_b16_config():\n\t    \"\"\"Returns the Resnet50 + ViT-B/16 configuration.\"\"\"\n\t    config = get_b16_config()\n\t    del config.patches.size\n\t    config.patches.grid = (14, 14)\n\t    config.resnet = ml_collections.ConfigDict()\n", "    config.resnet.num_layers = (3, 4, 9)\n\t    config.resnet.width_factor = 1\n\t    return config\n\tdef get_b32_config():\n\t    \"\"\"Returns the ViT-B/32 configuration.\"\"\"\n\t    config = get_b16_config()\n\t    config.patches.size = (32, 32)\n\t    return config\n\tdef get_b8_config():\n\t    \"\"\"Returns the ViT-B/32 configuration.\"\"\"\n", "    config = get_b16_config()\n\t    config.patches.size = (8, 8)\n\t    return config\n\tdef get_l16_config():\n\t    \"\"\"Returns the ViT-L/16 configuration.\"\"\"\n\t    config = ml_collections.ConfigDict()\n\t    config.patches = ml_collections.ConfigDict({'size': (16, 16)})\n\t    config.hidden_size = 1024\n\t    config.transformer = ml_collections.ConfigDict()\n\t    config.transformer.mlp_dim = 4096\n", "    config.transformer.num_heads = 16\n\t    config.transformer.num_layers = 24\n\t    config.transformer.attention_dropout_rate = 0.0\n\t    config.transformer.dropout_rate = 0.1\n\t    config.classifier = 'token'\n\t    config.representation_size = None\n\t    return config\n\tdef get_l32_config():\n\t    \"\"\"Returns the ViT-L/32 configuration.\"\"\"\n\t    config = get_l16_config()\n", "    config.patches.size = (32, 32)\n\t    return config\n\tdef get_h14_config():\n\t    \"\"\"Returns the ViT-L/16 configuration.\"\"\"\n\t    config = ml_collections.ConfigDict()\n\t    config.patches = ml_collections.ConfigDict({'size': (14, 14)})\n\t    config.hidden_size = 1280\n\t    config.transformer = ml_collections.ConfigDict()\n\t    config.transformer.mlp_dim = 5120\n\t    config.transformer.num_heads = 16\n", "    config.transformer.num_layers = 32\n\t    config.transformer.attention_dropout_rate = 0.0\n\t    config.transformer.dropout_rate = 0.1\n\t    config.classifier = 'token'\n\t    config.representation_size = None\n\t    return config\n"]}
{"filename": "src/configs/config_node.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Config system (based on Detectron's).\"\"\"\n\tfrom fvcore.common.config import CfgNode as _CfgNode\n\tfrom ..utils.file_io import PathManager\n\tclass CfgNode(_CfgNode):\n\t    \"\"\"\n\t    The same as `fvcore.common.config.CfgNode`, but different in:\n\t    support manifold path\n\t    \"\"\"\n\t    @classmethod\n", "    def _open_cfg(cls, filename):\n\t        return PathManager.open(filename, \"r\")\n\t    def dump(self, *args, **kwargs):\n\t        \"\"\"\n\t        Returns:\n\t            str: a yaml string representation of the config\n\t        \"\"\"\n\t        # to make it show up in docs\n\t        return super().dump(*args, **kwargs)\n"]}
{"filename": "src/configs/config.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Config system (based on Detectron's).\"\"\"\n\tfrom .config_node import CfgNode\n\t# Global config object\n\t_C = CfgNode()\n\t# Example usage:\n\t#   from configs.config import cfg\n\t_C.DBG = False\n\t_C.OUTPUT_DIR = \"./output\"\n\t_C.RUN_N_TIMES = 5\n", "# Perform benchmarking to select the fastest CUDNN algorithms to use\n\t# Note that this may increase the memory usage and will likely not result\n\t# in overall speedups when variable size inputs are used (e.g. COCO training)\n\t_C.CUDNN_BENCHMARK = False\n\t# Number of GPUs to use (applies to both training and testing)\n\t_C.NUM_GPUS = 1\n\t_C.NUM_SHARDS = 1\n\t# Note that non-determinism may still be present due to non-deterministic\n\t# operator implementations in GPU operator libraries\n\t_C.SEED = None\n", "# ----------------------------------------------------------------------\n\t# Model options\n\t# ----------------------------------------------------------------------\n\t_C.MODEL = CfgNode()\n\t_C.MODEL.TRANSFER_TYPE = \"linear\"  # one of linear, end2end, prompt, adapter, side, partial-1, tinytl-bias\n\t_C.MODEL.WEIGHT_PATH = \"\"  # if resume from some checkpoint file\n\t_C.MODEL.SAVE_CKPT = True\n\t_C.MODEL.MODEL_ROOT = \"\"  # root folder for pretrained model weights\n\t_C.MODEL.TYPE = \"vit\"\n\t_C.MODEL.MLP_NUM = 0\n", "_C.MODEL.LINEAR = CfgNode()\n\t_C.MODEL.LINEAR.MLP_SIZES = []\n\t_C.MODEL.LINEAR.DROPOUT = 0.1\n\t# ----------------------------------------------------------------------\n\t# Prompt options\n\t# ----------------------------------------------------------------------\n\t_C.MODEL.PROMPT = CfgNode()\n\t_C.MODEL.PROMPT.NUM_TOKENS = 5\n\t_C.MODEL.PROMPT.LOCATION = \"prepend\"\n\t# prompt initalizatioin: \n", "    # (1) default \"random\"\n\t    # (2) \"final-cls\" use aggregated final [cls] embeddings from training dataset\n\t    # (3) \"cls-nolastl\": use first 12 cls embeddings (exclude the final output) for deep prompt\n\t        # (4) \"cls-nofirstl\": use last 12 cls embeddings (exclude the input to first layer)\n\t_C.MODEL.PROMPT.INITIATION = \"random\"  # \"final-cls\", \"cls-first12\"\n\t_C.MODEL.PROMPT.CLSEMB_FOLDER = \"\"\n\t_C.MODEL.PROMPT.CLSEMB_PATH = \"\"\n\t_C.MODEL.PROMPT.PROJECT = -1  # \"projection mlp hidden dim\"\n\t_C.MODEL.PROMPT.DEEP = False # \"whether do deep prompt or not, only for prepend location\"\n\t_C.MODEL.PROMPT.NUM_DEEP_LAYERS = None  # if set to be an int, then do partial-deep prompt tuning\n", "_C.MODEL.PROMPT.REVERSE_DEEP = False  # if to only update last n layers, not the input layer\n\t_C.MODEL.PROMPT.DEEP_SHARED = False  # if true, all deep layers will be use the same prompt emb\n\t_C.MODEL.PROMPT.FORWARD_DEEP_NOEXPAND = False  # if true, will not expand input sequence for layers without prompt\n\t# how to get the output emb for cls head:\n\t    # original: follow the orignial backbone choice,\n\t    # img_pool: image patch pool only\n\t    # prompt_pool: prompt embd pool only\n\t    # imgprompt_pool: pool everything but the cls token\n\t_C.MODEL.PROMPT.VIT_POOL_TYPE = \"original\"\n\t_C.MODEL.PROMPT.DROPOUT = 0.0 \n", "_C.MODEL.PROMPT.SAVE_FOR_EACH_EPOCH = False\n\t_C.MODEL.PROMPT.GATE_PRIOR = False\n\t_C.MODEL.PROMPT.GATE_NUM = 11\n\t_C.MODEL.PROMPT.GATE_INIT = 10\n\t_C.MODEL.PROMPT.TEMP = 1.0\n\t_C.MODEL.PROMPT.TEMP_LEARN = False\n\t_C.MODEL.PROMPT.TEMP_NUM = 12\n\t_C.MODEL.PROMPT.TEMP_MIN = 0.01\n\t_C.MODEL.PROMPT.TEMP_MAX = 10.0\n\t# _C.MODEL.PROMPT.TEMP_MIN = 0.05\n", "# _C.MODEL.PROMPT.TEMP_MAX = 5.0\n\t# ----------------------------------------------------------------------\n\t# adapter options\n\t# ----------------------------------------------------------------------\n\t_C.MODEL.ADAPTER = CfgNode()\n\t_C.MODEL.ADAPTER.REDUCATION_FACTOR = 8\n\t_C.MODEL.ADAPTER.STYLE = \"Pfeiffer\"\n\t# ----------------------------------------------------------------------\n\t# Solver options\n\t# ----------------------------------------------------------------------\n", "_C.SOLVER = CfgNode()\n\t_C.SOLVER.LOSS = \"softmax\"\n\t_C.SOLVER.LOSS_ALPHA = 0.01\n\t_C.SOLVER.OPTIMIZER = \"sgd\"  # or \"adamw\"\n\t_C.SOLVER.MOMENTUM = 0.9\n\t_C.SOLVER.WEIGHT_DECAY = 0.0001\n\t_C.SOLVER.WEIGHT_DECAY_BIAS = 0\n\t_C.SOLVER.PATIENCE = 300\n\t_C.SOLVER.SCHEDULER = \"cosine\"\n\t_C.SOLVER.BASE_LR = 0.01\n", "_C.SOLVER.BIAS_MULTIPLIER = 1.              # for prompt + bias\n\t_C.SOLVER.WARMUP_EPOCH = 5\n\t_C.SOLVER.TOTAL_EPOCH = 30\n\t_C.SOLVER.LOG_EVERY_N = 1000\n\t_C.SOLVER.DBG_TRAINABLE = False # if True, will print the name of trainable params\n\t# ----------------------------------------------------------------------\n\t# Dataset options\n\t# ----------------------------------------------------------------------\n\t_C.DATA = CfgNode()\n\t_C.DATA.NAME = \"\"\n", "_C.DATA.DATAPATH = \"\"\n\t_C.DATA.FEATURE = \"\"  # e.g. inat2021_supervised\n\t_C.DATA.PERCENTAGE = 1.0\n\t_C.DATA.NUMBER_CLASSES = -1\n\t_C.DATA.MULTILABEL = False\n\t_C.DATA.CLASS_WEIGHTS_TYPE = \"none\"\n\t_C.DATA.CROPSIZE = 224  # or 384\n\t_C.DATA.NO_TEST = False\n\t_C.DATA.BATCH_SIZE = 32\n\t# Number of data loader workers per training process\n", "_C.DATA.NUM_WORKERS = 4\n\t# Load data to pinned host memory\n\t_C.DATA.PIN_MEMORY = True\n\t_C.DIST_BACKEND = \"nccl\"\n\t_C.DIST_INIT_PATH = \"env://\"\n\t_C.DIST_INIT_FILE = \"\"\n\tdef get_cfg():\n\t    \"\"\"\n\t    Get a copy of the default config.\n\t    \"\"\"\n", "    return _C.clone()\n"]}
{"filename": "src/utils/distributed.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Distributed helpers.\"\"\"\n\timport torch\n\timport torch.distributed as dist\n\t_LOCAL_PROCESS_GROUP = None\n\tdef get_world_size() -> int:\n\t    if not dist.is_available():\n\t        return 1\n\t    if not dist.is_initialized():\n\t        return 1\n", "    return dist.get_world_size()\n\tdef get_rank() -> int:\n\t    if not dist.is_available():\n\t        return 0\n\t    if not dist.is_initialized():\n\t        return 0\n\t    return dist.get_rank()\n\tdef is_master_process(num_gpus=8):\n\t    \"\"\"\n\t    Determines if the current process is the master process.\n", "    \"\"\"\n\t    if torch.distributed.is_initialized():\n\t        return dist.get_rank() % num_gpus == 0\n\t    else:\n\t        return True\n\tdef run(\n\t    local_rank,\n\t    num_proc,\n\t    func,\n\t    init_method,\n", "    shard_id,\n\t    num_shards,\n\t    backend,\n\t    cfg,\n\t    args,\n\t):\n\t    \"\"\"\n\t    Runs a function from a child process.\n\t    Args:\n\t        local_rank (int): rank of the current process on the current machine.\n", "        num_proc (int): number of processes per machine.\n\t        func (function): function to execute on each of the process.\n\t        init_method (string): method to initialize the distributed training.\n\t            TCP initialization: equiring a network address reachable from all\n\t            processes followed by the port.\n\t            Shared file-system initialization: makes use of a file system that\n\t            is shared and visible from all machines. The URL should start with\n\t            file:// and contain a path to a non-existent file on a shared file\n\t            system.\n\t        shard_id (int): the rank of the current machine.\n", "        num_shards (int): number of overall machines for the distributed\n\t            training job.\n\t        backend (string): three distributed backends ('nccl', 'gloo', 'mpi') are\n\t            supports, each with different capabilities. Details can be found\n\t            here:\n\t            https://pytorch.org/docs/stable/distributed.html\n\t        cfg (CfgNode): configs. Details can be found in\n\t            loco/config/defaults.py\n\t    \"\"\"\n\t    # Initialize the process group.\n", "    # shard_id = get_rank()\n\t    world_size = num_proc * num_shards\n\t    rank = shard_id * num_proc + local_rank\n\t    try:\n\t        torch.distributed.init_process_group(\n\t            backend=backend,\n\t            init_method=init_method,\n\t            world_size=world_size,\n\t            rank=rank,\n\t        )\n", "    except Exception as e:\n\t        raise e\n\t    torch.cuda.set_device(local_rank)\n\t    func(cfg, args)\n\tdef destroy_process_group():\n\t    \"\"\"Destroys the default process group.\"\"\"\n\t    torch.distributed.destroy_process_group()\n\tdef scaled_all_reduce(cfg, tensors):\n\t    \"\"\"Performs the scaled all_reduce operation on the provided tensors.\n\t    The input tensors are modified in-place. Currently supports only the sum\n", "    reduction operator. The reduced values are scaled by the inverse size of\n\t    the process group (equivalent to cfg.NUM_GPUS).\n\t    \"\"\"\n\t    # Queue the reductions\n\t    reductions = []\n\t    for tensor in tensors:\n\t        reduction = torch.distributed.all_reduce(tensor, async_op=True)\n\t        reductions.append(reduction)\n\t    # Wait for reductions to finish\n\t    for reduction in reductions:\n", "        reduction.wait()\n\t    # Scale the results\n\t    for tensor in tensors:\n\t        tensor.mul_(1.0 / cfg.NUM_GPUS / cfg.NUM_SHARDS)\n\t    return tensors\n\tdef cat_all_gather(tensors):\n\t    \"\"\"Performs the concatenated all_gather operation on the provided tensors.\n\t    \"\"\"\n\t    tensors_gather = [\n\t        torch.ones_like(tensors)\n", "        for _ in range(torch.distributed.get_world_size())\n\t    ]\n\t    torch.distributed.all_gather(tensors_gather, tensors, async_op=False)\n\t    output = torch.cat(tensors_gather, dim=0)\n\t    return output\n\tdef local_cat_all_gather(tensors):\n\t    \"\"\"Performs the concatenated all_gather operation on the provided tensors.\n\t    \"\"\"\n\t    tensors_gather = [\n\t        torch.ones_like(tensors)\n", "        for _ in range(get_local_size())\n\t    ]\n\t    torch.distributed.all_gather(\n\t        tensors_gather,\n\t        tensors,\n\t        async_op=False,\n\t        group=_LOCAL_PROCESS_GROUP,\n\t    )\n\t    output = torch.cat(tensors_gather, dim=0)\n\t    return output\n", "def get_local_size():\n\t    \"\"\"\n\t    Returns:\n\t        The size of the per-machine process group,\n\t        i.e. the number of processes per machine.\n\t    \"\"\"\n\t    if not dist.is_available():\n\t        return 1\n\t    if not dist.is_initialized():\n\t        return 1\n", "    return dist.get_world_size(group=_LOCAL_PROCESS_GROUP)\n\tdef get_local_rank():\n\t    \"\"\"\n\t    Returns:\n\t        The rank of the current process within the local (per-machine) process group.\n\t    \"\"\"\n\t    if not dist.is_available():\n\t        return 0\n\t    if not dist.is_initialized():\n\t        return 0\n", "    assert _LOCAL_PROCESS_GROUP is not None\n\t    return dist.get_rank(group=_LOCAL_PROCESS_GROUP)\n"]}
{"filename": "src/utils/file_io.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tProject specific pathmanagers for a project as recommended by Detectron2\n\t\"\"\"\n\tfrom iopath.common.file_io import PathManager as PathManagerBase\n\tfrom iopath.common.file_io import HTTPURLHandler\n\tPathManager = PathManagerBase()\n\tPathManager.register_handler(HTTPURLHandler())\n"]}
{"filename": "src/utils/io_utils.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\ta bunch of helper functions for read and write data\n\t\"\"\"\n\timport os\n\timport json\n\timport numpy as np\n\timport time\n\timport pandas as pd\n\tfrom typing import List, Union\n", "from PIL import Image, ImageFile\n\tImage.MAX_IMAGE_PIXELS = None\n\tdef save_or_append_df(out_path, df):\n\t    if os.path.exists(out_path):\n\t        previous_df = pd.read_pickle(out_path)\n\t        df = pd.concat([previous_df, df], ignore_index=True)\n\t    df.to_pickle(out_path)\n\t    print(f\"Saved output at {out_path}\")\n\tclass JSONEncoder(json.JSONEncoder):\n\t    def default(self, obj):\n", "        if isinstance(obj, np.ndarray):\n\t            return obj.tolist()\n\t        elif isinstance(obj, bytes):\n\t            return str(obj, encoding='utf-8')\n\t        elif isinstance(obj, np.integer):\n\t            return int(obj)\n\t        elif isinstance(obj, np.floating):\n\t            return float(obj)\n\t        elif isinstance(obj, np.ndarray):\n\t            return obj.tolist()\n", "        else:\n\t            # return super(MyEncoder, self).default(obj)\n\t            raise TypeError(\n\t                \"Unserializable object {} of type {}\".format(obj, type(obj))\n\t            )\n\tdef write_json(data: Union[list, dict], outfile: str) -> None:\n\t    json_dir, _ = os.path.split(outfile)\n\t    if json_dir and not os.path.exists(json_dir):\n\t        os.makedirs(json_dir)\n\t    with open(outfile, 'w') as f:\n", "        json.dump(data, f, cls=JSONEncoder, ensure_ascii=False, indent=2)\n\tdef read_json(filename: str) -> Union[list, dict]:\n\t    \"\"\"read json files\"\"\"\n\t    with open(filename, \"rb\") as fin:\n\t        data = json.load(fin, encoding=\"utf-8\")\n\t    return data\n\tdef pil_loader(path: str) -> Image.Image:\n\t    \"\"\"load an image from path, and suppress warning\"\"\"\n\t    # to avoid crashing for truncated (corrupted images)\n\t    ImageFile.LOAD_TRUNCATED_IMAGES = True\n", "    # open path as file to avoid ResourceWarning\n\t    # (https://github.com/python-pillow/Pillow/issues/835)\n\t    with open(path, 'rb') as f:\n\t        img = Image.open(f)\n\t        return img.convert('RGB')\n"]}
{"filename": "src/utils/distributed_orig.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Distributed helpers.\"\"\"\n\timport torch\n\timport torch.distributed as dist\n\t_LOCAL_PROCESS_GROUP = None\n\tdef get_world_size() -> int:\n\t    if not dist.is_available():\n\t        return 1\n\t    if not dist.is_initialized():\n\t        return 1\n", "    return dist.get_world_size()\n\tdef get_rank() -> int:\n\t    if not dist.is_available():\n\t        return 0\n\t    if not dist.is_initialized():\n\t        return 0\n\t    return dist.get_rank()\n\tdef is_master_process(num_gpus=8):\n\t    \"\"\"\n\t    Determines if the current process is the master process.\n", "    \"\"\"\n\t    if torch.distributed.is_initialized():\n\t        return dist.get_rank() % num_gpus == 0\n\t    else:\n\t        return True\n\tdef run(\n\t    local_rank,\n\t    num_proc,\n\t    func,\n\t    init_method,\n", "    shard_id,\n\t    num_shards,\n\t    backend,\n\t    cfg,\n\t    args,\n\t):\n\t    \"\"\"\n\t    Runs a function from a child process.\n\t    Args:\n\t        local_rank (int): rank of the current process on the current machine.\n", "        num_proc (int): number of processes per machine.\n\t        func (function): function to execute on each of the process.\n\t        init_method (string): method to initialize the distributed training.\n\t            TCP initialization: equiring a network address reachable from all\n\t            processes followed by the port.\n\t            Shared file-system initialization: makes use of a file system that\n\t            is shared and visible from all machines. The URL should start with\n\t            file:// and contain a path to a non-existent file on a shared file\n\t            system.\n\t        shard_id (int): the rank of the current machine.\n", "        num_shards (int): number of overall machines for the distributed\n\t            training job.\n\t        backend (string): three distributed backends ('nccl', 'gloo', 'mpi') are\n\t            supports, each with different capabilities. Details can be found\n\t            here:\n\t            https://pytorch.org/docs/stable/distributed.html\n\t        cfg (CfgNode): configs. Details can be found in\n\t            loco/config/defaults.py\n\t    \"\"\"\n\t    # Initialize the process group.\n", "    # shard_id = get_rank()\n\t    world_size = num_proc * num_shards\n\t    rank = shard_id * num_proc + local_rank\n\t    try:\n\t        torch.distributed.init_process_group(\n\t            backend=backend,\n\t            init_method=init_method,\n\t            world_size=world_size,\n\t            rank=rank,\n\t        )\n", "    except Exception as e:\n\t        raise e\n\t    torch.cuda.set_device(local_rank)\n\t    func(cfg, args)\n\tdef destroy_process_group():\n\t    \"\"\"Destroys the default process group.\"\"\"\n\t    torch.distributed.destroy_process_group()\n\tdef scaled_all_reduce(cfg, tensors):\n\t    \"\"\"Performs the scaled all_reduce operation on the provided tensors.\n\t    The input tensors are modified in-place. Currently supports only the sum\n", "    reduction operator. The reduced values are scaled by the inverse size of\n\t    the process group (equivalent to cfg.NUM_GPUS).\n\t    \"\"\"\n\t    # Queue the reductions\n\t    reductions = []\n\t    for tensor in tensors:\n\t        reduction = torch.distributed.all_reduce(tensor, async_op=True)\n\t        reductions.append(reduction)\n\t    # Wait for reductions to finish\n\t    for reduction in reductions:\n", "        reduction.wait()\n\t    # Scale the results\n\t    for tensor in tensors:\n\t        tensor.mul_(1.0 / cfg.NUM_GPUS / cfg.NUM_SHARDS)\n\t    return tensors\n\tdef cat_all_gather(tensors):\n\t    \"\"\"Performs the concatenated all_gather operation on the provided tensors.\n\t    \"\"\"\n\t    tensors_gather = [\n\t        torch.ones_like(tensors)\n", "        for _ in range(torch.distributed.get_world_size())\n\t    ]\n\t    torch.distributed.all_gather(tensors_gather, tensors, async_op=False)\n\t    output = torch.cat(tensors_gather, dim=0)\n\t    return output\n\tdef local_cat_all_gather(tensors):\n\t    \"\"\"Performs the concatenated all_gather operation on the provided tensors.\n\t    \"\"\"\n\t    tensors_gather = [\n\t        torch.ones_like(tensors)\n", "        for _ in range(get_local_size())\n\t    ]\n\t    torch.distributed.all_gather(\n\t        tensors_gather,\n\t        tensors,\n\t        async_op=False,\n\t        group=_LOCAL_PROCESS_GROUP,\n\t    )\n\t    output = torch.cat(tensors_gather, dim=0)\n\t    return output\n", "def get_local_size():\n\t    \"\"\"\n\t    Returns:\n\t        The size of the per-machine process group,\n\t        i.e. the number of processes per machine.\n\t    \"\"\"\n\t    if not dist.is_available():\n\t        return 1\n\t    if not dist.is_initialized():\n\t        return 1\n", "    return dist.get_world_size(group=_LOCAL_PROCESS_GROUP)\n\tdef get_local_rank():\n\t    \"\"\"\n\t    Returns:\n\t        The rank of the current process within the local (per-machine) process group.\n\t    \"\"\"\n\t    if not dist.is_available():\n\t        return 0\n\t    if not dist.is_initialized():\n\t        return 0\n", "    assert _LOCAL_PROCESS_GROUP is not None\n\t    return dist.get_rank(group=_LOCAL_PROCESS_GROUP)\n"]}
{"filename": "src/utils/train_utils.py", "chunked_list": ["#!/usr/bin/env python3\n\timport torch\n\tdef gpu_mem_usage():\n\t    \"\"\"Computes the GPU memory usage for the current device (GB).\"\"\"\n\t    if not torch.cuda.is_available():\n\t        return 0\n\t    # Number of bytes in a megabyte\n\t    _B_IN_GB = 1024 * 1024 * 1024\n\t    mem_usage_bytes = torch.cuda.max_memory_allocated()\n\t    return mem_usage_bytes / _B_IN_GB\n", "class AverageMeter(object):\n\t    \"\"\"Computes and stores the average and current value\"\"\"\n\t    def __init__(self, name, fmt=':f'):\n\t        self.name = name\n\t        self.fmt = fmt\n\t        self.reset()\n\t    def reset(self):\n\t        self.val = 0\n\t        self.avg = 0\n\t        self.sum = 0\n", "        self.count = 0\n\t    def update(self, val, n=1):\n\t        self.val = val\n\t        self.sum += val * n\n\t        self.count += n\n\t        self.avg = self.sum / self.count\n\t    def __str__(self):\n\t        fmtstr = '{name} {val' + self.fmt + '} ({avg' + self.fmt + '})'\n\t        return fmtstr.format(**self.__dict__)\n"]}
{"filename": "src/utils/vis_utils.py", "chunked_list": ["import datetime\n\timport os\n\timport glob\n\timport numpy as np\n\timport pandas as pd\n\timport torch\n\tfrom tqdm import tqdm\n\tfrom collections import defaultdict\n\tfrom sklearn.metrics import confusion_matrix\n\t# plt.rcParams[\"axes.grid\"] = False\n", "import warnings\n\twarnings.filterwarnings(\"ignore\")\n\tLOG_NAME = \"logs.txt\"\n\tdef remove_trailing(eval_dict):\n\t    min_num = min([len(v) for k, v in eval_dict.items() if \"top5\" not in k])\n\t    new_dict ={}\n\t    for k, v in eval_dict.items():\n\t        if \"top5\" not in k:\n\t            new_dict[k] = v[:min_num]\n\t    return new_dict\n", "def get_meta(job_root, job_path, model_type):\n\t    # get lr, wd, feature-type, dataset\n\t    j_data = job_path.split(\"/run\")[0].split(\n\t        job_root + \"/\" + model_type)[-1].split(\"/\")\n\t    data_name, feat_type, opt_params = j_data[1], j_data[2], j_data[3]\n\t    lr = float(opt_params.split(\"_\")[0].split(\"lr\")[-1])\n\t    wd = float(opt_params.split(\"_\")[1].split(\"wd\")[-1])\n\t    return data_name, feat_type, lr, wd\n\tdef update_eval(line, eval_dict, data_name):        \n\t    if \"top1\" in line and \"top\" in line.split(\": top1:\")[-1]:\n", "        metric = \"top\"     \n\t    else:\n\t        metric = \"rocauc\"\n\t    top1 = float(line.split(\": top1:\")[-1].split(metric)[0])\n\t    eval_type = line.split(\" Classification results with \")[-1].split(\": top1\")[0] \n\t    eval_type = \"\".join(eval_type.split(\"_\" + data_name))\n\t    eval_dict[eval_type + \"_top1\"].append(top1)\n\tdef get_nmi(job_path):\n\t    with open(job_path) as f:\n\t        lines = f.readlines()\n", "    nmi_dict = defaultdict(list)\n\t    num_jobs = 0\n\t    log_temp = []\n\t    for l in lines:  #, leave=False):\n\t        if \"Rank of current process:\" in l:\n\t            num_jobs += 1\n\t        if num_jobs == 2:\n\t            break\n\t        if \"Clutering nmi\" in l:\n\t            n = l.split(\"Clutering nmi: \")[-1].split(\",\")[0]\n", "            a_n = l.split(\"adjusted nmi: \")[-1].split(\",\")[0]\n\t            v = l.split(\"v: \")[-1].split(\",\")[0]\n\t            nmi_dict[\"nmi\"].append(float(n))\n\t            nmi_dict[\"a_nmi\"].append(float(a_n))\n\t            nmi_dict[\"v_nmi\"].append(float(v))\n\t    return nmi_dict\n\tdef get_mean_accuracy(job_path, data_name):\n\t    val_data = torch.load(\n\t        job_path.replace(\"logs.txt\", f\"val_{data_name}_logits.pth\"))\n\t    test_data = torch.load(\n", "        job_path.replace(\"logs.txt\", f\"val_{data_name}_logits.pth\"))\n\t    v_matrix = confusion_matrix(\n\t        val_data['targets'],\n\t        np.argmax(val_data['joint_logits'], 1)\n\t    )\n\t    t_matrix = confusion_matrix(\n\t        test_data['targets'],\n\t        np.argmax(test_data['joint_logits'], 1)\n\t    )\n\t    return np.mean(v_matrix.diagonal()/v_matrix.sum(axis=1) ) * 100, np.mean(t_matrix.diagonal()/t_matrix.sum(axis=1) ) * 100\n", "def get_training_data(job_path, model_type, job_root):\n\t    data_name, feat_type, lr, wd = get_meta(job_root, job_path, model_type)\n\t    with open(job_path) as f:\n\t        lines = f.readlines()\n\t    # get training loss per epoch, \n\t    # cls results for both val and test\n\t    train_loss = []\n\t    eval_dict = defaultdict(list)\n\t#     best_epoch = -1\n\t    num_jobs = 0\n", "    total_params = -1\n\t    gradiented_params = -1\n\t    batch_size = None\n\t    for line in lines:  #, leave=False):\n\t        if \"{'BATCH_SIZE'\" in line and batch_size is None:\n\t            batch_size = int(line.split(\"'BATCH_SIZE': \")[-1].split(\",\")[0])\n\t        if \"Total Parameters: \" in line:\n\t            total_params = int(line.split(\"Total Parameters: \")[-1].split(\"\\t\")[0])\n\t            gradiented_params = int(line.split(\"Gradient Parameters: \")[-1].split(\"\\n\")[0])\n\t        if \"Rank of current process:\" in line:\n", "            num_jobs += 1\n\t        if num_jobs == 2:\n\t            break\n\t        if \"average train loss:\" in line:\n\t            loss = float(line.split(\"average train loss: \")[-1])\n\t            train_loss.append(loss)\n\t        if \" Classification results with \" in line:\n\t            update_eval(line, eval_dict, data_name)\n\t    meta_dict = {\n\t        \"data\": data_name,\n", "        \"feature\": feat_type,\n\t        \"lr\": float(lr) * 256 / int(batch_size),\n\t        \"wd\": wd,\n\t        \"total_params\": total_params,\n\t        \"tuned_params\": gradiented_params,\n\t        \"tuned / total (%)\": round(gradiented_params / total_params * 100, 4),\n\t        \"batch_size\": batch_size,\n\t    }\n\t    v_top1, t_top1 = None, None\n\t    return train_loss, eval_dict, meta_dict, (v_top1, t_top1)\n", "def get_time(file):\n\t    with open(file) as f:\n\t        lines = f.readlines()\n\t    start_time = lines[0].split(\"[\")[1].split(\"]\")[0]\n\t    start_time = datetime.datetime.strptime(start_time, '%m/%d %H:%M:%S')\n\t    end_time = lines[-1].split(\"[\")[1].split(\"]\")[0]\n\t    end_time = datetime.datetime.strptime(end_time, '%m/%d %H:%M:%S')\n\t    per_iter = None\n\t    with open(file) as f:\n\t        lines = f.readlines()\n", "    per_batch = []\n\t    per_batch_train = []\n\t    for line in lines[::-1]:\n\t#         print(line)\"Test 6/6. loss: 6.097, \"\n\t        if \". loss:\" in line and \"Test\" in line:\n\t            per_iter = line.split(\" s / batch\")[0].split(\",\")[-1]\n\t            per_batch.append(float(per_iter))\n\t        if \". train loss:\" in line:\n\t            per_iter = line.split(\" s / batch\")[0].split(\",\")[-1]\n\t            per_batch_train.append(float(per_iter))\n", "    return datetime.timedelta(seconds=(end_time-start_time).total_seconds()), np.mean(per_batch), np.mean(per_batch_train)\n\tdef get_df(files, model_type, root, is_best=True, is_last=True, max_epoch=300):\n\t    pd_dict = defaultdict(list)\n\t    for job_path in tqdm(files, desc=model_type):\n\t        train_loss, eval_results, meta_dict, (v_top1, t_top1) = get_training_data(job_path, model_type, root)\n\t        batch_size = meta_dict[\"batch_size\"]\n\t        if len(eval_results) == 0:\n\t            print(f\"job {job_path} not ready\")\n\t            continue\n\t        if len(eval_results[\"val_top1\"]) == 0:\n", "            print(f\"job {job_path} not ready\")\n\t            continue\n\t        if \"val_top1\" not in eval_results or \"test_top1\" not in eval_results:\n\t            print(f\"inbalanced: {job_path}\")\n\t            continue\n\t        for k, v in meta_dict.items():\n\t            pd_dict[k].append(v)\n\t        metric_b = \"val_top1\"\n\t        best_epoch = np.argmax(eval_results[metric_b])\n\t        if is_best:\n", "            for name, val in eval_results.items():\n\t                if \"top5\" in name:\n\t                    continue\n\t                if len(val) == 0:\n\t                    continue\n\t                if not isinstance(val[0], list):\n\t                    try:\n\t                        pd_dict[\"b-\" + name].append(val[best_epoch])\n\t                    except:\n\t                        pd_dict[\"b-\" + name].append(-1)\n", "                        # ongoing training process\n\t                        print(name, best_epoch, val)\n\t        # last epoch\n\t        if is_last:\n\t            if v_top1 is not None:\n\t                pd_dict[\"l-val_top1\"].append(v_top1)\n\t                pd_dict[\"l-test_top1\"].append(t_top1)\n\t                val = eval_results[\"val_top1\"]\n\t            else:\n\t                for name, val in eval_results.items():\n", "                    if \"top5\" in name:\n\t                        continue\n\t                    if len(val) == 0:\n\t                        continue\n\t                    pd_dict[\"l-\" + name].append(val[-1])\n\t        pd_dict[\"best_epoch\"].append(f\"{best_epoch + 1} | {len(val)}\")\n\t        pd_dict[\"file\"].append(job_path)\n\t        total_time, _, _ = get_time(job_path)\n\t        pd_dict[\"total_time\"].append(total_time)\n\t    result_df = None\n", "    if len(pd_dict) > 0:\n\t        result_df = pd.DataFrame(pd_dict)\n\t        result_df = result_df.sort_values(['data', \"feature\", \"lr\", \"wd\"])\n\t    return result_df\n\tdef delete_ckpts(f):\n\t    # delete saved ckpts for re\n\t    f_dir, _ = os.path.split(f)\n\t    for f_delete in glob.glob(f_dir + \"/*.pth\"):\n\t        os.remove(f_delete)\n\t        print(f\"removed {f_delete}\")\n", "def average_df(df, metric_names=[\"l-val_top1\", \"l-val_base_top1\"], take_average=True):\n\t    # for each data and features and train type, display the averaged results\n\t    data_names = set(list(df[\"data\"]))\n\t    f_names = set(list(df[\"feature\"]))\n\t    t_names = set(list(df[\"type\"]))\n\t    hp_names = [\n\t        c for c in df.columns if c not in [\"data\", \"feature\", \"type\", \"file\", \"best_epoch\"] + metric_names]\n\t    data_dict = defaultdict(list)\n\t    for d_name in data_names:\n\t        for f_name in f_names:\n", "            for t_name in t_names:\n\t                result = df[df.data == d_name]\n\t                result = result[result.feature == f_name]\n\t                result = result[result.type == t_name]\n\t                # take average here\n\t                if len(result) == 0:\n\t                    continue\n\t                data_dict[\"data\"].append(d_name)\n\t                data_dict[\"feature\"].append(f_name)\n\t                data_dict[\"type\"].append(t_name)\n", "                data_dict[\"total_runs\"].append(len(result))\n\t                for m in metric_names:\n\t                    if take_average:\n\t                        data_dict[m].append(\"{:.2f}\".format(\n\t                            np.mean([r for i, r in enumerate(result[m])]),\n\t                        ))\n\t                        data_dict[f\"{m}-std\"].append(\"{:.2f}\".format(\n\t                            np.std([r for i, r in enumerate(result[m])])\n\t                        ))\n\t                    else:\n", "                        data_dict[m].append(\"{:.2f}\".format(\n\t                            np.median([r for i, r in enumerate(result[m])]),\n\t                        ))\n\t                for h_name in hp_names:\n\t                    data_dict[h_name].append(result[h_name].iloc[0])\n\t    df = pd.DataFrame(data_dict)\n\t    df = df.sort_values([\"data\", \"feature\", \"type\"])\n\t    return df\n\tdef filter_df(df, sorted_cols, max_num):\n\t    # for each data and features, display only top max_num runs\n", "    data_names = set(list(df[\"data\"]))\n\t    f_names = set(list(df[\"feature\"]))\n\t    t_names = set(list(df[\"type\"]))\n\t    df_list = []\n\t    for d_name in data_names:\n\t        for f_name in f_names:\n\t            for t_name in t_names:\n\t                result = df[df.data == d_name]\n\t                result = result[result.feature == f_name]\n\t                result = result[result.type == t_name]\n", "                if len(result) == 0:\n\t                    continue\n\t                cols = [c for c in sorted_cols if c in result.columns]\n\t                result = result.sort_values(cols, ignore_index=True)\n\t                _num = min([max_num, len(result)])\n\t    #             print(result.iloc[-_num:])\n\t                df_list.append(result.iloc[-_num:])\n\t    return pd.concat(df_list)\n\tdef display_results(df, sorted_cols=[\"data\", \"feature\", \"type\", \"l-val_top1\"], max_num=1):\n\t    cols = [c for c in df.columns if c not in []]\n", "    df = df[cols]\n\t    if max_num is not None:\n\t        df = filter_df(df, sorted_cols[3:], max_num)\n\t    return df.sort_values(sorted_cols).reset_index(drop=True)\n"]}
{"filename": "src/utils/logging.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Logging.\"\"\"\n\timport builtins\n\timport decimal\n\timport functools\n\timport logging\n\timport simplejson\n\timport sys\n\timport os\n\tfrom termcolor import colored\n", "from .distributed import is_master_process\n\tfrom .file_io import PathManager\n\t# Show filename and line number in logs\n\t_FORMAT = \"[%(levelname)s: %(filename)s: %(lineno)4d]: %(message)s\"\n\tdef _suppress_print():\n\t    \"\"\"Suppresses printing from the current process.\"\"\"\n\t    def print_pass(*objects, sep=\" \", end=\"\\n\", file=sys.stdout, flush=False):\n\t        pass\n\t    builtins.print = print_pass\n\t# cache the opened file object, so that different calls to `setup_logger`\n", "# with the same file name can safely write to the same file.\n\t@functools.lru_cache(maxsize=None)\n\tdef _cached_log_stream(filename):\n\t    return PathManager.open(filename, \"a\")\n\t@functools.lru_cache()  # so that calling setup_logger multiple times won't add many handlers  # noqa\n\tdef setup_logging(\n\t    num_gpu, num_shards, output=\"\", name=\"visual_prompt\", color=True):\n\t    \"\"\"Sets up the logging.\"\"\"\n\t    # Enable logging only for the master process\n\t    if is_master_process(num_gpu):\n", "        # Clear the root logger to prevent any existing logging config\n\t        # (e.g. set by another module) from messing with our setup\n\t        logging.root.handlers = []\n\t        # Configure logging\n\t        logging.basicConfig(\n\t            level=logging.INFO, format=_FORMAT, stream=sys.stdout\n\t        )\n\t    else:\n\t        _suppress_print()\n\t    if name is None:\n", "        name = __name__\n\t    logger = logging.getLogger(name)\n\t    # remove any lingering handler\n\t    logger.handlers.clear()\n\t    logger.setLevel(logging.INFO)\n\t    logger.propagate = False\n\t    plain_formatter = logging.Formatter(\n\t        \"[%(asctime)s][%(levelname)s] %(name)s: %(lineno)4d: %(message)s\",\n\t        datefmt=\"%m/%d %H:%M:%S\",\n\t    )\n", "    if color:\n\t        formatter = _ColorfulFormatter(\n\t            colored(\"[%(asctime)s %(name)s]: \", \"green\") + \"%(message)s\",\n\t            datefmt=\"%m/%d %H:%M:%S\",\n\t            root_name=name,\n\t            abbrev_name=str(name),\n\t        )\n\t    else:\n\t        formatter = plain_formatter\n\t    if is_master_process(num_gpu):\n", "        ch = logging.StreamHandler(stream=sys.stdout)\n\t        ch.setLevel(logging.DEBUG)\n\t        ch.setFormatter(formatter)\n\t        logger.addHandler(ch)\n\t    if is_master_process(num_gpu * num_shards):\n\t        if len(output) > 0:\n\t            if output.endswith(\".txt\") or output.endswith(\".log\"):\n\t                filename = output\n\t            else:\n\t                filename = os.path.join(output, \"logs.txt\")\n", "            PathManager.mkdirs(os.path.dirname(filename))\n\t            fh = logging.StreamHandler(_cached_log_stream(filename))\n\t            fh.setLevel(logging.DEBUG)\n\t            fh.setFormatter(plain_formatter)\n\t            logger.addHandler(fh)\n\t    return logger\n\tdef setup_single_logging(name, output=\"\"):\n\t    \"\"\"Sets up the logging.\"\"\"\n\t    # Enable logging only for the master process\n\t    # Clear the root logger to prevent any existing logging config\n", "    # (e.g. set by another module) from messing with our setup\n\t    logging.root.handlers = []\n\t    # Configure logging\n\t    logging.basicConfig(\n\t        level=logging.INFO, format=_FORMAT, stream=sys.stdout\n\t    )\n\t    if len(name) == 0:\n\t        name = __name__\n\t    logger = logging.getLogger(name)\n\t    logger.setLevel(logging.INFO)\n", "    logger.propagate = False\n\t    plain_formatter = logging.Formatter(\n\t        \"[%(asctime)s][%(levelname)s] %(name)s: %(lineno)4d: %(message)s\",\n\t        datefmt=\"%m/%d %H:%M:%S\",\n\t    )\n\t    formatter = _ColorfulFormatter(\n\t        colored(\"[%(asctime)s %(name)s]: \", \"green\") + \"%(message)s\",\n\t        datefmt=\"%m/%d %H:%M:%S\",\n\t        root_name=name,\n\t        abbrev_name=str(name),\n", "    )\n\t    ch = logging.StreamHandler(stream=sys.stdout)\n\t    ch.setLevel(logging.DEBUG)\n\t    ch.setFormatter(formatter)\n\t    logger.addHandler(ch)\n\t    if len(output) > 0:\n\t        if output.endswith(\".txt\") or output.endswith(\".log\"):\n\t            filename = output\n\t        else:\n\t            filename = os.path.join(output, \"logs.txt\")\n", "        PathManager.mkdirs(os.path.dirname(filename))\n\t        fh = logging.StreamHandler(_cached_log_stream(filename))\n\t        fh.setLevel(logging.DEBUG)\n\t        fh.setFormatter(plain_formatter)\n\t        logger.addHandler(fh)\n\t    return logger\n\tdef get_logger(name):\n\t    \"\"\"Retrieves the logger.\"\"\"\n\t    return logging.getLogger(name)\n\tdef log_json_stats(stats, sort_keys=True):\n", "    \"\"\"Logs json stats.\"\"\"\n\t    # It seems that in Python >= 3.6 json.encoder.FLOAT_REPR has no effect\n\t    # Use decimal+string as a workaround for having fixed length values in logs\n\t    logger = get_logger(__name__)\n\t    stats = {\n\t        k: decimal.Decimal(\"{:.6f}\".format(v)) if isinstance(v, float) else v\n\t        for k, v in stats.items()\n\t    }\n\t    json_stats = simplejson.dumps(stats, sort_keys=True, use_decimal=True)\n\t    if stats[\"_type\"] == \"test_epoch\" or stats[\"_type\"] == \"train_epoch\":\n", "        logger.info(\"json_stats: {:s}\".format(json_stats))\n\t    else:\n\t        logger.info(\"{:s}\".format(json_stats))\n\tclass _ColorfulFormatter(logging.Formatter):\n\t    # from detectron2\n\t    def __init__(self, *args, **kwargs):\n\t        self._root_name = kwargs.pop(\"root_name\") + \".\"\n\t        self._abbrev_name = kwargs.pop(\"abbrev_name\", \"\")\n\t        if len(self._abbrev_name):\n\t            self._abbrev_name = self._abbrev_name + \".\"\n", "        super(_ColorfulFormatter, self).__init__(*args, **kwargs)\n\t    def formatMessage(self, record: logging.LogRecord) -> str:\n\t        record.name = record.name.replace(self._root_name, self._abbrev_name)\n\t        log = super(_ColorfulFormatter, self).formatMessage(record)\n\t        if record.levelno == logging.WARNING:\n\t            prefix = colored(\"WARNING\", \"red\", attrs=[\"blink\"])\n\t        elif record.levelno == logging.ERROR or record.levelno == logging.CRITICAL:\n\t            prefix = colored(\"ERROR\", \"red\", attrs=[\"blink\", \"underline\"])\n\t        else:\n\t            return log\n", "        return prefix + \" \" + log\n"]}
{"filename": "src/data/loader.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Data loader.\"\"\"\n\timport torch\n\tfrom torch.utils.data.distributed import DistributedSampler\n\tfrom torch.utils.data.sampler import RandomSampler\n\tfrom ..utils import logging\n\tfrom .datasets.json_dataset import (\n\t    CUB200Dataset, CarsDataset, DogsDataset, FlowersDataset, NabirdsDataset\n\t)\n\tlogger = logging.get_logger(\"visual_prompt\")\n", "_DATASET_CATALOG = {\n\t    \"CUB\": CUB200Dataset,\n\t    'OxfordFlowers': FlowersDataset,\n\t    'StanfordCars': CarsDataset,\n\t    'StanfordDogs': DogsDataset,\n\t    \"nabirds\": NabirdsDataset,\n\t}\n\tdef _construct_loader(cfg, split, batch_size, shuffle, drop_last):\n\t    \"\"\"Constructs the data loader for the given dataset.\"\"\"\n\t    dataset_name = cfg.DATA.NAME\n", "    # Construct the dataset\n\t    if dataset_name.startswith(\"vtab-\"):\n\t        # import the tensorflow here only if needed\n\t        from .datasets.tf_dataset import TFDataset\n\t        dataset = TFDataset(cfg, split)\n\t    else:\n\t        assert (\n\t            dataset_name in _DATASET_CATALOG.keys()\n\t        ), \"Dataset '{}' not supported\".format(dataset_name)\n\t        dataset = _DATASET_CATALOG[dataset_name](cfg, split)\n", "    # Create a sampler for multi-process training\n\t    sampler = DistributedSampler(dataset) if cfg.NUM_GPUS > 1 else None\n\t    # Create a loader\n\t    loader = torch.utils.data.DataLoader(\n\t        dataset,\n\t        batch_size=batch_size,\n\t        shuffle=(False if sampler else shuffle),\n\t        sampler=sampler,\n\t        num_workers=cfg.DATA.NUM_WORKERS,\n\t        pin_memory=cfg.DATA.PIN_MEMORY,\n", "        drop_last=drop_last,\n\t    )\n\t    return loader\n\tdef construct_train_loader(cfg):\n\t    \"\"\"Train loader wrapper.\"\"\"\n\t    if cfg.NUM_GPUS > 1:\n\t        drop_last = True\n\t    else:\n\t        drop_last = False\n\t    return _construct_loader(\n", "        cfg=cfg,\n\t        split=\"train\",\n\t        batch_size=int(cfg.DATA.BATCH_SIZE / cfg.NUM_GPUS),\n\t        shuffle=True,\n\t        drop_last=drop_last,\n\t    )\n\tdef construct_trainval_loader(cfg):\n\t    \"\"\"Train loader wrapper.\"\"\"\n\t    if cfg.NUM_GPUS > 1:\n\t        drop_last = True\n", "    else:\n\t        drop_last = False\n\t    return _construct_loader(\n\t        cfg=cfg,\n\t        split=\"trainval\",\n\t        batch_size=int(cfg.DATA.BATCH_SIZE / cfg.NUM_GPUS),\n\t        shuffle=True,\n\t        drop_last=drop_last,\n\t    )\n\tdef construct_test_loader(cfg):\n", "    \"\"\"Test loader wrapper.\"\"\"\n\t    return _construct_loader(\n\t        cfg=cfg,\n\t        split=\"test\",\n\t        batch_size=int(cfg.DATA.BATCH_SIZE / cfg.NUM_GPUS),\n\t        shuffle=False,\n\t        drop_last=False,\n\t    )\n\tdef construct_val_loader(cfg, batch_size=None):\n\t    if batch_size is None:\n", "        bs = int(cfg.DATA.BATCH_SIZE / cfg.NUM_GPUS)\n\t    else:\n\t        bs = batch_size\n\t    \"\"\"Validation loader wrapper.\"\"\"\n\t    return _construct_loader(\n\t        cfg=cfg,\n\t        split=\"val\",\n\t        batch_size=bs,\n\t        shuffle=False,\n\t        drop_last=False,\n", "    )\n\tdef shuffle(loader, cur_epoch):\n\t    \"\"\"\"Shuffles the data.\"\"\"\n\t    assert isinstance(\n\t        loader.sampler, (RandomSampler, DistributedSampler)\n\t    ), \"Sampler type '{}' not supported\".format(type(loader.sampler))\n\t    # RandomSampler handles shuffling automatically\n\t    if isinstance(loader.sampler, DistributedSampler):\n\t        # DistributedSampler shuffles data based on epoch\n\t        loader.sampler.set_epoch(cur_epoch)\n"]}
{"filename": "src/data/transforms.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Image transformations.\"\"\"\n\timport torchvision as tv\n\tdef get_transforms(split, size):\n\t    normalize = tv.transforms.Normalize(\n\t        mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n\t    )\n\t    if size == 448:\n\t        resize_dim = 512\n\t        crop_dim = 448\n", "    elif size == 224:\n\t        resize_dim = 256\n\t        crop_dim = 224\n\t    elif size == 384:\n\t        resize_dim = 438\n\t        crop_dim = 384\n\t    if split == \"train\":\n\t        transform = tv.transforms.Compose(\n\t            [\n\t                tv.transforms.Resize(resize_dim),\n", "                tv.transforms.RandomCrop(crop_dim),\n\t                tv.transforms.RandomHorizontalFlip(0.5),\n\t                # tv.transforms.RandomResizedCrop(224, scale=(0.2, 1.0)),\n\t                # tv.transforms.RandomHorizontalFlip(),\n\t                tv.transforms.ToTensor(),\n\t                normalize,\n\t            ]\n\t        )\n\t    else:\n\t        transform = tv.transforms.Compose(\n", "            [\n\t                tv.transforms.Resize(resize_dim),\n\t                tv.transforms.CenterCrop(crop_dim),\n\t                tv.transforms.ToTensor(),\n\t                normalize,\n\t            ]\n\t        )\n\t    return transform\n"]}
{"filename": "src/data/vtab_datasets/dmlab.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Dmlab data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t@Registry.register(\"data.dmlab\", \"class\")\n\tclass DmlabData(base.ImageTfdsData):\n\t  \"\"\"Dmlab dataset.\n\t      The Dmlab dataset contains frames observed by the agent acting in the\n\t      DMLab environment, which are annotated by the distance between\n\t      the agent and various objects present in the environment. The goal is to\n\t      is to evaluate the ability of a visual model to reason about distances\n\t      from the visual input in 3D environments. The Dmlab dataset consists of\n", "      360x480 color images in 6 classes. The classes are\n\t      {close, far, very far} x {positive reward, negative reward}\n\t      respectively.\n\t  \"\"\"\n\t  def __init__(self, data_dir=None):\n\t    dataset_builder = tfds.builder(\"dmlab:2.0.1\", data_dir=data_dir)\n\t    tfds_splits = {\n\t        \"train\": \"train\",\n\t        \"val\": \"validation\",\n\t        \"trainval\": \"train+validation\",\n", "        \"test\": \"test\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"validation[:200]\",\n\t        \"train800val200\": \"train[:800]+validation[:200]\",\n\t    }\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    train_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    val_count = dataset_builder.info.splits[\"validation\"].num_examples\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    # Creates a dict with example counts for each split.\n", "    num_samples_splits = {\n\t        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    super(DmlabData, self).__init__(\n", "        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        base_preprocess_fn=base.make_get_and_cast_tensors_fn({\n\t            \"image\": (\"image\", None),\n\t            \"label\": (\"label\", None),\n\t        }),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes,\n", "        image_key=\"image\")\n"]}
{"filename": "src/data/vtab_datasets/clevr.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements CLEVR data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport numpy as np\n", "import tensorflow.compat.v1 as tf\n\timport tensorflow_datasets as tfds\n\tfrom . import base as base\n\tfrom .registry import Registry\n\tTRAIN_SPLIT_PERCENT = 90\n\tdef _count_preprocess_fn(x):\n\t  return {\"image\": x[\"image\"],\n\t          \"label\": tf.size(x[\"objects\"][\"size\"]) - 3}\n\tdef _count_cylinders_preprocess_fn(x):\n\t  # Class distribution:\n", "  num_cylinders = tf.reduce_sum(\n\t      tf.cast(tf.equal(x[\"objects\"][\"shape\"], 2), tf.int32))\n\t  return {\"image\": x[\"image\"], \"label\": num_cylinders}\n\tdef _closest_object_preprocess_fn(x):\n\t  dist = tf.reduce_min(x[\"objects\"][\"pixel_coords\"][:, 2])\n\t  # These thresholds are uniformly spaced and result in more or less balanced\n\t  # distribution of classes, see the resulting histogram:\n\t  thrs = np.array([0.0, 8.0, 8.5, 9.0, 9.5, 10.0, 100.0])\n\t  label = tf.reduce_max(tf.where((thrs - dist) < 0))\n\t  return {\"image\": x[\"image\"],\n", "          \"label\": label}\n\t_TASK_DICT = {\n\t    \"count_all\": {\n\t        \"preprocess_fn\": _count_preprocess_fn,\n\t        \"num_classes\": 8\n\t    },\n\t    \"count_cylinders\": {\n\t        \"preprocess_fn\": _count_cylinders_preprocess_fn,\n\t        \"num_classes\": 11\n\t    },\n", "    \"closest_object_distance\": {\n\t        \"preprocess_fn\": _closest_object_preprocess_fn,\n\t        \"num_classes\": 6\n\t    },\n\t}\n\t@Registry.register(\"data.clevr\", \"class\")\n\tclass CLEVRData(base.ImageTfdsData):\n\t  \"\"\"Provides CLEVR dataset.\n\t  Currently, two tasks are supported:\n\t    1. Predict number of objects.\n", "    2. Predict distnace to the closest object.\n\t  \"\"\"\n\t  def __init__(self, task, data_dir=None):\n\t    if task not in _TASK_DICT:\n\t      raise ValueError(\"Unknown task: %s\" % task)\n\t    dataset_builder = tfds.builder(\"clevr:3.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Creates a dict with example counts for each split.\n\t    trainval_count = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n\t    test_count = dataset_builder.info.splits[tfds.Split.TEST].num_examples\n", "    num_samples_splits = {\n\t        \"train\": (TRAIN_SPLIT_PERCENT * trainval_count) // 100,\n\t        \"val\": trainval_count - (TRAIN_SPLIT_PERCENT * trainval_count) // 100,\n\t        \"trainval\": trainval_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    # Defines dataset specific train/val/trainval/test splits.\n", "    tfds_splits = {\n\t        \"train\": \"train[:{}]\".format(num_samples_splits[\"train\"]),\n\t        \"val\": \"train[{}:]\".format(num_samples_splits[\"train\"]),\n\t        \"trainval\": \"train\",\n\t        \"test\": \"validation\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n\t        \"train800val200\": \"train[:800]+train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n", "    }\n\t    task = _TASK_DICT[task]\n\t    base_preprocess_fn = task[\"preprocess_fn\"]\n\t    super(CLEVRData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n", "        base_preprocess_fn=base_preprocess_fn,\n\t        num_classes=task[\"num_classes\"])\n"]}
{"filename": "src/data/vtab_datasets/registry.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Global Registry for the task adaptation framework.\n\t\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n", "import ast\n\timport functools\n\tdef partialclass(cls, *base_args, **base_kwargs):\n\t  \"\"\"Builds a subclass with partial application of the given args and keywords.\n\t  Equivalent to functools.partial performance, base_args are preprended to the\n\t  positional arguments given during object initialization and base_kwargs are\n\t  updated with the kwargs given later.\n\t  Args:\n\t    cls: The base class.\n\t    *base_args: Positional arguments to be applied to the subclass.\n", "    **base_kwargs: Keyword arguments to be applied to the subclass.\n\t  Returns:\n\t    A subclass of the input class.\n\t  \"\"\"\n\t  class _NewClass(cls):\n\t    def __init__(self, *args, **kwargs):\n\t      bound_args = base_args + args\n\t      bound_kwargs = base_kwargs.copy()\n\t      bound_kwargs.update(kwargs)\n\t      super(_NewClass, self).__init__(*bound_args, **bound_kwargs)\n", "  return _NewClass\n\tdef parse_name(string_to_parse):\n\t  \"\"\"Parses input to the registry's lookup function.\n\t  Args:\n\t    string_to_parse: can be either an arbitrary name or function call\n\t      (optionally with positional and keyword arguments).\n\t      e.g. \"multiclass\", \"resnet50_v2(filters_factor=8)\".\n\t  Returns:\n\t    A tuple of input name and a dctinary with arguments. Examples:\n\t      \"multiclass\" -> (\"multiclass\", (), {})\n", "      \"resnet50_v2(9, filters_factor=4)\" ->\n\t          (\"resnet50_v2\", (9,), {\"filters_factor\": 4})\n\t  \"\"\"\n\t  expr = ast.parse(string_to_parse, mode=\"eval\").body  # pytype: disable=attribute-error\n\t  if not isinstance(expr, (ast.Attribute, ast.Call, ast.Name)):\n\t    raise ValueError(\n\t        \"The given string should be a name or a call, but a {} was parsed from \"\n\t        \"the string {!r}\".format(type(expr), string_to_parse))\n\t  # Notes:\n\t  # name=\"some_name\" -> type(expr) = ast.Name\n", "  # name=\"module.some_name\" -> type(expr) = ast.Attribute\n\t  # name=\"some_name()\" -> type(expr) = ast.Call\n\t  # name=\"module.some_name()\" -> type(expr) = ast.Call\n\t  if isinstance(expr, ast.Name):\n\t    return string_to_parse, {}\n\t  elif isinstance(expr, ast.Attribute):\n\t    return string_to_parse, {}\n\t  def _get_func_name(expr):\n\t    if isinstance(expr, ast.Attribute):\n\t      return _get_func_name(expr.value) + \".\" + expr.attr\n", "    elif isinstance(expr, ast.Name):\n\t      return expr.id\n\t    else:\n\t      raise ValueError(\n\t          \"Type {!r} is not supported in a function name, the string to parse \"\n\t          \"was {!r}\".format(type(expr), string_to_parse))\n\t  def _get_func_args_and_kwargs(call):\n\t    args = tuple([ast.literal_eval(arg) for arg in call.args])\n\t    kwargs = {\n\t        kwarg.arg: ast.literal_eval(kwarg.value) for kwarg in call.keywords\n", "    }\n\t    return args, kwargs\n\t  func_name = _get_func_name(expr.func)\n\t  func_args, func_kwargs = _get_func_args_and_kwargs(expr)\n\t  if func_args:\n\t    raise ValueError(\"Positional arguments are not supported here, but these \"\n\t                     \"were found: {!r}\".format(func_args))\n\t  return func_name, func_kwargs\n\tclass Registry(object):\n\t  \"\"\"Implements global Registry.\"\"\"\n", "  _GLOBAL_REGISTRY = {}\n\t  @staticmethod\n\t  def global_registry():\n\t    return Registry._GLOBAL_REGISTRY\n\t  @staticmethod\n\t  def register(name, item_type):\n\t    \"\"\"Creates a function that registers its input.\"\"\"\n\t    if item_type not in [\"function\", \"class\"]:\n\t      raise ValueError(\"Unknown item type: %s\" % item_type)\n\t    def _register(item):\n", "      if name in Registry.global_registry():\n\t        raise KeyError(\n\t            \"The name {!r} was already registered in with type {!r}\".format(\n\t                name, item_type))\n\t      Registry.global_registry()[name] = (item, item_type)\n\t      return item\n\t    return _register\n\t  @staticmethod\n\t  def lookup(lookup_string, kwargs_extra=None):\n\t    \"\"\"Lookup a name in the registry.\"\"\"\n", "    name, kwargs = parse_name(lookup_string)\n\t    if kwargs_extra:\n\t      kwargs.update(kwargs_extra)\n\t    item, item_type = Registry.global_registry()[name]\n\t    if item_type == \"function\":\n\t      return functools.partial(item, **kwargs)\n\t    elif item_type == \"class\":\n\t      return partialclass(item, **kwargs)\n"]}
{"filename": "src/data/vtab_datasets/svhn.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Svhn data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t# This constant specifies the percentage of data that is used to create custom\n\t# train/val splits. Specifically, TRAIN_SPLIT_PERCENT% of the official training\n\t# split is used as a new training split and the rest is used for validation.\n\tTRAIN_SPLIT_PERCENT = 90\n\t@Registry.register(\"data.svhn\", \"class\")\n\tclass SvhnData(base.ImageTfdsData):\n\t  \"\"\"Provides SVHN data.\n\t  The Street View House Numbers (SVHN) Dataset is an image digit recognition\n", "  dataset of over 600,000 color digit images coming from real world data.\n\t  Split size:\n\t    - Training set: 73,257 images\n\t    - Testing set: 26,032 images\n\t    - Extra training set: 531,131 images\n\t  Following the common setup on SVHN, we only use the official training and\n\t  testing data. Images are cropped to 32x32.\n\t  URL: http://ufldl.stanford.edu/housenumbers/\n\t  \"\"\"\n\t  def __init__(self, data_dir=None):\n", "    dataset_builder = tfds.builder(\"svhn_cropped:3.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    trainval_count = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n\t    test_count = dataset_builder.info.splits[tfds.Split.TEST].num_examples\n\t    # Creates a dict with example counts for each split.\n\t    num_samples_splits = {\n\t        # Calculates the train/val split example count based on percent.\n\t        \"train\": TRAIN_SPLIT_PERCENT * trainval_count // 100,\n\t        \"val\": trainval_count - TRAIN_SPLIT_PERCENT * trainval_count // 100,\n", "        \"trainval\": trainval_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    # The validation set is split out of the original training set, and the\n\t    # remaining examples are used as the \"train\" split. The \"trainval\" split\n\t    # corresponds to the original training set.\n", "    tfds_splits = {\n\t        \"train\":\n\t            \"train[:{}]\".format(num_samples_splits[\"train\"]),\n\t        \"val\":\n\t            \"train[{}:]\".format(num_samples_splits[\"train\"]),\n\t        \"trainval\":\n\t            \"train\",\n\t        \"test\":\n\t            \"test\",\n\t        \"train800\":\n", "            \"train[:800]\",\n\t        \"val200\":\n\t            \"train[{}:{}]\".format(num_samples_splits[\"train\"],\n\t                                  num_samples_splits[\"train\"] + 200),\n\t        \"train800val200\":\n\t            \"train[:800]+train[{}:{}]\".format(\n\t                num_samples_splits[\"train\"], num_samples_splits[\"train\"] + 200),\n\t    }\n\t    super(SvhnData, self).__init__(\n\t        dataset_builder=dataset_builder,\n", "        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Rename tensors but keep their original types.\n\t        base_preprocess_fn=base.make_get_and_cast_tensors_fn({\n\t            \"image\": (\"image\", None),\n\t            \"label\": (\"label\", None),\n\t        }),\n\t        num_classes=dataset_builder.info.features[\"label\"]\n", "        .num_classes)\n"]}
{"filename": "src/data/vtab_datasets/patch_camelyon.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements PatchCamelyon data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t@Registry.register(\"data.patch_camelyon\", \"class\")\n\tclass PatchCamelyonData(base.ImageTfdsData):\n\t  \"\"\"Provides PatchCamelyon data.\"\"\"\n\t  def __init__(self, data_dir=None):\n\t    dataset_builder = tfds.builder(\"patch_camelyon:2.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n", "        \"test\": \"test\",\n\t        \"train\": \"train\",\n\t        \"val\": \"validation\",\n\t        \"trainval\": \"train+validation\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"validation[:200]\",\n\t        \"train800val200\": \"train[:800]+validation[:200]\",\n\t    }\n\t    # Creates a dict with example counts.\n\t    num_samples_splits = {\n", "        \"test\": dataset_builder.info.splits[\"test\"].num_examples,\n\t        \"train\": dataset_builder.info.splits[\"train\"].num_examples,\n\t        \"val\": dataset_builder.info.splits[\"validation\"].num_examples,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    num_samples_splits[\"trainval\"] = (\n\t        num_samples_splits[\"train\"] + num_samples_splits[\"val\"])\n\t    super(PatchCamelyonData, self).__init__(\n", "        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n\t        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\"]),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/base.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Abstract class for reading the data using tfds.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport abc\n", "import six\n\timport tensorflow.compat.v1 as tf\n\timport tensorflow_datasets as tfds\n\tdef make_get_tensors_fn(output_tensors):\n\t  \"\"\"Create a function that outputs a collection of tensors from the dataset.\"\"\"\n\t  def _get_fn(data):\n\t    \"\"\"Get tensors by name.\"\"\"\n\t    return {tensor_name: data[tensor_name] for tensor_name in output_tensors}\n\t  return _get_fn\n\tdef make_get_and_cast_tensors_fn(output_tensors):\n", "  \"\"\"Create a function that gets and casts a set of tensors from the dataset.\n\t  Optionally, you can also rename the tensors.\n\t  Examples:\n\t    # This simply gets \"image\" and \"label\" tensors without any casting.\n\t    # Note that this is equivalent to make_get_tensors_fn([\"image\", \"label\"]).\n\t    make_get_and_cast_tensors_fn({\n\t      \"image\": None,\n\t      \"label\": None,\n\t    })\n\t    # This gets the \"image\" tensor without any type conversion, casts the\n", "    # \"heatmap\" tensor to tf.float32, and renames the tensor \"class/label\" to\n\t    # \"label\" and casts it to tf.int64.\n\t    make_get_and_cast_tensors_fn({\n\t      \"image\": None,\n\t      \"heatmap\": tf.float32,\n\t      \"class/label\": (\"label\", tf.int64),\n\t    })\n\t  Args:\n\t    output_tensors: dictionary specifying the set of tensors to get and cast\n\t      from the dataset.\n", "  Returns:\n\t    The function performing the operation.\n\t  \"\"\"\n\t  def _tensors_to_cast():\n\t    tensors_to_cast = []  # AutoGraph does not support generators.\n\t    for tensor_name, tensor_dtype in output_tensors.items():\n\t      if isinstance(tensor_dtype, tuple) and len(tensor_dtype) == 2:\n\t        tensors_to_cast.append((tensor_name, tensor_dtype[0], tensor_dtype[1]))\n\t      elif tensor_dtype is None or isinstance(tensor_dtype, tf.dtypes.DType):\n\t        tensors_to_cast.append((tensor_name, tensor_name, tensor_dtype))\n", "      else:\n\t        raise ValueError('Values of the output_tensors dictionary must be '\n\t                         'None, tf.dtypes.DType or 2-tuples.')\n\t    return tensors_to_cast\n\t  def _get_and_cast_fn(data):\n\t    \"\"\"Get and cast tensors by name, optionally changing the name too.\"\"\"\n\t    return {\n\t        new_name:\n\t        data[name] if new_dtype is None else tf.cast(data[name], new_dtype)\n\t        for name, new_name, new_dtype in _tensors_to_cast()\n", "    }\n\t  return _get_and_cast_fn\n\tdef compose_preprocess_fn(*functions):\n\t  \"\"\"Compose two or more preprocessing functions.\n\t  Args:\n\t    *functions: Sequence of preprocess functions to compose.\n\t  Returns:\n\t    The composed function.\n\t  \"\"\"\n\t  def _composed_fn(x):\n", "    for fn in functions:\n\t      if fn is not None:  # Note: If one function is None, equiv. to identity.\n\t        x = fn(x)\n\t    return x\n\t  return _composed_fn\n\t# Note: DO NOT implement any method in this abstract class.\n\t@six.add_metaclass(abc.ABCMeta)\n\tclass ImageDataInterface(object):\n\t  \"\"\"Interface to the image data classes.\"\"\"\n\t  @property\n", "  @abc.abstractmethod\n\t  def default_label_key(self):\n\t    \"\"\"Returns the default label key of the dataset.\"\"\"\n\t  @property\n\t  @abc.abstractmethod\n\t  def label_keys(self):\n\t    \"\"\"Returns a tuple with the available label keys of the dataset.\"\"\"\n\t  @property\n\t  @abc.abstractmethod\n\t  def num_channels(self):\n", "    \"\"\"Returns the number of channels of the images in the dataset.\"\"\"\n\t  @property\n\t  @abc.abstractmethod\n\t  def splits(self):\n\t    \"\"\"Returns the splits defined in the dataset.\"\"\"\n\t  @abc.abstractmethod\n\t  def get_num_samples(self, split_name):\n\t    \"\"\"Returns the number of images in the given split name.\"\"\"\n\t  @abc.abstractmethod\n\t  def get_num_classes(self, label_key=None):\n", "    \"\"\"Returns the number of classes of the given label_key.\"\"\"\n\t  @abc.abstractmethod\n\t  def get_tf_data(self,\n\t                  split_name,\n\t                  batch_size,\n\t                  pairwise_mix_fn=None,\n\t                  preprocess_fn=None,\n\t                  preprocess_before_filter=None,\n\t                  epochs=None,\n\t                  drop_remainder=True,\n", "                  for_eval=False,\n\t                  shuffle_buffer_size=None,\n\t                  prefetch=1,\n\t                  train_examples=None,\n\t                  filtered_num_samples=None,\n\t                  filter_fn=None,\n\t                  batch_preprocess_fn=None,\n\t                  ignore_errors=False,\n\t                  shuffle_files=False):\n\t    \"\"\"Provides preprocessed and batched data.\n", "    Args:\n\t      split_name: name of a data split to provide. Can be \"train\", \"val\",\n\t          \"trainval\" or \"test\".\n\t      batch_size: batch size.\n\t      pairwise_mix_fn: a function for mixing each data with another random one.\n\t      preprocess_fn: a function for preprocessing input data. It expects a\n\t          dictionary with a key \"image\" associated with a 3D image tensor.\n\t      preprocess_before_filter: a function for preprocessing input data,\n\t          before filter_fn. It is only designed for light preprocessing,\n\t          i.e. augment with image id. For heavy preprocessing, it's more\n", "          efficient to do it after filter_fn.\n\t      epochs: number of full passes through the data. If None, the data is\n\t          provided indefinitely.\n\t      drop_remainder: if True, the last incomplete batch of data is dropped.\n\t          Normally, this parameter should be True, otherwise it leads to\n\t          the unknown batch dimension, which is not compatible with training\n\t          or evaluation on TPUs.\n\t      for_eval: get data for evaluation. Disables shuffling.\n\t      shuffle_buffer_size: overrides default shuffle buffer size.\n\t      prefetch: number of batches to prefetch.\n", "      train_examples: optional number of examples to take for training.\n\t        If greater than available number of examples, equivalent to None (all).\n\t        Ignored with for_eval is True.\n\t      filtered_num_samples: required when filter_fn is set, number of\n\t        samples after applying filter_fn.\n\t      filter_fn: filter function for generating training subset.\n\t      batch_preprocess_fn: optional function for preprocessing a full batch of\n\t        input data. Analoguous to preprocess_fn with an extra batch-dimension\n\t        on all tensors.\n\t      ignore_errors: whether to skip images that encountered an error in\n", "        decoding *or pre-processing*, the latter is why it is False by default.\n\t      shuffle_files: whether to shuffle the dataset files or not.\n\t    Returns:\n\t      A tf.data.Dataset object as a dictionary containing the output tensors.\n\t    \"\"\"\n\tclass ImageData(ImageDataInterface):\n\t  \"\"\"Abstract data provider class.\n\t  IMPORTANT: You should use ImageTfdsData below whenever is posible. We want\n\t  to use as many datasets in TFDS as possible to ensure reproducibility of our\n\t  experiments. Your data class should only inherit directly from this if you\n", "  are doing experiments while creating a TFDS dataset.\n\t  \"\"\"\n\t  @abc.abstractmethod\n\t  def __init__(self,\n\t               num_samples_splits,\n\t               shuffle_buffer_size,\n\t               num_preprocessing_threads,\n\t               num_classes,\n\t               default_label_key='label',\n\t               base_preprocess_fn=None,\n", "               filter_fn=None,\n\t               image_decoder=None,\n\t               num_channels=3):\n\t    \"\"\"Initializer for the base ImageData class.\n\t    Args:\n\t      num_samples_splits: a dictionary, that maps splits (\"train\", \"trainval\",\n\t          \"val\", and \"test\") to the corresponding number of samples.\n\t      shuffle_buffer_size: size of a buffer used for shuffling.\n\t      num_preprocessing_threads: the number of parallel threads for data\n\t          preprocessing.\n", "      num_classes: int/dict, number of classes in this dataset for the\n\t        `default_label_key` tensor, or dictionary with the number of classes in\n\t        each label tensor.\n\t      default_label_key: optional, string with the name of the tensor to use\n\t        as label. Default is \"label\".\n\t      base_preprocess_fn: optional, base preprocess function to apply in all\n\t        cases for this dataset.\n\t      filter_fn: optional, function to filter the examples to use in the\n\t        dataset. DEPRECATED, soon to be removed.\n\t      image_decoder: a function to decode image.\n", "      num_channels: number of channels in the dataset image.\n\t    \"\"\"\n\t    self._log_warning_if_direct_inheritance()\n\t    self._num_samples_splits = num_samples_splits\n\t    self._shuffle_buffer_size = shuffle_buffer_size\n\t    self._num_preprocessing_threads = num_preprocessing_threads\n\t    self._base_preprocess_fn = base_preprocess_fn\n\t    self._default_label_key = default_label_key\n\t    self._filter_fn = filter_fn\n\t    if self._filter_fn:\n", "      tf.logging.warning('Using deprecated filtering mechanism.')\n\t    self._image_decoder = image_decoder\n\t    self._num_channels = num_channels\n\t    if isinstance(num_classes, dict):\n\t      self._num_classes = num_classes\n\t      if default_label_key not in num_classes:\n\t        raise ValueError(\n\t            'No num_classes was specified for the default_label_key %r' %\n\t            default_label_key)\n\t    elif isinstance(num_classes, int):\n", "      self._num_classes = {default_label_key: num_classes}\n\t    else:\n\t      raise ValueError(\n\t          '\"num_classes\" must be a int or a dict, but type %r was given' %\n\t          type(num_classes))\n\t  @property\n\t  def default_label_key(self):\n\t    return self._default_label_key\n\t  @property\n\t  def label_keys(self):\n", "    return tuple(self._num_classes.keys())\n\t  @property\n\t  def num_channels(self):\n\t    return self._num_channels\n\t  @property\n\t  def splits(self):\n\t    return tuple(self._num_samples_splits.keys())\n\t  def get_num_samples(self, split_name):\n\t    return self._num_samples_splits[split_name]\n\t  def get_num_classes(self, label_key=None):\n", "    if label_key is None:\n\t      label_key = self._default_label_key\n\t    return self._num_classes[label_key]\n\t  def get_version(self):\n\t    return NotImplementedError('Version is not supported outside TFDS.')\n\t  def get_tf_data(self,\n\t                  split_name,\n\t                  batch_size,\n\t                  pairwise_mix_fn=None,\n\t                  preprocess_fn=None,\n", "                  preprocess_before_filter=None,\n\t                  epochs=None,\n\t                  drop_remainder=True,\n\t                  for_eval=False,\n\t                  shuffle_buffer_size=None,\n\t                  prefetch=1,\n\t                  train_examples=None,\n\t                  filtered_num_samples=None,\n\t                  filter_fn=None,\n\t                  batch_preprocess_fn=None,\n", "                  ignore_errors=False,\n\t                  shuffle_files=False):\n\t    # Obtains tf.data object.\n\t    # We shuffle later when not for eval, it's important to not shuffle before\n\t    # a subset of data is retrieved.\n\t    data = self._get_dataset_split(\n\t        split_name=split_name,\n\t        shuffle_files=shuffle_files)\n\t    if preprocess_before_filter is not None:\n\t      data = preprocess_before_filter(data)\n", "    if self._filter_fn and (filter_fn is None):\n\t      filter_fn = self._filter_fn\n\t    # Dataset filtering priority: (1) filter_fn; (2) train_examples.\n\t    if filter_fn and train_examples:\n\t      raise ValueError('You must not set both filter_fn and train_examples.')\n\t    if filter_fn:\n\t      tf.logging.warning(\n\t          'You are filtering the dataset. Notice that this may hurt your '\n\t          'throughput, since examples still need to be decoded, and may '\n\t          'make the result of get_num_samples() inacurate. '\n", "          'train_examples is ignored for filtering, but only used for '\n\t          'calculating training steps.')\n\t      data = data.filter(filter_fn)\n\t      num_samples = filtered_num_samples\n\t      assert num_samples is not None, (\n\t          'You must set filtered_num_samples if filter_fn is set.')\n\t    elif not for_eval and train_examples:\n\t      # Deterministic for same dataset version.\n\t      data = data.take(train_examples)\n\t      num_samples = train_examples\n", "    else:\n\t      num_samples = self.get_num_samples(split_name)\n\t    data = self._cache_data_if_possible(\n\t        data, split_name=split_name, num_samples=num_samples, for_eval=for_eval)\n\t    def print_filtered_subset(ex):\n\t      \"\"\"Print filtered subset for debug purpose.\"\"\"\n\t      if isinstance(ex, dict) and 'id' in ex and 'label' in ex:\n\t        print_op = tf.print(\n\t            'filtered_example:',\n\t            ex['id'],\n", "            ex['label'],\n\t            output_stream=tf.logging.error)\n\t        with tf.control_dependencies([print_op]):\n\t          ex['id'] = tf.identity(ex['id'])\n\t      return ex\n\t    if not for_eval and filter_fn:\n\t      data = data.map(print_filtered_subset)\n\t    # Repeats data `epochs` time or indefinitely if `epochs` is None.\n\t    if epochs is None or epochs > 1:\n\t      data = data.repeat(epochs)\n", "    shuffle_buffer_size = shuffle_buffer_size or self._shuffle_buffer_size\n\t    if not for_eval and shuffle_buffer_size > 1:\n\t      data = data.shuffle(shuffle_buffer_size)\n\t    data = self._preprocess_and_batch_data(data, batch_size, drop_remainder,\n\t                                           pairwise_mix_fn, preprocess_fn,\n\t                                           ignore_errors)\n\t    if batch_preprocess_fn is not None:\n\t      data = data.map(batch_preprocess_fn, self._num_preprocessing_threads)\n\t    if prefetch != 0:\n\t      data = data.prefetch(prefetch)\n", "    return data\n\t  @abc.abstractmethod\n\t  def _get_dataset_split(self, split_name, shuffle_files=False):\n\t    \"\"\"Return the Dataset object for the given split name.\n\t    Args:\n\t      split_name: Name of the dataset split to get.\n\t      shuffle_files: Whether or not to shuffle files in the dataset.\n\t    Returns:\n\t      A tf.data.Dataset object containing the data for the given split.\n\t    \"\"\"\n", "  def _log_warning_if_direct_inheritance(self):\n\t    tf.logging.warning(\n\t        'You are directly inheriting from ImageData. Please, consider porting '\n\t        'your dataset to TFDS (go/tfds) and inheriting from ImageTfdsData '\n\t        'instead.')\n\t  def _preprocess_and_batch_data(self,\n\t                                 data,\n\t                                 batch_size,\n\t                                 drop_remainder=True,\n\t                                 pairwise_mix_fn=None,\n", "                                 preprocess_fn=None,\n\t                                 ignore_errors=False):\n\t    \"\"\"Preprocesses and batches a given tf.Dataset.\"\"\"\n\t    # Preprocess with basic preprocess functions (e.g. decoding images, parsing\n\t    # features etc.).\n\t    base_preprocess_fn = compose_preprocess_fn(self._image_decoder,\n\t                                               self._base_preprocess_fn)\n\t    # Note: `map_and_batch` is deprecated, and at least when nothing happens\n\t    # in-between, automatically gets merged for efficiency. Same below.\n\t    data = data.map(base_preprocess_fn, self._num_preprocessing_threads)\n", "    # Mix images pair-wise before other element-wise preprocessing.\n\t    # Note: The pairing is implemented by shifting `data` by 1, so the last\n\t    # element of `data` will be dropped.\n\t    if pairwise_mix_fn is not None:\n\t      data = tf.data.Dataset.zip(\n\t          (data, data.skip(1))).map(pairwise_mix_fn,\n\t                                    self._num_preprocessing_threads)\n\t    # Preprocess with customized preprocess functions.\n\t    if preprocess_fn is not None:\n\t      data = data.map(preprocess_fn, self._num_preprocessing_threads)\n", "    if ignore_errors:\n\t      tf.logging.info('Ignoring any image with errors.')\n\t      data = data.apply(tf.data.experimental.ignore_errors())\n\t    return data.batch(batch_size, drop_remainder)\n\t  def _cache_data_if_possible(self, data, split_name, num_samples, for_eval):\n\t    del split_name\n\t    if not for_eval and num_samples <= 150000:\n\t      # Cache the whole dataset if it's smaller than 150K examples.\n\t      data = data.cache()\n\t    return data\n", "class ImageTfdsData(ImageData):\n\t  \"\"\"Abstract data provider class for datasets available in Tensorflow Datasets.\n\t  To add new datasets inherit from this class. This class implements a simple\n\t  API that is used throughout the project and provides standardized way of data\n\t  preprocessing and batching.\n\t  \"\"\"\n\t  @abc.abstractmethod\n\t  def __init__(self, dataset_builder, tfds_splits, image_key='image', **kwargs):\n\t    \"\"\"Initializer for the base ImageData class.\n\t    Args:\n", "      dataset_builder: tfds dataset builder object.\n\t      tfds_splits: a dictionary, that maps splits (\"train\", \"trainval\", \"val\",\n\t          and \"test\") to the corresponding tfds `Split` objects.\n\t      image_key: image key.\n\t      **kwargs: Additional keyword arguments for the ImageData class.\n\t    \"\"\"\n\t    self._dataset_builder = dataset_builder\n\t    self._tfds_splits = tfds_splits\n\t    self._image_key = image_key\n\t    # Overwrite image decoder\n", "    def _image_decoder(data):\n\t      decoder = dataset_builder.info.features[image_key].decode_example\n\t      data[image_key] = decoder(data[image_key])\n\t      return data\n\t    self._image_decoder = _image_decoder\n\t    kwargs.update({'image_decoder': _image_decoder})\n\t    super(ImageTfdsData, self).__init__(**kwargs)\n\t  def get_version(self):\n\t    return self._dataset_builder.version.__str__()\n\t  def _get_dataset_split(self, split_name, shuffle_files):\n", "    dummy_decoder = tfds.decode.SkipDecoding()\n\t    return self._dataset_builder.as_dataset(\n\t        split=self._tfds_splits[split_name], shuffle_files=shuffle_files,\n\t        decoders={self._image_key: dummy_decoder})\n\t  def _log_warning_if_direct_inheritance(self):\n\t    pass\n"]}
{"filename": "src/data/vtab_datasets/kitti.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Kitti data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport numpy as np\n", "import tensorflow.compat.v1 as tf\n\timport tensorflow_datasets as tfds\n\tfrom . import base as base\n\tfrom .registry import Registry\n\tdef _count_all_pp(x):\n\t  \"\"\"Count all objects.\"\"\"\n\t  # Count distribution (thresholded at 15):\n\t  label = tf.math.minimum(tf.size(x[\"objects\"][\"type\"]) - 1, 8)\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _count_vehicles_pp(x):\n", "  \"\"\"Counting vehicles.\"\"\"\n\t  # Label distribution:\n\t  vehicles = tf.where(x[\"objects\"][\"type\"] < 3)  # Car, Van, Truck.\n\t  # Cap at 3.\n\t  label = tf.math.minimum(tf.size(vehicles), 3)\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _count_left_pp(x):\n\t  \"\"\"Count objects on the left hand side of the camera.\"\"\"\n\t  # Count distribution (thresholded at 15):\n\t  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n", "  objects_on_left = tf.where(x[\"objects\"][\"location\"][:, 0] < 0)\n\t  label = tf.math.minimum(tf.size(objects_on_left), 8)\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _count_far_pp(x):\n\t  \"\"\"Counts objects far from the camera.\"\"\"\n\t  # Threshold removes ~half of the objects.\n\t  # Count distribution (thresholded at 15):\n\t  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n\t  distant_objects = tf.where(x[\"objects\"][\"location\"][:, 2] >= 25)\n\t  label = tf.math.minimum(tf.size(distant_objects), 8)\n", "  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _count_near_pp(x):\n\t  \"\"\"Counts objects close to the camera.\"\"\"\n\t  # Threshold removes ~half of the objects.\n\t  # Count distribution:\n\t  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n\t  close_objects = tf.where(x[\"objects\"][\"location\"][:, 2] < 25)\n\t  label = tf.math.minimum(tf.size(close_objects), 8)\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _closest_object_distance_pp(x):\n", "  \"\"\"Predict the distance to the closest object.\"\"\"\n\t  # Label distribution:\n\t  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n\t  dist = tf.reduce_min(x[\"objects\"][\"location\"][:, 2])\n\t  thrs = np.array([-100, 5.6, 8.4, 13.4, 23.4])\n\t  label = tf.reduce_max(tf.where((thrs - dist) < 0))\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\tdef _closest_vehicle_distance_pp(x):\n\t  \"\"\"Predict the distance to the closest vehicle.\"\"\"\n\t  # Label distribution:\n", "  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n\t  vehicles = tf.where(x[\"objects\"][\"type\"] < 3)  # Car, Van, Truck.\n\t  vehicle_z = tf.gather(params=x[\"objects\"][\"location\"][:, 2], indices=vehicles)\n\t  vehicle_z = tf.concat([vehicle_z, tf.constant([[1000.0]])], axis=0)\n\t  dist = tf.reduce_min(vehicle_z)\n\t  # Results in a uniform distribution over three distances, plus one class for\n\t  # \"no vehicle\".\n\t  thrs = np.array([-100.0, 8.0, 20.0, 999.0])\n\t  label = tf.reduce_max(tf.where((thrs - dist) < 0))\n\t  return {\"image\": x[\"image\"], \"label\": label}\n", "def _closest_object_x_location_pp(x):\n\t  \"\"\"Predict the absolute x position of the closest object.\"\"\"\n\t  # Label distribution:\n\t  # Location feature contains (x, y, z) in meters w.r.t. the camera.\n\t  idx = tf.math.argmin(x[\"objects\"][\"location\"][:, 2])\n\t  xloc = x[\"objects\"][\"location\"][idx, 0]\n\t  thrs = np.array([-100, -6.4, -3.5, 0.0, 3.3, 23.9])\n\t  label = tf.reduce_max(tf.where((thrs - xloc) < 0))\n\t  return {\"image\": x[\"image\"], \"label\": label}\n\t_TASK_DICT = {\n", "    \"count_all\": {\n\t        \"preprocess_fn\": _count_all_pp,\n\t        \"num_classes\": 16,\n\t    },\n\t    \"count_left\": {\n\t        \"preprocess_fn\": _count_left_pp,\n\t        \"num_classes\": 16,\n\t    },\n\t    \"count_far\": {\n\t        \"preprocess_fn\": _count_far_pp,\n", "        \"num_classes\": 16,\n\t    },\n\t    \"count_near\": {\n\t        \"preprocess_fn\": _count_near_pp,\n\t        \"num_classes\": 16,\n\t    },\n\t    \"closest_object_distance\": {\n\t        \"preprocess_fn\": _closest_object_distance_pp,\n\t        \"num_classes\": 5,\n\t    },\n", "    \"closest_object_x_location\": {\n\t        \"preprocess_fn\": _closest_object_x_location_pp,\n\t        \"num_classes\": 5,\n\t    },\n\t    \"count_vehicles\": {\n\t        \"preprocess_fn\": _count_vehicles_pp,\n\t        \"num_classes\": 4,\n\t    },\n\t    \"closest_vehicle_distance\": {\n\t        \"preprocess_fn\": _closest_vehicle_distance_pp,\n", "        \"num_classes\": 4,\n\t    },\n\t}\n\t@Registry.register(\"data.kitti\", \"class\")\n\tclass KittiData(base.ImageTfdsData):\n\t  \"\"\"Provides Kitti dataset.\n\t  Six tasks are supported:\n\t    1. Count the number of objects.\n\t    2. Count the number of objects on the left hand side of the camera.\n\t    3. Count the number of objects in the foreground.\n", "    4. Count the number of objects in the background.\n\t    5. Predict the distance of the closest object.\n\t    6. Predict the x-location (w.r.t. the camera) of the closest object.\n\t  \"\"\"\n\t  def __init__(self, task, data_dir=None):\n\t    if task not in _TASK_DICT:\n\t      raise ValueError(\"Unknown task: %s\" % task)\n\t    dataset_builder = tfds.builder(\"kitti:3.2.0\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    tfds_splits = {\n", "        \"train\": \"train\",\n\t        \"val\": \"validation\",\n\t        \"trainval\": \"train+validation\",\n\t        \"test\": \"test\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"validation[:200]\",\n\t        \"train800val200\": \"train[:800]+validation[:200]\",\n\t    }\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    train_count = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n", "    val_count = dataset_builder.info.splits[tfds.Split.VALIDATION].num_examples\n\t    test_count = dataset_builder.info.splits[tfds.Split.TEST].num_examples\n\t    # Creates a dict with example counts for each split.\n\t    num_samples_splits = {\n\t        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n", "        \"train800val200\": 1000,\n\t    }\n\t    task = _TASK_DICT[task]\n\t    base_preprocess_fn = task[\"preprocess_fn\"]\n\t    super(KittiData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n", "        base_preprocess_fn=base_preprocess_fn,\n\t        num_classes=task[\"num_classes\"])\n"]}
{"filename": "src/data/vtab_datasets/caltech.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Imports the Caltech images dataset.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\tfrom . import base as base\n", "from .registry import Registry\n\timport tensorflow_datasets as tfds\n\t# Percentage of the original training set retained for training, the rest is\n\t# used as a validation set.\n\t_TRAIN_SPLIT_PERCENT = 90\n\t@Registry.register(\"data.caltech101\", \"class\")\n\tclass Caltech101(base.ImageTfdsData):\n\t  \"\"\"Provides the Caltech101 dataset.\n\t  See the base class for additional details on the class.\n\t  See TFDS dataset for details on the dataset:\n", "  third_party/py/tensorflow_datasets/image/caltech.py\n\t  The original (TFDS) dataset contains only a train and test split. We randomly\n\t  sample _TRAIN_SPLIT_PERCENT% of the train split for our \"train\" set. The\n\t  remainder of the TFDS train split becomes our \"val\" set. The full TFDS train\n\t  split is called \"trainval\". The TFDS test split is used as our test set.\n\t  Note that, in the TFDS dataset, the training split is class-balanced, but not\n\t  the test split. Therefore, a significant difference between performance on the\n\t  \"val\" and \"test\" sets should be expected.\n\t  \"\"\"\n\t  def __init__(self, data_dir=None):\n", "    dataset_builder = tfds.builder(\"caltech101:3.0.1\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Creates a dict with example counts for each split.\n\t    trainval_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    train_count = (_TRAIN_SPLIT_PERCENT * trainval_count) // 100\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    num_samples_splits = dict(\n\t        train=train_count,\n\t        val=trainval_count - train_count,\n\t        trainval=trainval_count,\n", "        test=test_count,\n\t        train800=800,\n\t        val200=200,\n\t        train800val200=1000)\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n\t        \"train\": \"train[:{}]\".format(train_count),\n\t        \"val\": \"train[{}:]\".format(train_count),\n\t        \"trainval\": \"train\",\n\t        \"test\": \"test\",\n", "        \"train800\": \"train[:800]\",\n\t        \"val200\": \"train[{}:{}]\".format(train_count, train_count+200),\n\t        \"train800val200\": (\n\t            \"train[:800]+train[{}:{}]\".format(train_count, train_count+200)),\n\t    }\n\t    super(Caltech101, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n", "        shuffle_buffer_size=3000,\n\t        base_preprocess_fn=base.make_get_tensors_fn((\"image\", \"label\")),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/oxford_iiit_pet.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements OxfordIIITPet data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t# This constant specifies the percentage of data that is used to create custom\n\t# train/val splits. Specifically, TRAIN_SPLIT_PERCENT% of the official training\n\t# split is used as a new training split and the rest is used for validation.\n\tTRAIN_SPLIT_PERCENT = 80\n\t@Registry.register(\"data.oxford_iiit_pet\", \"class\")\n\tclass OxfordIIITPetData(base.ImageTfdsData):\n\t  \"\"\"Provides OxfordIIITPet data.\n\t  The OxfordIIITPet dataset comes only with a training and test set.\n", "  Therefore, the validation set is split out of the original training set, and\n\t  the remaining examples are used as the \"train\" split. The \"trainval\" split\n\t  corresponds to the original training set.\n\t  For additional details and usage, see the base class.\n\t  \"\"\"\n\t  def __init__(self, data_dir=None, train_split_percent=None):\n\t    dataset_builder = tfds.builder(\"oxford_iiit_pet:3.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    train_split_percent = train_split_percent or TRAIN_SPLIT_PERCENT\n\t    # Creates a dict with example counts for each split.\n", "    trainval_count = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n\t    test_count = dataset_builder.info.splits[tfds.Split.TEST].num_examples\n\t    num_samples_splits = {\n\t        \"train\": (train_split_percent * trainval_count) // 100,\n\t        \"val\": trainval_count - (train_split_percent * trainval_count) // 100,\n\t        \"trainval\": trainval_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n", "    }\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n\t        \"train\": \"train[:{}]\".format(num_samples_splits[\"train\"]),\n\t        \"val\": \"train[{}:]\".format(num_samples_splits[\"train\"]),\n\t        \"trainval\": tfds.Split.TRAIN,\n\t        \"test\": tfds.Split.TEST,\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n", "        \"train800val200\": \"train[:800]+train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n\t    }\n\t    super(OxfordIIITPetData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n", "        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\"]),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/__init__.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n"]}
{"filename": "src/data/vtab_datasets/resisc45.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements RESISC-45 data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\tTRAIN_SPLIT_PERCENT = 60\n\tVALIDATION_SPLIT_PERCENT = 20\n\tTEST_SPLIT_PERCENT = 20\n\t@Registry.register(\"data.resisc45\", \"class\")\n\tclass Resisc45Data(base.ImageTfdsData):\n\t  \"\"\"Provides RESISC-45 dataset.\n\t  RESISC45 dataset is a publicly available benchmark for Remote Sensing Image\n\t  Scene Classification (RESISC), created by Northwestern Polytechnical\n", "  University (NWPU). This dataset contains 31,500 images, covering 45 scene\n\t  classes with 700 images in each class.\n\t  URL: http://www.escience.cn/people/JunweiHan/NWPU-RESISC45.html\n\t  \"\"\"\n\t  def __init__(self, data_dir=None):\n\t    dataset_builder = tfds.builder(\"resisc45:3.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    num_examples = dataset_builder.info.splits[\"train\"].num_examples\n\t    train_count = num_examples * TRAIN_SPLIT_PERCENT // 100\n", "    val_count = num_examples * VALIDATION_SPLIT_PERCENT // 100\n\t    test_count = num_examples * TEST_SPLIT_PERCENT // 100\n\t    tfds_splits = {\n\t        \"train\":\n\t            \"train[:{}]\".format(train_count),\n\t        \"val\":\n\t            \"train[{}:{}]\".format(train_count, train_count + val_count),\n\t        \"trainval\":\n\t            \"train[:{}]\".format(train_count + val_count),\n\t        \"test\":\n", "            \"train[{}:]\".format(train_count + val_count),\n\t        \"train800\":\n\t            \"train[:800]\",\n\t        \"val200\":\n\t            \"train[{}:{}]\".format(train_count, train_count+200),\n\t        \"train800val200\":\n\t            \"train[:800]+train[{}:{}]\".format(train_count, train_count+200),\n\t    }\n\t    # Creates a dict with example counts for each split.\n\t    num_samples_splits = {\n", "        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    super(Resisc45Data, self).__init__(\n\t        dataset_builder=dataset_builder,\n", "        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Rename tensors but keep their original types.\n\t        base_preprocess_fn=base.make_get_and_cast_tensors_fn({\n\t            \"image\": (\"image\", None),\n\t            \"label\": (\"label\", None),\n\t        }),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/sun397.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Sun397 data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\tCUSTOM_TRAIN_SPLIT_PERCENT = 50\n\tCUSTOM_VALIDATION_SPLIT_PERCENT = 20\n\tCUSTOM_TEST_SPLIT_PERCENT = 30\n\t@Registry.register(\"data.sun397\", \"class\")\n\tclass Sun397Data(base.ImageTfdsData):\n\t  \"\"\"Provides Sun397Data data.\"\"\"\n\t  def __init__(self, config=\"tfds\", data_dir=None):\n\t    if config == \"tfds\":\n", "      dataset_builder = tfds.builder(\"sun397/tfds:4.*.*\", data_dir=data_dir)\n\t      dataset_builder.download_and_prepare()\n\t      tfds_splits = {\n\t          \"train\": \"train\",\n\t          \"val\": \"validation\",\n\t          \"test\": \"test\",\n\t          \"trainval\": \"train+validation\",\n\t          \"train800\": \"train[:800]\",\n\t          \"val200\": \"validation[:200]\",\n\t          \"train800val200\": \"train[:800]+validation[:200]\",\n", "      }\n\t      # Creates a dict with example counts.\n\t      num_samples_splits = {\n\t          \"test\": dataset_builder.info.splits[\"test\"].num_examples,\n\t          \"train\": dataset_builder.info.splits[\"train\"].num_examples,\n\t          \"val\": dataset_builder.info.splits[\"validation\"].num_examples,\n\t          \"train800\": 800,\n\t          \"val200\": 200,\n\t          \"train800val200\": 1000,\n\t      }\n", "      num_samples_splits[\"trainval\"] = (\n\t          num_samples_splits[\"train\"] + num_samples_splits[\"val\"])\n\t    else:\n\t      raise ValueError(\"No supported config %r for Sun397Data.\" % config)\n\t    super(Sun397Data, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n", "        # Note: Export only image and label tensors with their original types.\n\t        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\"]),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/diabetic_retinopathy.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Diabetic Retinopathy data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow.compat.v1 as tf\n", "import tensorflow_addons.image as tfa_image\n\timport tensorflow_datasets as tfds\n\tfrom . import base as base\n\tfrom .registry import Registry\n\t@Registry.register(\"data.diabetic_retinopathy\", \"class\")\n\tclass RetinopathyData(base.ImageTfdsData):\n\t  \"\"\"Provides Diabetic Retinopathy classification data.\n\t  Retinopathy comes only with a training and test set. Therefore, the validation\n\t  set is split out of the original training set, and the remaining examples are\n\t  used as the \"train\" split. The \"trainval\" split corresponds to the original\n", "  training set.\n\t  For additional details and usage, see the base class.\n\t  \"\"\"\n\t  _CONFIGS_WITH_GREY_BACKGROUND = [\"btgraham-300\"]\n\t  def __init__(self, config=\"btgraham-300\", heavy_train_augmentation=False,\n\t               data_dir=None):\n\t    \"\"\"Initializer for Diabetic Retinopathy dataset.\n\t    Args:\n\t      config: Name of the TFDS config to use for this dataset.\n\t      heavy_train_augmentation: If True, use heavy data augmentation on the\n", "        training data. Recommended to achieve SOTA.\n\t      data_dir: directory for downloading and storing the data.\n\t    \"\"\"\n\t    config_and_version = config + \":3.*.*\"\n\t    dataset_builder = tfds.builder(\"diabetic_retinopathy_detection/{}\".format(\n\t        config_and_version), data_dir=data_dir)\n\t    self._config = config\n\t    self._heavy_train_augmentation = heavy_train_augmentation\n\t    dataset_builder.download_and_prepare()\n\t    # Defines dataset specific train/val/trainval/test splits.\n", "    tfds_splits = {\n\t        \"train\": \"train\",\n\t        \"val\": \"validation\",\n\t        \"trainval\": \"train+validation\",\n\t        \"test\": \"test\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"validation[:200]\",\n\t        \"train800val200\": \"train[:800]+validation[:200]\",\n\t    }\n\t    # Creates a dict with example counts for each split.\n", "    train_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    val_count = dataset_builder.info.splits[\"validation\"].num_examples\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    num_samples_splits = {\n\t        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n", "        \"train800val200\": 1000,\n\t    }\n\t    super(RetinopathyData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n\t        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\"]),\n", "        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n\t  @property\n\t  def config(self):\n\t    return self._config\n\t  @property\n\t  def heavy_train_augmentation(self):\n\t    return self._heavy_train_augmentation\n\t  def get_tf_data(self,\n\t                  split_name,\n\t                  batch_size,\n", "                  preprocess_fn=None,\n\t                  for_eval=False,\n\t                  **kwargs):\n\t    if self._heavy_train_augmentation and not for_eval:\n\t      preprocess_fn = base.compose_preprocess_fn(\n\t          self._heavy_train_augmentation, preprocess_fn)\n\t    return super(RetinopathyData, self).get_tf_data(\n\t        split_name=split_name,\n\t        batch_size=batch_size,\n\t        preprocess_fn=preprocess_fn,\n", "        for_eval=for_eval,\n\t        **kwargs)\n\t  def _sample_heavy_data_augmentation_parameters(self):\n\t    # Scale image +/- 10%.\n\t    s = tf.random.uniform(shape=(), minval=-0.1, maxval=0.1)\n\t    # Rotate image [0, 2pi).\n\t    a = tf.random.uniform(shape=(), minval=0.0, maxval=2.0 * 3.1415926535)\n\t    # Vertically shear image +/- 20%.\n\t    b = tf.random.uniform(shape=(), minval=-0.2, maxval=0.2) + a\n\t    # Horizontal and vertial flipping.\n", "    hf = tf.random.shuffle([-1.0, 1.0])[0]\n\t    vf = tf.random.shuffle([-1.0, 1.0])[0]\n\t    # Relative x,y translation.\n\t    dx = tf.random.uniform(shape=(), minval=-0.1, maxval=0.1)\n\t    dy = tf.random.uniform(shape=(), minval=-0.1, maxval=0.1)\n\t    return s, a, b, hf, vf, dx, dy\n\t  def _heavy_data_augmentation_fn(self, example):\n\t    \"\"\"Perform heavy augmentation on a given input data example.\n\t    This is the same data augmentation as the one done by Ben Graham, the winner\n\t    of the 2015 Kaggle competition. See:\n", "    https://github.com/btgraham/SparseConvNet/blob/a6bdb0c938b3556c1e6c23d5a014db9f404502b9/kaggleDiabetes1.cpp#L12\n\t    Args:\n\t      example: A dictionary containing an \"image\" key with the image to\n\t        augment.\n\t    Returns:\n\t      The input dictionary with the key \"image\" containing the augmented image.\n\t    \"\"\"\n\t    image = example[\"image\"]\n\t    image_shape = tf.shape(image)\n\t    if len(image.get_shape().as_list()) not in [2, 3]:\n", "      raise ValueError(\n\t          \"Input image must be a rank-2 or rank-3 tensor, but rank-{} \"\n\t          \"was given\".format(len(image.get_shape().as_list())))\n\t    height = tf.cast(image_shape[0], dtype=tf.float32)\n\t    width = tf.cast(image_shape[1], dtype=tf.float32)\n\t    # Sample data augmentation parameters.\n\t    s, a, b, hf, vf, dx, dy = self._sample_heavy_data_augmentation_parameters()\n\t    # Rotation + scale.\n\t    c00 = (1 + s) * tf.cos(a)\n\t    c01 = (1 + s) * tf.sin(a)\n", "    c10 = (s - 1) * tf.sin(b)\n\t    c11 = (1 - s) * tf.cos(b)\n\t    # Horizontal and vertial flipping.\n\t    c00 = c00 * hf\n\t    c01 = c01 * hf\n\t    c10 = c10 * vf\n\t    c11 = c11 * vf\n\t    # Convert x,y translation to absolute values.\n\t    dx = width * dx\n\t    dy = height * dy\n", "    # Convert affine matrix to TF's transform. Matrix is applied w.r.t. the\n\t    # center of the image.\n\t    cy = height / 2.0\n\t    cx = width / 2.0\n\t    affine_matrix = [[c00, c01, (1.0 - c00) * cx - c01 * cy + dx],\n\t                     [c10, c11, (1.0 - c11) * cy - c10 * cx + dy],\n\t                     [0.0, 0.0, 1.0]]\n\t    affine_matrix = tf.convert_to_tensor(affine_matrix, dtype=tf.float32)\n\t    transform = tfa_image.transform_ops.matrices_to_flat_transforms(\n\t        tf.linalg.inv(affine_matrix))\n", "    if self._config in self._CONFIGS_WITH_GREY_BACKGROUND:\n\t      # Since background is grey in these configs, put in pixels in [-1, 1]\n\t      # range to avoid artifacts from the affine transformation.\n\t      image = tf.cast(image, dtype=tf.float32)\n\t      image = (image / 127.5) - 1.0\n\t    # Apply the affine transformation.\n\t    image = tfa_image.transform(images=image, transforms=transform)\n\t    if self._config in self._CONFIGS_WITH_GREY_BACKGROUND:\n\t      # Put pixels back to [0, 255] range and cast to uint8, since this is what\n\t      # our preprocessing pipeline usually expects.\n", "      image = (1.0 + image) * 127.5\n\t      image = tf.cast(image, dtype=tf.uint8)\n\t    example[\"image\"] = image\n\t    return example\n"]}
{"filename": "src/data/vtab_datasets/dtd.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements the Describable Textures Dataset (DTD) data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t@Registry.register(\"data.dtd\", \"class\")\n\tclass DTDData(base.ImageTfdsData):\n\t  \"\"\"Provides Describable Textures Dataset (DTD) data.\n\t  As of version 1.0.0, the train/val/test splits correspond to those of the\n\t  1st fold of the official cross-validation partition.\n\t  For additional details and usage, see the base class.\n\t  \"\"\"\n\t  def __init__(self, data_dir=None):\n", "    dataset_builder = tfds.builder(\"dtd:3.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n\t        \"train\": \"train\",\n\t        \"val\": \"validation\",\n\t        \"trainval\": \"train+validation\",\n\t        \"test\": \"test\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"validation[:200]\",\n", "        \"train800val200\": \"train[:800]+validation[:200]\",\n\t    }\n\t    # Creates a dict with example counts for each split.\n\t    train_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    val_count = dataset_builder.info.splits[\"validation\"].num_examples\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    num_samples_splits = {\n\t        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n", "        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    super(DTDData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n", "        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n\t        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\"]),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/oxford_flowers102.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements oxford flowers 102 data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\t@Registry.register(\"data.oxford_flowers102\", \"class\")\n\tclass OxfordFlowers102Data(base.ImageTfdsData):\n\t  \"\"\"Provides Oxford 102 categories flowers dataset.\n\t  See corresponding tfds dataset for details.\n\t  URL: https://www.robots.ox.ac.uk/~vgg/data/flowers/102/\n\t  \"\"\"\n\t  def __init__(self, data_dir=None, train_split_percent=None):\n\t    dataset_builder = tfds.builder(\"oxford_flowers102:2.*.*\", data_dir=data_dir)\n", "    dataset_builder.download_and_prepare()\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    train_count = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n\t    val_count = dataset_builder.info.splits[tfds.Split.VALIDATION].num_examples\n\t    test_count = dataset_builder.info.splits[tfds.Split.TEST].num_examples\n\t    if train_split_percent:\n\t      tfds_splits = {\n\t          \"train\": \"train[:{s}%]+validation[:{s}%]\".format(\n\t              s=train_split_percent),\n\t          \"val\": \"train[-{s}%:]+validation[-{s}%:]\".format(\n", "              s=train_split_percent),\n\t          \"trainval\": \"train+validation\",\n\t          \"test\": \"test\",\n\t          \"train800\": \"train[:800]\",\n\t          \"val200\": \"validation[:200]\",\n\t          \"train800val200\": \"train[:800]+validation[:200]\",\n\t      }\n\t      num_samples_splits = {\n\t          \"train\": (((train_count + val_count) // 100)\n\t                    * train_split_percent),\n", "          \"val\": (((train_count + val_count) // 100) *\n\t                  (100 - train_split_percent)),\n\t          \"trainval\": train_count + val_count,\n\t          \"test\": test_count,\n\t          \"train800\": 800,\n\t          \"val200\": 200,\n\t          \"train800val200\": 1000,\n\t      }\n\t    else:\n\t      tfds_splits = {\n", "          \"train\": \"train\",\n\t          \"val\": \"validation\",\n\t          \"trainval\": \"train+validation\",\n\t          \"test\": \"test\",\n\t          \"train800\": \"train[:800]\",\n\t          \"val200\": \"validation[:200]\",\n\t          \"train800val200\": \"train[:800]+validation[:200]\",\n\t      }\n\t      num_samples_splits = {\n\t          \"train\": train_count,\n", "          \"val\": val_count,\n\t          \"trainval\": train_count + val_count,\n\t          \"test\": test_count,\n\t          \"train800\": 800,\n\t          \"val200\": 200,\n\t          \"train800val200\": 1000,\n\t      }\n\t    super(OxfordFlowers102Data, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n", "        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Rename tensors but keep their original types.\n\t        base_preprocess_fn=base.make_get_and_cast_tensors_fn({\n\t            \"image\": (\"image\", None),\n\t            \"label\": (\"label\", None),\n\t        }),\n\t        num_classes=dataset_builder.info.features[\"label\"]\n\t        .num_classes)\n"]}
{"filename": "src/data/vtab_datasets/smallnorb.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements the SmallNORB data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow.compat.v1 as tf\n", "import tensorflow_datasets as tfds\n\tfrom . import base as base\n\tfrom .registry import Registry\n\t# This constant specifies the percentage of data that is used to create custom\n\t# val/test splits. Specifically, VAL_SPLIT_PERCENT% of the official testing\n\t# split is used as a new validation split and the rest is used for testing.\n\tVAL_SPLIT_PERCENT = 50\n\t@Registry.register(\"data.smallnorb\", \"class\")\n\tclass SmallNORBData(base.ImageTfdsData):\n\t  \"\"\"Provides the SmallNORB data set.\n", "  SmallNORB comes only with a training and test set. Therefore, the validation\n\t  set is split out of the original training set, and the remaining examples are\n\t  used as the \"train\" split. The \"trainval\" split corresponds to the original\n\t  training set.\n\t  For additional details and usage, see the base class.\n\t  The data set page is https://cs.nyu.edu/~ylclab/data/norb-v1.0-small/.\n\t  \"\"\"\n\t  def __init__(self, predicted_attribute, data_dir=None):\n\t    dataset_builder = tfds.builder(\"smallnorb:2.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n", "    if predicted_attribute not in dataset_builder.info.features:\n\t      raise ValueError(\n\t          \"{} is not a valid attribute to predict.\".format(predicted_attribute))\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n\t        \"train\": \"train\",\n\t        \"val\": \"test[:{}%]\".format(VAL_SPLIT_PERCENT),\n\t        \"trainval\": \"train+test[:{}%]\".format(VAL_SPLIT_PERCENT),\n\t        \"test\": \"test[{}%:]\".format(VAL_SPLIT_PERCENT),\n\t        \"train800\": \"train[:800]\",\n", "        \"val200\": \"test[:200]\",\n\t        \"train800val200\": \"train[:800]+test[:200]\",\n\t    }\n\t    # Creates a dict with example counts for each split.\n\t    train_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    num_samples_validation = VAL_SPLIT_PERCENT * test_count // 100\n\t    num_samples_splits = {\n\t        \"train\": train_count,\n\t        \"val\": num_samples_validation,\n", "        \"trainval\": train_count + num_samples_validation,\n\t        \"test\": test_count - num_samples_validation,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    def preprocess_fn(tensors):\n\t      # For consistency with other datasets, image needs to have three channels.\n\t      image = tf.tile(tensors[\"image\"], [1, 1, 3])\n\t      return dict(image=image, label=tensors[predicted_attribute])\n", "    info = dataset_builder.info\n\t    super(SmallNORBData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # We extract the attribute we want to predict in the preprocessing.\n\t        base_preprocess_fn=preprocess_fn,\n\t        num_classes=info.features[predicted_attribute].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/eurosat.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements EurosatData class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow_datasets as tfds\n", "from . import base as base\n\tfrom .registry import Registry\n\tTRAIN_SPLIT_PERCENT = 60\n\tVALIDATION_SPLIT_PERCENT = 20\n\tTEST_SPLIT_PERCENT = 20\n\t@Registry.register(\"data.eurosat\", \"class\")\n\tclass EurosatData(base.ImageTfdsData):\n\t  \"\"\"Provides EuroSat dataset.\n\t  EuroSAT dataset is based on Sentinel-2 satellite images covering 13 spectral\n\t  bands and consisting of 10 classes with 27000 labeled and\n", "  geo-referenced samples.\n\t  URL: https://github.com/phelber/eurosat\n\t  \"\"\"\n\t  def __init__(self, subset=\"rgb\", data_key=\"image\", data_dir=None):\n\t    dataset_name = \"eurosat/{}:2.*.*\".format(subset)\n\t    dataset_builder = tfds.builder(dataset_name, data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n\t    # Example counts are retrieved from the tensorflow dataset info.\n\t    num_examples = dataset_builder.info.splits[tfds.Split.TRAIN].num_examples\n\t    train_count = num_examples * TRAIN_SPLIT_PERCENT // 100\n", "    val_count = num_examples * VALIDATION_SPLIT_PERCENT // 100\n\t    test_count = num_examples * TEST_SPLIT_PERCENT // 100\n\t    tfds_splits = {\n\t        \"train\":\n\t            \"train[:{}]\".format(train_count),\n\t        \"val\":\n\t            \"train[{}:{}]\".format(train_count, train_count+val_count),\n\t        \"trainval\":\n\t            \"train[:{}]\".format(train_count+val_count),\n\t        \"test\":\n", "            \"train[{}:]\".format(train_count+val_count),\n\t        \"train800\":\n\t            \"train[:800]\",\n\t        \"val200\":\n\t            \"train[{}:{}]\".format(train_count, train_count+200),\n\t        \"train800val200\":\n\t            \"train[:800]+train[{}:{}]\".format(train_count, train_count+200),\n\t    }\n\t    # Creates a dict with example counts for each split.\n\t    num_samples_splits = {\n", "        \"train\": train_count,\n\t        \"val\": val_count,\n\t        \"trainval\": train_count + val_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    num_channels = 3\n\t    if data_key == \"sentinel2\":\n", "      num_channels = 13\n\t    super(EurosatData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=100,\n\t        shuffle_buffer_size=10000,\n\t        base_preprocess_fn=base.make_get_and_cast_tensors_fn({\n\t            data_key: (\"image\", None),\n\t            \"label\": (\"label\", None),\n", "        }),\n\t        image_key=data_key,\n\t        num_channels=num_channels,\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/vtab_datasets/dsprites.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements the DSprites data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\timport tensorflow.compat.v1 as tf\n", "import tensorflow_datasets as tfds\n\tfrom . import base as base\n\tfrom .registry import Registry\n\t# These constants specify the percentage of data that is used to create custom\n\t# train/val splits. Specifically, TRAIN_SPLIT_PERCENT% of the data set is used\n\t# as a new training split and VAL_SPLIT_PERCENT% is used for validation.\n\t# The rest is used for testing.\n\tTRAIN_SPLIT_PERCENT = 80\n\tVAL_SPLIT_PERCENT = 10\n\t@Registry.register(\"data.dsprites\", \"class\")\n", "class DSpritesData(base.ImageTfdsData):\n\t  \"\"\"Provides the DSprites data set.\n\t  DSprites only comes with a training set. Therefore, the training, validation,\n\t  and test set are split out of the original training set.\n\t  For additional details and usage, see the base class.\n\t  The data set page is https://github.com/deepmind/dsprites-dataset/.\n\t  \"\"\"\n\t  def __init__(self, predicted_attribute, num_classes=None, data_dir=None):\n\t    dataset_builder = tfds.builder(\"dsprites:2.*.*\", data_dir=data_dir)\n\t    dataset_builder.download_and_prepare()\n", "    info = dataset_builder.info\n\t    if predicted_attribute not in dataset_builder.info.features:\n\t      raise ValueError(\n\t          \"{} is not a valid attribute to predict.\".format(predicted_attribute))\n\t    # If num_classes is set, we group together nearby integer values to arrive\n\t    # at the desired number of classes. This is useful for example for grouping\n\t    # together different spatial positions.\n\t    num_original_classes = info.features[predicted_attribute].num_classes\n\t    if num_classes is None:\n\t      num_classes = num_original_classes\n", "    if not isinstance(num_classes, int) or num_classes <= 1 or (\n\t        num_classes > num_original_classes):\n\t      raise ValueError(\n\t          \"The number of classes should be None or in [2, ..., num_classes].\")\n\t    class_division_factor = float(num_original_classes) / num_classes\n\t    # Creates a dict with example counts for each split.\n\t    num_total = dataset_builder.info.splits[\"train\"].num_examples\n\t    num_samples_train = TRAIN_SPLIT_PERCENT * num_total // 100\n\t    num_samples_val = VAL_SPLIT_PERCENT * num_total // 100\n\t    num_samples_splits = {\n", "        \"train\": num_samples_train,\n\t        \"val\": num_samples_val,\n\t        \"trainval\": num_samples_val + num_samples_train,\n\t        \"test\": num_total - num_samples_val - num_samples_train,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n", "        \"train\": \"train[:{}]\".format(num_samples_splits[\"train\"]),\n\t        \"val\": \"train[{}:{}]\".format(num_samples_splits[\"train\"],\n\t                                     num_samples_splits[\"trainval\"]),\n\t        \"trainval\": \"train[:{}]\".format(num_samples_splits[\"trainval\"]),\n\t        \"test\": \"train[{}:]\".format(num_samples_splits[\"trainval\"]),\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"train[{}:{}]\".format(num_samples_splits[\"train\"],\n\t                                        num_samples_splits[\"train\"]+200),\n\t        \"train800val200\": \"train[:800]+train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n", "    }\n\t    def preprocess_fn(tensors):\n\t      # For consistency with other datasets, image needs to have three channels\n\t      # and be in [0, 255).\n\t      images = tf.tile(tensors[\"image\"], [1, 1, 3]) * 255\n\t      label = tf.cast(\n\t          tf.math.floordiv(\n\t              tf.cast(tensors[predicted_attribute], tf.float32),\n\t              class_division_factor), info.features[predicted_attribute].dtype)\n\t      return dict(image=images, label=label)\n", "    super(DSpritesData, self).__init__(\n\t        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # We extract the attribute we want to predict in the preprocessing.\n\t        base_preprocess_fn=preprocess_fn,\n\t        num_classes=num_classes)\n"]}
{"filename": "src/data/vtab_datasets/cifar.py", "chunked_list": ["# coding=utf-8\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t# Copyright 2019 Google LLC.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n", "# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n\t# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Implements Cifar data class.\"\"\"\n\tfrom __future__ import absolute_import\n\tfrom __future__ import division\n\tfrom __future__ import print_function\n\tfrom . import base as base\n", "from .registry import Registry\n\timport tensorflow_datasets as tfds\n\t# This constant specifies the percentage of data that is used to create custom\n\t# train/val splits. Specifically, TRAIN_SPLIT_PERCENT% of the official training\n\t# split is used as a new training split and the rest is used for validation.\n\tTRAIN_SPLIT_PERCENT = 90\n\t@Registry.register(\"data.cifar\", \"class\")\n\tclass CifarData(base.ImageTfdsData):\n\t  \"\"\"Provides Cifar10 or Cifar100 data.\n\t  Cifar comes only with a training and test set. Therefore, the validation set\n", "  is split out of the original training set, and the remaining examples are used\n\t  as the \"train\" split. The \"trainval\" split corresponds to the original\n\t  training set.\n\t  For additional details and usage, see the base class.\n\t  \"\"\"\n\t  def __init__(self, num_classes=10, data_dir=None, train_split_percent=None):\n\t    if num_classes == 10:\n\t      dataset_builder = tfds.builder(\"cifar10:3.*.*\", data_dir=data_dir)\n\t    elif num_classes == 100:\n\t      dataset_builder = tfds.builder(\"cifar100:3.*.*\", data_dir=data_dir)\n", "    else:\n\t      raise ValueError(\n\t          \"Number of classes must be 10 or 100, got {}\".format(num_classes))\n\t    dataset_builder.download_and_prepare()\n\t    train_split_percent = train_split_percent or TRAIN_SPLIT_PERCENT\n\t    # Creates a dict with example counts for each split.\n\t    trainval_count = dataset_builder.info.splits[\"train\"].num_examples\n\t    test_count = dataset_builder.info.splits[\"test\"].num_examples\n\t    num_samples_splits = {\n\t        \"train\": (train_split_percent * trainval_count) // 100,\n", "        \"val\": trainval_count - (train_split_percent * trainval_count) // 100,\n\t        \"trainval\": trainval_count,\n\t        \"test\": test_count,\n\t        \"train800\": 800,\n\t        \"val200\": 200,\n\t        \"train800val200\": 1000,\n\t    }\n\t    # Defines dataset specific train/val/trainval/test splits.\n\t    tfds_splits = {\n\t        \"train\": \"train[:{}]\".format(num_samples_splits[\"train\"]),\n", "        \"val\": \"train[{}:]\".format(num_samples_splits[\"train\"]),\n\t        \"trainval\": \"train\",\n\t        \"test\": \"test\",\n\t        \"train800\": \"train[:800]\",\n\t        \"val200\": \"train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n\t        \"train800val200\": \"train[:800]+train[{}:{}]\".format(\n\t            num_samples_splits[\"train\"], num_samples_splits[\"train\"]+200),\n\t    }\n\t    super(CifarData, self).__init__(\n", "        dataset_builder=dataset_builder,\n\t        tfds_splits=tfds_splits,\n\t        num_samples_splits=num_samples_splits,\n\t        num_preprocessing_threads=400,\n\t        shuffle_buffer_size=10000,\n\t        # Note: Export only image and label tensors with their original types.\n\t        base_preprocess_fn=base.make_get_tensors_fn([\"image\", \"label\", \"id\"]),\n\t        num_classes=dataset_builder.info.features[\"label\"].num_classes)\n"]}
{"filename": "src/data/datasets/tf_dataset.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"a dataset that handles output of tf.data: support datasets from VTAB\"\"\"\n\timport functools\n\timport tensorflow.compat.v1 as tf\n\timport torch\n\timport torch.utils.data\n\timport numpy as np\n\tfrom collections import Counter\n\tfrom torch import Tensor\n\tfrom ..vtab_datasets import base\n", "# pylint: disable=unused-import\n\tfrom ..vtab_datasets import caltech\n\tfrom ..vtab_datasets import cifar\n\tfrom ..vtab_datasets import clevr\n\tfrom ..vtab_datasets import diabetic_retinopathy\n\tfrom ..vtab_datasets import dmlab\n\tfrom ..vtab_datasets import dsprites\n\tfrom ..vtab_datasets import dtd\n\tfrom ..vtab_datasets import eurosat\n\tfrom ..vtab_datasets import kitti\n", "from ..vtab_datasets import oxford_flowers102\n\tfrom ..vtab_datasets import oxford_iiit_pet\n\tfrom ..vtab_datasets import patch_camelyon\n\tfrom ..vtab_datasets import resisc45\n\tfrom ..vtab_datasets import smallnorb\n\tfrom ..vtab_datasets import sun397\n\tfrom ..vtab_datasets import svhn\n\tfrom ..vtab_datasets.registry import Registry\n\tfrom ...utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n", "tf.config.experimental.set_visible_devices([], 'GPU')  # set tensorflow to not use gpu  # noqa\n\tDATASETS = [\n\t    'caltech101',\n\t    'cifar(num_classes=100)',\n\t    'dtd',\n\t    'oxford_flowers102',\n\t    'oxford_iiit_pet',\n\t    'patch_camelyon',\n\t    'sun397',\n\t    'svhn',\n", "    'resisc45',\n\t    'eurosat',\n\t    'dmlab',\n\t    'kitti(task=\"closest_vehicle_distance\")',\n\t    'smallnorb(predicted_attribute=\"label_azimuth\")',\n\t    'smallnorb(predicted_attribute=\"label_elevation\")',\n\t    'dsprites(predicted_attribute=\"label_x_position\",num_classes=16)',\n\t    'dsprites(predicted_attribute=\"label_orientation\",num_classes=16)',\n\t    'clevr(task=\"closest_object_distance\")',\n\t    'clevr(task=\"count_all\")',\n", "    'diabetic_retinopathy(config=\"btgraham-300\")'\n\t]\n\tclass TFDataset(torch.utils.data.Dataset):\n\t    def __init__(self, cfg, split):\n\t        assert split in {\n\t            \"train\",\n\t            \"val\",\n\t            \"test\",\n\t            \"trainval\"\n\t        }, \"Split '{}' not supported for {} dataset\".format(\n", "            split, cfg.DATA.NAME)\n\t        logger.info(\"Constructing {} dataset {}...\".format(\n\t            cfg.DATA.NAME, split))\n\t        self.cfg = cfg\n\t        self._split = split\n\t        self.name = cfg.DATA.NAME\n\t        self.img_mean = torch.tensor([0.485, 0.456, 0.406]).view(3, 1, 1)\n\t        self.img_std = torch.tensor([0.229, 0.224, 0.225]).view(3, 1, 1)\n\t        self.get_data(cfg, split)\n\t    def get_data(self, cfg, split):\n", "        tf_data = build_tf_dataset(cfg, split)\n\t        data_list = list(tf_data)  # a list of tuples\n\t        self._image_tensor_list = [t[0].numpy().squeeze() for t in data_list]\n\t        self._targets = [int(t[1].numpy()[0]) for t in data_list]\n\t        self._class_ids = sorted(list(set(self._targets)))\n\t        logger.info(\"Number of images: {}\".format(len(self._image_tensor_list)))\n\t        logger.info(\"Number of classes: {} / {}\".format(\n\t            len(self._class_ids), self.get_class_num()))\n\t        del data_list\n\t        del tf_data\n", "    def get_info(self):\n\t        num_imgs = len(self._image_tensor_list)\n\t        return num_imgs, self.get_class_num()\n\t    def get_class_num(self):\n\t        return self.cfg.DATA.NUMBER_CLASSES\n\t    def get_class_weights(self, weight_type):\n\t        \"\"\"get a list of class weight, return a list float\"\"\"\n\t        if \"train\" not in self._split:\n\t            raise ValueError(\n\t                \"only getting training class distribution, \" + \\\n", "                \"got split {} instead\".format(self._split)\n\t            )\n\t        cls_num = self.get_class_num()\n\t        if weight_type == \"none\":\n\t            return [1.0] * cls_num\n\t        id2counts = Counter(self._class_ids)\n\t        assert len(id2counts) == cls_num\n\t        num_per_cls = np.array([id2counts[i] for i in self._class_ids])\n\t        if weight_type == 'inv':\n\t            mu = -1.0\n", "        elif weight_type == 'inv_sqrt':\n\t            mu = -0.5\n\t        weight_list = num_per_cls ** mu\n\t        weight_list = np.divide(\n\t            weight_list, np.linalg.norm(weight_list, 1)) * cls_num\n\t        return weight_list.tolist()\n\t    def __getitem__(self, index):\n\t        # Load the image\n\t        label = self._targets[index]\n\t        im = to_torch_imgs(\n", "            self._image_tensor_list[index], self.img_mean, self.img_std)\n\t        if self._split == \"train\":\n\t            index = index\n\t        else:\n\t            index = f\"{self._split}{index}\"\n\t        sample = {\n\t            \"image\": im,\n\t            \"label\": label,\n\t            # \"id\": index\n\t        }\n", "        return sample\n\t    def __len__(self):\n\t        return len(self._targets)\n\tdef preprocess_fn(data, size=224, input_range=(0.0, 1.0)):\n\t    image = data[\"image\"]\n\t    image = tf.image.resize(image, [size, size])\n\t    image = tf.cast(image, tf.float32) / 255.0\n\t    image = image * (input_range[1] - input_range[0]) + input_range[0]\n\t    data[\"image\"] = image\n\t    return data\n", "def build_tf_dataset(cfg, mode):\n\t    \"\"\"\n\t    Builds a tf data instance, then transform to a list of tensors and labels\n\t    \"\"\"\n\t    if mode not in [\"train\", \"val\", \"test\", \"trainval\"]:\n\t        raise ValueError(\"The input pipeline supports `train`, `val`, `test`.\"\n\t                         \"Provided mode is {}\".format(mode))\n\t    vtab_dataname = cfg.DATA.NAME.split(\"vtab-\")[-1]\n\t    data_dir = cfg.DATA.DATAPATH\n\t    if vtab_dataname in DATASETS:\n", "        data_cls = Registry.lookup(\"data.\" + vtab_dataname)\n\t        vtab_tf_dataloader = data_cls(data_dir=data_dir)\n\t    else:\n\t        raise ValueError(\"Unknown type for \\\"dataset\\\" field: {}\".format(\n\t            type(vtab_dataname)))\n\t    split_name_dict = {\n\t        \"dataset_train_split_name\": \"train800\",\n\t        \"dataset_val_split_name\": \"val200\",\n\t        \"dataset_trainval_split_name\": \"train800val200\",\n\t        \"dataset_test_split_name\": \"test\",\n", "    }\n\t    def _dict_to_tuple(batch):\n\t        return batch['image'], batch['label']\n\t    return vtab_tf_dataloader.get_tf_data(\n\t        batch_size=1,  # data_params[\"batch_size\"],\n\t        drop_remainder=False,\n\t        split_name=split_name_dict[f\"dataset_{mode}_split_name\"],\n\t        preprocess_fn=functools.partial(\n\t            preprocess_fn,\n\t            input_range=(0.0, 1.0),\n", "            size=cfg.DATA.CROPSIZE,\n\t            ),\n\t        for_eval=mode != \"train\",  # handles shuffling\n\t        shuffle_buffer_size=1000,\n\t        prefetch=1,\n\t        train_examples=None,\n\t        epochs=1  # setting epochs to 1 make sure it returns one copy of the dataset\n\t    ).map(_dict_to_tuple)  # return a PrefetchDataset object. (which does not have much documentation to go on)\n\tdef to_torch_imgs(img: np.ndarray, mean: Tensor, std: Tensor) -> Tensor:\n\t    t_img: Tensor = torch.from_numpy(np.transpose(img, (2, 0, 1)))\n", "    t_img -= mean\n\t    t_img /= std\n\t    return t_img\n"]}
{"filename": "src/data/datasets/json_dataset.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"JSON dataset: support CUB, NABrids, Flower, Dogs and Cars\"\"\"\n\timport os\n\timport torch\n\timport torch.utils.data\n\timport torchvision as tv\n\timport numpy as np\n\tfrom collections import Counter\n\tfrom ..transforms import get_transforms\n\tfrom ...utils import logging\n", "from ...utils.io_utils import read_json\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass JSONDataset(torch.utils.data.Dataset):\n\t    def __init__(self, cfg, split):\n\t        assert split in {\n\t            \"train\",\n\t            \"val\",\n\t            \"test\",\n\t        }, \"Split '{}' not supported for {} dataset\".format(\n\t            split, cfg.DATA.NAME)\n", "        logger.info(\"Constructing {} dataset {}...\".format(\n\t            cfg.DATA.NAME, split))\n\t        self.cfg = cfg\n\t        self._split = split\n\t        self.name = cfg.DATA.NAME\n\t        self.data_dir = cfg.DATA.DATAPATH\n\t        self.data_percentage = cfg.DATA.PERCENTAGE\n\t        self._construct_imdb(cfg)\n\t        self.transform = get_transforms(split, cfg.DATA.CROPSIZE)\n\t    def get_anno(self):\n", "        anno_path = os.path.join(self.data_dir, \"{}.json\".format(self._split))\n\t        if \"train\" in self._split:\n\t            if self.data_percentage < 1.0:\n\t                anno_path = os.path.join(\n\t                    self.data_dir,\n\t                    \"{}_{}.json\".format(self._split, self.data_percentage)\n\t                )\n\t        assert os.path.exists(anno_path), \"{} dir not found\".format(anno_path)\n\t        return read_json(anno_path)\n\t    def get_imagedir(self):\n", "        raise NotImplementedError()\n\t    def _construct_imdb(self, cfg):\n\t        \"\"\"Constructs the imdb.\"\"\"\n\t        img_dir = self.get_imagedir()\n\t        assert os.path.exists(img_dir), \"{} dir not found\".format(img_dir)\n\t        anno = self.get_anno()\n\t        # Map class ids to contiguous ids\n\t        self._class_ids = sorted(list(set(anno.values())))\n\t        self._class_id_cont_id = {v: i for i, v in enumerate(self._class_ids)}\n\t        # Construct the image db\n", "        self._imdb = []\n\t        for img_name, cls_id in anno.items():\n\t            cont_id = self._class_id_cont_id[cls_id]\n\t            im_path = os.path.join(img_dir, img_name)\n\t            self._imdb.append({\"im_path\": im_path, \"class\": cont_id})\n\t        logger.info(\"Number of images: {}\".format(len(self._imdb)))\n\t        logger.info(\"Number of classes: {}\".format(len(self._class_ids)))\n\t    def get_info(self):\n\t        num_imgs = len(self._imdb)\n\t        return num_imgs, self.get_class_num(), self.name\n", "    def get_class_num(self):\n\t        return self.cfg.DATA.NUMBER_CLASSES\n\t        # return len(self._class_ids)\n\t    def get_class_weights(self, weight_type):\n\t        \"\"\"get a list of class weight, return a list float\"\"\"\n\t        if \"train\" not in self._split:\n\t            raise ValueError(\n\t                \"only getting training class distribution, \" + \\\n\t                \"got split {} instead\".format(self._split)\n\t            )\n", "        cls_num = self.get_class_num()\n\t        if weight_type == \"none\":\n\t            return [1.0] * cls_num\n\t        id2counts = Counter(self._class_ids)\n\t        assert len(id2counts) == cls_num\n\t        num_per_cls = np.array([id2counts[i] for i in self._class_ids])\n\t        if weight_type == 'inv':\n\t            mu = -1.0\n\t        elif weight_type == 'inv_sqrt':\n\t            mu = -0.5\n", "        weight_list = num_per_cls ** mu\n\t        weight_list = np.divide(\n\t            weight_list, np.linalg.norm(weight_list, 1)) * cls_num\n\t        return weight_list.tolist()\n\t    def __getitem__(self, index):\n\t        # Load the image\n\t        im = tv.datasets.folder.default_loader(self._imdb[index][\"im_path\"])\n\t        label = self._imdb[index][\"class\"]\n\t        im = self.transform(im)\n\t        if self._split == \"train\":\n", "            index = index\n\t        else:\n\t            index = f\"{self._split}{index}\"\n\t        sample = {\n\t            \"image\": im,\n\t            \"label\": label,\n\t            # \"id\": index\n\t        }\n\t        return sample\n\t    def __len__(self):\n", "        return len(self._imdb)\n\tclass CUB200Dataset(JSONDataset):\n\t    \"\"\"CUB_200 dataset.\"\"\"\n\t    def __init__(self, cfg, split):\n\t        super(CUB200Dataset, self).__init__(cfg, split)\n\t    def get_imagedir(self):\n\t        return os.path.join(self.data_dir, \"images\")\n\tclass CarsDataset(JSONDataset):\n\t    \"\"\"stanford-cars dataset.\"\"\"\n\t    def __init__(self, cfg, split):\n", "        super(CarsDataset, self).__init__(cfg, split)\n\t    def get_imagedir(self):\n\t        return self.data_dir\n\tclass DogsDataset(JSONDataset):\n\t    \"\"\"stanford-dogs dataset.\"\"\"\n\t    def __init__(self, cfg, split):\n\t        super(DogsDataset, self).__init__(cfg, split)\n\t    def get_imagedir(self):\n\t        return os.path.join(self.data_dir, \"Images\")\n\tclass FlowersDataset(JSONDataset):\n", "    \"\"\"flowers dataset.\"\"\"\n\t    def __init__(self, cfg, split):\n\t        super(FlowersDataset, self).__init__(cfg, split)\n\t    def get_imagedir(self):\n\t        return self.data_dir\n\tclass NabirdsDataset(JSONDataset):\n\t    \"\"\"Nabirds dataset.\"\"\"\n\t    def __init__(self, cfg, split):\n\t        super(NabirdsDataset, self).__init__(cfg, split)\n\t    def get_imagedir(self):\n", "        return os.path.join(self.data_dir, \"images\")\n"]}
{"filename": "src/solver/losses.py", "chunked_list": ["#!/usr/bin/env python3\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\tfrom typing import Optional\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass SigmoidLoss(nn.Module):\n\t    def __init__(self, cfg=None):\n\t        super(SigmoidLoss, self).__init__()\n", "    def is_single(self):\n\t        return True\n\t    def is_local(self):\n\t        return False\n\t    def multi_hot(self, labels: torch.Tensor, nb_classes: int) -> torch.Tensor:\n\t        labels = labels.unsqueeze(1)  # (batch_size, 1)\n\t        target = torch.zeros(\n\t            labels.size(0), nb_classes, device=labels.device\n\t        ).scatter_(1, labels, 1.)\n\t        # (batch_size, num_classes)\n", "        return target\n\t    def loss(\n\t        self, logits, targets, per_cls_weights,\n\t        multihot_targets: Optional[bool] = False\n\t    ):\n\t        # targets: 1d-tensor of integer\n\t        # Only support single label at this moment\n\t        # if len(targets.shape) != 2:\n\t        num_classes = logits.shape[1]\n\t        targets = self.multi_hot(targets, num_classes)\n", "        loss = F.binary_cross_entropy_with_logits(\n\t            logits, targets, reduction=\"none\")\n\t        # logger.info(f\"loss shape: {loss.shape}\")\n\t        weight = torch.tensor(\n\t            per_cls_weights, device=logits.device\n\t        ).unsqueeze(0)\n\t        # logger.info(f\"weight shape: {weight.shape}\")\n\t        loss = torch.mul(loss.to(torch.float32), weight.to(torch.float32))\n\t        return torch.sum(loss) / targets.shape[0]\n\t    def forward(\n", "        self, pred_logits, targets, per_cls_weights, multihot_targets=False\n\t    ):\n\t        loss = self.loss(\n\t            pred_logits, targets,  per_cls_weights, multihot_targets)\n\t        return loss\n\tclass SoftmaxLoss(SigmoidLoss):\n\t    def __init__(self, cfg=None):\n\t        super(SoftmaxLoss, self).__init__()\n\t    def loss(self, logits, targets, per_cls_weights, kwargs):\n\t        weight = torch.tensor(\n", "            per_cls_weights, device=logits.device\n\t        )\n\t        loss = F.cross_entropy(logits, targets, weight, reduction=\"none\")\n\t        return torch.sum(loss) / targets.shape[0]\n\tLOSS = {\n\t    \"softmax\": SoftmaxLoss,\n\t}\n\tdef build_loss(cfg):\n\t    loss_name = cfg.SOLVER.LOSS\n\t    assert loss_name in LOSS, \\\n", "        f'loss name {loss_name} is not supported'\n\t    loss_fn = LOSS[loss_name]\n\t    if not loss_fn:\n\t        return None\n\t    else:\n\t        return loss_fn(cfg)\n"]}
{"filename": "src/solver/optimizer.py", "chunked_list": ["#!/usr/bin/env python3\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t\"\"\"\n\toptimizer, ref:\n\thttps://github.com/huggingface/transformers/blob/master/transformers/optimization.property  #noqa\n\t\"\"\"\n\timport math\n\timport torch\n\tfrom fvcore.common.config import CfgNode\n\tfrom torch.optim import Optimizer\n", "import torch.optim as optim\n\tfrom typing import Any, Callable, Iterable, List, Tuple, Optional\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tdef make_optimizer(\n\t    models: List[Any], train_params: CfgNode\n\t) -> Optimizer:\n\t    params = []\n\t    for model in models:\n\t        # only include learnable params\n", "        if train_params.DBG_TRAINABLE:\n\t            logger.info(\"Trainable params:\")\n\t        for key, value in model.named_parameters():\n\t            if value.requires_grad:\n\t                if train_params.DBG_TRAINABLE:\n\t                    logger.info(\"\\t{}, {}, {}\".format(key, value.numel(), value.shape))\n\t                params.append((key, value))\n\t    if train_params.WEIGHT_DECAY > 0:\n\t        if train_params.OPTIMIZER == 'adamw':\n\t            no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']\n", "            optimizer_grouped_parameters = [\n\t                {'params': [p for n, p in params\n\t                            if not any(nd in n for nd in no_decay)],\n\t                 'weight_decay': 0.01},\n\t                {'params': [p for n, p in params\n\t                            if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n\t            ]\n\t            optimizer = AdamW(\n\t                optimizer_grouped_parameters,\n\t                lr=train_params.BASE_LR,\n", "            )\n\t        else:\n\t            _params = []\n\t            for p in params:\n\t                key, value = p\n\t                # print(key)\n\t                # if not value.requires_grad:\n\t                #     continue\n\t                lr = train_params.BASE_LR\n\t                weight_decay = train_params.WEIGHT_DECAY\n", "                if \"last_layer.bias\" in key:\n\t                    # no regularization (weight decay) for last layer's bias\n\t                    weight_decay = 0.0\n\t                if train_params.BIAS_MULTIPLIER == 1.:\n\t                    _params += [{\n\t                        \"params\": [value],\n\t                        \"lr\": lr,\n\t                        \"weight_decay\": weight_decay\n\t                    }]\n\t                else:\n", "                    if \"bias\" in key and \"last_layer.bias\" not in key:\n\t                        # use updated lr for this param\n\t                        lr_value = lr * train_params.BIAS_MULTIPLIER\n\t                    else:\n\t                        lr_value = lr\n\t                    if train_params.DBG_TRAINABLE:\n\t                        logger.info(\"\\t{}, {:.4f}\".format(key, lr_value))\n\t                    _params += [{\n\t                        \"params\": [value],\n\t                        \"lr\": lr_value,\n", "                        \"weight_decay\": weight_decay\n\t                    }]\n\t            if train_params.OPTIMIZER == 'adam':\n\t                optimizer = optim.Adam(\n\t                    _params,\n\t                    lr=train_params.BASE_LR,\n\t                    weight_decay=train_params.WEIGHT_DECAY,\n\t                )\n\t            else:\n\t                optimizer = optim.SGD(\n", "                    _params,\n\t                    train_params.BASE_LR,\n\t                    momentum=train_params.MOMENTUM,\n\t                    weight_decay=train_params.WEIGHT_DECAY\n\t                )\n\t        return optimizer\n\t    else:\n\t        if train_params.OPTIMIZER == 'adam':\n\t            optimizer = optim.Adam(\n\t                model.parameters(),\n", "                lr=train_params.BASE_LR\n\t            )\n\t        else:\n\t            _params = []\n\t            for p in params:\n\t                key, value = p\n\t                lr = train_params.BASE_LR\n\t                if train_params.BIAS_MULTIPLIER == 1.:\n\t                    _params += [{\n\t                        \"params\": [value],\n", "                        \"lr\": lr,\n\t                    }]\n\t                else:\n\t                    if \"bias\" in key and \"last_layer.bias\" not in key:\n\t                        # use updated lr for this param\n\t                        lr_value = lr * train_params.BIAS_MULTIPLIER\n\t                    else:\n\t                        lr_value = lr\n\t                    if train_params.DBG_TRAINABLE:\n\t                        logger.info(\"\\t{}, {:.4f}\".format(key, lr_value))\n", "                    _params += [{\n\t                        \"params\": [value],\n\t                        \"lr\": lr_value,\n\t                    }]\n\t            optimizer = optim.SGD(\n\t                _params,\n\t                train_params.BASE_LR,\n\t                momentum=train_params.MOMENTUM,\n\t            )\n\t        return optimizer\n", "class AdamW(Optimizer):\n\t    \"\"\" Implements Adam algorithm with weight decay fix.\n\t    Parameters:\n\t        lr (float): learning rate. Default 1e-3.\n\t        betas (tuple of 2 floats): Adams beta parameters (b1, b2). Default: (0.9, 0.999)\n\t        eps (float): Adams epsilon. Default: 1e-6\n\t        weight_decay (float): Weight decay. Default: 0.0\n\t        correct_bias (bool): can be set to False to avoid correcting bias in Adam (e.g. like in Bert TF repository). Default True.\n\t    \"\"\"\n\t    def __init__(\n", "        self,\n\t        params: Iterable,\n\t        lr: float = 1e-3,\n\t        betas: Tuple[float, float] = (0.9, 0.999),\n\t        eps: float = 1e-6,\n\t        weight_decay: float = 0.0,\n\t        correct_bias: bool = True\n\t    ) -> None:\n\t        if lr < 0.0:\n\t            raise ValueError(\"Invalid learning rate: {} - should be >= 0.0\".format(lr))\n", "        if not 0.0 <= betas[0] < 1.0:\n\t            raise ValueError(\"Invalid beta parameter: {} - should be in [0.0, 1.0[\".format(betas[0]))\n\t        if not 0.0 <= betas[1] < 1.0:\n\t            raise ValueError(\"Invalid beta parameter: {} - should be in [0.0, 1.0[\".format(betas[1]))\n\t        if not 0.0 <= eps:\n\t            raise ValueError(\"Invalid epsilon value: {} - should be >= 0.0\".format(eps))\n\t        defaults = {\n\t            \"lr\": lr, \"betas\": betas, \"eps\": eps,\n\t            \"weight_decay\": weight_decay, \"correct_bias\": correct_bias\n\t        }\n", "        super(AdamW, self).__init__(params, defaults)\n\t    def step(self, closure: Optional[Callable] = None) -> Optional[Callable]:\n\t        \"\"\"Performs a single optimization step.\n\t        Arguments:\n\t            closure (callable, optional): A closure that reevaluates the model\n\t                and returns the loss.\n\t        \"\"\"\n\t        loss = None\n\t        if closure is not None:\n\t            loss = closure()\n", "        for group in self.param_groups:\n\t            for p in group['params']:\n\t                if p.grad is None:\n\t                    continue\n\t                grad = p.grad.data\n\t                if grad.is_sparse:\n\t                    raise RuntimeError(\n\t                        \"Adam does not support sparse gradients, \"\n\t                        \"please consider SparseAdam instead\")\n\t                state = self.state[p]\n", "                # State initialization\n\t                if len(state) == 0:\n\t                    state['step'] = 0\n\t                    # Exponential moving average of gradient values\n\t                    state['exp_avg'] = torch.zeros_like(p.data)\n\t                    # Exponential moving average of squared gradient values\n\t                    state['exp_avg_sq'] = torch.zeros_like(p.data)\n\t                exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']\n\t                beta1, beta2 = group['betas']\n\t                state['step'] += 1\n", "                # Decay the first and second moment running average coefficient\n\t                # In-place operations to update the averages at the same time\n\t                exp_avg.mul_(beta1).add_(1.0 - beta1, grad)\n\t                exp_avg_sq.mul_(beta2).addcmul_(1.0 - beta2, grad, grad)\n\t                denom = exp_avg_sq.sqrt().add_(group['eps'])\n\t                step_size = group['lr']\n\t                if group['correct_bias']:  # No bias correction for Bert\n\t                    bias_correction1 = 1.0 - beta1 ** state['step']\n\t                    bias_correction2 = 1.0 - beta2 ** state['step']\n\t                    step_size = step_size * math.sqrt(\n", "                        bias_correction2) / bias_correction1\n\t                p.data.addcdiv_(-step_size, exp_avg, denom)\n\t                # Just adding the square of the weights to the loss function is *not*\n\t                # the correct way of using L2 regularization/weight decay with Adam,\n\t                # since that will interact with the m and v parameters in strange ways.\n\t                #\n\t                # Instead we want to decay the weights in a manner that doesn't interact\n\t                # with the m/v parameters. This is equivalent to adding the square\n\t                # of the weights to the loss with plain (non-momentum) SGD.\n\t                # Add weight decay at the end (fixed version)\n", "                if group['weight_decay'] > 0.0:\n\t                    p.data.add_(-group['lr'] * group['weight_decay'], p.data)\n\t        return loss\n"]}
{"filename": "src/solver/lr_scheduler.py", "chunked_list": ["#!/usr/bin/env python3\n\timport math\n\timport torch.optim as optim\n\tfrom fvcore.common.config import CfgNode\n\tfrom torch.optim.lr_scheduler import LambdaLR\n\tdef make_scheduler(\n\t    optimizer: optim.Optimizer, train_params: CfgNode\n\t) -> LambdaLR:\n\t    warmup = train_params.WARMUP_EPOCH\n\t    total_iters = train_params.TOTAL_EPOCH\n", "    if train_params.SCHEDULER == \"cosine\":\n\t        scheduler = WarmupCosineSchedule(\n\t            optimizer,\n\t            warmup_steps=warmup,\n\t            t_total=total_iters\n\t        )\n\t    elif train_params.SCHEDULER == \"cosine_hardrestart\":\n\t        scheduler = WarmupCosineWithHardRestartsSchedule(\n\t            optimizer,\n\t            warmup_steps=warmup,\n", "            t_total=total_iters\n\t        )\n\t    elif train_params.SCHEDULER == \"plateau\":\n\t        scheduler = optim.lr_scheduler.ReduceLROnPlateau(\n\t            optimizer,\n\t            \"max\",\n\t            patience=5,\n\t            verbose=True,\n\t            factor=train_params.LR_DECAY_FACTOR,\n\t        )\n", "    else:\n\t        scheduler = None\n\t    return scheduler\n\tclass WarmupCosineSchedule(LambdaLR):\n\t    \"\"\" Linear warmup and then cosine decay.\n\t        Linearly increases learning rate from 0 to 1 over `warmup_steps`.\n\t        Decreases learning rate from 1. to 0. over remaining\n\t            `t_total - warmup_steps` steps following a cosine curve.\n\t        If `cycles` (default=0.5) is different from default, learning rate\n\t            follows cosine function after warmup.\n", "    \"\"\"\n\t    def __init__(self, optimizer, warmup_steps, t_total, cycles=.5, last_epoch=-1):\n\t        self.warmup_steps = warmup_steps\n\t        self.t_total = t_total\n\t        self.cycles = cycles\n\t        super(WarmupCosineSchedule, self).__init__(\n\t            optimizer, self.lr_lambda, last_epoch=last_epoch)\n\t    def lr_lambda(self, step):\n\t        if step < self.warmup_steps:\n\t            return float(step) / float(max(1.0, self.warmup_steps))\n", "        # progress after warmup\n\t        progress = float(step - self.warmup_steps) / float(max(\n\t            1, self.t_total - self.warmup_steps))\n\t        return max(\n\t            0.0,\n\t            0.5 * (1. + math.cos(math.pi * float(self.cycles) * 2.0 * progress))\n\t        )\n\tclass WarmupCosineWithHardRestartsSchedule(LambdaLR):\n\t    \"\"\" Linear warmup and then cosine cycles with hard restarts.\n\t        Linearly increases learning rate from 0 to 1 over `warmup_steps`.\n", "        If `cycles` (default=1.) is different from default, learning rate\n\t            follows `cycles` times a cosine decaying learning rate\n\t            (with hard restarts).\n\t    \"\"\"\n\t    def __init__(self, optimizer, warmup_steps, t_total, cycles=1., last_epoch=-1):\n\t        self.warmup_steps = warmup_steps\n\t        self.t_total = t_total\n\t        self.cycles = cycles\n\t        super(WarmupCosineWithHardRestartsSchedule, self).__init__(\n\t            optimizer, self.lr_lambda, last_epoch=last_epoch)\n", "    def lr_lambda(self, step):\n\t        if step < self.warmup_steps:\n\t            return float(step) / float(max(1, self.warmup_steps))\n\t        # progress after warmup\n\t        progress = float(step - self.warmup_steps) / float(\n\t            max(1, self.t_total - self.warmup_steps))\n\t        if progress >= 1.0:\n\t            return 0.0\n\t        return max(\n\t            0.0,\n", "            0.5 * (1. + math.cos(\n\t                math.pi * ((float(self.cycles) * progress) % 1.0)))\n\t        )\n"]}
{"filename": "src/engine/trainer.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\ta trainer class\n\t\"\"\"\n\timport datetime\n\timport time\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\timport os\n", "from fvcore.common.config import CfgNode\n\tfrom fvcore.common.checkpoint import Checkpointer\n\tfrom ..engine.evaluator import Evaluator\n\tfrom ..solver.lr_scheduler import make_scheduler\n\tfrom ..solver.optimizer import make_optimizer\n\tfrom ..solver.losses import build_loss\n\tfrom ..utils import logging\n\tfrom ..utils.train_utils import AverageMeter, gpu_mem_usage\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass Trainer():\n", "    \"\"\"\n\t    a trainer with below logics:\n\t    1. Build optimizer, scheduler\n\t    2. Load checkpoints if provided\n\t    3. Train and eval at each epoch\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t        cfg: CfgNode,\n\t        model: nn.Module,\n", "        evaluator: Evaluator,\n\t        device: torch.device,\n\t    ) -> None:\n\t        self.cfg = cfg\n\t        self.model = model\n\t        self.device = device\n\t        # solver related\n\t        logger.info(\"\\tSetting up the optimizer...\")\n\t        self.optimizer = make_optimizer([self.model], cfg.SOLVER)\n\t        self.scheduler = make_scheduler(self.optimizer, cfg.SOLVER)\n", "        self.cls_criterion = build_loss(self.cfg)\n\t        self.checkpointer = Checkpointer(\n\t            self.model,\n\t            save_dir=cfg.OUTPUT_DIR,\n\t            save_to_disk=True\n\t        )\n\t        if len(cfg.MODEL.WEIGHT_PATH) > 0:\n\t            # only use this for vtab in-domain experiments\n\t            checkpointables = [key for key in self.checkpointer.checkpointables if key not in [\"head.last_layer.bias\",  \"head.last_layer.weight\"]]\n\t            self.checkpointer.load(cfg.MODEL.WEIGHT_PATH, checkpointables)\n", "            logger.info(f\"Model weight loaded from {cfg.MODEL.WEIGHT_PATH}\")\n\t        self.evaluator = evaluator\n\t        self.cpu_device = torch.device(\"cpu\")\n\t    def forward_one_batch(self, inputs, targets, is_train):\n\t        \"\"\"Train a single (full) epoch on the model using the given\n\t        data loader.\n\t        Args:\n\t            X: input dict\n\t            targets\n\t            is_train: bool\n", "        Returns:\n\t            loss\n\t            outputs: output logits\n\t        \"\"\"\n\t        # move data to device\n\t        inputs = inputs.to(self.device, non_blocking=True)    # (batchsize, 2048)\n\t        targets = targets.to(self.device, non_blocking=True)  # (batchsize, )\n\t        if self.cfg.DBG:\n\t            logger.info(f\"shape of inputs: {inputs.shape}\")\n\t            logger.info(f\"shape of targets: {targets.shape}\")\n", "        # forward\n\t        with torch.set_grad_enabled(is_train):\n\t            outputs = self.model(inputs)  # (batchsize, num_cls)\n\t            if self.cfg.DBG:\n\t                logger.info(\n\t                    \"shape of model output: {}, targets: {}\".format(\n\t                        outputs.shape, targets.shape))\n\t            if self.cls_criterion.is_local() and is_train:\n\t                self.model.eval()\n\t                loss = self.cls_criterion(\n", "                    outputs, targets, self.cls_weights,\n\t                    self.model, inputs\n\t                )\n\t            elif self.cls_criterion.is_local():\n\t                return torch.tensor(1), outputs\n\t            else:\n\t                loss = self.cls_criterion(\n\t                    outputs, targets, self.cls_weights)\n\t            if loss == float('inf'):\n\t                logger.info(\n", "                    \"encountered infinite loss, skip gradient updating for this batch!\"\n\t                )\n\t                return -1, -1\n\t            elif torch.isnan(loss).any():\n\t                logger.info(\n\t                    \"encountered nan loss, skip gradient updating for this batch!\"\n\t                )\n\t                return -1, -1\n\t        # =======backward and optim step only if in training phase... =========\n\t        if is_train:\n", "            self.optimizer.zero_grad()\n\t            loss.backward()\n\t            self.optimizer.step()\n\t        return loss, outputs\n\t    def get_input(self, data):\n\t        if not isinstance(data[\"image\"], torch.Tensor):\n\t            for k, v in data.items():\n\t                data[k] = torch.from_numpy(v)\n\t        inputs = data[\"image\"].float()\n\t        labels = data[\"label\"]\n", "        return inputs, labels\n\t    def train_classifier(self, train_loader, val_loader, test_loader):\n\t        \"\"\"\n\t        Train a classifier using epoch\n\t        \"\"\"\n\t        # save the model prompt if required before training\n\t        self.model.eval()\n\t        # self.save_prompt(0)\n\t        # setup training epoch params\n\t        total_epoch = self.cfg.SOLVER.TOTAL_EPOCH\n", "        total_data = len(train_loader)\n\t        best_epoch = -1\n\t        best_metric = 0\n\t        log_interval = self.cfg.SOLVER.LOG_EVERY_N\n\t        losses = AverageMeter('Loss', ':.4e')\n\t        batch_time = AverageMeter('Time', ':6.3f')\n\t        data_time = AverageMeter('Data', ':6.3f')\n\t        self.cls_weights = train_loader.dataset.get_class_weights(\n\t            self.cfg.DATA.CLASS_WEIGHTS_TYPE)\n\t        # logger.info(f\"class weights: {self.cls_weights}\")\n", "        patience = 0  # if > self.cfg.SOLVER.PATIENCE, stop training\n\t        for epoch in range(total_epoch):\n\t            losses.reset()\n\t            batch_time.reset()\n\t            data_time.reset()\n\t            lr = self.scheduler.get_lr()[0]\n\t            logger.info(\n\t                \"Training {} / {} epoch, with learning rate {}\".format(\n\t                    epoch + 1, total_epoch, lr\n\t                )\n", "            )\n\t            # Enable training mode\n\t            self.model.train()\n\t            end = time.time()\n\t            for idx, input_data in enumerate(train_loader):\n\t                if self.cfg.DBG and idx == 20:\n\t                    # if debugging, only need to see the first few iterations\n\t                    break\n\t                X, targets = self.get_input(input_data)\n\t                # logger.info(X.shape)\n", "                # logger.info(targets.shape)\n\t                # measure data loading time\n\t                data_time.update(time.time() - end)\n\t                train_loss, _ = self.forward_one_batch(X, targets, True)\n\t                if train_loss == -1:\n\t                    # continue\n\t                    return None\n\t                losses.update(train_loss.item(), X.shape[0])\n\t                # measure elapsed time\n\t                batch_time.update(time.time() - end)\n", "                end = time.time()\n\t                # log during one batch\n\t                if (idx + 1) % log_interval == 0:\n\t                    seconds_per_batch = batch_time.val\n\t                    eta = datetime.timedelta(seconds=int(\n\t                        seconds_per_batch * (total_data - idx - 1) + seconds_per_batch*total_data*(total_epoch-epoch-1)))\n\t                    logger.info(\n\t                        \"\\tTraining {}/{}. train loss: {:.4f},\".format(\n\t                            idx + 1,\n\t                            total_data,\n", "                            train_loss\n\t                        )\n\t                        + \"\\t{:.4f} s / batch. (data: {:.2e}). ETA={}, \".format(\n\t                            seconds_per_batch,\n\t                            data_time.val,\n\t                            str(eta),\n\t                        )\n\t                        + \"max mem: {:.1f} GB \".format(gpu_mem_usage())\n\t                    )\n\t            logger.info(\n", "                \"Epoch {} / {}: \".format(epoch + 1, total_epoch)\n\t                + \"avg data time: {:.2e}, avg batch time: {:.4f}, \".format(\n\t                    data_time.avg, batch_time.avg)\n\t                + \"average train loss: {:.4f}\".format(losses.avg))\n\t            # update lr, scheduler.step() must be called after optimizer.step() according to the docs: https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate  # noqa\n\t            self.scheduler.step()\n\t            # Enable eval mode\n\t            self.model.eval()\n\t            self.save_prompt(epoch + 1)\n\t            # eval at each epoch for single gpu training\n", "            self.evaluator.update_iteration(epoch)\n\t            self.eval_classifier(val_loader, \"val\", epoch == total_epoch - 1)\n\t            if test_loader is not None:\n\t                self.eval_classifier(\n\t                    test_loader, \"test\", epoch == total_epoch - 1)\n\t            # check the patience\n\t            t_name = \"val_\" + val_loader.dataset.name\n\t            try:\n\t                curr_acc = self.evaluator.results[f\"epoch_{epoch}\"][\"classification\"][t_name][\"top1\"]\n\t            except KeyError:\n", "                return\n\t            if curr_acc > best_metric:\n\t                best_metric = curr_acc\n\t                best_epoch = epoch + 1\n\t                logger.info(\n\t                    f'Best epoch {best_epoch}: best metric: {best_metric:.3f}')\n\t                patience = 0\n\t            else:\n\t                patience += 1\n\t            if patience >= self.cfg.SOLVER.PATIENCE:\n", "                logger.info(\"No improvement. Breaking out of loop.\")\n\t                break\n\t        # save the last checkpoints\n\t        if self.cfg.MODEL.SAVE_CKPT:\n\t            Checkpointer(\n\t                self.model,\n\t                save_dir=self.cfg.OUTPUT_DIR,\n\t                save_to_disk=True\n\t            ).save(\"last_model\")\n\t    @torch.no_grad()\n", "    def save_prompt(self, epoch):\n\t        # only save the prompt embed if below conditions are satisfied\n\t        if self.cfg.MODEL.PROMPT.SAVE_FOR_EACH_EPOCH:\n\t            if self.cfg.MODEL.TYPE in [\"vit\", \"ssl-vit\"] and \"prompt\" in self.cfg.MODEL.TRANSFER_TYPE:\n\t                prompt_embds = self.model.prompt_embeddings.cpu().numpy()\n\t                out = {\"shallow_prompt\": prompt_embds}\n\t                if self.cfg.MODEL.PROMPT.DEEP:\n\t                    deep_embds = self.model.enc.transformer.deep_prompt_embeddings.cpu().numpy()\n\t                    out[\"deep_prompt\"] = deep_embds\n\t                torch.save(out, os.path.join(\n", "                    self.cfg.OUTPUT_DIR, f\"prompt_ep{epoch}.pth\"))\n\t    @torch.no_grad()\n\t    def eval_classifier(self, data_loader, prefix, save=False):\n\t        \"\"\"evaluate classifier\"\"\"\n\t        batch_time = AverageMeter('Time', ':6.3f')\n\t        data_time = AverageMeter('Data', ':6.3f')\n\t        losses = AverageMeter('Loss', ':.4e')\n\t        log_interval = self.cfg.SOLVER.LOG_EVERY_N\n\t        test_name = prefix + \"_\" + data_loader.dataset.name\n\t        total = len(data_loader)\n", "        # initialize features and target\n\t        total_logits = []\n\t        total_targets = []\n\t        for idx, input_data in enumerate(data_loader):\n\t            end = time.time()\n\t            X, targets = self.get_input(input_data)\n\t            # measure data loading time\n\t            data_time.update(time.time() - end)\n\t            if self.cfg.DBG:\n\t                logger.info(\"during eval: {}\".format(X.shape))\n", "            loss, outputs = self.forward_one_batch(X, targets, False)\n\t            if loss == -1:\n\t                return\n\t            losses.update(loss, X.shape[0])\n\t            # measure elapsed time\n\t            batch_time.update(time.time() - end)\n\t            if (idx + 1) % log_interval == 0:\n\t                logger.info(\n\t                    \"\\tTest {}/{}. loss: {:.3f}, {:.4f} s / batch. (data: {:.2e})\".format(  # noqa\n\t                        idx + 1,\n", "                        total,\n\t                        losses.val,\n\t                        batch_time.val,\n\t                        data_time.val\n\t                    ) + \"max mem: {:.5f} GB \".format(gpu_mem_usage())\n\t                )\n\t            # targets: List[int]\n\t            total_targets.extend(list(targets.numpy()))\n\t            total_logits.append(outputs)\n\t        logger.info(\n", "            f\"Inference ({prefix}):\"\n\t            + \"avg data time: {:.2e}, avg batch time: {:.4f}, \".format(\n\t                data_time.avg, batch_time.avg)\n\t            + \"average loss: {:.4f}\".format(losses.avg))\n\t        if self.model.side is not None:\n\t            logger.info(\n\t                \"--> side tuning alpha = {:.4f}\".format(self.model.side_alpha))\n\t        # total_testimages x num_classes\n\t        joint_logits = torch.cat(total_logits, dim=0).cpu().numpy()\n\t        self.evaluator.classify(\n", "            joint_logits, total_targets,\n\t            test_name, self.cfg.DATA.MULTILABEL,\n\t        )\n\t        # save the probs and targets\n\t        if save and self.cfg.MODEL.SAVE_CKPT:\n\t            out = {\"targets\": total_targets, \"joint_logits\": joint_logits}\n\t            out_path = os.path.join(\n\t                self.cfg.OUTPUT_DIR, f\"{test_name}_logits.pth\")\n\t            torch.save(out, out_path)\n\t            logger.info(\n", "                f\"Saved logits and targets for {test_name} at {out_path}\")\n"]}
{"filename": "src/engine/evaluator.py", "chunked_list": ["#!/usr/bin/env python3\n\timport numpy as np\n\tfrom collections import defaultdict\n\tfrom typing import List, Union\n\tfrom .eval import multilabel\n\tfrom .eval import singlelabel\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass Evaluator():\n\t    \"\"\"\n", "    An evaluator with below logics:\n\t    1. find which eval module to use.\n\t    2. store the eval results, pretty print it in log file as well.\n\t    \"\"\"\n\t    def __init__(\n\t        self,\n\t    ) -> None:\n\t        self.results = defaultdict(dict)\n\t        self.iteration = -1\n\t        self.threshold_end = 0.5\n", "    def update_iteration(self, iteration: int) -> None:\n\t        \"\"\"update iteration info\"\"\"\n\t        self.iteration = iteration\n\t    def update_result(self, metric: str, value: Union[float, dict]) -> None:\n\t        if self.iteration > -1:\n\t            key_name = \"epoch_\" + str(self.iteration)\n\t        else:\n\t            key_name = \"final\"\n\t        if isinstance(value, float):\n\t            self.results[key_name].update({metric: value})\n", "        else:\n\t            if metric in self.results[key_name]:\n\t                self.results[key_name][metric].update(value)\n\t            else:\n\t                self.results[key_name].update({metric: value})\n\t    def classify(self, probs, targets, test_data, multilabel=False):\n\t        \"\"\"\n\t        Evaluate classification result.\n\t        Args:\n\t            probs: np.ndarray for num_data x num_class, predicted probabilities\n", "            targets: np.ndarray for multilabel, list of integers for single label\n\t            test_labels:  map test image ids to a list of class labels\n\t        \"\"\"\n\t        if not targets:\n\t            raise ValueError(\n\t                \"When evaluating classification, need at least give targets\")\n\t        if multilabel:\n\t            self._eval_multilabel(probs, targets, test_data)\n\t        else:\n\t            self._eval_singlelabel(probs, targets, test_data)\n", "    def _eval_singlelabel(\n\t        self,\n\t        scores: np.ndarray,\n\t        targets: List[int],\n\t        eval_type: str\n\t    ) -> None:\n\t        \"\"\"\n\t        if number of labels > 2:\n\t            top1 and topk (5 by default) accuracy\n\t        if number of labels == 2:\n", "            top1 and rocauc\n\t        \"\"\"\n\t        acc_dict = singlelabel.compute_acc_auc(scores, targets)\n\t        log_results = {\n\t            k: np.around(v * 100, decimals=2) for k, v in acc_dict.items()\n\t        }\n\t        save_results = acc_dict\n\t        self.log_and_update(log_results, save_results, eval_type)\n\t    def _eval_multilabel(\n\t        self,\n", "        scores: np.ndarray,\n\t        targets: np.ndarray,\n\t        eval_type: str\n\t    ) -> None:\n\t        num_labels = scores.shape[-1]\n\t        targets = multilabel.multihot(targets, num_labels)\n\t        log_results = {}\n\t        ap, ar, mAP, mAR = multilabel.compute_map(scores, targets)\n\t        f1_dict = multilabel.get_best_f1_scores(\n\t            targets, scores, self.threshold_end)\n", "        log_results[\"mAP\"] = np.around(mAP * 100, decimals=2)\n\t        log_results[\"mAR\"] = np.around(mAR * 100, decimals=2)\n\t        log_results.update({\n\t            k: np.around(v * 100, decimals=2) for k, v in f1_dict.items()})\n\t        save_results = {\n\t            \"ap\": ap, \"ar\": ar, \"mAP\": mAP, \"mAR\": mAR, \"f1\": f1_dict\n\t        }\n\t        self.log_and_update(log_results, save_results, eval_type)\n\t    def log_and_update(self, log_results, save_results, eval_type):\n\t        log_str = \"\"\n", "        for k, result in log_results.items():\n\t            if not isinstance(result, np.ndarray):\n\t                log_str += f\"{k}: {result:.2f}\\t\"\n\t            else:\n\t                log_str += f\"{k}: {list(result)}\\t\"\n\t        logger.info(f\"Classification results with {eval_type}: {log_str}\")\n\t        # save everything\n\t        self.update_result(\"classification\", {eval_type: save_results})\n"]}
{"filename": "src/engine/eval/multilabel.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tevaluate precision@1, @5 equal to Top1 and Top5 error rate\n\t\"\"\"\n\timport numpy as np\n\tfrom typing import List, Tuple, Dict\n\tfrom sklearn.metrics import (\n\t    precision_recall_curve,\n\t    average_precision_score,\n\t    f1_score\n", ")\n\tdef get_continuous_ids(probe_labels: List[int]) -> Dict[int, int]:\n\t    sorted(probe_labels)\n\t    id2continuousid = {}\n\t    for idx, p_id in enumerate(probe_labels):\n\t        id2continuousid[p_id] = idx\n\t    return id2continuousid\n\tdef multihot(x: List[List[int]], nb_classes: int) -> np.ndarray:\n\t    \"\"\"transform to multihot encoding\n\t    Arguments:\n", "        x: list of multi-class integer labels, in the range\n\t            [0, nb_classes-1]\n\t        nb_classes: number of classes for the multi-hot vector\n\t    Returns:\n\t        multihot: multihot vector of type int, (num_samples, nb_classes)\n\t    \"\"\"\n\t    num_samples = len(x)\n\t    multihot = np.zeros((num_samples, nb_classes), dtype=np.int32)\n\t    for idx, labs in enumerate(x):\n\t        for lab in labs:\n", "            multihot[idx, lab] = 1\n\t    return multihot.astype(np.int)\n\tdef compute_map(\n\t        scores: np.ndarray, multihot_targets: np.ndarray\n\t) -> Tuple[np.ndarray, np.ndarray, float, float]:\n\t    \"\"\"Compute the mean average precision across all class labels.\n\t    Arguments:\n\t        scores: matrix of per-class distances,\n\t            of size num_samples x nb_classes\n\t        multihot_targets: matrix of multi-hot target predictions,\n", "            of size num_samples x nb_classes\n\t    Returns:\n\t        ap: list of average-precision scores, one for each of\n\t            the nb_classes classes.\n\t        ar: list of average-recall scores, one for each of\n\t            the nb_classes classes.\n\t        mAP: the mean average precision score over all average\n\t            precisions for all nb_classes classes.\n\t        mAR: the mean average recall score over all average\n\t            precisions for all nb_classes classes.\n", "    \"\"\"\n\t    nb_classes = scores.shape[1]\n\t    ap = np.zeros((nb_classes,), dtype=np.float32)\n\t    ar = np.zeros((nb_classes,), dtype=np.float32)\n\t    for c in range(nb_classes):\n\t        y_true = multihot_targets[:, c]\n\t        y_scores = scores[:, c]\n\t        # Use interpolated average precision (a la PASCAL\n\t        try:\n\t            ap[c] = average_precision_score(y_true, y_scores)\n", "        except ValueError:\n\t            ap[c] = -1\n\t        # Also get the average of the recalls on the raw PR-curve\n\t        try:\n\t            _, rec, _ = precision_recall_curve(y_true, y_scores)\n\t            ar[c] = rec.mean()\n\t        except ValueError:\n\t            ar[c] = -1\n\t    mAP = ap.mean()\n\t    mAR = ar.mean()\n", "    return ap, ar, mAP, mAR\n\tdef compute_f1(\n\t        multihot_targets: np.ndarray, scores: np.ndarray, threshold: float = 0.5\n\t) -> Tuple[float, float, float]:\n\t    # change scores to predict_labels\n\t    predict_labels = scores > threshold\n\t    predict_labels = predict_labels.astype(np.int)\n\t    # change targets to multihot\n\t    f1 = {}\n\t    f1[\"micro\"] = f1_score(\n", "        y_true=multihot_targets,\n\t        y_pred=predict_labels,\n\t        average=\"micro\"\n\t    )\n\t    f1[\"samples\"] = f1_score(\n\t        y_true=multihot_targets,\n\t        y_pred=predict_labels,\n\t        average=\"samples\"\n\t    )\n\t    f1[\"macro\"] = f1_score(\n", "        y_true=multihot_targets,\n\t        y_pred=predict_labels,\n\t        average=\"macro\"\n\t    )\n\t    f1[\"none\"] = f1_score(\n\t        y_true=multihot_targets,\n\t        y_pred=predict_labels,\n\t        average=None\n\t    )\n\t    return f1[\"micro\"], f1[\"samples\"], f1[\"macro\"], f1[\"none\"]\n", "def get_best_f1_scores(\n\t    multihot_targets: np.ndarray, scores: np.ndarray, threshold_end: int\n\t) -> Dict[str, float]:\n\t    end = 0.5\n\t    end = 0.05\n\t    end = threshold_end\n\t    thrs = np.linspace(\n\t        end, 0.95, int(np.round((0.95 - end) / 0.05)) + 1, endpoint=True\n\t    )\n\t    f1_micros = []\n", "    f1_macros = []\n\t    f1_samples = []\n\t    f1_none = []\n\t    for thr in thrs:\n\t        _micros, _samples, _macros, _none = compute_f1(multihot_targets, scores, thr)\n\t        f1_micros.append(_micros)\n\t        f1_samples.append(_samples)\n\t        f1_macros.append(_macros)\n\t        f1_none.append(_none)\n\t    f1_macros_m = max(f1_macros)\n", "    b_thr = np.argmax(f1_macros)\n\t    f1_micros_m = f1_micros[b_thr]\n\t    f1_samples_m = f1_samples[b_thr]\n\t    f1_none_m = f1_none[b_thr]\n\t    f1 = {}\n\t    f1[\"micro\"] = f1_micros_m\n\t    f1[\"macro\"] = f1_macros_m\n\t    f1[\"samples\"] = f1_samples_m\n\t    f1[\"threshold\"] = thrs[b_thr]\n\t    f1[\"none\"] = f1_none_m\n", "    return f1\n"]}
{"filename": "src/engine/eval/singlelabel.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"Functions for computing metrics. all metrics has range of 0-1\"\"\"\n\timport numpy as np\n\timport torch\n\tfrom sklearn.metrics import (\n\t    accuracy_score, average_precision_score, f1_score, roc_auc_score\n\t)\n\tdef accuracy(y_probs, y_true):\n\t    # y_prob: (num_images, num_classes)\n\t    y_preds = np.argmax(y_probs, axis=1)\n", "    accuracy = accuracy_score(y_true, y_preds)\n\t    error = 1.0 - accuracy\n\t    return accuracy, error\n\tdef top_n_accuracy(y_probs, truths, n=1):\n\t    # y_prob: (num_images, num_classes)\n\t    # truth: (num_images, num_classes) multi/one-hot encoding\n\t    best_n = np.argsort(y_probs, axis=1)[:, -n:]\n\t    if isinstance(truths, np.ndarray) and truths.shape == y_probs.shape:\n\t        ts = np.argmax(truths, axis=1)\n\t    else:\n", "        # a list of GT class idx\n\t        ts = truths\n\t    num_input = y_probs.shape[0]\n\t    successes = 0\n\t    for i in range(num_input):\n\t        if ts[i] in best_n[i, :]:\n\t            successes += 1\n\t    return float(successes) / num_input\n\tdef compute_acc_auc(y_probs, y_true_ids):\n\t    onehot_tgts = np.zeros_like(y_probs)\n", "    for idx, t in enumerate(y_true_ids):\n\t        onehot_tgts[idx, t] = 1.\n\t    num_classes = y_probs.shape[1]\n\t    if num_classes == 2:\n\t        top1, _ = accuracy(y_probs, y_true_ids)\n\t        # so precision can set all to 2\n\t        try:\n\t            auc = roc_auc_score(onehot_tgts, y_probs, average='macro')\n\t        except ValueError as e:\n\t            print(f\"value error encountered {e}, set auc sccore to -1.\")\n", "            auc = -1\n\t        return {\"top1\": top1, \"rocauc\": auc}\n\t    top1, _ = accuracy(y_probs, y_true_ids)\n\t    k = min([5, num_classes])  # if number of labels < 5, use the total class\n\t    top5 = top_n_accuracy(y_probs, y_true_ids, k)\n\t    return {\"top1\": top1, f\"top{k}\": top5}\n\tdef topks_correct(preds, labels, ks):\n\t    \"\"\"Computes the number of top-k correct predictions for each k.\"\"\"\n\t    assert preds.size(0) == labels.size(\n\t        0\n", "    ), \"Batch dim of predictions and labels must match\"\n\t    # Find the top max_k predictions for each sample\n\t    _top_max_k_vals, top_max_k_inds = torch.topk(\n\t        preds, max(ks), dim=1, largest=True, sorted=True\n\t    )\n\t    # (batch_size, max_k) -> (max_k, batch_size)\n\t    top_max_k_inds = top_max_k_inds.t()\n\t    # (batch_size, ) -> (max_k, batch_size)\n\t    rep_max_k_labels = labels.view(1, -1).expand_as(top_max_k_inds)\n\t    # (i, j) = 1 if top i-th prediction for the j-th sample is correct\n", "    top_max_k_correct = top_max_k_inds.eq(rep_max_k_labels)\n\t    # Compute the number of topk correct predictions for each k\n\t    topks_correct = [\n\t        top_max_k_correct[:k, :].reshape(-1).float().sum() for k in ks\n\t    ]\n\t    return topks_correct\n\tdef topk_errors(preds, labels, ks):\n\t    \"\"\"Computes the top-k error for each k.\"\"\"\n\t    if int(labels.min()) < 0:  # has ignore\n\t        keep_ids = np.where(labels.cpu() >= 0)[0]\n", "        preds = preds[keep_ids, :]\n\t        labels = labels[keep_ids]\n\t    num_topks_correct = topks_correct(preds, labels, ks)\n\t    return [(1.0 - x / preds.size(0)) for x in num_topks_correct]\n\tdef topk_accuracies(preds, labels, ks):\n\t    \"\"\"Computes the top-k accuracy for each k.\"\"\"\n\t    num_topks_correct = topks_correct(preds, labels, ks)\n\t    return [(x / preds.size(0)) for x in num_topks_correct]\n"]}
{"filename": "src/models/mlp.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tModified from: fbcode/multimo/models/encoders/mlp.py\n\t\"\"\"\n\timport math\n\timport torch\n\tfrom torch import nn\n\tfrom typing import List, Type\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n", "class MLP(nn.Module):\n\t    def __init__(\n\t        self,\n\t        input_dim: int,\n\t        mlp_dims: List[int],\n\t        dropout: float = 0.1,\n\t        nonlinearity: Type[nn.Module] = nn.ReLU,\n\t        normalization: Type[nn.Module] = nn.BatchNorm1d,  # nn.LayerNorm,\n\t        special_bias: bool = False,\n\t        add_bn_first: bool = False,\n", "    ):\n\t        super(MLP, self).__init__()\n\t        projection_prev_dim = input_dim\n\t        projection_modulelist = []\n\t        last_dim = mlp_dims[-1]\n\t        mlp_dims = mlp_dims[:-1]\n\t        if add_bn_first:\n\t            if normalization is not None:\n\t                projection_modulelist.append(normalization(projection_prev_dim))\n\t            if dropout != 0:\n", "                projection_modulelist.append(nn.Dropout(dropout))\n\t        for idx, mlp_dim in enumerate(mlp_dims):\n\t            fc_layer = nn.Linear(projection_prev_dim, mlp_dim)\n\t            nn.init.kaiming_normal_(fc_layer.weight, a=0, mode='fan_out')\n\t            projection_modulelist.append(fc_layer)\n\t            projection_modulelist.append(nonlinearity())\n\t            if normalization is not None:\n\t                projection_modulelist.append(normalization(mlp_dim))\n\t            if dropout != 0:\n\t                projection_modulelist.append(nn.Dropout(dropout))\n", "            projection_prev_dim = mlp_dim\n\t        self.projection = nn.Sequential(*projection_modulelist)\n\t        self.last_layer = nn.Linear(projection_prev_dim, last_dim)\n\t        nn.init.kaiming_normal_(self.last_layer.weight, a=0, mode='fan_out')\n\t        if special_bias:\n\t            prior_prob = 0.01\n\t            bias_value = -math.log((1 - prior_prob) / prior_prob)\n\t            torch.nn.init.constant_(self.last_layer.bias, bias_value)\n\t    def forward(self, x: torch.Tensor) -> torch.Tensor:\n\t        \"\"\"\n", "        input_arguments:\n\t            @x: torch.FloatTensor\n\t        \"\"\"\n\t        x = self.projection(x)\n\t        x = self.last_layer(x)\n\t        return x\n"]}
{"filename": "src/models/build_vit_backbone.py", "chunked_list": ["#!/usr/bin/env python3\n\timport numpy as np\n\timport torch\n\timport os\n\tfrom .vit_backbones.vit_moco import vit_base as moco_vit_model\n\tfrom .vit_backbones.vit_mae import build_model as mae_vit_model\n\tfrom .vit_prompt.vit_moco import build_model as prompt_moco_vit\n\tfrom .vit_prompt.vit_mae import build_model as prompt_mae_vit\n\tMODEL_ZOO = {\n\t    \"mae_vitb16\": \"mae-ViT-B.pth\",\n", "    \"mae_vitl16\": \"mae-ViT-L.pth\",\n\t    \"mocov3_vitb16\" : \"mocov3-ViT-B.pth.tar\",\n\t    \"mocov3_vits16\" : \"mocov3-ViT-S.pth.tar\",\n\t}\n\tdef build_mae_model(\n\t    model_type, crop_size, prompt_cfg, model_root, adapter_cfg=None\n\t):  \n\t    if not model_type in [\"mae_vitb16\", \"mae_vitl16\"]:\n\t        raise ValueError(\"Does not support other arch\")\n\t    if prompt_cfg is not None:\n", "        model = prompt_mae_vit(model_type, prompt_cfg)\n\t    else:\n\t        model = mae_vit_model(model_type)\n\t    out_dim = model.embed_dim\n\t    ckpt = os.path.join(model_root, MODEL_ZOO[model_type])\n\t    checkpoint = torch.load(ckpt, map_location=\"cpu\")\n\t    state_dict = checkpoint['model']\n\t    msg = model.load_state_dict(state_dict, strict=False)\n\t    print(msg)\n\t    model.head = torch.nn.Identity()\n", "    return model, out_dim\n\tdef build_mocov3_model(\n\t    model_type, crop_size, prompt_cfg, model_root, adapter_cfg=None\n\t):\n\t    if not model_type in [\"mocov3_vitb16\", \"mocov3_vits16\"]:\n\t        raise ValueError(\"Does not support other arch\")\n\t    if prompt_cfg is not None:\n\t        model = prompt_moco_vit(model_type, prompt_cfg)\n\t    else:\n\t        model = moco_vit_model()\n", "    out_dim = 384 if model_type.endswith('s16') else 768\n\t    ckpt = os.path.join(model_root, MODEL_ZOO[model_type])\n\t    checkpoint = torch.load(ckpt, map_location=\"cpu\")\n\t    state_dict = checkpoint['state_dict']\n\t    for k in list(state_dict.keys()):\n\t        # retain only base_encoder up to before the embedding layer\n\t        if k.startswith('module.'):\n\t            # remove prefix\n\t            key = k.replace('module.', '')\n\t            if key.startswith('base_encoder.'):\n", "                key = key.replace('base_encoder.', '')\n\t            elif key.startswith('momentum'):\n\t                del state_dict[k]\n\t                continue\n\t            state_dict[key] = state_dict[k]\n\t        # delete renamed or unused k\n\t        del state_dict[k]\n\t    msg = model.load_state_dict(state_dict, strict=False)\n\t    print(msg)\n\t    model.head = torch.nn.Identity()\n", "    return model, out_dim\n"]}
{"filename": "src/models/vit_models.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tViT-related models\n\tNote: models return logits instead of prob\n\t\"\"\"\n\timport torch\n\timport torch.nn as nn\n\tfrom collections import OrderedDict\n\tfrom torchvision import models\n\tfrom .build_vit_backbone import (\n", "    build_mocov3_model, build_mae_model,\n\t)\n\tfrom .mlp import MLP\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass SSLViT(nn.Module):\n\t    \"\"\"moco-v3 and mae model.\"\"\"\n\t    def __init__(self, cfg):\n\t        super(SSLViT, self).__init__()\n\t        if \"prompt\" in cfg.MODEL.TRANSFER_TYPE:\n", "                prompt_cfg = cfg.MODEL.PROMPT\n\t        else:\n\t            prompt_cfg = None\n\t        if cfg.MODEL.TRANSFER_TYPE != \"end2end\" and \"prompt\" not in cfg.MODEL.TRANSFER_TYPE:\n\t            # linear, cls, tiny-tl, parital, adapter\n\t            self.froze_enc = True\n\t        else:\n\t            # prompt, end2end, cls+prompt\n\t            self.froze_enc = False\n\t        if cfg.MODEL.TRANSFER_TYPE == \"adapter\":\n", "            adapter_cfg = cfg.MODEL.ADAPTER\n\t        else:\n\t            adapter_cfg = None\n\t        self.build_backbone(\n\t            prompt_cfg, cfg, adapter_cfg)\n\t        self.cfg = cfg\n\t        self.setup_side()\n\t        self.setup_head(cfg)\n\t    def setup_side(self):\n\t        if self.cfg.MODEL.TRANSFER_TYPE != \"side\":\n", "            self.side = None\n\t        else:\n\t            self.side_alpha = nn.Parameter(torch.tensor(0.0))\n\t            m = models.alexnet(pretrained=True)\n\t            self.side = nn.Sequential(OrderedDict([\n\t                (\"features\", m.features),\n\t                (\"avgpool\", m.avgpool),\n\t            ]))\n\t            self.side_projection = nn.Linear(9216, self.feat_dim, bias=False)\n\t    def setup_head(self, cfg):\n", "        self.head = MLP(\n\t            input_dim=self.feat_dim,\n\t            mlp_dims=[self.feat_dim] * self.cfg.MODEL.MLP_NUM + \\\n\t                [cfg.DATA.NUMBER_CLASSES], # noqa\n\t            special_bias=True\n\t        )\n\t    def build_backbone(self, prompt_cfg, cfg, adapter_cfg):\n\t        if \"moco\" in cfg.DATA.FEATURE:\n\t            build_fn = build_mocov3_model\n\t        elif \"mae\" in cfg.DATA.FEATURE:\n", "            build_fn = build_mae_model\n\t        self.enc, self.feat_dim = build_fn(\n\t            cfg.DATA.FEATURE, cfg.DATA.CROPSIZE,\n\t            prompt_cfg, cfg.MODEL.MODEL_ROOT, adapter_cfg=adapter_cfg\n\t        )\n\t        transfer_type = cfg.MODEL.TRANSFER_TYPE\n\t        # linear, prompt, cls, cls+prompt, partial_1\n\t        if transfer_type == \"partial-1\":\n\t            total_layer = len(self.enc.blocks)\n\t            for k, p in self.enc.named_parameters():\n", "                if \"blocks.{}\".format(total_layer - 1) not in k and \"fc_norm\" not in k and k != \"norm\": # noqa\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"partial-2\":\n\t            total_layer = len(self.enc.blocks)\n\t            for k, p in self.enc.named_parameters():\n\t                if \"blocks.{}\".format(total_layer - 1) not in k and \"blocks.{}\".format(total_layer - 2) not in k and \"fc_norm\" not in k and k != \"norm\": # noqa\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"partial-4\":\n\t            total_layer = len(self.enc.blocks)\n\t            for k, p in self.enc.named_parameters():\n", "                if \"blocks.{}\".format(total_layer - 1) not in k and \"blocks.{}\".format(total_layer - 2) not in k and \"blocks.{}\".format(total_layer - 3) not in k and \"blocks.{}\".format(total_layer - 4) not in k and \"fc_norm\" not in k and k != \"norm\": # noqa\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"linear\" or transfer_type == \"sidetune\":\n\t            for k, p in self.enc.named_parameters():\n\t                p.requires_grad = False\n\t        elif transfer_type == \"tinytl-bias\":\n\t            for k, p in self.enc.named_parameters():\n\t                if 'bias' not in k:\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"prompt+bias\":\n", "            for k, p in self.enc.named_parameters():\n\t                if \"prompt\" not in k and 'bias' not in k:\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"prompt\" and prompt_cfg.LOCATION == \"below\":\n\t            for k, p in self.enc.named_parameters():\n\t                if \"prompt\" not in k and \"patch_embed.proj.weight\" not in k  and \"patch_embed.proj.bias\" not in k:\n\t                    p.requires_grad = False\n\t        elif transfer_type == \"prompt\":\n\t            for k, p in self.enc.named_parameters():\n\t                if \"prompt\" not in k:\n", "                    p.requires_grad = False\n\t        elif transfer_type == \"end2end\":\n\t            logger.info(\"Enable all parameters update during training\")\n\t        # adapter\n\t        elif transfer_type == \"adapter\":\n\t            for k, p in self.enc.named_parameters():\n\t                if \"adapter\" not in k:\n\t                    p.requires_grad = False\n\t        else:\n\t            raise ValueError(\"transfer type {} is not supported\".format(\n", "                transfer_type))\n\t        for k, p in self.enc.named_parameters():\n\t            if 'gate' in k:\n\t                p.requires_grad = True\n\t            if 'temp' in k:\n\t                p.requires_grad = True\n\t    def forward(self, x, return_feature=False):\n\t        if self.side is not None:\n\t            side_output = self.side(x)\n\t            side_output = side_output.view(side_output.size(0), -1)\n", "            side_output = self.side_projection(side_output)\n\t        if self.froze_enc and self.enc.training:\n\t            self.enc.eval()\n\t        x = self.enc(x)  # batch_size x self.feat_dim\n\t        if self.side is not None:\n\t            alpha_squashed = torch.sigmoid(self.side_alpha)\n\t            x = alpha_squashed * x + (1 - alpha_squashed) * side_output\n\t        if return_feature:\n\t            return x, x\n\t        x = self.head(x)\n", "        return x\n\t    def forward_cls_layerwise(self, x):\n\t        cls_embeds = self.enc.forward_cls_layerwise(x)\n\t        return cls_embeds\n\t    def get_features(self, x):\n\t        \"\"\"get a (batch_size, self.feat_dim) feature\"\"\"\n\t        x = self.enc(x)  # batch_size x self.feat_dim\n\t        return x\n"]}
{"filename": "src/models/build_model.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tModel construction functions.\n\t\"\"\"\n\tfrom tabnanny import verbose\n\timport torch\n\tfrom .vit_models import SSLViT\n\tfrom ..utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\t# Supported model types\n", "_MODEL_TYPES = {\n\t    \"ssl-vit\": SSLViT,\n\t}\n\tdef build_model(cfg):\n\t    \"\"\"\n\t    build model here\n\t    \"\"\"\n\t    assert (\n\t        cfg.MODEL.TYPE in _MODEL_TYPES.keys()\n\t    ), \"Model type '{}' not supported\".format(cfg.MODEL.TYPE)\n", "    assert (\n\t        cfg.NUM_GPUS <= torch.cuda.device_count()\n\t    ), \"Cannot use more GPU devices than available\"\n\t    # Construct the model\n\t    train_type = cfg.MODEL.TYPE\n\t    model = _MODEL_TYPES[train_type](cfg) \n\t    log_model_info(model, verbose=cfg.DBG)\n\t    model, device = load_model_to_device(model, cfg)\n\t    logger.info(f\"Device used for model: {device}\")\n\t    return model, device\n", "def log_model_info(model, verbose=False):\n\t    \"\"\"Logs model info\"\"\"\n\t    if verbose:\n\t        logger.info(f\"Classification Model:\\n{model}\")\n\t    model_total_params = sum(p.numel() for p in model.parameters())\n\t    model_grad_params = sum(\n\t        p.numel() for p in model.parameters() if p.requires_grad)\n\t    logger.info(\"Total Parameters: {0}\\t Gradient Parameters: {1}\".format(\n\t        model_total_params, model_grad_params))\n\t    logger.info(\"tuned percent:%.3f\"%(model_grad_params/model_total_params*100))\n", "def get_current_device():\n\t    if torch.cuda.is_available():\n\t        # Determine the GPU used by the current process\n\t        cur_device = torch.cuda.current_device()\n\t    else:\n\t        cur_device = torch.device('cpu')\n\t    return cur_device\n\tdef load_model_to_device(model, cfg):\n\t    cur_device = get_current_device()\n\t    if torch.cuda.is_available():\n", "        # Transfer the model to the current GPU device\n\t        model = model.cuda(device=cur_device)\n\t        # Use multi-process data parallel model in the multi-gpu setting\n\t        if cfg.NUM_GPUS > 1:\n\t            # Make model replica operate on the current device\n\t            model = torch.nn.parallel.DistributedDataParallel(\n\t                module=model, device_ids=[cur_device], output_device=cur_device,\n\t                find_unused_parameters=True,\n\t            )\n\t    else:\n", "        model = model.to(cur_device)\n\t    return model, cur_device\n"]}
{"filename": "src/models/vit_backbones/vit_mae.py", "chunked_list": ["#!/usr/bin/env python3\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t\"\"\"\n\tborrowed from https://github.com/facebookresearch/mae/blob/main/models_vit.py\n\t\"\"\"\n\tfrom functools import partial\n\timport torch\n\timport torch.nn as nn\n\timport timm.models.vision_transformer\n\tfrom timm.models.layers import Mlp, DropPath\n", "# based on timm Attention implementation\n\tclass Attention(nn.Module):\n\t    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.):\n\t        super().__init__()\n\t        self.num_heads = num_heads\n\t        head_dim = dim // num_heads\n\t        self.scale = head_dim ** -0.5\n\t        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)\n\t        self.attn_drop = nn.Dropout(attn_drop)\n\t        self.proj = nn.Linear(dim, dim)\n", "        self.proj_drop = nn.Dropout(proj_drop)\n\t    def forward(self, x, temp=1.0):\n\t        \"\"\" \n\t        temp = 1.0 by default or learnable scalar\n\t        \"\"\"\n\t        B, N, C = x.shape\n\t        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)\n\t        q, k, v = qkv.unbind(0)   # make torchscript happy (cannot use tensor as tuple)\n\t        attn = (q @ k.transpose(-2, -1)) * self.scale\n\t        attn = (attn / temp).softmax(dim=-1)\n", "        attn = self.attn_drop(attn)\n\t        x = (attn @ v).transpose(1, 2).reshape(B, N, C)\n\t        x = self.proj(x)\n\t        x = self.proj_drop(x)\n\t        return x\n\tclass Block(nn.Module):\n\t    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, drop=0., attn_drop=0.,\n\t                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):\n\t        super().__init__()\n\t        self.dim = dim\n", "        self.norm1 = norm_layer(dim)\n\t        self.attn = Attention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=drop)\n\t        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here\n\t        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()\n\t        self.norm2 = norm_layer(dim)\n\t        mlp_hidden_dim = int(dim * mlp_ratio)\n\t        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)\n\t    def forward(self, x, temp=1.0):\n\t        \"\"\" \n\t        temp = 1.0 by default or learnable scalar\n", "        \"\"\"\n\t        x = x + self.drop_path(self.attn(self.norm1(x), temp=temp))\n\t        x = x + self.drop_path(self.mlp(self.norm2(x)))\n\t        return x\n\tclass VisionTransformer(timm.models.vision_transformer.VisionTransformer):\n\t    \"\"\" Vision Transformer with support for global average pooling\n\t    \"\"\"\n\t    def __init__(self, global_pool=False, **kwargs):\n\t        super(VisionTransformer, self).__init__(**kwargs)\n\t        self.global_pool = global_pool\n", "        norm_layer = kwargs['norm_layer']\n\t        embed_dim = kwargs['embed_dim']\n\t        dpr = [x.item() for x in torch.linspace(0, kwargs['drop_path_rate'], kwargs['depth'])]  # stochastic depth decay rule\n\t        self.blocks = nn.Sequential(*[\n\t            Block(\n\t                dim=embed_dim, num_heads=kwargs['num_heads'], mlp_ratio=kwargs['mlp_ratio'], qkv_bias=kwargs['qkv_bias'],\n\t                drop_path=dpr[i], norm_layer=kwargs['norm_layer'])\n\t            for i in range(kwargs['depth'])])\n\t        # if pretrained_norm:\n\t        self.norm = norm_layer(embed_dim)\n", "        # self.fc_norm = norm_layer(embed_dim)\n\t    def forward_features(self, x):\n\t        B = x.shape[0]\n\t        x = self.patch_embed(x)\n\t        cls_tokens = self.cls_token.expand(B, -1, -1)  # stole cls_tokens impl from Phil Wang, thanks\n\t        x = torch.cat((cls_tokens, x), dim=1)\n\t        x = x + self.pos_embed\n\t        x = self.pos_drop(x)\n\t        for blk in self.blocks:\n\t            x, attn = blk(x)\n", "        x = x[:, 1:, :].mean(dim=1)  # global pool without cls token\n\t        outcome = self.norm(x)\n\t        return outcome\n\tdef build_model(model_type):\n\t    if \"vitb\" in model_type:\n\t        return vit_base_patch16()\n\t    elif \"vitl\" in model_type:\n\t        return vit_large_patch16()\n\t    elif \"vith\" in model_type:\n\t        return vit_huge_patch14()\n", "def vit_base_patch16(**kwargs):\n\t    model = VisionTransformer(\n\t        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n\t        patch_size=16, embed_dim=768, depth=12, num_heads=12,\n\t        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    return model\n\tdef vit_large_patch16(**kwargs):\n\t    model = VisionTransformer(\n\t        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n", "        patch_size=16, embed_dim=1024, depth=24, num_heads=16,\n\t        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    return model\n\tdef vit_huge_patch14(**kwargs):\n\t    model = VisionTransformer(\n\t        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n\t        patch_size=14, embed_dim=1280, depth=32, num_heads=16,\n\t        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n", "    return model\n"]}
{"filename": "src/models/vit_backbones/vit_moco.py", "chunked_list": ["#!/usr/bin/env python3\n\t# Copyright (c) Meta Platforms, Inc. All Rights Reserved\n\t\"\"\"\n\tborrowed from https://github.com/facebookresearch/moco-v3/blob/main/vits.py\n\t\"\"\"\n\timport math\n\timport torch\n\timport torch.nn as nn\n\tfrom functools import partial, reduce\n\tfrom operator import mul\n", "from timm.models.vision_transformer import _cfg\n\tfrom timm.models.layers.helpers import to_2tuple\n\tfrom timm.models.layers import PatchEmbed\n\tfrom .vit_mae import VisionTransformer\n\t__all__ = [\n\t    'vit_small',\n\t    'vit_base',\n\t    'vit_conv_small',\n\t    'vit_conv_base',\n\t]\n", "class VisionTransformerMoCo(VisionTransformer):\n\t    def __init__(self, stop_grad_conv1=False, **kwargs):\n\t        super().__init__(**kwargs)\n\t        # Use fixed 2D sin-cos position embedding\n\t        self.build_2d_sincos_position_embedding()\n\t        # weight initialization\n\t        for name, m in self.named_modules():\n\t            if isinstance(m, nn.Linear):\n\t                if 'qkv' in name:\n\t                    # treat the weights of Q, K, V separately\n", "                    val = math.sqrt(6. / float(m.weight.shape[0] // 3 + m.weight.shape[1]))\n\t                    nn.init.uniform_(m.weight, -val, val)\n\t                else:\n\t                    nn.init.xavier_uniform_(m.weight)\n\t                nn.init.zeros_(m.bias)\n\t        nn.init.normal_(self.cls_token, std=1e-6)\n\t        if isinstance(self.patch_embed, PatchEmbed):\n\t            # xavier_uniform initialization\n\t            val = math.sqrt(6. / float(3 * reduce(mul, self.patch_embed.patch_size, 1) + self.embed_dim))\n\t            nn.init.uniform_(self.patch_embed.proj.weight, -val, val)\n", "            nn.init.zeros_(self.patch_embed.proj.bias)\n\t            if stop_grad_conv1:\n\t                self.patch_embed.proj.weight.requires_grad = False\n\t                self.patch_embed.proj.bias.requires_grad = False\n\t    def build_2d_sincos_position_embedding(self, temperature=10000.):\n\t        h, w = self.patch_embed.grid_size\n\t        grid_w = torch.arange(w, dtype=torch.float32)\n\t        grid_h = torch.arange(h, dtype=torch.float32)\n\t        grid_w, grid_h = torch.meshgrid(grid_w, grid_h)\n\t        assert self.embed_dim % 4 == 0, 'Embed dimension must be divisible by 4 for 2D sin-cos position embedding'\n", "        pos_dim = self.embed_dim // 4\n\t        omega = torch.arange(pos_dim, dtype=torch.float32) / pos_dim\n\t        omega = 1. / (temperature**omega)\n\t        out_w = torch.einsum('m,d->md', [grid_w.flatten(), omega])\n\t        out_h = torch.einsum('m,d->md', [grid_h.flatten(), omega])\n\t        pos_emb = torch.cat([torch.sin(out_w), torch.cos(out_w), torch.sin(out_h), torch.cos(out_h)], dim=1)[None, :, :]\n\t        assert self.num_tokens == 1, 'Assuming one and only one token, [cls]'\n\t        pe_token = torch.zeros([1, 1, self.embed_dim], dtype=torch.float32)\n\t        self.pos_embed = nn.Parameter(torch.cat([pe_token, pos_emb], dim=1))\n\t        self.pos_embed.requires_grad = False\n", "class ConvStem(nn.Module):\n\t    \"\"\"\n\t    ConvStem, from Early Convolutions Help Transformers See Better, Tete et al. https://arxiv.org/abs/2106.14881\n\t    \"\"\"\n\t    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768, norm_layer=None, flatten=True):\n\t        super().__init__()\n\t        assert patch_size == 16, 'ConvStem only supports patch size of 16'\n\t        assert embed_dim % 8 == 0, 'Embed dimension must be divisible by 8 for ConvStem'\n\t        img_size = to_2tuple(img_size)\n\t        patch_size = to_2tuple(patch_size)\n", "        self.img_size = img_size\n\t        self.patch_size = patch_size\n\t        self.grid_size = (img_size[0] // patch_size[0], img_size[1] // patch_size[1])\n\t        self.num_patches = self.grid_size[0] * self.grid_size[1]\n\t        self.flatten = flatten\n\t        # build stem, similar to the design in https://arxiv.org/abs/2106.14881\n\t        stem = []\n\t        input_dim, output_dim = 3, embed_dim // 8\n\t        for l in range(4):\n\t            stem.append(nn.Conv2d(input_dim, output_dim, kernel_size=3, stride=2, padding=1, bias=False))\n", "            stem.append(nn.BatchNorm2d(output_dim))\n\t            stem.append(nn.ReLU(inplace=True))\n\t            input_dim = output_dim\n\t            output_dim *= 2\n\t        stem.append(nn.Conv2d(input_dim, embed_dim, kernel_size=1))\n\t        self.proj = nn.Sequential(*stem)\n\t        self.norm = norm_layer(embed_dim) if norm_layer else nn.Identity()\n\t    def forward(self, x):\n\t        B, C, H, W = x.shape\n\t        assert H == self.img_size[0] and W == self.img_size[1], \\\n", "            f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"\n\t        x = self.proj(x)\n\t        if self.flatten:\n\t            x = x.flatten(2).transpose(1, 2)  # BCHW -> BNC\n\t        x = self.norm(x)\n\t        return x\n\tdef vit_small(**kwargs):\n\t    model = VisionTransformerMoCo(\n\t        patch_size=16, embed_dim=384, depth=12, num_heads=12, mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n", "    model.default_cfg = _cfg()\n\t    return model\n\tdef vit_base(**kwargs):\n\t    model = VisionTransformerMoCo(\n\t        patch_size=16, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4, qkv_bias=True, drop_path_rate=0.1,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    model.default_cfg = _cfg()\n\t    return model\n\tdef vit_conv_small(**kwargs):\n\t    # minus one ViT block\n", "    model = VisionTransformerMoCo(\n\t        patch_size=16, embed_dim=384, depth=11, num_heads=12, mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), embed_layer=ConvStem, **kwargs)\n\t    model.default_cfg = _cfg()\n\t    return model\n\tdef vit_conv_base(**kwargs):\n\t    # minus one ViT block\n\t    model = VisionTransformerMoCo(\n\t        patch_size=16, embed_dim=768, depth=11, num_heads=12, mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), embed_layer=ConvStem, **kwargs)\n", "    model.default_cfg = _cfg()\n\t    return model\n"]}
{"filename": "src/models/vit_prompt/vit_mae.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tvit-moco-v3 with prompt\n\t\"\"\"\n\timport math\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\timport torchvision as tv\n\tfrom functools import partial, reduce\n", "from operator import mul\n\tfrom torch.nn import Conv2d, Dropout\n\tfrom timm.models.vision_transformer import _cfg\n\tfrom ..vit_backbones.vit_mae import VisionTransformer\n\tfrom ...utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass PromptedVisionTransformer(VisionTransformer):\n\t    def __init__(self, prompt_config, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.prompt_config = prompt_config\n", "        if self.prompt_config.DEEP and self.prompt_config.LOCATION not in [\"prepend\", ]:\n\t            raise ValueError(\"Deep-{} is not supported\".format(self.prompt_config.LOCATION))\n\t        num_tokens = self.prompt_config.NUM_TOKENS\n\t        self.num_tokens = num_tokens\n\t        self.prompt_dropout = Dropout(self.prompt_config.DROPOUT)\n\t        # define temperature for attention shaping\n\t        self.temp = self.prompt_config.TEMP\n\t        self.temp_learn = self.prompt_config.TEMP_LEARN\n\t        if self.temp_learn:\n\t            self.temp = nn.Parameter(torch.ones(prompt_config.TEMP_NUM))\n", "        # initiate prompt:\n\t        if self.prompt_config.INITIATION == \"random\":\n\t            val = math.sqrt(6. / float(3 * reduce(mul, self.patch_embed.patch_size, 1) + self.embed_dim))  # noqa\n\t            self.prompt_embeddings = nn.Parameter(torch.zeros(\n\t                1, num_tokens, self.embed_dim))\n\t            # xavier_uniform initialization\n\t            nn.init.uniform_(self.prompt_embeddings.data, -val, val)\n\t            if self.prompt_config.DEEP:\n\t                self.deep_prompt_embeddings = nn.Parameter(torch.zeros(\n\t                    len(self.blocks) - 1,\n", "                    num_tokens, self.embed_dim\n\t                ))\n\t                # xavier_uniform initialization\n\t                nn.init.uniform_(\n\t                    self.deep_prompt_embeddings.data, -val, val)\n\t        else:\n\t            raise ValueError(\"Other initiation scheme is not supported\")\n\t        # define block-wise learnable gate scalar\n\t        if self.prompt_config.GATE_PRIOR:\n\t            gate_logit = (-torch.ones(self.prompt_config.GATE_NUM) * self.prompt_config.GATE_INIT)\n", "            self.gate_logit = nn.Parameter(gate_logit)\n\t            print(self.gate_logit)\n\t    def incorporate_prompt(self, x):\n\t        # combine prompt embeddings with image-patch embeddings\n\t        B = x.shape[0]\n\t        if self.prompt_config.LOCATION == \"prepend\":\n\t            # after CLS token, all before image patches\n\t            x = self.embeddings(x)  # (batch_size, 1 + n_pa\n\t            x = torch.cat((\n\t                    x[:, :1, :],\n", "                    self.prompt_dropout(\n\t                        self.prompt_embeddings.expand(B, -1, -1)),\n\t                    x[:, 1:, :]\n\t                ), dim=1)\n\t            # (batch_size, cls_token + n_prompt + n_patches, hidden_dim)\n\t        else:\n\t            raise ValueError(\"Other prompt locations are not supported\")\n\t        return x\n\t    def embeddings(self, x):\n\t        B = x.shape[0]\n", "        x = self.patch_embed(x)\n\t        cls_tokens = self.cls_token.expand(B, -1, -1)\n\t        x = torch.cat((cls_tokens, x), dim=1)\n\t        x = x + self.pos_embed\n\t        x = self.pos_drop(x)\n\t        return x\n\t    def train(self, mode=True):\n\t        # set train status for this class: disable all but the prompt-related modules\n\t        if mode:\n\t            # training:\n", "            self.blocks.eval()\n\t            self.patch_embed.eval()\n\t            self.pos_drop.eval()\n\t            self.prompt_dropout.train()\n\t        else:\n\t            # eval:\n\t            for module in self.children():\n\t                module.train(mode)\n\t    def reinit_temp(self):\n\t        assert self.temp_learn, \"reinit_temp() could be run only when config.TEMP_LEARN == True\"\n", "        self.temp.data.copy_(self.temp.data.clamp(min=self.prompt_config.TEMP_MIN, max=self.prompt_config.TEMP_MAX))\n\t    def forward_features(self, x):\n\t        x = self.incorporate_prompt(x)\n\t        # deep\n\t        if self.prompt_config.DEEP:\n\t            B = x.shape[0]\n\t            num_layers = len(self.blocks)\n\t            for i in range(num_layers):\n\t                if i == 0:\n\t                    x = self.blocks[i](x)\n", "                else:\n\t                    # prepend\n\t                    x = torch.cat((\n\t                        x[:, 0:1, :],\n\t                        self.prompt_dropout(\n\t                            self.deep_prompt_embeddings[i - 1].expand(B, -1, -1)\n\t                        ),\n\t                        x[:, (1 + self.num_tokens):, :]\n\t                    ), dim=1)\n\t                    x = self.blocks[i](x)\n", "        else:\n\t            # clamp temperatures not to be too small or too large\n\t            if self.temp_learn:\n\t                self.reinit_temp()\n\t            for i, blk in enumerate(self.blocks):\n\t                # current block's input prompt representation\n\t                if self.prompt_config.GATE_PRIOR and i < self.gate_logit.shape[0]:\n\t                    gate = self.gate_logit[i].sigmoid()\n\t                    prompt_in = x[:, 1: 1+self.prompt_config.NUM_TOKENS, :]\n\t                # block-wise learnable temperature\n", "                temp = self.temp if not isinstance(self.temp, nn.Parameter) else self.temp[i]\n\t                x = blk(x, temp=temp)\n\t                if self.prompt_config.GATE_PRIOR and i < self.gate_logit.shape[0]:\n\t                    # current block's output prompt representation\n\t                    prompt_out = x[:, 1: 1+self.prompt_config.NUM_TOKENS, :]\n\t                    # convex combinate input and output prompt representations of current block via learnalbe gate\n\t                    x = torch.cat([\n\t                        x[:, 0:1, :], \n\t                        gate * prompt_out + (1 - gate) * prompt_in, \n\t                        x[:, 1+self.prompt_config.NUM_TOKENS:, :]\n", "                    ], dim=1)\n\t        norm_func = self.norm\n\t        if self.prompt_config.VIT_POOL_TYPE == \"imgprompt_pool\":\n\t            assert self.prompt_config.LOCATION == \"prepend\"\n\t            x = x[:, 1:, :].mean(dim=1)  # global pool without cls token\n\t            outcome = norm_func(x)\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"original\":\n\t            x = x[:, 1:, :].mean(dim=1)  # global pool without cls token\n\t            outcome = norm_func(x)\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"img_pool\":\n", "            assert self.prompt_config.LOCATION == \"prepend\"\n\t            x = x[:, self.num_tokens+1:, :].mean(dim=1)\n\t            outcome = norm_func(x)\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"prompt_pool\":\n\t            assert self.prompt_config.LOCATION == \"prepend\"\n\t            x = x[:, 1:self.num_tokens+1, :].mean(dim=1)\n\t            outcome = norm_func(x)\n\t        else:\n\t            raise ValueError(\"pooling type for output is not supported\")\n\t        return outcome\n", "def build_model(model_type, prompt_cfg):\n\t    if \"vitb\" in model_type:\n\t        return vit_base_patch16(prompt_cfg)\n\t    elif \"vitl\" in model_type:\n\t        return vit_large_patch16(prompt_cfg)\n\t    elif \"vith\" in model_type:\n\t        return vit_huge_patch14(prompt_cfg)\n\tdef vit_base_patch16(prompt_cfg, **kwargs):\n\t    model = PromptedVisionTransformer(\n\t        prompt_cfg,\n", "        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n\t        patch_size=16, embed_dim=768, depth=12, num_heads=12,\n\t        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    return model\n\tdef vit_large_patch16(prompt_cfg, **kwargs):\n\t    model = PromptedVisionTransformer(\n\t        prompt_cfg,\n\t        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n\t        patch_size=16, embed_dim=1024, depth=24, num_heads=16,\n", "        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    return model\n\tdef vit_huge_patch14(prompt_cfg, **kwargs):\n\t    model = PromptedVisionTransformer(\n\t        prompt_cfg,\n\t        drop_path_rate=0.1, global_pool=True,  # using default settings for mae-finetune\n\t        patch_size=14, embed_dim=1280, depth=32, num_heads=16,\n\t        mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n", "    return model\n"]}
{"filename": "src/models/vit_prompt/vit_moco.py", "chunked_list": ["#!/usr/bin/env python3\n\t\"\"\"\n\tvit-moco-v3 with prompt\n\t\"\"\"\n\timport math\n\timport torch\n\timport torch.nn as nn\n\timport torch.nn.functional as F\n\timport torchvision as tv\n\tfrom functools import partial, reduce\n", "from operator import mul\n\tfrom torch.nn import Conv2d, Dropout\n\tfrom timm.models.vision_transformer import _cfg\n\tfrom ..vit_backbones.vit_moco import VisionTransformerMoCo\n\tfrom ...utils import logging\n\tlogger = logging.get_logger(\"visual_prompt\")\n\tclass PromptedVisionTransformerMoCo(VisionTransformerMoCo):\n\t    def __init__(self, prompt_config, **kwargs):\n\t        super().__init__(**kwargs)\n\t        self.prompt_config = prompt_config\n", "        if self.prompt_config.DEEP and self.prompt_config.LOCATION not in [\"prepend\", ]:\n\t            raise ValueError(\"Deep-{} is not supported\".format(self.prompt_config.LOCATION))\n\t        num_tokens = self.prompt_config.NUM_TOKENS\n\t        self.num_tokens = num_tokens\n\t        self.prompt_dropout = Dropout(self.prompt_config.DROPOUT)\n\t        # define temperature for attention shaping\n\t        self.temp = self.prompt_config.TEMP\n\t        self.temp_learn = self.prompt_config.TEMP_LEARN\n\t        if self.temp_learn:\n\t            self.temp = nn.Parameter(torch.ones(prompt_config.TEMP_NUM))\n", "        # initiate prompt:\n\t        if self.prompt_config.INITIATION == \"random\":\n\t            val = math.sqrt(6. / float(3 * reduce(mul, self.patch_embed.patch_size, 1) + self.embed_dim))  # noqa\n\t            self.prompt_embeddings = nn.Parameter(torch.zeros(\n\t                1, num_tokens, self.embed_dim))\n\t            # xavier_uniform initialization\n\t            nn.init.uniform_(self.prompt_embeddings.data, -val, val)\n\t            if self.prompt_config.DEEP:\n\t                self.deep_prompt_embeddings = nn.Parameter(torch.zeros(\n\t                    len(self.blocks) - 1,\n", "                    num_tokens, self.embed_dim\n\t                ))\n\t                # xavier_uniform initialization\n\t                nn.init.uniform_(\n\t                    self.deep_prompt_embeddings.data, -val, val)\n\t        else:\n\t            raise ValueError(\"Other initiation scheme is not supported\")\n\t        # define block-wise learnable gate scalar\n\t        if self.prompt_config.GATE_PRIOR:       \n\t            gate_logit = (-torch.ones(self.prompt_config.GATE_NUM) * self.prompt_config.GATE_INIT)        \n", "            self.gate_logit = nn.Parameter(gate_logit)\n\t            print(self.gate_logit)\n\t    def incorporate_prompt(self, x):\n\t        # combine prompt embeddings with image-patch embeddings\n\t        B = x.shape[0]\n\t        if self.prompt_config.LOCATION == \"prepend\":\n\t            # after CLS token, all before image patches\n\t            x = self.embeddings(x)  # (batch_size, 1 + n_patches, hidden_dim)\n\t            x = torch.cat((\n\t                    x[:, :1, :],\n", "                    self.prompt_dropout(\n\t                        self.prompt_embeddings.expand(B, -1, -1)),\n\t                    x[:, 1:, :]\n\t                ), dim=1)\n\t            # (batch_size, cls_token + n_prompt + n_patches, hidden_dim)\n\t        else:\n\t            raise ValueError(\"Other prompt locations are not supported\")\n\t        return x\n\t    def embeddings(self, x):\n\t        x = self.patch_embed(x)\n", "        cls_token = self.cls_token.expand(x.shape[0], -1, -1)\n\t        if self.dist_token is None:\n\t            x = torch.cat((cls_token, x), dim=1)\n\t        else:\n\t            x = torch.cat((\n\t                cls_token, self.dist_token.expand(x.shape[0], -1, -1), x),\n\t            dim=1)\n\t        x = self.pos_drop(x + self.pos_embed)\n\t        return x\n\t    def train(self, mode=True):\n", "        # set train status for this class: disable all but the prompt-related modules\n\t        if mode:\n\t            # training:\n\t            self.blocks.eval()\n\t            self.patch_embed.eval()\n\t            self.pos_drop.eval()\n\t            self.prompt_dropout.train()\n\t        else:\n\t            # eval:\n\t            for module in self.children():\n", "                module.train(mode)\n\t    def reinit_temp(self):\n\t        assert self.temp_learn, \"reinit_temp() could be run only when config.TEMP_LEARN == True\"\n\t        self.temp.data.copy_(self.temp.data.clamp(min=self.prompt_config.TEMP_MIN, max=self.prompt_config.TEMP_MAX))\n\t    def forward_features(self, x):\n\t        x = self.incorporate_prompt(x)\n\t        # deep\n\t        if self.prompt_config.DEEP:\n\t            B = x.shape[0]\n\t            num_layers = len(self.blocks)\n", "            for i in range(num_layers):\n\t                if i == 0:\n\t                    x = self.blocks[i](x)\n\t                else:\n\t                    # prepend\n\t                    x = torch.cat((\n\t                        x[:, :1, :],\n\t                        self.prompt_dropout(\n\t                            self.deep_prompt_embeddings[i - 1].expand(B, -1, -1)\n\t                        ),\n", "                        x[:, (1 + self.num_tokens):, :]\n\t                    ), dim=1)\n\t                    x = self.blocks[i](x)\n\t        else:\n\t            # clamp temperatures not to be too small or too large\n\t            if self.temp_learn:\n\t                self.reinit_temp()\n\t            for i, blk in enumerate(self.blocks):\n\t                # current block's input prompt representation\n\t                if self.prompt_config.GATE_PRIOR and i < self.gate_logit.shape[0]:\n", "                    gate = self.gate_logit[i].sigmoid()\n\t                    prompt_in = x[:, 1: 1+self.prompt_config.NUM_TOKENS, :]\n\t                # block-wise learnable temperature\n\t                temp = self.temp if not isinstance(self.temp, nn.Parameter) else self.temp[i]\n\t                x = blk(x, temp=temp)\n\t                if self.prompt_config.GATE_PRIOR and i < self.gate_logit.shape[0]:\n\t                    # current block's output prompt representation\n\t                    prompt_out = x[:, 1: 1+self.prompt_config.NUM_TOKENS, :]\n\t                    # convex combinate input and output prompt representations of current block via learnalbe gate\n\t                    x = torch.cat([\n", "                        x[:, 0:1, :], \n\t                        gate * prompt_out + (1 - gate) * prompt_in, \n\t                        x[:, 1+self.prompt_config.NUM_TOKENS:, :]\n\t                    ], dim=1)\n\t        norm_func = self.norm \n\t        if self.prompt_config.VIT_POOL_TYPE == \"imgprompt_pool\":\n\t            assert self.prompt_config.LOCATION == \"prepend\"\n\t            outcome = norm_func(x[:, 1:, :].mean(dim=1))  # global pool without cls token\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"original\":\n\t            x = norm_func(x)\n", "            outcome = x[:, 0]\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"img_pool\":\n\t            assert self.prompt_config.LOCATION == \"prepend\"\n\t            outcome = norm_func(x[:, self.num_tokens+1:, :].mean(dim=1))\n\t        elif self.prompt_config.VIT_POOL_TYPE == \"prompt_pool\":\n\t            assert self.prompt_config.LOCATION == \"prepend\"\n\t            outcome = norm_func(x[:, 1:self.num_tokens+1, :].mean(dim=1))\n\t        else:\n\t            raise ValueError(\"pooling type for output is not supported\")\n\t        return outcome\n", "def build_model(model_type, prompt_cfg):\n\t    if \"vitb\" in model_type:\n\t        return vit_base(prompt_cfg)\n\t    elif \"vits\" in model_type:\n\t        return vit_small(prompt_cfg)\n\tdef vit_small(prompt_cfg, **kwargs):\n\t    model = PromptedVisionTransformerMoCo(\n\t        prompt_cfg,\n\t        patch_size=16, embed_dim=384, depth=12, drop_path_rate=0.1,\n\t        num_heads=12, mlp_ratio=4, qkv_bias=True,\n", "        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    model.default_cfg = _cfg()\n\t    return model\n\tdef vit_base(prompt_cfg, **kwargs):\n\t    model = PromptedVisionTransformerMoCo(\n\t        prompt_cfg,\n\t        patch_size=16, embed_dim=768, depth=12, drop_path_rate=0.1,\n\t        num_heads=12, mlp_ratio=4, qkv_bias=True,\n\t        norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)\n\t    model.default_cfg = _cfg()\n", "    return model\n"]}
