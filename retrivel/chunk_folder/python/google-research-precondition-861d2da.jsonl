{"filename": "precondition/quantization_utils.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Helper routines for quantization.\"\"\"\n\tfrom typing import Any\n\timport chex\n\tfrom flax import struct\n\timport jax.numpy as jnp\n\t# pylint:disable=no-value-for-parameter\n\t@struct.dataclass\n", "class QuantizedValue:\n\t  \"\"\"State associated with quantized value.\"\"\"\n\t  quantized: chex.Array\n\t  diagonal: chex.Array  # Diagonal (if extract_diagonal is set)\n\t  bucket_size: chex.Array\n\t  quantized_dtype: jnp.dtype = struct.field(\n\t      pytree_node=False)  # Dtype for the quantized value.\n\t  extract_diagonal: bool = struct.field(\n\t      pytree_node=False)  # In case its centered.\n\t  shape: Any = struct.field(pytree_node=False)  # Shape of the tensor.\n", "  @classmethod\n\t  def from_float_value(cls, fvalue, quantized_dtype, extract_diagonal=False):\n\t    if isinstance(fvalue, list) and not fvalue:\n\t      return QuantizedValue([], [], [], quantized_dtype, extract_diagonal, [])  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t    quantized, diagonal_fvalue, bucket_size = QuantizedValue.quantize(\n\t        fvalue, quantized_dtype, extract_diagonal)\n\t    return QuantizedValue(quantized, diagonal_fvalue, bucket_size,\n\t                          quantized_dtype, extract_diagonal,\n\t                          list(quantized.shape))\n\t  # Quantization is from Lingvo JAX optimizers.\n", "  # We extend it for int16 quantization of PSD matrices.\n\t  @classmethod\n\t  def quantize(cls, fvalue, quantized_dtype, extract_diagonal=False):\n\t    \"\"\"Returns quantized value and the bucket.\"\"\"\n\t    if quantized_dtype == jnp.float32:\n\t      return fvalue, [], []\n\t    elif quantized_dtype == jnp.bfloat16:\n\t      return fvalue.astype(jnp.bfloat16), [], []\n\t    float_dtype = fvalue.dtype\n\t    if quantized_dtype == jnp.int8:\n", "      # value -128 is not used.\n\t      num_buckets = jnp.array(127.0, dtype=float_dtype)\n\t    elif quantized_dtype == jnp.int16:\n\t      # value -32768 is not used.\n\t      num_buckets = jnp.array(32767.0, dtype=float_dtype)\n\t    else:\n\t      raise ValueError(f'Quantized dtype {quantized_dtype} not supported.')\n\t    # max value is mapped to num_buckets\n\t    if extract_diagonal and fvalue.ndim != 2:\n\t      raise ValueError(\n", "          f'Input array {fvalue} must be 2D to work with extract_diagonal.')\n\t    diagonal_fvalue = []\n\t    if extract_diagonal:\n\t      diagonal_fvalue = jnp.diag(fvalue)\n\t      # Remove the diagonal entries.\n\t      fvalue = fvalue - jnp.diag(diagonal_fvalue)\n\t    # TODO(rohananil): Extend this by making use of information about the blocks\n\t    # SM3 style which will be useful for diagonal statistics\n\t    # We first decide the scale.\n\t    if fvalue.ndim < 1:\n", "      raise ValueError(\n\t          f'Input array {fvalue} must have a strictly positive number of '\n\t          'dimensions.')\n\t    max_abs = jnp.max(jnp.abs(fvalue), axis=0)\n\t    bucket_size = max_abs / num_buckets\n\t    bs_expanded = bucket_size[jnp.newaxis, ...]\n\t    # To avoid divide by 0.0\n\t    bs_nonzero = jnp.where(bs_expanded > 0.0, bs_expanded,\n\t                           jnp.ones_like(bs_expanded))\n\t    ratio = fvalue / bs_nonzero\n", "    # We use rounding to remove bias.\n\t    quantized = jnp.round(ratio)\n\t    return quantized.astype(quantized_dtype), diagonal_fvalue, bucket_size\n\t  def to_float(self):\n\t    \"\"\"Returns the float value.\"\"\"\n\t    if isinstance(self.quantized, list) and not self.quantized:\n\t      return self.quantized\n\t    if self.quantized_dtype == jnp.float32:\n\t      return self.quantized\n\t    if self.quantized_dtype == jnp.bfloat16:\n", "      return self.quantized.astype(jnp.float32)\n\t    float_dtype = self.bucket_size.dtype\n\t    bucket_size = self.bucket_size[jnp.newaxis, ...]\n\t    val = self.quantized.astype(float_dtype) * bucket_size\n\t    if self.extract_diagonal:\n\t      val += jnp.diag(self.diagonal)\n\t    return val\n"]}
{"filename": "precondition/sm3.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"SM3 Implementation.\"\"\"\n\timport functools\n\tfrom typing import Any, NamedTuple\n\timport chex\n\timport jax\n\timport jax.numpy as jnp\n\timport optax\n", "from precondition.quantization_utils import QuantizedValue\n\tclass SM3State(NamedTuple):\n\t  count: chex.Array\n\t  stats: Any\n\t# Per parameter optimizer state used in data-parallel training.\n\tclass ParameterStats(NamedTuple):\n\t  \"\"\"State associated to each parameter of the model being trained.\"\"\"\n\t  diagonal_statistics: chex.Array  # Accumulator for diagonal preconditioner\n\t  diagonal_momentum: QuantizedValue  # Momentum for the diagonal preconditioner\n\tdef sm3(\n", "    learning_rate,\n\t    beta1=0.9,\n\t    beta2=0.999,\n\t    diagonal_epsilon=1e-10,\n\t    weight_decay=0.0,\n\t    normalize_grads=False):\n\t  \"\"\"SM3 optimizer.\n\t  Memory-Efficient Adaptive Optimization, Rohan Anil, Vineet Gupta, Tomer Koren,\n\t    Yoram Singer\n\t  https://arxiv.org/abs/1901.11150\n", "  Args:\n\t    learning_rate: the step size used to update the parameters.\n\t    beta1: momentum parameter.\n\t    beta2: second moment averaging parameter.\n\t    diagonal_epsilon: epsilon for sm3\n\t    weight_decay: the amount of weight decay regularization to apply. defaults\n\t      to 0.0.\n\t    normalize_grads: Whether to normalize grads. Author finds it useful when\n\t      grads are high variance.\n\t  Returns:\n", "    a GradientTransformation.\n\t  \"\"\"\n\t  def _quantize_momentum(momentum_statistics):\n\t    return QuantizedValue.from_float_value(momentum_statistics, jnp.int8)\n\t  def init_fn(params):\n\t    \"\"\"Initialise the optimiser's state.\"\"\"\n\t    def _init(param):\n\t      accumulators = [jnp.zeros([s]) for s in param.shape]\n\t      momentum = _quantize_momentum(jnp.zeros_like(param))\n\t      return ParameterStats(accumulators, momentum)  # pytype: disable=wrong-arg-types  # numpy-scalars\n", "    return SM3State(\n\t        count=jnp.zeros([], jnp.int32), stats=jax.tree_map(_init, params))\n\t  def _get_expanded_shape(shape, i):\n\t    rank = len(shape)\n\t    # Replaces a `shape` of [M, N, K] with 1 in all dimensions except for i.\n\t    # For eg: i = 1 returns [1, N, 1].\n\t    return [1] * i + [shape[i]] + [1] * (rank - i - 1)\n\t  def _moving_averages(grad, accumulators):\n\t    w = (1.0 - beta2) if beta2 != 1.0 else 1.0\n\t    if grad.ndim < 2:\n", "      return beta2 * accumulators[0] + w * grad**2\n\t    else:\n\t      min_accumulator = functools.reduce(jnp.minimum, accumulators)\n\t      return beta2 * min_accumulator + w * grad**2\n\t  def _moving_averages_momentum(grad, momentum):\n\t    w = (1.0 - beta1) if beta1 != 1.0 else 1.0\n\t    return beta1 * momentum.to_float() + w * grad\n\t  def _sketch_diagonal_statistics(grad, updated_diagonal_statistics):\n\t    all_diagonal_statistics = []\n\t    for i in range(grad.ndim):\n", "      axes = list(range(i)) + list(range(i + 1, grad.ndim))\n\t      dim_diagonal_statistics = jnp.max(updated_diagonal_statistics, axis=axes)\n\t      all_diagonal_statistics.append(dim_diagonal_statistics)\n\t    if grad.ndim == 1:\n\t      all_diagonal_statistics[0] = updated_diagonal_statistics\n\t    return all_diagonal_statistics\n\t  def update_fn(updates, state, params):\n\t    stats = state.stats\n\t    if normalize_grads:\n\t      updates = jax.tree_map(\n", "          lambda g: g / (jnp.linalg.norm(g) + 1e-16), updates)\n\t    # Reshape all vectors into N-d tensors to compute min over them.\n\t    # [n], [m] -> [n, 1], [1, m]\n\t    expanded_diagonal_statistics = jax.tree_map(\n\t        lambda grad, state:  # pylint:disable=g-long-lambda\n\t        [\n\t            jnp.reshape(state.diagonal_statistics[i],\n\t                        _get_expanded_shape(grad.shape, i))\n\t            for i in range(grad.ndim)\n\t        ],\n", "        updates,\n\t        stats)\n\t    # Compute new diagonal statistics\n\t    new_diagonal_statistics = jax.tree_map(_moving_averages, updates,\n\t                                           expanded_diagonal_statistics)\n\t    # Compute preconditioners (1/sqrt(s)) where s is the statistics.\n\t    new_preconditioners = jax.tree_map(\n\t        lambda t: 1.0 / jnp.sqrt(t + diagonal_epsilon), new_diagonal_statistics)\n\t    preconditioned_grads = jax.tree_map(lambda g, p: g * p, updates,\n\t                                        new_preconditioners)\n", "    # Compute updated momentum (also handle quantization)\n\t    updated_momentum = jax.tree_map(\n\t        lambda preconditioned_grad, state:  # pylint:disable=g-long-lambda\n\t        _moving_averages_momentum(preconditioned_grad, state.diagonal_momentum),\n\t        preconditioned_grads,\n\t        stats)\n\t    # Update diagonal statistics.\n\t    updated_diagonal_statistics = jax.tree_map(_sketch_diagonal_statistics,\n\t                                               updates, new_diagonal_statistics)\n\t    # Update momentum.\n", "    new_sm3_stats = jax.tree_map(\n\t        lambda momentum, diagonal_stats:  # pylint:disable=g-long-lambda\n\t        ParameterStats(diagonal_stats, _quantize_momentum(momentum)),\n\t        updated_momentum,\n\t        updated_diagonal_statistics)\n\t    # Apply weight decay\n\t    updated_momentum_with_wd = updated_momentum\n\t    if weight_decay > 0.0:\n\t      updated_momentum_with_wd = jax.tree_map(lambda g, p: g + weight_decay * p,\n\t                                              updated_momentum, params)\n", "    lr = learning_rate\n\t    if callable(learning_rate):\n\t      lr = learning_rate(state.count)\n\t    new_updates = jax.tree_map(lambda pg: -lr * pg, updated_momentum_with_wd)\n\t    return new_updates, SM3State(count=state.count+1, stats=new_sm3_stats)\n\t  return optax.GradientTransformation(init_fn, update_fn)\n"]}
{"filename": "precondition/__init__.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"precondition API.\"\"\"\n\t# A new PyPI release will be pushed everytime `__version__` is increased\n\t# When changing this, also update the CHANGELOG.md\n\t__version__ = '0.3.0'\n"]}
{"filename": "precondition/distributed_shampoo_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for distributed_shampoo.\"\"\"\n\timport functools\n\timport itertools\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport chex\n\timport jax\n", "import jax.numpy as jnp\n\timport numpy as np\n\tfrom precondition import distributed_shampoo\n\timport scipy\n\tclass PaddingTest(parameterized.TestCase):\n\t  def assertAllClose(self, x, y, atol=1e-5, rtol=1e-5):\n\t    np.testing.assert_allclose(x, y, atol=atol, rtol=rtol)\n\t  @parameterized.named_parameters(\n\t      {\n\t          'testcase_name': 'NoPadding',\n", "          'max_size': 3,\n\t          'result': [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],\n\t      },\n\t      {\n\t          'testcase_name':\n\t              'Padding',\n\t          'max_size':\n\t              5,\n\t          'result': [[1., 1., 1., 0., 0.], [1., 1., 1., 0., 0.],\n\t                     [1., 1., 1., 0., 0.], [0., 0., 0., 1., 0.],\n", "                     [0., 0., 0., 0., 1.]],\n\t      },\n\t  )\n\t  def test_pad_square_matrix(self, max_size, result):\n\t    self.assertAllClose(\n\t        distributed_shampoo.pad_square_matrix(\n\t            mat=jnp.ones(shape=(3, 3), dtype=jnp.float32), max_size=max_size),\n\t        jnp.asarray(result, dtype=jnp.float32))\n\t  @parameterized.named_parameters(\n\t      {\n", "          'testcase_name': 'TooLarge',\n\t          'shape': (3, 3),\n\t          'max_size': 2\n\t      },\n\t      {\n\t          'testcase_name': 'NotSquare',\n\t          'shape': (3, 4),\n\t          'max_size': 5\n\t      },\n\t  )\n", "  def test_pad_square_matrix_error(self, shape, max_size):\n\t    with self.assertRaises(ValueError):\n\t      distributed_shampoo.pad_square_matrix(\n\t          mat=jnp.ones(shape=shape), max_size=max_size)\n\tdef _pth_root_difference_cases():\n\t  \"\"\"Returns cases for _pth_root_difference() test.\"\"\"\n\t  cases = []\n\t  # The test checks accuracy of\n\t  # (w + a)^(-1/p) - (w + b)^(-1/p)\n\t  # so generate corresponding parameters.\n", "  p_vals = [2, 4, 6, 8]\n\t  a_vals = b_vals = [1e-6, 1e-5, 0.0, 1.0]\n\t  w_vals = [1e-6, 1e-5, 1.0, 1e3]\n\t  for p, a, b, w in itertools.product(p_vals, a_vals, b_vals, w_vals):\n\t    cases.append({'p': p, 'a': a, 'b': b, 'w': w})\n\t  return cases\n\tclass DistributedShampooTest(chex.TestCase, parameterized.TestCase):\n\t  def setUp(self):\n\t    super().setUp()\n\t    self.init_params = (jnp.array([[1., 3.],\n", "                                   [2., 4.]]), jnp.array([[3., 4.], [3., 4.]]))\n\t    self.per_step_updates = (jnp.array([[500., 5.], [500., 5.]]),\n\t                             jnp.array([[300., 3.], [300., 3.]]))\n\t    self.per_step_updates_custom_preconditioner = (self.per_step_updates,\n\t                                                   (jnp.array([[200., 4.],\n\t                                                               [200., 4.]]),\n\t                                                    jnp.array([[600., 2.],\n\t                                                               [600., 2.]])))\n\t    self.rng = np.random.default_rng(1234)\n\t    shape = ([2, 5], [6, 3])\n", "    dt = self.init_params[0].dtype\n\t    def make_shape(bigger_first_entry):\n\t      x = tuple(self.rng.standard_normal(size=s) for s in shape)\n\t      if bigger_first_entry:\n\t        for xx in x:\n\t          xx[..., 0] *= 100\n\t      return tuple(jnp.array(xx).astype(dt) for xx in x)\n\t    self.init_params_larger = make_shape(False)\n\t    self.per_step_updates_larger = make_shape(True)\n\t  @chex.all_variants(with_pmap=False)\n", "  @parameterized.named_parameters(\n\t      {\n\t          'testcase_name': 'default',\n\t          'best_effort_memory_usage_reduction': True,\n\t          'expected_value': -0.57,\n\t      },\n\t      {\n\t          'testcase_name': 'default_nomerge',\n\t          'best_effort_memory_usage_reduction': True,\n\t          'merge_small_dims_block_size': 1,\n", "          'expected_value': -0.57,\n\t      },\n\t      {\n\t          'testcase_name': 'default_larger',\n\t          'best_effort_memory_usage_reduction': True,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'default_larger_nomerge',\n", "          'best_effort_memory_usage_reduction': True,\n\t          'slightly_larger': True,\n\t          'merge_small_dims_block_size': 1,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'materialize_statistics',\n\t          'best_effort_memory_usage_reduction': True,\n\t      },\n\t      {\n", "          'testcase_name': 'blocked_statistics',\n\t          'best_effort_memory_usage_reduction': True,\n\t      },\n\t      {\n\t          'testcase_name': 'default_quantized',\n\t      },\n\t      {\n\t          'testcase_name': 'materialize_statistics_quantized',\n\t      },\n\t      {\n", "          'testcase_name': 'blocked_statistics_quantized',\n\t      },\n\t      {\n\t          'testcase_name': 'pos_compression_rank',\n\t          'compression_rank': 1,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'pos_compression_rank_nomerge',\n", "          'compression_rank': 1,\n\t          'slightly_larger': True,\n\t          'merge_small_dims_block_size': 1,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'neg_compression_rank',\n\t          'compression_rank': -1,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n", "      },\n\t      {\n\t          'testcase_name': 'neg_compression_rank_nomerge',\n\t          'compression_rank': -1,\n\t          'slightly_larger': True,\n\t          'merge_small_dims_block_size': 1,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'no_training_metrics',\n", "          'generate_training_metrics': False,\n\t      },\n\t      {\n\t          'testcase_name': 'larger_reuse',\n\t          'best_effort_memory_usage_reduction': True,\n\t          'reuse_preconditioner': True,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n", "          'testcase_name': 'larger_reuse_highmem',\n\t          'best_effort_memory_usage_reduction': False,\n\t          'reuse_preconditioner': True,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n\t      },\n\t      {\n\t          'testcase_name': 'larger_reuse_highmem_nomerge',\n\t          'best_effort_memory_usage_reduction': False,\n\t          'merge_small_dims_block_size': 1,\n", "          'reuse_preconditioner': True,\n\t          'slightly_larger': True,\n\t          'expected_value': -0.17019942,\n\t      },\n\t  )\n\t  def test_distributed_shampoo(\n\t      self,\n\t      best_effort_memory_usage_reduction=False,\n\t      compression_rank=0,\n\t      merge_small_dims_block_size=4096,\n", "      generate_training_metrics=True,\n\t      slightly_larger=False,\n\t      expected_value=None,\n\t      reuse_preconditioner=False,\n\t  ):\n\t    params = self.init_params_larger if slightly_larger else self.init_params\n\t    optim = distributed_shampoo.distributed_shampoo(\n\t        0.1,\n\t        32,\n\t        batch_axis_name='batch',\n", "        preconditioning_compute_steps=2,\n\t        best_effort_memory_usage_reduction=best_effort_memory_usage_reduction,\n\t        relative_matrix_epsilon=True,\n\t        compression_rank=compression_rank,\n\t        merge_small_dims_block_size=merge_small_dims_block_size,\n\t        generate_training_metrics=generate_training_metrics,\n\t        reuse_preconditioner=reuse_preconditioner,\n\t    )\n\t    init_fn = self.variant(optim.init)\n\t    transform_fn = self.variant(optim.update)\n", "    if slightly_larger:\n\t      updates = self.per_step_updates_larger\n\t    else:\n\t      updates = self.per_step_updates\n\t    def _update(unused_batch):\n\t      return transform_fn(updates, state, params)\n\t    state = init_fn(params)\n\t    chex.assert_tree_all_finite(state)\n\t    pmap_fn = jax.pmap(_update, axis_name='batch')\n\t    updates, state = pmap_fn(jnp.array([1.0]))\n", "    chex.assert_tree_all_finite((params, updates, state))\n\t    if expected_value is not None:\n\t      last_entry = updates[1][-1, -1, -1]\n\t      self.assertLess(\n\t          abs(last_entry - expected_value),\n\t          1e-4,\n\t          msg=f'{last_entry=}, {expected_value=}')\n\t    for _ in range(5):\n\t      updates, state = pmap_fn(jnp.array([1.0]))\n\t      chex.assert_tree_all_finite((params, updates, state))\n", "  @chex.all_variants(with_pmap=False)\n\t  @parameterized.named_parameters([\n\t      {\n\t          'testcase_name': 'default',\n\t      },\n\t      {\n\t          'testcase_name': 'no_training_metrics',\n\t          'generate_training_metrics': False,\n\t      },\n\t  ])\n", "  def test_distributed_shampoo_no_pmap(self, generate_training_metrics=True):\n\t    params = self.init_params\n\t    optim = distributed_shampoo.distributed_shampoo(\n\t        0.1,\n\t        32,\n\t        batch_axis_name=None,\n\t        preconditioning_compute_steps=2,\n\t        generate_training_metrics=generate_training_metrics)\n\t    init_fn = self.variant(optim.init)\n\t    transform_fn = self.variant(optim.update)\n", "    state = init_fn(params)\n\t    chex.assert_tree_all_finite(state)\n\t    updates, state = transform_fn(self.per_step_updates, state, params)\n\t    chex.assert_tree_all_finite((params, updates, state))\n\t  @chex.all_variants(with_pmap=False)\n\t  @parameterized.named_parameters([\n\t      {\n\t          'testcase_name': 'preconditioning_compute_steps_schedule',\n\t          'preconditioning_compute_steps': 2,\n\t          'end_preconditioning_steps': 100,\n", "      },\n\t      {\n\t          'testcase_name': (\n\t              'preconditioning_compute_steps_schedule_short_circuit'\n\t          ),\n\t          'preconditioning_compute_steps': 1,\n\t          'end_preconditioning_steps': 1,\n\t      },\n\t  ])\n\t  def test_distributed_shampoo_preconditioning_compute_steps_schedule(\n", "      self, preconditioning_compute_steps, end_preconditioning_steps\n\t  ):\n\t    params = self.init_params\n\t    base_lr = 0.1\n\t    def lr_fn(t):\n\t      decay_factor = (t + 1) ** -0.5\n\t      return base_lr * decay_factor\n\t    optim = distributed_shampoo.distributed_shampoo(\n\t        lr_fn,\n\t        32,\n", "        batch_axis_name='batch',\n\t        preconditioning_compute_steps=preconditioning_compute_steps,\n\t        decay_preconditioning_compute_steps=True,\n\t        end_preconditioning_compute_steps=end_preconditioning_steps,\n\t    )\n\t    init_fn = self.variant(optim.init)\n\t    transform_fn = self.variant(optim.update)\n\t    updates = self.per_step_updates\n\t    def _update(unused_batch):\n\t      return transform_fn(updates, state, params)\n", "    state = init_fn(params)\n\t    chex.assert_tree_all_finite(state)\n\t    pmap_fn = jax.pmap(_update, axis_name='batch')\n\t    updates, state = pmap_fn(jnp.array([1.0]))\n\t    chex.assert_tree_all_finite((params, updates, state))\n\t    for _ in range(5):\n\t      updates, state = pmap_fn(jnp.array([1.0]))\n\t      chex.assert_tree_all_finite((params, updates, state))\n\t  def _gen_symmetrix_matrix(self, dim, condition_number):\n\t    u = scipy.stats.ortho_group.rvs(\n", "        dim=dim, random_state=self.rng).astype(np.float64)\n\t    v = u.T\n\t    diag = np.diag([condition_number**(-i / (dim - 1)) for i in range(dim)])\n\t    return u @ diag @ v\n\t  def test_matrix_inverse_root(self):\n\t    \"\"\"Test for matrix inverse pth root.\"\"\"\n\t    # Fails after it reaches a particular condition number.\n\t    for e in range(2, 12):\n\t      condition_number = 10**e\n\t      ms = self._gen_symmetrix_matrix(16, condition_number)\n", "      self.assertLess(\n\t          np.abs(np.linalg.cond(ms) - condition_number),\n\t          condition_number * 0.01)\n\t      metrics = distributed_shampoo.matrix_inverse_pth_root(\n\t          ms.astype(np.float32), 4, ridge_epsilon=1e-12)[1]\n\t      error = metrics.inverse_pth_root_errors\n\t      if e < 7:\n\t        self.assertLess(error, 0.1)\n\t      else:\n\t        # No guarantee of success after e >= 7\n", "        pass\n\t  @parameterized.parameters([{'sz': sz} for sz in [4, 32]])\n\t  def test_matrix_inverse_root_padding(self, sz):\n\t    \"\"\"Test padding does not affect result much.\"\"\"\n\t    # Note sz == 1 case will not pass tests here b/c the method\n\t    # is exact for scalars (but padding triggers coupled iteration).\n\t    condition_number = 1e3\n\t    ms = self._gen_symmetrix_matrix(sz, condition_number).astype(np.float32)\n\t    # Shift matrix norm down by some large factor, so that improper padding\n\t    # handling results in an error by increasing the condition number.\n", "    ms = jnp.array(ms) * 1e-3\n\t    rt, metrics = distributed_shampoo.matrix_inverse_pth_root(\n\t        ms, 4, ridge_epsilon=1e-3)\n\t    err = metrics.inverse_pth_root_errors\n\t    pad_ms = distributed_shampoo.pad_square_matrix(ms, sz * 2)\n\t    pad_rt, metrics = distributed_shampoo.matrix_inverse_pth_root(\n\t        pad_ms, 4, ridge_epsilon=1e-3, padding_start=sz)\n\t    pad_err = metrics.inverse_pth_root_errors\n\t    pad_rt_principal = pad_rt[:sz, :sz]\n\t    np.testing.assert_allclose(\n", "        rt,\n\t        pad_rt_principal,\n\t        # The fact that this is so large keeps vladf up at night,\n\t        # but without padding_start argument it's even worse (>1).\n\t        rtol=1e-2 if sz == 4 else 5e-2,\n\t        err_msg=np.array2string(rt - pad_rt_principal))\n\t    self.assertLessEqual(pad_err, 4 * err)\n\t    self.assertEqual(np.abs(pad_rt[sz:]).sum(), 0)\n\t    self.assertEqual(np.abs(pad_rt[:, sz:]).sum(), 0)\n\t  def test_all_padding(self):\n", "    \"\"\"Test full padding matrix.\"\"\"\n\t    empty = jnp.zeros([0, 0])\n\t    padded = distributed_shampoo.pad_square_matrix(empty, 10)\n\t    rt, metrics = distributed_shampoo.matrix_inverse_pth_root(\n\t        padded, 4, ridge_epsilon=1e-3, padding_start=0)\n\t    err = metrics.inverse_pth_root_errors\n\t    self.assertEqual(np.abs(rt).sum(), 0.0)\n\t    self.assertEqual(np.abs(err).sum(), 0.0)\n\t  def _make_pth_diff_message(self, w, alpha, beta, p):\n\t    left = f'({w} + {alpha})^(-1.0 / {p}) - '\n", "    right = f'({w} + {beta})^(-1.0 / {p})'\n\t    return left + right\n\t  @parameterized.parameters(_pth_root_difference_cases())\n\t  def test_pth_root_difference(self, p, a, b, w):\n\t    \"\"\"Test stable difference computation.\"\"\"\n\t    pth_rt_diff = jax.jit(\n\t        functools.partial(distributed_shampoo._pth_root_difference, p=p))\n\t    actual = pth_rt_diff(w, a, b)\n\t    # in float64\n\t    exp = (-1.0 / p)\n", "    expected = (w + a)**exp - (w + b)**exp\n\t    self.assertAlmostEqual(\n\t        actual,\n\t        expected,\n\t        msg=self._make_pth_diff_message(w, a, b, p),\n\t        delta=1e-2)\n\t  @parameterized.parameters([{'p': p} for p in [2, 4, 8]])\n\t  def test_lobpcg_preconditioning(self, p):\n\t    \"\"\"Checks that root calculation is valid with top-k preconditioning.\"\"\"\n\t    rng = np.random.RandomState(seed=42)\n", "    n = 11\n\t    epsilon = jnp.float32(1e-4)\n\t    a_asymm = jnp.array(rng.random((n, n)), jnp.float32)\n\t    a = jnp.matmul(a_asymm.T, a_asymm, precision=jax.lax.Precision.HIGHEST)\n\t    log2 = (p - 1).bit_length()\n\t    assert 2**log2 == p, (p, log2)\n\t    root = functools.partial(\n\t        distributed_shampoo.matrix_inverse_pth_root, ridge_epsilon=epsilon, p=p)\n\t    root_lobpcg = functools.partial(\n\t        root, lobpcg_topk_precondition=2, lobpcg_max_iter=10)\n", "    methods = {'default': root, 'precond': root_lobpcg}\n\t    spectrum_err, entry_err = {}, {}\n\t    for k, method in methods.items():\n\t      rt = jax.jit(method)(a)[0]\n\t      # Recover the inverse by repeated squaring of inverse p-th root.\n\t      inv = np.asarray(rt).astype(np.float64)\n\t      for _ in range(log2):\n\t        inv = inv.dot(inv)\n\t      approx_id = inv.dot(a)\n\t      spectrum = np.linalg.eigvalsh(approx_id)\n", "      spectrum_err[k] = np.abs(1 - spectrum)\n\t      entry_err[k] = np.mean(np.abs(approx_id - np.eye(n)))\n\t    with np.printoptions(precision=2):\n\t      def print_dict(d):\n\t        return '\\n'.join(f'{k} {v}' for k, v in d.items())\n\t      err_msg = (f'p={p} log2(p)={log2}\\n'\n\t                 f'spectrum error\\n{print_dict(spectrum_err)}\\n'\n\t                 f'entry_err\\n{print_dict(entry_err)}')\n\t      self.assertLessEqual(\n\t          np.median(spectrum_err['precond']),\n", "          2 * np.median(spectrum_err['default']),\n\t          msg=err_msg)\n\t      self.assertLessEqual(\n\t          entry_err['precond'], entry_err['default'] * 2, msg=err_msg)\n\tclass LowRankInverseRootTest(chex.TestCase):\n\t  def test_dynamic_exponent(self):\n\t    \"\"\"Test that exponent for various 'p' is correct.\"\"\"\n\t    root = jax.jit(\n\t        functools.partial(\n\t            distributed_shampoo._low_rank_root,\n", "            compression_rank=1,\n\t            ridge_epsilon=0.0,\n\t            relative_matrix_epsilon=False,\n\t        ))\n\t    for p in range(2, 9):\n\t      # Requires padding (else why would we compress to low rank?)\n\t      a = np.zeros([4, 4], jnp.float32)\n\t      a[0, 0] = 2**p\n\t      exact = jnp.float32(1 / 2)\n\t      r, metrics = root(a, p)\n", "      e = metrics.inverse_pth_root_errors\n\t      error = jnp.abs(r[0, 1] - exact)\n\t      self.assertLessEqual(error, 10 * np.finfo(np.float32).eps)\n\t      self.assertLessEqual(e, 10 * np.finfo(np.float32).eps)\n\t  @parameterized.parameters(\n\t      {\n\t          'size': 5,\n\t          'padded_size': 5,\n\t          'compression_rank': 2\n\t      },\n", "      {\n\t          'size': 5,\n\t          'padded_size': 8,\n\t          'compression_rank': 2\n\t      },\n\t      {\n\t          'size': 5,\n\t          'padded_size': 5,\n\t          'compression_rank': -2\n\t      },\n", "      {\n\t          'size': 5,\n\t          'padded_size': 8,\n\t          'compression_rank': -2\n\t      },\n\t  )\n\t  def test_basic(self, size, padded_size, compression_rank):\n\t    \"\"\"Validate low rank returned matrix.\"\"\"\n\t    assert size > abs(compression_rank) + 2\n\t    eps = 0.1\n", "    root = jax.jit(\n\t        functools.partial(\n\t            distributed_shampoo._low_rank_root,\n\t            p=2,\n\t            compression_rank=compression_rank,\n\t            ridge_epsilon=eps,\n\t            relative_matrix_epsilon=False,\n\t            padding_start=size))\n\t    rng = np.random.default_rng(1234)\n\t    a = rng.standard_normal(size=[size, size])\n", "    a = a.T.dot(a)\n\t    s, v = np.linalg.eigh(a + eps * np.eye(size))\n\t    padded_a = np.zeros([padded_size, padded_size])\n\t    padded_a[:size, :size] = a\n\t    r, metrics = root(padded_a)\n\t    packing_dim = abs(compression_rank) + 2\n\t    assert list(r.shape) == [padded_size, packing_dim]\n\t    e = metrics.inverse_pth_root_errors\n\t    rv, re, rc, _ = distributed_shampoo._low_rank_unpack(\n\t        r[:size, :packing_dim], compression_rank)\n", "    complement = np.eye(size) - rv.dot(rv.T)\n\t    root = complement * rc + rv.dot(np.diag(re).dot(rv.T))\n\t    s = s**(-0.5)\n\t    if compression_rank > 0:\n\t      s[:-compression_rank] = np.mean(s[:-compression_rank])\n\t    else:\n\t      s[-compression_rank:] = np.mean(s[-compression_rank:])\n\t    exact = v.dot(np.diag(s).dot(v.T))\n\t    error = np.max(np.abs(exact - root))\n\t    self.assertLessEqual(error, 1e-2)\n", "    self.assertLessEqual(e, 1e-2)\n\t  @parameterized.parameters(True, False)\n\t  def test_nonzero_epsilon(self, relative):\n\t    \"\"\"Tests that the proper epsilon is added.\"\"\"\n\t    root = jax.jit(\n\t        functools.partial(\n\t            distributed_shampoo._low_rank_root,\n\t            compression_rank=1,\n\t            ridge_epsilon=0.1,\n\t            relative_matrix_epsilon=relative,\n", "        ))\n\t    p = 2\n\t    a = np.zeros([4, 4], jnp.float32)\n\t    a[0, 0] = 2**p\n\t    eps = 0.1 * (a[0, 0] if relative else 1)\n\t    corner = jnp.float32((a[0, 0] + eps)**(-1.0 / p))\n\t    ridge = jnp.float32(eps**(-1.0 / p))\n\t    r, metrics = root(a, p)\n\t    v, e, c, _ = distributed_shampoo._low_rank_unpack(r, compression_rank=1)\n\t    err = metrics.inverse_pth_root_errors\n", "    assert list(v.shape) == [4, 1]\n\t    assert list(e.shape) == [1], e.shape\n\t    assert not c.shape\n\t    error = np.max(np.abs(corner - e[0]))\n\t    self.assertLessEqual(error, 10 * np.finfo(np.float32).eps)\n\t    self.assertLessEqual(err, 10 * np.finfo(np.float32).eps)\n\t    vec_error = np.max(np.abs(np.array([1, 0, 0, 0]) - v.ravel()))\n\t    self.assertLessEqual(vec_error, 10 * np.finfo(np.float32).eps, msg=v)\n\t    self.assertLessEqual(abs(c - ridge), 1e-4)\n\tdef _make_pack_unpack_cases():\n", "  sizes = [4, 8]\n\t  paddings = [0, 10]\n\t  cases = []\n\t  for zero_tail in [True, False]:\n\t    for size in sizes:\n\t      for padding in paddings:\n\t        for null_rank in [0, 1]:\n\t          nonzero_rank = size - 2 - null_rank - 1\n\t          for has_zeros in [True, False]:\n\t            cases.append({\n", "                'zero_tail': zero_tail,\n\t                'size': size,\n\t                'padding': padding,\n\t                'null_rank': null_rank,\n\t                'nonzero_rank': nonzero_rank,\n\t                'has_zeros': has_zeros,\n\t            })\n\t  return cases\n\tclass FDLowRankInverseRootTest(chex.TestCase):\n\t  def setUp(self):\n", "    super().setUp()\n\t    self.rank = None\n\t    self.p = None\n\t    self.rng = np.random.default_rng(1234)\n\t  def tearDown(self):\n\t    self.rank = None\n\t    self.p = None\n\t    self.rng = None\n\t    super().tearDown()\n\t  def _fd_update(\n", "      self,\n\t      grad=None,\n\t      prev=None,\n\t      ridge_epsilon=0.0,\n\t      relative_matrix_epsilon=False,\n\t      padding_start=None,\n\t  ):\n\t    assert self.p is not None\n\t    assert self.rank is not None\n\t    assert grad is not None or prev is not None\n", "    padded_size = len(grad) if grad is not None else len(prev)\n\t    if grad is None:\n\t      grad = np.zeros([padded_size, padded_size], np.float32)\n\t    else:\n\t      grad = np.array(grad).astype(np.float32)\n\t      assert list(grad.shape) == [padded_size, padded_size], grad.shape\n\t    if prev is None:\n\t      prev = np.zeros([padded_size, self.rank + 2], np.float32)\n\t    else:\n\t      prev = np.array(prev).astype(np.float32)\n", "      assert list(prev.shape) == [padded_size, self.rank + 2\n\t                                 ], (prev.shape, [padded_size, self.rank + 2])\n\t    if padding_start is None:\n\t      padding_start = padded_size\n\t    assert padding_start <= padded_size\n\t    fd_update = jax.jit(\n\t        functools.partial(\n\t            distributed_shampoo._fd_update_root,\n\t            rank=self.rank,\n\t            ridge_epsilon=ridge_epsilon,\n", "            relative_matrix_epsilon=relative_matrix_epsilon,\n\t            error_tolerance=0.0,\n\t            padding_start=padding_start,\n\t        ))\n\t    updated, _ = fd_update(grad, p=self.p, prev=prev)\n\t    x = {}\n\t    (x['eigvecs'], x['eigvals'], x['inverted_eigvals'], x['inverted_tail'],\n\t     x['tail'], x['has_zeros']) = distributed_shampoo._fd_low_rank_unpack(\n\t         updated, self.rank)\n\t    assert list(x['eigvecs'].shape) == [padded_size, self.rank]\n", "    assert list(x['eigvals'].shape) == [self.rank]\n\t    assert list(x['inverted_eigvals'].shape) == [self.rank]\n\t    assert not x['inverted_tail'].shape\n\t    assert not x['tail'].shape\n\t    if x['tail'] > 0:\n\t      self.assertAlmostEqual(x['tail']**(-1 / self.p), x['inverted_tail'])\n\t      np.testing.assert_allclose((x['eigvals'] + x['tail'])**(-1 / self.p),\n\t                                 x['inverted_eigvals'])\n\t    return x\n\t  def _make_fd_state(self, eigvecs, eigs, start_tail, padded_size=None):\n", "    size, dim = eigvecs.shape\n\t    assert dim == self.rank\n\t    assert self.rank is not None\n\t    assert self.p is not None\n\t    assert self.rank + 2 < size\n\t    assert len(eigs) == self.rank\n\t    if padded_size is None:\n\t      padded_size = size\n\t    assert size <= padded_size\n\t    eigvecs = jnp.pad(eigvecs, ((0, padded_size - size), (0, 0)))\n", "    eigs = np.array(eigs).astype(np.float32)\n\t    inv_eigs = np.where(eigs == 0.0, 0.0, eigs**(-1 / self.p))\n\t    inv_tail = 0.0 if start_tail == 0.0 else start_tail**(-1 / self.p)\n\t    return distributed_shampoo._fd_low_rank_pack(\n\t        eigvecs,\n\t        eigs,\n\t        inv_eigs,\n\t        inv_tail,\n\t        start_tail,\n\t        False,\n", "        self.rank,\n\t    )\n\t  def _make_eye_state(self, size, eigs, start_tail, padded_size=None):\n\t    eigvecs = np.eye(size, self.rank, dtype=np.float32)\n\t    return self._make_fd_state(eigvecs, eigs, start_tail, padded_size)\n\t  @parameterized.parameters(range(2, 9, 2))\n\t  def test_dynamic_exponent(self, p):\n\t    \"\"\"Test that exponent for various 'p' is correct.\"\"\"\n\t    self.rank = 1\n\t    self.p = p\n", "    size = 4\n\t    prev = self._make_eye_state(size, [0], 0.0)\n\t    grad = np.zeros([4, 4], np.float32)\n\t    grad[0, 0] = 2**(p / 2)  # Grad will get squared.\n\t    ret = self._fd_update(grad, prev)\n\t    self.assertAlmostEqual(ret['inverted_eigvals'], 1 / 2, delta=1e-6)\n\t    prev = self._make_eye_state(size, [2**p], 0.0)\n\t    grad = np.zeros([4, 4], np.float32)\n\t    ret = self._fd_update(grad, prev)\n\t    self.assertAlmostEqual(ret['inverted_eigvals'], 1 / 2, delta=1e-6)\n", "  @parameterized.parameters(True, False)\n\t  def test_nonzero_epsilon(self, relative):\n\t    \"\"\"Tests that the proper epsilon is added.\"\"\"\n\t    self.rank = 1\n\t    self.p = 2\n\t    size = 4\n\t    eig0 = 2**self.p\n\t    prev = self._make_eye_state(size, [eig0], 0.0)\n\t    grad = np.zeros([size, size])\n\t    ridge_epsilon = 0.1\n", "    ret = self._fd_update(\n\t        grad,\n\t        prev,\n\t        ridge_epsilon=ridge_epsilon,\n\t        relative_matrix_epsilon=relative,\n\t    )\n\t    eps = 0.1 * (eig0 if relative else 1)\n\t    self.assertAlmostEqual(eig0 + eps, ret['eigvals'][0], delta=1e-5)\n\t    v = ret['eigvecs'][:, 0]\n\t    vec_error = np.max(np.abs(np.array([1, 0, 0, 0]) - v.ravel()))\n", "    self.assertLessEqual(vec_error, 10 * np.finfo(np.float32).eps, msg=v)\n\t    self.assertAlmostEqual(ret['tail'], 0.0)\n\t  def _make_rand_state(self, size, eigs, start_tail, padded_size=None):\n\t    b = self.rng.standard_normal(size=[size, size])\n\t    b = b.dot(b.T)\n\t    _, v = np.linalg.eigh(b)\n\t    return self._make_fd_state(v[:, :self.rank], eigs, start_tail, padded_size)\n\t  @parameterized.parameters(_make_pack_unpack_cases())\n\t  def test_pack_unpack(self, size, padding, nonzero_rank, null_rank, zero_tail,\n\t                       has_zeros):\n", "    self.p = 2\n\t    self.rank = nonzero_rank + null_rank\n\t    eigs = np.concatenate(\n\t        [self.rng.uniform(size=[nonzero_rank]),\n\t         np.zeros([null_rank])])\n\t    self.rng.shuffle(eigs)\n\t    start_tail = 0.0 if zero_tail else self.rng.uniform()\n\t    padded_size = size + padding\n\t    packed = self._make_rand_state(size, eigs, start_tail, padded_size)\n\t    packed = packed.at[-1, -2].set(jnp.asarray(has_zeros).astype(jnp.float32))\n", "    ret = distributed_shampoo._fd_low_rank_unpack(packed, self.rank)\n\t    repacked = distributed_shampoo._fd_low_rank_pack(*(ret + (self.rank,)))\n\t    np.testing.assert_array_equal(packed, repacked)\n\t  @parameterized.parameters(itertools.product([0, 1], [0, 3], [True, False]))\n\t  def test_basic(self, axis, padding, use_fd_update):\n\t    \"\"\"Validate low rank returned matrix.\"\"\"\n\t    size = 5\n\t    padded_size = size + padding\n\t    self.rank = 2\n\t    self.p = 2\n", "    assert size > self.rank + 2\n\t    grad = self.rng.standard_normal(size=[size, size])\n\t    for i in range(size):\n\t      grad[i] /= np.linalg.norm(grad[i])\n\t    added_cov = grad.dot(grad.T) if axis == 0 else grad.T.dot(grad)\n\t    top_added_eig = np.linalg.eigvalsh(added_cov).max()\n\t    start_tail = 0.0\n\t    eigs = np.array([top_added_eig * 4, top_added_eig / 4])\n\t    prev = self._make_rand_state(size, eigs, start_tail, padded_size)\n\t    prev_eigvecs, *_ = distributed_shampoo._fd_low_rank_unpack(prev, self.rank)\n", "    if use_fd_update:\n\t      grad = distributed_shampoo.frequent_directions_update(\n\t          np.zeros([]),  # Ignored argument.\n\t          grad,\n\t          axis,\n\t          0.0,  # Ignored argument.\n\t          0.0,  # Ignored argument.\n\t      )\n\t    else:\n\t      # Align the axis to extract covariance for to dimension 0.\n", "      grad = grad if axis == 0 else grad.T\n\t    grad = np.pad(grad, ((0, padding), (0, padding)))\n\t    updated = self._fd_update(\n\t        grad,\n\t        prev,\n\t        padding_start=size,\n\t    )\n\t    prev_eigvecs = prev_eigvecs[:size, :]\n\t    self.assertEqual(np.abs(prev_eigvecs[size:]).sum(), 0.0)\n\t    half = np.float64(prev_eigvecs) * np.sqrt(np.float64(eigs))\n", "    full_cov = half.dot(half.T) + added_cov\n\t    s, new_v = np.linalg.eigh(np.float64(full_cov))\n\t    s = np.flip(s)  # Descending order.\n\t    new_v = np.flip(new_v, axis=1)\n\t    expected_v = new_v[:, :self.rank]\n\t    rv, re, tail = (updated[k] for k in ['eigvecs', 'eigvals', 'tail'])\n\t    self.assertEqual(np.abs(rv[size:]).sum(), 0.0)\n\t    rv = rv[:size, :]\n\t    cross_error = np.abs(rv.T.dot(expected_v))\n\t    self.assertLessEqual(\n", "        np.max(np.abs(np.eye(self.rank) - cross_error)), 1e-2, msg=cross_error)\n\t    cutoff = s[self.rank]\n\t    self.assertAlmostEqual(tail, start_tail + cutoff, delta=1e-2)\n\t    s[:self.rank] -= cutoff\n\t    np.testing.assert_allclose(s[:self.rank] + tail, re + tail, rtol=1e-2)\n\t  @parameterized.parameters(itertools.product([0, 3], [True, False]))\n\t  def test_basic_1(self, padding, use_fd_update):\n\t    \"\"\"Validate low rank returned matrix.\"\"\"\n\t    size = 5\n\t    padded_size = size + padding\n", "    self.rank = 2\n\t    self.p = 2\n\t    assert size > self.rank + 2\n\t    grad = self.rng.standard_normal(size=[size])\n\t    grad /= np.linalg.norm(grad)\n\t    added_cov = np.multiply.outer(grad, grad)\n\t    top_added_eig = 1.0  # Normalized vector outer product.\n\t    start_tail = 0.0\n\t    eigs = np.array([top_added_eig * 4, top_added_eig / 4])\n\t    prev = self._make_rand_state(size, eigs, start_tail, padded_size)\n", "    prev_eigvecs, *_ = distributed_shampoo._fd_low_rank_unpack(prev, self.rank)\n\t    if use_fd_update:\n\t      axis = 0\n\t      grad = distributed_shampoo.frequent_directions_update(\n\t          np.zeros([]),  # Ignored argument.\n\t          grad,\n\t          axis,\n\t          0.0,  # Ignored argument.\n\t          0.0,  # Ignored argument.\n\t      )\n", "    else:\n\t      grad = np.pad(grad.reshape(-1, 1), ((0, 0), (0, size - 1)))\n\t    grad = np.pad(grad, ((0, padding), (0, padding)))\n\t    updated = self._fd_update(\n\t        grad,\n\t        prev,\n\t        padding_start=size,\n\t    )\n\t    prev_eigvecs = prev_eigvecs[:size, :]\n\t    self.assertEqual(np.abs(prev_eigvecs[size:]).sum(), 0.0)\n", "    half = np.float64(prev_eigvecs) * np.sqrt(np.float64(eigs))\n\t    full_cov = half.dot(half.T) + added_cov\n\t    s, new_v = np.linalg.eigh(np.float64(full_cov))\n\t    s = np.flip(s)  # Descending order.\n\t    new_v = np.flip(new_v, axis=1)\n\t    expected_v = new_v[:, :self.rank]\n\t    rv, re, tail = (updated[k] for k in ['eigvecs', 'eigvals', 'tail'])\n\t    self.assertEqual(np.abs(rv[size:]).sum(), 0.0)\n\t    rv = rv[:size, :]\n\t    cross_error = np.abs(rv.T.dot(expected_v))\n", "    self.assertLessEqual(\n\t        np.max(np.abs(np.eye(self.rank) - cross_error)), 1e-2, msg=cross_error)\n\t    cutoff = s[self.rank]\n\t    self.assertAlmostEqual(tail, start_tail + cutoff, delta=1e-2)\n\t    s[:self.rank] -= cutoff\n\t    np.testing.assert_allclose(s[:self.rank] + tail, re + tail, rtol=1e-2)\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/sm3_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for distributed_shampoo.\"\"\"\n\tfrom absl.testing import absltest\n\timport chex\n\timport jax\n\timport jax.numpy as jnp\n\tfrom precondition import sm3\n\tclass SM3Test(chex.TestCase):\n", "  def setUp(self):\n\t    super().setUp()\n\t    self.init_params = (\n\t        jnp.array([[0.5, 0.5], [0.5, 0.5]]))\n\t    self.per_step_updates = (jnp.array([[0.1, -0.1], [0.01, 0.01]]))\n\t  @chex.all_variants(with_pmap=False)\n\t  def test_sm3_basic(self):\n\t    params = self.init_params\n\t    optim = sm3.sm3(0.1, 0.9, 0.999)\n\t    init_fn = self.variant(optim.init)\n", "    transform_fn = self.variant(optim.update)\n\t    def _update(unused_batch):\n\t      return transform_fn(self.per_step_updates, state, params)\n\t    state = init_fn(params)\n\t    chex.assert_tree_all_finite(state)\n\t    pmap_fn = jax.pmap(_update, axis_name='batch')\n\t    updates, state = pmap_fn(jnp.array([1.0]))\n\t    chex.assert_tree_all_finite((params, updates, state))\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/distributed_shampoo.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Distributed Shampoo Implementation.\"\"\"\n\timport enum\n\timport functools\n\timport itertools\n\timport logging\n\tfrom typing import (Any, Callable, cast, List, NamedTuple, Optional, Sequence,\n\t                    Tuple, TypeVar, Union)\n", "import chex\n\tfrom flax import struct\n\timport jax\n\tfrom jax import lax\n\tfrom jax.experimental import pjit\n\tfrom jax.experimental.sparse import linalg\n\timport jax.numpy as jnp\n\timport numpy as np\n\timport optax\n\tfrom precondition.quantization_utils import QuantizedValue\n", "# Dtype for inverse-pth root routine\n\t# Switch to f64 if you have hardware that supports it. Enable the jax flag\n\t# jax_enable_x64 for this to work, otherwise it will default to float32.\n\t_MAT_INV_PTH_ROOT_DTYPE = jnp.float64\n\t# Small epsilon to avoid divide by zero.\n\t_EPSILON = 1e-25\n\tdef preconditioning_compute_steps_schedule(\n\t    lr_fn,\n\t    start_preconditioning_compute_steps,\n\t    end_preconditioning_compute_steps,\n", "    step,\n\t):\n\t  \"\"\"Schedule preconditioning_compute_steps over time.\n\t  Increases preconditioning_compute_steps following learning_rate schedule fn\n\t  from start_preconditioning_compute_steps to end_preconditioning_compute_steps.\n\t  Rounds the current preconditioning_compute_steps_t value to the nearest 10.\n\t  Args:\n\t    lr_fn: Learning rate schedule function.\n\t    start_preconditioning_compute_steps: The value of\n\t      preconditioning_compute_steps to use at start of training.\n", "    end_preconditioning_compute_steps: The value of\n\t      preconditioning_compute_steps to use at end of training.\n\t    step: Current training step.\n\t  Returns:\n\t    The current number of steps to compute preconditioners after.\n\t  \"\"\"\n\t  base_lr = lr_fn(0)\n\t  lr = lr_fn(step)\n\t  decay_factor = lr / base_lr\n\t  preconditioning_compute_steps_t = (\n", "      start_preconditioning_compute_steps\n\t      + (1 - decay_factor) * end_preconditioning_compute_steps\n\t  )\n\t  return jnp.maximum((preconditioning_compute_steps_t // 10) * 10, 1)\n\tdef _default_zero_field():\n\t  return struct.field(\n\t      default_factory=functools.partial(jnp.array, 0, jnp.float32))\n\tT = TypeVar(\"T\")\n\tdef _maybe_ix(ls: Optional[Sequence[T]], ix: int) -> Optional[T]:\n\t  \"\"\"Return ls[ix] if not None else None.\"\"\"\n", "  if ls is None:\n\t    return None\n\t  return ls[ix]\n\tdef _maybe(f):\n\t  \"\"\"Lifts f to Maybe monad; ie return None if first arg is.\"\"\"\n\t  def wrap_f(x, *args, **kwargs):\n\t    if x is None:\n\t      return None\n\t    return f(x, *args, **kwargs)\n\t  return wrap_f\n", "InversePthRootDiagnosticsSubtype = TypeVar(\n\t    \"InversePthRootDiagnosticsSubtype\", bound=\"InversePthRootDiagnostics\")\n\t@struct.dataclass\n\tclass InversePthRootDiagnostics:\n\t  \"\"\"Diagnostics for inverse p-th root iterative procedure.\n\t  Given an inverse pth root B = A^(-1/p), contains the average and\n\t  maximum diagonal and off diagonal absolute entrywise errors between\n\t  (B^p A) and I.\n\t  \"\"\"\n\t  max_diag_error: chex.Array = _default_zero_field()\n", "  avg_diag_error: chex.Array = _default_zero_field()\n\t  max_off_diag_error: chex.Array = _default_zero_field()\n\t  avg_off_diag_error: chex.Array = _default_zero_field()\n\t  p: chex.Array = _default_zero_field()\n\t  @classmethod\n\t  def create(cls: type[InversePthRootDiagnosticsSubtype],\n\t             pth_inverse_root: jnp.ndarray, matrix: jnp.ndarray,\n\t             p: Union[jnp.ndarray, int]) -> InversePthRootDiagnosticsSubtype:\n\t    \"\"\"Generates a diagnostics struct from (-1/p) root result.\"\"\"\n\t    mat_m = jnp.matmul(\n", "        mat_power(pth_inverse_root, p),\n\t        matrix,\n\t        precision=jax.lax.Precision.HIGHEST)\n\t    num_off_diag_entries = mat_m.size - jnp.diag(mat_m).size\n\t    diag_error = jnp.abs(jnp.diag(mat_m) - 1).astype(jnp.float32)\n\t    off_diag_error = jnp.abs(mat_m - jnp.diag(jnp.diag(mat_m))).astype(\n\t        jnp.float32)\n\t    return cls(\n\t        max_diag_error=jnp.max(diag_error).astype(jnp.float32),\n\t        avg_diag_error=jnp.mean(diag_error).astype(jnp.float32),\n", "        max_off_diag_error=jnp.max(off_diag_error).astype(jnp.float32),\n\t        avg_off_diag_error=(jnp.sum(off_diag_error) /\n\t                            num_off_diag_entries).astype(jnp.float32),\n\t        p=jnp.array(p, jnp.float32))\n\tLOBPCGDiagnosticsSubtype = TypeVar(\n\t    \"LOBPCGDiagnosticsSubtype\", bound=\"LOBPCGDiagnostics\")\n\t@struct.dataclass\n\tclass LOBPCGDiagnostics:\n\t  \"\"\"Diagnostics for iterative LOBPCG eigenvalue routine.\n\t  Contains consistency error for LOBPCG eigenvalue routine, which\n", "  refers to |A v - lambda v| / (lambda + |A v|) for a proposed eigenpair\n\t  (v, lambda). This metics dataclass retains consistency error\n\t  and other useful LOBPCG values.\n\t  \"\"\"\n\t  lobpcg_iters: chex.Array = _default_zero_field()\n\t  max_consistency_error: chex.Array = _default_zero_field()\n\t  avg_consistency_error: chex.Array = _default_zero_field()\n\t  # Average of absolute value of off-diagonal of V^T V for eigenvalues V.\n\t  avg_orthogonality_error: chex.Array = _default_zero_field()\n\t  max_eigenvalue: chex.Array = _default_zero_field()\n", "  min_eigenvalue: chex.Array = _default_zero_field()\n\t  num_topk_eigenvectors: chex.Array = _default_zero_field()\n\t  @classmethod\n\t  def create(cls: type[LOBPCGDiagnosticsSubtype], matrix: jnp.ndarray,\n\t             eigvals: jnp.ndarray, eigvecs: jnp.ndarray,\n\t             lobpcg_iters: jnp.ndarray) -> LOBPCGDiagnosticsSubtype:\n\t    \"\"\"Generates LOBPCG diagnostics from the result of the routine.\"\"\"\n\t    num_topk = len(eigvals)\n\t    num_off_diag = num_topk * (num_topk - 1)\n\t    precision = jax.lax.Precision.HIGHEST\n", "    mat_eigvecs = matrix.dot(eigvecs, precision=precision)\n\t    consistency_error_unnormalized = jnp.linalg.norm(\n\t        mat_eigvecs - eigvals * eigvecs, ord=2, axis=0)\n\t    normalization = jnp.linalg.norm(mat_eigvecs, ord=2, axis=0) + eigvals\n\t    consistency_error = consistency_error_unnormalized / normalization\n\t    orthogonality_error = eigvecs.T.dot(eigvecs, precision=precision)\n\t    orthogonality_error -= jnp.diag(jnp.diag(orthogonality_error))\n\t    return cls(\n\t        lobpcg_iters=jnp.array(lobpcg_iters, jnp.float32),\n\t        max_consistency_error=jnp.max(consistency_error).astype(jnp.float32),\n", "        avg_consistency_error=jnp.mean(consistency_error).astype(jnp.float32),\n\t        avg_orthogonality_error=(jnp.sum(orthogonality_error) /\n\t                                 num_off_diag).astype(jnp.float32),\n\t        max_eigenvalue=jnp.max(eigvals).astype(jnp.float32),\n\t        min_eigenvalue=jnp.min(eigvals).astype(jnp.float32),\n\t        num_topk_eigenvectors=jnp.array(num_topk, jnp.float32),\n\t    )\n\t@struct.dataclass\n\tclass FDDiagnostics:\n\t  \"\"\"Diagnostics for FD updates.\"\"\"\n", "  # General size information: block max size, rank (statically known, but\n\t  # convenient to have in stats) along with the actual dim we're\n\t  # preconditioning, size_padding_start.\n\t  size_max_size: chex.Array = _default_zero_field()\n\t  size_rank: chex.Array = _default_zero_field()\n\t  size_padding_start: chex.Array = _default_zero_field()\n\t  # Most recent eigenvalue deflation amount.\n\t  rho: chex.Array = _default_zero_field()\n\t  tail: chex.Array = _default_zero_field()\n\t  # Eigenvalue statistics. Sparsity includes zeros\n", "  # added as a result of zeroing out unstable eigenvalues.\n\t  eig_sparsity: chex.Array = _default_zero_field()\n\t  eig_max: chex.Array = _default_zero_field()\n\t  eig_min: chex.Array = _default_zero_field()\n\t  # Gradient staistics.\n\t  new_grad_abs_max: chex.Array = _default_zero_field()\n\t  new_grad_sparsity: chex.Array = _default_zero_field()\n\t  new_grad_col_sparsity: chex.Array = _default_zero_field()\n\t  ggt_eig_max: chex.Array = _default_zero_field()\n\t  ggt_intrinsic_dimension: chex.Array = _default_zero_field()\n", "  # Orthogonality error for eigenvectors.\n\t  max_ortho_err: chex.Array = _default_zero_field()\n\t  # After deflation, how many eigenvalues were negative?\n\t  num_neg_eigs: chex.Array = _default_zero_field()\n\t  # After deflation, but before zeroing out numerically unstable eigenvalues,\n\t  # how many eigenvalues were already zero?\n\t  num_zero_initial_eigs: chex.Array = _default_zero_field()\n\t  # How many returned singular vectors were more than 1% off unit norm.\n\t  num_unsafe_norms: chex.Array = _default_zero_field()\n\t  # Of safely-normed vectors, how many had 1% total absolute value in\n", "  # padding dimensions?\n\t  num_has_padding: chex.Array = _default_zero_field()\n\t  # Square frobenius norm error from the top-k svd approximation itself.\n\t  square_frob: chex.Array = _default_zero_field()\n\t  # A heuristic expected square frobenius error, the sum of the remaining\n\t  # eigenvalues (which currently relies on the f32 svd's computation\n\t  # of the remaining eigenvalues, but in the future could be the difference\n\t  # ||A||_F^2 - ||A_k||_F^2. Note this is heuristic, and not the actual\n\t  # expectation.\n\t  heuristic_frob: chex.Array = _default_zero_field()\n", "  # Among the expected-nonzero entries in the matrix we're decomposing,\n\t  # what is the average entrywise error from the top-k approximation?\n\t  # ||A - A_k||_1 / size(A)\n\t  entrywise_err: chex.Array = _default_zero_field()\n\t  # Trace ||A||_F^2 = tr A^2, which normalizes the frobenius error.\n\t  # It's equal to the sum of squared singular values of A.\n\t  total_frob: chex.Array = _default_zero_field()\n\t  @classmethod\n\t  def create(\n\t      cls: type[\"FDDiagnostics\"],\n", "      rho: jnp.ndarray,\n\t      tail: jnp.ndarray,\n\t      eigs: jnp.ndarray,\n\t      new_grad: jnp.ndarray,\n\t      eigvecs: jnp.ndarray,\n\t      padding_start: jnp.ndarray,\n\t      max_size: jnp.ndarray,\n\t      num_neg_eigs: jnp.ndarray,\n\t      num_zero_initial_eigs: jnp.ndarray,\n\t      num_unsafe_norms: jnp.ndarray,\n", "      num_has_padding: jnp.ndarray,\n\t      frob: jnp.ndarray,\n\t      expected_frob: jnp.ndarray,\n\t      entrywise_svd_err: jnp.ndarray,\n\t      total_frob: jnp.ndarray,\n\t  ) -> \"FDDiagnostics\":\n\t    \"\"\"Generates FD diagnostics from the result of the routine.\"\"\"\n\t    max_size, rank = eigvecs.shape\n\t    assert rank + 2 < max_size\n\t    assert eigs.shape == (rank,), eigs.shape\n", "    eig_sparsity = (eigs == 0).mean()\n\t    eig_max = jnp.max(eigs).astype(jnp.float32)\n\t    eig_min = jnp.min(eigs, where=eigs.astype(bool), initial=eig_max)\n\t    padding_ix = (jnp.arange(max_size) >= padding_start)\n\t    nonpadding_ix = 1 - padding_ix\n\t    mask = nonpadding_ix * nonpadding_ix[:, jnp.newaxis]\n\t    new_grad *= mask\n\t    new_grad_abs_max = jnp.max(jnp.abs(new_grad)).astype(jnp.float32)\n\t    new_grad_sparsity = jnp.sum(mask * (new_grad == 0)).astype(\n\t        jnp.float32) / padding_start**2\n", "    new_grad_col_l1 = jnp.abs(new_grad).sum(axis=0)\n\t    new_grad_col_sparsity = (\n\t        jnp.sum(nonpadding_ix * (new_grad_col_l1 == 0)).astype(jnp.float32)\n\t        / padding_start\n\t    )\n\t    # TODO(vladf): consider power iteration instead.\n\t    ggt = jnp.matmul(new_grad, new_grad.T, precision=jax.lax.Precision.HIGHEST)\n\t    ggt_eigs = jnp.linalg.eigvalsh(ggt)\n\t    ggt_eig_max = jnp.max(ggt_eigs)\n\t    ggt_intrinsic_dimension = jnp.trace(ggt) / ggt_eig_max\n", "    cross = jnp.matmul(eigvecs.T, eigvecs, precision=jax.lax.Precision.HIGHEST)\n\t    ortho_err = jnp.abs(cross - jnp.diag(jnp.diag(cross)))\n\t    max_ortho_err = jnp.max(ortho_err).astype(jnp.float32)\n\t    return cls(\n\t        size_padding_start=jnp.array(padding_start).astype(jnp.float32),\n\t        size_max_size=jnp.array(max_size).astype(jnp.float32),\n\t        size_rank=jnp.array(eigvecs.shape[1]).astype(jnp.float32),\n\t        rho=rho.astype(jnp.float32),\n\t        tail=tail.astype(jnp.float32),\n\t        eig_sparsity=eig_sparsity,\n", "        eig_max=eig_max,\n\t        eig_min=eig_min,\n\t        new_grad_abs_max=new_grad_abs_max,\n\t        new_grad_sparsity=new_grad_sparsity,\n\t        new_grad_col_sparsity=new_grad_col_sparsity,\n\t        ggt_eig_max=ggt_eig_max,\n\t        ggt_intrinsic_dimension=ggt_intrinsic_dimension,\n\t        max_ortho_err=max_ortho_err,\n\t        num_neg_eigs=num_neg_eigs.astype(jnp.float32),\n\t        num_zero_initial_eigs=num_zero_initial_eigs.astype(jnp.float32),\n", "        num_unsafe_norms=num_unsafe_norms.astype(jnp.float32),\n\t        num_has_padding=num_has_padding.astype(jnp.float32),\n\t        square_frob=frob,\n\t        heuristic_frob=expected_frob,\n\t        entrywise_err=entrywise_svd_err,\n\t        total_frob=total_frob,\n\t    )\n\t@struct.dataclass\n\tclass TrainingMetrics:\n\t  \"\"\"Diagnostic metrics from training.\"\"\"\n", "  # Error for inverse-pth roots.\n\t  inverse_pth_root_errors: chex.Array = _default_zero_field()\n\t  # Iteration count for inverse-pth roots.\n\t  inverse_pth_root_iters: chex.Array = _default_zero_field()\n\t  # If final iteration error increases sufficiently, iteration terminates early.\n\t  # This field records the ratio of the final iteration error.\n\t  final_error_ratio: chex.Array = _default_zero_field()\n\t  # Max eigen value from either the power iteration or from LOBPCG.\n\t  max_eigen_value: chex.Array = _default_zero_field()\n\t  # Total retries of inverse pth root iterative method.\n", "  total_retries: chex.Array = _default_zero_field()\n\t  lobpcg_diagnostics: LOBPCGDiagnostics = struct.field(\n\t      default_factory=LOBPCGDiagnostics)\n\t  # Rich matrix entrywise error diagnostics, if enabled.\n\t  inverse_pth_root_diagnostics: InversePthRootDiagnostics = struct.field(\n\t      default_factory=InversePthRootDiagnostics)\n\t  # Diagnostics applied to the conditioned p-th root problem, after top\n\t  # eigenvectors are removed, if LOBPCG is being applied.\n\t  conditioned_inverse_pth_root_diagnostics: InversePthRootDiagnostics = (\n\t      struct.field(default_factory=InversePthRootDiagnostics))\n", "  fd: Union[FDDiagnostics,\n\t            optax.MaskedNode] = struct.field(default_factory=optax.MaskedNode)\n\t# Per parameter optimizer state used in data-parallel training.\n\tclass ParameterStats(NamedTuple):\n\t  \"\"\"State associated to each parameter of the model being trained.\"\"\"\n\t  diagonal_statistics: QuantizedValue  # Accumulator for diagonal preconditioner\n\t  statistics: Optional[List[Any]]  # Statistics (QuantizedValue, chex.Array)\n\t  preconditioners: List[Any]  # Preconditioners (QuantizedValue, chex.Array)\n\t  diagonal_momentum: QuantizedValue  # Momentum for the diagonal preconditioner\n\t  momentum: QuantizedValue  # Momentum for the shampoo preconditioner\n", "  avg_grad: Union[chex.Array, optax.MaskedNode]  # Average gradient for FD.\n\t  training_metrics: Union[TrainingMetrics, optax.MaskedNode]  # Optional.\n\t# For training extremely large model; We keep a global state with a concatenated\n\t# statistics and preconditioner states for all vars. This is so that we can\n\t# annotate the leading axis to be sharded to save memory at the cost of\n\t# communication.\n\t@struct.dataclass\n\tclass GlobalShardedParameterStats:\n\t  statistics: chex.Array  # Statistics\n\t  preconditioners: chex.Array  # Preconditioners\n", "  exponents: chex.Array  # exponents\n\t# These are per-parameter local states; All statistics here mirror the parameter\n\t# Thus the sharding is copied over from the param specification.\n\t@struct.dataclass\n\tclass LocalShardedParameterStats:\n\t  \"\"\"State associated to each parameter of the model being trained.\"\"\"\n\t  diagonal_statistics: QuantizedValue  # Accumulator for diagonal preconditioner\n\t  diagonal_momentum: QuantizedValue  # Momentum for the diagonal preconditioner\n\t  momentum: QuantizedValue  # Momentum for the shampoo preconditioner\n\t  avg_grad: Union[chex.Array, optax.MaskedNode]  # Average gradient for FD.\n", "  training_metrics: Union[TrainingMetrics, optax.MaskedNode]\n\t  index_start: np.int32 = struct.field(\n\t      pytree_node=False)  # Index into global statistics array\n\t  sizes: Any = struct.field(pytree_node=False)  # Sizes of the statistics.\n\tdef init_avg_grad(\n\t    param: chex.Array,\n\t    frequent_directions: bool) -> Union[chex.Array, optax.MaskedNode]:\n\t  \"\"\"Initializes a gradient average variable, if active.\"\"\"\n\t  if not frequent_directions:\n\t    return optax.MaskedNode()\n", "  return jnp.zeros_like(param)\n\tdef init_avg_grad_shape(\n\t    param: chex.Array,\n\t    frequent_directions: bool) -> Union[Any, optax.MaskedNode]:\n\t  \"\"\"Returns gradient average variable shape/dtype, if active.\"\"\"\n\t  if not frequent_directions:\n\t    return optax.MaskedNode()\n\t  return [param.shape, param.dtype]\n\tdef init_avg_grad_pspec(\n\t    param: jax.sharding.PartitionSpec,\n", "    frequent_directions: bool) -> Union[Any, optax.MaskedNode]:\n\t  if not frequent_directions:\n\t    return optax.MaskedNode()\n\t  return param\n\tdef default_training_metrics(\n\t    generate_fd_metrics: bool = False,\n\t):\n\t  \"\"\"Create a default TrainingMetrics.\"\"\"\n\t  if generate_fd_metrics:\n\t    return TrainingMetrics(fd=FDDiagnostics())\n", "  return TrainingMetrics()\n\tdef init_training_metrics(\n\t    num_statistics: int,\n\t    generate_training_metrics: bool,\n\t    generate_fd_metrics: bool = False,\n\t) -> Union[TrainingMetrics, optax.MaskedNode]:\n\t  \"\"\"Initialize TrainingMetrics, masked if disabled.\"\"\"\n\t  if not generate_training_metrics:\n\t    return optax.MaskedNode()\n\t  return jax.tree_map(\n", "      functools.partial(jnp.repeat, repeats=num_statistics),\n\t      default_training_metrics(\n\t          generate_fd_metrics=generate_fd_metrics,\n\t      ))\n\tdef init_training_metrics_shapes(\n\t    num_statistics: int,\n\t    generate_training_metrics: bool,\n\t    generate_fd_metrics: bool = False,\n\t) -> Union[TrainingMetrics, optax.MaskedNode]:\n\t  \"\"\"Initialize training metrics shape/dtype.\"\"\"\n", "  seed = init_training_metrics(\n\t      num_statistics,\n\t      generate_training_metrics,\n\t      generate_fd_metrics=generate_fd_metrics,\n\t  )\n\t  return jax.tree_map(lambda arr: [list(arr.shape), arr.dtype], seed)\n\tdef init_training_metrics_pspec(\n\t    generate_training_metrics: bool,\n\t    generate_fd_metrics: bool = False,\n\t) -> Union[TrainingMetrics, optax.MaskedNode]:\n", "  \"\"\"Initialize training metrics partition specification.\"\"\"\n\t  if not generate_training_metrics:\n\t    return optax.MaskedNode()\n\t  return jax.tree_map(\n\t      lambda _: jax.sharding.PartitionSpec(),\n\t      default_training_metrics(\n\t          generate_fd_metrics=generate_fd_metrics,\n\t      ))\n\tclass ShardedShampooStats(NamedTuple):\n\t  \"\"\"Shampoo state in sharded mode.\"\"\"\n", "  global_stats: Any\n\t  local_stats: Any\n\tclass ShampooState(NamedTuple):\n\t  count: chex.Array\n\t  stats: Any\n\tclass InitFnState(NamedTuple):\n\t  init_fn: Any\n\t  pspec_fn: Any\n\t  shape_and_dtype_fn: Any\n\tclass GraftingType(enum.IntEnum):\n", "  NONE = 0\n\t  SGD = 1\n\t  ADAGRAD = 2\n\t  RMSPROP = 3\n\t  RMSPROP_NORMALIZED = 4\n\t  SQRT_N = 5\n\t  ADAGRAD_NORMALIZED = 6\n\tclass PreconditionerType(enum.IntEnum):\n\t  # Default, computes preconditioner for each dim\n\t  ALL = 1\n", "  # One sided Shampoo, in this cases only on input dim.\n\t  # Assumes last dim is always the output dim and everything else input dim.\n\t  INPUT = 2\n\t  # One sided Shampoo, in this cases only on output dim.\n\t  # Assumes last dim is always the output dim and everything else input dim.\n\t  OUTPUT = 3\n\tdef _precond_dim(compression_rank, dim):\n\t  \"\"\"Returns compressed dimension if it's smaller than dim with metadata.\"\"\"\n\t  if not compression_rank:\n\t    return dim\n", "  # If storing the compressed rank preconditioner and metadata\n\t  # would require more memory, just don't compress.\n\t  #\n\t  # See compression_rank argument of distributed_shampoo() for why it can\n\t  # be negative.\n\t  compressed_size = abs(compression_rank) + 2\n\t  if compressed_size >= dim:\n\t    return dim\n\t  return compressed_size\n\tdef _should_compress(compression_rank: int, dim: jnp.ndarray):\n", "  \"\"\"Consistent with _precond_dim, whether we should use compression.\"\"\"\n\t  return compression_rank != 0 and abs(compression_rank) + 2 < dim\n\tdef _low_rank_unpack(preconditioner, compression_rank):\n\t  \"\"\"Unpacks low-rank preconditioning params from rectangular preconditioner.\"\"\"\n\t  eigvecs, eigvals, inverted_eigvals, const, tail, has_zeros = (\n\t      _fd_low_rank_unpack(preconditioner, compression_rank))\n\t  del eigvals, tail\n\t  return eigvecs, inverted_eigvals, const, has_zeros\n\tdef _low_rank_pack(eigvecs, eigvals, const, compression_rank):\n\t  \"\"\"Packs low-rank preconditioning params from rectangular preconditioner.\"\"\"\n", "  has_zeros = False\n\t  return _fd_low_rank_pack(eigvecs, jnp.zeros_like(eigvals), eigvals, const,\n\t                           0.0, has_zeros, compression_rank)\n\tdef _fd_low_rank_unpack(preconditioner, compression_rank):\n\t  \"\"\"Unpacks like in low rank but includes original eigvals.\"\"\"\n\t  r = abs(compression_rank)\n\t  assert r != 0, compression_rank\n\t  assert len(preconditioner.shape) == 2, preconditioner.shape\n\t  dim, storage_dim = preconditioner.shape\n\t  assert storage_dim < dim\n", "  assert storage_dim == r + 2\n\t  eigvecs = preconditioner[:, :r]\n\t  inverted_eigvals = preconditioner[:r, -2]\n\t  const = preconditioner[0, -1]\n\t  eigvals = preconditioner[-r:, -1]\n\t  tail = preconditioner[1, -1]\n\t  has_zeros = preconditioner[-1, -2].astype(bool)\n\t  return eigvecs, eigvals, inverted_eigvals, const, tail, has_zeros\n\tdef _fd_low_rank_pack(eigvecs, deflated_eigs, inverted_eigs, new_const,\n\t                      new_tail, has_zeros, rank):\n", "  \"\"\"Inverses _fd_low_rank_unpack.\"\"\"\n\t  # Note this respects low_rank_root packing.\n\t  rank = abs(rank)\n\t  assert rank > 0\n\t  d = eigvecs.shape[0]\n\t  assert eigvecs.shape[1] == rank\n\t  assert eigvecs.ndim == 2\n\t  assert list(deflated_eigs.shape) == [rank], deflated_eigs.shape\n\t  assert list(inverted_eigs.shape) == [rank], inverted_eigs.shape\n\t  assert _precond_dim(rank, d) == rank + 2\n", "  assert _precond_dim(rank, d) < d\n\t  precond = jnp.zeros((d, rank + 2))\n\t  precond = precond.at[:, :rank].set(eigvecs)\n\t  precond = precond.at[:rank, -2].set(inverted_eigs)\n\t  precond = precond.at[0, -1].set(new_const)\n\t  precond = precond.at[1, -1].set(new_tail)\n\t  precond = precond.at[-rank:, -1].set(deflated_eigs)\n\t  precond = precond.at[-1, -2].set(jnp.asarray(has_zeros).astype(jnp.float32))\n\t  return precond\n\tdef power_iteration(\n", "    matrix: jnp.ndarray,\n\t    num_iters: int = 100,\n\t    error_tolerance: float = 1e-6,\n\t    precision: lax.Precision = lax.Precision.HIGHEST,\n\t    padding_start: Union[int, jnp.ndarray, None] = None,\n\t) -> Tuple[jnp.ndarray, jnp.ndarray]:\n\t  r\"\"\"Power iteration algorithm.\n\t  The power iteration algorithm takes a symmetric PSD matrix `A`, and produces\n\t  a scalar `\\lambda` , which is the greatest (in absolute value) eigenvalue\n\t  of `A`, and a vector v, which is the corresponding eigenvector of `A`.\n", "  References:\n\t    [Wikipedia, 2021](https://en.wikipedia.org/wiki/Power_iteration)\n\t  Args:\n\t    matrix: the symmetric PSD matrix.\n\t    num_iters: Number of iterations.\n\t    error_tolerance: Iterative exit condition.\n\t    precision: precision XLA related flag, the available options are: a)\n\t      lax.Precision.DEFAULT (better step time, but not precise) b)\n\t      lax.Precision.HIGH (increased precision, slower) c) lax.Precision.HIGHEST\n\t      (best possible precision, slowest)\n", "    padding_start: if set, assumes rows and columns after padding_start are\n\t      zero.\n\t  Returns:\n\t    eigen vector, eigen value\n\t  \"\"\"\n\t  matrix_size = matrix.shape[-1]\n\t  def _iter_condition(state):\n\t    i, unused_v, unused_s, unused_s_v, run_step = state\n\t    return jnp.logical_and(i < num_iters, run_step)\n\t  def _iter_body(state):\n", "    \"\"\"One step of power iteration.\"\"\"\n\t    i, new_v, s, s_v, unused_run_step = state\n\t    new_v = new_v / jnp.linalg.norm(new_v)\n\t    s_v = jnp.einsum(\"ij,j->i\", matrix, new_v, precision=precision)\n\t    s_new = jnp.einsum(\"i,i->\", new_v, s_v, precision=precision)\n\t    return (i + 1, s_v, s_new, s_v,\n\t            jnp.greater(jnp.abs(s_new - s), error_tolerance))\n\t  # Figure out how to use step as seed for random.\n\t  v_0 = np.random.RandomState(1729).uniform(-1.0, 1.0,\n\t                                            matrix_size).astype(matrix.dtype)\n", "  v_0 = jnp.array(v_0)\n\t  if padding_start is not None:\n\t    v_0 *= (jnp.arange(len(v_0), dtype=jnp.int32) < padding_start)\n\t  init_state = tuple([0, v_0, jnp.zeros([], dtype=matrix.dtype), v_0, True])\n\t  _, v_out, s_out, _, _ = lax.while_loop(_iter_condition, _iter_body,\n\t                                         init_state)\n\t  v_out = v_out / jnp.linalg.norm(v_out)\n\t  return v_out, s_out\n\tdef mat_power(\n\t    mat_m: jnp.ndarray,\n", "    p: Union[int, jnp.ndarray],\n\t    precision: lax.Precision = lax.Precision.HIGHEST,\n\t) -> jnp.ndarray:\n\t  \"\"\"A simple matrix power method. M^p where p can be TracedValue.\"\"\"\n\t  power = jnp.eye(mat_m.shape[0], dtype=_MAT_INV_PTH_ROOT_DTYPE)\n\t  def _iter_condition(state):\n\t    i, _, _ = state\n\t    return i > 0\n\t  def _iter_body(state):\n\t    i, power, mat = state\n", "    power = jax.lax.cond(i % 2 == 1,\n\t                         lambda: jnp.matmul(mat, power, precision=precision),\n\t                         lambda: power)\n\t    i //= 2\n\t    mat = jnp.matmul(mat, mat, precision=precision)\n\t    return i, power, mat\n\t  _, result, _ = lax.while_loop(_iter_condition, _iter_body, (p, power, mat_m))\n\t  return result\n\tdef _pth_root_difference(w: jnp.ndarray, alpha: jnp.ndarray, beta: jnp.ndarray,\n\t                         p: Union[int, jnp.ndarray]) -> jnp.ndarray:\n", "  \"\"\"Computes (w+alpha)^(-1/p)-(w+beta)^(-1/p).\"\"\"\n\t  a = w + alpha\n\t  b = w + beta\n\t  a_minus_b = alpha - beta\n\t  exp = -1 / p\n\t  def _stable_subtract(b, a_minus_b):\n\t    # Mathematically identical to the target expression, with (w+beta)^(-1/p)\n\t    # term factored out and w cancellation in the subtraction.\n\t    return (b**exp) * jnp.expm1(exp * jnp.log1p(a_minus_b / b))\n\t  return jnp.where(\n", "      # Choose the branch with the best log1p approximation.\n\t      jnp.abs(a_minus_b / b) < jnp.abs(a_minus_b / a),\n\t      -_stable_subtract(a, -a_minus_b),\n\t      _stable_subtract(b, a_minus_b))\n\tdef matrix_inverse_pth_root(\n\t    matrix: jnp.ndarray,\n\t    p: Union[int, jnp.ndarray],\n\t    num_iters: int = 100,\n\t    ridge_epsilon: float = 1e-6,\n\t    error_tolerance: float = 1e-6,\n", "    precision: lax.Precision = lax.Precision.HIGHEST,\n\t    relative_matrix_epsilon: bool = True,\n\t    lobpcg_topk_precondition: int = 0,\n\t    lobpcg_max_iter: int = 0,\n\t    padding_start: Union[int, jnp.ndarray, None] = None,\n\t    prev: Optional[jnp.ndarray] = None,\n\t    eigh=False,\n\t) -> Tuple[jnp.ndarray, TrainingMetrics]:\n\t  \"\"\"Computes `matrix^(-1/p)`, where `p` is a positive integer.\n\t  This function uses the Eigh or Coupled newton iterations algorithm for\n", "  the computation of a matrix's inverse pth root.\n\t  References:\n\t    [Functions of Matrices, Theory and Computation,\n\t     Nicholas J Higham, Pg 184, Eq 7.18](\n\t     https://epubs.siam.org/doi/book/10.1137/1.9780898717778)\n\t  Args:\n\t    matrix: the symmetric PSD matrix whose power it to be computed\n\t    p: exponent, for p a positive integer.\n\t    num_iters: Maximum number of iterations.\n\t    ridge_epsilon: Ridge epsilon added to make the matrix positive definite.\n", "    error_tolerance: Error indicator, useful for early termination.\n\t    precision: precision XLA related flag, the available options are: a)\n\t      lax.Precision.DEFAULT (better step time, but not precise) b)\n\t      lax.Precision.HIGH (increased precision, slower) c) lax.Precision.HIGHEST\n\t      (best possible precision, slowest)\n\t    relative_matrix_epsilon: Whether to use relative epsilon to the max eigen\n\t      value when computing inverse-pth root.\n\t    lobpcg_topk_precondition: If nonzero, specifies the number of top\n\t      eigenvectors to subtract out before performing LOBPCG. Note this makes\n\t      relative_matrix_epsilon essentially free.\n", "    lobpcg_max_iter: Maximum iteration count for LOBPCG, defaults to\n\t      `lobpcg_topk_precondition`.\n\t    padding_start: If the input matrix was padded, then zeros out columns and\n\t      rows at the padding start.\n\t    prev: previous iteration's solution, zero-padded (unused)\n\t    eigh: If True, uses eigh for inverse-pth root computation.\n\t  Returns:\n\t    `(matrix + eps)^(-1/p)` and error metrics.\n\t    Note `eps` is not added to zeroed out padding rows and\n\t    columns. `eps` is just `ridge_epsilon` if\n", "    `relative_matrix_epsilon` is set to `False`, otherwise, it is the\n\t    ridge epsilon value scaled by the derived maximum eigenvalue of\n\t    the input matrix.\n\t  \"\"\"\n\t  if eigh:\n\t    return matrix_inverse_pth_root_eigh(matrix, p, ridge_epsilon,\n\t                                        error_tolerance, precision,\n\t                                        relative_matrix_epsilon, padding_start,\n\t                                        prev)\n\t  del prev\n", "  assert matrix.shape[0] == matrix.shape[1]\n\t  # We use _MAT_INV_PTH_ROOT_DTYPE for the matrix inverse pth root.\n\t  # Switch to f64 if you have hardware that supports it. Enable the jax flag\n\t  # jax_enable_x64 for this to work.\n\t  matrix_size = matrix.shape[0]\n\t  orig_dtype = matrix.dtype\n\t  matrix = matrix.astype(_MAT_INV_PTH_ROOT_DTYPE)\n\t  alpha = jnp.asarray(-1.0 / p, _MAT_INV_PTH_ROOT_DTYPE)\n\t  identity = jnp.eye(matrix_size, dtype=_MAT_INV_PTH_ROOT_DTYPE)\n\t  if padding_start is not None:\n", "    # Zero out padding in identity as well for convergence checks.\n\t    ix = (jnp.arange(matrix_size, dtype=jnp.int32) < padding_start).astype(\n\t        matrix.dtype)\n\t    matrix *= ix[jnp.newaxis, :]\n\t    matrix *= ix[:, jnp.newaxis]\n\t    identity *= ix\n\t  original_matrix = matrix\n\t  # Only used in lobpcg branches, but required by pytype.\n\t  eigvals, eigvecs, lobpcg_diagnostics = None, None, None\n\t  if lobpcg_topk_precondition > 0:\n", "    # TODO(vladf): reuse previous top-k as the initial search directions\n\t    pad_shape = (matrix_size - lobpcg_topk_precondition,\n\t                 lobpcg_topk_precondition)\n\t    search_dirs = jnp.concatenate(\n\t        (jnp.eye(lobpcg_topk_precondition), jnp.zeros(pad_shape)), axis=0)\n\t    eigvals, eigvecs, lobpcg_iters = linalg.lobpcg_standard(\n\t        matrix, search_dirs,\n\t        lobpcg_topk_precondition if lobpcg_max_iter == 0 else lobpcg_max_iter)\n\t    lobpcg_diagnostics = LOBPCGDiagnostics.create(\n\t        matrix,\n", "        eigvals,\n\t        eigvecs,\n\t        lobpcg_iters,\n\t    )\n\t    # The minimal eigenvalue among top-k becomes the maximal one in the whole\n\t    # matrix after deflation.\n\t    deflation = eigvals - jnp.min(eigvals)\n\t    scaled_vecs = eigvecs * jnp.sqrt(deflation)\n\t    # Deflate out top eigenvectors to reduce matrix condition number.\n\t    matrix -= scaled_vecs.dot(\n", "        scaled_vecs.T, precision=jax.lax.Precision.HIGHEST)\n\t  if relative_matrix_epsilon:\n\t    if eigvals is not None:\n\t      max_ev = jnp.max(eigvals)\n\t    else:\n\t      # Only use power iteration if lobpcg wasn't already used to derive the\n\t      # top eigenvalue.\n\t      _, max_ev = power_iteration(\n\t          matrix=matrix,\n\t          num_iters=100,\n", "          error_tolerance=1e-6,\n\t          precision=precision,\n\t          padding_start=padding_start)\n\t  else:\n\t    # Use absolute matrix epsilon scaling otherwise.\n\t    max_ev = 1.0\n\t  ridge_epsilon = ridge_epsilon * jnp.maximum(max_ev, _EPSILON)\n\t  # Sometimes error increases after an iteration before decreasing and\n\t  # converging. 1.2 factor is used to bound the maximal allowed increase.\n\t  max_error_ratio = 1.2\n", "  def _iter_condition(state):\n\t    i, unused_mat_m, unused_mat_h, unused_old_mat_h, error, error_ratio = state\n\t    error_above_threshold = jnp.logical_and(error > error_tolerance,\n\t                                            error_ratio < max_error_ratio)\n\t    return jnp.logical_and(i < num_iters, error_above_threshold)\n\t  def _iter_body(state):\n\t    (i, mat_m, mat_h, unused_old_mat_h, error, unused_error_ratio) = state\n\t    mat_m_i = (1 - alpha) * identity + alpha * mat_m\n\t    new_mat_m = jnp.matmul(mat_power(mat_m_i, p), mat_m, precision=precision)\n\t    new_mat_h = jnp.matmul(mat_h, mat_m_i, precision=precision)\n", "    new_error = jnp.max(jnp.abs(new_mat_m - identity))\n\t    return (i + 1, new_mat_m, new_mat_h, mat_h, new_error, new_error / error)\n\t  if matrix_size == 1:\n\t    damped_matrix = matrix + ridge_epsilon\n\t    resultant_mat_h = damped_matrix**alpha\n\t    error = jnp.array(0, jnp.float32)\n\t    iters = 0\n\t    error_ratio = 0.0\n\t  else:\n\t    retry_loop_error_threshold = 0.05\n", "    num_tries = 6\n\t    init_outer_state = tuple([0, identity, 1000.0, 100, 1.0, True])\n\t    def _outer_iter_condition_fn(state):\n\t      i, _, _, _, _, iter_failed = state\n\t      return jnp.logical_and(iter_failed, i < num_tries)\n\t    def _outer_body_fn(state):\n\t      i, _, _, _, _, _ = state\n\t      # Update the epsilon based on the loop iteration.\n\t      damped_matrix = matrix + (ridge_epsilon * (10**i) * identity)\n\t      z = (1 + p) / (2 * jnp.linalg.norm(damped_matrix))\n", "      new_mat_m_0 = damped_matrix * z\n\t      new_error = jnp.max(jnp.abs(new_mat_m_0 - identity))\n\t      new_mat_h_0 = identity * jnp.power(z, 1.0 / p)\n\t      init_state = tuple(\n\t          [0, new_mat_m_0, new_mat_h_0, new_mat_h_0, new_error, 1.0])\n\t      iters, mat_m, mat_h, old_mat_h, error, error_ratio = lax.while_loop(\n\t          _iter_condition, _iter_body, init_state)\n\t      error = jnp.max(jnp.abs(mat_m - identity)).astype(jnp.float32)\n\t      is_converged = jnp.asarray(error_ratio < max_error_ratio, old_mat_h.dtype)\n\t      resultant_mat_h = is_converged * mat_h + (1 - is_converged) * old_mat_h\n", "      return (i + 1, resultant_mat_h, error, iters, error_ratio,\n\t              error > retry_loop_error_threshold)\n\t    total_retries, resultant_mat_h, error, iters, error_ratio, _ = jax.lax.while_loop(\n\t        _outer_iter_condition_fn, _outer_body_fn, init_outer_state)\n\t  conditioned_resultant_mat = resultant_mat_h\n\t  if lobpcg_topk_precondition > 0:\n\t    # Since we deflated the top eigenvectors prior to p-th root inverse,\n\t    # the resultant matrix has larger eigenvalues associated with those\n\t    # same eigenvectors, which we need to now re-deflate.\n\t    #\n", "    # Note that _pth_root_difference returns positive values for this\n\t    # particular argument ordering as min(eigvals) <= eigvals for the\n\t    # jnp.sqrt below.\n\t    pth_diff = _pth_root_difference(ridge_epsilon, jnp.min(eigvals), eigvals, p)\n\t    scaled_vecs = eigvecs * jnp.sqrt(pth_diff)\n\t    resultant_mat_h = conditioned_resultant_mat - scaled_vecs.dot(\n\t        scaled_vecs.T, precision=jax.lax.Precision.HIGHEST)\n\t  error_metrics = TrainingMetrics(\n\t      inverse_pth_root_errors=jnp.array(error, jnp.float32),\n\t      inverse_pth_root_iters=jnp.array(iters, jnp.float32),\n", "      final_error_ratio=jnp.array(error_ratio, jnp.float32),\n\t      max_eigen_value=jnp.array(max_ev, jnp.float32),\n\t      total_retries=jnp.array(total_retries, jnp.float32))\n\t  if lobpcg_topk_precondition > 0:\n\t    damped_matrix = matrix + (ridge_epsilon * (10**total_retries) * identity)\n\t    conditioned_diagnostics = InversePthRootDiagnostics.create(\n\t        conditioned_resultant_mat, damped_matrix, p)\n\t    unconditioned_damped_matrix = original_matrix + ridge_epsilon * identity\n\t    unconditioned_diagnostics = InversePthRootDiagnostics.create(\n\t        resultant_mat_h, unconditioned_damped_matrix, p)\n", "    # The max entrywise error in error_metrics.inverse_pth_root_errors refers\n\t    # to what was derived from the inverse pth root iteration, which with\n\t    # LOBPCG refers to the conditioned problem. Make sure to use the error\n\t    # from the unconditioned problem.\n\t    unconditional_errors = jnp.maximum(\n\t        unconditioned_diagnostics.max_diag_error,\n\t        unconditioned_diagnostics.max_off_diag_error)\n\t    error_metrics = error_metrics.replace(\n\t        inverse_pth_root_errors=unconditional_errors,\n\t        lobpcg_diagnostics=lobpcg_diagnostics,\n", "        conditioned_inverse_pth_root_diagnostics=conditioned_diagnostics,\n\t        inverse_pth_root_diagnostics=unconditioned_diagnostics,\n\t    )\n\t  if padding_start is not None:\n\t    # Occasionally, pure-padding matrices are handed to the inversion routine\n\t    # due to some TPU hosts not having the same number of preconditioning\n\t    # matrices.\n\t    resultant_mat_h = jnp.where(padding_start == 0, 0.0, resultant_mat_h)\n\t    error = jnp.where(padding_start == 0, 0.0,\n\t                      error_metrics.inverse_pth_root_errors)\n", "    error_metrics = error_metrics.replace(inverse_pth_root_errors=error)\n\t  resultant_mat_h = jnp.asarray(resultant_mat_h, orig_dtype)\n\t  return resultant_mat_h, error_metrics\n\tdef matrix_inverse_pth_root_eigh(\n\t    matrix: jnp.ndarray,\n\t    p: Union[int, jnp.ndarray],\n\t    ridge_epsilon: float = 1e-6,\n\t    error_tolerance: float = 1e-6,\n\t    precision: lax.Precision = lax.Precision.HIGHEST,\n\t    relative_matrix_epsilon: bool = True,\n", "    padding_start: Union[int, jnp.ndarray, None] = None,\n\t    prev: Optional[jnp.ndarray] = None,\n\t) -> Tuple[jnp.ndarray, TrainingMetrics]:\n\t  \"\"\"Computes `matrix^(-1/p)`, where `p` is a positive integer.\n\t  This function uses eigh for the computation of a matrix's inverse pth\n\t  root.\n\t  Args:\n\t    matrix: the symmetric PSD matrix whose power it to be computed\n\t    p: exponent, for p a positive integer.\n\t    ridge_epsilon: Ridge epsilon added to make the matrix positive definite.\n", "    error_tolerance: Error indicator, useful for early termination.\n\t    precision: precision XLA related flag, the available options are: a)\n\t      lax.Precision.DEFAULT (better step time, but not precise) b)\n\t      lax.Precision.HIGH (increased precision, slower) c) lax.Precision.HIGHEST\n\t      (best possible precision, slowest)\n\t    relative_matrix_epsilon: Whether to use relative epsilon to the max eigen\n\t      value when computing inverse-pth root.\n\t    padding_start: If the input matrix was padded, then zeros out columns and\n\t      rows at the padding start.\n\t    prev: previous iteration's solution, zero-padded (unused)\n", "  Returns:\n\t    `(matrix + eps)^(-1/p)` and error metrics.\n\t    Note `eps` is not added to zeroed out padding rows and\n\t    columns. `eps` is just `ridge_epsilon` if\n\t    `relative_matrix_epsilon` is set to `False`, otherwise, it is the\n\t    ridge epsilon value scaled by the derived maximum eigenvalue of\n\t    the input matrix.\n\t  \"\"\"\n\t  del prev\n\t  assert matrix.shape[0] == matrix.shape[1]\n", "  matrix_size = matrix.shape[0]\n\t  orig_dtype = matrix.dtype\n\t  matrix = matrix.astype(_MAT_INV_PTH_ROOT_DTYPE)\n\t  alpha = jnp.asarray(-1.0 / p, _MAT_INV_PTH_ROOT_DTYPE)\n\t  identity = jnp.eye(matrix_size, dtype=_MAT_INV_PTH_ROOT_DTYPE)\n\t  if padding_start is not None:\n\t    ix = (jnp.arange(matrix_size, dtype=jnp.int32) < padding_start).astype(\n\t        matrix.dtype)\n\t    matrix *= ix[jnp.newaxis, :]\n\t    matrix *= ix[:, jnp.newaxis]\n", "    identity *= ix\n\t  if relative_matrix_epsilon:\n\t    _, max_ev = power_iteration(\n\t        matrix=matrix,\n\t        num_iters=100,\n\t        error_tolerance=error_tolerance,\n\t        precision=precision,\n\t        padding_start=padding_start)\n\t  else:\n\t    # Use absolute matrix epsilon scaling otherwise.\n", "    max_ev = 1.0\n\t  ridge_epsilon = ridge_epsilon * jnp.maximum(max_ev, error_tolerance)\n\t  regularized_input = matrix + ridge_epsilon * identity\n\t  e, u = jnp.linalg.eigh(regularized_input)\n\t  # Due to padding, we may have to zero out eigenvalues.\n\t  if padding_start is not None:\n\t    e *= jnp.flip(ix)\n\t  mm = functools.partial(jnp.matmul, precision=precision)\n\t  inv_e = jnp.where(e == 0.0, 0.0,\n\t                    jnp.power(jnp.maximum(e, ridge_epsilon), alpha))\n", "  val = mm(mm(u, jnp.diag(inv_e)), u.T)\n\t  root = u * jnp.sqrt(inv_e)\n\t  val = mm(root, root.T)\n\t  recovered_e = mm(u.T, mm(regularized_input, u))\n\t  eig_error = recovered_e - jnp.diag(e)\n\t  if padding_start is not None:\n\t    eig_error *= jnp.flip(ix)\n\t  error = jnp.max(jnp.abs(eig_error))\n\t  error_metrics = TrainingMetrics(\n\t      inverse_pth_root_errors=jnp.array(error, jnp.float32))\n", "  if padding_start is not None:\n\t    val = jnp.where(padding_start == 0, 0.0, val)\n\t    error = jnp.where(padding_start == 0, 0.0,\n\t                      error_metrics.inverse_pth_root_errors)\n\t    error_metrics = error_metrics.replace(inverse_pth_root_errors=error)\n\t  val = jnp.asarray(val, orig_dtype)\n\t  return val, error_metrics\n\tdef _low_rank_root(\n\t    matrix: jnp.ndarray,\n\t    p: Union[int, jnp.ndarray],\n", "    compression_rank: int = 0,\n\t    ridge_epsilon: float = 1e-6,\n\t    error_tolerance: float = 1e-6,\n\t    relative_matrix_epsilon: bool = True,\n\t    padding_start: Union[int, jnp.ndarray, None] = None,\n\t    prev: Optional[jnp.ndarray] = None,\n\t) -> Tuple[jnp.ndarray, TrainingMetrics]:\n\t  \"\"\"Returns low-rank plus constant approx to inverse pth root.\"\"\"\n\t  del prev\n\t  assert compression_rank != 0\n", "  assert matrix.shape[0] == matrix.shape[1]\n\t  matrix_size = matrix.shape[0]\n\t  assert matrix_size > abs(compression_rank) + 2\n\t  orig_dtype = matrix.dtype\n\t  matrix = matrix.astype(_MAT_INV_PTH_ROOT_DTYPE)\n\t  alpha = jnp.asarray(-1.0 / p, _MAT_INV_PTH_ROOT_DTYPE)\n\t  identity = jnp.eye(matrix_size, dtype=_MAT_INV_PTH_ROOT_DTYPE)\n\t  if padding_start is not None:\n\t    ix = (jnp.arange(matrix_size, dtype=jnp.int32) < padding_start).astype(\n\t        matrix.dtype)\n", "    matrix *= ix[jnp.newaxis, :]\n\t    matrix *= ix[:, jnp.newaxis]\n\t    identity *= ix\n\t  if relative_matrix_epsilon:\n\t    _, max_ev = power_iteration(\n\t        matrix=matrix,\n\t        num_iters=100,\n\t        error_tolerance=error_tolerance,\n\t        precision=jax.lax.Precision.HIGHEST,\n\t        padding_start=padding_start)\n", "  else:\n\t    # Use absolute matrix epsilon scaling otherwise.\n\t    max_ev = 1.0\n\t  ridge_epsilon = ridge_epsilon * jnp.maximum(max_ev, error_tolerance)\n\t  regularized_input = matrix + ridge_epsilon * identity\n\t  e, u = jnp.linalg.eigh(regularized_input)\n\t  # Due to padding, we may have to zero out eigenvalues.\n\t  if padding_start is not None:\n\t    e *= jnp.flip(ix)\n\t  mm = functools.partial(jnp.matmul, precision=jax.lax.Precision.HIGHEST)\n", "  # Extract top-compression-rank.\n\t  recovered_e = mm(u.T, mm(regularized_input, u))\n\t  eig_error = recovered_e - jnp.diag(e)\n\t  if padding_start is not None:\n\t    eig_error *= jnp.flip(ix)\n\t  error = jnp.max(jnp.abs(eig_error))\n\t  inv_e = jnp.where(e == 0.0, 0.0,\n\t                    jnp.power(jnp.maximum(e, ridge_epsilon), alpha))\n\t  assert abs(compression_rank) <= matrix_size\n\t  d = matrix_size\n", "  # If padding_start < d, then we should have (d - padding_start)\n\t  # zeros at the front of the array.\n\t  if compression_rank < 0:\n\t    inv_e = jnp.roll(inv_e, -(d - padding_start))\n\t    u = jnp.roll(u, -(d - padding_start), axis=1)\n\t    # Denoting the eigenvalues of regularized_input\n\t    # e == [0, low, hi] before\n\t    # this roll corresponds to\n\t    # [low, hi, 0]\n\t  else:\n", "    inv_e = jnp.flip(inv_e)\n\t    u = jnp.flip(u, axis=1)\n\t    # [hi, low, 0], reversed\n\t  # Thanks to above transforms, the vectors we'd like to preserve\n\t  # are always exactly the first abs(compression_rank).\n\t  split_ix = abs(compression_rank)\n\t  keep_e, to_avg_e = inv_e[:split_ix], inv_e[split_ix:]\n\t  u_keep = u[:, :split_ix]\n\t  # Package the mean of the elided low eigenvalues in the last\n\t  # column.\n", "  real_dim = padding_start if padding_start is not None else d\n\t  num_real_eigs_to_avg = real_dim - abs(compression_rank)\n\t  const = jnp.sum(to_avg_e) / jnp.where(num_real_eigs_to_avg > 0,\n\t                                        num_real_eigs_to_avg, 1.0)\n\t  # Put everything together.\n\t  val = _low_rank_pack(u_keep, keep_e, const, compression_rank)\n\t  error_metrics = TrainingMetrics(\n\t      inverse_pth_root_errors=jnp.array(error, jnp.float32))\n\t  if padding_start is not None:\n\t    val = jnp.where(padding_start == 0, 0.0, val)\n", "    error = jnp.where(padding_start == 0, 0.0,\n\t                      error_metrics.inverse_pth_root_errors)\n\t    error_metrics = error_metrics.replace(inverse_pth_root_errors=error)\n\t  val = jnp.asarray(val, orig_dtype)\n\t  return val, error_metrics\n\tdef _fd_update_root(\n\t    new_grad: jnp.ndarray,\n\t    p: Union[int, jnp.ndarray],\n\t    rank: int = 0,\n\t    ridge_epsilon: float = 1e-6,\n", "    error_tolerance: float = 1e-6,\n\t    relative_matrix_epsilon: bool = True,\n\t    decay: float = 1.0,\n\t    padding_start: Union[int, jnp.ndarray, None] = None,\n\t    prev: Optional[jnp.ndarray] = None,\n\t    generate_training_metrics: bool = False,\n\t    generate_fd_metrics: bool = False,\n\t) -> Tuple[jnp.ndarray, TrainingMetrics]:\n\t  \"\"\"FD update.\"\"\"\n\t  assert prev is not None\n", "  assert rank > 0\n\t  # new_grad should be a Cholesky factor; R^T R = G^T G.\n\t  max_size = new_grad.shape[0]\n\t  assert list(new_grad.shape) == [max_size, max_size]\n\t  # previous sketch should be a packed, compressed matrix.\n\t  pd = _precond_dim(rank, max_size)\n\t  assert list(prev.shape) == [max_size, pd]\n\t  assert rank + 2 == pd\n\t  assert rank + 2 < max_size\n\t  # full-rank case handled outside this method.\n", "  # Note 'd' is zero-padded to max_size.\n\t  sketch_dr, fwd_eigvals_r, inv_eigvals_r, const, tail, had_zeros = (\n\t      _fd_low_rank_unpack(prev, rank))\n\t  del inv_eigvals_r, const, had_zeros\n\t  if relative_matrix_epsilon:\n\t    max_ev = fwd_eigvals_r[0]\n\t  else:\n\t    max_ev = 1.0\n\t  ridge_epsilon = ridge_epsilon * jnp.maximum(max_ev, error_tolerance)\n\t  active_ix_d = padding_start > jnp.arange(max_size)\n", "  active_ix_r = padding_start > jnp.arange(rank)\n\t  # Numerical error can introduce eigenvectors which lie in padding space.\n\t  # To prevent compounding error (since SVD is unaware of the padding),\n\t  # re-zero consistently.\n\t  sketch_dr *= active_ix_d[:, jnp.newaxis]\n\t  sketch_dr *= active_ix_r\n\t  fwd_eigvals_r = fwd_eigvals_r + ridge_epsilon\n\t  fwd_eigvals_r *= active_ix_r\n\t  weighted_sketch_dr = sketch_dr * jnp.sqrt(fwd_eigvals_r)\n\t  padded_grad = new_grad\n", "  padded_grad *= active_ix_d\n\t  padded_grad *= active_ix_d[:, jnp.newaxis]\n\t  # SST = sketch.dot(sketch.T) recovers the covariance approximation\n\t  # GGT = padded_grad.dot(padded_grad.T) is the new covariance observation\n\t  # updated = [sketch ; padded_grad] has\n\t  # updated @ updated.T == SST * decay + GGT\n\t  updated = jnp.concatenate(\n\t      [\n\t          jnp.sqrt(decay) * weighted_sketch_dr,\n\t          # NOTE(vladf): if we multiply the below padded_grad with the constant\n", "          # jnp.sqrt(1 - decay) note that we'd have nearly the same behavior\n\t          # (verified experimentally) because over time the entire\n\t          # covariance should be scaled like \\sum_t decay^(T-t) G @ G.T\n\t          # which is up to a (1-decay) factor away if we used an EMA\n\t          # update. In the presence of grafting or LR tuning,\n\t          # this rescaling is a no-op.\n\t          padded_grad\n\t      ],\n\t      axis=1)\n\t  u, s, vt = jnp.linalg.svd(updated, full_matrices=False)\n", "  assert list(u.shape) == [max_size, max_size]\n\t  cutoff = s[rank]\n\t  rho_t = cutoff**2\n\t  top_eigs = s[:rank]\n\t  # Deflate: top_eigs ** 2 - cutoff ** 2\n\t  deflated_eigs = (top_eigs - cutoff) * (top_eigs + cutoff)\n\t  eigvecs = u[:, :rank]\n\t  tail = tail * decay\n\t  new_tail = tail + rho_t\n\t  alpha = jnp.asarray(-1.0 / p)\n", "  new_const = jnp.where(new_tail <= 0, 0.0, new_tail**alpha)\n\t  new_tail = jnp.where(new_tail <= 0, 0.0, new_tail)\n\t  num_neg_eigs = jnp.sum(deflated_eigs < 0)\n\t  num_zero_deflated_eigs = jnp.sum(deflated_eigs == 0.0)\n\t  deflated_eigs = jnp.where(deflated_eigs <= 0, 0.0, deflated_eigs)\n\t  eigvecs *= deflated_eigs > 0  # Don't introduce new directions with 0 eigs.\n\t  # Zero out anything that's not within 1% of unit norm. Amazingly, I've seen\n\t  # 0.25, 0.8, and even 10 returned as the norms.\n\t  norms = jnp.linalg.norm(eigvecs, axis=0)\n\t  safe_normed = (0.99 <= norms) & (norms <= 1.01)\n", "  eigvecs *= safe_normed\n\t  deflated_eigs *= safe_normed\n\t  eigvecs /= jnp.where(safe_normed, norms, 1.0)\n\t  num_unsafe_norms = jnp.sum(~safe_normed) - (\n\t      num_neg_eigs + num_zero_deflated_eigs\n\t  )\n\t  # Zero out any eigenvectors that include padding dimensions\n\t  padding_ix = jnp.arange(eigvecs.shape[0]) >= padding_start\n\t  padding_eigvecs = eigvecs * padding_ix[:, jnp.newaxis]\n\t  padding_mass = jnp.linalg.norm(padding_eigvecs, axis=0, ord=1)\n", "  has_significant_padding = padding_mass > 0.01\n\t  eigvecs *= 1 - has_significant_padding\n\t  deflated_eigs *= 1 - has_significant_padding\n\t  num_has_padding = np.sum(has_significant_padding)\n\t  # Assess the accuracy of our top-k fit. Previously, we inspected the singular\n\t  # values recovered from the returned singular vectors; however these can have\n\t  # high relative error for near-0 singular values, causing needless errors.\n\t  recovered = jnp.matmul(\n\t      (u[:, :rank] * s[jnp.newaxis, :rank]), vt[:rank, :],\n\t      precision=jax.lax.Precision.HIGHEST\n", "  )\n\t  diff = recovered - updated\n\t  frob = jnp.square(diff).sum()\n\t  entrywise = jnp.abs(diff).sum() / (padding_start**2 + padding_start * rank)\n\t  expected_frob = jnp.square(s[rank:]).sum()\n\t  total_frob = jnp.square(updated).sum()\n\t  # TODO(vladf): consider some condition for high frob norm\n\t  # Compute inversion after tail shift.\n\t  upshifted_eigs = jnp.square(top_eigs) + tail\n\t  upshifted_eigs *= deflated_eigs > 0.0\n", "  upshifted_eigs = jnp.where(upshifted_eigs <= 0, 0.0, upshifted_eigs)\n\t  inverted_eigs = jnp.where(upshifted_eigs <= 0, 0.0, upshifted_eigs**alpha)\n\t  has_zeros = jnp.any(deflated_eigs <= 0) | jnp.any(new_tail <= 0)\n\t  packed_precond = _fd_low_rank_pack(\n\t      eigvecs,\n\t      deflated_eigs,\n\t      inverted_eigs,\n\t      new_const,\n\t      new_tail,\n\t      has_zeros,\n", "      rank,\n\t  )\n\t  val = packed_precond\n\t  error_metrics = default_training_metrics(generate_fd_metrics).replace(\n\t      inverse_pth_root_errors=jnp.array(0.0, jnp.float32))\n\t  if generate_training_metrics and generate_fd_metrics:\n\t    error_metrics = error_metrics.replace(\n\t        fd=FDDiagnostics.create(  # pytype: disable=wrong-arg-types  # jax-ndarray\n\t            rho_t,\n\t            new_tail,\n", "            deflated_eigs,\n\t            new_grad,\n\t            eigvecs,\n\t            padding_start,\n\t            max_size,\n\t            num_neg_eigs,\n\t            num_zero_deflated_eigs,\n\t            num_unsafe_norms,\n\t            num_has_padding,\n\t            frob,\n", "            expected_frob,\n\t            entrywise,\n\t            total_frob,\n\t        )\n\t    )\n\t  if padding_start is not None:\n\t    val = jnp.where(padding_start == 0, 0.0, val)\n\t    error = jnp.where(padding_start == 0, 0.0,\n\t                      error_metrics.inverse_pth_root_errors)\n\t    error_metrics = error_metrics.replace(inverse_pth_root_errors=error)\n", "  return val, error_metrics\n\tdef merge_small_dims(shape_to_merge, max_dim):\n\t  \"\"\"Merge small dimensions.\n\t  If there are some small dimensions, we collapse them:\n\t  e.g. [1, 2, 512, 1, 2048, 1, 3, 4] --> [1024, 2048, 12] if max_dim = 1024\n\t       [1, 2, 768, 1, 2048] --> [2, 768, 2048]\n\t  Args:\n\t    shape_to_merge: Shape to merge small dimensions.\n\t    max_dim: Maximal dimension of output shape used in merging.\n\t  Returns:\n", "    Merged shape.\n\t  \"\"\"\n\t  if shape_to_merge and np.all(np.array(shape_to_merge) == 1):\n\t    return [1]\n\t  resulting_shape = []\n\t  product = 1\n\t  for d in shape_to_merge:\n\t    if product * d <= max_dim:\n\t      product *= d\n\t    else:\n", "      if product > 1:\n\t        resulting_shape.append(product)\n\t      product = d\n\t  if product > 1:\n\t    resulting_shape.append(product)\n\t  return resulting_shape\n\tdef pad_square_matrix(mat: jnp.ndarray, max_size: int) -> jnp.ndarray:\n\t  \"\"\"Pad a square matrix up to max_size.\n\t  Args:\n\t    mat: a matrix to pad.\n", "    max_size: matrix size requested.\n\t  Returns:\n\t    Given M returns [[M, 0], [0, I]]\n\t  \"\"\"\n\t  rows, cols = mat.shape\n\t  if rows != cols:\n\t    raise ValueError(\"Must have rows == cols, instead got \"\n\t                     f\"rows={rows}, cols={cols}\")\n\t  if cols > max_size:\n\t    raise ValueError(\"Must have cols <= max_size. Instead got \"\n", "                     f\"cols={cols}, max_size={max_size}.\")\n\t  if rows == max_size:\n\t    return mat\n\t  pad_size = max_size - rows\n\t  zs1 = jnp.zeros([rows, pad_size], dtype=mat.dtype)\n\t  zs2 = jnp.zeros([pad_size, rows], dtype=mat.dtype)\n\t  eye = jnp.eye(pad_size, dtype=mat.dtype)\n\t  mat = jnp.concatenate([mat, zs1], 1)\n\t  mat = jnp.concatenate([mat, jnp.concatenate([zs2, eye], 1)], 0)\n\t  return mat\n", "def pad_vector(vec: jnp.ndarray, max_size: int) -> jnp.ndarray:\n\t  \"\"\"Pad a vector to a max_size.\n\t  Args:\n\t    vec: a vector to pad.\n\t    max_size: matrix size requested.\n\t  Returns:\n\t    Given V returns [V, 0]\n\t  \"\"\"\n\t  size = vec.shape[0]\n\t  assert size <= max_size\n", "  if size == max_size:\n\t    return vec\n\t  pad_size = max_size - size\n\t  zs1 = jnp.zeros([pad_size], dtype=vec.dtype)\n\t  return jnp.concatenate([vec, zs1], 0)\n\tdef efficient_cond(predicate, compute_fn, init_state, *args, **kwargs):\n\t  \"\"\"Avoids wasteful buffer allocation with XLA.\"\"\"\n\t  def _iter_body(unused_state):\n\t    results = compute_fn(*args, **kwargs)\n\t    return tuple([False] + list(results))\n", "  def _iter_condition(state):\n\t    return state[0]\n\t  results = jax.lax.while_loop(_iter_condition, _iter_body,\n\t                               tuple([predicate] + init_state))\n\t  return tuple(results[1:])\n\tclass BlockPartitioner:\n\t  \"\"\"Partitions a tensor into smaller tensors.\"\"\"\n\t  def __init__(self, param, block_size):\n\t    self._shape = param.shape\n\t    self._splits = []\n", "    split_sizes = []\n\t    # We split params into smaller blocks. Here we store the metadata to make\n\t    # that split.\n\t    for i, d in enumerate(param.shape):\n\t      if 0 < block_size < d:\n\t        # d-1, otherwise split appends a 0-size array.\n\t        nsplit = (d - 1) // block_size\n\t        indices = (np.arange(nsplit, dtype=np.int32) + 1) * block_size\n\t        sizes = np.ones(nsplit + 1, dtype=np.int32) * block_size\n\t        sizes[-1] = d - indices[-1]\n", "        self._splits.append((i, indices))\n\t        split_sizes.append(sizes)\n\t      else:\n\t        split_sizes.append(np.array([d], dtype=np.int32))\n\t    self._split_sizes = split_sizes\n\t  def split_sizes(self):\n\t    return self._split_sizes\n\t  def partition(self, tensor):\n\t    \"\"\"Partition tensor into blocks.\"\"\"\n\t    assert tensor.shape == self._shape\n", "    tensors = [tensor]\n\t    for (i, indices) in self._splits:\n\t      tensors_local = []\n\t      for t in tensors:\n\t        tensors_local.extend(jnp.split(t, indices_or_sections=indices, axis=i))\n\t      tensors = tensors_local\n\t    return tensors\n\t  def merge_partitions(self, partitions):\n\t    \"\"\"Merge partitions back to original shape.\"\"\"\n\t    for (i, indices) in reversed(self._splits):\n", "      n = len(indices) + 1\n\t      partial_merged_tensors = []\n\t      ind = 0\n\t      while ind < len(partitions):\n\t        partial_merged_tensors.append(\n\t            jnp.concatenate(partitions[ind:ind + n], axis=i))\n\t        ind += n\n\t      partitions = partial_merged_tensors\n\t    assert len(partitions) == 1\n\t    return partitions[0]\n", "def gram_weighted_update(\n\t    old_stats: chex.Array,\n\t    g: chex.Array,\n\t    axis: int,\n\t    w1: float,\n\t    w2: float,\n\t    precision: Optional[lax.Precision] = None) -> chex.Array:\n\t  \"\"\"Updated statistics via weighted average with new Gram matrix.\n\t    Returns w₁ R + w₂ Gᵀ G where R is `old_stats` and G is the matrix whose\n\t    columns are the flattened slices of the tensor `g` along the given `axis`.\n", "    (So, `old_stats` and the returned matrix have dimensions n x n where\n\t    n = `g.shape[axis]`).\n\t  Args:\n\t    old_stats:  Old statistics.\n\t    g:  Gradient tensor.\n\t    axis:  Axis along which to slice `g`.\n\t    w1:  Scalar weight for old statistics.\n\t    w2:  Scalar weight for new Gram matrix.\n\t    precision: Optional precision XLA related flag, the available options are:\n\t      a) lax.Precision.DEFAULT (better step time, but not precise) b)\n", "      lax.Precision.HIGH (increased precision, slower) c) lax.Precision.HIGHEST\n\t      (best possible precision, slowest)\n\t  Returns:\n\t    Weighted average of old and new statistics.\n\t  \"\"\"\n\t  axes = [i for i in range(g.ndim) if i != axis]\n\t  gram_matrix = jnp.tensordot(g, g, axes=(axes, axes), precision=precision)\n\t  return w1 * old_stats + w2 * gram_matrix\n\tdef frequent_directions_update(old_stats_factor: chex.Array, g: chex.Array,\n\t                               axis: int, w1: float, w2: float) -> chex.Array:\n", "  \"\"\"Derive the frequent directions update from the gradient block.\n\t    Computes a square Cholesky factor R corresponding to the gradient G such\n\t    that R R^T = tensordot(G, G, axes=(except_i, except_i)),\n\t    where except_i = [i for i in range(G.ndim) if i != axis].\n\t    Notably, the old_stats_factor and w* parameters are competely ignored.\n\t    Frequent directions updates rely on gradient averaging to accumulate\n\t    recent grad info and w* parameters come into play during the sketch\n\t    update (which is the update of the preconditioner).\n\t  Args:\n\t    old_stats_factor: Ignored.\n", "    g: Gradient tensor.\n\t    axis: Axis to precondition.\n\t    w1: Ignored.\n\t    w2: Ignored.\n\t  Returns:\n\t    Cholesky factor R meeting above constraint.\n\t  \"\"\"\n\t  del old_stats_factor, w1, w2\n\t  x = jnp.reshape(jnp.moveaxis(g, axis, 0), (g.shape[axis], -1))\n\t  # Let d be the dimension of x.shape[0].\n", "  # Then x @ x.T == tensordot(G, G, axes=(except_i, except_i)).\n\t  # Suppose x.T == q @ r with q orthonormal\n\t  # Then r.T @ r == r.T @ q.T @ q @ r = (q @ r).T @ (q @ r) == x @ x.T\n\t  r = jnp.linalg.qr(x.T, mode=\"r\")\n\t  r = r.T  # To match R R^T form in docs.\n\t  assert r.shape == (x.shape[0], min(x.shape))\n\t  return jnp.pad(r, ((0, 0), (0, x.shape[0] - r.shape[1])))\n\tclass Preconditioner:\n\t  \"\"\"Compute statistics/shape from gradients for preconditioning.\"\"\"\n\t  def __init__(\n", "      self,\n\t      param,\n\t      block_size,\n\t      merge_small_dims_block_size,\n\t      best_effort_shape_interpretation,\n\t      preconditioner_type=PreconditionerType.ALL,\n\t      compression_rank=0,\n\t  ):\n\t    \"\"\"Initializes the preconditioner.\n\t    Args:\n", "      param: parameter to precondition.\n\t      block_size: Block size used to split param.\n\t      merge_small_dims_block_size: Block size for merging dims.\n\t      best_effort_shape_interpretation: Whether to collapse/merge dims together.\n\t      preconditioner_type: Type of preconditioner to use.\n\t      compression_rank: Rank of preconditioner.\n\t    \"\"\"\n\t    self._original_shape = param.shape\n\t    self._transformed_shape = param.shape\n\t    if best_effort_shape_interpretation:\n", "      self._transformed_shape = merge_small_dims(self._original_shape,\n\t                                                 merge_small_dims_block_size)\n\t    reshaped_param = jnp.reshape(param, self._transformed_shape)\n\t    self._partitioner = BlockPartitioner(reshaped_param, block_size)\n\t    self._preconditioner_type = preconditioner_type\n\t    self._compression_rank = compression_rank\n\t  def updated_statistics_from_grad(\n\t      self,\n\t      stats: List[chex.Array],\n\t      grad: chex.Array,\n", "      w1: float,\n\t      w2: float,\n\t      to_float: Optional[Callable[[chex.Array], chex.Array]] = None,\n\t      from_float: Optional[Callable[[chex.Array], chex.Array]] = None,\n\t      precision: Optional[lax.Precision] = None,\n\t      frequent_directions: bool = False,\n\t  ) -> List[chex.Array]:\n\t    \"\"\"Update statistics from gradients.\n\t    Args:\n\t      stats: Old statistics or its Cholesky factor if `cholesky` is True.\n", "      grad: Gradient to compute statistics from.\n\t      w1: Weight for old statistics.\n\t      w2: Weight for new statistics.\n\t      to_float: Optional function for converting stats to floating point.\n\t      from_float: Optional function for converting from floating point.\n\t      precision: Optional precision XLA related flag, the available options are:\n\t        a) lax.Precision.DEFAULT (better step time, but not precise) b)\n\t        lax.Precision.HIGH (increased precision, slower) c)\n\t        lax.Precision.HIGHEST (best possible precision, slowest)\n\t      frequent_directions: If True, return Cholesky factors from the\n", "        possibly-averaged gradient, feeding them directly into the stats; this\n\t        ignores the previous value of stats and treats them like Cholesky\n\t        factors does.\n\t    Returns:\n\t      A list of updated gradient statistics for each partition.\n\t    \"\"\"\n\t    to_float = to_float if to_float is not None else (lambda x: x)\n\t    from_float = from_float if from_float is not None else (lambda x: x)\n\t    reshaped_grad = jnp.reshape(grad, self._transformed_shape)\n\t    partitioned_grads = self._partitioner.partition(reshaped_grad)\n", "    should_preconditioned_dims = self.should_precondition_dims()\n\t    preconditioned_dims = [\n\t        i for i, p in enumerate(should_preconditioned_dims) if p\n\t    ]\n\t    new_stats = []\n\t    index = 0\n\t    for g in partitioned_grads:\n\t      for axis in preconditioned_dims:\n\t        update = functools.partial(gram_weighted_update, precision=precision)\n\t        if frequent_directions:\n", "          if _should_compress(self._compression_rank, g.shape[axis]):\n\t            update = frequent_directions_update\n\t        new_stat = update(to_float(stats[index]), g, axis, w1, w2)\n\t        new_stats.append(from_float(new_stat))\n\t        index += 1\n\t    return new_stats\n\t  def should_precondition_dims(self):\n\t    \"\"\"A vector containing indicator indicating if the dim is preconditioned.\"\"\"\n\t    split_sizes = self._partitioner.split_sizes()\n\t    rank = len(split_sizes)\n", "    if self._preconditioner_type == PreconditionerType.ALL or rank <= 1:\n\t      return [True] * rank\n\t    elif self._preconditioner_type == PreconditionerType.INPUT:\n\t      return [True] * (rank - 1) + [False]\n\t    elif self._preconditioner_type == PreconditionerType.OUTPUT:\n\t      return [False] * (rank - 1) + [True]\n\t  def _preconditioner_shape(self, dim):\n\t    \"\"\"Returns possibly rank-compressed preconditioner shape.\"\"\"\n\t    if self._compression_rank:\n\t      return [dim, _precond_dim(self._compression_rank, dim)]\n", "    return [dim, dim]\n\t  def _preconds_for_grad(self, preconditioners, rank, start, end):\n\t    \"\"\"Returns a slice of preconditioners of length rank.\"\"\"\n\t    preconditioners_for_grad = preconditioners[start:end]\n\t    if self._preconditioner_type == PreconditionerType.INPUT:\n\t      # When _preconditioner_type is INPUT, we append a None value to the end of\n\t      # the list to handle the False index.\n\t      preconditioners_for_grad = preconditioners_for_grad + [None]\n\t    elif self._preconditioner_type == PreconditionerType.OUTPUT:\n\t      # When _preconditioner_type is OUTPUT, we append (rank - 1) many None\n", "      # values to the beginning of the list to handle the False indices.\n\t      preconditioners_for_grad = [None] * (rank - 1) + preconditioners_for_grad\n\t    assert len(preconditioners_for_grad) == rank\n\t    return preconditioners_for_grad\n\t  def shapes_for_preconditioners(self):\n\t    \"\"\"Returns shape from statistics.\"\"\"\n\t    split_sizes = self._partitioner.split_sizes()\n\t    rank = len(split_sizes)\n\t    # We ignore preconditioner types if rank == 1\n\t    preconditioner_shapes = []\n", "    for t in itertools.product(*split_sizes):\n\t      if self._preconditioner_type == PreconditionerType.ALL or rank <= 1:\n\t        preconditioner_shapes.extend(map(self._preconditioner_shape, t))\n\t      elif self._preconditioner_type == PreconditionerType.INPUT:\n\t        preconditioner_shapes.extend(map(self._preconditioner_shape, t[:-1]))\n\t      elif self._preconditioner_type == PreconditionerType.OUTPUT:\n\t        preconditioner_shapes.extend(map(self._preconditioner_shape, t[-1:]))\n\t    return preconditioner_shapes\n\t  def exponent_for_preconditioner(self):\n\t    \"\"\"Returns exponent to use for inverse-pth root M^{-1/p}.\"\"\"\n", "    should_preconditioned_dims = self.should_precondition_dims()\n\t    num_preconditioners = sum(should_preconditioned_dims)\n\t    return 2 * num_preconditioners\n\t  def preconditioned_grad(self, grad, preconditioners):\n\t    \"\"\"Precondition the gradient.\n\t    Args:\n\t      grad: A gradient tensor to precondition.\n\t      preconditioners: A list of preconditioners to apply.\n\t    Returns:\n\t      A preconditioned gradient.\n", "    \"\"\"\n\t    reshaped_grad = jnp.reshape(grad, self._transformed_shape)\n\t    partitioned_grads = self._partitioner.partition(reshaped_grad)\n\t    should_preconditioned_dims = self.should_precondition_dims()\n\t    num_preconditioners = sum(should_preconditioned_dims)\n\t    preconditioned_partitioned_grads = []\n\t    for i, g in enumerate(partitioned_grads):\n\t      preconditioners_for_grad = self._preconds_for_grad(\n\t          preconditioners,\n\t          rank=len(should_preconditioned_dims),\n", "          start=i * num_preconditioners,\n\t          end=(i + 1) * num_preconditioners,\n\t      )\n\t      precond_g = self._precondition_block(\n\t          g, should_preconditioned_dims, preconditioners_for_grad\n\t      )\n\t      preconditioned_partitioned_grads.append(precond_g)\n\t    merged_grad = self._partitioner.merge_partitions(\n\t        preconditioned_partitioned_grads\n\t    )\n", "    return jnp.reshape(merged_grad, self._original_shape)\n\t  def _precondition_block(self, g, should_precondition_dim, preconditioners):\n\t    \"\"\"Perform a preconditioning op on a single gradient block.\"\"\"\n\t    for j, should_precondition in enumerate(should_precondition_dim):\n\t      # Loop invariant: the dimension to be preconditioned is first; we keep\n\t      # all axes in the same cyclic order they were originally.\n\t      # Case: skip preconditioning this dimension.\n\t      rank = len(g.shape)\n\t      roll = tuple(range(1, rank)) + (0,)\n\t      if not should_precondition:\n", "        g = jnp.transpose(g, axes=roll)\n\t        continue\n\t      dim, application_dim = preconditioners[j].shape\n\t      compress = application_dim != dim\n\t      # Case: Compressed rank preconditioning.\n\t      if compress:\n\t        eigvecs, eigvals, const, skip = _low_rank_unpack(\n\t            preconditioners[j], abs(self._compression_rank))\n\t        assert list(eigvecs.shape) == [dim, abs(self._compression_rank)]\n\t        lowrank_basis = jnp.tensordot(g, eigvecs, axes=[[0], [0]])\n", "        lowrank_component = jnp.tensordot(\n\t            lowrank_basis, eigvecs, axes=[[rank - 1], [1]])\n\t        g = jnp.transpose(g, axes=roll)\n\t        complement = g - lowrank_component\n\t        scaled_basis = lowrank_basis * eigvals\n\t        scaled_lowrank_component = jnp.tensordot(\n\t            scaled_basis, eigvecs, axes=[[rank - 1], [1]])\n\t        old_g = g\n\t        new_g = const * complement + scaled_lowrank_component\n\t        g = jnp.where(skip, old_g, new_g)\n", "        continue\n\t      # Case: full Shampoo matrix precondition this dimension\n\t      g = jnp.tensordot(g, preconditioners[j], axes=[[0], [0]])\n\t    return g\n\tdef _update_preconditioners_fn(\n\t    update_preconditioners_every_fn,\n\t    update_preconditioners_fn,\n\t    steps,\n\t    scheduled,\n\t    quantized=False):\n", "  \"\"\"Calls the appropriate preconditioner update function, depending on how often we want to update it.\"\"\"\n\t  if quantized:\n\t    if scheduled:\n\t      (quantized_preconditioners_flat, quantized_diagonals_flat,\n\t       quantized_bucket_sizes_flat, metrics_flat) = lax.cond(\n\t           steps == 1,\n\t           update_preconditioners_every_fn,\n\t           update_preconditioners_fn)\n\t    else:\n\t      if steps == 1:\n", "        (\n\t            quantized_preconditioners_flat,\n\t            quantized_diagonals_flat,\n\t            quantized_bucket_sizes_flat,\n\t            metrics_flat,\n\t        ) = update_preconditioners_every_fn()\n\t      else:\n\t        (\n\t            quantized_preconditioners_flat,\n\t            quantized_diagonals_flat,\n", "            quantized_bucket_sizes_flat,\n\t            metrics_flat,\n\t        ) = update_preconditioners_fn()\n\t    return (\n\t        quantized_preconditioners_flat,\n\t        quantized_diagonals_flat,\n\t        quantized_bucket_sizes_flat,\n\t        metrics_flat,\n\t    )\n\t  else:\n", "    if scheduled:\n\t      preconditioners_flat, metrics_flat = lax.cond(\n\t          steps == 1,\n\t          update_preconditioners_every_fn,\n\t          update_preconditioners_fn,\n\t      )\n\t    else:\n\t      if steps == 1:\n\t        preconditioners_flat, metrics_flat = update_preconditioners_every_fn()\n\t      else:\n", "        preconditioners_flat, metrics_flat = update_preconditioners_fn()\n\t    return (preconditioners_flat, metrics_flat, None, None)\n\tdef _convert_to_parameter_stats(\n\t    global_stats,\n\t    local_stat,\n\t    compression_rank,\n\t    convert_statistics=True):\n\t  \"\"\"Creates parameter stats from sharded stats.\"\"\"\n\t  index_start = int(local_stat.index_start)\n\t  index_end = int(len(local_stat.sizes)) + index_start\n", "  statistics = global_stats.statistics[index_start:index_end, :, :]\n\t  preconditioners = global_stats.preconditioners[index_start:index_end, :, :]\n\t  new_statistics = []\n\t  new_preconditioners = []\n\t  for i, size in enumerate(local_stat.sizes):\n\t    new_statistics.append(statistics[i][:size, :size])\n\t    pd = size\n\t    pd = _precond_dim(compression_rank, size)\n\t    new_preconditioners.append(preconditioners[i][:size, :pd])\n\t  if not convert_statistics:\n", "    new_statistics = None\n\t  return ParameterStats(\n\t      local_stat.diagonal_statistics,\n\t      new_statistics,\n\t      new_preconditioners,\n\t      local_stat.diagonal_momentum,\n\t      local_stat.momentum,\n\t      local_stat.avg_grad,\n\t      local_stat.training_metrics,\n\t  )\n", "def _convert_from_parameter_stats(parameter_stats, local_stats):\n\t  \"\"\"Creates sharded stats from paramter stats.\"\"\"\n\t  return LocalShardedParameterStats(\n\t      parameter_stats.diagonal_statistics,\n\t      parameter_stats.diagonal_momentum,\n\t      parameter_stats.momentum,\n\t      parameter_stats.avg_grad,\n\t      parameter_stats.training_metrics,\n\t      local_stats.index_start,\n\t      local_stats.sizes,\n", "  )\n\tdef _add_metrics_into_local_stats(local_stats, metrics, keep_old):\n\t  \"\"\"Adds errors back into local statistics.\"\"\"\n\t  new_local_stats = []\n\t  for local_stat in local_stats:\n\t    index_start = int(local_stat.index_start)\n\t    index_end = int(len(local_stat.sizes)) + index_start\n\t    # pylint:disable=cell-var-from-loop Used immediately.\n\t    per_stat_metrics = jax.tree_map(lambda x: x[index_start:index_end], metrics)\n\t    # We don't want to update the metrics if we didn't do a new inverse p-th\n", "    # root calculation to find a new preconditioner, so that TensorBoard curves\n\t    # look consistent (otherwise they'd oscillate between NaN and measured\n\t    # values).\n\t    per_stat_metrics = efficient_cond(keep_old,\n\t                                      lambda: [local_stat.training_metrics],\n\t                                      [per_stat_metrics])[0]\n\t    # pylint:enable=cell-var-from-loop\n\t    new_local_stats.append(\n\t        local_stat.replace(training_metrics=per_stat_metrics))\n\t  return new_local_stats\n", "def batch(x, num_devices):\n\t  \"\"\"Batch `x` so that so that leading axis is num_devices.\"\"\"\n\t  n = len(x)\n\t  b = int(n / num_devices)\n\t  return jnp.stack([jnp.stack(x[idx:idx + b]) for idx in range(0, n, b)])\n\tdef unbatch(batched_values):\n\t  \"\"\"Unbatch values across leading axis and return a list of elements.\"\"\"\n\t  b1, b2 = batched_values.shape[0], batched_values.shape[1]\n\t  results = []\n\t  for v_array in jnp.split(batched_values, indices_or_sections=b1, axis=0):\n", "    v_array = jnp.squeeze(v_array)\n\t    # b2 = batches (number of preconditioner computation) per core.\n\t    if b2 > 1:\n\t      for v in jnp.split(v_array, indices_or_sections=b2, axis=0):\n\t        results.append(jnp.squeeze(v))\n\t    else:\n\t      results.append(v_array)\n\t  return results\n\tdef distributed_shampoo(\n\t    learning_rate,\n", "    block_size,\n\t    beta1=0.9,\n\t    beta2=0.999,\n\t    diagonal_epsilon=1e-10,\n\t    matrix_epsilon=1e-6,\n\t    weight_decay=0.0,\n\t    start_preconditioning_step=5,\n\t    preconditioning_compute_steps=1,\n\t    decay_preconditioning_compute_steps: bool = False,\n\t    end_preconditioning_compute_steps: Optional[int] = None,\n", "    statistics_compute_steps=1,\n\t    best_effort_shape_interpretation=True,\n\t    graft_type=GraftingType.SGD,\n\t    nesterov=True,\n\t    exponent_override=0,\n\t    # Pass pmap 'batch axis name' in pmap mode.\n\t    batch_axis_name=None,\n\t    ### Only set following 3 params in pjit/spmd mode.\n\t    ### WARNING: Experimental\n\t    statistics_partition_spec=None,\n", "    preconditioner_partition_spec=None,\n\t    num_devices_for_pjit=None,\n\t    shard_optimizer_states=False,\n\t    ###\n\t    ### Experimental memory reduction mode\n\t    best_effort_memory_usage_reduction=False,\n\t    ###\n\t    inverse_failure_threshold=0.1,\n\t    moving_average_for_momentum=False,\n\t    skip_preconditioning_dim_size_gt=4096,\n", "    clip_by_scaled_gradient_norm=None,\n\t    precision=lax.Precision.HIGHEST,\n\t    tensordot_precision: Optional[lax.Precision] = None,\n\t    relative_matrix_epsilon=True,\n\t    merge_small_dims_block_size=4096,\n\t    lobpcg_topk_precondition: int = 0,\n\t    lobpcg_max_iter: int = 0,\n\t    precondtioner_type=PreconditionerType.ALL,\n\t    generate_fd_metrics: bool = False,\n\t    compression_rank: int = 0,\n", "    frequent_directions: bool = False,\n\t    reset_preconditioner: bool = False,\n\t    average_grad: bool = False,\n\t    skip_preconditioning_rank_lt=1,\n\t    decoupled_learning_rate=True,\n\t    decoupled_weight_decay=False,\n\t    generate_training_metrics=True,\n\t    reuse_preconditioner=False,\n\t    eigh=False,\n\t):\n", "  \"\"\"Distributed Shampoo optimizer.\n\t  Distributed Shampoo is a second-order preconditioned method (concretely, a\n\t  variant of full-matrix Adagrad), that provides significant convergence and\n\t  wall-clock time improvements compared to conventional first-order methods,\n\t  and that has been shown to scale to large state-of-the-art deep learning\n\t  models.\n\t  References:\n\t    Scalable Second Order Optimization for Deep Learning,\n\t    Rohan Anil, Vineet Gupta, Tomer Koren, Kevin Regan, Yoram Singer\n\t    Preprint: https://arxiv.org/abs/2002.09018\n", "  Args:\n\t    learning_rate: the step size used to update the parameters.\n\t    block_size: Block size for large layers (if > 0). Preconditioning compute\n\t      operation is cubic in the dimension of the tensor. Block size allows us to\n\t      chunk the layers into sub-layers of maximal dimension dictated by this\n\t      value. Use 128 as default (increase if you have compute budget).\n\t    beta1: momentum parameter.\n\t    beta2: second moment averaging parameter.\n\t    diagonal_epsilon: epsilon for diagonal adagrad (only if layerwise grafting\n\t      to AdaGrad is enabled).\n", "    matrix_epsilon: epsilon to add to statistics before computing inverse pth\n\t      root. If you are running in f32 precision for inverse pth root\n\t      (recommended today) this can go upto 1e-6. If you have latest hardware\n\t      with native f64 precision, set this upto 1e-12.\n\t    weight_decay: Weight decay for regularization.\n\t    start_preconditioning_step: When to start Shampoo update before which\n\t      diagonal update is used. This is because we dont have enough information\n\t      to do stable inverse.\n\t    preconditioning_compute_steps: How often to compute preconditioner.\n\t      Performance tuning params for controlling memory and compute requirements.\n", "      Ideally set this and statistics_compute_steps params to 1.\n\t    decay_preconditioning_compute_steps: Flag to use learning rate schedule to\n\t      decay preconditioning_compute_steps over time. Defaults to False.\n\t    end_preconditioning_compute_steps: If decay preconditioning_compute_steps,\n\t      this sets the maximum value of preconditioning_compute_steps to decay to.\n\t      Defaults to None.\n\t    statistics_compute_steps: How often to compute statistics.\n\t    best_effort_shape_interpretation: If there are some small dimensions,\n\t      collapse them e.g. [1, 2, 512, 1, 2048, 1, 3, 4] --> [1024, 2048, 12] if\n\t      block = 1024, [1, 2, 768, 1, 2048] --> [2, 768, 2048]\n", "    graft_type: Grafting is a technique to fix the layerwise scale of Shampoo\n\t      optimizer. This allows us to plugin the Shampoo optimizer into settings\n\t      where SGD/AdaGrad is already well tuned.\n\t    nesterov: Nesterov momentum.\n\t    exponent_override: Override the exponent used in matrix inverse.\n\t    batch_axis_name: labeled axis over pmap for data-parallel training the\n\t      optimizer used for.\n\t    statistics_partition_spec: PartitionSpec to be used in sharded mode.\n\t    preconditioner_partition_spec: PartitionSpec to be used in sharded mode.\n\t    num_devices_for_pjit: Number of devices to parallelize over when using pjit.\n", "    shard_optimizer_states: Shard optimizer states to save memory in model\n\t      parallel training.\n\t    best_effort_memory_usage_reduction: Best effort memory usage reduction. -\n\t      diagonal_statistics -> jnp.bfloat16 - momentum buffers (2x) -> jnp.int8 -\n\t      statistics, preconditioners -> jnp.int16 + diagonals\n\t    inverse_failure_threshold: numerics are hard and inverses fail sometimes; we\n\t      determine that using this threshold.\n\t    moving_average_for_momentum: Whether to use moving average for momentum\n\t      instead of exponential moving average.\n\t    skip_preconditioning_dim_size_gt: Skip if preconditioning dim size is\n", "      greater than this value.\n\t    clip_by_scaled_gradient_norm: Clip by scaled gradient norm (only useful when\n\t      using RMSProp Grafting).\n\t    precision: precision XLA related flag, the available options are: a)\n\t      lax.Precision.DEFAULT (better step time, but not precise) b)\n\t      lax.Precision.HIGH (increased precision, slower) c) lax.Precision.HIGHEST\n\t      (best possible precision, slowest)\n\t    tensordot_precision: Optional precision to use for the tensordot operation\n\t      when computing statistics (e.g., G Gᵀ). Same options as `precision` above.\n\t    relative_matrix_epsilon: Whether to use relative epsilon to the max eigen\n", "      value when computing inverse-pth root.\n\t    merge_small_dims_block_size: Used as the maximum block size to merge the\n\t      shapes.\n\t    lobpcg_topk_precondition: If nonzero, specifies the number of top\n\t      eigenvectors to subtract out before performing LOBPCG. Note this makes\n\t      relative_matrix_epsilon essentially free.\n\t    lobpcg_max_iter: Number of LOBPCG iterations, if zero defaults to\n\t      `lobpcg_topk_precondition`.\n\t    precondtioner_type: Preconditioner type to select all, left only or right\n\t      only preconditioners.\n", "    generate_fd_metrics: Generate additional metrics for FD. Ignored if not\n\t      (generate_training_metrics and frequent_directions).\n\t    compression_rank: Low rank plus diagonal compression of preconditioner. If\n\t      negative, uses the lowest eigenvalues of the covariance matrix to\n\t      approximate the low rank component, rather than the highest. Disables\n\t      preconditioner & stats quantization if active.\n\t    frequent_directions: Can only be true if compression_rank > 0. Use frequent\n\t      directions to update the preconditioner inverse root directly. Statistics\n\t      are still tracked (for debugging checkpoints) but unused in the learning\n\t      algorithm. Must set `statistics_compute_steps` to equal to\n", "      `preconditioning_compute_steps`.\n\t    reset_preconditioner: If set, resets preconditioner, and therefore\n\t      FD statistics, every round(1/(1-beta2)) steps (and otherwise behaves like\n\t      beta2=1.0).\n\t    average_grad: Can only be true if frequent_directions is set. Averages most\n\t      recent `statistics_compute_steps` grads before updating the FD structure\n\t      every `statistics_compute_steps`.\n\t    skip_preconditioning_rank_lt: Skips preconditioning for parameters with rank\n\t      less than this value.\n\t    decoupled_learning_rate: If True, use decoupled learning rate, otherwise\n", "      couple it with preconditioned gradient computation. (Default True)\n\t    decoupled_weight_decay: If True, use decoupled weight decay, otherwise\n\t      couple with weight decay. (Default False)\n\t    generate_training_metrics: If True, gather training metrics, otherwise avoid\n\t      generating them (to reduce memory usage).\n\t    reuse_preconditioner: If True, pass the previous derived preconditioner as a\n\t      warm start to the next iteratin's inverse pth root computation.\n\t    eigh: If True, and uses eigen decomposition for inverse-pth root.\n\t  Returns:\n\t    a GradientTransformation.\n", "  \"\"\"\n\t  reset_frequency = None\n\t  if reset_preconditioner and not frequent_directions:\n\t    raise ValueError(\"reset_preconditioner=True requries frequent_directions\")\n\t  if reset_preconditioner:\n\t    reset_frequency = int(np.round(1 / (1 - beta2))) if beta2 != 1 else None\n\t    beta2 = 1.0\n\t  generate_fd_metrics = generate_fd_metrics and frequent_directions\n\t  if frequent_directions and compression_rank <= 0:\n\t    raise ValueError(\"frequent_directions=True requires compression_rank > 0,\"\n", "                     f\" found {compression_rank}\")\n\t  if average_grad and not frequent_directions:\n\t    raise ValueError(\"average_grad requested but frequent_directions is False\")\n\t  if frequent_directions and (statistics_compute_steps !=\n\t                              preconditioning_compute_steps):\n\t    raise ValueError(\"frequent_directions=True requires \"\n\t                     f\"statistics_compute_steps ({statistics_compute_steps}) \"\n\t                     \"to equal != preconditioning_compute_steps \"\n\t                     f\"({preconditioning_compute_steps})\")\n\t  def _graft_type_has_diagonal_statistics():\n", "    \"\"\"Returns True if using diagonal firt order method for grafting.\"\"\"\n\t    return graft_type not in [\n\t        GraftingType.SGD, GraftingType.SQRT_N, GraftingType.NONE]\n\t  def quantized_dtype_for_momentum_buffers(var):\n\t    return jnp.int8 if best_effort_memory_usage_reduction and len(\n\t        var.shape) > 1 else jnp.float32\n\t  quantize_second_moment = (\n\t      best_effort_memory_usage_reduction and\n\t      not compression_rank and not frequent_directions and\n\t      batch_axis_name)\n", "  # Preconditioner and statistics are both stores as int16 in this mode.\n\t  # We take out the diagonal to make quantization easier.\n\t  def quantized_dtype_for_second_moment_statistics_buffers():\n\t    return jnp.int16 if quantize_second_moment else jnp.float32\n\t  # Preconditioner and statistics are both stores as int16 in this mode.\n\t  # We take out the diagonal to make quantization easier.\n\t  def quantized_dtype_for_second_moment_preconditioner_buffers():\n\t    return jnp.int16 if quantize_second_moment else jnp.float32\n\t  # _quantized_matrix_inverse_pth_root_vmap implementation assumes\n\t  # that preconditioner is quantized if and only if stats is quantized.\n", "  qdt_precond = quantized_dtype_for_second_moment_preconditioner_buffers()\n\t  qdt_stat = quantized_dtype_for_second_moment_statistics_buffers()\n\t  assert qdt_precond == qdt_stat\n\t  def _to_float(maybe_quantized):\n\t    if isinstance(maybe_quantized, QuantizedValue):\n\t      return maybe_quantized.to_float()\n\t    else:\n\t      return maybe_quantized\n\t  def _maybe_quantize_statistics(statistics_list):\n\t    return _maybe_quantize_matrices_with_dtype(\n", "        statistics_list, quantized_dtype_for_second_moment_statistics_buffers())\n\t  def _maybe_quantize_preconditioners(statistics_list):\n\t    return _maybe_quantize_matrices_with_dtype(\n\t        statistics_list,\n\t        quantized_dtype_for_second_moment_preconditioner_buffers())\n\t  def _maybe_quantize_matrices_with_dtype(statistics_list, quantized_dtype):\n\t    if quantized_dtype != jnp.float32:\n\t      return ([\n\t          QuantizedValue.from_float_value(\n\t              s, quantized_dtype, extract_diagonal=True)\n", "          for s in statistics_list\n\t      ])\n\t    else:\n\t      return statistics_list\n\t  def _maybe_dequantize_preconditioners(preconditioner_list):\n\t    return _maybe_dequantize_matrices_with_dtype(\n\t        preconditioner_list,\n\t        quantized_dtype_for_second_moment_preconditioner_buffers())\n\t  def _maybe_dequantize_matrices_with_dtype(statistics_list, quantized_dtype):\n\t    if quantized_dtype != jnp.float32:\n", "      return [s.to_float() for s in statistics_list]\n\t    else:\n\t      return statistics_list\n\t  def _quantize_diagonal_statistics(diagonal_statistics):\n\t    return QuantizedValue.from_float_value(diagonal_statistics, jnp.float32)\n\t  def _quantize_momentum(momentum_statistics):\n\t    return QuantizedValue.from_float_value(\n\t        momentum_statistics,\n\t        quantized_dtype_for_momentum_buffers(momentum_statistics))\n\t  def preconditioner_from_params(param):\n", "    \"\"\"Returns a Preconditioner object for given param.\"\"\"\n\t    return Preconditioner(\n\t        param,\n\t        block_size,\n\t        merge_small_dims_block_size,\n\t        best_effort_shape_interpretation,\n\t        precondtioner_type,\n\t        compression_rank,\n\t    )\n\t  def precond_dim(max_size):\n", "    \"\"\"Derives largest preconditioner dimension.\"\"\"\n\t    if compression_rank != 0:\n\t      dim = _precond_dim(compression_rank, max_size)\n\t      assert dim < max_size, (\"all layers are too small for compression_rank\")\n\t      return dim\n\t    return max_size\n\t  def pad_and_maybe_zero_preconditioners(preconditioners, total, max_size,\n\t                                         step):\n\t    \"\"\"Pad preconditioners up to total x max_size x precond_dim(max_size).\"\"\"\n\t    pd = precond_dim(max_size)\n", "    def maybe_reset_preconditioner(step, preconditioner):\n\t      if reset_frequency is None:\n\t        return preconditioner\n\t      return jnp.where(step % reset_frequency == 0, 0.0, 1.0) * preconditioner\n\t    def _pad_preconditioner(preconditioner):\n\t      assert preconditioner.ndim == 2\n\t      r, c = preconditioner.shape\n\t      assert r <= max_size\n\t      assert c <= pd\n\t      pad_rows = [(0, max_size - r)]\n", "      pad_cols = [(0, pd - c)]\n\t      padding = pad_rows + pad_cols\n\t      preconditioner = maybe_reset_preconditioner(step, preconditioner)\n\t      return jnp.pad(preconditioner, padding)\n\t    last_dims_padded = [_pad_preconditioner(p) for p in preconditioners]\n\t    dt = preconditioners[0].dtype if preconditioners else jnp.float32\n\t    num_extra = total - len(last_dims_padded)\n\t    extra = [jnp.zeros([max_size, pd], dtype=dt)] * num_extra\n\t    return last_dims_padded + extra\n\t  def sharded_init_fn(params):\n", "    \"\"\"Returns optimizer state (for PJIT mode).\n\t    Args:\n\t      params: the parameters that should be updated.\n\t    \"\"\"\n\t    params_flat, treedef = jax.tree_flatten(params)\n\t    # Find max size to pad to.\n\t    max_size = 0\n\t    for param in params_flat:\n\t      preconditioner = preconditioner_from_params(param)\n\t      if not _skip_preconditioning(param):\n", "        shapes = preconditioner.shapes_for_preconditioners()\n\t        sizes = [s[0] for s in shapes]\n\t        max_size = max(max(sizes), max_size)\n\t    padded_statistics = []\n\t    padded_preconditioners = []\n\t    local_stats_flat = []\n\t    exponents = []\n\t    for param in params_flat:\n\t      preconditioner = preconditioner_from_params(param)\n\t      shapes = preconditioner.shapes_for_preconditioners()\n", "      sizes = []\n\t      statistics = []\n\t      preconditioners = []\n\t      index_start = len(padded_statistics)\n\t      if not _skip_preconditioning(param):\n\t        sizes = [s[0] for s in shapes]\n\t        shapes = preconditioner.shapes_for_preconditioners()\n\t        statistics = [\n\t            matrix_epsilon * jnp.eye(max_size, dtype=jnp.float32)\n\t            for s in shapes\n", "        ]\n\t        pd = precond_dim(max_size)\n\t        # If the preconditioner is using a low-rank representation, initialize\n\t        # it to zero instead of an invalid eye.\n\t        preconditioners = [\n\t            jnp.eye(max_size, pd, dtype=jnp.float32) * (pd == max_size)\n\t            for s in shapes\n\t        ]\n\t        padded_statistics.extend(statistics)\n\t        padded_preconditioners.extend(preconditioners)\n", "        exponent = (\n\t            preconditioner.exponent_for_preconditioner()\n\t            if exponent_override == 0 else exponent_override)\n\t        exponents.extend([exponent] * len(shapes))\n\t      diagonal_statistics = _quantize_diagonal_statistics(jnp.zeros_like(param))\n\t      diagonal_momentum = _quantize_momentum(jnp.zeros_like(param))\n\t      momentum = _quantize_momentum(jnp.zeros_like(param))\n\t      local_stats_flat.append(\n\t          LocalShardedParameterStats(  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t              diagonal_statistics,\n", "              diagonal_momentum,\n\t              momentum,\n\t              init_avg_grad(param, frequent_directions and average_grad),\n\t              init_training_metrics(\n\t                  len(sizes),\n\t                  generate_training_metrics,\n\t                  generate_fd_metrics,\n\t              ),\n\t              index_start,\n\t              sizes))\n", "    local_stats = jax.tree_unflatten(treedef, local_stats_flat)\n\t    to_pad = -len(padded_statistics) % num_devices_for_pjit\n\t    if max_size == 0:\n\t      to_pad = num_devices_for_pjit\n\t      max_size = block_size\n\t      stat_dtype = jnp.float32\n\t    else:\n\t      stat_dtype = padded_statistics[0].dtype\n\t    # Pad the statistics and preconditioner matrices to be a multiple of\n\t    # num devices.\n", "    # TODO(rohananil): Relax to only the size of the mesh axis where the dim\n\t    # is split on.\n\t    padded_statistics.extend(\n\t        [jnp.eye(max_size, dtype=stat_dtype) for _ in range(to_pad)])\n\t    pd = precond_dim(max_size)\n\t    # If the preconditioner is using a low-rank representation, initialize\n\t    # it to zero instead of an invalid eye.\n\t    padded_preconditioners.extend([\n\t        jnp.eye(max_size, pd, dtype=stat_dtype) * (pd == max_size)\n\t        for _ in range(to_pad)\n", "    ])\n\t    exponents.extend([1 for _ in range(to_pad)])\n\t    global_stats = GlobalShardedParameterStats(\n\t        jnp.stack(padded_statistics), jnp.stack(padded_preconditioners),\n\t        jnp.stack(exponents))\n\t    return ShampooState(\n\t        count=jnp.zeros([], jnp.int32),\n\t        stats=ShardedShampooStats(global_stats, local_stats))\n\t  def _max_statistics_size_from_params(params):\n\t    max_size = 0\n", "    for param in params:\n\t      param_clone = jnp.zeros(param.shape, dtype=param.dtype)\n\t      preconditioner = preconditioner_from_params(param_clone)\n\t      if not _skip_preconditioning(param):\n\t        shapes = preconditioner.shapes_for_preconditioners()\n\t        sizes = [s[0] for s in shapes]\n\t        max_size = max(max(sizes), max_size)\n\t    return max_size\n\t  def _remove_leading_sharding_annotation(pspec):\n\t    \"\"\"Mapping from N-d to (N-1)-d, used for quantization, factoring etc.\"\"\"\n", "    # None and PSpec(None) are valid PSpecs.\n\t    if pspec and len(pspec) > 1:\n\t      return jax.sharding.PartitionSpec(*pspec[1:])\n\t    else:\n\t      return []\n\t  def sharded_init_partition_spec_fn(params, params_partition_spec,\n\t                                     partition_spec_for_statistics):\n\t    \"\"\"Returns a parallel state tree with PartitionSpec associated with state.\n\t    Args:\n\t      params: A pytree with params.\n", "      params_partition_spec: A pytree with PartitionSpec for params.\n\t      partition_spec_for_statistics: PartitionSpec for the statistics.\n\t    \"\"\"\n\t    # Parallel lists of spec, and params.\n\t    param_pspec_flat, _ = jax.tree_flatten(\n\t        params_partition_spec, is_leaf=lambda x: x is None)\n\t    params_flat, treedef = jax.tree_flatten(params)\n\t    assert param_pspec_flat\n\t    assert params_flat\n\t    # Step is replicated across cores.\n", "    # None means cores.\n\t    local_stats_flat = []\n\t    num_statistics = 0\n\t    for param, param_pspec in zip(params_flat, param_pspec_flat):\n\t      param_clone = jnp.zeros(param.shape, dtype=param.dtype)\n\t      preconditioner = preconditioner_from_params(param_clone)\n\t      shapes = preconditioner.shapes_for_preconditioners()\n\t      sizes = []\n\t      index_start = num_statistics\n\t      if not _skip_preconditioning(param):\n", "        sizes = [s[0] for s in shapes]\n\t        shapes = preconditioner.shapes_for_preconditioners()\n\t        num_statistics += len(shapes)\n\t      qdtype = quantized_dtype_for_momentum_buffers(param)\n\t      m1_pspec = param_pspec\n\t      m2_pspec = param_pspec\n\t      m1_scale_pspec = []\n\t      m2_scale_pspec = []\n\t      if qdtype != jnp.float32:\n\t        m1_scale_pspec = _remove_leading_sharding_annotation(m1_pspec)\n", "        m2_scale_pspec = _remove_leading_sharding_annotation(m2_pspec)\n\t      local_stats_flat.append(\n\t          LocalShardedParameterStats(  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t              QuantizedValue(param_pspec, [], [], jnp.float32, False,  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                             list(param.shape)),\n\t              QuantizedValue(m1_pspec, [], m1_scale_pspec, qdtype, False,  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                             list(param.shape)),\n\t              QuantizedValue(m2_pspec, [], m2_scale_pspec, qdtype, False,  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                             list(param.shape)),\n\t              init_avg_grad_pspec(param_pspec, frequent_directions and\n", "                                  average_grad),\n\t              init_training_metrics_pspec(\n\t                  generate_training_metrics,\n\t                  generate_fd_metrics,\n\t              ),\n\t              index_start,\n\t              sizes))\n\t    local_stats = jax.tree_unflatten(treedef, local_stats_flat)\n\t    global_stats = GlobalShardedParameterStats(partition_spec_for_statistics,  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                                               partition_spec_for_statistics,\n", "                                               jax.sharding.PartitionSpec())\n\t    count_pspec = jax.sharding.PartitionSpec()\n\t    return ShampooState(  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t        count=count_pspec, stats=ShardedShampooStats(global_stats, local_stats))\n\t  def sharded_init_shape_and_dtype_fn(params):\n\t    \"\"\"Returns a parallel state tree with shape, dtype associated with state.\n\t    Args:\n\t      params: A pytree with params.\n\t    \"\"\"\n\t    # Parallel lists of spec, and params.\n", "    params_flat, treedef = jax.tree_flatten(params)\n\t    assert params_flat\n\t    # Step is replicated across cores.\n\t    # None means cores.\n\t    local_stats_flat = []\n\t    num_statistics = 0\n\t    for param in params_flat:\n\t      param_clone = jnp.zeros(param.shape, dtype=param.dtype)\n\t      preconditioner = preconditioner_from_params(param_clone)\n\t      shapes = preconditioner.shapes_for_preconditioners()\n", "      sizes = []\n\t      index_start = num_statistics\n\t      if not _skip_preconditioning(param):\n\t        sizes = [s[0] for s in shapes]\n\t        shapes = preconditioner.shapes_for_preconditioners()\n\t        num_statistics += len(shapes)\n\t      qdtype = quantized_dtype_for_momentum_buffers(param)\n\t      m1_shape_and_dtype = [list(param.shape), param.dtype]\n\t      m2_shape_and_dtype = [list(param.shape), param.dtype]\n\t      m1_scale_shape_and_dtype = []\n", "      m2_scale_shape_and_dtype = []\n\t      if qdtype != jnp.float32:\n\t        m1_scale_shape_and_dtype = [list(param.shape)[1:], qdtype]\n\t        m2_scale_shape_and_dtype = [list(param.shape)[1:], qdtype]\n\t      diagonal_statistics_shape_and_dtype = [list(param.shape), param.dtype]\n\t      local_stats_flat.append(\n\t          LocalShardedParameterStats(  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t              QuantizedValue(diagonal_statistics_shape_and_dtype, [], [],  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                             jnp.float32, False, list(param.shape)),\n\t              QuantizedValue(m1_shape_and_dtype, [], m1_scale_shape_and_dtype,  # pytype: disable=wrong-arg-types  # numpy-scalars\n", "                             qdtype, False, list(param.shape)),\n\t              QuantizedValue(m2_shape_and_dtype, [], m2_scale_shape_and_dtype,  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t                             qdtype, False, list(param.shape)),\n\t              init_avg_grad_shape(param, frequent_directions and average_grad),\n\t              init_training_metrics_shapes(\n\t                  len(sizes),\n\t                  generate_training_metrics,\n\t                  generate_fd_metrics,\n\t              ),\n\t              index_start,\n", "              sizes,\n\t          ))\n\t    local_stats = jax.tree_unflatten(treedef, local_stats_flat)\n\t    max_statistics_size = _max_statistics_size_from_params(params_flat)\n\t    to_pad = -num_statistics % num_devices_for_pjit\n\t    num_statistics += to_pad\n\t    if num_statistics == 0:\n\t      num_statistics = num_devices_for_pjit\n\t      max_statistics_size = block_size\n\t    statistics_shape = [\n", "        num_statistics, max_statistics_size, max_statistics_size\n\t    ]\n\t    preconditioners_shape = [\n\t        num_statistics, max_statistics_size,\n\t        precond_dim(max_statistics_size)\n\t    ]\n\t    global_stats = GlobalShardedParameterStats(  # pytype: disable=wrong-arg-types  # numpy-scalars\n\t        [statistics_shape, jnp.float32], [preconditioners_shape, jnp.float32],\n\t        [[num_statistics], jnp.int32])\n\t    return ShampooState(  # pytype: disable=wrong-arg-types  # numpy-scalars\n", "        count=[[], jnp.float32],\n\t        stats=ShardedShampooStats(global_stats, local_stats))\n\t  def sharded_update_fn(grads, state, params):\n\t    \"\"\"Transform the input gradient and update all statistics in sharded mode.\n\t    Args:\n\t      grads: the gradient tensors for the parameters.\n\t      state: a named tuple containing the state of the optimizer\n\t      params: the parameters that should be updated.\n\t    Returns:\n\t      A tuple containing the new parameters and the new optimizer state.\n", "    \"\"\"\n\t    params_flat, treedef = jax.tree_flatten(params)\n\t    grads_flat = treedef.flatten_up_to(grads)\n\t    global_stats = state.stats.global_stats\n\t    local_stats_flat = treedef.flatten_up_to(state.stats.local_stats)\n\t    stats_flat = []\n\t    for local_stat in local_stats_flat:\n\t      stats_flat.append(\n\t          _convert_to_parameter_stats(\n\t              global_stats,\n", "              local_stat,\n\t              compression_rank,\n\t          ))\n\t    new_stats_flat = jax.tree_map(\n\t        lambda g, s, p: _compute_stats(g, s, p, state.count), grads_flat,\n\t        stats_flat, params_flat)\n\t    outputs = jax.tree_map(\n\t        lambda g, s, p: _transform_grad(g, s, p, state.count), grads_flat,\n\t        new_stats_flat, params_flat)\n\t    updates_flat, new_stats_flat = list(zip(*outputs)) if outputs else ((), ())\n", "    updates = jax.tree_unflatten(treedef, updates_flat)\n\t    new_local_stats_flat = []\n\t    for new_stat, local_stat in zip(new_stats_flat, local_stats_flat):\n\t      new_local_stats_flat.append(\n\t          _convert_from_parameter_stats(\n\t              new_stat,\n\t              local_stat,\n\t          ))\n\t    max_size = global_stats.statistics.shape[1]\n\t    new_padded_statistics = []\n", "    padding_starts = []\n\t    for stat in new_stats_flat:\n\t      new_padded_statistics.extend(\n\t          [pad_square_matrix(stat, max_size) for stat in stat.statistics])\n\t      padding_starts.extend([len(stat) for stat in stat.statistics])\n\t    # Create global stats\n\t    # TODO(rohananil): Preconditioner is not updated every step, so cost of\n\t    # stack/pad can be obviated away.\n\t    # Pad the statistics and preconditioner matrices to be a multiple of\n\t    # num devices.\n", "    # TODO(rohananil): Relax to only the size of the mesh axis where the dim\n\t    # is split on.\n\t    to_pad = -len(new_padded_statistics) % num_devices_for_pjit\n\t    if not new_padded_statistics:\n\t      to_pad = num_devices_for_pjit\n\t      stat_dtype = jnp.float32\n\t    else:\n\t      stat_dtype = new_padded_statistics[0].dtype\n\t    new_padded_statistics.extend(\n\t        [jnp.eye(max_size, dtype=stat_dtype) for _ in range(to_pad)])\n", "    padding_starts += [0] * to_pad\n\t    if reuse_preconditioner:\n\t      prev_preconditioners = []\n\t      for stat in new_stats_flat:\n\t        prev_preconditioners.extend(stat.preconditioners)\n\t      prev_padded_preconditioners = pad_and_maybe_zero_preconditioners(\n\t          prev_preconditioners, len(new_padded_statistics), max_size,\n\t          state.count)\n\t    else:\n\t      prev_padded_preconditioners = None\n", "    new_stacked_padded_statistics = jnp.stack(new_padded_statistics)\n\t    new_stacked_padded_statistics = pjit.with_sharding_constraint(\n\t        new_stacked_padded_statistics, statistics_partition_spec)\n\t    stacked_padding_starts = jnp.array(padding_starts, jnp.int32)\n\t    prev_stacked_padded_preconditioners = _maybe(jnp.stack)(\n\t        prev_padded_preconditioners)\n\t    prev_stacked_padded_preconditioners = _maybe(pjit.with_sharding_constraint)(\n\t        prev_padded_preconditioners, statistics_partition_spec)\n\t    def _internal_inverse_pth_root_all():\n\t      preconditioners, metrics = _matrix_inverse_pth_root_pjit(\n", "          new_stacked_padded_statistics,\n\t          global_stats.exponents,\n\t          stacked_padding_starts,\n\t          prev_stacked_padded_preconditioners,\n\t          statistics_partition_spec,\n\t      )\n\t      return preconditioners, metrics\n\t    scheduled_preconditioning_compute_steps = (\n\t        decay_preconditioning_compute_steps\n\t        and end_preconditioning_compute_steps\n", "        and callable(learning_rate)\n\t    )\n\t    preconditioning_compute_steps_t = preconditioning_compute_steps\n\t    if scheduled_preconditioning_compute_steps:\n\t      preconditioning_compute_steps_t = preconditioning_compute_steps_schedule(\n\t          learning_rate,\n\t          preconditioning_compute_steps,\n\t          end_preconditioning_compute_steps,\n\t          state.count,\n\t      )\n", "    perform_step = state.count % preconditioning_compute_steps_t == 0\n\t    def _update_preconditioners():\n\t      # Passing statistics instead of preconditioners as they are similarly\n\t      # shaped tensors. Note statistics will be ignored as we are passing in\n\t      # a large error value.\n\t      pd = precond_dim(new_stacked_padded_statistics.shape[2])\n\t      preconditioners_init = new_stacked_padded_statistics[:, :, :pd]\n\t      n = new_stacked_padded_statistics.shape[0]\n\t      metrics_init = cast(\n\t          TrainingMetrics,\n", "          init_training_metrics(\n\t              n,\n\t              generate_training_metrics=True,\n\t              generate_fd_metrics=generate_fd_metrics,\n\t          ))\n\t      new_errors = jnp.ones_like(metrics_init.inverse_pth_root_errors) * (\n\t          inverse_failure_threshold)\n\t      metrics_init = metrics_init.replace(inverse_pth_root_errors=new_errors)\n\t      init_state = [preconditioners_init, metrics_init]\n\t      return efficient_cond(perform_step, _internal_inverse_pth_root_all,\n", "                            init_state)\n\t    (new_preconditioners, metrics, _, _) = _update_preconditioners_fn(\n\t        _internal_inverse_pth_root_all,\n\t        _update_preconditioners,\n\t        preconditioning_compute_steps_t,\n\t        scheduled_preconditioning_compute_steps,\n\t        quantized=False,\n\t    )\n\t    if generate_training_metrics:\n\t      new_local_stats_flat = _add_metrics_into_local_stats(\n", "          new_local_stats_flat, metrics, ~perform_step)\n\t    new_local_stats = jax.tree_unflatten(treedef, new_local_stats_flat)\n\t    errors = metrics.inverse_pth_root_errors\n\t    errors = errors.reshape((-1, 1, 1))\n\t    predicate = jnp.logical_or(\n\t        jnp.isnan(errors),\n\t        errors >= inverse_failure_threshold).astype(new_preconditioners.dtype)\n\t    # TODO(rohananil): Check for numerical instabilities.\n\t    new_conditional_preconditioners = (\n\t        predicate * global_stats.preconditioners +\n", "        (1.0 - predicate) * new_preconditioners)\n\t    new_global_stats = GlobalShardedParameterStats(\n\t        new_stacked_padded_statistics, new_conditional_preconditioners,\n\t        global_stats.exponents)\n\t    new_shampoo_state = ShampooState(\n\t        count=state.count + 1,\n\t        stats=ShardedShampooStats(new_global_stats, new_local_stats))\n\t    return updates, new_shampoo_state\n\t  def init_fn(params):\n\t    \"\"\"Initialise the optimiser's state.\"\"\"\n", "    def _init(param):\n\t      preconditioner = preconditioner_from_params(param)\n\t      statistics = []\n\t      preconditioners = []\n\t      if not _skip_preconditioning(param):\n\t        shapes = preconditioner.shapes_for_preconditioners()\n\t        statistics = [\n\t            matrix_epsilon * jnp.eye(s[0], dtype=jnp.float32) for s in shapes\n\t        ]\n\t        # If the preconditioner is using a low-rank representation, initialize\n", "        # it to zero instead of an invalid eye.\n\t        preconditioners = [\n\t            jnp.eye(s[0], s[1], dtype=jnp.float32) * (s[0] == s[1])\n\t            for s in shapes\n\t        ]\n\t      diagonal_statistics = []\n\t      if _graft_type_has_diagonal_statistics():\n\t        diagonal_statistics = jnp.zeros_like(param)\n\t      diagonal_momentum = _quantize_momentum(jnp.zeros_like(param))\n\t      momentum = _quantize_momentum(jnp.zeros_like(param))\n", "      return ParameterStats(\n\t          _quantize_diagonal_statistics(diagonal_statistics),\n\t          _maybe_quantize_statistics(statistics),\n\t          _maybe_quantize_preconditioners(preconditioners),\n\t          diagonal_momentum,\n\t          momentum,\n\t          init_avg_grad(param, frequent_directions and average_grad),\n\t          init_training_metrics(\n\t              len(statistics),\n\t              generate_training_metrics,\n", "              generate_fd_metrics,\n\t          ))\n\t    return ShampooState(\n\t        count=jnp.zeros([], jnp.int32), stats=jax.tree_map(_init, params))\n\t  def _skip_preconditioning(param):\n\t    return len(param.shape) < skip_preconditioning_rank_lt or any(\n\t        [s > skip_preconditioning_dim_size_gt for s in param.shape])\n\t  def _compute_stats(grad, state, param, step):\n\t    \"\"\"Compute per-parameter statistics.\"\"\"\n\t    preconditioner = preconditioner_from_params(param)\n", "    new_statistics = [[]] * len(state.statistics)\n\t    w1 = beta2\n\t    w2 = jnp.where(beta2 == 1.0, beta2, 1.0 - beta2)\n\t    new_avg_grad = optax.MaskedNode()\n\t    if not _skip_preconditioning(param):\n\t      if frequent_directions and average_grad:\n\t        new_avg_grad = jnp.where(\n\t            jnp.logical_or(statistics_compute_steps == 1,\n\t                           step % statistics_compute_steps == 1), grad,\n\t            state.avg_grad + grad)\n", "        grad = new_avg_grad / statistics_compute_steps\n\t      def compute_updated_statistics():\n\t        return preconditioner.updated_statistics_from_grad(\n\t            state.statistics,\n\t            grad,\n\t            w1=w1,\n\t            w2=w2,\n\t            to_float=_to_float,\n\t            from_float=lambda x: _maybe_quantize_statistics([x])[0],\n\t            precision=tensordot_precision,\n", "            frequent_directions=frequent_directions,\n\t        )\n\t      if statistics_compute_steps > 1:\n\t        perform_step = step % statistics_compute_steps == 0\n\t        init_state = state.statistics\n\t        new_statistics = list(\n\t            efficient_cond(perform_step, compute_updated_statistics,\n\t                           init_state))\n\t      else:\n\t        new_statistics = compute_updated_statistics()\n", "    return ParameterStats(\n\t        state.diagonal_statistics,\n\t        new_statistics,\n\t        state.preconditioners,\n\t        state.diagonal_momentum,\n\t        state.momentum,\n\t        new_avg_grad,\n\t        state.training_metrics)\n\t  mi_pth_root = functools.partial(\n\t      matrix_inverse_pth_root,\n", "      ridge_epsilon=matrix_epsilon,\n\t      precision=precision,\n\t      relative_matrix_epsilon=relative_matrix_epsilon,\n\t      lobpcg_topk_precondition=lobpcg_topk_precondition,\n\t      lobpcg_max_iter=lobpcg_max_iter,\n\t      eigh=eigh)\n\t  # Wrap mi_pth_root(stats, exponents, padding_start) method\n\t  # around compression_rank handling.\n\t  if compression_rank != 0:\n\t    original_mi_pth_root = mi_pth_root\n", "    def small_mi_pth_root(stats, exponents, padding_start, prev):\n\t      # We would only run the full root if\n\t      # compression_rank + 2 >= dimension.\n\t      #\n\t      # But this should only ever happen for small tensors\n\t      # below the matrix size thanks to asserts in precond_dim().\n\t      root, metrics = original_mi_pth_root(\n\t          stats, exponents, padding_start=padding_start, prev=prev)\n\t      precond_dim = _precond_dim(compression_rank, stats.shape[0])\n\t      # By assumption, precond_dim >= padding_start; we're cutting\n", "      # off zeros here.\n\t      if generate_training_metrics and generate_fd_metrics:\n\t        metrics = metrics.replace(fd=FDDiagnostics())\n\t      return root[:, :precond_dim], metrics\n\t    def new_mi_pth_root(stats, exponents, padding_start, prev):\n\t      # padding_start == true unpacked gradient dimension size.\n\t      should_compress = _should_compress(compression_rank, padding_start)\n\t      if frequent_directions:\n\t        special_root = functools.partial(\n\t            _fd_update_root,\n", "            rank=compression_rank,\n\t            ridge_epsilon=matrix_epsilon,\n\t            relative_matrix_epsilon=relative_matrix_epsilon,\n\t            decay=beta2,\n\t            padding_start=padding_start,\n\t            prev=prev,\n\t            generate_training_metrics=generate_training_metrics,\n\t            generate_fd_metrics=generate_fd_metrics,\n\t        )\n\t      else:\n", "        special_root = functools.partial(\n\t            _low_rank_root,\n\t            compression_rank=compression_rank,\n\t            ridge_epsilon=matrix_epsilon,\n\t            relative_matrix_epsilon=relative_matrix_epsilon,\n\t            padding_start=padding_start,\n\t            prev=prev,\n\t        )\n\t      return jax.lax.cond(\n\t          should_compress, special_root,\n", "          functools.partial(\n\t              small_mi_pth_root,\n\t              padding_start=padding_start,\n\t              prev=prev,\n\t          ), stats, exponents)\n\t    mi_pth_root = new_mi_pth_root\n\t  def _matrix_inverse_pth_root_vmap(xs, ps, padding_starts, prev):\n\t    return jax.vmap(mi_pth_root)(\n\t        xs, ps, padding_start=padding_starts, prev=prev)\n\t  def _quantized_matrix_inverse_pth_root_vmap(qxs,\n", "                                              qds,\n\t                                              qbs,\n\t                                              ps,\n\t                                              padding_starts,\n\t                                              qpxs=None,\n\t                                              qpds=None,\n\t                                              qpbs=None):\n\t    assert (qpxs is None) == (qpds is None) == (qpbs is None)\n\t    assert (qpxs is None) == (not reuse_preconditioner)\n\t    def _quantized_to_float(qx, qd, qb):\n", "      qv = QuantizedValue(qx, qd, qb, qx.dtype, True, list(qx.shape))\n\t      return qv.to_float()\n\t    def matrix_inverse_pth_root_wrapper(qx, qd, qb, p, padding_start, qpx, qpd,\n\t                                        qpb):\n\t      v = _quantized_to_float(qx, qd, qb)\n\t      prev = _maybe(_quantized_to_float)(qpx, qpd, qpb)\n\t      preconditioner, metrics = mi_pth_root(\n\t          v, p, padding_start=padding_start, prev=prev)\n\t      qp = QuantizedValue.from_float_value(preconditioner, qx.dtype, True)\n\t      return qp.quantized, qp.diagonal, qp.bucket_size, metrics\n", "    return jax.vmap(matrix_inverse_pth_root_wrapper)(qxs, qds, qbs, ps,\n\t                                                     padding_starts, qpxs, qpds,\n\t                                                     qpbs)\n\t  def _matrix_inverse_pth_root_pjit(xs,\n\t                                    ps,\n\t                                    padding_starts,\n\t                                    prev_preconds=None,\n\t                                    statistics_partition_spec=None):\n\t    # Partition the concatenated statistics matrix across all cores.\n\t    pspec_for_partition = preconditioner_partition_spec\n", "    partitioned_xs = pjit.with_sharding_constraint(xs, pspec_for_partition)\n\t    if preconditioner_partition_spec:\n\t      partitioned_ps_spec = jax.sharding.PartitionSpec(\n\t          preconditioner_partition_spec[0]\n\t      )\n\t    else:\n\t      partitioned_ps_spec = None\n\t    partitioned_ps = pjit.with_sharding_constraint(ps, partitioned_ps_spec)\n\t    partitioned_prev_preconds = _maybe(pjit.with_sharding_constraint)(\n\t        prev_preconds, preconditioner_partition_spec)\n", "    partitioned_padding_starts = pjit.with_sharding_constraint(\n\t        padding_starts, partitioned_ps_spec)  # paddings are scalars like ps.\n\t    # Run matrix inverse pth root on each shard.\n\t    partitioned_preconditioners, partitioned_metrics = (\n\t        _matrix_inverse_pth_root_vmap(\n\t            partitioned_xs,\n\t            partitioned_ps,\n\t            partitioned_padding_starts,\n\t            prev=partitioned_prev_preconds))\n\t    # Reshard output to have the same PSpec as input. This is required to avoid\n", "    # vmap seeing the full set of statistics.\n\t    partitioned_preconditioners = pjit.with_sharding_constraint(\n\t        partitioned_preconditioners, pspec_for_partition)\n\t    # Recombine the outputs at each core.\n\t    preconditioners = pjit.with_sharding_constraint(partitioned_preconditioners,\n\t                                                    statistics_partition_spec)\n\t    metrics = pjit.with_sharding_constraint(partitioned_metrics,\n\t                                            jax.sharding.PartitionSpec())\n\t    return preconditioners, metrics\n\t  def _pmap_compute_preconditioners(states, step, statistics,\n", "                                    num_statistics_per_state, original_shapes,\n\t                                    exponents, max_size, prev_preconditioners):\n\t    \"\"\"Computes preconditioners for given statistics in states in PMAP mode.\n\t    Args:\n\t      states: A list of optimizer states.\n\t      step: Current step number\n\t      statistics: A list of statistics for all variables (for every dim)\n\t      num_statistics_per_state: Number of statistis per state to reconstruct\n\t        output states.\n\t      original_shapes: A list of shapes of the statistics.\n", "      exponents: Exponent power to use for inverse-pth roots.\n\t      max_size: Maximum dim of the statistics to pad.\n\t      prev_preconditioners: Previously available preconditioner.\n\t    Returns:\n\t      New optimizer states after computing the preconditioner.\n\t    \"\"\"\n\t    if batch_axis_name:\n\t      num_devices = lax.psum(1, batch_axis_name)\n\t    else:\n\t      num_devices = 1\n", "    num_statistics = len(statistics)\n\t    # Pad statistics and exponents to next multiple of num_devices.\n\t    packed_statistics = [\n\t        pad_square_matrix(stat, max_size) for stat in statistics\n\t    ]\n\t    to_pad = -num_statistics % num_devices\n\t    packed_statistics.extend([\n\t        jnp.eye(max_size, dtype=packed_statistics[0].dtype)\n\t        for _ in range(to_pad)\n\t    ])\n", "    exponents.extend([1 for _ in range(to_pad)])\n\t    paddings = [len(stat) for stat in statistics] + [0] * to_pad\n\t    if not packed_statistics:\n\t      return states\n\t    if reuse_preconditioner:\n\t      assert len(prev_preconditioners) == num_statistics\n\t      packed_preconditioners = pad_and_maybe_zero_preconditioners(\n\t          prev_preconditioners, len(packed_statistics), max_size, step)\n\t    else:\n\t      packed_preconditioners = None\n", "    all_statistics = batch(packed_statistics, num_devices)\n\t    all_exponents = batch(exponents, num_devices)\n\t    all_paddings = batch(paddings, num_devices)\n\t    all_preconditioners = _maybe(batch)(packed_preconditioners, num_devices)\n\t    def _internal_inverse_pth_root_all():\n\t      if batch_axis_name:\n\t        current_replica = lax.axis_index(batch_axis_name)\n\t        preconditioners, metrics = _matrix_inverse_pth_root_vmap(\n\t            all_statistics[current_replica],\n\t            all_exponents[current_replica],\n", "            all_paddings[current_replica],\n\t            _maybe_ix(all_preconditioners, current_replica),\n\t        )\n\t        preconditioners = jax.lax.all_gather(preconditioners, batch_axis_name)\n\t        metrics = jax.lax.all_gather(metrics, batch_axis_name)\n\t        preconditioners_flat = unbatch(preconditioners)\n\t        metrics_flat = jax.tree_map(unbatch, metrics)\n\t      else:\n\t        preconditioners, metrics = _matrix_inverse_pth_root_vmap(\n\t            all_statistics[0],\n", "            all_exponents[0],\n\t            all_paddings[0],\n\t            _maybe_ix(all_preconditioners, 0),\n\t        )\n\t        preconditioners_flat = unbatch(jnp.stack([preconditioners]))\n\t        metrics = jax.tree_map(\n\t            functools.partial(jnp.expand_dims, axis=0), metrics)\n\t        metrics_flat = jax.tree_map(unbatch, metrics)\n\t      return preconditioners_flat, metrics_flat\n\t    scheduled_preconditioning_compute_steps = (\n", "        decay_preconditioning_compute_steps\n\t        and end_preconditioning_compute_steps\n\t        and callable(learning_rate)\n\t    )\n\t    preconditioning_compute_steps_t = preconditioning_compute_steps\n\t    if scheduled_preconditioning_compute_steps:\n\t      preconditioning_compute_steps_t = preconditioning_compute_steps_schedule(\n\t          learning_rate,\n\t          preconditioning_compute_steps,\n\t          end_preconditioning_compute_steps,\n", "          step,\n\t      )\n\t    perform_step = step % preconditioning_compute_steps_t == 0\n\t    def _update_preconditioners():\n\t      # Passing statistics instead of preconditioners as they are similarly\n\t      # shaped tensors. Note statistics will be ignored as we are passing in\n\t      # a large error value.\n\t      preconditioners_init = [\n\t          s[:, :precond_dim(s.shape[0])] for s in packed_statistics\n\t      ]\n", "      n = len(packed_statistics)\n\t      metrics_init = jax.tree_map(\n\t          lambda x: [x] * n,\n\t          default_training_metrics(\n\t              generate_fd_metrics\n\t          ).replace(inverse_pth_root_errors=inverse_failure_threshold))\n\t      init_state = [preconditioners_init, metrics_init]\n\t      return efficient_cond(perform_step, _internal_inverse_pth_root_all,\n\t                            init_state)\n\t    (preconditioners_flat, metrics_flat, _, _) = _update_preconditioners_fn(\n", "        _internal_inverse_pth_root_all,\n\t        _update_preconditioners,\n\t        preconditioning_compute_steps_t,\n\t        scheduled_preconditioning_compute_steps,\n\t        quantized=False,\n\t    )\n\t    def _skip(error):\n\t      condition = jnp.logical_or(\n\t          jnp.isnan(error), error >= inverse_failure_threshold)\n\t      return condition.astype(error.dtype)\n", "    def _select_preconditioner(error, new_p, old_p):\n\t      return lax.cond(\n\t          _skip(error), lambda _: old_p, lambda _: new_p, operand=None)\n\t    new_preconditioners_flat = []\n\t    new_errors_flat = metrics_flat.inverse_pth_root_errors\n\t    for p, shape, prev_p, error in zip(preconditioners_flat, original_shapes,\n\t                                       prev_preconditioners, new_errors_flat):\n\t      new_preconditioners_flat.append(\n\t          _select_preconditioner(error, p[:shape[0], :shape[1]], prev_p))\n\t    assert len(states) == len(num_statistics_per_state)\n", "    assert len(new_preconditioners_flat) == num_statistics\n\t    assert len(new_errors_flat) == len(packed_statistics), (\n\t        len(new_errors_flat), len(packed_statistics))\n\t    assert len(new_errors_flat) == num_statistics + to_pad, (\n\t        len(new_errors_flat), num_statistics, to_pad)\n\t    # Add back empty preconditioners so we that we can set the optimizer state.\n\t    preconditioners_for_states = []\n\t    idx = 0\n\t    metrics_for_states = []\n\t    for num_statistics, state in zip(num_statistics_per_state, states):\n", "      if num_statistics == 0:\n\t        preconditioners_for_states.append([])\n\t        metrics_for_states.append(\n\t            init_training_metrics(0, generate_training_metrics))\n\t      else:\n\t        preconditioners_for_state = new_preconditioners_flat[idx:idx +\n\t                                                             num_statistics]\n\t        assert len(state.statistics) == len(preconditioners_for_state)\n\t        preconditioners_for_states.append(preconditioners_for_state)\n\t        if generate_training_metrics:\n", "          # pylint:disable=cell-var-from-loop Used immediately.\n\t          metrics_for_state = jax.tree_map(\n\t              lambda x: jnp.stack(x[idx:idx + num_statistics]),\n\t              metrics_flat,\n\t              is_leaf=lambda x: isinstance(x, list))\n\t          assert jax.tree_util.tree_all(\n\t              jax.tree_map(lambda x: len(state.statistics) == len(x),\n\t                           metrics_for_state))\n\t          # If we skipped preconditioner computation, record old metrics.\n\t          metrics_for_state = efficient_cond(perform_step,\n", "                                             lambda: [metrics_for_state],\n\t                                             [state.training_metrics])[0]\n\t          # pylint:enable=cell-var-from-loop\n\t        else:\n\t          metrics_for_state = optax.MaskedNode()\n\t        metrics_for_states.append(metrics_for_state)\n\t        idx += num_statistics\n\t    new_states = []\n\t    for state, new_preconditioners, new_metrics in zip(\n\t        states, preconditioners_for_states, metrics_for_states):\n", "      # Note the preconditioner may have been skipped, but we still update the\n\t      # metrics with the new error values; whether the preconditioner that's\n\t      # actively being used is stale can be derived from the new_metrics\n\t      # being greater than the failure threshold.\n\t      new_states.append(\n\t          ParameterStats(\n\t              state.diagonal_statistics,\n\t              state.statistics,\n\t              new_preconditioners,\n\t              state.diagonal_momentum,\n", "              state.momentum,\n\t              state.avg_grad,\n\t              new_metrics))\n\t    return new_states\n\t  def _pmap_quantized_compute_preconditioners(states, step, statistics,\n\t                                              num_statistics_per_state,\n\t                                              original_shapes, exponents,\n\t                                              max_size, prev_preconditioners):\n\t    \"\"\"Computes preconditioners for given statistics in states in PMAP mode.\n\t    For quantization, each statistic is represented by three values:\n", "      quantized matrix, diagonal, and bucket sizes, we run inverse pth-roots\n\t      without ever recreating the original matrix in f32.\n\t    Args:\n\t      states: A list of optimizer states.\n\t      step: Current step number\n\t      statistics: A list of statistics for all variables (for every dim)\n\t      num_statistics_per_state: Number of statistis per state to reconstruct\n\t        output states.\n\t      original_shapes: A list of shapes of the statistics.\n\t      exponents: Exponent power to use for inverse-pth roots.\n", "      max_size: Maximum dim of the statistics to pad.\n\t      prev_preconditioners: Previously available preconditioner.\n\t    Returns:\n\t      New optimizer states after computing the preconditioner.\n\t    \"\"\"\n\t    num_devices = lax.psum(1, batch_axis_name)\n\t    num_statistics = len(statistics)\n\t    quantized_dtype = quantized_dtype_for_second_moment_statistics_buffers()\n\t    # Complexity here is around: shapes needing be statically shaped,\n\t    # our custom quantization type requires a different type of packing.\n", "    # Parallel tensors:\n\t    # quantized [dxd]\n\t    # diagonals [d] f32\n\t    # bucket_sizes [d] f32\n\t    packed_quantized_statistics = [\n\t        pad_square_matrix(stat.quantized, max_size) for stat in statistics\n\t    ]\n\t    packed_quantized_diagonals = [\n\t        pad_vector(stat.diagonal, max_size) for stat in statistics\n\t    ]\n", "    packed_quantized_bucket_sizes = [\n\t        pad_vector(stat.bucket_size, max_size) for stat in statistics\n\t    ]\n\t    to_pad = -num_statistics % num_devices\n\t    padded_eye = jnp.eye(max_size, dtype=jnp.float32)\n\t    quantized_eye = QuantizedValue.from_float_value(padded_eye, quantized_dtype,\n\t                                                    True)\n\t    packed_quantized_statistics.extend(\n\t        [quantized_eye.quantized for _ in range(to_pad)])\n\t    packed_quantized_diagonals.extend(\n", "        [quantized_eye.diagonal for _ in range(to_pad)])\n\t    packed_quantized_bucket_sizes.extend(\n\t        [quantized_eye.bucket_size for _ in range(to_pad)])\n\t    exponents.extend([1 for _ in range(to_pad)])\n\t    paddings = [len(stat.quantized) for stat in statistics] + [0] * to_pad\n\t    if not packed_quantized_statistics:\n\t      return states\n\t    if reuse_preconditioner:\n\t      total = len(packed_quantized_statistics)\n\t      packed_quantized_precond_mats = pad_and_maybe_zero_preconditioners(\n", "          [p.quantized for p in prev_preconditioners],\n\t          total,\n\t          max_size,\n\t          step,\n\t      )\n\t      packed_quantized_precond_diagonals = [\n\t          pad_vector(p.diagonal, max_size) for p in prev_preconditioners\n\t      ] + packed_quantized_diagonals[total - to_pad:]\n\t      packed_quantized_precond_bucket_sizes = [\n\t          pad_vector(p.bucket_size, max_size) for p in prev_preconditioners\n", "      ] + packed_quantized_bucket_sizes[total - to_pad:]\n\t    else:\n\t      (packed_quantized_precond_mats, packed_quantized_precond_diagonals,\n\t       packed_quantized_precond_bucket_sizes) = (None, None, None)\n\t    all_quantized_statistics = batch(packed_quantized_statistics, num_devices)\n\t    all_quantized_diagonals = batch(packed_quantized_diagonals, num_devices)\n\t    all_quantized_bucket_sizes = batch(packed_quantized_bucket_sizes,\n\t                                       num_devices)\n\t    all_exponents = batch(exponents, num_devices)\n\t    all_paddings = batch(paddings, num_devices)\n", "    all_quantized_precond_mats = _maybe(batch)(packed_quantized_precond_mats,\n\t                                               num_devices)\n\t    all_quantized_precond_diagonals = _maybe(batch)(\n\t        packed_quantized_precond_diagonals, num_devices)\n\t    all_quantized_precond_bucket_sizes = _maybe(batch)(\n\t        packed_quantized_precond_bucket_sizes, num_devices)\n\t    def _internal_inverse_pth_root_all():\n\t      current_replica = lax.axis_index(batch_axis_name)\n\t      (quantized_preconditioners, quantized_diagonals, quantized_bucket_sizes,\n\t       metrics) = _quantized_matrix_inverse_pth_root_vmap(\n", "           all_quantized_statistics[current_replica],\n\t           all_quantized_diagonals[current_replica],\n\t           all_quantized_bucket_sizes[current_replica],\n\t           all_exponents[current_replica],\n\t           all_paddings[current_replica],\n\t           _maybe_ix(all_quantized_precond_mats, current_replica),\n\t           _maybe_ix(all_quantized_precond_diagonals, current_replica),\n\t           _maybe_ix(all_quantized_precond_bucket_sizes, current_replica),\n\t       )\n\t      quantized_preconditioners = jax.lax.all_gather(quantized_preconditioners,\n", "                                                     batch_axis_name)\n\t      quantized_diagonals = jax.lax.all_gather(quantized_diagonals,\n\t                                               batch_axis_name)\n\t      quantized_bucket_sizes = jax.lax.all_gather(quantized_bucket_sizes,\n\t                                                  batch_axis_name)\n\t      metrics = jax.lax.all_gather(metrics, batch_axis_name)\n\t      quantized_preconditioners_flat = unbatch(quantized_preconditioners)\n\t      quantized_diagonals_flat = unbatch(quantized_diagonals)\n\t      quantized_bucket_sizes_flat = unbatch(quantized_bucket_sizes)\n\t      metrics_flat = jax.tree_map(unbatch, metrics)\n", "      return (quantized_preconditioners_flat, quantized_diagonals_flat,\n\t              quantized_bucket_sizes_flat, metrics_flat)\n\t    scheduled_preconditioning_compute_steps = (\n\t        decay_preconditioning_compute_steps\n\t        and end_preconditioning_compute_steps\n\t        and callable(learning_rate)\n\t    )\n\t    preconditioning_compute_steps_t = preconditioning_compute_steps\n\t    if scheduled_preconditioning_compute_steps:\n\t      preconditioning_compute_steps_t = preconditioning_compute_steps_schedule(\n", "          learning_rate,\n\t          preconditioning_compute_steps,\n\t          end_preconditioning_compute_steps,\n\t          step,\n\t      )\n\t    perform_step = step % preconditioning_compute_steps_t == 0\n\t    def _update_quantized_preconditioners():\n\t      # Passing statistics instead of preconditioners as they are similarly\n\t      # shaped tensors. Note statistics will be ignored as we are passing in\n\t      # a large error value.\n", "      pd = precond_dim(max_size)\n\t      quantized_preconditioners_init = [\n\t          s[:, :pd] for s in packed_quantized_statistics\n\t      ]\n\t      quantized_diagonals_init = packed_quantized_diagonals\n\t      quantized_bucket_sizes_init = packed_quantized_bucket_sizes\n\t      n = len(quantized_preconditioners_init)\n\t      metrics_init = jax.tree_map(\n\t          lambda x: [x] * n,\n\t          default_training_metrics(\n", "              generate_fd_metrics\n\t          ).replace(inverse_pth_root_errors=inverse_failure_threshold))\n\t      init_state = [\n\t          quantized_preconditioners_init, quantized_diagonals_init,\n\t          quantized_bucket_sizes_init, metrics_init\n\t      ]\n\t      return efficient_cond(perform_step, _internal_inverse_pth_root_all,\n\t                            init_state)\n\t    (\n\t        quantized_preconditioners_flat,\n", "        quantized_diagonals_flat,\n\t        quantized_bucket_sizes_flat,\n\t        metrics_flat,\n\t    ) = _update_preconditioners_fn(\n\t        _internal_inverse_pth_root_all,\n\t        _update_quantized_preconditioners,\n\t        preconditioning_compute_steps_t,\n\t        scheduled_preconditioning_compute_steps,\n\t        quantized=True\n\t    )\n", "    def _skip(error):\n\t      condition = jnp.logical_or(\n\t          jnp.isnan(error), error >= inverse_failure_threshold)\n\t      return condition.astype(error.dtype)\n\t    def _select_preconditioner(error, new_p, old_p):\n\t      return lax.cond(\n\t          _skip(error), lambda _: old_p, lambda _: new_p, operand=None)\n\t    new_quantized_preconditioners_flat = []\n\t    new_quantized_diagonals_flat = []\n\t    new_quantized_bucket_sizes_flat = []\n", "    new_errors_flat = metrics_flat.inverse_pth_root_errors\n\t    for p, d, b, shape, prev_p, error in zip(quantized_preconditioners_flat,\n\t                                             quantized_diagonals_flat,\n\t                                             quantized_bucket_sizes_flat,\n\t                                             original_shapes,\n\t                                             prev_preconditioners,\n\t                                             new_errors_flat):\n\t      new_quantized_preconditioners_flat.append(\n\t          _select_preconditioner(error, p[:shape[0], :shape[1]],\n\t                                 prev_p.quantized))\n", "      new_quantized_diagonals_flat.append(\n\t          _select_preconditioner(error, d[:shape[0]], prev_p.diagonal))\n\t      new_quantized_bucket_sizes_flat.append(\n\t          _select_preconditioner(error, b[:shape[0]], prev_p.bucket_size))\n\t    assert len(states) == len(num_statistics_per_state)\n\t    assert len(new_quantized_preconditioners_flat) == num_statistics\n\t    assert len(new_quantized_diagonals_flat) == num_statistics\n\t    assert len(new_quantized_bucket_sizes_flat) == num_statistics\n\t    # Add back empty preconditioners so we that we can set the optimizer state.\n\t    preconditioners_for_states = []\n", "    metrics_for_states = []\n\t    idx = 0\n\t    for num_statistics, state in zip(num_statistics_per_state, states):\n\t      if num_statistics == 0:\n\t        preconditioners_for_states.append([])\n\t        metrics_for_states.append(\n\t            init_training_metrics(0, generate_training_metrics))\n\t      else:\n\t        quantized_preconditioners_for_state = new_quantized_preconditioners_flat[\n\t            idx:idx + num_statistics]\n", "        quantized_diagonals_for_state = new_quantized_diagonals_flat[\n\t            idx:idx + num_statistics]\n\t        quantized_bucket_sizes_for_state = new_quantized_bucket_sizes_flat[\n\t            idx:idx + num_statistics]\n\t        if generate_training_metrics:\n\t          # pylint:disable=cell-var-from-loop Used immediately.\n\t          metrics_for_state = jax.tree_map(\n\t              lambda x: jnp.stack(x[idx:idx + num_statistics]),\n\t              metrics_flat,\n\t              is_leaf=lambda x: isinstance(x, list))\n", "          assert len(\n\t              state.statistics) == len(quantized_preconditioners_for_state)\n\t          assert len(state.statistics) == len(quantized_diagonals_for_state)\n\t          assert len(state.statistics) == len(quantized_bucket_sizes_for_state)\n\t          assert jax.tree_util.tree_all(\n\t              jax.tree_map(lambda x: len(state.statistics) == len(x),\n\t                           metrics_for_state))\n\t          # If we skipped preconditioner computation, record old metrics.\n\t          metrics_for_state = efficient_cond(perform_step,\n\t                                             lambda: [metrics_for_state],\n", "                                             [state.training_metrics])[0]\n\t          # pylint:enable=cell-var-from-loop\n\t        else:\n\t          metrics_for_state = optax.MaskedNode()\n\t        quantized_preconditioners = []\n\t        for qv, qd, qb in zip(quantized_preconditioners_for_state,\n\t                              quantized_diagonals_for_state,\n\t                              quantized_bucket_sizes_for_state):\n\t          quantized_preconditioners.append(\n\t              QuantizedValue(qv, qd, qb, qv.dtype, True, list(qv.shape)))\n", "        preconditioners_for_states.append(quantized_preconditioners)\n\t        metrics_for_states.append(metrics_for_state)\n\t        idx += num_statistics\n\t    new_states = []\n\t    for state, new_preconditioners, new_metrics in zip(\n\t        states, preconditioners_for_states, metrics_for_states):\n\t      # Note the preconditioner may have been skipped, but we still update the\n\t      # metrics with the new error values; whether the preconditioner that's\n\t      # actively being used is stale can be derived from the new_metrics\n\t      # being greater than the failure threshold.\n", "      new_states.append(\n\t          ParameterStats(\n\t              state.diagonal_statistics,\n\t              state.statistics,\n\t              new_preconditioners,\n\t              state.diagonal_momentum,\n\t              state.momentum,\n\t              state.avg_grad,\n\t              new_metrics))\n\t    return new_states\n", "  def _pjit_compute_preconditioners(states, step, statistics,\n\t                                    num_statistics_per_state, original_shapes,\n\t                                    exponents, max_size, prev_preconditioners):\n\t    \"\"\"Computes preconditioners for given statistics in states in PJIT mode.\n\t    Args:\n\t      states: A list of optimizer states.\n\t      step: Current step number\n\t      statistics: A list of statistics for all variables (for every dim)\n\t      num_statistics_per_state: Number of statistis per state to reconstruct\n\t        output states.\n", "      original_shapes: A list of shapes of the statistics.\n\t      exponents: Exponent power to use for inverse-pth roots.\n\t      max_size: Maximum dim of the statistics to pad.\n\t      prev_preconditioners: Previously available preconditioner.\n\t    Returns:\n\t      New optimizer states after computing the preconditioner.\n\t    \"\"\"\n\t    num_statistics = len(statistics)\n\t    to_pad = -num_statistics % num_devices_for_pjit\n\t    padded_statistics = [\n", "        pad_square_matrix(stat, max_size) for stat in statistics\n\t    ]\n\t    padded_statistics.extend([\n\t        jnp.eye(max_size, dtype=padded_statistics[0].dtype)\n\t        for _ in range(to_pad)\n\t    ])\n\t    exponents.extend([1 for _ in range(to_pad)])\n\t    paddings = [len(stat) for stat in statistics] + [0] * to_pad\n\t    if reuse_preconditioner:\n\t      padded_preconditioners = pad_and_maybe_zero_preconditioners(\n", "          prev_preconditioners, len(padded_statistics), max_size, step)\n\t    else:\n\t      padded_preconditioners = None\n\t    all_statistics = jnp.stack(padded_statistics)\n\t    all_exponents = jnp.stack(exponents)\n\t    all_paddings = jnp.stack(paddings)\n\t    all_preconditioners = _maybe(jnp.stack)(padded_preconditioners)\n\t    def _internal_inverse_pth_root_all():\n\t      preconditioners, metrics = _matrix_inverse_pth_root_pjit(\n\t          all_statistics, all_exponents, all_paddings, all_preconditioners)\n", "      b1 = preconditioners.shape[0]\n\t      def split(batched_values):\n\t        return [\n\t            jnp.squeeze(v)\n\t            for v in jnp.split(batched_values, indices_or_sections=b1, axis=0)\n\t        ]\n\t      return split(preconditioners), jax.tree_map(split, metrics)\n\t    scheduled_preconditioning_compute_steps = (\n\t        decay_preconditioning_compute_steps\n\t        and end_preconditioning_compute_steps\n", "        and callable(learning_rate)\n\t    )\n\t    preconditioning_compute_steps_t = preconditioning_compute_steps\n\t    if decay_preconditioning_compute_steps and callable(learning_rate):\n\t      preconditioning_compute_steps_t = preconditioning_compute_steps_schedule(\n\t          learning_rate,\n\t          preconditioning_compute_steps,\n\t          end_preconditioning_compute_steps,\n\t          step,\n\t      )\n", "    def _update_preconditioners():\n\t      # Passing statistics instead of preconditioners as they are similarly\n\t      # shaped tensors. Note statistics will be ignored as we are passing in\n\t      # a large init value for error.\n\t      pd = precond_dim(max_size)\n\t      preconditioners_init = [s[:, :pd] for s in padded_statistics]\n\t      n = len(padded_statistics)\n\t      metrics_init = jax.tree_map(\n\t          lambda x: [x] * n,\n\t          TrainingMetrics(inverse_pth_root_errors=inverse_failure_threshold))\n", "      init_state = [preconditioners_init, metrics_init]\n\t      perform_step = step % preconditioning_compute_steps_t == 0\n\t      return efficient_cond(\n\t          perform_step, _internal_inverse_pth_root_all, init_state\n\t      )\n\t    (preconditioners_flat, metrics_flat, _, _) = _update_preconditioners_fn(\n\t        _internal_inverse_pth_root_all,\n\t        _update_preconditioners,\n\t        preconditioning_compute_steps_t,\n\t        scheduled_preconditioning_compute_steps,\n", "        quantized=False,\n\t    )\n\t    def _skip(error):\n\t      condition = jnp.logical_or(\n\t          jnp.isnan(error), error >= inverse_failure_threshold)\n\t      return condition.astype(error.dtype)\n\t    def _select_preconditioner(error, new_p, old_p):\n\t      return lax.cond(\n\t          _skip(error), lambda _: old_p, lambda _: new_p, operand=None)\n\t    new_preconditioners_flat = []\n", "    new_errors_flat = metrics_flat.inverse_pth_root_errors\n\t    for p, shape, prev_p, error in zip(preconditioners_flat, original_shapes,\n\t                                       prev_preconditioners, new_errors_flat):\n\t      new_preconditioners_flat.append(\n\t          _select_preconditioner(error.inverse_pth_root_errors,\n\t                                 p[:shape[0], :shape[1]], prev_p))\n\t    assert len(states) == len(num_statistics_per_state)\n\t    assert len(new_preconditioners_flat) == num_statistics\n\t    # Add back empty preconditioners so we that we can set the optimizer state.\n\t    preconditioners_for_states = []\n", "    metrics_for_states = []\n\t    idx = 0\n\t    for num_statistics, state in zip(num_statistics_per_state, states):\n\t      if num_statistics == 0:\n\t        preconditioners_for_states.append([])\n\t        metrics_for_states.append(\n\t            init_training_metrics(0, generate_training_metrics))\n\t      else:\n\t        preconditioners_for_state = new_preconditioners_flat[idx:idx +\n\t                                                             num_statistics]\n", "        assert len(state.statistics) == len(preconditioners_for_state)\n\t        preconditioners_for_states.append(preconditioners_for_state)\n\t        if generate_training_metrics:\n\t          # pylint:disable=cell-var-from-loop Used immediately.\n\t          metrics_for_state = jax.tree_map(\n\t              lambda x: jnp.stack(x[idx:idx + num_statistics]),\n\t              metrics_flat,\n\t              is_leaf=functools.partial(isinstance, list))\n\t          assert jax.tree_util.tree_all(\n\t              jax.tree_map(lambda x: len(state.statistics) == len(x),\n", "                           metrics_for_state))\n\t          # pylint:enable=cell-var-from-loop\n\t        else:\n\t          metrics_for_state = optax.MaskedNode()\n\t        metrics_for_states.append(metrics_for_state)\n\t        idx += num_statistics\n\t    new_states = []\n\t    for state, new_preconditioners, new_metrics in zip(\n\t        states, preconditioners_for_states, metrics_for_states):\n\t      new_states.append(\n", "          ParameterStats(\n\t              state.diagonal_statistics,\n\t              state.statistics,\n\t              new_preconditioners,\n\t              state.diagonal_momentum,\n\t              state.momentum,\n\t              state.avg_grad,\n\t              new_metrics))\n\t    return new_states\n\t  def _compute_preconditioners(states, params, step):\n", "    \"\"\"Computes preconditioners for given statistics in states.\n\t    Args:\n\t      states: A list of optimizer states.\n\t      params: A list of params.\n\t      step: Current step number\n\t    Returns:\n\t      New optimizer states after computing the preconditioner.\n\t    \"\"\"\n\t    statistics = []\n\t    num_statistics_per_state = []\n", "    original_shapes = []\n\t    exponents = []\n\t    max_size = 0\n\t    prev_preconditioners = []\n\t    for state, param in zip(states, params):\n\t      num_statistics = len(state.statistics)\n\t      num_statistics_per_state.append(num_statistics)\n\t      original_shapes_for_state = []\n\t      if num_statistics > 0:\n\t        preconditioner = preconditioner_from_params(param)\n", "        for statistic in state.statistics:\n\t          exponents.append(preconditioner.exponent_for_preconditioner(\n\t          ) if exponent_override == 0 else exponent_override)\n\t          original_shapes_for_state.append(statistic.shape)\n\t          max_size = max(max_size, statistic.shape[0])\n\t        statistics.extend(state.statistics)\n\t        prev_preconditioners.extend(state.preconditioners)\n\t        original_shapes.extend(original_shapes_for_state)\n\t    if not shard_optimizer_states:\n\t      # Quantization is only enabled if batch_axis_name is not set.\n", "      quantized_dtype = quantized_dtype_for_second_moment_statistics_buffers()\n\t      if quantized_dtype == jnp.float32:\n\t        return _pmap_compute_preconditioners(states, step, statistics,\n\t                                             num_statistics_per_state,\n\t                                             original_shapes, exponents,\n\t                                             max_size, prev_preconditioners)\n\t      else:\n\t        return _pmap_quantized_compute_preconditioners(\n\t            states, step, statistics, num_statistics_per_state, original_shapes,\n\t            exponents, max_size, prev_preconditioners)\n", "    else:\n\t      return _pjit_compute_preconditioners(states, step, statistics,\n\t                                           num_statistics_per_state,\n\t                                           original_shapes, exponents, max_size,\n\t                                           prev_preconditioners)\n\t  def _transform_grad(grad, state, param, step):\n\t    \"\"\"Transform per-parameter gradients.\"\"\"\n\t    preconditioner = preconditioner_from_params(param)\n\t    sgd_update = grad\n\t    new_diagonal_statistics = state.diagonal_statistics.to_float()\n", "    if (graft_type == GraftingType.ADAGRAD or\n\t        graft_type == GraftingType.ADAGRAD_NORMALIZED):\n\t      scaled_grad = grad\n\t      if graft_type == GraftingType.ADAGRAD_NORMALIZED:\n\t        scaled_grad = grad / (jnp.linalg.norm(grad) + _EPSILON)\n\t      new_diagonal_statistics = (\n\t          state.diagonal_statistics.to_float() + jnp.square(scaled_grad))\n\t      adagrad_update = scaled_grad / (\n\t          jnp.sqrt(new_diagonal_statistics) + diagonal_epsilon)\n\t      grafting_update = adagrad_update\n", "    elif (graft_type == GraftingType.RMSPROP or\n\t          graft_type == GraftingType.RMSPROP_NORMALIZED):\n\t      scaled_grad = grad\n\t      if graft_type == GraftingType.RMSPROP_NORMALIZED:\n\t        scaled_grad = grad / (jnp.linalg.norm(grad) + _EPSILON)\n\t      w1 = beta2\n\t      w2 = jnp.where(beta2 == 1.0, beta2, 1.0 - beta2)\n\t      new_diagonal_statistics = (\n\t          w1 * state.diagonal_statistics.to_float() +\n\t          w2 * jnp.square(scaled_grad))\n", "      rmsprop_update = scaled_grad / (\n\t          jnp.sqrt(new_diagonal_statistics) + diagonal_epsilon)\n\t      if clip_by_scaled_gradient_norm:\n\t        scaled_grad_norm = jnp.linalg.norm(rmsprop_update) / (\n\t            jnp.sqrt(float(rmsprop_update.size)))\n\t        clipping_denom = jnp.maximum(\n\t            1., scaled_grad_norm / clip_by_scaled_gradient_norm)\n\t        rmsprop_update /= clipping_denom\n\t      grafting_update = rmsprop_update\n\t    elif graft_type == GraftingType.SGD:\n", "      grafting_update = sgd_update\n\t    elif graft_type == GraftingType.NONE:\n\t      grafting_update = sgd_update  # Use SGD during warmup.\n\t    else:\n\t      grafting_update = jnp.ones_like(sgd_update) * jnp.sign(sgd_update)\n\t    lr = learning_rate\n\t    if callable(learning_rate):\n\t      lr = learning_rate(step)\n\t    preconditioner_multiplier = lr if not decoupled_learning_rate else 1.0\n\t    grafting_update = grafting_update * preconditioner_multiplier\n", "    precond_grad = grad\n\t    if not _skip_preconditioning(param):\n\t      precond_grad = preconditioner.preconditioned_grad(\n\t          precond_grad,\n\t          _maybe_dequantize_preconditioners(state.preconditioners))\n\t    else:\n\t      if graft_type == GraftingType.NONE:\n\t        logging.error(\"skipping preconditioning without grafting for param %s\",\n\t                      param)\n\t      precond_grad = grafting_update\n", "    grafting_update_norm = jnp.linalg.norm(grafting_update)\n\t    precond_grad_norm = jnp.linalg.norm(precond_grad)\n\t    if graft_type is not GraftingType.NONE:\n\t      multiplier = (grafting_update_norm / (precond_grad_norm + _EPSILON))\n\t    else:\n\t      multiplier = 1.0\n\t    shampoo_update = precond_grad * multiplier\n\t    shampoo_update_with_wd = shampoo_update\n\t    grafting_update_with_wd = grafting_update\n\t    if weight_decay != 0 and not decoupled_weight_decay:\n", "      shampoo_update_with_wd = shampoo_update + weight_decay * param\n\t      grafting_update_with_wd = grafting_update + weight_decay * param\n\t    w = (1.0 - beta1) if moving_average_for_momentum else 1.0\n\t    shampoo_update_with_wd_momentum = (\n\t        state.momentum.to_float() * beta1 + w * shampoo_update_with_wd)\n\t    grafting_update_with_wd_momentum = (\n\t        state.diagonal_momentum.to_float() * beta1 +\n\t        w * grafting_update_with_wd)\n\t    run_shampoo = (step >= start_preconditioning_step).astype(\n\t        grafting_update_with_wd_momentum.dtype)\n", "    momentum_update = (\n\t        run_shampoo * shampoo_update_with_wd_momentum +\n\t        (1.0 - run_shampoo) * grafting_update_with_wd_momentum)\n\t    wd_update = (\n\t        run_shampoo * shampoo_update_with_wd +\n\t        (1.0 - run_shampoo) * grafting_update_with_wd)\n\t    nesterov_momentum_update = momentum_update\n\t    if nesterov:\n\t      nesterov_momentum_update = w * wd_update + beta1 * momentum_update\n\t    if weight_decay != 0 and decoupled_weight_decay:\n", "      wd_lr = 1.0 if decoupled_learning_rate else lr\n\t      nesterov_momentum_update = (\n\t          nesterov_momentum_update + wd_lr * weight_decay * param\n\t      )\n\t    momentum_multiplier = lr if decoupled_learning_rate else 1.0\n\t    transformed_update = -1.0 * momentum_multiplier * nesterov_momentum_update\n\t    new_diagonal_momentum = grafting_update_with_wd_momentum\n\t    new_momentum = shampoo_update_with_wd_momentum\n\t    param_stats = ParameterStats(\n\t        _quantize_diagonal_statistics(new_diagonal_statistics),\n", "        state.statistics,\n\t        state.preconditioners,\n\t        _quantize_momentum(new_diagonal_momentum),\n\t        _quantize_momentum(new_momentum),\n\t        state.avg_grad,\n\t        state.training_metrics)\n\t    return transformed_update, param_stats\n\t  def update_fn(grads, state, params):\n\t    \"\"\"Transform the input gradient and update all statistics.\n\t    Args:\n", "      grads: the gradient tensors for the parameters and any custom gradients\n\t        for preconditioners.\n\t      state: a named tuple containing the state of the optimizer\n\t      params: the parameters that should be updated.\n\t    Returns:\n\t      A tuple containing the new parameters and the new optimizer state.\n\t    \"\"\"\n\t    params_flat, treedef = jax.tree_flatten(params)\n\t    stats_flat = treedef.flatten_up_to(state.stats)\n\t    grads_flat = treedef.flatten_up_to(grads)\n", "    stats_grads = grads_flat\n\t    new_stats_flat = jax.tree_map(\n\t        lambda g, s, p: _compute_stats(g, s, p, state.count), stats_grads,\n\t        stats_flat, params_flat)\n\t    new_stats_flat = _compute_preconditioners(new_stats_flat, params_flat,\n\t                                              state.count)\n\t    outputs = jax.tree_map(\n\t        lambda g, s, p: _transform_grad(g, s, p, state.count), grads_flat,\n\t        new_stats_flat, params_flat)\n\t    updates_flat, new_stats_flat = list(zip(*outputs)) if outputs else ((), ())\n", "    updates = jax.tree_unflatten(treedef, updates_flat)\n\t    new_stats = jax.tree_unflatten(treedef, new_stats_flat)\n\t    new_state = ShampooState(count=state.count + 1, stats=new_stats)\n\t    return updates, new_state\n\t  if shard_optimizer_states:\n\t    # Hijacks the init_fn signature so we can return an OptState with\n\t    # appropriate init_fns.\n\t    opt_init_fn = sharded_init_fn\n\t    def _init_fns(unused_params):\n\t      return InitFnState(\n", "          init_fn=opt_init_fn,\n\t          pspec_fn=sharded_init_partition_spec_fn,\n\t          shape_and_dtype_fn=sharded_init_shape_and_dtype_fn)\n\t    opt_update_fn = sharded_update_fn\n\t    return optax.GradientTransformation(_init_fns, opt_update_fn)\n\t  else:\n\t    return optax.GradientTransformation(init_fn, update_fn)\n"]}
{"filename": "precondition/oco/algorithms.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"A collection of functionally-expressed OCO algorithms.\"\"\"\n\timport dataclasses\n\timport enum\n\tfrom typing import Callable, Union\n\timport jax\n\timport jax.numpy as jnp\n\timport numpy as np\n", "class Algorithm(enum.Enum):\n\t  OGD = enum.auto()\n\t  ADA = enum.auto()\n\t  RFD_SON = enum.auto()\n\t  FD_SON = enum.auto()\n\t  ADA_FD = enum.auto()\n\t  S_ADA = enum.auto()\n\tRuntimeScalar = Union[float, jax.Array]\n\t@dataclasses.dataclass\n\tclass HParams:\n", "  \"\"\"A union of all hyperparmeters across algorithms in this file.\"\"\"\n\t  # Initial diagonal regularization delta * I.\n\t  delta: RuntimeScalar\n\t  # Learning rate.\n\t  lr: RuntimeScalar\n\t  # Sketch size. (0 for non-sketched).\n\t  sketch_size: int\n\t  # Sketch 'style' disambiguates which of the sketched second-order methods\n\t  # we should apply.\n\t  algorithm: Algorithm\n", "State = dict[str, jax.Array]\n\tNpState = dict[str, np.ndarray]\n\tdef as_np(state: State) -> NpState:\n\t  return {k: np.asarray(v, dtype=v.dtype) for k, v in state.items()}\n\tInitFn = Callable[[], State]\n\tUpdateFn = Callable[[State, jax.Array, jax.Array], State]\n\tdef generate_init_update(\n\t    w_shape: tuple[int], hparams: HParams\n\t) -> tuple[InitFn, UpdateFn]:\n\t  \"\"\"Bind parameters to appropriate init/update functions for OCO.\"\"\"\n", "  if hparams.algorithm == Algorithm.OGD:\n\t    assert hparams.sketch_size == 0, hparams.sketch_size\n\t    init, update = _ogd_init_fn, _ogd_update_fn\n\t  elif hparams.algorithm == Algorithm.ADA:\n\t    assert hparams.sketch_size == 0, hparams.sketch_size\n\t    init, update = _diag_adagrad_init_fn, _diag_adagrad_update_fn\n\t  else:\n\t    assert hparams.sketch_size > 1, hparams.sketch_size\n\t    init, update = _fd_init_fn, _fd_update_fn\n\t  bound_init_fn = lambda: init(w_shape, hparams)\n", "  bound_update_fn = lambda state, loss, grad: update(state, loss, grad, hparams)\n\t  return bound_init_fn, bound_update_fn\n\tdef _ogd_init_fn(w_shape: tuple[int], hparams: HParams) -> State:\n\t  \"\"\"Initialize OGD state.\"\"\"\n\t  del hparams\n\t  return {\n\t      'w': jnp.zeros(w_shape, dtype=jnp.float64),\n\t      't': jnp.array(0.0, jnp.float64),\n\t  }\n\tdef _ogd_update_fn(\n", "    state: State, loss: jax.Array, grad: jax.Array, hparams: HParams\n\t) -> State:\n\t  \"\"\"Update OGD state.\"\"\"\n\t  del loss\n\t  assert state['w'].shape == grad.shape, (state['w'].shape, grad.shape)\n\t  state['t'] += 1.0\n\t  state['w'] -= hparams.lr * grad * jax.lax.rsqrt(state['t'] + hparams.delta)\n\t  return state\n\tdef _diag_adagrad_init_fn(w_shape: tuple[int], hparams: HParams) -> State:\n\t  \"\"\"Initialize adagrad state.\"\"\"\n", "  return {\n\t      'w': jnp.zeros(w_shape, dtype=jnp.float64),\n\t      'diag_h': jnp.ones(w_shape, dtype=jnp.float64) * hparams.delta,\n\t  }\n\tdef _diag_adagrad_update_fn(\n\t    state: State, loss: jax.Array, grad: jax.Array, hparams: HParams\n\t) -> State:\n\t  \"\"\"Update adagrad state.\"\"\"\n\t  del loss\n\t  state['diag_h'] = state['diag_h'] + grad**2\n", "  rsqrt = jax.lax.rsqrt(jnp.where(state['diag_h'] == 0, 1, state['diag_h']))\n\t  state['w'] -= rsqrt * grad * hparams.lr\n\t  return state\n\tdef _fd_init_fn(w_shape: tuple[int], hparams: HParams) -> State:\n\t  \"\"\"Initialize sketch algorithm state.\"\"\"\n\t  state = {\n\t      'w': jnp.zeros(w_shape, dtype=jnp.float64),\n\t      't': jnp.array(0.0, dtype=jnp.float64),\n\t  }\n\t  grad_size = state['w'].size\n", "  sketch_size = hparams.sketch_size\n\t  assert grad_size >= sketch_size\n\t  assert sketch_size >= 2\n\t  state['alpha'] = jnp.array(hparams.delta, dtype=jnp.float64)\n\t  # Preconditioner eigenvectors.\n\t  state['P'] = jnp.zeros((sketch_size, grad_size), dtype=jnp.float64)\n\t  # Covariance root eigenvalues (i.e., from the sketch, NOT covariance eigs)\n\t  state['e'] = jnp.zeros((sketch_size,), dtype=jnp.float64)\n\t  return state\n\t# RFD0 for Online Newton Step, Algorithm 3 in Section 5.\n", "# https://arxiv.org/pdf/1705.05067.pdf\n\t# \\mu_t, the exp-convexity constant, is zero.\n\t# Unique parts: screen/ZxejS5fYRAB7tG8\n\t#   - updates sketch with sqrt(eta_t) ~ 1/sqrt(t), up to a constant, the LR.\n\t#   - increments alpha by rho/2\n\t#   - no LR in the update\n\t#   - RFD0 has no hparams besides LR\n\t#\n\t# The \"alpha0\" hparam for RFD (not RFD0) is exactly hparams['delta']. Note that\n\t# RFD and RFD0 can also be given a learning rate which scales eta_t; we choose\n", "# a parameterization consistent with other algorithms' uses of hparams['lr'].\n\tdef _rfd(state: State, hparams: HParams) -> ...:\n\t  \"\"\"Create RFD-specific algorithmic changes.\"\"\"\n\t  sketch_update_factor = jax.lax.rsqrt(state['t'] * hparams.lr)\n\t  alpha_update_factor = 0.5\n\t  lr = 1.0\n\t  eig_inversion = jnp.reciprocal\n\t  return sketch_update_factor, alpha_update_factor, lr, eig_inversion\n\t# FD-SON - Algorithm 1 and 3 in Sections 2 and 3.\n\t# https://arxiv.org/pdf/1602.02202.pdf\n", "# Per screen/BqHhFBN3qt4zrLa\n\t#  - update the scetch with sqrt(eta_t), like in RFD0\n\t#  - eta_t has itself 1/sqrt(t) decay, unlike RFD0\n\t#  - we use hparams['delta'] instead of alpha\n\t#  - we again consolidate all constants on eta_t into hparams['lr']\n\t#\n\t# Per screen/AB4SSFXvAh6PYe7, alpha does not update.\n\tdef _fdson(state: State, hparams: HParams) -> ...:\n\t  \"\"\"Create FD-SON-specific algorithmic changes.\"\"\"\n\t  sketch_update_factor = jax.lax.rsqrt(jnp.sqrt(state['t']) * hparams.lr)\n", "  alpha_update_factor = 0.0\n\t  lr = 1.0\n\t  eig_inversion = jnp.reciprocal\n\t  return sketch_update_factor, alpha_update_factor, lr, eig_inversion\n\t# Ada-FD - https://www.ijcai.org/proceedings/2018/0381.pdf\n\t# Per screen/BMwyfTHcwnbpexn\n\t#  - Similar to S-Adagrad, except no updating alpha (dynamic diagonal).\n\t#  - However, they add delta to the *square rooted* eigenvalues, unlike\n\t#    all the other works.\n\tdef _adafd(state: State, hparams: HParams) -> ...:\n", "  \"\"\"Create Ada-FD-specific algorithmic changes.\"\"\"\n\t  del state\n\t  sketch_update_factor = 1.0\n\t  alpha_update_factor = 0.0\n\t  lr = hparams.lr\n\t  eig_inversion = 'Ada-FD requires special handling'\n\t  return sketch_update_factor, alpha_update_factor, lr, eig_inversion\n\t# S-Adagrad - https://arxiv.org/pdf/2302.03764.pdf\n\tdef _sada(state: State, hparams: HParams) -> ...:\n\t  \"\"\"Create S-Adagrad-specific algorithmic changes.\"\"\"\n", "  del state\n\t  sketch_update_factor = 1.0\n\t  alpha_update_factor = 1.0\n\t  lr = hparams.lr\n\t  eig_inversion = jax.lax.rsqrt\n\t  return sketch_update_factor, alpha_update_factor, lr, eig_inversion\n\tdef _fd_method_factors(state: State, hparams: HParams) -> ...:\n\t  \"\"\"Create algorithmic variants specific to hparams.\"\"\"\n\t  return {\n\t      Algorithm.RFD_SON: _rfd(state, hparams),\n", "      Algorithm.FD_SON: _fdson(state, hparams),\n\t      Algorithm.ADA_FD: _adafd(state, hparams),\n\t      Algorithm.S_ADA: _sada(state, hparams),\n\t  }[hparams.algorithm]\n\tdef _fd_update_fn(\n\t    state: State, loss: jax.Array, grad: jax.Array, hparams: HParams\n\t) -> State:\n\t  \"\"\"Update FD algorithm state given loss and grad.\"\"\"\n\t  del loss\n\t  state['t'] += 1.0\n", "  sketch_update_factor, alpha_update_factor, lr, eig_inversion = (\n\t      _fd_method_factors(state, hparams)\n\t  )\n\t  grad_input = grad.ravel() * sketch_update_factor\n\t  B = state['P'] * state['e'].reshape(-1, 1)  # pylint: disable=invalid-name\n\t  B = B.at[-1].set(grad_input)  # pylint: disable=invalid-name\n\t  _, s, vt = jnp.linalg.svd(B, full_matrices=False)\n\t  rho = s[-1]\n\t  s = (s - rho) * (s + rho)\n\t  P = state['P'] = vt  # pylint: disable=invalid-name\n", "  state['e'] = jnp.sqrt(s)\n\t  state['alpha'] += alpha_update_factor * rho**2\n\t  mm = lambda x, y: jnp.dot(x, y, precision=jax.lax.Precision.HIGHEST)\n\t  g = grad.ravel()\n\t  alpha = state['alpha']\n\t  eps = 0.0\n\t  def safe_invert(x, inversion=eig_inversion):\n\t    return jnp.where(x <= eps, 0.0, inversion(x))\n\t  if eig_inversion == 'Ada-FD requires special handling':\n\t    e = state['e']\n", "    d = e / (alpha + e)\n\t    update = g - mm(P.T, d * mm(P, g))\n\t    update *= safe_invert(alpha, inversion=jnp.reciprocal)\n\t  else:\n\t    e = alpha + s\n\t    inv_s = safe_invert(e)\n\t    inv_alpha = safe_invert(alpha)\n\t    outside_sketch_g = g - mm(P.T, mm(P, g))\n\t    sketched_precond = mm(P.T, inv_s * mm(P, g))\n\t    update = sketched_precond + inv_alpha * outside_sketch_g\n", "  state['w'] -= lr * update.reshape(state['w'].shape)\n\t  return state\n"]}
{"filename": "precondition/oco/train.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Utilities for running an OCO algorithm on a dataset.\"\"\"\n\timport functools\n\tfrom typing import Callable, Optional\n\timport jax\n\timport jax.numpy as jnp\n\timport numpy as np\n\tfrom precondition.oco import algorithms\n", "from precondition.oco import datasets\n\tLossAndGrad = Callable[\n\t    [jax.Array, jax.Array, jax.Array], tuple[jax.Array, jax.Array]\n\t]\n\t@functools.partial(\n\t    jax.jit,\n\t    static_argnames=[\n\t        'loss_and_grad',\n\t        'update_fn',\n\t        # 'algorithm',\n", "        # 'sketch_size',\n\t        'extra_loss',\n\t    ],\n\t)\n\tdef _compiled_run_dataset(\n\t    x: jax.Array,\n\t    y: jax.Array,\n\t    state: algorithms.State,\n\t    obs_ixs: jax.Array,\n\t    # delta: algorithms.RuntimeScalar,\n", "    # lr: algorithms.RuntimeScalar,\n\t    loss_and_grad: LossAndGrad,\n\t    update_fn: algorithms.UpdateFn,\n\t    # algorithm: algorithms.Algorithm,\n\t    # sketch_size: int,\n\t    extra_loss: Optional[datasets.Loss],\n\t) -> algorithms.State:\n\t  \"\"\"Run an OCO algorithm, saving history at obs_ixs.\"\"\"\n\t  # hparams = algorithms.HParams(\n\t  #    delta,\n", "  #    lr,\n\t  #    sketch_size,\n\t  #    algorithm,\n\t  # )\n\t  # assume obs_ixs starts at 0 and ends at nrows-1\n\t  # assume state has various keys pre-initialized, see below.\n\t  def process_row(idx, state):  # fori_loop index, so pylint: disable=unused-argument\n\t    ix = state['n']\n\t    r = x[ix]\n\t    f, g = loss_and_grad(state['w'], r, y[ix])\n", "    if extra_loss is not None:\n\t      state['extra_loss'] += extra_loss(state['w'], r, y[ix])\n\t    state = update_fn(state, f, g)\n\t    state['loss'] += f\n\t    state['n'] += 1\n\t    return state\n\t  chunks = jnp.diff(obs_ixs, prepend=0)\n\t  def scan_reduce(state, chunksize):\n\t    state = jax.lax.fori_loop(0, chunksize, process_row, state)\n\t    return state, state\n", "  _, history = jax.lax.scan(scan_reduce, state, chunks)\n\t  return history\n\tdef run_dataset(\n\t    dataset_name: str,\n\t    num_obs: int,\n\t    hparams: algorithms.HParams,\n\t    extra_loss: Optional[datasets.Loss] = None,\n\t    dataset_cache: str = '/tmp/cache',\n\t) -> algorithms.State:\n\t  \"\"\"Run an OCO algorithm on a dataset, saving history at obs_ixs.\"\"\"\n", "  assert num_obs >= 2\n\t  dataset = datasets.load_dataset(dataset_name, dataset_cache)\n\t  init_fn, update_fn = algorithms.generate_init_update(dataset.w_shape, hparams)\n\t  obs_ixs = np.round(\n\t      np.linspace(0, dataset.x.shape[0], num=num_obs, endpoint=True)\n\t  ).astype(int)\n\t  initial_state = init_fn()\n\t  loss_and_grad = jax.value_and_grad(dataset.loss)\n\t  assert 'loss' not in initial_state, list(initial_state)\n\t  assert 'w' in initial_state, list(initial_state)\n", "  assert 'n' not in initial_state, list(initial_state)\n\t  initial_state['loss'] = jnp.array(0.0, dtype=jnp.float64)\n\t  initial_state['n'] = 0\n\t  if extra_loss is not None:\n\t    initial_state['extra_loss'] = jnp.array(0.0, dtype=jnp.float64)\n\t  # Unpack the compilable and static HParams separately.\n\t  return _compiled_run_dataset(\n\t      dataset.x,\n\t      dataset.y,\n\t      initial_state,\n", "      obs_ixs,\n\t      # hparams.delta,\n\t      # hparams.lr,\n\t      loss_and_grad,\n\t      update_fn,\n\t      # hparams.algorithm,\n\t      # hparams.sketch_size,\n\t      extra_loss,\n\t  )\n"]}
{"filename": "precondition/oco/sweep.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Python binary to run and evaluate OCO sweeps.\n\tThis can be used to either run the best hparams from a previous run on a test\n\tset of data, or to sweep hparams on a training set.\n\t\"\"\"\n\timport concurrent.futures as concurrent_futures\n\timport datetime\n\timport itertools\n", "import os\n\tfrom typing import Optional, Sequence, Union\n\tfrom absl import app\n\tfrom absl import flags\n\tfrom absl import logging\n\timport jax\n\timport matplotlib.pyplot as plt\n\timport numpy as np\n\timport pandas as pd\n\tfrom precondition.oco import algorithms\n", "from precondition.oco import datasets\n\tfrom precondition.oco import train\n\tjax.config.update('jax_enable_x64', True)\n\t_SKETCH_SIZE = flags.DEFINE_integer(\n\t    'sketch_size', 0, 'sketch size for approximate full-matrix algorithms'\n\t)\n\t_PARALLEL = flags.DEFINE_integer(\n\t    'parallel', 16, 'number of threads for launching jax programs'\n\t)\n\t_DATASET = flags.DEFINE_enum(\n", "    'dataset', 'a9a', datasets.SUPPORTED_DATASETS, 'dataset to run on'\n\t)\n\t_ALGS = flags.DEFINE_multi_enum_class(\n\t    'alg',\n\t    list(algorithms.Algorithm),\n\t    algorithms.Algorithm,\n\t    'which algorithms to evaluate',\n\t)\n\t_DELTA = flags.DEFINE_multi_float(\n\t    'delta',\n", "    [],\n\t    'initial diagonal regularization hparams. Must be unset if --use_best_from'\n\t    ' is set (and vice versa).',\n\t)\n\t_LR = flags.DEFINE_multi_float(\n\t    'lr',\n\t    [],\n\t    'lr hparams. Must be unset if --use_best_from is set (and vice versa).',\n\t)\n\t_USE_BEST_FROM = flags.DEFINE_multi_string(\n", "    'use_best_from',\n\t    None,\n\t    'initialize best hparams for each algorithm using results from these'\n\t    ' directories. If set, --delta and --lr must not be.',\n\t)\n\t_DIR = flags.DEFINE_string(\n\t    'save_dir',\n\t    None,\n\t    'save results to this directory suffix, by default, HH:MM:SS',\n\t)\n", "_SKETCHING_ALGS = [\n\t    algorithms.Algorithm.RFD_SON,\n\t    algorithms.Algorithm.FD_SON,\n\t    algorithms.Algorithm.ADA_FD,\n\t    algorithms.Algorithm.S_ADA,\n\t]\n\tdef _validate_flags() -> bool:\n\t  \"\"\"Raises if flags improperly set, returns whether sweeping.\"\"\"\n\t  if (\n\t      any(alg in _SKETCHING_ALGS for alg in _ALGS.value)\n", "      and _SKETCH_SIZE.value <= 1\n\t  ):\n\t    raise ValueError('sketch size must be at least 2')\n\t  hparams_set = _DELTA.value or _LR.value\n\t  if hparams_set and not (_DELTA.value and _LR.value):\n\t    raise ValueError('if one of --delta/--lr is set, the other must be')\n\t  if _USE_BEST_FROM.value and hparams_set:\n\t    raise ValueError(\n\t        '--delta/--lr may only be set if --use_best_from is not '\n\t        '(and vice versa)'\n", "    )\n\t  if not _USE_BEST_FROM.value and not hparams_set:\n\t    raise ValueError(\n\t        'at least one of --delta/--lr or --use_best_from must be set'\n\t    )\n\t  if not _DIR.value:\n\t    raise ValueError('require a directory to save outputs')\n\t  return bool(hparams_set)\n\tdef _make_directory():\n\t  \"\"\"Derive which directory to save in, ensure it doesn't exist, make it.\"\"\"\n", "  suffix = _DIR.value\n\t  now = datetime.datetime.now()\n\t  time = now.strftime('%H:%M:%S')\n\t  date = now.date()\n\t  directory = f'{suffix}/{date}/{time}'\n\t  os.makedirs(directory)\n\t  return directory\n\tdef main(argv: ...) -> None:\n\t  del argv\n\t  is_sweep = _validate_flags()\n", "  directory = _make_directory()\n\t  flagfile = os.path.join(directory, 'flagfile.txt')\n\t  with open(flagfile, 'w') as f:\n\t    f.write(flags.FLAGS.flags_into_string())\n\t  dataset_name = _DATASET.value\n\t  # Load dataset to print top-level info and for joblib to cache it in /tmp\n\t  dataset = datasets.load_dataset(dataset_name)\n\t  logging.info('loaded dataset %s with dims %s', dataset_name, dataset.x.shape)\n\t  sketch_size = _SKETCH_SIZE.value\n\t  hparams = []\n", "  if is_sweep:\n\t    for alg, lr, delta in itertools.product(\n\t        _ALGS.value, _LR.value, _DELTA.value\n\t    ):\n\t      hparam = algorithms.HParams(\n\t          delta,\n\t          lr,\n\t          sketch_size if alg in _SKETCHING_ALGS else 0,\n\t          alg,\n\t      )\n", "      hparams.append(hparam)\n\t  else:\n\t    dfs = []\n\t    for previous_directory in _USE_BEST_FROM.value:\n\t      dfs.append(_read_pandas(previous_directory, dataset_name, sketch_size))\n\t    df = pd.concat(dfs, axis=0)\n\t    df.sort_values('loss', inplace=True)\n\t    df.drop_duplicates('alg', inplace=True)\n\t    algs = df.alg.unique()\n\t    hparams = []\n", "    for alg in _ALGS.value:\n\t      if alg.name not in algs:\n\t        raise ValueError(f'missing {alg} in --use_best_from')\n\t      row = df.loc[df.alg == alg.name].T.squeeze()\n\t      hparam = algorithms.HParams(\n\t          row.delta,\n\t          row.lr,\n\t          sketch_size if alg in _SKETCHING_ALGS else 0,\n\t          alg,\n\t      )\n", "      hparams.append(hparam)\n\t  assert hparams\n\t  nobs = 100\n\t  logging.info('generated %s trials to run with %s obs', len(hparams), nobs)\n\t  logging.info('%s distinct algs: %s', len(_ALGS.value), _ALGS.value)\n\t  total = len(hparams)\n\t  args = [\n\t      {'idx': i, 'total': total, 'dataset': dataset_name, 'hparam': hparam,\n\t       'nobs': nobs,}\n\t      for i, hparam in enumerate(hparams)\n", "  ]\n\t  # python threading suffices b/c Jax itself is async\n\t  executor = concurrent_futures.ThreadPoolExecutor(_PARALLEL.value)\n\t  histories = list(executor.map(lambda kwargs: _run_oco(**kwargs), args))\n\t  for e in histories:\n\t    if isinstance(e, Exception):\n\t      raise e\n\t  logging.info('all %s hparam tunings complete', total)\n\t  result_df = _make_pandas(hparams, dataset_name, sketch_size, histories)\n\t  result_df.sort_values('loss', inplace=True)\n", "  _save_pandas(directory, result_df)\n\t  best_df = result_df.drop_duplicates('alg', inplace=False)\n\t  assert best_df is not None\n\t  best_txt = best_df.drop(columns='history').to_string(index=False)\n\t  logging.info('completed runs, results\\n%s', best_txt)\n\t  with open(os.path.join(directory, 'best.txt'), 'w') as f:\n\t    print(best_txt, file=f)\n\t  cs = itertools.cycle('rbcgk')\n\t  lss = itertools.cycle(['--', '-', ':'])\n\t  for loss_type in ['loss', 'extra_loss']:\n", "    assert best_df is not None\n\t    for h, alg, ls, c in zip(best_df.history, best_df.alg, lss, cs):\n\t      if h is None:\n\t        continue\n\t      plt.plot(h['n'][1:], h[loss_type][1:] / h['n'][1:], label=alg, ls=ls, c=c)\n\t    loss_name = '0-1 loss' if loss_type == 'extra_loss' else 'logloss'\n\t    plt.xlabel('examples')\n\t    plt.ylabel(f'cumulative {loss_name}')\n\t    plt.title(f'cumulative {loss_name}')\n\t    plt.legend()\n", "    ln = loss_name.replace(' ', '-')\n\t    with open(os.path.join(directory, f'plot-{ln}.pdf'), 'wb') as f:\n\t      plt.savefig(f, format='pdf', bbox_inches='tight')\n\t    plt.clf()\n\t  logging.info(\n\t      'all results saved in %s/{results.pkl,plot*.pdf,flagfile.txt,best.txt}',\n\t      directory,\n\t  )\n\tdef _run_oco(\n\t    idx: int, total: int, dataset: str, hparam: algorithms.HParams, nobs: int\n", ") -> Union[Optional[algorithms.NpState], Exception]:\n\t  \"\"\"Run online convex algorithm on a worker process.\"\"\"\n\t  logging.info('job %04d of %04d starting', idx, total)\n\t  try:\n\t    history = train.run_dataset(dataset, nobs, hparam, datasets.incorrect)\n\t    logging.info('job %04d of %04d done', idx, total)\n\t    return algorithms.as_np(history)\n\t  except FloatingPointError:\n\t    logging.info('job %04d of %04d inf', idx, total)\n\t    return None\n", "  except Exception as e:  # pylint: disable=broad-exception-caught\n\t    logging.info('job %04d of %04d errored', idx, total)\n\t    return e\n\t# Disable for Numpy and Pandas containers.\n\t# pylint: disable=g-explicit-length-test\n\tdef _read_pandas(\n\t    path: str, dataset_name: str, sketch_size: int\n\t) -> pd.DataFrame:\n\t  \"\"\"Read and validate dataframe from previous run.\"\"\"\n\t  path = os.path.join(path, 'results.pkl')\n", "  with open(path, 'rb') as f:\n\t    df = pd.read_pickle(f)\n\t  assert len(df) > 0, (path, len(df))\n\t  expected = [\n\t      'alg',\n\t      'lr',\n\t      'delta',\n\t      'loss',\n\t      'acc',\n\t      'dataset',\n", "      'sketch_size',\n\t      'history',\n\t  ]\n\t  assert set(df.columns) == set(expected), df.columns\n\t  assert df.dataset.nunique(dropna=False) == 1, (path, df.dataset.unique())\n\t  stored_dataset = list(df.dataset.unique())[0]\n\t  assert df.sketch_size.nunique(dropna=True) == 1, (\n\t      path,\n\t      df.sketch_size.unique(),\n\t  )\n", "  sketch_sizes = [x for x in df.sketch_size.unique() if not pd.isnull(x)]\n\t  if sketch_sizes:\n\t    stored_sketch_size = sketch_sizes[0]\n\t    assert sketch_size == stored_sketch_size, (\n\t        path,\n\t        sketch_size,\n\t        stored_sketch_size,\n\t    )\n\t  assert dataset_name in stored_dataset or stored_dataset in dataset_name, (\n\t      path,\n", "      stored_dataset,\n\t      dataset_name,\n\t  )\n\t  logging.info(\n\t      'extracted %s runs from %s with dataset %s matching %s at sketch size %s',\n\t      len(df),\n\t      path,\n\t      stored_dataset,\n\t      dataset_name,\n\t      sketch_size,\n", "  )\n\t  return df\n\tdef _make_pandas(\n\t    hparams: Sequence[algorithms.HParams],\n\t    dataset_name: str,\n\t    sketch_size: int,\n\t    histories: Sequence[Optional[algorithms.NpState]],\n\t) -> pd.DataFrame:\n\t  \"\"\"Generate a dataframe with all serializable run information.\"\"\"\n\t  records = []\n", "  for hparam, history in zip(hparams, histories):\n\t    if history is None:\n\t      loss = np.inf\n\t      acc = 0.0\n\t    else:\n\t      loss = history['loss'][-1] / history['n'][-1]\n\t      acc = 1.0 - history['extra_loss'][-1] / history['n'][-1]\n\t    sketch_size_used = (\n\t        sketch_size if hparam.algorithm in _SKETCHING_ALGS else np.nan\n\t    )\n", "    record = {\n\t        'alg': hparam.algorithm.name,\n\t        'lr': hparam.lr,\n\t        'delta': hparam.delta,\n\t        'loss': loss,\n\t        'acc': acc,\n\t        'dataset': dataset_name,\n\t        'sketch_size': sketch_size_used,\n\t        'history': history,\n\t    }\n", "    records.append(record)\n\t  return pd.DataFrame.from_records(records)\n\tdef _save_pandas(path: str, df: pd.DataFrame) -> None:\n\t  \"\"\"Read and validate dataframe from previous run.\"\"\"\n\t  path = os.path.join(path, 'results.pkl')\n\t  with open(path, 'wb') as f:\n\t    df.to_pickle(f)\n\tif __name__ == '__main__':\n\t  app.run(main)\n"]}
{"filename": "precondition/oco/datasets.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Module with sparse datasets on CNS.\"\"\"\n\timport dataclasses\n\timport os\n\tfrom typing import Callable\n\tfrom absl import flags\n\timport jax\n\timport jax.numpy as jnp\n", "import joblib\n\timport numpy as np\n\timport sklearn.datasets\n\t_DATA_DIR = flags.DEFINE_string(\n\t    'data_dir',\n\t    None,\n\t    'load data: your directory needs to contain the benchmark datasets'\n\t    ' (a9a, a9a.t, cifar10, cifar10.t, gisette_scale, gisette_scale.t,'\n\t    ' where .t stands for the testing set)'\n\t    ' in libsvm format, available at'\n", "    ' https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/',\n\t)\n\tSUPPORTED_DATASETS: list[str] = [\n\t    'a9a',\n\t    'a9a.t',\n\t    'cifar10',\n\t    'cifar10.t',\n\t    'gisette_scale',\n\t    'gisette_scale.t',\n\t]\n", "def _logistic_loss(w: jax.Array, x: jax.Array, y: jax.Array) -> jax.Array:\n\t  \"\"\"Compute logistic loss.\"\"\"\n\t  # assumes y is binary\n\t  pred = jnp.dot(w, x, precision=jax.lax.Precision.HIGHEST)\n\t  lse = lambda x: jax.nn.logsumexp(jnp.array(x))\n\t  return y * lse([0, -pred]) + (1 - y) * lse([0, pred])\n\tdef incorrect(w: jax.Array, x: jax.Array, y: jax.Array) -> jax.Array:\n\t  \"\"\"Compute binary 0-1 loss.\"\"\"\n\t  pred = jnp.dot(w, x, precision=jax.lax.Precision.HIGHEST)\n\t  return (pred > 0) != (y > 0)\n", "Loss = Callable[[jax.Array, jax.Array, jax.Array], jax.Array]\n\t@dataclasses.dataclass\n\tclass SimpleDataset:\n\t  \"\"\"Simple dense supervised learning dataset for linear learners.\"\"\"\n\t  x: np.ndarray\n\t  y: np.ndarray\n\t  loss: Loss\n\t  w_shape: tuple[int, ...]\n\tdef _load_dataset_uncached(name: str) -> SimpleDataset:\n\t  \"\"\"Generate a dataset with an intercept added.\"\"\"\n", "  assert name in SUPPORTED_DATASETS, name\n\t  if not _DATA_DIR.value:\n\t    raise ValueError('must specify directory where datasets are stored')\n\t  filename = os.path.join(_DATA_DIR.value, name)\n\t  with open(filename, 'rb') as f:\n\t    x, y = sklearn.datasets.load_svmlight_file(f)\n\t  x = x.todense()\n\t  x = np.concatenate([x, np.ones((len(x), 1))], axis=1)\n\t  y = y > 0\n\t  return SimpleDataset(x, y, _logistic_loss, (x.shape[1],))\n", "def load_dataset(name: str, cache: str = '/tmp/cache') -> SimpleDataset:\n\t  memory = joblib.Memory(cache, verbose=0)\n\t  cached_fn = memory.cache(_load_dataset_uncached)\n\t  return cached_fn(name)\n"]}
{"filename": "precondition/tearfree/reshaper_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for momentum implementation.\"\"\"\n\tfrom typing import Sequence\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n\tfrom jax import numpy as jnp\n\timport numpy as np\n", "from precondition.tearfree import reshaper\n\tdef _make_invalid_cases() -> Sequence[dict[str, ...]]:\n\t  \"\"\"Generate invalid cases which should throw.\"\"\"\n\t  return [\n\t      {\n\t          'testcase_name': 'smallblock',\n\t          'invalid_options': reshaper.Options(\n\t              block_size=1,\n\t          ),\n\t      },\n", "      {\n\t          'testcase_name': 'smallmerge',\n\t          'invalid_options': reshaper.Options(\n\t              merge_dims=0,\n\t          ),\n\t      },\n\t  ]\n\tdef _make_expected_shape_cases() -> Sequence[dict[str, ...]]:\n\t  cases = [\n\t      {'in_shape': [4], 'merge': 2, 'block': 3, 'out_shape': [6]},\n", "      {'in_shape': [3], 'merge': 2, 'block': 3, 'out_shape': [3]},\n\t      {'in_shape': [1, 3, 1], 'merge': 2, 'block': 3, 'out_shape': [3]},\n\t      {'in_shape': [1, 3, 1], 'merge': 3, 'block': 3, 'out_shape': [3]},\n\t      {'in_shape': [1, 3, 1], 'merge': 3, 'block': 4, 'out_shape': [3]},\n\t      {'in_shape': [1, 3, 1, 2], 'merge': 2, 'block': 3, 'out_shape': [3, 2]},\n\t      {'in_shape': [4, 1, 5], 'merge': 2, 'block': 3, 'out_shape': [6, 6]},\n\t      {'in_shape': [1], 'merge': 2, 'block': 2, 'out_shape': []},\n\t      {'in_shape': [1, 1, 1], 'merge': 2, 'block': 2, 'out_shape': []},\n\t      {'in_shape': [1, 1, 1], 'merge': 2, 'block': 2, 'out_shape': []},\n\t      {\n", "          'in_shape': [3, 1, 5, 2, 2],\n\t          'merge': 4,\n\t          'block': 10,\n\t          'out_shape': [3, 5, 4],\n\t      },\n\t      {'in_shape': [2, 3, 2], 'merge': 6, 'block': 10, 'out_shape': [6, 2]},\n\t  ]\n\t  for case in cases[:]:\n\t    if all(i <= case['block'] for i in case['in_shape']):\n\t      block0 = case.copy()\n", "      block0['block'] = 0\n\t      cases.append(block0)\n\t  return cases\n\tclass ReshaperTest(parameterized.TestCase):\n\t  \"\"\"Basic test for shampoo implementation.\"\"\"\n\t  @parameterized.named_parameters(_make_invalid_cases())\n\t  def test_invalid(self, invalid_options):\n\t    with self.assertRaises(ValueError):\n\t      reshaper.merge(invalid_options)\n\t  @parameterized.parameters(_make_expected_shape_cases())\n", "  def test_expected_shape(self, in_shape, merge, block, out_shape):\n\t    options = reshaper.Options(merge_dims=merge, block_size=block)\n\t    init_fn, update_fn = reshaper.merge(options)\n\t    init = jnp.zeros(in_shape)\n\t    out, _ = update_fn(init, init_fn(None), init)\n\t    self.assertSequenceEqual(out.shape, out_shape)\n\t  @parameterized.parameters(_make_expected_shape_cases())\n\t  def test_inversion(self, in_shape, merge, block, out_shape):\n\t    del out_shape\n\t    options = reshaper.Options(merge_dims=merge, block_size=block)\n", "    init_fn, update_fn = reshaper.merge(options)\n\t    init = jax.random.normal(jax.random.PRNGKey(0), in_shape)\n\t    out, _ = update_fn(init, init_fn(None), init)\n\t    init_fn, update_fn = reshaper.unmerge(options)\n\t    recover, _ = update_fn(out, init_fn(None), init)\n\t    np.testing.assert_array_equal(init, recover)\n\t  def test_tree(self):\n\t    shapes = {\n\t        'w': [[{'b': (3, 2)}]],\n\t        'z': (\n", "            1,\n\t            2,\n\t            1,\n\t        ),\n\t    }\n\t    init = jax.tree_map(\n\t        jnp.zeros, shapes, is_leaf=lambda x: isinstance(x, tuple)\n\t    )\n\t    options = reshaper.Options(merge_dims=2, block_size=2)\n\t    init_fn, update_fn = reshaper.merge(options)\n", "    out, _ = update_fn(init, init_fn(None), init)\n\t    out_shapes = jax.tree_map(lambda x: tuple(x.shape), out)\n\t    expected_shapes = {'w': [[{'b': (4, 2)}]], 'z': (2,)}\n\t    self.assertEqual(out_shapes, expected_shapes)\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/shampoo.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Shampoo second-order statistics preconditioning.\"\"\"\n\timport dataclasses\n\timport functools\n\timport math\n\timport string\n\tfrom typing import Iterator, NamedTuple, Optional, Sequence\n\timport chex\n", "import jax\n\tfrom jax import numpy as jnp\n\timport optax\n\tfrom precondition.tearfree import praxis_shim\n\t@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Shampoo covariance approximation options.\n\t  See https://arxiv.org/abs/2002.09018.\n\t  Attributes:\n\t    block_size: Determines the block size for Shampoo's block-diagonal gradient\n", "      covariance approximation.\n\t    update_preconditioners_freq: Number of steps between preconditioner updates.\n\t    update_statistics_freq: Number of steps between statistics updates.\n\t    second_moment_decay: Decay rate for second moment exponential moving\n\t      average. If 1.0 then sums.\n\t  \"\"\"\n\t  block_size: int = 1024\n\t  update_preconditioners_freq: int = 1\n\t  update_statistics_freq: int = 1\n\t  second_moment_decay: float = 0.999\n", "  # TODO(vladf):\n\t  # lb, rb, b sharding: maybe later?\n\t  # spmd_mesh_axis_names: Sequence[str] = () maybe later?\n\tdef apply(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Return gradient transform for (blocked) shampoo preconditioning.\"\"\"\n\t  _validate(options)\n\t  # raise if no unit dims (must be scalar)\n\t  # not intentional constants from distributed shampoo\n\t  # exponent_override = 0\n\t  # matrix_epsilon = 0 and eigh = True\n", "  return praxis_shim.ShardedGradientTransformation(\n\t      functools.partial(_init, options),\n\t      functools.partial(_update, options),\n\t      functools.partial(_pspec, options),\n\t  )\n\tclass _AxesBlocks(NamedTuple):\n\t  \"\"\"Represents statistics or preconditioner matrices for a single tensor.\n\t  Maintains the second-order statistics for gradients, to be used in second\n\t  order optimization.\n\t  There are two key matrices that are maintained per axis, when not using any\n", "  blocking approximations.\n\t  For each axis `i` with length `d_i`, we track the `(d_i, d_i)` covariances\n\t  and their inverse p-th roots, where `p` is twice the rank of the gradients\n\t  whose covariances we're tracking, excluding unit dimensions.\n\t  A covariance for a higher-order tensor's i-th axis is recovered from the outer\n\t  product of contracting all but the axis i. E.g., for an order-3 tensor G, the\n\t  covariance for its 0th dimension is `C_{ij} = sum_{k,l} G_{ikl}G_{jkl}`.\n\t  Since these matrices can be quite large for tensors with large dimensions, we\n\t  introduce an approximation which stores just block diagonal components of\n\t  these matrices. This corresponds to the full covariance statistics of the\n", "  disjoint partitions of these tensors, with large dimensions blocked by a\n\t  provided block size.\n\t  Below, we refer to all large dimensions as those at least equal to the block\n\t  size.\n\t  When storing block diagonal matrices, we store them as `N` blocks of size `B`.\n\t  Attributes:\n\t    stats: A list of length equal to the tensor's ndim with blocks of matrices\n\t      of shape [N, B, B] where B is an axis-specific block size, but at most\n\t      block_size.\n\t    roots: Same shape as stats, inverse p-th roots for statistics, where p is\n", "      the twice the rank of the original parameter to optimize.\n\t  \"\"\"\n\t  stats: list[jax.Array]\n\t  roots: list[jax.Array]\n\tclass _ShampooState(NamedTuple):\n\t  # A scalar int32 for step count.\n\t  count: jax.Array\n\t  # A tree of the same shape as the params of _AxesBlocks leaves of f32.\n\t  blocks: chex.ArrayTree\n\t@dataclasses.dataclass(frozen=True)\n", "class _BlocksMetadata:\n\t  \"\"\"Metadata for _AxesBlocks to track indexing information.\n\t  Attributes:\n\t    block_sizes: Per-dimension statistics & preconditioner block sizes, length\n\t      is equal to rank of tensor we have metadata for.\n\t    num_blocks: `N`, the total number of blocks.\n\t    debug_name: A way to refer to this parameter in debug messages.\n\t    large_block_size: The block size originally specified in the shampoo\n\t      options, this is the minimum size for a dimension to be considered large.\n\t    param_shape: The shape of the original parameter we're blocking.\n", "    large_axes: Axes with dimension at least `large_block_size` in the original\n\t      tensor.\n\t    blocks_per_large_axis: Number of blocks in the corresponding axis for each\n\t      axis in large_axes.\n\t    blocks_axis: The axis of the the `N` in the blocked tensor (see _blockify).\n\t  \"\"\"\n\t  block_sizes: list[int]\n\t  num_blocks: int\n\t  debug_name: str\n\t  large_block_size: int\n", "  param_shape: list[int]\n\t  large_axes: list[int]\n\t  blocks_per_large_axis: list[int]\n\t  blocks_axis: int\n\tdef _blocks_metadata(\n\t    options: Options, param_shape: Sequence[int], debug: str\n\t) -> _BlocksMetadata:\n\t  \"\"\"Generate the blocks metadata for a parameter.\"\"\"\n\t  dims = [min(dim, options.block_size) for dim in param_shape]\n\t  large_axes = [i for i, d in enumerate(param_shape) if d >= options.block_size]\n", "  blocks_per_large_axis = [\n\t      param_shape[i] // options.block_size for i in large_axes\n\t  ]\n\t  num_blocks = math.prod(blocks_per_large_axis + [1])\n\t  return _BlocksMetadata(\n\t      block_sizes=dims,\n\t      num_blocks=num_blocks,\n\t      debug_name=debug,\n\t      large_block_size=options.block_size,\n\t      large_axes=large_axes,\n", "      param_shape=list(param_shape),\n\t      blocks_per_large_axis=blocks_per_large_axis,\n\t      blocks_axis=min(large_axes, default=0),\n\t  )\n\tdef _validate(options: Options) -> None:\n\t  \"\"\"Raise ValueError if options are invalid.\"\"\"\n\t  if options.block_size <= 1:\n\t    raise ValueError(f\"block_size ({options.block_size}) must be >1\")\n\t  if options.update_preconditioners_freq <= 0:\n\t    raise ValueError(\n", "        \"update_preconditioners_freq ({}) must be positive\".format(\n\t            options.update_preconditioners_freq\n\t        )\n\t    )\n\t  if options.update_statistics_freq <= 0:\n\t    raise ValueError(\n\t        \"update_statistics_freq ({}) must be positive\".format(\n\t            options.update_statistics_freq\n\t        )\n\t    )\n", "  if not (0 <= options.second_moment_decay <= 1):\n\t    raise ValueError(\n\t        f\"second_moment_decay ({options.second_moment_decay}) \"\n\t        \"should be in [0, 1]\"\n\t    )\n\tdef _init(options: Options, params: optax.Params) -> _ShampooState:\n\t  \"\"\"Inititialize stats to 0 and preconditioners to identity.\"\"\"\n\t  def make_blocks(path: ..., param: jax.Array) -> _AxesBlocks:\n\t    if any(dim == 1 for dim in param.shape):\n\t      raise ValueError(\n", "          \"param {} shape ({}) has unit dimensions\".format(path, param.shape)\n\t      )\n\t    if sum(dim >= options.block_size for dim in param.shape) > 2:\n\t      raise ValueError(\n\t          \"param {} shape ({}) has >2 large dims for block size {}\".format(\n\t              path, param.shape, options.block_size\n\t          )\n\t      )\n\t    if any(\n\t        dim % options.block_size != 0\n", "        for dim in param.shape\n\t        if dim >= options.block_size\n\t    ):\n\t      raise ValueError(\n\t          \"param {} shape ({}) has large dims indivisible by block size {}\"\n\t          .format(path, param.shape, options.block_size)\n\t      )\n\t    meta = _blocks_metadata(options, param.shape, str(path))\n\t    n = meta.num_blocks\n\t    dims = meta.block_sizes\n", "    stats = [jnp.zeros((n, d, d)) for d in dims]\n\t    precond = [jnp.eye(d) * jnp.ones((n, 1, 1)) for d in dims]\n\t    return _AxesBlocks(stats, precond)\n\t  return _ShampooState(\n\t      count=jnp.zeros([], jnp.int32),\n\t      blocks=jax.tree_util.tree_map_with_path(make_blocks, params),\n\t  )\n\tdef _pspec(\n\t    options: Options, params: praxis_shim.NestedHParams\n\t) -> praxis_shim.NestedHParams:\n", "  \"\"\"Generate sharding specification for shampoo state.\"\"\"\n\t  count_pspec = praxis_shim.WeightHParams(\n\t      shape=[],\n\t      init=None,\n\t      dtype=jnp.int32,\n\t      collections=None,\n\t      tensor_split_dims_mapping=[],\n\t  )\n\t  def make_blocks_pspec(\n\t      path: ...,\n", "      param: praxis_shim.WeightHParams,\n\t  ) -> praxis_shim.NestedHParams:\n\t    meta = _blocks_metadata(options, param.shape, str(path))\n\t    num_blocks = meta.num_blocks\n\t    dims = meta.block_sizes\n\t    replicated = functools.partial(\n\t        praxis_shim.WeightHParams,\n\t        init=None,\n\t        dtype=jnp.float32,\n\t        collections=None,\n", "        tensor_split_dims_mapping=[-1, -1, -1],\n\t    )\n\t    stats = [replicated((num_blocks, d, d)) for d in dims]\n\t    precond = stats\n\t    return dict(stats=stats, roots=precond)\n\t  return dict(\n\t      count=count_pspec,\n\t      blocks=jax.tree_util.tree_map_with_path(\n\t          make_blocks_pspec, params, is_leaf=lambda x: hasattr(x, \"shape\")\n\t      ),\n", "  )\n\tdef _update(\n\t    options: Options,\n\t    updates: optax.Updates,\n\t    state: _ShampooState,\n\t    params: Optional[optax.Params] = None,\n\t) -> tuple[optax.Updates, _ShampooState]:\n\t  \"\"\"Update internal shampoo stats and precondition gradients.\"\"\"\n\t  del params\n\t  meta = jax.tree_util.tree_map_with_path(\n", "      lambda path, x: _blocks_metadata(options, x.shape, str(path)), updates\n\t  )\n\t  blocks = state.blocks\n\t  blockified_updates = jax.tree_map(_blockify, updates, meta)\n\t  is_block = lambda x: isinstance(x, _AxesBlocks)\n\t  stats_updated_blocks = functools.partial(\n\t      jax.tree_map,\n\t      functools.partial(_update_block_stats, options.second_moment_decay),\n\t      blockified_updates,\n\t      blocks,\n", "      meta,\n\t      is_leaf=is_block,\n\t  )\n\t  should_update_stats = (state.count % options.update_statistics_freq) == 0\n\t  blocks = jax.lax.cond(\n\t      should_update_stats, stats_updated_blocks, lambda: blocks\n\t  )\n\t  precond_updated_blocks = functools.partial(\n\t      jax.tree_map,\n\t      _update_block_precond,\n", "      blocks,\n\t      meta,\n\t      is_leaf=is_block,\n\t  )\n\t  should_update_precond = (\n\t      state.count % options.update_preconditioners_freq\n\t  ) == 0\n\t  blocks = jax.lax.cond(\n\t      should_update_precond, precond_updated_blocks, lambda: blocks\n\t  )\n", "  new_state = _ShampooState(count=state.count + 1, blocks=blocks)\n\t  new_updates = jax.tree_map(\n\t      _precondition_blocks, blockified_updates, blocks, meta, is_leaf=is_block\n\t  )\n\t  new_updates = jax.tree_map(_deblockify, new_updates, meta)\n\t  return new_updates, new_state\n\tdef _blockify(x: jax.Array, meta: _BlocksMetadata) -> jax.Array:\n\t  \"\"\"Reshape the update such that it is blocked along large dimensions.\n\t  Inserts the `N` dimension dimension right on the first axis in\n\t  `meta.large_axes`, which is the `meta.blocks_axis` in the returned tensor.\n", "  Shifts all original axes in `x` that are on or after `meta.blocks_axis`\n\t  (including what was originally the first axis in `meta.large_axes`) forward\n\t  by one. All large axes will now be of length equal to the largest block size.\n\t  In the case that there's no blocking, we put a dummy blocks axis in axis 0\n\t  with dimension 1, so the handling of the original axes is the same as the\n\t  blocked cases.\n\t  For example:\n\t    - Suppose block size is 5 and x is shaped [3, 20, 25, 4]. Then\n\t      x has two large axes (1 and 2). The resulting blocked value will be\n\t      shaped [3, (4*5), 5, 5, 4], with the large axes being converted\n", "      to block size and a new 20-dimensional axis with the product of the\n\t      4 blocks for the original axis 1 and 5 blocks for the original axis 2.\n\t      All other axes are kept the same. Note meta.blocks_axis precedes the\n\t      large axes' new locations, so it's set to 1.\n\t    - Suppose block size is 5 and x is shaped [5, 2]. The result will be\n\t      [1, 5, 2], with the first dimension corresponding to the single block at\n\t      axis 0.\n\t    - Suppose block size is 5 and x is [3, 4]. There are no large axes, but to\n\t      get rid of edge cases we still add a meta.blocks_axis at axis 0 with a\n\t      single block [1, 3, 4].\n", "    - Suppose block size is 5 and x is [15, 2, 10]. We'll return\n\t      [(3*2), 5, 2, 5], following the same rules as before. Note the large\n\t      axes stay in place.\n\t  Args:\n\t    x: Input to block.\n\t    meta: Metadata about the input.\n\t  Returns:\n\t    A blocked version of the input and the dimension with the number of\n\t    blocks.\n\t  \"\"\"\n", "  assert list(x.shape) == meta.param_shape, (x.shape, meta.param_shape)\n\t  if not meta.large_axes:\n\t    # Just create a unit N/blocks axis.\n\t    return jnp.expand_dims(x, meta.blocks_axis)\n\t  if len(meta.large_axes) == 1:\n\t    # Block the only large axis.\n\t    before, after = _split_exclusively(x.shape, meta.large_axes)\n\t    new_shape = before + [meta.num_blocks, meta.large_block_size] + after\n\t    return x.reshape(new_shape)\n\t  assert len(meta.large_axes) == 2, meta.large_axes\n", "  # Extract the blocks from both large axes.\n\t  l_blocks, r_blocks = meta.blocks_per_large_axis\n\t  before, middle, after = _split_exclusively(x.shape, meta.large_axes)\n\t  stitch = lambda l, r: before + l + middle + r + after\n\t  split_blocked_shape = stitch(\n\t      [l_blocks, meta.large_block_size], [r_blocks, meta.large_block_size]\n\t  )\n\t  split_blocked_x = x.reshape(split_blocked_shape)\n\t  # Move over the blocks from the right axis next to the left one.\n\t  perm = list(range(len(split_blocked_shape)))\n", "  l_blocks_ix = len(before)\n\t  r_blocks_ix = len(before) + 2 + len(middle)\n\t  perm.pop(r_blocks_ix)\n\t  perm.insert(l_blocks_ix + 1, r_blocks_ix)\n\t  adjacent_blocked_x = jnp.transpose(split_blocked_x, perm)\n\t  # Transpose the previous sharding too.\n\t  new_shape = stitch(\n\t      [meta.num_blocks, meta.large_block_size], [meta.large_block_size]\n\t  )\n\t  reshaped = adjacent_blocked_x.reshape(new_shape)\n", "  assert l_blocks_ix == meta.blocks_axis\n\t  return reshaped\n\tdef _deblockify(blocked_x: jax.Array, meta: _BlocksMetadata) -> jax.Array:\n\t  \"\"\"Invert _blockify().\"\"\"\n\t  if not meta.large_axes:\n\t    return jnp.squeeze(blocked_x, meta.blocks_axis)\n\t  if len(meta.large_axes) == 1:\n\t    return blocked_x.reshape(meta.param_shape)\n\t  assert len(meta.large_axes) == 2\n\t  # Re-split the blocks axis.\n", "  assert blocked_x.shape[meta.blocks_axis] == meta.num_blocks\n\t  before, after = _split_exclusively(blocked_x.shape, [meta.blocks_axis])\n\t  split_blocks_shape = before + meta.blocks_per_large_axis + after\n\t  split_blocked_x = blocked_x.reshape(split_blocks_shape)\n\t  # Move the right large axis blocks back in front of their axis.\n\t  perm = list(range(len(split_blocked_x.shape)))\n\t  # In blocked_x:\n\t  # [..., blocks axis, left block, ..., right block, ...]\n\t  #       ^blocks_axis                  ^large_axes[1] + 1\n\t  # In split_blocked_x:\n", "  # [..., left blocks, right blocks, left block, ..., right block, ...]\n\t  #       ^blocks_axis                                ^large_axes[1] + 2\n\t  r_blocks_ix = meta.blocks_axis + 1\n\t  r_blocks_val = perm.pop(r_blocks_ix)\n\t  # After pop:\n\t  # [..., left blocks, left block, ..., right block, ...]\n\t  #       ^blocks_axis                  ^large_axes[1] + 1\n\t  r_blocked_axis_ix = meta.large_axes[1] + 1\n\t  perm.insert(r_blocked_axis_ix, r_blocks_val)\n\t  split_blocked_x = jnp.transpose(split_blocked_x, perm)\n", "  reshaped = jnp.reshape(split_blocked_x, meta.param_shape)\n\t  return reshaped\n\tdef _update_block_stats(\n\t    second_moment_decay: float,\n\t    update: jax.Array,\n\t    block: _AxesBlocks,\n\t    meta: _BlocksMetadata,\n\t) -> _AxesBlocks:\n\t  \"\"\"Update covariance statistics given a blocked gradient.\"\"\"\n\t  new_stats = []\n", "  with jax.named_scope(\"ShampooStats\"):\n\t    for axis, cov in enumerate(block.stats):\n\t      all_axes = list(range(len(meta.param_shape)))\n\t      all_axes.remove(axis)\n\t      dot_all = functools.partial(jnp.tensordot, axes=(all_axes, all_axes))\n\t      batched_tensordot = jax.vmap(\n\t          dot_all, in_axes=meta.blocks_axis, out_axes=0\n\t      )\n\t      new_cov = batched_tensordot(update, update)\n\t      new_stats.append(_ema_update(cov, new_cov, second_moment_decay))\n", "  return _AxesBlocks(stats=new_stats, roots=block.roots)\n\tdef _pth_inv_root(p: int, cov: jax.Array) -> jax.Array:\n\t  \"\"\"Calculate a batch of p-th inverse roots.\"\"\"\n\t  eps = 1e-6\n\t  w, v = jnp.linalg.eigh(cov)\n\t  mask = w <= eps * jnp.max(w)\n\t  half = jnp.where(mask, 1.0, w) ** (-0.5 / p)\n\t  half = jnp.where(mask, 0.0, half)\n\t  half_v = jnp.expand_dims(half, -2) * v\n\t  return jnp.einsum(\"bik,bjk->bij\", half_v, half_v)\n", "def _update_block_precond(\n\t    block: _AxesBlocks, meta: _BlocksMetadata\n\t) -> _AxesBlocks:\n\t  \"\"\"Update preconditioners.\"\"\"\n\t  p = len(meta.param_shape) * 2\n\t  with jax.named_scope(\"PthInvRoot\"):\n\t    new_roots = list(map(functools.partial(_pth_inv_root, p), block.stats))\n\t  return _AxesBlocks(roots=new_roots, stats=block.stats)\n\tdef _precondition_blocks(\n\t    update: jax.Array, blocks: _AxesBlocks, meta: _BlocksMetadata\n", ") -> jax.Array:\n\t  \"\"\"Precondition blocked gradients.\"\"\"\n\t  it = _einsum_letters(meta)\n\t  blocks_axis_letter = next(it)\n\t  # Contract along the innermost axis of each preconditioner,\n\t  # making the other equal-length axis the output.\n\t  contraction_letters = [next(it) for _ in meta.param_shape]\n\t  output_letters = [next(it) for _ in meta.param_shape]\n\t  preconditioners = blocks.roots\n\t  preconditioner_inputs = [\n", "      blocks_axis_letter + o + c\n\t      for c, o in zip(contraction_letters, output_letters)\n\t  ]\n\t  blocked_input = contraction_letters[:]\n\t  blocked_input.insert(meta.blocks_axis, blocks_axis_letter)\n\t  blocked_input = \"\".join(blocked_input)\n\t  blocked_output = output_letters[:]\n\t  blocked_output.insert(meta.blocks_axis, blocks_axis_letter)\n\t  blocked_output = \"\".join(blocked_output)\n\t  # Build up the einsum equation and invoke it.\n", "  inputs = \",\".join([blocked_input] + preconditioner_inputs)\n\t  formula = inputs + \"->\" + blocked_output\n\t  with jax.named_scope(\"PreconditionShampoo\"):\n\t    print(formula, update.shape, [x.shape for x in preconditioners])\n\t    return jnp.einsum(formula, update, *preconditioners)\n\tdef _split_exclusively(\n\t    ls: Sequence[int], splits: Sequence[int]\n\t) -> list[list[int]]:\n\t  \"\"\"Returns possibly-empty segments between sorted split points in ls.\"\"\"\n\t  assert all(\n", "      l < r for l, r in zip(splits, splits[1:])\n\t  ), f\"splits {splits} must be distinct ascending\"\n\t  assert all(\n\t      0 <= i < len(ls) for i in splits\n\t  ), f\"splits {splits} must index into list {ls} of length {len(ls)}\"\n\t  splits = [-1] + list(splits) + [len(ls)]\n\t  return [list(ls[l + 1 : r]) for l, r in zip(splits, splits[1:])]\n\tdef _einsum_letters(meta: _BlocksMetadata) -> Iterator[str]:\n\t  for c in string.ascii_letters:\n\t    yield c\n", "  raise ValueError(\n\t      f\"shape {meta.param_shape} too high-dimensional for {meta.debug_name}\"\n\t  )\n\tdef _ema_update(old: jax.Array, new: jax.Array, decay: float) -> jax.Array:\n\t  if decay == 1.0:\n\t    return old + new\n\t  return old * decay + new * (1 - decay)\n"]}
{"filename": "precondition/tearfree/sketchy.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Sketchy low-rank second-order statistics preconditioning.\"\"\"\n\timport dataclasses\n\timport functools\n\tfrom typing import NamedTuple, Optional, Union\n\timport chex\n\timport jax\n\tfrom jax import numpy as jnp\n", "import optax\n\tfrom precondition.tearfree import praxis_shim\n\t@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Sketchy covariance approximation options.\n\t  See https://arxiv.org/abs/2302.03764.\n\t  Attributes:\n\t    epsilon: The diagonal positive perturbation added to preconditioner before\n\t      inversion.\n\t    rank: The sketch size to use for FD sketch for each tensor's dimension.\n", "    relative_epsilon: Whether to scale epsilon by the top singular value of the\n\t      covariance or not.\n\t    second_moment_decay: Exponential moving average for second-order statistics\n\t      tracking. If 1.0 then sums.\n\t    update_freq: Number of steps between covariance updates.\n\t    add_ggt: whether to store the exponentially moving GGT in the states. Set\n\t    to TRUE to save the exponentially moving GGT.\n\t  \"\"\"\n\t  epsilon: float = 1e-7\n\t  rank: int = 128\n", "  relative_epsilon: bool = True\n\t  second_moment_decay: float = 0.999\n\t  update_freq: int = 1\n\t  add_ggt: bool = False\n\tdef apply(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Return gradient transform for (blocked) shampoo preconditioning.\"\"\"\n\t  _validate(options)\n\t  return praxis_shim.ShardedGradientTransformation(\n\t      functools.partial(_init, options),\n\t      functools.partial(_update, options),\n", "      functools.partial(_pspec, options),\n\t  )\n\tclass _AxisState(NamedTuple):\n\t  \"\"\"Contains the covariance sketch state for each tensor dimension.\"\"\"\n\t  eigvecs: jax.Array\n\t  # These refer to the eigenvalues of the running *square root* of of the\n\t  # covariance.\n\t  eigvals: jax.Array\n\t  # Analogously, but the -(1/(2*ndim)) root of the covariance, where ndim\n\t  # is total tensor rank.\n", "  inv_eigvals: jax.Array\n\t  # The tail, however, tracks the cumulative escaped mass, which is the sum\n\t  # of eigenvalues of the full gradient covariance which were subtracted out.\n\t  tail: jax.Array\n\t  # Analogously to inv_eigvals, the -(1/(2*ndim))-th root.\n\t  inv_tail: jax.Array\n\t  # Add additional optional state to store ema GGT\n\t  ema_ggt: Union[optax.MaskedNode, jax.Array]\n\tclass _TensorState(NamedTuple):\n\t  \"\"\"Per-tensor state contains a list of axis states for each dimension.\"\"\"\n", "  axes: list[_AxisState]\n\tclass _SketchyState(NamedTuple):\n\t  # A scalar int32 for step count.\n\t  count: jax.Array\n\t  # A tree of the same shape as the params of _TensorState leaves of f32.\n\t  sketches: chex.ArrayTree\n\tdef _validate(options: Options) -> None:\n\t  \"\"\"Raise ValueError if options are invalid.\"\"\"\n\t  if options.update_freq <= 0:\n\t    raise ValueError(\n", "        \"update_freq ({}) must be positive\".format(options.update_freq)\n\t    )\n\t  if not (0 <= options.second_moment_decay <= 1):\n\t    raise ValueError(\n\t        f\"second_moment_decay ({options.second_moment_decay}) \"\n\t        \"should be in [0, 1]\"\n\t    )\n\t  if options.rank <= 0:\n\t    raise ValueError(f\"rank ({options.rank}) must be at least 1\")\n\tdef _init(options: Options, params: optax.Params) -> _SketchyState:\n", "  \"\"\"Inititialize sketch.\"\"\"\n\t  def _tensor_state(path: ..., param: jax.Array) -> _TensorState:\n\t    axes = []\n\t    add_ggt = options.add_ggt\n\t    for d in param.shape:\n\t      if d == 1:\n\t        raise ValueError(\n\t            \"param {} shape ({}) has unit dimensions\".format(path, param.shape)\n\t        )\n\t      k = min(d, options.rank)\n", "      axes.append(\n\t          _AxisState(\n\t              eigvecs=jnp.zeros((d, k)),\n\t              eigvals=jnp.zeros((k,)),\n\t              inv_eigvals=jnp.zeros((k,)),\n\t              tail=jnp.zeros(tuple()),\n\t              inv_tail=jnp.zeros(tuple()),\n\t              ema_ggt=jnp.zeros((d, d)) if add_ggt else optax.MaskedNode(),\n\t          )\n\t      )\n", "    return _TensorState(axes)\n\t  return _SketchyState(\n\t      count=jnp.zeros([], jnp.int32),\n\t      sketches=jax.tree_util.tree_map_with_path(_tensor_state, params),\n\t  )\n\tdef _pspec(\n\t    options: Options, params: praxis_shim.NestedHParams\n\t) -> praxis_shim.NestedHParams:\n\t  \"\"\"Generate sharding specification for sketchy state.\"\"\"\n\t  count_pspec = praxis_shim.WeightHParams(\n", "      shape=[],\n\t      init=None,\n\t      dtype=jnp.int32,\n\t      collections=None,\n\t      tensor_split_dims_mapping=[],\n\t  )\n\t  def _tensor_pspec(\n\t      param: praxis_shim.WeightHParams,\n\t  ) -> praxis_shim.NestedHParams:\n\t    def _replicated(shape):\n", "      return praxis_shim.WeightHParams(\n\t          shape=list(shape),\n\t          init=None,\n\t          dtype=jnp.float32,\n\t          collections=None,\n\t          tensor_split_dims_mapping=[-1] * len(shape),\n\t      )\n\t    def _make_axis_state(d: int):\n\t      k = min(d, options.rank)\n\t      add_ggt = options.add_ggt\n", "      return dict(\n\t          eigvecs=_replicated((d, k)),\n\t          eigvals=_replicated((k,)),\n\t          inv_eigvals=_replicated((k,)),\n\t          tail=_replicated(tuple()),\n\t          inv_tail=_replicated(tuple()),\n\t          ema_ggt=_replicated((d, d)) if add_ggt else optax.MaskedNode(),\n\t      )\n\t    return dict(axes=[_make_axis_state(d) for d in param.shape])\n\t  return dict(\n", "      count=count_pspec,\n\t      sketches=jax.tree_util.tree_map(\n\t          _tensor_pspec, params, is_leaf=lambda x: hasattr(x, \"shape\")\n\t      ),\n\t  )\n\tdef _update(\n\t    options: Options,\n\t    updates: optax.Updates,\n\t    state: _SketchyState,\n\t    params: Optional[optax.Params] = None,\n", ") -> tuple[optax.Updates, _SketchyState]:\n\t  \"\"\"Update internal shampoo stats and precondition gradients.\"\"\"\n\t  del params\n\t  sketches = state.sketches\n\t  is_tensor_state = lambda x: isinstance(x, _TensorState)\n\t  updated_sketches = functools.partial(\n\t      jax.tree_map,\n\t      functools.partial(_update_sketches, options),\n\t      updates,\n\t      sketches,\n", "      is_leaf=is_tensor_state,\n\t  )\n\t  should_update_stats = (state.count % options.update_freq) == 0\n\t  new_sketches = jax.lax.cond(\n\t      should_update_stats, updated_sketches, lambda: sketches\n\t  )\n\t  new_updates = jax.tree_map(\n\t      functools.partial(_precondition, options),\n\t      updates,\n\t      new_sketches,\n", "      is_leaf=is_tensor_state,\n\t  )\n\t  return new_updates, _SketchyState(\n\t      count=state.count + 1, sketches=new_sketches\n\t  )\n\tdef _update_sketches(\n\t    options: Options,\n\t    update: jax.Array,\n\t    sketches: _TensorState,\n\t) -> _TensorState:\n", "  \"\"\"Update sketched covariance statistics given a gradient.\"\"\"\n\t  new_axes = []\n\t  for dim, axis_state in enumerate(sketches.axes):\n\t    with jax.named_scope(\"UpdateSketchDim{}\".format(dim)):\n\t      new_axes.append(_update_axis(options, dim, update, axis_state))\n\t  return _TensorState(new_axes)\n\tdef _precondition(\n\t    options: Options, update: jax.Array, sketches: _TensorState\n\t) -> jax.Array:\n\t  \"\"\"Precondition gradients.\"\"\"\n", "  g = update\n\t  original_shape = g.shape\n\t  roll = tuple(range(1, g.ndim)) + (0,)\n\t  for dim, axis_state in enumerate(sketches.axes):\n\t    with jax.named_scope(\"SketchPreconditionDim{}\".format(dim)):\n\t      # Rotate g during this loop; keep the axis to precondition first.\n\t      d = original_shape[dim]\n\t      k = min(d, options.rank)\n\t      assert g.shape[0] == d\n\t      eigvecs = axis_state.eigvecs\n", "      assert list(eigvecs.shape) == [d, k]\n\t      lowrank_basis = jnp.tensordot(g, eigvecs, axes=[[0], [0]])\n\t      lowrank_component = jnp.tensordot(\n\t          lowrank_basis, eigvecs, axes=[[g.ndim - 1], [1]]\n\t      )\n\t      g = jnp.transpose(g, axes=roll)\n\t      complement = g - lowrank_component\n\t      scaled_basis = lowrank_basis * axis_state.inv_eigvals\n\t      scaled_lowrank_component = jnp.tensordot(\n\t          scaled_basis, eigvecs, axes=[[g.ndim - 1], [1]]\n", "      )\n\t      g = axis_state.inv_tail * complement + scaled_lowrank_component\n\t  return g\n\tdef _update_axis(\n\t    options: Options, dim: int, update: jax.Array, axis_state: _AxisState,\n\t) -> _AxisState:\n\t  \"\"\"Perform an FD update for statistics.\"\"\"\n\t  # _low_rank_root\n\t  d = update.shape[dim]\n\t  k = min(d, options.rank)\n", "  sketch_dk = axis_state.eigvecs\n\t  assert sketch_dk.shape == (d, k), (sketch_dk.shape, d, k, update.shape, dim)\n\t  sketch_dk *= axis_state.eigvals[jnp.newaxis, :]\n\t  all_but_dim = [i for i in range(update.ndim) if i != dim]\n\t  g_dm = update.transpose([dim] + all_but_dim).reshape(d, -1)\n\t  decay = jnp.sqrt(options.second_moment_decay)\n\t  # This implementation uses only O(|gradient size|) memory because\n\t  # full_matrices is False, but may be slow. Consider LOBPCG instead.\n\t  updated = jnp.concatenate([sketch_dk * decay, g_dm], axis=1)\n\t  # This dimensionality reduction with QR is a mathematical no-op but required\n", "  # to avoid b/286607548.\n\t  updated = jnp.linalg.qr(updated.T, mode=\"r\").T\n\t  def _safe_svd(x):\n\t    # Wrap with a nan check due to hangs per b/286654608.\n\t    svd = lambda y: jnp.linalg.svd(y, full_matrices=False)[:2]\n\t    def _all_nan(y):\n\t      m = min(y.shape)\n\t      u = jnp.full((d, m), jnp.nan, jnp.float32)\n\t      s = jnp.full((m,), jnp.nan, jnp.float32)\n\t      return u, s\n", "    return jax.lax.cond(jnp.isfinite(x).all(), svd, _all_nan, x)\n\t  u, s = _safe_svd(updated)\n\t  assert u.shape[0] == d\n\t  assert u.shape[1] >= k\n\t  cutoff = jnp.maximum(s[k], 0.0) if k < len(s) else 0.0\n\t  top_eigs = jnp.maximum(s[:k], 0.0)\n\t  deflated = jnp.sqrt(jnp.maximum(0.0, top_eigs - cutoff)) * jnp.sqrt(\n\t      top_eigs + cutoff\n\t  )\n\t  tail = axis_state.tail * decay + cutoff**2\n", "  # Avoid numerical error from the sqrt computation and from subtracting\n\t  # and re-adding cutoff^2 (mathematically, undeflated == deflated^2 + tail).\n\t  undeflated = jnp.square(jnp.maximum(top_eigs, 0.0)) + axis_state.tail * decay\n\t  eigvecs = u[:, :k]\n\t  mask = deflated > 0\n\t  # Would be nice to statically assert deflated == 0 implies undeflated == 0.\n\t  alpha = jnp.asarray(-1.0 / (2 * update.ndim), dtype=jnp.float32)\n\t  eigvecs *= mask\n\t  if options.relative_epsilon and options.epsilon > 0:\n\t    eps = jnp.max(undeflated) * options.epsilon\n", "  else:\n\t    eps = options.epsilon\n\t  inv_eigvals = jnp.where(mask, (undeflated + eps) ** alpha, 0)\n\t  eigvals = deflated * mask\n\t  inv_tail = jnp.where(tail > 0, (tail + eps) ** alpha, 0.0)\n\t  if options.add_ggt:\n\t    ema_ggt = axis_state.ema_ggt * decay + g_dm.dot(g_dm.T) * (1 - decay)\n\t  else:\n\t    ema_ggt = axis_state.ema_ggt\n\t  return _AxisState(eigvecs, eigvals, inv_eigvals, tail, inv_tail, ema_ggt)\n"]}
{"filename": "precondition/tearfree/sketchy_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for momentum implementation.\"\"\"\n\timport itertools\n\tfrom typing import Sequence\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n\tfrom jax import numpy as jnp\n", "import numpy as np\n\tfrom precondition.tearfree import shampoo\n\tfrom precondition.tearfree import sketchy\n\tdef _make_invalid_cases() -> Sequence[dict[str, ...]]:\n\t  \"\"\"Generate invalid cases which should throw.\"\"\"\n\t  return [\n\t      {\n\t          'testcase_name': 'freq0',\n\t          'invalid_options': sketchy.Options(\n\t              update_freq=0,\n", "          ),\n\t      },\n\t      {\n\t          'testcase_name': 'decay_neg',\n\t          'invalid_options': sketchy.Options(\n\t              second_moment_decay=-0.1,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'decay_large',\n", "          'invalid_options': sketchy.Options(\n\t              second_moment_decay=1.1,\n\t          ),\n\t      },\n\t  ]\n\tclass SketchyTest(parameterized.TestCase):\n\t  \"\"\"Basic test for shampoo implementation.\"\"\"\n\t  def setUp(self):\n\t    super().setUp()\n\t    jax.config.update('jax_debug_nans', True)\n", "  @parameterized.parameters(\n\t      {'shape': (1, 2, 1)},\n\t      {'shape': (1, 1, 3, 1, 2, 1)},\n\t      {'shape': (2, 1, 3, 2)},\n\t      {'shape': (1, 1)},\n\t      {'shape': (1,)},\n\t  )\n\t  def test_unit_dims_raise(self, shape):\n\t    \"\"\"Assert raises if unit dimensions are present.\"\"\"\n\t    with self.assertRaises(ValueError):\n", "      self._unroll(sketchy.apply(sketchy.Options()), 1, shape)\n\t  @parameterized.named_parameters(_make_invalid_cases())\n\t  def test_invalid(self, invalid_options):\n\t    with self.assertRaises(ValueError):\n\t      sketchy.apply(invalid_options)\n\t  def _make_null_state(self, d, k) -> sketchy._AxisState:\n\t    return sketchy._init(\n\t        sketchy.Options(rank=k), jnp.zeros((d,))\n\t    ).sketches.axes[0]\n\t  def _make_eye_state(self, d, eigs, tail, ndim) -> sketchy._AxisState:\n", "    k = len(eigs)\n\t    state = self._make_null_state(d, k)\n\t    state = state._replace(eigvecs=jnp.eye(d, k))\n\t    state = state._replace(eigvals=state.eigvals + jnp.asarray(eigs))\n\t    state = state._replace(tail=tail)\n\t    if tail > 0:\n\t      state._replace(inv_tail=tail ** (-1 / (2 * ndim)))\n\t    mask = state.eigvals > 0\n\t    ie = jnp.where(mask, (state.tail + state.eigvals**2), 1.0) ** (\n\t        -1 / (2 * ndim)\n", "    )\n\t    ie *= mask\n\t    state._replace(inv_eigvals=ie)\n\t    return state\n\t  def _no_decay_options(self, sketch_size, epsilon=0.0):\n\t    return sketchy.Options(\n\t        rank=sketch_size, second_moment_decay=1, epsilon=epsilon\n\t    )\n\t  @parameterized.parameters(range(1, 5))\n\t  def test_dynamic_exponent(self, ndim):\n", "    \"\"\"Test that exponent for various gradient ndim is correct.\"\"\"\n\t    size = 4\n\t    prev = self._make_eye_state(size, [0], 0.0, ndim)\n\t    grad = np.zeros([size] * ndim, np.float32)\n\t    grad[(0,) * ndim] = 2**ndim\n\t    ret = sketchy._update_axis(self._no_decay_options(1), 0, grad, prev)\n\t    self.assertAlmostEqual(ret.inv_eigvals, 1 / 2, delta=1e-6)\n\t    prev = self._make_eye_state(size, [2**ndim], 0.0, ndim)\n\t    grad = np.zeros([size] * ndim, np.float32)\n\t    ret = sketchy._update_axis(self._no_decay_options(1), 0, grad, prev)\n", "    self.assertAlmostEqual(ret.inv_eigvals, 1 / 2, delta=1e-6)\n\t  def test_epsilon(self):\n\t    \"\"\"Test that epsilon is properly calculated.\"\"\"\n\t    size = 4\n\t    ndim = 2\n\t    prev = self._make_eye_state(size, [0], 4, ndim)\n\t    grad = np.zeros([size] * ndim, np.float32)\n\t    grad[(0,) * ndim] = 2\n\t    options = self._no_decay_options(1, epsilon=1e-3)\n\t    ret = sketchy._update_axis(options, 0, grad, prev)\n", "    self.assertAlmostEqual(\n\t        ret.inv_eigvals[0], ((4 + 4) * 1.001) ** (-1 / 4), delta=1e-3, msg=ret\n\t    )\n\t    self.assertAlmostEqual(ret.inv_tail, (4 * 1.001) ** (-1 / 4), delta=1e-3)\n\t    options.relative_epsilon = False\n\t    ret = sketchy._update_axis(options, 0, grad, prev)\n\t    self.assertAlmostEqual(\n\t        ret.inv_eigvals[0], (4 + 4 + 0.001) ** (-1 / 4), delta=1e-6\n\t    )\n\t    self.assertAlmostEqual(ret.inv_tail, (4 + 0.001) ** (-1 / 4), delta=1e-3)\n", "  def _make_rand_state(self, size, eigs, tail, ndim):\n\t    rng = np.random.default_rng(1234)\n\t    b = rng.standard_normal(size=[size, size])\n\t    b = b.dot(b.T)\n\t    _, v = np.linalg.eigh(b)\n\t    state = self._make_eye_state(size, eigs, tail, ndim)\n\t    state = state._replace(eigvecs=v[:, : len(eigs)])\n\t    return state\n\t  # test covariance-adding equality from FD\n\t  # with rand initial state, and with zero\n", "  #\n\t  # Do it under ndim 1 2 or 3 (choose random axis for higher dims)\n\t  @parameterized.parameters(\n\t      itertools.product(\n\t          [1, 2, 3],\n\t          [0.1, 0.9, 1.0],\n\t          ['zero', 'id', 'rand'],\n\t          [0, 1],\n\t          [False, True],\n\t      )\n", "  )\n\t  def test_basic(self, ndim, decay, init, tail, last_axis):\n\t    \"\"\"Validate low rank returned matrix.\"\"\"\n\t    d = 3\n\t    k = 2\n\t    rng = np.random.default_rng(1234)\n\t    # Make other dims slightly larger\n\t    shape = [d + i for i in range(ndim)]\n\t    if last_axis:\n\t      shape = shape[::-1]\n", "    grad = rng.standard_normal(size=shape)\n\t    if last_axis:\n\t      grad_2d = grad.reshape(-1, d)\n\t      added_cov = grad_2d.T.dot(grad_2d)\n\t    else:\n\t      grad_2d = grad.reshape(d, -1)\n\t      added_cov = grad_2d.dot(grad_2d.T)\n\t    top_added_eig = np.linalg.eigvalsh(added_cov).max()\n\t    # Test out one eig above, one below.\n\t    eigs = np.array([top_added_eig * 4, top_added_eig / 4])\n", "    if init == 'zero':\n\t      prev = self._make_null_state(d, k)\n\t    elif init == 'id':\n\t      prev = self._make_eye_state(d, eigs, tail, ndim)\n\t    else:\n\t      assert init == 'rand', init\n\t      prev = self._make_rand_state(d, eigs, tail, ndim)\n\t    options = sketchy.Options(\n\t        second_moment_decay=decay,\n\t        rank=k,\n", "        epsilon=0.0,\n\t    )\n\t    dim = ndim - 1 if last_axis else 0\n\t    updated = sketchy._update_axis(options, dim, grad, prev)\n\t    if updated.tail > 0:\n\t      self.assertAlmostEqual(\n\t          updated.tail ** (-1 / (2 * ndim)), updated.inv_tail\n\t      )\n\t    else:\n\t      self.assertAlmostEqual(updated.inv_tail, 0)\n", "      self.assertAlmostEqual(updated.tail, 0)\n\t    ie = updated.inv_eigvals\n\t    e = updated.eigvals**2 + updated.tail\n\t    mask = updated.eigvals > 0\n\t    expected_ie = mask * np.where(mask, e, 1.0) ** (-1 / (2 * ndim))\n\t    delta = 1e-5 * min(expected_ie.max(), ie.max())\n\t    self.assertSequenceAlmostEqual(expected_ie, ie, delta=delta)\n\t    def _make_cov(sketch: sketchy._AxisState, add_tail=True):\n\t      # Note eigvals refer to the *root* singular values, so squaring as\n\t      # we do below recovers covariance.\n", "      eigvals = np.sqrt(add_tail * sketch.tail + np.square(sketch.eigvals))\n\t      half = sketch.eigvecs * eigvals\n\t      complement = np.eye(d) - sketch.eigvecs.dot(sketch.eigvecs.T)\n\t      tail = complement * sketch.tail if add_tail else 0.0\n\t      return half.dot(half.T) + tail\n\t    self.assertGreaterEqual(updated.tail, prev.tail * decay)\n\t    prev_cov = _make_cov(prev)\n\t    new_cov = _make_cov(updated)\n\t    pd_eigs = np.linalg.eigvalsh(new_cov - decay * prev_cov)\n\t    # Validate positive definiteness up to numerical error.\n", "    self.assertGreaterEqual(pd_eigs.min(), -pd_eigs.max() * 1e-4)\n\t    prev_no_tail = _make_cov(prev, add_tail=False)\n\t    w2, v2 = np.linalg.eigh(decay * prev_no_tail + added_cov)\n\t    w2 = np.maximum(0, w2 - w2[d - k - 1])\n\t    half = v2 * jnp.sqrt(w2)\n\t    expected_cov = half.dot(half.T)\n\t    actual_cov = _make_cov(updated, add_tail=False)\n\t    np.testing.assert_allclose(expected_cov, actual_cov, rtol=1e-3)\n\t  def _unroll(self, tx, n, shape):\n\t    \"\"\"Generate states and grad updates n times.\"\"\"\n", "    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n\t    grads = jax.random.normal(rng, (n, *shape))\n\t    init = tx.init(params)\n\t    def reduce(state, grad):\n\t      new_grad, new_state = tx.update(grad, state, params)\n\t      return new_state, new_grad\n\t    _, out_grads = jax.lax.scan(reduce, init, grads)\n\t    return out_grads\n\t  def test_reduction_to_shampoo(self):\n", "    tx = sketchy.apply(sketchy.Options(second_moment_decay=0.99, epsilon=0.0))\n\t    shampoo_tx = shampoo.apply(shampoo.Options(second_moment_decay=0.99))\n\t    # Choose a shape well below sketchy rank & shampoo block size.\n\t    shape = (4, 5)\n\t    nsteps = 3\n\t    sketchy_run = self._unroll(tx, nsteps, shape)\n\t    # Shampoo 2nd moment is computed as (1 - decay) * update + decay * update\n\t    # so we must adjust the preconditioned grad by a factor sqrt(1/(1-decay)).\n\t    shampoo_run = self._unroll(shampoo_tx, nsteps, shape) / 10\n\t    np.testing.assert_allclose(shampoo_run, sketchy_run, rtol=3e-3, atol=2e-4)\n", "if __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/optimizer_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for tearfree optimizer.\"\"\"\n\timport dataclasses\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n\tfrom jax import numpy as jnp\n\timport numpy as np\n", "import optax\n\tfrom precondition.tearfree import grafting\n\tfrom precondition.tearfree import momentum\n\tfrom precondition.tearfree import optimizer\n\tfrom precondition.tearfree import praxis_shim\n\tfrom precondition.tearfree import second_order\n\tfrom precondition.tearfree import shampoo\n\tclass OptimizerTest(parameterized.TestCase):\n\t  \"\"\"Basic test for optimizer configurations.\"\"\"\n\t  def setUp(self):\n", "    super().setUp()\n\t    jax.config.update('jax_debug_nans', True)\n\t  def _unroll(self, options, shape, transform=None, lr=0.1, n=4):\n\t    \"\"\"Generate states and grad updates n times.\"\"\"\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n\t    grads = jax.random.normal(rng, (n, *shape))\n\t    if transform is not None:\n\t      params = transform(params)\n\t      grads = jnp.stack([transform(g) for g in grads])\n", "    if isinstance(options, optimizer.TearfreeOptions):\n\t      tx = optimizer.tearfree(lr, options)\n\t    else:\n\t      tx = options\n\t    init = tx.init(params)\n\t    def reduce(state, grad):\n\t      new_grad, new_state = tx.update(grad, state, params)\n\t      return new_state, new_grad\n\t    _, out_grads = jax.lax.scan(reduce, init, grads)\n\t    return out_grads\n", "  def _no_graft_no_momentum(self):\n\t    return optimizer.TearfreeOptions(\n\t        grafting_options=grafting.Options(\n\t            grafting_type=grafting.GraftingType.NONE,\n\t            second_moment_decay=0.0,\n\t            skip_preconditioning_rank1=False,\n\t        ),\n\t        momentum_options=momentum.Options(momentum_decay=0.0),\n\t    )\n\t  def test_merge_dims(self):\n", "    shape = (2, 2)\n\t    options = dataclasses.replace(\n\t        self._no_graft_no_momentum(),\n\t        second_order_options=second_order.Options(merge_dims=4),\n\t    )\n\t    transform = lambda x: x.reshape(4)\n\t    actual = self._unroll(options, shape)\n\t    expected = self._unroll(options, shape, transform)\n\t    np.testing.assert_allclose(actual.reshape(-1, 4), expected)\n\t  def test_block_size(self):\n", "    shape = (4,)\n\t    options = dataclasses.replace(\n\t        self._no_graft_no_momentum(),\n\t        second_order_options=second_order.Options(\n\t            shampoo_options=shampoo.Options(block_size=3)\n\t        ),\n\t    )\n\t    actual = self._unroll(options, shape)\n\t    expected = self._unroll(options, shape)\n\t    np.testing.assert_allclose(actual, expected)\n", "  @parameterized.parameters(\n\t      momentum.Options(),  # Default is 0.9, active momentum.\n\t      momentum.Options(momentum_decay=0.0),\n\t      momentum.Options(weight_decay=0.01),\n\t      momentum.Options(weight_decay=0.01, weight_decay_after_momentum=False),\n\t      momentum.Options(nesterov=False),\n\t      momentum.Options(ema=True),\n\t      momentum.Options(ema=True, nesterov=True),\n\t  )\n\t  def test_momentum_no_graft(self, momentum_options):\n", "    shape = (4,)\n\t    options = self._no_graft_no_momentum()\n\t    options.momentum_options = momentum_options\n\t    tx = praxis_shim.sharded_chain(\n\t        second_order.apply(options.second_order_options),\n\t        momentum.apply(momentum_options),\n\t        optax.scale(-0.1),\n\t    )\n\t    actual = self._unroll(options, shape)\n\t    expected = self._unroll(tx, shape)\n", "    np.testing.assert_allclose(actual, expected)\n\t  def _grafting_tx(\n\t      self, grafting_options\n\t  ) -> praxis_shim.ShardedGradientTransformation:\n\t    id_tx = optax.identity()\n\t    id_tx_shard = praxis_shim.ShardedGradientTransformation(\n\t        id_tx.init,\n\t        id_tx.update,\n\t        lambda _: optax.EmptyState(),\n\t    )\n", "    return grafting.graft(grafting_options, id_tx_shard)\n\t  def _grafting_tx_with_momentum(\n\t      self, grafting_options, momentum_options, lr=0.1\n\t  ):\n\t    return praxis_shim.sharded_chain(\n\t        self._grafting_tx(grafting_options),\n\t        momentum.apply(momentum_options),\n\t        optax.scale(-lr),\n\t    )\n\t  @parameterized.parameters(\n", "      grafting.Options(),\n\t      grafting.Options(\n\t          grafting_type=grafting.GraftingType.SGD, second_moment_decay=0.0\n\t      ),\n\t      grafting.Options(second_moment_decay=1.0),\n\t  )\n\t  def test_momentum_yes_graft(self, grafting_options):\n\t    shape = (4,)\n\t    nsteps = 4\n\t    options = self._no_graft_no_momentum()\n", "    options.momentum_options.momentum_decay = 0.9\n\t    options.grafting_options = grafting_options\n\t    grafting_options.start_preconditioning_step = nsteps + 1\n\t    grafting_options.skip_preconditioning_rank1 = False\n\t    tx = self._grafting_tx_with_momentum(\n\t        grafting_options, options.momentum_options\n\t    )\n\t    expected = self._unroll(tx, shape, n=nsteps)\n\t    actual = self._unroll(options, shape, n=nsteps)\n\t    np.testing.assert_allclose(actual, expected)\n", "  def _precondition_at(self, i):\n\t    \"\"\"Return optimizer with momentum, grafting, and start precon at step i.\"\"\"\n\t    return optimizer.TearfreeOptions(\n\t        grafting_options=grafting.Options(\n\t            start_preconditioning_step=i, skip_preconditioning_rank1=False\n\t        )\n\t    )\n\t  @parameterized.parameters(\n\t      dict(shape=(1, 1, 1)),\n\t      dict(shape=(1,)),\n", "      dict(shape=tuple()),\n\t  )\n\t  def test_scalar_is_grafting(self, shape):\n\t    nsteps = 4\n\t    options = self._precondition_at(2)\n\t    tx = self._grafting_tx_with_momentum(\n\t        options.grafting_options, options.momentum_options\n\t    )\n\t    expected = self._unroll(tx, shape, n=nsteps)\n\t    actual = self._unroll(options, shape, n=nsteps)\n", "    np.testing.assert_allclose(actual, expected)\n\t  def test_lr(self):\n\t    shape = (3,)\n\t    options = self._precondition_at(2)\n\t    nsteps = 4\n\t    def schedule(count):\n\t      return (count + 1) * 0.1\n\t    actual = self._unroll(options, shape, lr=schedule, n=nsteps)\n\t    expected = self._unroll(options, shape, lr=0.1, n=nsteps)\n\t    expected *= (jnp.arange(nsteps) + 1).reshape(-1, 1)\n", "    np.testing.assert_allclose(actual, expected)\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/shampoo_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for momentum implementation.\"\"\"\n\timport itertools\n\tfrom typing import Sequence\n\tfrom absl import logging\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n", "from jax import numpy as jnp\n\timport numpy as np\n\tfrom precondition.tearfree import shampoo\n\tdef _make_invalid_cases() -> Sequence[dict[str, ...]]:\n\t  \"\"\"Generate invalid cases which should throw.\"\"\"\n\t  return [\n\t      {\n\t          'testcase_name': 'block_size0',\n\t          'invalid_options': shampoo.Options(\n\t              block_size=0,\n", "          ),\n\t      },\n\t      {\n\t          'testcase_name': 'precond0',\n\t          'invalid_options': shampoo.Options(\n\t              update_preconditioners_freq=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'stats0',\n", "          'invalid_options': shampoo.Options(\n\t              update_statistics_freq=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'decay_neg',\n\t          'invalid_options': shampoo.Options(\n\t              second_moment_decay=-0.1,\n\t          ),\n\t      },\n", "      {\n\t          'testcase_name': 'decay_large',\n\t          'invalid_options': shampoo.Options(\n\t              second_moment_decay=1.1,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'block_size1',\n\t          'invalid_options': shampoo.Options(\n\t              block_size=1,\n", "          ),\n\t      },\n\t  ]\n\tdef _make_blockify_deblockify_cases() -> Sequence[dict[str, ...]]:\n\t  shapes_blocks = [\n\t      (tuple(), 2, 'scalar'),\n\t      ((5,), 6, '1d_0large'),\n\t      ((5,), 5, '1d_1large'),\n\t      ((4,), 2, '1d_1large_moreblocks'),\n\t      ((2, 3), 6, '2d_0large'),\n", "      ((2, 3), 3, '2d_1large'),\n\t      ((2, 2), 2, '2d_2large'),\n\t      ((4, 4), 2, '2d_2large_moreblocks'),\n\t      ((2, 3, 3, 2), 4, 'highdim_0large'),\n\t      ((2, 3, 2, 2), 3, 'highdim_1large'),\n\t      ((2, 2 * 3, 2, 2), 3, 'highdim_1large_moreblocks'),\n\t      ((2, 3, 3, 2), 3, 'highdim_2large_together'),\n\t      ((2, 3, 2, 3), 3, 'highdim_2large_separate'),\n\t  ]\n\t  cases = []\n", "  for shape, block_size, name in shapes_blocks:\n\t    cases.append(\n\t        dict(\n\t            shape=shape,\n\t            block_size=block_size,\n\t            testcase_name=name,\n\t        )\n\t    )\n\t  return cases\n\tclass ShampooTest(parameterized.TestCase):\n", "  \"\"\"Basic test for shampoo implementation.\"\"\"\n\t  def setUp(self):\n\t    super().setUp()\n\t    jax.config.update('jax_debug_nans', True)\n\t  def _unroll(self, options, n, shape):\n\t    \"\"\"Generate states and grad updates n times.\"\"\"\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n\t    grads = jax.random.normal(rng, (n, *shape))\n\t    return self._unroll_concrete(options, params, grads)\n", "  def _unroll_concrete(self, options, params, grads):\n\t    \"\"\"Unrolls with provided params and grads.\"\"\"\n\t    tx = shampoo.apply(options)\n\t    init = tx.init(params)\n\t    def reduce(state, grad):\n\t      new_grad, new_state = tx.update(grad, state, params)\n\t      return new_state, new_grad\n\t    _, out_grads = jax.lax.scan(reduce, init, grads)\n\t    return grads, out_grads\n\t  @parameterized.parameters(\n", "      {'shape': (1, 2, 1)},\n\t      {'shape': (1, 1, 3, 1, 2, 1)},\n\t      {'shape': (2, 1, 3, 2)},\n\t      {'shape': (1, 1)},\n\t      {'shape': (1,)},\n\t  )\n\t  def test_unit_dims_raise(self, shape):\n\t    \"\"\"Assert raises if unit dimensions are present.\"\"\"\n\t    with self.assertRaises(ValueError):\n\t      self._unroll(shampoo.Options(), 1, shape)\n", "  def test_scalars(self):\n\t    \"\"\"Validate scalar parameters aren't preconditioned.\"\"\"\n\t    grads, out_grads = self._unroll(shampoo.Options(), 2, tuple())\n\t    np.testing.assert_allclose(grads, out_grads)\n\t  def _root(self, x, p):\n\t    \"\"\"Computes the matrix root x**(-1/(2*p)).\"\"\"\n\t    return shampoo._pth_inv_root(p * 2, x[np.newaxis, ...])[0]\n\t  @parameterized.parameters(1, 2)\n\t  def test_basic(self, ndim):\n\t    \"\"\"Check basic numerical example without blocking or decay.\"\"\"\n", "    options = shampoo.Options(second_moment_decay=1.0)\n\t    shape = (2,) * ndim\n\t    nsteps = 2\n\t    grads, out_grads = self._unroll(options, 2, shape)\n\t    l, r = 0, 0\n\t    for i in range(nsteps):\n\t      if len(shape) == 1:\n\t        l += np.multiply.outer(grads[i], grads[i])\n\t      elif len(shape) == 2:\n\t        l += grads[i].dot(grads[i].T)\n", "        r += grads[i].T.dot(grads[i])\n\t      pl, pr = self._root(l, len(shape)), r\n\t      if len(shape) == 2:\n\t        pr = self._root(r, len(shape))\n\t      pg = pl.dot(grads[i])\n\t      if len(shape) == 2:\n\t        pg = pg.dot(pr)\n\t      np.testing.assert_allclose(pg, out_grads[i], rtol=1e-3)\n\t  def test_basic_block(self):\n\t    \"\"\"Check basic numerical example with blocking.\"\"\"\n", "    options = shampoo.Options(second_moment_decay=1.0, block_size=2)\n\t    shape = (4,)\n\t    nsteps = 2\n\t    # Don't use unroll here to allow state-printing.\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n\t    grads = jax.random.normal(rng, (nsteps, *shape))\n\t    tx = shampoo.apply(options)\n\t    state = tx.init(params)\n\t    logging.info('init state: %s', state)\n", "    b0, b1 = 0, 0\n\t    for i in range(nsteps):\n\t      out_grad, state = tx.update(grads[i], state, params)\n\t      logging.info('state @ %s: %s', i, state)\n\t      g0, g1 = grads[i][:2], grads[i][2:]\n\t      b0 += np.multiply.outer(g0, g0)\n\t      b1 += np.multiply.outer(g1, g1)\n\t      p0, p1 = self._root(b0, len(shape)), self._root(b1, len(shape))\n\t      logging.info('g0 %s g1 %s', g0, g1)\n\t      logging.info('b0 %s b1 %s', b0, b1)\n", "      logging.info('p0 %s p1 %s', p0, p1)\n\t      pg = np.concatenate([p0.dot(g0), p1.dot(g1)], axis=0)\n\t      np.testing.assert_allclose(pg, out_grad, rtol=1e-3)\n\t  @parameterized.named_parameters(_make_invalid_cases())\n\t  def test_invalid(self, invalid_options):\n\t    with self.assertRaises(ValueError):\n\t      shampoo.apply(invalid_options)\n\t  @parameterized.named_parameters(_make_blockify_deblockify_cases())\n\t  def test_blockify_deblockify(self, shape, block_size):\n\t    rng = jax.random.PRNGKey(0)\n", "    x = jax.random.normal(rng, shape)\n\t    options = shampoo.Options(block_size=block_size)\n\t    meta = shampoo._blocks_metadata(options, x.shape, debug='')\n\t    bx = shampoo._blockify(x, meta)\n\t    dx = shampoo._deblockify(bx, meta)\n\t    self.assertSequenceEqual(dx.shape, x.shape)\n\t    np.testing.assert_array_equal(x, dx)\n\t  @parameterized.parameters(\n\t      [\n\t          {'decay': d, 'last': b}\n", "          for d, b in itertools.product([0, 0.8], [False, True])\n\t      ]\n\t  )\n\t  def test_basic_ema(self, decay, last):\n\t    \"\"\"Tests EMA accumulation in stats.\"\"\"\n\t    z = jnp.zeros((2,))\n\t    g = jnp.array([0.5, -0.5])\n\t    if last:\n\t      seq = jnp.stack([z, z, g])\n\t      one = jnp.stack([g])\n", "      expected_decay = 1 - decay\n\t    else:\n\t      seq = jnp.stack([g, z, z, g])\n\t      one = jnp.stack([g])\n\t      expected_decay = (1 - decay) * (decay**3 + 1)\n\t    decayed = shampoo.Options(second_moment_decay=decay)\n\t    no_decay = shampoo.Options(second_moment_decay=1.0)\n\t    last = self._unroll_concrete(decayed, z, seq)[1][-1]\n\t    last_no_decay = self._unroll_concrete(no_decay, z, one)[1][-1]\n\t    last_no_decay /= np.sqrt(expected_decay)\n", "    np.testing.assert_allclose(last, last_no_decay, rtol=1e-3)\n\t  @parameterized.named_parameters(_make_blockify_deblockify_cases())\n\t  def test_blocks_equality(self, shape, block_size):\n\t    rng = jax.random.PRNGKey(0)\n\t    nsteps = 3\n\t    grads = jax.random.normal(rng, (nsteps, *shape))\n\t    options = shampoo.Options(block_size=block_size)\n\t    meta = shampoo._blocks_metadata(options, shape, debug='')\n\t    grads_for_each_block = [[] for _ in range(meta.num_blocks)]\n\t    for grad in grads:\n", "      bgrad = shampoo._blockify(grad, meta)\n\t      for i in range(meta.num_blocks):\n\t        grads_for_each_block[i].append(jnp.take(bgrad, i, meta.blocks_axis))\n\t    last_grad = []\n\t    unblocked_options = shampoo.Options(block_size=1 + block_size)\n\t    for block in grads_for_each_block:\n\t      block = jnp.stack(block)\n\t      block_grads, block_out_grads = self._unroll_concrete(\n\t          unblocked_options, block[0], block\n\t      )\n", "      del block_grads\n\t      last_grad.append(block_out_grads[-1])\n\t    expected = jnp.stack(last_grad, axis=meta.blocks_axis)\n\t    expected = shampoo._deblockify(expected, meta)\n\t    actual = self._unroll_concrete(options, grads[0], grads)[1]\n\t    np.testing.assert_allclose(expected, actual[-1])\n\t  def test_stats_freq(self):\n\t    rng = jax.random.PRNGKey(0)\n\t    grads = jax.random.normal(rng, (9, 3))\n\t    options = shampoo.Options(update_statistics_freq=3)\n", "    _, out_grads = self._unroll_concrete(options, grads[0], grads)\n\t    options = shampoo.Options(update_statistics_freq=1)\n\t    _, out_grads_skip = self._unroll_concrete(options, grads[0], grads[::3])\n\t    np.testing.assert_allclose(out_grads[::3], out_grads_skip)\n\t  def test_precond_freq(self):\n\t    rng = jax.random.PRNGKey(0)\n\t    rng, key = jax.random.split(rng)\n\t    freq = 5\n\t    grads = jax.random.normal(rng, (freq * 2, 3))\n\t    rng1, rng2 = jax.random.split(key, 2)\n", "    seq1 = jnp.arange(freq, dtype=int)\n\t    seq2 = jnp.copy(seq1)\n\t    jax.random.shuffle(rng1, seq1)\n\t    jax.random.shuffle(rng2, seq2)\n\t    # Shuffle within groups of <freq>\n\t    shuffled = jnp.take(grads, jnp.concatenate([seq1, seq2 + freq]), axis=0)\n\t    grads = jnp.concatenate([jnp.zeros((1, 3)), grads])\n\t    shuffled = jnp.concatenate([jnp.zeros((1, 3)), shuffled])\n\t    options = shampoo.Options(\n\t        update_preconditioners_freq=freq, second_moment_decay=1\n", "    )\n\t    _, out_grads = self._unroll_concrete(options, grads[0], grads)\n\t    _, out_grads_shuf = self._unroll_concrete(options, grads[0], shuffled)\n\t    np.testing.assert_allclose(out_grads, out_grads_shuf)\n\t  def test_tree(self):\n\t    shape = (3, 2)\n\t    n = 4\n\t    options = shampoo.Options()\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n", "    grads = jax.random.normal(rng, (n, *shape))\n\t    _, out_grads = self._unroll_concrete(options, params, grads)\n\t    params = {'w': [{'b': params}]}\n\t    grads = {'w': [{'b': grads}]}\n\t    _, actual_out_grads = self._unroll_concrete(options, params, grads)\n\t    np.testing.assert_allclose(out_grads, actual_out_grads['w'][0]['b'])\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/optimizer.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tearfree optimizer implementation.\n\tOOM making your eyes water? Try the Tearfree Shampoo optimizer.\n\tThis module handles logic for\n\t1. Statistics/preconditioner update frequency\n\t2. Applying momentum\n\t3. Combining grafting and preconditioning updates, applying grafting\n\t4. Typical update procedures, like learning rate, momentum, etc.\n", "\"\"\"\n\timport dataclasses\n\tfrom typing import Union\n\timport chex\n\timport optax\n\tfrom precondition.tearfree import grafting\n\tfrom precondition.tearfree import momentum\n\tfrom precondition.tearfree import praxis_shim\n\tfrom precondition.tearfree import second_order\n\t@dataclasses.dataclass\n", "class TearfreeOptions:\n\t  \"\"\"Configuration dataclass for tearfree optimizer.\n\t  Attributes:\n\t    grafting_options: Grafting options to modify update norm (see\n\t      `grafting.Options`).\n\t    second_order_options: Second-order statistics tracking options (see\n\t      `second_order.Options`).\n\t    momentum_options: Momentum options (see `momentum.Options`).\n\t  \"\"\"\n\t  grafting_options: grafting.Options = dataclasses.field(\n", "      default_factory=grafting.Options\n\t  )\n\t  second_order_options: second_order.Options = dataclasses.field(\n\t      default_factory=second_order.Options\n\t  )\n\t  momentum_options: momentum.Options = dataclasses.field(\n\t      default_factory=momentum.Options\n\t  )\n\tdef tearfree(\n\t    learning_rate: Union[chex.Numeric, optax.Schedule],\n", "    options: TearfreeOptions,\n\t) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Tearfree optimizer, supports pjit and jit.\n\t  Preconditioned, grafted updates with momentum.\n\t  One key difference in the logic is to only use a single momentum between\n\t  the graft and preconditioned update. `distributed_shampoo` keeps a separate\n\t  `diagonal_momentum` buffer, but never uses it after preconditioning is\n\t  active (it is not used to adjust the grafting norm). This implies (1)\n\t  we save memory (only one momentum buffer), (2) we are identical to\n\t  `distributed_shampoo` if there is no warmup or no preconditioning\n", "  (`options.start_preconditioning_step` is inf or 0).\n\t  Args:\n\t    learning_rate: The learning rate value or schedule. Learning rate is\n\t      \"decoupled\", i.e., we always apply it last to the update (after weight\n\t      decay, after momentum, etc.).\n\t    options: Tearfree optimizer options.\n\t  Returns:\n\t    The sharded gradient transformation corresponding to an updated,\n\t      preconditioned gradient, times the negative learning rate.\n\t  \"\"\"\n", "  second_order_tx = second_order.apply(options.second_order_options)\n\t  graft_tx = grafting.graft(options.grafting_options, second_order_tx)\n\t  momentum_tx = momentum.apply(options.momentum_options)\n\t  if callable(learning_rate):\n\t    lr_tx = optax.scale_by_schedule(lambda x: -1.0 * learning_rate(x))\n\t  else:\n\t    lr_tx = optax.scale(-1.0 * learning_rate)\n\t  return praxis_shim.sharded_chain(\n\t      graft_tx,\n\t      momentum_tx,\n", "      lr_tx,\n\t  )\n"]}
{"filename": "precondition/tearfree/optimizer_smoke_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Smoke tests for tearfree.\n\tThe smoke test uses CPU-based sharding to verify that, under a variety of\n\tsettings, (1) the optimizer results in finite, not-nan gradients and (2)\n\tdistributed computation options don't change the math.\n\t\"\"\"\n\timport copy\n\tfrom typing import Sequence, Union\n", "from absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport chex\n\timport jax\n\tfrom jax import numpy as jnp\n\timport numpy as np\n\timport optax\n\tfrom precondition.tearfree import grafting\n\tfrom precondition.tearfree import momentum\n\tfrom precondition.tearfree import optimizer\n", "from precondition.tearfree import second_order\n\tfrom precondition.tearfree import shampoo\n\tfrom precondition.tearfree import sketchy\n\tdef _make_distributed_equality_cases() -> list[dict[str, ...]]:\n\t  \"\"\"Make test cases of options for optimizer checks.\"\"\"\n\t  cases = []\n\t  # Basic options exercise all of shampoo, grafting after the first step.\n\t  basic_options = optimizer.TearfreeOptions(\n\t      grafting_options=grafting.Options(\n\t          grafting_type=grafting.GraftingType.RMSPROP,\n", "          second_moment_decay=0.9,\n\t          epsilon=1e-5,\n\t          start_preconditioning_step=1,\n\t          skip_preconditioning_any_dim_gt=4096,\n\t          skip_preconditioning_rank1=False,\n\t      ),\n\t      second_order_options=second_order.Options(\n\t          second_order_type=second_order.SecondOrderType.SHAMPOO,\n\t          shampoo_options=shampoo.Options(\n\t              block_size=1024,\n", "              update_preconditioners_freq=1,\n\t              update_statistics_freq=1,\n\t              second_moment_decay=0.9,\n\t          ),\n\t          merge_dims=4096,\n\t      ),\n\t      momentum_options=momentum.Options(\n\t          ema=True,\n\t          nesterov=True,\n\t          momentum_decay=0.5,\n", "          weight_decay=0.0,\n\t          weight_decay_after_momentum=True,\n\t      ),\n\t  )\n\t  basic_case = {\n\t      'testcase_name': 'basic',\n\t      'nsteps': 3,\n\t      'options': basic_options,\n\t      'lr': 0.1,\n\t      'shape': (4,),\n", "  }\n\t  cases.append(basic_case)\n\t  case = copy.deepcopy(basic_case)\n\t  case['lr'] = lambda x: 0.1 / (x + 1)\n\t  case['testcase_name'] = 'schedule'\n\t  cases.append(case)\n\t  case = copy.deepcopy(basic_case)\n\t  second_order_options = case['options'].second_order_options\n\t  second_order_options.second_order_type = second_order.SecondOrderType.SKETCHY\n\t  second_order_options.shampoo_options = None\n", "  second_order_options.sketchy_options = sketchy.Options()\n\t  case['testcase_name'] = 'sketchy'\n\t  cases.append(case)\n\t  case = copy.deepcopy(case)\n\t  case['testcase_name'] += '_notrunc_lowrank'\n\t  sketchy_options = case['options'].second_order_options.sketchy_options\n\t  sketchy_options.truncate_numerical_noise = False\n\t  sketchy_options.rank = 2\n\t  cases.append(case)\n\t  case = copy.deepcopy(basic_case)\n", "  case['options'].grafting_options.grafting_type = (\n\t      grafting.GraftingType.ADAFACTOR\n\t  )\n\t  case['testcase_name'] = 'adafactor'\n\t  cases.append(case)\n\t  # Need to test we at least parallelize the identical-to-tensor shapes\n\t  # without any blocks.\n\t  # Additional variants:\n\t  # wd\n\t  # wd with decay before momentum\n", "  # grid of nesterov/ema\n\t  # exercise merge dims 2d doing a merge\n\t  # exercise merge dims 3d with only one thing merged\n\t  # skip preconditioning any dim gt activating\n\t  # skip preconditioning any dim gt rank1 activating\n\t  # update stats/precond every 2 (6 steps)\n\t  # update stats/precond every 2/4 (6 steps)\n\t  # Test block-wise parallelism for Shampoo\n\t  return cases\n\tclass OptimizerSmokeTest(parameterized.TestCase):\n", "  \"\"\"Basic test for optimizer configurations.\"\"\"\n\t  def _unroll(self, options, shape, transform=None, lr=0.1, n=4):\n\t    \"\"\"Generate states and grad updates n times.\"\"\"\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.zeros(shape)\n\t    grads = jax.random.normal(rng, (n, *shape))\n\t    if transform is not None:\n\t      params = transform(params)\n\t      grads = jnp.stack([transform(g) for g in grads])\n\t    tx = optimizer.tearfree(lr, options)\n", "    init = tx.init(params)\n\t    def reduce(state, grad):\n\t      new_grad, new_state = tx.update(grad, state, params)\n\t      return new_state, new_grad\n\t    _, out_grads = jax.lax.scan(reduce, init, grads)\n\t    return out_grads\n\t  @parameterized.named_parameters(_make_distributed_equality_cases())\n\t  def test_distributed_equality(\n\t      self,\n\t      options: optimizer.TearfreeOptions,\n", "      shape: Sequence[int],\n\t      lr: Union[float, optax.Schedule],\n\t      nsteps: int,\n\t  ) -> None:\n\t    single_core = self._unroll(options, shape, lr=lr, n=nsteps)\n\t    multi_core = self._unroll(options, shape, lr=lr, n=nsteps)\n\t    chex.assert_tree_all_finite(single_core)\n\t    np.testing.assert_allclose(single_core, multi_core)\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/second_order.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Various strategies for tracking second order statistics.\"\"\"\n\timport dataclasses\n\timport enum\n\tfrom typing import Optional\n\timport optax\n\tfrom precondition.tearfree import praxis_shim\n\tfrom precondition.tearfree import reshaper\n", "from precondition.tearfree import shampoo\n\tfrom precondition.tearfree import sketchy\n\t@enum.unique\n\tclass SecondOrderType(enum.Enum):\n\t  \"\"\"Different second order covariance tracking methods.\"\"\"\n\t  SHAMPOO = 'shampoo'\n\t  SKETCHY = 'sketchy'\n\t@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Toggle which second order statistics to track.\n", "  Attributes:\n\t    merge_dims: Merges small dimensions, see `reshaper.Options.merge_dims`.\n\t    second_order_type: Which optimizer to use for grafting updates.\n\t    shampoo_options: Options for blocked shampoo.\n\t    sketchy_options: Options for Sketchy.\n\t  \"\"\"\n\t  merge_dims: int = 1024\n\t  second_order_type: SecondOrderType = SecondOrderType.SHAMPOO\n\t  shampoo_options: Optional[shampoo.Options] = dataclasses.field(\n\t      default_factory=shampoo.Options\n", "  )\n\t  sketchy_options: Optional[sketchy.Options] = None\n\tdef apply(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Generate the second order update from options.\"\"\"\n\t  reshaper_options = _reshaper_options(options)\n\t  merge_tx = reshaper.merge(reshaper_options)\n\t  precond_tx = _update_stats_and_precondition(options)\n\t  def wrap_init(params: optax.Params):\n\t    reshaped_params, _ = merge_tx.update(params, merge_tx.init(params), params)\n\t    return precond_tx.init(reshaped_params)\n", "  # TODO(vladf): later, we'll need to wrap pspec as well.\n\t  wrapped_precond_tx = praxis_shim.ShardedGradientTransformation(\n\t      wrap_init, precond_tx.update, precond_tx.init_partition_spec\n\t  )\n\t  return praxis_shim.sharded_chain(\n\t      merge_tx,\n\t      wrapped_precond_tx,\n\t      reshaper.unmerge(reshaper_options),\n\t  )\n\tdef _reshaper_options(options: Options) -> reshaper.Options:\n", "  if options.second_order_type == SecondOrderType.SHAMPOO:\n\t    assert options.shampoo_options\n\t    block_size = options.shampoo_options.block_size\n\t    return reshaper.Options(options.merge_dims, block_size)\n\t  if options.second_order_type == SecondOrderType.SKETCHY:\n\t    return reshaper.Options(options.merge_dims, 0)\n\t  else:\n\t    raise ValueError(\n\t        'unknown second order type {}'.format(options.second_order_type)\n\t    )\n", "def _update_stats_and_precondition(\n\t    options: Options,\n\t) -> praxis_shim.ShardedGradientTransformation:\n\t  if options.second_order_type == SecondOrderType.SHAMPOO:\n\t    assert options.shampoo_options\n\t    return shampoo.apply(options.shampoo_options)\n\t  if options.second_order_type == SecondOrderType.SKETCHY:\n\t    assert options.sketchy_options\n\t    return sketchy.apply(options.sketchy_options)\n\t  else:\n", "    raise ValueError(\n\t        'unknown second order type {}'.format(options.second_order_type)\n\t    )\n"]}
{"filename": "precondition/tearfree/momentum_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for momentum implementation.\"\"\"\n\timport itertools\n\tfrom typing import Sequence\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n\tfrom jax import numpy as jnp\n", "import numpy as np\n\timport optax\n\tfrom precondition.tearfree import momentum\n\tdef _make_no_state_cases() -> Sequence[dict[str, ...]]:\n\t  bools = [False, True]\n\t  cases = []\n\t  for ema, nesterov, wd, wd_after in itertools.product(\n\t      bools, bools, [0.0, 0.9], bools\n\t  ):\n\t    momentum_decay = 0.0\n", "    options = momentum.Options(\n\t        ema,\n\t        nesterov,\n\t        momentum_decay,\n\t        wd,\n\t        wd_after,\n\t    )\n\t    cases.append({'options': options})\n\t  return cases\n\tdef _make_invalid_cases() -> Sequence[dict[str, ...]]:\n", "  \"\"\"Generate invalid cases which should throw.\"\"\"\n\t  return [\n\t      {\n\t          'testcase_name': 'momentum_neg',\n\t          'invalid_options': momentum.Options(\n\t              momentum_decay=-1.0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'wd_neg',\n", "          'invalid_options': momentum.Options(\n\t              weight_decay=-0.1,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'momentum_large',\n\t          'invalid_options': momentum.Options(\n\t              momentum_decay=1.1,\n\t          ),\n\t      },\n", "  ]\n\tclass MomentumTest(parameterized.TestCase):\n\t  \"\"\"Basic test for momentum implementation.\"\"\"\n\t  def _unroll(self, tx, n, extract=False, wd=0):\n\t    \"\"\"Generate states and grad updates n times.\"\"\"\n\t    rng = jax.random.PRNGKey(0)\n\t    params = jnp.ones((3,))\n\t    grads = jax.random.normal(rng, (n, 3)) + wd * params\n\t    init = tx.init(params)\n\t    def scan(state, grad):\n", "      new_grad, new_state = tx.update(grad, state, params)\n\t      return new_state, (new_state, new_grad)\n\t    _, (states, out_grad) = jax.lax.scan(scan, init, grads)\n\t    if not extract:\n\t      return out_grad\n\t    return self._extract_velocity(states), out_grad, grads\n\t  def _check_equal(self, expected_tx, actual_tx, nsteps):\n\t    expected_grads = self._unroll(expected_tx, nsteps)\n\t    actual_grads = self._unroll(actual_tx, nsteps)\n\t    np.testing.assert_allclose(expected_grads, actual_grads)\n", "  @parameterized.parameters(0.1, 0.9, 0.99)\n\t  def test_ema(self, decay):\n\t    \"\"\"Check that we simulate ema decay.\"\"\"\n\t    options = momentum.Options(ema=True, nesterov=False, momentum_decay=decay)\n\t    nsteps = 4\n\t    actual = momentum.apply(options)\n\t    expected = optax.ema(decay, debias=False)\n\t    self._check_equal(expected, actual, nsteps)\n\t  def _extract_velocity(self, state):\n\t    \"\"\"Asserts only velocity state exists, extracts it.\"\"\"\n", "    flat = jax.tree_util.tree_flatten(state)[0]\n\t    self.assertLen(flat, 1)\n\t    return flat[0]\n\t  @parameterized.parameters(itertools.product([False, True], repeat=2))\n\t  def test_wd_before_momentum(self, ema, nesterov):\n\t    options = momentum.Options(\n\t        ema=ema,\n\t        nesterov=nesterov,\n\t        momentum_decay=0.9,\n\t        weight_decay=0.0,\n", "    )\n\t    nsteps = 4\n\t    tx = momentum.apply(options)\n\t    expected_grads = self._unroll(tx, nsteps, wd=0.1)\n\t    options = momentum.Options(\n\t        ema=ema,\n\t        nesterov=nesterov,\n\t        momentum_decay=0.9,\n\t        weight_decay=0.1,\n\t        weight_decay_after_momentum=False,\n", "    )\n\t    tx = momentum.apply(options)\n\t    actual_grads = self._unroll(tx, nsteps)\n\t    np.testing.assert_allclose(expected_grads, actual_grads)\n\t  @parameterized.parameters(itertools.product([False, True], repeat=2))\n\t  def test_basic(self, ema, decay_after):\n\t    wd = 0.1 if decay_after else 0.0\n\t    if decay_after:\n\t      return\n\t    decay = 0.9\n", "    options = momentum.Options(\n\t        ema=ema,\n\t        nesterov=True,\n\t        momentum_decay=decay,\n\t        weight_decay=wd,\n\t        weight_decay_after_momentum=True,\n\t    )\n\t    tx = momentum.apply(options)\n\t    v, g, ig = self._unroll(tx, 2, extract=True)\n\t    ev = jnp.zeros((3,))\n", "    factor = (1 - decay) if ema else 1.0\n\t    ev += factor * ig[0]\n\t    self.assertSequenceAlmostEqual(v[0], ev, msg=v)\n\t    expected_grad = decay * ev + factor * ig[0]\n\t    expected_grad += jnp.ones((3,)) * wd\n\t    self.assertSequenceAlmostEqual(g[0], expected_grad)\n\t    ev = ev * decay + factor * ig[1]\n\t    self.assertSequenceAlmostEqual(v[1], ev, delta=1e-6)\n\t    expected_grad = decay * ev + factor * ig[1]\n\t    expected_grad += jnp.ones((3,)) * wd\n", "    self.assertSequenceAlmostEqual(g[1], expected_grad, delta=1e-6)\n\t  @parameterized.parameters(_make_no_state_cases())\n\t  def test_no_state(self, options):\n\t    \"\"\"Ensure no state is created when decay is 0.0.\"\"\"\n\t    assert options.momentum_decay == 0.0\n\t    tx = momentum.apply(options)\n\t    state = tx.init(jnp.zeros((3,)))\n\t    flat = jax.tree_util.tree_flatten(state)[0]\n\t    self.assertEmpty(flat)\n\t  @parameterized.named_parameters(_make_invalid_cases())\n", "  def test_invalid(self, invalid_options):\n\t    with self.assertRaises(ValueError):\n\t      momentum.apply(invalid_options)\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/momentum.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Momentum configuration and transform.\"\"\"\n\timport copy\n\timport dataclasses\n\tfrom typing import Union\n\timport jax\n\timport optax\n\tfrom precondition.tearfree import praxis_shim\n", "@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Configuration dataclass for momentum.\n\t  Notably, this class contains weight decay parameters. Why?\n\t  In classical convex literature, Nesterov acceleration applied to gradient\n\t  descent can be viewed as \"revising\" the last iterate's momentum based on\n\t  the gradient we observe immediately after taking a momentum \"gamble\"\n\t  (see viz, https://stats.stackexchange.com/a/191727).\n\t  To maintain this interpretation exactly, we would need to go against\n\t  the grain on how weight decay is implemented. Momentum must be the last*\n", "  gradient transformation applied to the iterate, which would require the\n\t  weight decay to be applied to the update before it's used to change\n\t  the velocity (momentum's state, the first moment).\n\t  In particular, AdamW and Adafactor suggest direct weight downscaling,\n\t  excluding weight decay from the velocity accumulation.\n\t  As a result, the true meaning of Nesterov acceleration here is better\n\t  understood literally, described in its parameter doc.\n\t  *Technically, some optimizers include the learning rate in the update used to\n\t  update the velocity (e.g., Adafactor), but others apply the learning rate\n\t  scaling last, after momentum (e.g., Adam). We can recover the former from the\n", "  latter by dividing the decay by the root of the learning rate, so this\n\t  particular \"gradient transformation\" shouldn't be viewed as affecting\n\t  the Nesterov interpretation, up to tuning constants.\n\t  Attributs:\n\t    ema: If true, momentum is computed as an exponential moving\n\t      average: `velocity(t+1) = decay * velocity(t) + (1 - decay) * update(t)`\n\t      If false, then uses \"trace\" accumulation for momentum:\n\t      `velocity(t+1) = decay * velocity(t) + update(t)`. Note that if the\n\t      updates were the same (they aren't) then these would be the same up to a\n\t      factor of `(1 - decay)`. This corresponds to distributed_shampoo argument\n", "      `moving_average_for_momentum`.\n\t    nesterov: Toggle for Nesterov acceleration. If false, then the new\n\t      update `update'(t+1)` simply equals `velocity(t+1)`. If true, then\n\t      `update'(t+1) = maybe_decay * update(t) + decay * velocity(t+1)`, where\n\t      `maybe_decay` is `(1 - decay)` if `ema` and 1 otherwise.\n\t    momentum_decay: The decay referred to in `ema` and `nesterov` formulas.\n\t    weight_decay: Add `weight_decay * x(t)` to the `update(t)` value, where\n\t      `x(t)` is the value of the current parameters.\n\t    weight_decay_after_momentum: Whether weight decay addition is performed\n\t      after the momentum transformation.\n", "  \"\"\"\n\t  ema: bool = False\n\t  nesterov: bool = True\n\t  momentum_decay: float = 0.9\n\t  weight_decay: float = 0.0\n\t  weight_decay_after_momentum: bool = True\n\tState = Union[optax.MaskedNode, optax.TraceState]\n\tdef apply(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Generate the momentum update from options.\"\"\"\n\t  _validate(options)\n", "  momentum_transforms = []\n\t  if options.momentum_decay:\n\t    if options.ema:\n\t      momentum_transforms.append(optax.scale(1 - options.momentum_decay))\n\t    momentum_transforms.append(\n\t        _sharded_trace(options.momentum_decay, options.nesterov)\n\t    )\n\t  wd_transforms = [optax.add_decayed_weights(options.weight_decay)] * (\n\t      options.weight_decay > 0.0\n\t  )\n", "  if options.weight_decay_after_momentum:\n\t    transforms = momentum_transforms + wd_transforms\n\t  else:\n\t    transforms = wd_transforms + momentum_transforms\n\t  return praxis_shim.sharded_chain(*transforms)\n\tdef _validate(options: Options):\n\t  \"\"\"Raise ValueError if options are invalid.\"\"\"\n\t  if not (0 <= options.momentum_decay <= 1):\n\t    raise ValueError(\n\t        'momentum_decay ({}) must be in [0, 1]'.format(options.momentum_decay)\n", "    )\n\t  if not (options.weight_decay >= 0):\n\t    raise ValueError(\n\t        'weight_decay ({}) must be >= 0'.format(options.weight_decay)\n\t    )\n\tdef _sharded_trace(\n\t    momentum: float, nesterov: bool\n\t) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Extend optax's trace to allow sharding.\"\"\"\n\t  trace = optax.trace(momentum, nesterov)\n", "  def init_pspec_fn(mdl_params):\n\t    def _opt_state_sharding_spec(var_hparams):\n\t      s_var_hparams = copy.deepcopy(var_hparams)\n\t      s_var_hparams.init = None\n\t      return s_var_hparams\n\t    mdl_sharding = jax.tree_map(_opt_state_sharding_spec, mdl_params)\n\t    return optax.TraceState(trace=mdl_sharding)\n\t  return praxis_shim.ShardedGradientTransformation(\n\t      trace.init, trace.update, init_pspec_fn\n\t  )\n"]}
{"filename": "precondition/tearfree/reshaper.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Parameter reshaping module.\"\"\"\n\timport dataclasses\n\timport functools\n\timport jax\n\tfrom jax import numpy as jnp\n\timport optax\n\tfrom precondition import distributed_shampoo\n", "@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Parameter reshaping options.\n\t  Attributes:\n\t    merge_dims: Collapse dimensions smaller than this number left-to-right,\n\t      e.g., [3, 1, 5, 2, 2] becomes [3, 5, 4] with `merge_dims = 4`. Notice\n\t      ordering, [2, 3, 2] becomes [6, 2] with `merge_dims = 6`, not its reverse.\n\t    block_size: If nonzero, pads all dimensions larger than the block size to a\n\t      multiple of the block size.\n\t  \"\"\"\n", "  merge_dims: int = 1024\n\t  block_size: int = 1024\n\t@dataclasses.dataclass\n\tclass _Shapes:\n\t  \"\"\"Shape container.\"\"\"\n\t  original_shape: list[int]\n\t  merged_shape: list[int]\n\t  padded_shape: list[int]\n\tdef _derive_shapes(options: Options, param: jax.Array) -> _Shapes:\n\t  \"\"\"Derive desired shapes from options.\"\"\"\n", "  merged = distributed_shampoo.merge_small_dims(param.shape, options.merge_dims)\n\t  if merged == [1]:\n\t    return _Shapes(\n\t        original_shape=list(param.shape),\n\t        merged_shape=[],\n\t        padded_shape=[],\n\t    )\n\t  if options.block_size == 0:\n\t    padded = merged\n\t  else:\n", "    padded = []\n\t    for s in merged:\n\t      if s >= options.block_size:\n\t        s = (s + options.block_size - 1) // options.block_size\n\t        s *= options.block_size\n\t      padded.append(s)\n\t  return _Shapes(\n\t      original_shape=list(param.shape),\n\t      merged_shape=merged,\n\t      padded_shape=padded,\n", "  )\n\tdef merge(options: Options) -> optax.GradientTransformation:\n\t  \"\"\"Merge and maybe pad gradients, leaving params alone.\"\"\"\n\t  if options.merge_dims < 2:\n\t    raise ValueError(\n\t        'merge_dims ({}) must be at least 2'.format(options.merge_dims)\n\t    )\n\t  if options.block_size < 2 and options.block_size != 0:\n\t    raise ValueError(\n\t        'block_size ({}) must be at least 2 (or 0 to disable)'.format(\n", "            options.block_size\n\t        )\n\t    )\n\t  def _merge(update: jax.Array, shapes: _Shapes) -> jax.Array:\n\t    assert list(update.shape) == shapes.original_shape, (update.shape, shapes)\n\t    merged = update.reshape(shapes.merged_shape)\n\t    padding = [\n\t        (0, p - m) for p, m in zip(shapes.padded_shape, shapes.merged_shape)\n\t    ]\n\t    if padding and options.block_size > 0:\n", "      return jnp.pad(merged, padding)\n\t    return merged\n\t  def update(\n\t      updates: optax.Updates,\n\t      state: optax.MaskedNode,\n\t      params: optax.Params,\n\t  ) -> tuple[optax.Updates, optax.MaskedNode]:\n\t    shapes = jax.tree_map(functools.partial(_derive_shapes, options), params)\n\t    new_updates = jax.tree_map(_merge, updates, shapes)\n\t    return new_updates, state\n", "  return optax.GradientTransformation(lambda _: optax.MaskedNode(), update)\n\tdef unmerge(options: Options) -> optax.GradientTransformation:\n\t  \"\"\"Unmerge and unpad gradients, leaving params alone.\"\"\"\n\t  def _unmerge(update: jax.Array, shapes: _Shapes) -> jax.Array:\n\t    assert list(update.shape) == shapes.padded_shape, (update.shape, shapes)\n\t    if options.block_size == 0:\n\t      merged = update\n\t    else:\n\t      merged = update[tuple(slice(0, m) for m in shapes.merged_shape)]\n\t    return merged.reshape(shapes.original_shape)\n", "  def update(\n\t      updates: optax.Updates,\n\t      state: optax.MaskedNode,\n\t      params: optax.Params,\n\t  ) -> tuple[optax.Updates, optax.MaskedNode]:\n\t    shapes = jax.tree_map(functools.partial(_derive_shapes, options), params)\n\t    new_updates = jax.tree_map(_unmerge, updates, shapes)\n\t    return new_updates, state\n\t  return optax.GradientTransformation(lambda _: optax.MaskedNode(), update)\n"]}
{"filename": "precondition/tearfree/praxis_shim.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Shim interfaces for praxis, to avoid circular dependencies.\"\"\"\n\timport dataclasses\n\tfrom typing import Any, NamedTuple, Union\n\timport jax\n\tfrom jax import numpy as jnp\n\timport optax\n\t@dataclasses.dataclass(frozen=True)\n", "class ShardedGradientTransformation:\n\t  \"\"\"GradientTransformation that supports spmd.\"\"\"\n\t  init: optax.TransformInitFn\n\t  update: optax.TransformUpdateFn\n\t  init_partition_spec: Any\n\tNestedHParams = Any\n\tclass WeightHParams(NamedTuple):\n\t  shape: list[int]\n\t  init: Any\n\t  dtype: jnp.dtype\n", "  collections: Any\n\t  tensor_split_dims_mapping: list[int]\n\tdef sharded_chain(\n\t    *args: Union[optax.GradientTransformation, ShardedGradientTransformation],\n\t) -> ShardedGradientTransformation:\n\t  \"\"\"Chain as in praxis.optimizers.sharded_chain.\"\"\"\n\t  def init_fn(params):\n\t    return tuple(fn.init(params) for fn in args)\n\t  def update_fn(updates, state, params=None):\n\t    if len(args) != len(state):\n", "      raise ValueError(\n\t          'The number of updates and states has to be the same in '\n\t          f'sharded chain. got {len(args)=}, {len(state)=}'\n\t      )\n\t    new_state = []\n\t    for s, fn in zip(state, args):\n\t      updates, new_s = fn.update(updates, s, params)\n\t      # Some of the new states may have None instead of optax.MaskedNode.\n\t      new_s = jax.tree_map(\n\t          lambda x: optax.MaskedNode() if x is None else x,\n", "          new_s,\n\t          is_leaf=lambda x: x is None,\n\t      )\n\t      new_state.append(new_s)\n\t    return updates, tuple(new_state)\n\t  def init_partition_spec_fn(mdl_vars):\n\t    partition_specs = []\n\t    for fn in args:\n\t      init_partition_spec = getattr(fn, 'init_partition_spec', None)\n\t      if callable(init_partition_spec):\n", "        nmap = init_partition_spec(mdl_vars)\n\t        partition_specs.append(nmap)\n\t      else:\n\t        # Raise ValueError as we are attempting to sharded_chain an optimizer\n\t        # that does not have an `init_partition_spec` method defined.\n\t        raise ValueError(\n\t            'Attempting to use an optimizer in sharded_chain that '\n\t            'does not have an init_partition_spec.'\n\t        )\n\t    return optax.MaskedState(inner_state=tuple(partition_specs))\n", "  return ShardedGradientTransformation(\n\t      init=init_fn, update=update_fn, init_partition_spec=init_partition_spec_fn\n\t  )\n"]}
{"filename": "precondition/tearfree/grafting_test.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Tests for grafting implementations.\"\"\"\n\timport functools\n\timport itertools\n\tfrom typing import Sequence\n\tfrom absl.testing import absltest\n\tfrom absl.testing import parameterized\n\timport jax\n", "from jax import numpy as jnp\n\timport numpy as np\n\timport optax\n\tfrom precondition.tearfree import grafting\n\tfrom precondition.tearfree import praxis_shim\n\tdef _minustwo() -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Generate a direction-reversing gradient transformation.\"\"\"\n\t  update = functools.partial(jax.tree_map, lambda x: -2 * x)\n\t  return praxis_shim.ShardedGradientTransformation(\n\t      lambda _: optax.EmptyState,\n", "      lambda u, s, _: (update(u), s),\n\t      optax.EmptyState,\n\t  )\n\tdef _make_invalid_cases() -> Sequence[dict[str, ...]]:\n\t  \"\"\"Generate invalid cases which should throw.\"\"\"\n\t  return [\n\t      {\n\t          'testcase_name': 'rmsprop_0',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.RMSPROP,\n", "              second_moment_decay=0.0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'rmsprop_neg',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.RMSPROP,\n\t              second_moment_decay=-1.0,\n\t              start_preconditioning_step=0,\n", "          ),\n\t      },\n\t      {\n\t          'testcase_name': 'rmsprop_eps_neg',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.RMSPROP,\n\t              epsilon=-1.0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n", "      {\n\t          'testcase_name': 'adafactor_0',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              second_moment_decay=-1.0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'adafactor_neg',\n", "          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              second_moment_decay=-1.0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'adafactor_not_less_than_1',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n", "              second_moment_decay=1.0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'adafactor_eps_neg',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              epsilon=-1.0,\n\t              start_preconditioning_step=0,\n", "          ),\n\t      },\n\t      {\n\t          'testcase_name': 'adafactor_min_size_0',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              min_dim_size_to_factor=0,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n", "      {\n\t          'testcase_name': 'adafactor_min_size_neg',\n\t          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              min_dim_size_to_factor=-1,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t      {\n\t          'testcase_name': 'adafactor_clip_less_than_1',\n", "          'invalid_options': grafting.Options(\n\t              grafting.GraftingType.ADAFACTOR,\n\t              clipping_threshold=0.5,\n\t              start_preconditioning_step=0,\n\t          ),\n\t      },\n\t  ]\n\tclass GraftingTest(parameterized.TestCase):\n\t  \"\"\"Basic test for grafting praxis_shim implementations.\"\"\"\n\t  def _check_equal(self, expected_tx, actual_tx, nsteps, shape=(3,)):\n", "    rng = jax.random.PRNGKey(0)\n\t    rng, key = jax.random.split(rng)\n\t    params = jax.random.normal(key, shape)\n\t    expected_state = expected_tx.init(params)\n\t    actual_state = actual_tx.init(params)\n\t    for i in range(nsteps):\n\t      rng, key = jax.random.split(rng)\n\t      grad = jax.random.normal(key, shape)\n\t      expected_grad, expected_state = expected_tx.update(\n\t          grad, expected_state, params\n", "      )\n\t      actual_grad, actual_state = actual_tx.update(grad, actual_state, params)\n\t      np.testing.assert_allclose(expected_grad, actual_grad, err_msg=i)\n\t  def test_no_graft(self):\n\t    \"\"\"Check that no graft behaves exactly as the base transform.\"\"\"\n\t    options = grafting.Options(\n\t        grafting.GraftingType.NONE,\n\t        0.0,\n\t        start_preconditioning_step=0,\n\t        skip_preconditioning_rank1=False,\n", "    )\n\t    grafted = grafting.graft(options, _minustwo())\n\t    nsteps = 4\n\t    self._check_equal(_minustwo(), grafted, nsteps)\n\t  def _check_norm_direction(\n\t      self,\n\t      norm_tx,\n\t      direction_tx,\n\t      actual_tx,\n\t      nsteps,\n", "      start_precond_step,\n\t      shape=(3,),\n\t  ):\n\t    rng = jax.random.PRNGKey(0)\n\t    rng, key = jax.random.split(rng)\n\t    params = jax.random.normal(key, shape)\n\t    state = actual_tx.init(params)\n\t    norm_state = norm_tx.init(params)\n\t    direction_state = norm_tx.init(params)\n\t    for i in range(nsteps):\n", "      rng, key = jax.random.split(rng)\n\t      grad = jax.random.normal(key, shape)\n\t      actual_grad, state = actual_tx.update(grad, state, params)\n\t      norm_grad, norm_state = norm_tx.update(grad, norm_state, params)\n\t      direction_grad, direction_state = direction_tx.update(\n\t          grad, direction_state, params\n\t      )\n\t      if i >= start_precond_step:\n\t        direction_norm = jnp.linalg.norm(direction_grad)\n\t        actual_norm = jnp.linalg.norm(actual_grad)\n", "        norm_norm = jnp.linalg.norm(norm_grad)\n\t        direction_grad_unit = direction_grad / direction_norm\n\t        actual_grad_unit = actual_grad / actual_norm\n\t        np.testing.assert_allclose(\n\t            direction_grad_unit, actual_grad_unit, rtol=1e-6\n\t        )\n\t        np.testing.assert_allclose(actual_norm, norm_norm, rtol=1e-6)\n\t      else:\n\t        np.testing.assert_allclose(norm_grad, actual_grad)\n\t  def _norm_tx(self, options):\n", "    if options.grafting_type == grafting.GraftingType.SGD:\n\t      return grafting._sgd()\n\t    if options.grafting_type == grafting.GraftingType.RMSPROP:\n\t      return grafting._rmsprop(options)\n\t    if options.grafting_type == grafting.GraftingType.ADAFACTOR:\n\t      return grafting._adafactor(options)\n\t    raise ValueError('unsupported grafting type ' + str(options.grafting_type))\n\t  @parameterized.parameters(\n\t      itertools.product(\n\t          [0, 1, 2], ['sgd', 'rmsprop', 'adafactor'], [(3,), (3, 2)]\n", "      )\n\t  )\n\t  def test_norm_direction(self, step, graft, shape):\n\t    \"\"\"Validate initial graft update, then switch to its norm.\"\"\"\n\t    options = grafting.Options(\n\t        grafting.GraftingType(graft),\n\t        0.9 if (graft == 'rmsprop' or graft == 'adafactor') else 0.0,\n\t        start_preconditioning_step=step,\n\t        skip_preconditioning_rank1=len(shape) > 1,\n\t        min_dim_size_to_factor=1\n", "    )\n\t    grafted = grafting.graft(options, _minustwo())\n\t    nsteps = 4\n\t    norm_tx = self._norm_tx(options)\n\t    self._check_norm_direction(\n\t        norm_tx, _minustwo(), grafted, nsteps, step, shape\n\t    )\n\t  @parameterized.parameters({'shape': s} for s in [tuple(), (3,), (5,), (5, 2)])\n\t  def test_skip(self, shape):\n\t    \"\"\"Make sure we skip preconditioning if out-of-bounds.\"\"\"\n", "    options = grafting.Options(\n\t        start_preconditioning_step=2,\n\t        skip_preconditioning_any_dim_gt=4,\n\t        skip_preconditioning_rank1=True,\n\t    )\n\t    grafted = grafting.graft(options, _minustwo())\n\t    nsteps = 4\n\t    norm_tx = self._norm_tx(options)\n\t    self._check_equal(norm_tx, grafted, nsteps, shape)\n\t  @parameterized.named_parameters(_make_invalid_cases())\n", "  def test_invalid(self, invalid_options):\n\t    with self.assertRaises(ValueError):\n\t      grafting.graft(invalid_options, _minustwo())\n\tif __name__ == '__main__':\n\t  absltest.main()\n"]}
{"filename": "precondition/tearfree/grafting.py", "chunked_list": ["# Copyright 2023 The precondition Authors.\n\t#\n\t# Licensed under the Apache License, Version 2.0 (the \"License\");\n\t# you may not use this file except in compliance with the License.\n\t# You may obtain a copy of the License at\n\t#\n\t#     http://www.apache.org/licenses/LICENSE-2.0\n\t#\n\t# Unless required by applicable law or agreed to in writing, software\n\t# distributed under the License is distributed on an \"AS IS\" BASIS,\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t# See the License for the specific language governing permissions and\n\t# limitations under the License.\n\t\"\"\"Grafting norm adjustment (https://openreview.net/forum?id=FpKgG31Z_i9).\"\"\"\n\timport copy\n\timport dataclasses\n\timport enum\n\timport functools\n\tfrom typing import Any, NamedTuple\n\timport chex\n", "from flax import struct\n\timport jax\n\tfrom jax import numpy as jnp\n\timport optax\n\tfrom precondition.tearfree import praxis_shim\n\t@enum.unique\n\tclass GraftingType(enum.Enum):\n\t  \"\"\"Different grafting types.\"\"\"\n\t  NONE = 'none'\n\t  SGD = 'sgd'\n", "  RMSPROP = 'rmsprop'\n\t  ADAFACTOR = 'adafactor'\n\t@dataclasses.dataclass\n\tclass Options:\n\t  \"\"\"Grafting configuration to change norms for updates.\n\t  A grafting update is computed as if it was running alongside the\n\t  tearfree optimizer. Its norm is used for updates. During the initial\n\t  few steps before preconditioning is applied, the grafting update\n\t  is used entirely.\n\t  Note that the grafting optimizer is ignorant of both weight decay,\n", "  learning rate, and the momentum.\n\t  Attributes:\n\t    grafting_type: Which optimizer to use for grafting updates.\n\t    second_moment_decay: Second moment accumulator decay. For ADA-Factor, this\n\t    value must be bounded between (0, 1). For RMSProp, the second moment\n\t    accumulator becomes sum if set to 1 (i.e., Adagrad), should be in (0, 1].\n\t    Must be 0 if unused (e.g., for SGD/NONE).\n\t    start_preconditioning_step: When to start applying preconditioning.\n\t    epsilon: Avoids divide by zero in RMSProp and ADA-Factor by adding this term\n\t      to the expression `(epsilon + acc)^(-1/2)` when taking the inverse square\n", "      root of the accumulator; should be non-negative.\n\t    skip_preconditioning_any_dim_gt: Skip second-order preconditioning if any\n\t      dimension of a tensor is greater than this value (only apply grafting\n\t      update). Argument ignored if NONE grafting.\n\t    skip_preconditioning_rank1: Skip preconditioning the tensor if the rank is 1\n\t      or less. Argument ignored if NONE grafting.\n\t    min_dim_size_to_factor: (Applies to ADA-Factor Only.) Only factor the\n\t      statistics if two array dimensions have at least this size.\n\t    multiply_by_parameter_scale: (Applies to ADA-Factor Only.) If True, then\n\t      scale learning_rate by parameter norm. If False, provided learning_rate is\n", "      absolute step size.\n\t    clipping_threshold: (Applies to ADA-Factor Only.) Clipping\n\t      threshold. Must be >= 1.\n\t  \"\"\"\n\t  grafting_type: GraftingType = GraftingType.RMSPROP\n\t  second_moment_decay: float = 0.999\n\t  start_preconditioning_step: int = 0\n\t  epsilon: float = 1e-23\n\t  skip_preconditioning_any_dim_gt: int = 4096\n\t  skip_preconditioning_rank1: bool = True\n", "  min_dim_size_to_factor: int = 128\n\t  multiply_by_parameter_scale: float = True\n\t  clipping_threshold: float = 1.0\n\tdef graft(\n\t    options: Options,\n\t    direction: praxis_shim.ShardedGradientTransformation,\n\t) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Generate the grafting update from options and direction update.\n\t  Args:\n\t    options: The grafting options.\n", "    direction: A sharded gradient transformation which determines the direction\n\t      of the update (grafting, if applied, changes the norm of this update).\n\t  Returns:\n\t    The wrapped transformation which applies either the grafting update\n\t    directly or the `direction` update with grafting norm, depending on the\n\t    current step or whether to apply grafting/preconditioning at all.\n\t  \"\"\"\n\t  _validate(options)\n\t  if options.grafting_type == GraftingType.NONE:\n\t    return direction\n", "  if options.grafting_type == GraftingType.SGD:\n\t    return _graft_with(direction, _sgd(), options)\n\t  if options.grafting_type == GraftingType.RMSPROP:\n\t    return _graft_with(\n\t        direction,\n\t        _rmsprop(options),\n\t        options,\n\t    )\n\t  if options.grafting_type == GraftingType.ADAFACTOR:\n\t    return _graft_with(\n", "        direction,\n\t        _adafactor(options),\n\t        options,\n\t    )\n\t  # check options for validity (SGD/none and no 2nd moment, appropriate range)\n\t  # test to check sharded gradient transform is otherwise identical to\n\t  #   praxis'\n\t  raise NotImplementedError\n\tdef _validate(options: Options):\n\t  \"\"\"Raise ValueError if the options have an invalid specification.\"\"\"\n", "  if options.grafting_type in [GraftingType.RMSPROP, GraftingType.ADAFACTOR]:\n\t    if options.epsilon < 0:\n\t      raise ValueError(\n\t          'epsilon ({}) should be non-negative'.format(options.epsilon)\n\t      )\n\t  if options.grafting_type == GraftingType.RMSPROP:\n\t    if not (0 < options.second_moment_decay <= 1.0):\n\t      raise ValueError(\n\t          'second_moment_decay ({}) not in (0, 1] for graft ({})'.format(\n\t              options.second_moment_decay, options.grafting_type\n", "          )\n\t      )\n\t  if options.grafting_type == GraftingType.ADAFACTOR:\n\t    if not (0 < options.second_moment_decay < 1.0):\n\t      raise ValueError(\n\t          'second_moment_decay ({}) not in (0, 1) for graft ({})'.format(\n\t              options.second_moment_decay, options.grafting_type\n\t          )\n\t      )\n\t    if not (0 < options.min_dim_size_to_factor):\n", "      raise ValueError(\n\t          'min_dim_size_to_factor ({}) should be positive for graft ({})'\n\t          .format(options.min_dim_size_to_factor, options.grafting_type)\n\t      )\n\t    if (options.clipping_threshold < 1):\n\t      raise ValueError(\n\t          'clipping_threshold ({}) should be >= 1 for graft ({})'\n\t          .format(options.clipping_threshold, options.grafting_type)\n\t      )\n\tdef _sgd() -> praxis_shim.ShardedGradientTransformation:\n", "  \"\"\"Create SGD sharded gradient transform.\"\"\"\n\t  grad_transform = optax.identity()\n\t  return praxis_shim.ShardedGradientTransformation(\n\t      grad_transform.init,\n\t      grad_transform.update,\n\t      optax.EmptyState,\n\t  )\n\tdef _adafactor(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Create AdaFactor sharded gradient transform.\"\"\"\n\t  tx = [optax.adafactor(\n", "      min_dim_size_to_factor=options.min_dim_size_to_factor,\n\t      decay_rate=options.second_moment_decay,\n\t      multiply_by_parameter_scale=options.multiply_by_parameter_scale,\n\t      eps=options.epsilon, clipping_threshold=options.clipping_threshold)]\n\t  # Sign flip: optax.adafactor uses descent direction in updates.\n\t  tx.append(optax.scale(-1))\n\t  grad_transform = optax.chain(*tx)\n\t  def _adafactor_pspec_fn(params_unused):\n\t    del params_unused\n\t    raise NotImplementedError\n", "  return praxis_shim.ShardedGradientTransformation(\n\t      grad_transform.init,\n\t      grad_transform.update,\n\t      _adafactor_pspec_fn,\n\t  )\n\t# Dummy wrapper for better state pretty printing, to identify what parameters\n\t# are for.\n\tclass RMSPropAccumulator(NamedTuple):\n\t  \"\"\"State holding the sum/ema of gradient squares so far.\"\"\"\n\t  acc: optax.Updates\n", "def _rmsprop(options: Options) -> praxis_shim.ShardedGradientTransformation:\n\t  \"\"\"Create RMSProp sharded gradient transform.\"\"\"\n\t  def init_fn(params):\n\t    acc = jax.tree_map(jnp.zeros_like, params)\n\t    return RMSPropAccumulator(acc=acc)\n\t  def update_fn(updates, state, params=None):\n\t    del params\n\t    def ema(prev, new):\n\t      second_moment_decay = options.second_moment_decay\n\t      snew = jnp.square(new)\n", "      if second_moment_decay == 1.0:\n\t        return snew + prev\n\t      else:\n\t        return snew * (1 - second_moment_decay) + second_moment_decay * prev\n\t    new_state = RMSPropAccumulator(jax.tree_map(ema, state.acc, updates))\n\t    epsilon = options.epsilon\n\t    new_updates = jax.tree_map(\n\t        lambda g, acc: g * jax.lax.rsqrt(acc + epsilon), updates, new_state.acc\n\t    )\n\t    return new_updates, new_state\n", "  def init_partition_spec_fn(mdl_params):\n\t    def _opt_state_sharding_spec(var_hparams):\n\t      s_var_hparams = copy.deepcopy(var_hparams)\n\t      s_var_hparams.init = None\n\t      return s_var_hparams\n\t    mdl_sharding = jax.tree_map(_opt_state_sharding_spec, mdl_params)\n\t    return RMSPropAccumulator(acc=mdl_sharding)\n\t  return praxis_shim.ShardedGradientTransformation(\n\t      init=init_fn, update=update_fn, init_partition_spec=init_partition_spec_fn\n\t  )\n", "class GraftingState(NamedTuple):\n\t  \"\"\"State holding the count for grafting.\"\"\"\n\t  count: jax.Array\n\t  direction: optax.OptState\n\t  norm: optax.OptState\n\tdef _graft_with(\n\t    direction: praxis_shim.ShardedGradientTransformation,\n\t    norm: praxis_shim.ShardedGradientTransformation,\n\t    options: Options,\n\t) -> praxis_shim.ShardedGradientTransformation:\n", "  \"\"\"Created a maybe-grafted update from a base update and a graft one.\"\"\"\n\t  start_preconditioning_step = options.start_preconditioning_step\n\t  mask = functools.partial(_mask_skipped, options)\n\t  def init_fn(params):\n\t    return GraftingState(\n\t        count=jnp.zeros([], jnp.int32),\n\t        direction=direction.init(mask(params)),\n\t        norm=norm.init(params),\n\t    )\n\t  def update_fn(updates, state, params=None):\n", "    base_updates, base_state = direction.update(\n\t        mask(updates), state.direction, mask(params)\n\t    )\n\t    graft_updates, graft_state = norm.update(updates, state.norm, params)\n\t    new_state = GraftingState(\n\t        count=state.count + 1,\n\t        direction=base_state,\n\t        norm=graft_state,\n\t    )\n\t    def maybe_graft(graft_upd, base):\n", "      if _masked(base):\n\t        return graft_upd\n\t      assert graft_upd.shape == base.shape\n\t      base_norm = jnp.linalg.norm(base)\n\t      multiplier = jnp.where(\n\t          base_norm > 0.0, jnp.linalg.norm(graft_upd) / base_norm, 0.0\n\t      )\n\t      return jnp.where(\n\t          state.count >= start_preconditioning_step,\n\t          base * multiplier,\n", "          graft_upd,\n\t      )\n\t    new_updates = jax.tree_map(\n\t        maybe_graft, graft_updates, base_updates, is_leaf=_masked\n\t    )\n\t    return new_updates, new_state\n\t  def init_partition_spec_fn(mdl_params):\n\t    count_pspec = praxis_shim.WeightHParams(\n\t        shape=[],\n\t        init=None,\n", "        dtype=jnp.int32,\n\t        collections=None,\n\t        tensor_split_dims_mapping=[],\n\t    )\n\t    return dict(\n\t        count=count_pspec,\n\t        direction=direction.init_partition_spec(mdl_params),\n\t        norm=norm.init_partition_spec(mdl_params),\n\t    )\n\t  return praxis_shim.ShardedGradientTransformation(\n", "      init_fn,\n\t      update_fn,\n\t      init_partition_spec_fn,\n\t  )\n\t@struct.dataclass\n\tclass _GraftMask:\n\t  \"\"\"Helper tuple which masks out params before preconditioning.\"\"\"\n\t  pass\n\tdef _mask_skipped(options: Options, tree: chex.ArrayTree) -> chex.ArrayTree:\n\t  \"\"\"Masks out arrays to which preconditioning should not be applied.\"\"\"\n", "  def _maybe_mask(x: jax.Array):\n\t    if options.skip_preconditioning_rank1 and x.ndim <= 1:\n\t      return _GraftMask()\n\t    if any(s > options.skip_preconditioning_any_dim_gt for s in x.shape):\n\t      return _GraftMask()\n\t    return x\n\t  return jax.tree_map(_maybe_mask, tree)\n\tdef _masked(tree_node: Any) -> bool:\n\t  \"\"\"Returns whether a tree node has been masked out.\"\"\"\n\t  return isinstance(tree_node, _GraftMask)\n"]}
