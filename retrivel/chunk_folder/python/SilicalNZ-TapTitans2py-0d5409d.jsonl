{"filename": "setup.py", "chunked_list": ["import setuptools\n\twith open(\"requirements.txt\") as fp:\n\t    requirements = fp.read().splitlines()\n\tsetuptools.setup(\n\t    name=\"TapTitans2py\",\n\t    version=\"1.4.3\",\n\t    license=\"MIT\",\n\t    url=\"https://gihtub.com/SilicalNZ/TapTitans2py\",\n\t    description=\"A Pythonic wrapper for the Tap Titans 2 API\",\n\t    long_description=\"A Pythonic wrapper for the Tap Titans 2 API\",\n", "    author=\"SilicalNZ@gmail.com\",\n\t    install_requires=requirements,\n\t    python_requires=\">=3.10\",\n\t    packages=[\"tap_titans.abcs\", \"tap_titans.handlers\", \"tap_titans.models\", \"tap_titans.providers\", \"tap_titans.utils\"],\n\t)\n"]}
{"filename": "tap_titans/__init__.py", "chunked_list": []}
{"filename": "tap_titans/utils/base.py", "chunked_list": ["from __future__ import annotations\n\tfrom typing import Any\n\timport json\n\tfrom pydantic import BaseModel as PyDanticBaseModel\n\t__all__ = (\n\t    \"BaseModel\",\n\t)\n\tclass BaseModel(PyDanticBaseModel):\n\t    _omit: set[str] = {}\n\t    @property\n", "    def _omitted_fields(self) -> set[str]:\n\t        return {\n\t            name\n\t            for name in self._omit\n\t            if not getattr(self, name, None)\n\t        }\n\t    def dict(\n\t        self,\n\t        **kwargs,\n\t    ) -> dict[str, Any]:\n", "        return super().dict(exclude=self._omitted_fields)\n\t    def json(\n\t        self,\n\t        **kwargs,\n\t    ) -> str:\n\t        return super().json(exclude=self._omitted_fields)\n\t    def dict_as_valid_json(\n\t        self,\n\t        **kwargs,\n\t    ) -> dict[str, Any]:\n", "        # This is so jank, but it seems Enums do not convert to json unless passed through pydantics json encoder\n\t        # Pydantics json encoder also seems to be a lambda x: x, so I really don't know what is going on\n\t        # Python is just dumb\n\t        return json.loads(self.json(**kwargs))\n"]}
{"filename": "tap_titans/utils/http_method.py", "chunked_list": ["from enum import Enum\n\tclass Method(str, Enum):\n\t    GET = \"GET\"\n\t    POST = \"POST\"\n\t    DELETE = \"DELETE\"\n\t    PATCH = \"PATCH\"\n\t    PUT = \"PUT\"\n"]}
{"filename": "tap_titans/utils/__init__.py", "chunked_list": []}
{"filename": "tap_titans/utils/utils.py", "chunked_list": ["from .base import *\n\tfrom .http_method import *\n"]}
{"filename": "tap_titans/tests/models.py", "chunked_list": ["import json\n\tfrom aiohttp.test_utils import TestCase\n\tfrom tap_titans.models import models\n\tclass ModelTest(TestCase):\n\t    def test_raid_unsub_clan(self):\n\t        models.ClanRemoved(**json.loads(_clan_unsub))\n\t    def test_raid_attack(self):\n\t        models.RaidAttack(**json.loads(_raid_attack))\n\t    # Waiting for an actual payload to be used here, since documentation is not correct\n\t    # def test_raid_start(self):\n", "    #     models.RaidStart(**json.loads(_raid_start))\n\t    def test_raid_sub_start(self):\n\t        models.RaidStart(**json.loads(_raid_sub_start))\n\t    def test_raid_end(self):\n\t        models.RaidEnd(**json.loads(_raid_end))\n\t    def test_raid_retire(self):\n\t        models.RaidRetire(**json.loads(_raid_retire))\n\t    def test_raid_cycle_reset(self):\n\t        models.RaidCycleReset(**json.loads(_raid_cycle_reset))\n\t    def test_raid_sub_cycle(self):\n", "        models.ClanAddedRaidCycleReset(**json.loads(_sub_cycle))\n\t    def test_raid_target(self):\n\t        models.RaidTarget(**json.loads(_raid_target))\n\t_clan_unsub = '''{\n\t    \"clan_code\": \"string\",\n\t    \"namespace\": \"string\",\n\t    \"token\": \"b5507016-7da2-4777-a161-1e8042a6a377\"\n\t}'''\n\t_raid_attack = '''{\"attack_log\": {\"attack_datetime\": \"2023-06-25T12:04:20Z\", \"cards_damage\": [\n\t    {\"titan_index\": 0, \"id\": null, \"damage_log\": [{\"id\": \"ArmorLegUpperRight\", \"value\": 9165775}]},\n", "    {\"titan_index\": 0, \"id\": \"LimbSupport\", \"damage_log\": []},\n\t    {\"titan_index\": 0, \"id\": \"Haymaker\", \"damage_log\": [{\"id\": \"ArmorLegUpperRight\", \"value\": 24201592}]}],\n\t                               \"cards_level\": [{\"id\": \"LimbSupport\", \"value\": 25}, {\"id\": \"Haymaker\", \"value\": 29},\n\t                                               {\"id\": \"AstralEcho\", \"value\": 44}]}, \"clan_code\": \"test\",\n\t                \"raid_id\": 123,\n\t                \"player\": {\"attacks_remaining\": 5, \"player_code\": \"test\", \"name\": \"test\", \"raid_level\": 700},\n\t                \"raid_state\": {\"current\": {\"enemy_id\": \"Enemy7\", \"current_hp\": 3662999993.0,\n\t                                           \"parts\": [{\"part_id\": \"BodyHead\", \"current_hp\": 1505900000.0},\n\t                                                     {\"part_id\": \"ArmorHead\", \"current_hp\": 1177297855.0},\n\t                                                     {\"part_id\": \"BodyChestUpper\", \"current_hp\": 1872200000.0},\n", "                                                     {\"part_id\": \"ArmorChestUpper\", \"current_hp\": 1211329190.0},\n\t                                                     {\"part_id\": \"BodyArmUpperRight\", \"current_hp\": 549450000.0},\n\t                                                     {\"part_id\": \"ArmorArmUpperRight\", \"current_hp\": 826088850.0},\n\t                                                     {\"part_id\": \"BodyArmUpperLeft\", \"current_hp\": 549450000.0},\n\t                                                     {\"part_id\": \"ArmorArmUpperLeft\", \"current_hp\": 826492148.0},\n\t                                                     {\"part_id\": \"BodyLegUpperRight\", \"current_hp\": 183150000.0},\n\t                                                     {\"part_id\": \"ArmorLegUpperRight\", \"current_hp\": 369419222.0},\n\t                                                     {\"part_id\": \"BodyLegUpperLeft\", \"current_hp\": 183150000.0},\n\t                                                     {\"part_id\": \"ArmorLegUpperLeft\", \"current_hp\": 403146919.0},\n\t                                                     {\"part_id\": \"BodyHandRight\", \"current_hp\": 549450000.0},\n", "                                                     {\"part_id\": \"ArmorHandRight\", \"current_hp\": 832376472.0},\n\t                                                     {\"part_id\": \"BodyHandLeft\", \"current_hp\": 549450000.0},\n\t                                                     {\"part_id\": \"ArmorHandLeft\", \"current_hp\": 835579661.0}]},\n\t                               \"titan_index\": 0}}'''\n\t_raid_sub_start = '''{\"clan_code\": \"test\", \"raid_id\": 123, \"keys_remaining\": 1,\n\t                   \"morale\": {\"bonus\": {\"BonusType\": \"AllRaidDamage\", \"BonusAmount\": 0.341}, \"used\": 13695},\n\t                   \"player\": {\"name\": \"string\", \"player_code\": \"string\"}, \n\t                   \"raid\": {\"spawn_sequence\": [\"Klonk\", \"Klonk\", \"Takedar\", \"Klonk\", \"Takedar\", \"Priker\"],\n\t                                          \"tier\": \"9999\", \"level\": \"55\", \"titans\": [\n\t            {\"enemy_id\": \"Enemy2\", \"total_hp\": 4070000000.0,\n", "             \"parts\": [{\"part_id\": \"BodyHead\", \"total_hp\": 1465200000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHead\", \"total_hp\": 1221000000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyChestUpper\", \"total_hp\": 1221000000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorChestUpper\", \"total_hp\": 1017500000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyArmUpperRight\", \"total_hp\": 381562500.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 305250000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 381562500.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 305250000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyLegUpperRight\", \"total_hp\": 457875000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 457875000.0, \"cursed\": false},\n", "                       {\"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 457875000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 457875000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyHandRight\", \"total_hp\": 381562500.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandRight\", \"total_hp\": 305250000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyHandLeft\", \"total_hp\": 381562500.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandLeft\", \"total_hp\": 305250000.0, \"cursed\": true}], \"enemy_name\": \"Takedar\",\n\t             \"area_debuffs\": [{\"bonus_type\": \"AllLimbsHPMult\", \"bonus_amount\": 0.5}],\n\t             \"cursed_debuffs\": [{\"bonus_type\": \"AfflictedDamagePerCurse\", \"bonus_amount\": -0.06}]},\n\t            {\"enemy_id\": \"Enemy7\", \"total_hp\": 3663000000.0,\n\t             \"parts\": [{\"part_id\": \"BodyHead\", \"total_hp\": 1505900000.0, \"cursed\": false},\n", "                       {\"part_id\": \"ArmorHead\", \"total_hp\": 1180300000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyChestUpper\", \"total_hp\": 1872200000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorChestUpper\", \"total_hp\": 1221000000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyArmUpperRight\", \"total_hp\": 549450000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 839437500.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 549450000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 839437500.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyLegUpperRight\", \"total_hp\": 183150000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 407000000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 183150000.0, \"cursed\": false},\n", "                       {\"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 407000000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyHandRight\", \"total_hp\": 549450000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandRight\", \"total_hp\": 839437500.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyHandLeft\", \"total_hp\": 549450000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandLeft\", \"total_hp\": 839437500.0, \"cursed\": true}], \"enemy_name\": \"Klonk\",\n\t             \"area_debuffs\": [{\"bonus_type\": \"AllArmsHPMult\", \"bonus_amount\": 0.5}],\n\t             \"cursed_debuffs\": [{\"bonus_type\": \"BodyDamagePerCurse\", \"bonus_amount\": -0.06}]},\n\t            {\"enemy_id\": \"Enemy8\", \"total_hp\": 4070000000.0,\n\t             \"parts\": [{\"part_id\": \"BodyHead\", \"total_hp\": 2075700000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHead\", \"total_hp\": 1424500000.0, \"cursed\": false},\n", "                       {\"part_id\": \"BodyChestUpper\", \"total_hp\": 1037850000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorChestUpper\", \"total_hp\": 1037850000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyArmUpperRight\", \"total_hp\": 518925000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 305250000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 518925000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 305250000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyLegUpperRight\", \"total_hp\": 203500000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 610500000.0, \"cursed\": false},\n\t                       {\"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 203500000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 610500000.0, \"cursed\": true},\n", "                       {\"part_id\": \"BodyHandRight\", \"total_hp\": 518925000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandRight\", \"total_hp\": 305250000.0, \"cursed\": true},\n\t                       {\"part_id\": \"BodyHandLeft\", \"total_hp\": 518925000.0, \"cursed\": false},\n\t                       {\"part_id\": \"ArmorHandLeft\", \"total_hp\": 305250000.0, \"cursed\": false}], \"enemy_name\": \"Priker\",\n\t             \"area_debuffs\": [{\"bonus_type\": \"AllTorsoHPMult\", \"bonus_amount\": 0.7}],\n\t             \"cursed_debuffs\": [{\"bonus_type\": \"AfflictedDamagePerCurse\", \"bonus_amount\": -0.06}]}],\n\t                                          \"area_buffs\": [{\"bonus_type\": \"ArmorDamage\", \"bonus_amount\": 0.25}]},\n\t                   \"start_at\": \"2023-06-25T12:03:02.453358\"}'''\n\t_raid_end = '''{\n\t    \"clan_code\": \"string\",\n", "    \"raid_id\": 0,\n\t    \"ended_at\": \"2019-08-24T14:15:22Z\",\n\t    \"keys_remaining\": 2,\n\t    \"raid_summary\": [\n\t        {\n\t            \"player_code\": \"string\",\n\t            \"name\": \"string\",\n\t            \"num_attacks\": 0,\n\t            \"total_damage\": 0,\n\t            \"log\": [\n", "                {\n\t                    \"enemy_id\": \"Enemy1\",\n\t                    \"titan_index\": 0,\n\t                    \"damage_log\": [\n\t                        {\n\t                            \"id\": \"ArmorLegUpperRight\",\n\t                            \"value\": 0\n\t                        }\n\t                    ]\n\t                }\n", "            ]\n\t        }\n\t    ]\n\t}'''\n\t_raid_retire = '''{\n\t    \"clan_code\": \"string\",\n\t    \"raid_id\": 0,\n\t    \"retired_at\": \"2019-08-24T14:15:22Z\",\n\t    \"player\": {\n\t        \"name\": \"string\",\n", "        \"player_code\": \"string\"\n\t    },\n\t    \"keys_remaining\": 2,\n\t    \"raid_summary\": [\n\t        {\n\t            \"player_code\": \"string\",\n\t            \"name\": \"string\",\n\t            \"num_attacks\": 0,\n\t            \"total_damage\": 0,\n\t            \"log\": [\n", "                {\n\t                    \"enemy_id\": \"Enemy1\",\n\t                    \"titan_index\": 0,\n\t                    \"damage_log\": [\n\t                        {\n\t                            \"id\": \"ArmorLegUpperRight\",\n\t                            \"value\": 0\n\t                        }\n\t                    ]\n\t                }\n", "            ]\n\t        }\n\t    ]\n\t}'''\n\t_raid_cycle_reset = '''{\n\t    \"clan_code\": \"string\",\n\t    \"raid_id\": 0,\n\t    \"started_at\": \"2019-08-24T14:15:22Z\",\n\t    \"raid_started_at\": \"2019-08-24T14:15:22Z\",\n\t    \"next_reset_at\": \"2019-08-24T14:15:22Z\",\n", "    \"card_bonuses\": [\n\t        {\n\t            \"id\": \"TeamTacticsClanMoraleBoost\",\n\t            \"value\": 0\n\t        }\n\t    ]\n\t}'''\n\t_sub_cycle = '''{\"card_bonuses\": [{\"id\": \"MirrorForceBoost\", \"value\": 0.35},\n\t                               {\"id\": \"TeamTacticsClanMoraleBoost\", \"value\": 0.062299999999999946}],\n\t              \"clan_code\": \"test\", \"next_reset_at\": \"2023-07-15T00:00:22Z\",\n", "              \"raid\": {\"area_buffs\": [{\"bonus_amount\": 0.15, \"bonus_type\": \"AllRaidDamage\"}], \"level\": \"68\",\n\t                       \"spawn_sequence\": [\"Terro\", \"Mohaca\", \"Sterl\", \"Terro\", \"Terro\", \"Sterl\", \"Mohaca\", \"Terro\"],\n\t                       \"tier\": \"9999\", \"titans\": [\n\t                      {\"area_debuffs\": [{\"bonus_amount\": 0.5, \"bonus_type\": \"AllLimbsHPMult\"}],\n\t                       \"cursed_debuffs\": [{\"bonus_amount\": -0.06, \"bonus_type\": \"BodyDamagePerCurse\"}],\n\t                       \"enemy_id\": \"Enemy4\", \"enemy_name\": \"Sterl\",\n\t                       \"parts\": [{\"cursed\": false, \"part_id\": \"BodyHead\", \"total_hp\": 816000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHead\", \"total_hp\": 816000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyChestUpper\", \"total_hp\": 2692800000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorChestUpper\", \"total_hp\": 1020000000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperRight\", \"total_hp\": 306000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 382500000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 306000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 382500000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperRight\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 765000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 765000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyHandRight\", \"total_hp\": 306000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHandRight\", \"total_hp\": 382500000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyHandLeft\", \"total_hp\": 306000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorHandLeft\", \"total_hp\": 382500000.0}],\n\t                       \"total_hp\": 4080000000.0},\n\t                      {\"area_debuffs\": [{\"bonus_amount\": 0.5, \"bonus_type\": \"AllArmsHPMult\"}],\n\t                       \"cursed_debuffs\": [{\"bonus_amount\": -0.06, \"bonus_type\": \"AfflictedDamagePerCurse\"}],\n\t                       \"enemy_id\": \"Enemy5\", \"enemy_name\": \"Mohaca\",\n\t                       \"parts\": [{\"cursed\": false, \"part_id\": \"BodyHead\", \"total_hp\": 1020000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorHead\", \"total_hp\": 1020000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyChestUpper\", \"total_hp\": 1020000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorChestUpper\", \"total_hp\": 2040000000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperRight\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 382500000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 382500000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperRight\", \"total_hp\": 836400000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 510000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 836400000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 510000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyHandRight\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHandRight\", \"total_hp\": 382500000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyHandLeft\", \"total_hp\": 612000000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHandLeft\", \"total_hp\": 382500000.0}],\n\t                       \"total_hp\": 4080000000.0},\n\t                      {\"area_debuffs\": [{\"bonus_amount\": 0.5, \"bonus_type\": \"ArmorLegsHPMult\"}],\n\t                       \"cursed_debuffs\": [{\"bonus_amount\": -0.06, \"bonus_type\": \"AfflictedDamagePerCurse\"}],\n\t                       \"enemy_id\": \"Enemy6\", \"enemy_name\": \"Terro\",\n\t                       \"parts\": [{\"cursed\": false, \"part_id\": \"BodyHead\", \"total_hp\": 1101600000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHead\", \"total_hp\": 1142400000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyChestUpper\", \"total_hp\": 1550400000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorChestUpper\", \"total_hp\": 1999200000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperRight\", \"total_hp\": 224400000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorArmUpperRight\", \"total_hp\": 255000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyArmUpperLeft\", \"total_hp\": 224400000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorArmUpperLeft\", \"total_hp\": 255000000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperRight\", \"total_hp\": 448800000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorLegUpperRight\", \"total_hp\": 642600000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyLegUpperLeft\", \"total_hp\": 448800000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorLegUpperLeft\", \"total_hp\": 642600000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"BodyHandRight\", \"total_hp\": 224400000.0},\n\t                                 {\"cursed\": false, \"part_id\": \"ArmorHandRight\", \"total_hp\": 255000000.0},\n", "                                 {\"cursed\": false, \"part_id\": \"BodyHandLeft\", \"total_hp\": 224400000.0},\n\t                                 {\"cursed\": true, \"part_id\": \"ArmorHandLeft\", \"total_hp\": 255000000.0}],\n\t                       \"total_hp\": 3060000000.0}]}, \"raid_id\": 2865891, \"raid_started_at\": \"2023-07-13T00:00:22Z\",\n\t              \"titan_target\": [{\"enemy_id\": \"Enemy4\",\n\t                                \"state\": [{\"id\": \"Head\", \"state\": \"2\"}, {\"id\": \"ChestUpper\", \"state\": \"2\"},\n\t                                          {\"id\": \"ArmUpperRight\", \"state\": \"2\"}, {\"id\": \"ArmUpperLeft\", \"state\": \"2\"},\n\t                                          {\"id\": \"LegUpperRight\", \"state\": \"1\"}, {\"id\": \"LegUpperLeft\", \"state\": \"1\"},\n\t                                          {\"id\": \"HandRight\", \"state\": \"2\"}, {\"id\": \"HandLeft\", \"state\": \"2\"}]},\n\t                               {\"enemy_id\": \"Enemy5\",\n\t                                \"state\": [{\"id\": \"Head\", \"state\": \"1\"}, {\"id\": \"ChestUpper\", \"state\": \"1\"},\n", "                                          {\"id\": \"ArmUpperRight\", \"state\": \"2\"}, {\"id\": \"ArmUpperLeft\", \"state\": \"2\"},\n\t                                          {\"id\": \"LegUpperRight\", \"state\": \"2\"}, {\"id\": \"LegUpperLeft\", \"state\": \"2\"},\n\t                                          {\"id\": \"HandRight\", \"state\": \"2\"}, {\"id\": \"HandLeft\", \"state\": \"2\"}]},\n\t                               {\"enemy_id\": \"Enemy6\",\n\t                                \"state\": [{\"id\": \"Head\", \"state\": \"1\"}, {\"id\": \"ChestUpper\", \"state\": \"2\"},\n\t                                          {\"id\": \"ArmUpperRight\", \"state\": \"2\"}, {\"id\": \"ArmUpperLeft\", \"state\": \"2\"},\n\t                                          {\"id\": \"LegUpperRight\", \"state\": \"2\"}, {\"id\": \"LegUpperLeft\", \"state\": \"2\"},\n\t                                          {\"id\": \"HandRight\", \"state\": \"2\"}, {\"id\": \"HandLeft\", \"state\": \"2\"}]}]}'''\n\t_raid_target = '''{\n\t    \"clan_code\": \"string\",\n", "    \"raid_id\": 0,\n\t    \"updated_at\": \"2019-08-24T14:15:22Z\",\n\t    \"player\": {\n\t        \"name\": \"string\",\n\t        \"player_code\": \"string\"\n\t    },\n\t    \"state\": [\n\t        {\n\t            \"id\": \"Head\",\n\t            \"state\": 0\n", "        }\n\t    ]\n\t}'''\n"]}
{"filename": "tap_titans/tests/__init__.py", "chunked_list": []}
{"filename": "tap_titans/handlers/__init__.py", "chunked_list": []}
{"filename": "tap_titans/models/raid_attack.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models import model_type\n\tfrom tap_titans.models.player import Player\n\tfrom tap_titans.models.code import ClanCode, PlayerCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidAttackRaidStateCurrentPart(BaseModel):\n\t    part_id: model_type.TitanPart\n\t    current_hp: int\n\tclass RaidAttackRaidStateCurrent(BaseModel):\n\t    current_hp: int\n", "    enemy_id: model_type.Enemy\n\t    parts: tuple[RaidAttackRaidStateCurrentPart, ...]\n\tclass RaidAttackRaidState(BaseModel):\n\t    titan_index: int\n\t    current: RaidAttackRaidStateCurrent\n\tclass RaidAttackCardLevel(BaseModel):\n\t    id: model_type.Card\n\t    value: int\n\tclass RaidAttackCardDamageLog(BaseModel):\n\t    id: model_type.TitanPart\n", "    value: int\n\tclass RaidAttackCardDamage(BaseModel):\n\t    titan_index: int\n\t    id: model_type.Card | None\n\t    damage_log: tuple[RaidAttackCardDamageLog, ...]\n\tclass RaidAttackLog(BaseModel):\n\t    cards_damage: tuple[RaidAttackCardDamage, ...]\n\t    cards_level: tuple[RaidAttackCardLevel, ...]\n\t    attack_datetime: datetime\n\tclass RaidAttackPlayer(Player):\n", "    raid_level: int\n\t    attacks_remaining: int\n\tclass RaidAttack(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n\t    player: RaidAttackPlayer\n\t    attack_log: RaidAttackLog\n\t    raid_state: RaidAttackRaidState\n"]}
{"filename": "tap_titans/models/raid_start.py", "chunked_list": ["from datetime import datetime\n\tfrom typing import Optional\n\tfrom pydantic import Field\n\tfrom tap_titans.models import model_type\n\tfrom tap_titans.models.player import Player\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.models.raid import Raid\n\tfrom tap_titans.utils.base import BaseModel\n\tclass TitanAreaDebuff(BaseModel):\n\t    bonus_type: str  # Change to enum when it is documented\n", "    bonus_amount: float\n\tclass TitanCursedDebuff(BaseModel):\n\t    bonus_type: str  # Change to enum when it is documented\n\t    bonus_amount: float\n\tclass RaidStartRaidTitanPart(BaseModel):\n\t    part_id: model_type.TitanPart\n\t    total_hp: int\n\t    cursed: bool\n\tclass RaidStartRaidTitan(BaseModel):\n\t    enemy_name: model_type.EnemyName\n", "    enemy_id: model_type.Enemy\n\t    total_hp: int\n\t    parts: tuple[RaidStartRaidTitanPart, ...]\n\t    area_debuffs: tuple[TitanAreaDebuff, ...]\n\t    cursed_debuffs: tuple[TitanCursedDebuff, ...]\n\tclass RaidStartRaidAreaBuff(BaseModel):\n\t    bonus_type: str  # Change to enum when it is documented\n\t    bonus_amount: float\n\tclass RaidStartRaid(Raid):\n\t    spawn_sequence: tuple[model_type.EnemyName, ...]\n", "    titans: tuple[RaidStartRaidTitan, ...]\n\t    area_buffs: tuple[RaidStartRaidAreaBuff, ...]\n\tclass RaidStartMoraleBonus(BaseModel):\n\t    # Tidy this up when it is fixed\n\t    transition_BonusType: Optional[str] = Field(default=None, alias=\"BonusType\")\n\t    transition_BonusAmount: Optional[float] = Field(default=None, alias=\"BonusAmount\")\n\t    transition_bonus_type: Optional[str] = Field(default=None, alias=\"bonus_type\")  # Change to enum when it is documented\n\t    transition_bonus_amount: Optional[float] = Field(default=None, alias=\"bonus_amount\")\n\t    @property\n\t    def bonus_type(self) -> str:\n", "        return self.transition_BonusType or self.transition_bonus_type\n\t    @property\n\t    def bonus_amount(self) -> float:\n\t        return self.transition_BonusAmount or self.transition_bonus_amount\n\tclass RaidStartMorale(BaseModel):\n\t    bonus: RaidStartMoraleBonus\n\t    used: int\n\tclass RaidStart(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n", "    player: Player\n\t    keys_remaining: int\n\t    morale: RaidStartMorale\n\t    raid: RaidStartRaid\n\t    start_at: datetime\n"]}
{"filename": "tap_titans/models/model_type.py", "chunked_list": ["from enum import Enum\n\tclass Event(str, Enum):\n\t    CONNECTED = \"connected\"\n\t    DISCONNECTED = \"disconnect\"\n\t    ERROR = \"error\"\n\t    CONNECTION_ERROR = \"connect_error\"\n\t    CLAN_REMOVED = \"unsub_clan\"\n\t    RAID_ATTACK = \"attack\"\n\t    RAID_START = \"start\"\n\t    CLAN_ADDED_RAID_START = \"sub_start\"\n", "    RAID_END = \"end\"\n\t    RAID_RETIRE = \"retire\"\n\t    RAID_CYCLE_RESET = \"cycle_reset\"\n\t    CLAN_ADDED_CYCLE = \"sub_cycle\"\n\t    RAID_TARGET_CHANGED = \"target\"\n\tclass TitanPart(str, Enum):\n\t    ArmorLegRight = \"ArmorLegUpperRight\"\n\t    ArmorHandLeft = \"ArmorHandLeft\"\n\t    ArmorHandRight = \"ArmorHandRight\"\n\t    ArmorLegLeft = \"ArmorLegUpperLeft\"\n", "    ArmorChest = \"ArmorChestUpper\"\n\t    ArmorArmRight = \"ArmorArmUpperRight\"\n\t    ArmorArmLeft = \"ArmorArmUpperLeft\"\n\t    ArmorHead = \"ArmorHead\"\n\t    BodyLegRight = \"BodyLegUpperRight\"\n\t    BodyHandLeft = \"BodyHandLeft\"\n\t    BodyHandRight = \"BodyHandRight\"\n\t    BodyLegLeft = \"BodyLegUpperLeft\"\n\t    BodyChest = \"BodyChestUpper\"\n\t    BodyArmRight = \"BodyArmUpperRight\"\n", "    BodyArmLeft = \"BodyArmUpperLeft\"\n\t    BodyHead = \"BodyHead\"\n\t    SkeletonLegRight = \"SkeletonLegUpperRight\"\n\t    SkeletonHandLeft = \"SkeletonHandLeft\"\n\t    SkeletonHandRight = \"SkeletonHandRight\"\n\t    SkeletonLegLeft = \"SkeletonLegUpperLeft\"\n\t    SkeletonChest = \"SkeletonChestUpper\"\n\t    SkeletonArmRight = \"SkeletonArmUpperRight\"\n\t    SkeletonArmLeft = \"SkeletonArmUpperLeft\"\n\t    SkeletonHead = \"SkeletonHead\"\n", "class CardBonus(str, Enum):\n\t    TeamTacticsClanMoraleBoost = \"TeamTacticsClanMoraleBoost\"\n\t    MirrorForceBoost = \"MirrorForceBoost\"\n\tclass Card(str, Enum):\n\t    MoonBeam = \"MoonBeam\"\n\t    Fragmentize = \"Fragmentize\"\n\t    SkullBash = \"SkullBash\"\n\t    RazorWind = \"RazorWind\"\n\t    WhipOfLightning = \"WhipOfLightning\"\n\t    ClanshipBarrage = \"BurstCount\"\n", "    PurifyingBlast = \"Purify\"\n\t    PsychicShackles = \"LimbBurst\"\n\t    FlakShot = \"FlakShot\"\n\t    CosmicHaymaker = \"Haymaker\"\n\t    ChainOfVengeance = \"ChainLightning\"\n\t    MirrorForce = \"MirrorForce\"\n\t    CelestialStatic = \"CelestialStatic\"\n\t    BurningInferno = \"BurningAttack\"\n\t    AcidDrench = \"PoisonAttack\"\n\t    DecayingAttack = \"DecayingAttack\"\n", "    FusionBomb = \"Fuse\"\n\t    GrimShadow = \"Shadow\"\n\t    ThrivingPlague = \"PlagueAttack\"\n\t    Radioactivity = \"Disease\"\n\t    RavenousSwarm = \"Swarm\"\n\t    RuinousRain = \"RuinousRust\"\n\t    CorrosiveBubbles = \"PowerBubble\"\n\t    Maelstrom = \"RuneAttack\"\n\t    CrushingInstinct = \"ExecutionersAxe\"\n\t    InsanityVoid = \"CrushingVoid\"\n", "    RancidGas = \"MentalFocus\"\n\t    InspiringForce = \"ImpactAttack\"\n\t    SoulFire = \"InnerTruth\"\n\t    VictoryMarch = \"FinisherAttack\"\n\t    PrismaticRift = \"SuperheatMetal\"\n\t    AncestralFavor = \"BurstBoost\"\n\t    GraspingVines = \"LimbSupport\"\n\t    TotemOfPower = \"TotemFairySkill\"\n\t    TeamTactics = \"TeamTactics\"\n\t    SkeletalSmash = \"SpinalTap\"\n", "    AstralEcho = \"AstralEcho\"\n\t    # Placeholder for api changes\n\t    UNKNOWN = \"UNKNOWN\"\n\t    @classmethod\n\t    def _missing_(cls, value: object):\n\t        return cls(cls.UNKNOWN)\n\tclass Enemy(str, Enum):\n\t    Enemy1 = \"Enemy1\"\n\t    Enemy2 = \"Enemy2\"\n\t    Enemy3 = \"Enemy3\"\n", "    Enemy4 = \"Enemy4\"\n\t    Enemy5 = \"Enemy5\"\n\t    Enemy6 = \"Enemy6\"\n\t    Enemy7 = \"Enemy7\"\n\t    Enemy8 = \"Enemy8\"\n\tclass EnemyName(str, Enum):\n\t    Lojak = \"Lojak\"\n\t    Takedar = \"Takedar\"\n\t    Jukk = \"Jukk\"\n\t    Sterl = \"Sterl\"\n", "    Mohaca = \"Mohaca\"\n\t    Terro = \"Terro\"\n\t    Klonk = \"Klonk\"\n\t    Priker = \"Priker\"\n\tclass TargetState(Enum):\n\t    NoTarget = 0\n\t    Crossed = 1\n\t    Checked = 2\n\tclass TargetStateStr(str, Enum):\n\t    NoTarget = \"0\"\n", "    Crossed = \"1\"\n\t    Checked = \"2\"\n\tclass TargetStatePart(str, Enum):\n\t    Head = \"Head\"\n\t    Chest = \"ChestUpper\"\n\t    ArmRight = \"ArmUpperRight\"\n\t    ArmLeft = \"ArmUpperLeft\"\n\t    LegRight = \"LegUpperRight\"\n\t    LegLeft = \"LegUpperLeft\"\n\t    HandRight = \"HandRight\"\n", "    HandLeft = \"HandLeft\"\n\tclass TitanRaidBonus(str, Enum):\n\t    RaidAttackDuration = \"RaidAttackDuration\"\n\t    AfflictedDamage = \"AfflictedDamage\"\n\t    AfflictedDuration = \"AfflictedDuration\"\n\t    LimbDamage = \"LimbDamage\"\n\t    AllRaidDamage = \"AllRaidDamage\"\n\t    SupportEffect = \"SupportEffect\"\n\t    AfflictedChance = \"AfflictedChance\"\n\t    ChestDamage = \"ChestDamage\"\n", "    HeadDamage = \"HeadDamage\"\n\t    BodyDamage = \"BodyDamage\"\n\t    ArmorDamage = \"ArmorDamage\"\n\t    BurstDamage = \"BurstDamage\"\n\t    BurstChance = \"BurstChance\"\n"]}
{"filename": "tap_titans/models/player.py", "chunked_list": ["from tap_titans.models.code import PlayerCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass Player(BaseModel):\n\t    name: str\n\t    player_code: PlayerCode\n"]}
{"filename": "tap_titans/models/models.py", "chunked_list": ["from .code import *\n\tfrom .message import *\n\tfrom .model_type import *\n\tfrom .player import *\n\tfrom .raid import *\n\tfrom .raid_attack import *\n\tfrom .raid_cycle_reset import *\n\tfrom .raid_end import *\n\tfrom .raid_retire import *\n\tfrom .raid_start import *\n", "from .raid_summary import *\n\tfrom .raid_target import *\n\tfrom .raid_sub_cycle import *\n"]}
{"filename": "tap_titans/models/message.py", "chunked_list": ["from uuid import UUID\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass Message(BaseModel):\n\t    message: str\n\tclass ClanRemoved(BaseModel):\n\t    clan_code: ClanCode\n\t    namespace: str\n\t    token: UUID\n"]}
{"filename": "tap_titans/models/raid_target.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models.player import Player\n\tfrom tap_titans.models.model_type import TargetStatePart, TargetState\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidTargetTitanState(BaseModel):\n\t    id: TargetStatePart\n\t    state: TargetState\n\tclass RaidTarget(BaseModel):\n\t    clan_code: ClanCode\n", "    raid_id: int\n\t    updated_at: datetime\n\t    player: Player\n\t    state: tuple[RaidTargetTitanState, ...]\n"]}
{"filename": "tap_titans/models/raid.py", "chunked_list": ["from tap_titans.utils.base import BaseModel\n\tclass Raid(BaseModel):\n\t    tier: int | str\n\t    level: int | str\n"]}
{"filename": "tap_titans/models/raid_summary.py", "chunked_list": ["from tap_titans.models import model_type\n\tfrom tap_titans.models.code import PlayerCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass DamageLog(BaseModel):\n\t    id: model_type.TitanPart\n\t    value: int\n\tclass Log(BaseModel):\n\t    enemy_id: model_type.Enemy\n\t    titan_index: int\n\t    damage_log: tuple[DamageLog, ...]\n", "class RaidSummary(BaseModel):\n\t    player_code: PlayerCode\n\t    name: str\n\t    num_attacks: int\n\t    total_damage: int\n\t    log: tuple[Log, ...]\n"]}
{"filename": "tap_titans/models/__init__.py", "chunked_list": []}
{"filename": "tap_titans/models/raid_retire.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models.raid_summary import RaidSummary\n\tfrom tap_titans.models.player import Player\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidRetire(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n\t    retired_at: datetime\n\t    player: Player\n", "    keys_remaining: int\n\t    raid_summary: tuple[RaidSummary, ...]\n"]}
{"filename": "tap_titans/models/raid_end.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models.raid_summary import RaidSummary\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidEnd(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n\t    ended_at: datetime\n\t    keys_remaining: int\n\t    raid_summary: tuple[RaidSummary, ...]\n"]}
{"filename": "tap_titans/models/raid_cycle_reset.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models.model_type import CardBonus\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidCycleResetCardBonus(BaseModel):\n\t    id: CardBonus\n\t    value: int\n\tclass RaidCycleReset(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n", "    raid_started_at: datetime\n\t    next_reset_at: datetime\n\t    card_bonuses: tuple[RaidCycleResetCardBonus, ...]\n"]}
{"filename": "tap_titans/models/raid_sub_cycle.py", "chunked_list": ["from datetime import datetime\n\tfrom tap_titans.models.model_type import CardBonus, TargetStatePart, TargetStateStr, Enemy\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.models.raid_start import RaidStartRaid\n\tfrom tap_titans.utils.base import BaseModel\n\tclass RaidCycleResetCardBonus(BaseModel):\n\t    id: CardBonus\n\t    value: int\n\tclass ClanAddedRaidTargetTitanState(BaseModel):\n\t    id: TargetStatePart\n", "    state: TargetStateStr\n\tclass ClanAddedRaidTarget(BaseModel):\n\t    enemy_id: Enemy\n\t    state: tuple[ClanAddedRaidTargetTitanState, ...]\n\tclass ClanAddedRaidCycleReset(BaseModel):\n\t    clan_code: ClanCode\n\t    raid_id: int\n\t    raid: RaidStartRaid\n\t    titan_target: tuple[ClanAddedRaidTarget, ...]\n\t    raid_started_at: datetime\n", "    next_reset_at: datetime\n\t    card_bonuses: tuple[RaidCycleResetCardBonus, ...]\n"]}
{"filename": "tap_titans/models/code.py", "chunked_list": ["class Code(str):\n\t    pass\n\tclass PlayerCode(Code):\n\t    pass\n\tclass ClanCode(Code):\n\t    pass\n"]}
{"filename": "tap_titans/providers/websocket.py", "chunked_list": ["from typing import Coroutine, Any, Callable\n\timport socketio\n\tfrom tap_titans.models import models\n\tAPI_URL = \"wss://tt2-public.gamehivegames.com\"\n\t_empty_coro = Coroutine[None, None, None]\n\tclass WebsocketClient:\n\t    def __init__(\n\t            self,\n\t            connected: Callable[[], _empty_coro] | None = None,\n\t            disconnected: Callable[[], _empty_coro] | None = None,\n", "            error: Callable[[models.Message], _empty_coro] | None = None,\n\t            connection_error: Callable[[models.Message], _empty_coro] | None = None,\n\t            clan_removed: Callable[[models.ClanRemoved], _empty_coro] | None = None,\n\t            raid_attack: Callable[[models.RaidAttack], _empty_coro] | None = None,\n\t            raid_start: Callable[[models.RaidStart], _empty_coro] | None = None,\n\t            clan_added_raid_start: Callable[[models.RaidStart], _empty_coro] | None = None,\n\t            raid_end: Callable[[models.RaidEnd], _empty_coro] | None = None,\n\t            raid_retire: Callable[[models.RaidRetire], _empty_coro] | None = None,\n\t            raid_cycle_reset: Callable[[models.RaidCycleReset], _empty_coro] | None = None,\n\t            clan_added_cycle: Callable[[models.ClanAddedRaidCycleReset], _empty_coro] | None = None,\n", "            raid_target_changed: Callable[[models.RaidTarget], _empty_coro] | None = None,\n\t            setting_validate_arguments: bool = True,\n\t            **kwargs,\n\t    ):\n\t        def _converter(func, convert_to):\n\t            if func is None:\n\t                return None\n\t            # Included this for backwards compatibility. Some users may be asking for a dict\n\t            if not setting_validate_arguments:\n\t                return func\n", "            async def __wrapper(arg: dict):\n\t                await func(convert_to(**arg))\n\t            return __wrapper\n\t        events: dict[models.Event, Any] = {\n\t            models.Event.CONNECTED: connected,\n\t            models.Event.DISCONNECTED: disconnected,\n\t            models.Event.ERROR: _converter(error, models.Message),\n\t            models.Event.CONNECTION_ERROR: _converter(connection_error, models.Message),\n\t            models.Event.CLAN_REMOVED: _converter(clan_removed, models.ClanRemoved),\n\t            models.Event.RAID_ATTACK: _converter(raid_attack, models.RaidAttack),\n", "            models.Event.RAID_START: _converter(raid_start, models.RaidStart),\n\t            models.Event.CLAN_ADDED_RAID_START: _converter(clan_added_raid_start, models.RaidStart),\n\t            models.Event.RAID_END: _converter(raid_end, models.RaidEnd),\n\t            models.Event.RAID_RETIRE: _converter(raid_retire, models.RaidRetire),\n\t            models.Event.RAID_CYCLE_RESET: _converter(raid_cycle_reset, models.RaidCycleReset),\n\t            models.Event.CLAN_ADDED_CYCLE: _converter(clan_added_cycle, models.ClanAddedRaidCycleReset),\n\t            models.Event.RAID_TARGET_CHANGED: _converter(raid_target_changed, models.RaidTarget),\n\t        }\n\t        self.sio = socketio.AsyncClient()\n\t        for key, value in events.items():\n", "            if value is not None:\n\t                self.sio.on(key.value, namespace=\"/raid\")(value)\n\t    async def connect(self, auth: str):\n\t        await self.sio.connect(\n\t            API_URL,\n\t            transports=[\"websocket\"],\n\t            headers={\"API-Authenticate\": auth},\n\t            socketio_path=\"api\",\n\t            namespaces=[\"/raid\"],\n\t        )\n", "        await self.sio.wait()\n"]}
{"filename": "tap_titans/providers/raid_rest.py", "chunked_list": ["from dataclasses import dataclass\n\timport aiohttp\n\tfrom tap_titans.abcs import raid_rest as abc\n\tfrom tap_titans.utils.http_method import Method\n\t_BASE_URL = \"https://tt2-public.gamehivegames.com/raid\"\n\t@dataclass\n\tclass RaidRestAPI(abc.RaidRestABC):\n\t    auth: str\n\t    async def _request(\n\t            self,\n", "            *,\n\t            method: Method,\n\t            endpoint: str = \"\",\n\t            payload: None | dict = None,\n\t            params: None | dict = None,\n\t    ) -> dict:\n\t        async with aiohttp.ClientSession(raise_for_status=True, headers={\"API-Authenticate\": self.auth}) as session:\n\t            async with session.request(\n\t                    method.value,\n\t                    f\"{_BASE_URL}{endpoint}\",\n", "                    json=payload,\n\t                    params=params,\n\t            ) as resp:\n\t                return await resp.json()\n\t    async def subscribe(self, player_tokens: list[str]) -> abc.SubscribeResp:\n\t        result = await self._request(\n\t            method=Method.POST,\n\t            endpoint=\"/subscribe\",\n\t            payload={\n\t                \"player_tokens\": player_tokens,\n", "            },\n\t        )\n\t        return abc.SubscribeResp(**result)\n\t    async def unsubscribe(self, player_tokens: list[str]) -> abc.SubscribeResp:\n\t        result = await self._request(\n\t            method=Method.POST,\n\t            endpoint=\"/unsubscribe\",\n\t            payload={\n\t                \"player_tokens\": player_tokens,\n\t            },\n", "        )\n\t        return abc.SubscribeResp(**result)\n"]}
{"filename": "tap_titans/providers/__init__.py", "chunked_list": []}
{"filename": "tap_titans/providers/public_api.py", "chunked_list": ["from dataclasses import dataclass\n\timport aiohttp\n\tfrom tap_titans.abcs import public_api as abc\n\tfrom tap_titans.abcs.public_api import HolidayEventBreakpoints, MasterTierLeaderboard, GlobalRaidInfo, UnknownError\n\tfrom tap_titans.utils.http_method import Method\n\t__all__ = (\n\t    \"PublicAPI\",\n\t    \"HolidayEventBreakpoints\",\n\t    \"MasterTierLeaderboard\",\n\t    \"GlobalRaidInfo\",\n", "    \"UnknownError\",\n\t)\n\t_BASE_URL = \"https://tt2.gamehivegames.com\"\n\t@dataclass\n\tclass PublicAPI(abc.PublicAPIABC):\n\t    async def _request(\n\t            self,\n\t            *,\n\t            endpoint: str = \"\",\n\t            payload: None | dict = None,\n", "            params: None | dict = None,\n\t    ) -> dict | UnknownError:\n\t        async with aiohttp.ClientSession(raise_for_status=True) as session:\n\t            async with session.request(\n\t                    Method.GET,\n\t                    f\"{_BASE_URL}{endpoint}\",\n\t                    json=payload,\n\t                    params=params,\n\t            ) as resp:\n\t                result = await resp.json()\n", "                if result.get(\"_error\") is not None:\n\t                    return UnknownError(**result)\n\t                return result\n\t    async def get_global_raid_info(self) -> GlobalRaidInfo | UnknownError:\n\t        result = await self._request(\n\t            endpoint=\"/global_raid/info\",\n\t        )\n\t        return GlobalRaidInfo(**result) if isinstance(result, dict) else result\n\t    async def get_master_tier_leaderboard(self) -> MasterTierLeaderboard | UnknownError:\n\t        result = await self._request(\n", "            endpoint=\"/clan/public/master_tier_leaderboard\",\n\t        )\n\t        return MasterTierLeaderboard(**result) if isinstance(result, dict) else result\n\t    async def get_holiday_event_breakpoints(self) -> HolidayEventBreakpoints | UnknownError:\n\t        result = await self._request(\n\t            endpoint=\"/holiday_event/breakpoint\",\n\t        )\n\t        return HolidayEventBreakpoints(**result) if isinstance(result, dict) else result\n"]}
{"filename": "tap_titans/providers/providers.py", "chunked_list": ["from .raid_rest import *\n\tfrom .websocket import *\n\tfrom .public_api import *\n"]}
{"filename": "tap_titans/abcs/raid_rest.py", "chunked_list": ["import abc\n\tfrom dataclasses import dataclass\n\tfrom tap_titans.models.code import ClanCode\n\tfrom tap_titans.utils.base import BaseModel\n\t__all__ = (\n\t    \"RaidRestABC\",\n\t    \"SubscribeResp\",\n\t    \"SubscribeRespOK\",\n\t    \"SubscribeRespRefused\",\n\t)\n", "class SubscribeRespOK(BaseModel):\n\t    token: str\n\t    clan_code: ClanCode\n\tclass SubscribeRespRefused(BaseModel):\n\t    token: str\n\t    reason: str\n\tclass SubscribeResp(BaseModel):\n\t    ok: tuple[SubscribeRespOK, ...]\n\t    refused: tuple[SubscribeRespRefused, ...]\n\t@dataclass\n", "class RaidRestABC(metaclass=abc.ABCMeta):\n\t    # https://tt2-docs.gamehivegames.com/rest/\n\t    @abc.abstractmethod\n\t    async def subscribe(self, player_tokens: list[str]) -> SubscribeResp:\n\t        raise NotImplementedError()\n\t    @abc.abstractmethod\n\t    async def unsubscribe(self, player_tokens: list[str]) -> SubscribeResp:\n\t        raise NotImplementedError()\n"]}
{"filename": "tap_titans/abcs/__init__.py", "chunked_list": []}
{"filename": "tap_titans/abcs/abcs.py", "chunked_list": ["from .raid_rest import *\n\tfrom .public_api import *\n"]}
{"filename": "tap_titans/abcs/public_api.py", "chunked_list": ["import abc\n\tfrom datetime import datetime\n\tfrom tap_titans.utils.base import BaseModel\n\tfrom pydantic import Field\n\tclass GlobalRaidInfo(BaseModel):\n\t    start_date: datetime\n\t    end_date: datetime\n\t    current_phase: int\n\t    current_hp: int\n\t    total_hp: int\n", "class MasterTierLeaderboardPlacement(BaseModel):\n\t    rank: int\n\t    name: str\n\t    code: str\n\t    level: int\n\tclass MasterTierLeaderboard(BaseModel):\n\t    season_id: str\n\t    leaderboard: tuple[MasterTierLeaderboardPlacement, ...]\n\tclass HolidayEventBreakpoint(BaseModel):\n\t    percentile: float\n", "    currency: int\n\tclass HolidayEventBreakpoints(BaseModel):\n\t    holiday_event_id: str\n\t    breakpoint: tuple[HolidayEventBreakpoint, ...]\n\tclass UnknownErrorContext(BaseModel):\n\t    extra: dict\n\t    http_code: int\n\t    message: str\n\tclass UnknownError(BaseModel):\n\t    error: UnknownErrorContext = Field(alias=\"_error\")\n", "class PublicAPIABC(metaclass=abc.ABCMeta):\n\t    # https://discord.com/channels/352838812646506497/1009101602570895400/1009110991713357824\n\t    @abc.abstractmethod\n\t    async def get_global_raid_info(self) -> GlobalRaidInfo | UnknownError:\n\t        raise NotImplementedError()\n\t    # https://discord.com/channels/352838812646506497/1009101602570895400/1009112684828033167\n\t    @abc.abstractmethod\n\t    async def get_master_tier_leaderboard(self) -> MasterTierLeaderboard | UnknownError:\n\t        raise NotImplementedError()\n\t    # https://discord.com/channels/352838812646506497/1009101602570895400/1065030272585834557\n", "    @abc.abstractmethod\n\t    async def get_holiday_event_breakpoints(self) -> HolidayEventBreakpoints | UnknownError:\n\t        raise NotImplementedError()\n"]}
{"filename": "examples/main.py", "chunked_list": ["import asyncio\n\tfrom tap_titans.providers import providers\n\tfrom tap_titans.models import models\n\t# ----\n\t# TOKEN should not be provided here, this is purely for an example\n\t# At minimum provide through .env\n\t# ----\n\tAUTH_TOKEN = \"\"\n\tPLAYER_TOKENS = [\"\"]\n\t# We have to subscribe after we connect\n", "async def connected():\n\t    print(\"Connected\")\n\t    r = providers.RaidRestAPI(AUTH_TOKEN)\n\t    resp = await r.subscribe(PLAYER_TOKENS)\n\t    if len(resp.refused) > 0:\n\t        print(\"Failed to subscribe to clan with reason:\", resp.refused[0].reason)\n\t    else:\n\t        print(\"Subscribed to clan:\", resp.ok[0].clan_code)\n\t# Here is an example of every event type with its corresponding object\n\t# Each message has a param called message. This is a python object that can be navigated through dot notation\n", "# View the corresponding object in the models directory\n\tasync def disconnected():\n\t    print(\"Disconnected\")\n\tasync def error(message: models.Message):\n\t    print(\"Error\", message)\n\tasync def connection_error(message: models.Message):\n\t    print(\"Connection Error\", message)\n\tasync def clan_removed(message: models.ClanRemoved):\n\t    print(\"Clan Removed\", message)\n\tasync def raid_attack(message: models.RaidAttack):\n", "    print(\"Raid Attack\", message)\n\tasync def raid_start(message: models.RaidStart):\n\t    print(\"Raid Start\", message)\n\tasync def clan_added_raid_start(message: models.RaidStart):\n\t    print(\"Clan Added Raid Start\", message)\n\tasync def raid_end(message: models.RaidEnd):\n\t    print(\"Raid End\", message)\n\tasync def raid_retire(message: models.RaidRetire):\n\t    print(\"Raid Retire\", message)\n\tasync def raid_cycle_reset(message: models.RaidCycleReset):\n", "    print(\"Raid Cycle Reset\", message)\n\tasync def clan_added_cycle(message: models.RaidCycleReset):\n\t    print(\"Clan Added Cycle\", message)\n\t    print(\"Raid level of clan\", message.raid.level)\n\tasync def raid_target_changed(message: models.RaidTarget):\n\t    print(\"Raid Target Changed\", message)\n\twsc = providers.WebsocketClient(\n\t    connected=connected,\n\t    disconnected=disconnected,\n\t    error=error,\n", "    connection_error=connection_error,\n\t    clan_removed=clan_removed,\n\t    raid_attack=raid_attack,\n\t    raid_start=raid_start,\n\t    clan_added_raid_start=clan_added_raid_start,\n\t    raid_end=raid_end,\n\t    raid_retire=raid_retire,\n\t    raid_cycle_reset=raid_cycle_reset,\n\t    clan_added_cycle=clan_added_cycle,\n\t    raid_target_changed=raid_target_changed,\n", "    setting_validate_arguments=True,\n\t)\n\tasyncio.run(wsc.connect(AUTH_TOKEN))\n"]}
